- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Heterogeneity, along with the multiplicity factor, leads to heightened complexity
    for any system development and operation. The enigmatic yet exemplary software
    engineering (SE) space is being stuffed and sandwiched with innumerable and heterogeneous
    technologies and tools. Their intended and insightful use seems a bit challenging,
    but their contributions are mesmerizing and meteoric indeed if utilized properly.
  prefs: []
  type: TYPE_NORMAL
- en: Interestingly, every kind of asset and artifact in our personal, professional,
    and social environments is being embedded and emboldened by pioneering software
    libraries. With continuous software penetration and participation in everything
    we touch, feel, and use, we are to have a bevy of sophisticated and smarter applications
    in plenty. Precisely speaking, we are heading toward the promised software-defined
    world. However, the developmental and operational complexities of next-generation
    software applications are literally threatening. That is, leveraging the various
    delectable advancements in the software engineering domain actually turns out
    to be a difficult affair. Therefore, there is a clarion call for unearthing easy
    to understand and use approaches to moderate software engineering complexity.
  prefs: []
  type: TYPE_NORMAL
- en: Accentuating, assimilating, and articulating architecturally sound principles
    for high-quality software implementation and delivery has been pronounced by technology
    experts, exponents, and evangelists as a workable way out of this dilemma. Elegantly
    employing architectural patterns, along with design, deployment, integration,
    and other specialized patterns, is the way forward for producing and running next-generation
    software solutions. An arsenal of software patterns (architecture, design, deployment,
    integration, and so on.) come in handy for the risk-free and rewarding production
    of highly reliable, scalable, available, performant, adaptive, and secure software
    systems. This book has been produced with the sole and simple aim of enumerating
    and expressing prominent and dominant software patterns for its readers. The various
    chapters and their unique contributions are briefly explained here.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](25ff3818-4844-41b1-9c0a-4facdaacb222.xhtml), *Demystifying Software
    Architecture Patterns*, illustrates the context for the book and describes the
    need for software patterns. The various architectural patterns are listed and
    explained in detail in order to convey the what, why, where, and how of architectural
    patterns.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](7ec23064-5a89-42ac-bd8b-3475eeafdcaf.xhtml), *Client/Server Multi-Tier
    Architectural Patterns*, covers the client-server architecture pattern, which
    is one of the oldest patterns in the enterprise architecture space. There are
    several variants available in this architectural space, such as two-tier client-server
    architecture patterns, three-tier patterns, and *n*-tier patterns. With the evolution
    of several new types of architecture for enterprises, client-server architecture
    has taken a back seat in enterprise architecture. The second part of this chapter
    covers web application patterns. The key types of web application patterns covered
    in this chapter are MVC, MVP, and MVVM. Several examples of each type of pattern
    are also provided in this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](3e743795-bd1a-4ae3-bee9-5041ea2aeff6.xhtml), *Object-Oriented Software
    Engineering Patterns*, covers object-oriented (OO) software engineering patterns.
    This chapter serves to give you a refresher on the fundamentals of OO design principles
    and best practices. We believe that OO programming patterns are the basis of the
    modern software design paradigm and help you get a better understanding of other
    patterns. This chapter covers various prominent creational, structural, and behavioral
    OO patterns, along with concurrency architectural patterns such as half-sync/half-async,
    and leader/followers as well.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](33629424-06c7-4e1c-87f8-367f303d49e5.xhtml), *Enterprise Integration
    Patterns*, describes the various enterprise integration patterns. In the modern
    world, there are a plethora of commercial applications. Some of them are commercial
    off-the-shelf applications, while others are legacy applications that are custom
    built as per the requirements of the organization. Since there are so many silos
    of applications within an enterprise, it becomes necessary to integrate them to
    ensure they work seamlessly. This chapter covers the key patterns that are available
    for enterprise integration. The key types of enterprise integration patterns that
    are covered in this chapter are messaging patterns, mobile integration patterns,
    and API management patterns.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](3bee4f54-fb06-49c9-96d9-7f3009da0fbb.xhtml), *Domain-Driven Design
    (DDD) Principles and Patterns*, illustrates **domain-driven design** (**DDD**)
    principles and patterns. This chapter helps you learn about DDD principles, practices,
    and a few critical patterns, and how they support technology and business excellence
    brought together to create sophisticated software. We focus on the domain, ubiquitous
    language communication, bounded contexts, aggregates, and more DDD aspects. This
    chapter covers a few critical and prominent DDD patterns to help you learn about
    strategic, tactical, legacy integration, distributed contexts, and also learn
    about two emerging patterns, domain events and event sourcing.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](ea8c8c24-d3ed-4a18-b731-44035f164caf.xhtml), *Enterprise Architecture
    Platforms and Tools*, presents the unique capabilities of enterprise architecture
    platforms and tools. Enterprise architecture helps to map all software-related
    processes in an enterprise into a framework in such a way that all the objectives
    of the enterprise are fulfilled. This chapter discusses two prominent enterprise
    architecture frameworks that are widely used in the IT industry landscape: TOGAF
    and Zachman''s framework. Some prominent architecture platforms and tools, such
    as Enterprise Architect, Dragon, and Abacus, are also discussed in this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](45460494-ac40-47e3-9d76-731dd2a48e12.xhtml), *Service-Oriented
    Architecture (SOA)*, demystifies the popular **service-oriented architecture**
    (**SOA**) patterns that produce service-oriented applications. This chapter provides
    details on the principles, best practices, and characteristics of SOA. You will
    also learn about the most common SOA patterns that deal with web service security,
    inter-service communication, messaging, service versioning, and service refactoring.
    This chapter has a table that helps you understand various patterns and their
    associated SOA principles.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](dd57ac86-dadf-486b-9ecd-068e1f8ffc59.xhtml), *Event-Driven Architectural
    Patterns*, covers emerging and evolving event-driven architecture patterns. Modern
    organizations are agile in nature and want to adopt architectural styles that
    permit them to work in an agile manner. Event-driven architectural patterns were
    developed mainly to meet this need. This chapter provides exhaustive coverage
    of popular event-driven patterns. Recent trends in the event-driven architecture
    space are also discussed in this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](45854889-267b-45bb-b951-a54c22f5d850.xhtml), *Microservices Architecture
    Patterns*, explains the various **microservices architecture** (**MSA**). With
    containerization spreading its wings wider, the roles and responsibilities of
    microservices in producing enterprise-scale, elastic, extensible, and dynamic
    applications is bound to increase. The various architecture and design patterns
    are explained, along with use cases.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](b804250c-b28b-4057-ae1d-c95a252bb60a.xhtml), *Patterns for Containerized
    and Highly Reliable Applications*, talks about the distinct contributions of various
    design patterns for producing containerized and highly reliable applications.
    The convergence of containers and microservices, along with the arrival of various
    container and cluster management and orchestration platforms, guarantees the realization
    of highly resilient microservices that in turn lead to reliable applications.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11](ea7a81f1-7483-4865-8de3-b61675199994.xhtml), *Software-Defined
    Clouds - Architecture and Design Patterns*, provides information about cloud application
    architecture and its various design patterns. As we all know, all kinds of legacy
    and monolithic applications are being modernized and migrated to cloud environments.
    This chapter prescribes the ways and means of smartly leveraging the patterns
    for swift and sagacious cloud adoption.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 12](f7942d4d-0f3c-4aed-ac2c-42a61867d40b.xhtml), *Big Data Architecture
    and Design Patterns*, provides you with a head start with big data architecture
    patterns and big data design patterns. The patterns are grouped by layers, such
    as the data ingestion layer, data storage layer, and data access layer, to help
    you learn about unified architecture involving data sources, data messaging, data
    analysis, and consumption. A few of the prominent patterns covered in this chapter
    are data lakes, lambda architecture, short summaries for workload patterns, polyglots,
    and connectors. This chapter also covers a few of the fundamentals of big data.'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are no specific requirements before you start with this book. You will
    find all the required information as you go through the chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book will empower and enrich IT architects (such as enterprise architects,
    software product architects, and solution and system architects), technical consultants,
    evangelists, and experts.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of text styles that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "We
    can include other contexts through the use of the `include` directive."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: New terms and important words are shown in bold.
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Reader feedback
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome. Let us know what you think about
    this book-what you liked or disliked. Reader feedback is important for us as it
    helps us develop titles that you will really get the most out of. To send us general
    feedback, simply e-mail `feedback@packtpub.com`, and mention the book's title
    in the subject of your message. If there is a topic that you have expertise in
    and you are interested in either writing or contributing to a book, see our author
    guide at [www.packtpub.com/authors](http://www.packtpub.com/authors).
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the color images of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We also provide you with a PDF file that has color images of the screenshots/diagrams
    used in this book. The color images will help you better understand the changes
    in the output. You can download this file from [https://www.packtpub.com/sites/default/files/downloads/ArchitecturalPatterns_ColorImages.pdf](https://www.packtpub.com/sites/default/files/downloads/ArchitecturalPatterns_ColorImages.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: Errata
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although we have taken every care to ensure the accuracy of our content, mistakes
    do happen. If you find a mistake in one of our books-maybe a mistake in the text
    or the code-we would be grateful if you could report this to us. By doing so,
    you can save other readers from frustration and help us improve subsequent versions
    of this book. If you find any errata, please report them by visiting [http://www.packtpub.com/submit-errata](http://www.packtpub.com/submit-errata),
    selecting your book, clicking on the Errata Submission Form link, and entering
    the details of your errata. Once your errata are verified, your submission will
    be accepted and the errata will be uploaded to our website or added to any list
    of existing errata under the Errata section of that title. To view the previously
    submitted errata, go to [https://www.packtpub.com/books/content/support](https://www.packtpub.com/books/content/support)
    and enter the name of the book in the search field. The required information will
    appear under the Errata section.
  prefs: []
  type: TYPE_NORMAL
- en: Piracy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Piracy of copyrighted material on the Internet is an ongoing problem across
    all media. At Packt, we take the protection of our copyright and licenses very
    seriously. If you come across any illegal copies of our works in any form on the
    Internet, please provide us with the location address or website name immediately
    so that we can pursue a remedy. Please contact us at `copyright@packtpub.com`
    with a link to the suspected pirated material. We appreciate your help in protecting
    our authors and our ability to bring you valuable content.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have a problem with any aspect of this book, you can contact us at `questions@packtpub.com`,
    and we will do our best to address the problem.
  prefs: []
  type: TYPE_NORMAL
