["```cpp\nSDL_Window* m_pWindow;\nSDL_Renderer* m_pRenderer;\n\nSDL_Texture* m_pTexture; // the new SDL_Texture variable\nSDL_Rect m_sourceRectangle; // the first rectangle\nSDL_Rect m_destinationRectangle; // another rectangle\n```", "```cpp\n    SDL_Surface* pTempSurface = SDL_LoadBMP(\"assets/rider.bmp\");\n\n    m_pTexture = SDL_CreateTextureFromSurface(m_pRenderer, pTempSurface);\n\n    SDL_FreeSurface(pTempSurface);\n    ```", "```cpp\n    SDL_QueryTexture(m_pTexture, NULL, NULL, &m_sourceRectangle.w, &m_sourceRectangle.h);\n    ```", "```cpp\n    m_destinationRectangle.x = m_sourceRectangle.x = 0;\n    m_destinationRectangle.y = m_sourceRectangle.y = 0;\n    m_destinationRectangle.w = m_sourceRectangle.w;\n    m_destinationRectangle.h = m_sourceRectangle.h;\n    ```", "```cpp\n    SDL_RenderCopy(m_pRenderer, m_pTexture, &m_sourceRectangle, &m_destinationRectangle);\n    ```", "```cpp\n    m_sourceRectangle.w = 50;\n    m_sourceRectangle.h = 50;\n    ```", "```cpp\n    m_destinationRectangle.x = 100;\n    m_destinationRectangle.y = 100;\n    ```", "```cpp\n    m_sourceRectangle.x = 50;\n    m_sourceRectangle.y = 50;\n    ```", "```cpp\n    SDL_RenderCopy(m_pRenderer, m_pTexture, 0, 0);\n    ```", "```cpp\n    SDL_Surface* pTempSurface = SDL_LoadBMP(\"assets/animate.bmp\");\n    ```", "```cpp\n    m_sourceRectangle.w = 128;\n    m_sourceRectangle.h = 82;\n    ```", "```cpp\n    SDL_RenderCopy(m_pRenderer, m_pTexture, &m_sourceRectangle, &m_destinationRectangle);\n    ```", "```cpp\n    void Game::update()\n    {\n      m_sourceRectangle.x = 128 * int(((SDL_GetTicks() / 100) % 6));\n    }\n    ```", "```cpp\nvoid Game::render()\n{\n  SDL_RenderClear(m_pRenderer);\n\n  SDL_RenderCopyEx(m_pRenderer, m_pTexture,\n  &m_sourceRectangle, &m_destinationRectangle,\n  0, 0, SDL_FLIP_HORIZONTAL); // pass in the horizontal flip\n\n  SDL_RenderPresent(m_pRenderer);\n}\n```", "```cpp\nSDL_Surface* pTempSurface = SDL_LoadBMP(\"assets/animate.bmp\");\n```", "```cpp\nSDL_Surface* pTempSurface = IMG_Load(\"assets/animate.png\");\n```", "```cpp\nSDL_SetRenderDrawColor(m_pRenderer, 255,0,0,255);\n```", "```cpp\nSDL_Surface* pTempSurface = IMG_Load(\"assets/animate-alpha.png\");\n```", "```cpp\n    bool load(std::string fileName,std::string id, SDL_Renderer* pRenderer);\n    ```", "```cpp\n    // draw\n    void draw(std::string id, int x, int y, int width, int height, SDL_Renderer* pRenderer, SDL_RendererFlip flip = SDL_FLIP_NONE);\n\n    // drawframe\n\n    void drawFrame(std::string id, int x, int y, int width, int height, int currentRow, int currentFrame, SDL_Renderer* pRenderer, SDL_RendererFlip flip = SDL_FLIP_NONE);\n    ```", "```cpp\n    std::map<std::string, SDL_Texture*> m_textureMap;\n    ```", "```cpp\n    bool TextureManager::load(std::string fileName, std::string id, SDL_Renderer* pRenderer)\n    {\n      SDL_Surface* pTempSurface = IMG_Load(fileName.c_str());\n\n      if(pTempSurface == 0)\n      {\n        return false;\n      }\n\n      SDL_Texture* pTexture = \n      SDL_CreateTextureFromSurface(pRenderer, pTempSurface);\n\n      SDL_FreeSurface(pTempSurface);\n\n      // everything went ok, add the texture to our list\n      if(pTexture != 0)\n      {\n        m_textureMap[id] = pTexture;\n        return true;\n      }\n\n      // reaching here means something went wrong\n      return false;\n    }\n    ```", "```cpp\n    void TextureManager::draw(std::string id, int x, int y, int width, int height, SDL_Renderer* pRenderer, SDL_RendererFlip flip)\n    {\n      SDL_Rect srcRect;\n      SDL_Rect destRect;\n\n      srcRect.x = 0;\n      srcRect.y = 0;\n      srcRect.w = destRect.w = width;\n      srcRect.h = destRect.h = height;\n      destRect.x = x;\n      destRect.y = y;\n\n      SDL_RenderCopyEx(pRenderer, m_textureMap[id], &srcRect, \n      &destRect, 0, 0, flip);\n    }\n    ```", "```cpp\n    void TextureManager::drawFrame(std::string id, int x, int y, int width, int height, int currentRow, int currentFrame, SDL_Renderer *pRenderer, SDL_RendererFlip flip)\n    {\n      SDL_Rect srcRect;\n      SDL_Rect destRect;\n      srcRect.x = width * currentFrame;\n      srcRect.y = height * (currentRow - 1);\n      srcRect.w = destRect.w = width;\n      srcRect.h = destRect.h = height;\n      destRect.x = x;\n      destRect.y = y;\n\n      SDL_RenderCopyEx(pRenderer, m_textureMap[id], &srcRect, \n      &destRect, 0, 0, flip);\n    }\n    ```", "```cpp\n    int m_currentFrame;\n    TextureManager m_textureManager;\n    ```", "```cpp\n    m_textureManager.load(\"assets/animate-alpha.png\", \"animate\", m_pRenderer);\n    ```", "```cpp\n    void Game::render()\n    {\n\n      SDL_RenderClear(m_pRenderer);\n\n      m_textureManager.draw(\"animate\", 0,0, 128, 82, \n      m_pRenderer);\n\n      m_textureManager.drawFrame(\"animate\", 100,100, 128, 82, \n      1, m_currentFrame, m_pRenderer);\n\n      SDL_RenderPresent(m_pRenderer);\n\n    }\n    ```", "```cpp\n    void Game::update()\n    {\n      m_currentFrame = int(((SDL_GetTicks() / 100) % 6));\n    }\n    ```", "```cpp\nprivate:\n\nTextureManager() {}\n```", "```cpp\nstatic TextureManager* Instance()\n{\n  if(s_pInstance == 0)\n  {\n    s_pInstance = new TextureManager();\n    return s_pInstance;\n  }\n\n  return s_pInstance;\n}\n```", "```cpp\ntypedef TextureManager TheTextureManager;\n```", "```cpp\nTextureManager* TextureManager::s_pInstance = 0;\n```", "```cpp\n// to load\nif(!TheTextureManager::Instance()->load(\"assets/animate-alpha.png\", \"animate\", m_pRenderer))\n{\n   return false;\n}\n// to draw\nTheTextureManager::Instance()->draw(\"animate\", 0,0, 128, 82, m_pRenderer);\n```"]