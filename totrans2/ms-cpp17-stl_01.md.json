["```cpp\n    class array_of_ints {\n      int data[10] = {};\n      public:\n        int size() const { return 10; }\n        int& at(int i) { return data[i]; }\n    };\n\n    void double_each_element(array_of_ints& arr)\n    {\n      for (int i=0; i < arr.size(); ++i) {\n        arr.at(i) *= 2;\n      }\n    }\n```", "```cpp\n    class container_of_ints {\n      public:\n      virtual int size() const = 0;\n      virtual int& at(int) = 0;\n    };\n\n    class array_of_ints : public container_of_ints {\n      int data[10] = {};\n      public:\n        int size() const override { return 10; }\n        int& at(int i) override { return data[i]; }\n    };\n\n    class list_of_ints : public container_of_ints {\n      struct node {\n        int data;\n        node *next;\n      };\n      node *head_ = nullptr;\n      int size_ = 0;\n      public:\n       int size() const override { return size_; }\n       int& at(int i) override {\n        if (i >= size_) throw std::out_of_range(\"at\");\n        node *p = head_;\n        for (int j=0; j < i; ++j) {\n          p = p->next;\n        }\n        return p->data;\n      }\n      ~list_of_ints();\n    };\n\n    void double_each_element(container_of_ints& arr) \n    {\n      for (int i=0; i < arr.size(); ++i) {\n        arr.at(i) *= 2;\n      } \n    }\n\n    void test()\n    {\n      array_of_ints arr;\n      double_each_element(arr);\n\n      list_of_ints lst;\n      double_each_element(lst);\n    }\n```", "```cpp\n    template<class ContainerModel>\n    void double_each_element(ContainerModel& arr)\n    {\n      for (int i=0; i < arr.size(); ++i) {\n        arr.at(i) *= 2;\n      }\n    }\n\n    void test()\n    {\n      array_of_ints arr;\n      double_each_element(arr);\n\n      list_of_ints lst;\n      double_each_element(lst);\n\n      std::vector<int> vec = {1, 2, 3};\n      double_each_element(vec);\n    }\n```", "```cpp\n    std::vector<double> vecd = {1.0, 2.0, 3.0};\n    double_each_element(vecd);\n```", "```cpp\n    template<class Container>\n    int count(const Container& container)\n    {\n      int sum = 0;\n      for (auto&& elt : container) {\n        sum += 1;\n      }\n      return sum;\n    }\n```", "```cpp\n    template<class Container, class Predicate>\n    int count_if(const Container& container, Predicate pred) \n    { \n      int sum = 0;\n      for (auto&& elt : container) {\n        if (pred(elt)) {\n            sum += 1;\n        }\n      }\n      return sum;\n    }\n```", "```cpp\n    std::vector<int> v = {3, 1, 4, 1, 5, 9, 2, 6};\n\n    assert(count(v) == 8);\n\n    int number_above =\n      count_if(v, [](int e) { return e > 5; });\n    int number_below =\n      count_if(v, [](int e) { return e < 5; });\n\n    assert(number_above == 2);\n    assert(number_below == 5);\n```"]