["```cpp\nint ledPin; // declare a variable of the type int and named \"ledPin\"\n```", "```cpp\nint myInt = 32767; //the maximum int value\nmyInt = myInt + 1; // myInt is now -32768\n```", "```cpp\nbool myVariable; // declaration of the variable\nmyVariable = true; // definition of the variable by assigning it a value\nbool myOtherVariable = false; // declaration and definition inside the same statement !\n```", "```cpp\nchar myChar = 'U'; // declaration and definition using the ASCII value of 'U' (i.e 85)\nchar myOtherChar = 85; // equals the previous statement\n\nchar myDefaultChar = 128; // this gives an ERROR because char are signed from -128 to 127\nunsigned char myUnsignedChar = 128; // this is correct !\n```", "```cpp\nbyte myByte = B10111; // 23 in binary notation with the B notation\nbyte myOtherByte = 23; // equals the previous statement\n```", "```cpp\nint ledPin = 8; // classic for us, now :) \nunsigned myUint = 32768; // very okay with the prefix unsigned !\n```", "```cpp\nword myWord = 12345;\n```", "```cpp\nlong myLong = -123; // don't forget that we can use negative numbers too!\nlong myOtherLong = 345;\nunsigned myUlong = 2147483648; // correct because of the unsigned prefix\n```", "```cpp\nfloat myFloat = -123456.1; // they can be negative.\nfloat myOtherFloat = 1.234567; //\nfloat myNoDecimalPointedFloat = 1234; // they can have a decimal part equaling zero\n```", "```cpp\ndouble myDouble  = 1.234567; // Arduino implementation of double is same as float\n```", "```cpp\nint myIntTable[5]; // declaration of a table that can contain 5 integers\nboolean myOtherTab[] = { false, true, true}; // declaration and definition of a 3 boolean arrays\n\nmyIntTable[5]; // considering the previous definition, this gives an array bound ERROR (index starts from 0 and thus the last one here is myIntTable[4])\nmyOtherTab[1]; // this elements can be manipulated as a boolean, it IS a boolean with the value true\n```", "```cpp\nchar mystring[3]; // a string of 3 characters\nchar mystring2[4] = {'b','y','t','e'}; // declaration & definition\nchar mystring3[4] = \"byte\"; // equals to mystring2;\nchar mystring4[ ] = \"byte\"; // equals to mystring3;\n```", "```cpp\nString myString01 = \"Hello my friend\"; // usual constant string to construct it\nString myString02 = String('U'); // convert U char into a String object\n\n// concatenating 2 String together and put the result into another\nString myString03 = String(myString01 + \", we are trying to play with String(s));\n\n// converting the current value of integer into a String object\nint myNiceInt = 8; // define an integer\nString myString04 = String(myNiceInt); // convert to a String object\n\n// converting the current value of an integer w/ a base into a String object\nint myNiceInt = 47; // define an integer\nString myString05 = String(myNiceInt, DEC);\nString myString06 = String(myNiceInt, HEX);\nString myString07 = String(myNiceInt, BIN);\n```", "```cpp\nString myString = \"Hello World !!\";\n```", "```cpp\nString myString = \"Hello World !!\";\n```", "```cpp\nString myString = \"Hello World !!\";\nString anotherString =\"Hell\" ;\nmyString.startsWith(anotherString); // this returns true\nmyString.startsWith(\"World\"); // this returns false\n```", "```cpp\nString firstString = \"Hello \";\nString secondString =\"World!\";\n\n// appending the second to the first and put the result in the first\nfirstString.concat(secondString);\n```", "```cpp\nString firstString = \"Hello \";\nString secondString =\"World!\";\n\n// appending the second to the first and putting the result in the first\nfirstString = firstString + secondString;\n```", "```cpp\nfirstString = firstString + secondString;\n```", "```cpp\nfirstString += secondString;\n```", "```cpp\n04.100\n```", "```cpp\nString receivedMessage = \"04.100\";\nString currentOutputNumber;\nString currentValueNumber;\n\n// extracting a part of receivedMessage from index 0 (included) to 1 (excluded)\ncurrentOutputNumber = receivedMessage.substring(0,2);\n\n// extracting a part of receivedMessage from index 3 (included) to the end\ncurrentValueNumber = receivedMessage.substring(3);\n```", "```cpp\nString receivedMessage = \"04.100\";\nString currentOutputNumber;\nString currentValueNumber;\nint splitPointIndex; \n\n// storing the index of the separator in the String \nsplitPointIndex = receivedMessage.indexOf('.');\n\n// extracting my two elements\ncurrentOutputNumber = receivedMessage.substring(0, splitPointIndex);\ncurrentValueNumber = receivedMessage.substring(splitPointIndex + 1);\n```", "```cpp\nString receivedMessage = \"04.100\";\nString originalMessage;\n\n// keeping a trace of the previous message by putting it into another variable\noriginalMessage = receivedMessage;\n\n// replacing dot by space character in receivedMessage\nreceivedMessage.replace('.',' ');\n```", "```cpp\n/*\n  Variables Variations Program\n This firmware pops out messages over Serial to better understand variables' use.\n Switch on the Serial Monitoring window and reset the board after that.\n Observe and check the code :)\n\n Written by Julien Bayle, this example code is under Creative Commons CC-BY-SA\n */\n\n// declaring variables before having fun !\nboolean myBoolean;\nchar myChar;\nint myInt;\nfloat myFloat;\nString myString;\n\nvoid setup(){\n  Serial.begin(9600);\n  myBoolean = false;\n  myChar = 'A';\n  myInt = 1;\n  myFloat = 5.6789 ;\n  myString = \"Hello Human!!\";\n}\n\nvoid loop(){\n\n  // checking the boolean\n  if (myBoolean) {\n    Serial.println(\"myBoolean is true\");\n  }\n  else {\n    Serial.println(\"myBoolean is false\");\n  }\n\n  // playing with char & int\n  Serial.print(\"myChar is currently \");\n  Serial.write(myChar);\n  Serial.println();\n\n  Serial.print(\"myInt is currently \");\n  Serial.print(myInt);\n  Serial.println();\n\n  Serial.print(\"Then, here is myChar + myInt : \");\n  Serial.write(myChar + myInt);\n  Serial.println();\n\n  // playing with float & int\n  Serial.print(\"myFloat is : \");\n  Serial.print(myFloat);\n  Serial.println();\n\n  // putting the content of myFloat into myInt\n  myInt = myFloat;\n  Serial.print(\"I put myFloat into myInt, and here is myInt now : \");\n  Serial.println(myInt);\n\n  // playing with String\n  Serial.print(\"myString is currently: \");\n  Serial.println(myString);\n\n  myString += myChar; // concatening myString with myChar\n  Serial.print(\"myString has a length of \");\n  Serial.print(myString.length());// printing the myString length\n  Serial.print(\" and equals now: \");\n  Serial.println(myString);\n\n // myString becomes too long, more than 15, removing the last 3 elements\n  if (myString.length() >= 15){\n    Serial.println(\"myString too long ... come on, let's clean it up! \");\n    myInt = myString.lastIndexOf('!'); // finding the place of the '!' \n    myString = myString.substring(0,myInt+1);  // removing characters \n\n    Serial.print(\"myString is now cleaner: \");\n    Serial.println(myString);\n\n    // putting true into myBoolean\n  }\n  else {\n    myBoolean = false;     // resetting myBoolean to false\n  }\n\n  delay(5000);     // let's make a pause\n\n  // let's put 2 blank lines to have a clear read\n  Serial.println();\n  Serial.println();\n}\n```", "```cpp\n// this variable is declared at the highest level, making it visible everywhere\nint globalString;\n\nvoid setup(){\n  // … some code\n}\nvoid loop(){\n  int a; // a is visible inside the loop function only\n  anotherFunction(); // calling the global function anotherFunction\n\n// … some other code\n}\n\nvoid anotherFunction() {\n  // … yet another code\n  int veryLocalVar; // veryLocalVar is visible only in anotherFunction function\n}\n```", "```cpp\nint myGlobalVariable;\n\nvoid setup(){\n}\n\nvoid loop(){\n  myFunction(digitalPinValue);\n}\n\nvoid myFunction(argument){\nint aLocalVariable;\naLocalVariable = aLocalVariable + argument;\n  // playing with aLocalVariable\n}\n```", "```cpp\nint myGlobalVariable;\nvoid setup(){\n}\n\nvoid loop(){\n  myFunction(digitalPinValue);\n}\n\nvoid myFunction(argument){\nstatic int aStaticVariable;\naStaticVariable = aStaticVariable + argument;\n  // playing with aStaticVariable\n}\n```", "```cpp\nconst int masterMidiChannel = 10;\n```", "```cpp\n#define masterMidiChannel 10\n```", "```cpp\nint oscillatorFrequency = 440;\n```", "```cpp\nString myString = \"Hello \";\nString myString2 = \"World\";\n\nString myResultString = myString + myString2;\nmyString.concat(myString2);\n```", "```cpp\nfloat OutputOscillatorAmplitude = 5.5;\nint multiplier = 3;\nOutputOscillatorAmplitude = OutputOscillatorAmplitude * multiplier\n```", "```cpp\nint myInt1 = 1;\nint myInt2 = 2;\n\nmyInt1 = myInt1 + myInt2;\n```", "```cpp\nint myInt1 = 1;\nint myInt2 = 2;\n\nmyInt1 += myInt2;\n```", "```cpp\nint myInt1 = 1;\nint myInt2 = 2;\n\nmyInt1 += myInt2 + myInt2;\n```", "```cpp\nint myInt1 = 1;\nint myInt2 = 2;\n\nmyInt1 = myInt1 + myInt2 + myInt2;\n```", "```cpp\nint myInt1 = 1;\n\nmyInt++;\t// myInt1 now contains 2\nmyInt--;\t// myInt1 now contains 1\n```", "```cpp\nfloat myFloat = 12345.6789 ;\nint myInt;\nmyInt = myFloat;\n\nprintln(myInt); // displays 12345\n```", "```cpp\nfloat myFloat;\nlong int myInt = 123456789;\nvoid setup(){\n  Serial.begin(9600);\n  myFloat = myInt;\n}\n\nvoid loop(){\n  Serial.println(myFloat); // displays a very strange result\n}\n```", "```cpp\nint myInt1 = 4;\nfloat myFloat = 5.76;\n(myInt1 > myFloat) ;\n```", "```cpp\nint myInt1 = 4;\nfloat myFloat = 5.76;\nint myInt2 = 16;\n(myInt1 > myFloat && myInt2 < myFloat) ;\n( (myInt1 > myFloat) && (myInt2 < myFloat) ) ;\n```", "```cpp\nint a;\nint b;\nint ledState;\nif (a < b) {\nledState = 1; \n}\nelse {\nledState = 0; \n}\n```", "```cpp\nIf (expression) {\n// code executed only if expression is true\n}\nelse {\n// code executed only if expression is false\n}\n```", "```cpp\nint a;\nint b;\nint ledState;\nif (a < b) {\nledState = 1; \n}\nelse if (b > 0) {\nledState = 0; \n}\nelse {\nledState = 1; \n}\n```", "```cpp\nint a;\nint b;\nint ledState;\nif (a < b) {     // a < b\n\nledState = 1; \n}\nelse if (b > 0) {   // a >= b and b > 0\nledState = 0; \n}\nelse {       // a >= b and b < 0\nledState = 1; \n}\n```", "```cpp\nint a;\nint b;\nint ledState;\nif (a < b || (a >= b && b < 0) ) {\nledState = 1; \n}\nelse if (a >= b && b > 0) {\nledState = 0; \n}\n```", "```cpp\nfloat T ; // my temperature variable\n\nif (T < 15) {\ncolorizeLed(blue);\n}\nelse if (T >= 15 && T < 30) {\ncolorizeLed(white);\n}\nelse if (T >= 30) {\ncolorizeLed(red);\n}\n```", "```cpp\nswitch (var) {\n  case label:\n  // statements\n  break;\n  case label:\n  // statements\n  break;\n  default:\n  // statements\n}\n```", "```cpp\nfloat midiCCMessage;\nswitch (midiCCMessage) {\n  case 7:\n  changeVolume();\n  break;\n  case 10:\n  changePan();\n  break;\n  default:\n  LedOff();\n}\n```", "```cpp\nfloat midiCCMessage;\nif (midiCCMessage == 7) changeVolume();\nelse if (midiCCMessage == 10) changePan ();\nelse LedOff();\n```", "```cpp\nInt T;\nInt ledColor; // 0 means blue, 1 means red\nledColor = (T < 20) ? 0 : 1;\n```", "```cpp\nfor (declaration & definition ; condition ; increment) {\n// statements\n}\n```", "```cpp\nfor (int i = 0 ; i < 100 ; i++) {\nprintln(i);\n}\n```", "```cpp\nint i = 0;\nfor ( ; i < 100 ; i++) {\nprintln(i);\n}\n```", "```cpp\nfor (int i = 0 ; i < 50 ; i = 2 * i + 1) {\nprintln(i);\n}\n```", "```cpp\nfor (int i = 50 ; i > 0 ; i = 2 * i - 1) {\nprintln(i);\n}\n```", "```cpp\nfor (int x = 1 ; x <= 10 ; x++) {\n\n}\n```", "```cpp\nfor (int y = 1 ; y <= 10 ; y++) {\n\n}\n```", "```cpp\nfor (int x = 1 ; x <= 10 ; x++) {\n\n  for (int y = 1 ; y <= 10 ; y++) {\n\n    println(x*y);\n}\n}\n```", "```cpp\nfor (int x = 1 ; x <= 10 ; x++) {\n\n  for (int y = 1 ; y <= 10 ; y++) {\n\n    print(x*y);\n}\nprintln(); // add a carriage return & a new line\n\n}\n```", "```cpp\nWhile (expression) {\n// statements\n}\n```", "```cpp\nint i = 0;\nwhile (i < 100) {\nprintln(i);\ni++;\n}\n```", "```cpp\nint i = 0;\nwhile (i < 100) {\nprintln(i++); // print the current I value, then increment i\n}\n```", "```cpp\ndo {\n// statements\n} while (expression);\n```", "```cpp\nint i = 0;\ndo {\nprintln(i);\ni++;\n} while (i < 100);\n```", "```cpp\nfor ( intensity = 0 ; intensity < 100 ; intensity++ ){\n  ledIntensity (intensity);\n  if (distance > maxDistance) { // if the user is far\n    intensity = 0;    // switch off the LED\n    break;      // exits the loop\n  }\n}\n```", "```cpp\nint i;\n\nvoid setup(){\n  i = 0;\n}\n\nvoid loop(){\nif (i < threshold) i +=1 ;\nelse i = 0;\n// some statements\t\n}\n```"]