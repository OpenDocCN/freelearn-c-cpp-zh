["```cpp\nvoid MainWindow(vector<String>argumentList,\n                SmallWindows::WindowShow windowShow);\n```", "```cpp\nclass Application { \n  public: \n    static int RunMessageLoop(); \n    static void RegisterWindowClasses(HINSTANCE instanceHandle); \n}; \n\n```", "```cpp\n  class Window { \n    public: \n\n```", "```cpp\n      void ShowWindow(bool visible); \n      void EnableWindow(bool enable); \n\n```", "```cpp\n      virtual void OnMove(Point topLeft); \n      virtual void OnSize(Size windowSize); \n      virtual void OnHelp(); \n\n```", "```cpp\n      double GetZoom() const; \n      void SetZoom(double zoom); \n\n```", "```cpp\n      void SetTimer(int timerId, unsigned int interval); \n      void DropTimer(int timerId); \n      virtual void OnTimer(int timerId); \n\n```", "```cpp\n      virtual void OnMouseDown(MouseButton mouseButtons, \n                           Point mousePoint, bool shiftPressed, \n                           bool controlPressed); \n\n      virtual void OnMouseUp(MouseButton mouseButtons, \n                           Point mousePoint, bool shiftPressed, \n                           bool controlPressed); \n      virtual void OnDoubleClick(MouseButton mouseButtons, \n                           Point mousePoint, bool shiftPressed, \n                           bool controlPressed); \n      virtual void OnMouseMove(MouseButton mouseButtons, \n                           Point mousePoint, bool shiftPressed, \n                           bool controlPressed); \n      virtual void OnMouseWheel(WheelDirection direction, \n                           bool shiftPressed, bool controlPressed); \n\n```", "```cpp\n    virtual void OnTouchDown(vector<Point> pointList); \n    virtual void OnTouchMove(vector<Point> pointList); \n    virtual void OnTouchUp(vector<Point> pointList); \n\n```", "```cpp\n      virtual bool OnKeyDown(WORD key, bool shiftPressed, \n                             bool controlPressed); \n      virtual void OnChar(TCHAR tChar); \n      virtual bool OnKeyUp(WORD key, bool shiftPressed, \n                           bool controlPressed); \n\n```", "```cpp\n      void Invalidate(Rect areaRect, bool clear = true) const; \n      void Invalidate(bool clear = true) const; \n      void UpdateWindow(); \n\n```", "```cpp\n      virtual void OnPaint(Graphics& graphics) const;\n      virtual void OnPrint(Graphics& graphics, int page, \n                           int copy, int totalPages) const;\n      virtual void OnDraw(Graphics& graphics, DrawMode drawMode)\n                          const;\n\n```", "```cpp\n      virtual void OnClose(); \n      virtual bool TryClose(); \n      virtual void OnDestroy(); \n\n```", "```cpp\n      Size GetWindowSize() const; \n      void SetWindowSize(Size windowSize); \n      Point GetWindowPosition() const; \n      void SetWindowPosition(Point topLeft); \n      Size GetClientSize() const; \n\n```", "```cpp\n      int GetCharacterWidth(Font font, TCHAR tChar) const; \n      int GetCharacterHeight(Font font) const; \n      int GetCharacterAscent(Font font) const; \n      int GetCharacterAverageWidth(Font font) const; \n\n```", "```cpp\n      Answer MessageBox(String message,\n                    String caption = TEXT(\"Error\"),\n                    ButtonGroup buttonGroup = Ok,\n                    Icon icon = NoIcon, bool help = false) const;\n};\n```", "```cpp\n  class Graphics { \n    public: \n      void DrawLine(Point startPoint, Point endPoint, \n                    Color penColor, PenStyle penStyle = Solid); \n      void DrawRectangle(Rect rect, Color penColor, \n                         PenStyle = Solid); \n      void FillRectangle(Rect rect, Color penColor, \n                       Color brushColor, PenStyle penStyle=Solid); \n      void DrawEllipse(Rect rect, Color penColor, \n                       PenStyle = Solid); \n      void FillEllipse(Rect rect, Color penColor, \n                       Color brushColor, PenStyle penStyle=Solid); \n      void DrawText(Rect areaRect, String text, Font font, \n                    Color textColor, Color backColor, \n                    bool pointsToMeters = true); \n  }; \n\n```", "```cpp\n  class Document : public Window { \n    public: \n\n```", "```cpp\n      bool IsDirty() const; \n      void SetDirty(bool dirty); \n\n```", "```cpp\n      void SetCaret(Rect caretRect); \n      void ClearCaret(); \n      void OnGainFocus(); \n      void OnLoseFocus(); \n\n```", "```cpp\n      void SetMenuBar(Menu& menuBar); \n\n```", "```cpp\n      virtual void OnDropFile(vector<String> pathList); \n\n```", "```cpp\n      KeyboardMode GetKeyboardMode() const; \n      void SetKeyboardMode(KeyboardMode mode); \n\n```", "```cpp\n      virtual void OnHorizontalScroll(WORD flags,WORD thumbPos=0); \n      virtual void OnVerticalScroll(WORD flags, WORD thumbPos =0); \n\n```", "```cpp\n      void SetHorizontalScrollPosition(int scrollPos); \n      int GetHorizontalScrollPosition() const; \n      void SetVerticalScrollPosition(int scrollPos); \n      int GetVerticalScrollPosition() const; \n\n      void SetHorizontalScrollLineWidth(int lineWidth); \n      int GetHorizontalScrollLineHeight() const; \n      void SetVerticalScrollLineHeight(int lineHeight); \n      int GetVerticalScrollLineHeight() const; \n\n      void SetHorizontalScrollPageWidth(int pageWidth); \n      int GetHorizontalScrollPageWidth() const; \n      void SetVerticalScrollPageHeight(int pageHeight); \n      int GetVerticalScrollPageHeight() const; \n\n      void SetHorizontalScrollTotalWidth(int scrollWidth); \n      int GetHorizontalScrollTotalWidth() const; \n      void SetVerticalScrollTotalHeight(int scrollHeight); \n      int GetVerticalScrollTotalHeight() const; \n  }; \n\n```", "```cpp\n  class Menu { \n    public: \n      void AddMenu(Menu& menu); \n      void AddSeparator(); \n      void AddItem(String text, VoidListener selection, \n                   BoolListener enable = nullptr, \n                   BoolListener check = nullptr, \n                   BoolListener radio = nullptr); \n  }; \n\n```", "```cpp\nclass Accelerator { \n    public: \n      static void TextToAccelerator(String& text, int idemId, \n                                    list<ACCEL>& acceleratorSet); \n  }; \n\n```", "```cpp\n  class StandardDocument : public Document { \n    public: \n\n```", "```cpp\n      Menu StandardFileMenu(bool print); \n      Menu StandardEditMenu(); \n      Menu StandardHelpMenu(); \n\n```", "```cpp\n      virtual void ClearDocument(); \n      virtual bool WriteDocumentToStream(String name, \n                                         ostream& outStream)const; \n      virtual bool ReadDocumentFromStream(String name, \n                                          istream& inStream); \n\n```", "```cpp\n      virtual void CopyAscii(vector<String>& textList) const; \n      virtual bool IsCopyAsciiReady() const; \n      virtual void CopyUnicode(vector<String>& textList) const; \n      virtual bool IsCopyUnicodeReady() const; \n      virtual void CopyGeneric(int format, InfoList& infoList)  \n                               const; \n      virtual bool IsCopyGenericReady(int format) const; \n\n```", "```cpp\n      virtual void PasteAscii(const vector<String>& textList); \n      virtual bool IsPasteAsciiReady \n                   (const vector<String>& textList) const; \n      virtual void PasteUnicode(const vector<String>& textList); \n      virtual bool IsPasteUnicodeReady \n                   (const vector<String>& textList) const; \n      virtual void PasteGeneric(int format, InfoList& infoList); \n      virtual bool IsPasteGenericReady(int format, \n                                       InfoList& infoList) const; \n\n```", "```cpp\n      void OnDropFile(vector<String> pathList); \n  }; \n\n```", "```cpp\n  class PrintPreviewDocument : Document { \n    public: \n      PrintPreviewDocument(StandardDocument* parentDocument, \n                  int page = 1, Size pageSize = USLetterPortrait); \n      bool OnKeyDown(WORD key, bool shiftPressed, \n                     bool controlPressed); \n      void OnVerticalScroll(WORD flags, WORD thumbPos = 0); \n      void OnPaint(Graphics& graphics) const; \n  }; \n\n```"]