["```cpp\nenum GameState\n{\n  GS_Running,\n  GS_Paused\n};\n```", "```cpp\nvoid StartGame()\n{\n  inputManager = new Input(hWnd);\n  LoadTextures();\n  m_gameState = GS_Running;\n\n  srand(time(NULL));\n  pickupSpawnThreshold = 5.0f;\n  pickupSpawnTimer = 0.0f;\n}\n```", "```cpp\nrunning = false;\npaused = true;\n```", "```cpp\nrunning = true;\npaused = false;\n```", "```cpp\nenum GameState\n{\n  GS_Splash,\n  GS_Loading,\n  GS_Menu,\n  GS_Credits,\n  GS_Running,\n  GS_NextLevel,\n  GS_Paused,\n  GS_GameOver,\n};\n```", "```cpp\nvoid Update(const float p_deltaTime)\n{\n switch (m_gameState)\n {\n case GameState::GS_Splash:\n case GameState::GS_Loading:\n {\n }\n break;\n case GameState::GS_Menu:\n {\n  inputManager->Update(p_deltaTime);\n  ProcessInput(p_deltaTime);\n }\n break;\n\n case GameState::GS_Credits:\n {\n  inputManager->Update(p_deltaTime);\n  ProcessInput(p_deltaTime);\n }\n break;\n case GameState::GS_Running:\n {\n  inputManager->Update(p_deltaTime);\n  ProcessInput(p_deltaTime);\n  CheckBoundaries(player);\n  CheckBackground();\n  background->Update(p_deltaTime);\n  robot_left->Update(p_deltaTime);\n  robot_right->Update(p_deltaTime);\n  robot_left_strip->Update(p_deltaTime);\n  robot_right_strip->Update(p_deltaTime);\n  pauseButton->Update(p_deltaTime);\n  resumeButton->Update(p_deltaTime);\n  pickup->Update(p_deltaTime);\n  SpawnPickup(p_deltaTime);\n  SpawnEnemy(p_deltaTime);\n  enemy->Update(p_deltaTime);\n  CheckCollisions();\n }\n break;\n case GameState::GS_Paused:\n {\n  inputManager->Update(p_deltaTime);\n  ProcessInput(p_deltaTime);\n }\n break;\n case GameState::GS_NextLevel:\n {\n  inputManager->Update(p_deltaTime);\n  ProcessInput(p_deltaTime);\n }\n break;\n case GameState::GS_GameOver:\n {\n  inputManager->Update(p_deltaTime);\n  ProcessInput(p_deltaTime);\n }\n break;\n }\n}\n```", "```cpp\nswitch (m_gameState)\n {\n case GameState::GS_Splash:\n case GameState::GS_Loading:\n {\n }\n break;\n case GameState::GS_Menu:\n {\n }\n break;\n case GameState::GS_Credits:\n {\n }\n break;\n case GameState::GS_Running:\n case GameState::GS_Paused:\n {\n  background->Render();\n  robot_left->Render();\n  robot_right->Render();\n  robot_left_strip->Render();\n  robot_right_strip->Render();\n  pauseButton->Render();\n  resumeButton->Render();\n  pickup->Render();\n  enemy->Render();\n  DrawScore();\n }\n break;\n case GameState::GS_NextLevel:\n {\n }\n break;\n case GameState::GS_GameOver:\n {\n }\n break;\n }\n\n  SwapBuffers(hDC);\n}\n```", "```cpp\nReplace highlighted code with:\n\n switch (m_gameState)\n {\n case GameState::GS_Splash:\n case GameState::GS_Loading:\n {\n return;\n }\n break;\n case GameState::GS_Menu:\n case GameState::GS_Credits:\n case GameState::GS_Paused:\n case GameState::GS_NextLevel:\n case GameState::GS_GameOver:\n {\n command = Input::Command::CM_UI;\n }\n break;\n case GameState::GS_Running:\n {\n }\n break;\n }\n\n}\n\nuiTimer += p_deltaTime;\n```", "```cpp\nSprite* splashScreen;\n```", "```cpp\nfloat splashDisplayTimer;\nfloat splashDisplayThreshold;\n```", "```cpp\nvoid LoadSplash()\n{\n  m_gameState = GameState::GS_Splash;\n\n  splashScreen = new Sprite(1);\n  splashScreen->SetFrameSize(800.0f, 600.0f);\n  splashScreen->SetNumberOfFrames(1);\n  splashScreen->AddTexture(\"resources/splash.png\", false);\n  splashScreen->IsActive(true);\n  splashScreen->IsVisible(true);\n}\n```", "```cpp\nvoid StartGame()\n{\n LoadSplash();\n inputManager = new Input(hWnd);\n\n uiTimer = 0.0f;\n srand(time(NULL));\n\n pickupSpawnThreshold = 3.0f;\n pickupSpawnTimer = 0.0f;\n\n enemySpawnThreshold = 7.0f;\n enemySpawnTimer = 0.0f;\n\n splashDisplayTimer = 0.0f;\n splashDisplayThreshold = 5.0f;\n\n}\n```", "```cpp\n switch (m_gameState)\n {\n case GameState::GS_Splash:\n case GameState::GS_Loading:\n {\n  splashScreen->Update(p_deltaTime);\n  splashDisplayTimer += p_deltaTime;\n  if (splashDisplayTimer > splashDisplayThreshold)\n  {\n   m_gameState = GameState::GS_Menu;\n  }\n }\n break;\n```", "```cpp\ncase GameState::GS_Loading:\nsplashScreen->Render();\nbreak;\n```", "```cpp\nvoid GameLoop(const float p_deltatTime)\n{\n  if (m_gameState == GameState::GS_Splash)\n {\n LoadTextures();\n m_gameState = GameState::GS_Loading;\n }\n  Update(p_deltatTime);\n  Render();\n}\n```", "```cpp\nSprite* menuScreen;\n```", "```cpp\n  menuScreen = new Sprite(1);\n  menuScreen->SetFrameSize(800.0f, 600.0f);\n  menuScreen->SetNumberOfFrames(1);\n  menuScreen->AddTexture(\"resources/mainmenu.png\", false);\n  menuScreen->IsActive(true);\n  menuScreen->IsVisible(true);\n```", "```cpp\ncase GameState::GS_Menu:\n {\n  menuScreen->Update(p_deltaTime);\n  inputManager->Update(p_deltaTime);\n  ProcessInput(p_deltaTime);\n }\n break;\n```", "```cpp\ncase GameState::GS_Menu:\n{\n  menuScreen->Render();\n}\nbreak;\n```", "```cpp\nSprite* playButton;\nSprite* creditsButton;\nSprite* exitButton;\n```", "```cpp\nplayButton = new Sprite(1);\nplayButton->SetFrameSize(75.0f, 38.0f);\nplayButton->SetNumberOfFrames(1);\nplayButton->SetPosition(390.0f, 300.0f);\nplayButton->AddTexture(\"resources/playButton.png\");\nplayButton->IsVisible(true);\nplayButton->IsActive(false);\ninputManager->AddUiElement(playButton);\n\ncreditsButton = new Sprite(1);\ncreditsButton->SetFrameSize(75.0f, 38.0f);\ncreditsButton->SetNumberOfFrames(1);\ncreditsButton->SetPosition(390.0f, 350.0f);\ncreditsButton->AddTexture(\"resources/creditsButton.png\");\ncreditsButton->IsVisible(true);\ncreditsButton->IsActive(false);\ninputManager->AddUiElement(creditsButton);\n\nexitButton = new Sprite(1);\nexitButton->SetFrameSize(75.0f, 38.0f);\nexitButton->SetNumberOfFrames(1);\nexitButton->SetPosition(390.0f, 500.0f);\nexitButton->AddTexture(\"resources/exitButton.png\");\nexitButton->IsVisible(true);\nexitButton->IsActive(false);\ninputManager->AddUiElement(exitButton);\n```", "```cpp\n case GameState::GS_Menu:\n {\n  menuScreen->Update(p_deltaTime);\n  playButton->IsActive(true);\n  creditsButton->IsActive(true);\n  exitButton->IsActive(true);\n  playButton->Update(p_deltaTime);\n  creditsButton->Update(p_deltaTime);\n  exitButton->Update(p_deltaTime);\n  inputManager->Update(p_deltaTime);\n  ProcessInput(p_deltaTime);\n }\n break;\n```", "```cpp\ncase GameState::GS_Menu:\n {\n  menuScreen->Render();\n  playButton->Render();\n  creditsButton->Render();\n  exitButton->Render();\n }\n break;\n```", "```cpp\nif (playButton->IsClicked())\n{\n  playButton->IsClicked(false);\n  exitButton->IsActive(false);\n  playButton->IsActive(false);\n  creditsButton->IsActive(false);\n  m_gameState = GameState::GS_Running;\n}\n\nif (creditsButton->IsClicked())\n{\n  creditsButton->IsClicked(false);\n  exitButton->IsActive(false);\n  playButton->IsActive(false);\n  creditsButton->IsActive(false);\n  m_gameState = GameState::GS_Credits;\n}\n\nif (exitButton->IsClicked())\n{\n  playButton->IsClicked(false);\n  exitButton->IsActive(false);\n  playButton->IsActive(false);\n  creditsButton->IsActive(false);\n  PostQuitMessage(0);\n}\n```", "```cpp\nSprite* creditsScreen;\n```", "```cpp\ncreditsScreen = new Sprite(1);\ncreditsScreen->SetFrameSize(800.0f, 600.0f);\ncreditsScreen->SetNumberOfFrames(1);\ncreditsScreen->AddTexture(\"resources/credits.png\", false);\ncreditsScreen->IsActive(false);\ncreditsScreen->IsVisible(true);\n```", "```cpp\n case GameState::GS_Credits:\n {\n  creditsScreen->Update(p_deltaTime);\n  inputManager->Update(p_deltaTime);\n  ProcessInput(p_deltaTime);\n }\n break;\n```", "```cpp\n case GameState::GS_Credits:\n {\n  creditsScreen->Render();\n }\n break;\n```", "```cpp\nSprite* menuButton;\n```", "```cpp\nmenuButton = new Sprite(1);\nmenuButton->SetFrameSize(75.0f, 38.0f);\nmenuButton->SetNumberOfFrames(1);\nmenuButton->SetPosition(390.0f, 400.0f);\nmenuButton->AddTexture(\"resources/menuButton.png\");\nmenuButton->IsVisible(true);\nmenuButton->IsActive(false);\ninputManager->AddUiElement(menuButton);\n```", "```cpp\ncase GameState::GS_Credits:\n {\n  creditsScreen->Update(p_deltaTime);\n  menuButton->IsActive(true);\n  menuButton->Update(p_deltaTime);\n  inputManager->Update(p_deltaTime);\n  ProcessInput(p_deltaTime);\n }\n break;\n```", "```cpp\n case GameState::GS_Credits:\n {\n  creditsScreen->Render();\n  menuButton->Render();\n }\n break;\n```", "```cpp\nif (menuButton->IsClicked())\n{\n  menuButton->IsClicked(false);\n  menuButton->IsActive(false);\n  m_gameState = GameState::GS_Menu;\n}\n```", "```cpp\nGLuint fontBase;\n```", "```cpp\nGLvoid BuildFont(GLvoid)\n{\n  HFONT newFont;\n  HFONT tempFont;\n\n  fontBase = glGenLists(96);\n\n  tempFont = CreateFont(-26, // Height\n  0,                        // Width\n  0,                        // Escapement\n  0,                        // Orientation\n  FW_BOLD,                  // Weight\n  FALSE,                    // Italic\n  FALSE,                    // Underline\n  FALSE,                    // Strikeout\n  ANSI_CHARSET,         // Character Set\n  OUT_TT_PRECIS,            // Output Precision\n  CLIP_DEFAULT_PRECIS, // Clipping Precision\n  ANTIALIASED_QUALITY,// Output Quality\n  FF_DONTCARE | DEFAULT_PITCH, // Family/Pitch\n  \"Courier New\");           // Font Name\n\n  newFont = (HFONT)SelectObject(hDC, tempFont);\n  wglUseFontBitmaps(hDC, 32, 96, fontBase);\n  SelectObject(hDC, newFont);\n  DeleteObject(tempFont);\n}\n```", "```cpp\nGLvoid KillFont(GLvoid)\n{\n  glDeleteLists(fontBase, 96);\n}\n```", "```cpp\nvoid DrawText(const char* p_text, const float p_x, const float p_y, const float r, const float g, const float b)\n{\n glBindTexture(GL_TEXTURE_2D, 0);\n glColor3f(r, g, b);\n\n glRasterPos2f(p_x, p_y);\n if (p_text != NULL)\n {\n  glPushAttrib(GL_LIST_BIT);\n  glListBase(fontBase - 32);\n  glCallLists(strlen(p_text), GL_UNSIGNED_BYTE, p_text);\n  glPopAttrib();\n }\n glColor3f(1.0f, 1.0f, 1.0f);\n\n}\n```", "```cpp\nvoid DrawCredits()\n{\n float startX = 325.0f;\n float startY = 250.0f;\n float spaceY = 30.0f;\n DrawText(\"Robert Madsen\", startX, startY, 0.0f, 0.0f, 1.0f);\n DrawText(\"Author\", startX, startY + spaceY, 0.0f, 0.0f, 1.0f);\n}\n```", "```cpp\nif (m_gameState == GameState::GS_Splash)\n{\n BuildFont();\n  LoadTextures();\n  m_gameState = GameState::GS_Loading;\n}\n```", "```cpp\n case GameState::GS_Credits:\n {\n  creditsScreen->Update(p_deltaTime);\n  menuButton->IsActive(true);\n  menuButton->Update(p_deltaTime);\n  inputManager->Update(p_deltaTime);\n  ProcessInput(p_deltaTime);\n }\n break;\n```", "```cpp\nvoid DrawScore()\n{\n char score[50];\n sprintf_s(score, 50, \"Score: %i\", player->GetValue());\n DrawText(score, 350.0f, 25.0f, 0.0f, 0.0f, 1.0f);\n}\n```", "```cpp\n case GameState::GS_Running:\n case GameState::GS_Paused:\n {\n  background->Render();\n  robot_left->Render();\n  robot_right->Render();\n  robot_left_strip->Render();\n  robot_right_strip->Render();\n  pauseButton->Render();\n  resumeButton->Render();\n  pickup->Render();\n  enemy->Render();\n  DrawScore();\n }\n break;\n```", "```cpp\nfloat levelTimer;\nfloat levelMaxTime;\nfloat pickupSpawnAdjustment;\n\nint pickupsReceived;\nint pickupsThreshold;\nint enemiesHit;\n```", "```cpp\nlevelTimer = 0.0f;\nlevelMaxTime = 30.0f;\npickupSpawnAdjustment = 0.25f;\n\npickupsReceived = 0;\npickupsThreshold = 5;\nenemiesHit =0;\n```", "```cpp\nvoid NextLevel()\n{\n if (pickupsReceived < pickupsThreshold)\n {\n  m_gameState = GameState::GS_GameOver;\n }\n else\n {\n  pickupSpawnThreshold += pickupSpawnAdjustment;\n  levelTimer = 0.0f;\n  m_gameState = GameState::GS_NextLevel;\n }\n}\n```", "```cpp\nlevelTimer += p_deltaTime;\nif (levelTimer > levelMaxTime)\n{\n  NextLevel();\n}\n```", "```cpp\nif (player->IntersectsCircle(pickup))\n{\n  pickup->IsVisible(false);\n  pickup->IsActive(false);\n  player->SetValue(player->GetValue() + pickup->GetValue());\n  pickupSpawnTimer = 0.0f;\n pickupsReceived++;\n}\n\n if (player->IntersectsRect(enemy))\n {\n  enemy->IsVisible(false);\n  enemy->IsActive(false);\n  player->SetValue(player->GetValue() + enemy->GetValue());\n  enemySpawnTimer = 0.0f;\n  enemiesHit++;\n }\n```", "```cpp\nvoid DrawStats()\n{\n char pickupsStat[50];\n char enemiesStat[50];\n char score[50];\n sprintf_s(pickupsStat, 50, \"Enemies Hit: %i\", enemiesHit);\n sprintf_s(enemiesStat, 50, \"Pickups: %i\", pickupsReceived);\n sprintf_s(score, 50, \"Score: %i\", player->GetValue());\n DrawText(enemiesStat, 350.0f, 270.0f, 0.0f, 0.0f, 1.0f);\n DrawText(pickupsStat, 350.0f, 320.0f, 0.0f, 0.0f, 1.0f);\n DrawText(score, 350.0f, 370.0f, 0.0f, 0.0f, 1.0f);\n}\n```", "```cpp\n    Sprite* nextLevelScreen;\n    ```", "```cpp\n    nextLevelScreen = new Sprite(1);\n    nextLevelScreen->SetFrameSize(800.0f, 600.0f);\n    nextLevelScreen->SetNumberOfFrames(1);\n    nextLevelScreen->AddTexture(\"resources/level.png\", false);\n    nextLevelScreen->IsActive(true);\n    nextLevelScreen->IsVisible(true);\n    ```", "```cpp\n     case GameState::GS_NextLevel:\n     {\n      nextLevelScreen->Update(p_deltaTime);\n      continueButton->IsActive(true);\n      continueButton->Update(p_deltaTime);\n      inputManager->Update(p_deltaTime);\n      ProcessInput(p_deltaTime);\n      break;\n     }\n    ```", "```cpp\n     case GameState::GS_NextLevel:\n     {\n      nextLevelScreen->Render();\n      DrawStats();\n      continueButton->Render();\n     }\n     break;\n    ```", "```cpp\n    Sprite* continueButton;\n    ```", "```cpp\n    continueButton = new Sprite(1);\n    continueButton->SetFrameSize(75.0f, 38.0f);\n    continueButton->SetNumberOfFrames(1);\n    continueButton->SetPosition(390.0f, 400.0f);\n    continueButton->AddTexture(\"resources/continueButton.png\");\n    continueButton->IsVisible(true);\n    continueButton->IsActive(false);\n    inputManager->AddUiElement(continueButton);\n    ```", "```cpp\n     case GameState::GS_NextLevel:\n     {\n      nextLevelScreen->Update(p_deltaTime);\n     continueButton->IsActive(true);\n     continueButton->Update(p_deltaTime);\n      inputManager->Update(p_deltaTime);\n      ProcessInput(p_deltaTime);\n     }\n     break;\n    ```", "```cpp\n     case GameState::GS_NextLevel:\n     {\n      nextLevelScreen->Render();\n      DrawStats();\n     continueButton->Render();\n     }\n     break;\n    ```", "```cpp\n    if (continueButton->IsClicked())\n    {\n      continueButton->IsClicked(false);\n      continueButton->IsActive(false);\n      m_gameState = GameState::GS_Running;\n    pickupsReceived = 0;\n    enemiesHit = 0;\n    }\n    ```", "```cpp\n    Sprite* gameOverScreen;\n    ```", "```cpp\n    gameOverScreen = new Sprite(1);\n    gameOverScreen->SetFrameSize(800.0f, 600.0f);\n    gameOverScreen->SetNumberOfFrames(1);\n    gameOverScreen->AddTexture(\"resources/gameover.png\", false);\n    gameOverScreen->IsActive(true);\n    gameOverScreen->IsVisible(true);\n    ```", "```cpp\n     case GameState::GS_GameOver:\n     {\n      gameOverScreen->Update(p_deltaTime);\n      replayButton->IsActive(true);\n      replayButton->Update(p_deltaTime);\n      exitButton->IsActive(true);\n      exitButton->Update(p_deltaTime);\n      inputManager->Update(p_deltaTime);\n      ProcessInput(p_deltaTime);\n     }\n     break;\n    ```", "```cpp\n     case GameState::GS_GameOver:\n     {\n      gameOverScreen->Render();\n      replayButton->Render();\n      DrawStats();\n     }\n     break;\n    ```", "```cpp\nvoid RestartGame()\n{\n   player->SetValue(0);\n robot_right->SetValue(0);\n robot_left->SetValue(0);\n\npickupSpawnThreshold = 5.0f;\n  pickupSpawnTimer = 0.0f;\n  enemySpawnThreshold = 7.0f;\n  enemySpawnTimer = 0.0f;\n  splashDisplayTimer = 0.0f;\n  splashDisplayThreshold = 5.0f;\n\n  levelTimer = 0.0f;\n\n  pickupsReceived = 0;\n  pickupsThreshold = 5;\npickupsReceived = 0;\n\n  pickup->IsVisible(false);\n  enemy->IsVisible(false);\n\n  background->SetVelocity(0.0f);\n  robot_left->SetPosition(screen_width / 2.0f - 50.0f, screen_height - 130.0f);\n  robot_left->IsVisible(false);\n\n  robot_right->SetPosition(screen_width / 2.0f - 50.0f, screen_height - 130.0f);\n\n  player = robot_right;\n  player->IsActive(true);\n  player->IsVisible(true);\n  player->SetVelocity(0.0f);\n}\n```", "```cpp\n    Sprite* replayButton;\n    ```", "```cpp\n    replayButton = new Sprite(1);\n    replayButton->SetFrameSize(75.0f, 38.0f);\n    replayButton->SetNumberOfFrames(1);\n    replayButton->SetPosition(390.0f, 400.0f);\n    replayButton->AddTexture(\"resources/replayButton.png\");\n    replayButton->IsVisible(true);\n    replayButton->IsActive(false);\n    inputManager->AddUiElement(replayButton);\n    ```", "```cpp\n    case GameState::GS_GameOver:\n     {\n      gameOverScreen->Update(p_deltaTime);\n      replayButton->IsActive(true);\n      replayButton->Update(p_deltaTime);\n      exitButton->IsActive(true);\n      exitButton->Update(p_deltaTime);\n      inputManager->Update(p_deltaTime);\n      ProcessInput(p_deltaTime);\n     }\n     break;\n    ```", "```cpp\n     case GameState::GS_GameOver:\n     {\n      gameOverScreen->Render();\n      replayButton->Render();\n      DrawStats();\n     }\n     break;\n    ```", "```cpp\n    if (replayButton->IsClicked())\n    {\n      replayButton->IsClicked(false);\n      replayButton->IsActive(false);\n      exitButton->IsActive(false);\n      RestartGame();\n      m_gameState = GameState::GS_Running;\n    }\n    ```"]