- en: Chapter 1. Coding with C++
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 章. 使用 C++ 编程
- en: You're a first-time programmer. You have a lot to learn!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 您是第一次编程。您有很多东西要学！
- en: Academics often describe programming concepts in theory but like to leave implementation
    to someone else, preferably someone from the industry. We don't do that in this
    book—in this book, we will describe the theory behind C++ concepts and implement
    our own game as well.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 学术界通常在理论上描述编程概念，但喜欢将实现留给别人，最好是来自行业的人。在这本书中，我们不会这样做——在这本书中，我们将描述 C++ 概念背后的理论，并实现我们自己的游戏。
- en: The first thing I will recommend is that you do the exercises. You cannot learn
    to program simply by reading. You must work with the theory with the exercises.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我首先建议您做练习。您不能仅仅通过阅读来学习编程。您必须通过练习与理论相结合。
- en: We are going to get started by programming very simple programs in C++. I know
    that you want to start playing your finished game right now. However, you have
    to start at the beginning to get to that end (if you really want to, skip over
    to [Chapter 12](part0080_split_000.html#2C9D02-dd4a3f777fc247568443d5ffb917736d
    "Chapter 12. Spell Book"), *Spell Book,* or open some of the samples to get a
    feel for where we are going).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先通过编写非常简单的 C++ 程序来开始编程。我知道您现在就想开始玩您完成的游戏。然而，您必须从开始的地方开始，才能达到那个终点（如果您真的想，可以跳到[第
    12 章](part0080_split_000.html#2C9D02-dd4a3f777fc247568443d5ffb917736d "第 12 章.
    魔法书")，“魔法书”，或者打开一些示例来了解我们将要走向何方）。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Setting up a new project (in Visual Studio and Xcode)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Visual Studio 和 Xcode 中设置新项目
- en: Your first C++ project
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的第一个 C++ 项目
- en: How to handle errors
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何处理错误
- en: What are building and compiling?
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是构建和编译？
- en: Setting up our project
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置我们的项目
- en: Our first C++ program will be written outside of UE4\. To start with, I will
    provide steps for both Xcode and Visual Studio 2013, but after this chapter, I
    will try to talk about just the C++ code without reference to whether you're using
    Microsoft Windows or Mac OS.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一 C++ 程序将在 UE4 之外编写。首先，我将提供 Xcode 和 Visual Studio 2013 的步骤，但在此章之后，我将尝试只谈论
    C++ 代码，而不提及您是否使用 Microsoft Windows 或 Mac OS。
- en: Using Microsoft Visual C++ on Windows
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Windows 上使用 Microsoft Visual C++
- en: In this section, we will install a code editor for Windows, Microsoft's Visual
    Studio. Please skip to the next section if you are using a Mac.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将为 Windows 安装一个代码编辑器，即微软的 Visual Studio。如果您使用的是 Mac，请跳到下一节。
- en: Note
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The Express edition of Visual Studio is the free version of Visual Studio that
    Microsoft provides on their website. Go to [http://www.visualstudio.com/en-us/products/visual-studio-express-vs.aspx](http://www.visualstudio.com/en-us/products/visual-studio-express-vs.aspx)
    to start the installation process.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 的 Express 版本是微软在其网站上提供的免费版本。请访问[http://www.visualstudio.com/en-us/products/visual-studio-express-vs.aspx](http://www.visualstudio.com/en-us/products/visual-studio-express-vs.aspx)开始安装过程。
- en: 'To start, you have to download and install **Microsoft Visual Studio Express
    2013 for Windows Desktop**. This is how the icon for the software looks:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您必须下载并安装**Windows 桌面 Microsoft Visual Studio Express 2013**。这是该软件的图标：
- en: '![Using Microsoft Visual C++ on Windows](img/00003.jpeg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![在 Windows 上使用 Microsoft Visual C++](img/00003.jpeg)'
- en: Tip
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Do not install **Express 2013 for Windows**. This is a different package and
    it is used for different things than what we are doing here.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 不要安装**Express 2013 for Windows**。这是一个不同的包，它用于与我们在这里做的事情不同的事情。
- en: 'Once you have Visual Studio 2013 Express installed, open it. Work through the
    following steps to get to a point where you can actually type in the code:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您安装了 Visual Studio 2013 Express，请打开它。按照以下步骤操作，以便您可以真正地输入代码：
- en: From the **File** menu, select **New Project...**, as shown in the following
    screenshot:![Using Microsoft Visual C++ on Windows](img/00004.jpeg)
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**文件**菜单中选择**新建项目...**，如图所示：![在 Windows 上使用 Microsoft Visual C++](img/00004.jpeg)
- en: You will get the following dialog:![Using Microsoft Visual C++ on Windows](img/00005.jpeg)
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到以下对话框：![在 Windows 上使用 Microsoft Visual C++](img/00005.jpeg)
- en: Tip
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Note that there is a small box at the bottom with the text **Solution name**.
    In general, **Visual Studio Solutions** might contain many projects. However,
    this book only works with a single project, but at times, you might find it useful
    to integrate many projects into the same solution.
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，底部有一个带有文本**解决方案名称**的小框。通常，**Visual Studio 解决方案**可能包含许多项目。然而，本书只与一个项目一起使用，但有时您可能会发现将许多项目集成到同一个解决方案中很有用。
- en: 'There are five things to take care of now, as follows:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，有五件事情需要处理，如下所示：
- en: Select **Visual C++** from the left-hand side panel.
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧面板中选择**Visual C++**。
- en: Select **Win32 Console Application** from the right-hand side panel.
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从右侧面板中选择**Win32控制台应用程序**。
- en: Name your app (I used `MyFirstApp`).
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为你的应用命名（我使用了`MyFirstApp`）。
- en: Select a folder to save your code.
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个文件夹以保存你的代码。
- en: Click on the **OK** button.
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**确定**按钮。
- en: After this an **Application Wizard** dialog box opens up, as shown in the following
    screenshot:![Using Microsoft Visual C++ on Windows](img/00006.jpeg)
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此后，将打开一个**应用程序向导**对话框，如图所示：![在Windows上使用Microsoft Visual C++](img/00006.jpeg)
- en: 'We have four things to take care of in this dialog box, as follows:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此对话框中，我们需要注意四件事情，如下所述：
- en: Click on **Application Settings** in the left-hand side panel.
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧面板中点击**应用程序设置**。
- en: Ensure that **Console application** is selected.
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保已选择**控制台应用程序**。
- en: Select **Empty project**.
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**空项目**。
- en: Click on **Finish**.
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**完成**。
- en: Now you are in the Visual Studio 2013 environment. This is the place where you
    will do all your work and code.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你处于Visual Studio 2013环境中。这是你将进行所有工作和编写代码的地方。
- en: 'However, we need a file to write our code into. So, we will add a C++ code
    file to our project, as shown in the following screenshot:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们需要一个文件来写入我们的代码。因此，我们将向项目中添加一个C++代码文件，如图所示：
- en: '![Using Microsoft Visual C++ on Windows](img/00007.jpeg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![在Windows上使用Microsoft Visual C++](img/00007.jpeg)'
- en: 'Add your new source code file as shown in the following screenshot:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下截图所示添加你的新源代码文件：
- en: '![Using Microsoft Visual C++ on Windows](img/00008.jpeg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![在Windows上使用Microsoft Visual C++](img/00008.jpeg)'
- en: You will now edit `Source.cpp`. Skip to the Your First C++ Program section and
    type in your code.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你将编辑`Source.cpp`。跳转到“你的第一个C++程序”部分并输入你的代码。
- en: Using XCode on a Mac
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Mac上使用XCode
- en: In this section, we will talk about how to install Xcode on a Mac. Please skip
    to the next section if you are using Windows.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论如何在Mac上安装Xcode。如果你使用Windows，请跳到下一节。
- en: 'Xcode is available on all Mac machines. You can get Xcode using the Apple App
    Store (it''s free), as shown here:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode适用于所有Mac机器。你可以通过Apple App Store获取Xcode（它是免费的），如图所示：
- en: '![Using XCode on a Mac](img/00009.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![在Mac上使用XCode](img/00009.jpeg)'
- en: Once you have Xcode installed, open it. Then, navigate to **File** | **New**
    | **Project...** from the system's menu bar at the top of your screen, as shown
    in the following screenshot:![Using XCode on a Mac](img/00010.jpeg)
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Xcode安装完成后，打开它。然后，从屏幕顶部的系统菜单栏中选择**文件** | **新建** | **项目...**，如图所示：![在Mac上使用XCode](img/00010.jpeg)
- en: In the New Project dialog, select **Application** under **OS X** on the left-hand
    side of the screen, and select **Command Line Tool** from the right-hand side
    pane. Then, click on **Next**:![Using XCode on a Mac](img/00011.jpeg)
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新建项目对话框中，在屏幕左侧选择**OS X**下的**应用程序**，然后在右侧面板中选择**命令行工具**。然后点击**下一步**：![在Mac上使用XCode](img/00011.jpeg)
- en: Note
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You might be tempted to click on the **SpriteKit Game** icon, but don't click
    on it.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可能会想点击**SpriteKit Game**图标，但不要点击它。
- en: In the next dialog, name your project. Be sure to fill in all the fields or
    Xcode won't let you proceed. Make sure that the project's **Type** is set to **C++**
    and then click on the **Next** button, as shown here:![Using XCode on a Mac](img/00012.jpeg)
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个对话框中，为你的项目命名。确保填写所有字段，否则Xcode不会让你继续。确保项目的**类型**设置为**C++**，然后点击**下一步**按钮，如图所示：![在Mac上使用XCode](img/00012.jpeg)
- en: The next popup will ask you to choose a location in order to save your project.
    Pick a spot on your hard drive and save it there. Xcode, by default, creates a
    Git repository for every project you create. You can uncheck **Create git repository**
    —we won't cover Git in this chapter—as shown in the following screenshot:![Using
    XCode on a Mac](img/00013.jpeg)
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一个弹出窗口将要求你选择一个位置以保存你的项目。在你的硬盘上选择一个位置并将其保存那里。Xcode默认为每个创建的项目创建一个Git仓库。你可以取消选择**创建git仓库**——在本章中我们将不涉及Git——如图所示：![在Mac上使用XCode](img/00013.jpeg)
- en: Tip
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Git is a **Version control system**. This basically means that Git keeps the
    snapshots of all the code in your project every so often (every time you *commit*
    to the repository). Other popular **source control management** tools (**scm**)
    are Mercurial, Perforce, and Subversion. When multiple people are collaborating
    on the same project, the scm tool has the ability to automatically merge and copy
    other people's changes from the repository to your local code base.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Git是一个**版本控制系统**。这基本上意味着Git会定期（每次你向仓库*提交*时）保存你项目中所有代码的快照。其他流行的**源代码管理**工具（**scm**）有Mercurial、Perforce和Subversion。当多个人在同一项目上协作时，scm工具具有自动合并和从仓库复制其他人的更改到本地代码库的能力。
- en: 'Okay! You are all set up. Click on the **main.cpp** file in the left-hand side
    panel of Xcode. If the file doesn''t appear, ensure that the folder icon at the
    top of the left-hand side panel is selected first, as shown in the following screenshot:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧！你已经设置好了。点击Xcode左侧面板中的**main.cpp**文件。如果文件没有出现，请确保首先选中左侧面板顶部的文件夹图标，如图所示：
- en: '![Using XCode on a Mac](img/00014.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![在Mac上使用XCode](img/00014.jpeg)'
- en: Creating your first C++ program
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建你的第一个C++程序
- en: 'We are now going to write some C++ source code. There is a very good reason
    why we are calling it the source code: it is the source from which we will build
    our binary executable code. The same C++ source code can be built on different
    platforms such as Mac, Windows, and iOS, and in theory, an executable code doing
    the exact same things on each respective platform should result.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将要编写一些C++源代码。之所以称之为源代码，有一个非常好的原因：它是我们构建二进制可执行代码的源头。相同的C++源代码可以在不同的平台上构建，例如Mac、Windows和iOS，从理论上讲，在每个相应平台上执行相同操作的可执行代码应该会产生相同的结果。
- en: In the not-so-distant past, before the introduction of C and C++, programmers
    wrote code for each specific machine they were targeting individually. They wrote
    code in a language called assembly language. But now, with C and C++ available,
    a programmer only has to write code once, and it can be deployed to a number of
    different machines simply by sending the same code through different compilers.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在不久的过去，在C和C++引入之前，程序员为每个他们针对的特定机器单独编写代码。他们用汇编语言编写代码。但现在，有了C和C++，程序员只需编写一次代码，就可以通过将相同的代码发送到不同的编译器来部署到多个不同的机器上。
- en: Tip
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: In practice, there are some differences between Visual Studio's flavor of C++
    and Xcode's flavor of C++, but these differences mostly come up when working with
    advanced C++ concepts, such as templates.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，Visual Studio的C++版本和Xcode的C++版本之间有一些差异，但这些差异主要出现在处理高级C++概念，如模板时。
- en: One of the main reasons why using UE4 is so helpful is that UE4 will erase a
    lot of the differences between Windows and Mac. The UE4 team did a lot of magic
    in order to get the same code to work on both Windows and Mac.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用UE4的一个主要好处是UE4将消除Windows和Mac之间的许多差异。UE4团队做了很多魔法，以便相同的代码可以在Windows和Mac上运行。
- en: Note
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**A real-world tip**'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**一个实用的技巧**'
- en: It is important for the code to run in the same way on all machines, especially
    for networked games or games that allow things such as shareable replays. This
    can be achieved using standards. For example, the IEEE floating-point standard
    is used to implement decimal math on all C++ compilers. This means that the result
    of computations such as `200 * 3.14159` should be the same on all the machines.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 代码在所有机器上以相同的方式运行非常重要，特别是对于网络游戏或允许分享重放等功能的游戏。这可以通过使用标准来实现。例如，IEEE浮点标准用于在所有C++编译器上实现十进制数学。这意味着计算结果如`200
    * 3.14159`应该在所有机器上相同。
- en: 'Write the following code in Microsoft Visual Studio or in Xcode:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在Microsoft Visual Studio或Xcode中编写以下代码：
- en: '[PRE0]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Press *Ctrl* + *F5* to run the preceding code in Visual Studio, or press ![Creating
    your first C++ program](img/00015.jpeg) + *R* to run in Xcode.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 按*Ctrl* + *F5*在Visual Studio中运行前面的代码，或者在Xcode中按![创建你的第一个C++程序](img/00015.jpeg)
    + *R* 运行。
- en: 'The first time you press *Ctrl* + *F5* in Visual Studio, you will see this
    dialog:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你第一次在Visual Studio中按*Ctrl* + *F5*时，你会看到这个对话框：
- en: '![Creating your first C++ program](img/00016.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![创建你的第一个C++程序](img/00016.jpeg)'
- en: Select **Yes** and **Do not show this dialog again**—trust me, this will avoid
    future problems.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 选择**是**和**不再显示此对话框**——相信我，这将避免未来的问题。
- en: The first thing that might come to your mind is, "My! A whole lot of gibberish!"
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能首先想到的是，“哇！一大堆乱七八糟的东西！”
- en: Indeed, you rarely see the use of the hash (#) symbol (unless you use Twitter)
    and curly brace pairs `{` `}` in normal English texts. However, in C++ code, these
    strange symbols abound. You just have to get used to them.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 的确，你很少在正常的英语文本中看到哈希符号（#）的使用（除非你在使用Twitter）和花括号对`{}`。然而，在C++代码中，这些奇怪的符号到处都是。你只需要习惯它们。
- en: So, let's interpret this program, starting from the first line.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们从第一行开始解释这个程序。
- en: 'This is the first line of the program:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这是程序的第一行：
- en: '[PRE1]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This line has two important points to be noted:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行有两个需要注意的重要点：
- en: The first thing we see is an `#include` statement. We are asking C++ to copy
    and paste the contents of another C++ source file, called `<iostream>`, directly
    into our code file. The `<iostream>` is a standard C++ library that handles all
    the sticky code that lets us print text to the screen.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们看到的第一件事是`#include`语句。我们要求C++复制并粘贴另一个名为`<iostream>`的C++源文件的内容，直接到我们的代码文件中。《iostream》是一个标准的C++库，它处理所有让我们能够打印文本到屏幕的粘性代码。
- en: The second thing we notice is a `//` comment. C++ ignores any text after a double
    slash (`//`) until the end of that line. Comments are very useful to add in plain
    text explanations of what some code does. You might also see `/* */` C-style comments
    in the source. Surrounding any text in C or C++ with slash-star `/*` and star-slash
    `*/` gives an instruction to have that code removed by the compiler.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们注意到的第二件事是`//`注释。C++会忽略双斜杠(`//`)之后直到该行结束的任何文本。注释非常有用，可以添加对某些代码的纯文本解释。你可能在源代码中看到`/*
    */`风格的C风格注释。在C或C++中将任何文本用反斜杠星号`/*`和星号反斜杠`*/`包围，会给编译器一个指令，让这段代码被移除。
- en: 'This is the next line of code:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这是下一行代码：
- en: '[PRE2]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The comments beside this line explain what the `using` statement does: it just
    lets you use a shorthand (for example, `cout`) instead of the fully qualified
    name (which, in this case, would be `std::cout`) for a lot of our C++ code commands.
    Some people don''t like a `using namespace std;` statement; they prefer to write
    the `std::cout` longhand every time they want to use `cout`. You can get into
    long arguments over things like this. In this section of the text, we prefer the
    brevity that we get with the `using namespace` `std;` statement.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这行旁边的注释解释了`using`语句的作用：它只是让你可以使用缩写（例如，`cout`），而不是使用完全限定的名称（在这个例子中，将是`std::cout`）来代替我们许多C++代码命令。有些人不喜欢`using
    namespace std;`语句；他们更喜欢每次想要使用`cout`时都写`std::cout`。你可能会因为这类事情而陷入长篇大论。在本节文本中，我们更喜欢`using
    namespace` `std;`语句带来的简洁性。
- en: 'This is the next line:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这是下一行：
- en: '[PRE3]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This is the application''s starting point. You can think of `main` as the start
    line in a race. The `int main()` statement is how your C++ program knows where
    to start; take a look at the following figure:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这是应用程序的起点。你可以把`main`看作是比赛中的起点线。`int main()`语句是C++程序知道从哪里开始的方式；看看下面的图：
- en: '![Creating your first C++ program](img/00017.jpeg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![创建你的第一个C++程序](img/00017.jpeg)'
- en: If you don't have an `int main()` program marker or if `main` is spelled incorrectly,
    then your program just won't work because the program won't know where to start.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有`int main()`程序标记，或者`main`拼写错误，那么你的程序将无法工作，因为程序将不知道从哪里开始。
- en: 'The next line is a character you don''t see often:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 下一行是一个你不太常见的字符：
- en: '[PRE4]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This `{` character is not a sideways mustache. It is called a curly brace, and
    it denotes the starting point of your program.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`{`字符不是一个侧面的胡须。它被称为花括号，它表示你程序的起点。
- en: 'The next two lines print text to the screen:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的两行将文本打印到屏幕上：
- en: '[PRE5]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `cout` statement stands for console output. Text between double quotes will
    get an output to the console exactly as it appears between the quotes. You can
    write anything you want between double quotes except a double quote and it will
    still be valid code.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`cout`语句代表控制台输出。双引号之间的文本将以与引号内完全相同的方式输出到控制台。你可以在双引号之间写任何你想要的内容，除了双引号本身，它仍然会是有效的代码。'
- en: Tip
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'To enter a double quote between double quotes, you need to stick a backslash
    (`\`) in front of the double quote character that you want inside the string,
    as shown here:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要在双引号之间输入一个双引号，你需要在你想放在字符串中的双引号字符前面加上一个反斜杠(`\`)，如下所示：
- en: '[PRE6]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `\` symbol is an example of an escape sequence. There are other escape sequences
    that you can use; the most common escape sequence you will find is `\n`, which
    is used to jump the text output to the next line.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 反斜杠(`\`)符号是一个转义序列的例子。还有其他你可以使用的转义序列；你将最常找到的转义序列是`\n`，它用于将文本输出跳转到下一行。
- en: 'The last line of the program is the `return` statement:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 程序的最后一行是`return`语句：
- en: '[PRE7]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This line of code indicates that the C++ program is quitting. You can think
    of the `return` statement as returning to the operating system.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码表示C++程序正在退出。你可以把`return`语句看作是返回到操作系统。
- en: 'Finally, the end of your program is denoted by the closing curly brace, which
    is an opposite-facing sideways mustache:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你的程序结束的标志是闭合的花括号，它是一个反向的侧脸八字胡：
- en: '[PRE8]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Semicolons
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分号
- en: Semicolons (;) are important in C++ programming. Notice in the preceding code
    example that most lines of code end in a semicolon. If you don't end each line
    with a semicolon, your code will not compile, and if that happens, you can be
    fired from your job.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 分号（;）在C++编程中很重要。注意在前面的代码示例中，大多数代码行都以分号结束。如果你不每行都加上分号，你的代码将无法编译，如果发生这种情况，你可能会被解雇。
- en: Handling errors
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理错误
- en: If you make a mistake while entering code, then you will have a syntax error.
    In the face of syntax errors, C++ will scream murder and your program will not
    even compile; also, it will not run.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你输入代码时出错，那么你将会有语法错误。面对语法错误，C++会发出惨叫，你的程序甚至无法编译；同样，它也无法运行。
- en: 'Let''s try to insert a couple of errors into our C++ code from earlier:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试在我们的早期C++代码中插入几个错误：
- en: '![Handling errors](img/00018.jpeg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![处理错误](img/00018.jpeg)'
- en: Warning! This code listing contains errors. It is a good exercise to find all
    the errors and fix them!
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 警告！此代码列表包含错误。找出所有错误并修复它们是一个很好的练习！
- en: As an exercise, try to find and fix all the errors in this program.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 作为练习，尝试找出并修复这个程序中的所有错误。
- en: Note
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that if you are extremely new to C++, this might be a hard exercise. However,
    this will show you how careful you need to be when writing C++ code.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果你对C++非常不熟悉，这个练习可能很难。然而，这将向你展示在编写C++代码时你需要多么小心。
- en: 'Fixing compilation errors can be a nasty business. However, if you input the
    text of this program into your code editor and try to compile it, it will cause
    the compiler to report all the errors to you. Fix the errors, one at a time, and
    then try to recompile. A new error will pop up or the program will just work,
    as shown in the following screenshot:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 修复编译错误可能是一件棘手的事情。然而，如果你将这个程序的文本输入到你的代码编辑器中并尝试编译它，它将导致编译器向你报告所有错误。一次修复一个错误，然后尝试重新编译。新的错误将出现，或者程序将正常工作，如以下截图所示：
- en: '![Handling errors](img/00019.jpeg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![处理错误](img/00019.jpeg)'
- en: Xcode shows you the errors in your code when you try to compile it
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode在你尝试编译代码时显示你的代码中的错误
- en: 'The reason I am showing you this sample program is to encourage the following
    workflow as long as you are new to C++:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我向你展示这个示例程序是为了鼓励以下工作流程，只要你对C++不熟悉：
- en: Always start with a working C++ code example. You can fork off a bunch of new
    C++ programs from the *Your First C++ Program* section.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 总是从一个工作的C++代码示例开始。你可以从“你的第一个C++程序”部分分叉出许多新的C++程序。
- en: Make your code modifications in small steps. When you are new, compile after
    writing each new line of code. Do not code for one to two hours and then compile
    all that new code at once.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 逐步修改你的代码。当你刚开始时，每写完一行新代码就编译一次。不要连续编码一两个小时，然后一次性编译所有新代码。
- en: You can expect it to be a couple of months before you can write code that performs
    as expected the first time you write it. Don't get discouraged. Learning to code
    is fun.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可能需要几个月的时间才能写出第一次编写时就能按预期运行的代码。不要气馁。学习编码是件有趣的事情。
- en: Warnings
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 警告
- en: The compiler will flag things that it thinks might be mistakes. These are another
    class of compiler notices known as warnings. Warnings are problems in your code
    that you do not have to fix for your code to run but are simply recommended to
    be fixed by the compiler. Warnings are often indications of code that is not quite
    perfect, and fixing warnings in code is generally considered good practice.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器会标记出它认为可能是错误的地方。这些都是另一类编译器通知，被称为警告。警告是代码中的问题，你不必修复它们代码就能运行，但编译器建议修复。警告通常是代码不够完美的指示，修复代码中的警告通常被认为是良好的实践。
- en: However, not all warnings are going to cause problems in your code. Some programmers
    prefer to disable the warnings that they do not consider to be an issue (for example,
    warning 4018 warns against signed/unsigned mismatch, which you will most likely
    see later).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，并非所有的警告都会导致你的代码出现问题。一些程序员更喜欢禁用他们认为不是问题的警告（例如，警告4018警告有符号/无符号不匹配，你很可能稍后看到）。
- en: What is building and compiling?
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是构建和编译？
- en: You might have heard of a computer process term called compiling. Compiling
    is the process of converting your C++ program into code that can run on a CPU.
    Building your source code means the same thing as compiling it.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能听说过一个计算机术语叫做编译。编译是将您的 C++ 程序转换成可以在 CPU 上运行的代码的过程。构建您的源代码与编译它意味着同一件事。
- en: See, your source `code.cpp` file will not actually run on a computer. It has
    to be compiled first for it to run.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 看看，您的源代码文件 `code.cpp` 实际上不能在计算机上运行。它必须先编译，才能运行。
- en: This is the whole point of using Microsoft Visual Studio Express or Xcode. Visual
    Studio and Xcode are both compilers. You can write C++ source code in any text-editing
    program—even in Notepad. But you need a compiler to run it on your machine.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是使用 Microsoft Visual Studio Express 或 Xcode 的全部意义。Visual Studio 和 Xcode 都是编译器。您可以在任何文本编辑程序中编写
    C++ 源代码——甚至可以在记事本中。但您需要一个编译器才能在您的机器上运行它。
- en: Every operating system typically has one or more C++ compilers that can compile
    C++ code to run on that platform. On Windows, you have Visual Studio and Intel
    C++ Studio compiler. On Mac, there is Xcode, and on all of Windows, Mac, and Linux,
    there is the **GNU Compiler Collection** (**GCC**).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 每个操作系统通常都有一个或多个可以编译 C++ 代码以在该平台上运行的 C++ 编译器。在 Windows 上，您有 Visual Studio 和 Intel
    C++ Studio 编译器。在 Mac 上，有 Xcode，在所有 Windows、Mac 和 Linux 上，有 **GNU 编译器集合**（**GCC**）。
- en: The same C++ code that we write (Source) can be compiled using different compilers
    for different operating systems, and in theory, they should produce the same result.
    The ability to compile the same code on different platforms is called portability.
    In general, portability is a good thing.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编写的相同 C++ 代码（源代码）可以使用不同操作系统的不同编译器进行编译，理论上，它们应该产生相同的结果。能够在不同平台上编译相同代码的能力称为可移植性。一般来说，可移植性是好事。
- en: Scripting
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 脚本语言
- en: There is another class of programming languages called scripting languages.
    These include languages such as PHP, Python, and ActionScript. Scripted languages
    are not compiled—for JavaScript, PHP, and ActionScript, there is no compilation
    step. Rather, they are interpreted from the source as the program is run. The
    good thing about scripting languages is that they are usually platform-independent
    from the first go, because interpreters are very carefully designed to be platform-independent.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 另有一类编程语言称为脚本语言。这些包括 PHP、Python 和 ActionScript 等语言。脚本语言不进行编译——对于 JavaScript、PHP
    和 ActionScript，没有编译步骤。相反，它们在程序运行时从源代码进行解释。脚本语言的好处是，它们通常一开始就是平台无关的，因为解释器被精心设计成平台无关的。
- en: Exercise – ASCII art
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 – ASCII 艺术字
- en: 'Game programmers love ASCII art. You can draw a picture using only characters.
    Here''s an example of an ASCII art maze:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏程序员喜欢 ASCII 艺术字。你可以只用字符来绘制一幅图画。以下是一个 ASCII 艺术字迷宫的例子：
- en: '[PRE9]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Construct your own maze in C++ code or draw a picture using characters.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 C++ 代码构建您自己的迷宫，或者用字符绘制一幅图画。
- en: Summary
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: To sum it up, we learned how to write our first program in the C++ programming
    language in our integrated development environment (IDE, Visual Studio, or Xcode).
    This was a simple program, but you should count getting your first program to
    compile and run as your first victory. In the upcoming chapters, we'll put together
    more complex programs and start using Unreal Engine for our games.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，我们在我们的集成开发环境（IDE，Visual Studio 或 Xcode）中学习了如何编写我们的第一个 C++ 程序。这是一个简单的程序，但您应该把第一次让程序编译并运行视为您的第一个胜利。在接下来的章节中，我们将构建更复杂的程序，并开始为我们的游戏使用
    Unreal Engine。
- en: '![Summary](img/00020.jpeg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![总结](img/00020.jpeg)'
- en: 'The preceding screenshot is of your first C++ program and the following screenshot
    is of its output, your first victory:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 上述截图是您的第一个 C++ 程序，下方的截图是它的输出，您的第一个胜利：
- en: '![Summary](img/00021.jpeg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![总结](img/00021.jpeg)'
