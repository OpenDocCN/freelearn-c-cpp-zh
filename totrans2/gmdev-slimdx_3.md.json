["```cpp\npublic class GameWindow2D : GameWindow, IDispoable\n```", "```cpp\nusing System.Windows.Forms;\nusing System.Diagnostics;\nusing System.Drawing;\nusing System;\nusing SlimDX;\nusing SlimDX.Direct2D;\nusing SlimDX.Windows;\n```", "```cpp\nWindowRenderTarget m_RenderTarget;\nFactory m_Factory;\nPathGeometry m_Geometry;\nSolidColorBrush m_BrushRed;\nSolidColorBrush m_BrushGreen;\nSolidColorBrush m_BrushBlue;\n```", "```cpp\npublic GameWindow2D(string title, int width, int height,bool fullscreen)\n    : base(title, width, height, fullscreen)\n{\n    m_Factory = new Factory();\n\n    WindowRenderTargetProperties properties = new WindowRenderTargetProperties();\n    properties.Handle = FormObject.Handle;\n    properties.PixelSize = new Size(width, height);\n\n    m_RenderTarget = new WindowRenderTarget(m_Factory, properties);\n}\n```", "```cpp\nm_BrushRed = new SolidColorBrush(m_RenderTarget, new Color4(1.0f, 1.0f, 0.0f, 0.0f));\nm_BrushGreen = new SolidColorBrush(m_RenderTarget, new Color4(1.0f, 0.0f, 1.0f, 0.0f));\nm_BrushBlue = new SolidColorBrush(m_RenderTarget, new Color4(1.0f, 0.0f, 0.0f, 1.0f));\n```", "```cpp\nm_Geometry = new PathGeometry(m_RenderTarget.Factory);\n\nusing (GeometrySink sink = m_Geometry.Open())\n{\n    int top = (int) (0.25f * FormObject.Height);\n    int left = (int) (0.25f * FormObject.Width);\n    int right = (int) (0.75f * FormObject.Width);\n    int bottom = (int) (0.75f * FormObject.Height);\n\n    PointF p0 = new Point(left, top);\n    PointF p1 = new Point(right, top);\n    PointF p2 = new Point(right, bottom);\n    PointF p3 = new Point(left, bottom);\n\n    sink.BeginFigure(p0, FigureBegin.Filled);\n    sink.AddLine(p1);\n    sink.AddLine(p2);\n    sink.AddLine(p3);\n    sink.EndFigure(FigureEnd.Closed);\n    sink.Close();\n}\n```", "```cpp\npublic override void UpdateScene(double frameTime)\n{\n    base.UpdateScene(frameTime);\n}\n```", "```cpp\npublic override void RenderScene()\n\n{\n    if ((!this.IsInitialized) || this.IsDisposed)\n    {\n        return;\n    }\n\n    m_RenderTarget.BeginDraw();\n    m_RenderTarget.Clear(ClearColor);\n    m_RenderTarget.FillGeometry(m_Geometry, m_BrushBlue);\n    m_RenderTarget.DrawGeometry(m_Geometry, m_BrushRed, 1.0f);\n    m_RenderTarget.EndDraw();\n}\n```", "```cpp\nusing System.Windows.Forms;\nusing System.Collections,Generic;\nusing System.Diagnostics;\nusing System.Drawing;\nusing System;\n\nusing SlimDX;\nusing SlimDX.Direct2D;\nusing SlimDX.DirectInput;\nusing SlimDX.Windows;\n```", "```cpp\nconst float PLAYER_MOVE_SPEED = 0.05f;\n```", "```cpp\npublic struct Player\n{\n    public float PositionX;\n    public float PositionY;\n    public int AnimFrame;\n    public double LastFrameChange;\n}\n```", "```cpp\npublic struct Tile\n{\n    public bool IsSolid;\n    public int SheetPosX;\n    public int SheetPosY;\n}\n```", "```cpp\nWindowRenderTarget m_RenderTarget;\nFactory m_Factory;\n\nPlayer m_Player;\nSlimDX.Direct2D.Bitmap m_PlayerSprites;\nSlimDX.Direct2D.Bitmap m_TileSheet;\n\nList<Tile> m_TileList;\nint[ , ] m_Map;\nSolidColorBrush m_DebugBrush;\n```", "```cpp\nm_Factory = new Factory();\n\nRenderTargetProperties rtProperties = new RenderTargetProperties();\nrtProperties.PixelFormat = new PixelFormat(SlimDX.DXGI.Format.B8G8R8A8_UNorm, AlphaMode.Premultiplied);\n\nWindowRenderTargetProperties properties = new WindowRenderTargetProperties();\nproperties.Handle = FormObject.Handle;\nproperties.PixelSize = new Size(width, height);\n\nm_RenderTarget = new WindowRenderTarget(m_Factory, rtProperties, properties);\n\nm_DebugBrush = new SolidColorBrush(m_RenderTarget, new Color4(1.0f, 1.0f, 1.0f, 0.0f));\n```", "```cpp\npublic SlimDX.Direct2D.Bitmap LoadBitmap(string filename)\n{\n    // This will hold the Direct2D Bitmap that we will return at the end of this function.SlimDX.Direct2D.Bitmap d2dBitmap = null;\n\n    // Load the bitmap using the System.Drawing.Bitmap class.\n      System.Drawing.Bitmap originalImage = new System.Drawing.Bitmap(filename);\n    // Create a rectangle holding the size of the bitmap image.\n    Rectangle bounds = new Rectangle(0, 0, originalImage.Width, originalImage.Height);\n\n    // Lock the memory holding this bitmap so that only we are allowed to mess with it.\n    System.Drawing.Imaging.BitmapData imageData = originalImage.LockBits(bounds, System.Drawing.Imaging.ImageLockMode.ReadOnly, System.Drawing.Imaging.PixelFormat.Format32bppPArgb);\n\n    // Create a DataStream attached to the bitmap.\n    SlimDX.DataStream dataStream = new DataStream(imageData.Scan0,  imageData.Stride * imageData.Height, true, false);\n\n    // Set the pixel format and properties.\n    PixelFormat pFormat = new PixelFormat(SlimDX.DXGI.Format.B8G8R8A8_UNorm, AlphaMode.Premultiplied);\n    BitmapProperties bmpProperties = new BitmapProperties();\n    bmpProperties.PixelFormat = pFormat;\n\n    // Copy the image data into a new SlimDX.Direct2D.Bitmap object.\n    d2dBitmap = new SlimDX.Direct2D.Bitmap(m_RenderTarget, new Size(bounds.Width, bounds.Height), dataStream, imageData.Stride, bmpProperties);\n\n    // Unlock the memory that is holding the original bitmap object.\n    originalImage.UnlockBits(imageData);\n\n    // Get rid of the original bitmap object since we no longer need it.\n    originalImage.Dispose();\n    // Return the Direct2D bitmap.\n    return d2dBitmap;\n}\n```", "```cpp\nm_PlayerSprites = LoadBitmap(Application.StartupPath + \"\\\\Robot.png\");\n\nm_Player = new Player();\nm_Player.PositionX = 4;\nm_Player.PositionY = 8;\n```", "```cpp\nm_TileSheet = LoadBitmap(Application.StartupPath + \"\\\\TileSheet.png\");\n\nm_TileList = new List<Tile>();\n\n// First row of sprites in the sprite sheet.\nm_TileList.Add(new Tile() { IsSolid = false, SheetPosX = 0, SheetPosY = 0 });\nm_TileList.Add(new Tile() { IsSolid = false, SheetPosX = 1, SheetPosY = 0 });\nm_TileList.Add(new Tile() { IsSolid = false, SheetPosX = 2, SheetPosY = 0 });\nm_TileList.Add(new Tile() { IsSolid = false, SheetPosX = 3, SheetPosY = 0 });\nm_TileList.Add(new Tile() { IsSolid = false, SheetPosX = 4, SheetPosY = 0 });\nm_TileList.Add(new Tile() { IsSolid = false, SheetPosX = 5, SheetPosY = 0 });\nm_TileList.Add(new Tile() { IsSolid = false, SheetPosX = 6, SheetPosY = 0 });\nm_TileList.Add(new Tile() { IsSolid = true, SheetPosX = 7, SheetPosY = 0 });\n```", "```cpp\nm_Map = new int[,] { {14, 14, 14 },\n                     {14, 0, 14 },\n                     {14, 14, 14 } };\n```", "```cpp\npublic void RenderWorld()\n{\n    Tile s;\n    // Loop through the y axis.\n    for (int y = 0; y < m_Map.GetLength(0); y++)\n    {\n        // Loop through the x axis.\n        for (int x = 0; x < m_Map.GetLength(1); x++)\n        {\n            // Get the tile at the current coordinates.\n            s = m_TileList[ m_Map[y, x] ];\n\n            // Render the tile.\n            m_RenderTarget.DrawBitmap(m_TileSheet,\n                new Rectangle(x * 32, y * 32, 32, 32),\n                1.0f,\n                InterpolationMode.Linear,\n                new Rectangle(s.SheetPosX * 32,\n                              s.SheetPosY * 32,\n                               32, 32));\n        }\n    }\n}\n```", "```cpp\npublic void RenderPlayer()\n{\n    // Render the player character.\n    m_RenderTarget.DrawBitmap(m_PlayerSprites,\n          new Rectangle((int) (m_Player.PositionX * 32),\n                        (int) (m_Player.PositionY * 32),\n                        32, 32),\n                       1.0f,\n                       InterpolationMode.Linear,new Rectangle(m_Player.AnimFrame * 32,\n                                      0, 32, 32));\n}\n```", "```cpp\npublic void RenderDebug()\n{\n    Tile s;\n\n     // Loop through the y axis.\n     for (int y = 0; y < m_Map.GetLength(0); y++)\n     {\n         // Loop through the x axis.\n         for (int x = 0; x < m_Map.GetLength(1); x++)\n         {\n             // Get the tile at the current coordinates.\n             s = m_TileList[m_Map[y, x]];\n\n             // Check if the tile is solid. If so, draw a yellow border on it.\n             if (s.IsSolid)\n                 m_RenderTarget.DrawRectangle(m_DebugBrush,\n                     new Rectangle(x * 32, y * 32, 32, 32));\n        }\n    }\n}\n```", "```cpp\npublic override void RenderScene()\n{\n    if ((!this.IsInitialized) || this.IsDisposed)\n    {\n        return;\n    }\n\n    m_RenderTarget.BeginDraw();\n    m_RenderTarget.Clear(ClearColor);\n\n    RenderWorld();\n\n#if DEBUG\n    RenderDebug();\n#endif\n\n    RenderPlayer();\n\n    // Tell the render target that we are done drawing.\n    m_RenderTarget.EndDraw();\n}\n```", "```cpp\nbase.UpdateScene(frameTime);\n\n// Figure out which grid square each corner of the player sprite is currently in.\nPointF TL = new PointF(m_Player.PositionX + 0.25f, m_Player.PositionY + 0.25f); // Top left corner\nPointF BL = new PointF(m_Player.PositionX + 0.25f, m_Player.PositionY + 0.75f); // Bottom left corner\nPointF TR = new PointF(m_Player.PositionX + 0.75f, m_Player.PositionY + 0.25f); // Top right corner\nPointF BR = new PointF(m_Player.PositionX + 0.75f, m_Player.PositionY + 0.75f); // Bottom right corner\n```", "```cpp\n// Check if the user is pressing left.\nif (m_UserInput.KeyboardState_Current.IsPressed(Key.A) ||\n   (m_UserInput.KeyboardState_Current.IsPressed(Key.LeftArrow)))\n{\n    if ((!m_TileList[m_Map[(int) TL.Y, (int) (TL.X - PLAYER_MOVE_SPEED)]].IsSolid) && (!m_TileList[m_Map[(int) BL.Y, (int) (BL.X â€“ PLAYER_MOVE_SPEED)]].IsSolid)){\n         m_Player.PositionX -= PLAYER_MOVE_SPEED;\n     }\n}\n```", "```cpp\nm_Player.LastFrameChange += frameTime;\nif (m_Player.LastFrameChange > 0.1)\n{\n    m_Player.LastFrameChange = 0;\n    m_Player.AnimFrame++;\n    if (m_Player.AnimFrame > 7)\n       m_Player.AnimFrame = 0;\n}\n```"]