["```cpp\n    class Platform\n    {\n    public:\n        static const char* getAppVersion();\n    };\n    ```", "```cpp\n    #include \"Platform.h\"\n\n    const char* Platform::getAppVersion()\n    {\n        NSDictionary* info = [[NSBundle mainBundle] \n        infoDictionary]; \n        NSString* version = [info \n        objectForKey:(NSString*)kCFBundleVersionKey]; \n        if (version) { \n            return [version UTF8String]; \n        }\n        return nullptr;\n    }\n    ```", "```cpp\n    #include \"Platform.h\"\n    #include \"platform/android/jni/JniHelper.h\"\n    #define CLASS_NAME \"org/cocos2dx/cpp/AppActivity\"\n\n    USING_NS_CC;\n\n    const char* Platform::getAppVersion()\n    {\n        JniMethodInfo t;\n        const char* ret = NULL;\n        if (JniHelper::getStaticMethodInfo(t, CLASS_NAME, \n        \"getAppVersionInJava\", \"()Ljava/lang/String;\")) {\n            jstring jstr = (jstring)t.env- \n    >CallStaticObjectMethod(t.classID,t.methodID); \n            std::string sstr = JniHelper::jstring2string(jstr); \n            t.env->DeleteLocalRef(t.classID); \n            t.env->DeleteLocalRef(jstr); \n            ret = sstr.c_str(); \n        }\n        return ret;\n    }\n    ```", "```cpp\n    LOCAL_SRC_FILES := hellocpp/main.cpp \\ \n                       ../../Classes/AppDelegate.cpp \\ \n                       ../../Classes/HelloWorldScene.cpp \\\n                       ../../Classes/Platform.cpp\n    ```", "```cpp\n    public class AppActivity extends Cocos2dxActivity { \n        public static String appVersion = \"\";\n\n        @Override \n        protected void onCreate(Bundle savedInstanceState) { \n            super.onCreate(savedInstanceState); \n\n            try { \n                PackageInfo packageInfo = \n    getPackageManager().getPackageInfo(getPackageName(), \n    PackageManager.GET_META_DATA); \n                appVersion = packageInfo.versionName; \n            } catch (NameNotFoundException e) { \n            }\n        }\n\n        public static String getAppVersionInJava() { return appVersion; \n        }\n    }\n    ```", "```cpp\n    #include \"Platform.h\" \n\n    const char* version = Platform::getAppVersion(); \n    CCLOG(\"application version = %s\", version);\n    ```", "```cpp\nJniMethodInfo t; \nJniHelper::getStaticMethodInfo(t, CLASS_NAME, \n\"getAppVersionInJava\", \n\"()Ljava/lang/String;\")\n```", "```cpp\n$ cd /path/to/project/pro.android/bin/classes \n$ javap -s org.cocos2dx.cpp.AppActivity \nCompiled from \"AppActivity.java\" \npublic class org.cocos2dx.cpp.AppActivity extends \norg.cocos2dx.lib.Cocos2dxActivity { \n  public static java.lang.String appVersion; \n    descriptor: Ljava/lang/String; \n  public org.cocos2dx.cpp.AppActivity(); \n    descriptor: ()V \n\n  protected void onCreate(android.os.Bundle); \n    descriptor: (Landroid/os/Bundle;)V \n\n  public static java.lang.String getAppVersionInJava(); \n    descriptor: ()Ljava/lang/String; \n\n  static {}; \n    descriptor: ()V \n}\n```", "```cpp\njstring jstr = (jstring)t.env- >CallStaticObjectMethod(t.classID,t.methodID);\n```", "```cpp\n#if (CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID) \n    CCLOG(\"this platform is Android\"); \n#elif (CC_TARGET_PLATFORM == CC_PLATFORM_IOS) \n    CCLOG(\"this platform is iOS\"); \n#else \n    CCLOG(\"this platfomr is others\");\n#endif\n```", "```cpp\nswitch (Application::getInstance()->getTargetPlatform()) { \n        case Application::Platform::OS_ANDROID: \n            CCLOG(\"this device is Android\"); \n            break;\n        case Application::Platform::OS_IPHONE: \n            CCLOG(\"this device is iPhone\"); \n            break;\n        case Application::Platform::OS_IPAD: \n            CCLOG(\"this device is iPad\"); \n            break;\n        default: \n            break;\n}\n```", "```cpp\nDevice::setAccelerometerEnabled(true);\nauto listener = EventListenerAcceleration::create([](Acceleration* \nacc, Event* event){ \n    CCLOG(\"x=%f, y=%f, z=%f\", acc->x, acc->y, acc->z); \n}); \nthis->getEventDispatcher()- \n>addEventListenerWithSceneGraphPriority(listener, this);\n```", "```cpp\n    Device::setAccelerometerEnable(true);\n    ```", "```cpp\nDevice::setAccelerometerInterval(1.0f);\n```", "```cpp\nDevice::setKeepScreenOn(true);\n```", "```cpp\nvoid Device::setKeepScreenOn(bool value) \n{\n    [[UIApplication sharedApplication] \nsetIdleTimerDisabled:(BOOL)value]; \n}\n```", "```cpp\npublic void setKeepScreenOn(boolean value) { \n    final boolean newValue = value; \n    runOnUiThread(new Runnable() { \n        @Override\n        public void run() { \n            mGLSurfaceView.setKeepScreenOn(newValue); \n        }\n    });\n}\n```", "```cpp\nint dpi = Device::getDPI(); \nCCLOG(\"dpi = %d\", dpi);\n```", "```cpp\nauto config = Configuration::getInstance();\nint texutureSize = config->getMaxTextureSize();\nCCLOG(\"max texture size = %d\", texutureSize);\n```", "```cpp\nauto config = Configuration::getInstance(); \nstd::string info = config->getInfo(); \nCCLOG(\"%s\", info.c_str());\n```", "```cpp\n{\n  gl.supports_vertex_array_object: true  cocos2d.x.version: \n  cocos2d-x 3.5 \n  gl.vendor: Apple Inc. \n  gl.supports_PVRTC: true \n  gl.renderer: Apple A8 GPU \n  cocos2d.x.compiled_with_profiler: false \n  gl.max_texture_size: 4096 \n  gl.supports_ETC1: false \n  gl.supports_BGRA8888: false \n  cocos2d.x.build_type: RELEASE \n  gl.supports_discard_framebuffer: true \n  gl.supports_NPOT: true \n  gl.supports_ATITC: false \n  gl.max_samples_allowed: 4 \n  gl.max_texture_units: 8 \n  cocos2d.x.compiled_with_gl_state_cache: true \n  gl.supports_S3TC: false \n  gl.version: OpenGL ES 2.0 Apple A8 GPU - 53.13 \n}\n```"]