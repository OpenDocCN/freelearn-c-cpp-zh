- en: Chapter 1. Installing JUCE and the Introjucer Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章：安装 JUCE 和 Introjucer 应用程序
- en: 'This chapter guides you through installing the JUCE library, and covers the
    structure of its source code tree, including some of the useful tools available
    for creating JUCE-based projects. In this chapter we will cover the following
    topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将指导您安装 JUCE 库，并涵盖其源代码树的结构，包括一些可用于创建基于 JUCE 的项目的有用工具。在本章中，我们将涵盖以下主题：
- en: Installing JUCE for Mac OS X and Windows
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 Mac OS X 和 Windows 安装 JUCE
- en: Building and running the JUCE Demo project
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建 和 运行 JUCE 示例项目
- en: Building and running the Introjucer application
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建 和 运行 Introjucer 应用程序
- en: Creating a JUCE project with the Introjucer application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Introjucer 应用程序创建 JUCE 项目
- en: By the end of this chapter, you will have installed JUCE and created a basic
    project using the Introjucer application.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将安装 JUCE 并使用 Introjucer 应用程序创建一个基本项目。
- en: Installing JUCE for Mac OS X and Windows
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为 Mac OS X 和 Windows 安装 JUCE
- en: '**JUCE** supports the development of C++ applications for a range of target
    platforms. These include Microsoft Windows, Mac OS X, iOS, Linux, and Android.
    In general, this book covers the development of C++ applications using JUCE for
    Windows and Mac OS X, but it is relatively straightforward to apply this knowledge
    to build applications for the other supported target platforms.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**JUCE** 支持为多种目标平台开发 C++ 应用程序。这些平台包括 Microsoft Windows、Mac OS X、iOS、Linux 和
    Android。一般来说，本书涵盖了使用 JUCE 在 Windows 和 Mac OS X 上开发 C++ 应用程序，但将此知识应用于构建其他支持的目标平台的应用程序相对简单。'
- en: In order to compile JUCE-based code for these platforms, typically an **Integrated
    Development Environment** (**IDE**) is required. To compile code for Windows,
    the Microsoft Visual Studio IDE is recommended (supported variants are Microsoft
    Visual Studio 2008, 2010, and 2012). Microsoft Visual Studio is available to download
    from [http://www.microsoft.com/visualstudio](http://www.microsoft.com/visualstudio)
    (the free Express versions are sufficient for non-commercial development). To
    compile code for Mac OS X or iOS, the Xcode IDE is required. Generally, the latest
    public version of Xcode is recommended. This can be downloaded for free from the
    Mac App Store from within Mac OS X.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为这些平台编译基于 JUCE 的代码，通常需要一个 **集成开发环境**（**IDE**）。要为 Windows 编译代码，建议使用 Microsoft
    Visual Studio IDE（支持的变体包括 Microsoft Visual Studio 2008、2010 和 2012）。Microsoft
    Visual Studio 可从 [http://www.microsoft.com/visualstudio](http://www.microsoft.com/visualstudio)
    下载（免费 Express 版本足以用于非商业开发）。要为 Mac OS X 或 iOS 编译代码，需要 Xcode IDE。通常，建议使用最新的公共版本。这可以从
    Mac App Store 内免费下载。
- en: JUCE is provided as source code (rather than prebuilt libraries) divided into
    discrete but interconnected **modules**. The `juce_core` module is licensed under
    the **Internet Systems Consortium** (**ISC**) license, allowing it to be used
    freely in commercial and open source projects. All the other JUCE modules are
    dual licensed. For open source development, JUCE may be licensed under the terms
    of the **GNU General Public License** (Version 2 or later) or the **Affero General
    Public License** (Version 3). JUCE may also be used for closed-source, commercial
    projects using separate commercial licenses for a fee. More information on JUCE
    licensing is available at [http://www.juce.com/documentation/commercial-licensing](http://www.juce.com/documentation/commercial-licensing).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: JUCE 以源代码形式提供（而不是预构建库），分为离散但相互关联的 **模块**。`juce_core` 模块根据 **Internet Systems
    Consortium** (**ISC**) 许可证授权，允许在商业和开源项目中免费使用。所有其他 JUCE 模块都采用双重许可。对于开源开发，JUCE 可以根据
    **GNU 通用公共许可证**（版本 2 或更高版本）或 **Affero 通用公共许可证**（版本 3）的条款进行许可。JUCE 还可用于闭源、商业项目，并使用单独的商业许可证付费。有关
    JUCE 许可的更多信息，请参阅 [http://www.juce.com/documentation/commercial-licensing](http://www.juce.com/documentation/commercial-licensing)。
- en: Unless there are very specific reasons for using a particular version of JUCE,
    it is recommended to use the current development version available from the project's
    GIT repository. This version is almost always kept stable and often includes useful
    new features and bug fixes. The source code is available for download, using any
    GIT client software, at [git://github.com/julianstorer/JUCE.git](http://git://github.com/julianstorer/JUCE.git)
    or [git://git.code.sf.net/p/juce/code](http://git://git.code.sf.net/p/juce/code).
    Alternatively, the code for the current development version may be downloaded
    as a ZIP file from [https://github.com/julianstorer/JUCE/archive/master.zip](https://github.com/julianstorer/JUCE/archive/master.zip).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 除非有非常具体的原因需要使用 JUCE 的特定版本，否则建议使用项目 GIT 仓库中可用的当前开发版本。这个版本几乎总是保持稳定，并且经常包括有用的新功能和错误修复。源代码可以通过任何
    GIT 客户端软件下载，网址为 [git://github.com/julianstorer/JUCE.git](http://git://github.com/julianstorer/JUCE.git)
    或 [git://git.code.sf.net/p/juce/code](http://git://git.code.sf.net/p/juce/code)。或者，当前开发版本的代码可以从
    [https://github.com/julianstorer/JUCE/archive/master.zip](https://github.com/julianstorer/JUCE/archive/master.zip)
    下载为 ZIP 文件。
- en: 'You should keep the JUCE source code in its top-level `juce` directory, but
    you should move this directory to a sensible location on your system that suits
    your workflow. The `juce` directory has the following structure (directories are
    shown using a trailing `/`):'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 应该将 JUCE 源代码保留在其顶级 `juce` 目录中，但应将其移动到系统上的一个合理位置，以适应您的工作流程。`juce` 目录具有以下结构（目录使用尾随
    `/` 表示）：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Although all of these files are important, and the actual code for the JUCE
    library itself is located in the `juce/modules` directory, each module is contained
    within its own subdirectory. For example, the `juce_core` module mentioned previously
    is in the `juce/modules/juce_core` directory. The remainder of this chapter examines
    some important projects available in the `juce/extras` directory. This directory
    contains a range of useful projects, in particular the JUCE Demo and the Introjucer
    projects.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然所有这些文件都很重要，JUCE 库本身的实际代码位于 `juce/modules` 目录中，但每个模块都包含在其自己的子目录中。例如，之前提到的 `juce_core`
    模块位于 `juce/modules/juce_core` 目录中。本章的剩余部分将检查 `juce/extras` 目录中的一些重要项目。这个目录包含了一系列有用的项目，特别是
    JUCE 演示项目和 Introjucer 项目。
- en: Building and running the JUCE Demo application
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建 和 运行 JUCE 演示应用程序
- en: To give an overview of the features provided by JUCE, a demonstration project
    is included in the distribution. This is not only a good place to start, but is
    also a useful resource containing many examples of implementation details of classes
    throughout the library. This JUCE Demo project can be found in `juce/extras/JuceDemo`.
    The structure of this directory is typical of a JUCE project generated by the
    **Introjucer** application (which is covered later in the chapter).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了概述 JUCE 提供的功能，分发中包含了一个演示项目。这不仅是一个良好的起点，而且是一个有用的资源，其中包含了许多关于整个库中类实现细节的示例。这个
    JUCE 演示项目可以在 `juce/extras/JuceDemo` 中找到。这个目录的结构是 **Introjucer** 应用程序（将在本章后面介绍）生成的
    JUCE 项目的典型结构。
- en: '| Project directory contents | Purpose |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| 项目目录内容 | 目的 |'
- en: '| --- | --- |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `Binary Data` | A directory containing any binary files, such as image and
    audio files, which will be embedded as code in the project |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `Binary Data` | 包含任何二进制文件的目录，例如图像和音频文件，这些文件将作为代码嵌入到项目中 |'
- en: '| `Builds` | A directory containing the native platform IDE project files |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| `Builds` | 包含原生平台 IDE 项目文件的目录 |'
- en: '| `Juce Demo.jucer` | The Introjucer project file |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `Juce Demo.jucer` | Introjucer 项目文件 |'
- en: '| `JuceLibraryCode` | The generic JUCE library code, configuration files, and
    the binary files converted to source code for inclusion in the project |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `JuceLibraryCode` | 通用 JUCE 库代码、配置文件以及转换为源代码的二进制文件，以便包含在项目中 |'
- en: '| `Source` | The project-specific source code |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `Source` | 项目特定的源代码 |'
- en: To build and run the JUCE Demo application, open the appropriate IDE project
    file from the `juce/extras/Builds` directory.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建和运行 JUCE 演示应用程序，请从 `juce/extras/Builds` 目录中打开相应的 IDE 项目文件。
- en: Running the JUCE Demo application on Windows
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Windows 上运行 JUCE 演示应用程序
- en: On Windows, open the appropriate Microsoft Visual Studio Solution file. For
    example, using Microsoft Visual Studio 2010, this will be `juce/extras/JuceDemo/Builds/VisualStudio2010/Juce
    Demo.sln` (other project and solution file versions are also available for Microsoft
    Visual Studio 2008 and 2012).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上，打开相应的 Microsoft Visual Studio 解决方案文件。例如，使用 Microsoft Visual Studio
    2010，这将是指向 `juce/extras/JuceDemo/Builds/VisualStudio2010/Juce Demo.sln` 的链接（其他项目和解方案文件版本也适用于
    Microsoft Visual Studio 2008 和 2012）。
- en: 'Now, build and run the project by navigating to the menu item **Debug** | **Start
    Debugging**. You may be asked if you want to build the project first as shown
    in the following screenshot:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过导航到菜单项 **调试** | **开始调试** 来构建和运行项目。你可能会被询问是否要首先构建项目，如下面的截图所示：
- en: '![Running the JUCE Demo application on Windows](img/3316_01_01.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![在 Windows 上运行 JUCE 示例应用程序](img/3316_01_01.jpg)'
- en: Click on **Yes**, and when this succeeds, the JUCE Demo application should appear.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **是**，如果成功，JUCE 示例应用程序应该会出现。
- en: Running the JUCE Demo application on Mac OS X
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Mac OS X 上运行 JUCE 示例应用程序
- en: 'On Mac OS X, open the Xcode project in: `juce/extras/JuceDemo/Builds/MacOSX/Juce
    Demo.xcodeproj`. To build and run the JUCE Demo application, navigate to the menu
    item **Product** | **Run**. When this succeeds, the JUCE Demo application should
    appear.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Mac OS X 上，打开 Xcode 项目文件：`juce/extras/JuceDemo/Builds/MacOSX/Juce Demo.xcodeproj`。要构建和运行
    JUCE 示例应用程序，导航到菜单项 **产品** | **运行**。如果成功，JUCE 示例应用程序应该会出现。
- en: The JUCE Demo application overview
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JUCE 示例应用程序概述
- en: The JUCE Demo application is divided into a series of demonstration pages, each
    illustrating a useful facet of the JUCE library. The following screenshot shows
    the *Widgets* demo (as it looks on Mac OS X). This is available by navigating
    to the menu item **Demo** | **Widgets**.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: JUCE 示例应用程序分为一系列演示页面，每个页面都展示了 JUCE 库的一个有用方面。以下截图显示了 *Widgets* 演示（它在 Mac OS X
    上的外观）。这可以通过导航到菜单项 **演示** | **Widgets** 来访问。
- en: '![The JUCE Demo application overview](img/3316_01_02.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![JUCE 示例应用程序概述](img/3316_01_02.jpg)'
- en: The Widgets demonstration shows many of the commonly needed **Graphical User
    Interface** (**GUI**) controls provided by JUCE for application development. In
    JUCE, these graphical elements are called **components** and this is the focus
    of [Chapter 2](ch02.html "Chapter 2. Building User Interfaces"), *Building User
    Interfaces*. There are a range of sliders, dials, buttons, text display, radio
    buttons, and other components, which are all customizable. There are other demonstrations
    available by default in the **Demo** menu, covering features such as **Graphics
    Rendering**, **Fonts and Text**, **Multithreading**, **Treeviews**, **Table Components**,
    **Audio**, **Drag-and-drop**, **Interprocess comms**, **Web Browser**, and **Code
    Editor**. There are additional demonstrations available on some platforms and
    when certain hardware and software is available. These are the **QuickTime**,
    **DirectShow**, **OpenGL**, and **Camera Capture** demonstrations.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Widgets 演示展示了 JUCE 为应用程序开发提供的许多常用 **图形用户界面**（**GUI**）控件。在 JUCE 中，这些图形元素被称为 **组件**，这是
    [第 2 章](ch02.html "第 2 章。构建用户界面") *构建用户界面* 的重点。有一系列滑块、旋钮、按钮、文本显示、单选按钮和其他组件，这些都是可定制的。**演示**菜单中默认提供其他演示，涵盖功能如
    **图形渲染**、**字体和文本**、**多线程**、**树视图**、**表格组件**、**音频**、**拖放**、**进程间通信**、**网络浏览器**
    和 **代码编辑器**。在某些平台和某些硬件和软件可用时，还有其他演示可用。这些是 **QuickTime**、**DirectShow**、**OpenGL**
    和 **摄像头捕获** 演示。
- en: Customizing the look and feel
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义外观和感觉
- en: By default, the JUCE Demo application uses JUCE's own window title bars, its
    own menu bar appearance, and its default **look and feel**. The title bars can
    be configured to use the native operating system appearance. The following screenshot
    shows the title bar of the JUCE Demo application as it appears on the Windows
    platform. Notice that even though the appearance of the buttons is the same as
    on Mac OS X, their positions should be more familiar to users on Windows.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，JUCE 示例应用程序使用 JUCE 自带的窗口标题栏、自己的菜单栏外观以及默认的 **外观和感觉**。标题栏可以配置为使用原生操作系统外观。以下截图显示了
    JUCE 示例应用程序在 Windows 平台上的标题栏。请注意，尽管按钮的外观与 Mac OS X 上相同，但它们的位置应该对 Windows 用户来说更为熟悉。
- en: '![Customizing the look and feel](img/3316_01_03.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![自定义外观和感觉](img/3316_01_03.jpg)'
- en: 'By navigating to the menu item **Look-and-feel** | **Use native window title
    bar**, the title bar can use the standard appearance available on the operating
    system. The following screenshot shows the appearance of the native title bar
    on Mac OS X:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 通过导航到菜单项 **外观和感觉** | **使用原生窗口标题栏**，标题栏可以使用操作系统上可用的标准外观。以下截图显示了 Mac OS X 上原生标题栏的外观：
- en: '![Customizing the look and feel](img/3316_01_04.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![自定义外观和感觉](img/3316_01_04.jpg)'
- en: The default menu bar appearance, whereby the menu items appear within the application
    window below the title bar, should be familiar to Windows users. Of course, this
    is not the default location for application menus on the Mac OS X platform. Again,
    this can be specified as an option demonstrated in the JUCE Demo application by
    navigating to the menu item **Look-and-feel** | **Use the native OSX menu bar**.
    This moves the menu bar to the top of the screen, which will be more familiar
    to Mac OS X users. All of these options are customizable within JUCE-based code.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 默认菜单栏外观，其中菜单项出现在标题栏下方的应用程序窗口内，应该对 Windows 用户来说很熟悉。当然，这并不是 Mac OS X 平台上应用程序菜单的默认位置。同样，这可以通过在
    JUCE 示例应用程序中导航到菜单项 **外观和感觉** | **使用原生 OSX 菜单栏** 来指定。这将菜单栏移动到屏幕顶部，这将更符合 Mac OS
    X 用户的习惯。所有这些选项都可以在基于 JUCE 的代码中进行自定义。
- en: 'JUCE also provides a mechanism to customize the look and feel of many of the
    built-in components using its `LookAndFeel` class. This look and feel can apply
    to only some of the components of a particular type or globally across the application.
    JUCE itself, and the JUCE Demo application, come with two look and feel options:
    the *default* look and feel and the *old, original* (that is, "old school") look
    and feel. In the JUCE Demo application, this can be accessed via the **Look-and-feel**
    menu.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: JUCE 还提供了一个机制，可以通过其 `LookAndFeel` 类来定制许多内置组件的外观和感觉。这种外观和感觉可以应用于特定类型的某些组件或全局应用于整个应用程序。JUCE
    本身以及 JUCE 示例应用程序提供了两种外观和感觉选项：*默认*外观和感觉以及*旧版，原始的*（即“老式”）外观和感觉。在 JUCE 示例应用程序中，可以通过
    **外观和感觉** 菜单访问这些选项。
- en: You should explore the JUCE Demo application before moving onto the next section,
    where you will build the Introjucer application that eases the management of multi-platform
    projects.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在进入下一节之前，你应该探索 JUCE 示例应用程序，下一节将介绍如何构建简化多平台项目管理的 Introjucer 应用程序。
- en: Building and running the Introjucer application
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建 和 运行 Introjucer 应用程序
- en: 'The Introjucer application is a JUCE-based application for creating and managing
    multi-platform JUCE projects. The Introjucer application is able to generate the
    Xcode projects for Mac OS X and iOS, the Microsoft Visual Studio projects (and
    solutions) for Windows projects, and the project files for all the other supported
    platforms (and other IDEs, such as the cross-platform IDE CodeBlocks). The Introjucer
    application performs a number of tasks that make managing such projects much easier,
    such as:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Introjucer 应用程序是一个基于 JUCE 的应用程序，用于创建和管理多平台 JUCE 项目。Introjucer 应用程序能够生成适用于 Mac
    OS X 和 iOS 的 Xcode 项目，适用于 Windows 项目的 Microsoft Visual Studio 项目（和解决方案），以及所有其他支持平台的项目文件（以及其他
    IDE，如跨平台 IDE CodeBlocks）。Introjucer 应用程序执行多项任务，使得管理此类项目变得更加容易，例如：
- en: Populating all the native IDE project files with the source code files for your
    project
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将项目的源代码文件填充到所有原生 IDE 项目文件中
- en: Configuring the IDE project settings to link to the necessary libraries on the
    target platform
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 IDE 项目设置以链接到目标平台上的必要库
- en: Adding any preprocessor macros to some or all of the target IDE projects
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将任何预处理器宏添加到某些或所有目标 IDE 项目中
- en: Adding the library and header search paths to the IDE projects
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将库和头文件搜索路径添加到 IDE 项目中
- en: Naming the product and adding any icon files
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为产品命名并添加任何图标文件
- en: Customizing the debug and release configurations (for example, code optimization
    settings)
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义调试和发布配置（例如，代码优化设置）
- en: These are all helpful when setting up a project for the first time, but even
    more valuable when changes need to be made later in a project. Even changing the
    name of the product is relatively tedious if this needs to be done in several,
    separate projects. With the Introjucer application, most project settings can
    be set within the Introjucer project file itself. When saved, this will then modify
    the native IDE projects with any new settings. You should be aware that this would
    also override any changes made to the native IDE projects. Therefore, it is wise
    to make all the required changes within the Introjucer application.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是在首次设置项目时非常有用的功能，但在项目后期需要做出更改时，它们的价值更大。如果需要在几个不同的项目中更改产品名称，这相对比较繁琐。使用 Introjucer
    应用程序，大多数项目设置都可以在 Introjucer 项目文件中设置。保存后，这将修改任何新设置的本地 IDE 项目。您应该知道，这也会覆盖对本地 IDE
    项目所做的任何更改。因此，在 Introjucer 应用程序中做出所有必要的更改是明智的。
- en: In addition to this, the Introjucer application includes a GUI editor for arranging
    any GUI components. This reduces the amount of coding required for certain types
    of GUI development. This part of the Introjucer application generates the C++
    code required to reconstruct the GUI when your application runs.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Introjucer 应用程序还包括一个 GUI 编辑器，用于排列任何 GUI 组件。这减少了某些类型 GUI 开发所需的编码量。Introjucer
    应用程序的这部分在您的应用程序运行时生成重建 GUI 所需的 C++ 代码。
- en: The Introjucer application is provided as source code; you will need to build
    it before it can be used. The source code is located in `juce/extras/Introjucer`.
    In a similar way to building the JUCE Demo application, there are various IDE
    projects available in `juce/extras/Introjucer/Builds` (understandably there are
    no Introjucer builds for iOS or Android). It is preferable to build the Introjucer
    application in its release configuration to take advantage of any code optimizations.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Introjucer 应用程序以源代码形式提供；在使用之前，您需要构建它。源代码位于 `juce/extras/Introjucer`。与构建 JUCE
    Demo 应用程序类似，`juce/extras/Introjucer/Builds` 中提供了各种 IDE 项目（当然，iOS 或 Android 没有Introjucer
    构建版本）。建议使用发布配置构建 Introjucer 应用程序，以利用任何代码优化。
- en: Building the Introjucer application on Windows
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Windows 上构建 Introjucer 应用程序
- en: 'Open the appropriate solution file in `juce/extras/Introjucer/Builds` into
    Microsoft Visual Studio. Change the solution configuration to from **Debug** to
    **Release** as shown in the following screenshot:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Microsoft Visual Studio 中打开 `juce/extras/Introjucer/Builds` 中的相应解决方案文件。将解决方案配置从
    **调试** 更改为 **发布**，如图所示：
- en: '![Building the Introjucer application on Windows](img/3316_01_05.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![在 Windows 上构建 Introjucer 应用程序](img/3316_01_05.jpg)'
- en: Now you should build the Introjucer project by navigating to the menu item **Build**
    | **Build Solution**. After this succeeds, the Introjucer application will be
    available at `juce/extras/Introjucer/Builds/VisualStudio2010/Release/Introjucer.exe`
    (or similar, if you are using a different version of Microsoft Visual Studio).
    At this point you should add a shortcut to your `Desktop` or **Start Menu**, or
    whatever suits your typical workflow.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您应该通过导航到菜单项 **构建** | **构建解决方案** 来构建 Introjucer 项目。成功完成后，Introjucer 应用程序将在
    `juce/extras/Introjucer/Builds/VisualStudio2010/Release/Introjucer.exe`（或类似，如果您使用的是
    Microsoft Visual Studio 的不同版本）中可用。此时，您应该在 `Desktop` 或 **开始菜单** 中添加快捷方式，或者使用适合您典型工作流程的方式。
- en: Building the Introjucer application on Mac OS X
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Mac OS X 上构建 Introjucer 应用程序
- en: Open the Xcode project located at `juce/extras/Introjucer/Builds/MacOSX/The
    Introjucer.xcodeproj`. To build the Introjucer application in the release configuration,
    navigate to the menu item **Product** | **Build For** | **Archiving**. After this
    succeeds, the Introjucer application will be available at `juce/extras/Introjucer/Builds/MacOSX/build/Release/Introjucer.app`.
    At this point, you should add an alias to your `~/Desktop`, or whatever suits
    your typical workflow.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 打开位于 `juce/extras/Introjucer/Builds/MacOSX/The Introjucer.xcodeproj` 的 Xcode
    项目。要在发布配置中构建 Introjucer 应用程序，导航到菜单项 **产品** | **构建** | **存档**。成功完成后，Introjucer
    应用程序将在 `juce/extras/Introjucer/Builds/MacOSX/build/Release/Introjucer.app` 中可用。此时，您应该在
    `~/Desktop` 中添加别名，或者使用适合您典型工作流程的方式。
- en: Examining the JUCE Demo Introjucer project
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查 JUCE Demo Introjucer 项目
- en: To illustrate the structure and functionality of an Introjucer project, let's
    examine the Introjucer project for the JUCE Demo application. Open the Introjucer
    application you have just built on your system. In the Introjucer application,
    navigate to the menu item **File** | **Open…** and navigate to open the JUCE Demo
    Introjucer project file (that is, `juce/extras/JuceDemo/Juce Demo.jucer)`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明 Introjucer 项目的结构和功能，让我们检查 JUCE Demo 应用程序的 Introjucer 项目。打开您在系统上刚刚构建的 Introjucer
    应用程序。在 Introjucer 应用程序中，导航到菜单项 **文件** | **打开…** 并导航到打开 JUCE Demo Introjucer 项目文件（即
    `juce/extras/JuceDemo/Juce Demo.jucer`)。
- en: An Introjucer project uses a typical **master-detail** interface, as shown in
    the following screenshot. On the left, or the master section, there are either
    the **Files** or **Config** panels, which are selectable using either the on-screen
    tabs or via the **View** menu. On the right, or the detail section, there are
    the settings associated with the selected, specific item in the master section.
    With the project name selected in the **Config** panel in the master section,
    the global settings for the whole JUCE Demo project are shown in the detail section.
    The **Config** panel shows the hierarchy of the project's available target builds
    for the different native IDEs.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Introjucer 项目使用典型的 **主从** 界面，如下面的截图所示。在左侧，或主部分，有 **文件** 或 **配置** 面板，可以使用屏幕标签或通过
    **视图** 菜单进行选择。在右侧，或详细部分，有与主部分中选定的特定项目关联的设置。在主部分的 **配置** 面板中选择项目名称时，整个 JUCE Demo
    项目的全局设置将在详细部分中显示。**配置** 面板显示了项目针对不同本地 IDE 的可用目标构建的层次结构。
- en: '![Examining the JUCE Demo Introjucer project](img/3316_01_06.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![检查 JUCE Demo Introjucer 项目](img/3316_01_06.jpg)'
- en: In addition to these sections in the hierarchy of the **Config** panel that
    are concerned with the native IDE targets, there is one item named **Modules**.
    As mentioned previously, the JUCE codebase is divided into loosely coupled modules.
    Each module generally encapsulates a specific range of functionality (for example,
    graphics, data structures, GUI, video). The following screenshot shows the available
    modules and the modules that are enabled or disabled for the JUCE Demo project.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 **配置** 面板中与本地 IDE 目标相关的这些部分之外，还有一个名为 **模块** 的项目。如前所述，JUCE 代码库被划分为松散耦合的模块。每个模块通常封装了一组特定的功能（例如，图形、数据结构、GUI、视频）。下面的截图显示了可用的模块以及为
    JUCE Demo 项目启用的或禁用的模块。
- en: '![Examining the JUCE Demo Introjucer project](img/3316_01_07.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![检查 JUCE Demo Introjucer 项目](img/3316_01_07.jpg)'
- en: Modules may be enabled or disabled for a particular project that is based on
    the functionality required for the final application. For example, a simple text-editing
    app may not need any video or audio functionality, and the modules related to
    that functionality could be disabled.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 可以根据特定项目所需的功能来启用或禁用模块。例如，一个简单的文本编辑应用程序可能不需要任何视频或音频功能，与该功能相关的模块可以被禁用。
- en: Each module also has its own settings and options. In many cases, these are
    where there might be the option to use native libraries for certain functionality
    (where performance on each platform may be a high priority) or whether the cross-platform
    JUCE code should be used for that functionality instead (where consistency across
    multiple platforms is a higher priority). Each module may have a dependency on
    one or more other modules, in which case it will be highlighted if it has missing
    dependencies (and selecting the module will explain which modules need to be enabled
    to resolve this). To illustrate this, try turning off the checkbox for the `juce_core`
    module. All the other modules depend on this `juce_core` module, which, as its
    name suggests, provides the core functionality of the JUCE library.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 每个模块都有自己的设置和选项。在许多情况下，这些设置可能包括使用本地库以实现某些功能（在这些平台上性能可能是一个高优先级）或是否应该使用跨平台的 JUCE
    代码来实现该功能（在这些平台上跨平台的致性是一个更高的优先级）。每个模块可能依赖于一个或多个其他模块，在这种情况下，如果它有缺失的依赖项，它将被突出显示（并且选择该模块将解释需要启用哪些模块来解决这个问题）。为了说明这一点，尝试关闭
    `juce_core` 模块的复选框。所有其他模块都依赖于这个 `juce_core` 模块，正如其名称所暗示的，它提供了 JUCE 库的核心功能。
- en: Each module has a copying mode (or **Create local copy**) option. With this
    turned *on* (or set to **Copy the module into the project folder**), the Introjucer
    application will copy the source code from the JUCE source tree into the project's
    local project hierarchy. With this option turned *off*, the native IDE will be
    instructed to refer to the JUCE source files directly in the JUCE source tree.
    Your preference here is a matter of taste and your individual circumstances.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 每个模块都有一个复制模式（或**创建本地副本**）选项。当此选项开启（或设置为**将模块复制到项目文件夹中**）时，Introjucer应用程序将源代码从JUCE源树复制到项目的本地项目层次结构中。当此选项关闭时，原生IDE将被指示直接在JUCE源树中引用JUCE源文件。您在这里的偏好是个人口味和具体情况的问题。
- en: 'The left-hand **Files** panel shows the hierarchy of all the source code that
    will be available in the native IDEs, and the binary files (for example, images,
    audio, XML, ZIP) that will be transformed into cross-platform source code (and
    included in the native IDE projects by the Introjucer application). The top-level
    file structure for the JUCE Demo project is shown in the following screenshot:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧的**文件**面板显示了所有将在原生IDE中可用的源代码的层次结构，以及将转换为跨平台源代码（并由Introjucer应用程序包含在原生IDE项目中的）的二进制文件（例如，图像、音频、XML、ZIP）。JUCE演示项目的顶级文件结构如下截图所示：
- en: '![Examining the JUCE Demo Introjucer project](img/3316_01_08.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![检查JUCE演示Introjucer项目](img/3316_01_08.jpg)'
- en: Selecting a file in the **Files** panel enables you to edit the file directly
    in the Introjucer application. It is currently more convenient to undertake the
    majority of the code editing in a native IDE that has features such as code completion,
    error checking, and so on.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在**文件**面板中选择文件可以使您直接在Introjucer应用程序中编辑文件。目前，在具有代码补全、错误检查等功能的原生IDE中进行大多数代码编辑更为方便。
- en: Now that we are familiar with the Introjucer application, let's use it to create
    a project from scratch.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经熟悉了Introjucer应用程序，让我们用它从头开始创建一个项目。
- en: Creating a JUCE project with the Introjucer application
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Introjucer应用程序创建JUCE项目
- en: 'This section will guide you through creating a new Introjucer project, creating
    a native IDE project from this, and running your first JUCE application. First,
    close any open Introjucer projects by navigating to the menu item **File** | **Close
    Project**. Next, choose the menu item **File** | **New Project…**, and the Introjucer
    application will present its new project window. Using the **Project Folder**
    section of the window, navigate to where you would like to save the project (bearing
    in mind the project actually comprises a folder containing a hierarchy of code
    and possibly binary files). As shown in the following screenshot, name the project
    `TestProject001` in the **Project Name** field, and select the **Create a Main.cpp**
    file and a basic window option from the **Files to Auto-generate** menu:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将指导您创建一个新的Introjucer项目，从该项目创建原生IDE项目，并运行您的第一个JUCE应用程序。首先，通过导航到菜单项**文件**|**关闭项目**来关闭任何打开的Introjucer项目。接下来，选择菜单项**文件**|**新建项目…**，Introjucer应用程序将呈现其新项目窗口。使用窗口的**项目文件夹**部分，导航到您想要保存项目的地方（请记住，项目实际上是一个包含代码层次结构和可能包含二进制文件（例如，图像、音频、XML、ZIP）的文件夹）。如图所示，在**项目名称**字段中命名项目为`TestProject001`，并从**要自动生成的文件**菜单中选择**创建Main.cpp文件**和**基本窗口选项**：
- en: '![Creating a JUCE project with the Introjucer application](img/3316_01_09.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![使用Introjucer应用程序创建JUCE项目](img/3316_01_09.jpg)'
- en: 'Finally, click on the **Create…** button and a familiar Introjucer project
    should be presented, similar to that shown in the following screenshot:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，单击**创建…**按钮，应会呈现一个熟悉的Introjucer项目，类似于以下截图所示：
- en: '![Creating a JUCE project with the Introjucer application](img/3316_01_10.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![使用Introjucer应用程序创建JUCE项目](img/3316_01_10.jpg)'
- en: 'Initially, the Introjucer application creates only one target IDE platform
    for the user''s current platform. Right-click (on Mac OS X, press *control* and
    click) on the project name in the **Config** panel. This presents a range of options
    for adding the target platforms to the project, as shown in the following screenshot:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 初始时，Introjucer应用程序只为用户的当前平台创建一个目标IDE平台。在**配置**面板中右键单击（在Mac OS X上，按*control*键并单击）项目名称。这会显示一系列选项，用于将目标平台添加到项目中，如下面的截图所示：
- en: '![Creating a JUCE project with the Introjucer application](img/3316_01_11.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![使用Introjucer应用程序创建JUCE项目](img/3316_01_11.jpg)'
- en: 'Select the **Files** panel and notice that the Introjucer application created
    three files for this basic project:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 选择**文件**面板并注意，Introjucer应用程序为这个基本项目创建了三个文件：
- en: '`Main.cpp`: This manages the lifetime of the application and includes the main
    entry point of the application. It also includes the code to present the main
    application window to the user. This window in turn presents a `MainContentComponent`
    object in this window, which is specified in the remaining two files.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Main.cpp`: 这管理应用程序的生命周期并包含应用程序的主入口点。它还包括将主应用程序窗口呈现给用户的代码。此窗口反过来在这个窗口中呈现一个`MainContentComponent`对象，该对象在剩余的两个文件中指定。'
- en: '`MainComponent.cpp`: This includes the code to draw content into this main
    application window. In this case, this is simply a "Hello world!" message, but
    could comprise a complex and hierarchical user interface.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MainComponent.cpp`: 这包括了将内容绘制到主应用程序窗口中的代码。在这种情况下，这只是一个“Hello world!”消息，但可能包含复杂和层次化的用户界面。'
- en: '`MainComponent.h`: The header file for the `MainComponent.cpp` file.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MainComponent.h`: `MainComponent.cpp`文件的头文件。'
- en: It is recommended that you add any new files to the projects using this Introjucer
    project page. As discussed earlier, this ensures that any new files are added
    to all the projects for all the target platforms, rather than you having to manage
    this separately. In this example you will not be adding any files. Editing source
    files in the native IDE is not a problem even though these exact same files are
    used to compile on all the other platforms your project supports (that is, these
    files are not copied separately for each platform). You may need to be aware of
    some differences between compilers, but relying on the JUCE classes where possible
    (where this has already been taken into account) will help in this regard.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 建议您使用此Introjucer项目页面添加任何新文件。如前所述，这确保了任何新文件都会添加到所有目标平台的所有项目中，而不是您必须单独管理。在这个例子中，您不会添加任何文件。即使在所有其他平台（即这些文件不是为每个平台单独复制）上编译时使用的是完全相同的文件，在本地IDE中编辑源文件也不是问题。您可能需要了解一些编译器之间的差异，但尽可能依赖JUCE类（其中已经考虑了这一点）将有助于这方面。
- en: To open the project in your native IDE, first save the project by navigating
    to the menu item **File** | **Save Project**. Then, choose the appropriate option
    from the **File** menu to open the native project in the IDE. On Mac OS X, this
    menu item is **Open in Xcode…**, and on Windows it is **Open in Visual Studio…**.
    There is also a **Menu** option that combines these two operations, and a shortcut
    button for it at the bottom of the **Config** panel.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要在您的本地IDE中打开项目，首先通过导航到菜单项**文件** | **保存项目**来保存项目。然后，从**文件**菜单中选择适当的选项以在IDE中打开本地项目。在Mac
    OS X上，此菜单项为**在Xcode中打开…**，而在Windows上为**在Visual Studio中打开…**。还有一个**菜单**选项结合这两个操作，并在**配置**面板底部有一个相应的快捷按钮。
- en: 'Once the project is loaded into your IDE, you should build and run the project
    as you did with the JUCE Demo project earlier. When this succeeds, you should
    be presented with a window as shown in the following screenshot:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦项目被加载到您的IDE中，您应该像之前使用JUCE演示项目一样构建和运行项目。如果成功，您应该会看到一个如下所示的窗口：
- en: '![Creating a JUCE project with the Introjucer application](img/3316_01_12.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![使用Introjucer应用程序创建JUCE项目](img/3316_01_12.jpg)'
- en: The three source files added to the project by the Introjucer application can
    be seen in your native IDE. The following screenshot shows the project structure
    in Xcode on Mac OS X. This is similar in Microsoft Visual Studio.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Introjucer应用程序添加到项目中的三个源文件可以在您的本地IDE中看到。以下截图显示了Mac OS X上Xcode中的项目结构。在Microsoft
    Visual Studio中类似。
- en: '![Creating a JUCE project with the Introjucer application](img/3316_01_13.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![使用Introjucer应用程序创建JUCE项目](img/3316_01_13.jpg)'
- en: 'Edit the `MainComponent.cpp` file (by single-clicking in Xcode or double-clicking
    in Microsoft Visual Studio). Examine the `MainContentComponent::paint()` function.
    This contains four function calls to draw into the `Component` object''s `Graphics`
    context:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`MainComponent.cpp`文件（在Xcode中单击或Microsoft Visual Studio中双击）。检查`MainContentComponent::paint()`函数。这个函数包含四个调用以绘制到`Component`对象的`Graphics`上下文中：
- en: '`Graphics::fillAll()`: This fills the background with a particular color'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Graphics::fillAll()`: 使用特定颜色填充背景'
- en: '`Graphics::setFont()`: This sets the font to a given font and size'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Graphics::setFont()`: 将字体设置为给定的字体和大小'
- en: '`Graphics::setColour()`: This sets the foreground drawing color to a particular
    color'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Graphics::setColour()`: 将前景绘图颜色设置为特定颜色'
- en: '`Graphics::drawText()`: This draws some text at a specified location'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Graphics::drawText()`: 这将在指定位置绘制一些文本'
- en: Experiment with changing some of these values, and build the application again.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试更改这些值中的某些值，并重新构建应用程序。
- en: Documentation and other examples
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文档和其他示例
- en: 'JUCE is fully documented at the following URL:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: JUCE 在以下 URL 上有完整的文档：
- en: '[http://www.juce.com/juce/api/](http://www.juce.com/juce/api/)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.juce.com/juce/api/](http://www.juce.com/juce/api/)'
- en: All the JUCE classes are documented using the **Doxygen** application ([http://www.doxygen.org](http://www.doxygen.org)),
    which turns specially formatted code comments into readable documentation pages.
    For this reason, you can also read the comments from within the JUCE source code
    header files if you prefer. This is sometimes more convenient, depending on your
    IDE, because you can navigate to the documentation easily from within the code
    text editor. Throughout the remainder of this book, you will be directed to the
    documentation for the key classes being discussed.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 JUCE 类都使用 **Doxygen** 应用程序进行文档化 ([http://www.doxygen.org](http://www.doxygen.org))，它将特殊格式化的代码注释转换为可读的文档页面。因此，如果您愿意，您也可以从
    JUCE 源代码头文件中阅读注释。这有时更方便，取决于您的 IDE，因为您可以从代码文本编辑器中轻松导航到文档。在本书的剩余部分，您将被指导到正在讨论的关键类的文档。
- en: 'JUCE is used by a number of commercial developers for applications and audio
    plugins in particular. Some examples include:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: JUCE 被许多商业开发者用于应用程序和音频插件，特别是。一些例子包括：
- en: The **Tracktion** music production software effectively started the development
    of the JUCE library
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Tracktion** 音乐制作软件有效地启动了 JUCE 库的开发'
- en: '**Cycling 74''s** flagship product **Max** was developed using JUCE from Version
    5 onwards'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Cycling 74** 的旗舰产品 **Max** 从版本 5 开始使用 JUCE 开发'
- en: '**Codex Digital** that makes products used extensively in the production of
    Hollywood movies'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Codex Digital** 生产的产品被广泛用于好莱坞电影的制作'
- en: Other important developers include **Korg**, **M-Audio**, and **TC Group**
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他重要的开发者包括 **Korg**、**M-Audio** 和 **TC Group**
- en: There are many others, some of which keep their use of JUCE a secret for commercial
    reasons.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他软件，其中一些出于商业原因将它们对 JUCE 的使用保密。
- en: Summary
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter has guided you through installing JUCE for your platform, and by
    this point you should have a good grasp of the structure of the source code tree.
    You should be familiar with the capabilities of JUCE through exploring the JUCE
    Demo project. The Introjucer application that you will have installed and used
    provides a basis for creating and managing projects using JUCE and the remaining
    chapters of this book. You will also know where to find the JUCE documentation
    via the JUCE website, or within the source code. In the next chapter, you will
    be exploring the `Component` class in more detail to create a range of user interfaces
    and to perform drawing operations.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 本章已指导您安装适用于您平台的 JUCE，到这一点，您应该已经很好地掌握了源代码树的结构。您应该通过探索 JUCE 示例项目来熟悉 JUCE 的功能。您将安装并使用的
    Introjucer 应用程序为使用 JUCE 创建和管理项目提供了基础。您还将知道如何通过 JUCE 网站，或源代码中找到 JUCE 文档。在下一章中，您将更详细地探索
    `Component` 类，以创建各种用户界面并执行绘图操作。
