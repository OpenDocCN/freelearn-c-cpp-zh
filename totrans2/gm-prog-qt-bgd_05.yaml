- en: Chapter 5. Graphics with Qt
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When it comes to graphics, we have so far been using only ready-made widgets
    for the user interface, which resulted in the crude approach of using buttons
    for a tic-tac-toe game. In this chapter, you will learn about much of what Qt
    has to offer with regard to custom graphics. This will let you not only create
    your own widgets, incorporating content that is entirely customized, but also
    integrate multimedia in your programs. You will also learn about employing your
    OpenGL skills to display fast 3D graphics. If you are not familiar with OpenGL,
    this chapter should give you a kick-start for further research in this topic.
    By the end of the chapter, you will be able to create 2D and 3D graphics for your
    games using classes offered by Qt and integrate them with the rest of the user
    interface.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to graphics, Qt splits this domain into two separate parts. One
    of them is raster graphics (used by widgets, for example). This part focuses on
    using high-level operations (such as drawing lines or filling rectangles) to manipulate
    colors of a grid of points that can be visualized on different devices, such as
    images or the display of your computer device. The other is vector graphics, which
    involves manipulating vertices, triangles, and textures. This is tailored for
    maximum speed of processing and display using hardware acceleration provided by
    modern graphics cards. Qt abstracts graphics by using the concept of a surface
    that it draws on. The surface (represented by the `QSurface` class) can be of
    one of two types—`RasterSurface` or `OpenGLSurface`. The surface can be further
    customized using the `QSurfaceFormat` class, but we will talk about that later
    as it is not important right now.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Raster painting
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we talk about GUI frameworks, raster painting is usually associated with
    drawing on widgets. However, since Qt is something more than a GUI toolkit, the
    scope of raster painting that it offers is much broader.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: In general, Qt's drawing architecture consists of three parts. The most important
    part is the device the drawing takes place on, represented by the `QPaintDevice`
    class. Qt provides a number of paint device subclasses such as `QWidget` or `QImage`
    and `QPrinter` or `QPdfWriter`. You can see that the approach for drawing on a
    widget and printing on a printer will be quite the same. The difference is in
    the second component of the architecture—the paint engine (`QPaintEngine`). The
    engine is responsible for performing the actual paint operations on a particular
    paint device. Different paint engines are used to draw on images and to print
    on printers. This is completely hidden from you as a developer, so you really
    don't need to worry about it.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: 'For you, the most important piece is the third component—`QPainter`—which is
    an adapter for the whole painting framework. It contains a set of high-level operations
    that can be invoked on the paint device. Behind the scenes, the whole work is
    delegated to an appropriate paint engine. While talking about painting, we will
    be focusing solely on the painter object as any painting code can be invoked on
    any of the target devices only by using a painter initialized on a different paint
    device. This effectively makes painting in Qt device agnostic, like in the following
    example:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The same code can be executed on a painter working on any possible `QPaintDevice`
    class, be it a widget, an image, or an OpenGL context (through the use of `QOpenGLPaintDevice`).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Painter attributes
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `QPainter` class has a rich API that can basically be divided into three
    groups of methods. The first group contains setters and getters for attributes
    of the painter. The second group consists of methods, with names starting with
    `draw` and `fill` that perform drawing operations on the device. The last group
    has other methods, mostly ones that allow manipulating the coordinate system of
    the painter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Let's start with the attributes. The three most important ones are the font,
    pen, and brush. The first is an instance of the `QFont` class. It contains a large
    number of methods for controlling such font parameters as font family, style (italic
    or oblique), font weight, and font size (either in points or device-dependent
    pixels). All the parameters are self-explanatory, so we will not discuss them
    here in detail. It is important to note that `QFont` can use any font installed
    on the system. In case more control over fonts is required or a font that is not
    installed in the system needs to be used, one can take advantage of the `QFontDatabase`
    class. It provides information about available fonts (such as whether a particular
    font is scalable or bitmap or what writing systems it supports) and allows adding
    new fonts into the registry by loading their definitions directly from files.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: 'An important class, when it comes to fonts, is the `QFontMetrics` class. It
    allows calculating how much space is needed to paint particular text using a font
    or calculates text eliding. The most common use case is to check how much space
    to allocate for a particular user-visible string, for example:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is especially useful when trying to determine `sizeHint` for a widget.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: 'The pen and brush are two attributes that define how different drawing operations
    are performed. The pen defines the outline, and the brush fills the shapes drawn
    using the painter. The former is represented by the `QPen` class and the latter
    by `QBrush`. Each of them is really a set of parameters. The most simple one is
    the color defined either as a predefined global color enumeration value (such
    as `Qt::red` or `Qt::transparent`) or an instance of the `QColor` class. The effective
    color is made up of four attributes—three color components (red, green, and blue)
    and an optional alpha channel value that determines transparency of the color
    (the larger the value, the more opaque the color). By default, all components
    are expressed as 8-bit values (0 to 255) but can also be expressed as real values
    representing a percentage of the maximum saturation of the component; for example,
    0.6 corresponds to 153 (*0.6*255*). For convenience, one of the `QColor` constructors
    accepts hexadecimal color codes used in HTML (with `#0000FF` being an opaque blue
    color) or even bare color names (for example, `blue`) from a predefined list of
    colors returned by a static function `QColor::colorNames()`. Once a color object
    is defined using RGB components, it can be queried using different color spaces
    (for example, CMYK or HSV). Also, a set of static methods are available that act
    as constructors for colors expressed in different color spaces. For example, to
    construct a clear magenta color, any of the following expressions can be used:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '`QColor("magenta")`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QColor("#FF00FF")`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QColor(255, 0, 255)`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QColor::fromRgbF(1, 0, 1)`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QColor::fromHsv(300, 255, 255)`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QColor::fromCmyk(0, 255, 0, 0)`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Qt::magenta`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Apart from the color, `QBrush` has two additional ways of expressing the fill
    of a shape. You can use `QBrush::setTexture()` to set a pixmap that will be used
    as a stamp or `QBrush::setGradient()` to make the brush use a gradient to do the
    filling. For example, to use a gradient that goes diagonally and starts yellow
    in the top-left corner of the shape, becomes red in the middle of the shape, and
    ends magenta at the bottom-right corner of the shape, the following code can be
    used:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When used with drawing a rectangle, this code will give the following output:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '![Painter attributes](img/8874OS_05_01.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
- en: Qt can handle linear (`QLinearGradient`), radial (`QRadialGradient`), and conical
    (`QConicalGradient`) gradients. It comes with a sample (shown in the following
    screenshot) where you can see different gradients in action. This sample is located
    in `examples/widgets/painting/gradients`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '![Painter attributes](img/8874OS_05_02.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
- en: As for the pen, its main attribute is its width (expressed in pixels), which
    determines the thickness of the shape outline. A special width setting is `0`,
    which constitutes a so-called cosmetic pen that is always drawn as a 1 pixel-wide
    line no matter what transformations are applied to the painter (we'll cover this
    later). A pen can of course have a color set but, in addition to that, you can
    use any brush as a pen. The result of such an operation is that you can draw thick
    outlines of shapes using gradients or textures.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three more important properties for a pen. The first of them is the
    pen style, set using `QPen::setStyle()`. It determines whether lines drawn by
    the pen are continuous or somehow divided (dashes, dots, and so on). You can see
    available line styles together with their corresponding constants in the following
    diagram:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '![Painter attributes](img/8874OS_05_03.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
- en: 'The second attribute is the cap style, which can be flat, square, or round.
    The third attribute—the join style—is important for polyline outlines and dictates
    how different segments of the polyline are connected. You can make the joins sharp
    (with `Qt::MiterJoin`), round (`Qt::RoundJoin`), or a hybrid of the two (`Qt::BevelJoin`).
    You can see the different pen attribute configurations (including different join
    and cap styles) in action by launching the pathstroke example shown in the following
    screenshot:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '![Painter attributes](img/8874OS_05_04.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
- en: The next important aspect of the painter is its coordinate system. The painter
    in fact has two coordinate systems. One is its own logical coordinate system that
    operates on real numbers, and the other is the physical coordinate system of the
    device the painter operates on. Each operation on the logical coordinate system
    is mapped to physical coordinates in the device and applied there. Let's start
    with explaining the logical coordinate system first, and then we'll see how this
    relates to physical coordinates.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: The painter represents an infinite Cartesian canvas with the horizontal axis
    pointing right and the vertical axis pointing down by default. The system can
    be modified by applying affine transformations to it—translating, rotating, scaling,
    and shearing. This way, you can draw an analog clock face that marks each hour
    with a line by executing a loop that rotates the coordinate system by 30 degrees
    for each hour and draws a line that is vertical in the newly obtained coordinate
    system. Another example is when you wish to draw a simple plot with *x* axis going
    right and *y* axis going up. To obtain the proper coordinate system, you would
    scale the coordinate system by `-1` in the vertical direction, effectively reversing
    the direction of the vertical axis.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: What we described here modifies the world transformation matrix for the painter
    represented by an instance of the `QTransform` class. You can always query the
    current state of the matrix by calling `transform()` on the painter and you can
    set a new matrix by calling `setTransform()`. `QTransform` has methods such as
    `scale()`, `rotate()`, and `translate()` that modify the matrix, but `QPainter`
    has equivalent methods for manipulating the world matrix directly. In most cases,
    using these would be preferable.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Each painting operation is expressed in logical coordinates, goes through the
    world transformation matrix, and reaches the second stage of coordinate manipulation,
    which is the view matrix. The painter has the concept of `viewport()` and `window()`
    rectangles. The `viewport` rectangle represents the physical coordinates of an
    arbitrary rectangle while the `window` rectangle expresses the same rectangle
    but in logical coordinates. Mapping one to another gives a transformation that
    needs to be applied to each drawn primitive to calculate the area of the physical
    device that is to be painted. By default, the two rectangles are identical to
    the rectangle of the underlying device (thus no `window`-`viewport` mapping is
    done). Such transformation is useful if you wish to perform painting operations
    using measurement units other than the pixels of the target device. For example,
    if you want to express coordinates using percentages of the width and height of
    the target device, you would set the window width and height both to `100`. Then,
    to draw a line starting at 20% of the width and 10% of the height and ending at
    70% of the width and 30% of the height, you would tell the painter to draw the
    line between (`20`, `10`) and (`70`, `30`). If you wanted those percentages to
    apply not to the whole area of an image but rather to its left half, you set the
    viewport rectangle only to the left half of the image.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Setting the `window` and `viewport` rectangles only defines coordinate mapping;
    it does not prevent drawing operations from painting outside the `viewport` rectangle.
    If you want such behavior, you have to set a `clipping` rectangle on the painter.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Once you have the painter properly set, you can start issuing painting operations.
    `QPainter` has a rich set of operations for drawing different kinds of primitives.
    All of these operations have the prefix `draw` in their names, followed by the
    name of the primitive that is to be drawn. Thus, such operations as `drawLine`,
    `drawRoundedRect`, and `drawText` are available with a number of overloads that
    usually allow us to express coordinates using different data types. These may
    be pure values (either integer or real), Qt's classes, such as `QPoint` and `QRect`,
    or their floating point equivalents—`QPointF` and `QRectF`. Each operation is
    performed using current painter settings (font, pen, and brush).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To see the list of all drawing operations available, switch to the **Help**
    pane in Qt Creator. From the drop-down list on top of the window, choose **Index**
    and then type in `qpainter`. After confirming the search, you should see the reference
    manual for the `QPainter` class with all the drawing operations listed.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you start drawing, you have to tell the painter what device you wish
    to draw on. This is done using the `begin()` and `end()` methods. The former accepts
    a pointer to a `QPaintDevice` instance and initializes the drawing infrastructure,
    and the latter marks the drawing as complete. Usually, we don''t have to use these
    methods directly as the constructor of `QPainter` calls `begin()` for us and the
    destructor invokes `end()`. Thus, the typical workflow is to instantiate a painter
    object, passing it the device, then do the drawing by calling `set` and `draw`
    methods, and finally let the painter be destroyed by going out of scope, as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We will cover more methods from the `draw` family in the following sections
    of this chapter.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Widget painting
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is time to actually get something onto the screen by painting on a widget.
    A widget is repainted as a result of receiving an event called `QEvent::Paint`,
    which is handled by reimplementing the virtual method `paintEvent()`. This method
    accepts a pointer to the event object of type `QPaintEvent` that contains various
    bits of information about the repaint request. Remember that you can only paint
    on the widget from within that widget's `paintEvent()` call.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – custom-painted widgets
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's immediately use our new skills in practice!
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Start by creating a new **Qt Widgets Application** in Qt Creator, choosing `QWidget`
    as the base class, and making sure the **Generate Form** box is unchecked.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: 'Switch to the header file for the newly created class, add a protected section
    to the class and type void `paintEvent` for the section. Then press *Ctrl* + spacebar
    on your keyboard and Creator will suggest the parameters for the method. You should
    end up with the following code:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Creator will leave the cursor positioned right before the semicolon. Pressing
    *Alt* + *Enter* will open the refactoring menu, letting you add the definition
    in the implementation file. The standard code for a paint event is one that instantiates
    a painter on the widget, as shown:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If you run this code, the widget will remain blank. Now we can start adding
    the actual painting code there:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Build and run the code, and you''ll obtain the following output:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – custom-painted widgets](img/8874OS_05_06.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
- en: '*What just happened?*'
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First we set a 2 pixel-wide black pen for the painter. Then we called `rect()`
    to retrieve the geometry rectangle of the widget. By calling `adjusted()`, we
    received a new rectangle with its coordinates (in left, top, right, and bottom
    order) modified by the given arguments, effectively giving us a rectangle with
    a 10 pixel margin on each side.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Qt usually offers two methods that allow us to work with modified data. Calling
    `adjusted()` returns a new object with its attributes modified, while if we had
    called `adjust()`, the modification would have been done in place. Pay special
    attention to which method you use to avoid unexpected results. It's best to always
    check the return value for a method—whether it returns a copy or void.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally we call `drawRoundedRect()`, which paints a rectangle with its corners
    rounded by the number of pixels (in *x*, *y* order) given as the second and third
    argument. If you look closely, you will notice that the rectangle has nasty jagged
    rounded parts. This is caused by the effect of aliasing, where a logical line
    is approximated using the limited resolution of the screen; due to this, a pixel
    is either fully drawn or not drawn at all. Qt offers a mechanism called antialiasing
    to counter this effect by using intermediate pixel colors where appropriate. You
    can enable this mechanism by setting a proper render hint on the painter before
    you draw the rounded rectangle, as shown:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now you''ll get the following output:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/8874OS_05_07.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
- en: Of course, this has a negative impact on performance, so use antialiasing only
    where the aliasing effect is noticeable.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – transforming the viewport
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s extend our code so that all future operations focus only on drawing
    within the border boundaries after the border is drawn. Use the `window` and `viewport`
    transformation as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Also create a protected method called `drawChart()`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let''s take a look at our output:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – transforming the viewport](img/8874OS_05_08.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
- en: '*What just happened?*'
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first thing we did in the newly added code is call `painter.save()`. This
    call stores all parameters of the painter in an internal stack. We can then modify
    the painter state (by changing its attributes, applying transformations, and so
    on) and then, if at any point we want to go back to the saved state, it is enough
    to call `painter.restore()` to undo all the modifications in one go.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `save()` and `restore()` methods can be called as many times as needed.
    Just remember to always pair a call to `save()` with a similar call to `restore()`,
    or the internal painter state will get corrupted. Each call to `restore()` will
    revert the painter to the last saved state.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: After the state is saved, we modify the rectangle again by adjusting for the
    width of the border. Then, we set the new rectangle as the viewport, informing
    the painter about the physical range of coordinates to operate on. Then we move
    the rectangle by half its height and set that as the painter window. This effectively
    puts the origin of the painter at half the height of the widget. Then, the `drawChart()`
    method is called whereby a red line is drawn on the *x* axis of the new coordinate
    system.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – drawing an oscillogram
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's further extend our widget to become a simple oscillogram renderer. For
    that we have to make the widget remember a set of values and draw them as a series
    of lines.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by adding a `QList<quint16>` member variable that holds a list
    of unsigned 16-bit integer values. We will also add slots for adding values to
    the list and for clearing the list, as shown:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note that each modification of the list invokes a method called `update()`.
    This schedules a paint event so that our widget can be redrawn with the new values.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: 'Drawing code is also easy; we just iterate over the list and draw symmetric
    blue lines based on the values from the list. Since the lines are vertical, they
    don''t suffer from aliasing and so we can disable this render hint, as shown:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To see the result add a loop to `main` as follows. This fills the widget with
    data:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This loop takes a random number between `0` and `119` and adds it as a point
    to the widget. A sample result from running such code can be seen in the following
    screenshot:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – drawing an oscillogram](img/8874OS_05_09.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
- en: Tip
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you scale down the window, you will notice that the oscillogram extends past
    the boundaries of the rounded rectangle. Remember about clipping? You can use
    it now to constrain drawing by adding a simple `painter.setClipRect(r)` call just
    before you call `drawChart()`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: Input events
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, the custom widget was not interactive at all. Although the widget content
    could be manipulated from within the source code (say by adding new points to
    the plot), the widget was deaf to any user actions (apart from resizing the widget,
    which caused a repaint). In Qt, any interaction between the user and the widget
    is done by delivering events to the widget. Such a family of events is generally
    called input events and contains events such as keyboard events and different
    forms of pointing-device events—mouse, tablet, and touch events.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: In a typical mouse event flow, a widget first receives a mouse press event,
    then a number of mouse move events (when the user moves the mouse around while
    the mouse button is kept pressed), and finally, a mouse release event. The widget
    can also receive an additional mouse double-click event in addition to these events.
    It is important to remember that, by default, mouse move events are only delivered
    if a mouse button is pressed when the mouse is moved. To receive mouse move events
    when no button is pressed, a widget needs to activate a feature called **mouse
    tracking**.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – making oscillograms selectable
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It''s time to make our oscillogram widget interactive. We will teach it to
    add a couple of lines of code to it that let the user select part of the plot.
    Let''s start with storage for the selection. We''ll need two integer variables
    that can be accessed via read-only properties; therefore, add the following two
    properties to the class (you can initialize them both to `-1`) and implement their
    getters:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The user can change the selection by dragging the mouse cursor over the plot.
    When the user presses the mouse button over some place in the plot, we''ll mark
    that place as the start of the selection. Dragging the mouse will determine the
    end of the selection. The scheme for naming events is similar to the paint event;
    therefore, we need to declare and implement the following two protected methods:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The structure of both event handlers is similar. We update the needed values,
    taking into consideration the left padding (12 pixels) of the plot, similar to
    what we do while drawing. Then, a signal is emitted and `update()` is called to
    schedule a repaint of the widget.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: 'What remains is to introduce changes to the drawing code. I suggest you add
    a `drawSelection()` method similar to `drawChart()` but that is called from the
    paint event handler immediately before `drawChart()`, as shown:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: First we check if there is any selection to be drawn at all. Then, we save the
    painter state and adjust the pen and brush of the painter. The pen is set to `Qt::NoPen`,
    which means the painter should not draw any outline. To determine the brush, we
    use `palette()`; this returns an object of type `QPalette` holding basic colors
    for a widget. One of the colors held in the object is the color of the highlight
    often used for marking selections. If you use an entry from the palette instead
    of manually specifying a color, you gain an advantage that when the user of the
    class modifies the palette, this modification is taken into account by our widget
    code.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can use other colors from the palette in the widget for other things we
    draw in the widget. You can even define your own `QPalette` object in the constructor
    of the widget to provide default colors for it.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we adjust the rectangle to be drawn and issue the drawing call.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: 'When you run this program, you will notice that the selection color doesn''t
    contrast very well with the plot itself. To overcome this, a common approach is
    to draw the "selected" content with a different (often inverted) color. This can
    easily be applied in this situation by modifying the `drawChart()` code slightly:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now you see the following output:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – making oscillograms selectable](img/8874OS_05_10.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
- en: Have a go hero – reacting only to the left mouse button
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As an exercise, you can modify the event handling code so that it only changes
    the selection if the mouse event was triggered by the left mouse button. To see
    which button triggered the mouse press event, you can use the `QMouseEvent::button()`
    method, which returns `Qt::LeftButton` for the left button, `Qt::RightButton`
    for the right, and so on.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Handling touch events is different. For any such event, you receive a call to
    the `touchEvent()` virtual method. The parameter of such a call is an object that
    can retrieve a list of points currently touched by the user with additional information
    regarding the history of user interaction (whether the touch was just initiated
    or the point was pressed earlier and moved) and what force is applied to the point
    by the user. Note that this is a low-level framework that allows you to precisely
    follow the history of touch interaction. If you are more interested in higher-level
    gesture recognition (pan, pinch, and swipe), there is a separate family of events
    available for it.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: Handling gestures is a two-step procedure. First you need to activate gesture
    recognition on your widget by calling `grabGesture()` and passing in the type
    of gesture you want to handle. A good place for such code is the widget constructor.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: 'Then your widget will start receiving gesture events. There are no dedicated
    handlers for gesture events but, fortunately, all events for an object flow through
    its `event()` method, which we can reimplement. Here is some example code that
    handles pan gestures:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: First, a check for the event type is made; if it matches the expected value,
    the event object is cast to `QGestureEvent`. Then, the event is asked if `Qt::PanGesture`
    was recognized. Finally, a `handlePanGesture` method is called. You can implement
    such a method to handle your pan gestures.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: Working with images
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Qt has two classes for handling images. The first one is `QImage`, more tailored
    towards direct pixel manipulation. You can check the size of the image or check
    and modify the color of each pixel. You can convert the image into a different
    internal representation (say from 8-bit color map to full 32-bit color with a
    premultiplied alpha channel). This type, however, is not that fit for rendering.
    For that, we have a different class called `QPixmap`. The difference between the
    two classes is that `QImage` is always kept in the application memory, while `QPixmap`
    can only be a handle to a resource that may reside in the graphics card memory
    or on a remote *X* server. Its main advantage over `QImage` is that it can be
    rendered very quickly at the cost of the inability to access pixel data. You can
    freely convert between the two types but bear in mind that, on some platforms,
    this might be an expensive operation. Always consider which class serves your
    particular situation better. If you intend to crop the image, tint it with some
    color, or paint over it, `QImage` is a better choice. But if you just want to
    render a bunch of icons, it's best to keep them as `QPixmap` instances.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: Loading
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Loading images is very easy. Both `QPixmap` and `QImage` have constructors
    that simply accept a path to a file containing the image. Qt accesses image data
    through plugins that implement reading and writing operations for different image
    formats. Without going into the details of plugins, it is enough to say that the
    default Qt installation supports reading the following image types:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '| Type | Description |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
- en: '| BMP | Windows bitmap |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
- en: '| GIF | Graphics Interchange Format |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
- en: '| ICO | Windows icon |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
- en: '| JPEG | Joint Photography Experts Group |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
- en: '| MNG | Multiple-image Network Graphics |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
- en: '| PNG | Portable Network Graphics |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
- en: '| PPM/PBM/PGM | Portable anymap |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
- en: '| SVG | Scalable Vector Graphics |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
- en: '| TIFF | Tagged Image File Format |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
- en: '| XBM | X Bitmap |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
- en: '| XPM | X Pixmap |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
- en: As you can see, most popular image formats are available. The list can be further
    extended by installing additional plugins.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can ask Qt for a list of supported image types by calling a static method,
    `QImageReader::supportedImageFormats()`, which returns a list of formats that
    can be read by Qt. For a list of writable formats, call `QImageWriter::supportedFileFormats()`.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: An image can also be loaded directly from an existing memory buffer. This can
    be done in two ways. The first one is to use the `loadFromData()` method (it exists
    in both `QPixmap` and `QImage`), which behaves the same as when loading an image
    from a file—you pass it a data buffer and the size of the buffer and based on
    that, the loader determines the image type by inspecting the header data and loads
    the picture into `QImage` or `QPixmap`. The second situation is when you don't
    have images stored in a "filetype" such as JPEG or PNG but rather you have raw
    pixel data itself. In such a situation, `QImage` offers a constructor that takes
    a pointer to a block of data together with the size of the image and format of
    the data. The format is not a file format such as the ones listed earlier but
    rather a memory layout for data representing a single pixel.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: 'The most popular format is `QImage::Format_ARGB32`, which means that each pixel
    is represented by 32-bits (4 bytes) of data divided equally between alpha, red,
    green, and blue channels—8-bits per channel. Another popular format is `QImage::Format_ARGB32_Premultiplied`,
    where values for the red, green, and blue channels are stored after being multiplied
    by the value of the alpha channel, which often results in faster rendering. You
    can change the internal data representation using a call to `convertToFormat()`.
    For example, the following code converts a true-color image to 256 colors, where
    color for each pixel is represented by an index in a color table:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The color table itself is a vector of color definitions that can be fetched
    using `colorTable()` and replaced using `setColorTable()`. The simplest way to
    convert an indexed image to grayscale is to adjust its color table as follows:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Modifying
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are two ways to modify image pixel data. The first one works only for
    `QImage` and involves direct manipulation of pixels using the `setPixel()` call,
    which takes the pixel coordinates and color to be set for that pixel. The second
    one works for both `QImage` and `QPixmap` and makes use of the fact that both
    these classes are subclasses of `QPaintDevice`. Therefore, you can open `QPainter`
    on such objects and use its drawing API. Here is an example of obtaining a pixmap
    with a blue rectangle and red circle painted over it:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: First we create a 256 x 256 pixmap and fill it with transparent color. Then
    we open a painter on it and invoke a series of calls that draws a blue rectangle
    and red circle.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '`QImage` also offers a number of methods for transforming the image, including
    `scaled()`, `mirrored()`, `transformed()`, and `copy()`. Their API is intuitive
    so we won''t discuss them here.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: Painting
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Painting images in its basic form is as simple as calling `drawImage()` or `drawPixmap()`
    from the `QPainter` API. There are different variants of the two methods, but
    basically all of them allow one to specify which portion of a given image or pixmap
    is to be drawn and where. It is worth noting that painting pixmaps is preferred
    to painting images as an image has to first be converted into a pixmap before
    it can be drawn.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: If you have a lot of pixmaps to draw, a class called `QPixmapCache` may come
    in handy. It provides an application-wide cache for pixmaps. By using it, you
    can speed up pixmap loading while introducing a cap on memory usage.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: Painting text
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Drawing text using `QPainter` deserves a separate explanation, not because it
    is complicated but rather because Qt offers much flexibility in this regard. In
    general, painting text takes place by calling `QPainter::drawText()` or `QPainter::drawStaticText()`.
    Let's focus on the former first, which allows the drawing of generic text.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: 'The most basic call to paint some text is a variant of this method, which takes
    *x* and *y* coordinates and the text to draw:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The preceding call draws the given text at position 10 horizontally and places
    the baseline of the text at position 20 vertically. The text is drawn using the
    painter''s current font and pen. The coordinates can alternatively be passed as
    `QPoint` instances instead of being given *x* and *y* values separately. The problem
    with this method is that it allows little control over how the text is drawn.
    A much more flexible variant is one that lets us give a set of flags and expresses
    the position of the text as a rectangle instead of a point. The flags can specify
    alignment of the text within the given rectangle or instruct the rendering engine
    about wrapping and clipping the text. You can see the result of giving a different
    combination of flags to the call in the following image:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '![Painting text](img/8874OS_05_12.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
- en: 'In order to obtain each of the preceding results, run code similar to the following:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: You can see that, unless you set the `Qt::TextDontClip` flag, the text is clipped
    to the given rectangle; setting `Qt::TextWordWrap` enables line wrapping and `Qt::TextSingleLine`
    makes the engine ignore any newline characters encountered.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: Static text
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Qt has to perform a number of calculations when laying out the text, and this
    has to be done each time the text is rendered. This will be a waste of time if
    the text and its attributes have not changed since the last time. To avoid the
    need to recalculate the layout, the concept of static text was introduced.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: 'To use it, instantiate `QStaticText` and initialize it with text you want to
    render along with any options you might want it to have (kept as the `QTextOption`
    instance). Then, store the object somewhere and, whenever you want the text to
    be rendered, just call `QPainter::drawStaticText()`, passing the static text object
    to it. If the layout of the text has not changed since the previous time the text
    was drawn, it will not be recalculated, resulting in improved performance. Here
    is an example of a custom widget that simply draws text using the static text
    approach:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Rich text
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: So far, we have seen how to draw text where all the glyphs were rendered using
    the same attributes (font, color, and style) and laid out as a contiguous flow
    of characters. While useful, this doesn't handle situations where we want to mark
    out portions of the text using a different color or align it differently. To make
    it work, we would have to execute a series of `drawText` calls with modified painter
    attributes and with manually calculated text positions. Fortunately, there are
    better solutions.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: Qt supports complex document formatting using its `QTextDocument` class. With
    this we can manipulate the text in a fashion similar to that of a text processor,
    applying formatting to paragraphs of text or individual characters. Then we can
    lay out and render the resulting document according to our needs.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: 'While useful and powerful, building `QTextDocument` is too complicated if all
    we want is to draw a small amount of text with simple customizations applied.
    The authors of Qt have thought about that as well and have implemented a rich
    text mode for rendering text. After enabling this mode, you can specify the formatted
    text to `drawText` directly using a subset of HTML tags to obtain formatting effects
    such as changing the color of the text, underlining it, or making it superscript.
    Drawing a centered underlined caption followed by a fully justified description
    in a given rectangle is as easy as issuing the following call:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Tip
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Qt's rich text engine does not implement the full HTML specification; it will
    not handle cascading style sheets, hyperlinks, tables, or JavaScript. The *Supported
    HTML Subset* page in the Qt reference manual describes what parts of the HTML
    4 standard are supported. If you require full HTML support, you will have to use
    Qt's web page and web browser classes contained in the `webkitwidgets` (classes
    `QWebPage` and `QWebView`) or `webenginewidgets` (classes `QWebEnginePage` and
    `QWebEngineView`) modules.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: Optimized drawing
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: During game programming, performance is often a bottleneck. Qt tries its best
    to be as efficient as possible, but sometimes the code needs additional tweaking
    to work even faster. Using static text instead of regular text is one such tweak;
    use it whenever possible.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: Another important trick is to avoid re-rendering the whole widget unless really
    required. One thing is that the `QPaintEvent` object passed to `paintEvent()`
    contains information about the region of the widget that needs to be redrawn.
    If the logic of your widget allows it, you can optimize the process by rendering
    only the required part.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – optimizing oscillogram drawing
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As an exercise, we will modify our oscillogram widget so that it only re-renders
    the part of its data that is required. The first step is to modify the paint event
    handling code to fetch information about the region that needs updating and pass
    it to the method drawing the chart. The changed parts of the code have been highlighted
    here:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The next step is to modify `drawSelection()` to only draw the part of the selection
    that intersects with the exposed rectangle. Luckily, `QRect` offers a method to
    calculate the intersection for us:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Finally, `drawChart` needs to be adjusted to omit the values outside the exposed
    rectangle:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '*What just happened?*'
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By implementing these changes, we have effectively reduced the painted area
    to the rectangle received with the event. In this particular situation, we will
    not save much time as drawing the plot is not that time-consuming; in many situations,
    however, you will be able to save a lot of time using this approach. For example,
    if we were to plot a very detailed aerial map of a game world, it would be very
    expensive to replot the whole map if only a small part of it were modified. We
    can easily reduce the number of calculations and drawing calls by taking advantage
    of the information about the exposed area.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: Making use of the exposed rectangle is already a good step towards efficiency,
    but we can go a step further. The current approach requires that we redraw each
    and every line of the plot within the exposed rectangle, which still takes some
    time. Instead, we can paint those lines only once into a pixmap, and then, whenever
    the widget needs repainting, tell Qt to render part of the pixmap to the widget.
    This approach is usually called "double-buffering" (the second buffer being the
    pixmap acting as a cache).
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – implementing a double-buffered oscillogram
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It should be very easy for you now to implement this approach for our example
    widget. The main difference is that each change to the plot contents should not
    result in a call to `update()` but rather in a call that will re-render the pixmap
    and then call `update()`. The `paintEvent` method then becomes simply this:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: You'll also need to re-render the pixmap when the widget is resized. This can
    be done from within the void `resizeEvent(QResizeEvent*)` method.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you are ready to employ your newly gained skills in rendering
    graphics with Qt to create a game that uses widgets with custom graphics. The
    hero of today is going to be chess and other chess-like games.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – developing the game architecture
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new **Qt Widgets Application** project. After the project infrastructure
    is ready, choose **New File or Project** from the **File** menu and choose to
    create a **C++ Class**. Call the new class `ChessBoard` and set `QObject` as its
    base class. Repeat the process to create a `GameAlgorithm` class derived from
    `QObject` and another one called `ChessView` but, this time, choose `QWidget`
    as the base class. You should end up with a file named `main.cpp` and four classes—`MainWindow`,
    `ChessView`, `ChessBoard`, and `ChessAlgorithm`.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: 'Now navigate to the header file for `ChessAlgorithm` and add the following
    methods to the class:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Also, add a private `m_board` field of type `ChessBoard*`. Remember to either
    include `chessboard.h` or forward-declare the `ChessBoard` class. Implement `board()`
    as a simple getter method for `m_board`. The `setBoard()` method is going to be
    a protected setter for `m_board`:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Next, let''s provide a base implementation for `setupBoard()` to create a default
    chess board with eight ranks and eight columns:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The natural place to prepare the board is in a function executed when a new
    game is started:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The last addition to this class for now is to extend the provided constructor
    to initialize `m_board` to a null pointer.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: In the last method shown, we instantiated a `ChessBoard` object so let's focus
    on that class now. First extend the constructor to accept two additional integer
    parameters besides the regular parent argument. Store their values in private
    `m_ranks` and `m_columns` fields (remember to declare the fields themselves in
    the class header file).
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: 'In the header file, just under the `Q_OBJECT` macro, add the following two
    lines as property definitions:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Declare signals and implement getter methods to cooperate with those definitions.
    Also add two protected methods:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: These will be setters for ranks and columns properties, but we don't want to
    expose them to the outside world so we will give them `protected` access scope.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: 'Put the following code into the `setRanks()` method body:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Next, in a similar way, you can implement `setColumns()`.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: 'The last class we will deal with now is our custom widget, `ChessView`. For
    now, we will provide only a rudimentary implementation for one method, but we
    will expand it later as our implementation grows. Add a public `setBoard(ChessBoard
    *)` method with the following body:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Now let''s declare the `m_board` member. Because we are not the owners of the
    board object (the algorithm class is responsible for managing it) we will use
    the `QPointer` class, which tracks the lifetime of `QObject` and sets itself to
    null once the object is destroyed:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '`QPointer` initializes its value to null, so we don''t have to do it ourselves
    in the constructor. For completeness, let''s provide a getter method for the board:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '*What just happened?*'
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the last exercise, we defined the base architecture for our solution. We
    can see that there are three classes involved: `ChessView` acting as the user
    interface, `ChessAlgorithm` for driving the actual game, and `ChessBoard` as a
    data structure shared between the view and the engine. The algorithm is going
    to be responsible for setting up the board (through `setupBoard()`), making moves,
    checking win conditions, and so on. The view will be rendering the current state
    of the board and will signal user interaction to the underlying logic.'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/8874OS_05_17.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
- en: Most of the code is self-explanatory. You can see in the `ChessView::setBoard()`
    method that we are disconnecting all signals from an old board object, attaching
    the new one (we will come back to connecting the signals later when we have already
    defined them), and finally telling the widget to update its size and redraw itself
    with the new board.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – implementing the game board class
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we will focus on our data structure. Add a new private member to `ChessBoard`,
    a vector of characters that will contain information about pieces on the board:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Consider the following table that shows the piece type and the letters used
    for it:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: '| Piece type | White | Black |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
- en: '| ![Time for action – implementing the game board class](img/Image_05_01.JPG)
    | King | K | k |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
- en: '| ![Time for action – implementing the game board class](img/Image_05_02.JPG)
    | Queen | Q | q |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
- en: '| ![Time for action – implementing the game board class](img/Image_05_03.JPG)
    | Rook | R | r |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
- en: '| ![Time for action – implementing the game board class](img/Image_05_04.JPG)
    | Bishop | B | b |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
- en: '| ![Time for action – implementing the game board class](img/Image_05_05.JPG)
    | Knight | N | n |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
- en: '| ![Time for action – implementing the game board class](img/Image_05_06.JPG)
    | Pawn | P | P |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
- en: 'You can see that white pieces use upper-case letters and black pieces use lower-case
    variants of the same letters. In addition to that, we will use a space character
    (0x20 ASCII value) to denote that a field is empty. We will add a protected method
    for setting up an empty board based on the number of ranks and columns on the
    board and a `boardReset()` signal to inform that the position on the board has
    changed:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'We can update our methods for setting rank and column counts to make use of
    that method:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The `initBoard()` method should also be called from within the constructor,
    so place the call there as well.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: Next, we need a method to read which piece is positioned in the particular field
    of the board.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Ranks and columns have indexes starting from 1, but the data structure is indexed
    starting from 0; therefore, we have to subtract 1 from both the rank and column
    index. It is also required to have a method to modify the data for the board.
    Implement the following public method:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The method makes use of another one that does the actual job. However, this
    method should be declared with `protected` access scope. Again we adjust for index
    differences.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Since `setData()` makes use of a signal, we have to declare it as well:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The signal will be emitted every time there is a successful change to the situation
    on the board. We delegate the actual work to the protected method to be able to
    modify the board without emitting the signal.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: 'Having defined `setData()`, we can add another method for our convenience:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Can you guess what it does? That's right! It moves a piece from one field to
    another one leaving an empty space behind.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: 'There is still one more method worth implementing. A regular chess game contains
    32 pieces, and there are variants of the game where starting positions for the
    pieces might be different. Setting the position of each piece through a separate
    call to `setData()` would be very cumbersome. Fortunately, there is a neat chess
    notation called the **Forsyth-Edwards Notation** (**FEN**), with which the complete
    state of the game can be stored as a single line of text. If you want the complete
    definition of the notation, you can look it up yourself. In short, we can say
    that the textual string lists piece placement rank by rank, starting from the
    last rank where each position is described by a single character interpreted as
    in our internal data structure (`K` for white king, `q` for black queen, and so
    on). Each rank description is separated by a `/` character. If there are empty
    fields on the board, they are not stored as spaces but rather as a digit specifying
    the number of consecutive empty fields. Therefore, the starting position for a
    standard game can be written as follows:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'This can be interpreted visually as follows:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – implementing the game board class](img/8874OS_05_18.jpg)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
- en: 'Let''s write a method called `setFen()` to set up the board based on an FEN
    string:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: The method iterates over all fields on the board and determines whether it is
    currently in the middle of inserting empty fields on the board or should rather
    read the next character from the string. If a digit is encountered, it is converted
    into an integer by subtracting the ASCII value of the 0 character (that is, *7-0
    = 7*). After setting each rank, we require that a slash or a space be read from
    the string. Otherwise, we reset the board to an empty one and bail out of the
    method.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We taught the `ChessBoard` class to store simple information about chess pieces
    using a one-dimensional array of characters. We also equipped it with methods
    that allow querying and modifying game data. We implemented a fast way of setting
    the current state of the game by adopting the FEN standard. The game data itself
    is not tied to classic chess. Although we comply with a standard notation for
    describing pieces, it is possible to use other letters and characters outside
    the well-defined set for chess pieces. This creates a versatile solution for storing
    information about chess-like games, such as checkers, and possibly any other custom
    game played on a two-dimensional board of any size with ranks and columns. The
    data structure we came up with is not a stupid one—it communicates with its environment
    by emitting signals when the state of the game is modified.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – understanding the ChessView class
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a chapter about doing graphics, so it is high time to focus on displaying
    our chess game. Our widget currently displays nothing, and our first task is going
    to be to show a chess board with rank and column symbols and fields colored appropriately.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the widget does not have any proper size defined and we will have
    to fix that by implementing `sizeHint()`. However, to be able to calculate the
    size, we have to decide how big a single field on the board is going to be. Therefore,
    in `ChessView`, you should declare a property containing the size of the field,
    as shown:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'To speed up coding, you can position the cursor over the property declaration,
    hit the *Alt* + *Enter* combination, and choose the **Generate missing Q_PROPERTY
    members** fixup from the pop-up menu. Creator will provide minor implementations
    for the getter and setter for you. You can move the generated code to the implementation
    file by positioning the cursor over each method, hitting *Alt* + *Enter,* and
    choosing the **Move definition to chessview.cpp file** fixup. While the generated
    getter method is fine, the setter needs some adjusting. Modify it by adding the
    following highlighted code:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'This tells our widget to recalculate its size whenever the size of the field
    is modified. Now we can implement `sizeHint()`:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: First we check if we have a valid board definition and if not, return a sane
    size of 100 x 100 pixels. Otherwise, the method calculates the size of all the
    fields by multiplying the size of each of the fields by the number of columns
    or ranks. We add one pixel to each dimension to accommodate the right and bottom
    border. A chess board not only consists of not only the fields themselves but
    also displays rank symbols on the left edge of the board and column numbers on
    the bottom edge of the board. Since we use letters to enumerate ranks, we check
    the width of the widest letter in the alphabet using the `QFontMetrics` class.
    We use the same class to check how much space is required to render a line of
    text using the current font so that we have enough space to put column numbers.
    In both cases, we add 4 to the result to make a 2 pixel margin between the text
    and the edge of the board and another 2 pixel margin between the text and the
    edge of the widget.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们检查是否有有效的棋盘定义，如果没有，则返回一个合理的100 x 100像素大小。否则，该方法通过将每个字段的大小乘以列数或等级数来计算所有字段的大小。我们在每个维度上添加一个像素以容纳右侧和底部的边框。棋盘不仅由字段本身组成，还在棋盘的左侧边缘显示等级符号，在棋盘的底部边缘显示列号。由于我们使用字母来枚举等级，我们使用`QFontMetrics`类检查字母表中字母的最宽宽度。我们使用相同的类来检查使用当前字体渲染一行文本所需的空间，以便我们有足够的空间放置列号。在这两种情况下，我们将结果增加4，以便在文本和棋盘边缘之间以及文本和部件边缘之间留出2像素的边距。
- en: 'It is very useful to define a helper method for returning a rectangle that
    contains a particular field, as shown:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个辅助方法来返回包含特定字段的矩形非常有用，如下所示：
- en: '[PRE52]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Since rank numbers decrease from the top towards the bottom of the board, we
    subtract the desired rank from the maximum rank there is while calculating `fRect`.
    Then, we calculate the horizontal offset for rank symbols just like we did in
    `sizeHint()` and translate the rectangle by that offset before returning the result.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 由于等级数字从棋盘顶部到底部递减，我们在计算`fRect`时从最大等级中减去所需的等级。然后，我们像在`sizeHint()`中做的那样计算等级符号的水平偏移量，并在返回结果之前通过该偏移量平移矩形。
- en: 'Finally, we can move on to implementing the event handler for the paint event.
    Declare the `paintEvent()` method (the fixup menu available under the *Alt* +
    *Enter* keyboard shortcut will let you generate a stub implementation of the method)
    and fill it with the following code:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以继续实现绘制事件的处理器。声明`paintEvent()`方法（在*Alt* + *Enter*键盘快捷键下可用的修复菜单将允许你生成方法的存根实现）并填充以下代码：
- en: '[PRE53]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The handler is quite simple. First we instantiate the `QPainter` object that
    operates on the widget. Then we have three loops—the first one iterates over ranks,
    the second over columns, and the third over all fields. The body of each loop
    is very similar: there is a call to a custom draw method that accepts a pointer
    to the painter and index of the rank, column, or both of them, respectively. Each
    of the calls is surrounded by executing `save()` and `restore()`on our `QPainter`
    instance. What are the calls for here? The three draw methods—`drawRank()`, `drawColumn()`,
    and `drawField()`—are going to be virtual methods responsible for rendering the
    rank symbol, the column number, and the field background. It will be possible
    to subclass `ChessView` and provide custom implementations for those renderers
    so that it is possible to provide a different look of the chess board. Since each
    of these methods takes the painter instance as its parameter, overrides of these
    methods could alter attribute values of the painter behind our back. Calling `save()`
    before handing the painter over to such override stores its state on an internal
    stack, and calling `restore()` after returning from the override resets the painter
    to what was stored with `save()`. This effectively gives us a failsafe to avoid
    breaking the painter in case the override does not clean up after itself if it
    modifies the painter.'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-273
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Calling `save()` and `restore()` very often introduces a performance hit, so
    you should avoid saving and restoring painter states too often in time-critical
    situations. As our painting is very simple, we don't have to worry about that
    when painting our chess board.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: 'Having introduced our three methods, we can start implementing them. Let''s
    start with `drawRank` and `drawColumn`. Remember to declare them as virtual and
    put them in protected access scope (that''s usually where Qt classes put such
    methods), as shown:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Both methods are very similar. We use `fieldRect()` to query for the left-most
    column and bottom-most rank and based on that, we calculate where rank symbols
    and column numbers should be placed. The call to `QRect::adjusted()` is to accommodate
    the 2 pixel margin around the text to be drawn. Finally, we use `drawText()` to
    render appropriate text. For the rank, we ask the painter to align the text to
    the right edge of the rectangle and center the text vertically. In a similar way,
    when drawing the column we align to the top edge and center the text horizontally.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can implement the third draw method. It should also be declared protected
    and virtual. Place the following code in the method body:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: In this method, we use the `QPalette` object coupled with each widget to query
    for `Light` (usually white) and `Mid` (darkish) color depending on whether the
    field we are drawing on the chess board is considered white or black. We do that
    instead of hardcoding the colors to make it possible to modify colors of the tiles
    without subclassing simply by adjusting the palette object. Then we use the palette
    again to ask for the `Dark` color and use that as a pen for our painter. When
    we draw a rectangle with such settings, the pen will stroke the border of the
    rectangle to give it a more elegant look. Note how we modify attributes of the
    painter in this method and we do not set them back afterwards. We can get away
    with it because of the `save()` and `restore()` calls surrounding the `drawField()`
    execution.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: 'We are ready now to see the results of our work. Let''s switch to the `MainWindow`
    class and equip it with the following two private variables:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Then modify the constructor by adding the following highlighted code to set
    up the view and the game engine:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Afterwards, you should be able to build the project. When you run it, you should
    see a result similar to the one in the following screenshot:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – understanding the ChessView class](img/8874OS_05_19.jpg)'
  id: totrans-286
  prefs: []
  type: TYPE_IMG
- en: '*What just happened?*'
  id: totrans-287
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, we did two things. First we provided a number of methods for
    calculating the geometry of important parts of the chess board and the size of
    the widget. Second, we defined three virtual methods for rendering visual primitives
    of a chess board. By making the methods virtual, we provided an infrastructure
    to let the look be customized by subclassing and overriding base implementations.
    Furthermore, by reading color from `QPalette`, we allowed customizing the colors
    of the primitives even without subclassing.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: The last line of the main window constructor tells the layout of the window
    to force a fixed size of the window equal to what the size hint of the widget
    inside it reports.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – rendering the pieces
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we can see the board, it is time to put the pieces on it. We are going
    to use images for that purpose. In my case, we found a number of SVG files with
    chess pieces and decided to use them. SVG is a vector graphics format where all
    curves are defined not as a fixed set of points but rather as mathematic curves.
    Their main benefit is that they scale very well without causing an aliasing effect.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s equip our view with a registry of images to be used for "stamping" a
    particular piece type. Since each piece type is identified with char, we can use
    it to generate keys for a map of images. Let''s put the following API into `ChessView`:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: For the image type, we do not use `QImage` or `QPixmap` but rather `QIcon`.
    This is because `QIcon` can store many pixmaps of different sizes and use the
    most appropriate one when we request an icon of a given size to be painted. This
    doesn't matter if we use vector images, but it does matter if you choose to use
    PNG or other types of image. In such cases, you can use `addFile()` to add many
    images to a single icon.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: 'Going back to our registry, the implementation is very simple. We just store
    the icon in a map and ask the widget to repaint itself:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Now we can fill the registry with actual images right after we create the view
    inside the `MainWindow` constructor. Note that we stored all the images in a resource
    file, as shown:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'The next thing to do is to extend the `paintEvent()` method of the view to
    actually render our pieces. For that, we will introduce another protected virtual
    method called `drawPiece()`. We''ll call it when iterating over all the ranks
    and columns of the board, as shown:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'It is not a coincidence that we start drawing from the highest (top) rank to
    the lowest (bottom) one. By doing that, we allow a pseudo-3D effect: if a piece
    drawn extends past the area of the field, it will intersect the field from the
    next rank (which is possibly occupied by another piece). By drawing higher rank
    pieces first, we cause them to be partially covered by pieces from the lower rank,
    which imitates the effect of depth. By thinking ahead, we allow reimplementations
    of `drawPiece()` to have more freedom in what they can do.'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: 'The final step is to provide a base implementation for this method, as follows:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: The method is very simple, it queries for the rectangle of a given column and
    rank, then asks the `ChessBoard` instance about the piece occupying the given
    field. If there is a piece there, we ask the registry for the proper icon; if
    we get a valid one, we call its `paint()` routine to draw the piece centered in
    the field's rect. The image drawn will be scaled to the size of the rectangle.
    It is important that you only use images with a transparent background (such as
    PNG or SVG files and not JPEG files) so that the color of the field can be seen
    through the piece.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  id: totrans-305
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To test the implementation, you can modify the algorithm to fill the board
    with the default piece set up by introducing the following change to the `ChessAlgorithm`
    class:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Running the program should show the following result:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/8874OS_05_20.jpg)'
  id: totrans-309
  prefs: []
  type: TYPE_IMG
- en: 'The modification we did in this step was very simple. First we provided a way
    to tell the board what each piece type looks like. This includes not only standard
    chess pieces but anything that fits into char and can be set inside the `ChessBoard`
    class''s internal data array. Second, we made an abstraction for drawing the pieces
    with the simplest possible base implementation: taking an icon from the registry
    and rendering it to the field. By making use of `QIcon`, we can add several pixmaps
    of different sizes to be used with different sizes of a single field. Alternatively,
    the icon can contain a single vector image that scales very well all by itself.'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – making the chess game interactive
  id: totrans-311
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have managed to display the chess board but to actually play a game, we
    have to tell the program what moves we want to play. We could do that by adding
    the `QLineEdit` widget where we would input the move in algebraic form (for example,
    `Nf3` to move a knight to `f3`), but a more natural way is to click a piece with
    the mouse cursor (or tap it with a finger) and then click again on the destination
    field. To obtain such functionality, the first thing to do is to teach `ChessView`
    to detect mouse clicks. Therefore, add the following method:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'The code looks very similar to the implementation of `fieldRect()`. This is
    because `fieldAt()` implements its reverse operation—it transforms a point in
    the widget coordinate space to the column and rank index of a field the point
    is contained in. The index is calculated by dividing point coordinates by the
    size of the field. You surely remember that, in the case of columns, the fields
    are offset by the size of the widest letter and a margin of 4 and we have to consider
    that in our calculations here as well. We do two checks: first we check the horizontal
    point coordinate against the offset to detect if the user clicked on the part
    of the widget where column symbols are displayed, and then we check if the rank
    and column calculated fit the range represented in the board. Finally, we return
    the result as a `QPoint` value since this is the easiest way in Qt to represent
    a two-dimensional value.'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to find a way to make the widget notify its environment that a
    particular field was clicked. We can do this through the signal-slot mechanism.
    Switch to the header file of `ChessView` (if you currently have chessview.cpp
    opened in Qt Creator, you can simply push the *F4* key to be transferred to the
    corresponding header file) and declare a `clicked(const QPoint &)` signal:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'To detect mouse input, we have to override one of the mouse event handlers
    a widget has, either `mousePressEvent` or `mouseReleaseEvent`. It seems obvious
    we should choose the former event; this would work, but it is not the best decision.
    Just think about the semantics of a mouse click: it is a complex event composed
    of pushing and releasing the mouse button. The actual "click" takes place after
    the mouse is released. Therefore let''s use `mouseReleaseEvent` as our event handler:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: The code is simple; we use the method we just implemented and pass it the position
    read from the `QMouseEvent` object. If the returned point is invalid, we quietly
    return from the method. Otherwise, `clicked()` is emitted with the obtained column
    and rank values.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: 'We can make use of the signal now. Go to the constructor of `MainWindow` and
    add the following line to connect the widget''s clicked signal to a custom slot:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Declare the slot and implement it as follows:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: The function uses a class member variable `m_clickPoint` to store the clicked
    field. The variable value is made invalid after a move is made. Thus we can detect
    whether the click we are currently handling has "select" or "move" semantics.
    In the first case, we store the selection in `m_clickPoint`; in the other case,
    we ask the board to make a move using the helper method we implemented some time
    ago. Remember to declare `m_clickPoint` as a private member variable of `MasinWindow`.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: 'All should be working now. However, if you build the application, run it, and
    start clicking around on the chess board, you will see that nothing happens. This
    is because we forgot to tell the view to refresh itself when the game position
    on the board is changed. We have to connect the signals the board emits to the
    `update()` slot of the view. Open the `setBoard()` method of the widget class
    and fix it as follows:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'If you run the program now, moves you make will be reflected in the widget,
    as shown:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – making the chess game interactive](img/8874OS_05_21.jpg)'
  id: totrans-328
  prefs: []
  type: TYPE_IMG
- en: At this point, we might consider the visual part of the game as finished, but
    there is still one problem you might have spotted while testing our latest additions.
    When you click on the board, there is no visual hint that any piece was actually
    selected. Let's fix that now by introducing the ability to highlight any field
    on the board.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: 'To do that, we will develop a generic system for different highlights. Begin
    by adding a `Highlight` class as an internal class to `ChessView`:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'It is a minimalistic interface for highlights and only exposes a method returning
    the type of the highlight using a virtual method. In our exercise, we will focus
    on just a basic type that marks a single field with a given color. Such a situation
    is going to be represented by the `FieldHighlight` class:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'You can see we provided a constructor that takes the column and rank indices
    and a color for the highlight and stores them in private member variables. Also,
    `type()` is redefined to return `FieldHighlight::Type`, which we can use to easily
    identify the type of highlight. The next step is to extend `ChessView` with abilities
    to add and remove highlights. As the container declares a private `QList<Highlight*>
    m_highlights` member variable, add method declarations:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Next provide implementations for non-inline methods:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Drawing the highlights is really easy: we will use yet another virtual `draw`
    method. Place the following call in the `paintEvent()` implementation right before
    the loop that is responsible for rendering pieces:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: The implementation simply iterates over all the highlights and renders those
    it understands.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: By checking the type of the highlight, we know which class to cast the generic
    pointer to. Then we can query the object for the needed data. Finally, we use
    `QPainter::fillRect()` to fill the field with the given color. As `drawHighlights()`
    is called before the piece painting loop and after the field painting loop, the
    highlight will cover the background but not the piece.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: 'That''s the basic highlighting system. Let''s make our `viewClicked()` slot
    use it:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Notice how we check that a field can only be selected if it is not empty (that
    is, there is an existing piece occupying that field)?
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: You should also add a `ChessView::FieldHighlight *m_selectedField` private member
    variable and initialize it with a null pointer in the constructor. You can now
    build the game, execute it, and start moving pieces around.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – making the chess game interactive](img/8874OS_05_22.jpg)'
  id: totrans-347
  prefs: []
  type: TYPE_IMG
- en: '*What just happened?*'
  id: totrans-348
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By adding a few lines of code, we managed to make the board clickable. We connected
    a custom slot that reads which field was clicked and can highlight it with a semi-transparent
    red color. Clicking on another field will move the highlighted piece there. The
    highlighting system we developed is very generic. We use it to highlight a single
    field with a solid color, but you can mark as many fields as you want with a number
    of different colors, for example, to show valid moves after selecting a piece.
    The system can easily be extended with new types of highlights; for example, you
    can draw arrows on the board using `QPainterPath` to have a complex hinting system
    (say showing the player the suggested move).
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/8874OS_05_23.jpg)'
  id: totrans-350
  prefs: []
  type: TYPE_IMG
- en: Time for action – connecting the game algorithm
  id: totrans-351
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It would take us too long to implement a full chess game algorithm here, so
    we will instead settle for a much simpler game called Fox and Hounds. One of the
    players has four pawns (hounds) which can only move over black fields and the
    pawn can only move in a forward fashion (toward higher ranks). The other player
    has just a single pawn (fox) which starts from the opposite side of the board.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – connecting the game algorithm](img/8874OS_05_24.jpg)'
  id: totrans-353
  prefs: []
  type: TYPE_IMG
- en: It can also move only over black fields; however it can move both forwards (toward
    higher ranks) as well as backwards (toward lower ranks). Players move in turns
    by moving their pawn by to a neighboring black field. The goal of the fox is to
    reach the opposite end of the board; the goal of the hounds is to trap the fox
    so that it can't make a move.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – connecting the game algorithm](img/8874OS_05_25.jpg)'
  id: totrans-355
  prefs: []
  type: TYPE_IMG
- en: 'Time to get to work! First we will extend the `ChessAlgorithm` class with the
    required interface:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'There are two sets of members here. First we have a number of enums, variables,
    signals, and methods that are related to the state of the game: which player should
    make his move now and what is currently the result of the game. The `Q_ENUMS`
    macro is used to register enumerations in Qt''s meta-type system so that they
    can be used as values for properties or arguments in signals. Property declarations
    and getters for them don''t need any extra explanation. We have also declared
    protected methods for setting the variables from within subclasses. Here is their
    suggested implementation:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Remember about initializing `m_currentPlayer` and `m_result` to `NoPlayer` and
    `NoResult` in the constructor of the `ChessAlgorithm` class.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: 'The second group of functions is methods that modify the state of the game—the
    two variants of `move()`. The virtual variant is meant to be reimplemented by
    the real algorithm to check whether a given move is valid in the current game
    state and if that is the case, to perform the actual modification of the game
    board. In the base class, we can simply reject all possible moves:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Tip
  id: totrans-363
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`Q_UNUSED` is a macro to prevent the compiler from issuing warnings during
    compilation if the enclosed local variable is never used in the scope.'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: The overload is simply a convenience method that accepts two `QPoint` objects
    instead of four integers.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'The interface for the algorithm is ready now and we can implement it for the
    Fox and Hounds game. Subclass `ChessAlgorithm` to create a `FoxAndHounds` class:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'The implementation of `newGame()` is pretty simple: we set up the board, place
    pieces on it, and signal that it is time for the first player to make their move.'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'The algorithm for the game is quite simple. Implement `move()` as follows:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Declare a protected `foxCanMove()` method and implement it using the following
    code:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Then do the same with `emptyByOffset()`:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Lastly declare a private `QPoint m_fox` member variable.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
- en: 'The simplest way to test the game is to make two changes to the code. First,
    in the constructor of the main window class, replace `m_algorithm = new ChessAlgorithm(this)`
    with `m_algorithm = new FoxAndHounds(this)`. Second, modify the `viewClicked()`
    slot as follows:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: You can also connect signals from the algorithm class to custom slots of the
    view or window to notify about the end of the game and provide a visual hint as
    to which player should make his move now.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  id: totrans-381
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We created a very simplistic API for implementing chess-like games by introducing
    the `newGame()` and `move()` virtual methods to the algorithm class. The former
    method simply sets everything up. The latter uses simple checks to determine whether
    a particular move is valid and if the game has ended. We use the `m_fox` member
    variable to track the current position of the fox to be able to quickly determine
    if it has any valid moves. When the game ends, the `gameOver()` signal is emitted
    and the result of the game can be obtained from the algorithm. You can use the
    exact same framework for implementing all chess rules.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – implementing the UI around the chess board
  id: totrans-383
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: During the exercise, we focused on developing the game board view and necessary
    classes to make the game actually run. But we completely neglected the regular
    user interface the game might possess, such as toolbars and menus. You can try
    designing a set of menus and toolbars for the game. Make it possible to start
    a new game, save a game in progress (say by implementing a FEN serializer), load
    a saved game (say by leveraging the existing FEN string parser), or choose different
    game types that will spawn different `ChessAlgorithm` subclasses. You can also
    provide a settings dialog for adjusting the look of the game board. If you feel
    like it, you can add chess clocks or implement a simple tutorial system that will
    guide the player through the basics of chess using text and visual hints via the
    highlight system we implemented.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – connecting a UCI-compliant chess engine
  id: totrans-385
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you really want to test your skills, you can implement a `ChessAlgorithm`
    subclass that will connect to a **Universal Chess Interface** (UCI) chess engine
    such as StockFish ([http://stockfishchess.org](http://stockfishchess.org)) and
    provide a challenging artificial intelligence opponent for a human player. UCI
    is the de facto standard for communication between a chess engine and a chess
    frontend. Its specification is freely available, so you can study it on your own.
    To talk to a UCI-compliant engine you can use `QProcess`, which will spawn the
    engine as an external process and attach itself to its standard input and standard
    output. Then you can send commands to the engine by writing to its standard input
    and read messages from the engine by reading its standard output. To get you started,
    here is a short snippet of code that starts the engine and attaches to its communication
    channels:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: OpenGL
  id: totrans-388
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are not experts on OpenGL, so in this part of the chapter we will not teach
    you to do any fancy stuff with OpenGL and Qt but rather will show you how to enable
    the use of your OpenGL skills in Qt applications. There are a lot of tutorials
    and courses on OpenGL out there so if you're not that skilled with OpenGL, you
    can still benefit from what is described here by employing the knowledge gained
    here to more easily learn fancy stuff. You can use external materials and a high-level
    API offered by Qt, which is going to speed up many of the tasks described in the
    tutorials.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to OpenGL with Qt
  id: totrans-390
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are basically two ways you can use OpenGL in Qt. The first approach is
    to use `QOpenGLWidget`. This is mostly useful if your application heavily depends
    on other widgets (for example. the 3D view is only one of the views in your application
    and is controlled using a bunch of other widgets surrounding the main view). The
    other way is to use `QOpenGLWindow`; this is most useful when the GL window is
    the dominant or even the only part of the program. Both APIs are very similar;
    they use instances of the `QOpenGLContext` class to access the GL context. The
    difference is practically only in how they render the scene to the window. `QOpenGLWindow`
    renders directly to the given window, while `QOpenGLWidget` first renders to an
    offscreen buffer that is then rendered to the widget. The advantage of the latter
    approach is that `QOpenGLWidget` can be part of a more complex widget layout while
    `QOpenGLWindow` is usually used as the sole, often fullscreen, window. In this
    chapter we will be using the more direct approach (`QOpenGLWindow`); however,
    bear in mind that you can do everything described here using the widget too. Just
    replace the window classes with their widget equivalents and you should be good
    to go.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: We said that the whole API revolves around the `QOpenGLContext` class. It represents
    the overall state of the GL pipeline, which guides the process of data processing
    and rendering to a particular device.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
- en: A related concept that needs explanation is the idea of a GL context being "current"
    in a thread. The way OpenGL calls work is that they do not use any handle to any
    object containing information on where and how to execute the series of low-level
    GL calls. Instead, it is assumed that they are executed in the context of the
    current machine state. The state may dictate whether to render a scene to a screen
    or to a frame buffer object, which mechanisms are enabled, or the properties of
    the surface OpenGL is rendering on. Making a context "current" means that all
    further OpenGL operations issued by a particular thread will be applied to this
    context. To add to that, a context can be "current" only in one thread at the
    same time; therefore, it is important to make the context current before making
    any OpenGL calls and then marking it as available after you are done accessing
    OpenGL resources.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
- en: '`QOpenGLWindow` has a very simple API that hides most of the unnecessary details
    from the developer. Apart from constructors and a destructor, it provides a small
    number of very useful methods. First there are auxiliary methods for managing
    the OpenGL context: `context()`, which returns the context, and `makeCurrent()`
    as well as `doneCurrent()` for acquiring and releasing the context. The remaining
    methods of the class are a number of virtual methods we can reimplement to display
    OpenGL graphics.'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
- en: The first method is called `initializeGL()`, and it is invoked by the framework
    once before any painting is actually done so that you can prepare any resources
    or initialize the context in any way you require.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
- en: 'Then there are two most important methods: `resizeGL()` and `paintGL()`. The
    first is a callback invoked every time the window is resized. It accepts the width
    and height of the window as parameters. You can make use of that method by reimplementing
    it so that you can prepare yourself for the fact that the next call to the other
    method, `paintGL()`, renders to a viewport of a different size. Speaking of `paintGL()`,
    this is the equivalent of `paintEvent()` for the widget classes; it gets executed
    whenever the window needs to be repainted. This is the function where you should
    put your OpenGL rendering code.'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – drawing a triangle using Qt and OpenGL
  id: totrans-397
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the first exercise, we will create a subclass of `QOpenGLWindow` that renders
    a triangle using simple OpenGL calls. Create a new project starting with **Empty
    qmake Project** from the **Other Projects** group as the template. In the project
    file, put the following content:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Having the basic project setup ready, let's define a `SimpleGLWindow` class
    as a subclass of `QOpenGLWindow` and override the `initializeGL()` method to set
    white as the clear color of our scene. We do this by calling an OpenGL function
    called `glClearColor`. Qt provides a convenience class called `QOpenGLFunctions`
    that takes care of resolving most commonly used OpenGL functions in a platform-independent
    way. This is the recommended approach to access OpenGLES functions in a platform-independent
    manner. Our window is going to inherit not only `QOpenGLWindow` but also `QOpenGLFunctions`.
    However, since we don't want to allow external access to those functions, we use
    protected inheritance.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: In `initializeGL()`, we first call `initializeOpenGLFunctions()`, which is a
    method of the `QOpenGLFunctions` class, one of the base classes of our window
    class. The method takes care of setting up all the functions according to the
    parameters of the current GL context (thus it is important to first make the context
    current, which luckily is done for us behind the scenes before `initializeGL()`
    is invoked). Then we set the clear color of the scene to white.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to reimplement `paintGL()` and put the actual drawing code
    there:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: This function first clears the color buffer and sets the GL viewport of the
    context to be the size of the window. Then we tell OpenGL to start drawing using
    triangles with the `glBegin()` call and passing `GL_TRIANGLES` as the drawing
    mode. Then we pass three vertices along with their colors to form a triangle.
    Finally, we inform the pipeline by invoking `glEnd()` that we are done drawing
    using the current mode.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
- en: 'What is left is a trivial `main()` function that sets up the window and starts
    the event loop. Add a new **C++ Source File**, call it main.cpp, and implement
    `main()` as follows:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '![Time for action – drawing a triangle using Qt and OpenGL](img/8874OS_05_13.jpg)'
  id: totrans-408
  prefs: []
  type: TYPE_IMG
- en: Tip
  id: totrans-409
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can see the triangle has jagged edges. That''s because of the aliasing
    effect. You can counter it by enabling multisampling for the window, which will
    make OpenGL render the contents multiple times and then average the result, which
    acts as antialiasing. To do that, add the following code to the constructor of
    the window:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Drawing colored triangles is fun, but drawing textured cubes is even more fun
    so let's see how we can use OpenGL textures with Qt.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – scene-based rendering
  id: totrans-413
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's take our rendering code to a higher level. Putting OpenGL code directly
    into the `window` class requires subclassing the window class and makes the window
    class more and more complex. Let's follow good programming practice and separate
    rendering code from window code.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new class and call it `AbstractGLScene`. It is going to be the base
    class for definitions of OpenGL scenes. You can derive the class (with protected
    scope) from `QOpenGLFunctions` to make accessing different GL functions easier.
    Make the scene class accept a pointer to `QOpenGLWindow`, either in the constructor
    or through a dedicated setter method. Make sure the pointer is stored in the class
    for easier access as we are going to rely on that pointer for accessing physical
    properties of the window. Add methods for querying the window''s OpenGL context.
    You should end up with code similar to the following:'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Now the essential part begins. Add two pure virtual methods called `paint()`
    and `initialize()`. Also remember about adding a virtual destructor.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-418
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Instead of making `initialize()` a pure virtual function, you can implement
    its body in such a way that it will call `initializeOpenGLFunctions()` to fulfill
    the requirements of the `QOpenGFunctions` class. Then, subclasses of `AbstractGLScene`
    can make sure the functions are initialized properly by calling the base class
    implementation of `initialize()`.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
- en: Next, create a subclass of `QOpenGLWindow` and call it `SceneGLWindow`. Equip
    it with setter and getter methods to allow the object to operate on an `AbstractGLScene`
    instance.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: 'Then reimplement the `initializeGL()` and `paintGL()` methods and make them
    call appropriate equivalents in the scene:'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '*What just happened?*'
  id: totrans-423
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have just set up a class chain that separates the window code from the actual
    OpenGL scene. The window forwards all calls related to scene contents to the scene
    object so that when the window is requested to repaint itself, it delegates the
    task to the scene object. Note that prior to doing that, the window will make
    the GL context current; therefore, all OpenGL calls the scene makes will be related
    to that context. You can store the code created in this exercise for later reuse
    in further exercises and your own projects.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – drawing a textured cube
  id: totrans-425
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Subclass `AbstractGLScene` and implement the constructor to match the one from
    `AbstractGLScene`. Add a method to store a `QImage` object in the scene that will
    contain texture data for the cube. Add a `QOpenGLTexture` pointer member as well,
    which will contain the texture, initialize it to 0 in the constructor, and delete
    it in the destructor. Let''s call the image object `m_tex` and the texture `m_texture`.
    Now add a protected `initializeTexture()` method and fill it with the following
    code:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: The function first mirrors the image vertically. This is because OpenGL expects
    the texture to be "upside down". Then we create a `QOpenGLTexture` object, passing
    it our image. Then we set minification and magnification filters so that the texture
    looks better when it is scaled.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
- en: We are now ready to implement the `initialize()` method that will take care
    of setting up the texture and the scene itself.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  id: totrans-430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: We make use of a flag called `m_initialized`. This flag is needed to prevent
    the texture from being set up too early (when no GL context is available yet).
    Then we check if the texture image is set (using the `QImage::isNull()` method);
    if so, we initialize the texture. Then we set some additional properties of the
    GL context.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-432
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the setter for `m_tex`, add code that checks if `m_initialized` is set to
    `true` and if so, calls `initializeTexture()`. This is to make certain that the
    texture is properly set regardless of the order in which the setter and `initialize()`
    are called. Also remember to set `m_initialized` to `false` in the constructor.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to prepare the cube data. We will define a special data structure
    for the cube that groups vertex coordinates and texture data in a single object.
    To store coordinates, we are going to use classes tailored to that purpose—`QVector3D`
    and `QVector2D`.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '`QVector<TexturedPoint>` will hold information for the whole cube. The vector
    is initialized with data using the following code:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: The code uses C++11 syntax to operate on the vector. If you have an older compiler,
    you will have to use `QVector::append()` instead.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: The cube consists of six faces and is centered on the origin of the coordinate
    system. The following image presents the same data in graphical form. Purple figures
    are texture coordinates in UV coordinate space.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – drawing a textured cube](img/8874OS_05_14.jpg)'
  id: totrans-441
  prefs: []
  type: TYPE_IMG
- en: '`initializeCubeData()` should be called from the scene constructor or from
    the `initialize()` method. What remains is the painting code.'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'First we set up the viewport and then we rotate the view. Before calling `paintCube()`,
    which is going to render the cube itself, we enable depth testing and face culling
    so that only visible faces are drawn. The `paintCube()` routine looks as follows:'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: First the texture is bound and texturing is enabled. Then we enter the quad
    drawing mode and stream in data from our data structure. Finally, we disable texturing
    again.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
- en: 'For completeness, here is a `main()` function that executes the scene:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Please note the use of `QSurfaceFormat` to enable multisample antialiasing for
    the scene. We have also put the texture image into a resource file to avoid problems
    with the relative path to the file.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – animating a cube
  id: totrans-450
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Try modifying the code to make the cube animated. To do that, have the scene
    inherit `QObject`, add an angle property of type `float` to it (remember about
    the `Q_OBJECT` macro). Then modify one of the `glRotatef()` lines to use the angle
    value instead of a constant value. Put the following code in `main()` right before
    calling `app.exec()`:'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Remember to put a call to `window()->update()` in the setter for the angle property
    so that the scene is redrawn.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
- en: Modern OpenGL with Qt
  id: totrans-454
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: OpenGL code shown in the previous section uses a very old technique of streaming
    vertices one by one into a fixed OpenGL pipeline. Nowadays, modern hardware is
    much more feature rich and not only does it allow faster processing of vertex
    data but it also offers the ability to adjust different processing stages with
    the use of reprogrammable units called shaders. In this section, we will take
    a look at what Qt has to offer in the domain of a "modern" approach to using OpenGL.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
- en: Shaders
  id: totrans-456
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Qt can make use of shaders through a set of classes based around `QOpenGLShaderProgram`.
    This class allows compiling, linking, and executing shader programs written in
    GLSL. You can check if your OpenGL implementation supports shaders by inspecting
    the result of a static `QOpenGLShaderProgram::hasOpenGLShaderPrograms()` call
    that accepts a pointer to a GL context. All modern hardware and all decent graphics
    drivers should have some support for shaders. A single shader is represented by
    an instance of the `QOpenGLShader` class. Using it, you can decide on the type
    of shader, associate, and shader source code. The latter is done by calling `QOpenGLShader::compileSourceCode()`,
    which has a number of overloads for handling different input formats.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
- en: 'Qt supports all kinds of shaders, with the most common being vertex and fragment
    shaders. These are both part of the classic OpenGL pipeline. You can see an illustration
    of the pipeline on the following diagram:'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
- en: '![Shaders](img/8874OS_05_15.jpg)'
  id: totrans-459
  prefs: []
  type: TYPE_IMG
- en: When you have a set of shaders defined, you can assemble a complete program
    by using `QOpenGLShaderProgram::addShader()`. After all shaders are added, you
    can `link()` the program and `bind()` it to the current GL context. The program
    class has a number of methods for setting values of different input parameters—uniforms
    and attributes both in singular and array versions. Qt provides mappings between
    its own types (such as `QSize` or `QColor`) to GLSL counterparts (for example,
    `vec2` and `vec4`) to make the programmer's life even easier.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
- en: 'A typical code flow for using shaders for rendering is as follows (first a
    vertex shader is created and compiled):'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  id: totrans-462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'The process is repeated for a fragment shader:'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  id: totrans-464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'Then shaders are linked into a single program in a given GL context:'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  id: totrans-466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'Whenever the program is used, it should be bound to the current GL context
    and filled with required data:'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  id: totrans-468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'After that, calls activating the render pipeline are going to use the bound
    program:'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: Time for action – shaded objects
  id: totrans-471
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's convert our last program so that it uses shaders. To make the cube better,
    we will implement a smooth lighting model using the Phong algorithm. At the same
    time, we will learn to use some helper classes that Qt offers for use with OpenGL.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic goals for this mini-project are as follows:'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
- en: Use vertex and fragment shaders for rendering a complex object
  id: totrans-474
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handle model, view, and projection matrices
  id: totrans-475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use attribute arrays for faster drawing
  id: totrans-476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Start by creating a new subclass of `AbstractGLScene`. Let''s give it the following
    interface:'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  id: totrans-478
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: Significant changes to the class interface in comparison with the previous project
    have been highlighted. We're not using textures in this project so `TexturedPoint`
    was simplified to `ScenePoint` with UV texture coordinates removed.
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
- en: We can start implementing the interface with the `initializeObjectData()` function.
    We're not going to go line by line explaining what the body of the method does.
    You can implement it as you want; it is important that the method fill the `m_data`
    member with information about vertices and their normals.
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-481
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the sample code that comes with this book, you can find code that loads data
    from a file in PLY format generated with the Blender 3D program. To export a model
    from Blender, make sure it consists of just triangles (for that, select the model,
    go into the Edit mode by pressing *Tab*, open the **Faces** menu with *Ctrl* +
    *F*, and choose **Triangulate Faces**). Then click on **File** and **Export**;
    choose **Stanford (.ply)**. You will end up with a text file containing vertex
    and normal data as well as face definitions for the vertices.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
- en: You can always reuse the cube object from the previous project. Just be aware
    that its normals are not calculated properly for smooth shading; thus, you will
    have to correct them.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we can set up the shader program, we have to be aware of what the actual
    shaders look like. Shader code is going to be loaded from external files, so the
    first step is to add a new file to the project. In Creator, click on **File**
    and choose **New File or Project**; from the bottom pane, choose **GLSL**, and
    from the list of available templates choose **Vertex Shader (Desktop OpenGL)**.
    Call the new file `phong.vert` and input the following code:'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  id: totrans-485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: The code is very simple. We declare four matrices representing different stages
    of coordinate mapping for the scene. We also define two input attributes—`Vertex`
    and `Normal`—which contain the vertex data. The shader is going to output two
    pieces of data—a normalized vertex normal and a transformed vertex coordinate
    as seen by the camera. Of course, apart from that we set `gl_Position` to be the
    final vertex coordinate. In each case, we want to be compliant with the OpenGL/ES
    specification so we prefix each variable declaration with a precision specifier.
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, add another file, call it `phong.frag`, and make it a Fragment Shader
    (Desktop OpenGL). The content of the file is a typical ambient, diffuse, and specular
    calculation:'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  id: totrans-488
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: Apart from using the two varying variables to obtain the interpolated normal
    (`N`) and fragment (`v`) position, the shader declares two structures for keeping
    light and material information. Without going into the details about how the shader
    itself works, it calculates three components—ambient light, diffused light, and
    specular reflection—adds them together, and sets that as the fragment color. Since
    all the per vertex input data is interpolated for each fragment, the final color
    is calculated individually for each pixel.
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we know what the shaders expect, we can set up the shader program object.
    Let''s go through the `initialize()` method:'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  id: totrans-491
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'First we call the base class implementation and set the background color of
    the scene to black, as shown in the following code:'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  id: totrans-493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'Then we add two shaders to the program reading their source code from external
    files with the use of a custom helper function called `fileContent()`. This function
    essentially opens a file and returns its content. Then we link the shader program.
    The `link()` function returns a Boolean value but for simplicity we skip the error
    check here. The next step is to prepare all the input data for the shader, as
    shown:'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  id: totrans-495
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: First the shader program is bound to the current context so that we can operate
    on it. Then we enable the setup of two attribute arrays—one for vertex coordinates
    and the other for their normals. We inform the program that an attribute called
    `Vertex` consists of three values of type `GL_FLOAT`. The first value is located
    at `m_data.constData()`, and data for the next vertex is located `sizeof(ScenePoint)`
    bytes later than data for the current point. Then we have a similar declaration
    for the `Normal` attribute, with the only exception that the first piece of data
    is placed at `&m_data[0].normal`. By informing the program about layout of the
    data, we allow it to quickly read all the vertex information when needed.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
- en: 'After attribute arrays are set, we pass values for uniform variables to the
    shader program, which concludes the shader program setup. You will notice that
    we didn''t set values for uniforms representing the various matrices; we will
    do that separately for each repaint. The `paint()` method takes care of setting
    up all the matrices:'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  id: totrans-498
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: In this method, we make heavy use of the `QMatrix4x4` class that represents
    a 4 x 4 matrix in so-called row-major order, which is suited to use with OpenGL.
    At the beginning, we reset the projection matrix and use the `perspective()` method
    to give it a perspective transformation based on current window size. Afterwards,
    the view matrix is also reset and the `lookAt()` method is used to prepare the
    transformation for the camera; center value indicates the center of the view eye
    is looking at. The `up` vector dictates the vertical orientation of the camera
    (with respect to the eye position).
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
- en: 'The next couple of lines are similar to what we had in the previous project:'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  id: totrans-501
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'After that, we do the actual painting of the object:'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  id: totrans-503
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'We start by setting the model matrix, which dictates where the rendered object
    is positioned relative to the center of the world (in this case, we say it is
    rotated 45 degrees around the *y* axis). Then we assemble the model-view matrix
    (denoting the position of the object relative to the camera) and pass it to the
    `paintObject()` method, as shown:'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  id: totrans-505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: This method is very easy since most of the work was done when setting up the
    shader program. First the shader program is activated. Then all required matrices
    are set as uniforms for the shader. Included is the normal matrix calculated from
    the model-view matrix. Finally, a call to `glDrawArrays()` is issued telling it
    to render with the `GL_TRIANGLES` mode using active arrays, starting from the
    beginning of the array (offset `0`) and reading in the `pointCount` entities from
    the array.
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
- en: 'After you run the project, you should get a result similar to the following
    one, which happens to contain the Blender monkey, Suzanne:'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – shaded objects](img/8874OS_05_16.jpg)'
  id: totrans-508
  prefs: []
  type: TYPE_IMG
- en: GL buffers
  id: totrans-509
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using attribute arrays can speed up programming, but for rendering, all data
    still requires to be copied to the graphics card on each use. This can be avoided
    with OpenGL buffer objects. Qt provides a neat interface for such objects with
    its `QOpenGLBuffer` class. Currently supported buffer types are vertex buffers
    (where the buffer contains vertex information), index buffers (where the content
    of the buffer is a set of indexes to other buffers that can be used with `glDrawElements()`),
    and also less commonly used pixel pack buffers and pixel unpack buffers. The buffer
    is essentially a block of memory that can be uploaded to the graphics card and
    stored there for faster access. There are different usage patterns available that
    dictate how and when the buffer is transferred between the host memory and GPU
    memory. The most common pattern is a one-time upload of vertex information to
    the GPU that can later be referred to during rendering as many times as needed.
    Changing an existing application that uses an attribute array to use vertex buffers
    is very easy. First a buffer needs to be instantiated:'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  id: totrans-511
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'Then its usage pattern needs to be set. In case of a one-time upload, the most
    appropriate type is `StaticDraw`, as shown:'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  id: totrans-513
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'Then the buffer itself has to be created for the current context:'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  id: totrans-515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'The next step is to actually allocate some memory for the buffer:'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  id: totrans-517
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: 'To write data to the buffer, there are two options. First you can attach the
    buffer to the application''s memory space using a call to `map()` and then fill
    the data using a returned pointer:'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  id: totrans-519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: 'An alternative approach is to write to the buffer directly using `write()`:'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  id: totrans-521
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: 'Finally, the buffer can be used in the shader program in a way similar to an
    attribute array:'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  id: totrans-523
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: The result is that all the data is uploaded to the GPU once and then used as
    needed by the current shader program or other OpenGL call supporting buffer objects.
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
- en: Off-screen rendering
  id: totrans-525
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes, it is useful to render a GL scene not to the screen but rather to
    some image that can be later processed externally or used as a texture in some
    other part of rendering. For that, the concept of **Framebuffer Objects** (**FBO**)
    was created. An FBO is a rendering surface that behaves like the regular device
    frame buffer, with the only exception that the resulting pixels do not land on
    the screen. An FBO target can be bound as a texture in an existing scene or dumped
    as an image to regular computer memory. In Qt, such an entity is represented by
    a `QOpenGLFramebufferObject` class.
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
- en: Once you have a current OpenGL context, you can create an instance of `QOpenGLFramebufferObject`
    using one of the available constructors. A mandatory parameter to pass is the
    size of the canvas (either as a `QSize` object or as a pair of integers describing
    the width and height of the frame). Different constructors accept other parameters
    such as the type of texture the FBO is to generate or a set of parameters encapsulated
    in `QOpenGLFramebufferObjectFormat`.
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
- en: When the object is created, you can issue a `bind()` call on it, which switches
    the OpenGL pipeline to render to the FBO instead of the default target. A complementary
    method is `release()`, which restores the default rendering target. Afterwards,
    the FBO can be queried to return the ID of the OpenGL texture (using the `texture()`
    method) or to convert the texture to `QImage` (by invoking `toImage()`).
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 当对象被创建时，你可以在其上发出一个`bind()`调用，这将切换OpenGL管道以渲染到FBO而不是默认目标。一个互补的方法是`release()`，它将恢复默认渲染目标。之后，可以通过调用`texture()`方法查询FBO以返回OpenGL纹理的ID，或者通过调用`toImage()`将纹理转换为`QImage`。
- en: Summary
  id: totrans-529
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about using graphics with Qt. You should be aware
    we have only scratched the surface of Qt capabilities in this regard. What was
    presented in this chapter will let you implement custom widgets, do some basic
    painting on images, and render OpenGL scenes. There are many more functionalities
    that we didn't go through, such as composition modes, paths, SVG handling, and
    many others. We will come back to some of these features in subsequent chapters,
    but we will leave most for you to discover on your own.
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用Qt进行图形处理。你应该意识到，关于Qt在这方面我们只是触及了皮毛。本章所介绍的内容将帮助你实现自定义小部件，对图像进行一些基本的绘制，以及渲染OpenGL场景。还有很多其他的功能我们没有涉及，例如合成模式、路径、SVG处理等。我们将在后续章节中回顾一些这些功能，但大部分我们将留给你自己探索。
- en: In the next chapter, we will learn a more object-oriented approach to do graphics,
    called Graphics View.
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习一种更面向对象的方法来进行图形处理，称为图形视图。
