["```cpp\n#include \"../JuceLibraryCode/JuceHeader.h\"\n\nvoid writeFile (File const& file);\nvoid readFile (File const& file);\n\nint main (int argc, char* argv[])\n{\n  File file (File::getSpecialLocation(File::currentExecutableFile)\n             .getParentDirectory()\n             .getChildFile (\"chapter04_01_test.txt\"));\n\n  writeFile (file);\n  readFile (file);\n\n  return 0;\n}\n```", "```cpp\nvoid writeFile (File const& file)\n{\n  Logger *log = Logger::getCurrentLogger();\n  FileOutputStream stream (file);\n\n  if (!stream.openedOk()) {\n    log->writeToLog (\"failed to open stream\");\n    return;\n  }\n\n  stream.setPosition (0);\n  stream.truncate();\n\n  String text (\"The quick brown fox jumps over the lazy dog.\");\n\n  bool asUTF16 = false;\n  bool byteOrderMark = false;\n  stream.writeText (text, asUTF16, byteOrderMark);\n}\n```", "```cpp\nvoid readFile (File const& file)\n{\n  Logger *log = Logger::getCurrentLogger();\n  FileInputStream stream (file);\n\n  if (!stream.openedOk()) {\n    log->writeToLog (\"failed to open stream\");\n    return;\n  }\n\n  log->writeToLog (\"fileText: \" +stream.readEntireStreamAsString());\n}\n```", "```cpp\n#include \"../JuceLibraryCode/JuceHeader.h\"\n\nvoid writeFile (File const& file);\nvoid readFile (File const& file);\n\nint main (int argc, char* argv[])\n{\n  File file (File::getSpecialLocation(File::currentExecutableFile)\n             .getParentDirectory()\n             .getChildFile (\"chapter04_02_test.bin\"));\n\n  writeFile (file);\n  readFile (file);\n\n  return 0;\n}\n\nvoid writeFile (File const& file)\n{\n  Logger *log = Logger::getCurrentLogger();\n  FileOutputStream stream (file);\n\n  if (!stream.openedOk()) {\n    log->writeToLog (\"failed to open stream\");\n    return;\n  }\n\n  stream.setPosition (0);\n  stream.truncate();\n  stream.writeInt (1234);\n  stream.writeFloat (3.142);\n  stream.writeDouble (0.000000001);\n}\n\nvoid readFile (File const& file)\n{\n  Logger *log = Logger::getCurrentLogger();\n  FileInputStream stream (file);\n\n  if (!stream.openedOk()) {\n    log->writeToLog (\"failed to open stream\");\n    return;\n  }\n\n  log->writeToLog(\"readInt: \" + String (stream.readInt()));\n  log->writeToLog(\"readFloat: \" + String (stream.readFloat()));\n  log->writeToLog(\"readDouble: \" + String (stream.readDouble()));\n}\n```", "```cpp\n#ifndef __MAINCOMPONENT_H__\n#define __MAINCOMPONENT_H__\n\n#include \"../JuceLibraryCode/JuceHeader.h\"\n\nclass MainContentComponent : public Component,\n                             public Button::Listener\n{\npublic:\n  MainContentComponent();\n  void resized();\n  void buttonClicked (Button* button);\n\nprivate:\n  TextButton readFileButton;\n  ImageComponent imageComponent;\n  Image image;\n};\n#endif\n```", "```cpp\n#include \"MainComponent.h\"\n\nMainContentComponent::MainContentComponent()\n: readFileButton (\"Read Image File...\")\n{\n  addAndMakeVisible (&readFileButton);\n  addAndMakeVisible (&imageComponent);\n\n  readFileButton.addListener (this);\n\n  setSize (500, 400);\n}\n\nvoid MainContentComponent::resized()\n{\n  int buttonHeight = 20;\n  int margin = 10;\n  readFileButton.setBounds(margin, margin,\n                           getWidth() – margin * 2, buttonHeight);\n  imageComponent.setBounds(margin, margin + buttonHeight + margin,\n                           getWidth() – margin * 2,\n                           getHeight() – buttonHeight – margin * 3);\n}\n\nvoid MainContentComponent::buttonClicked (Button* button)\n{\n  if (&readFileButton == button)\n  {\n    FileChooser chooser (\"Choose an image file to display...\");\n\n    if (chooser.browseForFileToOpen()) {\n      image = ImageFileFormat::loadFrom (chooser.getResult());\n\n      if (image.isValid())\n        imageComponent.setImage (image);\n    }\n  }\n}\n```", "```cpp\n#ifndef __MAINCOMPONENT_H__\n#define __MAINCOMPONENT_H__\n\n#include \"../JuceLibraryCode/JuceHeader.h\"\n\nclass MainContentComponent : public Component,\n                             public Button::Listener,\n public Slider::Listener\n{\n  public:\n    MainContentComponent();\n    void resized();\n    void buttonClicked (Button* button);\n void sliderValueChanged (Slider* slider);\n  private:\n    TextButton readFileButton;\n    ImageComponent imageComponent;\n Slider brightnessSlider;\n TextButton writeFileButton;\n Image origImage, procImage;\n};\n#endif\n```", "```cpp\n#include \"MainComponent.h\"\n\nMainContentComponent::MainContentComponent()\n: readFileButton (\"Read Image File...\"),\n  writeFileButton (\"Write Image File...\")\n{\n  brightnessSlider.setRange (0.0, 10.0);\n  addAndMakeVisible (&readFileButton);\n  addAndMakeVisible (&imageComponent);\n  addAndMakeVisible (&brightnessSlider);\n  addAndMakeVisible (&writeFileButton);\n\n  readFileButton.addListener (this);\n  writeFileButton.addListener (this);\n  brightnessSlider.addListener (this);\n\n  setSize (500, 400);\n}\n```", "```cpp\nvoid MainContentComponent::resized()\n{\n  int controlHeight = 20;\n  int margin = 10;\n  int width = getWidth() - margin * 2;\n\n  readFileButton.setBounds\n    (margin, margin, width, controlHeight);\n  imageComponent.setBounds\n    (margin, readFileButton.getBottom() + margin, width,\n     getHeight() - (controlHeight + margin) * 3 - margin * 2);\n  brightnessSlider.setBounds\n    (margin, imageComponent.getBottom() + margin, \n     width, controlHeight);\n  writeFileButton.setBounds\n    (margin, brightnessSlider.getBottom() + margin,\n     width, controlHeight);\n}\n```", "```cpp\nvoid MainContentComponent::buttonClicked (Button* button)\n{\n  if (&readFileButton == button) {\n    FileChooser chooser (\"Choose an image file to display...\");\n\n    if (chooser.browseForFileToOpen()) {\n      origImage = ImageFileFormat::loadFrom (chooser.getResult());\n\n      if (origImage.isValid()) {\n        procImage = origImage.createCopy();\n        imageComponent.setImage (procImage);\n      }\n    }\n  } else if (&writeFileButton == button) {\n    if (procImage.isValid()) {\n      FileChooser chooser (\"Write processed image to file...\");\n\n      if (chooser.browseForFileToSave (true)) {\n        FileOutputStream stream (chooser.getResult());\n        PNGImageFormat pngImageFormat;\n        pngImageFormat.writeImageToStream (procImage, stream);\n      }\n    }\n  }\n}\n```", "```cpp\nvoid MainContentComponent::sliderValueChanged (Slider* slider)\n{\n  if (&brightnessSlider == slider) {\n    if (origImage.isValid() &&\n        procImage.isValid()) {\n      const float amount = (float)brightnessSlider.getValue();\n\n      if (amount == 0.f) {\n        procImage = origImage.createCopy();\n      } else {\n        for (int v = 0; v < origImage.getHeight(); ++v) {\n          for (int h = 0; h < origImage.getWidth(); ++h) {\n            Colour col = origImage.getPixelAt (h, v);\n\n            if (amount > 0.f)\n              procImage.setPixelAt (h, v, col.brighter (amount));\n            else if (amount < 0.f)\n              procImage.setPixelAt (h, v, col.darker (-amount));\n          }\n        }\n      }\n\n      imageComponent.repaint();\n    }\n  }\n}\n```", "```cpp\n#ifndef __MAINCOMPONENT_H__\n#define __MAINCOMPONENT_H__\n\n#include \"../JuceLibraryCode/JuceHeader.h\"\n#include \"MediaPlayer.h\"\n\nclass MainContentComponent   : public Component\n{\npublic:\n  MainContentComponent();\n  void resized();\n\nprivate:\n MediaPlayer player;\n};\n#endif\n```", "```cpp\n#include \"MainComponent.h\"\n\nMainContentComponent::MainContentComponent()\n{\n  addAndMakeVisible (&player);\n  setSize (player.getWidth(),player.getHeight());\n}\n\nvoid MainContentComponent::resized()\n{\n  player.setBounds (0, 0, getWidth(), getHeight());\n}\n```", "```cpp\npublic Component, public ChangeListener\n```", "```cpp\n//[UserMethods]-- You can add your own custom methods...\nenum TransportState {\n  Stopped,\n  Starting,\n  Playing,\n  Pausing,\n  Paused,\n  Stopping\n};\nvoid changeState (TransportState newState);\nvoid changeListenerCallback (ChangeBroadcaster* source); \n//[/UserMethods]\n```", "```cpp\n//[UserVariables]   -- You can add your own custom variables...\nAudioDeviceManager deviceManager;\nAudioFormatManager formatManager;\nScopedPointer<AudioFormatReaderSource> readerSource;\nAudioTransportSource transportSource;\nAudioSourcePlayer sourcePlayer;\nTransportState state;\n //[/UserVariables]\n```", "```cpp\nplayButton->setEnabled (false);\nstopButton->setEnabled (false);\n```", "```cpp\nformatManager.registerBasicFormats();\n```", "```cpp\nsourcePlayer.setSource (&transportSource);\ndeviceManager.addAudioCallback (&sourcePlayer);\ndeviceManager.initialise (0, 2, nullptr, true);\n```", "```cpp\ndeviceManager.addChangeListener (this);\ntransportSource.addChangeListener (this); \nstate = Stopped;\n```", "```cpp\n//[UserButtonCode_openButton] -- add your button handler...\nFileChooser chooser (\"Select a Wave file to play...\",\n                     File::nonexistent,\n                     \"*.wav\");\n\nif (chooser.browseForFileToOpen()) {\n  File file (chooser.getResult());\n  readerSource = new AudioFormatReaderSource(formatManager.createReaderFor (file), true);\n  transportSource.setSource (readerSource);\n  playButton->setEnabled (true);\n} \n//[/UserButtonCode_openButton]\n```", "```cpp\n//[UserButtonCode_playButton] -- add your button handler...\nif ((Stopped == state) || (Paused == state))\n  changeState (Starting);\nelse if (Playing == state)\n  changeState (Pausing); \n//[/UserButtonCode_playButton]\n```", "```cpp\n//[UserButtonCode_stopButton] -- add your button handler...\nif (Paused == state)\n  changeState (Stopped);\nelse\n  changeState (Stopping); \n//[/UserButtonCode_stopButton]\n```", "```cpp\n//[UserButtonCode_settingsButton] -- add your button handler...\nbool showMidiInputOptions = false;\nbool showMidiOutputSelector = false;\nbool showChannelsAsStereoPairs = true;\nbool hideAdvancedOptions = false;\n\nAudioDeviceSelectorComponent settings (deviceManager,\n                                       0, 0, 1, 2,\n                                       showMidiInputOptions,\n                                       showMidiOutputSelector,\n                                       showChannelsAsStereoPairs,\n                                       hideAdvancedOptions);\nsettings.setSize (500, 400);\n\nDialogWindow::showModalDialog(String (\"Audio Settings\"),\n                            &settings,\n                            TopLevelWindow::getTopLevelWindow (0),\n                            Colours::white,\n                            true); //[/UserButtonCode_settingsButton]\n```", "```cpp\n//[MiscUserCode] You can add your own definitions...\nvoid MediaPlayer::changeListenerCallback (ChangeBroadcaster* src)\n{\n  if (&deviceManager == src) {\n    AudioDeviceManager::AudioDeviceSetup setup;\n    deviceManager.getAudioDeviceSetup (setup);\n\n    if (setup.outputChannels.isZero())\n      sourcePlayer.setSource (nullptr);\n    else\n      sourcePlayer.setSource (&transportSource);\n  } else if (&transportSource == src) {\n    if (transportSource.isPlaying()) {\n      changeState (Playing);\n    } else {\n      if ((Stopping == state) || (Playing == state))\n        changeState (Stopped);\n      else if (Pausing == state)\n        changeState (Paused);\n    }\n  }\n} \n//[/MiscUserCode]\n```", "```cpp\nvoid MediaPlayer::changeState (TransportState newState)\n{\n  if (state != newState) {\n    state = newState;\n    switch (state) {\n      case Stopped:\n        playButton->setButtonText (\"Play\");\n        stopButton->setButtonText (\"Stop\");\n        stopButton->setEnabled (false);\n        transportSource.setPosition (0.0);\n        break;\n      case Starting:\n        transportSource.start();\n        break;\n      case Playing:\n        playButton->setButtonText (\"Pause\");\n        stopButton->setButtonText (\"Stop\");\n        stopButton->setEnabled (true);\n        break;\n      case Pausing:\n        transportSource.stop();\n        break;\n      case Paused:\n        playButton->setButtonText (\"Resume\");\n        stopButton->setButtonText (\"Return to Zero\");\n        break;\n      case Stopping:\n        transportSource.stop();\n        break;\n    }\n  }\n}\n```", "```cpp\n#ifndef __MAINCOMPONENT_H__\n#define __MAINCOMPONENT_H__\n\n#include \"../JuceLibraryCode/JuceHeader.h\"\n#include \"EmbeddedImage.h\"\n\nclass MainContentComponent   : public Component\n{\npublic:\n  MainContentComponent();\n  void resized();\n\nprivate:\n EmbeddedImage embeddedImage;\n};\n#endif\n```", "```cpp\n#include \"MainComponent.h\"\n\nMainContentComponent::MainContentComponent()\n{\n  addAndMakeVisible (&embeddedImage);\n  setSize (embeddedImage.getWidth(),embeddedImage.getHeight());\n}\n\nvoid MainContentComponent::resized()\n{\n  embeddedImage.setBounds (0, 0, getWidth(), getHeight());\n}\n```", "```cpp\n//[Constructor] You can add your own custom stuff here...\nMemoryInputStream stream (sample_png, sample_pngSize, false);\nimage->setImage (ImageFileFormat::loadFrom (stream));\n//[/Constructor]\n```"]