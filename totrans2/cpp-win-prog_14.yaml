- en: Chapter 14. Dialogs, Controls, and Page Setup
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第14章。对话框、控件和页面设置
- en: 'In this chapter, we look into the implementation of the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下内容的实现：
- en: '**Custom dialogs**: The `Dialog` class is intended to be inherited by subclasses
    and equipped with controls.'
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自定义对话框**：`Dialog`类旨在被子类继承并配备控件。'
- en: '**Controls**: The `Control` class and its subclasses. There are controls for
    edit fields, check boxes, radio buttons, list boxes, and combo boxes.'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控件**：`Control`类及其子类。有用于编辑字段、复选框、单选按钮、列表框和组合框的控件。'
- en: '**Converters**: Between strings and other values. For instance, when the user
    inputs text that represents a numerical value, it is possible to add a converter
    that converts the text to a value, or gives an error message if the text does
    not hold a valid value.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**转换器**：在字符串和其他值之间。例如，当用户输入代表数值的文本时，可以添加一个转换器将文本转换为值，或者如果文本不包含有效值，则显示错误消息。'
- en: '**Page Setup**: Where we extend the `Dialog` class. The dialog is used when
    setting page settings for a document of the `StandardDocument` class. It handles
    information for headers, footers, and margins.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**页面设置**：在这里我们扩展`Dialog`类。当设置`StandardDocument`类的文档页面设置时使用对话框。它处理有关页眉、页脚和边距的信息。'
- en: Custom dialogs
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义对话框
- en: The `Dialog` class handles a set of **controls**, which are added to the dialog
    by the `AddControl` method. For a subclass of the `Dialog` class, refer to `PageSetupDialog`
    in the last section of this chapter. The Dialog class provides a modal dialog,
    which means that all other windows in the application become disabled until the
    dialog is closed.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`Dialog`类处理一组**控件**，这些控件通过`AddControl`方法添加到对话框中。对于`Dialog`类的子类，请参考本章最后部分的`PageSetupDialog`。`Dialog`类提供了一个模态对话框，这意味着在对话框关闭之前，应用程序中的所有其他窗口都将被禁用。'
- en: The user may navigate between controls with the ***Tab*** key and between radio
    buttons in the same group with the arrow keys. They can also use mnemonics to
    access controls.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以使用***Tab***键在控件之间导航，使用箭头键在同一个组中的单选按钮之间导航。他们还可以使用快捷键来访问控件。
- en: '**Dialog.h**'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**Dialog.h**'
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `dialogMap` field is used by `DialogProc` to look up the dialog receiving
    the messages:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`dialogMap`字段由`DialogProc`用于查找接收消息的对话框：'
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `Dialog` class is a subclass of `Window` even though it calls the default
    `Window` constructor, which does not call the Win32 API function `CreateWindowEx`.
    Instead, `DoModal` collects information about the dialog and its controls and
    calls the Win32 API function `DialogBoxIndirectParam`:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管`Dialog`类调用了默认的`Window`构造函数，该构造函数不调用Win32 API函数`CreateWindowEx`，但`Dialog`类仍然是`Window`的子类。`DoModal`收集有关对话框及其控件的信息，并调用Win32
    API函数`DialogBoxIndirectParam`：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As the name implies, `DoModal` disables its parent window for as long as the
    dialog is visible. That is, until the user closes the dialog:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名所示，`DoModal`在其父窗口可见期间禁用其父窗口。也就是说，直到用户关闭对话框：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The destructor deletes all controls, which implies that a subclass to `Dialog`
    should add dynamically allocated controls to the dialog without deleting them:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 析构函数删除所有控件，这意味着`Dialog`的子类应该在对话框中动态分配控件而不删除它们：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `AddControl` method assigns an identity number to the control and adds it
    to `idMap`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`AddControl`方法为控件分配一个身份号码并将其添加到`idMap`。'
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `OnSize` function is called each time the user changes the size of the dialog,
    it iterates through the controls and adjusts their size so that they keep their
    size relative to the size of the dialog client area.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 每当用户更改对话框的大小时，都会调用`OnSize`函数，它会遍历控件并调整它们的大小，以便它们保持相对于对话框客户端区域的大小。
- en: '[PRE6]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: When the user presses the ***Return*** key `OnReturn` is called, and when they
    press the ***Esc*** key `OnEscape` is called. Their default behavior is to close
    the dialog and return control to `DoModal` with 1 and 0 as the return code; 1
    is interpreted as `true` and 0 as `false`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户按下***回车***键时，会调用`OnReturn`，而当他们按下***Esc***键时，会调用`OnEscape`。它们的默认行为是关闭对话框并将控制权返回给`DoModal`，返回码为1和0；1被解释为`true`，0被解释为`false`。
- en: '[PRE7]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `OnControlInit` method is intended to be overridden by subclasses and is
    called when the dialog is being initialized (when it receives the `WM_INITDIALOG`
    message).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnControlInit`方法旨在被子类覆盖，并在对话框初始化时（当它接收`WM_INITDIALOG`消息时）被调用。'
- en: '[PRE8]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `TryClose` method is intended to be overridden by subclasses and its default
    behavior is to return `true`. The `OnClose` method is called when the user tries
    to close the dialog, and its default behavior is to call `TryClose` and close
    the dialog if it returns `true`, in which case `OnDestroy` is also called:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`TryClose`方法旨在被子类覆盖，其默认行为是返回`true`。当用户尝试关闭对话框时，会调用`OnClose`方法，其默认行为是调用`TryClose`，如果返回`true`则关闭对话框，在这种情况下也会调用`OnDestroy`：'
- en: '[PRE9]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Each control is assigned an identity number when added to the dialog, which
    is mapped to a pointer to the control in `idMap`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 每个控件在添加到对话框时都会分配一个标识符，该标识符映射到`idMap`中控制器的指针：
- en: '[PRE10]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The dialog has a header text, top-left position, font, regular style, and extended
    style, which are stored by the constructor and used by `DoModal` in the `DialogBoxIndirectParam`
    call. However, the size of the dialog is not a constructor parameter; instead,
    the size is based on the control dimensions:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 对话框有一个标题文本、左上角位置、字体、常规样式和扩展样式，这些由构造函数存储，并在`DialogBoxIndirectParam`调用中由`DoModal`使用。然而，对话框的大小不是构造函数参数；相反，大小基于控件尺寸：
- en: '[PRE11]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The `leftMargin`, `maxWidth`, `topMargin`, and `maxHeight` fields are used
    when calculating the size of the dialog. The idea is that its size will be adjusted
    so that the left and right margins as well as the top and bottom margins for the
    closest control are equal:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算对话框大小时，使用`leftMargin`、`maxWidth`、`topMargin`和`maxHeight`字段。其思路是调整大小，使左右边距以及最接近的控件的上边距和下边距相等：
- en: '[PRE12]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The first control is not assigned the identity number of 0, since it will cause
    confusion when handling messages if the control with identity 0 is a push button.
    Instead, we initialize `currentId` with 1000, and decrease its value with each
    new control. It is necessary to decrease the value in order for the ***Tab***
    key to work correctly in the dialog:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个控件没有分配0的标识符，因为这会导致在处理消息时产生混淆，如果具有标识符0的控件是按钮。相反，我们用1000初始化`currentId`，并且随着每个新控件的增加而减少其值。减少值是为了使对话框中的***Tab***键能够正确工作：
- en: '[PRE13]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'When the dialog is initialized (by receiving the `WM_INITDIALOG` message),
    its size is stored in `originalClientSize` to be used by `OnSize` when calculating
    the size of the controls:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当对话框初始化（通过接收`WM_INITDIALOG`消息）时，其大小被存储在`originalClientSize`中，以便在`OnSize`计算控件大小时使用：
- en: '[PRE14]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `DialogProc` method is called every time the dialog receives a message.
    Unlike `WindowProc`, it will return `TRUE` if the message has been handled and
    does not need further processing. Moreover, it will not call `DefWindowProc` at
    the end; instead it will return `FALSE` if the message has not been handled:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 每次对话框收到消息时都会调用`DialogProc`方法。与`WindowProc`不同，如果消息已被处理且不需要进一步处理，它将返回`TRUE`。此外，它不会在末尾调用`DefWindowProc`；相反，如果消息未被处理，它将返回`FALSE`：
- en: '[PRE15]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '**Dialog.cpp**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**Dialog.cpp**'
- en: '[PRE16]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The default dialog font is set to 12-point Times New Roman.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 默认对话框字体设置为12点Times New Roman。
- en: '[PRE17]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The constructor calls the `Window` constructor, which sets the parent window
    pointer and does nothing else. That is, it does not call the Win32 API function
    `CreateWindowEx`. The `header`, `topLeft`, `style`, `extendedStyle`, and `font`
    fields are stored to be used by `DoModal`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数调用`Window`构造函数，它设置父窗口指针并执行其他操作。也就是说，它不会调用Win32 API函数`CreateWindowEx`。`header`、`topLeft`、`style`、`extendedStyle`和`font`字段被存储起来，以便在`DoModal`中使用：
- en: '[PRE18]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The `DoModal` function makes the dialog enter the modal state. That is, its
    parent window becomes disabled until the dialog is destroyed. But, it first loads
    information to `infoList`. The `AddValue` method is a template method of the `InfoList`
    class and adds values of different types to the list:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`DoModal`函数使对话框进入模态状态。也就是说，其父窗口在对话框被销毁之前将变为禁用状态。但是，它首先将信息加载到`infoList`中。`AddValue`方法是`InfoList`类的模板方法，并将不同类型的值添加到列表中：'
- en: '[PRE19]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'First, we need to add the value `1` in order to set the version of the dialog
    template we want to work with:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要添加值`1`，以便设置我们想要工作的对话框模板版本：
- en: '[PRE20]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The `0xFFFF` value indicates that we want to work with the extended dialog
    template:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`0xFFFF`值表示我们想要使用扩展对话框模板：'
- en: '[PRE21]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The next word is intended for a help identity; however, we do not use it so
    we just set it to 0:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个单词是为了帮助标识符；然而，我们不使用它，所以我们将其设置为0：
- en: '[PRE22]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Then comes the extended and regular style. Besides the style sent to the constructor,
    we set the dialog to have a caption, a system menu, a modal frame, and a font.
    Due to the `DS_SETFONT` flag, we will later add information about the dialog font:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是扩展和常规样式。除了发送给构造函数的样式外，我们还设置对话框具有标题、系统菜单、模态框架和字体。由于`DS_SETFONT`标志，我们将在稍后添加有关对话框字体信息：
- en: '[PRE23]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The next value is the number of controls in the dialog, which is given by the
    size of `idMap`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个值是对话框中控件的数量，由`idMap`的大小给出：
- en: '[PRE24]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The top-left position is given by the `topLeft` field:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 顶部左边的位置由`topLeft`字段给出：
- en: '[PRE25]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The size of the client area of the dialog is set by `maxWidth`, `leftMargin`,
    `maxHeight`, and `topMargin`, which has been calculated in `AddControl`. The width
    of the client area is the maximum width of the control set plus its left margin.
    In this way, we adjust the dialog to hold the controls with equal left and right
    margins as well as top and bottom margins to the closest control:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 对话框客户端区域的大小由`maxWidth`、`leftMargin`、`maxHeight`和`topMargin`设置，这些已在`AddControl`中计算。客户端区域的宽度是控件集的最大宽度加上其左边距。这样，我们调整对话框以容纳具有相等左右边距以及上下边距的控件：
- en: '[PRE26]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The next two zeros indicate that we do not want to use a menu and that we use
    the default dialog `Windows` class:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的两个零表示我们不希望使用菜单，并且我们使用默认的对话框`Windows`类：
- en: '[PRE27]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Then, we set the header of the dialog. The `AddString` method is an `InfoList`
    template method that adds the string with a terminating 0 to the information list:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们设置对话框的标题。`AddString`方法是一个`InfoList`模板方法，它将带有终止符0的字符串添加到信息列表：
- en: '[PRE28]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Finally, we set the font of the dialog. We extract the `LOGFONT` structure
    of the `Font` class and extract its size (`lfHeight`), whether it is bold (`lfWeight`)
    or italics, its character set (which is 0 since we do not use it), and the font
    name:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们设置对话框的字体。我们从`Font`类的`LOGFONT`结构中提取其大小（`lfHeight`）、是否加粗（`lfWeight`）或斜体，其字符集（由于我们不使用它，所以为0）和字体名称：
- en: '[PRE29]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'When the dialog information has been added to the information list, we call
    `AddControlInfo` for each control in order for the control information to be added
    to the list:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当对话框信息已添加到信息列表中时，我们为每个控件调用`AddControlInfo`，以便将控件信息添加到列表：
- en: '[PRE30]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'When the list has been fully loaded, we allocate a global buffer and load it
    with the list. The `ToBuffer` method copies the list into the buffer:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当列表已完全加载时，我们分配一个全局缓冲区并将其加载到列表中。`ToBuffer`方法将列表复制到缓冲区：
- en: '[PRE31]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We need the handle to the parent window, if present, and then we create the
    dialog by calling the Win32 API function `DialogBoxIndirectParam`, which will
    not return until the user closes the dialog. The last parameter is a pointer to
    the `Dialog` object that will be sent with the `WM_INITDIALOG` message. The return
    value stored in `result` is the second parameter to an `EndDialog` call:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存在，我们需要父窗口的句柄，然后我们通过调用Win32 API函数`DialogBoxIndirectParam`创建对话框，该函数将在用户关闭对话框之前不返回。最后一个参数是`Dialog`对象的指针，它将与`WM_INITDIALOG`消息一起发送。存储在`result`中的返回值是`EndDialog`调用的第二个参数：
- en: '[PRE32]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We return `true` if the result value does not equal 0:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果结果值不等于0，我们返回`true`：
- en: '[PRE33]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'If the global buffer allocation does not succeed, we return `false`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果全局缓冲区分配失败，我们返回`false`：
- en: '[PRE34]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The destructor iterates through `idMap` and deletes each control of the dialog:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 析构函数遍历`idMap`并删除对话框中的每个控件：
- en: '[PRE35]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The `AddControl` method adds a control to the dialog. If it is the first control
    to be added (`idMap` is empty), `leftMargin` and `topMargin` are set to the top-left
    corner of the control, and `maxWidth` and `maxHeight` are set to the top-left
    corner plus the control width or height. However, if it is not, the first control
    we need to compare is its top-left corner and size, with the current values, in
    order to find the margins and maximum size of the control set:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`AddControl`方法将控件添加到对话框。如果是第一个要添加的控件（`idMap`为空），则将`leftMargin`和`topMargin`设置为控件的左上角，并将`maxWidth`和`maxHeight`设置为左上角加上控件的宽度或高度。但是，如果不是，我们需要比较的第一个控件是其左上角和大小，与当前值，以找到控件集的边距和最大大小：'
- en: '[PRE36]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The identity number of the control is set to `currentId`, which is returned
    and decreased:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 控件的标识号设置为`currentId`，然后返回并递减：
- en: '[PRE37]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The `OnSize` method compares the new size of the client area with its original
    size. The ratio between them is stored in `factorPair`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnSize`方法比较客户端区域的新大小与其原始大小。它们之间的比率存储在`factorPair`中：'
- en: '[PRE38]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The controls of `idMap` are iterated and the original size of each control is
    multiplied with `factorPair`, the ratio between the new and original client area
    size. In this way, the control will keep their sizes relative to the size of the
    dialog client area when the user changes the dialog size.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`idMap`的控件被迭代，每个控件的原始大小乘以`factorPair`，这是新客户端区域大小与原始客户端区域大小的比率。这样，当用户改变对话框大小时，控件将保持它们相对于对话框客户端区域大小的相对大小。'
- en: '[PRE39]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The `OnReturn` method is called when the user presses the ***Return*** key,
    `OnEscape` is called when they press the ***Esc*** key, and `OnClose` is called
    when they close the dialog. The default behavior is to call `TryClose` and, if
    it returns `true`, call the Win32 API function `EndDialog`, which causes the `DialogBoxIndirectParam`
    call in `DoModal` to return the integer value given as the second parameter to
    `EndDialog`:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户按下***Return***键时调用`OnReturn`方法，当用户按下***Esc***键时调用`OnEscape`，当用户关闭对话框时调用`OnClose`。默认行为是调用`TryClose`，如果它返回`true`，则调用Win32
    API函数`EndDialog`，这将导致`DoModal`中的`DialogBoxIndirectParam`调用返回`EndDialog`的第二个参数给出的整数值：
- en: '[PRE40]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The `DialogProc` method is called each time the dialog receives a message.
    The first parameter is a handle to the dialog, which is mapped to a `Dialog` pointer
    by `dialogMap`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 每次对话框收到消息时调用`DialogProc`方法。第一个参数是对话框的句柄，通过`dialogMap`映射到`Dialog`指针：
- en: '[PRE41]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The `WM_INITDIALOG` case is called when the dialog is created, but before it
    becomes visible. When the dialog was created by the `DialogBoxIndirectParam` method,
    the last parameter was a pointer to the encapsulating `Dialog` object. That pointer
    is given in the `longParam` parameter, it is translated into a pointer to `Dialog`,
    and added to `dialogMap`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当对话框创建时调用`WM_INITDIALOG`情况，但在它变得可见之前。当对话框通过`DialogBoxIndirectParam`方法创建时，最后一个参数是指向封装的`Dialog`对象的指针。该指针在`longParam`参数中给出，它被转换为指向`Dialog`的指针，并添加到`dialogMap`中：
- en: '[PRE42]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The Win32 API window handle of the dialog is assigned to `dialogHandle`, the
    original size of the client area is calculated and stored in `originalClientSize`,
    and `OnDialogInit` is called:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 将对话框的Win32 API窗口句柄分配给`dialogHandle`，计算并存储客户端区域的原始大小在`originalClientSize`中，并调用`OnDialogInit`：
- en: '[PRE43]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'For each control in the dialog, its window handle is set by calling the Win32
    API function `GetDlgItem`, which takes the dialog window handle and the control
    identity number, set by `AddControl`. Similar to the original client size of the
    dialog, the original size and position of the controls are also stored. Finally,
    `OnControlInit` is called for each control:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 对于对话框中的每个控件，通过调用Win32 API函数`GetDlgItem`设置其窗口句柄，该函数接受对话框窗口句柄和由`AddControl`设置的控件身份号码。类似于对话框的原始客户端大小，控件的原始大小和位置也被存储。最后，对每个控件调用`OnControlInit`：
- en: '[PRE44]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Since the message is handled, `TRUE` is returned:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 消息处理完毕后，返回`TRUE`：
- en: '[PRE45]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The `WM_SIZE` case is sent to the dialog each time its size has been changed.
    The width and height are stored in the lower and upper word of the `longParam`
    parameter. The `OnSize` method is called in order to handle the message:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 每次对话框的大小发生变化时，都会向对话框发送`WM_SIZE`情况。宽度和高度存储在`longParam`参数的低位和高位字中。调用`OnSize`方法以处理该消息：
- en: '[PRE46]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The `WM_CLOSE` case is called when the user tries to close the dialog. The
    `OnClose` method is called to handle the message, which may or may not close the
    dialog:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户尝试关闭对话框时调用`WM_CLOSE`情况。调用`OnClose`方法来处理消息，该消息可能会也可能不会关闭对话框：
- en: '[PRE47]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The `WM_DESTROY` case is called when the dialog is being destroyed. Unlike
    `WM_CLOSE`, there is no way to prevent the dialog from being destroyed. Since
    `WM_DESTROY` is the last message sent to the dialog, the dialog is removed from
    `dialogMap`:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当对话框正在被销毁时调用`WM_DESTROY`情况。与`WM_CLOSE`不同，无法阻止对话框被销毁。由于`WM_DESTROY`是发送到对话框的最后一个消息，对话框从`dialogMap`中移除：
- en: '[PRE48]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'The `WM_COMMAND` case is sent to the dialog when the user has performed some
    action with one of the controls. In cases where the action involves a control,
    its identity number is stored in the lower word of `wordParam`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户使用其中一个控件执行某些操作时，将发送`WM_COMMAND`消息到对话框。在涉及控件的行动中，其身份号码存储在`wordParam`的低位字中：
- en: '[PRE49]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'If the identity number is `IDOK` or `IDCANCEL`, the user has pressed the ***Return***
    or ***Esc*** key:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果身份号码是`IDOK`或`IDCANCEL`，则用户按下了***Return***或***Esc***键：
- en: '[PRE50]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'If the identity number is not `IDOK` or `IDCANCEL`, we look up the control
    with `idMap` and the notification code in the higher word of `wordParam`. The
    notification code may have the same value as `IDOK` or `IDCANCEL`, which is why
    we use this somewhat cumbersome construction to handle the code:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果身份号码不是`IDOK`或`IDCANCEL`，我们使用`idMap`和`wordParam`的高位字中的通知代码查找控件。通知代码可能具有与`IDOK`或`IDCANCEL`相同的值，这就是为什么我们使用这种有些繁琐的结构来处理代码的原因：
- en: '[PRE51]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'When a control gains or loses input focus, `OnGainFocus` or `OnLoseFocus` is
    called; when they change the input text of a text field, `OnChange` is called;
    when they change the selection of a combo box, list box, or multiple list box,
    `OnSelect` is called; and when they click on a push button, checkbox, or radio
    button, `OnClick` is called:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 当控件获得或失去输入焦点时，调用`OnGainFocus`或`OnLoseFocus`；当它们更改文本字段的输入文本时，调用`OnChange`；当它们更改组合框、列表框或多个列表框的选择时，调用`OnSelect`；当它们点击按钮、复选框或单选按钮时，调用`OnClick`：
- en: '[PRE52]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'When the command message has been handled, there is no need to further process
    it. Therefore, we return `true`:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 当命令消息已被处理时，无需进一步处理。因此，我们返回`true`：
- en: '[PRE53]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'If the message has not been handled, we returns `false` in order for the message
    to be further processed by the Windows system:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果消息未被处理，我们返回`false`以便消息可以被Windows系统进一步处理：
- en: '[PRE54]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Controls
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控件
- en: 'Here is the Small Windows control hierarchy:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是小型窗口控件层次结构：
- en: '![Controls](img/B05475_14_01.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![控件](img/B05475_14_01.jpg)'
- en: '**Control.h**'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**Control.h**'
- en: '[PRE55]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The constructor sends the parent window pointer to the `Window` constructer
    and stores the other values until it is added to the dialog information list by
    `AddControlInfo`:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数将父窗口指针发送到`Window`构造函数，并将其他值存储起来，直到通过`AddControlInfo`将其添加到对话框信息列表中：
- en: '[PRE56]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The following methods are intended to be overridden by subclasses and are by
    default empty:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 以下方法旨在由子类重写，并且默认为空：
- en: '[PRE57]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The rectangle holding the original size and position is set by `Dialog` when
    it receives the `MW_INITDIALOG` message:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 持有原始大小和位置的矩形由`Dialog`在接收到`MW_INITDIALOG`消息时设置：
- en: '[PRE58]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Each control has an identity number, given by `AddControl` in `Dialog`. It
    has a regular style; the extended style is always 0\. The style, top-left corner
    and control size, class name, and control text are added to the information list
    when `DoModal` in `Dialog` calls `AddControlInfo`:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 每个控件都有一个身份号码，由`Dialog`中的`AddControl`提供。它有一个常规样式；扩展样式始终为0。样式、左上角和控件大小、类名以及控件文本在`Dialog`中的`DoModal`调用`AddControlInfo`时添加到信息列表中：
- en: '[PRE59]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '**Control.cpp**'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**Control.cpp**'
- en: '[PRE60]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'The constructor calls `AddControl` for its parent dialog to add the control
    to the dialog and to receive the control''s identity number:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数为其父对话框调用`AddControl`以将控件添加到对话框并接收控件的身份号码：
- en: '[PRE61]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'The `AddControlInfo` method, which is called by `DoModal` in `Dialog`, adds
    the information of the control. First, we need to align the information list with
    the size of a double word (4 bytes):'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`AddControlInfo`方法，由`Dialog`中的`DoModal`调用，添加控件信息。首先，我们需要将信息列表与双字大小（4字节）对齐：'
- en: '[PRE62]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'The help identity and extended style are always 0:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 帮助身份和扩展样式始终为0：
- en: '[PRE63]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'The style is extended with the child and visible flags, indicating that the
    control is a child window of the dialog and that it becomes visible when the dialog
    becomes visible:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 样式通过子窗口和可见标志扩展，表示控件是对话框的子窗口，并且当对话框可见时它变得可见：
- en: '[PRE64]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'The top-left corner and size of the control are given in **dialog** **units**,
    which are based on the dialog font and are translated into device units:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 控件的上角和大小以**对话框**单位给出，这些单位基于对话框字体，并转换为设备单位：
- en: '[PRE65]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'The control identity number is given in order to identify the control when
    the user performs some action, such as clicking on a button or selecting a list
    item:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 控制身份号码用于在用户执行某些操作时识别控制，例如点击按钮或选择列表项：
- en: '[PRE66]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Each control has a class name, which is button, list, combo, static (label),
    or edit (text field), and text, which is the text of a text field or the label
    of a box or button, but is ignored for list and combo boxes:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 每个控件都有一个类名，它是按钮、列表、组合、静态（标签）或编辑（文本字段），以及文本，它是文本字段的文本或框或按钮的标签，但对于列表和组合框则忽略：
- en: '[PRE67]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Finally, it is possible to send extra data with the control. However, we pass
    on that opportunity and just send 0:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，可以与控件一起发送额外数据。然而，我们放弃了这个机会，只发送了0：
- en: '[PRE68]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: The button controls
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 按钮控件
- en: 'There are four kinds of button controls: group box, push button, checkbox,
    and radio button. The checkbox and radio button can be checked; the `Check` and
    `IsChecked` methods are defined in `ButtonControl`.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 有四种按钮控件：组合框、按钮、复选框和单选按钮。复选框和单选按钮可以被选中；`Check`和`IsChecked`方法在`ButtonControl`中定义。
- en: '**ButtonControl.h**'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '**ButtonControl.h**'
- en: '[PRE69]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '**ButtonControl.cpp**'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '**ButtonControl.cpp**'
- en: '[PRE70]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'We send the `BM_SETCHECK` message to a check, a checkbox, or a radio button
    and the `BM_GETCHECK` message to find out whether it is checked:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们向复选框、复选框或单选按钮发送`BM_SETCHECK`消息，以确定它是否被选中，并通过发送`BM_GETCHECK`消息来查找它是否被选中：
- en: '[PRE71]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: A group box is quite simple; it encapsulates a set of other controls and has
    no functionality besides its graphical appearance.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 组合框非常简单；它封装了一组其他控件，除了其图形外观外没有其他功能。
- en: '**GroupBox.h**'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '**GroupBox.h**'
- en: '[PRE72]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '**GroupBox.cpp**'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**GroupBox.cpp**'
- en: '[PRE73]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: The `clickListener` constructor parameter is a listener called when the user
    clicks on the button. The `OnClick` method is overridden from `Control`.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`clickListener`构造函数参数是一个当用户点击按钮时被调用的监听器。`OnClick`方法覆盖了`Control`类。'
- en: '**PushButton.h**'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '**PushButton.h**'
- en: '[PRE74]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '**PushButton.cpp**'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '**PushButton.cpp**'
- en: '[PRE75]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: A checkbox works independently of other checkboxes. The `checkPtr` parameter
    is a pointer to a `Boolean` value set to `true` or `false`, depending on whether
    the checkbox is checked.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 复选框独立于其他复选框工作。`checkPtr`参数是一个指向`Boolean`值的指针，该值设置为`true`或`false`，具体取决于复选框是否被选中。
- en: '**CheckBox.h**'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '**CheckBox.h**'
- en: '[PRE76]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '**CheckBox.cpp**'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '**CheckBox.cpp**'
- en: '[PRE77]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'The `OnControlInit` method is overridden from `Control` and checks the box
    in accordance with the value that `checkPtr` points at. `OnClick` is also overridden
    from `Control` and sets the value to `true` if the box is checked:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnControlInit`方法覆盖了`Control`类，并根据`checkPtr`指向的值来检查复选框：`OnClick`方法也覆盖了`Control`类，如果复选框被选中，则将值设置为`true`：'
- en: '[PRE78]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: A radio button is intended to work in a group with other radio buttons, with
    exactly one button checked at the time. When the user checks one button in the
    group, it gets checked and the previously checked box get unchecked. Each radio
    button in the group has a zero-based index; `indexPtr` points to an integer value,
    common to all radio buttons in the group, which is set to the index of the button
    currently checked.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 单选按钮旨在与组中的其他单选按钮一起工作，每次恰好选中一个按钮。当用户在组中选中一个按钮时，它会被选中，而之前选中的按钮会被取消选中。组中的每个单选按钮都有一个基于零的索引；`indexPtr`指向一个整数值，该值对所有组中的单选按钮都是共同的，并将其设置为当前选中的按钮的索引。
- en: '**RadioButton.h**'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '**RadioButton.h**'
- en: '[PRE79]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '**RadioButton.cpp**'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '**RadioButton.cpp**'
- en: '[PRE80]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'The constructor sends the group and tab stop styles to the `Control` constructor
    if the index is 0, since the first button is the first button in the group. All
    buttons in the group will not be accessed by the ***Tab*** key, but only the first
    button. The `group` style indicates that the button starts a group and all additional
    radio buttons are considered members of the group, until another button with the
    `group` style is added:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如果索引为0，则构造函数将组和标签停止样式发送到`Control`构造函数，因为第一个按钮是组中的第一个按钮。组中的所有按钮都不会通过`***Tab***`键访问，而只有第一个按钮。`group`样式表示按钮开始一个组，所有附加的单选按钮都被视为组的成员，直到添加了具有`group`样式的另一个按钮：
- en: '[PRE81]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'The radio button is checked if it has the same index as the value that `indexPtr`
    points at, and the value is set to the index of the button that is checked:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如果单选按钮的索引与`indexPtr`指向的值相同，则该单选按钮被选中，并将值设置为已选按钮的索引：
- en: '[PRE82]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: List controls
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列表控件
- en: 'There are two kinds of list box: single list box and multiple list box. The
    single list box selects exactly one item at a time, and the multiple list box
    selects one or several (or none at all) items at the same time. The constructor
    takes a string list that is loaded to the list box by `LoadList`.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 列表框有两种类型：单选列表框和复选列表框。单选列表框一次只能选择一个项目，而复选列表框可以同时选择一个或多个（或全部不选）项目。构造函数接受一个字符串列表，该列表通过`LoadList`加载到列表框中。
- en: '**ListControl.h**'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '**ListControl.h**'
- en: '[PRE83]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '**ListControl.cpp**'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '**ListControl.cpp**'
- en: '[PRE84]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'The `LoadList` method adds the item text in `textList` to the (single or multiple)
    list box by calling the `LB_ADDSTRING` message:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`LoadList`方法通过调用`LB_ADDSTRING`消息将`textList`中的项目文本添加到（单选或复选）列表框中：'
- en: '[PRE85]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: A (single) list box is a box holding a list of visible items, as opposed to
    a combo box where the items are dropped down. If necessary, the list can be scrolled.
    Only one item can be selected at a time, as opposed to the multiple list. Similar
    to the radio box group, the constructor takes the `indexPtr` pointer pointing
    at an integer value holding the zero-based index of the currently selected item.
    Moreover, the constructor also takes a string list that is loaded into the list
    box by `LoadList` in `ListControl`.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 一个（单个）列表框是一个包含可见项的框，与下拉列表的组合框相对。如果需要，列表可以滚动。一次只能选择一个项，与多列表不同。类似于单选框组，构造函数接受一个指向整数值的`indexPtr`指针，该值表示当前选中项的零基于索引。此外，构造函数还接受一个字符串列表，该列表通过`ListControl`中的`LoadList`加载到列表框中。
- en: '**ListBox.h**'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '**ListBox.h**'
- en: '[PRE86]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '**ListBox.cpp**'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '**ListBox.cpp**'
- en: '[PRE87]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'We send the `LB_SETCURSEL` message to select an item and `LB_GETCURSEL` to
    get the index of the currently selected item:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发送`LB_SETCURSEL`消息来选择一个项，并使用`LB_GETCURSEL`来获取当前选中项的索引：
- en: '[PRE88]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: A multiple list box is a list box where the user can select more than one value,
    or no value at all; therefore, the `indexSetPtr` parameter is a pointer to a set
    of indexes rather than a pointer to one index.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 多列表框是一个用户可以选择多个值或根本不选择值的列表框；因此，`indexSetPtr`参数是指向索引集的指针，而不是指向单个索引的指针。
- en: '**MultipleListBox.h**'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '**MultipleListBox.h**'
- en: '[PRE89]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '**MultipleListBox.cpp**'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '**MultipleListBox.cpp**'
- en: '[PRE90]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'When the user selects 0 or several values in the multiple list, we iterate
    through the indexes and send the `LB_SETSEL` message for each index with a `Boolean`
    value indicating whether its item will be set:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在多列表中选择0个或多个值时，我们遍历索引并为每个索引发送带有`Boolean`值的`LB_SETSEL`消息，该值指示其项是否将被设置：
- en: '[PRE91]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'When checking which values are currently selected, we send the `LB_GETSEL`
    message for each index and add the indexes of the selected items to the set, which
    is then returned:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 当检查哪些值当前被选中时，我们为每个索引发送`LB_GETSEL`消息，并将选中项的索引添加到集合中，然后返回该集合：
- en: '[PRE92]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Combo box
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组合框
- en: A combo box is a drop-down list of items, from which the user can select one.
    The functionality of a combo box is equal to a list box, only their graphical
    appearance differs. Moreover, the functionality is also equivalent to a radio
    button group. Similar to `ListBox` and `Radiobutton`, the constructor takes the
    `indexPtr` parameter, which is a pointer to an integer value, holding the zero-based
    index of the item currently selected.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 组合框是一个下拉列表项，用户可以从中选择一个。组合框的功能与列表框相同，只是它们的图形外观不同。此外，功能也等同于单选按钮组。类似于`ListBox`和`Radiobutton`，构造函数接受一个`indexPtr`参数，它是一个指向整数值的指针，表示当前选中项的零基于索引。
- en: '**ComboBox.h**'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '**ComboBox.h**'
- en: '[PRE93]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '**ComboBox.cpp**'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '**ComboBox.cpp**'
- en: '[PRE94]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'The `CB_ADDSTRING` message loads the combo box with items, `CB_SETCURSEL` sets
    the selected item, and `CB_GETCURSEL` returns the index of the selected item:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`CB_ADDSTRING`消息将项加载到组合框中，`CB_SETCURSEL`设置选中项，`CB_GETCURSEL`返回选中项的索引：'
- en: '[PRE95]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Label
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标签
- en: A label is a displayed text that often serves as a prompt to a text field; it
    has no functionality besides its graphical appearance.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 标签是一种显示的文本，通常用作文本框的提示；除了其图形外观外，它没有其他功能。
- en: '**Label.h**'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '**Label.h**'
- en: '[PRE96]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '**Label.cpp**'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '**Label.cpp**'
- en: '[PRE97]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: The TextField class
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`TextField`类'
- en: The `TextField` class is a template for a text field; it takes the type of the
    value stored in the text field; an integer base for octal, decimal, or hexadecimal
    integers (ignored for non-integer types); and a converter of the `Converter` class
    in the next section, which converts between values and text. The constructor's
    `valuePtr` parameter is a pointer to the value to be edited in the text field.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '`TextField`类是一个文本框的模板；它接受存储在文本框中的值的类型；八进制、十进制或十六进制整数的整数基数（对于非整型类型忽略）；以及下一节中`Converter`类的转换器，它可以在值和文本之间进行转换。构造函数的`valuePtr`参数是指向要编辑的值的指针。'
- en: '**TextField.h**'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '**TextField.h**'
- en: '[PRE98]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'The `OnControlInit` method is called when the text field has been created.
    It converts the value to the text displayed in the text field. The `OnLoseFocus`
    method is called when the user leaves the text field and converts its text to
    a value of the template type if the text is valid. If it is not valid, the text
    field is set to the text converted from the latest valid value:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 当文本框被创建时，会调用`OnControlInit`方法。它将值转换为文本框中显示的文本。当用户离开文本框时，会调用`OnLoseFocus`方法，如果文本有效，则将其文本转换为模板类型的值。如果文本无效，文本框将设置为从最新有效值转换的文本：
- en: '[PRE99]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'The Win32 API function `GetWindowText` gets the text of the text field and
    `SetWindowText` sets its text. We need to convert from a zero-terminated character
    pointer string to a `String` object by calling the `String` constructor, and from
    a `String` object to a zero-terminated character pointer by calling the `c_str`
    method of the `String` class:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: Win32 API函数`GetWindowText`获取文本字段的文本，`SetWindowText`设置其文本。我们需要通过调用`String`构造函数将零终止的字符指针字符串转换为`String`对象，并通过调用`String`类的`c_str`方法将`String`对象转换为零终止的字符指针：
- en: '[PRE100]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'When the text field has been initialized, the `ValueToText` method of the `Converter`
    class is called to convert the value pointed to by `valuePtr` to the text displayed
    in the text field:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 当文本字段已初始化时，`Converter`类的`ValueToText`方法被调用，以将`valuePtr`指向的值转换为文本字段中显示的文本：
- en: '[PRE101]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'When the text field loses input focus, the text is evaluated by the `Check`
    method in order to decide whether it is suitable to be converted to a value. If
    it is suitable, the `ValueToText` method is called to do the actual converting,
    and then the text is loaded to the text field:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 当文本字段失去输入焦点时，文本将通过`Check`方法进行评估，以确定它是否适合转换为值。如果适合，则调用`ValueToText`方法进行实际转换，然后文本被加载到文本字段中：
- en: '[PRE102]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Converters
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 转换器
- en: The `Converter` class is a template class intended to be specialized by type.
    Its task is to convert values between the template type and the `String` objects.
    The `Check` variable takes a string and returns `true` if it holds a valid value,
    `TextToValue` converts a text to a value, and `ValueToText` converts a value to
    a text.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '`Converter`类是一个模板类，旨在通过类型进行特殊化。其任务是转换模板类型和`String`对象之间的值。`Check`变量接受一个字符串，如果它包含一个有效的值则返回`true`，`TextToValue`将文本转换为值，而`ValueToText`将值转换为文本。'
- en: '**Converter.h**'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '**Converter.h**'
- en: '[PRE103]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Signed integers
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有符号整数
- en: Small Windows comes equipped with a set of predefined converters, which are
    specializations of `Converter`. One of these handles signed integer values of
    the type `int`.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 小窗口自带一组预定义的转换器，这些是`Converter`的特殊化。其中之一处理类型为`int`的有符号整数值。
- en: '**Converter.h**'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '**Converter.h**'
- en: '[PRE104]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '**Converter.cpp**'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '**Converter.cpp**'
- en: '[PRE105]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'When checking whether the given string holds a valid integer value, we create
    an `IStringStream` object (the generic version of the Standard C++ class `istringstream`,
    with `TCHAR` instead of `char`) initialized with the trimmed text (initial and
    terminating white spaces are removed). Then, we read the text into an integer
    variable with the base parameter and test whether the stream has reached end-of-file
    (`eof`). If it has, all characters of the text have been read, which implies that
    the text holds a valid integer value and `true` is returned:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 当检查给定的字符串是否包含有效的整数值时，我们创建一个初始化为修剪后的文本（移除了初始和终止的空白字符）的`IStringStream`对象（`istringstream`的泛型版本，使用`TCHAR`代替`char`）。然后，我们使用基数参数将文本读取到整数变量中，并测试流是否已到达文件末尾（`eof`）。如果已到达，则意味着已读取文本的所有字符，这表明文本包含一个有效的整数值，并返回`true`：
- en: '[PRE106]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'The conversion from a string to an integer is similar to `Check`, which we
    covered earlier, with the difference that we return the integer value assuming
    that `Check` has confirmed that the text holds a valid integer value:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串转换为整数的转换与之前我们提到的`Check`函数类似，区别在于我们返回整数值，假设`Check`已经确认文本包含一个有效的整数值：
- en: '[PRE107]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'When converting an integer to a string, we use the `OStringStream` method (the
    generic version of `ostringstream`), write the value to the stream, and return
    the stream converted to a string by `str`:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 当将整数转换为字符串时，我们使用`OStringStream`方法（`ostringstream`的泛型版本），将值写入流，并通过`str`将流转换为字符串返回：
- en: '[PRE108]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: Unsigned integers
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 无符号整数
- en: 'Unsigned integers work in the same way as signed integers, the only difference
    is that `int` has been replaced by `unsigned` `int`:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 无符号整数与有符号整数的工作方式相同，唯一的区别是`int`被替换为`unsigned int`：
- en: '**Converter.h**'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '**Converter.h**'
- en: '[PRE109]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '**Converter.cpp**'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '**Converter.cpp**'
- en: '[PRE110]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: Double values
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 双精度值
- en: Double values ignore the base parameter and do not use the `setbase` manipulator;
    otherwise, the test and conversions work in the same way as in integer cases.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 双精度值忽略基数参数，不使用`setbase`操作符；否则，测试和转换与整数情况相同。
- en: '**Converter.h**'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '**Converter.h**'
- en: '[PRE111]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '**Converter.cpp**'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '**Converter.cpp**'
- en: '[PRE112]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: Strings
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串
- en: The string case is trivial, since a string can always be converted to another
    string.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串情况很简单，因为字符串总是可以转换为另一个字符串。
- en: '**Converter.h**'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '**Converter.h**'
- en: '[PRE113]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: Rational numbers
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有理数
- en: A **rational** **number** is a number that can be expressed as a fraction of
    two integers, where the second integer is non-zero. We do not really use rational
    numbers in this section or complex numbers in the next section, in our applications.
    They are included only to demonstrate the converter, and they are implemented
    in the Appendix at the end of the book.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 一个**有理数**是一个可以表示为两个整数分数的数，其中第二个整数不为零。在我们的应用中，我们实际上并不使用有理数或下一节中的复数。它们仅用于演示转换器，并在书的附录中实现。
- en: '**Converter.h**'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '**Converter.h**'
- en: '[PRE114]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: When checking whether the text holds a valid rational number, we simply create
    an object of the `Rational` class. If the constructor accepts the text without
    throwing a `NotaRationalNumber` exception, we return `true`. If it throws the
    exception, the text is not acceptable and we return `false`.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 当检查文本是否包含一个有效的有理数时，我们简单地创建一个`Rational`类的对象。如果构造函数接受文本而不抛出`NotaRationalNumber`异常，我们返回`true`。如果它抛出异常，则文本不可接受，我们返回`false`。
- en: '**Converter.cpp**'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '**Converter.cpp**'
- en: '[PRE115]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'When converting a string to a rational number, we create and return a `Rational`
    object, assuming that `Check` has confirmed that the text holds a valid rational
    number:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 当将字符串转换为有理数时，我们创建并返回一个`Rational`对象，假设`Check`已经确认该文本包含一个有效的有理数：
- en: '[PRE116]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: When converting a rational number to a string we call the `String` conversion
    operator of the `Rational` class.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 当将有理数转换为字符串时，我们调用`Rational`类的`String`转换操作符。
- en: '[PRE117]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: Complex numbers
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复数
- en: A complex number is the sum *z = x + yi* of a real number *x* and a real number
    *y* multiplied by the **imaginary** **unit** *i*, which is the solution of the
    equation *x* ² + 1 = 0\. The specialization of `Converter` with regard to the
    `Complex` class is similar to the `Rational` specialization.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 一个复数是实数*x*和实数*y*乘以**虚数单位***i*的和，*i*是方程*x*² + 1 = 0的解。`Converter`类关于`Complex`类的特殊化与`Rational`特殊化类似。
- en: '**Converter.h**'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '**Converter.h**'
- en: '[PRE118]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '**Converter.cpp**'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '**Converter.cpp**'
- en: '[PRE119]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: Page setup
  id: totrans-283
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 页面设置
- en: The final section describes page setup functionality, divided into the `PageSetupInfo`
    class, which handles page setup information, the `PageSetupDialog`, which is a
    subclass of `Dialog` displayed for the user to input page setup information, and
    the `Template` function, which translates code input by the user in the **Page
    Setup** dialog to actual values.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个部分描述了页面设置功能，分为处理页面设置信息的`PageSetupInfo`类、用于用户输入页面设置信息的`PageSetupDialog`子类，以及将用户在**页面设置**对话框中输入的代码转换为实际值的`Template`函数。
- en: Page setup information
  id: totrans-285
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 页面设置信息
- en: 'The `PageSetupInfo` class holds information about the page: portrait or landscape
    orientation, the margins, the text and font of the header and footer, whether
    the header and footer will be present on the first page, and whether the pages
    will be enclosed by a frame.'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '`PageSetupInfo`类包含有关页面的信息：纵向或横向方向、页边距、页眉和页脚的文本和字体、页眉和页脚是否出现在第一页上，以及页面是否被框架包围。'
- en: '**PageSetupInfo.h**'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '**PageSetupInfo.h**'
- en: '[PRE120]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '**PageSetupInfo.cpp**'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '**PageSetupInfo.cpp**'
- en: '[PRE121]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: The default constructor initializes the default member values by calling `PageSetupInfo`.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 默认构造函数通过调用`PageSetupInfo`初始化默认成员值。
- en: '[PRE122]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: The default constructor and assignment operator copy the member values.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 默认构造函数和赋值操作符复制成员值。
- en: '[PRE123]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: 'The equality operators compare all the fields:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 等价操作符比较所有字段：
- en: '[PRE124]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: 'Page setup information can be written to, or read from, a stream:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 页面设置信息可以写入或从流中读取：
- en: '[PRE125]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: The Page Setup dialog
  id: totrans-299
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 页面设置对话框
- en: The `PageSetupDialog` class is a part of Small Windows and is displayed by the
    `StandardDocument` framework when the user selects the **Page Setup** menu item.
    The word processor earlier in this book gives an example. The `PageSetupDialog`
    class is a subclass of `Dialog` and provides the user with the possibility to
    input the information in `PageSetupInfo`. Note that the header and footer text
    can be annotated with blocks of code, explained in the next section.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '`PageSetupDialog`类是Small Windows的一部分，当用户选择**页面设置**菜单项时，由`StandardDocument`框架显示。本书前面的文字处理程序给出了一个示例。`PageSetupDialog`类是`Dialog`的子类，并允许用户在`PageSetupInfo`中输入信息。请注意，页眉和页脚的文本可以用下一节中解释的代码块进行注释。'
- en: '![The Page Setup dialog](img/B05475_14_02.jpg)'
  id: totrans-301
  prefs: []
  type: TYPE_IMG
  zh: '![页面设置对话框](img/B05475_14_02.jpg)'
- en: '**PageSetupDialog.h**'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '**PageSetupDialog.h**'
- en: '[PRE126]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: 'Each push button has its own listener:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 每个按钮都有一个自己的监听器：
- en: '[PRE127]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: 'The page setup information is pointed at by `infoPtr`, which is modified when
    the user changes the state of the controls. There is also `backupInfo`, in case
    the user cancels the dialog:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 页面设置信息由 `infoPtr` 指向，当用户更改控件的状态时，它将被修改。还有一个 `backupInfo`，以防用户取消对话框：
- en: '[PRE128]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '**PageSetupDialog.cpp**'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '**PageSetupDialog.cpp**'
- en: '[PRE129]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: 'The constructor sets the pointer `infoPtr` to point at the page setup information.
    The information is also stored in `backupInfo`, which will be used if the user
    cancels the dialog; refer to `OnCancel`:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数将指针 `infoPtr` 设置为指向页面设置信息。该信息也存储在 `backupInfo` 中，如果用户取消对话框，将使用它；请参阅 `OnCancel`：
- en: '[PRE130]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: 'Each control gives the **Page Setup** dialog (`this`) as its parent dialog,
    which means that the controls will be deleted by the dialog''s destructor. This
    implies that we do need to keep track of the controls in order to delete them
    manually. Actually, we will not delete them manually as it would result in dangling
    pointers:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 每个控件都将 **页面设置** 对话框（`this`）作为其父对话框，这意味着控件将由对话框的析构函数删除。这表明我们确实需要跟踪控件以便手动删除。实际上，我们不会手动删除它们，因为这会导致悬空指针：
- en: '[PRE131]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: 'Note that we give a pointer as a reference for the value of the top margin.
    This value will be modified when the user changes the value:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们提供一个引用作为顶部边距值的指针。当用户更改值时，此值将被修改：
- en: '[PRE132]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: 'Similar to the `TextField` case, we give a pointer to a reference of the `HeaderFirst`
    value, which is a `Boolean` value. It will be modified when the user checks the
    box:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `TextField` 的情况类似，我们提供一个指向 `HeaderFirst` 值的引用的指针，这是一个 `Boolean` 值。当用户勾选复选框时，它将被修改：
- en: '[PRE133]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: 'The `OnHeaderFont` listener is called when the user presses the button:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户按下按钮时，会调用 `OnHeaderFont` 监听器：
- en: '[PRE134]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: 'The `OnHeaderFont` and `OnFooterFont` methods display font dialogs:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnHeaderFont` 和 `OnFooterFont` 方法显示字体对话框：'
- en: '[PRE135]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: 'The `OnOk` and `OnCancel` methods terminate the dialog. The `OnCancel` method
    also copies the backup information that was stored by the constructor at the beginning,
    since no new information will be returned when the user cancels the dialog:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnOk` 和 `OnCancel` 方法用于终止对话框。`OnCancel` 方法还会复制构造函数在开始时存储的备份信息，因为当用户取消对话框时，不会返回任何新信息：'
- en: '[PRE136]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: The Template function
  id: totrans-324
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模板函数
- en: 'When the user inputs text in the header and footer fields in the **Page Setup**
    dialog, they can insert code in the text, which needs to be translated into valid
    values. The code is shown in the following table:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在 **页面设置** 对话框中的页眉和页脚字段中输入文本时，他们可以在文本中插入代码，这些代码需要翻译成有效的值。代码如下表所示：
- en: '| **Code** | **Description** | **Example** |'
  id: totrans-326
  prefs: []
  type: TYPE_TB
  zh: '| **代码** | **描述** | **示例** |'
- en: '| %P | Path with suffix | `C:\Test\Test.wrd` |'
  id: totrans-327
  prefs: []
  type: TYPE_TB
  zh: '| %P | 带后缀的路径 | `C:\Test\Test.wrd` |'
- en: '| %p | Path without suffix | `C:\Test\Test` |'
  id: totrans-328
  prefs: []
  type: TYPE_TB
  zh: '| %p | 无后缀的路径 | `C:\Test\Test` |'
- en: '| %F | File with suffix | `Test.wrd` |'
  id: totrans-329
  prefs: []
  type: TYPE_TB
  zh: '| %F | 带后缀的文件 | `Test.wrd` |'
- en: '| %f | File without suffix | Test |'
  id: totrans-330
  prefs: []
  type: TYPE_TB
  zh: '| %f | 无后缀的文件 | Test |'
- en: '| %N | Total number of pages | 7 |'
  id: totrans-331
  prefs: []
  type: TYPE_TB
  zh: '| %N | 总页数 | 7 |'
- en: '| %n | Current page | 5 |'
  id: totrans-332
  prefs: []
  type: TYPE_TB
  zh: '| %n | 当前页 | 5 |'
- en: '| %c | Current Copy | 3 |'
  id: totrans-333
  prefs: []
  type: TYPE_TB
  zh: '| %c | 当前副本 | 3 |'
- en: '| %D | Date with full month | January 1, 2016 |'
  id: totrans-334
  prefs: []
  type: TYPE_TB
  zh: '| %D | 带完整月份的日期 | 2016年1月1日 |'
- en: '| %d | Date with abbreviated month | Jan 1, 2016 |'
  id: totrans-335
  prefs: []
  type: TYPE_TB
  zh: '| %d | 带缩写月份的日期 | 2016年1月1日 |'
- en: '| %T | Time with seconds | 07:08:09 |'
  id: totrans-336
  prefs: []
  type: TYPE_TB
  zh: '| %T | 带秒的时间 | 07:08:09 |'
- en: '| %t | Time without seconds | 07:08 |'
  id: totrans-337
  prefs: []
  type: TYPE_TB
  zh: '| %t | 不带秒的时间 | 07:08 |'
- en: '| %% | Percent character | % |'
  id: totrans-338
  prefs: []
  type: TYPE_TB
  zh: '| %% | 百分号字符 | % |'
- en: The task of the `Template` function is to replace the code with valid values.
    It takes the `templateText` string with template code and returns the text with
    the code replaced by valid values. It needs the current copy and page number as
    well as the total number of pages.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '`Template` 函数的任务是用有效值替换代码。它接受带有模板代码的 `templateText` 字符串，并返回用有效值替换代码的文本。它还需要当前副本和页码以及总页数。'
- en: 'For instance, the `Page %n out of %N` text can be translated to **Page 3 out
    of 5** and `File: %F, date: %d` can be translated to **File: Text.txt, date: Dec
    31, 2016**.'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '例如，`页 %n / 总页数 %N` 文本可以翻译为 **页 3 / 5**，而 `文件: %F，日期: %d` 可以翻译为 **文件: Text.txt，日期:
    2016年12月31日**。'
- en: '**Template.h**'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '**Template.h**'
- en: '[PRE137]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '**Template.cpp**'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '**Template.cpp**'
- en: '[PRE138]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: 'We start by replacing the `c`, `n`, and `N` code with the number of copies
    and the current and total pages. The numerical values are translated into strings
    by `to_String`:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先用副本数和当前页以及总页数替换 `c`、`n` 和 `N` 代码。数值通过 `to_String` 转换为字符串：
- en: '[PRE139]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: 'The file of the path is its text after the last backslash (**\**) and the suffix
    is its text after the last dot (**.**). If there is no backslash, the file is
    the same as the path; if there is no dot, the path and file without the suffix
    is the same as the file and path with the suffix:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 路径的文件是其最后一个反斜杠（**\**）之后的文本，后缀是其最后一个点（**.**）之后的文本。如果没有反斜杠，文件与路径相同；如果没有点，没有后缀的路径和文件与带有后缀的文件和路径相同：
- en: '[PRE140]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: 'The current date and time are obtained by calling the Standard C functions
    `time` and `localtime_s`:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 当前日期和时间是通过调用标准C函数`time`和`localtime_s`获得的：
- en: '[PRE141]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: 'The current time with and without seconds and the current date with whole and
    abbreviated month names are written to string output streams. The `setw` manipulator
    makes sure that two characters are always written, `setfill` fills with zeros
    if necessary, and `ios::right` writes the value in a right-aligned manner:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 当前时间（带或不带秒）和当前日期（带完整月份名称和缩写月份名称）被写入字符串输出流。`setw`操纵符确保总是写入两个字符，`setfill`在必要时用零填充，而`ios::right`以右对齐的方式写入值：
- en: '[PRE142]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: 'Finally, we need to replace each instance of `%%` with `%`:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要将每个`%%`实例替换为`%`：
- en: '[PRE143]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: Summary
  id: totrans-355
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked into custom dialogs, controls, converters, and the
    Page Setup dialog. The only remaining part of the book is the implementation of
    the rational and complex classes.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了自定义对话框、控件、转换器和页面设置对话框。本书剩下的部分是理性类和复数类的实现：
