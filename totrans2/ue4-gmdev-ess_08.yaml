- en: Chapter 8. Unreal Motion Graphics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Unreal Motion Graphics** (**UMG**) is a User Interface (UI) authoring tool
    that is used to create in game **Heads up Display** (**HUDs**), Main Menu, and
    other UI elements. They are created using a special blueprint called **Widget
    Blueprint** , which contains various predefined widgets that you can use to construct
    your interface. Let''s take a look at UMG now.'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to create UMG Widgets and assign one to
    our character to display his health. You will also learn how to create floating
    health bars.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get started, start Unreal Engine 4 and create a new project based on Third
    Person Template.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we are going to have a HUD with a health bar, let''s add a new health
    variable to our Third Person Character Blueprint. Open up the **ThirdPersonCharacter**
    Blueprint in the `ThirdPersonBP/Blueprints` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a project](img/B03950_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Inside our character Blueprint, create a new variable called **Health** and
    follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Set the variable type to `float` and give it a default value of 100\. The next
    step is to create a **Pure** function that shows the percentage of the total health
    of the player.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside your Character Blueprint, create a new function (for example, **GetHealthPercentage**)
    and open it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the function graph, get your health variable and divide it by the default
    value of health. By doing so, we will get the percentage of our player health.
    To get the default value of any variable in your class, just right-click in graph
    and search for **Get Class Defaults**. This node will return all the default values
    of the variables you created.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, create a new output for this function (float type) and connect the result
    (divide node) to this output. This function will now return the percentage of
    your player health. For example, if your player's health is 42, then dividing
    it by 100 (default health value) will return 0.42\. We can use this information
    for our progress bar in HUD as well as the floating health bar.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The resulting Blueprint function should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a project](img/B03950_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that it is very important to set the output name to **ReturnValue**.
  prefs: []
  type: TYPE_NORMAL
- en: We will now create a UMG Widget and make use of this function to display the
    player's health.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the HUD Widget
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a new Widget Blueprint:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on Content Browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select **Widget Blueprint** under the **User Interface** section:![Creating
    the HUD Widget](img/B03950_08_03.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you select that, a new **Widget Blueprint** will be placed in Content Browser
    and it prompts you to enter a new name. For this example, I named it `MyUMG_HUD`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Double-click on `MyUMG_HUD` to open it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the HUD Widget](img/B03950_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Widget Blueprint User Interface
  prefs: []
  type: TYPE_NORMAL
- en: 'This is Widget Blueprint. This is where you create the UI for your game. Let''s
    take a closer look at Widget Blueprint UI:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Toolbar**: This is the common toolbar that lets you **Compile**, **Save**,
    **Play**, and **Debug** your graph.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Editor Mode**: This lets you switch between the **Designer** mode and the
    **Graph** mode.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Visual Designer**: This is the main area where you drag and drop all the
    widgets to create your UI as it appears in the game.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Palette**: This is the list of widgets that you can drag and drop into **Visual
    Designer**. This will also list any custom widgets you have created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hierarchy**: This displays the structure of this widget. You can drag and
    drop widgets in this too.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Animation List**: This lets you create new **Animation Tracks**, which you
    can use to animate various properties of widgets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Animation Track Editor**: After creating a new Animation, you can select
    that Animation and create key frames here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since we will be using this as our player HUD, let's create a progress bar that
    shows the player's health.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the health bar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From the **Palette** window, drag and drop the **Progress Bar** widget on to
    the **Visual Designer**. Once placed on the **Visual Designer**, you can resize
    it to any size you want. You can also place it anywhere, but, for this example,
    I decided to keep it at the bottom-left corner of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: When you select the **Progress Bar** widget, you will see all the properties
    that you can edit in **Details Panel** including the name of your **Progress Bar**.
    For this example, I have changed the name of our progress bar to HealthBar. The
    **Progress Bar** widget offers a variety of settings that you can change including
    the look and feel.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot is from the health bar that I have just placed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the health bar](img/B03950_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s take a quick look at some of the common settings that you will change:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Anchors**: These define the location of the widget and maintain it for varying
    screen sizes. By default, there are 16 anchor positions and, typically, one of
    these is sufficient for most needs. But there are times where you have to adjust
    the Anchor position manually. For example, if your game has an inventory system
    where the player can dynamically resize the contents, then you need to tweak the
    Anchor position manually. For this example, we will set the Anchor position to
    the lower-left corner of the screen.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Position X**: This positions the widget on the *X Axis*. (horizontal).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Position Y**: This positions the widget on the *Y Axis*. (vertical).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Size X**: This scales the widget on the *X Axis*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Size Y**: This scales the widget on the *Y Axis*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Alignment**: This is the pivot point of the widget. Setting both **X** and
    **Y** to `0.0` will set the pivot point to the upper left corner and setting both
    to `1.0` will set the pivot point to the lower-right corner. You can use the alignment
    option with Anchors to precisely set a widget to the center of the screen. For
    example, you can set alignment (both **X** and **Y**) to `0.5` and Anchors to
    the center and set both position **X** and **Y** to `0.0`. This will bring your
    widget exactly to the center of the screen. This can be used for setting a crosshair.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Size to Content**: If enabled, this widget will ignore **Size X** and **Size
    Y** values and, instead, scale according to the Widget content. For example, if
    your widget is a **Text Block**, then it will scale automatically according to
    the size of the given text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ZOrder**: This defines the render priority for this widget. Higher priority
    widgets are rendered last, which makes them appear on top of other widgets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Style**: This defines the look and feel of this widget. Note that each widget
    has its own unique style settings (you can either use a **Texture** or **Material**
    to use as an image for your widget). If it''s a progress bar widget, then style
    category will let you change the progress bar fill image, background image, and
    marquee image. If it was a button, then you can change the image of the button
    based on the button state. For example, **Normal** state, **Hover** state, **Pressed**
    state, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Percent**: This fills the progress bar with the given value. It ranges from
    0-1\. In this example, we will use the **Health Percentage** of our character
    to drive this value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bar Fill Type**: This defines how the progress bar fills. For example, from
    left to right, right to left, from the center, and more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Is Marquee**: This enables the marquee animation progress bar. This means
    that the progress bar will show activity but does not indicate when it will stop.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fill Color and Opacity**: This defines the color and opacity for the fill
    image of the progress bar.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we know the **Progress Bar** settings, let's continue and assign the
    Health Percentage of our character to the health bar we created. To do that, first
    let's switch our **Editor** mode to **Graph** mode by clicking on the **Graph**
    button on the top-left corner of Widget Blueprint. Once you click, you will see
    the Blueprint graph editor for this widget.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the left side of the widget Blueprint, you will see the **My Blueprint**
    tab. As you have learned previously in the chapter on Blueprints, this is where
    you create your variables. So let''s create a new variable (I named it `MyCharacter`)
    and set the type for our **Third Person Character**. See the following screenshot
    for reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the health bar](img/B03950_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you create that, go back to the **Designer** mode and select your **Progress
    Bar**. In the **Details Panel**, you can see a **Bind** option near the **Percent**
    value. When you click on it, you will see a new dropdown menu that shows our newly
    created `MyCharacter` variable. Move your mouse over it and you will see the **GetPlayerHealthPercentage**
    function, which we created previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the health bar](img/B03950_08_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once you click on that, it will set the Health Percentage value from our character
    to the progress bar.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you don't see your character variable in the **Bind** dropdown, make sure
    you compiled the **Widget Blueprint**.
  prefs: []
  type: TYPE_NORMAL
- en: Assigning our HUD to Character
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have finished setting up the HUD, it is time we assign it to the
    character. Let's close **Widget Blueprint** for now and open **ThirdPersonCharacter
    Blueprint**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside our **Character Blueprint**, open the **Event Graph** and:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click and, from the resulting context menu, search for **Event BeginPlay**
    and select it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drag a wire from the execution pin of **Event BeginPlay** and release the mouse
    button. From the context menu, search for **Create Widget** and select it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the **Create Widget** node, select **MyUMG_HUD** in the class pin.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From the **Return Value** of the **Create Widget** node, drag a new wire and
    release the mouse button. From the context menu, search for **Set My Character**
    and select it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Right-click on the graph editor and search for `self` and select **Get a reference
    to self**. Connect this node to the **My Character** pin.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Again, drag a wire from the **Return Value** of the **Create Widget** node and
    search for **Add to Viewport**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connect the output execution pin of the **Set My Character** node to the input
    execution pin of **Add to Viewport**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The resulting graph should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Assigning our HUD to Character](img/B03950_08_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, if you play the game, you will see the health bar filled completely:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Assigning our HUD to Character](img/B03950_08_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If your health bar is still empty, make sure you set the output name of **GetHealthPercentage**
    to **ReturnValue**.
  prefs: []
  type: TYPE_NORMAL
- en: 'To test it, we can create a new function called **DecrementHealth** and create
    a graph like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Assigning our HUD to Character](img/B03950_08_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After that, drag and drop this function from your **My Blueprints** tab and
    connect it after the **Add to Viewport** node. Now, if you start playing, you
    will see the player health going down randomly.
  prefs: []
  type: TYPE_NORMAL
- en: Creating floating health bars
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will learn how to create a floating health bar above the
    character's head. Let's go back to **Content Browser** and create a new **Widget
    Blueprint** (for this example, I'll name it **MyFloatingHealthbar**) and open
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Designer** tab, you can see an option called **Fill Screen** at the
    top-right corner of the visual designer. Click on that and change it to **Custom**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating floating health bars](img/B03950_08_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The **Custom** mode will let you assign the width and height of this widget.
    Let''s set the width and height to 256 and 32\. Now, we will drag and drop a new
    Progress Bar into the visual designer and use the following settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating floating health bars](img/B03950_08_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Set the **Anchors** to the very last anchor (this is the Fill Anchor). Anchor
    helps the widget stay in its position with different screen sizes. This avoids
    the widget being cropped off the screen. In addition to the fill anchor, there
    are other preset anchors too, such as fill bottom left side, fill right side,
    fill bottom area, fill top area, top left, center, right corners, and more. Based
    on the position of your widget, you can select any Anchor you want and, in the
    game, the widget will be positioned relative to the Anchor position.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, since we set the anchor to fill, Position X and Y and Size
    X and Y will be replaced with **Offset Left**, **Top**, **Right**, and **Bottom**
    respectively. Change the **Offset Right** and **Bottom** to `0.0`. The Progress
    Bar will now be properly stretched to the width and height of the visual designer.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's create a new variable called **My Character** with the type set to
    your **ThirdPersonCharacter Blueprint** and bind the **Percent** value to your
    character's **GetHealthPercentage** function. This is the exact same step we performed
    for our HUD Widget.
  prefs: []
  type: TYPE_NORMAL
- en: 'After setting the percent value, let''s close this **Widget Blueprint** for
    now and open **ThirdPersonCharacter Blueprint**. Switch to the **Viewport** tab
    and click on **Add Component** in the **Components** tab and select **Widget Component**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating floating health bars](img/B03950_08_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once you select it, this widget component will be added to your Player Character.
    Select the newly added **Widget Component** and in **Details Panel**, set the
    **Draw Size** to the same size we used for our **MyFloatingHealthbar**, which
    was `256` and `32`. And then set the **Widget Class** to **MyFloatingHealthbar**
    class and set **Space** to **Screen**. Finally, move the **Widget** to your desired
    location. In this example, I've set it above the character's head.
  prefs: []
  type: TYPE_NORMAL
- en: 'For reference, here is the screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating floating health bars](img/B03950_08_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you play now, you will see the health bar floating on top of the player''s
    head but it will be empty. This is because we haven''t assigned the **My Character**
    value to our floating health bar. To make it work:'
  prefs: []
  type: TYPE_NORMAL
- en: Switch to the **Construction Script** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click anywhere on the **Construction Script** tab, search for **Get Widget**,
    and select it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag a new wire from the **Widget** node you just created, search for **Get
    User Widget Object**, and select it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag a new wire from **Get User Widget Object** Return Value pin, search for
    **Cast** to **MyFloatingHealthbar**, and select it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the output execution pin of **Construction Script** to this newly created
    **Cast** node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the output pin (such as **My Floating Healthbar**) drag a new wire and
    search for **Set My Character** and select it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the unnamed output execution pin of the **Cast** node to the **Set My
    Character** node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the graph editor, search for `self`, and select **Get a reference
    to self**. Connect this node to the **My Character** pin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'That''s it! Now if you press play, you will see your character''s health bar
    floating on top of your player''s head:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating floating health bars](img/B03950_08_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: UMG can be used to create a wide variety of UI effects. From here, you can extend
    this by adding a player portrait image next to your floating health bar or give
    a weapon to your character and show the ammo count for that weapon and more. You
    can also add the Widget component to other actors in your game (for example, a
    treasure chest) that shows information about that actor. Remember that laying
    out your UI in Visual Designer is only the beginning. To make your UI look good,
    you have to change the look and feel by changing the style of your widgets.
  prefs: []
  type: TYPE_NORMAL
