- en: Chapter 8. Unreal Motion Graphics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。Unreal运动图形
- en: '**Unreal Motion Graphics** (**UMG**) is a User Interface (UI) authoring tool
    that is used to create in game **Heads up Display** (**HUDs**), Main Menu, and
    other UI elements. They are created using a special blueprint called **Widget
    Blueprint** , which contains various predefined widgets that you can use to construct
    your interface. Let''s take a look at UMG now.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**Unreal运动图形**（**UMG**）是一个用户界面（UI）创作工具，用于创建游戏中的**抬头显示**（**HUD**）、主菜单和其他UI元素。它们使用一个名为**小部件蓝图**的特殊蓝图创建，其中包含各种预定义的小部件，您可以使用它们来构建您的界面。现在让我们看看UMG。'
- en: In this chapter, you will learn how to create UMG Widgets and assign one to
    our character to display his health. You will also learn how to create floating
    health bars.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何创建UMG小部件并将一个分配给我们的角色以显示其健康状态。您还将学习如何创建浮动健康条。
- en: Setting up a project
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置项目
- en: To get started, start Unreal Engine 4 and create a new project based on Third
    Person Template.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，启动Unreal Engine 4并基于第三人称模板创建一个新的项目。
- en: 'Since we are going to have a HUD with a health bar, let''s add a new health
    variable to our Third Person Character Blueprint. Open up the **ThirdPersonCharacter**
    Blueprint in the `ThirdPersonBP/Blueprints` folder:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将有一个带有健康条的HUD，让我们在我们的第三人称角色蓝图中添加一个新的健康变量。在`ThirdPersonBP/Blueprints`文件夹中打开**ThirdPersonCharacter**蓝图：
- en: '![Setting up a project](img/B03950_08_01.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![设置项目](img/B03950_08_01.jpg)'
- en: 'Inside our character Blueprint, create a new variable called **Health** and
    follow these steps:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的角色蓝图中创建一个名为**Health**的新变量，并按照以下步骤操作：
- en: Set the variable type to `float` and give it a default value of 100\. The next
    step is to create a **Pure** function that shows the percentage of the total health
    of the player.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将变量类型设置为`float`并为其提供一个默认值100。下一步是创建一个**纯**函数，该函数显示玩家总健康的百分比。
- en: Inside your Character Blueprint, create a new function (for example, **GetHealthPercentage**)
    and open it.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的角色蓝图中创建一个新的函数（例如，**GetHealthPercentage**）并打开它。
- en: In the function graph, get your health variable and divide it by the default
    value of health. By doing so, we will get the percentage of our player health.
    To get the default value of any variable in your class, just right-click in graph
    and search for **Get Class Defaults**. This node will return all the default values
    of the variables you created.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在函数图中，获取您的健康变量并将其除以健康默认值。通过这样做，我们将得到玩家健康的百分比。要获取您类中任何变量的默认值，只需在图中右键单击并搜索**获取类默认值**。此节点将返回您创建的所有变量的默认值。
- en: Now, create a new output for this function (float type) and connect the result
    (divide node) to this output. This function will now return the percentage of
    your player health. For example, if your player's health is 42, then dividing
    it by 100 (default health value) will return 0.42\. We can use this information
    for our progress bar in HUD as well as the floating health bar.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在，为这个函数创建一个新的输出（float类型）并将结果（除法节点）连接到这个输出。这个函数现在将返回玩家健康的百分比。例如，如果玩家的健康是42，那么除以100（默认健康值）将返回0.42。我们可以使用这个信息在我们的HUD进度条以及浮动健康条中。
- en: 'The resulting Blueprint function should look like this:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的蓝图函数应如下所示：
- en: '![Setting up a project](img/B03950_08_02.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![设置项目](img/B03950_08_02.jpg)'
- en: Note
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that it is very important to set the output name to **ReturnValue**.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，将输出名称设置为**ReturnValue**非常重要。
- en: We will now create a UMG Widget and make use of this function to display the
    player's health.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将创建一个UMG小部件并利用这个函数来显示玩家的健康状态。
- en: Creating the HUD Widget
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建HUD小部件
- en: 'To create a new Widget Blueprint:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的小部件蓝图：
- en: Right-click on Content Browser
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 右键点击内容浏览器
- en: Select **Widget Blueprint** under the **User Interface** section:![Creating
    the HUD Widget](img/B03950_08_03.jpg)
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**用户界面**部分下选择**小部件蓝图**：![创建HUD小部件](img/B03950_08_03.jpg)
- en: Once you select that, a new **Widget Blueprint** will be placed in Content Browser
    and it prompts you to enter a new name. For this example, I named it `MyUMG_HUD`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦选择，新的**小部件蓝图**将被放置在内容浏览器中，并提示您输入一个新名称。在这个例子中，我将其命名为`MyUMG_HUD`。
- en: 'Double-click on `MyUMG_HUD` to open it:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 双击`MyUMG_HUD`以打开它：
- en: '![Creating the HUD Widget](img/B03950_08_04.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![创建HUD小部件](img/B03950_08_04.jpg)'
- en: Widget Blueprint User Interface
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 小部件蓝图用户界面
- en: 'This is Widget Blueprint. This is where you create the UI for your game. Let''s
    take a closer look at Widget Blueprint UI:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是小部件蓝图。这是您创建游戏UI的地方。让我们更仔细地看看小部件蓝图UI：
- en: '**Toolbar**: This is the common toolbar that lets you **Compile**, **Save**,
    **Play**, and **Debug** your graph.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工具栏**：这是常见的工具栏，允许您**编译**、**保存**、**播放**和**调试**您的图形。'
- en: '**Editor Mode**: This lets you switch between the **Designer** mode and the
    **Graph** mode.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编辑模式**：这允许您在**设计器**模式和**图形**模式之间切换。'
- en: '**Visual Designer**: This is the main area where you drag and drop all the
    widgets to create your UI as it appears in the game.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视觉设计器**：这是主要区域，您可以将所有小部件拖放到此处以创建您的UI，就像它在游戏中出现的那样。'
- en: '**Palette**: This is the list of widgets that you can drag and drop into **Visual
    Designer**. This will also list any custom widgets you have created.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调色板**：这是您可以拖放到**视觉设计器**中的小部件列表。这还将列出您创建的任何自定义小部件。'
- en: '**Hierarchy**: This displays the structure of this widget. You can drag and
    drop widgets in this too.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**层次结构**：这显示了此小部件的结构。您也可以在此处拖放小部件。'
- en: '**Animation List**: This lets you create new **Animation Tracks**, which you
    can use to animate various properties of widgets.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动画列表**：这允许您创建新的**动画轨迹**，您可以使用它来动画化小部件的各种属性。'
- en: '**Animation Track Editor**: After creating a new Animation, you can select
    that Animation and create key frames here.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动画轨迹编辑器**：创建新的动画后，您可以选择该动画并在此处创建关键帧。'
- en: Since we will be using this as our player HUD, let's create a progress bar that
    shows the player's health.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将使用此作为我们的玩家HUD，让我们创建一个显示玩家健康的进度条。
- en: Creating the health bar
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建健康条
- en: From the **Palette** window, drag and drop the **Progress Bar** widget on to
    the **Visual Designer**. Once placed on the **Visual Designer**, you can resize
    it to any size you want. You can also place it anywhere, but, for this example,
    I decided to keep it at the bottom-left corner of the screen.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 从**调色板**窗口，将**进度条**小部件拖放到**视觉设计器**。一旦放置在**视觉设计器**上，您可以将其调整到任何大小。您也可以将其放置在任何位置，但在这个例子中，我决定将其保持在屏幕的左下角。
- en: When you select the **Progress Bar** widget, you will see all the properties
    that you can edit in **Details Panel** including the name of your **Progress Bar**.
    For this example, I have changed the name of our progress bar to HealthBar. The
    **Progress Bar** widget offers a variety of settings that you can change including
    the look and feel.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当您选择**进度条**小部件时，您将在**详细信息面板**中看到您可以编辑的所有属性，包括您**进度条**的名称。在这个例子中，我已经将我们的进度条名称更改为HealthBar。**进度条**小部件提供了一系列您可以更改的设置，包括外观和感觉。
- en: 'The following screenshot is from the health bar that I have just placed:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图是我刚刚放置的健康条：
- en: '![Creating the health bar](img/B03950_08_05.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![创建健康条](img/B03950_08_05.jpg)'
- en: 'Let''s take a quick look at some of the common settings that you will change:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速看一下您将更改的一些常见设置：
- en: '**Anchors**: These define the location of the widget and maintain it for varying
    screen sizes. By default, there are 16 anchor positions and, typically, one of
    these is sufficient for most needs. But there are times where you have to adjust
    the Anchor position manually. For example, if your game has an inventory system
    where the player can dynamically resize the contents, then you need to tweak the
    Anchor position manually. For this example, we will set the Anchor position to
    the lower-left corner of the screen.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**锚点**：这些定义了小部件的位置，并保持它在不同屏幕尺寸下的位置。默认情况下，有16个锚点位置，通常这些中的一个就足够满足大多数需求。但有时您必须手动调整锚点位置。例如，如果您的游戏有一个玩家可以动态调整内容的库存系统，那么您需要手动调整锚点位置。在这个例子中，我们将锚点位置设置为屏幕的左下角。'
- en: '**Position X**: This positions the widget on the *X Axis*. (horizontal).'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**位置 X**：这将在**X轴**上定位小部件。（水平）。'
- en: '**Position Y**: This positions the widget on the *Y Axis*. (vertical).'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**位置 Y**：这将在**Y轴**上定位小部件。（垂直）。'
- en: '**Size X**: This scales the widget on the *X Axis*.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**大小 X**：这会在**X轴**上缩放小部件。'
- en: '**Size Y**: This scales the widget on the *Y Axis*.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**大小 Y**：这会在**Y轴**上缩放小部件。'
- en: '**Alignment**: This is the pivot point of the widget. Setting both **X** and
    **Y** to `0.0` will set the pivot point to the upper left corner and setting both
    to `1.0` will set the pivot point to the lower-right corner. You can use the alignment
    option with Anchors to precisely set a widget to the center of the screen. For
    example, you can set alignment (both **X** and **Y**) to `0.5` and Anchors to
    the center and set both position **X** and **Y** to `0.0`. This will bring your
    widget exactly to the center of the screen. This can be used for setting a crosshair.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对齐**：这是小部件的支点。将**X**和**Y**都设置为`0.0`将支点设置为左上角，将两者都设置为`1.0`将支点设置为右下角。您可以使用对齐选项与锚点精确设置小部件到屏幕中心。例如，您可以将对齐（**X**和**Y**）设置为`0.5`并将锚点设置为中央，并将位置**X**和**Y**都设置为`0.0`。这将使您的组件正好位于屏幕中心。这可以用于设置十字准星。'
- en: '**Size to Content**: If enabled, this widget will ignore **Size X** and **Size
    Y** values and, instead, scale according to the Widget content. For example, if
    your widget is a **Text Block**, then it will scale automatically according to
    the size of the given text.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**大小到内容**：如果启用，此小部件将忽略**大小 X**和**大小 Y**值，而是根据小部件内容进行缩放。例如，如果您的 小部件是一个**文本块**，那么它将根据给定文本的大小自动缩放。'
- en: '**ZOrder**: This defines the render priority for this widget. Higher priority
    widgets are rendered last, which makes them appear on top of other widgets.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ZOrder**：这定义了此小部件的渲染优先级。优先级较高的组件最后渲染，这使得它们出现在其他组件之上。'
- en: '**Style**: This defines the look and feel of this widget. Note that each widget
    has its own unique style settings (you can either use a **Texture** or **Material**
    to use as an image for your widget). If it''s a progress bar widget, then style
    category will let you change the progress bar fill image, background image, and
    marquee image. If it was a button, then you can change the image of the button
    based on the button state. For example, **Normal** state, **Hover** state, **Pressed**
    state, and so on.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**样式**：这定义了此小部件的外观和感觉。请注意，每个小部件都有自己的独特样式设置（您可以使用**纹理**或**材质**作为小部件的图像）。如果它是一个进度条小部件，那么样式类别将允许您更改进度条填充图像、背景图像和跑马灯图像。如果它是一个按钮，那么您可以根据按钮状态更改按钮的图像。例如，**正常**状态、**悬停**状态、**按下**状态等。'
- en: '**Percent**: This fills the progress bar with the given value. It ranges from
    0-1\. In this example, we will use the **Health Percentage** of our character
    to drive this value.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**百分比**：这使用给定的值填充进度条。范围从0-1。在这个例子中，我们将使用我们角色的**健康百分比**来驱动这个值。'
- en: '**Bar Fill Type**: This defines how the progress bar fills. For example, from
    left to right, right to left, from the center, and more.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**填充类型**：这定义了进度条的填充方式。例如，从左到右、从右到左、从中心等。'
- en: '**Is Marquee**: This enables the marquee animation progress bar. This means
    that the progress bar will show activity but does not indicate when it will stop.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**是否跑马灯**：这启用了跑马灯动画进度条。这意味着进度条将显示活动，但不会指示何时停止。'
- en: '**Fill Color and Opacity**: This defines the color and opacity for the fill
    image of the progress bar.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**填充颜色和透明度**：这定义了进度条填充图像的颜色和透明度。'
- en: Now that we know the **Progress Bar** settings, let's continue and assign the
    Health Percentage of our character to the health bar we created. To do that, first
    let's switch our **Editor** mode to **Graph** mode by clicking on the **Graph**
    button on the top-left corner of Widget Blueprint. Once you click, you will see
    the Blueprint graph editor for this widget.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了**进度条**的设置，让我们继续并将我们角色的健康百分比分配给创建的健康条。为此，首先让我们将我们的**编辑器**模式切换到**图形**模式，方法是单击顶左角的**图形**按钮。一旦点击，您将看到此小部件的蓝图图形编辑器。
- en: 'On the left side of the widget Blueprint, you will see the **My Blueprint**
    tab. As you have learned previously in the chapter on Blueprints, this is where
    you create your variables. So let''s create a new variable (I named it `MyCharacter`)
    and set the type for our **Third Person Character**. See the following screenshot
    for reference:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在小部件蓝图的原型左侧，您将看到**我的蓝图**选项卡。正如您在蓝图章节中学到的，这是您创建变量的地方。所以让我们创建一个新的变量（我将其命名为`MyCharacter`）并设置我们的**第三人称角色**的类型。请参考以下截图：
- en: '![Creating the health bar](img/B03950_08_06.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![创建健康条](img/B03950_08_06.jpg)'
- en: 'Once you create that, go back to the **Designer** mode and select your **Progress
    Bar**. In the **Details Panel**, you can see a **Bind** option near the **Percent**
    value. When you click on it, you will see a new dropdown menu that shows our newly
    created `MyCharacter` variable. Move your mouse over it and you will see the **GetPlayerHealthPercentage**
    function, which we created previously:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 创建完成后，返回到**设计器**模式并选择你的**进度条**。在**详细信息面板**中，你可以看到**绑定**选项靠近**百分比**值。当你点击它时，你会看到一个新下拉菜单，显示我们刚刚创建的`MyCharacter`变量。将鼠标移到它上面，你会看到我们之前创建的**GetPlayerHealthPercentage**函数：
- en: '![Creating the health bar](img/B03950_08_07.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![创建健康条](img/B03950_08_07.jpg)'
- en: Once you click on that, it will set the Health Percentage value from our character
    to the progress bar.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦点击，它将从我们的角色设置健康百分比值到进度条。
- en: Note
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you don't see your character variable in the **Bind** dropdown, make sure
    you compiled the **Widget Blueprint**.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在**绑定**下拉菜单中看不到你的角色变量，请确保你已经编译了**小部件蓝图**。
- en: Assigning our HUD to Character
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将我们的HUD分配给角色
- en: Now that we have finished setting up the HUD, it is time we assign it to the
    character. Let's close **Widget Blueprint** for now and open **ThirdPersonCharacter
    Blueprint**.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了HUD的设置，是时候将它分配给角色了。让我们现在关闭**小部件蓝图**并打开**第三人称角色蓝图**。
- en: 'Inside our **Character Blueprint**, open the **Event Graph** and:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的**角色蓝图**中，打开**事件图**并：
- en: Right-click and, from the resulting context menu, search for **Event BeginPlay**
    and select it.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 右键单击，从出现的上下文菜单中搜索**Event BeginPlay**并选择它。
- en: Drag a wire from the execution pin of **Event BeginPlay** and release the mouse
    button. From the context menu, search for **Create Widget** and select it.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从**Event BeginPlay**的执行引脚拖动一条线并释放鼠标按钮。从上下文菜单中搜索**Create Widget**并选择它。
- en: In the **Create Widget** node, select **MyUMG_HUD** in the class pin.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**创建小部件**节点中，从类引脚中选择**MyUMG_HUD**。
- en: From the **Return Value** of the **Create Widget** node, drag a new wire and
    release the mouse button. From the context menu, search for **Set My Character**
    and select it.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从**创建小部件**节点的**返回值**拖动一条新线并释放鼠标按钮。从上下文菜单中搜索**Set My Character**并选择它。
- en: Right-click on the graph editor and search for `self` and select **Get a reference
    to self**. Connect this node to the **My Character** pin.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在图编辑器中右键单击并搜索`self`并选择**获取对self的引用**。将此节点连接到**My Character**引脚。
- en: Again, drag a wire from the **Return Value** of the **Create Widget** node and
    search for **Add to Viewport**.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 再次，从**创建小部件**节点的**返回值**拖动一条线并搜索**Add to Viewport**。
- en: Connect the output execution pin of the **Set My Character** node to the input
    execution pin of **Add to Viewport**.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**Set My Character**节点的输出执行引脚连接到**Add to Viewport**节点的输入执行引脚。
- en: 'The resulting graph should look like this:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 结果图应该看起来像这样：
- en: '![Assigning our HUD to Character](img/B03950_08_08.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![将我们的HUD分配给角色](img/B03950_08_08.jpg)'
- en: 'Now, if you play the game, you will see the health bar filled completely:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你开始玩游戏，你会看到健康条完全填满：
- en: '![Assigning our HUD to Character](img/B03950_08_09.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![将我们的HUD分配给角色](img/B03950_08_09.jpg)'
- en: Note
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If your health bar is still empty, make sure you set the output name of **GetHealthPercentage**
    to **ReturnValue**.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的健康条仍然是空的，请确保你已经将**GetHealthPercentage**的输出名称设置为**ReturnValue**。
- en: 'To test it, we can create a new function called **DecrementHealth** and create
    a graph like this:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试它，我们可以创建一个名为**DecrementHealth**的新函数并创建一个类似这样的图：
- en: '![Assigning our HUD to Character](img/B03950_08_10.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![将我们的HUD分配给角色](img/B03950_08_10.jpg)'
- en: After that, drag and drop this function from your **My Blueprints** tab and
    connect it after the **Add to Viewport** node. Now, if you start playing, you
    will see the player health going down randomly.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，从你的**我的蓝图**选项卡拖放此函数并将其连接到**Add to Viewport**节点之后。现在，如果你开始玩游戏，你会看到玩家健康值随机下降。
- en: Creating floating health bars
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建浮动健康条
- en: In this section, you will learn how to create a floating health bar above the
    character's head. Let's go back to **Content Browser** and create a new **Widget
    Blueprint** (for this example, I'll name it **MyFloatingHealthbar**) and open
    it.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将学习如何创建位于角色头顶上方的浮动健康条。让我们回到**内容浏览器**并创建一个新的**小部件蓝图**（例如，我将命名为**MyFloatingHealthbar**）并打开它。
- en: 'In the **Designer** tab, you can see an option called **Fill Screen** at the
    top-right corner of the visual designer. Click on that and change it to **Custom**:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在**设计器**选项卡中，你可以看到在视觉设计器的右上角有一个名为**填满屏幕**的选项。点击它并将它更改为**自定义**：
- en: '![Creating floating health bars](img/B03950_08_11.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![创建浮动健康条](img/B03950_08_11.jpg)'
- en: 'The **Custom** mode will let you assign the width and height of this widget.
    Let''s set the width and height to 256 and 32\. Now, we will drag and drop a new
    Progress Bar into the visual designer and use the following settings:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**Custom**模式将允许你分配此小部件的宽度和高度。让我们将宽度和高度设置为256和32。现在，我们将一个新的进度条拖放到视觉设计器中，并使用以下设置：'
- en: '![Creating floating health bars](img/B03950_08_12.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![创建浮动生命条](img/B03950_08_12.jpg)'
- en: Set the **Anchors** to the very last anchor (this is the Fill Anchor). Anchor
    helps the widget stay in its position with different screen sizes. This avoids
    the widget being cropped off the screen. In addition to the fill anchor, there
    are other preset anchors too, such as fill bottom left side, fill right side,
    fill bottom area, fill top area, top left, center, right corners, and more. Based
    on the position of your widget, you can select any Anchor you want and, in the
    game, the widget will be positioned relative to the Anchor position.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 将**Anchors**设置为最后一个锚点（这是填充锚点）。锚点有助于小部件在不同屏幕尺寸下保持其位置，从而避免小部件被裁剪掉屏幕。除了填充锚点之外，还有其他预设的锚点，例如填充左下角、填充右侧、填充底部区域、填充顶部区域、顶部左、中心、右角，等等。根据小部件的位置，你可以选择任何你想要的锚点，在游戏中，小部件将相对于锚点位置进行定位。
- en: In this example, since we set the anchor to fill, Position X and Y and Size
    X and Y will be replaced with **Offset Left**, **Top**, **Right**, and **Bottom**
    respectively. Change the **Offset Right** and **Bottom** to `0.0`. The Progress
    Bar will now be properly stretched to the width and height of the visual designer.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，由于我们设置了锚点为填充，位置X和Y以及大小X和Y将被分别替换为**Offset Left**、**Top**、**Right**和**Bottom**。将**Offset
    Right**和**Bottom**更改为`0.0`。进度条现在将正确地拉伸到视觉设计器的宽度和高度。
- en: Now, let's create a new variable called **My Character** with the type set to
    your **ThirdPersonCharacter Blueprint** and bind the **Percent** value to your
    character's **GetHealthPercentage** function. This is the exact same step we performed
    for our HUD Widget.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个新的变量名为**My Character**，类型设置为你的**ThirdPersonCharacter Blueprint**，并将**Percent**值绑定到角色的**GetHealthPercentage**函数上。这正是我们为我们的HUD
    Widget执行的确切步骤。
- en: 'After setting the percent value, let''s close this **Widget Blueprint** for
    now and open **ThirdPersonCharacter Blueprint**. Switch to the **Viewport** tab
    and click on **Add Component** in the **Components** tab and select **Widget Component**:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 设置百分比值后，现在让我们暂时关闭这个**Widget Blueprint**，并打开**ThirdPersonCharacter Blueprint**。切换到**Viewport**标签页，在**Components**标签页中点击**Add
    Component**，并选择**Widget Component**：
- en: '![Creating floating health bars](img/B03950_08_13.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![创建浮动生命条](img/B03950_08_13.jpg)'
- en: Once you select it, this widget component will be added to your Player Character.
    Select the newly added **Widget Component** and in **Details Panel**, set the
    **Draw Size** to the same size we used for our **MyFloatingHealthbar**, which
    was `256` and `32`. And then set the **Widget Class** to **MyFloatingHealthbar**
    class and set **Space** to **Screen**. Finally, move the **Widget** to your desired
    location. In this example, I've set it above the character's head.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦选择，这个小部件组件将被添加到你的玩家角色中。选择新添加的**Widget Component**，在**Details Panel**中，将**Draw
    Size**设置为与我们用于**MyFloatingHealthbar**相同的尺寸，即`256`和`32`。然后设置**Widget Class**为**MyFloatingHealthbar**类，并将**Space**设置为**Screen**。最后，将**Widget**移动到你的期望位置。在这个例子中，我将它设置在角色的头顶上方。
- en: 'For reference, here is the screenshot:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 仅供参考，以下是截图：
- en: '![Creating floating health bars](img/B03950_08_14.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![创建浮动生命条](img/B03950_08_14.jpg)'
- en: 'If you play now, you will see the health bar floating on top of the player''s
    head but it will be empty. This is because we haven''t assigned the **My Character**
    value to our floating health bar. To make it work:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在开始游戏，你会看到生命条漂浮在玩家头顶上方，但它将是空的。这是因为我们还没有将**My Character**值分配给我们的浮动生命条。为了使其工作：
- en: Switch to the **Construction Script** tab.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到**Construction Script**标签页。
- en: Right-click anywhere on the **Construction Script** tab, search for **Get Widget**,
    and select it.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Construction Script**标签页的任何位置右键单击，搜索**Get Widget**，并选择它。
- en: Drag a new wire from the **Widget** node you just created, search for **Get
    User Widget Object**, and select it.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你刚刚创建的**Widget**节点拖动一根新线，搜索**Get User Widget Object**，并选择它。
- en: Drag a new wire from **Get User Widget Object** Return Value pin, search for
    **Cast** to **MyFloatingHealthbar**, and select it.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**Get User Widget Object**的返回值引脚拖动一根新线，搜索**Cast**到**MyFloatingHealthbar**，并选择它。
- en: Connect the output execution pin of **Construction Script** to this newly created
    **Cast** node.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**Construction Script**的输出执行引脚连接到这个新创建的**Cast**节点。
- en: From the output pin (such as **My Floating Healthbar**) drag a new wire and
    search for **Set My Character** and select it.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从输出引脚（例如**My Floating Healthbar**）拖动一根新线，搜索**Set My Character**并选择它。
- en: Connect the unnamed output execution pin of the **Cast** node to the **Set My
    Character** node.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**Cast**节点的未命名输出执行引脚连接到**Set My Character**节点。
- en: Right-click on the graph editor, search for `self`, and select **Get a reference
    to self**. Connect this node to the **My Character** pin.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在图表编辑器上右键点击，搜索`self`，并选择**获取self的引用**。将此节点连接到**My Character**引脚。
- en: 'That''s it! Now if you press play, you will see your character''s health bar
    floating on top of your player''s head:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 就这些了！现在如果你按播放，你将看到你的角色的生命条在你的玩家头上浮动：
- en: '![Creating floating health bars](img/B03950_08_15.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![创建浮动生命条](img/B03950_08_15.jpg)'
- en: Summary
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: UMG can be used to create a wide variety of UI effects. From here, you can extend
    this by adding a player portrait image next to your floating health bar or give
    a weapon to your character and show the ammo count for that weapon and more. You
    can also add the Widget component to other actors in your game (for example, a
    treasure chest) that shows information about that actor. Remember that laying
    out your UI in Visual Designer is only the beginning. To make your UI look good,
    you have to change the look and feel by changing the style of your widgets.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: UMG可以用来创建各种UI效果。从这里，你可以通过添加玩家头像图像到你的浮动生命条旁边或给你的角色一个武器并显示该武器的弹药计数等方式来扩展它。你还可以将Widget组件添加到游戏中的其他角色（例如，宝箱）上，以显示有关该角色的信息。记住，在视觉设计器中布局你的UI只是开始。为了使你的UI看起来更好，你必须通过更改小部件的样式来改变其外观和感觉。
