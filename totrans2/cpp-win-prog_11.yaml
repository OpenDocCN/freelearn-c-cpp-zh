- en: Chapter 11. The Document
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 11 章。文档
- en: In the previous chapter we looked into the implementation of the `Application`
    and `Window` classes, which are useful for general Windows applications. In this
    chapter, we will look into the implementation of the `Document`, `StandardDocument`,
    `Menu`, and `Accelerator` classes, which are useful for document-based Windows
    applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们探讨了 `Application` 和 `Window` 类的实现，这些类对通用 Windows 应用程序很有用。在本章中，我们将探讨
    `Document`、`StandardDocument`、`Menu` 和 `Accelerator` 类的实现，这些类对基于文档的 Windows 应用程序很有用。
- en: The Document class
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文档类
- en: In this book, a **document** is a window intended for common document-based
    applications, such as the drawing program, spreadsheet program, and word processor
    of this book. The `Document` class implements the document described previously
    and is a direct subclass of the `Window` class. It supports caret and dirty flag,
    keyboard status, menus, accelerators, the mouse wheel, scroll bars, and drop files.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，**文档**是一个用于通用文档应用程序的窗口，例如这本书的绘图程序、电子表格程序和文字处理程序。`Document` 类实现了之前描述的文档，并且是
    `Window` 类的直接子类。它支持光标、脏标志、键盘状态、菜单、快捷键、鼠标滚轮、滚动条和拖放文件。
- en: '**Document.h**'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**Document.h**'
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The keyboard holds either the `insert` or `overwrite` mode.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 键盘处于 `insert` 或 `overwrite` 模式之一。
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Similar to `Window`, `Document` has a public constructor intended for instantiation
    and a protected constructor intended for subclasses. A document of the `Document`
    class can accept drop files, and the line size is used by the scroll bar methods:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `Window` 类类似，`Document` 类有一个公共构造函数用于实例化，还有一个受保护的构造函数用于子类。`Document` 类的文档可以接受拖放文件，并且滚动条方法使用行大小：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'A dirty flag is set if the window has been modified and needs to be saved before
    closing (the document has been *dirty*). The content of the document can be zoomed
    in accordance with a zoom factor; the default is 1.0\. The name of the document
    is displayed in the document header by `GenerateHeader`, together with the zoom
    factor expressed as a percentage, and an asterisk (*****) if the dirty flag is
    `true`. However, the zoom factor is not displayed if it is 100%:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果窗口已被修改并且需要在关闭前保存（文档已被 *dirty*），则会设置一个脏标志。文档的内容可以根据缩放因子进行缩放；默认值为 1.0。文档的名称通过
    `GenerateHeader` 显示在文档标题中，同时显示缩放因子（以百分比表示），如果脏标志为 `true`，则显示一个星号（****）。然而，如果缩放因子为
    100%，则不会显示：
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `OnSize` method is overridden to modify the size of the scroll bar in accordance
    with the client size. Note that the parameter to `OnSize` is the logical size
    of the client area, not the size of the window:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnSize` 方法被重写以根据客户端大小修改滚动条的大小。请注意，`OnSize` 的参数是客户端区域的逻辑大小，而不是窗口的大小：'
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `OnMouseWheel` method is overridden to scroll the vertical scroll bar one
    line for each wheel click:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnMouseWheel` 方法被重写，以便每次滚轮点击滚动垂直滚动条一行：'
- en: '[PRE5]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `Document` class supports the caret, and the `OnGainFocus` and `OnLoseFocus`
    methods are overridden to show or hide the caret. The `SetCaret` and `ClearCaret`
    methods create and destroy the caret:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`Document` 类支持光标，并且重写了 `OnGainFocus` 和 `OnLoseFocus` 方法以显示或隐藏光标。`SetCaret`
    和 `ClearCaret` 方法创建和销毁光标：'
- en: '[PRE6]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `UpdateCaret` method is called when the caret needs to be modified, it
    is intended to be overridden and its default behavior is to do nothing:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当光标需要修改时，会调用 `UpdateCaret` 方法，它旨在被重写，并且其默认行为是不做任何事情：
- en: '[PRE7]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `SetMenuBar` method sets the menu bar of the window. The `OnCommand` method
    is called every time the user selects a menu item or presses an accelerator key,
    and `CommandInit` is called before the menus become visible in order to set a
    check mark or a radio button at the menu item or to enable or disable it:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`SetMenuBar` 方法设置窗口的菜单栏。每次用户选择菜单项或按下快捷键时，都会调用 `OnCommand` 方法，并且在菜单可见之前调用 `CommandInit`
    以在菜单项上设置勾选标记或单选按钮，或者启用或禁用它：'
- en: '[PRE8]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If the `acceptDropFiles` parameter in the constructor is `true`, the document
    accepts drop files. If the user moves one or several files and drops them in the
    document window, `OnDropFile` is called with the list of path names as parameters.
    It is intended to be overridden by subclasses, and its default behavior is to
    do nothing:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果构造函数中的 `acceptDropFiles` 参数为 `true`，则文档接受拖放文件。如果用户移动一个或多个文件并将它们拖放到文档窗口中，则会用路径名列表作为参数调用
    `OnDropFile`。它旨在被子类重写，并且其默认行为是不做任何事情：
- en: '[PRE9]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `GetKeyboardMode` and `SetKeyboardMode` methods set and get the `keyboard`
    mode. The `OnKeyboardMode` method is called when the `keyboard` mode is changed;
    it is intended to be overridden and its default behavior is to do nothing:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`GetKeyboardMode`和`SetKeyboardMode`方法设置和获取`keyboard`模式。当`keyboard`模式改变时，会调用`OnKeyboardMode`方法；它旨在被重写，并且默认行为是不做任何事情：'
- en: '[PRE10]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `OnHorizontalScroll` and `OnVerticalScroll` methods handle the scroll messages.
    The scroll bar is set in accordance with the message settings:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnHorizontalScroll`和`OnVerticalScroll`方法处理滚动消息。滚动条根据消息设置进行设置：'
- en: '[PRE11]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The `KeyToScroll` method takes a key and performs an appropriate scroll bar
    action depending on the key and whether the ***Shift*** or ***Ctrl*** key is pressed.
    For instance, the ***Page Up*** key moves the vertical scroll bar one page upward:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`KeyToScroll`方法接受一个键，并根据键以及是否按下***Shift***或***Ctrl***键执行适当的滚动条操作。例如，***Page
    Up***键将垂直滚动条向上移动一页：'
- en: '[PRE12]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following methods set or get the logical position, line size, page size,
    and total size of the horizontal and vertical scroll bar:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下方法设置或获取逻辑位置、行大小、页面大小以及水平和垂直滚动条的总大小：
- en: '[PRE13]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The command map stores the menu items of the document; for each menu item,
    the selection, enable, check, and radio listeners are stored:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 命令映射存储文档的菜单项；对于每个菜单项，存储选择、启用、检查和单选按钮监听器：
- en: '[PRE14]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The accelerator set holds the accelerators of the document irrespective of
    whether it is a regular key or virtual key (for instance, ***F2*** , ***Home***
    , or ***Delete*** ) and whether the ***Ctrl*** , ***Shift*** , or ***Alt*** key
    is pressed. The set is used by the message loop in `Application`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 加速器集合包含文档的加速器，无论它是常规键还是虚拟键（例如，***F2***，***Home***，或***Delete***）以及是否按下***Ctrl***，***Shift***或***Alt***键。该集合由`Application`中的消息循环使用：
- en: '[PRE15]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `name` field is the name of the document displayed at the top of the window;
    `caretPresent` is true when the caret is visible:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`name`字段是显示在窗口顶部的文档名称；当光标可见时，`caretPresent`为`true`：'
- en: '[PRE16]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'When the user presses one of the arrow keys, `OnKeyDown` is called. However,
    if `OnKeyDown` returns `false`, the scroll bar is changed; in that case, we need
    `lineSize` to define the size of a line to be scrolled:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户按下箭头键之一时，会调用`OnKeyDown`。然而，如果`OnKeyDown`返回`false`，则滚动条会改变；在这种情况下，我们需要`lineSize`来定义要滚动的行的大小：
- en: '[PRE17]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `dirtyFlag` field is `true` when the user has changed the document without
    saving, resulting in the **Save** menu item being enabled and the user being asked
    whether to save the document when closing the window or exiting the application:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在未保存的情况下更改文档时，`dirtyFlag`字段为`true`，导致**保存**菜单项被启用，并在关闭窗口或退出应用程序时询问用户是否保存文档：
- en: '[PRE18]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The `menuBarHandle` method is the Win32 API function that handles the menu
    bar of the document window:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`menuBarHandle`方法是处理文档窗口菜单栏的Win32 API函数：'
- en: '[PRE19]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The keyboard can hold the `insert` or `overwrite` mode, which is stored in
    `keyboardMode`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 键盘可以保持`insert`或`overwrite`模式，该模式存储在`keyboardMode`中：
- en: '[PRE20]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The `DocumentProc` method is called when the document window receives a message,
    similar to `WindowProc` in the `Window` class:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当文档窗口接收到消息时，会调用`DocumentProc`方法，类似于`Window`类中的`WindowProc`方法：
- en: '[PRE21]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The `ExtractPathList` method extracts the paths of the dropped files when the
    window receives the `WM_DROPFILES` message:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当窗口接收到`WM_DROPFILES`消息时，`ExtractPathList`方法会提取拖放文件的路径：
- en: '[PRE22]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Initialization
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始化
- en: The first `Document` constructor takes the coordinate system, the page size,
    parent window, style, appearance, whether the document accepts drop files, and
    the line size as its parameters. The size of a US Letter page in portrait mode
    (standing up) is 215.9 * 279.4 millimeters. A line (used by `KeyToScroll` when
    scrolling lines) is 5 millimeters in both the horizontal and vertical directions.
    Since a logical unit is one hundredth of a millimeter, we multiply each measure
    by one hundred.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个`Document`构造函数接受坐标系、页面大小、父窗口、样式、外观、文档是否接受拖放文件以及行大小作为其参数。在竖直模式（站立）下，美国信函纸张的大小为215.9
    * 279.4毫米。一行（在滚动行时由`KeyToScroll`使用）在水平和垂直方向上都是5毫米。由于逻辑单位是毫米的一百分之一，我们将每个度量乘以一百。
- en: '**Document.cpp**'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**Document.cpp**'
- en: '[PRE23]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The first constructor calls the second constructor with the `Windows` class
    named `Document` as the first parameter:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个构造函数使用名为`Document`的`Windows`类作为第一个参数调用第二个构造函数：
- en: '[PRE24]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The second constructor takes the same parameters as the first construct with
    the exception that it inserts the `Windows` class name as its first parameter:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个构造函数与第一个构造函数具有相同的参数，除了它将 `Windows` 类名作为其第一个参数插入：
- en: '[PRE25]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The range and page size of the scroll bars are stored in the window''s scroll
    bar settings. However, the size of the line needs to be stored in `lineSize`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 滚动条的范围和页面大小存储在窗口的滚动条设置中。但是，行的尺寸需要存储在 `lineSize` 中：
- en: '[PRE26]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The header appears on the top bar of the document window:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 标题出现在文档窗口的顶部栏上：
- en: '[PRE27]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The default position of the scroll bars is `0`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 滚动条的默认位置是 `0`：
- en: '[PRE28]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The size of the scroll bars is the logical width and height of the page:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 滚动条的大小是页面的逻辑宽度和高度：
- en: '[PRE29]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The page sizes of the scroll bars represent the visible part of the document,
    which is the logical size of the client area:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 滚动条的页面大小表示文档的可见部分，即客户端区域的逻辑大小：
- en: '[PRE30]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The Win32 API function `DragAcceptFiles` makes the window accept drop files.
    Note that we need to convert the C++ `bool` type of `acceptDropFiles` to the value
    `TRUE` or `FALSE` of the Win32 API `BOOL` type:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Win32 API 函数 `DragAcceptFiles` 使窗口接受拖放文件。请注意，我们需要将 C++ 的 `bool` 类型 `acceptDropFiles`
    转换为 Win32 API 的 `BOOL` 类型的 `TRUE` 或 `FALSE` 值：
- en: '[PRE31]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The destructor destroys the caret if present:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 析构函数如果存在，会销毁光标：
- en: '[PRE32]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The Document header
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文档标题
- en: 'The `GetName` method simply returns the name. However, `SetName` sets the name
    and regenerates the header of the document window. The same goes for `SetZoom`
    and `SetDirty`: they set the zoom factor and dirty flag and then regenerate the
    header:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`GetName` 方法简单地返回名称。然而，`SetName` 设置名称并重新生成文档窗口的标题。同样，`SetZoom` 和 `SetDirty`：它们设置缩放因子和脏标志，然后重新生成标题：'
- en: '[PRE33]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The title of the document includes its name, whether the dirty flag is set (indicated
    by an asterisk), and the zoom status (as a percentage), unless it is 100%.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 文档的标题包括其名称，是否设置了脏标志（由星号表示），以及缩放状态（以百分比表示），除非它是100%。
- en: '[PRE34]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '`OnSize` modifies the page sizes of the horizontal and vertical scroll bars
    in accordance with the new client size:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnSize` 方法根据新的客户端大小修改水平和垂直滚动条的页面大小：'
- en: '[PRE35]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The caret
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 光标
- en: 'As mentioned in [Chapter 1](ch01.html "Chapter 1. Introduction"), *Introduction*,
    a caret is the marker indicating where to input the next character. It is a thin
    vertical bar in the `insert` mode and a block in the `overwrite` mode. The `OnGainFocus`
    and `OnLoseFocus` methods show and hide the caret, if present:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第1章](ch01.html "第1章。简介")中所述，*简介*，光标是表示下一个输入字符位置的标记。它在 `insert` 模式下是一个细长的垂直条，在
    `overwrite` 模式下是一个块。`OnGainFocus` 和 `OnLoseFocus` 方法显示和隐藏光标（如果存在）：
- en: '[PRE36]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The `SetCaret` method displays a caret with the given dimensions. If there
    already is a caret present, it is destroyed:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`SetCaret` 方法显示具有给定尺寸的光标。如果已经存在光标，则将其销毁：'
- en: '[PRE37]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The size of the caret must be given in device units; there is a risk that the
    `LogicalToDevice` call rounds the width to zero (in the case of a vertical bar),
    in which case the width is set to 1:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 光标的大小必须以设备单位给出；存在风险，即 `LogicalToDevice` 调用将宽度四舍五入为零（在垂直条的情况下），在这种情况下，宽度设置为 1：
- en: '[PRE38]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The new caret is created by the Win32 API functions `CreateCaret`, `SetCaretPos`,
    and `ShowCaret`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 新的光标是通过 Win32 API 函数 `CreateCaret`、`SetCaretPos` 和 `ShowCaret` 创建的：
- en: '[PRE39]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The `ClearCaret` method destroys the caret, if present:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存在，`ClearCaret` 方法会销毁光标：
- en: '[PRE40]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The mouse wheel
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 鼠标滚轮
- en: 'When the user moves the mouse wheel, the vertical scroll bar is moved one line
    up or down (if they do not press the *Ctrl* key):'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户移动鼠标滚轮时，垂直滚动条向上或向下移动一行（如果他们没有按 *Ctrl* 键）：
- en: '[PRE41]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'If the user presses the ***Ctrl*** key, then the client area is zoomed. The
    permitted range is 10% to 1,000%:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户按下 ***Ctrl*** 键，则客户端区域将被缩放。允许的范围是 10% 到 1,000%：
- en: '[PRE42]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'As the vertical scroll bar position has been modified, we need to repaint the
    whole client area:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 由于垂直滚动条位置已修改，我们需要重新绘制整个客户端区域：
- en: '[PRE43]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The menu bar
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 菜单栏
- en: 'The menu bar of the document is set by calling the Win32 API function `SetMenu`,
    which handles the document window and the menu bar; `menuBarHandle` is used when
    enabling or marking menu items in `OnCommandInit`, as shown here:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 文档的菜单栏通过调用 Win32 API 函数 `SetMenu` 来设置，该函数处理文档窗口和菜单栏；`menuBarHandle` 在 `OnCommandInit`
    中启用或标记菜单项时使用，如下所示：
- en: '[PRE44]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The `OnCommand` method is called when the user selects a menu item or an accelerator.
    It looks up and calls the selection listener associated with the given command
    identity number:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户选择菜单项或加速键时，会调用 `OnCommand` 方法。它查找并调用与给定命令标识符关联的选择监听器：
- en: '[PRE45]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The `OnCommandInit` method is called before a menu becomes visible. It iterates
    through every menu item and, for each of them, decides whether it should be annotated
    with a check mark or radio button, or enabled or disabled:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在菜单变得可见之前会调用`OnCommandInit`方法。它会遍历每个菜单项，并为每个菜单项决定是否应该用勾选标记或单选按钮进行标注，或者启用或禁用：
- en: '[PRE46]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'If the enable listener is not null, we call it and set the enable flag to `MF_ENABLED`
    or `MF_GRAYED` (disabled):'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果启用监听器不为空，我们调用它并将启用标志设置为`MF_ENABLED`或`MF_GRAYED`（禁用）：
- en: '[PRE47]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'If the check or radio listeners are not null, we call them and set `checkflag`
    or `radioFlag`:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果勾选或单选按钮监听器不为空，我们调用它们并将`checkflag`或`radioFlag`设置为：
- en: '[PRE48]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'If either `checkFlag` or `radioFlag` is `true`, we check the menu item. Whether
    the menu item thereby becomes annotated with a check mark or a radio button is
    decided when the menu item is added to the menu, which is described in the `Menu`
    class in the next section. It is also stated in `Menu` that at least one of the
    check mark and radio listeners must be null, since it is not possible to annotate
    a menu item with both a check mark and a radio button:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`checkFlag`或`radioFlag`中的任何一个为`true`，我们检查菜单项。菜单项是否因此被标注为勾选标记或单选按钮，是在将菜单项添加到菜单时决定的，这在下一节的`Menu`类中描述。`Menu`还指出，至少有一个勾选标记和单选按钮监听器必须为空，因为不可能同时用勾选标记和单选按钮标注菜单项：
- en: '[PRE49]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: The scroll bar
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 滚动条
- en: The `OnHorizontalScroll` and `OnVerticalScroll` methods are called every time
    the user scrolls by clicking the scroll bar arrows, the scroll bar itself, or
    by dragging the scroll thumb.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 每次用户通过点击滚动条箭头、滚动条本身或拖动滚动滑块进行滚动时，都会调用`OnHorizontalScroll`和`OnVerticalScroll`方法。
- en: 'The `scrollPos` field holds the current scroll bar setting. The `scrollLine`
    variable is the size of the line, `scrollPage` is the size of the page (representing
    the logical size of the visible part of the document and equal to the logical
    size of the client area), and `scrollSize` is the total size of the scroll bar
    (representing the logical size of the document):'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`scrollPos`字段存储当前的滚动条设置。`scrollLine`变量是行的大小，`scrollPage`是页面的大小（表示文档可见部分的逻辑大小，等于客户端区域的大小），而`scrollSize`是滚动条的总大小（表示文档的逻辑大小）：'
- en: '[PRE50]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'In the case of leftward movement, we need to verify that the new scroll position
    doesn''t go below zero:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在向左移动的情况下，我们需要验证新的滚动位置是否不低于零：
- en: '[PRE51]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'In the case of rightward movement, we need to verify that the scroll position
    does not exceed the scroll bar size:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在向右移动的情况下，我们需要验证滚动位置是否不超过滚动条大小：
- en: '[PRE52]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'If the user drags the scroll bar thumb, we just set the new scroll position.
    The difference between the messages is that `SB_THUMBTRACK` is sent continually
    as the user drags the thumb, while `SB_THUMBPOSITION` is sent when the user releases
    the mouse button:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户拖动滚动条滑块，我们只需设置新的滚动位置。消息之间的区别在于，当用户拖动滑块时，会持续发送`SB_THUMBTRACK`，而`SB_THUMBPOSITION`是在用户释放鼠标按钮时发送的：
- en: '[PRE53]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Vertical scroll bar movements work in the same way as horizontal scroll bar
    movements:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 垂直滚动条的运动方式与水平滚动条的运动方式相同：
- en: '[PRE54]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The `KeyToScroll` function is called when the user presses a key. It examines
    the key, performs an appropriate scroll action, and returns `true` if the key
    was used, indicating as much:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户按下键时调用`KeyToScroll`函数。它检查按键，执行适当的滚动操作，如果使用了该键，则返回`true`，表示这一点：
- en: '[PRE55]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'If the scroll position has been changed, we set the new scroll position by
    calling the Win32 API function `SetScrollPos` and update the window and the caret:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果滚动位置已更改，我们通过调用Win32 API函数`SetScrollPos`来设置新的滚动位置，并更新窗口和光标：
- en: '[PRE56]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The Win32 API function `GetScrollPos` returns the current scroll bar position:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Win32 API函数`GetScrollPos`返回当前的滚动条位置：
- en: '[PRE57]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The methods for the vertical scroll position work in the same way as the methods
    for the horizontal scroll bar:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 垂直滚动位置的方法与水平滚动条的方法工作方式相同：
- en: '[PRE58]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'The `SetHorizontalScrollLineWidth`, `GetHorizontalScrollLineHeight`, `SetVerticalScrollLineHeight`,
    and `GetVerticalScrollLineHeight` methods have no Win32 API counterparts. Instead,
    we store the size of a scrolled line in the `lineSize` field:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`SetHorizontalScrollLineWidth`、`GetHorizontalScrollLineHeight`、`SetVerticalScrollLineHeight`和`GetVerticalScrollLineHeight`方法没有Win32
    API的对应方法。相反，我们在`lineSize`字段中存储滚动行的尺寸：'
- en: '[PRE59]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'The `SetHorizontalScrollPageWidth`, `GetHorizontalScrollPageWidth`, `SetVerticalScrollPageHeight`,
    and `GetVerticalScrollPageHeight` methods have no direct Win32 API counterparts.
    However, the `GetScrollInfo` and `SetScrollInfo` functions handle the general
    scroll information, and we can set and extract the page information:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`SetHorizontalScrollPageWidth`、`GetHorizontalScrollPageWidth`、`SetVerticalScrollPageHeight`
    和 `GetVerticalScrollPageHeight` 方法没有直接的 Win32 API 对应函数。然而，`GetScrollInfo` 和 `SetScrollInfo`
    函数处理一般的滚动信息，我们可以设置和提取页面信息：'
- en: '[PRE60]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'The `SetHorizontalScrollTotalWidth`, `GetHorizontalScrollTotalWidth`, `SetVerticalScrollTotalHeight`,
    and `GetVerticalScrollTotalHeight` methods call the Win32 API functions `SetScrollRange`
    and `GetScrollRange`, which set and get the minimum and maximum scroll values.
    However, we ignore the minimum value since it is always 0:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`SetHorizontalScrollTotalWidth`、`GetHorizontalScrollTotalWidth`、`SetVerticalScrollTotalHeight`
    和 `GetVerticalScrollTotalHeight` 方法调用 Win32 API 函数 `SetScrollRange` 和 `GetScrollRange`，这些函数设置和获取滚动值的最小和最大值。然而，我们忽略最小值，因为它始终为
    0：'
- en: '[PRE61]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: The DocumentProc method
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`DocumentProc` 方法'
- en: 'The `DocumentProc` method is called every time the document (of the `Document`
    class) receives a message. If it uses the message, 0 is returned; otherwise, `WindowProc`
    (described in the previous chapter) is called to further process the message:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 每当文档（`Document` 类的文档）收到消息时，都会调用 `DocumentProc` 方法。如果它使用该消息，则返回 0；否则，调用上一章中描述的
    `WindowProc` 方法来进一步处理该消息：
- en: '[PRE62]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'We look up the window in `WindowMap` in the `Window` class and take action
    only if the window is a `Document` object:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 `Window` 类的 `WindowMap` 中查找窗口，并且只有当窗口是 `Document` 对象时才采取行动：
- en: '[PRE63]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'The direction of the mouse wheel is downward if the word parameter''s ninth
    bit is set:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果单词参数的第九位被设置，鼠标滚轮的方向向下：
- en: '[PRE64]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'The key-down messages both check the ***Insert*** key and call `OnKeyDown`
    and `KeyToScroll`, returning 0 if one of them uses the key:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 按键消息同时检查 ***Insert*** 键并调用 `OnKeyDown` 和 `KeyToScroll`，如果其中一个使用该键则返回 0：
- en: '[PRE65]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'If the user presses the *Insert* key, the keyboard mode is swapped between
    the insert and overwrite mode. `SetKeyboardMode` sets the keyboard mode and calls
    `OnKeyboardMode`, which is intended to be overridden by subclasses to alert the
    application of the change:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户按下 *Insert* 键，则键盘模式在插入和覆盖模式之间切换。`SetKeyboardMode` 设置键盘模式并调用 `OnKeyboardMode`，该函数旨在被子类覆盖以通知应用程序变化：
- en: '[PRE66]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'If the user does not press the ***Insert*** key, we check whether `OnKeyDown`
    uses the key (and thereby returns `true`). If it does not, we instead check whether
    `KeyToScroll` uses the key. If either `OnKeyDown` or `KeyToScroll` returns `true`,
    0 is returned:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户没有按下 ***Insert*** 键，我们检查 `OnKeyDown` 是否使用该键（并因此返回 `true`）。如果没有，我们则检查 `KeyToScroll`
    是否使用该键。如果 `OnKeyDown` 或 `KeyToScroll` 返回 `true`，则返回 0：
- en: '[PRE67]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'The `WM_COMMAND` case is sent when the user selects a menu item, and `WM_INITMENUPOPUP`
    is sent before a menu becomes visible. Messages are handled by calling `OnCommand`,
    which executes the selection listener connected to the menu item, and `OnCommandInit`,
    which enables or annotates menu items with check marks or radio buttons before
    they become visible:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户选择菜单项时，会发送 `WM_COMMAND` 事件，在菜单可见之前发送 `WM_INITMENUPOPUP` 事件。通过调用 `OnCommand`
    来处理消息，该函数执行与菜单项连接的选项监听器，以及调用 `OnCommandInit`，在它们变得可见之前使用复选标记或单选按钮启用或注释菜单项：
- en: '[PRE68]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'When the user drops a set of files into the window, we need to extract their
    paths before calling `OnDropFile`. The `ExtractPath` method extracts the path
    of the files from the drop and returns a list of paths, which is sent to `OnDropFile`:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户将一组文件拖放到窗口中时，在调用 `OnDropFile` 之前，我们需要提取它们的路径。`ExtractPath` 方法从拖放中提取文件的路径并返回路径列表，该列表被发送到
    `OnDropFile`：
- en: '[PRE69]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'The `WM_HSCROLL` and `WM_VSCROLL` messages are handled by calling their matching
    methods:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用相应的匹配方法来处理 `WM_HSCROLL` 和 `WM_VSCROLL` 消息：
- en: '[PRE70]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Finally, if the message is not caught by `DocumentProc`, `WindowProc` (from
    the previous chapter) is called to further process the message:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果消息没有被 `DocumentProc` 捕获，则调用上一章中描述的 `WindowProc` 方法来进一步处理该消息：
- en: '[PRE71]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'The `ExtractPathList` method extracts the paths of the dropped files by calling
    the Win32 API function `DragQueryFile` and returns the list of paths:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`ExtractPathList` 方法通过调用 Win32 API 函数 `DragQueryFile` 提取拖放文件的路径并返回路径列表：'
- en: '[PRE72]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'The `DragQueryFile` method returns the number of files when the second parameter
    is `0xFFFFFFFF`:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`DragQueryFile` 方法在第二个参数为 `0xFFFFFFFF` 时返回文件数量：'
- en: '[PRE73]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'The `DragQueryFile` method returns the size of the path string when the second
    parameter is a zero-based index and the third parameter is null:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 当第二个参数是一个基于零的索引，第三个参数为null时，`DragQueryFile`方法返回路径字符串的大小：
- en: '[PRE74]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'The `DragQueryFile` method copies the path itself when the third parameter
    is a pointer to a text buffer rather than null:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 当第三个参数是指向文本缓冲区的指针而不是null时，`DragQueryFile`方法会复制路径本身：
- en: '[PRE75]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: The Menu class
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`Menu`类'
- en: 'The `Menu` class handles a menu, made up of a list of menu items, separator
    bars, or submenus. When a menu item is added, its command information is stored
    in the document''s command map to be used when receiving the `WM_COMMAND` and
    `WM_INITCOMMAND` messages. If the menu item text includes an accelerator, it is
    added to the document''s accelerator set. The `Command` class is an auxiliary
    class holding pointers to the menu items: selection, enable, check, and radio
    listeners.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`Menu`类处理一个菜单，由菜单项列表、分隔条或子菜单组成。当添加菜单项时，其命令信息存储在文档的命令映射中，以便在接收`WM_COMMAND`和`WM_INITCOMMAND`消息时使用。如果菜单项文本包含一个快捷键，它将被添加到文档的加速器集中。`Command`类是一个辅助类，持有指向菜单项的指针：选择、启用、检查和单选监听器。'
- en: '**Command.h**'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '**Command.h**'
- en: '[PRE76]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '**Command.cpp**'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '**Command.cpp**'
- en: '[PRE77]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Menu and accelerator listeners are not regular methods. They are declared (they
    do not need to be defined) by the `DECLARE_BOOL_LISTENER` and `DECLARE_VOID_LISTENER`
    macros. This is because we cannot call a non-static method in an unknown class
    directly. Therefore, we let the macros declare a non-static method without parameters
    and define a static method with a `void` pointer as a parameter that calls the
    non-static method. The macros do not define the non-static method. That task is
    left for the user of Small Windows.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单和加速器监听器不是常规方法。它们通过`DECLARE_BOOL_LISTENER`和`DECLARE_VOID_LISTENER`宏声明（它们不需要定义）。这是因为我们无法直接在未知类中调用非静态方法。因此，我们让宏声明一个不带参数的非静态方法，并定义一个带有`void`指针参数的静态方法，该方法调用非静态方法。宏不定义非静态方法。这项任务留给Small
    Windows的用户来完成。
- en: When the user adds a menu item with a listener, a `Command` object is created.
    It is actually the static method with the `void` pointer parameter that is added
    to the `Command` object. Moreover, when the user selects a menu item, it is the
    static method that is called. The static method in turn calls the non-static method,
    which is defined by the user.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户添加一个带有监听器的菜单项时，会创建一个`Command`对象。实际上，这是添加到`Command`对象中的具有`void`指针参数的静态方法。此外，当用户选择一个菜单项时，调用的是静态方法。静态方法反过来调用用户定义的非静态方法。
- en: The macros take the names of the current class and the listener as parameters.
    Note that the `bool` listener is constant, while the `void` listener is not constant.
    This is because `bool` listeners are intended to look up the values of one or
    several of the fields of the class, while `void` listeners also modify the fields.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 宏接受当前类和监听器的名称作为参数。请注意，`bool`监听器是常量，而`void`监听器不是常量。这是因为`bool`监听器旨在查找类的字段之一或多个字段的值，而`void`监听器还修改字段。
- en: '**Menu.h**'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '**Menu.h**'
- en: '[PRE78]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'The document pointer is needed when accessing the command map and accelerator
    set of the document. Every menu except the menu bar has text that is displayed
    in the document window; `menuHandle` is the Win32 API menu handle wrapped by this
    class:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 访问文档的命令映射和加速器集时需要文档指针。除了菜单栏之外，每个菜单都有在文档窗口中显示的文本；`menuHandle`是这个类包装的Win32 API菜单句柄：
- en: '[PRE79]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '**Menu.cpp**'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '**Menu.cpp**'
- en: '[PRE80]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'The constructor initializes the pointer document and the text. It also creates
    the menu by calling the Win32 API function `CreateMenu`. Since the menu bar does
    not need text, the `text` parameter is empty by default:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数初始化指针文档和文本。它还通过调用Win32 API函数`CreateMenu`创建菜单。由于菜单栏不需要文本，`text`参数默认为空：
- en: '[PRE81]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: The copy constructor copies the fields of the menu. Note that we copy the `menuHandle`
    field rather than creating a new menu handle.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 复制构造函数复制菜单的字段。请注意，我们复制`menuHandle`字段而不是创建一个新的菜单句柄。
- en: '[PRE82]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'The `AddMenu` method adds a menu (not a menu item) as a submenu to the menu,
    while `AddSeparator` adds a separator (a horizontal bar) to the menu:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`AddMenu`方法将菜单（不是菜单项）作为子菜单添加到菜单中，而`AddSeparator`将分隔符（水平条）添加到菜单中：'
- en: '[PRE83]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'The `AddItem` method adds a menu item (not a menu) to the menu, with the selection,
    enable, check, and radio listeners:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '`AddItem`方法将菜单项（不是菜单）添加到菜单中，带有选择、启用、检查和单选监听器：'
- en: '[PRE84]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'The selection listener is not allowed to be null, and at least one of the check
    marks and radio listeners must be null, since it is not possible to annotate a
    menu item with both a check mark and a radio button:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 选择监听器不允许为空，并且至少有一个复选框和单选按钮监听器必须为空，因为不可能同时用复选框和单选按钮注释菜单项：
- en: '[PRE85]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Each menu item is given a unique identity number, which we obtain from the
    current size of the command map:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 每个菜单项都有一个唯一的标识符，我们通过命令映射的当前大小来获取：
- en: '[PRE86]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'We add a `Command` object to the command map and add the menu item with the
    Win32 API function `AppendMenu`, which takes the menu handle, identity number,
    and text:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 Win32 API 函数 `AppendMenu` 将一个 `Command` 对象添加到命令映射中，并添加菜单项，该函数需要菜单句柄、标识符和文本：
- en: '[PRE87]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'If the radio listener is not null, we need to call the Win32 API function `SetMenuItemInfo`
    in order for the radio button to appear with the menu item:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 如果单选按钮监听器不为空，我们需要调用 Win32 API 函数 `SetMenuItemInfo` 以使单选按钮与菜单项一起出现：
- en: '[PRE88]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'Finally, we call `TextToAccelerator` in `Accelerator` (described in the next
    section) to add an accelerator, if present, to the accelerator set of the document,
    which is used by the message loop of `Application`:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们在 `Accelerator`（在下一节中描述）中调用 `TextToAccelerator`，如果存在，则将其添加到文档的加速器集中，该加速器集由
    `Application` 的消息循环使用：
- en: '[PRE89]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: The Accelerator class
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加速器类
- en: It is possible to add an accelerator to a menu item. The accelerator text is
    preceded by a tabulator character (`\t`) and the text is made up of the optional
    prefixes `Ctrl+`, `Shift+`, or `Alt+` followed by a character (for instance, `&Open\tCtrl+O`)
    or the name of a virtual key (for instance, `&Save\tAlt+F2`).
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将一个加速器添加到菜单项中。加速器文本前面有一个制表符字符 (`\t`)，文本由可选的前缀 `Ctrl+`、`Shift+` 或 `Alt+` 后跟一个字符（例如，`&Open\tCtrl+O`）或虚拟键的名称（例如，`&Save\tAlt+F2`）组成。
- en: '**Accelerator.h**'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '**Accelerator.h**'
- en: '[PRE90]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'The Win32 API holds a set of virtual keys with names beginning with `VK_`.
    In Small Windows, they have been given other names, hopefully easier to understand.
    The virtual keys available are: **F1** - **F12**, **Insert**, **Delete**, **Backspace**,
    **Tab**, **Home**, **End**, **Page Up**, **Page Down**, **Left**, **Right**, **Up**,
    **Down**, **Space**, **Escape**, and **Return**:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: Win32 API 包含一组以 `VK_` 开头的虚拟键。在小窗口中，它们被赋予了其他名称，希望更容易理解。可用的虚拟键有：**F1** - **F12**、**Insert**、**Delete**、**Backspace**、**Tab**、**Home**、**End**、**Page
    Up**、**Page Down**、**Left**、**Right**、**Up**、**Down**、**Space**、**Escape** 和 **Return**：
- en: '[PRE91]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'The `Accelerator` class only holds the `TextToAccelerator` method, which takes
    text, extracts the accelerator, and adds it to the accelerator set, if present:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`Accelerator` 类只包含 `TextToAccelerator` 方法，该方法接受文本，提取加速器，如果存在，则将其添加到加速器集中：'
- en: '[PRE92]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '**Accelerator.cpp**'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '**Accelerator.cpp**'
- en: '[PRE93]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '`TextToVirtualKey` is an auxiliary function that takes text and returns the
    corresponding virtual key. The `keyTable` array holds the map between the texts
    and the available virtual keys:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`TextToVirtualKey` 是一个辅助函数，它接受文本并返回相应的虚拟键。`keyTable` 数组持有文本和可用虚拟键之间的映射：'
- en: '[PRE94]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'We loop through the table until we find the virtual key:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们遍历表格，直到找到虚拟键：
- en: '[PRE95]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'If we do not find a key matching the text, an assert occurs:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们没有找到与文本匹配的键，将发生断言：
- en: '[PRE96]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'In `TextToAccelerator`, we store the **Control**, **Shift**, **Alt**, and virtual
    key status together with the key in a Win32 API `ACCEL` structure:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `TextToAccelerator` 中，我们将 **Control**、**Shift**、**Alt** 和虚拟键状态与键一起存储在一个 Win32
    API `ACCEL` 结构中：
- en: '[PRE97]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'First, we check whether the text contains a *Tab* key (**\t**). If it does,
    we initialize the `ACCEL` structure with `itemId` and extract the accelerator
    part of the text:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们检查文本是否包含一个 *Tab* 键（**\t**）。如果包含，我们使用 `itemId` 初始化 `ACCEL` 结构，并提取文本的加速器部分：
- en: '[PRE98]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'If the accelerator text contains the prefix `Ctrl+`, `Alt+`, or `Shift+`, we
    mask `FCONTROL`, `FALT`, or `FSHIFT` to the `fVirt` field and remove the prefix:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 如果加速器文本包含前缀 `Ctrl+`、`Alt+` 或 `Shift+`，我们将 `FCONTROL`、`FALT` 或 `FSHIFT` 遮罩到 `fVirt`
    字段，并移除前缀：
- en: '[PRE99]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'After we remove the `Ctrl+`, `Shift+`, and `Alt+` prefixes, we look into the
    remaining part of the accelerator text. If there is one single character (the
    length is one), we save it in the `key` field. However, we do not save the ASCII
    number. Instead, we save the letter number, which starts with 1 for `a` or `A`:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在移除 `Ctrl+`、`Shift+` 和 `Alt+` 前缀后，我们查看加速器文本的剩余部分。如果只有一个字符（长度为 1），我们将其保存到 `key`
    字段。但是，我们不保存 ASCII 编号。相反，我们保存字母编号，对于 `a` 或 `A` 从 1 开始：
- en: '[PRE100]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'If the remaining part of the accelerator text is made up of more than one character,
    we assume that it is a virtual key and call `TextToVirtualKey` to find it and
    mask the `FVIRTKEY` constant to the `fVirt` field:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 如果加速器文本的剩余部分由多个字符组成，我们假设它是一个虚拟键，并调用 `TextToVirtualKey` 来查找它，并将 `FVIRTKEY` 常量屏蔽到
    `fVirt` 字段：
- en: '[PRE101]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'If `fVirt` is still zero, the accelerator does not contain `Ctrl+`, `Shift+`,
    `Alt+`, or a virtual key, which is not allowed:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `fVirt` 仍然为零，则加速器不包含 `Ctrl+`、`Shift+`、`Alt+` 或虚拟键，这是不允许的：
- en: '[PRE102]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'Finally, we add the accelerator to the accelerator set:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将加速器添加到加速器集合中：
- en: '[PRE103]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'Note that no accelerator is added to the accelerator set if the text does not
    contain a tabulator:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果文本不包含制表符，则不会向加速器集合中添加任何加速器：
- en: '[PRE104]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: The StandardDocument class
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`StandardDocument` 类'
- en: The `StandardDocument` class is a direct subclass of `Document`; it handles
    the **File**, **Edit**, and **Help** menus and implements file handling, cut,
    copy, and paste, drop files, and printing. There is no specific message function
    for this class; all messages are sent to `DocumentProc` in the `Document` section
    covered previously. The document name and the dirty flag are automatically updated
    by the framework. `StandardDocument` does also handle the Page Setup dialog, which
    is more closely described in [Chapter 12](ch12.html "Chapter 12. The Auxiliary
    Classes"), *The Auxiliary Classes*.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '`StandardDocument` 类是 `Document` 的直接子类；它处理 **File**、**Edit** 和 **Help** 菜单，并实现文件处理、剪切、复制和粘贴、拖放文件和打印。此类没有特定的消息函数；所有消息都发送到之前覆盖的
    `Document` 部分的 `DocumentProc`。文档名称和脏标志由框架自动更新。`StandardDocument` 还处理页面设置对话框，这在
    [第 12 章](ch12.html "第 12 章。辅助类") *辅助类* 中有更详细的描述。'
- en: '**StandardDocument.h**'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '**StandardDocument.h**'
- en: '[PRE105]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'Most constructor parameters are sent to the `Document` constructor. What is
    specific for `StandardDocument` is the file description text and the copy and
    paste format lists. The file description is used by the standard save and open
    dialogs. The copy and paste lists are used when copying and pasting information
    between the application and the global Clipboard:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数构造函数参数都发送到 `Document` 构造函数。对于 `StandardDocument` 来说，特定的是文件描述文本和复制粘贴格式列表。文件描述由标准保存和打开对话框使用。复制粘贴列表用于在应用程序和全局剪贴板之间复制粘贴信息：
- en: '[PRE106]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'The `StandardFileMenu`, `StandardEditMenu`, and `StandardHelpMenu` methods
    create and return the standard menus. If `print` in `StandardFileMenu` is `true`,
    the **Page Setup**, **Print**, and **Print Preview** menu items are included:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '`StandardFileMenu`、`StandardEditMenu` 和 `StandardHelpMenu` 方法创建并返回标准菜单。如果 `StandardFileMenu`
    中的 `print` 为 `true`，则包括 **Page Setup**、**Print** 和 **Print Preview** 菜单项：'
- en: '[PRE107]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: The **Save** menu item is disabled when the document does not need to be saved
    (the dirty flag is `false`). The `SaveEnable` method is called before the **Save**
    menu item becomes visible and enables it if the dirty flag is `true`.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 当文档不需要保存时（脏标志为 `false`），**Save** 菜单项被禁用。在 **Save** 菜单项可见之前调用 `SaveEnable` 方法，如果脏标志为
    `true`，则启用它。
- en: '[PRE108]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: The `OnSave` method calls `SaveFileWithName` or `SaveFileWidhoutName` depending
    on whether the document has been given a name. However, `OnSaveAs` always calls
    `SaveFileWithoutName`, regardless of whether the document has a name.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnSave` 方法根据文档是否已命名调用 `SaveFileWithName` 或 `SaveFileWidhoutName`。然而，`OnSaveAs`
    总是调用 `SaveFileWithoutName`，无论文档是否有名称。'
- en: '[PRE109]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'The `ClearDocument`, `WriteDocumentToStream`, and `ReadDocumentFromStream`
    methods are called when the user selects the **New**, **Save**, **Save As**, or
    **Open** menu items and are intended to be overridden by subclasses to clear,
    write, and read the document:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户选择 **New**、**Save**、**Save As** 或 **Open** 菜单项时，会调用 `ClearDocument`、`WriteDocumentToStream`
    和 `ReadDocumentFromStream` 方法，这些方法旨在由子类覆盖以清除、写入和读取文档：
- en: '[PRE110]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'The `OnCut`, `OnCopy`, `OnPaste`, and `OnDelete` methods are called when the
    user selects the corresponding menu item in the **Edit** menu. The default behavior
    for `OnCut` is to call `OnCopy` followed by `OnDelete`:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在 **Edit** 菜单中选择相应的菜单项时，会调用 `OnCut`、`OnCopy`、`OnPaste` 和 `OnDelete` 方法。`OnCut`
    的默认行为是先调用 `OnCopy`，然后调用 `OnDelete`：
- en: '[PRE111]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'The `CutEnable`, `CopyEnable`, `PasteEnable`, and `DeleteEnable` methods are
    listeners deciding whether the menu items are enabled. The default behavior for
    `CutEnable` and `DeleteEnable` is to call `CopyEnable`:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '`CutEnable`、`CopyEnable`、`PasteEnable` 和 `DeleteEnable` 方法是监听器，用于决定菜单项是否启用。`CutEnable`
    和 `DeleteEnable` 的默认行为是调用 `CopyEnable`：'
- en: '[PRE112]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'The `IsCopyAsciiReady`, `IsCopyUnicodeReady`, and `IsCopyGenericReady` methods
    are called by `CopyEnable`. They are intended to be overridden and return `true`
    if the application is ready to be copied in the ASCII, Unicode, or generic formats.
    Their default behavior is to return `false`:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '`IsCopyAsciiReady`、`IsCopyUnicodeReady` 和 `IsCopyGenericReady` 方法由 `CopyEnable`
    调用。它们旨在被重写，并在应用程序准备好以 ASCII、Unicode 或通用格式进行复制时返回 `true`。它们的默认行为是返回 `false`：'
- en: '[PRE113]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'The `CopyAscii`, `CopyUnicode`, and `CopyGeneric` methods are called by `OnCopy`
    when the user selects the **Copy** menu item. They are intended to be overridden
    by subclasses and are called in accordance with the copy format list in the constructor
    and the copy-ready methods:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户选择 **复制** 菜单项时，`OnCopy` 会调用 `CopyAscii`、`CopyUnicode` 和 `CopyGeneric` 方法。它们旨在被子类重写，并按照构造函数中的复制格式列表和复制就绪方法进行调用：
- en: '[PRE114]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'The `IsPasteAsciiReady`, `IsPasteUnicodeReady`, and `IsPasteGenericReady` methods
    are called by `PasteEnable`, which returns `true` if at least one of the methods
    returns `true`. They are intended to be overridden and return `true` if the application
    is ready to be pasted in the ASCII, Unicode, or generic formats. Their default
    behavior is to return `true`:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '`IsPasteAsciiReady`、`IsPasteUnicodeReady` 和 `IsPasteGenericReady` 方法由 `PasteEnable`
    调用，如果至少有一个方法返回 `true`，则返回 `true`。它们旨在被重写，并在应用程序准备好以 ASCII、Unicode 或通用格式粘贴时返回 `true`。它们的默认行为是返回
    `true`：'
- en: '[PRE115]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'The `PasteAscii`, `PasteUnicode`, and `PasteGeneric` methods are called by
    `OnPaste` when the user selects the **Paste** menu item. They are intended to
    be overridden by subclasses and are called in accordance with the paste format
    list in the constructor and the paste-ready methods. One difference between copying
    and pasting is that copying is performed in all available formats while pasting
    is performed in the first available format only:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户选择 **粘贴** 菜单项时，`OnPaste` 会调用 `PasteAscii`、`PasteUnicode` 和 `PasteGeneric`
    方法。它们旨在被子类重写，并按照构造函数中的粘贴格式列表和粘贴就绪方法进行调用。复制和粘贴之间有一个区别，即复制在所有可用格式中执行，而粘贴仅在第一个可用格式中执行：
- en: '[PRE116]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'The `OnDropFile` methods is called when the user drops a set of files in the
    window''s client area. If there is exactly one file with the suffix given in the
    constructor in the path list, that file is read in the same way as if the user
    had selected it in the standard open dialog. However, if there are no files or
    more than one file with the suffix in the list, an error message is displayed:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在窗口的客户区域中拖放一组文件时，会调用 `OnDropFile` 方法。如果路径列表中恰好有一个文件具有构造函数中给出的后缀，则该文件将以与用户在标准打开对话框中选择它相同的方式读取。然而，如果没有文件或列表中有多个具有后缀的文件，则显示错误消息：
- en: '[PRE117]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'The `PageOuterSize` methods returns the logical size of the page in portrait
    or landscape mode depending on the page setup settings, without regard to the
    margins, while `PageInnerSize`, `PageInnerWidth`, and `PageInnerHeight` return
    the size of the page after subtracting the margins:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '`PageOuterSize` 方法根据页面设置设置返回页面在纵向或横向模式下的逻辑大小，不考虑边距，而 `PageInnerSize`、`PageInnerWidth`
    和 `PageInnerHeight` 返回减去边距后的页面大小：'
- en: '[PRE118]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'The `OnPageSetup`, `OnPrintPreview`, and `OnPrintItem` methods are called when
    the user selects the **Page Setup**, **Print**, and **Print Preview** menu items.
    They display **Page Setup Dialog**, **Print Preview Window**, and **Print Dialog**:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户选择 **页面设置**、**打印** 和 **打印预览** 菜单项时，会调用 `OnPageSetup`、`OnPrintPreview` 和 `OnPrintItem`
    方法。它们显示 **页面设置对话框**、**打印预览窗口** 和 **打印对话框**：
- en: '[PRE119]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'The `PrintPage` method is called by `OnPrintItem` and prints one page of the
    document:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '`PrintPage` 方法由 `OnPrintItem` 调用，并打印文档的一页：'
- en: '[PRE120]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'The `OnPageSetup` method is called to notify the application when the user
    has selected the **Page Setup** menu item and has changed the page setup information.
    It is intended to be overridden by subclasses and its default behavior is to do
    nothing:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户选择 **页面设置** 菜单项并更改页面设置信息时，会调用 `OnPageSetup` 方法来通知应用程序。它旨在被子类重写，并且其默认行为是不执行任何操作：
- en: '[PRE121]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'The `GetTotalPages` method returns the number of pages to print; the default
    is 1\. It is intended to be overridden by subclasses:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '`GetTotalPages` 方法返回要打印的页数；默认值为 1。它旨在被子类重写：'
- en: '[PRE122]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: 'The `OnPrint` method is called once by `OnPrintItem` for each page and copy.
    Its default behavior is to write the header and footer in accordance with the
    setting in the **Page Setup Dialog**, and then call `OnDraw` for the application-specific
    contents of the document:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnPrint`方法由`OnPrintItem`对每一页和副本调用一次。它的默认行为是按照**页面设置对话框**中的设置写入页眉和页脚，然后调用`OnDraw`以显示文档的应用程序特定内容：'
- en: '[PRE123]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: 'The `OnExit` method is called when the user selects the **Exit** menu item
    and quits the application if `TryClose` returns `true`. If the dirty flag is `true`,
    `TryClose` displays a message box, asking the user for permission to close the
    window:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户选择**退出**菜单项并退出应用程序时，会调用`OnExit`方法，如果`TryClose`返回`true`，则应用程序会退出。如果脏标志为`true`，`TryClose`会显示一个消息框，询问用户是否允许关闭窗口：
- en: '[PRE124]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: 'The `OnAbout` method displays a simple message box with the application name:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnAbout`方法显示一个包含应用程序名称的简单消息框：'
- en: '[PRE125]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: 'The `fileFilter` fields are used by the **Open** and **Save** standard dialogs
    and `fileSuffixList` is used to check the file suffix of dropped files:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '**文件**字段由**打开**和**保存**标准对话框使用，而`fileSuffixList`用于检查拖放文件的文件后缀：'
- en: '[PRE126]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: The `pageSetupInfo` field is used when the user selects the **Page Setup** menu
    item. It stores information about the header and footer text and font, page orientation
    (portrait or landscape), margins, and whether the pages are surrounded by a frame.
    Refer to the next chapter for a closer description.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户选择**页面设置**菜单项时，会使用`pageSetupInfo`字段。它存储有关页眉和页脚文本和字体、页面方向（纵向或横向）、页边距以及页面是否被框架包围的信息。请参阅下一章以获取更详细的描述。
- en: '[PRE127]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: 'The `copyFormatList` and `pasteFormatList` fields hold the formats available
    for cutting, copying, and pasting:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '`copyFormatList`和`pasteFormatList`字段包含可用于剪切、复制和粘贴的格式：'
- en: '[PRE128]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: Initialization
  id: totrans-280
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始化
- en: The first `StandardDocument` constructor takes a large set of parameters. The
    coordinate system, page size, parent window, style, appearance, whether the document
    accepts drop files, and the line size parameters are the same as in the `Document`
    case covered previously.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个`StandardDocument`构造函数接受一组大量的参数。坐标系、页面大小、父窗口、样式、外观、文档是否接受拖放文件，以及行大小参数与之前覆盖的`Document`案例相同。
- en: What remains is the file description text, whether the print menu is present,
    and the format list for copying and pasting. The description text holds a semicolon-separated
    list of file descriptions and file suffixes for the allowed files, for instance,
    **Calc Files**, *clc*; **Text Files**, *txt*. The copy and paste format list holds
    the allowed formats for copying and pasting information.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 剩余的是文件描述文本，打印菜单是否存在，以及复制和粘贴的格式列表。描述文本包含一个分号分隔的文件描述和允许文件的文件后缀列表，例如，**Calc Files**，*clc*；**Text
    Files**，*txt*。复制和粘贴的格式列表包含复制和粘贴信息的允许格式。
- en: '**StandardDocument.cpp**'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '**StandardDocument.cpp**'
- en: '[PRE129]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: 'Most constructor parameters are sent to the `Document` constructor. However,
    the copy and paste format lists are stored in `copyFormatList` and `pasteFormatList`.
    The file filter and file suffix lists are initialized by `InitializeFileFilter`:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数构造函数参数都发送到`Document`构造函数。然而，复制和粘贴的格式列表存储在`copyFormatList`和`pasteFormatList`中。文件过滤器由`InitializeFileFilter`初始化：
- en: '[PRE130]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: 'In `Window`, we used the page size for transforming between logical and physical
    units. In `Document`, we used it for setting the scroll page size. However, in
    `StandardDocument`, there are actually two kinds of page sizes: the outer and
    inner page size. The outer page size is the page size without taking the margins
    of the document into consideration. The inner page size is obtained by subtracting
    the margins from the outer page size. In `StandardDocument`, we use the inner
    page size to set the size of the scroll bar:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Window`中，我们使用页面大小在逻辑单位和物理单位之间进行转换。在`Document`中，我们使用它来设置滚动页面大小。然而，在`StandardDocument`中，实际上有两种页面大小：外页大小和内页大小。外页大小是不考虑文档边距的页面大小。内页大小是通过从外页大小中减去边距得到的。在`StandardDocument`中，我们使用内页大小来设置滚动条的大小：
- en: '[PRE131]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: Standard menus
  id: totrans-289
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标准菜单
- en: 'The code for this is shown as follows:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了这一点：
- en: '[PRE132]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: 'The standard **File** menu holds the **New**, **Open**, **Save**, **Save As**,
    and **Exit** menu items as well as (if `print` is `true`) the **Page Setup**,
    **Print Preview**, and **Print** menu items:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 标准的**文件**菜单包含**新建**、**打开**、**保存**、**另存为**和**退出**菜单项，以及（如果`print`为`true`）**页面设置**、**打印预览**和**打印**菜单项：
- en: '[PRE133]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: 'The standard **Edit** menu holds the **Cut**, **Copy**, **Paste**, and **Delete**
    menu items:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 标准的**编辑**菜单包含**剪切**、**复制**、**粘贴**和**删除**菜单项：
- en: '[PRE134]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: 'The standard **Help** menu holds the **About** menu item with the help of the
    application name:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 标准的**帮助**菜单包含使用应用程序名称的**关于**菜单项：
- en: '[PRE135]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: File management
  id: totrans-298
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件管理
- en: 'The `TryClose` method checks whether the dirty flag is `true` when the user
    tries to close the window. If it is `true`, the user is asked if they want to
    save the document before closing it. If they answer yes, the document is saved
    as if the user has selected the **Save** menu item. If the dirty flag is set to
    `false` after that, it means that the save operation went well and `true` is returned.
    If the user answers no, `true` is returned and the window is closed without saving.
    If the answer is cancel, `false` is returned and the closing is aborted:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户尝试关闭窗口时，`TryClose`方法检查脏标志是否为`true`。如果是`true`，则询问用户在关闭前是否要保存文档。如果他们回答是，则像用户选择了**保存**菜单项一样保存文档。如果之后脏标志设置为`false`，则表示保存操作成功，并返回`true`。如果用户回答否，则返回`true`并关闭窗口而不保存。如果答案是取消，则返回`false`并中止关闭操作：
- en: '[PRE136]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: 'The `OnExit` method calls `TryClose` and deletes the application''s main window,
    which eventually sends a quit message to the message loop that terminates the
    application, if `TryClose` returns `true`:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnExit`方法调用`TryClose`并删除应用程序的主窗口，如果`TryClose`返回`true`，则最终向消息循环发送退出消息以终止应用程序：'
- en: '[PRE137]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: 'The `OnNew` method is called when the user selects the **New** menu item. It
    tries to close the window by calling `TryClose`. If `TryClose` returns `true`,
    the document, dirty flag, and name are cleared, and the window is invalidated
    and updated. The `ClearDocument` method is indented to be overridden by subclasses
    to clear the application-specific contents of the document:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户选择**新建**菜单项时，会调用`OnNew`方法。它尝试通过调用`TryClose`来关闭窗口。如果`TryClose`返回`true`，则清除文档、脏标志和名称，并使窗口无效并更新。`ClearDocument`方法被缩进以供子类覆盖，以清除文档的应用程序特定内容：
- en: '[PRE138]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: 'The `OnOpen` method is called when the user selects the **Open** menu item.
    It tries to close the window by calling `TryClose` and displays the standard open
    dialog to establish the path of the file if it succeeds. If `OpenDialog` returns
    `true` and the input stream is valid, the page setup information is read and the
    methods `ClearDocument` and `ReadDocumentFromStream`, which are intended to be
    overridden by subclasses, are called:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户选择**打开**菜单项时，会调用`OnOpen`方法。它尝试通过调用`TryClose`来关闭窗口，并在成功的情况下显示标准打开对话框以建立文件的路径。如果`OpenDialog`返回`true`且输入流有效，则读取页面设置信息，并调用`ClearDocument`和`ReadDocumentFromStream`方法，这些方法旨在由子类覆盖：
- en: '[PRE139]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: 'The **Save** menu item is enabled if the dirty flag is `true`:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 如果脏标志为`true`，则**保存**菜单项被启用：
- en: '[PRE140]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: 'When saving the file, we call `SaveFileWithName` if the file has a name. If
    the file has not yet been given a name, `SaveFileWithoutName` is called instead:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件时，如果文件已有名称，则调用`SaveFileWithName`。如果文件尚未命名，则调用`SaveFileWithoutName`代替：
- en: '[PRE141]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: 'When the user selects **Save As**, `SaveFileWithoutName` is called and the
    **Save** standard dialog is displayed, regardless of whether the document has
    a name:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户选择**另存为**时，无论文档是否有名称，都会调用`SaveFileWithoutName`并显示**保存**标准对话框：
- en: '[PRE142]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: 'The `SaveFileWithoutName` method displays the save dialog. If the user presses
    the **Ok** button, the `SaveDialog` call returns `true`, the new name is set,
    and `SaveFileWithName` is called to do the actual writing of the document file:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '`SaveFileWithoutName`方法显示保存对话框。如果用户按下**确定**按钮，则`SaveDialog`调用返回`true`，设置新名称，并调用`SaveFileWithName`以执行文档文件的实际写入：'
- en: '[PRE143]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: 'The `SaveFileWithName` method tries to open the document file for writing and
    calls `WriteDocumentToStream`, which is intended to be overridden by subclasses,
    to do the actually writing of the document''s content. If the writing of both
    the page setup information and the contents of the document succeeds, the dirty
    flag is cleared:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '`SaveFileWithName`方法尝试打开文档文件进行写入，并调用`WriteDocumentToStream`，该方法旨在由子类覆盖以执行文档内容的实际写入。如果页面设置信息和文档内容写入成功，则清除脏标志：'
- en: '[PRE144]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: 'When the user selects the **About** menu item in the **Help** standard menu,
    a message box with a message including the name of the application is displayed:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在**帮助**标准菜单中选择**关于**菜单项时，会显示一个包含应用程序名称的消息框：
- en: '[PRE145]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: Cut, copy, and paste
  id: totrans-319
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 剪切、复制和粘贴
- en: 'The default behavior for `CutEnable` and `DeleteEnable` is to simply call `CopyEnable`,
    since it is likely that they are enabled under the same conditions:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '`CutEnable`和`DeleteEnable`的默认行为是简单地调用`CopyEnable`，因为它们很可能在相同的条件下被启用：'
- en: '[PRE146]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: 'The default behavior for `OnCut` is to simply call `OnCopy` and `OnDelete`,
    which is the common action for cutting:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnCut`的默认行为是简单地调用`OnCopy`和`OnDelete`，这是剪切的常见操作：'
- en: '[PRE147]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: 'The `OnDelete` method is empty and intended to be overridden by subclasses:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnDelete`方法为空，并打算由子类覆盖：'
- en: '[PRE148]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: 'The `CopyEnable` method iterates through the paste format list and calls `IsCopyAsciiReady`,
    `IsCopyUnicodeReady`, or `IsCopyGenericReady` depending on the formats. As soon
    as one of the methods returns `true`, `CopyEnable` returns `true`, implying that
    it is enough that copying is allowed for one of the formats. When the actual copying
    occurs in `OnCopy`, the ready methods are called again:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '`CopyEnable`方法遍历粘贴格式列表，并根据格式调用`IsCopyAsciiReady`、`IsCopyUnicodeReady`或`IsCopyGenericReady`。一旦其中一个方法返回`true`，`CopyEnable`就返回`true`，这意味着只要允许其中一个格式的复制就足够了。当实际复制在`OnCopy`中发生时，准备好的方法会被再次调用：'
- en: '[PRE149]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: 'The `OnCopy` method iterates through the copy format list given in the constructor
    and calls appropriate methods depending on the formats:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnCopy`方法遍历构造函数中给出的复制格式列表，并根据格式调用适当的方法：'
- en: '[PRE150]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: 'If the ASCII format applies and if `IsCopyAsciiReady` returns `true`, `CopyAscii`
    is called, which is intended to be overridden by subclasses to fill `asciiList`
    with ASCII text. When the list has been copied, it is passed on to `WriteAscii`
    in `Clipboard`, which stores the text on the global clipboard:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用了ASCII格式，并且`IsCopyAsciiReady`返回`true`，则调用`CopyAscii`，该函数的目的是由子类覆盖以填充`asciiList`中的ASCII文本。当列表被复制后，它会被传递给`Clipboard`中的`WriteAscii`，该函数将文本存储在全局剪贴板中：
- en: '[PRE151]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: 'If the Unicode format applies and if `IsCopyUnicodeReady` returns `true`, `CopyUnicode`
    is called, which is intended to be overridden by subclasses to fill `unicodeList`
    with Unicode text. When the list has been copied, it is passed on to `WriteUnicode`
    in `Clipboard`, which stores the text on the global clipboard:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用了Unicode格式，并且`IsCopyUnicodeReady`返回`true`，则调用`CopyUnicode`，该函数的目的是由子类覆盖以填充`unicodeList`中的Unicode文本。当列表被复制后，它会被传递给`Clipboard`中的`WriteUnicode`，该函数将文本存储在全局剪贴板中：
- en: '[PRE152]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: 'If neither ASCII nor Unicode applies and if `IsCopyGenericReady` returns `true`,
    `CopyGeneric` is called, which is intended to be overridden by subclasses to fill
    the character list with generic information. In C++, a value of type `char` always
    holds one byte; it is therefore used in the absence of a more generic byte type.
    When the information has been copied to `infoList`, it is passed on to `WriteGeneric`
    in `Clipboard` to store the information on the global Clipboard:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 如果既不应用ASCII也不应用Unicode，并且`IsCopyGenericReady`返回`true`，则调用`CopyGeneric`，该函数的目的是由子类覆盖以填充字符列表中的通用信息。在C++中，`char`类型始终占用一个字节；因此，在没有更通用的字节类型的情况下使用。当信息被复制到`infoList`后，它会被传递给`Clipboard`中的`WriteGeneric`以在全局剪贴板上存储信息：
- en: '[PRE153]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: 'The `PasteEnable` method iterates through the paste format list given in the
    constructor and returns `true` if at least one of the formats is available on
    the global Clipboard:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '`PasteEnable`方法遍历构造函数中给出的粘贴格式列表，如果至少有一个格式在全局剪贴板上可用，则返回`true`：'
- en: '[PRE154]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: 'The `OnPaste` method iterates through the paste format list given in the constructor
    and, for each format, checks whether it is available on the global Clipboard.
    If it is, an appropriate method is called. Note that, while `OnCopy` iterates
    through the whole copy format list, `OnPaste` quits after the first format available
    on the Clipboard, which makes the order of the paste format list significant:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnPaste`方法遍历构造函数中给出的粘贴格式列表，并对每个格式检查它是否在全局剪贴板上可用。如果是，则调用适当的方法。请注意，虽然`OnCopy`遍历整个复制格式列表，但`OnPaste`在剪贴板上的第一个可用格式后就会退出，这使得粘贴格式列表的顺序变得重要：'
- en: '[PRE155]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: 'In the case of the ASCII format, `ReadAscii` in `Clipboard` is called, which
    reads the text list from the global clipboard and, if `IsPasteAsciiReady` returns
    `true`, calls `PasteAscii`, which is intended to be overridden by subclasses to
    do the actual application-specific pasting:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 在ASCII格式的情况下，`Clipboard`中的`ReadAscii`被调用，它从全局剪贴板读取文本列表，如果`IsPasteAsciiReady`返回`true`，则调用`PasteAscii`，该函数的目的是由子类覆盖以执行实际的应用特定粘贴：
- en: '[PRE156]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: 'In the case of the Unicode format, `ReadUnicode` in `Clipboard` is called,
    which reads the text list from the global clipboard and, if `IsPasteUnicodeReady`
    returns `true`, it calls `PasteUnicode`, which is intended to be overridden by
    subclasses to do the actual application-specific pasting:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unicode格式的情况下，`Clipboard`中的`ReadUnicode`被调用，它从全局剪贴板读取文本列表，如果`IsPasteUnicodeReady`返回`true`，则调用`PasteUnicode`，该函数的目的是由子类覆盖以执行实际的应用特定粘贴：
- en: '[PRE157]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: If neither ASCII nor Unicode applies, `ReadGeneric` in `Clipboard` is called
    to read the generic information from the global clipboard and, if `IsPasteGenericReady`
    returns `true`, it calls `PasteGeneric`, which is intended be overridden by subclasses
    to do the actual pasting.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 如果既不适用ASCII也不适用Unicode，则在`Clipboard`中调用`ReadGeneric`以从全局剪贴板读取通用信息，如果`IsPasteGenericReady`返回`true`，则调用`PasteGeneric`，该函数旨在由子类覆盖以执行实际的粘贴操作。
- en: 'One difference between copying and pasting in the generic case is that `OnCopy`
    uses a character list since it does not know the size in advance (if we used a
    memory block, we would need two methods: one that calculates the size of the block
    and one that does the actual reading, which would be cumbersome), while `OnPaste`
    uses a memory block, which cannot be converted into a character list since we
    do not know the size. Only the document-specific overridden version of `PasteGeneric`
    can decide the size of the memory block:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 在通用情况下，复制和粘贴之间的一个区别是`OnCopy`使用字符列表，因为它事先不知道大小（如果我们使用内存块，我们需要两个方法：一个计算块的大小，另一个执行实际的读取，这将很麻烦），而`OnPaste`使用内存块，由于我们不知道大小，因此不能转换为字符列表。只有文档特定的覆盖版本`PasteGeneric`可以决定内存块的大小：
- en: '[PRE158]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: Drop files
  id: totrans-347
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 丢弃文件
- en: 'When the user drops one or several files in the client area of the window,
    we check the file suffix of each filename. If we find exactly one file with one
    of the file suffixes of the document (the `fileSuffixList` field) we open it in
    the same way as if the user had opened it with the standard **Open** dialog:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在窗口的客户区域拖放一个或多个文件时，我们会检查每个文件名的文件后缀。如果我们找到恰好有一个文件具有文档的文件后缀之一（`fileSuffixList`字段），我们将以与用户使用标准**打开**对话框打开它相同的方式打开它：
- en: '[PRE159]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: 'We iterate through the path list and add every path with the file suffix to
    `pathSet`:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 我们遍历路径列表，并将具有文件后缀的每个路径添加到`pathSet`：
- en: '[PRE160]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: If `pathSet` is empty, no files with the file suffix have been dropped.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`pathSet`为空，则没有带有文件后缀的文件被丢弃。
- en: '[PRE161]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: 'If `pathSet` holds more than one file, too many files with the file suffix
    have been dropped:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`pathSet`包含多个文件，则丢弃了太多带有文件后缀的文件：
- en: '[PRE162]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: 'If `pathSet` holds exactly one file, it is read in the same way as if the user
    has selected the **Open** menu item:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`pathSet`恰好包含一个文件，它将以与用户选择**打开**菜单项相同的方式读取：
- en: '[PRE163]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: Page size
  id: totrans-358
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 页面大小
- en: 'The `PageOuterSize` method returns the page size with no regard to the margins.
    There are two page sizes, depending on the orientation in the **Page Setup** dialog.
    The page size given in the constructor refers to the `Portrait` orientation. In
    the case of the `Landscape` orientation, the width and height of the page are
    swapped:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '`PageOuterSize`方法返回不考虑边距的页面大小。根据**页面设置**对话框中的方向，有两种页面大小。构造函数中给出的页面大小指的是`Portrait`方向。在`Landscape`方向的情况下，页面的宽度和高度会互换：'
- en: '[PRE164]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: 'The `PageInnerSize` method returns the page size with regard to the margins.
    The width is subtracted by the left and right margins. The height is subtracted
    by the top and bottom margins. Remember that the margins are given in millimeters
    and the logical units are in hundredths of millimeters. Therefore, we multiply
    the margins by 100:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '`PageInnerSize`方法返回考虑边距的页面大小。宽度减去左和右边距。高度减去上和下边距。记住，边距是以毫米给出的，逻辑单位是毫米的百分之一。因此，我们将边距乘以100：'
- en: '[PRE165]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: 'The `PageInnerWidth` and `PageInnerHeight` methods return the width and height
    of the document after the margins have been subtracted. As the margins are given
    in millimeters and one millimeter is one hundred logical units, we multiply the
    margins by 100 in order to obtain logical units:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '`PageInnerWidth`和`PageInnerHeight`方法返回减去边距后的文档宽度和高度。由于边距是以毫米给出的，而一毫米等于一百逻辑单位，因此我们将边距乘以100以获得逻辑单位：'
- en: '[PRE166]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: Page setup
  id: totrans-365
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 页面设置
- en: 'The `OnPageSetup` method is called when the user selects the **Page Setup**
    menu item. It displays the **Page Setup** dialog (refer to [Chapter 12](ch12.html
    "Chapter 12. The Auxiliary Classes"), *The Auxiliary Classes*) and calls `OnPageSetup`,
    which is intended to be overridden by subclasses, to notify the application that
    the page setup information has been changed:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户选择**页面设置**菜单项时，会调用`OnPageSetup`方法。它显示**页面设置**对话框（参考[第12章](ch12.html "第12章。辅助类")，*辅助类*）并调用`OnPageSetup`，该函数旨在由子类覆盖，以通知应用程序页面设置信息已更改：
- en: '[PRE167]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: Printing
  id: totrans-368
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 打印
- en: 'The `OnPrintPreview` method is called when the user selects the **Print Preview**
    menu item. It displays the print preview document, which is more closely described
    in [Chapter 12](ch12.html "Chapter 12. The Auxiliary Classes"), *The Auxiliary
    Classes*. The `GetTotalPages` method returns the current number of pages in the
    document:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户选择 **打印预览** 菜单项时，会调用 `OnPrintPreview` 方法。它显示打印预览文档，这在 [第 12 章](ch12.html
    "第 12 章。辅助类") 中有更详细的描述，*辅助类*。`GetTotalPages` 方法返回文档中的当前页数：
- en: '[PRE168]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: The `OnPrintItem` method is called when the user selects the **Print** menu
    item. It displays the standard **Print** dialog and prints the pages of the document
    in accordance with the page interval and the order and number of copies specified
    by the user in the dialog.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户选择 **打印** 菜单项时，会调用 `OnPrintItem` 方法。它显示标准的 **打印** 对话框，并根据用户在对话框中指定的页面间隔、顺序和副本数量打印文档的页面：
- en: 'The method is named `OnPrintItem` so that it is not confused with `OnPrint`
    in `Window`, which is called when the window receives the `WM_PAINT` message.
    However, both methods could have been named `OnPrint` since they have different
    parameter lists:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法被命名为 `OnPrintItem`，这样就不会与 `Window` 中的 `OnPrint` 混淆，后者在窗口接收到 `WM_PAINT` 消息时被调用。然而，这两个方法本可以都命名为
    `OnPrint`，因为它们有不同的参数列表：
- en: '[PRE169]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: 'The `PrintDialog` method creates and returns a pointer to a `Graphics` object,
    if the user presses the **Ok** button, or a null pointer if the user presses the
    **Cancel** button. The `totalPages` parameters indicate the last possible page
    that the user can choose (the first possible page is 1). In the case of the **Ok**
    button, `firstPage`, `lastPage`, `copies`, and `sorted` are initialized: `firstPage`
    and `lastPage` are the page intervals to be printed, `copies` is the number of
    copies to be printed, and `sorted` indicates whether the copies (if more than
    one) will be sorted:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '`PrintDialog` 方法创建并返回一个指向 `Graphics` 对象的指针，如果用户按下 **确定** 按钮，或者如果用户按下 **取消**
    按钮，则返回一个空指针。`totalPages` 参数指示用户可以选择的最后一个可能的页面（第一个可能的页面是 1）。在按下 **确定** 按钮的情况下，`firstPage`、`lastPage`、`copies`
    和 `sorted` 被初始化：`firstPage` 和 `lastPage` 是要打印的页面间隔，`copies` 是要打印的副本数，而 `sorted`
    表示（如果多于一个）副本是否将被排序：'
- en: '[PRE170]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: 'The Win32 API function `StartDoc` initializes the printing process. It takes
    the device context connected to the printer by the `Graphics` object and a `DOCINFO`
    structure that only needs to be initialized with the document name. If `StartDoc`
    returns a value greater than zero, we are clear to print the pages. We prepare
    the device context and disable the window while the printing occurs:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: Win32 API 函数 `StartDoc` 初始化打印过程。它通过 `Graphics` 对象获取连接到打印机的设备上下文，以及一个 `DOCINFO`
    结构，该结构只需要初始化文档名称。如果 `StartDoc` 返回一个大于零的值，我们就可以打印页面。在打印过程中，我们准备设备上下文并禁用窗口：
- en: '[PRE171]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: 'If `sorted` is `true`, the pages are printed in the sorted order. For instance,
    let''s assume that `firstPage` is set to 1, `lastPage` is set to 3, and `copies`
    is set to 2\. If `sorted` is `true`, the pages are printed in order 1, 2, 3, 1,
    2, 3\. If `sorted` is `false`, they are printed in the order 1, 1, 2, 2, 3, 3\.
    `PrintPage` is called for each page and the printing continues as long as it returns
    true; `printOk` keeps track of whether the loop continues:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `sorted` 为 `true`，则页面按排序顺序打印。例如，假设 `firstPage` 设置为 1，`lastPage` 设置为 3，`copies`
    设置为 2。如果 `sorted` 为 `true`，则页面按顺序 1, 2, 3, 1, 2, 3 打印。如果 `sorted` 为 `false`，则按顺序
    1, 1, 2, 2, 3, 3 打印。`PrintPage` 对每个页面进行调用，并且只要它返回 `true`，打印就会继续；`printOk` 跟踪循环是否继续：
- en: '[PRE172]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: 'The Win32 API function `EndDoc` is used to finish printing:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: Win32 API 函数 `EndDoc` 用于完成打印：
- en: '[PRE173]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: 'The `PrintPage` method calls the Win32 API functions `StartPage` and `EndPage`
    before and after the printing of the page. If they both return values greater
    than zero, it indicates that the printing went well, `true` is returned, and more
    pages can be printed. `OnPrint` (overridden from `Window`) is called to do the
    actual printing, `page` and `copy` are the current page and copy, and `totalPages`
    is the number of pages in the document:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 在打印页面前后，`PrintPage` 方法调用 Win32 API 函数 `StartPage` 和 `EndPage`。如果它们都返回大于零的值，则表示打印成功，返回
    `true`，并且可以打印更多页面。调用 `OnPrint`（从 `Window` 中重写）来进行实际打印，`page` 和 `copy` 是当前页和副本，`totalPages`
    是文档中的页数：
- en: '[PRE174]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: 'The `OnPrint` method prints the information given by the `pageSetupInfo` field.
    Then, the contents of the documents are clipped and drawn by calling `OnDraw`,
    and finally the frame enclosing the contents of the document is drawn, if present:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnPrint`方法通过调用`pageSetupInfo`字段打印提供的信息。然后，通过调用`OnDraw`裁剪并绘制文档内容，如果存在，则绘制包围文档内容的框架：'
- en: '[PRE175]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: The document is cleared by being painted white.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 通过绘制白色来清除文档。
- en: '[PRE176]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: 'The header text is written unless it is empty; if the current page is the first
    page, it is not written:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 如果当前页面是第一页，除非为空，否则会写入页眉文本：
- en: '[PRE177]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: 'Similar to the header text, the footer text is written unless it is empty;
    if the current page is the first page, it is not written:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 与页眉文本类似，除非为空，否则会写入页脚文本；如果当前页面是第一页，则不会写入：
- en: '[PRE178]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: 'The current state of the device context is saved, the origin is set to the
    top-left corner of the current page, the area of the current page is clipped,
    `OnDraw` is called to draw the current page, and the paint area is finally restored:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 保存设备上下文当前状态，将原点设置为当前页面的左上角，裁剪当前页面的区域，调用`OnDraw`以绘制当前页面，并最终恢复绘图区域：
- en: '[PRE179]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: 'Finally, the page is enclosed by a rectangle if the frame field of the page
    setup information is `true`:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果页面设置信息中的框架字段为`true`，则页面被矩形包围：
- en: '[PRE180]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: Summary
  id: totrans-396
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we studied the document classes of Small Windows: `Document`,
    `Menu`, `Accelerator`, and `StandardDocument`. In [Chapter 12](ch12.html "Chapter 12. The
    Auxiliary Classes"), *The Auxiliary Classes*, we continue by looking into to the
    auxiliary classes of Small Windows.'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了小窗口的文档类：`Document`、`Menu`、`Accelerator`和`StandardDocument`。在[第12章](ch12.html
    "第12章。辅助类")《辅助类》中，我们继续探讨小窗口的辅助类。
