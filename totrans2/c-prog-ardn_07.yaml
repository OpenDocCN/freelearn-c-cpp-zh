- en: Chapter 7. Talking over Serial
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第七章. 通过串行通信
- en: We already saw that using Arduino is all about talking and sharing signals.
    Indeed, from the most basic component in Arduino, reacting to some physical world
    values by changing its environment and propagating the change as a basic message
    to its neighbors, to the now classic serial communication, electronic entities
    are talking among themselves and to us.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到，使用Arduino就是关于通信和共享信号。确实，从Arduino最基本的部分，通过改变其环境来响应一些物理世界的值，并将这种变化作为基本消息传播给其邻居，到现在的经典串行通信，电子实体之间以及与我们之间都在进行通信。
- en: As with the many concepts in this book, we have already used serial communication
    and the underlying Serial protocol a couple of times as a black-boxed tool, that
    is, a tool I have introduced but not explained.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 就像这本书中的许多概念一样，我们已经在几个地方使用了串行通信及其底层串行协议作为一个黑盒工具，也就是说，我介绍了一个工具但没有解释它。
- en: We are going to dive into it in this small chapter. We will discover that serial
    communication is used not only for machine-to-human communication but also for
    "component-to-component" discussions inside machines. By components, I mean small
    systems, and I could use the term peripheral to describe them.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中深入探讨这个问题。我们将发现，串行通信不仅用于人机通信，还用于机器内部的“组件到组件”的讨论。在这里，我所说的组件是指小型系统，我可以用外设这个词来描述它们。
- en: Serial communication
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 串行通信
- en: Typically, serial communication in computer science and telecommunications is
    a type of communication where data is sent one bit at a time over a communication
    bus.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机科学和电信中，串行通信通常是一种通信方式，其中数据逐位通过通信总线发送。
- en: Nowadays, we can see serial communication all around us, and often we don't
    even realize this. J The "S" in the **USB** acronym means Serial (USB is **Universal
    Serial Bus**), and represents the underlying serial communication bus used by
    every higher protocol.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们到处都能看到串行通信，而且我们往往甚至没有意识到这一点。**USB**缩写中的“S”代表串行（USB是**通用串行总线**），代表了每个更高协议使用的底层串行通信总线。
- en: Let's dig into that right now.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们立刻深入探讨这个问题。
- en: Serial and parallel communication
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 串行和并行通信
- en: 'Serial communication is often defined by its opposite form of communication,
    **parallel communication**, where several bits of data are sent out over a link
    made by several parallel channels at the same time. Look at the following figure:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 串行通信通常通过其相反的通信形式，即**并行通信**来定义，在这种通信中，多个数据位同时通过由多个并行通道组成的链路发送。看看下面的图：
- en: '![Serial and parallel communication](img/7584_07_01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![串行和并行通信](img/7584_07_01.jpg)'
- en: Basic, unidirectional serial communication between a speaker and a listener
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 发言者和听众之间基本、单向的串行通信
- en: 'Now let''s compare this to a parallel case:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来比较一下并行的情况：
- en: '![Serial and parallel communication](img/7584_07_02.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![串行和并行通信](img/7584_07_02.jpg)'
- en: Basic, unidirectional parallel communication between a speaker and a listener
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 发言者和听众之间基本、单向的并行通信
- en: 'In these two figures, a speaker is sending the following data byte: `0 1 1
    0 0 0 1 1`. These eight bits of data are sent sequentially over one channel in
    the case where serial communication has been used, and simultaneously over eight
    different channels in the case where parallel communication has been used.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两个图中，一个扬声器正在发送以下数据字节：`0 1 1 0 0 0 1 1`。在这些情况下，当使用串行通信时，这八个数据位是按顺序通过一个通道发送的，而当使用并行通信时，则是同时通过八个不同的通道发送。
- en: Right from small-distance to long-distance communications, even if the parallel
    approach seems faster at first glance because more than one bit of data is sent
    at the same time during a clock cycle, serial communication has progressively
    outperformed other forms of communication.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 从短距离到长距离通信，尽管从表面上看并行方法似乎更快，因为在时钟周期内同时发送多个数据位，但串行通信在逐渐超越其他通信形式。
- en: The first reason for this is the number of wires involved. For example, the
    parallel approach used in our small example requires eight channels to drive our
    eight bits of data at the same time, while the serial requires only one. We'll
    discuss what a channel is very soon, but with one wire, the ratio 1:8 would save
    us money if we were to use serial communication.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况下的第一个原因是涉及的线缆数量。例如，在我们的小例子中使用的并行方法需要八个通道来同时驱动我们的八个数据位，而串行通信只需要一个。我们很快就会讨论什么是通道，但如果我们使用串行通信，仅一根线缆的1:8比例就能节省我们很多钱。
- en: 'The second major reason is the fact that we finally achieved to make serial
    communication very fast. This has been achieved due to the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个主要原因是，我们最终实现了使串行通信非常快速。这是由于以下原因：
- en: Firstly, **propagation time** is easier to handle with a smaller number of wires
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，**传播时间**在较少的线缆中更容易处理
- en: Secondly, **crosstalk** is less with fewer channels than with a higher density
    of channels such as those found in parallel links
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其次，**串扰**在通道较少的情况下比在通道密度较高的并行链路中要少
- en: Thirdly, because there are fewer wires involved, we can save space (and money)
    and often use this saved space to shield our wires better
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三，由于涉及的线缆较少，我们可以节省空间（和金钱），并且经常利用这些节省的空间来更好地屏蔽我们的线缆
- en: Nowadays, serial communication bandwidths range from several megabits per second
    to more than 1 terabit per second (which means 1,000 gigabits per second), and
    a lot of media can be used from wire-driven fibers to wireless, and from copper
    cables to optical fibers. As you might suspect, there are many serial protocols
    that are used.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，串行通信的带宽从每秒几兆比特到超过1太比特（即1,000千兆比特），可以使用多种媒体，从有线光纤到无线，从铜缆到光纤。正如你可能猜到的，有许多串行协议被使用。
- en: Types and characteristics of serial communications
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 串行通信的类型和特性
- en: Whether it be synchronism or duplex mode or bus or peering, serial communication
    can be defined differently, and we have to dig into that point here.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是对称性、双工模式、总线还是对等，串行通信都可以有不同的定义，我们必须深入探讨这一点。
- en: Synchronous or asynchronous
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 同步或异步
- en: Serial communication can either be synchronous or not.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 串行通信可以是同步的，也可以不是。
- en: '**Synchronous** communication involves a clock, which we can call a master
    clock, that keeps a reference time for all the participants of the communication.
    The first example that comes to mind is phone communication.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**同步**通信涉及一个时钟，我们可以称之为主时钟，为通信的所有参与者保持参考时间。第一个想到的例子是电话通信。'
- en: '**Asynchronous** communication doesn''t require that the clock''s data be sent
    over the serial channel(s); this makes it easier to communicate but it can lead
    to some issues with understandability at times. Mailing and texting are asynchronous
    types of communication.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**异步**通信不需要时钟数据通过串行通道（s）发送；这使得通信更容易，但有时可能导致一些理解上的问题。邮寄和短信是异步通信类型。'
- en: Duplex mode
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 双工模式
- en: 'The duplex mode is a particular characteristic of a communication channel.
    It can be:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 双工模式是通信通道的一个特定特性。它可以：
- en: '**Simplex**: Unidirectional only (data is passed only in one direction, between
    two points)'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单工**：单向（数据只在两个点之间单向传递）'
- en: '**Half-duplex** : Bidirectional, but only in one direction at the same time'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**半双工**：双向，但同一时间只能在一个方向上'
- en: '**Full-duplex** : Bidirectional simultaneously'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全双工**：双向同时'
- en: Half-duplex is obviously more useful than simplex, but it has to run a collision
    detection and retransmission process. Indeed, when you are talking to your friend,
    you are also sharing the same media (the room and air inside the room that carries
    vibrations from your mouth to his ears), and if you are talking at the same time,
    usually one checks that and stops and tells the other to repeat.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 半双工显然比单工更有用，但它必须运行碰撞检测和重传过程。确实，当你和朋友交谈时，你也在共享相同的媒体（房间和房间内的空气，它携带从你的嘴到他的耳朵的振动），如果你同时说话，通常一个人会检查这一点，然后停下来告诉另一个人重复。
- en: Full-duplex requires more channels. That way no collisions occur and all the
    collision detection and retransmission processes can be dropped. The detection
    of other errors and fixing is still involved, but usually it is much easier.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 全双工需要更多的通道。这样就不会发生碰撞，并且可以取消所有碰撞检测和重传过程。其他错误的检测和修复仍然涉及，但通常要容易得多。
- en: Peering and bus
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对等和总线
- en: In a **peering** system, the speakers are linked to listeners either physically
    or logically. There is no master, and these kinds of interfaces are most often
    asynchronous.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在**对等**系统中，说话者通过物理或逻辑方式连接到听众。没有主控，这类接口通常是异步的。
- en: In a **bus**, they will all get connected physically at some point and some
    logical commutations will occur.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在**总线**中，它们最终会在某个物理位置连接起来，并且会发生一些逻辑交换。
- en: '![Peering and bus](img/7584_07_08.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![对等和总线](img/7584_07_08.jpg)'
- en: An example of a multibus system
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一个多总线系统的例子
- en: Master and slave buses
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 主从总线
- en: In master/slave buses, one device is the master and the others are the slaves,
    and this usually involves synchronism where the master participant generates the
    timing clock.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在主/从总线上，一个设备是主设备，其他的是从设备，这通常涉及到同步，其中主参与者生成定时时钟。
- en: The main difficulty with serial communication is to avoid collisions and misunderstandings.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 串行通信的主要困难是避免冲突和误解。
- en: There are a lot of solutions that can be implemented to solve these problems,
    such as using multiple physical link types and specific preexisting communication
    protocols. Let's check some of these, and especially those we can use with Arduino
    of course.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多解决方案可以实施来解决这些问题，例如使用多种物理链路类型和特定的现有通信协议。让我们检查一些这些，特别是那些我们可以与Arduino一起使用的。
- en: Data encoding
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据编码
- en: 'The most important things to define when we use serial protocols for our communication
    are as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用串行协议进行通信时，需要定义的最重要的事情如下：
- en: The word length in bits
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字长（以比特为单位）
- en: Whether a stop bit is present or not (defines a blank moment in time)
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否存在停止位（定义了时间上的空白时刻）
- en: Whether a parity bit is present or not (defines the simplest, error-detecting,
    code-based solution)
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否存在奇偶校验位（定义了最简单、基于错误检测的代码解决方案）
- en: Indeed, especially in asynchronous communication, how could a listener know
    where a word begins or ends without these properties? Usually, we hardcode this
    behavior in both the participants' brains in order to be sure we have a valid
    communication protocol.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，特别是在异步通信中，没有这些属性，一个听者如何知道一个字开始或结束在哪里呢？通常，我们会在参与者的脑海中硬编码这种行为，以确保我们有有效的通信协议。
- en: In the first figure of this chapter, I sent eight bits of data over the channel.
    This equals 1 byte.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的第一幅图中，我通过该通道发送了8位数据。这等于1字节。
- en: We often write the types of serial communication as `<word length><parity><stop>`.
    For instance, 8 bit without parity but one stop is written as `8N1`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常将串行通信的类型写成 `<word length><parity><stop>`。例如，8位无奇偶校验但一个停止位的写法为 `8N1`。
- en: I won't describe the parity bit completely, but you should know that it is basically
    a checksum. Using this concept, we transmit a word and checksum, after which we
    verify the binary sum of all the bits in my received word. In this way, the listener
    can check the integrity of the words that were received quite easily, but in a
    very primitive way. An error can occur, but this is the cheapest way; it can avoid
    a lot of errors and is statistically right.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会完全描述奇偶校验位，但你应该知道它基本上是一个校验和。使用这个概念，我们发送一个字和一个校验和，然后我们验证接收到的字中所有位的二进制和。这样，听者可以非常容易地检查接收到的字的完整性，但方式非常原始。可能会发生错误，但这是最便宜的方法；它可以避免许多错误，并且从统计上来说是正确的。
- en: 'A global frame of data with the `8N1` type serial communication contains 10
    bits:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `8N1` 类型串行通信的全局数据帧包含10位：
- en: One start bit
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个起始位
- en: Eight bits for each characters
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个字符8位
- en: One stop bit
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个停止位
- en: Indeed, only 80 percent of the data sent is the real payload. We are always
    trying to reduce the amount of flow control data that is sent because it can save
    bandwidth and ultimately time.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，发送的数据中只有80%是真实的有效负载。我们一直在尝试减少发送的流量控制数据的数量，因为这可以节省带宽并最终节省时间。
- en: Multiple serial interfaces
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多个串行接口
- en: I won't describe all the serial protocols, but I'd like to talk about some important
    ones, and sort them into families.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会描述所有的串行协议，但我想要谈谈一些重要的，并将它们分类。
- en: The powerful Morse code telegraphy ancestor
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 强大的摩尔斯电码电报祖先
- en: 'I give you one of the oldest Serial protocols: the Morse code telegraphy protocol.
    Telecommunications operators have been using this one since the second half of
    the 19th century.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我给你介绍一种最古老的串行协议：摩尔斯电码电报协议。电信运营商自19世纪下半叶以来一直在使用这个协议。
- en: I have to say that Samuel F. B. Morse was not only an inventor but also an accomplished
    artist and painter. It is important to mention this here because I'm really convinced
    that art and technology are finally one and the same thing that we used to see
    with two different points of view. I could quote more artist/inventor persons
    but I guess it would be a bit off topic.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我必须说，Samuel F. B. Morse不仅是一位发明家，而且是一位技艺高超的艺术家和画家。在这里提到这一点很重要，因为我真的相信艺术和技术最终是同一件事，我们曾经用两种不同的观点来看待。我可以引用更多的艺术家/发明家，但我猜这会有些离题。
- en: 'By sending long and short pulses separated by blanks, Morse''s operators can
    send words, sentences, and information. This can happen over multiple types of
    media, such as:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 通过发送长脉冲和短脉冲，并在空白处分隔，莫尔斯电码的操作员可以发送单词、句子和信息。这可以通过多种类型的媒体发生，例如：
- en: Wires (electrical pulses)
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电缆（电脉冲）
- en: Air (electromagnetic wave carriers, light, sounds)
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空气（电磁波载体、光、声音）
- en: It can be sorted into a peered, half-duplex, and asynchronous communication
    system.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以被分类为对等、半双工和异步通信系统。
- en: There are some rules about the duration of pulses ranging from long to short
    to blank, but this remains asynchronous because there isn't really a clock shared
    between both participants.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 关于脉冲持续时间有一些规则，从长到短再到空白，但这仍然是异步的，因为双方之间并没有真正共享的时钟。
- en: The famous RS-232
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 著名的RS-232
- en: RS-232 is a common interface that you will find on all personal computers. It
    defines a complete standard for electrical to physical (and electrical to mechanical)
    characteristics, such as connection hardware, pins, and signal names. RS-232 was
    introduced in 1962 and is still widely used. This point-to-point interface can
    drive data up to 20 Kbps (kilobit per second = 20,000 bits per second) for moderate
    distances. Even though it isn't specified in the standard, we will usually find
    instances where the speed is greater than 115.2 Kbps on short and shielded wires.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: RS-232是一种常见的接口，你将在所有个人计算机上找到它。它定义了一个完整的电气到物理（以及电气到机械）特性的标准，例如连接硬件、引脚和信号名称。RS-232于1962年推出，至今仍被广泛使用。这种点对点接口可以在适中的距离上驱动高达20
    Kbps（每秒千比特=每秒20,000比特）的数据。尽管标准中没有规定，但通常我们会在短而屏蔽的电缆上找到速度超过115.2 Kbps的实例。
- en: I myself use cables that are 20 meters long with sensors that transmit their
    data over serial to Arduino for different installations. Some friends use cables
    that are 50 meters long, but I don't do that and prefer other solutions such as
    Ethernet.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我自己使用20米长的电缆，传感器通过串行传输数据到Arduino，用于不同的安装。有些朋友使用50米长的电缆，但我没有这么做，更倾向于其他解决方案，如以太网。
- en: From 25 wires to 3
  id: totrans-72
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 从25根线到3根
- en: 'If the standard defines a 25-pin connector and link, we can reduce this huge
    number required for multiple hardware flow control, error detections, and more
    to only three wires:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果标准定义了25针连接器和链路，我们可以将所需的多个硬件流控制、错误检测等大量电线/信号减少到只有三根：
- en: Transmit data (usually written as TX)
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传输数据（通常写作TX）
- en: Receive data (usually written as RX)
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接收数据（通常写作RX）
- en: Ground
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地线
- en: The connector with 25 pins/wires is named DB25 and has been used a lot, for
    peripherals such as printers. There is another type of connector named DB9 with
    9 pins/wires only. This is a variant that omits more wires than DB25\. This DB9
    has been used a lot for connecting mouse devices.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 有25个引脚/线的连接器被称为DB25，并且被广泛用于打印机等外围设备。还有一种名为DB9的连接器，只有9个引脚/线。这是比DB25省去更多线的变体。这种DB9被广泛用于连接鼠标设备。
- en: 'But how can we omit a large number of wires/signals and keep the serial communication
    working well? Basically, as with many standards, it has been designed to fit a
    lot of use cases. For instance, in the full version of DB25, there are pins 8
    and 22 that are dedicated to phone lines: the first one is the **Data Carrier
    Detect** and the second one is the **Ring Indicator** . The signal sent over pins
    4 and 5 is used for a handshake between the participants.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们如何省去大量电线/信号，同时保持串行通信良好工作？基本上，就像许多标准一样，它已经被设计来适应许多用例。例如，在DB25的全版本中，有8号和22号引脚是专门用于电话线的：第一个是**数据载波检测**，第二个是**振铃指示器**。通过4号和5号引脚发送的信号用于参与者之间的握手。
- en: In this standard, pin 7 is the common ground and 2 and 3 are respectively TX
    and RX. With only these three, we can make our serial asynchronous communication
    correctly.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在本标准中，引脚7是公共地，2和3分别代表TX和RX。仅使用这三个引脚，我们就可以正确地进行串行异步通信。
- en: '![From 25 wires to 3](img/7584_07_03.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![从25根线到3根](img/7584_07_03.jpg)'
- en: The DB25 connector
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: DB25连接器
- en: '![From 25 wires to 3](img/7584_07_04.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![从25根线到3根](img/7584_07_04.jpg)'
- en: The DB9 connector
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: DB9连接器
- en: 'Our precious Arduino provides this three-wire serial alternative. Of course,
    each type of board doesn''t provide the same number of serial interfaces, but
    the principle remains the same: a serial interface based on three-wire is available.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们宝贵的Arduino提供了这种三线串行替代方案。当然，每种类型的板子提供的串行接口数量并不相同，但原理是一样的：基于三线的串行接口是可用的。
- en: Arduino Uno and Leonardo provide the three wires TX, RX, and ground, while freshly
    released Arduino Mega 2560 and Arduino Due ([http://arduino.cc/en/Main/ArduinoBoardDue](http://arduino.cc/en/Main/ArduinoBoardDue))
    provide four different serial communication interface names right from RX0 and
    TX0 to RX3 and TX3.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino Uno和Leonardo提供了TX、RX和地三个引脚，而新发布的Arduino Mega 2560和Arduino Due ([http://arduino.cc/en/Main/ArduinoBoardDue](http://arduino.cc/en/Main/ArduinoBoardDue))则提供了从RX0和TX0到RX3和TX3的四个不同的串行通信接口名称。
- en: We are going to describe another type of serial interface standard, and we'll
    come back to RS-232 with the famous integrated circuit made by FTDI that provides
    a very efficient way to convert RS-232 to USB.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将描述另一种串行接口标准，然后我们将回到使用FTDI制造的著名集成电路的RS-232，它提供了一种非常有效的方法将RS-232转换为USB。
- en: The elegant I2C
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 优雅的I2C
- en: The I2C multimaster serial single-ended computer bus has been designed by Philips
    and requires a license for any hardware implementations.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 由Philips设计的I2C多主串行单端计算机总线需要任何硬件实现都获得许可。
- en: 'One of its advantages is the fact that it uses only two wires: **SDA** (**Serial
    Data Line**) with a 7-bit addressing system and **SCL** (**Serial Clock Line**).'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 其中的一个优点是它只使用两根线：**SDA**（**串行数据线**）具有7位寻址系统和**SCL**（**串行时钟线**）。
- en: This interface is really nice considering its addressing system. In order to
    use it, we have to build the two wire-based bus from Arduino, which is the master
    here.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到其寻址系统，这个接口真的很不错。为了使用它，我们必须从Arduino构建两个基于引脚的总线，在这里Arduino是主设备。
- en: '![The elegant I2C](img/7584_07_06.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![优雅的I2C](img/7584_07_06.jpg)'
- en: BlinkM modules connected as an I2C bus to the Arduino Uno R3
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 将BlinkM模块作为I2C总线连接到Arduino Uno R3
- en: In order to know which pins have to be used for each Arduino board, you can
    directly check the information at [http://www.arduino.cc/en/Reference/Wire](http://www.arduino.cc/en/Reference/Wire).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 为了知道每个Arduino板需要使用哪些引脚，你可以直接查看[http://www.arduino.cc/en/Reference/Wire](http://www.arduino.cc/en/Reference/Wire)上的信息。
- en: '**BlinkM** modules ([http://thingm.com/products/blinkm](http://thingm.com/products/blinkm))
    are RGB LED modules with a small form factor that are quite easy to manipulate
    on I2C buses. I also used it a lot to more or less control big LCDs with Arduino.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**BlinkM**模块([http://thingm.com/products/blinkm](http://thingm.com/products/blinkm))是具有小型尺寸的RGB
    LED模块，在I2C总线上操作起来相当简单。我也用它大量控制大型的LCD屏幕，使用Arduino。'
- en: This is also the page of the `Wire` library for Arduino. Nowadays, this library
    is included with the Arduino core. Considering the complexity of the standard,
    the cost increases when you have a lot of elements on the buses. Because of its
    two wires and the precision of data integrity, this is still an elegant solution
    for short-distance and intermittent communication inside the same box. The **Two
    Wire Interface** (**TWI**) is principally the same standard as I2C. It was known
    by another name when the patents on I2C were still running.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这也是Arduino的`Wire`库页面。如今，这个库已经包含在Arduino核心中。考虑到标准的复杂性，当总线上有大量元素时，成本会增加。由于其两根引脚和数据完整性的精度，这仍然是在同一盒子内进行短距离和间歇性通信的一种优雅解决方案。**双线接口**（**TWI**）原则上与I2C相同标准。当I2C的专利仍在运行时，它以另一个名称为人所知。
- en: I2C has been the base for many other interface protocols, such as VESA DDC (a
    digital link between screens and graphical card), SMBus by Intel, and some others.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: I2C已经成为许多其他接口协议的基础，如VESA DDC（屏幕和图形卡之间的数字连接）、Intel的SMBus以及一些其他协议。
- en: The synchronous SPI
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 同步SPI
- en: '**SPI** stands for **Serial Peripheral Interface**, which has been developed
    by Motorola. It uses the following four wires:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**SPI**代表**串行外围接口**，由Motorola开发。它使用以下四根线：'
- en: '**SCLK**: This is the serial clock driven by the master'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SCLK**：这是由主设备驱动的串行时钟'
- en: '**MOSI**: This is the master output / slave input driven by the master'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MOSI**：这是由主设备驱动的主输出/从输入'
- en: '**MISO**: This is the master input / slave output driven by the master'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MISO**：这是由主设备驱动的主输入/从输出'
- en: '**SS**: This is the slave-selection wire'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SS**：这是从机选择线'
- en: It is very useful in point-to-point communication where there is only one master
    and one slave, even if we find many applications with more than one slave on the
    SPI bus.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在点对点通信中，即使我们在SPI总线上发现许多具有多个从机的应用，这种用法仍然非常有用，其中只有一个主设备和一个从设备。
- en: Since SPI is a full-duplex, mode-based interface, we can achieve higher data
    rates than we can with I2C. It is often used for communication between a coder/decoder
    and a digital signal processor; this communication consists of sending samples
    in and out at the same time. SPI lacking device addressing is also a huge advantage
    as it makes it much lighter and thus faster in case you don't need this feature.
    Indeed, I2C and SPI are really complementary to each other depending on what you
    want to achieve.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 由于SPI是一种基于模式的全双工接口，我们可以实现比I2C更高的数据传输速率。它通常用于编码器/解码器和数字信号处理器之间的通信；这种通信包括同时发送和接收样本。SPI缺少设备寻址也是一个巨大的优势，因为它使得系统更加轻量级，因此在不需要此功能的情况下，速度更快。确实，I2C和SPI根据您想要实现的目标，彼此之间是非常互补的。
- en: There is information available online regarding SPI in the Arduino boards ([http://arduino.cc/en/Reference/SPI](http://arduino.cc/en/Reference/SPI)),
    but you have to know that we can easily use any digital pins as one of the four
    wires included in SPI.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在Arduino板上有关SPI的信息可在网上找到([http://arduino.cc/en/Reference/SPI](http://arduino.cc/en/Reference/SPI))，但您必须知道我们可以轻松地将任何数字引脚用作SPI中包含的四根线之一。
- en: I personally have often used it in projects involving a lot of shift registers
    that are all daisy-chained to have a lot of inputs and/or outputs with Arduino
    Uno and even Arduino Mega, this latter offering more outputs and inputs natively.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我个人在涉及大量移位寄存器的项目中经常使用它，这些寄存器都通过Arduino Uno和甚至Arduino Mega串联起来，后者提供了更多的原生输出和输入。
- en: We'll describe the use of shift registers in the next chapter when I show you
    how to multiplex outputs quite easily with some smart and, ultimately, very simple
    integrated circuits linked to Arduino through SPI.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我将向您介绍如何使用移位寄存器，届时我会向您展示如何通过SPI轻松地使用一些智能且最终非常简单的集成电路来复用输出，这些集成电路通过SPI连接到Arduino。
- en: The omnipresent USB
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 普及的USB
- en: USB is the Universal Serial Bus standard. This is probably the one you use the
    most.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: USB是通用串行总线标准。这可能是您使用得最多的一个。
- en: The main advantage of this standard is the Plug and Play feature of USB devices.
    You can plug and unplug devices without restarting your computer.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 该标准的主要优势是USB设备的即插即用功能。您可以在不重新启动计算机的情况下插入和拔出设备。
- en: 'USB has been designed to standardize the connection of a wide variety of computer
    peripherals, including the following:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: USB被设计成标准化连接各种计算机外围设备，包括以下设备：
- en: Audio (speaker, microphone, sound card, MIDI)
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 音频（扬声器，麦克风，声卡，MIDI）
- en: Communications (modem, Wi-Fi, and Ethernet)
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通信（调制解调器，Wi-Fi和以太网）
- en: Human interface device (HID, keyboard, mouse, joystick)
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 人类界面设备（HID，键盘，鼠标，游戏手柄）
- en: Image and video (webcam, scanner)
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图像和视频（网络摄像头、扫描仪）
- en: Printer
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打印机
- en: Mass storage (flash drive, memory card, drive)
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大容量存储（闪存驱动器，存储卡，驱动器）
- en: Wireless (infrared)
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无线（红外）
- en: And there are many more types too. The standard is actually Version 3.0\. A
    USB bus can contain up to 127 peripherals and can supply a maximum of 500 to 900
    mA for general devices.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他类型。该标准实际上是3.0版本。USB总线可以包含多达127个外围设备，并为通用设备提供最大500到900毫安的电流。
- en: USB system design
  id: totrans-120
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: USB系统设计
- en: The architecture of USB is an asymmetrical topology consisting of one host and
    a multitude of downstream USB ports and multiple peripheral devices connected
    in a tiered-star topology.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: USB的架构是不对称拓扑，由一个主机和多个下游USB端口以及多个以分层星状拓扑连接的外围设备组成。
- en: USB hubs can be included in the tiers allowing branching up to five tier levels.
    This results in a tree topology. This is why you can stack hubs on hubs.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: USB集线器可以包含在层级中，允许分支到五级。这导致树状拓扑。这就是为什么您可以在集线器上堆叠集线器。
- en: Device classes provide a way of having an adaptable and device-independent host
    to support new devices. An ID that the host can recognize defines each class.
    You can find all the approved classes at [http://www.usb.org/developers/devclass](http://www.usb.org/developers/devclass)
    on the official USB standard website.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 设备类别提供了一种方式，即具有适应性和设备无关的主机来支持新设备。主机可以识别的ID定义了每个类别。您可以在官方USB标准网站上找到所有批准的类别[http://www.usb.org/developers/devclass](http://www.usb.org/developers/devclass)。
- en: USB connectors and cables
  id: totrans-124
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: USB连接器和电缆
- en: 'A USB standard plug contains four wires ([http://en.wikipedia.org/wiki/Universal_Serial_Bus](http://en.wikipedia.org/wiki/Universal_Serial_Bus)):'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 一个USB标准插头包含四根线([http://en.wikipedia.org/wiki/Universal_Serial_Bus](http://en.wikipedia.org/wiki/Universal_Serial_Bus))：
- en: Vcc (+5 V)
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vcc (+5 V)
- en: Data-
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据-
- en: Data+
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据+
- en: Ground![USB connectors and cables](img/7584_07_07.jpg)
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地线![USB连接器和电缆](img/7584_07_07.jpg)
- en: The USB standard A and B plugs
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: USB标准A型和B型插头
- en: Cables are shielded; their usual maximal lengths are around two to five meters.
    I already used a 12-meter cable for the USB port. It worked totally fine with
    a cable that I myself soldered in an electromagnetic-safe environment, I mean,
    in a place where my cable was alone behind a wall and not mixed with a lot of
    other cables, especially the ones supplying power.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 电缆是屏蔽的；它们的通常最大长度在两到五米左右。我已经使用了一根12米的电缆连接USB端口。使用我自己在一个电磁安全环境中焊接的电缆，也就是说，在一个我的电缆独自位于墙后且没有与其他许多电缆混合的地方，特别是那些供电的电缆，它完全正常工作。
- en: There are some other types of plug that are somewhat bigger, but the requirement
    of having at least four wires remains the same.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些其他类型的插头稍微大一些，但至少需要四根线的需求保持不变。
- en: FTDI IC converting RS-232 to USB
  id: totrans-133
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: FTDI IC将RS-232转换为USB
- en: Except for some versions, such as the Arduino Pro Mini, Arduino boards provide
    a USB connector, as you already know and have used.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 除了某些版本，如Arduino Pro Mini之外，Arduino板提供USB连接器，正如你所知并已使用的那样。
- en: This provides the basic power supply feature for a computer or the hubs connected
    to a computer, and it is used for communication too.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这为计算机或连接到计算机的集线器提供了基本的电源功能，同时也用于通信。
- en: The FTDI integrated circuit EEPROM named FT232 provides a way of converting
    USB into an RS-232 interface. This is why we can use the serial communication
    features of the Arduino boards over USB without the need for an external serial
    port interface from the Arduino pins related to serial communication, which are
    TX and RX. New boards include an Atmega16U2 that provides serial communication
    features.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: FTDI集成电路EEPROM名为FT232，提供了一种将USB转换为RS-232接口的方法。这就是为什么我们可以在USB上使用Arduino板的串行通信功能，而无需从与串行通信相关的Arduino引脚（即TX和RX）的外部串行端口接口。新板包括一个提供串行通信功能的Atmega16U2。
- en: 'Indeed, as soon as you connect your Arduino board to a computer, you will have
    a serial communication feature available. We already used it with:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 的确，当你将Arduino板连接到计算机时，你将有一个可用的串行通信功能。我们已经在以下情况下使用过它：
- en: Arduino IDE (Serial Monitor)
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino IDE（串行监视器）
- en: Processing (with the serial library)
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Processing（带有串行库）
- en: Max 6 (with the serial object)
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最大6（带有串行对象）
- en: I guess you also recall that we weren't able to use the Serial Monitor while
    using Max 6's serial object polling feature.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我想你也记得，当我们使用Max 6的串行对象轮询功能时，我们无法使用串行监视器。
- en: Do you understand why now? Only one point-to-point link can be active at the
    same time on the wires and in the virtual world of computers. It's the same for
    physical links, too. I warned you not to use the digital pins 0 and 1 as soon
    as you needed to use serial communication with the Arduino board, especially the
    Diecimilla version. These pins are directly connected to the corresponding RX
    and TX pins of the FTDI USB-to-TTL serial chip.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在明白为什么了吗？在电线和计算机的虚拟世界中，同一时间只能有一个点对点链接是活跃的。物理链接也是如此。我警告过你，当你需要使用Arduino板进行串行通信时，不要使用数字引脚0和1，尤其是Diecimilla版本。这些引脚直接连接到FTDI
    USB到TTL串行芯片的相应RX和TX引脚。
- en: Note
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you use serial communication over the USB feature, you have to avoid using
    the digital pins 0 and 1.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用USB功能进行串行通信，你必须避免使用数字引脚0和1。
- en: Summary
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we talked about serial communication. This is a very common
    mode of communication both inside and between electronic devices. This chapter
    is also a nice introduction to other communication protocol in general, and I'm
    sure that you are now ready to understand more advanced features.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了串行通信。这是电子设备内部和之间非常常见的一种通信方式。本章也是对其他通用通信协议的良好介绍，我相信你现在已经准备好理解更高级的功能。
- en: In the next chapter, we'll use some of the different types of serial protocol
    that were introduced here. In particular, we are going to talk about Arduino outputs;
    this means that not only will we be able to add feedback and reactions to our
    Arduino boards, considering behavior pattern designs such as stimulus and response
    for deterministic ways, but we will also see more chaotic behaviors such as those
    including constrained chance, for instance.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用这里介绍的一些不同类型的串行协议。特别是，我们将讨论Arduino输出；这意味着我们不仅能够为我们的Arduino板添加反馈和反应，考虑到行为模式设计，如刺激和响应的确定性方式，我们还将看到更多混沌的行为，例如包括受限制的随机性等。
