["```cpp\n#include \"tictactoewidget.h\"\n#include <QApplication>\n\nint main(int argc, char *argv[]) {\n  QApplication a(argc, argv);\n  TicTacToeWidget w;\n  w.show();\n  return a.exec();\n}\n```", "```cpp\nQT += core gui\ngreaterThan(QT_MAJOR_VERSION, 4): QT += widgets\nTARGET = tictactoe\nTEMPLATE = app\nSOURCES += main.cpp tictactoewidget.cpp\nHEADERS += tictactoewidget.h\n```", "```cpp\nTicTacToeWidget::TicTacToeWidget(QWidget *parent)\n    : QWidget(parent)\n{\n}\n```", "```cpp\nQHBoxLayout *layout = new QHBoxLayout(parentWidget);\nQPushButton *button1 = new QPushButton;\nQPushButton *button2 = new QPushButton;\nlayout->addWidget(button1);\nlayout->addWidget(button2);\n```", "```cpp\nlayout->setSpacing(10);\nlayout->setMargins(10, 5, 10, 5); // left, top, right, bottom\n```", "```cpp\n#ifndef TICTACTOEWIDGET_H\n#define TICTACTOEWIDGET_H\n#include <QWidget>\nclass QPushButton;\n\nclass TicTacToeWidget : public QWidget\n{\n  Q_OBJECT\n\npublic:\n  TicTacToeWidget(QWidget *parent = 0);\n  ~TicTacToeWidget();\nprivate:\n QList<QPushButton*> board;\n};\n#endif // TICTACTOEWIDGET_H\n```", "```cpp\nQGridLayout *gridLayout = new QGridLayout;\n```", "```cpp\nfor(int row = 0; row < 3; ++row) {\n  for(int column = 0; column < 3; ++column) {\n    QPushButton *button = new QPushButton;\n    button->setSizePolicy(QSizePolicy::Minimum, QSizePolicy::Minimum);\n    button->setText(\" \");\n    gridLayout->addWidget(button, row, column);\n    board.append(button);\n  }\n}\n```", "```cpp\nsetLayout(gridLayout);\n```", "```cpp\nTicTacToeWidget::TicTacToeWidget(QWidget *parent)\n        : QWidget(parent)\n{\n setupBoard();\n}\n```", "```cpp\nvoid TicTacToeWidget::initNewGame() {\n  for(int i=0; i<9; ++i) board.at(i)->setText(\" \");\n}\n```", "```cpp\nclass ObjectWithSignalsAndSlots : public QObject {\n  Q_OBJECT\npublic:\n  ObjectWithSignalsAndSlots(QObject *parent = 0) : QObject(parent) {\n  }\npublic slots:\n  void setValue(int v) { … }\n  void setColor(QColor c) { … }\nprivate slots:\n  void doSomethingPrivate();\nsignals:\n  void valueChanged(int);\n  void colorChanged(QColor);\n};\n\nvoid ObjectWithSignalsAndSlots::doSomethingPrivate() {\n  // …\n}\n```", "```cpp\nconnect(spinBox, SIGNAL(valueChanged(int)), dial, SLOT(setValue(int)));\n```", "```cpp\nconnect(spinBox, SIGNAL(valueChanged(int)), lineEdit, SLOT(clear()));\n```", "```cpp\nconnect(button, SIGNAL(clicked()), lineEdit, SLOT(setText(QString)));\n```", "```cpp\nconnect(button, &QPushButton::clicked, lineEdit, &QLineEdit::clear);\n```", "```cpp\nclass MyClass : public QObject {\n  Q_OBJECT\npublic:\n  MyClass(QObject *parent = 0) : QObject(parent) {\n connect(this, &MyClass::somethingHappened, this, &MyClass::setValue);\n  }\n  void setValue(int v) { … }\nsignals:\n  void somethingHappened(double);\n};\n```", "```cpp\nconnect(button, &QPushButton::clicked, &someFunction);\n```", "```cpp\nconnect(pushButton, SIGNAL(clicked()), []() { std::cout << \"clicked!\" << std::endl; });\n```", "```cpp\nconnect(pushButton, SIGNAL(clicked()), [label]() { label->setText(\"button was clicked\"); });\n```", "```cpp\nclass Functor {\npublic:\n  Functor(Object *object, const QString &str) : m_object(object), m_str(str) {}\n  void operator()(int x, int y) const {\n    m_object->set(x, y, m_str);\n  }\nprivate:\n  Object *m_object;\n  QString m_str;\n};\n\nconnect(obj1, SIGNAL(coordChanged(int, int)), Functor(\"Some Text\"));\n```", "```cpp\nvoid TicTacToeWidget::someSlot() {\n QObject *btn = sender();\n  int idx = board.indexOf(btn);\n  QPushButton *button = board.at(idx);\n  // ...\n}\n```", "```cpp\nQGridLayout *gridLayout = new QGridLayout;\nQSignalMapper *mapper = new QSignalMapper(this);\nfor(int row = 0; row < 3; ++row) {\n  for(int column = 0; column < 3; ++column) {\n    QPushButton *button = new QPushButton;\n    button->setSizePolicy(QSizePolicy::Minimum, QSizePolicy::Minimum);\n    button->setText(\" \");\n    gridLayout->addWidget(button, row, column);\n    board.append(button);\n mapper->setMapping(button, board.count()-1);\n connect(button, SIGNAL(clicked()), mapper, SLOT(map()));\n  }\n}\nconnect(mapper, SIGNAL(mapped(int)), this, SLOT(handleButtonClick(int)));\nsetLayout(gridLayout);\n```", "```cpp\nenum Player {\n  Invalid, Player1, Player2, Draw\n};\n```", "```cpp\nPlayer m_currentPlayer;\n```", "```cpp\nPlayer currentPlayer() const { return m_currentPlayer; }\nvoid setCurrentPlayer(Player p) {\n  if(m_currentPlayer == p) return;\n  m_currentPlayer = p;\n  emit currentPlayerChanged(p);\n}\n```", "```cpp\nsignals:\n void currentPlayerChanged(Player);\n void gameOver(TicTacToeWidget::Player);\n\n```", "```cpp\npublic slots:\n    void handleButtonClick(int);\n```", "```cpp\nvoid TicTacToeWidget::handleButtonClick(int index) {\n  if(index < 0 || index >= board.size()) return; // out of bounds check\n  QPushButton *button = board.at(index);\n  if(button->text() != \" \") return; // invalid move\n  button->setText(currentPlayer() == Player1 ? \"X\" : \"O\");\n  Player winner = checkWinCondition(index / 3, index % 3);\n  if(winner == Invalid) {\n    setCurrentPlayer(currentPlayer() == Player1 ? Player2 : Player1);\n    return;\n  } else {\n    emit gameOver(winner);\n  }\n}\n```", "```cpp\nQ_PROPERTY(double height READ height)\n```", "```cpp\nclass Tower : public QObject {\n  Q_OBJECT // enable meta-object generation\n  Q_PROPERTY(double height READ height) // declare the property\n  public:\n    Tower(QObject *parent = 0) : QObject(parent) { m_height = 6.28; }\n    double height() const { return m_height; } // return property value\n  private:\n    double m_height; // internal member variable holding the property value\n};\n```", "```cpp\nQ_PROPERTY(double height READ height WRITE setHeight)\n```", "```cpp\nvoid setHeight(double newHeight) { m_height = newHeight; }\n```", "```cpp\nclass TicTacToeWidget : public QWidget {\n  Q_OBJECT\n Q_ENUMS(Player)\n Q_PROPERTY(Player currentPlayer READ currentPlayer\n WRITE setCurrentPlayer\n NOTIFY currentPlayerChanged)\npublic:\n  enum Player { Invalid, Player1, Player2, Draw };\n```", "```cpp\nQWidget *widget = new QWidget\nUi_form ui * = new Ui_form;\nui->setupUi(widget);\n```", "```cpp\nQDialog dialog;\nUi_form ui;\nui.setupUi(&dialog);\ndialog.exec();\n```", "```cpp\nclass Widget : public QWidget, private Ui::MyForm {\npublic:\n  Widget(QWidget *parent = 0) : QWidget(parent) {\n    setupUi(this);\n  }\n};\n```", "```cpp\nclass Widget : public QWidget {\npublic:\n  Widget(QWidget *parent = 0) : QWidget(parent) {\n    ui = new Ui::MyForm;\n    ui->setupUi(this);\n  }\n  ~Widget() { delete ui; }\nprivate:\n  Ui::MyForm *ui;\n};\n```", "```cpp\nvoid ConfigurationDialog::updateOKButtonState() {\n    bool pl1NameEmpty = ui->player1Name->text().isEmpty();\n    bool pl2NameEmpty = ui->player2Name->text().isEmpty();\n    QPushButton *okButton = ui->buttonBox->button(QDialogButtonBox::Ok);\n    okButton->setDisabled(pl1NameEmpty || pl2NameEmpty);\n}\n```", "```cpp\nConfigurationDialog::ConfigurationDialog(QWidget *parent) :\n  QDialog(parent), ui(new Ui::ConfigurationDialog)\n{\n  ui->setupUi(this);\n  updateOKButtonState();\n}\n```", "```cpp\nvoid setPlayer1Name(const QString &p1name);\nvoid setPlayer2Name(const QString &p2name);\n```", "```cpp\nvoid ConfiguratiosDialog::setPlayer1Name(const QString &p1name) {\n  ui->player1Name->setText(p1name);\n}\nvoid ConfigurationDialog::setPlayer2Name(const QString &p2name) {\n ui->player2Name->setText(p2name);\n}\n```", "```cpp\nQString player1Name() const;\nQString player2Name() const;\n```", "```cpp\nQString ConfigurationDialog::player1Name() const { return ui->player1Name->text(); }\nQString ConfigurationDialog::player2Name() const { return ui->player2Name->text(); }\n```", "```cpp\nclass ConfigurationDialog : public QDialog {\n  Q_OBJECT\n Q_PROPERTY(QString player1Name READ player1Name WRITE setPlayer1Name)\n Q_PROPERTY(QString player2Name READ player2Name WRITE setPlayer2Name)\npublic:\n  ConfigurationDialog(QWidget *parent = 0);\n```", "```cpp\nconnect(ui->actionNewGame, SIGNAL(triggered()), this, SLOT(startNewGame()));\nconnect(ui->actionQuit, SIGNAL(triggered()), qApp, SLOT(quit()));\n```", "```cpp\nvoid MainWindow::startNewGame() {\n  ConfigurationDialog dlg(this);\n  if(dlg.exec() == QDialog::Rejected) {\n    return; // do nothing if dialog rejected\n  }\n  ui->player1->setText(dlg.player1Name());\n  ui->player2->setText(dlg.player2Name());\n  ui->gameBoard->initNewGame();\n  ui->gameBoard->setEnabled(true);\n}\n```", "```cpp\nconnect(ui->gameBoard, SIGNAL(currentPlayerChanged(Player)), this, SLOT(updateNameLabels()));\n```", "```cpp\nprivate slots:\n  void updateNameLabels();\n```", "```cpp\nvoid MainWindow::updateNameLabels() {\n  QFont f = ui->player1->font();\n  f.setBold(ui->gameBoard->currentPlayer() == TicTacToeWidget::Player1);\n  ui->player1->setFont(f);\n  f.setBold(ui->gameBoard->currentPlayer() == TicTacToeWidget::Player2);\n  ui->player2->setFont(f);\n}\n```", "```cpp\nvoid MainWindow::handleGameOver(TicTacToeWidget::Player winner) {\n  ui->gameBoard->setEnabled(false);\n  QString message;\n  if(winner == TicTacToeWidget::Draw) {\n    message = \"Game ended with a draw.\";\n  } else {\n    message = QString(\"%1 wins\").arg(winner == TicTacToeWidget::Player1\n    ? ui->player1->text() : ui->player2->text());\n  }\n  QMessageBox::information(this, \"Info\", message);\n}\n```", "```cpp\n#include \"mainwindow.h\"\n#include <QApplication>\nint main(int argc, char *argv[])\n{\n  QApplication a(argc, argv);\n  MainWindow w;\n  w.show();\n  return a.exec();\n}\n```"]