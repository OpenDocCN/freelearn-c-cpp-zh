- en: Chapter 2. Creating a Remote Energy Monitoring and Control Device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the second project of the book, we will continue to use the features of the
    Arduino Yún to connect to the Web using the web service Temboo. One thing people
    usually want to do in home automation is follow the energy consumption of their
    electrical devices and turn them on or off remotely, for example, using their
    smartphones or tablets.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, many devices that currently exist can measure energy consumption
    on a power socket as well as being able to switch the device that is connected
    to this socket on and off. These devices are now very compact and easy to connect
    to a local Wi-Fi network, and these can also communicate with mobile devices using
    Bluetooth. Many large electronics manufacturers have developed their own solutions,
    and everyone can now buy these products and install them in their homes.
  prefs: []
  type: TYPE_NORMAL
- en: In this project, we are going to build our own do-it-yourself version of such
    a device and build a power switch and energy meter in order to turn an electrical
    device on and off as well as to follow its energy consumption.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the main highlights of this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Connecting a relay to one of the Arduino Yún digital outputs and using the Yún
    REST API to command this relay from a web browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using an analog current sensor to get a measurement of the instant current consumption
    from the device that is connected to the relay, and calculate the instant power
    consumption from this measurement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending this data to a Google Docs spreadsheet so that it can be accessed remotely
    from any web browser or from the Google Docs mobile app, and calculating the energy
    consumption and some other useful data such as the total energy cost of the device
    connected to your project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a simple web interface to control the lamp using your computer or any
    smartphone or tablet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The required hardware and software components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first part of this project is to get the required parts that we are going
    to use for our energy consumption meter and power switch project. Apart from the
    Arduino Yún board, which will be the "brain" of the project, you will need to
    have two main parts ready on your desk when building the project. These parts
    are the relay module, which we will use to switch the lamp on and off, and the
    analog current sensor, which is used to measure the power and later the energy
    consumption of the lamp.
  prefs: []
  type: TYPE_NORMAL
- en: 'A relay is basically an electromagnetic switch used in projects where we need
    to switch a really large voltage (110V or 230V) using a small voltage as the command
    signal (5V from the Arduino board). For the relay, we used a basic 5V relay module
    from Polulu, which can switch up to 10A and is more than enough for many home
    appliances such as lamps. (In Europe, with 230V, you can connect up to 2300W.)
    The module itself is simply a relay mounted on a printed circuit board along with
    the required components that are necessary to operate the relay and some large
    headers and traces to carry up to 10A if necessary. It uses an Omron G5LE-14-DC5
    relay. The following image is the relay used:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The required hardware and software components](img/8007OS_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Of course, you can use any equivalent relay module. Just make sure that it can
    be switched on/off using a digital 5V signal like we have on the Arduino Yún board
    and that it can switch at least 5A, just to be safe for this project. The lamp
    we are using in this project only uses around 130 mA, but you may want to connect
    larger devices to your project later. If you want to build your own module from
    a relay, you simply need to add a diode in series with the relay to protect your
    Arduino board when the relay is switching.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Do not attempt to use a relay alone on a breadboard along with the required
    components to operate it. The small tracks on the breadboard cannot support high
    currents and voltages and you will run into serious safety issues if you do so,
    such as the potential meltdown of these tracks, which can lead to fire. So, use
    a dedicated relay module for this project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, you need a current sensor to get the instant current consumption of the
    lamp. We used a module from ITead Studio, which is basically a breakout board
    for the ACS712 sensor. A breakout board is simply a board that is composed of
    a printed circuit board, the chip itself, and all the components required to make
    the chip work, such as resistors and capacitors. This sensor delivers an analog
    signal as an output, which is proportional to the measured current. This signal
    can then easily be converted to the corresponding current on the Arduino Yún board.
    We will acquire this analog signal using one of the integrated analog-digital
    converters of the Yún board. Note that there are also noninvasive current sensors
    that you can simply clip around the cable you want to measure, but these are usually
    bigger and don''t integrate well with Arduino projects. The following is an image
    of the sensor used for this project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The required hardware and software components](img/8007OS_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Just as for the relay module, you can use any equivalent current sensor for
    this project. The important parameters to be considered are the maximum current
    that can flow through the sensor (5A for the one we used) and the sensitivity
    of the sensor (185 mV/A for the one we used). If these two parameters are similar
    to the sensor I used in this project, or if they are better, you can use the sensor.
  prefs: []
  type: TYPE_NORMAL
- en: You also need to connect the lamp to the project in some way. Of course, one
    way would be to directly cut the power cable of the lamp and connect the lamp
    directly to our project, but I don't like this option because it's quite messy.
    As I mentioned in the introduction of this project, I don't want you to touch
    your lamp or other device in any way, and I want you to be able to connect your
    lamp again to the power socket in the wall if you want to.
  prefs: []
  type: TYPE_NORMAL
- en: I used two power cables so that I can connect my project to the wall socket
    on one side and connect the lamp to the project on the other side, just as I would
    do with a commercial device bought off the shelf.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is what I used for the power cable where I will plug the lamp:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The required hardware and software components](img/8007OS_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following is the power cable I will use to connect the project to the wall
    plug:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The required hardware and software components](img/8007OS_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note that some power plugs have three cables (the additional cable being for
    the ground connection), but as we will be working with small loads such as lamps,
    the third cable is not necessary for this project.
  prefs: []
  type: TYPE_NORMAL
- en: On the hardware side, I also used a small piece of a breadboard to make the
    power connections of the relay and the current sensor (because the Arduino Yún
    board only has one 5V pin). But of course, you can use a full-size breadboard
    to make these connections.
  prefs: []
  type: TYPE_NORMAL
- en: On the software side, you will need the latest beta version of the Arduino IDE,
    which is the only one that supports the Arduino Yún board (I used Version 1.5.5
    while doing this project).
  prefs: []
  type: TYPE_NORMAL
- en: Connecting the components to the Yún board
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are now going to connect the relay module and the current sensor to the Arduino
    Yún board, connect the power cable that will power up the lamp, and finally connect
    everything to the power socket in the wall. This part is slightly more difficult
    than the hardware connections in [Chapter 1](ch01.html "Chapter 1. Building a
    Weather Station Connected to the Cloud"), *Building a Weather Station Connected
    to the Cloud*, as it involves more steps and uses a higher voltage that requires
    you to take some precautions. So, please be careful and follow all the steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to put the Arduino Yún board, the relay module, and the current
    sensor board close to each other, as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting the components to the Yún board](img/8007OS_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, we are going to connect the power supply of the relay module and the
    current sensor. As I said earlier in this chapter, the Arduino Yún board only
    has one 5V pin. This is why I connected the 5V pins of the two modules to a small
    piece of a breadboard first and then connected this breadboard to the Arduino
    5V pin, as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting the components to the Yún board](img/8007OS_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After this, we have to connect the ground pins of the two modules to the ground
    pin on the Arduino Yún board as shown in the following image. The Arduino Yún
    board has two ground pins on the board, so you don't have to use the breadboard
    for this.
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting the components to the Yún board](img/8007OS_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To finish with the connection of the two modules, we need to connect their respective
    signal pins to the Arduino board. The relay will be controlled via pin number
    8 of the Arduino Yún board, so connect the signal pin of the relay module to pin
    number 8 of the Yún board.
  prefs: []
  type: TYPE_NORMAL
- en: 'The current sensor has an analog output, so it has to be connected to one analog
    input on the Arduino board in order to acquire the signal using one of the Yún
    integrated analog-to-digital converters. This converter will acquire the analog
    signal that comes from the sensor and transform it into digital values that range
    from 0 to 1023 (which correspond to a 10-bit precision). Connect the output pin
    of the current sensor module to pin number A0 of the Arduino Yún board, as shown
    in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting the components to the Yún board](img/8007OS_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'That''s basically all for the low-power part. Now, we will focus on connecting
    the project to the two power supply cables so that we can plug the project into
    the wall plug and plug the lamp to the project. We will start by connecting the
    cable that will go to the wall, as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting the components to the Yún board](img/8007OS_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, connect the female power plug that we will connect the lamp to, as
    shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting the components to the Yún board](img/8007OS_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Finally, it's time to power up everything. You can plug your Arduino Yún board
    in to your computer via a USB cable (if you want to upload sketches directly and
    want space for your computer to be around the project) or via a wall power socket
    to a USB adapter (if you plan to upload the sketches via Wi-Fi and leave the project
    to work on its own).
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, plug the lamp or the device that you want to control in to the female
    power plug of the project. To finish, connect the male power plug to the power
    socket in the wall. Be careful while performing this step: make sure that no electrical
    conductors are exposed, all screw terminals are correctly screwed and are holding
    the cables firmly, and no bare electrical conductors touch each other.'
  prefs: []
  type: TYPE_NORMAL
- en: Testing your hardware connections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that the connections are done, we are going to test everything before we
    start sending energy consumption data to the cloud and building the interface
    to control the relay. We are going to test the different modules as if the project
    was already in operation. For the entire duration of the tests, we are going to
    connect the project to the power socket in the wall and to the lamp that we want
    to control. This way, we will ensure that all the hardware connections are correct
    before moving further.
  prefs: []
  type: TYPE_NORMAL
- en: The relay, for example, will be controlled via Wi-Fi using the Arduino Yún REST
    API, just as it will be in the final version of the project. Basically, we will
    just send a command from your web browser to directly set the value of the pin
    to which the relay is connected. Later in the project, we will make this call
    via a graphical user interface instead of actually typing the command in a browser.
  prefs: []
  type: TYPE_NORMAL
- en: For the current sensor, we are going to simply read the value measured on the
    analog pin A0 using the analog-to-digital converter of the Yún, convert it to
    a usable current, and then calculate the value of the effective current and the
    effective power as we already know the value of the effective voltage (110V or
    230V depending on where you live).
  prefs: []
  type: TYPE_NORMAL
- en: Let's first have a look at the Arduino code. It starts by importing the right
    libraries, as shown in the following code. We need the `Bridge` library so that
    we can use the functions from the onboard Linux machine of the Yún, and the `YunServer`
    and `YunClient` libraries so that we can receive external commands using the REST
    API. REST APIs are usually only used by web developers, but Arduino actually proposes
    a sketch that implements such an API for the Arduino Yún. This sketch is directly
    accessible in the library that comes with the Arduino Yún, and in this project,
    I used a modified version of this reference sketch.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: To use the REST API of the Yún, we need to create a `YunServer` instance, as
    shown in the following line of code. This server will run continuously and wait
    for incoming commands.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to define the pins that our sensors are connected to, as shown
    in the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'One important part of the sketch is to declare the value of the effective voltage,
    which will be used later to calculate the effective power of the device, as shown
    in the following line of code. This value depends on where you are located (for
    example, `230` for Europe, and `110` for the USA):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `setup()` part, we need to start the bridge between the Arduino microcontroller
    and the Linux machine as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to start the web server as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, the last and most important part of the `setup()` function is to calibrate
    the sensor in order to determine which value is returned when the current is null.
    This is done by the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s dive into this function. We could simply get one measurement from the
    current sensor but that would be a bad idea. Indeed, the value that you get from
    the sensor varies slightly over time, around an average that we actually want
    to measure. This is typical behavior when using analog sensors that have important
    sensitivities such as the one we are using here. This is why the function basically
    samples and averages the signal over several measurements with the following lines
    of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'After these measurements, we return the average as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This way, we are sure to get a stable value of the sensor reading every time.
    This value is then used throughout the whole sketch as a reference value for the
    current sensor readings. For example, if the measured value is equal to this reference,
    we will know that the current in the lamp is null. The actual sensor reading during
    the operation of the project uses the same function, so we always get a stable
    measurement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, comes the `loop()` part of the sketch. It actually consists of two parts:
    in the first part, we will receive incoming connections on the Yún web server
    that we started earlier, and in the second part, we will print out the measurements
    that come from the current sensor.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For the web server part, we can listen for connections as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'If a client is detected, we process the request with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: I won't detail the `Process` function as it is the same as in the `Bridge` example
    for the Arduino Yún that we used earlier (this is available as an example in the
    Yún `Bridge` library). To know more about the Yún REST API, you can visit the
    official Arduino documentation on the Arduino website at [http://arduino.cc/en/Guide/ArduinoYun](http://arduino.cc/en/Guide/ArduinoYun).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will write the part of the sketch that is responsible for the current
    measurements. It starts when you get a stable measurement, just as we did earlier
    for the null current as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'I won''t get into the details of this function as it is the same as which we
    used to get the value for the null current. We can now do some calculations on
    this measured value. First, we need to convert it to a usable current value as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the amplitude of the current, which is a sinusoidal current. This formula
    can be found in the datasheet of the sensor as well as on the ITead Studio website.
    Because we know this information about the current, to get the effective current,
    we simply need to divide it by the square root of two as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'To get the effective power, we then need to transform this current in amperes
    by dividing the value by 1000 and multiplying it with the effective voltage. I
    also added an absolute value operator so that the power is always positive, even
    when you connect the current sensor to measure negative currents, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The sketch ends by printing all these values on the Serial monitor and repeats
    itself every 50 milliseconds. The complete sketch for this part is available on
    the GitHub repository of the book at [https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter2/sensors_test](https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter2/sensors_test).
  prefs: []
  type: TYPE_NORMAL
- en: Now you can upload the sketch to the Arduino board. Remember that at this point,
    the Arduino Yún board should be powered by either your computer or a USB power
    adapter, the lamp should be plugged to the project in the female power cord, and
    the project itself should be plugged into the wall socket.
  prefs: []
  type: TYPE_NORMAL
- en: 'The relay is quite easy to test; you just need to go to your web browser and
    type in the right command. The REST API of the Yún works by typing the name of
    your Arduino Yún board followed by `.local` (in my case, I named it `myarduinoyun`).
    Then, if it is followed by `arduino/`, you can directly use commands to change
    the value of the Arduino pins. For example, to change the value of the relay pin
    to 1, you need to add `digital/8/1`, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing your hardware connections](img/8007OS_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding command means that you are calling the command `digitalWrite(8,HIGH)`
    using the REST API. You should instantly hear the relay switch and see the light
    turn on. Try again by adding a `0` after the command instead of a `1`; the relay
    should switch again and turn the light off. Don't worry, as later in the project,
    we'll build a nice graphical interface so that you don't have to write this command
    every time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we are going to check the measurements coming from the current sensor.
    Make sure that the lamp is off, reset the Arduino microcontroller to be sure that
    the sketch starts from the beginning again, and then open the Serial monitor.
    To do this, the Arduino Yún board has to be connected to your computer via the
    USB cable. The first thing you should see is the measurement for a null current
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, the sketch continuously displays the value of the sensor reading, current
    amplitude, effective current, and effective power. Even if the current is null,
    remember that we average the sensor readings over several measurements, so there
    can be minor fluctuations in the value, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'If you then turn the lamp on using the REST call in your browser, you should
    instantly see a change in the current and power readings as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: If you can see these values and your relay is responding to the REST calls in
    your browser, it means that your hardware is working correctly and you can proceed
    to the next step. If it doesn't work, the first step is to check the different
    connections of the current sensor and relay module. Also check that you have selected
    the correct Serial speed in the Serial monitor so that it matches the speed defined
    in the sketch.
  prefs: []
  type: TYPE_NORMAL
- en: Sending data to Google Docs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first step is to set up a Google Docs spreadsheet for the project. Create
    a new sheet, give it a name (I named mine `Power` for this project, but you can
    name it as you wish), and set a title for the columns that we are going to use:
    **Time**, **Interval**, **Power**, and **Energy** (that will be calculated from
    the first two columns), as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sending data to Google Docs](img/8007OS_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can also calculate the value of the energy using the other measurements.
    From theory, we know that over a given period of time, energy is power multiplied
    by time; that is, *Energy = Power * Time*.
  prefs: []
  type: TYPE_NORMAL
- en: However, in our case, power is calculated at regular intervals, and we want
    to estimate the energy consumption for each of these intervals. In mathematical
    terms, this means we need to calculate the integral of power as a function of
    time.
  prefs: []
  type: TYPE_NORMAL
- en: 'We don''t have the exact function between time and power as we sample this
    function at regular time intervals, but we can estimate this integral using a
    method called the trapezoidal rule. It means that we basically estimate the integral
    of the function, which is the area below the power curve, by a trapeze. The energy
    in the `C2` cell in the spreadsheet is then given by the formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Energy= (PowerMeasurement + NextPowerMeasurement)*TimeInverval/2*.'
  prefs: []
  type: TYPE_NORMAL
- en: Concretely, in Google Docs, you will need the formula, *D2 = (B2 + B3)*C2/2*.
  prefs: []
  type: TYPE_NORMAL
- en: The Arduino Yún board will give you the power measurement, and the time interval
    is given by the value we set in the sketch. However, the time between two measurements
    can vary from measurement to measurement. This is due to the delay introduced
    by the network. To solve this issue, we will transmit the exact value along with
    the power measurement to get a much better estimate of the energy consumption.
  prefs: []
  type: TYPE_NORMAL
- en: Then, it's time to build the sketch that we will use for the project. The goal
    of this sketch is basically to wait for commands that come from the network, to
    switch the relay on or off, and to send data to the Google Docs spreadsheet at
    regular intervals to keep track of the energy consumption.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will build the sketch on top of the sketch we built earlier so I will explain
    which components need to be added. First, you need to include your Temboo credentials
    using the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Since we can''t continuously measure the power consumption data (the data transmitted
    would be huge, and we will quickly exceed our monthly access limit for Temboo!),
    like in the test sketch, we need to measure it at given intervals only. However,
    at the same time, we need to continuously check whether a command is received
    from the outside to switch the state of the relay. This is done by setting the
    correct timings first, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The server poll time will be the interval at which we check the incoming connections.
    The power measurement delay, as you can guess, is the delay at which the power
    is measured.
  prefs: []
  type: TYPE_NORMAL
- en: However, we can't use a simple delay function for this as it will put the entire
    sketch on hold. What we are going to do instead is to count the number of cycles
    of the main loop and then trigger a measurement when the right amount of cycles
    have been reached using a simple `if` statement. The right amount of cycles is
    given by the power measurement `cycles_max` variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'You also need to insert your Google Docs credentials using the following lines
    of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `setup()` function, you need to start a date process that will keep
    a track of the measurement date. We want to keep a track of the measurement over
    several days, so we will transmit the date of the day as well as the time, as
    shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `loop()` function of the sketch, we check whether it''s time to perform
    a measurement from the current sensor, as shown in the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'If that''s the case, we measure the sensor value, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We also get the exact measurement interval that we will transmit along with
    the measured power to get a correct estimate of the energy consumption, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'We then calculate the effective power from the data we already have. The amplitude
    of the current is obtained from the sensor measurements as shown earlier. Then
    we can get the effective value of the current by dividing this amplitude by the
    square root of 2\. Finally, as we know the effective voltage and that power is
    current multiplied by voltage, we can calculate the effective power as well, as
    shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'After this, we send the data with the time interval to Google Docs and reset
    the counter for power measurements, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The function to send data to Google Docs is nearly the same as the one we saw
    in [Chapter 1](ch01.html "Chapter 1. Building a Weather Station Connected to the
    Cloud"), *Building a Weather Station Connected to the Cloud*. Let''s quickly go
    into the details of this function. It starts by declaring the type of Temboo library
    we want to use, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Start with the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'We then need to set the data that concerns your Google account, for example,
    the username, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The actual formatting of the data is done with the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, `interval` is the time interval between two measurements, and `effectiveValue`
    is the value of the measured power that we want to log on to Google Docs. The
    Choreo is then executed with the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we do this after every 50 milliseconds and get an increment to the
    power measurement counter each time, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The complete code for this section is available at [https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter2/energy_log](https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter2/energy_log).
  prefs: []
  type: TYPE_NORMAL
- en: 'The code for this part is complete. You can now upload the sketch and after
    that, open the Google Docs spreadsheet and then just wait until the first measurement
    arrives. The following screenshot shows the first measurement I got:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sending data to Google Docs](img/8007OS_02_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After a few moments, I got several measurements logged on my Google Docs spreadsheet.
    I also played a bit with the lamp control by switching it on and off so that we
    can actually see changes in the measured data. The following screenshot shows
    the first few measurements:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sending data to Google Docs](img/8007OS_02_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'It''s good to have some data logged in the spreadsheet, but it is even better
    to display this data in a graph. I used the built-in plotting capabilities of
    Google Docs to plot the power consumption over time on a graph, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sending data to Google Docs](img/8007OS_02_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Using the same kind of graph, you can also plot the calculated energy consumption
    data over time, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sending data to Google Docs](img/8007OS_02_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: From the data you get in this Google Docs spreadsheet, it is also quite easy
    to get other interesting data. You can, for example, estimate the total energy
    consumption over time and the price that it will cost you. The first step is to
    calculate the sum of the energy consumption column using the integrated sum functionality
    of Google Docs.
  prefs: []
  type: TYPE_NORMAL
- en: Then, you have the energy consumption in Joules, but that's not what the electricity
    company usually charges you for. Instead, they use kWh, which is basically the
    Joule value divided by 3,600,000\. The last thing we need is the price of a single
    kWh. Of course, this will depend on the country you're living in, but at the time
    of writing this book, the price in the USA was approximately $0.16 per kWh. To
    get the total price, you then just need to multiply the total energy consumption
    in kWh with the price per kWh.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the result with the data I recorded. Of course, as I only took a short
    sample of data, it cost me nearly nothing in the end, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sending data to Google Docs](img/8007OS_02_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can also estimate the on/off time of the device you are measuring. For this
    purpose, I simply added an additional column next to `Energy` named `On/Off`.
    I simply used the formula `=IF(C2<2;0;1)`.
  prefs: []
  type: TYPE_NORMAL
- en: It means that if the power is less than 2W, we count it as an off state; otherwise,
    we count it as an on state. I didn't set the condition to 0W to count it as an
    off state because of the small fluctuations over time from the current sensor.
    Then, when you have this data about the different on/off states, it's quite simple
    to count the number of occurrences of each state, for example, on states, using
    `=COUNTIF(E:E,"1")`.
  prefs: []
  type: TYPE_NORMAL
- en: 'I applied these formulas in my Google Docs spreadsheet, and the following screenshot
    is the result with the sample data I recorded:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sending data to Google Docs](img/8007OS_02_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'It is also very convenient to represent this data in a graph. For this, I used
    a pie chart, which I believe is the most adaptable graph for this kind of data.
    The following screenshot is what I got with my measurements:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sending data to Google Docs](img/8007OS_02_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: With the preceding kind of chart, you can compare the usage of a given lamp
    from day to day, for example, to know whether you have left the lights on when
    you are not there.
  prefs: []
  type: TYPE_NORMAL
- en: Building an interface to switch the lights on/off remotely
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that our project automatically logs data concerning the energy consumption
    on Google Docs, it's time to go back to the relay control. For now, we tested
    the relay by going into a web browser and typing the correct REST function with
    the name of the pin we want to change.
  prefs: []
  type: TYPE_NORMAL
- en: However, that's not very convenient. You don't want to type something in your
    web browser every time you want to turn a light on in your home. What we would
    like to have instead is a nice graphical interface with buttons that can be pressed
    to turn a light on or off. It would be even better if this interface could be
    accessed not only from a web browser on your computer but also from any smartphone
    or tablet in your home. That's exactly what we are going to build now.
  prefs: []
  type: TYPE_NORMAL
- en: We need several components to do so, and we will mix several programming languages
    to build the best graphical interface possible. We will use HTML for the main
    page that will host the on/off button, JavaScript to handle the actions of this
    button, and PHP to transmit the correct command to the Arduino server. We are
    also going to use some CSS to make the interface look much better and automatically
    adapt itself to the device you are using, such as a smartphone.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s deal with the HTML code. We need to import the jQuery library
    and the file that will contain all the JavaScript code, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, import the CSS style file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The core of this HTML file is to create two buttons; one button to switch the
    relay on and the other to switch it off again. The following, for example, is
    the code for the **On** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if you were to actually take this file as it is, it would look really
    bad as some default styles would be applied to the buttons. That''s why we attached
    a CSS file to make the interface look a bit better. For example, I decided to
    center align the main form that contains the two buttons, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'I also gave some style to the buttons themselves, such as an orange background;
    I made them bigger and also put a nice black border around them, as shown in the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Now the interface looks much better on your computer. But what if somebody opens
    it from a smartphone? It would not be adapted at all to the tiny screen of a smartphone.
    To automatically make the interface adapt to the device you are using, we will
    use a property from CSS3 called media queries. This feature of CSS3 can, for example,
    detect whether a smaller screen size is used to access the page. Then, when you
    have this information, you can use it to modify the style of the different elements
    accordingly, for example, we may want to make our buttons appear differently on
    the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, we want to make the buttons take all the space available on the
    smaller screen. We also want to double the height of each button as well as double
    the font size so that they can be really readable on a small screen like on a
    smartphone. All of this is done by the following piece of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The JavaScript file simply makes the interface between the GUI we just designed
    and the PHP file that will actually connect to the Arduino Yún board. The following,
    for example, is the code called by one button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The `command` variable simply contains the state of the relay that we want to
    send to the Arduino Yún board and will set the value of the pin that the relay
    is connected to.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s see the PHP file. The first line of the code gets the command variable
    from the JavaScript and builds the command that will be sent to the Yún, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'To actually send the command, we are going to use a PHP function named `curl`
    that we will use to call the REST API of the Yún. We first have to initialize
    this function with the URL we built earlier, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we actually execute this command with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The option with `set` in the first line of code is used simply to speed up access
    to the Arduino board. Before testing the interface, make sure that the web server
    on your computer is running and that all the files of the project are located
    at the root of the web server folder. The complete code for this part of the project
    is available at [https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter2/web_interface](https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter2/web_interface).
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see the two buttons of the interface show up in your browser, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building an interface to switch the lights on/off remotely](img/8007OS_02_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can now test this simple interface. Just click on a button and the PHP code
    should give the correct command on your Arduino Yún board, making the switch go
    on or off instantly.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also test the interface on a smartphone or tablet. I used my phone
    to do so. Just open your favorite browser, go to your computer''s IP address or
    network name, and you should see the different files of your project being displayed.
    Just click on **interface.html** and the interface should open and scale to your
    phone''s screen size, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building an interface to switch the lights on/off remotely](img/8007OS_02_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Just as for the interface on your computer, you can simply press a button and
    the light will switch on or off instantly. Now, you are able to command this light
    from wherever you are in your home; you just have to be connected to your local
    Wi-Fi network.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s see what we learned in this project. At the beginning of the project,
    you saw how to interface the required components of this project to your Arduino
    Yún board: a relay module, a current sensor, and a lamp that will be controlled
    by the Yún board.'
  prefs: []
  type: TYPE_NORMAL
- en: Then, we wrote a simple sketch to test the different components of the project
    and made sure that they all worked correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we built the energy consumption logging part of the project, and logged
    the power consumption inside a Google Docs spreadsheet. We also used the built-in
    capabilities of Google Docs to calculate the actual energy consumption, total
    energy cost, and on/off time of the device.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, in the last part of the project, we built a graphical user interface
    to control the relay from a web browser, from your computer, or a smartphone/tablet.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, there are many ways to take what you've learned in this project and
    extend it further. The first thing you can do is to add more devices to the project.
    For example, Arduino Yún has six analog inputs in total, so in theory you could
    plug the same number of current sensors into the Yún. Following the same principles,
    you could also add more Arduino Yún boards to the project.
  prefs: []
  type: TYPE_NORMAL
- en: You could also use the project with more features of Temboo, such as integrating
    the power measurements with social media, for example, by alerting the user with
    Twitter when the power consumption exceeds a given threshold. The user could then
    shut the lamp off by replying to this tweet.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will use other features of the Arduino Yún such as the
    USB port and the embedded Linux machine to create a wireless security camera.
    This camera will automatically upload pictures to a Dropbox folder and also stream
    the video live on YouTube so you can monitor your home remotely.
  prefs: []
  type: TYPE_NORMAL
