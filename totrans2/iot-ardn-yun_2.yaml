- en: Chapter 2. Creating a Remote Energy Monitoring and Control Device
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章：创建一个远程能源监控与控制设备
- en: In the second project of the book, we will continue to use the features of the
    Arduino Yún to connect to the Web using the web service Temboo. One thing people
    usually want to do in home automation is follow the energy consumption of their
    electrical devices and turn them on or off remotely, for example, using their
    smartphones or tablets.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的第二项目中，我们将继续使用Arduino Yún的功能，通过web服务Temboo连接到网络。人们通常在家庭自动化中想要做的一件事是跟踪他们的电器能源消耗，并远程打开或关闭它们，例如，使用他们的智能手机或平板电脑。
- en: Of course, many devices that currently exist can measure energy consumption
    on a power socket as well as being able to switch the device that is connected
    to this socket on and off. These devices are now very compact and easy to connect
    to a local Wi-Fi network, and these can also communicate with mobile devices using
    Bluetooth. Many large electronics manufacturers have developed their own solutions,
    and everyone can now buy these products and install them in their homes.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，目前许多设备可以测量电源插座上的能源消耗，同时还能开关连接到该插座的设备。这些设备现在非常紧凑，易于连接到本地Wi-Fi网络，并且它们还可以通过蓝牙与移动设备通信。许多大型电子产品制造商已经开发了他们自己的解决方案，现在每个人都可以购买这些产品并将它们安装在自己的家中。
- en: In this project, we are going to build our own do-it-yourself version of such
    a device and build a power switch and energy meter in order to turn an electrical
    device on and off as well as to follow its energy consumption.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将构建我们自己的DIY版本这样的设备，并构建一个电源开关和能源计，以便开关电器以及跟踪其能源消耗。
- en: 'The following are the main highlights of this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以下本章的主要亮点：
- en: Connecting a relay to one of the Arduino Yún digital outputs and using the Yún
    REST API to command this relay from a web browser
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将一个继电器连接到Arduino Yún的一个数字输出，并使用Yún REST API通过网页浏览器控制这个继电器
- en: Using an analog current sensor to get a measurement of the instant current consumption
    from the device that is connected to the relay, and calculate the instant power
    consumption from this measurement
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用模拟电流传感器从连接到继电器的设备获取即时电流消耗的测量值，并从该测量值计算即时功耗
- en: Sending this data to a Google Docs spreadsheet so that it can be accessed remotely
    from any web browser or from the Google Docs mobile app, and calculating the energy
    consumption and some other useful data such as the total energy cost of the device
    connected to your project
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将这些数据发送到Google Docs电子表格，以便可以从任何网页浏览器或Google Docs移动应用程序远程访问，并计算连接到您的项目的设备的能源消耗和一些其他有用的数据，例如设备的总能源成本。
- en: Creating a simple web interface to control the lamp using your computer or any
    smartphone or tablet
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个简单的网页界面，使用您的计算机或任何智能手机或平板电脑来控制灯
- en: The required hardware and software components
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 所需的硬件和软件组件
- en: The first part of this project is to get the required parts that we are going
    to use for our energy consumption meter and power switch project. Apart from the
    Arduino Yún board, which will be the "brain" of the project, you will need to
    have two main parts ready on your desk when building the project. These parts
    are the relay module, which we will use to switch the lamp on and off, and the
    analog current sensor, which is used to measure the power and later the energy
    consumption of the lamp.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目的第一部分是获取我们将用于我们的能源消耗计和电源开关项目的所需部件。除了将成为项目“大脑”的Arduino Yún板外，在构建项目时，您需要在您的桌子上准备好两个主要部件。这些部件是继电器模块，我们将用它来开关灯，以及模拟电流传感器，它用于测量功率，后来是灯的能源消耗。
- en: 'A relay is basically an electromagnetic switch used in projects where we need
    to switch a really large voltage (110V or 230V) using a small voltage as the command
    signal (5V from the Arduino board). For the relay, we used a basic 5V relay module
    from Polulu, which can switch up to 10A and is more than enough for many home
    appliances such as lamps. (In Europe, with 230V, you can connect up to 2300W.)
    The module itself is simply a relay mounted on a printed circuit board along with
    the required components that are necessary to operate the relay and some large
    headers and traces to carry up to 10A if necessary. It uses an Omron G5LE-14-DC5
    relay. The following image is the relay used:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 继电器基本上是一种电磁开关，用于需要使用小电压（如Arduino板上的5V）作为命令信号来切换大电压（110V或230V）的项目。对于继电器，我们使用了一个基本的5V继电器模块，来自Polulu，它可以切换高达10A，对于许多家用电器如灯具来说已经足够了。（在欧洲，使用230V，你可以连接高达2300W。）该模块本身只是一个安装在印刷电路板上的继电器，以及操作继电器所需的必要组件和一些大型的引脚和走线，如果需要的话，可以承载高达10A。它使用的是Omron
    G5LE-14-DC5继电器。以下图片是所使用的继电器：
- en: '![The required hardware and software components](img/8007OS_02_01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![所需的硬件和软件组件](img/8007OS_02_01.jpg)'
- en: Of course, you can use any equivalent relay module. Just make sure that it can
    be switched on/off using a digital 5V signal like we have on the Arduino Yún board
    and that it can switch at least 5A, just to be safe for this project. The lamp
    we are using in this project only uses around 130 mA, but you may want to connect
    larger devices to your project later. If you want to build your own module from
    a relay, you simply need to add a diode in series with the relay to protect your
    Arduino board when the relay is switching.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可以使用任何等效的继电器模块。只需确保它可以使用数字5V信号进行开关控制，就像我们在Arduino Yún板上所做的那样，并且它可以至少切换5A，以确保这个项目的安全性。我们在这个项目中使用的灯只消耗大约130
    mA，但将来你可能想在项目中连接更大的设备。如果你想从继电器制作自己的模块，你只需要在继电器上串联一个二极管来保护你的Arduino板，当继电器切换时。
- en: Tip
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Do not attempt to use a relay alone on a breadboard along with the required
    components to operate it. The small tracks on the breadboard cannot support high
    currents and voltages and you will run into serious safety issues if you do so,
    such as the potential meltdown of these tracks, which can lead to fire. So, use
    a dedicated relay module for this project.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 不要尝试在面包板上单独使用继电器及其操作所需的组件。面包板上的小轨道无法支持高电流和高电压，如果你这样做，将会遇到严重的安全问题，例如这些轨道可能发生熔断，这可能导致火灾。因此，使用专门的继电器模块进行此项目。
- en: 'Then, you need a current sensor to get the instant current consumption of the
    lamp. We used a module from ITead Studio, which is basically a breakout board
    for the ACS712 sensor. A breakout board is simply a board that is composed of
    a printed circuit board, the chip itself, and all the components required to make
    the chip work, such as resistors and capacitors. This sensor delivers an analog
    signal as an output, which is proportional to the measured current. This signal
    can then easily be converted to the corresponding current on the Arduino Yún board.
    We will acquire this analog signal using one of the integrated analog-digital
    converters of the Yún board. Note that there are also noninvasive current sensors
    that you can simply clip around the cable you want to measure, but these are usually
    bigger and don''t integrate well with Arduino projects. The following is an image
    of the sensor used for this project:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你需要一个电流传感器来获取灯的即时电流消耗。我们使用了一个来自ITead Studio的模块，它基本上是一个ACS712传感器的分线板。分线板简单来说就是一个由印刷电路板、芯片本身以及所有使芯片工作的组件（如电阻和电容器）组成的板。这个传感器输出一个模拟信号，该信号与测量的电流成正比。然后，这个信号可以很容易地转换成Arduino
    Yún板上的相应电流。我们将使用Yún板的一个集成模拟-数字转换器来获取这个模拟信号。请注意，还有非侵入式电流传感器，你可以简单地将其夹在你想测量的电缆周围，但这些通常更大，并且与Arduino项目不太兼容。以下是这个项目所使用的传感器的图片：
- en: '![The required hardware and software components](img/8007OS_02_02.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![所需的硬件和软件组件](img/8007OS_02_02.jpg)'
- en: Just as for the relay module, you can use any equivalent current sensor for
    this project. The important parameters to be considered are the maximum current
    that can flow through the sensor (5A for the one we used) and the sensitivity
    of the sensor (185 mV/A for the one we used). If these two parameters are similar
    to the sensor I used in this project, or if they are better, you can use the sensor.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 就像继电器模块一样，你可以为这个项目使用任何等效的电流传感器。需要考虑的重要参数是传感器能够流过的最大电流（我们使用的为5A）和传感器的灵敏度（我们使用的为185
    mV/A）。如果这两个参数与我在这个项目中使用的传感器相似，或者更好，你可以使用该传感器。
- en: You also need to connect the lamp to the project in some way. Of course, one
    way would be to directly cut the power cable of the lamp and connect the lamp
    directly to our project, but I don't like this option because it's quite messy.
    As I mentioned in the introduction of this project, I don't want you to touch
    your lamp or other device in any way, and I want you to be able to connect your
    lamp again to the power socket in the wall if you want to.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要以某种方式将灯连接到项目中。当然，一种方法就是直接切断灯的电源线，将灯直接连接到我们的项目中，但我不喜欢这个选项，因为它相当杂乱。正如我在这个项目的介绍中提到的，我不想让你以任何方式触摸你的灯或其他设备，并且如果你想的话，我希望你能将你的灯再次连接到墙上的电源插座。
- en: I used two power cables so that I can connect my project to the wall socket
    on one side and connect the lamp to the project on the other side, just as I would
    do with a commercial device bought off the shelf.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用了两条电源线，这样我就可以将我的项目连接到墙上的插座一侧，并将灯连接到项目另一侧，就像我购买现成的商业设备一样。
- en: 'The following is what I used for the power cable where I will plug the lamp:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我用于插入灯的电源线的组件：
- en: '![The required hardware and software components](img/8007OS_02_03.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![所需的硬件和软件组件](img/8007OS_02_03.jpg)'
- en: 'The following is the power cable I will use to connect the project to the wall
    plug:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我将用于将项目连接到墙插座的电源线：
- en: '![The required hardware and software components](img/8007OS_02_04.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![所需的硬件和软件组件](img/8007OS_02_04.jpg)'
- en: Note that some power plugs have three cables (the additional cable being for
    the ground connection), but as we will be working with small loads such as lamps,
    the third cable is not necessary for this project.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，一些电源插座有三条线（额外的线用于接地连接），但因为我们将会处理如灯这样的小负载，所以第三条线对这个项目不是必需的。
- en: On the hardware side, I also used a small piece of a breadboard to make the
    power connections of the relay and the current sensor (because the Arduino Yún
    board only has one 5V pin). But of course, you can use a full-size breadboard
    to make these connections.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在硬件方面，我也使用了一小块面包板来制作继电器和电流传感器的电源连接（因为Arduino Yún板只有一个5V引脚）。当然，你也可以使用全尺寸面包板来制作这些连接。
- en: On the software side, you will need the latest beta version of the Arduino IDE,
    which is the only one that supports the Arduino Yún board (I used Version 1.5.5
    while doing this project).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件方面，你需要Arduino IDE的最新beta版本，这是唯一支持Arduino Yún板的版本（我在做这个项目时使用了版本1.5.5）。
- en: Connecting the components to the Yún board
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将组件连接到Yún板
- en: We are now going to connect the relay module and the current sensor to the Arduino
    Yún board, connect the power cable that will power up the lamp, and finally connect
    everything to the power socket in the wall. This part is slightly more difficult
    than the hardware connections in [Chapter 1](ch01.html "Chapter 1. Building a
    Weather Station Connected to the Cloud"), *Building a Weather Station Connected
    to the Cloud*, as it involves more steps and uses a higher voltage that requires
    you to take some precautions. So, please be careful and follow all the steps.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将连接继电器模块和电流传感器到Arduino Yún板，连接将点亮灯的电源线，最后将所有东西连接到墙上的电源插座。这部分比[第1章](ch01.html
    "第1章. 连接到云的气象站")中硬件连接的部分要复杂一些，因为它涉及更多的步骤，并使用更高的电压，这要求你采取一些预防措施。所以，请小心并遵循所有步骤。
- en: 'The first step is to put the Arduino Yún board, the relay module, and the current
    sensor board close to each other, as shown in the following image:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是将Arduino Yún板、继电器模块和电流传感器板放在一起，如下面的图片所示：
- en: '![Connecting the components to the Yún board](img/8007OS_02_05.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![将组件连接到Yún板上](img/8007OS_02_05.jpg)'
- en: 'Then, we are going to connect the power supply of the relay module and the
    current sensor. As I said earlier in this chapter, the Arduino Yún board only
    has one 5V pin. This is why I connected the 5V pins of the two modules to a small
    piece of a breadboard first and then connected this breadboard to the Arduino
    5V pin, as shown in the following image:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将连接继电器模块和电流传感器的电源。正如我在本章前面所说，Arduino Yún板只有一个5V引脚。这就是为什么我将两个模块的5V引脚首先连接到一小块面包板上，然后将这个面包板连接到Arduino的5V引脚，如图所示：
- en: '![Connecting the components to the Yún board](img/8007OS_02_06.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![将组件连接到Yún板](img/8007OS_02_06.jpg)'
- en: After this, we have to connect the ground pins of the two modules to the ground
    pin on the Arduino Yún board as shown in the following image. The Arduino Yún
    board has two ground pins on the board, so you don't have to use the breadboard
    for this.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们必须将两个模块的地线引脚连接到Arduino Yún板上的地线引脚，如图所示。Arduino Yún板上有两个地线引脚，因此您不需要为此使用面包板。
- en: '![Connecting the components to the Yún board](img/8007OS_02_07.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![将组件连接到Yún板](img/8007OS_02_07.jpg)'
- en: To finish with the connection of the two modules, we need to connect their respective
    signal pins to the Arduino board. The relay will be controlled via pin number
    8 of the Arduino Yún board, so connect the signal pin of the relay module to pin
    number 8 of the Yún board.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成两个模块的连接，我们需要将它们的相应信号引脚连接到Arduino板。继电器将通过Arduino Yún板的8号引脚控制，因此将继电器模块的信号引脚连接到Yún板的8号引脚。
- en: 'The current sensor has an analog output, so it has to be connected to one analog
    input on the Arduino board in order to acquire the signal using one of the Yún
    integrated analog-to-digital converters. This converter will acquire the analog
    signal that comes from the sensor and transform it into digital values that range
    from 0 to 1023 (which correspond to a 10-bit precision). Connect the output pin
    of the current sensor module to pin number A0 of the Arduino Yún board, as shown
    in the following image:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当前传感器具有模拟输出，因此它必须连接到Arduino板上的一个模拟输入，以便使用Yún集成的模拟-数字转换器之一来获取信号。此转换器将获取来自传感器的模拟信号并将其转换为从0到1023（对应10位精度）的数字值。将电流传感器模块的输出引脚连接到Arduino
    Yún板的A0引脚，如图所示：
- en: '![Connecting the components to the Yún board](img/8007OS_02_08.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![将组件连接到Yún板](img/8007OS_02_08.jpg)'
- en: 'That''s basically all for the low-power part. Now, we will focus on connecting
    the project to the two power supply cables so that we can plug the project into
    the wall plug and plug the lamp to the project. We will start by connecting the
    cable that will go to the wall, as shown in the following image:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上就是低功耗部分的全部内容。现在，我们将专注于将项目连接到两个电源线，以便我们可以将项目插入墙壁插座并将灯泡连接到项目上。我们将首先连接将通往墙壁的电缆，如图所示：
- en: '![Connecting the components to the Yún board](img/8007OS_02_09.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![将组件连接到Yún板](img/8007OS_02_09.jpg)'
- en: 'Finally, connect the female power plug that we will connect the lamp to, as
    shown in the following image:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，连接我们将要连接到灯泡的雌性电源插头，如图所示：
- en: '![Connecting the components to the Yún board](img/8007OS_02_10.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![将组件连接到Yún板](img/8007OS_02_10.jpg)'
- en: Finally, it's time to power up everything. You can plug your Arduino Yún board
    in to your computer via a USB cable (if you want to upload sketches directly and
    want space for your computer to be around the project) or via a wall power socket
    to a USB adapter (if you plan to upload the sketches via Wi-Fi and leave the project
    to work on its own).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，是时候给所有设备供电了。您可以通过USB线将Arduino Yún板连接到计算机（如果您想直接上传草图并且希望计算机在项目附近）或通过墙壁电源插座连接到USB适配器（如果您计划通过Wi-Fi上传草图并让项目独立工作）。
- en: 'Then, plug the lamp or the device that you want to control in to the female
    power plug of the project. To finish, connect the male power plug to the power
    socket in the wall. Be careful while performing this step: make sure that no electrical
    conductors are exposed, all screw terminals are correctly screwed and are holding
    the cables firmly, and no bare electrical conductors touch each other.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将您想要控制的灯泡或设备插入到项目的雌性电源插头中。完成连接后，将雄性电源插头连接到墙壁插座中的电源插座。在执行此步骤时请小心：确保没有电线暴露，所有螺钉端子都正确拧紧并牢固地固定着电缆，并且没有裸露的电线相互接触。
- en: Testing your hardware connections
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试您的硬件连接
- en: Now that the connections are done, we are going to test everything before we
    start sending energy consumption data to the cloud and building the interface
    to control the relay. We are going to test the different modules as if the project
    was already in operation. For the entire duration of the tests, we are going to
    connect the project to the power socket in the wall and to the lamp that we want
    to control. This way, we will ensure that all the hardware connections are correct
    before moving further.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在连接完成后，我们在开始将能耗数据发送到云和构建控制继电器的界面之前，将对所有内容进行测试。我们将像项目已经运行一样测试不同的模块。在整个测试期间，我们将把项目连接到墙上的电源插座和我们想要控制的灯。这样，我们就可以在进一步操作之前确保所有硬件连接都是正确的。
- en: The relay, for example, will be controlled via Wi-Fi using the Arduino Yún REST
    API, just as it will be in the final version of the project. Basically, we will
    just send a command from your web browser to directly set the value of the pin
    to which the relay is connected. Later in the project, we will make this call
    via a graphical user interface instead of actually typing the command in a browser.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，继电器将通过 Arduino Yún REST API 通过 Wi-Fi 控制，就像在项目的最终版本中一样。基本上，我们只需从你的网络浏览器发送一个命令来直接设置连接到继电器的引脚的值。在项目的后期，我们将通过图形用户界面来调用这个命令，而不是在浏览器中实际输入命令。
- en: For the current sensor, we are going to simply read the value measured on the
    analog pin A0 using the analog-to-digital converter of the Yún, convert it to
    a usable current, and then calculate the value of the effective current and the
    effective power as we already know the value of the effective voltage (110V or
    230V depending on where you live).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 对于电流传感器，我们将简单地读取 Yún 的模拟引脚 A0 上测量的值，使用 Yún 的模数转换器将其转换为可用的电流，然后根据我们已知的有效电压值（根据你所在地区可能是
    110V 或 230V）计算有效电流和有效功率。
- en: Let's first have a look at the Arduino code. It starts by importing the right
    libraries, as shown in the following code. We need the `Bridge` library so that
    we can use the functions from the onboard Linux machine of the Yún, and the `YunServer`
    and `YunClient` libraries so that we can receive external commands using the REST
    API. REST APIs are usually only used by web developers, but Arduino actually proposes
    a sketch that implements such an API for the Arduino Yún. This sketch is directly
    accessible in the library that comes with the Arduino Yún, and in this project,
    I used a modified version of this reference sketch.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先看看 Arduino 代码。它首先导入所需的库，如下所示代码所示。我们需要 `Bridge` 库以便可以使用 Yún 板载 Linux 机的功能，以及
    `YunServer` 和 `YunClient` 库以便我们可以使用 REST API 接收外部命令。REST API 通常只被网络开发者使用，但 Arduino
    实际上提供了一个实现此类 API 的 Arduino Yún 草图的示例。这个草图可以直接在 Arduino Yún 伴随的库中访问，在这个项目中，我使用了这个参考草图的修改版本。
- en: '[PRE0]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: To use the REST API of the Yún, we need to create a `YunServer` instance, as
    shown in the following line of code. This server will run continuously and wait
    for incoming commands.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Yún 的 REST API，我们需要创建一个 `YunServer` 实例，如下所示代码行。这个服务器将连续运行并等待接收到的命令。
- en: '[PRE1]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We also need to define the pins that our sensors are connected to, as shown
    in the following lines of code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要定义传感器连接到的引脚，如下所示代码行：
- en: '[PRE2]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'One important part of the sketch is to declare the value of the effective voltage,
    which will be used later to calculate the effective power of the device, as shown
    in the following line of code. This value depends on where you are located (for
    example, `230` for Europe, and `110` for the USA):'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 草图的一个重要部分是声明有效电压的值，该值将用于稍后计算设备的有效功率，如下所示代码行。这个值取决于你所在的位置（例如，欧洲为 `230`，美国为 `110`）：
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the `setup()` part, we need to start the bridge between the Arduino microcontroller
    and the Linux machine as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `setup()` 部分，我们需要启动 Arduino 微控制器和 Linux 机之间的桥接，如下所示：
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We also need to start the web server as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要按照以下方式启动网络服务器：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then, the last and most important part of the `setup()` function is to calibrate
    the sensor in order to determine which value is returned when the current is null.
    This is done by the following line of code:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，`setup()` 函数的最后也是最重要的部分是对传感器进行校准，以确定当电流为零时返回哪个值。这是通过以下代码行完成的：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s dive into this function. We could simply get one measurement from the
    current sensor but that would be a bad idea. Indeed, the value that you get from
    the sensor varies slightly over time, around an average that we actually want
    to measure. This is typical behavior when using analog sensors that have important
    sensitivities such as the one we are using here. This is why the function basically
    samples and averages the signal over several measurements with the following lines
    of code:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入探讨这个函数。我们可以简单地从电流传感器获取一个测量值，但这不是一个好主意。实际上，从传感器获取的值会随时间略有变化，围绕一个我们实际上想要测量的平均值。这是使用具有重要灵敏度的模拟传感器（如我们在这里使用的传感器）时的典型行为。这就是为什么该函数基本上通过以下几行代码在多次测量中对信号进行采样和平均：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'After these measurements, we return the average as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些测量之后，我们返回平均值，如下所示：
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This way, we are sure to get a stable value of the sensor reading every time.
    This value is then used throughout the whole sketch as a reference value for the
    current sensor readings. For example, if the measured value is equal to this reference,
    we will know that the current in the lamp is null. The actual sensor reading during
    the operation of the project uses the same function, so we always get a stable
    measurement.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们每次都能确保获得一个稳定的传感器读数。然后，这个值在整个sketch中用作电流传感器读数的参考值。例如，如果测量的值等于这个参考值，我们就知道灯中的电流为零。在项目的操作过程中，实际传感器读数使用的是同一个函数，所以我们总是得到一个稳定的测量值。
- en: 'Now, comes the `loop()` part of the sketch. It actually consists of two parts:
    in the first part, we will receive incoming connections on the Yún web server
    that we started earlier, and in the second part, we will print out the measurements
    that come from the current sensor.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是sketch的`loop()`部分。它实际上由两部分组成：在第一部分中，我们将接收我们之前启动的Yún网络服务器上的传入连接；在第二部分中，我们将打印出来自电流传感器的测量值。
- en: 'For the web server part, we can listen for connections as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 对于网络服务器部分，我们可以按如下方式监听连接：
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If a client is detected, we process the request with the following code:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果检测到客户端，我们将使用以下代码处理请求：
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: I won't detail the `Process` function as it is the same as in the `Bridge` example
    for the Arduino Yún that we used earlier (this is available as an example in the
    Yún `Bridge` library). To know more about the Yún REST API, you can visit the
    official Arduino documentation on the Arduino website at [http://arduino.cc/en/Guide/ArduinoYun](http://arduino.cc/en/Guide/ArduinoYun).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会详细说明`Process`函数，因为它与我们在之前的Arduino Yún `Bridge`示例中使用的相同（这可以作为示例在Yún `Bridge`库中找到）。要了解更多关于Yún
    REST API的信息，您可以访问Arduino网站上的官方Arduino文档，网址为[http://arduino.cc/en/Guide/ArduinoYun](http://arduino.cc/en/Guide/ArduinoYun)。
- en: 'Now, we will write the part of the sketch that is responsible for the current
    measurements. It starts when you get a stable measurement, just as we did earlier
    for the null current as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将编写负责电流测量的sketch部分。它在你获得稳定测量值时开始，就像我们之前为无电流所做的如下：
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'I won''t get into the details of this function as it is the same as which we
    used to get the value for the null current. We can now do some calculations on
    this measured value. First, we need to convert it to a usable current value as
    follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会详细介绍这个函数，因为它与我们用来获取无电流值的函数相同。现在，我们可以对这个测量值进行一些计算。首先，我们需要将其转换为可用的电流值，如下所示：
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This is the amplitude of the current, which is a sinusoidal current. This formula
    can be found in the datasheet of the sensor as well as on the ITead Studio website.
    Because we know this information about the current, to get the effective current,
    we simply need to divide it by the square root of two as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这是电流的幅度，它是一个正弦电流。这个公式可以在传感器的数据表中找到，也可以在ITead Studio网站上找到。因为我们知道关于电流的这些信息，为了获取有效电流，我们只需将其除以根号二，如下所示：
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To get the effective power, we then need to transform this current in amperes
    by dividing the value by 1000 and multiplying it with the effective voltage. I
    also added an absolute value operator so that the power is always positive, even
    when you connect the current sensor to measure negative currents, as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获取有效功率，我们需要将这个安培电流值除以1000，然后乘以有效电压。我还添加了一个绝对值运算符，这样功率总是正值，即使你连接电流传感器来测量负电流，如下所示：
- en: '[PRE14]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The sketch ends by printing all these values on the Serial monitor and repeats
    itself every 50 milliseconds. The complete sketch for this part is available on
    the GitHub repository of the book at [https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter2/sensors_test](https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter2/sensors_test).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 草图通过在串行监视器上打印所有这些值并每50毫秒重复一次来结束。这部分完整的草图可在本书的GitHub存储库中找到：[https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter2/sensors_test](https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter2/sensors_test)。
- en: Now you can upload the sketch to the Arduino board. Remember that at this point,
    the Arduino Yún board should be powered by either your computer or a USB power
    adapter, the lamp should be plugged to the project in the female power cord, and
    the project itself should be plugged into the wall socket.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以将草图上传到Arduino板。请记住，在这个阶段，Arduino Yún板应该由你的电脑或USB电源适配器供电，灯应该通过母电源线连接到项目中，项目本身应该插入到墙壁插座中。
- en: 'The relay is quite easy to test; you just need to go to your web browser and
    type in the right command. The REST API of the Yún works by typing the name of
    your Arduino Yún board followed by `.local` (in my case, I named it `myarduinoyun`).
    Then, if it is followed by `arduino/`, you can directly use commands to change
    the value of the Arduino pins. For example, to change the value of the relay pin
    to 1, you need to add `digital/8/1`, as shown in the following screenshot:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 继电器很容易测试；你只需要在你的网页浏览器中输入正确的命令。Yún的REST API通过输入你的Arduino Yún板名称后跟`.local`（在我的情况下，我将其命名为`myarduinoyun`）来工作。然后，如果后面跟着`arduino/`，你可以直接使用命令来改变Arduino引脚的值。例如，要将继电器引脚的值更改为1，你需要添加`digital/8/1`，如下面的截图所示：
- en: '![Testing your hardware connections](img/8007OS_02_11.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![测试你的硬件连接](img/8007OS_02_11.jpg)'
- en: The preceding command means that you are calling the command `digitalWrite(8,HIGH)`
    using the REST API. You should instantly hear the relay switch and see the light
    turn on. Try again by adding a `0` after the command instead of a `1`; the relay
    should switch again and turn the light off. Don't worry, as later in the project,
    we'll build a nice graphical interface so that you don't have to write this command
    every time.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令意味着你正在使用REST API调用`digitalWrite(8,HIGH)`命令。你应该立即听到继电器切换并看到灯光打开。尝试再次添加命令后面的`0`而不是`1`；继电器应该再次切换并关闭灯光。不要担心，在项目的后续部分，我们将构建一个漂亮的图形界面，这样你就不必每次都编写这个命令。
- en: 'Now we are going to check the measurements coming from the current sensor.
    Make sure that the lamp is off, reset the Arduino microcontroller to be sure that
    the sketch starts from the beginning again, and then open the Serial monitor.
    To do this, the Arduino Yún board has to be connected to your computer via the
    USB cable. The first thing you should see is the measurement for a null current
    as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将检查来自电流传感器的测量值。确保灯是关闭的，重置Arduino微控制器以确保草图从开始再次运行，然后打开串行监视器。为此，Arduino Yún板必须通过USB线连接到你的电脑。你应该首先看到以下无电流的测量值：
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then, the sketch continuously displays the value of the sensor reading, current
    amplitude, effective current, and effective power. Even if the current is null,
    remember that we average the sensor readings over several measurements, so there
    can be minor fluctuations in the value, as shown in the following code:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，草图会持续显示传感器读数、电流幅度、有效电流和有效功率的值。即使电流为零，也请记住，我们通过多次测量平均传感器读数，因此值可能会有轻微波动，如下面的代码所示：
- en: '[PRE16]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If you then turn the lamp on using the REST call in your browser, you should
    instantly see a change in the current and power readings as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用浏览器中的REST调用打开灯，你应该立即看到电流和功率读数的变化如下：
- en: '[PRE17]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: If you can see these values and your relay is responding to the REST calls in
    your browser, it means that your hardware is working correctly and you can proceed
    to the next step. If it doesn't work, the first step is to check the different
    connections of the current sensor and relay module. Also check that you have selected
    the correct Serial speed in the Serial monitor so that it matches the speed defined
    in the sketch.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你可以看到这些值，并且你的继电器在浏览器中的REST调用中响应，这意味着你的硬件工作正常，你可以继续下一步。如果它不起作用，第一步是检查电流传感器和继电器模块的不同连接。还要检查你在串行监视器中是否选择了正确的串行速度，以确保它与草图定义的速度相匹配。
- en: Sending data to Google Docs
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向Google Docs发送数据
- en: 'The first step is to set up a Google Docs spreadsheet for the project. Create
    a new sheet, give it a name (I named mine `Power` for this project, but you can
    name it as you wish), and set a title for the columns that we are going to use:
    **Time**, **Interval**, **Power**, and **Energy** (that will be calculated from
    the first two columns), as shown in the following screenshot:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是为项目设置一个 Google Docs 电子表格。创建一个新的工作表，给它起个名字（我为此项目命名为 `Power`，但你可以按你的意愿命名），并为我们将要使用的列设置标题：**时间**、**间隔**、**功率**和**能量**（将从前两列计算得出），如下面的截图所示：
- en: '![Sending data to Google Docs](img/8007OS_02_12.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![将数据发送到 Google Docs](img/8007OS_02_12.jpg)'
- en: We can also calculate the value of the energy using the other measurements.
    From theory, we know that over a given period of time, energy is power multiplied
    by time; that is, *Energy = Power * Time*.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用其他测量值来计算能量的值。从理论上讲，我们知道在给定的时间内，能量是功率乘以时间；也就是说，*能量 = 功率 * 时间*。
- en: However, in our case, power is calculated at regular intervals, and we want
    to estimate the energy consumption for each of these intervals. In mathematical
    terms, this means we need to calculate the integral of power as a function of
    time.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在我们的情况下，功率是在固定间隔内计算的，我们想要估计每个间隔的能耗。从数学的角度来说，这意味着我们需要计算功率作为时间的函数的积分。
- en: 'We don''t have the exact function between time and power as we sample this
    function at regular time intervals, but we can estimate this integral using a
    method called the trapezoidal rule. It means that we basically estimate the integral
    of the function, which is the area below the power curve, by a trapeze. The energy
    in the `C2` cell in the spreadsheet is then given by the formula:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有时间与功率之间的确切函数，因为我们以固定的时间间隔采样这个函数，但我们可以使用称为梯形规则的方法来估计这个积分。这意味着我们基本上通过梯形来估计函数的积分，即功率曲线下的面积。电子表格中
    `C2` 单元的能量由以下公式给出：
- en: '*Energy= (PowerMeasurement + NextPowerMeasurement)*TimeInverval/2*.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '*能量 = (功率测量值 + 下一个功率测量值) * 时间间隔 / 2*。'
- en: Concretely, in Google Docs, you will need the formula, *D2 = (B2 + B3)*C2/2*.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，在 Google Docs 中，你需要公式 *D2 = (B2 + B3)*C2/2*。
- en: The Arduino Yún board will give you the power measurement, and the time interval
    is given by the value we set in the sketch. However, the time between two measurements
    can vary from measurement to measurement. This is due to the delay introduced
    by the network. To solve this issue, we will transmit the exact value along with
    the power measurement to get a much better estimate of the energy consumption.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino Yún 板将提供功率测量，时间间隔由我们在草图中所设置的值给出。然而，两次测量之间的时间可能会因测量而异。这是由于网络引入的延迟造成的。为了解决这个问题，我们将传输确切的值以及功率测量值，以获得对能耗的更好估计。
- en: Then, it's time to build the sketch that we will use for the project. The goal
    of this sketch is basically to wait for commands that come from the network, to
    switch the relay on or off, and to send data to the Google Docs spreadsheet at
    regular intervals to keep track of the energy consumption.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，是时候构建我们将用于项目的草图了。这个草图的目的是基本上等待来自网络的命令，切换继电器的开或关，并且定期将数据发送到 Google Docs 电子表格以跟踪能耗。
- en: 'We will build the sketch on top of the sketch we built earlier so I will explain
    which components need to be added. First, you need to include your Temboo credentials
    using the following line of code:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在之前构建的草图之上构建草图，所以我将解释需要添加哪些组件。首先，你需要使用以下代码行包含你的 Temboo 凭据：
- en: '[PRE18]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Since we can''t continuously measure the power consumption data (the data transmitted
    would be huge, and we will quickly exceed our monthly access limit for Temboo!),
    like in the test sketch, we need to measure it at given intervals only. However,
    at the same time, we need to continuously check whether a command is received
    from the outside to switch the state of the relay. This is done by setting the
    correct timings first, as shown in the following code:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们无法连续测量能耗数据（传输的数据量会很大，我们很快就会超过 Temboo 的月度访问限制！），就像在测试草图中所做的那样，我们只需要在给定的间隔内进行测量。然而，同时，我们需要持续检查是否有来自外部的命令来切换继电器的状态。这是通过首先设置正确的定时来完成的，如下面的代码所示：
- en: '[PRE19]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The server poll time will be the interval at which we check the incoming connections.
    The power measurement delay, as you can guess, is the delay at which the power
    is measured.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器轮询时间将是检查传入连接的间隔。正如你可以猜到的，功率测量延迟是测量功率的延迟。
- en: However, we can't use a simple delay function for this as it will put the entire
    sketch on hold. What we are going to do instead is to count the number of cycles
    of the main loop and then trigger a measurement when the right amount of cycles
    have been reached using a simple `if` statement. The right amount of cycles is
    given by the power measurement `cycles_max` variable.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们不能使用简单的延迟函数来完成这个任务，因为这将会使整个草图暂停。我们将要做的是计算主循环的周期数，然后使用简单的`if`语句在达到正确的周期数时触发测量。正确的周期数由功率测量的`cycles_max`变量给出。
- en: 'You also need to insert your Google Docs credentials using the following lines
    of code:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要使用以下代码行插入您的Google Docs凭据：
- en: '[PRE20]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In the `setup()` function, you need to start a date process that will keep
    a track of the measurement date. We want to keep a track of the measurement over
    several days, so we will transmit the date of the day as well as the time, as
    shown in the following code:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在`setup()`函数中，您需要启动一个日期处理过程，以跟踪测量日期。我们希望跟踪多天的测量，因此我们将传输当天的日期和时间，如下面的代码所示：
- en: '[PRE21]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In the `loop()` function of the sketch, we check whether it''s time to perform
    a measurement from the current sensor, as shown in the following line of code:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在草图的`loop()`函数中，我们检查是否是时候从当前传感器执行测量，如下面的代码行所示：
- en: '[PRE22]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'If that''s the case, we measure the sensor value, as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果是这样的话，我们将测量传感器值，如下所示：
- en: '[PRE23]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We also get the exact measurement interval that we will transmit along with
    the measured power to get a correct estimate of the energy consumption, as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还获得了精确的测量间隔，我们将将其与测量的功率一起传输，以获得能源消耗的正确估计，如下所示：
- en: '[PRE24]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We then calculate the effective power from the data we already have. The amplitude
    of the current is obtained from the sensor measurements as shown earlier. Then
    we can get the effective value of the current by dividing this amplitude by the
    square root of 2\. Finally, as we know the effective voltage and that power is
    current multiplied by voltage, we can calculate the effective power as well, as
    shown in the following code:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们根据已有的数据计算有效功率。电流的幅度是从之前的传感器测量中获得的。然后，我们可以通过除以根号2来得到电流的有效值。最后，因为我们知道有效电压，而功率是电流乘以电压，所以我们可以计算出有效功率，如下面的代码所示：
- en: '[PRE25]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'After this, we send the data with the time interval to Google Docs and reset
    the counter for power measurements, as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将数据以时间间隔发送到Google Docs，并重置功率测量的计数器，如下所示：
- en: '[PRE26]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The function to send data to Google Docs is nearly the same as the one we saw
    in [Chapter 1](ch01.html "Chapter 1. Building a Weather Station Connected to the
    Cloud"), *Building a Weather Station Connected to the Cloud*. Let''s quickly go
    into the details of this function. It starts by declaring the type of Temboo library
    we want to use, as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 将数据发送到Google Docs的函数几乎与我们在[第1章](ch01.html "第1章. 连接到云端的气象站")中看到的相同，即*构建一个连接到云端的气象站*。让我们快速进入这个函数的细节。它首先声明我们想要使用的Temboo库的类型，如下所示：
- en: '[PRE27]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Start with the following line of code:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 从以下代码行开始：
- en: '[PRE28]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We then need to set the data that concerns your Google account, for example,
    the username, as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要设置与您的Google账户相关的数据，例如用户名，如下所示：
- en: '[PRE29]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The actual formatting of the data is done with the following line of code:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 实际的数据格式化是通过以下代码行完成的：
- en: '[PRE30]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Here, `interval` is the time interval between two measurements, and `effectiveValue`
    is the value of the measured power that we want to log on to Google Docs. The
    Choreo is then executed with the following line of code:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`interval`是两次测量之间的时间间隔，而`effectiveValue`是我们想要记录在Google Docs上的测量功率的值。然后，Choreo将执行以下代码行：
- en: '[PRE31]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Finally, we do this after every 50 milliseconds and get an increment to the
    power measurement counter each time, as follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们在每50毫秒后执行此操作，并且每次都会增加功率测量计数器，如下所示：
- en: '[PRE32]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The complete code for this section is available at [https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter2/energy_log](https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter2/energy_log).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 本节完整的代码可在[https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter2/energy_log](https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter2/energy_log)找到。
- en: 'The code for this part is complete. You can now upload the sketch and after
    that, open the Google Docs spreadsheet and then just wait until the first measurement
    arrives. The following screenshot shows the first measurement I got:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分的代码已经完成。现在您可以上传草图，然后打开 Google Docs 电子表格，然后只需等待第一次测量到达。以下截图显示了第一次我得到的测量结果：
- en: '![Sending data to Google Docs](img/8007OS_02_13.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![将数据发送到 Google Docs](img/8007OS_02_13.jpg)'
- en: 'After a few moments, I got several measurements logged on my Google Docs spreadsheet.
    I also played a bit with the lamp control by switching it on and off so that we
    can actually see changes in the measured data. The following screenshot shows
    the first few measurements:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 几分钟后，我在我的 Google Docs 电子表格中记录了几次测量。我还通过开关灯来玩了一会儿灯的控制，以便我们实际上可以看到测量数据的变化。以下截图显示了前几次测量：
- en: '![Sending data to Google Docs](img/8007OS_02_14.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![将数据发送到 Google Docs](img/8007OS_02_14.jpg)'
- en: 'It''s good to have some data logged in the spreadsheet, but it is even better
    to display this data in a graph. I used the built-in plotting capabilities of
    Google Docs to plot the power consumption over time on a graph, as shown in the
    following screenshot:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在电子表格中记录一些数据是好的，但将数据以图表形式展示则更好。我使用了 Google Docs 内置的绘图功能，在图表上绘制了随时间的功耗，如下面的截图所示：
- en: '![Sending data to Google Docs](img/8007OS_02_15.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![将数据发送到 Google Docs](img/8007OS_02_15.jpg)'
- en: 'Using the same kind of graph, you can also plot the calculated energy consumption
    data over time, as shown in the following screenshot:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 使用相同类型的图表，您还可以绘制随时间计算出的能耗数据，如下面的截图所示：
- en: '![Sending data to Google Docs](img/8007OS_02_16.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![将数据发送到 Google Docs](img/8007OS_02_16.jpg)'
- en: From the data you get in this Google Docs spreadsheet, it is also quite easy
    to get other interesting data. You can, for example, estimate the total energy
    consumption over time and the price that it will cost you. The first step is to
    calculate the sum of the energy consumption column using the integrated sum functionality
    of Google Docs.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 从您在 Google Docs 电子表格中获得的数据中，也可以轻松地获取其他有趣的数据。例如，您可以估计随时间的总能耗及其成本。第一步是使用 Google
    Docs 的集成求和功能计算能耗列的总和。
- en: Then, you have the energy consumption in Joules, but that's not what the electricity
    company usually charges you for. Instead, they use kWh, which is basically the
    Joule value divided by 3,600,000\. The last thing we need is the price of a single
    kWh. Of course, this will depend on the country you're living in, but at the time
    of writing this book, the price in the USA was approximately $0.16 per kWh. To
    get the total price, you then just need to multiply the total energy consumption
    in kWh with the price per kWh.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您有了以焦耳为单位的能耗，但这并不是电力公司通常向您收费的单位。相反，他们使用千瓦时（kWh），这基本上是将焦耳值除以 3,600,000。我们最后需要的是每千瓦时的价格。当然，这取决于您所在的国家，但在撰写本书时，美国的电价大约是每千瓦时
    0.16 美元。要得到总价格，您只需将总能耗（千瓦时）乘以每千瓦时的价格即可。
- en: 'This is the result with the data I recorded. Of course, as I only took a short
    sample of data, it cost me nearly nothing in the end, as shown in the following
    screenshot:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用我记录的数据得到的结果。当然，由于我只取了很短的数据样本，最终成本几乎为零，如下面的截图所示：
- en: '![Sending data to Google Docs](img/8007OS_02_17.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![将数据发送到 Google Docs](img/8007OS_02_17.jpg)'
- en: You can also estimate the on/off time of the device you are measuring. For this
    purpose, I simply added an additional column next to `Energy` named `On/Off`.
    I simply used the formula `=IF(C2<2;0;1)`.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以估计您正在测量的设备的开关时间。为此，我在“能量”旁边简单地添加了一个名为“开关”的额外列。我简单地使用了公式 `=IF(C2<2;0;1)`。
- en: It means that if the power is less than 2W, we count it as an off state; otherwise,
    we count it as an on state. I didn't set the condition to 0W to count it as an
    off state because of the small fluctuations over time from the current sensor.
    Then, when you have this data about the different on/off states, it's quite simple
    to count the number of occurrences of each state, for example, on states, using
    `=COUNTIF(E:E,"1")`.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着如果功率小于 2W，我们将其视为关闭状态；否则，我们将其视为开启状态。我没有将条件设置为 0W 以将其计为关闭状态，因为电流传感器随时间的小幅波动。然后，当您有了关于不同开关状态的数据时，计算每个状态的出现次数相当简单，例如，使用
    `=COUNTIF(E:E,"1")`。
- en: 'I applied these formulas in my Google Docs spreadsheet, and the following screenshot
    is the result with the sample data I recorded:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我在我的 Google Docs 电子表格中应用了这些公式，以下截图是使用我记录的样本数据得到的结果：
- en: '![Sending data to Google Docs](img/8007OS_02_18.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![发送数据到Google Docs](img/8007OS_02_18.jpg)'
- en: 'It is also very convenient to represent this data in a graph. For this, I used
    a pie chart, which I believe is the most adaptable graph for this kind of data.
    The following screenshot is what I got with my measurements:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 将这些数据以图表的形式表示也非常方便。为此，我使用了一个饼图，我认为这是最适合这种数据的图表。以下是我测量得到的截图：
- en: '![Sending data to Google Docs](img/8007OS_02_19.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![发送数据到Google Docs](img/8007OS_02_19.jpg)'
- en: With the preceding kind of chart, you can compare the usage of a given lamp
    from day to day, for example, to know whether you have left the lights on when
    you are not there.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前面提到的这种图表，你可以比较特定灯具的日间使用情况，例如，了解你是否在不在这里时忘记了开灯。
- en: Building an interface to switch the lights on/off remotely
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 建立一个远程开关灯的界面
- en: Now that our project automatically logs data concerning the energy consumption
    on Google Docs, it's time to go back to the relay control. For now, we tested
    the relay by going into a web browser and typing the correct REST function with
    the name of the pin we want to change.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在Google Docs上自动记录了有关能源消耗的数据，是时候回到继电器控制上了。到目前为止，我们通过进入网页浏览器并输入正确的REST函数以及我们想要更改的引脚名称来测试了继电器。
- en: However, that's not very convenient. You don't want to type something in your
    web browser every time you want to turn a light on in your home. What we would
    like to have instead is a nice graphical interface with buttons that can be pressed
    to turn a light on or off. It would be even better if this interface could be
    accessed not only from a web browser on your computer but also from any smartphone
    or tablet in your home. That's exactly what we are going to build now.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这并不方便。你不想每次在家想打开灯时都在网页浏览器中输入一些内容。我们真正想要的是一个非常棒的图形界面，带有可以按下以打开或关闭灯的按钮。如果这个界面可以从你的电脑上的网页浏览器访问，也可以从家中的任何智能手机或平板电脑访问，那就更好了。这正是我们现在要构建的。
- en: We need several components to do so, and we will mix several programming languages
    to build the best graphical interface possible. We will use HTML for the main
    page that will host the on/off button, JavaScript to handle the actions of this
    button, and PHP to transmit the correct command to the Arduino server. We are
    also going to use some CSS to make the interface look much better and automatically
    adapt itself to the device you are using, such as a smartphone.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们需要几个组件，并且我们将混合使用几种编程语言来构建最佳的图形界面。我们将使用HTML来构建包含开关按钮的主页，使用JavaScript来处理按钮的动作，使用PHP将正确的命令发送到Arduino服务器。我们还将使用一些CSS来使界面看起来更好，并自动适应你使用的设备，例如智能手机。
- en: 'First, let''s deal with the HTML code. We need to import the jQuery library
    and the file that will contain all the JavaScript code, as follows:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们来处理HTML代码。我们需要导入jQuery库以及包含所有JavaScript代码的文件，如下所示：
- en: '[PRE33]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Also, import the CSS style file, as follows:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要导入CSS样式文件，如下所示：
- en: '[PRE34]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The core of this HTML file is to create two buttons; one button to switch the
    relay on and the other to switch it off again. The following, for example, is
    the code for the **On** button:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 这个HTML文件的核心是创建两个按钮；一个按钮用于打开继电器，另一个按钮用于关闭继电器。例如，以下代码是**打开**按钮的代码：
- en: '[PRE35]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Now, if you were to actually take this file as it is, it would look really
    bad as some default styles would be applied to the buttons. That''s why we attached
    a CSS file to make the interface look a bit better. For example, I decided to
    center align the main form that contains the two buttons, as follows:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你直接使用这个文件，按钮的外观会很糟糕，因为一些默认样式会被应用到按钮上。这就是为什么我们附加了一个CSS文件，使界面看起来更好。例如，我决定将包含两个按钮的主要表单居中对齐，如下所示：
- en: '[PRE36]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'I also gave some style to the buttons themselves, such as an orange background;
    I made them bigger and also put a nice black border around them, as shown in the
    following code:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我也给按钮本身添加了一些样式，比如橙色背景；我使它们更大，并在它们周围添加了一个漂亮的黑色边框，如下面的代码所示：
- en: '[PRE37]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Now the interface looks much better on your computer. But what if somebody opens
    it from a smartphone? It would not be adapted at all to the tiny screen of a smartphone.
    To automatically make the interface adapt to the device you are using, we will
    use a property from CSS3 called media queries. This feature of CSS3 can, for example,
    detect whether a smaller screen size is used to access the page. Then, when you
    have this information, you can use it to modify the style of the different elements
    accordingly, for example, we may want to make our buttons appear differently on
    the page.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 现在界面在您的计算机上看起来要好得多。但如果有人从智能手机打开它呢？它根本不会适应智能手机的小屏幕。为了自动使界面适应您所使用的设备，我们将使用 CSS3
    中的一个属性，称为媒体查询。CSS3 的这个功能可以检测是否使用了较小的屏幕尺寸来访问页面。然后，当您拥有这些信息时，您可以使用它来相应地修改不同元素的风格，例如，我们可能希望使我们的按钮在页面上以不同的方式显示。
- en: 'In our case, we want to make the buttons take all the space available on the
    smaller screen. We also want to double the height of each button as well as double
    the font size so that they can be really readable on a small screen like on a
    smartphone. All of this is done by the following piece of code:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，我们希望按钮能够占据较小屏幕上所有可用的空间。我们还想将每个按钮的高度和字体大小都加倍，以便在像智能手机这样的小屏幕上真正可读。所有这些操作都通过以下代码片段完成：
- en: '[PRE38]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The JavaScript file simply makes the interface between the GUI we just designed
    and the PHP file that will actually connect to the Arduino Yún board. The following,
    for example, is the code called by one button:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 文件简单地建立了我们刚刚设计的 GUI 与将实际连接到 Arduino Yún 板的 PHP 文件之间的接口。例如，以下代码是某个按钮调用的代码：
- en: '[PRE39]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The `command` variable simply contains the state of the relay that we want to
    send to the Arduino Yún board and will set the value of the pin that the relay
    is connected to.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`command` 变量简单地包含我们想要发送到 Arduino Yún 板的继电器状态，并将设置继电器连接的引脚的值。'
- en: 'Now let''s see the PHP file. The first line of the code gets the command variable
    from the JavaScript and builds the command that will be sent to the Yún, as follows:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看 PHP 文件。代码的第一行从 JavaScript 获取 `command` 变量，构建将发送到 Yún 的命令，如下所示：
- en: '[PRE40]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'To actually send the command, we are going to use a PHP function named `curl`
    that we will use to call the REST API of the Yún. We first have to initialize
    this function with the URL we built earlier, as follows:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实际发送命令，我们将使用一个名为 `curl` 的 PHP 函数，我们将用它来调用 Yún 的 REST API。我们首先必须用我们之前构建的 URL
    初始化这个函数，如下所示：
- en: '[PRE41]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Finally, we actually execute this command with the following code:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们通过以下代码实际执行这个命令：
- en: '[PRE42]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The option with `set` in the first line of code is used simply to speed up access
    to the Arduino board. Before testing the interface, make sure that the web server
    on your computer is running and that all the files of the project are located
    at the root of the web server folder. The complete code for this part of the project
    is available at [https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter2/web_interface](https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter2/web_interface).
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 代码第一行中的 `set` 选项用于简单地加快对 Arduino 板的访问速度。在测试接口之前，请确保您的计算机上的网络服务器正在运行，并且项目的所有文件都位于网络服务器文件夹的根目录下。本部分项目的完整代码可在
    [https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter2/web_interface](https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter2/web_interface)
    找到。
- en: 'You should see the two buttons of the interface show up in your browser, as
    shown in the following screenshot:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该在浏览器中看到界面的两个按钮，如下面的截图所示：
- en: '![Building an interface to switch the lights on/off remotely](img/8007OS_02_20.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![远程开关灯的界面](img/8007OS_02_20.jpg)'
- en: You can now test this simple interface. Just click on a button and the PHP code
    should give the correct command on your Arduino Yún board, making the switch go
    on or off instantly.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以测试这个简单的接口。只需点击一个按钮，PHP 代码就应该在您的 Arduino Yún 板上给出正确的命令，使开关立即打开或关闭。
- en: 'You can also test the interface on a smartphone or tablet. I used my phone
    to do so. Just open your favorite browser, go to your computer''s IP address or
    network name, and you should see the different files of your project being displayed.
    Just click on **interface.html** and the interface should open and scale to your
    phone''s screen size, as shown in the following screenshot:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在智能手机或平板电脑上测试界面。我使用了我的手机来这样做。只需打开您喜欢的浏览器，访问您的电脑IP地址或网络名称，您应该会看到项目中的不同文件被显示出来。只需点击**interface.html**，界面应该会打开并调整到您手机的屏幕大小，如下面的截图所示：
- en: '![Building an interface to switch the lights on/off remotely](img/8007OS_02_21.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![远程开关灯光的界面](img/8007OS_02_21.jpg)'
- en: Just as for the interface on your computer, you can simply press a button and
    the light will switch on or off instantly. Now, you are able to command this light
    from wherever you are in your home; you just have to be connected to your local
    Wi-Fi network.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在电脑上的界面一样，您只需按下一个按钮，灯光就会立即打开或关闭。现在，您可以从家中任何地方控制这盏灯；您只需连接到您的本地Wi-Fi网络即可。
- en: Summary
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'Let''s see what we learned in this project. At the beginning of the project,
    you saw how to interface the required components of this project to your Arduino
    Yún board: a relay module, a current sensor, and a lamp that will be controlled
    by the Yún board.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看在这个项目中我们学到了什么。在项目开始时，您看到了如何将这个项目的所需组件连接到Arduino Yún板上：一个继电器模块、一个电流传感器和一个将由Yún板控制的灯。
- en: Then, we wrote a simple sketch to test the different components of the project
    and made sure that they all worked correctly.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们编写了一个简单的草图来测试项目的不同组件，并确保它们都能正确工作。
- en: Then, we built the energy consumption logging part of the project, and logged
    the power consumption inside a Google Docs spreadsheet. We also used the built-in
    capabilities of Google Docs to calculate the actual energy consumption, total
    energy cost, and on/off time of the device.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们构建了项目的能耗记录部分，并在Google Docs电子表格中记录了功耗。我们还使用了Google Docs的内置功能来计算实际能耗、总能耗成本和设备的开关时间。
- en: Finally, in the last part of the project, we built a graphical user interface
    to control the relay from a web browser, from your computer, or a smartphone/tablet.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在项目的最后一部分，我们构建了一个图形用户界面，可以从网页浏览器、您的电脑或智能手机/平板电脑控制继电器。
- en: Of course, there are many ways to take what you've learned in this project and
    extend it further. The first thing you can do is to add more devices to the project.
    For example, Arduino Yún has six analog inputs in total, so in theory you could
    plug the same number of current sensors into the Yún. Following the same principles,
    you could also add more Arduino Yún boards to the project.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，有许多方法可以将您在这个项目中学到的知识进一步扩展。首先，您可以向项目中添加更多设备。例如，Arduino Yún总共有六个模拟输入，所以理论上您可以将相同数量的电流传感器插入Yún。遵循同样的原则，您也可以向项目中添加更多的Arduino
    Yún板。
- en: You could also use the project with more features of Temboo, such as integrating
    the power measurements with social media, for example, by alerting the user with
    Twitter when the power consumption exceeds a given threshold. The user could then
    shut the lamp off by replying to this tweet.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用具有更多Temboo功能的该项目，例如将电力测量与社会媒体集成，例如，当功耗超过给定阈值时通过Twitter提醒用户。然后，用户可以通过回复这条推文来关闭灯。
- en: In the next chapter, we will use other features of the Arduino Yún such as the
    USB port and the embedded Linux machine to create a wireless security camera.
    This camera will automatically upload pictures to a Dropbox folder and also stream
    the video live on YouTube so you can monitor your home remotely.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用Arduino Yún的其他功能，如USB端口和嵌入式Linux机器，来创建一个无线安全摄像头。这个摄像头将自动将图片上传到Dropbox文件夹，并在YouTube上实时直播视频，这样您就可以远程监控您的家。
