- en: Chapter 1. An Overview of Unreal Engine
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章 虚幻引擎概述
- en: First of all, thank you for picking up this book. I am sure you are excited
    to learn how to make your own game. In this chapter, I will run you through the
    different fundamental components in a game and what Unreal Engine 4 offers to
    help you make your dream game.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，感谢您拿起这本书。我相信您一定很兴奋地想要学习如何制作自己的游戏。在本章中，我将向您介绍游戏中不同的基本组件以及虚幻引擎4如何帮助您制作您梦想中的游戏。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: What is in a game?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏中包含什么？
- en: The history of **Unreal Engine** (**UE**)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**虚幻引擎**（**UE**）的历史'
- en: How is game development done?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏开发是如何进行的？
- en: The components of UE and its editors
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UE的组件及其编辑器
- en: What goes into a game?
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏中包含什么？
- en: When you play a game, you probably are able to identify what needs to go into
    a game. In a simple PC shooting game example, when you press the left mouse button,
    the gun triggers. You see bullets flying, hear the sound of the gun and look around
    to see if you have shot anything. If you did hit something, for example, a wall,
    the target receives some form of damage.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当你玩游戏时，你可能能够识别出游戏中需要包含的内容。在一个简单的PC射击游戏示例中，当你按下左鼠标按钮时，枪会触发。你看到子弹飞出，听到枪声，四处张望看看你是否击中了什么。如果你击中了什么，例如，一堵墙，目标会受到某种形式的损伤。
- en: 'As a game creator, we need to learn breakdown what we see in a game to figure
    out what we need for a game. A simple breakdown without going into too much detail:
    link the mouse click to the firing of the bullets, play a sound file that sounds
    like a gun firing, display sparks (termed as **particle effect**) near the barrel
    of the gun and the target shows some visible damage.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 作为游戏创作者，我们需要学习分解我们在游戏中看到的内容，以确定我们为游戏需要什么。以下是一个简单的分解，不涉及过多细节：将鼠标点击与子弹发射联系起来，播放类似枪声的声音文件，在枪管附近显示火花（称为**粒子效果**），目标显示一些可见的损伤。
- en: Bearing this example in mind, try visualizing and breaking any game down into
    its fundamental components. This will greatly help you in designing and creating
    a game level.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑这个例子，尝试将任何游戏可视化并分解为其基本组件。这将极大地帮助你设计和创建游戏关卡。
- en: There is a lot going on behind the scenes when you are playing a game. With
    the help of Unreal Engine, the interaction of the many components has been designed
    and you will need to customize it for your own game. This is a huge time saver
    when you use an engine to create a game.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在玩游戏时，幕后有很多事情在进行。借助虚幻引擎，许多组件的交互已经被设计和定制，你需要根据你自己的游戏进行定制。当你使用引擎来制作游戏时，这将节省大量时间。
- en: What is a game engine?
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是游戏引擎？
- en: What a game engine does is that it provides you with tools and programs to help
    you customize and build a game; it gives you a head-start in making your own game.
    Unreal Engine is one of the more popular choices in the market currently and it
    is free for anyone to use for development (royalties need to be paid only if your
    game makes a profit; visit [https://www.unrealengine.com/custom-licensing](https://www.unrealengine.com/custom-licensing)
    for more information). Its popularity is mainly due to its extensive customizability,
    multiplatform capabilities, and the ability to create high quality AAA games with
    it. If you intend to start a career in game development, this is definitely one
    of the engines you want to start playing with and using to build your portfolio.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏引擎所做的是为你提供工具和程序，帮助你定制和构建游戏；它为你制作自己的游戏提供了先发优势。虚幻引擎是目前市场上更受欢迎的选择之一，并且任何人都可以免费用于开发（如果你的游戏盈利，则需要支付版税；更多信息请访问[https://www.unrealengine.com/custom-licensing](https://www.unrealengine.com/custom-licensing)）。它的流行主要归功于其广泛的定制性、多平台能力和使用它创建高质量AAA游戏的能力。如果你打算开始游戏开发生涯，这绝对是你想要开始尝试并用于构建你作品集的引擎之一。
- en: The history of Unreal Engine
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 虚幻引擎的历史
- en: Before explaining what this amazingly powerful game engine can do and how it
    works, let us take a short trip back into the past to see how UE came about and
    how it has evolved into what we have today.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在解释这个强大无比的游戏引擎能做什么以及它是如何工作的之前，让我们先短暂地回顾一下过去，看看UE是如何产生的，以及它是如何发展到今天这个样子的。
- en: For gamers, you are probably familiar with the Unreal game series. Do you know
    how the first Unreal game was made? The engineers at Epic Games built an engine
    to help them create the very first Unreal game. Over the years, with the development
    of each generation the Unreal game series, more and more functionalities were
    added to the engine to aid in the development of the game. This, in turn, increased
    UE's capabilities and improved the game engine very quickly over the years.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对于玩家来说，你可能对Unreal游戏系列很熟悉。你知道第一款Unreal游戏是如何制作的吗？Epic Games的工程师构建了一个引擎，帮助他们创建第一款Unreal游戏。多年来，随着每一代Unreal游戏系列的发展，越来越多的功能被添加到引擎中，以帮助游戏开发。这反过来又提高了UE的能力，并在几年内迅速改善了游戏引擎。
- en: In 1998, the first version of UE made the modding of a first player shooting
    game possible. You could replace Unreal content using your own and tweak the behavior
    of the **non-player characters** (**NPCs**), also known as **bots** (players that
    are controlled by the computer through artificial intelligence) using UnrealScript.
    Then multiplayer online features were added into UE through the development of
    *Unreal Tournament*, which is an online game. This game also added PlayStation
    2 to the list of compatible platforms in addition to the PC and Mac.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在1998年，UE的第一个版本使得对第一人称射击游戏的修改成为可能。你可以使用自己的内容替换Unreal内容，并使用UnrealScript调整**非玩家角色**（**NPCs**），也称为**机器人**（由计算机通过人工智能控制的玩家）的行为。随后，通过开发在线游戏*Unreal
    Tournament*，将多人在线功能添加到UE中。这款游戏还把PlayStation 2添加到了兼容平台列表中，除了PC和Mac。
- en: By 2002, UE had improved by leaps and bounds, bringing it into the next generation
    with the development of a particle system (a system to generate effects such as
    fog and smoke), static mesh tools (tools to manipulate objects), a physics engine
    (allows interaction between objects such as collisions) and a Matinee (a tool
    to create cut scenes, which is a brief, non interactive movie). This improvement
    saw to the development of the *Unreal Championship* and *Unreal Tournament 2003*.
    The release of *Unreal Championship* also added the Xbox game console to the list,
    with multiplayer capabilities in Xbox Live.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 到2002年，UE取得了飞跃性的进步，通过开发粒子系统（生成如雾和烟雾等效果的系统）、静态网格工具（操纵对象的工具）、物理引擎（允许对象之间如碰撞的交互）和Matinee（创建剪辑的工具，即简短的非交互式电影），将其带入下一代。这一改进导致了*Unreal
    Championship*和*Unreal Tournament 2003*的发展。*Unreal Championship*的发布还把Xbox游戏机添加到了列表中，并在Xbox
    Live中提供了多人游戏功能。
- en: 'The development of Epic''s next game *Unreal II: The Awakening* edged UE forward
    with an animation system and overall improvement with their existing engine. The
    development of faster Internet speeds in the early 2000s also increased the demand
    of multiplayer online gaming. *Unreal Tournament 2004* allowed players to engage
    in online battles with one another. This saw the creation of vehicles and large
    battlefields, plus improvements in online network capabilities. In 2005, the release
    of *Unreal Champion 2* on the Xbox game console reinforced UE capabilities on
    the Xbox console. It also saw the creation of a very important feature of a new
    third-person camera. This opened up greater possibilities in the types of games
    that could be created using the engine.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 'Epic的下一款游戏*Unreal II: The Awakening*的开发，通过引入动画系统和现有引擎的整体改进，将UE向前推进。2000年代初互联网速度的加快也增加了多人在线游戏的需求。*Unreal
    Tournament 2004*允许玩家相互进行在线战斗。这导致了车辆和大型战场的创建，以及在线网络能力的提升。2005年，*Unreal Champion
    2*在Xbox游戏机上的发布，加强了UE在Xbox平台上的能力。这也见证了新第三人称摄像系统的一个重要特性的创建。这为使用该引擎创建的游戏类型打开了更大的可能性。'
- en: '*Gears of War*, one of the most well-known franchises in the video games industry,
    pushed Epic Games to create and release the third version of its game engine,
    *Unreal Engine 3*, in 2006.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*战争机器*是电子游戏行业中最为知名的品牌之一，它推动Epic Games在2006年创建并发布了其游戏引擎的第三个版本，*Unreal Engine
    3*。'
- en: The improvement of the graphics engine used DirectX 9/10 to allow more realistic
    characters and objects to be made. The introduction of **Kismet**, which is a
    visual scripting system, allowed game and level designers to create game play
    logic for more engaging combat play without having to delve into writing codes.
    Platform capabilities of UE3 include Xbox360 and PlayStation 3 was added. There
    was a revamp in the light control and materials. UE3 also had a new physics engine.
    *Gears of War 2* released in 2008 saw the progressive improvements to UE3\. In
    2013, the *Gears of War Judgment* was released.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 DirectX 9/10 的图形引擎的改进，使得制作更逼真的角色和对象成为可能。**Kismet** 的引入，这是一个视觉脚本系统，允许游戏和关卡设计师在不深入编写代码的情况下创建更具吸引力的战斗玩法逻辑。UE3
    的平台功能包括增加了 Xbox360 和 PlayStation 3。在光照控制和材质方面进行了全面革新。UE3 还引入了新的物理引擎。2008 年发布的
    *《战争机器 2》* 看到了 UE3 的逐步改进。2013 年，发布了 *《战争机器：审判》*。
- en: PC online gaming was also under the radar of Epic Game's developers. In 2009,
    Atlas Technology was released to be used in conjunction with UE to allow **massively
    multiplayer online games** (**MMOG**) to be created.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: PC 在线游戏也受到了 Epic Games 开发者的关注。2009 年，发布了 Atlas Technology，与 UE 结合使用，以允许创建 **大型多人在线游戏**（**MMOG**）。
- en: The increasing demand of mobile gaming also led to UE3 being pushed in the direction
    of increasing its supportability for various mobile platforms. All these advancements
    and technological capabilities have made UE3 the most popular version of Unreal
    Engine and it is still very widely used today.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 移动游戏需求的增加也导致 UE3 向着增强其对各种移动平台的支持能力方向发展。所有这些进步和技术能力使 UE3 成为最流行的 Unreal Engine
    版本，并且至今仍然非常广泛地被使用。
- en: UE3 dominated the market for 8 years until UE4 came along. UE4 was launched
    in 2014 and introduced the biggest change by replacing Kismet with the new concept
    of **Blueprint**. We will discuss more about the features of UE4 later in the
    chapter.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: UE3 在市场上主导了 8 年，直到 UE4 的出现。UE4 于 2014 年发布，通过用新的 **蓝图** 概念取代 Kismet 带来了最大的变化。我们将在本章后面更详细地讨论
    UE4 的功能。
- en: Game development
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏开发
- en: Each game studio has its own set of processes to ensure the successful launch
    of its game. Game production typically goes through several stages before a game
    is launched. In general, there is a preproduction/planning, production stage,
    and postproduction stage. Most of the time is normally spent in the production
    stage.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 每个游戏工作室都有自己的一套流程来确保其游戏的成功发布。游戏制作通常在游戏发布之前要经过几个阶段。一般来说，有前期制作/规划阶段、制作阶段和后期制作阶段。大部分时间通常都花在制作阶段。
- en: Game development is an iterative process. The birth of an idea is the start
    of this process. The idea of the game must first be tested to see if it is actually
    fun to the target audience. This is done through prototyping the level quickly.
    Iterations of this prototype into a fully-fledged game can go from weeks to months
    to years.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏开发是一个迭代的过程。一个想法的诞生是这个过程的开始。游戏的想法必须首先经过测试，看看它是否真的对目标受众有乐趣。这通过快速原型化关卡来完成。从几周到几个月甚至几年，这个原型的迭代可以变成一个完整游戏。
- en: The development team takes care of this iteration process. Everyone's contribution
    of the game throughout the development cycle directly affects the game and its
    success.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 开发团队负责这个迭代过程。在整个开发周期中，每个人对游戏的贡献都会直接影响游戏及其成功。
- en: 'Development teams loosely consist of several specialized groups: artists (2D/3D
    modeler, animator), cinematic creators, sound designers, game designers, and programmers.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 开发团队由几个专业小组松散组成：艺术家（2D/3D 模型师、动画师）、电影制作者、音效设计师、游戏设计师和程序员。
- en: Artists
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 艺术家
- en: They create all visible objects in the game from menu buttons to the trees in
    the game level. Some artists specialize in 3D modeling, while others are focused
    on animation. Artists make the game look beautiful and realistic. Artists have
    to learn how to import their created images/models, which are normally created
    first using other software such as 3DMax, Maya, and MODO into UE4\. They would
    most likely need to make use of Blueprint to create certain custom behaviors for
    the game.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 他们创建游戏中所有可见的对象，从菜单按钮到游戏关卡中的树木。一些艺术家专注于 3D 模型，而其他人则专注于动画。艺术家使游戏看起来美丽而逼真。艺术家必须学习如何将他们创建的图像/模型导入
    UE4，这些图像/模型通常首先使用其他软件（如 3DMax、Maya 和 MODO）创建。他们很可能会使用蓝图来为游戏创建某些自定义行为。
- en: Cinematic creators
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 电影制作者
- en: Many cinematic experts are also trained artists. They have a special eye and
    creative skills to create short movie scenes/cut scenes. The Matinee tool in UE4
    will be what they would be using most of the time.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 许多电影专家也是受过训练的艺术家。他们拥有独特的视角和创意技能，能够创作短片场景/剪辑场景。UE4中的Matinee工具将是他们大部分时间会使用的工具。
- en: Sound designers
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 音效设计师
- en: Sound designers have an acute sense of hearing and they are mostly musically
    trained. They work in the sound labs to create custom sounds/music for the game.
    They are in charge of importing sound files into UE4 to be played at suitable
    instances in the game. When using UE4, they would be spending most of their time
    using the Sound Cue Editor.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 音效设计师具有敏锐的听觉，他们大多数都受过音乐训练。他们在声音实验室中工作，为游戏创建定制的声音/音乐。他们负责将声音文件导入UE4，以便在游戏中的合适时刻播放。当使用UE4时，他们大部分时间会使用声音提示编辑器。
- en: Game designers
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 游戏设计师
- en: Designers determine what happens in the game, what goes on in the game, and
    what the game will be about. In the planning stage, most of the time will be spent
    in discussion, presentations, and documentation. In the production stage, they
    will oversee the game prototyping process to ensure that the game level is created
    as designed. Very often designers spend their time in the Unreal Editor to customize
    and fine-tune the level.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 设计师决定游戏中的发生什么，游戏中发生什么，以及游戏将涉及什么。在规划阶段，大部分时间将花费在讨论、演示和文档上。在生产阶段，他们将监督游戏原型制作过程，以确保游戏关卡按照设计创建。设计师经常花费时间在Unreal编辑器中，以自定义和微调关卡。
- en: Programmers
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 程序员
- en: They are the group that looks into the technology and software the team needs
    to create the game. In pre-production, they are responsible for deciding which
    software programs are required and are capable of creating the game. They also
    have to ensure that the different software used are compatible with one another.
    Programmers also write codes to make the objects created by the artist come alive
    according to the idea that the designers came up with. They program the rules
    and functionality of the game. Some programmers are also involved in creating
    tools and research for the games. They are not directly involved in creating the
    game but instead are supporting the production pipeline. Games with extreme graphics
    usually have a team of researchers optimizing the graphics and creating more realistic
    graphics for the game. They spend most of their time in codes, probably coding
    in Visual Studio using C++. They are also able to modify and extend the features
    of UE4 to support the needs of the game that they are developing.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 他们是研究团队，负责了解团队创建游戏所需的技术和软件。在前期制作阶段，他们负责决定哪些软件程序是必需的，并且能够创建游戏。他们还必须确保所使用的不同软件之间兼容。程序员也会编写代码，使艺术家创建的对象根据设计师的想法变得生动。他们编写游戏的规则和功能。一些程序员也参与创建游戏工具和研究。他们并不直接参与创建游戏，而是支持制作流程。具有极端图形的游戏通常有一支研究团队优化图形，并为游戏创建更逼真的图形。他们大部分时间都在编写代码，可能使用Visual
    Studio用C++编写代码。他们还能够修改和扩展UE4的功能，以满足他们正在开发的游戏的需求。
- en: The components of Unreal Engine 4
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unreal Engine 4的组件
- en: Unreal Engine is a game engine that helps you make games. Unreal Engine is made
    up of several components that work together to drive the game. Its massive system
    of tools and editors allows you to organize your assets and manipulate them to
    create the gameplay for your game.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Unreal Engine是一个帮助您制作游戏的引擎。Unreal Engine由几个组件组成，它们协同工作以驱动游戏。其庞大的工具和编辑器系统允许您组织您的资产，并操纵它们以创建您游戏的游戏玩法。
- en: Unreal Engine components include a sound engine, physics engine, graphics engine,
    input and the Gameplay framework, and an online module.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Unreal Engine的组件包括音效引擎、物理引擎、图形引擎、输入和游戏框架，以及在线模块。
- en: The sound engine
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 音效引擎
- en: The sound engine is responsible for having music and sounds in the game. Its
    integration into Unreal allows you to play various sound files to set the mood
    and add realism to the game. There are many uses for sounds in the game. Ambient
    sounds are constantly in the background. Sound effects can be repeated when needed
    or one-off and are triggered by specific events in the game.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 音效引擎负责在游戏中添加音乐和声音。它集成到Unreal中，允许您播放各种声音文件，以设定氛围并增加游戏的真实感。游戏中声音有许多用途。环境声音始终在背景中。当需要时，声音效果可以重复，或者是一次性的，由游戏中的特定事件触发。
- en: In a forest setting, you can have a combination of bird sounds, wind, trees,
    and leaves rustling as the ambient sound. These individual sounds can be combined
    as a forest ambient sound and be constantly playing softly in the background when
    the game character is in the forest. Recurring sounds such as footprint sound
    files can be connected to the animation of the walking movement. One-time sound
    effects, such as the explosion of a particular building in the city, can be linked
    to an event trigger in the game. In Unreal, the triggering of the sounds is implemented
    through cues known as **Sound Cue**.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在森林环境中，你可以将鸟鸣、风、树木和树叶沙沙声作为环境声音。这些单独的声音可以组合成森林环境声音，并在游戏角色在森林中时在背景中柔和地持续播放。重复的声音，如脚步声文件，可以连接到行走动作的动画。一次性音效，如城市中特定建筑的爆炸声，可以链接到游戏中的事件触发器。在虚幻中，声音的触发是通过称为**声音提示**的提示实现的。
- en: The physics engine
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 物理引擎
- en: In the real world, objects are governed by the laws of physics. Objects collide
    and are set in motion according to Newton's laws of motion. Attraction between
    objects also obeys the law of gravity and Einstein's theory of general relativity.
    In the game world, for objects to react similarly to real life, it has to have
    the same system built through programming. Unreal physics engine makes use of
    the PhysX engine, developed by NVIDIA, to perform calculations for lifelike physical
    interactions, such as collisions and fluid dynamics. The presence of this advanced
    physics engine in place allows us to concentrate on making the game instead of
    spending time making objects interact with the game world correctly.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实世界中，物体遵循物理定律。物体根据牛顿运动定律发生碰撞并被设置成运动状态。物体之间的吸引力也遵循万有引力定律和爱因斯坦的广义相对论。在游戏世界中，为了使物体对现实生活的反应相似，必须通过编程构建相同的系统。虚幻物理引擎利用由NVIDIA开发的PhysX引擎进行计算，以实现逼真的物理交互，例如碰撞和流体动力学。这种高级物理引擎的存在使我们能够专注于制作游戏，而不是花费时间让物体正确地与游戏世界交互。
- en: The graphics engine
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图形引擎
- en: For an image to show up on screen, it has to be rendered onto your display monitor
    (such as your PC/TV or mobile devices) The graphics engine is responsible for
    the output on your display by taking in information about the entire scene such
    as color, texture, geometry, the shadow of an individual object and lighting,
    and the viewpoint of a scene, and consider the cross-interaction of the factors
    that affect the overall color, light, shadow, and occlusion of the objects.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在屏幕上显示图像，它必须渲染到您的显示监视器（如您的PC/电视或移动设备）上。图形引擎通过获取有关整个场景的信息（如颜色、纹理、几何形状、单个物体的阴影和光照，以及场景的视点），并考虑影响物体整体颜色、光线、阴影和遮挡的交叉交互因素，负责在您的显示上输出信息。
- en: The graphics engine then undergoes massive calculations in the background using
    all these information before it is able to output the final pixel information
    to the screen. The power of a graphics engine affects how realistic your scene
    will look. Unreal graphics engine has the capabilities to output photorealistic
    qualities for your game. Its ability to optimize the scene and to process huge
    amount calculations for real-time lighting allows users to create realistic objects
    in the game.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图形引擎随后在后台使用所有这些信息进行大量计算，然后才能将最终的像素信息输出到屏幕上。图形引擎的强大功能影响场景的真实感。虚幻图形引擎具有输出逼真游戏画面质量的能力。它优化场景和处理大量实时光照计算的能力，使用户能够在游戏中创建逼真的物体。
- en: This engine can be used to create games for all platforms (PC, Xbox, PlayStation,
    and mobile devices). It supports DirectX 11/12, OpenGL, and JavaScript/WebGL rendering.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 该引擎可用于创建适用于所有平台（PC、Xbox、PlayStation和移动设备）的游戏。它支持DirectX 11/12、OpenGL和JavaScript/WebGL渲染。
- en: Input and the Gameplay framework
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 输入和游戏框架
- en: Unreal Engine consists of an input system that converts key and button presses
    by the player into actions performed by the in-game character. This input system
    can be configured through the Gameplay framework. The Gameplay framework contains
    the functionality to track game progress and control the rules of the game. **Heads-up
    displays** (**HUDs**)/**user interfaces** (**UIs**) are part of the Gameplay framework
    to provide feedback to the player during the course of the game. Gameplay classes
    such as `GameMode`, `GameState`, and `PlayerState` set the rules and control the
    state of the game. The in-game characters are controlled either by players (using
    the `PlayerController` class) or AI (using `AIController` class). In-game characters,
    whether controlled by the player or AI, are part of a base class known as the
    **Pawn** class. The **Character** class is a subset of the **Pawn** class, which
    is specifically made for vertically-oriented player representation, for example,
    a human.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Unreal Engine 包含一个输入系统，该系统将玩家按下的键和按钮转换为游戏中角色执行的动作。此输入系统可以通过游戏框架进行配置。游戏框架包含跟踪游戏进度和控制游戏规则的函数。**抬头显示**（**HUDs**）和**用户界面**（**UIs**）是游戏框架的一部分，用于在游戏过程中向玩家提供反馈。例如，`GameMode`、`GameState`和`PlayerState`等游戏类设置游戏规则并控制游戏状态。游戏中的角色由玩家（使用`PlayerController`类）或AI（使用`AIController`类）控制。无论是由玩家还是AI控制，游戏中的角色都是称为**Pawn**类的基类的一部分。**Character**类是**Pawn**类的子集，专门用于垂直方向的玩家表示，例如人类。
- en: 'With the Unreal Gameplay framework and controllers in place, it allows for
    full customization of the player''s behavior and flexibility, as shown in the
    following figure:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Unreal Gameplay 框架和控制器就绪的情况下，它允许对玩家的行为进行完全自定义，并具有灵活性，如下面的图所示：
- en: '![Input and the Gameplay framework](img/B03679_01_01.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![输入和游戏框架](img/B03679_01_01.jpg)'
- en: Light and shadow
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 光线和阴影
- en: Light is a powerful tool in game creation. It can be used in many ways, such
    as to create the mood of a scene or focus a player's attention on objects in the
    game. Unreal Engine 4 provides a set of basic lights that could be easily placed
    in your game level. They are **Directional Light**, **Point Light**, **Spot Light**,
    and **Sky Light**.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 光是游戏制作中的强大工具。它可以以多种方式使用，例如创造场景的气氛或吸引玩家对游戏中的对象的注意。Unreal Engine 4 提供了一套基本灯光，可以轻松放置到您的游戏关卡中。它们是**方向光**、**点光**、**聚光灯**和**天空光**。
- en: 'Directional Light emits beams of parallel lights, Point Light emits light like
    a light bulb (from a single point radially outward in all directions), Spot Light
    emits light in a conical shape outwards, and Sky Light mimics light from the sky
    downwards on the objects in the level:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**方向光**发射平行光束，**点光**像灯泡一样发光（从单个点以径向向外向所有方向发射），**聚光灯**以锥形形状向外发射光线，而**天空光**模仿天空向下照射关卡中的物体：'
- en: '![Light and shadow](img/B03679_01_02.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![光线和阴影](img/B03679_01_02.jpg)'
- en: 'The effective design of light also creates realistic shadows for your game.
    By choosing the types of light in the level, you can affect both the mood and
    time it takes to render the scene, which in turns affect the frames per second
    of your game. In the game world, you can have two types of shadows: static and
    dynamic. Static shadows can be prebaked into the scene and, which makes them quick
    to render. Dynamic shadows are changed during runtime and are more expensive to
    render. We will learn more about lights and shadows in [Chapter 4](ch04.html "Chapter 4. Material
    and Light"), *Light and Environment Control*.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 光的有效设计也为您的游戏创建了逼真的阴影。通过选择关卡中的灯光类型，您可以影响场景的气氛和渲染时间，这反过来又影响游戏的每秒帧数。在游戏世界中，您有两种类型的阴影：静态和动态。静态阴影可以预先烘焙到场景中，这使得它们渲染速度快。动态阴影在运行时改变，渲染成本更高。我们将在[第4章](ch04.html
    "第4章。材料和光照")*光照和环境控制*中了解更多关于光照和阴影的知识。
- en: Post-process effects
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 后处理效果
- en: Post-process effects are effects that are added at the end to improve the quality
    of the scene. Unreal Engine 4 provides a very good selection of post-process effects,
    which you can add to your level to accentuate the overall scene.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 后处理效果是在场景结束时添加的效果，用于提高场景质量。Unreal Engine 4 提供了非常好的后处理效果选择，您可以将它们添加到您的关卡中，以增强整体场景。
- en: It offers full scene **high dynamic range rendering** (**HDRR**). This allows
    objects that are bright to be very bright and dark to be very dark, but we are
    still able to see details in them. (This is NVDIA's motivation for HDR rendering.)
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 它提供全场景**高动态范围渲染**（**HDRR**）。这允许明亮的对象非常明亮，暗淡的对象非常暗淡，但我们仍然能够看到其中的细节。（这是 NVIDIA
    进行 HDR 渲染的动机。）
- en: UE4 post-process effects include Anti-Aliasing using **Temporal Anti-Aliasing**
    (**TXAA**), Bloom, Color Grading, Depth of Field, Eye Adaptation, Lens Flare,
    Post Process Materials, Scene Fringe, Screen Space Reflection, and Vignette. Although
    a game is often designed with the post-process effects in mind, users are normally
    given the option to turn them off, if desired. This is because they often consume
    reasonable amount of additional resources in return for better visuals.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: UE4 后处理效果包括使用**时间抗锯齿**（**TXAA**）的**抗锯齿**、**泛光**、**色彩分级**、**景深**、**眼睛适应**、**镜头光晕**、**后处理材质**、**场景边缘**、**屏幕空间反射**和**晕影**。尽管游戏通常在设计时考虑后处理效果，但用户通常可以选择关闭它们，如果需要的话。这是因为它们通常需要消耗相当数量的额外资源，以换取更好的视觉效果。
- en: Artificial intelligence
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 人工智能
- en: If you are totally new to the concept of **artificial intelligence** (**AI**),
    it can be thought of as intelligence created by humans to mimic real life. Humans
    created AI to give objects a brain, the ability to think, and make decisions on
    their own.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你完全不了解**人工智能**（**AI**）的概念，它可以被认为是人类创造来模拟现实生活的智能。人类创造了人工智能，给对象一个大脑，使其能够思考并自主做出决策。
- en: Fundamentally, AI is made up of complex rule sets that help objects make decisions
    and perform their designed function/behavior. In games, NPCs are given some form
    of AI so that players can interact with them. For example, give NPCs the ability
    to find a sweet spot to attack. If being attacked, they will run, hide, and find
    a better position to fight back.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 从根本上讲，人工智能由复杂的规则集组成，帮助对象做出决策并执行其设计功能/行为。在游戏中，NPC 被赋予某种形式的人工智能，以便玩家可以与之互动。例如，赋予
    NPC 寻找攻击甜点的能力。如果受到攻击，他们会逃跑、躲藏，并找到一个更好的位置进行反击。
- en: Unreal Engine 4 provides a good basic AI and lays the foundation for you to
    customize and improve the AI of the NPCs in your game. More details on how AI
    is designed in Unreal Engine will be discussed in [Chapter 5](ch05.html "Chapter 5. Animation
    and AI"), *Animation and AI*.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Unreal Engine 4 提供了良好的基本人工智能，为你自定义和改进游戏中 NPC 的人工智能奠定了基础。关于在 Unreal Engine 中如何设计人工智能的更多细节将在第
    5 章*动画和人工智能*中讨论。
- en: Online and multiplatform capabilities
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 线上和跨平台功能
- en: Unreal Engine 4 offers the ability to create game for many platforms. If you
    create a game using Unreal Engine 4, it is portable into different platforms,
    such as Web, iOS, Linux, Windows, and Android. Also, **Universal Windows Platform**
    (**UWP**) will soon be added as well. It also has an online subsystem to provide
    games the ability to integrate functionalities that are available on Xbox Live,
    Facebook, Steam, and so on.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Unreal Engine 4 提供了为许多平台创建游戏的能力。如果你使用 Unreal Engine 4 创建游戏，它可以移植到不同的平台，如 Web、iOS、Linux、Windows
    和 Android。此外，**通用 Windows 平台**（**UWP**）也将很快被添加。它还有一个在线子系统，为游戏提供集成 Xbox Live、Facebook、Steam
    等功能的能力。
- en: Unreal Engine and its powerful editors
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unreal Engine 和其强大的编辑器
- en: After learning about the different components of Unreal Engine, it is time to
    learn more about the various editors and how they are able to empower us with
    the actual functionalities to create a game.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解了 Unreal Engine 的不同组件之后，现在是时候学习更多关于各种编辑器以及它们如何赋予我们创建游戏的实际功能了。
- en: Unreal Editor
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Unreal Editor
- en: Unreal Engine has a number of editors that help in the creation of the game.
    By default, the Unreal Editor is the startup editor for Unreal Engine. It can
    be considered as the main editor that allows access to other subsystems, such
    as the Material and Blueprint subsystems.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Unreal Engine 拥有多个编辑器，有助于游戏的创建。默认情况下，Unreal Editor 是 Unreal Engine 的启动编辑器。它可以被认为是允许访问其他子系统（如材质和蓝图子系统）的主要编辑器。
- en: The Unreal Editor provides a visual interface made up of viewports and windows
    to enable you to import, organize, edit, and add behaviors/interactions to your
    game assets. Other subeditors/subsystems have very specialized functions that
    allow you to control details of an asset (how it looks, how it behaves).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Unreal Editor 提供了一个由视口和窗口组成的可视化界面，使你能够导入、组织、编辑并向你的游戏资产添加行为/交互。其他子编辑器/子系统具有非常专业的功能，允许你控制资产（外观和行为）的细节。
- en: The Unreal Editor, together with all the subsystems, is a great tool especially
    for designers. It allows physical placement of assets and gives users the ability
    to control gameplay variables without having to make changes in the code.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 虚幻编辑器，连同所有子系统，是设计师的一个伟大工具。它允许物理放置资产，并使用户能够在不修改代码的情况下控制游戏变量。
- en: Material Editor
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 材质编辑器
- en: Shaders and Materials give objects its unique color and texture. Unreal Engine
    4 makes use of physically-based shading. This new material pipeline gives artists
    greater control over the look and feel of an object. Physically-based shading
    has a more detailed relationship of light and its surface. This theory binds two
    physical attributes (micro surface detail and reflectivity) to achieve the final
    look of the object.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 着色器和材质赋予物体独特的颜色和纹理。虚幻引擎4利用基于物理的着色。这个新的材质管道让艺术家能够更好地控制物体的外观和感觉。基于物理的着色具有更详细的光与表面的关系。这种理论将两个物理属性（微观表面细节和反射率）绑定在一起，以实现物体的最终外观。
- en: 'In the past, much of the final look is achieved by tweaking values in the shader/material
    algorithms. In Unreal Engine 4, we are now able to achieve high quality content
    by adjusting the values of the light and shading algorithms, which produces more
    consistent and predictable results. More details about Shaders and Materials will
    be provided in [Chapter 4](ch04.html "Chapter 4. Material and Light"), *Light
    and Environment Control*. The following screenshot shows the Material Editor in
    UE4:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去，许多最终外观是通过调整着色器/材质算法中的值来实现的。在虚幻引擎4中，我们现在可以通过调整光和着色算法的值来达到高质量的内容，这会产生更一致和可预测的结果。关于着色器和材质的更多细节将在[第4章](ch04.html
    "第4章。材质和光照")中提供，*光照和环境控制*。以下截图显示了UE4中的材质编辑器：
- en: '![Material Editor](img/B03679_01_03.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![材质编辑器](img/B03679_01_03.jpg)'
- en: The Cascade particle system
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 瀑布粒子系统
- en: 'The Cascade particle system provides extensive capabilities to design and create
    particle effects. Effects from things such as smoke, sparks, and fire can be created
    by designing the size, color, and texture of each particle and how groups of these
    particles interact with each other to mimic real-life particle effect behavior.
    The following screenshot shows the Cascade particle system in UE4:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 瀑布粒子系统提供了广泛的能力来设计和创建粒子效果。通过设计每个粒子的尺寸、颜色和纹理以及这些粒子群如何相互交互来模拟真实粒子效果行为，可以创建诸如烟雾、火花和火焰等效果。以下截图显示了UE4中的瀑布粒子系统：
- en: '![The Cascade particle system](img/B03679_01_04.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![瀑布粒子系统](img/B03679_01_04.jpg)'
- en: The Persona skeletal mesh animation
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 人物骨骼网格动画
- en: 'The Persona animation system lets you design and control the animation of the
    skeleton, skeleton mesh, and sockets of a character. This tool can be used to
    preview a character''s animation and set up blend animation between key frames.
    The physics and collision properties can also be adjusted through **Physics Asset
    Tool** (**PhAT**). The following screenshot shows the Persona animation system
    in UE4:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 人物动画系统允许您设计和控制角色的骨骼、骨骼网格和插座的动画。此工具可用于预览角色的动画并设置关键帧之间的混合动画。还可以通过**物理资产工具**（**PhAT**）调整物理和碰撞属性。以下截图显示了UE4中的人物动画系统：
- en: '![The Persona skeletal mesh animation](img/B03679_01_05.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![人物骨骼网格动画](img/B03679_01_05.jpg)'
- en: Landscape – building large outdoor worlds and foliage
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 地形 - 构建大型户外世界和植被
- en: To create large outdoor spaces using the editor, Unreal Engine provides sculpting
    and painting tools through the Landscape system to help us with it. An efficient
    **level of detail** (**LOD**) system and memory utilization allows large scaled
    terrain shaping. There is also a Foliage editor to apply grass, snow, and sand
    into the outdoor environment.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用编辑器创建大型户外空间，虚幻引擎通过地形系统提供雕刻和绘画工具，以帮助我们。一个高效的**细节级别**（**LOD**）系统和内存利用率允许大规模地形塑造。还有一个植被编辑器，可以将草地、雪和沙子应用到户外环境中。
- en: Sound Cue Editor
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 声音提示编辑器
- en: 'The control of sound and music is done via the Sound Cue Editor. Sounds and
    music are triggered to play via cues known as **Sound Cues**. The ability to start/stop/repeat/fade
    in or out can be achieved using this editor. The following screenshot shows the
    Sound Cue Editor in UE4:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 声音和音乐的控制是通过声音提示编辑器完成的。声音和音乐通过称为**声音提示**的提示触发播放。可以使用此编辑器实现开始/停止/重复/淡入或淡出的功能。以下截图显示了UE4中的声音提示编辑器：
- en: '![Sound Cue Editor](img/B03679_01_06.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![声音提示编辑器](img/B03679_01_06.jpg)'
- en: Matinee Editor
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Matinee编辑器
- en: 'The Matinee Editor toolset enables the creation of game cut scenes and movies.
    These short clips created could be used to introduce the start of a game level,
    tell a story before the game begins or even as a promotional video for the game.
    The following screenshot shows the Matinee Editor in UE4:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Matinee 编辑器工具集允许创建游戏过场场景和电影。这些创建的短剪辑可以用来介绍游戏关卡开始，在游戏开始前讲故事，甚至作为游戏的宣传视频。以下截图显示了
    UE4 中的 Matinee 编辑器：
- en: '![Matinee Editor](img/B03679_01_07.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![Matinee 编辑器](img/B03679_01_07.jpg)'
- en: The Blueprint visual scripting system
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 蓝图可视化脚本系统
- en: The Blueprint system is a new feature in Unreal Engine. Unreal Engine 4 is the
    first engine to utilize this revolutionary system. For those who are familiar
    with Unreal Engine 3, it can be thought of as the enhanced and improved combined
    version of the Unreal scripting system, Kismet, and the Prefab functionality.
    The Blueprint visual scripting system enables you to extend code functionality
    using visual scripting language (box-like flow diagrams joined with lines). This
    capability means that you do not have to write or compile code in order to create,
    arrange, and customize behavior/interaction of in-game objects. This also provides
    nonprogrammers (artists/designers) with the ability to prototype or create a level
    quickly and manipulate gameplay without having to tackle the challenges of game
    programming. A cool feature of Blueprint is that you can create variables like
    in programming by clicking on the object and selecting **Create Variable**. This
    opens up what developers can do without messing around with complex coding.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝图系统是 Unreal Engine 中的一个新特性。Unreal Engine 4 是第一个使用这一革命性系统的引擎。对于那些熟悉 Unreal Engine
    3 的人来说，它可以被视为 Unreal 脚本系统、Kismet 和 Prefab 功能的增强和改进的合并版本。蓝图可视化脚本系统允许您使用可视化脚本语言（由线条连接的类似框的流程图）扩展代码功能。这种能力意味着您不需要编写或编译代码，就可以创建、排列和自定义游戏对象的行为/交互。这也为非程序员（艺术家/设计师）提供了快速原型设计或创建关卡以及操作游戏玩法的能力，而无需应对游戏编程的挑战。蓝图的一个酷特性是，您可以通过点击对象并选择
    **创建变量** 来创建变量，就像在编程中一样。这为开发者打开了在不进行复杂编码的情况下可以做的事情。
- en: 'To help developers debug Blueprint scripting logic, you can see the sequence
    of events and property values visually on the flow diagrams as it is being executed.
    Similar to troubleshooting in coding, break points can also be set to pause a
    Blueprint sequence. The following screenshot shows the Level Blueprint Editor
    in UE4:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助开发者调试蓝图脚本逻辑，您可以在执行过程中可视地看到事件序列和属性值。类似于编码中的故障排除，您还可以设置断点来暂停蓝图序列。以下截图显示了 UE4
    中的关卡蓝图编辑器：
- en: '![The Blueprint visual scripting system](img/B03679_01_08.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![蓝图可视化脚本系统](img/B03679_01_08.jpg)'
- en: Unreal programming
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unreal编程
- en: The access to Unreal Engine's source code gives users the freedom to create
    almost about anything they can dream of. Functionalities of the base code can
    be extended and customized to create whatever the game needs to have. Learning
    how Unreal Engine works from the inside can unlock its full potential in game
    creation.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 访问 Unreal Engine 的源代码使用户能够自由地创建几乎任何他们能想到的东西。基础代码的功能可以被扩展和定制，以满足游戏所需的各种功能。从内部学习
    Unreal Engine 的工作原理可以解锁其在游戏创作中的全部潜力。
- en: Unreal Engine has also incorporated very useful debugging features for the coding
    folks. One of them is the **Hot Reload** function. This tool enables changes in
    the C++ code to be reflected immediately in the game. To facilitate quick changes
    in code, Unreal Engine has also included **Code View**. By clicking on a function
    of an object in the **Code View** category, it shows you directly the relevant
    codes in Visual Studio where you could make code changes to the object.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Unreal Engine 也为编程人员集成了非常实用的调试功能。其中之一就是 **热重载** 功能。这个工具使得 C++ 代码的更改能够立即反映在游戏中。为了方便快速更改代码，Unreal
    Engine 还包括了 **代码视图**。通过在 **代码视图** 类别中点击一个对象的功能，它将直接显示在 Visual Studio 中与该对象相关的代码，您可以在那里对代码进行更改。
- en: Versioning and source control can be set up for game projects that include code
    changes.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 对于包含代码更改的游戏项目，可以设置版本控制和源代码管理。
- en: Unreal objects
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Unreal 对象
- en: Actors are the base class of all gameplay objects in Unreal. For the Actors
    to have more properties and functionalities, the Actor class is extended to various
    more complex classes. In terms of programming, the Actor class acts as a container
    class to hold specialized objects called Components. The combination of the functionalities
    of the Components gives the Actor its unique properties.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 实体是虚幻中所有游戏对象的基础类。为了使实体具有更多的属性和功能，实体类被扩展到各种更复杂的类。在编程方面，实体类充当容器类，用于包含称为组件的专用对象。组件功能的组合赋予了实体其独特的属性。
- en: A beginner's guide to the Unreal Editor
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 虚幻编辑器入门指南
- en: This is a quick overview of what we can do with the Unreal Editor. We will briefly
    touch on how we can use the various windows in the editor to create a game.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这是对我们如何使用虚幻编辑器的一个快速概述。我们将简要介绍如何使用编辑器中的各种窗口来创建游戏。
- en: The start menu
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始菜单
- en: 'When starting up Unreal Engine, you will be first brought to a menu window
    by default. This new start menu is simple and easy to navigate. It features a
    large tab that allows you to select which version of game engine you want to launch
    and has a clear representation of the projects you have created. It also provides
    access to Marketplace, which is a library of game samples that are created by
    others, which you could download (some free, some paid). The menu also provides
    latest updates and news from Epic to ensure developers are kept abreast of the
    latest development and changes. The following screenshot shows the start menu:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 当启动虚幻引擎时，您将默认首先进入一个菜单窗口。这个新的开始菜单简单易导航。它有一个大标签页，允许您选择要启动的游戏引擎版本，并清楚地显示了您创建的项目。它还提供了对市场（Marketplace）的访问，这是一个由他人创建的游戏样本库，您可以下载（有些免费，有些付费）。菜单还提供了来自Epic的最新更新和新闻，以确保开发者能够了解最新的开发和变化。以下截图显示了开始菜单：
- en: '![The start menu](img/B03679_01_09.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![开始菜单](img/B03679_01_09.jpg)'
- en: Project Browser
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目浏览器
- en: 'After launching the desired version of Unreal Engine, the Unreal Project Browser
    pops up. This browser provides you with the option to create game levels that
    have been pre-customized. This means that you have a list of generic levels, which
    you can start building your game levels with. For those who are new to game making,
    this feature lets you dive straight into building various types of games quickly.
    You can have a first-person shooting level and third-person game setup, or a 2D/3D
    side-scrolling platform level directly in either **Blueprint** or **C++** as the
    base template. What is so awesome about the **New Project** tab is that it also
    allows you to select your target device (PC/mobile), image quality target, with
    or without the Unreal content included in the startup project. The following screenshot
    shows the Project Browser:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 启动所需版本的虚幻引擎后，虚幻项目浏览器会弹出。此浏览器为您提供创建预定制游戏级别的选项。这意味着您有一系列通用级别，您可以从这些级别开始构建您的游戏级别。对于那些对游戏制作新手来说，这个功能允许您快速直接进入构建各种类型的游戏。您可以直接在**蓝图**或**C++**作为基础模板的情况下，创建第一人称射击级别和第三人称游戏设置，或者2D/3D横版滚动平台级别。**新建项目**标签页的酷之处在于，它还允许您选择目标设备（PC/移动），目标图像质量，以及是否将虚幻内容包含在启动项目中。以下截图显示了项目浏览器：
- en: '![Project Browser](img/B03679_01_10.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![项目浏览器](img/B03679_01_10.jpg)'
- en: Content Browser
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内容浏览器
- en: 'When the Unreal Editor starts, there is a default layout of various windows
    and panels. One of them is the **Content Browser**. The **Content Browser** is
    a window where you can find all the content (game assets) that you have. It categorizes
    your assets into different folders such as `Audio`, `Materials`, `Animations`,
    `Particle Effects`, and so on. This window has also the **Import** button, which
    lets you bring in game assets that were created using other software into the
    game. The following screenshot shows the default location of the **Content Browser**
    (outlined in green):'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 当虚幻编辑器启动时，会出现各种窗口和面板的默认布局。其中之一是**内容浏览器**。**内容浏览器**是一个窗口，您可以在这里找到您拥有的所有内容（游戏资产）。它将您的资产分类到不同的文件夹中，例如`音频`、`材质`、`动画`、`粒子效果`等。此窗口还具有**导入**按钮，允许您将使用其他软件创建的游戏资产导入到游戏中。以下截图显示了**内容浏览器**的默认位置（用绿色突出显示）：
- en: '![Content Browser](img/B03679_01_11.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![内容浏览器](img/B03679_01_11.jpg)'
- en: Toolbar
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工具栏
- en: 'The **Toolbar** is a customizable ribbon that provides quick access to tools
    and editors. The default layout includes quick access to the Blueprint and Matinee
    editors. Quick play and launch game function is also part of the standard ribbon
    layout. These buttons allow you to quickly view your creation in-game. The following
    screenshot shows the default **Toolbar**:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**工具栏**是一个可定制的功能区，提供对工具和编辑器的快速访问。默认布局包括对蓝图和Matinee编辑器的快速访问。快速播放和启动游戏功能也是标准功能区布局的一部分。这些按钮允许你快速查看游戏中的创作。以下截图显示了默认的**工具栏**：'
- en: '![Toolbar](img/B03679_01_12.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![Toolbar](img/B03679_01_12.jpg)'
- en: Viewport
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视口
- en: 'The **Viewport** is the window to the game world so what you see is what is
    in the game. If you have created a level using one of the options provided in
    the **New Project** menu, you would notice that the camera has been adjusted accordingly
    to the settings of that pre-customized level. This is the window that you will
    use to place objects into and move them around. When you click on the **Play**
    button in the toolbar, this **Viewport** window comes alive and allows you to
    interact with game level. The following screenshot shows the **Viewport** window
    being highlighted in the editor:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**视口**是通往游戏世界之窗，所以你看到的就是游戏中的内容。如果你使用“新建项目”菜单中提供的选项之一创建了一个关卡，你会注意到摄像机已经根据该预定制关卡的设置进行了调整。这就是你将用于放置对象并移动它们的窗口。当你点击工具栏中的**播放**按钮时，这个**视口**窗口就会活跃起来，允许你与游戏关卡进行交互。以下截图显示了在编辑器中高亮的**视口**窗口：'
- en: '![Viewport](img/B03679_01_13.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![Viewport](img/B03679_01_13.jpg)'
- en: Scene Outliner
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 场景大纲
- en: 'The **Scene Outliner** contains the list of objects that are placed in the
    scene. It is only what is loaded currently in the scene. You can create folders
    and have customized names for the objects (to help you identify the objects easily).
    It is also a quick way to group items so that you can select them and make changes
    in bulk. The following screenshot shows the **Scene Outliner** highlighted in
    the editor:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '**场景大纲**包含场景中放置的对象列表。它只包含当前场景中加载的内容。你可以创建文件夹并为对象命名（以帮助你轻松识别对象）。它也是一个快速分组项目的方法，这样你可以选择它们并批量进行更改。以下截图显示了在编辑器中高亮的**场景大纲**：'
- en: '![Scene Outliner](img/B03679_01_14.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![Scene Outliner](img/B03679_01_14.jpg)'
- en: Modes
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模式
- en: 'The **Modes** window gives you the power to create and place objects into the
    game world. You can select the type of activity you wish to execute. Select from
    Place, Paint, Landscape, Foliage and Geometry Editing. Place is to put objects
    into the game world. Paint allows you to paint vertices and textures of objects.
    Landscape and Foliage are useful tools for making large scale natural terrains
    in the game. Geometry Editing provides the tools to modify and edit the object.
    The highlighted area in the following screenshot shows the **Modes** window:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '**模式**窗口赋予你创建和将对象放置到游戏世界中的能力。你可以选择你希望执行的活动类型。从放置、绘制、景观、植被和几何编辑中选择。放置是将对象放入游戏世界。绘制允许你绘制对象的顶点和纹理。景观和植被是制作大规模自然地形的有用工具。几何编辑提供了修改和编辑对象的工具。以下截图中的高亮区域显示了**模式**窗口：'
- en: '![Modes](img/B03679_01_15.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![Modes](img/B03679_01_15.jpg)'
- en: Summary
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered introductory content about what a game engine is,
    specifically Unreal Engine 4 and its history. We also talked a little about how
    games are developed and various roles that exist in a game company to help create
    different components of a game. Then, we covered the different components of Unreal
    Engine and how we can use these different features to help us make our game. Lastly,
    we covered the different editors that are available to us to help us customize
    each of the components of the game.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了关于游戏引擎的基础内容，特别是虚幻引擎4及其历史。我们还简要讨论了游戏开发的过程以及游戏公司中存在的各种角色，这些角色有助于创建游戏的不同组件。然后，我们介绍了虚幻引擎的不同组件以及我们如何使用这些不同的功能来帮助我们制作游戏。最后，我们介绍了可用于帮助我们自定义游戏各个组件的不同编辑器。
- en: In the upcoming chapters, we'll be going into the details of the functionalities
    and features of Unreal Engine 4\. In the next chapter, you will be exposed to
    some basic functions in the Unreal Editor and start making your own game level.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将深入了解虚幻引擎4的功能和特性。在下一章中，你将接触到虚幻编辑器的一些基本功能，并开始制作自己的游戏关卡。
