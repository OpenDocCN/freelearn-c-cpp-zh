- en: Chapter 4. Looping
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we discussed the `if` statement. The `if` statement
    enables you to put a condition on the execution of a block of code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will explore loops, which are code structures that enable
    you to repeat a block of code under certain conditions. We stop repeating that
    block of code once the condition becomes false.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will explore the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: While loops
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do/while loops
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For loops
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A simple example of a practical loop within Unreal Engine
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The while loop
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `while` loop is used to run a section of the code repeatedly. This is useful
    if you have a set of actions that must be done repeatedly to accomplish some goal.
    For example, the `while` loop in the following code repeatedly prints the value
    of the variable `x` as it is incremented from 1 to 5:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This is the output of the preceding program:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the first line of code, an integer variable `x` is created and set to 1\.
    Then, we go the `while` condition. The `while` condition says that while `x` is
    less than or equal to 5, you must stay in the block of code that follows.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Each iteration of the loop (an iteration means going once around the loop) gets
    a little more done from the task (of printing the numbers 1 to 5). We program
    the loop to automatically exit once the task is done (when `x <= 5` is no longer
    true).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: 'Similar to the `if` statement of the previous chapter, entry into the block
    below the `while` loop is only allowed if you meet the condition within the brackets
    of the `while` loop (in the preceding example, `x <= 5`). You can try mentally
    subbing an `if` loop in the place of the `while` loop, as shown in the following
    code:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The preceding code sample will only print `x is 1`. So, a `while` loop is exactly
    like an `if` statement, only it has this special property of automatically repeating
    itself until the condition between the brackets of the `while` loop becomes `false`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I'd like to explain the repetition of the `while` loop using a video game. If
    you don't know Valve's *Portal*, you should play it, if only to understand loops.
    Check out [https://www.youtube.com/watch?v=TluRVBhmf8w](https://www.youtube.com/watch?v=TluRVBhmf8w)
    for a demo video.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 'The `while` loops have a kind of magic *portal* at the bottom, which cause
    the loop to repeat. The following screenshot illustrates what I mean:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '![The while loop](img/00048.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
- en: There is a portal at the end of the while loop that takes you back to the beginning
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding screenshot, we loop back from the orange portal (marked **O**)
    to the blue portal (marked **B**). This is our first time of being able to go
    back in the code. It is like time travel, only for the code. How exciting!
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: The only way past a `while` loop block is to not meet the entry condition. In
    the preceding example, once the value of `x` becomes 6 (so, `x <= 5` becomes false),
    we will not enter the `while` loop again. Since the orange portal is inside the
    loop, we'll be able to get to finished once `x` becomes 6.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Infinite loops
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can get stuck inside the same loop forever. Consider the modified program
    in the following block of code (what do you think will be the output?):'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This is how the output will look:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The loop repeats forever because we removed the line of code that changed the
    value of `x`. If the value of `x` stays the same and is not allowed to increase,
    we will be stuck inside the body of the `while` loop. This is because the loop's
    exit condition (the value of `x` becomes 6) cannot be met if `x` does not change
    inside the loop body.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: The following exercises will use all the concepts from the previous chapters,
    such as the `+=` and decrement operations. If you've forgotten something, go back
    and reread the previous sections.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Write a `while` loop that will print the numbers from 1 to 10.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a `while` loop that will print the numbers from 10 to 1 (backwards).
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a `while` loop that will print numbers 2 to 20, incrementing by 2 (for
    example 2, 4, 6, and 8).
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a `while` loop that will print the numbers 1 to 16 and their squares beside
    them.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following is an example program output of the exercise 4:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '| 1 | 1 |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
- en: '| 2 | 4 |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
- en: '| 3 | 9 |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
- en: '| 4 | 16 |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
- en: '| 5 | 25 |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
- en: Solutions
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The code solutions of the preceding exercises are as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: 'The solution of the `while` loop that prints the numbers from 1 to 10 is as
    follows:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The solution of the `while` loop that prints the numbers from 10 to 1 in backwards
    is as follows:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The solution of the `while` loop that prints the numbers from 2 to 20 incrementing
    by 2 is as follows:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The solution of the `while` loop that prints the numbers from 1 to 16 with
    their squares is as follows:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The do/while loop
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `do/while` loop is almost identical to the `while` loop. Here''s an example
    of a `do/while` loop that is equivalent to the first `while` loop that we examined:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The only difference here is that we don't have to check the `while` condition
    on our first entry into the loop. This means that the `do/while` loop's body is
    always executed at least once (where a `while` loop can be skipped entirely if
    the condition to enter the `while` loop is `false` when you hit it for the first
    time).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: The for loop
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `for` loop has a slightly different anatomy than the `while` loop, but both
    are very similar.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s examine the anatomy of a `for` loop as compared to an equivalent `while`
    loop. Take an example of the following code snippets:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '| The for loop | An equivalent while loop |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '|'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '|'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: The `for` loop has three statements inside its brackets. Let's examine them
    in order.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: The first statement of the `for` loop (`int x = 1`;) only gets executed once,
    when we first enter the body of the `for` loop. It is typically used to initialize
    the value of the loop's counter variable (in this case, the variable `x`). The
    second statement inside the `for` loop (`x <= 5`;) is the loop's repeat condition.
    As long as `x <= 5`, we must continue to stay inside the body of the `for` loop.
    The last statement inside the brackets of the `for` loop (`x++`;) gets executed
    after we complete the body of the `for` loop each time.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: 'The following sequence of diagrams explain the progression of the `for` loop:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '![The for loop](img/00049.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
- en: Exercises
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Write a `for` loop that will gather the sum of the numbers from 1 to 10.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a `for` loop that will print the multiples of 6, from 6 to 30 (6, 12,
    18, 24, and 30).
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a `for` loop that will print numbers 2 to 100 in multiples of 2 (for example,
    2, 4, 6, 8, and so on).
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a `for` loop that will print numbers 1 to 16 and their squares beside
    them.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Solutions
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the solutions for the preceding exercises:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: 'The solution for the `for` loop for printing the sum of the numbers from 1
    to 10 is as follows:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The solution for the `for` loop for printing multiples of 6 from 30 is as follows:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The solution for the `for` loop for printing numbers from 2 to 100 in multiples
    of 2 is as follows:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The solution for the `for` loop that prints numbers from 1 to 16 and their
    squares is as follows:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Looping with Unreal Engine
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In your code editor, open your Unreal Puzzle project from [Chapter 3](part0024_split_000.html#MSDG1-dd4a3f777fc247568443d5ffb917736d
    "Chapter 3. If, Else, and Switch"), *If, Else, and Switch*.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several ways to open your Unreal project. The simplest way is probably
    to navigate to the `Unreal Projects` folder (which is present in your user''s
    `Documents` folder on Windows by default) and double-click on the `.sln` file
    in **Windows Explorer**, as shown in the following screenshot:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '![Looping with Unreal Engine](img/00050.jpeg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
- en: On Windows, open the .sln file to edit the project code
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, open the `PuzzleBlockGrid.cpp` file. Inside this file, scroll down to
    the section that begins with the following statement:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Notice that there is a `for` loop here to spawn the initial nine blocks, as
    shown in the following code:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Since `NumBlocks` (which is used to determine when to stop the loop) gets computed
    as `Size*Size`, we can easily change the number of blocks that get spawned by
    altering the value of the `Size` variable. Go to line 23 of `PuzzleBlockGrid.cpp`
    and change the value of the `Size` variable to four or five. Then, run the code
    again.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see the number of blocks on the screen increase, as shown in the
    following screenshot:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '![Looping with Unreal Engine](img/00051.jpeg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
- en: Setting the size to 14 creates many more blocks
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to repeat lines of code by looping the code,
    which allowed you to go back into it. This can be used to repeatedly use the same
    line of code in order to achieve a task. Imagine printing the numbers from 1 to
    10 without using a loop.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何通过循环代码来重复执行代码行，这让你可以返回到它。这可以用来重复使用相同的代码行以完成一项任务。想象一下，在不使用循环的情况下打印从1到10的数字。
- en: In the next chapter, we will explore functions, which are the basic units of
    reusable code.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨函数，它们是可重用代码的基本单元。
