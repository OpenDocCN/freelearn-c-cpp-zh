- en: Chapter 4. Looping
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章 循环
- en: In the previous chapter, we discussed the `if` statement. The `if` statement
    enables you to put a condition on the execution of a block of code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们讨论了`if`语句。`if`语句允许你在代码块的执行上设置条件。
- en: In this chapter, we will explore loops, which are code structures that enable
    you to repeat a block of code under certain conditions. We stop repeating that
    block of code once the condition becomes false.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨循环，这是一种代码结构，它允许你在满足某些条件下重复执行一段代码。一旦条件变为假，我们就停止重复执行该代码块。
- en: 'In this chapter, we will explore the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下主题：
- en: While loops
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当循环
- en: Do/while loops
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Do/while循环
- en: For loops
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: For循环
- en: A simple example of a practical loop within Unreal Engine
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unreal Engine中一个实用的循环示例
- en: The while loop
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: While循环
- en: 'The `while` loop is used to run a section of the code repeatedly. This is useful
    if you have a set of actions that must be done repeatedly to accomplish some goal.
    For example, the `while` loop in the following code repeatedly prints the value
    of the variable `x` as it is incremented from 1 to 5:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`while`循环用于重复执行代码的一部分。如果你有一系列必须重复执行以实现某个目标的操作，这非常有用。例如，以下代码中的`while`循环会重复打印变量`x`的值，随着`x`从1增加到5：'
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This is the output of the preceding program:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这是前面程序的输出：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the first line of code, an integer variable `x` is created and set to 1\.
    Then, we go the `while` condition. The `while` condition says that while `x` is
    less than or equal to 5, you must stay in the block of code that follows.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码的第一行，创建了一个整数变量`x`并将其设置为1。然后，我们进入`while`条件。`while`条件表示，只要`x`小于或等于5，就必须停留在随后的代码块中。
- en: Each iteration of the loop (an iteration means going once around the loop) gets
    a little more done from the task (of printing the numbers 1 to 5). We program
    the loop to automatically exit once the task is done (when `x <= 5` is no longer
    true).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 循环的每次迭代（迭代意味着绕循环走一圈）都会从任务中完成更多的工作（打印数字1到5）。我们编程循环，一旦任务完成（当`x <= 5`不再为真时），就自动退出。
- en: 'Similar to the `if` statement of the previous chapter, entry into the block
    below the `while` loop is only allowed if you meet the condition within the brackets
    of the `while` loop (in the preceding example, `x <= 5`). You can try mentally
    subbing an `if` loop in the place of the `while` loop, as shown in the following
    code:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 与上一章的`if`语句类似，只有当你满足`while`循环括号内的条件时，才允许进入`while`循环下面的代码块（在先前的例子中，`x <= 5`）。你可以尝试在`while`循环的位置用心理解一个`if`循环，如下面的代码所示：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The preceding code sample will only print `x is 1`. So, a `while` loop is exactly
    like an `if` statement, only it has this special property of automatically repeating
    itself until the condition between the brackets of the `while` loop becomes `false`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码示例只会打印`x is 1`。所以，`while`循环就像一个`if`语句，只是它具有这种特殊的自动重复属性，直到`while`循环括号中的条件变为`false`。
- en: Note
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: I'd like to explain the repetition of the `while` loop using a video game. If
    you don't know Valve's *Portal*, you should play it, if only to understand loops.
    Check out [https://www.youtube.com/watch?v=TluRVBhmf8w](https://www.youtube.com/watch?v=TluRVBhmf8w)
    for a demo video.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我想用一个视频游戏来解释`while`循环的重复。如果你不知道Valve的《传送门》，你应该玩一玩，至少为了理解循环。查看[https://www.youtube.com/watch?v=TluRVBhmf8w](https://www.youtube.com/watch?v=TluRVBhmf8w)获取演示视频。
- en: 'The `while` loops have a kind of magic *portal* at the bottom, which cause
    the loop to repeat. The following screenshot illustrates what I mean:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`while`循环在底部有一个类似魔法的传送门，这会导致循环重复。以下截图说明了我的意思：'
- en: '![The while loop](img/00048.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![While循环](img/00048.jpeg)'
- en: There is a portal at the end of the while loop that takes you back to the beginning
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在`while`循环的末尾有一个传送门，它会带你回到开始的地方
- en: In the preceding screenshot, we loop back from the orange portal (marked **O**)
    to the blue portal (marked **B**). This is our first time of being able to go
    back in the code. It is like time travel, only for the code. How exciting!
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们从橙色传送门（标记为**O**）回到蓝色传送门（标记为**B**）。这是我们第一次在代码中返回。这就像时间旅行，只是对于代码来说。多么令人兴奋！
- en: The only way past a `while` loop block is to not meet the entry condition. In
    the preceding example, once the value of `x` becomes 6 (so, `x <= 5` becomes false),
    we will not enter the `while` loop again. Since the orange portal is inside the
    loop, we'll be able to get to finished once `x` becomes 6.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 `while` 循环块的唯一方法是不满足入口条件。在前面的例子中，一旦 `x` 的值变为 6（因此，`x <= 5` 变为 `false`），我们就不会再次进入
    `while` 循环。由于橙色门户在循环体内，一旦 `x` 变为 6，我们就能到达完成状态。
- en: Infinite loops
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 无限循环
- en: 'You can get stuck inside the same loop forever. Consider the modified program
    in the following block of code (what do you think will be the output?):'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会永远被困在同一个循环中。考虑以下代码块中修改后的程序（你认为输出会是什么？）：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This is how the output will look:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是输出将看起来像这样：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The loop repeats forever because we removed the line of code that changed the
    value of `x`. If the value of `x` stays the same and is not allowed to increase,
    we will be stuck inside the body of the `while` loop. This is because the loop's
    exit condition (the value of `x` becomes 6) cannot be met if `x` does not change
    inside the loop body.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 循环会无限重复，因为我们移除了改变 `x` 值的代码行。如果 `x` 的值保持不变且不允许增加，我们将被困在 `while` 循环体内。这是因为如果 `x`
    在循环体内没有改变，循环的退出条件（`x` 的值变为 6）将无法满足。
- en: The following exercises will use all the concepts from the previous chapters,
    such as the `+=` and decrement operations. If you've forgotten something, go back
    and reread the previous sections.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下练习将使用前几章的所有概念，例如 `+=` 和递减操作。如果你忘记了什么，请返回并重新阅读前面的部分。
- en: Exercises
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习
- en: Write a `while` loop that will print the numbers from 1 to 10.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个 `while` 循环，该循环将打印从 1 到 10 的数字。
- en: Write a `while` loop that will print the numbers from 10 to 1 (backwards).
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个 `while` 循环，该循环将打印从 10 到 1 的数字（反向）。
- en: Write a `while` loop that will print numbers 2 to 20, incrementing by 2 (for
    example 2, 4, 6, and 8).
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个 `while` 循环，该循环将打印数字 2 到 20，每次增加 2（例如 2、4、6 和 8）。
- en: Write a `while` loop that will print the numbers 1 to 16 and their squares beside
    them.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个 `while` 循环，该循环将打印从 1 到 16 的数字及其旁边的平方。
- en: 'The following is an example program output of the exercise 4:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个练习 4 的程序输出示例：
- en: '| 1 | 1 |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 1 |'
- en: '| 2 | 4 |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 4 |'
- en: '| 3 | 9 |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 9 |'
- en: '| 4 | 16 |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 16 |'
- en: '| 5 | 25 |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 5 | 25 |'
- en: Solutions
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'The code solutions of the preceding exercises are as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 前面练习的代码解决方案如下：
- en: 'The solution of the `while` loop that prints the numbers from 1 to 10 is as
    follows:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印从 1 到 10 的数字的 `while` 循环的解决方案如下：
- en: '[PRE5]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The solution of the `while` loop that prints the numbers from 10 to 1 in backwards
    is as follows:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印从 10 到 1 的反向数字的 `while` 循环的解决方案如下：
- en: '[PRE6]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The solution of the `while` loop that prints the numbers from 2 to 20 incrementing
    by 2 is as follows:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印从 2 到 20 的数字，每次增加 2 的 `while` 循环的解决方案如下：
- en: '[PRE7]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The solution of the `while` loop that prints the numbers from 1 to 16 with
    their squares is as follows:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印从 1 到 16 并显示其平方的 `while` 循环的解决方案如下：
- en: '[PRE8]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The do/while loop
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`do/while` 循环'
- en: 'The `do/while` loop is almost identical to the `while` loop. Here''s an example
    of a `do/while` loop that is equivalent to the first `while` loop that we examined:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`do/while` 循环几乎与 `while` 循环相同。以下是一个 `do/while` 循环的例子，它与第一个我们检查的 `while` 循环等效：'
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The only difference here is that we don't have to check the `while` condition
    on our first entry into the loop. This means that the `do/while` loop's body is
    always executed at least once (where a `while` loop can be skipped entirely if
    the condition to enter the `while` loop is `false` when you hit it for the first
    time).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的唯一区别是，我们不需要在我们的第一次进入循环时检查 `while` 条件。这意味着 `do/while` 循环的体总是至少执行一次（而 `while`
    循环可以在第一次遇到时完全跳过，如果进入 `while` 循环的条件是 `false`）。
- en: The for loop
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`for` 循环'
- en: The `for` loop has a slightly different anatomy than the `while` loop, but both
    are very similar.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`for` 循环的结构与 `while` 循环略有不同，但两者非常相似。'
- en: 'Let''s examine the anatomy of a `for` loop as compared to an equivalent `while`
    loop. Take an example of the following code snippets:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们比较 `for` 循环与等效的 `while` 循环的解剖结构。以下是一些代码片段的例子：
- en: '| The for loop | An equivalent while loop |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| The for loop | An equivalent while loop |'
- en: '| --- | --- |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '|'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '|'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: The `for` loop has three statements inside its brackets. Let's examine them
    in order.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`for` 循环在其括号内有三个语句。让我们按顺序检查它们。'
- en: The first statement of the `for` loop (`int x = 1`;) only gets executed once,
    when we first enter the body of the `for` loop. It is typically used to initialize
    the value of the loop's counter variable (in this case, the variable `x`). The
    second statement inside the `for` loop (`x <= 5`;) is the loop's repeat condition.
    As long as `x <= 5`, we must continue to stay inside the body of the `for` loop.
    The last statement inside the brackets of the `for` loop (`x++`;) gets executed
    after we complete the body of the `for` loop each time.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`for`循环的第一个语句（`int x = 1`；）只执行一次，当我们第一次进入`for`循环的主体时。它通常用于初始化循环计数器的值（在这种情况下，变量`x`）。`for`循环内部的第二个语句（`x
    <= 5`；）是循环的重复条件。只要`x <= 5`，我们就必须继续停留在`for`循环的主体内部。`for`循环括号内的最后一个语句（`x++`；）在每次完成`for`循环的主体后执行。'
- en: 'The following sequence of diagrams explain the progression of the `for` loop:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 以下序列图解释了`for`循环的进展：
- en: '![The for loop](img/00049.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![The for loop](img/00049.jpeg)'
- en: Exercises
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习
- en: Write a `for` loop that will gather the sum of the numbers from 1 to 10.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个`for`循环，用于计算从1到10的数字之和。
- en: Write a `for` loop that will print the multiples of 6, from 6 to 30 (6, 12,
    18, 24, and 30).
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个`for`循环，用于打印6的倍数，从6到30（6、12、18、24和30）。
- en: Write a `for` loop that will print numbers 2 to 100 in multiples of 2 (for example,
    2, 4, 6, 8, and so on).
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个`for`循环，用于打印2到100的2的倍数（例如，2、4、6、8等等）。
- en: Write a `for` loop that will print numbers 1 to 16 and their squares beside
    them.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个`for`循环，用于打印1到16的数字及其旁边的平方。
- en: Solutions
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Here are the solutions for the preceding exercises:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前面练习的解决方案：
- en: 'The solution for the `for` loop for printing the sum of the numbers from 1
    to 10 is as follows:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印从1到10的数字之和的`for`循环的解决方案如下：
- en: '[PRE12]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The solution for the `for` loop for printing multiples of 6 from 30 is as follows:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从30开始打印6的倍数的`for`循环的解决方案如下：
- en: '[PRE13]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The solution for the `for` loop for printing numbers from 2 to 100 in multiples
    of 2 is as follows:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印从2到100的2的倍数的`for`循环的解决方案如下：
- en: '[PRE14]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The solution for the `for` loop that prints numbers from 1 to 16 and their
    squares is as follows:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印从1到16的数字及其平方的`for`循环的解决方案如下：
- en: '[PRE15]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Looping with Unreal Engine
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Unreal Engine进行循环
- en: In your code editor, open your Unreal Puzzle project from [Chapter 3](part0024_split_000.html#MSDG1-dd4a3f777fc247568443d5ffb917736d
    "Chapter 3. If, Else, and Switch"), *If, Else, and Switch*.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的代码编辑器中，从[第3章](part0024_split_000.html#MSDG1-dd4a3f777fc247568443d5ffb917736d
    "第3章。If, Else, 和 Switch")打开你的Unreal Puzzle项目，*If, Else, 和 Switch*。
- en: 'There are several ways to open your Unreal project. The simplest way is probably
    to navigate to the `Unreal Projects` folder (which is present in your user''s
    `Documents` folder on Windows by default) and double-click on the `.sln` file
    in **Windows Explorer**, as shown in the following screenshot:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的Unreal项目有几种方法。最简单的方法可能是导航到“Unreal Projects”文件夹（在Windows默认情况下，该文件夹位于你的用户“Documents”文件夹中）并在**Windows资源管理器**中双击`.sln`文件，如下面的截图所示：
- en: '![Looping with Unreal Engine](img/00050.jpeg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![Looping with Unreal Engine](img/00050.jpeg)'
- en: On Windows, open the .sln file to edit the project code
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，打开.sln文件以编辑项目代码
- en: 'Now, open the `PuzzleBlockGrid.cpp` file. Inside this file, scroll down to
    the section that begins with the following statement:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开`PuzzleBlockGrid.cpp`文件。在这个文件中，向下滚动到以下语句开始的段落：
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Notice that there is a `for` loop here to spawn the initial nine blocks, as
    shown in the following code:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这里有一个`for`循环来生成最初的九个方块，如下面的代码所示：
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Since `NumBlocks` (which is used to determine when to stop the loop) gets computed
    as `Size*Size`, we can easily change the number of blocks that get spawned by
    altering the value of the `Size` variable. Go to line 23 of `PuzzleBlockGrid.cpp`
    and change the value of the `Size` variable to four or five. Then, run the code
    again.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`NumBlocks`（用于确定何时停止循环）被计算为`Size*Size`，我们可以通过改变`Size`变量的值来轻松地改变生成的方块数量。转到`PuzzleBlockGrid.cpp`的第23行，并将`Size`变量的值更改为四或五。然后再次运行代码。
- en: 'You should see the number of blocks on the screen increase, as shown in the
    following screenshot:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到屏幕上的方块数量增加，如下面的截图所示：
- en: '![Looping with Unreal Engine](img/00051.jpeg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![Looping with Unreal Engine](img/00051.jpeg)'
- en: Setting the size to 14 creates many more blocks
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 将大小设置为14会创建更多的方块
- en: Summary
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to repeat lines of code by looping the code,
    which allowed you to go back into it. This can be used to repeatedly use the same
    line of code in order to achieve a task. Imagine printing the numbers from 1 to
    10 without using a loop.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何通过循环代码来重复执行代码行，这让你可以返回到它。这可以用来重复使用相同的代码行以完成一项任务。想象一下，在不使用循环的情况下打印从1到10的数字。
- en: In the next chapter, we will explore functions, which are the basic units of
    reusable code.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨函数，它们是可重用代码的基本单元。
