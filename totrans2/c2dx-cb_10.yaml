- en: Chapter 10. Improving Games with Extra Features
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章. 使用额外功能改进游戏
- en: 'The following topics will be covered in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Using Texture Packer
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Texture Packer
- en: Using Tiled Map Editor
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Tiled地图编辑器
- en: Getting the property of the object in the tiled map
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取瓦片图中对象的属性
- en: Using Physics Editor
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用物理编辑器
- en: Using Glyph Designer
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用字形设计器
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: For a long time, there have been a lot of tools available to you that help you
    in game development. Some of these tools can be used in Cocos2d-x. With the use
    of these tools, you can quickly and efficiently develop your game. You can, for
    example, use original fonts and create sprite sheets, a map like a role-playing
    game, complex physical objects, and so on. In this chapter, you will learn how
    to use these extra tools in your game development.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 很长时间以来，有很多工具可供您使用，这些工具可以帮助您进行游戏开发。其中一些工具可以在Cocos2d-x中使用。使用这些工具，您可以快速高效地开发您的游戏。例如，您可以使用原始字体创建精灵表，创建像角色扮演游戏一样的地图，复杂的物理对象等等。在本章中，您将学习如何在您的游戏开发中使用这些额外工具。
- en: Using Texture Packer
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Texture Packer
- en: '**Texture Packer** is a tool that can drag and drop images and publish. With
    the use of this tool, we can not only create sprite sheets, but also export multi
    sprite sheets. If there are a lot of sprites, then we need to use the command
    line tool when we create sprite sheets, encrypt them, and so on. In this recipe,
    you can use Texture Packer.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**Texture Packer**是一个可以拖放图像并发布的工具。使用这个工具，我们不仅可以创建精灵表，还可以导出多精灵表。如果有很多精灵，那么在创建精灵表时，我们需要使用命令行工具，加密它们等等。在本食谱中，您可以使用Texture
    Packer。'
- en: Getting ready
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Texture Packer is a paid application. However, you can use the free trial version.
    If you don't have it, you can download it by visiting [https://www.codeandweb.com/texturepacker](https://www.codeandweb.com/texturepacker)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Texture Packer是一个付费应用程序。然而，您可以使用免费试用版。如果您没有，您可以通过访问[https://www.codeandweb.com/texturepacker](https://www.codeandweb.com/texturepacker)来下载它。
- en: How to do it...
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: You need to launch Texture Packer, after which you will see a blank window appear.![How
    to do it...](img/B0561_10_01.jpg)
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要启动Texture Packer，之后您将看到一个空白窗口出现。![如何操作...](img/B0561_10_01.jpg)
- en: In this recipe, we will use these sprites as shown in the following screenshot:![How
    to do it...](img/B0561_10_02.jpg)
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将使用以下截图所示的精灵：![如何操作...](img/B0561_10_02.jpg)
- en: You simply need to drag the images into the Texture Packer window and it will
    automatically read all the files and arrange them.![How to do it...](img/B0561_10_03.jpg)
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您只需将图像拖入Texture Packer窗口，它将自动读取所有文件并将它们排列好。![如何操作...](img/B0561_10_03.jpg)
- en: And that's it. So let's publish the sprite sheet image and `plist` to click
    the **publish** button. That's how you can get the sprite sheet image and `plist`.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就这样。那么，让我们发布精灵表图像和`plist`，点击**发布**按钮。这就是您如何获取精灵表图像和`plist`。
- en: How it works...
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: You can get the sprite sheet image and `plist` file. In this part, we explain
    how to publish the sprite sheet for all devices with a single click.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以获取精灵表图像和`plist`文件。在本部分，我们解释了如何一键发布适用于所有设备的精灵表。
- en: Click on the **AutoSD** button with the gear icon, and you will see an additional
    window appear, as shown in the following screenshot:![How it works...](img/B0561_10_04.jpg)
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击带有齿轮图标的**AutoSD**按钮，您将看到一个额外的窗口出现，如图所示：![它是如何工作的...](img/B0561_10_04.jpg)
- en: Select the **cocos2d-x HDR/HD/SD** and click the **Apply** button. After clicking
    it, setting the default scale, extension, size and so on like in the following
    image:![How it works...](img/B0561_10_05.jpg)
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**cocos2d-x HDR/HD/SD**并点击**应用**按钮。点击后，设置默认的缩放、扩展、大小等，如图所示：![它是如何工作的...](img/B0561_10_05.jpg)
- en: Next, you have to click the **publish** button, you will see the window to select
    the data file name. The important thing is to select the folder named `HDR` as
    in the following image:![How it works...](img/B0561_10_06.jpg)
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您必须点击**发布**按钮，您将看到一个选择数据文件名的窗口。重要的是要选择名为`HDR`的文件夹，如图所示：![它是如何工作的...](img/B0561_10_06.jpg)
- en: Finally, you will get three size sprite sheets automatically as in the following
    image:![How it works...](img/B0561_10_07.jpg)
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，您将自动获得三个尺寸的精灵表，如图所示：![它是如何工作的...](img/B0561_10_07.jpg)
- en: The sprite sheet in `HDR` folder is the largest size. The images that were dragged
    and dropped are HDR images. These images are good for resizing to HD or SD images.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`HDR`文件夹中的精灵表是最大尺寸的。被拖放进来的图像是HDR图像。这些图像适合调整成高清或标清图像。'
- en: There's more…
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'You can use the Texture Packer on the command like like this:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用如下命令使用 Texture Packer：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding command is to make a sprite sheet named `hoge.plist` and `hoge.png`
    by using images named `foo_*.png`. For example, if there were `foo_1.png` to `foo_10.png`
    in a folder, then the sprite sheet is created from these 10 images.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令是使用名为 `foo_*.png` 的图像创建名为 `hoge.plist` 和 `hoge.png` 的精灵图集。例如，如果文件夹中有 `foo_1.png`
    到 `foo_10.png`，则精灵图集将从这 10 张图像创建。
- en: 'In addition, the command has other options as in the following table:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，该命令还有其他选项，如下表所示：
- en: '| Option | Description |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 描述 |'
- en: '| --- | --- |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `--help` | Display help text |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `--help` | 显示帮助文本 |'
- en: '| `--version` | Print version information |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `--version` | 打印版本信息 |'
- en: '| `--max-size` | Set the maximum texture size |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `--max-size` | 设置最大纹理大小 |'
- en: '| `--format cocos2d` | Format to write, default is cocos2d |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `--format cocos2d` | 要写入的格式，默认为 cocos2d |'
- en: '| `--data` | Name of the data file to write |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `--data` | 要写入的数据文件名称 |'
- en: '| `--sheet` | Name of the sheet to write |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `--sheet` | 要写入的图集名称 |'
- en: 'There are a lot of options other than that. You can see another options by
    using the following command:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些选项之外，您还可以通过以下命令查看其他选项：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Using Tiled Map Editor
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Tiled 地图编辑器
- en: A tiled map is a grid of cells where the value in the cell indicates what should
    be at the location. For example, (0,0) is a road, (0,1) is a grass, (0,2) is a
    river and so on. Tiled maps are very useful but they are pretty hard to create
    by hand. **Tiled** is a tool that can be used to just create tiled maps. Tiled
    is a free application. However, this application is a very powerful, useful and
    popular tool. There are various kinds of Tiled Map, for example, 2D maps such
    as Dragon Quest, Horizontal scrolling game map such as Super Mario and so on.
    In this recipe, you can basically use texture packer.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 瓦片地图是由单元格组成的网格，单元格中的值表示该位置应该放置的内容。例如，(0,0) 是一条道路，(0,1) 是草地，(0,2) 是河流等等。瓦片地图非常有用，但手动创建它们相当困难。**Tiled**
    是一个可以用来创建瓦片地图的工具。Tiled 是一个免费的应用程序。然而，这个应用程序是一个非常强大、有用且流行的工具。Tiled 地图有多种类型，例如，2D
    地图如《龙之谷》，水平滚动游戏地图如《超级马里奥》等等。在这个菜谱中，您基本上可以使用纹理打包器。
- en: Getting ready
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: If you don't have Tiled Map Editor, you can download it from [https://www.mapeditor.org/](https://www.mapeditor.org/).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有 Tiled 地图编辑器，您可以从 [https://www.mapeditor.org/](https://www.mapeditor.org/)
    下载它。
- en: And then, after downloading it, you will install the application and copy the
    `example` folder in the `dmg` file, into the working space of your computer.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，下载后，您将安装应用程序并将 `dmg` 文件中的 `example` 文件夹复制到您的计算机的工作空间中。
- en: Tiled Map Editor is free application. However, you can donate to this software
    if you like.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Tiled 地图编辑器是一个免费的应用程序。然而，如果您喜欢，可以向这个软件捐赠。
- en: How to do it...
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: In this part, we explain how to create a new map from scratch with the Tiled
    tool.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们解释如何使用 Tiled 工具从头开始创建一个新的地图。
- en: Launch Tiled and selecting **File** | **New** in the menu. Open the new additional
    window as in the following image:![How to do it...](img/B0561_10_08.jpg)
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Tiled 并在菜单中选择**文件** | **新建**。打开如下所示的附加窗口：![如何操作...](img/B0561_10_08.jpg)
- en: Select XML in **Tile layer format** and change **Width** and **Height** in **Map
    size** to 50 tiles. Finally, click **OK**. So you can see the Tiled's window as
    in the following image:![How to do it...](img/B0561_10_09.jpg)
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**瓦片层格式**中选择 XML，并在**地图大小**中更改**宽度**和**高度**为 50 个瓦片。最后，点击**确定**。这样您就可以看到 Tiled
    的窗口，如下所示：![如何操作...](img/B0561_10_09.jpg)
- en: Select **Map** | **New Tileset…** in the menu. You can select the tileset window.
    Select the tileset image by clicking the **Browse…** button in the middle of the
    window. In this case, you will select `tmw_desert_spacing.png` file in Tiled's
    `example` folder. This tileset has tiles with a width and height of 32px and a
    margin and spacing of 1px. So you have to change these values as shown in the
    following screenshot:![How to do it...](img/B0561_10_10.jpg)
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在菜单中选择**地图** | **新建瓦片集…**。您可以选择瓦片集窗口。通过点击窗口中间的**浏览…**按钮选择瓦片集图像。在这种情况下，您将选择 Tiled
    的 `example` 文件夹中的 `tmw_desert_spacing.png` 文件。这个瓦片集包含宽度为 32px、高度为 32px、边距和间距为
    1px 的瓦片。因此，您必须将这些值更改为如下截图所示：![如何操作...](img/B0561_10_10.jpg)
- en: Finally, click on the **OK** button, and you will see the new editor window
    as shown in the following screenshot:![How to do it...](img/B0561_10_11.jpg)
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，点击**确定**按钮，您将看到如下截图所示的新编辑器窗口：![如何操作...](img/B0561_10_11.jpg)
- en: Next, let's try to paint the ground layer using the tile that you selected.
    Select the tile from the right and lower panes, and select the bucket icon in
    the tool bar. Then, click on the map, and you will see the ground painted with
    the same tile.![How to do it...](img/B0561_10_12.jpg)
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们尝试使用您选择的瓦片来绘制地面层。从右侧和下方的面板中选择瓦片，然后在工具栏中选择桶形图标。然后，点击地图，您将看到用相同瓦片绘制的地面。![如何操作...](img/B0561_10_12.jpg)
- en: You can arrange the tiles on the map. Select the tile in the lower right pane
    and select the stamp icon in the tool bar. Then, click on the map. That's how
    you can put the tile on the map.![How to do it...](img/B0561_10_13.jpg)
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以在地图上排列瓦片。在右下角的面板中选择瓦片，然后在工具栏中选择印章图标。然后，点击地图。这样您就可以将瓦片放置在地图上。![如何操作...](img/B0561_10_13.jpg)
- en: After you have finished arranging the map, you need to save it as a new file.
    Go to **File** | **Save as…** in the menu and save the new file that you made.
    To use Cococs2d-x, you have to add the `tmx` file and tileset image file into
    the `Resources/res` folder in your project. In this recipe, we added `desert.tmx`
    and `tmw_desert_spacing.png` in Tiled's `example` folder.![How to do it...](img/B0561_10_14.jpg)
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您完成地图排列后，需要将其保存为新的文件。在菜单中转到 **文件** | **另存为…** 并保存您创建的新文件。要使用 Cococs2d-x，您必须将
    `tmx` 文件和瓦片集图像文件添加到项目中的 `Resources/res` 文件夹。在这个菜谱中，我们在 Tiled 的 `example` 文件夹中添加了
    `desert.tmx` 和 `tmw_desert_spacing.png`。![如何操作...](img/B0561_10_14.jpg)
- en: 'From now on, you have to work in Xcode. Edit the `HelloWorld::init` method
    as shown in the following code:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从现在开始，您必须在 Xcode 中工作。按照以下代码编辑 `HelloWorld::init` 方法：
- en: '[PRE2]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'After building and running, you can see the following image on the simulator
    or devices:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建并运行后，您可以在模拟器或设备上看到以下图像：
- en: '![How to do it...](img/B0561_10_15.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/B0561_10_15.jpg)'
- en: How it works...
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The files that Tiled map needs are the `tmx` file and tileset image file. That's
    why you have to add these files into your project. You can see the Tiled map object
    using the `TMXTiledMap` class. You have to specify the `tmx` file path to the
    `TMXTiledMap::create` method. The `TMXTiledMap` object is Node. You can see the
    tiled map only when you add the `TMXTiledMap` object using the `addChild` method.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Tiled 地图所需文件是 `tmx` 文件和瓦片集图像文件。这就是为什么您必须将这些文件添加到您的项目中。您可以使用 `TMXTiledMap` 类查看
    Tiled 地图对象。您必须将 `tmx` 文件路径指定给 `TMXTiledMap::create` 方法。`TMXTiledMap` 对象是节点。只有当您使用
    `addChild` 方法添加 `TMXTiledMap` 对象时，您才能看到瓦片地图。
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Tip
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '`TMXTileMap` object''s anchor position is `Vec2(0,0)`. The normal node''s anchor
    position is `Vec2(0.5f, 0.5f)`.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`TMXTileMap` 对象的锚点位置是 `Vec2(0,0)`。正常节点的锚点位置是 `Vec2(0.5f, 0.5f)`。'
- en: There's more…
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: The tiled map is huge. So, we try to move the map by scrolling it. In this case,
    you touch the screen and scroll the map by the distance from the touching point
    to the center of the screen.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 瓦片地图非常大。因此，我们尝试通过滚动来移动地图。在这种情况下，您触摸屏幕，并通过触摸点到屏幕中心的距离来滚动地图。
- en: 'Add the following code in the `HelloWorld::init` method:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `HelloWorld::init` 方法中添加以下代码：
- en: '[PRE4]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Define the `touch` method and some properties in `HelloWorldScene.h` as shown
    in the following code:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `HelloWorldScene.h` 中定义 `touch` 方法和一些属性，如下面的代码所示：
- en: '[PRE5]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Add the touch method in `HelloWorldScene.cpp` as shown in the following code:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `HelloWorldScene.cpp` 中添加 `touch` 方法，如下面的代码所示：
- en: '[PRE6]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Finally, add the `update` method in `HelloWorldScene.cpp` as shown in the following
    code:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在 `HelloWorldScene.cpp` 中添加 `update` 方法，如下面的代码所示：
- en: '[PRE7]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: After that, run this project and touch the screen. This is how you can move
    the map in the direction that you swipe.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，运行此项目并触摸屏幕。这样您就可以在您滑动方向上移动地图。
- en: Getting the property of the object in the tiled map
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取瓦片地图中对象的属性
- en: Now, you can move the Tiled map. However, you might notice the object on the
    map. For example, if there is a wood or wall in the direction of movement, you
    can't move in that direction beyond that object. In this recipe, you will notice
    the object on the map by getting the property of it.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以移动 Tiled 地图。然而，您可能会注意到地图上的对象。例如，如果移动方向上有木材或墙壁，您就不能超过该对象移动。在这个菜谱中，您将通过获取其属性来注意到地图上的对象。
- en: Getting ready
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, you will make a new property of the tree object and set a value
    to it.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，您将为树对象创建一个新的属性并为其设置一个值。
- en: Launch the Tiled application and reopen the `desert.tmx` file.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Tiled 应用程序并重新打开 `desert.tmx` 文件。
- en: Select the tree object in the **Tilesets** window.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Tilesets** 窗口中选择树对象。
- en: Add a new property by clicking on the plus icon in the lower left corner in
    the **Properties** window. Then, a window will pop up specifying the property's
    name. Enter `isTree` in the text area.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **属性** 窗口的左下角点击加号图标添加一个新属性。然后，将弹出一个窗口指定属性的名称。在文本区域中输入 `isTree`。
- en: After you name the new property, it will be shown in the properties list. However,
    you will find that its value is empty. So, you have to set the new value to it.
    In this case, you need to set a true value as shown in the following image:![Getting
    ready](img/B0561_10_16.jpg)
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你命名了新属性后，它将显示在属性列表中。然而，你会发现它的值是空的。所以，你必须设置新的值。在这种情况下，你需要设置一个真值，如下面的图像所示：![准备中](img/B0561_10_16.jpg)
- en: Save it and update `desert.tmx` in your project.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存它并更新项目中的 `desert.tmx`。
- en: How to do it...
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: In this recipe, you will get the property of the object that you touched.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，你将获取你触摸的对象的属性。
- en: Edit the `HelloWorld::init` method to show the tiled map and add the event listener
    for touching.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 `HelloWorld::init` 方法以显示瓦片图并添加触摸事件监听器。
- en: '[PRE8]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Add the `HelloWorld::getTilePosition` method. You can get the tile's grid row/column
    position if you called this method by specifying the touch position.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `HelloWorld::getTilePosition` 方法。如果你通过指定触摸位置调用此方法，你可以获取瓦片的网格行/列位置。
- en: '[PRE9]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Finally, you can get the properties of the object that you touch. Add the `HelloWorld::onTouchBegan`
    method as shown in the following code:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，你可以获取你触摸的对象的属性。添加如下所示的 `HelloWorld::onTouchBegan` 方法：
- en: '[PRE10]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Let's build and run this project. If you touched the tree to which you set the
    new `isTree` property, you can see *it's tree!* in the log.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建并运行这个项目。如果你触摸了设置了新 `isTree` 属性的树，你可以在日志中看到 *它是树!*。
- en: How it works...
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: There are two points in this recipe. The first point is getting the tile's row/column
    position on the tiled map. The second point is getting the properties of the object
    on the tiled map.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中有两个要点。第一个要点是在瓦片图中获取瓦片的行/列位置。第二个要点是在瓦片图中获取对象的属性。
- en: Firstly, let's explain how to get the tiles' row/column position on the tiled
    map.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们解释一下如何在瓦片图中获取瓦片的行/列位置。
- en: Get the map size using the `TMXTiledMap::getContentSize` method.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `TMXTiledMap::getContentSize` 方法获取地图大小。
- en: '[PRE11]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Calculate the `point` on the map from the touching point and map position.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从触摸点和地图位置计算地图上的 `point`。
- en: '[PRE12]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Get the tile size using the `TMXTiledMap::getTileSize` method.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `TMXTiledMap::getTileSize` 方法获取瓦片大小。
- en: '[PRE13]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Get the row/column of the tile in the map using the `TMXTiledMap::getMapSize`
    method.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `TMXTiledMap::getMapSize` 方法在地图中获取瓦片的行/列。
- en: '[PRE14]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Get the magnification display using the original size called `mapContentSize`
    and real size calculated by the column's width and tile's width.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用原始大小 `mapContentSize` 和通过列宽和瓦片宽计算出的实际大小来获取放大显示。
- en: '[PRE15]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The origin of coordinates for the tiles is located in the upper left corner.
    That''s why the tile''s row/column position of the tile that you touched is calculated
    using the tile''s size, the row, and magnification display as shown in the following
    code:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 瓦片坐标的原点位于左上角。这就是为什么你触摸的瓦片的行/列位置是使用瓦片的大小、行和放大显示来计算的，如下面的代码所示：
- en: '[PRE16]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`tilePoint.x` is the column position and `tilePoint.y` is row position.'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`tilePoint.x` 是列位置，`tilePoint.y` 是行位置。'
- en: Next, let's take a look at how to get the properties of the object on the Tiled
    map.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看如何获取 Tiled 地图中对象的属性。
- en: Get the row/column position of the tile that you touched using the touching
    point.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用触摸点获取你触摸的瓦片的行/列位置。
- en: '[PRE17]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Get the layer called `"Ground"` from the tiled map.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从瓦片图中获取名为 `"Ground"` 的层。
- en: '[PRE18]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: There are the objects on this layer called `Ground`. Get the `TileGID` from
    this layer using row/column of the tile.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个层上有一个名为 `Ground` 的对象。使用瓦片的行/列从该层获取 `TileGID`。
- en: '[PRE19]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Finally, get the properties as `ValueMap` from the map using the `TMXTiledMap::getPropertiesForGID`
    method. Then, get the `isTree` property''s value from them as shown in the following
    code:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，使用 `TMXTiledMap::getPropertiesForGID` 方法从地图中获取属性作为 `ValueMap`。然后，从其中获取 `isTree`
    属性的值，如下面的代码所示：
- en: '[PRE20]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In this recipe, we showed only the log. However, in your real game, you will
    add the point to the object, explosions and so on.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们只展示了日志。然而，在你的实际游戏中，你将需要将分数添加到对象、爆炸等。
- en: Using Physics Editor
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用物理编辑器
- en: In [Chapter 9](ch09.html "Chapter 9. Controlling Physics"), *Controlling Physics*,
    you learned about **Physics Engine**. We can create physics bodies to use Cocos2d-x
    API. However, we can only create a circle shape or a box shape. Actually, you
    have to use complex shapes in real games. In this recipe, you will learn how to
    create a lot of shapes using **Physics Editor**.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第9章](ch09.html "第9章。控制物理")中，*控制物理*，你学习了关于**物理引擎**的内容。我们可以创建物理体来使用Cocos2d-x
    API。然而，我们只能创建圆形或方形形状。实际上，在真实游戏中，你必须使用复杂形状。在这个菜谱中，你将学习如何使用**物理编辑器**创建许多形状。
- en: Getting ready
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Physics Editor is created by the same company that created Texture Packer. Physics
    Editor is a paid application. But you can use a free trial version. If you don't
    have it, you can download it by visiting the [https://www.codeandweb.com/physicseditor](https://www.codeandweb.com/physicseditor)
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 物理编辑器是由创建纹理打包器的同一家公司开发的。物理编辑器是一个付费应用程序。但你可以使用免费试用版。如果你还没有，你可以通过访问[https://www.codeandweb.com/physicseditor](https://www.codeandweb.com/physicseditor)来下载它。
- en: Here, you prepare the image to use this tool. Here, we will use the following
    image that is similar to a gear. This image's name is `gear.png`.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你准备使用此工具的图像。这里，我们将使用以下类似齿轮的图像。此图像的名称是`gear.png`。
- en: '![Getting ready](img/B0561_10_17.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![准备中](img/B0561_10_17.jpg)'
- en: How to do it...
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: First of all, you will create a physics file to use Physics Editor.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要创建一个物理文件来使用物理编辑器。
- en: Launch Physics Editor. Then, drag the image `gear.png` to the left pane.![How
    to do it...](img/B0561_10_18.jpg)
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动物理编辑器。然后，将图像`gear.png`拖到左侧面板。![如何操作...](img/B0561_10_18.jpg)
- en: Click on the shaper tracer icon that is the third icon from the left in the
    tool bar. The shaper tracer icon is shown in the following image:![How to do it...](img/B0561_10_a1.jpg)
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击工具栏中从左数第三个的形状追踪器图标。形状追踪器图标如下所示：![如何操作...](img/B0561_10_a1.jpg)
- en: After this, you can see the pop-up window as shown in the following image:![How
    to do it...](img/B0561_10_19.jpg)
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此之后，你可以看到如下所示的弹出窗口：![如何操作...](img/B0561_10_19.jpg)
- en: 'You can change the **Tolerance** value. If the **Vertexes** value is too big,
    the renderer is slow. So you set the suitable **Vertexes** value to change the
    **Tolerance** value. Finally, click on the **OK** button. You will see the following:'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以更改**容差**值。如果**顶点**值太大，渲染器会变慢。因此，你需要设置合适的**顶点**值来更改**容差**值。最后，点击**确定**按钮。你将看到以下内容：
- en: '![How to do it...](img/B0561_10_20.jpg)'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/B0561_10_20.jpg)'
- en: Select `Cocos2d-x` in **Exporter**. In this tool, the anchor point's default
    value is `Vec2(0,0)`. In Cocos2d-x, the anchor point's default is `Vec2(0.5f,
    0.5f)`. So you should change the anchor point to the center as shown in the following
    screenshot:![How to do it...](img/B0561_10_21.jpg)
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**导出器**中选择`Cocos2d-x`。在这个工具中，锚点的默认值是`Vec2(0,0)`。在Cocos2d-x中，锚点的默认值是`Vec2(0.5f,
    0.5f)`。因此，你应该将锚点更改为中心，如下面的截图所示：![如何操作...](img/B0561_10_21.jpg)
- en: Check the checkboxes for **Category**, **Collision**, and **Contact**. You need
    to scroll down to see this window in the right pane. You can check all the checkboxes
    and click all buttons that are in the bottom of the right pane.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**类别**、**碰撞**和**接触**的复选框。你需要向下滚动才能在右侧面板中看到此窗口。你可以勾选所有复选框并点击右侧面板底部的所有按钮。
- en: Publish the `plist` file to use this shape in Cocos2d-x. Click on the **Publish**
    button and save as the previous name.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`plist`文件发布到Cocos2d-x中使用此形状。点击**发布**按钮并保存为之前的名称。
- en: You can see the **Download loader code** link under the **Exporter** selector.
    Click on the link. After this, open the browser and browse to the github page.
    Cocos2d-x cannot load Physics Editor's `plist`. However, the loader code is provided
    in github. So you have to clone this project and add the codes in the `Cocos2d-x`
    folder in the project.![How to do it...](img/B0561_10_22.jpg)
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以在**导出器**选择器下看到**下载加载器代码**链接。点击链接。之后，打开浏览器并浏览到github页面。Cocos2d-x无法加载物理编辑器的`plist`。然而，加载器代码在github上提供。因此，你必须克隆此项目并将代码添加到项目中的`Cocos2d-x`文件夹。![如何操作...](img/B0561_10_22.jpg)
- en: Next, you will write code to create the physics bodies by using the Physics
    Editor data. In this case, the gear object will appear at the touching point.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写代码，通过使用物理编辑器数据来创建物理体。在这种情况下，齿轮对象将出现在接触点。
- en: Include the file `PhysicsShapeCache.h`.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含文件`PhysicsShapeCache.h`。
- en: '[PRE21]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Create a scene with the physics world as shown in the following code:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个具有如下代码所示物理世界的场景：
- en: '[PRE22]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Create a wall of the same screen size in the scene and add the touching event
    listener. Then, load the Physics Editor''s data as shown in the following code:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在场景中创建一个与屏幕大小相同的墙壁，并添加触摸事件监听器。然后，按照以下代码加载 Physics Editor 的数据：
- en: '[PRE23]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Make the gear objects perform when touching the screen as shown in the following
    code:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使齿轮对象在触摸屏幕时执行以下代码所示的操作：
- en: '[PRE24]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: After this, build and run this project. After touching the screen, the gear
    objects appear at the touching point.![How to do it...](img/B0561_10_23.jpg)
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，构建并运行此项目。触摸屏幕后，齿轮对象将出现在触摸点。![如何操作...](img/B0561_10_23.jpg)
- en: How it works...
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Firstly, you have to add two files, `plist` and image. Physics body is defined
    in the `plist` file that you published with Physics Editor. However, you use the
    gear image to create a sprite. Therefore, you have to add the `plist` file and
    `gear.png` into your project.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，您必须添加两个文件，`plist` 和图像。物理体在您使用 Physics Editor 发布的 `plist` 文件中定义。然而，您使用齿轮图像来创建精灵。因此，您必须将
    `plist` 文件和 `gear.png` 添加到您的项目中。
- en: Cocos2d-x cannot read Physics Editor's data. Therefore, you have to add the
    loader class that is provided in github.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Cocos2d-x 无法读取 Physics Editor 的数据。因此，您必须添加在 github 上提供的加载器类。
- en: To use the Physics Engine, you have to create a scene with Physics World and
    you should set the debug draw mode to easy, to better understand physics bodies.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用物理引擎，您必须创建一个带有物理世界的场景，并且应该将调试绘制模式设置为简单，以便更好地理解物理体。
- en: '[PRE25]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Without border or walls, the physics objects will drop out of the screen. So
    you have to put up a wall that is the same size as the screen.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 没有边框或墙壁，物理对象会从屏幕上掉落。因此，您必须设置一个与屏幕大小相同的墙壁。
- en: '[PRE26]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Load the physics data's `plist` that was created by Physics Editor. The `PhysicsShapeCache`
    will load the `plist` at once. After that, the physics data is cached in the `PhysicsShapeCache`
    class.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载由 Physics Editor 创建的物理数据的 `plist`。`PhysicsShapeCache` 将一次性加载 `plist`。之后，物理数据将缓存在
    `PhysicsShapeCache` 类中。
- en: '[PRE27]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In the `HelloWorld::onTouchBegan` method, create the gear object at the touching
    point. You can create physics body using the `PhysicsShapeCache::createBodyWithName`
    method with physics object data.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `HelloWorld::onTouchBegan` 方法中，在触摸点创建齿轮对象。您可以使用 `PhysicsShapeCache::createBodyWithName`
    方法以及物理对象数据来创建物理体。
- en: '[PRE28]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Using Glyph Designer
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Glyph Designer
- en: In games, you have to use text frequently. In which case, if you used the system
    font to display the text, you will have some problems. That's why there are different
    fonts for each device. The bitmap fonts are faster to render than the TTF fonts.
    So, Cocos2d-x uses the bitmap font to display the fps information in the bottom-left
    corner. Therefore, you should add the bitmap font into your game to display the
    text. In this recipe, you will learn how to use **Glyph Designer** which is the
    tool to make the original bitmap font and how to use the bitmap font in Cocos2d-x.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在游戏中，您必须经常使用文本。在这种情况下，如果您使用系统字体来显示文本，您将遇到一些问题。这就是为什么每个设备都有不同的字体。位图字体比 TTF 字体渲染更快。因此，Cocos2d-x
    使用位图字体在屏幕左下角显示 fps 信息。因此，您应该将位图字体添加到您的游戏中以显示文本。在本教程中，您将学习如何使用 **Glyph Designer**，这是制作原始位图字体的工具，以及如何在
    Cocos2d-x 中使用位图字体。
- en: Getting ready
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Glyph Designer is a paid application. But you can use a free trial version.
    If you don''t have it, you can download it by visiting the following URL:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: Glyph Designer 是一款付费应用程序。但您可以使用免费试用版。如果您没有它，您可以通过访问以下网址下载它：
- en: '[https://71squared.com/glyphdesigner](https://71squared.com/glyphdesigner)'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://71squared.com/glyphdesigner](https://71squared.com/glyphdesigner)'
- en: Next, we will find a free font that fits your game's atmosphere. In this case,
    we will use the font called `Arcade` from the dafont site ([http://www.dafont.com/arcade-ya.font](http://www.dafont.com/arcade-ya.font)).
    After downloading it, you need to install it to your computer.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将找到一个适合您游戏氛围的免费字体。在这种情况下，我们将使用 dafont 网站上的 `Arcade` 字体（[http://www.dafont.com/arcade-ya.font](http://www.dafont.com/arcade-ya.font)）。下载后，您需要将其安装到您的计算机上。
- en: On the dafont site, there are a lot of fonts. However, the font license is different
    for each font. If you used the font, you need to check its license.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在 dafont 网站上有很多字体。但是，每个字体的许可协议都不同。如果您使用了该字体，您需要检查其许可协议。
- en: How to do it...
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: In this section, you will learn how to use Glyph Designer.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学习如何使用 Glyph Designer。
- en: Launch Glyph Designer. In the left pane, there are all the fonts that are installed
    on your computer. You can choose the font that you want to use in your game from
    there. Here we will use `Arcade` font that you downloaded a short time ago. If
    you didn't install it yet, you can load it. To load the font, you have to click
    on the **Load Font** button in the tool bar.![How to do it...](img/B0561_10_24.jpg)
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Glyph Designer。在左侧面板中，有你在计算机上安装的所有字体。你可以从那里选择你想要在游戏中使用的字体。这里我们将使用你不久前下载的`Arcade`字体。如果你还没有安装它，你可以加载它。要加载字体，你必须点击工具栏中的**加载字体**按钮。![如何操作...](img/B0561_10_24.jpg)
- en: After selecting or loading the font, it is displayed in the center pane. If
    your game used a part of the font, you have to hold the characters that you need
    to save memory and the application capacity. To select the characters, you can
    use the **Include Glyphs** window in the right pane. You need to scroll down to
    see this window in the right pane.![How to do it...](img/B0561_10_25.jpg)
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择或加载字体后，它将在中心面板中显示。如果你的游戏使用了字体的一部分，你必须保留所需的字符以节省内存和应用程序容量。要选择字符，你可以使用右面板中的**包含字形**窗口。你需要向下滚动才能在右面板中看到这个窗口。![如何操作...](img/B0561_10_25.jpg)
- en: The others, you can specify the size, color, and shadow. In the **font color**
    option, you can set a gradient.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于其他设置，你可以指定大小、颜色和阴影。在**字体颜色**选项中，你可以设置渐变。
- en: Finally, you can create an original font by clicking on the `Export` icon on
    the right side of the tool bar.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，你可以通过点击工具栏右侧的**导出**图标来创建一个原始字体。
- en: After exporting, you will have the two files that have the extension of `.fnt`
    and `.png`.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导出后，你将拥有两个扩展名为 `.fnt` 和 `.png` 的文件。
- en: How it works...
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The bitmap font has two files, `.fnt` and `.png`. These files are paired for
    use in the bitmap font. Now, you will learn how to use bitmap fonts in Cocos2d-x.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 位图字体有两个文件，`.fnt` 和 `.png`。这些文件是成对使用的，用于位图字体。现在，你将学习如何在 Cocos2d-x 中使用位图字体。
- en: You have to add the font that were created in Glyph Designer, into the `Resources/font`
    folder in your project.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你必须将 Glyph Designer 中创建的字体添加到项目中的`Resources/font`文件夹。
- en: Add the following code to display "`Cocos2d-x`" in your game.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到你的游戏中以显示"`Cocos2d-x`"。
- en: '[PRE29]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: After building and running your project, you will see the following:![How it
    works...](img/B0561_10_26.jpg)
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建并运行你的项目后，你将看到以下内容：![工作原理...](img/B0561_10_26.jpg)
- en: There's more…
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Some fonts aren''t monospaced. The true type font is good enough for use in
    a word-processor. However, the monospaced font is more attractive. For example,
    the point character needs to use the monospaced font. When you want to make the
    monospaced font into a non-monospaced font, you can go through the following steps:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 有些字体不是等宽的。真型字体在文字处理程序中使用已经足够好。然而，等宽字体更吸引人。例如，点字符需要使用等宽字体。当你想要将等宽字体转换为非等宽字体时，你可以按照以下步骤进行：
- en: Check the checkbox named **Fixed Width** in **Texture Atlas** in right pane.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右面板的**纹理图集**中勾选名为**固定宽度**的复选框。
- en: Preview your font and click on the **Preview** icon in the tool bar. Then, you
    can check the characters that you want to check in the textbox.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 预览你的字体，并点击工具栏中的**预览**图标。然后，你可以在文本框中检查你想要检查的字符。
- en: If you want to change the character spacing, then you need to change the number
    next to the checkbox of **Fixed Width**.![There's more…](img/B0561_10_27.jpg)
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想要更改字符间距，那么你需要更改**固定宽度**复选框旁边的数字。![还有更多…](img/B0561_10_27.jpg)
