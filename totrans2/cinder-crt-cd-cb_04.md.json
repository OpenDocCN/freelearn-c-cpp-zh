["```cpp\n    #include \"cinder/qtime/QuickTime.h\"\n    #include \"cinder/gl/gl.h\"\n    #include \"cinder/gl/Texture.h\"\n    ```", "```cpp\n    using namespace ci;\n    using namespace ci::app;\n\n    class MyApp : public AppBasic {\n    public:\n      void setup();\n      void update();\n      void draw();\n\n    qtime::MovieGl mMovie;\n    gl::Texture mMovieTexture;\n    };\n    ```", "```cpp\n    try{\n    mMovie = qtime::MovieGl( loadResource( \"movie.mov\" ) );\n        } catch( Exception e){\n    console() <<e.what()<<std::endl;\n        }\n    ```", "```cpp\n    try{\n    fs::path path = getOpenFilePath();\n    mMovie = qtime::MovieGl( path );\n        } catch( Exception e){\n    console() <<e.what()<<std::endl;\n        }\n    ```", "```cpp\n    If( mMovie ){\n    mMovie.play();\n    }\n    ```", "```cpp\n    void MyApp::update(){\n    if( mMovie ){\n    mMovieTexture = mMovie.getTexture();\n    }\n    ```", "```cpp\n    gl::clear( Color( 0, 0, 0 ) ); \n    if( mMovieTexture ){\n    Rect frect = Rectf( mMovieTexture.getBounds() ).getCenteredFit( getWindowBounds(), true );\n    gl::draw( mMovieTexture, rect );\n    }\n    ```", "```cpp\n    #include \"cinder/gl/gl.h\"\n    #include \"cinder/gl/Texture.h\"\n    #include \"cinder/qtime/QuickTime.h\"\n    #include \"cinder/params/Params.h\"\n    #include \"cinder/Utilities.h\"\n    ```", "```cpp\n    using namespace ci;\n    using namespace ci::app;\n    using namespace ci::gl;\n    ```", "```cpp\n    Texture mMovieTexture;\n    qtime::MovieGl mMovie;\n    params::InterfaceGl mParams;\n    ```", "```cpp\n    try{\n    fs::path path = getOpenFilePath();\n    mMovie = qtime::MovieGl( path );\n    }catch( â€¦ ){\n      console() << \"could not open video file\" <<std::endl;\n    }\n    ```", "```cpp\n    float mMoviePosition, mPrevMoviePosition;\n    float mMovieRate, mPrevMovieRate;\n    float mMovieVolume, mPrevMovieVolume;\n    bool mMoviePlay, mPrevMoviePlay;\n    bool mMovieLoop, mPrevMovieLoop;\n    ```", "```cpp\n    mMoviePosition = 0.0f;\n    mPrevMoviePosition = mMoviePosition;\n    mMovieRate = 1.0f;\n    mPrevMovieRate = mMovieRate;\n    mMoviePlay = false;\n    mPrevMoviePlay = mMoviePlay;\n    mMovieLoop = false;\n    mPrevMovieLoop = mMovieLoop;\n    mMovieVolume = 1.0f;\n    mPrevMovieVolume = mMovieVolume;\n    ```", "```cpp\n    mParams = params::InterfaceGl( \"Movie Controller\", Vec2i( 200, 300 ) ); \n    if( mMovie ){\n    string max = ci::toString( mMovie.getDuration() );\n    mParams.addParam( \"Position\", &mMoviePosition, \"min=0.0 max=\" + max + \" step=0.5\" );\n\n    mParams.addParam( \"Rate\", &mMovieRate, \"step=0.01\" );\n\n    mParams.addParam( \"Play/Pause\", &mMoviePlay );\n\n    mParams.addParam( \"Loop\", &mMovieLoop );\n\n    mParams.addParam( \"Volume\", &mMovieVolume, \"min=0.0 max=1.0 step=0.01\" );\n    }\n    ```", "```cpp\n    if( mMovie ){\n\n    if( mMoviePosition != mPrevMoviePosition ){\n    mPrevMoviePosition = mMoviePosition;\n    mMovie.seekToTime( mMoviePosition );\n            } else {\n    mMoviePosition = mMovie.getCurrentTime();\n    mPrevMoviePosition = mMoviePosition;\n            }\n    if( mMovieRate != mPrevMovieRate ){\n    mPrevMovieRate = mMovieRate;\n    mMovie.setRate( mMovieRate );\n            }\n    if( mMoviePlay != mPrevMoviePlay ){\n    mPrevMoviePlay = mMoviePlay;\n    if( mMoviePlay ){\n    mMovie.play();\n                } else {\n    mMovie.stop();\n                }\n            }\n    if( mMovieLoop != mPrevMovieLoop ){\n    mPrevMovieLoop = mMovieLoop;\n    mMovie.setLoop( mMovieLoop );\n            }\n    if( mMovieVolume != mPrevMovieVolume ){\n    mPrevMovieVolume = mMovieVolume;\n    mMovie.setVolume( mMovieVolume );\n            }\n        }\n    ```", "```cpp\n    if( mMovie ){\n    mMovieTexture = mMovie.getTexture();\n    }\n    ```", "```cpp\n    gl::clear( Color( 0, 0, 0 ) ); \n\n    if( mMovieTexture ){\n    Rectf rect = Rectf( mMovieTexture.getBounds() ).getCenteredFit( getWindowBounds(), true );\n    gl::draw( mMovieTexture, rect );\n        }\n\n    mParams.draw();\n    ```", "```cpp\n    #include \"cinder/ImageIo.h\"\n    #include \"cinder/Utilities.h\"\n    ```", "```cpp\n    bool mMakeScreenshot;\n    ```", "```cpp\n    mMakeScreenshot = false;\n    ```", "```cpp\n    void MainApp::keyDown(KeyEvent event)\n      {\n      if(event.getChar() == 's') {\n      mMakeScreenshot = true;\n        }\n      }\n    ```", "```cpp\n    if(mMakeScreenshot) {\n    mMakeScreenshot = false;\n    writeImage( getDocumentsDirectory() / fs::path(\"MainApp_screenshot.png\"), copyWindowSurface() );\n    }\n    ```", "```cpp\n    if(mMakeScreenshot || mRecordFrames) {\n    mMakeScreenshot = false;\n    writeImage( getDocumentsDirectory() / fs::path(\"MainApp_screenshot_\" + toString(mFramesCounter) + \".png\"), copyWindowSurface() );\n    mFramesCounter++;\n    }\n    ```", "```cpp\n    bool mRecordFrames;\n    int mFramesCounter;\n    ```", "```cpp\n    mRecordFrames = false;\n    mFramesCounter = 1;\n    ```", "```cpp\n    if(mRecordFrames) {\n    mTrack->setTime(mFramesCounter / 30.f);\n    }\n    ```", "```cpp\ngl::clear( Color( 0, 0, 0 ) );     \nfloat radius = fabsf( sinf( getElapsedSeconds() ) ) * 200.0f;\nVec2f center = getWindowCenter();\ngl::color( Color( 1.0f, 1.0f, 0.0f ) );\ngl::drawSolidCircle( center, radius );\n```", "```cpp\n    #include \"cinder/gl/gl.h\"\n    #include \"cinder/qtime/MovieWriter.h\"\n    ```", "```cpp\n    qtime::MovieWriter mMovieWriter;\n    void initMovieWriter();\n    ```", "```cpp\n    void MyApp::initMovieWriter(){\n    fs::path path = getSaveFilePath();\n    if( path.empty() == false ){\n    mMovieWriter = qtime::MovieWriter( path, getWindowWidth(), getWindowHeight() );\n        }\n    }\n    ```", "```cpp\n    void keyUp( KeyEvent event );\n    ```", "```cpp\n    void MovieWriterApp::keyUp( KeyEvent event ){\n    if( mMovieWriter ){\n    mMovieWriter = qtime::MovieWriter();\n        } else {\n    initMovieWriter();\n        }\n    }\n    ```", "```cpp\n    void MyApp::draw()\n    {\n      gl::clear( Color( 0, 0, 0 ) ); \n\n    float radius = fabsf( sinf( getElapsedSeconds() ) ) * 200.0f;\n        Vec2f center = getWindowCenter();\n    gl::color( Color( 1.0f, 1.0f, 0.0f ) );\n    gl::drawSolidCircle( center, radius );\n\n    if( mMovieWriter ){\n    mMovieWriter.addFrame( copyWindowSurface() );\n        }\n    }\n    ```", "```cpp\nqtime::MovieWriter::Format format;\nformat.setCodec( qtime::MovieWriter::CODEC_H264 );\nformat.setQuality( 0.5f );\nformat.setDefaultDuration( 1.0f / 24.0f );\nqtime::MovieWriter mMovieWriter = ci::Qtime::MovieWriter( \"mymovie.mov\", getWindowWidth(), getWindowHeight(), format );\n```", "```cpp\nqtime::MovieWriter::Format format;\nqtime::MovieWriter mMovieWriter;\nboolformatDefined = qtime::MovieWriter::getUserCompressionSettings( &format );\nif( formatDefined ){\nmMovieWriter = qtime::MovieWriter( \"mymovie.mov\", getWindowWidth(), getWindowHeight(), format );\n}\n```", "```cpp\nqtime::MovieWriter::Format format;\nformat.setCodec( qtime::MovieWriter::CODEC_H264 );\nformat.enableMultiPass( true );\nqtime::MovieWritermMovieWriter = ci::Qtime::MovieWriter( \"mymovie.mov\", getWindowWidth(), getWindowHeight(), format );\n```", "```cpp\nCINDER_APP_BASIC( MyApp, Renderer2d )\n```", "```cpp\n#include \"cinder/Rand.h\"\n#include \"cinder/cairo/Cairo.h\"\n```", "```cpp\n    class Circle{\n    public:\n        Circle( const Vec2f&pos ){\n    this->pos = pos;\n    radius = randFloat( 20.0f, 50.0f );\n    color = ColorA( randFloat( 1.0f ), randFloat( 1.0f ), randFloat( 1.0f ), 0.5f );\n        }\n\n        Vec2f pos;\n    float radius;\n    ColorA color;\n    };\n    ```", "```cpp\n    std::vector< Circle >mCircles;\n    ```", "```cpp\n    void renderScene( cairo::Context &context );\n    ```", "```cpp\n    void MyApp::renderScene( cairo::Context &context ){\n    for( std::vector< Circle >::iterator it = mCircles.begin(); it != mCircles.end(); ++it ){\n    context.circle( it->pos, it->radius );\n    context.setSource( it->color );\n    context.fill();\n        }\n    }\n    ```", "```cpp\n    void mouseDown( MouseEvent event );\n    ```", "```cpp\n    void MyApp::mouseDown( MouseEvent event ){\n      Circle circle( event.getPos() );\n    mCircles.push_back( circle );\n    }\n    ```", "```cpp\n    void CairoSaveApp::draw()\n    {\n    cairo::Context context( cairo::createWindowSurface() );\n    renderScene( context );\n    }\n    ```", "```cpp\n    void keyUp( KeyEvent event );\n    ```", "```cpp\n    fs::path filePath = getSaveFilePath();\n    cairo::SurfaceBase surface;\n    ```", "```cpp\n    if( filePath.extension() == \".pdf\" ){\n    surface = cairo::SurfacePdf( filePath, getWindowWidth(), getWindowHeight() );\n        } else if( filePath.extension() == \".svg\" ){\n    surface = cairo::SurfaceSvg( filePath, getWindowWidth(), getWindowHeight() );\n        } else if( filePath.extension() == \".eps\" ){\n    surface = cairo::SurfaceEps( filePath, getWindowWidth(), getWindowHeight() );\n        } else if( filePath.extension() == \".ps\" ){\n    surface = cairo::SurfacePs( filePath, getWindowWidth(), getWindowHeight() );\n        }\n    ```", "```cpp\n    void CairoSaveApp::keyUp( KeyEvent event ){\n    fs::path filePath = getSaveFilePath();\n    cairo::SurfaceBase surface;\n    if( filePath.extension() == \".pdf\" ){\n    surface = cairo::SurfacePdf( filePath, getWindowWidth(), getWindowHeight() );\n        } else if( filePath.extension() == \".svg\" ){\n    surface = cairo::SurfaceSvg( filePath, getWindowWidth(), getWindowHeight() );\n        } else if( filePath.extension() == \".eps\" ){\n    surface = cairo::SurfaceEps( filePath, getWindowWidth(), getWindowHeight() );\n        } else if( filePath.extension() == \".ps\" ){\n    surface = cairo::SurfacePs( filePath, getWindowWidth(), getWindowHeight() );\n        }\n    cairo::Context context( surface );\n    renderScene( context );\n    }\n    ```", "```cpp\nvoid MyApp::draw()\n{\n  gl::clear( Color( 0, 0, 0 ) ); \ngl::color( Color::white() );\nfor( float i=0; i<getWindowWidth(); i+=10.0f ){\nfor( float j=0; j<getWindowHeight(); j += 10.0f ){\nfloat radius = j * 0.01f;\ngl::drawSolidCircle( Vec2f( i, j ), radius );\n        }\n    }\n}\n```", "```cpp\n    #include \"cinder/gl/TileRender.h\"\n    #include \"cinder/ImageIo.h\"\n    ```", "```cpp\n    void keyUp( KeyEvent event );\n    ```", "```cpp\n    gl::TileRender tileRender( getWindowWidth() * 4, getWindowHeight() * 4 );\n    ```", "```cpp\n    tileRender.setMatricesWindow( getWindowWidth(), getWindowHeight() );\n    ```", "```cpp\n    tileRender.setMatricesWindowPersp( getWindowWidth(), getWindowHeight() );\n    ```", "```cpp\n    while( tileRender.nextTile() ){\n    draw();\n        }\n    ```", "```cpp\n    fs::path filePath = getSaveFilePath();\n    ```", "```cpp\n    if( filePath.empty() == false ){\n    writeImage( filePath, tileRender.getSurface() );\n    }\n    ```", "```cpp\n    gl::setMatricesWindow( getWindowWidth(), getWindowHeight() );\n    ```", "```cpp\n    #include \"cinderSyphon.h\"\n    ```", "```cpp\n    syphonServer mScreenSyphon;\n    ```", "```cpp\n    mScreenSyphon.setName(\"Cinder Screen\");\n    gl::clear(Color::white());\n    ```", "```cpp\n    gl::enableAlphaBlending();\n\n    gl::color( ColorA(1.f, 1.f, 1.f, 0.05f) );\n    gl::drawSolidRect( getWindowBounds() );\n\n    gl::color( ColorA::black() );\n    Vec2f pos = Vec2f( cos(getElapsedSeconds()), sin(getElapsedSeconds())) * 100.f;\n    gl::drawSolidCircle(getWindowCenter() + pos, 10.f);\n\n    mScreenSyphon.publishScreen();\n    ```", "```cpp\n    syphonClient mClientSyphon;\n    ```", "```cpp\n    mClientSyphon.setApplicationName(\"MainApp Server\");\n    mClientSyphon.setServerName(\"\");\n    mClientSyphon.bind();\n    ```", "```cpp\n    mClientSyphon.draw(Vec2f::zero());\n    ```"]