- en: Chapter 1. Building the Foundation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. 建立基础
- en: Building a game is like building a house. Except this is a crazy house with
    rooms sticking out everywhere, and at any time someone might decide to add another
    room just *here*, and remove a room over *there*. You had better have a good foundation!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 建立一个游戏就像建造一栋房子。只不过这是一栋疯狂的房子，房间到处突出，任何时候都可能有人决定在这里添加一个房间，或者在那里移除一个房间。您最好有一个良好的基础！
- en: This chapter will take you through the process of setting up the foundation
    to build your game. You will learn, how to set up a development environment using
    Visual Studio. Next, you will set up the game loop, which is the foundation for
    every game ever created. Finally, you will set up the development environment
    to use OpenGL as your rendering engine.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将带您了解建立游戏基础的过程。您将学习如何使用 Visual Studio 设置开发环境。接下来，您将设置游戏循环，这是每个游戏的基础。最后，您将设置开发环境以使用
    OpenGL 作为您的渲染引擎。
- en: Introducing the development environment
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍开发环境
- en: The **development environment** is the set of tools that you use to edit, compile,
    and run your program. There are many development tools out there; some tools are
    glorified text editors, while others are entire suites of tools that are integrated
    into a single application. These more advanced suites are known as **Integrated
    Development** **Environments** (**IDEs**).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**开发环境**是您用来编辑、编译和运行程序的工具集。市面上有许多开发工具；有些工具是经过美化的文本编辑器，而其他则是集成到单个应用程序中的完整工具套件。这些更高级的套件被称为**集成开发环境**（**IDEs**）。'
- en: Microsoft's Visual Studio is by far the most widely used IDE, and the good news
    is that you can obtain and use it for free. Go to [https://www.visualstudio.com/en-us/products/visual-studio-express-vs.aspx](https://www.visualstudio.com/en-us/products/visual-studio-express-vs.aspx)
    and follow the links to download the latest version of **Visual Studio Community**,
    previously known as **Visual Studio Express**. Visual Studio Community is not
    a trial version and will not expire. You will probably see trial versions of Visual
    Studio being offered, so make sure you download the free version of Visual Studio
    Community.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 微软的 Visual Studio 是迄今为止最广泛使用的 IDE，好消息是您可以免费获取和使用它。请访问 [https://www.visualstudio.com/en-us/products/visual-studio-express-vs.aspx](https://www.visualstudio.com/en-us/products/visual-studio-express-vs.aspx)
    并按照链接下载 **Visual Studio Community** 的最新版本，之前被称为 **Visual Studio Express**。Visual
    Studio Community 不是试用版，也不会过期。您可能会看到提供的 Visual Studio 试用版，所以请确保您下载的是免费版本的 Visual
    Studio Community。
- en: Visual Studio offers several languages to program in. We will be using C++ throughout
    this book. When you first use Visual Studio, you may be asked which language you
    want to set up the development environment for. I recommend that you choose the
    C++ settings. However, you will still be able to use Visual Studio for C++ even
    if you choose a different default programming language.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 提供了多种编程语言。本书我们将使用 C++。当您第一次使用 Visual Studio 时，您可能被要求选择您想要为哪个语言设置开发环境。我建议您选择
    C++ 设置。然而，即使您选择了不同的默认编程语言，您仍然可以使用 Visual Studio 进行 C++ 编程。
- en: Visual Studio Community 2013 was the current version at the time this book was
    written. All of the screenshots you see in the book are from that version. It
    is quite likely that a later version of Visual Studio will have come out by the
    time you get your hands on this book. The general functionality stays the same
    from one version to another, so this should not be a problem. If you are using
    a different version of Visual Studio, then the exact location of some commands
    may not be the same as in the screenshots in this book.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当本书编写时，Visual Studio Community 2013 是当前版本。书中所有截图均来自该版本。在您拿到这本书时，很可能已经推出了 Visual
    Studio 的后续版本。从一种版本到另一种版本，一般功能保持不变，所以这不应该成问题。如果您使用的是 Visual Studio 的不同版本，那么一些命令的确切位置可能不会与本书中的截图相同。
- en: Tip
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Microsoft differentiates between programs written for Windows Desktop and those
    written for Windows Universal. Ensure that you download Visual Studio Community
    Express for Desktop.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 微软区分了为 Windows 桌面编写的程序和为 Windows 全平台编写的程序。请确保您下载适用于桌面的 Visual Studio Community
    Express。
- en: 'When you first start Visual Studio, you will be asked for a few options, so
    I thought I''d cover them here:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当您第一次启动 Visual Studio 时，您将需要选择一些选项，因此我想在这里介绍一下：
- en: If you are asked which programming language you would like to set up as your
    default development environment, it really doesn't matter which language you choose.
    If you think you will be using C++ a lot, then pick C++. If you pick another language
    as your default you will still be able to code in C++.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您被问及希望将哪种编程语言设置为默认的开发环境，实际上您选择哪种语言都无关紧要。如果您认为您会大量使用C++，那么请选择C++。如果您选择其他语言作为默认语言，您仍然可以使用C++进行编码。
- en: You will be asked to sign into your Microsoft account. If you have ever used
    MSN, Hotmail, or Windows Messenger, then you already have a Microsoft account.
    At any rate, if you don't have a Microsoft account you can use your own e-mail
    address to create one, and it doesn't cost anything.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您将被要求登录到您的Microsoft账户。如果您曾经使用过MSN、Hotmail或Windows Messenger，那么您已经有一个Microsoft账户。无论如何，如果您没有Microsoft账户，您可以使用自己的电子邮件地址创建一个，而且这不会花费您任何费用。
- en: You may be asked to set up a developer license for Windows. Just click **I Agree**
    and it will be done. Again, no charge!
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可能需要为Windows设置一个开发者许可证。只需点击**我同意**，它就会完成。再次强调，无需付费！
- en: A quick look at Visual Studio
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速查看Visual Studio
- en: 'As Visual Studio can do so many things, it may be a bit intimidating the first
    time you use it. I have been using Visual Studio for over 20 years and there are
    still parts of it that I have never needed! Let''s take a look at the key components,
    in the following screenshot, that you will use every day:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Visual Studio可以做很多事情，因此第一次使用时可能会有些令人畏惧。我已经使用Visual Studio超过20年了，仍然有一些部分我从未使用过！让我们看看以下截图中的关键组件，这些组件您将每天都会用到：
- en: '![A quick look at Visual Studio](img/8199OS_01_01.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![快速查看Visual Studio](img/8199OS_01_01.jpg)'
- en: Start screen
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启动屏幕
- en: The start screen, as shown in the preceding screenshot, allows you to quickly
    start a new project or open an existing project. The most recent projects that
    you have worked with can be quickly accessed from the list of recent projects.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 启动屏幕，如前一张截图所示，允许您快速启动新项目或打开现有项目。您最近工作的项目可以从最近项目列表中快速访问。
- en: The Solution Explorer panel
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解决方案资源管理器面板
- en: The **Solution Explorer** panel allows you to navigate and work with all of
    the code and other resources in your project. If you do not see the **Solution
    Explorer** window on your screen, click **View** | **Solution Explorer**.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案资源管理器**面板允许您导航并处理项目中所有的代码和其他资源。如果您在屏幕上没有看到**解决方案资源管理器**窗口，请点击**视图** |
    **解决方案资源管理器**。'
- en: '![The Solution Explorer panel](img/8199OS_01_02.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![解决方案资源管理器面板](img/8199OS_01_02.jpg)'
- en: 'From this window you can:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个窗口中，您可以：
- en: Double-click on any item to open it
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 双击任何项目以打开它
- en: Right-click to add existing items to the project
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 右键单击以将现有项目添加到项目中
- en: Right-click to add new items to the project
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 右键单击以将新项目添加到项目中
- en: Create folders to organize your code
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建文件夹以组织您的代码
- en: The Standard Toolbar panel
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 标准工具栏面板
- en: 'The **Standard Toolbar** panel contains buttons for the most common tasks:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**标准工具栏**面板包含执行最常见任务的按钮：'
- en: Save the current file
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保存当前文件
- en: Save all modified files
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保存所有已修改的文件
- en: Undo and Redo
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 撤销和重做
- en: Run the program
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行程序
- en: Tip
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: There are basically two ways to run your program. You can run the program with
    or without debugging. Debugging mode allows you to set checkpoints that stop the
    program and let you view the state of variables, and perform other operations
    while the code is running. If you run the program without debugging, you will
    not be able to do these things.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 运行您的程序基本上有两种方式。您可以选择带或不带调试来运行程序。调试模式允许您设置检查点，使程序停止并让您查看变量的状态，以及在代码运行时执行其他操作。如果您不带调试运行程序，您将无法执行这些操作。
- en: '![The Standard Toolbar panel](img/8199OS_01_03.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![标准工具栏面板](img/8199OS_01_03.jpg)'
- en: The code window
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 代码窗口
- en: 'The center of the IDE is dominated by the code window. This is where you type
    and edit your code. You can have several code windows open at once. Each code
    window will add a tab across the top, allowing you to switch from one piece of
    code to another with a single click:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: IDE的中心是代码窗口。这是您输入和编辑代码的地方。您可以同时打开多个代码窗口。每个代码窗口都会在顶部添加一个标签，让您可以通过单次点击在各个代码片段之间切换：
- en: '![The code window](img/8199OS_01_04.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![代码窗口](img/8199OS_01_04.jpg)'
- en: You will notice that the text is color-coded. This allows you to easily see
    different types of code. For example, the comments in the code in the preceding
    screenshot are in green, while the C++ objects are in blue. You can also zoom
    in and out of the code by holding down the *Ctrl* button and using the scroll
    wheel on the mouse.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到文本是彩色的。这允许你轻松地看到不同类型的代码。例如，前一个屏幕截图中的代码注释是绿色的，而C++对象是蓝色的。你还可以通过按住*Ctrl*按钮并使用鼠标滚轮来放大和缩小代码。
- en: The output window
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 输出窗口
- en: The output window is typically at the bottom of the IDE. This window is where
    you will look at to see the status of the current run, and where you will find
    errors when you try to compile run your program.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 输出窗口通常位于IDE的底部。这个窗口是你查看当前运行状态的地方，也是你在尝试编译运行程序时查找错误的地方。
- en: 'If you see an error in the output window, you can usually double-click on it,
    and Visual Studio will take you to the line in code that caused the error:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到输出窗口中的错误，通常可以双击它，Visual Studio会带你到导致错误的代码行：
- en: '![The output window](img/8199OS_01_05.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![输出窗口](img/8199OS_01_05.jpg)'
- en: Starting your project
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始你的项目
- en: It's time to stop reading and start doing! We are going to use Visual Studio
    to start our game project.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候停止阅读并开始动手了！我们将使用Visual Studio来开始我们的游戏项目。
- en: Open Visual Studio and click the **New Project** link in the start window.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio，并在启动窗口中点击**新建项目**链接。
- en: Navigate to the left-hand side panel and select **Win32** under the **Visual
    C++** branch of **Templates**.![Starting your project](img/8199OS_01_06.jpg)
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到左侧面板，并在**模板**下的**Visual C++**分支中选择**Win32**。![开始你的项目](img/8199OS_01_06.jpg)
- en: Select **Win32 Project** in the center area.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在中间区域选择**Win32项目**。
- en: Give the project a name. The first game we will be working on is a 2D robot
    racing game that we'll call `RoboRacer2D`.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给项目起一个名字。我们将要工作的第一个游戏是一个名为`RoboRacer2D`的2D机器人赛车游戏。
- en: Choose a folder location to store the project, or just leave the default location.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个文件夹位置来存储项目，或者直接保留默认位置。
- en: The solution name is almost always the same as the project name, so leave that
    as it is.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解决方案名称几乎总是与项目名称相同，所以保持原样。
- en: Leave **Create directory for solution** checked.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持**为解决方案创建目录**复选框选中。
- en: Click **OK**.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**确定**。
- en: On the next screen click **Finish**.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一屏幕上点击**完成**。
- en: We need to tell Visual Studio how to work with Unicode characters. Right-click
    on the project name in the Solution Explorer panel and choose Properties. Then
    select General. Change the Character Set property to Not Set.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要告诉Visual Studio如何处理Unicode字符。在解决方案资源管理器面板中右键单击项目名称，并选择属性。然后选择常规。将字符集属性更改为未设置。
- en: Congratulations! You have now created your Windows application and set up your
    development environment. It's time to move on to creating the framework for your
    game.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你现在已经创建了一个Windows应用程序并设置了你的开发环境。现在是时候继续创建你的游戏框架了。
- en: The game loop
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏循环
- en: The game loop is the primary mechanism that moves the game forward in time.
    Before we learn how to create this important component, let's briefly take a look
    at the structure of most games.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏循环是推动游戏时间前进的主要机制。在我们学习如何创建这个重要组件之前，让我们简要地看看大多数游戏的结构。
- en: The game structure
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 游戏结构
- en: 'There are three phases to most games: the initialization phase, the game loop,
    and the shutdown phase. The core of any game is the game loop.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数游戏有三个阶段：初始化阶段、游戏循环和关闭阶段。任何游戏的内核都是游戏循环。
- en: '![The game structure](img/8199OS_01_07.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![游戏结构](img/8199OS_01_07.jpg)'
- en: The game loop is a sequence of processes that run continuously as long as the
    game is running. The three main processes that occur in the game loop are input,
    update, and render.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏循环是一系列在游戏运行期间持续运行的进程。游戏循环中发生的三个主要进程是输入、更新和渲染。
- en: The input process is how the player controls the game. This could be any combination
    of keyboard, mouse, or control pad. Newer technologies allow the game to be controlled
    via a sensing device that detects gestures, while mobile devices detect touch,
    acceleration, and even GPS.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 输入过程是玩家控制游戏的方式。这可以是键盘、鼠标或控制板的任何组合。新技术允许游戏通过检测手势的感应设备来控制，而移动设备可以检测触摸、加速度甚至GPS。
- en: 'The update process encompasses all of the tasks required to update the game:
    calculating where characters and game objects have moved, determining whether
    items in the game have collided, and applying physics and other forces in the
    game.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 更新过程包括更新游戏所需的所有任务：计算角色和游戏对象的位置变化，确定游戏中的物品是否发生碰撞，以及应用游戏中的物理和其他力。
- en: Once the preceding calculations have been completed, then it is time to draw
    results. This is known as the **render process**. OpenGL is the library of code
    that handles the rendering for your game.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成前面的计算后，接下来就是绘制结果的时候了。这被称为**渲染过程**。OpenGL是处理你游戏渲染的代码库。
- en: Tip
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Many people think that OpenGL is a **game engine**. This is not accurate. OpenGL—the
    open graphics language—is a **rendering library**. As you can see, rendering is
    only one process involved in the execution of a game.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 许多人认为OpenGL是一个**游戏引擎**。这并不准确。OpenGL——开放的图形语言——是一个**渲染库**。正如你所见，渲染只是游戏执行过程中涉及的一个过程。
- en: Let's take a closer look at each stage of the game so that we can get a better
    idea of how OpenGL fits in.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地看看游戏的每个阶段，以便我们更好地了解OpenGL是如何融入其中的。
- en: Initialization
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 初始化
- en: There are certain parts of the game that must be set up only once before the
    game can run. This typically includes initializing variables and loading resources.
    There are certain parts of OpenGL that must be initialized during this phase as
    well.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏中有些部分必须在游戏运行之前只设置一次。这通常包括初始化变量和加载资源。OpenGL的一些部分也必须在这一阶段进行初始化。
- en: The game loop
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 游戏循环
- en: Once the initialization is complete, the game loop takes over. The game loop
    is literally an endless loop that cycles until something tells it to stop. This
    is often the player telling the game to end.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化完成后，游戏循环接管。游戏循环实际上是一个无限循环，它会一直循环，直到有东西告诉它停止。这通常是由玩家告诉游戏结束。
- en: In order to create the illusion of movement, the render phase must occur several
    times a second. In general, games strive to render at least 30 frames to the screen
    every second, and 60 frames per second (**fps**) is even better.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创造运动的错觉，渲染阶段必须每秒发生几次。一般来说，游戏努力每秒至少渲染30帧到屏幕上，每秒60帧（**fps**）则更好。
- en: Tip
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: It turns out that 24 fps is the threshold at which the human eye begins to see
    continuous motion instead of individual frames. This is why we want the slowest
    speed for our game to be 30 fps.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是，24 fps是人的眼睛开始看到连续运动而不是单独帧的阈值。这就是为什么我们希望我们的游戏最慢的速度是30 fps。
- en: Shutdown
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关闭
- en: When the game does end, it isn't enough to just exit the program. Resources
    that are taking up precious computer memory must be properly released to the reclaim
    that memory. For example, if you have allocated memory for an image, you will
    want to release that memory by the end of the game. OpenGL has to be properly
    shut down so that it doesn't continue to control the **Graphics Processing Unit**
    (**GPU**). The final phase of the game is to return control to the device so that
    it will continue working properly in its normal, nongaming mode.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当游戏结束时，仅仅退出程序是不够的。占用宝贵计算机内存的资源必须被正确释放以回收内存。例如，如果你为图像分配了内存，你希望在游戏结束时释放该内存。OpenGL必须被正确关闭，以免继续控制**图形处理单元**（**GPU**）。游戏的最后阶段是将控制权交还给设备，以便它在正常、非游戏模式下继续正常工作。
- en: Creating the game structure
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建游戏结构
- en: Now that we created our `RoboRacer2D` project in Visual Studio project, let's
    learn how to modify this code to create our game structure. Start Visual Studio
    and open the project we just created.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在Visual Studio项目中创建了`RoboRacer2D`项目，让我们学习如何修改此代码以创建我们的游戏结构。启动Visual Studio并打开我们刚刚创建的项目。
- en: You should now see a window with code in it. The name of the code file should
    be `RoboRacer2D.cpp`. If you don't see this code window, then find **Solution
    Explorer**, navigate to `RoboRacer2D.cpp`, and open it up.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该看到一个包含代码的窗口。代码文件的名称应该是`RoboRacer2D.cpp`。如果你看不到这个代码窗口，那么找到**解决方案资源管理器**，导航到`RoboRacer2D.cpp`，并打开它。
- en: I'll be the first person to admit that the Windows C++ code is both ugly and
    intimidating! There is a lot of code created from you by Visual Studio when you
    choose the Windows desktop template to create your project. In fact, you can run
    this code right now by clicking **DEBUG** from the menu bar and then choosing
    **Start Debugging**. You can also press the *F5* key.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我会第一个承认Windows C++代码既丑陋又令人畏惧！当您选择Windows桌面模板创建项目时，Visual Studio会为您创建大量的代码。实际上，您现在就可以通过从菜单栏中选择**调试**然后选择**开始调试**来运行此代码。您也可以按*F5*键。
- en: Go ahead and do it!
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，就按这样做吧！
- en: '![Creating the game structure](img/8199OS_01_08.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![创建游戏结构](img/8199OS_01_08.jpg)'
- en: You will see a window telling you that the project is out of date. This simply
    means that Visual Studio needs to process your code and turn it into an executable—a
    process called building the project. For the computer science majors out there,
    this is where your code is compiled, linked, and then executed by the operating
    system.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到一个窗口告诉您项目已过时。这仅仅意味着Visual Studio需要处理您的代码并将其转换为可执行文件——这个过程称为构建项目。对于计算机科学专业的学生来说，这是您的代码被编译、链接并由操作系统执行的地方。
- en: Click **Yes** to continue.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**是**继续。
- en: '![Creating the game structure](img/8199OS_01_09.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![创建游戏结构](img/8199OS_01_09.jpg)'
- en: 'Congratulations! You have now created and run your first program in Visual
    Studio. It may not look like much, but there is a lot going on here:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您现在已经在Visual Studio中创建并运行了您的第一个程序。它可能看起来不多，但这里有很多事情在进行中：
- en: A fully sizeable and moveable window
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个可全尺寸调整和移动的窗口
- en: A working menu system with **File** and **Help** choices
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个带有**文件**和**帮助**选项的工作菜单系统
- en: A title bar with **RoboRacer2D**
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有**RoboRacer2D**标题栏
- en: Working minimize, maximize, and close buttons
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作中的最小化、最大化和关闭按钮
- en: Keep in mind that you haven't written a single line of code yet!
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，您还没有编写任何一行代码！
- en: Now that you see it, feel free to use the close button to close the window and
    return to Visual Studio.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经看到了，请随意使用关闭按钮关闭窗口并返回Visual Studio。
- en: '*But wait, this doesn''t look like a game!*'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '*但是等等，这看起来不像一个游戏！*'
- en: If you are thinking the RoboRacer2D program doesn't look much like a game, you
    are correct! In fact, to make a game we typically strip away about everything
    that you now see! However, for this demonstration, we are going to keep the window
    just like it is, and worry more about the code than the appearance.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您认为RoboRacer2D程序看起来不像一个游戏，您是对的！实际上，为了制作一个游戏，我们通常会移除现在看到的大部分内容。然而，在这个演示中，我们将保持窗口不变，更多地关注代码而不是外观。
- en: Port of access
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 端口访问
- en: 'Every program has a starting point, and for a Windows program the entry point
    is the `_tWinMain` function. Look for the following line of code:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 每个程序都有一个起点，对于Windows程序来说，入口点是`tWinMain`函数。寻找以下代码行：
- en: '[PRE0]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `_wWinMain` function will start running and will set up everything required
    to run a Windows desktop program. It is beyond the scope of this book to go into
    everything that is going on here. We will just take it for granted that the code
    we are looking at sets things up to run in Windows, and we will focus on the things
    that we need to modify to make a game.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`_wWinMain`函数将开始运行，并设置运行Windows桌面程序所需的一切。本书的范围不包括这里所发生的一切。我们只是假设我们正在查看的代码设置了在Windows中运行的环境，我们将专注于我们需要修改以制作游戏的部分。'
- en: The Windows message loop
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Windows消息循环
- en: 'It turns out that `_wWinMain` already sets up a loop. In a similar manner to
    games, Windows programs actually run in an endless loop, until they receive some
    kind of event that tells them to stop. Here''s the code:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 结果表明`_wWinMain`已经设置了一个循环。与游戏类似，Windows程序实际上在一个无限循环中运行，直到它们收到某种事件告诉它们停止。以下是代码：
- en: '[PRE1]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you can see, these lines of code set up a while loop that will continue to
    run until the result of the `GetMessage` call is `false`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这些代码行设置了一个while循环，该循环将一直运行，直到`GetMessage`调用的结果为`false`。
- en: Again, we won't worry about the exact details, but suffice to say that `GetMessage`
    constantly checks for messages, or events, that are sent by Windows. One particular
    message is the quit event, which will return a result of false, ending the `while`
    loop, exiting the `_tWinMain` function, and ending the program.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们不会担心具体的细节，但可以说`GetMessage`会不断检查由Windows发送的消息或事件。一条特定的消息是退出事件，它将返回一个结果为false，结束`while`循环，退出`tWinMain`函数，并结束程序。
- en: 'Our goal is to modify the Windows message loop and turn this block of code
    into a game loop:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是修改Windows消息循环，并将此代码块转换为游戏循环：
- en: '[PRE2]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Study the preceding code. You will see that we have added three new functions:
    `StartGame`, `GameLoop`, and `EndGame`.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 研究前面的代码。你会看到我们添加了三个新的函数：`StartGame`、`GameLoop` 和 `EndGame`。
- en: '`StartGame` comes before the Windows message loop, which means that everything
    in `StartGame` will run once before Windows enters its loop. We will put all of
    the game initialization code in the `StartGame` function.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`StartGame` 在 Windows 消息循环之前，这意味着 `StartGame` 中的所有内容都会在 Windows 进入其循环之前运行一次。我们将所有的游戏初始化代码放在
    `StartGame` 函数中。'
- en: '`EndGame` comes after the Windows message loop. This means that the code in
    `EndGame` will only execute one time after the Windows message loop has exited.
    This is the perfect place for us to release resources and shut the game down.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EndGame` 在 Windows 消息循环之后。这意味着 `EndGame` 中的代码只有在 Windows 消息循环退出后才会执行一次。这是我们释放资源并关闭游戏的完美地方。'
- en: '`GameLoop` is interleaved in the Windows message loop. Basically, the code
    is saying, "*Keep running until you receive a Windows message to quit. While you
    are running, check to see if Windows has passed any events that need to be handled.
    If there are no messages to handle, then run our game.*"'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GameLoop` 与 Windows 消息循环交织在一起。基本上，代码是在说，“*继续运行，直到你收到退出 Windows 消息。当你运行时，检查
    Windows 是否传递了需要处理的事件。如果没有要处理的消息，那么运行我们的游戏。*”'
- en: Tip
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Order is important. For example, you have to declare these functions before
    the `wWinMain` function. This is because they are called by `wWinMain`, so they
    have to exist before `tWinMain` uses them. In general, a function has to be declared
    before the code that uses it.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 顺序很重要。例如，你必须在这些函数在 `wWinMain` 函数之前声明。这是因为它们会被 `wWinMain` 调用，所以它们必须在 `tWinMain`
    使用它们之前存在。一般来说，一个函数必须在使用它的代码之前声明。
- en: 'In order for these new functions to be valid, go to the line just before the
    `_tWinMain` and enter some stubs for these three functions:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这些新函数有效，请转到 `_tWinMain` 之前的行，并为这三个函数输入一些存根：
- en: '[PRE3]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The idea here is to help you see how easy it is to convert the standard Windows
    message loop into a game loop.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的想法是帮助你看到将标准的 Windows 消息循环转换为游戏循环是多么容易。
- en: Introducing OpenGL
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 OpenGL
- en: 'We have spent a lot of time so far talking about game loops and Visual Studio.
    We are finally going to discuss the main topic of this book: **OpenGL**!'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经花费了很多时间来谈论游戏循环和 Visual Studio。我们终于要讨论这本书的主要内容：**OpenGL**！
- en: What is OpenGL?
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是 OpenGL？
- en: OpenGL makes it possible to render sophisticated 2D and 3D graphics on your
    computer screen. In fact, OpenGL is also the technology behind most mobile devices
    and tablet devices.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: OpenGL 使得在计算机屏幕上渲染复杂的 2D 和 3D 图形成为可能。实际上，OpenGL 也是大多数移动设备和平板电脑背后的技术。
- en: 'OpenGL works in conjunction with your device''s graphics device to draw graphics
    on the screen. Most modern computing devices have two processors: the **Central
    Processing Unit** (**CPU**) and the **Graphics Processing Unit** (**GPU**).'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: OpenGL 与你的设备的图形设备协同工作，在屏幕上绘制图形。大多数现代计算设备有两个处理器：**中央处理单元**（**CPU**）和**图形处理单元**（**GPU**）。
- en: Drawing modern 2D and 3D graphics is a very processor intensive task. In order
    to free the computer's main processor (the CPU) to do its job, the GPU takes on
    the task of rendering to the screen. OpenGL is a language that tells the GPU what
    to do and how to do it.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制现代 2D 和 3D 图形是一个非常耗处理器的任务。为了释放计算机的主处理器（CPU）来完成其工作，GPU 承担了将渲染到屏幕上的任务。OpenGL
    是一种语言，告诉 GPU 要做什么以及如何做。
- en: Tip
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Technically, OpenGL is an API, or application programming interface. Another
    way to understand this is that OpenGL is a library of code that you can access
    once you have included the proper headers in your code. There are different versions
    of OpenGL. This book uses OpenGL 1.1\. Although this is the very first version
    of OpenGL, it is included in all versions of Windows and provides the building
    blocks for all future versions.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 技术上，OpenGL 是一个 API，或者应用程序编程接口。另一种理解方式是，OpenGL 是一个代码库，一旦你在代码中包含了适当的头文件，你就可以访问它。OpenGL
    有不同的版本。这本书使用的是 OpenGL 1.1。尽管这是 OpenGL 的第一个版本，但它包含在所有版本的 Windows 中，并为所有未来的版本提供了构建块。
- en: The other GL
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另一个 GL
- en: By the way, you have probably heard of the "other" graphics engine—Microsoft's
    DirectX. Similar to OpenGL, DirectX allows programmers to talk to the GPU. A lot
    of people want to know the differences between OpenGL and DirectX, and which is
    the best choice.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，你可能听说过“其他”图形引擎——微软的 DirectX。与 OpenGL 类似，DirectX 允许程序员与 GPU 通信。很多人想知道 OpenGL
    和 DirectX 之间的区别，以及哪个是最好的选择。
- en: Although there are certainly going to be fans and defenders of both technologies,
    the only real difference between DirectX and OpenGL is the specific way that you
    code them. Both technologies are about the same when it comes to features and
    abilities.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然肯定会有DirectX和OpenGL的支持者和捍卫者，但DirectX和OpenGL之间唯一的真正区别是你编写它们的具体方式。在功能和能力方面，这两种技术大致相同。
- en: There is one advantage that OpenGL has over DirectX. DirectX only works on Microsoft
    technologies, while OpenGL works on Microsoft technologies and many others, including
    most modern cell phones, and the Apple Mac line of computers.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: OpenGL相对于DirectX有一个优势。DirectX只适用于Microsoft技术，而OpenGL适用于Microsoft技术以及许多其他技术，包括大多数现代手机和苹果Mac电脑系列。
- en: Downloading OpenGL
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载OpenGL
- en: I remember when I was first learning OpenGL. I searched in vain, looking for
    the link to download the OpenGL SDK. It turns out that you don't have to download
    the OpenGL SDK because it is already installed when you install Visual Studio.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我记得我刚开始学习OpenGL的时候。我徒劳地搜索，寻找下载OpenGL SDK的链接。结果发现，你不必下载OpenGL SDK，因为它在安装Visual
    Studio时就已经安装了。
- en: You do want to make sure that you have the latest OpenGL driver for your video
    card. To do that, go to [http://www.opengl.org/wiki/Getting_started#Downloading_OpenGL](http://www.opengl.org/wiki/Getting_started#Downloading_OpenGL)
    and follow the appropriate link.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 你确实想确保你有最新的显卡OpenGL驱动程序。为此，请访问[http://www.opengl.org/wiki/Getting_started#Downloading_OpenGL](http://www.opengl.org/wiki/Getting_started#Downloading_OpenGL)并遵循适当的链接。
- en: Adding OpenGL to the project
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将OpenGL添加到项目
- en: In order to use OpenGL in our program, we will need to add some code. Open the
    `RoboRacer2D` project that we have been working on, and let's do this!
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在我们的程序中使用OpenGL，我们需要添加一些代码。打开我们一直在工作的`RoboRacer2D`项目，让我们来做这件事！
- en: Linking to the OpenGL library
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 链接到OpenGL库
- en: Everything that you need to use OpenGL is found in the `OpenGL32.dll` lib file.
    It's up to you to tell Visual Studio that you want to use the OpenGL library in
    your project.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要使用OpenGL的所有内容都在`OpenGL32.dll`库文件中。取决于你告诉Visual Studio你想要在项目中使用OpenGL库。
- en: Right-click on **Project** | **RoboRacer2D properties**.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击**项目** | **RoboRacer2D属性**。
- en: Tip
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: By the way, Visual Studio first creates a **solution**, and then puts a **project**
    in the solution. The solution is the top entry in the **Solution Explorer** hierarchy,
    and the project is the first child. In this case, make sure you right-click on
    the project, not the solution.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一下，Visual Studio首先创建一个**解决方案**，然后在解决方案中添加一个**项目**。解决方案是**解决方案资源管理器**层次结构中的顶级条目，项目是第一个子项。在这种情况下，请确保您右键单击项目，而不是解决方案。
- en: '![Linking to the OpenGL library](img/8199OS_01_10.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![链接到OpenGL库](img/8199OS_01_10.jpg)'
- en: For the **Configuration** drop-down box, make sure you select **All Configurations**.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**配置**下拉框，请确保你选择**所有配置**。
- en: Open the **Configuration Properties** branch, then the **Linker** branch.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**配置属性**分支，然后是**链接器**分支。
- en: Select the **Input** option.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**输入**选项。
- en: Click the dropdown for **Additional Dependencies** and choose **<Edit…>**.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**附加依赖项**下拉菜单并选择**<编辑…>**。
- en: Enter `OpenGL32.lib` into the dialog window and click **OK**.![Linking to the
    OpenGL library](img/8199OS_01_11.jpg)
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在对话框窗口中输入`OpenGL32.lib`并点击**确定**。![链接到OpenGL库](img/8199OS_01_11.jpg)
- en: Close the **Property Pages** window.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭**属性页**窗口。
- en: Even if you are writing a 64 bit application, you will use the OpenGL 32 bit
    library.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你在编写64位应用程序，你也会使用OpenGL 32位库。
- en: 'Next, we need to tell Visual Studio that you want to include the OpenGL headers
    in your program. If you take a look at the top of your code, you will see several
    headers already being loaded:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要告诉Visual Studio你想要在程序中包含OpenGL头文件。如果你查看代码的顶部，你会看到已经加载了几个头文件：
- en: '[PRE4]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Just below these lines, add the following:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些行下面，添加以下内容：
- en: '[PRE5]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Tip
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: GL.h is the main header for the OpenGL library. `GLU.h` stands for GL Utility
    and is an additional library of features that make OpenGL a little easier to use.
    These headers correspond to the `OpenGL32.lib` and `Glu32.lib` libraries that
    we added to the project.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: GL.h是OpenGL库的主要头文件。`GLU.h`代表GL Utility，是一个额外的功能库，使OpenGL更容易使用。这些头文件对应于我们添加到项目的`OpenGL32.lib`和`Glu32.lib`库。
- en: Congratulations! You have set up the development environment to use OpenGL and
    you are now ready to program your first game.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经设置了使用OpenGL的开发环境，你现在可以开始编写你的第一个游戏了。
- en: Summary
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We covered a lot of ground in this chapter. We learned how to set up your development
    environment by downloading and installing Visual Studio. Next, we created a C++
    Windows Desktop application.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们覆盖了大量的内容。我们学习了如何通过下载和安装Visual Studio来设置你的开发环境。接下来，我们创建了一个C++ Windows桌面应用程序。
- en: We discussed the structure of most games and the importance of the game loop.
    Recall that an average game should run at 30 fps, while top-end games shoot for
    60 fps to provide smooth animations.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了大多数游戏的结构以及游戏循环的重要性。回想一下，一款普通游戏应该以30 fps的速度运行，而高端游戏则追求60 fps以提供流畅的动画。
- en: Finally, we learned about OpenGL and how to initialize OpenGL in your project.
    Remember, OpenGL is the graphics engine that will be responsible for drawing every
    image and piece of text to your screen using the power of your GPU.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们学习了OpenGL以及如何在项目中初始化OpenGL。记住，OpenGL是负责利用GPU的强大功能将每个图像和文本绘制到屏幕上的图形引擎。
- en: After all this work, there still isn't a lot to see. In the next chapter, we
    will go into all of the details of how to render your first image to the screen.
    Believe it or not, getting your development environment properly set up means
    you have already accomplished a great deal toward creating your first game using
    OpenGL.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成所有这些工作之后，仍然没有太多可以展示的内容。在下一章中，我们将详细介绍如何将第一张图像渲染到屏幕上。信不信由你，正确设置你的开发环境意味着你已经为使用OpenGL创建你的第一款游戏迈出了重要的一步。
