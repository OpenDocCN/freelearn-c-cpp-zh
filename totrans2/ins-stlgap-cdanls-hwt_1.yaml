- en: Chapter 1. Instant StyleCop Code Analysis How-to
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to *Instant StyleCop Code Analysis How-to*. If we look at how we begin
    development of medium and big projects, one of the first things we do is to edict
    base principles and among them, we define coding conventions. These rules, stating
    how our code must look like, are here in order to improve readability and maintainability
    for all developers of the team. The choices made there are fairly arbitrary and
    depends on the background and the likes and dislikes of the person (or the development
    team) who laid them down. After the project begins, it however takes a lot of
    time and code reviews to follow them.
  prefs: []
  type: TYPE_NORMAL
- en: This is where **StyleCop** comes in. In this book we will take a look at some
    recipes that range from a simple to advanced level, which will tell you all about
    StyleCop and how it is used to analyze code.
  prefs: []
  type: TYPE_NORMAL
- en: Installing StyleCop with Visual Studio (Simple)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will describe the installation process of StyleCop, learn
    how to configure the rules to be executed on a project, and how to launch an analysis
    from Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to follow this recipe, you will need to have at least one of the following
    Visual Studio programs installed:'
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio 2008 Professional
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Studio 2010 Professional
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Studio 2012 Professional
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Download StyleCop from its website ([http://stylecop.codeplex.com](http://stylecop.codeplex.com)).
    At the time of writing, the current version of StyleCop is 4.7 released on January
    5, 2012.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once downloaded, verify your Visual Studio is closed and launch the setup. The
    procedure is relatively straightforward. The only tricky part is to choose the
    correct components for your installation according to your use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The wizard shows an MSBuild integration step during installation as shown in
    the following screenshot. Here are two pieces of advice on the installation process:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For a developer using only Visual Studio on his computer, staying with only
    the Visual Studio integration is fine
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: However, if you need to use another IDE such as **SharpDevelop** or need StyleCop
    to be used in your CI, the best approach is to add the MSBuild integration as
    it might be required
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![How to do it...](img/9543_1_1.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Once the installation process is finished, let's see what has been added to
    your Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a project in your Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the project file in the explorer solution panel, and then click
    on **StyleCop Settings...** to open the configuration window as shown in the following
    screenshot:![How to do it...](img/9543_1_2.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have finished selecting the rules you need, you can launch your first
    analysis of code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Explorer solution, right-click on the project file to open the context
    menu, and then click on **Run StyleCop…** to launch your analysis. You can perform
    analysis on different scope by launching StyleCop in different ways:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Tools** menu, you can perform a scan for the current C# document,
    or a full scan of your solution
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In the Explorer solution, from the context menu, where you can restrict the
    scope of your analysis to the node you have currently selected
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: And from the coding panel, where you can analyze the code you're currently modifying.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: StyleCop configuration is made on a project basis, not solution. This means
    you will have to specify for each project what rules and other configuration data
    you will use.
  prefs: []
  type: TYPE_NORMAL
- en: When opening a Visual Studio solution, you can access the StyleCop configuration
    from the context menu of each project in the explorer panel. You can also find
    configurations made this way in the `Settings.Stylecop` file of the project folder.
  prefs: []
  type: TYPE_NORMAL
- en: You can also use some "master" configuration files if you want to propagate
    the same settings in multiple projects.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now let's talk about some useful options that are available in the settings
    and how to have StyleCop violations displayed in your favorite IDE if it's not
    Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Rules activation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Each section of rules may contain some additional configuration elements (they
    will be displayed in the **Detailed settings** region of the **Rules** tab.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the moment you have additional configuration elements for the following
    lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '**C#**: The detailed settings of this section are certainly the most important
    as they allow you to exclude generated and designer files from further analysis
    by StyleCop. This is helpful as designer files do not generally follow these rules
    and generates many issues.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Documentation rules**: In this section, you can change the check scope of
    the documentation. This means you can remove the rule checking for private and
    internal code and you can exclude fields from it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ordering rules**: The detailed section lets you exclude the generated code
    from the checks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Merging StyleCop settings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Earlier in this chapter, I explained that StyleCop configuration was set up
    on a project basis. While this is true for the standard behavior, the **Setting
    Files** tab allows you to change the default behavior and specify a setting file
    to merge with your current project settings as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Merging StyleCop settings](img/9543_1_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Doing so allows you to have a global configuration file and depend on it for
    rule exclusion. If you modify any settings, they will appear in bold in the **Rules**
    tabs to show they have been overwritten.
  prefs: []
  type: TYPE_NORMAL
- en: Using StyleCop with Express editions of Visual Studio and SharpDevelop
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to use StyleCop with Visual Studio Express or SharpDevelop, we have
    to enable MSBuild integration. For SharpDevelop, that is all that's required.
    SharpDevelop will then take care of missing lines in your project files.
  prefs: []
  type: TYPE_NORMAL
- en: However, for Visual Studio Express, you need to manually add StyleCop analysis
    in your project files. See the *Automating StyleCop using MSBuild (Simple)* recipe
    to know how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have set up StyleCop analysis in the projects files of your solution,
    StyleCop violations will be displayed as warnings or errors at compile time.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Is there a way to do automate StyleCop integration for all my project files?**'
  prefs: []
  type: TYPE_NORMAL
- en: Since framework 4.0 it is also possible to include the `Stylecop.targets` file
    in `C:\Program Files\MSBuild\4.0\Microsoft.CSharp.targets\ImportAfter\`.
  prefs: []
  type: TYPE_NORMAL
- en: This will allow the integration of `Stylecop.targets` by default in all the
    project builds. If the directory doesn't exist, you will have to create it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To be sure of version of the framework MSBuild uses, you can run the following
    command in your visual studio command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Understanding the Resharper add-in (Simple)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will discover the StyleCop add-in for Resharper. We will
    see its real-time analysis and how to easily fix most of the StyleCop violations.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, you will need to have:'
  prefs: []
  type: TYPE_NORMAL
- en: StyleCop 4.7 installed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resharper 7.1 installed. Evaluation version available at [http://devnet.jetbrains.com/docs/DOC-280](http://devnet.jetbrains.com/docs/DOC-280).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Studio Professional (2008, 2010, or 2012).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A sample C# project to modify.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before starting to see the benefit of Resharper with StyleCop, I have to say
    that the installation is not an easy one. First, each version of StyleCop seems
    to be tightly built on a specific version of Resharper. At the time of writing,
    StyleCop Version 4.7 is compatible with Resharper v7.1.1000.900\. You can find
    the compatibility matrix at [http://stylecop.codeplex.com/](http://stylecop.codeplex.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Then you need to install them in a specific order to be able to use them. The
    exact order to install them is to begin with Resharper, and installing StyleCop
    after. If you didn't do it this way, you will have to remove both products and
    reinstall them in the right order.
  prefs: []
  type: TYPE_NORMAL
- en: When you open Visual Studio for the first time after having installed Resharper,
    you will be asked if you want to reset the default settings of Resharper to comply
    with StyleCop rules. Click on **Yes** to do so.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now let's open our sample project. The first thing visible is a new column at
    the right-hand side of the code screen as shown in the following screenshot:![How
    to do it...](img/9543_2_1.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This column updates in real time and gives you all the errors or warnings you
    have in your document. If you go over one of the warnings displayed in the file,
    you will be able to see a description of the warning.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you click on it, a light bulb icon will appear on the left-hand side of
    your code and provide you options for dealing with the error. Generally the options
    are of three kinds for each error:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can either autofix the rule, which is also marked by a light bulb icon
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You can explicitly suppress the error by automatically adding a suppress message
    in your code. This is marked by a hammer icon
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: And you can change the level of this kind of error for Resharper. This is marked
    as a barred light bulb
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows you the options available for dealing with the
    StyleCop violation:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/9543_2_2.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'As this is quite a long task, we can fix in one go most of the violations.
    To do so, use the **Clean up** command. This command is accessible in three places:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Resharper** | **Tools** menu.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In the Explorer solution, from the context menu.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: And from the coding panel's context menu.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Whereas the auto clean up feature of Resharper helps to quickly fix a lot of
    violations, it won't fix all of them, and you will have to check the remaining
    violations manually or with the help of the fixing feature of Resharper.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to know what the autofixing capabilities of the Resharper add-in
    are, you can refer to the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://stylecop.codeplex.com/wikipage?title=ReSharper%20Fixes&referringTitle=Documentation](http://stylecop.codeplex.com/wikipage?title=ReSharper%20Fixes&referringTitle=Documentation)'
  prefs: []
  type: TYPE_NORMAL
- en: You can manage the behavior of the Resharper addin in the **Resharper** | **Option…**
    menu. You have two menus that address StyleCop. The first is the **Code Inspection**
    | **Inspection Severity** menu, which allows you to change the way each StyleCop
    violation is displayed in Resharper.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second one allows you to manage how StyleCop is running under Resharper,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/9543_2_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The most important part in this screen is the **Analysis Performance** as it
    allows you to control the resources allocated to the StyleCop analysis.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Though Resharper is certainly the most complete tool to autofix your violations
    and has the advantage of being directly supported by the StyleCop team, it's not
    the only program that is able to automatically correct violations. Other tools
    exist, and can help with StyleCop violation fixing.
  prefs: []
  type: TYPE_NORMAL
- en: Dev Express – Code Rush
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is a direct competitor of Resharper. Through plugins, it can also have
    some StyleCop compliant violation fixing features. However, at the time of writing,
    they seem to cover only a small part of StyleCop violations.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download Code Rush at the following address:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.devexpress.com/Products/Visual_Studio_Add-in/Coding_Assistance/index.xml](http://www.devexpress.com/Products/Visual_Studio_Add-in/Coding_Assistance/index.xml)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The plugin used to include StyleCop violation fixing is **CR_StyleNinja** and
    is available at the following site:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://code.google.com/p/dxcorecommunityplugins/wiki/CR_StyleNinja](http://code.google.com/p/dxcorecommunityplugins/wiki/CR_StyleNinja)'
  prefs: []
  type: TYPE_NORMAL
- en: Code Maid
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Code Maid** is a free Visual Studio add-in allowing you to reformat your
    code. While it doesn''t have a plugin for StyleCop, it allows you to reformat
    your code in order to remove layout and ordering violations.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the tool at the following address:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.codemaid.net/](http://www.codemaid.net/)'
  prefs: []
  type: TYPE_NORMAL
- en: NArrange
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Narrange** is another code beautifier, but unlike Code Maid, it''s not a
    Visual Studio add-in. All configurations are made in an XML file and you can set
    up NArrange launch from the Visual Studio external tools menu. The configuration
    has a tool to simplify its edition.'
  prefs: []
  type: TYPE_NORMAL
- en: One of the advantages of this tool is the fact it is not dependant on Visual
    Studio. You can integrate it with other developing tools such as SharpDevelop
    or MonoDevelop.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download it at the following site:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.narrange.net/](http://www.narrange.net/)'
  prefs: []
  type: TYPE_NORMAL
- en: Automating StyleCop using MSBuild (Simple)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will see how to automate our build process using MSBuild.
    We will describe which lines need to be added to the MSBuild project in order
    to enable StyleCop analysis and how to cap the number of violations encountered
    before the build breaks.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, you will need to have:'
  prefs: []
  type: TYPE_NORMAL
- en: StyleCop 4.7 installed with the option MSBuild integration checked
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A sample C# project to modify
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your project file with the text editor, and locate the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After this, add the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This enables StyleCop analysis on the project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now let''s modify the behavior of the StyleCop task to brake after 100 violations
    are encountered. Locate the first `PropertyGroup` section within the project file,
    and then add a new XML element `StyleCopMaxViolationCount` with a value of `100`.
    For example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first element we added imports the StyleCop task in the project. That's
    all that is really required to enable StyleCop analysis via MSBuild. The element
    is located just under the project root node. It can be placed anywhere as long
    as it's a direct child of the root node. As you can see, the path used to locate
    the `StyleCop.Targets` file is dependant of the version you installed on your
    computer.
  prefs: []
  type: TYPE_NORMAL
- en: In the second part, I showed you how to modify the behavior of StyleCop by adding
    properties in the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are 10 properties that can be modified that way; I will present the three
    most important to me:'
  prefs: []
  type: TYPE_NORMAL
- en: '`StyleCopAdditionalAddinPaths`: This allows you to specify other paths for
    your custom rules'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`StyleCopTreatErrorsAsWarnings`: This allow you to turn your StyleCop violations
    into build errors'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`StyleCopMaxViolationCount`: This allows you to specify the maximum number
    of violations we accept in the project before breaking the build'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here is some other information that might come in handy in certain scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up properties of the task in a more global way
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this recipe, we have seen how to modify the StyleCop task behavior on a project
    basis. However, we can set the behavior properties as environment variables on
    the machine, or within the build environment command window. Setting the properties
    in this way will cause StyleCop to behave in the same way for all projects where
    StyleCop build integration is enabled.
  prefs: []
  type: TYPE_NORMAL
- en: Excluding files from StyleCop analysis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Excluding files from analysis can be helpful in certain scenarios (such as
    in legacy projects, or when you add third-party `Mono.Options` files, for example).
    To do such a thing, you need to open your project file and change the compile
    node of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Should become:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Automating StyleCop using a command-line batch (Simple)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, I will show you how to analyze your projects with StyleCop from
    the command line. For this, I will use a tool named **StyleCopCmd**, and prepare
    it to be able to launch the last version of StyleCop.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, you need to have the following elements:'
  prefs: []
  type: TYPE_NORMAL
- en: StyleCop 4.7 with MSBuild integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: StyleCopCmd 0.2.10 (Sources); they can be downloaded from [http://sourceforge.net/projects/stylecopcmd/files/stylecopcmd/stylecopcmd-0.2.1/StyleCopCmd-src-0.2.1.0.zip/download](http://sourceforge.net/projects/stylecopcmd/files/stylecopcmd/stylecopcmd-0.2.1/StyleCopCmd-src-0.2.1.0.zip/download)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A sample C# project to analyze
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As indicated in the previous recipe, StyleCopCmd is not maintained anymore.
    However, the tool works correctly and need just a little tweaking to be run with
    the last version of StyleCop. That's what we will do in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Open the Visual Studio project of StyleCopCmd.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, we have to change the references of StyleCop libraries from 4.3 to 4.7\.
    This is done quite easily in the all projects by removing the references to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Stylecop`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Stylecop.CSharp`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Stylecop.CSharp.Rules`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Use Visual Studio to replace all `Microsoft.Stylecop` occurrences by StyleCop.
    When the project was put on CodePlex, one of the first things undertaken was the
    removal of Microsoft references.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, in the file `ReportBuilder.cs` of the StyleCopCmd project, remove the
    call to the dispose method in the method created at line 437.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify you are able to generate your binaries (right-click on **Net.SF.StyleCopCmd.Console**
    and click on **Build**)![How to do it...](img/9543_4_1.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that we have our up-to-date binaries we can use them to launch StyleCop
    directly from the command line. To do so, open a command console, and then go
    to your StyleCopCmd directory and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On the screen, the only information that appears is the total number of violations
    and the list of files scanned:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If we look at what has been generated, you will find two files in your directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`stylecop-report.xml`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stylecop-report.violations.xml`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Both displays the list of violations generated by StyleCop; the only difference
    is the XML structure of the files. The first one follows StyleCopCmd internal
    schema and transformation files whereas the second is a bare output of StyleCop.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: StyleCopCmd comes with a lot of options out of the box.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous example, I made you give a solution file. However, StyleCop
    allows four kinds of entry point:'
  prefs: []
  type: TYPE_NORMAL
- en: The solution files with `–sf` parameter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The project files with `–pf` parameter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Directory with `–d` parameter, an optional `–r` option allows you to force recursion
    on the given directory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And files with `–f` parameter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `ipf` parameter allows you to remove some of the files from StyleCop scan
    by providing a regular expression matching their filename.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the `-of` option permits you to specify the name of the output file.
    This is used with `–tf`, which is used to transform the output with the help of
    an XSLT file. It can give you any kind of human readable report.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get help, launch StyleCopCmd with the `-?` option; this will display the
    available options as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/9543_4_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: I will let you explore the remaining possibilities.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: StyleCopCmd is not the only tool available to do StyleCop analysis from the
    command line. As we will see later, the **API** of StyleCop is quite easy to understand
    and though they don't give a command line directly, lots of projects have been
    made to support this functionality.
  prefs: []
  type: TYPE_NORMAL
- en: StyleCopCmd for Mono and Linux systems
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: StyleCopCmd has been made available on Mono and Linux systems thanks to the
    work of Ian Norton ([https://github.com/inorton/StyleCopCmd](https://github.com/inorton/StyleCopCmd)).
  prefs: []
  type: TYPE_NORMAL
- en: The original version of StyleCopCmd is still linked to StyleCop 4.3, and you
    will have to upgrade the project to StyleCop 4.7 if you want to use the latest
    functionality of StyleCop.
  prefs: []
  type: TYPE_NORMAL
- en: Some problems are known and well documented. For me, the major problem I encountered
    was the registry key used by StyleCop. It forces the user to execute StyleCop
    commands with root privilege on the first start.
  prefs: []
  type: TYPE_NORMAL
- en: StyleCop CLI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**StyleCop CLI** has the same objective as StyleCopCmd. It permits an integration
    of StyleCop from the command line in a wider automation system.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Compared to StyleCopCmd, this project has less functionality; one of the most
    important missing functionality is the ability to transform the output of StyleCop
    violations. However, the tool doesn''t need any tweaking to be compatible with
    StyleCop 4.7 as it already embeds it. The tool is available at the following site:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://sourceforge.net/projects/stylecopcli/](http://sourceforge.net/projects/stylecopcli/)'
  prefs: []
  type: TYPE_NORMAL
- en: Building your own
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As I said earlier, lots of people have already started this task for you. However,
    if you''re not satisfied with the existing tools or if you just want to look at
    how to make one, a good start is the tutorial made by the team of **StyleCop+,**
    which gives you advice on how to start building such a tool. The tutorial is available
    at the following site:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://stylecopplus.codeplex.com/wikipage?title=Running%20StyleCop%20from%20Your%20Code](http://stylecopplus.codeplex.com/wikipage?title=Running%20StyleCop%20from%20Your%20Code)'
  prefs: []
  type: TYPE_NORMAL
- en: Automating StyleCop using NAnt (Intermediate)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will see how to use StyleCopCmd to automate our process using
    NAnt.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, you will need to have:'
  prefs: []
  type: TYPE_NORMAL
- en: StyleCop 4.7 installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NAnt Version 0.89 or higher
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The sample C# project used in the previous recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I will assume you have already used NAnt, and I will concentrate on describing
    the two methods to achieve integration of StyleCop task in to your NAnt script.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: StyleCopCmd comes with its own NAnt task. It is contained in the `Net.SF.StyleCopCmd.Core.dll`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'To include it in your NAnt script you will need to add a reference to this
    dll and add the following XML element in your project or target element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once our build file is ready, we can execute it in a console, and we obtain
    the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As with the command-line version, we obtain two files in the directory that
    can be exploited in a CI to show the violations results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`stylecop-report.xml`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stylecop-report.violations.xml`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the previous sample, I tried to give you the full NAnt command. In the `StyleCopCmd`
    element we can configure six attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`outputXmlFile`: This attribute is used to specify the result file we want.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`transformFile`: This attribute is used to specify the transformation (XSLT)
    file we want to apply to the result file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`recursionEnabled`: This attribute is used to enable recursion in the directories
    to check.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ignorePatterns`: This attribute contains a regular expression pattern to exclude
    filenames from scanning; in the sample I removed the `AssemblyInfo.cs` file from
    the scan.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`processorSymbols`: This attribute is used to specify a list of processor symbols
    (for example: `DEBUG`, `CODE_ANALYSIS`) to be used by StyleCop. Generally, it
    is not used in most scenarios.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`styleCopSettingsFile`: This attribute is used to specify a common settings
    file for all the files being scanned. If no common settings files exist, then
    it should be removed from the task.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The elements `solutionFiles`, `projectFiles`, `directories`, and `files` are
    used to specify the different kinds of element to analyze.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The explained method is not the only one usable to launch StyleCopCmd task.
    Another way to do it is to rely to the `exec` element of the NAnt framework. It
    allows you to use the command line executable of StyleCopCmd (or your own if you
    made it). The tool can be found at the following site:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://nant.sourceforge.net/release/0.92/help/tasks/exec.html](http://nant.sourceforge.net/release/0.92/help/tasks/exec.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Integrating StyleCop analysis results in Jenkins/Hudson (Intermediate)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will see how to build and display StyleCop errors in Jenkins/Hudson
    jobs. To do so, we will need to see how to configure the Jenkins job with a full
    analysis of the C# files in order to display the technical debt of the project.
    As we want it to diminish, we will also set in the job an automatic recording
    of the last number of violations. Finally, we will return an error if we add any
    violations when compared to the previous build.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, you will need to have:'
  prefs: []
  type: TYPE_NORMAL
- en: StyleCop 4.7 installed with the option MSBuild integration checked
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Subversion server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A working Jenkins server including:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The MSBuild plug in for Jenkins
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The Violation plug in for Jenkins
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A C# project followed in a subversion repository.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first step is to build a working build script for your project. All solutions
    have their advantages and drawbacks. I will use MSBuild in this recipe. The only
    difference here will be that I won''t separate files on a project basis but take
    the "whole" solution:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After that, we prepare the files that will be scanned by the StyleCop engine
    and we launch the StyleCop task on it. We redirect the current number of violations
    to the `StyleCopViolationCount` property.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we write the result in the `violationsCount.txt` file to find out the
    level of technical debt remaining. This is done with the `WriteLinesToFile` element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have our build script for our job, let's see how to use it with
    Jenkins. First, we have to create the Jenkins job itself. We will create a **Build
    a free-style software** project. After that, we have to set how the subversion
    repository will be accessed, as shown in the following screenshot:![How to do
    it...](img/9543_6_1.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We also set it to check for changes on the subversion repository every 15 minutes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Then, we have to launch our MSBuild script using the MSBuild task. The task
    is quite simple to configure and lets you fill in three fields:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**MSBuild Version**: You need to select one of the MSBuild versions you configured
    in Jenkins (**Jenkins** | **Manage Jenkins** | **Configure System**)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MSBuild Build File**: Here we will provide the `Stylecop.proj` file we previously
    made'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Command Line Arguments**: In our case, we don''t have any to provide, but
    it might be useful when you have multiple targets in your MSBuild file'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally we have to configure the display of StyleCop errors. This were we will
    use the violation plugin of Jenkins. It permits the display of multiple quality
    tools' results on the same graphic. In order to make it work, you have to provide
    an XML file containing the violations.![How to do it...](img/9543_6_2.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you can see in the preceding screenshot, Jenkins is again quite simple to
    configure. After providing the XML filename for StyleCop, you have to fix thresholds
    to build health and the maximum number of violations you want to display in the
    detail screen of each file in violation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the first part of the *How to do it…* section, we presented a build script.
    Let''s explain what it does:'
  prefs: []
  type: TYPE_NORMAL
- en: First, as we don't use the premade MSBuild integration, we have to declare in
    which assembly the StyleCop task is defined and how we will call it. This is achieved
    through the use of the `UsingTask` element.
  prefs: []
  type: TYPE_NORMAL
- en: Then we try to retrieve the previous count of violations and set the maximum
    number of violations that are acceptable at this stage of our project. This is
    the role of the `ReadLinesFromFile` element, which reads the content of a file.
    As we added a condition to ascertain the existence of the `violationsCount.txt`
    file, it will only be executed if the file exists. We redirect the output to the
    property `StyleCopMaxViolationCount`.
  prefs: []
  type: TYPE_NORMAL
- en: After that we have configured the Jenkins job to follow our project with StyleCop.
    We have configured some strict rules to ensure nobody will add new violations
    over time, and with the violation plugin and the way we addressed StyleCop, we
    are able to follow the technical debt of the project regarding StyleCop violations
    in the **Violations** page.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/9543_6_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A summary of each file is also present and if we click on one of them, we will
    be able to follow the violations of the file.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**How to address multiple projects with their own StyleCop settings**'
  prefs: []
  type: TYPE_NORMAL
- en: As far as I know, this is the limit of the MSBuild StyleCop task. When I need
    to address multiple projects with their own settings, I generally switch to StyleCopCmd
    using NAnt or a simple batch script and process the `stylecop-report.violations.xml`
    file with an XSLT to get the number of violations.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing file headers (Simple)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will see how to customize file headers to avoid StyleCop
    violations, and how we can use Visual Studio templates and snippets to make our
    life easier while developing.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, you will need to have:'
  prefs: []
  type: TYPE_NORMAL
- en: StyleCop 4.7 installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Studio 2008 or higher
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'StyleCop doesn''t use a lot of rules for headers. Basically, it requires the
    following things: the file name, a copyright, a company name, and a summary.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's try to make a LGPL header compliant with StyleCop. As there's no advice
    on how to integrate the Version 3.0, we will stick with the header proposed in
    Version 2.1 and which can be viewed at [http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html](http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'The only requirements of the LGPL license header is to give one line to describe
    the project, the year of the project, and the author that wrote it (I will use
    the company name as the author). So the file header should look something like
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: As you can see, I have separated the summary of the project from the main license
    part. I also enclosed in brackets the variables part of the license. Some people
    also like to add some contact information. To do so, I would add an author element
    at the end of the file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Having this license is great in itself; however it will be quite boring to
    add it manually in each file we create. In order to automate it, we will create
    a Visual Studio template. This will help you to have consistent file headers during
    your project at a minimal cost. To begin with, we will create a new library project,
    and modify `Class1.cs` by adding the previous LGPL header we made. Now, we have
    to modify the line of the summary section to comply with our project description;
    then we will modify the first copyright lines to enable visual studio to change
    text automatically. The first two lines of the copyright section have to be changed
    like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this code, we just introduce some Visual Studio template parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`safeitemname`: This is the name you provide when you add a new item to your
    project.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`year`: This is the year you added the file.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`registeredorganization`: This is the name of the company you provided during
    your Windows installation. It can be found in the registry under the `HKLM\Software\Microsoft\Windows
    NT\CurrentVersion\RegisteredOrganization` key.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have our model for the template ready, we have to export it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **File** menu and select **Export Template**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `Class1.cs` item, and then click on `Next`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the default assemblies you want to include in the template, and then click
    on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify the template name and template description to suit your taste and click
    on **Finish**.![How to do it...](img/9543_7_2.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The template is now available in the **My templates** section when you create
    a new file.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we see a way to include your own licensing section in headers.
    If your needs are not so specific that they include a particular license, you
    can have a look at this site [http://vstemplates.codeplex.com/](http://vstemplates.codeplex.com/),
    which provides some basic templates for visual studio compatible with StyleCop.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the following paragraph we will see two others topics meant to help you manage
    the headers of your code files.
  prefs: []
  type: TYPE_NORMAL
- en: Other ways to handle the headers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While templates are ideal for new files, you might need to apply your templates
    to old work. Visual Studio provides numerous ways to do so. You can at least rely
    on snippets or macro.
  prefs: []
  type: TYPE_NORMAL
- en: '**Snippets** are quite easy to create. They are in fact a simple XML file with
    a piece of code containing parameters. Let''s create it for the LGPL license:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The first part of the snippet named `Header` describes what will be displayed
    in the snippet menu; I added a `Shortcut` element to be able to use it by typing
    copyright followed by two tabulations. The two really important sections are the
    `Declarations` section and the `Code` section. As you can see the `Code` section
    is simply the code of the LGPL we created in the first part. We just replaced
    each variable name with a parameter name surrounded by `$`. The `Declarations`
    section contains a definition of all the parameters you use in your snippet code.
    Each `Literal` element contains an `Editable` attribute specifying that you can
    edit the parameter, an `ID` element that is the variable name surrounded by `$`
    in the code and a default value.
  prefs: []
  type: TYPE_NORMAL
- en: Your snippets usable in C# are generally located in `Documents\Visual Studio
    2008\Code Snippets\Visual C#\My Code Snippets`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To edit snippets more easily, you can use **Snippet Editor**. It can be downloaded
    at [http://snippeteditor.codeplex.com/](http://snippeteditor.codeplex.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Company configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: StyleCop can enforce a specific company name and a copyright text in the copyright
    section. This might be useful if you want to be sure all the files of your project
    have the same copyright information. To do so, you need to go in the StyleCop
    settings in the **Company Information** tab.
  prefs: []
  type: TYPE_NORMAL
- en: '![Company configuration](img/9543_7_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **Company Name** field corresponds to the `company` attribute of your `copyright`
    tag, whereas the **Copyright** field refers to the content of the `copyright`
    tag.
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom rules (Intermediate)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will see how to create our own custom rules for the StyleCop
    engine. We will also see how to add parameters to this rule.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, you will need to have:'
  prefs: []
  type: TYPE_NORMAL
- en: StyleCop 4.7 installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Studio 2008
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the early days of StyleCop, lots of the rules chosen by Microsoft were criticized.
    One of them was the fact that the developer couldn't add an underscore at the
    beginning of their private instance fields. In this recipe, we will take this
    rule as an example and try to implement it at the beginning of non public instance
    fields.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This rule directly conflicts with the following StyleCop rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SA1306**: Variable names and private field names must start with a lower-case
    letter'
  prefs: []
  type: TYPE_NORMAL
- en: '**SA1309**: Field names must not start with an underscore.'
  prefs: []
  type: TYPE_NORMAL
- en: You will have to disable them, if you want to use the rule.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create our custom rule, the first thing we must do is create a new Class
    Library project in Visual Studio. Then, we need to add the following reference
    to our project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Stylecop`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Stylecop.CSharp`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Both libraries are located in the installation directory of StyleCop.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The rules need to be implemented in a code analyzer. Each analyzer is composed
    of two files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A file containing the class that will discover your rules violations
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: An XML file containing the rules description
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s begin with the XML file. This file should have the same name as your
    analyzer class. Its purpose is to describe the analyzer category, describe the
    rules it contains, and prepare the parameters you might need in your rules. Let''s
    have look at the file contained in our custom rule:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The file is composed of three important elements:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `Description` element is used to define the description that will be displayed
    to the user for the category.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `Properties` section is optional, and allows you to define parameters you
    want to use in the different rules that your analyzer manages. There are four
    available kinds of properties: `BooleanProperty`, `StringProperty`, `IntegerProperty`,
    and `CollectionProperty`. They can be accessed in your code by the analyzer function
    `GetSetting(Settings, String)`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Rules` section is used to describe all the rules your analyzer will manage.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next we need to create our analyzer class, which inherits `SourceAnalyzer`
    and defines `SourceAnalizerAttribute,` specifying which parser this analyzer is
    for:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The main entry point is the `AnalyzeDocument` function; this is where the document
    will be analyzed to see if it contains any broken rules. We have two options.
    Either we use the visitor pattern provided by StyleCop, and in this case we have
    to define code walkers for the type of construction we want to check (there are
    four walkers available: `CodeWalkerElementVisitor`, `CodeWalkerStatementVisitor`,
    `CodeWalkerExpressionVisitor`, and `CodeWalkerQueryClauseVisitor`), or you can
    directly access the token list and check them directly. The second approach is
    a little trickier as upper constructions are made of one or more tokens. To use
    it in our example, we just have to replace the call to the visitor function by
    a **LINQ** request selecting the tokens in violation of your rule. For our sample,
    it will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, both ways of enforcing our rule look quite similar as we need
    the parent element of tokens to check easily if the token is a field and if it
    respects the rule. To exclude tokens of the element construct I had to add further
    restrictions based on the token class and token type.
  prefs: []
  type: TYPE_NORMAL
- en: When you report your violations you have to be careful of the name of the violation
    as any reference to an unknown rule in the XML file will just discard the violation.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we have seen how to implement a rule. However, you have to keep
    in mind that the analyzer is designed to allow you to create a set of rules, not
    just one. We have also seen that the central method of the analyzer is the `AnalyzeDocument`
    function; this is where you have to analyze the rule violations and report them.
    We also quickly see how to set some properties and use them.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: However, custom tasks is a huge topic. In addition, you can customize the StyleCop
    setting, unit test your rules, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: Customize your StyleCop settings dialog
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Defining your properties in the XML file of the analyzer doesn''t display them
    in the StyleCop settings UI. Only `BooleanProperty` can be shown directly using
    the `DisplaySettings` element as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Customize your StyleCop settings dialog](img/9543_8_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: All other properties require a custom UI. This is achieved by providing `UserControl`
    implementing `Stylecop.IPropertyControlPage`.
  prefs: []
  type: TYPE_NORMAL
- en: A really great tutorial is provided in the *Adding a Custom StyleCop Settings
    Page* section of the StyleCop SDK.
  prefs: []
  type: TYPE_NORMAL
- en: Unit testing your rules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unit testing your rules is really important and can be achieved quite easily.
    To do so, we have to rely to the integration API provided by the StyleCop team.
    In this recipe code, I have made a project to unit test my rule using NUnit 2.6.2.
  prefs: []
  type: TYPE_NORMAL
- en: As it was only one rule, I didn't abstract the StyleCop integration in a base
    class, but this should be done as all your rules will depend on the same code
    implementation.
  prefs: []
  type: TYPE_NORMAL
- en: I also use test files that I placed in the `TestFiles` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating StyleCop in your own tool (Advanced)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will see how to embed StyleCop with your own tools. As an
    example, we will create a *real-time* analysis add-in for MonoDevelop/Xamarin
    Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, you will need to have:'
  prefs: []
  type: TYPE_NORMAL
- en: StyleCop 4.7 installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Xamarin Studio 4.0 or MonoDevelop 4.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'MonoDevelop add-ins are library projects composed of two mandatory components:'
  prefs: []
  type: TYPE_NORMAL
- en: An `addin.xml` file describing the add-in, its dependencies, and the dll files
    to load at runtime and the code of your add-in.
  prefs: []
  type: TYPE_NORMAL
- en: We will create an add-in with an executable command in the tool menu to activate
    or deactivate the real-time analysis.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go to the part related to the StyleCop analysis itself; for this I will
    heavily rely on the code provided with this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We first initialize a StyleCop console in our command handler constructor (`RealTimeEgine.cs`
    line 85-87):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `StyleCopConsole` class is the main entry point of the StyleCop analysis
    system, and it is able to run the analysis and report the violations found.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We currently use default settings, but the arguments passed to the engine are
    really important if you want to embed specific settings or rule analyses.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The five constructor parameters are:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The first argument is the path to the settings you want to load. If it is set
    to null value, then it uses the default project settings files.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The second argument indicates whether we want to write results cache files or
    not.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The third argument is the path of the output file we want to write in.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The fourth argument is a list of paths to search for parser and analyzer add-ins.
    It can be set to null if no add-ins are provided.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The last argument indicates whether we want to load add-ins from the default
    path where the core binary is located.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: After the initialization of our console, we indicate callbacks for its output
    and the violations encountered.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now let''s see the execution code itself (`RealTimeEgine.cs` line 166-180):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To execute the analysis, we have to define a `Configuration` object, this is
    used to allow StyleCop to analyze preprocessor regions (for example, if you want
    to analyze regions marked by a `#if DEBUG`, you should add the `DEBUG` string
    in this object).
  prefs: []
  type: TYPE_NORMAL
- en: After that, we configure our project itself; it's the common unit under which
    we analyze a subset of files. It takes an ID, a base path, and a configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Then we add each source file related to the project, in our case it is a temporary
    file made of the content of the file currently being edited.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we start the console process. The callbacks we set up at the beginning
    will transmit the violations and the process message to the host.
  prefs: []
  type: TYPE_NORMAL
- en: 'The add-in is plugged to two events of the MonoDevelop apps:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ActiveDocumentChanged`: This event is called when the active document is "replaced"
    by another one.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DocumentParsed`: This event is called once the document has been correctly
    parsed by MonoDevelop. It is run after almost every modification in the text editor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Following is the sequence diagram of the add-in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/9543_9_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You should have a look at the full source code to understand how the add-in
    really works.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The current add-in is just the beginning. It currently contains some drawbacks
    (first launch of StyleCop) and can be improved in many ways. Here some of them:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a configuration screen
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The add-in is currently not configurable. While this is not really important
    if you use the default parameters of StyleCop and don't have any custom rules,
    it will be mandatory for a finished product. It could at least define a way to
    add StyleCop settings and a path to check for custom rules.
  prefs: []
  type: TYPE_NORMAL
- en: Do the work in a background thread
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the most significant drawback of the current implementation is that the
    UI freezes for one to two seconds during the first launch of the StyleCop analysis.
    To prevent this, we should put the StyleCop analysis in a separate thread to let
    the user interact with the interface during the analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Change the display of violations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I used the error pad in this example, but Xamarin Studio is similar to Resharper
    when it reports violations. So we should reposition the reporting of violations
    to the bar at the right of the text editor.
  prefs: []
  type: TYPE_NORMAL
