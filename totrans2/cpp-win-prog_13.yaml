- en: Chapter 13. The Registry, Clipboard, Standard Dialogs, and Print Preview
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第13章。注册表、剪贴板、标准对话框和打印预览
- en: 'This chapter describes the implementation of:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章描述了以下内容的实现：
- en: '**The Registry:** A Windows database holding information between application
    executions.'
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注册表**：一个Windows数据库，用于存储应用程序执行之间的信息。'
- en: '**The Clipboard:** A Windows database holding information that has been cut,
    copied, and pasted.'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**剪贴板**：一个Windows数据库，用于存储已剪切、复制和粘贴的信息。'
- en: '**The standard dialogs**: This is used for saving and opening documents, for
    colors and fonts, and for printing.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标准对话框**：用于保存和打开文档、颜色和字体以及打印。'
- en: '**Print preview:** In the `StandardDocument` class, it is possible to view
    the document on the screen as if it is being printed.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**打印预览**：在`StandardDocument`类中，可以像打印一样在屏幕上查看文档。'
- en: The registry
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注册表
- en: The static write, read, and erase methods in the `Registry` class operate on
    values of the `Integer`, `Double`, `Boolean`, and `String` types, as well as memory
    blocks in the Windows Registry.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`Registry`类中的静态写入、读取和擦除方法在`Integer`、`Double`、`Boolean`和`String`类型的值以及Windows注册表中的内存块上操作。'
- en: '**Registry.h**:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**Registry.h**：'
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Registry.cpp**:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**Registry.cpp**：'
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The global constant `RegistryFileName` holds the path to the registry domain
    of Small Windows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 全局常量`RegistryFileName`持有Small Windows注册表域的路径：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `WriteInteger`, `WriteDouble`, and `WriteBoolean` functions simply convert
    the value to a string and call `WriteString`:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`WriteInteger`、`WriteDouble`和`WriteBoolean`函数简单地将值转换为字符串并调用`WriteString`：'
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `WriteString` function calls the Win32 API function `WritePrivateProfileString`,
    which writes the string to the registry. All the C++ `String` objects need to
    be converted to zero-terminated C strings (char pointers) by `c_str`:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`WriteString`函数调用Win32 API函数`WritePrivateProfileString`，将字符串写入注册表。所有C++ `String`对象都需要通过`c_str`转换为以空字符终止的C字符串（char指针）：'
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `WriteBuffer` function calls the Win32 API function `WritePrivateProfileStruct`,
    which writes the memory block to the registry:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`WriteBuffer`函数调用Win32 API函数`WritePrivateProfileStruct`，将内存块写入注册表：'
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `ReadInteger`, `ReadDouble`, and `ReadBoolean` functions convert the default
    value to a string and call `ReadString`. The return value of `ReadString` is then
    converted and returned; `_tstoi` and `_tstof` are the generic versions of the
    standard C functions `atoi` and `atof`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`ReadInteger`、`ReadDouble`和`ReadBoolean`函数将默认值转换为字符串并调用`ReadString`。然后，将`ReadString`的返回值转换并返回；`_tstoi`和`_tstof`是标准C函数`atoi`和`atof`的通用版本：'
- en: '[PRE6]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `ReadString` function calls the Win32 API function `GetPrivateProfileString`,
    which reads the string value to `text` and returns the number of characters read.
    If the number of read characters is greater than zero, the text is converted to
    a `string` object and returned; otherwise, the default text is returned:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`ReadString`函数调用Win32 API函数`GetPrivateProfileString`，将字符串值读取到`text`中并返回读取的字符数。如果读取的字符数大于零，则将文本转换为`string`对象并返回；否则，返回默认文本：'
- en: '[PRE7]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `ReadBuffer` function calls the Win32 API function `ReadPrivateProfileStruct`,
    which reads the memory block from the registry. If it returns zero, it means that
    the reading failed and the default buffer is copied to the buffer:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`ReadBuffer`函数调用Win32 API函数`ReadPrivateProfileStruct`，从注册表中读取内存块。如果它返回零，则表示读取失败，并将默认缓冲区复制到缓冲区：'
- en: '[PRE8]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'When erasing a value from the registry, we call `WritePrivateProfileString`
    with a null pointer instead of a string, which erases the value:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当从注册表中删除值时，我们使用空指针而不是字符串调用`WritePrivateProfileString`，从而删除该值：
- en: '[PRE9]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The Clipboard class
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 剪贴板类
- en: 'The `Clipboard` class is an interface to the global Windows Clipboard, which
    makes it possible to cut, copy, and paste information between different kinds
    of applications. There are two forms of clipboard operations: ASCII and Unicode
    text and generic (application-specific) information.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`Clipboard`类是对全局Windows剪贴板的接口，这使得在不同类型的应用程序之间剪切、复制和粘贴信息成为可能。剪贴板操作有两种形式：ASCII和Unicode文本以及通用（应用程序特定）信息。'
- en: '**Clipboard.h**:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**Clipboard.h**：'
- en: '[PRE10]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The formats for ASCII and Unicode lines are predefined.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: ASCII和Unicode行的格式是预定义的。
- en: '[PRE11]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`Open` and `Close` open and close the clipboard. They return `true` if they
    succeed. `Clear` clears the clipboard when it has been opened. More specifically,
    it removes any potential information with the specified format and `Available`
    returns `true` if there is information with the format stored on the clipboard.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`Open`和`Close`打开和关闭剪贴板。如果成功，它们返回`true`。`Clear`在剪贴板打开时清除剪贴板。更具体地说，它移除任何潜在的信息，并且如果`Available`返回`true`，则表示剪贴板上存储了具有该格式的信息。'
- en: 'Information in different formats may be stored on the clipboard. For instance,
    when the user copies text in an application, the text may be stored on the clipboard
    as ASCII and Unicode text, as well as a more advanced application-specific format.
    `Available` returns `true` if information is stored on the clipboard with the
    specified format:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 不同格式的信息可能存储在剪贴板上。例如，当用户在应用程序中复制文本时，文本可能以ASCII和Unicode文本以及更高级的应用程序特定格式存储在剪贴板上。如果剪贴板上有指定格式的信息，则`Available`返回`true`：
- en: '[PRE12]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `WriteText` and `ReadText` functions write and read a list of strings,
    while the `WriteGeneric` and `ReadGeneric` functions write and read generic information:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`WriteText`和`ReadText`函数写入和读取字符串列表，而`WriteGeneric`和`ReadGeneric`函数写入和读取泛型信息：'
- en: '[PRE13]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '**Clipboard.cpp**:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**Clipboard.cpp**:'
- en: '[PRE14]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `Open`, `Close`, and `Clear` functions call the Win32 API functions `OpenClipboard`,
    `CloseClipboard`, and `EmptyClipboard`. They all return integer values; a non-zero
    value indicates success:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`Open`、`Close`和`Clear`函数调用Win32 API函数`OpenClipboard`、`CloseClipboard`和`EmptyClipboard`。它们都返回整数值；非零值表示成功：'
- en: '[PRE15]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `Available` function examines whether there is data with the format available
    on the clipboard by calling the Win32 API function `FormatAvailable`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`Available`函数通过调用Win32 API函数`FormatAvailable`检查剪贴板上是否有指定格式的数据：'
- en: '[PRE16]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: ASCII and Unicode lines
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ASCII和Unicode行
- en: As `WriteText` and `ReadText` are template methods, they are included in the
    header file instead of the implementation file. `WriteText` takes a list of generic
    strings and writes them in any format to the clipboard; `AsciiFormat` (one byte/character)
    and `UnicodeFormat` (two bytes/character) are predefined.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`WriteText`和`ReadText`是模板方法，它们包含在头文件中而不是实现文件中。`WriteText`接受一个泛型字符串列表并将它们以任何格式写入剪贴板；`AsciiFormat`（一个字节/字符）和`UnicodeFormat`（两个字节/字符）是预定义的。
- en: '**Clipboard.h**:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**Clipboard.h**:'
- en: '[PRE17]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'First, we need to find the buffer size, which we calculate by adding the total
    number of characters in the lines. We also add one for each line since each line
    also holds a terminating character. The terminating character is the return character
    (`\r`) for each line, except the last line, which is terminated by a zero character
    (`\0`):'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要找到缓冲区大小，我们通过计算行中的字符总数来计算它。我们还要为每一行加一，因为每一行也包含一个终止字符。终止字符是每一行的回车字符（`\r`），除了最后一行，它由一个零字符（`\0`）终止：
- en: '[PRE18]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'When we have calculated the buffer size, we can call the Win32 API `GlobalAlloc`
    function to allocate the buffer in the global clipboard. We will later connect
    it to the format. We use the size of the template character type for the buffer:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们计算出缓冲区大小时，我们可以调用Win32 API的`GlobalAlloc`函数在全局剪贴板上分配缓冲区。我们稍后将将其连接到格式。我们使用模板字符类型的大小作为缓冲区：
- en: '[PRE19]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If the allocation succeeds, we receive a handle to the buffer. Since the clipboard
    and its buffers can be used by several processes at the same time, we need to
    lock the buffer by calling the Win32 API function `GlobalLock`. As long as the
    buffer is locked, no other processes can access it. When we lock the buffer we
    receive a pointer to it, which we can use when writing information to the buffer:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果分配成功，我们将收到缓冲区的句柄。由于剪贴板及其缓冲区可以同时被多个进程使用，我们需要通过调用Win32 API函数`GlobalLock`来锁定缓冲区。只要缓冲区被锁定，其他进程就无法访问它。当我们锁定缓冲区时，我们收到一个指向它的指针，我们可以用它来向缓冲区写入信息：
- en: '[PRE20]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We write the characters of the line to the buffer, and we add a `return` character
    unless it is the last line in the list:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将行的字符写入缓冲区，除非它是列表中的最后一行，否则我们添加一个`return`字符：
- en: '[PRE21]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We add a zero character at the end of the buffer to mark its ending:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在缓冲区的末尾添加一个零字符来标记其结束：
- en: '[PRE22]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'When the buffer has been loaded with information, we only need to unlock the
    buffer so that other processes can access it and associate the buffer with the
    format:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当缓冲区已加载信息后，我们只需解锁缓冲区，以便其他进程可以访问它并将缓冲区与格式关联：
- en: '[PRE23]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Finally, we return `true` to indicate that the operation succeeded:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们返回`true`以指示操作成功：
- en: '[PRE24]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'If we were not able to allocate a buffer to write the line list to, we indicate
    that the operation did not succeeded by returning `false`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们没有能够为写入行列表分配缓冲区，我们通过返回`false`来指示操作未成功：
- en: '[PRE25]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'When reading the line list with `ReadText`, we use `Format` (which usually
    is `AsciiFormat` or `UnicodeFormat`) to receive a handle from the clipboard, which
    we then use to lock the buffer and receive its pointer, which in turn allows to
    us read from the buffer:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`ReadText`读取行列表时，我们使用`Format`（通常是`AsciiFormat`或`UnicodeFormat`）从剪贴板接收一个句柄，然后我们使用它来锁定缓冲区并接收其指针，这反过来又允许我们从缓冲区中读取：
- en: '[PRE26]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Note that we have to divide the buffer size with the template character type
    size (which may be greater than 1) in order to find the number of characters:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们必须将缓冲区大小除以模板字符类型大小（可能大于1），以找到字符数：
- en: '[PRE27]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'When we encounter a return character (`\r`), the current line is finished;
    we add it to the line list and then clear it in order for it to be ready for the
    next line:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们遇到回车字符（`\r`）时，当前行结束；我们将它添加到行列表中，然后清除它以便为下一行做好准备：
- en: '[PRE28]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'When we encounter a return character (`''\0''`), we also add the current line
    to the line list. However, there is no need to clear the current line, since the
    zero character is the last character in the buffer:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们遇到回车字符（`'\0'`）时，我们也把当前行添加到行列表中。然而，没有必要清除当前行，因为零字符是缓冲区的最后一个字符：
- en: '[PRE29]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'If the character is neither a return nor a zero character, we add it to the
    current line. Note that we read a character of the template `CharType` type and
    convert it to a generic character of the `TCHAR` type:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果字符既不是回车也不是零字符，我们就将它添加到当前行。注意，我们读取一个`CharType`类型的字符并将其转换为`TCHAR`类型的通用字符：
- en: '[PRE30]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Finally, we unlock the buffer and return `true` to indicate that the operation
    succeeded:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们解锁缓冲区并返回`true`以指示操作成功：
- en: '[PRE31]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'If we do not receive a buffer for the format, we return `false` to indicate
    that the operation did not succeed:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们没有收到格式的缓冲区，我们返回`false`以指示操作未成功：
- en: '[PRE32]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Generic information
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通用信息
- en: The `WriteGeneric` function is actually simpler than the preceding `WriteText`
    function, since it does need to take line lists into consideration. We simply
    lock the clipboard buffer, write each byte in `infoList` to the buffer, unlock
    the buffer, and associate it with the format.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`WriteGeneric`函数实际上比前面的`WriteText`函数简单，因为它不需要考虑行列表。我们只需锁定剪贴板缓冲区，将`infoList`中的每个字节写入缓冲区，解锁缓冲区，并将其与格式关联：'
- en: '**Clipboard.cpp**:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**Clipboard.cpp**:'
- en: '[PRE33]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The `ToBuffer` object in the `InfoList` function writes its bytes to the buffer:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`InfoList`函数中的`ToBuffer`对象将其字节写入缓冲区：'
- en: '[PRE34]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'If we do not manage to allocate the global buffer, we return `false` to indicate
    that the operation did not succeed:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们没有成功分配全局缓冲区，我们返回`false`以指示操作未成功：
- en: '[PRE35]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The `ReadGeneric` function locks the clipboard buffer, writes each byte in
    the buffer to `infoList`, unlocks the buffer, and returns `true` to indicate that
    the operation succeeded:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`ReadGeneric`函数锁定剪贴板缓冲区，将缓冲区中的每个字节写入`infoList`，解锁缓冲区，并返回`true`以指示操作成功：'
- en: '[PRE36]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'If we do not receive the global handle, we return `false` to indicate that
    the operation did not succeed:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们没有收到全局句柄，我们返回`false`以指示操作未成功：
- en: '[PRE37]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Standard dialogs
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标准对话框
- en: In Windows, it's possible to define **dialogs**. Unlike windows, dialogs are
    intended to be populated with controls such as buttons, boxes, and text fields.
    A dialog may be **modal**, which means that the other windows of the application
    become disabled until the dialog is closed. In the next chapter, we will look
    into how we build our own dialogs.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows中，可以定义**对话框**。与窗口不同，对话框的目的是填充控件，如按钮、框和文本字段。一个对话框可能是**模态的**，这意味着在对话框关闭之前，应用程序的其他窗口将变为禁用状态。在下一章中，我们将探讨如何构建我们自己的对话框。
- en: However, in this section, we will look into the Windows **standard** **dialogs**
    for saving and opening files, choosing fonts and colors, and printing. Small Windows
    supports standard dialogs by wrapping the Win32 API function, which provides us
    with the dialogs.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在本节中，我们将探讨Windows**标准**对话框，用于保存和打开文件、选择字体和颜色以及打印。Small Windows通过包装Win32 API函数支持标准对话框，这些函数为我们提供了对话框。
- en: The Save dialog
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保存对话框
- en: The `SaveDialog` function displays the standard **Save** dialogs.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`SaveDialog`函数显示标准**保存**对话框。'
- en: '![The Save dialog](img/B05475_13_01.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![保存对话框](img/B05475_13_01.jpg)'
- en: 'The `filter` parameters filter the file types to be displayed. Each file format
    is defined in two parts: the text displayed in the dialog and the default file
    suffix. The parts are separated by a zero character and the filter is terminated
    with two zero characters. For instance, consider the following:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`filter` 参数过滤要显示的文件类型。每个文件格式由两部分定义：对话框中显示的文本和默认文件后缀。这两部分由一个零字符分隔，并且过滤器以两个零字符结束。例如，考虑以下：'
- en: '[PRE38]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The `fileSuffixList` parameter gives the allowed file suffixes and `saveFlags`
    holds the flags of the operation. The following two flags are available:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`fileSuffixList` 参数指定允许的文件后缀，而 `saveFlags` 包含操作的标志。以下有两个标志可用：'
- en: '`PromptBeforeOverwrite`: This flag is a warning message that is displayed if
    the file does already exist'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PromptBeforeOverwrite`: 这个标志是一个警告信息，如果文件已经存在，则会显示'
- en: '`PathMustExist`: This flag is an error message that is displayed if the path
    does not exist'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PathMustExist`: 如果路径不存在，则会显示一个错误信息'
- en: '**StandardDialog.h**:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**StandardDialog.h**:'
- en: '[PRE39]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '**StandardDialog.cpp**:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**StandardDialog.cpp**:'
- en: '[PRE40]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The Win32 API `OPENFILENAME` structure `saveFileName` is loaded with appropriate
    values: `hwndOwner` is set to the window''s handle, `hInstance` is set to the
    application instance handle, `lpstrFilter` is set to the `filter` parameter, `lpstrFile`
    is set to `pathBuffer`, which in turn holds the `path` parameter, and `Flags`
    is set to the `saveFlags` parameter:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Win32 API `OPENFILENAME` 结构的 `saveFileName` 被加载了适当的值：`hwndOwner` 设置为窗口句柄，`hInstance`
    设置为应用程序实例句柄，`lpstrFilter` 设置为 `filter` 参数，`lpstrFile` 设置为 `pathBuffer`，它反过来又包含
    `path` 参数，并且 `Flags` 设置为 `saveFlags` 参数：
- en: '[PRE41]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'When `saveFileName` is loaded, we call the Win32 API function `GetSaveFileName`,
    which displays the standard **Save** dialog and returns a non-zero value if the
    user terminates the dialog by clicking on the **Save** button or pressing the
    **Return** key. In that case, we set the `path` parameter to the chosen path,
    check whether the path ends with one of the suffixes in `fileSuffixList`, and
    return `true` if it does. If the path suffix is not present in the list, we display
    an error message and the saving process starts over again. If the user cancels
    the process, `false` is returned. In fact, the only way for the user to finish
    the process is to choose a file with a suffix in the list or to cancel the dialog:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `saveFileName` 被加载时，我们调用 Win32 API 函数 `GetSaveFileName`，它显示标准的 **保存** 对话框，如果用户通过点击
    **保存** 按钮或按 **回车** 键终止对话框，则返回非零值。在这种情况下，我们将 `path` 参数设置为所选路径，检查路径是否以 `fileSuffixList`
    中的后缀之一结尾，如果是以，则返回 `true`。如果路径后缀不在列表中，我们显示一个错误信息，并重新开始保存过程。如果用户取消过程，则返回 `false`。实际上，用户完成过程的唯一方法是选择列表中的文件后缀或取消对话框：
- en: '[PRE42]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The Open dialog
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 打开对话框
- en: The `OpenDialog` function displays the standard **Open** dialog.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`OpenDialog` 函数显示标准的 **打开** 对话框。'
- en: '![The Open dialog](img/B05475_13_02.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![打开对话框](img/B05475_13_02.jpg)'
- en: 'The `filter` and `fileSuffixList` parameters work in the same way as in the
    preceding `SaveDialog` function. There are three flags available:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`filter` 和 `fileSuffixList` 参数与前面的 `SaveDialog` 函数中的方式相同。有三个标志可用：'
- en: '`PromptBeforeCreate`: This flag displays a warning message if the file already
    exists'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PromptBeforeCreate`: 如果文件已经存在，则此标志会显示一个警告信息'
- en: '`FileMustExist`: The opened file must exist'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FileMustExist`: 打开的文件必须存在'
- en: '`HideReadOnly`: This flag indicates that read-only files are hidden in the
    dialog'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HideReadOnly`: 此标志表示在对话框中隐藏只读文件'
- en: '**OpenDialog.h**:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**OpenDialog.h**:'
- en: '[PRE43]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The implementation of `OpenDialog` is similar to the preceding `SaveDialog`
    function. We use the same `OPENFILENAME` structure; the only difference is that
    we call `GetOpenFileName` instead of `GetSaveFileName`.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`OpenDialog` 的实现与前面的 `SaveDialog` 函数类似。我们使用相同的 `OPENFILENAME` 结构；唯一的区别是我们调用
    `GetOpenFileName` 而不是 `GetSaveFileName`。'
- en: '**OpenDialog.cpp**:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**OpenDialog.cpp**:'
- en: '[PRE44]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: The Color dialog
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 颜色对话框
- en: The `ColorDialog` function displays a standard **Color** dialog.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`ColorDialog` 函数显示标准的 **颜色** 对话框。'
- en: '![The Color dialog](img/B05475_13_03.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![颜色对话框](img/B05475_13_03.jpg)'
- en: '**StandardDialog.h**:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**StandardDialog.h**:'
- en: '[PRE45]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The static `COLORREF` array `customColorArray` is used by the user in the color
    dialog to store the chosen colors. Since it is static, the `customColorArray`
    array is reused between dialog display sessions.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 静态 `COLORREF` 数组 `customColorArray` 被用户在颜色对话框中使用，以存储所选颜色。由于它是静态的，`customColorArray`
    数组在对话框显示会话之间被重用。
- en: The `ColorDialog` function uses the Win32 API `CHOOSECOLOR` structure to initialize
    the dialog. The `hwndOwner` function is set to the window's handle, `rgbResult`
    is set to the color's `COLORREF` field, and `lpCustColors` is set to the custom
    color array. The `CC_RGBINIT` and `CC_FULLOPEN` flags initialize the dialog with
    the given color so that it is fully extended.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`ColorDialog` 函数使用 Win32 API `CHOOSECOLOR` 结构初始化对话框。`hwndOwner` 函数设置为窗口句柄，`rgbResult`
    设置为颜色的 `COLORREF` 字段，`lpCustColors` 设置为自定义颜色数组。`CC_RGBINIT` 和 `CC_FULLOPEN` 标志使用给定的颜色初始化对话框，使其完全展开。'
- en: '**StandardDialog.cpp**:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '**StandardDialog.cpp**:'
- en: '[PRE46]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The Win32 `ChooseColor` function displays the **Color** dialog and returns
    a non-zero value if the user terminates the dialog by clicking on the **OK** button.
    In that case, we set the chosen color and return `true`:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Win32 的 `ChooseColor` 函数显示 **颜色** 对话框，如果用户通过点击 **确定** 按钮结束对话框，则返回非零值。在这种情况下，我们设置所选颜色并返回
    `true`：
- en: '[PRE47]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'If the user cancels the dialog, we return `false`:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户取消对话框，我们返回 `false`：
- en: '[PRE48]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: The Font dialog
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字体对话框
- en: The `FontDialog` function displays a standard **Font** dialog.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`FontDialog` 函数显示一个标准的 **字体** 对话框。'
- en: '![The Font dialog](img/B05475_13_04.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![字体对话框](img/B05475_13_04.jpg)'
- en: '**StandardDialog.h**:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '**StandardDialog.h**:'
- en: '[PRE49]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '**FontDialog.cpp**:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '**FontDialog.cpp**:'
- en: '[PRE50]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The Win32 API `CHOOSEFONT` structure `chooseFont` is loaded with appropriate
    values. The `lpLogFont` object is set to the font''s `LOGFONT` field and `rgbColors`
    is set to the color''s `COLORREF` field:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: Win32 API `CHOOSEFONT` 结构 `chooseFont` 被加载了适当的值。`lpLogFont` 对象设置为字体的 `LOGFONT`
    字段，`rgbColors` 设置为颜色的 `COLORREF` 字段：
- en: '[PRE51]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The Win32 `ChooseFont` function displays the **Font** dialog and returns a
    non-zero value if the user clicks on the **OK** button. In that case, we set the
    chosen font and color and return `true`:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Win32 的 `ChooseFont` 函数显示 **字体** 对话框，如果用户点击 **确定** 按钮则返回非零值。在这种情况下，我们设置所选字体和颜色并返回
    `true`：
- en: '[PRE52]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'If the user cancels the dialog, we return `false`:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户取消对话框，我们返回 `false`：
- en: '[PRE53]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: The Print dialog
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 打印对话框
- en: The `PrintDialog` function displays a standard **Print** dialog.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`PrintDialog` 函数显示一个标准的 **打印** 对话框。'
- en: '![The Print dialog](img/B05475_13_05.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![打印对话框](img/B05475_13_05.jpg)'
- en: 'If the user clicks on the **Print** button, the chosen print settings are saved
    in the `PrintDialog` parameters:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户点击 **打印** 按钮，所选的打印设置将保存在 `PrintDialog` 参数中：
- en: '**PrintDialog.h**:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '**PrintDialog.h**:'
- en: '[PRE54]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: The `PrintDialog` function loads the Win32 API `PRINTDLG` structure `printDialog`
    with appropriate values, `nFromPage` and `nToPage` are set to the first and last
    page to be printed (whose default values are 1 and the number of pages respectively),
    `nMaxPage` is set to the number of pages, and `nCopies` is set to 1 (the default
    value).
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`PrintDialog` 函数使用适当的值加载 Win32 API `PRINTDLG` 结构 `printDialog`，`nFromPage`
    和 `nToPage` 设置为要打印的第一页和最后一页（默认值分别为 1 和页数），`nMaxPage` 设置为页数，`nCopies` 设置为 1（默认值）。'
- en: '**PrintDialog.cpp**:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '**PrintDialog.cpp**:'
- en: '[PRE55]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: The Win32 API function `PrintDlg` displays the standard print dialog and returns
    a non-zero value if the user finishes the dialog by pressing the **Print** button.
    In that case, the first and last page to be printed, the number of copies, and
    whether the copies will be sorted are stored in the parameters, and the pointer
    to the `Graphics` object to be used when printing is created and returned.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: Win32 API 函数 `PrintDlg` 显示标准打印对话框，如果用户通过按下 **打印** 按钮结束对话框，则返回非零值。在这种情况下，打印的第一页和最后一页、副本数量以及是否排序存储在参数中，并创建返回用于打印的
    `Graphics` 对象的指针。
- en: 'If the user has chosen a page interval, we use the `nFromPage` and `nToPage`
    fields; otherwise, all pages are selected and we use the `nMinPage` and `nMaxPage`
    fields to set the first and last page to be printed:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户选择了页面间隔，我们使用 `nFromPage` 和 `nToPage` 字段；否则，选择所有页面，并使用 `nMinPage` 和 `nMaxPage`
    字段设置要打印的第一页和最后一页：
- en: '[PRE56]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'If the `PD_COLLATE` flags is present, the user has chosen to sort the pages:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存在 `PD_COLLATE` 标志，则用户选择了排序页面：
- en: '[PRE57]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Finally, we create and return a pointer to the `Graphics` object to be used
    when painting to the printer.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们创建并返回一个指向用于打印时绘图的 `Graphics` 对象的指针。
- en: '[PRE58]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'If the user terminates the dialog by pressing the **Cancel** button, we return
    null:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户通过按下 **取消** 按钮结束对话框，我们返回 null：
- en: '[PRE59]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Print preview
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打印预览
- en: The `PrintPreviewDocument` class displays the pages of the document parent window.
    The `OnKeyDown` method closes the document when the user presses the ***Esc***
    key. The `OnSize` method adjusts the physical size of the page so that the page
    always fits inside the window. The `OnVerticalScroll` method shifts the pages
    when the user scrolls up or down, and `OnPaint` calls `OnPrint` of the parent
    document for each page.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`PrintPreviewDocument`类显示文档父窗口的页面。`OnKeyDown`方法在用户按下***Esc***键时关闭文档。`OnSize`方法调整页面的物理大小，以确保页面始终适合窗口。`OnVerticalScroll`方法在用户向上或向下滚动时移动页面，而`OnPaint`为每一页调用父文档的`OnPrint`：'
- en: '**PrintPreviewDocument.h**:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '**PrintPreviewDocument.h**：'
- en: '[PRE60]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'The `OnSize` function is overridden only to neutralize its functionality in
    `Document`. In `Document`, `OnSize` modifies the scroll bars, but we do not want
    that to happen in this class:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 仅覆盖`OnSize`函数以在`Document`中中和其功能。在`Document`中，`OnSize`修改滚动条，但我们不希望在类中发生这种情况：
- en: '[PRE61]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'The `page` field holds the current page number and `totalPages` holds the total
    number of pages:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`page`字段存储当前页码，`totalPages`存储总页数：'
- en: '[PRE62]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '**PrintPreviewDocument.cpp**'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '**PrintPreviewDocument.cpp**'
- en: '[PRE63]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: The constructor sets the `page` and `totalPages` fields to appropriate values.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数将`page`和`totalPages`字段设置为适当的值。
- en: '[PRE64]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'The horizontal scroll bar is always set to the width of the window, which means
    that the user cannot change its setting:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 水平滚动条始终设置为窗口的宽度，这意味着用户无法更改其设置：
- en: '[PRE65]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'The vertical scroll bar is set to match the number of pages of the document,
    and the scroll thumb corresponds to one page:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 垂直滚动条设置为与文档的页数相匹配，滚动滑块对应一页：
- en: '[PRE66]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'The header displays the current and total number of pages:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 标题显示当前页数和总页数：
- en: '[PRE67]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Keyboard input
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 键盘输入
- en: 'The `OnKeyDown` function is called when the user presses a key. If they press
    the ***Esc*** key, the preview window is closed and destroyed, and the input focus
    is returned to the main window of the application. If they press the ***Home***
    , ***End*** , ***Page Up*** , or ***Page Down*** keys or the up and down arrow
    keys, `OnVerticalScroll` is called to take the appropriate action:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户按下键时，会调用`OnKeyDown`函数。如果他们按下***Esc***键，预览窗口将被关闭并销毁，输入焦点将返回到应用程序的主窗口。如果他们按下***Home***、***End***、***Page
    Up***、***Page Down***键或上下箭头键，将调用`OnVerticalScroll`以执行适当的操作：
- en: '[PRE68]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'We return `true` to indicate that the keyboard input has been used:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们返回`true`以指示已使用键盘输入：
- en: '[PRE69]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Scroll bar
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 滚动条
- en: 'The `OnVerticalScroll` function is called when the user scrolls the vertical
    bar. If they click on the scroll bar itself, above or below the scroll thumb,
    the previous or next page is displayed. And if they drag the thumb to a new position,
    the corresponding page is calculated. The `SB_TOP` and `SB_BOTTOM` cases are included
    to accommodate the ***Home*** and ***End*** keys from the preceding `OnKeyDown`
    function rather than to accommodate any scroll movements; they set the page to
    the first or last page:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户滚动垂直条时，会调用`OnVerticalScroll`函数。如果他们点击滚动条本身，在滚动滑块上方或下方，将显示上一页或下一页。如果他们将滑块拖动到新位置，将计算相应的页面。包括`SB_TOP`和`SB_BOTTOM`情况是为了适应前面`OnKeyDown`函数中的***Home***和***End***键，而不是为了适应任何滚动操作；它们将页面设置为第一页或最后一页：
- en: '[PRE70]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'If the scroll movement has resulted in a new page, we set the header and the
    scroll bar position and invalidate and update the window:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如果滚动操作导致出现新页面，我们将设置标题和滚动条位置，并使窗口无效并更新：
- en: '[PRE71]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'The `OnPaint` function in `PrintPreviewDocument` calls `OnPaint` in the parent
    standard document window in order to paint the contents of the preview window:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`PrintPreviewDocument`中的`OnPaint`函数调用父标准文档窗口中的`OnPaint`以绘制预览窗口的内容：'
- en: '[PRE72]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Summary
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked into the registry, the clipboard, standard dialogs,
    and print preview. In [Chapter 14](ch14.html "Chapter 14. Dialogs, Controls, and
    Page Setup"), *Dialogs, Controls, and Page Setup*, we will look into custom dialogs,
    controls, converters, and page setup.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了注册表、剪贴板、标准对话框和打印预览。在[第14章](ch14.html "第14章。对话框、控件和页面设置")中，我们将探讨自定义对话框、控件、转换器和页面设置。
