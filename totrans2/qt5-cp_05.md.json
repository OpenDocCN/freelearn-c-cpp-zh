["```cpp\n#ifndef CANVAS_H\n#define CANVAS_H\n\n#include <QWidget>\n\nclass Canvas : public QWidget\n{\n  Q_OBJECT\n  public:\n    explicit Canvas(QWidget *parent = 0);\n\n  private:\n    QVector<QPointF> m_points;\n\n  protected:\n    void paintEvent(QPaintEvent *);\n    void mousePressEvent(QMouseEvent *);\n    void mouseMoveEvent(QMouseEvent *);\n    void mouseReleaseEvent(QMouseEvent *);\n};\n\n#endif // CANVAS_H\n```", "```cpp\n#include <QStyleOption>\n#include <QPainter>\n#include <QPaintEvent>\n#include <QMouseEvent>\n#include \"canvas.h\"\n\nCanvas::Canvas(QWidget *parent) :\n  QWidget(parent)\n{\n}\n\nvoid Canvas::paintEvent(QPaintEvent *)\n{\n  QPainter painter(this);\n\n  QStyleOption opt;\n  opt.initFrom(this);\n  this->style()->drawPrimitive(QStyle::PE_Widget, &opt, &painter, this);\n\n  painter.setPen(QColor(Qt::black));\n  painter.setRenderHint(QPainter::Antialiasing);\n  painter.drawPolyline(m_points.data(), m_points.count());\n}\n\nvoid Canvas::mousePressEvent(QMouseEvent *e)\n{\n  m_points.clear();\n  m_points.append(e->localPos());\n  this->update();\n}\n\nvoid Canvas::mouseMoveEvent(QMouseEvent *e)\n{\n  m_points.append(e->localPos());\n  this->update();\n}\n\nvoid Canvas::mouseReleaseEvent(QMouseEvent *e)\n{\n  m_points.append(e->localPos());\n  this->update();\n}\n```", "```cpp\nQPainter painter;\npainter.begin(this);\npainter.drawPolyline(m_points.data(), m_points.count());\npainter.end();\n```", "```cpp\nQPainter::Antialiasing\nQPainter::TextAntialiasing\nQPainter::SmoothPixmapTransform\nQPainter::Qt4CompatiblePainting\n```", "```cpp\n#ifndef CANVAS_H\n#define CANVAS_H\n\n#include <QWidget>\n\nclass Canvas : public QWidget\n{\n  Q_OBJECT\n  public:\n    explicit Canvas(QWidget *parent = 0);\n\n  private:\n    QVector<QPointF> m_points;\n    QImage image;\n\n    void updateImage();\n\n  protected:\n    void paintEvent(QPaintEvent *);\n    void mousePressEvent(QMouseEvent *);\n    void mouseMoveEvent(QMouseEvent *);\n    void mouseReleaseEvent(QMouseEvent *);\n    void resizeEvent(QResizeEvent *);\n};\n\n#endif // CANVAS_H\n```", "```cpp\n#include <QStyleOption>\n#include <QPainter>\n#include <QPaintEvent>\n#include <QMouseEvent>\n#include <QResizeEvent>\n#include \"canvas.h\"\n\nCanvas::Canvas(QWidget *parent) :\n  QWidget(parent)\n{\n}\n\nvoid Canvas::paintEvent(QPaintEvent *e)\n{\n  QPainter painter(this);\n\n  QStyleOption opt;\n  opt.initFrom(this);\n  this->style()->drawPrimitive(QStyle::PE_Widget, &opt, &painter, this);\n\n painter.drawImage(e->rect().topLeft(), image);\n}\n\nvoid Canvas::updateImage()\n{\n  QPainter painter(&image);\n  painter.setPen(QColor(Qt::black));\n  painter.setRenderHint(QPainter::Antialiasing);\n  painter.drawPolyline(m_points.data(), m_points.count());\n  this->update();\n}\n\nvoid Canvas::mousePressEvent(QMouseEvent *e)\n{\n  m_points.clear();\n  m_points.append(e->localPos());\n  updateImage();\n}\n\nvoid Canvas::mouseMoveEvent(QMouseEvent *e)\n{\n  m_points.append(e->localPos());\n  updateImage();\n}\n\nvoid Canvas::mouseReleaseEvent(QMouseEvent *e)\n{\n  m_points.append(e->localPos());\n  updateImage();\n}\n\nvoid Canvas::resizeEvent(QResizeEvent *e)\n{\n  QImage newImage(e->size(), QImage::Format_RGB32);\n  newImage.fill(Qt::white);\n  QPainter painter(&newImage);\n  painter.drawImage(0, 0, image);\n  image = newImage;\n  QWidget::resizeEvent(e);\n}\n```", "```cpp\n#ifndef INTERFACE_H\n#define INTERFACE_H\n\n#include <QtPlugin>\n#include <QPainterPath>\n\nclass InsertInterface\n{\n  public:\n    virtual ~InsertInterface() {}\n    virtual QString name() const = 0;\n    virtual QPainterPath getObject(QWidget *parent) = 0;\n};\n\n#define InsertInterface_iid \"org.qt-project.Qt.PainterDemo.InsertInterface\"\nQ_DECLARE_INTERFACE(InsertInterface, InsertInterface_iid)\n\n#endif // INTERFACE_H\n```", "```cpp\nQT       += core gui widgets\n\nTARGET = TextPlugin\nTEMPLATE = lib\nCONFIG += plugin static\n\nDESTDIR = ../plugins\n\nSOURCES += textplugin.cpp\n\nINCLUDEPATH += ../\n\nHEADERS += textplugin.h\nOTHER_FILES += TextPlugin.json\n```", "```cpp\n#ifndef TEXTPLUGIN_H\n#define TEXTPLUGIN_H\n\n#include \"interface.h\"\n\nclass TextPlugin : public QObject,\n                   public InsertInterface\n{\n  Q_OBJECT\n  Q_PLUGIN_METADATA(IID \"org.qt-project.Qt.PainterDemo.InsertInterface\" FILE \"TextPlugin.json\")\n  Q_INTERFACES(InsertInterface)\n\n  public:\n    QString name() const;\n    QPainterPath getObject(QWidget *parent);\n};\n\n#endif // TEXTPLUGIN_H\n```", "```cpp\n#include <QInputDialog>\n#include \"textplugin.h\"\n\nQString TextPlugin::name() const\n{\n  return QString(\"Text\");\n}\n\nQPainterPath TextPlugin::getObject(QWidget *parent)\n{\n  QPainterPath ppath;\n  QString text = QInputDialog::getText(parent, QString(\"Insert Text\"), QString(\"Text\"));\n\n  if (!text.isEmpty()) {\n    ppath.addText(10, 80, QFont(\"Cambria\", 60), text);\n  }\n  return ppath;\n}\n```", "```cpp\nLIBS     += -L../plugins -lTextPlugin\n```", "```cpp\n#ifndef MAINWINDOW_H\n#define MAINWINDOW_H\n\n#include <QMainWindow>\n\nnamespace Ui {\n  class MainWindow;\n}\n\nclass MainWindow : public QMainWindow\n{\n  Q_OBJECT\n\n  public:\n    explicit MainWindow(QWidget *parent = 0);\n    ~MainWindow();\n\n  private:\n    Ui::MainWindow *ui;\n\n    void loadPlugins();\n    void generatePluginMenu(QObject *);\n\n  private slots:\n    void onInsertInterface();\n};\n\n#endif // MAINWINDOW_H\n```", "```cpp\n#include <QPluginLoader>\n#include \"mainwindow.h\"\n#include \"ui_mainwindow.h\"\n#include \"interface.h\"\n\nQ_IMPORT_PLUGIN(TextPlugin)\n\nMainWindow::MainWindow(QWidget *parent) :\n  QMainWindow(parent),\n  ui(new Ui::MainWindow)\n{\n  ui->setupUi(this);\n  loadPlugins();\n}\n\nMainWindow::~MainWindow()\n{\n  delete ui;\n}\n\nvoid MainWindow::loadPlugins()\n{\n  foreach(QObject *plugin, QPluginLoader::staticInstances()) {\n    generatePluginMenu(plugin);\n  }\n}\n\nvoid MainWindow::generatePluginMenu(QObject *plugin)\n{\n  InsertInterface *insertInterfacePlugin = qobject_cast<InsertInterface *>(plugin);\n  if (insertInterfacePlugin) {\n    QAction *action = new QAction(insertInterfacePlugin->name(), plugin);\n    connect(action, &QAction::triggered, this, &MainWindow::onInsertInterface);\n    ui->menuPlugins->addAction(action);\n  }\n}\n\nvoid MainWindow::onInsertInterface()\n{\n  QAction *action = qobject_cast<QAction *>(sender());\n  InsertInterface *insertInterfacePlugin = qobject_cast<InsertInterface *>(action->parent());\n  const QPainterPath ppath = insertInterfacePlugin->getObject(this);\n  if (!ppath.isEmpty()) {\n    ui->canvas->insertPainterPath(ppath);\n  }\n}\n```", "```cpp\nvoid insertPainterPath(const QPainterPath &);\n```", "```cpp\nvoid Canvas::insertPainterPath(const QPainterPath &ppath)\n{\n  QPainter painter(&image);\n  painter.drawPath(ppath);\n  this->update();\n}\n```", "```cpp\nQT       += core gui widgets\n\nTARGET = EllipsePlugin\nTEMPLATE = lib\nCONFIG += plugin\n\nDESTDIR = ../plugins\n\nSOURCES +=  ellipseplugin.cpp \\\n            ellipsedialog.cpp\n\nHEADERS +=  ellipseplugin.h \\\n            ellipsedialog.h\nOTHER_FILES += EllipsePlugin.json\n\nINCLUDEPATH += ../\n\nFORMS += ellipsedialog.ui\n```", "```cpp\n#ifndef ELLIPSEPLUGIN_H\n#define ELLIPSEPLUGIN_H\n\n#include \"interface.h\"\n\nclass EllipsePlugin : public QObject,\n                      public InsertInterface\n{\n  Q_OBJECT\n  Q_PLUGIN_METADATA(IID \"org.qt-project.Qt.PainterDemo.InsertInterface\" FILE \"EllipsePlugin.json\")\n  Q_INTERFACES(InsertInterface)\n\n  public:\n    QString name() const;\n    QPainterPath getObject(QWidget *parent);\n\n  public slots:\n    void onDialogAccepted(qreal x, qreal y, qreal wid, qreal hgt);\n\n  private:\n    qreal m_x;\n    qreal m_y;\n    qreal width;\n    qreal height;\n};\n\n#endif // ELLIPSEPLUGIN_H\n```", "```cpp\n#include \"ellipsedialog.h\"\n#include \"ellipseplugin.h\"\n\nQString EllipsePlugin::name() const\n{\n  return QString(\"Ellipse\");\n}\n\nQPainterPath EllipsePlugin::getObject(QWidget *parent)\n{\n  m_x = 0;\n  m_y = 0;\n  width = 0;\n  height = 0;\n\n  EllipseDialog *dlg = new EllipseDialog(parent);\n  connect(dlg, &EllipseDialog::accepted, this, &EllipsePlugin::onDialogAccepted);\n  dlg->exec();\n\n  QPainterPath ppath;\n  ppath.addEllipse(m_x, m_y, width, height);\n  return ppath;\n}\n\nvoid EllipsePlugin::onDialogAccepted(qreal x, qreal y, qreal wid, qreal hgt)\n{\n  m_x = x;\n  m_y = y;\n  width = wid;\n  height = hgt;\n}\n```", "```cpp\n#ifndef ELLIPSEDIALOG_H\n#define ELLIPSEDIALOG_H\n\n#include <QDialog>\n\nnamespace Ui {\n  class EllipseDialog;\n}\n\nclass EllipseDialog : public QDialog\n{\n  Q_OBJECT\n\n  public:\n    explicit EllipseDialog(QWidget *parent = 0);\n    ~EllipseDialog();\n\n  signals:\n    void accepted(qreal, qreal, qreal, qreal);\n\n  private:\n    Ui::EllipseDialog *ui;\n\n  private slots:\n    void onAccepted();\n};\n\n#endif // ELLIPSEDIALOG_H\n```", "```cpp\n#include \"ellipsedialog.h\"\n#include \"ui_ellipsedialog.h\"\n\nEllipseDialog::EllipseDialog(QWidget *parent) :\n    QDialog(parent),\n    ui(new Ui::EllipseDialog)\n{\n  ui->setupUi(this);\n\n  connect(ui->buttonBox, &QDialogButtonBox::accepted, this, &EllipseDialog::onAccepted);\n}\n\nEllipseDialog::~EllipseDialog()\n{\n  delete ui;\n}\n\nvoid EllipseDialog::onAccepted()\n{\n  emit accepted(ui->tlXDoubleSpinBox->value(), ui->tlYDoubleSpinBox->value(), ui->widthDoubleSpinBox->value(), ui->heightDoubleSpinBox->value());\n  this->accept();\n}\n```", "```cpp\nvoid MainWindow::loadPlugins()\n{\n  foreach(QObject *plugin, QPluginLoader::staticInstances()) {\n    generatePluginMenu(plugin);\n  }\n\n  //search and load dynamic plugins\n  QDir pluginDir = QDir(qApp->applicationDirPath());\n  #ifdef Q_OS_WIN\n  QString dirName = pluginDir.dirName();\n  if (dirName.compare(QString(\"debug\"), Qt::CaseInsensitive) == 0 || dirName.compare(QString(\"release\"), Qt::CaseInsensitive) == 0) {\n    pluginDir.cdUp();\n    pluginDir.cdUp();\n  }\n  #endif\n  pluginDir.cd(QString(\"plugins\"));\n\n  foreach (QString fileName, pluginDir.entryList(QDir::Files)) {\n    QPluginLoader loader(pluginDir.absoluteFilePath(fileName));\n    QObject *plugin = loader.instance();\n    if (plugin) {\n      generatePluginMenu(plugin);\n    }\n  }\n}\n```", "```cpp\n#include <QDir>\n```", "```cpp\nTEMPLATE  = subdirs\nCONFIG   += ordered\nSUBDIRS   = TextPlugin \\\n            EllipsePlugin \\\n            main\n```", "```cpp\nINCLUDEPATH += ../main\n```", "```cpp\nQT       += core qml\n\nTARGET = qmlbase64Plugin\nTEMPLATE = lib\nCONFIG += plugin\n\nDESTDIR = ../imports/Base64\n\nSOURCES += base64.cpp \\\n           base64plugin.cpp\n\nHEADERS += base64.h \\\n           base64plugin.h\n\nOTHER_FILES += \\\n           qmldir\n```", "```cpp\n#ifndef BASE64_H\n#define BASE64_H\n\n#include <QObject>\n\nclass Base64 : public QObject\n{\n  Q_OBJECT\n\n  public:\n    explicit Base64(QObject *parent = 0);\n\n  public slots:\n    QString get(QString);\n};\n\n#endif // BASE64_H\n```", "```cpp\n#include \"base64.h\"\n\nBase64::Base64(QObject *parent) :\n  QObject(parent)\n{\n}\n\nQString Base64::get(QString in)\n{\n  return QString::fromLocal8Bit(in.toLocal8Bit().toBase64());\n}\n```", "```cpp\n#ifndef BASE64PLUGIN_H\n#define BASE64PLUGIN_H\n\n#include <QQmlExtensionPlugin>\n\nclass Base64Plugin : public QQmlExtensionPlugin\n{\n  Q_OBJECT\n  Q_PLUGIN_METADATA(IID \"org.qt-project.Qt.QmlExtensionInterface\")\n\n  public:\n    void registerTypes(const char *uri);\n};\n\n#endif // BASE64PLUGIN_H\n```", "```cpp\n#include <QtQml>\n#include \"base64plugin.h\"\n#include \"base64.h\"\n\nvoid Base64Plugin::registerTypes(const char *uri)\n{\n  Q_ASSERT(uri == QLatin1String(\"Base64\"));\n  qmlRegisterType<Base64>(uri, 1, 0, \"Base64\");\n}\n```", "```cpp\nmodule Base64\nplugin qmlbase64Plugin\n```", "```cpp\nimport QtQuick 2.3\nimport QtQuick.Controls 1.2\nimport Base64 1.0\n\nApplicationWindow {\n  visible: true\n  width: 180\n  height: 100\n  title: qsTr(\"QML Plugin\")\n\n  Base64 {\n    id: b64\n  }\n\n  Column {\n    spacing: 6\n    anchors {left: parent.left; right: parent.right; top: parent.top; bottom: parent.bottom; leftMargin: 6; rightMargin: 6; topMargin: 6; bottomMargin: 6}\n    Label {\n      text: \"Input\"\n    }\n    TextField {\n      id: input\n      width: parent.width\n      placeholderText: \"Input string here\"\n      onEditingFinished: bt.text = b64.get(text)\n    }\n    Label {\n      text: \"Base64 Encoded\"\n    }\n    TextField {\n      id: bt\n      readOnly: true\n      width: parent.width\n    }\n  }\n}\n```", "```cpp\n#include <QApplication>\n#include <QDir>\n#include <QQmlApplicationEngine>\n\nint main(int argc, char *argv[])\n{\n  QApplication app(argc, argv);\n\n  QQmlApplicationEngine engine;\n  QDir pluginDir = app.applicationDirPath();\n  pluginDir.cdUp();\n  pluginDir.cdUp();\n  pluginDir.cd(\"imports\");\n  engine.addImportPath(pluginDir.absolutePath());\n  engine.load(QUrl(QStringLiteral(\"qrc:/main.qml\")));\n\n  return app.exec();\n}\n```"]