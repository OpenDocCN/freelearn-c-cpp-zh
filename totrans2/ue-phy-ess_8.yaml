- en: Chapter 8. Advanced Topics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mixing multiple physical rules of an object and customizing physical properties
    is one of the new and powerful features in Unreal Engine 4\. This allows designers
    and developers to apply physics on a larger scale. Things such as ocean water,
    sky, a grass field, and object destruction are examples of how to apply multiple
    physics for player interactions in the game world.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter provides an example of various physics rules of a simple object.
  prefs: []
  type: TYPE_NORMAL
- en: Simulating complex physics – destruction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want to destroy an object in the game into small pieces, you have to
    break it into small objects and save the model as a huge file that needs heavy
    processing by the machine to render, and it also takes time to make animation
    for each piece. Some designers have ignored this method by replacing objects with
    some particle system over the object position.
  prefs: []
  type: TYPE_NORMAL
- en: 'Today, Unreal Engine 4 not only solves this issue, but also provides features
    and properties to customize the destruction of an object. Depending on the artistic
    or reality-based features of the game, you can simulate the way the energy flows
    and destroys the object and control the physical aspects of the target at the
    same time. Each destruction is simply an interaction or collision between two
    objects. This displays special visual presentations during a specific period of
    time in the game world. In our example, we will simulate the bullet from the first
    person shooter map in UE4 over a simple cube. For this, first we need to define
    our bullet blueprint and then work on the cube object to display the destruction
    after the hit. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First, open Unreal Editor by clicking on the **Launch** button from Unreal Engine
    launcher.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, start a new project from **Project** browser by selecting the **New Project**
    tab. Now, select **First Person** and make sure that **With Starter Content**
    is selected and name the project `dest_test`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, open the **FirstPersonBP** folder and then in the **Blueprints** folder,
    double-click on **FirstPersonProjectile**. This opens the blueprint of your bullet.
    Check the titles of the box and the relations between each of them. This box simulates
    the default behavior of the bullets: hit the target and disappear and hit the
    wall and return at the opposite angle. These two have branches from the **Other
    Comp** output on the event box.![Simulating complex physics – destruction](img/image00350.jpeg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Disconnect **Event Hit** by pressing *Alt* + right-click on the outputs. Move
    it to an empty area on the blueprint screen and connect **Cast To Destructible
    Actor** to it. This means that the bullet will interact with the destroyable object.
    Click on the **Cast Failed** output and connect **Destroy Actor** to it. This
    means that if the bullet doesn't interact with any objects, it gets destroyed
    after a while.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **As Destructible Actor** output and connect the **Get Destructible**
    component to it and then connect the **Destructible Component** output of this
    box to **Apply Radius Damage**. By changing the properties of this box, you can
    control the physical simulation of the destruction of an object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: To create a new box in **Blueprint**, it's better to click and hold the mouse
    on the output of the box and then drag the wire, leave the mouse, and in the opening
    menu, enter the new box name.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, add more connections between your boxes, as shown in the following screenshot:![Simulating
    complex physics – destruction](img/image00351.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you can see in the preceding screenshot, the **Hit Location** output and
    the **Hit Origin** input are directly connected to each other. You can include
    more blueprint boxes between the **Hit Location** output and the **Hit Origin**
    input of your blueprint to support different scenarios. For example, imagine you
    want the player to shoot at an object in the sky and destroy another object located
    on the surface. For this scenario, there are a couple of ways to create a blueprint.
    This is not part of the physical rules and is mostly related to the controls and
    event handling in the blueprint. In our example, they are located at the same
    point, so the object gets destroyed by the bullet at the hit point.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, let''s create and customize the target by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go back to the editor and create a simple material with just the base color
    and one physical material in your material library. Then, drag and drop a cube
    from **Basic** in the **Modes** panel, right-click on it, and select **Find**
    in **Content Browser**. This will find the original object in the engine local
    library. Now, right-click on it in **Content Browser**. From the menu, select
    **Create Destructible Mesh**. This will create a new cube object with the properties
    to simulate destruction.![Simulating complex physics – destruction](img/image00352.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag an instance of this new cube onto the stage and apply your materials to
    this new object. Hit **Play** at the top and shoot at the cube. You will find
    that your bullets get projected from the surface of the cube. Now, click on **Stop**
    and navigate back to editor. Open the blueprint for your **First Person Projectile**,
    locate the **Apply Radius Damage** box, and change **Base Damage** to `1000`,
    as shown in the following screenshot:![Simulating complex physics – destruction](img/image00353.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In editor, double-click on the **Destructible Component** section in the **Details**
    panel of your cube. A new window will open. Here, you can define the properties
    related to destruction. Change **Support Depth** to `1` and then **Voronoi** to
    `360` (if your system is not very powerful, change it to `120`). Now, click on
    **Fracture Mesh** located at the top. With this action, you will be able to apply
    your setting to the mesh; otherwise, it will not work.![Simulating complex physics
    – destruction](img/image00354.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Again, let's navigate back to editor, hit **Play**, and shoot just one bullet
    at the object. As you can see, the cube breaks into many small particles. Now,
    hit stop and double-click on **Destructible Component** again. This time, change
    **Voronoi** to `2`, click on **Fracture Mesh** at the top, and play the level
    again (shoot just one bullet at the object).![Simulating complex physics – destruction](img/image00355.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you can see in the preceding image, there is a big difference between the
    number of particles and the changes on **Voronoi**. This way, you can define the
    number of pieces for the object during the destruction period. Unreal Engine 4
    automatically calculates the shape of pieces and renders them to the stage in
    real time based on physical rules. You can also import other meshes and apply
    the same.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Change **Voronoi** back to `360` and then **Damage Threshold** to `40`. Click
    on **Fracture Mesh** and play the level (shoot just one bullet at the object).![Simulating
    complex physics – destruction](img/image00356.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you can see, the object provides some resistance against your bullet. If
    you increase **Damage Threshold** to `120`, you need to shoot more than one bullet
    to destroy the object and particles. This is similar to a rifle bullet destruction
    of a heavy material similar to stone.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, change **Damage Threshold** to `1` (the default value), click on **Fracture
    Mesh** and then switch back to the blueprint. We want to simulate the shotgun
    bullet's destructive power on the target. Change **Impulse Strength** to `600`
    and click on **Compile** at the top. Then, navigate back to editor and play the
    level by shooting one bullet at the object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you can see in the following screenshot, it breaks with much more energy.
    Also, the visual simulation of physics is different. Now, navigate back to blueprint,
    change it to **6000**, click on **Compile** at the top, and play the game again.
    Bang! This looks similar to a heavy shotgun hit from close distance, isn't it?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Simulating complex physics – destruction](img/image00357.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: You can also involve physical material features in the object. This means that
    with multiple physical rules, you can work at the same location. Now, double-click
    on your physical material and change **Friction** to `-60` and **Restitution**
    to `0`. Then, play the game. You can see in the following screenshot that the
    object breaks into particles similar to ice cubes and spreads around the game
    stage. Such a cool effect can be combined by changing **Restitution** to `1.8`.![Simulating
    complex physics – destruction](img/image00358.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are many ways to combine the physical aspect of your object and the bullet
    preferences with the destruction properties of the object. For example, you can
    tune your bullet energy by changing **Impulse Strength** over a period of time.
    Also, as you know, each material can be customized by its own blueprint. For example,
    imagine that you have a ghost in your game; when you destroy it, it breaks into
    many particles and parts, and each part looks like rainwater. To create this scenario,
    try to apply some dynamic or random changes, such as waving, to your material
    and compare the results.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, when you use a couple of physical customizations on an object, they
    tend to overlap with each other or remove each other's effect. To avoid such problems,
    it's good practice to understand the physical rules related to the instigator
    of the event (the bullet in the previous example) and then the physical rules
    of the target.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A simulation of mass change or a series of changes is a kind of art in the game
    world. A sufficient blueprint by developers can synchronize the physics behind
    the scenes. The presentation and quality of the simulation is based on the artist's
    efforts and madness.
  prefs: []
  type: TYPE_NORMAL
- en: Based on what you learned in this chapter, imagine that you (as a developer)
    try to put 50 objects on the stage. When you shoot at one, all get destroyed within
    a delay of a second. Also, you (as an artist) should design how and in which way
    the objects get destroyed and probably ask developers to make life easier with
    some blueprints. This great mix of developers and artists in the game design is
    one of the powerful aspects of Unreal Engine 4.
  prefs: []
  type: TYPE_NORMAL
