- en: Chapter 7. An Introduction to Real-time Graphics Rendering on a Mobile Platform
    using OpenGL ES 3.0
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 7 章：使用 OpenGL ES 3.0 在移动平台上进行实时图形渲染的介绍
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Setting up the Android SDK
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 Android SDK
- en: Setting up the **Android Native Development Kit** (**NDK**)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 **Android 本地开发工具包**（**NDK**）
- en: Developing a basic framework to integrate the Android NDK
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发用于集成 Android NDK 的基本框架
- en: Creating your first Android application with OpenGL ES 3.0
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 OpenGL ES 3.0 创建您的第一个 Android 应用程序
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In this chapter, we will transition to an increasingly powerful and ubiquitous
    computing platform by demonstrating how to visualize data on the latest mobile
    devices, from smart phones to tablets, using **OpenGL for Embedded Systems** (**OpenGL
    ES**). As mobile devices become more ubiquitous and with their increasing computing
    capability, we now have an unprecedented opportunity to develop novel interactive
    data visualization tools using high-performance graphics hardware directly integrated
    into modern mobile devices.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过展示如何使用 **嵌入式系统中的 OpenGL**（**OpenGL ES**）在最新的移动设备上可视化数据，从智能手机到平板电脑，过渡到一个越来越强大且无处不在的计算平台。随着移动设备的普及和计算能力的增强，我们现在有了一个前所未有的机会，可以直接使用集成到现代移动设备中的高性能图形硬件来开发新颖的交互式数据可视化工具。
- en: OpenGL ES plays an important role in standardizing the 2D and 3D graphics APIs
    to allow the large-scale deployment of mobile applications on embedded systems
    with various hardware settings. Among the various mobile platforms (predominantly
    Google Android, Apple iOS, and Microsoft Windows Phone), the Android mobile operating
    system is currently one of the most popular ones. Therefore, in this chapter,
    we will focus primarily on the development of an Android-based application (API
    18 and higher) using OpenGL ES 3.0, which provides a newer version of GLSL support
    (including full support for integer and 32-bit floating point operations) and
    enhanced texture rendering support. Nevertheless, OpenGL ES 3.0 is also supported
    on other mobile platforms, such as Apple iOS and Microsoft Phone.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: OpenGL ES 在标准化 2D 和 3D 图形 API 中发挥着重要作用，允许在具有各种硬件设置的嵌入式系统上大规模部署移动应用程序。在各种移动平台（主要是
    Google Android、Apple iOS 和 Microsoft Windows Phone）中，Android 移动操作系统目前是最受欢迎的之一。因此，在本章中，我们将主要关注使用
    OpenGL ES 3.0 开发基于 Android 的应用程序（API 18 及以上版本）的开发，它提供了 GLSL 的新版本支持（包括对整数和 32 位浮点操作的全面支持）以及增强的纹理渲染支持。尽管如此，OpenGL
    ES 3.0 也支持其他移动平台，如 Apple iOS 和 Microsoft Phone。
- en: Here, we will first introduce how to set up the Android development platform,
    including the SDK that provides the essential tools to build mobile applications,
    and the NDK, which enables the use of native-code languages (C/C++) for high-performance
    scientific computing and simulations by exploiting direct hardware acceleration.
    We will provide a script to simplify the process of deploying your first Android-based
    application on your mobile device.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将首先介绍如何设置 Android 开发平台，包括提供构建移动应用程序基本工具的 SDK，以及允许通过直接硬件加速使用本地代码语言（C/C++）进行高性能科学计算和仿真的
    NDK。我们将提供一个脚本，以简化在您的移动设备上部署第一个基于 Android 的应用程序的过程。
- en: Setting up the Android SDK
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Android SDK
- en: The Google Android OS website provides a standalone package for Android application
    development called the **Android SDK**. It contains all the necessary compilation
    and debugging tools to develop an Android application (except native code support,
    which is provided by the Android NDK). The upcoming steps explain the installation
    procedure in Mac OS X or, similarly, in Linux, with minor modifications to the
    script and binary packages required.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Google Android OS 网站提供了一个名为 **Android SDK** 的独立包，用于 Android 应用程序开发。它包含开发 Android
    应用程序所需的所有必要的编译和调试工具（除了由 Android NDK 提供的本地代码支持）。接下来的步骤解释了在 Mac OS X 或类似地，在 Linux
    上的安装过程，需要对脚本和二进制包进行一些小的修改。
- en: How to do it...
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To install the Android SDK, follow these steps:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 Android SDK，请按照以下步骤操作：
- en: Download the standalone package from the Android Developers website at [http://dl.google.com/android/android-sdk_r24.3.3-macosx.zip](http://dl.google.com/android/android-sdk_r24.3.3-macosx.zip).
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Android 开发者网站下载独立包，网址为 [http://dl.google.com/android/android-sdk_r24.3.3-macosx.zip](http://dl.google.com/android/android-sdk_r24.3.3-macosx.zip)。
- en: 'Create a new directory called `3rd_party/android` and move the setup file into
    this folder:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `3rd_party/android` 的新目录，并将设置文件移动到该文件夹：
- en: '[PRE0]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Unzip the package:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解压包：
- en: '[PRE1]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Execute the Android SDK Manager:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行 Android SDK Manager：
- en: '[PRE2]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Select **Android 4.3.1 (API 18)** from the list of packages in addition to the
    default options. Deselect **Android M (API22, MBC preview)** and **Android 5.1.1
    (API 22)**. Press the **Install 9 packages...** button on the **Android SDK Manager**
    screen, as shown here:![How to do it...](img/9727OS_07_01.jpg)
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从包列表中选择**Android 4.3.1 (API 18)**，除了默认选项外。取消选择**Android M (API22, MBC preview)**和**Android
    5.1.1 (API 22)**。在**Android SDK Manager**界面上按下**安装 9 个包...**按钮，如图所示：![如何操作...](img/9727OS_07_01.jpg)
- en: Select **Accept** **License** and click on the **Install** button:![How to do
    it...](img/9727OS_07_02.jpg)
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**接受****许可**并点击**安装**按钮：![如何操作...](img/9727OS_07_02.jpg)
- en: 'To verify the installation, type the following command into the terminal:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要验证安装，请在终端中输入以下命令：
- en: '[PRE3]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This is an example that illustrates the successful installation of the Android
    4.3.1 platform:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是一个说明 Android 4.3.1 平台成功安装的示例：
- en: '[PRE4]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Finally, we will install Apache Ant to automate the software build process
    for Android application development. We can easily obtain the Apache Ant package
    by using MacPort with the command line or from its official website at [http://ant.apache.org/](http://ant.apache.org/):'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将安装 Apache Ant 以自动化 Android 应用程序开发的软件构建过程。我们可以通过使用 MacPort 命令行或从其官方网站 [http://ant.apache.org/](http://ant.apache.org/)
    轻易地获取 Apache Ant 包：
- en: '[PRE5]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: See also
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: To install the Android SDK in Linux or Windows, download the corresponding installation
    files and follow the instructions on the Android developer website at [https://developer.android.com/sdk/index.html](https://developer.android.com/sdk/index.html).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Linux 或 Windows 上安装 Android SDK，下载相应的安装文件，并遵循 Android 开发者网站上的说明，网址为 [https://developer.android.com/sdk/index.html](https://developer.android.com/sdk/index.html)。
- en: 'The setup procedures to set up the Android SDK in Linux are essentially identical
    using the command-line interface, except that a different standalone package should
    be downloaded using this link: [http://dl.google.com/android/android-sdk_r24.3.3-linux.tgz](http://dl.google.com/android/android-sdk_r24.3.3-linux.tgz).'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 上设置 Android SDK 的设置程序与使用命令行界面基本相同，只是应该使用此链接下载不同的独立包：[http://dl.google.com/android/android-sdk_r24.3.3-linux.tgz](http://dl.google.com/android/android-sdk_r24.3.3-linux.tgz)。
- en: 'In addition, for Windows users, the standalone package can be obtained using
    this link: [http://dl.google.com/android/installer_r24.3.3-windows.exe](http://dl.google.com/android/installer_r24.3.3-windows.exe).'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，对于 Windows 用户，可以通过此链接获取独立包：[http://dl.google.com/android/installer_r24.3.3-windows.exe](http://dl.google.com/android/installer_r24.3.3-windows.exe)。
- en: 'To verify that your mobile phone has proper OpenGL ES 3.0 support, consult
    the Android documentation on how to check the OpenGL ES version at runtime: [http://developer.android.com/guide/topics/graphics/opengl.html#version-check](http://developer.android.com/guide/topics/graphics/opengl.html#version-check).'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证您的手机是否具有适当的 OpenGL ES 3.0 支持，请参考 Android 文档中关于如何在运行时检查 OpenGL ES 版本的说明：[http://developer.android.com/guide/topics/graphics/opengl.html#version-check](http://developer.android.com/guide/topics/graphics/opengl.html#version-check)。
- en: Setting up the Android Native Development Kit (NDK)
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Android 原生开发工具包 (NDK)
- en: The Android NDK environment is essential for native-code language development.
    Here, we will outline the setup steps for the Mac OS X platform again.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Android NDK 环境对于原生代码语言开发至关重要。在这里，我们将再次概述 Mac OS X 平台的设置步骤。
- en: How to do it...
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To install the Android NDK, follow these steps:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 Android NDK，请按照以下步骤操作：
- en: Download the NDK installation package from the Android developer website at
    [http://dl.google.com/android/ndk/android-ndk-r10e-darwin-x86_64.bin](http://dl.google.com/android/ndk/android-ndk-r10e-darwin-x86_64.bin).
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Android 开发者网站下载 NDK 安装包，网址为 [http://dl.google.com/android/ndk/android-ndk-r10e-darwin-x86_64.bin](http://dl.google.com/android/ndk/android-ndk-r10e-darwin-x86_64.bin)。
- en: 'Move the setup file into the same installation folder:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将设置文件移动到相同的安装文件夹：
- en: '[PRE6]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Set the permission of the file to be an executable:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件的权限设置为可执行：
- en: '[PRE7]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Run the NDK installation package:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 NDK 安装包：
- en: '[PRE8]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The installation process is fully automated and the following output confirms
    the successful installation of the Android NDK:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装过程完全自动化，以下输出确认了 Android NDK 安装的成功：
- en: '[PRE9]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: See also
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: To install the Android NDK on Linux or Windows, download the corresponding installation
    files and follow the instructions on the Android developer website at [https://developer.android.com/tools/sdk/ndk/index.html](https://developer.android.com/tools/sdk/ndk/index.html).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Linux或Windows上安装Android NDK，下载相应的安装文件，并遵循Android开发者网站上的说明：[https://developer.android.com/tools/sdk/ndk/index.html](https://developer.android.com/tools/sdk/ndk/index.html)。
- en: Developing a basic framework to integrate the Android NDK
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发用于集成Android NDK的基本框架
- en: Now that we have successfully installed the Android SDK and NDK, we will demonstrate
    how to develop a basic framework to integrate native C/C++ code into a Java-based
    Android application. Here, we describe the general mechanism to create high-performance
    code for deployment on mobile devices using OpenGL ES 3.0.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经成功安装了Android SDK和NDK，我们将演示如何开发一个基本框架，将本地C/C++代码集成到基于Java的Android应用程序中。在这里，我们描述了使用OpenGL
    ES 3.0在移动设备上部署高性能代码的一般机制。
- en: OpenGL ES 3.0 supports both Java and C/C++ interfaces. Depending on the specific
    requirements of the application, you may choose to implement the solution in Java
    due to its flexibility and portability. For high-performance computing and applications
    that require a high memory bandwidth, it is preferable that you use the NDK for
    fine-grain optimization and memory management. In addition, we can port our existing
    libraries, such as OpenCV with Android NDK, using static library linking. The
    cross-platform compilation capability opens up many possibilities for real-time
    image and signal processing on a mobile platform with minimal development effort.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: OpenGL ES 3.0支持Java和C/C++接口。根据应用程序的具体要求，您可能因为其灵活性和可移植性而选择在Java中实现解决方案。对于高性能计算和需要高内存带宽的应用程序，您最好使用NDK进行细粒度优化和内存管理。此外，我们可以使用静态库链接将现有的库，如使用Android
    NDK的OpenCV，移植到我们的项目中。跨平台编译能力为在移动平台上以最小的开发工作量进行实时图像和信号处理开辟了许多可能性。
- en: 'Here, we introduce a basic framework that consists of three classes: `GL3JNIActivity`,
    `GL3JNIView`, and `GL3JNIActivity`. We show a simplified class diagram in the
    following figure, illustrating the relationship between the classes. The native
    code (C/C++) is implemented separately and will be described in detail in the
    next section:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们介绍了一个由三个类组成的简单框架：`GL3JNIActivity`、`GL3JNIView`和`GL3JNIActivity`。我们将在以下图中展示一个简化的类图，说明这些类之间的关系。本地代码（C/C++）将单独实现，并在下一节中详细描述：
- en: '![Developing a basic framework to integrate the Android NDK](img/9727OS_07_03.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![开发用于集成Android NDK的基本框架](img/9727OS_07_03.jpg)'
- en: How to do it...
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'First, we will create the core Java source files that are essential to an Android
    application. These files serve as a wrapper for our OpenGL ES 3.0 native code:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建对Android应用程序至关重要的核心Java源文件。这些文件作为我们OpenGL ES 3.0本地代码的包装器：
- en: 'In the project directory, create a folder named `src/com/android/gl3jni` with
    the following command:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目目录中，使用以下命令创建一个名为`src/com/android/gl3jni`的文件夹：
- en: '[PRE10]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Create the first class, `GL3JNIActivity`, in the Java source file, `GL3JNIActivity.java`,
    within the new folder, `src/com/android/gl3jni/`:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新文件夹`src/com/android/gl3jni/`中的Java源文件`GL3JNIActivity.java`中创建第一个类`GL3JNIActivity`：
- en: '[PRE11]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next, implement the `GL3JNIView` class, which handles the OpenGL rendering
    setup in the `GL3JNIView.java` source file inside `src/com/android/gl3jni/`:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，实现`GL3JNIView`类，该类在`src/com/android/gl3jni/`目录下的`GL3JNIView.java`源文件中处理OpenGL渲染设置：
- en: '[PRE12]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Finally, create the `GL3JNILib` class to handle native library loading and
    calling in `GL3JNILib.java` inside `src/com/android/gl3jni`:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在`src/com/android/gl3jni`目录下的`GL3JNILib.java`中创建`GL3JNILib`类来处理本地库的加载和调用：
- en: '[PRE13]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, in the project directory of the project, add the `AndroidManifest.xml`
    file, which contains all the essential information about your application on the
    Android system:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在项目的项目目录中添加`AndroidManifest.xml`文件，该文件包含关于您在Android系统中的应用程序的所有必要信息：
- en: '[PRE14]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In the `res/values/` directory, add the `strings.xml` file, which saves our
    application''s name:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`res/values/`目录下，添加`strings.xml`文件，该文件保存了我们的应用程序名称：
- en: '[PRE15]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How it works...
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The following class diagram illustrates the core functions and relationships
    between the classes. Similar to all other Android applications with a user interface,
    we define the **Activity** class, which handles the core interactions. The implementation
    of `GL3JNIActivity` is straightforward. It captures the events from the Android
    application (for example, `onPause` and `onResume`) and also creates an instance
    of the `GL3JNIView` class, which handles graphics rendering. Instead of adding
    UI elements, such as textboxes or labels, we create a surface based on `GLSurfaceView`,
    which handles hardware-accelerated OpenGL rendering:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的类图展示了核心函数和类之间的关系。类似于所有其他具有用户界面的 Android 应用程序，我们定义了 **Activity** 类，它处理核心交互。`GL3JNIActivity`
    的实现很简单。它捕获 Android 应用程序的事件（例如，`onPause` 和 `onResume`），并创建一个 `GL3JNIView` 类的实例，该实例处理图形渲染。我们不是添加
    UI 元素，如文本框或标签，而是基于 `GLSurfaceView` 创建一个表面，该表面处理硬件加速的 OpenGL 渲染：
- en: '![How it works...](img/9727OS_07_04.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/9727OS_07_04.jpg)'
- en: The `GL3JNIView` class is a subclass of the `GLSurfaceView` class, which provides
    a dedicated surface for OpenGL rendering. We choose the RGB8 color mode, a 16-bit
    depth buffer, and no stencil with the `setEGLConfigChooser` function and ensure
    that the environment is set up for OpenGL ES 3.0 by using the `setEGLContextClientVersion`
    function. The `setRenderer` function then registers the custom `Renderer` class,
    which is responsible for the actual OpenGL rendering.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`GL3JNIView` 类是 `GLSurfaceView` 类的子类，它提供了一个专门用于 OpenGL 渲染的表面。我们通过 `setEGLConfigChooser`
    函数选择了 RGB8 颜色模式、16 位深度缓冲区，并且没有使用模板缓冲区，并通过 `setEGLContextClientVersion` 函数确保环境已设置为
    OpenGL ES 3.0。然后，`setRenderer` 函数注册了自定义的 `Renderer` 类，该类负责实际的 OpenGL 渲染。'
- en: The `Renderer` class implements the key event functions—`onDrawFrame`, `onSurfaceChanged`,
    and `onSurfaceCreated`—in the rendering loop. These functions connect to the native
    implementation (C/C++) portion of the code that is handled by the `GL3JNILib`
    class.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`Renderer` 类在渲染循环中实现了关键事件函数——`onDrawFrame`、`onSurfaceChanged` 和 `onSurfaceCreated`——这些函数连接到由
    `GL3JNILib` 类处理的代码的原生实现（C/C++）。'
- en: Finally, the `GL3JNILib` class creates the interface to communicate with the
    native code functions. First, it loads the native library named `gl3jni`, which
    contains the actual OpenGL ES 3.0 implementation. The function prototypes, `step`
    and `init`, are used to interface with the native code, which will be defined
    separately in the next section. Note that we can also pass in the canvas width
    and height values to the native functions as parameters.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`GL3JNILib` 类创建了一个与原生代码函数通信的接口。首先，它加载名为 `gl3jni` 的原生库，该库包含实际的 OpenGL ES 3.0
    实现。函数原型 `step` 和 `init` 用于与原生代码接口，这些代码将在下一节中单独定义。请注意，我们还可以将画布宽度和高度值作为参数传递给原生函数。
- en: The `AndroidManifest.xml` and `strings.xml` files are the configuration files
    required by the Android application, and they must be stored in the root directory
    of the project in the XML format. The `AndroidManifest.xml` file defines all the
    essential information including the name of the Java package and the declaration
    of permission requirements (for example, file read/write access), as well as the
    minimum version of the Android API that the application requires.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`AndroidManifest.xml` 和 `strings.xml` 文件是 Android 应用程序所需的配置文件，它们必须以 XML 格式存储在项目的根目录中。`AndroidManifest.xml`
    文件定义了所有必要的信息，包括 Java 包的名称、权限要求的声明（例如，文件读写访问），以及应用程序所需的最低 Android API 版本。'
- en: See also
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: For further information on Android application development, the Android Developers
    website provides detailed documentation on the API at [http://developer.android.com/guide/index.html](http://developer.android.com/guide/index.html).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 Android 应用程序开发的更多信息，Android 开发者网站提供了关于 API 的详细文档，请参阅 [http://developer.android.com/guide/index.html](http://developer.android.com/guide/index.html)。
- en: For further information on using OpenGL ES within an Android application, the
    Android programming guide describes the programming workflow in detail and provides
    useful examples at [http://developer.android.com/training/graphics/opengl/environment.html](http://developer.android.com/training/graphics/opengl/environment.html).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 关于在 Android 应用程序中使用 OpenGL ES 的更多信息，Android 编程指南详细描述了编程工作流程，并在 [http://developer.android.com/training/graphics/opengl/environment.html](http://developer.android.com/training/graphics/opengl/environment.html)
    提供了有用的示例。
- en: Creating your first Android application with OpenGL ES 3.0
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 OpenGL ES 创建您的第一个 Android 应用程序
- en: 'In this section, we will complete our implementation with native code in C/C++
    to create the first Android application with OpenGL ES 3.0\. As illustrated in
    the simplified class diagram, the Java code only provides the basic interface
    on the mobile device. Now, on the C/C++ side, we implement all the functionalities
    previously defined on the Java side and also include all the required libraries
    from OpenGL ES 3.0 (inside the `main_simple.cpp` file). The `main_simple.cpp`
    file also defines the key interface between the C/C++ and Java side by using the
    **Java Native Interface** (**JNI**):'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating your first Android application with OpenGL ES 3.0](img/9727OS_07_05.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We assume that you have installed all the prerequisite tools from the Android
    SDK and NDK in addition to setting up the basic framework introduced in the previous
    section. Also, you should review the basics of shader programming, introduced
    in earlier chapters, before you proceed.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here, we describe the implementation of the OpenGL ES 3.0 native code to complete
    the demo application:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: 'In the project directory, create a folder named `jni` by using the following
    command:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Create a file named `main_simple.cpp` and store it inside the `jni` directory.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include all necessary header files for JNI and OpenGL ES 3.0:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Include the logging header and define the macros to show the debug messages:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Declare the shader program variables for our demo application:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Define the shader program code for the vertex shader and the fragment shader:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Implement the error call handlers for OpenGL ES, using the Android log:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Implement the vertex or fragment program-loading mechanisms. The warning and
    error messages are redirected to the Android log output:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Implement the shader program creation mechanism. The function also attaches
    and links the shader program:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Create a function to handle the initialization. This function is a helper function
    that handles requests from the Java side:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Set up the rendering function that draws a triangle on the screen with red,
    green, and blue vertices:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Define the JNI prototypes that connect to the Java side. These calls are the
    interfaces to communicate between the Java code and the C/C++ native code:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Set up the internal function calls with the helper functions:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now that we have completed the implementation of the native code, we must compile
    the code and link it to the Android application. To compile the code, create a
    `build` file that is similar to a `Makefile`, called `Android.mk`, in the `jni`
    folder:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In addition, we must create an `Application.mk` file that provides information
    about the build type, such as the **Application Binary Interface** (**ABI**).
    The `Application.mk` file must be stored inside the `jni` directory:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'At this point, we should have the following list of files in the root directory:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'To compile the native source code and deploy our application on a mobile phone,
    run the following `build` script in the terminal, which is shown as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要编译原生源代码并在手机上部署我们的应用程序，请在终端中运行以下`build`脚本，如下所示：
- en: 'Set up our environment variables for the SDK and the NDK. (Note that the following
    relative paths assume that the SDK and NDK are installed 3 levels outside the
    current directory, where the `compile.sh` and `install.sh` scripts are executed
    in the code package. These paths should be modified to match your code directory
    structure as necessary.):'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '设置SDK和NDK的环境变量。（请注意，以下相对路径假设SDK和NDK安装在当前目录外3级，其中`compile.sh`和`install.sh`脚本在代码包中执行。根据需要，应修改这些路径以匹配您的代码目录结构）： '
- en: '[PRE31]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Initialize the project with the android `update` command for the first-time
    compilation. This will generate all the necessary files (such as the `build.xml`
    file) for later steps:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用android `update`命令初始化项目以进行首次编译。这将生成后续步骤所需的所有必要文件（如`build.xml`文件）：
- en: '[PRE32]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Compile the JNI native code with the `build` command:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`build`命令编译JNI原生代码：
- en: '[PRE33]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Run the `build` command. Apache Ant takes the `build.xml` script and builds
    the **Android Application Package** (**APK**) file that is ready for deployment:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`build`命令。Apache Ant会读取`build.xml`脚本并构建准备部署的**Android应用程序包**（**APK**）文件：
- en: '[PRE34]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Install the Android application by using the **Android Debug Bridge** (**adb**)
    command:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**Android调试桥接器**（**adb**）命令安装Android应用程序：
- en: '[PRE35]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'For this command to work, before connecting the mobile device through the USB
    port, ensure that the USB Debugging mode is enabled and accept any prompts for
    security-related warnings. On most devices, you can find this option by navigating
    to **Settings** | **Applications** | **Development** or **Settings** | **Developer**.
    However, on Android 4.2 or higher, this option is hidden by default and must be
    enabled by navigating to **Settings** | **About Phone** (or **About Tablet**)
    and tapping **Build Number** multiple times. For further details, follow the instructions
    provided on the official Android Developer website at [http://developer.android.com/tools/device.html](http://developer.android.com/tools/device.html).
    Here is a sample screenshot of an Android phone with the USB debugging mode successfully
    configured:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 要使此命令生效，在通过USB端口连接移动设备之前，请确保已启用USB调试模式并接受任何与安全相关的警告提示。在大多数设备上，您可以通过导航到**设置**
    | **应用程序** | **开发**或**设置** | **开发者**来找到此选项。然而，在Android 4.2或更高版本中，此选项默认隐藏，必须通过导航到**设置**
    | **关于手机**（或**关于平板电脑**）并多次点击**构建号**来启用。有关进一步详情，请遵循官方Android开发者网站提供的说明，网址为[http://developer.android.com/tools/device.html](http://developer.android.com/tools/device.html）。以下是成功配置USB调试模式的Android手机示例截图：
- en: '![How to do it...](img/9727OS_07_06.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/9727OS_07_06.jpg)'
- en: 'After the application is installed, we can execute the application as we normally
    do with any other Android application by opening it directly using the application
    icon on the phone, as shown here:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序安装后，我们可以像使用任何其他Android应用程序一样执行它，只需直接通过手机上的应用程序图标打开即可，如图所示：
- en: '![How to do it...](img/9727OS_07_07.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/9727OS_07_07.jpg)'
- en: 'A screenshot after launching the application is shown next. Note that the CPU
    monitor has been enabled to show the CPU utilization. This is not enabled by default
    but can be found in **Developer Options**. The application supports both the portrait
    and landscape modes and the graphics automatically scale to the window size upon
    changing the frame buffer size:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了启动应用程序后的截图。请注意，CPU监视器已被启用以显示CPU利用率。默认情况下，此功能未启用，但可以在**开发者选项**中找到。应用程序支持纵向和横向模式，并且在更改帧缓冲区大小时，图形会自动缩放到窗口大小：
- en: '![How to do it...](img/9727OS_07_08.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/9727OS_07_08.jpg)'
- en: 'Here is another screenshot of the landscape mode:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这是横向模式的另一张截图：
- en: '![How to do it...](img/9727OS_07_09.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/9727OS_07_09.jpg)'
- en: How it works...
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This chapter demonstrates the portability of our approach in previous chapters.
    Essentially, the native code developed in this chapter resembles what we covered
    in previous chapters. In particular, the shader program's creation and loading
    mechanism is virtually identical, except that we have used a predefined string
    (`static char[]`) to simplify the complexity of loading files in Android. However,
    there are some subtle differences. Here, we will list the differences and new
    features.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 本章展示了我们在前几章中方法的可移植性。本质上，本章开发的原生代码与我们之前章节中介绍的内容相似。特别是，着色器程序的创建和加载机制几乎完全相同，只是我们在
    Android 中使用了一个预定义的字符串（`static char[]`）来简化加载文件的复杂性。然而，也有一些细微的差异。在这里，我们将列出这些差异和新特性。
- en: In the fragment program and vertex program, we need to add the `#version 300
    es` directive to ensure that the shader code can access the new features, such
    as uniform blocks and the full support of integer and floating point operations.
    For example, OpenGL ES 3.0 replaces the attribute and varying qualifiers with
    the **in** and **out** keywords. This standardization allows much faster code
    development of OpenGL on various platforms.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在片段程序和顶点程序中，我们需要添加 `#version 300 es` 指令以确保着色器代码可以访问新特性，例如统一块和整数及浮点运算的全面支持。例如，OpenGL
    ES 3.0 用 **in** 和 **out** 关键字替换了属性和变元限定符。这种标准化使得在各个平台上开发 OpenGL 代码的速度大大加快。
- en: The other notable difference is that we have replaced the GLFW library completely
    with the EGL library, which comes as a standard library in Android, for context
    management. All event handling, such as Windows management and user inputs, are
    now handled through the Android API and the native code is only responsible for
    graphics rendering.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个显著的差异是，我们完全用 EGL 库替换了 GLFW 库，EGL 库是 Android 中的标准库，用于上下文管理。所有事件处理，如窗口管理和用户输入，现在都通过
    Android API 和原生代码来处理，原生代码只负责图形渲染。
- en: 'The Android log and error reporting system is now accessible through the Android
    `adb` program. The interaction is similar to a terminal output, and we can see
    the log in real time with the following command:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: Android 日志和错误报告系统现在可以通过 Android `adb` 程序访问。交互类似于终端输出，我们可以使用以下命令实时查看日志：
- en: '[PRE36]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'For example, our application reports the OpenGL ES version, as well as the
    extensions supported by the mobile device in the log. With the preceding command,
    we can extract the following information:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们的应用程序在日志中报告 OpenGL ES 版本以及移动设备支持的扩展。使用前面的命令，我们可以提取以下信息：
- en: '[PRE37]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The real-time log data is very useful for debugging and can allow developers
    to quickly analyze the problem.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 实时日志数据对于调试非常有用，并允许开发者快速分析问题。
- en: 'One common question is how the Java and C/C++ elements communicate with each
    other. The JNI syntax is rather puzzling to understand in the first place, but
    we can decode it by carefully analyzing the following code snippet:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的问题是 Java 和 C/C++ 元素之间如何相互通信。JNI 语法一开始可能难以理解，但我们可以通过仔细分析以下代码片段来解码它：
- en: '[PRE38]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The `JNIEXPORT` and `JNICALL` tags allow the functions to be located in the
    shared library at runtime. The class name is specified by `com_android_gl3jni_GL3JNILib`
    (`com.android.gl3jni.GL3JNILib`), and `init` is the method name of the Java native
    function. As we can see, the period in the class name is replaced by an underscore.
    In addition, we have two additional parameters, namely the width and height of
    the frame buffer. More parameters can be simply appended to the end of the parameters'
    list in the function, as required.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`JNIEXPORT` 和 `JNICALL` 标签允许函数在运行时定位到共享库中。类名由 `com_android_gl3jni_GL3JNILib`
    (`com.android.gl3jni.GL3JNILib`) 指定，`init` 是 Java 原生函数的方法名。正如我们所见，类名中的点被下划线替换了。此外，我们还有两个额外的参数，即帧缓冲区的宽度和高度。根据需要，可以简单地将更多参数追加到函数参数列表的末尾。'
- en: In terms of backward compatibility, we can see that OpenGL 4.3 is a complete
    superset of OpenGL ES 3.0\. In OpenGL 3.1 and higher, we can see that the embedded
    system version of OpenGL and the standard Desktop version of OpenGL are slowly
    converging, which reduces the underlying complexity in maintaining various versions
    of OpenGL in the application life cycle.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在向后兼容性方面，我们可以看到 OpenGL 4.3 是 OpenGL ES 3.0 的完整超集。在 OpenGL 3.1 及更高版本中，我们可以看到嵌入式系统版本的
    OpenGL 和标准桌面版本的 OpenGL 正在缓慢趋同，这减少了在应用程序生命周期中维护各种 OpenGL 版本的底层复杂性。
- en: See also
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: A detailed description of the Android OS architecture is beyond the scope of
    this book. However, you are encouraged to consult the official developer workflow
    guide at [http://developer.android.com/tools/workflow/index.html](http://developer.android.com/tools/workflow/index.html).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: Android操作系统架构的详细描述超出了本书的范围。然而，你被鼓励查阅官方的开发者工作流程指南，链接为[http://developer.android.com/tools/workflow/index.html](http://developer.android.com/tools/workflow/index.html)。
- en: Further information on the OpenGL ES Shading Language can be found at [https://www.khronos.org/registry/gles/specs/3.0/GLSL_ES_Specification_3.00.3.pdf](https://www.khronos.org/registry/gles/specs/3.0/GLSL_ES_Specification_3.00.3.pdf).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 关于OpenGL ES着色语言的更多信息可以在[https://www.khronos.org/registry/gles/specs/3.0/GLSL_ES_Specification_3.00.3.pdf](https://www.khronos.org/registry/gles/specs/3.0/GLSL_ES_Specification_3.00.3.pdf)找到。
