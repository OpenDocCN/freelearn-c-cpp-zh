- en: Chapter 6. NPCs and Dialog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By now, you already have a player character by default that interacts with battles
    on the field, but the game is in dire need of **non-player characters** (**NPCs**).
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will create an NPC that will act as an information hub
    and shop owner. Since we have not yet given useable items and equipment to the
    character, or a reason for the character to have gold, the next logical step is
    to create a shop owner who will play the role of an NPC by talking to the player
    and offering the player business transactions when the player decides to interact
    with the NPC.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the NPC Character Blueprint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interacting with the NPC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dialog box setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an NPC welcome box
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding an NPC talk box
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the NPC Character Blueprint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To get started, we will need to create a new Character Blueprint class. Since
    we already have a location for characters, navigate to the `character` folder
    located in your **Content Browser** under **Content** | **Blueprints** | **Characters**
    (create a new `character` folder in `content/blueprints` if one is not there already,
    just to stay more organized; you can even drag your **FieldPlayer** Blueprint
    into the `character` folder if you''d like), and add a new character by clicking
    on **Add New** | **Blueprint Class**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the NPC Character Blueprint](img/B04548_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The **Pick Parent Class** window will pop up. This will allow you to pick a
    common parent class for your Blueprint class or create your own class:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the NPC Character Blueprint](img/B04548_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: UE4 has a lot of common classes built in, which have a lot of the frameworks
    of several different types of classes already built for us. One of those classes
    is **Character** which allows us to work with a common character framework for
    use with any type of character pawn we want. So, from this window, select **Character**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have selected **Character**, a new Character Blueprint should now
    be in **Content** | **Blueprints** | **Characters**. Rename the character as **NPC_ShopOwner**
    since we will be using this character as the shop owner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the NPC Character Blueprint](img/B04548_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'From here, open **NPC_ShopOwner** to enter the viewport of your new character:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the NPC Character Blueprint](img/B04548_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You should see that, as mentioned earlier, this class inherits `Character.h`
    which already has a framework for a lot of components. This will now make it easy
    for us to make a visible NPC. Within the **Components** panel, you will see **CapsuleComponent**,
    which holds inherited data such as **ArrowComponent** that determines which way
    the object is pointing, and **Mesh**, which holds an instance of a skeletal mesh.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us first apply a mesh and animations to our **Mesh** component. Since we
    are not creating character models and animations in this book, we can simply use
    built-in assets. First, click on **Mesh** within **Components** | **CapsuleComponent**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the NPC Character Blueprint](img/B04548_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'From here, you will notice that your **Details** panel changes in order to
    display the **Mesh** variable and its components. For now, we will want to keep
    most of the defaults here since the character has everything we would want out
    of an NPC. However, the character does not have a mesh, so let''s give it one
    by navigating to **Details** | **Mesh** and, in **Skeletal Mesh**, selecting the
    **None** drop-down menu that would house a skeletal mesh. Then, you should see
    all the skeletal meshes available in our project. In our game, there is a skeletal
    mesh called **SK_Mannequin**, we will select this as our skeletal mesh:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the NPC Character Blueprint](img/B04548_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have selected a skeletal mesh, you should see it displayed in your
    viewport. At this point, you may notice that your skeletal mesh is much higher
    than the bottom of the capsule because the skeletal mesh''s origin is at its feet
    and is attached to the origin of the capsule that is located in the middle of
    the capsule. There are a lot of ways to fix this problem, but the quickest way
    would be to reposition the character manually by bringing the character down on
    the *Z* axis. A value of **-90** for **Z Location** seems to work perfectly in
    this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the NPC Character Blueprint](img/B04548_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You will also want the character to be facing the right way. You can see that
    the character is faced the wrong way because the arrow component is pointing perpendicular
    to the way the character is facing. Simply adjust the character rotation on the
    *Z* axis. A value of **-90** for **Z Rotation** seems to do the trick:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the NPC Character Blueprint](img/B04548_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Lastly, we need to get the character out of the relaxed pose. So navigate to
    **Details** | **Animation** and select the **Anim Class** drop-down menu. In this
    drop-down menu, select **ThirdPerson_AnimBP**, which is the animation class for
    the character we selected. If you are using another character with a different
    animation class, be sure to select the animation class that is built for your
    character:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the NPC Character Blueprint](img/B04548_06_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We also need a way to interact with this character. For this, we are going
    to create a volume that expands a certain distance in front of the character;
    this will be the area in which the player is able to interact with the NPC. To
    do this, we will need to add another component to **CapsuleComponent**. Navigate
    to the **Components** panel and select **Add Component** | **Collision** | **Box
    Collision**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the NPC Character Blueprint](img/B04548_06_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This creates a box collision at the character''s origin:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the NPC Character Blueprint](img/B04548_06_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We are going to use this collision by calculating whether the player is inside
    the box or outside the box. If they are in the box, the player will be able to
    interact with the NPC; if the player is outside the box, the player will not be
    able to interact with the NPC. Since we want to make this as realistic as possible,
    the player should only interact with the NPC if the character is standing in front
    of the NPC. So adjust the location and scale of the box until it is in front of
    the character and sized such that the player can easily walk a forgivable distance
    in front of the NPC to interact with it.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this character, I will edit the **Location X** value to be **60**, **Scale
    X** value to be **2**, **Scale Y** value to be **2**, and **Scale Z** value to
    be **3**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the NPC Character Blueprint](img/B04548_06_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, we want to give the collision box a type that does not block the player,
    but allows the player to enter the collision box. Navigate to **Details** | **Collision**
    and under **Collision Presets**, select **Trigger**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the NPC Character Blueprint](img/B04548_06_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This will essentially turn the collision box into a trigger volume that can
    be used to trigger events such as dialog and shop menus.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, you can drag and drop your **NPC_ShopOwner** into your level:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the NPC Character Blueprint](img/B04548_06_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you playtest this, you should notice that you will collide with the skeletal
    mesh, but you will not collide with the trigger volume. You are now ready to create
    Blueprints to make this NPC interactive.
  prefs: []
  type: TYPE_NORMAL
- en: Interacting with the NPC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have made the NPC and volume that will trigger interaction with
    the NPC, it is time to program interaction with the NPC by using the trigger volume.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us first think about the logic. What we will want to do is only allow the
    player to interact with the NPC if the player is within the NPC''s line of sight
    (in this case, the trigger volume). If the player is not within the trigger volume,
    we do not want to allow the player to interact with the NPC. In this case, we
    will need some sort of Boolean that will return *true* if the player is in the
    trigger volume and *false* if the character is not within the trigger volume.
    We also want to allow the player to press a key to interact with the NPC, but
    only when the Boolean we create is set to true, since the Boolean we create to
    keep track of the NPC trigger volume may span across multiple classes. Just like
    in the previous chapters, let''s declare that global variable in `RPGGameInstance.h`.
    We will put the variable in the same `Game Data` category that our other global
    variables are in, but this time, instead of only allowing the Blueprint to read
    the variable, we need to allow Blueprint to write the variable since we will be
    switching the variable between true and false. We will add a Boolean called `TalkShop`
    as one of our public variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When you are finished editing `RPGGameInstance.h`, your header file should
    now look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Compile the code and then head into the **NPC_ShopOwner** Character Blueprint.
    Select the **Box** component in the **Components** panel, and within the **Details**
    panel, scroll down to **Events**. You will notice that there are many different
    types of events that can be created here based around how the box is interacted
    with:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Interacting with the NPC](img/B04548_06_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We are most interested in **On Component Begin Overlap** and **On Component
    End Overlap** because these are the events that will trigger if something either
    intersects the box or does not intersect the box. Let us first work on triggering
    an event if the player intersects the box. So, within **Details** | **Events**
    | **On Component Begin Overlap**, select **+**. This will automatically open **Event
    Graph** and create an **OnComponentBeginOverlap** event:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Interacting with the NPC](img/B04548_06_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'All we will need to do here is simply set the `TalkShop` Boolean that we created
    previously to `true` if the player intersects the box. To do so, first cast to
    the **FieldPlayer** using **Cast To FieldPlayer** located under **Utilities**
    | **Casting** and set the interaction component to the **FieldPlayer** object
    by linking the **OtherActor** pin within **OnComponentBeginOverlap** to the **Object**
    pin within the **Cast To FieldPlayer** node:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Interacting with the NPC](img/B04548_06_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'From here, we have **FieldPlayer** triggering a cast to **RPGGameInstance**
    using the **Cast To RPGGameInstance** node located under **Utilities** | **Casting**,
    whose **Object** pin is **Get Game Instance** since the `TalkShop` variable is
    located within **RPGGameInstance**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Interacting with the NPC](img/B04548_06_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Lastly, create a **Set Talk Shop** action by unchecking **Context Sensitive**,
    navigating to **Class** | **RPGGameInstance**, and selecting **Set Talk Shop**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Interacting with the NPC](img/B04548_06_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Have **Cast To RPGGameInstance** trigger the **Set Talk Shop** action and be
    sure that we are referencing the `TalkShop` variable within **RPGGameInstance**
    by linking the **As RPGGameInstance** pin from **Cast To RPGGameInstance** to
    the **Target** pin from **Set Talk Shop**. Also, be sure to set the `TalkShop`
    variable to `true` by checking the **Talk Shop** Boolean within the **Set Talk
    Shop** node. When you are finished, your Blueprint should look like the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Interacting with the NPC](img/B04548_06_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now that we are finished creating the **Begin Overlap** event, let us create
    our player/key interaction and check whether or not the **Talk Shop** Boolean
    is true or false. Since the player controller won't have direct access to **NPC_ShopOwner**,
    we will need to create the key interaction either within the Field Player class
    or the Level Blueprint class. Because the NPC is specifically part of this particular
    level and different levels will most likely house different NPCs, it would make
    the most sense for the key and Boolean check to be located within the Level Blueprint.
    So at this point, navigate to **Blueprints** | **Open Level Blueprint** to enter
    the Level Blueprint.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the Level Blueprint, we will create a key event to the letter *E* by
    navigating to **Input** | **Key Events** | **E**. Then, upon release of the *E*
    key (because we want the player to commit to the key press), trigger **Cast To
    RPGGameInstance** whose object is **Get Game Instance** because upon the key press,
    we will want to check the status of the `TalkShop` variable that is located within
    **RPGGameInstance**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Interacting with the NPC](img/B04548_06_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Reference the `TalkShop` variable by dragging out the **As RPGGameInstance**
    pin within **Cast To RPGGameInstance**, navigate to **Variables** | **Game Data**
    and then select **Get Talk Shop**, since we will be checking **Talk Shop**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Interacting with the NPC](img/B04548_06_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we are referencing the `TalkShop` variable, we can check the condition
    of **Talk Shop** by creating a **Branch** statement located under **Utilities**
    | **Flow Control**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Interacting with the NPC](img/B04548_06_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Link the **Talk Shop** pin to the **Condition** pin within the **Branch** node
    to check the condition of `TalkShop`, and have the **Cast To RPGGameInstance**
    activate **Branch**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Interacting with the NPC](img/B04548_06_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have this framework set up, we can do something if the `TalkShop`
    condition is true or false. For now, we will just run a test by printing some
    text to the screen by navigating to **Utilities** | **Text** | **Print Text**,
    which will create a **Print Text** function. Link the **True** pin from the **Branch**
    node to the **In** pin of **Print Text**. When you are finished, your Level Blueprint
    should look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Interacting with the NPC](img/B04548_06_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you test this now, you should notice that if the player presses the *E*
    key outside the NPC trigger volume, nothing will happen; however, if the player
    presses *E* when they are within the trigger volume, text will appear on the screen.
    However, if we exit the volume and continue to press *E*, the text will continue
    to appear on the screen. This is because we are never setting the `TalkShop` Boolean
    back to `false`. Doing this is very simple. Navigate back to **NPC_ShopOwner**
    and select **+** under **Details** | **On Component End Overlap** to create an
    **OnComponentEndOverlap** event:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Interacting with the NPC](img/B04548_06_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Since we have already created a reference to **Talk Shop** when creating the
    **OnComponentBeginOverlap** event, and set that reference to true, we can simply
    make the **OnComponentEndOverlap** event that does the exact same thing as the
    **OnComponentBeginOverlap**; however, instead of setting `TalkShop` to `true`,
    set `TalkShop` to `false` by making sure the **Talk Shop** pin within the **Set
    Talk Shop** node is unchecked. Your **OnComponentEndOverlap** event should now
    look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Interacting with the NPC](img/B04548_06_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When you test this now, interaction with the NPC via the *E* key should only
    work if the player is intersecting the NPC's trigger volume as intended.
  prefs: []
  type: TYPE_NORMAL
- en: Dialog box setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are now ready to create dialog that our NPC will state to the character.
    To do this, we will first create a Widget Blueprint that will be responsible for
    housing all parent variables of the NPC, such as the dialog in the game, so that
    we can simply pull dialog anytime we need it by calling the dialog variable within
    the function. This process will be better than the hardcoding text in UMG because
    it will allow us to need only a single dialog UMG that we will dynamically place
    text into.
  prefs: []
  type: TYPE_NORMAL
- en: 'So let''s first create a new Widget Blueprint by navigating to **Content Browser**
    | **Content** | **Blueprints** | **UI** and then selecting **Add New** | **User
    Interface** | **Widget Blueprint**. Then, name it **NPC_Parent**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dialog box setup](img/B04548_06_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once created, open the new Widget Blueprint and then navigate to the graph.
    From here, head to the **My Blueprint** panel and select **+** to the right of
    **Variables**; this will create a new variable. Name this variable **NPCDialog**
    and make it public by clicking the eye to the right of the variable name:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dialog box setup](img/B04548_06_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the **Details** panel, change **Variable Type** to **Text** since we will
    be using text to display dialog. Also, click on the square icon to the right of
    **Variable Type** to make the variable a text array:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dialog box setup](img/B04548_06_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, scroll down to the **Default Value** tab within the **Details** panel
    to the area that contains elements of an array. By default, it does not have elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dialog box setup](img/B04548_06_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In **Details** | **Default Value**, click on **+** next to **elements** to
    add an element that will create a text box next to the element **0**. Put a value
    in this element by writing some text. You can write any form of text you want
    here; since at one point I plan to have the NPC give the player information, I
    will make the dialog say *You can check out your Character Status by pressing
    P when you are outside of battle*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dialog box setup](img/B04548_06_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Since our NPC is a shop owner, they can greet us, for example, by saying *Greetings.
    I am Roy, the shop owner, what can I do for you?* You can add this text as a second
    element in the **NPCDialog** array:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dialog box setup](img/B04548_06_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Whenever we need a new NPC variable that we may not want hardcoded, we can
    go back to this Widget Blueprint and add dialog like we did just now. Next, we
    can create the actual dialog for our NPC by navigating back to our **Content Browser**.
    Since we may end up having many different characters using the same dialog box
    just with different text in it, we may want to create another Widget Blueprint
    that just has a basic window and a button to exit the dialog box. In **Content
    Browser**, navigate to **Content** | **Blueprints** | **UI** and then select **Add
    New** | **User Interface** | **Widget Blueprint**. Then, name it **DialogBox**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dialog box setup](img/B04548_06_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Open the new Widget Blueprint. From here, navigate to **File** | **Reparent
    Blueprint** and reparent it to **NPC_Parent**, which holds all our variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dialog box setup](img/B04548_06_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Since dialog boxes are rarely the size of the entire screen, we are going to
    create a Canvas Panel within our default Canvas Panel by navigating to **Panel**
    | **Canvas Panel** and dragging the new Canvas Panel within the parent Canvas
    Panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dialog box setup](img/B04548_06_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Rename this new Canvas Panel **CanvasPanel_DialogBox**. Also, anchor this Canvas
    Panel to the middle of the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dialog box setup](img/B04548_06_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You may also want to resize the text box to hold a decent amount of text. I
    will resize this text box to have a **Size X** value of **1024** and **Size Y**
    value of **512**. You should also center the box by setting **Position X** to
    -1024/2 which is equal to **-512**, and **Position Y** to -512/2 which is equal
    to **-256**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dialog box setup](img/B04548_06_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Within **CanvasPanel_DialogBox**, add an image from **Palette** | **Common**
    | **Image** that we can use to add a background color in a similar way to what
    we did for the pause menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dialog box setup](img/B04548_06_39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the **Details** panel, rename this image **BGColor** and position and resize
    it so that it is in the middle of the screen. This can easily be done by choosing
    a center anchor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dialog box setup](img/B04548_06_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Resize and position this to be the same as the Canvas Panel, that is, the **Size
    X** value as **1024**, **Size Y** value as **512**, **Position X** value as **-512**,
    and **Position Y** value as **256**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dialog box setup](img/B04548_06_41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Lastly, under **Details** | **Appearance** | **Color and Opacity**, adjust
    the color to be the same as the other menus. In this case, we can select the color
    picker and pass in the linear hex value of **267FFFFF**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dialog box setup](img/B04548_06_42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, let us insert an exit button to leave this menu by selecting and dragging
    a button from **Palette** | **Common** | **Button** into **CanvasPanel_DialogBox**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dialog box setup](img/B04548_06_43.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Rename this button **Button_Exit** and position it towards the right-hand side
    of your Canvas Panel by first changing the size of your button to match the size
    of the pause menu buttons, which have the **Size X** value as **300** and the
    **Size Y** value as **100**. Then, position the button in the bottom-right of
    the Canvas Panel, by changing the anchor to bottom-right aligned. Then, use simple
    positions such as the one that gives 20 pixels of padding, that is, **Position
    X** as **-320** and **Position Y** as **-120**. You will also notice that the
    button is behind **BGColor**; simply change the **ZOrder** value to **1**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dialog box setup](img/B04548_06_44.jpg)![Dialog box setup](img/B04548_06_45.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that you have a button created and positioned, add a Text Block to it.
    Rename the text **TextBlock_Exit** and under **Details** | **Appearance** | **Font**,
    change the font size to **48**. Also, change the content of the Text Block to
    **Exit**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dialog box setup](img/B04548_06_46.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Program the button to exit as well, just like you did in the previous menu
    creations, by selecting the button, scrolling down to **OnClicked** in **Details**
    | **Events**, and then clicking on the **+** button. This will open up **Event
    Graph** and populate the **OnClicked** event for the exit button. Drag out the
    **Out** pin from the **OnClicked** event and select **Remove from Parent** located
    under **Widget**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dialog box setup](img/B04548_06_47.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Navigate back to the **Designer** view and add a Text Block to **CanvasPanel_DialogBox**,
    name it **TextBlock_Dialog**, and have it take up most of the Canvas Panel. For
    this, we can position the Text Block to have a padding of 20 pixels by giving
    **Position X** a value of **20** and **Position Y** a value of **20**. We can
    also set the size of the Text Block giving **Size X** a value of **986** and **Size
    Y** a value of **300**. Lastly, set the **ZOrder** value to **1**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dialog box setup](img/B04548_06_48.jpg)'
  prefs: []
  type: TYPE_IMG
- en: At this point, we are finished with creating the dialog box template. We can
    now move on to creating dialog boxes for our NPC.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an NPC welcome box
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have a template for our dialog boxes, let''s use them by creating
    custom dialog boxes for our NPC that are based on what we just created. To stay
    organized, we should make a separate folder for NPCs since we will most likely
    have a lot more UMG and opportunities to use our dialog box outside of the NPC
    creation. So within **Content Browser**, navigate to **Content** | **Blueprints**
    | **UI** and create a new folder under **Add New**. Name this folder `NPC` and
    then navigate into the folder. Create a duplicate of the **DialogBox** Widget
    Blueprint that you made in the previous section and move it into the `NPC` folder.
    Name the duplicated widget **Shop_Welcome**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an NPC welcome box](img/B04548_06_50.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Open the **Shop_Welcome** widget and select the **TextBlock_Dialog** Text Block.
    In **Details** | **Content**, create a new text binding that will then open up
    the graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an NPC welcome box](img/B04548_06_51.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'At this point, you can right click to find **All Actions for this Blueprint**,
    and under **Variables** | **Default**, you should find the **Get NPCDialog** variable
    which you can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an NPC welcome box](img/B04548_06_52.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'From here, drag out the **NPCDialog** array pin and select the **Get** function
    under **Utilities** | **Array**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an NPC welcome box](img/B04548_06_53.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'From here, you can select any of the text that is in **NPCDialog** by choosing
    the right element. Since the welcome text is in element 1, change the **0** in
    the **Get** function to **1**. To have this text return to the Text Block, link
    **GET** to **Return Value** of **ReturnNode**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an NPC welcome box](img/B04548_06_54.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Since this is the welcome dialog box, we will still allow the player to exit,
    but we should also allow them to get general details from the NPC or visit their
    shop. So let''s copy the **Exit** button and put place holders for both talking
    and shopping. Navigate back to the **Designer** view and make two more buttons
    on the left-hand side of the **Exit** button, one that says **Shop** and one that
    says **Talk**. You don''t have to program these buttons yet since we do not have
    a shop or talk UMG yet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an NPC welcome box](img/B04548_06_55.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, make this screen appear at the proper time by opening the Level Blueprint
    that you started at the beginning of this chapter. Instead of printing text to
    the screen when the **Talk Shop** condition is true, link **Create Widget** under
    **User Interface** to **True**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an NPC welcome box](img/B04548_06_56.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For the class, select **Shop_Welcome**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an NPC welcome box](img/B04548_06_57.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Lastly, display this to the screen by linking the Return Value pin of **Create
    Shop_Welcome Widget** to **Add to Viewport**, which is located under **User Interface**
    | **Viewport**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an NPC welcome box](img/B04548_06_58.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Also, give the player access to a mouse cursor by creating a **Get Player Controller**
    function under **Game** and linking its **Return Value** to **Set Show Mouse Cursor**
    located under **Class** | **Player Controller**. Finally, link the **Add to Viewport**
    node to the **Set Show Mouse Cursor** node and check **Show Mouse Cursor**. When
    you are finished, your Level Blueprint should look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an NPC welcome box](img/B04548_06_59.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you playtest this now, you should be able to still go up to the NPC and
    press *E* to interact with him, but this time a dialog box will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an NPC welcome box](img/B04548_06_60.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations, you have created your first dialog box. Now let us move on
    to making navigation buttons that open up other interactive widgets.
  prefs: []
  type: TYPE_NORMAL
- en: Adding an NPC talk box
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have already created a dialog box that pops up when the player
    interacts with the NPC, you can easily add dialog for the player to see when they
    click on the **Talk** button. Simply duplicate the **DialogBox** Widget Blueprint
    that you made previously and place it in the `NPC` folder under **Content Browser**
    located in **Content** | **Blueprints** | **UI**. Rename the duplicated Widget
    Blueprint **Shop_Talk**.
  prefs: []
  type: TYPE_NORMAL
- en: We will now add some proper dialog to this menu by opening the **Shop_Talk**
    Widget Blueprint. Then, within the **Designer** viewport, select the Text Block
    that is already placed into your Canvas Panel.
  prefs: []
  type: TYPE_NORMAL
- en: Once selected, navigate to **Details** | **Content** and, within **Text**, select
    **Bind** | **+ Create Binding**.
  prefs: []
  type: TYPE_NORMAL
- en: As always, this action will automatically bring you to the Graph Editor and
    set the **Get Text** function to return a null value from a **Return** node. The
    next steps are identical to the steps that you did when calling dialog from the
    **NPCDialog** variable in the previous sections. You must navigate to the **My
    Blueprint** tab and use the **GET** version of the **NPCDialog** variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, drag out the **NPCDialog** array pin and select the **Get** function
    under **Utilities** | **Array**. Lastly, have the **GET** function select the
    correct element of the **NPCDialog** array. In this case, we would keep element
    0 selected since we set our dialog in element 0 earlier in this chapter. Once
    the proper dialog is chosen, link **GET** to **Return Value** of the **ReturnNode**.
    At this point, your Graph Editor should look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding an NPC talk box](img/B04548_06_64.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You are now finished with the **Shop_Talk** Widget Blueprint. You need to now
    bind it to the **Talk** button in the **Shop_Welcome** Widget Blueprint, so open
    the **Designer** view in **Shop_Welcome** and select the **Talk** button. In the
    **Details** panel, navigate to **Events** and press the **+** button next to **OnClicked**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding an NPC talk box](img/B04548_06_65.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This should now create an **OnClicked** event bound to your **Talk** button
    and the Event Graph should now have automatically opened. From here, what we need
    to do is upon the button being clicked, we need to close the **Shop_Welcome**
    Widget Blueprint and open the **Shop_Talk** Widget Blueprint. These steps should
    be very similar to what you did many times previously when you opened and closed
    Widget Blueprints after button presses. Link the **OnClicked** event to **Remove
    from Parent** located under **Widget**, which will close your current Widget Blueprint.
    Then, link the **Create Widget** node to **Remove from Parent**, which is located
    under **User Interface**. Change the class of **Create Widget** to **Shop_Talk**
    so that your **Shop_Talk** Widget Blueprint is generated. From here, link **Add
    to Viewport** to **Return Value** of the **Create Shop_Talk Widget** node that
    is located under **User Interface** | **Viewport**. Also, be sure **Add to Viewport**
    is linked to the out pin of **Create Shop_Talk Widget** so that the Widget Blueprint
    is displayed in the player''s view only after the **Shop_Talk** widget is created.
    When you are finished, your **EventGraph** for your **Talk** button should look
    like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding an NPC talk box](img/B04548_06_66.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You may have noticed that the **Talk** button now works perfectly, but the
    text will get cut off:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding an NPC talk box](img/B04548_06_67.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is because we are not wrapping the text. To wrap the text, go back into
    the **Shop_Talk** Widget Blueprint and, in the **Designer** view, select the **Dialog**
    Text Block. Then, in the **Details** panel, navigate to **Appearance** and check
    **Auto Text Wrap**. This will ensure that the text is always wrapped around the
    content, which in this case will move the text to a new line when it hits the
    border of the Text Block. If you test the **Talk** button, the words should now
    wrap like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding an NPC talk box](img/B04548_06_68.jpg)'
  prefs: []
  type: TYPE_IMG
- en: At this point, you should have the interaction working perfectly between the
    player and the NPC with all buttons working properly, with the exception of the
    **Shop** button.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we created an NPC that can communicate with the player through
    the use of a trigger volume and key binding. Now, we can display dialog from an
    array of strings at any point in our game. In the next chapter, we will transform
    our NPC into a shop owner and allow the player to purchase equipment from the
    shop.
  prefs: []
  type: TYPE_NORMAL
