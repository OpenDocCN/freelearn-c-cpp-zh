- en: Chapter 1. Getting Started with Cocos2d-x
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. Cocos2d-x入门
- en: 'In this chapter, we''re going to install Cocos2d-x and set up the development
    environment. The following topics will be covered in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将安装Cocos2d-x并设置开发环境。本章将涵盖以下主题：
- en: Setting up our Android environment
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置我们的Android开发环境
- en: Installing Cocos2d-x
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Cocos2d-x
- en: Using the Cocos command
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Cocos命令
- en: Building the project using Xcode
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Xcode构建项目
- en: Building the project using Eclipse
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Eclipse构建项目
- en: Implementing multi-resolution support
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现多分辨率支持
- en: Preparing your original game
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备你的原始游戏
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Cocos2d-x is an open source, cross-platform game engine, which is free and mature.
    It can publish games for mobile devices and desktops, including iPhone, iPad,
    Android, Kindle, Windows, and Mac. Cocos2d-x is written in C++, so it can build
    on any platform. Cocos2d-x is open source written in C++, so we can feel free
    to read the game framework. Cocos2d-x is not a black box, and this proves to be
    a big advantage for us when we use it. Cocos2d-x version 3, which supports C++11,
    was only recently released. It also supports 3D and has an improved rendering
    performance. This book focuses on using version 3.4, which is the latest version
    of Cocos2d-x that was available at the time of writing this book. This book also
    focuses on iOS and Android development, and we'll be using Mac because we need
    it to develop iOS applications. This chapter explains how to set up Cocos2d-x.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Cocos2d-x是一个开源的跨平台游戏引擎，它是免费且成熟的。它可以发布适用于移动设备和桌面设备（包括iPhone、iPad、Android、Kindle、Windows和Mac）的游戏。Cocos2d-x是用C++编写的，因此可以在任何平台上构建。Cocos2d-x是用C++编写的开源项目，因此我们可以自由地阅读游戏框架。Cocos2d-x不是一个黑盒，这在我们使用它时证明是一个很大的优势。支持C++11的Cocos2d-x版本3最近才发布。它还支持3D，并具有改进的渲染性能。本书专注于使用3.4版本，这是本书写作时可用的最新版本的Cocos2d-x。本书还专注于iOS和Android开发，我们将使用Mac，因为我们需要它来开发iOS应用程序。本章解释了如何设置Cocos2d-x。
- en: Setting up our Android Environment
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置我们的Android开发环境
- en: Getting ready
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We begin by setting up our Android environment. If you wish to build only on
    iOS, you can skip this step. To follow this recipe, you will need some files.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先设置我们的Android开发环境。如果你只想在iOS上构建，你可以跳过此步骤。要遵循此食谱，你需要一些文件。
- en: 'The following list provides the prerequisites that need to be downloaded to
    set up Android:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表提供了设置Android所需下载的先决条件：
- en: 'Eclipse ADT (Android Developer Tools) with the Android SDK:'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Eclipse ADT（Android开发者工具）与Android SDK：
- en: '[https://dl.google.com/android/adt/adt-bundle-mac-x86_64-20140702.zip](https://dl.google.com/android/adt/adt-bundle-mac-x86_64-20140702.zip)'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://dl.google.com/android/adt/adt-bundle-mac-x86_64-20140702.zip](https://dl.google.com/android/adt/adt-bundle-mac-x86_64-20140702.zip)'
- en: Eclipse ADT includes the Android SDK and Eclipse IDE. This is the Android development
    tool that is used to develop Android applications. Android Studio is an Android
    development IDE, but it is not supported to build NDK. The official site states
    that a version of Android Studio that supports NDK will be released soon. That's
    why we use Eclipse in this book.
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Eclipse ADT（Android开发者工具）包括Android SDK和Eclipse IDE。这是用于开发Android应用程序的Android开发工具。Android
    Studio是一个Android开发IDE，但不支持构建NDK。官方网站表示，将很快发布支持NDK的Android Studio版本。这就是为什么我们在本书中使用Eclipse的原因。
- en: 'Android NDK (Native Development Kit):'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android NDK（本地开发工具包）：
- en: '[https://dl.google.com/android/ndk/android-ndk-r10c-darwin-x86_64.bin](https://dl.google.com/android/ndk/android-ndk-r10c-darwin-x86_64.bin)'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://dl.google.com/android/ndk/android-ndk-r10c-darwin-x86_64.bin](https://dl.google.com/android/ndk/android-ndk-r10c-darwin-x86_64.bin)'
- en: The NDK is required to build an Android application. You have to use NDK r10c.
    This is because compiling and linking errors may occur when using NDK r9 or an
    earlier version.
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 构建Android应用程序需要NDK（Native Development Kit）。你必须使用NDK r10c。这是因为使用NDK r9或更早版本时可能会出现编译和链接错误。
- en: 'Apache ANT:'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache ANT：
- en: You can download Apache ANT from [http://ant.apache.org/bindownload.cgi](http://ant.apache.org/bindownload.cgi)
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以从[http://ant.apache.org/bindownload.cgi](http://ant.apache.org/bindownload.cgi)下载Apache
    ANT
- en: This is a java library that aids in building software. At the time of writing
    this book, version 1.9.4 was the latest stable version available.
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是一个帮助构建软件的Java库。在本书编写时，版本1.9.4是可用的最新稳定版本。
- en: How to do it...
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: You begin by installing Eclipse ADT with the Android SDK, and then continue
    to unzip the zip file to any working directory you are aware of. I recommend that
    you unzip it to the `Documents` folder (`~/adt-bundle-mac-x86_64-20140702`). ADT
    includes Android SDK and Eclipse. The SDK and Eclipse folders are located under
    the ADT folder. We call the SDK folder path that is located under the ADT folder
    `ANDROID_SDK_ROOT`. You have to remember it because you will use it the next recipe.
    Now, you can launch Eclipse from `~/adt-bundle-mac-x86_64-20140702/eclipse/Eclipse.app`.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您首先使用 Android SDK 安装 Eclipse ADT，然后继续解压缩 zip 文件到您所知的任何工作目录。我建议您将其解压缩到 `Documents`
    文件夹 (`~/adt-bundle-mac-x86_64-20140702`)。ADT 包括 Android SDK 和 Eclipse。SDK 和 Eclipse
    文件夹位于 ADT 文件夹下。我们将位于 ADT 文件夹下的 SDK 文件夹路径称为 `ANDROID_SDK_ROOT`。您必须记住它，因为您将在下一个菜谱中使用它。现在，您可以从
    `~/adt-bundle-mac-x86_64-20140702/eclipse/Eclipse.app` 启动 Eclipse。
- en: 'The next step is to update Android SDK:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是更新 Android SDK：
- en: Open Eclipse from the `eclipse` folder located in ADT.
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 ADT 中位于 `eclipse` 文件夹的 Eclipse 启动。
- en: Go to **Window** | **Android SDK Manager**.
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前往 **窗口** | **Android SDK 管理器**。
- en: After opening **Android SDK Manager**, check **Tools** and the latest Android
    SDK (`API21`), `Android 2.3.3(API10)`, and any other SDK if necessary, as shown
    in the following screenshot:![How to do it...](img/B0561_01_1.jpg)
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在打开 **Android SDK 管理器** 后，检查 **工具** 和最新的 Android SDK (`API21`)，`Android 2.3.3(API10)`，以及如果需要，任何其他
    SDK，如图所示：![如何操作...](img/B0561_01_1.jpg)
- en: Click on **Install packages...**.
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击 **安装包...**。
- en: Select each license and click on **Accept,** as shown in the following screenshot:![How
    to do it...](img/B0561_01_2.jpg)
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择每个许可并点击 **接受**，如图所示：![如何操作...](img/B0561_01_2.jpg)
- en: After you accept all licenses, you will see that the **Install** button is enabled.
    Click on it.
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接受所有许可后，您将看到**安装**按钮已启用。点击它。
- en: You have to wait for a long time to update and install the SDKs.
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您需要等待很长时间才能更新和安装 SDK。
- en: 'Installing NDK:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 NDK：
- en: 'Open the terminal window and change the directory to the path from which you
    downloaded the package. Change the permission on the downloaded package and execute
    the package. For example:'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 打开终端窗口，将目录更改为您下载包的路径。更改下载包的权限并执行包。例如：
- en: '[PRE0]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Finally, you move the `NDK` folder to the `Documents` folder. We call the installation
    path for NDK `NDK_ROOT`. `NDK_ROOT` is the address of the folder that contains
    the files, it helps the Cocos2dx engine to locate the native files of Android.
    You have to remember `NDK_ROOT` because you will use it in the next recipe.
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后，您将 `NDK` 文件夹移动到 `Documents` 文件夹。我们称 NDK 的安装路径为 `NDK_ROOT`。`NDK_ROOT` 是包含文件的文件夹的地址，它帮助
    Cocos2dx 引擎定位 Android 的本地文件。您必须记住 `NDK_ROOT`，因为您将在下一个菜谱中使用它。
- en: 'Installing Apache ANT:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 Apache ANT：
- en: Unzip the file to the `Documents` folder. That's all. We call `ANT_ROOT` the
    installation path for ANT. You have to remember `ANT_ROOT`, as we'll be using
    it in the next recipe.
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将文件解压缩到 `Documents` 文件夹。这就完成了。我们将 ANT 的安装路径称为 `ANT_ROOT`。您必须记住 `ANT_ROOT`，因为我们将在下一个菜谱中使用它。
- en: 'Installing Java:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 Java：
- en: 'By entering the following command in the terminal, you can automatically install
    Java (if you haven''t installed it earlier):'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过在终端中输入以下命令，您可以自动安装 Java（如果您之前尚未安装）：
- en: '[PRE1]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: After installing it, you can check that it was successfully installed by entering
    the command again.
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 安装完成后，您可以通过再次输入命令来检查它是否已成功安装。
- en: How it works...
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Let''s take a look at what we did throughout the recipe:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看在整个过程中我们做了什么：
- en: 'Installing Eclipse: You can use Eclipse as an editor for Cocos2d-x'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Eclipse：您可以将 Eclipse 用作 Cocos2d-x 的编辑器
- en: 'Installing ADT: You can develop Android applications on Eclipse'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 ADT：您可以在 Eclipse 上开发 Android 应用程序
- en: 'Installing NDK: You can build a C++ source code for Java'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 NDK：您可以为 Java 构建一个 C++ 源代码
- en: 'Installing ANT: You can use command line tools for Cocos2d-x'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 ANT：您可以使用 Cocos2d-x 的命令行工具
- en: Now you've finished setting up the Android development environment. At this
    point, you know how to install them and their path. In the next recipe, you will
    use them to build and execute Android applications. This will be very useful when
    you want to debug Android applications.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经完成了 Android 开发环境的设置。此时，您知道如何安装它们及其路径。在下一个菜谱中，您将使用它们来构建和执行 Android 应用程序。当您想要调试
    Android 应用程序时，这将非常有用。
- en: Installing Cocos2d-x
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Cocos2d-x
- en: Getting ready
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: To follow this recipe, you need to download the zip file from the official site
    of Cocos2d-x ([http://www.cocos2d-x.org/download](http://www.cocos2d-x.org/download)).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要遵循此食谱，你需要从 Cocos2d-x 的官方网站下载 zip 文件（[http://www.cocos2d-x.org/download](http://www.cocos2d-x.org/download)）。
- en: At the time of writing this book, version 3.4 was the latest stable version
    that was available. This version will be used throughout this book.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写这本书的时候，版本 3.4 是当时可用的最新稳定版本。这本书将使用这个版本。
- en: How to do it...
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Unzip your file to any folder. This time, we will install the user's home directory.
    For example, if the user name is `syuhari`, then the install path is `/Users/syuhari/cocos2d-x-3.4`.
    In this book, we call it `COCOS_ROOT`.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的文件解压到任何文件夹中。这次，我们将安装到用户的家目录。例如，如果用户名是 `syuhari`，那么安装路径是 `/Users/syuhari/cocos2d-x-3.4`。在这本书中，我们称之为
    `COCOS_ROOT`。
- en: 'The following steps will guide you through the process of setting up Cocos2d-x:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下步骤将指导你完成设置 Cocos2d-x 的过程：
- en: Open the terminal
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开终端
- en: 'Change the directory in terminal to `COCOS_ROOT`, using the following command:'
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在终端中更改目录到 `COCOS_ROOT`，使用以下命令：
- en: '[PRE2]'
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Run `setup.py`, using the following command:'
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令运行 `setup.py`：
- en: '[PRE3]'
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The terminal will ask you for `NDK_ROOT`. Enter into `NDK_ROOT` path.
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 终端会要求你输入 `NDK_ROOT`。输入到 `NDK_ROOT` 路径。
- en: The terminal will then ask you for `ANDROID_SDK_ROOT`. Enter the `ANDROID_SDK_ROOT`
    path.
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 终端会要求你输入 `ANDROID_SDK_ROOT`。输入 `ANDROID_SDK_ROOT` 路径。
- en: Finally, the terminal will ask you for `ANT_ROOT`. Enter the `ANT_ROOT` path.
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，终端会要求你输入 `ANT_ROOT`。输入 `ANT_ROOT` 路径。
- en: 'After the execution of the `setup.py` command, you need to execute the following
    command to add the system variables:'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行 `setup.py` 命令后，你需要执行以下命令来添加系统变量：
- en: '[PRE4]'
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Tip
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'Open the `.bash_profile` file, and you will find that `setup.py` shows how
    to set each path in your system. You can view the `.bash_profile` file using the
    `cat` command:'
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 打开 `.bash_profile` 文件，你会看到 `setup.py` 展示了如何在系统中设置每个路径。你可以使用 `cat` 命令查看 `.bash_profile`
    文件：
- en: '[PRE5]'
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We now verify whether Cocos2d-x can be installed:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在验证 Cocos2d-x 是否可以安装：
- en: 'Open the terminal and run the `cocos` command without parameters:'
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开终端并运行不带参数的 `cocos` 命令：
- en: '[PRE6]'
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If you can see a window like the following screenshot, you have successfully
    completed the Cocos2d-x install process:'
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你看到一个像以下截图所示的窗口，说明你已经成功完成了 Cocos2d-x 的安装过程：
- en: '![How to do it...](img/B0561_01_4.jpg)'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/B0561_01_4.jpg)'
- en: How it works...
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Let's take a look at what we did throughout the above recipe. You can install
    Cocos2d-x by just unzipping it. You know `setup.py` is only setting up the `cocos`
    command and the path for Android build in the environment. Installing Cocos2d-x
    is very easy and simple. If you want to install a different version of Cocos2d-x,
    you can do that too. To do so, you need to follow the same steps that are given
    in this recipe, but they will be for a different version.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看在上面的食谱中我们做了什么。你可以通过解压来安装 Cocos2d-x。你知道 `setup.py` 只是在环境中设置 `cocos` 命令和
    Android 构建路径。安装 Cocos2d-x 非常简单和直接。如果你想安装 Cocos2d-x 的不同版本，你也可以这样做。要做到这一点，你需要遵循这个食谱中给出的相同步骤，但它们将适用于不同的版本。
- en: There's more...
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: Setting up the Android environment is a bit tough. If you recently started to
    develop Cocos2d-x, you can skip the settings part of Android. and you can do it
    when you run on Android. In this case, you don't have to install Android SDK,
    NDK, and Apache ANT. Also, when you run `setup.py`, you only press *Enter* without
    entering a path for each question.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 Android 环境有点困难。如果你最近开始开发 Cocos2d-x，你可以跳过 Android 的设置部分，并在 Android 上运行时进行设置。在这种情况下，你不需要安装
    Android SDK、NDK 和 Apache ANT。此外，当你运行 `setup.py` 时，你只需按 *Enter* 键，无需为每个问题输入路径。
- en: Using the Cocos command
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Cocos 命令
- en: The next step is using the `cocos` command. It is a cross-platform tool with
    which you can create a new project, build it, run it, and deploy it. The `cocos`
    command works for all Cocos2d-x supported platforms and you don't need to use
    an IDE if you don't want to. In this recipe, we take a look at this command and
    explain how to use it.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是使用 `cocos` 命令。这是一个跨平台工具，你可以用它来创建新项目、构建、运行和部署。`cocos` 命令适用于所有 Cocos2d-x 支持的平台，如果你不想使用
    IDE，你也不需要使用它。在这个食谱中，我们将查看这个命令并解释如何使用它。
- en: How to do it...
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'You can use the `cocos` command help by executing it with the `--help` parameter,
    as follows:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过执行带有 `--help` 参数的 `cocos` 命令来使用 `cocos` 命令的帮助，如下所示：
- en: '[PRE7]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We then move on to generating our new project:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们接下来将生成我们的新项目：
- en: 'First, we create a new Cocos2d-x project with the `cocos new` command, as shown
    here:'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 首先，我们使用`cocos new`命令创建一个新的Cocos2d-x项目，如下所示：
- en: '[PRE8]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The result of this command is shown the following screenshot:'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此命令的结果如下截图所示：
- en: '![How to do it...](img/B0561_01_5.jpg)'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/B0561_01_5.jpg)'
- en: 'Behind the `new` parameter is the project name. The other parameters that are
    mentioned denote the following:'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`new`参数后面是项目名称。提到的其他参数表示以下内容：
- en: '`MyGame` is the name of your project.'
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MyGame`是项目的名称。'
- en: '`-p` is the package name for Android. This is the application ID in the Google
    Play store. So, you should use the reverse domain name as the unique name.'
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-p`是Android的包名。这是Google Play商店中的应用程序ID。因此，你应该使用反向域名作为唯一名称。'
- en: '`-l` is the programming language used for the project. You should use `cpp`
    because we will use C++ in this book.'
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-l`是项目使用的编程语言。你应该使用`cpp`，因为我们将在本书中使用C++。'
- en: '`-d` is the location in which to generate the new project. This time, we generate
    it in the user''s documents directory.'
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-d`是生成新项目的位置。这次，我们在用户的文档目录中生成。'
- en: 'You can look up these variables using the following command:'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以使用以下命令查找这些变量：
- en: '[PRE9]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Congratulations, you can generate your new project. The next step is to build
    and run using the `cocos` command.
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恭喜你，你可以生成你的新项目。下一步是使用`cocos`命令构建和运行。
- en: 'Compiling the project:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译项目：
- en: 'If you want to build and run for iOS, you need to execute the following command:'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你想为iOS构建和运行，你需要执行以下命令：
- en: '[PRE10]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The parameters that are mentioned are explained as follows:'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 提到的参数解释如下：
- en: '`-s` is the directory of the project. This could be an absolute path or a relative
    path.'
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-s`是项目目录。这可以是绝对路径或相对路径。'
- en: '`-p` denotes which platform to run on. If you want to run on Android you use
    `-p android`. The available options are IOS, Android, Win32, Mac, and Linux.'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-p`表示要运行的平台。如果你想运行在Android上，使用`-p android`。可用选项有IOS、Android、Win32、Mac和Linux。'
- en: You can run `cocos run –help` for more detailed information.
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以通过运行`cocos run –help`来获取更详细的信息。
- en: 'The result of this command is shown in the following screenshot:'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此命令的结果如下截图所示：
- en: '![How to do it...](img/B0561_01_6.jpg)'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/B0561_01_6.jpg)'
- en: You can now build and run iOS applications on cocos2d-x. However, you have to
    wait for a long time if this is your first time building an iOS application. It
    takes a long time to build a Cocos2d-x library, depending on if it was a clean
    build or a first build.![How to do it...](img/B0561_01_7.jpg)
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以在cocos2d-x上构建和运行iOS应用程序。然而，如果你是第一次构建iOS应用程序，你可能需要等待很长时间。构建Cocos2d-x库需要很长时间，这取决于是否是干净构建或首次构建。![如何操作...](img/B0561_01_7.jpg)
- en: How it works...
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `cocos` command can create a new project and build it. You should use the
    `cocos` command if you want to create a new project. Of course, you can build
    using Xcode or Eclipse. You can easily develop and debug using these tools.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`cocos`命令可以创建新项目并构建它。如果你想创建新项目，你应该使用`cocos`命令。当然，你也可以使用Xcode或Eclipse来构建。你可以使用这些工具轻松开发和调试。'
- en: There's more...
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The cocos `run` command has other parameters. They are the following:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: cocos `run`命令还有其他参数。它们如下所示：
- en: '`--portrait` will set the project as a portrait. This command has no argument.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--portrait`会将项目设置为横幅模式。此命令没有参数。'
- en: '`--ios-bundleid` will set the bundle ID for the iOS project. However, it is
    not difficult to set it later.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--ios-bundleid`将为iOS项目设置包ID。然而，稍后设置它并不困难。'
- en: 'The `cocos` command also includes some other commands, which are as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`cocos`命令还包括其他一些命令，如下所示：'
- en: 'The `compile` command: This command is used to build a project. The following
    patterns are useful parameters. You can see all parameters and options if you
    execute the `cocos compile [–h]` command:'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`compile`命令：此命令用于构建项目。以下模式是有用的参数。如果你执行`cocos compile [–h]`命令，你可以看到所有参数和选项：'
- en: '[PRE11]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The `deploy` command: This command only takes effect when the target platform
    is Android. It will re-install the specified project to the android device or
    simulator:'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deploy`命令：此命令仅在目标平台为Android时生效。它将重新安装指定的项目到Android设备或模拟器：'
- en: '[PRE12]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Tip
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The `run` command continues to compile and deploy commands.
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`run`命令继续编译和部署命令。'
- en: Building the project using Xcode
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Xcode构建项目
- en: Getting ready
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Before building the project using Xcode, you require Xcode with an iOS developer
    account to test it on a physical device. However, you can also test it on an iOS
    simulator. If you did not install Xcode, you can get it from the Mac App Store.
    Once you have installed it, get it activated.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Xcode 构建项目之前，您需要一个带有 iOS 开发者账户的 Xcode 来在物理设备上进行测试。然而，您也可以在 iOS 模拟器上进行测试。如果您尚未安装
    Xcode，您可以从 Mac App Store 获取它。一旦安装，请激活它。
- en: How to do it...
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Open your project from Xcode:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Xcode 打开您的项目：
- en: 'You can open your project by double-clicking on the file placed at: `~/Documents/MyGame/proj.ios_mac/MyGame.xcodeproj`:'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以通过双击放置在以下位置的文件来打开您的项目：`~/Documents/MyGame/proj.ios_mac/MyGame.xcodeproj`：
- en: '![How to do it...](img/B0561_01_8.jpg)'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/B0561_01_8.jpg)'
- en: 'Build and Run using Xcode:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Xcode 进行构建和运行：
- en: You should select an iOS simulator or real device on which you want to run your
    project.
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您应该选择一个 iOS 模拟器或真实设备，您想在上面运行您的项目。
- en: How it works...
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: If this is your first time building, it will take a long time but continue to
    build with confidence as it's the first time. You can develop your game faster
    if you develop and debug it using Xcode rather than Eclipse.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是您第一次构建，它将花费较长时间，但请有信心继续构建，因为这是第一次。如果您使用 Xcode 而不是 Eclipse 进行开发和调试，您可以更快地开发您的游戏。
- en: Building the project using Eclipse
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Eclipse 构建项目
- en: Getting ready
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You must finish the first recipe before you begin this step. If you have not
    finished it yet, you will need to install Eclipse.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始此步骤之前，您必须完成第一个菜谱。如果您还没有完成，您将需要安装 Eclipse。
- en: How to do it...
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Setting up `NDK_ROOT`:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置 `NDK_ROOT`：
- en: Open the preference of Eclipse
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开 Eclipse 的首选项
- en: Open **C++** | **Build** | **Environment**![How to do it...](img/B0561_01_9.jpg)
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开 **C++** | **Build** | **Environment**![如何操作...](img/B0561_01_9.jpg)
- en: Click on **Add** and set the new variable, the name is `NDK_ROOT`, and the value
    is `NDK_ROOT` path:![How to do it...](img/B0561_01_10.jpg)
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **添加** 并设置新变量，名称为 `NDK_ROOT`，其值为 `NDK_ROOT` 路径：![如何操作...](img/B0561_01_10.jpg)
- en: 'Importing your project into Eclipse:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的项目导入到 Eclipse 中：
- en: Open the file and click on **Import**
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开文件并点击 **导入**
- en: Go to **Android** | **Existing Android Code into Workspace**
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前往 **Android** | **Existing Android Code into Workspace**
- en: Click on **Next**
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击 **下一步**
- en: '![How to do it...](img/B0561_01_11.jpg)'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/B0561_01_11.jpg)'
- en: Import the project into Eclipse at `~/Documents/MyGame/proj.android`:![How to
    do it...](img/B0561_01_12.jpg)
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `~/Documents/MyGame/proj.android` 处将项目导入到 Eclipse：![如何操作...](img/B0561_01_12.jpg)
- en: 'Importing the Cocos2d-x library into Eclipse:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 Cocos2d-x 库导入到 Eclipse 中：
- en: Perform the same steps from Step 3 to Step 4.
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从步骤 3 到步骤 4 执行相同的步骤。
- en: 'Import the project `cocos2d lib` at `~/Documents/MyGame/cocos2d/cocos/platform/android/java`,
    using the following command:'
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令在 `~/Documents/MyGame/cocos2d/cocos/platform/android/java` 处导入项目 `cocos2d
    lib`：
- en: '[PRE13]'
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![How to do it...](img/B0561_01_13.jpg)'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/B0561_01_13.jpg)'
- en: 'Build and Run:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建和运行：
- en: Click on the `Run` icon
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击 `Run` 图标
- en: The first time, Eclipse will ask you to select a way to run your application.
    Select **Android Application** and click on **OK**, as shown in the following
    screenshot:![How to do it...](img/B0561_01_14.jpg)
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一次运行时，Eclipse 将会要求您选择运行应用程序的方式。选择 **Android Application** 并点击 **确定**，如图所示：![如何操作...](img/B0561_01_14.jpg)
- en: If you connected to the Android device on your Mac, you can run your game on
    your real device or an emulator. The following screenshot shows that it is running
    on Nexus5:![How to do it...](img/B0561_01_15.jpg)
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您已将 Android 设备连接到您的 Mac，您可以在真实设备或模拟器上运行您的游戏。以下截图显示它在 Nexus5 上运行：![如何操作...](img/B0561_01_15.jpg)
- en: If you added `cpp` files into your project, you have to modify the `Android.mk`
    file at `~/Documents/MyGame/proj.android/jni/Android.mk`. This file is needed
    to build the NDK. This fix is required to add files.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您将 `cpp` 文件添加到您的项目中，您必须修改 `~/Documents/MyGame/proj.android/jni/Android.mk`
    中的 `Android.mk` 文件。此文件是构建 NDK 所必需的。为了添加文件，需要进行此修复。
- en: 'The original `Android.mk` would look as follows:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 原始的 `Android.mk` 可能如下所示：
- en: '[PRE14]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If you added the `TitleScene.cpp` file, you have to modify it as shown in the
    following code:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您添加了 `TitleScene.cpp` 文件，您必须按照以下代码进行修改：
- en: '[PRE15]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The preceding example shows an instance of when you add the `TitleScene.cpp`
    file. However, if you are also adding other files, you need to add all the added
    files.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例显示了添加 `TitleScene.cpp` 文件的一个实例。然而，如果您还添加了其他文件，您需要添加所有添加的文件。
- en: How it works...
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: You get lots of errors when importing your project into Eclipse, but don't panic.
    After importing the Cocos2d-x library, errors soon disappear. This allows us to
    set the path of the NDK, Eclipse could compile C++. After you have modified the
    C++ codes, run your project in Eclipse. Eclipse automatically compiles C++ codes,
    Java codes, and then runs.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将项目导入 Eclipse 时，你会遇到很多错误，但不要慌张。在导入 Cocos2d-x 库后，错误很快就会消失。这允许我们设置 NDK 的路径，Eclipse
    可以编译 C++。在你修改了 C++ 代码后，在 Eclipse 中运行你的项目。Eclipse 会自动编译 C++ 代码、Java 代码，然后运行。
- en: 'It is a tedious task to fix `Android.mk` again to add the C++ files. The following
    code is the original `Android.mk`:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 再次修复 `Android.mk` 以添加 C++ 文件是一项繁琐的任务。以下代码是原始的 `Android.mk`：
- en: '[PRE16]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The following code is the customized `Android.mk` that adds C++ files automatically:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码是自动添加 C++ 文件的定制 `Android.mk`：
- en: '[PRE17]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The first line of the code gets C++ files to the `Classes` directory into the
    `CPP_FILES` variable. The second and third lines add C++ files into the `LOCAL_C_INCLUDES`
    variable. By doing so, C++ files will be automatically compiled in the NDK. If
    you need to compile a file other than the extension `.cpp` file, you will need
    to add it manually.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的第一行将 C++ 文件移动到 `Classes` 目录，并将它们添加到 `CPP_FILES` 变量中。第二行和第三行将 C++ 文件添加到 `LOCAL_C_INCLUDES`
    变量中。这样做后，C++ 文件将自动在 NDK 中编译。如果你需要编译扩展名不是 `.cpp` 的文件，你需要手动添加它。
- en: There's more...
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'If you want to manually build C++ in NDK, you can use the following command:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在 NDK 中手动构建 C++，可以使用以下命令：
- en: '[PRE18]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This script is located in `~/Documents/MyGame/proj.android` . It uses `ANDROID_SDK_ROOT`
    and `NDK_ROOT` in it. If you want to see its options, run `./build_native.py –help`.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本位于 `~/Documents/MyGame/proj.android`。它使用了 `ANDROID_SDK_ROOT` 和 `NDK_ROOT`。如果你想查看它的选项，运行
    `./build_native.py –help`。
- en: Implementing multi-resolution support
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现多分辨率支持
- en: You may notice a difference in screen appearance on different devices. In some
    previous recipes, there is an iOS's screenshot and a Nexus 5's screenshot. It
    shows different image sizes. This image is `HelloWorld.png` located at `MyGame/Resources`.
    It is 480 x 320 pixels. In this recipe, we explain how to maintain the same size
    regardless of screen size.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会在不同设备上注意到屏幕外观的差异。在一些之前的菜谱中，有一个 iOS 的屏幕截图和一个 Nexus 5 的屏幕截图。它们显示了不同的图像大小。这张图片是位于
    `MyGame/Resources` 的 `HelloWorld.png`，分辨率为 480 x 320 像素。在这个菜谱中，我们解释了如何保持相同的大小，无论屏幕大小如何。
- en: How to do it…
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'Open `AppDelegate.cpp` through Xcode, and modify the `AppDelegate::applicationDidFinishLaunching()`
    method by adding the code after the `director->setAnimationInterval(1.0/60.0);`
    line, as shown in the following code:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 Xcode 打开 `AppDelegate.cpp`，并在 `director->setAnimationInterval(1.0/60.0);`
    行之后添加代码，如下所示：
- en: '[PRE19]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In this book, we design the game with a screen size of iPhone''s 3.5 inch screen.
    So, we set this screen size to the design resolution size by using the `setDesignResolutionSize`
    method. The last parameter is resolution policy. The following screenshot is the
    Nexus 5''s screenshot after implementing multi-resolution:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们设计游戏时使用了 iPhone 3.5 英寸屏幕的屏幕尺寸。因此，我们使用 `setDesignResolutionSize` 方法将这个屏幕尺寸设置为设计分辨率大小。以下截图是在实现多分辨率后的
    Nexus 5 的截图：
- en: '![How to do it…](img/B0561_01_16.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![如何做到这一点…](img/B0561_01_16.jpg)'
- en: 'The following screenshot is the iPhone 5 simulator''s screenshot. You now know
    that both screenshots have the same appearance:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图是 iPhone 5 模拟器的截图。你现在知道这两个截图的外观是相同的：
- en: '![How to do it…](img/B0561_01_17.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![如何做到这一点…](img/B0561_01_17.jpg)'
- en: How it works…
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'The resolution policy has `EXACT_FIT`, `NO_BORDER`, `SHOW_ALL`, `FIXED_HEIGHT,`
    and `FIXED_WIDTH`. These are explained as follows:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 分辨率策略有 `EXACT_FIT`、`NO_BORDER`、`SHOW_ALL`、`FIXED_HEIGHT` 和 `FIXED_WIDTH`。以下是对它们的解释：
- en: '`EXACT_FIT`: The entire application is visible in the specified area without
    trying to preserve the original aspect ratio.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EXACT_FIT`：整个应用程序在指定区域内可见，不尝试保留原始宽高比。'
- en: '`NO_BORDER`: The entire application fills the specified area, without distortion
    but possibly with some cropping, while maintaining the original aspect ratio of
    the application.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NO_BORDER`：整个应用程序填充指定区域，无扭曲但可能有些裁剪，同时保持应用程序的原始宽高比。'
- en: '`SHOW_ALL`: The entire application is visible in the specified area without
    distortion, while maintaining the internal the aspect ratio of the application.
    Borders can appear on two sides of the application.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SHOW_ALL`：整个应用程序在指定区域内可见，无扭曲，同时保持应用程序的内部宽高比。应用程序的两侧可能会出现边框。'
- en: '`FIXED_HEIGHT`: The application takes the height of the design resolution size
    and modifies the width of the internal canvas so that it fits the aspect ratio
    of the device. No distortion will occur, however, you must make sure your application
    works on different aspect ratios.'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FIXED_HEIGHT`: 应用程序采用设计分辨率大小的高度，并修改内部画布的宽度，以便适应设备的纵横比。不会发生扭曲，但是你必须确保你的应用程序可以在不同的纵横比上运行。'
- en: '`FIXED_WIDTH`: The application takes the width of the design resolution size
    and modifies the height of the internal canvas so that it fits the aspect ratio
    of the device. No distortion will occur, however, you must make sure your application
    works on different aspect ratios.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FIXED_WIDTH`: 应用程序采用设计分辨率大小的宽度，并修改内部画布的高度，以便适应设备的纵横比。不会发生扭曲，但是你必须确保你的应用程序可以在不同的纵横比上运行。'
- en: By implementing multi-resolution, regardless of screen size, you will maintain
    the image on the screen.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 通过实现多分辨率，无论屏幕大小如何，你都将保持屏幕上的图像。
- en: Preparing your original game
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备你的原始游戏
- en: In the next chapter, we will start the original game. You know there are a lot
    of comments and codes in `HelloWorldScene.cpp` and the `HelloWorldScene.h` file.
    That's why we will remove unnecessary codes in the template project and get started
    with the original game right away.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始原始游戏。你知道`HelloWorldScene.cpp`和`HelloWorldScene.h`文件中有很多注释和代码。这就是为什么我们将从模板项目中删除不必要的代码，并立即开始原始游戏。
- en: How to do it…
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Open `HelloWorldScene.h` and remove the `menuCloseCallback` method and unnecessary
    comments. Now `HelloWorldScene.h` should look like the following code:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`HelloWorldScene.h`并删除`menuCloseCallback`方法和不必要的注释。现在`HelloWorldScene.h`应该看起来像以下代码：
- en: '[PRE20]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The next step is to open `HelloWorldScene.cpp` and remove unnecessary comments,
    codes, and methods. Now `HelloWorldScene.cpp` should look like the following code:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是打开`HelloWorldScene.cpp`并删除不必要的注释、代码和方法。现在`HelloWorldScene.cpp`应该看起来像以下代码：
- en: '[PRE21]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The next step is to remove unnecessary images in `resources`. Remove `CloseNormal.png`,
    `CloseSelected.png` and `HelloWorld.png` from the `Resources` folder in Xcode:![How
    to do it…](img/B0561_01_18.jpg)
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是删除`resources`中的不必要图像。从Xcode中的`Resources`文件夹中删除`CloseNormal.png`、`CloseSelected.png`和`HelloWorld.png`：![如何操作…](img/B0561_01_18.jpg)
- en: Finally, if you are developing only iOS and Android applications, you don't
    need files for other platforms such as Linux, Windows, and Windows Phone. You
    should remove these files.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，如果你只开发iOS和Android应用程序，你不需要为Linux、Windows和Windows Phone等其他平台准备文件。你应该删除这些文件。
- en: 'Before removing platform files, it should look like the following screenshot:'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在删除平台文件之前，它应该看起来像以下截图：
- en: '![How to do it…](img/B0561_01_19.jpg)'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/B0561_01_19.jpg)'
- en: 'After removing platform files, it should look like the following screenshot:'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除平台文件后，它应该看起来像以下截图：
- en: '![How to do it…](img/B0561_01_20.jpg)'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/B0561_01_20.jpg)'
- en: How it works…
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: With this recipe, you can get the simplest project ready before removing unnecessary
    comments, codes, and methods. Removing unnecessary platform codes and resources
    is important for reducing the size of your application. If you start building
    your original game from scratch, you will need to follow this recipe or chances
    are, you may get a black screen if you build and run this project. In the next
    chapter, you can start coding within this simple project.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个配方，你可以在删除不必要的注释、代码和方法之前准备好最简单的项目。删除不必要的平台代码和资源对于减小应用程序的大小很重要。如果你从头开始构建你的原始游戏，你需要遵循这个配方，否则，如果你构建并运行这个项目，可能会得到一个黑屏。在下一章中，你可以在这个简单项目中开始编码。
