- en: Chapter 9. Equipment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we covered how to create useable items, populate them
    in a store controlled by an NPC, allow the player to buy items from the store,
    and use those items from their inventory. In this chapter, we will continue from
    where we left off by offering the player weapons and armor to equip themselves
    with.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The weapons Data Table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting the weapon and equipment screen variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the weapon button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Revisiting the equipment screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting the equipment screen Text Blocks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Correcting character stats when equipping
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The weapons Data Table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have a decent framework for item creation, it will be very easy
    to create equipment. Since the **Items** Data Table reads all of the stats of
    the party members so that the stats can be modified if an item is used, we can
    expect equipment to modify all of the same stats; therefore, we can use the same
    structure for the **Equipment** Data Table, as we did for the **Items** Data Table.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, at this point, we will create a Data Table for weapons by clicking on **Content
    Browser** and navigating to **+Add New** | **Miscellaneous** | **Data Table**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The weapons Data Table](img/B04548_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we can pick the **Items Data** structure since we will be calling the
    same data in the **Equipment** Data Table as we did in **Item** Data Table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The weapons Data Table](img/B04548_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, name the Data Table **Weapons**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The weapons Data Table](img/B04548_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We will use this **Weapons** Data Table to populate every weapon that we plan
    to equip on a character in the game. For now, we will only make a Data Table for
    one character's weapons, but you can use all of the following steps to create
    more weapon Data Tables for additional characters.
  prefs: []
  type: TYPE_NORMAL
- en: You can now open the **Weapons** Data Table, and just like our **Items** Data
    Table, we begin with creating data by clicking on the **Add** button and then
    naming the data. In this case, we will make our first weapon, a dagger, and then
    give the dagger some stats. Since the dagger is a weapon, we will just need to
    modify the **ATK** stat. Since we are keeping our examples simple, we are not
    utilizing other stats that many other RPGs have such as *accuracy* and *dexterity*
    because we do not have accuracy or dexterity in our RPG framework. However, if
    you decide to add these additional mechanics to your game later on, you will want
    to modify the appropriate stats in your Data Table that are associated with your
    equipment. You may also want to give the dagger a gold value if weapons hold a
    resale value in your game.
  prefs: []
  type: TYPE_NORMAL
- en: '![The weapons Data Table](img/B04548_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Setting the weapon and equipment screen variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have a weapon in your **Weapons** Data Table, we can set up a framework
    to equip this weapon.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just like the items that you created, you can choose to populate the weapons
    in a shop, you can choose to allow weapons to be picked up automatically from
    other NPCs in the field, or you can make them enemy drops just like you did with
    gold. Whichever method you choose, make sure that the weapons end up getting populated
    in your equipment screen in a similar way in which the items got populated in
    your inventory screen. At the bare minimum, we will need the character to hold
    an array of weapons. Navigate to the **FieldPlayer** Blueprint and open the Event
    Graph. Then, add a new text array variable that is similar to the **arrayItem**
    variable that you created in the previous chapter, and call it **arrayWeapons**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting the weapon and equipment screen variables](img/B04548_09_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The major difference between the items and equipment is that we will be able
    to equip and unequip equipment rather than just *using* the equipment, so we will
    need to create a framework for this on our equipment screen. While we are in the
    **FieldPlayer** Blueprint, we can start creating this framework by also creating
    an `equipmentScreen` Boolean that we will eventually set to let the system know
    when the player is accessing the equipment screen. This will be needed when equipping
    weapons and armor just like the `inventoryScreen` Boolean was needed to allow
    the user to use items when accessing the inventory screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting the weapon and equipment screen variables](img/B04548_09_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that the player can hold a weapons array and an equipment screen Boolean,
    we need to navigate to the **Pause_Equipment** Event Graph, and set the `equipmentScreen`
    Boolean to true when the event is constructed, and set it to false when the player
    leaves the screen. This is identical to the way in which we set the `inventoryScreen`
    Boolean in the **Pause_Inventory** Event Graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting the weapon and equipment screen variables](img/B04548_09_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating the weapon button
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, we can move on to populating the equipment screen. To do this, we first
    need to create a weapon button similar to the item button that we created previously.
    This weapon button will house all the logic that will be performed when the user
    presses the weapon button. Since the weapon button will be similar to the item
    button in a lot of ways, we can duplicate the item button and modify it to fit
    the weapon parameters. So, go to the **Item** Widget Blueprint by navigating to
    **Content Browser** | **Blueprints** | **UI**, and duplicate the **Item** Widget
    Blueprint:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the weapon button](img/B04548_09_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, rename it **Weapon**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the weapon button](img/B04548_09_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can now open the **Weapon** Widget Blueprint and navigate to the Event Graph.
    Here, you will see an exact copy of the **Item** Widget Blueprint logic, and since
    the logic for equipping weapons will be similar to using items, we can just modify
    the Event Graph to fit it with what we want to happen when the user presses the
    weapon button.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to edit the section where the **OnClicked** event is located.
    We want the **OnClicked** event to find the `equipmentScreen` Boolean and check
    whether it is true, so we can remove the check for the `inventoryScreen` Boolean
    and replace it with the `equipmentScreen` Boolean:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the weapon button](img/B04548_09_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If the `equipmentScreen` Boolean returns false, the false branch will do nothing,
    and so we need to delete all of the false branch logic:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the weapon button](img/B04548_09_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If the branch returns true, then we will set the **Get Data Table Row Weapons**
    function to get the **Weapons** Data Table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the weapon button](img/B04548_09_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, from **Break ItemsData**, set it to break the data **ATK** stat, and
    set the **ATK** stat of the character accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the weapon button](img/B04548_09_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For now, the **OnClicked** event in your **Weapon** Event Graph will look like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the weapon button](img/B04548_09_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Also, make sure that you are still setting the **Party Members** stats to the
    **Character Target** variable; otherwise, the base stats of the characters will
    not carry over correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the weapon button](img/B04548_09_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Revisiting the equipment screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may notice that if we stick to this Event Graph, we will merely be using
    each weapon instead of equipping it because of the **Remove from Parent** function.
    We will come back to edit this Event Graph later on in the chapter to properly
    set the button to equip rather than use.
  prefs: []
  type: TYPE_NORMAL
- en: We will now populate the equipment screen. As mentioned earlier in this chapter,
    you can choose how you want to populate the equipment screen. For simplicity of
    this example, we will just populate the equipment screen as we did with the shop.
    So, we will navigate back to the **Pause_Equipment** Widget Blueprint's Event
    Graph, and use the same logic that we implemented to populate the shop screen;
    only this time set the **Get Data Table Row Names** function to get the **Weapons**
    Data Table. Then, set the **Create Widget** function to get the **Weapon** widget.
    Note that you need to ensure that **is Variable** of the Scroll Box is checked
    in your **Designer** view; otherwise, your Scroll Box will produce an error because
    it won't be found.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Event Graph of **Pause_Equipment** will look like this when you are done:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Revisiting the equipment screen](img/B04548_09_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you test the equipment screen now, you will notice that the weapons get populated
    in the Scroll Box, and if you use the equipment, the stats of the character go
    up and match the increased stats of the weapon. However, we still have some issues.
    The weapon is being used instead of equipped, and if we continue to use weapons,
    the stats end up climbing instead of getting replaced. Let's set the weapon to
    be equipped first rather than replaced.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the equipment screen Text Blocks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since we know that the equipment screen has Text Blocks on the right-hand side
    of the **Weapon** and **Armor** titles, which we created in [Chapter 5](ch05.html
    "Chapter 5. Bridging Character Statistics"), *Bridging Character Statistics*,
    we want to bind these Text Blocks to a text variable that will hold the names
    of the weapons and armor that we are equipping. Let''s first navigate to our **FieldPlayer**
    Blueprint Event Graph, and create a text variable to hold the soldier''s weapon
    name. We will call this text variable `soldierWeapon`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting the equipment screen Text Blocks](img/B04548_09_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, navigate to the **Pause_Equipment** Widget Blueprint''s **Designer**
    view. Select the Text Block on the right-hand side of the **Weapon** title, navigate
    to **Details** | **Content** | **Text**, and click on the **Bind** drop-down menu
    to select **+Create Binding**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting the equipment screen Text Blocks](img/B04548_09_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Event Graph for this binding, use the **Get All Actors Of Class** function
    to get all the actors of the **FieldPlayer**, and get the `soldierWeapon` variable
    and link it to the **Return Value** pin of **ReturnNode** so that the Text Block
    is able to draw the text that is saved in the `soldierWeapon` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting the equipment screen Text Blocks](img/B04548_09_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can now set the text to the `soldierWeapon` variable by going back to the
    **Weapon** Widget Blueprint Event Graph and replacing the **Remove from Parent**
    function with **Set soldierWeapon**. The text value of `soldierWeapon` should
    be set to the **Item** variable that the user clicks on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting the equipment screen Text Blocks](img/B04548_09_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you test the equipment screen now, you will notice that when the equipment
    button is pressed, the name of the weapon gets updated and the weapons will not
    be removed from the equipment screen.
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting the equipment screen Text Blocks](img/B04548_09_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Correcting the character stats when equipping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The last thing that we need to do is adding some logic to make sure that the
    base stats do not continue to climb if the equipment is chosen more than once
    from the equipment screen. To do this, we need to create two variables in the
    **FieldPlayer** Blueprint. One variable will be a Boolean that keeps track of
    whether the soldier has a weapon equipped. The other will be an integer to keep
    track of the soldier's base attack stat. These elements together will allow us
    to create the logic in our weapon button that prevents the attack stat from climbing
    every time we click on a weapon.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, first navigate to the **FieldPlayer** Blueprint and create a Boolean called
    **soldierWeaponEquipped**. Then, create an integer called **soldierbaseAtk**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Correcting the character stats when equipping](img/B04548_09_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We specify these stats to be of a specific character and weapon equipment because
    if your game has more characters in your party, along with both weapons and armor
    for each character, you will need to differentiate between all the characters'
    statuses. Moreover, you may want to create a base status for every statistic because
    some equipment may change stats other than attack.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now create the logic using the new variables that we created. Navigate
    to the **Weapon** Widget Blueprint Event Graph. We need to modify some of our
    logic to tell when a weapon is equipped on the soldier. Create a **SET Soldier
    Weapon Equipped** function and set it to **true** after you have equipped the
    weapon (or pressed the button for the weapon):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Correcting the character stats when equipping](img/B04548_09_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Remember that since this particular button equips the soldier's weapon only
    when it is pressed, if you have additional characters and/or different types of
    equipment, you need to create a different Widget Blueprint to accommodate these
    characters and equipment types.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we need to create the logic to calculate the base attack. Since we have
    already used the Boolean to differentiate between when the soldier is equipping
    a weapon or not, we can use this logic to calculate the base attack stat. What
    we know in our game, by default, is that the character does not have a weapon
    equipped. So, what we can do is define the base attack stat as soon as we construct
    this Widget Blueprint, but specifically, when the soldier does not have a weapon
    equipped.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, when the Widget Blueprint is constructed, get all the actors
    of the Field Player class using the **Get All Actors Of Class** function. After
    we have got all the actors of this class, get the `soldierWeaponEquipped` variable.
    Let''s allow the **Get All Actors Of Class** function to fire off a branch that
    checks whether the `soldierWeaponEquipped` variable is true or false:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Correcting the character stats when equipping](img/B04548_09_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If the condition is false, set the **soldierbaseAtk** to the **ATK** variable
    of the character. When choosing a weapon, instead of adding the **ATK** of **ItemData**
    and the **ATK** of the current character''s **ATK** stat, add the **ATK** of **ItemData**
    and **soldierbaseAtk** so that we can always use the base **ATK** variable when
    equipping a weapon rather than the current stat. This will prevent the **ATK**
    variable from climbing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Correcting the character stats when equipping](img/B04548_09_26-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: One major problem you will notice is that the attack stat will continue to grow
    if we exit the equipment screen and come back to equip an item. This is because
    we do not have logic in place for when a weapon is already equipped. So, when
    `soldierWeaponEquipped` is true, we need to find which weapon is currently equipped,
    and subtract its stats from the soldier's base stats in order to reset the base
    stats.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, we will simply use the **Get Data Table Row Names** function to
    get the names of the items in the **Weapons** Data Table. For each name in the
    Data Table, we need to compare the name to the `soldierWeapon` variable from the
    Field Player class. If the names are equal, we get the row name from the **Weapons**
    Data Table using the **Get Data Table Row** function, subtract the **ATK** stat
    of the weapon from the `soldierbaseAtk` stat, find the absolute value of that
    operation using the **Absolute (Int)** function, and finally, set that number
    to the `soldierbaseAtk` stat:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Correcting the character stats when equipping](img/B04548_09_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: At this point, if you test the equipping of weapons, the attack stat will no
    longer climb.
  prefs: []
  type: TYPE_NORMAL
- en: This method will work since we do not have a leveling system in place yet. However,
    when we do have a leveling system in place, we will want to replace this **ATK**
    variable with the base **ATK** variable that we create for the leveling.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you know how to equip and set stats for the soldier's weapon, you can
    use similar methodologies to create Data Tables, Blueprints, and logic for other
    characters and their equipment.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will create a leveling system for our game. We will
    learn how to allow enemies to give experience points to the player after they
    are defeated, which will then be used to level up characters in the game.
  prefs: []
  type: TYPE_NORMAL
