- en: Chapter 9. Equipment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章 装备
- en: In the previous chapter, we covered how to create useable items, populate them
    in a store controlled by an NPC, allow the player to buy items from the store,
    and use those items from their inventory. In this chapter, we will continue from
    where we left off by offering the player weapons and armor to equip themselves
    with.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们介绍了如何创建可用的物品，在由NPC控制的商店中填充它们，允许玩家从商店购买物品，并从他们的库存中使用这些物品。在本章中，我们将继续上一章的内容，向玩家提供武器和盔甲来装备自己。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章中将涵盖以下主题：
- en: The weapons Data Table
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 武器数据表
- en: Setting the weapon and equipment screen variables
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置武器和装备屏幕变量
- en: Creating the weapon button
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建武器按钮
- en: Revisiting the equipment screen
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 再次访问装备屏幕
- en: Setting the equipment screen Text Blocks
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置装备屏幕文本块
- en: Correcting character stats when equipping
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配装时修正角色属性
- en: The weapons Data Table
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 武器数据表
- en: Now that we have a decent framework for item creation, it will be very easy
    to create equipment. Since the **Items** Data Table reads all of the stats of
    the party members so that the stats can be modified if an item is used, we can
    expect equipment to modify all of the same stats; therefore, we can use the same
    structure for the **Equipment** Data Table, as we did for the **Items** Data Table.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了相当不错的物品创建框架，创建装备将会非常容易。由于**物品**数据表读取所有党派成员的属性，以便在使用物品时可以修改属性，我们可以预期装备将修改所有相同的属性；因此，我们可以使用与**物品**数据表相同的结构来为**装备**数据表使用相同的结构。
- en: 'So, at this point, we will create a Data Table for weapons by clicking on **Content
    Browser** and navigating to **+Add New** | **Miscellaneous** | **Data Table**:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，到目前为止，我们将通过点击**内容浏览器**并导航到**+添加新** | **杂项** | **数据表**来创建一个武器数据表：
- en: '![The weapons Data Table](img/B04548_09_01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![武器数据表](img/B04548_09_01.jpg)'
- en: 'Next, we can pick the **Items Data** structure since we will be calling the
    same data in the **Equipment** Data Table as we did in **Item** Data Table:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以选择**物品数据**结构，因为我们将在**装备**数据表中调用与在**物品**数据表中相同的数据：
- en: '![The weapons Data Table](img/B04548_09_02.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![武器数据表](img/B04548_09_02.jpg)'
- en: 'Then, name the Data Table **Weapons**:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将数据表命名为**武器**：
- en: '![The weapons Data Table](img/B04548_09_03.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![武器数据表](img/B04548_09_03.jpg)'
- en: We will use this **Weapons** Data Table to populate every weapon that we plan
    to equip on a character in the game. For now, we will only make a Data Table for
    one character's weapons, but you can use all of the following steps to create
    more weapon Data Tables for additional characters.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用这个**武器**数据表来填充游戏中计划装备在角色上的每一件武器。目前，我们只为一个角色的武器创建一个数据表，但您可以使用以下所有步骤为其他角色创建更多的武器数据表。
- en: You can now open the **Weapons** Data Table, and just like our **Items** Data
    Table, we begin with creating data by clicking on the **Add** button and then
    naming the data. In this case, we will make our first weapon, a dagger, and then
    give the dagger some stats. Since the dagger is a weapon, we will just need to
    modify the **ATK** stat. Since we are keeping our examples simple, we are not
    utilizing other stats that many other RPGs have such as *accuracy* and *dexterity*
    because we do not have accuracy or dexterity in our RPG framework. However, if
    you decide to add these additional mechanics to your game later on, you will want
    to modify the appropriate stats in your Data Table that are associated with your
    equipment. You may also want to give the dagger a gold value if weapons hold a
    resale value in your game.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以打开**武器**数据表，就像我们的**物品**数据表一样，我们通过点击**添加**按钮并命名数据来创建数据。在这种情况下，我们将制作我们的第一件武器，一把匕首，然后给匕首一些属性。由于匕首是武器，我们只需要修改**攻击力**属性。由于我们保持示例简单，我们没有利用许多其他RPG中具有的*准确度*和*敏捷度*等属性，因为我们没有在我们的RPG框架中准确度或敏捷度。然而，如果您决定稍后向您的游戏添加这些额外的机制，您将需要修改与您的装备相关的数据表中的适当属性。您还可能希望给匕首一个金币价值，如果武器在您的游戏中具有可回收价值的话。
- en: '![The weapons Data Table](img/B04548_09_04.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![武器数据表](img/B04548_09_04.jpg)'
- en: Setting the weapon and equipment screen variables
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置武器和装备屏幕变量
- en: Now that you have a weapon in your **Weapons** Data Table, we can set up a framework
    to equip this weapon.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经在**武器**数据表中有了武器，我们可以设置一个框架来装备这件武器。
- en: 'Just like the items that you created, you can choose to populate the weapons
    in a shop, you can choose to allow weapons to be picked up automatically from
    other NPCs in the field, or you can make them enemy drops just like you did with
    gold. Whichever method you choose, make sure that the weapons end up getting populated
    in your equipment screen in a similar way in which the items got populated in
    your inventory screen. At the bare minimum, we will need the character to hold
    an array of weapons. Navigate to the **FieldPlayer** Blueprint and open the Event
    Graph. Then, add a new text array variable that is similar to the **arrayItem**
    variable that you created in the previous chapter, and call it **arrayWeapons**:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 就像你创建的项目一样，你可以选择在商店中填充武器，你可以选择允许武器从场上的其他NPC自动拾取，或者你可以让它们成为敌人掉落物，就像你处理金币一样。无论你选择哪种方法，都要确保武器最终以与项目在库存屏幕中填充类似的方式填充到你的装备屏幕中。至少，我们需要角色持有武器数组。导航到**FieldPlayer**蓝图并打开事件图。然后，添加一个新的文本数组变量，类似于上一章中创建的**arrayItem**变量，并将其命名为**arrayWeapons**：
- en: '![Setting the weapon and equipment screen variables](img/B04548_09_05.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![设置武器和装备屏幕变量](img/B04548_09_05.jpg)'
- en: 'The major difference between the items and equipment is that we will be able
    to equip and unequip equipment rather than just *using* the equipment, so we will
    need to create a framework for this on our equipment screen. While we are in the
    **FieldPlayer** Blueprint, we can start creating this framework by also creating
    an `equipmentScreen` Boolean that we will eventually set to let the system know
    when the player is accessing the equipment screen. This will be needed when equipping
    weapons and armor just like the `inventoryScreen` Boolean was needed to allow
    the user to use items when accessing the inventory screen:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 项目和装备之间的主要区别在于，我们将能够装备和卸下装备，而不仅仅是*使用*装备，因此我们需要在我们的装备屏幕上为这一功能创建一个框架。当我们处于**FieldPlayer**蓝图时，我们可以通过创建一个`equipmentScreen`布尔值来开始创建这个框架，我们最终会将这个布尔值设置为让系统知道玩家何时访问装备屏幕。当装备武器和盔甲时，这将是必需的，就像`inventoryScreen`布尔值在访问库存屏幕时允许用户使用物品时是必需的一样：
- en: '![Setting the weapon and equipment screen variables](img/B04548_09_06.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![设置武器和装备屏幕变量](img/B04548_09_06.jpg)'
- en: 'Now that the player can hold a weapons array and an equipment screen Boolean,
    we need to navigate to the **Pause_Equipment** Event Graph, and set the `equipmentScreen`
    Boolean to true when the event is constructed, and set it to false when the player
    leaves the screen. This is identical to the way in which we set the `inventoryScreen`
    Boolean in the **Pause_Inventory** Event Graph:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在玩家可以持有武器数组和装备屏幕布尔值，我们需要导航到**Pause_Equipment**事件图，并在事件构建时将`equipmentScreen`布尔值设置为true，当玩家离开屏幕时将其设置为false。这与我们在**Pause_Inventory**事件图中设置`inventoryScreen`布尔值的方式相同：
- en: '![Setting the weapon and equipment screen variables](img/B04548_09_07.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![设置武器和装备屏幕变量](img/B04548_09_07.jpg)'
- en: Creating the weapon button
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建武器按钮
- en: 'Next, we can move on to populating the equipment screen. To do this, we first
    need to create a weapon button similar to the item button that we created previously.
    This weapon button will house all the logic that will be performed when the user
    presses the weapon button. Since the weapon button will be similar to the item
    button in a lot of ways, we can duplicate the item button and modify it to fit
    the weapon parameters. So, go to the **Item** Widget Blueprint by navigating to
    **Content Browser** | **Blueprints** | **UI**, and duplicate the **Item** Widget
    Blueprint:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以继续填充装备屏幕。为此，我们首先需要创建一个类似于之前创建的项目按钮的武器按钮。这个武器按钮将包含当用户按下武器按钮时将执行的所有逻辑。由于武器按钮在许多方面都类似于项目按钮，我们可以复制项目按钮并修改它以适应武器参数。因此，通过导航到**Content
    Browser** | **Blueprints** | **UI**，前往**Item** Widget 蓝图并复制**Item** Widget 蓝图：
- en: '![Creating the weapon button](img/B04548_09_08.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![创建武器按钮](img/B04548_09_08.jpg)'
- en: 'Then, rename it **Weapon**, as shown in the following screenshot:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将其重命名为**Weapon**，如图所示：
- en: '![Creating the weapon button](img/B04548_09_09.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![创建武器按钮](img/B04548_09_09.jpg)'
- en: We can now open the **Weapon** Widget Blueprint and navigate to the Event Graph.
    Here, you will see an exact copy of the **Item** Widget Blueprint logic, and since
    the logic for equipping weapons will be similar to using items, we can just modify
    the Event Graph to fit it with what we want to happen when the user presses the
    weapon button.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以打开**武器**小部件蓝图并导航到事件图。在这里，你会看到一个与**Item**小部件蓝图逻辑完全相同的副本，因为装备武器的逻辑将与使用物品相似，我们可以直接修改事件图以适应我们想要在用户按下武器按钮时发生的情况。
- en: 'First, we need to edit the section where the **OnClicked** event is located.
    We want the **OnClicked** event to find the `equipmentScreen` Boolean and check
    whether it is true, so we can remove the check for the `inventoryScreen` Boolean
    and replace it with the `equipmentScreen` Boolean:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要编辑**OnClicked**事件所在的区域。我们希望**OnClicked**事件找到`equipmentScreen`布尔值并检查它是否为true，因此我们可以移除对`inventoryScreen`布尔值的检查，并用`equipmentScreen`布尔值替换它：
- en: '![Creating the weapon button](img/B04548_09_10.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![创建武器按钮](img/B04548_09_10.jpg)'
- en: 'If the `equipmentScreen` Boolean returns false, the false branch will do nothing,
    and so we need to delete all of the false branch logic:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`equipmentScreen`布尔值返回false，则false分支将不执行任何操作，因此我们需要删除所有false分支逻辑：
- en: '![Creating the weapon button](img/B04548_09_11.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![创建武器按钮](img/B04548_09_11.jpg)'
- en: 'If the branch returns true, then we will set the **Get Data Table Row Weapons**
    function to get the **Weapons** Data Table:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果分支返回true，那么我们将设置**Get Data Table Row Weapons**函数以获取**武器**数据表：
- en: '![Creating the weapon button](img/B04548_09_12.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![创建武器按钮](img/B04548_09_12.jpg)'
- en: 'Then, from **Break ItemsData**, set it to break the data **ATK** stat, and
    set the **ATK** stat of the character accordingly:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，从**Break ItemsData**，将其设置为打破数据的**ATK**属性，并相应地设置角色的**ATK**属性：
- en: '![Creating the weapon button](img/B04548_09_13.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![创建武器按钮](img/B04548_09_13.jpg)'
- en: 'For now, the **OnClicked** event in your **Weapon** Event Graph will look like
    this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，你的**Weapon**事件图中的**OnClicked**事件将看起来像这样：
- en: '![Creating the weapon button](img/B04548_09_14.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![创建武器按钮](img/B04548_09_14.jpg)'
- en: 'Also, make sure that you are still setting the **Party Members** stats to the
    **Character Target** variable; otherwise, the base stats of the characters will
    not carry over correctly:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，确保你仍然将**Party Members**属性设置到**Character Target**变量中；否则，角色的基础属性将无法正确继承：
- en: '![Creating the weapon button](img/B04548_09_15.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![创建武器按钮](img/B04548_09_15.jpg)'
- en: Revisiting the equipment screen
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新访问设备屏幕
- en: You may notice that if we stick to this Event Graph, we will merely be using
    each weapon instead of equipping it because of the **Remove from Parent** function.
    We will come back to edit this Event Graph later on in the chapter to properly
    set the button to equip rather than use.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到，如果我们坚持使用这个事件图，我们仅仅会使用每一件武器而不是装备它，因为**Remove from Parent**函数的存在。我们将在本章后面回来编辑这个事件图，以正确设置按钮为装备而不是使用。
- en: We will now populate the equipment screen. As mentioned earlier in this chapter,
    you can choose how you want to populate the equipment screen. For simplicity of
    this example, we will just populate the equipment screen as we did with the shop.
    So, we will navigate back to the **Pause_Equipment** Widget Blueprint's Event
    Graph, and use the same logic that we implemented to populate the shop screen;
    only this time set the **Get Data Table Row Names** function to get the **Weapons**
    Data Table. Then, set the **Create Widget** function to get the **Weapon** widget.
    Note that you need to ensure that **is Variable** of the Scroll Box is checked
    in your **Designer** view; otherwise, your Scroll Box will produce an error because
    it won't be found.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将填充设备屏幕。如本章前面所述，你可以选择如何填充设备屏幕。为了简化这个示例，我们将像处理商店一样填充设备屏幕。因此，我们将导航回**Pause_Equipment**小部件蓝图的事件图，并使用我们用于填充商店屏幕的相同逻辑；这次将**Get
    Data Table Row Names**函数设置为获取**武器**数据表。然后，将**Create Widget**函数设置为获取**武器**小部件。请注意，你需要在**设计师**视图中确保**is
    Variable**的Scroll Box被勾选；否则，你的Scroll Box将产生错误，因为它找不到。
- en: 'The Event Graph of **Pause_Equipment** will look like this when you are done:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完成时，**Pause_Equipment**的事件图将看起来像这样：
- en: '![Revisiting the equipment screen](img/B04548_09_16.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![重新访问设备屏幕](img/B04548_09_16.jpg)'
- en: If you test the equipment screen now, you will notice that the weapons get populated
    in the Scroll Box, and if you use the equipment, the stats of the character go
    up and match the increased stats of the weapon. However, we still have some issues.
    The weapon is being used instead of equipped, and if we continue to use weapons,
    the stats end up climbing instead of getting replaced. Let's set the weapon to
    be equipped first rather than replaced.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在测试设备屏幕，你会注意到武器被填充到滚动框中，如果你使用装备，角色的统计数据会上升并匹配武器的增加统计数据。然而，我们还有一些问题。武器正在被使用而不是装备，如果我们继续使用武器，统计数据最终会上升而不是被替换。让我们首先设置装备武器而不是替换它。
- en: Setting the equipment screen Text Blocks
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置设备屏幕文本块
- en: 'Since we know that the equipment screen has Text Blocks on the right-hand side
    of the **Weapon** and **Armor** titles, which we created in [Chapter 5](ch05.html
    "Chapter 5. Bridging Character Statistics"), *Bridging Character Statistics*,
    we want to bind these Text Blocks to a text variable that will hold the names
    of the weapons and armor that we are equipping. Let''s first navigate to our **FieldPlayer**
    Blueprint Event Graph, and create a text variable to hold the soldier''s weapon
    name. We will call this text variable `soldierWeapon`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们知道设备屏幕在**武器**和**护甲**标题的右侧有文本块，这些文本块是在[第5章](ch05.html "第5章。连接角色统计数据")“连接角色统计数据”中创建的，因此我们希望将这些文本块绑定到一个文本变量上，该变量将保存我们装备的武器和护甲的名称。让我们首先导航到我们的**FieldPlayer**蓝图事件图，并创建一个用于保存士兵武器名称的文本变量。我们将把这个文本变量命名为`soldierWeapon`：
- en: '![Setting the equipment screen Text Blocks](img/B04548_09_17.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![设置设备屏幕文本块](img/B04548_09_17.jpg)'
- en: 'Next, navigate to the **Pause_Equipment** Widget Blueprint''s **Designer**
    view. Select the Text Block on the right-hand side of the **Weapon** title, navigate
    to **Details** | **Content** | **Text**, and click on the **Bind** drop-down menu
    to select **+Create Binding**:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，导航到**Pause_Equipment**小部件蓝图的**设计器**视图。选择**武器**标题右侧的文本块，导航到**详细信息** | **内容**
    | **文本**，然后点击**绑定**下拉菜单选择**+创建绑定**：
- en: '![Setting the equipment screen Text Blocks](img/B04548_09_18.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![设置设备屏幕文本块](img/B04548_09_18.jpg)'
- en: 'In the Event Graph for this binding, use the **Get All Actors Of Class** function
    to get all the actors of the **FieldPlayer**, and get the `soldierWeapon` variable
    and link it to the **Return Value** pin of **ReturnNode** so that the Text Block
    is able to draw the text that is saved in the `soldierWeapon` variable:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在此绑定的事件图中，使用**获取所有类别的演员**函数来获取所有**FieldPlayer**的演员，获取`soldierWeapon`变量并将其链接到**ReturnNode**的**返回值**引脚，以便文本块能够绘制保存在`soldierWeapon`变量中的文本：
- en: '![Setting the equipment screen Text Blocks](img/B04548_09_19.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![设置设备屏幕文本块](img/B04548_09_19.jpg)'
- en: 'We can now set the text to the `soldierWeapon` variable by going back to the
    **Weapon** Widget Blueprint Event Graph and replacing the **Remove from Parent**
    function with **Set soldierWeapon**. The text value of `soldierWeapon` should
    be set to the **Item** variable that the user clicks on:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以通过回到**武器**小部件蓝图事件图，将**从父级移除**函数替换为**设置soldierWeapon**来设置文本到`soldierWeapon`变量。`soldierWeapon`的文本值应设置为用户点击的**项目**变量：
- en: '![Setting the equipment screen Text Blocks](img/B04548_09_20.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![设置设备屏幕文本块](img/B04548_09_20.jpg)'
- en: If you test the equipment screen now, you will notice that when the equipment
    button is pressed, the name of the weapon gets updated and the weapons will not
    be removed from the equipment screen.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在测试设备屏幕，你会注意到当按下装备按钮时，武器的名称会更新，武器将不会从装备屏幕中移除。
- en: '![Setting the equipment screen Text Blocks](img/B04548_09_21.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![设置设备屏幕文本块](img/B04548_09_21.jpg)'
- en: Correcting the character stats when equipping
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 装备时修正角色统计数据
- en: The last thing that we need to do is adding some logic to make sure that the
    base stats do not continue to climb if the equipment is chosen more than once
    from the equipment screen. To do this, we need to create two variables in the
    **FieldPlayer** Blueprint. One variable will be a Boolean that keeps track of
    whether the soldier has a weapon equipped. The other will be an integer to keep
    track of the soldier's base attack stat. These elements together will allow us
    to create the logic in our weapon button that prevents the attack stat from climbing
    every time we click on a weapon.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的最后一件事是添加一些逻辑，以确保在装备屏幕中选择装备超过一次时，基本统计数据不会继续上升。为此，我们需要在**FieldPlayer**蓝图中创建两个变量。一个变量将是一个布尔值，用于跟踪士兵是否装备了武器。另一个将是一个整数，用于跟踪士兵的基本攻击统计数据。这些元素一起将允许我们在武器按钮中创建逻辑，防止每次点击武器时攻击统计数据上升。
- en: 'So, first navigate to the **FieldPlayer** Blueprint and create a Boolean called
    **soldierWeaponEquipped**. Then, create an integer called **soldierbaseAtk**:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，首先导航到**FieldPlayer**蓝图，创建一个名为**soldierWeaponEquipped**的布尔值。然后，创建一个名为**soldierbaseAtk**的整数：
- en: '![Correcting the character stats when equipping](img/B04548_09_23.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![装备时修正角色统计数据](img/B04548_09_23.jpg)'
- en: We specify these stats to be of a specific character and weapon equipment because
    if your game has more characters in your party, along with both weapons and armor
    for each character, you will need to differentiate between all the characters'
    statuses. Moreover, you may want to create a base status for every statistic because
    some equipment may change stats other than attack.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们指定这些统计数据为特定角色和武器装备，因为如果你的游戏中有更多角色在你的队伍中，每个角色都有武器和盔甲，你需要区分所有角色的状态。此外，你可能还想为每个统计数据创建一个基本状态，因为某些装备可能会改变除了攻击以外的统计数据。
- en: 'We can now create the logic using the new variables that we created. Navigate
    to the **Weapon** Widget Blueprint Event Graph. We need to modify some of our
    logic to tell when a weapon is equipped on the soldier. Create a **SET Soldier
    Weapon Equipped** function and set it to **true** after you have equipped the
    weapon (or pressed the button for the weapon):'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以使用我们创建的新变量来创建逻辑。导航到**武器**小部件蓝图事件图。我们需要修改一些逻辑，以便在士兵装备了武器时通知。创建一个**设置士兵武器装备**函数，并在装备了武器（或按下了武器按钮）后将其设置为**true**：
- en: '![Correcting the character stats when equipping](img/B04548_09_24.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![装备时修正角色统计数据](img/B04548_09_24.jpg)'
- en: Remember that since this particular button equips the soldier's weapon only
    when it is pressed, if you have additional characters and/or different types of
    equipment, you need to create a different Widget Blueprint to accommodate these
    characters and equipment types.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，由于这个特定的按钮只有在按下时才会装备士兵的武器，如果你有额外的角色和/或不同类型的装备，你需要创建一个不同的Widget蓝图来适应这些角色和装备类型。
- en: Next, we need to create the logic to calculate the base attack. Since we have
    already used the Boolean to differentiate between when the soldier is equipping
    a weapon or not, we can use this logic to calculate the base attack stat. What
    we know in our game, by default, is that the character does not have a weapon
    equipped. So, what we can do is define the base attack stat as soon as we construct
    this Widget Blueprint, but specifically, when the soldier does not have a weapon
    equipped.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建计算基本攻击的逻辑。由于我们已经使用布尔值来区分士兵是否在装备武器，我们可以使用这个逻辑来计算基本攻击统计数据。在我们的游戏中，默认情况下，角色没有装备武器。所以，我们可以定义基本攻击统计数据，当我们构造这个Widget蓝图时，但具体来说，当士兵没有装备武器时。
- en: 'At this point, when the Widget Blueprint is constructed, get all the actors
    of the Field Player class using the **Get All Actors Of Class** function. After
    we have got all the actors of this class, get the `soldierWeaponEquipped` variable.
    Let''s allow the **Get All Actors Of Class** function to fire off a branch that
    checks whether the `soldierWeaponEquipped` variable is true or false:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，当Widget蓝图被构造时，使用**获取所有类别的演员**函数获取Field Player类的所有演员。在我们获取了这个类别的所有演员之后，获取`soldierWeaponEquipped`变量。让我们允许**获取所有类别的演员**函数触发一个分支，检查`soldierWeaponEquipped`变量是true还是false：
- en: '![Correcting the character stats when equipping](img/B04548_09_25.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![装备时修正角色统计数据](img/B04548_09_25.jpg)'
- en: 'If the condition is false, set the **soldierbaseAtk** to the **ATK** variable
    of the character. When choosing a weapon, instead of adding the **ATK** of **ItemData**
    and the **ATK** of the current character''s **ATK** stat, add the **ATK** of **ItemData**
    and **soldierbaseAtk** so that we can always use the base **ATK** variable when
    equipping a weapon rather than the current stat. This will prevent the **ATK**
    variable from climbing:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果条件为假，将**soldierbaseAtk**设置为角色的**ATK**变量。在选择武器时，而不是将**ItemData**的**ATK**和当前角色的**ATK**统计数据相加，而是将**ItemData**的**ATK**和**soldierbaseAtk**相加，这样我们就可以在装备武器时始终使用基础**ATK**变量而不是当前统计数据。这将防止**ATK**变量上升：
- en: '![Correcting the character stats when equipping](img/B04548_09_26-1.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![装备角色统计数据时的修正](img/B04548_09_26-1.jpg)'
- en: One major problem you will notice is that the attack stat will continue to grow
    if we exit the equipment screen and come back to equip an item. This is because
    we do not have logic in place for when a weapon is already equipped. So, when
    `soldierWeaponEquipped` is true, we need to find which weapon is currently equipped,
    and subtract its stats from the soldier's base stats in order to reset the base
    stats.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现的一个主要问题是，如果我们退出装备界面然后回来装备物品，攻击统计数据将继续增长。这是因为我们没有为已经装备的武器设置逻辑。因此，当`soldierWeaponEquipped`为真时，我们需要找到当前装备的武器，并从士兵的基础统计数据中减去其统计数据以重置基础统计数据。
- en: 'To do this, we will simply use the **Get Data Table Row Names** function to
    get the names of the items in the **Weapons** Data Table. For each name in the
    Data Table, we need to compare the name to the `soldierWeapon` variable from the
    Field Player class. If the names are equal, we get the row name from the **Weapons**
    Data Table using the **Get Data Table Row** function, subtract the **ATK** stat
    of the weapon from the `soldierbaseAtk` stat, find the absolute value of that
    operation using the **Absolute (Int)** function, and finally, set that number
    to the `soldierbaseAtk` stat:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，我们将简单地使用**获取数据表行名称**函数来获取**武器**数据表中的物品名称。对于数据表中的每个名称，我们需要将名称与字段玩家类的`soldierWeapon`变量进行比较。如果名称相等，我们使用**获取数据表行**函数从**武器**数据表中获取行名称，从`soldierbaseAtk`统计数据中减去武器的**ATK**统计数据，使用**绝对值（整数）**函数找到该操作的绝对值，最后将这个数字设置为`soldierbaseAtk`统计数据：
- en: '![Correcting the character stats when equipping](img/B04548_09_26.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![装备角色统计数据时的修正](img/B04548_09_26.jpg)'
- en: At this point, if you test the equipping of weapons, the attack stat will no
    longer climb.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，如果你测试武器的装备，攻击统计数据将不再上升。
- en: This method will work since we do not have a leveling system in place yet. However,
    when we do have a leveling system in place, we will want to replace this **ATK**
    variable with the base **ATK** variable that we create for the leveling.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们还没有设置等级系统，这种方法将有效。然而，当我们设置了等级系统后，我们希望用我们为等级创建的基础**ATK**变量来替换这个**ATK**变量。
- en: Summary
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Now that you know how to equip and set stats for the soldier's weapon, you can
    use similar methodologies to create Data Tables, Blueprints, and logic for other
    characters and their equipment.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道了如何为士兵的武器配置和设置统计数据，你可以使用类似的方法来创建数据表、蓝图以及其他角色及其装备的逻辑。
- en: In the next chapter, we will create a leveling system for our game. We will
    learn how to allow enemies to give experience points to the player after they
    are defeated, which will then be used to level up characters in the game.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将为我们的游戏创建一个等级系统。我们将学习如何在敌人被击败后允许敌人给玩家经验值，然后这些经验值将被用来提升游戏中的角色等级。
