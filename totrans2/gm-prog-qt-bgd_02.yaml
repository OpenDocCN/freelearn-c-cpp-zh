- en: Chapter 2. Installation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 2 章。安装
- en: '*In this chapter, you will learn how to install Qt on your development machine,
    including Qt Creator, an IDE tailored to use with Qt. You will see how to configure
    the IDE for your needs and learn the basic skills to use that environment. In
    addition to this, the chapter will describe the process of building Qt from the
    source code, which can be useful for customizing your Qt installation as well
    as getting a working Qt installation for embedded platforms. By the end of this
    chapter, you will be able to prepare your working environment for both desktop
    and embedded platforms using tools included in the Qt release.*'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*在本章中，您将学习如何在您的开发机器上安装 Qt，包括专为与 Qt 一起使用而设计的 IDE——Qt Creator。您将了解如何根据您的需求配置
    IDE，并学习使用该环境的基本技能。此外，本章还将描述从源代码构建 Qt 的过程，这对于自定义您的 Qt 安装以及为嵌入式平台获取一个可工作的 Qt 安装非常有用。在本章结束时，您将能够使用
    Qt 发布中包含的工具为桌面和嵌入式平台准备您的开发环境。* '
- en: Installing the Qt SDK
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Qt SDK
- en: Before you can start using Qt on your machine, it needs to be downloaded and
    installed. Qt can be installed using dedicated installers that come in two flavors—the
    online installer, which downloads all the needed components on the fly, and a
    much larger offline installer, which already contains all the required components.
    Using an online installer is easier for regular desktop installs, so we will prefer
    this approach.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在您可以在您的机器上开始使用 Qt 之前，它需要被下载和安装。Qt 可以使用两种类型的专用安装程序进行安装——在线安装程序，它会在运行时下载所有需要的组件，以及一个更大的离线安装程序，它已经包含了所有需要的组件。使用在线安装程序对于常规桌面安装来说更容易，因此我们将优先选择这种方法。
- en: Time for action – installing Qt using an online installer
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用在线安装程序安装 Qt 的行动时间
- en: 'First, go to [http://qt.io](http://qt.io) and click on **Download**. This should
    bring you to a page containing a list of options for different licensing schemes.
    To use the open source version, choose the Open Source edition licensed under
    GPL and LGPL. Then, you can click on the **Download Now** button to retrieve the
    online installer for the platform that you are currently running on or you can
    click on any of the header sections to reach a more comprehensive list of options.
    The links to online installers are at the beginning of the list, as shown in the
    following screenshot. Click and download the one suited to your host machine:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，访问 [http://qt.io](http://qt.io) 并点击 **下载**。这将带您到一个包含不同许可方案选项的页面。要使用开源版本，请选择受GPL和LGPL许可的开源版。然后，您可以点击
    **立即下载** 按钮以获取您当前运行的平台的在线安装程序，或者您可以点击任何标题部分以查看更全面的选项列表。在线安装程序的链接位于列表开头，如下面的截图所示。点击并下载适合您主机机的版本：
- en: '![Time for action – installing Qt using an online installer](img/8874OS_02_01.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![使用在线安装程序安装 Qt 的行动时间](img/8874OS_02_01.jpg)'
- en: 'When the download completes, run the installer, as shown:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 下载完成后，运行安装程序，如下所示：
- en: '![Time for action – installing Qt using an online installer](img/8874OS_02_02.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![使用在线安装程序安装 Qt 的行动时间](img/8874OS_02_02.jpg)'
- en: Click on **Next** and after a while of waiting as the downloader checks remote
    repositories, you'll be asked for the installation path. Be sure to choose a path
    where you have write access (it's best to put Qt into your personal directory
    unless you ran the installer as the system administrator user). Clicking on **Next**
    again will present you with choices of components that you wish to install, as
    shown in the following screenshot. You will be given different choices depending
    on your platform.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **下一步**，在下载器检查远程存储库的一段时间后，您将被要求输入安装路径。请确保选择您有写入权限的路径（最好将 Qt 放入您的个人目录中，除非您是以系统管理员用户身份运行安装程序）。再次点击
    **下一步** 将会向您展示您希望安装的组件的选择，如下面的截图所示。您将根据您的平台获得不同的选择。
- en: '![Time for action – installing Qt using an online installer](img/8874OS_02_03.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![使用在线安装程序安装 Qt 的行动时间](img/8874OS_02_03.jpg)'
- en: Choose whichever platforms you need, for example, to build native and Android
    applications on Linux, choose both gcc-based installation and one for the desired
    Android platform. When on Windows, you have to make additional choices. When using
    Microsoft compilers, you can choose whether to use native OpenGL drivers (the
    versions with the `OpenGL` suffix) or to emulate OpenGL ES using DirectX calls.
    If you don't have a Microsoft compiler or you simply don't want to use it, choose
    the version of Qt for the MinGW compiler. If you don't have a MinGW installation,
    don't worry—the installer will also install it for you.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 选择您需要的平台，例如，要在 Linux 上构建原生和 Android 应用程序，请选择基于 gcc 的安装和所需 Android 平台的安装。在 Windows
    上，您需要做出额外的选择。当使用 Microsoft 编译器时，您可以选择是否使用带 `OpenGL` 后缀的本地 OpenGL 驱动程序，或者使用 DirectX
    调用来模拟 OpenGL ES。如果您没有 Microsoft 编译器或者您根本不想使用它，请选择 MinGW 编译器的 Qt 版本。如果您没有 MinGW
    安装，请不要担心——安装程序也会为您安装它。
- en: After choosing the needed components and clicking on **Next** again, you will
    have to accept the licensing terms for Qt by marking an appropriate choice, as
    shown in the following screenshot. After clicking on **Install**, the installer
    will begin downloading and installing the required packages. Once this is done,
    your Qt installation will be ready. At the end of the process, you will be given
    an option to launch Qt Creator.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择所需组件并再次点击**下一步**后，您需要通过标记适当的选项来接受 Qt 的许可条款，如图所示。点击**安装**后，安装程序将开始下载和安装所需的软件包。一旦完成，您的
    Qt 安装就绪。在过程结束时，您将有一个选项来启动 Qt Creator。
- en: '![Time for action – installing Qt using an online installer](img/8874OS_02_05.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![使用在线安装程序安装 Qt 的时间](img/8874OS_02_05.jpg)'
- en: '*What just happened?*'
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: The process we went through results in the whole Qt infrastructure appearing
    on your disk. You can examine the directory you pointed to the installer to see
    that it created a number of subdirectories in this directory—one for each version
    of Qt chosen with the installer and another one called `Tools` that contains Qt
    Creator. You can see that if you ever decide to install another version of Qt,
    it will not conflict with your existing installation. Furthermore, for each version,
    you can have a number of platform subdirectories that contain the actual Qt installations
    for particular platforms.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所经历的过程会在您的磁盘上出现整个 Qt 基础设施。您可以检查指向安装程序的目录，看看它是否在这个目录中创建了许多子目录——每个子目录对应于安装程序选择的
    Qt 的一个版本，还有一个名为 `Tools` 的子目录，其中包含 Qt Creator。您可以看到，如果您决定安装另一个版本的 Qt，它不会与您的现有安装冲突。此外，对于每个版本，您可以有多个平台子目录，其中包含特定平台的实际
    Qt 安装。
- en: Setting up Qt Creator
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Qt Creator
- en: 'After Qt Creator starts, you should be presented with the following screen:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Creator 启动后，您应该会看到以下屏幕：
- en: '![Setting up Qt Creator](img/8874OS_02_07.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![设置 Qt Creator](img/8874OS_02_07.jpg)'
- en: The program should already be configured properly for you to use the version
    of Qt and compiler that were just installed, but let's verify that anyway. From
    the **Tools** menu, choose **Options**. Once a dialog box pops up, choose **Build
    & Run** from the side list. This is the place where we can configure the way Qt
    Creator builds our project. A complete build configuration is called a **kit**.
    It consists of a Qt installation and a compiler that will be executed to perform
    the build. You can see tabs for all the three entities in the **Build & Run**
    section of the **Options** dialog box.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 程序应该已经为您正确配置，以便您可以使用刚刚安装的 Qt 版本和编译器，但让我们无论如何验证一下。从**工具**菜单中选择**选项**。一旦弹出对话框，从侧边列表中选择**构建和运行**。这是我们可以配置
    Qt Creator 构建项目方式的地方。一个完整的构建配置称为**套件**。它由一个 Qt 安装和一个用于执行构建的编译器组成。您可以在**选项**对话框的**构建和运行**部分看到这三个实体的标签页。
- en: Let's start with the **Compilers** tab. If your compiler was not autodetected
    properly and is not in the list, click on the **Add** button, choose your compiler
    type from the list, and fill the name and path to the compiler. If the settings
    were entered correctly, Creator will autofill all the other details. Then, you
    can click on **Apply** to save the changes.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从**编译器**选项卡开始。如果您的编译器没有正确检测到并且不在列表中，请点击**添加**按钮，从列表中选择您的编译器类型，并填写编译器的名称和路径。如果设置正确输入，Creator
    将自动填写所有其他详细信息。然后，您可以点击**应用**来保存更改。
- en: Next, you can switch to the **Qt Versions** tab. Again, if your Qt installation
    was not detected automatically, you can click on **Add**. This will open a file
    dialog box where you will need to find your Qt installation's directory wherein
    all the binary executables are stored (usually in the `bin` directory) and select
    a binary called `qmake`. Qt Creator will warn you if you choose a wrong file.
    Otherwise, your Qt installation and version should be detected properly. If you
    want, you can adjust the version name in the appropriate box.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您可以切换到**Qt版本**标签页。如果您的Qt安装没有自动检测到，您可以点击**添加**。这将打开一个文件对话框，您需要找到您的Qt安装目录，其中存储了所有二进制可执行文件（通常在`bin`目录中），并选择一个名为`qmake`的二进制文件。如果选择错误文件，Qt
    Creator会警告您。否则，您的Qt安装和版本应该能够正确检测。如果您愿意，可以在相应的框中调整版本名称。
- en: The last tab to look at is the **Kits** tab. It allows you to pair a compiler
    with the Qt version to be used for compilation. In addition to this, for embedded
    and mobile platforms, you can specify a device to deploy to and a `sysroot` directory
    containing all the files needed to build the software for the specified embedded
    platform.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个要查看的标签页是**套件**标签页。它允许您将编译器与用于编译的Qt版本配对。此外，对于嵌入式和移动平台，您可以指定要部署的设备以及包含构建指定嵌入式平台所需所有文件的`sysroot`目录。
- en: Time for action – loading an example project
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动手时间 - 加载示例项目
- en: 'Qt comes with a lot of examples. Let''s try building one to check whether the
    installation and configuration were done correctly. In Qt Creator, click on the
    **Welcome** button on the top-left corner of the window to go the initial screen
    of the IDE. On the right-hand side of the page that appears (refer to the previous
    screenshot) there are a couple of tabs among which one of them happens to be called
    **Examples**. Clicking on that tab will open a list of examples with a search
    box. Make sure that the version of Qt you just installed is chosen in the list
    next to the search box. In the box, enter `aff` to filter the list of examples
    and click on **Affine Transformations** to open the project. If you are asked
    whether you want to copy the project to a new folder, agree. Qt Creator will then
    present you with the following window:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Qt自带了很多示例。让我们尝试构建一个示例来检查安装和配置是否正确完成。在Qt Creator中，点击窗口左上角的**欢迎**按钮进入IDE的初始屏幕。在出现的页面右侧（参考前面的截图），有几个标签页，其中一个是名为**示例**的标签页。点击该标签页将打开一个示例列表，并包含一个搜索框。确保在搜索框旁边的列表中选择了您刚刚安装的Qt版本。在框中输入`aff`以过滤示例列表，然后点击**仿射变换**以打开项目。如果您被问及是否要将项目复制到新文件夹，请同意。然后Qt
    Creator将向您展示以下窗口：
- en: '![Time for action – loading an example project](img/8874OS_02_08.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![动手时间 - 加载示例项目](img/8874OS_02_08.jpg)'
- en: '*What just happened?*'
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: Qt Creator loaded the project and set a view that will help us to learn from
    example projects. The view is divided into four parts. Let's enumerate them starting
    from the left side. First there is Qt Creator's working mode selector that contains
    an action bar, which allows us to toggle between different modes of the IDE. Then,
    there is the project view that contains a list of files for the project. Next
    comes the source code editor, displaying the main part of the project's source
    code. Finally, far to the right, you can see the online help window displaying
    the documentation for the opened example.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Creator加载了项目并设置了一个视图，该视图将帮助我们学习示例项目。视图分为四个部分。让我们从左侧开始列举。首先是Qt Creator的工作模式选择器，其中包含一个操作栏，允许我们在IDE的不同模式之间切换。然后是项目视图，其中包含项目文件列表。接下来是源代码编辑器，显示项目的主要源代码部分。最后，在右侧远处，您可以看到在线帮助窗口，显示打开示例的文档。
- en: Time for action – running the Affine Transformations project
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动手时间 - 运行仿射变换项目
- en: 'Let''s try building and running the project to check whether the building environment
    is configured properly. First, click on the icon in the action bar directly over
    the green triangle icon to open the build configuration popup, as shown in the
    following screenshot:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试构建并运行项目以检查构建环境是否配置正确。首先，点击绿色三角形图标直接上方的图标以打开构建配置弹出窗口，如图所示：
- en: '![Time for action – running the Affine Transformations project](img/8874OS_02_09.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![动手时间 - 运行仿射变换项目](img/8874OS_02_09.jpg)'
- en: 'The exact content that you get may vary depending on your installation, but
    in general, on the left-hand side you will see the list of kits configured for
    the project and on the right-hand side you will see the list of build configurations
    defined for that kit. Choose a kit for your desktop installation and any of the
    configurations defined for that kit. You can adjust configurations by switching
    Qt Creator to the project management mode by clicking on the **Projects** button
    in the working mode selector bar. There, you can add and remove kits from the
    project and manage build configurations for each of the kits, as shown in the
    following screenshot:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您获得的确切内容可能因您的安装而异，但通常，在左侧您将看到为项目配置的套件列表，在右侧您将看到为该套件定义的构建配置列表。为您的桌面安装选择一个套件以及为该套件定义的任何配置。您可以通过切换
    Qt Creator 到项目管理模式来调整配置，方法是点击工作模式选择栏中的**项目**按钮。在那里，您可以向项目添加和删除套件，并管理每个套件的构建配置，如图中所示：
- en: '![Time for action – running the Affine Transformations project](img/8874OS_02_10.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![执行动作时间 - 运行仿射变换项目](img/8874OS_02_10.jpg)'
- en: You can adjust, build, and clean steps, and toggle shadow building (that is,
    building your project outside the source code directory tree).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以调整、构建和清理步骤，并切换阴影构建（即在源代码目录树外构建您的项目）。
- en: 'To build the project, click on the hammer icon at the bottom of the action
    bar. You can also click on the green triangle icon to build and run the project.
    If everything works, after some time, the application should be launched, as shown
    in the next screenshot:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建项目，请点击操作栏底部的锤子图标。您还可以点击绿色三角形图标来构建和运行项目。如果一切正常，经过一段时间后，应用程序应该会启动，如图所示：
- en: '![Time for action – running the Affine Transformations project](img/8874OS_02_11.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![执行动作时间 - 运行仿射变换项目](img/8874OS_02_11.jpg)'
- en: '*What just happened?*'
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: How exactly was the project built? If you open the **Projects** mode and look
    at **Build Settings** for a kit assigned to the project (as seen in one of the
    previous screenshots), you will notice that a number of build steps were defined.
    The first step for Qt projects is usually the `qmake` step, which runs a special
    tool that generates a `Makefile` for the project that is fed in the second step
    to a classic `make` tool. You can expand each of the steps by clicking on the
    respective **Details** button to see configuration options for each of the steps.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 项目是如何构建的？如果您打开**项目**模式并查看分配给项目的**构建设置**（如图中所示的前一个截图），您会注意到定义了多个构建步骤。Qt 项目的第一步通常是`qmake`步骤，它运行一个特殊的工具，为项目生成一个`Makefile`，该`Makefile`在第二步被传递给经典的`make`工具。您可以通过点击相应的**详细信息**按钮来展开每个步骤，以查看每个步骤的配置选项。
- en: While `make` is considered as a standard tool for building software projects,
    `qmake` is a custom tool provided with Qt. If you go back to the **Edit** mode
    and see which files are listed in the project contents, you will notice a file
    with a `pro` extension. This is the main project file that contains a list of
    source and headers files in the project, definitions of Qt modules active for
    the project, and optionally, external libraries that the project needs to link
    against. If you want to learn the details of how such project files are managed,
    you can switch to the **Help** mode, choose **Index** from the drop-down list
    on the top of the window, and type `qmake Manual` to find the manual for the tool.
    Otherwise, just let Qt Creator manage your project for you. For self-contained
    Qt projects, you don't need to be a qmake expert.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`make`被认为是构建软件项目的标准工具，但`qmake`是 Qt 提供的自定义工具。如果您回到**编辑**模式并查看项目内容中列出的文件，您会注意到一个扩展名为`pro`的文件。这是主要的项目文件，其中包含项目中的源文件和头文件列表，为项目定义的
    Qt 模块，以及可选的外部库，项目需要链接这些库。如果您想了解此类项目文件的管理细节，可以切换到**帮助**模式，从窗口顶部的下拉列表中选择**索引**，并输入`qmake
    Manual`以找到该工具的说明书。否则，只需让 Qt Creator为您管理项目即可。对于自包含的 Qt 项目，您不需要成为 qmake 专家。
- en: Building Qt from sources
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从源代码构建 Qt
- en: In most cases for desktop and mobile platforms, the binary release of Qt you
    download from the webpage is sufficient for all your needs. However, for embedded
    systems, especially for those ARM-based systems, there is no binary release available
    or it is too heavy resource-wise for such a lightweight system. In such cases,
    a custom Qt build needs to be performed. There are two ways to do such a build.
    One is to download the sources as a compressed archive just like the binary package.
    The other is to download the code directly from a Git repository. Since the first
    way is pretty much self-explanatory, we'll focus on the second approach.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，对于桌面和移动平台，您从网页上下载的Qt的二进制发布版足以满足您的所有需求。然而，对于嵌入式系统，尤其是基于ARM的系统，可能没有可用的二进制发布版，或者对于这样一个轻量级系统来说，二进制发布版资源太重。在这种情况下，需要执行自定义的Qt构建。有两种方式进行这样的构建。一种是将源代码作为压缩归档下载，就像二进制包一样。另一种是从Git仓库直接下载代码。由于第一种方法相当直观，我们将重点介绍第二种方法。
- en: Time for action – setting up Qt sources using Git
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 使用Git设置Qt源代码
- en: First, you need to install Git on your system if you don't already have it.
    How to do that depends on your operating system. For Windows, simply download
    an installer from [https://git-for-windows.github.io](https://git-for-windows.github.io).
    For Mac, the installer is available at [http://code.google.com/p/git-osx-installer](http://code.google.com/p/git-osx-installer).
    For Linux, the simplest way is to use your system's package manager. For instance,
    on Debian-based distributions, just issue the `sudo apt-get install git` command
    on a terminal and wait until the installation gets completed.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，如果您还没有安装Git，您需要在系统上安装它。如何做取决于您的操作系统。对于Windows，只需从[https://git-for-windows.github.io](https://git-for-windows.github.io)下载安装程序。对于Mac，安装程序可在[http://code.google.com/p/git-osx-installer](http://code.google.com/p/git-osx-installer)找到。对于Linux，最简单的方法是使用系统包管理器。例如，在基于Debian的发行版上，只需在终端中输入`sudo
    apt-get install git`命令，然后等待安装完成。
- en: 'Afterwards, you need to clone Qt''s Git repository. Since Git is a command-line
    tool, we''ll be using the command line from now on. To clone Qt''s repository
    to a directory where you want to keep the sources, issue the following command:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，您需要克隆Qt的Git仓库。由于Git是一个命令行工具，我们将从现在开始使用命令行。要将Qt的仓库克隆到您想要保存源代码的目录中，请输入以下命令：
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If all goes well, Git will download a lot of source code from the network and
    create a `qt5` directory, containing all the files that were downloaded. Then,
    change the current working directory to the one containing the freshly downloaded
    code:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，Git将从网络下载大量源代码并创建一个名为`qt5`的目录，其中包含所有下载的文件。然后，将当前工作目录更改为包含新下载代码的目录：
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then you need to run a Perl script that will set up all the additional repositories
    for you. If you don''t have Perl installed, you should do that now (you can get
    Perl for Windows from [http://www.activestate.com/activeperl/downloads](http://www.activestate.com/activeperl/downloads)).
    Then, issue the following command:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您需要运行一个Perl脚本，该脚本将为您设置所有额外的仓库。如果您还没有安装Perl，您应该现在安装它（您可以从[http://www.activestate.com/activeperl/downloads](http://www.activestate.com/activeperl/downloads)获取Windows版本的Perl）。然后，输入以下命令：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The script will start downloading all the modules required for Qt and should
    complete successfully after a period dependent on your network link speed.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本将开始下载Qt所需的所有模块，并在依赖于您的网络链路速度的一段时间后成功完成。
- en: '*What just happened?*'
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: At this point in the `qt5` directory, you have a number of subdirectories for
    different Qt modules (some of them were mentioned in [Chapter 1](ch01.html "Chapter 1. Introduction
    to Qt"), *Introduction to Qt*) each with a local Git repository containing the
    source code for the respective Qt modules and tools. Each of the modules can be
    updated separately if required.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在此`qt5`目录中，您将看到为不同的Qt模块（其中一些在[第1章](ch01.html "第1章。Qt简介")，*Qt简介*中提到）创建的多个子目录，每个子目录都包含相应Qt模块和工具的源代码的本地Git仓库。如果需要，每个模块都可以单独更新。
- en: Time for action – configuring and building Qt
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 配置和构建Qt
- en: 'Having the sources in place, we can start building the framework. To do that,
    in addition to a supported compiler, you will need Perl and Python (Version 2.7
    or later) installed. For Windows, you will also need Ruby. If you are missing
    any of the tools, it''s a good time to install them. Afterwards, open the command
    line and change the current working directory to the one containing the Qt source
    code. Then, issue the following command:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在源代码就绪的情况下，我们可以开始构建框架。为此，除了支持的编译器外，您还需要安装Perl和Python（版本2.7或更高）。对于Windows，您还需要Ruby。如果您缺少任何工具，现在是安装它们的好时机。之后，打开命令行，将当前工作目录更改为包含Qt源代码的目录。然后，输入以下命令：
- en: '[PRE3]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This will launch a tool that detects whether all the requirements are met and
    will report any inconsistencies. It will also report the exact configuration of
    the build. You can customize the build (for example, if you need to enable or
    disable some features or cross-compile Qt for an embedded platform) by passing
    additional options to `configure`. You can see the available options by running
    `configure` with the `-help` switch.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动一个工具，用于检测是否满足所有要求，并将报告任何不一致之处。它还将报告构建的确切配置。您可以通过向`configure`传递额外的选项来自定义构建（例如，如果您需要启用或禁用某些功能或为嵌入式平台交叉编译Qt），以运行`configure
    -help`来查看可用选项。
- en: If `configure` reports problems, you will have to fix them and restart the tool.
    Otherwise, start the build process by invoking `make` (or an equivalent like `mingw32-make`
    if using MinGW or `nmake` if using MSVC).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`configure`报告了问题，您将需要修复这些问题并重新启动工具。否则，通过调用`make`（或者在MinGW中使用`mingw32-make`，或者在MSVC中使用`nmake`）来启动构建过程。
- en: Tip
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Instead of `nmake`, you can use a tool called `jom` that is bundled with Qt.
    It will reduce the compilation time on multicore machines, which is what the default
    `nmake` tool can't do. For `make` and `mingw32-make`, you can pass the `-j N`
    parameter, where `N` stands for the number of cores in your machine.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`nmake`，您还可以使用Qt捆绑的工具`jom`。它将在多核机器上减少编译时间，这是默认的`nmake`工具所做不到的。对于`make`和`mingw32-make`，您可以通过传递`-j
    N`参数来传递，其中`N`代表您机器上的核心数。
- en: '*What just happened?*'
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: After some time (usually less than an hour), if all goes well, the build should
    be complete and you will be ready to add the compiled framework to the list of
    kits available in Qt Creator.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 经过一段时间（通常不到一小时），如果一切顺利，构建应该完成，您将准备好将编译好的框架添加到Qt Creator中可用的工具包列表中。
- en: Tip
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: In Unix systems after the build gets completed, you can invoke a `make` install
    command with super-user privileges (obtained for example, with `sudo`) to copy
    the framework to a more appropriate place.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unix系统上，构建完成后，您可以使用超级用户权限（例如，通过`sudo`获得）调用`make install`命令，将框架复制到更合适的位置。
- en: Summary
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: By now, you should be able to install Qt on your development machine. You can
    now use Qt Creator to browse the existing examples and learn from them or to read
    the Qt reference manual to gain additional knowledge. You can also just start
    a new C++ project and start writing code for it, build, and execute it. Once you
    become an experienced Qt developer, you will also be able to make your own custom
    build of Qt. In the next chapter, we will finally start using the framework and
    you will learn how to create graphical user interfaces by implementing our very
    first simple game.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您应该能够在您的开发机器上安装Qt。现在，您可以使用Qt Creator浏览现有示例并从中学习，或者阅读Qt参考手册以获取更多知识。您也可以开始一个新的C++项目，为其编写代码，构建并执行它。一旦您成为经验丰富的Qt开发者，您也将能够创建自己的自定义Qt构建。在下一章中，我们最终将开始使用框架，您将学习如何通过实现我们非常简单的第一个游戏来创建图形用户界面。
