["```cpp\nVoid prepareSettings( Settings *settings );\nVoid setup();\nVoid update();\nVoid draw();\nVoid shutdown();\n```", "```cpp\n    void MyApp::prepareSettings( Settings *settings ){\n      settings->setSize( 1024, 768 );\n      settings->setTitle( \"My Application Window\" );\n      settings->setFrameRate( 60 );\n    }\n    ```", "```cpp\n    int mCamWidth;\n    int mCamHeight;\n    Capture mCapture;\n    And initialize them in the setup\n    void Myapp::setup(){\n      mCamWidth = 640;\n      mCamHeight = 480;\n      mCapture = Capture( mCamWidth, mCamHeight );\n    }\n    ```", "```cpp\n    void MyApp::update(){\n      console() < < geElapsedFrames() < < std::endl;\n    }\n    ```", "```cpp\n    void MyApp::draw(){\n      gl::clear( Color::black() );\n      gl::color( Color( 1.0f, 0.0f, 0.0f ) );\n      gl::drawSolidCircle( Vec2f( 300.0f, 300.0f ), 100.0f  );\n    }\n    ```", "```cpp\n    void MyApp::shutdown(){\n      XmlTree doc = XmlTree::createDoc();\n      XmlTree settings = xmlTree( \"Settings\", \"\" );\n      //add some attributes to the settings node\n      doc.push_back( settings );\n      doc.write( writeFile( \"Settings.xml\" ) );\n    }\n    ```", "```cpp\nvoid mouseDown( MouseEvent event );\nvoid mouseUp( MouseEvent event );\nvoid mouseWheel( MouseEvent event );\nvoid mouseMove( MouseEvent event );\nvoid mouseDrag( MouseEvent event );\n```", "```cpp\n    Vec2i mousePos = event.getPos();\n    ```", "```cpp\n    int mouseX = event.getX();\n    int mouseY = event.getY();\n    ```", "```cpp\n    bool leftButton = event.isLeft();\n    bool rightButton = event.isRight();\n    bool middleButton = event.isMiddle();\n    ```", "```cpp\n    bool leftDown = event.isLeftDown();\n    bool rightDown = event.isRightDown();\n    bool middleDown = event.isMiddleDown();\n    ```", "```cpp\n    float wheelIncrement = event.getWheelIncrement();\n    ```", "```cpp\nvoid keyDown( KeyEvent event );\nvoid keyUp( KeyEvent event );\n```", "```cpp\n    char character = event.getChar();\n    ```", "```cpp\n    bool escPressed = event.getCode() == KeyEvent::KEY_ESCAPE;\n    ```", "```cpp\nvoid touchesBegan( TouchEvent event );\nvoid touchesMoved( TouchEvent event );\nvoid touchesEnded( TouchEvent event );\n```", "```cpp\n    const std::vector<TouchEvent::Touch>& touches = event.getTouches();\n    ```", "```cpp\n    for( std::vector<TouchEvent::Touch>::const_iterator it = touches.begin(); it != touches.end(); ++it ){\n      const TouchEvent::Touch& touch = *it;\n      //do something with the touch object\n    }\n    ```", "```cpp\n    for( std::vector<TouchEvent::Touch>::const_iterator it = touches.begin(); it != touches.end(); ++it ){\n      const TouchEvent::Touch& touch = *it;\n      vec2f pos = touch.getPos();\n      float x = touch.getX();\n      float y = touch.getY(); \n    }\n    ```", "```cpp\n    #include \"cinder/polyline.h\"\n    #include <map>\n    ```", "```cpp\n    std::map< uint32_t, PolyLine<Vec2f> > mLines;\n    ```", "```cpp\n    const std::vector<TouchEvent::Touch>& touches = event.getTouches();\n    for( std::vector<TouchEvent::Touch>::const_iterator it = touches.begin(); it != touches.end(); ++it ){\n      const TouchEvent::Touch& touch = *it;\n      mLines[ touch.getId() ] = PolyLine<Vec2f>();\n    }\n    ```", "```cpp\n    const std::vector<TouchEvent::Touch>& touches = event.getTouches();\n    for( std::vector<TouchEvent::Touch>::const_iterator it = touches.begin(); it != touches.end(); ++it ){\n      const TouchEvent::Touch& touch = *it;\n      mLines[ touch.getId() ].push_back( touch.getPos() ); \n    }\n    ```", "```cpp\n    const std::vector<TouchEvent::Touch>& touches = event.getTouches();\n    for( std::vector<TouchEvent::Touch>::const_iterator it = touches.begin(); it != touches.end(); ++it ){\n      const TouchEvent::Touch& touch = *it;\n      mLines.erase( touch.getId() );\n    }\n    ```", "```cpp\n    gl::clear( Color::black() );\n    gl::color( Color::white() );\n    for( std::map<uint32_t, PolyLine<Vec2f> >::iterator it = mLines.begin(); it != mLines.end(); ++it ){\n      gl::draw( it->second );\n    }\n    ```", "```cpp\nconst std::vector<TouchEvent::Touch>&activeTouches = getActiveTouches();\ngl::color( Color( 1.0f, 0.0f, 0.0f ) );\nfor( std::vector<TouchEvent::Touch>::const_iterator it = activeTouches.begin(); it != activeTouches.end(); ++it ){\n  const TouchEvent::Touch& touch = *it;\ngl::drawSolidCircle( touch.getPos(), 10.0f );\n}\n```", "```cpp\nvoid fileDrop( FileDropEvent event );\n```", "```cpp\n    const vector<fs::path >& files = event.getFiles();\n    ```", "```cpp\n        Vec2i dropPosition = event.getPos();\n        ```", "```cpp\n        int pOS X = event.getX();\n        int posY = event.getY();\n        ```", "```cpp\n    int numFiles = event.getNumFiles();\n    ```", "```cpp\n    const fs::path& file = event.getFile( 2 );\n    ```", "```cpp\nvoid resize( ResizeEvent event );\n```", "```cpp\n    Vec2i windowSize = event.getSize();\n    ```", "```cpp\n    int width = event.getWidth();\n    int height = event.getHeight();\n    ```", "```cpp\n    float ratio = event.getAspectRatio();\n    ```", "```cpp\n    Rect frect;\n    ```", "```cpp\n    rect.x1 = 20.0f;\n    rect.y1 = 20.0f;\n    rect.x2 = getWindowWidth() – 20.0f;\n    rect.y2 = getWindowHeight() – 20.0f;\n    ```", "```cpp\n    gl::color( Color( 1.0f, 0.0f, 0.0f ) );\n    gl::drawSolidRect( rect );\n    ```", "```cpp\n    rect.x1 = 20.0f;\n    rect.y1 = 20.0f;\n    rect.x2 = event.getWidth() – 20.0f;\n    rect.y2 = event.getHeight() – 20.0f;\n    ```", "```cpp\n    #pragma once\n    #include \"cinder/CinderResources.h\"\n    ```", "```cpp\n    #define RES_IMAGE CINDER_RESOURCE(../resources/, image.png, 128, IMAGE)\n    ```", "```cpp\n    #include \"..\\include\\Resources.h\"\n    RES_IMAGE\n    ```", "```cpp\n    #include \"cinder/gl/Texture.h\"\n    ```", "```cpp\n    gl::Texture mImage;\n    ```", "```cpp\n    mImage = gl::Texture( loadImage( loadResource( RES_IMAGE ) );\n    ```", "```cpp\n    gl::draw( mImage, Vec2f( 20.0f, 20.0f ) );\n    ```", "```cpp\n    gl::Texture mImage;\n    ```", "```cpp\n    mImage = loadImage( loadResource( \"image.png\" ));\n    ```", "```cpp\n    gl::draw( mImage, Vec2f( 20.0f, 20.0f ) );\n    ```", "```cpp\n#pragma once\n#include \"cinder/CinderResources.h\"\n#define RES_IMAGE CINDER_RESOURCE(../resources/, image.png, 128, IMAGE)\n```", "```cpp\n#include \"..\\include\\Resources.h\"\n\nRES_IMAGE\n```", "```cpp\nmImage = loadImage( loadResource( RES_IMAGE ) );\n```", "```cpp\n#include \"cinder/gl/Texture.h\"\n#include \"cinder/ImageIO.h\"\n```", "```cpp\nusing namespace ci;\nusing namespace ci::app;\nusing namespace std;\n```", "```cpp\n    gl::Texture image;\n    ```", "```cpp\n        try{\n            image = loadImage( loadAsset( \"image.png\" ) );\n        } catch( ... ){\n            console() << \"asset not found\" << endl;\n        }\n    ```", "```cpp\n    if( image ){\n      gl::draw( image, getWindowBounds() );\n        }\n    ```", "```cpp\ntry{\n     image = loadImage( loadAsset( \"My Images/image.png\" ) );\n}catch( ... ){\n     console() << \"asset not found\" << endl;\n }\n```"]