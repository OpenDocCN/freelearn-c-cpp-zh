["```cpp\nUPROPERTY(BlueprintReadWrite, EditAnywhere, Category = \"ClassInfo\")\n  int32 XP;\n\nUPROPERTY(BlueprintReadWrite, EditAnywhere, Category = \"ClassInfo\")\n  int32 MXP;\n\nUPROPERTY(BlueprintReadWrite, EditAnywhere, Category = \"ClassInfo\")\n  int32 Lvl;\n```", "```cpp\nUPROPERTY(BlueprintReadOnly, EditAnywhere, Category = \"EnemyInfo\")\n  int32 XP;\n```", "```cpp\nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category = CharacterInfo)\n  int32 XP;\n\nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category = CharacterInfo)\n  int32 MXP;\n\nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category = CharacterInfo)\n  int32 Lvl;\n```", "```cpp\nUGameCharacter* UGameCharacter::CreateGameCharacter( FCharacterInfo* characterInfo, UObject* outer )\n{\n  UGameCharacter* character = NewObject<UGameCharacter>( outer );\n\n  // locate character classes asset\n  UDataTable* characterClasses = Cast<UDataTable>( StaticLoadObject( UDataTable::StaticClass(), NULL, TEXT( \"DataTable'/Game/Data/CharacterClasses.CharacterClasses'\" ) ) );\n\n  if( characterClasses == NULL )\n  {\n    UE_LOG( LogTemp, Error, TEXT( \"Character classes datatable not found!\" ) );\n  }\n  else\n  {\n    character->CharacterName = characterInfo->Character_Name;\n\n    FCharacterClassInfo* row = characterClasses->FindRow<FCharacterClassInfo>( *( characterInfo->Class_ID ), TEXT( \"LookupCharacterClass\" ) );\n    character->ClassInfo = row;\n\n    character->MHP = character->ClassInfo->StartMHP;\n    character->MMP = character->ClassInfo->StartMMP;\n    character->HP = character->MHP;\n    character->MP = character->MMP;\n\n    character->ATK = character->ClassInfo->StartATK;\n    character->DEF = character->ClassInfo->StartDEF;\n    character->LUCK = character->ClassInfo->StartLuck;\n\n    character->XP = character->ClassInfo->XP;\n\n    character->MXP = character->ClassInfo->MXP;\n    character->Lvl = character->ClassInfo->Lvl;\n    character->isPlayer = true;\n  }\n\n  return character;\n}\n```", "```cpp\nUGameCharacter* UGameCharacter::CreateGameCharacter( FEnemyInfo* enemyInfo, UObject* outer )\n{\n  UGameCharacter* character = NewObject<UGameCharacter>( outer );\n\n  character->CharacterName = enemyInfo->EnemyName;\n\n  character->ClassInfo = nullptr;\n\n  character->MHP = enemyInfo->MHP;\n  character->MMP = 0;\n  character->HP = enemyInfo->MHP;\n  character->MP = 0;\n\n  character->ATK = enemyInfo->ATK;\n  character->DEF = enemyInfo->DEF;\n  character->LUCK = enemyInfo->Luck;\n  character->Gold = enemyInfo->Gold;\n  character->XP = enemyInfo->XP;\n\n  character->decisionMaker = new TestDecisionMaker();\n  character->isPlayer = false;\n\n  return character;\n}\n```", "```cpp\npublic:\n  int32 XPTotal;\n```", "```cpp\n// check for victory\n  deadCount = 0;\n  int32 Gold = 0;\n  int32 XP = 0;\n  for( int i = 0; i < this->enemyParty.Num(); i++ )\n  {\n    if( this->enemyParty[i]->HP <= 0 ) deadCount++;\n    Gold += this->enemyParty[i]->Gold;\n    XP += this->enemyParty[i]->XP;\n  }\n```", "```cpp\n// all enemies have died, switch to victory phase\n  if( deadCount == this->enemyParty.Num() )\n  {\n    this->SetPhase( CombatPhase::CPHASE_Victory );\n    GoldTotal = Gold;\n    XPTotal = XP;\n    return false;\n  }\n```", "```cpp\nfor (int i = 0; i < gameInstance->PartyMembers.Num(); i++)\n{\n  gameInstance->PartyMembers[i]->XP += this->currentCombatInstance->XPTotal;\n}\n```", "```cpp\nif (gameInstance->PartyMembers[i]->XP >= gameInstance->PartyMembers[i]->MXP){\n  gameInstance->PartyMembers[i]->Lvl++;\n  gameInstance->PartyMembers[i]->MHP++;\n  gameInstance->PartyMembers[i]->MMP++;\n  gameInstance->PartyMembers[i]->ATK++;\n  gameInstance->PartyMembers[i]->DEF++;\n  gameInstance->PartyMembers[i]->LUCK++;\n  gameInstance->PartyMembers[i]->MXP += gameInstance->PartyMembers[i]->MXP;\n}\n```", "```cpp\nelse if( this->currentCombatInstance->phase == CombatPhase::CPHASE_Victory )\n{\n  UE_LOG( LogTemp, Log, TEXT( \"Player wins combat\" ) );\n  URPGGameInstance* gameInstance = Cast<URPGGameInstance>(GetGameInstance());\n  gameInstance->GameGold += this->currentCombatInstance->GoldTotal;\n\n  for (int i = 0; i < gameInstance->PartyMembers.Num(); i++)\n  {\n    gameInstance->PartyMembers[i]->XP += this->currentCombatInstance->XPTotal;\n\n    if (gameInstance->PartyMembers[i]->XP>= gameInstance->PartyMembers[i]->MXP){\n      gameInstance->PartyMembers[i]->Lvl++;\n      gameInstance->PartyMembers[i]->MHP++;\n      gameInstance->PartyMembers[i]->MMP++;\n      gameInstance->PartyMembers[i]->ATK++;\n      gameInstance->PartyMembers[i]->DEF++;\n      gameInstance->PartyMembers[i]->LUCK++;\n\n      gameInstance->PartyMembers[i]->MXP +=gameInstance->PartyMembers[i]->MXP;\n    }\n\n  }\n\nUGameplayStatics::GetPlayerController( GetWorld(), 0 )->SetActorTickEnabled( true );\n}\n```", "```cpp\nvoid TestCombatAction::BeginExecuteAction( UGameCharacter* character )\n{\n  this->character = character;\n\n  // target is dead, select another target\n  if( this->target->HP <= 0 )\n  {\n    this->target = this->character->SelectTarget();\n  }\n\n  // no target, just return\n  if( this->target == nullptr )\n  {\n    return;\n  }\n\n  UE_LOG( LogTemp, Log, TEXT( \"%s attacks %s\" ), *character->CharacterName, *target->CharacterName );\n\n  target->HP -= (character->ATK - target->DEF) >= 0 ? (character->ATK - target->DEF):0;\n\n  this->delayTimer = 1.0f;\n}\n```", "```cpp\nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category = CharacterInfo)\n  TArray<FString> LearnedAbilities;\n```", "```cpp\ncharacter->LearnedAbilities = character->ClassInfo->LearnedAbilities;\n```", "```cpp\nUGameCharacter* UGameCharacter::CreateGameCharacter( FCharacterInfo* characterInfo, UObject* outer )\n{\n  UGameCharacter* character = NewObject<UGameCharacter>( outer );\n\n  // locate character classes asset\n  UDataTable* characterClasses = Cast<UDataTable>( StaticLoadObject( UDataTable::StaticClass(), NULL, TEXT( \"DataTable'/Game/Data/CharacterClasses.CharacterClasses'\" ) ) );\n\n  if( characterClasses == NULL )\n  {\n    UE_LOG( LogTemp, Error, TEXT( \"Character classes datatable not found!\" ) );\n  }\n  else\n  {\n    character->CharacterName = characterInfo->Character_Name;\n\n    FCharacterClassInfo* row = characterClasses->FindRow<FCharacterClassInfo>( *( characterInfo->Class_ID ), TEXT( \"LookupCharacterClass\" ) );\n\n    character->ClassInfo = row;\n\n    character->MHP = character->ClassInfo->StartMHP;\n    character->MMP = character->ClassInfo->StartMMP;\n    character->HP = character->MHP;\n    character->MP = character->MMP;\n\n    character->ATK = character->ClassInfo->StartATK;\n    character->DEF = character->ClassInfo->StartDEF;\n    character->LUCK = character->ClassInfo->StartLuck;\n\n    character->XP = character->ClassInfo->XP;\n\n    character->MXP = character->ClassInfo->MXP;\n    character->Lvl = character->ClassInfo->Lvl;\n    character->LearnedAbilities = character->ClassInfo->LearnedAbilities;\n    character->isPlayer = true;\n  }\n\n  return character;\n}\n```"]