- en: Chapter 5. Creating GUIs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章 创建GUI
- en: 'In this chapter, we''re going to create various UI parts. The following topics
    will be covered in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将创建各种UI组件。本章将涵盖以下主题：
- en: Creating menus
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建菜单
- en: Creating buttons
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建按钮
- en: Creating checkboxes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建复选框
- en: Creating loading bar
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建加载条
- en: Creating sliders
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建滑块
- en: Creating text fields
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建文本字段
- en: Creating scroll views
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建滚动视图
- en: Creating page views
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建页面视图
- en: Creating list views
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建列表视图
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Games have a lot of GUI parts, for example, there are menus, buttons, checkboxes,
    loading bars, and so on. We cannot make our game without these parts. Further,
    these are a little different from the node we've discussed until now. In this
    chapter we will see how to create various GUI parts such as menus, sliders, text
    fields etc. for a game.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏有很多GUI组件，例如，有菜单、按钮、复选框、加载条等等。没有这些组件我们无法制作游戏。此外，这些与之前讨论的节点略有不同。在本章中，我们将了解如何为游戏创建各种GUI组件，如菜单、滑块、文本字段等。
- en: Creating menus
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建菜单
- en: In this recipe, we will create a menu. A menu has various buttons such as a
    start button and a pause button. A Menu is a very important component for any
    game and they are really useful too. The steps to use a menu are little complex.
    In this recipe, we will have a glance over creating menus to understand its complexity
    and to get used to them.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将创建一个菜单。菜单有各种按钮，例如开始按钮和暂停按钮。菜单是任何游戏都非常重要的组件，并且它们也非常有用。使用菜单的步骤稍微复杂一些。在这个菜谱中，我们将简要了解创建菜单的过程，以了解其复杂性并熟悉它们。
- en: Getting ready
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: 'We prepared the following image as a button image and added them to the `Resources/res`
    folder in our project. We will use the following image of the button to use it
    as menu:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们准备了一张作为按钮图像的图片，并将其添加到项目中的`Resources/res`文件夹。我们将使用以下按钮图片作为菜单：
- en: '![Getting ready](img/0561_05_01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![准备中](img/0561_05_01.jpg)'
- en: How to do it...
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Firstly, we will create a simple menu that has one item for a button. We will
    use the `item1.png` file as the button image. Create the menu by using the code
    here.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个简单的菜单，其中有一个按钮项。我们将使用`item1.png`文件作为按钮图像。通过以下代码创建菜单。
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The execution result of this code is shown in the following image:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像显示了此代码的执行结果：
- en: '![How to do it...](img/0561_05_02.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/0561_05_02.jpg)'
- en: Further, you can see the `tapped item` text in the log after tapping the menu
    item. You will notice that the button becomes a little dark when you tap it.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你可以在点击菜单项后在日志中看到`tapped item`文本。你会注意到当你点击按钮时，按钮会变得稍微暗一些。
- en: How it works...
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Create a sprite of the normal status when the button is not operated.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个表示未操作时按钮的正常状态的精灵。
- en: Create a sprite of the selected status when the button is pressed. In this case,
    we used the same images for both the normal status and the selected status, but
    players could not understand the change in status when they tapped the button.
    That's why we changed the selected image to a slightly darker image by using the
    `setColor` method.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在按钮被按下时创建一个表示选中状态的精灵。在这种情况下，我们使用了正常状态和选中状态相同的图像，但玩家在点击按钮时无法理解状态的变化。这就是为什么我们通过使用`setColor`方法将选中图像改为稍微暗一些的图像。
- en: Create an instance of the `MenuItemSprite` class by using these two sprites.
    The third argument specifies the lambda expression to be processed when the button
    is pressed.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用这两个精灵创建`MenuItemSprite`类的实例。第三个参数指定了当按钮被按下时需要处理的lambda表达式。
- en: 'This time, we created only one button in the menu, but we can add more buttons
    in the menu. To do so, we can enumerate several items in the `Menu::create` method
    and specify `nullptr` at the end. To add multiple buttons in the menu, use the
    following code:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我们在菜单中只创建了一个按钮，但我们可以添加更多按钮。要做到这一点，我们可以在`Menu::create`方法中枚举几个项目，并在末尾指定`nullptr`。要添加多个按钮到菜单中，请使用以下代码：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In addition, it is possible to add an item by using the `addChild` method of
    the menu instance.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还可以通过使用菜单实例的`addChild`方法添加项目。
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If the button is pressed, the lambda expression process that you specify when
    you create an instance of `MenuItemSprite` starts running. The argument is passed
    an instance of the `MenuItemSprite` that was pressed.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果按钮被按下，当你创建`MenuItemSprite`实例时指定的lambda表达式开始运行。参数传递了一个被按下的`MenuItemSprite`实例。
- en: There's more...
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'It is also possible to automatically align multiple buttons. We created three
    items in the `Resources/res` folder. These are named `item1.png`, `item2.png`,
    and `item3.png`. You can create three buttons and use the following code to align
    these buttons vertically in the center of the screen:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以自动对齐多个按钮。我们在`Resources/res`文件夹中创建了三个项目。这些项目的名称分别为`item1.png`、`item2.png`和`item3.png`。您可以创建三个按钮，并使用以下代码将这些按钮垂直对齐在屏幕中央：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![There''s more...](img/0561_05_03.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/0561_05_03.jpg)'
- en: 'If you want to align these items horizontally, you can use the following code:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想水平对齐这些项目，可以使用以下代码：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Until now, the alignment of intervals has been adjusted automatically; however,
    if you want to specify the padding, you can use another method.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，间隔的对齐已经自动调整；然而，如果您想指定填充，可以使用另一种方法。
- en: 'The following code will specify the intervals side by side in a vertical manner:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将以垂直方式指定并排的间隔：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following code will specify the intervals side by side in a horizontal
    manner:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将以水平方式指定并排的间隔：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Creating buttons
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建按钮
- en: In this recipe, we will explain how to create buttons. Before the `Button` class
    was released, we created a button by using the `Menu` class that was introduced
    in the previous recipe. Due to the `Button` class, it has become possible to finely
    control the button press.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将解释如何创建按钮。在`Button`类发布之前，我们通过使用之前菜谱中介绍的`Menu`类创建按钮。由于`Button`类的出现，现在可以精细控制按钮的按下。
- en: Getting ready
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To use the `Button` class and other GUI parts mentioned in this chapter, you
    must include the `CocosGUI.h` file. Let''s add the following line of code in `HelloWorldScene.cpp`:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用本章中提到的`Button`类和其他GUI组件，您必须包含`CocosGUI.h`文件。让我们在`HelloWorldScene.cpp`中添加以下代码行：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How to do it...
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s create a button using the `Button` class. Firstly, you will generate
    a button instance by using `item1.png` image that was used in the previous recipe.
    We will also specify the callback function as a lambda expression by using the
    `addEventListener` method when the button is pressed. You can create the button
    by using the following code:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`Button`类创建一个按钮。首先，您将使用之前菜谱中使用的`item1.png`图像生成按钮实例。我们还将通过使用`addEventListener`方法在按钮按下时指定回调函数作为lambda表达式。您可以使用以下代码创建按钮：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works...
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: You can now run this project and push the button. Further, you can move your
    touch position and release your finger. Thus, you will see that the touch status
    of the button will change in the log. Let's take a look at it step-by-step.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以运行此项目并按下按钮。进一步，您可以移动触摸位置并释放手指。这样，您将看到按钮的触摸状态将在日志中改变。让我们一步一步地看看。
- en: When you use the `Button` class and other GUI parts mentioned in this chapter,
    you have to include the `CocosGUI.h` file as this file defines the necessary classes.
    Further, please note that these classes have their own namespace such as "`cocos2d::ui`."
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用本章中提到的`Button`类和其他GUI组件时，您必须包含`CocosGUI.h`文件，因为这个文件定义了必要的类。此外，请注意，这些类有自己的命名空间，例如"`cocos2d::ui`"。
- en: It is easy to create an instance of the `Button` class. You only need to specify
    the sprite file name. Further, you can create a callback function as a lambda
    expression by using the `addTouchEventListener` method. This function has two
    parameters. The first parameter is a button instance that was pressed. The second
    parameter is the touch status. Touch statuses are of four types. `TouchEventType::BEGAN`
    is the status at the moment that the button is pressed. `TouchEventType::MOVE`
    is the event type that occurs when you move your finger after you press it. `TouchEventType::ENDED`
    is the event that occurs at the moment you release your finger from the screen.
    `TouchEventType::CANCELED` is the event that occurs when you release your finger
    outside of the button.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`Button`类的实例很容易。您只需指定精灵文件名。此外，您可以通过使用`addTouchEventListener`方法创建一个回调函数作为lambda表达式。此函数有两个参数。第一个参数是按下的按钮实例。第二个参数是触摸状态。触摸状态有四种类型。`TouchEventType::BEGAN`是在按钮按下时的状态。`TouchEventType::MOVE`是在按下后移动手指时发生的事件类型。`TouchEventType::ENDED`是在您从屏幕上释放手指时的状态。`TouchEventType::CANCELED`是在您在按钮外部释放手指时发生的事件。
- en: There's more...
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: It is possible to create a button instance by specifying the selected status
    image and the disabled status image. Create this button by using the code here.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过指定选择状态图片和禁用状态图片来创建按钮实例。使用以下代码创建此按钮。
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Unlike the `MenuItemSprite` class, you won't be able to specify the selection
    status by changing the normal image color that was set using the `setColor` method.
    You have to prepare the images as selected image and disabled image.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 与`MenuItemSprite`类不同，您无法通过更改使用`setColor`方法设置的普通图片颜色来指定选择状态。您必须准备选择图片和禁用图片。
- en: Creating checkboxes
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建复选框
- en: In this recipe, we will create a checkbox. In Cocos2d-x version 2, a checkbox
    was created by using the `MenuItemToggle` class. However, doing so was quite cumbersome.
    In Cocos2d-x version 3, we can create a checkbox by using the `Checkbox` class
    that can be used in Cocos Studio.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将创建一个复选框。在Cocos2d-x版本2中，复选框是通过使用`MenuItemToggle`类创建的。然而，这样做相当繁琐。在Cocos2d-x版本3中，我们可以通过使用Cocos
    Studio中的`Checkbox`类来创建复选框。
- en: Getting ready
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: So let's prepare the images of the checkbox before you start. Here, we have
    prepared the images of the required minimum `On` and `Off` status. Please add
    these images to the `Resouces/res` folder.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在您开始之前，让我们准备复选框的图片。在这里，我们已经准备了所需的最低`On`和`Off`状态图片。请将这些图片添加到`Resouces/res`文件夹中。
- en: 'The `Off` status image will look something like this:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭状态的图片看起来可能如下所示：
- en: '![Getting ready](img/0561_05_04.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![准备中](img/0561_05_04.jpg)'
- en: 'The `On` status image will look something like this:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 开启状态的图片看起来可能如下所示：
- en: '![Getting ready](img/0561_05_05.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![准备中](img/0561_05_05.jpg)'
- en: How to do it...
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s create a checkbox by using the `Checkbox` class. First, you will generate
    a checkbox instance by using the `check_box_normal.png` image and the `check_box_active.png`
    image. You will also specify the callback function as a lambda expression by using
    the `addEventListener` method when the checkbox status is changed. Create the
    checkbox by using the following code:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`Checkbox`类创建一个复选框。首先，您将使用`check_box_normal.png`图片和`check_box_active.png`图片生成复选框实例。您还将通过使用`addEventListener`方法指定当复选框状态改变时的回调函数，作为lambda表达式。使用以下代码创建复选框：
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The following figure shows that the checkbox was selected by running the preceding
    code.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示显示了运行前面的代码后复选框被选中。
- en: '![How to do it...](img/0561_05_06.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/0561_05_06.jpg)'
- en: How it works...
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: It generates the instance of a checkbox by specifying the `On` and `Off` images.
    Further, the callback function was specified in the same way as the `Button` class
    was in the previous recipe. A checkbox has two `EventType` options, namely `ui::Checkbox::EventType::SELECTED`
    and `ui::Checkbox::EventType::UNSELECTED.`
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 它通过指定`On`和`Off`图片生成复选框实例。此外，回调函数的指定方式与之前菜谱中`Button`类的方式相同。复选框有两个`EventType`选项，即`ui::Checkbox::EventType::SELECTED`和`ui::Checkbox::EventType::UNSELECTED`。
- en: You can also get the status of the checkbox by using the `isSelected` method.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以使用`isSelected`方法获取复选框的状态。
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You can also change the status of the checkbox by using the `setSelected` method.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以使用`setSelected`方法更改复选框的状态。
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: There's more...
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'In addition, it is possible to further specify the image of a more detailed
    checkbox status. The `Checkbox::create` method has five parameters. These parameters
    are as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还可以进一步指定更详细复选框状态的图片。`Checkbox::create`方法有五个参数。这些参数如下：
- en: Unselected image
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未选择图片
- en: Unselected and pushing image
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未选择且按下图片
- en: Selected image
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择图片
- en: Unselected and disabled image
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未选择且禁用图片
- en: Selected and disabled image
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择且禁用图片
- en: 'Here''s how to specify the images of these five statuses:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是如何指定这五种状态图片的：
- en: '[PRE13]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To disable the checkbox, use the following code:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要禁用复选框，请使用以下代码：
- en: '[PRE14]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Creating loading bars
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建加载条
- en: When you are consuming a process or downloading something, you can indicate
    that it is not frozen by showing its progress to the user. To show such progresses,
    Cocos2d-x has a `LoadingBar` class. In this recipe, you will learn how to create
    and show the loading bars.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当您正在处理一个进程或下载某些内容时，您可以通过向用户展示其进度来表明它没有冻结。为了显示这样的进度，Cocos2d-x有一个`LoadingBar`类。在这个菜谱中，您将学习如何创建和显示加载条。
- en: Getting ready
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: Firstly, we have to prepare an image for the progress bar. This image is called
    `loadingbar.png`. You will add this image in the `Resouces/res` folder.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须为进度条准备一个图片。这个图片被称为`loadingbar.png`。您需要将这个图片添加到`Resouces/res`文件夹中。
- en: '![Getting ready](img/0561_05_07.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![准备中](img/0561_05_07.jpg)'
- en: How to do it...
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'It generates an instance of the loading bar by specifying the image of the
    loading bar. Further, it is set to 0% by using the `setPercent` method. Finally,
    in order to advance the bar from 0% to 100% by 1% at 0.1 s, we will use the `schedule`
    method as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 通过指定加载条的图像生成加载条的实例。进一步地，使用`setPercent`方法将其设置为0%。最后，为了使条从0%到100%以每0.1秒1%的速度前进，我们将使用以下`schedule`方法：
- en: '[PRE15]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The following figure is an image of the loading bar at 100%.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图是加载条在100%时的图像。
- en: '![How to do it...](img/0561_05_08.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/0561_05_08.jpg)'
- en: How it works...
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: You have to specify one image as the loading bar image to create an instance
    of the `LoadingBar` class. You can set the percentage of the loading bar by using
    the `setPercent` method. Further, you can get its percentage by using the `getPercent`
    method.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须指定一个图像作为加载条图像以创建`LoadingBar`类的实例。您可以通过使用`setPercent`方法设置加载条的百分比。此外，您可以通过使用`getPercent`方法获取其百分比。
- en: There's more...
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: By default, the loading bar will progress toward the right. You can change this
    direction by using the `setDirection` method.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，加载条将向右移动。您可以通过使用`setDirection`方法更改此方向。
- en: '[PRE16]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: When you set the `ui::LoadingBar::Direction::RIGHT` value, the start position
    of the loading bar is the right edge. Then, the loading bar will progress in the
    left direction.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当您设置`ui::LoadingBar::Direction::RIGHT`值时，加载条的开始位置是右边缘。然后，加载条将向左方向移动。
- en: Creating sliders
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建滑块
- en: In this recipe, we will explain the slider. The slider will be used for tasks
    such as changing the volume of the sound or music. Cocos2d-x has a `Slider` class
    for it. If we use this class, we can create a slider easily.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将解释滑块。滑块将用于更改声音或音乐的音量等任务。Cocos2d-x有一个`Slider`类用于此目的。如果我们使用此类，我们可以轻松创建滑块。
- en: Getting ready
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: So, let's prepare the images of the slider before we start. Please add these
    images in the `Resouces/res` folder.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在我们开始之前，让我们准备滑块的图像。请在`Resouces/res`文件夹中添加这些图像。
- en: '`sliderTrack.png`: Background of the slider![Getting ready](img/0561_05_09.jpg)'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sliderTrack.png`：滑块的背景![准备工作](img/0561_05_09.jpg)'
- en: '`sliderThumb.png`: Image to move the slider![Getting ready](img/0561_05_10.jpg)'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sliderThumb.png`：用于移动滑块的图像![准备工作](img/0561_05_10.jpg)'
- en: How to do it...
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Let's create a slider by using the `Slider` class. First, you will generate
    a slider instance by using the `sliderTrack.png` image and the `sliderThumb.png`
    image. You will also specify the callback function as a lambda expression by using
    the `addEventListener` method when the slider value is changed.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`Slider`类创建一个滑块。首先，您将使用`sliderTrack.png`图像和`sliderThumb.png`图像生成滑块实例。您还将通过使用`addEventListener`方法指定当滑块值改变时的回调函数，作为lambda表达式。
- en: '[PRE17]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The following figure shows the result of the preceding code.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了前面代码的结果。
- en: '![How to do it...](img/0561_05_11.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/0561_05_11.jpg)'
- en: How it works...
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: You have to specify two images as the slider's bar image and the slider's thumb
    image to create an instance of the `Slider` class. The callback function was specified
    in the same way as the `Button` class was in the previous recipe. The slider has
    only one `EventType` as `ui::Slider::EventType::ON_PERCENTAGE_CHANGED`. That's
    why the status is the only changing value. You can get the percentage shown on
    the slider by using the `getPercent` method.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须指定两个图像作为滑块的条形图像和滑块的拇指图像以创建`Slider`类的实例。回调函数的指定方式与之前配方中的`Button`类相同。滑块只有一个`EventType`，即`ui::Slider::EventType::ON_PERCENTAGE_CHANGED`。这就是为什么状态是唯一变化值的原因。您可以通过使用`getPercent`方法获取滑条上显示的百分比。
- en: There's more...
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: If you want to see the progress on the slider, you can use the `loadProgressBarTexture`
    method. We will require an image for the progress bar. The following image shows
    the progress bar image. Let's add it to the `Resources/res` folder.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在滑块上看到进度，您可以使用`loadProgressBarTexture`方法。我们需要一个进度条的图像。以下图像显示了进度条图像。让我们将其添加到`Resources/res`文件夹中。
- en: '![There''s more...](img/0561_05_12.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/0561_05_12.jpg)'
- en: Then, we use the `loadProgressbarTexture` method by specifying this image.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们通过指定此图像使用`loadProgressbarTexture`方法。
- en: '[PRE18]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Let''s run the code that has been modified so far. You will see it with the
    color on the left side of the bar as shown in the following screenshot:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行到目前为止已修改的代码。您将看到如下截图所示的条左侧的颜色：
- en: '![There''s more...](img/0561_05_13.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/0561_05_13.jpg)'
- en: Creating text fields
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建文本字段
- en: You may want to set a nickname in your game. To set nicknames or to get the
    player's input text, you can use the `TextField` class. In this recipe, we will
    learn about a simple `TextField` sample and how to add a textfield in a game.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will create a text field by specifying the placeholder text, font name,
    and font size. Then, you set a callback function by using `addEventListener`.
    In the callback function, you can get the text that the player input in the `textField`.
    Create the `textField` by using the following code:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Let''s run this code. You will see it within the placeholder text, and it will
    show the keyboard automatically as shown in the following screenshot:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/0561_05_14.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You create an instance of the `TextField` class. The first argument is the placeholder
    string. The second argument is the font name. You can specify only a true type
    font. The third argument is the font size.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can get the event by using the `addEventListener` method. The following
    list provides the event names and their descriptions:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Event Name | Description |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
- en: '| `ATTACH_WITH_IME` | The keyboard will appear. |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
- en: '| `DETACH_WITH_IME` | The keyboard will disappear. |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
- en: '| `INSERT_TEXT` | The text was input. You can get the string by using the `getString`
    method. |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
- en: '| `DELETE_BACKWARD` | The text was deleted. |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
- en: There's more...
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When a player enters a password, you have to hide it by using the `setPasswordEnable`
    method.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Let''s run the code that has been modified so far. You will see how to hide
    a password that you enter, as shown in the following screenshot:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/0561_05_15.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
- en: Creating scroll views
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a huge map is displayed in your game, a scroll view is required. It can
    be scrolled by a swipe, and bounce at the edge of the area. In this recipe, we
    explain the `ScrollView` class of Cocos2d-x.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s implement it right away. In this case, we doubled the size of `HelloWorld.png`.
    Further, we try to display this huge image in `ScrollView`. Create the scroll
    view by using the following code:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Let's run this code. You will see the huge `HelloWorld.png` image. Further,
    you will see that you can scroll it by swiping.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/0561_05_16.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You create an instance of the `ScrollView` class by using the `create` method
    without arguments.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You set the direction of the scroll view by using the `setDirection` method.
    In this case, we want to scroll up and down, and left and right, so you should
    set `ui::ScrollView::Direction::BOTH`. This implies that we can scroll in both
    the vertical and the horizontal directions. If you want to scroll just up and
    down, you set `ui::ScrollView::Direction::VERTICAL`. If you want to scroll just
    left and right, you set `ui::ScrollView::Direction::HORIZONTAL`.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you want to bounce when it is scrolled at the edge of the area, you should
    set `true` by using the `setBounceEnabled` method.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will provide the content to be displayed in the scroll view. Here, we have
    used `HelloWorld.png` that has been scaled twice.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将提供要在滚动视图中显示的内容。在这里，我们使用了放大两倍的`HelloWorld.png`。
- en: You have to specify the size of the content in the scroll view by using the
    `setInnerContainerSize` method. In this case, we specify double the size of `HelloWorld.png`
    in the `setInnerContainerSize` method
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你必须使用`setInnerContainerSize`方法指定滚动视图中的内容大小。在这种情况下，我们在`setInnerContainerSize`方法中指定了`HelloWorld.png`的两倍大小。
- en: You have to specify the size of the scroll view by using the `setContentSize`
    method. In this case, we specify the original size of `HelloWorld.png` by using
    the `setContentSize` method.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你必须使用`setContentSize`方法指定滚动视图的大小。在这种情况下，我们使用`setContentSize`方法指定了`HelloWorld.png`的原始大小。
- en: Creating page views
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建页面视图
- en: A page view is similar to a scroll view, but it will be scrolled on a page-by-page
    basis. `PageView` is also a class in Cocos2d-x. In this recipe, we will explain
    how to use the `PageView` class.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 页面视图类似于滚动视图，但它将按页面滚动。`PageView`也是Cocos2d-x中的一个类。在这个菜谱中，我们将解释如何使用`PageView`类。
- en: How to do it...
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Let''s immediately get it implemented. Here, we will arrange three images of
    `HelloWorld.png` side-by-side in the page view. Create the page view by using
    the following code:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们立即实现它。在这里，我们将三个`HelloWorld.png`图像并排排列在页面视图中。通过以下代码创建页面视图：
- en: '[PRE22]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: When you run this code, you will see one `HelloWorld.png`. You will see that
    you can move to the next page by using a swiping movement.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行此代码时，你会看到一个`HelloWorld.png`。你会看到你可以通过滑动动作移动到下一页。
- en: How it works...
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: Create an instance of the `PageView` class by using the `create` method without
    arguments. Here, we set it as the same size as that of the screen.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 使用不带参数的`create`方法创建`PageView`类的实例。在这里，我们将其设置为与屏幕相同的大小。
- en: Display three `HelloWorld.png` images side-by-side. You must use the `Layout`
    class to set the page layout in `PageView`.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 并排显示三个`HelloWorld.png`图像。你必须使用`Layout`类在`PageView`中设置页面布局。
- en: Set the page size and add the image by using the `addChild` method.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`addChild`方法设置页面大小并添加图片。
- en: Insert an instance of the `Layout` class to the page view by using the `insertPage`
    method. At this time, you specify the page number as the second argument.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`insertPage`方法将`Layout`类的实例插入到页面视图中。此时，你指定页面编号作为第二个参数。
- en: Get the event when the page has changed, you use the `addEventListener` method.
    `PageView` has only one event, `PageView::EventType::TURNING`. You can get the
    current page number by using the `getCurPageIndex` method.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 获取页面变化的事件，你使用`addEventListener`方法。`PageView`只有一个事件，即`PageView::EventType::TURNING`。你可以通过使用`getCurPageIndex`方法获取当前页面编号。
- en: Creating list views
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建列表视图
- en: '`ListView` is a class in Cocos2d-x. It is like `UITableView` for iOS or `List
    View` for Android. `ListView` is useful for creating a lot of buttons as required
    in the case of setting a scene. In this recipe, we will explain how to use the
    `ListView` class.'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`ListView`是Cocos2d-x中的一个类，类似于iOS中的`UITableView`或Android中的`List View`。`ListView`在设置场景时需要创建大量按钮时非常有用。在这个菜谱中，我们将解释如何使用`ListView`类。'
- en: How to do it...
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Here, we try to display `ListView` that has 20 buttons. Each button is identified
    with a number such as "`list item 10.`" In addition, we display the number of
    the button that you selected on the log when you tap any button. Create the list
    view by using the following code:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们尝试显示包含20个按钮的`ListView`。每个按钮都有一个像"`list item 10.`"这样的编号。此外，当你点击任何按钮时，你会在日志上显示你选择的按钮编号。通过以下代码创建列表视图：
- en: '[PRE23]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: When you run this code, you will see some buttons. You will see that you can
    scroll it by swiping and you can get the number of the button you tapped.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行此代码时，你会看到一些按钮。你会看到你可以通过滑动来滚动它，并且你可以获取你点击的按钮编号。
- en: '![How to do it...](img/0561_05_17.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![如何实现...](img/0561_05_17.jpg)'
- en: How it works...
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: Create an instance of the `ListView` class. It is possible to specify the scroll
    direction in the same way as `ScrollView`. Since we want to scroll only in the
    vertical direction, you specify `ui::ListView::Direction::VERTICAL`. Also, you
    can specify the bounce at the edge of the area by using the `setBounceEnabled`
    method.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`ListView`类的实例。你可以像`ScrollView`一样指定滚动方向。由于我们只想在垂直方向上滚动，你指定`ui::ListView::Direction::VERTICAL`。此外，你可以通过使用`setBounceEnabled`方法来指定区域边缘的弹跳效果。
- en: Create 20 buttons to display in the list view. You have to use the `Layout`
    class to display the content in the list view as in the case of `PageView`. You
    add an instance of the `Button` class to the instance of the `Layout` class.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在列表视图中创建20个按钮。您必须使用`Layout`类来显示列表视图中的内容，就像在`PageView`的情况下一样。您需要将`Button`类的一个实例添加到`Layout`类的实例中。
- en: Get the event by using the `addEventListener` method. `ListView` has two events,
    namely `ON_SELECTED_ITEM_START` and `ON_SELECTED_ITEM_END`. When you touch the
    list view, `ON_SELECTED_ITEM_START` is fired. When you release the finger without
    moving it, `ON_SELECTED_ITEM_END` is fired. If you move your finger, `ON_SELECTED_ITEM_END`
    is not fired and it will be a scrolling process. You can get the button number
    by using the `getCurSelectedIndex` method.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用`addEventListener`方法来获取事件。`ListView`有两个事件，即`ON_SELECTED_ITEM_START`和`ON_SELECTED_ITEM_END`。当您触摸列表视图时，会触发`ON_SELECTED_ITEM_START`。当您不移动手指就释放时，会触发`ON_SELECTED_ITEM_END`。如果您移动手指，则不会触发`ON_SELECTED_ITEM_END`，这将是一个滚动过程。您可以通过使用`getCurSelectedIndex`方法来获取按钮编号。
