- en: Chapter 5. Creating GUIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to create various UI parts. The following topics
    will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating menus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating buttons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating checkboxes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating loading bar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating sliders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating text fields
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating scroll views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating page views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating list views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Games have a lot of GUI parts, for example, there are menus, buttons, checkboxes,
    loading bars, and so on. We cannot make our game without these parts. Further,
    these are a little different from the node we've discussed until now. In this
    chapter we will see how to create various GUI parts such as menus, sliders, text
    fields etc. for a game.
  prefs: []
  type: TYPE_NORMAL
- en: Creating menus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will create a menu. A menu has various buttons such as a
    start button and a pause button. A Menu is a very important component for any
    game and they are really useful too. The steps to use a menu are little complex.
    In this recipe, we will have a glance over creating menus to understand its complexity
    and to get used to them.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We prepared the following image as a button image and added them to the `Resources/res`
    folder in our project. We will use the following image of the button to use it
    as menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/0561_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Firstly, we will create a simple menu that has one item for a button. We will
    use the `item1.png` file as the button image. Create the menu by using the code
    here.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The execution result of this code is shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/0561_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Further, you can see the `tapped item` text in the log after tapping the menu
    item. You will notice that the button becomes a little dark when you tap it.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a sprite of the normal status when the button is not operated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a sprite of the selected status when the button is pressed. In this case,
    we used the same images for both the normal status and the selected status, but
    players could not understand the change in status when they tapped the button.
    That's why we changed the selected image to a slightly darker image by using the
    `setColor` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an instance of the `MenuItemSprite` class by using these two sprites.
    The third argument specifies the lambda expression to be processed when the button
    is pressed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This time, we created only one button in the menu, but we can add more buttons
    in the menu. To do so, we can enumerate several items in the `Menu::create` method
    and specify `nullptr` at the end. To add multiple buttons in the menu, use the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In addition, it is possible to add an item by using the `addChild` method of
    the menu instance.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If the button is pressed, the lambda expression process that you specify when
    you create an instance of `MenuItemSprite` starts running. The argument is passed
    an instance of the `MenuItemSprite` that was pressed.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is also possible to automatically align multiple buttons. We created three
    items in the `Resources/res` folder. These are named `item1.png`, `item2.png`,
    and `item3.png`. You can create three buttons and use the following code to align
    these buttons vertically in the center of the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![There''s more...](img/0561_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you want to align these items horizontally, you can use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Until now, the alignment of intervals has been adjusted automatically; however,
    if you want to specify the padding, you can use another method.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code will specify the intervals side by side in a vertical manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code will specify the intervals side by side in a horizontal
    manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Creating buttons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will explain how to create buttons. Before the `Button` class
    was released, we created a button by using the `Menu` class that was introduced
    in the previous recipe. Due to the `Button` class, it has become possible to finely
    control the button press.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To use the `Button` class and other GUI parts mentioned in this chapter, you
    must include the `CocosGUI.h` file. Let''s add the following line of code in `HelloWorldScene.cpp`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s create a button using the `Button` class. Firstly, you will generate
    a button instance by using `item1.png` image that was used in the previous recipe.
    We will also specify the callback function as a lambda expression by using the
    `addEventListener` method when the button is pressed. You can create the button
    by using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can now run this project and push the button. Further, you can move your
    touch position and release your finger. Thus, you will see that the touch status
    of the button will change in the log. Let's take a look at it step-by-step.
  prefs: []
  type: TYPE_NORMAL
- en: When you use the `Button` class and other GUI parts mentioned in this chapter,
    you have to include the `CocosGUI.h` file as this file defines the necessary classes.
    Further, please note that these classes have their own namespace such as "`cocos2d::ui`."
  prefs: []
  type: TYPE_NORMAL
- en: It is easy to create an instance of the `Button` class. You only need to specify
    the sprite file name. Further, you can create a callback function as a lambda
    expression by using the `addTouchEventListener` method. This function has two
    parameters. The first parameter is a button instance that was pressed. The second
    parameter is the touch status. Touch statuses are of four types. `TouchEventType::BEGAN`
    is the status at the moment that the button is pressed. `TouchEventType::MOVE`
    is the event type that occurs when you move your finger after you press it. `TouchEventType::ENDED`
    is the event that occurs at the moment you release your finger from the screen.
    `TouchEventType::CANCELED` is the event that occurs when you release your finger
    outside of the button.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is possible to create a button instance by specifying the selected status
    image and the disabled status image. Create this button by using the code here.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Unlike the `MenuItemSprite` class, you won't be able to specify the selection
    status by changing the normal image color that was set using the `setColor` method.
    You have to prepare the images as selected image and disabled image.
  prefs: []
  type: TYPE_NORMAL
- en: Creating checkboxes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will create a checkbox. In Cocos2d-x version 2, a checkbox
    was created by using the `MenuItemToggle` class. However, doing so was quite cumbersome.
    In Cocos2d-x version 3, we can create a checkbox by using the `Checkbox` class
    that can be used in Cocos Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So let's prepare the images of the checkbox before you start. Here, we have
    prepared the images of the required minimum `On` and `Off` status. Please add
    these images to the `Resouces/res` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Off` status image will look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/0561_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `On` status image will look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/0561_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s create a checkbox by using the `Checkbox` class. First, you will generate
    a checkbox instance by using the `check_box_normal.png` image and the `check_box_active.png`
    image. You will also specify the callback function as a lambda expression by using
    the `addEventListener` method when the checkbox status is changed. Create the
    checkbox by using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The following figure shows that the checkbox was selected by running the preceding
    code.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/0561_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It generates the instance of a checkbox by specifying the `On` and `Off` images.
    Further, the callback function was specified in the same way as the `Button` class
    was in the previous recipe. A checkbox has two `EventType` options, namely `ui::Checkbox::EventType::SELECTED`
    and `ui::Checkbox::EventType::UNSELECTED.`
  prefs: []
  type: TYPE_NORMAL
- en: You can also get the status of the checkbox by using the `isSelected` method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You can also change the status of the checkbox by using the `setSelected` method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In addition, it is possible to further specify the image of a more detailed
    checkbox status. The `Checkbox::create` method has five parameters. These parameters
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Unselected image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unselected and pushing image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selected image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unselected and disabled image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selected and disabled image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s how to specify the images of these five statuses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'To disable the checkbox, use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Creating loading bars
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you are consuming a process or downloading something, you can indicate
    that it is not frozen by showing its progress to the user. To show such progresses,
    Cocos2d-x has a `LoadingBar` class. In this recipe, you will learn how to create
    and show the loading bars.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Firstly, we have to prepare an image for the progress bar. This image is called
    `loadingbar.png`. You will add this image in the `Resouces/res` folder.
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/0561_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It generates an instance of the loading bar by specifying the image of the
    loading bar. Further, it is set to 0% by using the `setPercent` method. Finally,
    in order to advance the bar from 0% to 100% by 1% at 0.1 s, we will use the `schedule`
    method as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The following figure is an image of the loading bar at 100%.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/0561_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have to specify one image as the loading bar image to create an instance
    of the `LoadingBar` class. You can set the percentage of the loading bar by using
    the `setPercent` method. Further, you can get its percentage by using the `getPercent`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, the loading bar will progress toward the right. You can change this
    direction by using the `setDirection` method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: When you set the `ui::LoadingBar::Direction::RIGHT` value, the start position
    of the loading bar is the right edge. Then, the loading bar will progress in the
    left direction.
  prefs: []
  type: TYPE_NORMAL
- en: Creating sliders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will explain the slider. The slider will be used for tasks
    such as changing the volume of the sound or music. Cocos2d-x has a `Slider` class
    for it. If we use this class, we can create a slider easily.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So, let's prepare the images of the slider before we start. Please add these
    images in the `Resouces/res` folder.
  prefs: []
  type: TYPE_NORMAL
- en: '`sliderTrack.png`: Background of the slider![Getting ready](img/0561_05_09.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sliderThumb.png`: Image to move the slider![Getting ready](img/0561_05_10.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's create a slider by using the `Slider` class. First, you will generate
    a slider instance by using the `sliderTrack.png` image and the `sliderThumb.png`
    image. You will also specify the callback function as a lambda expression by using
    the `addEventListener` method when the slider value is changed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The following figure shows the result of the preceding code.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/0561_05_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have to specify two images as the slider's bar image and the slider's thumb
    image to create an instance of the `Slider` class. The callback function was specified
    in the same way as the `Button` class was in the previous recipe. The slider has
    only one `EventType` as `ui::Slider::EventType::ON_PERCENTAGE_CHANGED`. That's
    why the status is the only changing value. You can get the percentage shown on
    the slider by using the `getPercent` method.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to see the progress on the slider, you can use the `loadProgressBarTexture`
    method. We will require an image for the progress bar. The following image shows
    the progress bar image. Let's add it to the `Resources/res` folder.
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/0561_05_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Then, we use the `loadProgressbarTexture` method by specifying this image.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s run the code that has been modified so far. You will see it with the
    color on the left side of the bar as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/0561_05_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating text fields
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may want to set a nickname in your game. To set nicknames or to get the
    player's input text, you can use the `TextField` class. In this recipe, we will
    learn about a simple `TextField` sample and how to add a textfield in a game.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will create a text field by specifying the placeholder text, font name,
    and font size. Then, you set a callback function by using `addEventListener`.
    In the callback function, you can get the text that the player input in the `textField`.
    Create the `textField` by using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s run this code. You will see it within the placeholder text, and it will
    show the keyboard automatically as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/0561_05_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You create an instance of the `TextField` class. The first argument is the placeholder
    string. The second argument is the font name. You can specify only a true type
    font. The third argument is the font size.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can get the event by using the `addEventListener` method. The following
    list provides the event names and their descriptions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Event Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `ATTACH_WITH_IME` | The keyboard will appear. |'
  prefs: []
  type: TYPE_TB
- en: '| `DETACH_WITH_IME` | The keyboard will disappear. |'
  prefs: []
  type: TYPE_TB
- en: '| `INSERT_TEXT` | The text was input. You can get the string by using the `getString`
    method. |'
  prefs: []
  type: TYPE_TB
- en: '| `DELETE_BACKWARD` | The text was deleted. |'
  prefs: []
  type: TYPE_TB
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When a player enters a password, you have to hide it by using the `setPasswordEnable`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s run the code that has been modified so far. You will see how to hide
    a password that you enter, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/0561_05_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating scroll views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a huge map is displayed in your game, a scroll view is required. It can
    be scrolled by a swipe, and bounce at the edge of the area. In this recipe, we
    explain the `ScrollView` class of Cocos2d-x.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s implement it right away. In this case, we doubled the size of `HelloWorld.png`.
    Further, we try to display this huge image in `ScrollView`. Create the scroll
    view by using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Let's run this code. You will see the huge `HelloWorld.png` image. Further,
    you will see that you can scroll it by swiping.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/0561_05_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You create an instance of the `ScrollView` class by using the `create` method
    without arguments.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You set the direction of the scroll view by using the `setDirection` method.
    In this case, we want to scroll up and down, and left and right, so you should
    set `ui::ScrollView::Direction::BOTH`. This implies that we can scroll in both
    the vertical and the horizontal directions. If you want to scroll just up and
    down, you set `ui::ScrollView::Direction::VERTICAL`. If you want to scroll just
    left and right, you set `ui::ScrollView::Direction::HORIZONTAL`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you want to bounce when it is scrolled at the edge of the area, you should
    set `true` by using the `setBounceEnabled` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will provide the content to be displayed in the scroll view. Here, we have
    used `HelloWorld.png` that has been scaled twice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have to specify the size of the content in the scroll view by using the
    `setInnerContainerSize` method. In this case, we specify double the size of `HelloWorld.png`
    in the `setInnerContainerSize` method
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have to specify the size of the scroll view by using the `setContentSize`
    method. In this case, we specify the original size of `HelloWorld.png` by using
    the `setContentSize` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating page views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A page view is similar to a scroll view, but it will be scrolled on a page-by-page
    basis. `PageView` is also a class in Cocos2d-x. In this recipe, we will explain
    how to use the `PageView` class.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s immediately get it implemented. Here, we will arrange three images of
    `HelloWorld.png` side-by-side in the page view. Create the page view by using
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: When you run this code, you will see one `HelloWorld.png`. You will see that
    you can move to the next page by using a swiping movement.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create an instance of the `PageView` class by using the `create` method without
    arguments. Here, we set it as the same size as that of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Display three `HelloWorld.png` images side-by-side. You must use the `Layout`
    class to set the page layout in `PageView`.
  prefs: []
  type: TYPE_NORMAL
- en: Set the page size and add the image by using the `addChild` method.
  prefs: []
  type: TYPE_NORMAL
- en: Insert an instance of the `Layout` class to the page view by using the `insertPage`
    method. At this time, you specify the page number as the second argument.
  prefs: []
  type: TYPE_NORMAL
- en: Get the event when the page has changed, you use the `addEventListener` method.
    `PageView` has only one event, `PageView::EventType::TURNING`. You can get the
    current page number by using the `getCurPageIndex` method.
  prefs: []
  type: TYPE_NORMAL
- en: Creating list views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`ListView` is a class in Cocos2d-x. It is like `UITableView` for iOS or `List
    View` for Android. `ListView` is useful for creating a lot of buttons as required
    in the case of setting a scene. In this recipe, we will explain how to use the
    `ListView` class.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here, we try to display `ListView` that has 20 buttons. Each button is identified
    with a number such as "`list item 10.`" In addition, we display the number of
    the button that you selected on the log when you tap any button. Create the list
    view by using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: When you run this code, you will see some buttons. You will see that you can
    scroll it by swiping and you can get the number of the button you tapped.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/0561_05_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create an instance of the `ListView` class. It is possible to specify the scroll
    direction in the same way as `ScrollView`. Since we want to scroll only in the
    vertical direction, you specify `ui::ListView::Direction::VERTICAL`. Also, you
    can specify the bounce at the edge of the area by using the `setBounceEnabled`
    method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create 20 buttons to display in the list view. You have to use the `Layout`
    class to display the content in the list view as in the case of `PageView`. You
    add an instance of the `Button` class to the instance of the `Layout` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Get the event by using the `addEventListener` method. `ListView` has two events,
    namely `ON_SELECTED_ITEM_START` and `ON_SELECTED_ITEM_END`. When you touch the
    list view, `ON_SELECTED_ITEM_START` is fired. When you release the finger without
    moving it, `ON_SELECTED_ITEM_END` is fired. If you move your finger, `ON_SELECTED_ITEM_END`
    is not fired and it will be a scrolling process. You can get the button number
    by using the `getCurSelectedIndex` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
