["```cpp\n    cocos new AirHockey -p com.rengelbert.AirHockey -l cpp -d /Users/rengelbert/Desktop/AirHockey\n\n    ```", "```cpp\n    return UIInterfaceOrientationIsPortrait( interfaceOrientation );\n    ```", "```cpp\n    return UIInterfaceOrientationMaskPortrait;\n    ```", "```cpp\n    auto screenSize = glview->getFrameSize();\n    auto designSize = Size(768, 1024);\n    glview->setDesignResolutionSize(designSize.width, designSize.height, ResolutionPolicy::EXACT_FIT);\n\n    std::vector<std::string> searchPaths;\n    if (screenSize.width > 768) {\n        searchPaths.push_back(\"hd\");\n        director->setContentScaleFactor(2);\n    } else  {\n        searchPaths.push_back(\"sd\");\n        director->setContentScaleFactor(1);\n    }\n    auto fileUtils = FileUtils::getInstance();\n    fileUtils->setSearchPaths(searchPaths);\n    ```", "```cpp\n    #include \"SimpleAudioEngine.h\"\n    ```", "```cpp\n    using namespace CocosDenshion;\n    ```", "```cpp\n    auto audioEngine = SimpleAudioEngine::getInstance();\n    audioEngine->preloadEffect( fileUtils->fullPathForFilename(\"hit.wav\").c_str() );\n    audioEngine->preloadEffect( fileUtils->fullPathForFilename(\"score.wav\").c_str() );\n    audioEngine->setBackgroundMusicVolume(0.5f);\n    audioEngine->setEffectsVolume(0.5f);\n    ```", "```cpp\n    #ifndef __GAMESPRITE_H__\n    #define __GAMESPRITE_H__\n    #include \"cocos2d.h\"\n    using namespace cocos2d;\n    class GameSprite : public Sprite {\n    public:\n       CC_SYNTHESIZE(Vec2, _nextPosition, NextPosition);\n       CC_SYNTHESIZE(Vec2, _vector, Vector);\n       CC_SYNTHESIZE(Touch*, _touch, Touch);\n       GameSprite();\n       virtual ~GameSprite();\n       static GameSprite* gameSpriteWithFile(const char*  pszFileName);\n       virtual void setPosition(const Vec2& pos) override;\n       float radius();\n    };\n    #endif // __GAMESPRITE_H__\n    ```", "```cpp\n    #include \"GameSprite.h\"\n\n    GameSprite::GameSprite(void){\n        _vector = Vec2(0,0);\n    }\n\n    GameSprite::~GameSprite(void){\n    }\n\n    GameSprite* GameSprite::gameSpriteWithFile(const char * pszFileName) {\n       auto sprite = new GameSprite();\n       if (sprite && sprite->initWithFile(pszFileName)) {\n              sprite->autorelease();\n              return sprite;\n       }\n       CC_SAFE_DELETE(sprite);\n       return sprite = nullptr;\n    }\n    ```", "```cpp\n    void GameSprite::setPosition(const Point& pos) {\n        Sprite::setPosition(pos);\n        if (!_nextPosition.equals(pos)) {\n            _nextPosition = pos;\n        }\n    }\n    ```", "```cpp\n    float GameSprite::radius() {\n        return getTexture()->getContentSize().width * 0.5f;\n    }\n    ```", "```cpp\n    #define GOAL_WIDTH 400\n    ```", "```cpp\n    #include \"cocos2d.h\"\n    #include \"GameSprite.h\"\n\n    using namespace cocos2d;\n\n    class GameLayer : public Layer\n    {\n        GameSprite* _player1;\n        GameSprite* _player2;\n        GameSprite* _ball;\n\n        Vector<GameSprite*> _players;\n        Label* _player1ScoreLabel;\n        Label* _player2ScoreLabel;\n    ```", "```cpp\n    Size _screenSize;\n    ```", "```cpp\n    int _player1Score;\n    int _player2Score;\n\n    void playerScore (int player);\n    ```", "```cpp\n    public:\n\n       GameLayer();\n       virtual ~GameLayer();\n       virtual bool init();\n\n        static Scene* scene();\n\n        CREATE_FUNC(GameLayer);\n\n        void onTouchesBegan(const std::vector<Touch*> &touches,  Event* event);\n       void onTouchesMoved(const std::vector<Touch*> &touches,  Event* event);\n       void onTouchesEnded(const std::vector<Touch*> &touches,  Event* event);\n\n      void update (float dt);\n    };\n    #endif // __GAMELAYER_H__\n    ```", "```cpp\n    _players = Vector<GameSprite*>(2);\n    _player1Score = 0;\n    _player2Score = 0;\n    _screenSize = Director::getInstance()->getWinSize();\n    ```", "```cpp\n    auto court = Sprite::create(\"court.png\");\n    court->setPosition(Vec2(_screenSize.width * 0.5, _screenSize.height * 0.5));\n    this->addChild(court);\n    ```", "```cpp\n    _player1 =  GameSprite::gameSpriteWithFile(\"mallet.png\");\n    _player1->setPosition(Vec2(_screenSize.width * 0.5,  _player1->radius() * 2));\n    _players.pushBack(_player1);\n    this->addChild(_player1);\n\n    _player2 =  GameSprite::gameSpriteWithFile(\"mallet.png\");\n    _player2->setPosition(Vec2(_screenSize.width * 0.5, _screenSize.height - _player1->radius() * 2));\n    _players.pushBack(_player2);\n    this->addChild(_player2);\n    _ball = GameSprite::gameSpriteWithFile(\"puck.png\");\n    _ball->setPosition(Vec2(_screenSize.width * 0.5, _screenSize.height * 0.5 - 2 * _ball->radius()));\n    this->addChild(_ball);\n    ```", "```cpp\n    _player1ScoreLabel = Label::createWithTTF(\"0\",  \"fonts/Arial.ttf\", 60);\n    _player1ScoreLabel->setPosition(Vec2(_screenSize.width - 60,  _screenSize.height * 0.5 - 80));\n    _player1ScoreLabel->setRotation(90);\n    this->addChild(_player1ScoreLabel);\n    _player2ScoreLabel = Label::createWithTTF(\"0\",  \"fonts/Arial.ttf\", 60);\n    _player2ScoreLabel->setPosition(Vec2(_screenSize.width - 60,  _screenSize.height * 0.5 + 80));\n    _player2ScoreLabel->setRotation(90);\n    this->addChild(_player2ScoreLabel);\n    ```", "```cpp\n    auto listener = EventListenerTouchAllAtOnce::create();\n    listener->onTouchesBegan =  CC_CALLBACK_2(GameLayer::onTouchesBegan, this);\n    listener->onTouchesMoved =  CC_CALLBACK_2(GameLayer::onTouchesMoved, this);\n    listener->onTouchesEnded =  CC_CALLBACK_2(GameLayer::onTouchesEnded, this);\n    _eventDispatcher->addEventListenerWithSceneGraphPriority(listener, this);\n    //create main loop\n    this->scheduleUpdate();\n    return true;\n    ```", "```cpp\n    void GameLayer::onTouchesBegan(const std::vector<Touch*> &touches, Event* event)\n    {\n       for( auto touch : touches) {\n         if(touch != nullptr) {\n            auto tap = touch->getLocation();\n            for (auto player : _players) {\n             if (player->boundingBox().containsPoint(tap)) {\n                player->setTouch(touch);\n             }\n           }\n         }\n       }\n    }\n    ```", "```cpp\n    for (auto player : _players) {\n      if (player->getTouch() != nullptr && player->getTouch() ==  touch) {\n        Point nextPosition = tap;\n       if (nextPosition.x < player->radius())\n          nextPosition.x = player->radius();\n       if (nextPosition.x > _screenSize.width - player->radius())\n          nextPosition.x = _screenSize.width - player->radius();\n       if (nextPosition.y < player->radius())\n          nextPosition.y  = player->radius();\n       if (nextPosition.y > _screenSize.height - player->radius())\n          nextPosition.y = _screenSize.height - player->radius();\n\n       //keep player inside its court\n       if (player->getPositionY() < _screenSize.height* 0.5f) {\n          if (nextPosition.y > _screenSize.height* 0.5 -  player->radius()) {\n             nextPosition.y = _screenSize.height* 0.5 -  player->radius();\n            }\n       } else {\n          if (nextPosition.y < _screenSize.height* 0.5 +  player->radius()) {\n             nextPosition.y = _screenSize.height* 0.5 +  player->radius();\n          }\n       }              \n       player->setNextPosition(nextPosition);\n       player->setVector(Vec2(tap.x - player->getPositionX(),  tap.y - player->getPositionY()));\n     }   \n    }\n    ```", "```cpp\n    for (auto player : _players) {\n       if (player->getTouch() != nullptr && player->getTouch() == touch) {\n         //if touch ending belongs to this player, clear it\n         player->setTouch(nullptr);\n         player->setVector(Vec2(0,0));\n       }\n    }\n    ```", "```cpp\n    void GameLayer::update (float dt) {\n\n        auto ballNextPosition = _ball->getNextPosition();\n        auto ballVector = _ball->getVector();\n        ballVector *=  0.98f;\n\n        ballNextPosition.x += ballVector.x;\n        ballNextPosition.y += ballVector.y;\n    ```", "```cpp\n    float squared_radii = pow(_player1->radius() +  _ball->radius(), 2);\n    for (auto player : _players) {\n      auto playerNextPosition = player->getNextPosition();\n      auto playerVector = player->getVector();  \n      float diffx = ballNextPosition.x - player->getPositionX();\n      float diffy = ballNextPosition.y - player->getPositionY();\n      float distance1 = pow(diffx, 2) + pow(diffy, 2);\n      float distance2 = pow(_ball->getPositionX() -  playerNextPosition.x, 2) + pow(_ball->getPositionY() -  playerNextPosition.y, 2);\n    ```", "```cpp\n    if (distance1 <= squared_radii || \n        distance2 <= squared_radii)  {\n    ```", "```cpp\n        float mag_ball = pow(ballVector.x, 2) + pow(ballVector.y, 2);\n        float mag_player = pow(playerVector.x, 2) + pow (playerVector.y, 2);\n        float force = sqrt(mag_ball + mag_player);\n        float angle = atan2(diffy, diffx);\n\n            ballVector.x = force * cos(angle);\n            ballVector.y = (force * sin(angle));\n\n            ballNextPosition.x = playerNextPosition.x + (player->radius() + _ball->radius() + force) * cos(angle);\n            ballNextPosition.y = playerNextPosition.y + (player->radius() + _ball->radius() + force) * sin(angle);\n\n           SimpleAudioEngine::getInstance()->playEffect(\"hit.wav\");\n        }\n    }\n    ```", "```cpp\n    if (ballNextPosition.x < _ball->radius()) {\n        ballNextPosition.x = _ball->radius();\n        ballVector.x *= -0.8f;\n        SimpleAudioEngine::getInstance()->playEffect(\"hit.wav\");\n    }\n\n    if (ballNextPosition.x > _screenSize.width - _ball->radius()) {\n        ballNextPosition.x = _screenSize.width - _ball->radius();\n        ballVector.x *= -0.8f;\n        SimpleAudioEngine::getInstance()->playEffect(\"hit.wav\");\n    }\n    ```", "```cpp\n    if (ballNextPosition.y > _screenSize.height - _ball->radius()) {\n        if (_ball->getPosition().x < _screenSize.width * 0.5f - GOAL_WIDTH * 0.5f || _ball->getPosition().x > _screenSize.width * 0.5f + GOAL_WIDTH * 0.5f) {\n            ballNextPosition.y = _screenSize.height - _ball->radius();\n            ballVector.y *= -0.8f;\n            SimpleAudioEngine::getInstance()->playEffect(\"hit.wav\");\n        }\n    }\n\n    if (ballNextPosition.y < _ball->radius() ) {\n        if (_ball->getPosition().x < _screenSize.width * 0.5f - GOAL_WIDTH * 0.5f || _ball->getPosition().x > _screenSize.width * 0.5f + GOAL_WIDTH * 0.5f) {\n            ballNextPosition.y = _ball->radius();\n            ballVector.y *= -0.8f;\n            SimpleAudioEngine::getInstance()->playEffect(\"hit.wav\");\n        }\n    }\n    ```", "```cpp\n    _ball->setVector(ballVector);\n    _ball->setNextPosition(ballNextPosition);\n\n    //check for goals!\n    if (ballNextPosition.y  < -_ball->radius() * 2) {\n       this->playerScore(2);\n    }\n\n    if (ballNextPosition.y > _screenSize.height + _ball->radius() * 2) {\n       this->playerScore(1);\n    }\n    ```", "```cpp\n    _player1->setPosition(_player1->getNextPosition());\n    _player2->setPosition(_player2->getNextPosition());\n    _ball->setPosition(_ball->getNextPosition()); \n    ```", "```cpp\n    void GameLayer::playerScore (int player) {\n\n        SimpleAudioEngine::getInstance()->playEffect(\"score.wav\");\n\n        _ball->setVector(Vec2(0,0));\n    ```", "```cpp\n    char score_buffer[10];\n    if (player == 1) {\n        _player1Score++;\n        _player1ScoreLabel->setString(std::to_string(_player1Score));\n        _ball->setNextPosition(Vec2(_screenSize.width * 0.5, _screenSize.height * 0.5 + 2 * _ball->radius()));\n\n        } else {\n        _player2Score++;\n        _player2ScoreLabel->setString(std::to_string(_player2Score));\n        _ball->setNextPosition(Vec2(_screenSize.width * 0.5, _screenSize.height * 0.5 - 2 * _ball->radius()));\n        }\n    ```", "```cpp\n        _player1->setPosition(Vec2(_screenSize.width * 0.5, _player1->radius() * 2));\n        _player2->setPosition(Vec2(_screenSize.width * 0.5, _screenSize.height - _player1->radius() * 2));\n        _player1->setTouch(nullptr);\n        _player2->setTouch(nullptr);\n    }\n    ```", "```cpp\n    android:screenOrientation=\"portrait\"   \n    ```", "```cpp\n    <supports-screens android:anyDensity=\"true\"\n              android:smallScreens=\"false\"\n              android:normalScreens=\"false\"\n              android:largeScreens=\"true\"\n              android:xlargeScreens=\"true\"/>\n    ```", "```cpp\n    <uses-sdk android:minSdkVersion=\"11\"/>\n    ```", "```cpp\n    LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                       ../../Classes/AppDelegate.cpp \\\n                       ../../Classes/GameSprite.cpp \\\n                       ../../Classes/GameLayer.cpp \n    ```"]