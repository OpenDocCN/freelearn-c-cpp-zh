- en: Chapter 1. Let's Plug Things
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。让我们连接东西
- en: Arduino is all about plugging things. We are going to do that in a couple of
    minutes after we have learned a bit more about microcontrollers in general and
    especially the big and amazing Arduino family. This chapter is going to teach
    you how to be totally ready to code, wire, and test things with your new hardware
    friend. Yes, this will happen soon, very soon; now let's dive in!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino的一切都是关于连接东西。在我们对微控制器的一般知识以及特别是庞大而惊人的Arduino大家族有了更多了解之后，我们将在这几分钟内做到这一点。本章将教会你如何完全准备好用你的新硬件朋友进行编码、布线和测试。是的，这很快就会发生，非常快；现在让我们深入探讨吧！
- en: What is a microcontroller?
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是微控制器？
- en: 'A **microcontroller** is an **integrated circuit** (**IC**) containing all
    main parts of a typical computer, which are as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**微控制器**是一个**集成电路**（**IC**），包含典型计算机的所有主要部分，如下所述：'
- en: Processor
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理器
- en: Memories
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储器
- en: Peripherals
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外设
- en: Inputs and outputs
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入和输出
- en: The **processor** is the brain, the part where all decisions are taken and which
    can calculate.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**处理器**是大脑，是所有决策被做出并可以进行计算的部分。'
- en: '**Memories** are often both spaces where both the core inner-self program and
    the user elements are running (generally called **Read Only Memory** (**ROM**)
    and **Random Access Memory** (**RAM**)).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**存储器**通常是核心内部程序和用户元素运行的空间（通常称为**只读存储器**（**ROM**）和**随机存取存储器**（**RAM**））。'
- en: 'I define peripherals by the self-peripherals contained in a global board; these
    are very different types of integrated circuits with a main purpose: to support
    the processor and to extend its capabilities.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我将全局板上的自包含外设定义为外设；这些是具有主要目的的非常不同类型的集成电路：支持处理器并扩展其功能。
- en: Inputs and outputs are the ways of communication between the world (around the
    microcontroller) and the microcontroller itself.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 输入和输出是世界（围绕微控制器）与微控制器本身之间通信的方式。
- en: The very first single-chip processor was built and proposed by Intel Corporation
    in 1971 under the name **Intel 4004** . It was a 4-bit **central processing unit**
    (**CPU**).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 第一款单片处理器是在1971年由英特尔公司建造并提出的，名为**Intel 4004**。它是一个4位的**中央处理单元**（**CPU**）。
- en: Since the 70s, things have evolved a lot and we have a lot of processors around
    us. Look around, you'll see your phone, your computer, and your screen. Processors
    or microprocessors drive almost everything.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 自从70年代以来，事物已经发生了很大的变化，我们周围有很多处理器。看看四周，你会看到你的手机、你的电脑和你的屏幕。处理器或微处理器几乎驱动着一切。
- en: Compared to microprocessors, microcontrollers provide a way to reduce power
    consumption, size, and cost. Indeed, microprocessors, even if they are faster
    than processors embedded in microcontrollers, require a lot of peripherals to
    be able to work. The high-level of integration provided by a microcontroller makes
    it the friend of embedded systems that are car engine controller, remote controller
    of your TV, desktop equipment including your nice printer, home appliances, games
    of children, mobile phones, and I could continue…
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 与微处理器相比，微控制器提供了一种减少功耗、尺寸和成本的方法。确实，即使微处理器的速度比微控制器中嵌入的处理器快，它们也需要大量的外围设备才能工作。微控制器提供的高度集成使其成为汽车引擎控制器、电视遥控器、包括您漂亮的打印机在内的桌面设备、家用电器、儿童游戏、移动电话等嵌入式系统的朋友。我可以继续……
- en: 'There are many families of microcontrollers that I cannot write about in this
    book, not to quote **PICs** ([http://en.wikipedia.org/wiki/PIC_microcontroller](http://en.wikipedia.org/wiki/PIC_microcontroller))
    and **Parallax SX** microcontroller lines. I also want to quote a particular music
    hardware development open source project: **MIDIbox** (PIC-, then STM32-based,
    check [http://www.ucapps.de](http://www.ucapps.de)). This is a very strong and
    robust framework, very tweakable. The Protodeck controller ([http://julienbayle.net/protodeck](http://julienbayle.net/protodeck))
    is based on MIDIbox.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我无法在这本书中介绍许多微控制器系列，不提**PICs** ([http://en.wikipedia.org/wiki/PIC_microcontroller](http://en.wikipedia.org/wiki/PIC_microcontroller))
    和 **Parallax SX** 微控制器系列。我还想提及一个特定的音乐硬件开发开源项目：**MIDIbox**（基于PIC，然后基于STM32，查看 [http://www.ucapps.de](http://www.ucapps.de)）。这是一个非常强大且稳健的框架，非常可调整。Protodeck控制器
    ([http://julienbayle.net/protodeck](http://julienbayle.net/protodeck)) 基于MIDIbox。
- en: Now that you have understood you have a whole computer in your hands, let's
    specifically describe Arduino boards!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经明白你手中有一台完整的电脑，让我们具体描述Arduino板！
- en: Presenting the big Arduino family
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Arduino大家族
- en: Arduino is an open source ([http://en.wikipedia.org/wiki/Open_source](http://en.wikipedia.org/wiki/Open_source))
    singleboard-based microcontroller. It is a very popular platform forked from the
    **Wiring** platform ([http://www.wiring.org.co/](http://www.wiring.org.co/)) and
    firstly designed to popularize the use of electronics in interaction design university
    students' projects.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino是一个开源([http://en.wikipedia.org/wiki/Open_source](http://en.wikipedia.org/wiki/Open_source))的单板式微控制器。它是一个非常流行的平台，源自**Wiring**平台([http://www.wiring.org.co/](http://www.wiring.org.co/))，最初设计用于推广在交互式设计大学生的项目中使用电子技术。
- en: '![Presenting the big Arduino family](img/7584_01_001.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![展示大型的Arduino家族](img/7584_01_001.jpg)'
- en: My Arduino MEGA in my hand
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我手中的Arduino MEGA
- en: It is based on the Atmel AVR processor ([http://www.atmel.com/products/microcontrollers/avr/default.aspx](http://www.atmel.com/products/microcontrollers/avr/default.aspx))
    and provides many inputs and outputs in only one self-sufficient piece of hardware.
    The official website for the project is [http://www.arduino.cc](http://www.arduino.cc).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 它基于Atmel AVR处理器([http://www.atmel.com/products/microcontrollers/avr/default.aspx](http://www.atmel.com/products/microcontrollers/avr/default.aspx))，并且在一块自给自足的硬件上提供了许多输入和输出。该项目的官方网站是[http://www.arduino.cc](http://www.arduino.cc)。
- en: The project was started in Italy in 2005 by founders Massimo Banzi and David
    Cuartielles. Today it is one of the most beautiful examples of the open source
    concept, brought to the hardware world and being often used only in the software
    world.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目始于2005年的意大利，由创始人Massimo Banzi和David Cuartielles发起。如今，它是开源概念在硬件世界中最美丽的例子之一，经常只在软件世界中使用。
- en: 'We talk about Arduino family because today we can count around 15 boards ''Arduino-based'',
    which is a funny meta-term to define different type of board designs all made
    using an Atmel AVR processor. The main differences between those boards are the:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们谈论Arduino家族，因为今天我们可以数出大约15款基于Arduino的板子，这是一个有趣的元术语，用来定义所有使用Atmel AVR处理器制作的不同类型的板子设计。这些板子之间的主要区别是：
- en: Type of processor
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理器类型
- en: Number of inputs and outputs
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入和输出的数量
- en: Form factor
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外形尺寸
- en: Some Arduino boards are a bit more powerful, considering calculation speed,
    some other have more memory, some have a lot of inputs/outputs (check the huge
    Arduino Mega), some are intended to be integrated in more complex projects and
    have a very small form factor with very few inputs and outputs… as I used to tell
    my students *each one can find his friend in the Arduino family*. There are also
    boards that include peripherals like Ethernet Connectors or even Bluetooth modules,
    including antennas.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一些Arduino板在计算速度上更强大，一些有更多的内存，一些有大量的输入/输出（检查巨大的Arduino Mega），一些旨在集成到更复杂的项目中，具有非常小的外形尺寸和很少的输入/输出……就像我经常对我的学生说，*每个人都能在Arduino家族中找到他的朋友*。还有一些板子包括像以太网连接器或甚至蓝牙模块这样的外围设备，包括天线。
- en: 'The magic behind this family is the fact we can use the same **Integrated Development
    Environment** (**IDE**) on our computers with any of those boards ([http://en.wikipedia.org/wiki/Integrated_development_environment](http://en.wikipedia.org/wiki/Integrated_development_environment)).
    Some bits need to be correctly setup but this is the very same software and language
    we''ll use:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这个家族背后的魔法事实是我们可以在我们的计算机上使用相同的**集成开发环境**(**IDE**)来使用任何这些板子([http://en.wikipedia.org/wiki/Integrated_development_environment](http://en.wikipedia.org/wiki/Integrated_development_environment))。一些设置需要正确配置，但这是我们将会使用的相同软件和语言：
- en: '![Presenting the big Arduino family](img/7584_01_002.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![展示大型的Arduino家族](img/7584_01_002.jpg)'
- en: 'Some notable Arduino family members: Uno R3, LilyPad, Arduino Ethernet, Arduino
    Mega, Arduino Nano, Arduino Pro, and a prototyping shield'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一些值得注意的Arduino家族成员：Uno R3、LilyPad、Arduino Ethernet、Arduino Mega、Arduino Nano、Arduino
    Pro和原型板
- en: A very nice but non-exhaustive reference page about this can be found at [http://arduino.cc/en/Main/Hardware](http://arduino.cc/en/Main/Hardware).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[http://arduino.cc/en/Main/Hardware](http://arduino.cc/en/Main/Hardware)找到关于此的非常棒但并不详尽的参考页面。
- en: 'I especially want you to check the following models:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我特别想让你检查以下型号：
- en: '**Arduino Uno** is the basic one with a replaceable chipset'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Arduino Uno**是基本型号，具有可更换的芯片组'
- en: '**Arduino Mega**, 2560 provides a bunch of inputs and outputs'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Arduino Mega**，2560提供了大量的输入和输出'
- en: '**Arduino LilyPad**, is wearable as clothes'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Arduino LilyPad**，可以像衣服一样穿戴'
- en: '**Arduino Nano**, is very small'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Arduino Nano**，非常小巧'
- en: Throughout this book I'll use an Arduino Mega and Arduino Uno too; but don't
    be afraid, when you've mastered Arduino programming, you'll be able to use any
    of them!
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我会使用Arduino Mega和Arduino Uno；但不要害怕，当你掌握了Arduino编程，你将能够使用它们中的任何一个！
- en: About hardware prototyping
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于硬件原型
- en: We can program and build software quite easily today using a lot of open source
    frameworks for which you can find a lot of helpful communities on the Web. I'm
    thinking about **Processing** (Java-based, check [http://processing.org](http://processing.org)),
    and **openFrameworks** (C++-based, check [http://www.openframeworks.cc](http://www.openframeworks.cc)),
    but there are many others that sometimes use very different paradigms like graphical
    programming languages such as **Pure Data** ([http://puredata.info](http://puredata.info)),
    **Max 6** ([http://cycling74.com/products/max/](http://cycling74.com/products/max/)),
    or **vvvv** ([http://vvvv.org](http://vvvv.org)) for Windows.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们今天可以很容易地使用大量的开源框架来编程和构建软件，你可以在网上找到很多有帮助的社区。我想到的是**Processing**（基于Java，请查看[http://processing.org](http://processing.org))，和**openFrameworks**（基于C++，请查看[http://www.openframeworks.cc](http://www.openframeworks.cc))，但还有很多其他的使用非常不同的范例，比如图形编程语言，如**Pure
    Data** ([http://puredata.info](http://puredata.info))，**Max 6** ([http://cycling74.com/products/max/](http://cycling74.com/products/max/))，或**vvvv**
    ([http://vvvv.org](http://vvvv.org))。
- en: Because we, the makers, are totally involved in do-it-yourself practices, we
    all want and need to build and design our own tools and it often means hardware
    and electronics tools. We want to extend our computers with sensors, blinking
    lights, and even create standalone gears.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 因为作为制造者，我们完全沉浸在DIY实践中，我们都想并且需要构建和设计我们自己的工具，这通常意味着硬件和电子工具。我们希望扩展我们的计算机，添加传感器、闪烁的灯光，甚至创建独立的设备。
- en: Even for testing very basic things like blinking a **light emitting diode**
    (**LED**), it involves many elements from supplying power to chipset low-level
    programming, from resistors value calculations to voltage-driven quartz clock
    setup. All those steps just gives headache to students and even motivated ones
    can be put off making just a first test.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是测试非常基本的事情，比如闪烁一个**发光二极管**（**LED**），也涉及到从供电到芯片组低级编程，从电阻值计算到电压驱动石英钟设置等多个元素。所有这些步骤都让学生们头疼，甚至那些有动力的学生也可能因为第一次测试而放弃。
- en: Arduino appeared and changed everything in the landscape by proposing an inexpensive
    and all-included solution (we have to pay $30 for the Arduino Uno R3), a cross-platform
    toolchain running on Windows, OS X, and Linux, a very easy high-level C language
    and library that can also tweak the low-level bits, and a totally extensible open
    source framework.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino的出现改变了整个领域的格局，它提出了一个价格低廉且功能齐全的解决方案（我们不得不为Arduino Uno R3支付30美元），一个跨平台的工具链，在Windows、OS
    X和Linux上运行，一个非常容易使用的高级C语言和库，它也可以调整低级位，以及一个完全可扩展的开源框架。
- en: Indeed, with an all-included small and cute board, an USB cable, and your computer,
    you can learn electronics, program embedded hardware using C language, and blink
    your LED.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，有了这个包含所有功能的可爱的小板，一根USB线，和你的电脑，你可以学习电子学，使用C语言编程嵌入式硬件，并使LED闪烁。
- en: Hardware prototyping became (almost) as easy as software prototyping because
    of the high level of integration between the software and the hardware provided
    by the whole framework.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 由于整个框架提供的软件和硬件之间的高度集成，硬件原型变得（几乎）和软件原型一样容易。
- en: One of the most important things to understand here is the prototyping cycle.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里要理解的最重要的事情之一是原型周期。
- en: '![About hardware prototyping](img/7584_01_003.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![关于硬件原型](img/7584_01_003.jpg)'
- en: One easy hardware prototyping steps list
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的硬件原型步骤列表
- en: From our idea to our final render, we usually have to follow these steps.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们的想法到我们的最终渲染，我们通常必须遵循这些步骤。
- en: If we want to make that LED blink, we have to define several blinking characteristics
    for instance. It will help to precisely define the project, which is a key to
    success.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想让那个LED闪烁，我们必须定义几个闪烁特性。这将有助于精确地定义项目，这是成功的关键。
- en: Then we'll have to sketch a schematic with our Arduino board and our LED; it
    will dig the question, "How are they connected together?"
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要用我们的Arduino板和LED绘制一个原理图；这将解决“它们是如何连接在一起”的问题。
- en: The firmware programming using C language can directly be started after we have
    sketched the circuit because, as we'll see later, it is directly related to the
    hardware. This is one of the strong powers of Arduino development. You remember?
    The board design has been designed only to make us think about our project and
    not to confuse us with very low-level abstract learning bits.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用C语言进行固件编程可以直接在我们绘制电路图后开始，因为，正如我们稍后将会看到的，它与硬件直接相关。这是Arduino开发的强大功能之一。你还记得吗？板的设计只是为了让我们思考我们的项目，而不是用非常低级的抽象学习片段来混淆我们。
- en: The upload step is a very important one. It can provide us a lot of information
    especially in case of further troubleshooting. We'll learn that this step doesn't
    require more than a couple of clicks once the board is correctly wired to our
    computer.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 上传步骤非常重要。它可以为我们提供大量信息，尤其是在进一步故障排除的情况下。一旦将板正确连接到我们的计算机，我们将了解到这一步骤不需要超过几个点击。
- en: 'Then, the subcycle test and fix will occur. We''ll learn by making, by testing,
    and it means by failing too. It is an important part of the process and it will
    teach you a lot. I have to confess something important here: at the time when
    I first began my **bonome** project ([http://julienbayle.net/bonome](http://julienbayle.net/bonome)),
    an RGB monome clone device, I spent two hours fixing a reverse wired LED matrix.
    Now, I know them very well because I failed one day.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将进行子周期测试和修复。我们将通过制作、测试和失败来学习。这是过程的一个重要部分，它将教会你很多。我必须承认一个重要的事情：在我第一次开始我的**bonome**项目([http://julienbayle.net/bonome](http://julienbayle.net/bonome))，一个RGB
    monome克隆设备时，我花了两个小时修复一个反向焊接的LED矩阵。现在，我非常了解它们，因为我有一天失败了。
- en: The last step is the coolest one. I mentioned it because we have to keep in
    our mind the final target, the one that will make us happy in the end; it is a
    secret to succeed!
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是最酷的。我之所以提到它，是因为我们必须牢记最终目标，那就是最终让我们感到快乐的那个目标；这是成功的一个秘密！
- en: Understanding Arduino software architecture
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Arduino软件架构
- en: In order to understand how to make our nice Arduino board work exactly as we
    want it to, we have to understand the global software architecture and the toolchain
    that we'll be using quite soon.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解如何让我们的Arduino板正好按照我们的意愿工作，我们必须了解全局软件架构以及我们将很快使用的工具链。
- en: Take your Arduino board in hand. You'll see a rectangle-shaped IC with the word
    ATMEL written on the top; this is the processor.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 拿起你的Arduino板。你会看到一个矩形形状的IC，上面写着ATMEL；这就是处理器。
- en: This processor is the place that will contain the entire program that we'll
    write and that will make things happen.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这个处理器是包含我们将要编写的整个程序并使事物发生的地方。
- en: 'When we buy (check *Appendix G, List of Components'' Distributors*, and this
    link: [http://arduino.cc/en/Main/Buy](http://arduino.cc/en/Main/Buy)) an Arduino,
    the processor, also named *chipset*, is preburnt. It has been programmed by careful
    people in order to make our life easier. The program already contained in the
    chipset is called the **bootloader** ([http://en.wikipedia.org/wiki/Booting](http://en.wikipedia.org/wiki/Booting)).
    Basically, it takes care of the very first moment of awakening of the processor
    life when you supply it some power. But its major role is the load of our firmware
    ([http://en.wikipedia.org/wiki/Firmware](http://en.wikipedia.org/wiki/Firmware)),
    I mean, our precious compiled program.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们购买Arduino（请参阅*附录G，组件分销商列表*以及此链接：[http://arduino.cc/en/Main/Buy](http://arduino.cc/en/Main/Buy)）时，处理器，也称为*芯片组*，已经预先烧录。它已经被细心的人编程，以便让我们的生活更轻松。芯片组中已经包含的程序称为**引导加载程序**([http://en.wikipedia.org/wiki/Booting](http://en.wikipedia.org/wiki/Booting))。基本上，它负责处理当您给它供电时的处理器生命的第一个时刻。但它的主要作用是加载我们的固件([http://en.wikipedia.org/wiki/Firmware](http://en.wikipedia.org/wiki/Firmware))，我的意思是，我们宝贵的编译程序。
- en: 'Let''s have a look at a small diagram for better understanding:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个小图解，以便更好地理解：
- en: '![Understanding Arduino software architecture](img/7584_01_004.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![理解Arduino软件架构](img/7584_01_004.jpg)'
- en: I like to define it by saying that *the bootloader is the hardware's software
    and the firmware is the user's software*. Indeed, it also has some significance
    because memory spaces in the chipset are not equal for write operations (within
    a specific hardware which we'll discuss in the future sections of this book).
    Using a **programmer**, we cannot overwrite the bootloader (which is safer at
    this point of our reading) but only the firmware. This will be more than enough
    even for advanced purposed, as you'll see all along the book.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢通过以下方式来定义它：*引导加载程序是硬件的软件，而固件是用户的软件*。确实，它也有一些重要性，因为芯片组中的内存空间在写操作上并不相等（我们将在本书的后续章节中讨论特定的硬件）。使用**编程器**，我们无法覆盖引导加载程序（在阅读的这一点上更安全），但只能覆盖固件。即使对于高级用途，这也将绰绰有余，正如你将在整本书中看到的那样。
- en: Not all Arduino boards' bootloaders are equivalent. Indeed, they have been made
    to be very specific to the hardware part, which provides us more abstraction of
    the hardware; we can focus on higher levels of design because the bootloader provides
    us services such as firmware upload via USB and serial monitoring.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有Arduino板上的引导加载程序都是等效的。实际上，它们被设计得非常具体，针对硬件部分，这为我们提供了更多的硬件抽象；我们可以专注于更高层次的设计，因为引导加载程序为我们提供了诸如通过USB和串行监控上传固件等服务。
- en: 'Let''s now download some required software:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们下载一些必需的软件：
- en: '**FTDI USB drivers**: [http://www.ftdichip.com/Drivers/VCP.htm](http://www.ftdichip.com/Drivers/VCP.htm)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**FTDI USB驱动程序**：[http://www.ftdichip.com/Drivers/VCP.htm](http://www.ftdichip.com/Drivers/VCP.htm)'
- en: '**Arduino IDE**: [http://arduino.cc/en/Main/Software](http://arduino.cc/en/Main/Software)'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Arduino IDE**：[http://arduino.cc/en/Main/Software](http://arduino.cc/en/Main/Software)'
- en: '**Processing**: [http://processing.org/download/](http://processing.org/download/)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Processing**：[http://processing.org/download/](http://processing.org/download/)'
- en: '**Processing is used in this book but isn''t necessary to program and use Arduino
    boards.**'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**Processing在本书中被使用，但不是编程和使用Arduino板所必需的**。'
- en: Tip
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**What is the Arduino''s toolchain?**'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**Arduino的工具链是什么**？'
- en: Usually, we call Arduino's **toolchain** a set of software tools required to
    handle all steps from the C code we are typing in the Arduino IDE on our computer
    to the firmware uploaded on the board. Indeed, the C code you type has to be prepared
    before the compilation step with avr-gcc and avr-g++ compilers. Once the resulting
    object's files are linked by some other programs of the toolchain, into usually
    only one file, you are done. This can later be uploaded to the board. There are
    other ways to use Arduino boards and we'll introduce that in the last chapter
    of this book.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们将Arduino的**工具链**称为一组软件工具，用于处理从我们在计算机上的Arduino IDE中输入的C代码到上传到板上的固件的所有步骤。确实，你输入的C代码在编译步骤之前必须由avr-gcc和avr-g++编译器准备。一旦结果的目标文件通过工具链中的其他程序链接，通常只有一个文件，你就完成了。这可以稍后上传到板子上。还有其他使用Arduino板的方法，我们将在本书的最后一章中介绍。
- en: Installing Arduino development environment (IDE)
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Arduino开发环境（IDE）
- en: Let's find the compressed file downloaded from [http://arduino.cc/en/Main/Software](http://arduino.cc/en/Main/Software)
    in the previous part and let's decompress it on our computer.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在上一部分下载的[http://arduino.cc/en/Main/Software](http://arduino.cc/en/Main/Software)中找到压缩文件，并在我们的计算机上解压缩它。
- en: Whatever the platform, the IDE works equally and even if I'll describe some
    specific bits of three different platforms, I'll only describe the use of the
    IDE and show screenshots from OS X.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 无论平台如何，IDE都同样工作，即使我将描述三个不同平台的一些特定部分，我也只会描述IDE的使用，并展示从OS X的截图。
- en: Installing the IDE
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装IDE
- en: There isn't a typical installation of the IDE because it runs into the **Java
    Virtual Machine** . This means you only have to download it, to decompress it
    somewhere on your system, and then launch it and JAVA will execute the program.
    It is possible to use only the **CLI** (**command-line interface**, the famous
    g33ks window in which you can type the command directly to the system) to build
    your binaries instead of the graphical interface, but at this point, I don't recommend
    this.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 由于它运行在**Java虚拟机**上，因此没有典型的IDE安装。这意味着你只需要下载它，将其解压缩到系统中的某个位置，然后启动它，JAVA就会执行程序。你可以只使用**CLI**（**命令行界面**，著名的g33ks窗口，你可以在其中直接向系统输入命令）来构建你的二进制文件，而不是图形界面，但在这个阶段，我不推荐这样做。
- en: Usually, Windows and OS X come with Java installed. If that isn't the case,
    please install it from the `java.com` website page at [http://www.java.com/en/download/](http://www.java.com/en/download/).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，Windows和OS X都预装了Java。如果没有，请从`java.com`网站页面[http://www.java.com/en/download/](http://www.java.com/en/download/)安装它。
- en: On Linux, the process really depends on the distribution you are using, so I
    suggest to check the page [http://www.arduino.cc/playground/Learning/Linux](http://www.arduino.cc/playground/Learning/Linux)
    and if you want to check and install all the environment and dependencies from
    sources, you can also check the page [http://www.arduino.cc/playground/Linux/All](http://www.arduino.cc/playground/Linux/All).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux中，这个过程实际上取决于您使用的发行版，因此我建议您查看页面[http://www.arduino.cc/playground/Learning/Linux](http://www.arduino.cc/playground/Learning/Linux)，如果您想从源代码检查和安装所有环境和依赖项，您也可以查看页面[http://www.arduino.cc/playground/Linux/All](http://www.arduino.cc/playground/Linux/All)。
- en: How to launch the environment?
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何启动环境？
- en: In Windows, let's click on the `.exe` file included in the uncompressed folder.
    On OS X, let's click on the global self-contained package with the pretty Arduino
    logo. On Linux, you'll have to start the Arduino script from the GUI or by typing
    in the CLI.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows中，请点击解压缩文件夹中包含的`.exe`文件。在OS X中，请点击带有漂亮Arduino标志的全局自包含包。在Linux中，您必须从GUI或通过在CLI中输入来启动Arduino脚本。
- en: You have to know that using the IDE you can do everything we will make in this
    book.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须知道，使用IDE，您可以完成本书中我们将要做的所有事情。
- en: What does the IDE look like?
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IDE长什么样？
- en: The IDE provides a graphical interface in which you can write your code, debug
    it, compile it, and upload it, basically.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: IDE提供了一个图形界面，您可以在其中编写代码、调试它、编译它，并上传它，基本上。
- en: '![What does the IDE look like?](img/7584_01_005.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![IDE长什么样？](img/7584_01_005.jpg)'
- en: The famous Blink code example opened in the Arduino IDE
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在Arduino IDE中打开的著名Blink代码示例
- en: 'There are six icons from left to right that we have to know very well because
    we''ll use them every time:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 从左到右有六个图标，我们必须非常熟悉，因为我们每次都会使用它们：
- en: '**Verify** (check symbol): This provides code checking for errors'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**验证**（检查符号）：这提供了代码错误检查'
- en: '**Upload** (right-side arrow): This compiles and uploads our code to the Arduino
    board'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**上传**（右侧箭头）：这编译并将我们的代码上传到Arduino板'
- en: '**New** (small blank page): This creates a new blank sketch'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**新建**（小空白页）：这创建了一个新的空白草图'
- en: '**Open** (up arrow): This opens a list of all sketches already existing in
    our sketchbook'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**打开**（向上箭头）：这打开了一个列表，列出了我们草图簿中所有已存在的草图'
- en: '**Save** (down arrow): This saves our sketch in our sketchbook'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保存**（向下箭头）：这将在我们的草图簿中保存我们的草图'
- en: '**Serial Monitor** (small magnifying glass): This provides the serial monitoring'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**串行监视器**（小放大镜）：这提供了串行监控功能'
- en: Each menu item in the top bar provides more options we will discover progressively
    all throughout this book.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 顶部栏中的每个菜单项都提供了我们将逐步在本书中发现更多选项。
- en: 'However, the **Tools** menu deserves closer attention:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，**工具**菜单值得更仔细的关注：
- en: '**Auto Format**: This provides code formatting with correct and standard indentations'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动格式化**: 这提供了带有正确和标准缩进的代码格式化'
- en: '**Archive Sketch**: This compresses the whole current sketch with all files'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存档草图**: 这将压缩整个当前草图及其所有文件'
- en: '**Board**: This provides a list of all boards supported'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**板**: 这提供了所有支持板的列表'
- en: '**Serial Port**: This provides a list of all serial devices on the system'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**串行端口**: 这提供了系统上所有串行设备的列表'
- en: '**Programmer**: This provides a list of all programmer devices supported and
    used in case of total reprogramming of the AVR chipset'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编程器**: 这提供了所有支持并用于AVR芯片组完全重新编程的编程设备的列表'
- en: '**Burn Bootloader**: This is the option used when you want to overwrite (or
    even write) a new bootloader on your board.![What does the IDE look like?](img/7584_01_006.jpg)'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**烧录引导加载程序**: 当您想在您的板上覆盖（甚至写入）新的引导加载程序时，请选择此选项。![IDE长什么样？](img/7584_01_006.jpg)'
- en: The Tools menu
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 工具菜单
- en: The preferences dialog is also a part we have to learn about right now. As usual,
    the preferences dialog is a place where we don't really need to go often but only
    for changing global parameters of the IDE. You can choose the sketchbook location
    and the Editor language in this dialog. You can also change a couple of bits like
    automatic check-up of IDE updates at start up or Editor font size.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 预设对话框也是我们现在必须了解的部分。像往常一样，预设对话框是一个我们实际上并不需要经常去的地方，但只是为了更改IDE的全局参数。您可以在该对话框中选择草图簿位置和编辑器语言。您还可以更改一些设置，例如在启动时自动检查IDE更新或编辑器字体大小。
- en: The sketchbook concept will make our life easier. Indeed, the sketchbook is
    a folder where, basically, all your sketches will go. On my personal point of
    view, it is very precious to use it like this because it really organizes things
    for you and you can retrieve your pieces of code easier. Follow me there; you'll
    thank me later.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 草图簿的概念会使我们的生活更简单。实际上，草图簿是一个文件夹，基本上，你所有的草图都会放在里面。从我的个人观点来看，这样使用它非常宝贵，因为它真的为你组织了东西，你可以更容易地检索你的代码片段。跟我来吧；你以后会感谢我的。
- en: When we start a sketch from scratch, we basically type the code, verify it,
    upload it, and save it. By saving it, the first time, the IDE creates a folder
    in which it will put all the files related to our current sketch. By clicking
    on the sketch file inside this folder, the Arduino IDE will open and the related
    code will be displayed in the edit/typing part of the window.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们从零开始创建草图时，我们基本上是输入代码，验证它，上传它，并保存它。通过第一次保存，IDE会创建一个文件夹，它将把所有与当前草图相关的文件都放在里面。点击这个文件夹内的草图文件，Arduino
    IDE将打开，并且相关的代码将在窗口的编辑/输入部分显示。
- en: We are almost done!
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们几乎完成了！
- en: Let's install the drivers of the Arduino USB interface on our system.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在系统上安装Arduino USB接口的驱动程序。
- en: Installing Arduino drivers
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Arduino驱动程序
- en: Arduino boards provide an USB interface. Before we plug the USB cable and link
    the board to our computer, we have to install specific drivers in the latter.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino板子提供了一个USB接口。在我们插入USB电缆并将板子连接到计算机之前，我们必须在计算机上安装特定的驱动程序。
- en: There is a huge difference between Windows and OS X here; basically, OS X doesn't
    require any specific drivers for Arduino Uno or even Mega 2560\. If you are using
    older boards, you'd have to download the latest version of drivers on the FTDI
    website, double-click the package, then follow instructions, and finally, restart
    your computer.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，Windows和OS X之间有很大的区别；基本上，OS X不需要为Arduino Uno或甚至Mega 2560安装任何特定的驱动程序。如果你使用的是较老的板子，你将不得不在FTDI网站上下载最新版本的驱动程序，双击包，然后按照说明操作，最后，重新启动你的计算机。
- en: Let's describe how it works on Windows-based systems, I mean, Windows 7, Vista,
    and XP.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们描述一下它在基于Windows的系统上是如何工作的，我的意思是Windows 7、Vista和XP。
- en: Installing drivers for Arduino Uno R3
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Arduino Uno R3的驱动程序
- en: It is important to follow the steps mentioned next to be able to use the Arduino
    Uno R3 and some other boards. Please check the Arduino website for up-to-date
    references.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要遵循下面提到的步骤，才能使用Arduino Uno R3和一些其他板子。请访问Arduino网站获取最新的参考资料。
- en: Plug your board in and wait for Windows to begin the driver installation process.
    After a few moments, the process fails.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插入你的板子，等待Windows开始驱动程序安装过程。几分钟后，过程失败。
- en: Click on the Start menu, and open **Control Panel**.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击开始菜单，打开**控制面板**。
- en: In **Control Panel**, navigate to **System and Security**. Next, click on **System**.
    Once the **System** window is up, open **Device Manager**.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**控制面板**中，导航到**系统和安全**。然后点击**系统**。一旦**系统**窗口打开，打开**设备管理器**。
- en: Look under **Ports (COM & LPT)**. Check the open port named **Arduino UNO (COMxx)**.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**端口（COM & LPT）**下查看。检查名为**Arduino UNO (COMxx)**的已打开端口。
- en: Right-click on **the Arduino UNO (COMxx)** port and choose the **Update Driver
    Software** option.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击**Arduino UNO (COMxx)**端口，并选择**更新驱动程序软件**选项。
- en: Next, choose the **Browse my computer for driver software** option.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择**浏览计算机以查找驱动程序软件**选项。
- en: 'Finally, navigate and select the Uno''s driver file, named `ArduinoUNO.inf`,
    located in the `Drivers` folder of the Arduino software download (be careful:
    not the `FTDI USB Drivers` subdirectory).'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，导航并选择位于Arduino软件下载的`Drivers`文件夹中的名为`ArduinoUNO.inf`的驱动文件，注意：不是`FTDI USB Drivers`子目录。
- en: Windows will finish the driver installation from there and everything will be
    fine.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Windows将从那里完成驱动程序的安装，一切都会正常。
- en: Installing drivers for Arduino Duemilanove, Nano, or Diecimilla
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Arduino Duemilanove、Nano或Diecimilla的驱动程序
- en: When you connect the board, Windows should initiate the driver installation
    process (if you haven't used the computer with an Arduino board before).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当你连接板子时，Windows应该会启动驱动程序安装过程（如果你之前没有使用过Arduino板子的话）。
- en: On Windows Vista, the driver should be automatically downloaded and installed.
    (Really, it works!)
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows Vista上，驱动程序应该会自动下载并安装。（真的，它工作得很好！）
- en: 'On Windows XP, the **Add New Hardware** wizard will open:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows XP上，将打开**添加新硬件向导**：
- en: When asked **Can Windows connect to Windows Update to search for software?**
    select **No, not this time**. Click on **Next**.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当被问及**Windows是否可以连接到Windows更新以搜索软件？**时，选择**不，这次不行**。点击**下一步**。
- en: Select **Install from a list or specified location (Advanced)** and click on
    **Next**.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**从列表或指定位置安装（高级）**，然后点击**下一步**。
- en: Make sure that **Search for the best driver in these locations** is checked,
    uncheck **Search removable media**, check **Include this location in the search**,
    and browse to the **drivers/FTDI USB Drivers** directory of the Arduino distribution.
    (The latest version of the drivers can be found on the *FTDI* website.) Click
    on **Next**.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保已勾选**在这些位置搜索最佳驱动程序**，取消勾选**搜索可移动媒体**，勾选**将此位置包含在搜索中**，并浏览到Arduino发行版的**drivers/FTDI
    USB Drivers**目录。（驱动程序的最新版本可以在*FTDI*网站上找到。）点击**下一步**。
- en: The wizard will search for the driver and then tell you that a **USB Serial
    Converter** was found. Click on **Finish**.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向导将搜索驱动程序，然后告诉你找到了**USB串行转换器**。点击**完成**。
- en: The new hardware wizard will appear again. Go through the same steps and select
    the same options and location to search. This time, a **USB Serial Port** will
    be found.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 新硬件向导将再次出现。按照相同的步骤进行，选择相同选项和位置进行搜索。这次，将找到**USB串行端口**。
- en: You can check that the drivers have been installed by opening **Windows Device
    Manager** (in the **Hardware** tab of the **System** control panel). Look for
    a **USB Serial Port** in the **Ports** section; that's the Arduino board.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过打开**Windows设备管理器**（在**系统**控制面板的**硬件**选项卡中）来检查驱动程序是否已安装。在**端口**部分查找**USB串行端口**；那就是Arduino板。
- en: Now, our computer can recognize our Arduino board. Let's move to the physical
    world a bit to join together the tangible and intangible worlds.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的电脑可以识别我们的Arduino板。让我们稍微转向物理世界，将有形和无形的世界结合起来。
- en: What is electricity?
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 电力是什么？
- en: Arduino is all about electronic, and electronic refers to electricity. This
    may be your first dive into this amazing universe, made of wires and voltages,
    including blinking LEDs and signals. I'm defining several very useful notions
    in this part; you can consider turning down the corner of this page and to come
    back as often as you need.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino全关于电子，而电子指的是电。这可能是你第一次进入这个由电线和电压组成的神奇宇宙，包括闪烁的LED和信号。我在这部分定义了几个非常有用的概念；你可以考虑将此页的角落向下折起，并在需要时随时回来。
- en: Here, I'm using the usual analogy of water. Basically, wires are pipes and water
    is electricity itself.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我使用的是通常的水的类比。基本上，电线是管道，水是电本身。
- en: Voltage
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 电压
- en: '**Voltage** is a potential difference. Basically, this difference is created
    and maintained by a generator. This value is expressed in Volt units (the symbol
    is V).'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '**电压**是电位差。基本上，这种差异是由发电机产生并维持的。这个值以伏特单位（符号为V）表示。'
- en: The direct analogy with hydraulic systems compare the voltage to the difference
    of pressure of water in two points of a pipe. The higher the pressure, the faster
    the water moves, for a constant diameter of pipe of course.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 与液压系统的直接类比是将电压比作管道两点之间水的压力差。压力越高，水流动得越快，当然是在管道直径恒定的情况下。
- en: We'll deal with low voltage all throughout this book, which means nothing more
    than 5 V. Very quickly, we'll use 12 V to supply motors and I'll precise that
    each time we do.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我们将处理低电压，这意味着不超过5 V。很快，我们将使用12 V为电机供电，我会每次都明确指出。
- en: When you switch on the generator of closed circuits, it produces and keeps this
    potential difference. Voltage is a difference and has to be measured between two
    points on a circuit. We use voltmeters to measure the voltage.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 当你打开闭合电路的发电机时，它会产生并保持这种电位差。电压是一个差异，必须在电路上的两点之间进行测量。我们使用电压表来测量电压。
- en: Current and power
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 电流和功率
- en: '**Current** can be compared to the hydraulic volume flow rate, which is the
    volumetric quantity of flowing water over a time interval.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**电流**可以与液压体积流量率相比较，这是在时间间隔内流动水的体积量。'
- en: The current value is expressed in Ampères (the symbol is A). The higher the
    current, the higher will be the quantity of electricity moving.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 电流值以安培（符号为A）表示。电流越高，移动的电量就越多。
- en: A flow rate doesn't require two points to be measured as a difference of pressure;
    we only need one point of the circuit to make our measurement with an equipment
    named Ampere meter.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 流量不需要测量两点之间的压力差作为差异；我们只需要电路的一个点，就可以使用名为安培计的设备进行测量。
- en: In all of our applications, we'll deal with **direct current** (**DC**), which
    is different from **alternative current** (**AC**).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们所有的应用中，我们将处理**直流**（**DC**），这与**交流**（**AC**）不同。
- en: '**Power** is a specific notion, which is expressed in Watt (the symbol is W).'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '**功率**是一个特定的概念，用瓦特（符号为 W）表示。'
- en: 'Following is a mathematical relationship between voltage, current, and power:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是电压、电流和功率之间的数学关系：
- en: P = V x I
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: P = V x I
- en: where, P is the power in Watt, V the voltage in V, and I the current in Ampères.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 其中，P 是瓦特的功率，V 是伏特的电压，I 是安培的电流。
- en: Are you already feeling better? This analogy has to be understood as a proper
    analogy, but it really helps to understand what we'll make a bit later.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经感觉好多了吗？这个类比必须作为一个恰当的类比来理解，但它确实有助于理解我们稍后会做什么。
- en: And what are resistors, capacitors, and so on?
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 那么，电阻器、电容器等等是什么呢？
- en: Following the same analogy, **resistors** are small components that slow down
    the flow of current. They are more resistive than any piece of wire you can use;
    they generally dissipate it as heat. They are two passive terminal components
    and aren't polarized, which means you can wire them in both directions.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 按照同样的类比，**电阻器**是减缓电流流动的小型组件。它们的电阻性比任何你可以使用的电线都要强；它们通常将其作为热量耗散。它们是两个无源端子组件，并且不是极化的，这意味着你可以以两个方向布线。
- en: Resistors are defined by their *electrical resistance* expressed in Ohms (the
    symbol is Ω).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 电阻器由其表示为欧姆（符号为 Ω）的*电阻*定义。
- en: 'There is a direct mathematical relation between voltage measured at the resistor
    sides, current, and resistance known as the Ohm''s law:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 电阻器两侧测量的电压、电流和电阻之间存在直接的数学关系，称为欧姆定律：
- en: R = V / I
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: R = V / I
- en: where R the electrical resistance in Ohms, V the voltage in Volts, and I the
    current in Ampères.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 R 是欧姆的电阻，V 是伏特的电压，I 是安培的电流。
- en: For a constant value of voltage, if the resistance is high, the current is low
    and vice-versa. It is important to have that in mind.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 对于恒定的电压值，如果电阻高，电流就低，反之亦然。这一点很重要。
- en: On each resistor, there is a color code showing the resistance value.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 每个电阻器上都有一个颜色代码，显示其电阻值。
- en: There are many types of resistors. Some have a constant resistance, some others
    can provide different resistance values depending on physical parameters such
    as temperature, or light intensity for instance.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 电阻器有很多种类型。有些具有恒定的电阻，有些则可以根据物理参数（例如温度或光强度）提供不同的电阻值。
- en: A **potentiometer** is a variable resistor. You move a slider or rotate a knob
    and the resistance changes. I guess you begin to understand my point…
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '**电位器**是一种可变电阻器。你移动滑块或旋转旋钮，电阻就会改变。我想你开始理解我的观点了…'
- en: 'A **capacitor** (or **condenser**) is another type of component used very often.
    The direct analogy is the rubber membrane put in the pipe: no water can pass through
    it, but water can move by stretching it.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '**电容器**（或**电容器**）是另一种非常常用的组件。直接的类比是将橡胶膜放入管道中：水不能通过它，但水可以通过拉伸它移动。'
- en: They are also passive two-terminal components but can be polarized. Usually,
    small capacitors aren't.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 它们也是无源双端子组件，但可以是极化的。通常，小电容器不是。
- en: We usually are saying that capacitors store potential energy by charging. Indeed,
    the rubber membrane itself stores energy while you stretch it; try to release
    the stretched membrane, it will find its first position.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常说电容器通过充电来储存电能。确实，当你拉伸橡胶膜时，橡胶膜本身会储存能量；试着释放拉伸的膜，它会回到最初的位置。
- en: Capacitance is the value defining each capacitor. It is expressed in Farads
    (the symbol is F).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 电容是定义每个电容器的值。它以法拉（符号为 F）表示。
- en: We'll stop here about capacitance calculations because it involves advanced
    mathematics which isn't the purpose of this book. By the way, keep in mind the
    higher the capacitance, more will be the potential the capacitor can store.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里就电容计算停止，因为它涉及到高级数学，而这本书的目的不是这个。顺便说一句，记住电容越大，电容器可以储存的电能就越多。
- en: A **diode** is again a two-terminal passive component but is polarized. It lets
    the current pass through it only in one direction and stop it in the other. We'll
    see that even in the case of direct current, it can help and make our circuits
    safer in some cases.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '**二极管**又是一个双端子无源组件，但它是极化的。它只允许电流单向通过它，并在另一方向阻止电流。我们将看到，即使在直流的情况下，它也可以在某些情况下帮助并使我们的电路更安全。'
- en: LEDs are a specific type of diode. While the current passes through them in
    the correct direction, they glow. This is a nice property we'll use to check if
    our circuit is correctly closed in a few minutes.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: LED 是一种特殊的二极管。当电流以正确的方向通过它们时，它们会发光。这是一个很好的特性，我们将在几分钟内用它来检查我们的电路是否正确闭合。
- en: '**Transistor** is the last item I''m describing here because it is a bit more
    complex, but we cannot talk about electronics without quoting it.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '**晶体管**是我在这里描述的最后一个项目，因为它稍微复杂一些，但我们不能不引用它来谈论电子学。'
- en: Transistors are semiconductor devices that can amplify and switch electronics
    signals and power, depending on how they are used. They are three-terminal components.
    This is the key active component of almost all modern electronics around us. Microprocessors
    are made of transistors and they can even contain more than 1 billion of them.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 晶体管是半导体器件，可以根据其使用方式放大和切换电子信号和电力。它们是三端组件。这是我们周围几乎所有现代电子设备的关键活性组件。微处理器由晶体管制成，甚至可以包含超过10亿个晶体管。
- en: Transistors in the Arduino world are often used to drive high current, which
    couldn't pass through the Arduino board itself without burning it. In that case,
    we basically use them as analogue switches. When we need them to close a circuit
    of high currents to drive a motor for instance, we just drive one of their three
    terminals with a 5 V coming from the Arduino and the high current flows through
    it as if it had closed a circuit. In that case, it extends the possibilities of
    the Arduino board, making us able to drive higher currents with our little piece
    of hardware.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在Arduino世界中，晶体管通常用于驱动高电流，如果没有烧毁Arduino板，这些电流无法通过Arduino板本身。在这种情况下，我们基本上将它们用作模拟开关。当我们需要它们关闭高电流电路以驱动电机等设备时，我们只需用来自Arduino的5V电压驱动它们的一个三端，高电流就会通过它，就像它已经闭合了电路一样。在这种情况下，它扩展了Arduino板的功能，使我们能够用我们的小块硬件驱动更高的电流。
- en: Wiring things and Fritzing
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接事物和Fritzing
- en: With the previous analogy, we can understand well that a circuit needs to be
    closed in order to let the current flow.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 通过前面的类比，我们可以很好地理解电路需要闭合才能让电流流动。
- en: Circuits are made with wires, which are basically conductors. A conductor is
    a matter with a resistance near to zero; it lets the current flow easily. Metals
    are usually good conductors. We often use copper wires.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 电路是由导线制成的，导线基本上是导体。导体是一种电阻接近于零的物质；它使电流容易流动。金属通常是良好的导体。我们通常使用铜线。
- en: In order to keep our wiring operations easy, we often use pins and headers.
    This is a nice way to connect things without using a soldering iron each time!
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的布线操作简单，我们经常使用引脚和引线。这是一种不需要每次都使用烙铁就能连接事物的不错方式！
- en: By the way, there are many ways to wire different components together. For our
    prototyping purpose, we won't design printed circuit board or even use our soldering
    iron; we'll use breadboards!
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一下，有几种不同的方法可以将不同的组件连接在一起。为了我们的原型设计目的，我们不会设计印刷电路板或甚至使用我们的烙铁；我们将使用面板！
- en: '![Wiring things and Fritzing](img/7584_01_007.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![连接事物和Fritzing](img/7584_01_007.jpg)'
- en: A breadboard with its buses blue and red and its numerous perforations
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 一个总线（bus）带有蓝色和红色的总线，以及其众多的穿孔。
- en: Breadboards are the way to rapid prototyping and this is the way to go here.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 面板（breadboard）是快速原型设计的方式，这也是我们在这里要采取的方式。
- en: Basically, breadboards consists of a piece of plastic with many perforations
    in which there are small pieces of conductors allowing to connect wires and components'
    leads inside.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，面板由一块塑料制成，上面有许多穿孔，其中包含小块导体，允许在面板内部连接电线和组件引脚。
- en: The distance between two perforations is 2.54 mm (equal to 0.1") that is a standard;
    for instance, dual in-line package integrated circuits' leads are all separated
    by this particular distance and thus, you can even put IC on breadboards.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 两个穿孔之间的距离是2.54毫米（等于0.1英寸），这是一个标准；例如，双列直插式集成电路的引脚都是这个特定的距离，因此，你甚至可以将IC放在面板上。
- en: As we saw on the previous screenshot, there are buses and terminals strips.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上一张截图中所看到的，有总线（bus）和端子条（terminal strips）。
- en: '**Buses** are series of five perforations in the central part and put in column
    for which the underlying conductors are connected. I have surrounded one bus with
    a green stroke.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '**总线**是中央部分的一系列五个穿孔，并按列放置，其下方的导体是连接的。我用绿色线条包围了一个总线。'
- en: '**Terminals** are special buses usually used for power supplying the circuit
    and appear in between blue and red lines. Usually, we use blue for ground lines
    and red for voltage source (5 V or 3.3 V in some cases). A whole line of terminals
    has its perforations all connected, providing voltage source and ground easily
    available on all the breadboard without having to use a lot of connection to the
    Arduino. I surrounded 2 of the 4 terminals with red and blue strokes.'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '**终端**是通常用于为电路供电的特殊总线，它们出现在蓝色和红色线路之间。通常，我们用蓝色表示地线，红色表示电压源（在某些情况下为5 V或3.3 V）。一整行的终端都有其穿孔全部相连，这样在所有面包板上就可以轻松地获得电压源和地线，而无需使用大量的连接到Arduino。我围绕了4个终端中的2个用红色和蓝色线条标出。'
- en: Breadboards provide one of the easiest ways of prototyping without soldering.
    It also means you can use and reuse your breadboards throughout the years!
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 面包板提供了一种无需焊接的简单原型制作方法。这也意味着你可以多年使用和重复使用你的面包板！
- en: What is Fritzing?
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么是Fritzing？
- en: I discovered the open source **Fritzing** project ([http://fritzing.org](http://fritzing.org))
    when I needed a tool to make my first master classes slideshows schematic around
    the Protodeck controller ([http://julienbayle.net/protodeck](http://julienbayle.net/protodeck))
    I built in 2010.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 当我需要制作关于2010年我制作的Protodeck控制器([http://julienbayle.net/protodeck](http://julienbayle.net/protodeck))的第一次大师班幻灯片原理图工具时，我发现了开源的**Fritzing**项目([http://fritzing.org](http://fritzing.org))。
- en: Fritzing is defined as *an open source initiative to support designers, artists,
    researchers and hobbyists to work creatively with interactive electronics*. It
    sounds as if it had been made for us, doesn't it?
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: Fritzing被定义为*一个开源倡议，旨在支持设计师、艺术家、研究人员和爱好者以创造性的方式与交互式电子设备一起工作*。听起来就像是为我们量身定做的，不是吗？
- en: You can find the Fritzing's latest versions at [http://fritzing.org/download/](http://fritzing.org/download/).
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[http://fritzing.org/download/](http://fritzing.org/download/)找到Fritzing的最新版本。
- en: Basically, with Fritzing, you can design and sketch electronic circuits. Because
    there are many representations of electronic circuits, this precious tool provides
    two of the classic ones and a PCB design tool too.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，使用Fritzing，你可以设计和绘制电子电路。因为电子电路有许多表示方式，这个宝贵的工具提供了两种经典的表示方式，以及一个PCB设计工具。
- en: 'Considering the first practical work we are going to do, you have to take your
    breadboard, your Arduino, and wire the lead and the resistor exactly as it is
    shown in the next screenshot:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到我们将要做的第一个实际工作，你必须拿出你的面包板、Arduino，并将引线和电阻连接得与下一张截图所示完全一致：
- en: '![What is Fritzing?](img/7584_01_008.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![什么是Fritzing?](img/7584_01_008.jpg)'
- en: The breadboard view showing our first circuit
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 显示我们第一个电路的面包板视图
- en: The *breadboard view* is the one that looks the most like what we have in front
    of us on the table. You represent all wires and you connect a virtual breadboard
    to your Arduino and directly plug components.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '**面包板视图**看起来最像我们在桌子上面前的东西。你代表所有电线，并将虚拟面包板连接到你的Arduino，并直接插入组件。'
- en: The magic lies in the fact that the schematic is automatically build while you
    are sketching in the breadboard view. And it works both ways! You can make a schematic,
    and Fritzing connect components in the breadboard view. Of course, you'd probably
    have to place the part in a more convenient or aesthetical way, but it works perfectly
    fine. Especially, the **Autorouter** helps you with making all wires more linear
    and simple.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 魔法在于，当你正在面包板视图中绘制草图时，原理图会自动构建。而且它是双向的！你可以制作一个原理图，Fritzing会在面包板视图中连接组件。当然，你可能需要将部件放置在更方便或美观的位置，但它工作得非常完美。特别是，**自动布线器**可以帮助你使所有电线更加线性简单。
- en: 'In the next screenshot, you can see the same circuit as before, but shown in
    the *schematic view*:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一张截图，你可以看到与之前相同的电路，但以*原理图视图*显示：
- en: '![What is Fritzing?](img/7584_01_009.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![什么是Fritzing?](img/7584_01_009.jpg)'
- en: The schematic view representing the circuit diagram
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 表示电路图的原理图视图
- en: There are a lot of components already designed especially for Fritzing and you
    can even create yours quite easily. The page to visit for this purpose is [http://fritzing.org/parts/](http://fritzing.org/parts/).
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 已经有许多为Fritzing特别设计的组件，你甚至可以非常容易地创建自己的组件。访问此目的的页面是[http://fritzing.org/parts/](http://fritzing.org/parts/)。
- en: The native library contains all parts required in all schematics of this book
    from all Arduino boards, to any discrete components and IC too. Indeed, all schematics
    of this book have been made using Fritzing!
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 本地库包含本书中所有Arduino板、任何离散元件和IC所需的所有部件。确实，本书的所有原理图都是使用Fritzing制作的！
- en: Now that you know how to wire things without any soldering iron, and how to
    quietly sketch and check things on your computer before you do it for real on
    your desktop, let's learn a bit about power supply.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道如何在不使用烙铁的情况下接线，以及如何在将实物连接到桌面之前，在你的电脑上安静地绘制和检查事物，让我们学习一些关于电源供应的知识。
- en: Power supply fundamentals
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 电源供应基础
- en: We learned a bit more about electricity before, but how can I supply all my
    circuits in real life?
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前学了一些关于电的知识，但如何在现实生活中为所有电路供电呢？
- en: 'Arduino boards can be supplied in three different ways:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino板可以通过三种不同的方式供电：
- en: By our computer via the USB cable (5 V is provided)
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过电脑的USB线缆（提供5 V电压）
- en: By a battery or a direct external **Power Supply Unit** (**PSU**) / Adapter
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过电池或直接的外部**电源供应单元**（**PSU**）/适配器
- en: By attaching a regulated 5 V to the +5 V pin
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过将稳压5 V连接到+5 V引脚
- en: 'The USB cable contains four cables: two for data communication purpose and
    two for power supply. Those latter are basically used to supply Arduino when you
    are connecting it to the computer via USB.'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: USB线缆包含四根线：两根用于数据通信，两根用于电源供应。后两根主要用于当你通过USB将Arduino连接到电脑时为Arduino供电。
- en: USB is a special communication bus that provides 5 V but no more than 500 mA.
    (0.5 A) It means we have to use another supply source in special projects where
    we need a lot of LED, motors, and other devices that drive a lot of current.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: USB是一种特殊的通信总线，提供5 V电压，但不超过500 mA（0.5 A）。这意味着在需要大量LED、电机和其他大量电流驱动设备的特殊项目中，我们必须使用另一个电源来源。
- en: Tip
  id: totrans-208
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**What adapter can I use with my Arduino?**'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '**我可以使用什么适配器与我的Arduino一起使用？**'
- en: 'Arduino Uno and Mega can be directly supplied by DC Adapter but this one *has*
    to respect some characteristics:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino Uno和Mega可以直接通过直流适配器供电，但这个适配器*必须*符合一些特性：
- en: The output voltage should be between 9 V and 12 V
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输出电压应在9 V到12 V之间。
- en: It should be able to drive at least 250 mA of current
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它应该能够驱动至少250 mA的电流。
- en: It must have a 2.1 mm power plug with center positive
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它必须有一个2.1毫米的电源插头，中心为正极。
- en: Usually, if you ask yourself about the fact whether to use an adapter or not,
    it means you need more current than the USB's 500 mA (Practically, ask yourself
    this question whether you need around 400 mA).
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，如果你在考虑是否使用适配器，这意味着你需要比USB的500 mA更多的电流（实际上，问自己这个问题是否需要大约400 mA）。
- en: Using USB or the 2.1 mm power plug with an adapter are the safest ways to use
    Arduino boards for many reasons. The main one is the fact that those two sources
    are (hopefully) clean, which means they deliver a regulated voltage.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 使用USB或2.1毫米电源插头加适配器是使用Arduino板最安全的方式，原因有很多。最主要的是这两个来源（希望）是干净的，这意味着它们提供的是稳压电压。
- en: 'However, you have to change something on the board if you want to use one or
    the other source: a jumper has to be moved to the right position:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你想使用其中一个来源，你必须在板上做一些更改：跳线必须移动到正确的位置：
- en: '![Power supply fundamentals](img/7584_01_015.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![电源供应基础](img/7584_01_015.jpg)'
- en: On the left, the jumper is set to USB power supply and on the right, it is set
    to external power supply
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧，跳线设置为USB电源供电，在右侧，它设置为外部电源供电。
- en: 'Usually, an idle Arduino board drains around 100 mA and, except in specified
    cases (see [Chapter 9](ch09.html "Chapter 9. Making Things Move and Creating Sounds"),
    *Making Things Move and Creating Sounds*), we''ll use the USB way of supply. This
    is what you have to do now: plug in the USB cable both in the Arduino and your
    computer.'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，一个空闲的Arduino板大约消耗100 mA的电流，除非在特定情况下（见[第9章](ch09.html "第9章. 使事物移动和创造声音")，*使事物移动和创造声音*），我们将使用USB供电方式。现在你必须这样做：将USB线缆同时插入Arduino和你的电脑。
- en: Launch the Arduino IDE too, and let's move further to the hardware *Hello World*
    of our system, I call that the *Hello LED*!
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 启动Arduino IDE，然后让我们进一步了解我们系统的硬件*Hello World*，我称之为*Hello LED*！
- en: Hello LED!
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 嘿，LED！
- en: If your Arduino doesn't contain any firmware, the LED probably does nothing.
    If you check the built-in LED on the Arduino board itself, that one should blink.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的Arduino没有固件，LED可能不会做任何事。如果你检查Arduino板上的内置LED，那个应该会闪烁。
- en: Let's take the control over our external cute LED plugged in the breadboard
    right now.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们控制一下现在插在面包板上的外部可爱LED。
- en: What do we want to do exactly?
  id: totrans-224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我们到底想做什么？
- en: If you remember correctly, this is the first question we have to ask. Of course,
    we bypassed this step a bit especially about the hardware part because I had to
    explain things while you were wiring, but let's continue the prototyping process
    explained in part by checking the code and uploading it.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你记得正确，这是我们首先要问的第一个问题。当然，我们绕过了这个步骤，特别是关于硬件的部分，因为我不得不在你接线的时候解释事情，但让我们继续通过检查代码和上传来继续原型制作过程。
- en: We want to make our LED blink. But what blink speed ? How much time? Let's say
    we want to make it blink every 250 ms with a one second pause between the blinks.
    And we want to do that infinitely.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想让我们的LED闪烁。但是闪烁速度是多少？多长时间？让我们说我们想让它在每250ms闪烁一次，闪烁之间有1秒的暂停。并且我们想无限期地这样做。
- en: If you check the schematic, you can understand that the LED is put between the
    ground, and the line to the digital output pin number 8.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你检查了电路图，你可以理解LED被放置在地线和数字输出引脚8之间。
- en: There is a resistor and you now know that it can consume a bit of energy by
    resisting to the current flowing to the LED. We can say the resistor protects
    our LED.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个电阻，你现在知道它可以通过抵抗流向LED的电流来消耗一点能量。我们可以说电阻保护了我们的LED。
- en: In order to make the LED light up, we have to create a flow of current. Sending
    +5 V to the digital output number 8 can do this. That way, there will be a potential
    difference at the two leads of the LED, driving it to be lighted. But the digital
    output shouldn't be at +5 V at each time. We have to control the moment when it
    will provide this voltage. Still okay?
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让LED发光，我们必须创建一个电流流。将+5V发送到数字输出8可以实现这一点。这样，LED的两个引脚之间将会有电位差，使其发光。但是数字输出不应该每次都处于+5V。我们必须控制它提供这种电压的时刻。还正常吗？
- en: 'Let''s summarize what we have to do:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们总结一下我们需要做什么：
- en: Put the 5 V to the digital output 8 during 250ms.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在250ms内将5V加到数字输出8上。
- en: Stop to drive the digital output 8 during 1s.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止驱动数字输出8 1秒。
- en: Restart this every time the Arduino is powered
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每次Arduino上电时都重新启动
- en: How can I do that using C code?
  id: totrans-234
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我该如何使用C代码做到这一点？
- en: If you followed the previous page correctly, you already have your Arduino board
    wired to the computer via your USB cable on one side, and wired to the breadboard
    on the other side.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正确地遵循了上一页的说明，你已经在你的Arduino板上通过USB线连接到电脑的一侧，并通过面包板连接到另一侧。
- en: Now, launch your Arduino IDE.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，启动你的Arduino IDE。
- en: Start with a new blank page
  id: totrans-237
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 从一个新的空白页面开始
- en: 'If you already tested your IDE by loading some examples, or if you already
    wrote some piece of code, you have to click on the *New icon* in order to load
    a blank page, ready to host our `Blink250ms` code:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经通过加载一些示例或编写一些代码测试了你的IDE，你必须点击**新建图标**来加载一个空白页面，准备容纳我们的`Blink250ms`代码：
- en: '![Start with a new blank page](img/7584_01_012.jpg)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![从一个新的空白页面开始](img/7584_01_012.jpg)'
- en: A nice and attractive blank page
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 一个漂亮且吸引人的空白页面
- en: Setting up the environment according the board we are using
  id: totrans-241
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 根据我们使用的板设置环境
- en: 'The IDE has to know with which board it will have to communicate. We will do
    it in the following steps:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: IDE必须知道它将使用哪个板进行通信。我们将在以下步骤中完成：
- en: Go to the **Tools** menu and choose the correct board. The first one is **Arduino
    Uno**:![Setting up the environment according the board we are using](img/7584_01_013.jpg)
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往**工具**菜单并选择正确的板。第一个是**Arduino Uno**：![根据我们使用的板设置环境](img/7584_01_013.jpg)
- en: Choose the board you are using
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 选择你正在使用的板
- en: 'Once we have done that, we have to choose the correct serial port. Go to the
    **Tools** menu again and choose the correct serial port:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们完成了这个步骤，我们就必须选择正确的串行端口。再次转到**工具**菜单并选择正确的串行端口：
- en: On OS X, the correct one begins with **/dev/tty.usbmodem** for both Uno and
    Mega 2560 and with **/dev/tty.usbserial** for older boards.
  id: totrans-246
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在OS X上，正确的端口对于Uno和Mega 2560开始于**/dev/tty.usbmodem**，对于较老的板则是**/dev/tty.usbserial**。
- en: On Windows, the correct port is usually **COM3** (**COM1** and **COM2** are
    often reserved by the operating system). By the way, it can also be **COM4**,
    **COM5**, or whatever else. To be sure, please check the device manager.
  id: totrans-247
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows上，正确的端口通常是**COM3**（**COM1**和**COM2**通常被操作系统保留）。顺便说一句，它也可以是**COM4**、**COM5**或任何其他端口。为了确保，请检查设备管理器。
- en: 'On Linux, the port is usually **/dev/ttyUSB0**:'
  id: totrans-248
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Linux上，端口通常是**/dev/ttyUSB0**：
- en: '![Setting up the environment according the board we are using](img/7584_01_014.jpg)'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![根据我们使用的板设置环境](img/7584_01_014.jpg)'
- en: Choose the serial port corresponding to your board
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 选择与你的板对应的串行端口
- en: Now, our IDE can talk to our board. Let's push the code now.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的IDE可以与我们的板通信。让我们现在推送代码。
- en: Let's write the code
  id: totrans-252
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 让我们编写代码
- en: 'The following is the complete code. You can find it in the zip file in the
    `Chapter01/Blink250ms/` folder:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为完整代码。你可以在`Chapter01/Blink250ms/`文件夹中的zip文件中找到它：
- en: Tip
  id: totrans-254
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从你购买的所有Packt书籍的账户中下载示例代码文件。[http://www.packtpub.com](http://www.packtpub.com)。如果你在其他地方购买了这本书，你可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便将文件直接通过电子邮件发送给你。
- en: '[PRE0]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Let's comment it a bit. Indeed, we'll learn how to code our own C code in the
    next chapter, then I'll only describe this one and give you some small tips.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们给它加一点注释。确实，我们将在下一章学习如何编写自己的C代码，然后我将只描述这个，并给你一些小贴士。
- en: First, everything between `/*` and `*/`, and everything after `//` are just
    comments. The first form is used for comments more than one line at a time, and
    the other one is for one line commenting only. You can write any comments like
    that and they won't be considered by the compiler at all. I strongly advice you
    to comment your code; this is another key to succeed.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，所有在`/*`和`*/`之间的内容，以及所有在`//`之后的内容，都只是注释。第一种形式用于一次注释多行，而另一种形式用于单行注释。你可以写任何这样的注释，并且它们不会被编译器考虑。我强烈建议你注释你的代码；这是成功的另一个关键。
- en: 'Then, the first part of the code contains one variable declaration and initialization:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，代码的第一部分包含一个变量声明和初始化：
- en: '[PRE1]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, we can see two particular structures between curly braces:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以在花括号之间看到两个特定的结构：
- en: '[PRE2]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The first one (`setup()`) is a function that is executed only one time when
    the Arduino board is started (or reseted); this is the place where we are telling
    the board that the pin where the LED is connected is an output, that is, this
    pin will have to drive current while activated.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个（`setup()`）是一个函数，当Arduino板启动（或重置）时只执行一次；这是我们告诉板子连接LED的引脚是输出引脚的地方，也就是说，当激活时，这个引脚将必须驱动电流。
- en: The second one (`loop()`) is a function executed infinitely when the Arduino
    board is supplied. This is the main part of our code in which we can find the
    steps we wanted to light up the LED for 250 ms and switch off the LED for 1 s,
    repeatedly.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个（`loop()`）是一个函数，当Arduino板供电时无限执行。这是我们代码的主要部分，其中我们可以找到我们想要点亮LED 250毫秒并关闭LED
    1秒的步骤，重复进行。
- en: Let's upload the code, at last!
  id: totrans-266
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 最后，让我们上传代码！
- en: If you correctly followed and manipulated the hardware and the IDE as explained
    before, we are now ready to upload the code on the board.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正确地按照之前解释的方式操作了硬件和IDE，我们现在已经准备好将代码上传到板上。
- en: Just click on the Upload button in the IDE. You'll see the TX and RX LEDs blinking
    a bit and … your LED on your breadboard should blink as expected. This is our
    very first *HELLO LED!* example and I hope you liked it.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 只需在IDE中点击上传按钮。你会看到TX和RX LED灯微微闪烁……你的面包板上的LED灯应该按照预期闪烁。这是我们非常第一个 *HELLO LED!*
    示例，希望你喜欢。
- en: 'If you want to tweak the code a bit, you can replace the following line:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要稍微调整一下代码，你可以替换以下行：
- en: '[PRE3]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'With the following line, for instance:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，用以下行：
- en: '[PRE4]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now upload this new code again and see what happens.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 现在再次上传这段新代码，看看会发生什么。
- en: Summary
  id: totrans-274
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter itself, we learnt a bit about Arduino and microcontrollers,
    and about electricity too. That will help us in the next chapters in which we
    will talk a lot about circuits.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了一些关于Arduino和微控制器，以及关于电的知识。这将在我们将在下一章中大量讨论电路的章节中帮助我们。
- en: We also installed the IDE that we will use every time while programming Arduino
    boards and we even tested the first piece of code. We are now able to continue
    our travel by learning more about the C language itself.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还安装了我们将每次编程Arduino板时都会使用的IDE，甚至测试了第一段代码。我们现在可以通过学习更多关于C语言本身的内容来继续我们的旅程。
