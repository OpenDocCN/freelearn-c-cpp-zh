["```cpp\nclass Enemy  \n{ \n  public: \n    void GetHealth(void) const; \n    void SetHealth(int); \n  private: \n    int currentHealth; \n    int maxHealth; \n};\n\n```", "```cpp\nclass FlyingEnemy: public Enemy \n{ \n  public: \n    void Fly(void); \n  private: \n    int flySpeed; \n};\n\n```", "```cpp\nclass CombatEncounter \n{ \n  public: \n    void AddEnemy(Enemy* pEnemy); \n  private: \n    std::list<Enemy*> enemies; \n\n};\n\n```", "```cpp\nclass AttackSkill \n{ \n  public: \n    void UseAttack(void);  \n  private: \n    int damage; \n    float cooldown; \n}; \n\nclass Enemy  \n{ \n  public: \n    void GetHealth(void) const; \n    void SetHealth(int); \n  private: \n    int         currentHealth; \n    int         maxHealth; \n    AttackSkill skill1; \n    AttackSkill skill2; \n    AttackSkill skill3; \n    AttackSkill skill4; \n};\n\n```", "```cpp\nclass Animal \n{ \n  public: \n    virtual void Speak(void) const //virtual in the base class \n    { \n      //Using the Mach 5 console print \n      M5DEBUG_PRINT(\"...\\n\"); \n    } \n};\n\n```", "```cpp\nclass Cat: public Animal \n  { \n  public: \n    void Speak(void) const //overridden in the derived class \n  { \n  M5DEBUG_PRINT(\"Meow\\n\"); \n  } \n\nvoid Purr(void) const //unrelated function \n  { \n    M5DEBUG_PRINT(\"*purr*\\n\"); \n  } \n}; \nclass Dog: public Animal \n  { \n    public: \n    void Speak(void) const //overridden in the derived class \n    { \n      M5DEBUG_PRINT(\"Woof\\n\"); \n    } \n};\n\n```", "```cpp\nvoid SomeFunction(void) \n{ \n  const int SIZE = 2; \n  Cat cat; \n  Dog dog; \n  Animal* animals[SIZE] = {&cat, &dog}; \n\n  for(int i = 0; i < SIZE; ++i) \n  { \n    animals[i]->Speak(); \n  } \n}\n\n```", "```cpp\nMeow \nWoof\n\n```", "```cpp\nclass Enemy \n{ \n  public: \n    virtual ~Enemy(void) {/*Empty virtual destructor*/} \n    virtual void DisplayInfo(void) = 0; \n    virtual void Attack(void)      = 0; \n    virtual void Move(void)        = 0; \n}; \n\nclass FakeEnemy: public Enemy \n{ \n  public: \n  virtual void DisplayInfo(void) \n  { \n    M5DEBUG_PRINT(\"I am a FAKE enemy\"); \n  } \n\n  virtual void Attack(void) \n    { \n      M5DEBUG_PRINT(\"I cannot attack\"); \n    } \n\n  virtual void Move(void) \n  { \n    M5DEBUG_PRINT(\"I cannot move\"); \n  } \n};\n\n```"]