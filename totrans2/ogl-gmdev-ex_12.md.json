["```cpp\nglu32.lib;opengl32.lib;SOIL.lib;\n```", "```cpp\n#include <windows.h>\n#include <stdio.h>\n#include \"glut.h\"\n#include \"SOIL.h\"\n\nconst int screenWidth = 1024;\nconst int screenHeight = 768;\n\n// Global Variables:\nHINSTANCE hInstance = NULL;\nHDC hDC = NULL;\nHGLRC hRC = NULL;\nHWND hWnd = NULL;\n\nbool fullscreen = false;\n\n// Forward declarations of functions included in this code module:\nLRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);\n```", "```cpp\nvoid StartGame()\n{\n}\nvoid Update(const float p_deltaTime)\n{\n}\n\nvoid Enable2D()\n{\n  glColor3f(1.0f, 1.0f, 1.0f);\n  glEnable(GL_TEXTURE_2D);\n\n  glMatrixMode(GL_PROJECTION);\n  glPushMatrix();\n  glLoadIdentity();\n  glOrtho(0, screenWidth, screenHeight, 0, 0, 1);\n\n  glMatrixMode(GL_MODELVIEW);\n  glPushMatrix();\n  glLoadIdentity();\n\n  glPushAttrib(GL_DEPTH_BUFFER_BIT);\n  glDisable(GL_DEPTH_TEST);\n}\n\nvoid Disable2D()\n{\n  glPopAttrib();\n\n  glMatrixMode(GL_PROJECTION);\n  glPopMatrix();\n\n  glMatrixMode(GL_MODELVIEW);\n  glPopMatrix();\n\n  glDisable(GL_TEXTURE_2D);\n}\n\nvoid Render2D()\n{\n  Enable2D();\n  //Add your 2D rendering here\n  Disable2D();\n}\n\nvoid Render3D()\n{\n  //Add your 3D rendering here\n}\n\nvoid Render()\n{\n  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n  Render3D();\n  Render2D();\n  SwapBuffers(hDC);\n}\nvoid EndGame()\n{\n}\n\nvoid GameLoop(const float p_deltatTime)\n{\n  Update(p_deltatTime);\n  Render();\n}\n```", "```cpp\nvoid LoadTexture(const char* filepath, GLsizei height, GLsizei width, unsigned int colordepth, GLuint &texture)\n{\n  unsigned char* data;\n  FILE* file;\n\n  file = fopen(filepath, \"r\");\n  data = (unsigned char*)malloc(width * height * colordepth);\n  fread(data, width * height * colordepth, 1, file);\n  fclose(file);\n\n  texture = SOIL_load_OGL_texture(filepath, SOIL_LOAD_AUTO, SOIL_CREATE_NEW_ID, 0);\n  glBindTexture(GL_TEXTURE_2D, texture);\n  glTexImage2D(GL_TEXTURE_2D, 0, colordepth == 3 ? GL_RGB:GL_RGBA, width, height, 0, colordepth == 3 ? GL_RGB:GL_RGBA, GL_UNSIGNED_BYTE, data);\n  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);\n  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);\n  free(data);\n}\n```", "```cpp\nGLuint texMarble;\n```", "```cpp\nLoadTexture(\"resources/marble.bmp\", 256, 256, 4, texMarble);\n```", "```cpp\nfloat xrot = 1.0f;\nfloat yrot = 1.0f;\nfloat zrot = 1.0f;\n```", "```cpp\nint DrawTexturedCube(GLvoid)\n{\n  glEnable(GL_TEXTURE_2D);\n\n  glLoadIdentity();\n  glTranslatef(0.0f, 0.0f, -5.0f);\n\n  glRotatef(xrot, 1.0f, 0.0f, 0.0f);\n  glRotatef(yrot, 0.0f, 1.0f, 0.0f);\n  glRotatef(zrot, 0.0f, 0.0f, 1.0f);\n\n  glBindTexture(GL_TEXTURE_2D, texMarble);\n\n  glBegin(GL_QUADS);\n  // Font Face\n  glTexCoord2f(0.0f, 0.0f); glVertex3f(-1.0f, -1.0f, 1.0f);\n  glTexCoord2f(1.0f, 0.0f); glVertex3f(1.0f, -1.0f, 1.0f);\n  glTexCoord2f(1.0f, 1.0f); glVertex3f(1.0f, 1.0f, 1.0f);\n  glTexCoord2f(0.0f, 1.0f); glVertex3f(-1.0f, 1.0f, 1.0f);\n  // Back Face\n  glTexCoord2f(1.0f, 0.0f); glVertex3f(-1.0f, -1.0f, -1.0f);\n  glTexCoord2f(1.0f, 1.0f); glVertex3f(-1.0f, 1.0f, -1.0f);\n  glTexCoord2f(0.0f, 1.0f); glVertex3f(1.0f, 1.0f, -1.0f);\n  glTexCoord2f(0.0f, 0.0f); glVertex3f(1.0f, -1.0f, -1.0f);\n  // Top Face\n  glTexCoord2f(0.0f, 1.0f); glVertex3f(-1.0f, 1.0f, -1.0f);\n  glTexCoord2f(0.0f, 0.0f); glVertex3f(-1.0f, 1.0f, 1.0f);\n  glTexCoord2f(1.0f, 0.0f); glVertex3f(1.0f, 1.0f, 1.0f);\n  glTexCoord2f(1.0f, 1.0f); glVertex3f(1.0f, 1.0f, -1.0f);\n  // Bottom Face\n  glTexCoord2f(1.0f, 1.0f); glVertex3f(-1.0f, -1.0f, -1.0f);\n  glTexCoord2f(0.0f, 1.0f); glVertex3f(1.0f, -1.0f, -1.0f);\n  glTexCoord2f(0.0f, 0.0f); glVertex3f(1.0f, -1.0f, 1.0f);\n  glTexCoord2f(1.0f, 0.0f); glVertex3f(-1.0f, -1.0f, 1.0f);\n  // Right face\n  glTexCoord2f(1.0f, 0.0f); glVertex3f(1.0f, -1.0f, -1.0f);\n  glTexCoord2f(1.0f, 1.0f); glVertex3f(1.0f, 1.0f, -1.0f);\n  glTexCoord2f(0.0f, 1.0f); glVertex3f(1.0f, 1.0f, 1.0f);\n  glTexCoord2f(0.0f, 0.0f); glVertex3f(1.0f, -1.0f, 1.0f);\n  // Left Face\n  glTexCoord2f(0.0f, 0.0f); glVertex3f(-1.0f, -1.0f, -1.0f);\n  glTexCoord2f(1.0f, 0.0f); glVertex3f(-1.0f, -1.0f, 1.0f);\n  glTexCoord2f(1.0f, 1.0f); glVertex3f(-1.0f, 1.0f, 1.0f);\n  glTexCoord2f(0.0f, 1.0f); glVertex3f(-1.0f, 1.0f, -1.0f);\n  glEnd();\n\n  xrot += 0.01f;\n  yrot += 0.02f;\n  zrot += 0.03f;\n  return TRUE;\n}\n```", "```cpp\n    DrawTexturedCube();\n    ```", "```cpp\nglTexCoord2f(0.0f, 0.0f); glVertex3f(-1.0f, -1.0f, 1.0f);\nglTexCoord2f(1.0f, 0.0f); glVertex3f(1.0f, -1.0f, 1.0f);\nglTexCoord2f(1.0f, 1.0f); glVertex3f(1.0f, 1.0f, 1.0f);\nglTexCoord2f(0.0f, 1.0f); glVertex3f(-1.0f, 1.0f, 1.0f);\n```", "```cpp\nglEnable(GL_LIGHTING);\nGLfloat ambientLight[] = { 0.0f, 0.0f, 1.0f, 1.0f };\nglLightModelfv(GL_LIGHT_MODEL_AMBIENT, ambientLight);\nglEnable(GL_COLOR_MATERIAL);\nglColorMaterial(GL_FRONT, GL_AMBIENT);\n```"]