- en: Chapter 10. Interacting with the User
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will learn how to receive and respond to input from the
    user. The following recipes will be covered in the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an interactive object that responds to the mouse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding mouse events to our interactive object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a slider
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a responsive text box
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dragging, scaling, and rotating objects using multi-touch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we will create graphical objects that react to the user using
    both mouse and touch interaction. We will learn how to create simple graphical
    interfaces that have their own events for greater flexibility.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an interactive object that responds to the mouse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we will create an `InteractiveObject` class for making graphical
    objects that interact with the mouse cursor and executes the following actions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Action | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Pressed | The user pressed the mouse button while over the object. |'
  prefs: []
  type: TYPE_TB
- en: '| Pressed outside | The user pressed the mouse button while outside the object.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Released | The mouse button is released after being pressed over the object
    and is still over the object. |'
  prefs: []
  type: TYPE_TB
- en: '| Released outside | The mouse button is released outside the object. |'
  prefs: []
  type: TYPE_TB
- en: '| Rolled over | The cursor moves over the object. |'
  prefs: []
  type: TYPE_TB
- en: '| Rolled out | The cursor moves out of the object. |'
  prefs: []
  type: TYPE_TB
- en: '| Dragged | The cursor is dragged while being over the object and after having
    pressed the object. |'
  prefs: []
  type: TYPE_TB
- en: For each of the previous actions, a virtual method will be called, and it would
    change the color of the object been drawn.
  prefs: []
  type: TYPE_NORMAL
- en: This object can be used as a base class to create interactive objects with more
    interesting graphics, such as textures.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create and add the following files to your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '`InteractiveObject.h`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`InteractiveObject.cpp`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the source file with your application class, include the `InteractiveObject.h`
    file and add the following `using` statements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will create an `InteractiveObject` class and make it responsive to mouse
    events.
  prefs: []
  type: TYPE_NORMAL
- en: 'Move to the file `InteractiveObject.h` and add the `#pragma once` directive
    and include the following files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare the class `InteractiveObject`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Move on to the `InteractiveObject.cpp` file, and let''s begin by including
    the `InteractiveObject.h` file and adding the following `using` statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Let's begin by implementing `constructor` and `destructor`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `InteractiveObject::draw` method we will draw the rectangle using the
    appropriate colors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `pressed`, `released`, `rolledOver`, `rolledOut`, and `dragged` methods
    we will simply output to the console on which the action just happened:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the mouse event handlers we will check if the cursor is inside the object
    and update the `mPressed` and `mOver` variables accordingly. Every time the action
    is detected, we will also call the correspondent method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With our `InteractiveObject` class ready, let's move to our application's class
    source file. Let's begin by declaring an `InteractiveObject` object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `setup` method we will initialize `mObject`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We will need to declare the mouse event handlers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the implementation of the previous methods we will simply call the corresponding
    method of `mObject`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the implementation of the `draw` method, we will clear the background with
    black and call the `draw` method of `mObject`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now build and run the application. Use the mouse to interact with the object.
    Whenever you press, release, or roll over or out of the object, a message will
    be sent to the console indicating the behavior.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `InteractiveObject` class is to be used as a base class for interactive
    objects. The methods `pressed`, `released`, `rolledOver`, `rolledOut`, and `dragged`
    are specifically designed to be overridden.
  prefs: []
  type: TYPE_NORMAL
- en: The mouse handlers of `InteractiveObject` call the previous methods whenever
    an action is detected. By overriding the methods, it is possible to implement
    specific behavior.
  prefs: []
  type: TYPE_NORMAL
- en: The virtual `destructor` is declared so that extending classes can have their
    own `destructor`.
  prefs: []
  type: TYPE_NORMAL
- en: Adding mouse events to our interactive object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will continue with the previous recipe, *Creating an interactive
    object that responds to the mouse* and add the mouse events to our `InteractiveObject`
    class so that other objects can register and receive notifications whenever a
    mouse event occurs.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Grab the code from the recipe *Creating an interactive object that responds
    to the mouse* and add it to your project, as we will continue on from what was
    made earlier.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will make our `InteractiveObject` class and send its own events whenever
    it interacts with the cursor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a class to use as an argument when sending events. Add the following
    code in the file `InteractiveObject.h` right before the `InteractiveObject` class
    declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `InteractiveObject` class, we will need to declare a member to manage
    the registered objects using the `ci::CallbakcMgr` class. Declare the following
    code as a protected member:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we will need to add a method so that other objects can register to receive
    events. Since the method will use a template, we will declare and implement it
    in the `InteraciveObject.h` file. Add the following member method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s also create a method so that objects can unregister from receiving further
    events. Declare the following method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s implement the `removeListener` method. Add the following code in the
    `InteractiveObject.cpp` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the methods `mouseDown`, `mouseUp`, `mouseDrag`, and `mouseMove` so
    that `mEvents` gets called whenever an event occurs. The implementation of these
    methods should be as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With our `InteractiveObject` class ready, we need to register our application
    class to receive its events. In your application class declaration add the following
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Let's implement the `receivedEvent` method. We will check what type of event
    has been received and print a message to the console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'All that is left is to register for the events. In the `setup` method add the
    following code after `mObject` has been initialized:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now build and run the application and use the mouse to interact with the rectangle
    on the window. Whenever a mouse event occurs on `mObject`, our method, `receivedEvent`,
    will be called.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are using the template class `ci::CallbakMgr` to manage our event listeners.
    This class takes a template with the signature of the methods that can be registered.
    In our previous code, we declared `mEvents` to be of type `ci::CallbakcMgr<void(InteractiveObjectEvent)>;`
    it means that only methods that return `void` and receive `InteractiveObejctEvent`
    as a parameter can be registered.
  prefs: []
  type: TYPE_NORMAL
- en: The template method `registerEvent` will take an object pointer and method pointer.
    These are bound to `std::function` using `std::bind1st` and added to `mEvents`.
    The method will return `ci::CallbackId` with the identification of the listener.
    The `ci::CallbackId` can be used to unregister listeners.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `InteractiveObject` class is very useful for creating user interfaces.
    If we want to create a `Button` class using three textures (for displaying when
    pressed, over, and idle), we can do so as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Include the `InteractiveObject.h` and `cinder/gl/texture.h` files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare the following class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Creating a slider
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will learn how to create a slider UI element by extending
    the `InteractiveObject` class mentioned in the *Creating an interactive object
    that responds to the mouse* recipe of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a slider](img/8703OS_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please refer to the *Creating an interactive object that responds to the mouse*
    recipe to find the `InteractiveObject` class headers and source code.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will create a `Slider` class and show you how to use it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a new header file named `Slider.h` to your project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the source file of your main application class, include the previously
    created header file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the new properties to your main class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the `setup` method do the initialization of the `slider` objects:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code for drawing sliders inside your `draw` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We created the `Slider` class by inheriting and overriding the `InteractiveObject`
    methods and properties. In step 1, we extended it with methods for controlling
    the position and dimensions of the `slider` object. The methods `getValue` and
    `setValue` can be used to retrieve or set the actual state of `slider`, which
    can vary from `0` to `1`.
  prefs: []
  type: TYPE_NORMAL
- en: In step 4, you can find the initialization of example sliders by setting the
    initial position, size, and value just after creating the `Slider` object. We
    are drawing example sliders along with captions and information about current
    state.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The recipe *Creating interactive object that responds to the mouse.*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The recipe *Dragging scaling, and rotating objects using multi-touch*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a responsive text box
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will learn how to create a text box that responds to the user's
    keystrokes. It will be active when pressed over by the mouse and inactive when
    the mouse is released outside the box.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Grab the following files from the recipe *Creating an interactive object that
    responds to the mouse* and add them to your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '`InteractiveObject.h`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`InteractiveObject.cpp`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create and add the following files to your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '`InteractiveTextBox.h`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`InteractiveTextBox.cpp`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will create an `InteractiveTextBox` class that inherits from `InteractiveObject`
    and adds text functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Go to the file `InteractiveTextBox.h` and add the `#pragma once` macro and include
    the necessary files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now declare the `InteractiveTextBox` class, making it a subclass of `InteractiveObject`
    with the following members and methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now go to `InteractiveTextBox.cpp` and include the `InteractiveTextBox.h` file
    and add the following `using` statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now let's implement the constructor by initializing the parent class and setting
    up the internal `ci::TextBox`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `InteractiveTextBox::draw` method we will set the background color of
    `mTextBox` depending if it is active or not. We will also render `mTextBox` into
    `ci::gl::Texture` and draw it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now let's implement the overridden methods `pressed` and `releasedOutside` to
    define the value of `mActive`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally, we need to implement the `keyPressed` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If `mActive` is false this method will simply return. Otherwise, we will remove
    the last letter of `mText` if the key released was the *Backspace* key, or, add
    the corresponding letter if any other key was pressed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now move to your application class source file and include the following file
    and the `using` statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In your application class declare the following member:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s initialize `mTextBox` in the `setup` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `draw` method we will clear the background with black, enable `AlphaBlending`,
    and draw our `mTextBox`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We now need to declare the following mouse event handlers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And implement them by calling the respective mouse event handler of `mTextBox`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we just need to do the same with the key released event handler. Start
    by declaring it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: And in it's implementation we will call the `keyUp` method of `mTextBox`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now build and run the application. You will see a white textbox with the phrase
    **Write some text**. Press the text box and write some text. Click outside the
    text box to set the textbox as inactive.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Internally, our `InteractiveTextBox` uses a `ci::TextBox` object. This class
    manages the text inside a box with a specified width and height. We take advantage
    of that and update the text according to the keys that the user presses.
  prefs: []
  type: TYPE_NORMAL
- en: Dragging, scaling, and rotating objects using multi-touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to create objects responsible to multi-touch
    gestures, such as dragging, scaling, or rotating by extending the `InteractiveObject`
    class mentioned in the *Creating an interactive object that responds to the mouse*
    recipe of this chapter. We are going to build an iOS application that uses iOS
    device multi-touch capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: '![Dragging, scaling, and rotating objects using multi-touch](img/8703OS_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please refer to the *Creating an interactive object that responds to the mouse*
    recipe to find the `InteractiveObject` class headers and source code and *Creating
    a project for an iOS touch application recipe from* [Chapter 1](ch01.html "Chapter 1. Getting
    Started").
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will create an iPhone application with sample objects that can be dragged,
    scaled, or rotated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a new header file named `TouchInteractiveObject.h` to your project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new source file named `TouchInteractiveObject.cpp` to your project and
    include the previously created header file by adding the following code line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement the constructor of `TouchInteractiveObject`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement the handlers for touch events:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, implement the basic `draw` method for `TouchInteractiveObjects`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is the class, which inherits all the features of `TouchInteractiveObject`,
    but overrides the `draw` method and, in this case, we want our interactive object
    to be a circle. Add the following class definition to your main source file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now take a look at your main application class file. Include the necessary
    header files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `typedef` declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add members to your application class to handle the objects:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the `setup` method initialize the objects:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `draw` method is simple and looks as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As you can see in the `setup` method we are using the function `getRandPos`,
    which returns a random position in screen boundaries with some margin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We created the `TouchInteractiveObject` class by inheriting and overriding the
    `InteractiveObject` methods and properties. We also extended it with methods for
    controlling position and dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: In step 3, we are initializing properties and registering callbacks for touch
    events. The next step is to implement these callbacks. On the `touchesBegan` event,
    we are checking if the object is touched by any of the new touches, but all the
    calculations of movements and gestures happen during `touchesMoved` event.
  prefs: []
  type: TYPE_NORMAL
- en: In step 6, you can see how simple it is to change the appearance and keep all
    the interactive capabilities of `TouchInteractiveObject` by overriding the `draw`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: There is more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can notice an issue that you are dragging multiple objects while they are
    overlapping. To solve that problem, we will add a simple object activation manager.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a new class definition to your Cinder application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new member to your application''s main class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At the end of the `setup` method initialize `mObjMgr`, which is the object''s
    manager, and add the previously initialized interactive objects:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `update` method to your main class as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add two new methods to the `TouchInteractiveObject` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
