["```cpp\n#include <windows.h>\n#include <gl\\GL.h>\n#include <gl\\GLU.h>\n#include \"glut.h\"\n```", "```cpp\nHINSTANCE hInstance = NULL;\nHDC hDC = NULL;\nHGLRC hRC = NULL;\nHWND hWnd = NULL;\nbool fullscreen = false;\n```", "```cpp\nLRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);\n```", "```cpp\nvoid ReSizeGLScene(const GLsizei p_width, const GLsizei p_height)\n{\n  GLsizei h = p_height;\n  GLsizei w = p_width;\n  if (h == 0)\n  {\n    h = 1;\n  }\n  glViewport(0, 0, w, h);\n\n  glMatrixMode(GL_PROJECTION);\n  glLoadIdentity();\n  gluPerspective(45.0f, (GLfloat)w / (GLfloat)h, 0.1f, 100.0f);\n\n  glMatrixMode(GL_MODELVIEW);\n  glLoadIdentity();\n}\n```", "```cpp\nconst bool InitGL()\n{\n  glShadeModel(GL_SMOOTH);\n  glClearColor(0.0f, 0.0f, 0.0f, 0.0f);\n  glClearDepth(1.0f);\n  glEnable(GL_DEPTH_TEST);\n  glDepthFunc(GL_LEQUAL);\n  glHint(GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST);\n  return true;\n}\n```", "```cpp\nGLvoid KillGLWindow(GLvoid)\n{\n  if (fullscreen)\n  {\n    ChangeDisplaySettings(NULL, 0);\n    ShowCursor(TRUE);\n  }\n  if (hRC)\n  {\n    wglMakeCurrent(NULL, NULL);\n    wglDeleteContext(hRC);\n    hRC = NULL;\n  }\n  if (hDC)\n  {\n    ReleaseDC(hWnd, hDC)\n    hDC = NULL;\n  }\n\n  if (hWnd)\n  {\n    DestroyWindow(hWnd);\n    hWnd = NULL;\n  }\n  UnregisterClass(\"OpenGL\", hInstance)\n  hInstance = NULL;\n}\n```", "```cpp\nconst bool CreateGLWindow(const char* p_title, const int p_width, const int p_height, const int p_bits, const bool p_fullscreenflag)\n{\n  GLuint  PixelFormat;\n  WNDCLASS wc;\n  DWORD  dwExStyle;\n  DWORD  dwStyle;\n  RECT  WindowRect;\n  WindowRect.left = (long)0;\n  WindowRect.right = (long)p_width;\n  WindowRect.top = (long)0;\n  WindowRect.bottom = (long)p_height;\n\n  fullscreen = p_fullscreenflag;\n  GLfloat screen_height = (GLfloat)p_height;\n  GLfloat screen_width = (GLfloat)p_width;\n\n  hInstance = GetModuleHandle(NULL);\n  wc.style = CS_HREDRAW | CS_VREDRAW | CS_OWNDC;\n  wc.lpfnWndProc = (WNDPROC)WndProc;\n  wc.cbClsExtra = 0;\n  wc.cbWndExtra = 0;\n  wc.hInstance = hInstance;\n  wc.hIcon = LoadIcon(NULL, IDI_WINLOGO);\n  wc.hCursor = LoadCursor(NULL, IDC_ARROW);\n  wc.hbrBackground = NULL;\n  wc.lpszMenuName = NULL;\n  wc.lpszClassName = \"OpenGL\";\n\n  RegisterClass(&wc);\n\n  if (fullscreen)\n  {\n    DEVMODE dmScreenSettings;\n    memset(&dmScreenSettings, 0, sizeof(dmScreenSettings));\n    dmScreenSettings.dmSize = sizeof(dmScreenSettings);\n    dmScreenSettings.dmPelsWidth = p_width;\n    dmScreenSettings.dmPelsHeight = p_height;\n    dmScreenSettings.dmBitsPerPel = p_bits;\n    dmScreenSettings.dmFields = DM_BITSPERPEL | DM_PELSWIDTH | DM_PELSHEIGHT;\n\n    ChangeDisplaySettings(&dmScreenSettings, CDS_FULLSCREEN);\n  }\n\n  if (fullscreen)\n  {\n    dwExStyle = WS_EX_APPWINDOW;\n    dwStyle = WS_POPUP;\n    ShowCursor(false);\n  }\n  else\n  {\n    dwExStyle = WS_EX_APPWINDOW | WS_EX_WINDOWEDGE;\n    dwStyle = WS_OVERLAPPEDWINDOW;\n  }\n\n  AdjustWindowRectEx(&WindowRect, dwStyle, FALSE, dwExStyle);\n\n  hWnd = CreateWindowEx(dwExStyle,\"OpenGL\", p_title,\n  dwStyle | WS_CLIPSIBLINGS | WS_CLIPCHILDREN,\n  0, 0, WindowRect.right - WindowRect.left, WindowRect.bottom - WindowRect.top,\n  NULL, NULL, hInstance, NULL);\n\n  static PIXELFORMATDESCRIPTOR pfd =\n  {\n    sizeof(PIXELFORMATDESCRIPTOR),\n    1,\n    PFD_DRAW_TO_WINDOW | PFD_SUPPORT_OPENGL | PFD_DOUBLEBUFFER,\n    PFD_TYPE_RGBA, p_bits,\n    0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0,\n    16, 0, 0,\n    PFD_MAIN_PLANE,\n    0, 0, 0, 0\n  };\n\n  hDC = GetDC(hWnd);\n  PixelFormat = ChoosePixelFormat(hDC, &pfd);\n  SetPixelFormat(hDC, PixelFormat, &pfd);\n  hRC = wglCreateContext(hDC);\n  wglMakeCurrent(hDC, hRC);\n  ShowWindow(hWnd, SW_SHOW);\n  SetForegroundWindow(hWnd);\n  SetFocus(hWnd);\n  ReSizeGLScene(p_width, p_height);\n  InitGL();\n  return true;\n}\n```", "```cpp\nint APIENTRY WinMain(_In_ HINSTANCE hInstance,\n_In_opt_ HINSTANCE hPrevInstance,\n_In_ LPTSTR    lpCmdLine,\n_In_ int       nCmdShow)\n{\n  MSG msg;\n  bool done = false;\n  if (!CreateGLWindow(\"SpaceRacer3D\", 800, 600, 16, false))\n  {\n    return false;\n  }\n  StartGame();\n  int previousTime = glutGet(GLUT_ELAPSED_TIME);\n  while (!done)\n  {\n    if (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE))\n    {\n      if (msg.message == WM_QUIT)\n      {\n        done = true;\n      }\n      else\n      {\n        TranslateMessage(&msg);\n        DispatchMessage(&msg);\n      }\n    }\n    else\n    {\n      int currentTime = glutGet(GLUT_ELAPSED_TIME);\n      float deltaTime = (float)(currentTime - previousTime) / 1000;\n      previousTime = currentTime;\n      GameLoop(deltaTime);\n    }\n  }\n  EndGame();\n  return (int)msg.wParam;\n}\n```", "```cpp\nLRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)\n{\n  switch (message)\n  {\n    case WM_DESTROY:\n    PostQuitMessage(0);\n    break;\n    case WM_SIZE:\n    ReSizeGLScene(LOWORD(lParam), HIWORD(lParam));\n    return 0;\n    default:\n    return DefWindowProc(hWnd, message, wParam, lParam);\n  }\n  return false;\n}\n```", "```cpp\nvoid StartGame()\n{\n\n}\n\nvoid Update(const float p_deltaTime)\n{\n}\n\nvoid Render()\n{\n  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n  glMatrixMode(GL_MODELVIEW);\n  glLoadIdentity();\n  DrawCube();\n  SwapBuffers(hDC);\n}\n\nvoid EndGame()\n{\n}\n\nvoid GameLoop(const float p_deltatTime)\n{\n  Update(p_deltatTime);\n  Render();\n}\n```", "```cpp\nvoid DrawCube()\n{\n  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n  glTranslatef(0.0f, 0.0f, -7.0f);\n  glRotatef(fRotate, 1.0f, 1.0f, 1.0f);\n  glBegin(GL_QUADS);\n  glColor3f(0.0f, 1.0f, 0.0f);\n  glVertex3f(1.0f, 1.0f, -1.0f); glVertex3f(-1.0f, 1.0f, -1.0f);\n  glVertex3f(-1.0f, 1.0f, 1.0f); glVertex3f(1.0f, 1.0f, 1.0f);\n  glColor3f(1.0f, 0.5f, 0.0f);\n  glVertex3f(1.0f, -1.0f, 1.0f); glVertex3f(-1.0f, -1.0f, 1.0f);\n  glVertex3f(-1.0f, -1.0f, -1.0f); glVertex3f(1.0f, -1.0f, -1.0f);\n  glColor3f(1.0f, 0.0f, 0.0f);\n  glVertex3f(1.0f, 1.0f, 1.0f); glVertex3f(-1.0f, 1.0f, 1.0f);\n  glVertex3f(-1.0f, -1.0f, 1.0f); glVertex3f(1.0f, -1.0f, 1.0f);\n  glColor3f(1.0f, 1.0f, 0.0f);\n  glVertex3f(1.0f, -1.0f, -1.0f); glVertex3f(-1.0f, -1.0f, -1.0f);\n  glVertex3f(-1.0f, 1.0f, -1.0f); glVertex3f(1.0f, 1.0f, -1.0f);\n  glColor3f(0.0f, 0.0f, 1.0f);\n  glVertex3f(-1.0f, 1.0f, 1.0f); glVertex3f(-1.0f, 1.0f, -1.0f);\n  glVertex3f(-1.0f, -1.0f, -1.0f); glVertex3f(-1.0f, -1.0f, 1.0f);\n  glColor3f(1.0f, 0.0f, 1.0f);\n  glVertex3f(1.0f, 1.0f, -1.0f); glVertex3f(1.0f, 1.0f, 1.0f);\n  glVertex3f(1.0f, -1.0f, 1.0f); glVertex3f(1.0f, -1.0f, -1.0f);\n  glEnd();\n  fRotate -= 0.05f;\n\n}\n```", "```cpp\nfloat frotate = 1.0f;\n```"]