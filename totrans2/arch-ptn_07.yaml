- en: Service-Oriented Architecture (SOA)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务导向架构（SOA）
- en: You might have wondered about many websites having different kinds of dashboards
    showing distinct yet relevant contents, and how in this world it is possible to
    combine a weather report and stock market quotes in one display.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想知道许多网站有不同类型的仪表板，显示不同但相关的内容，以及在这个世界上如何将天气预报和股市报价结合在一个显示中。
- en: Weather reports and stock quotes are functionally different systems; one is
    the meteorological area and the other one is the national stock exchange, yet
    they can be combined and shown in a single dashboard.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 天气预报和股票报价在功能上是不同的系统；一个是气象领域，另一个是国家证券交易所，但它们可以结合并在单个仪表板上显示。
- en: So, if we need to define what a web service is, then a*ny reusable, custom-developed
    software code that lets heterogeneous applications talk to each other and disparate
    systems get integrated in a cost-effective manner* could be our definition.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们需要定义什么是网络服务，那么任何可重用、定制开发的软件代码，它能让异构应用程序相互通信，并使不同的系统以经济有效的方式集成，都可以是我们的定义。
- en: We can design a software system that integrates disparate data sources and different
    ecosystems that can evolve and mature over time in a better and cost-effective
    way by adopting fundamental SOA principles and characteristics in every service
    design.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在每个服务设计中采用基本的SOA原则和特性，我们可以设计一个软件系统，该系统可以整合不同的数据源和不同的生态系统，这些系统可以在时间上更好地发展和成熟，并且成本效益更高。
- en: 'In this chapter, we will cover the following topics as part of SOA:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将作为SOA的一部分介绍以下主题：
- en: Web services and SOA
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络服务和SOA
- en: Introduction to SOA
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SOA简介
- en: Life cycle of SOA
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SOA生命周期
- en: Primary characteristics of SOA
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SOA的主要特性
- en: Principles of SOA
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SOA原则
- en: SOA design patterns
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SOA设计模式
- en: Web services and SOA
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络服务和SOA
- en: The first step for any web service design is to start with strict adherence
    to SOA characteristics and principles. Basic building blocks and stepping stones
    for any web service design are the SOA architecture patterns.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 任何网络服务设计的第一步是从严格遵守SOA特性和原则开始。任何网络服务设计的基本构建块和垫脚石是SOA架构模式。
- en: SOA is the most favorable and proven architectural design style that helps to
    solve a few key problems within modern software systems to handle ever-changing
    user expectations efficiently.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: SOA（服务导向架构）是最受欢迎且经过验证的架构设计风格，它有助于高效地解决现代软件系统在处理不断变化用户期望时的一些关键问题。
- en: '![](img/92c193f0-e544-4cc0-8ef5-ff6e73da500b.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/92c193f0-e544-4cc0-8ef5-ff6e73da500b.png)'
- en: Recently, in many real-time cloud applications, SOA has become the foundation
    of cloud efforts, and a lot of convergence with the private and public cloud as
    well. Certainly, SOA is playing a significant role in the background with virtualization,
    event processing, business process management, and much more in real-world applications.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，在许多实时云应用中，SOA已成为云努力的基础，并且与私有云和公共云有很多融合。当然，SOA在现实世界的应用中，在虚拟化、事件处理、业务流程管理等方面发挥着重要作用。
- en: Introduction to SOA
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SOA简介
- en: SOA is an architectural style of services and not a technology or any programming
    language. It defines standards and ways to design and develop a service.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: SOA是一种服务架构风格，而不是一种技术或任何编程语言。它定义了设计和开发服务的标准和方式。
- en: Service is the logical representation of repeatable business activities* that
    have a specified outcome. It is self-contained, Provides guidelines to combine
    a service with other services. It is also an abstract or black box to the consumer
    who consumes it.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 服务是具有特定结果的重复性业务活动的逻辑表示。它是自包含的，为将服务与其他服务结合提供指导。它也是消费者消费它的一个抽象或黑盒。
- en: '*The following are a few examples of business activities with specific outcomes:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*以下是一些具有特定结果的业务活动示例：'
- en: Get city's weather report
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取城市的天气预报
- en: Get stock quote of given stock code
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取指定股票代码的股票报价
- en: Get hotel booking details by booking ID
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过预订ID获取酒店预订详情
- en: Get user profile information for given user ID
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取指定用户ID的用户配置信息
- en: In short, SOA is essentially a collection of services, and those services communicate
    with each other, and a service is an operation or a function that is well-defined,
    self-contained, and independent of other service contexts and states.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，SOA本质上是一组服务，这些服务相互通信，而一个服务是一个定义良好、自包含且独立于其他服务上下文和状态的操作或功能。
- en: Life cycle of SOA
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SOA生命周期
- en: Let's first touch upon the life cycle of SOA, and briefly discuss each stage
    in the life cycle, before we get into the characteristics of SOA.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们讨论 SOA 的特征之前，让我们首先简要谈谈 SOA 的生命周期，并简要讨论生命周期中的每个阶段。
- en: '![](img/0ae4fd2a-c71b-4e3a-862a-fe0ac8dc7d09.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0ae4fd2a-c71b-4e3a-862a-fe0ac8dc7d09.png)'
- en: Any services are discoverable by having a clear set of communication standards
    such as WSDL, SOAP, REST, and so on, and therefore they are picked up for consumption.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 任何服务都可以通过具有清晰通信标准（如 WSDL、SOAP、REST 等）的方式被发现，因此它们被选中用于消费。
- en: Service design is the next critical item in which we need to find a proper pattern
    and deliver services as model-driven, business function-specific, testable in
    isolation, and so on, and the most common patterns are discussed in detail later
    in this chapter.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 服务设计是我们接下来需要找到合适模式并按模型驱动、特定业务功能、可独立测试等方式提供服务的下一个关键项目，本章后面将详细讨论最常见的模式。
- en: For any business or organization, after the functional design phase, it is important
    to have services that are developed, deployed, and consumed. However, unlike waterfall
    methodology (customer waits until all the components are developed), it is better
    if the service development and deployment happen in an iterative and agile fashion,
    so customers meet ROI in short-term.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何企业或组织，在功能设计阶段之后，拥有开发、部署和消费的服务非常重要。然而，与瀑布方法（客户等待所有组件开发完成）不同，如果服务开发和部署以迭代和敏捷的方式进行，那么客户可以更快地实现投资回报率。
- en: Governance and feedback are crucial for any evolving service, as they play a
    critical role in service adoption and help businesses to achieve ROI as soon as
    possible.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何不断发展的服务，治理和反馈至关重要，因为它们在服务采用中扮演着关键角色，并帮助企业在尽可能短的时间内实现投资回报率。
- en: Primary characteristics of SOA
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SOA 的主要特征
- en: Any functional system or component that is SOA-based has its unique characteristics.
    However, in this section, we will cover fundamental elements that are uncompromising
    in any SOA-based designs.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 任何基于 SOA 的功能系统或组件都有其独特的特征。然而，在本节中，我们将涵盖在基于 SOA 的设计中不容妥协的基本元素。
- en: Service interconnectivity with well-defined interfaces
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 具有明确定义接口的服务互连性
- en: Interoperability or interconnectivity between the two involving systems is a
    critical aspect of SOA. To achieve interoperability, architects should analyze
    the system deeper and come up with a greater level of detail so that they can
    define well-defined interfaces. Those interfaces in SOA embody interaction points
    between the system and its boundaries, which should be standardized, explicit,
    behavior predictable, scalable, and sustainable.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 两个涉及系统之间的互操作性或互连性是 SOA 的一个关键方面。为了实现互操作性，架构师应该更深入地分析系统，并提出更详细的方案，以便他们可以定义明确定义的接口。SOA
    中的这些接口体现了系统及其边界之间的交互点，这些点应该是标准化的、明确的、行为可预测的、可扩展的和可持续的。
- en: Standard interfaces and Service level agreements
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标准接口和服务水平协议
- en: The interfaces should be well-thought and standardized. The response of a weather
    report can evolve faster without any changes in the client's request (payload).
    In the weather forecast web service, the city name can be a key element; however,
    the city can have different climatic conditions within the city, and to get precise
    weather conditions, the interface needs longitude and latitude along with the
    city name.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 接口应该经过深思熟虑并标准化。即使客户端请求（有效载荷）没有变化，天气预报的响应也可以更快地演变。在天气预报网络服务中，城市名称可以是一个关键元素；然而，城市内部可能存在不同的气候条件，为了获得精确的天气状况，接口需要经度和纬度以及城市名称。
- en: Event-driven and messaging
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件驱动和消息传递
- en: Loose coupling is one of the essential primary characteristics of SOA, and it
    can be easily achieved by having event-driven and messaging as part of a service's
    design. The services that we design should represent a business function or domain
    and consider an application that needs to send an email to the user immediately
    after booking a hotel and assume we have a hotel booking service that can book
    a hotel and send a confirmation email to the user. As per the business functions,
    we can have two different services; one that takes care of the hotel booking,
    and another one that takes care of the post-booking process such as email, mobile
    confirmations, and so on. The email service can receive events from the booking
    service, or it can listen for any messages from other systems, depending on its
    event-driven design or message-driven design.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 松散耦合是SOA的基本首要特性之一，可以通过将事件驱动和消息作为服务设计的一部分来轻松实现。我们设计的应该代表一个业务功能或领域，并考虑一个需要在用户预订酒店后立即发送电子邮件的应用程序。假设我们有一个可以预订酒店并向用户发送确认电子邮件的酒店预订服务。根据业务功能，我们可以有两个不同的服务；一个负责酒店预订，另一个负责预订后的过程，如电子邮件、手机确认等。电子邮件服务可以接收预订服务的事件，或者根据其事件驱动设计或消息驱动设计来监听来自其他系统的任何消息。
- en: Flexible
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 灵活
- en: Repeatable and Reusable is another essential characteristic of SOA, so services
    should be flexible with fewer constraints in the policies and accomplish reusability
    and repeatability with no impact on the clients who are already consuming the
    services. In these situations, designers would get concerns about service optimizations
    and performance improvements. However, the flexibility should be given preference
    over optimizations.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 可重复和可重用是SOA的另一个基本特性，因此服务应该具有较少的政策约束，以实现可重用性和可重复性，同时不对已经使用服务的客户端产生影响。在这些情况下，设计者可能会对服务优化和性能改进表示担忧。然而，灵活性应该比优化更受重视。
- en: Let’s get some insights about flexibility. Consider a client (consumer) access
    a weather report for a given city by its name, there are chances that the given
    city can respond with more than one results (City’s airport, downtown and so on),
    so potentially the results can be more than one. In that situation how do we design
    a payload to respond with only one row, maybe the request payload should have
    a placeholder to accept longitude and latitude as seen in the below XML snippet
    and so the response of the service shows only one result, not many?
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解一下灵活性的见解。考虑一个客户端（消费者）通过城市名称访问给定城市的天气预报，给定城市可能响应多个结果（城市的机场、市中心等），因此潜在的结果可能不止一个。在这种情况下，我们如何设计有效载荷以只响应一行，也许请求有效载荷应该有一个占位符来接受经纬度，如以下XML片段所示，因此服务的响应只显示一个结果，而不是多个？
- en: '![](img/46a4567d-e530-4700-b173-f6b7f1c0ab2c.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/46a4567d-e530-4700-b173-f6b7f1c0ab2c.png)'
- en: In another scenario, assume the consumer wanted to search weather conditions
    for a city called Dover, which is a duplicate name across the world (more than
    50 cities name is Dover around the world), so to find unique Dover, the payload
    should also have the flexibility to mention State and Country or Zip code.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一个场景中，假设消费者想要搜索名为多佛的城市的天气条件，多佛是一个在世界各地重复的城市名称（世界上有超过50个城市的名称是多佛），因此为了找到独特的多佛，有效载荷也应该具有灵活性，可以提及州和国家或邮编。
- en: To achieve flexibility, one should not hard-wire any elements in the client
    payloads that are prone to change, and also evaluate alternate approaches that
    yield advantages and greater flexibility for the services and its’ centralized
    functions.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现灵活性，不应在客户端有效载荷中硬编码任何容易变化的元素，还应评估产生优势并提高服务和其集中式功能的灵活性的替代方法。
- en: How do we justify flexibility over service optimization? If we consider the
    service need to respond with weather conditions for the city name Dover, there
    may be multiple calls involved; one to find a list of cities by name Dover, the
    second one to call specific Dover with intended State, and Country or Zip code.
    So expected results for the consumer is vital than reducing the number of calls
    to the services. So in this kind of situations, considering the flexibility over
    optimization is a better approach.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何证明在服务优化上的灵活性是合理的？如果我们考虑服务需要响应城市名称多佛的天气条件，可能涉及多个调用；一个用于查找名为多佛的城市列表，第二个用于调用具有特定州、国家或邮编的具体多佛。因此，对于消费者来说，预期的结果比减少对服务的调用次数更为重要。所以在这种情况下，考虑灵活性而非优化是一种更好的方法。
- en: Evolution
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进化
- en: The beauty of software product development is that *any software product can
    be given for consumption once it reaches the minimum viable stage in real quick
    while product development keeps introducing more and more features*.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 软件产品开发的美丽之处在于，*任何软件产品都可以在达到实际可行的最低阶段后迅速投入使用，而产品开发持续引入更多和更多的功能*。
- en: This seamless feature usage may not be possible in other major industries. For
    instance, in the automobile sector, we may not have the luxury of releasing the
    product before its completion in all the aspects. As we cannot manufacture wheels
    or engines and start using them, we have to wait until it comes out as a car and
    is quality certified.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这种无缝的功能使用在其他主要行业中可能不可行。例如，在汽车行业，我们可能无法在所有方面完成产品后再发布产品。因为我们不能制造轮子或引擎并开始使用它们，我们必须等到它作为一个汽车出来并且经过质量认证。
- en: In software development, it is so beautiful that we can create financial systems
    with just a few features for a customer to use, while we keep developing and deploying
    new features into production so that more and more functionalities can be consumed
    by the customers seamlessly. SOA designs can create a perfect example of software
    and system evolution.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件开发中，它非常美丽，我们可以为顾客创建仅包含几个功能的财务系统，同时我们继续开发和部署新功能到生产中，以便客户可以无缝地消费更多和更多的功能。SOA设计可以创建软件和系统演变的完美示例。
- en: '![](img/d4c4f824-06d6-4099-a881-df76cea0dcd9.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d4c4f824-06d6-4099-a881-df76cea0dcd9.png)'
- en: Let's pick our same weather report example; the services can start by accepting
    a city name and zip code, later enhanced with longitude and latitude, then with
    IP addresses, and then the location from where it is searched, with not just current
    weather details, but with hourly, daily, and weekly forecasts. In our introduction
    section, we mentioned that *to handle the ever-changing and high demand of user
    expectations very effectively,* services should be evolved and flexible in order
    to manage the demands and not force the client to modify their way of consuming
    services.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以相同的天气预报为例；服务可以从接受城市名称和邮政编码开始，后来增强为经纬度，然后是IP地址，然后是搜索的位置，不仅包括当前的天气详情，还包括每小时、每天和每周的预报。在我们介绍部分，我们提到，为了非常有效地*处理不断变化和用户期望的高需求*，服务应该具有演变和灵活性，以便管理需求，而不是强迫客户改变他们使用服务的方式。
- en: 'Other common characteristics of evolution are as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 进化的其他常见特征如下：
- en: Services are transport independent
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务是传输无关的
- en: Services are software platform independent
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务是软件平台无关的
- en: Choreography versus orchestration of services
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务的编排与编排
- en: Explicit calls
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显式调用
- en: Services represent a business function or domain
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务代表一个业务功能或领域
- en: Location of services are transparent, discoverable, and support introspection
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务的位置是透明的、可发现的，并支持自省
- en: However, we are not covering all of those in detail, and we encourage readers
    to refer to other materials on all these design principles for more detailed discussions.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们并没有详细涵盖所有这些内容，我们鼓励读者参考其他关于所有这些设计原则的材料，以获得更详细的讨论。
- en: Many authors and references point out that service orientation can be related
    to the separation of concern principles, and that is true as long as it does not
    share the states between the entities and maintains the atomicity of the services.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 许多作者和参考资料指出，服务导向可以与关注点分离原则相关联，这是正确的，只要它不共享实体之间的状态并保持服务的原子性。
- en: One must have faced challenges implementing these practices especially with
    legacy, non-service based monolithic systems. They may be still consumable and
    making money. However, they are not scalable and incurs high maintenance. So how
    can we change those legacy systems into independent, scalable, high-performance
    services?; It can be done by following SOA principles, practices and with suitable
    SOA patterns. So let us learn deeper and get insights into SOA principles and
    Patterns in the following sections.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一个人必须面临实施这些实践时的挑战，特别是与遗留的、非服务基础的单一系统。它们可能仍然可消费并赚钱。然而，它们不可扩展且维护成本高。那么我们如何将这些遗留系统转变为独立、可扩展、高性能的服务呢？可以通过遵循SOA原则、实践和合适的SOA模式来实现。因此，让我们在接下来的章节中深入学习并深入了解SOA原则和模式。
- en: Principles of SOA
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SOA 原则
- en: Though there are no specifications or standards that are comprehensive of SOA
    principles, we can define some tenets as a core principle of SOA that helps to
    realize all the characteristics of SOA. Adherence to these principles is evident
    to stand up any service and for its consumptions.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然没有全面涵盖SOA原则的规范或标准，但我们可以定义一些原则作为SOA的核心原则，这些原则有助于实现SOA的所有特性。遵守这些原则是建立任何服务和其消费的基础。
- en: We will touch upon those principles rather briefly in this section, and in addition
    to that, there is a handy matrix that depicts relationships of the SOA life cycle,
    characteristics, and principles at the end of this chapter.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本节中简要介绍这些原则，并且在本章末尾还有一个实用的矩阵，展示了SOA生命周期、特性和原则之间的关系。
- en: Standardized service contract
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标准化服务合同
- en: Standardization is a fundamental principle of any SOA. Services exhibit their
    functions and their capabilities through a service contract, forcing the SOA designer
    to focus on service granularity, data types to be exposed, purposes of services,
    service optimization, service versions to be exposed, service endpoints, and more,
    of all service standardizations. **Service level agreement** (**SLA**) for any
    services are established with this principle to provide clear vision and direction
    of consumptions, governance, security, versioning, requests, and responses. Standardization
    ensures, service contracts are well defined and way the path for rest o f the
    principles and leads to more and more service consumptions.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 标准化是任何SOA的基本原则。服务通过服务合同展示其功能和能力，迫使SOA设计者关注服务粒度、要公开的数据类型、服务目的、服务优化、要公开的服务版本、服务端点以及所有服务标准化的各个方面。任何服务的**服务级别协议**（**SLA**）都是基于这一原则建立的，以提供清晰的消费、治理、安全、版本、请求和响应的视野和方向。标准化确保服务合同定义良好，并为其他原则的路径铺平道路，从而促进越来越多的服务消费。
- en: Service interoperability
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务互操作性
- en: Interoperability is another important principle of SOA. The ability to share
    information between services is interoperability, and it helps applications to
    realize efficient communications across distributed services on various software
    platforms. Interoperability applies on different levels such as operational (business
    process), informational, and technical architecture stages that determine how
    systems can communicate with each other at each level.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 互操作性是SOA的另一个重要原则。服务之间共享信息的能力是互操作性，它有助于应用程序在分布式服务之间实现高效的通信，这些服务位于各种软件平台上。互操作性适用于不同的层面，如操作（业务流程）、信息和技术架构阶段，这些阶段决定了系统如何在每个层面上相互通信。
- en: Service abstraction
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务抽象
- en: Providing a simplified view of services by hiding internal details (complexity)
    helps better explain the function and operation of services, helps the consumer
    to focus on the core business logic of the services, and protects internal implementations
    from unintentional changes. Abstractions can be applied at every level from language
    implementation to the service level. Earlier in this chapter, the stock quote
    services talked only about getting quotes of a given stock ID and nothing else,
    it does not say how it interacts with details of the company that the customer
    asked for, neither how it connects to the stock exchange's dynamic data, nor how
    new business details get added to the system. What they all need to know as a
    consumer of a service is whether the service can pick the quote for their favorite
    company, not how you get it.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 通过隐藏内部细节（复杂性）来提供服务的简化视图有助于更好地解释服务的功能和操作，帮助消费者关注服务的核心业务逻辑，并保护内部实现免受意外变更的影响。抽象可以在从语言实现到服务级别的每个层面应用。在本章的早期部分，股票报价服务仅讨论了获取给定股票ID的报价，没有提及它如何与客户请求的公司细节互动，也没有提及它如何连接到证券交易所的动态数据，以及如何将新的业务细节添加到系统中。作为服务的消费者，他们需要知道的是服务是否能够选择他们喜欢的公司的报价，而不是如何获取它。
- en: Service autonomy
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务自治
- en: Autonomy is a way of achieving isolations of a service's executions from its
    shared resources, and releasing the services with no impact on the client who
    is already using the earlier version of the service. Services can be developed,
    versioned, tested, and deployed, while consumers continue to use previous versions
    or seamless changes to the service that they consume, and this brings enormous
    benefit to the customers.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 自主性是一种将服务的执行与其共享资源隔离的方式，并且发布服务时不对已使用服务早期版本的客户端造成影响。服务可以被开发、版本化、测试和部署，同时消费者可以继续使用之前版本的服务或无缝的服务变更，这对客户带来了巨大的好处。
- en: Service composability
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务可组合性
- en: Services are useful composition participants regardless of size and complexity
    of the composition. Services can be the orchestrator of different other services,
    and that orchestrator service adheres all the SOA characteristics.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是组合的大小和复杂性如何，服务都是有用的组合参与者。服务可以是其他不同服务的编排者，而这个编排服务遵循所有SOA特性。
- en: Service compositions are often applied to legacy software applications to avoid
    the risk of retrofit; applying customized solutions and continuous operation of
    the production by retaining the existing software solutions.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 服务组合通常应用于遗留软件应用中，以避免返工的风险；通过保留现有的软件解决方案，应用定制化解决方案和持续的生产运营。
- en: If you observe this principle, it warrants a separation of concern to be exercised.
    In the life cycle of services, we understand clearly that the services evolve
    with more and more functionalities. With applying loose coupling as well as service
    reusability, it is inevitable that we need to keep providing more and more additional
    requirements or solve more and more problems for the customer. Recall the point
    of our evolution characteristic, and this principle is related to evolution.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遵循这一原则，就需要进行关注点的分离。在服务的生命周期中，我们清楚地认识到服务会随着更多功能的增加而演进。应用松耦合以及服务重用性，我们不可避免地需要为顾客提供越来越多的附加要求或解决越来越多的问题。回顾我们的演进特性，这一原则与演进相关。
- en: Service discoverability
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务可发现性
- en: Services lose their purpose if they are not exposed or published to internal
    or external entities. Services are rated by their usage and by the number of customers
    using the service, regardless of its consumption by external or internal customers.
    It is challenging to find the available services even within internal teams, but
    with utmost care and effort, we can bring best practices on discoverability. Standardization
    of services also helps to achieve better discoverability.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务没有向内部或外部实体公开或发布，那么它们就失去了其目的。无论外部或内部客户是否消费，服务都是根据其使用情况和使用该服务的客户数量来评估的。即使在内部团队中找到可用的服务也存在挑战，但通过极大的关注和努力，我们可以引入最佳实践以实现可发现性。服务的标准化也有助于实现更好的可发现性。
- en: If the services are not exposed or published to internal or external entities,
    then they have lost their purpose. Services evaluated by their usage and number
    of customers using the service could be internal or external. Challenges still
    exist in finding the available services to consume even within internal teams,
    and utmost care and effort to bring best practices to ensure this principle is
    followed is the key so that the services evolve and the organization keeps getting
    its ROI iteratively.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务没有向内部或外部实体公开或发布，那么它们就失去了其目的。根据使用情况和使用该服务的客户数量评估的服务可以是内部的或外部的。即使在内部团队中，找到可消费的服务仍然存在挑战，但通过极大的关注和努力，我们可以引入最佳实践以确保遵循这一原则，从而使服务演进，组织持续获得其投资回报。
- en: Service loose coupling
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务松耦合
- en: Loose coupling is one of the core design principles that help the services to
    realize automaticity, test in isolation, and so service can evolve with no impact
    on the service functionalities. This principle intends to apply various aspects
    of loose coupling at different levels, and it may vary according to the application
    contexts as well.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 松耦合是帮助服务实现自动化、独立测试以及服务功能不受影响而演进的核心设计原则之一。这一原则旨在在不同层面上应用松耦合的各个方面，并且根据应用环境的不同可能会有所变化。
- en: Let's take our email service as an example. The booking service sends a notification
    to the email service once it completes the hotel reservation, and regardless of
    the email server status (it may be even down, but the booking service doesn’t
    need to wait until the email servers come up). So, the email service can decide
    when to send an email; it may be during off-peak hours, there may be different
    scheduled times, maybe once the email server is up and running after its scheduled
    maintenance, perhaps resending the failed deliveries, and so on.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以我们的电子邮件服务为例。预订服务在完成酒店预订后向电子邮件服务发送通知，无论电子邮件服务器状态如何（它甚至可能已经关闭，但预订服务不需要等待电子邮件服务器启动）。因此，电子邮件服务可以决定何时发送电子邮件；它可能是在非高峰时段，可能有不同的预定时间，也许是在电子邮件服务器完成其预定维护后开始运行，可能是重新发送失败的投递，等等。
- en: So, the design of email services handles the loose coupling principles as in
    this context, it is most elegant and preferable. Most of us would agree that it
    is not always in all the designs and at all the levels that we can bring this
    principle, as it may not help the business functions. For instance, in the email
    service and booking service, the booking and email services can be independent
    and loosely coupled; the email service is dependent on the email server and applying
    the loose coupling principle is not feasible. Our other service that provides
    the weather report is dependent on the location service, and in this context,
    coupling may be an acceptable design.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，电子邮件服务的架构处理了松耦合原则，在这种情境下，这是最优雅且最可取的。我们大多数人都会同意，并不是在所有设计和所有层面上我们都能应用这一原则，因为它可能不会帮助业务功能。例如，在电子邮件服务和预订服务中，预订和电子邮件服务可以是独立的且松耦合的；电子邮件服务依赖于电子邮件服务器，应用松耦合原则是不可行的。我们提供的其他服务，如天气报告服务，依赖于位置服务，在这种情况下，耦合可能是一个可接受的设计。
- en: Service reusability
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务可重用性
- en: Service reusability is one of the core principles and brings a realization of
    flexible and evolution characteristics of services-oriented architecture. The
    design aspects should consider a set of business functions or logic that can be
    made available without duplicating the code to numerous internal or external clients.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 服务可重用性是核心原则之一，实现了面向服务的架构的灵活性和进化特性。设计方面应考虑一组业务功能或逻辑，可以在不复制代码到多个内部或外部客户端的情况下提供。
- en: Reuse is a strong OO principle, and it is imperative in the service level as
    well. With agnostic functional contexts, the services are resources, and so can
    be reused at maximum level; more the reuse, more the ROI.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 重用是强类型的面向对象原则，在服务级别也是必不可少的。具有无知的函数上下文，服务是资源，因此可以在最大程度上重用；重用越多，回报率越高。
- en: In our examples, location services, email services, weather report services,
    and stock quote services are all reusable and logical separations of business
    functions.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，位置服务、电子邮件服务、天气报告服务和股票报价服务都是可重用和业务功能的逻辑分离。
- en: Service statelessness
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务无状态
- en: Services should be stateless as much as they can. Statelessness is another important
    principle that helps services to lower the consumption of resources, test in isolation,
    and reusability. To implement statelessness in the email service, it needs all
    the necessary information explicitly for sending emails, and so it does not need
    to pick up additional information from a database or any other resources as its
    focus is on the business logic of setting up schedules to send emails. The schema
    can have more details (message, email IDs, subject) explicitly, rather that just
    booking ID, and make an email service to pick up additional information from the
    database for that booking ID.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 服务应该尽可能地无状态。无状态是另一个重要的原则，有助于服务降低资源消耗、独立测试和可重用性。为了在电子邮件服务中实现无状态，它需要发送电子邮件所需的所有必要信息，因此它不需要从数据库或其他资源中获取额外信息，因为它的重点是设置发送电子邮件的调度业务逻辑。模式可以包含更多详细信息（消息、电子邮件ID、主题），而不是仅仅预订ID，并让电子邮件服务为该预订ID从数据库中获取额外信息。
- en: SOA design patterns
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SOA设计模式
- en: In the current software design world, we already have time-tested software solutions
    for specific recurring problems. Best practices and the way that software design
    solves the repeatable problems in a quick and cost-effective manner creates reusable
    patterns over time, and it is a rule of thumb that we should be able to pick up
    and use the right ones for our design problems.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前的软件设计世界中，我们已经有了针对特定重复问题的经过时间考验的软件解决方案。最佳实践以及软件设计以快速且经济有效的方式解决可重复问题，随着时间的推移形成了可重用的模式，这是一个经验法则，我们应该能够挑选并使用适合我们设计问题的正确模式。
- en: SOA deals with a number of design patterns, and numerous materials discuss each
    one in depth. We would like to touch upon a few of the most important ones that
    real-time software solutions often require.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: SOA处理许多设计模式，许多材料都深入讨论了每一个。我们想简要提及一些实时软件解决方案通常需要的重要模式。
- en: 'We will deal with the following patterns in this chapter:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将处理以下模式：
- en: Service messaging
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务消息传递
- en: Message screening
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息筛选
- en: Agnostic services
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不可知服务
- en: Atomic service transaction
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原子服务事务
- en: Authentication broker
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 认证代理
- en: Message origin authentication
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息来源认证
- en: Service façade
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务外观
- en: Multiple service contracts
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多个服务合约
- en: Service callback
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务回调
- en: Event-driven messaging
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件驱动消息传递
- en: Service refactor
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务重构
- en: Metadata centralization
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元数据集中化
- en: Service messaging
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务消息传递
- en: Service messaging provides a communication platform through which messages are
    transmitted and routed as independent units. It brings the efficient execution
    of loosely coupled service interactions and data exchanges.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 服务消息传递提供了一个通信平台，通过该平台，消息作为独立的单元进行传输和路由。它带来了松散耦合的服务交互和数据交换的高效执行。
- en: Off the shelf, **message-oriented middleware** (**MOM**) queues are the best
    example of service messaging. MOM queues can have a single sender or receiver
    or multiple senders and receivers, and some applications even require to use of
    multiple Queues will help in decoupling discreet and distinct components of a
    system.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现成的、**面向消息的中间件**（**MOM**）队列是服务消息传递的最佳例子。MOM队列可以有一个发送者或接收者，或者多个发送者和接收者，某些应用程序甚至需要使用多个队列来帮助解耦系统的离散和不同的组件。
- en: Most SOA implementations use MOM queues, and it is hard to find an SOA-compliant
    system without a messaging system.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数SOA实现使用MOM队列，很难找到一个没有消息系统的SOA兼容系统。
- en: 'The benefits of service messaging are as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 服务消息传递的好处如下：
- en: A service messaging pattern in your design makes your design solution a best
    fit and elegant for any clients who want to communicate to services asynchronously
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的设计中采用服务消息传递模式，使你的设计解决方案最适合任何希望异步与服务通信的客户端
- en: It is an implementation of loose coupling and one of the core principles of
    SOA
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是一种松耦合的实现，也是SOA的核心原则之一
- en: 'With service messaging, the following are made easy and elegant:'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过服务消息传递，以下内容变得简单且优雅：
- en: Fail-safe and loop back in services
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务的容错和回环
- en: Versioning of services
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务版本控制
- en: Record, defer, and replay
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录、延迟和重放
- en: Multiplexed messages
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复用消息
- en: Best fit for concurrency models as immutable messages are thread safe
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最适合并发模型，因为不可变消息是线程安全的
- en: 'The impacts of service messaging are as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 服务消息传递的影响如下：
- en: Asynchronous communications lead to reliability concerns in some cases, unlike
    the services that receive the client response immediately
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与立即接收客户端响应的服务不同，异步通信在某些情况下会导致可靠性问题
- en: As service messaging involves Asynchronous communication to other systems, there
    may be a need to engage further systems that manage and supports the service process
    and executions (more systems to be operated and maintained).
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于服务消息涉及与其他系统的异步通信，可能需要进一步参与管理和支持服务过程和执行的系统（需要操作和维护更多的系统）。
- en: Need to rely more on messaging systems (dependency on messaging systems)
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要更多地依赖消息系统（对消息系统的依赖）
- en: Message screening
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消息筛选
- en: 'The services are susceptible to injection attacks: injecting malicious data
    into services that leads to undesirable behavior. The services can prevent any
    harmful message content by screening data when it is received at the server side,
    even before the service uses it.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 服务容易受到注入攻击：将恶意数据注入服务中，导致不希望的行为。服务可以在服务器端接收到数据时，甚至在服务使用之前，通过筛选数据来防止任何有害的消息内容。
- en: '![](img/35dcd842-ea67-4b37-a0e4-86d8781d2b5c.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/35dcd842-ea67-4b37-a0e4-86d8781d2b5c.png)'
- en: The services should assume that all input messages it receives are harmful,
    and therefore all those messages should undergo various checks to find any presence
    of malicious content and protect the services from any harmful content.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 服务应假定它接收到的所有输入消息都是有害的，因此所有这些消息都应该经过各种检查，以发现任何恶意内容的迹象，并保护服务免受任何有害内容的影响。
- en: 'The benefits of message screening are as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 消息筛选的好处如下：
- en: Eliminates different types of injection attacks
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消除不同类型的注入攻击
- en: Prevents resource exhaustion due to injection attacks
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防止注入攻击导致的资源耗尽
- en: Service is protected from malicious content even before its consumption
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务在消费之前就受到恶意内容的保护
- en: Service validates messages regardless of whether the client validated it or
    not
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无论客户端是否验证，服务都会验证消息
- en: 'The impacts of message screening are as follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 消息筛选的影响如下：
- en: Screening logic for each message incurs additional runtime
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为每条消息的筛选逻辑会带来额外的运行时开销
- en: Processing binary messages or binary attachments needs to have specialized logic
    for screening
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理二进制消息或二进制附件需要专门的逻辑进行筛选
- en: It is hard or even impossible to find and limit all potentially harmful content
    by message screening
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过消息筛选找到并限制所有潜在的有害内容很困难，甚至不可能
- en: Agnostic services
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不可知服务
- en: Consider various functions of financial banking such as account management,
    life insurance, lending or loan management, wealth management, and so on. Each
    service might need to share the abilities of other services, rather having them
    as duplicated rather then reused.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑金融银行的各种功能，如账户管理、人寿保险、贷款或贷款管理、财富管理等。每个服务可能需要共享其他服务的功能，而不是重复使用它们。
- en: '![](img/03992ab2-9672-4259-a999-9257264bc5d3.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/03992ab2-9672-4259-a999-9257264bc5d3.png)'
- en: Consider a home loan management service that needs to know the savings account
    details of the borrower, other retail lending information for credit reports,
    and mortgage information from property management. So, those capabilities are
    common concerns for any lending service that can be defined and used by not only
    the home loan systems but by any other major system such as credit cards, life
    insurance products, account management services, investment management services,
    and so on.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个需要了解借款人储蓄账户详情、其他零售贷款信息用于信用报告以及物业管理抵押信息的住房贷款管理服务。因此，这些能力是任何贷款服务共同关心的问题，不仅可以由住房贷款系统定义和使用，还可以由任何其他主要系统，如信用卡、人寿保险产品、账户管理服务、投资管理服务等定义和使用。
- en: Implementing business logic for a set of well-defined capabilities that address
    major common concerns and are certainly not specific to one problem but common
    to multiple business problems, are called agnostic services.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 为一组定义良好且解决主要共同问题的能力实现业务逻辑，这些能力不仅不特定于一个问题，而是多个业务问题的共同点，被称为不可知服务。
- en: The separation of agnostic business logic or capabilities into discrete services
    helps enterprises with service reuse and composability.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 将不可知业务逻辑或能力分离成独立的服务有助于企业实现服务重用和可组合性。
- en: '![](img/a3070aff-0ca8-49c8-a78a-9b5a5f6a9466.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a3070aff-0ca8-49c8-a78a-9b5a5f6a9466.png)'
- en: As the preceding example depicts, having the services explicitly state that
    they are agnostic helps the imminent consumers and designers to reuse the existing
    agnostic services.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如前例所示，服务明确声明它们是不可知的，有助于未来的消费者和设计人员重用现有的不可知服务。
- en: 'The benefits of agnostic services are as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 不可知服务的好处如下：
- en: Exercising service reusability and composability
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 练习服务的重用性和可组合性
- en: Consumers benefit from iterative refinements of service capabilities beyond
    initial service definitions
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消费者从服务能力的迭代改进中受益，这些能力超出了初始服务定义
- en: Enables multi-purpose capabilities, and those would be the most preferred conventional
    capabilities
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许多用途功能，这些将是首选的传统功能
- en: 'The impacts of agnostic services are as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 不可知服务的影响如下：
- en: Improvement of a service's abilities through its advantages of preliminary analysis
    takes a lot of time and considerations, and more iterations are needed for development
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过初步分析的优势提高服务能力需要大量的时间和考虑，并且需要更多的迭代来开发
- en: Arriving at a universal consensus on service functions might be challenging
    as business functions of services might be too vague or too generic
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在服务功能上达成普遍共识可能具有挑战性，因为服务的业务功能可能过于模糊或过于通用。
- en: Need more design planning and considerations, as agnostic services design push
    us to consider many design parts those are not necessarily need to be deliberated
    for short-term or mid-term delivery, and so may lead us to end up in missing delivery
    commitments
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要更多的设计规划和考虑，因为无差别服务设计迫使我们考虑许多设计部分，这些部分在短期或中期交付中不一定需要仔细考虑，因此可能会导致我们最终无法履行交付承诺。
- en: Atomic service transaction
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 原子服务事务
- en: The rollback of operations is so important in a distributed environment. When
    any one of the runtime activities that span across multiple services fails, then
    all the transactions that have happened so far should be rolled back, otherwise
    the distributed services may compromise the integrity of the software solution.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在分布式环境中，操作的回滚非常重要。当跨越多个服务的任何运行时活动失败时，迄今为止发生的所有事务都应该回滚，否则分布式服务可能会损害软件解决方案的完整性。
- en: '![](img/76eb961b-ed15-4fe3-9672-c19cef2e2200.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/76eb961b-ed15-4fe3-9672-c19cef2e2200.png)'
- en: In a typical online savings account transaction, the banking system would have
    withdrawal and deposit services, and if either one of the service calls fail for
    any reason, the bank system would end up in an inconsistent state regardless of
    the sequence of the service calls (first withdrawal or deposit, or vice versa).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在典型的在线储蓄账户交易中，银行系统会有取款和存款服务，如果任一服务调用因任何原因失败，无论服务调用的顺序（先取款或存款，或反之），银行系统最终都会处于不一致的状态。
- en: The preceding diagram shows a failed transaction of credit to the target account,
    which leads to the rollback of a debit transaction from the source account.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 上述图示显示了对目标账户的信用交易失败，这导致从源账户的借记交易回滚。
- en: So, as an implementation, the runtime service activities are wrapped in a transaction
    with explicit reversal logic, ensuring all actions and changes are rolled back
    in case of the current operations failing.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，作为实现，运行时服务活动被包裹在一个具有显式反转逻辑的事务中，确保在当前操作失败的情况下，所有操作和更改都会回滚。
- en: 'The benefits of atomic service transactions are as follows:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 原子服务事务的好处如下：
- en: Helps to propagate the rollback mechanism across message-based business services
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 帮助在基于消息的业务服务中传播回滚机制。
- en: Effective implementation of the stateless principle
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有效地实施无状态原则
- en: The impacts of atomic service transactions is that it might need more memory
    resources depending on the number of transactions to be preserved its original
    state until commit or rollback notification.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 原子服务事务的影响是，它可能需要更多的内存资源，这取决于要保留其原始状态直到提交或回滚通知的事务数量。
- en: Authentication broker
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 身份验证代理
- en: A service consumer uses a mechanism to validate an identity to the called resource,
    and a caller's identity is verified based on the credentials presented by that
    caller. Credentials can be passwords, the digital certificate provided by a certificate
    authority, biometrics, ATM PIN, or combinations of any of these types.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 服务消费者使用一种机制来验证调用资源的身份，调用者的身份基于该调用者提供的凭证进行验证。凭证可以是密码、证书授权机构提供的数字证书、生物识别、ATM PIN码，或这些类型的任何组合。
- en: In most cases, authentication is the first step to determine the eligibility
    of access to the web service, and the second phase is to verify that the user
    is authorized to access the web service.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，身份验证是确定访问Web服务的资格的第一步，第二步是验证用户是否有权访问Web服务。
- en: For identity-based authorization, one can verify the claims contained within
    the authenticated user's credentials. Depending on the privileges provided to
    the client, the service can either grant or deny access to the underlying resources.
    The token authentication mechanism is a useful authentication model of fine-grained
    authorization.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基于身份的授权，可以验证经过身份验证的用户凭证中包含的声明。根据提供给客户端的权限，服务可以授予或拒绝对底层资源的访问。令牌身份验证机制是细粒度授权的有用模型。
- en: '![](img/b285237e-9cc0-4e99-a711-d962a4c822b2.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b285237e-9cc0-4e99-a711-d962a4c822b2.png)'
- en: The preceding diagram depicts an online banking user who gets access to online
    banking debit transactions by contacting the authentication services, which authenticates
    against the central identity store. Then, the service responds with the token
    so that the user can consume the withdrawal service and the deposit service.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 上述图示展示了一个在线银行用户通过联系身份验证服务来获取在线银行借记交易权限，该服务通过中央身份存储进行身份验证。然后，服务响应以令牌，以便用户可以消费取款服务和存款服务。
- en: The authentication broker pattern helps to realize the authentication and authorization
    by a centralized identity store. The authentication services assume complete responsibility
    and provide a token that the consumer can use to access the service.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 认证代理模式有助于通过集中身份存储实现认证和授权。认证服务承担全部责任并提供一个令牌，消费者可以使用该令牌访问服务。
- en: 'The following example shows a digital signature and x509 information and messages
    to be validated for authentication and authorization of its content. The authentication
    service uses that information and validates the messages for any tampering, then
    the authentication service will not generate a valid token, and so the application
    denies access to the feature:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了用于认证和授权其内容的数字签名和x509信息以及要验证的消息。认证服务使用该信息并验证消息是否被篡改，然后认证服务将不会生成有效的令牌，因此应用程序将拒绝访问该功能：
- en: 'The benefits of the authentication broker are as follows:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 认证代理的好处如下：
- en: Centrally managed trust (authentication) and so helps to eliminate the need
    for each client and service to manage their authentication independently
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集中管理的信任（认证）因此有助于消除每个客户端和服务独立管理其认证的需求
- en: Easy to accomplish agreements and updates happen at one place without impacting
    any clients
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容易完成协议和更新发生在一个地方，而不会影响任何客户端
- en: Participants of brokered authentication do not require prior knowledge of one
    another to communicate
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 经纪认证的参与者不需要相互了解就可以进行通信
- en: Security tokens can be used across organizational boundaries and provide autonomous
    security domains
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全令牌可以在组织边界之间使用，并提供自主安全域
- en: The impact of the authentication is, it sometimes create a single point of failure,
    and any security breach could impact the entire service across inventory.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 认证的影响是，它有时会创建一个单点故障，任何安全漏洞都可能影响整个服务的库存。
- en: Message origin authentication
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消息来源认证
- en: Imagine a situation where Rose is doing an online money transfer from her bank
    account to Jack's account. However, Jack did not receive the amount to his account,
    but Rose's account is showing that the amount is deducted. So, what would've happened
    to the money that Rose transferred?
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，Rose正在从她的银行账户向Jack的账户进行在线转账。然而，Jack没有收到转账金额，但Rose的账户显示金额已被扣除。那么Rose转出的钱会发生什么？
- en: It is possible that Jack's account number got modified or tampered with by an
    intruder's account number in intermediate layers, and so all the money got credited
    to the different account.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 有可能Jack的账户号码在中间层被入侵者的账户号码修改或篡改，因此所有钱都存入了不同的账户。
- en: '![](img/90189ca5-8926-47de-961e-bbe26d8f3260.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/90189ca5-8926-47de-961e-bbe26d8f3260.png)'
- en: The message sent by a service consumer gets processed by one or more intermediate
    layers such as routers, message queues, and so on. The attacker could manipulate
    the messages in any of the intermediate layers and influence the service behavior
    for the evil purpose.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 服务消费者发送的消息会由一个或多个中间层处理，例如路由器、消息队列等。攻击者可以在任何中间层操纵消息并影响服务行为以达到恶意目的。
- en: Message origin authentication (or data origin authentication) suggests to use
    a digital signing mechanism for transmitting sensitive messages, and so the service
    can verify the signature to ensure received messages are initiated by the originator,
    and has not been tampered with on the way.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 消息来源认证（或数据来源认证）建议使用数字签名机制来传输敏感消息，因此服务可以验证签名以确保接收到的消息是由发送者发起的，并且在传输过程中没有被篡改。
- en: Applying the digital signature algorithm to the payload as proof of origin provides
    tamper-proof messages. Services that receive this information verify the signature
    by using an algorithm, and it should match. If it does not match, then the service
    rejects the messages.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 将数字签名算法应用于有效载荷作为来源证明，提供防篡改的消息。接收此信息的服务通过使用算法验证签名，并且应该匹配。如果不匹配，则服务拒绝消息。
- en: 'So, the message origin authentication validates two important aspects of security:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，消息来源认证验证了安全性的两个重要方面：
- en: '**Data integrity**: The message has not been modified or tampered with on the
    way to the service'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据完整性**：消息在到达服务的过程中没有被修改或篡改'
- en: '**Authenticated**: The received message at the service side is originated from
    the intended sender and not from anyone else'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**已认证**：服务端接收到的消息来自预期的发送者，而不是其他人'
- en: 'The benefits of message origin authentication are as follows:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 消息来源认证的好处如下：
- en: Detect tampering of received messages
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测接收到的消息的篡改
- en: Trace the origin of the messages to an identifiable source
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟踪消息的来源到可识别的源头
- en: 'The impacts of message origin authentication are as follows:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 消息来源认证的影响如下：
- en: Performance issues due to cryptographic implementations
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于加密实现导致的性能问题
- en: Choice of digital signing algorithm and variations in number and type of the
    key would be an additional overhead
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字签名算法的选择以及密钥数量和类型的差异将增加额外的开销
- en: Selection of digital signing algorithm can affect the level of security achieved
    as it varies according to the degree of security the application needs
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字签名算法的选择会影响达到的安全级别，因为它根据应用程序所需的安全程度而变化
- en: Service façade
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务外观
- en: Imagine a building that needs to undergo maintenance work. The outer wall of
    the building is replaceable without impacting the internal structure, and it is
    called a façade. The exterior walls are torn off and replaced at one wing of the
    building at a time, while the other wing is in use.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一个需要维护的建筑。建筑的外墙是可更换的，不会影响内部结构，这被称为外观。外部墙壁一次拆除并更换建筑的一翼，而另一翼仍在使用中。
- en: Roughly, we can relate the same concept to the service façade in SOA. While
    some clients use the existing services, any enhancements to the services can be
    carried over with no impacts to consumer contracts as they continue to use an
    older service version.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 大概来说，我们可以将相同的概念与SOA中的服务外观联系起来。虽然一些客户端使用现有的服务，但服务的任何增强都可以无缝迁移，不会影响消费者合约，因为它们继续使用较旧的服务版本。
- en: '![](img/2a9afecd-5ee9-444b-ab7f-4d30d9b91a31.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2a9afecd-5ee9-444b-ab7f-4d30d9b91a31.png)'
- en: The pattern of segregating the core logic of services from the service contracts
    is called the service façade. The service façade facilitates loose coupling between
    the client contracts, thereby, in case of any changes to the services, it does
    not affect its customers and they do not need to modify their code.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 将服务核心逻辑与服务合约分离的模式称为服务外观。服务外观促进了客户端合约之间的松散耦合，因此，在服务有任何变更的情况下，它不会影响其客户，并且他们不需要修改他们的代码。
- en: When designing a service, the architect needs to watch out for any negative
    coupling, such as the contract to logic that creates dependencies upon the contract,
    and so whenever the service changes, the contract is also likely to change, so
    impacting all the service consumers who do not expect any impact.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计服务时，架构师需要留意任何负面耦合，例如合约到逻辑的耦合，它依赖于合约，因此每当服务发生变化时，合约也可能会发生变化，从而影响所有不期望有任何影响的服务的消费者。
- en: The service façade eliminates this sort of coupling by establishing an interface
    between the core service logic and the service contract. The service façade logic
    allows contracts to remain decoupled from the underlying logic and further shields
    it from its core business logic. It applies to both functional and behavioral
    changes and so helps the services to evolve.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 服务外观通过在核心服务逻辑与服务合约之间建立接口来消除这种耦合。服务外观逻辑允许合约与底层逻辑保持解耦，并进一步保护其核心业务逻辑。它适用于功能和行为变更，因此有助于服务的演进。
- en: The service façade sits between the service and the service contract. Service
    façades can support multiple contracts. Note that multiple service contracts talk
    to the same service façade and only the service façades are coupled to the contract,
    not actual services, thus the services are independent and loosely coupled. If
    a contract changes, it minimizes the changes to the service.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 服务外观位于服务和合约之间。服务外观可以支持多个合约。请注意，多个服务合约与同一个服务外观通信，只有服务外观与合约耦合，而不是实际的服务，因此服务是独立且松散耦合的。如果合约发生变化，它将最小化对服务的影响。
- en: '![](img/9d83093f-7445-45f4-a37d-2cf3e008ef70.png)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9d83093f-7445-45f4-a37d-2cf3e008ef70.png)'
- en: The preceding diagram depicts a service that serves multiple contracts for different
    business functions. The *user info summary search* and *user info partial update*
    are good examples of a contract-specific service façades having specific business
    logic to serve the clients without having any impacts on the client or services.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 上述图示描述了一个为不同业务功能提供多个合约的服务。*用户信息摘要搜索*和*用户信息部分更新*是具有特定业务逻辑的合约特定服务外观的良例，这些服务外观在服务客户端时不会对其或服务产生任何影响。
- en: 'The benefits of the service façade are as follows:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 服务外观的好处如下：
- en: Façade shields the services and consumers of the services from the changes in
    the canonical model
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Façade保护服务和消费者的服务免受规范模型变化的影响
- en: Façade hides the complexities of the canonical model
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Façade隐藏了规范模型的复杂性
- en: Façade returns data representations agreed by the consumer
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Façade返回消费者同意的数据表示
- en: Façade makes your design elegant
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Façade使你的设计变得优雅
- en: 'The impacts of the service façade are as follows:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 服务外观的影响如下：
- en: Due to the service façade having very user-specific business logic, it incurs
    additional development and maintenance costs
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于服务外观具有非常用户特定的业务逻辑，它会产生额外的开发和维护成本
- en: Façades tend to create an extra physical distribution of services that lead
    to more complexity and additional processing overhead
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Façade倾向于创建额外的物理服务分布，导致更多的复杂性和额外的处理开销
- en: Multiple service contract
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多个服务合约
- en: One standard contract may not be suitable or applicable for all the potential
    service consumers. For instance, one service contract should be allowed to update
    complete profile information, while another contract should not be allowed a full
    update, but only partial updates are allowed. Though a profile update is one single
    service, two different consumers need two separate contracts. The multiple service
    contract pattern helps to exercise the preceding options. The service façade and
    the multiple service contract are related, and the service façade helps the systems
    to realize multiple or concurrent contracts.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 一个标准合约可能不适合或适用于所有潜在的服务消费者。例如，一个服务合约应该允许更新完整的个人资料信息，而另一个合约则不应允许完全更新，只允许部分更新。尽管个人资料更新是一个单一的服务，但两个不同的消费者需要两个不同的合约。多服务合约模式有助于实现上述选项。服务外观和多服务合约是相关的，服务外观帮助系统实现多个或并发合约。
- en: Multiple contracts or concurrent contracts serve two purposes. One is to support
    backward compatibility of a service, and the other one is to bring different views
    of a service for various uses.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 多个合约或并发合约有两个目的。一个是支持服务的向后兼容性，另一个是为不同的用途提供服务的不同视图。
- en: '![](img/29e30ee9-e67e-4571-b12f-0d446fc964fe.png)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![](img/29e30ee9-e67e-4571-b12f-0d446fc964fe.png)'
- en: The encircled rectangles in the preceding diagram represent multi-service contracts,
    and both connect to the same service but for two different purposes. In the preceding
    example, one service contract is allowed to update only a few fields of a profile,
    while another contract can update all the fields of a profile. So, multiple contracts
    for the same service helps different consumers use the services for distinct purposes.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 前图中的圆形矩形表示多服务合约，它们都连接到相同的服务，但出于两个不同的目的。在前面的例子中，一个服务合约只允许更新个人资料的一些字段，而另一个合约可以更新个人资料的所有字段。因此，同一服务的多个合约有助于不同的消费者为不同的目的使用服务。
- en: 'The benefits of the multiple service contract are as follows:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 多服务合约的好处如下：
- en: Can support backward and forward compatibility
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持向前和向后兼容
- en: Multiple version management keeps the customer end with no impact on any new
    changes to the services
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多版本管理确保客户端不受服务任何新更改的影响
- en: The impact of the multiple service contract is such as this pattern considers
    as many contracts, however, each new contract, ends up in new service endpoint
    to inventory and might hamper the service governance and high maintenance.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 多服务合约的影响是这样的：尽管这个模式考虑了许多合约，但每个新的合约最终都会导致新的服务端点被库存，这可能会妨碍服务治理和高维护。
- en: Service callback
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务回调
- en: Assume you are calling a customer care center from your telephone. Once connected,
    you hear an automated message saying that all of their customer care executives
    are busy, and so ask you to wait on the line. You may even be one of many waiting
    for the same service executive (concurrency and multiple threads). Now, you have
    two options to choose from; one is to hold the line and wait for someone to speak
    to, and two is to hang up and try again after some time. However, trying again
    after some time may have you ending up in the same situation.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你从电话中拨打客户服务中心。一旦接通，你会听到一个自动消息说所有的客户服务代表都很忙，因此要求你等待。你可能就是许多等待同一服务代表的人之一（并发和多线程）。现在，你有两个选择可供选择；一个是等待有人接听，另一个是在一段时间后挂断并再次尝试。然而，过一段时间再次尝试可能会让你陷入同样的情况。
- en: How about the customer care executive calls you back? You dial the number, the
    system picks up your number, and says that it will call you back automatically
    when the customer care executive is free so that you do not need to wait.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 那如果客户服务代表回拨给你呢？你拨打号码，系统接听你的电话，并说明当客户服务代表有空时将自动回拨，这样你就不需要等待。
- en: Imagine a web service that takes a longer time to complete its tasks, but the
    caller or the consumer of the service does not want to wait for all the tasks
    to be completed, and also the consumer needs to know once all the process/tasks
    get completed. This is similar to our earlier example of a client calls a customer
    care executive but do not want to wait in the queue either.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一个需要较长时间才能完成任务的网络服务，但调用者或服务的消费者不想等待所有任务完成，同时消费者还需要知道所有过程/任务何时完成。这与我们之前的例子中客户调用客户服务代表但不希望等待排队类似。
- en: Service callback pattern implementation is the best approach to fulfil such
    requirements.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 服务回调模式实现是满足此类要求的最优方法。
- en: '![](img/118d9dc5-4aa9-4e11-8129-214b410cb2fd.png)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/118d9dc5-4aa9-4e11-8129-214b410cb2fd.png)'
- en: The preceding diagram depicts various calling systems (a web page, telephone,
    and contact center app) using a callback app that exercises the service callback
    pattern.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 上述图表描述了使用回调应用程序执行服务回调模式的多种调用系统（网页、电话和联系中心应用程序）。
- en: '![](img/8dbc4cb1-b4d1-46c5-a5fe-ae36bfb998c3.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8dbc4cb1-b4d1-46c5-a5fe-ae36bfb998c3.png)'
- en: The service callback pattern suggests that the consumers of services communicate
    asynchronously with the services and make sure to provide callback addresses in
    the message, with which services can use the same callback address to communicate
    back with the client.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 服务回调模式建议服务的消费者与服务异步通信，并确保在消息中提供回调地址，服务可以使用相同的回调地址与客户端进行通信。
- en: The preceding diagram depicts a scenario of a consumer calling the service asynchronously
    through the message. The message contains the callback address, so once the service
    completes its process, it uses the callback address to communicate and respond
    back. The service callback address can be a phone number, an email address, or
    it can be another service endpoint that can do further business logic and respond
    to consumers.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 上述图表描述了一个消费者通过消息异步调用服务的场景。消息包含回调地址，因此一旦服务完成其处理，它将使用回调地址进行通信并做出响应。服务回调地址可以是电话号码、电子邮件地址，或者它可以是另一个可以进行进一步业务逻辑处理并响应消费者的服务端点。
- en: '![](img/1eec0305-ece0-44c1-830b-7726be663596.png)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1eec0305-ece0-44c1-830b-7726be663596.png)'
- en: In our first example, the callback address is the client's phone number, which
    the service would call. The second example may contain an email address or callback
    URL (of the same or even another service) with the status of upload as a response.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的第一个例子中，回调地址是客户的电话号码，服务将拨打该号码。第二个例子可能包含电子邮件地址或回调URL（相同或甚至另一个服务）以及上传状态作为响应。
- en: 'The benefits of the service callback are as follows:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 服务回调的好处如下：
- en: Extremely useful in cases where the request needs to wait for a longer response
    time
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在请求需要等待较长时间响应的情况下非常有用。
- en: Best implementation of loose coupling of services
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务解耦的最佳实现。
- en: Best choice for message broadcast requirements
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 满足消息广播需求的最佳选择。
- en: 'The impacts of the service callback are as follows:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 服务回调的影响如下：
- en: As this patterns mostly deals with asynchronous communication, it may introduce
    reliability concerns
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于此模式主要处理异步通信，可能会引入可靠性问题。
- en: May require more infrastructure upgrades to support the necessary callback correlation
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能需要更多基础设施升级以支持必要的回调关联。
- en: Handling request and response errors is usually more challenging
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理请求和响应错误通常更具挑战性。
- en: 'More examples of a service message with the service callback pattern design
    are as follows:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 具有服务回调模式设计的消息的更多示例如下：
- en: A software system that needs a service to load a large file and read its content
    line by line then upload to the database probably after validating each line.
    As it is typically massive in size and the caller of the system cannot wait for
    the longer process to complete, at the same time, a notification is sent to the
    caller once the upload is complete.
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个需要服务加载大文件并逐行读取其内容，然后（在验证每一行之后）可能上传到数据库的软件系统。由于它通常规模庞大，系统调用者不能等待较长的过程完成，同时，一旦上传完成，就会向调用者发送通知。
- en: Stock trading system and stock quote ticker services.
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 股票交易系统和股票报价行情服务。
- en: Booking complete status, email notifications, and so on.
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预订完成状态、电子邮件通知等。
- en: Event-driven messaging
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件驱动消息
- en: One of the core patterns of event-driven architecture is event-driven messaging;
    services (publishers) notify their consumers (subscribers) with relevant events
    when they happen, while customers are not necessarily waiting or aware of that
    event.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 事件驱动架构的核心模式之一是事件驱动消息；当事件发生时，服务（发布者）会通过相关事件通知其消费者（订阅者），而消费者并不一定在等待或意识到该事件。
- en: 'Imagine a stock trading service notifying its users whenever a particular stock
    price goes up:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一个股票交易服务在特定股价上涨时通知其用户：
- en: '![](img/3fc5b685-4d3a-4c9b-ac23-d979fc10b7d2.png)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3fc5b685-4d3a-4c9b-ac23-d979fc10b7d2.png)'
- en: The preceding diagram depicts a cycle of notification process kicks in when
    a stock price hit a particular  threshold; the subscriber lets event manager knows
    the intention, and the publisher publish (informs) when the event occurs. The
    $X is the predefined limit or sale price, and it is the event here. The following
    diagram depicts a sample pay load of the same.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 上一张图展示了当股价达到特定阈值时，通知流程的周期启动；订阅者告知事件管理员的意图，当事件发生时，发布者发布（通知）。$X是预定义的限制或销售价格，在这里它是事件。下一张图展示了相同的样本负载。
- en: '![](img/779a495c-c129-48be-a3dd-b6048e638197.png)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/779a495c-c129-48be-a3dd-b6048e638197.png)'
- en: 'The benefits of event-driven messaging are as follows:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 事件驱动消息的好处如下：
- en: Best pattern for integration intentions between cross-functional boundaries
    and services
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨职能边界和服务之间集成意图的最佳模式
- en: Achieve a higher degree of automation of process with less complexity
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以更少的复杂性实现流程的更高自动化程度
- en: 'The impacts of event-driven messaging are as follows:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 事件驱动消息的影响如下：
- en: Creates additional complexity while incorporating message exchanges as part
    of atomic services
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在将消息交换作为原子服务的一部分进行整合时，会创建额外的复杂性
- en: Depends on publisher and subscriber services availability
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 取决于发布者和订阅者服务的可用性
- en: Needs to address ripple effects of reliability issues by combining other relevant
    patterns in event-driven messaging design
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要通过结合事件驱动消息设计中的其他相关模式来解决可靠性问题的涟漪效应
- en: Service refactoring
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务重构
- en: In many situations, the services undergo many changes without any impact to
    the service contracts. It could be a simple software update improving the performance
    of a system, database updates, programming version upgrades, and so on.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，服务经历了很多变化，但不会影响服务合同。这可能是一个简单的软件更新，提高了系统的性能，数据库更新，编程版本升级等。
- en: Service refactoring helps to improve the service by changing the internals without
    changing its behavior, and so causing no impact on service contracts.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 服务重构通过改变内部结构而不改变其行为，有助于提高服务，并且不会对服务合同产生影响。
- en: '![](img/52deff5b-ce40-42a1-8002-164eefb4964c.png)'
  id: totrans-262
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/52deff5b-ce40-42a1-8002-164eefb4964c.png)'
- en: In the preceding diagram (encircled at the top-right as service refactor), the
    identity management system has undergone refactoring to improve the performance
    of its response time and has been upgraded with fail fast capabilities. There
    is no impact on the banking client, and it continues to use the same authentication
    services but with improved service capabilities.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一张图（右上角圈出作为服务重构）中，身份管理系统已经经过重构以提高其响应时间性能，并已升级为快速失败功能。对银行客户端没有影响，它继续使用相同的身份验证服务，但具有改进的服务能力。
- en: 'The benefits of service refactoring are as follows:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 服务重构的好处如下：
- en: Easy update of heavily dependent services without affecting any of its consumers
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在不影响任何消费者的情况下轻松更新高度依赖的服务
- en: No changes to functional behavior after upgrades
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 升级后功能行为无变化
- en: With limited scope minimizes adverse impacts to the service consumers
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在有限范围内最小化对服务消费者的不利影响
- en: 'The impacts of service refactoring are as follows:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 服务重构的影响如下：
- en: May lead to add more governance efforts
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能会导致需要更多的治理努力
- en: Might introduce potentially adverse side effects (improved performance but handling
    of concurrent requests could lead to lower availability)
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能会引入潜在的负面影响（性能提升但处理并发请求可能导致可用性降低）
- en: Metadata centralization
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 元数据集中化
- en: Having a centralized service catalog and providing a formal process of service
    registration and discovery is inevitable to any organization, and so limiting
    the risk of building services or functionality that already exists, or that is
    already under development.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何组织来说，拥有集中的服务目录并提供正式的服务注册和发现流程是不可避免的，这样可以限制构建已存在或正在开发中的服务或功能的风险。
- en: 'The following diagram depicts a service registry that holds the information
    of published services, and so the service consumers would look up and bind those
    registered services for a runtime bind and invoke:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图展示了包含已发布服务信息的注册表，因此服务消费者将查找并绑定这些已注册的服务以进行运行时绑定和调用：
- en: '![](img/67fc4eed-f519-46eb-8a8c-2ee06575a618.png)'
  id: totrans-274
  prefs: []
  type: TYPE_IMG
  zh: '![](img/67fc4eed-f519-46eb-8a8c-2ee06575a618.png)'
- en: The information of the services and its functionalities are available to benefit
    the enterprises with
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 服务及其功能的信息可供企业受益
- en: Services discoverability
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务可发现性
- en: Inventory normalization
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 库存标准化
- en: Standardization for service reusability
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务重用性标准化
- en: Provide ways to minimize the risk of redundancy.
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供最小化冗余风险的方法。
- en: Publish services with functional and QoS meta-data.
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布具有功能和QoS元数据的服务。
- en: This pattern applies to one-domain service inventories, or even to several inventories.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 此模式适用于单域服务目录，甚至适用于多个目录。
- en: '![](img/134d35fb-ffc1-462d-b239-e327484d3b37.png)![](img/31805181-f227-4ca7-aafd-01703ddce40f.png)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![](img/134d35fb-ffc1-462d-b239-e327484d3b37.png)![](img/31805181-f227-4ca7-aafd-01703ddce40f.png)'
- en: 'The benefits of the sample catalog are as follows:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 样本目录的好处如下：
- en: Minimizes the risk of building functionality that already exists
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小化构建已存在功能的风险
- en: Helps in service normalization
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有助于服务标准化
- en: Helps in compelling discovery and interpretation
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有助于强制发现和解释
- en: Runtime discovery and binding
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行时发现和绑定
- en: Ensures metadata standardization
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保元数据标准化
- en: 'The impacts of the sample catalog are as follows:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 样本目录的影响如下：
- en: Due to metadata standardization, the documentation and registration need to
    be part of the service delivery lifecycle (additional governance)
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于元数据标准化，文档和注册需要成为服务交付生命周期的一部分（额外的治理）
- en: Service registry needs to be adequately mature and reliable to lead to strict
    governing and maintenance
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务注册需要足够成熟和可靠，以便进行严格的治理和维护
- en: Principles and patterns cross reference
  id: totrans-292
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 原则和模式交叉引用
- en: 'The following table has references to SOA principles and related SOA patterns
    for each principle. This matrix might come in handy when you want to refer to
    a common design pattern and its associated SOA design principle:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了每个原则的SOA原则和相关SOA模式。当您想要参考一个常见的设计模式及其相关的SOA设计原则时，这个矩阵可能很有用：
- en: '| **Principles** | **Patterns** |'
  id: totrans-294
  prefs: []
  type: TYPE_TB
  zh: '| **原则** | **模式** |'
- en: '| Standardized service contract/service interoperability |'
  id: totrans-295
  prefs: []
  type: TYPE_TB
  zh: '| 标准化服务合同/服务互操作性 |'
- en: Service messaging
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务消息传递
- en: Message screening
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息筛选
- en: Agnostic services
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不可知服务
- en: Multiple contracts
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多个合同
- en: Event-driven messaging
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件驱动消息传递
- en: Service callback
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务回调
- en: Service façade
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务外观
- en: Service refactoring
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务重构
- en: '|'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Service abstraction |'
  id: totrans-305
  prefs: []
  type: TYPE_TB
  zh: '| 服务抽象 |'
- en: Service refactoring
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务重构
- en: '|'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Service autonomy |'
  id: totrans-308
  prefs: []
  type: TYPE_TB
  zh: '| 服务自治 |'
- en: Event-driven messaging
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件驱动消息传递
- en: Service messaging
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务消息传递
- en: '|'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Service composability |'
  id: totrans-312
  prefs: []
  type: TYPE_TB
  zh: '| 服务可组合性 |'
- en: Agnostic services
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不可知服务
- en: Message origin authentication
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息来源认证
- en: Service callback
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务回调
- en: Authentication broker
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 认证代理
- en: '|'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Service discoverability |'
  id: totrans-318
  prefs: []
  type: TYPE_TB
  zh: '| 服务可发现性 |'
- en: Metadata centralization
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元数据集中化
- en: '|'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Service loose coupling |'
  id: totrans-321
  prefs: []
  type: TYPE_TB
  zh: '| 服务松耦合 |'
- en: Service messaging
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务消息传递
- en: Event-driven messaging
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件驱动消息传递
- en: Service callback
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务回调
- en: Service façade
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务外观
- en: Multiple contracts
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多个合同
- en: '|'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Service reusability |'
  id: totrans-328
  prefs: []
  type: TYPE_TB
  zh: '| 服务可重用性 |'
- en: Agnostic services
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不可知服务
- en: Multiple contracts
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多个合同
- en: '|'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Service statelessness |'
  id: totrans-332
  prefs: []
  type: TYPE_TB
  zh: '| 服务无状态 |'
- en: Atomic service transaction
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原子服务事务
- en: '|'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Summary
  id: totrans-335
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned about what *SOA* is, and its fundamental characteristics
    such as service interconnectivity, event-driven and messaging, flexible, service
    evolution, along with a few other common characteristics. In later sections, we
    covered SOA principles such as service contract standards, interoperability abstraction,
    service autonomy, service composability, reusability, and statelessness in detail.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了什么是*SOA*以及其基本特征，如服务互连性、事件驱动和消息传递、灵活性、服务演进，以及一些其他常见特征。在后续章节中，我们详细介绍了SOA原则，如服务契约标准、互操作性抽象、服务自治、服务可组合性、可重用性和无状态性。
- en: We also learned about the most common SOA design patterns and where those patterns
    can be applied so that one can build SOA-compliant services. The patterns that
    we touched upon are service messaging, message screening, agnostic services, atomic
    service transaction, authentication broker, message origin authentication, service
    façade, multiple service contract, service callback, event-driven messaging, service
    refactoring, and metadata centralization.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学习了最常见的SOA设计模式及其应用场景，以便构建符合SOA规范的服务。我们讨论的模式包括服务消息传递、消息筛选、无状态服务、原子服务事务、认证代理、消息源认证、服务外观、多重服务契约、服务回调、事件驱动消息传递、服务重构和元数据集中化。
