- en: Chapter 3. Materials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Material is an asset that defines the look of a mesh with various graph nodes
    that include images (textures) and math expressions. Since Unreal Engine 4 utilizes
    **Physically Based Rendering** (**PBR**), creating realistic materials such as
    metal, concrete, bricks, and so on, can be quite easy. Materials in Unreal Engine
    define everything about the surface of the mesh, such as its color, shininess,
    bumpiness, and tessellation, and can even animate objects by manipulating the
    vertices! At this point you might think *Ok, Materials are only used for meshes*
    but, no, they are not actually limited to meshes. You use Materials for decals,
    post process, and light functions too.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Material is a pretty straightforward process. All you have to do
    is right-click in **Content Browser**, select **Material**, and give it a name.
    Done!
  prefs: []
  type: TYPE_NORMAL
- en: '![Materials](img/B03950_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Material user interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we know what a Material is and what it does, let's take a look at the
    user interface of Material graph.
  prefs: []
  type: TYPE_NORMAL
- en: '![Material user interface](img/B03950_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Toolbar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Toolbar** panel contains various buttons that help to preview graph nodes,
    remove isolated nodes, Material stats, and so on. Let''s take a look at what these
    buttons do:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Save**: Applies the changes you made to the Material and saves the asset![Toolbar](img/B03950_03_03.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Find in CB**: Navigates and selects this Material in **Content Browser**![Toolbar](img/B03950_03_04.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Apply**: Applies the changes to the Material. Note that this will not save
    the Material![Toolbar](img/B03950_03_05.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Search**: Searches for Material expressions or comments![Toolbar](img/B03950_03_06.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Home**: Navigates to and selects the main canvas node![Toolbar](img/B03950_03_07.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Clean Up**: Removes unconnected nodes![Toolbar](img/B03950_03_08.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Connectors**: Shows or hides unconnected pins![Toolbar](img/B03950_03_09.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Live Preview**: Toggles a real-time update of preview material![Toolbar](img/B03950_03_10.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Live Nodes**: Toggles a real-time update of graph nodes![Toolbar](img/B03950_03_11.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Live Update**: Recompiles a shader for every node in the graph![Toolbar](img/B03950_03_12.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stats**: Toggles Material stats and compilation errors'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mobile Stats**: Same as stats but for mobile![Toolbar](img/B03950_03_13.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Live nodes might be confusing for new users so I'll explain about them further.
  prefs: []
  type: TYPE_NORMAL
- en: Live preview
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sometimes we need to preview the result of a specific node before connecting
    it to the main node or for debugging purposes.
  prefs: []
  type: TYPE_NORMAL
- en: To preview a node you need to right-click on the node and select **Start Previewing
    Node**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Live preview](img/B03950_03_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Unless you enable **Live Preview**, you will not see any changes in the preview
    material.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can press the spacebar to force a preview.
  prefs: []
  type: TYPE_NORMAL
- en: Live nodes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This will show a real-time update of nodes due to changes made by expressions
    to that node. See the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Live nodes](img/B03950_03_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, the **Sine** node is getting a constant update
    from **Time**, multiplied by one. If you enable **Live Nodes**, you will see the
    **Sine** node pulsing between black and white. If you change the **Multiply**
    value from **1** to anything else (for example, **5**) you will not see the changes
    unless you enable **Live Update** too.
  prefs: []
  type: TYPE_NORMAL
- en: Live update
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When enabled, all expressions are compiled whenever you make a change, such
    as adding a new node, deleting a node, changing a property, and so on. If you
    have a complex graph, it is recommended to disable this option as it has to compile
    all nodes every time you make a change.
  prefs: []
  type: TYPE_NORMAL
- en: Preview panel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Preview** panel shows the result of the Material that you are currently
    editing. You can navigate in preview Material using these options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Rotate the mesh**: Drag with the left mouse button'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pan**: Drag with the middle mouse button'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Zoom**: Drag with the right mouse button'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Update light**: Hold *L* and drag with the left mouse button'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the top-right corner of the preview viewport you can change some settings.
    This changes the preview mesh to the selected primitive shape:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Preview panel](img/B03950_03_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This changes the preview mesh to a custom mesh. You need to select a **Static
    Mesh** in **Content Browser**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Preview panel](img/B03950_03_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This toggles the rendering of the grid in the preview viewport:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Preview panel](img/B03950_03_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This toggles real-time rendering in the preview viewport:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Preview panel](img/B03950_03_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Details panel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Details** panel shows all the properties you can edit when you select
    a node in the graph. If no nodes are selected, it will show the properties of
    the Material itself.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on these settings, please visit the Material properties
    documentation at [https://docs.unrealengine.com/latest/INT/Engine/Rendering/Materials/MaterialProperties/index.html](https://docs.unrealengine.com/latest/INT/Engine/Rendering/Materials/MaterialProperties/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: Graph panel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the main area where you create all the nodes that decide how the Material
    should look and behave. By default, a Material graph contains one master node
    that has a series of inputs, and this master node cannot be deleted. Some of the
    inputs are grayed out and can be enabled by changing the **Blend** mode in the
    **Details** panel.
  prefs: []
  type: TYPE_NORMAL
- en: '![Graph panel](img/B03950_03_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Palette panel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Palette** panel lists all the graph nodes and Material functions that
    can be placed in the graph using drag and drop.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using the **Category** option, you can filter **Palette** contents between expressions
    or Material functions.
  prefs: []
  type: TYPE_NORMAL
- en: Common material expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are some common Material nodes that we use most of the time when we create
    a material. To create a node you need to right-click on the graph canvas and search
    for it, or you can use the **Palette** window to drag and drop. Some nodes also
    have shortcut keys assigned to them.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at these common nodes.
  prefs: []
  type: TYPE_NORMAL
- en: Constant
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Constant expression outputs a single float value and can be connected to almost
    any input. You can convert a constant expression to a parameter and make real-time
    changes to the Material instance. You can also access a parameter through Blueprint
    or C++ and see the changes in the game.
  prefs: []
  type: TYPE_NORMAL
- en: '**Shortcut key**: Hold *1* and click on the graph area'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Parameter shortcut key**: Hold *S* and click on the graph area'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Example usage**: Brighten or darken a texture'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Constant parameter is called a scalar parameter
  prefs: []
  type: TYPE_NORMAL
- en: '![Constant](img/B03950_03_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can see a constant expression (0.2) being used to darken a texture.
  prefs: []
  type: TYPE_NORMAL
- en: Constant2Vector
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Constant2Vector expression outputs two float values, which is a two-channel
    vector value (for example, red channel and green channel). You can convert Constant2Vector
    to a parameter and make real-time changes to the Material instance or access it
    in Blueprint or C++ to make dynamic changes to the material while playing the
    game.
  prefs: []
  type: TYPE_NORMAL
- en: '**Shortcut key**: Hold *2* and click on the graph area'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Parameter shortcut key**: Hold *V* and click on the graph area'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Example usage**: Adjust the UVs of a texture separately'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Constant2Vector](img/B03950_03_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can see a Constant2Vector being used to tile a texture in the preceding
    screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Constant3Vector
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Constant3Vector expression outputs three float values, which is a three-channel
    vector value (for example, red channel, green channel, and blue channel). You
    can convert Constant3Vector to a parameter and make real-time changes to a Material
    instance or access it in Blueprint or C++ to make dynamic changes to a material
    while playing the game.
  prefs: []
  type: TYPE_NORMAL
- en: '**Shortcut key**: Hold *3* and click on the graph area'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Parameter shortcut key**: Hold *V* and click on the graph area'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Example usage**: Change the color of a given texture'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Constant3Vector](img/B03950_03_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can see Constant3Vector being used to color a grayscale texture in the preceding
    screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Texture coordinate (TexCoord)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The texture coordinate expression outputs texture UV coordinates as a two-channel
    vector (for example, U and V), which helps with tiling and also allows you to
    use different UV coordinates.
  prefs: []
  type: TYPE_NORMAL
- en: '**Shortcut key**: Hold *U* and click on the graph area'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Texture coordinate (TexCoord)](img/B03950_03_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot shows a texture coordinate being used to tile a texture.
    You can see the values used by looking at the **Details** panel in the bottom
    left corner.
  prefs: []
  type: TYPE_NORMAL
- en: Multiply
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This expression multiplies the given inputs and outputs the result:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Multiplication happens per channel. For example, if you multiply two vectors
    (0.2, 0.3, 0.4) and (0.5, 0.6, 0.7), the actual process is the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'So the output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The **Multiply** node expects inputs to be the same type unless one of them
    is constant. In short, you cannot multiply Constant2Vector and Constant3Vector,
    but you can multiply Constant2Vector or Constant3Vector by a constant expression.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shortcut key**: Hold *M* and click on the graph area'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Multiply](img/B03950_03_25.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The preceding screenshot shows a multiply node being used to boost an emissive
    effect.
  prefs: []
  type: TYPE_NORMAL
- en: Add
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This expression adds the given inputs and outputs the result:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Addition happens per channel. For example, if you add two vectors (1, 0, 0)
    and (0, 1, 0), the actual process is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'So the output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The **Add** node expects inputs to be the same type unless one of them is constant.
    In short, you cannot add Constant2Vector and Constant3Vector, but you can add
    Constant2Vector or Constant3Vector to a constant expression. Let''s take a look
    at why it is like this. See the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Add](img/B03950_03_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here we are trying to add Constant3Vector and Constant2Vector but it will not
    work. This is because, when the Material editor tries to compile the **Add** node,
    it fails since the last element of Constant3Vector has nothing to add to. It will
    be like the following calculation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'But you can add Constant3Vector to a constant expression, as in the following
    figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Add](img/B03950_03_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The result will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: And that will compile fine.
  prefs: []
  type: TYPE_NORMAL
- en: '**Shortcut key**: Hold *A* and click on the graph area![Add](img/B03950_03_28.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Divide
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The divide expression divides the given inputs and outputs the result:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Division happens by channel. For example, if you divide two vectors (0.2, 0.3,
    0.4) and (0.5, 0.6, 0.7), the actual process is like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'So the output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The **Divide** node expects inputs to be the same type unless one of them is
    constant. In short, you cannot divide Constant2Vector by Constant3Vector, but
    you can divide Constant2Vector or Constant3Vector by a constant expression.
  prefs: []
  type: TYPE_NORMAL
- en: '**Shortcut key**: Hold *D* and click in the graph area![Divide](img/B03950_03_29.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Subtract
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This expression subtracts the given inputs and outputs the result:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Subtraction happens by channel. For example, if you subtract two vectors (0.2,
    0.3, 0.4) and (0.5, 0.6, 0.7), the actual process is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'So the output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The **Subtract** node expects inputs to be the same type unless one of them
    is constant. In short, you cannot subtract Constant2Vector from Constant3Vector,
    but you can subtract Constant2Vector or Constant3Vector from a constant expression.
  prefs: []
  type: TYPE_NORMAL
- en: '**Shortcut key**: No shortcut key![Subtract](img/B03950_03_30.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Texture sample (Texture2D)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Texture sample outputs the given texture. It also outputs all four channels
    (namely, red, green, blue, and alpha) from the texture separately so you can use
    them for various things. This is especially useful if you work on multiple grayscale
    textures (such as mask textures, roughness textures, and so on). Instead of importing
    multiple textures, you can just create one texture in Photoshop and assign other
    textures to different channels and, in Material editor, you can get each channel
    and do all the fancy things. Oh, and did I mention Texture2D can use movie textures
    too?
  prefs: []
  type: TYPE_NORMAL
- en: You can convert **Texture Sample** to **TextureSampleParameter2D** and change
    textures in real-time via Material instance. You can also change textures dynamically
    in the game through Blueprints or C++.
  prefs: []
  type: TYPE_NORMAL
- en: '**Shortcut key**: Hold *T* and click in the graph area'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Parameter shortcut key**: No shortcut key'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Texture sample (Texture2D)](img/B03950_03_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Component mask
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The component mask expression can extract different channels from the input,
    which should be a vector channel such as **Constant2Vector**, **Constant3Vector**,
    **Constant4Vector**, **TextureSample**, and so on. For example, you know Constant4Vector
    has only one output, which is RGBA. So, if you want the green channel from RGBA,
    you use a component mask. You can right-click on a component **Mask** and convert
    it into a **Parameter** and make real-time changes in Material instance.
  prefs: []
  type: TYPE_NORMAL
- en: '**Shortcut key**: No shortcut key'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Parameter shortcut key**: No shortcut key![Component mask](img/B03950_03_32.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this screenshot, we extract the alpha channel and plug it into **Opacity**
    and plug the RGB channel into **Base Color**.
  prefs: []
  type: TYPE_NORMAL
- en: Linear interpolate (lerp)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This blends two textures or values based on alpha. When the alpha value is **0**
    (black color), **A** input is used. If the alpha value is **1** (white color),
    **B** input is used. Most of the time, this is used to blend two textures based
    on a mask texture.
  prefs: []
  type: TYPE_NORMAL
- en: '**Shortcut key**: Hold *L* and click in the graph area'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Example usage**: Blend two textures based on the alpha value, which can be
    a constant or a mask texture![Linear interpolate (lerp)](img/B03950_03_33.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here, the lerp node is outputting 100% of input **A** because the alpha value
    is **0**. If we set the alpha value to **1** then we'll see 100% of **B**. If
    alpha is **0.5** then we'll see a blend of both **A** and **B**.
  prefs: []
  type: TYPE_NORMAL
- en: Power
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Power** node multiplies the base input by itself with Exp times. For
    example, if you have **4** in **Base** and **6** in **Exp** then the actual process
    is like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: So the result of **Power** is `4096`.
  prefs: []
  type: TYPE_NORMAL
- en: If you apply a **Texture** to **Base** input and have a constant value (for
    example, **4**) then the **Texture** is multiplied four times.
  prefs: []
  type: TYPE_NORMAL
- en: '**Shortcut key**: Hold *E* and click in the graph area'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Example usage**: Adjust the contrast of the height map or ambient occlusion
    map![Power](img/B03950_03_34.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The preceding image shows a Power node being used to boost the contrast of a
    **Texture Sample**.
  prefs: []
  type: TYPE_NORMAL
- en: PixelDepth
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**PixelDepth** outputs the distance to the camera of the pixel currently being
    rendered. This can be useful to alter the appearance of the material based on
    the distance from the player.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Shortcut key**: No shortcut key'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Example usage**: Change the color of an object based on the distance from
    the player![PixelDepth](img/B03950_03_35.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you apply the previous material to a mesh, then the color of the mesh will
    be changed based on the distance to the player camera.
  prefs: []
  type: TYPE_NORMAL
- en: '![PixelDepth](img/B03950_03_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot shows how the mesh will look closer to the player camera.
  prefs: []
  type: TYPE_NORMAL
- en: '![PixelDepth](img/B03950_03_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot shows how the mesh will look when it's farther away
    from the player camera.
  prefs: []
  type: TYPE_NORMAL
- en: Desaturation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As the title says, the **Desaturation** expression desaturates its input. Simply
    put, it can convert a color image to grayscale based on a certain percentage.
  prefs: []
  type: TYPE_NORMAL
- en: '**Shortcut key**: No shortcut key'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Desaturation](img/B03950_03_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Time
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This expression outputs the **Time** passage of the game (in seconds). This
    is used if you want your Material to change over time.
  prefs: []
  type: TYPE_NORMAL
- en: '**Shortcut key**: No shortcut key'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Example usage**: Create a pulsing Material![Time](img/B03950_03_39.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the previous material, we multiply **Time** by a constant expression. The
    result of the **Multiply** node is plugged into the **Sine** node, which outputs
    a continuous oscillating waveform that outputs the value in a range of **-1**
    to **1**. We then use a **ConstantBiasScale** node to prevent the value from going
    below **0**. A **ConstantBiasScale** node is basically a node that adds a bias
    value to the input and multiplies it by a scale value. By default, bias is set
    to **0.5** and scale to **1**. So if the **Sine** value is **-1**, then the result
    is `(-1 + 1) * 0.5`, which equals **0**.
  prefs: []
  type: TYPE_NORMAL
- en: Fresnel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Fresnel** creates rim lighting, which means it will highlight the edges of
    the mesh.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Shortcut key**: No shortcut key![Fresnel](img/B03950_03_40.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The result of the previous network is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Fresnel](img/B03950_03_41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Material types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that you know some of the basic expressions, let's take a look at different
    Material types. First of all, obviously, is the main Material editor, but then
    you also have Material instances, Material functions, and layered Materials.
  prefs: []
  type: TYPE_NORMAL
- en: Material instances
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Material instance is used to change the appearance of a Material without recompiling
    it. When you change any value in Material editor and apply it, it will recompile
    the whole shader and create a set of shaders. When you create a Material instance
    from that Material, it will use the same set of shaders so you can change the
    values in real time without recompiling anything. But when you use **Static Switch
    Parameter** or **Component Mask Parameter** in your **Parent Material**, then
    it's different because each of those parameters has unique combinations. For example,
    let's say you have **Material_1** with no **Static Switch Parameter**, and **Material_2**
    with **Static Switch Parameter** called **bEnableSwitch**. **Material_1** will
    create only one set of shaders, while **Material_2** will create two sets of shaders
    with **bEnableSwitch = False** and **bEnableSwitch = True**.
  prefs: []
  type: TYPE_NORMAL
- en: An example workflow is to create a master Material that contains all the necessary
    parameters and let the designers make different versions.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two types of Material instances. They are:'
  prefs: []
  type: TYPE_NORMAL
- en: Material Instance Constant
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Material Instance Dynamic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only Material Instance Constant has a user interface. Material Instance Dynamic
    has no user interface and cannot be created in content browser.
  prefs: []
  type: TYPE_NORMAL
- en: Material Instance Constant
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As the title says, **Material Instant Constant** (**MIC**) is only editable
    in the editor. That means you cannot change the values at runtime. MIC exposes
    all parameters you created in the parent Material. You can create your own groups
    and organize all your parameters nicely.
  prefs: []
  type: TYPE_NORMAL
- en: '![Material Instance Constant](img/B03950_03_42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Material Instance User Interface
  prefs: []
  type: TYPE_NORMAL
- en: '**Toolbar (1)**: The following are toolbar options:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Save**: Saves the asset'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Find in CB**: Navigates to this asset in Content Browser and selects it'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Params**: Exposes all parameters from Parent Material'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mobile Stats**: Toggles Material stats for Mobile'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Details (2)**: Displays all the parameters from parent Material and other
    properties of Material instance. Here you can also assign a physics Material and
    override the base properties of the parent Material, such as blend mode, two-sided,
    and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Instance parents (3)**: Here you will see a chain of parents all the way
    up to the main master Material. The instance currently being edited is shown in
    bold.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Viewport (4)**: The viewport displays the material on a mesh so you can see
    your changes in real time. You can change the preview shape in the top-right corner.
    This is the same as it was in Material editor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Material Instance Constant example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order for Material instance to work, we need a master Material with parameters.
    Let's create a simple Material that will change its color based on the distance
    to the player, that is, when the player is near the mesh it will have a red color,
    and as they move further away it will change its color. Note that there are 21
    parameter expressions in UE4\.
  prefs: []
  type: TYPE_NORMAL
- en: 'Right now we will stick with two common parameters, and they are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Scalar parameter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vector parameter![Material Instance Constant example](img/B03950_03_43.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see in the previous screenshot, we created two vector parameters
    (**Color1**, **Color2**) and two scalar parameters (**TransitionDistance**, **Speed**).
    We will use these parameters to modify in real time. To create an instance of
    this Material you need to right-click on this Material in **Content Browser**
    and select **Create Material Instance**. This will create a new instance Material
    right next to this Material.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you open that instance you will see all these parameters there, and you
    can edit them in real time without having to wait for the Material to recompile:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Material Instance Constant example](img/B03950_03_44.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To change values in Material instance, you need to override them first. You
    need to click the checkbox near the parameter to override the values. As shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Material Instance Constant example](img/B03950_03_44A.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Material functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Material functions are graphs that contain a set of nodes that can be used across
    any number of Materials. If you often find yourself creating complex networks
    then it's better to make a Material function so you can contain all these complex
    networks in one single node. One thing to keep in mind is that Material function
    cannot contain any parameter nodes (for example, **Scalar Parameter**, **Vector
    Parameter**, **Texture Parameter**, and so on). To pass data into a Material function,
    you need to use a special **FunctionInput** node. Similarly, if you want data
    out of a Material function, you need to use the **FunctionOutput** node. By default,
    Material function creates one output for you but you can create more outputs if
    you want.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UI of Material function is almost the same as of Material editor. If you
    check the **Details** panel you will see some options to help you get the most
    out of your Material function. Let''s take a look at these options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Description**: This appears as a tooltip when you hover the mouse on this
    function node in Material graph.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Expose to Library**: Enable this to show your Material function when you
    right-click inside your Material graph.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Library Categories**: This list the categories this function belongs to.
    By default, it belongs to the **Misc** category but you can change it and add
    as many categories as you want.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Material functions cannot be applied surface, so if you want to use a Material
    function you must use it in a Material.
  prefs: []
  type: TYPE_NORMAL
- en: Material function example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create a Material function, first right-click in **Content Browser** and
    go to **Materials & Textures** and select **Material Function**. In this example,
    we will create a Material function called **Normal Map Adjuster** that can boost
    the intensity of a normal map. Let''s see what we need to create such a function:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Texture [INPUT]**: Obviously we need to pass a texture that needs to be modified.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Intensity [INPUT]**: We also need to pass how intense the normal should be.
    A value of **0** means no changes to the normal map and a value of **1** means
    a boosted normal effect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Result [OUTPUT]**: Finally we will output the result, which we can connect
    to the normal channel in our Material.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The final output node (result) can be renamed with any custom name you want.
    Select the node and, in the **Details** panel, change **Output Name**.
  prefs: []
  type: TYPE_NORMAL
- en: Open your Material function and right-click on the graph and search for **Input**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Material function example](img/B03950_03_45.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Select the **FunctionInput** node. You will see some properties in the **Details**
    panel for the **Input** node you just selected.
  prefs: []
  type: TYPE_NORMAL
- en: '![Material function example](img/B03950_03_46.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s take a look at these settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Input Name**: A custom name for the input. You can name it whatever you want.
    Here, I called it **Normal Texture**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**: Will be used as a tooltip when you hover over this input in
    Material graph.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Input Type**: Defines the type of input for this node.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Preview Value**: Value to use if this input is not connected in Material
    graph. Only used if **Use Preview Value as Default** is checked.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use Preview Value as Default**: If checked, it will use the **Preview Value**
    and will mark this input as optional. So when you use this function, you can leave
    this input unconnected. But if you disable this option, then you must connect
    the required node to this when in Material graph.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sort Priority**: Arranges this input in relation to other input nodes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s create a simple network to boost the normal effect. Take a look at the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Material function example](img/B03950_03_47.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here we are extracting the red, green, and blue channels separately. The reason
    behind this is simply that we need to multiply **Intensity** (scalar input value)
    by only the blue channel to increase the normal effect. The **Intensity** needs
    to be clamped between **0** and **1** and then inverted using the **1-x** (OneMinus)
    node because, when we use this Material function in a Material, we need **0**
    to have the default normal intensity and **1** to really boost the effect. Without
    the OneMinus node it will be the opposite, that is, **0** will boost the normal
    map effect and **1** will have a regular effect.
  prefs: []
  type: TYPE_NORMAL
- en: Now that the function is done, click the **Save** button on the toolbar.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Saving automatically compiles the Material.
  prefs: []
  type: TYPE_NORMAL
- en: Now to get this into Material, right-click inside the Material graph and search
    for **NormalMapAdjuster**. Then all you have to do is plug a **Normal** map and
    a **Scalar Parameter** to **NormalMapAdjuster** and connect it to the **Normal**
    channel.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If it doesn't show up in the context menu, make sure you enabled **Expose to
    Library** in Material Function.
  prefs: []
  type: TYPE_NORMAL
- en: '![Material function example](img/B03950_03_48.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In your Material instance you can adjust **NormalIntensity** in real time.
  prefs: []
  type: TYPE_NORMAL
- en: Layered Material
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Layered Materials are basically *Materials within Materials* and exist as an
    extension of Material function. The basic workflow is as follows: you create a
    **Make Material Attribute** (which features all the material attributes, such
    as **Base Color**, **Metallic**, **Specular**, **Roughness**, and so on) and you
    connect your nodes to it. Then you connect the output of **Make Material Attributes**
    to the input of the **Output Result** node.'
  prefs: []
  type: TYPE_NORMAL
- en: Layered Materials are most beneficial when your assets have different layers
    of materials. For example, think about a character with different elements such
    as metallic armor, leather gloves, skin, and so on. Defining each of these materials
    and blending them in a conventional way will make the material complexity increase
    significantly. If you use layered Material in such cases, you can define each
    of those materials as a single node and blend them very easily.
  prefs: []
  type: TYPE_NORMAL
- en: Creating layered Material using make material attributes
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'For this example we will create two simple layered Materials and blend them
    together in our final material. First, create a Material function and open it.
    In Material function, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the graph editor and search for **Make Material Attributes**
    and select the node from that menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a **Constant3Vector** node and connect it to **BaseColor** of **Make
    Material Attributes**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a constant value and connect it to **Metallic** of **Make Material Attributes**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create one more constant value and connect that to **Roughness** of **Make Material
    Attributes**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, connect **Make Material Attributes** to the output of Material function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The final Material function should look like this. Note the values I'm using
    for constant nodes.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating layered Material using make material attributes](img/B03950_03_49.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Since we want this to be **Metallic**, we set **Metallic** to **1**.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create a duplicate of this same Material function and make it a non-metallic
    Material with a different color. See the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating layered Material using make material attributes](img/B03950_03_50.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is a non-metallic Material and we are going to blend these two Materials
    in our Material editor using a default **Material Layer Blend** function.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you expose both of these Material functions so we can use them in
    Material editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open an existing Material or create a new one in **Content Browser** and open
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the graph and search for your Material functions (select both
    of them).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click again on the graph and search and select **MatLayerBlend_Simple**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect your Material functions to **MatLayerBlend_Simple**. Connect one function
    to **Base Material** and the other one to **Top Material**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, to blend these two materials we need an **Alpha (Scalar)** value. A value
    of **1** (white) will output **Base Material** and a value of **0** will output
    **Top Material**. A value of **0.5** will output a mix of both **Base** and **Top**
    materials.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since we are using layered Material we cannot directly connect this to the Material
    editor like other nodes. To make this work, there are two ways we can connect.
  prefs: []
  type: TYPE_NORMAL
- en: 'Method 1:'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'We can make the material use Material attributes instead of regular nodes.
    To use this feature, click anywhere on the graph and in the **Details** panel
    select **Use Material Attributes**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Method 1:](img/B03950_03_51.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When you enable this, the main material node will show only one node called
    Material attributes so you can connect the output of **MatLayerBlend_Simple**
    to this node.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a screenshot of the final material using this method:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Method 1:](img/B03950_03_52.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Method 2:'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'In this method, instead of using Material attributes for the main node we use
    **BreakMaterialAttributes** and connect them as regular nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the graph area and search and select **BreakMaterialAttributes**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the output of **MatLayerBlend_Simple** to **BreakMaterialAttributes**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: And finally, connect all the output nodes of **BreakMaterialAttributes** to
    the main node of Material editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following is a screenshot of the final material using this method:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Method 2:](img/B03950_03_53.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the next chapter we will use post processing techniques to enhance the look
    of your scene. We will also create a simple Material and use it in post process
    Material.
  prefs: []
  type: TYPE_NORMAL
