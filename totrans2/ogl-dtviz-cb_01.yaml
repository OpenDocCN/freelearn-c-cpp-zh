- en: Chapter 1. Getting Started with OpenGL
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 章. 开始使用 OpenGL
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Setting up a Windows-based development platform
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置基于 Windows 的开发平台
- en: Setting up a Mac-based development platform
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置基于 Mac 的开发平台
- en: Setting up a Linux-based development platform
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置基于 Linux 的开发平台
- en: Installing the GLFW library in Windows
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Windows 中安装 GLFW 库
- en: Installing the GLFW library in Mac OS X and Linux
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Mac OS X 和 Linux 中安装 GLFW 库
- en: Creating your first OpenGL application with GLFW
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 GLFW 创建您的第一个 OpenGL 应用程序
- en: Compiling and running your first OpenGL application in Windows
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Windows 中编译和运行您的第一个 OpenGL 应用程序
- en: Compiling and running your first OpenGL application in Mac OS X or Linux
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Mac OS X 或 Linux 中编译和运行您的第一个 OpenGL 应用程序
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: OpenGL is an ideal multiplatform, cross-language, and hardware-accelerated graphics
    rendering interface that is well suited to visualize large 2D and 3D datasets
    in many fields. In fact, OpenGL has become the industry standard to create stunning
    graphics, most notably in gaming applications and numerous professional tools
    for 3D modeling. As we collect more and more data in fields ranging from biomedical
    imaging to wearable computing (especially with the evolution of Big Data), a high-performance
    platform for data visualization is becoming an essential component of many future
    applications. Indeed, the visualization of massive datasets is becoming an increasingly
    challenging problem for developers, scientists, and engineers in many fields.
    Therefore, OpenGL can provide a unified solution for the creation of impressive,
    stunning visuals in many real-time applications.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: OpenGL 是一个理想的跨平台、跨语言和硬件加速的图形渲染接口，非常适合在许多领域中可视化大量的 2D 和 3D 数据集。实际上，OpenGL 已经成为创建令人惊叹的图形的行业标准，尤其是在游戏应用和众多
    3D 建模的专业工具中。随着我们在从生物医学成像到可穿戴计算（特别是随着大数据的发展）等领域的数据收集越来越多，高性能的数据可视化平台正成为许多未来应用的一个基本组成部分。确实，大规模数据集的可视化正在成为许多领域中的开发者、科学家和工程师面临的一个越来越具有挑战性的问题。因此，OpenGL
    可以提供许多实时应用中创建令人印象深刻、令人惊叹视觉的统一解决方案。
- en: The APIs of OpenGL encapsulate the complexity of hardware interactions while
    allowing users to have low-level control over the process. From a sophisticated
    multiserver setup to a mobile device, OpenGL libraries provide developers with
    an easy-to-use interface for high-performance graphics rendering. The increasing
    availability and capability of graphics hardware and mass storage devices, coupled
    with their decreasing cost, further motivate the development of interactive OpenGL-based
    data visualization tools.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: OpenGL 的 API 封装了硬件交互的复杂性，同时允许用户对过程进行低级控制。从复杂的多服务器设置到移动设备，OpenGL 库为开发者提供了一个易于使用的界面，用于高性能图形渲染。图形硬件和大量存储设备的可用性和能力的不断提高，以及它们成本的降低，进一步推动了基于交互式
    OpenGL 的数据可视化工具的开发。
- en: Modern computers come with dedicated **Graphics Processing Units** (**GPUs**),
    highly customized pieces of hardware designed to accelerate graphics rendering.
    GPUs can also be used to accelerate general-purpose, highly parallelizable computational
    tasks. By leveraging hardware and OpenGL, we can produce highly interactive and
    aesthetically pleasing results.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现代计算机配备了专门的**图形处理单元**（**GPU**），这是高度定制的硬件组件，旨在加速图形渲染。GPU 还可用于加速通用、高度可并行化的计算任务。通过利用硬件和
    OpenGL，我们可以产生高度交互和美观的结果。
- en: This chapter introduces the essential tools to develop OpenGL-based data visualization
    applications and provides a step-by-step tutorial on how to set up the environment
    for our first demo application. In addition, this chapter outlines the steps to
    set up a popular tool called CMake, which is a cross-platform software that automates
    the process of generating standard build files (for example, makefiles in Linux
    that define the compilation parameters and commands) with simple configuration
    files. The CMake tool will be used to compile additional libraries in the future,
    including the GLFW (OpenGL FrameWork) library introduced later in this chapter.
    Briefly, the GLFW library is an open source, multiplatform library that allows
    users to create and manage windows with OpenGL contexts as well as handle inputs
    from peripheral devices such as the mouse and keyboard. By default, OpenGL itself
    does not support other peripherals; thus, the GLFW library is used to fill in
    the gap. We hope that this detailed tutorial will be especially useful for beginners
    who are interested in exploring OpenGL for data visualization but have little
    or no prior experience. However, we will assume that you are familiar with the
    C/C++ programming language.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a Windows-based development platform
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are various development tools available to create applications in the
    Windows environment. In this book, we will focus on creating OpenGL applications
    using Visual C++ from Microsoft Visual Studio 2013, given its extensive documentation
    and support.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Installing Visual Studio 2013
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we outline the steps to install Visual Studio 2013.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We assume that you have already installed Windows 7.0 or higher. For optimal
    performance, we recommend that you get a dedicated graphics card, such as NVIDIA
    GeForce graphics cards, and have at least 10 GB of free disk space as well as
    4 GB of RAM on your computer. Download and install the latest driver for your
    graphics card.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install Microsoft Visual Studio 2013 for free, download the Express 2013
    version for Windows Desktop from Microsoft''s official website (refer to [https://www.visualstudio.com/en-us/downloads/](https://www.visualstudio.com/en-us/downloads/)).
    Once you have downloaded the installer executable, we can start the process. By
    default, we will assume that programs are installed in the following path:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/9727OS_01_01.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
- en: To verify the installation, click on the **Launch** button at the end of the
    installation, and it will execute the VS Express 2013 for Desktop application
    for the first time.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Installing CMake in Windows
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we outline the steps to install CMake, which is a popular tool
    that automates the process of creating standard build files for Visual Studio
    (among other tools).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To obtain the CMake tool (CMake 3.2.1), you can download the executable (`cmake-3.2.1-win32-x86.exe`)
    from [http://www.cmake.org/download/](http://www.cmake.org/download/).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The installation wizard will guide you through the process (select **Add CMake
    to the system PATH for all users** when prompted for installation options). To
    verify the installation, run CMake(`cmake-gui`).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/9727OS_01_02.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
- en: At this point, you should have both Visual Studio 2013 and CMake successfully
    installed on your machine and be ready to compile/install the GLFW library to
    create your first OpenGL application.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a Mac-based development platform
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One important advantage of using OpenGL is the possibility of cross-compiling
    the same source code on different platforms. If you are planning to develop your
    application on a Mac platform, you can easily set up your machine for development
    using the upcoming steps. We assume that you have either Mac OS X 10.9 or higher
    installed. OpenGL updates are integrated into the system updates for Mac OS X
    through the graphics driver.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Installing Xcode and command-line tools
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Xcode development software from Apple provides developers with a comprehensive
    set of tools, which include an IDE, OpenGL headers, compilers, and debugging tools,
    to create native Mac applications. To simplify the process, we will compile our
    code using the command-line interface that shares most of the common features
    in Linux.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are using Mac OS X 10.9 or higher, you can download Xcode through the
    App Store shipped with Mac OS. Full installation support and instructions are
    available on the Apple Developer website ([https://developer.apple.com/xcode/](https://developer.apple.com/xcode/)).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can install the command-line tools in Xcode through the following steps:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Search for the keyword `Terminal` in **Spotlight** and run **Terminal**.![How
    to do it...](img/9727OS_01_03.jpg)
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute the following command in the terminal:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that if you have previously installed the command-line tools, an error
    stating "command-line are already installed" will appear. In this case, simply
    skip to step 4 to verify the installation.
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **Install** button to directly install the command-line tools.
    This will install basic compiling tools such as **gcc** and **make** for application
    development purposes (note that CMake needs to be installed separately).
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, enter `gcc --version` to verify the installation.![How to do it...](img/9727OS_01_04.jpg)
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See also
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you encounter the **command not found** error or other similar issues, make
    sure that the command-line tools are installed successfully. Apple provides an
    extensive set of documentation, and more information on installing Xcode can be
    found at [https://developer.apple.com/xcode](https://developer.apple.com/xcode).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Installing MacPorts and CMake
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we outline the steps to install MacPorts, which greatly simplifies
    the subsequent setup steps, and CMake for Mac.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Similar to the Windows installation, you can download the binary distribution
    of **CMake** from [http://www.cmake.org/cmake/resources/software.html](http://www.cmake.org/cmake/resources/software.html)
    and manually configure the command-line options. However, to simplify the installation
    and automate the configuration process, we highly recommend that you use MacPorts.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install MacPorts, follow these steps:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the MacPorts package installer for the corresponding version of Mac
    OS X ([https://guide.macports.org/#installing.macports](https://guide.macports.org/#installing.macports)):'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Mac OS X 10.10 Yosemite: [https://distfiles.macports.org/MacPorts/MacPorts-2.3.3-10.10-Yosemite.pkg](https://distfiles.macports.org/MacPorts/MacPorts-2.3.3-10.10-Yosemite.pkg)'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Mac OS X 10.9 Mavericks: [https://distfiles.macports.org/MacPorts/MacPorts-2.3.3-10.9-Mavericks.pkg](https://distfiles.macports.org/MacPorts/MacPorts-2.3.3-10.9-Mavericks.pkg)'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Double-click on the package installer and follow the onscreen instructions.![How
    to do it...](img/9727OS_01_05.jpg)
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify the installation in the terminal by typing in `port version`, which
    returns the version of MacPorts currently installed (`Version: 2.3.3` in the preceding
    package).'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To install **CMake** on Mac, follow these steps:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Open the **Terminal** application.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute the following command:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: To verify the installation, enter `cmake –version` to show the current version
    installed and enter `cmake-gui` to explore the GUI.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/9727OS_01_06.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
- en: At this point, your Mac is configured for OpenGL development and is ready to
    compile your first OpenGL application. For those who have been more accustomed
    to GUIs, using the command-line interface in Mac can initially be an overwhelming
    experience. However, in the long run, it is a rewarding learning experience due
    to its overall simplicity. Command-line tools and interfaces are often more time-invariant
    compared to constantly evolving GUIs. At the end of the day, you can just copy
    and paste the same command lines, thereby saving precious time needed to consult
    new documentation every time a GUI changes.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a Linux-based development platform
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To prepare your development environment on the Linux platform, we can utilize
    the powerful Debian Package Management system. The `apt-get` or `aptitude` program
    automatically retrieves the precompiled packages from the server and also resolves
    and installs all dependent packages that are required. If you are using non-Debian
    based platform, such as Fedora, you can find the equivalents by searching for
    the keywords of each packages listed in this recipe.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We assume that you have successfully installed all updates and latest graphics
    drivers associated with your graphics hardware. Ubuntu 12.04 or higher has support
    for third-party proprietary NVIDIA and AMD graphics drivers, and more information
    can be found at [https://help.ubuntu.com/community/BinaryDriverHowto](https://help.ubuntu.com/community/BinaryDriverHowto).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the following steps to install all development tools and the associated
    dependencies:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: Open a terminal.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the update command:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Enter the install command and enter `y` for all prompts:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Verify the results:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If successful, this command should return the current version of `gcc` installed.
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In summary, the `apt-get update` command automatically updates the local database
    in the Debian Package Management system. This ensures that the latest packages
    are retrieved and installed in the process. The `apt-get` system also provides
    other package management features, such as package removal (uninstall), dependency
    retrieval, as well as package upgrades. These advanced functions are outside the
    scope of this book, but more information can be found at [https://wiki.debian.org/apt-get](https://wiki.debian.org/apt-get).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: The preceding commands install a number of packages to your machine. Here, we
    will briefly explain the purpose of each package.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: The `build-essential` package, as the name itself suggests, encapsulates the
    essential packages, namely gcc and g++, that are required to compile C and C++
    source code in Linux. Additionally, it will download header files and resolve
    all dependencies in the process.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: The `cmake-gui` package is the CMake program described earlier in the chapter.
    Instead of downloading CMake directly from the website and compiling from the
    source, it retrieves the latest supported version that had been compiled, tested,
    and released by the Ubuntu community. One advantage of using the Debian Package
    Management system is the stability and ease of updating in the future. However,
    for users who are looking for the cutting-edge version, apt-get based systems
    would be a few versions behind.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: The `xorg-dev` and `libglu1-mesa-dev` packages are the development files required
    to compile the GLFW library. These packages include header files and libraries
    required by other programs. If you choose to use the precompiled binary version
    of GLFW, you may be able to skip some of the packages. However, we highly recommend
    that you follow the steps for the purpose of this tutorial.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For more information, most of the steps described are documented and explained
    in depth in this online documentation: [https://help.ubuntu.com/community/UsingTheTerminal](https://help.ubuntu.com/community/UsingTheTerminal).'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: Installing the GLFW library in Windows
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are two ways to install the GLFW library in Windows, both of which will
    be discussed in this section. The first approach involves compiling the GLFW source
    code directly with CMake for full control. However, to simplify the process, we
    suggest that you download the precompiled binary distribution.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We assume that you have successfully installed both Visual Studio 2013 and CMake,
    as described in the earlier section. For completeness, we will demonstrate how
    to install GLFW using CMake.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To use the precompiled binary package for GLFW, follow these steps:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Create the `C:/Program Files (x86)/glfw-3.0.4` directory. Grant the necessary
    permissions when prompted.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the `glfw-3.0.4.bin.WIN32.zip` package from [http://sourceforge.net/projects/glfw/files/glfw/3.0.4/glfw-3.0.4.bin.WIN32.zip](http://sourceforge.net/projects/glfw/files/glfw/3.0.4/glfw-3.0.4.bin.WIN32.zip)
    and unzip the package.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy all the extracted content inside the `glfw-3.0.4.bin.WIN32` folder (for
    example, include `lib-msvc2012`) into the `C:/Program Files (x86)/glfw-3.0.4`
    directory. Grant permissions when prompted.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the `lib-msvc2012` folder to `lib`inside the `C:/Program Files (x86)/glfw-3.0.4`
    directory. Grant permissions when prompted.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Alternatively, to compile the source files directly, follow these procedures:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: Download the source package from [http://sourceforge.net/projects/glfw/files/glfw/3.0.4/glfw-3.0.4.zip](http://sourceforge.net/projects/glfw/files/glfw/3.0.4/glfw-3.0.4.zip)
    and unzip the package on the desktop. Create a new folder called `build` inside
    the extracted `glfw-3.0.4` folder to store the binaries.and open `cmake-gui`.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select `glfw-3.0.4` (from the desktop) as the source directory and `glfw-3.0.4/build`
    as the build directory. The screenshot is shown as follows:![How to do it...](img/9727OS_01_07.jpg)
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Generate** and select **Visual Studio 12 2013** in the prompt.![How
    to do it...](img/9727OS_01_08.jpg)
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Generate** again.![How to do it...](img/9727OS_01_09.jpg)
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `build` directory and double-click on **GLFW.sln** to open Visual Studio.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Visual Studio, click Build Solution (press *F7*).
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy **build/src/Debug/glfw3.lib** to **C:/Program Files (x86)/glfw-3.0.4/lib**.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the `include` directory (inside `glfw-3.0.4/include`) to **C:/Program Files
    (x86)/glfw-3.0.4/**.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After this step, we should have the `include` (`glfw3.h`) and `library` (`glfw3.lib`)
    files inside the `C:/Program Files (x86)/glfw-3.0.4` directory, as shown in the
    setup procedure using precompiled binaries.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: Installing the GLFW library in Mac OS X and Linux
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The installation procedures for Mac and Linux are essentially identical using
    the command-line interface. To simplify the process, we recommend that you use
    MacPorts for Mac users.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We assume that you have successfully installed the basic development tools,
    including CMake, as described in the earlier section. For maximum flexibility,
    we can compile the library directly from the source code (refer to [http://www.glfw.org/docs/latest/compile.html](http://www.glfw.org/docs/latest/compile.html)
    and [http://www.glfw.org/download.html](http://www.glfw.org/download.html)).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For Mac users, enter the following command in a terminal to install GLFW using
    MacPorts:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'For Linux users (or Mac users who would like to practice using the command-line
    tools), here are the steps to compile and install the GLFW source package directly
    with the command-line interface:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new folder called `opengl_dev` and change the current directory to
    the new path:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Obtain a copy of the GLFW source package (`glfw-3.0.4`) from the official repository:
    [http://sourceforge.net/projects/glfw/files/glfw/3.0.4/glfw-3.0.4.tar.gz](http://sourceforge.net/projects/glfw/files/glfw/3.0.4/glfw-3.0.4.tar.gz).'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extract the package.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Perform the compilation and installation:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works...
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first set of commands create a new working directory to store the new files
    retrieved using the `wget` command, which downloads a copy of the GLFW library
    to the current directory. The `tar xzvf` command extracts the compressed packages
    and creates a new folder with all the contents.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: Then, the `cmake` command automatically generates the necessary build files
    that are needed for the compilation process to the current `build` directory.
    This process also checks for missing dependencies and verifies the versioning
    of the applications.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: The `make` command then takes all instructions from the Makefile script that
    is generated automatically and compiles the source code into libraries.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: The `sudo make install` command installs the library header files as well as
    the static or shared libraries onto your machine. As this command requires writing
    to the root directory, the `sudo` command is needed to grant such permissions.
    By default, the files will be copied to the `/usr/local` directory. In the rest
    of the book, we will assume that the installations follow these default paths.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: For advanced users, we can optimize the compilation by configuring the packages
    with the CMake GUI (`cmake-gui`).
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/9727OS_01_10.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
- en: For example, you can enable the `BUILD_SHARED_LIBS` option if you are planning
    to compile the GLFW library as a shared library. In this book, we will not explore
    the full functionality of the GLFW library, but these options can be useful to
    developers who are looking for further customizations. Additionally, you can customize
    the installation prefix (`CMAKE_INSTALL_PREFIX`) if you would like to install
    the library files at a separate location.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first OpenGL application with GLFW
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have successfully configured your development platform and installed
    the GLFW library, we will provide a tutorial on how to create your first OpenGL-based
    application.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经成功配置了开发平台并安装了GLFW库，我们将提供如何创建您的第一个基于OpenGL的应用程序的教程。
- en: Getting ready
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: At this point, you should already have all the pre requisite tools ready regardless
    of which operating system you may have, so we will immediately jump into building
    your first OpenGL application using these tools.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，无论您使用的是哪种操作系统，您都应该已经准备好了所有预置工具，因此我们将立即开始使用这些工具构建您的第一个OpenGL应用程序。
- en: How to do it...
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following code outlines the basic steps to create a simple OpenGL program
    that utilizes the GLFW library and draws a rotating triangle:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码概述了创建一个简单OpenGL程序的基本步骤，该程序利用GLFW库并绘制一个旋转的三角形：
- en: 'Create an empty file, and then include the header file for the GLFW library
    and standard C++ libraries:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个空文件，然后包含GLFW库头文件和标准C++库的头文件：
- en: '[PRE9]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Initialize GLFW and create a GLFW window object (640 x 480):'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化GLFW并创建一个GLFW窗口对象（640 x 480）：
- en: '[PRE10]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Define a loop that terminates when the window is closed:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个循环，当窗口关闭时终止：
- en: '[PRE11]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Set up the viewport (using the width and height of the window) and clear the
    screen color buffer:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置视口（使用窗口的宽度和高度）并清除屏幕颜色缓冲区：
- en: '[PRE12]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Set up the camera matrix. Note that further details on the camera model will
    be discussed in [Chapter 3](ch03.html "Chapter 3. Interactive 3D Data Visualization"),
    *Interactive 3D Data Visualization*:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置相机矩阵。注意，关于相机模型的更多细节将在[第3章](ch03.html "第3章。交互式3D数据可视化") *交互式3D数据可视化*中讨论：
- en: '[PRE13]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Draw a rotating triangle and set a different color (red, green, and blue channels)
    for each vertex (*x*, *y*, and *z*) of the triangle. The first line rotates the
    triangle over time:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绘制一个旋转的三角形，并为三角形的每个顶点（*x*，*y*，和*z*）设置不同的颜色（红色、绿色和蓝色通道）。第一行代码使三角形随时间旋转：
- en: '[PRE14]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Swap the front and back buffers (GLFW uses double buffering) to update the
    screen and process all pending events:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 交换前后缓冲区（GLFW使用双缓冲），以更新屏幕并处理所有挂起的事件：
- en: '[PRE15]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Release the memory and terminate the GLFW library. Then, exit the application:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 释放内存并终止GLFW库。然后，退出应用程序：
- en: '[PRE16]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Save the file as `main.cpp` using the text editor of your choice.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您选择的文本编辑器将文件保存为`main.cpp`。
- en: How it works...
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: By including the GLFW library header, `glfw3.h`, we automatically import all
    necessary files from the OpenGL library. Most importantly, GLFW automatically
    determines the platform and thus allows you to write portable source code seamlessly.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 通过包含GLFW库头文件`glfw3.h`，我们自动导入OpenGL库中所有必要的文件。最重要的是，GLFW自动确定平台，从而允许您无缝地编写可移植的源代码。
- en: In the main function, we must first initialize the GLFW library with the **glfwInit**
    function in the main thread. This is required before any GLFW functions can be
    used. Before a program exits, GLFW should be terminated to release any allocated
    resources.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在主函数中，我们必须首先使用**glfwInit**函数在主线程中初始化GLFW库。在使用任何GLFW函数之前，这是必需的。在程序退出之前，GLFW应该被终止以释放任何分配的资源。
- en: Then, the **glfwCreateWindow** function creates a window and its associated
    context, and it also returns a pointer to the `GLFWwindow` object. Here, we can
    define the width, height, title, and other properties for the window. After the
    window is created, we then call the **glfwMakeContextCurrent** function to switch
    the context and make sure that the context of the specified window is current
    on the calling thread.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，`glfwCreateWindow`函数创建一个窗口及其相关上下文，并且它还返回一个指向`GLFWwindow`对象的指针。在这里，我们可以定义窗口的宽度、高度、标题和其他属性。在窗口创建后，我们接着调用`glfwMakeContextCurrent`函数来切换上下文，并确保指定窗口的上下文在调用线程上是当前的。
- en: At this point, we are ready to render our graphics element on the window. The
    **while** loop provides a mechanism to redraw our graphics as long as the window
    remains open. OpenGL requires an explicit setup on the camera parameters; further
    details will be discussed in the upcoming chapters. In the future, we can provide
    different parameters to simulate perspective and also handle more complicated
    issues (such as anti-aliasing). For now, we have set up a simple scene to render
    a basic primitive shape (namely a triangle) and fixed the color for the vertices.
    Users can modify the parameters in the **glColor3f** and **glVertex3f** functions
    to change the color as well as the position of the vertices.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: This example demonstrates the basics required to create graphics using OpenGL.
    Despite the simplicity of the sample code, it provides a nice introductory framework
    on how you can create high-performance graphics rendering applications with graphics
    hardware using OpenGL and GLFW.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: Compiling and running your first OpenGL application in Windows
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are several ways to set up an OpenGL project. Here, we create a sample
    project using Visual Studio 2013 or higher and provide a complete walkthrough
    for the first-time configuration of the OpenGL and GLFW libraries. These same
    steps can be incorporated into your own projects in the future.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Assuming that you have both Visual Studio 2013 and GLFW (version 3.0.4) installed
    successfully on your environment, we will start our project from scratch.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Visual Studio 2013, use the following steps to create a new project and
    compile the source code:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: Open Visual Studio 2013 (VS Express 2013 for desktop).
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new Win32 Console Application and name it as `Tutorial1`.![How to do
    it...](img/9727OS_01_11.jpg)
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Empty project** option, and click on **Finish**.![How to do it...](img/9727OS_01_12.jpg)
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on **Source Files**, and add a new C++ source file (**Add** | **New
    Item**) called **main.cpp**.![How to do it...](img/9727OS_01_13.jpg)
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy and paste the source code from the previous section into the **main.cpp**
    and save it.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open **Project Properties** (*Alt* + *F7*).
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the `include` path of the GLFW library, **C:\Program Files (x86)\glfw-3.0.4\include**,
    by navigating to **Configuration Properties** | **C/C++** | **General** | **Additional
    Include Directories**.![How to do it...](img/9727OS_01_14.jpg)
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Add the GLFW library path, **C:\Program Files (x86)\glfw-3.0.4\lib**, by navigating
    to **Configuration Properties** | **Linker** | **General** | **Additional Library
    Directories**.![How to do it...](img/9727OS_01_15.jpg)
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the GLFW and OpenGL libraries (`glu32.lib`, `glfw3.lib` and `opengl32.lib`)
    by navigating to **Configuration Properties** | **Linker** | **Input** | **Additional
    Dependencies**.![How to do it...](img/9727OS_01_16.jpg)
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build **Solution** (press *F7*).
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the program (press *F5*).
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is your first OpenGL application showing a rotating triangle that is running
    natively on your graphics hardware. Although we have only defined the color of
    the vertices to be red, green, and blue, the graphics engine interpolates the
    intermediate results and all calculations are performed using the graphics hardware.
    The screenshot is shown as follows:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/9727OS_01_17.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
- en: Compiling and running your first OpenGL application in Mac OS X or Linux
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting up a Linux or Mac machine is made much simpler with the command-line
    interface. We assume that you have all the components that were discussed earlier
    ready, and all default paths are used as recommended.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will start by compiling the sample code described previously. You can download
    the complete code package from the official website of Packt Publishing [https://www.packtpub.com](https://www.packtpub.com).
    We assume that all files are saved to a top-level directory called `code` and
    the `main.cpp` file is saved inside the `/code/Tutorial1` subdirectory.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open a terminal or an equivalent command-line interface.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the current directory to the working directory:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Enter the following command to compile the program:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Run the program:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Here is your first OpenGL application that runs natively on your graphics hardware
    and displays a rotating triangle. Although we have defined the color of only three
    vertices to be red, green, and blue, the graphics engine interpolates the intermediate
    results and all calculations are performed using the graphics hardware.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/9727OS_01_18.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
- en: 'To further simplify the process, we have provided a compile script in the sample
    code. You can execute the script by simply typing the following commands in a
    terminal:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: You may notice that the OpenGL code is platform-independent. One of the most
    powerful features of the GLFW library is that it handles the windows management
    and other platform-dependent functions behind the scene. Therefore, the same source
    code (`main.cpp`) can be shared and compiled on multiple platforms without the
    need for any changes.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
