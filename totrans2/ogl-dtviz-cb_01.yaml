- en: Chapter 1. Getting Started with OpenGL
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 章. 开始使用 OpenGL
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Setting up a Windows-based development platform
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置基于 Windows 的开发平台
- en: Setting up a Mac-based development platform
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置基于 Mac 的开发平台
- en: Setting up a Linux-based development platform
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置基于 Linux 的开发平台
- en: Installing the GLFW library in Windows
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Windows 中安装 GLFW 库
- en: Installing the GLFW library in Mac OS X and Linux
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Mac OS X 和 Linux 中安装 GLFW 库
- en: Creating your first OpenGL application with GLFW
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 GLFW 创建您的第一个 OpenGL 应用程序
- en: Compiling and running your first OpenGL application in Windows
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Windows 中编译和运行您的第一个 OpenGL 应用程序
- en: Compiling and running your first OpenGL application in Mac OS X or Linux
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Mac OS X 或 Linux 中编译和运行您的第一个 OpenGL 应用程序
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: OpenGL is an ideal multiplatform, cross-language, and hardware-accelerated graphics
    rendering interface that is well suited to visualize large 2D and 3D datasets
    in many fields. In fact, OpenGL has become the industry standard to create stunning
    graphics, most notably in gaming applications and numerous professional tools
    for 3D modeling. As we collect more and more data in fields ranging from biomedical
    imaging to wearable computing (especially with the evolution of Big Data), a high-performance
    platform for data visualization is becoming an essential component of many future
    applications. Indeed, the visualization of massive datasets is becoming an increasingly
    challenging problem for developers, scientists, and engineers in many fields.
    Therefore, OpenGL can provide a unified solution for the creation of impressive,
    stunning visuals in many real-time applications.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: OpenGL 是一个理想的跨平台、跨语言和硬件加速的图形渲染接口，非常适合在许多领域中可视化大量的 2D 和 3D 数据集。实际上，OpenGL 已经成为创建令人惊叹的图形的行业标准，尤其是在游戏应用和众多
    3D 建模的专业工具中。随着我们在从生物医学成像到可穿戴计算（特别是随着大数据的发展）等领域的数据收集越来越多，高性能的数据可视化平台正成为许多未来应用的一个基本组成部分。确实，大规模数据集的可视化正在成为许多领域中的开发者、科学家和工程师面临的一个越来越具有挑战性的问题。因此，OpenGL
    可以提供许多实时应用中创建令人印象深刻、令人惊叹视觉的统一解决方案。
- en: The APIs of OpenGL encapsulate the complexity of hardware interactions while
    allowing users to have low-level control over the process. From a sophisticated
    multiserver setup to a mobile device, OpenGL libraries provide developers with
    an easy-to-use interface for high-performance graphics rendering. The increasing
    availability and capability of graphics hardware and mass storage devices, coupled
    with their decreasing cost, further motivate the development of interactive OpenGL-based
    data visualization tools.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: OpenGL 的 API 封装了硬件交互的复杂性，同时允许用户对过程进行低级控制。从复杂的多服务器设置到移动设备，OpenGL 库为开发者提供了一个易于使用的界面，用于高性能图形渲染。图形硬件和大量存储设备的可用性和能力的不断提高，以及它们成本的降低，进一步推动了基于交互式
    OpenGL 的数据可视化工具的开发。
- en: Modern computers come with dedicated **Graphics Processing Units** (**GPUs**),
    highly customized pieces of hardware designed to accelerate graphics rendering.
    GPUs can also be used to accelerate general-purpose, highly parallelizable computational
    tasks. By leveraging hardware and OpenGL, we can produce highly interactive and
    aesthetically pleasing results.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现代计算机配备了专门的**图形处理单元**（**GPU**），这是高度定制的硬件组件，旨在加速图形渲染。GPU 还可用于加速通用、高度可并行化的计算任务。通过利用硬件和
    OpenGL，我们可以产生高度交互和美观的结果。
- en: This chapter introduces the essential tools to develop OpenGL-based data visualization
    applications and provides a step-by-step tutorial on how to set up the environment
    for our first demo application. In addition, this chapter outlines the steps to
    set up a popular tool called CMake, which is a cross-platform software that automates
    the process of generating standard build files (for example, makefiles in Linux
    that define the compilation parameters and commands) with simple configuration
    files. The CMake tool will be used to compile additional libraries in the future,
    including the GLFW (OpenGL FrameWork) library introduced later in this chapter.
    Briefly, the GLFW library is an open source, multiplatform library that allows
    users to create and manage windows with OpenGL contexts as well as handle inputs
    from peripheral devices such as the mouse and keyboard. By default, OpenGL itself
    does not support other peripherals; thus, the GLFW library is used to fill in
    the gap. We hope that this detailed tutorial will be especially useful for beginners
    who are interested in exploring OpenGL for data visualization but have little
    or no prior experience. However, we will assume that you are familiar with the
    C/C++ programming language.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了开发基于OpenGL的数据可视化应用程序的基本工具，并提供了设置第一个演示应用程序环境的逐步教程。此外，本章概述了设置一个名为CMake的流行工具的步骤，CMake是一个跨平台软件，它通过简单的配置文件自动化生成标准构建文件（例如，Linux中的makefiles，定义编译参数和命令）的过程。在未来的开发中，我们将使用CMake工具编译额外的库，包括本章后面介绍的GLFW（OpenGL框架）库。简而言之，GLFW库是一个开源的多平台库，允许用户使用OpenGL上下文创建和管理窗口，以及处理来自鼠标和键盘等外围设备的输入。默认情况下，OpenGL本身不支持其他外围设备；因此，我们使用GLFW库来填补这一空白。我们希望这个详细的教程对那些对探索OpenGL进行数据可视化感兴趣但经验很少或没有经验的初学者特别有用。然而，我们将假设你已经熟悉C/C++编程语言。
- en: Setting up a Windows-based development platform
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置基于Windows的开发平台
- en: There are various development tools available to create applications in the
    Windows environment. In this book, we will focus on creating OpenGL applications
    using Visual C++ from Microsoft Visual Studio 2013, given its extensive documentation
    and support.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows环境中，有各种开发工具可用于创建应用程序。在本书中，我们将专注于使用微软Visual Studio 2013中的Visual C++创建OpenGL应用程序，鉴于其广泛的文档和支持。
- en: Installing Visual Studio 2013
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Visual Studio 2013
- en: In this section, we outline the steps to install Visual Studio 2013.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们概述了安装Visual Studio 2013的步骤。
- en: Getting ready
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We assume that you have already installed Windows 7.0 or higher. For optimal
    performance, we recommend that you get a dedicated graphics card, such as NVIDIA
    GeForce graphics cards, and have at least 10 GB of free disk space as well as
    4 GB of RAM on your computer. Download and install the latest driver for your
    graphics card.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设你已经安装了Windows 7.0或更高版本。为了获得最佳性能，我们建议你获得一块专用显卡，例如NVIDIA GeForce显卡，并在你的计算机上至少有10
    GB的空闲磁盘空间以及4 GB的RAM。下载并安装你显卡的最新驱动程序。
- en: How to do it...
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To install Microsoft Visual Studio 2013 for free, download the Express 2013
    version for Windows Desktop from Microsoft''s official website (refer to [https://www.visualstudio.com/en-us/downloads/](https://www.visualstudio.com/en-us/downloads/)).
    Once you have downloaded the installer executable, we can start the process. By
    default, we will assume that programs are installed in the following path:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要免费安装Microsoft Visual Studio 2013，请从微软的官方网站下载Windows桌面Express 2013版本（参考[https://www.visualstudio.com/en-us/downloads/](https://www.visualstudio.com/en-us/downloads/)）。一旦下载了安装程序可执行文件，我们就可以开始这个过程。默认情况下，我们将假设程序安装在以下路径：
- en: '![How to do it...](img/9727OS_01_01.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/9727OS_01_01.jpg)'
- en: To verify the installation, click on the **Launch** button at the end of the
    installation, and it will execute the VS Express 2013 for Desktop application
    for the first time.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证安装，点击安装结束处的**启动**按钮，它将首次执行VS Express 2013 for Desktop应用程序。
- en: Installing CMake in Windows
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Windows中安装CMake
- en: In this section, we outline the steps to install CMake, which is a popular tool
    that automates the process of creating standard build files for Visual Studio
    (among other tools).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们概述了安装CMake的步骤，CMake是一个流行的工具，它自动化了为Visual Studio（以及其他工具）创建标准构建文件的过程。
- en: Getting ready
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To obtain the CMake tool (CMake 3.2.1), you can download the executable (`cmake-3.2.1-win32-x86.exe`)
    from [http://www.cmake.org/download/](http://www.cmake.org/download/).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取CMake工具（CMake 3.2.1），您可以从[http://www.cmake.org/download/](http://www.cmake.org/download/)下载可执行文件（`cmake-3.2.1-win32-x86.exe`）。
- en: How to do it…
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: The installation wizard will guide you through the process (select **Add CMake
    to the system PATH for all users** when prompted for installation options). To
    verify the installation, run CMake(`cmake-gui`).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 安装向导将引导您完成过程（在提示安装选项时，选择**将CMake添加到系统PATH以供所有用户使用**）。要验证安装，请运行CMake（`cmake-gui`）。
- en: '![How to do it…](img/9727OS_01_02.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作…](img/9727OS_01_02.jpg)'
- en: At this point, you should have both Visual Studio 2013 and CMake successfully
    installed on your machine and be ready to compile/install the GLFW library to
    create your first OpenGL application.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您应该在您的机器上成功安装了Visual Studio 2013和CMake，并准备好编译/安装GLFW库以创建您的第一个OpenGL应用程序。
- en: Setting up a Mac-based development platform
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置基于Mac的开发平台
- en: One important advantage of using OpenGL is the possibility of cross-compiling
    the same source code on different platforms. If you are planning to develop your
    application on a Mac platform, you can easily set up your machine for development
    using the upcoming steps. We assume that you have either Mac OS X 10.9 or higher
    installed. OpenGL updates are integrated into the system updates for Mac OS X
    through the graphics driver.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 使用OpenGL的一个重要优势是可以在不同的平台上交叉编译相同的源代码。如果您计划在Mac平台上开发应用程序，您可以使用以下步骤轻松设置开发环境。我们假设您已安装Mac
    OS X 10.9或更高版本。OpenGL更新已集成到Mac OS X的系统更新中，通过图形驱动程序进行。
- en: Installing Xcode and command-line tools
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Xcode和命令行工具
- en: The Xcode development software from Apple provides developers with a comprehensive
    set of tools, which include an IDE, OpenGL headers, compilers, and debugging tools,
    to create native Mac applications. To simplify the process, we will compile our
    code using the command-line interface that shares most of the common features
    in Linux.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果公司的Xcode开发软件为开发者提供了一套全面的工具，包括IDE、OpenGL头文件、编译器和调试工具，用于创建原生Mac应用程序。为了简化过程，我们将使用与Linux中共享大多数常见功能的命令行界面来编译我们的代码。
- en: Getting ready
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: If you are using Mac OS X 10.9 or higher, you can download Xcode through the
    App Store shipped with Mac OS. Full installation support and instructions are
    available on the Apple Developer website ([https://developer.apple.com/xcode/](https://developer.apple.com/xcode/)).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用Mac OS X 10.9或更高版本，您可以通过随Mac OS一起提供的App Store下载Xcode。完整的安装支持和说明可在苹果开发者网站上找到（[https://developer.apple.com/xcode/](https://developer.apple.com/xcode/))。
- en: How to do it...
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We can install the command-line tools in Xcode through the following steps:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 注意事项
- en: Search for the keyword `Terminal` in **Spotlight** and run **Terminal**.![How
    to do it...](img/9727OS_01_03.jpg)
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Spotlight**中搜索关键字`Terminal`并运行**Terminal**。![如何操作...](img/9727OS_01_03.jpg)
- en: 'Execute the following command in the terminal:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中执行以下命令：
- en: '[PRE0]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that if you have previously installed the command-line tools, an error
    stating "command-line are already installed" will appear. In this case, simply
    skip to step 4 to verify the installation.
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您之前已安装命令行工具，将出现错误信息“命令行工具已安装”。在这种情况下，只需跳到步骤4以验证安装。
- en: Click on the **Install** button to directly install the command-line tools.
    This will install basic compiling tools such as **gcc** and **make** for application
    development purposes (note that CMake needs to be installed separately).
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**安装**按钮直接安装命令行工具。这将安装基本编译工具，如**gcc**和**make**，用于应用程序开发（注意CMake需要单独安装）。
- en: Finally, enter `gcc --version` to verify the installation.![How to do it...](img/9727OS_01_04.jpg)
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，输入`gcc --version`以验证安装。![如何操作...](img/9727OS_01_04.jpg)
- en: See also
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关信息
- en: If you encounter the **command not found** error or other similar issues, make
    sure that the command-line tools are installed successfully. Apple provides an
    extensive set of documentation, and more information on installing Xcode can be
    found at [https://developer.apple.com/xcode](https://developer.apple.com/xcode).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果遇到**命令未找到**错误或其他类似问题，请确保命令行工具已成功安装。苹果公司提供了一套广泛的文档，有关安装Xcode的更多信息，请参阅[https://developer.apple.com/xcode](https://developer.apple.com/xcode)。
- en: Installing MacPorts and CMake
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装MacPorts和CMake
- en: In this section, we outline the steps to install MacPorts, which greatly simplifies
    the subsequent setup steps, and CMake for Mac.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们概述了安装MacPorts的步骤，这大大简化了后续的设置步骤，以及Mac上的CMake。
- en: Getting ready
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Similar to the Windows installation, you can download the binary distribution
    of **CMake** from [http://www.cmake.org/cmake/resources/software.html](http://www.cmake.org/cmake/resources/software.html)
    and manually configure the command-line options. However, to simplify the installation
    and automate the configuration process, we highly recommend that you use MacPorts.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 与Windows安装类似，您可以从[http://www.cmake.org/cmake/resources/software.html](http://www.cmake.org/cmake/resources/software.html)下载**CMake**的二进制发行版，并手动配置命令行选项。然而，为了简化安装并自动化配置过程，我们强烈建议您使用MacPorts。
- en: How to do it...
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To install MacPorts, follow these steps:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装MacPorts，请按照以下步骤操作：
- en: 'Download the MacPorts package installer for the corresponding version of Mac
    OS X ([https://guide.macports.org/#installing.macports](https://guide.macports.org/#installing.macports)):'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载适用于相应版本Mac OS X的MacPorts包安装程序([https://guide.macports.org/#installing.macports](https://guide.macports.org/#installing.macports))：
- en: 'Mac OS X 10.10 Yosemite: [https://distfiles.macports.org/MacPorts/MacPorts-2.3.3-10.10-Yosemite.pkg](https://distfiles.macports.org/MacPorts/MacPorts-2.3.3-10.10-Yosemite.pkg)'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Mac OS X 10.10 Yosemite: [https://distfiles.macports.org/MacPorts/MacPorts-2.3.3-10.10-Yosemite.pkg](https://distfiles.macports.org/MacPorts/MacPorts-2.3.3-10.10-Yosemite.pkg)'
- en: 'Mac OS X 10.9 Mavericks: [https://distfiles.macports.org/MacPorts/MacPorts-2.3.3-10.9-Mavericks.pkg](https://distfiles.macports.org/MacPorts/MacPorts-2.3.3-10.9-Mavericks.pkg)'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Mac OS X 10.9 Mavericks: [https://distfiles.macports.org/MacPorts/MacPorts-2.3.3-10.9-Mavericks.pkg](https://distfiles.macports.org/MacPorts/MacPorts-2.3.3-10.9-Mavericks.pkg)'
- en: Double-click on the package installer and follow the onscreen instructions.![How
    to do it...](img/9727OS_01_05.jpg)
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击包安装程序，并按照屏幕上的说明操作。![如何操作...](img/9727OS_01_05.jpg)
- en: 'Verify the installation in the terminal by typing in `port version`, which
    returns the version of MacPorts currently installed (`Version: 2.3.3` in the preceding
    package).'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '通过在终端中输入`port version`来验证安装，它将返回当前安装的MacPorts版本（在前面的包中为`Version: 2.3.3`）。'
- en: 'To install **CMake** on Mac, follow these steps:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Mac上安装**CMake**，请按照以下步骤操作：
- en: Open the **Terminal** application.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**终端**应用程序。
- en: 'Execute the following command:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下命令：
- en: '[PRE1]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: To verify the installation, enter `cmake –version` to show the current version
    installed and enter `cmake-gui` to explore the GUI.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证安装，请输入`cmake –version`以显示当前安装的版本，并输入`cmake-gui`以探索GUI。
- en: '![How to do it...](img/9727OS_01_06.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/9727OS_01_06.jpg)'
- en: At this point, your Mac is configured for OpenGL development and is ready to
    compile your first OpenGL application. For those who have been more accustomed
    to GUIs, using the command-line interface in Mac can initially be an overwhelming
    experience. However, in the long run, it is a rewarding learning experience due
    to its overall simplicity. Command-line tools and interfaces are often more time-invariant
    compared to constantly evolving GUIs. At the end of the day, you can just copy
    and paste the same command lines, thereby saving precious time needed to consult
    new documentation every time a GUI changes.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，您的Mac已配置好用于OpenGL开发，并准备好编译您的第一个OpenGL应用程序。对于那些更习惯于GUI的用户，使用Mac的命令行界面最初可能是一种令人不知所措的体验。然而，从长远来看，它是一种有回报的学习体验，因为其整体简单性。与不断演变的GUI相比，命令行工具和界面通常更具有时间不变性。最终，您只需复制并粘贴相同的命令行，从而节省了每次GUI更改时查阅新文档所需的大量时间。
- en: Setting up a Linux-based development platform
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置基于Linux的开发平台
- en: To prepare your development environment on the Linux platform, we can utilize
    the powerful Debian Package Management system. The `apt-get` or `aptitude` program
    automatically retrieves the precompiled packages from the server and also resolves
    and installs all dependent packages that are required. If you are using non-Debian
    based platform, such as Fedora, you can find the equivalents by searching for
    the keywords of each packages listed in this recipe.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Linux平台上准备开发环境，我们可以利用强大的Debian包管理系统。`apt-get`或`aptitude`程序会自动从服务器检索预编译的包，并解决和安装所有所需的依赖包。如果您使用的是非Debian平台，如Fedora，您可以通过搜索此配方中列出的每个包的关键词来找到等效程序。
- en: Getting ready
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We assume that you have successfully installed all updates and latest graphics
    drivers associated with your graphics hardware. Ubuntu 12.04 or higher has support
    for third-party proprietary NVIDIA and AMD graphics drivers, and more information
    can be found at [https://help.ubuntu.com/community/BinaryDriverHowto](https://help.ubuntu.com/community/BinaryDriverHowto).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设你已经成功安装了所有更新以及与你的图形硬件相关的最新图形驱动程序。Ubuntu 12.04或更高版本支持第三方专有NVIDIA和AMD图形驱动程序，更多信息可以在[https://help.ubuntu.com/community/BinaryDriverHowto](https://help.ubuntu.com/community/BinaryDriverHowto)找到。
- en: How to do it…
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Use the following steps to install all development tools and the associated
    dependencies:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下步骤安装所有开发工具和相关依赖项：
- en: Open a terminal.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个终端。
- en: 'Enter the update command:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入更新命令：
- en: '[PRE2]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Enter the install command and enter `y` for all prompts:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入安装命令，并在所有提示中输入`y`：
- en: '[PRE3]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Verify the results:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证结果：
- en: '[PRE4]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If successful, this command should return the current version of `gcc` installed.
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果成功，此命令应返回已安装的`gcc`当前版本。
- en: How it works…
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In summary, the `apt-get update` command automatically updates the local database
    in the Debian Package Management system. This ensures that the latest packages
    are retrieved and installed in the process. The `apt-get` system also provides
    other package management features, such as package removal (uninstall), dependency
    retrieval, as well as package upgrades. These advanced functions are outside the
    scope of this book, but more information can be found at [https://wiki.debian.org/apt-get](https://wiki.debian.org/apt-get).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，`apt-get update`命令自动更新Debian包管理系统中的本地数据库。这确保了在过程中检索和安装了最新的软件包。`apt-get`系统还提供其他包管理功能，如软件包移除（卸载）、依赖关系检索以及软件包升级。这些高级功能超出了本书的范围，但更多信息可以在[https://wiki.debian.org/apt-get](https://wiki.debian.org/apt-get)找到。
- en: The preceding commands install a number of packages to your machine. Here, we
    will briefly explain the purpose of each package.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令安装了多个软件包到你的机器上。在这里，我们将简要解释每个软件包的目的。
- en: The `build-essential` package, as the name itself suggests, encapsulates the
    essential packages, namely gcc and g++, that are required to compile C and C++
    source code in Linux. Additionally, it will download header files and resolve
    all dependencies in the process.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名称所暗示的，`build-essential`软件包封装了必需的软件包，即gcc和g++，这些软件包是编译Linux中的C和C++源代码所必需的。此外，它还会在过程中下载头文件并解决所有依赖关系。
- en: The `cmake-gui` package is the CMake program described earlier in the chapter.
    Instead of downloading CMake directly from the website and compiling from the
    source, it retrieves the latest supported version that had been compiled, tested,
    and released by the Ubuntu community. One advantage of using the Debian Package
    Management system is the stability and ease of updating in the future. However,
    for users who are looking for the cutting-edge version, apt-get based systems
    would be a few versions behind.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`cmake-gui`软件包是本章中较早描述的CMake程序。它不是直接从网站下载CMake并从源代码编译，而是检索由Ubuntu社区编译、测试和发布的最新支持的版本。使用Debian包管理系统的优点是稳定性和未来更新的便捷性。然而，对于寻找最新版本的用户，基于apt-get的系统可能会落后几个版本。'
- en: The `xorg-dev` and `libglu1-mesa-dev` packages are the development files required
    to compile the GLFW library. These packages include header files and libraries
    required by other programs. If you choose to use the precompiled binary version
    of GLFW, you may be able to skip some of the packages. However, we highly recommend
    that you follow the steps for the purpose of this tutorial.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`xorg-dev`和`libglu1-mesa-dev`软件包是编译GLFW库所需的发展文件。这些软件包包括其他程序所需的头文件和库。如果你选择使用预编译的二进制版本GLFW，你可能能够跳过一些软件包。然而，我们强烈建议你遵循本教程的步骤。'
- en: See also
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: 'For more information, most of the steps described are documented and explained
    in depth in this online documentation: [https://help.ubuntu.com/community/UsingTheTerminal](https://help.ubuntu.com/community/UsingTheTerminal).'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息，大多数步骤在本在线文档中有详细说明和解释：[https://help.ubuntu.com/community/UsingTheTerminal](https://help.ubuntu.com/community/UsingTheTerminal)。
- en: Installing the GLFW library in Windows
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows中安装GLFW库
- en: There are two ways to install the GLFW library in Windows, both of which will
    be discussed in this section. The first approach involves compiling the GLFW source
    code directly with CMake for full control. However, to simplify the process, we
    suggest that you download the precompiled binary distribution.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows中安装GLFW库有两种方法，这两种方法将在本节中讨论。第一种方法涉及直接使用CMake编译GLFW源代码以实现完全控制。然而，为了简化过程，我们建议您下载预编译的二进制发行版。
- en: Getting ready
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We assume that you have successfully installed both Visual Studio 2013 and CMake,
    as described in the earlier section. For completeness, we will demonstrate how
    to install GLFW using CMake.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设您已经按照前面章节所述成功安装了Visual Studio 2013和CMake。为了完整性，我们将演示如何使用CMake安装GLFW。
- en: How to do it...
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To use the precompiled binary package for GLFW, follow these steps:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用预编译的二进制包安装GLFW，请按照以下步骤操作：
- en: Create the `C:/Program Files (x86)/glfw-3.0.4` directory. Grant the necessary
    permissions when prompted.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`C:/Program Files (x86)/glfw-3.0.4`目录。在提示时授予必要的权限。
- en: Download the `glfw-3.0.4.bin.WIN32.zip` package from [http://sourceforge.net/projects/glfw/files/glfw/3.0.4/glfw-3.0.4.bin.WIN32.zip](http://sourceforge.net/projects/glfw/files/glfw/3.0.4/glfw-3.0.4.bin.WIN32.zip)
    and unzip the package.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[http://sourceforge.net/projects/glfw/files/glfw/3.0.4/glfw-3.0.4.bin.WIN32.zip](http://sourceforge.net/projects/glfw/files/glfw/3.0.4/glfw-3.0.4.bin.WIN32.zip)下载`glfw-3.0.4.bin.WIN32.zip`包，并解压该包。
- en: Copy all the extracted content inside the `glfw-3.0.4.bin.WIN32` folder (for
    example, include `lib-msvc2012`) into the `C:/Program Files (x86)/glfw-3.0.4`
    directory. Grant permissions when prompted.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`glfw-3.0.4.bin.WIN32`文件夹内所有提取的内容（例如，包括`lib-msvc2012`）复制到`C:/Program Files
    (x86)/glfw-3.0.4`目录中。在提示时授予权限。
- en: Rename the `lib-msvc2012` folder to `lib`inside the `C:/Program Files (x86)/glfw-3.0.4`
    directory. Grant permissions when prompted.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`lib-msvc2012`文件夹重命名为`lib`，位于`C:/Program Files (x86)/glfw-3.0.4`目录中。在提示时授予权限。
- en: 'Alternatively, to compile the source files directly, follow these procedures:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，要直接编译源文件，请按照以下步骤操作：
- en: Download the source package from [http://sourceforge.net/projects/glfw/files/glfw/3.0.4/glfw-3.0.4.zip](http://sourceforge.net/projects/glfw/files/glfw/3.0.4/glfw-3.0.4.zip)
    and unzip the package on the desktop. Create a new folder called `build` inside
    the extracted `glfw-3.0.4` folder to store the binaries.and open `cmake-gui`.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[http://sourceforge.net/projects/glfw/files/glfw/3.0.4/glfw-3.0.4.zip](http://sourceforge.net/projects/glfw/files/glfw/3.0.4/glfw-3.0.4.zip)下载源代码包，并在桌面上解压该包。在解压的`glfw-3.0.4`文件夹内创建一个名为`build`的新文件夹以存储二进制文件，并打开`cmake-gui`。
- en: Select `glfw-3.0.4` (from the desktop) as the source directory and `glfw-3.0.4/build`
    as the build directory. The screenshot is shown as follows:![How to do it...](img/9727OS_01_07.jpg)
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`glfw-3.0.4`（从桌面）选为源目录，将`glfw-3.0.4/build`选为构建目录。截图如下所示：![如何操作...](img/9727OS_01_07.jpg)
- en: Click on **Generate** and select **Visual Studio 12 2013** in the prompt.![How
    to do it...](img/9727OS_01_08.jpg)
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**生成**，并在提示中选择**Visual Studio 12 2013**。![如何操作...](img/9727OS_01_08.jpg)
- en: Click on **Generate** again.![How to do it...](img/9727OS_01_09.jpg)
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次点击**生成**。![如何操作...](img/9727OS_01_09.jpg)
- en: Open the `build` directory and double-click on **GLFW.sln** to open Visual Studio.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`build`目录，双击**GLFW.sln**以打开Visual Studio。
- en: In Visual Studio, click Build Solution (press *F7*).
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio中，点击构建解决方案（按*F7*）。
- en: Copy **build/src/Debug/glfw3.lib** to **C:/Program Files (x86)/glfw-3.0.4/lib**.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**build/src/Debug/glfw3.lib**复制到**C:/Program Files (x86)/glfw-3.0.4/lib**。
- en: Copy the `include` directory (inside `glfw-3.0.4/include`) to **C:/Program Files
    (x86)/glfw-3.0.4/**.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`include`目录（位于`glfw-3.0.4/include`内部）复制到**C:/Program Files (x86)/glfw-3.0.4/**.
- en: After this step, we should have the `include` (`glfw3.h`) and `library` (`glfw3.lib`)
    files inside the `C:/Program Files (x86)/glfw-3.0.4` directory, as shown in the
    setup procedure using precompiled binaries.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在此步骤之后，我们应该在`C:/Program Files (x86)/glfw-3.0.4`目录内拥有`include`（`glfw3.h`）和`library`（`glfw3.lib`）文件，如图所示使用预编译二进制文件的设置过程。
- en: Installing the GLFW library in Mac OS X and Linux
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Mac OS X和Linux中安装GLFW库
- en: The installation procedures for Mac and Linux are essentially identical using
    the command-line interface. To simplify the process, we recommend that you use
    MacPorts for Mac users.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Mac和Linux的安装过程使用命令行界面基本相同。为了简化过程，我们建议Mac用户使用MacPorts。
- en: Getting ready
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We assume that you have successfully installed the basic development tools,
    including CMake, as described in the earlier section. For maximum flexibility,
    we can compile the library directly from the source code (refer to [http://www.glfw.org/docs/latest/compile.html](http://www.glfw.org/docs/latest/compile.html)
    and [http://www.glfw.org/download.html](http://www.glfw.org/download.html)).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设您已成功安装了基本开发工具，包括 CMake，如前文所述。为了最大灵活性，我们可以直接从源代码编译库（参考 [http://www.glfw.org/docs/latest/compile.html](http://www.glfw.org/docs/latest/compile.html)
    和 [http://www.glfw.org/download.html](http://www.glfw.org/download.html)）。
- en: How to do it...
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'For Mac users, enter the following command in a terminal to install GLFW using
    MacPorts:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Mac 用户，请在终端中输入以下命令以使用 MacPorts 安装 GLFW：
- en: '[PRE5]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'For Linux users (or Mac users who would like to practice using the command-line
    tools), here are the steps to compile and install the GLFW source package directly
    with the command-line interface:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Linux 用户（或希望练习使用命令行工具的 Mac 用户），以下是在命令行界面中直接编译和安装 GLFW 源包的步骤：
- en: 'Create a new folder called `opengl_dev` and change the current directory to
    the new path:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `opengl_dev` 的新文件夹，并将当前目录更改为新路径：
- en: '[PRE6]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Obtain a copy of the GLFW source package (`glfw-3.0.4`) from the official repository:
    [http://sourceforge.net/projects/glfw/files/glfw/3.0.4/glfw-3.0.4.tar.gz](http://sourceforge.net/projects/glfw/files/glfw/3.0.4/glfw-3.0.4.tar.gz).'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从官方仓库获取 GLFW 源包 (`glfw-3.0.4`)：[http://sourceforge.net/projects/glfw/files/glfw/3.0.4/glfw-3.0.4.tar.gz](http://sourceforge.net/projects/glfw/files/glfw/3.0.4/glfw-3.0.4.tar.gz)。
- en: Extract the package.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解压缩包。
- en: '[PRE7]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Perform the compilation and installation:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行编译和安装：
- en: '[PRE8]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works...
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The first set of commands create a new working directory to store the new files
    retrieved using the `wget` command, which downloads a copy of the GLFW library
    to the current directory. The `tar xzvf` command extracts the compressed packages
    and creates a new folder with all the contents.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 第一组命令创建一个新的工作目录以存储使用 `wget` 命令检索的新文件，该命令将 GLFW 库的副本下载到当前目录。`tar xzvf` 命令解压缩压缩包并创建一个包含所有内容的新的文件夹。
- en: Then, the `cmake` command automatically generates the necessary build files
    that are needed for the compilation process to the current `build` directory.
    This process also checks for missing dependencies and verifies the versioning
    of the applications.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，`cmake` 命令自动在当前 `build` 目录中生成编译过程所需的必要构建文件。此过程还会检查缺失的依赖项并验证应用程序的版本。
- en: The `make` command then takes all instructions from the Makefile script that
    is generated automatically and compiles the source code into libraries.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`make` 命令随后从自动生成的 Makefile 脚本中获取所有指令，并将源代码编译成库。'
- en: The `sudo make install` command installs the library header files as well as
    the static or shared libraries onto your machine. As this command requires writing
    to the root directory, the `sudo` command is needed to grant such permissions.
    By default, the files will be copied to the `/usr/local` directory. In the rest
    of the book, we will assume that the installations follow these default paths.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`sudo make install` 命令将库头文件以及静态或共享库安装到您的机器上。由于此命令需要写入根目录，因此需要 `sudo` 命令来授予此类权限。默认情况下，文件将被复制到
    `/usr/local` 目录。在本书的其余部分，我们将假设安装遵循这些默认路径。'
- en: For advanced users, we can optimize the compilation by configuring the packages
    with the CMake GUI (`cmake-gui`).
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 对于高级用户，我们可以通过使用 CMake 图形用户界面 (`cmake-gui`) 来配置软件包以优化编译。
- en: '![How it works...](img/9727OS_01_10.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/9727OS_01_10.jpg)'
- en: For example, you can enable the `BUILD_SHARED_LIBS` option if you are planning
    to compile the GLFW library as a shared library. In this book, we will not explore
    the full functionality of the GLFW library, but these options can be useful to
    developers who are looking for further customizations. Additionally, you can customize
    the installation prefix (`CMAKE_INSTALL_PREFIX`) if you would like to install
    the library files at a separate location.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您计划将 GLFW 库编译为共享库，可以启用 `BUILD_SHARED_LIBS` 选项。在本书中，我们不会探索 GLFW 库的全部功能，但这些选项对于寻求进一步定制的开发者可能很有用。此外，如果您希望将库文件安装到单独的位置，还可以自定义安装前缀
    (`CMAKE_INSTALL_PREFIX`)。
- en: Creating your first OpenGL application with GLFW
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 GLFW 创建您的第一个 OpenGL 应用程序
- en: Now that you have successfully configured your development platform and installed
    the GLFW library, we will provide a tutorial on how to create your first OpenGL-based
    application.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经成功配置了开发平台并安装了GLFW库，我们将提供如何创建您的第一个基于OpenGL的应用程序的教程。
- en: Getting ready
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: At this point, you should already have all the pre requisite tools ready regardless
    of which operating system you may have, so we will immediately jump into building
    your first OpenGL application using these tools.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，无论您使用的是哪种操作系统，您都应该已经准备好了所有预置工具，因此我们将立即开始使用这些工具构建您的第一个OpenGL应用程序。
- en: How to do it...
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following code outlines the basic steps to create a simple OpenGL program
    that utilizes the GLFW library and draws a rotating triangle:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码概述了创建一个简单OpenGL程序的基本步骤，该程序利用GLFW库并绘制一个旋转的三角形：
- en: 'Create an empty file, and then include the header file for the GLFW library
    and standard C++ libraries:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个空文件，然后包含GLFW库头文件和标准C++库的头文件：
- en: '[PRE9]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Initialize GLFW and create a GLFW window object (640 x 480):'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化GLFW并创建一个GLFW窗口对象（640 x 480）：
- en: '[PRE10]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Define a loop that terminates when the window is closed:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个循环，当窗口关闭时终止：
- en: '[PRE11]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Set up the viewport (using the width and height of the window) and clear the
    screen color buffer:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置视口（使用窗口的宽度和高度）并清除屏幕颜色缓冲区：
- en: '[PRE12]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Set up the camera matrix. Note that further details on the camera model will
    be discussed in [Chapter 3](ch03.html "Chapter 3. Interactive 3D Data Visualization"),
    *Interactive 3D Data Visualization*:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置相机矩阵。注意，关于相机模型的更多细节将在[第3章](ch03.html "第3章。交互式3D数据可视化") *交互式3D数据可视化*中讨论：
- en: '[PRE13]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Draw a rotating triangle and set a different color (red, green, and blue channels)
    for each vertex (*x*, *y*, and *z*) of the triangle. The first line rotates the
    triangle over time:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绘制一个旋转的三角形，并为三角形的每个顶点（*x*，*y*，和*z*）设置不同的颜色（红色、绿色和蓝色通道）。第一行代码使三角形随时间旋转：
- en: '[PRE14]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Swap the front and back buffers (GLFW uses double buffering) to update the
    screen and process all pending events:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 交换前后缓冲区（GLFW使用双缓冲），以更新屏幕并处理所有挂起的事件：
- en: '[PRE15]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Release the memory and terminate the GLFW library. Then, exit the application:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 释放内存并终止GLFW库。然后，退出应用程序：
- en: '[PRE16]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Save the file as `main.cpp` using the text editor of your choice.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您选择的文本编辑器将文件保存为`main.cpp`。
- en: How it works...
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: By including the GLFW library header, `glfw3.h`, we automatically import all
    necessary files from the OpenGL library. Most importantly, GLFW automatically
    determines the platform and thus allows you to write portable source code seamlessly.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 通过包含GLFW库头文件`glfw3.h`，我们自动导入OpenGL库中所有必要的文件。最重要的是，GLFW自动确定平台，从而允许您无缝地编写可移植的源代码。
- en: In the main function, we must first initialize the GLFW library with the **glfwInit**
    function in the main thread. This is required before any GLFW functions can be
    used. Before a program exits, GLFW should be terminated to release any allocated
    resources.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在主函数中，我们必须首先使用**glfwInit**函数在主线程中初始化GLFW库。在使用任何GLFW函数之前，这是必需的。在程序退出之前，GLFW应该被终止以释放任何分配的资源。
- en: Then, the **glfwCreateWindow** function creates a window and its associated
    context, and it also returns a pointer to the `GLFWwindow` object. Here, we can
    define the width, height, title, and other properties for the window. After the
    window is created, we then call the **glfwMakeContextCurrent** function to switch
    the context and make sure that the context of the specified window is current
    on the calling thread.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，`glfwCreateWindow`函数创建一个窗口及其相关上下文，并且它还返回一个指向`GLFWwindow`对象的指针。在这里，我们可以定义窗口的宽度、高度、标题和其他属性。在窗口创建后，我们接着调用`glfwMakeContextCurrent`函数来切换上下文，并确保指定窗口的上下文在调用线程上是当前的。
- en: At this point, we are ready to render our graphics element on the window. The
    **while** loop provides a mechanism to redraw our graphics as long as the window
    remains open. OpenGL requires an explicit setup on the camera parameters; further
    details will be discussed in the upcoming chapters. In the future, we can provide
    different parameters to simulate perspective and also handle more complicated
    issues (such as anti-aliasing). For now, we have set up a simple scene to render
    a basic primitive shape (namely a triangle) and fixed the color for the vertices.
    Users can modify the parameters in the **glColor3f** and **glVertex3f** functions
    to change the color as well as the position of the vertices.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经准备好在窗口上渲染我们的图形元素。**while**循环提供了一个机制，只要窗口保持打开状态，就会重新绘制我们的图形。OpenGL需要在相机参数上进行显式设置；更多细节将在接下来的章节中讨论。将来，我们可以提供不同的参数来模拟透视，并处理更复杂的问题（如抗锯齿）。目前，我们已经设置了一个简单的场景来渲染一个基本的原始形状（即三角形），并固定了顶点的颜色。用户可以通过修改**glColor3f**和**glVertex3f**函数中的参数来改变颜色以及顶点的位置。
- en: This example demonstrates the basics required to create graphics using OpenGL.
    Despite the simplicity of the sample code, it provides a nice introductory framework
    on how you can create high-performance graphics rendering applications with graphics
    hardware using OpenGL and GLFW.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 本例演示了使用OpenGL创建图形所需的基本知识。尽管示例代码很简单，但它提供了一个很好的入门框架，说明了如何使用OpenGL和GLFW通过图形硬件创建高性能的图形渲染应用程序。
- en: Compiling and running your first OpenGL application in Windows
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows中编译和运行你的第一个OpenGL应用程序
- en: There are several ways to set up an OpenGL project. Here, we create a sample
    project using Visual Studio 2013 or higher and provide a complete walkthrough
    for the first-time configuration of the OpenGL and GLFW libraries. These same
    steps can be incorporated into your own projects in the future.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 设置OpenGL项目有多种方法。在这里，我们使用Visual Studio 2013或更高版本创建一个示例项目，并提供OpenGL和GLFW库首次配置的完整指南。这些相同的步骤将来也可以应用到你的项目中。
- en: Getting ready
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Assuming that you have both Visual Studio 2013 and GLFW (version 3.0.4) installed
    successfully on your environment, we will start our project from scratch.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你已经成功在你的环境中安装了Visual Studio 2013和GLFW（版本3.0.4），我们将从头开始我们的项目。
- en: How to do it...
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In Visual Studio 2013, use the following steps to create a new project and
    compile the source code:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在Visual Studio 2013中，按照以下步骤创建一个新项目并编译源代码：
- en: Open Visual Studio 2013 (VS Express 2013 for desktop).
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio 2013（桌面版VS Express 2013）。
- en: Create a new Win32 Console Application and name it as `Tutorial1`.![How to do
    it...](img/9727OS_01_11.jpg)
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的Win32控制台应用程序，并将其命名为`Tutorial1`。[![如何操作...](img/9727OS_01_11.jpg)]
- en: Check the **Empty project** option, and click on **Finish**.![How to do it...](img/9727OS_01_12.jpg)
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**空项目**选项，然后点击**完成**。[![如何操作...](img/9727OS_01_12.jpg)]
- en: Right-click on **Source Files**, and add a new C++ source file (**Add** | **New
    Item**) called **main.cpp**.![How to do it...](img/9727OS_01_13.jpg)
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击**源文件**，添加一个新的C++源文件（**添加** | **新建项**），命名为**main.cpp**![如何操作...](img/9727OS_01_13.jpg)
- en: Copy and paste the source code from the previous section into the **main.cpp**
    and save it.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将上一节中的源代码复制并粘贴到**main.cpp**中，并保存。
- en: Open **Project Properties** (*Alt* + *F7*).
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**项目属性**（*Alt* + *F7*）。
- en: Add the `include` path of the GLFW library, **C:\Program Files (x86)\glfw-3.0.4\include**,
    by navigating to **Configuration Properties** | **C/C++** | **General** | **Additional
    Include Directories**.![How to do it...](img/9727OS_01_14.jpg)
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到**配置属性** | **C/C++** | **通用** | **附加包含目录**，添加GLFW库的`include`路径，**C:\Program
    Files (x86)\glfw-3.0.4\include**。[![如何操作...](img/9727OS_01_14.jpg)]
- en: Tip
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.packtpub.com](http://www.packtpub.com)的账户下载示例代码文件，以获取您购买的所有Packt
    Publishing书籍的示例代码。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便将文件直接通过电子邮件发送给您。
- en: Add the GLFW library path, **C:\Program Files (x86)\glfw-3.0.4\lib**, by navigating
    to **Configuration Properties** | **Linker** | **General** | **Additional Library
    Directories**.![How to do it...](img/9727OS_01_15.jpg)
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到 **配置属性** | **链接器** | **常规** | **附加库目录**，添加 GLFW 库路径，**C:\Program Files
    (x86)\glfw-3.0.4\lib**。![如何操作...](img/9727OS_01_15.jpg)
- en: Add the GLFW and OpenGL libraries (`glu32.lib`, `glfw3.lib` and `opengl32.lib`)
    by navigating to **Configuration Properties** | **Linker** | **Input** | **Additional
    Dependencies**.![How to do it...](img/9727OS_01_16.jpg)
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到 **配置属性** | **链接器** | **输入** | **附加依赖项**，添加 GLFW 和 OpenGL 库（`glu32.lib`、`glfw3.lib`
    和 `opengl32.lib`）。![如何操作...](img/9727OS_01_16.jpg)
- en: Build **Solution** (press *F7*).
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建 **解决方案**（按 *F7*）。
- en: Run the program (press *F5*).
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行程序（按 *F5*）。
- en: 'Here is your first OpenGL application showing a rotating triangle that is running
    natively on your graphics hardware. Although we have only defined the color of
    the vertices to be red, green, and blue, the graphics engine interpolates the
    intermediate results and all calculations are performed using the graphics hardware.
    The screenshot is shown as follows:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您的第一个 OpenGL 应用程序，它显示了一个在您的图形硬件上运行的旋转三角形。尽管我们只定义了顶点的颜色为红色、绿色和蓝色，但图形引擎会插值中间结果，并且所有计算都是使用图形硬件完成的。截图如下所示：
- en: '![How to do it...](img/9727OS_01_17.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/9727OS_01_17.jpg)'
- en: Compiling and running your first OpenGL application in Mac OS X or Linux
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Mac OS X 或 Linux 上编译和运行您的第一个 OpenGL 应用程序
- en: Setting up a Linux or Mac machine is made much simpler with the command-line
    interface. We assume that you have all the components that were discussed earlier
    ready, and all default paths are used as recommended.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 使用命令行界面设置 Linux 或 Mac 机器变得简单得多。我们假设您已经准备好了之前讨论的所有组件，并且所有默认路径都使用推荐的方式。
- en: Getting ready
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will start by compiling the sample code described previously. You can download
    the complete code package from the official website of Packt Publishing [https://www.packtpub.com](https://www.packtpub.com).
    We assume that all files are saved to a top-level directory called `code` and
    the `main.cpp` file is saved inside the `/code/Tutorial1` subdirectory.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先编译之前描述的示例代码。您可以从 Packt Publishing 的官方网站 [https://www.packtpub.com](https://www.packtpub.com)
    下载完整的代码包。我们假设所有文件都保存在名为 `code` 的顶级目录中，而 `main.cpp` 文件则保存在 `/code/Tutorial1` 子目录中。
- en: How to do it...
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open a terminal or an equivalent command-line interface.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端或等效的命令行界面。
- en: 'Change the current directory to the working directory:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将当前目录更改为工作目录：
- en: '[PRE17]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Enter the following command to compile the program:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令以编译程序：
- en: '[PRE18]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Run the program:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行程序：
- en: '[PRE19]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Here is your first OpenGL application that runs natively on your graphics hardware
    and displays a rotating triangle. Although we have defined the color of only three
    vertices to be red, green, and blue, the graphics engine interpolates the intermediate
    results and all calculations are performed using the graphics hardware.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您的第一个 OpenGL 应用程序，它在本机图形硬件上运行并显示一个旋转的三角形。尽管我们只定义了三个顶点的颜色为红色、绿色和蓝色，但图形引擎会插值中间结果，并且所有计算都是使用图形硬件完成的。
- en: '![How to do it...](img/9727OS_01_18.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/9727OS_01_18.jpg)'
- en: 'To further simplify the process, we have provided a compile script in the sample
    code. You can execute the script by simply typing the following commands in a
    terminal:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步简化过程，我们在示例代码中提供了一个编译脚本。您可以通过在终端中简单地输入以下命令来执行脚本：
- en: '[PRE20]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: You may notice that the OpenGL code is platform-independent. One of the most
    powerful features of the GLFW library is that it handles the windows management
    and other platform-dependent functions behind the scene. Therefore, the same source
    code (`main.cpp`) can be shared and compiled on multiple platforms without the
    need for any changes.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会注意到 OpenGL 代码是平台无关的。GLFW 库最强大的功能之一是它在幕后处理窗口管理和其他平台相关函数。因此，相同的源代码（`main.cpp`）可以在多个平台上共享和编译，而无需任何更改。
