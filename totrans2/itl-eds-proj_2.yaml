- en: Weather Station (IoT)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 1](c225d705-919a-4442-adc8-7b22d33437fc.xhtml), *Setting up Intel
    Edison*, we learned how to set up the Intel Edison and run some basic programs
    in various languages. In this chapter, we'll scale up things a bit and introduce
    the Internet to the picture of the IoTs. We will hear this term quite often, and
    there has been no exact definition of it. However, if we try to bring out the
    literal meaning of IoT, it means connecting devices to the Internet. It may also
    be referred to as **connected devices** or **smart devices**. It's an advanced
    form of **machine to machine** (**M2M**) communication. In this chapter, the main
    focus will be on the architecture of IoTs and how Intel Edison is the perfect
    choice for developing systems revolving around IoT. We'll also be dealing with
    various components of a typical IoT project and how things can be scaled up at
    the component level. By the end of this chapter, we'll have built a system using
    Intel Edison that will take in pollution data, temperature data, and sound data,
    and upload it to the Web and display it live on a dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Architecture of a typical IoT system interfacing sensors with Intel Edison
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting the device and uploading data to the cloud deploying a mini weather
    station with Intel Edison
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overview of IoT and its usage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IoT has lots of usage and can make normal things behave smartly. Starting from
    industries, where we deal with large machinery, such as industrial robots and
    assembly line industrial units, IoT has its roots embedded in many uses providing
    vital data to the cloud, or a local server, where we can monitor them remotely
    and provide remote functionality in every place that uses IoT. Now imagine a healthcare
    solution where we have an aged member of our family and we need to monitor them
    regularly.
  prefs: []
  type: TYPE_NORMAL
- en: Smart medical devices come to the picture, where the data collected from the
    human body is constantly pushed to the cloud and monitored at a local level for
    any signs of abnormality. Proper analytics is performed at cloud level where using
    machine learning algorithms, we can predict the health of the person. Considering
    the use case of home automation that will be covered in [Chapter 3](3bd53219-a287-4d8f-9a58-5a06c5b14062.xhtml),
    *Intel Edison and IoT (Home **Automation)*, we can deal with controlling devices
    and monitoring the usage of devices such as electrical load such as lights, fans,
    and AC, remotely from anywhere in the world.
  prefs: []
  type: TYPE_NORMAL
- en: Architecture of a typical IoT project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When dealing with IoT projects, there are certain key factors that should be
    kept in mind, some of which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Choice of hardware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choice of the networking protocol
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choice of the sensors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choice of the IoT platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Beside the previously mentioned points, several other factors come into play
    that will be clear later in the chapter. When dealing with IoT, the first thing
    that comes to our mind is uploading data. Typically, what is involved in an IoT
    project is we take readings from sensors and upload them to the Web. In this process,
    several sub-processes, such as processing and filtering data, analytics, and machine
    learning, come to play.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram depicts a standard architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6639_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: IoT architecture overview
  prefs: []
  type: TYPE_NORMAL
- en: 'As depicted in the preceding diagram, the typical IoT system may consist of
    these components:'
  prefs: []
  type: TYPE_NORMAL
- en: Sensors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controller actuators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IoT platform or cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dashboard and alerts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sensors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sensors form a key role in the IoT space. These act as a kind of connection
    layer between the physical world and the digital world. The sensors coupled provide
    the entire system with the data that we want. Currently we aren''t focused on
    industrial-grade sensors, but low-power sensors are suitable for small proof of
    concepts. When dealing with sensors, certain factors should be kept in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: Power used by the sensor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Type of output provided (digital or analog)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sensitivity of the sensor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The sensor usually performs one-way communication with the controller. The data
    captured by the sensors is converted into digital values using an ADC, and we
    obtain the output through a controller. Let's consider a use case of a light sensor.
    In this case, the sensor returns a calibrated value of the resistance. Thus we
    get a resistance value based on the light intensity. It is similar for other sensors,
    where any physical component is read and converted to a digital component. Normally
    a sensor has three pins; Vcc, Gnd, and signal. The interfacing of sensors with
    the controller will be discussed later in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Controllers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These are the brain of an IoT system. Controllers perform most of the action
    in the IoT space. In industry, controllers may be referred as IoT gateways. From
    data acquisition to processing this data to uploading it to the cloud and control
    actuators, are all performed by the controller. Usually, controllers have the
    capabilities of networking and wireless communication. If some controllers don't
    have that capability, then usually they are stacked up with external networking
    devices. Arduino, Raspberry Pi, Intel Galileo, and Intel Edison are some of the
    most commonly used controllers. Controllers normally come with GPIO pins that
    interface with other devices. Most of the details of Intel Edison, the controller
    that we are using, were discussed in [Chapter 1](c225d705-919a-4442-adc8-7b22d33437fc.xhtml), *Setting
    up Intel Edison*.
  prefs: []
  type: TYPE_NORMAL
- en: Actuators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Actuators consist of mainly electro-mechanical devices that provide us some
    action on the basis of controller signals. Based on signals sent by the controllers,
    actuators get activated or deactivated. Actuators are mainly motors; servos fall
    into this category as well. Controllers cannot directly control actuators because
    of the high power requirements or the nature of the current (AC or DC) of the
    actuators. The interfacing hardware component is called a driver circuit.
  prefs: []
  type: TYPE_NORMAL
- en: Controllers send control signals to the driver circuits and based on these control
    signals, the actuators gets activated. While dealing with the robotics module
    of this book, the actuators will be discussed in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud or IoT platform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is perhaps one of the most important parts of the entire IoT ecosystem
    because of the fact that at the end we need to upload the data so that it can
    be accessed from anywhere, which is the Internet part of IoTs. Normally we prefer
    to go for IoTs platforms. These platforms have their own SDKs and we just use
    those SDKs to pair up our device with the IoT platform and upload the data. Top-level
    players in the IoT platform include Microsoft Windows Azure, IBM Bluemix, and
    Amazon Web Services. There are other platforms that provide those services, such
    as Datonis, Dweet, Thingspeak, Thingworx, and many more. The choice of the IoT
    platform is very specific to the use case depending on certain factors, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Protocols it supports**: These are mainly REST, web sockets, and MQTT'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dashboard capability**: The platforms, own dashboards for visualization and
    the flexibility of development of custom dashboards'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rule engines**: These include the rules that are needed to be defined based
    on the incoming data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event-based services**: These are the necessity of triggering of events based
    on the output of the rule engines'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we will be discussing the use of `dweet.io` for our project,
    a mini weather station.
  prefs: []
  type: TYPE_NORMAL
- en: Dashboards and alerts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we have data, the data should be viewed in the form of gauges, graphs,
    and so on. In most cases, the platform itself provides support, but sometimes
    there arises a requirement of building custom dashboard based on the data we get.
    Normally through REST API calls, we get the data from the IoT platform to our
    custom dashboards. These are also essential components of an IoT ecosystem. Dashboards
    must also be compatible with devices ranging from PCs to mobile devices. They
    also must be in real time. While dashboards deal with data visualizations, alerts
    on the other hand are responsible for notifying the user of any malfunctions or
    any abnormalities in the system. Normally the preferred mode of alerts is either
    some visualizations, push notifications, e-mails, text messages, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Interfacing sensors with Intel Edison
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Earlier in this chapter, we had a brief idea about sensors. Now we will see
    how to interface these sensors with the Intel Edison. Let us consider the use
    of the temperature sensor. As already mentioned, most of the sensors have a three
    or four-pin configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: Vcc
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ground
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Signal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you have a look at the Edison board, the board will have analog pins. Ideally,
    if the sensor returns an analog value, then it goes in the analog pin. It is similar
    for digital output: we prefer the use of digital pins. Let us look at the following
    example, where we will interface a temperature sensor. Normally, a typical temperature
    sensor has three pins. The configuration is the same as previously. However, sometimes
    due to board compatibility issues, it may come with a four-pin configuration,
    but in that case one of the pins is not used.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we are going to use a Grove temperature sensor module:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_02_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Grove temperature sensor module
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding image is a temperature sensor. You may notice that it has four-pins,
    designated as Vcc, Gnd, Sig, and NC. In order to connect with your Edison, follow
    the following circuit diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_02_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Circuit diagram for basic temperature data
  prefs: []
  type: TYPE_NORMAL
- en: In this circuit diagram, it is noticed that the NC pin is not connected. Thus,
    only three-pins, Vcc, Gnd, and Sig, are connected. Now, once you are done with
    the connections, we need to write some algorithms for reading the data. The standard
    procedure is to search for the datasheet of the sensor. Normally, we also get
    mathematical equations for the sensor to obtain the desired parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the Grove temperature sensor module, our first target is to obtain some
    data from the manufacturer''s website. Normally, these sensors calculate temperature
    based on the change in resistance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_02_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Algorithm for temperature calculation. Picture credits: [h](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[t](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[t](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[p](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[://w](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[i](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[k](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[i](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[.](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[s](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[d](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[.](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[c](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[c](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[/G](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[r](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[o](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[v](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[-](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[T](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[m](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[p](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[r](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[a](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[t](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[u](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[r](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[_](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[S](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[n](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[s](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[o](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[r](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[_](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[V](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[1.](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[2/](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The final formulae will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*B=4275*'
  prefs: []
  type: TYPE_NORMAL
- en: '*R0=100000*'
  prefs: []
  type: TYPE_NORMAL
- en: '*R= 1023.0/a-1.0 R= 100000*R*'
  prefs: []
  type: TYPE_NORMAL
- en: Final Temperature = *1.0/(log(R/100000.0)/B+1/298.15)-273.15*
  prefs: []
  type: TYPE_NORMAL
- en: The preceding deduction was obtained from [h](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[t](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[t](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[p](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[://w](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[i](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[k](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[i](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[.](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[s](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[d](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[.](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[c](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[c](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[/G](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[r](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[o](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[v](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[-](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[T](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[m](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[p](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[r](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[a](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[t](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[u](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[r](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[_](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[S](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[n](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[s](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[o](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[r](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[_](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[V](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[1.](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[2/](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/).
  prefs: []
  type: TYPE_NORMAL
- en: 'When converting the preceding deduction into code for the Arduino IDE to deploy
    into the Edison, the result will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Explanation of the code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s discuss the steps that we need to follow:'
  prefs: []
  type: TYPE_NORMAL
- en: Initially we declare the values of `B` and `R0`. These values are obtained from
    the datasheet, as shown in the algorithm.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we declare the analog pin, `tempPin`, which will be used.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `setup()` function, we just perform the `Serial.begin(9600)` operation.
    The thing is that we don't set the `tempPin` to be in input mode because of the
    fact that analog pins by default are in input mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next in the loop, we implement the calculations performed earlier in code and
    display it on the serial monitor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To access the serial monitor, press the top right corner button. After the
    serial windows opens, you will see your current room temperature:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_02_005.png)'
  prefs: []
  type: TYPE_IMG
- en: Serial window. Note the baud rate and the temperature readings
  prefs: []
  type: TYPE_NORMAL
- en: From the preceding screenshot, you can note the temperature reading, which is
    pretty close to the original temperature. Depending on the sensitivity, the temperature
    may vary.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know how to access temperature sensor readings, we can move forward
    with the integration of other sensors for our weather station project.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting the device and uploading to the cloud (dweet.io)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we know how to read the data from the sensors, our next target is to
    select an IoT platform where we'll upload data. We had a short discussion before
    about IoT platforms.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will be dealing with `dweet.io`. This IoT platform is extremely
    simple to implement. We will be using the Node.js SDK for `dweet.io`. Before going
    into the details, let's have a look at the platform. Our target is to push the
    temperature data we obtained into the platform and display it on a dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: '`dweet.io` is a simple publishing and subscribing service for machines (sensors,
    robots, devices, and so on). It''s like Twitter, but for things. Each thing is
    assigned a unique name and through REST services, we access, and update them.
    One thing to be noted is that the things we create are public. In order to create
    a private thing, we need to pay. Here we''ll cover only the public aspect of it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For details on `dweet.io`, refer to the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dweet.io/faq](https://dweet.io/faq)'
  prefs: []
  type: TYPE_NORMAL
- en: 'This will be one of the first steps for our weather station, as temperature
    is an integral part of it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_02_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Dweet.io screenshot
  prefs: []
  type: TYPE_NORMAL
- en: 'Now click on the Play tab to enter the creation area:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_02_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Play—dweet.io
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we are going to provide a name to our thing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_02_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: dweet.io—Create a thing
  prefs: []
  type: TYPE_NORMAL
- en: Name your thing. The name has to be unique.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After clicking on the Try It Out! button, you will be getting a request URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, click on `https://dweet.io/follow/EdisonTemperature` to browse to your
    public thing page. Once the Edison is connected, we'll receive data here. So,
    for now, let's connect a temperature sensor to the Edison and connect it to your
    PC.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this mini project, we are going to write a Node.js program that will access
    the data from the sensor and upload it to here in the preceding link. Also, instead
    of writing the code to the Intel XDK, we'll write the code in Notepad++ and transfer
    it using the FileZilla client.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'But again, we don''t have access to the libraries yet. So we need to add those
    libraries to our Edison device. For that, fire up your PuTTY Terminal and log
    in to your Edison:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_02_011.png)'
  prefs: []
  type: TYPE_IMG
- en: PuTTY console-setup—1
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, check whether your device is connected to your Wi-Fi network using the
    `ifconfig` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image_02_012.png)'
  prefs: []
  type: TYPE_IMG
- en: PuTTYconsole-setup—2
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will install the Node.js sdk for `dweet.io` on our device. Execute
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: It may take some time for the modules to be installed depending on the speed
    of your Internet connection. The warnings may be ignored.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once installed, we''ll write the Node.js script for the Edison. Now open your
    editor and type in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To explain the code, let''s break it into parts. As you can see, we have a
    main function named `dweetSend`, which repeats itself after every 10 seconds.
    Initially, we need to get data from the temperature sensor. We''ve connected the
    temperature sensor to Analog pin 3\. If you have a close look at the code that
    was written in Arduino IDE, then you will find lots of similarities:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In these lines, we import the node - `dweetio` library. The next piece of code
    is similar to the Arduino IDE, where we read the raw value of the analog read
    and perform required calculations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'As stated in the preceding code, we have also rounded the temperature value
    to two decimal places. Next, we push the value to the `dweet.io` thing channel.
    Here, we need to mention that our thing name `WeatherStation`, followed by the
    name of the parameter, `Temperature`, and the variable name, `temperature`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s how the entire workflow is. So to summarize:'
  prefs: []
  type: TYPE_NORMAL
- en: Import required libraries.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Based on the circuit, read the raw values from the used pin and process the
    value to get the desired output.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Push the value to `dweet.io`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Save this code with the name `dweetEdison.js` and to run this code, type in
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you run the code by executing the preceding statement in the PuTTY Terminal,
    you will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_02_013.png)'
  prefs: []
  type: TYPE_IMG
- en: PuTTY console—output
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, the preceding code may throw an error while importing the `mraa`
    library. There are issues with reading analog pin values. This usually happens
    if you have the `mraa` library installed from multiple sources. In that case,
    reflash your device and follow all the steps.
  prefs: []
  type: TYPE_NORMAL
- en: Now, once you see this, then your code is running successfully. Now we will
    head on to the `dweet.io` page and see whether our data is really getting uploaded
    or not. We have named our thing WeatherStation. Your thing name will obviously
    differ since it's unique.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now browse to the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '`https://dweet.io/follow/YOUR_THING_NAME`'
  prefs: []
  type: TYPE_NORMAL
- en: 'You should have a plot or a visual like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_02_015.png)'
  prefs: []
  type: TYPE_IMG
- en: Temperature plot—dweet.io
  prefs: []
  type: TYPE_NORMAL
- en: 'The plot seems incomplete unless and until we have a gauge. There is something
    called `freeboard.io`. It''s also free, but again it is public. So, browse to
    `freeboard.io` and log in or sign up if you don''t have an account:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_02_016.png)'
  prefs: []
  type: TYPE_IMG
- en: freeboard.io—account page
  prefs: []
  type: TYPE_NORMAL
- en: 'Provide a name and click on Create New. Here we have provided WeatherStation.
    Once you create the board, you will be automatically redirected to the board design
    page. Next, under DATASOURCES, click on ADD:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_02_017.png)'
  prefs: []
  type: TYPE_IMG
- en: Freeboard screenshot
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, once you click on ADD, you have to select a TYPE. Select Dweet.io. Under
    NAME, provide any name. For simplicity, make the name and the thing name the same.
    Since your thing in `dweet.io` is public, we don''t need to provide a key. Click
    on SAVE to proceed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_02_018.png)'
  prefs: []
  type: TYPE_IMG
- en: Dweet.io datasource
  prefs: []
  type: TYPE_NORMAL
- en: 'Once done, we need to add a pane for our incoming data. For that, click on
    ADD PANE and proceed to add a new gauge. Fill in the details as shown in the following
    screenshot. Note that under the value field, we''ve written `datasources["WeatherStation"]["Temperature"]`.
    So here, `WeatherStation` is your thing name, which is followed by the parameter
    name that we want to display. Similarly, the project that will be discussed in
    the upcoming section of this chapter will have other parameters too:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_02_019.png)'
  prefs: []
  type: TYPE_IMG
- en: Freeboard
  prefs: []
  type: TYPE_NORMAL
- en: Click on SAVE and you should have your gauge displayed on your board home page.
  prefs: []
  type: TYPE_NORMAL
- en: 'This gauge won''t show any value as of now since your code is not running.
    So go back to your PuTTY console and run your Node.js code. Once your code is
    up and running, then the gauge should represent your incoming data, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_02_020.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Gauge in working mode
  prefs: []
  type: TYPE_NORMAL
- en: Thus we have deployed a very simple use case of uploading data from the Edison
    to `dweet.io` and displaying it on `freeboard.io`. In the next section, we'll
    deal with a live IoT project where we'll deal with more than one parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Live use case of an IoT project - mini weather station
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous section, we have seen the use case of uploading temperature
    data only. Now, with mini weather station, we are going to deal with three parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: Temperature
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pollution level
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sound level
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All three parameters will be uploaded to the cloud and displayed live on the
    dashboard. The project will be divided into parts, which will make it easier to
    understand, and we will also tackle other complex projects:'
  prefs: []
  type: TYPE_NORMAL
- en: Architecture of the system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sensor and hardware components and detailed circuit diagram
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Locally acquiring data and displaying it on the console
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uploading the data to the cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualizing the data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most details were shown previously using a temperature sensor, so we won't go
    into much depth, but we will cover all aspects.
  prefs: []
  type: TYPE_NORMAL
- en: Architecture of the system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The architecture of the system will be very much similar to the generic architecture
    of the system discussed at the beginning of the chapter, with the components of
    actuators and alerts missing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_02_021.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Architecture of the weather station
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the preceding figure, we have three sensors (temperature,
    smoke, and noise) that supply raw data to the controller, that is Intel Edison,
    and the controller processes the raw data to upload to the IoT platform of `dweet.io`,
    which is ultimately displayed on the dashboard on `freeboard.io`. For this project,
    we are not interested in alerts and actuators, so those aren't included.
  prefs: []
  type: TYPE_NORMAL
- en: Hardware components and detailed circuit diagram
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the project to be realized, we will deal with the following hardware components:'
  prefs: []
  type: TYPE_NORMAL
- en: Grove temperature sensor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Grove sound sensor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MQ2 smoke sensor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All of the preceding three sensors have more or less a similar configuration
    of pins, so connections are pretty simple. As already explained, we're going to
    use the analog pins on the Intel Edison for the input from the sensors.
  prefs: []
  type: TYPE_NORMAL
- en: The MQ2 sensor returns raw values. Here, we'll use the raw values and calibrate
    the sensor based on the level of smoke.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the circuit diagram for the system. Please note that we''ve
    only mentioned the pins that will be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6639_02_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Circuit diagram - weather station
  prefs: []
  type: TYPE_NORMAL
- en: We've made a common **Vcc** and **Gnd** connection where all the sensors are
    hooked up. Next, we need three analog pins. These pins are connected to the analog
    output pins of the sensors. It should be noted that some sensors may have two
    output pins, one of which one is analog out, while the other is digital out. Since
    we are interested in analog output, we will not be using the digital output pins.
    In this project, the MQ2 sensor (the smoke sensor) has such a configuration.
  prefs: []
  type: TYPE_NORMAL
- en: For calibrating the **Smoke sensor**, we need the presence of some smoke that
    the sensor is sensitive to. Although we'll be pushing raw values, for local alarms
    the thresholding technique may be used.
  prefs: []
  type: TYPE_NORMAL
- en: Connect your sensor and the Edison device based on the preceding circuit diagram.
    Once connected, you are good to go with the code.
  prefs: []
  type: TYPE_NORMAL
- en: Code for weather station stage 1, acquiring data from all the sensors and displaying
    it in the console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before moving on to the code, let''s have a look at the algorithm first:'
  prefs: []
  type: TYPE_NORMAL
- en: Import libraries.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Initialize input pins.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Read raw values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Process the values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Display it to the console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is similar to the earlier example, the only difference being that we''re
    going to use three sensors. In this case, the code will be written in Node.js,
    since at a later stage we''ll be pushing it to the cloud, that is, `dweet.io`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Before explaining the code, processing has only been performed on the temperature
    sensor. For the sound level, we'll send raw values because for conversion into
    decibels, which is a relative quantity**,** we need to access the sound pressure
    of two instances. So we will restrict ourselves to raw values. However, we can
    certainly find a threshold value of the raw readings and use the threshold to
    invoke an action, such as turning on an LED or sounding a buzzer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s have a close look at the code. Most of the code is similar to that
    of the temperature module. We''ve added a few more lines for smoke and sound detection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding lines, we declared which analog pins are used for sound sensor
    input and smoke sensor input. In the following lines we will read the values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Ultimately, we display the captured values using the console.
  prefs: []
  type: TYPE_NORMAL
- en: When dealing with sensors such as smoke and sound  sensors, we may not get the
    standard unit values directly. In these cases, we need to manually calibrate the
    sensors to simulate an environment of known values. Suppose in case of a smoke
    sensor, we set up an environment where we know what the value is, then by varying
    the potentiometer we change the value of the variable resistance, thus calibrating
    the sensor. That's one of the many standard procedures available. Calibration
    will be dealt with in detail when we cover the robotics module.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you run the preceding code in the console, you will get the output from
    all the sensors. Try to increase smoke around the smoke sensor or speak loudly
    in front of the sound sensor to increase the value, or keep the temperature sensor
    near your laptop vent to get a higher reading. The following is the screenshot
    of the values obtained from the sensors:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_02_025-1.png)'
  prefs: []
  type: TYPE_IMG
- en: Sensor reading output
  prefs: []
  type: TYPE_NORMAL
- en: Once you obtain the readings, we can push them to the cloud and display them
    on the dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, if you notice that you are not getting correct readings, then you need
    to adjust the potentiometer available on the sensor to calibrate it manually.
    For uploading it to the cloud, we need to impart some changes in the code. Refer
    to the following code for pushing all the three data obtained to `dweet.io`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, again you will find lots of similarities with the code
    for `temperature`. Here, we have performed three read operations and we''ve sent
    all the three values respective to the parameter it represents. It''s evident
    from the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Transfer the code by following a similar process that was discussed before,
    using FileZilla, and execute it using the `node` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_02_026-1.png)'
  prefs: []
  type: TYPE_IMG
- en: PuTTY Terminal
  prefs: []
  type: TYPE_NORMAL
- en: 'Having a look at the preceding screenshot, it''s clear that values are being
    sent. Now, please note the sound and smoke values. Initially, music was being
    played, so we got sound values in the range of 20-70\. For the smoke sensor, the
    standard value is around 250-300\. In the last reading, I applied some smoke and
    it shot to 374\. Now browse to your `dweet.io` portal and you will notice the
    values being updated live:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_02_027-1.png)'
  prefs: []
  type: TYPE_IMG
- en: Dweet.io screenshot for live data
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have things set up on this side, we''ll add two more gauges to `freeboard.io`
    for visualizations. Log on to `freeboard.io` and follow the method as explained
    before for addition of gauges. Be specific when matching the DATASOURCES where
    you need to specify the parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_02_028-1.png)'
  prefs: []
  type: TYPE_IMG
- en: Freeboard.io ﬁnal layout
  prefs: []
  type: TYPE_NORMAL
- en: Once this is done, well, you will have your own weather station ready, and up
    and running. Once we understand the concepts, it's extremely easy to realize these
    mini projects.
  prefs: []
  type: TYPE_NORMAL
- en: Open-ended task for the reader
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since you have got a fair idea of how to realize small IoT projects, we'll provide
    you a simple open-ended task for you to implement.
  prefs: []
  type: TYPE_NORMAL
- en: We've used `dweet.io` and `freeboard.io`. Besides this, there are several other
    IoT platforms, such as Azure, IBM Bluemix, and Thingspeak. Your task is to simulate
    a similar thing on other IoT platforms. Azure and IBM requires you to sign up
    by the use of debit or credit card, but for the first month it's free and it can
    be used for IoT, while, on the other hand, Thingspeak is totally free and it has
    support for Matlab.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we've learned about the architecture of IoT systems, how to
    tackle problem statements, and we also learned about sensors and interfacing them.
    Then we moved on to the IoT platforms and visualized some temperature data. At
    the end, we built a mini weather station that measures temperature, sound level,
    and pollution level. We also covered a very brief discussion of the calibration
    of sensors.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 3](3bd53219-a287-4d8f-9a58-5a06c5b14062.xhtml), *Intel Edison and
    IoT (Home Automation)*, we'll be dealing with communication from a platform to
    the controller, that is, controlling devices using the Internet. Then we'll engage
    ourselves in a home automation project where we'll be controlling two devices
    using an Android and a WPF application.
  prefs: []
  type: TYPE_NORMAL
