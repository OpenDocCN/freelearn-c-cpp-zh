- en: Weather Station (IoT)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 气象站（物联网）
- en: In [Chapter 1](c225d705-919a-4442-adc8-7b22d33437fc.xhtml), *Setting up Intel
    Edison*, we learned how to set up the Intel Edison and run some basic programs
    in various languages. In this chapter, we'll scale up things a bit and introduce
    the Internet to the picture of the IoTs. We will hear this term quite often, and
    there has been no exact definition of it. However, if we try to bring out the
    literal meaning of IoT, it means connecting devices to the Internet. It may also
    be referred to as **connected devices** or **smart devices**. It's an advanced
    form of **machine to machine** (**M2M**) communication. In this chapter, the main
    focus will be on the architecture of IoTs and how Intel Edison is the perfect
    choice for developing systems revolving around IoT. We'll also be dealing with
    various components of a typical IoT project and how things can be scaled up at
    the component level. By the end of this chapter, we'll have built a system using
    Intel Edison that will take in pollution data, temperature data, and sound data,
    and upload it to the Web and display it live on a dashboard.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](c225d705-919a-4442-adc8-7b22d33437fc.xhtml) *设置英特尔爱迪生* 中，我们学习了如何设置英特尔爱迪生并在各种语言中运行一些基本程序。在本章中，我们将事情扩展一点，将互联网引入物联网的画面。我们将经常听到这个术语，但还没有确切的定义。然而，如果我们尝试提取物联网的字面意义，它意味着将设备连接到互联网。它也可能被称为**连接设备**或**智能设备**。它是**机器对机器**（**M2M**）通信的高级形式。在本章中，主要关注物联网的架构以及英特尔爱迪生是如何成为围绕物联网开发系统的完美选择的。我们还将处理典型物联网项目的各种组件以及如何在组件级别进行扩展。到本章结束时，我们将构建一个使用英特尔爱迪生的系统，该系统将接收污染数据、温度数据和声音数据，并将其上传到网络并在仪表板上实时显示。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Architecture of a typical IoT system interfacing sensors with Intel Edison
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 典型物联网系统架构，将传感器与英特尔爱迪生接口
- en: Connecting the device and uploading data to the cloud deploying a mini weather
    station with Intel Edison
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接设备并将数据上传到云端，部署带有英特尔爱迪生的微型气象站
- en: Overview of IoT and its usage
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 物联网及其用法的概述
- en: IoT has lots of usage and can make normal things behave smartly. Starting from
    industries, where we deal with large machinery, such as industrial robots and
    assembly line industrial units, IoT has its roots embedded in many uses providing
    vital data to the cloud, or a local server, where we can monitor them remotely
    and provide remote functionality in every place that uses IoT. Now imagine a healthcare
    solution where we have an aged member of our family and we need to monitor them
    regularly.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 物联网有很多用途，可以使普通事物变得智能化。从工业开始，我们处理大型机械，如工业机器人和装配线工业单元，物联网的根源植根于许多用途，为云端或本地服务器提供关键数据，我们可以在任何使用物联网的地方远程监控并提供远程功能。现在想象一个医疗保健解决方案，我们家庭中有年迈的成员，我们需要定期监控他们。
- en: Smart medical devices come to the picture, where the data collected from the
    human body is constantly pushed to the cloud and monitored at a local level for
    any signs of abnormality. Proper analytics is performed at cloud level where using
    machine learning algorithms, we can predict the health of the person. Considering
    the use case of home automation that will be covered in [Chapter 3](3bd53219-a287-4d8f-9a58-5a06c5b14062.xhtml),
    *Intel Edison and IoT (Home **Automation)*, we can deal with controlling devices
    and monitoring the usage of devices such as electrical load such as lights, fans,
    and AC, remotely from anywhere in the world.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 智能医疗设备出现在画面中，从人体收集的数据不断推送到云端，并在本地层面监控任何异常迹象。在云端进行适当的分析，利用机器学习算法，我们可以预测个人的健康状况。考虑到将在[第3章](3bd53219-a287-4d8f-9a58-5a06c5b14062.xhtml)中讨论的智能家居自动化用例，*英特尔爱迪生和物联网（家庭自动化）*，我们可以远程控制设备并监控如灯光、风扇和空调等电气负载的用法，无论在世界任何地方。
- en: Architecture of a typical IoT project
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 典型物联网项目的架构
- en: 'When dealing with IoT projects, there are certain key factors that should be
    kept in mind, some of which are as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理物联网项目时，有一些关键因素应该牢记在心，以下是一些：
- en: Choice of hardware
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 硬件选择
- en: Choice of the networking protocol
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络协议的选择
- en: Choice of the sensors
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传感器的选择
- en: Choice of the IoT platform
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 物联网平台的选择
- en: Beside the previously mentioned points, several other factors come into play
    that will be clear later in the chapter. When dealing with IoT, the first thing
    that comes to our mind is uploading data. Typically, what is involved in an IoT
    project is we take readings from sensors and upload them to the Web. In this process,
    several sub-processes, such as processing and filtering data, analytics, and machine
    learning, come to play.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 除了之前提到的点之外，还有一些其他因素将在本章后面的部分变得清晰。在处理物联网时，我们首先想到的是上传数据。通常，物联网项目涉及从传感器读取数据并将其上传到网络。在这个过程中，包括数据处理和过滤、分析和机器学习在内的几个子过程都会发挥作用。
- en: 'The following diagram depicts a standard architecture:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示展示了一个标准架构：
- en: '![](img/6639_02_01.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6639_02_01.jpg)'
- en: IoT architecture overview
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 物联网架构概述
- en: 'As depicted in the preceding diagram, the typical IoT system may consist of
    these components:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如前图所示，典型的物联网系统可能包括以下组件：
- en: Sensors
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传感器
- en: Controller actuators
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制器执行器
- en: IoT platform or cloud
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 物联网平台或云
- en: Dashboard and alerts
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仪表盘和警报
- en: Sensors
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 传感器
- en: 'Sensors form a key role in the IoT space. These act as a kind of connection
    layer between the physical world and the digital world. The sensors coupled provide
    the entire system with the data that we want. Currently we aren''t focused on
    industrial-grade sensors, but low-power sensors are suitable for small proof of
    concepts. When dealing with sensors, certain factors should be kept in mind:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 传感器在物联网空间中扮演着关键角色。它们充当物理世界和数字世界之间的一种连接层。传感器耦合提供了我们想要的整个系统的数据。目前我们并不专注于工业级传感器，但低功耗传感器适合小型概念验证。在处理传感器时，应考虑以下因素：
- en: Power used by the sensor
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传感器使用的电源
- en: Type of output provided (digital or analog)
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供的输出类型（数字或模拟）
- en: Sensitivity of the sensor
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传感器的灵敏度
- en: The sensor usually performs one-way communication with the controller. The data
    captured by the sensors is converted into digital values using an ADC, and we
    obtain the output through a controller. Let's consider a use case of a light sensor.
    In this case, the sensor returns a calibrated value of the resistance. Thus we
    get a resistance value based on the light intensity. It is similar for other sensors,
    where any physical component is read and converted to a digital component. Normally
    a sensor has three pins; Vcc, Gnd, and signal. The interfacing of sensors with
    the controller will be discussed later in the chapter.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 传感器通常与控制器进行单向通信。传感器捕获的数据通过ADC转换为数字值，我们通过控制器获得输出。让我们考虑一个光传感器的用例。在这种情况下，传感器返回一个校准后的电阻值。因此，我们根据光强度得到一个电阻值。其他传感器的情况类似，任何物理组件都被读取并转换为数字组件。通常，传感器有三个引脚；Vcc、Gnd和信号。传感器与控制器的接口将在本章后面讨论。
- en: Controllers
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制器
- en: These are the brain of an IoT system. Controllers perform most of the action
    in the IoT space. In industry, controllers may be referred as IoT gateways. From
    data acquisition to processing this data to uploading it to the cloud and control
    actuators, are all performed by the controller. Usually, controllers have the
    capabilities of networking and wireless communication. If some controllers don't
    have that capability, then usually they are stacked up with external networking
    devices. Arduino, Raspberry Pi, Intel Galileo, and Intel Edison are some of the
    most commonly used controllers. Controllers normally come with GPIO pins that
    interface with other devices. Most of the details of Intel Edison, the controller
    that we are using, were discussed in [Chapter 1](c225d705-919a-4442-adc8-7b22d33437fc.xhtml), *Setting
    up Intel Edison*.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是物联网系统的“大脑”。控制器在物联网空间中执行大部分操作。在工业领域，控制器可能被称为物联网网关。从数据采集到处理这些数据，再到将其上传到云并控制执行器，所有这些操作都是由控制器完成的。通常，控制器具有网络和无线通信的能力。如果某些控制器没有这种能力，那么通常它们会与外部网络设备堆叠。Arduino、Raspberry
    Pi、Intel Galileo和Intel Edison是最常用的控制器之一。控制器通常带有GPIO引脚，用于与其他设备接口。我们使用的控制器Intel
    Edison的大部分细节在[第1章](c225d705-919a-4442-adc8-7b22d33437fc.xhtml)，*设置Intel Edison*中已有讨论。
- en: Actuators
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行器
- en: Actuators consist of mainly electro-mechanical devices that provide us some
    action on the basis of controller signals. Based on signals sent by the controllers,
    actuators get activated or deactivated. Actuators are mainly motors; servos fall
    into this category as well. Controllers cannot directly control actuators because
    of the high power requirements or the nature of the current (AC or DC) of the
    actuators. The interfacing hardware component is called a driver circuit.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 执行器主要由提供基于控制器信号的某些动作的机电装置组成。基于控制器发送的信号，执行器被激活或去激活。执行器主要是电机；伺服电机也属于这一类别。由于执行器的高功率需求或电流的性质（交流或直流），控制器不能直接控制执行器。接口的硬件组件称为驱动电路。
- en: Controllers send control signals to the driver circuits and based on these control
    signals, the actuators gets activated. While dealing with the robotics module
    of this book, the actuators will be discussed in detail.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器向驱动电路发送控制信号，根据这些控制信号，执行器被激活。在处理本书的机器人模块时，我们将详细讨论执行器。
- en: Cloud or IoT platform
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云或物联网平台
- en: 'This is perhaps one of the most important parts of the entire IoT ecosystem
    because of the fact that at the end we need to upload the data so that it can
    be accessed from anywhere, which is the Internet part of IoTs. Normally we prefer
    to go for IoTs platforms. These platforms have their own SDKs and we just use
    those SDKs to pair up our device with the IoT platform and upload the data. Top-level
    players in the IoT platform include Microsoft Windows Azure, IBM Bluemix, and
    Amazon Web Services. There are other platforms that provide those services, such
    as Datonis, Dweet, Thingspeak, Thingworx, and many more. The choice of the IoT
    platform is very specific to the use case depending on certain factors, such as:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是整个物联网（IoT）生态系统中最重要的一部分，因为最终我们需要上传数据，以便可以从任何地方访问，这是物联网的互联网部分。通常我们更倾向于选择物联网平台。这些平台都有自己的SDK，我们只需使用这些SDK将我们的设备与物联网平台配对并上传数据。物联网平台中的顶级玩家包括微软Windows
    Azure、IBM Bluemix和亚马逊网络服务。还有其他提供这些服务的平台，例如Datonis、Dweet、Thingspeak、Thingworx等等。物联网平台的选择非常具体，取决于某些因素，例如：
- en: '**Protocols it supports**: These are mainly REST, web sockets, and MQTT'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支持的协议**：这些主要是REST、WebSockets和MQTT'
- en: '**Dashboard capability**: The platforms, own dashboards for visualization and
    the flexibility of development of custom dashboards'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仪表板功能**：平台拥有自己的仪表板用于可视化，以及开发自定义仪表板的灵活性'
- en: '**Rule engines**: These include the rules that are needed to be defined based
    on the incoming data'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**规则引擎**：这些包括基于传入数据需要定义的规则'
- en: '**Event-based services**: These are the necessity of triggering of events based
    on the output of the rule engines'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于事件的 服务**：这些是基于规则引擎输出的触发事件的必要性'
- en: In this chapter, we will be discussing the use of `dweet.io` for our project,
    a mini weather station.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论在我们的项目中使用`dweet.io`，一个迷你气象站。
- en: Dashboards and alerts
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仪表板和警报
- en: When we have data, the data should be viewed in the form of gauges, graphs,
    and so on. In most cases, the platform itself provides support, but sometimes
    there arises a requirement of building custom dashboard based on the data we get.
    Normally through REST API calls, we get the data from the IoT platform to our
    custom dashboards. These are also essential components of an IoT ecosystem. Dashboards
    must also be compatible with devices ranging from PCs to mobile devices. They
    also must be in real time. While dashboards deal with data visualizations, alerts
    on the other hand are responsible for notifying the user of any malfunctions or
    any abnormalities in the system. Normally the preferred mode of alerts is either
    some visualizations, push notifications, e-mails, text messages, and so on.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们有数据时，数据应以仪表盘、图表等形式呈现。在大多数情况下，平台本身提供支持，但有时会出现根据我们获得的数据构建自定义仪表板的需求。通常通过REST
    API调用，我们从物联网平台获取数据到我们的自定义仪表板。这些也是物联网生态系统的重要组成部分。仪表板还必须与从PC到移动设备等各种设备兼容。它们也必须是实时的。虽然仪表板处理数据可视化，但另一方面，警报负责通知用户系统中的任何故障或异常。通常警报的首选方式是某些可视化、推送通知、电子邮件、短信等等。
- en: Interfacing sensors with Intel Edison
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将传感器与英特尔爱迪生（Intel Edison）接口
- en: 'Earlier in this chapter, we had a brief idea about sensors. Now we will see
    how to interface these sensors with the Intel Edison. Let us consider the use
    of the temperature sensor. As already mentioned, most of the sensors have a three
    or four-pin configuration:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章前面，我们简要地了解了一些传感器。现在我们将看到如何将这些传感器与英特尔爱迪生板进行接口。让我们考虑使用温度传感器的例子。如前所述，大多数传感器都有三或四引脚配置：
- en: Vcc
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vcc
- en: Ground
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地线
- en: Signal
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信号
- en: 'If you have a look at the Edison board, the board will have analog pins. Ideally,
    if the sensor returns an analog value, then it goes in the analog pin. It is similar
    for digital output: we prefer the use of digital pins. Let us look at the following
    example, where we will interface a temperature sensor. Normally, a typical temperature
    sensor has three pins. The configuration is the same as previously. However, sometimes
    due to board compatibility issues, it may come with a four-pin configuration,
    but in that case one of the pins is not used.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看爱迪生板，板上会有模拟引脚。理想情况下，如果传感器返回一个模拟值，那么它就会进入模拟引脚。对于数字输出也是类似的：我们更倾向于使用数字引脚。让我们看看以下示例，我们将要连接一个温度传感器。通常，一个典型的温度传感器有三个引脚。配置与之前相同。然而，有时由于板兼容性问题，它可能带有四引脚配置，但在那种情况下，其中一个引脚是不使用的。
- en: 'In this example, we are going to use a Grove temperature sensor module:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用一个Grove温度传感器模块：
- en: '![](img/image_02_002.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_02_002.jpg)'
- en: Grove temperature sensor module
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Grove温度传感器模块
- en: 'The preceding image is a temperature sensor. You may notice that it has four-pins,
    designated as Vcc, Gnd, Sig, and NC. In order to connect with your Edison, follow
    the following circuit diagram:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 上一张图片是一个温度传感器。你可能注意到它有四个引脚，分别标记为Vcc、Gnd、Sig和NC。为了与你的爱迪生板连接，请遵循以下电路图：
- en: '![](img/image_02_003.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_02_003.jpg)'
- en: Circuit diagram for basic temperature data
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 基本温度数据电路图
- en: In this circuit diagram, it is noticed that the NC pin is not connected. Thus,
    only three-pins, Vcc, Gnd, and Sig, are connected. Now, once you are done with
    the connections, we need to write some algorithms for reading the data. The standard
    procedure is to search for the datasheet of the sensor. Normally, we also get
    mathematical equations for the sensor to obtain the desired parameters.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个电路图中，我们可以注意到NC引脚没有连接。因此，只有三个引脚，即Vcc、Gnd和Sig，被连接。现在，一旦你完成了连接，我们需要编写一些读取数据的算法。标准程序是查找传感器的数据表。通常，我们也会得到传感器获取所需参数的数学方程。
- en: 'For the Grove temperature sensor module, our first target is to obtain some
    data from the manufacturer''s website. Normally, these sensors calculate temperature
    based on the change in resistance:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Grove温度传感器模块，我们的第一个目标是获取制造商网站上的某些数据。通常，这些传感器根据电阻的变化来计算温度：
- en: '![](img/image_02_004.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_02_004.jpg)'
- en: 'Algorithm for temperature calculation. Picture credits: [h](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[t](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[t](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[p](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[://w](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[i](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[k](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[i](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[.](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[s](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[d](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[.](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[c](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[c](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[/G](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[r](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[o](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[v](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[-](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[T](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[m](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[p](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[r](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[a](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[t](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[u](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[r](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[_](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[S](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[n](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[s](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[o](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[r](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[_](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[V](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[1.](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[2/](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 温度计算算法。图片来源：[h](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[t](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[t](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[p](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[://w](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[i](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[k](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[i](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[.](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[s](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[d](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[.](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[c](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[c](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[/G](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[r](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[o](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[v](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[-](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[T](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[m](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[p](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[r](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[a](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[t](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[u](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[r](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[_](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[S](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[n](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[s](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[o](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[r](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[_](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[V](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[1.](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[2/](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)
- en: 'The final formulae will be as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 最终公式如下：
- en: '*B=4275*'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*B=4275*'
- en: '*R0=100000*'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*R0=100000*'
- en: '*R= 1023.0/a-1.0 R= 100000*R*'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '*R= 1023.0/a-1.0 R= 100000*R*'
- en: Final Temperature = *1.0/(log(R/100000.0)/B+1/298.15)-273.15*
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 最终温度 = *1.0/(log(R/100000.0)/B+1/298.15)-273.15*
- en: The preceding deduction was obtained from [h](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[t](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[t](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[p](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[://w](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[i](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[k](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[i](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[.](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[s](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[d](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[.](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[c](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[c](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[/G](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[r](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[o](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[v](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[-](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[T](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[m](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[p](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[r](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[a](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[t](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[u](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[r](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[_](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[S](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[n](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[s](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[o](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[r](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[_](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[V](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[1.](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[2/](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的推导来自[h](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[t](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[t](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[p](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[://w](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[i](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[k](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[i](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[.](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[s](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[d](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[.](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[c](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[c](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[/G](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[r](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[o](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[v](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[-](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[T](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[m](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[p](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[r](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[a](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[t](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[u](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[r](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[_](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[S](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[e](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[n](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[s](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[o](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[r](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[_](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[V](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[1.](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/)[2/](http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2/).
- en: 'When converting the preceding deduction into code for the Arduino IDE to deploy
    into the Edison, the result will be as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当将前面的推导转换为Arduino IDE的代码以部署到Edison时，结果如下：
- en: '[PRE0]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Explanation of the code
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码说明
- en: 'Let''s discuss the steps that we need to follow:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论我们需要遵循的步骤：
- en: Initially we declare the values of `B` and `R0`. These values are obtained from
    the datasheet, as shown in the algorithm.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始时，我们声明`B`和`R0`的值。这些值来自数据表，如算法中所示。
- en: Next, we declare the analog pin, `tempPin`, which will be used.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们声明将使用的模拟引脚，`tempPin`。
- en: In the `setup()` function, we just perform the `Serial.begin(9600)` operation.
    The thing is that we don't set the `tempPin` to be in input mode because of the
    fact that analog pins by default are in input mode.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`setup()`函数中，我们只是执行`Serial.begin(9600)`操作。问题是，我们没有将`tempPin`设置为输入模式，因为默认情况下模拟引脚是输入模式。
- en: Next in the loop, we implement the calculations performed earlier in code and
    display it on the serial monitor.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在循环的下一个步骤中，我们将实现之前在代码中执行的运算，并在串行监视器上显示它。
- en: 'To access the serial monitor, press the top right corner button. After the
    serial windows opens, you will see your current room temperature:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要访问串行监视器，请按右上角按钮。串行窗口打开后，您将看到您当前房间的温度：
- en: '![](img/image_02_005.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_02_005.png)'
- en: Serial window. Note the baud rate and the temperature readings
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 串行窗口。注意波特率和温度读数
- en: From the preceding screenshot, you can note the temperature reading, which is
    pretty close to the original temperature. Depending on the sensitivity, the temperature
    may vary.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的屏幕截图，您可以注意到的温度读数，这非常接近原始温度。根据灵敏度，温度可能会有所不同。
- en: Now that we know how to access temperature sensor readings, we can move forward
    with the integration of other sensors for our weather station project.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了如何访问温度传感器的读数，我们可以继续进行其他传感器的集成，以完成我们的气象站项目。
- en: Connecting the device and uploading to the cloud (dweet.io)
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接设备并将数据上传到云端（dweet.io）
- en: Now that we know how to read the data from the sensors, our next target is to
    select an IoT platform where we'll upload data. We had a short discussion before
    about IoT platforms.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了如何读取传感器的数据，我们的下一个目标是选择一个物联网平台，我们将把数据上传到该平台。我们之前简要讨论过物联网平台。
- en: In this section, we will be dealing with `dweet.io`. This IoT platform is extremely
    simple to implement. We will be using the Node.js SDK for `dweet.io`. Before going
    into the details, let's have a look at the platform. Our target is to push the
    temperature data we obtained into the platform and display it on a dashboard.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将处理`dweet.io`。这个物联网平台非常易于实现。我们将使用`dweet.io`的Node.js SDK。在深入了解之前，让我们看看这个平台。我们的目标是把我们获取的温度数据推送到平台，并在仪表板上显示。
- en: '`dweet.io` is a simple publishing and subscribing service for machines (sensors,
    robots, devices, and so on). It''s like Twitter, but for things. Each thing is
    assigned a unique name and through REST services, we access, and update them.
    One thing to be noted is that the things we create are public. In order to create
    a private thing, we need to pay. Here we''ll cover only the public aspect of it:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`dweet.io`是一个简单的机器（传感器、机器人、设备等）发布和订阅服务。它就像Twitter，但针对事物。每个事物都分配了一个唯一的名称，通过REST服务，我们可以访问和更新它们。需要注意的是，我们创建的事物是公开的。为了创建一个私有事物，我们需要付费。在这里，我们将仅介绍其公开方面：'
- en: 'For details on `dweet.io`, refer to the following link:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`dweet.io`的详细信息，请参阅以下链接：
- en: '[https://dweet.io/faq](https://dweet.io/faq)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://dweet.io/faq](https://dweet.io/faq)'
- en: 'This will be one of the first steps for our weather station, as temperature
    is an integral part of it:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将是我们的气象站的第一步之一，因为温度是其不可或缺的一部分：
- en: '![](img/image_02_008.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_02_008.jpg)'
- en: Dweet.io screenshot
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Dweet.io截图
- en: 'Now click on the Play tab to enter the creation area:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击播放标签进入创建区域：
- en: '![](img/image_02_009.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_02_009.jpg)'
- en: Play—dweet.io
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 播放—dweet.io
- en: 'Next, we are going to provide a name to our thing:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将为我们的事物提供一个名称：
- en: '![](img/image_02_010.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_02_010.jpg)'
- en: dweet.io—Create a thing
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: dweet.io—创建事物
- en: Name your thing. The name has to be unique.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为您的“事物”命名。名称必须是唯一的。
- en: After clicking on the Try It Out! button, you will be getting a request URL.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“试试看！”按钮后，您将获得一个请求URL。
- en: Now, click on `https://dweet.io/follow/EdisonTemperature` to browse to your
    public thing page. Once the Edison is connected, we'll receive data here. So,
    for now, let's connect a temperature sensor to the Edison and connect it to your
    PC.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击`https://dweet.io/follow/EdisonTemperature`浏览到您的公共事物页面。一旦Edison连接，我们就会在这里接收数据。所以，现在，让我们将一个温度传感器连接到Edison，并将其连接到您的电脑。
- en: In this mini project, we are going to write a Node.js program that will access
    the data from the sensor and upload it to here in the preceding link. Also, instead
    of writing the code to the Intel XDK, we'll write the code in Notepad++ and transfer
    it using the FileZilla client.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个迷你项目中，我们将编写一个Node.js程序，该程序将访问传感器的数据并将其上传到前面链接的此处。此外，我们不会将代码写入Intel XDK，而是在Notepad++中编写代码，并使用FileZilla客户端进行传输。
- en: 'But again, we don''t have access to the libraries yet. So we need to add those
    libraries to our Edison device. For that, fire up your PuTTY Terminal and log
    in to your Edison:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 但再次，我们还没有访问到这些库。因此，我们需要将这些库添加到我们的Edison设备中。为此，启动您的PuTTY终端并登录到您的Edison：
- en: '![](img/image_02_011.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_02_011.png)'
- en: PuTTY console-setup—1
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: PuTTY console-setup—1
- en: 'Next, check whether your device is connected to your Wi-Fi network using the
    `ifconfig` command:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用`ifconfig`命令检查您的设备是否已连接到Wi-Fi网络：
- en: '![](img/image_02_012.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_02_012.png)'
- en: PuTTYconsole-setup—2
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: PuTTYconsole-setup—2
- en: 'Next, we will install the Node.js sdk for `dweet.io` on our device. Execute
    the following command:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将在我们的设备上安装`dweet.io`的Node.js SDK。执行以下命令：
- en: '[PRE1]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: It may take some time for the modules to be installed depending on the speed
    of your Internet connection. The warnings may be ignored.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的互联网连接速度，模块安装可能需要一些时间。警告可以忽略。
- en: 'Once installed, we''ll write the Node.js script for the Edison. Now open your
    editor and type in the following code:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，我们将为Edison编写Node.js脚本。现在打开您的编辑器并输入以下代码：
- en: '[PRE2]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To explain the code, let''s break it into parts. As you can see, we have a
    main function named `dweetSend`, which repeats itself after every 10 seconds.
    Initially, we need to get data from the temperature sensor. We''ve connected the
    temperature sensor to Analog pin 3\. If you have a close look at the code that
    was written in Arduino IDE, then you will find lots of similarities:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解释代码，让我们将其分解成几个部分。如您所见，我们有一个名为`dweetSend`的主函数，它在每10秒后重复一次。最初，我们需要从温度传感器获取数据。我们已经将温度传感器连接到模拟引脚3。如果您仔细查看在Arduino
    IDE中编写的代码，您会发现很多相似之处：
- en: '[PRE3]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In these lines, we import the node - `dweetio` library. The next piece of code
    is similar to the Arduino IDE, where we read the raw value of the analog read
    and perform required calculations:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些行中，我们导入node的`dweetio`库。下一部分代码类似于Arduino IDE，其中我们读取模拟读取的原始值并执行所需的计算：
- en: '[PRE4]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As stated in the preceding code, we have also rounded the temperature value
    to two decimal places. Next, we push the value to the `dweet.io` thing channel.
    Here, we need to mention that our thing name `WeatherStation`, followed by the
    name of the parameter, `Temperature`, and the variable name, `temperature`:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述的代码中所述，我们还将温度值四舍五入到两位小数。接下来，我们将值推送到`dweet.io`的thing通道。在这里，我们需要提到我们的thing名称`WeatherStation`，然后是参数名称`Temperature`和变量名称`temperature`：
- en: '[PRE5]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'That''s how the entire workflow is. So to summarize:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 整个工作流程就是这样。所以，总结一下：
- en: Import required libraries.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入所需的库。
- en: Based on the circuit, read the raw values from the used pin and process the
    value to get the desired output.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据电路，从使用的引脚读取原始值，并处理该值以获得所需的输出。
- en: Push the value to `dweet.io`.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将值推送到`dweet.io`。
- en: 'Save this code with the name `dweetEdison.js` and to run this code, type in
    the following command:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 将此代码保存为`dweetEdison.js`，要运行此代码，请输入以下命令：
- en: '[PRE6]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Once you run the code by executing the preceding statement in the PuTTY Terminal,
    you will see the following output:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在PuTTY终端中执行前面的语句来运行代码后，您将看到以下输出：
- en: '![](img/image_02_013.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_02_013.png)'
- en: PuTTY console—output
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: PuTTY console—output
- en: Sometimes, the preceding code may throw an error while importing the `mraa`
    library. There are issues with reading analog pin values. This usually happens
    if you have the `mraa` library installed from multiple sources. In that case,
    reflash your device and follow all the steps.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，在导入`mraa`库时，前面的代码可能会抛出错误。存在读取模拟引脚值的问题。这通常发生在您从多个来源安装了`mraa`库的情况下。在这种情况下，重新刷新您的设备并遵循所有步骤。
- en: Now, once you see this, then your code is running successfully. Now we will
    head on to the `dweet.io` page and see whether our data is really getting uploaded
    or not. We have named our thing WeatherStation. Your thing name will obviously
    differ since it's unique.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，一旦您看到这个，那么您的代码就运行成功了。现在我们将转到`dweet.io`页面，看看我们的数据是否真的被上传了。我们命名为WeatherStation。您的thing名称显然会有所不同，因为它是唯一的。
- en: 'Now browse to the following URL:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在浏览到以下URL：
- en: '`https://dweet.io/follow/YOUR_THING_NAME`'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`https://dweet.io/follow/YOUR_THING_NAME`'
- en: 'You should have a plot or a visual like this:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该有一个类似这样的图表或视觉表示：
- en: '![](img/image_02_015.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_02_015.png)'
- en: Temperature plot—dweet.io
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 温度曲线图—dweet.io
- en: 'The plot seems incomplete unless and until we have a gauge. There is something
    called `freeboard.io`. It''s also free, but again it is public. So, browse to
    `freeboard.io` and log in or sign up if you don''t have an account:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 除非我们有仪表，否则图表看起来不完整。有一个叫做`freeboard.io`的东西。它也是免费的，但同样它是公开的。所以，浏览到`freeboard.io`并登录或如果你没有账户则注册：
- en: '![](img/image_02_016.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_02_016.png)'
- en: freeboard.io—account page
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: freeboard.io—账户页面
- en: 'Provide a name and click on Create New. Here we have provided WeatherStation.
    Once you create the board, you will be automatically redirected to the board design
    page. Next, under DATASOURCES, click on ADD:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 提供一个名称并点击“创建新”。这里我们提供了WeatherStation。一旦创建板，你将自动重定向到板设计页面。接下来，在DATASOURCES下，点击“添加”：
- en: '![](img/image_02_017.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_02_017.png)'
- en: Freeboard screenshot
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Freeboard截图
- en: 'Now, once you click on ADD, you have to select a TYPE. Select Dweet.io. Under
    NAME, provide any name. For simplicity, make the name and the thing name the same.
    Since your thing in `dweet.io` is public, we don''t need to provide a key. Click
    on SAVE to proceed:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，一旦你点击“添加”，你必须选择一个类型。选择Dweet.io。在名称下，提供任何名称。为了简单起见，使名称和设备名称相同。由于你的设备在`dweet.io`上是公开的，我们不需要提供密钥。点击“保存”继续：
- en: '![](img/image_02_018.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_02_018.png)'
- en: Dweet.io datasource
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Dweet.io数据源
- en: 'Once done, we need to add a pane for our incoming data. For that, click on
    ADD PANE and proceed to add a new gauge. Fill in the details as shown in the following
    screenshot. Note that under the value field, we''ve written `datasources["WeatherStation"]["Temperature"]`.
    So here, `WeatherStation` is your thing name, which is followed by the parameter
    name that we want to display. Similarly, the project that will be discussed in
    the upcoming section of this chapter will have other parameters too:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，我们需要为我们的传入数据添加一个面板。为此，点击“添加面板”并继续添加一个新的仪表。填写以下截图所示的详细信息。注意，在值字段下，我们已写入`datasources["WeatherStation"]["Temperature"]`。因此，`WeatherStation`是您的设备名称，后面跟着我们想要显示的参数名称。同样，本章即将讨论的项目也将有其他参数：
- en: '![](img/image_02_019.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_02_019.png)'
- en: Freeboard
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Freeboard
- en: Click on SAVE and you should have your gauge displayed on your board home page.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“保存”，你应该能在你的板主页上看到你的仪表。
- en: 'This gauge won''t show any value as of now since your code is not running.
    So go back to your PuTTY console and run your Node.js code. Once your code is
    up and running, then the gauge should represent your incoming data, as shown in
    the following screenshot:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你的代码尚未运行，这个仪表目前不会显示任何值。所以回到你的PuTTY控制台并运行你的Node.js代码。一旦你的代码启动并运行，那么仪表应该代表你的传入数据，如以下截图所示：
- en: '![](img/image_02_020.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_02_020.jpg)'
- en: Gauge in working mode
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 工作模式下的仪表
- en: Thus we have deployed a very simple use case of uploading data from the Edison
    to `dweet.io` and displaying it on `freeboard.io`. In the next section, we'll
    deal with a live IoT project where we'll deal with more than one parameter.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们已经部署了一个非常简单的用例，从Edison上传数据到`dweet.io`并在`freeboard.io`上显示。在下一节中，我们将处理一个实时物联网项目，我们将处理多个参数。
- en: Live use case of an IoT project - mini weather station
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 物联网项目实时用例 - 迷你气象站
- en: 'In the previous section, we have seen the use case of uploading temperature
    data only. Now, with mini weather station, we are going to deal with three parameters:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们看到了仅上传温度数据的用例。现在，使用迷你气象站，我们将处理三个参数：
- en: Temperature
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 温度
- en: Pollution level
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 污染等级
- en: Sound level
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声音等级
- en: 'All three parameters will be uploaded to the cloud and displayed live on the
    dashboard. The project will be divided into parts, which will make it easier to
    understand, and we will also tackle other complex projects:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 所有三个参数都将上传到云端并在仪表板上实时显示。项目将被分成几个部分，这将使其更容易理解，我们还将处理其他复杂项目：
- en: Architecture of the system
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统架构
- en: Sensor and hardware components and detailed circuit diagram
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传感器和硬件组件以及详细的电路图
- en: Locally acquiring data and displaying it on the console
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在控制台上本地获取数据并显示
- en: Uploading the data to the cloud
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将数据上传到云端
- en: Visualizing the data
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可视化数据
- en: Most details were shown previously using a temperature sensor, so we won't go
    into much depth, but we will cover all aspects.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数细节之前已经使用温度传感器展示过了，所以我们将不会深入探讨，但会涵盖所有方面。
- en: Architecture of the system
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 系统架构
- en: 'The architecture of the system will be very much similar to the generic architecture
    of the system discussed at the beginning of the chapter, with the components of
    actuators and alerts missing:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 系统的架构将与本章开头讨论的通用系统架构非常相似，只是缺少执行器和警报组件：
- en: '![](img/image_02_021.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_02_021.jpg)'
- en: Architecture of the weather station
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 气象站的架构
- en: As you can see in the preceding figure, we have three sensors (temperature,
    smoke, and noise) that supply raw data to the controller, that is Intel Edison,
    and the controller processes the raw data to upload to the IoT platform of `dweet.io`,
    which is ultimately displayed on the dashboard on `freeboard.io`. For this project,
    we are not interested in alerts and actuators, so those aren't included.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 如前图所示，我们有三个传感器（温度、烟雾和噪音）向控制器（即英特尔爱迪生）提供原始数据，控制器处理原始数据并将其上传到`dweet.io`的物联网平台，最终在`freeboard.io`的仪表板上显示。对于这个项目，我们不对警报和执行器感兴趣，所以它们不包括在内。
- en: Hardware components and detailed circuit diagram
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 硬件组件和详细电路图
- en: 'For the project to be realized, we will deal with the following hardware components:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现项目，我们将处理以下硬件组件：
- en: Grove temperature sensor
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Grove温度传感器
- en: Grove sound sensor
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Grove声音传感器
- en: MQ2 smoke sensor
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MQ2烟雾传感器
- en: All of the preceding three sensors have more or less a similar configuration
    of pins, so connections are pretty simple. As already explained, we're going to
    use the analog pins on the Intel Edison for the input from the sensors.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的三个传感器在引脚配置上或多或少有相似之处，所以连接相当简单。正如之前解释的，我们将使用英特尔爱迪生的模拟引脚来接收传感器的输入。
- en: The MQ2 sensor returns raw values. Here, we'll use the raw values and calibrate
    the sensor based on the level of smoke.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: MQ2传感器返回原始值。在这里，我们将使用原始值并根据烟雾水平校准传感器。
- en: 'The following is the circuit diagram for the system. Please note that we''ve
    only mentioned the pins that will be used:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是系统的电路图。请注意，我们只提到了将要使用的引脚：
- en: '![](img/6639_02_19.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6639_02_19.jpg)'
- en: Circuit diagram - weather station
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 电路图 - 气象站
- en: We've made a common **Vcc** and **Gnd** connection where all the sensors are
    hooked up. Next, we need three analog pins. These pins are connected to the analog
    output pins of the sensors. It should be noted that some sensors may have two
    output pins, one of which one is analog out, while the other is digital out. Since
    we are interested in analog output, we will not be using the digital output pins.
    In this project, the MQ2 sensor (the smoke sensor) has such a configuration.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经制作了一个公共**Vcc**和**Gnd**连接，所有传感器都连接在这里。接下来，我们需要三个模拟引脚。这些引脚连接到传感器的模拟输出引脚。需要注意的是，一些传感器可能有两个输出引脚，其中一个可能是模拟输出，而另一个是数字输出。由于我们只对模拟输出感兴趣，所以不会使用数字输出引脚。在这个项目中，MQ2传感器（烟雾传感器）有这样的配置。
- en: For calibrating the **Smoke sensor**, we need the presence of some smoke that
    the sensor is sensitive to. Although we'll be pushing raw values, for local alarms
    the thresholding technique may be used.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 对于校准**烟雾传感器**，我们需要一些传感器敏感的烟雾存在。虽然我们将推送原始值，但对于本地警报，可以使用阈值技术。
- en: Connect your sensor and the Edison device based on the preceding circuit diagram.
    Once connected, you are good to go with the code.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的电路图连接您的传感器和爱迪生设备。一旦连接，您就可以使用代码了。
- en: Code for weather station stage 1, acquiring data from all the sensors and displaying
    it in the console
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 气象站阶段1的代码，从所有传感器获取数据并在控制台显示
- en: 'Before moving on to the code, let''s have a look at the algorithm first:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续代码之前，让我们先看看算法：
- en: Import libraries.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入库。
- en: Initialize input pins.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化输入引脚。
- en: Read raw values.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 读取原始值。
- en: Process the values.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 处理值。
- en: Display it to the console.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制台显示它。
- en: 'This is similar to the earlier example, the only difference being that we''re
    going to use three sensors. In this case, the code will be written in Node.js,
    since at a later stage we''ll be pushing it to the cloud, that is, `dweet.io`:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这与前面的例子类似，唯一的区别是我们将使用三个传感器。在这种情况下，代码将用Node.js编写，因为稍后我们将将其推送到云端，即`dweet.io`：
- en: '[PRE7]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Before explaining the code, processing has only been performed on the temperature
    sensor. For the sound level, we'll send raw values because for conversion into
    decibels, which is a relative quantity**,** we need to access the sound pressure
    of two instances. So we will restrict ourselves to raw values. However, we can
    certainly find a threshold value of the raw readings and use the threshold to
    invoke an action, such as turning on an LED or sounding a buzzer.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在解释代码之前，我们只对温度传感器进行了处理。对于声音水平，我们将发送原始值，因为要将值转换为分贝，这是一个相对量**，**我们需要访问两个实例的声音压力。因此，我们将限制自己使用原始值。然而，我们当然可以找到原始读数的阈值，并使用该阈值来触发一个动作，例如打开LED灯或发出蜂鸣声。
- en: 'Now, let''s have a close look at the code. Most of the code is similar to that
    of the temperature module. We''ve added a few more lines for smoke and sound detection:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们仔细看看代码。大部分代码与温度模块的代码相似。我们为烟雾和声音检测添加了一些额外的行：
- en: '[PRE8]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the preceding lines, we declared which analog pins are used for sound sensor
    input and smoke sensor input. In the following lines we will read the values:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的行中，我们声明了用于声音传感器输入和烟雾传感器输入的模拟引脚。在接下来的行中，我们将读取值：
- en: '[PRE9]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Ultimately, we display the captured values using the console.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，我们使用控制台显示捕获的值。
- en: When dealing with sensors such as smoke and sound  sensors, we may not get the
    standard unit values directly. In these cases, we need to manually calibrate the
    sensors to simulate an environment of known values. Suppose in case of a smoke
    sensor, we set up an environment where we know what the value is, then by varying
    the potentiometer we change the value of the variable resistance, thus calibrating
    the sensor. That's one of the many standard procedures available. Calibration
    will be dealt with in detail when we cover the robotics module.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 当处理烟雾和声音等传感器时，我们可能无法直接获得标准单位值。在这些情况下，我们需要手动校准传感器来模拟已知值的 环境。假设在烟雾传感器的情况下，我们设置了一个我们知道值的环境，然后通过调节电位器改变可变电阻的值，从而校准传感器。这是许多标准程序之一。校准将在我们介绍机器人模块时详细讨论。
- en: 'When you run the preceding code in the console, you will get the output from
    all the sensors. Try to increase smoke around the smoke sensor or speak loudly
    in front of the sound sensor to increase the value, or keep the temperature sensor
    near your laptop vent to get a higher reading. The following is the screenshot
    of the values obtained from the sensors:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在控制台运行前面的代码时，你将获得所有传感器的输出。尝试在烟雾传感器周围增加烟雾或在大声传感器前大声说话以增加值，或者将温度传感器靠近笔记本电脑的通风口以获得更高的读数。以下是传感器获得值的截图：
- en: '![](img/image_02_025-1.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_02_025-1.png)'
- en: Sensor reading output
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 传感器读数输出
- en: Once you obtain the readings, we can push them to the cloud and display them
    on the dashboard.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦获得读数，我们就可以将它们推送到云端并在仪表板上显示。
- en: 'Here, if you notice that you are not getting correct readings, then you need
    to adjust the potentiometer available on the sensor to calibrate it manually.
    For uploading it to the cloud, we need to impart some changes in the code. Refer
    to the following code for pushing all the three data obtained to `dweet.io`:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，如果你注意到你没有获得正确的读数，那么你需要调整传感器上的电位器来手动校准它。为了将其上传到云端，我们需要在代码中做一些更改。请参考以下代码，以将所有三个数据推送到`dweet.io`：
- en: '[PRE10]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the preceding code, again you will find lots of similarities with the code
    for `temperature`. Here, we have performed three read operations and we''ve sent
    all the three values respective to the parameter it represents. It''s evident
    from the following line:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，你又会发现与`温度`代码有很多相似之处。在这里，我们执行了三次读取操作，并分别发送了代表该参数的所有三个值。以下行中可以明显看出：
- en: '[PRE11]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Transfer the code by following a similar process that was discussed before,
    using FileZilla, and execute it using the `node` command:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循之前讨论的类似过程，使用FileZilla传输代码，并使用`node`命令执行它：
- en: '![](img/image_02_026-1.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_02_026-1.png)'
- en: PuTTY Terminal
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: PuTTY终端
- en: 'Having a look at the preceding screenshot, it''s clear that values are being
    sent. Now, please note the sound and smoke values. Initially, music was being
    played, so we got sound values in the range of 20-70\. For the smoke sensor, the
    standard value is around 250-300\. In the last reading, I applied some smoke and
    it shot to 374\. Now browse to your `dweet.io` portal and you will notice the
    values being updated live:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下前面的截图，很明显数据正在被发送。现在，请注意声音和烟雾的值。最初，正在播放音乐，所以我们得到了20-70的范围内的声音值。对于烟雾传感器，标准值大约在250-300之间。在上一次读取中，我添加了一些烟雾，它飙升至374。现在浏览到你的
    `dweet.io` 门户，你会注意到数据正在实时更新：
- en: '![](img/image_02_027-1.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_02_027-1.png)'
- en: Dweet.io screenshot for live data
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: Dweet.io实时数据截图
- en: 'Once we have things set up on this side, we''ll add two more gauges to `freeboard.io`
    for visualizations. Log on to `freeboard.io` and follow the method as explained
    before for addition of gauges. Be specific when matching the DATASOURCES where
    you need to specify the parameter:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们在这一侧设置好东西，我们将在 `freeboard.io` 上添加两个额外的仪表进行可视化。登录到 `freeboard.io` 并按照之前解释的方法添加仪表。在匹配需要指定参数的
    DATASOURCES 时要具体：
- en: '![](img/image_02_028-1.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_02_028-1.png)'
- en: Freeboard.io ﬁnal layout
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: Freeboard.io最终布局
- en: Once this is done, well, you will have your own weather station ready, and up
    and running. Once we understand the concepts, it's extremely easy to realize these
    mini projects.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些后，嗯，你将拥有自己的气象站，并且可以投入使用。一旦我们理解了概念，实现这些小型项目就极其容易。
- en: Open-ended task for the reader
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读者开放式任务
- en: Since you have got a fair idea of how to realize small IoT projects, we'll provide
    you a simple open-ended task for you to implement.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你已经对如何实现小型物联网项目有了相当的了解，我们将为你提供一个简单的开放式任务，供你实现。
- en: We've used `dweet.io` and `freeboard.io`. Besides this, there are several other
    IoT platforms, such as Azure, IBM Bluemix, and Thingspeak. Your task is to simulate
    a similar thing on other IoT platforms. Azure and IBM requires you to sign up
    by the use of debit or credit card, but for the first month it's free and it can
    be used for IoT, while, on the other hand, Thingspeak is totally free and it has
    support for Matlab.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了 `dweet.io` 和 `freeboard.io`。除此之外，还有其他几个物联网平台，如Azure、IBM Bluemix和Thingspeak。你的任务是模拟其他物联网平台上的类似功能。Azure和IBM要求你使用借记卡或信用卡注册，但前一个月是免费的，并且可以用于物联网，而另一方面，Thingspeak是免费的，并且支持Matlab。
- en: Summary
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we've learned about the architecture of IoT systems, how to
    tackle problem statements, and we also learned about sensors and interfacing them.
    Then we moved on to the IoT platforms and visualized some temperature data. At
    the end, we built a mini weather station that measures temperature, sound level,
    and pollution level. We also covered a very brief discussion of the calibration
    of sensors.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了物联网系统的架构，如何处理问题陈述，我们还学习了传感器及其接口。然后我们转向物联网平台，并可视化了一些温度数据。最后，我们构建了一个小型气象站，它可以测量温度、声音水平和污染水平。我们还简要讨论了传感器的校准。
- en: In [Chapter 3](3bd53219-a287-4d8f-9a58-5a06c5b14062.xhtml), *Intel Edison and
    IoT (Home Automation)*, we'll be dealing with communication from a platform to
    the controller, that is, controlling devices using the Internet. Then we'll engage
    ourselves in a home automation project where we'll be controlling two devices
    using an Android and a WPF application.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](3bd53219-a287-4d8f-9a58-5a06c5b14062.xhtml)，“英特尔爱迪生和物联网（家庭自动化）”，我们将处理平台到控制器的通信，即通过互联网控制设备。然后我们将参与一个家庭自动化项目，我们将使用Android和WPF应用程序控制两个设备。
