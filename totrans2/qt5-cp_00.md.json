["```cpp\n#include \"mainwindow.h\"\n#include <QApplication>\n\nint main(int argc, char *argv[])\n{\n    QApplication a(argc, argv);\n    MainWindow w;\n    w.show();\n\n    return a.exec();\n}\n```", "```cpp\n#include <QStyleOption>\n#include <QPainter>\n#include <QPaintEvent>\n#include <QMouseEvent>\n#include <QResizeEvent>\n#include \"canvas.h\"\n\nCanvas::Canvas(QWidget *parent) :\n  QWidget(parent)\n{\n}\n\nvoid Canvas::paintEvent(QPaintEvent *e)\n{\n  QPainter painter(this);\n\n  QStyleOption opt;\n  opt.initFrom(this);\n  this->style()->drawPrimitive(QStyle::PE_Widget, &opt, &painter, this);\n\n painter.drawImage(e->rect().topLeft(), image);\n}\n\nvoid Canvas::updateImage()\n{\n  QPainter painter(&image);\n  painter.setPen(QColor(Qt::black));\n  painter.setRenderHint(QPainter::Antialiasing);\n  painter.drawPolyline(m_points.data(), m_points.count());\n  this->update();\n}\n\nvoid Canvas::mousePressEvent(QMouseEvent *e)\n{\n  m_points.clear();\n  m_points.append(e->localPos());\n  updateImage();\n}\n\nvoid Canvas::mouseMoveEvent(QMouseEvent *e)\n{\n  m_points.append(e->localPos());\n  updateImage();\n}\n\nvoid Canvas::mouseReleaseEvent(QMouseEvent *e)\n{\n  m_points.append(e->localPos());\n  updateImage();\n}\n\nvoid Canvas::resizeEvent(QResizeEvent *e)\n{\n  QImage newImage(e->size(), QImage::Format_RGB32);\n  newImage.fill(Qt::white);\n  QPainter painter(&newImage);\n  painter.drawImage(0, 0, image);\n  image = newImage;\n  QWidget::resizeEvent(e);\n}\n```", "```cpp\n..\\..\\bin\\binarycreator.exe -c config\\config.xml -p packages internationalization_installer.exe\n```"]