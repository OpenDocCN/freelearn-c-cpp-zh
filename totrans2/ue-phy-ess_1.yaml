- en: Chapter 1. Math and Physics Primer
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. 数学与物理基础
- en: 'In this chapter, we will discuss and evaluate the basic 3D physics and mathematics
    concepts in an effort to gain a basic understanding of Unreal Engine 4 physics
    and real-world physics. To start with, we will discuss the units of measurement,
    what they are, and how they are used in Unreal Engine 4\. In addition, we will
    cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论和评估基本的3D物理和数学概念，以获得对Unreal Engine 4物理和现实世界物理的基本理解。首先，我们将讨论测量单位，它们是什么，以及它们如何在Unreal
    Engine 4中使用。此外，我们还将涵盖以下主题：
- en: The scientific notation
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 科学记数法
- en: 2D and 3D coordinate systems
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2D和3D坐标系
- en: Scalars and vectors
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标量与向量
- en: Newton's laws or Newtonian physics concepts
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 牛顿定律或牛顿物理概念
- en: Forces and energy
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 力和能量
- en: For the purpose of this chapter, we will want to open Unreal Engine 4 and create
    a simple project using the **First Person** template by following these steps.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为了本章的目的，我们将打开Unreal Engine 4并按照以下步骤创建一个使用**第一人称**模板的简单项目。
- en: Launching Unreal Engine 4
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动 Unreal Engine 4
- en: When we first open Unreal Engine 4, we will see the Unreal Engine launcher,
    which contains a **News** tab, a **Learn** tab, a **Marketplace** tab, and a **Library**
    tab. As the first title suggests, the **News** tab provides you with the latest
    news from Epic Games, ranging from Marketplace Content releases to Unreal Dev
    Grant winners, Twitch Stream Recaps, and so on. The **Learn** tab provides you
    with numerous resources to learn more about Unreal Engine 4, such as written documentation,
    video tutorials, community wikis, sample game projects, and community contributions.
    The **Marketplace** tab allows you to purchase content, such as FX, weapons packs,
    blueprint scripts, environmental assets, and so on, from the community wikis and
    Epic Games. Lastly, the **Library** tab is where you can download the newest versions
    of Unreal Engine 4, open previously created projects, and manage your project
    files.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们首次打开Unreal Engine 4时，我们将看到Unreal Engine启动器，其中包含**新闻**选项卡、**学习**选项卡、**市场**选项卡和**库**选项卡。正如第一个标题所暗示的，**新闻**选项卡为您提供来自Epic
    Games的最新新闻，包括市场内容发布、Unreal Dev Grant获奖者、Twitch直播回顾等。**学习**选项卡为您提供大量资源，以了解更多关于Unreal
    Engine 4的信息，例如书面文档、视频教程、社区维基、示例游戏项目以及社区贡献。**市场**选项卡允许您从社区维基和Epic Games购买内容，例如特效、武器包、蓝图脚本、环境资产等。最后，**库**选项卡是您可以下载Unreal
    Engine 4最新版本、打开以前创建的项目以及管理项目文件的地方。
- en: 'Let''s start by first launching the Unreal Engine launcher and choosing **Launch**
    from the **Library** tab, as seen in the following image:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从启动Unreal Engine启动器并从**库**选项卡中选择**启动**开始，如图所示：
- en: '![Launching Unreal Engine 4](img/image00169.jpeg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![启动 Unreal Engine 4](img/image00169.jpeg)'
- en: 'For the sake of consistency, we will use the latest version of the editor.
    At the time of writing this book, the version is 4.7.6\. Next, we will select
    the **New Project** tab that appears at the top of the window, select the **First
    Person** project template with **Starter Content**, and name the project `Unreal_PhyProject`:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持一致性，我们将使用编辑器的最新版本。在撰写本书时，版本号为4.7.6。接下来，我们将选择窗口顶部的**新建项目**选项卡，选择带有**入门内容**的**第一人称**项目模板，并将项目命名为`Unreal_PhyProject`：
- en: '![Launching Unreal Engine 4](img/image00170.jpeg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![启动 Unreal Engine 4](img/image00170.jpeg)'
- en: Now that we have the game engine open, we can now continue with our lesson.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经打开了游戏引擎，我们可以继续我们的课程。
- en: Units of measurement
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测量单位
- en: To begin this section, we want to first define measurement and what exactly
    we will measure in the context of Unreal Engine 4\. In a general sense, the definition
    of measurement is determining the size, length, or the amount of something (such
    as distance), the length/width/height of an object, or the volume of a particular
    space. In the context of Unreal Engine 4, we will measure the lengths of each
    component of a 3D vector in the 3D space and the *X*, *Y*, and *Z* dimensions.
    For the 2D game world, we will measure the *X* and *Y* axes. In the real world,
    we can use the U.S. Standard and the European Standard units of measurement to
    measure distance.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始本节之前，我们首先定义测量以及在不实引擎4的上下文中我们将测量什么。在一般意义上，测量的定义是确定某物的大小、长度或数量（如距离），物体的长度/宽度/高度，或特定空间的体积。在Unreal
    Engine 4的上下文中，我们将测量3D空间中每个3D向量的长度以及*X*、*Y*和*Z*维度。对于2D游戏世界，我们将测量*X*和*Y*轴。在现实世界中，我们可以使用美国标准和欧洲标准单位来测量距离。
- en: In the U.S., we can use the standard of lengths that involve the use of **inches**
    (**in**), **feet** (**ft**), **yards** (**yd**), and miles, whereas in Europe,
    there is the standard of lengths in place that includes **millimeters** (**mm**),
    **centimeters** (**cm**), **meters** (**m**), and **kilometer** (**km**). For
    our convenience and as a point of reference, here are a set of conversion charts
    between the U.S. and the European units of measurements. For more conversions,
    refer to this free conversion website at [http://converter.eu/length/](http://converter.eu/length/).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在美国，我们可以使用涉及使用**英寸**（**in**）、**英尺**（**ft**）、**码**（**yd**）和英里（**Mile**）的长度标准，而在欧洲，有长度标准，包括**毫米**（**mm**）、**厘米**（**cm**）、**米**（**m**）和**千米**（**km**）。为了我们的方便和参考，这里有一套美国和欧洲测量单位之间的转换图表。更多转换，请参考这个免费的转换网站[http://converter.eu/length/](http://converter.eu/length/)。
- en: 'The following table shows the U.S. Conversions:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 下表显示了美国的转换：
- en: '| 1 ft | 12 in |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 1 ft | 12 in |'
- en: '| 1 in | 0.0833333 ft |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| 1 in | 0.0833333 ft |'
- en: '| 1 yd | 3 ft |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| 1 yd | 3 ft |'
- en: '| 1 yd | 36 in |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| 1 yd | 36 in |'
- en: '| 1 Mile | 1,760 yd |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| 1 Mile | 1,760 yd |'
- en: '| 1 Mile | 5,280 ft |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| 1 Mile | 5,280 ft |'
- en: '| 1 Mile | 63359.999 in |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 1 Mile | 63359.999 in |'
- en: 'The following table shows the European Conversions:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 下表显示了欧洲的转换：
- en: '| 1 mm | 0.1 cm |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 1 mm | 0.1 cm |'
- en: '| 1 cm | 10 mm |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 1 cm | 10 mm |'
- en: '| 1 cm | 0.0099999 m |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 1 cm | 0.0099999 m |'
- en: '| 1 m | 100 cm |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 1 m | 100 cm |'
- en: '| 1 m | 1000 mm |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| 1 m | 1000 mm |'
- en: '| 1 mm | 0.000999999 m |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 1 mm | 0.000999999 m |'
- en: '| 1 km | 1000000 mm |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 1 km | 1000000 mm |'
- en: '| 1 km | 100000 cm |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 1 km | 100000 cm |'
- en: '| 1 km | 1000 m |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| 1 km | 1000 m |'
- en: 'The following table shows U.S. to European Conversions:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 下表显示了美国到欧洲的转换：
- en: '| 1 in | 25.4 mm |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 1 in | 25.4 mm |'
- en: '| 1 in | 2.54 cm |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 1 in | 2.54 cm |'
- en: '| 1 in | 0.0254 m |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 1 in | 0.0254 m |'
- en: '| 1 in | 0.0000254 km |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 1 in | 0.0000254 km |'
- en: '| 1 ft | 304.8 mm |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 1 ft | 304.8 mm |'
- en: '| 1 ft | 30.48 cm |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 1 ft | 30.48 cm |'
- en: '| 1 ft | 0.3048 m |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| 1 ft | 0.3048 m |'
- en: '| 1 ft | 0.0003048 km |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 1 ft | 0.0003048 km |'
- en: '| 1 yd | 914.4 mm |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 1 yd | 914.4 mm |'
- en: '| 1 yd | 91.44 cm |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 1 yd | 91.44 cm |'
- en: '| 1 yd | 0.9144 m |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 1 yd | 0.9144 m |'
- en: '| 1 yd | 0.0009144 km |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 1 yd | 0.0009144 km |'
- en: '| 1 Mile | 1609344 mm |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 1 Mile | 1609344 mm |'
- en: '| 1 Mile | 160934.4 cm |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 1 Mile | 160934.4 cm |'
- en: '| 1 Mile | 1609.3439999999998 m |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 1 Mile | 1609.3439999999998 m |'
- en: '| 1 Mile | 1.609344 km |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 1 Mile | 1.609344 km |'
- en: Now that we have a strong understanding of the real-world units of measurement,
    we are now ready to discuss how Unreal Engine 4 uses these units of measurement
    to determine distances and sizes of objects.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经对现实世界的测量单位有了深入的理解，我们现在可以讨论如何使用虚幻引擎4使用这些测量单位来确定物体的距离和大小。
- en: What is an Unreal Unit?
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是虚幻单位？
- en: 'Back in the days of the UDK or Unreal Engine 3, the units of measurement were
    based on what was called **Unreal Units** (**uu**), where one uu equaled 0.75
    in, or 16 units equaled 1 ft. In Unreal Engine 4, the measurement has changed
    to where 1 uu is equal to 1 cm by default, but the engine allows you to change
    the conversion ratio between an Unreal Unit and a meter in its **World** settings,
    as shown in the following screenshot:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在UDK或虚幻引擎3的时代，测量单位是基于所谓的**虚幻单位**（**uu**），其中1 uu等于0.75英寸，或16个单位等于1英尺。在虚幻引擎4中，测量单位已经改变，默认情况下1
    uu等于1厘米，但引擎允许你在其**世界**设置中更改虚幻单位和米之间的转换比率，如下面的截图所示：
- en: '![What is an Unreal Unit?](img/image00171.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![什么是虚幻单位？](img/image00171.jpeg)'
- en: The value of `100.0` in this property equates an Unreal Unit to 1 cm. For example,
    by changing the **World to Meters** property to the value of 1 (as shown before),
    it will equate 1 uu to 1 m and a value of 1,000 will result in 1 uu equaling 1
    mm. For the purposes of this project, we will leave the default value of 100 so
    that an Unreal Unit will equal 1 cm, but for future reference, this is the **World**
    settings property you would want to alter in order to change this conversion ratio.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在此属性中`100.0`的值将虚幻单位等同于1厘米。例如，通过将**世界到米**属性更改为1（如之前所示），它将1 uu等同于1 m，而值为1,000将导致1
    uu等于1 mm。为了本项目的目的，我们将保留默认值100，以便虚幻单位等于1厘米，但为了将来参考，这是您想要更改此转换比率的**世界**设置属性。
- en: Common measurements in Unreal Engine 4
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 虚幻引擎4中的常见测量单位
- en: When you work on any game engine, it is very important and useful to know the
    common measurements that are used in your game world. Each game is different,
    and the scaling of that game world will be different depending on whether or not
    the developers are going for realistic scaling measurements, but for the purposes
    of this book, the following measurements will be for a game world that is going
    for realism. Remembering that by default, 1 uu is equal to 1 cm in Unreal Engine
    4, here are some of the common measurements that you can implement in your game
    world. An additional note is that all the following dimensions are set under the
    assumption that your player character is roughly 6 ft tall or 180 uu.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在任何游戏引擎上工作时，了解你游戏世界中使用的常见度量是非常重要和有用的。每个游戏都是不同的，游戏世界的缩放比例将根据开发者是否追求现实缩放度量而有所不同，但为了本书的目的，以下度量将适用于追求现实的游戏世界。记住，默认情况下，1
    uu 在虚幻引擎 4 中等于 1 厘米，以下是一些你可以实现在你游戏世界中的常见度量。另外，需要注意的是，以下所有尺寸都是在假设你的玩家角色大约 6 英尺高或
    180 uu 的情况下设定的。
- en: The dimensions of a player character are 180(uu)H, 60(uu)W, 60(uu)D. These are
    dimensions for a larger character that is roughly 6 ft tall, so you may need to
    adjust these values accordingly based on your character's height.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 玩家角色的尺寸为 180(uu)H、60(uu)W、60(uu)D。这些是大约 6 英尺高的大角色的尺寸，因此你可能需要根据你角色的身高相应地调整这些值。
- en: '![Common measurements in Unreal Engine 4](img/image00172.jpeg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![虚幻引擎 4 中的常见度量](img/image00172.jpeg)'
- en: The wall height is 300(uu)H to 400(uu)H. A value of 400 uu will produce a slightly
    taller wall, whereas a value of 300 uu will result in a slightly shorter wall,
    but any value between 300 uu and 400 uu will work just fine.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 墙高为 300(uu)H 至 400(uu)H。400 uu 的值将产生稍高的墙，而 300 uu 的值将导致稍矮的墙，但任何介于 300 uu 和 400
    uu 之间的值都可以正常工作。
- en: '![Common measurements in Unreal Engine 4](img/image00173.jpeg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![虚幻引擎 4 中的常见度量](img/image00173.jpeg)'
- en: The wall depth (thickness)is 10(uu)D to 20(uu)D. The value of the wall thickness
    depends greatly on the material that the wall is made of. For example, a brick
    wall would be thicker than a wall made of plaster.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 墙的深度（厚度）为 10(uu)D 至 20(uu)D。墙厚度的值很大程度上取决于墙的材料。例如，砖墙会比抹灰墙厚。
- en: The dimensions of doors and doorways are 210(uu)H – 230(uu)H / 110(uu)W – 140(uu)W.
    The value of the door and the doorway depth (thickness) depends on the value of
    the wall thickness.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 门窗的尺寸为 210(uu)H – 230(uu)H / 110(uu)W – 140(uu)W。门和门道的深度（厚度）取决于墙厚度的值。
- en: '![Common measurements in Unreal Engine 4](img/image00174.jpeg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![虚幻引擎 4 中的常见度量](img/image00174.jpeg)'
- en: Staircases
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 楼梯
- en: The step height is 15(uu)H
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 步高为 15(uu)H
- en: The step length/depth is 30(uu)D
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 步长/深度为 30(uu)D
- en: 'The value of the staircase width will depend on the area that the staircase
    is placed in, so the dimensional measurement of width will vary. The following
    image has a step length of 30(uu)L, a step height of 15(uu)H, a step width of
    200(uu)W, and 20 steps in total:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 楼梯的宽度值将取决于楼梯放置的区域，因此宽度的尺寸测量将会有所变化。以下图像的步长为 30(uu)L，步高为 15(uu)H，步宽为 200(uu)W，总共有
    20 级：
- en: '![Common measurements in Unreal Engine 4](img/image00175.jpeg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![虚幻引擎 4 中的常见度量](img/image00175.jpeg)'
- en: Unit snapping in Unreal Engine 4
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 虚幻引擎 4 中的单位吸附
- en: If you open a blank map in Unreal Engine 4 or the different viewports in the
    editor, you will notice a grid. This grid can change dynamically depending on
    the current unit snapping measurement applied in the editor. The spacing between
    each grid square will determine the number of units an object will move when you
    place or transform objects in the editor. Back in Unreal Engine 3 or the UDK,
    the grid snapping would follow the power of 2 (2/4/8/16/32/64/128/256/512/1024/2048),
    but in Unreal Engine 4, the grid snapping follows these values (1/5/10/50/100/500/1000/5000/10000).
    The main reason for this change is due to the fact that Unreal Engine 4 uses the
    value of an Unreal Unit equaling 1 cm instead of 1 uu equaling 0.75 in. This is
    similar to what it did in Unreal Engine 3 or the UDK.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打开虚幻引擎 4 中的空白地图或编辑器中的不同视口，你会注意到一个网格。这个网格可以根据编辑器中当前应用的单位吸附度量动态变化。每个网格方格之间的间距将决定你在编辑器中放置或变换对象时对象移动的单位数。回到虚幻引擎
    3 或 UDK，网格吸附将遵循 2 的幂（2/4/8/16/32/64/128/256/512/1024/2048），但在虚幻引擎 4 中，网格吸附遵循以下值（1/5/10/50/100/500/1000/5000/10000）。这种变化的主要原因是因为虚幻引擎
    4 使用的是 Unreal Unit 的值等于 1 厘米，而不是 1 uu 等于 0.75 英寸。这与它在虚幻引擎 3 或 UDK 中所做的是相似的。
- en: 'By default, the unit snapping grid follows the notion that 1 uu equals 1 cm,
    but if we were to follow the power of 2 unit snapping scale, we have this option.
    In **Editor Preferences** under the **Level Editor** section, there is an option
    for **Viewports**. Under **Viewports**, there is a subsection labeled **Grid Snapping**
    and an option to enable/disable the **Use Power of Two Snap Size**, as shown in
    the following screenshot:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，单位捕捉网格遵循1 uu等于1 cm的概念，但如果我们遵循2的幂单位捕捉比例，我们就有这个选项。在**级别编辑器**部分下的**编辑器首选项**中，有一个**视口**选项。在**视口**下，有一个名为**网格捕捉**的子部分，以及一个启用/禁用**使用2的幂捕捉尺寸**的选项，如图下截图所示：
- en: '![Unit snapping in Unreal Engine 4](img/image00176.jpeg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![虚幻引擎4中的单位捕捉](img/image00176.jpeg)'
- en: When it comes to unit snapping, follow the measurement that works best for you.
    Unit snapping is a very important aspect when it comes to placing assets in your
    game world. It can be a lifesaver when it comes to avoiding clipping or Z fighting
    between two objects. Unit snapping is also crucial when it comes to creating proper
    distances between objects, such as creating hallways or alleyways between buildings.
    In the end, it will save a lot of time and effort to take unit snapping into consideration
    at the beginning stages of level development and particularly during the white
    box stages of level design. There will also be specific instances when placing
    objects in our game world where unit snapping is not necessary, such as placing
    debris on the ground, placing paper on a desk, or any other objects that don't
    require specific distances between themselves and other in-game objects. When
    it comes to these instances, Unreal Engine 4 gives us the ability to toggle unit
    snapping on and off by clicking on the grid icon, as shown in the following screenshot.
    Lastly, we can also snap our objects to the grid or the floor of our environment
    by pressing the *End* key. Alternatively, we can press *Ctrl* + *End* to snap
    an actor to the grid. If we ever need to change the key bindings for these actions,
    we can navigate to the **Edit Menu** | **Editor Preferences** | **Keyboard Shortcuts**
    to make any changes.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当谈到单位捕捉时，遵循最适合你的度量。单位捕捉在将资产放置到游戏世界中时是一个非常重要的方面。当涉及到避免两个对象之间的裁剪或Z冲突时，它可能是一个救星。单位捕捉在创建对象之间的适当距离时也非常关键，例如在建筑物之间创建走廊或小巷。最终，在级别开发初期和尤其是在级别设计的白箱阶段考虑单位捕捉将节省大量时间和精力。在某些情况下，放置对象在游戏世界中可能不需要单位捕捉，例如在地面上放置碎片，将纸张放在桌子上，或任何不需要与其他游戏对象保持特定距离的对象。在这些情况下，虚幻引擎4通过点击网格图标来给我们提供切换单位捕捉的开关能力，如图下截图所示。最后，我们也可以通过按*End*键将我们的对象捕捉到网格或环境的地板上。或者，我们可以按*Ctrl*
    + *End*将演员捕捉到网格。如果我们需要更改这些操作的键绑定，我们可以导航到**编辑菜单** | **编辑器首选项** | **键盘快捷键**来做出任何更改。
- en: '![Unit snapping in Unreal Engine 4](img/image00177.jpeg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![虚幻引擎4中的单位捕捉](img/image00177.jpeg)'
- en: Changing units of measurement in 3ds Max and Maya
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在3ds Max和Maya中更改度量单位
- en: For both character and environmental artists, it is very important to know how
    to change the units of measurement in the third-party 3D modeling so that when
    assets are exported from the art program and then imported to Unreal Engine 4,
    the scale is correct and as intended by the artist. Keeping in mind that Unreal
    Engine 4 uses the measurement conversion of 1 uu equaling 1 cm by default, we
    want to make sure that the units of measurement in our 3D art program uses the
    same conversion.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 对于角色和环境艺术家来说，了解如何在第三方3D建模软件中更改度量单位非常重要，这样当资产从艺术程序导出并导入到虚幻引擎4中时，比例是正确的，并且符合艺术家的意图。考虑到虚幻引擎4默认使用1
    uu等于1 cm的度量转换，我们想要确保我们的3D艺术程序使用相同的转换。
- en: 'To change the units of measurement in 3ds Max (2013 version), select the **Customize**
    option and then **Units Setup**. Here, click on the **System Unit Setup** button
    and change the units of measurement as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要在3ds Max（2013版本）中更改度量单位，请选择**自定义**选项，然后选择**单位设置**。在这里，点击**系统单位设置**按钮，并按照以下方式更改度量单位：
- en: '![Changing units of measurement in 3ds Max and Maya](img/image00178.jpeg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![在3ds Max和Maya中更改度量单位](img/image00178.jpeg)'
- en: In Maya, we can change the units of measurement by clicking on Window from the
    toolbar. Now, select **Settings/Preferences** from the drop-down window and then
    **Preferences**. In the **Preferences** dialogue box, select **Settings**. Under
    **Working Units**, we can change the linear units to **centimeter**.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在Maya中，我们可以通过点击工具栏中的“窗口”来更改测量单位。现在，从下拉窗口中选择**设置/首选项**，然后选择**首选项**。在**首选项**对话框中，选择**设置**。在**工作单位**下，我们可以将线性单位更改为**厘米**。
- en: '![Changing units of measurement in 3ds Max and Maya](img/image00179.jpeg)![Changing
    units of measurement in 3ds Max and Maya](img/image00180.jpeg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![在3ds Max和Maya中更改测量单位](img/image00179.jpeg)![在3ds Max和Maya中更改测量单位](img/image00180.jpeg)'
- en: Units of measurement – a section review
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测量单位 - 章节回顾
- en: In this section, you learned about the basic unit conversions between the U.S.
    and European units and how these units translate into Unreal Engine 4's Unreal
    Units. Additionally, we briefly discussed the common measurements for our game
    world for our player character, walls, staircases, and doors/doorways. Moreover,
    we took an in-depth look at unit snapping in Unreal Engine 4 and the significance
    of the tool when it comes to object placement and creating our game world. Lastly,
    we looked at how to convert or change the units of measurement in 3D art programs,
    such as 3ds Max and Maya so that artists can ensure that their models are exported
    and imported to the correct scale when placed in Unreal Engine 4.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你学习了美国和欧洲单位之间的基本单位转换，以及这些单位如何转换为虚幻引擎4的虚幻单位。此外，我们还简要讨论了游戏世界中玩家角色、墙壁、楼梯和门/门厅的常见测量方法。此外，我们深入探讨了虚幻引擎4中的单位吸附以及该工具在对象放置和创建游戏世界时的意义。最后，我们了解了如何在3D艺术程序（如3ds
    Max和Maya）中转换或更改测量单位，以便艺术家可以确保他们的模型在放置到虚幻引擎4中时具有正确的比例。
- en: Now that we have a better understanding of the units of measurement and how
    they translate into Unreal Engine 4, we can now move forward to briefly discuss
    scientific notation.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对测量单位和它们如何转换为虚幻引擎4有了更好的理解，我们现在可以简要地讨论科学记数法。
- en: The scientific notation
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 科学记数法
- en: This is a method in which we can easily write very large or significantly small
    numbers without having to express the entire length of the number, meaning writing
    a bunch of zeroes. The use of scientific notation is not very common when you
    use Unreal Engine 4 as a designer or an artist, but as a programmer or a technical
    designer who uses blueprints or even C++ coding in the engine, the use of scientific
    notation can deem itself useful.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种我们可以轻松写出非常大或非常小的数字的方法，而无需表达整个数字的长度，也就是说，写一串零。当你在虚幻引擎4中作为设计师或艺术家使用时，科学记数法并不常见，但作为使用蓝图或甚至在引擎中使用C++编码的程序员或技术设计师，科学记数法的使用可能被认为是有用的。
- en: 'Let''s take a look at some examples of both large and small numbers that are
    expressed in their scientific notation. To keep things as simple as possible,
    these examples will use the base of 10 for ease of clarity:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一些大数和小数的例子，这些数字都表示为科学记数法。为了尽可能简单，这些例子将使用10作为基数，以便于理解：
- en: 1,000 (1 thousand) – *1 * 10^3*
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1,000（1千）- *1 * 10^3*
- en: 100,000 (1 hundred thousand) – *1 * 10^5*
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 100,000（1十万）- *1 * 10^5*
- en: 1,000,000 (1 million) – *1 * 10^6*
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1,000,000（1百万）- *1 * 10^6*
- en: .01 (1 hundredth) – *1 * 10^-2*
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .01（1/100）- *1 * 10^-2*
- en: .001 (1 thousandth) – *1 * 10^-3*
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .001（1/1,000）- *1 * 10^-3*
- en: .0001 (1 ten thousandth) – *1 * 10^-4*
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .0001（1/10,000）- *1 * 10^-4*
- en: How to use scientific notation?
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用科学记数法？
- en: 'The main logic behind using scientific notation is to take a very large or
    small number and convert it to an easy to read/write expression. For an example
    that isn''t a power of 10, the number 0.5 converted to scientific notation would
    read as *5 * 10^-1*. We reached this expression by moving the decimal point in
    0.5 once to the right-hand side making the number into 5\. The goal of using scientific
    notation is to reach the base number, meaning a number between 1 and 9\. As we
    had to move the decimal point to the right-hand side, we know that the expression
    would read as a negative exponent, whereas if we were to move the decimal point
    to the left-hand side, the exponent would be positive. The number 5 is our base,
    and we multiply it by 10 with an exponent that is equal to the number of times
    we moved the decimal point to reach the said base. In our case, it would be 1\.
    Lastly, we know that the exponent would be negative because we are dealing with
    0.5, a number less than 1, and we had to move the decimal point to the right-hand
    side. As a result, our scientific notation of 0.5 would be *5 * 10^-1*. Here are
    a few more examples of large and small numbers as expressed in the scientific
    notation:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 使用科学记数法的主要逻辑是将一个非常大的或非常小的数字转换成一个易于阅读/书写的表达式。例如，对于不是10的幂的数字，将0.5转换为科学记数法将读作 *5
    * 10^-1*。我们通过将0.5中的小数点向右移动一次得到这个表达式，使得数字变成5。使用科学记数法的目标是达到基数，即介于1和9之间的数字。由于我们必须将小数点向右移动，我们知道这个表达式将读作负指数，而如果我们把小数点向左移动，指数将是正的。数字5是我们的基数，我们将其乘以10，指数等于我们将小数点移动到基数所需的次数。在我们的例子中，这个次数是1。最后，我们知道指数将是负的，因为我们处理的是0.5，一个小于1的数字，并且我们必须将小数点向右移动。因此，我们的0.5的科学记数法将是
    *5 * 10^-1*。以下是一些用科学记数法表示的大数和小数的更多例子：
- en: 642,300,544,000 – *6.42300544 * 10^11*
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 642,300,544,000 – *6.42300544 * 10^11*
- en: .00002055 – *2.055 * 10^-5*
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .00002055 – *2.055 * 10^-5*
- en: 8,549,248.5004 – *8.549285004 * 10^6*
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 8,549,248.5004 – *8.549285004 * 10^6*
- en: .0125174 – *1.25174 * 10^-2*
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .0125174 – *1.25174 * 10^-2*
- en: The scientific notation – a section review
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 科学记数法 – 章节回顾
- en: 'In this section, we briefly looked at the scientific notation and how it''s
    used, along with providing examples of large and small numbers that are expressed
    using its scientific notation. Now that we have discussed the scientific notation,
    let''s go ahead and move on to our next topic: 2D and 3D coordinate systems.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们简要介绍了科学记数法及其用法，并提供了使用其科学记数法表示的大数和小数的例子。现在我们已经讨论了科学记数法，让我们继续讨论下一个主题：二维和三维坐标系。
- en: The 2D and 3D coordinate systems
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 二维和三维坐标系
- en: 'In Unreal Engine 4, the use of 2D and 3D coordinate systems are used to determine
    the positions of actors in our game world. In a 2D coordinate system, we can determine
    an actor''s position based on the *X* and *Y* axes, left-right, and up-down respectively.
    In a 3D coordinate system, along with the *X* and *Y* dimensions, we can determine
    the actor''s position based on the *Z* axis: the inclusion of depth.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在虚幻引擎4中，使用二维和三维坐标系来确定游戏世界中的演员位置。在二维坐标系中，我们可以根据**X**和**Y**轴、左右和上下来确定演员的位置。在三维坐标系中，除了**X**和**Y**维度外，我们还可以根据**Z**轴：深度来确定演员的位置。
- en: '![The 2D and 3D coordinate systems](img/image00181.jpeg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![二维和三维坐标系](img/image00181.jpeg)'
- en: In Unreal Engine 4, the 3D axes are labeled differently, as displayed in the
    preceding image. Instead of the **"up"** axis being the **y** axis, in Unreal
    Engine 4, the **"up"** axis is labeled as the **z** axis. The **"forward"** axis
    is then the **y** axis instead of being the **z** axis, as depicted in the preceding
    image.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在虚幻引擎4中，3D轴的标记方式与前面显示的不同。在虚幻引擎4中，**"向上"**轴不是**y**轴，而是标记为**z**轴。因此，**"向前"**轴是**y**轴，而不是像前面图像中那样是**z**轴。
- en: It should also be discussed that Unreal Engine 4 uses a left-handed coordinate
    system, which means that the positive direction for the *X* axis is on the right-hand
    side, the positive direction for the *Z* axis is upward, and the positive direction
    for the *Y* axis is forward. In the left-handed coordinate system, the positive
    rotation of an axis is always in the clockwise direction. We can see this reflected
    in the *transform* section of the details panel when an object is selected and
    is either moved or rotated.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 还应该讨论的是，虚幻引擎4使用的是左手坐标系，这意味着*x*轴的正方向在右侧，*z*轴的正方向向上，*y*轴的正方向向前。在左手坐标系中，轴的正旋转方向始终是顺时针方向。当我们选择一个对象并且对其进行移动或旋转时，我们可以在细节面板的*transform*部分看到这一点。
- en: '![The 2D and 3D coordinate systems](img/image00182.jpeg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![二维和三维坐标系](img/image00182.jpeg)'
- en: 'In Unreal Engine 4, the *X* axis is labeled as a red-colored arrow; the *Y*
    axis is labeled as the green arrow, and the *Z* axis as the blue arrow. In the
    editor, you can toggle the transformation type of a selected object between translation,
    rotation, and scale by either repeatedly pressing on the spacebar or by toggling
    between the *W* (translation), *E* (rotation), and *R* (scale) keys. The viewport
    depicted in the preceding image is known as the perspective viewport. This is
    the only 3D viewport in Unreal Engine 4 and can be accessed using the *Alt* +
    *G* shortcut. When you work on a 3D game, Unreal Engine 4 offers three 2D viewports:
    the top, side, and front perspective viewports to take advantage of when you place
    objects in your game world.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在虚幻引擎4中，*x*轴用红色箭头标记；*y*轴用绿色箭头标记，*z*轴用蓝色箭头标记。在编辑器中，您可以通过反复按空格键或通过在*w*（平移）、*e*（旋转）和*r*（缩放）键之间切换来在所选对象的平移、旋转和缩放类型之间切换。前面图像中显示的视口称为视角视口。这是虚幻引擎4中唯一的3D视口，可以通过*Alt*
    + *G*快捷键访问。当您在3D游戏中工作时，虚幻引擎4提供了三个2D视口：顶部、侧面和正面视角视口，以便在放置游戏世界中的对象时使用。
- en: The top perspective
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 顶部视角
- en: 'This perspective presents the 3D world from a top-down view (using the 2D coordinate
    system) with the *X* and *Y* axes that is similar to the previous image of the
    2D coordinate system, where the *Y* axis represents up and down and the *X* axis
    represents left and right. This perspective can be accessed with the *Alt* + *J*
    shortcut or by clicking on the drop-down list labeled **Perspective** and selecting
    the **Top** option, as shown in the following screenshot:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这个视角从顶部向下（使用2D坐标系）展示了三维世界，*x*轴和*y*轴与之前2D坐标系的图像相似，其中*y*轴代表上下，*x*轴代表左右。这个视角可以通过*Alt*
    + *J*快捷键或通过点击标记为**视角**的下拉列表并选择**顶部**选项来访问，如图所示：
- en: '![The top perspective](img/image00183.jpeg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![顶部视角](img/image00183.jpeg)'
- en: The side perspective
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 侧面视角
- en: This perspective presents the 3D world from a side view perspective with the
    *Z* and *Y* axes using the 2D coordinate system. It effectively looks at the world
    from the left-hand side to the right-hand side. In this perspective, the *Z* axis
    represents up and down, whereas the *Y* axis represents left and right. This perspective
    can be accessed with the *Alt* + *K* shortcut or by the same method that is used
    to access the other three perspectives.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这个视角从侧面视角展示了三维世界，使用2D坐标系来表示*z*轴和*y*轴。它实际上是从左侧到右侧观察世界。在这个视角中，*z*轴代表上下，而*y*轴代表左右。这个视角可以通过*Alt*
    + *K*快捷键或通过访问其他三个视角的相同方法来访问。
- en: '![The side perspective](img/image00184.jpeg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![侧面视角](img/image00184.jpeg)'
- en: The front perspective
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 正面视角
- en: This perspective presents the 3D world from the front perspective with the *Z*
    and *X* axes using a coordinate system. It essentially views the world from the
    front to back side. In this perspective, the *Z* axis represents up and down,
    whereas the *X* axis represents left and right. This perspective can be accessed
    with the *Alt* + *H* short cut or by the same method that is used to access the
    other three perspectives.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这个视角从正面视角展示了三维世界，使用坐标系来表示*z*轴和*x*轴。它本质上是从前到后观察世界。在这个视角中，*z*轴代表上下，而*x*轴代表左右。这个视角可以通过*Alt*
    + *H*快捷键或通过访问其他三个视角的相同方法来访问。
- en: '![The front perspective](img/image00185.jpeg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![正面视角](img/image00185.jpeg)'
- en: 'Lastly, let''s briefly discuss how rotation works in 3D programs, such as Unreal
    Engine 4\. In the real world, the three different types of rotation of an object
    are Yaw, Pitch, and Roll. These rotations are defined as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们简要讨论一下在 3D 程序（如虚幻引擎 4）中旋转的工作原理。在现实世界中，物体的三种不同类型的旋转是偏航、俯仰和翻滚。这些旋转被定义为以下内容：
- en: '**Pitch**: In Unreal Engine 4, this is defined as the rotation of an object
    about the *Y* axis.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**俯仰（Pitch）**: 在虚幻引擎 4 中，这被定义为物体绕 *Y* 轴的旋转。'
- en: '**Yaw**: In Unreal Engine 4, this is defined as the rotation of an object about
    the *Z* axis.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**偏航（Yaw）**: 在虚幻引擎 4 中，这被定义为物体绕 *Z* 轴的旋转。'
- en: '**Roll**: In Unreal Engine 4, this is defined as the rotation of an object
    about the *X* axis.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**翻滚（Roll）**: 在虚幻引擎 4 中，这被定义为物体绕 *X* 轴的旋转。'
- en: 'In the real world, the pitch, yaw, and roll rotations of an object can be visualized
    by looking at how a plane can rotate, as shown in the following image:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实世界中，物体的俯仰、偏航和翻滚旋转可以通过观察飞机如何旋转来可视化，如下面的图像所示：
- en: '![The front perspective](img/image00186.jpeg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![前视图](img/image00186.jpeg)'
- en: The 2D and 3D coordinate systems – a section review
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 二维和三维坐标系——章节回顾
- en: 'In this section, we discussed the purposes of both 2D and 3D coordinate systems,
    their differences, and their uses in Unreal Engine 4\. Furthermore, we took some
    time to go through the four perspectives offered in the engine: perspective, top,
    side, and front. Lastly, we looked at how to transform actors in our 3D world.
    With the concepts of 2D and 3D coordinate systems underneath our belt, you can
    now move forward and learn more about scalars and vectors.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了二维和三维坐标系的目的、它们的区别以及在虚幻引擎 4 中的用途。此外，我们花了一些时间介绍了引擎提供的四种视角：透视、顶视、侧视和前视。最后，我们探讨了如何在我们的三维世界中变换演员。在掌握二维和三维坐标系的概念之后，你现在可以继续前进，学习更多关于标量和矢量的知识。
- en: Scalars and vectors
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标量和矢量
- en: These are definitions to describe the motion of objects. Both are unique. In
    mathematics, scalars are defined as quantities that are described as a single
    numerical value, whereas vectors are defined as quantities that are described
    as a numerical value and direction. The examples of scalar quantities include
    length, area, volume, speed, mass, temperature, and power, whereas the examples
    of vector quantities include direction, velocity, force, acceleration, and displacement.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是描述物体运动的定义。两者都是独特的。在数学中，标量被定义为可以用单个数值描述的量，而矢量被定义为可以用数值和方向描述的量。标量量的例子包括长度、面积、体积、速度、质量、温度和功率，而矢量量的例子包括方向、速度、力、加速度和位移。
- en: In Unreal Engine 4, the use of scalar and vector values is very common, especially
    in blueprints and materials. In the context of the material editor, scalar values
    are simply numerical values, whereas vectors are actually the colors of RGBA or
    red, green, blue, and alpha. In the **Material** editor, we can use both scalar
    and vector parameters to influence the color and intensity of the material itself.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在虚幻引擎 4 中，标量和矢量值的使用非常普遍，尤其是在蓝图和材质中。在材质编辑器的上下文中，标量值仅仅是数值，而矢量实际上是 RGBA 或红、绿、蓝和
    alpha 的颜色。在 **材质** 编辑器中，我们可以使用标量和矢量参数来影响材质本身的颜色和强度。
- en: '![Scalars and vectors](img/image00187.jpeg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![标量和矢量](img/image00187.jpeg)'
- en: 'In the preceding screenshot, we are using a vector parameter node in our material
    to dictate the color of the material itself. By default, the vector parameter
    in the material editor contains the values for red, green, blue, and alpha; the
    alpha value controls the opacity of the color. In the material example, the scalar
    parameter controls the strength of the emissive value of the material. By increasing
    or decreasing this value, the material''s brightness will get brighter or dimmer.
    To recreate this, we can right-click on our **Content Browser**, select **Material**
    and name this `MAT_Example`, and double-click on the material to open the **Material**
    editor. Perform the following steps:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，我们正在使用材质中的矢量参数节点来指定材质本身的颜色。默认情况下，材质编辑器中的矢量参数包含红、绿、蓝和 alpha 的值；alpha
    值控制颜色的不透明度。在材质示例中，标量参数控制材质发射值的强度。通过增加或减少此值，材质的亮度会变亮或变暗。要重新创建此效果，我们可以在 **内容浏览器**
    上右键单击，选择 **材质** 并将其命名为 `MAT_Example`，然后双击材质以打开 **材质** 编辑器。执行以下步骤：
- en: Right-click on an empty space in the **Material** editor and search for the
    **Vector** parameter. Set its RGBA values to `1.0`, `0.5`, `2.0`, and `1.0` respectively.
    We can name this parameter as `Material Color`.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**材质**编辑器中的空白区域右键单击，并搜索**向量**参数。将其RGBA值分别设置为`1.0`、`0.5`、`2.0`和`1.0`。我们可以将此参数命名为`材质颜色`。
- en: Next, let's right-click and search for the **Scalar** parameter. Then, set its
    numerical value to `5` and name this parameter as `Material Color Intensity`.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们右键单击并搜索**标量**参数。然后，将其数值设置为`5`，并将此参数命名为`材质颜色强度`。
- en: To create a multiply node, we can either right-click and search for this node,
    or just hold the *M* key and left-click on the blank space in the **Material**
    editor to create the multiply node.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建乘法节点，我们可以右键单击并搜索此节点，或者只需按住*M*键并在**材质**编辑器中的空白区域左键单击以创建乘法节点。
- en: Now, we can multiply the color output **Material Color** vector by the numerical
    output of the **Material Color Intensity** scalar and plug the result into the
    **Emissive Color** input of the material itself to create a bright and intensive
    purple material.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以将颜色输出**材质颜色**向量与**材质颜色强度**标量的数值输出相乘，并将结果插入材质本身的**发射颜色**输入中，以创建一个明亮且强烈的紫色材质。
- en: For additional color, we can plug the color output of the **Material Color**
    vector parameter into the **Base Color** input of the material as well.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了增加额外的颜色，我们还可以将**材质颜色**向量参数的颜色输出插入到材质的**基础颜色**输入中。
- en: In the Blueprints of Unreal Engine 4, the scalar and vector parameters serve
    similar purposes (as seen in the material editor). The vector variable in blueprint
    scripting holds the values for **X**, **Y**, and **Z** values and is used to dictate
    the location and direction, whereas the rotator variables holds the **Roll**,
    **Pitch**, and **Yaw** rotation values. When it comes to scalar variables in blueprints,
    there are many options to use (such as integers or floats) because scalar values
    are only numerical values with no direction associated to them.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在虚幻引擎4的蓝图编辑器中，标量和向量参数具有类似的作用（如材质编辑器中所示）。蓝图脚本中的向量变量包含**X**、**Y**和**Z**的值，用于指定位置和方向，而旋转器变量包含**翻滚**、**俯仰**和**偏航**旋转值。当涉及到蓝图中的标量变量时，有许多选项可以使用（例如整数或浮点数），因为标量值只是没有方向的数值。
- en: '![Scalars and vectors](img/image00188.jpeg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![标量和向量](img/image00188.jpeg)'
- en: As shown in the preceding image, we can split the structure pin for the rotator
    and vector variables by right-clicking on the vector values and selecting **Split
    Struct Pin**. So, we can edit each direction individually using float scalars
    to affect each. At the same time, instead of using individual scalar values by
    right-clicking on one of the split float values and selecting the **Recombine
    Struct Pin** option, we can also recombine the structure pin for these variables
    so that we can edit these values with vectors or rotators respectively.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如前图所示，我们可以通过右键单击向量值并选择**拆分结构引脚**来拆分旋转器和向量变量的结构引脚。因此，我们可以使用浮点标量单独编辑每个方向，以影响每个方向。同时，我们也可以通过右键单击拆分的浮点值之一并选择**重新组合结构引脚**选项，而不是使用单个标量值，来重新组合这些变量的结构引脚，这样我们就可以分别使用向量或旋转器来编辑这些值。
- en: Another interesting use of materials and blueprints is that you can dynamically
    change the value of the scalar and vector parameters in the event graph or the
    construction script of the blueprint.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 材料和蓝图另一个有趣的应用是，您可以在事件图或蓝图构建脚本中动态更改标量和向量参数的值。
- en: '![Scalars and vectors](img/image00189.jpeg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![标量和向量](img/image00189.jpeg)'
- en: As shown in the preceding image, we can create a dynamic material instance from
    a static mesh in our blueprint that uses the material example we made earlier,
    which uses the vector and scalar parameters. Here, we can set the **Material Color**
    vector parameter, split the color structure into four unique float values of RGBA
    (red, green, blue, and alpha) and then use the random float in the range node
    to create random colors for the material.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如前图所示，我们可以在蓝图中使用我们之前制作的材质示例（该示例使用向量和标量参数）从静态网格创建一个动态材质实例。在这里，我们可以设置**材质颜色**向量参数，将颜色结构拆分为RGBA（红色、绿色、蓝色和透明度）的四个独特的浮点值，然后使用范围节点中的随机浮点值来为材质创建随机颜色。
- en: 'To recreate this, we first need to create a new blueprint by right-clicking
    on our content browser and selecting the **Blueprint** class and then **Actor**
    to create an actor-based blueprint. Next, double-click on this new blueprint to
    open the **Blueprint** editor. Perform the following steps:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 要重新创建此内容，我们首先需要通过在内容浏览器上右键单击并选择**蓝图**类别然后选择**演员**来创建一个基于演员的蓝图。接下来，双击此新蓝图以打开**蓝图**编辑器。执行以下步骤：
- en: Select the **Viewport** tab at the top of the editor so that we can add our
    components for this example blueprint. For the base of this blueprint actor, we
    want to add a scene component to the root of the actor so that the other actors
    we add can be attached to this component.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择编辑器顶部的**视口**选项卡，以便我们可以为这个示例蓝图添加组件。对于这个蓝图演员的基座，我们想在演员的根处添加一个场景组件，以便我们添加的其他演员可以附加到此组件。
- en: From the **Add Component** tab, select the **Scene component** option and name
    it `ROOT`.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**添加组件**选项卡，选择**场景组件**选项，并将其命名为`ROOT`。
- en: Now, we want to add the shape of a plane to our blueprint so that we can see
    our material on an object. Under the `StarterContent` folder in **Shapes**, select
    the **Shape_Plane Static** mesh so that it is highlighted in the content browser.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们想在蓝图上添加一个平面的形状，以便我们可以在对象上看到我们的材质。在**StarterContent**文件夹下的**形状**中，选择**Shape_Plane
    Static**网格，使其在内容浏览器中高亮显示。
- en: With the **Shape_Plane** mesh highlighted, let's go back to our blueprint. Under
    the **Add Component** tab, there will be an option for **Static Mesh** (**Shape_Plane**).
    Name this component whatever you like and rotate/orient the mesh in the 3D viewport
    as necessary.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当**Shape_Plane**网格高亮显示时，让我们回到我们的蓝图。在**添加组件**选项卡下，将有一个**静态网格**（**Shape_Plane**）的选项。请随意命名此组件，并在3D视口中根据需要旋转/定位网格。
- en: Now, back in our **Content Browser**, let's select our material so that it is
    highlighted. Then, back in the blueprint, we can apply this material to our plane
    mesh by selecting the plane in the **Components** tab and clicking on the arrow
    next to the **Element 0** option in the **Materials** section.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，回到我们的**内容浏览器**，选择我们的材质，使其高亮显示。然后，回到蓝图，我们可以通过在**组件**选项卡中选择飞机并点击**材质**部分旁边**元素
    0**选项旁边的箭头来将此材质应用到我们的飞机网格。
- en: With our material applied to our **Static Mesh**, we can now navigate to our
    **Construction Script** to script the behavior that will randomly change the color
    of this material each time the blueprint initializes.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们的材质应用到**静态网格**后，我们现在可以导航到我们的**构建脚本**来编写行为脚本，每次蓝图初始化时都会随机更改此材质的颜色。
- en: In the **Construction Script** tab, let's grab the **Get** variable of our plane
    static mesh by keeping *CTRL* pressed and clicking and dragging the variable from
    the variables section to the left-hand side of the editor. From this variable
    pin, we can search for **Create Dynamic Material Instance**. Make sure that the
    material we created is selected for the **Source Material** variable in that node.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**构建脚本**选项卡中，让我们按住*CTRL*键，点击并拖动我们的飞机静态网格的**Get**变量从变量部分到编辑器的左侧。从这个变量引脚，我们可以搜索**创建动态材质实例**。确保我们创建的材质已选中，用于该节点的**源材质**变量。
- en: From the return value of the **Create Dynamic Material Instance** node, we can
    promote this value to a variable that we can then reference in the blueprint whenever
    we like. Name this variable whatever you like.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**创建动态材质实例**节点的返回值，我们可以将此值提升为变量，我们可以在蓝图中的任何地方引用此变量。请随意命名此变量。
- en: Now, we can drag the pin from the variable output of the newly promoted material
    instance variable and search for the **Set Vector Parameter** node. Here, we need
    to provide this node with the name of the vector parameter that we want to change
    and color values that we want to enter. If you remember, we named our vector parameter
    `Material Color`.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以从新提升的材质实例变量输出拖动引脚并搜索**设置向量参数**节点。在这里，我们需要为此节点提供我们想要更改的向量参数名称和我们想要输入的颜色值。如果你记得，我们命名了我们的向量参数为`Material
    Color`。
- en: To randomize the color, we need to drag from the value input variable of the
    **Set Vector Parameter Value** node and search for `Make Linear Color`. For the
    RGB values, we can use **Random Float** in range nodes that have a minimum value
    of 0.5, a maximum value of 1.0, and a constant alpha value of 1 to randomize the
    color.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要随机化颜色，我们需要从**设置向量参数值**节点的值输入变量拖动并搜索**制作线性颜色**。对于RGB值，我们可以使用范围节点中的**随机浮点数**，最小值为0.5，最大值为1.0，并使用常量alpha值1来随机化颜色。
- en: Now, when we repeatedly click on the **Compile** button at the top, we can see
    the color of the material change each time.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，当我们反复点击顶部的**编译**按钮时，我们可以看到材料颜色每次都会改变。
- en: '![Scalars and vectors](img/image00190.jpeg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![标量与矢量](img/image00190.jpeg)'
- en: Scalars and vectors – a section review
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标量与矢量 – 章节回顾
- en: In this section, we discussed the important differences between the values of
    vectors and scalars, their definitions in the case of real-world mathematical
    quantities and in the realm of Unreal Engine 4\. In addition, we looked at some
    in-engine examples of how to use scalars and vectors in materials and blueprints.
    We also looked at how to incorporate scalars and vectors so that it can dynamically
    change the color of a material. With a base understanding of scalars and vectors
    in our pockets, we can now discuss Newton's laws of physics.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了矢量值与标量值之间的重要区别，它们在现实世界数学量以及虚幻引擎4领域中的定义。此外，我们还探讨了如何在材料和蓝图中使用标量和矢量的一些引擎内示例。我们还研究了如何将标量和矢量结合，以便动态改变材料的颜色。在口袋里有了对标量和矢量的基本理解后，我们现在可以讨论牛顿的物理定律。
- en: Newton's laws/Newtonian physics concepts
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 牛顿定律/牛顿物理概念
- en: The base of all that we know about real-world physics comes from the principles
    developed by *Sir Isaac Newton*, also known as Newton's three laws of motion.
    When we recreate real-world physics in video games, it is very important that
    we understand these laws and how they affect objects in our game world. Keep in
    mind that not all games use realistic physics, but these laws of motion are still
    important to grasp when you develop any game world.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所知道的所有关于现实世界物理学的知识都源于由*爵士艾萨克·牛顿*提出的原理，也称为牛顿三定律。当我们将在视频游戏中重新创建现实世界物理学时，了解这些定律以及它们如何影响我们游戏世界中的物体非常重要。请记住，并非所有游戏都使用真实物理，但在开发任何游戏世界时，掌握这些运动定律仍然很重要。
- en: Newton's first law of motion
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 牛顿第一运动定律
- en: Isaac Newton's first law of motion, also known as the **Law of Inertia**, states
    that *every object in a state of uniform motion tends to remain in that state
    of motion unless an external force is applied to it*. In other words, an object
    in motion tends to stay in motion unless acted upon by another force.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 艾萨克·牛顿的第一运动定律，也称为**惯性定律**，表明*每个处于匀速运动状态的物体倾向于保持该运动状态，除非有外力作用于它*。换句话说，运动的物体倾向于保持运动状态，除非受到其他力的作用。
- en: In the real world, there are external forces (such as ground and air friction)
    that act on objects in motion that eventually cause this object to stop completely,
    or forces such as a person pushing or pulling on an object that can cause acceleration,
    or for the move to increase in speed over time. In a vacuum, there is no friction.
    As a result, an object in motion in an infinite vacuum space would continue to
    move at the same rate unless it is acted on by some external force.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实世界中，存在作用于运动物体的外力（如地面和空气摩擦），最终导致该物体完全停止，或者像人推或拉物体这样的力可以导致加速，或者使移动随时间增加速度。在真空中，没有摩擦。因此，在无限真空空间中运动的物体将继续以相同的速率移动，除非受到外部力的作用。
- en: '![Newton''s first law of motion](img/image00191.jpeg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![牛顿第一定律](img/image00191.jpeg)'
- en: 'In Unreal Engine 4, the blueprint assets that utilize the Projectile component,
    such as bullets, rockets, or any other kind of projectiles used in our game, can
    edit the coefficient of friction and other physics-based properties. From the
    first person project that was created earlier in the chapter, we can navigate
    to the `Content` folder in the **Content Browser** and then to the `FirstPersonBP`
    folder and select the `Blueprints` folder. In this folder, we can select the **FirstPersonProjectile**
    blueprint. Then, in the **Viewport**, we can select the **Projectile** component
    to view some of the physics properties, as shown in the following screenshot:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在虚幻引擎4中，使用投射组件的蓝图资产，如子弹、火箭或游戏中使用的任何其他类型的投射物，可以编辑摩擦系数和其他基于物理的性质。从本章早期创建的第一人称项目，我们可以导航到**内容浏览器**中的`Content`文件夹，然后到`FirstPersonBP`文件夹，并选择`Blueprints`文件夹。在这个文件夹中，我们可以选择**FirstPersonProjectile**蓝图。然后，在**视口**中，我们可以选择**投射物**组件来查看一些物理属性，如下面的截图所示：
- en: '![Newton''s first law of motion](img/image00192.jpeg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![牛顿第一定律](img/image00192.jpeg)'
- en: By increasing the **Friction** property, we can cause this projectile to come
    to a stop more quickly, whereas decreasing this property will result in the projectile
    coming to a stop over a longer period of time. We can alter this property until
    we can get the behavior we want. For more examples of physics-based properties
    featured in the Unreal Engine 4 blueprints, feel free to investigate the **FirstPersonCharacter**
    blueprint and select the **CharacterMovement** component.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 通过增加 **Friction** 属性，我们可以使这个投射物更快地停下来，而减少这个属性将导致投射物在更长的时间内停下来。我们可以调整这个属性，直到我们得到想要的行为。有关虚幻引擎4蓝图中的基于物理的属性示例，请随时调查
    **FirstPersonCharacter** 蓝图并选择 **CharacterMovement** 组件。
- en: Newton's second law of motion
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 牛顿第二运动定律
- en: This states that *the relationship between an object's mass (m), its acceleration
    (a), and the applied force (F) is F = ma or an applied force is equivalent to
    the mass of the object and its applied acceleration*. Acceleration and force are
    vectors, (remember that a vector is both a numerical value and a direction). In
    this law, the directional force vector is the same as the direction of the acceleration
    vector.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明，*物体的质量（m）、加速度（a）和施加的力（F）之间的关系是 F = ma，或者施加的力等于物体的质量和其施加的加速度*。加速度和力是矢量（记住，矢量既有数值也有方向）。在这个定律中，方向力矢量与加速度矢量方向相同。
- en: In more simple words, this law focuses on the principle that a change in an
    object's velocity can only occur if this object is accelerating in a particular
    direction, and a positive or negative acceleration can only take place if an external
    force is acting on it.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 更简单地说，这个定律关注的是这样一个原理：只有当物体在特定方向上加速时，物体的速度才会发生变化，并且只有当有外力作用于它时，正加速度或负加速度才能发生。
- en: '![Newton''s second law of motion](img/image00193.jpeg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![牛顿第二运动定律](img/image00193.jpeg)'
- en: In Unreal Engine 4, we can use blueprints to apply forces to physics objects
    and override properties (such as acceleration and mass) through different available
    components. For example, the **CharacterMovement** component in the **FirstPersonCharacter**
    blueprint has a property labeled as **Max Acceleration**, and if we increase or
    decrease this property, we can see how quickly the player accelerates from a stationary
    position to its maximum walk speed.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在虚幻引擎4中，我们可以使用蓝图将力应用于物理对象，并通过不同的可用组件覆盖属性（如加速度和质量）。例如，**CharacterMovement** 组件在
    **FirstPersonCharacter** 蓝图中有一个标记为 **Max Acceleration** 的属性，如果我们增加或减少这个属性，我们可以看到玩家从静止状态加速到最大行走速度的速度有多快。
- en: '![Newton''s second law of motion](img/image00194.jpeg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![牛顿第二运动定律](img/image00194.jpeg)'
- en: Newton's third law of motion
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 牛顿第三运动定律
- en: Isaac Newton's third law of motion and one of the more commonly known law states
    that *for every action there is an equal and opposite reaction*. In other words,
    when an object applies force to another object, an equal and opposite force is
    applied as well.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 牛顿第三运动定律以及更为人所熟知的定律之一指出，*每一个作用力都有一个大小相等、方向相反的反作用力*。换句话说，当一个物体对另一个物体施加力时，也会有一个大小相等、方向相反的力同时作用。
- en: '![Newton''s third law of motion](img/image00195.jpeg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![牛顿第三运动定律](img/image00195.jpeg)'
- en: In Unreal Engine 4, we can see this law of motion in action by playing in the
    editor and clicking on the left mouse button while aiming at the ground to see
    the ball bounce in the opposite direction that it was fired at and moving at a
    speed equal to the one in which it was fired at, except that we have friction
    applied to this projectile, so it loses some of its initial velocity due to the
    friction.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在虚幻引擎4中，我们可以在编辑器中播放并点击左鼠标按钮，同时瞄准地面，以看到球体以与发射方向相反的方向弹跳，并以与发射时相同的速度移动，只是我们在这个投射物上应用了摩擦，因此由于摩擦，它失去了一些初始速度。
- en: '![Newton''s third law of motion](img/image00196.jpeg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![牛顿第三运动定律](img/image00196.jpeg)'
- en: To bring all of these laws of motion together, what we can do is add a box collision
    component to the **FirstPersonCharacter** blueprint, set its **Collision Presets**
    to **BlockAll**, and attach it to the **FirstPersonCamera** component by dragging
    it onto the **FirstPersonCamera** component in the **Components** tab.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 要将这些运动定律综合起来，我们可以做的是将一个盒子碰撞组件添加到 **FirstPersonCharacter** 蓝图中，将其 **Collision
    Presets** 设置为 **BlockAll**，并通过将组件拖放到 **Components** 选项卡中的 **FirstPersonCamera**
    组件上来将其附加到 **FirstPersonCamera** 组件。
- en: '![Newton''s third law of motion](img/image00197.jpeg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![牛顿第三运动定律](img/image00197.jpeg)'
- en: Now if we play in the editor, we can start running into the physics cubes in
    the **FirstPersonExampleMap** (which is default to the **First Person** project
    template) and see forces applied to them, which is equal to the mass of the player
    multiplied by the players' current acceleration value.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果我们开始在编辑器中玩耍，我们就可以开始遇到**FirstPersonExampleMap**（默认为**第一人称**项目模板）中的物理立方体，并看到施加在它们上的力，这个力等于玩家的质量乘以玩家当前的加速度值。
- en: Newton's laws of motion – a section review
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 牛顿运动定律——章节回顾
- en: 'In this section, we discussed the three laws of motion developed by *Sir Isaac
    Newton* and their application in the real world and in Unreal Engine 4\. For each
    of these three laws, we examined each by providing working examples of each, using
    blueprints in Unreal Engine 4\. Now that we have a strong understanding of these
    principles, we can tackle the last subject of this chapter: forces and energy.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了由**艾萨克·牛顿爵士**提出的三个运动定律及其在现实世界和虚幻引擎4中的应用。对于这三个定律中的每一个，我们都通过提供虚幻引擎4中的工作示例来逐一检验，使用蓝图来实现。现在我们已经对这些原则有了深刻的理解，我们可以着手处理本章的最后一个主题：力和能量。
- en: Forces and energy
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 力和能量
- en: 'One of the most important concepts regarding energy is that it''s a property
    of objects that can be transferred from one object to another, but it cannot be
    created or destroyed. All forms of energy follow the conservation of energy aspect
    and can be converted to different types of energy. There are many types of energy
    that exist in the real world. Here are a few examples:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 关于能量的最重要的概念之一是，它是一种可以从一个物体转移到另一个物体的属性，但不能被创造或摧毁。所有形式的能量都遵循能量守恒定律，并且可以转换为不同类型的能量。在现实世界中存在许多种类的能量。以下是一些例子：
- en: '**Kinetic Energy**: This specifies the motion of a moving body'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动能**：这指定了运动物体的运动'
- en: '**Potential Energy**: This denotes the energy that an object has due to its
    location in the 3D space'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**势能**：这表示物体由于其3D空间中的位置而具有的能量'
- en: '**Mechanical Energy**: This specifies the sum of kinetic and potential energies'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**机械能**：这指定了动能和势能的总和'
- en: '**Heat**: This denotes the amount of thermal energy being transferred in the
    direction of decreasing temperature'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**热能**：这表示在温度降低的方向上转移的热能的量'
- en: These are just a few examples of energy that exist in the real world, so feel
    free to perform additional research on the concept of energy because this section
    will only cover the surface of the topic. When it comes to the concept of energy
    and the conservation of energy, Unreal Engine 4 follows these properties as well
    through its built-in physics engine.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是现实世界中存在的能量的一些例子，所以请随时对能量的概念进行进一步的研究，因为本节只会涉及这个主题的表面。当涉及到能量和能量守恒的概念时，虚幻引擎4通过其内置的物理引擎遵循这些属性。
- en: As discussed in the previous section of this chapter regarding the Newtonian
    principles, forces are any interaction that tends to change the motion of an object.
    This can also be referred to as concepts (such as pushing and pulling) and contains
    a magnitude and direction, making it a vector quantity. Forces can be caused by
    gravity, magnetism, wind, or even the pushing or pulling of an object by a person
    or machine.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 如本章前节所述，关于牛顿原理的讨论，力是任何倾向于改变物体运动的相互作用。这也可以被称为概念（如推拉）并且具有大小和方向，使其成为一个矢量量。力可以由重力、磁力、风力或甚至由人或机器对物体的推拉引起。
- en: '![Forces and energy](img/image00198.jpeg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![力和能量](img/image00198.jpeg)'
- en: In Unreal Engine 4, we can add forces through blueprint scripting, and we can
    perform this in a few ways. The first method is a function called **Add Force**.
    This acts a lot like a thruster and adds a linear burst of energy in the specified
    direction.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在虚幻引擎4中，我们可以通过蓝图脚本添加力，并且我们可以以几种方式执行此操作。第一种方法是名为**Add Force**的函数。这很像一个推进器，在指定的方向上添加一个线性能量爆发。
- en: '![Forces and energy](img/image00199.jpeg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![力和能量](img/image00199.jpeg)'
- en: You can add this type of force to any component associated with our blueprint,
    or you can apply this force to any component that is hit by a component of our
    blueprint. We can also see that there is a bone name property in this function.
    This means that we can apply force to a bone if one exists in our blueprint.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将此类力添加到与我们的蓝图相关联的任何组件中，或者将此力应用于被我们的蓝图组件击中的任何组件。我们还可以看到在这个函数中有一个名为骨骼名称的属性。这意味着如果我们的蓝图中存在骨骼，我们可以将力应用于骨骼。
- en: 'The second method of applying forces to our blueprint components or to components
    in our game world is through the **Add Radial Force** function:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 将力应用到我们的蓝图组件或游戏世界中的组件的第二种方法是使用**添加径向力**功能：
- en: '![Forces and energy](img/image00200.jpeg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![力和能量](img/image00200.jpeg)'
- en: This function allows you to specify a location in the 3D space. Here, the source
    of the radial force begins and then specifies a radius and strength using Float
    values. Lastly, we can apply one of the two methods of **Falloff** for the radius,
    which is either a constant fall-off or a linear fall-off. All bodies in this radius
    will be affected by this force, so make sure that you take this into consideration
    when you apply radius and strength values.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能允许你指定3D空间中的一个位置。在这里，径向力的来源开始，然后使用浮点值指定半径和强度。最后，我们可以应用两种半径**衰减**方法中的一种，这可以是恒定衰减或线性衰减。所有在这个半径内的物体都将受到这种力的作用，所以在应用半径和强度值时，请确保考虑这一点。
- en: Forces and energy – a section review
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 力和能量 - 部分回顾
- en: In this section, we looked at forces and energy and how they are applied in
    the real-world and in Unreal Engine 4\. Additionally, we investigated the different
    types of energy that exist in the real world. Furthermore, we looked at different
    examples on how to apply forces in blueprints with the **Add Force** and **Add
    Radial Force** functions. Lastly, we discussed the properties of these two functions
    and how they alter the force that is applied.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了力和能量以及它们在现实世界和虚幻引擎4中的应用。此外，我们还研究了现实世界中存在的不同类型的能量。此外，我们查看了一些如何使用**添加力**和**添加径向力**函数在蓝图上应用力的例子。最后，我们讨论了这两个函数的性质以及它们如何改变施加的力。
- en: Summary
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we discussed a handful of mathematical and physics-based concepts
    that are necessary to grasp in order to understand how physics works in Unreal
    Engine 4\. We looked at the different units of measurement that exist in the American
    and European standards of length and how they convert from one to another. We
    also looked at **Unreal Units** (**uu**). Then, we discussed the common measurements
    for walls, doorways, characters, and stairs.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了一些数学和基于物理的概念，这些概念对于理解虚幻引擎4中的物理工作原理是必要的。我们查看了一些美国和欧洲长度标准中存在的不同测量单位以及它们如何相互转换。我们还探讨了**虚幻单位**（**uu**）。然后，我们讨论了墙壁、门、角色和楼梯的常见测量方法。
- en: Next, you learned a little bit about scientific notation, how it works, and
    how it is used. We looked at some basic and advanced examples of conversions from
    numerical to scientific notations.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你了解了一些关于科学记数法的基本知识，它的工作原理以及它的应用。我们查看了一些从数值到科学记数法的转换的基本和高级示例。
- en: Additionally, you learned about the 2D and 3D coordinate systems and how they
    are used in the real world and in Unreal Engine 4\. We also investigated the different
    2D and 3D viewports that exist in Unreal Engine 4 and the important functions
    they serve when you create game worlds.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你还学习了二维和三维坐标系以及它们在现实世界和虚幻引擎4中的应用。我们还探讨了虚幻引擎4中存在的不同二维和三维视口以及它们在创建游戏世界时提供的重要功能。
- en: Furthermore, you learned about the scalar and vector properties and how they
    are applied in the real world and in Unreal Engine 4\. We also looked at examples
    of how the values of scalars and vectors are used in the **Material** editor and
    in blueprints.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你还学习了标量和矢量属性以及它们在现实世界和虚幻引擎4中的应用。我们还探讨了标量和矢量值在**材质**编辑器和蓝图中的应用示例。
- en: We also looked at each of the three Newtonian laws of motion and provided real-world
    and Unreal Engine 4 examples for each law.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还研究了牛顿运动定律的三个定律，并为每个定律提供了现实世界和虚幻引擎4的例子。
- en: Lastly, you learned about the different forces and energy that exist in the
    real-world and provided examples on how to apply forces in blueprints.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你学习了现实世界中存在的不同力和能量，并提供了如何在蓝图上应用力的例子。
- en: Now that we have a base understanding of real-world mathematics and physics
    concepts and how they are used in Unreal Engine 4, we can now move on to the **Physics
    Asset Tool** (**PhAT**) in Unreal Engine 4.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对现实世界的数学和物理概念以及它们在虚幻引擎4中的应用有了基本的了解，我们可以继续学习虚幻引擎4中的**物理资产工具**（**PhAT**）。
