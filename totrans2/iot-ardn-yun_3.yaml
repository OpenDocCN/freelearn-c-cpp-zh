- en: Chapter 3. Making Your Own Cloud-connected Camera
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this project, we are going to build a security camera that automatically
    uploads pictures to the Web. We will connect a camera to the Arduino Yún board,
    and use its powerful features to control this camera easily and upload pictures
    to the Web. What we are going to build is a system that can detect motion, and
    if some motion is detected, can automatically take a picture and save it both
    on the local SD card attached to the Yún board and to a cloud storage; in our
    case, Dropbox. We are also going to make the camera stream a video live on a private
    YouTube feed.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s see what we are going to do in this project in more detail:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we are going to build the hardware part of the project with a typical
    USB camera, a PIR motion sensor, and one SD card.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, we will write some code to test all the hardware connections of the project.
    We'll check whether the motion sensor is working correctly and try to take a picture
    with the camera while it is connected to the Arduino Yún board.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After testing the hardware, we are going to build the first application, which
    captures pictures whenever some motion is detected and automatically stores these
    pictures on the SD card.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Right after building this simple local application, we are going to connect
    the project to the cloud. The project will do the same as in the earlier case,
    take pictures when some motion is detected, but this time the pictures will also
    be uploaded to your Dropbox folder. This way, the pictures can be seen in real
    time from anywhere, as you can log in to Dropbox from any web browser.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, we are going to stream a video to the Web, so you can always check
    what's going on in your home from a mobile phone or tablet, wherever you are in
    the world. For this application, we are going to install a streaming library on
    the Yún board and make it continuously stream a video over Wi-Fi. This stream
    will be acquired by your computer and sent to YouTube via a dedicated software.
    On YouTube, we will then be able to access this live stream just as you would
    watch a typical YouTube video.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The required hardware and software components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, let''s see which components we need for the project. Apart from the
    Yún board, you will need three components: a USB camera, a PIR motion sensor,
    and an SD card. We will only make direct connections to Yún in this part, so you
    won''t need a breadboard to make electrical connections.'
  prefs: []
  type: TYPE_NORMAL
- en: The most important component of this project is the USB camera. We are using
    a standard USB webcam from Logitech, the C700 model, which can record pictures
    up to the HD resolution. Of course, you can use other cameras if you already have
    one on your desk. Make sure that the camera is compatible with **USB Video Class**
    (**UVC**). Most of the recent webcams are compatible with this protocol. It might
    work with a camera that is not officially compatible with UVC, but there is no
    guarantee. You can find a list of all UVC compatible cameras at [http://en.wikipedia.org/wiki/List_of_USB_video_class_devices](http://en.wikipedia.org/wiki/List_of_USB_video_class_devices).
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, try to choose a camera with at least HD resolution, so you can get nice
    and clear pictures. It''s not so important for the streaming part, but can be
    great if you want to use this project for other applications than security, for
    example, to create time-lapse videos. The following is an image of the USB camera
    we are using, the C700 USB webcam from Logitech:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The required hardware and software components](img/8007OS_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, there is the PIR motion sensor. This sensor is a really inexpensive sensor
    that uses infrared pictures to detect motion in a room from anything that emits
    heat, such as humans. We could have used the camera directly to detect motion,
    but that would have not been so efficient. The camera uses quite a lot of power
    when it is on, whereas a PIR motion sensor uses nearly no power. It would also
    have been more difficult to write the software required to detect motion efficiently
    from the camera recording. We used a PIR motion sensor from Parallax, which you
    can see in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The required hardware and software components](img/8007OS_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Again, you can use other brands of PIR sensors. The main thing to consider is
    that it should work with 5V voltage levels because that is the voltage level used
    by the Yún. Most sensors work with both 3.3V and 5V voltage levels, so you shouldn't
    have many problems with this characteristic. When motion is detected, it should
    simply put a logical high level on its signal pin.
  prefs: []
  type: TYPE_NORMAL
- en: For the SD card, we used a standard micro SD card. Usually, you will have one
    already in your digital camera or smartphone. You will need to format it correctly
    so that the Yún can use it. We recommend that you use the official SD card formatter
    from the SD card association, see [https://www.sdcard.org/downloads/formatter_4/](https://www.sdcard.org/downloads/formatter_4/).
  prefs: []
  type: TYPE_NORMAL
- en: Now, on the software side, you will need a bit more than just the Arduino IDE.
    We are going to install the required software for the camera directly on the Yún
    board when we connect to it via SSH, but you will need the Temboo Python SDK to
    upload pictures on to Dropbox. You can find the SDK at [https://www.temboo.com/download](https://www.temboo.com/download).
  prefs: []
  type: TYPE_NORMAL
- en: Then, you also need to have a Dropbox account, so you can upload pictures on
    to it. You can simply create an account by going to [https://www.dropbox.com/home](https://www.dropbox.com/home).
  prefs: []
  type: TYPE_NORMAL
- en: Once your account is created, you need to create an app that will be used by
    your project. This basically means that you have to authorize the project you
    are going to build in this chapter to automatically send pictures to your Dropbox
    account without having to enter your login and password every time. You will also
    be given all the required information (such as an API key) that we will enter
    later in the Python script on Yún.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to create an app:'
  prefs: []
  type: TYPE_NORMAL
- en: To create an app, first go to [https://www.dropbox.com/developers/apps](https://www.dropbox.com/developers/apps).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, click on **Create app** in the top-right corner of the window. You can
    now choose the type of app you want to create. In our case, we want to use the
    **Dropbox API** directly, as shown in the following screenshot:![The required
    hardware and software components](img/8007OS_03_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will then be prompted to choose the kind of data your app needs to store.
    We want to upload pictures, so choose **Files and datastores**, as shown in the
    following screenshot:![The required hardware and software components](img/8007OS_03_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can then finish the process of creating your Dropbox app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the confirmation page that describes the app, you will need to write down
    the **App key** and **App secret**, which we will need for the rest of the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also, make sure that the **Permission type** field is set to **App folder**.
    This will ensure that the pictures are uploaded to the folder dedicated to the
    app and that the Yún won't have access to the rest of your Dropbox folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What you need to get now is the Token key and Token secret relative to your
    Dropbox app, so you can enter them later in the software of our project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To get them, the first step is to go to the InitialiseOAuth Choreo on the Temboo
    website at [https://temboo.com/library/Library/Dropbox/OAuth/InitializeOAuth/](https://temboo.com/library/Library/Dropbox/OAuth/InitializeOAuth/).
    Here, you will need to enter the App key and App secret. This will generate some
    additional information such as a callback ID and a temporary token secret. You'll
    also be asked to visit a link to Dropbox to confirm the authentication.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Finally, go to the FinalizeOAuth page to finish the process. You'll be asked
    to enter your App key, App secret, callback ID, and temporary token secret at
    [https://temboo.com/library/Library/Dropbox/OAuth/FinalizeOAuth/](https://temboo.com/library/Library/Dropbox/OAuth/FinalizeOAuth/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After this step, you'll be given your final Token key and Token secret. Write
    them down as you'll need them later.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Making hardware connections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It''s now time to assemble our project. As we are going to use most of the
    Yún''s connectivity, such as the USB port, it will be quite easy and quick to
    assemble the project. First, simply put the formatted micro SD card into the SD
    card reader of the Yún, which is located below the Yún board, as shown in the
    following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making hardware connections](img/8007OS_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, plug the USB camera into the Yún USB port, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making hardware connections](img/8007OS_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, you need to connect the PIR motion sensor to the Yún board. It basically
    has three pins: VCC, GND, and SIG (signal pin). Connect VCC to the Yún''s 5V pin,
    GND to the Yún ground, and SIG to pin number 8 of the Yún. You should end up with
    a setup similar to the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making hardware connections](img/8007OS_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Finally, you can connect the Yún to your computer via a micro USB cable or power
    it with a USB adapter if you want to use the project remotely and upload the Arduino
    sketches via Wi-Fi.
  prefs: []
  type: TYPE_NORMAL
- en: Testing your hardware connections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that all the connections are made, we can test the project. To get started,
    we will take care of the motion sensor. For this, we will write a very simple
    sketch that will only make use of the embedded Atmel microcontroller on the Yún
    board. We first need to declare the pin that the sensor is connected to, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, in the `setup()` function, we will start the Serial connection, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also set some delay before data is read from the sensor, as it needs
    some time to initialize and work correctly. In the `loop()` function, we continuously
    read the value from pin number 8\. Remember that the sensor will simply return
    a logical high state if some motion is detected and a low state otherwise. This
    means that we can store the sensor''s reading into a Boolean variable, as shown
    in the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Every second, this value is then printed on the Serial monitor using the following
    lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The complete code for this part can be found at [https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter3/pir_test](https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter3/pir_test).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can now upload the preceding code on to your Yún board. Open the Serial
    monitor and try to pass your hand in front of the sensor; you should see the value
    change instantly on the Serial monitor, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing your hardware connections](img/8007OS_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you can see the values change instantly as you pass your hand in front of
    the sensor, this means that the Yún is wired correctly. You will also notice that
    the sensor turns red when it detects motion.
  prefs: []
  type: TYPE_NORMAL
- en: Now we are going to test the USB camera. We can actually test the camera without
    writing any Arduino sketch. What we are going to do instead is connect directly
    to the Yún board via SSH. Indeed, the camera is interfaced directly to the Linux
    machine of the Yún via the USB port, so the Arduino sketch will later have to
    use the `Bridge` library in order to access the camera.
  prefs: []
  type: TYPE_NORMAL
- en: 'For now, just go to a terminal window (the typical terminal that comes installed
    with OS X or Linux, or install one such as HyperTerminal if you are under Windows),
    and type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Of course, you will have to put the name you gave to your own Yún in place of
    `yourYunName`. For example, the name of my Yún is `myarduinoyun`; therefore, I
    need to type `myarduinoyun.local`. This will establish a direct connection with
    the Linux machine of the Yún.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will then be prompted to enter the password that you chose for your Yún.
    If it works, you should see the following screenshot being displayed on your terminal,
    which indicates that you are now working directly on the Yún:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing your hardware connections](img/8007OS_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can access all the functions from your Yún Linux machine. We are now going
    to install the required software for the camera. This requires the Arduino Yún
    to be connected to the Internet so that it can get the required packages, as described
    in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The process starts by updating the package manager, `opkg`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the UVC drivers, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the `python-openssl` package that we will use later in the project,
    as shown in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, you can install the `fswebcam` software that we will use to take pictures,
    as shown in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once this part is done and the software is installed on the Yún, we can test
    the camera and take a picture. To also test whether the SD card is working at
    the same time, go over to the SD card folder, which is usually called `sda1`,
    using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can now take a picture by typing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see some message being printed that starts with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Some errors might be printed as well, but this doesn't matter for the process
    of taking a picture.
  prefs: []
  type: TYPE_NORMAL
- en: 'To check whether this works correctly, you can first check whether there is
    a file named `test.png` located on the SD card. To do this, you can simply type
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command will print the list of all the files in the current folder;
    in the present case, the SD card. You should see at least a file named `test.png`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, to check that the picture is fine and not corrupted, you can, for example,
    remove the SD card from the Yún (by unmounting it first using the `unmount/dev/sda1`
    command), and plug it directly to your computer using a micro SD card to normal
    SD card adapter. You should see the following screenshot in your browser (we already
    added the files that are required for the next sections of the project at this
    point, which explains the other files located on the SD card):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing your hardware connections](img/8007OS_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you see a picture on your SD card at this point, open it to check that it
    was correctly taken. If that's the case, congratulations! Everything is now set
    up for you to write exciting applications with this project. If you can't see
    a picture at this point, the first step is to repeat the whole process again.
    Be careful to actually unmount the SD card after the picture is taken. You can
    also plug the camera directly to your computer to check whether the problem comes
    from the camera itself.
  prefs: []
  type: TYPE_NORMAL
- en: Recording pictures when motion is detected
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first application we are going to build with the hardware that we just step
    up will be only local, so nothing will be sent to the Web yet. In this section,
    we just want to build a camera that will be triggered by the motion sensor.
  prefs: []
  type: TYPE_NORMAL
- en: With this, you can, for example, check whether somebody entered your home while
    you were not there because the PIR motion sensor would instantly notice it. This
    section is really the foundation of the whole project. We are going to reuse the
    code developed in this section later when we write the piece of code to upload
    pictures to Dropbox.
  prefs: []
  type: TYPE_NORMAL
- en: For this part of the project, we don't want to use the SSH access to take pictures
    anymore; we need to trigger the camera right from the Arduino sketch. For this,
    we are going to use the `Bridge` library and the `Process` library to call a command
    on the Linux machine, just as if you were typing it on a terminal window.
  prefs: []
  type: TYPE_NORMAL
- en: 'The sketch starts by declaring the libraries that we need to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'To call some commands on the Yún''s Linux machine, we will need to declare
    a process, which is an object that we will call to emulate some terminal entries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll also build a filename for each picture that will be taken, as shown
    in the following line of code. Indeed, we named the file `test.png` earlier, but
    in this application, we want every picture taken by the project to have a different
    name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Declare the pin on which the motion sensor is connected, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to define where the pictures will be stored. Remember, we want
    to store them all on the SD card, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: You can also store pictures locally on the Yún, but it would quickly saturate
    the memory of the Arduino Yún.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, in the `setup()` function, we start the bridge between the Atmel microcontroller
    and the Linux machine of the Yún, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, we set the pin of the PIR motion sensor as an input, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: In the `loop()` function, what we want to do is to continuously read data from
    the motion sensor and trigger the camera if any motion is detected.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is done by a simple `if` statement that checks the sensor''s value, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, if some motion is detected, we need to prepare everything to take the
    picture. The first step is to build a filename that will contain the date on which
    the picture was taken. To do so, we are using the Linux date command that outputs
    the current date and time. This is important because we want to know what time
    the picture was taken at and give a unique filename to every picture. At the end,
    we also want to specify that this picture will be taken in a `PNG` format. The
    filename formatting part is done by the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we can take the picture. What we are going to do here is to call the
    `fswebcam` command again using the `runShellCommand` function of our picture process
    that will emulate a terminal entry.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also want to use the maximum resolution available on the camera. In the
    case of the camera we chose, it was 1280 x 720 (standard HD resolution). We have
    quite a lot of space available on the SD card (4 GB with the one I used), so you
    can use the maximum resolution without running into problems. We recommend that
    you use a dedicated SD card for this project so that you don''t run into problems
    with other files that could be stored on the card. For the sake of simplicity,
    we won''t add an automated check to see whether the card is full, but this is
    something you should consider if you want to let the project run continuously
    over time. You can specify the resolution using the `–o` command at the end of
    the call. Finally, we can build the complete code to take a picture:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Note that we are also using a `while()` statement here to make sure that the
    `fswebcam` utility has enough time to take the picture. The complete code can
    be found at [https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter3/triggered_camera](https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter3/triggered_camera).
  prefs: []
  type: TYPE_NORMAL
- en: You can now upload the code to the Yún board and test the project. Once it's
    uploaded, try moving your hand in front of the sensor. The Arduino Yún should
    trigger the camera to take a picture and save it to the SD card. To make sure
    that a picture was taken at this point, you can simply check on the camera itself.
    For example, the Logitech webcam that I used has a small LED that turns green
    whenever it is active.
  prefs: []
  type: TYPE_NORMAL
- en: 'After a while, remove the SD card from the Arduino Yún (as earlier, unmount
    the SD card from the Yún first), and put it in your computer with the adapter
    we used earlier. You should see all the pictures that were taken at the root of
    the SD card, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Recording pictures when motion is detected](img/8007OS_03_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Again, check these pictures to make sure that they are not corrupted and that
    everything worked as planned.
  prefs: []
  type: TYPE_NORMAL
- en: Sending pictures to Dropbox at regular intervals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are now going to extend the code we built in the previous section and write
    some new code that automatically uploads the pictures that were taken by the camera
    to Dropbox. For this, we will need to build a slightly more complex software than
    in the previous part.
  prefs: []
  type: TYPE_NORMAL
- en: For now, we only used the Choreos (Temboo libraries) for the Arduino Yún. However,
    there are actually many other Choreos available for other languages, such as for
    Python. This is great news because the Linux machine of the Yún is capable of
    running Python code out of the box.
  prefs: []
  type: TYPE_NORMAL
- en: It's actually much easier to access the Dropbox API from Python, so that's what
    we are going to use in this part. We will build a Python script that uploads the
    pictures we took to Dropbox, and call this script from the Arduino sketch using
    the `Bridge` library and our picture processes.
  prefs: []
  type: TYPE_NORMAL
- en: I will now explain the content of the Python script. Later, we will save all
    these lines of code in a separate file, and put it on the SD card along with the
    Temboo Python SDK.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Python script starts with the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The Python script will also take an argument: the name of the file to be uploaded.
    This way, we can directly pass the name of file (built by the Arduino code with
    a timestamp) to the Python script. The following lines of code do exactly this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the script, you need to define your Temboo credentials, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'These are exactly the same credentials we used for Temboo earlier. We then
    need to declare the upload file Choreo for Python that will be used to automatically
    upload pictures to Dropbox, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is to set the different inputs, which you had done when you created
    your Dropbox app, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can order `uploadFileChoreo` to upload the file to your Dropbox
    folder in the corresponding folder of your app, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'You can now save this code in a file named `upload_picture.py` and put it at
    the root of the SD card. Remember the Temboo Python library we downloaded earlier?
    It''s time to unpack it and place it at the root of the SD card as well. Just
    make sure that it appears with the name `temboo` in the root of the SD card, so
    the Python file we just created can access it correctly. If no pictures have been
    recorded yet, the following screenshot shows what your SD card folder should look
    like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sending pictures to Dropbox at regular intervals](img/8007OS_03_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We also need to slightly modify the Arduino sketch to upload pictures on Dropbox.
    We used exactly the same code base as in the previous section, so we will only
    detail the new code that was added.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the part that is executed when motion is detected, right at the end of the
    loop, you need to use the picture process again to execute the Python script,
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Note that we are passing along the same filename and path as the pictures that
    are recorded on the SD card, so the exact same picture name is recorded locally
    and sent to Dropbox.
  prefs: []
  type: TYPE_NORMAL
- en: The complete code for this part can be found at [https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter3/dropbox_log](https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter3/dropbox_log).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can now put the SD card back into the Arduino Yún, upload the updated Arduino
    sketch, and head to your Dropbox folder. At this point, you should note that a
    new folder was created in your `Apps` folder with the name of your Dropbox app
    that you set on the Dropbox website, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sending pictures to Dropbox at regular intervals](img/8007OS_03_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, if motion is detected, the sketch should not only log the pictures on the
    SD card, but also on your Dropbox folder. If everything is working correctly,
    you can see that pictures arrive in real time inside your Dropbox folder as the
    Yún takes the pictures using the USB camera.
  prefs: []
  type: TYPE_NORMAL
- en: The cool aspect about these applications of our project is that this can be
    done from anywhere in the world. You can do this from your computer, of course,
    but also from a web browser. Many mobile devices can also run the mobile version
    of Dropbox, so you can see if somebody has entered your home right from your mobile
    device. On my computer, for example, Dropbox also sends me a notification that
    a new file was uploaded, so I can instantly see whether something is happening
    in my house and can act accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Live video streaming via Wi-Fi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To finish this chapter, we are going to see another cool application that we
    can make with the Arduino Yún and our USB camera. Remember that the camera is
    actually a standard webcam, and that it is also made to capture videos. Wouldn't
    it be cool to automatically stream video on a private video channel on the Web,
    so you can watch over your home in real time from anywhere just by going into
    a web browser? That's exactly what we are going to do in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Many commercial IP cameras are actually doing this with proprietary solutions,
    but I wanted to use commonly available tools; this is why we chose the YouTube
    live event service to stream the video that can then be accessed from any device.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make the application work, we first need to install some additional software
    packages on the Yún, as shown in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Connect to the Yún again using SSH with your Arduino Yún name and password,
    and type the following command to get the correct package for live streaming:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Note that if the link is not valid anymore and you can''t find the files, this
    package is also available inside the code of this chapter. You can now install
    it with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can now start the live streaming software on your Arduino Yún using the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, the parameter after `–h` is the resolution and the one after `–i` is the
    port on which the stream will be available. We also specified the number of frames
    per second using the `–I` command. The other options are less important and you
    do not have to worry about them.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note that we didn't stream at HD resolution; it was apparently too much for
    the Arduino Yún, and the video stream suffered significant lag and also had corrupted
    images, which is not what we want at all. You can then access your stream by going
    to your Arduino Yún's address in your web browser followed by `8080` to specify
    the correct port. For example, in my case, it was `http://myarduinoyun.local:8080/stream.html`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This actually gives you direct access to the live stream. You should then see
    the stream interface with the live stream in the middle of the page, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Live video streaming via Wi-Fi](img/8007OS_03_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can also use the different elements of the menu on the left to explore other
    possibilities of this streaming software. For example, you can get a link for
    **VideoLAN**, so you can access your stream right from the VLC player.
  prefs: []
  type: TYPE_NORMAL
- en: Now, this is already great and you could stop here to access your video stream
    from your local Wi-Fi network. But it would be even better if the stream was available
    online, so you could access it from anywhere in the world even without being connected
    to your local Wi-Fi network.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to go to your YouTube account in **VIDEO MANAGER** and to
    the **Live Events** menu on the left, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Live video streaming via Wi-Fi](img/8007OS_03_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: From this menu, you can create your stream just like you would create a new
    YouTube video. Make sure that you put the video as unlisted unless you want other
    people on YouTube to be able to see what's going on in your home. Compared to
    a private video, you will still be able to share the video with the people you
    know just by giving them the URL of the stream. Then, on the next page, YouTube
    will ask you to choose which encoder you want to use.
  prefs: []
  type: TYPE_NORMAL
- en: 'I chose **Wirecast** from the list and downloaded it from their website. In
    the Wirecast interface, you need to set the correct video source (by default,
    it will stream from your computer''s webcam). In the menu where you can select
    the video source, select **Web Stream Source** and configure it, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Live video streaming via Wi-Fi](img/8007OS_03_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Basically, you need to choose HTTP as the protocol, use **Motion JPEG** as the
    format, and put the URL from the VideoLAN tab of the streaming interface. For
    example, for my project, it was `myarduinoyun.local:8080/?action=stream`.
  prefs: []
  type: TYPE_NORMAL
- en: 'After a moment, if everything is working fine, you should see the live stream
    from your USB camera appear directly in the main window of Wirecast. Don''t worry
    if there is some lag at this point; it is only a delay usually; in my case, I
    had about 1-2 seconds of delay in the Wirecast software. The following is the
    image I got in the main Wirecast interface after adding the right video stream:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Live video streaming via Wi-Fi](img/8007OS_03_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Also, make sure that this stream is the only one that will be sent to YouTube.
    For this purpose, delete all the other streams from the Wirecast interface. Indeed,
    by default, Wirecast puts the stream that comes from your webcam on the interface.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Also note that using an HTTP stream is a feature from the paid version of Wirecast;
    it works perfectly in the free version, but you will get a watermark displayed
    on the video from time to time. Don't worry; it's actually not a problem to monitor
    what is going on in your house.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to actually stream data to YouTube. Click on the **Stream**
    button at the top of the interface, which should turn red, after which you will
    be prompted to enter your YouTube credentials. It should then automatically detect
    your live event video that you just created on YouTube.
  prefs: []
  type: TYPE_NORMAL
- en: 'Accept the settings, make sure it is streaming from Wirecast, and go back to
    the YouTube interface. You can now go to the video manager, and go to the **Live
    Control Room** tab. This is where you should see that YouTube is actually receiving
    some data from your Arduino Yún via Wirecast running on your computer. It should
    indicate that the **Stream Status** is **GOOD**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Live video streaming via Wi-Fi](img/8007OS_03_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If this is not the case, please go back to the Wirecast application to check
    that the streaming process is working correctly. At this moment, don't worry;
    your stream is not working just yet. You should see that the **Preview** button,
    as shown in the following screenshot, is now available and can be clicked. Just
    click on it.
  prefs: []
  type: TYPE_NORMAL
- en: '![Live video streaming via Wi-Fi](img/8007OS_03_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'YouTube will then prepare your stream, as shown in the following screenshot,
    and you will have to wait for a moment (around 30 seconds when I tried it):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Live video streaming via Wi-Fi](img/8007OS_03_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After a while, the page will be updated automatically so that you can move
    to the next step and actually start the streaming, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Live video streaming via Wi-Fi](img/8007OS_03_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Note that before making the stream live, you can preview it using the options
    on the preceding page. If what you see is satisfactory, you can now click on **Start
    Streaming** to finally finish the process. You will then have access to the stream
    on this page or directly on the dedicated page of the stream. The following screenshot
    is the final result on the YouTube interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Live video streaming via Wi-Fi](img/8007OS_03_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can see from the red dot below the video that the video is streaming live.
    Because the video is marked as **Unlisted**, only people with the URL can access
    it. You can, for example, mark the video as a favorite in your YouTube account
    and then access it from anywhere. You can also share it with your family and friends,
    so they can also watch the stream from their browsers.
  prefs: []
  type: TYPE_NORMAL
- en: Note that because we are using the Wirecast software on our computer to encode
    the stream for YouTube, we need to have our computer on for this to work. At the
    time this book was written, no software was available to directly stream the video
    to YouTube without the help of a computer, but this might change in the future,
    removing the need for a computer to stream the video.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's now summarize what we learned in this project. What we've built in this
    project is a security camera that can automatically log pictures locally and to
    Dropbox whenever motion is detected. We also learned how to stream the video that
    comes from this camera live on YouTube via Wi-Fi.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following were the major takeaways from this project:'
  prefs: []
  type: TYPE_NORMAL
- en: In the first part of the project, we connected the USB camera to the Arduino
    Yún as well as the PIR motion sensor. We also plugged a micro SD card to the Yún
    so we can also record pictures locally, even if the Internet connection is not
    available. We also installed the required software packages for the project, such
    as the driver, to access the USB camera from a terminal command.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, we tested our hardware by checking whether the motion sensor was working
    properly and by making sure that we can actually take pictures using the USB camera.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, we built a simple application using our hardware to automatically take
    a picture when motion is detected and store it on the micro SD card. We tested
    this software on the Yún, and when we checked later, we found that some pictures
    were indeed stored on the SD card.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After this simple application, we built on the sketch to automatically upload
    the pictures on our Dropbox folder as well. For this, we wrote a Python script
    that can automatically upload files to Dropbox. This script was then called from
    the Arduino sketch to upload pictures over to Dropbox whenever motion is detected.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, in the last part of the sketch, we used the video capabilities of the
    camera to stream video live on YouTube. This way, we can monitor what's going
    on in your home from wherever you are in the world; we just need an Internet connection
    and a device that can access YouTube, such as a smartphone.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Of course, there are many ways you can improve and extend this project based
    on what we learned in this chapter. You can, of course, have many of these modules
    with a camera and a motion sensor within your home. This way, you can have a complete
    security system that monitors your home remotely.
  prefs: []
  type: TYPE_NORMAL
- en: One way to improve the project is to integrate more Choreos into the project.
    For example, you can inject the Gmail Choreo we used in the first chapter to automatically
    send an e-mail alert as well whenever some motion is detected. This will create
    another layer of security in your home. In a similar way, you can also use the
    Twilio Choreo that will send you an SMS when motion is detected in your home.
  prefs: []
  type: TYPE_NORMAL
- en: You can also use the project for completely different purposes. While testing
    the project, we, for example, created a time-lapse device that takes pictures
    at regular time intervals (for example, every minute) and uploads these pictures
    on Dropbox.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, we are going to use the Arduino Yún''s Wi-Fi capabilities
    for a completely different application: to control a mobile robot. We are going
    to use the power of the Arduino Yún to remotely control this robot and read out
    data that comes from the robot, all within a simple web application running on
    your computer.'
  prefs: []
  type: TYPE_NORMAL
