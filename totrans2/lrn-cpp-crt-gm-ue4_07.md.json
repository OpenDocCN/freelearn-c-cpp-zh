["```cpp\nclass Player\n{\n  string name;\n  int hp;\npublic:\n  Player(){ cout << \"Player born\" << endl; }\n  ~Player(){ cout << \"Player died\" << endl; }\n};\n```", "```cpp\nint main()\n{\n  Player player; // \"Player born\"\n}                // \"Player died\" - player object destroyed here\n```", "```cpp\nPlayer born\nPlayer died\n```", "```cpp\nint main()\n{\n  // \"dynamic allocation\" – using keyword new!\n  // this style of allocation means that the player object will\n  // NOT be deleted automatically at the end of the block where\n  // it was declared!\nPlayer *player = new Player();\n} // NO automatic deletion!\n```", "```cpp\nPlayer born\n```", "```cpp\nint main()\n{\n  // \"dynamic allocation\" – using keyword new!\n  Player *player = new Player();\n  delete player; // deletion invokes dtor\n}\n```", "```cpp\nPlayer born\nPlayer died\n```", "```cpp\n#include <iostream>\n#include <string>\nusing namespace std;\nclass Player\n{\n  string name;\n  int hp;\npublic:\n  Player(){ cout << \"Player born\" << endl; }\n  ~Player(){ cout << \"Player died\" << endl; }\n};\n\nint main()\n{\n  while( true ) // keep going forever,\n  {\n    // alloc..\n    Player *player = new Player();\n    // without delete == Memory Leak!\n  }\n}\n```", "```cpp\n#include <iostream>\nusing namespace std;\nint main()\n{\n  int array[ 5 ];  // declare an \"array\" of 5 integers\n                   // fill slots 0-4 with values\narray[ 0 ] = 1;\narray[ 1 ] = 2;\narray[ 2 ] = 3;\narray[ 3 ] = 4;\narray[ 4 ] = 5;\n  // print out the contents\n  for( int index = 0; index < 5; index++ )\n    cout << array[ index ] << endl;\n}\n```", "```cpp\narray[ 0 ] = 10;\n```", "```cpp\narray[ slotNumber ] = value to put into array;\n```", "```cpp\n    #include <iostream>\n    #include <string>\n    using namespace std;\n    int main()\n    {\n      string array[ 5 ];  // declare an \"array\" of 5 strings\n                          // fill slots 0-4 with values\n    array[ 0 ] = \"Mariam McGonical\";\n    array[ 1 ] = \"Wesley Snice\";\n    array[ 2 ] = \"Kate Winslett\";\n    array[ 3 ] = \"Erika Badu\";\n    array[ 4 ] = \"Mohammad\";\n      // print out the contents\n      for( int index = 0; index < 5; index++ )\n        cout << array[ index ] << endl;\n    }\n    ```", "```cpp\n    double temps[ 3 ];\n    // fill slots 0-2 with values\n    temps[ 0 ] = 0;\n    temps[ 1 ] = 4.5;\n    temps[ 2 ] = 11;\n    ```", "```cpp\n#include <iostream>\nusing namespace std;\nint main()\n{\n  cout << \"How big?\" << endl;\n  int size;       // try and use a variable for size..\n  cin >> size;    // get size from user\n  int array[ size ];  // get error: \"unknown size\"\n}\n```", "```cpp\nerror C2133: 'array' : unknown size\n```", "```cpp\n#include <iostream>\nusing namespace std;\nint main()\n{\n  cout << \"How big?\" << endl;\n  int size;       // try and use a variable for size..\n  cin >> size;\n  int *array = new int[ size ];  // this works\n  // fill the array and print\nfor( int index = 0; index < size; index++ )\n{\n  array[ index ] = index * 2;\n  cout << array[ index ] << endl;\n}\ndelete[] array; // must call delete[] on array allocated with \n                // new[]!\n}\n```", "```cpp\n#include <iostream>\nusing namespace std;\nint main()\n{\n  cout << \"How big?\" << endl;\n  int size;       // try and use a variable for size..\n  cin >> size;\n  // the next line will look weird..\n  int *array = (int*)malloc( size*sizeof(int) ); // C-style\n  // fill the array and print\nfor( int index = 0; index < size; index++ )\n  {\n    array[ index ] = index * 2;\n    cout << array[ index ] << endl;\n  }\nfree( array ); // must call free() on array allocated with \n               // malloc() (not delete[]!)\n}\n```"]