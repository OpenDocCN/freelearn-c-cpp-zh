["```cpp\nQString str = QStringLiteral(\"I'm writing my games using Qt\");\n```", "```cpp\nQByteArray big5Encoded = \"你好\";\nQTextCodec *big5Codec = QTextCodec::codecForName(\"Big5\");\nQString text = big5Codec->toUnicode(big5Encoded);\nQTextCodec *utf8Codec = QTextCodec::codecForMib(106); // UTF-8\nQByteArray utf8Encoded = utf8Codec->fromUnicode(text);\n```", "```cpp\nQString str = QStringLiteral(\"abcdefghij\");\nstr.remove(2, 4); // str = \"abghij\"\n```", "```cpp\nQString str = QStringLiteral(\"Abracadabra\");\nstr.remove(QStringLiteral(\"ab\"), Qt::CaseInsensitive); // str = \"racadra\"\n```", "```cpp\nQString str1 = QStringLiteral(\"abc\");\nQString str2 = QStringLiteral(\"def\");\nQString str1_2 = str1+str2;\nQString str2_1 = str2;\nstr2_1.append(str1);\n```", "```cpp\nQString original = QStringLiteral(\"abcdefghij\");\nQString l = original.left(3); // \"abc\"\nQString r = original.right(2); // \"ij\"\nQString m = original.mid(2, 5); // \"cdefg\"\n```", "```cpp\nQString str = \"foo\";\nQChar f = str[0]; // const\nstr[0] = 'g'; // non-const\n```", "```cpp\nQChar f = str.at(0);\n```", "```cpp\n#include <QtDebug>\n// ...\nint pos = -1;\nQString str = QStringLiteral(\"Orangutans like bananas.\");\ndo {\n  pos = str.indexOf(\"an\", pos+1);\n  qDebug() << \"'an' found starts at position\" << pos;\n} while(pos!=-1);\n```", "```cpp\nQString record = \"1,4,8,15,16,24,42\";\nQStringList fields = record.split(\",\");\nfor(int i=0; i< fields.count(); ++i){\n  qDebug() << fields.at(i);\n}\n```", "```cpp\nQStringList fields = { \"1\", \"4\", \"8\", \"15\", \"16\", \"24\", \"42\" }; // C++11 syntax!\nQString record = fields.join(\",\");\n```", "```cpp\nbool ok;\nint v1 = QString(\"42\").toInt(&ok, 10); // v1 = 42, ok = true\nlong long v2 = QString(\"0xFFFFFF\").toInt(&ok, 16); // v2 = 16777215, ok = true\ndouble v3 = QString(\"not really a number\").toDouble(&ok); //v3 = 0.0, ok = false\n```", "```cpp\nQString txt = QString::number(255, 16); // txt = \"0xFF\"\n```", "```cpp\nQString str = \"Copying file \" + QString::number(current) + \" of \"+QString::number(total);\n```", "```cpp\nQString str = QStringLiteral(\"Copying file %1 of %2\")\n                                             .arg(current).arg(total);\n```", "```cpp\nQRegularExpression regex(\"[1-9][0-9]{0,2}[ ]? (mg|g|kg)\");\nregex.setPatternOptions(QRegularExpression:: CaseInsensitiveOption);\n```", "```cpp\nQRegularExpression regex;\nregex.setPattern(\"[1-9][0-9]{0,2}[ ]?(mg|g|kg)\");\n```", "```cpp\nQRegularExpression regex(\"[1-9][0-9]{0,2}[ ]?(mg|g|kg)\",\n           QRegularExpression::CaseInsensitiveOption);\n```", "```cpp\nQString input = \"23kg\";\nQRegularExpressionMatch match = regex.match(input);\nbool isValid = match.hasMatch();\n```", "```cpp\nQRegularExpression regex(\"\\\\A[1-9][0-9]{0,2}[ ]?(mg|g|kg)\\\\z\",\n           QRegularExpression::CaseInsensitiveOption);\n```", "```cpp\nint getWeight(const QString &input) {\n  QRegularExpression regex(\"\\\\A([1-9][0-9]{0,2}) [ ]?(mg|g|kg)\\\\z\");\n  regex.setPatternOptions(QRegularExpression:: CaseInsensitiveOption);\n  QRegularExpressionMatch match = regex.match(input);\n  if(match.hasMatch()) {\n    const QString number = match.captured(1);\n    int weight = number.toInt();\n    const QString unit = match.captured(2).toLower();\n    if (unit == \"g\") {\n      weight *= 1000;\n    } else if (unit == \"kg\") {\n      weight *= 1000000 ;\n    }\n    return weight;\n  } else {\n    return -1;\n  }\n}\n```", "```cpp\nQString input = \"123 foo 09 1a 3\";\nQRegularExpression regex(\"\\\\b[0-9]+\\\\b\");\nQRegularExpressionMatchIterator i = regex.globalMatch(input);\nwhile (i.hasNext()) {\n  QRegularExpressionMatch match = i.next();\n  qWarning() << match.capturedTexts();\n}\n```", "```cpp\nQDir dir = QDir::home();\nQStringList nameFilters;\nnameFilters << QStringLiteral(\"*.jpg\") << QStringLiteral(\"*.jpeg\");\nQStringList entries = dir.entryList(nameFilters,\n                      QDir::Files|QDir::Readable, QDir::Size);\n```", "```cpp\nQStringList lines;\nwhile(!file.atEnd()) {\n  QByteArray line = file.readLine();\n  lines.append(QString::fromUtf8(line));\n}\n```", "```cpp\nQFile f(\"myfile\");\nif(!f.open(QFile::ReadWrite)) return;\nuchar *addr = f.map(0, f.size());\nif(!addr) return;\nf.close();\ndoSomeComplexOperationOn(addr);\nf.unmap(addr);\n```", "```cpp\nclass CaesarCipherDevice : public QIODevice\n{\n    Q_OBJECT\n    Q_PROPERTY(int key READ key WRITE setKey)\npublic:\n    explicit CaesarCipherDevice(QObject *parent = 0) : QIODevice(parent) {\n      m_key = 0;\n      m_device = 0;\n    }\n    void setBaseDevice(QIODevice *dev) { m_device = dev; }\n    QIODevice *baseDevice() const { return m_device; }\n    void setKey(int k) { m_key = k; }\n    inline int key() const { return m_key; }\nprivate:\n    int m_key;\n    QIODevice *m_device;\n};\n```", "```cpp\nbool open(OpenMode mode) {\n  if(!baseDevice())\n    return false;\n  if(baseDevice()->openMode() != mode)\n    return false;\n  return QIODevice::open(mode);\n}\n```", "```cpp\nqint64 CaesarCipherDevice::writeData(const char *data, qint64 len) {\n    QByteArray ba(data, len);\n    for(int i=0;i<len;++i)\n      ba.data()[i] += m_key;\n    int written = m_device->write(ba);\n    emit bytesWritten(written);\n    return written;\n}\n```", "```cpp\nqint64 CaesarCipherDevice::readData(char *data, qint64 maxlen) {\n  QByteArray baseData = m_device->read(maxlen);\n  const int s = baseData.size();  for(int i=0;i<s;++i)\n    data[i] = baseData[i]-m_key;\n  return s;\n}\n```", "```cpp\nint main(int argc, char **argv) {\n  QByteArray ba = \"plaintext\";\n  QBuffer buf;\n  buf.open(QIODevice::WriteOnly);\n  CaesarCipherDevice encrypt;\n  encrypt.setKey(3);\n  encrypt.setBaseDevice(&buf);\n  encrypt.open(buf.openMode());\n  encrypt.write(ba);\n  qDebug() << buf.data();\n\n  CaesarCipherDevice decrypt;\n  decrypt.setKey(3);\n  decrypt.setBaseDevice(&buf);\n  buf.open(QIODevice::ReadOnly);\n  decrypt.open(buf.openMode());\n  qDebug() << decrypt.readAll();\n  return 0;\n}\n```", "```cpp\nQFile file(\"output.txt\");\nfile.open(QFile::WriteOnly|QFile::Text);\nQTextStream stream(&file);\nstream << \"Today is \" << QDate::currentDate().toString() << endl;\nQTime t = QTime::currentTime();\nstream << \"Current time is \" << t.hour() << \" h and \" << t.minute() << \"m.\" << endl;\n```", "```cpp\nfor(int i=0;i<10;++i) {\n  int num = qrand() % 100000;  // random number between 0 and 99999\n  stream << dec << num << showbase << hex << uppercasedigits << num << endl;\n}\n```", "```cpp\nstruct Player {\n  QString name;\n  qint64 experience;\n  QPoint position;\n  char direction;\n};\nQList<Player> players;\n```", "```cpp\nQFile file(\"players.txt\");\nfile.open(QFile::WriteOnly|QFile::Text);\nQTextStream stream(&file);\nstream << center;\nstream << qSetFieldWidth(16) << \"Player\" << qSetFieldWidth(0) << \" \";\nstream << qSetFieldWidth(10) << \"Experience\" << qSetFieldWidth(0) << \" \";\nstream << qSetFieldWidth(13) << \"Position\" << qSetFieldWidth(0) << \" \";\nstream << \"Direction\" << endl;\nfor(int i=0;i<players.size();++i) {\n  const Player &p = players.at(i);\n  stream << left << qSetFieldWidth(16) << p.name << qSetFieldWidth(0) << \" \";\n  stream << right << qSetFieldWidth(10) << p.experience << qSetFieldWidth(0) << \" \";\n  stream << right << qSetFieldWidth(6) << p.position.x() << qSetFieldWidth(0) << \" \" << qSetFieldWidth(6) << p.position.y() << qSetFieldWidth(0) << \" \";\n  stream << center << qSetFieldWidth(10);\n  switch(p.direction) {\n    case 'n' : stream << \"north\"; break;\n    case 's' : stream << \"south\"; break;\n    case 'e' : stream << \"east\"; break;\n    case 'w' : stream << \"west\"; break;\n    default: stream << \"unknown\"; break;\n  }\n  stream << qSetFieldWidth(0) << endl;\n}\n```", "```cpp\nQTextStream qout(stdout);\nqout << \"This text goes to process standard output.\" << endl;\n```", "```cpp\nQFile file(\"outfile.dat\");\nfile.open(QFile::WriteOnly|QFile::Truncate);\nQDataStream stream(&file);\ndouble dbl = 3.14159265359;\nQColor color = Qt::red;\nQPoint point(10, -4);\nQStringList stringList = QStringList() << \"foo\" << \"bar\";\nstream << dbl << color << point << stringList;\n```", "```cpp\nstruct Player {\n  QString name;\n  qint64 experience;\n  QPoint position;\n  char direction;\n};\n```", "```cpp\nQDataStream& operator<<(QDataStream &stream, const Player &p) {\n  stream << p.name;\n  stream << p.experience;\n  stream << p.position;\n  stream << p.direction;\n  return stream;\n}\n```", "```cpp\nQDataStream& operator>>(QDataStream &stream, Player &p) {\n   stream >> p.name;\n   stream >> p.experience;\n   stream >> p.position;\n   stream >> p.direction;\n   return stream;\n}\n```", "```cpp\nstruct InventoryItem {\n  enum Type { Weapon, Armor, Gem, Book, Other } type;\n  QString subType;\n  int durability;\n};\n\nstruct Player {\n  QString name;\n  QString password;\n  int experience;\n  int hitPoints;\n  QList<Item> inventory;\n  QString location;\n  QPoint position;\n};\n\nstruct PlayerInfo {\n  QList<Player> players;\n};\n```", "```cpp\n<PlayerInfo>\n    <Player hp=\"40\" exp=\"23456\">\n        <Name>Gandalf</Name>\n        <Password>mithrandir</Password>\n        <Inventory>\n            <InvItem type=\"weapon\" durability=\"3\">\n                <SubType>Long sword</SubType>\n            </InvItem>\n            <InvItem type=\"armor\" durability=\"10\">\n                <SubType>Chain mail</SubType>\n            </InvItem>\n        </Inventory>\n        <Location name=\"room1\">\n            <Position x=\"1\" y=\"0\"/>\n        </Location>\n    </Player>\n</PlayerInfo>\n```", "```cpp\nclass PlayerInfoReader {\npublic:\n  PlayerInfoReader(QIODevice *);\n  inline const PlayerInfo& result() const { return m_pinfo; }\nprivate:\n  QXmlStreamReader reader;\n  PlayerInfo m_pinfo;\n};\n```", "```cpp\nPlayerInfoReader(QIODevice *device) {\n    reader.setDevice(device);\n}\n```", "```cpp\nenum Token {\n  T_Invalid = -1,\n  T_PlayerInfo,                                 /* root tag */\n  T_Player,                                     /* in PlayerInfo */\n  T_Name, T_Password, T_Inventory, T_Location,  /* in Player */\n  T_Position,                                   /* in Location */\n  T_InvItem                                     /* in Inventory */\n};\n```", "```cpp\nstatic Token PlayerInfoReader::tokenByName(const QStringRef &r) {\n  static QStringList tokenList = QStringList() << \"PlayerInfo\" << \"Player\"\n    << \"Name\" << \"Password\"\n    << \"Inventory\" << \"Location\"\n    << \"Position\" << \"InvItem\";\n  int idx = tokenList.indexOf(r.toString());\n  return (Token)idx;\n}\n```", "```cpp\nbool PlayerInfoReader::read() {\n  m_pinfo = PlayerInfo();\n  if(reader.readNextStartElement() && tokenByName(reader.name()) == T_PlayerInfo) {\n      return readPlayerInfo();\n  } else {\n    return false;\n  }\n}\n```", "```cpp\nbool readPlayerInfo() {\n  if(tokenByName(reader.name()) != T_PlayerInfo)\n    return false;\n  while(reader.readNextStartElement()) {\n    if(tokenByName(reader.name()) == T_Player) {\n      Player p = readPlayer();\n      m_pinfo.players.append(p);\n    } else\n      reader.skipCurrentElement();\n  }\n  return true;\n}\n```", "```cpp\nPlayer readPlayer() {\n  if(tokenByName(reader.name()) != T_Player) return Player();\n  Player p;  const QXmlStreamAttributes& playerAttrs = reader.attributes();\n  p.hitPoints = playerAttrs.value(\"hp\").toString().toInt();\n  p.experience = playerAttrs.value(\"exp\").toString().toInt();\n```", "```cpp\nwhile(reader.readNextStartElement()) {\n  Token t = tokenByName(reader.name());\n  switch(t) {\n  case Name:      p.name = reader.readElementText(); break;\n  case Password:  p.password = reader.readElementText(); break;\n  case Inventory: p.inventory = readInventory(); break;\n```", "```cpp\n        case T_Location: {\n            p.location = reader.attributes().value(\"name\").toString();\n            while(reader.readNextStartElement()) {\n                if(tokenByName(reader.name()) == T_Position) {\n                    const QXmlStreamAttributes& attrs = reader.attributes();\n                    p.position.setX(attrs.value(\"x\").toString().toInt());\n                    p.position.setY(attrs.value(\"y\").toString().toInt());\n                    reader.skipCurrentElement();\n                } else\n                    reader.skipCurrentElement();\n            }\n        }; break;\n        default:\n            reader.skipCurrentElement();\n        }\n    }\n    return p;\n}\n```", "```cpp\nQList<InventoryItem> readInventory() {\n  QList<InventoryItem> inventory;\n  while(reader.readNextStartElement()) {\n    if(tokenByName(reader.name()) != T_InvItem) {\n      reader.skipCurrentElement();\n      continue;\n    }\n    InventoryItem item;\n    const QXmlStreamAttributes& attrs = reader.attributes();\n      item.durability = attrs.value(\"durability\").toString().toInt();\n    QStringRef typeRef = attrs.value(\"type\");\n    if(typeRef == \"weapon\") {\n      item.type = InventoryItem::Weapon;\n    } else if(typeRef == \"armor\") {\n      item.type = InventoryItem::Armor;\n    } else if(typeRef == \"gem\") {\n      item.type = InventoryItem::Gem;\n    } else if(typeRef == \"book\") {\n      item.type = InventoryItem::Book;\n    } else item.type = InventoryItem::Other;\n    while(reader.readNextStartElement()) {\n      if(reader.name() == \"SubType\")\n      item.subType = reader.readElementText();\n      else\n        reader.skipCurrentElement();\n    }\n    inventory << item;\n  }\n  return inventory;\n}\n```", "```cpp\nqDebug() << \"Count:\" << playerInfo.players.count();\nqDebug() << \"Size of inventory:\" << playerInfo.players.first().inventory.size();\nqDebug() << \"Room: \" << playerInfo.players.first().location << playerInfo.players.first().position;\n```", "```cpp\n{\n    \"name\": \"Joe\",\n    \"age\": 14,\n    \"inventory: [\n        { \"type\": \"gold; \"amount\": \"144000\" },\n        { \"type\": \"short_sword\"; \"material\": \"iron\" }\n    ]\n}\n```", "```cpp\nclass PlayerInfoJSON {\npublic:\n  PlayerInfoJSON(){}\n  QByteArray writePlayerInfo(const PlayerInfo &pinfo) const;\n};\n```", "```cpp\nQVariant PlayerInfoJSON::toVariant(const PlayerInfo &pinfo) const {\n  QVariantList players;\n  foreach(const Player &p, pinfo.players) players << toVariant(p);\n  return players;\n}\n```", "```cpp\nQVariant PlayerInfoJSON::toVariant(const Player &player) const {\n  QVariantMap map;\n  map[\"name\"]       = player.name;\n  map[\"password\"]   = player.password;\n  map[\"experience\"] = player.experience;\n  map[\"hitpoints\"]  = player.hitPoints;\n  map[\"location\"]   = player.location;\n  map[\"position\"]   = QVariantMap({ {\"x\", player.position.x()},\n                                    {\"y\", player.position.y()} });\n  map[\"inventory\"]  = toVariant(player.inventory);\n  return map;\n}\n```", "```cpp\nfor(const Player &p: pinfo.players) players << toVariant(p);\n```", "```cpp\nQVariant PlayerInfoJSON::toVariant(const QList<InventoryItem> &items) const {\n  QVariantList list;\n  foreach(const InventoryItem &item, items) list << toVariant(item);\n  return list;\n}\n```", "```cpp\nQVariant PlayerInfoJSON::toVariant(const InventoryItem &item) const {\n  QVariantMap map;\n  map[\"type\"] = (int)item.type;\n  map[\"subtype\"] = item.subType;\n  map[\"durability\"] = item.durability;\n  return map;\n}\n```", "```cpp\nQByteArray PlayerInfoJSON::writePlayerInfo(const PlayerInfo &pinfo) const {\n  QJsonDocument doc = QJsonDocument::fromVariant(toVariant(pinfo));\n  return doc.toJson();\n}\n```", "```cpp\nPlayerInfo PlayerInfoJSON::readPlayerInfo(const QByteArray &ba) const {\n  QJsonDocument doc = QJsonDocument::fromJson(ba);\n  if(doc.isEmpty() || !doc.isArray()) return PlayerInfo();\n  return readPlayerInfo(doc.array());\n}\n```", "```cpp\nPlayerInfo PlayerInfoJSON::readPlayerInfo(const QJsonArray &array) const {\n  PlayerInfo pinfo;\n  foreach(QJsonValue value, array)\n    pinfo.players << readPlayer(value.toObject());\n  return pinfo;\n}\n```", "```cpp\nPlayer PlayerInfoJSON::readPlayer(const QJsonObject &object) const {\n  Player player;\n  player.name = object.value(\"name\").toString();\n  player.password = object.value(\"password\").toString();\n  player.experience = object.value(\"experience\").toDouble();\n  player.hitPoints = object.value(\"hitpoints\").toDouble();\n  player.location = object.value(\"location\").toString();\n  QVariantMap positionMap = object.value(\"position\").toVariant().toMap();\n  player.position = QPoint(positionMap[\"x\"].toInt(), positionMap[\"y\"].toInt());\n  player.inventory = readInventory(object.value(\"inventory\").toArray());\n  return player;\n}\n```", "```cpp\nQList<InventoryItem> PlayerInfoJSON::readInventory(const QJsonArray &array) const {\n  QList<InventoryItem> inventory;\n  foreach(QJsonValue value, array) inventory << readItem(value.toObject());\n  return inventory;\n}\n```", "```cpp\nInventoryItem PlayerInfoJSON::readItem(const QJsonObject &object) const {\n  Item item;\n  item.type = (InventoryItem::Type)object.value(\"type\").toDouble();\n  item.subType = object.value(\"subtype\").toString();\n  item.durability = object.value(\"durability\").toDouble();\n  return item;\n}\n```", "```cpp\nQSettings settings;\nsettings.setValue(\"windowWidth\", 80);\nsettings.setValue(\"windowTitle\", \"MySuperbGame\");\n// …\nint windowHeight = settings.value(\"windowHeight\").toInt();\n```", "```cpp\nint windowHeight = settings.value(\"windowHeight\", 800);\n```", "```cpp\nsettings.beginGroup(\"Server\");\nQString srvIP = settings.value(\"host\").toString();\nint port = settings.value(\"port\").toInt();\nsettings.endGroup();\n```", "```cpp\nQString srvIP = settings.value(\"Server/host\").toString();\nint port = settings.value(\"Server/port\").toInt();\n```", "```cpp\nQCoreApplication::setOrganizationName(\"Packt\");\nQCoreApplication::setApplicationName(\"Game Programming using Qt\");\nQSettings settings;\n```", "```cpp\nQSettings settings(\"Packt\", \"Game Programming using Qt\");\n```", "```cpp\nQSettings settings(QSettings::IniFormat, QSettings::UserScope,\n                \"Packt\", \"Game Programming using Qt\");\n```", "```cpp\nQSettings settings(\n  QStandardPaths::writableLocation(\n    QStandardPaths::ConfigLocation\n  ) +\"/myapp.conf\", QSettings::IniFormat\n);\n```", "```cpp\nbool readCCFile(QIODevice &device, QSettings::SettingsMap &map) {\n  CeasarCipherDevice ccDevice;\n  ccDevice.setBaseDevice(&device);\n  // ...\n  return true;\n}\nbool writeCCFile(QIODevice &device, const QSettings::SettingsMap &map) { ... }\nconst QSettings::Format CCFormat = QSettings::registerFormat(\"ccph\", readCCFile, writeCCFile);\n```"]