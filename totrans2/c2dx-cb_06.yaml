- en: Chapter 6. Playing Sounds
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章. 播放声音
- en: 'A game without sound will be boring and lifeless. Background music and sound
    effects that suit the visuals will lighten up the game. Initially, we used a very
    famous audio engine called `SimpleAudioEngine`, but Cocos2d-x version 3.3 has
    now come up with an all-new `AudioEngine`. In this chapter, we''re going to talk
    about both `SimpleAudioEngine` and `AudioEngine`. The following topics will be
    covered in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 没有声音的游戏将会无聊且缺乏活力。适合视觉的背景音乐和音效可以使游戏更加生动。最初，我们使用了一个非常著名的音频引擎，名为`SimpleAudioEngine`，但现在Cocos2d-x
    3.3版本已经推出了全新的`AudioEngine`。在本章中，我们将讨论`SimpleAudioEngine`和`AudioEngine`。本章将涵盖以下主题：
- en: Playing background music
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 播放背景音乐
- en: Playing a sound effect
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 播放一个音效
- en: Controlling volume, pitch, and balance
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制音量、音调和平衡
- en: Pausing and resuming background music
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 暂停和恢复背景音乐
- en: Pausing and resuming sound effects
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 暂停和恢复音效
- en: Playing background music and a sound effect by using AudioEngine
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用AudioEngine播放背景音乐和音效
- en: Playing movies
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 播放电影
- en: Playing background music
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 播放背景音乐
- en: By using `SimpleAudioEngine`, we can play background music very easily. `SimpleAudioEngine`
    is a shared singleton object that can be called from anywhere in your code. In
    `SimpleAudioEngine`, we can play only one background score.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`SimpleAudioEngine`，我们可以非常容易地播放背景音乐。`SimpleAudioEngine`是一个共享的单例对象，可以在代码的任何地方调用。在`SimpleAudioEngine`中，我们只能播放一个背景音乐。
- en: Getting ready
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We have to include the header file of `SimpleAudioEngine` to use it. Therefore,
    you will need to add the following code:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须包含`SimpleAudioEngine`的头文件才能使用它。因此，您需要添加以下代码：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How to do it...
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The following code is used to play background music called `background.mp3`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码用于播放名为`background.mp3`的背景音乐。
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works...
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '`SimpleAudioEngine` has a namespace called `CocosDenshion`. For `SimpleAudioEngine`,
    you just have to get an instance by using the `getInstance` method. You can play
    the background music without preloading it, but this could result in a delay in
    playback. That''s why you should preload the music before playing it. If you want
    the playback to be continuous, you need to set the true value as the second argument.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`SimpleAudioEngine`有一个名为`CocosDenshion`的命名空间。对于`SimpleAudioEngine`，您只需使用`getInstance`方法获取一个实例。您可以在不预加载的情况下播放背景音乐，但这可能会导致播放延迟。这就是为什么您应该在播放之前预加载音乐。如果您希望播放连续，则需要将true值作为第二个参数设置。'
- en: There's more...
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: '`SimpleAudioEngine` supports a number of formats, including MP3 and Core Audio
    format. It can play the following formats:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`SimpleAudioEngine`支持多种格式，包括MP3和Core Audio格式。它可以播放以下格式：'
- en: '| Format | iOS (BGM) | iOS (SE) | Android (BGM) | Android (SE) |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| 格式 | iOS (BGM) | iOS (SE) | Android (BGM) | Android (SE) |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| IMA (.caf) | ○ | ○ | □ | □ |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| IMA (.caf) | ○ | ○ | □ | □ |'
- en: '| Vorbis (.ogg) | □ | □ | ○ | ○ |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| Vorbis (.ogg) | □ | □ | ○ | ○ |'
- en: '| MP3 (.mp3) | ○ | ○ | ○ | ○ |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| MP3 (.mp3) | ○ | ○ | ○ | ○ |'
- en: '| WAVE (.wav) | ○ | ○ | △ | △ |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| WAVE (.wav) | ○ | ○ | △ | △ |'
- en: 'If you want to play a sound in a different format on iOS and Android, you can
    play it by using the following macro code:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在iOS和Android上播放不同格式的声音，您可以使用以下宏代码来播放：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this code, if the device is Android, it plays a `.ogg` file. If the device
    is iOS, it plays a `.caf` file.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码中，如果设备是Android，它将播放`.ogg`文件。如果设备是iOS，它将播放`.caf`文件。
- en: Playing a sound effect
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 播放一个音效
- en: By using `SimpleAudioEngine`, we can play sound effects; to play them, we need
    to perform only two steps, namely preload and play. Sound effects are not background
    music; note that we can play multiple sound effects but only one background score
    at the same time. In this recipe, we will explain how to play sound effects.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`SimpleAudioEngine`，我们可以播放音效；要播放它们，我们只需要执行两个步骤，即预加载和播放。音效不是背景音乐；请注意，我们可以同时播放多个音效，但只能同时播放一个背景音乐。在本食谱中，我们将解释如何播放音效。
- en: Getting ready
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: As in the case of playing background music, you have to include a header file
    for `SimpleAudioEngine`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 就像播放背景音乐一样，你必须包含`SimpleAudioEngine`的头文件。
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How to do it...
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s try to immediately play a sound effect. The audio format is changed
    depending on the operating system by using the macro that was introduced at the
    time of playing the background music. The code for playing sound effects is as
    follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们立即尝试播放一个音效。音频格式根据操作系统通过在播放背景音乐时引入的宏来改变。播放音效的代码如下：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How it works...
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The overall flow is the same as that for playing background music. You need
    to preload a sound effect file before playing it. The sound effect file is smaller
    than the background music file. So, you can preload a lot of sound effects before
    playing them.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 整体流程与播放背景音乐相同。在播放之前，您需要预加载一个音效文件。音效文件比背景音乐文件小。因此，在播放之前，您可以预加载很多音效。
- en: There's more...
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: The number of sound effects that we can play at the same time on Android is
    less than that on iOS. So, we will now explain how to increase this number for
    Android. The maximum number of simultaneous playbacks is defined in `Cocos2dxSound.java`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android 上，我们可以同时播放的音效数量少于 iOS。因此，我们现在将解释如何增加 Android 上的这个数量。最大同时播放次数在 `Cocos2dxSound.java`
    中定义。
- en: The path of `Cocos2dxSound.java` is `cocos2d/cocos/platform/android/java/src/org/cocos2dx/lib`.
    Then, in line 66, the maximum number of simultaneous playbacks is defined.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`Cocos2dxSound.java` 的路径是 `cocos2d/cocos/platform/android/java/src/org/cocos2dx/lib`。然后，在第
    66 行，定义了最大同时播放次数。'
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If we changed this value to 10, we can play 10 sound effects at the same time.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将这个值改为 10，我们就可以同时播放 10 个音效。
- en: Controlling volume, pitch, and balance
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制音量、音调和平衡
- en: You can control the volume, pitch, and balance for sound effects. The right
    blend of these three factors makes your game sound more fun.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以控制音效的音量、音调和平衡，这三个因素的恰当组合可以使游戏听起来更加有趣。
- en: How to do it...
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s try to immediately play a sound effect by controlling its volume, pitch,
    and balance. The following is the code snippet to do so:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试通过控制音量、音调和平衡立即播放一个音效。以下是一个代码片段来完成此操作：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: You can control the volume for sound effects by using the `setEffectsVolume`
    method. The maximum value for the volume is 1.0, and the minimum value is 0.0\.
    If you set the volume to 0.0, the sound effect is muted. The default value of
    the volume is 1.0.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `setEffectsVolume` 方法控制音效的音量。音量的最大值是 1.0，最小值是 0.0。如果您将音量设置为 0.0，音效将被静音。音量的默认值是
    1.0。
- en: You can play multiple sound effects at the same time, but you cannot set the
    volume for these effects individually. To change the master volume for sound effects,
    set a volume by using the `setEffectsVolume` method. If you want to change the
    volume individually, you should use a `gain` value; which we will explain later.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以同时播放多个音效，但不能单独设置这些音效的音量。要更改音效的主音量，请使用 `setEffectsVolume` 方法设置音量。如果您想单独更改音量，应使用
    `gain` 值；我们将在后面解释。
- en: 'The second argument in the `playEffect` method is the flag for continuously
    playing the sound effects. For the third and the subsequent arguments, please
    check the following table:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`playEffect` 方法中的第二个参数是连续播放音效的标志。对于第三个及以后的参数，请参考以下表格：'
- en: '| Arguments | Description | Minimum | Maximum |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 描述 | 最小值 | 最大值 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| Third argument (`pitch`) | Playing speed | 0.0 | 2.0 |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 第三个参数 (`pitch`) | 播放速度 | 0.0 | 2.0 |'
- en: '| Fourth argument (`pan`) | Balance of left and right | -1.0 | 1.0 |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 第四个参数 (`pan`) | 左右平衡 | -1.0 | 1.0 |'
- en: '| Fifth argument (`gain`) | Distance from a sound source | 0.0 | 1.0 |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 第五个参数 (`gain`) | 与音源的距离 | 0.0 | 1.0 |'
- en: The `pitch` is the quality that allows us to classify a sound as relatively
    high or low. By using this `pitch`, we can control the playing speed in the third
    argument. If you set the `pitch` to less than 1.0, the sound effect is played
    slowly. If you set it to more than 1.0, the sound effect is played quickly. If
    you set it to 1.0, the sound effect plays at the original speed. The maximum value
    of the `pitch` is 2.0\. However, you can set the `pitch` to more than 2.0 in iOS.
    On the other hand, the maximum value of the `pitch` in Android is 2.0\. Therefore,
    we adopted the maximum value as the lower.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`pitch` 是一个允许我们将声音分类为相对高音或低音的品质。通过使用这个 `pitch`，我们可以控制第三个参数中的播放速度。如果您将 `pitch`
    设置为小于 1.0，音效将缓慢播放。如果设置为大于 1.0，音效将快速播放。如果设置为 1.0，音效将以原始速度播放。`pitch` 的最大值是 2.0。然而，在
    iOS 中，您可以设置 `pitch` 大于 2.0。另一方面，Android 中 `pitch` 的最大值是 2.0。因此，我们采用了最大值作为下限。'
- en: You can change the balance of the left and the right speakers by changing the
    `pan` in the fourth argument. If you set it to -1.0, you can hear it only from
    the left speaker. If you set it to 1.0, you can hear it from only the right speaker.
    The default value is 0.0; you can hear it at the same volume from both the left
    and the right speakers. Unfortunately, you will not be able to figure out much
    difference in the speaker of the device. If you use the headphones, you can hear
    this difference.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过更改第四个参数中的`pan`来改变左右扬声器的平衡。如果你将其设置为-1.0，你只能从左扬声器听到声音。如果你将其设置为1.0，你只能从右扬声器听到声音。默认值为0.0；你可以从左右扬声器以相同的音量听到声音。不幸的是，你将无法在设备的扬声器中听到太多差异。如果你使用耳机，你可以听到这种差异。
- en: You can change the volume of each sound effect by changing the `gain` in the
    fifth argument. You can set the master volume by using the `setEffectVolume` method
    and the volume of each effect by changing the gain value. If you set it to 0.0,
    its volume is mute. If you set it to 1.0, its volume is the maximum. The final
    volume of the sound effects will be a combination of the gain value and the value
    specified in the `setEffectsVolume` method.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过更改第五个参数中的`gain`来改变每个音效的音量。你可以使用`setEffectVolume`方法设置主音量，通过改变增益值来设置每个音效的音量。如果你将其设置为0.0，则音量为静音。如果设置为1.0，则音量为最大。音效的最终音量将是增益值和`setEffectsVolume`方法中指定的值的组合。
- en: Pausing and resuming background music
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 暂停和恢复背景音乐
- en: This recipe will help you better understand the concept of pausing and resuming
    background music.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方将帮助你更好地理解暂停和恢复背景音乐的概念。
- en: How to do it...
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'It is very easy to stop or pause the background music. You don''t specify the
    argument by using these methods. The code for stopping the background music is
    as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 停止或暂停背景音乐非常简单。使用这些方法时，你不需要指定参数。停止背景音乐的代码如下：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Code for pausing:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 暂停代码：
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Code for resuming the paused background music:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 恢复暂停的背景音乐代码：
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How it works...
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: You can stop the background music that is playing by using the `stopBackgroundMusic`
    method. Alternatively, you can pause the background music by using the `pauseBackgroundMusic`
    method. Once you stop it, you can play it again by using the `playBackgroundMusic`
    method. Further, if you pause it, you can resume playing the music by using the
    `resumeBackgroundMusic` method.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`stopBackgroundMusic`方法停止正在播放的背景音乐。或者，你可以使用`pauseBackgroundMusic`方法暂停背景音乐。一旦停止，你可以使用`playBackgroundMusic`方法再次播放。此外，如果你暂停了它，你可以使用`resumeBackgroundMusic`方法恢复播放音乐。
- en: There's more...
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'You can determine whether the background music is playing by using the `isBackgroundMusicPlaying`
    method. The following code can be used for doing so:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`isBackgroundMusicPlaying`方法来确定背景音乐是否正在播放。以下代码可以用来实现这一点：
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Tip
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: However, you are required to be careful while using this method. This method
    always returns a true value that specifies the playing status in the iOS simulator.
    At line 201 of `audio/ios/CDAudioManager.m` in Cocos2d-x, if the device is the
    iOS simulator, `SimpleAudioEngine` sets the volume to zero and plays it continuously.
    That's why there is a problem in the iOS simulator. However, we tested the latest
    iOS simulator before commenting out this process and found that there was no problem.
    If you want to use this method, you should comment out this process.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在使用此方法时，你需要小心。此方法总是返回一个表示iOS模拟器中播放状态的true值。在Cocos2d-x中的`audio/ios/CDAudioManager.m`的第201行，如果设备是iOS模拟器，`SimpleAudioEngine`将音量设置为零并连续播放。这就是为什么在iOS模拟器中存在问题。然而，我们在注释掉此过程之前测试了最新的iOS模拟器，发现没有问题。如果你想使用此方法，你应该注释掉此过程。
- en: Pausing and resuming sound effects
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 暂停和恢复音效
- en: You might want to stop sound effects too. Also, you may want to pause them and
    then resume them.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还想停止音效。此外，你可能想先暂停它们，然后再恢复。
- en: How to do it...
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'It is very easy to stop or pause a sound effect. The following is the code
    for stopping it:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 停止或暂停音效非常简单。以下是将它停止的代码：
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following is the code for pausing it:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是将它暂停的代码：
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You can resume the paused code as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以这样恢复暂停的代码：
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How it works...
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '`SimpleAudioEngine` can play multiple sound effects. Therefore, you have to
    specify the sound effect if you want to stop or pause it individually. You can
    get the sound ID when you play the sound effect. You can stop, pause, or resume
    the specific sound effect by using this ID.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`SimpleAudioEngine` 可以播放多个音效。因此，如果你想单独停止或暂停某个音效，你必须指定该音效。当你播放音效时，你可以得到音效 ID。你可以使用这个
    ID 停止、暂停或恢复特定的音效。'
- en: There's more...
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'You can stop, pause, or resume all the playing sound effects. The code to do
    so is as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以停止、暂停或恢复所有正在播放的音效。执行此操作的代码如下：
- en: '[PRE14]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Playing background music and a sound effect by using AudioEngine
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 AudioEngine 播放背景音乐和音效
- en: '`AudioEngine` is a new class from Cocos2d-x version 3.3\. `SimpleAudioEngine`
    cannot play multiple background scores, but `AudioEngine` can play them. Furthermore,
    `AudioEngine` can call a callback function when it finishes playing the background
    music. In addition, we can get the playtime by using the callback function. In
    this recipe, we will learn more about the brand new `AudioEngine`.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`AudioEngine` 是从 Cocos2d-x 版本 3.3 中引入的新类。`SimpleAudioEngine` 无法播放多个背景音乐，但 `AudioEngine`
    可以。此外，`AudioEngine` 在播放背景音乐完成后可以调用回调函数。另外，我们可以通过回调函数获取播放时间。在这个菜谱中，我们将学习全新的 `AudioEngine`。'
- en: Getting ready
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We have to include the header file of `AudioEngine` to use it. Further, `AudioEngine`
    has a namespace called `experimental`. To include the header file, you will need
    to add the following code:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须包含 `AudioEngine` 的头文件才能使用它。此外，`AudioEngine` 有一个名为 `experimental` 的命名空间。为了包含头文件，你需要添加以下代码：
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How to do it...
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: '`AudioEngine` is much easier than `SimpleAudioEngine`. Its API is very simple.
    The following code can be used to play, stop, pause, and resume the background
    music.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`AudioEngine` 比起 `SimpleAudioEngine` 来说更容易使用。它的 API 非常简单。以下代码可以用来播放、停止、暂停和恢复背景音乐。'
- en: '[PRE16]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: How it works...
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '`AudioEngine` no longer needs the preload method. Further, `AudioEngine` does
    not distinguish between background music and sound effects. You can play both
    background music and sound effects by using the same method. When you play it,
    you can get a sound ID as the return value. You have to specify the sound ID when
    you change the volume, stop it, pause it, and so on.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`AudioEngine` 不再需要预加载方法。进一步来说，`AudioEngine` 不区分背景音乐和音效。你可以使用相同的方法播放两者。当你播放时，你可以得到一个作为返回值的音效
    ID。当你改变音量、停止、暂停等操作时，你必须指定这个音效 ID。'
- en: There's more...
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: If you want to unload audio files from the memory, you can `uncache` by using
    the `AudioEngine::uncache` method or the `AudioEngine::uncacheAll` method. In
    the case of the `uncache` method, you have to specify the path that you want to
    unload. In the case of the `uncacheAll` method, all audio data is unloaded from
    the memory. While unloading files, you have to stop the related music and sound
    effects.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要从内存中卸载音频文件，你可以通过使用 `AudioEngine::uncache` 方法或 `AudioEngine::uncacheAll`
    方法来 `uncache`。在使用 `uncache` 方法的情况下，你必须指定你想要卸载的路径。在使用 `uncacheAll` 方法的情况下，所有音频数据都会从内存中卸载。在卸载文件时，你必须停止相关的音乐和音效。
- en: Playing movies
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 播放电影
- en: You might want to play a movie in your game in order to enrich the representation.
    Cocos2d-x provides a `VideoPlayer` class for this purpose. This class makes it
    easy to play a movie; however, it is still an `experimental` class. So, you have
    to be very careful while using it.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想在游戏中播放电影以丰富表现。Cocos2d-x 提供了一个 `VideoPlayer` 类来实现这个目的。这个类使得播放电影变得简单；然而，它仍然是一个
    `experimental` 类。所以，在使用它时你必须非常小心。
- en: Getting ready
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You have to prepare something before using the `VideoPlayer` class.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 `VideoPlayer` 类之前，你必须做一些准备工作。
- en: You have to add the movie file to the `Resources/res` folder. In this case,
    we add the video called `splash.mp4`.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你必须将电影文件添加到 `Resources/res` 文件夹中。在这个例子中，我们添加了名为 `splash.mp4` 的视频。
- en: 'Next, you have to including a header file. The code to do so is as follows:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，你必须包含一个头文件。执行此操作的代码如下：
- en: '[PRE17]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Then, you have to add the following code to the `proj.android/jni/Android.mk`
    file for building an Android application.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，你必须向 `proj.android/jni/Android.mk` 文件添加以下代码以构建 Android 应用程序。
- en: '[PRE18]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In Xcode, you have to add `MediaPlayer.framework` for iOS, as shown in the
    following image:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Xcode 中，你必须为 iOS 添加 `MediaPlayer.framework`，如下面的图片所示：
- en: '![Getting ready](img/B0561_06_01.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/B0561_06_01.jpg)'
- en: How to do it...
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s try to play the video in your game. Here, it is:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试在你的游戏中播放视频。这里就是：
- en: '[PRE19]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: How it works...
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Basically, the `VideoPlayer` class is the same as the other nodes. First, you
    create an instance, specify its location, and then add it on a layer. Next, you
    set the content size by using the `setContentSize` method. If you set a false
    value by using the `setKeepAspectRatioEnabled` method, the video player's size
    becomes equal to the content size that you specify by using the `setContentSize`
    method. In contrast, if you set a true value, the video player retains the aspect
    ratio for the movie.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，`VideoPlayer` 类与其他节点相同。首先，你创建一个实例，指定其位置，然后将其添加到图层上。接下来，通过使用 `setContentSize`
    方法设置内容大小。如果你通过使用 `setKeepAspectRatioEnabled` 方法设置一个假值，视频播放器的尺寸将等于你通过 `setContentSize`
    方法指定的内容大小。相反，如果你设置一个真值，视频播放器将保留电影的宽高比。
- en: You can get the event of the playing status by adding an event listener. `VideoPlayer::EventType`
    has four types of events, namely `PLAYING`, `PAUSED`, `STOPPED`, and `COMPLETED`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过添加事件监听器来获取播放状态的事件。`VideoPlayer::EventType` 有四种类型的事件，分别是 `PLAYING`、`PAUSED`、`STOPPED`
    和 `COMPLETED`。
- en: Finally, you set the movie file by using the `setFileName` method and you can
    play it by using the `play` method.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你通过使用 `setFileName` 方法设置电影文件，并通过使用 `play` 方法播放它。
- en: Tip
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: There are a lot of video formats. However, the video format that you can play
    on both iOS and Android is mp4\. That's why you should use the mp4 format to play
    videos in your games.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 视频格式有很多。然而，你可以在 iOS 和 Android 上播放的视频格式是 mp4。这就是为什么你应该使用 mp4 格式在你的游戏中播放视频。
