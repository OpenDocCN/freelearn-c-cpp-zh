["```cpp\ntexturepacker foo_*.png --format cocos2d --data hoge.plist --sheet hoge.png\n```", "```cpp\ntexturepacker --help\n```", "```cpp\n    bool HelloWorld::init()\n    {\n        if ( !Layer::init() )\n        {\n            return false;\n        }\n        Vec2 origin = Director::getInstance()- >getVisibleOrigin();\n        _map = TMXTiledMap::create(\"res/desert.tmx\");\n        _map->setPosition(Vec2()+origin);\n        this->addChild(_map);\n\n        return true;\n    }\n    ```", "```cpp\n_map = TMXTiledMap::create(\"res/desert.tmx\");\n_map->setPosition(Vec2()+origin);\nthis->addChild(_map);\n```", "```cpp\n    auto touchListener = EventListenerTouchOneByOne::create();\n    touchListener->onTouchBegan = CC_CALLBACK_2(HelloWorld::onTouchBegan, this);\n    touchListener->onTouchEnded = CC_CALLBACK_2(HelloWorld::onTouchEnded, this);\n    _eventDispatcher- >addEventListenerWithSceneGraphPriority(touchListener, this);\n    ```", "```cpp\n    bool onTouchBegan(cocos2d::Touch* touch, cocos2d::Event* event);\n    void onTouchEnded(cocos2d::Touch* touch, cocos2d::Event* event);\n    void update(float dt);\n    cocos2d::Vec2 _location;\n    cocos2d::TMXTiledMap* _map;\n    ```", "```cpp\n    bool HelloWorld::onTouchBegan(Touch* touch, Event* event)\n    {\n        return true;\n    }\n\n    void HelloWorld::onTouchEnded(Touch* touch, Event* event)\n    {\n        auto size = Director::getInstance()->getVisibleSize();\n        auto origin = Director::getInstance()- >getVisibleOrigin();\n        auto center = Vec2(size/2)+origin;\n        _location = touch->getLocation() - center;\n        _location.x = floorf(_location.x);\n        _location.y = floorf(_location.y);\n        this->scheduleUpdate();\n    }\n    ```", "```cpp\n    void HelloWorld::update(float dt)\n    {\n        auto mapSize = _map->getContentSize();\n        auto winSize = Director::getInstance()- >getVisibleSize();\n        auto origin = Director::getInstance()- >getVisibleOrigin();\n\n        auto currentLocation = _map->getPosition();\n        if (_location.x > 0) {\n            currentLocation.x--;\n            _location.x--;\n        } else if (_location.x < 0) {\n            currentLocation.x++;\n            _location.x++;\n        }\n        if (_location.y > 0) {\n            currentLocation.y--;\n            _location.y--;\n        } else if (_location.y < 0) {\n            currentLocation.y++;\n            _location.y++;\n        }\n\n        if (currentLocation.x > origin.x) {\n            currentLocation.x = origin.x;\n        } else if (currentLocation.x < winSize.width + origin.x - mapSize.width) {\n            currentLocation.x = winSize.width + origin.x - mapSize.width;}\n        if (currentLocation.y > origin.y) {\n            currentLocation.y = origin.y;\n        } else if (currentLocation.y < winSize.height + origin.y - mapSize.height) {currentLocation.y = winSize.height + origin.y - mapSize.height;}\n\n        _map->setPosition(currentLocation);\n        if (fabsf(_location.x)<1.0f && fabsf(_location.y)<1.0f) {\n            this->unscheduleUpdate();\n        }\n    }\n    ```", "```cpp\n    bool HelloWorld::init()\n    {\n        if ( !Layer::init() )\n        {\n            return false;\n        }\n        Vec2 origin = Director::getInstance()->getVisibleOrigin();\n        _map = TMXTiledMap::create(\"res/desert.tmx\");\n        _map->setPosition(Vec2()+origin);\n        this->addChild(_map);\n\n        auto touchListener = EventListenerTouchOneByOne::create();\n        touchListener->onTouchBegan = CC_CALLBACK_2(HelloWorld::onTouchBegan, this);\n        _eventDispatcher- >addEventListenerWithSceneGraphPriority(touchListener, this);\n\n        return true;\n    }\n    ```", "```cpp\n    Vec2 HelloWorld::getTilePosition(Vec2 point)\n    {\n        auto mapContentSize = _map->getContentSize();\n        auto tilePoint = point - _map->getPosition();\n        auto tileSize = _map->getTileSize();\n        auto mapRowCol = _map->getMapSize();\n        auto scale = mapContentSize.width / (mapRowCol.width * tileSize.width);\n        tilePoint.x = floorf(tilePoint.x / (tileSize.width * scale));\n        tilePoint.y = floorf((mapContentSize.height - tilePoint.y)/(tileSize.height*scale));\n        return tilePoint;\n    }\n    ```", "```cpp\n    bool HelloWorld::onTouchBegan(Touch* touch, Event* event)\n    {\n        auto touchPoint = touch->getLocation();\n        auto tilePoint = this->getTilePosition(touchPoint);\n        TMXLayer* groundLayer = _map->getLayer(\"Ground\");\n        int gid = groundLayer->getTileGIDAt(tilePoint);\n        if (gid!=0) {\n            auto properties = _map- >getPropertiesForGID(gid).asValueMap();\n            if (properties.find(\"isTree\")!=properties.end()) {\n                if(properties.at(\"isTree\").asBool()) {\n                    CCLOG(\"it's tree!\");\n                }\n            }\n        }\n        return true;\n    }\n    ```", "```cpp\n    auto mapContentSize = _map->getContentSize();\n    ```", "```cpp\n    auto tilePoint = point - _map->getPosition();\n    ```", "```cpp\n    auto tileSize = _map->getTileSize();\n    ```", "```cpp\n    auto mapRowCol = _map->getMapSize();\n    ```", "```cpp\n    auto scale = mapContentSize.width / (mapRowCol.width * tileSize.width);\n    ```", "```cpp\n    tilePoint.x = floorf(tilePoint.x / (tileSize.width * scale));\n    tilePoint.y = floorf((mapContentSize.height - tilePoint.y)/(tileSize.height*scale));\n    ```", "```cpp\n    auto touchPoint = touch->getLocation();\n    auto tilePoint = this->getTilePosition(touchPoint);\n    ```", "```cpp\n    TMXLayer* groundLayer = _map->getLayer(\"Ground\");\n    ```", "```cpp\n    int gid = groundLayer->getTileGIDAt(tilePoint);\n    ```", "```cpp\n    auto properties = _map->getPropertiesForGID(gid).asValueMap();\n    if (properties.find(\"isTree\")!=properties.end()) {\n        if(properties.at(\"isTree\").asBool()) {\n            CCLOG(\"it's tree!\");\n        }\n    }\n    ```", "```cpp\n    #include \"PhysicsShapeCache.h\"\n    ```", "```cpp\n    Scene* HelloWorld::createScene()\n    {\n        auto scene = Scene::createWithPhysics();\n        auto layer = HelloWorld::create();\n        PhysicsWorld* world = scene->getPhysicsWorld();\n        world->setDebugDrawMask(PhysicsWorld::DEBUGDRAW_ALL);\n        scene->addChild(layer);\n        return scene;\n    }\n    ```", "```cpp\n    bool HelloWorld::init()\n    {\n        if ( !Layer::init() )\n        {\n            return false;\n        }\n\n        Size visibleSize = Director::getInstance()->getVisibleSize();\n        Vec2 origin = Director::getInstance()->getVisibleOrigin();\n\n        auto wall = Node::create();\n        auto wallBody = PhysicsBody::createEdgeBox(visibleSize, PhysicsMaterial(0.1f, 1.0f, 0.0f));\n        wallBody->setContactTestBitmask(true);\n        wall->setPhysicsBody(wallBody);\n        wall->setPosition(Vec2(visibleSize/2)+origin);\n        this->addChild(wall);\n\n        auto touchListener = EventListenerTouchOneByOne::create();\n        touchListener->onTouchBegan = CC_CALLBACK_2(HelloWorld::onTouchBegan, this);\n        _eventDispatcher- >addEventListenerWithSceneGraphPriority(touchListener, this);\n\n        PhysicsShapeCache::getInstance()- >addShapesWithFile(\"res/gear.plist\");\n\n        return true;\n    }\n    ```", "```cpp\n    bool HelloWorld::onTouchBegan(Touch* touch, Event* event)\n    {\n        auto touchPoint = touch->getLocation();\n        auto body = PhysicsShapeCache::getInstance()- >createBodyWithName(\"gear\");\n        auto sprite = Sprite::create(\"res/gear.png\");\n        sprite->setPhysicsBody(body);\n        sprite->setPosition(touchPoint);\n        this->addChild(sprite);\n        return true;\n    }\n    ```", "```cpp\n    auto scene = Scene::createWithPhysics();\n    auto layer = HelloWorld::create();\n    PhysicsWorld* world = scene->getPhysicsWorld();\n    world->setDebugDrawMask(PhysicsWorld::DEBUGDRAW_ALL);\n    ```", "```cpp\n    auto wall = Node::create();\n    auto wallBody = PhysicsBody::createEdgeBox(visibleSize, PhysicsMaterial(0.1f, 1.0f, 0.0f));\n    wallBody->setContactTestBitmask(true);\n    wall->setPhysicsBody(wallBody);\n    wall->setPosition(Vec2(visibleSize/2)+origin);\n    this->addChild(wall);\n    ```", "```cpp\n    PhysicsShapeCache::getInstance()- >addShapesWithFile(\"res/gear.plist\");\n    ```", "```cpp\n    auto body = PhysicsShapeCache::getInstance()- >createBodyWithName(\"gear\");\n    ```", "```cpp\n    auto label = Label::createWithBMFont(\"fonts/arcade.fnt\", \"Cocos2d-x\");\n    label->setPosition(Vec2(visibleSize/2)+origin);\n    this->addChild(label);\n    ```"]