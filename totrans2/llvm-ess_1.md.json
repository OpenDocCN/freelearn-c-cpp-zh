["```cpp\n$ cat add.c\nint globvar = 12;\n\nint add(int a) {\nreturn globvar + a;\n}\n\n```", "```cpp\n$ clang -emit-llvm -c -S add.c\n$ cat add.ll\n; ModuleID = 'add.c'\ntarget datalayout = \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n@globvar = global i32 12, align 4\n\n; Function Attrs: nounwind uwtable\ndefine i32 @add(i32 %a) #0 {\n %1 = alloca i32, align 4\n store i32 %a, i32* %1, align 4\n %2 = load i32, i32* @globvar, align 4\n %3 = load i32, i32* %1, align 4\n %4 = add nsw i32 %2, %3\n ret i32 %4\n}\n\nattributes #0 = { nounwind uwtable \"less-precise-fpmad\"=\"false\" \"no-frame-pointer-elim\"=\"true\" \"no-frame-pointer-elim-non-leaf\" \"no-infs-fp-math\"=\"false\" \"no-nans-fp-math\"=\"false\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"unsafe-fp-math\"=\"false\" \"use-soft-float\"=\"false\" }\n\n!llvm.ident = !{!0}\n\n```", "```cpp\n    %1 = some value\n\n    ```", "```cpp\n    %2 = alloca i32\n\n    ```", "```cpp\n    $ llvm-as add.ll –o add.bc\n\n    ```", "```cpp\n    $ hexdump –c add.bc\n\n    ```", "```cpp\n    $ llvm-dis add.bc –o add.ll\n\n    ```", "```cpp\n    $ cat main.c\n    #include<stdio.h>\n\n    extern int add(int);\n\n    int main() {\n    int a = add(2);\n    printf(\"%d\\n\",a);\n    return 0;\n    }\n\n    ```", "```cpp\n    $ clang -emit-llvm -c main.c\n\n    ```", "```cpp\n    $ llvm-link main.bc add.bc -o output.bc\n\n    ```", "```cpp\n    $ lli output.bc\n    14\n\n    ```", "```cpp\n    $ llc output.bc –o output.s\n\n    ```", "```cpp\n    Function main:\n      .type  main,@function\n    main:                                   # @main\n      .cfi_startproc\n    # BB#0:\n      pushq  %rbp\n    .Ltmp0:\n      .cfi_def_cfa_offset 16\n    .Ltmp1:\n      .cfi_offset %rbp, -16\n      movq  %rsp, %rbp\n    .Ltmp2:\n      .cfi_def_cfa_register %rbp\n      subq  $16, %rsp\n      movl  $0, -4(%rbp)\n      movl  $2, %edi\n      callq  add\n      movl  %eax, %ecx\n      movl  %ecx, -8(%rbp)\n      movl  $.L.str, %edi\n      xorl  %eax, %eax\n      movl  %ecx, %esi\n      callq  printf\n      xorl  %eax, %eax\n      addq  $16, %rsp\n      popq  %rbp\n      retq\n    .Lfunc_end0:\n\n    Function: add\n    add:                                    # @add\n      .cfi_startproc\n    # BB#0:\n      pushq  %rbp\n    .Ltmp3:\n      .cfi_def_cfa_offset 16\n    .Ltmp4:\n      .cfi_offset %rbp, -16\n      movq  %rsp, %rbp\n    .Ltmp5:\n      .cfi_def_cfa_register %rbp\n      movl  %edi, -4(%rbp)\n      addl  globvar(%rip), %edi\n      movl  %edi, %eax\n      popq  %rbp\n      retq\n    .Lfunc_end1:\n    ```"]