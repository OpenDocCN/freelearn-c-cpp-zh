["```cpp\nclass GameObject\n{\npublic:\n\n  void draw() { std::cout << \"draw game object\"; }\n  void update() { std::cout << \"update game object\"; }\n  void clean() { std::cout << \"clean game object\"; }\n\nprotected:\n\n  int m_x;\n  int m_y;\n};\n```", "```cpp\nclass Player : public GameObject // inherit from GameObject\n{\npublic:\n\n  void draw()\n  {\n    GameObject::draw();\n    std::cout << \"draw player\";\n  }\n  void update()\n  {\n    std::cout << \"update player\";\n    m_x = 10;\n    m_y = 20;\n  }\n  void clean()\n  {\n    GameObject::clean();\n    std::cout << \"clean player\";\n  }\n};\n```", "```cpp\nvoid update()\n{\n  std::cout << \"update player\";\n  m_x = 10;\n  m_y = 20;\n}\n```", "```cpp\nvoid draw()\n{\n  GameObject::draw();\n  std::cout << \"draw player\";\n}\n```", "```cpp\nclass GameObject\n{\npublic:\n\n  void load(int x, int y, int width, int height, std::string \n  textureID);\n  void draw(SDL_Renderer* pRenderer);\n  void update();\n  void clean();\n\nprotected:\n\n  std::string m_textureID;\n\n  int m_currentFrame;\n  int m_currentRow;\n\n  int m_x;\n  int m_y;\n\n  int m_width;\n  int m_height;\n};\n```", "```cpp\nvoid GameObject::load(int x, int y, int width, int height, std::string textureID)\n{\n  m_x = x;\n  m_y = y;\n  m_width = width;\n  m_height = height;\n  m_textureID = textureID;\n\n  m_currentRow = 1;\n  m_currentFrame = 1;\n}\n```", "```cpp\nvoid GameObject::draw(SDL_Renderer* pRenderer)\n{\n  TextureManager::Instance()->drawFrame(m_textureID, m_x, m_y, \n  m_width, m_height, m_currentRow, m_currentFrame, pRenderer);\n}\n```", "```cpp\nvoid GameObject::update()\n{\n  m_x += 1;\n}\n```", "```cpp\n#include \"GameObject.h\"\n\nclass Player : public GameObject\n{\npublic:\n\n  void load(int x, int y, int width, int height, std::string \n  textureID);\n  void draw(SDL_Renderer* pRenderer);\n  void update();\n  void clean();\n};\n```", "```cpp\nvoid Player::load(int x, int y, int width, int height, string textureID)\n{\n  GameObject::load(x, y, width, height, textureID);\n}\n```", "```cpp\nvoid Player::draw(SDL_Renderer* pRenderer)\n{\n  GameObject::draw(pRenderer);\n}\n```", "```cpp\nvoid Player::update()\n{\n  m_x -= 1;\n}\n```", "```cpp\nGameObject m_go;\nPlayer m_player;\n```", "```cpp\nm_go.load(100, 100, 128, 82, \"animate\");\nm_player.load(300, 300, 128, 82, \"animate\");\n```", "```cpp\nvoid Game::render()\n{\n\n  SDL_RenderClear(m_pRenderer); // clear to the draw colour\n\n  m_go.draw(m_pRenderer);\n  m_player.draw(m_pRenderer);\n\n  SDL_RenderPresent(m_pRenderer); // draw to the screen\n\n}\n\nvoid Game::update()\n{\n  m_go.update();\n  m_player.update();\n}\n```", "```cpp\nwhile(g_game->running())\n{\n  g_game->handleEvents();\n  g_game->update();\n  g_game->render();\n\n  SDL_Delay(10); // add the delay\n}\n```", "```cpp\nstd::vector<GameObject*> m_gameObjects;\n```", "```cpp\nGameObject* m_player;\nGameObject* m_enemy1;\nGameObject* m_enemy2;\nGameObject* m_enemy3;\n```", "```cpp\nm_player = new Player();\nm_enemy1 = new Enemy();\nm_enemy2 = new Enemy();\nm_enemy3 = new Enemy();\n```", "```cpp\nm_gameObjects.push_back(m_player);\nm_gameObjects.push_back(m_enemy1);\nm_gameObjects.push_back(m_enemy2);\nm_gameObjects.push_back(m_enemy3);\n```", "```cpp\nvoid Game::draw()\n{\n  for(std::vector<GameObject*>::size_type i = 0; i != \n  m_gameObjects.size(); i++) \n  {\n    m_gameObjects[i]->draw(m_pRenderer);\n  }\n}\n```", "```cpp\n    class GameObject\n    {\n    public:\n\n      virtual void load(int x, int y, int width, int height, \n      std::string textureID);\n      virtual void draw(SDL_Renderer* pRenderer);\n      virtual void update();\n      virtual void clean();\n\n    protected:\n\n      std::string m_textureID;\n\n      int m_currentFrame;\n      int m_currentRow;\n\n      int m_x;\n      int m_y;\n\n      int m_width;\n      int m_height;\n    };\n    ```", "```cpp\nvoid Game::draw()\n{\n  for(std::vector<GameObject*>::size_type i = 0; i != \n  m_gameObjects.size(); i++) \n  {\n    m_gameObjects[i]->draw(m_pRenderer);  \n  }\n}\n```", "```cpp\nGameObject* m_go;\nGameObject* m_player;\n```", "```cpp\nstd::vector<GameObject*> m_gameObjects;\n```", "```cpp\nm_go = new GameObject();\nm_player = new Player();\n\nm_go->load(100, 100, 128, 82, \"animate\");\nm_player->load(300, 300, 128, 82, \"animate\");\n\nm_gameObjects.push_back(m_go);\nm_gameObjects.push_back(m_player);\n```", "```cpp\nvoid Game::render()\n{\n\n  SDL_RenderClear(m_pRenderer); // clear to the draw colour\n\n  // loop through our objects and draw them\n  for(std::vector<GameObject*>::size_type i = 0; i != \n  m_gameObjects.size(); i++)\n  {\n    m_gameObjects[i]->draw(m_pRenderer);\n  }\n\n  SDL_RenderPresent(m_pRenderer); // draw to the screen\n\n}\n\nvoid Game::update()\n{\n  // loop through and update our objects\n  for(std::vector<GameObject*>::size_type i = 0; i != \n  m_gameObjects.size(); i++)\n  {\n    m_gameObjects[i]->update();\n  }\n}\n```", "```cpp\nclass Enemy : public GameObject\n{\npublic:\n\n  void load(int x, int y, int width, int height, std::string \n  textureID);\n  void draw(SDL_Renderer* pRenderer);\n  void update();\n  void clean();\n};\n```", "```cpp\nvoid Enemy::update()\n{\n  m_y += 1;\n  m_x += 1;\n  m_currentFrame = int(((SDL_GetTicks() / 100) % 6));\n}\n```", "```cpp\nGameObject* m_enemy;\n```", "```cpp\nm_enemy = new Enemy();\nm_enemy->load(0, 0, 128, 82, \"animate\");\nm_gameObjects.push_back(m_enemy);\n```", "```cpp\nclass GameObject\n{\npublic:\n\n  virtual void draw()=0;\n  virtual void update()=0;\n  virtual void clean()=0;\n\nprotected:\n\n  GameObject(const LoaderParams* pParams) {}\n  virtual ~GameObject() {}\n};\n```", "```cpp\nclass LoaderParams\n{\npublic:\n\n  LoaderParams(int x, int y, int width, int height, std::string \n  textureID) : m_x(x), m_y(y), m_width(width), m_height(height), \n  m_textureID(textureID)\n  {\n\n  }\n\n  int getX() const { return m_x; }\n  int getY() const { return m_y; }\n  int getWidth() const { return m_width; }\n  int getHeight() const { return m_height; }\n  std::string getTextureID() const { return m_textureID; }\n\nprivate:\n\n  int m_x;\n  int m_y;\n\n  int m_width;\n  int m_height;\n\n  std::string m_textureID;\n};\n```", "```cpp\n// create the public instance function\nstatic Game* Instance()\n{\n  if(s_pInstance == 0)\n  {\n    s_pInstance = new Game();\n    return s_pInstance;\n  }\n\n  return s_pInstance;\n}\n// make the constructor private\nprivate:\n\n  Game();\n// create the s_pInstance member variable\n  static Game* s_pInstance;\n\n// create the typedef\n  typedef Game TheGame;\n```", "```cpp\nGame* Game::s_pInstance = 0;\n```", "```cpp\nSDL_Renderer* getRenderer() const { return m_pRenderer; }\n```", "```cpp\nint main(int argc, char* argv[])\n{\n  std::cout << \"game init attempt...\\n\";\n  if(TheGame::Instance()->init(\"Chapter 1\", 100, 100, 640, 480, \n  false))\n  {\n    std::cout << \"game init success!\\n\";\n    while(TheGame::Instance()->running())\n    {\n      TheGame::Instance()->handleEvents();\n      TheGame::Instance()->update();\n      TheGame::Instance()->render();\n\n      SDL_Delay(10);\n    }\n  }\n  else\n  {\n    std::cout << \"game init failure - \" << SDL_GetError() << \"\\n\";\n    return -1;\n  }\n\n  std::cout << \"game closing...\\n\";\n  TheGame::Instance()->clean();\n\n  return 0;\n}\n```", "```cpp\nclass SDLGameObject : public GameObject\n{\npublic:\n\n  SDLGameObject(const LoaderParams* pParams);\n\n  virtual void draw();\n  virtual void update();\n  virtual void clean();\n\nprotected:\n\n  int m_x;\n  int m_y;\n\n  int m_width;\n  int m_height;\n\n  int m_currentRow;\n  int m_currentFrame;\n\n  std::string m_textureID;\n};\n```", "```cpp\nSDLGameObject::SDLGameObject(const LoaderParams* pParams) : \nGameObject(pParams)\n{\n  m_x = pParams->getX();\n  m_y = pParams->getY();\n  m_width = pParams->getWidth();\n  m_height = pParams->getHeight();\n  m_textureID = pParams->getTextureID();\n\n  m_currentRow = 1;\n  m_currentFrame = 1;\n}\n```", "```cpp\nvoid SDLGameObject::draw()\n{\n  TextureManager::Instance()->drawFrame(m_textureID, m_x, m_y, \n  m_width, m_height, m_currentRow, m_currentFrame, \n  TheGame::Instance()->getRenderer());\n}\n```", "```cpp\nclass Player : public SDLGameObject\n{\npublic:\n\n  Player(const LoaderParams* pParams);\n\n  virtual void draw();\n  virtual void update();\n  virtual void clean();\n};\n// Enemy class\nclass Enemy : public SDLGameObject\n{\npublic:\n\n  Enemy(const LoaderParams* pParams);\n\n  virtual void draw();\n  virtual void update();\n  virtual void clean();\n};\n```", "```cpp\nPlayer::Player(const LoaderParams* pParams) : \nSDLGameObject(pParams)\n{\n\n}\n\nvoid Player::draw()\n{\n  SDLGameObject::draw(); // we now use SDLGameObject\n}\n\nvoid Player::update()\n{\n  m_x -= 1;\n  m_currentFrame = int(((SDL_GetTicks() / 100) % 6));\n}\n\nvoid Player::clean()\n{\n}\n```", "```cpp\nm_gameObjects.push_back(new Player(new LoaderParams(100, 100, 128, 82, \"animate\")));\n\nm_gameObjects.push_back(new Enemy(new LoaderParams(300, 300, 128, 82, \"animate\")));\n```"]