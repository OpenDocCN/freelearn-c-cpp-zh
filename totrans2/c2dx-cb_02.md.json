["```cpp\nbool HelloWorld::init()\n{\n    if ( !Layer::init() )\n    {\n        return false;\n    }\n    Size size = Director::getInstance()->getWinSize();\n    auto sprite = Sprite::create(\"res/run_01.png\");\n   sprite->setPosition(Vec2(size.width/2, size.height/2));\n    this->addChild(sprite);\n    return true;\n}\n```", "```cpp\nsprite->setPosition(Vec2(100, 200));\n\n```", "```cpp\nsprite->setPosition(size/2);\n\n```", "```cpp\nsprite->removeFromParent();\n\n```", "```cpp\nVec2 point = sprite->getPosition();\nfloat x = point.x;\nfloat y = point.y;\n\n```", "```cpp\nSize size = sprite->getContentSize();\nfloat width = size.width;\nfloat height = size.height;\n\n```", "```cpp\nsprite->setAnchorPoint(Vec2(0.5, 0.5));\n\n```", "```cpp\nsprite->setAnchorPoint(Vec2(0.0, 0.0));\n\n```", "```cpp\nsprite->setAnchorPoint(Vec2(1.0, 0.0));\n\n```", "```cpp\nsprite->setAnchorPoint(Vec2(0.0, 1.0));\n\n```", "```cpp\nsprite->setAnchorPoint(Vec2(1.0, 1.0));\n\n```", "```cpp\nRect rect = sprite->getBoundingBox();\nSize size = rect.size;\nVec2 point = rect.origin;\n\n```", "```cpp\nsprite->setRotation(30.0f);\n\n```", "```cpp\nfloat rotation = sprite->getRotation();\n\n```", "```cpp\nsprite->setScale(0.5f);\n\n```", "```cpp\nsprite->setScaleX(0.5f);\n\n```", "```cpp\nsprite->setScaleY(0.5f);\n\n```", "```cpp\nsprite->setScale(2.0f, 0.5f);\n\n```", "```cpp\nsprite->setSkewX(20.0f);\n\n```", "```cpp\nsprite->setSkewY(20.0f);\n\n```", "```cpp\nsprite->setColor(Color3b(255, 0, 0));\n\n```", "```cpp\nsprite->setOpacity(100);\n\n```", "```cpp\nsprite->setVisible(false);\n\n```", "```cpp\nif (sprite->isVisible()) {\n    // visible\n} else {\n    // invisible\n}\n```", "```cpp\nColor3B::WHITE\nColor3B::YELLOW\nColor3B::BLUE\nColor3B::GREEN\nColor3B::RED\nColor3B::MAGENTA\nColor3B::BLACK\nColor3B::ORANGE\nColor3B::GRAY\n```", "```cpp\nauto animation = Animation::create();\nfor (int i=1; i<=8; i++) {  // from run_01.png to run_08.png\n    std::string name = StringUtils::format(\"res/run_%02d.png\", i);\n    animation->addSpriteFrameWithFile(name.c_str());\n}\nanimation->setDelayPerUnit(0.1f);\nanimation->setRestoreOriginalFrame(true);\nanimation->setLoops(10);\nauto action = Animate::create(animation);\nsprite->runAction(action);\n```", "```cpp\nint i = 100;\nstd::string int_string = StringUtils::toString(i);\nCCLOG(\"%s \", int_string.c_str());\nfloat j = 123.4f;\nstd::string float_string = StringUtils::toString(j);\nCCLOG(\"%s\", float_string.c_str());\n```", "```cpp\nanimation->setLoops(-1);\n\n```", "```cpp\nauto rect = Rect::ZERO;\nrect.size = sprite->getContentSize();\nVector<AnimationFrame*> frames;\nfor (int i=1; i<=8; i++) {\n    std::string name = StringUtils::format(\"res/run_%02d.png\", i);\n    auto frame = SpriteFrame::create(name.c_str(), rect);\n    ValueMap info;\n    auto animationFrame = AnimationFrame::create(frame, i, info);\n    frames.pushBack(animationFrame);\n}\nauto animation = Animation::create(frames, 0.1f);\nanimation->setDelayPerUnit(0.1f);\nanimation->setRestoreOriginalFrame(true);\nanimation->setLoops(-1);\nauto action = Animate::create(animation);\nsprite->runAction(action);\n```", "```cpp\nauto move = MoveBy::create(2.0f, Vec2(100, 100));\nsprite->runAction(move);\n```", "```cpp\nauto move = MoveTo::create(2.0f, Vec2(100, 100));\nsprite->runAction(move);\n```", "```cpp\nauto scale = ScaleBy::create(2.0f, 3.0f);\nsprite->runAction(scale);\n```", "```cpp\nauto scale = ScaleBy::create(2.0f, 5.0f, 3.0f);\nsprite->runAction(scale);\n```", "```cpp\nauto scale = ScaleTo::create(2.0f, 3.0f);\nsprite->runAction(scale);\n```", "```cpp\nauto scale = ScaleTo::create(2.0f, 5.0f, 3.0f);\nsprite->runAction(scale);\n```", "```cpp\nauto jump = JumpBy::create(2.0f, Vec2(20, 20), 20.0f, 3);\nsprite->runAction(jump);\n```", "```cpp\nauto jump = JumpTo::create(2.0f, Vec2(20, 20), 20.0f, 3);\nsprite->runAction(jump);\n```", "```cpp\nauto rotate = RotateBy::create(2.0f, 40.0f);\nsprite->runAction(rotate);\n```", "```cpp\nauto rotate = RotateTo::create(2.0f, -40.0f);\nsprite->runAction(rotate);\n```", "```cpp\nauto blink = RotateTo::create(2.0f, -40.0f);\nsprite->runAction(blink);\n```", "```cpp\nauto fadein = FadeIn::create(2.0f);\nsprite->runAction(fadein);\n```", "```cpp\nauto fadeout = FadeOut::create(2.0f);\nsprite->runAction(fadeout);\n```", "```cpp\nauto skew = SkewBy::create(2.0f, 45.0f, 30.0f);\nsprite->runAction(skew);\n```", "```cpp\nauto skew = SkewTo::create(2.0f, 45.0f, 30.0f);\nsprite->runAction(skew);\n```", "```cpp\nauto tint = TintBy::create(2.0f, 100.0f, 100.0f, 100.0f);\nsprite->runAction(tint);\n```", "```cpp\nauto tint = TintTo:: create(2.0f, 100.0f, 100.0f, 100.0f);\nsprite->runAction(tint);\n```", "```cpp\nauto moveTo = MoveTo::create(2.0f, Vec2(100, 100));\nauto action = sprite->runAction(moveTo);\nsprite->stopAction(action);\n```", "```cpp\nauto move = MoveBy::create(2.0f, Vec2(100, 0));\nauto rotate = RotateBy::create(2.0f, 360.0f);\nauto action = Sequence::create(move, rotate, nullptr);\nsprite->runAction(action);\n```", "```cpp\nauto move = MoveBy::create(2.0f, Vec2(100, 0));\nauto rotate = RotateBy::create(2.0f, 360.0f);\nauto action = Spawn::create(move, rotate, nullptr);\nsprite->runAction(action);\n```", "```cpp\nauto rotate = RotateBy::create(2.0f, 360.0f);\nauto action = Repeat::create(rotate, 5);\nsprite->runAction(action);\n```", "```cpp\nauto rotate = RotateBy::create(2.0f, 360.0f);\nauto action = RepeatForever::create(rotate);\nsprite->runAction(action);\n```", "```cpp\nauto move = MoveBy::create(2.0f, Vec2(100, 0));\nauto action = Sequence::create(move, move->reverse(), nullptr);\nsprite->runAction(action);\n```", "```cpp\nauto move = MoveBy::create(2.0f, Vec2(100, 0));\nauto rotate = RotateBy::create(2.0f, 360.0f);\nauto sequence = Sequence::create(move, rotate, nullptr);\nauto action = Sequence::create(sequence, sequence->reverse(), nullptr);\nsprite->runAction(action);\n```", "```cpp\nauto move = MoveBy::create(2.0f, Vec2(100, 0));\nauto delay = DelayTime::create(2.0f);\nauto rotate = RotateBy::create(2.0f, 360.0f);\nauto action = Sequence::create(move, delay, rotate, nullptr);\nsprite->runAction(action);\n```", "```cpp\nMoveBy* MoveBy::reverse() const\n{\n    return MoveBy::create(_duration, -_positionDelta);\n}\n```", "```cpp\nauto move = MoveBy::create(2.0f, Vec2(100, 0));\nauto rotate = RotateBy::create(2.0f, 360.0f); \nsprite->runAction(move);\nsprite->runAction(rotate);\n```", "```cpp\nauto move = MoveBy::create(2.0f, Vec2(100, 0));\nauto rotate = RotateBy::create(2.0f, 360.0f); \nauto fadeout = FadeOut::create(2.0f);\nauto spawn = Spawn::create(rotate, fadeout, nullptr);\nauto fadein = FadeIn::create(2.0f);\nauto action = Sequence::create(move, spawn, fadein, nullptr);\nsprite->runAction(action);\n```", "```cpp\nauto move = MoveBy::create(2.0f, Vec2(100, 0));\nauto rotate = RotateBy::create(2.0f, 360.0f);\nauto func = CallFunc::create([](){\n    CCLOG(\"finished actions\");\n});\nauto action = Sequence::create(move, rotate, func, nullptr);\nsprite->runAction(action);\n```", "```cpp\nauto func = CallFuncN::create([](Ref* sender){\n    CCLOG(\"callback\");\n    Sprite* sprite = dynamic_cast<Sprite*>(sender);\n});\n```", "```cpp\nbool HelloWorld::init() {\n    …\n    auto func = \nCallFunc::create(CC_CALLBACK_0(HelloWorld::finishedAction, this));\n    …\n}\n\nvoid HelloWorld::finishedAction()\n{\n    CCLOG(\"finished action\");\n}\n```", "```cpp\nbool HelloWorld::init() {\n    …\n    auto func = CallFuncN::create(CC_CALLBACK_1(HelloWorld::callback, this));\n    …\n}\n\nvoid HelloWorld::callback(Ref* sender)\n{\n    CCLOG(\"callback\");\n}\n```", "```cpp\nauto move = MoveBy::create(2.0f, Vec2(100, 0)); \nauto rotate = RotateBy::create(2.0f, 360.0f); \nauto func = CallFuncN::create([=](Ref* sender){\n    Sprite* sprite = dynamic_cast<Sprite*>(sender);\n    sprite->runAction(move->reverse());\n});\nauto action = Sequence::create(move, rotate, func, nullptr);\nsprite->runAction(action);\n```", "```cpp\nauto sprite = Sprite::create(\"res/run_01.png\");\nsprite->setPosition(Vec2(200, 200));\nthis->addChild(sprite);\n\nauto move = MoveTo::create(3.0f, Vec2(500, 200));\nauto ease = EaseInOut::create(move, 2.0f);\nsprite->runAction(ease);\n```", "```cpp\nauto sprite = Sprite::create(\"res/run_01.png\");\nsprite->setPosition(Vec2(size.width/2, size.height));\nsprite->setAnchorPoint(Vec2(0.5f, 0.0f));\nthis->addChild(sprite);\n\nauto drop = MoveTo::create(3.0f, Vec2(size.width/2, 0));\nauto ease = EaseBounceOut::create(drop);\nsprite->runAction(ease);\n```", "```cpp\nauto cache = SpriteFrameCache::getInstance();\ncache->addSpriteFramesWithFile(\"res/running.plist\");\nauto sprite = Sprite::createWithSpriteFrameName(\"run_01.png\");\nsprite->setPosition(size/2);\nthis->addChild(sprite);\n```", "```cpp\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n    <dict>\n        <key>frames</key>\n        <dict>\n            <key>run_01.png</key>\n            <dict>\n                <key>frame</key>\n                <string>{{2,2},{356,474}}</string>\n                <key>offset</key>\n                <string>{-62,-26}</string>\n                <key>rotated</key>\n                <false/>\n                <key>sourceColorRect</key>\n                <string>{{60,89},{356,474}}</string>\n                <key>sourceSize</key>\n                <string>{600,600}</string>\n            </dict>\n            <key>run_02.png</key>\n            <dict>\n                <key>frame</key>\n                <string>{{360,2},{272,466}}</string>\n                <key>offset</key>\n                <string>{-30,-33}</string>\n                <key>rotated</key>\n                <false/>\n                <key>sourceColorRect</key>\n                <string>{{134,100},{272,466}}</string>\n                <key>sourceSize</key>\n                <string>{600,600}</string>\n            </dict>\n\n      omit\n\n        </dict>\n        <key>metadata</key>\n        <dict>\n            <key>format</key>\n            <integer>2</integer>\n            <key>realTextureFileName</key>\n            <string>running.png</string>\n            <key>size</key>\n            <string>{2048,1024}</string>\n            <key>smartupdate</key>\n            <string>$TexturePacker:SmartUpdate :e4468ff02abe538ce50e3e1448059f78:1/1$</string>\n            <key>textureFileName</key>\n            <string>running.png</string>\n        </dict>\n    </dict>\n</plist>\n```", "```cpp\nint max;\nglGetIntegerv(GL_MAX_TEXTURE_SIZE, &max);\nCCLOG(\"texture size = %d\", max);\n\n```", "```cpp\nauto cache = AnimationCache::getInstance(); cache->addAnimationsWithFile(\"res/run_animation.plist\"); auto animation = cache->getAnimation(\"run\"); auto action = Animate::create(animation); sprite->runAction(action);\n\n```", "```cpp\nauto batchNode = SpriteBatchNode::create(\"res/run_01.png\");\nthis->addChild(batchNode);\nfor (int i=0; i<300; i++) {\n auto sprite = Sprite::createWithTexture(batchNode->getTexture());\n float x = CCRANDOM_0_1() * size.width;\n float y = CCRANDOM_0_1() * size.height;\n sprite->setPosition(Vec2(x,y));\n batchNode->addChild(sprite);\n}\n\n```", "```cpp\ndirector->setDisplayStats(false);\n```", "```cpp\nauto size = Director::getInstance()->getWinSize();\n\n// create 3D modal\nauto sprite3d = Sprite3D::create(\"res/girl.c3b\");\nsprite3d->setPosition(Vec2(size.width/2, 100));\nthis->addChild(sprite3d);\n\n// action 3D modal\nauto animation3d = Animation3D::create(\"res/girl.c3b\");\nauto animate3d = Animate3D::create(animation3d);\nauto repeat = RepeatForever::create(animate3d);\nsprite3d->runAction(repeat);\n\n```", "```cpp\nSprite3d->setPositionX(size.width);\n// move fro right to left\nauto move1 = MoveBy::create(5.0f, Vec2(-size.width, 0));\nauto move2 = MoveBy::create(5.0f, Vec2(size.width, 0));\nauto seq = Sequence::create(move1, move2, NULL);\nauto loop = RepeatForever::create(seq);\nsprite3d->runAction(loop);\n\n```", "```cpp\nRect rect = sprite->getBoundingBox();\nif (rect.containsPoint(Vec2())) {\n CCLOG(\"the point bumped rectangle\");\n}\n\n```", "```cpp\nif (rect.intersectsRect(Rect(0, 0, 100, 100))) {\n CCLOG(\"two rectangles bumped\");}\n\n```", "```cpp\nauto size = Director::getInstance()->getWinSize();\nauto draw = DrawNode::create();\nthis->addChild(draw);\n\n```", "```cpp\ndraw->drawDot(Vec2(size/2), 10.0f, Color4F::WHITE);\n\n```", "```cpp\ndraw->drawLine(Vec2(300, 200), Vec2(600, 200), Color4F::WHITE);\ndraw->drawSegment(Vec2(300, 100), Vec2(600, 100), 10.0f,\nColor4F::WHITE);\n\n```", "```cpp\ndraw->drawCircle(Vec2(300, size.height/2), 50.0f, 1.0f, 10, true,\n1.0f, 1.0f, Color4F::WHITE);\ndraw->drawCircle(Vec2(450, size.height/2), 50.0f, 1.0f, 100, false,\n1.0f, 1.0f, Color4F::WHITE);\ndraw->drawSolidCircle(Vec2(600, size.height/2), 50.0f, 1.0f, 100,\n1.0f, 1.0f, Color4F::WHITE);\n\n```", "```cpp\ndraw->drawTriangle(Vec2(380,100), Vec2(480, 200), Vec2(580, 100),\nColor4F::WHITE);\n\n```", "```cpp\ndraw->drawRect(Vec2(240, 100), Vec2(340,200), Color4F::WHITE);\ndraw->drawSolidRect(Vec2(480, 100), Vec2(580, 200), Color4F::WHITE);\n\n```", "```cpp\nstd::vector<Vec2>verts;\nverts.push_back(Vec2(380,100));\nverts.push_back(Vec2(380,200));\nverts.push_back(Vec2(480,250));\nverts.push_back(Vec2(580,200));\nverts.push_back(Vec2(580,100));\nverts.push_back(Vec2(480,50));\ndraw->drawPolygon(&verts[0], verts.size(), Color4F::RED, 5.0f,\nColor4F::GREEN);\n\n```", "```cpp\ndraw->drawQuadBezier(Vec2(240, 200), Vec2(480, 320), Vec2(720, 200), 24, Color4F::WHITE); draw->drawCubicBezier(Vec2(240, 100), Vec2(240, 200), Vec2(720, 200), Vec2(720, 100), 24, Color4F::WHITE);\n\n```"]