["```cpp\n    wc.lpfnWndProc = (WNDPROC)WndProc;\n    ```", "```cpp\nLRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)\n{\n  int wmId, wmEvent;\n  PAINTSTRUCT ps;\n  HDC hdc;\n\n  switch (message)\n  {\n    case WM_COMMAND:\n    wmId    = LOWORD(wParam);\n    wmEvent = HIWORD(wParam);\n    // Parse the menu selections:\n    switch (wmId)\n    {\n      case IDM_ABOUT:\n      DialogBox(hInstance, MAKEINTRESOURCE(IDD_ABOUTBOX), hWnd, About);\n      break;\n      case IDM_EXIT:\n      DestroyWindow(hWnd);\n      break;\n      default:\n      return DefWindowProc(hWnd, message, wParam, lParam);\n    }\n    break;\n    case WM_PAINT:\n    hdc = BeginPaint(hWnd, &ps);\n    // TODO: Add any drawing code here...\n    EndPaint(hWnd, &ps);\n    break;\n    case WM_DESTROY:\n    PostQuitMessage(0);\n    break;\n    default:\n    return DefWindowProc(hWnd, message, wParam, lParam);\n  }\n  return 0;\n}\n```", "```cpp\nbool done = false;\nwhile (!done)\n{\n  if (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE))\n  {\n    if (msg.message == WM_QUIT)\n    {\n      done = true;\n    }\n    else\n    {\n      TranslateMessage(&msg);\n      DispatchMessage(&msg);\n    }\n  }\n  else\n  {\n    int currentTime = glutGet(GLUT_ELAPSED_TIME);\n    float deltaTime = (float)(currentTime - previousTime) / 1000;\n    previousTime= currentTime;\n    GameLoop(deltaTime);\n  }\n}\n```", "```cpp\n#pragma once\n#include <Windows.h>\n\nclass Input\n{\n  public:\n  enum Key\n  {\n    K_ESC = VK_ESCAPE,\n    K_SPACE = VK_SPACE,\n    K_LEFT = VK_LEFT,\n    K_RIGHT = VK_RIGHT,\n    K_UP = VK_UP,\n    K_DOWN = VK_DOWN,\n    K_W = 87,\n    K_A = 65,\n    K_S = 83,\n    K_D = 68,\n    K_Q = 81,\n    K_ENTER = VK_RETURN,\n    K_LB = VK_LBUTTON,\n    K_RB = VK_RBUTTON\n\n  };\n\n  enum Command\n  {\n    CM_LEFT,\n    CM_RIGHT,\n    CM_STOP,\n    CM_UP,\n    CM_DOWN,\n    CM_QUIT\n  };\n\n  #define KEYDOWN(vk_code) ((GetAsyncKeyState(vk_code) & 0x8000) ? 1 : 0)\n\n  protected:\n  Command m_command;\nHWND m_hWnd;\n\n  public:\n  Input(const HWND m_hWnd);\n  ~Input();\n\n  void Update(const float p_detlaTime);\n\n  const Command GetCommand() const { return m_command; }\n};\n```", "```cpp\nif ( (getAsyncKeyState(VK_ESC) & 0x8000) == true ) \n{\n  PostQuitMessage(0);\n}\n```", "```cpp\n#define KEYDOWN(vk_code) ((GetAsyncKeyState(vk_code) & 0x8000) ? 1 : 0)\n```", "```cpp\n#include \"stdafx.h\"\n#include \"Input.h\"\n\nInput::Input(const HWND p_hWnd)\n{\n  m_command = Command::CM_STOP;\nm_hWnd = p_hWnd;\n}\n\nInput::~Input()\n{\n}\n\nvoid Input::Update(const float p_deltaTime)\n{\n  m_command = Command::CM_STOP;\n  if (KEYDOWN(Key::K_LEFT) || KEYDOWN(Key::K_A))\n  {\n    m_command = Command::CM_LEFT;\n  }\n  if (KEYDOWN(Key::K_RIGHT) || KEYDOWN(Key::K_D))\n  {\n    m_command = Command::CM_RIGHT;\n  }\n  if (KEYDOWN(Key::K_UP) || KEYDOWN(Key::K_LB))\n  {\n    m_command = Command::CM_UP;\n  }\n  if (KEYDOWN(Key::K_DOWN) || KEYDOWN(Key::K_RB))\n  {\n    m_command = Command::CM_DOWN;\n  }\n  if (KEYDOWN(Key::K_ESC) || KEYDOWN(Key::K_Q))\n  {\n    m_command = Command::CM_QUIT;\n  }\n}\n```", "```cpp\nvoid Update(const float p_deltaTime)\n{\n  inputManager->Update(p_deltaTime);\n  ProcessInput (p_deltaTime);\n\n  background->Update(p_deltaTime);\n  robot_left->Update(p_deltaTime);\n  robot_right->Update(p_deltaTime);\n  robot_left_strip->Update(p_deltaTime);\n  robot_right_strip->Update(p_deltaTime);\n}\n```", "```cpp\ninclude \"Input.h\"\n```", "```cpp\nInput* inputManager;\n```", "```cpp\nvoid StartGame()\n{\n  inputManager = new Input(hWnd);\n  LoadTextures();\n}\n```", "```cpp\nvoid ProcessInput (const float p_deltaTime);\n{\n  switch (inputManager->GetCommand())\n  {\n    case Input::Command::CM_STOP:\n    player->SetVelocity(0.0f);\n    background->SetVelocity(0.0f);\n    break;\n\n    case Input::Command::CM_LEFT:\n    if (player == robot_right)\n    {\n      robot_right->IsActive(false);\n      robot_right->IsVisible(false);\n      robot_left->SetPosition(robot_right->GetPosition());\n    }\n\n    player = robot_left;\n    player->IsActive(true);\n    player->IsVisible(true);\n    player->SetVelocity(-50.0f);\n    background->SetVelocity(50.0f);\n    break;\n\n    case Input::Command::CM_RIGHT:\n    if (player == robot_left)\n    {\n      robot_left->IsActive(false);\n      robot_left->IsVisible(false);\n      robot_right->SetPosition(robot_left->GetPosition());\n    }\n\n    player = robot_right;\n    player->IsActive(true);\n    player->IsVisible(true);\n    player->SetVelocity(50.0f);\n    background->SetVelocity(-50.0f);\n    break;\n\n    case Input::Command::CM_UP:\n    player->Jump(Sprite::SpriteState::UP);\n    break;\n\n    case Input::Command::CM_DOWN:\n    player->Jump(Sprite::SpriteState::DOWN);\n    break;\n\n    case Input::Command::CM_QUIT:\n    PostQuitMessage(0);\n    break;\n  }\n}\n```", "```cpp\n enum SpriteState\n {\n  UP,\n  DOWN\n };\n```", "```cpp\n bool m_isClicked;\n```", "```cpp\n m_isClicked = false;\n```", "```cpp\nvoid Jump(SpriteState p_state);\nvoid IsClicked(const bool p_value) { m_isClicked = p_value; }\n const bool IsClicked() const { return m_isClicked; }\n```", "```cpp\nvoid Sprite::Jump(SpriteState p_state)\n{\n  if (p_state == SpriteState::DOWN )\n  {\n    if (m_position.y < 470.0f) m_position.y += 75.0f;\n  }\n  else if (p_state == SpriteState::UP)\n  {\n    if (m_position.y >= 470.0f) m_position.y -= 75.0f;\n  }\n}\n```", "```cpp\nbackground->SetVelocity(-50.0f);\nplayer->SetVelocity(50.0f);\n```", "```cpp\n#include \"Sprite.h\"\n```", "```cpp\nenum Command\n{\nCM_INVALID,\nCM_LEFT,\n  CM_RIGHT,\n  CM_STOP,\n  CM_UP,\n  CM_DOWN,\n  CM_QUIT,\n  CM_UI\n};\n```", "```cpp\nSprite** m_uiElements;\nunsigned int m_uiCount;\n```", "```cpp\nvoid AddUiElement(Sprite* m_pElement);\n```", "```cpp\nm_uiElements = new Sprite*[10];\nm_uiCount = 0;\n```", "```cpp\nvoid Input::AddUiElement(Sprite* p_element)\n{\n  m_uiElements[m_uiCount] = p_element;\n  m_uiCount++;\n}\n```", "```cpp\nfor (unsigned int i = 0; i < m_uiCount; i++)\n{\n  Sprite* element = m_uiElements[i];\n  if (element->IsActive() == true)\n  {\n    if (CheckForClick(element))\n    {\n      element->IsClicked(true);\n      m_command = Input::Command::CM_UI;\n      return;\n    }\n  }\n}\n```", "```cpp\nconst bool Input::CheckForClick(Sprite* p_element) const\n{\n  if (KEYDOWN(Key::K_LB))\n  {\n    POINT cursorPosition;\n    GetCursorPos(&cursorPosition);\n    ScreenToClient(m_hWnd, &cursorPosition);\n    float left = p_element->GetPosition().x;\n    float right = p_element->GetPosition().x + p_element->GetSize().width;\n    float top = p_element->GetPosition().y;\n    float bottom = p_element->GetPosition().y + p_element->GetSize().height;\n\n    if (cursorPosition.x >= left  &&\n      cursorPosition.x <= right &&\n    cursorPosition.y >= top &&\n    cursorPosition.y <= bottom)\n    {\n      return true;\n    }\n    else\n    {\n      return false;\n    }\n  }\n  return false;\n}\n```", "```cpp\nconst bool CheckForClick(Sprite* p_element) const;\n```", "```cpp\nSprite* pauseButton;\nSprite* resumeButton;\n```", "```cpp\npauseButton = new Sprite(1);\npauseButton->SetFrameSize(75.0f, 38.0f);\npauseButton->SetNumberOfFrames(1);\npauseButton->SetPosition(5.0f, 5.0f);\npauseButton->AddTexture(\"resources/pauseButton.png\");\npauseButton->IsVisible(true);\npauseButton->IsActive(true);\ninputManager->AddUiElement(pauseButton);\n\nresumeButton = new Sprite(1);\nresumeButton->SetFrameSize(75.0f, 38.0f);\nresumeButton->SetNumberOfFrames(1);\n resumeButton->SetPosition(80.0f, 5.0f);\nresumeButton->AddTexture(\"resources/resumeButton.png\");\ninputManager->AddUiElement(resumeButton);\n```", "```cpp\npauseButton->Update(p_deltaTime);\nresumeButton->Update(p_deltaTime);\n```", "```cpp\npauseButton->Render();\nresumeButton->Render();\n```", "```cpp\nbool m_isPaused;\n```", "```cpp\nenum GameState\n{\n  GS_Running,\n  GS_Paused\n};\n```", "```cpp\nGameState m_gameState;\n```", "```cpp\nm_gameState = GS_Running;\n```", "```cpp\nvoid Update(const float p_deltaTime)\n{\n  inputManager->Update(p_deltaTime);\n  ProcessInput(p_deltaTime);\n\n  if (m_gameState == GS_Running)\n  {\n    background->Update(p_deltaTime);\n    robot_left->Update(p_deltaTime);\n    robot_right->Update(p_deltaTime);\n    robot_left_strip->Update(p_deltaTime);\n    robot_right_strip->Update(p_deltaTime);\n\n    pauseButton->Update(p_deltaTime);\n    resumeButton->Update(p_deltaTime);\n  }\n}\n```", "```cpp\nfloat uiTimer;\nconst float UI_THRESHOLD = 0.2f;\n```", "```cpp\n uiTimer = 0.0f;\n```", "```cpp\nvoid ProcessInput(const float p_deltaTime)\n{\n Input::Command command = inputManager->GetCommand();\n if (m_gameState == GS_Paused) command = Input::Command::CM_UI;\n\n uiTimer += p_deltaTime;\n if (uiTimer > UI_THRESHOLD)\n {\n  uiTimer = 0.0f;\n  switch (command)\n  {\n  case Input::Command::CM_STOP:\n   player->SetVelocity(0.0f);\n   background->SetVelocity(0.0f);\n   break;\n\n  case Input::Command::CM_LEFT:\n   if (player == robot_right)\n   {\n    robot_right->IsActive(false);\n    robot_right->IsVisible(false);\n    robot_left->SetPosition(robot_right->GetPosition());\n   }\n\n   player = robot_left;\n   player->IsActive(true);\n   player->IsVisible(true);\n   player->SetVelocity(-50.0f);\n   background->SetVelocity(50.0f);\n   break;\n\n  case Input::Command::CM_RIGHT:\n   if (player == robot_left)\n   {\n    robot_left->IsActive(false);\n    robot_left->IsVisible(false);\n    robot_right->SetPosition(robot_left->GetPosition());\n   }\n\n   player = robot_right;\n   player->IsActive(true);\n   player->IsVisible(true);\n   player->SetVelocity(50.0f);\n   background->SetVelocity(-50.0f);\n   break;\n\n  case Input::Command::CM_UP:\n   player->Jump(Sprite::SpriteState::UP);\n   break;\n\n  case Input::Command::CM_DOWN:\n   player->Jump(Sprite::SpriteState::DOWN);\n   break;\n\n  case Input::Command::CM_QUIT:\n   PostQuitMessage(0);\n   break;\n\n  case Input::Command::CM_UI:\n   if (pauseButton->IsClicked())\n   {\n    pauseButton->IsClicked(false);\n    pauseButton->IsVisible(false);\n    pauseButton->IsActive(false);\n\n    resumeButton->IsVisible(true);\n    resumeButton->IsActive(true);\n    m_gameState = GS_Paused;\n   }\n\n   if (resumeButton->IsClicked())\n   {\n    resumeButton->IsClicked(false);\n    resumeButton->IsVisible(false);\n    resumeButton->IsActive(false);\n\n    pauseButton->IsVisible(true);\n    pauseButton->IsActive(true);\n    m_gameState = GS_Running;\n   }\n  }\n }\n  command = Input::Command::CM_INVALID;\n}\n```"]