- en: Chapter 8. Enabling Your Qt Application to Support Other Languages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this era of globalization, the internationalization and localization of
    applications is almost inevitable. Fortunately, Qt provides relevant classes,
    along with some handy tools such as **Qt Linguist** to ease the burden of developers
    and translators. In this chapter, we will use two example applications to demonstrate
    the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Internationalization of Qt applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Translating Qt Widgets applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disambiguating identical texts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing languages dynamically
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Translating Qt Quick applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internationalization of Qt applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Internationalization and localization are the processes of adapting the application
    to other locales, which might include different languages and regional differences.
    In software development, internationalization refers to designing an application
    in such a way that it can be adapted to various languages and regions without
    code changes. On the other hand, localization means adapting internationalized
    software for a specific language or region. This usually involves locale-specific
    components and translating text.
  prefs: []
  type: TYPE_NORMAL
- en: Qt has done a lot to free developers from different writing systems. We don't
    need to worry about how different languages display and input, as long as we use
    Qt's input and display controls or their subclasses.
  prefs: []
  type: TYPE_NORMAL
- en: 'In most cases, what we need to do is to produce translations and enable them
    in the application. Qt offers the `QTranslator` class, which loads the translation
    file and displays the corresponding language on the screen. The procedure is concluded
    in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Internationalization of Qt applications](img/4615OS_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'First of all, Qt won''t just make all the strings translatable, because that
    would obviously be a disaster. Instead, you need to explicitly set whether the
    string is translatable in code or in the **Design** mode. In the Qt/C++ code,
    use the `tr()` function to enclose all the strings that can be translated. We
    use the `qsTr()` function to do this job in the Qt Quick/QML code. Let me show
    you an example. Here is a demonstration of the normal usage of a string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This will output `Hello World` to the standard output stream, which is your
    command prompt or shell in general cases. If we want to make `Hello World` translatable,
    we need to use a `tr()` function to enclose the string, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Since `tr()` is a static public member function of the `QObject` class, you
    can still use it even for a non `QObject` class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Then, we need to use the `lupdate` command, which is located in **Tools** |
    **External** | **Linguist** | **Update Translations (lupdate)** in Qt Creator.
    This will update, or create if the **translation source** (**TS**) file doesn't
    exist. You can then use Qt Linguist to translate the strings. Before you release
    your application, run the `lrelease` command, which is located in **Tools** |
    **External** | **Linguist** | **Release Translations (lrelease)**, to generate
    the **Qt message** (**QM**) files that can be loaded by an application dynamically.
    Don't worry if it confuses you; we'll use two examples to walk you through these
    procedures.
  prefs: []
  type: TYPE_NORMAL
- en: Translating Qt Widgets applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, let's create a new Qt Widget project, whose name is `Internationalization`.
    Then, edit `mainwindow.ui` in the **Design** mode.
  prefs: []
  type: TYPE_NORMAL
- en: As usual, remove the status bar, menu bar, and tool bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add **Label** into `centralWidget` and change its object name to `nonTransLabel`.
    Then, change its text to `This is a non-translatable label` and uncheck `translatable`
    under `text` in **Property Editor**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag a **Push Button** just beneath `nonTransLabel` with `transButton` as its
    object name. Change its text to `This is a translatable button`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change **Lay out** to **Lay Out Vertically** in **MainWindow**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Resize the frame to a comfortable size.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go back to editing the `Internationalization.pro` project file in the **Edit**
    mode. Add a line indicating the translation source file, which is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `_de` suffix is a locale code, indicating that this is a German translation
    source file. The locale codes are defined by **Internet Engineering Task Force**
    in the **BCP 47** document series. Historically, Qt follows the POSIX definition,
    which is slightly different from BCP 47\. In this, it uses underscores (`_`) instead
    of hyphens (`-`) to separate subtags. In other words, Brazilian Portuguese is
    expressed as `pt_BR` instead of `pt-BR`. Meanwhile, Qt has provided some APIs
    to conform the locale name to a BCP 47 definition since the Qt 4.8 version.
  prefs: []
  type: TYPE_NORMAL
- en: 'To ensure this change is valid, save the project file and right-click on the
    project and select **Run qmake**. After this, we can generate the translation
    source file, which is exactly `Internationalization_de.ts`, by executing the `lupdate`
    command. The results will be printed in the **General Messages** panel, which
    contains the strings added to the TS file, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, open the `Internationalization_de.ts` file in Qt Linguist. The overview
    UI of Qt Linguist is displayed in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Translating Qt Widgets applications](img/4615OS_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Context** lists the source text context, which is the class name in most
    cases, while **Strings** contains all the translatable strings. **Sources and
    Forms** displays the corresponding location of the string, either as a piece of
    code or a UI form. Beneath them is the translation area, which lets you input
    the translation and comments, if there are any.'
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the overview, the icon in front of each entry is noteworthy.
    A yellow question mark (**?**) simply means there is no translation currently,
    while a green checkmark means accepted/correct, and a yellow checkmark stands
    for accepted/warnings. You may also encounter a red exclamation mark (**!**),
    which indicates warnings. The sharp symbol (**#**) in front of a button's text
    in the **Sources and Forms** pane indicates untranslated, and possibly translatable,
    strings. Qt Linguist checks string translations automatically according to its
    own algorithm, which means that it may give a false warning. In this case, simply
    ignore the warning and accept the translation.
  prefs: []
  type: TYPE_NORMAL
- en: You'll find that the label text isn't among **Source text**. This is because
    we unchecked the `translatable` property. Now, input German translations in the
    translation area and click on the **Done and Next** button in the tool bar, then
    navigate to **Translation** | **Done and Next**. Or, even quicker, press *Ctrl*
    + *Enter* to accept the translation. When you've finished, click on the **Save**
    button, and then exit Qt Linguist.
  prefs: []
  type: TYPE_NORMAL
- en: Although it's recommended to use Qt Linguist for translation tasks, it's viable
    to use a normal text editor to edit the TS file directly. The TS file is XML-formatted
    and should be supported well by other editors.
  prefs: []
  type: TYPE_NORMAL
- en: 'After translating, return to Qt Creator and run the `lrelease` command to generate
    the `Internationalization_de.qm` file. At the current stage, your project folder
    should contain both the TS and QM files, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Translating Qt Widgets applications](img/4615OS_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that file icons may differ slightly on your computers because of different
    operating system and (or) software installations.
  prefs: []
  type: TYPE_NORMAL
- en: We already produced the QM file; it's now time to modify the `main.cpp` file
    in order to load the translation into this application.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, `QTranslator` is used to load the German translation. Before we install
    translator into `QApplication`, we have to load a QM file by calling the `load`
    function. This will load the translation file whose filename consists of `Internationalization`
    followed by `_` and the UI language name (which is `de` in this case) and `.qm`
    (the default value). There is a simplified overloaded `load` function. Our equivalent
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Usually, it would be better to call the previous `load` function because it
    uses `QLocale::uiLanguages()`, and it will also format dates and numbers if they're
    necessary for the new locale. Whichever you choose, always remember that if you
    load the translation after the `MainWindow w;` line, `MainWindow` won't be able
    to use the translation at all.
  prefs: []
  type: TYPE_NORMAL
- en: If you run the application now, the application won't display German yet. Why?
    This is simply because `QTranslator` can't find the `Internationalization_de.qm`
    file. There are lots of ways to solve this problem. The neatest way is to change
    the working directory, while running the application in Qt Creator.
  prefs: []
  type: TYPE_NORMAL
- en: Switch to the **Projects** mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch to **Run Settings**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change **Working directory** to your project source directory where you put
    the `Internationalization_de.qm` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, run it again; you''ll see German text on the screen, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Translating Qt Widgets applications](img/4615OS_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The label is displayed in English as we expected, whereas the window title and
    button text are displayed in German.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may think this solution pointless, since the German translation is loaded
    despite the system locale setting. Well, the application can load the translation
    according to the system locale with only one modification; that is, changing the
    translator load line to the one shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Here, `system()` is a static member function of the `QLocale` class, which returns
    a `QLocale` object that initialized with the system locale. We then call the `language()`
    function to get the language of the current locale.
  prefs: []
  type: TYPE_NORMAL
- en: Disambiguating identical texts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If there are identical texts, the default behavior is to treat them as the texts
    with the same meaning. This could effectively save translators from translating
    the same texts. Meanwhile, this doesn't hold true all the time. For instance,
    the word `open` can be used as a noun or an adjective, which may be different
    words in other languages. Thankfully, it's possible and easy to disambiguate identical
    texts in Qt.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s add a `PushButton` and `openButton` between `transButton` and `nonTransLabel`.
    Use `Open` as its text, and then edit `mainwindow.h`. Add a new private slot named
    `onOpenButtonClicked()`, which is used to handle the event when `openButton` gets
    clicked. The relevant source file, `mainwindow.cpp`, is pasted as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: First, we connect the clicked signal of `openButton` to the `onOpenButtonClicked`
    slot of `MainWindow` in the constructor of `MainWindow`. Then, we simply use the
    static member function, `information`, of `QMessageBox` to pop-up an information
    dialog, using `Dialog` as the title and `Open` as its context. Don't forget to
    use the `tr()` function to make these strings translatable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, run `lupdate` and open the TS file in Qt Linguist. There is only one **Open**
    string in the **Strings** panel, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Disambiguating identical texts](img/4615OS_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'However, **Open** in the information dialog is supposed to have an adjective,
    which shouldn''t be mixed up with the text in `openButton`. It''s a comment that
    we need to separate this **Open** from the other `Open`. Modify the `onOpenButtonClicked`
    function in `mainwindow.cpp`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Here, the second argument of the `tr()` function is the comment. Different comments
    stand for different texts. In this way, `lupdate` will treat them as nonidentical
    texts. Rerun `lupdate`, and you're able to translate two `Open` strings in Qt
    Linguist. The **Developer comments** column in the translation area is shown here.
    Qt Linguist will also show two translatable `Open` strings.
  prefs: []
  type: TYPE_NORMAL
- en: '![Disambiguating identical texts](img/4615OS_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The equivalent property in the **Design** mode for `openButton` is disambiguation
    under the `text` property. After translation, execute `lrelease`, and then rerun
    the application and the two `Open` strings should have two different translations,
    which is demonstrated here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Disambiguating identical texts](img/4615OS_08_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Changing languages dynamically
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, people want to use languages other than the one specified by the
    system locale. This is a matter of application of the customized settings. This
    usually means restarting the application in order to load the corresponding translation
    file. This is partly because changing the language dynamically requires additional
    work. However, it's feasible and can be done with some lines. What's more important
    is that it delivers a better user experience!
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add a new `push` button to `MainWindow`. Name it `loadButton` and change
    its text to `Load/Unload Translation`. Then, edit the `main.cpp` file in the **Edit**
    mode. Remove all `QTranslator` related lines, as we''ll be implementing this dynamic
    language switch in the `MainWindow` class. The `main.cpp` file should look like
    the originally generated one as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, edit `mainwindow.h`, as we need to declare some members here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can tell, we moved `QTranslator` here, named it `deTranslator`, and
    used it as a pointer with the `deLoaded` variable to suggest whether or not we''ve
    already loaded the German translation. The following `onLoadButtonClicked` is
    a `private` slot function, which will be connected to the clicked signal of `loadButton`.
    Last but not least, we reimplement `changeEvent`, so that we can translate the
    entire user interface on the fly. It''ll be clear in the `mainwindow.cpp` source
    file, where it is pasted as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In the constructor, we initialize `deTranslator` and load the German translation,
    which is almost identical to what we did in `main.cpp` before. Then, we set `deLoaded`
    to `false`, indicating that the German translation is not installed yet. Next,
    this is followed by a `connect` statement.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's look into the `onLoadButtonClicked` function to see what will happen
    if the `loadButton` gets clicked. We set `deLoaded` to `false` and remove `deTranslator`
    if it's already loaded. Otherwise, we install `deTranslator` and set `deLoaded`
    to `true`. Remember that `qApp` is a predefined macro that simply refers to the
    current instance of `QCoreApplication`. Both `installTranslator` and `removeTranslator`
    will propagate the event to all the top-level windows, that is to say, `changeEvent`
    of `MainWindow` will be triggered in this case.
  prefs: []
  type: TYPE_NORMAL
- en: In order to update all the text according to the translator, we have to `reimplement`
    `changeEvent`. In this `reimplemented` function, we call the `retranslateUi` function
    to retranslate `MainWindow` if the event is `languageChange`. Otherwise, we simply
    call the inherited and default `QMainWindow::changeEvent` function.
  prefs: []
  type: TYPE_NORMAL
- en: When you firstly start the application, it'll display English text.
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing languages dynamically](img/4615OS_08_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once you click on the **Load/Unload Translation** button, all translatable and
    translated text will show in German.
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing languages dynamically](img/4615OS_08_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It'll display in English if you click the button again. In addition to a nontranslatable
    label, `loadButton` will not be not translated either. This is because we didn't
    translate the button at all. However, as you can see, the lack of some translations
    won't prevent the application from loading other translated texts.
  prefs: []
  type: TYPE_NORMAL
- en: Translating Qt Quick applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The procedure of translating a Qt Quick application is similar to a Qt Widgets
    application. We'll walk through the process with another example application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Qt Quick application project and name it `Internationalization_QML`.
    The generated `main.qml` file has already added a `qsTr()` function for us. The
    contents may differ slightly in a later version of Qt Creator and (or) Qt Library.
    However, it should look similar to this one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s edit the `Internationalization_QML.pro` project file, whose modified
    version is pasted as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In addition to the `TRANSLATIONS` line, we also add a `lupdate_only` block.
    It is crucial in this case.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We probably don't need this block in the Qt/C++ projects because the `lupdate`
    tool extracts the translatable strings from `SOURCES`, `HEADERS`, and `FORMS`.
  prefs: []
  type: TYPE_NORMAL
- en: However, this means that all the strings located elsewhere won't be found, not
    even saying translating. On the other hand, the `qml` files are not the C++ source
    files that are going to be compiled by the C++ compiler. In this case, we use
    `lupdate_only` to restrict those `SOURCES`, which are only available for `lupdate`.
  prefs: []
  type: TYPE_NORMAL
- en: Now, executing `lupdate` can generate the translation source file for us. Similarly,
    we use Qt Linguist to translate the `Internationalization_QML_de.ts` file. Then,
    execute `lrelease` to generate the QM file.
  prefs: []
  type: TYPE_NORMAL
- en: 'To load the translation, we need to modify `main.cpp` into the one shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, we need to change **Working directory** to this project''s directory
    in **Run Settings** in the **Projects** mode. Now, run the application again;
    we should be able to see German text on the screen, as we can in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Translating Qt Quick applications](img/4615OS_08_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'There is an alternative way to load the translations file, which doesn''t need
    to change **Working directory**. Firstly, change the `translator.load` line in
    `main.cpp` to the following one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: We specify the directory that the translator should search. In this case, it's
    `":/"`, which is the top directory inside **Resources**. Please don't prepend
    `qrc` to the directory string; this will cause `translator` to be unable to find
    the QM file. A colon (`:`) is sufficient here to indicate that there is a `qrc`
    path inside **Resources**.
  prefs: []
  type: TYPE_NORMAL
- en: You can either create a new `qrc` file, or similar to what we do, add `Internationalization_QML_de.qm`
    to the current `qml.qrc` file.
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `qml.qrc` file under **Resources** in **Projects Editor**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Open** in **Editor**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Add** | **Add Files** on the lower-right panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `Internationalization_QML_de.qm` file and click on **Open**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, the `Internationalization_QML_de.qm` file should display on both **Editor**
    and the **Projects** tree like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Translating Qt Quick applications](img/4615OS_08_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Go to the **Projects** mode and reset **Working directory** in **Run Settings**.
    Then, run the application again; the German translation should still load successfully.
  prefs: []
  type: TYPE_NORMAL
- en: So far, there is no huge difference between Qt and Qt Quick. However, it's tedious
    to achieve dynamic translation installation and removal in Qt Quick. You have
    to write a C++ class that installs and remove the translator, which then emits
    a signal indicating that there is a change to the text. Therefore, the best practice
    for the Qt Quick application is to make language a setting. The user can then
    load different translations. It needs a restart of the application, though.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You're now able to make your application more competitive by adding support
    for other languages now. Besides, the super easy to use Qt Linguist, which is
    also a cross-platform tool provided by Qt, is also covered in this chapter. In
    addition to the skills you learnt, you can also tell that Qt/C++ still holds a
    great advantage over Qt Quick/QML in terms of APIs and features.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we're going to make our Qt applications redistributable
    and deploy them on other devices.
  prefs: []
  type: TYPE_NORMAL
