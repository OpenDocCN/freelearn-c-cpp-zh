- en: Chapter 2. Importing Assets
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章 导入资源
- en: In the previous chapter, you learned the basics of Unreal Engine. In this chapter,
    you will learn about importing assets from Autodesk 3ds Max.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你学习了 Unreal Engine 的基础知识。在本章中，你将学习如何从 Autodesk 3ds Max 导入资源。
- en: Creating asset in a DCC application
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 DCC 应用程序中创建资源
- en: In the previous chapter, you learned how to use BSP to block out a level. However,
    we need to replace them with static meshes for better performance and more control
    of materials, collisions, and so on. We will create models in the **Digital Content
    Creation** (**DCC**) application (such as Autodesk 3ds Max, Autodesk Maya, Blender,
    and so on) that are imported into Unreal Engine through Content Browser. Unreal
    Engine supports the import of both FBX and OBJ but its recommended to use the
    FBX format.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你学习了如何使用 BSP 来阻挡关卡。然而，我们需要用静态网格来替换它们，以获得更好的性能和更多对材质、碰撞等方面的控制。我们将在 **数字内容创作**
    (**DCC**) 应用程序（如 Autodesk 3ds Max、Autodesk Maya、Blender 等）中创建模型，并通过内容浏览器导入 Unreal
    Engine。Unreal Engine 支持导入 FBX 和 OBJ 格式，但建议使用 FBX 格式。
- en: 'The following screenshot is an example asset that I will use in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图是本章中将使用的示例资源：
- en: '![Creating asset in a DCC application](img/B03950_02_01.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![在 DCC 应用程序中创建资源](img/B03950_02_01.jpg)'
- en: Note
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that at the time of writing this book, Unreal Engine import pipeline uses
    FBX 2014\. Trying to import using a different version might result in incompatibilities.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在撰写本书时，Unreal Engine 的导入管道使用 FBX 2014。尝试使用不同版本导入可能会导致不兼容。
- en: 'A few things that you need to keep in mind when modeling are as follows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在建模时需要记住的一些事项如下：
- en: '**Units**: **Unreal Units** (**UU**) are critical when modeling assets for
    games. Incorrect units will result in assets looking larger or smaller than they
    are supposed to look. 1 Unreal Unit is equal to 1 cm. The sample character that
    comes with Unreal Engine 4 is 196 cm high. So when you are modeling assets for
    Unreal Engine 4, it''s best to use a box that is 196 cm high as reference.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单位**：**Unreal 单位**（**UU**）在为游戏建模资产时至关重要。错误的单位会导致资产看起来比预期的大或小。1 Unreal 单位等于
    1 厘米。Unreal Engine 4 中的示例角色高 196 厘米。因此，当你为 Unreal Engine 4 建模资产时，最好使用一个高 196 厘米的盒子作为参考。'
- en: Note
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To learn how to change units for Autodesk 3ds Max, you can refer to [https://knowledge.autodesk.com/support/3ds-max/learn-explore/caas/CloudHelp/cloudhelp/2015/ENU/3DSMax/files/GUID-69E92759-6CD9-4663-B993-635D081853D2-htm.html](https://knowledge.autodesk.com/support/3ds-max/learn-explore/caas/CloudHelp/cloudhelp/2015/ENU/3DSMax/files/GUID-69E92759-6CD9-4663-B993-635D081853D2-htm.html).
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要了解如何更改 Autodesk 3ds Max 的单位，你可以参考 [https://knowledge.autodesk.com/support/3ds-max/learn-explore/caas/CloudHelp/cloudhelp/2015/ENU/3DSMax/files/GUID-69E92759-6CD9-4663-B993-635D081853D2-htm.html](https://knowledge.autodesk.com/support/3ds-max/learn-explore/caas/CloudHelp/cloudhelp/2015/ENU/3DSMax/files/GUID-69E92759-6CD9-4663-B993-635D081853D2-htm.html)。
- en: To learn how to change units for Blender, you can refer to [http://www.katsbits.com/tutorials/blender/metric-imperial-units.php](http://www.katsbits.com/tutorials/blender/metric-imperial-units.php).
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要了解如何更改 Blender 的单位，你可以参考 [http://www.katsbits.com/tutorials/blender/metric-imperial-units.php](http://www.katsbits.com/tutorials/blender/metric-imperial-units.php)。
- en: '**Pivot Point**: This represents the local center and local coordinate system
    of an object. When you import a mesh into Unreal Engine, the pivot point of that
    mesh (as it was in your DCC application) determines the point where any transformation
    (such as move, rotate, and scale) will be performed. Generally, it is best to
    keep your meshes at origin (0, 0, 0) and set your pivot point to one corner of
    the mesh for proper alignment in Unreal Engine.'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**轴点**：这代表对象的局部中心和局部坐标系。当你将网格导入 Unreal Engine 时，该网格的轴点（正如它在你的 DCC 应用程序中一样）决定了任何变换（如移动、旋转和缩放）将执行的位置。通常，最好将你的网格保持在原点（0,
    0, 0）并将轴点设置在网格的一个角落，以便在 Unreal Engine 中正确对齐。'
- en: '**Triangulation**: Remember that, the Unreal Engine importer will automatically
    convert the quads to triangles so there is no skipping from triangles.'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**三角化**：记住，Unreal Engine 导入器会自动将四边形转换为三角形，因此不会跳过三角形。'
- en: '**UV**: When you do UVs for assets, you can go beyond the 0-1 space, especially
    when you are dealing with big objects. UV channel 1 (which is channel 0 in Unreal)
    is used for texturing and UV channel 2 (which is channel 1 in Unreal) is used
    for lightmaps.'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**UV**：当你为资产进行 UV 时，你可以超出 0-1 空间，特别是当你处理大型对象时。UV 通道 1（在 Unreal 中是通道 0）用于纹理，UV
    通道 2（在 Unreal 中是通道 1）用于光照贴图。'
- en: Creating collision meshes
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建碰撞网格
- en: You can create collision meshes and export them with your asset. Unreal Engine
    4 provides a collision generator for static meshes but there are times when we
    have to create our own custom collision shapes especially if the mesh has an opening
    (such as doors or walls with window cutouts). In this section, we will see both
    options.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以创建碰撞网格并将其与您的资产一起导出。Unreal Engine 4为静态网格提供碰撞生成器，但有时我们必须创建自己的自定义碰撞形状，特别是如果网格有开口（如门或带有窗洞的墙）。在本节中，我们将看到这两种选项。
- en: Tip
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Collision shapes should always stay simple because it is much faster to calculate
    simple shapes.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 碰撞形状应始终保持简单，因为计算简单形状要快得多。
- en: Custom collision shapes
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义碰撞形状
- en: 'Collision meshes are identified by Unreal importer based on their names. There
    are three types of collision shapes that you can define. They are as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 碰撞网格由Unreal导入器根据其名称识别。您可以定义三种类型的碰撞形状。它们如下：
- en: '**UBX_MeshName**: UBX stands for Unreal Box and as the name says, it should
    be in a box shape. You cannot move the vertices in any way or else it will not
    work.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**UBX_MeshName**：UBX代表Unreal Box，正如其名，它应该呈箱形状。您不能以任何方式移动顶点，否则它将不起作用。'
- en: '**USP_MeshName**: USP stands for Unreal Sphere and as the name says, it should
    be in the sphere shape. The number of segments of this sphere does not matter
    (although somewhere around 6-10 seems to be good) but you cannot move any vertices
    around.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**USP_MeshName**：USP代表Unreal Sphere，正如其名，它应该呈球形状。此球体的分段数量并不重要（尽管大约6-10似乎不错），但您不能移动任何顶点。'
- en: '**UCX_MeshName**: UCX stands for Unreal Convex and as the name says, it should
    be a convex shape and should not be hollow or dented. This is the most commonly
    used collision shape because basic shapes such as boxes and spheres can be generated
    right inside Unreal.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**UCX_MeshName**：UCX代表Unreal Convex，正如其名，它应该是一个凸形状，不应该有空或凹。这是最常用的碰撞形状，因为基本形状（如箱体和球体）可以直接在Unreal中生成。'
- en: 'In the following screenshot, you can see the red wireframe object, which is
    what I created for the collision shape:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的屏幕截图中，您可以看到红色的线框对象，这是我为了碰撞形状而创建的：
- en: '![Custom collision shapes](img/B03950_02_02.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![自定义碰撞形状](img/B03950_02_02.jpg)'
- en: Unreal Engine 4 collision generator
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Unreal Engine 4碰撞生成器
- en: Collision shapes for static meshes can be generated inside the static mesh editor.
    To open this editor, double-click on a static mesh asset in **Content Browser**
    and click on the **Collision** menu, which will then list all the options for
    **Collision**.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 静态网格的碰撞形状可以在静态网格编辑器内生成。要打开此编辑器，请双击**内容浏览器**中的静态网格资产，然后点击**碰撞**菜单，这将列出所有**碰撞**选项。
- en: '![Unreal Engine 4 collision generator](img/B03950_02_03.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![Unreal Engine 4碰撞生成器](img/B03950_02_03.jpg)'
- en: Simple shapes
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简单形状
- en: 'The first three options in this menu are simple shapes and they are as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 此菜单中的前三个选项是简单形状，如下所示：
- en: '**Sphere Collision**: This creates a simple sphere collision shape'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**球体碰撞**：这创建了一个简单的球体碰撞形状'
- en: '**Capsule Collision**: This creates a simple capsule collision shape'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**胶囊碰撞**：这创建了一个简单的胶囊碰撞形状'
- en: '**Box Collision**: This creates a simple box collision shape![Simple shapes](img/B03950_02_04.jpg)'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**箱体碰撞**：这创建了一个简单的箱体碰撞形状![简单形状](img/B03950_02_04.jpg)'
- en: K-DOP shapes
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: K-DOP形状
- en: '**K Discrete Oriented Polytope** (**K-DOP**) shapes are basically bounding
    volumes. The numbers (10, 18, and 26) represents the K-axis aligned planes.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**K离散定向多面体**（**K-DOP**）形状基本上是边界体积。数字（10、18和26）代表K轴对齐的平面。'
- en: Auto convex collision
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动凸形碰撞
- en: This option is used to create much more accurate collision shapes for your models.
    Once you click on this option, a new dock window appears at the bottom-right corner
    of static mesh editor; using **Max Hulls** (the number of hulls to be created
    to best match the shape of the object) and **Max Hull Verts** (which determines
    the complexity of the collision hulls) you can create more complex collision shapes
    for your **Static Mesh**.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 此选项用于创建更精确的碰撞形状以供您的模型使用。一旦您点击此选项，静态网格编辑器右下角将出现一个新的浮动窗口；使用**最大壳体**（创建以最佳匹配对象形状的壳体数量）和**最大壳体顶点**（确定碰撞壳体的复杂性）您可以创建更复杂的碰撞形状，用于您的**静态网格**。
- en: 'As you can see in the following screenshot, the auto convex result is reasonably
    accurate:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在以下屏幕截图中所见，自动凸形的结果相当准确：
- en: '![Auto convex collision](img/B03950_02_05.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![自动凸形碰撞](img/B03950_02_05.jpg)'
- en: Tip
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Collision shapes support transformation (move, rotate, and scale) and you can
    duplicate them to have multiple collisions. Click on the collision shape inside
    static mesh editor and you can switch between move, rotate, and scale using *W*,
    *E*, and *R*. You can use *Alt* + left click drag (or *Ctrl* + *W*) to duplicate
    an existing collision.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 碰撞形状支持变换（移动、旋转和缩放），并且您可以复制它们以拥有多个碰撞。在静态网格编辑器中单击碰撞形状，您可以使用*W*、*E*和*R*在移动、旋转和缩放之间切换。您可以使用*Alt*
    + 左键单击拖动（或*Ctrl* + *W*）来复制现有的碰撞。
- en: Materials
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 材质
- en: Unreal Engine can import materials and textures to apply to the mesh while exporting
    from 3D application. From Autodesk 3ds Max, only the basic materials are supported.
    They are **Standard** and **Multi/Sub-Object**. In those basic materials, only
    specific features are supported. This means FBX will not export all settings but
    it supports certain maps or textures used in that material type.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Unreal Engine可以在从3D应用程序导出时将材质和纹理应用到网格上。从Autodesk 3ds Max，只支持基本材质。它们是**标准**和**多/子对象**。在这些基本材质中，只支持特定功能。这意味着FBX不会导出所有设置，但它支持该材质类型中使用的某些贴图或纹理。
- en: In the following example, you can see a model with multiple materials assigned.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，您可以看到分配了多个材质的模型。
- en: Note
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Note that it is very important to have unique names for each sub material in
    the **Multi/Sub-Object** material. Each sub material has a unique name as shown
    in the following screenshot:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在**多/子对象**材质中为每个子材质拥有唯一的名称非常重要。每个子材质都有一个唯一的名称，如下面的截图所示：
- en: '![Materials](img/B03950_02_06.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![材质](img/B03950_02_06.jpg)'
- en: LOD
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 级别细节（LOD）
- en: '**Level of Detail** (**LOD**) is a way to limit the impact of meshes as they
    get farther away from the camera. Each LOD will have reduced triangles and vertices
    compared to the previous one and can have simpler materials. That means base LOD
    (**LOD 0**) will be the high quality mesh that appears when the player is near.
    As the player goes farther from that object, it will change to **LOD 1** with
    reduced triangles and vertices than **LOD 0** and as the player goes even farther
    away it will switch to **LOD 2**, which has much fewer triangles and vertices
    than **LOD 1**.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**细节级别**（**LOD**）是一种限制网格随着它们远离相机时影响的方法。每个LOD与上一个相比将具有较少的三角形和顶点，并且可以具有更简单的材质。这意味着基础LOD（**LOD
    0**）将是当玩家靠近时出现的高质量网格。当玩家远离该对象时，它将变为**LOD 1**，其三角形和顶点比**LOD 0**少，当玩家进一步远离时，它将切换到**LOD
    2**，其三角形和顶点比**LOD 1**少得多。'
- en: The following figure should give you an idea about what LOD does. The mesh on
    the left is base LOD (**LOD 0**), the middle is **LOD 1**, and the right is **LOD
    2**.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图应能给您一个关于LOD做什么的思路。左边的网格是基础LOD（**LOD 0**），中间是**LOD 1**，右边是**LOD 2**。
- en: Note
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: More information about LODs can be found at [https://docs.unrealengine.com/latest/INT/Engine/Content/Types/StaticMeshes/HowTo/LODs/index.html](https://docs.unrealengine.com/latest/INT/Engine/Content/Types/StaticMeshes/HowTo/LODs/index.html).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于LOD的信息可以在[https://docs.unrealengine.com/latest/INT/Engine/Content/Types/StaticMeshes/HowTo/LODs/index.html](https://docs.unrealengine.com/latest/INT/Engine/Content/Types/StaticMeshes/HowTo/LODs/index.html)找到。
- en: '![LOD](img/B03950_02_07.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![LOD](img/B03950_02_07.jpg)'
- en: Exporting and importing
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导出和导入
- en: We will now cover how to export and import a mesh into Unreal.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将介绍如何将网格导出和导入到Unreal中。
- en: Exporting
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导出
- en: Exporting a mesh is a pretty straightforward process. You can export multiple
    meshes in a single FBX file or export each mesh individually. Unreal importer
    can import multiple meshes as separate assets or combine them as a single asset
    by enabling the **Combine Meshes** option at import time.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 导出网格是一个相当直接的过程。您可以在单个FBX文件中导出多个网格，或者单独导出每个网格。Unreal导入器可以在导入时将多个网格作为单独的资产导入，或者通过在导入时启用**合并网格**选项将它们合并为一个资产。
- en: 'In the following screenshot, you can see that I have selected both the collision
    mesh and the model for exporting:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下截图中，您可以看到我已经选择了碰撞网格和模型以进行导出：
- en: '![Exporting](img/B03950_02_08.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![导出](img/B03950_02_08.jpg)'
- en: Note
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Smoothing Groups** should be turned on when exporting, otherwise Unreal Engine
    will show a warning when importing.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**平滑组**在导出时应该开启，否则Unreal Engine在导入时会显示警告。'
- en: Importing
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导入
- en: Importing a mesh into Unreal is simple. There are three ways you can import.
    They are explained here.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 将网格导入到Unreal中很简单。您有三种导入方式。它们在这里解释。
- en: Context menu
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 上下文菜单
- en: You can right-click inside **Content Browser** and select **Import to <Your
    folder name>**.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在**内容浏览器**内部右键单击并选择**导入到 <您的文件夹名称>**。
- en: '![Context menu](img/B03950_02_09.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![上下文菜单](img/B03950_02_09.jpg)'
- en: Drag and drop
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 拖放
- en: As the name states, you can easily drag a FBX or OBJ model from **Windows Explorer**
    to **Content Browser** to import.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名所示，你可以轻松地将FBX或OBJ模型从**Windows资源管理器**拖放到**内容浏览器**以进行导入。
- en: Content Browser import
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内容浏览器导入
- en: '**Content Browser** has an **Import** button that you can use to import meshes.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**内容浏览器**有一个**导入**按钮，你可以使用它来导入网格。'
- en: '![Content Browser import](img/B03950_02_10.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![内容浏览器导入](img/B03950_02_10.jpg)'
- en: Automatic import
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自动导入
- en: If you place FBX files in your project's **Content** folder (including any subfolders),
    Unreal will automatically detect this and trigger the import process (if you have
    the editor open. Otherwise, the next time you run it).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将FBX文件放置在你的项目**内容**文件夹中（包括任何子文件夹），Unreal将自动检测并触发导入过程（如果你已经打开了编辑器。否则，下次运行时）。
- en: Configuring automatic import
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置自动导入
- en: You can choose whether you want this option enabled or disabled. To configure,
    go to **Edit** | **Editor Preferences** | **Loading & Saving** | **Auto Reimport**.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以选择是否启用或禁用此选项。要配置，请转到**编辑** | **编辑器首选项** | **加载与保存** | **自动重新导入**。
- en: '![Configuring automatic import](img/B03950_02_11.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![配置自动导入](img/B03950_02_11.jpg)'
- en: '**Monitor Content Directories**: This enables or disables automatic importing
    of assets.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控内容目录**：这可以启用或禁用资产的自动导入。'
- en: '**Directories to Monitor**: This adds or removes a path (it can be a virtual
    package path such as `\Game\MyContent\` or an absolute path such as `C:\My Contents`)
    for the engine to monitor new content.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**要监控的目录**：这为引擎添加或删除一个路径（它可以是一个虚拟包路径，如`\Game\MyContent\`，或一个绝对路径，如`C:\My Contents`）以监控新内容。'
- en: '**Auto Create Assets**: If enabled, any new FBX files will not be automatically
    imported.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动创建资产**：如果启用，任何新的FBX文件将不会自动导入。'
- en: '**Auto Delete Assets**: If enabled, and you delete the FBX file from Explorer,
    Unreal Engine will prompt whether you want to delete the asset file as well.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动删除资产**：如果启用，并且你从资源管理器中删除了FBX文件，Unreal Engine将提示你是否要删除资产文件。'
- en: Result
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结果
- en: 'When you import your asset, you will see the **Import Options** dialog. You
    can read all about the import settings here:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当你导入你的资产时，你将看到**导入选项**对话框。你可以在这里阅读有关导入设置的详细信息：
- en: '![Result](img/B03950_02_12.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![结果](img/B03950_02_12.jpg)'
- en: 'Once you click on **Import** (or **Import All** if you''re importing multiple
    FBX files) you will see the asset in **Content Browser**. In the following screenshot,
    see how Unreal automatically imported the material from Autodesk 3ds Max:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你点击**导入**（如果你正在导入多个FBX文件，则为**导入全部**），你将在**内容浏览器**中看到资产。在下面的截图中，你可以看到Unreal如何自动从Autodesk
    3ds Max导入材质：
- en: '![Result](img/B03950_02_13.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![结果](img/B03950_02_13.jpg)'
- en: If you double-click on the static mesh (**Tower_Example**), you will see the
    static mesh editor. In the following screenshot, you can see that Unreal successfully
    imported my custom collision shape too.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你双击静态网格（**Tower_Example**），你将看到静态网格编辑器。在下面的截图中，你可以看到Unreal成功导入了我的自定义碰撞形状。
- en: '![Result](img/B03950_02_14.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![结果](img/B03950_02_14.jpg)'
- en: Summary
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In the next chapter, you will learn more about **Materials** and **Textures**.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将了解更多关于**材质**和**纹理**的内容。
