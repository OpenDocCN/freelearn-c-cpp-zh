["```cpp\nMSBuild /version\n```", "```cpp\n    <Import Project=\"$(MSBuildBinPath)\\Microsoft.CSharp.targets\" />\n    ```", "```cpp\n    <Import Project=\"$(ProgramFiles)\\MSBuild\\StyleCop\\v4.7\\StyleCop.targets\" />\n    ```", "```cpp\n    <Project DefaultTargets=\"Build\" >\n      <PropertyGroup>\n        <Configuration Condition=\" '$(Configuration)' == '' \">\n            Debug\n        </Configuration>\n        <Platform Condition=\" '$(Platform)' == '' \">\n            AnyCPU\n        </Platform>\n        <ProductVersion>8.0.50727</ProductVersion>\n        <SchemaVersion>2.0</SchemaVersion>\n        <ProjectGuid>\n            {F029E8D9-743F-4C6F-95F3-6FBDA6477165}\n        </ProjectGuid>\n        <OutputType>Exe</OutputType>\n        <AppDesignerFolder>Properties</AppDesignerFolder>\n        <RootNamespace>VanillaProject</RootNamespace>\n        <AssemblyName>VanillaProject</AssemblyName>\n        <StyleCopMaxViolationCount>\n            100\n        </StyleCopMaxViolationCount>\n      </PropertyGroup>\n    ```", "```cpp\n<Compile Include=\"File.cs\"/>\n```", "```cpp\n<Compile Include=\"File.cs\"> \n  <ExcludeFromStyleCop>true</ExcludeFromStyleCop> \n</Compile>\n```", "```cpp\n    Net.SF.StyleCopCmd.Console.exe -ifp \"((.)*(Base*)(.)*(\\.cs))|((.)*(\\.Designer\\.cs))|(AssemblyInfo\\.cs)\" -sf \"..\\StylecopCustomRule\\StylecopCustomRule.sln\" -of \"stylecop-report.xml\"\n\n    ```", "```cpp\n    Pass 1:   StylecopCustomRule.csproj - MyCustomRule.cs\n    9 violations encountered.\n\n    ```", "```cpp\n    <styleCopCmd outputXmlFile=\"stylecop-report.xml\"\n                 transformFile=\"\"\n                 recursionEnabled=\"true\"\n                 ignorePatterns=\"AssemblyInfo\\.cs\"\n                 processorSymbols=\"\" \n                 styleCopSettingsFile=\"Stylecop.Settings\" >\n        <solutionFiles>\n            <include name=\"StylecopCustomRule.sln\" />\n        </solutionFiles>\n        <projectFiles />\n        <directories />\n        <files />\n    </styleCopCmd>\n    ```", "```cpp\n    NAnt 0.92 (Build 0.92.4543.0; release; 09/06/2012)\n    Copyright (C) 2001-2012 Gerry Shaw\n    http://nant.sourceforge.net\n\n    Buildfile: file:///C:/dev/StylecopCustomRule/bin/test.build\n    Target framework: Microsoft .NET Framework 4.0\n\n    [styleCopCmd] Pass 1:   StylecopCustomRule.csproj - MyCustomRule.cs\n    [styleCopCmd] 9 violations encountered.\n\n    BUILD SUCCEEDED\n\n    Total time: 1.6 seconds.\n\n    ```", "```cpp\n    <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n    <Project DefaultTargets=\"StyleCop\" >\n     <UsingTask TaskName=\"StyleCopTask\" AssemblyFile=\"$(MSBuildExtensionsPath)\\..\\StyleCop 4.7\\StyleCop.dll\" />\n      <PropertyGroup>\n        <!-- Set a default value of 1000000 as maximum Stylecop violations found -->\n        <StyleCopMaxViolationCount>1000000</StyleCopMaxViolationCount>\n      </PropertyGroup>\n      <Target Name=\"StyleCop\">\n\n        <!-- Get last violation count from file if exists -->\n     <ReadLinesFromFile Condition=\"Exists('violationCount.txt')\" File=\"violationCount.txt\">\n     <Output TaskParameter=\"Lines\" PropertyName=\"StyleCopMaxViolationCount\" />\n     </ReadLinesFromFile>\n\n        <!-- Create a collection of files to scan -->\n        <CreateItem Include=\".\\**\\*.cs\">\n          <Output TaskParameter=\"Include\" ItemName=\"StyleCopFiles\" />\n        </CreateItem>\n\n        <!-- Launch Stylecop task itself -->\n        <StyleCopTask\n          ProjectFullPath=\"$(MSBuildProjectFile)\"\n          SourceFiles=\"@(StyleCopFiles)\"\n          ForceFullAnalysis=\"true\"\n          TreatErrorsAsWarnings=\"true\"\n          OutputFile=\"StyleCopReport.xml\"\n          CacheResults=\"true\"\n          OverrideSettingsFile= \"StylecopCustomRule\\Settings.Stylecop\"\n          MaxViolationCount=\"$(StyleCopMaxViolationCount)\">\n\n          <!-- Set the returned number of violation -->\n     <Output TaskParameter=\"ViolationCount\" PropertyName=\"StyleCopViolationCount\" />\n        </StyleCopTask>\n\n        <!-- Write number of violation founds in last build -->\n     <WriteLinesToFile File=\"violationCount.txt\" Lines=\"$(StyleCopViolationCount)\" Overwrite=\"true\" />\n      </Target>\n    </Project>\n    ```", "```cpp\n    // <summary>\n    // {one line to give the library's name and an idea of what it does.}\n    // </summary>\n    // <copyright file=\"{File}\" company=\"{Company}\">\n    // Copyright (C) {year} {Company}\n    //\n    // This library is free software; you can redistribute it and/or\n    // modify it under the terms of the GNU Lesser General Public\n    // License as published by the Free Software Foundation; either\n    // version 2.1 of the License, or (at your option) any later version.\n    //\n    // This library is distributed in the hope that it will be useful,\n    // but WITHOUT ANY WARRANTY; without even the implied warranty of\n    // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n    // Lesser General Public License for more details.\n    //\n    // You should have received a copy of the GNU Lesser General Public\n    // License along with this library; if not, write to the Free Software\n    // Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n    // </copyright>\n\n    ```", "```cpp\n    // <copyright file=\"$safeitemname$.cs\" company=\"$registeredorganization$\">\n    // Copyright (C) $year$ $registeredorganization$\n\n    ```", "```cpp\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<CodeSnippets >\n  <CodeSnippet Format=\"1.0.0\">\n    <Header>\n      <Title>Add LGPL License</Title>\n      <Author>Franck LEVEQUE</Author>\n      <Description>Add LGPL License to a file</Description>\n      <Shortcut>copyright</Shortcut>\n    </Header>\n    <Snippet>\n      <Declarations>\n        <Literal Editable=\"true\">\n          <ID>Description</ID>\n          <ToolTip>Insert here your project description </ToolTip>\n          <Default>Project description</Default>\n        </Literal>\n        <Literal Editable=\"true\">\n          <ID>ClassName</ID>\n          <Default>ClassNamePlaceHolder</Default>\n        </Literal>\n        <Literal Editable=\"true\">\n          <ID>Company</ID>\n          <Default>Company</Default>\n        </Literal>\n        <Literal Editable=\"true\">\n          <ID>year</ID>\n          <Default>Year</Default>\n        </Literal>\n      </Declarations>\n      <Code Language=\"csharp\" Kind=\"\" Delimiter=\"$\"><![CDATA[// <summary>\n// $Description$\n// </summary>\n// <copyright file=\"$ClassName$.cs\" company=\"$Company$\">\n// Copyright (C) $year$ $Company$\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms of the GNU Lesser General Public\n// License as published by the Free Software Foundation; either\n// version 2.1 of the License, or (at your option) any later version.\n//\n// This library is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public\n// License along with this library; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA  \n// </copyright>]]></Code>\n    </Snippet>\n  </CodeSnippet>\n</CodeSnippets>\n```", "```cpp\n    <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n    <SourceAnalyzer Name=\"NamingExtension\">\n     <Description>\n        Naming rules extending Stylecop.\n      </Description>\n     <Properties>\n        <BooleanProperty\n          Name=\"UseTokenAnalysis\"\n          DefaultValue=\"true\"\n          FriendlyName=\"Token Analysis\"\n          Description=\"Indicates whether the analyzer of document will the token analysis or the visitor pattern analysis.\"\n          DisplaySettings=\"true\"/>\n      </Properties>\n     <Rules>\n        <Rule Name=\"NonPublicFieldsMustBeginBy\" CheckId=\"NE1001\">\n          <Context>Instance fields should be prefixed.</Context>\n          <Description>Instance fields should be prefixed to allow a better visibility of non public fields.</Description>\n        </Rule>\n      </Rules>\n    </SourceAnalyzer>\n    ```", "```cpp\n    using System;\n    using System.Linq;\n\n    using StyleCop;\n    using StyleCop.CSharp;\n\n    namespace StylecopCustomRule\n    {\n        /// <summary>\n        /// Description of custom rule for stylecop\n        /// </summary>\n     [SourceAnalyzer(typeof (CsParser))]\n     public class NonPublicFieldsMustBeginBy : SourceAnalyzer\n        {\n     public override void AnalyzeDocument(CodeDocument document)\n            {\n                var csDocument = (CsDocument) document;\n\n                // General settings\n                var generalSettings = (from parser in document.Settings.ParserSettings\n                             where parser.AddIn.GetType().Equals(typeof(CsParser))\n                             select parser).Single();\n                BooleanProperty analyseGeneratedFiles = (BooleanProperty)generalSettings[«AnalyzeGeneratedFiles»];\n\n                if (csDocument.RootElement != null &&\n                   (analyseGeneratedFiles.Value || !csDocument.RootElement.Generated))\n                {\n     csDocument.WalkDocument(new CodeWalkerElementVisitor<object>(this.VisitElement), null, null);\n                }\n            }\n\n     private bool VisitElement(CsElement element, CsElement parentElement, object context)\n            {\n                if (element.ElementType == ElementType.Field && \n                    element.ActualAccess != AccessModifierType.Public &&\n                    element.ActualAccess != AccessModifierType.Internal && \n                    !element.Declaration.Name.StartsWith(\"_\"))\n                {\n     this.AddViolation(element, \"NonPublicFieldsMustBeginBy\", new object[0]);\n                }\n\n                return true;\n            }\n        }\n    }\n    ```", "```cpp\nif (csDocument.RootElement != null && (analyseGeneratedFiles.Value || !csDocument.RootElement.Generated))\n{\n   Array.ForEach(\n       (from token in csDocument.Tokens\n        let element = token.FindParentElement()\n        where token.CsTokenClass == CsTokenClass.Token &&\n        token.CsTokenType == CsTokenType.Other &&\n        element.ElementType == ElementType.Field &&\n        element.ActualAccess != AccessModifierType.Public &&\n        element.ActualAccess != AccessModifierType.Internal &&\n        !token.Text.StartsWith(\"_\")\n        select element).ToArray(),\n        a => this.AddViolation(\n        a, \n        \"NonPublicFieldsMustBeginByUnderscore\", \n        new object[0]));                \n}\n```", "```cpp\n    this.console = new StyleCopConsole(null, true, null, null, true);\n    this.console.OutputGenerated += this.OnOutputGenerated;\n    this.console.ViolationEncountered += this.OnViolationEncountered;\n    ```", "```cpp\n    Configuration configuration = new Configuration(new string[0]);\n    List<CodeProject> projects = new List<CodeProject>();\n    CodeProject project = new CodeProject(IdeApp.ProjectOperations.CurrentSelectedProject.BaseDirectory.GetHashCode(),IdeApp.ProjectOperations.CurrentSelectedProject.BaseDirectory, \n    configuration);\n\n    // Add each source file to this project.                              this.console.Core.Environment.AddSourceCode(project, tmpFileName, null);\n    projects.Add(project);\n    this.console.Start(projects, false);\n    ```"]