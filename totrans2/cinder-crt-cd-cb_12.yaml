- en: Chapter 12. Using Audio Input and Output
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 12 章。使用音频输入和输出
- en: In this chapter, we will learn how to generate sounds using examples of ways
    to generate sounds driven by physics simulation. We will also present examples
    of visualizing sound with audio reactive animations.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过物理模拟驱动声音生成的示例来学习如何生成声音。我们还将展示使用音频反应动画可视化声音的示例。
- en: 'The following recipes will cover:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 以下食谱将涵盖：
- en: Generating a sine oscillator
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成正弦振荡器
- en: Generating sound with frequency modulation
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用频率调制生成声音
- en: Adding a delay effect
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加延迟效果
- en: Generating sound upon the collision of objects
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在物体碰撞时生成声音
- en: Visualizing FFT
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可视化 FFT
- en: Making sound-reactive particles
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制作声音反应粒子
- en: Generating a sine oscillator
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成正弦振荡器
- en: In this recipe, we will learn how to generatively create a sine wave oscillator
    by manipulating the sound card's **PCM** (**Pulse-code Modulation** ) audio buffer.
    The frequency of the sine wave will be defined by the mouse's y coordinate.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将学习如何通过操纵声卡的 **PCM** （**脉冲编码调制**）音频缓冲区来生成正弦波振荡器。正弦波的频率将由鼠标的 y 坐标定义。
- en: We will also draw the sine wave for a visual representation.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将绘制正弦波以进行可视化表示。
- en: Getting ready
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Include the following files:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 包含以下文件：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'And add the following useful `using` statements:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 并添加以下有用的 `using` 语句：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How to do it…
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'We will create a sine wave oscillator using the following steps:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将按照以下步骤创建正弦波振荡器：
- en: 'Declare the following member variables and the callback method:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明以下成员变量和回调方法：
- en: '[PRE2]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the `setup` module we will initialize the variables and create the audio
    callback using the following code:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `setup` 模块中，我们将初始化变量并使用以下代码创建音频回调：
- en: '[PRE3]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the `update` module we will update `mFrequency` based on the mouse''s `y`
    position. The mouse''s position will be mapped and clamped to a frequency value
    between `0` and `5000`:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `update` 模块中，我们将根据鼠标的 `y` 位置更新 `mFrequency`。鼠标的位置将被映射并夹在 `0` 和 `5000` 之间的频率值：
- en: '[PRE4]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s implement the audio callback. We''ll begin by resizing `mOutput` if
    necessary. Then we will calculate and interpolate `mPhaseAdd`, and then loop through
    all the values in the audio buffer and calculate their values based on the sine
    of `mPhase` and add `mPhaseAdd` to `mPhase`:'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们实现音频回调。我们首先根据需要调整 `mOutput` 的大小。然后我们将计算并插值 `mPhaseAdd`，接着遍历音频缓冲区中的所有值，并根据
    `mPhase` 的正弦值计算它们的值，并将 `mPhaseAdd` 添加到 `mPhase`：
- en: '[PRE5]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finally, we need to draw the sine wave. In the `draw` method, we will clear
    the background with black and draw a scaled up sine wave with a line strip using
    the values stored in `mOutput`:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要绘制正弦波。在 `draw` 方法中，我们将用黑色清除背景，并使用存储在 `mOutput` 中的值绘制放大后的正弦波，使用线条条带：
- en: '[PRE6]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Build and run the application. Move the mouse vertically to change the frequency.
    A line representing the generated sine wave is shown in the following screenshot:![How
    to do it…](img/8703OS_12_01.jpg)
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建并运行应用程序。垂直移动鼠标以更改频率。以下屏幕截图显示了表示生成的正弦波的线条：![如何操作…](img/8703OS_12_01.jpg)
- en: How it works…
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: We are manipulating the PCM buffer. PCM is a method to represent audio through
    values' samples at regular intervals. By accessing the PCM buffer, we can directly
    manipulate the audio signal that will be output by the sound card.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在操作 PCM 缓冲区。PCM 是一种通过在固定间隔内对值进行采样来表示音频的方法。通过访问 PCM 缓冲区，我们可以直接操纵声卡将输出的音频信号。
- en: Every time the `audioCallback` method is called, we receive a sample of the
    PCM buffer, where we calculate the values to generate a continuous sine wave.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 每当调用 `audioCallback` 方法时，我们都会收到 PCM 缓冲区的一个样本，其中我们计算生成连续正弦波所需的值。
- en: In the `update` module, we calculate the frequency by mapping the mouse's `y`
    position.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `update` 模块中，我们通过映射鼠标的 `y` 位置来计算频率。
- en: 'In the following line in the `audioCallback` implementation, we calculate how
    much `mPhase` has to increase based on a sample rate of `44100` to generate a
    wave with a frequency of `mFrequency`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `audioCallback` 实现的以下行中，我们根据 `44100` 的采样率计算 `mPhase` 需要增加多少以生成频率为 `mFrequency`
    的波：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Generating sound with frequency modulation
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用频率调制生成声音
- en: In this recipe, we will learn how to modulate a sine wave oscillator using another
    low frequency sine wave.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将学习如何使用另一个低频正弦波来调制正弦波振荡器。
- en: We will be basing this recipe on the previous recipe, where the `y` position
    of the mouse controlled the frequency of the sine wave; in this recipe, we will
    use the `x` position of the mouse to control the modulation frequency.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将基于前一个菜谱，其中鼠标的 `y` 位置控制正弦波的频率；在这个菜谱中，我们将使用鼠标的 `x` 位置来控制调制频率。
- en: Getting ready
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will be using the code from the previous recipe, *Generating a sine oscillator*.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用前一个菜谱中的代码，*生成正弦振荡器*。
- en: How to do it…
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: We will multiply the sine wave created in the previous recipe with another low
    frequency sine wave.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用前一个菜谱中创建的正弦波与另一个低频正弦波相乘。
- en: 'Add the following member variables:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下成员变量：
- en: '[PRE8]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Add the following in the `setup` module to initialize the variables created
    previously:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `setup` 模块中添加以下内容以初始化之前创建的变量：
- en: '[PRE9]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the `update` module, add the following code to calculate the modulation
    frequency based on the `x` position of the mouse cursor:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `update` 模块中，添加以下代码以根据鼠标光标的 `x` 位置计算调制频率：
- en: '[PRE10]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We will need to calculate another sine wave using `mModFrequency`, `mModPhase`,
    and `mModPhaseAdd`, and use it to modulate our first sine wave.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要使用 `mModFrequency`、`mModPhase` 和 `mModPhaseAdd` 计算另一个正弦波，并使用它来调制我们的第一个正弦波。
- en: 'The following is the implementation of `audioCallback`:'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是对 `audioCallback` 的实现：
- en: '[PRE11]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Build and run the application. Move the mouse cursor over the y axis to determine
    the frequency, and over the x axis to determine the modulation frequency.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建并运行应用程序。将鼠标光标移至 y 轴以确定频率，移至 x 轴以确定调制频率。
- en: We can see how the sine wave created changes in the previous recipe, in the
    amplitude as it is multiplied by another low frequency sine wave.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在前一个菜谱中看到正弦波的变化，它在乘以另一个低频正弦波时，幅度会发生变化。
- en: '![How to do it…](img/8703OS_12_02.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![如何做…](img/8703OS_12_02.jpg)'
- en: How it works…
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: We calculate a second sine wave with a **low frequency oscillation** (**LFO**)
    and use it to modulate the first sine wave. To modulate the waves, we multiply
    them by each other.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用低频振荡（**LFO**）计算第二个正弦波，并使用它来调制第一个正弦波。为了调制波，我们将它们相乘。
- en: Adding a delay effect
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加延迟效果
- en: In this recipe, we will learn how to add a delay effect to the frequency modulation
    audio generated in the previous recipe.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将学习如何将延迟效果添加到前一个菜谱中生成的频率调制音频。
- en: Getting ready
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will use the source code from the previous recipe, *Generating sound with
    frequency modulation*.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用前一个菜谱，*使用频率调制生成声音* 的源代码。
- en: How to do it…
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'We will store our audio values and play them after an interval to achieve a
    delay effect using the following steps:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过以下步骤存储我们的音频值并在一段时间后播放它们，以实现延迟效果：
- en: 'Add the following member variables:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下成员变量：
- en: '[PRE12]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Let's initialize the variables created above and initialize our delay line with
    zeros.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们初始化上面创建的变量，并用零初始化我们的延迟行。
- en: 'Then add the following in the `setup` method:'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后在 `setup` 方法中添加以下内容：
- en: '[PRE13]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the implementation of our `audioCallback` method, we will read back from
    the buffer the values that were generated in the frequency modulation and calculate
    the delay.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们 `audioCallback` 方法的实现中，我们将从缓冲区中读取在频率调制中生成的值，并计算延迟。
- en: The final value is again passed into the buffer for output.
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最终值再次传递到缓冲区以输出。
- en: 'Add the following code in the `audioCallback` method:'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 `audioCallback` 方法中添加以下代码：
- en: '[PRE14]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Build and run the application. By moving the mouse in the x axis, you control
    the oscillator frequency, and by moving the mouse in the y axis, you control the
    modulation frequency. The output will contain a delay effect as shown in the following
    screenshot:![How to do it…](img/8703OS_12_03.jpg)
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建并运行应用程序。通过在 x 轴上移动鼠标，你控制振荡器频率，通过在 y 轴上移动鼠标，你控制调制频率。输出将包含以下截图所示的延迟效果：![如何做…](img/8703OS_12_03.jpg)
- en: How it works...
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: A delay is an audio effect where an input is stored and then played back after
    a determined amount of time. We achieve this by creating a buffer the size of
    `mDelay` multiplied by the frequency rate. Each time `audioCallback` gets called,
    we read from the delay line and update the delay line with the current output
    value. We then add the delay value to the output and advance `mDelayIndex`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 延迟是一种音频效果，其中输入被存储，然后在确定的时间后播放。我们通过创建一个大小为 `mDelay` 乘以频率率的缓冲区来实现这一点。每次 `audioCallback`
    被调用时，我们从延迟行中读取，并使用当前输出值更新延迟行。然后我们将延迟值添加到输出中，并前进 `mDelayIndex`。
- en: Generating sound upon the collision of objects
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在对象碰撞时生成声音
- en: In this recipe, we will learn how to apply simple physics to object particles
    and generate sound upon the collision of two objects.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将学习如何将简单的物理应用到对象粒子，并在两个对象碰撞时生成声音。
- en: Getting ready
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this example, we are using code described in the recipe *Generating a sine
    oscillator* in this chapter, so please refer to that recipe.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们使用本章中描述的“生成正弦振荡器”配方中的代码，请参阅该配方。
- en: How to do it…
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'We will create a Cinder application to illustrate the mechanism:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个Cinder应用程序来展示该机制：
- en: 'Include the following necessary header files:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含以下必要的头文件：
- en: '[PRE15]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Add members to the application''s `main` class for particle simulation:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向应用程序的`main`类添加成员以进行粒子模拟：
- en: '[PRE16]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Add members to the application''s `main` class to make the particles interactive:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向应用程序的`main`类添加成员以使粒子交互式：
- en: '[PRE17]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Add members for the generation of sound:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加生成声音的成员：
- en: '[PRE18]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Initialize the particle system inside the `setup` method:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`setup`方法中初始化粒子系统：
- en: '[PRE19]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Initialize the members to generate sound and register an audio callback inside
    the `setup` method:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`setup`方法中初始化生成声音的成员并注册音频回调：
- en: '[PRE20]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Implement the `resize` method to update the attractor position whenever an
    application window will be resized:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现一个`resize`方法，以便在应用程序窗口调整大小时更新吸引子位置：
- en: '[PRE21]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Implement the mouse events handlers for mouse interaction with particles:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现鼠标事件处理程序以与粒子进行交互：
- en: '[PRE22]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Inside the `update` method, add the following code for sound frequency calculation:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`update`方法中，添加以下代码进行声音频率计算：
- en: '[PRE24]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Inside the `update` method, add the following code for particle movement calculation.
    At this point, we are detecting collisions and calculating the sound frequency:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`update`方法中，添加以下代码进行粒子运动计算。在此阶段，我们正在检测碰撞并计算声音频率：
- en: '[PRE25]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Update position of dragging particle, if any, and update particle system:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新拖拽粒子的位置（如果有），并更新粒子系统：
- en: '[PRE26]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Draw particles by implementing the `draw` method as follows:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过以下方式实现`draw`方法来绘制粒子：
- en: '[PRE27]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Implement audio callback handler as covered in the recipe *Generating a sine
    oscillator*.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现与“生成正弦振荡器”配方中所述的音频回调处理程序。
- en: How it works…
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: We are generating random particles with applied physics and collision detection.
    While collision is detected, a frequency of a sine wave is calculated based on
    the particles' radii.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在生成应用了物理和碰撞检测的随机粒子。当检测到碰撞时，根据粒子的半径计算正弦波的频率。
- en: '![How it works…](img/8703OS_12_04.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的…](img/8703OS_12_04.jpg)'
- en: Inside the `update` method, we are iterating through the particles and checking
    the distance between each of them to detect collision, if it occurs. A generated
    frequency is calculated from the radii of the colliding particles—the bigger the
    radius, the lower the frequency of the sound.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在`update`方法中，我们正在遍历粒子并检查它们之间的距离以检测碰撞，如果发生碰撞。从碰撞粒子的半径计算出一个频率，半径越大，声音的频率越低。
- en: Visualizing FFT
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可视化FFT
- en: In this recipe, we will show an example of **FFT** (**Fast Fourier Transform**)
    data visualization on a circular layout with some smooth animation.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将展示一个示例，说明如何在圆形布局上使用**FFT**（**快速傅里叶变换**）数据可视化，并添加一些平滑动画。
- en: Getting ready
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Save you favorite music piece in assets folder with the name `music.mp3`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 将您最喜欢的音乐作品以`music.mp3`的名称保存在资产文件夹中。
- en: How to do it…
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'We will create visualization based on an example FFT analysis using the following
    steps:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将根据以下步骤创建基于示例FFT分析的可视化：
- en: 'Include the following necessary header files:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含以下必要的头文件：
- en: '[PRE28]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Add the following members to your main application class:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向您的应用程序主类添加以下成员：
- en: '[PRE29]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Inside the `setup` method, initialize the members and load the sound file from
    the assets folder. We are decomposing the signal into 32 frequencies using FFT:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`setup`方法中，初始化成员并从资产文件夹中加载声音文件。我们使用FFT将信号分解成32个频率：
- en: '[PRE30]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Implement the `update` method as follows:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式实现`update`方法：
- en: '[PRE31]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Implement the `draw` method as follows:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式实现`draw`方法：
- en: '[PRE32]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Implement the `drawFft` method as follows:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式实现`drawFft`方法：
- en: '[PRE33]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: How it works…
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: We can divide visualization into bands, and the grey circle with alpha in the
    center. Bands are straight representations of data calculated by the `audio::calculateFft`
    function, and animated with some smoothing by going back towards the center. The
    grey circle shown in the following screenshot represents the average level of
    all the bands.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将可视化分为频段，中心带有alpha值的灰色圆圈。频段是`audio::calculateFft`函数计算出的数据的直接表示，并通过向中心回退进行一些平滑动画。以下屏幕截图所示的灰色圆圈代表所有频段的平均电平：
- en: FFT is an algorithm to compute **DFT** (**Discrete Fourier Transform**), which
    decomposes the signal into list of different frequencies.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: FFT是一种计算**DFT**（**离散傅里叶变换**）的算法，它将信号分解为不同频率的列表。
- en: '![How it works…](img/8703OS_12_05.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作…](img/8703OS_12_05.jpg)'
- en: Making sound-reactive particles
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作声音响应的粒子
- en: In this recipe, we will show an example of audio visualization based on audio-reactive
    particles.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将展示一个基于音频响应粒子的音频可视化示例。
- en: Getting ready
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Save your favorite music piece in assets folder with the name `music.mp3`.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 将您最喜欢的音乐作品以`music.mp3`的名称保存在资产文件夹中：
- en: Please refer to [Chapter 6](ch06.html "Chapter 6. Rendering and Texturing Particle
    Systems"), *Adding a Tail to Our Particles*, for instructions on how to draw particles
    with a tile.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[第6章](ch06.html "第6章。渲染和纹理化粒子系统"，"给我们的粒子添加尾巴")，了解如何使用瓦片绘制粒子的说明：
- en: How to do it…
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'We will create a sample audio-reactive visualization using the following steps:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将按照以下步骤创建一个示例音频响应可视化：
- en: 'Add the following necessary header files:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下必要的头文件：
- en: '[PRE34]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Add the following members for audio playback and analysis:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下用于音频播放和分析的成员：
- en: '[PRE35]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Add the following members for particle simulation:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下用于粒子模拟的成员：
- en: '[PRE36]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Inside the `setup` method, initialize the simulation of the members and particles:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`setup`方法内部，初始化成员和粒子的模拟：
- en: '[PRE37]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Inside the `setup` method, initialize camera and audio playback:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`setup`方法内部，初始化相机和音频播放：
- en: '[PRE38]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Implement the `resize` method for updating camera properties in regards to
    resizing windows:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现用于更新相机属性以适应窗口大小的`resize`方法：
- en: '[PRE39]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Inside the `update` method, implement a simple beat detection. We are decomposing
    the signal into 32 frequencies using FFT:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`update`方法内部，实现简单的节拍检测。我们使用FFT将信号分解为32个频率：
- en: '[PRE40]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Also, inside the `update` method, calculate the particle simulation:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，在`update`方法内部，计算粒子模拟：
- en: '[PRE41]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Implement the `draw` method as follows:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式实现`draw`方法：
- en: '[PRE42]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: How it works…
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作…
- en: A particle is drawn as a black dot, or more precisely a sphere and a line as
    a tail. Due to specific frequency difference, forces repelling particles from
    the center of the attractor are applied, with a random vector added to these forces.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 粒子被绘制为黑点，或者更准确地说是一个球体和一个尾巴。由于特定的频率差异，施加了从吸引子中心排斥粒子的力，并添加了一个随机向量到这些力中。
- en: '![How it works…](img/8703OS_12_06.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作…](img/8703OS_12_06.jpg)'
- en: There's more…
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: You might want to customize the visualization for a specific music piece.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能想要为特定的音乐作品自定义可视化：
- en: Adding GUI to tweak parameters
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加GUI调整参数
- en: 'We will add GUI that affects particles'' behavior using the following steps:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将按照以下步骤添加影响粒子行为的GUI：
- en: 'Add the following necessary header file:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下必要的头文件：
- en: '[PRE43]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Add the following member to your application''s `main` class:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下成员添加到您的应用程序的`main`类中：
- en: '[PRE44]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'At the end of the `setup` method, initialize GUI using the following code:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`setup`方法结束时，使用以下代码初始化GUI：
- en: '[PRE45]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'At the and of the `draw` method, add the following code:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`draw`方法结束时，添加以下代码：
- en: '[PRE46]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
