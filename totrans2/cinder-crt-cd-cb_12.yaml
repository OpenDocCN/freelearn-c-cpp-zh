- en: Chapter 12. Using Audio Input and Output
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to generate sounds using examples of ways
    to generate sounds driven by physics simulation. We will also present examples
    of visualizing sound with audio reactive animations.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following recipes will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Generating a sine oscillator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating sound with frequency modulation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a delay effect
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating sound upon the collision of objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualizing FFT
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making sound-reactive particles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating a sine oscillator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to generatively create a sine wave oscillator
    by manipulating the sound card's **PCM** (**Pulse-code Modulation** ) audio buffer.
    The frequency of the sine wave will be defined by the mouse's y coordinate.
  prefs: []
  type: TYPE_NORMAL
- en: We will also draw the sine wave for a visual representation.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Include the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'And add the following useful `using` statements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will create a sine wave oscillator using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Declare the following member variables and the callback method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `setup` module we will initialize the variables and create the audio
    callback using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `update` module we will update `mFrequency` based on the mouse''s `y`
    position. The mouse''s position will be mapped and clamped to a frequency value
    between `0` and `5000`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s implement the audio callback. We''ll begin by resizing `mOutput` if
    necessary. Then we will calculate and interpolate `mPhaseAdd`, and then loop through
    all the values in the audio buffer and calculate their values based on the sine
    of `mPhase` and add `mPhaseAdd` to `mPhase`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we need to draw the sine wave. In the `draw` method, we will clear
    the background with black and draw a scaled up sine wave with a line strip using
    the values stored in `mOutput`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Build and run the application. Move the mouse vertically to change the frequency.
    A line representing the generated sine wave is shown in the following screenshot:![How
    to do it…](img/8703OS_12_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are manipulating the PCM buffer. PCM is a method to represent audio through
    values' samples at regular intervals. By accessing the PCM buffer, we can directly
    manipulate the audio signal that will be output by the sound card.
  prefs: []
  type: TYPE_NORMAL
- en: Every time the `audioCallback` method is called, we receive a sample of the
    PCM buffer, where we calculate the values to generate a continuous sine wave.
  prefs: []
  type: TYPE_NORMAL
- en: In the `update` module, we calculate the frequency by mapping the mouse's `y`
    position.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following line in the `audioCallback` implementation, we calculate how
    much `mPhase` has to increase based on a sample rate of `44100` to generate a
    wave with a frequency of `mFrequency`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Generating sound with frequency modulation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to modulate a sine wave oscillator using another
    low frequency sine wave.
  prefs: []
  type: TYPE_NORMAL
- en: We will be basing this recipe on the previous recipe, where the `y` position
    of the mouse controlled the frequency of the sine wave; in this recipe, we will
    use the `x` position of the mouse to control the modulation frequency.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be using the code from the previous recipe, *Generating a sine oscillator*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will multiply the sine wave created in the previous recipe with another low
    frequency sine wave.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following member variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following in the `setup` module to initialize the variables created
    previously:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `update` module, add the following code to calculate the modulation
    frequency based on the `x` position of the mouse cursor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We will need to calculate another sine wave using `mModFrequency`, `mModPhase`,
    and `mModPhaseAdd`, and use it to modulate our first sine wave.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following is the implementation of `audioCallback`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Build and run the application. Move the mouse cursor over the y axis to determine
    the frequency, and over the x axis to determine the modulation frequency.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can see how the sine wave created changes in the previous recipe, in the
    amplitude as it is multiplied by another low frequency sine wave.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/8703OS_12_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We calculate a second sine wave with a **low frequency oscillation** (**LFO**)
    and use it to modulate the first sine wave. To modulate the waves, we multiply
    them by each other.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a delay effect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to add a delay effect to the frequency modulation
    audio generated in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use the source code from the previous recipe, *Generating sound with
    frequency modulation*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will store our audio values and play them after an interval to achieve a
    delay effect using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following member variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Let's initialize the variables created above and initialize our delay line with
    zeros.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Then add the following in the `setup` method:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the implementation of our `audioCallback` method, we will read back from
    the buffer the values that were generated in the frequency modulation and calculate
    the delay.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The final value is again passed into the buffer for output.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following code in the `audioCallback` method:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Build and run the application. By moving the mouse in the x axis, you control
    the oscillator frequency, and by moving the mouse in the y axis, you control the
    modulation frequency. The output will contain a delay effect as shown in the following
    screenshot:![How to do it…](img/8703OS_12_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A delay is an audio effect where an input is stored and then played back after
    a determined amount of time. We achieve this by creating a buffer the size of
    `mDelay` multiplied by the frequency rate. Each time `audioCallback` gets called,
    we read from the delay line and update the delay line with the current output
    value. We then add the delay value to the output and advance `mDelayIndex`.
  prefs: []
  type: TYPE_NORMAL
- en: Generating sound upon the collision of objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to apply simple physics to object particles
    and generate sound upon the collision of two objects.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we are using code described in the recipe *Generating a sine
    oscillator* in this chapter, so please refer to that recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will create a Cinder application to illustrate the mechanism:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Include the following necessary header files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add members to the application''s `main` class for particle simulation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add members to the application''s `main` class to make the particles interactive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add members for the generation of sound:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Initialize the particle system inside the `setup` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Initialize the members to generate sound and register an audio callback inside
    the `setup` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement the `resize` method to update the attractor position whenever an
    application window will be resized:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement the mouse events handlers for mouse interaction with particles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the `update` method, add the following code for sound frequency calculation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the `update` method, add the following code for particle movement calculation.
    At this point, we are detecting collisions and calculating the sound frequency:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update position of dragging particle, if any, and update particle system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Draw particles by implementing the `draw` method as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Implement audio callback handler as covered in the recipe *Generating a sine
    oscillator*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are generating random particles with applied physics and collision detection.
    While collision is detected, a frequency of a sine wave is calculated based on
    the particles' radii.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/8703OS_12_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Inside the `update` method, we are iterating through the particles and checking
    the distance between each of them to detect collision, if it occurs. A generated
    frequency is calculated from the radii of the colliding particles—the bigger the
    radius, the lower the frequency of the sound.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing FFT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will show an example of **FFT** (**Fast Fourier Transform**)
    data visualization on a circular layout with some smooth animation.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Save you favorite music piece in assets folder with the name `music.mp3`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will create visualization based on an example FFT analysis using the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Include the following necessary header files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following members to your main application class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the `setup` method, initialize the members and load the sound file from
    the assets folder. We are decomposing the signal into 32 frequencies using FFT:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement the `update` method as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement the `draw` method as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement the `drawFft` method as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can divide visualization into bands, and the grey circle with alpha in the
    center. Bands are straight representations of data calculated by the `audio::calculateFft`
    function, and animated with some smoothing by going back towards the center. The
    grey circle shown in the following screenshot represents the average level of
    all the bands.
  prefs: []
  type: TYPE_NORMAL
- en: FFT is an algorithm to compute **DFT** (**Discrete Fourier Transform**), which
    decomposes the signal into list of different frequencies.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/8703OS_12_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Making sound-reactive particles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will show an example of audio visualization based on audio-reactive
    particles.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Save your favorite music piece in assets folder with the name `music.mp3`.
  prefs: []
  type: TYPE_NORMAL
- en: Please refer to [Chapter 6](ch06.html "Chapter 6. Rendering and Texturing Particle
    Systems"), *Adding a Tail to Our Particles*, for instructions on how to draw particles
    with a tile.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will create a sample audio-reactive visualization using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following necessary header files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following members for audio playback and analysis:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following members for particle simulation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the `setup` method, initialize the simulation of the members and particles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the `setup` method, initialize camera and audio playback:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement the `resize` method for updating camera properties in regards to
    resizing windows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the `update` method, implement a simple beat detection. We are decomposing
    the signal into 32 frequencies using FFT:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, inside the `update` method, calculate the particle simulation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement the `draw` method as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A particle is drawn as a black dot, or more precisely a sphere and a line as
    a tail. Due to specific frequency difference, forces repelling particles from
    the center of the attractor are applied, with a random vector added to these forces.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/8703OS_12_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You might want to customize the visualization for a specific music piece.
  prefs: []
  type: TYPE_NORMAL
- en: Adding GUI to tweak parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will add GUI that affects particles'' behavior using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following necessary header file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following member to your application''s `main` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At the end of the `setup` method, initialize GUI using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At the and of the `draw` method, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
