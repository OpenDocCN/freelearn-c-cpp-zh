["```cpp\n#include \"SimpleAudioEngine.h\"\n```", "```cpp\nauto audio = CocosDenshion::SimpleAudioEngine::getInstance();\naudio->preloadBackgroundMusic(\"background.mp3\");\n\n// play the background music and continuously play it.\naudio->playBackgroundMusic(\"background.mp3\", true);\n```", "```cpp\n#if (CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID) \n#defie MUSIC_FILE        \"background.ogg\" \n#else\n#define MUSIC_FILE        \"background.caf\" \n#endif\n\naudio->playBackgroundMusic(MUSIC_FILE, true);\n```", "```cpp\n#include \"SimpleAudioEngine.h\"\n```", "```cpp\n#if (CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID) \n#define EFFECT_FILE        \"effect.ogg\" \n#else \n#define EFFECT_FILE        \"effect.caf\" \n#endif\n\nauto audio = CocosDenshion::SimpleAudioEngine::getInstance();\naudio->preloadEffect( EFFECT_FILE ); \naudio->playEffect(EFFECT_FILE); \n```", "```cpp\nprivate static final int MAX_SIMULTANEOUS_STREAMS_DEFAULT = 5;\n```", "```cpp\nauto audio = CocosDenshion::SimpleAudioEngine::getInstance(); \n// set volume \naudio->setEffectsVolume(0.5); \n\n// set pitch, pan, gain with playing a sound effect.\nfloat pitch = 1.0f;\nfloat pan = 1.0f;\nfloat gain = 1.0f;\naudio->playEffect(EFFECT_FILE, true, pitch, pan, gain);\n```", "```cpp\nauto audio = CocosDenshion::SimpleAudioEngine::getInstance();\n// stop the background music\naudio->stopBackgroundMusic();\n```", "```cpp\n// pause the background music \naudio->pauseBackgroundMusic();\n```", "```cpp\n// resume the background music \naudio->resumeBackgroundMusic();\n```", "```cpp\nauto audio = CocosDenshion::SimpleAudioEngine::getInstance();\nif (audio->isBackgroundMusicPlaying()) { \n    // background music is playing \n} else { // background music is not playing \n}\n```", "```cpp\nauto audio = CocosDenshion::SimpleAudioEngine::getInstance();\nunsigned int _soundId; \n// get the sound id as playing the sound effect\n_soundId = audio->playEffect(EFFECT_FILE); \n// stop the sound effect by specifying the sound id\naudio->stopEffect(_soundId);\n```", "```cpp\n// pause the sound effect\naudio->pauseEffect(_soundId);\n```", "```cpp\n// resume the sound effect\naudio->resumeEffect(_soundId);\n```", "```cpp\nauto audio = CocosDenshion::SimpleAudioEngine::getInstance();\n// stop all sound effects audio->stopAllEffects();\n// pause all sound effects\naudio->pauseAllEffects();\n// resume all sound effects\naudio->resumeAllEffects();\n```", "```cpp\n#include \"audio/include/AudioEngine.h\" USING_NS_CC; \nusing namespace experimental;\n```", "```cpp\n// play the background music \nint id = AudioEngine::play2d(\"sample_bgm.mp3\"); \n// set continuously play\nAudioEngine::setLoop(id, true); \n// change the volume, the value is from 0.0 to 1.0 \nAudioEngine::setVolume(id, 0.5f); \n// pause it\nAudioEngine::pause(id); \n// resume it that was pausing \nAudioEngine::resume(id); \n// stop it\nAudioEngine::stop(id); \n// seek it by specifying the time \nAudioEngine::setCurrentTime(int id, 12.3f); \n// set the callback when it finished playing it\nAudioEngine::setFinishCallback(int id, [](int audioId, std::string filePath){ \n    // this is the process when the background music was finished.\n});\n```", "```cpp\n    #include \"ui/CocosGUI.h\"\n    USING_NS_CC;\n    using namespace experimental::ui;\n    ```", "```cpp\n    LOCAL_WHOLE_STATIC_LIBRARIES += cocos_ui_static\n    $(call import-module,ui)\n    ```", "```cpp\nauto visibleSize = Director::getInstance()->getVisibleSize(); auto videoPlayer = VideoPlayer::create(); \n\nvideoPlayer->setContentSize(visibleSize); \nvideoPlayer->setPosition(visibleSize/2); \nvideoPlayer->setKeepAspectRatioEnabled(true); \nthis->addChild(videoPlayer);\n\nvideoPlayer->addEventListener([](Ref *sender, \nVideoPlayer::EventType eventType) { \n    switch (eventType) { \n        case VideoPlayer::EventType::PLAYING: \n            CCLOG(\"PLAYING\");\n            break;\n        case VideoPlayer::EventType::PAUSED: \n            CCLOG(\"PAUSED\"); \n            break;\n        case VideoPlayer::EventType::STOPPED: \n            CCLOG(\"STOPPED\"); \n            break;\n        case VideoPlayer::EventType::COMPLETED: \n            CCLOG(\"COMPLETED\"); \n            break; \n        default:\n            break; \n    }\n});\n\nvideoPlayer->setFileName(\"res/splash.mp4\"); \nvideoPlayer->play();\n```"]