["```cpp\nusing SlimDX.DirectSound;\nusing SlimDX.Multimedia;\n```", "```cpp\nbool m_UseDirectSound = true; \n```", "```cpp\nDirectSound m_DirectSound;  \nPrimarySoundBuffer m_DSoundPrimaryBuffer; \nSecondarySoundBuffer m_DSoundBuffer;\n```", "```cpp\npublic void InitDirectSound()\n{\n    // Create our DirectSound object.\n    m_DirectSound = new DirectSound();\n\n    // Set the cooperative level.\n    m_DirectSound.SetCooperativeLevel(m_Form.Handle, SlimDX.DirectSound.CooperativeLevel.Priority);\n\n    // Create the primary sound buffer.\n    SoundBufferDescription desc = new SoundBufferDescription();\n    desc.Flags = SlimDX.DirectSound.BufferFlags.PrimaryBuffer;\n    m_DSoundPrimaryBuffer = new PrimarySoundBuffer(m_DirectSound, desc);\n\n    // Create our secondary sound buffer.\n    using (WaveStream wavFile = new WaveStream(Application.StartupPath + \"\\\\\" + \"lost_village_128.wav\"))\n    {\n        SoundBufferDescription DSoundBufferDesc;\n        DSoundBufferDesc = new SoundBufferDescription();\n        DSoundBufferDesc.SizeInBytes = (int) wavFile.Length;\n        DSoundBufferDesc.Flags = SlimDX.DirectSound.BufferFlags.ControlVolume;\n        DSoundBufferDesc.Format = wavFile.Format;\n\n        m_DSoundBuffer = new SecondarySoundBuffer(m_DirectSound, DSoundBufferDesc);\n\n        // Now load the sound.\n        byte[] wavData = new byte[DSoundBufferDesc.SizeInBytes];\n        wavFile.Read(wavData, 0, (int)wavFile.Length);\n        m_DSoundBuffer.Write(wavData, 0, LockFlags.None);\n\n        // Play our music and have it loop continuously.\n        m_DSoundBuffer.Play(0, SlimDX.DirectSound.PlayFlags.Looping);\n    }\n\n}\n```", "```cpp\ntry\n{\n    // Create our DirectSound object.\n    m_DirectSound = new DirectSound();\n}\ncatch (DirectSoundException dsException)\n{\n    return;\n}\n```", "```cpp\nif (m_UseDirectSound)\n    InitDirectSound();\n```", "```cpp\nif (m_DSoundBuffer != null)\n    m_DSoundBuffer.Dispose();\n\nif (m_DSoundPrimaryBuffer != null)\n    m_DSoundPrimaryBuffer.Dispose();\n\nif (m_DirectSound != null)\n    m_DirectSound.Dispose();\n```", "```cpp\nusing SlimDX.XAudio2;\n```", "```cpp\nXAudio2 m_XAudio2;\nMasteringVoice m_MasteringVoice;\nAudioBuffer m_AudioBuffer;\nSourceVoice m_SourceVoice;\n```", "```cpp\nif (m_UseDirectSound)\n    InitDirectSound();\n```", "```cpp\nif (m_UseDirectSound)\n    InitDirectSound();\nelse\n    InitXAudio2();\n```", "```cpp\npublic void InitXAudio2()\n{\n    // Create the XAudio2 object.\n    m_XAudio2 = new XAudio2();\n\n    // Check that we have a valid sound device to use.\n    if (m_XAudio2.DeviceCount == 0)\n        return;\n\n    // Create our mastering voice object. This object represents the sound output device.\n    m_MasteringVoice = new MasteringVoice(m_XAudio2);\n\n    // Open the .wav file that contains our sound.\n    using (WaveStream wavFile = new WaveStream(Application.StartupPath + \"\\\\\" + \"lost_village_128.wav\"))\n    {\n        // Create the audio buffer and store the audio data from the file in it.\n        m_AudioBuffer = new AudioBuffer();\n        m_AudioBuffer.AudioData = wavFile;\n        m_AudioBuffer.AudioBytes = (int) wavFile.Length;\n\n        // Setup our audio buffer for looping.\n        m_AudioBuffer.LoopCount = XAudio2.LoopInfinite;\n\n        // Create the source voice object. This is used to submit our audio data to the\n        // mastering voice object so we can play it.\n        m_SourceVoice = new SourceVoice(m_XAudio2, wavFile.Format);\n        m_SourceVoice.SubmitSourceBuffer(m_AudioBuffer);\n        m_SourceVoice.Start();\n    }\n}\n```", "```cpp\n// XAudio2 Stuff\nif (m_SourceVoice != null)\n    m_SourceVoice.Dispose();\n\nif (m_AudioBuffer != null)\n    m_AudioBuffer.Dispose();\n\nif (m_MasteringVoice != null)\n    m_MasteringVoice.Dispose();\n\nif (m_XAudio2 != null)\n    m_XAudio2.Dispose();\n```", "```cpp\nfloat[] outputMatrix = new float[8];\n```", "```cpp\nfloat left = 0.5f;\nfloat right = 0.5f;\n```", "```cpp\nm_XAudio2.GetDeviceDetails(0).OutputFormat.ChannelMask\n```", "```cpp\nm_MasteringVoice.ChannelMask\n```", "```cpp\nif (channelMask.HasFlag(Speakers.Stereo) ||\n     channelMask.HasFlag(Speakers.TwoPointOne) ||\n     channelMask.HasFlag(Speakers.Surround))\n    {\n        outputMatrix[0] = left;\n        outputMatrix[1] = 0.0f;\n        outputMatrix[2] = 0.0f;\n        outputMatrix[3] = right;\n     }\n```"]