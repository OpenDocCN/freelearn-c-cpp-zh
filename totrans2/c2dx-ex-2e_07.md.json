["```cpp\n    void Block::initBlock() {\n\n      _tile1 = SpriteFrameCache::getInstance()- >getSpriteFrameByName (\"building_1.png\");\n      _tile2 = SpriteFrameCache::getInstance()- >getSpriteFrameByName (\"building_2.png\");\n      _tile3 = SpriteFrameCache::getInstance()- >getSpriteFrameByName (\"building_3.png\");\n      _tile4 = SpriteFrameCache::getInstance()- >getSpriteFrameByName (\"building_4.png\");\n    ```", "```cpp\n    _roof1 = SpriteFrameCache::getInstance()-> getSpriteFrameByName (\"roof_1.png\");\n      _roof2 = SpriteFrameCache::getInstance()- >getSpriteFrameByName (\"roof_2.png\");\n    ```", "```cpp\n    //create tiles\n    for (int i = 0; i < 5; i++) {\n       auto tile = Sprite::createWithSpriteFrameName(\"roof_1.png\");\n       tile->setAnchorPoint(Vec2(0, 1));\n       tile->setPosition(Vec2(i * _tileWidth, 0));\n       tile->setVisible(false);\n       this->addChild(tile, kMiddleground, kRoofTile);\n       _roofTiles.pushBack(tile);\n       for (int j = 0; j < 4; j++) {\n          tile =  Sprite::createWithSpriteFrameName(\"building_1.png\");\n          tile->setAnchorPoint(Vec2(0, 1));\n          tile->setPosition(Vec2(i * _tileWidth, -1 *  (_tileHeight * 0.47f + j * _tileHeight)));\n          tile->setVisible(false);\n          this->addChild(tile, kBackground, kWallTile);\n          _wallTiles.pushBack(tile);\n       }\n    }\n    ```", "```cpp\n    void Block::setupBlock (int width, int height, int type) {\n\n      this->setPuffing(false);\n\n      _type = type;\n\n      _width = width * _tileWidth;\n      //add the roof height to the final height of the block\n      _height = height * _tileHeight + _tileHeight * 0.49f;\n      this->setPositionY(_height);\n\n      SpriteFrame * wallFrame;\n      SpriteFrame * roofFrame = rand() % 10 > 6 ? _roof1 :  _roof2;\n\n      int num_chimneys;\n      float chimneyX[] = {0,0,0,0,0};\n    ```", "```cpp\n    switch (type) {\n\n      case kBlockGap:\n        this->setVisible(false);\n        return;\n\n      case kBlock1:\n        wallFrame = _tile1;\n        chimneyX[0] = 0.2f;\n        chimneyX[1] = 0.8f;\n        num_chimneys = 2;\n        break;\n      case kBlock2:\n        wallFrame = _tile2;\n        chimneyX[0] = 0.2f;\n         chimneyX[1] = 0.8f;\n        chimneyX[2] = 0.5f;\n        num_chimneys = 3;\n        break;\n      case kBlock3:\n        wallFrame = _tile3;\n        chimneyX[0] = 0.2f;\n        chimneyX[1] = 0.8f;\n        chimneyX[2] = 0.5f;\n        num_chimneys = 3;\n\n        break;\n      case kBlock4:\n        wallFrame = _tile4;\n        chimneyX[0] = 0.2f;\n        chimneyX[1] = 0.5f;\n        num_chimneys = 2;\n        break;\n    }\n    ```", "```cpp\n    count = _wallTiles->count();\n      for (i  = 0; i < count; i++) {\n        tile = (Sprite *) _wallTiles->objectAtIndex(i);\n        if (tile->getPositionX() < _width && tile ->getPositionY() > -_height) {\n          tile->setVisible(true);\n          tile->setDisplayFrame(wallFrame);\n        } else {\n          tile->setVisible(false);\n        }\n      }\n    }\n    ```", "```cpp\nterrain->initWithSpriteFrameName(\"blank.png\")\n```", "```cpp\n    if (_player->getVector().x > 0) {\n      _background->setPositionX(_background->getPosition().x -  _player->getVector().x * 0.25f);\n    ```", "```cpp\n    float diffx;\n\n    if (_background->getPositionX() < -_background ->getContentSize().width) {\n      diffx = fabs(_background->getPositionX()) - _background ->getContentSize().width;\n      _background->setPositionX(-diffx);\n    }\n    ```", "```cpp\n    _foreground->setPositionX(_foreground->getPosition().x - _player->getVector().x * 4);\n\n    if (_foreground->getPositionX() < -_foreground ->getContentSize().width * 4) {\n      diffx = fabs(_foreground->getPositionX()) - _foreground ->getContentSize().width * 4;\n      _foreground->setPositionX(-diffx);\n    }\n    ```", "```cpp\n    for (auto cloud : _clouds) {\n       cloud->setPositionX(cloud->getPositionX() - _player->getVector().x * 0.15f);\n       if (cloud->getPositionX() + cloud->getBoundingBox().size.width * 0.5f < 0 ) {\n          cloud->setPositionX(_screenSize.width + cloud->getBoundingBox().size.width * 0.5f);\n       }\n    }\n    ```", "```cpp\n    auto menuItemOn =  Sprite::createWithSpriteFrameName(\"btn_new_on.png\");\n    auto menuItemOff =  Sprite::createWithSpriteFrameName(\"btn_new_off.png\");\n\n    auto starGametItem = MenuItemSprite::create( menuItemOff,\n    menuItemOn, CC_CALLBACK_1(GameLayer::startGame, this));\n    ```", "```cpp\n    menuItemOn =  Sprite::createWithSpriteFrameName(\"btn_howto_on.png\");\n    menuItemOff =  Sprite::createWithSpriteFrameName(\"btn_howto_off.png\");\n\n    auto howToItem = MenuItemSprite::create( menuItemOff,  menuItemOn, CC_CALLBACK_1(GameLayer::showTutorial, this));\n    ```", "```cpp\n    _mainMenu = Menu::create(howToItem, starGametItem, nullptr);\n    _mainMenu->alignItemsHorizontallyWithPadding(120);\n    _mainMenu->setPosition(Vec2(_screenSize.width *  0.5f, _screenSize.height * 0.54));\n\n    this->addChild(_mainMenu, kForeground);\n    ```", "```cpp\n    void GameLayer::startGame (Ref* pSender) {\n      _tutorialLabel->setVisible(false);\n      _intro->setVisible(false);\n      _mainMenu->setVisible(false);\n\n      _jam->runAction(_jamMove);\n      SimpleAudioEngine::getInstance() ->playEffect(\"start.wav\");\n      _terrain->setStartTerrain ( true );\n      _state = kGamePlay;\n    }\n\n    void GameLayer::showTutorial (Ref* pSender) {\n      _tutorialLabel->setString (\"Tap the screen to make the player jump.\");\n      _state = kGameTutorialJump;\n      _jam->runAction(_jamMove);\n      _intro->setVisible(false);\n      _mainMenu->setVisible(false);\n      SimpleAudioEngine::getInstance() ->playEffect(\"start.wav\");\n      _tutorialLabel->setVisible(true);\n\n    }\n    ```", "```cpp\n    _tutorialLabel = Label::createWithTTF(\"\", \"fonts/Times.ttf\", 60);\n    _tutorialLabel->setPosition(Vec2 (_screenSize.width *  0.5f, _screenSize.height * 0.6f) );\n    this->addChild(_tutorialLabel, kForeground);\n    _tutorialLabel->setVisible(false);\n    ```", "```cpp\n    typedef enum {\n      kGameIntro,\n      kGamePlay,\n      kGameOver,\n      kGameTutorial,\n      kGameTutorialJump,\n      kGameTutorialFloat,\n      kGameTutorialDrop\n\n    } GameState;\n    ```", "```cpp\n    _tutorialLabel->setString (\"Tap the screen to make the player jump.\");\n    _state = kGameTutorialJump;\n    ```", "```cpp\n    if (_state > kGameTutorial) {\n      if (_state == kGameTutorialJump) {\n        if (_player->getState() == kPlayerFalling && _player ->getVector().y < 0) {\n          _player->stopAllActions();\n          _jam->setVisible(false);\n          _jam->stopAllActions();\n          _running = false;\n          _tutorialLabel->setString (\"While in the air, tap the screen to float.\");\n          _state = kGameTutorialFloat;\n        }\n    ```", "```cpp\n      } else if (_state == kGameTutorialFloat) {\n        if (_player->getPositionY() < _screenSize.height *  0.95f) {\n          _player->stopAllActions();\n          _running = false;\n          _tutorialLabel->setString (\"While floating, tap the screen again to drop.\");\n          _state = kGameTutorialDrop;\n        }\n    ```", "```cpp\n      } else {\n        _tutorialLabel->setString (\"That's it. Tap the screen to play.\");\n        _state = kGameTutorial;\n      }\n    }\n    ```", "```cpp\n    case kGameTutorial:\n      _tutorialLabel->setString(\"\");\n      _tutorialLabel->setVisible(false);\n      _terrain->setStartTerrain ( true );\n      _state = kGamePlay;\n      break;\n\n    case kGameTutorialJump:\n      if (_player->getState() == kPlayerMoving) {\n        SimpleAudioEngine::getInstance() ->playEffect(\"jump.wav\");\n        _player->setJumping(true);\n      }\n      break;\n\n    case kGameTutorialFloat:\n      if (!_player->getFloating()) {\n        _player->setFloating (true);\n        _running = true;\n      }\n      break;\n\n    case kGameTutorialDrop:\n      _player->setFloating (false);\n      _running = true;\n      break;\n    ```", "```cpp\n    LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                       ../../Classes/AppDelegate.cpp \\\n                       ../../Classes/Block.cpp \\\n                       ../../Classes/GameSprite.cpp \\\n                       ../../Classes/Player.cpp \\\n                       ../../Classes/Terrain.cpp \\\n                       ../../Classes/GameLayer.cpp\n    ```"]