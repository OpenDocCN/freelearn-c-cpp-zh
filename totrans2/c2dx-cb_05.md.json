["```cpp\nauto normalItem = Sprite::create(\"res/item1.png\");\nauto selectedItem = Sprite::create(\"res/item1.png\");\nselectedItem->setColor(Color3B::GRAY);\nauto item = MenuItemSprite::create(normalItem, selectedItem,\n[](Ref* sender){\n    CCLOG(\"tapped item\");\n});\nauto size = Director::getInstance()->getVisibleSize();\nitem->setPosition(size/2);\nauto menu = Menu::create(item, nullptr);\nmenu->setPosition(Vec2());\nthis->addChild(menu);\n```", "```cpp\nauto menu = Menu::create(item1, item2, item3, nullptr);\n```", "```cpp\nmenu->addChild(item);\n```", "```cpp\nVector<MenuItem*> menuItems;\nfor (int i=1; i<=3; i++) {\n    std::string name = StringUtils::format(\"res/item%d.png\", i);\n    auto normalItem = Sprite::create(name);\n    auto selectedItem = Sprite::create(name);\n    selectedItem->setColor(Color3B::GRAY);\n    auto item = MenuItemSprite::create(normalItem, selectedItem,\n[](Ref* sender){\n        auto node = dynamic_cast<Node*>(sender);\n        if (node!=nullptr) {\n            CCLOG(\"tapped item %d\", node->getTag());\n        }\n    });\n    item->setTag(i);\n    menuItems.pushBack(item);\n}\nauto size = Director::getInstance()->getVisibleSize();\nauto menu = Menu::createWithArray(menuItems);\nmenu->setPosition(size/2);\nmenu->alignItemsVertically();\nthis->addChild(menu);\n```", "```cpp\nmenu->alignItemsHorizontally();\n```", "```cpp\nmenu->alignItemsVerticallyWithPadding(20.0f);\n```", "```cpp\nmenu->alignItemsHorizontallyWithPadding(20.0f);\n```", "```cpp\n#include \"ui/CocosGUI.h\"\n```", "```cpp\nauto size = Director::getInstance()->getVisibleSize();\nauto button = ui::Button::create(\"res/item1.png\");\nbutton->setPosition(size/2);\nthis->addChild(button);\nbutton-> addTouchEventListener(\n    [](Ref* sender, ui::Widget::TouchEventType type){\n        switch (type) {\n            case ui::Widget::TouchEventType::BEGAN:\n                CCLOG(\"touch began\");\n                break;\n            case ui::Widget::TouchEventType::MOVED:\n                CCLOG(\"touch moved\");\n                break;\n            case ui::Widget::TouchEventType::ENDED:\n                CCLOG(\"touch ended\");\n                break;\n            case ui::Widget::TouchEventType::CANCELED:\n                CCLOG(\"touch canceled\");\n                break;\n\n            default:\n                break;\n        }\n    });\n```", "```cpp\nauto button = ui::Button::create(\n    \"res/normal.png\",\n    \"res/selected.png\",\n    \"res/disabled.png\");\n```", "```cpp\nauto size = Director::getInstance()->getVisibleSize();\nauto checkbox = ui::CheckBox::create(\n    \"res/check_box_normal.png\",\n    \"res/check_box_active.png\");\ncheckbox->setPosition(size/2);\nthis->addChild(checkbox);\ncheckbox->addEventListener([](Ref* sender, ui::CheckBox::EventType type){\n    switch (type) {\n        case ui::CheckBox::EventType::SELECTED:\n            CCLOG(\"selected checkbox\");\n            break;\n        case ui::CheckBox::EventType::UNSELECTED:\n            CCLOG(\"unselected checkbox\");\n            break;\n        default:\n            break;\n    }\n});\n```", "```cpp\nIf (checkbox->isSelected()) {\n    CCLOG(\"selected checkbox\");\n} else {\n  CCLOG(\"unselected checkbox\");\n}\n```", "```cpp\ncheckbox->setSelected(true);\n```", "```cpp\nauto checkbox = ui::CheckBox::create(\n    \"res/check_box_normal.png\",\n    \"res/check_box_normal_press.png\",\n    \"res/check_box_active.png\",\n    \"res/check_box_normal_disable.png\",\n    \"res/check_box_active_disable.png\");\n```", "```cpp\ncheckbox->setEnabled(false);\n```", "```cpp\nauto loadingbar = ui::LoadingBar::create(\"res/loadingbar.png\");\nloadingbar->setPosition(size/2);\nloadingbar->setPercent(0);\nthis->addChild(loadingbar);\nthis->schedule([=](float delta){\n    float percent = loadingbar->getPercent();\n    percent++;\n    loadingbar->setPercent(percent);\n    if (percent>=100.0f) {\n        this->unschedule(\"updateLoadingBar\");\n    }\n}, 0.1f, \"updateLoadingBar\");\n```", "```cpp\nloadingbar->setDirection(ui::LoadingBar::Direction::RIGHT);\n```", "```cpp\nauto slider = ui::Slider::create(\"res/sliderTrack.png\",\n\"res/sliderThumb.png\");\nslider->setPosition(size/2);\nthis->addChild(slider);\nslider->addEventListener([](Ref* sender, ui::Slider::EventType\ntype){\n    auto slider = dynamic_cast<ui::Slider*>(sender);\n    if (type==ui::Slider::EventType::ON_PERCENTAGE_CHANGED) {\n        CCLOG(\"percentage = %d\", slider->getPercent());\n    }\n});\n```", "```cpp\nslider->loadProgressBarTexture(\"res/sliderProgress.png\");\n```", "```cpp\nauto textField = ui::TextField::create(\"Enter your name\", \"Arial\", 30);\ntextField->setPosition(Vec2(size.width/2, size.height*0.75f));\nthis->addChild(textField);\ntextField->addEventListener([](Ref* sender,\nui::TextField::EventType type){\n    auto textField = dynamic_cast<ui::TextField*>(sender);\n    switch (type) {\n        case ui::TextField::EventType::ATTACH_WITH_IME:\n                CCLOG(\"displayed keyboard\");\n                break;\n        case ui::TextField::EventType::DETACH_WITH_IME:\n                CCLOG(\"dismissed keyboard\");\n                break;\n          case ui::TextField::EventType::INSERT_TEXT:\n                CCLOG(\"inserted text : %s\",\n                textField->getString().c_str());\n                break;\n          case ui::TextField::EventType::DELETE_BACKWARD:\n                CCLOG(\"deleted backward\");\n                break;\n          default:\n                break;\n    }\n});\n```", "```cpp\ntextField->setPasswordEnabled(true);\n```", "```cpp\nauto scrollView = ui::ScrollView::create();\nscrollView->setPosition(Vec2());\nscrollView->setDirection(ui::ScrollView::Direction::BOTH);\nscrollView->setBounceEnabled(true);\nthis->addChild(scrollView);\n\nauto sprite = Sprite::create(\"res/HelloWorld.png\");\nsprite->setScale(2.0f);\nsprite->setPosition(sprite->getBoundingBox().size/2);\nscrollView->addChild(sprite);\nscrollView->setInnerContainerSize(sprite->getBoundingBox().size);\nscrollView->setContentSize(sprite->getContentSize());\n```", "```cpp\nauto pageView = ui::PageView::create();\npageView->setPosition(Vec2());\npageView->setContentSize(size);\nthis->addChild(pageView);\n\nfor (int i=0; i<3; i++) {\n    auto page = ui::Layout::create();\n    page->setContentSize(pageView->getContentSize());\n\n    auto sprite = Sprite::create(\"res/HelloWorld.png\");\n    sprite->setPosition(sprite->getContentSize()/2);\n    page->addChild(sprite);\n    pageView->insertPage(page, i);\n}\n\npageView->addEventListener([](Ref* sender, ui::PageView::EventType type){\n    if (type==ui::PageView::EventType::TURNING) {\n        auto pageView = dynamic_cast<ui::PageView*>(sender);\n        CCLOG(\"current page no =%zd\",\n        pageView->getCurPageIndex());\n    }\n});\n```", "```cpp\nauto listView = ui::ListView::create();\nlistView->setPosition(Vec2(size.width/2 - 200, 0.0f));\nlistView->setDirection(ui::ListView::Direction::VERTICAL);\nlistView->setBounceEnabled(true);\nlistView->setContentSize(size);\nthis->addChild(listView);\n\nfor (int i=0; i<20; i++) {\n    auto layout = ui::Layout::create();\n    layout->setContentSize(Size(400, 50));\n    layout->setBackGroundColorType(ui::Layout::BackGroundColorType::SOLID);\n    layout->setBackGroundColor(Color3B::WHITE);\n\n    auto button = ui::Button::create();\n    button->setPosition(layout->getContentSize()/2);\n    std::string name = StringUtils::format(\"list item %d\", i); \n    button->setTitleText(name);\n    button->setTitleFontSize(30);\n    button->setTitleColor(Color3B::BLACK);\n    layout->addChild(button);\n    listView->addChild(layout);\n}\n\nlistView->addEventListener([](Ref* sender, ui::ListView::EventType \ntype){\n    auto listView = dynamic_cast<ui::ListView*>(sender);\n    switch (type) {\n        case ui::ListView::EventType::ON_SELECTED_ITEM_START:\n            CCLOG(\"select item started\");\n            break;\n        case ui::ListView::EventType::ON_SELECTED_ITEM_END:\n            CCLOG(\"selected item : %zd\", listView->getCurSelectedIndex());\n            break;\n        default: \n            break; \n    } \n});\n```"]