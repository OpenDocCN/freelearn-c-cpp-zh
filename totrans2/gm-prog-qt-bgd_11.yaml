- en: Appendix A. Pop Quiz Answers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chapter 3, Qt GUI Programming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pop quiz – making signal-slot connections
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Q1 | A slot |'
  prefs: []
  type: TYPE_TB
- en: '| Q2 | `connect(sender, SIGNAL(toggled(bool)), receiver, SLOT(clear()));` and
    `connect(sender, &QPushButton::clicked, receiver, &QLineEdit::clear);` |'
  prefs: []
  type: TYPE_TB
- en: Pop quiz – using widgets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Q1 | `sizeHint` |'
  prefs: []
  type: TYPE_TB
- en: '| Q2 | `QVariant` |'
  prefs: []
  type: TYPE_TB
- en: '| Q3 | It represents a functionality that a user can invoke in the program.
    |'
  prefs: []
  type: TYPE_TB
- en: Chapter 4, Qt Core Essentials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pop quiz – Qt core essentials
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Q1 | `QString` |'
  prefs: []
  type: TYPE_TB
- en: '| Q2 | `((25[0-5]&#124;2[0-4][0-9]&#124;[01]?[0-9][0-9]?)(\.&#124;$)){4}` |'
  prefs: []
  type: TYPE_TB
- en: '| Q3 | XML |'
  prefs: []
  type: TYPE_TB
- en: Chapter 6, Graphics View
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pop quiz – mastering Graphics View
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Q1 | You should know, for example, that there is a `QGraphicsSimpleTextItem`
    that you can use to draw a simple text and that you do not have to deal with `QPainter`
    yourself in these situations. You should further know that if you have a more
    complex text containing bold characters you can use `QGraphicsTextItem`, which
    is able of handling rich text. |'
  prefs: []
  type: TYPE_TB
- en: '| Q2 | The correct answers these questions pertain to the origin points of
    the different systems. |'
  prefs: []
  type: TYPE_TB
- en: '| Q3 | Be aware that `QObject` isn''t restricted to the "world of widgets".
    You can also use it with items. |'
  prefs: []
  type: TYPE_TB
- en: '| Q4 | The catchword for the correct answer is Parallax Scrolling. |'
  prefs: []
  type: TYPE_TB
- en: '| Q5 | The correct answer will take into account how you can control the cache
    and how to affect which parts of the view are actually redrawn when an update
    is requested. |'
  prefs: []
  type: TYPE_TB
- en: Chapter 7, Networking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pop quiz – testing your knowledge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Q1 | `QNetworkAccessManager`, `QNetworkRequest`, and `QNetworkReply`. |'
  prefs: []
  type: TYPE_TB
- en: '| Q2 | One has to use `QNetworkRequest::setRawHeader()` with the appropriate
    HTTP header field "Range". |'
  prefs: []
  type: TYPE_TB
- en: '| Q3 | `QUrlQuery` |'
  prefs: []
  type: TYPE_TB
- en: '| Q4 | One has to use `deleteLater()` not delete. |'
  prefs: []
  type: TYPE_TB
- en: '| Q5 | Both inherit `QAbstractSocket` which inherits `QIODevice`. `QIODevice`
    is itself also the base class of `QFile`. So the handling-files and sockets have
    much in common. Thus one does not have to learn a second (complex) API only to
    communicate with sockets. |'
  prefs: []
  type: TYPE_TB
- en: '| Q6 | `QUdpSocket` |'
  prefs: []
  type: TYPE_TB
- en: Chapter 8, Scripting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pop quiz – scripting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Q1 | `QScriptEngine::evaluate()` |'
  prefs: []
  type: TYPE_TB
- en: '| Q2 | `QScriptValue` |'
  prefs: []
  type: TYPE_TB
- en: '| Q3 | `PyValue` |'
  prefs: []
  type: TYPE_TB
- en: '| Q4 | They contain all the variables defied within a function invocation so
    that a set of variables visible from within a script can be modified without affecting
    the global environment (called sandboxing). |'
  prefs: []
  type: TYPE_TB
- en: Chapter 11, Miscellaneous and Advanced Concepts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pop quiz – testing your knowledge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Q1 | The suffix is `Reading`, for example, `QRotationReading`. |'
  prefs: []
  type: TYPE_TB
- en: '| Q2 | The class named `QSensorGestureRecognizer`. |'
  prefs: []
  type: TYPE_TB
- en: '| Q3 | It''s the Qt Positioning module and you activate it by adding `QT +=
    positioning` to the project fie. |'
  prefs: []
  type: TYPE_TB
- en: '| Q4 | One has to overload `QDebug& operator<<()` |'
  prefs: []
  type: TYPE_TB
- en: '| Q5 | It aborts the execution of the program if `condition` is `false` only
    if the program was built in the debug mode. |'
  prefs: []
  type: TYPE_TB
