- en: Chapter 9. Particles
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。粒子
- en: Particles in Unreal Engine 4 are created using cascade particle editor, which
    is a powerful and robust editor that allows artists to create visual effects.
    Cascade editor lets you add and edit various modules that make up the final effect.
    The primary job of the particle editor is to control the behavior of the particle
    system itself whereas the look and feel is often controlled by the material.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在虚幻引擎4中，粒子是通过级联粒子编辑器创建的，这是一个强大且稳健的编辑器，允许艺术家创建视觉效果。级联编辑器允许您添加和编辑构成最终效果的各个模块。粒子编辑器的主要任务是控制粒子系统的行为，而外观和感觉通常由材质控制。
- en: In this chapter you will learn about the cascade particle editor and create
    a simple particle system.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将了解级联粒子编辑器并创建一个简单的粒子系统。
- en: Cascade particle editor
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 级联粒子编辑器
- en: To access cascade particle editor, you need to create a **Particle System**
    in **Content Browser** by right-clicking on the **Content Browser** and selecting
    **Particle System**. When you select it, a new **Particle System** will be created
    and it prompts you to rename it. Give it a name and double-click on it to open
    cascade particle editor.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问级联粒子编辑器，您需要在内容浏览器中通过右键单击内容浏览器并选择**粒子系统**来创建一个**粒子系统**。选择它后，将创建一个新的**粒子系统**，并提示您重命名。给它一个名字，然后双击它以打开级联粒子编辑器。
- en: 'Once you open it you will see a window like this:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦打开，您将看到一个类似这样的窗口：
- en: '![Cascade particle editor](img/B03950_09_01.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![级联粒子编辑器](img/B03950_09_01.jpg)'
- en: Cascade Editor User Interface
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 级联编辑器用户界面
- en: 'Cascade particle editor consists of five primary areas and they are:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 级联粒子编辑器由五个主要区域组成，它们是：
- en: '**Toolbar**: This contains visualization and navigation tools'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工具栏**：这包含可视化和导航工具'
- en: '**Viewport**: This shows the current particle system'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视口**：这显示当前粒子系统'
- en: '**Details**: This lets you edit the current particle system, emitter, or modules'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**详细信息**：这允许您编辑当前粒子系统、发射器或模块'
- en: '**Emitters**: These are the actual particle emitters and contain modules that
    are associated with the emitter'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发射器**：这些是实际的粒子发射器，并包含与发射器关联的模块'
- en: '**Curve Editor**: This is the editor that lets you modify properties in either
    relative or absolute time'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**曲线编辑器**：这是允许您在相对或绝对时间内修改属性的编辑器'
- en: Toolbar
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工具栏
- en: 'Toolbar contains various buttons. Let''s take a quick look at them:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 工具栏包含各种按钮。让我们快速看一下它们：
- en: '**Save**: This saves the particle system'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保存**：这保存粒子系统'
- en: '**Find in CB**: This locates the current particle system in Content Browser'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在CB中查找**：这将在内容浏览器中定位当前粒子系统'
- en: '**Restart Sim**: This restarts (resets) the current simulation'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重启模拟**：这重启（重置）当前模拟'
- en: '**Restart Level**: This is the same as Restart Sim but will also update all
    the instances placed in level'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重启级别**：这与重启模拟相同，但还会更新放置在级别中的所有实例'
- en: '**Thumbnail**: This saves the viewport view as a thumbnail for Content Browser'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缩略图**：这会将视口视图保存为内容浏览器的缩略图'
- en: '**Bounds**: This enables or disables rendering of particle bounds'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**边界**：这启用或禁用粒子边界的渲染'
- en: '**Origin Axis**: This displays the origin axis in viewport'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**原点轴**：这在视口中显示原点轴'
- en: '**Regen LOD**: Clicking on this generates the lowest LOD duplicating the highest
    LOD'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重新生成LOD**：点击此按钮将生成最低LOD，复制最高LOD'
- en: '**Regen LOD**: Clicking on this generates the lowest LOD using values based
    on the highest LOD'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重新生成LOD**：点击此按钮将使用基于最高LOD的值生成最低LOD'
- en: '**Lowest LOD**: This switches to the lowest LOD'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最低LOD**：这切换到最低LOD'
- en: '**Lower LOD**: This switches to the next lowest LOD'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更低LOD**：这切换到下一个最低LOD'
- en: '**Add LOD**: This adds a new LOD before the current LOD'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**添加LOD**：在当前LOD之前添加一个新的LOD'
- en: '**Add LOD**: This adds a new LOD after the current LOD'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**添加LOD**：在当前LOD之后添加一个新的LOD'
- en: '**Higher LOD**: This selects a higher LOD'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更高LOD**：这选择一个更高的LOD'
- en: '**Highest LOD**: This selects the highest LOD'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最高LOD**：这选择最高LOD'
- en: '**Delete LOD**: This deletes the current LOD'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**删除LOD**：这删除当前LOD'
- en: LODs are ways to update the particle effects to use efficient screen space depending
    on player distance. Based on the effect, there can be modules in a particle system
    that can be too small to render if the player is far away. Imagine fire embers.
    If the player is far away, the particle system will still process and calculate
    these effects which we don't need. This is where we use LODs. **Level of Detail**
    (**LODs**) can turn off specific modules or even shut down the emitter based on
    player distance.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: LODs（细节级别）是更新粒子效果以根据玩家距离使用高效屏幕空间的方法。根据效果，粒子系统中可能有模块在玩家距离较远时太小而无法渲染。想象一下火炭。如果玩家距离较远，粒子系统仍然会处理和计算这些我们不需要的效果。这就是我们使用LOD的地方。**细节级别**（**LODs**）可以根据玩家距离关闭特定的模块甚至关闭发射器。
- en: Viewport
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视口
- en: Viewport shows you the real-time changes made to the particle system as well
    as other information's, such as total particle count, bounds, and so on. On the
    top left corner, you can click on the **View** button to switch between various
    view modes, such as **Unlit**, **Texture Density**, **Wireframe mode**, and so
    on.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 视口显示了粒子系统以及其他实时更改，例如总粒子数、边界等。在左上角，您可以单击**视图**按钮以在**未发光**、**纹理密度**、**线框模式**等不同视图模式之间切换。
- en: Navigation
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 导航
- en: 'Using the following mouse buttons you can navigate inside the viewport:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下鼠标按钮可以在视口内部进行导航：
- en: '**Left Mouse Button**: This moves the camera around the particle system.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**左鼠标按钮**：此功能用于在粒子系统中移动相机。'
- en: '**Middle Mouse Button**: This pans the camera.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**中鼠标按钮**：此功能用于平移相机。'
- en: '**Right Mouse Button**: This rotates the camera.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**右鼠标按钮**：此功能用于旋转相机。'
- en: '**Alt + Left Mouse Button**: This orbits the particle system.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Alt + 左鼠标按钮**：此功能使粒子系统围绕中心旋转。'
- en: '**Alt + Right Mouse Button**: This dollies the camera forward and backward
    from a particle system.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Alt + 右鼠标按钮**：此功能使相机从粒子系统向前或向后移动。'
- en: '**F**: This focus on the particle system.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**F**：此功能专注于粒子系统。'
- en: '**L + Left Mouse**: This rotates the light and only affects particles using
    **Lit** material. **Unlit** materials have no effect.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**左键 + L键**：此功能旋转灯光，并且仅影响使用**发光**材质的粒子。**非发光**材质无效果。'
- en: Inside the **Viewport**, you can play/pause the particle simulation as well
    as adjust the simulation speed. You can access these settings under the **Time**
    option in **Viewport**.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在**视口**内部，您可以播放/暂停粒子模拟以及调整模拟速度。您可以在**视口**下的**时间**选项中访问这些设置。
- en: '![Navigation](img/B03950_09_02.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![导航](img/B03950_09_02.jpg)'
- en: Details
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 详情
- en: '**The Details** panel is populated by the currently selected module or emitter.
    The main properties of the particle system can be accessed by selecting nothing
    in the **Emitters** panel or by right-clicking on the **Emitter** list and navigating
    to **Particle System** | **Select Particle System**.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**详情**面板由当前选定的模块或发射器填充。可以通过在**发射器**面板中选择“无”或通过在**发射器**列表上右键单击并导航到**粒子系统** |
    **选择粒子系统**来访问粒子系统的主要属性。'
- en: '![Details](img/B03950_09_03.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![详情](img/B03950_09_03.jpg)'
- en: Emitter
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发射器
- en: The **Emitter** panel is the heart of the particle system, and contains a horizontal
    arrangement of all the emitters. In each emitter column, you can add different
    modules to change the look and feel of the particles. You can add as many emitters
    as you want and each emitter will handle different aspects of the final effect.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**发射器**面板是粒子系统的核心，包含所有发射器的水平排列。在每个发射器列中，您可以添加不同的模块以改变粒子的外观和感觉。您可以添加任意数量的发射器，每个发射器将处理最终效果的不同方面。'
- en: '![Emitter](img/B03950_09_04.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![发射器](img/B03950_09_04.jpg)'
- en: 'An **Emitter** contains three primary areas, and they are as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**发射器**包含三个主要区域，具体如下：'
- en: On top of the emitter block are the primary properties of the emitter, such
    as name, type, and so on. You can double-click on the gray area to collapse or
    expand the emitter column.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在发射器块上方是发射器的主要属性，例如名称、类型等。您可以通过双击灰色区域来折叠或展开发射器列。
- en: Below that, you can define the type of emitter. If you leave it blank (as in
    the preceding screenshot), then particles are simulated on the CPU.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在下面，您可以定义发射器的类型。如果您将其留空（如前一张截图所示），则粒子将在CPU上模拟。
- en: Finally, you can add modules to define how particles look.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，您可以添加模块来定义粒子的外观。
- en: Emitter types
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发射器类型
- en: 'Cascade editor has four different emitter types, and they are as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 级联编辑器有四种不同的发射器类型，具体如下：
- en: '**Beam Type**: When using this type, the particle will output beams connecting
    two points. This means you have to define a source point (for example, the emitter
    itself) and a target point (for example, an actor).'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**光束类型**: 当使用此类型时，粒子将输出连接两个点的光束。这意味着您必须定义一个源点（例如，发射器本身）和一个目标点（例如，一个演员）。'
- en: '**GPU Sprite**: Using this type lets you simulate particles on the GPU. Using
    this emitter lets you simulate and render thousands of particles efficiently.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GPU精灵**: 使用此类型可以让您在GPU上模拟粒子。使用此发射器可以让您高效地模拟和渲染成千上万的粒子。'
- en: '**Mesh Type**: When using this, the particle will use actual **Static Mesh**
    instances for particles. This is pretty useful for simulating destruction effects
    (for example, debris).'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网格类型**: 当使用此选项时，粒子将使用实际的**静态网格**实例。这对于模拟破坏效果（例如，碎片）非常有用。'
- en: '**Ribbon**: This type indicates that the particle should be like a trail. This
    means, all particles (in order of their birth) are connected to each other to
    form ribbons.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**带状物**: 这种类型表示粒子应该像一条尾巴。这意味着，所有粒子（按照它们的出生顺序）都相互连接，形成带状物。'
- en: Curve editor
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 曲线编辑器
- en: This is the standard curve editor that lets the user adjust any values that
    need to change during the particle's lifetime or across the life of an emitter.
    To learn more about curve editor, you can visit the official documentation available
    at [https://docs.unrealengine.com/latest/INT/Engine/UI/CurveEditor/index.html](https://docs.unrealengine.com/latest/INT/Engine/UI/CurveEditor/index.html).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这是标准的曲线编辑器，允许用户调整粒子在其生命周期内或发射器生命周期内需要更改的任何值。要了解更多关于曲线编辑器的信息，您可以访问官方文档，网址为[https://docs.unrealengine.com/latest/INT/Engine/UI/CurveEditor/index.html](https://docs.unrealengine.com/latest/INT/Engine/UI/CurveEditor/index.html)。
- en: Creating a simple particle system
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建简单的粒子系统
- en: 'To create a particle system:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个粒子系统：
- en: Right-click on **Content Browser**.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击**内容浏览器**。
- en: Select **Particle** from the resulting context menu.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从结果上下文菜单中选择**粒子**。
- en: A new particle system asset will be created in **Content Browser** and prompts
    you to rename it.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**内容浏览器**中创建一个新的粒子系统资产，并提示您重命名它。
- en: For this example, let's call it **MyExampleParticleSystem**.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个例子中，让我们称它为**MyExampleParticleSystem**。
- en: Now, double-click on it to open the **Particle** editor.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，双击它以打开**粒子**编辑器。
- en: 'By default, Unreal creates a default emitter for you to work with. This emitter
    contains six modules, and they are:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，虚幻引擎为您创建了一个默认的发射器，以便您可以使用。这个发射器包含六个模块，它们是：
- en: '**Required**: This contains all the properties required by the emitter, such
    as the material used to render, how long the emitter should run before looping,
    can this emitter loop, and so on. You cannot delete this module.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**必需**: 这包含发射器所需的所有属性，例如用于渲染的材料、发射器在循环之前应运行多长时间、此发射器是否可以循环等。您不能删除此模块。'
- en: '**Spawn**: This module contains the properties that determine how the particles
    are spawned. For example, how many particles to spawn per second. You cannot delete
    this module.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生成**: 此模块包含确定粒子如何生成的属性。例如，每秒生成多少粒子。您不能删除此模块。'
- en: '**Lifetime**: This is the lifetime of the spawned particles.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生命周期**: 这是生成粒子的生命周期。'
- en: '**Initial Size**: This sets the initial size of particles when spawning. To
    modify the size after spawning, use **Size by Life** or **Size by Speed**.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**初始大小**: 这设置粒子生成时的初始大小。要修改生成后的大小，请使用**大小随生命周期**或**大小随速度**。'
- en: '**Initial Velocity**: This sets the initial velocity (speed) of particles when
    spawning. To modify the velocity after spawning, use **Velocity/Life**.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**初始速度**: 这设置粒子生成时的初始速度（速度）。要修改生成后的速度，请使用**速度/生命周期**。'
- en: '**Color over Life**: This sets the color of a particle over its lifetime.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**颜色随生命周期变化**: 这将设置粒子在其生命周期内的颜色。'
- en: For this example, we will modify the existing emitter and make it a GPU particle
    system that looks like sparks. We will also add collisions so that our particles
    collide with the world.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将修改现有的发射器，使其成为一个看起来像火花的光照粒子系统。我们还将添加碰撞，以便我们的粒子与世界发生碰撞。
- en: Creating a simple material
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建简单的材料
- en: 'Before we start working with particles, we need to create a simple material
    that we can apply to the particles. To create a new material:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始处理粒子之前，我们需要创建一个简单的材料，我们可以将其应用于粒子。要创建一个新的材料：
- en: Right-click on **Content Browser** and select **Material**. Feel free to name
    it anything.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击**内容浏览器**并选择**材料**。您可以随意命名它。
- en: Open **Material** editor and change **Blend Mode** to **Translucent**. This
    is required because GPU particle collision will not work on opaque materials.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**材质**编辑器，将**混合模式**更改为**半透明**。这是必需的，因为GPU粒子碰撞不会在不透明材质上工作。
- en: Then, change **Shading Model** to **Unlit**. This is because we don't want the
    sparks to be affected by any kind of light since they are emissive.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将**着色模型**更改为**不发光**。这是因为我们不希望火花受到任何类型的光的影响，因为它们是自发光的。
- en: Finally, create a graph like this:![Creating a simple material](img/B03950_09_05.jpg)
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，创建一个这样的图表：![创建简单材质](img/B03950_09_05.jpg)
- en: Note
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the circular gradient texture in the **Texture Sample** node comes
    with the Engine itself. It's called **Greyscale**.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，**纹理样本**节点中的圆形渐变纹理是引擎本身自带的。它被称为**灰度**。
- en: 'Now that we have our material, it''s time to customize our particle system:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了我们的材质，是时候定制我们的粒子系统了：
- en: Select the **Required** module and under the **Emitters** group, apply our material
    created in the previous step.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**必需**模块，并在**发射器**组下应用之前步骤中创建的材质。
- en: Right-click on the black area below the emitter and select **New GPU Sprites**
    under **Type Data**. This will make our emitter simulate particles on GPU.![Creating
    a simple material](img/B03950_09_06.jpg)
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击发射器下方的黑色区域，然后在**类型数据**下选择**新GPU精灵**。这将使我们的发射器在GPU上模拟粒子。![创建简单材质](img/B03950_09_06.jpg)
- en: Select the **Spawn** module and under the **Spawn** group, set **Rate** to **0**.
    This is because instead of spawning a certain amount of particles per second,
    we want to burst hundreds of them in one frame.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**生成**模块，并在**生成**组下将**速率**设置为**0**。这是因为我们不想每秒生成一定数量的粒子，而是想在单帧中爆发数百个。
- en: Under the **Burst** group, add a new entry in **Burst List** and set **Count**
    to **100** and **Count Low** to **10**. This will select a random value between
    **100** and **10** and will spawn that many particles.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**爆发**组下，在**爆发列表**中添加一个新条目，并将**数量**设置为**100**，将**数量低**设置为**10**。这将选择一个介于**100**和**10**之间的随机值，并生成那么多粒子。
- en: 'The final **Spawn** settings will look like this:'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最终的**生成**设置将看起来像这样：
- en: '![Creating a simple material](img/B03950_09_07.jpg)'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![创建简单材质](img/B03950_09_07.jpg)'
- en: After adjusting the **Spawn** settings, we set the **Lifetime** of the particles
    to **0.4** and **3.0**, so each spawned particles' lifetime is between **0.4**
    and **3.0**. Now that we have particles spawning, it's time to adjust their size.
    To do so, select the **Initial Size** module and set **Max** to **1.0**, **10.0**,
    **0.0** and **Min** to **0.5**, **8.0**, **0.0**.![Creating a simple material](img/B03950_09_08.jpg)
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调整**生成**设置后，我们将粒子的**生命周期**设置为**0.4**和**3.0**，因此每个生成的粒子的生命周期在**0.4**和**3.0**之间。现在我们已经有了粒子生成，是时候调整它们的大小了。为此，选择**初始大小**模块，并将**最大值**设置为**1.0**、**10.0**、**0.0**，将**最小值**设置为**0.5**、**8.0**、**0.0**。![创建简单材质](img/B03950_09_08.jpg)
- en: Note
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that since GPU sprites are 2D, you can ignore the **Z** value. That's why
    we set them to **0.0**.
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，由于GPU精灵是2D的，您可以忽略**Z**值。这就是为什么我们将它们设置为**0.0**。
- en: After that, select the **Initial Velocity** module and set **Max** to **100.0**,
    **200.0**, **200.0** and **Min** to **-100.0**, **-10.0**, **100.0**.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，选择**初始速度**模块，并将**最大值**设置为**100.0**、**200.0**、**200.0**，将**最小值**设置为**-100.0**、**-10.0**、**100.0**。
- en: Now, if you drag and drop this particle into the world, you will see the particles
    bursting into the air.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果您将这个粒子拖放到世界中，您将看到粒子爆发到空中。
- en: Note
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that if you see nothing happening, make sure **Real-Time** is turned on
    for the editor (*Ctrl*+*R*).
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，如果您没有看到任何动作发生，请确保编辑器的**实时**选项已开启（*Ctrl*+*R*）。
- en: '![Creating a simple material](img/B03950_09_09.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![创建简单材质](img/B03950_09_09.jpg)'
- en: Adding gravity
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加重力
- en: 'In order to make things a bit more real, we will simulate gravity on these
    particles. Go back to your particle editor and follow these steps:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使事情更加逼真，我们将对这些粒子模拟重力。回到您的粒子编辑器，按照以下步骤操作：
- en: Right-click on the module area.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击模块区域。
- en: Select **Const Acceleration** from the **Acceleration** menu. This module will
    add the given acceleration to the existing acceleration of particles and updates
    the current and base velocity.![Adding gravity](img/B03950_09_10.jpg)
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**加速度**菜单中选择**恒定加速度**。此模块将给现有粒子的加速度添加给定的加速度，并更新当前和基本速度。![添加重力](img/B03950_09_10.jpg)
- en: For the **Acceleration** value, use **0.0**, **0.0**, **-450.0**. A negative
    value of **Z** (that is, **-450**) will make the particles go down as if they
    are affected by gravity.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**加速度**值，使用**0.0**、**0.0**、**-450.0**。Z轴的负值（即**-450**）将使粒子向下移动，就像它们受到重力的影响一样。
- en: Note
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the default gravity value is **-980.0**. You can try this value as
    well.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，默认的重力值是**-980.0**。你也可以尝试这个值。
- en: Now, if you look at the particle in world, you can see them going down as if
    they are affected by gravity.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你查看世界中的粒子，你可以看到它们向下移动，就像它们受到重力的影响一样。
- en: '![Adding gravity](img/B03950_09_11.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![添加重力](img/B03950_09_11.jpg)'
- en: Applying the color over life module
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用颜色覆盖生命模块
- en: 'Now that we have something like sparks, let''s apply some color to it. Select
    the Color Over Life module and apply the settings shown here:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了类似火花的东西，让我们给它应用一些颜色。选择颜色覆盖生命模块并应用以下设置：
- en: '![Applying the color over life module](img/B03950_09_12.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![应用颜色覆盖生命模块](img/B03950_09_12.jpg)'
- en: '**Color Over Life** is a curve value. It means you can define what color to
    apply at a certain point in the lifetime of particle. The **0.0** value is the
    beginning and **1.0** is the end. In the preceding screenshot, you can see I have
    applied a bright reddish orange color (**50.0**, **20.0**, **8.0**) when the particle
    is spawning (**In Val** = **0.0**) and bright white color at the end (**In Val**
    = **1.0**).'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**颜色覆盖生命**是一个曲线值。这意味着你可以在粒子的生命周期中的某个点定义要应用的颜色。**0.0**值是开始，**1.0**是结束。在上面的截图中，你可以看到我在粒子生成时（**In
    Val** = **0.0**）应用了明亮的橙红色（**50.0**，**20.0**，**8.0**），并在结束时（**In Val** = **1.0**）应用了明亮的白色。'
- en: Adding collision module
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加碰撞模块
- en: 'To complete this effect, we will add a **Collision** module so that our particles
    will collide with the world. To add the **Collision** module, go through the following
    steps:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个效果，我们将添加一个**碰撞**模块，以便我们的粒子可以与世界碰撞。要添加**碰撞**模块，请按照以下步骤操作：
- en: Right-click on the modules area and select **Collision** from the **Collision**
    menu.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模块区域右键单击并从**碰撞**菜单中选择**碰撞**。
- en: Select the **Collision** module.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**碰撞**模块。
- en: Set the **Resilience** value to **0.25**. This will make the collided particles
    less bouncy. Higher resilience means more bouncy particles.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**韧性**值设置为**0.25**。这将使碰撞的粒子弹性更小。更高的韧性意味着弹性更大的粒子。
- en: Set **Friction** to **0.2**. This will make the particles stick to the ground.
    A higher friction value (**1.0**) will not let the particle move after colliding,
    whereas lower values make the particle slide along the surface.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**摩擦**设置为**0.2**。这将使粒子粘附在地面上。更高的摩擦值（**1.0**）将使粒子在碰撞后无法移动，而较低的值使粒子在表面上滑动。
- en: 'Now, if you simulate or play the game with this particle in the world, you
    can see it bursting and colliding with the world but it''s very unrealistic. You
    can easily notice that every second this particle keeps repeating. So to prevent
    this, follow these steps:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你在这个世界中模拟或播放带有这个粒子的游戏，你可以看到它爆炸并与世界碰撞，但它非常不真实。你可以很容易地注意到每秒钟这个粒子都在重复。因此，为了防止这种情况，请按照以下步骤操作：
- en: Open the particle editor.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开粒子编辑器。
- en: Select the **Required** module.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**必需**模块。
- en: Under the **Duration** settings, set **Emitter Loops** to **1**. By default,
    this is set to **0**, which means it will loop forever.![Adding collision module](img/B03950_09_13.jpg)
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**持续时间**设置下，将**发射器循环**设置为**1**。默认情况下，这设置为**0**，意味着它将无限循环。![添加碰撞模块](img/B03950_09_13.jpg)
- en: Playing particle in Blueprints
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在蓝图中播放粒子
- en: 'Now that our particle effect is ready, let''s play it using Blueprints:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好了粒子效果，让我们使用蓝图来播放它：
- en: Right-click on **Content Browser**.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**内容浏览器**上右键单击。
- en: Select the **Blueprint** class.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**蓝图**类。
- en: From the resulting window, select **Actor**.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从结果窗口中选择**Actor**。
- en: Double-click on the **Blueprint** to open the editor.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击**蓝图**以打开编辑器。
- en: Select your bursting particles in **Content Browser**.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**内容浏览器**中选择你的爆炸粒子。
- en: Open the **Blueprint** editor and add a new **Particle System Component** (if
    you select the particle in **Content Browser**, it will automatically set that
    particle as the template for the **Particle System Component**).
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**蓝图**编辑器并添加一个新的**粒子系统组件**（如果你在**内容浏览器**中选择粒子，它将自动将该粒子设置为**粒子系统组件**的模板）。
- en: Go to the **Event Graph** tab.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到**事件图**标签页。
- en: Right-click anywhere on the graph and select **Add Custom Event…** from the
    **Add Event** category.![Playing particle in Blueprints](img/B03950_09_14.jpg)
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在图上任何位置右键单击，并从**添加事件**类别中选择**添加自定义事件…**。![在蓝图中播放粒子](img/B03950_09_14.jpg)
- en: Rename that **Custom Event** with any name you like. For this example, I renamed
    it **ActivateParticle**.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将该**自定义事件**重命名为你喜欢的任何名称。在这个例子中，我将其重命名为**ActivateParticle**。
- en: Create a graph like this:![Playing particle in Blueprints](img/B03950_09_15.jpg)
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个类似这样的图：![在蓝图中播放粒子](img/B03950_09_15.jpg)
- en: This Blueprint will first execute **ActivateParticle** when the game begins
    and when the event is executed, it randomly selects a time (in seconds) between
    **0.2** and **2**. When the time runs out, it activates the particle and calls
    this event again.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这个蓝图将在游戏开始时以及事件执行时首先执行**ActivateParticle**，当事件执行时，它会在**0.2**和**2**秒之间随机选择一个时间（以秒为单位）。当时间结束时，它激活粒子并再次调用此事件。
- en: 'Now, if you drag and drop this particle into the world and start playing, you
    will see the particles randomly bursting:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你将这个粒子拖放到世界中并开始播放，你会看到粒子随机爆发：
- en: '![Playing particle in Blueprints](img/B03950_09_16.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![在蓝图中播放粒子](img/B03950_09_16.jpg)'
- en: Summary
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: From here, you can extend this particle and add some lights to make it look
    even more real. Note that the **Light** module cannot be used with GPU particles
    so you need to create another emitter and add a light module there. Since you
    learned about the GPU particle data type, you can add more and more emitters that
    use other data types, such as beam type, mesh type, ribbon type, and so on. From
    what you learned in this chapter and other chapters, you can create a Blueprint
    that includes a light mesh that emits this spark particle effect when it receives
    damage.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，你可以扩展这个粒子并添加一些灯光，使其看起来更加逼真。请注意，**灯光**模块不能与GPU粒子一起使用，因此你需要创建另一个发射器并在那里添加灯光模块。既然你已经了解了GPU粒子数据类型，你可以添加更多使用其他数据类型的发射器，例如光束类型、网格类型、带状类型等等。从本章和其他章节中学到的知识，你可以创建一个蓝图，其中包含一个灯光网格，当它受到伤害时会发射这种火花粒子效果。
- en: In the next chapter, we will dive into the world of C++.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探索C++的世界。
