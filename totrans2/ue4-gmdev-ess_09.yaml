- en: Chapter 9. Particles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Particles in Unreal Engine 4 are created using cascade particle editor, which
    is a powerful and robust editor that allows artists to create visual effects.
    Cascade editor lets you add and edit various modules that make up the final effect.
    The primary job of the particle editor is to control the behavior of the particle
    system itself whereas the look and feel is often controlled by the material.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter you will learn about the cascade particle editor and create
    a simple particle system.
  prefs: []
  type: TYPE_NORMAL
- en: Cascade particle editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To access cascade particle editor, you need to create a **Particle System**
    in **Content Browser** by right-clicking on the **Content Browser** and selecting
    **Particle System**. When you select it, a new **Particle System** will be created
    and it prompts you to rename it. Give it a name and double-click on it to open
    cascade particle editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you open it you will see a window like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Cascade particle editor](img/B03950_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Cascade Editor User Interface
  prefs: []
  type: TYPE_NORMAL
- en: 'Cascade particle editor consists of five primary areas and they are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Toolbar**: This contains visualization and navigation tools'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Viewport**: This shows the current particle system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Details**: This lets you edit the current particle system, emitter, or modules'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Emitters**: These are the actual particle emitters and contain modules that
    are associated with the emitter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Curve Editor**: This is the editor that lets you modify properties in either
    relative or absolute time'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Toolbar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Toolbar contains various buttons. Let''s take a quick look at them:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Save**: This saves the particle system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Find in CB**: This locates the current particle system in Content Browser'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Restart Sim**: This restarts (resets) the current simulation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Restart Level**: This is the same as Restart Sim but will also update all
    the instances placed in level'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Thumbnail**: This saves the viewport view as a thumbnail for Content Browser'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bounds**: This enables or disables rendering of particle bounds'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Origin Axis**: This displays the origin axis in viewport'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Regen LOD**: Clicking on this generates the lowest LOD duplicating the highest
    LOD'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Regen LOD**: Clicking on this generates the lowest LOD using values based
    on the highest LOD'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lowest LOD**: This switches to the lowest LOD'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lower LOD**: This switches to the next lowest LOD'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Add LOD**: This adds a new LOD before the current LOD'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Add LOD**: This adds a new LOD after the current LOD'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Higher LOD**: This selects a higher LOD'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Highest LOD**: This selects the highest LOD'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Delete LOD**: This deletes the current LOD'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LODs are ways to update the particle effects to use efficient screen space depending
    on player distance. Based on the effect, there can be modules in a particle system
    that can be too small to render if the player is far away. Imagine fire embers.
    If the player is far away, the particle system will still process and calculate
    these effects which we don't need. This is where we use LODs. **Level of Detail**
    (**LODs**) can turn off specific modules or even shut down the emitter based on
    player distance.
  prefs: []
  type: TYPE_NORMAL
- en: Viewport
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Viewport shows you the real-time changes made to the particle system as well
    as other information's, such as total particle count, bounds, and so on. On the
    top left corner, you can click on the **View** button to switch between various
    view modes, such as **Unlit**, **Texture Density**, **Wireframe mode**, and so
    on.
  prefs: []
  type: TYPE_NORMAL
- en: Navigation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Using the following mouse buttons you can navigate inside the viewport:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Left Mouse Button**: This moves the camera around the particle system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Middle Mouse Button**: This pans the camera.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Right Mouse Button**: This rotates the camera.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Alt + Left Mouse Button**: This orbits the particle system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Alt + Right Mouse Button**: This dollies the camera forward and backward
    from a particle system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**F**: This focus on the particle system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**L + Left Mouse**: This rotates the light and only affects particles using
    **Lit** material. **Unlit** materials have no effect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside the **Viewport**, you can play/pause the particle simulation as well
    as adjust the simulation speed. You can access these settings under the **Time**
    option in **Viewport**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Navigation](img/B03950_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Details
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**The Details** panel is populated by the currently selected module or emitter.
    The main properties of the particle system can be accessed by selecting nothing
    in the **Emitters** panel or by right-clicking on the **Emitter** list and navigating
    to **Particle System** | **Select Particle System**.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Details](img/B03950_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Emitter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Emitter** panel is the heart of the particle system, and contains a horizontal
    arrangement of all the emitters. In each emitter column, you can add different
    modules to change the look and feel of the particles. You can add as many emitters
    as you want and each emitter will handle different aspects of the final effect.
  prefs: []
  type: TYPE_NORMAL
- en: '![Emitter](img/B03950_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'An **Emitter** contains three primary areas, and they are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: On top of the emitter block are the primary properties of the emitter, such
    as name, type, and so on. You can double-click on the gray area to collapse or
    expand the emitter column.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Below that, you can define the type of emitter. If you leave it blank (as in
    the preceding screenshot), then particles are simulated on the CPU.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, you can add modules to define how particles look.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Emitter types
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Cascade editor has four different emitter types, and they are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Beam Type**: When using this type, the particle will output beams connecting
    two points. This means you have to define a source point (for example, the emitter
    itself) and a target point (for example, an actor).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GPU Sprite**: Using this type lets you simulate particles on the GPU. Using
    this emitter lets you simulate and render thousands of particles efficiently.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mesh Type**: When using this, the particle will use actual **Static Mesh**
    instances for particles. This is pretty useful for simulating destruction effects
    (for example, debris).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ribbon**: This type indicates that the particle should be like a trail. This
    means, all particles (in order of their birth) are connected to each other to
    form ribbons.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Curve editor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the standard curve editor that lets the user adjust any values that
    need to change during the particle's lifetime or across the life of an emitter.
    To learn more about curve editor, you can visit the official documentation available
    at [https://docs.unrealengine.com/latest/INT/Engine/UI/CurveEditor/index.html](https://docs.unrealengine.com/latest/INT/Engine/UI/CurveEditor/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a simple particle system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a particle system:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on **Content Browser**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Particle** from the resulting context menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A new particle system asset will be created in **Content Browser** and prompts
    you to rename it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For this example, let's call it **MyExampleParticleSystem**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, double-click on it to open the **Particle** editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'By default, Unreal creates a default emitter for you to work with. This emitter
    contains six modules, and they are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Required**: This contains all the properties required by the emitter, such
    as the material used to render, how long the emitter should run before looping,
    can this emitter loop, and so on. You cannot delete this module.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Spawn**: This module contains the properties that determine how the particles
    are spawned. For example, how many particles to spawn per second. You cannot delete
    this module.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lifetime**: This is the lifetime of the spawned particles.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Initial Size**: This sets the initial size of particles when spawning. To
    modify the size after spawning, use **Size by Life** or **Size by Speed**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Initial Velocity**: This sets the initial velocity (speed) of particles when
    spawning. To modify the velocity after spawning, use **Velocity/Life**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Color over Life**: This sets the color of a particle over its lifetime.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For this example, we will modify the existing emitter and make it a GPU particle
    system that looks like sparks. We will also add collisions so that our particles
    collide with the world.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a simple material
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we start working with particles, we need to create a simple material
    that we can apply to the particles. To create a new material:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on **Content Browser** and select **Material**. Feel free to name
    it anything.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open **Material** editor and change **Blend Mode** to **Translucent**. This
    is required because GPU particle collision will not work on opaque materials.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, change **Shading Model** to **Unlit**. This is because we don't want the
    sparks to be affected by any kind of light since they are emissive.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, create a graph like this:![Creating a simple material](img/B03950_09_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the circular gradient texture in the **Texture Sample** node comes
    with the Engine itself. It's called **Greyscale**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have our material, it''s time to customize our particle system:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Required** module and under the **Emitters** group, apply our material
    created in the previous step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the black area below the emitter and select **New GPU Sprites**
    under **Type Data**. This will make our emitter simulate particles on GPU.![Creating
    a simple material](img/B03950_09_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Spawn** module and under the **Spawn** group, set **Rate** to **0**.
    This is because instead of spawning a certain amount of particles per second,
    we want to burst hundreds of them in one frame.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the **Burst** group, add a new entry in **Burst List** and set **Count**
    to **100** and **Count Low** to **10**. This will select a random value between
    **100** and **10** and will spawn that many particles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The final **Spawn** settings will look like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Creating a simple material](img/B03950_09_07.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: After adjusting the **Spawn** settings, we set the **Lifetime** of the particles
    to **0.4** and **3.0**, so each spawned particles' lifetime is between **0.4**
    and **3.0**. Now that we have particles spawning, it's time to adjust their size.
    To do so, select the **Initial Size** module and set **Max** to **1.0**, **10.0**,
    **0.0** and **Min** to **0.5**, **8.0**, **0.0**.![Creating a simple material](img/B03950_09_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that since GPU sprites are 2D, you can ignore the **Z** value. That's why
    we set them to **0.0**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After that, select the **Initial Velocity** module and set **Max** to **100.0**,
    **200.0**, **200.0** and **Min** to **-100.0**, **-10.0**, **100.0**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, if you drag and drop this particle into the world, you will see the particles
    bursting into the air.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that if you see nothing happening, make sure **Real-Time** is turned on
    for the editor (*Ctrl*+*R*).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Creating a simple material](img/B03950_09_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding gravity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to make things a bit more real, we will simulate gravity on these
    particles. Go back to your particle editor and follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the module area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Const Acceleration** from the **Acceleration** menu. This module will
    add the given acceleration to the existing acceleration of particles and updates
    the current and base velocity.![Adding gravity](img/B03950_09_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the **Acceleration** value, use **0.0**, **0.0**, **-450.0**. A negative
    value of **Z** (that is, **-450**) will make the particles go down as if they
    are affected by gravity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the default gravity value is **-980.0**. You can try this value as
    well.
  prefs: []
  type: TYPE_NORMAL
- en: Now, if you look at the particle in world, you can see them going down as if
    they are affected by gravity.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding gravity](img/B03950_09_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Applying the color over life module
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have something like sparks, let''s apply some color to it. Select
    the Color Over Life module and apply the settings shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Applying the color over life module](img/B03950_09_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Color Over Life** is a curve value. It means you can define what color to
    apply at a certain point in the lifetime of particle. The **0.0** value is the
    beginning and **1.0** is the end. In the preceding screenshot, you can see I have
    applied a bright reddish orange color (**50.0**, **20.0**, **8.0**) when the particle
    is spawning (**In Val** = **0.0**) and bright white color at the end (**In Val**
    = **1.0**).'
  prefs: []
  type: TYPE_NORMAL
- en: Adding collision module
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this effect, we will add a **Collision** module so that our particles
    will collide with the world. To add the **Collision** module, go through the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the modules area and select **Collision** from the **Collision**
    menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Collision** module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Resilience** value to **0.25**. This will make the collided particles
    less bouncy. Higher resilience means more bouncy particles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Friction** to **0.2**. This will make the particles stick to the ground.
    A higher friction value (**1.0**) will not let the particle move after colliding,
    whereas lower values make the particle slide along the surface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, if you simulate or play the game with this particle in the world, you
    can see it bursting and colliding with the world but it''s very unrealistic. You
    can easily notice that every second this particle keeps repeating. So to prevent
    this, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the particle editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Required** module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the **Duration** settings, set **Emitter Loops** to **1**. By default,
    this is set to **0**, which means it will loop forever.![Adding collision module](img/B03950_09_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Playing particle in Blueprints
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that our particle effect is ready, let''s play it using Blueprints:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on **Content Browser**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Blueprint** class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the resulting window, select **Actor**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the **Blueprint** to open the editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select your bursting particles in **Content Browser**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the **Blueprint** editor and add a new **Particle System Component** (if
    you select the particle in **Content Browser**, it will automatically set that
    particle as the template for the **Particle System Component**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the **Event Graph** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click anywhere on the graph and select **Add Custom Event…** from the
    **Add Event** category.![Playing particle in Blueprints](img/B03950_09_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename that **Custom Event** with any name you like. For this example, I renamed
    it **ActivateParticle**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a graph like this:![Playing particle in Blueprints](img/B03950_09_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This Blueprint will first execute **ActivateParticle** when the game begins
    and when the event is executed, it randomly selects a time (in seconds) between
    **0.2** and **2**. When the time runs out, it activates the particle and calls
    this event again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if you drag and drop this particle into the world and start playing, you
    will see the particles randomly bursting:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Playing particle in Blueprints](img/B03950_09_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From here, you can extend this particle and add some lights to make it look
    even more real. Note that the **Light** module cannot be used with GPU particles
    so you need to create another emitter and add a light module there. Since you
    learned about the GPU particle data type, you can add more and more emitters that
    use other data types, such as beam type, mesh type, ribbon type, and so on. From
    what you learned in this chapter and other chapters, you can create a Blueprint
    that includes a light mesh that emits this spark particle effect when it receives
    damage.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will dive into the world of C++.
  prefs: []
  type: TYPE_NORMAL
