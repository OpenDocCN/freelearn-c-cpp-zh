["```cpp\n    mkdir 3rd_party/android\n    mv android-sdk_r24.3.3-macosx.zip 3rd_party/android \n    ```", "```cpp\n    cd 3rd_party/android && unzip android-sdk_r24.3.3-macosx.zip\n    ```", "```cpp\n    ./android-sdk-macosx/tools/android\n    ```", "```cpp\n    ./android-sdk-macosx/tools/android list\n    ```", "```cpp\n    Available Android targets:\n    ----------\n    id: 1 or \"android-18\"\n    Name: Android 4.3.1\n    Type: Platform\n    API level: 18\n    Revision: 3\n    Skins: HVGA, QVGA, WQVGA400, WQVGA432, WSVGA, WVGA800 (default), WVGA854, WXGA720, WXGA800, WXGA800-7in\n    Tag/ABIs : default/armeabi-v7a, default/x86\n    ...\n    ```", "```cpp\n    sudo port install apache-ant\n    ```", "```cpp\n    mv android-ndk-r10e-darwin-x86_64.bin 3rd_party/android \n    ```", "```cpp\n    cd 3rd_party/android && chmod +x android-ndk-r10e-darwin-x86_64.bin\n    ```", "```cpp\n    ./android-ndk-r10e-darwin-x86_64.bin\n    ```", "```cpp\n    ...\n    Extracting  android-ndk-r10e/build/tools\n    Extracting  android-ndk-r10e/build/gmsl\n    Extracting  android-ndk-r10e/build/core\n    Extracting  android-ndk-r10e/build/awk\n    Extracting  android-ndk-r10e/build\n    Extracting  android-ndk-r10e\n\n    Everything is Ok\n    ```", "```cpp\n    mkdir src/com/android/gl3jni\n\n    ```", "```cpp\n    package com.android.gl3jni;\n\n    import android.app.Activity;\n    import android.os.Bundle;\n    /**\n     * Main application for Android\n     */\n    public class GL3JNIActivity extends Activity {\n\n      GL3JNIView mView;\n\n      @Override protected void onCreate(Bundle icicle) {\n        super.onCreate(icicle);\n        mView = new GL3JNIView(getApplication());\n        setContentView(mView);\n      }\n\n      @Override protected void onPause() {\n        super.onPause();\n        mView.onPause();\n      }\n\n      @Override protected void onResume() {\n        super.onResume();\n        mView.onResume();\n      }\n    }\n    ```", "```cpp\n    package com.android.gl3jni;\n\n    import android.content.Context;\n    import android.opengl.GLSurfaceView;\n    import javax.microedition.khronos.egl.EGLConfig;\n    import javax.microedition.khronos.opengles.GL10;\n\n    /**\n    * A simple application that uses OpenGL ES3 and GLSurface\n    */\n    class GL3JNIView extends GLSurfaceView {\n      public GL3JNIView(Context context) {\n        super(context);\n         /* Pick an EGLConfig with RGB8 color, 16-bit depth, no stencil, supporting OpenGL ES 3.0 or later */\n        setEGLConfigChooser(8, 8, 8, 0, 16, 0);\n        setEGLContextClientVersion(3);\n        setRenderer(new Renderer());\n      }\n      private static class Renderer implements GLSurfaceView.Renderer {\n        public void onDrawFrame(GL10 gl) {\n          GL3JNILib.step();\n        }\n\n        public void onSurfaceChanged(GL10 gl, int width, int height) {\n          GL3JNILib.init(width, height);\n        }\n        public void onSurfaceCreated(GL10 gl, EGLConfig config) {\n        }\n      }\n    }\n    ```", "```cpp\n    package com.android.gl3jni;\n\n    public class GL3JNILib {\n      static {\n        System.loadLibrary(\"gl3jni\");\n      }\n\n      public static native void init(int width, int height);\n      public static native void step();\n    }\n    ```", "```cpp\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <manifest xmlns:android=\n      \"http://schemas.android.com/apk/res/android\" \n      package=\"com.android.gl3jni\">\n        <application android:label=\n        \"@string/gl3jni_activity\">\n          <activity android:name=\"GL3JNIActivity\"           android:theme=\n          \"@android:style/Theme.NoTitleBar.Fullscreen\" \n          android:launchMode=\"singleTask\"             android:configChanges=\n          \"orientation|keyboardHidden\">\n                <intent-filter>\n                    <action android:name=\n              \"android.intent.action.MAIN\" />\n                    <category android:name=\n                      \"android.intent.category.LAUNCHER\" />\n                </intent-filter>\n            </activity>\n        </application>\n        <uses-feature android:glEsVersion=\"0x00030000\"/>\n        <uses-sdk android:minSdkVersion=\"18\"/>\n    </manifest>\n    ```", "```cpp\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <resources>\n      <string name=\"gl3jni_activity\">OpenGL ES Demo</string>\n    </resources>\n    ```", "```cpp\n    mkdir jni\n\n    ```", "```cpp\n    //header for JNI\n    #include <jni.h>\n\n    //header for the OpenGL ES3 library\n    #include <GLES3/gl3.h>\n    ```", "```cpp\n    #include <android/log.h>\n    #include <stdio.h>\n    #include <stdlib.h>\n    #include <math.h>\n\n    //android error log interface\n    #define  LOG_TAG    \"libgl3jni\"\n    #define  LOGI(...)  __android_log_print(ANDROID_LOG_INFO,LOG_TAG,__VA_ARGS__)\n    #define  LOGE(...)  __android_log_print(ANDROID_LOG_ERROR,LOG_TAG,__VA_ARGS__)\n    ```", "```cpp\n    GLuint gProgram;\n    GLuint gvPositionHandle;\n    GLuint gvColorHandle;\n\n    int width = 1280;\n    int height = 720;\n    ```", "```cpp\n    // Vertex shader source code\n    static const char g_vshader_code[] =\n      \"#version 300 es\\n\"\n        \"in vec4 vPosition;\\n\"\n      \"in vec4 vColor;\\n\"\n        \"out vec4 color;\\n\"\n        \"void main() {\\n\"\n          \"  gl_Position = vPosition;\\n\"\n          \"  color = vColor;\\n\"\n      \"}\\n\";\n\n    // fragment shader source code\n    static const char g_fshader_code[] =\n      \"#version 300 es\\n\"\n        \"precision mediump float;\\n\"\n      \"in vec4 color;\\n\"\n        \"out vec4 color_out;\\n\"\n        \"void main() {\\n\"\n          \"  color_out = color;\\n\"\n      \"}\\n\";\n    ```", "```cpp\n    /**\n     * Print out the error string from OpenGL\n     */\n    static void printGLString(const char *name, GLenum s) {\n      const char *v = (const char *) glGetString(s);\n      LOGI(\"GL %s = %s\\n\", name, v);\n    }\n\n    /**\n    * Error checking with OpenGL calls\n    */\n    static void checkGlError(const char* op) {\n      for (GLint error = glGetError(); error; error\n      = glGetError()) {\n        LOGI(\"After %s() glError (0x%x)\\n\", op, error);\n      }\n    }\n    ```", "```cpp\n    GLuint loadShader(GLenum shader_type, const char* p_source) {\n      GLuint shader = glCreateShader(shader_type);\n      if (shader) {\n        glShaderSource(shader, 1, &p_source, 0);\n        glCompileShader(shader);\n        GLint compiled = 0;\n        glGetShaderiv(shader, GL_COMPILE_STATUS, &compiled);\n\n        //Report error and delete the shader\n        if (!compiled) {\n          GLint infoLen = 0;\n          glGetShaderiv(shader, GL_INFO_LOG_LENGTH, &infoLen);\n          if (infoLen) {\n            char* buf = (char*) malloc(infoLen);\n            if (buf) {\n              glGetShaderInfoLog(shader, infoLen, 0, buf);\n              LOGE(\"Could not compile shader %d:\\n%s\\n\", shader_type, buf);\n              free(buf);\n            }\n            glDeleteShader(shader);\n            shader = 0;\n          }\n        }\n      }\n      return shader;\n    }\n    ```", "```cpp\n    GLuint createShaderProgram(const char *vertex_shader_code, const char *fragment_shader_code){\n      //create the vertex and fragment shaders\n      GLuint vertex_shader_id = loadShader(GL_VERTEX_SHADER, vertex_shader_code);\n      if (!vertex_shader_id) {\n        return 0;\n      }\n\n      GLuint fragment_shader_id = loadShader(GL_FRAGMENT_SHADER, fragment_shader_code);\n      if (!fragment_shader_id) {\n        return 0;\n      }\n\n      GLint result = GL_FALSE;\n      //link the program\n      GLuint program_id = glCreateProgram();\n      glAttachShader(program_id, vertex_shader_id);\n      checkGlError(\"glAttachShader\");\n      glAttachShader(program_id, fragment_shader_id);\n      checkGlError(\"glAttachShader\");\n      glLinkProgram(program_id);\n\n      //check the program and ensure that the program is linked properly\n      glGetProgramiv(program_id, GL_LINK_STATUS, &result);\n      if ( result != GL_TRUE ){\n        //error handling with Android\n        GLint bufLength = 0;\n        glGetProgramiv(program_id, GL_INFO_LOG_LENGTH, &bufLength);\n        if (bufLength) {\n          char* buf = (char*) malloc(bufLength);\n          if (buf) {\n            glGetProgramInfoLog(program_id, bufLength, 0, buf);\n            LOGE(\"Could not link program:\\n%s\\n\", buf);\n            free(buf);\n          }\n        }\n        glDeleteProgram(program_id);\n        program_id = 0;\n      }\n      else {\n        LOGI(\"Linked program Successfully\\n\");\n      }\n\n      glDeleteShader(vertex_shader_id);\n      glDeleteShader(fragment_shader_id);\n\n      return program_id;\n    }\n    ```", "```cpp\n    bool setupGraphics(int w, int h) {\n      printGLString(\"Version\", GL_VERSION);\n      printGLString(\"Vendor\", GL_VENDOR);\n      printGLString(\"Renderer\", GL_RENDERER);\n      printGLString(\"Extensions\", GL_EXTENSIONS);\n\n      LOGI(\"setupGraphics(%d, %d)\", w, h);\n      gProgram = createShaderProgram(g_vshader_code, g_fshader_code);\n      if (!gProgram) {\n        LOGE(\"Could not create program.\");\n        return false;\n      }\n      gvPositionHandle = glGetAttribLocation(gProgram, \"vPosition\");\n      checkGlError(\"glGetAttribLocation\");\n      LOGI(\"glGetAttribLocation(\\\"vPosition\\\") = %d\\n\",\n      gvPositionHandle);\n\n      gvColorHandle = glGetAttribLocation(gProgram, \"vColor\");\n      checkGlError(\"glGetAttribLocation\");\n      LOGI(\"glGetAttribLocation(\\\"vColor\\\") = %d\\n\",\n      gvColorHandle);\n\n      glViewport(0, 0, w, h);\n      width = w;\n      height = h;\n\n      checkGlError(\"glViewport\");\n\n      return true;\n    }\n    ```", "```cpp\n    //vertices\n    GLfloat gTriangle[9]={-1.0f, -1.0f, 0.0f,\n      1.0f, -1.0f, 0.0f,\n      0.0f, 1.0f, 0.0f};\n    GLfloat gColor[9]={1.0f, 0.0f, 0.0f,\n      0.0f, 1.0f, 0.0f,\n      0.0f, 0.0f, 1.0f};\n\n    void renderFrame() {\n      glClearColor(0.0f, 0.0f, 0.0f, 1.0f);\n      checkGlError(\"glClearColor\");\n\n      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n      checkGlError(\"glClear\");\n\n      glUseProgram(gProgram);\n      checkGlError(\"glUseProgram\");\n\n      glVertexAttribPointer(gvPositionHandle, 3, GL_FLOAT, GL_FALSE, 0, gTriangle);\n      checkGlError(\"glVertexAttribPointer\");\n\n      glVertexAttribPointer(gvColorHandle, 3, GL_FLOAT, GL_FALSE, 0, gColor);\n      checkGlError(\"glVertexAttribPointer\");\n\n      glEnableVertexAttribArray(gvPositionHandle);\n      checkGlError(\"glEnableVertexAttribArray\");\n\n      glEnableVertexAttribArray(gvColorHandle);\n      checkGlError(\"glEnableVertexAttribArray\");\n\n      glDrawArrays(GL_TRIANGLES, 0, 9);\n      checkGlError(\"glDrawArrays\");\n    }\n    ```", "```cpp\n    //external calls for Java\n    extern \"C\" {\n      JNIEXPORT void JNICALL Java_com_android_gl3jni_GL3JNILib_init(JNIEnv * env, jobject obj, jint width, jint height);\n      JNIEXPORT void JNICALL Java_com_android_gl3jni_GL3JNILib_step(JNIEnv * env, jobject obj);\n    };\n    ```", "```cpp\n    //link to internal calls\n    JNIEXPORT void JNICALL \n    Java_com_android_gl3jni_GL3JNILib_init(JNIEnv * env, \n      jobject obj, jint width, jint height)\n    {\n      setupGraphics(width, height);\n    }\n\n    JNIEXPORT void JNICALL Java_com_android_gl3jni_GL3JNILib_step(JNIEnv * env, jobject obj)\n    {\n      renderFrame();\n    }\n    //end of file\n    ```", "```cpp\n    LOCAL_PATH:= $(call my-dir)\n\n    include $(CLEAR_VARS)\n\n    LOCAL_MODULE    := libgl3jni\n    LOCAL_CFLAGS    := -Werror\n    #for simplified demo\n    LOCAL_SRC_FILES := main_simple.cpp\n    LOCAL_LDLIBS    := -llog -lGLESv3\n\n    include $(BUILD_SHARED_LIBRARY)\n    ```", "```cpp\n    APP_ABI := armeabi-v7a\n    #required for GLM and other static libraries\n    APP_STL := gnustl_static\n    ```", "```cpp\n    src/com/android/gl3jni/GL3JNIActivity.java\n    src/com/android/gl3jni/GL3JNILib.java\n    src/com/android/gl3jni/GL3JNIView.java\n    AndroidManifest.xml\n    res/value/strings.xml\n    jni/Android.mk\n    jni/Application.mk\n    jni/main_simple.cpp\n    ```", "```cpp\n    export ANDROID_SDK_PATH=\"../../../3rd_party/android/android-sdk-macosx\"\n    export ANDROID_NDK_PATH=\"../../../3rd_party/android/android-ndk-r10e\"\n    ```", "```cpp\n    $ANDROID_SDK_PATH/tools/android update project -p . -s --target \"android-18\"\n    ```", "```cpp\n    $ANDROID_NDK_PATH/ndk-build\n    ```", "```cpp\n    ant debug\n    ```", "```cpp\n    $ANDROID_SDK_PATH/platform-tools/adb install -r bin/GL3JNIActivity-debug.apk\n    ```", "```cpp\nadb logcat \n```", "```cpp\nI/libgl3jni( 6681): GL Version = OpenGL ES 3.0 V@66.0 AU@04.04.02.048.042 LNXBUILD_AU_LINUX_ANDROID_LNX.LA.3.5.1_RB1.04.04.02.048.042+PATCH[ES]_msm8974_LNX.LA.3.5.1_RB1__release_ENGG (CL@)\nI/libgl3jni( 6681): GL Vendor = Qualcomm\nI/libgl3jni( 6681): GL Renderer = Adreno (TM) 330\nI/libgl3jni( 6681): GL Extensions = GL_AMD_compressed_ATC_texture GL_AMD_performance_monitor GL_AMD_program_binary_Z400 GL_EXT_debug_label GL_EXT_debug_marker GL_EXT_discard_framebuffer GL_EXT_robustness GL_EXT_texture_format_BGRA8888 GL_EXT_texture_type_2_10_10_10_REV GL_NV_fence GL_OES_compressed_ETC1_RGB8_texture GL_OES_depth_texture GL_OES_depth24 GL_OES_EGL_image GL_OES_EGL_image_external GL_OES_element_index_uint GL_OES_fbo_render_mipmap GL_OES_fragment_precision_high GL_OES_get_program_binary GL_OES_packed_depth_stencil GL_OES_depth_texture_cube_map GL_OES_rgb8_rgba8 GL_OES_standard_derivatives GL_OES_texture_3D GL_OES_texture_float GL_OES_texture_half_float GL_OES_texture_half_float_linear GL_OES_texture_npot GL_OES_vertex_half_float GL_OES_vertex_type_10_10_10_2 GL_OES_vertex_array_object GL_QCOM_alpha_test GL_QCOM_binning_control GL_QCOM_driver_control GL_QCOM_perfmon_global_mode GL_QCOM_extended_get GL_QCOM_extended_get2 GL_QCOM_tiled_rendering GL_QCOM_writeonly_rendering GL_EXT_sRGB GL_EXT_sRGB_write_control GL_EXT_\nI/libgl3jni( 6681): setupGraphics(1440, 2560)\n```", "```cpp\nJNIEXPORT void JNICALL Java_com_android_gl3jni_GL3JNILib_init\n(JNIEnv *env, jobject obj, jint width, jint height)\n```"]