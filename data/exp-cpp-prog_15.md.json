["```cpp\nThread 1 received signal SIGINT, Interrupt.\n0x00007fff8a3fff72 in mach_msg_trap () from /usr/lib/system/libsystem_kernel.dylib\n(gdb) info threads\nId   Target Id         Frame \n* 1    Thread 0x1703 of process 72492 0x00007fff8a3fff72 in mach_msg_trap () from /usr/lib/system/libsystem_kernel.dylib\n3    Thread 0x1a03 of process 72492 0x00007fff8a406efa in kevent_qos () from /usr/lib/system/libsystem_kernel.dylib\n10   Thread 0x2063 of process 72492 0x00007fff8a3fff72 in mach_msg_trap () from /usr/lib/system/libsystem_kernel.dylibs\n14   Thread 0x1e0f of process 72492 0x00007fff8a405d3e in __pselect () from /usr/lib/system/libsystem_kernel.dylib\n(gdb) c\nContinuing.\n\n```", "```cpp\n$ gdb dispatcher_demo.exe \nGNU gdb (GDB) 7.9 \nCopyright (C) 2015 Free Software Foundation, Inc. \nReading symbols from dispatcher_demo.exe...done. \n(gdb) break main.cpp:67 \nBreakpoint 1 at 0x4017af: file main.cpp, line 67\\. \n(gdb) run \nStarting program: dispatcher_demo.exe \n[New Thread 10264.0x2a90] \n[New Thread 10264.0x2bac] \n[New Thread 10264.0x2914] \n[New Thread 10264.0x1b80] \n[New Thread 10264.0x213c] \n[New Thread 10264.0x2228] \n[New Thread 10264.0x2338] \n[New Thread 10264.0x270c] \n[New Thread 10264.0x14ac] \n[New Thread 10264.0x24f8] \n[New Thread 10264.0x1a90] \n```", "```cpp\nBreakpoint 1, main () at main.cpp:67 \n67              this_thread::sleep_for(chrono::seconds(5)); \n(gdb) info threads \nId   Target Id         Frame \n11   Thread 10264.0x1a90 0x00000000775ec2ea in ntdll!ZwWaitForMultipleObjects () from /c/Windows/SYSTEM32/ntdll.dll \n10   Thread 10264.0x24f8 0x00000000775ec2ea in ntdll!ZwWaitForMultipleObjects () from /c/Windows/SYSTEM32/ntdll.dll \n9    Thread 10264.0x14ac 0x00000000775ec2ea in ntdll!ZwWaitForMultipleObjects () from /c/Windows/SYSTEM32/ntdll.dll \n8    Thread 10264.0x270c 0x00000000775ec2ea in ntdll!ZwWaitForMultipleObjects () from /c/Windows/SYSTEM32/ntdll.dll \n7    Thread 10264.0x2338 0x00000000775ec2ea in ntdll!ZwWaitForMultipleObjects () from /c/Windows/SYSTEM32/ntdll.dll \n6    Thread 10264.0x2228 0x00000000775ec2ea in ntdll!ZwWaitForMultipleObjects () from /c/Windows/SYSTEM32/ntdll.dll \n5    Thread 10264.0x213c 0x00000000775ec2ea in ntdll!ZwWaitForMultipleObjects () from /c/Windows/SYSTEM32/ntdll.dll \n4    Thread 10264.0x1b80 0x0000000064942eaf in ?? () from /mingw64/bin/libwinpthread-1.dll \n3    Thread 10264.0x2914 0x00000000775c2385 in ntdll!LdrUnloadDll () from /c/Windows/SYSTEM32/ntdll.dll \n2    Thread 10264.0x2bac 0x00000000775c2385 in ntdll!LdrUnloadDll () from /c/Windows/SYSTEM32/ntdll.dll \n* 1    Thread 10264.0x2a90 main () at main.cpp:67 \n(gdb) bt \n#0  main () at main.cpp:67 \n(gdb) c \nContinuing. \n```", "```cpp\nThread 1 received signal SIGINT, Interrupt.\n0x00007fff8a3fff72 in mach_msg_trap () from /usr/lib/system/libsystem_kernel.dylib\n(gdb) bt\n#0  0x00007fff8a3fff72 in mach_msg_trap () from /usr/lib/system/libsystem_kernel.dylib\n#1  0x00007fff8a3ff3b3 in mach_msg () from /usr/lib/system/libsystem_kernel.dylib\n#2  0x00007fff99f37124 in __CFRunLoopServiceMachPort () from /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation\n#3  0x00007fff99f365ec in __CFRunLoopRun () from /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation\n#4  0x00007fff99f35e38 in CFRunLoopRunSpecific () from /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation\n#5  0x00007fff97b73935 in RunCurrentEventLoopInMode ()\nfrom /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/HIToolbox.framework/Versions/A/HIToolbox\n#6  0x00007fff97b7376f in ReceiveNextEventCommon ()\nfrom /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/HIToolbox.framework/Versions/A/HIToolbox\n#7  0x00007fff97b735af in _BlockUntilNextEventMatchingListInModeWithFilter ()\nfrom /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/HIToolbox.framework/Versions/A/HIToolbox\n#8  0x00007fff9ed3cdf6 in _DPSNextEvent () from /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit\n#9  0x00007fff9ed3c226 in -[NSApplication _nextEventMatchingEventMask:untilDate:inMode:dequeue:] ()\nfrom /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit\n#10 0x00007fff9ed30d80 in -[NSApplication run] () from /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit\n#11 0x0000000102a25143 in qt_plugin_instance () from /usr/local/Cellar/qt/5.8.0_1/plugins/platforms/libqcocoa.dylib\n#12 0x0000000100cd3811 in QEventLoop::exec(QFlags<QEventLoop::ProcessEventsFlag>) () from /usr/local/opt/qt5/lib/QtCore.framework/Versions/5/QtCore\n#13 0x0000000100cd80a7 in QCoreApplication::exec() () from /usr/local/opt/qt5/lib/QtCore.framework/Versions/5/QtCore\n#14 0x0000000100003956 in main (argc=<optimized out>, argv=<optimized out>) at main.cpp:10\n(gdb) c\nContinuing.\n\n```", "```cpp\n$ ./dispatcher_demo\n```", "```cpp\n$ valgrind --log-file=dispatcher.log --read-var-info=yes --leak-check=full ./dispatcher_demo\n```", "```cpp\n==5764== Memcheck, a memory error detector\n==5764== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\n==5764== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info\n==5764== Command: ./dispatcher_demo\n==5764== Parent PID: 2838\n==5764==\n==5764==\n==5764== HEAP SUMMARY:\n==5764==     in use at exit: 75,184 bytes in 71 blocks\n==5764==   total heap usage: 260 allocs, 189 frees, 88,678 bytes allocated\n==5764==\n==5764== 80 bytes in 10 blocks are definitely lost in loss record 1 of 5\n==5764==    at 0x4C2E0EF: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\n==5764==    by 0x402EFD: Dispatcher::init(int) (dispatcher.cpp:40)\n==5764==    by 0x409300: main (main.cpp:51)\n==5764==\n==5764== 960 bytes in 40 blocks are definitely lost in loss record 3 of 5\n==5764==    at 0x4C2E0EF: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\n==5764==    by 0x409338: main (main.cpp:60)\n==5764==\n==5764== 1,440 (1,200 direct, 240 indirect) bytes in 10 blocks are definitely lost in loss record 4 of 5\n==5764==    at 0x4C2E0EF: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\n==5764==    by 0x402EBB: Dispatcher::init(int) (dispatcher.cpp:38)\n==5764==    by 0x409300: main (main.cpp:51)\n==5764==\n==5764== LEAK SUMMARY:\n==5764==    definitely lost: 2,240 bytes in 60 blocks\n==5764==    indirectly lost: 240 bytes in 10 blocks\n==5764==      possibly lost: 0 bytes in 0 blocks\n==5764==    still reachable: 72,704 bytes in 1 blocks\n==5764==         suppressed: 0 bytes in 0 blocks\n==5764== Reachable blocks (those to which a pointer was found) are not shown.\n==5764== To see them, rerun with: --leak-check=full --show-leak-kinds=all\n==5764==\n==5764== For counts of detected and suppressed errors, rerun with: -v\n==5764== ERROR SUMMARY: 3 errors from 3 contexts (suppressed: 0 from 0) \n```", "```cpp\nw = new Worker; \n```", "```cpp\nt = new thread(&Worker::run, w); \n```", "```cpp\nrq = new Request(); \n```", "```cpp\nInvalid read of size <bytes>\nat 0x<memory address>: (location)\nby 0x<memory address>: (location)\nby 0x<memory address>: (location)\nAddress 0x<memory address> <error description>\n\n```", "```cpp\n$ valgrind --read-var-info=yes --leak-check=full ./unval\n==6822== Memcheck, a memory error detector\n==6822== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\n==6822== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info\n==6822== Command: ./unval\n==6822== \n==6822== Conditional jump or move depends on uninitialised value(s)\n==6822==    at 0x4E87B83: vfprintf (vfprintf.c:1631)\n==6822==    by 0x4E8F898: printf (printf.c:33)\n==6822==    by 0x400541: main (unval.cpp:6)\n==6822== \n==6822== Use of uninitialised value of size 8\n==6822==    at 0x4E8476B: _itoa_word (_itoa.c:179)\n==6822==    by 0x4E8812C: vfprintf (vfprintf.c:1631)\n==6822==    by 0x4E8F898: printf (printf.c:33)\n==6822==    by 0x400541: main (unval.cpp:6)\n==6822== \n==6822== Conditional jump or move depends on uninitialised value(s)\n==6822==    at 0x4E84775: _itoa_word (_itoa.c:179)\n==6822==    by 0x4E8812C: vfprintf (vfprintf.c:1631)\n==6822==    by 0x4E8F898: printf (printf.c:33)\n==6822==    by 0x400541: main (unval.cpp:6)\n==6822== \n==6822== Conditional jump or move depends on uninitialised value(s)\n==6822==    at 0x4E881AF: vfprintf (vfprintf.c:1631)\n==6822==    by 0x4E8F898: printf (printf.c:33)\n==6822==    by 0x400541: main (unval.cpp:6)\n==6822== \n==6822== Conditional jump or move depends on uninitialised value(s)\n==6822==    at 0x4E87C59: vfprintf (vfprintf.c:1631)\n==6822==    by 0x4E8F898: printf (printf.c:33)\n==6822==    by 0x400541: main (unval.cpp:6)\n==6822== \n==6822== Conditional jump or move depends on uninitialised value(s)\n==6822==    at 0x4E8841A: vfprintf (vfprintf.c:1631)\n==6822==    by 0x4E8F898: printf (printf.c:33)\n==6822==    by 0x400541: main (unval.cpp:6)\n==6822== \n==6822== Conditional jump or move depends on uninitialised value(s)\n==6822==    at 0x4E87CAB: vfprintf (vfprintf.c:1631)\n==6822==    by 0x4E8F898: printf (printf.c:33)\n==6822==    by 0x400541: main (unval.cpp:6)\n==6822== \n==6822== Conditional jump or move depends on uninitialised value(s)\n==6822==    at 0x4E87CE2: vfprintf (vfprintf.c:1631)\n==6822==    by 0x4E8F898: printf (printf.c:33)\n==6822==    by 0x400541: main (unval.cpp:6)\n==6822== \n==6822== \n==6822== HEAP SUMMARY:\n==6822==     in use at exit: 0 bytes in 0 blocks\n==6822==   total heap usage: 1 allocs, 1 frees, 1,024 bytes allocated\n==6822== \n==6822== All heap blocks were freed -- no leaks are possible\n==6822== \n==6822== For counts of detected and suppressed errors, rerun with: -v\n==6822== Use --track-origins=yes to see where uninitialised values come from\n==6822== ERROR SUMMARY: 8 errors from 8 contexts (suppressed: 0 from 0)\n\n```", "```cpp\n#include <cstring>\n #include <cstdio>\n\n int main() {\n    int x;  \n    printf (\"x = %dn\", x); \n    return 0;\n } \n```", "```cpp\n$ valgrind --read-var-info=yes --leak-check=full ./unsyscall\n==6848== Memcheck, a memory error detector\n==6848== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\n==6848== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info\n==6848== Command: ./unsyscall\n==6848== \n==6848== Syscall param write(buf) points to uninitialised byte(s)\n==6848==    at 0x4F306E0: __write_nocancel (syscall-template.S:84)\n==6848==    by 0x4005EF: main (unsyscall.cpp:7)\n==6848==  Address 0x5203040 is 0 bytes inside a block of size 10 alloc'd\n==6848==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\n==6848==    by 0x4005C7: main (unsyscall.cpp:5)\n==6848== \n==6848== Syscall param exit_group(status) contains uninitialised byte(s)\n==6848==    at 0x4F05B98: _Exit (_exit.c:31)\n==6848==    by 0x4E73FAA: __run_exit_handlers (exit.c:97)\n==6848==    by 0x4E74044: exit (exit.c:104)\n==6848==    by 0x4005FC: main (unsyscall.cpp:8)\n==6848== \n==6848== \n==6848== HEAP SUMMARY:\n==6848==     in use at exit: 14 bytes in 2 blocks\n==6848==   total heap usage: 2 allocs, 0 frees, 14 bytes allocated\n==6848== \n==6848== LEAK SUMMARY:\n==6848==    definitely lost: 0 bytes in 0 blocks\n==6848==    indirectly lost: 0 bytes in 0 blocks\n==6848==      possibly lost: 0 bytes in 0 blocks\n==6848==    still reachable: 14 bytes in 2 blocks\n==6848==         suppressed: 0 bytes in 0 blocks\n==6848== Reachable blocks (those to which a pointer was found) are not shown.\n==6848== To see them, rerun with: --leak-check=full --show-leak-kinds=all\n==6848== \n==6848== For counts of detected and suppressed errors, rerun with: -v\n==6848== Use --track-origins=yes to see where uninitialised values come from\n==6848== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)\n\n```", "```cpp\n#include <cstdlib>\n #include <unistd.h> \n\n int main() {  \n    char* arr  = (char*) malloc(10);  \n    int*  arr2 = (int*) malloc(sizeof(int));  \n    write(1, arr, 10 ); \n    exit(arr2[0]);\n } \n```", "```cpp\n==32233== Argument 'size' of function malloc has a fishy (possibly negative) value: -3\n==32233==    at 0x4C2CFA7: malloc (vg_replace_malloc.c:298)\n==32233==    by 0x400555: foo (fishy.c:15)\n==32233==    by 0x400583: main (fishy.c:23)\n\n```", "```cpp\n$ valgrind --tool=helgrind --read-var-info=yes --log-file=dispatcher_helgrind.log ./dispatcher_demo\n\n```", "```cpp\n==6417== Helgrind, a thread error detector\n==6417== Copyright (C) 2007-2015, and GNU GPL'd, by OpenWorks LLP et al.\n==6417== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info\n==6417== Command: ./dispatcher_demo\n==6417== Parent PID: 2838\n==6417== \n==6417== ---Thread-Announcement------------------------------------------\n==6417== \n==6417== Thread #1 is the program's root thread \n```", "```cpp\n==6417== \n==6417== ---Thread-Announcement------------------------------------------\n==6417== \n==6417== Thread #2 was created\n==6417==    at 0x56FB7EE: clone (clone.S:74)\n==6417==    by 0x53DE149: create_thread (createthread.c:102)\n==6417==    by 0x53DFE83: pthread_create@@GLIBC_2.2.5 (pthread_create.c:679)\n==6417==    by 0x4C34BB7: ??? (in /usr/lib/valgrind/vgpreload_helgrind-amd64-linux.so)\n==6417==    by 0x4EF8DC2: std::thread::_M_start_thread(std::shared_ptr<std::thread::_Impl_base>, void (*)()) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.21)\n==6417==    by 0x403AD7: std::thread::thread<void (Worker::*)(), Worker*&>(void (Worker::*&&)(), Worker*&) (thread:137)\n==6417==    by 0x4030E6: Dispatcher::init(int) (dispatcher.cpp:40)\n==6417==    by 0x4090A0: main (main.cpp:51)\n==6417== \n==6417== ----------------------------------------------------------------\n```", "```cpp\n==6417== \n==6417==  Lock at 0x60F4A0 was first observed\n==6417==    at 0x4C321BC: ??? (in /usr/lib/valgrind/vgpreload_helgrind-amd64-linux.so)\n==6417==    by 0x401CD1: __gthread_mutex_lock(pthread_mutex_t*) (gthr-default.h:748)\n==6417==    by 0x402103: std::mutex::lock() (mutex:135)\n==6417==    by 0x40337E: Dispatcher::addWorker(Worker*) (dispatcher.cpp:108)\n==6417==    by 0x401DF9: Worker::run() (worker.cpp:49)\n==6417==    by 0x408FA4: void std::_Mem_fn_base<void (Worker::*)(), true>::operator()<, void>(Worker*) const (in /media/sf_Projects/Cerflet/dispatcher/dispatcher_demo)\n==6417==    by 0x408F38: void std::_Bind_simple<std::_Mem_fn<void (Worker::*)()> (Worker*)>::_M_invoke<0ul>(std::_Index_tuple<0ul>) (functional:1531)\n==6417==    by 0x408E3F: std::_Bind_simple<std::_Mem_fn<void (Worker::*)()> (Worker*)>::operator()() (functional:1520)\n==6417==    by 0x408D47: std::thread::_Impl<std::_Bind_simple<std::_Mem_fn<void (Worker::*)()> (Worker*)> >::_M_run() (thread:115)\n==6417==    by 0x4EF8C7F: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.21)\n==6417==    by 0x4C34DB6: ??? (in /usr/lib/valgrind/vgpreload_helgrind-amd64-linux.so)\n==6417==    by 0x53DF6B9: start_thread (pthread_create.c:333)\n==6417==  Address 0x60f4a0 is 0 bytes inside data symbol \"_ZN10Dispatcher12workersMutexE\"\n==6417== \n==6417== Possible data race during write of size 1 at 0x5CD9261 by thread #1\n==6417== Locks held: 1, at address 0x60F4A0\n==6417==    at 0x403650: Worker::setRequest(AbstractRequest*) (worker.h:38)\n==6417==    by 0x403253: Dispatcher::addRequest(AbstractRequest*) (dispatcher.cpp:70)\n==6417==    by 0x409132: main (main.cpp:63)\n==6417== \n==6417== This conflicts with a previous read of size 1 by thread #2\n==6417== Locks held: none\n==6417==    at 0x401E02: Worker::run() (worker.cpp:51)\n==6417==    by 0x408FA4: void std::_Mem_fn_base<void (Worker::*)(), true>::operator()<, void>(Worker*) const (in /media/sf_Projects/Cerflet/dispatcher/dispatcher_demo)\n==6417==    by 0x408F38: void std::_Bind_simple<std::_Mem_fn<void (Worker::*)()> (Worker*)>::_M_invoke<0ul>(std::_Index_tuple<0ul>) (functional:1531)\n==6417==    by 0x408E3F: std::_Bind_simple<std::_Mem_fn<void (Worker::*)()> (Worker*)>::operator()() (functional:1520)\n==6417==    by 0x408D47: std::thread::_Impl<std::_Bind_simple<std::_Mem_fn<void (Worker::*)()> (Worker*)> >::_M_run() (thread:115)\n==6417==    by 0x4EF8C7F: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.21)\n==6417==    by 0x4C34DB6: ??? (in /usr/lib/valgrind/vgpreload_helgrind-amd64-linux.so)\n==6417==    by 0x53DF6B9: start_thread (pthread_create.c:333)\n==6417==  Address 0x5cd9261 is 97 bytes inside a block of size 104 alloc'd\n==6417==    at 0x4C2F50F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_helgrind-amd64-linux.so)\n==6417==    by 0x40308F: Dispatcher::init(int) (dispatcher.cpp:38)\n==6417==    by 0x4090A0: main (main.cpp:51)\n==6417==  Block was alloc'd by thread #1\n==6417== \n==6417== ----------------------------------------------------------------\n```", "```cpp\n==6417==    at 0x403650: Worker::setRequest(AbstractRequest*) (worker.h:38) ==6417==    at 0x401E02: Worker::run() (worker.cpp:51) \n```", "```cpp\nvoid setRequest(AbstractRequest* request) { this->request = request; ready = true; }\nwhile (!ready && running) { \n```", "```cpp\n==6417== Possible data race during write of size 1 at 0x5CD9260 by thread #1\n==6417== Locks held: none\n==6417==    at 0x40362C: Worker::stop() (worker.h:37)\n==6417==    by 0x403184: Dispatcher::stop() (dispatcher.cpp:50)\n==6417==    by 0x409163: main (main.cpp:70)\n==6417== \n==6417== This conflicts with a previous read of size 1 by thread #2 ==6417== Locks held: none\n==6417==    at 0x401E0E: Worker::run() (worker.cpp:51)\n==6417==    by 0x408FA4: void std::_Mem_fn_base<void (Worker::*)(), true>::operator()<, void>(Worker*) const (in /media/sf_Projects/Cerflet/dispatcher/dispatcher_demo)\n==6417==    by 0x408F38: void std::_Bind_simple<std::_Mem_fn<void (Worker::*)()> (Worker*)>::_M_invoke<0ul>(std::_Index_tuple<0ul>) (functional:1531)\n==6417==    by 0x408E3F: std::_Bind_simple<std::_Mem_fn<void (Worker::*)()> (Worker*)>::operator()() (functional:1520)\n==6417==    by 0x408D47: std::thread::_Impl<std::_Bind_simple<std::_Mem_fn<void (Worker::*)()> (Worker*)> >::_M_run() (thread:115)\n==6417==    by 0x4EF8C7F: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.21)\n==6417==    by 0x4C34DB6: ??? (in /usr/lib/valgrind/vgpreload_helgrind-amd64-linux.so)\n==6417==    by 0x53DF6B9: start_thread (pthread_create.c:333)\n==6417==  Address 0x5cd9260 is 96 bytes inside a block of size 104 alloc'd\n==6417==    at 0x4C2F50F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_helgrind-amd64-linux.so)\n==6417==    by 0x40308F: Dispatcher::init(int) (dispatcher.cpp:38)\n==6417==    by 0x4090A0: main (main.cpp:51)\n==6417==  Block was alloc'd by thread #1 \n```", "```cpp\n==6417==  Lock at 0x60F540 was first observed\n==6417==    at 0x4C321BC: ??? (in /usr/lib/valgrind/vgpreload_helgrind-amd64-linux.so)\n==6417==    by 0x401CD1: __gthread_mutex_lock(pthread_mutex_t*) (gthr-default.h:748)\n==6417==    by 0x402103: std::mutex::lock() (mutex:135)\n==6417==    by 0x409044: logFnc(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (main.cpp:40)\n==6417==    by 0x40283E: Request::process() (request.cpp:19)\n==6417==    by 0x401DCE: Worker::run() (worker.cpp:44)\n==6417==    by 0x408FA4: void std::_Mem_fn_base<void (Worker::*)(), true>::operator()<, void>(Worker*) const (in /media/sf_Projects/Cerflet/dispatcher/dispatcher_demo)\n==6417==    by 0x408F38: void std::_Bind_simple<std::_Mem_fn<void (Worker::*)()> (Worker*)>::_M_invoke<0ul>(std::_Index_tuple<0ul>) (functional:1531)\n==6417==    by 0x408E3F: std::_Bind_simple<std::_Mem_fn<void (Worker::*)()> (Worker*)>::operator()() (functional:1520)\n==6417==    by 0x408D47: std::thread::_Impl<std::_Bind_simple<std::_Mem_fn<void (Worker::*)()> (Worker*)> >::_M_run() (thread:115)\n==6417==    by 0x4EF8C7F: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.21)\n==6417==    by 0x4C34DB6: ??? (in /usr/lib/valgrind/vgpreload_helgrind-amd64-linux.so)\n==6417==  Address 0x60f540 is 0 bytes inside data symbol \"logMutex\"\n==6417== \n==6417== Possible data race during read of size 8 at 0x60F238 by thread #1\n==6417== Locks held: none\n==6417==    at 0x4F4ED6F: std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.21)\n==6417==    by 0x4F4F236: std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.21)\n==6417==    by 0x403199: Dispatcher::stop() (dispatcher.cpp:53)\n==6417==    by 0x409163: main (main.cpp:70)\n==6417== \n==6417== This conflicts with a previous write of size 8 by thread #7\n==6417== Locks held: 1, at address 0x60F540\n==6417==    at 0x4F4EE25: std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.21)\n==6417==    by 0x409055: logFnc(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (main.cpp:41)\n==6417==    by 0x402916: Request::finish() (request.cpp:27)\n==6417==    by 0x401DED: Worker::run() (worker.cpp:45)\n==6417==    by 0x408FA4: void std::_Mem_fn_base<void (Worker::*)(), true>::operator()<, void>(Worker*) const (in /media/sf_Projects/Cerflet/dispatcher/dispatcher_demo)\n==6417==    by 0x408F38: void std::_Bind_simple<std::_Mem_fn<void (Worker::*)()> (Worker*)>::_M_invoke<0ul>(std::_Index_tuple<0ul>) (functional:1531)\n==6417==    by 0x408E3F: std::_Bind_simple<std::_Mem_fn<void (Worker::*)()> (Worker*)>::operator()() (functional:1520)\n==6417==    by 0x408D47: std::thread::_Impl<std::_Bind_simple<std::_Mem_fn<void (Worker::*)()> (Worker*)> >::_M_run() (thread:115)\n==6417==  Address 0x60f238 is 24 bytes inside data symbol \"_ZSt4cout@@GLIBCXX_3.4\"  \n```", "```cpp\n$ valgrind --tool=drd --log-file=dispatcher_drd.log --read-var-info=yes ./dispatcher_demo\n```", "```cpp\n==6576== drd, a thread error detector\n==6576== Copyright (C) 2006-2015, and GNU GPL'd, by Bart Van Assche.\n==6576== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info\n==6576== Command: ./dispatcher_demo\n==6576== Parent PID: 2838\n==6576== \n==6576== Conflicting store by thread 1 at 0x05ce51b1 size 1\n==6576==    at 0x403650: Worker::setRequest(AbstractRequest*) (worker.h:38)\n==6576==    by 0x403253: Dispatcher::addRequest(AbstractRequest*) (dispatcher.cpp:70)\n==6576==    by 0x409132: main (main.cpp:63)\n==6576== Address 0x5ce51b1 is at offset 97 from 0x5ce5150\\. Allocation context:\n==6576==    at 0x4C3150F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_drd-amd64-linux.so)\n==6576==    by 0x40308F: Dispatcher::init(int) (dispatcher.cpp:38)\n==6576==    by 0x4090A0: main (main.cpp:51)\n==6576== Other segment start (thread 2)\n==6576==    at 0x4C3818C: pthread_mutex_unlock (in /usr/lib/valgrind/vgpreload_drd-amd64-linux.so)\n==6576==    by 0x401D00: __gthread_mutex_unlock(pthread_mutex_t*) (gthr-default.h:778)\n==6576==    by 0x402131: std::mutex::unlock() (mutex:153)\n==6576==    by 0x403399: Dispatcher::addWorker(Worker*) (dispatcher.cpp:110)\n==6576==    by 0x401DF9: Worker::run() (worker.cpp:49)\n==6576==    by 0x408FA4: void std::_Mem_fn_base<void (Worker::*)(), true>::operator()<, void>(Worker*) const (in /media/sf_Projects/Cerflet/dispatcher/dispatcher_demo)\n==6576==    by 0x408F38: void std::_Bind_simple<std::_Mem_fn<void (Worker::*)()> (Worker*)>::_M_invoke<0ul>(std::_Index_tuple<0ul>) (functional:1531)\n==6576==    by 0x408E3F: std::_Bind_simple<std::_Mem_fn<void (Worker::*)()> (Worker*)>::operator()() (functional:1520)\n==6576==    by 0x408D47: std::thread::_Impl<std::_Bind_simple<std::_Mem_fn<void (Worker::*)()> (Worker*)> >::_M_run() (thread:115)\n==6576==    by 0x4F04C7F: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.21)\n==6576==    by 0x4C3458B: ??? (in /usr/lib/valgrind/vgpreload_drd-amd64-linux.so)\n==6576==    by 0x53EB6B9: start_thread (pthread_create.c:333)\n==6576== Other segment end (thread 2)\n==6576==    at 0x4C3725B: pthread_mutex_lock (in /usr/lib/valgrind/vgpreload_drd-amd64-linux.so)\n==6576==    by 0x401CD1: __gthread_mutex_lock(pthread_mutex_t*) (gthr-default.h:748)\n==6576==    by 0x402103: std::mutex::lock() (mutex:135)\n==6576==    by 0x4023F8: std::unique_lock<std::mutex>::lock() (mutex:485)\n==6576==    by 0x40219D: std::unique_lock<std::mutex>::unique_lock(std::mutex&) (mutex:415)\n==6576==    by 0x401E33: Worker::run() (worker.cpp:52)\n==6576==    by 0x408FA4: void std::_Mem_fn_base<void (Worker::*)(), true>::operator()<, void>(Worker*) const (in /media/sf_Projects/Cerflet/dispatcher/dispatcher_demo)\n==6576==    by 0x408F38: void std::_Bind_simple<std::_Mem_fn<void (Worker::*)()> (Worker*)>::_M_invoke<0ul>(std::_Index_tuple<0ul>) (functional:1531)\n==6576==    by 0x408E3F: std::_Bind_simple<std::_Mem_fn<void (Worker::*)()> (Worker*)>::operator()() (functional:1520)\n==6576==    by 0x408D47: std::thread::_Impl<std::_Bind_simple<std::_Mem_fn<void (Worker::*)()> (Worker*)> >::_M_run() (thread:115)\n==6576==    by 0x4F04C7F: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.21)\n==6576==    by 0x4C3458B: ??? (in /usr/lib/valgrind/vgpreload_drd-amd64-linux.so) \n```", "```cpp\n    #include <valgrind/drd.h>\n    #define _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(addr)\n    ANNOTATE_HAPPENS_BEFORE(addr)\n    #define _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(addr)\n    ANNOTATE_HAPPENS_AFTER(addr)\n```"]