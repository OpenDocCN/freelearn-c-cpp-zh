- en: Multimedia Viewers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多媒体查看器
- en: In the previous chapter, we learned how to upload and download files through
    cloud storage. Now, in this chapter, we are going to learn how to open these files,
    specifically media files such as images, music, and videos, using Qt's multimedia
    module.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何通过云存储上传和下载文件。现在，在本章中，我们将学习如何使用Qt的多媒体模块打开这些文件，特别是媒体文件，如图像、音乐和视频。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Revisiting the multimedia module
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新访问多媒体模块
- en: The image viewer
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图像查看器
- en: The music player
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 音乐播放器
- en: The video player
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视频播放器
- en: Let's get started!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始！
- en: Revisiting the multimedia module
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新访问多媒体模块
- en: In this chapter, we will be using the multimedia module again, which we covered
    previously in [Chapter 9](8a75976e-c1e9-4846-8fad-62cffff8b917.xhtml), *The Camera
    Module*. However, this time we will be using some other parts of the module, so
    I thought it would be a good idea to dissect the module and see what's inside
    it.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将再次使用多媒体模块，这在[第9章](8a75976e-c1e9-4846-8fad-62cffff8b917.xhtml)中已经介绍过，*相机模块*。但是，这一次我们将使用模块的其他部分，所以我认为剖析模块并看看里面有什么是个好主意。
- en: Dissecting the module
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 剖析模块
- en: 'The multimedia module is a really large module that consists of many different
    parts, that provide very different features and functionality. The main categories
    are as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 多媒体模块是一个非常庞大的模块，包含许多不同的部分，提供非常不同的功能和功能。主要类别如下：
- en: Audio
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 音频
- en: Video
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视频
- en: Camera
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相机
- en: Radio
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收音机
- en: Do note that classes that handle image formats, such as `QImage`, `QPixmap`,
    and so on, are not a part of the multimedia module but rather the GUI module.
    This is because they are an important part of the GUI that cannot be separated.
    Despite this, we will still cover the `QImage` class within this chapter.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，处理图像格式的类，如`QImage`、`QPixmap`等，不是多媒体模块的一部分，而是GUI模块的一部分。这是因为它们是GUI的重要组成部分，不能分开。尽管如此，我们仍将在本章中介绍`QImage`类。
- en: 'Under each category are subcategories that look something like the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个类别下都有一些子类别，看起来像下面这样：
- en: 'Audio:'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 音频：
- en: Audio output
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 音频输出
- en: Audio recorder
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 音频录制器
- en: 'Video:'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视频：
- en: Video recorder
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视频录制器
- en: Video player
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视频播放器
- en: Video playlist
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视频播放列表
- en: 'Camera:'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相机：
- en: Camera viewfinder
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相机取景器
- en: Camera image capture
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相机图像捕获
- en: Camera video recorder
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相机视频录制器
- en: 'Radio:'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收音机：
- en: Radio tuner (for devices that support analog radio)
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收音机调谐器（适用于支持模拟收音机的设备）
- en: Each of the classes is designed to fulfill a different purpose. For example,
    the `QSoundEffect` is used for playing low latency audio files (such as WAV files).
    `QAudioOutput`, on the other hand, outputs raw audio data to a specific audio
    device, which gives you low-level control over your audio output. Finally, the
    `QMediaPlayer` is a high-level audio (and video) player that supports many different
    high-latency audio formats. You must understand the differences between all the
    classes before choosing the right one for your project.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 每个类都设计用于实现不同的目的。例如，`QSoundEffect`用于播放低延迟音频文件（如WAV文件）。另一方面，`QAudioOutput`将原始音频数据输出到特定的音频设备，这使您可以对音频输出进行低级控制。最后，`QMediaPlayer`是一个高级音频（和视频）播放器，支持许多不同的高延迟音频格式。在选择项目的正确类之前，您必须了解所有类之间的区别。
- en: The multimedia module in Qt is such a huge beast that often confuses newcomers,
    but can be advantageous if you know which to choose from. Another issue with the
    multimedia module is that it may or may not work on your target platform. This
    is because underneath all these classes are native implementations for specific
    platforms. If a particular platform does not support a feature, or there is not
    yet an implementation for it, then you won't be able to use those functionalities.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Qt中的多媒体模块是一个庞大的怪兽，经常会让新手感到困惑，但如果您知道该选择哪个，它可能会带来好处。多媒体模块的另一个问题是，它可能会或可能不会在您的目标平台上工作。这是因为在所有这些类的底层都有特定平台的本机实现。如果特定平台不支持某个功能，或者尚未对其进行实现，那么您将无法使用这些功能。
- en: 'For more information regarding the different classes provided by Qt''s multimedia
    module, please visit the following link:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Qt多媒体模块提供的不同类的更多信息，请访问以下链接：
- en: '[https://doc.qt.io/qt-5.10/qtmultimedia-index.html](https://doc.qt.io/qt-5.10/qtmultimedia-index.html)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://doc.qt.io/qt-5.10/qtmultimedia-index.html](https://doc.qt.io/qt-5.10/qtmultimedia-index.html)'
- en: The image viewer
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图像查看器
- en: Digital images have become an important aspect of our daily life. Whether it's
    a selfie, prom night photo, or a funny meme, we spend a lot of our time looking
    at digital images. In the following section, we will learn how to create our own
    image viewer using Qt and C++.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 数字图像已经成为我们日常生活中的重要组成部分。无论是自拍、毕业晚会照片还是有趣的表情包，我们花费大量时间查看数字图像。在接下来的部分中，我们将学习如何使用Qt和C++创建我们自己的图像查看器。
- en: Designing a user interface for the image viewer
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为图像查看器设计用户界面
- en: 'Let''s get started with creating our first multimedia program. In this section,
    we will create an image viewer, which, as its name implies, opens up an image
    file and displays it on the window:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始创建我们的第一个多媒体程序。在本节中，我们将创建一个图像查看器，正如其名称所示，它会打开一个图像文件并在窗口上显示它：
- en: Let's open up Qt Creator and create a new Qt Widgets Application project.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们打开Qt Creator并创建一个新的Qt Widgets应用程序项目。
- en: 'After that, open up `mainwindow.ui` and add a `Label` (name it as `imageDisplay`)
    to the central widget, which will serve as the canvas for rendering our image.
    Then, add a layout to the centralWidget by selecting it and pressing Layout Vertically,
    located on top of the canvas:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，打开`mainwindow.ui`并向中央窗口添加一个`Label`（命名为`imageDisplay`），它将用作渲染图像的画布。然后，通过选择中央窗口并按下位于画布顶部的垂直布局按钮，向centralWidget添加一个布局：
- en: '![](img/5e2e8370-e62f-4fe3-a04e-3b95358c4be8.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5e2e8370-e62f-4fe3-a04e-3b95358c4be8.png)'
- en: You can remove the tool bar and status bar to give space to the `Label`. Also,
    set the layout margins of the central widget to `0`:![](img/f69e4fd6-cecc-4275-b956-e6399396412e.png)
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以删除工具栏和状态栏以给`Label`腾出空间。此外，将中央窗口的布局边距设置为`0`：
- en: 'After that, double-click on the menu bar and add a File action, followed by
    Open File underneath it:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，双击菜单栏，添加一个文件操作，然后在其下方添加打开文件：
- en: '![](img/8cb08727-5a95-4356-8c66-787f8a8a9aeb.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8cb08727-5a95-4356-8c66-787f8a8a9aeb.png)'
- en: 'Then, under the Action Editor, right-click on the Open File action and select
    Go to slot...:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在操作编辑器下，右键单击打开文件操作，选择转到槽...：
- en: '![](img/b5e3338b-a8c9-4402-af8c-a5f030de6057.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b5e3338b-a8c9-4402-af8c-a5f030de6057.png)'
- en: 'A window will pop out and ask you to pick a signal, so choose triggered() and
    click OK:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将弹出一个窗口，询问您选择一个信号，因此选择`triggered()`，然后点击确定：
- en: '![](img/c9f8f7e1-2970-42cf-adf4-726ef91fae7b.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c9f8f7e1-2970-42cf-adf4-726ef91fae7b.png)'
- en: A `slot` function will be created for you automatically, but we will keep that
    for the next section. We are done with the user interface, and it is really that
    simple. Next, let's move on and start writing our code!
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`slot`函数将自动为您创建，但我们将在下一部分保留它。我们已经完成了用户界面，而且真的很简单。接下来，让我们继续并开始编写我们的代码！
- en: Writing C++ code for image viewers
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为图像查看器编写C++代码
- en: 'Let''s get started by using the following steps:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下步骤开始：
- en: 'First, open up `mainwindow.h` and add the following headers:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，打开`mainwindow.h`并添加以下头文件：
- en: '[PRE0]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, add the following variable, called `imageBuffer`, which will serve as
    the pointer that points to the actual image data before rescaling. Then, add the
    functions as well:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，添加以下变量，称为`imageBuffer`，它将作为指向重新缩放之前的实际图像数据的指针。然后，也添加函数：
- en: '[PRE1]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, open up `mainwindow.cpp` and initialize the `imageBuffer` variable in
    the class constructor:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开`mainwindow.cpp`并在类构造函数中初始化`imageBuffer`变量：
- en: '[PRE2]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'After that, add the following code to the `slot` function Qt created for us
    in the previous section:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，在上一部分中Qt为我们创建的`slot`函数中添加以下代码：
- en: '[PRE3]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The preceding code basically opens up the file-selection dialog, and it creates
    a `QPixmap` object with the selected image file. After all that is done, it will
    call the `resizeImage()` function, which looks like the following code:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上述代码基本上打开了文件选择对话框，并创建了一个`QPixmap`对象，其中包含所选的图像文件。完成所有这些后，它将调用`resizeImage()`函数，代码如下所示：
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: What the `resizeImage()` function does is simply copy the image data from the
    `imageBuffer` variable and resize the image to fit the window size before displaying
    it on the window's canvas. You could be opening an image that is way larger than
    your screen resolution, and we don't want the image to get cropped when opening
    such a large image file.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`resizeImage()`函数的作用是简单地从`imageBuffer`变量中复制图像数据，并将图像调整大小以适应窗口大小，然后显示在窗口的画布上。您可能打开的图像比屏幕分辨率大得多，我们不希望在打开这样一个大图像文件时裁剪图像。'
- en: The reason why we use the `imageBuffer` variable is so that we can keep a copy
    of the original data and not affect the image quality by resizing it many times.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`imageBuffer`变量的原因是，这样我们可以保留原始数据的副本，并且不会通过多次调整大小来影响图像质量。
- en: 'Lastly, we also call this `resizeImage()` function within the `paintEvent()`
    function. Whenever the main window is being resized or restored from a minimized
    state, `paintEvent()` will automatically get called, and so will the `resizeImage()`
    function, shown as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们还在`paintEvent()`函数中调用`resizeImage()`函数。每当主窗口被调整大小或从最小化状态恢复时，`paintEvent()`将自动被调用，`resizeImage()`函数也将被调用，如下所示：
- en: '[PRE5]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'That''s it. If you build and run the project now, you should get a pretty neat
    image viewer that looks like the following:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。如果现在构建并运行项目，您应该会得到一个看起来像下面这样的漂亮的图像查看器：
- en: '![](img/fca8f4b0-48cb-4037-ba35-3518c6beac66.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fca8f4b0-48cb-4037-ba35-3518c6beac66.png)'
- en: The music player
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 音乐播放器
- en: In the following section, we will learn how to build our own custom music player
    using Qt and C++.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将学习如何使用Qt和C++构建自定义音乐播放器。
- en: Designing a user interface for music players
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为音乐播放器设计用户界面
- en: 'Let''s move on to the next project. In this project, we will be building an
    audio player using Qt. Perform the following steps:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续下一个项目。在这个项目中，我们将使用Qt构建一个音频播放器。执行以下步骤：
- en: As with the previous project, we will be creating a `Qt Widgets Application`
    project.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与上一个项目一样，我们将创建一个`Qt Widgets应用程序`项目。
- en: 'Open up the `project file (.pro)`, and add in the `multimedia` module:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`项目文件(.pro)`，并添加`multimedia`模块：
- en: '[PRE6]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We added the `multimedia` text so that Qt includes classes related to the multimedia
    module in our project. Next, open up `mainwindow.ui`, and refer to the following
    screenshot to construct the user interface:![](img/e87dedd9-939f-4e7d-a19f-3bb2bad50497.png)
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们添加了`multimedia`文本，以便Qt在我们的项目中包含与多媒体模块相关的类。接下来，打开`mainwindow.ui`，并参考以下截图构建用户界面：![](img/e87dedd9-939f-4e7d-a19f-3bb2bad50497.png)
- en: We basically added a Labelat the top, followed by a Horizontal Slider and another
    Labelto show the current time of the audio. After that, we added three Push Buttons
    at the bottom for the Play button, Pause button, and Stop button. Located at the
    right-hand side of these buttons is another Horizontal Layout that controls the
    audio volume.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们基本上在顶部添加了一个标签，然后添加了一个水平滑块和另一个标签来显示音频的当前时间。之后，我们在底部添加了三个按钮，分别是播放按钮、暂停按钮和停止按钮。这些按钮的右侧是另一个水平布局，用于控制音频音量。
- en: As you can see, all the Push Buttons have no icon for now, and it's very confusing
    which button is for what purpose.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，所有按钮目前都没有图标，很难分辨每个按钮的用途。
- en: To add icons to the buttons, let's go to File | New File or Project and select
    Qt Resource File under the Qt category. Then, create a prefix called `icons`,
    and add the icon images to the prefix:![](img/d2370cbd-83c0-45ae-99b9-47fd81a252d7.png)
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要为按钮添加图标，让我们转到文件 | 新建文件或项目，并在Qt类别下选择Qt资源文件。然后，创建一个名为`icons`的前缀，并将图标图像添加到前缀中：![](img/d2370cbd-83c0-45ae-99b9-47fd81a252d7.png)
- en: After that, add those icons to the Push Button by setting its icon property
    and selecting Choose Resource.... Then, set the `pixmap` property of the label,
    located beside the volume slider, as the volume icon:![](img/ab91665f-5ce4-4f6b-b1f4-9b2772ab7fa2.png)
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，通过设置其图标属性并选择选择资源...，将这些图标添加到推按钮。然后，将位于音量滑块旁边的标签的`pixmap`属性设置为音量图标：![](img/ab91665f-5ce4-4f6b-b1f4-9b2772ab7fa2.png)
- en: After you have added the icons to the Push Button and Label, the user interface
    should look a lot better:![](img/cd321651-a9b0-45bb-8e91-72c15d5d11b3.png)
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您将图标添加到推按钮和标签之后，用户界面应该看起来更好了！![](img/cd321651-a9b0-45bb-8e91-72c15d5d11b3.png)
- en: We're done with the user interface; let's move on to the programming part!
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了用户界面，让我们继续进行编程部分！
- en: Writing C++ code for music players
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为音乐播放器编写C++代码
- en: 'To write the C++ code for music players, perform the following steps:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 要为音乐播放器编写C++代码，请执行以下步骤：
- en: 'First and foremost, open up `mainwindow.h` and add the following headers:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，打开`mainwindow.h`并添加以下标头：
- en: '[PRE7]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'After that, add the `player` variable, which is a `QMediaPlayer` pointer. Then,
    declare the functions that we''re going to define later:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，添加`player`变量，它是一个`QMediaPlayer`指针。然后，声明我们将稍后定义的函数：
- en: '[PRE8]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, open up `mainwindow.cpp` and initialize the player variable:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开`mainwindow.cpp`并初始化播放器变量：
- en: '[PRE9]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `QMediaPlayer` class is the main class that is used by our application to
    play any audio file loaded by it. Thus, we need to know the state of the audio
    playing and its current position. We can get this information by connecting its
    `stateChanged()` and `positionChanged()` signals to our custom `slot` functions.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`QMediaPlayer`类是我们的应用程序用来播放由其加载的任何音频文件的主要类。因此，我们需要知道音频播放的状态及其当前位置。我们可以通过将其`stateChanged()`和`positionChanged()`信号连接到我们的自定义`slot`函数来获取这些信息。'
- en: 'The `stateChanged()` signal allows us to obtain information about the current
    state of the audio playing. Then, we enable and disable the Push Button accordingly:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`stateChanged()`信号允许我们获取有关音频播放的当前状态的信息。然后，我们相应地启用和禁用推按钮：'
- en: '[PRE10]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'As for the `positionChanged()` and `slot` functions, we use them to set the
    timeline slider, as well as the timer display:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 至于`positionChanged()`和`slot`函数，我们使用它们来设置时间轴滑块以及计时器显示：
- en: '[PRE11]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Once you''re done, open up `mainwindow.ui` and right-click on each of the Push
    Buttons, and select Go to slot... followed by selecting the `clicked()` signal.
    This will generate a `slot` function for each of the Push Buttons. The code for
    these `slot` functions is very simple:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，打开`mainwindow.ui`，右键单击每个推按钮，然后选择转到槽...然后选择`clicked()`信号。这将为每个推按钮生成一个`slot`函数。这些`slot`函数的代码非常简单：
- en: '[PRE12]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: After that, right-click on both of the Horizontal Sliders, and select Go to
    slot... followed by choosing the `sliderMoved()` signal, and click OK:![](img/e66e337a-4d88-42fb-a93e-7499babbe61d.png)
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，在两个水平滑块上右键单击，并选择转到槽...然后选择`sliderMoved()`信号，然后单击确定：![](img/e66e337a-4d88-42fb-a93e-7499babbe61d.png)
- en: 'The `sliderMoved()` signal will be called whenever the user drags the slider
    to change its position. We need to send this position to the media player and
    tell it to adjust the audio volume or change the current audio position. Do be
    cautious not to set the default position of your volume slider to zero. Consider
    the following code:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每当用户拖动滑块更改其位置时，都会调用`sliderMoved()`信号。我们需要将此位置发送到媒体播放器，并告诉它调整音频音量或更改当前音频位置。请注意不要将音量滑块的默认位置设置为零。考虑以下代码：
- en: '[PRE13]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Then, we need to add File and Open File actions to the menu bar, just like we
    did in the previous example project.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要向菜单栏添加文件和打开文件操作，就像我们在上一个示例项目中所做的那样。
- en: 'Then, right-click on the Open File action in the Action Editor and select Go
    to slot... After that, select `triggered()`, and let Qt generate a `slot` function
    for you. Add the following code to the `slot` function for audio file selection:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在操作编辑器中右键单击打开文件操作，选择转到槽...之后，选择`triggered()`，让Qt为您生成一个`slot`函数。将以下代码添加到用于选择音频文件的`slot`函数中：
- en: '[PRE14]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The preceding simply opens up a file-selection dialog that only accepts MP3
    and WAV files. You can add other formats too if you wish, but the supported formats
    vary between platforms; therefore, you should test it to make sure the format
    you want to use is supported.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 上述简单地打开一个文件选择对话框，只接受MP3和WAV文件。如果您愿意，也可以添加其他格式，但支持的格式因平台而异；因此，您应该测试以确保您想要使用的格式受支持。
- en: After that, it will send the selected audio file to the media player for preloading.
    Then, we try to get the music's title from the metadata and display it on the
    `Labelwidget`. However, this feature (obtaining metadata) may or may not be supported
    on your platform, so just in case it won't show up, we replace it with the audio
    file name. Lastly, we enable the play button and automatically start playing the
    music.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，它将选定的音频文件发送到媒体播放器进行预加载。然后，我们尝试从元数据中获取音乐的标题，并在`Labelwidget`上显示它。但是，此功能（获取元数据）可能会或可能不会受到您的平台支持，因此，以防它不会显示，我们将其替换为音频文件名。最后，我们启用播放按钮并自动开始播放音乐。
- en: That's it. If you build and run the project now, you should be able to get a
    simple but fully functional music player!
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。如果您现在构建并运行项目，您应该能够获得一个简单但完全功能的音乐播放器！
- en: '![](img/7da6ec50-1bc9-4ef7-8120-2c9b755c11fd.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7da6ec50-1bc9-4ef7-8120-2c9b755c11fd.png)'
- en: The video player
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 视频播放器
- en: In the previous section, we have learned how to create an audio player. In this
    chapter, we will further improvise our program and create a video player using
    Qt and C++.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们已经学习了如何创建音频播放器。在本章中，我们将进一步改进我们的程序，并使用Qt和C++创建视频播放器。
- en: Designing a user interface for video players
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为视频播放器设计用户界面
- en: The next example is that of the video player. Since `QMediaPlayer` also supports
    video output, we can use the same user interface and C++ code from the previous
    audio player example, and just make some minor changes to it.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个示例是视频播放器。由于`QMediaPlayer`还支持视频输出，我们可以使用上一个音频播放器示例中的相同用户界面和C++代码，只需对其进行一些小的更改。
- en: 'First, open `project file (.pro)` and add in another keyword, called `multimediawidgets`:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，打开`项目文件（.pro）`并添加另一个关键字，称为`multimediawidgets`：
- en: '[PRE15]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then, open up `mainwindow.ui` and add a Horizontal Layout (name it as `movieLayout`)
    above the timeline slider. After that, right-click on the layout and select Morph
    into | QFrame. We then set its sizePolicy property to Expanding, Expanding:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，打开`mainwindow.ui`，在时间轴滑块上方添加一个水平布局（将其命名为`movieLayout`）。之后，右键单击布局，选择转换为 |
    QFrame。然后将其sizePolicy属性设置为Expanding, Expanding：
- en: '![](img/c0c92ef1-df28-4145-86a6-361aae7a70db.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c0c92ef1-df28-4145-86a6-361aae7a70db.png)'
- en: 'After that, we set the QFrame''s background to black color by setting its `styleSheet`
    property, like so:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们通过设置其`styleSheet`属性将QFrame的背景设置为黑色：
- en: '[PRE16]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The user interface should look something like the following, and we''re done:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户界面应该看起来像下面这样，然后我们就完成了：
- en: '![](img/eebc0672-a33c-47c9-98f3-237b4dc4e74c.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eebc0672-a33c-47c9-98f3-237b4dc4e74c.png)'
- en: Writing C++ code for video players
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为视频播放器编写C++代码
- en: 'To write the C++ code for video players, we perform the following steps:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 要为视频播放器编写C++代码，我们执行以下步骤：
- en: 'For `mainwindow.h`, there aren''t many changes to it. All we need to do is
    to include `QVideoWidget` in the header:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`mainwindow.h`，对它的更改并不多。我们只需要在头文件中包含`QVideoWidget`：
- en: '[PRE17]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then, open `mainwindow.cpp`. We must define a `QVideoWidget` object and set
    it as the video output target, before adding it to the layout of the `QFrame`
    object we just added in the previous step:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，打开`mainwindow.cpp`。在将其添加到我们在上一步中添加的`QFrame`对象的布局之前，我们必须定义一个`QVideoWidget`对象并将其设置为视频输出目标：
- en: '[PRE18]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In the `slot` function thatgets called when the Open File action has been triggered,
    we simply change the file-selection dialog to accept only `MP4` and `MOV` formats.
    You can add in other video formats too if you wish:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“slot”函数中，当“打开文件”操作被触发时，我们只需将文件选择对话框更改为仅接受`MP4`和`MOV`格式。如果您愿意，也可以添加其他视频格式：
- en: '[PRE19]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: That's it. The rest of the code is literally the same as the audio player example.
    The main difference with this example is that we defined the video output widget,
    and Qt will handle the rest for us.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。代码的其余部分与音频播放器示例几乎相同。这个示例的主要区别在于我们定义了视频输出小部件，Qt会为我们处理其余部分。
- en: 'If we build and run the project now, we should be getting a really slick video
    player, like what you see here:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在构建和运行项目，应该会得到一个非常流畅的视频播放器，就像您在这里看到的那样：
- en: '![](img/45c1d750-a1a7-4261-8ce5-c7821acb069e.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/45c1d750-a1a7-4261-8ce5-c7821acb069e.png)'
- en: On a windows system, there was a case where the video player would throw an
    error. This problem is similar to the one reported here: [https://stackoverflow.com/questions/32436138/video-play-returns-directshowplayerservicedoseturlsource-unresolved-error-cod](https://stackoverflow.com/questions/32436138/video-play-returns-directshowplayerservicedoseturlsource-unresolved-error-cod)
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows系统上，有一个情况是视频播放器会抛出错误。这个问题类似于这里报告的问题：[https://stackoverflow.com/questions/32436138/video-play-returns-directshowplayerservicedoseturlsource-unresolved-error-cod](https://stackoverflow.com/questions/32436138/video-play-returns-directshowplayerservicedoseturlsource-unresolved-error-cod)
- en: To resolve this error, simply download and install the K-Lite_Codec_Pack which
    you can find here: [https://www.codecguide.com/download_k-lite_codec_pack_basic.htm](https://www.codecguide.com/download_k-lite_codec_pack_basic.htm).
    After this, the video should play like a charm!
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 要解决此错误，只需下载并安装 K-Lite_Codec_Pack，您可以在此处找到：[https://www.codecguide.com/download_k-lite_codec_pack_basic.htm](https://www.codecguide.com/download_k-lite_codec_pack_basic.htm)。之后，视频应该可以正常播放！
- en: Summary
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have learned how to create our own multimedia players using
    Qt. What comes next is something quite different from our usual topics. In the
    following chapter, we will learn how to use QtQuick and QML to create touchscreen-friendly,
    mobile-friendly, and graphics-oriented applications.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经学会了如何使用Qt创建自己的多媒体播放器。接下来的内容与我们通常的主题有些不同。在接下来的章节中，我们将学习如何使用QtQuick和QML创建触摸友好、移动友好和图形导向的应用程序。
