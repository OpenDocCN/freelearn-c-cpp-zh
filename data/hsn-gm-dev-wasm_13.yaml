- en: Game Physics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏物理学
- en: We already have some physics in our game. Each of our ships has a velocity and
    an acceleration. They also obey at least some of Newton's laws and conserve momentum.
    All of this was added earlier without much fanfare. Physics in computer games
    dates back to the original computer game, *Space War!*, which is the game that
    inspired the one we are currently writing. In the original version of *Space War!,*
    the spaceships conserved momentum, as we currently do in our game. A black hole
    gravitationally attracted the ships to the center of the play area. Before creating
    the classic game *Pong*, Nolan Bushnell created an arcade clone of *Space War!*,
    called *Computer Space*. *Computer Space* was not a hit like *Pong*, and Nolan
    Bushnell blamed Newton's laws and the public's lack of understanding of basic
    physics as some of the reasons for the game's commercial failure.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的游戏中已经有一些物理学。我们的每艘飞船都有速度和加速度。它们也至少遵守了牛顿的一些定律并保持动量。所有这些早些时候都添加了，没有引起太多轰动。计算机游戏中的物理学可以追溯到最初的计算机游戏《太空战！》，这个游戏启发了我们目前正在编写的游戏。在《太空战！》的原始版本中，太空飞船保持了动量，就像我们现在在游戏中做的那样。黑洞通过引力吸引太空飞船到游戏区域的中心。在创造经典游戏《乒乓球》之前，诺兰·布什内尔创造了《太空战！》的街机克隆版，名为《计算机太空》。《计算机太空》不像《乒乓球》那样受欢迎，诺兰·布什内尔将游戏的商业失败归咎于牛顿定律和公众对基本物理学的理解不足等原因之一。
- en: 'According to The Ultimate History of Video Games: from Pong to Pokemon and
    Beyond, by Steven Kent, "Computer Space obeys the first law—maintenance of momentum.
    (Bushnell is probably referring to Sir Isaac Newton''s first law—objects maintain
    constant velocity unless acted upon by an external force.) And so that was really
    hard for people who didn''t understand that."'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 根据史蒂文·肯特的《视频游戏的终极历史：从乒乓球到宝可梦及其后》，“计算机太空遵守第一定律——动量守恒。（布什内尔可能指的是艾萨克·牛顿的第一定律——物体保持恒定速度，除非受到外力作用。）这对于不理解这一点的人来说确实很困难。”
- en: – Nolan Bushnell
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '- 诺兰·布什内尔'
- en: Physics is common in games, but far from universal. The kind of physics required
    by a game is highly dependent on the kind of game it is. There is a 3D physics
    library called *Bullet Physics* that has been ported, but, because it is 3D, Bullet
    is a rather large library for the kinds of physics we will be using in this game.
    Instead, we will integrate some simple Newtonian physics into our game for some
    extra flavor. We already have a simple implementation of Newton's first law in
    our game. When we accelerate our spaceship, it moves in the same direction until
    we either decelerate it by using the down arrow, or we *flip and burn* by turning
    our ship around and accelerating in the opposite direction of our current velocity.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 物理学在游戏中很常见，但远非普遍。游戏所需的物理学类型高度依赖于游戏的类型。有一个名为“Bullet Physics”的3D物理库，但由于它是3D的，Bullet对于我们在这个游戏中将使用的物理学来说是一个相当庞大的库。因此，我们将在游戏中集成一些简单的牛顿物理学，以增加一些额外的风味。我们的游戏中已经有牛顿第一定律的简单实现。当我们加速我们的太空飞船时，它会朝着同样的方向移动，直到我们通过使用向下箭头减速它，或者通过将飞船转向并加速到当前速度的相反方向来“翻转和燃烧”。
- en: You will need to include several images and audio files in your build to make
    this project work. Make sure that you include the `/Chapter13/sprites/` folder
    as well as the `/Chapter13/audio/` folder from the project's GitHub. If you haven't
    yet downloaded the GitHub project, you can get it online at [https://github.com/PacktPublishing/Hands-On-Game-Development-with-WebAssembly](https://github.com/PacktPublishing/Hands-On-Game-Development-with-WebAssembly).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在构建中包含几个图像和音频文件，以使此项目正常工作。确保您从项目的GitHub中包括“/Chapter13/sprites/”文件夹以及“/Chapter13/audio/”文件夹。如果您还没有下载GitHub项目，可以在[https://github.com/PacktPublishing/Hands-On-Game-Development-with-WebAssembly](https://github.com/PacktPublishing/Hands-On-Game-Development-with-WebAssembly)上获取它。
- en: 'In this chapter, we will be applying the following aspects of physics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将应用物理学的以下方面：
- en: Elastic collisions between asteroids, projectiles, and spaceships.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小行星、抛射物和太空飞船之间的弹性碰撞。
- en: When our spaceships shoot, there should be a recoil (Newton's third law).
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们的太空飞船射击时，应该有一个反冲（牛顿第三定律）。
- en: Gravity from the star should attract the player's spaceship.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 恒星的引力应该吸引玩家的太空飞船。
- en: Newton's third law
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 牛顿第三定律
- en: Newton's third law is commonly stated as, *For every action, there is an equal
    and opposite reaction*. What this means is that, when object *A* exerts a force
    on object *B*, object *B* exerts that same force right back on object *A*. An
    example of this is firing a bullet from a gun. When a human holding a gun fires
    a bullet, the gun recoils with the same force of the bullet leaving the gun. That
    may sound counter-intuitive, because the bullet can kill a human, but the gun's
    recoil does not kill the human firing the gun. That is because the gun is significantly
    larger than the bullet, and Newton's first law states that *F = ma*, or force
    equals mass times acceleration. In other words, if the gun is 50 times larger
    than the bullet, then the same force will only make it accelerate to 1/50 the
    speed. We will be modifying our spaceship so that, whenever it shoots a projectile,
    it accelerates in the opposite direction of the shot based on the relative masses
    of the spaceship and the projectile. This will give our ship's cannon a recoil.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 牛顿第三定律通常陈述为，“对于每一个动作，都有一个相等和相反的反作用力”。这意味着当物体A对物体B施加力时，物体B会以同样的力反作用于物体A。一个例子是从枪中发射子弹。当持枪的人发射子弹时，枪会以子弹离开枪的同样力量产生反冲。这可能听起来违反直觉，因为子弹可以杀死人，但是枪的反冲并不会杀死开枪的人。这是因为枪比子弹大得多，而牛顿第一定律规定了“F
    = ma”，即力等于质量乘以加速度。换句话说，如果枪比子弹大50倍，那么同样的力只会使其加速到1/50的速度。我们将修改我们的太空飞船，使其在射出抛射物时，根据太空飞船和抛射物的相对质量，以相反方向加速。这将给我们的飞船炮筒一个反冲。
- en: Adding gravity
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加重力
- en: After we add the recoil to our spaceship's cannon, I would also like to add
    a gravitational effect on the spaceships in our game that will draw the ships
    toward the star when they are within a certain distance of that star. The gravitational
    force decreases with the square of the distance between the two objects. That
    is convenient because it means that we can calculate the gravitational effect
    with the `MagSQ` function, which runs quite a bit faster than the `Magnitude`
    function. I have chosen not to add a gravitational effect on the projectiles and
    asteroids out of personal preference. It will not be hard to add that effect if
    you choose to do so.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们为飞船的火炮添加后坐力之后，我还想在我们的游戏中为飞船添加一个引力效应，当它们在星球附近一定距离内时，会将飞船吸引向星球。引力随着两个物体之间距离的平方减小。这很方便，因为这意味着我们可以用“MagSQ”函数计算引力效应，这比“Magnitude”函数运行得快得多。出于个人偏好，我选择不在抛射物和小行星上添加引力效应。如果你选择这样做，添加这种效应并不难。
- en: Improving collisions
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改进碰撞
- en: We are going to improve the collisions between our spaceship and the asteroids
    and projectiles in the game. To simplify things, we will use elastic collisions.
    An elastic collision is a collision that preserves all of the kinetic energy.
    In reality, collisions always lose some energy to heat or friction, even ones
    that are close to elastic collisions, such as billiard balls. However, making
    our collisions perfectly elastic simplifies the math. In games, simpler math usually
    means faster algorithms.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将改进游戏中飞船与小行星和抛射物之间的碰撞。为了简化事情，我们将使用弹性碰撞。弹性碰撞是指保持所有动能的碰撞。实际上，碰撞总是会损失一些能量，转化为热量或摩擦，即使是接近弹性碰撞的碰撞，比如台球。然而，使我们的碰撞完全弹性化简化了数学。在游戏中，简单的数学通常意味着更快的算法。
- en: For more information on elastic collisions, Wikipedia has an excellent article
    ([http](https://en.wikipedia.org/wiki/Elastic_collision)[s://en.wikipedia.org/wiki/Elastic_collision](https://en.wikipedia.org/wiki/Elastic_collision))
    that discusses the math we will use to implement our elastic collision function.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 有关弹性碰撞的更多信息，维基百科有一篇很好的文章([http](https://en.wikipedia.org/wiki/Elastic_collision)[s://en.wikipedia.org/wiki/Elastic_collision](https://en.wikipedia.org/wiki/Elastic_collision))，讨论了我们将用来实现弹性碰撞函数的数学。
- en: Modifying the code
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改代码
- en: In this section, we are going to make some changes to our game objects. We will
    need to add mass and elastic collisions to our `collider` class. Our star should
    be able to generate gravity and attract the player and enemy spaceship with a
    force that decreases based on the square of the distance. We will need to modify
    our collisions function to add elastic collisions between our spaceships, asteroids,
    and the projectiles.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将对我们的游戏对象进行一些更改。我们需要在我们的“碰撞器”类中添加质量和弹性碰撞。我们的星星应该能够产生引力，并以与距离的平方成反比的力吸引玩家和敌人的飞船。我们需要修改我们的碰撞函数，以在我们的飞船、小行星和抛射物之间添加弹性碰撞。
- en: Changing the game.hpp file
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改game.hpp文件
- en: 'To get physics into our game, we will need to modify several class definitions
    and add new `#define` macros. Let''s start by updating our `game.hpp` file. The
    first thing we need to add is `#define` in order to set up a constant value for
    our star''s mass. I want to have a large constant value for the star mass that
    we will check against in our `ElasticCollision` function. If the mass of either
    object in our elastic collision is the same value as `STAR_MASS`, we do not want
    to accelerate that object. In reality, if you were to throw a rock into the sun,
    you would accelerate the sun a tiny, tiny amount in the direction you threw the
    rock. This amount would be so small relative to the sun that it would be undetectable.
    We will have a fixed value for the star''s mass where any objects with a mass
    that size will not accelerate when hit by any objects in our game. To do this,
    we will need to add the following `#define`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将物理学引入我们的游戏，我们需要修改几个类定义并添加新的“#define”宏。让我们从更新我们的“game.hpp”文件开始。我们需要添加的第一件事是“#define”，以设置星球质量的常量值。我希望在我们的“ElasticCollision”函数中检查星球质量的大常量值。如果我们弹性碰撞中的任一对象的质量与“STAR_MASS”相同，我们不希望加速该对象。实际上，如果你把一块岩石扔进太阳，你会在你扔岩石的方向上微微加速太阳。相对于太阳来说，这个量是如此之小，以至于不可检测。我们将为星球的质量设定一个固定值，任何质量与该值相同的物体在游戏中被击中时都不会加速。为此，我们需要添加以下“#define”：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After adding the `#define`, we will need to modify our `Collider` class, giving
    it a new `ElasticCollision` function. This function will take in a second `Collider`
    object and use the velocity and masses of those two objects to determine what
    their new velocities will be. We will also need to add a mass attribute that we
    will name `m_Mass`. Finally, we need to move two attributes into our `Collider`
    class that was previously in the child classes of `Collider`. These variables
    are the 2D `m_Direction` and `m_Velocity` vectors because our elastic collision
    function will need this data to calculate the new velocities. This is what the
    new version of the `Collider` class looks like:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加了“#define”之后，我们需要修改我们的“Collider”类，给它一个新的“ElasticCollision”函数。这个函数将接收第二个“Collider”对象，并使用这两个对象的速度和质量来确定它们的新速度。我们还需要添加一个名为“m_Mass”的质量属性。最后，我们需要将两个属性移到我们的“Collider”类中，这些属性以前在“Collider”的子类中。这些变量是2D“m_Direction”和“m_Velocity”向量，因为我们的弹性碰撞函数将需要这些数据来计算新的速度。这是新版本的“Collider”类的样子：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The four lines we added are near the center of this new version of the class:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加的四行代码位于这个新版本的类的中心附近：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'After adding `m_Direction` and `m_Velocity` to our `Collider` class, we need
    to remove `m_Velocity` from three of the child classes where we had that code
    in previous versions of our game. We need to remove those attributes from the
    `Asteroid`, `Ship`, and `Projectile` classes. Here are the two lines we need to
    remove:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在将“m_Direction”和“m_Velocity”添加到我们的“Collider”类之后，我们需要从三个子类中删除“m_Velocity”，这些子类在我们游戏的先前版本中有这些代码。我们需要从“Asteroid”、“Ship”和“Projectile”类中删除这些属性。以下是我们需要删除的两行：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the following code snippet, we have the `Asteroid` class after you have
    removed those two lines:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码片段中，我们有删除了那两行后的`Asteroid`类：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This is what the `Ship` class will look like after you have removed those two
    lines:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在删除了那两行后，`Ship`类将会是什么样子：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finally, here is what the `Projectile` class will look like after you have
    removed those two lines:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在删除了那两行后，`Projectile`类将会是什么样子：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The last class we must change is our `Star` class. The `Star` class is now
    going to be able to attract the spaceships in our game gravitationally. To do
    this, we will be adding a constant attribute that defines the maximum range of
    our gravitational force. In reality, gravity extends on forever, but for our game,
    we do not want the gravity to affect our spaceships when the star is off-screen
    (or at least very far off-screen). Because of this, we are going to limit the
    distance of the gravitational effect to 500 pixels. We will also add a new function
    to our class called `ShipGravity`. We will be passing a `Ship` object into this
    function, and the function will modify the velocity of the ship based on the squared
    distance to the `Star` object. This is what the new version of the `Star` class
    definition will look like:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须改变的最后一个类是我们的`Star`类。`Star`类现在将能够通过引力吸引我们游戏中的飞船。为了做到这一点，我们将添加一个常量属性，定义引力作用的最大范围。实际上，重力是无限延伸的，但是对于我们的游戏，当星星不在屏幕上（或者至少离得很远）时，我们不希望重力影响我们的飞船。因此，我们将限制引力效应的距离为500像素。我们还将在我们的类中添加一个名为`ShipGravity`的新函数。我们将把一个`Ship`对象传递给这个函数，该函数将根据到`Star`对象的平方距离来修改飞船的速度。这是新版本的`Star`类定义将会是什么样子的：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Changing collider.cpp
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改collider.cpp
- en: 'The next file we will change is the `collider.cpp` file, which holds the functions
    we declared in our `Collider` class definition. The only change will be the addition
    of a single function, `ElasticCollision`. This function modifies the position
    and velocity of our two colliders based on the mass and the starting velocities
    of those objects. This is what the `ElasticCollision` function looks like:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要更改的下一个文件是`collider.cpp`文件，其中包含我们在`Collider`类定义中声明的函数。唯一的变化将是添加一个名为`ElasticCollision`的函数。该函数根据这些对象的质量和起始速度修改我们两个碰撞器的位置和速度。`ElasticCollision`函数看起来是这样的：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The first thing the function does is check to see whether either collider has
    the mass of a star. If either is a star, we do not change their velocities. The
    star''s velocity does not change, because it is too massive to move, and the object
    colliding with the star does not change its mass because it is destroyed in the
    collision:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的第一件事是检查两个碰撞器中是否有一个的质量是星星。如果有一个是星星，我们就不改变它们的速度。星星的速度不会改变，因为它太庞大而无法移动，而与星星碰撞的对象也不会改变其质量，因为它在碰撞中被摧毁：
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'After the mass check, we need to adjust the position of the colliders so that
    they are not overlapping. Overlap can happen because the position of our objects
    changes every frame and is not continuous. Because of this, we need to move the
    position of one of our objects so that it is barely touching the other object.
    A more accurate way to do this would have been to modify the position of both
    objects by half the amount we modify the one object, but in different directions.
    For simplicity, we will only be changing the position of one of the colliders:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在质量检查之后，我们需要调整碰撞器的位置，以使它们不重叠。重叠可能发生是因为我们的对象的位置每一帧都在变化，并不是连续的。因此，我们需要移动其中一个对象的位置，使其与另一个对象轻微接触。更准确的做法是修改两个对象的位置，每个对象修改的量是另一个对象的一半，但是方向不同。为简单起见，我们只会改变一个碰撞器的位置：
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'After that, we will modify the velocities of the two collider objects using
    the masses and the starting velocities of those two objects:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们将使用这两个对象的质量和起始速度来修改这两个碰撞器对象的速度：
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If you want to learn more about the formula we used to calculate the new velocities,
    check out the Wikipedia article regarding elastic collisions at [https://en.wikipedia.org/wiki/Elastic_collision](https://en.wikipedia.org/wiki/Elastic_collision).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解我们用来计算新速度的公式，可以查看维基百科关于弹性碰撞的文章[https://en.wikipedia.org/wiki/Elastic_collision](https://en.wikipedia.org/wiki/Elastic_collision)。
- en: Changes to star.cpp
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对star.cpp的更改
- en: 'In our `star.cpp` file, we will need to modify our `Star` class''s constructor
    function, as well as its `Move` function. We will also need to add a new function
    called `ShipGravity`. The first thing we will do is add the following line somewhere
    in our `Star` class constructor:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`star.cpp`文件中，我们需要修改我们的`Star`类的构造函数，以及它的`Move`函数。我们还需要添加一个名为`ShipGravity`的新函数。我们将首先在我们的`Star`类构造函数的某处添加以下行：
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'After that, we will need to define our `ShipGravity` function. The following
    code defines that function:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们需要定义我们的`ShipGravity`函数。以下代码定义了该函数：
- en: '[PRE13]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The first line creates a `dist_vec` vector, which is a vector representing
    the distance between the star''s position and the ship''s position. The second
    line gets the squared distance between the star and the ship. After that, we have
    an `if` block that looks like this:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行创建了一个`dist_vec`向量，它是表示星星位置和飞船位置之间距离的向量。第二行得到了星星和飞船之间的平方距离。之后，我们有一个`if`块，看起来是这样的：
- en: '[PRE14]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This `if` block is checking the square distance against the maximum distance
    where gravity affects the ship, which we defined in the `c_MaxGravityDistSQ` constant.
    Because gravity decreases with the square of the distance between the star and
    our ship, we compute the scalar force by dividing the maximum gravitation distance
    by 50 times the distance squared to our spaceship. The value of 50 was picked
    rather arbitrarily and was the result of me playing around with the numbers until
    the force of gravity felt right to me. You may choose a different value if you
    would prefer your gravitational force to be different. You may also choose to
    modify the maximum gravitational distance by changing the value of `c_MaxGravityDistSQ`
    that we defined in `game.hpp`. The following lines are used to turn our scalar
    force value into a vector force value that is pointing from our ship to our star:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`if`块正在检查与引力影响飞船的最大距离的平方距离，我们在`c_MaxGravityDistSQ`常量中定义了这个距离。因为引力随着星球和我们飞船之间的距离的平方减小，我们通过将最大引力距离除以50倍距离的平方来计算标量力。50的值是相当任意选择的，是我在数字上摸索直到引力感觉合适的结果。如果您希望引力的力量不同，可以选择不同的值。您还可以通过更改我们在`game.hpp`中定义的`c_MaxGravityDistSQ`的值来修改最大引力距离。以下行用于将我们的标量力值转换为指向我们星球的矢量力值：
- en: '[PRE15]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now that we have converted `dist_vec` into a force vector that points in the
    direction of our star, we can add that force vector to our ship''s velocity to
    create the gravitational effect on our ship:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将`dist_vec`转换为一个指向我们星球的力向量，我们可以将该力向量添加到我们飞船的速度上，以在我们的飞船上创建引力效应：
- en: '[PRE16]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The final change we need to make is to the `Move` function. We will need to
    add two calls to the `ShipGravity` function; one call to create the gravitational
    effect on the player, and a second call to create the gravitational effect on
    the enemy spaceship. Here is the new version of the `Move` function:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的最后一个更改是`Move`函数。我们需要添加两个对`ShipGravity`函数的调用；一个用于在玩家身上创建引力效应，另一个用于在敌方飞船上创建引力效应。以下是`Move`函数的新版本：
- en: '[PRE17]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The last two lines are new. Make sure you add these two lines to the `Move`
    function:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 最后两行是新的。确保将这两行添加到“Move”函数中：
- en: '[PRE18]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Changing the main.cpp file
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改`main.cpp`文件
- en: 'After updating our `star.cpp` file, we need to change the `main.cpp` file to
    incorporate our elastic collisions. We need to make all of these changes to the
    `collisions()` function. Here is the new version of `collisions` in its entirety:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在更新我们的`star.cpp`文件之后，我们需要更改`main.cpp`文件以整合我们的弹性碰撞。我们需要对`collisions()`函数进行所有这些更改。以下是`collisions`的完整新版本：
- en: '[PRE19]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In the first part of this function, we loop over the projectiles and check
    to see whether they hit an asteroid or a ship. If the projectile hits an asteroid
    or a ship when that ship has its shields up, we want to create an elastic collision
    with the projectile. The projectile will still be destroyed, but the ship or asteroid
    will have a modified velocity based on the collision. Here is the code for the
    `projectile` loop:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在此函数的第一部分中，我们循环遍历抛射物并检查它们是否击中了小行星或飞船。如果抛射物在飞船启用护盾时击中了小行星或飞船，我们希望创建一个弹性碰撞。抛射物仍将被摧毁，但飞船或小行星的速度将根据碰撞进行修改。以下是`projectile`循环的代码：
- en: '[PRE20]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The first series of checks this loop performs is against every asteroid. It
    looks for an active asteroid with which it currently collides. If those conditions
    are true, the first thing it does is call the `ElasticCollision` function on the
    asteroid, passing in the projectile:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 此循环执行的第一系列检查是针对每颗小行星。它寻找当前正在碰撞的活动小行星。如果这些条件为真，它首先调用`ElasticCollision`函数，传入抛射物：
- en: '[PRE21]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This code is the same as the earlier version, but with the addition of this
    call to `ElasticCollision`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码与早期版本相同，但增加了对`ElasticCollision`的调用：
- en: '[PRE22]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Later in our loop through each active projectile, we will add a call to the
    `ElasticCollision` function if a projectile strikes your player''s spaceship while
    its shields are up:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们循环遍历每个活动抛射物时，如果抛射物击中玩家飞船的护盾已经启用，我们将添加一个对`ElasticCollision`函数的调用：
- en: '[PRE23]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We will do the same for an enemy spaceship struck by a projectile while its
    shields are up:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当敌方飞船在护盾启用时被抛射物击中时，我们也会做同样的处理：
- en: '[PRE24]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'After looping over all of the active projectiles, the `collisions` function
    loops over all of the asteroids looking for a collision between an asteroid and
    one of the ships. If the ship does not have its shields activated, the ship is
    destroyed. We do not make any modifications to this part of the code. In previous
    versions of our code, if the ship did have its shields up, we destroyed the asteroid.
    Now, we will have an elastic collision, which will cause the spaceship and the
    asteroid to bounce off one another. This is what this `asteroid` loop looks like:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在循环遍历所有活动抛射物之后，`collisions`函数会循环遍历所有小行星，寻找小行星与飞船之间的碰撞。如果飞船没有启用护盾，飞船将被摧毁。我们不对代码的这部分进行任何修改。在我们的代码的早期版本中，如果飞船启用了护盾，我们会摧毁小行星。现在，我们将进行弹性碰撞，这将导致飞船和小行星相互弹开。这就是这个`asteroid`循环的样子：
- en: '[PRE25]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: There are now two calls to `ElasticCollision`. One of the calls occurs when
    the player ship collides with an asteroid and the player ship has its shields
    up. The other occurs when the enemy ship collides with an asteroid, and the enemy
    ship has its shields up.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在有两个对`ElasticCollision`的调用。一个是当玩家飞船与小行星碰撞且玩家飞船的护盾已经启用时。另一个是当敌方飞船与小行星碰撞且敌方飞船的护盾已经启用时。
- en: 'The last change we must make to our `collisions()` function is the addition
    of a new double `asteroid` loop that will loop through all our asteroids looking
    for collisions between two of them. That creates a fun effect where asteroids
    bounce off one another like billiard balls. If there is a collision detected between
    two of the asteroids, we call `ElasticCollision`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须对我们的`collisions()`函数进行的最后一个修改是添加一个新的双重`asteroid`循环，它将循环遍历我们所有的小行星，寻找它们之间的碰撞。这会产生一个有趣的效果，小行星会像台球一样弹开。如果检测到两个小行星之间的碰撞，我们调用`ElasticCollision`：
- en: '[PRE26]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Changes to asteroid.cpp and projectile.cpp
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对asteroid.cpp和projectile.cpp的更改
- en: 'We have to make a small addition to both `asteroid.cpp` and `projectile.cpp`.
    We have added a new attribute called `m_Mass` to the `Collider` class, so all
    classes derived from `Collider` inherit this attribute. The `m_Mass` attribute
    is used by our `ElasticCollision` function to determine how these objects will
    move after an elastic collision. The ratio between the mass of a spaceship and
    the mass of a projectile will be used to calculate the amount of recoil that occurs
    when the spaceship shoots a projectile. The first modification is to the `Projectile`
    class constructor. Here is the new version of that constructor:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要对`asteroid.cpp`和`projectile.cpp`进行小的修改。我们为`Collider`类添加了一个名为`m_Mass`的新属性，因此所有从`Collider`派生的类都继承了这个属性。`m_Mass`属性被我们的`ElasticCollision`函数使用，以确定这些物体在弹性碰撞后将如何移动。飞船的质量与抛射物的质量之间的比率将用于计算飞船射击抛射物时发生的后坐力的大小。第一个修改是对`Projectile`类构造函数的修改。以下是该构造函数的新版本：
- en: '[PRE27]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The only modification is the final line, where we set `m_Mass` to `1.0`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的修改是最后一行，我们将`m_Mass`设置为`1.0`：
- en: '[PRE28]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The next constructor that needs to be modified is in the `asteroid.cpp` file.
    We need to modify the `Asteroid` class constructor. Here is the new version of
    the `Asteroid` constructor:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 需要修改的下一个构造函数位于`asteroid.cpp`文件中。我们需要修改`Asteroid`类的构造函数。以下是`Asteroid`构造函数的新版本：
- en: '[PRE29]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Once again, the only line we will add is the final line where we set `m_Mass`
    to `100.0`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们要添加的唯一一行是最后一行，我们将`m_Mass`设置为`100.0`：
- en: '[PRE30]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Changes to the ship.cpp file
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对ship.cpp文件的更改
- en: 'The first change to the `ship.cpp` file will be to the `Ship` constructor.
    This is a simple change that we need to make to the end of the constructor function,
    where we will be setting the mass of the ship to `50.0`. Here is the new version
    of the `Ship` class constructor:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 对`ship.cpp`文件的第一个更改将是对`Ship`构造函数的更改。这是一个简单的更改，我们需要在构造函数的最后进行设置飞船的质量为`50.0`。以下是`Ship`类构造函数的新版本：
- en: '[PRE31]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The only line that was changed was the very last line:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一更改的是最后一行：
- en: '[PRE32]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We will also need to change the `Shoot` function to add a recoil. A few lines
    will be added to modify the velocity of the ship by adding a vector that is in
    the opposite direction to where the ship is facing, and has a magnitude based
    on the velocity and relative mass of the projectile fired. Here is the new `Shoot`
    function:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要改变`Shoot`函数以添加后坐力。将添加几行代码来修改飞船的速度，通过添加一个与飞船面对的方向相反的向量，并且其大小基于发射的抛射物的速度和相对质量。以下是新的`Shoot`函数：
- en: '[PRE33]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'These are the two lines that we are adding to the function:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们要添加到函数中的两行代码：
- en: '[PRE34]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Compiling the physics.html file
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编译physics.html文件
- en: 'Now that we have added physics, it is time to compile our code. We can build
    the `physics.html` file with the following `em++` command:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经添加了物理效果，是时候编译我们的代码了。我们可以使用以下`em++`命令构建`physics.html`文件：
- en: '[PRE35]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The following screenshot may look similar to earlier versions, but when you
    fire your projectiles, the ship will accelerate backward. If you collide with
    an asteroid when your shields are on, you will bounce off them like a billiard
    ball. Get too close to the sun, and the gravity will begin to attract your ship:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 以下的屏幕截图可能看起来与早期版本相似，但当你发射抛射物时，飞船将向后加速。如果你的护盾打开时与小行星碰撞，你将像台球一样弹开。离太阳太近，引力将开始吸引你的飞船：
- en: '![](img/10269f25-3eed-46f3-9771-a8ed315e3005.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/10269f25-3eed-46f3-9771-a8ed315e3005.png)'
- en: 'Figure 13.1: physics.html screenshot'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.1：physics.html截图
- en: Summary
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discussed the history of physics in computer games, and
    how that history dates back to the very first computer game, *SpaceWar!*. We talked
    about the physics that we already have in our game, which includes the conservation
    of momentum. We briefly discussed Newton's third law and how it applies to games,
    and we then added more Newtonian physics to our game by using the third law. We
    added a gravitational field to our star and had it attract the spaceships in our
    game with a force that decreases with the square of the distance between the two
    objects. Finally, we added elastic collisions between our spaceships, projectiles,
    and asteroids.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了计算机游戏中物理学的历史，以及这一历史可以追溯到第一个计算机游戏*SpaceWar!*。我们谈到了我们游戏中已经有的物理学，其中包括动量守恒。我们简要讨论了牛顿第三定律及其在游戏中的应用，然后通过使用第三定律在我们的游戏中添加了更多的牛顿物理学。我们为我们的星球添加了一个引力场，并使其以与两个物体之间距离的平方成反比的力吸引我们游戏中的飞船。最后，我们为我们的飞船、抛射物和小行星添加了弹性碰撞。
- en: In the next chapter, we will add a **user interface** (**UI**) to our game.
    We will also break the game up into multiple screens and add a mouse interface.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将为我们的游戏添加**用户界面**（**UI**）。我们还将把游戏分成多个屏幕，并添加鼠标界面。
