["```cpp\n#include <iostream>\nusing namespace std;\n\nnamespace org {\n    namespace tektutor {\n        namespace application {\n             namespace internals {\n                  int x;\n             }\n        }\n    }\n}\n\nint main ( ) {\n    org::tektutor::application::internals::x = 100;\n    cout << \"\\nValue of x is \" << org::tektutor::application::internals::x << endl;\n\n    return 0;\n}\n```", "```cpp\ng++-7 main.cpp -std=c++17\n./a.out\n```", "```cpp\nValue of x is 100\n```", "```cpp\n#include <iostream>\nusing namespace std;\n\nnamespace org::tektutor::application::internals {\n    int x;\n}\n\nint main ( ) {\n    org::tektutor::application::internals::x = 100;\n    cout << \"\\nValue of x is \" << org::tektutor::application::internals::x << endl;\n\n    return 0;\n}\n```", "```cpp\ng++-7 main.cpp -std=c++17\n./a.out\n```", "```cpp\nValue of x is 100\n```", "```cpp\n#include <iostream>\nusing namespace std;\n\ntemplate <typename T1, typename T2>\nclass MyClass {\n     private:\n          T1 t1;\n          T2 t2;\n     public:\n          MyClass( T1 t1 = T1(), T2 t2 = T2() ) { }\n\n          void printSizeOfDataTypes() {\n               cout << \"\\nSize of t1 is \" << sizeof ( t1 ) << \" bytes.\" << endl;\n               cout << \"\\nSize of t2 is \" << sizeof ( t2 ) << \" bytes.\" << endl;\n     }\n};\n\nint main ( ) {\n\n    //Until C++14\n    MyClass<int, double> obj1;\n    obj1.printSizeOfDataTypes( );\n\n    //New syntax in C++17\n    MyClass obj2( 1, 10.56 );\n\n    return 0;\n}\n```", "```cpp\ng++-7 main.cpp -std=c++17\n./a.out\n```", "```cpp\nValues in integer vectors are ...\n1 2 3 4 5 \n\nValues in double vectors are ...\n1.5 2.5 3.5 \n```", "```cpp\n#include <iostream>\n#include <type_traits>\nusing namespace std;\n\nint main ( ) {\n\n        const int x = 5, y = 5;\n\n        static_assert ( 1 == 0, \"Assertion failed\" );\n        static_assert ( 1 == 0 );\n        static_assert ( x == y );\n\n        return 0;\n}\n```", "```cpp\ng++-7 staticassert.cpp -std=c++17\nstaticassert.cpp: In function \u2018int main()\u2019:\nstaticassert.cpp:7:2: error: static assertion failed: Assertion failed\n static_assert ( 1 == 0, \"Assertion failed\" );\n\nstaticassert.cpp:8:2: error: static assertion failed\n static_assert ( 1 == 0 );\n```", "```cpp\n#include <iostream>\n#include <functional>\nusing namespace std;\n\nvoid globalFunction( ) {\n     cout << \"globalFunction ...\" << endl;\n}\n\nclass MyClass {\n    public:\n        void memberFunction ( int data ) {\n             std::cout << \"\\nMyClass memberFunction ...\" << std::endl;\n        }\n\n        static void staticFunction ( int data ) {\n             std::cout << \"MyClass staticFunction ...\" << std::endl;\n        }\n};\n\nint main ( ) {\n\n    MyClass obj;\n\n    std::invoke ( &MyClass::memberFunction, obj, 100 );\n    std::invoke ( &MyClass::staticFunction, 200 );\n    std::invoke ( globalFunction );\n\n    return 0;\n}\n```", "```cpp\ng++-7 main.cpp -std=c++17\n./a.out\n```", "```cpp\nMyClass memberFunction ...\nMyClass staticFunction ...\nglobalFunction ...\n```", "```cpp\n#include <iostream>\n#include <tuple>\nusing namespace std;\n\nint main ( ) {\n\n    tuple<string,int> student(\"Sriram\", 10);\n    auto [name, age] = student;\n\n    cout << \"\\nName of the student is \" << name << endl;\n    cout << \"Age of the student is \" << age << endl;\n\n    return 0;\n}\n```", "```cpp\ng++-7 main.cpp -std=c++17\n./a.out\n```", "```cpp\nName of the student is Sriram\nAge of the student is 10\n```", "```cpp\n#include <iostream>\nusing namespace std;\n\nbool isGoodToProceed( ) {\n    return true;\n}\n\nbool isGood( ) {\n     return true;\n}\n\nvoid functionWithSwitchStatement( ) {\n\n     switch ( auto status = isGood( ) ) {\n          case true:\n                 cout << \"\\nAll good!\" << endl;\n          break;\n\n          case false:\n                 cout << \"\\nSomething gone bad\" << endl;\n          break;\n     } \n\n}\n\nint main ( ) {\n\n    if ( auto flag = isGoodToProceed( ) ) {\n         cout << \"flag is a local variable and it loses its scope outside the if block\" << endl;\n    }\n\n     functionWithSwitchStatement();\n\n     return 0;\n}\n```", "```cpp\ng++-7 main.cpp -std=c++17\n./a.out\n```", "```cpp\nflag is a local variable and it loses its scope outside the if block\nAll good!\n```", "```cpp\n#include <iostream>\nusing namespace std;\n\ntemplate <typename T1, typename T2>\nclass MyClass {\n     private:\n          T1 t1;\n          T2 t2;\n     public:\n          MyClass( T1 t1 = T1(), T2 t2 = T2() ) { }\n\n          void printSizeOfDataTypes() {\n               cout << \"\\nSize of t1 is \" << sizeof ( t1 ) << \" bytes.\" << endl;\n               cout << \"\\nSize of t2 is \" << sizeof ( t2 ) << \" bytes.\" << endl;\n     }\n};\n\nint main ( ) {\n\n    //Until C++14\n    MyClass<int, double> obj1;\n    obj1.printSizeOfDataTypes( );\n\n    //New syntax in C++17\n    MyClass obj2( 1, 10.56 );\n\n    return 0;\n}\n```", "```cpp\ng++-7 main.cpp -std=c++17\n./a.out\n```", "```cpp\nSize of t1 is 4 bytes.\nSize of t2 is 8 bytes.\n```", "```cpp\n#include <iostream>\nusing namespace std;\n\nclass MyClass {\n    private:\n        static inline int count = 0;\n    public:\n        MyClass() { \n              ++count;\n        }\n\n    public:\n         void printCount( ) {\n              cout << \"\\nCount value is \" << count << endl;\n         } \n};\n\nint main ( ) {\n\n    MyClass obj;\n\n    obj.printCount( ) ;\n\n    return 0;\n}\n```", "```cpp\ng++-7 main.cpp -std=c++17\n./a.out\n```", "```cpp\nCount value is 1\n```"]