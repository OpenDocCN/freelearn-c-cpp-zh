["```cpp\nmat4 skin=(pose[joints.x]*invBindPose[joints.x])*weights.x;\n\u00a0\u00a0skin += (pose[joints.y]*invBindPose[joints.y])*weights.y;\n\u00a0\u00a0skin += (pose[joints.z]*invBindPose[joints.z])*weights.z;\n\u00a0\u00a0skin += (pose[joints.w]*invBindPose[joints.w])*weights.w;\n```", "```cpp\nvoid Sample::Update(float deltaTime) {\n\u00a0\u00a0\u00a0\u00a0mPlaybackTime = mAnimClip.Sample(mAnimatedPose, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 mPlaybackTime + deltaTime);\n\u00a0\u00a0\u00a0\u00a0mAnimatedPose.GetMatrixPalette(mPosePalette);\n\u00a0\u00a0\u00a0\u00a0vector<mat4>& invBindPose = mSkeleton.GetInvBindPose();\n\u00a0\u00a0\u00a0\u00a0for (int i = 0; i < mPosePalette.size(); ++i) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mPosePalette[i] = mPosePalette[i] * invBindPose[i];\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0if (mDoCPUSkinning) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mMesh.CPUSkin(mPosePalette);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\n    void Mesh::CPUSkin(std::vector<mat4>& animatedPose) {\n    \u00a0\u00a0\u00a0\u00a0unsigned int numVerts = mPosition.size();\n    \u00a0\u00a0\u00a0\u00a0if (numVerts == 0) { \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return; \n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0mSkinnedPosition.resize(numVerts);\n    \u00a0\u00a0\u00a0\u00a0mSkinnedNormal.resize(numVerts);\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0for (unsigned int i = 0; i < numVerts; ++i) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ivec4& j = mInfluences[i];\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vec4& w = mWeights[i];\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vec3 p0 = transformPoint(animatedPose[j.x], \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 mPosition[i]);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vec3 p1 = transformPoint(animatedPose[j.y], \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 mPosition[i]);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vec3 p2 = transformPoint(animatedPose[j.z], \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 mPosition[i]);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vec3 p3 = transformPoint(animatedPose[j.w],\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 mPosition[i]);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mSkinnedPosition[i] = p0 * w.x + p1 * w.y + \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0p2 * w.z + p3 * w.w;\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vec3 n0 = transformVector(animatedPose[j.x], \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mNormal[i]);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vec3 n1 = transformVector(animatedPose[j.y], \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mNormal[i]);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vec3 n2 = transformVector(animatedPose[j.z], \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mNormal[i]);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vec3 n3 = transformVector(animatedPose[j.w], \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mNormal[i]);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mSkinnedNormal[i] = n0 * w.x + n1 * w.y + \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0n2 * w.z + n3 * w.w;\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0mPosAttrib->Set(mSkinnedPosition);\n    \u00a0\u00a0\u00a0\u00a0mNormAttrib->Set(mSkinnedNormal);\n    }\n    ```", "```cpp\n    uniform mat4 pose[120];\n    uniform mat4 invBindPose[120];\n    ```", "```cpp\n    uniform mat4 animated[120];\n    ```", "```cpp\n    mat4 skin = (pose[joints.x] * invBindPose[joints.x]) *\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 weights.x;\n    \u00a0\u00a0\u00a0\u00a0skin += (pose[joints.y] * invBindPose[joints.y]) * \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 weights.y;\n    \u00a0\u00a0\u00a0\u00a0skin += (pose[joints.z] * invBindPose[joints.z]) * \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 weights.z;\n    \u00a0\u00a0\u00a0\u00a0skin += (pose[joints.w] * invBindPose[joints.w]) * \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 weights.w;\n    ```", "```cpp\n    mat4 skin = animated[joints.x] * weights.x +\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0animated[joints.y] * weights.y +\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0animated[joints.z] * weights.z +\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0animated[joints.w] * weights.w;\n    ```", "```cpp\n// mPosePalette Generated in the Update method!\nint animated = mSkinnedShader->GetUniform(\"animated\")\nUniform<mat4>::Set(animated, mPosePalette);\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0for (int i = (int)size - 1; i >= 0; --i) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (time >= mFrames[i].mTime) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return i;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n```", "```cpp\n    template<typename T, int N>\n    class Track {\n    // ...\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0virtual int FrameIndex(float time, bool looping);\n    // ...\n    ```", "```cpp\n    template<typename T, int N>\n    class FastTrack : public Track<T, N> {\n    protected:\n    \u00a0\u00a0\u00a0\u00a0std::vector<unsigned int> mSampledFrames;\n    \u00a0\u00a0\u00a0\u00a0virtual int FrameIndex(float time, bool looping);\n    public:\n    \u00a0\u00a0\u00a0\u00a0void UpdateIndexLookupTable();\n    };\n    ```", "```cpp\n    typedef FastTrack<float, 1> FastScalarTrack;\n    typedef FastTrack<vec3, 3> FastVectorTrack;\n    typedef FastTrack<quat, 4> FastQuaternionTrack;\n    ```", "```cpp\n    template FastTrack<float, 1>;\n    template FastTrack<vec3, 3>;\n    template FastTrack<quat, 4>;\n    ```", "```cpp\n    template<typename T, int N>\n    void FastTrack<T, N>::UpdateIndexLookupTable() {\n    \u00a0\u00a0\u00a0\u00a0int numFrames = (int)this->mFrames.size();\n    \u00a0\u00a0\u00a0\u00a0if (numFrames <= 1) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return;\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0float duration = this->GetEndTime() - \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 this->GetStartTime();\n    \u00a0\u00a0\u00a0\u00a0unsigned int numSamples = duration * 60.0f;\n    \u00a0\u00a0\u00a0\u00a0mSampledFrames.resize(numSamples);\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0for (unsigned int i = 0; i < numSamples; ++i) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0float t = (float)i / (float)(numSamples - 1);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0float time = t*duration+this->GetStartTime();\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int frameIndex = 0;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (int j = numFrames - 1; j >= 0; --j) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (time >= this->mFrames[j].mTime) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0frameIndex = (unsigned int)j;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if ((int)frameIndex >= numFrames - 2) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0frameIndex = numFrames - 2;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mSampledFrames[i] = frameIndex;\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cpp\n    template<typename T, int N>\n    int FastTrack<T,N>::FrameIndex(float time,bool loop){\n    \u00a0\u00a0\u00a0\u00a0std::vector<Frame<N>>& frames = this->mFrames;\n    \u00a0\u00a0\u00a0\u00a0unsigned int size = (unsigned int)frames.size();\n    \u00a0\u00a0\u00a0\u00a0if (size <= 1) { \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return -1; \n    }\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0if (loop) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0float startTime = this->mFrames[0].mTime;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0float endTime = this->mFrames[size - 1].mTime;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0float duration = endTime - startTime;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0time = fmodf(time - startTime, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 endTime - startTime);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (time < 0.0f) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0time += endTime - startTime;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0time = time + startTime;\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (time <= frames[0].mTime) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 0;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (time >= frames[size - 2].mTime) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return (int)size - 2;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0float duration = this->GetEndTime() - \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 this->GetStartTime();\n    \u00a0\u00a0\u00a0\u00a0float t = time / duration;\n    \u00a0\u00a0\u00a0\u00a0unsigned int numSamples = (duration * 60.0f);\n    \u00a0\u00a0\u00a0\u00a0unsigned int index = (t * (float)numSamples);\n    \u00a0\u00a0\u00a0\u00a0if (index >= mSampledFrames.size()) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return -1;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0return (int)mSampledFrames[index];\n    }\n    ```", "```cpp\n    template<typename T, int N>\n    FastTrack<T, N> OptimizeTrack(Track<T, N>& input);\n    ```", "```cpp\n    template FastTrack<float, 1> \n    OptimizeTrack(Track<float, 1>& input);\n    template FastTrack<vec3, 3> \n    OptimizeTrack(Track<vec3, 3>& input);\n    template FastTrack<quat, 4> \n    OptimizeTrack(Track<quat, 4>& input);\n    ```", "```cpp\n    template<typename T, int N>\n    FastTrack<T, N> OptimizeTrack(Track<T, N>& input) {\n    \u00a0\u00a0\u00a0\u00a0FastTrack<T, N> result;\n    \u00a0\u00a0\u00a0\u00a0result.SetInterpolation(input.GetInterpolation());\n    \u00a0\u00a0\u00a0\u00a0unsigned int size = input.Size();\n    \u00a0\u00a0\u00a0\u00a0result.Resize(size);\n    \u00a0\u00a0\u00a0\u00a0for (unsigned int i = 0; i < size; ++i) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result[i] = input[i];\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0result.UpdateIndexLookupTable();\n    \u00a0\u00a0\u00a0\u00a0return result;\n    }\n    ```", "```cpp\n    template <typename VTRACK, typename QTRACK>\n    class TTransformTrack {\n    protected:\n    \u00a0\u00a0 unsigned int mId;\n    \u00a0\u00a0 VTRACK mPosition;\n    \u00a0\u00a0 QTRACK mRotation;\n    \u00a0\u00a0 VTRACK mScale;\n    public:\n    \u00a0\u00a0 TTransformTrack();\n    \u00a0\u00a0 unsigned int GetId();\n    \u00a0\u00a0 void SetId(unsigned int id);\n    \u00a0\u00a0 VTRACK& GetPositionTrack();\n    \u00a0\u00a0 QTRACK& GetRotationTrack();\n    \u00a0\u00a0 VTRACK& GetScaleTrack();\n    \u00a0\u00a0 float GetStartTime();\n    \u00a0\u00a0 float GetEndTime();\n    \u00a0\u00a0 bool IsValid();\n    \u00a0\u00a0 Transform Sample(const Transform& r,float t,bool l);\n    };\n    ```", "```cpp\n    typedef TTransformTrack<VectorTrack, \n    \u00a0\u00a0\u00a0\u00a0QuaternionTrack> TransformTrack;\n    typedef TTransformTrack<FastVectorTrack, \n    \u00a0\u00a0\u00a0\u00a0FastQuaternionTrack> FastTransformTrack;\n    ```", "```cpp\n    FastTransformTrack OptimizeTransformTrack(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 TransformTrack& input);\n    ```", "```cpp\n    template TTransformTrack<VectorTrack, QuaternionTrack>;\n    template TTransformTrack<FastVectorTrack, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 FastQuaternionTrack>;\n    ```", "```cpp\n    FastTransformTrack OptimizeTransformTrack(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 TransformTrack& input) {\n    \u00a0\u00a0\u00a0\u00a0FastTransformTrack result;\n    \u00a0\u00a0\u00a0\u00a0result.SetId(input.GetId());\n    \u00a0\u00a0\u00a0\u00a0result.GetPositionTrack()= OptimizeTrack<vec3, 3> (\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 input.GetPositionTrack());\n    \u00a0\u00a0\u00a0\u00a0result.GetRotationTrack() = OptimizeTrack<quat, 4>(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 input.GetRotationTrack());\n    \u00a0\u00a0\u00a0\u00a0result.GetScaleTrack()\u00a0\u00a0=\u00a0\u00a0OptimizeTrack<vec3, 3> (\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0input.GetScaleTrack());\n    \u00a0\u00a0\u00a0\u00a0return result;\n    }\n    ```", "```cpp\n    template <typename TRACK>\n    class TClip {\n    protected:\n    \u00a0\u00a0\u00a0\u00a0std::vector<TRACK> mTracks;\n    \u00a0\u00a0\u00a0\u00a0std::string mName;\n    \u00a0\u00a0\u00a0\u00a0float mStartTime;\n    \u00a0\u00a0\u00a0\u00a0float mEndTime;\n    \u00a0\u00a0\u00a0\u00a0bool mLooping;\n    public:\n    \u00a0\u00a0\u00a0\u00a0TClip();\n    \u00a0\u00a0\u00a0\u00a0TRACK& operator[](unsigned int index);\n    // ...\n    ```", "```cpp\n    typedef TClip<TransformTrack> Clip;\n    typedef TClip<FastTransformTrack> FastClip;\n    ```", "```cpp\n    FastClip OptimizeClip(Clip& input);\n    ```", "```cpp\n    template TClip<TransformTrack>;\n    template TClip<FastTransformTrack>;\n    ```", "```cpp\n    FastClip OptimizeClip(Clip& input) {\n    \u00a0\u00a0\u00a0\u00a0FastClip result;\n    \u00a0\u00a0\u00a0\u00a0result.SetName(input.GetName());\n    \u00a0\u00a0\u00a0\u00a0result.SetLooping(input.GetLooping());\n    \u00a0\u00a0\u00a0\u00a0unsigned int size = input.Size();\n    \u00a0\u00a0\u00a0\u00a0for (unsigned int i = 0; i < size; ++i) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int joint = input.GetIdAtIndex(i);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result[joint] = \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0OptimizeTransformTrack(input[joint]);\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0result.RecalculateDuration();\n    \u00a0\u00a0\u00a0\u00a0return result;\n    }\n    ```", "```cpp\nvoid Pose::GetMatrixPalette(std::vector<mat4>& out) {\n\u00a0\u00a0\u00a0\u00a0unsigned int size = Size();\n\u00a0\u00a0\u00a0\u00a0if (out.size() != size) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0out.resize(size);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0for (unsigned int i = 0; i < size; ++i) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Transform t = GetGlobalTransform(i);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0out[i] = transformToMat4(t);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\nvoid Pose::GetMatrixPalette(std::vector<mat4>& out) {\n\u00a0\u00a0\u00a0\u00a0int size = (int)Size();\n\u00a0\u00a0\u00a0\u00a0if ((int)out.size() != size) { out.resize(size); }\n\u00a0\u00a0\u00a0\u00a0int i = 0;\n\u00a0\u00a0\u00a0\u00a0for (; i < size; ++i) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int parent = mParents[i];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (parent > i) { break; }\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mat4 global = transformToMat4(mJoints[i]);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (parent >= 0) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0global = out[parent] * global;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0out[i] = global;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0for (; i < size; ++i) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Transform t = GetGlobalTransform(i);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0out[i] = transformToMat4(t);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\n    typedef std::map<int, int> BoneMap;\n    BoneMap RearrangeSkeleton(Skeleton& skeleton);\n    void RearrangeMesh(Mesh& mesh, BoneMap& boneMap);\n    void RearrangeClip(Clip& clip, BoneMap& boneMap);\n    void RearrangeFastclip(FastClip& clip, BoneMap& boneMap);\n    ```", "```cpp\n    BoneMap RearrangeSkeleton(Skeleton& skeleton) {\n    \u00a0\u00a0\u00a0\u00a0Pose& restPose = skeleton.GetRestPose();\n    \u00a0\u00a0\u00a0\u00a0Pose& bindPose = skeleton.GetBindPose();\n    \u00a0\u00a0\u00a0\u00a0unsigned int size = restPose.Size();\n    \u00a0\u00a0\u00a0\u00a0if (size == 0) { return BoneMap(); }\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0std::vector<std::vector<int>> hierarchy(size);\n    \u00a0\u00a0\u00a0\u00a0std::list<int> process;\n    \u00a0\u00a0\u00a0\u00a0for (unsigned int i = 0; i < size; ++i) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int parent = restPose.GetParent(i);\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (parent >= 0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0hierarchy[parent].push_back((int)i);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0process.push_back((int)i);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0BoneMap mapForward;\n    \u00a0\u00a0\u00a0\u00a0BoneMap mapBackward;\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0int index = 0;\n    \u00a0\u00a0\u00a0\u00a0while (process.size() > 0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int current = *process.begin();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0process.pop_front();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::vector<int>& children = hierarchy[current];\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int numChildren = children.size();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (unsigned int i = 0; i < numChildren; ++i) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0process.push_back(children[i]);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mapForward[index] = current;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mapBackward[current] = index;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0index += 1;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0mapForward[-1] = -1;\n    \u00a0\u00a0\u00a0\u00a0mapBackward[-1] = -1;\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0Pose newRestPose(size);\n    \u00a0\u00a0\u00a0\u00a0Pose newBindPose(size);\n    \u00a0\u00a0\u00a0\u00a0std::vector<std::string> newNames(size);\n    \u00a0\u00a0\u00a0\u00a0for (unsigned int i = 0; i < size; ++i) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int thisBone = mapForward[i];\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0newRestPose.SetLocalTransform(i, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0restPose.GetLocalTransform(thisBone));\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0newBindPose.SetLocalTransform(i, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bindPose.GetLocalTransform(thisBone));\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0newNames[i] = skeleton.GetJointName(thisBone);\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int parent = mapBackward[bindPose.GetParent(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 thisBone)];\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0newRestPose.SetParent(i, parent);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0newBindPose.SetParent(i, parent);\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0skeleton.Set(newRestPose, newBindPose, newNames);\n    \u00a0\u00a0\u00a0\u00a0return mapBackward;\n    } // End of RearrangeSkeleton function\n    ```", "```cpp\nvoid RearrangeClip(Clip& clip, BoneMap& boneMap) {\n\u00a0\u00a0\u00a0\u00a0unsigned int size = clip.Size();\n\u00a0\u00a0\u00a0\u00a0for (unsigned int i = 0; i < size; ++i) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int joint = (int)clip.GetIdAtIndex(i);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int newJoint = (unsigned int)boneMap[joint];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0clip.SetIdAtIndex(i, newJoint);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\nvoid RearrangeMesh(Mesh& mesh, BoneMap& boneMap) {\n\u00a0\u00a0\u00a0\u00a0std::vector<ivec4>& influences = mesh.GetInfluences();\n\u00a0\u00a0\u00a0\u00a0unsigned int size = (unsigned int)influences.size();\n\u00a0\u00a0\u00a0\u00a0for (unsigned int i = 0; i < size; ++i) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0influences[i].x = boneMap[influences[i].x];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0influences[i].y = boneMap[influences[i].y];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0influences[i].z = boneMap[influences[i].z];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0influences[i].w = boneMap[influences[i].w];\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0mesh.UpdateOpenGLBuffers();\n}\n```"]