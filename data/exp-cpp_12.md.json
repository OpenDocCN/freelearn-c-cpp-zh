["```cpp\nclass User\n{\npublic:\n  // code omitted for brevity\nprivate:\n  std::string address_;\n  // code omitted for brevity\n};\n```", "```cpp\nstruct Address\n{\n  std::string country;\n  std::string city;\n  std::string street;\n  float latitude{};\n  float longitude{};\n};\n```", "```cpp\nclass User\n{\n  // code omitted for brevity\n  Address address_;\n}; \n```", "```cpp\nclass User\n{\npublic:\n  // code omitted for brevity\n  void set_email(const std::string&);\n\nprivate: \n  // code omitted for brevity\n  std::string email_;\n};\n```", "```cpp\nvoid test_set_email()\n{\n  std::string valid_email = \"valid@email.com\";\n  std::string invalid_email = \"112%$\";\n  User u;\n  u.set_email(valid_email);\n  u.set_email(invalid_email);\n}\n```", "```cpp\nvoid test_set_email()\n{\n  std::string valid_email = \"valid@email.com\";\n  std::string invalid_email = \"112%$\";\n\n  User u;\n  u.set_email(valid_email);\n  if (u.get_email() == valid_email) {\n    std::cout << \"Success: valid email has been set successfully\" << std::endl;\n  } else {\n    std::cout << \"Fail: valid email has not been set\" << std::endl;\n  }\n\n  try {\n    u.set_email(invalid_email);\n    std::cerr << \"Fail: invalid email has not been rejected\" << std::endl;\n  } catch (std::exception& e) {\n    std::cout << \"Success: invalid email rejected\" << std::endl;\n  }\n}\n```", "```cpp\n#include <regex>\n#include <stdexcept>\n\nvoid User::set_email(const std::string& email)\n{\n  if (!std::regex_match(email, std::regex(\"(\\\\w+)(\\\\.|_)?(\\\\w*)@(\\\\w+)(\\\\.(\\\\w+))+\")) {\n    throw std::invalid_argument(\"Invalid email\");\n  }\n\n  this->email_ = email;\n}\n```", "```cpp\nstd::string generate_username(const std::string& email)\n{\n  int num = get_random_number();\n  std::string local_part = email.substr(0, email.find('@'));\n  return local_part + std::to_string(num);\n}\n```", "```cpp\nclass User\n{\npublic:\n  // constructors and assignment operators are omitted for code brevity\n  void set_name(const std::string& name);\n  std::string get_name() const;\n  void set_email(const std::string&);\n  std::string get_email() const;\n  // more setters and getters are omitted for code brevity\n\nprivate:\n  std::string name_;\n  std::string email_;\n  Address address_;\n  int age;\n};\n```", "```cpp\nstruct PaymentOption\n{\n  std::string number;\n  std::string holder_name;\n  std::chrono::year_month expiration_date;\n  int code;\n};\n```", "```cpp\nclass User\n{\npublic:\n  // code omitted for brevity\n  void add_payment_option(const PaymentOption& po) {\n    payment_options_.push_back(op);\n  }\n\n  std::vector get_payment_options() const {\n    return payment_options_;\n  }\nprivate:\n  // code omitted for brevity\n  std::vector<PaymentOption> payment_options_;\n};\n```", "```cpp\nclass User\n{\npublic:\n  // code omitted for brevity\n  void add_payment_option(const PaymentOption& po, bool is_primary) {\n    payment_options_.push_back(std::make_tuple(po, is_primary));\n  }\n\n  std::vector<std::tuple<PaymentOption, boolean> > get_payment_options() const {\n    return payment_options_;\n  }\nprivate:\n  // code omitted for brevity\n  std::vector<std::tuple<PaymentOption, boolean> > payment_options_;\n};\n```", "```cpp\nclass User\n{\npublic:\n  // code omitted for brevity\n  using PaymentOptionList = std::vector<std::tuple<PaymentOption, boolean> >;\n\n  // add_payment_option is omitted for brevity\n  PaymentOptionList get_payment_options() const {\n    return payment_options_;\n  }\n\nprivate:\n  // code omitted for brevity\n  PaymentOptionList payment_options_;\n};\n```", "```cpp\nUser john = get_current_user(); // consider the function is implemented and works\nauto payment_options = john.get_payment_options();\nfor (const auto& option : payment_options) {\n  auto [po, is_primary] = option;\n  if (is_primary) {\n    // use the po payment option\n  }\n}\n```", "```cpp\nclass User\n{\npublic:\n  // code omitted for brevity\n  using PaymentOptionList = std::vector<PaymentOption>;\n  PaymentOption get_primary_payment_option() const {\n    return primary_payment_option_;\n  }\n\n  PaymentOptionList get_payment_options() const {\n    return payment_options_;\n  }\n\n  void add_payment_option(const PaymentOption& po, bool is_primary) {\n    if (is_primary) {\n      // moving current primary option to non-primaries\n      add_payment_option(primary_payment_option_, false);\n      primary_payment_option_ = po;\n      return;\n    }\n    payment_options_.push_back(po);\n  }\n\nprivate:\n  // code omitted for brevity\n  PaymentOption primary_payment_option_;\n  PaymentOptionList payment_options_;\n};\n```", "```cpp\nclass Product\n{\npublic:\n  // code omitted for brevity\n  bool is_digital() const {\n    return weight_ == 0.0;\n  }\n\n  // code omitted for brevity\n};\n```", "```cpp\nenum class Currency { USD, EUR, GBP }; // the list goes further\n\nclass Product\n{\npublic:\n  // code omitted for brevity\n  double convert_price(Currency c) {\n    // convert to proper value\n  }\n\n  // code omitted for brevity\n};\n```", "```cpp\nclass DigitalProduct : public Product\n{\npublic:\n  // code omitted for brevity\n  double convert_price_with_discount(Currency c) {\n    // convert by applying a 12% discount\n  } \n};\n```", "```cpp\nclass Product\n{\npublic:\n  // code omitted for brevity\n  virtual double convert_price(Currency c) {\n    // default implementation\n  }\n\n  // code omitted for brevity\n};\n\nclass DigitalProduct : public Product\n{\npublic:\n  // code omitted for brevity\n  double convert_price(Currency c) override {\n    // implementation applying a 12% discount\n  }\n\n  // code omitted for brevity\n};\n```", "```cpp\nclass Product\n{\npublic:\n  // code omitted for brevity\n  virtual double convert_price(Currency c) {\n    auto final_price = apply_discount();\n    // convert the final_price based on the currency\n  }\n\nprivate:\n virtual double apply_discount() {\n return getPrice(); // no discount by default\n }\n\n  // code omitted for brevity\n};\n```", "```cpp\nclass DigitalProduct : public Product\n{\npublic:\n  // code omitted for brevity\n\nprivate:\n  double apply_discount() override {\n return getPrice() * 0.12;\n }\n\n  // code omitted for brevity\n};\n```", "```cpp\nclass IShippableReplaceableExpirable\n{\npublic:\n  virtual void ship() = 0;\n  virtual void replace() = 0;\n  virtual void expire() = 0;\n};\n```", "```cpp\nclass IShippable\n{\npublic:\n  virtual void ship() = 0;\n};\n\nclass IReplaceable\n{\npublic:\n  virtual void replace() = 0;\n};\n\nclass IExpirable\n{\npublic:\n  virtual void expire() = 0;\n};\n```", "```cpp\nclass PhysicalProduct : public Product {};\n\n// The book does not expire\nclass Book : public PhysicalProduct, public IShippable, public IReplaceable\n{\n};\n\n// A house is not shipped, not replaced, but it can expire \n// if the landlord decided to put it on sell till a specified date\nclass House : public PhysicalProduct, public IExpirable\n{\n};\n\nclass DigitalProduct : public Product {};\n\n// An audio book is not shippable and it cannot expire. \n// But we implement IReplaceable in case we send a wrong file to the user.\nclass AudioBook : public DigitalProduct, public IReplaceable\n{\n};\n```", "```cpp\nclass IReceiptSender\n{\npublic:\n  virtual void send_receipt() = 0;\n};\n```", "```cpp\nclass Product\n{\npublic:\n  // code omitted for brevity\n  void purchase(IReceiptSender* receipt_sender) {\n    // purchase logic omitted\n    // we send the receipt passing purchase information\n receipt_sender->send(/* purchase-information */);\n  }\n};\n```", "```cpp\nclass MailReceiptSender : public IReceiptSender\n{\npublic:\n  // code omitted for brevity\n  void send_receipt() override { /* ... */ }\n};\n```", "```cpp\nIReceiptSender* rs = new EmailReceiptSender();\n// consider the get_purchasable_product() is implemented somewhere in the code\nauto product = get_purchasable_product();\nproduct.purchase(rs);\n```", "```cpp\nclass Entity; // new base class\n\ntemplate <typename T, typename = std::enable_if_t<std::is_base_of_v<Entity, T>>>\nclass Repository\n{\npublic:\n T get_by_id(int);\n void insert(const T&);\n void update(const T&);\n void remove(const T&);\n std::vector<T> get_all(std::function<bool(T)> condition);\n};\n```", "```cpp\nclass Entity\n{\npublic:\n  int get_id() const;\n  void set_id(int);\nprivate:\n  int id_;\n};\n```", "```cpp\nclass User : public Entity\n{\n// code omitted for brevity\n};\n```", "```cpp\nRepository<User> user_repo;\nUser fetched_user = user_repo.get_by_id(111);\n```", "```cpp\nclass Logistics \n{\npublic:\n Transport* getLogistics() = 0;\n  // other functions are omitted for brevity\n};\n```", "```cpp\nTransport* ship_transport = new Ship();\n```", "```cpp\nclass RoadLogistics : public Logistics\n{\npublic: \n  Truck* getLogistics() override {\n return new Truck();\n }\n}\n```"]