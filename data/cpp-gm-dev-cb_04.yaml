- en: Chapter 4. Algorithms for Game Development
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章 游戏开发算法
- en: 'In this chapter, the following recipes will be covered:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，将涵盖以下示例：
- en: Using sorting techniques to arrange items
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用排序技术来排列项目
- en: Using searching techniques to look for an item
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用搜索技术查找项目
- en: Finding the complexity of an algorithm
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 找到算法的复杂性
- en: Finding the endian-ness of a device
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找设备的字节顺序
- en: Using dynamic programming to break down a complex problem
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用动态规划来解决复杂问题
- en: Using greedy algorithms to solve problems
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用贪婪算法解决问题
- en: Using divide and conquer algorithms to solve problems
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用分治算法解决问题
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: An algorithm refers to a list of steps that should be applied to perform a task.
    Searching and sorting algorithms are techniques with which we can search or sort
    elements in a container. A container, by itself, will have no advantage unless
    we can search items within that container. Based on certain containers, certain
    algorithms become more powerful for some containers than others. As an algorithm
    will run slower on a slower system and faster on a superior system, computation
    time is not an effective way to measure the effectiveness of an algorithm. Algorithms
    are rather measured as steps. Games are real-time applications, so the algorithms
    that will be applied have to be effective for games to be executed at least at
    30 frames per second. The ideal frame rate is 60 frames per second.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 算法是指应用于执行任务的一系列步骤。搜索和排序算法是我们可以在容器中搜索或排序元素的技术。一个容器本身将没有任何优势，除非我们可以在该容器中搜索项目。根据某些容器，某些算法对某些容器比其他容器更强大。由于算法在较慢的系统上运行速度较慢，在较快的系统上运行速度较快，计算时间并不是衡量算法有效性的有效方法。算法通常是以步骤来衡量的。游戏是实时应用程序，因此将应用的算法必须对游戏至少以每秒30帧的速度执行有效。理想的帧速率是每秒60帧。
- en: Using sorting techniques to arrange items
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用排序技术来排列项目
- en: Sorting is a way to arrange items in a container. We can arrange them in ascending
    or descending order. If we have to implement the high score system and leader
    board of a game, sorting becomes necessary. In the game, the moment a user achieves
    a score higher than his previous highest score, we should update that value as
    the current highest score and push it to a local or online leader board. If it's
    local, we should arrange all the user's previous high scores in descending order
    and display the top 10 scores. If it is an online leader board, we need to sort
    all the users' latest high scores and display the result.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 排序是一种排列容器中的项目的方法。我们可以按升序或降序排列它们。如果我们必须实现游戏的最高分系统和排行榜，排序就变得必要了。在游戏中，当用户获得比以前的最高分更高的分数时，我们应该将该值更新为当前最高分，并将其推送到本地或在线排行榜。如果是本地的，我们应该按降序排列所有用户以前的最高分，并显示前10个分数。如果是在线排行榜，我们需要对所有用户的最新最高分进行排序并显示结果。
- en: Getting ready
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 做好准备
- en: To work through this recipe, you will need a machine running Windows. You also
    need to have a working copy of Visual Studio installed on your Windows machine.
    No other prerequisites are required.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本示例，您需要一台运行Windows的计算机。您还需要在Windows计算机上安装一个可用的Visual Studio副本。不需要其他先决条件。
- en: How to do it…
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In this recipe, we will find out how easy it is to arrange items in a container
    using different sorting techniques:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将发现使用不同的排序技术来排列容器中的项目是多么容易：
- en: Open Visual Studio.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio。
- en: Create a new C++ project.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的C++项目。
- en: Select **Win32 Console Application**.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Win32控制台应用程序**。
- en: Add a header file called `Sorting.h`.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`Sorting.h`的头文件。
- en: 'Add the following lines of code to it:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到其中：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How it works…
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this example four sorting techniques have been used. The four techniques
    are **bubble** **sort**, **selection** **sort**, **insertion** **sort**, and **quick**
    **sort**.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，使用了四种排序技术。这四种技术是**冒泡** **排序**，**选择** **排序**，**插入** **排序**和**快速** **排序**。
- en: '**Bubble sort** is a sorting algorithm that works by continuously traversing
    the container to be sorted, comparing each pair of adjacent items and swapping
    them if they are in the wrong order. The process is continued until no more swaps
    are required. The average, best, and worst case scenarios have the order of *O(n^2)*.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**冒泡排序**是一种排序算法，通过不断遍历要排序的容器，比较相邻的每一对项目，并在它们的顺序错误时交换它们。这个过程一直持续到不再需要交换为止。平均、最好和最坏情况的顺序为*O(n^2)*。'
- en: '**Insertion sort** is a simple sorting algorithm, a comparison sort in which
    the sorted container is built one entry at a time. It is a very simple algorithm
    to implement. However, it is not so effective on large sets of data. The worst
    and average case scenarios have an order of *O(n^2)* and the best case scenario,
    when the container is sorted, has an order of *O(n)*.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**插入排序**是一种简单的排序算法，是一种比较排序，其中排序的容器是一次构建一个条目。这是一种非常简单的算法来实现。然而，在大型数据集上它并不那么有效。最坏和平均情况的顺序为*O(n^2)*，最好的情况是，当容器排序时，顺序为*O(n)*。'
- en: '**Selection sort** is an algorithm that attempts to place an item in its correct
    position in the sorted list at every pass. The best, worst, and average case scenarios
    have an order of *O(n^2)*.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**选择排序**是一种算法，它试图在每次通过时将项目放在排序列表中的正确位置。最好、最坏和平均情况的顺序为*O(n^2)*。'
- en: '**Quick sort** is an algorithm that creates a pivot and then sorts the container
    based on the pivot. Then the pivot is shifted and the process continues. Quick
    sort is a very effective algorithm and works on almost all real-world data and
    most modern architectures. It makes excellent use of memory hierarchy. Even the
    inbuilt standard template library uses a modified version of quick sort for its
    sorting algorithm. The best and average case scenarios for this algorithm are
    *O(n*log n)* and the worst case is *O(n^2)*.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**快速排序**是一种算法，它创建一个枢轴，然后根据枢轴对容器进行排序。然后移动枢轴并继续该过程。快速排序是一种非常有效的算法，适用于几乎所有的现实世界数据和大多数现代架构。它很好地利用了内存层次结构。甚至内置的标准模板库使用了快速排序的修改版本作为其排序算法。该算法的最佳和平均情况是*O(n*log
    n)*，最坏情况是*O(n^2)*。'
- en: Using searching techniques to look for an item
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用搜索技术查找项目
- en: Searching techniques are a group of algorithms that involve the process of looking
    for an item in a container. Searching and sorting go hand in hand. A sorted container
    will be easier to search. After a container is sorted or ordered, we can apply
    an appropriate searching algorithm to find an element. Suppose we need to find
    the names of the guns that have been used to kill more than 25 enemies. If the
    container stores the values of the name of the gun and total kills associated
    with that gun, all we need to do is to first sort that container in ascending
    number of kills made by the guns. Then we can do a linear search in which we find
    the first gun that has more than 25 kills. Correspondingly, the next items in
    the container after that will have more than 25 kills, as the container is sorted.
    However, we can apply better searching techniques.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索技术是一组涉及在容器中查找项目的算法过程。搜索和排序是相辅相成的。排序的容器将更容易搜索。在容器排序或排序后，我们可以应用适当的搜索算法来查找元素。假设我们需要找到已用于杀死超过25名敌人的枪支的名称。如果容器存储了枪支名称和与该枪支相关的总击杀数的值，我们只需要首先按击杀数升序对该容器进行排序。然后我们可以进行线性搜索，找到第一支击杀数超过25的枪支。相应地，容器中该枪支之后的项目将具有超过25次击杀，因为容器已排序。但是，我们可以应用更好的搜索技术。
- en: Getting ready
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You need to have a working copy of Visual Studio installed on your Windows machine.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在Windows计算机上安装Visual Studio的工作副本。
- en: How to do it…
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In this recipe, we will find out how we can easily apply searching algorithms
    to our program:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将发现如何轻松地将搜索算法应用到我们的程序中：
- en: Open Visual Studio.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio。
- en: Create a new C++ project.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的C++项目。
- en: Select **Win32 Console Application**.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Win32控制台应用程序**。
- en: Add a source file called `Source.cpp`.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加名为`Source.cpp`的源文件。
- en: 'Add the following lines of code to it:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码行添加到其中：
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works…
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Searching for items in a container can be done in many ways. However, it matters
    a lot whether the container has been sorted or not. Let us assume that the container
    is sorted. The worst way to search for an item is to traverse the whole container
    and search for the item. This will take a lot of time for large data sets and
    is absolutely not advisable in games programming. A better way to search for an
    item is by using binary searching. Binary searching works by dividing the container
    into two halves. It checks at the midpoint if the value to be searched is less
    than or greater than the midpoint value. If it is greater, we can ignore the first
    half of the container and continue searching only in the second half. Again repeat
    the process for the second half, by further dividing into two halves. Consequently,
    by doing this we can reduce the search space of the algorithm immensely. The order
    of this algorithm is O(log n).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在容器中搜索项目可以通过多种方式完成。但是，容器是否已排序很重要。让我们假设容器已排序。搜索项目的最糟糕方式是遍历整个容器并搜索项目。对于大数据集，这将花费大量时间，并且在游戏编程中绝对不可取。搜索项目的更好方式是使用二分搜索。二分搜索通过将容器分成两半来工作。它在中点检查要搜索的值是否小于或大于中点值。如果大于中点值，我们可以忽略容器的第一半，并继续仅在第二半中搜索。然后再将第二半进一步分成两半，重复这个过程。因此，通过这样做，我们可以极大地减少算法的搜索空间。这个算法的顺序是O(log
    n)。
- en: Finding the complexity of an algorithm
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找算法的复杂性
- en: We need an effective way to measure algorithms. That way we will find out whether
    our algorithm is effective or not. An algorithm will work more slowly on slower
    machines and more quickly on faster machines, so computation time is not an effective
    way to measure algorithms. Algorithms should rather be measured as a number of
    steps. We call that the order of the algorithm. We also need to find out the best
    case, worst case, and average case scenarios for the order of the algorithm. This
    will give us a clearer picture of how our algorithm will be applied to small sets
    of data and larger sets of data. Complex algorithms or algorithms of a higher
    order should be avoided, as these will increase the number of steps that the device
    will need to do to perform the task, and hence will slow down the application.
    Also, debugging becomes difficult with such algorithms.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一种有效的方法来衡量算法。这样我们将发现我们的算法是否有效。算法在较慢的机器上运行得更慢，在较快的机器上运行得更快，因此计算时间不是衡量算法的有效方法。算法应该被衡量为步骤数。我们称之为算法的顺序。我们还需要找出算法顺序的最佳情况、最坏情况和平均情况。这将给我们一个更清晰的图片，我们的算法将如何应用于小数据集和大数据集。应避免复杂算法或高阶算法，因为这将增加设备执行任务所需的步骤数，从而减慢应用程序的速度。此外，使用这样的算法进行调试变得困难。
- en: Getting ready
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You need to have a working copy of Visual Studio installed on your Windows machine.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在Windows计算机上安装Visual Studio的工作副本。
- en: How to do it…
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: In this recipe, we will find out how easy it is to find the complexity of an
    algorithm.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将发现找到算法的复杂性是多么容易。
- en: Open Visual Studio.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio。
- en: Create a new C++ project.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的C++项目。
- en: Select **Win32 Console Application**.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Win32控制台应用程序**。
- en: Add a source file called `Source.cpp`.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加名为`Source.cpp`的源文件。
- en: 'Add the following lines of code to it:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码行添加到其中：
- en: '[PRE2]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works…
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this example, we can see how the order of an algorithm, or the "Big O" notation,
    varies with implementation. If we take the first function, `Cubic_Order`, the
    innermost implementation will take *n*n*n* steps to find the answer. So it has
    an order of n-cubed, *O(n^3)*. This is really bad. Imagine if n is a really large
    data set, for example let's say *n =1000*, it will take 1,000,000,000 steps to
    find the solution. Avoid cubic order algorithms whenever you can. The second function,
    `square_order`, has a square order. The innermost implementation will take *n*n*
    steps to find a solution, so the order of that algorithm is *O(n^2)*. This is,
    again, bad practice.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们可以看到算法的顺序，或者“大O”符号，随着实现的不同而变化。如果我们采用第一个函数`Cubic_Order`，最内部的实现将需要*n*n*n*步来找到答案。因此它的顺序是n的三次方，*O(n^3)*。这真的很糟糕。想象一下，如果n是一个非常大的数据集，例如让我们说*n=1000*，它将需要1,000,000,000步来找到解决方案。尽量避免立方阶算法。第二个函数`square_order`具有平方阶。最内部的实现将需要*n*n*步来找到解决方案，因此该算法的顺序是*O(n^2)*。这也是不好的做法。
- en: We should attempt to achieve at least *O(log N)* complexity. We can achieve
    log *N* complexity if we continuously decrease the search space by half, for example,
    by using binary searching. There are order algorithms that achieve *O (log N)*,
    which is greatly optimized.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该尝试至少达到*O(log N)*的复杂度。如果我们不断将搜索空间减半，例如使用二分搜索，我们可以实现对数*N*的复杂度。有一些算法可以实现*O(log
    N)*的顺序，这是非常优化的。
- en: As a general rule, all algorithms following *divide and conquer* will have *O
    (log N)* complexity.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 一般规则是，所有遵循*分而治之*的算法都将具有*O(log N)*的复杂度。
- en: Finding the endian-ness of a device
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找设备的字节顺序
- en: The endian-ness of a platform refers to the way the most significant byte is
    stored on that device. This information is highly important as many algorithms
    can be optimized based on this information. Notably, the two most popular rendering
    SDKs, DirectX and OpenGL, differ in their endian-ness. The two different types
    of endian-ness are called big endian and little endian.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 平台的字节顺序是指最重要的字节在该设备上的存储方式。这些信息非常重要，因为许多算法可以根据这些信息进行优化。值得注意的是，两种最流行的渲染SDK，DirectX和OpenGL，在它们的字节顺序上有所不同。两种不同类型的字节顺序称为大端和小端。
- en: Getting ready
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 做好准备
- en: For this recipe, you will need a Windows machine with a working copy of Visual
    Studio.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，您需要一台安装有Visual Studio的Windows机器。
- en: How to do it…
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: In this recipe, we will find out how easy it is to find the endian-ness of a
    device.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将发现查找设备的字节顺序是多么容易。
- en: Open Visual Studio.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio。
- en: Create a new C++ project.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的C++项目。
- en: Select **Win32 Console Application**.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Win32控制台应用程序**。
- en: Add a source file called `Source.cpp`.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加名为`Source.cpp`的源文件。
- en: 'Add the following lines of code to it:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到其中：
- en: '[PRE3]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works…
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Little and big endian are two different ways in which multibyte data types are
    stored on different machines. In little endian machines, the least significant
    byte of the multibyte data type is stored first. On the other hand, in big endian
    machines, the most significant byte of binary representation of the multibyte
    data type is stored first.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 小端和大端是不同的多字节数据类型在不同机器上存储的方式。在小端机器上，多字节数据类型的最不重要的字节首先存储。另一方面，在大端机器上，多字节数据类型的二进制表示的最重要的字节首先存储。
- en: In the preceding program, a character pointer `c` is pointing to an integer
    `i`. Since the size of character is 1 byte when the character pointer is dereferenced,
    it will contain only the first byte of the integer. If the machine is little endian,
    then `*c` will be `1` (because the last byte is stored first), and if the machine
    is big endian then `*c` will be 0.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的程序中，一个字符指针`c`指向一个整数`i`。由于字符的大小是1个字节，当解引用字符指针时，它将只包含整数的第一个字节。如果机器是小端的，那么`*c`将是`1`（因为最后一个字节是先存储的），如果机器是大端的，那么`*c`将是0。
- en: 'Suppose the integer is stored as 4 bytes; then, a variable `x` with value 0x01234567
    will be stored as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 假设整数存储为4个字节；那么，一个值为0x01234567的变量`x`将存储如下：
- en: '![How it works…](img/Endian.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的…](img/Endian.jpg)'
- en: Most of the time, a compiler takes care of endian-ness; however, endian-ness
    becomes an issue in network programming if we are sending data from a little endian
    machine to a big endian machine. Also, it becomes an issue if we switch our rendering
    pipeline from DirectX to OpenGL.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，编译器会处理字节顺序；但是，如果我们从小端机器发送数据到大端机器，字节顺序在网络编程中会成为一个问题。此外，如果我们将渲染管线从DirectX切换到OpenGL，也会成为一个问题。
- en: Using dynamic programming to break down a complex problem
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用动态规划来解决复杂问题
- en: Dynamic programming is a very modern way to solve problems. The process involves
    breaking a big problem into smaller chunks of problems, finding solutions for
    those chunks and repeating the process to solve the entire complex problem. It
    is a bit difficult to grasp this technique at first, but with sufficient practice
    any problem can be solved using dynamic programming. Most of the problems we will
    encounter while programming a video game will be complex. Hence, mastering this
    technique will be really useful.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 动态规划是解决问题的一种非常现代的方法。这个过程涉及将一个大问题分解成更小的问题块，找到这些问题块的解决方案，并重复这个过程来解决整个复杂问题。一开始很难掌握这种技术，但通过足够的练习，任何问题都可以用动态规划解决。我们在编程视频游戏时遇到的大多数问题都会很复杂。因此，掌握这种技术将非常有用。
- en: Getting ready
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 做好准备
- en: For this recipe, you will need a Windows machine with a working copy of Visual
    Studio.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，您需要一台安装有Visual Studio的Windows机器。
- en: How to do it…
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'In this recipe, we will find out how easy it is to use dynamic programming
    to solve a problem:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将发现使用动态规划解决问题是多么容易：
- en: Open Visual Studio.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio。
- en: Create a new C++ project.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的C++项目。
- en: Select **Win32 Console Application**.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Win32控制台应用程序**。
- en: Add a source file called `Source.cpp`.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加名为`Source.cpp`的源文件。
- en: 'Add the following lines of code to it:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到其中：
- en: '[PRE4]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How it works…
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: This is an example of the classical *knapsack* problem. This can be applied
    to many scenarios in game programming, especially for AI resource management.
    Let us consider that the total weight (sack) that the AI can carry is a constant.
    In our example, this is the total weight of the knapsack. Every item that the
    AI collects in the game has a weight and a value. The AI now needs to decide how
    to fill up his inventory/sack so that he can sell the total sack for maximum value
    and get coins.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个经典的*背包*问题的例子。这可以应用于游戏编程中的许多场景，特别是用于AI资源管理。让我们假设AI可以携带的总重量（袋子）是一个常数。在我们的例子中，这是背包的总重量。游戏中AI收集的每个物品都有重量和价值。现在AI需要决定如何填满他的库存/袋子，以便他可以以最大价值出售总袋子并获得硬币。
- en: We solve the problem by recursion by solving for every small combination of
    items (weight and value) and checking for the maximum value of the two combinations,
    and repeating the process until the total weight of the knapsack is reached.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过递归来解决问题，通过解决每个小组合的物品（重量和价值）并检查两个组合的最大值，并重复这个过程直到达到背包的总重量。
- en: Using greedy algorithms to solve problems
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用贪婪算法解决问题
- en: A greedy algorithm works by finding the optimal solution at every stage. So
    before processing the next step, it will decide its next step based on the previous
    outcome and the current needs of the application. In this way, it is better than
    dynamic programming. However, we cannot apply this principle to all problems,
    hence a greedy algorithm cannot be used for all situations.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 贪婪算法通过在每个阶段找到最优解来工作。因此，在处理下一步之前，它将根据先前的结果和应用程序当前的需求决定下一步。这样，它比动态规划更好。然而，我们不能将这个原则应用到所有问题上，因此贪婪算法不能用于所有情况。
- en: Getting ready
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To go through this recipe, you will need a machine running Windows. You also
    need to have a working copy of Visual Studio installed on your Windows machine.
    No other prerequisites are required.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个配方，你需要一台运行Windows的机器。你还需要在Windows机器上安装一个可用的Visual Studio副本。不需要其他先决条件。
- en: How to do it…
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'In this recipe, we will find out how easy it is to use greedy algorithm to
    solve a problem:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将发现使用贪婪算法解决问题有多么容易：
- en: Open Visual Studio.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio。
- en: Create a new C++ project.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的C++项目。
- en: Select **Win32 Console Application**.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Win32控制台应用程序**。
- en: Add the `Source.cpp` files.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`Source.cpp`文件。
- en: 'Add the following lines of code to it:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到其中：
- en: '[PRE5]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works…
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In this example, we have a set of start times and finish times for different
    activities. We need to find out which activities can be performed by a single
    person. We can assume that the container is already sorted based on the finish
    time. So at every pass, we check whether the current start time is greater than
    or equal to the previous finish time. Only then can we take up the task. We traverse
    the container and keep checking the same condition. Because we are checking at
    every step, this algorithm is pretty well optimized.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们有一组不同活动的开始时间和结束时间。我们需要找出哪些活动可以由一个人完成。我们可以假设容器已经根据结束时间排序。因此，在每次通过时，我们检查当前开始时间是否大于或等于前一个结束时间。只有在这种情况下我们才能接受任务。我们遍历容器并不断检查相同的条件。因为我们在每一步都在检查，所以这个算法非常优化。
- en: Using divide and conquer algorithms to solve problems
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用分治算法解决问题
- en: In general, divide and conquer is based on the following idea. The whole problem
    we want to solve may be too big to understand or solve at once. We break it up
    into smaller pieces, solve the pieces separately, and combine the separate pieces.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，分治算法基于以下思想。我们想要解决的整个问题可能太大，无法一次理解或解决。我们将它分解成较小的部分，分别解决这些部分，然后将这些独立的部分组合起来。
- en: Getting ready
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, you will need a Windows machine with a working copy of Visual
    Studio.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，你需要一台运行Windows的机器，并且安装了一个可用的Visual Studio副本。
- en: How to do it…
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'In this recipe, we will find out how easy it is to use a greedy algorithm to
    solve a problem:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将发现使用贪婪算法解决问题有多么容易：
- en: Open Visual Studio.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio。
- en: Create a new C++ project.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的C++项目。
- en: Add a source file called `Source.cpp`.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`Source.cpp`的源文件。
- en: 'Add the following lines of code to it:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到其中：
- en: '[PRE6]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works…
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'A **heap sorting** **algorithm** works by first organizing the data to be sorted
    into a special type of binary tree called a **heap**. The heap itself has, by
    definition, the largest value at the top of the tree, so the heap sorting algorithm
    must also reverse the order. It does this with the following steps:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**堆排序** **算法**的工作原理是首先将要排序的数据组织成一种特殊类型的二叉树，称为**堆**。堆本身在定义上具有树顶部的最大值，因此堆排序算法也必须颠倒顺序。它通过以下步骤实现：'
- en: Remove the topmost item (the largest) and replace it with the rightmost leaf.
    The topmost item is stored in an array.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除最顶部的物品（最大的）并用最右边的叶子替换它。最顶部的物品存储在一个数组中。
- en: Re-establish the heap.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新建立堆。
- en: Repeat steps 1 and 2 until there are no more items left in the heap. The sorted
    elements are now stored in an array.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复步骤1和2，直到堆中没有更多的物品。排序后的元素现在存储在一个数组中。
