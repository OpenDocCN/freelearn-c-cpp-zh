- en: Dealing with Processes and Threads
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理进程和线程
- en: Processes and threads are the foundations of any computation. A program is rarely
    made of just one thread or process. In this chapter, you will learn the fundamental
    recipes for dealing with threads and processes. You will also learn how easy and
    convenient it is to deal with threads compared with the **Portable Operating System
    Interface** (**POSIX**). Learning these skills is very important as part of the
    core skills of a system developer. C++ does not have the notion of *process* in
    its standard library, so the Linux native implementation will be used.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 进程和线程是任何计算的基础。一个程序很少只由一个线程或进程组成。在本章中，你将学习处理线程和进程的基本示例。你还将学习处理线程相对于**可移植操作系统接口**（**POSIX**）来说是多么容易和方便。学习这些技能是作为系统开发人员核心技能的重要部分。C++标准库中没有*进程*的概念，因此将使用Linux本地实现。
- en: 'This chapter will cover the following recipes:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下示例：
- en: Starting a new process
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动一个新进程
- en: Killing a process
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 杀死一个进程
- en: Creating a new thread
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个新线程
- en: Creating a daemon process
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个守护进程
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In order to let you try the programs immediately, we've set up a Docker image that
    has all the tools and libraries we'll need throughout the book. This is based
    on Ubuntu 19.04.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让你立即尝试这些程序，我们已经设置了一个Docker镜像，其中包含了本书中需要的所有工具和库。这是基于Ubuntu 19.04的。
- en: 'In order to set it up, follow these steps:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了设置它，按照以下步骤：
- en: Download and install Docker Engine from [www.docker.com](https://www.docker.com/).
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[www.docker.com](https://www.docker.com/)下载并安装Docker Engine。
- en: 'Pull the image from Docker Hub by running the following command: `docker pull
    kasperondocker/system_programming_cookbook:latest`.'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令从Docker Hub拉取镜像：`docker pull kasperondocker/system_programming_cookbook:latest`。
- en: 'The image should now be available. Type in the following command to view the
    image: `docker images`.'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 镜像现在应该可用。输入以下命令查看镜像：`docker images`。
- en: 'You should have at least this image now: `kasperondocker/system_programming_cookbook`.'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你应该至少有这个镜像：`kasperondocker/system_programming_cookbook`。
- en: Run the Docker image with an interactive shell, with the help of the following
    command: `docker run -it --cap-add sys_ptrace kasperondocker/system_programming_cookbook:latest /bin/bash`.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令以交互式shell运行Docker镜像：`docker run -it --cap-add sys_ptrace kasperondocker/system_programming_cookbook:latest
    /bin/bash`。
- en: The shell on the running container is now available. Type in `root@39a5a8934370/#
    cd /BOOK/` to get all the programs developed, by chapters.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正在运行的容器上的shell现在可用。输入`root@39a5a8934370/# cd /BOOK/`以获取所有按章节开发的程序。
- en: The `--cap-add sys_ptrace` argument is needed to allow the **GNU Project Debugger**
    (**GDB**) in the Docker container to set breakpoints, which, by default, Docker
    does not allow.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 需要`--cap-add sys_ptrace`参数来允许Docker容器中的**GNU项目调试器**（**GDB**）设置断点，默认情况下Docker不允许。
- en: '**Disclaimer**: The C++20 standard has been approved (that is, technically
    finalized) by WG21 in a meeting in Prague at the end of February. This means that
    the GCC compiler version that this book uses, 8.3.0, does not include (or has
    very, very limited support for) the new and cool C++20 features. For this reason,
    the Docker image does not include the C++20 recipe code. GCC keeps the development
    of the newest features in branches (you have to use appropriate flags for that,
    for example, `-std=c++2a`); therefore, you are encouraged to experiment with them
    by yourself. So, clone and explore the GCC contracts and module branches and have
    fun.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**免责声明**：C++20标准已经在二月底的布拉格会议上由WG21批准（即技术上完成）。这意味着本书使用的GCC编译器版本8.3.0不包括（或者对C++20的新功能支持非常有限）。因此，Docker镜像不包括C++20示例代码。GCC将最新功能的开发保留在分支中（你必须使用适当的标志，例如`-std=c++2a`）；因此，鼓励你自己尝试。所以，克隆并探索GCC合同和模块分支，玩得开心。'
- en: Starting a new process
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动一个新进程
- en: This recipe will show how to start a new process programmatically. The C++ standard
    does not include any support for processes, so the Linux native implementation
    will be used. Being able to manage processes in a program is an important skill,
    and this recipe will teach you the fundamental concepts of processes, the **process
    identifier** (**PID**), the parent PID, and the system calls needed.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例将展示如何通过程序启动一个新的进程。C++标准不包括对进程的任何支持，因此将使用Linux本地实现。能够在程序中管理进程是一项重要的技能，这个示例将教会你进程的基本概念，**进程标识符**（**PID**），父PID和所需的系统调用。
- en: How to do it...
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'This recipe will show how to start a child process and how to make the parent
    process wait for the child to finish by using Linux system calls. Two different
    techniques shall be shown: the first, where the parent just forks the child; and
    the second, where the child process uses the `execl` system call to run an application.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例将展示如何启动一个子进程，以及如何通过使用Linux系统调用使父进程等待子进程完成。将展示两种不同的技术：第一种是父进程只fork子进程；第二种是子进程使用`execl`系统调用运行一个应用程序。
- en: An alternative option to system calls is to use an external library (or framework),
    such as the **Boost** library.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 系统调用的另一种选择是使用外部库（或框架），比如**Boost**库。
- en: 'First, type the program in a new file called `process_01.cpp`:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在一个名为`process_01.cpp`的新文件中输入程序：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We have to consider the case that a child might not be forked, so we need to
    write this part:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们必须考虑一个子进程可能没有被fork的情况，所以我们需要写这部分：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This branch is a happy case, where the parent can fork its child correctly.
    The child, here, just prints its PID to the standard output:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个分支是一个快乐的情况，父进程可以正确地fork它的子进程。这里的子进程只是将它的PID打印到标准输出：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, we have to make the parent wait for the child process to finish:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们必须让父进程等待子进程完成：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now, let's develop the `fork-exec` version of the previous program.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开发前一个程序的`fork-exec`版本。
- en: 'First, type the program in a new file called `process_02.cpp`:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在一个名为`process_02.cpp`的新文件中输入程序：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The following code block shows the child section running `ls -l` with `execl`*: *
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码块显示了使用`execl`*运行`ls -l`的子部分：*
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The next section will describe the details of the two different approaches (`fork`
    versus `fork-exec`)*.*
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将描述两种不同方法（`fork`与`fork-exec`）的详细信息。
- en: How it works...
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Let''s analyze the two preceding examples:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析前面的两个例子：
- en: 'The `fork` system call: By compiling `g++ process_01.cpp` and running `./a.out`,
    the output would be as follows:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`fork`系统调用：通过编译`g++ process_01.cpp`并运行`./a.out`，输出将如下所示：'
- en: '![](img/ee5c3fb9-61b9-4ed8-a7c1-ba0ba262c4d8.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ee5c3fb9-61b9-4ed8-a7c1-ba0ba262c4d8.png)'
- en: The program, by calling `fork`, creates a copy of the calling process. This
    means that the two processes have the same code and, although they are two completely
    different processes, the code base will be the same. The user has to hook the
    child code in the `else if (child == 0)`  section. The parent, eventually, will
    have to wait for the child to finish its task with the `wait(&status);` call.
    Another alternative is the `waitpid (123, &status, WNOHANG);` call, which waits
    for a specific PID (or waits for all the child processes if the first parameter
    is `-1`). `WNOHANG` makes `waitpid` immediately return, even if the status of
    a child is not immediately available.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用`fork`，程序创建了调用进程的副本。这意味着这两个进程具有相同的代码，尽管它们是两个完全不同的进程，但代码库将是相同的。用户必须在`else
    if (child == 0)`部分中挂接子代码。最终，父进程将不得不等待子进程完成任务，使用`wait(&status);`调用。另一种选择是`waitpid
    (123, &status, WNOHANG);`调用，它等待特定的PID（或者如果第一个参数是`-1`，则等待所有子进程）。`WNOHANG`使`waitpid`立即返回，即使子进程的状态不可用。
- en: What happens if the parent process does not wait for the child to finish? That
    is, what happens is there is no `wait(&status);` call? Technically, the parent
    will finish, and the child, still running, will become a **zombie**. This was
    a huge problem in the Linux kernel before version 2.6 as the zombie processes
    stayed in the system until they were *waited* for. The child's processes are now
    adopted by the `init` process (which has a PID of `1`), which, periodically, waits
    for children who can die.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果父进程不等待子进程完成会发生什么？也就是说，如果没有`wait(&status);`调用会发生什么？从技术上讲，父进程将完成，而仍在运行的子进程将成为**僵尸**。这在Linux内核2.6版本之前是一个巨大的问题，因为僵尸进程会一直停留在系统中，直到它们被*等待*。子进程现在由`init`进程（其PID为`1`）接管，后者定期等待可能会死亡的子进程。
- en: 'The `fork-exec` system call:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`fork-exec`系统调用：'
- en: '![](img/ba51686a-cefb-4c91-9f71-5b4a93a1fc55.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ba51686a-cefb-4c91-9f71-5b4a93a1fc55.png)'
- en: The most common way of creating processes is the `fork`/`exec` combination.
    As we've seen, `fork` creates a completely new process with its own PID, but now,
    the `else if (child == 0)` section executes an external process, which has a different
    code base. This example just calls the `ls -l` command to list files and directories,
    but a developer can put any executable file here.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 创建进程的最常见方法是`fork`/`exec`组合。正如我们所见，`fork`创建一个完全新的进程，具有自己的PID，但现在，`else if (child
    == 0)`部分执行一个外部进程，该进程具有不同的代码库。这个例子只是调用`ls -l`命令来列出文件和目录，但开发人员可以在这里放置任何可执行文件。
- en: There's more...
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Why a process should be used instead of a thread is an important aspect to
    consider. The answer depends, but in general, the following aspects should be
    considered:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么应该使用进程而不是线程是一个重要的方面需要考虑。答案取决于情况，但一般来说，应该考虑以下方面：
- en: A thread runs in the same memory space of the process that launched it. This
    aspect has both pros and cons. The main implication is that if a thread crashes,
    the whole application crashes.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线程在启动它的进程的相同内存空间中运行。这一方面既有利也有弊。主要的含义是，如果一个线程崩溃，整个应用程序都会崩溃。
- en: Communication between threads is much faster than interprocess communications.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线程之间的通信比进程间通信要快得多。
- en: A process can be spawned with lower privileges (through `setrlimit`) to limit
    the resources available to untrusted code.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个进程可以通过`setrlimit`以较低的权限生成，以限制不受信任的代码可用的资源。
- en: A program designed in processes is more segregated than one designed in threads.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在进程中设计的程序比在线程中设计的程序更分离。
- en: 'There are many variations to the `fork`/`execl`/`wait` calls seen in this recipe.
    The `man pages` offer full comprehensive documentation to the whole family of
    calls. The following screenshot refers to `man execl`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个步骤中看到的`fork`/`execl`/`wait`调用有许多变体。`man pages`提供了对整个调用系列的全面文档。以下屏幕截图是关于`man
    execl`的：
- en: '![](img/67bf3f79-e515-41b1-9a1a-779d804c909d.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/67bf3f79-e515-41b1-9a1a-779d804c909d.png)'
- en: See also
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: See [Chapter 1](c3cda38c-220e-4aae-89c6-c381df46daec.xhtml), *Getting Started
    with System Programming*, for a refresher on `man pages` and Linux in general.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[第1章](c3cda38c-220e-4aae-89c6-c381df46daec.xhtml)，*开始系统编程*，以便了解`man pages`和Linux的基础知识。
- en: Killing a process
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 杀死一个进程
- en: In the previous recipe, we've seen two ways to start a new process where the
    parent always waits for their children to finish the task. This is not always
    the case. Sometimes, a parent should be able to kill the child process. In this
    recipe, we will see an example of how to do that.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个步骤中，我们已经看到了启动新进程的两种方式，其中父进程总是等待子进程完成任务。这并不总是这样。有时，父进程应该能够杀死子进程。在这个步骤中，我们将看到如何做到这一点的一个例子。
- en: Getting ready
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 做好准备
- en: It's important to go through the *Starting a new process *recipe as a prerequisite.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 作为先决条件，重要的是要通过*启动新进程*的步骤。
- en: How to do it...
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In this section, we create a program where a parent process forks its child
    process, the child process will do an infinite loop, and the parent kills it:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们创建一个程序，其中父进程fork其子进程，子进程将执行一个无限循环，父进程将杀死它：
- en: 'Let''s develop the child program that will be killed by the parent:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们开发将被父进程杀死的子程序：
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, we have to develop the parent program (`process_03.cpp` in the `/BOOK/Chapter03`
    folder):'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们必须开发父程序（`/BOOK/Chapter03`文件夹中的`process_03.cpp`）：
- en: '[PRE7]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, in the child section of the parent program, we start the child program
    developed in the previous step:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在父程序的子部分中，我们启动了在上一步中开发的子程序：
- en: '[PRE8]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the parent section (`else` section) of the parent program, we have to kill
    the child process and check that it is correctly killed:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在父程序的父节（`else`部分）中，我们必须杀死子进程并检查它是否被正确杀死：
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We've seen both the parent and the child program, with the parent killing the
    child process. In the next section, we'll learn the mechanics of these programs.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了父程序和子程序，父程序杀死了子进程。在下一节中，我们将学习这些程序的机制。
- en: How it works...
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Before all this, we have to compile both the child and parent programs—`g++
    process_03.cpp` and `g++ -o child.out process_04.cpp`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这之前，我们需要编译子程序和父程序——`g++ process_03.cpp`和`g++ -o child.out process_04.cpp`。
- en: 'When compiling `process_04.cpp`, we have to specify `-o child.out` as needed
    by the parent process (with the process name as `a.out`*)*. By running it, the
    output produced is as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在编译`process_04.cpp`时，我们必须指定`-o child.out`，这是父进程所需的（进程名为`a.out`）。通过运行它，产生的输出如下：
- en: '![](img/93a1d294-77bb-4e04-b466-55e24149172d.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/93a1d294-77bb-4e04-b466-55e24149172d.png)'
- en: The execution shows that the child process with `PID = 218` is correctly killed
    by the parent process.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 执行显示，PID为218的子进程被父进程正确杀死。
- en: 'The code in this recipe is just a variation of the *Starting a new process* recipe.
    The difference is that now, the parent process, as part of its elaboration, kills
    the child process `int status = kill (child, 9);`. The `kill` system call accepts
    as the first parameter the PID of the process to kill, and, as the second parameter,
    the signal to send to the child process. The accepted signals are as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程中的代码只是*启动一个新进程*教程的变体。不同之处在于现在，父进程在其编制的一部分中杀死子进程`int status = kill (child,
    9);`。`kill`系统调用接受要杀死的进程的PID作为第一个参数，作为第二个参数的是要发送给子进程的信号。接受的信号如下：
- en: '`1` = `HUP` (hangup)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1` = `HUP`（挂断）'
- en: '`2` = `INT` (interrupt)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`2` = `INT`（中断）'
- en: '`3` = `QUIT` (quit)'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`3` = `QUIT`（退出）'
- en: '`6` = `ABRT` (abort)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`6` = `ABRT`（中止）'
- en: '`9` = `KILL` (non-catchable, non-ignorable kill)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`9` = `KILL`（不可捕获，不可忽略的终止）'
- en: '`14` = `ALRM` (alarm clock)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`14` = `ALRM`（闹钟）'
- en: '`15` = `TERM` (software termination signal)'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`15` = `TERM`（软件终止信号）'
- en: '`man 2 kill`, the `kill` system call, sends a signal to a process. On success,
    return `0`; otherwise, return `-1`. You need to include `#include <sys/types.h>` and
    `#include <signal.h>` to use it.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`man 2 kill`，`kill`系统调用，向进程发送信号。成功时返回`0`；否则返回`-1`。你需要包含`#include <sys/types.h>`和`#include
    <signal.h>`来使用它。'
- en: There's more...
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In the *Understanding concurrency* recipe in [Chapter 2](1bf083f4-9d12-4b2e-bf5c-35a2e3d99c36.xhtml),
    *Revisiting C++*, we offer two alternative solutions (and advocate them for the
    nature of this book) based on `std::thread` and `std::async`, if possible. The
    next recipe also offers a concrete example of `std::thread` use.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](1bf083f4-9d12-4b2e-bf5c-35a2e3d99c36.xhtml)的*理解并发性*教程中，我们提供了两种基于`std::thread`和`std::async`的替代解决方案（并且鼓励使用它们），如果可能的话。下一个教程还提供了`std::thread`使用的具体示例。
- en: Creating a new thread
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新线程
- en: Processes are not the only way of structuring a software system; a lightweight
    alternative is to use threads. This recipe shows how to create and manage threads
    using the C++ standard library. We've seen that the main advantages of using the
    C++ standard library are its portability and the fact that it's not dependent
    on external libraries (for example, Boost).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 进程并不是构建软件系统的唯一方式；一个轻量级的替代方案是使用线程。这个教程展示了如何使用C++标准库创建和管理线程。我们已经知道使用C++标准库的主要优势是它的可移植性和不依赖外部库（例如Boost）。
- en: How to do it...
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: The code we'll write will be the concurrent version of summing up a large vector
    of integers. The vector is split into two parts; each thread calculates the sum
    of its part, and the main thread shows the result.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将编写的代码将是对大整数向量求和的并发版本。向量被分成两部分；每个线程计算其部分的总和，主线程显示结果。
- en: 'Let''s define a vector of 100,000 integers, and generate random numbers in
    the `main` method:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们定义一个包含100,000个整数的向量，并在`main`方法中生成随机数：
- en: '[PRE10]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, start the first thread, passing the first 50,000 integers:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，启动第一个线程，传递前50,000个整数：
- en: '[PRE11]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then, start the second thread, passing the second 50,000 integers:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，启动第二个线程，传递第二个50,000个整数：
- en: '[PRE12]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Wait for the results from the two threads:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待两个线程的结果：
- en: '[PRE13]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The next section explains the dynamics.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节解释了动态。
- en: How it works...
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'By compiling the program with `g++ thread_01.cpp -lpthread` and executing it,
    the output is as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`g++ thread_01.cpp -lpthread`编译程序并执行它，输出如下：
- en: '![](img/49847d80-39be-498e-864d-f9653ab3426d.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/49847d80-39be-498e-864d-f9653ab3426d.png)'
- en: In *step 1*,  we defined the `threadFunction` method, which is the basic thread
    unit that will take care of summing up from `start` to `end` the elements in `speeds`,
    saving the result in the `res` output variable.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤1*中，我们定义了`threadFunction`方法，这是基本的线程单元，负责从`start`到`end`对`speeds`中的元素求和，并将结果保存在`res`输出变量中。
- en: In s*tep 2* and *step 3*, we started two threads to do the calculation for the
    first 50,000 items for the `t1` thread and the second 50,000 items for the `t2` thread. 
    These two threads ran concurrently, so we needed to wait for them to finish to
    do this. In *step 4*, we waited for the `th1` and `th2` results to be completed,
    summed up the two results—`th1Results` and `th2Results`— and printed them in the
    standard output (`stdout`).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤2*和*步骤3*中，我们启动了两个线程来计算`t1`线程的前50,000个项目的计算和第二个`t2`线程的50,000个项目。这两个线程并发运行，所以我们需要等待它们完成。在*步骤4*中，我们等待`th1`和`th2`的结果完成，将两个结果—`th1Results`和`th2Results`—相加，并将它们打印在标准输出（`stdout`）中。
- en: There's more...
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The *Starting a new process* recipe showed how to create a process, and in which
    circumstances a process suits the solution. One important aspect worth highlighting
    is that a thread runs in the **same address space** of the process that created
    it. Although threads are still a nice way of structuring a system software in
    a more independent (runnable) module, if a thread crashes (due to a segmentation
    fault, or if **`terminate` **is somehow called, among many others), the whole
    application crashes.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '*启动一个新进程*食谱展示了如何创建一个进程，以及在哪些情况下进程适合解决方案。一个值得强调的重要方面是，线程在创建它的进程的**相同地址空间**中运行。尽管线程仍然是一种在更独立（可运行）模块中构建系统软件的好方法，但如果线程崩溃（由于段错误，或者如果某种原因调用了**`terminate`**等），整个应用程序都会崩溃。'
- en: On the positive side, the ease of communication among threads, as we've seen
    in the preceding code, is extremely simple and efficient. Furthermore, threads
    share the **static** and the **heap** memorywith each other, and with the process
    that created them.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 从积极的一面来看，正如我们在前面的代码中看到的，线程之间的通信非常简单高效。此外，线程彼此之间，以及创建它们的进程，共享**静态**和**堆**内存。
- en: The code in this recipe, although simple, has shown how a task (sum of a large
    array) can be executed concurrently. As a side note, a multithreaded application
    is worthless if the algorithm is not designed to be run concurrently—that is,
    if there are dependencies among threads.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个食谱中的代码很简单，但它展示了如何并发执行一个任务（大数组的总和）。值得一提的是，如果算法没有设计为并发运行，也就是说，如果线程之间存在依赖关系，那么多线程应用程序就毫无价值。
- en: It's important to note in this context that if the two threads were to run on
    two processors at the same time, we'd use the word **parallel**. We don't have
    this guarantee, in this case.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，重要的是要注意，如果两个线程同时在两个处理器上运行，我们会使用**并行**这个词。在这种情况下，我们没有这个保证。
- en: We've used `std::thread` from the C++ standard library, but the same example
    can be written using `std::async`. [Chapter 2](1bf083f4-9d12-4b2e-bf5c-35a2e3d99c36.xhtml), *Revisiting
    C++*, shows an example of both. You are invited to rewrite this recipe's code
    using the second method.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了C++标准库中的`std::thread`，但是同样的例子也可以使用`std::async`来编写。《第2章》《重温C++》展示了两种方法的例子。您可以尝试使用第二种方法重写这个食谱的代码。
- en: See also
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: In the *Understanding concurrency* recipe in [Chapter 2](1bf083f4-9d12-4b2e-bf5c-35a2e3d99c36.xhtml), *Revisiting
    C++*, there is an introduction to the concurrency topic with a recipe that includes
    both `std::thread` and `std::async`. You are also invited to read the section
    dedicated to threads in *Effective Modern C++* by Scott Meyers, and *The C++ Programming
    Language* by Bjarne Stroustrup.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在《第2章》《重温C++》中的*理解并发*食谱中，介绍了一个包括`std::thread`和`std::async`的并发主题的食谱。您还可以阅读Scott
    Meyers的《Effective Modern C++》和Bjarne Stroustrup的《C++程序设计语言》中专门介绍线程的部分。
- en: Creating a daemon process
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建守护进程
- en: System programming is really about dealing closely with operating system resources,
    creating processes, threads, releasing resources, and much more. There are cases
    where we need a process to run *indefinitely;* that is, a process first offers
    some services or manages a resource, and then it keeps running all the time. A
    process that runs *indefinitely in the background* is called a **daemon**. This
    recipe will show how a daemon could be spawned programmatically.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 系统编程实际上是与操作系统资源密切打交道，创建进程、线程、释放资源等等。有些情况下，我们需要一个进程*无限期地*运行；也就是说，一个进程首先提供一些服务或管理资源，然后一直运行下去。在后台*无限期运行*的进程称为**守护进程**。这个食谱将展示如何以编程方式生成一个守护进程。
- en: How to do it...
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤如下...
- en: As mentioned, a daemon is a process that runs indefinitely. A process, in order
    to be classified as a daemon*,* must have some well-defined properties that will
    be shown in this recipe with a program.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，守护进程是一个无限期运行的进程。为了被分类为*守护进程*，一个进程必须具有一些明确定义的属性，这将在这个食谱中用一个程序来展示。
- en: 'Type the following code to reset the initial access permission of the child
    process by calling the `umask` system call:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下代码通过调用`umask`系统调用重置子进程的初始访问权限：
- en: '[PRE14]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Type the code to fork for a child:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入代码以fork一个子进程：
- en: '[PRE15]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Type the `setsid` command on the child process:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在子进程上输入`setsid`命令：
- en: '[PRE16]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Change the working directory to the child process (which is a daemon now):'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将工作目录更改为子进程（现在是一个守护进程）：
- en: '[PRE17]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Run the daemon-specific task—in this case, just sleep for `10` seconds:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行守护进程特定的任务——在这种情况下，只需睡眠`10`秒：
- en: '[PRE18]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The parent process exits after `fork`:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 父进程在`fork`后退出：
- en: '[PRE19]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The next section will explain these six points in more detail.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将更详细地解释这六点。
- en: How it works...
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'Compile the code with `g++ daemon_01.cpp` (in (`/BOOK/Chapter03`) folder of
    the Docker image) and run it. The output is as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`g++ daemon_01.cpp`（在Docker镜像的`/BOOK/Chapter03`文件夹中）编译代码并运行。输出如下：
- en: '![](img/d3d2b3b2-859c-41b4-a28e-75a75e9411ee.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d3d2b3b2-859c-41b4-a28e-75a75e9411ee.png)'
- en: 'When we run a process on a shell, the Terminal waits for the children to finish
    before being ready for another command. We can run the command with the `&` symbol (for
    example, `ls -l &`), and the shell will prompt the Terminal for another command.
    Please note that the child process will still be in the same session as the parent
    process. For a process to be a daemon, the following rules should be applied (numbers *2*
    and *3* are mandatory; the others are optional):'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在shell上运行一个进程时，终端会等待子进程完成后才准备好接受另一个命令。我们可以使用`&`符号运行命令（例如，`ls -l &`），shell会提示终端输入另一个命令。请注意，子进程仍然在与父进程相同的会话中。要使一个进程成为守护进程，应该遵循以下规则（*2*和*3*是强制的；其他是可选的）：
- en: '**Call `umask` with parameter `0`** (`umask(0)`): When a parent creates a child
    process, the file mode creation mask is inherited (that is, the child process
    will inherit the initial access permission of the parent). We want to make sure
    we reset them.'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用参数`0`调用`umask`（`umask(0)`）：当父进程创建子进程时，文件模式创建掩码会被继承（也就是说，子进程将继承父进程的初始访问权限）。我们要确保重置它们。
- en: '**Have the parent exit after the fork**: In the preceding code, after the parent
    has created the child process, it returns.'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在fork后使父进程退出**：在前面的代码中，父进程创建了子进程后返回。'
- en: '**Call** `setsid`. This does three things:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**调用** `setsid`。这做了三件事：'
- en: The child process becomes the leader of a newly created session.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子进程成为一个新创建会话的领导者。
- en: It becomes the leader of a new process group.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它成为一个新的进程组的领导者。
- en: It gets disassociated from its controlling Terminal.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它与其控制终端解除关联。
- en: '**Change working directory**: The parent process might run in a temporary (or
    mounted) folder that might not exist for long. It''s a good practice to set the
    current folder to meet the long-term expectations of the daemon process.'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**更改工作目录**：父进程可能在一个临时（或挂载的）文件夹中运行，这个文件夹可能不会长时间存在。将当前文件夹设置为满足守护进程的长期期望是一个好习惯。'
- en: '**Logging**: Since the daemon service is not associated with any Terminal device
    anymore, it is a good practice to redirect the standard input, output, and error
    to `/dev/null`.'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**日志记录**：由于守护服务不再与任何终端设备相关联，将标准输入、输出和错误重定向到`/dev/null`是一个好习惯。'
- en: There's more...
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: A process, as seen so far, has a PID as its unique identifier. It also belongs
    to a group that has a **process** **group ID** (**PGID**). A process group is
    a collection of one or more processes. All the processes in the same group can
    receive signals from the same Terminal. Each group has a leader, and the PGID
    has the same value as the leader's PID.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，一个进程有一个PID作为其唯一标识符。它还属于一个具有**进程组ID**（**PGID**）的组。进程组是一个或多个进程的集合。同一组中的所有进程可以从同一个终端接收信号。每个组都有一个领导者，PGID的值与领导者的PID相同。
- en: A session is a collection of one or more groups. This recipe showed that a new
    session can be created by calling the `setsid` method.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 一个会话是一个或多个进程组的集合。这个示例表明可以通过调用`setsid`方法创建一个新的会话。
- en: 'A session can have a (single) controlling Terminal. The `ps -efj` command shows
    all the processes running with the `PID`, `PPID`, and `PGID`, and the controlling
    Terminal (`TTY`) info for each process:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 一个会话可以有一个（单一的）控制终端。`ps -efj`命令显示所有使用`PID`、`PPID`和`PGID`以及每个进程的控制终端（`TTY`）信息的进程：
- en: '![](img/68f40447-735e-48ba-a16b-4a44ac8be662.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/68f40447-735e-48ba-a16b-4a44ac8be662.png)'
- en: The output shows that the `./a.out` daemon has `PID = 19` and it's a leader
    for the group (`PGID = 19`), and it is not attached to any controlling Terminal
    (`TTY= ?`).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示`./a.out`守护进程的`PID = 19`，它是组的领导者（`PGID = 19`），并且它没有连接到任何控制终端（`TTY= ?`）。
- en: See also
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: '*Chapter 13* of *Advanced Programming in the UNIX*®* Environment* by W.R. Stevens
    is dedicated to the daemon processes.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: W.R. Stevens的*UNIX环境高级编程*第13章专门讨论了守护进程。
