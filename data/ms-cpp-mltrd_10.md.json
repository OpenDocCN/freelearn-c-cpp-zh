["```cpp\n    $ sudo apt-get install opencl-headers\n\n```", "```cpp\n    $ pacman -S mingw64/mingw-w64-x86_64-opencl-headers\n\n```", "```cpp\n    mingw32/mingw-w64-i686-opencl-headers \n\n```", "```cpp\n// This kernel computes FFT of length 1024\\.  \n// The 1024 length FFT is decomposed into calls to a radix 16 function,  \n// another radix 16 function and then a radix 4 function\n __kernel void fft1D_1024 (__global float2 *in,  \n                     __global float2 *out,  \n                     __local float *sMemx,  \n                     __local float *sMemy) {\n          int tid = get_local_id(0);\n          int blockIdx = get_group_id(0) * 1024 + tid;\n          float2 data[16];\n\n          // starting index of data to/from global memory\n          in = in + blockIdx;  out = out + blockIdx;\n\n          globalLoads(data, in, 64); // coalesced global reads\n          fftRadix16Pass(data);      // in-place radix-16 pass\n          twiddleFactorMul(data, tid, 1024, 0);\n\n          // local shuffle using local memory\n          localShuffle(data, sMemx, sMemy, tid, (((tid & 15) * 65) + (tid >> 4)));\n          fftRadix16Pass(data);               // in-place radix-16 pass\n          twiddleFactorMul(data, tid, 64, 4); // twiddle factor multiplication\n\n          localShuffle(data, sMemx, sMemy, tid, (((tid >> 4) * 64) + (tid & 15)));\n\n          // four radix-4 function calls\n          fftRadix4Pass(data);      // radix-4 function number 1\n          fftRadix4Pass(data + 4);  // radix-4 function number 2\n          fftRadix4Pass(data + 8);  // radix-4 function number 3\n          fftRadix4Pass(data + 12); // radix-4 function number 4\n\n          // coalesced global writes\n    globalStores(data, out, 64);\n } \n\n```", "```cpp\n#include <cstdio>\n #include <ctime>\n #include \"CL\\opencl.h\"\n\n #define NUM_ENTRIES 1024\n\n int main() { // (int argc, const char * argv[]) {\n    const char* KernelSource = \"fft1D_1024_kernel_src.cl\"; \n\n```", "```cpp\n          const cl_uint num = 1;\n    clGetDeviceIDs(0, CL_DEVICE_TYPE_GPU, 0, 0, (cl_uint*) num); \n\n   cl_device_id devices[1];\n    clGetDeviceIDs(0, CL_DEVICE_TYPE_GPU, num, devices, 0);\n\n```", "```cpp\n    cl_context context = clCreateContextFromType(0, CL_DEVICE_TYPE_GPU,  \n                                                   0, 0, 0); \n\n```", "```cpp\n    clGetDeviceIDs(0, CL_DEVICE_TYPE_DEFAULT, 1, devices, 0);\n    cl_command_queue queue = clCreateCommandQueue(context, devices[0], 0, 0); \n\n```", "```cpp\n    cl_mem memobjs[] = { clCreateBuffer(context, CL_MEM_READ_ONLY | CL_MEM_COPY_HOST_PTR, sizeof(float) * 2 * NUM_ENTRIES, 0, 0),              \n   clCreateBuffer(context, CL_MEM_READ_WRITE, sizeof(float) * 2 * NUM_ENTRIES, 0, 0) }; \n\n```", "```cpp\n    cl_program program = clCreateProgramWithSource(context, 1, (const char **)& KernelSource, 0, 0); \n\n```", "```cpp\n    clBuildProgram(program, 0, 0, 0, 0, 0); \n\n```", "```cpp\n   cl_kernel kernel = clCreateKernel(program, \"fft1D_1024\", 0); \n\n```", "```cpp\n    size_t local_work_size[1] = { 256 };\n\n    clSetKernelArg(kernel, 0, sizeof(cl_mem), (void *) &memobjs[0]);\n    clSetKernelArg(kernel, 1, sizeof(cl_mem), (void *) &memobjs[1]);\n    clSetKernelArg(kernel, 2, sizeof(float) * (local_work_size[0] + 1) * 16, 0);\n    clSetKernelArg(kernel, 3, sizeof(float) * (local_work_size[0] + 1) * 16, 0); \n\n```", "```cpp\n    size_t global_work_size[1] = { 256 };\n          global_work_size[0] = NUM_ENTRIES;\n    local_work_size[0]  =  64;  // Nvidia: 192 or 256\n    clEnqueueNDRangeKernel(queue, kernel, 1, 0, global_work_size, local_work_size, 0, 0, 0); \n\n```", "```cpp\n          cl_mem C = clCreateBuffer(context, CL_MEM_WRITE_ONLY, (size), 0, &ret);\n                      cl_int ret = clEnqueueReadBuffer(queue, memobjs[1], CL_TRUE, 0, sizeof(float) * 2 * NUM_ENTRIES, C, 0, 0, 0); \n\n```", "```cpp\n    clReleaseMemObject(memobjs[0]);\n    clReleaseMemObject(memobjs[1]); \n   clReleaseCommandQueue(queue); \n   clReleaseKernel(kernel); \n   clReleaseProgram(program); \n   clReleaseContext(context); \n   free(C);\n } \n\n```"]