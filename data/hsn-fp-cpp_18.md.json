["```cpp\n#include <range/v3/all.hpp>\n```", "```cpp\n#include <ranges>\n```", "```cpp\nnumbers | ranges::view::filter(isEven) | ranges::view::filter(isMultipleOf3)\n```", "```cpp\nnumbers |= action::sort | action::take(5);\n```", "```cpp\nint sumOfEvenNumbersStructured(const list<int>& numbers){\n    int sum = 0;\n    for(auto number : numbers){\n        if(number % 2 == 0) sum += number;\n    }\n    return sum;\n};\n```", "```cpp\nTEST_CASE(\"Run events and get the user store\"){\n    list<int> numbers{1, 2, 5, 6, 10, 12, 17, 25};\n\n    CHECK_EQ(30, sumOfEvenNumbersStructured(numbers));\n}\n```", "```cpp\nauto isEven = [](const auto number){\n    return number % 2 == 0;\n};\n```", "```cpp\nauto pickNumbers  = [](const auto& numbers, auto predicate){\n    list<int> pickedNumbers;\n    copy_if(numbers.begin(), numbers.end(), \n        back_inserter(pickedNumbers), predicate);\n    return pickedNumbers;\n};\n```", "```cpp\nauto sum = [](const auto& numbers){\n    return accumulate(numbers.begin(), numbers.end(), 0);\n};\n```", "```cpp\nauto sumOfEvenNumbersFunctional = [](const auto& numbers){\n    return sum(pickNumbers(numbers, isEven));\n};\n```", "```cpp\nTEST_CASE(\"Run events and get the user store\"){\n    list<int> numbers{1, 2, 5, 6, 10, 12, 17, 25};\n\n    CHECK_EQ(30, sumOfEvenNumbersStructured(numbers));\n    CHECK_EQ(30, sumOfEvenNumbersFunctional(numbers));\n}\n```", "```cpp\nranges::view::filter(numbers, isEven)\n```", "```cpp\nauto isMultipleOf3 = [](const auto number){\n    return number % 3 == 0;\n};\n```", "```cpp\nnumbers | ranges::view::filter(isEven) | ranges::view::filter(isMultipleOf3)\n```", "```cpp\nauto sumOfEvenNumbersLazy = [](const auto& numbers){\n    return ranges::accumulate(ranges::view::\n        filter(numbers, isEven), 0);\n};\nTEST_CASE(\"Run events and get the user store\"){\n    list<int> numbers{1, 2, 5, 6, 10, 12, 17, 25};\n\n    CHECK_EQ(30, sumOfEvenNumbersLazy(numbers));\n}\n```", "```cpp\nauto sumOfMultiplesOf6 = [](const auto& numbers){\n    return ranges::accumulate(\n            numbers | ranges::view::filter(isEven) | \n                ranges::view::filter(isMultipleOf3), 0);\n};\nTEST_CASE(\"Run events and get the user store\"){\n    list<int> numbers{1, 2, 5, 6, 10, 12, 17, 25};\n\n    CHECK_EQ(18, sumOfMultiplesOf6(numbers));\n}\n```", "```cpp\nTEST_CASE(\"Sort numbers\"){\n    vector<int> numbers{1, 12, 5, 20, 2, 10, 17, 25, 4};\n    vector<int> expected{1, 2, 4, 5, 10, 12, 17, 20, 25};\n\n    numbers |= ranges::action::sort;\n\n    CHECK_EQ(expected, numbers);\n}\n```", "```cpp\nTEST_CASE(\"Sort numbers and pick unique\"){\n    vector<int> numbers{1, 1, 12, 5, 20, 2, 10, 17, 25, 4};\n    vector<int> expected{1, 2, 4, 5, 10, 12, 17, 20, 25};\n\n    numbers |= ranges::action::sort | ranges::action::unique;\n\n    CHECK_EQ(expected, numbers);\n}\n```", "```cpp\nTEST_CASE(\"Infinite series\"){\n    vector<int> values = ranges::view::ints(1) | ranges::view::take(5);\n    vector<int> expected{1, 2, 3, 4, 5};\n\n    CHECK_EQ(expected, values);\n}\n```", "```cpp\nTEST_CASE(\"Infinite series\"){\n    vector<char> values = ranges::view::iota('a') | \n        ranges::view::take(5);\n    vector<char> expected{'a', 'b', 'c', 'd', 'e'};\n\n    CHECK_EQ(expected, values);\n}\n```", "```cpp\nTEST_CASE(\"Linear distributed\"){\n    vector<int> values = ranges::view::linear_distribute(1, 10, 5);\n    vector<int> expected{1, 3, 5, 7, 10};\n\n    CHECK_EQ(expected, values);\n}\n```", "```cpp\nTEST_CASE(\"Custom generation\"){\n    using namespace ranges;\n    vector<long> expected{ 2, 2048, 2097152, 2147483648 };\n\n auto everyTenthPowerOfTwo = view::ints(1) | view::for_each([](int \n        i){ return yield_if(i % 10 == 1, pow(2, i)); });\n    vector<long> values = everyTenthPowerOfTwo | view::take(4);\n\n    CHECK_EQ(expected, values);\n}\n```", "```cpp\nTEST_CASE(\"Custom generation\"){\n    using namespace ranges;\n    vector<long> expected{ 2, 2048, 2097152, 2147483648 };\n\n auto everyTenthPowerOfTwo = view::ints(1) | view::stride(10) | \n        view::transform([](int i){ return pow(2, i); });\n    vector<long> values = everyTenthPowerOfTwo | view::take(4);\n\n    CHECK_EQ(expected, values);\n}\n```", "```cpp\nTEST_CASE(\"Generate chars\"){\n    using namespace ranges;\n\n    vector<char> chars = view::ints(32, 126) | view::sample(10) | \n        view::transform([](int asciiCode){ return char(asciiCode); });\n    string aString(chars.begin(), chars.end()); \n\n    cout << aString << endl;\n\n    CHECK_EQ(10, aString.size());\n}\n```", "```cpp\n%.0FL[cqrt\n#0bfgiluwy\n4PY]^_ahlr\n;DJLQ^bipy\n```"]