- en: Assessments
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估
- en: Chapter 1
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章
- en: The process of making an executable from the source code is called compilation.
    Compiling a C++ program is a sequence of complex tasks that results in machine
    code generation. Typically, a C++ compiler parses and analyzes the source code,
    generates intermediate code, optimizes it, and finally, generates machine code
    in a file called an object file. An interpreter, on the other hand, doesn't produce
    machine code. Instead, it executes instructions in the source code line by line.
  id: totrans-2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从源代码生成可执行文件的过程称为编译。编译C++程序是一系列复杂的任务，最终产生机器代码。通常，C++编译器解析和分析源代码，生成中间代码，对其进行优化，最后生成一个名为对象文件的机器代码文件。另一方面，解释器不会产生机器代码。相反，它逐行执行源代码中的指令。
- en: First, pre-processing, and then the compiler compiles the code by parsing it,
    performing syntax and semantic analysis, after which an intermediate code is generated.
    After optimizing the generated intermediate code, the compiler generates the final
    object file (containing machine code), which can then be linked with other object
    files.
  id: totrans-3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先是预处理，然后编译器通过解析代码、执行语法和语义分析来编译代码，然后生成中间代码。在优化生成的中间代码之后，编译器生成最终的对象文件（包含机器代码），然后可以与其他对象文件链接。
- en: A pre-processor is intended to process source files to make them ready for compilation. A
    pre-processor works with pre-processor directives, such as `#define` and `#include`. Directives
    don't represent program statements, but they are commands for the pre-processor,
    telling it what to do with the text of the source file. The compiler cannot recognize
    those directives, so whenever you use pre-processor directives in your code, the
    pre-processor resolves them accordingly before the actual compilation of the code
    begins.
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '预处理器旨在处理源文件，使其准备好进行编译。预处理器使用预处理指令，如`#define`和`#include`。指令不代表程序语句，而是预处理器的命令，告诉它如何处理源文件的文本。编译器无法识别这些指令，因此每当您在代码中使用预处理指令时，预处理器会在实际编译代码之前相应地解析它们。 '
- en: The compiler outputs an object file for each compilation unit. The task of the
    linker is to combine these object files into a single object file.
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译器为每个编译单元输出一个对象文件。链接器的任务是将这些对象文件合并成一个单一的对象文件。
- en: Libraries can be linked with the executable file either as static or dynamic
    libraries. When you link them as a static library, they become a part of the final
    executable file. A dynamically linked library should also be loaded into memory
    by the operating system to provide your program with the ability to call its functions.
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 库可以链接到可执行文件中，可以是静态库也可以是动态库。当将它们作为静态库链接时，它们将成为最终可执行文件的一部分。动态链接库也应该被操作系统加载到内存中，以便为您的程序提供调用其函数的能力。
- en: Chapter 2
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章
- en: Typically, the `main()` function has two parameters, `argc` and `argv`, where
    `argc` is the number of input arguments to the program and `argv` constitutes
    those input arguments. Very occasionally, you can see a widely supported, but
    not standardized, third argument, most commonly named `envp`. The type of `envp`
    is an array of char pointers and it holds the environment variables of the system.
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通常，`main()`函数有两个参数，`argc`和`argv`，其中`argc`是程序的输入参数数量，`argv`包含这些输入参数。很少见的是，您可能会看到一个广泛支持但未标准化的第三个参数，最常见的名称是`envp`。`envp`的类型是char指针数组，它保存系统的环境变量。
- en: The `constexpr` specifier declares that the value of the function can be evaluated
    at compile time. The same definition applies to variables as well. The name consists
    of `const` and expressions.
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`constexpr`说明符声明函数的值可以在编译时求值。相同的定义也适用于变量。名称由`const`和表达式组成。'
- en: Recursion leads to the allocation of additional space for function invocations.
    It is expensive to allocate space for the function and call compared to an iterative
    solution.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 递归导致为函数调用分配额外的空间。与迭代解决方案相比，为函数分配空间和调用的成本很高。
- en: The stack holds objects with automatic storage duration; that is, programmers
    do not concern themselves with the construction and destruction of those objects
    in memory. Typically, a stack is used for function arguments and local variables.
    The heap, on the other hand, allows new memory to be allocated during the program
    execution. However, proper deallocation of memory space is now the responsibility
    of the programmer.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 栈保存具有自动存储期的对象；也就是说，程序员不需要关心内存中这些对象的构造和销毁。通常，栈用于函数参数和局部变量。另一方面，堆允许在程序执行期间分配新的内存。然而，正确的内存空间释放现在是程序员的责任。
- en: The size of the pointer doesn't depend on the type of the pointer because a
    pointer is a value that represents an address in memory. The size of the address
    depends on the system. Usually, it's either 32 or 64 bits. Therefore, we say that
    the size of the pointer is 4 or 8 byte.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指针的大小不取决于指针的类型，因为指针是表示内存中地址的值。地址的大小取决于系统。通常是32位或64位。因此，我们说指针的大小是4或8字节。
- en: An array has a unique structure in terms of item locations. They are placed
    contiguously in memory; the second item is placed right after the first item,
    the third right after the second, and so on. Considering this feature, and also
    the fact that the array consists of elements of the same type, accessing an item
    at any position takes a constant amount of time.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数组在项目位置方面具有独特的结构。它们在内存中是连续放置的；第二个项目紧跟在第一个项目后面，第三个项目紧跟在第二个项目后面，依此类推。考虑到这一特性，以及数组由相同类型的元素组成的事实，访问任何位置的项目都需要恒定的时间。
- en: If we forget the `break` keyword in the `case` statement, the execution will
    pass to the next `case` statement without checking for its condition.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们在`case`语句中忘记了`break`关键字，执行将会转移到下一个`case`语句，而不检查其条件。
- en: For example, `operations['+'] = [](int a, int b) { return a + b; }`
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 例如，`operations['+'] = [](int a, int b) { return a + b; }`
- en: Chapter 3
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章
- en: Identity, state, and behavior.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 身份、状态和行为。
- en: When moving objects instead of copying, we omit the creation of temporary variables.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在移动对象而不是复制时，我们省略了创建临时变量。
- en: There aren't any differences between a struct and a class in C++ except the
    default access modifier. This is public for the struct, and private for the class.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在C++中，结构体和类之间没有任何区别，除了默认访问修饰符。结构体的默认访问修饰符是public，而类的默认访问修饰符是private。
- en: In the case of aggregation, the class that contains an instance or instances
    of other classes could be instantiated without the aggregate. The composition,
    on the other hand, expresses strong containment.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在聚合的情况下，包含其他类的实例或实例的类可以在没有聚合的情况下实例化。而组合则表示强的包含关系。
- en: Private inheritance hides the inherited members from the client code of the
    derived class. Protected inheritance does the same, but allows the derived classes
    in the chain to have access to those members.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 私有继承将继承的成员隐藏在派生类的客户端代码中。保护继承也是如此，但允许链中的派生类访问这些成员。
- en: Typically, an introduction of a virtual function leads to augmenting the class
    with addition data members pointing to the table of virtual functions. Usually,
    that adds up to 4 or 8 bytes of space (based on the size of the pointer) to the
    class object.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通常，引入虚函数会导致向类添加指向虚函数表的附加数据成员。通常，这会增加类对象的4或8个字节的空间（根据指针的大小）。
- en: The Singleton design pattern allows the construction of a single instance of
    the class. This is helpful in a lot of projects where we need to ensure that the
    number of instances of the classes is limited to one. For example, a database
    connection class works best if implemented as a Singleton.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单例设计模式允许构造类的单个实例。这在许多项目中非常有用，其中我们需要确保类的实例数量限制为一个。例如，如果实现为单例的数据库连接类效果最佳。
- en: Chapter 4
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章
- en: Macros are powerful tools if used in the right way. However, the following aspects
    limit the usage of macros. (1) You cannot debug macros; (2) Macro expansion can
    lead to strange side effects; (3) Macros have no namespace, so if you have a macro
    that clashes with a name used elsewhere, you get macro replacements where you
    didn't want them, and this usually leads to strange error messages; and (4) Macros
    may affect things you are not aware of. For further details, please go to [https://stackoverflow.com/questions/14041453](https://stackoverflow.com/questions/14041453).
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 宏是强大的工具，如果以正确的方式使用。然而，以下方面限制了宏的使用。(1) 你无法调试宏；(2) 宏扩展可能导致奇怪的副作用；(3) 宏没有命名空间，因此如果你的宏与其他地方使用的名称冲突，你会在不想要的地方得到宏替换，这通常会导致奇怪的错误消息；和(4)
    宏可能影响你不知道的事情。有关更多详细信息，请访问[https://stackoverflow.com/questions/14041453](https://stackoverflow.com/questions/14041453)。
- en: A class/function template refers to a kind of template used to generate template
    classes/functions. It's just a template but not a class/function, and hence the
    compiler does not generate any object code for it. A template class/function is
    an instance of a class/function template. Since it is a class/function, the corresponding
    object code is generated by the compiler.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类/函数模板是一种用于生成模板类/函数的模板。它只是一个模板，而不是一个类/函数，因此编译器不会为其生成任何对象代码。模板类/函数是类/函数模板的一个实例。由于它是一个类/函数，编译器会生成相应的对象代码。
- en: When we define a class/function template, there is a <> symbol after the `template` keyword,
    in which one or more type parameters must be given. The type parameter(s) inside
    <> is known as the template parameter list. When we instantiate a class/function
    template, all the template parameters must be replaced with their corresponding
    template arguments, which is known as a template argument list.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们定义一个类/函数模板时，在`template`关键字后面有一个<>符号，其中必须给出一个或多个类型参数。<>中的类型参数被称为模板参数列表。当我们实例化一个类/函数模板时，所有模板参数必须用相应的模板参数替换，这被称为模板参数列表。
- en: Implicit instantiation happens on demand. However, when providing library files
    (`.lib`), you have no idea what type of argument list will be used by users in
    the future, hence, you need to explicitly instantiate all potential types.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 隐式实例化是按需发生的。然而，当提供库文件（.lib）时，你不知道用户将来会使用什么类型的参数列表，因此，你需要显式实例化所有潜在的类型。
- en: '*Polymorphism* means that something exists in different forms. Specifically,
    in programming languages, polymorphism means that some functions, operations,
    or objects have several different behaviors in different contexts. In C++, there
    are two kinds of polymorphism: dynamic polymorphism and static polymorphism. Dynamic
    polymorphism allows users to determine the actual function method to be executed
    at runtime, while static polymorphism means that the actual function to call (or,
    in general, the actual code to run) is known at compile time.'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*多态*意味着某物以不同的形式存在。具体来说，在编程语言中，多态意味着一些函数、操作或对象在不同的上下文中有几种不同的行为。在C++中，有两种多态性：动态多态和静态多态。动态多态允许用户在运行时确定要执行的实际函数方法，而静态多态意味着在编译时知道要调用的实际函数（或者一般来说，要运行的实际代码）。'
- en: Function overloading means that functions are defined with the same name but
    a different set of parameters (different signatures).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 函数重载意味着使用相同的名称但不同的参数集（不同的签名）定义函数。
- en: Function overriding is the ability of the child class rewriting the virtual
    methods defined in the parent classes.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 函数重写是子类重写父类中定义的虚方法的能力。
- en: A type trait is a technique that is used to collect information regarding types. With
    its help, we can make more intelligent decisions to
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类型特征是一种用于收集有关类型信息的技术。借助它，我们可以做出更明智的决策
- en: develop high-quality optimized algorithms in generic programming. Type traits
    can be implemented by partial or full template specialization.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在通用编程中开发高质量优化的算法。类型特征可以通过部分或完全模板特化来实现。
- en: We can write an error statement in `g()`, and build the code. If an unused function
    is instantiated, the compiler will report errors, otherwise it will be built successfully.
    You can find the example code in the following files, `ch4_5_class_template_implicit_inst_v2.h`
    and `ch4_5_class_template_implicit_inst_B_v2.cpp`, at [https://github.com/PacktPublishing/Mastering-Cpp-Programming./tree/master/Chapter-4.](https://github.com/PacktPublishing/Expert-CPP/tree/master/Chapter-4)
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以在`g()`中编写一个错误语句，并构建代码。如果实例化了未使用的函数，则编译器将报告错误，否则将成功构建。您可以在以下文件中找到示例代码，`ch4_5_class_template_implicit_inst_v2.h`和`ch4_5_class_template_implicit_inst_B_v2.cpp`，位于[https://github.com/PacktPublishing/Mastering-Cpp-Programming./tree/master/Chapter-4.](https://github.com/PacktPublishing/Expert-CPP/tree/master/Chapter-4)
- en: Refer to `ch4_q7.cpp` at [https://github.com/PacktPublishing/Mastering-Cpp-Programming./tree/master/Chapter-4](https://github.com/PacktPublishing/Mastering-Cpp-Programming./tree/master/Chapter-4).
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请参考[https://github.com/PacktPublishing/Mastering-Cpp-Programming./tree/master/Chapter-4](https://github.com/PacktPublishing/Mastering-Cpp-Programming./tree/master/Chapter-4)中的`ch4_q7.cpp`。
- en: This is a laboratory exercise; no answer is required.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是一个实验练习；不需要答案。
- en: Chapter 5
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章
- en: Computer memory can be described as a single concept – the **Dynamic RAM** (**DRAM**),
    or as a combination of all the memory units that the computer contains, starting
    with the registers and cache memory, and ending with the hard drive. From the
    programmers' perspective, DRAM is of the most interest because it holds the instructions
    and data of the program running in the computer.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算机内存可以描述为一个概念 - **动态RAM**（**DRAM**），或者是计算机包含的所有内存单元的组合，从寄存器和缓存内存开始，到硬盘结束。从程序员的角度来看，DRAM是最感兴趣的，因为它保存了计算机中运行的程序的指令和数据。
- en: Virtual memory is an approach to efficiently manage the physical memory of the
    computer. Typically, the operating system incorporates virtual memory to handle
    memory accesses from programs and to efficiently allocate chunks of memory to
    particular programs.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 虚拟内存是一种有效管理计算机物理内存的方法。通常，操作系统会整合虚拟内存来处理程序的内存访问，并有效地为特定程序分配内存块。
- en: In C++, we use the `new` and `delete` operators to allocate and deallocate memory
    space.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在C++中，我们使用`new`和`delete`运算符来分配和释放内存空间。
- en: '`delete` deallocates the space allocated for a single object, while `delete[]`
    is used for dynamic arrays and frees all the elements of the array on the heap.'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`delete`用于释放为单个对象分配的空间，而`delete[]`用于动态数组，并在堆上释放数组的所有元素。'
- en: A garbage collector is a tool or a set of tools and mechanisms that provide
    automatic resource deallocation on the heap. For a garbage collector, a support
    environment is required, such as a virtual machine. C++ directly compiles into
    machine code that can be run without a support environment.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 垃圾收集器是一种工具或一组工具和机制，用于在堆上提供自动资源释放。对于垃圾收集器，需要一个支持环境，比如虚拟机。C++直接编译成可以在没有支持环境的情况下运行的机器代码。
- en: Chapter 6
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章
- en: When inserting a new element into the vector, it is placed at the already allocated
    free slot of the vector. If the size of the vector and its capacity are equal,
    this means that the vector has no free slot for the new element. In these (rare)
    cases, the vector automatically resizes itself, which involves allocating new
    memory space and copying the existing elements to that new bigger space.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在向向量中插入新元素时，它被放置在向量的已分配的空闲槽中。如果向量的大小和容量相等，则意味着向量没有空闲槽可供新元素使用。在这些（罕见）情况下，向量会自动调整大小，这涉及分配新的内存空间，并将现有元素复制到新的更大空间。
- en: When inserting an element at the front of the linked list, we only create the
    new element and update the list pointers to effectively place the new element
    in the list. Inserting a new element at the front of the vector requires all of
    the vector elements to be shifted right to free up a slot for that element.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在链表的前面插入元素时，我们只创建新元素并更新列表指针，以有效地将新元素放入列表中。在向向量的前面插入新元素时，需要将所有向量元素向右移动，以释放一个槽位给该元素。
- en: Refer to the chapter source code in GitHub.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请参考GitHub中的章节源代码。
- en: It will look like a linked list.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它看起来像一个链表。
- en: Selection sort searches for the maximum (or minimum) element and replaces the
    current one with that maximum (or minimum). Insertion sort divides the collection
    into two sections and walks through the unsorted section and places each of its
    elements in the proper slot of the sorted section.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择排序搜索最大（或最小）元素，并用该最大（或最小）元素替换当前元素。插入排序将集合分为两部分，并遍历未排序部分，并将其每个元素放入已排序部分的适当槽中。
- en: Refer to the chapter source code in GitHub.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请参考GitHub中的章节源代码。
- en: Chapter 7
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章
- en: The ranges library in C++ allows ranges of elements to be handled, manipulating
    them using view adapters, which are far more efficient because they don't store
    the entire collection as an adapter result.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: C++中的ranges库允许处理元素的范围，并使用视图适配器对其进行操作，这样更有效，因为它们不会将整个集合作为适配器结果存储。
- en: A function is pure if it doesn't modify the state, and produces the same result
    for the same input.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果函数不修改状态，并且对于相同的输入产生相同的结果，则该函数是纯的。
- en: A pure virtual function is a characteristic of a function without an implementation.
    Pure virtual functions are used to describe interface functions for derived classes.
    Pure functions in functional programming are those functions that do not modify
    the state.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 纯虚函数是没有实现的函数的特征。纯虚函数用于描述派生类的接口函数。函数式编程中的纯函数是那些不修改状态的函数。
- en: Folding (or reduction) is the process of combining a collection of values together
    to generate a reduced number of results.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 折叠（或缩减）是将一组值组合在一起以生成减少数量的结果的过程。
- en: Tail recursion allows compilers to optimize the recursive calls by omitting
    the allocation of new memory space for each recursive call.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尾递归允许编译器通过省略为每个递归调用分配新内存空间来优化递归调用。
- en: Chapter 8
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章
- en: Two operations run concurrently if their start and end times are interleaved
    at any point.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果两个操作的开始和结束时间在任何时刻交错，则它们会同时运行。
- en: Parallelism means that tasks run simultaneously, while concurrency does not
    force the tasks to run at the same time.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 并行意味着任务同时运行，而并发不强制任务同时运行。
- en: A process is the image of the program. It's a combination of program instructions
    and data loaded into the computer memory.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进程是程序的映像。它是程序指令和数据加载到计算机内存中的组合。
- en: A thread is a section of code in the scope of a process that can be scheduled
    by the operating system scheduler, while a process is the image of the running
    program.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 线程是进程范围内可以由操作系统调度程序调度的代码部分，而进程是正在运行的程序的映像。
- en: Refer to any example in the chapter.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请参考章节中的任何示例。
- en: By using double-checked locking.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用双重检查锁定。
- en: Refer to the source code for the chapter in GitHub.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请参考GitHub上该章节的源代码。
- en: C++20 introduced coroutines as an addition to the classic asynchronous functions.
    Coroutines move the background execution of the code to the next level. They allow
    a function to be paused and resumed when necessary. `co_await` is a construct
    telling the code to wait for asynchronously executing code. This means the function
    can be suspended at that point and resume its execution when a result is ready.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: C++20引入了协程作为经典异步函数的补充。协程将代码的后台执行提升到了下一个级别。它们允许在必要时暂停和恢复函数。`co_await`是一个构造，告诉代码等待异步执行的代码。这意味着函数可以在那一点被暂停，并在结果准备好时恢复执行。
- en: Chapter 9
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章
- en: Double-checked locking is a way to make the Singleton pattern work flawlessly
    in a multithreaded environment.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双重检查锁定是使单例模式在多线程环境中无缺陷地工作的一种方法。
- en: That's a way to make sure that the underlying data of the other stack won't
    get modified while we make a copy of it.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是一种确保在复制其他堆栈的基础数据时，其底层数据不会被修改的方法。
- en: An atomic operation is an indivisible operation, and atomic types leverage lower-level
    mechanisms to ensure the independent and atomic execution of instructions.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 原子操作是不可分割的操作，原子类型利用底层机制来确保指令的独立和原子执行。
- en: '`load()` and `store()` leverage low-level mechanisms to ensure that the write
    and read operations are done atomically.'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`load()`和`store()`利用低级机制来确保写入和读取操作是原子的。'
- en: Besides `load()` and `store()`, there are operations such as `exchange()`, `wait()`,
    and `notify_one()`.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除了`load()`和`store()`之外，还有诸如`exchange()`、`wait()`和`notify_one()`等操作。
- en: Chapter 10
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章
- en: TDD stands for test-driven development, and the aim is to write tests before
    the actual implementation of the project. This helps to define project requirements
    more clearly and avoid most of the bugs in the code beforehand.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: TDD代表测试驱动开发，其目的是在项目的实际实现之前编写测试。这有助于更清晰地定义项目需求，并在代码中避免大部分错误。
- en: Interaction diagrams picture the exact process of communication of the objects.
    This allows developers to have a high-level view of the actual program execution
    for any given moment.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 交互图表现了对象之间通信的确切过程。这使开发人员能够高层次地查看任何给定时刻的实际程序执行。
- en: In the case of aggregation, the class that contains an instance or instances
    of other classes could be instantiated without the aggregate. The composition,
    on the other hand, expresses the strong containment.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在聚合的情况下，包含其他类的实例或实例的类可以在没有聚合的情况下实例化。另一方面，组合表达了强包含关系。
- en: In simple terms, the Liskov substitution principle ensures that any function
    taking an object of some type T as an argument will also take an object of type
    K if K extends T.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 简而言之，里氏替换原则确保接受某种类型T对象作为参数的任何函数也将接受类型K对象，如果K扩展了T。
- en: The open-closed principle states that the class should be open for extension
    and closed for modification. In the stated example, `Animal` is open for extension,
    so it doesn't contradict the principle to inherit the `monkey` class from `Animal`.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开闭原则规定类应该对扩展开放，对修改关闭。在所述示例中，`Animal`对扩展开放，因此从`Animal`继承`monkey`类并不违反该原则。
- en: Refer to the chapter source code in GitHub.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请参考GitHub上该章节的源代码。
- en: Chapter 11
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章
- en: Overriding a private virtual function allows modification of the behavior of
    the class by keeping its public interface untouched.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 覆盖私有虚函数允许通过保持其公共接口不变来修改类的行为。
- en: It's a behavioral design pattern in which an object encapsulates an action and
    all the information required to perform the action.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是一种行为设计模式，其中对象封装了一个动作和执行该动作所需的所有信息。
- en: By sharing data with other objects as much as possible. When we have a lot of
    objects with a similar structure, sharing repeated data across objects minimizes
    the use of memory.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尽可能与其他对象共享数据。当我们有许多具有相似结构的对象时，跨对象共享重复数据可以最小化内存使用。
- en: The observer notifies subscriber objects regarding an event, while the mediator
    plays the role of a connection hub between intercommunicating objects.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察者通知订阅对象有关事件，而中介者则扮演着相互通信对象之间连接的角色。
- en: Designing the game loop as an infinite loop is reasonable because, theoretically,
    the game might never end and only end when the player commands it to.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将游戏循环设计为无限循环是合理的，因为从理论上讲，游戏可能永远不会结束，只有在玩家命令结束时才会结束。
- en: Chapter 12
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章
- en: Physical, Data-Link, Network, Transport, Session, Presentation, and Application.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 物理层、数据链路层、网络层、传输层、会话层、表示层和应用层。
- en: Port numbers provide a way to differentiate between several network applications
    running in the same environment.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 端口号提供了一种区分在同一环境中运行的多个网络应用程序的方法。
- en: Sockets are abstractions providing programmers with a means to send and receive
    data over a network.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 套接字是提供程序员发送和接收网络数据的抽象。
- en: First, we need to create and bind the socket with an IP address. Next, we should
    listen for incoming connections and, if there is one, we should accept the connection
    to further process the data communication.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要创建并绑定带有IP地址的套接字。接下来，我们应该监听传入的连接，如果有一个连接，我们应该接受连接以进一步处理数据通信。
- en: The TCP is a reliable protocol. It handles a strong connection between endpoints
    and also handles packet loss by resending packets not received by the receiver.
    UDP, on the other hand, is not reliable. Almost every aspect of handling rests
    on programmers' shoulders. The advantage of UDP is its speed given that it omits
    handshakes, checks, and packet loss handling.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: TCP是一种可靠的协议。它处理端点之间的稳固连接，并通过重新发送接收方未收到的数据包来处理数据包丢失。另一方面，UDP不可靠。几乎所有处理方面都由程序员来处理。UDP的优势在于它的速度，因为它省略了握手、检查和数据包丢失处理。
- en: Macro definitions lead to logic bugs in the code that are hard to spot. It's
    always better to use `const` expressions rather than macros.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 宏定义会导致代码中的逻辑错误，很难发现。最好始终使用`const`表达式而不是宏。
- en: Client applications must have unique identifiers as well as tokens (or passwords)
    used to authorize and/or authenticate them.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户端应用程序必须具有唯一的标识符，以及用于授权和/或验证它们的令牌（或密码）。
- en: Chapter 13
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第13章
- en: This is a laboratory exercise; no answer is required.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是一个实验室练习；不需要答案。
- en: 'The following output is from Ubuntu 18.04 on NVIDIA Jetson Nano:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下输出来自NVIDIA Jetson Nano上的Ubuntu 18.04：
- en: '[PRE0]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Because static analysis tools predict the errors from their models, and dynamic
    analysis tools detect errors via the execution of a program.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为静态分析工具从其模型中预测错误，动态分析工具通过程序的执行来检测错误。
- en: Please refer to the sample code, `ch13_tdd_v3.h`, `ch13_tdd_v3.cpp`, and `ch13_tdd_Boost_UTF3.cpp`,
    at
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请参考样本代码，`ch13_tdd_v3.h`，`ch13_tdd_v3.cpp`和`ch13_tdd_Boost_UTF3.cpp`，
- en: '[https://github.com/PacktPublishing/Mastering-Cpp-Programming./tree/master/Chapter-13](https://github.com/PacktPublishing/Mastering-Cpp-Programming./tree/master/Chapter-13).'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Mastering-Cpp-Programming./tree/master/Chapter-13](https://github.com/PacktPublishing/Mastering-Cpp-Programming./tree/master/Chapter-13)。'
- en: Chapter 14
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第14章
- en: Qt's compilation model allows the omission of a virtual machine. It uses a **meta-object
    compiler** (**MOC**) to translate into C++, which is then compiled into the machine
    code of the specific platform.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Qt的编译模型允许省略虚拟机。它使用**元对象编译器**（**MOC**）将其转换为C++，然后编译为特定平台的机器代码。
- en: '`QApplication::exec()` is the starting point of the application. It starts
    Qt''s event loop.'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`QApplication::exec()`是应用程序的起点。它启动Qt的事件循环。'
- en: By calling `setWindowTitle()`.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过调用`setWindowTitle()`。
- en: '`m->index (2, 3)`.'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`m->index (2, 3)`。'
- en: '`wgt->resize (400, 450)`.'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`wgt->resize (400, 450)`。'
- en: When inheriting from `QLayout`, you should provide implementation for the `addItem()`,
    `sizeHint()`, `setGeometry()`, `itemAt()`, `takeAt()`, and `minimumSize()` functions.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当从`QLayout`继承时，应为`addItem()`、`sizeHint()`、`setGeometry()`、`itemAt()`、`takeAt()`和`minimumSize()`函数提供实现。
- en: By using the `connect()` function that takes the source and target objects and
    names of signals and slots as arguments.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用`connect()`函数，该函数以源对象和目标对象以及信号和插槽的名称作为参数。
- en: Chapter 15
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第15章
- en: '**ML** stands for **machine learning** and is a field of study of algorithms
    and statistical models that computer systems use to perform a specific task without
    using explicit instructions, relying on patterns and inference instead.'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**ML**代表**机器学习**，是计算机系统用于执行特定任务的算法和统计模型的研究领域，而不使用显式指令，而是依赖模式和推理。'
- en: Supervised learning algorithms (also known as training with an instructor) learn
    from labeled datasets; that is, each record contains additional information describing
    the data. Unsupervised learning algorithms are even more complex— they process
    the dataset containing a bunch of features and then try to find useful properties
    of the features.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 监督学习算法（也称为带教练的训练）从带标签的数据集中学习；也就是说，每个记录都包含描述数据的附加信息。无监督学习算法更加复杂——它们处理包含大量特征的数据集，然后试图找到特征的有用属性。
- en: ML applications include machine translation, natural language processing, computer
    vision, and email spam detection.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 机器学习应用包括机器翻译、自然语言处理、计算机视觉和电子邮件垃圾邮件检测。
- en: One of the ways is to add a weight for each outcome, if the weight for the subtract
    operation overweighs others, it will become the dominant operation.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 其中一种方法是为每个结果添加权重，如果减法操作的权重超过其他操作，它将成为主导操作。
- en: The purpose of neural networks is to recognize patterns.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 神经网络的目的是识别模式。
- en: Chapter 16
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第16章
- en: The crawler downloads web pages and stores their content for the search engine
    to index it.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 网络爬虫下载网页并存储其内容，以便搜索引擎对其进行索引。
- en: We call it an inverted index because it maps words back to their locations in
    documents.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们称之为倒排索引，因为它将单词映射回它们在文档中的位置。
- en: Before indexing, tokenization normalizes words.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在索引之前，标记化会规范化单词。
- en: Recommendation engines verify and recommend the best outcomes fitting to the
    particular request.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 推荐引擎验证并推荐适合特定请求的最佳结果。
- en: A knowledge graph is a graph where nodes are topics (the knowledge) and edges
    are connections between topics.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 知识图是一个图，其中节点是主题（知识），边是主题之间的连接。
