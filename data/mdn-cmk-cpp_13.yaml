- en: 'Appendix: Miscellaneous Commands'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录：杂项命令
- en: 'Every language has utility commands that come in handy on a myriad of occasions.
    CMake is no different in that matter: it provides tools for simple arithmetic,
    bitwise operations, string manipulations, and operations on lists and on files.
    Interestingly enough, the occasions when they are necessary are relatively rare
    (thanks to all the enhancements and modules written over the years), but can still
    be required in more automated projects.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 每种语言都有许多实用的命令，CMake在这方面也不例外：它提供了进行简单算术、位运算、字符串处理、列表和文件操作的工具。有趣的是，它们必要性相对较少（感谢过去几年中所有的改进和编写模块），但在更自动化的项目中仍然可能需要。
- en: Hence this appendix, which is a short summary of miscellaneous commands and
    their multiple modes. Treat this as a handy offline reference or a simplified
    version of the official documentation. If you need more information, visit the
    provided links.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，本附录是对各种命令及其多种模式的一个简要总结。将其视为一个方便的离线参考或官方文档的简化版。如果您需要更多信息，请访问提供的链接。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: The `string()` command
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string()`命令'
- en: The `list()` command
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list()`命令'
- en: The `file()` command
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file()`命令'
- en: The `math()` command
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`math()`命令'
- en: The string() command
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串()命令
- en: 'The `string()` command is used to manipulate strings. It comes with a variety
    of modes that perform different actions on the string: search and replace, manipulation,
    comparison, hashing, generation, and JSON operations (the last one available since
    CMake 3.19).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`string()`命令用于操作字符串。它有多种模式，可以执行字符串的不同操作：搜索和替换、 manipulation、比较、散列、生成和JSON操作（从CMake
    3.19开始提供后一种）。'
- en: 'Full details can be found in the online documentation: [https://cmake.org/cmake/help/latest/command/string.html](https://cmake.org/cmake/help/latest/command/string.html).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 完整细节请在线查阅文档：[https://cmake.org/cmake/help/latest/command/string.html](https://cmake.org/cmake/help/latest/command/string.html)。
- en: '`string()` modes that accept the `<input>` argument will accept multiple `<input>`
    values and concatenate them before the execution of the command:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 接受`<input>`参数的`string()`模式将接受多个`<input>`值，并在命令执行前将它们连接起来：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This is the equivalent of the following:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于以下内容：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Let's explore all available `string()` modes.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索所有可用的`string()`模式。
- en: Search and replace
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 搜索和替换
- en: 'The following modes are available:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下模式可供使用：
- en: '`string(FIND <haystack> <pattern> <out> [REVERSE])` searches for `<pattern>`
    in the `<haystack>` string and writes the position found as an integer to the
    `<out>` variable. If the `REVERSE` flag was used, it searches from the end of
    the string to the beginning. This works only for ASCII strings (multibyte support
    isn''t provided).'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(FIND <haystack> <pattern> <out> [REVERSE])`在`<haystack>`字符串中搜索`<pattern>`，并将找到的位置作为整数写入`<out>`变量。如果使用了`REVERSE`标志，它从字符串的末尾开始搜索到开头。这仅适用于ASCII字符串（不提供多字节支持）。'
- en: '`string(REPLACE <pattern> <replace> <out> <input>)` replaces all occurrences
    of `<pattern>` in `<input>` with `<replace>` and stores them in the `<out>` variable.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(REPLACE <pattern> <replace> <out> <input>)`将`<input>`中的所有`<pattern>`替换为`<replace>`，并将结果存储在`<out>`变量中。'
- en: '`string(REGEX MATCH <pattern> <out> <input>)` regex-matches the first occurrence
    of `<pattern>` in `<input>` with `<replace>` and stores it in the `<out>` variable.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(REGEX MATCH <pattern> <out> <input>)`使用正则表达式在`<input>`中匹配第一个出现的`<pattern>`，并将其存储在`<out>`变量中。'
- en: '`string(REGEX MATCHALL <pattern> <out> <input>)` regex-matches all occurrences
    of `<pattern>` in `<input>` with `<replace>` and stores them in the `<out>` variable
    as a comma-separated list.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(REGEX MATCHALL <pattern> <out> <input>)`使用正则表达式在`<input>`中匹配所有出现的`<pattern>`，并将其作为逗号分隔的列表存储在`<out>`变量中。'
- en: '`string(REGEX REPLACE <pattern> <replace> <out> <input>)` regex-replaces all
    occurrences of `<pattern>` in `<input>` with the `<replace>` expression and stores
    them in the `<out>` variable.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(REGEX REPLACE <pattern> <replace> <out> <input>)`命令使用正则表达式在`<input>`中替换所有出现的`<pattern>`，并将结果存储在`<out>`变量中。'
- en: 'Regular expression operations follow C++ syntax as defined in the standard
    library in the `<regex>` header. You can use capturing groups to add matches to
    the `<replace>` expression with numeric placeholders: `\\1`, `\\2`... (double
    backslashes are required so arguments are parsed correctly).'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式操作遵循C++标准库中`<regex>`头文件定义的C++语法。您可以使用捕获组将匹配项添加到带有数字占位符`\\1`、`\\2`...的`<replace>`表达式中：（需要使用双反斜杠，以便正确解析参数）。
- en: Manipulation
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作
- en: 'The following modes are available:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 可用以下模式：
- en: '`string(APPEND <out> <input>)` mutates strings stored in `<out>` by appending
    the `<input>` string.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(APPEND <out> <input>)` 通过附加`<input>`字符串改变存储在`<out>`中的字符串。'
- en: '`string(PREPEND <out> <input>)` mutates strings stored in `<out>` by prepending
    the `<input>` string.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(PREPEND <out> <input>)` 通过在`<out>`中的字符串前添加`<input>`字符串改变这些字符串。'
- en: '`string(CONCAT <out> <input>)` concatenates all provided `<input>` strings
    and stores them in the `<out>` variable.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(CONCAT <out> <input>)` 连接所有提供的`<input>`字符串，并将它们存储在`<out>`变量中。'
- en: '`string(JOIN <glue> <out> <input>)` interleaves all provided `<input>` strings
    with a `<glue>` value and stores them as a concatenated string in the `<out>`
    variable (don''t use this mode for list variables).'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(JOIN <glue> <out> <input>)` 使用`<glue>`值交错所有提供的`<input>`字符串，并将它们作为一个连接的字符串存储在`<out>`变量中（不要对列表变量使用此模式）。'
- en: '`string(TOLOWER <string> <out>)` converts `<string>` to lowercase and stores
    it in the `<out>` variable.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(TOLOWER <string> <out>)` 将`<string>`转换为小写，并将其存储在`<out>`变量中。'
- en: '`string(TOUPPER <string> <out>)` converts `<string>` to uppercase and stores
    it in the `<out>` variable.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(TOUPPER <string> <out>)` 将`<string>`转换为大写，并将其存储在`<out>`变量中。'
- en: '`string(LENGTH <string> <out>)` counts the bytes of `<string>` and stores the
    result in the `<out>` variable.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(LENGTH <string> <out>)` 计算`<string>`的字节数，并将结果存储在`<out>`变量中。'
- en: '`string(SUBSTRING <string> <begin> <length> <out>)` extracts a substring of
    `<string>` of `<length>` bytes starting at the `<begin>` byte, and stores it in
    the `<out>` variable. Providing `-1` as the length is understood as "till the
    end of the string."'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(SUBSTRING <string> <begin> <length> <out>)` 提取`<string>`的`<length>`字节子字符串，从`<begin>`字节开始，并将其存储在`<out>`变量中。将长度设为`-1`则表示“直到字符串结束”。'
- en: '`string(STRIP <string> <out>)` removes trailing and leading whitespace from
    `<string>` and stores the result in the `<out>` variable.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(STRIP <string> <out>)` 从`<string>`中移除尾部和前导空白，并将结果存储在`<out>`变量中。'
- en: '`string(GENEX_STRIP <string> <out>)` removes all generator expressions used
    in `<string>` and stores the result in the `<out>` variable.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(GENEX_STRIP <string> <out>)` 移除`<string>`中使用的所有生成器表达式，并将结果存储在`<out>`变量中。'
- en: '`string(REPEAT <string> <count> <out>)` generates a string containing `<count>`
    repetitions of `<string>` and stores it in the `<out>` variable.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(REPEAT <string> <count> <out>)` 生成包含`<count>`个`<string>`重复的字符串，并将其存储在`<out>`变量中。'
- en: Comparison
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比较
- en: 'A comparison of strings takes the following form:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串的比较采用以下形式：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `<operation>` argument is one of the following: `LESS`, `GREATER`, `EQUAL`,
    `NOTEQUAL`, `LESS_EQUAL`, or `GREATER_EQUAL`. It will be used to compare `<stringA>`
    with `<stringB>` and the result (`true` or `false`) will be stored in the `<out>`
    variable.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`<operation>`参数是以下之一：`LESS`、`GREATER`、`EQUAL`、`NOTEQUAL`、`LESS_EQUAL`或`GREATER_EQUAL`。它将用于比较`<stringA>`与`<stringB>`，并将结果（`true`或`false`）存储在`<out>`变量中。'
- en: Hashing
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 散列
- en: 'The hashing mode has the following signature:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 散列模式具有以下签名：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'It hashes `<string>` with `<algorithm>` and stores the result in the `<out>`
    variable. The following algorithms are supported:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`<algorithm>`散列`<string>`并将结果存储在`<out>`变量中。支持以下算法：
- en: '`MD5`: Message-Digest Algorithm 5, RFC 1321'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MD5`: 消息摘要算法5，RFC 1321'
- en: '`SHA1`: US Secure Hash Algorithm 1, RFC 3174'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SHA1`: 美国安全散列算法1，RFC 3174'
- en: '`SHA224`: US Secure Hash Algorithms, RFC 4634'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SHA224`: 美国安全散列算法，RFC 4634'
- en: '`SHA256`: US Secure Hash Algorithms, RFC 4634'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SHA256`: 美国安全散列算法，RFC 4634'
- en: '`SHA384`: US Secure Hash Algorithms, RFC 4634'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SHA384`: 美国安全散列算法，RFC 4634'
- en: '`SHA512`: US Secure Hash Algorithms, RFC 4634'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SHA512`: 美国安全散列算法，RFC 4634'
- en: '`SHA3_224`: Keccak SHA-3'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SHA3_224`: 凯凯SHA-3'
- en: '`SHA3_256`: Keccak SHA-3'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SHA3_256`: 凯凯SHA-3'
- en: '`SHA3_384`: Keccak SHA-3'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SHA3_384`: 凯凯SHA-3'
- en: '`SHA3_512`: Keccak SHA-3'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SHA3_512`: 凯凯SHA-3'
- en: Generation
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成
- en: 'The following modes are available:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 可用以下模式：
- en: '`string(ASCII <number>... <out>)` stores ASCII characters of given `<number>`
    in the `<out>` variable.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(ASCII <number>... <out>)` 将给定`<number>`的ASCII字符存储在`<out>`变量中。'
- en: '`string(HEX <string> <out>)` converts `<string>` to its hexadecimal representation
    and stores it in the `<out>` variable (since CMake 3.18).'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(HEX <string> <out>)` 将`<string>`转换为其十六进制表示，并将其存储在`<out>`变量中（自CMake
    3.18起）。'
- en: '`string(CONFIGURE <string> <out> [@ONLY] [ESCAPE_QUOTES])`works exactly like
    `configure_file()` but for strings. The result is stored in the `<out>` variable.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(CONFIGURE <string> <out> [@ONLY] [ESCAPE_QUOTES])`完全像`configure_file()`一样工作，但用于字符串。结果存储在`<out>`变量中。'
- en: '`string(MAKE_C_IDENTIFIER <string> <out>)` converts non-alphanumeric characters
    in `<string>` to underscores and stores the result in the `<out>` variable.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(MAKE_C_IDENTIFIER <string> <out>)` 将 `<string>` 中的非字母数字字符转换为下划线，并将结果存储在
    `<out>` 变量中。'
- en: '`string(RANDOM [LENGTH <len>] [ALPHABET <alphabet>] [RANDOM_SEED <seed>] <out>)`generates
    a random string of `<len>` characters (default `5`) using the optional `<alphabet>`
    from the random seed, `<seed>,` and stores the result in the `<out>` variable.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(RANDOM [LENGTH <len>] [ALPHABET <alphabet>] [RANDOM_SEED <seed>] <out>)`
    生成一个 `<len>` 个字符（默认 `5`）的随机字符串，使用可选的 `<alphabet>` 从随机种子 `<seed>`，并将结果存储在 `<out>`
    变量中。'
- en: '`string(TIMESTAMP <out> [<format>] [UTC])` generates a string representing
    the current date and time and stores it in the `<out>` variable.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(TIMESTAMP <out> [<format>] [UTC])` 生成一个表示当前日期和时间的字符串，并将其存储在 `<out>`
    变量中。'
- en: '`string(UUID <out> ...)` generates a universally unique identifier. This mode
    is a bit involved to use.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(UUID <out> ...)` 生成一个全球唯一的标识符。这个模式使用起来有点复杂。'
- en: JSON
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JSON
- en: 'Operations on JSON-formatted strings use the following signature:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: JSON格式的字符串操作使用以下签名：
- en: '[PRE4]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Several operations are available. They all store their results in the `<out>`
    variable, and errors in the `<error>` variable. Operations and their arguments
    are as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 'several operations are available. They all store their results in the `<out>`
    variable, and errors in the `<error>` variable. Operations and their arguments
    are as follows:'
- en: '`GET <json> <member|index>...` returns the value of one or more elements from
    a `<json>` string using the `<member>` path or `<index>`.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GET <json> <member|index>...` 返回使用 `<member>` 路径或 `<index>` 从 `<json>` 字符串中获取一个或多个元素的结果。'
- en: '`TYPE <json> <member|index>...` returns the type of one or more elements from
    a `<json>` string using the `<member>` path or `<index>`.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TYPE <json> <member|index>...` 返回 `<json>` 字符串中使用 `<member>` 路径或 `<index>`
    的一个或多个元素的类型。'
- en: '`MEMBER <json> <member|index>... <array-index>` returns the member name of
    one or more array-typed elements on the `<array-index>` position from the `<json>`
    string using the `<member>` path or `<index>`.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MEMBER <json> <member|index>... <array-index>` 返回 `<json>` 字符串中 `<array-index>`
    位置的一个或多个数组类型元素的成员名称。'
- en: '`LENGTH <json> <member|index>...` returns the element count of one or more
    array-typed elements from the `<json>` string using the `<member>` path or `<index>`.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LENGTH <json> <member|index>...` 返回 `<json>` 字符串中使用 `<member>` 路径或 `<index>`
    的一个或多个数组类型元素的数量。'
- en: '`REMOVE <json> <member|index>...` returns the result of removal of one or more
    elements from the `<json>` string using the `<member>` path or `<index>`.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`REMOVE <json> <member|index>...` 返回使用 `<member>` 路径或 `<index>` 从 `<json>`
    字符串中删除一个或多个元素的结果。'
- en: '`SET <json> <member|index>... <value>` returns the result of upsertion of `<value>`
    to one or more elements from a `<json>` string using the `<member>` path or `<index>`.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SET <json> <member|index>... <value>` 返回将 `<value>` 插入到 `<json>` 字符串中一个或多个元素的结果。'
- en: '`EQUAL <jsonA> <jsonB>` evaluates whether `<jsonA>` and `<jsonB>` are equal.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EQUAL <jsonA> <jsonB>` 评估 `<jsonA>` 和 `<jsonB>` 是否相等。'
- en: The list() command
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`list()` 命令'
- en: 'This command provides basic operations on lists: reading, searching, modification,
    and ordering. Some modes will change list (mutate the original value). Be sure
    to copy the original value if you''ll need it later.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令提供了列表的基本操作：阅读、搜索、修改和排序。有些模式会改变列表（改变原始值）。如果你之后需要它，请确保复制原始值。
- en: 'Full details can be found in the online documentation:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 完整详细信息可以在在线文档中找到：
- en: '[https://cmake.org/cmake/help/latest/command/list.html](https://cmake.org/cmake/help/latest/command/list.html)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://cmake.org/cmake/help/latest/command/list.html](https://cmake.org/cmake/help/latest/command/list.html)'
- en: Reading
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 阅读
- en: 'The following modes are available:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下模式可用：
- en: '`list(LENGTH <list> <out>)` counts the elements in the `<list>` variable and
    stores the result in the `<out>` variable.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list(LENGTH <list> <out>)` 计算 `<list>` 变量的元素数量，并将结果存储在 `<out>` 变量中。'
- en: '`list(GET <list> <index>... <out>)` copies the `<list>` elements specified
    with the list of `<index>` indexes to the `<out>` variable.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list(GET <list> <index>... <out>)` 将 `<list>` 中指定的索引列表元素复制到 `<out>` 变量中。'
- en: '`list(JOIN <list> <glue> <out>)` interleaves `<list>` elements with the `<glue>`
    delimiter and stores the resulting string in the `<out>` variable.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list(JOIN <list> <glue> <out>)` 将 `<list>` 元素与 `<glue>` 分隔符交织在一起，并将结果字符串存储在
    `<out>` 变量中。'
- en: '`list(SUBLIST <list> <begin> <length> <out>)` works like the `GET` mode, but
    operates on range instead of explicit indexes. If `<length>` is `-1`, elements
    from `<begin>` index to the end of the list provided in the `<list>` variable
    will be returned.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list(SUBLIST <list> <begin> <length> <out>)` 类似于 `GET` 模式，但它操作范围而不是明确的索引。如果
    `<length>` 是 `-1`，将从 `<begin>` 索引到 `<list>` 变量提供的列表末尾返回元素。'
- en: Searching
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 搜索
- en: 'This mode simply finds the index of the `<needle>` element in the `<list>`
    variable and stores the result in the `<out>` variable (or `-1` if the element
    wasn''t found):'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 此模式简单地查找 `<list>` 变量中的 `<needle>` 元素的索引，并将结果存储在 `<out>` 变量中（如果未找到元素，则为 `-1`）：
- en: '[PRE5]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Modification
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改
- en: 'The following modes are available:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些可用模式：
- en: '`list(APPEND <list> <element>...)` adds one or more `<element>` value to the
    end of the `<list>` variable.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list(APPEND <list> <element>...)` 将一个或多个 `<element>` 值添加到 `<list>` 变量的末尾。'
- en: '`list(PREPEND <list> [<element>...])` works like `APPEND`, but adds elements
    to the beginning of the `<list> variable`.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list(PREPEND <list> [<element>...])` 类似于 `APPEND`，但它将元素添加到 `<list>` 变量的开头。'
- en: '`list(FILTER <list> {INCLUDE | EXCLUDE} REGEX <pattern>)` filters the `<list>`
    variable to `INCLUDE` or `EXCLUDE` the elements matching the `<pattern> value`.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list(FILTER <list> {INCLUDE | EXCLUDE} REGEX <pattern>)` 用于过滤 `<list>` 变量，以
    `INCLUDE` 或 `EXCLUDE` 包含或排除与 `<pattern>` 值匹配的元素。'
- en: '`list(INSERT <list> <index> [<element>...])` adds one or more `<element>` values
    to the `<list>` variable at the given `<index>`.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list(INSERT <list> <index> [<element>...])` 在给定的 `<index>` 处向 `<list>` 变量添加一个或多个
    `<element>` 值。'
- en: '`list(POP_BACK <list> [<out>...])` removes an element from the end of the `<list>`
    variable and stores it in the optional `<out>` variable. If multiple `<out>` variables
    were provided, more elements will be removed to fill them.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list(POP_BACK <list> [<out>...])` 从 `<list>` 变量的末尾移除一个元素，并将其存储在可选的 `<out>`
    变量中。如果提供了多个 `<out>` 变量，将移除更多元素以填充它们。'
- en: '`list(POP_FRONT <list> [<out>...])` works like `POP_BACK` but removes an element
    from the beginning of the `<list> variable`.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list(POP_FRONT <list> [<out>...])` 类似于 `POP_BACK`，但它从 `<list>` 变量的开头移除元素。'
- en: '`list(REMOVE_ITEM <list> <value>...)` shorthand for `FILTER EXCLUDE`, but without
    the support of regular expressions.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list(REMOVE_ITEM <list> <value>...)` 是 `FILTER EXCLUDE` 的简写，但不支持正则表达式。'
- en: '`list(REMOVE_AT <list> <index>...)` removes elements from `<list>` at a specific
    `<index>`.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list(REMOVE_AT <list> <index>...)` 从 `<list>` 中移除特定的 `<index>` 处的元素。'
- en: '`list(REMOVE_DUPLICATES <list>)` removes duplicates from `<list>`.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list(REMOVE_DUPLICATES <list>)` 从 `<list>` 中移除重复项。'
- en: '`list(TRANSFORM <list> <action> [<selector>] [OUTPUT_VARIABLE <out>])` applies
    a specific transformation to the `<list>` elements. By default, the action is
    applied to all elements, but we may limit the effect by adding a `<selector>`.
    Provided list will be mutated (changed in place) unless the `OUTPUT_VARIABLE`
    keyword was provided, in which case, the result is stored in the `<out>` variable.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list(TRANSFORM <list> <action> [<selector>] [OUTPUT_VARIABLE <out>])` 对 `<list>`
    元素应用特定的转换。默认情况下，该操作应用于所有元素，但我们也可以通过添加 `<selector>` 来限制其影响。除非提供了 `OUTPUT_VARIABLE`
    关键字，否则列表将被突变（原地更改），在这种情况下，结果存储在 `<out>` 变量中。'
- en: 'The following selectors are available: `AT <index>`, `FOR <start> <stop> [<step>]`,
    and `REGEX <pattern>`.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些可用的选择器：`AT <index>`、`FOR <start> <stop> [<step>]` 和 `REGEX <pattern>`。
- en: Actions include `APPEND <string>`, `PREPEND <string>`, `TOLOWER`, `TOUPPER`,
    `STRIP`, `GENEX_STRIP`, and `REPLACE <pattern> <expression>`. They work exactly
    like the `string()` modes with the same name.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 动作包括 `APPEND <string>`、`PREPEND <string>`、`TOLOWER`、`TOUPPER`、`STRIP`、`GENEX_STRIP`
    和 `REPLACE <pattern> <expression>`。它们的工作方式与具有相同名称的 `string()` 模式完全相同。
- en: Ordering
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 排序
- en: 'The following modes are available:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些可用模式：
- en: '`list(REVERSE <list>)` simply reverses the order of `<list>`.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list(REVERSE <list>)` 简单地反转 `<list>` 的顺序。'
- en: '`list(SORT <list>)` sorts the list alphabetically. Refer to the online manual
    for more advanced options.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list(SORT <list>)` 按字母顺序对列表进行排序。有关更高级选项，请参阅在线手册。'
- en: The file() command
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`file()` 命令'
- en: 'This command provides all kinds of operations related to files: reading, transferring,
    locking, and archiving. It also provides modes to inspect the filesystem and operations
    on strings representing paths.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令提供了与文件相关的各种操作：读取、传输、锁定和归档。它还提供了检查文件系统和对表示路径的字符串执行操作的模式。
- en: 'Full details can be found in the online documentation:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 完整详细信息可以在在线文档中找到：
- en: '[https://cmake.org/cmake/help/latest/command/file.html](https://cmake.org/cmake/help/latest/command/file.html)'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '[链接](https://cmake.org/cmake/help/latest/command/file.html)'
- en: Reading
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 读取
- en: 'The following modes are available:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些可用模式：
- en: '`file(READ <filename> <out> [OFFSET <o>] [LIMIT <max>] [HEX])` reads the file
    from `<filename>` to the `<out>` variable. The read optionally starts at offset
    `<o>` and follows the optional limit of `<max>` bytes. The `HEX flag` specifies
    that output should be converted to hexadecimal representation.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file(READ <filename> <out> [OFFSET <o>] [LIMIT <max>] [HEX])` 从 `<filename>`
    文件读取到 `<out>` 变量。读取可以从偏移量 `<o>` 开始，并具有可选的字节限制 `<max>`。`HEX` 标志指定输出应转换为十六进制表示。'
- en: '`file(STRINGS <filename> <out>)` reads strings from the file at `<filename>`
    to the `<out> variable`.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file(STRINGS <filename> <out>)` 从 `<filename>` 文件中读取字符串到 `<out>` 变量。'
- en: '`file(<algorithm> <filename> <out>)` computes the `<algorithm>` hash from the
    file at `<filename>` and stores the result in the `<out>` variable. Available
    algorithms are the same as for the `string()` hashing function.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file(<algorithm> <filename> <out>)` 从 `<filename>` 文件中计算 `<algorithm>` 哈希值，并将结果存储在
    `<out>` 变量中。可用的算法与 `string()` 哈希函数相同。'
- en: '`file(TIMESTAMP <filename> <out> [<format>])` generates a string representation
    of a timestamp of the file at `<filename>` and stores it in the `<out>` variable.
    Optionally accepts a `<format>` string.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file(TIMESTAMP <filename> <out> [<format>])` 生成 `<filename>` 文件的时间戳字符串表示，并将其存储在
    `<out>` 变量中。可选地接受一个 `<format>` 字符串。'
- en: '`file(GET_RUNTIME_DEPENDENCIES [...])` gets runtime dependencies for specified
    files. This is an advanced command to be used only in `install(CODE)` or `install(SCRIPT)`
    scenarios.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file(GET_RUNTIME_DEPENDENCIES [...])` 为指定文件获取运行时依赖项。这是一个仅在 `install(CODE)`
    或 `install(SCRIPT)` 场景中使用的高级命令。'
- en: Writing
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写
- en: 'The following modes are available:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 以下模式可用：
- en: '`file({WRITE | APPEND} <filename> <content>...)` writes or appends all `<content>`
    arguments to the file at `<filename>`. If the provided system path doesn''t exist,
    it will be recursively created.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file({WRITE | APPEND} <filename> <content>...)` 将所有 `<content>` 参数写入或追加到 `<filename>`
    文件中。如果提供的系统路径不存在，它将递归创建。'
- en: '`file({TOUCH | TOUCH_NOCREATE} [<filename>...])` updates the timestamp of the
    `<filename>`. If the file doesn''t exist, it will only be created in the `TOUCH`
    mode.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file({TOUCH | TOUCH_NOCREATE} [<filename>...])` 更新 `<filename>` 的时间戳。如果文件不存在，只有在
    `TOUCH` 模式下才会创建它。'
- en: '`file(GENERATE OUTPUT <output-file> [...])` is an advanced mode that generates
    an output file for each build configuration of the current CMake Generator.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file(GENERATE OUTPUT <output-file> [...])` 是一个高级模式，为当前 CMake 生成器的每个构建配置生成一个输出文件。'
- en: '`file(CONFIGURE OUTPUT <output-file> CONTENT <content> [...])` works like `GENERATE_OUTPUT`,
    but also configures the generated files by substituting variable placeholders
    with values.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file(CONFIGURE OUTPUT <output-file> CONTENT <content> [...])` 类似于 `GENERATE_OUTPUT`，但它还会通过替换变量占位符来配置生成的文件。'
- en: Filesystem
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件系统
- en: 'The following modes are available:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 以下模式可用：
- en: '`file({GLOB | GLOB_RECURSE} <out> [...] [<globbing-expression>...])` generates
    a list of files matching `<globbing-expression>` and stores it in the `<out>`
    variable. `GLOB_RECURSE` mode will also scan nested directories.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file({GLOB | GLOB_RECURSE} <out> [...] [<globbing-expression>...])` 生成与 `<globbing-expression>`
    匹配的文件列表，并将其存储在 `<out>` 变量中。`GLOB_RECURSE` 模式还将扫描嵌套目录。'
- en: '`file(RENAME <oldname> <newname>)` moves a file from `<oldname>` to `<newname>`.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file(RENAME <oldname> <newname>)` 将文件从 `<oldname>` 移动到 `<newname>`。'
- en: '`file({REMOVE | REMOVE_RECURSE } [<files>...])` deletes `<files>`. `REMOVE_RECURSE`
    will also remove directories.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file({REMOVE | REMOVE_RECURSE } [<files>...])` 用于删除 `<files>`。`REMOVE_RECURSE`
    选项还会删除目录。'
- en: '`file(MAKE_DIRECTORY [<dir>...])` creates a directory.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file(MAKE_DIRECTORY [<dir>...])` 创建一个目录。'
- en: '`file(COPY <file>... DESTINATION <dir> [...])` copies `files` to the `<dir>`
    destination. Offers options for filtering, setting permissions, symlink chain
    following, and more.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file(COPY <file>... DESTINATION <dir> [...])` 将 `files` 复制到 `<dir>` 目的地。提供过滤、设置权限、符号链接链跟随等功能选项。'
- en: '`file(SIZE <filename> <out>)` reads the size of `<filename>` in bytes and stores
    it in the `<out>` variable.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file(SIZE <filename> <out>)` 读取 `<filename>` 文件的字节大小，并将其存储在 `<out>` 变量中。'
- en: '`file(READ_SYMLINK <linkname> <out>)` reads the destination path of the `<linkname>`
    symlink and stores it in the `<out>` variable.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file(READ_SYMLINK <linkname> <out>)` 从 `<linkname>` 符号链接中读取目标路径，并将其存储在 `<out>`
    变量中。'
- en: '`file(CREATE_LINK <original> <linkname> [...])` creates a symlink to `<original>`
    at `<linkname>`.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file(CREATE_LINK <original> <linkname> [...])` 在 `<linkname>` 位置创建指向 `<original>`
    的符号链接。'
- en: '`file({CHMOD|CHMOD_RECURSE} <files>... <directories>... PERMISSIONS <permissions>...
    [...])` sets permissions on files and directories.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file({CHMOD|CHMOD_RECURSE} <files>... <directories>... PERMISSIONS <permissions>...
    [...])` 为文件和目录设置权限。'
- en: Path conversion
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 路径转换
- en: 'The following modes are available:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 以下模式可用：
- en: '`file(REAL_PATH <path> <out> [BASE_DIRECTORY <dir>])` computes the absolute
    path from the relative path and stores it in the `<out>` variable. Optionally
    accepts the `<dir>` base directory. It''s been available since CMake 3.19.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file(REAL_PATH <path> <out> [BASE_DIRECTORY <dir>])` 从相对路径计算绝对路径，并将其存储在 `<out>`
    变量中。可选地接受 `<dir>` 基础目录。该功能自 CMake 3.19 起可用。'
- en: '`file(RELATIVE_PATH <out> <directory> <file>)` computes the `<file>` path relative
    to `<directory>` and stores it in the `<out>` variable.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file(RELATIVE_PATH <out> <directory> <file>)` 计算 `<file>` 相对于 `<directory>`
    的路径，并将其存储在 `<out>` 变量中。'
- en: '`file({TO_CMAKE_PATH | TO_NATIVE_PATH} <path> <out>)` converts `<path>` to
    a CMake path (directories separated with a forward slash) to the native path of
    the platform and back. The result is stored in the `<out>` variable.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file({TO_CMAKE_PATH | TO_NATIVE_PATH} <path> <out>)` 将 `<path>` 转换为 CMake
    路径（目录用正斜杠分隔）或平台的本地路径，并将结果存储在 `<out>` 变量中。'
- en: Transfer
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 传输
- en: 'The following modes are available:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 以下模式可用：
- en: '`file(DOWNLOAD <url> [<path>] [...])` downloads a file from `<url>` and stores
    it in path.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file(DOWNLOAD <url> [<path>] [...])` 从 `<url>` 下载文件并将其存储在路径中。'
- en: '`file(UPLOAD <file> <url> [...])` uploads `<file>` to an URL.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file(UPLOAD <file> <url> [...])` 将 `<file>` 上传到 URL。'
- en: Locking
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 锁定
- en: 'Locking mode places an advisory lock on the `<path>` resource:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 锁定模式在 `<path>` 资源上放置一个建议锁：
- en: '[PRE6]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This lock can be optionally scoped to `FUNCTION`, `FILE`, or `PROCESS` and limited
    with a timeout of `<seconds>`. To release the lock, provide the `RELEASE` keyword.
    The result will be stored in the `<out>` variable.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 此锁可以可选地作用于 `FUNCTION`、`FILE` 或 `PROCESS`，并带有 `<seconds>` 的超时。要释放锁，请提供 `RELEASE`
    关键字。结果将存储在 `<out>` 变量中。
- en: Archiving
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 归档
- en: 'The creation of archives is provided with the following signature:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 归档的创建提供以下签名：
- en: '[PRE7]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'It creates an archive at the `<destination>` path comprising `<source>` files
    in one of the supported formats: `7zip`, `gnutar`, `pax`, `paxr`, `raw`, or `zip`
    (`paxr` is the default). If the chosen format supports the compression level,
    it can be provided as a single-digit integer `0-9`, with `0` being the default.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 它在 `<destination>` 路径上创建一个存档，包含 `<source>` 文件中的一种支持格式：`7zip`、`gnutar`、`pax`、`paxr`、`raw`
    或 `zip`（`paxr` 为默认值）。如果所选格式支持压缩级别，它可以是一个单个数字 `0-9`，其中 `0` 是默认值。
- en: 'The extraction mode has the following signature:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 提取模式具有以下签名：
- en: '[PRE8]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: It extracts files matching optional `<patterns>` values from `<archive>` to
    the destination `<dir>`. If the `LIST_ONLY` keyword is provided, files won't be
    extracted, but only listed instead.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 它从 `<archive>` 中提取匹配可选 `<patterns>` 值的文件到目标 `<dir>`。如果提供 `LIST_ONLY` 关键字，则不会提取文件，而只是列出文件。
- en: The math() command
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`math()` 命令'
- en: 'CMake also supports some simple arithmetical operations. See the online documentation
    for full details:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: CMake 还支持一些简单的算术运算。有关完整详细信息，请参阅在线文档：
- en: '[https://cmake.org/cmake/help/latest/command/math.html](https://cmake.org/cmake/help/latest/command/math.html)'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://cmake.org/cmake/help/latest/command/math.html](https://cmake.org/cmake/help/latest/command/math.html)'
- en: 'To evaluate a mathematical expression and store it in the `<out>` variable
    as the string in an optional `<format>` (`HEXADECIMAL` or `DECIMAL`), use the
    following signature:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 要评估一个数学表达式并将其作为可选的 `<format>`（`HEXADECIMAL` 或 `DECIMAL`）字符串存储在 `<out>` 变量中，请使用以下签名：
- en: '[PRE9]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`The <expression>` value is a string that supports operators present in C code
    (they have the same meaning here):'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`<expression>` 的值是一个支持 C 代码中存在的运算符的字符串（这里的意义相同）：'
- en: 'Arithmetical: `+`, `-`, `*`, `/`, `%` modulo division'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 算术：`+`、`-`、`*`、`/`、`%`（取模除法）
- en: 'Bitwise: `|` or, `&` and, `^` xor, `~` not, `<<` shift left, `>>` shift right'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 位运算：`|` 或，`&` 与，`^` 异或，`~` 非，`<<` 左移，`>>` 右移
- en: Parenthesis (...)
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 圆括号 (...)
- en: Constant values can be provided in decimal or hexadecimal format.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 常数值可以以十进制或十六进制格式提供。
