- en: Alternative Generators and Cross-compilation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 替代生成器和跨编译
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下内容：
- en: Building a CMake project in Visual Studio
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Visual Studio中构建CMake项目
- en: Cross-compiling a hello world example
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨编译一个hello world示例
- en: Cross-compiling a Windows binary with OpenMP parallelization
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用OpenMP并行化跨编译Windows二进制文件
- en: Introduction
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引言
- en: CMake does not build executables and libraries on its own. Instead, CMake configures
    a project and *generates* files used by another build tool or framework to build
    the project. On GNU/Linux and macOS, CMake typically generates Unix Makefiles,
    but a number of alternatives exist. On Windows, these are typically Visual Studio
    project files or MinGW or MSYS Makefiles. CMake includes a wide range of generators
    for native command-line build tools or integrated development environments (IDEs).
    You can read more about them at the following link: [https://cmake.org/cmake/help/latest/manual/cmake-generators.7.html](https://cmake.org/cmake/help/latest/manual/cmake-generators.7.html).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: CMake本身并不构建可执行文件和库。相反，CMake配置一个项目并*生成*由另一个构建工具或框架用来构建项目的文件。在GNU/Linux和macOS上，CMake通常生成Unix
    Makefiles，但存在许多替代方案。在Windows上，这些通常是Visual Studio项目文件或MinGW或MSYS Makefiles。CMake包含了一系列针对本地命令行构建工具或集成开发环境（IDEs）的生成器。您可以在以下链接了解更多信息：[https://cmake.org/cmake/help/latest/manual/cmake-generators.7.html](https://cmake.org/cmake/help/latest/manual/cmake-generators.7.html)。
- en: 'These generators can be selected using `cmake -G`, for instance:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这些生成器可以使用`cmake -G`来选择，例如：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Not all generators are available on every platform and, depending on the platform
    where CMake runs, typically only a subset is available. To see a list of all available
    generators on the current platform, type the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有生成器在每个平台上都可用，根据CMake运行的平台，通常只有一部分可用。要查看当前平台上所有可用的生成器列表，请输入以下内容：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this chapter, we will not cycle through all the available generators but
    we note that most recipes in this book have been tested using the `Unix Makefiles`,
    `MSYS Makefiles`, `Ninja`, and `Visual Studio 15 2017` generators. In this chapter,
    we will focus on developing on/for the Windows platform. We will demonstrate how
    to build a CMake project directly using Visual Studio 15 2017, without using the
    command line. We will also discuss how to cross-compile a Windows executable on
    a Linux or macOS system.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们不会遍历所有可用的生成器，但我们注意到本书中的大多数配方都使用`Unix Makefiles`、`MSYS Makefiles`、`Ninja`和`Visual
    Studio 15 2017`生成器进行了测试。在本章中，我们将专注于在Windows平台上进行开发。我们将演示如何直接使用Visual Studio 15
    2017构建CMake项目，而不使用命令行。我们还将讨论如何在Linux或macOS系统上跨编译Windows可执行文件。
- en: Building a CMake project using Visual Studio 2017
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Visual Studio 2017构建CMake项目
- en: The code for this recipe is available at [https://github.com/dev-cafe/cmake-cookbook/tree/v1.0/chapter-13/recipe-01](https://github.com/dev-cafe/cmake-cookbook/tree/v1.0/chapter-13/recipe-01) and
    has a C++ example. The recipe is valid with CMake version 3.5 (and higher) and
    has been tested on Windows.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方的代码可在[https://github.com/dev-cafe/cmake-cookbook/tree/v1.0/chapter-13/recipe-01](https://github.com/dev-cafe/cmake-cookbook/tree/v1.0/chapter-13/recipe-01)找到，并包含一个C++示例。该配方适用于CMake版本3.5（及以上），并在Windows上进行了测试。
- en: While earlier versions of Visual Studio required developers to edit source code
    and run CMake commands in different windows, Visual Studio 2017 introduces built-in
    support for CMake projects ([https://aka.ms/cmake](https://aka.ms/cmake)), which
    allows for the entire coding, configuring, building, and testing workflow to happen
    within the same IDE. In this recipe, we will test this and build a simple "hello
    world" CMake example project directly using Visual Studio 2017, without resorting
    to the command line.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然早期的Visual Studio版本要求开发者在不同的窗口中编辑源代码和运行CMake命令，但Visual Studio 2017引入了对CMake项目的内置支持（[https://aka.ms/cmake](https://aka.ms/cmake)），允许整个编码、配置、构建和测试工作流程在同一个IDE中发生。在本节中，我们将测试这一点，并直接使用Visual
    Studio 2017构建一个简单的“hello world”CMake示例项目，而不求助于命令行。
- en: Getting ready
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: First, we will use the Windows platform and download and install Visual Studio
    Community 2017 ([https://www.visualstudio.com/downloads/](https://www.visualstudio.com/downloads/)).
    At the time of writing, this version is freely available with a 30-day trial period. The
    steps which we will follow are also nicely explained in this video: [https://www.youtube.com/watch?v=_lKxJjV8r3Y](https://www.youtube.com/watch?v=_lKxJjV8r3Y).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将使用Windows平台，下载并安装Visual Studio Community 2017（[https://www.visualstudio.com/downloads/](https://www.visualstudio.com/downloads/)）。在撰写本文时，该版本可免费使用30天试用期。我们将遵循的步骤也在此视频中得到了很好的解释：[https://www.youtube.com/watch?v=_lKxJjV8r3Y](https://www.youtube.com/watch?v=_lKxJjV8r3Y)。
- en: 'When running the installer, make sure to select Desktop development with C++
    on the left panel and also verify that Visual C++ tools for CMake is checked on
    the Summary panel to the right:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行安装程序时，请确保在左侧面板中选择“使用C++的桌面开发”，并验证“Visual C++工具用于CMake”在右侧的摘要面板中被选中：
- en: '![](img/3e7b747b-5049-444e-a5ce-f261aa133fca.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3e7b747b-5049-444e-a5ce-f261aa133fca.png)'
- en: 'In Visual Studio 2017 15.4, you can also build code for the Linux platform.
    For this, select Linux development with C++ under Other Toolsets:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在Visual Studio 2017 15.4中，您还可以为Linux平台编译代码。为此，请在其他工具集中选择“Linux开发与C++”：
- en: '![](img/51a1afdc-95b9-49b2-93f8-e8e1f766d757.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/51a1afdc-95b9-49b2-93f8-e8e1f766d757.png)'
- en: With this option enabled, you can target both Windows and Linux machines from
    within Visual Studio provided you have configured access to a Linux server. However,
    we will not demonstrate this approach in this chapter.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 启用此选项后，您可以从Visual Studio内部为Windows和Linux机器编译代码，前提是您已配置了对Linux服务器的访问。但是，我们不会在本章中演示这种方法。
- en: 'In this recipe, we will build a Windows binary on Windows, and our goal will
    be to configure and build the following example code (`hello-world.cpp`):'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将在Windows上构建Windows二进制文件，我们的目标是配置和构建以下示例代码（`hello-world.cpp`）：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How to do it
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作方法
- en: 'To create the corresponding source code, please follow these steps:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建相应的源代码，请按照以下步骤操作：
- en: Create a directory and place `hello-world.cpp` in the newly created directory.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个目录并将`hello-world.cpp`文件放入新创建的目录中。
- en: 'In this directory, create a `CMakeLists.txt` file which contains the following:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此目录中，创建一个`CMakeLists.txt`文件，其中包含以下内容：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Open Visual Studio 2017, then navigate to the newly created folder which contains
    both the source file and `CMakeLists.txt` by the following File | Open | Folder.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio 2017，然后导航到包含源文件和`CMakeLists.txt`的新建文件夹，通过以下方式：文件 | 打开 | 文件夹。
- en: 'Once the folder is open, notice how the CMake configure step is run automatically
    (bottom panel):'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦文件夹打开，请注意CMake配置步骤是如何自动运行的（底部面板）：
- en: '![](img/455fb1b1-7946-474e-abb3-c8c2c157c7df.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/455fb1b1-7946-474e-abb3-c8c2c157c7df.png)'
- en: 'Now, we can right-click on `CMakeLists.txt` (right panel) and select Build:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以右键单击`CMakeLists.txt`（右侧面板）并选择“构建”：
- en: '![](img/e119f318-5f04-4643-a154-f04eeee87cd9.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e119f318-5f04-4643-a154-f04eeee87cd9.png)'
- en: 'This builds the project (see the output on the bottom panel):'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这构建了项目（请参见底部面板的输出）：
- en: '![](img/093bbdb8-c08f-4a58-bf51-983446b33482.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/093bbdb8-c08f-4a58-bf51-983446b33482.png)'
- en: This successfully compiled the executable. In the next subsection, we will learn
    how to locate the executable and possibly change the build and install paths.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这样就成功编译了可执行文件。在下一个子节中，我们将学习如何定位可执行文件，并可能更改构建和安装路径。
- en: How it works
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理
- en: We have seen that Visual Studio 2017 nicely interfaces to CMake, and we have
    been able to configure and build the code from within the IDE. In addition to
    the build step, we could have run install or test steps. These are accessible
    by right-clicking on `CMakeLists.txt` (right panel).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到，Visual Studio 2017很好地与CMake接口，并且我们已经能够从IDE内部配置和构建代码。除了构建步骤，我们还可以运行安装或测试步骤。这些可以通过右键单击`CMakeLists.txt`（右侧面板）来访问。
- en: 'However, the configuration step was run automatically and we might prefer to
    modify configuration options. We would also like to know the actual build and
    install paths so that we can test our executable. For this, we can select CMake
    | Change CMake Settings, and we arrive at the following screen:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，配置步骤是自动运行的，我们可能更倾向于修改配置选项。我们还希望知道实际的构建和安装路径，以便我们可以测试我们的可执行文件。为此，我们可以选择CMake
    | 更改CMake设置，然后我们到达以下屏幕：
- en: '![](img/b40fbce2-b515-4f7d-9e40-e36da1b31157.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b40fbce2-b515-4f7d-9e40-e36da1b31157.png)'
- en: In the top-left panel, we can now inspect and modify the generator (in this
    case, Ninja), settings, arguments, as well as paths. The build path is highlighted
    in the preceding screenshot. The settings are grouped into build types (`x86-Debug`,
    `x86-Release`, and so on) and we can toggle between these build types in the middle
    of the top panel bar.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在左上角的面板中，我们现在可以检查和修改生成器（在本例中为Ninja）、设置、参数以及路径。构建路径在上面的截图中突出显示。设置被分组到构建类型（`x86-Debug`、`x86-Release`等）中，我们可以在顶部面板栏的中间在这些构建类型之间切换。
- en: 'Now that we know the actual build path, we can test the compiled executable:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道实际的构建路径，我们可以测试编译的可执行文件：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The build and install paths can, of course, be adjusted.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，构建和安装路径可以进行调整。
- en: See also
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: CMake support in Visual Studio: [https://aka.ms/cmake](https://aka.ms/cmake)
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio中的CMake支持：[https://aka.ms/cmake](https://aka.ms/cmake)
- en: Visual C++ for Linux Development with CMake: [https://blogs.msdn.microsoft.com/vcblog/2017/08/25/visual-c-for-linux-development-with-cmake/](https://blogs.msdn.microsoft.com/vcblog/2017/08/25/visual-c-for-linux-development-with-cmake/)
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用CMake进行Linux开发的Visual C++：[https://blogs.msdn.microsoft.com/vcblog/2017/08/25/visual-c-for-linux-development-with-cmake/](https://blogs.msdn.microsoft.com/vcblog/2017/08/25/visual-c-for-linux-development-with-cmake/)
- en: Official documentation for Visual Studio: [https://www.visualstudio.com/vs/features/ide/](https://www.visualstudio.com/vs/features/ide/)
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio的官方文档：[https://www.visualstudio.com/vs/features/ide/](https://www.visualstudio.com/vs/features/ide/)
- en: Cross-compiling a hello world example
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交叉编译一个“Hello World”示例
- en: The code for this recipe is available at [https://github.com/dev-cafe/cmake-cookbook/tree/v1.0/chapter-13/recipe-01](https://github.com/dev-cafe/cmake-cookbook/tree/v1.0/chapter-13/recipe-01) and
    has a C++ example. This recipe is valid with CMake version 3.5 (and higher) and
    has been tested on GNU/Linux and macOS.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方的代码可在[https://github.com/dev-cafe/cmake-cookbook/tree/v1.0/chapter-13/recipe-01](https://github.com/dev-cafe/cmake-cookbook/tree/v1.0/chapter-13/recipe-01)找到，并包含一个C++示例。本配方适用于CMake版本3.5（及以上），并在GNU/Linux和macOS上进行了测试。
- en: In this recipe, we will reuse the "Hello World" example from the previous recipe
    and cross-compile the code from Linux or macOS to Windows. In other words, we
    will configure and compile the code on Linux or macOS and obtain an executable
    for the Windows platform.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将重用上一个配方中的“Hello World”示例，并从Linux或macOS交叉编译到Windows。换句话说，我们将在Linux或macOS上配置和编译代码，并获得一个Windows平台的可执行文件。
- en: Getting ready
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We start with a simple hello world example (`hello-world.cpp`):'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从一个简单的“Hello World”示例开始（`hello-world.cpp`）：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We will also use the unchanged `CMakeLists.txt` from the previous recipe:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将使用上一个配方中未更改的`CMakeLists.txt`：
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: To cross-compile the source code, we will need to install a cross-compiler for
    C++ and optionally for C and Fortran. One option is to use packaged MinGW compilers.
    As an alternative to packaged cross-compilers, we can also build a suite of cross-compilers
    from sources using MXE (the M cross environment): [http://mxe.cc](http://mxe.cc).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为了交叉编译源代码，我们需要安装一个C++的交叉编译器，以及可选的C和Fortran编译器。一个选项是使用打包的MinGW编译器。作为打包的交叉编译器的替代方案，我们还可以使用MXE（M交叉环境）从源代码构建一套交叉编译器：[http://mxe.cc](http://mxe.cc)。
- en: How to do it
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作
- en: 'We will create three files in this cross-compilation "hello world" example
    following these steps:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将按照以下步骤在这个交叉编译的“Hello World”示例中创建三个文件：
- en: Create a directory holding `hello-world.cpp` and `CMakeLists.txt`, which we
    listed previously.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个目录，其中包含`hello-world.cpp`和前面列出的`CMakeLists.txt`。
- en: 'Create a `toolchain.cmake` file which contains the following:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`toolchain.cmake`文件，其中包含以下内容：
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Adjust the `CMAKE_CXX_COMPILER` to the corresponding compiler (path).
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`CMAKE_CXX_COMPILER`调整为相应的编译器（路径）。
- en: 'Then, configure the code by pointing `CMAKE_TOOLCHAIN_FILE` to the toolchain
    file (in this example, the MXE compilers built from sources were used):'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，通过指向`CMAKE_TOOLCHAIN_FILE`到工具链文件来配置代码（在本例中，使用了从源代码构建的MXE编译器）：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, let us build the executable:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们构建可执行文件：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note that we have obtained `hello-world.exe` on Linux. Copy the binary to a
    Windows computer.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，我们在Linux上获得了`hello-world.exe`。将二进制文件复制到Windows计算机。
- en: 'On a Windows computer, we can observe the following output:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Windows计算机上，我们可以观察到以下输出：
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As you can see, the binary works on Windows!
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如您所见，该二进制文件在Windows上运行！
- en: How it works
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的
- en: Since we configure and build the code on a host environment (in this case, GNU/Linux
    or macOS) that is different than the target environment (Windows), we need to
    provide CMake with information about the target environment which we have encoded
    in the `toolchain.cmake` file ([https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html#cross-compiling](https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html#cross-compiling)).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在与目标环境（Windows）不同的宿主环境（在这种情况下，GNU/Linux或macOS）上配置和构建代码，我们需要向CMake提供有关目标环境的信息，我们已经在`toolchain.cmake`文件中对其进行了编码（[https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html#cross-compiling](https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html#cross-compiling)）。
- en: 'First and foremost, we provide the name of the target operating system:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们提供目标操作系统的名称：
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then, we specify the compiler(s), for instance:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们指定编译器，例如：
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In this simple example, we did not have to detect any libraries or header files
    but, if we had to, we would specify the root path using the following:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个简单的例子中，我们不需要检测任何库或头文件，但如果需要，我们将使用以下方式指定根路径：
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The target environment can, for instance, be the one provided by an MXE installation.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 目标环境可以是例如由MXE安装提供的环境。
- en: 'Finally, we adjust the default behavior of the find commands. We instruct CMake
    to search headers and libraries in the target environment:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们调整find命令的默认行为。我们指示CMake在目标环境中搜索头文件和库：
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'And to search programs in the host environment:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 并在宿主环境中搜索程序：
- en: '[PRE15]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: See also
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: For a more detailed discussion of the various options, see [https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html#cross-compiling](https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html#cross-compiling).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 有关各种选项的更详细讨论，请参阅[https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html#cross-compiling](https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html#cross-compiling)。
- en: Cross-compiling a Windows binary with OpenMP parallelization
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用OpenMP并行化交叉编译Windows二进制文件
- en: The code for this recipe is available at [https://github.com/dev-cafe/cmake-cookbook/tree/v1.0/chapter-13/recipe-02](https://github.com/dev-cafe/cmake-cookbook/tree/v1.0/chapter-13/recipe-02) and
    has a C++ and Fortran example. The recipe is valid with CMake version 3.9 (and
    higher) and has been tested on GNU/Linux.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱的代码可在[https://github.com/dev-cafe/cmake-cookbook/tree/v1.0/chapter-13/recipe-02](https://github.com/dev-cafe/cmake-cookbook/tree/v1.0/chapter-13/recipe-02)找到，并包含C++和Fortran示例。本食谱适用于CMake版本3.9（及以上），并在GNU/Linux上进行了测试。
- en: 'In this recipe, we will apply what we have learned in the previous recipe,
    albeit to a more interesting and realistic example: we will cross-compile a Windows
    binary which is parallelized using OpenMP.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将应用在前一个食谱中学到的知识，尽管是针对一个更有趣和更现实的例子：我们将交叉编译一个使用OpenMP并行化的Windows二进制文件。
- en: Getting ready
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We will use the unmodified source code from [Chapter 3](b290655b-ba55-46bf-80cf-9e65eab8a394.xhtml), *Detecting
    External Libraries and Programs,* Recipe 5, *Detecting the OpenMP parallel environment*.
    The example code sums up all natural numbers up to *N* (`example.cpp`):'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用[第3章](b290655b-ba55-46bf-80cf-9e65eab8a394.xhtml)，*检测外部库和程序*，食谱5，*检测OpenMP并行环境*中的未修改源代码。示例代码计算所有自然数到*N*的总和（`example.cpp`）：
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `CMakeLists.txt` file is largely unchanged with respect to [Chapter 3](b290655b-ba55-46bf-80cf-9e65eab8a394.xhtml),
    *Detecting External Libraries and Programs,* Recipe 5, *Detecting the OpenMP parallel
    environment*, except there is an additional install target:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`CMakeLists.txt`文件与[第3章](b290655b-ba55-46bf-80cf-9e65eab8a394.xhtml)，*检测外部库和程序*，食谱5，*检测OpenMP并行环境*相比，基本上没有变化，除了增加了一个安装目标：'
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: How to do it
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作
- en: 'With the following steps, we will manage to cross-compile an OpenMP-parallelized
    Windows executable:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以下步骤，我们将能够交叉编译一个使用OpenMP并行化的Windows可执行文件：
- en: Create a directory holding `example.cpp` and `CMakeLists.txt`, which we listed
    previously.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个目录，其中包含之前列出的`example.cpp`和`CMakeLists.txt`。
- en: 'We will use the same `toolchain.cmake` as in the previous recipe:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用与前一个食谱相同的`toolchain.cmake`：
- en: '[PRE18]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Adjust the `CMAKE_CXX_COMPILER` to the corresponding compiler (path).
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`CMAKE_CXX_COMPILER`调整为相应的编译器（路径）。
- en: 'Then, configure the code by pointing `CMAKE_TOOLCHAIN_FILE` to the toolchain
    file (in this example, the MXE compilers built from sources were used):'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，通过指向`CMAKE_TOOLCHAIN_FILE`到工具链文件来配置代码（在本例中，使用了从源代码构建的MXE编译器）：
- en: '[PRE19]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, let us build the executable:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们构建可执行文件：
- en: '[PRE20]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Copy the binary `example.exe` to a Windows computer.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将二进制文件`example.exe`复制到Windows计算机。
- en: 'On a Windows computer, we can see the following example output:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Windows计算机上，我们可以看到以下示例输出：
- en: '[PRE21]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: As we can see, the binary works on Windows and we can observe a speed-up thanks
    to the OpenMP parallelization!
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如我们所见，二进制文件在Windows上运行，并且我们可以观察到由于OpenMP并行化带来的速度提升！
- en: How it works
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的
- en: We have successfully built an executable for parallel execution on the Windows
    platform using cross-compilation with a simple toolchain. We were able to specify
    the number of OpenMP threads by setting `OMP_NUM_THREADS`. Going from 1 thread
    to 2 threads, we have observed a reduction of runtime from 2.6 to 1.3 seconds.
    For a discussion of the toolchain file, please see the previous recipe.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已成功使用简单的工具链进行交叉编译，在Windows平台上构建了用于并行执行的可执行文件。我们能够通过设置`OMP_NUM_THREADS`来指定OpenMP线程的数量。从1个线程增加到2个线程，我们观察到运行时间从2.6秒减少到1.3秒。有关工具链文件的讨论，请参阅之前的配方。
- en: There is more
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多
- en: It is possible to cross-compile for a set of target platforms, for instance,
    Android. For examples, we refer the reader to [https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html](https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 可以为一组目标平台进行交叉编译，例如Android。有关示例，我们请读者参考[https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html](https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html)。
