- en: Chapter 5. Performance Optimization with Qt Creator
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。使用Qt Creator进行性能优化
- en: We don't use performance analysis tools every day, but we're glad they're there
    when we need them. Commercial tools like the ones that come with Microsoft Visual
    Studio or standalone tools such as IBM's Rational Rose Purify can set you back
    a pretty pile of change—fortunately, Qt Creator has most of what you need built-in,
    or has support for working with open source tools to help you profile the runtime
    and memory performance of your application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们并不是每天都使用性能分析工具，但当我们需要时，我们很高兴它们存在。商业工具，如与Microsoft Visual Studio一起提供的工具或IBM的Rational
    Rose Purify等独立工具，可能会花费大量资金，幸运的是，Qt Creator大部分所需的功能都内置了，或者支持使用开源工具来帮助您分析应用程序的运行时和内存性能。
- en: In this chapter, we will see how we can perform runtime profiling of QML applications
    using the QML performance analyzer, and learn how to read the report it generates.
    We then turn our attention to memory performance analysis with Valgrind using
    Qt Creator, which is a free option to look for memory leaks and heap corruption
    on the Linux platform.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到如何使用QML性能分析器对QML应用程序进行运行时分析，并学习如何阅读其生成的报告。然后，我们将关注使用Qt Creator进行内存性能分析，使用Valgrind在Linux平台上查找内存泄漏和堆损坏的免费选项。
- en: The QML performance analyzer
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QML性能分析器
- en: 'Qt Quick applications are supposed to be fast, with smooth, fluid user interfaces.
    In many cases, that''s easy to accomplish with QML; the contributors to QML and
    the Qt Quick runtime have put a great deal of effort into creating an environment
    that performs well under a wide variety of circumstances. Sometimes, however,
    try as you might, you may find that you just can''t squeeze the performance that
    you''d like out of your application. Some mistakes are obvious, such as:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Quick应用程序应该快速，具有流畅的用户界面。在许多情况下，使用QML可以轻松实现这一点；QML和Qt Quick运行时的贡献者们在创建一个在各种情况下表现良好的环境方面付出了大量努力。然而，有时，尽最大努力，您可能会发现无法使应用程序的性能达到您想要的水平。有些错误是显而易见的，比如：
- en: Doing a lot of compute-intensive tasks between state changes or actions that
    trigger drawing operations
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在状态更改或触发绘图操作的操作之间执行大量计算密集型任务
- en: Excessively complex view hierarchies with thousands of elements on the display
    at once
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过于复杂的视图层次结构，一次显示数千个元素
- en: Running on very limited hardware (often in combination with the first two problems)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在非常有限的硬件上运行（通常与前两个问题结合使用）
- en: Knuth famously said that "Premature optimization is the root of all evil", and
    he's definitely right. However, there might come a time when you need to measure
    the performance of your application, and Qt Creator includes a special performance
    analyzer for just this purpose. With it, you can see how much time your application
    spends in each QML method, as well as measure critical aspects of your application
    that are at the edge of your control, like how long it takes to create your application's
    view hierarchy.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Knuth曾经说过，“过早优化是万恶之源”，他绝对是对的。但是，也许会有一段时间，您需要测量应用程序的性能，Qt Creator包含了一个专门用于此目的的性能分析器。使用它，您可以看到应用程序在每个QML方法中花费了多少时间，以及测量应用程序的关键方面，这些方面可能超出您的控制，比如创建应用程序的视图层次结构需要多长时间。
- en: Let's take a closer look.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们仔细看看。
- en: QtSlowButton – a Qt Quick application in need of performance tuning
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: QtSlowButton-需要性能调优的Qt Quick应用程序
- en: 'Let''s analyze the performance of `QtSlowButton`, a poorly-performing example
    program I put together for you in this chapter. `QtSlowButton` has two QML components:
    a button based on the calculator button from [Chapter 3](ch03.html "Chapter 3. Designing
    Your Application with Qt Designer"), *Designing Your Application with Qt Designer*,
    and a view with buttons you can press. Here''s the implementation of the button:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析“QtSlowButton”的性能，这是我在本章为您准备的性能不佳的示例程序。 “QtSlowButton”有两个QML组件：一个基于[第3章](ch03.html
    "第3章。使用Qt Designer设计您的应用程序")中的计算器按钮的按钮，*使用Qt Designer设计您的应用程序*，以及一个带有可按的按钮的视图。这是按钮的实现：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Each button simply runs a `for` loop when you push it; its `delay` property
    controls how many times it cycles through the loop. In addition, each button has
    a label, which the button draws in the center of the clickable area.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 每个按钮在按下时都简单地运行一个`for`循环；其`delay`属性控制循环运行的次数。此外，每个按钮都有一个标签，按钮会在可点击区域的中心绘制该标签。
- en: 'The main user interface consists of three buttons in a `Column region`, labeled
    `fast`, `medium`, and `slow`, with progressively longer delays:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 主用户界面由三个按钮组成，位于“列区域”，标有“快速”、“中等”和“慢速”，延迟逐渐增加：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can either load the source project that comes with this book for this example,
    or you can create a new Qt Quick project and make a button and main view with
    this code.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以加载本书附带的源项目，也可以创建一个新的Qt Quick项目，并使用此代码创建一个按钮和主视图。
- en: 'To analyze the application''s performance:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 分析应用程序的性能：
- en: Build the application.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建应用程序。
- en: Choose **QML Profiler** from the **Analyze** menu. The application will start,
    and Qt Creator will switch to the **Analyze** view.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**分析**菜单中选择**QML Profiler**。应用程序将启动，Qt Creator将切换到**分析**视图。
- en: In the application itself, click on each application button a few times. You
    will be expected to wait after you click on each button.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序本身中，单击每个应用程序按钮几次。单击每个按钮后，您将需要等待。
- en: Quit the application.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 退出应用程序。
- en: Tip
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The QML Profiler uses TCP/IP to make a connection between the running application
    and the profiler, by default on port 3768\. You may need to tinker with your host's
    firewall settings to get things to work correctly. On Windows, be sure to permit
    the connection in the **Windows Firewall** dialog that appears.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: QML Profiler使用TCP/IP在默认端口3768上运行的应用程序和分析器之间建立连接。您可能需要调整主机防火墙设置以确保正确运行。在Windows上，请务必允许**Windows防火墙**对话框中的连接。
- en: 'The following screenshot shows the **Analyze** view after running your application.
    The QML Profiler has three tabs, and shows the first by default:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 下一张截图显示了运行应用程序后的**分析**视图。QML Profiler有三个标签，默认显示第一个：
- en: The first tab is the timeline, indicating what things happened at what point
    through the application, and how long they took
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个标签是时间轴，指示应用程序中的事情发生在什么时候，以及它们花费了多长时间
- en: The second tab lists the events the QML application processed, and how much
    time was spent in each event
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个标签列出了QML应用程序处理的事件，以及每个事件花费了多少时间
- en: The third tab lists the JavaScript functions the program encountered while running,
    and how long the application spent in total to run each function
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个标签列出了程序在运行时遇到的JavaScript函数，以及应用程序总共花费多长时间来运行每个函数
- en: 'In the following screenshot, I''ve clicked on the **Handling Signal** row to
    expand the signals the application handled. You can see it handled one signal,
    `onClicked`, a total of three times, and the amount of time spent in each is shown
    as varying bars on the graph. Clearly, if the application were doing something
    that could be optimized, there''d be an opportunity for performance improvement
    here:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一张截图中，我点击了**处理信号**行以展开应用程序处理的信号。你可以看到它处理了一个名为`onClicked`的信号，共三次，并且每次花费的时间都显示在图表上。显然，如果应用程序正在执行可以优化的操作，那么在这里就有性能改进的机会：
- en: '![QtSlowButton – a Qt Quick application in need of performance tuning](img/2319OS_05_01.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![QtSlowButton – 需要性能调优的Qt Quick应用程序](img/2319OS_05_01.jpg)'
- en: The Timeline view, showing how much time was spent in my onClicked method
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 时间轴视图，显示了在我的onClicked方法中花费的时间
- en: 'The next screenshot shows a different view of this information, indicating
    that up to the limit of numerical accuracy, the application spent all of its measured
    time in the `onClicked` handler for the button: clearly a performance "hot spot"
    in this case. Interestingly, every incident of my JavaScript is measured here,
    including the `$when` clause that puts the opaque filter in front of the button
    when it''s pressed. Looking at the **JavaScript** view can be very helpful if
    you need to look at where things are happening in your application in a broad
    sense:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 下一张截图显示了这些信息的不同视图，表明在数值精度的限制下，应用程序在按钮的`onClicked`处理程序中花费了所有测量时间：显然，这是性能上的“热点”。有趣的是，这里测量了我JavaScript的每一个事件，包括按下按钮时将不透明滤镜放在按钮前面的`$when`子句。从**JavaScript**视图中查看可以帮助你在广义上了解应用程序中发生的事情：
- en: '![QtSlowButton – a Qt Quick application in need of performance tuning](img/2319OS_05_02.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![QtSlowButton – 需要性能调优的Qt Quick应用程序](img/2319OS_05_02.jpg)'
- en: The total time spent running different bits of JavaScript in QtSlowButton
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在QtSlowButton中运行不同JavaScript部分所花费的总时间
- en: 'The next screenshot is likely the most interesting for performance geeks, because
    it shows the amount of time QML spent for each and every event it handled running
    the application. Again, we see the `onClicked` handler consuming the lion''s share
    of the processor resources, but other things like the creation of the rectangles
    for the view and the variable binding for the state of a push button are shown
    as well. Typically, we''ll use the **JavaScript** view to get the broad picture
    of where the problems in your application are, while you''ll use the **Events**
    view to zero in on specific problems:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 下一张截图可能是性能极客最感兴趣的，因为它显示了QML在运行应用程序时处理的每一个事件所花费的时间。同样，我们看到`onClicked`处理程序占用了大部分处理器资源，但还显示了其他一些事情，比如为视图创建矩形和按钮状态的变量绑定。通常，我们会使用**JavaScript**视图来了解应用程序中的问题所在，而使用**Events**视图来专注于特定问题：
- en: '![QtSlowButton – a Qt Quick application in need of performance tuning](img/2319OS_05_03.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![QtSlowButton – 需要性能调优的Qt Quick应用程序](img/2319OS_05_03.jpg)'
- en: The Events view of the QML Profiler, showing each and every event in QtSlowButton
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: QML Profiler的Events视图，显示了QtSlowButton中的每一个事件
- en: Finding memory leaks with Valgrind
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Valgrind查找内存泄漏
- en: As we discussed in [Chapter 3](ch03.html "Chapter 3. Designing Your Application
    with Qt Designer"), *Designing Your Application with Qt Designer*, you should
    really get in the habit of using Qt's parent-child relationship when managing
    memory for classes of `QObject` in your application to avoid memory leaks. In
    my time writing Qt applications, the only time I've had to deal with memory leaks
    was when I didn't do that. In addition, using classes such as `QSharedPointer`
    for pointers that aren't based on `QObject` is a good idea too.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第3章](ch03.html "第3章。使用Qt Designer设计您的应用程序")中讨论的那样，*使用Qt Designer设计您的应用程序*，在管理应用程序中的`QObject`类的内存时，您应该养成使用Qt的父子关系的习惯，以避免内存泄漏。在我编写Qt应用程序的时候，唯一遇到内存泄漏的情况是当我没有这样做的时候。此外，对于不基于`QObject`的指针，也应该使用`QSharedPointer`等类。
- en: Sometimes, though, you may introduce a memory leak you can't find on your own.
    In that case, a tool such as Valgrind can be a lifesaver; it tracks every memory
    allocation and free operation in your application, alerting you when your program
    terminates if it hasn't freed all the memory it allocates.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有时候您可能会引入一个自己找不到的内存泄漏。在这种情况下，像Valgrind这样的工具可能会拯救你；它会跟踪应用程序中的每个内存分配和释放操作，在程序终止时提醒您，如果它没有释放所有分配的内存。
- en: Unfortunately, Valgrind is a Linux-only tool. If you're writing pure Qt code,
    this shouldn't be a serious issue for you even if you're developing on Windows
    or Mac OS X, because you can port your application to Linux and run it in Valgrind
    there. To do that, you'll want to use an application such as VMware Fusion, VMware
    Player, Microsoft HyperV, or Parallels to set up a virtual machine running Linux
    (I like to use Ubuntu), install Qt Creator, and get your code running there. (Unfortunately,
    if you have Windows-specific code or libraries in your application, this isn't
    an option.)
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，Valgrind是一个仅适用于Linux的工具。如果您编写纯Qt代码，即使在Windows或Mac OS X上开发，这对您来说也不是一个严重的问题，因为您可以将应用程序移植到Linux并在那里运行Valgrind。为此，您需要使用诸如VMware
    Fusion、VMware Player、Microsoft HyperV或Parallels之类的应用程序来设置运行Linux的虚拟机（我喜欢使用Ubuntu），安装Qt
    Creator，并在那里运行您的代码。（不幸的是，如果您的应用程序中有特定于Windows的代码或库，这不是一个选择。）
- en: Tip
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you build your application for Windows, a commercial leak detector such as
    Rational Purify may be an option.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您为Windows构建应用程序，商业泄漏检测器如Rational Purify可能是一个选择。
- en: 'Before continuing, you should make sure you have Qt Creator running under a
    Linux distribution, and install Valgrind from [http://bit.ly/14QwiQZ](http://bit.ly/14QwiQZ)
    or use your package manager. For example, on Ubuntu, I can install Valgrind with
    the following command:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，您应该确保您的Qt Creator在Linux发行版下运行，并从[http://bit.ly/14QwiQZ](http://bit.ly/14QwiQZ)安装Valgrind，或者使用您的软件包管理器。例如，在Ubuntu上，我可以使用以下命令安装Valgrind：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: When you use Valgrind, you actually run your application inside of Valgrind;
    instead of starting your application, you start Valgrind, which starts your application.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用Valgrind时，实际上是在Valgrind内运行您的应用程序；而不是启动您的应用程序，您启动Valgrind，然后启动您的应用程序。
- en: QtLeakyButton – a Qt C++ application in need of memory help
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: QtLeakyButton-一个需要内存帮助的Qt C++应用程序
- en: 'The `QtLeakyButton` application does one thing: it presents a button that when
    clicked, allocates 512 KB of RAM. The following is the code (you can either run
    the sample that accompanies this book, or create a Qt GUI application with a single
    button and a label and use this code for your `MainWindow` class):'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`QtLeakyButton`应用程序只做一件事：它呈现一个按钮，当点击时，会分配512KB的RAM。以下是代码（您可以运行本书附带的示例，或者创建一个带有单个按钮和标签的Qt
    GUI应用程序，并将此代码用于您的`MainWindow`类）：'
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `MainWindow` class has an integer counter and a `ui` slot for the instantiated
    form. The `MainWindow` constructor instantiates this form, and then connects the
    `clicked` signal of `leakButton` to `MainWnidow::leakPressed`. The `leakPressed`
    method just allocates memory and bumps the counter, updating the counter with
    the number of times you've pressed the button.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`MainWindow`类有一个整数计数器和一个用于实例化表单的`ui`插槽。`MainWindow`构造函数实例化此表单，然后将`leakButton`的`clicked`信号连接到`MainWnidow::leakPressed`。`leakPressed`方法只是分配内存并增加计数器，更新计数器以显示您按下按钮的次数。'
- en: 'To use Valgrind, we need to add a new run target to your application. To accomplish
    this, do the following:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Valgrind，我们需要为您的应用程序添加一个新的运行目标。为此，请执行以下操作：
- en: Click on **Projects** on the left, and then on **Run**.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧点击**项目**，然后点击**运行**。
- en: Click on **Add**.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加**。
- en: For **Name**, enter `valgrind`.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**名称**，输入`valgrind`。
- en: For **Executable**, add the path to Valgrind (usually `/usr/bin/valgrind`).
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**可执行文件**，添加Valgrind的路径（通常为`/usr/bin/valgrind`）。
- en: 'For arguments, enter the following:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于参数，输入以下内容：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: For **Working Directory**, enter `$BUILDDIR`.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**工作目录**，输入`$BUILDDIR`。
- en: Now we can select the Valgrind run target for your application. We need to do
    this with the debug build because Valgrind needs the debug symbols in our application
    to produce a meaningful report. To use Valgrind, start the application and click
    on the button a few times. The Valgrind process outputs information continually,
    but most of the output comes after we quit the application.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以为您的应用程序选择Valgrind运行目标。我们需要使用调试构建，因为Valgrind需要我们应用程序中的调试符号来生成有意义的报告。要使用Valgrind，启动应用程序并点击按钮几次。Valgrind进程会持续输出信息，但大部分输出是在我们退出应用程序后才出现的。
- en: 'Valgrind produces a lot of output, which can take some time to sort through.
    We''re looking for the leak summary, which indicates the number of bytes definitely
    lost and indirectly lost. The blocks that are definitely lost are memory you''ve
    allocated and not freed; indirectly lost memory is memory leaked because it''s
    referred to by another pointer, and the referring pointer wasn''t freed. The output
    will look something like:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Valgrind会产生大量输出，需要一些时间来整理。我们正在寻找泄漏摘要，其中指示了明确丢失和间接丢失的字节数。明确丢失的块是您分配但未释放的内存；间接丢失的内存是因为它被另一个指针引用而泄漏，而引用指针未被释放。输出将看起来像：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here, `X` indicates the number of bytes that were leaked, and the address of
    the leaked block is shown on the second line. The record numbers indicate internal
    record numbers used by the application's memory allocator, and probably won't
    help you very much.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`X`表示泄漏的字节数，并且泄漏块的地址显示在第二行上。记录号表示应用程序内存分配器使用的内部记录号，可能对您没有太大帮助。
- en: 'We should really focus on leaks in our application, because it''s possible
    that Qt may have leaks of its own. Valgrind supports suppression files, which
    indicate what leaks should be ignored; if you can find and download one for the
    versions of Qt you''re building against, you can include a reference to the suppression
    file by modifying the argument line to read:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该真正关注我们的应用程序中的内存泄漏，因为Qt可能会有自己的内存泄漏。Valgrind支持抑制文件，指示应忽略哪些泄漏；如果您可以找到并下载一个适用于您构建的Qt版本的抑制文件，您可以通过修改参数行来包含对抑制文件的引用：
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Finding memory leaks in your application is part art and part science. It's
    a good exercise to go through periodically during application development, to
    ensure that leaks you may introduce are quickly found while you're most familiar
    with the new code you're running.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的应用程序中查找内存泄漏是一部分艺术和一部分科学。这是一个很好的练习，在应用程序开发过程中定期进行，以确保您可能引入的泄漏在您最熟悉运行的新代码时能够快速发现。
- en: Summary
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Qt Creator provides the QML analyzer, which lets you perform runtime analysis
    of your Qt applications. You can see a graph in time of how your application is
    running, as well as dive into detail about how your application spends its time
    drawing, binding to variables, and executing JavaScript.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Creator提供了QML分析器，让您可以对Qt应用程序进行运行时分析。您可以看到应用程序运行的时间图表，以及深入了解应用程序如何花费时间进行绘制、绑定变量和执行JavaScript。
- en: Qt Creator also integrates well with Valgrind on Linux, letting you look for
    memory leaks in your application. Using Valgrind on Linux, you can see blocks
    that were allocated but not freed, and more importantly, how big they are and
    where in the code they were allocated, giving you a head start in determining
    why they were not freed.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Creator还与Linux上的Valgrind很好地集成，让您可以查找应用程序中的内存泄漏。在Linux上使用Valgrind，您可以看到已分配但未释放的内存块，更重要的是，它们有多大以及在代码中的分配位置，让您可以提前确定为什么它们没有被释放。
- en: 'In the next chapter, we turn from specific parts of Qt Creator to one of its
    most exciting aspects in general: the ability to use Qt Creator to compile and
    test applications for mobile platforms such as Google Android.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将从Qt Creator的特定部分转向其最激动人心的一般方面之一：使用Qt Creator编译和测试Google Android等移动平台的应用程序的能力。
