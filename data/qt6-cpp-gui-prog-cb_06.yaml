- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Transitioning from Qt 5 to Qt 6
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 Qt 5 到 Qt 6 的过渡
- en: In this chapter, we will learn about the changes that have been made in **Qt
    6** and how you can upgrade your existing Qt 5 project to Qt 6\. Unlike previous
    updates, Qt 6 is almost a complete rewrite of the entire Qt code base from the
    ground up, including all the underlying classes. Such major changes may break
    your existing Qt 5 project if you simply switch over to Qt 6.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将了解 Qt 6 中所做的更改以及如何将现有的 Qt 5 项目升级到 Qt 6。与之前的更新不同，Qt 6 几乎是从头到尾重写了整个 Qt
    代码库，包括所有底层类。这些重大更改可能会破坏你现有的 Qt 5 项目，如果你只是切换到 Qt 6。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Changes in C++ classes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C++ 类更改
- en: Using **Clazy checks** for Clang and C++
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 **Clazy 检查** 对 Clang 和 C++ 进行检查
- en: Changes in QML types
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: QML 类型更改
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The technical requirements for this chapter include Qt 6.6.1 MinGW 64-bit,
    Qt 5.15.2 MinGW 64-bit, and Qt Creator 12.0.2\. All the code used in this chapter
    can be downloaded from the following GitHub repository: [https://github.com/PacktPublishing/QT6-C-GUI-Programming-Cookbook---Third-Edition-/tree/main/Chapter06](https://github.com/PacktPublishing/QT6-C-GUI-Programming-Cookbook---Third-Edition-/tree/main/Chapter06).'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的技术要求包括 Qt 6.6.1 MinGW 64 位、Qt 5.15.2 MinGW 64 位和 Qt Creator 12.0.2。本章中使用的所有代码都可以从以下
    GitHub 仓库下载：[https://github.com/PacktPublishing/QT6-C-GUI-Programming-Cookbook---Third-Edition-/tree/main/Chapter06](https://github.com/PacktPublishing/QT6-C-GUI-Programming-Cookbook---Third-Edition-/tree/main/Chapter06)。
- en: Changes in C++ classes
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C++ 类更改
- en: In this recipe, we will learn what the changes in Qt6’s C++ classes are.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将了解 Qt6 的 C++ 类发生了哪些变化。
- en: How to do it…
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现…
- en: 'Follow these steps to learn about C++ classes in Qt6:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤了解 Qt6 中的 C++ 类：
- en: Create a new **Qt Console Application** by going to **File** | **New Project**.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过访问 **文件** | **新建项目** 创建一个新的 **Qt 控制台应用程序**。
- en: 'We will open up the `main.cpp` file and add the following headers:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将打开 `main.cpp` 文件并添加以下头文件：
- en: '[PRE0]'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After that, add the following code for demonstrating the `QLinkedList` class:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，添加以下代码以演示 `QLinkedList` 类：
- en: '[PRE1]'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: // QRegExp
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: // QRegExp
- en: QRegExp rx("\\d+");
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: QRegExp rx("\\d+");
- en: QString text = "Jacky has 3 carrots, 15 apples, 9 oranges and 12 grapes.";
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: QString text = "Jacky 有 3 个胡萝卜，15 个苹果，9 个橙子和 12 个葡萄。";
- en: QStringList myList;
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: QStringList myList;
- en: int pos = 0;
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: int pos = 0;
- en: while ((pos = rx.indexIn(text, pos)) != -1)
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: while ((pos = rx.indexIn(text, pos)) != -1)
- en: '{'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{'
- en: // Separate all numbers from the sentence
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: // 从句子中分离所有数字
- en: myList << rx.cap(0);
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: myList << rx.cap(0);
- en: pos += rx.matchedLength();
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: pos += rx.matchedLength();
- en: '}'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: qDebug() << "QRegExp:" << myList;
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: qDebug() << "QRegExp:" << myList;
- en: '[PRE2]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We then follow by adding the following code at the bottom of the preceding
    code to demonstrate the `QStringView` class:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在前面代码的底部添加以下代码以演示 `QStringView` 类：
- en: '[PRE3]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Not only that, but we are also adding the following code to demonstrate the
    `QTextCodec` class:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不仅如此，我们还在此添加以下代码以演示 `QTextCodec` 类：
- en: '[PRE4]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, add the following code, which demonstrates how to convert hexadecimal
    code to a character using the `QTextEncoder` class:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，添加以下代码，该代码演示了如何使用 `QTextEncoder` 类将十六进制代码转换为字符：
- en: '[PRE6]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let’s also add the following code to demonstrate how to convert a line of text
    from Shift JIS format to Unicode by using the `QTextDecoder` class:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们再添加以下代码来演示如何使用 `QTextDecoder` 类将一行文本从 Shift JIS 格式转换为 Unicode：
- en: '[PRE7]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now that we’re done with the code, let’s try and compile the project using
    Qt 5 for now and see what will happen. Your program should compile just fine and
    give you the following results in the output window:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经完成了代码，让我们尝试使用 Qt 5 编译项目，看看会发生什么。你的程序应该可以正常编译，并在输出窗口中显示以下结果：
- en: '[PRE8]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, let’s change to Qt 6 and compile the project again, you should get errors
    like this:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们切换到 Qt 6 并重新编译项目，你应该会得到如下错误：
- en: '[PRE9]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Open up your project file (`.pro`) and add the following code at the top:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的项目文件（`.pro`）并在顶部添加以下代码：
- en: '[PRE10]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Finally, compile the project again with Qt 6\. You should be able to run it
    this time. `core5compat` is just a temporary solution for transitioning from Qt
    5 to Qt 6\. You may change to use `std::list` to replace `QLinkedList` since it
    will be deprecated in the future.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，再次使用 Qt 6 编译项目。这次你应该能够运行它。`core5compat` 只是过渡从 Qt 5 到 Qt 6 的临时解决方案。你可以改为使用
    `std::list` 来替换 `QLinkedList`，因为将来它将被弃用。
- en: How it works…
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: We don’t need any GUIs since we are just testing out some of the C++ classes,
    so the `QDebug` class to print out the results in the output window.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要任何 GUI，因为我们只是测试一些 C++ 类，所以使用 `QDebug` 类在输出窗口中打印结果。
- en: In the preceding example, we used some of the classes that have been deprecated
    in Qt 6, namely `QLinkedList`, `QRegExp`, `QStringView`, `QTextCodec`, `QTextEncoder`,
    and `QTextDecoder`. These are just some of the common classes that we will encounter
    when using Qt, which have been rewritten in Qt 6\. If you are porting your project
    from Qt 5 to 6, the best way is to add the `Core5Compat` module to your project
    so that Qt 5 classes can continue to run under Qt 6\. The `Core5Compat` module
    is a temporary measure for supporting Qt 5 classes under Qt 6 projects so that
    Qt programmers can safely move their projects to Qt 6 and take their time to slowly
    port their code over to Qt 6 classes.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一个示例中，我们使用了一些在 Qt 6 中已弃用的类，即 `QLinkedList`、`QRegExp`、`QStringView`、`QTextCodec`、`QTextEncoder`
    和 `QTextDecoder`。这些只是我们在使用 Qt 时会遇到的一些常见类，它们在 Qt 6 中已被重写。如果您正在将项目从 Qt 5 迁移到 6，最佳做法是将
    `Core5Compat` 模块添加到您的项目中，以便 Qt 5 类可以在 Qt 6 下继续运行。`Core5Compat` 模块是在 Qt 6 项目下支持
    Qt 5 类的临时措施，以便 Qt 程序员可以安全地将项目迁移到 Qt 6，并有时间将代码逐步迁移到 Qt 6 类。
- en: The `Core5Compat` module will stop working when you move to Qt 7, so it’s not
    recommended to keep using the deprecated classes for too long.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当您迁移到 Qt 7 时，`Core5Compat` 模块将停止工作，因此不建议长时间使用弃用的类。
- en: There’s more…
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: In Qt 6, a lot of the core functionality has been rewritten from scratch to
    keep the library up to date with the modern computing architecture and workflow.
    Thus, Qt 6 is considered a transitional phase where some classes have been completed
    and some have not.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Qt 6 中，许多核心功能是从头开始重写的，以使库与现代计算架构和工作流程保持最新。因此，Qt 6 被视为一个过渡阶段，其中一些类已完成，而另一些尚未完成。
- en: In order for it to work, Qt developers introduced the `Core5Compat` module to
    make it easier for Qt programmers to keep their projects going while slowly transitioning
    over to the new classes. You can check out what the replacements for these classes
    are from the official online documentation.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使其正常工作，Qt 开发者引入了 `Core5Compat` 模块，以便 Qt 程序员在逐渐过渡到新类的同时更容易保持他们的项目运行。您可以从官方在线文档中查看这些类的替代方案。
- en: Lastly, Qt 6 is now leveraging on C++ 17\. It’s highly recommended for your
    project to adhere to C++ 17 standards so that your code can work nicely with Qt
    6.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Qt 6 现在正在利用 C++ 17。强烈建议您的项目遵循 C++ 17 标准，以便您的代码可以很好地与 Qt 6 一起工作。
- en: Note
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'There are many other C++ classes that have been deprecated or are being rewritten
    in Qt 6; please refer to this link to check the full list of C++ classes that
    have been changed or deprecated in Qt 6: [https://doc.qt.io/qt-6/obsoleteclasses.html](https://doc.qt.io/qt-6/obsoleteclasses.html).
    You may also add the `QT_DISABLE_DEPRECATED_UP_TO` macro to your Qt project to
    disable the use of deprecated C++ APIs in your project. For example, adding `DEFINES
    += QT_DISABLE_DEPRECATED_UP_TO=0x050F00` to your profile will disable all C++
    APIs deprecated in Qt 5.15.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Qt 6 中，许多其他 C++ 类已被弃用或正在被重写；请参阅此链接以检查 Qt 6 中已更改或弃用的完整 C++ 类列表：[https://doc.qt.io/qt-6/obsoleteclasses.html](https://doc.qt.io/qt-6/obsoleteclasses.html)。您还可以将
    `QT_DISABLE_DEPRECATED_UP_TO` 宏添加到您的 Qt 项目中，以禁用项目中弃用的 C++ API。例如，将 `DEFINES +=
    QT_DISABLE_DEPRECATED_UP_TO=0x050F00` 添加到您的配置文件中将禁用 Qt 5.15 中弃用的所有 C++ API。
- en: Using Clazy checks for Clang and C++
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Clazy 检查 Clang 和 C++
- en: In this chapter, we will learn how to use the Clazy checks from the Clang toolset
    to automatically display warnings when obsolete Qt 5 classes and functions are
    detected in your Qt project.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何使用 Clang 工具集中的 Clazy 检查，在您的 Qt 项目中检测到已弃用的 Qt 5 类和函数时自动显示警告。
- en: How to do it…
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Let’s get started by following these steps:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下步骤开始：
- en: We will use the same project from the preceding example. Then, proceed to open
    up the preferences window by going to **Edit** | **Preferences…**.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用前一个示例中的相同项目。然后，通过转到 **编辑** | **首选项…** 来打开首选项窗口。
- en: 'After that, go to the **Analyzer** page and click on the button beside **Diagnostic
    configuration**:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，转到 **分析器** 页面并单击 **诊断配置** 旁边的按钮：
- en: '![Figure 6.1 – Open up the Diagnostic configuration window](img/B20976_06_001.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.1 – 打开诊断配置窗口](img/B20976_06_001.jpg)'
- en: Figure 6.1 – Open up the Diagnostic configuration window
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.1 – 打开诊断配置窗口
- en: 'Select the **Default Clang-Tidy and Clazy checks** option at the top and click
    the **Copy…** button, as shown in *Figure 6**.2*. Give it a name and click **OK**.
    The new option will now appear under the **Custom** category:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在顶部选择 **默认 Clang-Tidy 和 Clazy 检查** 选项，并点击如图 *图 6**.2* 所示的 **复制…** 按钮。给它起个名字，然后点击
    **确定**。新的选项现在将出现在 **自定义** 类别下：
- en: '![Figure 6.2 - Click on the Copy button](img/B20976_06_002.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.2 - 点击复制按钮](img/B20976_06_002.jpg)'
- en: Figure 6.2 - Click on the Copy button
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.2 - 点击复制按钮
- en: Then, open the `qt6-deprecated-api-fixes`
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，打开 `qt6-deprecated-api-fixes`
- en: '`qt6-header-fixes`'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`qt6-header-fixes`'
- en: '`qt6-qhash-signature`'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`qt6-qhash-signature`'
- en: '`qt6-fwd-fixes`'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`qt6-fwd-fixes`'
- en: '`missing-qobject-macro`'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`missing-qobject-macro`'
- en: 'Once you’re done, close the preference window and go to **Analyze** | **Clang-Tidy
    and Clazy...**. The **Files to Analyze** window will pop up with all the source
    files being displayed on the window. We will just stick to the default option
    and proceed by clicking the **Analyze** button:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，关闭首选项窗口，转到 **分析** | **Clang-Tidy 和 Clazy...**。将弹出一个包含所有源文件的 **要分析的文件** 窗口。我们将坚持默认选项，通过点击
    **分析** 按钮继续：
- en: '![Figure 6.3 – Choose All Files and press the Analyze button](img/B20976_06_003.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.3 – 选择所有文件并按分析按钮](img/B20976_06_003.jpg)'
- en: Figure 6.3 – Choose All Files and press the Analyze button
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.3 – 选择所有文件并按分析按钮
- en: 'After the Clang-Tidy and Clazy tools finish analyzing the project, you should
    see the results displayed on a separate panel under the Qt Creator. It will show
    you the lines of code that have been deprecated in Qt 6 and give you suggestions
    on what to replace them with:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Clang-Tidy 和 Clazy 工具分析完项目后，你应在 Qt Creator 下的单独面板上看到显示的结果。它将显示在 Qt 6 中已被弃用的代码行，并给出替换建议：
- en: '![Figure 6.4 – Results from the analysis](img/B20976_06_004.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.4 – 分析结果](img/B20976_06_004.jpg)'
- en: Figure 6.4 – Results from the analysis
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.4 – 分析结果
- en: How it works...
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The Tidy and Clazy tool came with Clang packages so there is no need to install
    it separately. It is a powerful tool that can be used to check for many things,
    such as using deprecated functions in your code, placing a container inside a
    loop, marking a non-void slot as constant, registering QML type that starts with
    lowercase, and so on.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Tidy 和 Clazy 工具随 Clang 包一起提供，因此无需单独安装。这是一个功能强大的工具，可以用来检查许多事情，例如检查代码中使用的已弃用函数、在循环中放置容器、将非
    void 槽标记为常量、注册以小写字母开头的 QML 类型等等。
- en: It’s a tool that helps you to inspect and improve the quality of your code with
    ease. It should be widely promoted and used more frequently by Qt programmers.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个帮助你轻松检查和改进代码质量的工具。它应该被广泛推广，并更频繁地被 Qt 程序员使用。
- en: Changes in QML types
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QML 类型更改
- en: In this chapter, we will learn what changes have been made in Qt 6 compared
    to Qt 5.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习与 Qt 5 相比，Qt 6 做了哪些改动。
- en: How to do it…
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Let’s get started by following these steps:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下步骤开始：
- en: Create a new **Qt Quick Application** by going to **File** | **New Project**.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过转到 **文件** | **新建项目** 创建一个新的 **Qt Quick 应用程序**。
- en: Select the **Qt 6.2** option for **Minimum required Qt version** when defining
    project details.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在定义项目详细信息时，选择 **最低要求的 Qt 版本** 为 **Qt 6.2**。
- en: '![Figure 6.5 – Select Qt 6.2 as Minimum required Qt version](img/B20976_06_005.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.5 – 选择 Qt 6.2 作为最低要求的 Qt 版本](img/B20976_06_005.jpg)'
- en: Figure 6.5 – Select Qt 6.2 as Minimum required Qt version
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.5 – 选择 Qt 6.2 作为最低要求的 Qt 版本
- en: 'Once you have created the project, open up `main.qml` and add these properties
    to the file:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建项目后，打开 `main.qml` 文件并添加以下属性：
- en: '[PRE11]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Rectangle {
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Rectangle {
- en: 'id: rect'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'id: rect'
- en: 'x: 100'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'x: 100'
- en: 'y: 100'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'y: 100'
- en: 'width: 100'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'width: 100'
- en: 'height: 100'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'height: 100'
- en: 'color: myColor'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'color: myColor'
- en: '}'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE12]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'After that, we’re going to add another `Image` object below the rectangle:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们将在矩形下方添加另一个 `Image` 对象：
- en: '[PRE13]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Next, we create a new resource file for our project by going to **File** | **New
    File…** and selecting **Qt Resource File** under the **Qt** template.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们通过转到 **文件** | **新建文件…** 并在 **Qt** 模板下选择 **Qt 资源文件** 来为我们的项目创建一个新的资源文件。
- en: '![Figure 6.6 – Create a new Qt Resource File](img/B20976_06_006.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.6 – 创建新的 Qt 资源文件](img/B20976_06_006.jpg)'
- en: Figure 6.6 – Create a new Qt Resource File
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.6 – 创建新的 Qt 资源文件
- en: Then, create a folder called `images` in the resource file and add `tux.png`
    into the `images` folder.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在资源文件中创建一个名为 `images` 的文件夹，并将 `tux.png` 添加到 `images` 文件夹中。
- en: '![Figure 6.7 – Add tux.png to the images folder](img/B20976_06_007.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.7 – 将 tux.png 添加到图像文件夹](img/B20976_06_007.jpg)'
- en: Figure 6.7 – Add tux.png to the images folder
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.7 – 将 tux.png 添加到图像文件夹
- en: 'Build and run the project now, and you should similar results as follows:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在构建并运行项目，你应该得到以下类似的结果：
- en: '![Figure 6.8 – The Hello World demo in Qt Quick 6](img/B20976_06_008.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.8 – Qt Quick 6 中的 Hello World 示例](img/B20976_06_008.jpg)'
- en: Figure 6.8 – The Hello World demo in Qt Quick 6
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.8 – Qt Quick 6 中的 Hello World 示例
- en: How it works...
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Qt 6 introduces many changes to Qt Quick as well but they are mostly underlying
    functions that do not affect much of the QML language and objects. Therefore,
    there are not many changes you need to make to your QML scripts when transitioning
    from Qt 5 to Qt 6\. However, there are still some minor changes to how the project
    is structured and slight differences in the code.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Qt 6 对 Qt Quick 也进行了许多更改，但它们大多是底层函数，不会对 QML 语言和对象产生很大影响。因此，在从 Qt 5 转换到 Qt 6
    时，您不需要对您的 QML 脚本进行很多更改。然而，项目结构仍有一些细微的变化，代码也有一些小的差异。
- en: One of the most obvious differences is that QML scripts are now listed under
    the `QML` category under the project structure instead of under `Resources` like
    how it used to be in Qt 5.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 最明显的区别之一是，现在 QML 脚本在项目结构下的 `QML` 类别中列出，而不是像在 Qt 5 中那样在 `Resources` 下。
- en: '![Figure 6.9 – QML files have their own category now](img/B20976_06_009.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.9 – QML 文件现在有自己的类别](img/B20976_06_009.jpg)'
- en: Figure 6.9 – QML files have their own category now
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.9 – QML 文件现在有自己的类别
- en: 'Hence, when we load the `main.qml` file in the `main.cpp` C++ source code,
    we will use the following:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当我们将在 `main.cpp` C++ 源代码中加载 `main.qml` 文件时，我们将使用以下代码：
- en: '[PRE14]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'There are slight differences compared to how we did it in Qt 5:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们在 Qt 5 中所做的方法相比，有一些细微的差别：
- en: '[PRE15]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `u` preceding the string creates a 16-bit string literal and the `_qs` after
    the string converts it to a `QString`. These operators are similar to the `QStringLiteral`
    macro used in Qt 5 but are easier to convert to the exact string format you want
    while complying with the C++ 17 coding style.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串前面的 `u` 创建了一个 16 位字符串字面量，而字符串后面的 `_qs` 将其转换为 `QString`。这些运算符类似于 Qt 5 中使用的
    `QStringLiteral` 宏，但更容易转换为所需的精确字符串格式，同时符合 C++ 17 编码风格。
- en: 'Another big difference in Qt 6 is that the `main.qml` from the preceding example
    to see the differences:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Qt 6 的另一个重大区别是，从上一个示例中的 `main.qml` 可以看到差异：
- en: '[PRE16]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As you can see from the highlighted part in the preceding code block, the version
    number is now optional when importing a Qt Quick module. Qt will pick the latest
    version available by default.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从前面的代码块中高亮显示的部分所示，现在在导入 Qt Quick 模块时版本号是可选的。Qt 将默认选择可用的最新版本。
- en: 'Now, let’s look at the properties we declared in the example:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看我们在示例中声明的属性：
- en: '[PRE17]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Even though the preceding code will run fine, it’s recommended to use Qt functions
    such as `Qt.color()` and `Qt.resolvedUrl()` to return properties with the correct
    types, instead of just passing a string:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管前面的代码可以正常运行，但建议使用 Qt 函数，如 `Qt.color()` 和 `Qt.resolvedUrl()`，来返回具有正确类型的属性，而不是仅仅传递一个字符串：
- en: '[PRE18]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Another small difference that you may or may not notice is the way Qt treats
    relative paths. Previously in Qt 5, we would write relative path as `./images`,
    which will return as `qrc:/images`. In Qt 6, however, `./images` will return as
    `qrc:/[project_name]/images/tux.png`, which is not correct. We must use `/images`
    without the preceding dot instead.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个可能注意不到的小区别是 Qt 处理相对路径的方式。在 Qt 5 中，我们会将相对路径写成 `./images`，它将返回为 `qrc:/images`。然而，在
    Qt 6 中，`./images` 将返回为 `qrc:/[project_name]/images/tux.png`，这是不正确的。我们必须使用 `/images`
    而不是前面的点。
- en: Note
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For more information regarding the full changes of Qt Quick in Qt 6, please
    visit [https://doc.qt.io/qt-6/qtquickcontrols-changes-qt6.html](https://doc.qt.io/qt-6/qtquickcontrols-changes-qt6.html).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 Qt 6 中 Qt Quick 的全面更改的更多信息，请访问 [https://doc.qt.io/qt-6/qtquickcontrols-changes-qt6.html](https://doc.qt.io/qt-6/qtquickcontrols-changes-qt6.html)。
