- en: Chapter 6. Design Patterns for Game Development
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章 游戏开发的设计模式
- en: 'In this chapter, the following recipes will be covered:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，将涵盖以下示例：
- en: Using the singleton design pattern
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用单例设计模式
- en: Using the factory method
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用工厂方法
- en: Using the abstract factory method
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用抽象工厂方法
- en: Using the observer pattern
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用观察者模式
- en: Using the flyweight pattern
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用享元模式
- en: Using the strategy pattern
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用策略模式
- en: Using the command design pattern
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用命令设计模式
- en: Creating an advanced game using design patterns
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用设计模式创建高级游戏
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Let us consider that we are faced with a certain problem. After some time, we
    find a solution to that problem. Now, if the problem reoccurs, or a similar pattern
    to the problem reoccurs, we will know how to solve the problem by applying the
    same principle that solved the previous problem. Design patterns are similar to
    this. There are already 23 such solutions documented, which provide subtle solutions
    for dealing with problems that have a similar pattern to the ones that are documented.
    They are described by the authors more commonly referred to as the *Gang of Four*.
    They are not complete solutions, but rather templates or frameworks that can be
    applied to similar situations. One of the biggest drawbacks of design patterns,
    however, is that if they are not applied correctly, they can prove to be disastrous.
    Design patterns can be classified as structural, behavioral, or creational. We
    will be looking at only a few of them, which are used often in games development.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们假设我们面临某个问题。过了一段时间，我们找到了解决这个问题的方法。现在，如果问题再次发生，或者类似的问题模式再次发生，我们将知道如何通过应用解决先前问题的相同原则来解决问题。设计模式就类似于这个。已经有23种这样的解决方案被记录下来，它们为处理与已记录的问题具有相似模式的问题提供了微妙的解决方案。这些解决方案由作者描述，更常被称为*四人帮*。它们不是完整的解决方案，而是可以应用于类似情况的模板或框架。然而，设计模式最大的缺点之一是，如果它们没有被正确应用，它们可能会证明是灾难性的。设计模式可以被分类为结构型、行为型或创建型。我们将只研究其中一些，在游戏开发中经常使用的。
- en: Using the singleton design pattern
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用单例设计模式
- en: The singleton design pattern is the most commonly used design pattern for games.
    Unfortunately, it is also the most overused and most incorrectly applied design
    pattern for games. There are a few advantages of the singleton design pattern,
    which we will discuss. However, it has a lot of serious consequences as well.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 单例设计模式是游戏中最常用的设计模式。不幸的是，它也是游戏中最常被滥用和错误应用的设计模式。单例设计模式有一些优点，我们将讨论。然而，它也有很多严重的后果。
- en: Getting ready
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To work through this recipe, you will need a machine running Windows. You also
    need to have a working copy of Visual Studio installed on your Windows machine.
    No other prerequisites are required.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本示例，您需要一台运行Windows的计算机。您还需要在Windows计算机上安装一个可用的Visual Studio副本。不需要其他先决条件。
- en: How to do it…
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'In this recipe, we will see how easy it is to create a singleton design pattern.
    We will also see the common pitfalls of this design pattern:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将看到创建单例设计模式有多么容易。我们还将看到这种设计模式的常见陷阱：
- en: Open Visual Studio.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio。
- en: Create a new C++ project.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的C++项目。
- en: Select a Win32 console application.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个Win32控制台应用程序。
- en: Add a source file called `Source.cpp`.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`Source.cpp`的源文件。
- en: 'Add the following lines of code to it:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到其中：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How it works…
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The main reason why developers want to use a singleton class is when they want
    to restrict to just one instance of the class. In our example, we have taken the
    `PhysicsManager` class. We make the constructor private and then assign a static
    function to get the handle to the instance of the class and hence its methods.
    We also use a Boolean to check if an instance is already created. If it is, we
    do not assign a new instance. If it is not, we assign a new instance and call
    the corresponding methods.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员希望使用单例类的主要原因是他们希望限制类的实例只有一个。在我们的示例中，我们使用了`PhysicsManager`类。我们将构造函数设为私有，然后分配一个静态函数来获取类的实例和其方法的句柄。我们还使用一个布尔值来检查是否已经创建了一个实例。如果是，我们不分配新实例。如果没有，我们分配一个新实例并调用相应的方法。
- en: As intelligent as it may seem, this design pattern has many flaws and hence
    should be avoided as much as possible in game design. First, it's a global variable.
    This in itself is bad. A global variable is saved on the global pool and can be
    accessed from everywhere. Second, this encourages bad coupling, which may appear
    in the code. Third, it is not concurrent friendly. Imagine there are multiple
    threads, and each thread can access this global variable. This is a recipe for
    disaster, as deadlock will happen. Finally, one of the most common mistakes made
    by new programmers is to create managers for everything, and then make the manager
    a singleton. The fact is that we can get away without creating a manager by using
    OOPS and references in an effective manner.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这种设计模式看起来很聪明，但它有很多缺陷，因此在游戏设计中应尽量避免使用。首先，它是一个全局变量。这本身就是不好的。全局变量保存在全局池中，可以从任何地方访问。其次，这鼓励了糟糕的耦合，可能会出现在代码中。第三，它不友好并发。想象一下有多个线程，每个线程都可以访问这个全局变量。这是灾难的开始，死锁会发生。最后，新程序员最常犯的一个错误是为所有事物创建管理器，然后将管理器设为单例。事实上，我们可以通过有效地使用面向对象编程和引用来避免创建管理器。
- en: The preceding code shows a lazy value of initializing a singleton and hence
    can be improved. However, all the fundamental problems described in this recipe
    will still remain.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码显示了一种懒惰初始化单例的值，因此可以改进。然而，本示例中描述的所有基本问题仍将存在。
- en: Using the factory method
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用工厂方法
- en: A factory is essentially a warehouse for creating objects of other types. In
    a factory method design pattern, the creation of a new type of object, such as
    an enemy or a building, happens from an interface and the subclass decides which
    class it needs to instantiate. This is also a commonly used pattern in games and
    can be quite useful.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 工厂本质上是创建其他类型对象的仓库。在工厂方法设计模式中，创建新类型的对象，比如敌人或建筑，是通过接口和子类决定需要实例化哪个类来实现的。这也是游戏中常用的模式，非常有用。
- en: Getting ready
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You need to have a working copy of Visual Studio installed on your Windows machine.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在Windows机器上安装一个可用的Visual Studio副本。
- en: How to do it…
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'In this recipe, we will find out how easy it is to write a factory method design
    pattern:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将发现实现工厂方法设计模式是多么容易：
- en: Open Visual Studio.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio。
- en: Create a new C++ project.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的C++项目。
- en: Select a Win32 console application.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个Win32控制台应用程序。
- en: Add a source file called `Source.cpp`.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`Source.cpp`的源文件。
- en: 'Add the following lines of code to it:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码行：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works…
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'In this example, we have created a `Building` interface, which has a pure virtual
    function for `TotalHealth`. This means all the derived classes must override this
    function. Therefore, we can guarantee that all our buildings will have this property.
    We can keep adding to this structure by having more properties, such as hit points,
    total storage capacity, rate of production of villagers, and so on, based on the
    nature and design of the game. The derived classes have their own implementation
    of `TotalHealth`. They are also named to reflect the type of building they are.
    The biggest advantage of this design pattern is that all we need on the client
    side is a reference to the base interface. After that, we can create the type
    of building we need at runtime. We store these building types in a vector list
    and finally use a loop to display the contents. Since we have the reference `IBuilding*`,
    we can assign any new derived class we want at runtime. There is no need to create
    references for all derived classes, such as `Temple*` and so on. The following
    screenshot shows the output we are likely to get for a user-defined village:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们创建了一个`Building`接口，其中有一个纯虚函数`TotalHealth`。这意味着所有派生类必须重写这个函数。因此，我们可以保证所有的建筑都有这个属性。我们可以通过添加更多的属性来扩展这个结构，比如生命值、总存储容量、村民生产速度等，根据游戏的性质和设计。派生类有它们自己的`TotalHealth`实现。它们也被命名为反映它们是什么类型的建筑。这种设计模式的最大优势是，客户端只需要一个对基础接口的引用。之后，我们可以在运行时创建我们需要的建筑类型。我们将这些建筑类型存储在一个向量列表中，最后使用循环来显示内容。由于我们有引用`IBuilding*`，我们可以在运行时分配任何新的派生类。无需为所有派生类创建引用，比如`Temple*`等等。下面的屏幕截图显示了用户定义村庄的输出：
- en: '![How it works…](img/4929_06_01.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理…](img/4929_06_01.jpg)'
- en: Using the abstract factory method
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用抽象工厂方法
- en: An abstract factory is a part of the creational design pattern. It is one of
    the best ways to create an object and is a commonly repeated design pattern in
    games. It is like a factory of factories. It uses an interface to create a factory.
    The factory is responsible for creating objects without specifying their class
    type. The factory generates these objects based on the factory method design pattern.
    However, some argue that the abstract factory method can also be implemented using
    the prototype design pattern.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 抽象工厂是创建设计模式的一部分。这是创建对象的最佳方式之一，也是游戏中常见的重复设计模式之一。它就像是一个工厂的工厂。它使用一个接口来创建一个工厂。工厂负责创建对象，而不指定它们的类类型。工厂基于工厂方法设计模式生成这些对象。然而，有人认为抽象工厂方法也可以使用原型设计模式来实现。
- en: Getting ready
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You need to have a working copy of Visual Studio installed on your Windows machine.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在Windows机器上安装一个可用的Visual Studio副本。
- en: How to do it…
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'In this recipe, we will find out how easy it is to implement the abstract factory
    pattern:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将发现实现抽象工厂模式是多么容易：
- en: Open Visual Studio.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio。
- en: Create a new C++ project.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的C++项目。
- en: Select a Win32 console application.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个Win32控制台应用程序。
- en: Add a source file called `Source.cpp`.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`Source.cpp`的源文件。
- en: 'Add the following lines of code to it:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码行：
- en: '[PRE2]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works…
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: In this example, we have created two interfaces, namely `IFast` and `ISlow`.
    After that we have created several enemies and decided whether they are fast or
    slow. Finally, we created an abstract class with two virtual functions to get
    the fast enemy and the slow enemy. This means all the derived classes must override
    and have their own implementation of these functions. So in effect we have created
    a factory of factories. The land, air, and water enemy factories that we have
    created from the abstract class have references to two interfaces for slow and
    fast. Hence the land, water, and air serve as factories themselves too.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们创建了两个接口，分别是`IFast`和`ISlow`。之后，我们创建了几个敌人，并决定它们是快还是慢。最后，我们创建了一个抽象类，其中有两个虚函数来获取快速敌人和慢速敌人。这意味着所有的派生类必须重写并有自己的实现这些函数。因此，实际上我们创建了一个工厂的工厂。我们从抽象类创建的陆地、空中和水中敌人工厂都引用了慢和快的两个接口。因此，陆地、水域和空中本身也是工厂。
- en: 'So from the client side, we can request a fast land enemy or a slow water enemy
    and we can get the appropriate enemy displayed to us. As the following screenshot
    shows, we can get the output as displayed:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，从客户端，我们可以请求一个快速的陆地敌人或一个慢速的水域敌人，然后我们可以得到适当的敌人显示给我们。如下面的屏幕截图所示，我们可以得到如下显示的输出：
- en: '![How it works…](img/4929_06_02.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理…](img/4929_06_02.jpg)'
- en: Using the observer pattern
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用观察者模式
- en: The observer design pattern is one which is not commonly used in games, but
    it should be used more often by game developers as it is a very smart way to handle
    notifications. In the observer design pattern, a component maintains a one-to-many
    relationship with other components. This means when the main component changes,
    all the dependent components also update. Imagine a physics system. We want `enemy1`
    and `enemy2` to update as soon as the physics system updates, so we should use
    this pattern.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 观察者设计模式在游戏中并不常用，但游戏开发人员应该更经常地使用它，因为这是处理通知的一种非常聪明的方式。在观察者设计模式中，一个组件与其他组件维护一对多的关系。这意味着当主要组件发生变化时，所有依赖组件也会更新。想象一个物理系统。我们希望`enemy1`和`enemy2`在物理系统更新时立即更新，所以我们应该使用这种模式。
- en: Getting ready
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, you will need a Windows machine with a working copy of Visual
    Studio.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为此食谱，您需要一台装有Visual Studio的Windows机器。
- en: How to do it…
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'In this recipe, we will find out how easy it is to implement the observer pattern:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将找出实现观察者模式有多容易：
- en: Open Visual Studio.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio。
- en: Create a new C++ project.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的C++项目。
- en: Select a Win32 Windows application.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个Win32 Windows应用程序。
- en: Add a source file called `Source.cpp`.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`Source.cpp`的源文件。
- en: 'Add the following lines of code to it:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向其添加以下代码行：
- en: '[PRE3]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works…
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In this example, we have created a physics system that continuously updates
    its value. Other components that are dependent on the physics system must attach
    themselves to it, so that they are notified as soon as the physics system is updated.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们创建了一个不断更新其值的物理系统。依赖于物理系统的其他组件必须附加到它，这样它们就会在物理系统更新时得到通知。
- en: The physics system that we have created holds a vector list of all the components
    that are being observing from it. In addition to this, it contains methods to
    get the current value or set a values for it. It also contains a method to notify
    all the dependent components once a value has been changed in the physics system.
    The `Observer` class contains a reference to the physics system, as well as a
    pure virtual function for updates, which the derived class must override. The
    `PlayerObserver` and `AIObserver` classes can derive from this class and have
    their own implementation of impulse based on the changes in the physics system.
    Both the AI and player systems will continuously receive updates from the physics
    system unless they detach themselves from it.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建的物理系统持有一个向量列表，其中包含所有正在观察的组件。除此之外，它包含了获取当前值或为其设置值的方法。它还包含一个方法，一旦物理系统中的值发生变化，就通知所有依赖组件。`Observer`类包含对物理系统的引用，以及一个纯虚函数用于更新，派生类必须覆盖这个函数。`PlayerObserver`和`AIObserver`类可以从这个类派生，并根据物理系统中的变化实现它们自己的冲量。除非它们从中分离出来，否则AI和玩家系统将不断地从物理系统接收更新。
- en: 'This is a very useful pattern and has loads of implementation in games. The
    following screenshot shows what a typical output would look like:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常有用的模式，在游戏中有很多实现。下面的屏幕截图显示了典型输出的样子：
- en: '![How it works…](img/4929_06_03.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的…](img/4929_06_03.jpg)'
- en: Using the flyweight pattern
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用飞行权重模式
- en: The flyweight design pattern is mostly used when we want to reduce the amount
    of memory that is used to create the objects. This pattern is often used when
    we want to create something hundreds or thousands of times. Games with a forest
    structure often use this design pattern. This design pattern falls under the structural
    design category. In this pattern, the object, let's say the tree object, is divided
    into two parts, one that is dependent on the state of the object and one that
    is independent. The independent part is stored in the flyweight object, whereas
    the dependent part is handled by the client and sent to the flyweight object as
    and when invoked.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 飞行权重设计模式在我们想要减少用于创建对象的内存量时大多被使用。当我们想要创建数百次或数千次的东西时，通常会使用这种模式。具有森林结构的游戏经常使用这种设计模式。这种设计模式属于结构设计类别。在这种模式中，对象，比如树对象，被分成两部分，一部分取决于对象的状态，一部分是独立的。独立部分存储在飞行权重对象中，而依赖部分由客户端处理，并在调用时发送到飞行权重对象。
- en: Getting ready
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, you will need a Windows machine with a working copy of Visual
    Studio.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为此食谱，您需要一台装有Visual Studio的Windows机器。
- en: How to do it…
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'In this recipe, we will find out how easy it is to implement the flyweight
    pattern:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将找出实现飞行权重模式有多容易：
- en: Open Visual Studio.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio。
- en: Create a new C++ project.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的C++项目。
- en: Select a Win32 console application.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个Win32控制台应用程序。
- en: Add a source file called `Source.cpp`.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`Source.cpp`的源文件。
- en: 'Add the following lines of code to it:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向其添加以下代码行：
- en: '[PRE4]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How it works…
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In this example, we have created a forest. The basic principle of the flyweight
    pattern is applied, whereby part of the structure is shared across all trees and
    part is dictated by the client. In this example, apart from the size (this could
    be anything, size is just chosen to be an example), every other attribute is chosen
    to be shared. We create a tree-type interface which contains all the attributes.
    We then have derived classes that have their attributes overridden and a method
    to set the `size` attribute. We can have multiple such trees. Generally, the greater
    the variety of trees, the more detailed the forest will look. Let us say that
    we have 10 different types of tree, so we need to have 10 different classes that
    derive from the interface and have a method to assign the `size` attribute from
    the client size.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们创建了一个森林。飞行权重模式的基本原则被应用，其中结构的一部分是共享的，而另一部分由客户端决定。在这个例子中，除了大小（这可以是任何东西，大小只是选择作为一个例子），每个其他属性都被选择为共享。我们创建一个包含所有属性的树型接口。然后我们有派生类，它们有它们的属性被覆盖和一个方法来设置`size`属性。我们可以有多个这样的树。一般来说，树的种类越多，森林看起来就越详细。假设我们有10种不同类型的树，所以我们需要有10个不同的类从接口派生，并有一个方法从客户端大小分配`size`属性。
- en: 'Finally, we have the tree factory, which assigns each tree at runtime. We create
    a reference to the interface as we do with any factory pattern. However, instead
    of directly instantiating a new object, we first check the map to see whether
    the tree''s attributes are already present. If they are not, we assign a new object
    and push the attributes to the map. So the next time a request comes for a similar
    tree structure to one that has already been assigned, we can share the attributes
    from the map. Finally, from the client, we create a forest-type document which
    we feed to the factory, and it generates the forest for us using the trees listed
    in the document. As the majority of the attributes are shared, the memory footprint
    is very low. The following screenshot shows us how the forest is created:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有了树工厂，它在运行时为每棵树分配。我们创建一个对接口的引用，就像任何工厂模式一样。但是，我们不是直接实例化一个新对象，而是首先检查地图，看看树的属性是否已经存在。如果没有，我们分配一个新对象，并将属性推送到地图中。因此，下次请求类似已经分配的树结构的树时，我们可以从地图中共享属性。最后，从客户端，我们创建一个森林类型的文档，然后将其提供给工厂，它使用文档中列出的树为我们生成森林。由于大多数属性是共享的，内存占用非常低。以下屏幕截图显示了森林是如何创建的：
- en: '![How it works…](img/4929_06_04.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的…](img/4929_06_04.jpg)'
- en: Using the strategy pattern
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用策略模式
- en: The strategy design pattern is a very smart way of designing code. In games,
    this is mostly used for the AI component. In this pattern, we define a large number
    of algorithms and have all of them from a common interface signature. Then at
    runtime, we can change the clients of the algorithms. So in effect, the algorithms
    are independent of the clients.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 策略设计模式是设计代码的一种非常聪明的方式。在游戏中，这主要用于AI组件。在这种模式中，我们定义了大量的算法，并且所有这些算法都具有一个共同的接口签名。然后在运行时，我们可以更改算法的客户端。因此，实际上，这些算法是独立于客户端的。
- en: Getting ready
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To work through this recipe, you will need a machine running Windows. You also
    need to have a working copy of Visual Studio installed on your Windows machine.
    No other prerequisites are required.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个示例，您需要一台运行Windows的机器。您还需要在Windows机器上安装一个可用的Visual Studio副本。不需要其他先决条件。
- en: How to do it…
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'In this recipe, we will find out how easy it is to implement the strategy pattern:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将发现实现策略模式是多么容易：
- en: Open Visual Studio.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio。
- en: Create a new C++ project.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的C++项目。
- en: Select a Win32 console application.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个Win32控制台应用程序。
- en: Add a `Source.cpp` file.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`Source.cpp`文件。
- en: 'Add the following lines of code to it:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码行添加到其中：
- en: '[PRE5]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works…
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In this example, we have created different interfaces for different properties
    that the enemy may have. So, since we know that special power is a property every
    enemy type will have, we have created an interface called `SpecialPower` and then
    derived two classes from it called `Fire` and `Invisibility`. We can add as many
    special powers as we want, we just need to create a new class and derive from
    the special power interface. Similarly, all the enemy types should have a property
    for flying. Either they fly, or don't fly, or fly with the help of jetpacks.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们为敌人可能具有的不同属性创建了不同的接口。因此，由于我们知道特殊能力是每种敌人类型都会具有的属性，我们创建了一个名为`SpecialPower`的接口，然后从中派生了两个类，分别是`Fire`和`Invisibility`。我们可以添加任意多的特殊能力，我们只需要创建一个新的类，并从特殊能力接口派生。同样，所有的敌人类型都应该有一个飞行属性。它们要么飞行，要么不飞行，要么借助喷气背包飞行。
- en: 'So we have created a `FlyBehaviour` interface and have the different flying-type
    classes derive from it. After that, we have created an abstract class for the
    enemy type which contains both the interfaces as references. Hence any derived
    class can decide what flying type and what special power it needs. This also gives
    us the flexibility to change special powers and flying ability at runtime. The
    screenshot below shows a brief example of this design pattern:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们创建了一个`FlyBehaviour`接口，并让不同的飞行类型类从中派生。之后，我们创建了一个敌人类型的抽象类，其中包含了这两个接口作为引用。因此，任何派生类都可以决定需要什么飞行类型和特殊能力。这也使我们能够在运行时更改特殊能力和飞行能力。下面的屏幕截图显示了这种设计模式的简要示例：
- en: '![How it works…](img/4929_06_05.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的…](img/4929_06_05.jpg)'
- en: Using the command design pattern
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用命令设计模式
- en: The command design pattern generally involves encapsulating a command as an
    object. This is highly used in networking for games, in which player movements
    are sent across as objects that are run as commands. The four main points to remember
    in a command design pattern are the client, invoker, receiver, and command. The
    command object has knowledge of the receiver object. The receiver does the work
    after it receives a command. The invoker performs the command, without having
    any knowledge of who has sent the command. The client controls the invoker and
    decides which commands are to be performed at which stage.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 命令设计模式通常涉及将命令封装为对象。这在游戏网络中被广泛使用，其中玩家的移动被发送为作为命令运行的对象。命令设计模式中要记住的四个主要点是客户端、调用者、接收者和命令。命令对象了解接收者对象。接收者在接收到命令后执行工作。调用者执行命令，而不知道是谁发送了命令。客户端控制调用者，并决定在哪个阶段执行哪些命令。
- en: Getting ready
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, you will need a Windows machine with a working copy of Visual
    Studio.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，您需要一台安装有Visual Studio的Windows机器。
- en: How to do it…
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'In this recipe, we will find out how easy it is to implement the command pattern:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将发现实现命令模式是多么容易：
- en: Open Visual Studio.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio。
- en: Create a new C++ project console application.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的C++项目控制台应用程序。
- en: 'Add the following lines of code:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码行：
- en: '[PRE6]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works…
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'As we can see in this example, we have set up an interface to send information
    via the network protocol command. From that interface, we can derive multiple
    child instances to be used on the client side. We then need to create a server
    receiver, which will receive commands sent from the client. We also need to create
    a client invoker, which will invoke the command. A reference to the network protocol
    command should also be present in this class. Finally, from the client side, we
    need to create an instance of the server and attach the instance to the object
    of the network protocol command''s child that we created. We then use the client
    invoker to invoke the command and send it via the network protocol command to
    the receiver. This ensures that an abstraction is maintained and the entire message
    is send via packets. The following screenshot shows a part of the process:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在这个例子中所看到的，我们已经设置了一个接口，通过网络协议命令发送信息。从该接口，我们可以派生多个子实例用于客户端。然后我们需要创建一个服务器接收器，用于接收来自客户端的命令。我们还需要创建一个客户端调用者，用于调用命令。该类中还应该有对网络协议命令的引用。最后，从客户端，我们需要创建一个服务器实例，并将该实例附加到我们创建的网络协议命令的子对象上。然后我们使用客户端调用者来调用命令，并通过网络协议命令将其发送到接收器。这确保了抽象的维护，并且整个消息都是通过数据包发送的。以下截图显示了部分过程：
- en: '![How it works…](img/4929_06_06.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理…](img/4929_06_06.jpg)'
- en: Creating an advanced game using design patterns
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用设计模式创建高级游戏
- en: After understanding the basic design patterns, it's important to combine them
    to create a good game. It takes years of practice to finally understand what architecture
    will suit the game structure. More often than not, we have to use a few design
    patterns in conjunction to come up with clean code that can be applied to the
    game. The factory pattern will probably be your most used design pattern, but
    that is purely an anecdotal reference from my experience.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解基本设计模式之后，将它们结合起来创建一个好的游戏是很重要的。需要多年的实践才能最终理解哪种架构适合游戏结构。我们经常不得不同时使用几种设计模式来编写可以应用于游戏的清晰代码。工厂模式可能是您最常用的设计模式，但这纯粹是我个人经验的一个轶事参考。
- en: Getting ready
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, you will need a Windows machine with a working copy of Visual
    Studio.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，您需要一台安装了Visual Studio的Windows机器。
- en: How to do it…
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'In this recipe we will find out how easy it is to combine design patterns to
    create a game:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将发现如何轻松地结合设计模式来创建一个游戏：
- en: Open Visual Studio.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio。
- en: Create a new C++ project console application.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的C++项目控制台应用程序。
- en: 'Add the following lines of code:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码行：
- en: '[PRE7]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works…
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: The previous code is just a small section of the code. Let us assume that we
    need to make a game where there are different classes of enemies and there are
    different types of powers, as well as some special boosts or power-ups. One approach
    to this is to think of all the powers and special boosts as individual classes
    that derive from an interface. So we need to create an interface for speed, which
    can be derived from the `HighSpeed` class and so on. Similarly, we can create
    a `SpecialPower` interface, which can be derived by the `Fire` class and so on.
    We need to create interfaces for all the groups of properties that our characters
    can have. Finally, we need to create an interface for the characters (`IEnemy`)
    that is derived by the `Soldier`, `Archer`, and `Grenadier` class, and so on.
    The `IEnemy` interface should also hold a reference to all the other interfaces,
    such as `ISpecialPower` and `ISpeed`. In this way, the child classes of `IEnemy`
    can decide what power and speed they want to have. This is similar to the strategy
    design pattern. We can further improve this structure if we want to group the
    enemies into types, let's say land enemies and air enemies. In that case, either
    we create an interface for `IType` and have `Land` and `Air` classes derive from
    it, or we could create a factory that creates enemy types for us depending on
    the type the client requests. Each enemy type created will also be a derived class
    from `IEnemy`, so that it will also have the references to the previous interfaces.
    As the complexity of the game increases, we can add more design patterns to aid
    us.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码只是代码的一小部分。假设我们需要制作一个游戏，其中有不同类的敌人，以及不同类型的能力，以及一些特殊的增益或增强。对此的一种方法是将所有能力和特殊增益视为从接口派生的单独类。因此，我们需要为速度创建一个接口，它可以从`HighSpeed`类派生，依此类推。同样，我们可以创建一个`SpecialPower`接口，它可以由`Fire`类等派生。我们需要为角色可能具有的所有属性组创建接口。最后，我们需要创建一个角色（`IEnemy`）的接口，它由`Soldier`、`Archer`和`Grenadier`类等派生。`IEnemy`接口还应该持有对所有其他接口的引用，比如`ISpecialPower`和`ISpeed`。通过这种方式，`IEnemy`的子类可以决定他们想要拥有什么能力和速度。这类似于策略设计模式。如果我们想要将敌人分组到类型中，比如陆地敌人和空中敌人，我们可以进一步改进这个结构。在这种情况下，我们要么为`IType`创建一个接口，并让`Land`和`Air`类从中派生，要么我们可以创建一个工厂，根据客户端请求的类型为我们创建敌人类型。创建的每种敌人类型也将是从`IEnemy`派生的类，因此它也将具有对先前接口的引用。随着游戏的复杂性增加，我们可以添加更多的设计模式来帮助我们。
