["```cpp\n vector<int> v {100, 400, 200 /*, ... */ };\n\n int sum {0};\n for (int i : v) { sum += i; }\n\n cout << sum << 'n';\n```", "```cpp\ncout << accumulate(begin(v), end(v), 0) << 'n';\n```", "```cpp\n       #include <iostream>\n       #include <vector>\n       #include <map>\n       #include <string>\n       #include <tuple>\n       #include <iterator>\n       #include <algorithm>\n\n       using namespace std;\n```", "```cpp\n       namespace std {\n       ostream& operator<<(ostream &os, const pair<int, string> &p)\n       {\n           return os << \"(\" << p.first << \", \" << p.second << \")\";\n       }\n       }\n```", "```cpp\n       int main()\n       {\n           vector<pair<int, string>> v {\n               {1, \"one\"}, {2, \"two\"}, {3, \"three\"}, \n               {4, \"four\"}, {5, \"five\"}};\n\n           map<int, string> m;\n```", "```cpp\n           copy_n(begin(v), 3, inserter(m, begin(m)));\n```", "```cpp\n           auto shell_it (ostream_iterator<pair<int, string>>{cout, \n                                                              \", \"});\n\n           copy(begin(m), end(m), shell_it);\n           cout << 'n';\n```", "```cpp\n           m.clear();\n\n           move(begin(v), end(v), inserter(m, begin(m)));\n```", "```cpp\n           copy(begin(m), end(m), shell_it);\n           cout << 'n';\n\n           copy(begin(v), end(v), shell_it);\n           cout << 'n';\n       }\n```", "```cpp\n      $ ./copying_items\n      (1, one), (2, two), (3, three), \n      (1, one), (2, two), (3, three), (4, four), (5, five), \n      (1, ), (2, ), (3, ), (4, ), (5, ),\n```", "```cpp\ntemplate <typename InputIterator, typename OutputIterator>\nOutputIterator copy(InputIterator it, InputIterator end_it, \n                    OutputIterator out_it)\n{\n    for (; it != end_it; ++it, ++out_it) {\n        *out_it = *it;\n    }\n    return out_it;\n}\n```", "```cpp\ntemplate <typename InputIterator, typename OutputIterator>\nOutputIterator copy(InputIterator it, InputIterator end_it, \n                    OutputIterator out_it)\n{\n    const size_t num_items (distance(it, end_it));\n    memmove(out_it, it, num_items * sizeof(*it));\n    return it + num_items;\n}\n```", "```cpp\n       #include <iostream>\n       #include <algorithm>\n       #include <vector>\n       #include <iterator>\n       #include <random>       \n\n       using namespace std;\n```", "```cpp\n       static void print(const vector<int> &v)\n       {\n           copy(begin(v), end(v), ostream_iterator<int>{cout, \", \"});\n           cout << 'n';\n       }\n```", "```cpp\n       int main()\n       {\n           vector<int> v {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n```", "```cpp\n           random_device rd;\n           mt19937 g {rd()};\n```", "```cpp\n           cout << is_sorted(begin(v), end(v)) << 'n';\n```", "```cpp\n           shuffle(begin(v), end(v), g);\n```", "```cpp\n           cout << is_sorted(begin(v), end(v)) << 'n';\n           print(v);\n```", "```cpp\n           sort(begin(v), end(v));\n\n           cout << is_sorted(begin(v), end(v)) << 'n';\n           print(v);\n```", "```cpp\n           shuffle(begin(v), end(v), g);\n\n           partition(begin(v), end(v), [] (int i) { return i < 5; });\n\n           print(v);\n```", "```cpp\n           shuffle(begin(v), end(v), g);\n           auto middle (next(begin(v), int(v.size()) / 2));\n           partial_sort(begin(v), middle, end(v));\n\n           print(v);\n```", "```cpp\n           struct mystruct {\n               int a;\n               int b;\n           };\n\n           vector<mystruct> mv {{5, 100}, {1, 50}, {-123, 1000}, \n                                {3, 70}, {-10, 20}};\n```", "```cpp\n           sort(begin(mv), end(mv),\n                [] (const mystruct &lhs, const mystruct &rhs) {\n                    return lhs.b < rhs.b;\n                });\n```", "```cpp\n           for (const auto &[a, b] : mv) {\n               cout << \"{\" << a << \", \" << b << \"} \";\n           }\n           cout << 'n';\n       }\n```", "```cpp\n      $ ./sorting_containers \n      1\n      0\n      7, 1, 4, 6, 8, 9, 5, 2, 3, 10, \n      1\n      1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \n      1, 2, 4, 3, 5, 7, 8, 10, 9, 6, \n      1, 2, 3, 4, 5, 9, 8, 10, 7, 6,\n      {-10, 20} {1, 50} {3, 70} {5, 100} {-123, 1000}\n```", "```cpp\n       #include <iostream>\n       #include <vector>\n       #include <algorithm>\n       #include <iterator>      \n\n       using namespace std;\n```", "```cpp\n       void print(const vector<int> &v)\n       {\n           copy(begin(v), end(v), ostream_iterator<int>{cout, \", \"});\n           cout << 'n';\n       }\n```", "```cpp\n       int main()\n       {\n           vector<int> v {1, 2, 3, 4, 5, 6};\n           print(v);\n```", "```cpp\n           {\n               const auto new_end (remove(begin(v), end(v), 2));\n               v.erase(new_end, end(v));\n           }\n           print(v);\n```", "```cpp\n           {\n               auto odd_number ([](int i) { return i % 2 != 0; });\n               const auto new_end (\n                   remove_if(begin(v), end(v), odd_number));\n               v.erase(new_end, end(v));\n           }\n           print(v);\n```", "```cpp\n           replace(begin(v), end(v), 4, 123);\n           print(v);\n```", "```cpp\n           v = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n\n           vector<int> v2;\n           vector<int> v3;\n```", "```cpp\n           auto odd_number  ([](int i) { return i % 2 != 0; });\n           auto even_number ([](int i) { return i % 2 == 0; });\n```", "```cpp\n           remove_copy_if(begin(v), end(v), \n                          back_inserter(v2), odd_number);\n           copy_if(begin(v), end(v), \n                   back_inserter(v3), even_number);\n```", "```cpp\n           print(v2);\n           print(v3);\n       }\n```", "```cpp\n      $ ./removing_items_from_containers \n      1, 2, 3, 4, 5, 6, \n      1, 3, 4, 5, 6, \n      4, 6, \n      123, 6, \n      2, 4, 6, 8, 10, \n      2, 4, 6, 8, 10, \n```", "```cpp\n       #include <iostream>\n       #include <vector>\n       #include <string>\n       #include <sstream>\n       #include <algorithm>\n       #include <iterator>       \n\n       using namespace std;\n```", "```cpp\n       int main()\n       {\n           vector<int> v {1, 2, 3, 4, 5};\n```", "```cpp\n           transform(begin(v), end(v), \n               ostream_iterator<int>{cout, \", \"},\n               [] (int i) { return i * i; });\n           cout << 'n';\n```", "```cpp\n           auto int_to_string ([](int i) {\n               stringstream ss;\n               ss << i << \"^2 = \" << i * i;\n               return ss.str();\n           });\n```", "```cpp\n           vector<string> vs;\n\n           transform(begin(v), end(v), back_inserter(vs),\n                     int_to_string);\n```", "```cpp\n           copy(begin(vs), end(vs), \n                ostream_iterator<string>{cout, \"n\"});\n      }\n```", "```cpp\n      $ ./transforming_items_in_containers \n      1, 4, 9, 16, 25, \n      1^2 = 1\n      2^2 = 4\n      3^2 = 9\n      4^2 = 16\n      5^2 = 25\n```", "```cpp\n      #include <iostream>\n      #include <vector>\n      #include <list>\n      #include <algorithm>\n      #include <string>\n\n      using namespace std;\n```", "```cpp\n      struct city {\n          string name;\n          unsigned population;\n      };\n```", "```cpp\n      bool operator==(const city &a, const city &b) {\n          return a.name == b.name && a.population == b.population;\n      }\n```", "```cpp\n      ostream& operator<<(ostream &os, const city &city) {\n          return os << \"{\" << city.name << \", \" \n                    << city.population << \"}\";\n      }\n```", "```cpp\n      template <typename C>\n      static auto opt_print (const C &container)\n      {\n          return [end_it (end(container))] (const auto &item) {\n              if (item != end_it) {\n                  cout << *item << 'n';\n              } else {\n                  cout << \"<end>n\";\n              }\n          };\n      }\n```", "```cpp\n      int main()\n      {\n          const vector<city> c {\n              {\"Aachen\",        246000},\n              {\"Berlin\",       3502000},\n              {\"Braunschweig\",  251000},\n              {\"Cologne\",      1060000}\n          };\n```", "```cpp\n          auto print_city (opt_print(c));\n```", "```cpp\n          {\n              auto found_cologne (find(begin(c), end(c), \n                  city{\"Cologne\", 1060000}));\n              print_city(found_cologne);\n          }\n```", "```cpp\n          {\n              auto found_cologne (find_if(begin(c), end(c), \n                  [] (const auto &item) {\n                      return item.name == \"Cologne\";\n                  }));\n              print_city(found_cologne);\n          }\n```", "```cpp\n          {\n              auto population_more_than ([](unsigned i) {\n                  return [=] (const city &item) { \n                      return item.population > i; \n                  };\n              });\n              auto found_large (find_if(begin(c), end(c), \n                  population_more_than(2000000)));\n              print_city(found_large);\n          }\n```", "```cpp\n          const vector<int> v {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n\n          auto print_int (opt_print(v));\n```", "```cpp\n          bool contains_7 {binary_search(begin(v), end(v), 7)};\n          cout << contains_7 << 'n';\n```", "```cpp\n          auto [lower_it, upper_it] (\n              equal_range(begin(v), end(v), 7));\n          print_int(lower_it);\n          print_int(upper_it);\n```", "```cpp\n          print_int(lower_bound(begin(v), end(v), 7));\n          print_int(upper_bound(begin(v), end(v), 7));\n      }\n```", "```cpp\n      $ ./finding_items \n      {Cologne, 1060000}\n      {Cologne, 1060000}\n      {Berlin, 3502000}\n      1\n      7\n      8\n      7\n      8\n```", "```cpp\ntemplate <typename Iterator, typename T>\nIterator standard_binary_search(Iterator it, Iterator end_it, T value)\n{\n    const auto potential_match (lower_bound(it, end_it, value));\n    if (potential_match != end_it && value == *potential_match) {\n        return potential_match;\n    }\n    return end_it;\n}\n```", "```cpp\n       #include <iostream>\n       #include <vector>\n       #include <algorithm>\n       #include <iterator>       \n\n       using namespace std;\n```", "```cpp\n       static auto norm (int min, int max, int new_max)\n       {\n           const double diff (max - min);\n           return [=] (int val) {\n               return int((val - min) / diff * new_max);\n           };\n       }\n```", "```cpp\n       static auto clampval (int min, int max)\n       {\n           return [=] (int val) -> int {\n               return clamp(val, min, max);\n           };\n       }\n```", "```cpp\n       int main()\n       {\n           vector<int> v {0, 1000, 5, 250, 300, 800, 900, 321};\n```", "```cpp\n           const auto [min_it, max_it] (\n               minmax_element(begin(v), end(v)));\n```", "```cpp\n           vector<int> v_norm;\n           v_norm.reserve(v.size());\n```", "```cpp\n           transform(begin(v), end(v), back_inserter(v_norm),\n                     norm(*min_it, *max_it, 255));\n```", "```cpp\n           copy(begin(v_norm), end(v_norm), \n                ostream_iterator<int>{cout, \", \"});\n           cout << 'n';\n```", "```cpp\n           transform(begin(v), end(v), begin(v_norm), \n                     clampval(0, 255));\n```", "```cpp\n           copy(begin(v_norm), end(v_norm),\n                ostream_iterator<int>{cout, \", \"});\n           cout << 'n';\n       }\n```", "```cpp\n      $ ./reducing_range_in_vector \n      0, 255, 1, 63, 76, 204, 229, 81, \n      0, 255, 5, 250, 255, 255, 255, 255,\n```", "```cpp\n       #include <iostream>\n       #include <string>\n       #include <algorithm>\n       #include <iterator>\n       #include <functional>       \n\n       using namespace std;\n```", "```cpp\n       template <typename Itr>\n       static void print(Itr it, size_t chars)\n       {\n           copy_n(it, chars, ostream_iterator<char>{cout});\n           cout << 'n';\n       }\n```", "```cpp\n       int main()\n       {\n           const string long_string {\n               \"Lorem ipsum dolor sit amet, consetetur\"\n               \" sadipscing elitr, sed diam nonumy eirmod\"};\n           const string needle {\"elitr\"};\n```", "```cpp\n           {\n               auto match (search(begin(long_string), end(long_string),\n                                  begin(needle), end(needle)));\n               print(match, 5);\n           }\n```", "```cpp\n           {\n               auto match (search(begin(long_string), end(long_string),\n                   default_searcher(begin(needle), end(needle))));\n               print(match, 5);\n           }\n```", "```cpp\n           {\n               auto match (search(begin(long_string), end(long_string),\n                   boyer_moore_searcher(begin(needle), \n                                        end(needle))));\n               print(match, 5);\n           }\n```", "```cpp\n           {\n               auto match (search(begin(long_string), end(long_string),\n                   boyer_moore_horspool_searcher(begin(needle), \n                                                 end(needle))));\n               print(match, 5);\n           }\n       }\n```", "```cpp\n      $ ./pattern_search_string \n      elitr\n      elitr\n      elitr\n      elitr\n```", "```cpp\n       #include <iostream>\n       #include <vector>\n       #include <random>\n       #include <algorithm>\n       #include <iterator>\n       #include <map>\n       #include <iomanip>       \n\n       using namespace std;\n```", "```cpp\n       int main()\n       {\n           const size_t data_points   {100000};\n           const size_t sample_points {100};\n```", "```cpp\n           const int    mean {10};\n           const size_t dev  {3};\n```", "```cpp\n           random_device rd;\n           mt19937 gen {rd()};\n           normal_distribution<> d {mean, dev};\n```", "```cpp\n           vector<int> v;\n           v.reserve(data_points);\n\n           generate_n(back_inserter(v), data_points, \n               [&] { return d(gen); });\n```", "```cpp\n           vector<int> samples;\n           v.reserve(sample_points);\n```", "```cpp\n           sample(begin(v), end(v), back_inserter(samples), \n                  sample_points, mt19937{random_device{}()});\n```", "```cpp\n           map<int, size_t> hist;\n\n           for (int i : samples) { ++hist[i]; }\n```", "```cpp\n           for (const auto &[value, count] : hist) {\n               cout << setw(2) << value << \" \"\n                    << string(count, '*') << 'n';\n           }    \n       }\n```", "```cpp\ntemplate<class InIterator, class OutIterator,\n         class Distance, class UniformRandomBitGenerator>\nOutIterator sample(InIterator first, InIterator last,\n                   SampleIterator out, Distance n, \n                   UniformRandomBitGenerator&& g);\n\n```", "```cpp\n      #include <iostream>\n      #include <vector>\n      #include <string>\n      #include <iterator>\n      #include <algorithm>      \n\n      using namespace std;\n```", "```cpp\n      int main()\n      {\n          vector<string> v {istream_iterator<string>{cin}, {}};\n          sort(begin(v), end(v));\n```", "```cpp\n          do {\n              copy(begin(v), end(v), \n                   ostream_iterator<string>{cout, \", \"});\n              cout << 'n';\n          } while (next_permutation(begin(v), end(v)));\n      }\n```", "```cpp\n      $ echo \"a b c\" | ./input_permutations \n      a, b, c, \n      a, c, b, \n      b, a, c, \n      b, c, a, \n      c, a, b, \n      c, b, a,\n```", "```cpp\n      #include <iostream>\n      #include <algorithm>\n      #include <iterator>\n      #include <deque>\n      #include <tuple>\n      #include <string>\n      #include <fstream>     \n\n      using namespace std;\n```", "```cpp\n      using dict_entry = pair<string, string>;\n```", "```cpp\n      namespace std {\n      ostream& operator<<(ostream &os, const dict_entry p)\n      {\n          return os << p.first << \" \" << p.second;\n      }\n\n      istream& operator>>(istream &is, dict_entry &p)\n      {\n          return is >> p.first >> p.second;\n      }\n\n      }\n```", "```cpp\n      template <typename IS>\n      deque<dict_entry> from_instream(IS &&is)\n      {\n          deque<dict_entry> d {istream_iterator<dict_entry>{is}, {}};\n          sort(begin(d), end(d));\n          return d;\n      }\n```", "```cpp\n      int main()\n      {\n          const auto dict1 (from_instream(ifstream{\"dict.txt\"}));\n          const auto dict2 (from_instream(cin));\n```", "```cpp\n          merge(begin(dict1), end(dict1),\n                begin(dict2), end(dict2),\n                ostream_iterator<dict_entry>{cout, \"n\"});\n      }\n```", "```cpp\n      car       auto\n      cellphone handy\n      house     haus\n```", "```cpp\n      $ echo \"table tisch fish fisch dog hund\" | ./dictionary_merge\n      car auto\n      cellphone handy\n      dog hund\n      fish fisch\n      house haus\n      table tisch\n```"]