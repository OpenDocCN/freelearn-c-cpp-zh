- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Creating the SuperSideScroller Game
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建SuperSideScroller游戏
- en: So far, we have learned a lot about Unreal Engine, C++ programming, and general
    game development techniques. In the previous chapters, we covered collisions,
    tracing, how to use C++ with UE5, and even the Blueprint Visual Scripting system.
    On top of that, we gained crucial knowledge of skeletons, animations, and Animation
    Blueprints, all of which we will utilize in the upcoming project.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学习了关于Unreal Engine、C++编程和一般游戏开发技术的很多知识。在前几章中，我们介绍了碰撞、追踪、如何使用C++与UE5以及蓝图可视化脚本系统。除此之外，我们还获得了关于骨骼、动画和动画蓝图的关键知识，所有这些我们将在即将到来的项目中利用。
- en: In this chapter, we will set up the project for a new SuperSideScroller game.
    You will be introduced to the different aspects of a side-scroller game, including
    power-ups, collectibles, and enemy AI, all of which we will be using in our project.
    You will also learn about the character animation pipeline in game development
    and learn how to manipulate the movement of our game’s character.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将为新SuperSideScroller游戏设置项目。您将了解横版游戏的不同方面，包括升级、可收集物品和敌人AI，这些我们将在项目中使用。您还将了解游戏开发中的角色动画流程，并学习如何操纵我们游戏角色的移动。
- en: For our newest project, SuperSideScroller, we will use many of the same concepts
    and tools that we have used in previous chapters to develop our game features
    and systems. Concepts such as collision, input, and the HUD will be at the forefront
    of our project; however, we will also be diving into new concepts involving animation
    to recreate the mechanics of popular side-scrolling games. The final project will
    be a culmination of everything we have learned thus far in this book.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们最新的项目，SuperSideScroller，我们将使用我们在前几章中用于开发游戏特性和系统的许多相同的概念和工具。碰撞、输入和HUD等概念将是我们项目的重点；然而，我们还将深入研究涉及动画的新概念，以重现流行横版游戏的机制。最终项目将是我们在本书中迄今为止所学内容的综合。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Project breakdown
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目分解
- en: The player character
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 玩家角色
- en: Exploring the features of our side-scroller game
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索我们的横版游戏功能
- en: Understanding animations in Unreal Engine 5
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Unreal Engine 5中的动画
- en: By the end of this chapter, we’ll have a better idea of what we want to accomplish
    with our `SuperSideScroller` game, and we will have the project foundation to
    begin development.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，我们将对我们的`SuperSideScroller`游戏想要实现的目标有一个更好的了解，并且我们将拥有开始开发的项目基础。
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: For this chapter, you will need to have Unreal Engine 5 installed.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，您需要安装Unreal Engine 5。
- en: This chapter does not feature any C++ code, and all the exercises are performed
    within the UE5 editor. Let’s begin this chapter with a brief breakdown of the
    `SuperSideScroller` project.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章不包含任何C++代码，所有练习都在UE5编辑器中完成。让我们从对`SuperSideScroller`项目的简要概述开始本章。
- en: 'The project for this chapter can be found in the Chapter10 folder of the code
    bundle for this book, which can be downloaded here: [https://github.com/PacktPublishing/Elevating-Game-Experiences-with-Unreal-Engine-5-Second-Edition](https://github.com/PacktPublishing/Elevating-Game-Experiences-with-Unreal-Engine-5-Second-Edition).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的项目可以在本书代码包的Chapter10文件夹中找到，可以在此处下载：[https://github.com/PacktPublishing/Elevating-Game-Experiences-with-Unreal-Engine-5-Second-Edition](https://github.com/PacktPublishing/Elevating-Game-Experiences-with-Unreal-Engine-5-Second-Edition)。
- en: Project breakdown
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目分解
- en: 'Let’s consider the example of the classic game *Super Mario Bros*, released
    on the **Nintendo Entertainment System** (**NES**) console in 1985\. For those
    unfamiliar with the franchise, the general idea is this: the player takes control
    of Mario, who must traverse the many hazardous obstacles and creatures of the
    Mushroom Kingdom in the hope of rescuing Princess Peach from the sinister King
    Koopa, Bowser.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以1985年在**任天堂娱乐系统**（**NES**）上发布的经典游戏《超级马里奥兄弟》为例。对于那些不熟悉这个系列的人来说，大致的想法是这样的：玩家控制马里奥，必须穿越蘑菇王国的众多危险障碍和生物，希望从邪恶的库巴王，鲍斯手中救出公主佩奇。
- en: Note
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'To have an even better understanding of how the game works, check out this
    video of its gameplay: [https://www.youtube.com/watch?v=rLl9XBg7wSs](https://www.youtube.com/watch?v=rLl9XBg7wSs).'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解游戏的工作原理，请查看这个游戏玩法视频：[https://www.youtube.com/watch?v=rLl9XBg7wSs](https://www.youtube.com/watch?v=rLl9XBg7wSs)。
- en: 'The following are the core features and mechanics of games in this genre:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是该类型游戏中游戏的核心功能和机制：
- en: '`SuperSideScroller` game will be in 3D and not pure 2D, the movement of our
    character will work identically to that of Mario, only supporting vertical and
    horizontal movement:'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SuperSideScroller` 游戏将是3D的，而不是纯2D，我们角色的移动将与马里奥相同，仅支持垂直和水平移动：'
- en: '![Figure 10.1 – A comparison of 2D and 3D coordinate vectors ](img/Figure_10.01_B18531.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图10.1 – 2D和3D坐标向量的比较](img/Figure_10.01_B18531.jpg)'
- en: Figure 10.1 – A comparison of 2D and 3D coordinate vectors
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.1 – 2D和3D坐标向量的比较
- en: '`SuperSideScroller` game will be no different. There are many different games,
    such as *Celeste*, *Hollow* *Knight*, and *Super Meat Boy*, as mentioned previously,
    that use the jumping feature – all of which are in 2D.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SuperSideScroller` 游戏也将如此。正如之前提到的，有许多不同的游戏，如 *Celeste*、*Hollow Knight* 和 *Super
    Meat Boy*，它们都使用了跳跃功能——所有这些都是在2D中。'
- en: '**Character Power-Ups**: Without character power-ups, many side-scrolling games
    lose their sense of chaos and replayability. For instance, in the game *Ori and
    the Blind Forest*, the developers introduce different character abilities that
    change how the game is played. Abilities such as the triple-jump or the air dash
    open a variety of possibilities to navigate the level and allow level designers
    to create interesting layouts based on the movement abilities of the player.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**角色能力提升**：没有角色能力提升，许多横版滚动游戏会失去其混乱感和可玩性。例如，在游戏 *Ori and the Blind Forest* 中，开发者引入了不同的角色能力，这些能力改变了游戏的玩法。像三重跳或空中冲刺这样的能力为玩家提供了多种导航关卡的可能性，并允许关卡设计师根据玩家的移动能力创建有趣的布局。'
- en: '**Enemy AI**: Enemies with various abilities and behaviors are introduced to
    add a layer of challenge for the player, on top of the challenge of navigating
    the level solely through the use of the available movement mechanics.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**敌人AI**：引入具有各种能力和行为的敌人，为玩家增加一层挑战，除了仅通过使用可用的移动机制来导航关卡之外。'
- en: Note
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'What are some ways that AI in games can interact with the player? For example,
    in *The Elder Scrolls V: Skyrim*, there are AI characters in various towns and
    villages that can have conversations with the player to exposit world-building
    elements such as history, sell items to the player, and even give quests to the
    player.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '游戏中的AI如何与玩家互动有哪些方式？例如，在 *The Elder Scrolls V: Skyrim* 中，各个城镇和村庄中都有AI角色，它们可以与玩家进行对话，解释世界构建元素，如历史，向玩家出售物品，甚至向玩家发布任务。'
- en: '`SuperSideScroller` game will allow players to collect coins.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SuperSideScroller` 游戏将允许玩家收集金币。'
- en: Now that we have evaluated the game mechanics that we want to support, we can
    break down the functionality of each mechanic as it relates to our `SuperSideScroller`
    game and what we need to do to implement these features.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经评估了我们想要支持的游戏机制，我们可以根据我们的 `SuperSideScroller` 游戏以及我们需要实现这些功能来分解每个机制的功能。
- en: The player character
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 玩家角色
- en: At the core of any game is the player character; that is, the entity in which
    our player will interact and play our game. For our `SuperSideScroller` project,
    we will be creating a simple character with custom meshes, animations, and logic
    behind it to give it the proper feel for a side-scroller game.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 任何游戏的内核都是玩家角色；也就是说，玩家将与之交互并玩游戏的角色实体。对于我们的 `SuperSideScroller` 项目，我们将创建一个简单的角色，具有自定义网格、动画和背后的逻辑，以使其具有横版滚动游戏的适当感觉。
- en: Almost all of the functionality that we want for our character is given to us
    by default when using the `Side Scroller` game project template in UE5\.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎我们想要为我们的角色提供的所有功能，在使用UE5中的`Side Scroller`游戏项目模板时都会默认提供。
- en: Note
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: At the time of writing, we are using Unreal Engine version 5.0.0; using another
    version of the engine could result in some differences in the editor, the tools,
    and how your logic will work later, so please keep this in mind.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，我们正在使用Unreal Engine版本5.0.0；使用该引擎的其他版本可能会导致编辑器、工具以及您稍后逻辑工作的一些差异，所以请记住这一点。
- en: In the next exercise, we will create our game project and set up our player
    character, while also exploring how we can manipulate the parameters of the character
    to improve upon its movement.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个练习中，我们将创建我们的游戏项目并设置我们的玩家角色，同时探索我们如何操纵角色的参数来改进其移动。
- en: Converting the Third Person template into a side-scroller
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将第三人称模板转换为侧滚动游戏
- en: Back in Unreal Engine 4, the engine came with a `Side-Scroller` template that
    could be used as the base template for the `SuperSideScroller` project; however,
    in UE5, no such template exists. As a result, we will be using the `Third Person`
    template project provided by UE5 and updating some parameters to make it look
    and feel like a side-scroller game.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 回到Unreal Engine 4，该引擎附带了一个 `侧滚动` 模板，可以用作 `SuperSideScroller` 项目的基模板；然而，在UE5中，没有这样的模板。因此，我们将使用UE5提供的
    `第三人称` 模板项目，并更新一些参数，使其看起来和感觉像是一款侧滚动游戏。
- en: Let’s begin by creating our project.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先创建我们的项目。
- en: Exercise 10.01 – Creating the side-scroller project and using the Character
    Movement component
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习10.01 – 创建侧滚动项目和使用角色移动组件
- en: In this exercise, you will be setting up UE5 with the `Third Person` template.
    This exercise will help you get started with our game.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将设置UE5使用 `第三人称` 模板。这个练习将帮助你开始我们的游戏。
- en: 'Follow these steps to complete the exercise:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤完成练习：
- en: First, open the Epic Games Launcher, navigate to the **Unreal Engine** tab at
    the bottom of the options on the left-hand side, and select the **Library** option
    at the top.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，打开Epic Games Launcher，导航到左侧选项底部的 **Unreal Engine** 选项卡，并选择顶部的 **库** 选项。
- en: Next, you will be prompted with a window asking you to either open an existing
    project or create a new project of a certain category. Among these options is
    the **Games** category; select this option for our project. With your project
    category selected, you will be prompted to select the template for your project.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，你将看到一个窗口提示你打开现有项目或创建一个特定类别的新的项目。在这些选项中有一个 **游戏** 类别；为我们的项目选择此选项。在项目类别选择后，你将被提示选择项目的模板。
- en: Next, click on the **Third Person** option; because the **Side Scroller** template
    no longer exists, the **Third Person** template is the closest option we have.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击 **第三人称** 选项；因为 **侧滚动** 模板不再存在，**第三人称** 模板是我们目前最接近的选项。
- en: Lastly, we need to set up the default project settings before Unreal Engine
    will create our project for us.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在Unreal Engine为我们创建项目之前，我们需要设置默认的项目设置。
- en: Choose to base the project on `C++`, not `Blueprints`, include `Starter Content`,
    and use `Desktop/Console` as our platform. The remaining project settings can
    be left as their defaults. Select the desired location, name the project `SuperSideScroller`,
    and save the project in an appropriate directory of your choice.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择基于 `C++` 而不是 `Blueprints` 的项目，包含 `Starter Content`，并使用 `Desktop/Console` 作为我们的平台。其余的项目设置可以保留默认设置。选择所需的位置，将项目命名为
    `SuperSideScroller`，并将项目保存在您选择的适当目录中。
- en: 'After these settings are applied, select **Create Project**. When it’s done
    compiling the engine, both Unreal Editor and Visual Studio will open, and we can
    move on to the next steps of this exercise:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用这些设置后，选择 **创建项目**。当引擎编译完成后，Unreal Editor和Visual Studio都将打开，我们可以继续进行这个练习的下一步：
- en: '![Figure 10.2 – The Unreal Engine editor should now be open ](img/Figure_10.02_B18531.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图10.2 – Unreal Engine编辑器现在应该已经打开](img/Figure_10.02_B18531.jpg)'
- en: Figure 10.2 – The Unreal Engine editor should now be open
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.2 – Unreal Engine编辑器现在应该已经打开
- en: 'Now that our project has been created, we need to perform a handful of steps
    to change the `Third Person` template to a `Side Scroller`, starting with updating
    the input **Axis Mappings**. Follow these steps:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了项目，我们需要执行一系列步骤来将 `第三人称` 模板更改为 `侧滚动`，首先是从更新输入 **轴映射** 开始。按照以下步骤操作：
- en: We can access **Axis Mappings** via **Project Settings** by selecting the **Edit**
    drop-down menu at the top-left of the editor and selecting the **Project Settings**
    option.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过 **项目设置** 中的 **轴映射** 来访问，通过在编辑器的左上角选择 **编辑** 下拉菜单，然后选择 **项目设置** 选项。
- en: 'In **Project Settings**, we can find the **Input** option under the **Engine**
    category. Select the **Input** option to find the **Bindings** section, which
    contains both **Action** and **Axis Mappings** for the project:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **项目设置** 中，我们可以在 **引擎** 类别下找到 **输入** 选项。选择 **输入** 选项以找到 **绑定** 部分，其中包含项目的
    **动作** 和 **轴映射**：
- en: '![Figure 10.3 – The default Axis and Action Mappings ](img/Figure_10.03_B18531.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图10.3 – 默认轴和动作映射](img/Figure_10.03_B18531.jpg)'
- en: Figure 10.3 – The default Axis and Action Mappings
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.3 – 默认轴和动作映射
- en: For the needs of the `SuperSideScroller` project, we simply have to remove `MoveForward`,
    `TurnRate`, `Turn`, `LookUpRate`, and `LookUp`. You can remove a mapping by left-clicking
    the garbage can icon next to it.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于侧滚动游戏的角色控制行为，对于`SuperSideScroller`项目，我们只需简单地删除`MoveForward`、`TurnRate`、`Turn`、`LookUpRate`和`LookUp`。你可以通过左键单击它旁边的垃圾箱图标来删除映射。
- en: 'These mappings are unnecessary for our project due to the behavior of the character
    controls for a side-scroller game. Now that the mappings have been updated, we
    can update the parameters within the **ThirdPersonCharacter** Blueprint. Follow
    these steps:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 由于侧滚动游戏的角色控制行为，这些映射对于我们的项目是不必要的。现在映射已经更新，我们可以更新**第三人称角色**蓝图中的参数。按照以下步骤操作：
- en: Find the `Content/ThirdPersonCPP/Blueprints` directory. Then, open the asset.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到`Content/ThirdPersonCPP/Blueprints`目录。然后，打开资产。
- en: 'With the `-90.0f`. The final rotation should be `(Pitch=0.0,Yaw=-90.0,Roll=0.0)`.
    This will ensure that the character mesh will be facing the axis in which our
    side-scroller will move:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`-90.0f`。最终的旋转应该是`(Pitch=0.0,Yaw=-90.0,Roll=0.0)`。这将确保角色网格将面向我们的横版滚动游戏将移动的轴：
- en: '![Figure 10.4 – The updated Rotation values of the Mesh component ](img/Figure_10.04_B18531.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图10.4 – 网格组件的更新旋转值](img/Figure_10.04_B18531.jpg)'
- en: Figure 10.4 – The updated Rotation values of the Mesh component
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.4 – 网格组件的更新旋转值
- en: 'Next, we need to update the parameters within the `180.0f`, with the final
    rotation as `(Pitch=0.0,Yaw=180.0,Roll=0.0)`:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要更新`180.0f`内的参数，最终的旋转为`(Pitch=0.0,Yaw=180.0,Roll=0.0)`：
- en: '![Figure 10.5 0 – The updated Rotation values of the Camera Boom component
    ](img/Figure_10.05_B18531.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图10.5 0 – 相机吊杆组件的更新旋转值](img/Figure_10.05_B18531.jpg)'
- en: Figure 10.5 0 – The updated Rotation values of the Camera Boom component
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.5 0 – 相机吊杆组件的更新旋转值
- en: 'Now, we need to update the `500.0f` and set the `Z` value of `75.0f`. This
    will give us a good relative positioning of the **Follow Camera** component to
    the character mesh:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要更新`500.0f`并将`Z`值设置为`75.0f`。这将给我们一个良好的**跟随相机**组件相对于角色网格的相对定位：
- en: '![Figure 10.6 – The updated Target Arm Length and Target Offset parameters
    ](img/Figure_10.06_B18531.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图10.6 – 更新的目标臂长和目标偏移参数](img/Figure_10.06_B18531.jpg)'
- en: Figure 10.6 – The updated Target Arm Length and Target Offset parameters
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.6 – 更新的目标臂长和目标偏移参数
- en: The final parameter we need to update in the `False`.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要最后更新的参数是`False`。
- en: 'The next set of parameters can be within **Character Movement Component**,
    which we will talk about more later in this chapter. For now, all you need to
    know is that this component controls all aspects of the character''s movement
    and allows us to customize it in a way to give us the game feel we desire. Follow
    these steps:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个参数集可以在**角色移动组件**中，我们将在本章后面详细讨论。现在，你需要知道的是，这个组件控制角色移动的所有方面，并允许我们以我们期望的游戏感觉进行自定义。按照以下步骤操作：
- en: 'Select `2.0f`. This will increase the gravity for our character:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`2.0f`。这将增加我们角色的重力：
- en: '![Figure 10.7 – The updated Gravity Scale parameter ](img/Figure_10.07_B18531.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图10.7 – 更新的重力缩放参数](img/Figure_10.07_B18531.jpg)'
- en: Figure 10.7 – The updated Gravity Scale parameter
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.7 – 更新的重力缩放参数
- en: 'Next, we need to decrease the value of the `3.0f`. The higher the value of
    **Ground Friction**, the more difficult it will be for the character to turn and
    move:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要减小`3.0f`的值。**地面摩擦力**的值越高，角色转弯和移动就越困难：
- en: '![Figure 10.8 – The updated Ground Friction parameter ](img/Figure_10.08_B18531.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图10.8 – 更新的地面摩擦力参数](img/Figure_10.08_B18531.jpg)'
- en: Figure 10.8 – The updated Ground Friction parameter
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.8 – 更新的地面摩擦力参数
- en: 'Let’s adjust the parameters that control the jump velocity and the air control
    the player has while the character is in the air. We can find both parameters
    under `1000.0f`, and `0.8f`. Updating these values gives our character an interesting
    jump height and movement while in the air:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们调整控制跳跃速度和玩家在空中时空中控制的参数。我们可以在`1000.0f`和`0.8f`下找到这两个参数。更新这些值将给我们的角色一个有趣的跳跃高度和在空中的移动：
- en: '![Figure 10.9 – The updated Jump Z Velocity and Air Control parameters ](img/Figure_10.09_B18531.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图10.9 – 更新的跳跃Z速度和空中控制参数](img/Figure_10.09_B18531.jpg)'
- en: Figure 10.9 – The updated Jump Z Velocity and Air Control parameters
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.9 – 更新的跳跃Z速度和空中控制参数
- en: 'The next set of parameters need to be set to help us later on in [*Chapter
    13*](B18531_13.xhtml#_idTextAnchor268)*, Creating and Adding the Enemy Artificial
    Intelligence*, when we work with **Nav Meshes**. Under the **Nav Movement** section
    of **Character Movement Component**, we need to update both **Nav Agent Radius**
    and **Nav Agent Height** to fit the bounds of **Capsule Component** on our player
    character. Follow these steps:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的一组参数需要设置，以便我们在[*第 13 章*](B18531_13.xhtml#_idTextAnchor268)*，创建和添加敌人人工智能*时，在处理**导航网格**时有所帮助。在**角色移动组件**的**导航移动**部分，我们需要更新**导航代理半径**和**导航代理高度**以适应我们玩家角色上的**胶囊组件**的边界。按照以下步骤操作：
- en: 'Set `42.0f` and `192.0f`:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置 `42.0f` 和 `192.0f`：
- en: '![Figure 10.10 – The updated values of the Nav Agent Radius and Nav Agent Height
    parameters ](img/Figure_10.10_B18531.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.10 – 更新后的导航代理半径和导航代理高度参数值](img/Figure_10.10_B18531.jpg)'
- en: Figure 10.10 – The updated values of the Nav Agent Radius and Nav Agent Height
    parameters
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.10 – 更新后的导航代理半径和导航代理高度参数值
- en: 'Lastly, we need to adjust the `1.0f`; the final value will be `(X=1.0f,Y=0.0,Z=0.0)`:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要调整 `1.0f`；最终值将是 `(X=1.0f,Y=0.0,Z=0.0)`：
- en: '![Figure 10.11 – The updated values of the Constrain to Plane and Plane Constraint
    Normal parameters ](img/Figure_10.11_B18531.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.11 – 更新后的约束到平面和平面约束法线参数值](img/Figure_10.11_B18531.jpg)'
- en: Figure 10.11 – The updated values of the Constrain to Plane and Plane Constraint
    Normal parameters
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.11 – 更新后的约束到平面和平面约束法线参数值
- en: 'The final step is to add some simple Blueprint logic to the `Event Graph` area
    of `ThirdPersonCharacter` to allow our character to move from left to right. Follow
    these steps:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是在 `ThirdPersonCharacter` 的 `Event Graph` 区域添加一些简单的蓝图逻辑，以便我们的角色可以从左向右移动。按照以下步骤操作：
- en: 'In the **Event Graph** area, right-click in an empty space of the graph to
    open the context-sensitive menu, where we will look for the **InputAxis MoveRight**
    event. Select the **InputAxis MoveRight** event to add it to the graph:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**事件图**区域，在图的空白处右键单击以打开上下文相关菜单，我们将在此查找**InputAxis MoveRight**事件。选择**InputAxis
    MoveRight**事件并将其添加到图中：
- en: '![Figure 10.12 – This is the Axis Mapping we kept at the beginning of this
    exercise ](img/Figure_10.12_B18531.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.12 – 这是我们在本练习开始时保留的轴映射](img/Figure_10.12_B18531.jpg)'
- en: Figure 10.12 – This is the Axis Mapping we kept at the beginning of this exercise
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.12 – 这是我们在本练习开始时保留的轴映射
- en: 'The output parameter of the **InputAxis MoveRight** event is a float value
    called **Axis Value**. This returns a float value between 0 and 1, indicating
    the strength of the input in that direction. We will need to feed this value into
    a function called **Add Movement Input**. Right-click in another empty space and
    find this function to add it to the graph:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**InputAxis MoveRight** 事件的输出参数是一个名为**Axis Value**的浮点值。它返回一个介于 0 和 1 之间的浮点值，表示该方向输入的强度。我们需要将此值输入到名为**Add
    Movement Input**的函数中。在另一个空白处右键单击并找到此函数以将其添加到图中：'
- en: '![Figure 10.13 – The Add Movement Input function ](img/Figure_10.13_B18531.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.13 – 添加移动输入函数](img/Figure_10.13_B18531.jpg)'
- en: Figure 10.13 – The Add Movement Input function
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.13 – 添加移动输入函数
- en: 'Connect the **Axis Value** output parameter of the **InputAxis MoveRight**
    event to the **Scale Value** input parameter of the **Add Movement Input** function,
    then connect the white execution pins, as shown in the following screenshot. This
    allows us to add character movement in a specified direction, as well as strength:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **InputAxis MoveRight** 事件的 **Axis Value** 输出参数连接到 **Add Movement Input**
    函数的 **Scale Value** 输入参数，然后连接白色执行引脚，如图下截图所示。这允许我们在指定方向添加角色移动，以及强度：
- en: '![Figure 10.14 – The final Blueprint logic of our character ](img/Figure_10.14_B18531.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.14 – 我们角色的最终蓝图逻辑](img/Figure_10.14_B18531.jpg)'
- en: Figure 10.14 – The final Blueprint logic of our character
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.14 – 我们角色的最终蓝图逻辑
- en: Lastly, we need to ensure that we pass in the right `1.0f` and leave the other
    axes at their default values of `0.0f`.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要确保传入正确的 `1.0f` 并将其他轴保留在其默认值 `0.0f`。
- en: Now that you have completed the exercise, you have experienced first-hand the
    control you have over how the character moves and how small tweaks to **Character
    Movement Component** can drastically change how the character feels! Try changing
    the values such as **Max Walk Speed** and observe in-game how such changes affect
    the character.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经完成了练习，你亲自体验了如何控制角色的移动，以及如何通过微调**角色移动组件**来极大地改变角色的感觉！尝试更改如**最大行走速度**等值，并在游戏中观察这些更改如何影响角色。
- en: Activity 10.01 – Making our character jump higher
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动10.01 – 让我们的角色跳得更高
- en: In this activity, we will be manipulating a new parameter (`jump`) that exists
    within the `CharacterMovement` component of the default `Side Scroller` Character
    Blueprint to observe how these properties affect how our character moves.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个活动中，我们将操作一个新参数（`jump`），它存在于默认的`Side Scroller`角色蓝图中的`CharacterMovement`组件中，以观察这些属性如何影响我们的角色移动。
- en: We will be implementing what we learned in the previous exercise and applying
    that to how to create our character power-ups and the general movement feel of
    our character.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将应用之前练习中学到的知识，并将其应用于如何创建我们的角色升级和角色的一般移动感觉。
- en: 'Follow these steps to complete this activity:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤完成此活动：
- en: Head to the `SideScrollerCharacter` Blueprint and find the `CharacterMovement`
    component.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往`SideScrollerCharacter`蓝图，找到`CharacterMovement`组件。
- en: Change this parameter from the default value of `1000.0f` to `2000.0f`.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此参数从默认值`1000.0f`更改为`2000.0f`。
- en: Compile and save the `SideScrollerCharacter` Blueprint and play it in the editor.
    Observe how high our character can jump using the *space bar* on your keyboard.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译并保存`SideScrollerCharacter`蓝图，然后在编辑器中播放。观察我们的角色使用键盘上的**空格键**可以跳多高。
- en: Stop playing in the editor, return to the `SideScrollerCharacter` Blueprint,
    and update `2000.0f` to `200.0f`.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止在编辑器中播放，返回到`SideScrollerCharacter`蓝图，并将`2000.0f`更新为`200.0f`。
- en: Compile and save the Blueprint again, play it in the editor, and watch the character
    jump.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次编译并保存蓝图，然后在编辑器中播放，观察角色跳跃。
- en: '**Expected output**:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**预期输出**:'
- en: '![Figure 10.15 – The expected output with the jumping character ](img/Figure_10.15_B18531.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图10.15 – 跳跃角色的预期输出](img/Figure_10.15_B18531.jpg)'
- en: Figure 10.15 – The expected output with the jumping character
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.15 – 跳跃角色的预期输出
- en: Note
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The solution to this activity can be found on GitHub here: [https://github.com/PacktPublishing/Elevating-Game-Experiences-with-Unreal-Engine-5-Second-Edition/tree/main/Activity%20solutions](https://github.com/PacktPublishing/Elevating-Game-Experiences-with-Unreal-Engine-5-Second-Edition/tree/main/Activity%20solutions).'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的解决方案可以在GitHub上找到：[https://github.com/PacktPublishing/Elevating-Game-Experiences-with-Unreal-Engine-5-Second-Edition/tree/main/Activity%20solutions](https://github.com/PacktPublishing/Elevating-Game-Experiences-with-Unreal-Engine-5-Second-Edition/tree/main/Activity%20solutions)。
- en: Now that we have completed this activity, we have a better understanding of
    how making a few changes to the `CharacterMovement` component parameters can affect
    our player character. We can use this later on when we need to give our character
    basic movement behaviors such as `1000.0f`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了这个活动，我们对如何通过更改`CharacterMovement`组件参数来影响我们的玩家角色有了更好的理解。我们可以在需要给角色提供基本移动行为，如`1000.0f`时使用这些知识。
- en: We will also keep these parameters in mind when we develop our player character
    power-ups later in our project.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在项目后期开发玩家角色升级时也会考虑这些参数。
- en: Now that we have established our game project and player character, let’s explore
    the other features of our `SuperSideScroller` game.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经建立了我们的游戏项目和玩家角色，让我们探索`SuperSideScroller`游戏的其他功能。
- en: Exploring the features of our side-scroller game
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索我们的横版游戏功能
- en: Now, we’ll take some time to lay out the specifics of the game we’ll be designing.
    Many of these features will be implemented in later chapters, but now is a good
    time to lay out the vision for the project. In the following sections, we will
    be discussing how we want to handle the different aspects of our game, such as
    the enemies the player will face, the power-ups available to the player, the collectibles
    for the player to collect, and how the **user interface** (**UI**) will work.
    Let’s begin by discussing the enemy character.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将花些时间来具体说明我们将要设计的游戏。其中许多功能将在后面的章节中实现，但现在是一个很好的时间来概述项目的愿景。在接下来的部分中，我们将讨论我们希望如何处理游戏的不同方面，例如玩家将面对的敌人、玩家可用的升级、玩家要收集的物品，以及**用户界面**（**UI**）的工作方式。让我们从讨论敌人角色开始。
- en: Enemy character
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 敌人角色
- en: One thing you should have noticed while playing the `SuperSideScroller` project
    is that there is no enemy AI by default. Let’s discuss the type of enemy we will
    want to support and how they will work.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在玩`SuperSideScroller`项目时，你应该注意到的第一件事是默认情况下没有敌人AI。让我们讨论我们将想要支持的敌人类型以及它们将如何工作。
- en: The enemy will have a basic back-and-forth movement pattern and will not support
    any attacks; only by colliding with the player character will they be able to
    inflict any damage. However, we need to set the two locations to move between
    for the enemy AI, as well as decide whether the AI should change locations. Should
    they constantly move between locations, or should there be a pause before selecting
    a new location to move to? In [*Chapter 13*](B18531_13.xhtml#_idTextAnchor268),
    *Creating and Adding the Enemy Artificial Intelligence*, we will use the tools
    available in UE5 to develop this AI logic.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 敌人将有一个基本的来回移动模式，并且不支持任何攻击；只有通过与玩家角色碰撞，它们才能造成任何伤害。然而，我们需要为敌人AI设置两个移动之间的位置，以及决定AI是否应该改变位置。它们应该不断在位置之间移动，还是应该在选择新位置之前有一个暂停？在[*第13章*](B18531_13.xhtml#_idTextAnchor268)，*创建和添加敌人人工智能*中，我们将使用UE5中可用的工具来开发这种AI逻辑。
- en: Power-ups
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 增强效果
- en: The `SuperSideScroller` game project will support one type of power-up, in the
    form of a potion that the player can pick up from the environment. This potion
    power-up will increase the movement speed of the player and the maximum height
    to which the player can jump. These effects will only last a short duration before
    they are removed.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`SuperSideScroller`游戏项目将支持一种类型的增强效果，以药水的形式出现，玩家可以从环境中拾取。这种增强效果的药水将增加玩家的移动速度以及玩家可以跳到的最大高度。这些效果将在短时间内持续，然后被移除。'
- en: Keeping in mind what you implemented in *Exercise 10.01 – Creating the side-scroller
    project and using the Character Movement component*, and *Activity 10.01 – Making
    our character jump higher*, for the `CharacterMovement` component, you could develop
    a power-up that changes the effect of gravity on the character, which would provide
    interesting new ways to navigate the level and combat enemies.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到你已经在*练习10.01 – 创建侧滚动项目并使用角色移动组件*和*活动10.01 – 使我们的角色跳得更高*中实现了内容，对于`CharacterMovement`组件，你可以开发一个增强效果，该效果会改变重力对角色的影响，这将提供有趣的新方法来导航关卡和对抗敌人。
- en: Collectibles
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 收藏品
- en: 'Collectibles in video games serve different purposes. In some cases, collectibles
    are used as a form of currency to purchase upgrades, items, and other goods. In
    others, collectibles serve to improve your score or reward you when enough collectibles
    have been collected. For the `SuperSideScroller` game project, the coins will
    serve a single purpose: to give the player the goal of collecting as many coins
    as they can without being destroyed by the enemy.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 视频游戏中的收藏品有不同的用途。在某些情况下，收藏品被用作货币的形式来购买升级、物品和其他商品。在其他情况下，收藏品用于提高你的分数或在你收集足够数量的收藏品时给予奖励。对于`SuperSideScroller`游戏项目，硬币将只有一个目的：给玩家一个收集尽可能多的硬币而不被敌人摧毁的目标。
- en: 'Let’s break down the main aspects of our collectible:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解一下我们收藏品的主要方面：
- en: The collectible needs to interact with our player; this means that we need to
    use collision detection for the player to collect it and for us to add information
    to our UI.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收藏品需要与我们的玩家互动；这意味着我们需要使用碰撞检测，以便玩家能够收集它，并且我们可以向我们的用户界面添加信息。
- en: The collectible needs a visual static mesh representation so that the player
    can identify it in the level.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收藏品需要一个视觉静态网格表示，以便玩家可以在关卡中识别它。
- en: 'The final element of our `SuperSideScroller` project is the brick block. The
    brick block will serve the following purposes for the `SuperSideScroller` game:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们`SuperSideScroller`项目的最后一个元素是砖块。砖块将为`SuperSideScroller`游戏服务以下目的：
- en: Bricks are used as an element of the level’s design. Bricks can be used to access
    otherwise unreachable areas; enemies can be placed on different elevated sections
    of bricks to provide variation in gameplay.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 砖块被用作关卡设计的元素。砖块可以被用来进入其他地方无法到达的区域；敌人可以被放置在砖块的不同升高部分，以提供游戏玩法上的变化。
- en: Bricks can contain collectible coins. This gives the player an incentive to
    try and see which blocks contain collectibles and which do not.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 砖块可以包含收藏币。这为玩家提供了一个尝试并查看哪些砖块包含收藏品以及哪些不包含的动机。
- en: Heads-Up Display (HUD)
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 抬头显示（HUD）
- en: The HUD UI can be used to display important and relevant information to the
    player, based on the type of game and the mechanics that you support. For the
    `SuperSideScroller` project, there will be one HUD element, which will show the
    player how many coins they have collected. This UI will be updated each time the
    player collects a coin, and it will reset back to `0` when the player is destroyed.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: HUD UI可以根据游戏类型和支持的机制显示对玩家重要和相关的信息。对于`SuperSideScroller`项目，将有一个HUD元素，它将显示玩家收集了多少枚硬币。每次玩家收集一枚硬币时，此UI都会更新，并且当玩家被销毁时，它将重置回`0`。
- en: Now that we have laid out some of the specifics that we will be working toward
    as part of this project, let’s learn more about the default skeletal mesh provided
    by the project template in UE5.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经概述了我们将作为本项目一部分努力实现的一些具体内容，让我们更多地了解UE5项目模板提供的默认骨骼网格。
- en: Exercise 10.02 – Exploring the Persona Editor and manipulating the default mannequin
    skeleton weights
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习10.02 – 探索角色编辑器并操作默认人体模型骨骼权重
- en: Now that we have a better understanding of the different aspects of the `SuperSideScroller`
    project, let’s go ahead and take a deeper look into the default mannequin skeletal
    mesh that is given to us in the **Side Scroller** template project.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对`SuperSideScroller`项目的不同方面有了更好的理解，让我们进一步深入了解**侧滚动**模板项目中提供的默认人体模型骨骼网格。
- en: Our goal here is to learn more about the default skeletal mesh and the tools
    that are given to us in the Persona Editor so that we have a better understanding
    of how bones, bone weighting, and skeletons work inside UE5.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是更多地了解默认骨骼网格以及角色编辑器中提供的工具，以便我们更好地理解在UE5中骨骼、骨骼权重和骨骼是如何工作的。
- en: 'Follow these steps to complete the exercise:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤完成练习：
- en: Open Unreal Editor and navigate to **Content Drawer**.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Unreal编辑器并导航到**内容抽屉**。
- en: 'Navigate to the `/Characters/Mannequins/Meshes/` folder and open the `SK_Mannequin`
    asset:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`/Characters/Mannequins/Meshes/`文件夹并打开`SK_Mannequin`资产：
- en: '![Figure 10.16 – The SK_Mannequin asset is highlighted and visible here ](img/Figure_10.16_B18531.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![图10.16 – SK_Mannequin资产在此处突出显示并可见](img/Figure_10.16_B18531.jpg)'
- en: Figure 10.16 – The SK_Mannequin asset is highlighted and visible here
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.16 – SK_Mannequin资产在此处突出显示并可见
- en: 'Upon opening the **Skeleton** asset, the **Persona Editor** area will appear:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 打开**骨骼**资产后，**角色编辑器**区域将出现：
- en: '![Figure 10.17 – The Persona Editor ](img/Figure_10.17_B18531.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![图10.17 – 角色编辑器](img/Figure_10.17_B18531.jpg)'
- en: Figure 10.17 – The Persona Editor
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.17 – 角色编辑器
- en: 'Let’s briefly break down the Skeleton Editor of the Persona Editor:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简要地分解一下角色编辑器的骨骼编辑器：
- en: On the left-hand side (*marked with a 1*), we can see the hierarchy of bones
    that exist in the skeleton. This is the skeleton that was made during the rigging
    process of this character. The `root` bone, as its name suggests, is the root
    of the skeletal hierarchy. This means that transformative changes to this bone
    will affect all of the bones in the hierarchy. From here, we can select a bone
    or a section of bones and see where they are on the character mesh.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在左侧（*标记为1*），我们可以看到骨骼中存在的骨骼层次结构。这是在角色的绑定过程中制作的骨骼。正如其名称所暗示的，`root`骨骼是骨骼层次结构的根。这意味着对这个骨骼的变换更改将影响层次结构中的所有骨骼。从这里，我们可以选择一个骨骼或骨骼的一部分，并看到它们在角色网格上的位置。
- en: Next, we see the **Skeletal Mesh** preview window (*marked with a 2*). It shows
    us our character mesh, and there are several additional options that we can toggle
    on/off that will give us a preview of our skeleton and weight painting.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，我们看到的是**骨骼网格**预览窗口（*标记为2*）。它展示了我们的角色网格，并且有几个额外的选项可以切换开启或关闭，这将给我们骨骼和权重绘制预览。
- en: On the right-hand side (*marked with a 3*), we have basic transformation options
    where we can modify individual bones or groups of bones. If the **Details** panel
    is not available, navigate to the **Window** tab at the top of the Persona Editor;
    you will find it in the list of options there. There are additional settings available
    that we will take advantage of in the next exercise. Now that we know more about
    what it is and what we are looking at, let’s see what the actual skeleton looks
    like on our mannequin.
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在右侧（*标记为3*），我们有基本的变换选项，在这里我们可以修改单个骨骼或骨骼组。如果**细节**面板不可用，请导航到角色编辑器顶部的**窗口**选项卡；您将在那里的选项列表中找到它。还有其他一些设置，我们将在下一个练习中利用它们。现在我们已经更了解了它是什么以及我们在看什么，让我们看看实际骨骼在我们人体模型上的样子。
- en: 'Navigate to **Character**, as shown in *Figure 10.10*:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如*图10.10*所示，导航到**角色**：
- en: '![Figure 10.18 – The Character options menu  ](img/Figure_10.18_B18531.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![图10.18 – 角色选项菜单](img/Figure_10.18_B18531.jpg)'
- en: Figure 10.18 – The Character options menu
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.18 – 角色选项菜单
- en: This menu allows you to display the skeleton of the mannequin over the mesh
    itself.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 此菜单允许您在网格本身上方显示人体模特的骨骼。
- en: 'From the drop-down menu, select the **Bones** option. Then, make sure the option
    for **All Hierarchy** is selected. With this option selected, you will see the
    outlined skeleton rendering above the mannequin mesh:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉菜单中选择**骨骼**选项。然后，确保选择了**全部层次结构**选项。选择此选项后，您将看到在人体模特网格上方的轮廓骨骼渲染：
- en: '![Figure 10.19 – The skeleton overlayed on top of the mannequin Skeletal Mesh
    ](img/Figure_10.19_B18531.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![图10.19 – 骨骼叠加在人体模特骨骼网格上](img/Figure_10.19_B18531.jpg)'
- en: Figure 10.19 – The skeleton overlayed on top of the mannequin Skeletal Mesh
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.19 – 骨骼叠加在人体模特的骨骼网格上
- en: 'Now, hide the mesh and simply preview the skeletal hierarchy, for which we
    can disable the **Mesh** property:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，隐藏网格，仅预览骨骼层次结构，为此我们可以禁用**网格**属性：
- en: Navigate to **Character** and, from the drop-down menu, select the **Mesh**
    option.
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导航到**角色**，然后从下拉菜单中选择**网格**选项。
- en: 'Deselect the option for **Mesh**. The result should be as follows:'
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 取消**网格**选项的选择。结果应该如下所示：
- en: '![Figure 10.20 – The skeletal hierarchy of the default character ](img/Figure_10.20_B18531.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![图10.20 – 默认角色的骨骼层次结构](img/Figure_10.20_B18531.jpg)'
- en: Figure 10.20 – The skeletal hierarchy of the default character
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.20 – 默认角色的骨骼层次结构
- en: For this exercise, let’s toggle the **Mesh** visibility back on so that we can
    see both the mesh and the skeleton hierarchy.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个练习，让我们切换**网格**的可见性，以便我们可以看到网格和骨骼层次结构。
- en: Finally, we’ll look at the weight scaling for our default character.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将查看默认角色的权重缩放。
- en: 'To preview this, navigate to **Character** and, from the drop-down menu, select
    the **Mesh** option. Then, select the **Selected Bone Weight** option toward the
    bottom in the **Mesh Overlay Drawing** section:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要预览此内容，请导航到**角色**，然后从下拉菜单中选择**网格**选项。然后，在**网格叠加绘制**部分选择底部的**选择骨骼权重**选项：
- en: '![Figure 10.21 – The Selected Bone Weight option ](img/Figure_10.21_B18531.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![图10.21 – 选择骨骼权重选项](img/Figure_10.21_B18531.jpg)'
- en: Figure 10.21 – The Selected Bone Weight option
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.21 – 选择骨骼权重选项
- en: 'Now, if we select a bone or a group of bones from our hierarchy, we can see
    how each bone affects a certain area of our mesh:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果我们从我们的层次结构中选择一个骨骼或一组骨骼，我们可以看到每个骨骼如何影响我们的网格的某个区域：
- en: '![Figure 10.22 – This is the weight scaling for the spine_03 bone ](img/Figure_10.22_B18531.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![图10.22 – 这是spine_03骨骼的权重缩放](img/Figure_10.22_B18531.jpg)'
- en: Figure 10.22 – This is the weight scaling for the spine_03 bone
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.22 – 这是spine_03骨骼的权重缩放
- en: 'You will notice that when we are previewing the weight scaling for a particular
    bone, there is a spectrum of colors across different sections of the Skeletal
    Mesh. This is the weight scaling shown visually instead of numerically. Colors
    such as `red`, `orange`, and `yellow` indicate larger weighting for a bone, meaning
    that the highlighted area of the mesh in these colors will be more affected. In
    areas that are `blue`, `green`, and `cyan`, they will still be affected, but not
    as significantly. Lastly, areas that have no overlay highlight will not be affected
    at all by the manipulation of the selected bone. Keep the hierarchy of the skeleton
    in mind –even though the left arm does not have an overlay color, it will still
    be affected when you are rotating, scaling, and moving the `spine_03` bone, since
    the arms are children of the `spine_03` bone. Please refer to the following screenshot
    to see how the arms are connected to the spine:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到，当我们预览特定骨骼的权重缩放时，骨骼网格的不同部分会显示一系列颜色。这是以视觉方式而不是以数值方式显示的权重缩放。红色、橙色和黄色等颜色表示骨骼的权重较大，这意味着这些颜色下网格的高亮区域将受到更多影响。在蓝色、绿色和青色区域，它们仍然会受到一定影响，但影响程度较小。最后，没有叠加高亮的区域将完全不受所选骨骼操作的影响。请记住骨骼的层次结构——即使左臂没有叠加颜色，当您旋转、缩放和移动`spine_03`骨骼时，它仍然会受到影響，因为手臂是`spine_03`骨骼的子项。请参考以下截图以查看手臂如何连接到脊柱：
- en: '![Figure 10.23 – The clavicle_l and clavicle_r bones are children of the spine_03
    bone ](img/Figure_10.23_B18531.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![图10.23 – 腰锁骨_l和腰锁骨_r骨骼是spine_03骨骼的子项](img/Figure_10.23_B18531.jpg)'
- en: Figure 10.23 – The clavicle_l and clavicle_r bones are children of the spine_03
    bone
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.23 – 肩胛骨_l 和肩胛骨_r 骨是 spine_03 骨的子节点
- en: 'Let’s continue by manipulating one of the bones on the mannequin Skeletal Mesh
    and see how these changes affect its animation. Follow these steps:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过操作人体模型的骨骼网格上的一个骨骼来继续，看看这些更改如何影响其动画。按照以下步骤操作：
- en: 'In the `thigh_l` bone in the skeletal hierarchy:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在骨骼层次结构中的 `thigh_l` 骨：
- en: '![Figure 10.24 – Here, the thigh_l bone is selected ](img/Figure_10.24_B18531.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![图10.24 – 这里选择了 thigh_l 骨](img/Figure_10.24_B18531.jpg)'
- en: Figure 10.24 – Here, the thigh_l bone is selected
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.24 – 这里选择了 thigh_l 骨
- en: 'With the `thigh_l` bone selected, we have a clear indication of how the weight
    scaling will affect other parts of the mesh. Also, because of how the skeleton
    is structured, any modifications to this bone will not impact the upper body of
    the mesh:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择 `thigh_l` 骨时，我们可以清楚地看到重量缩放将如何影响网格的其他部分。此外，由于骨骼的结构，对这块骨头的任何修改都不会影响网格的上半身：
- en: '![Figure 10.25 – On the skeletal bone hierarchy, the thigh_l bone is a child
    of the pelvis bone ](img/Figure_10.25_B18531.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![图10.25 – 在骨骼骨层次结构中，thigh_l 骨是骨盆骨的子节点](img/Figure_10.25_B18531.jpg)'
- en: Figure 10.25 – On the skeletal bone hierarchy, the thigh_l bone is a child of
    the pelvis bone
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.25 – 在骨骼骨层次结构中，thigh_l 骨是骨盆骨的子节点
- en: 'Using our knowledge from earlier chapters, change the `thigh_l` bone. The following
    screenshot shows an example of the values you can use:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 利用我们之前章节的知识，更改 `thigh_l` 骨。以下截图显示了你可以使用的值示例：
- en: '![Figure 10.26 – The thigh_l values updated ](img/Figure_10.26_B18531.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![图10.26 – thigh_l 值已更新](img/Figure_10.26_B18531.jpg)'
- en: Figure 10.26 – The thigh_l values updated
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.26 – thigh_l 值已更新
- en: 'After making these changes to the bone transform, you will see that the mannequin’s
    left leg has completely changed and looks ridiculous:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在对骨骼变换做出这些更改后，您将看到人体模型的左腿已经完全改变，看起来很滑稽：
- en: '![Figure 10.27 – The left leg of the mannequin has completely changed ](img/Figure_10.27_B18531.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![图10.27 – 人体模型的左腿已经完全改变](img/Figure_10.27_B18531.jpg)'
- en: Figure 10.27 – The left leg of the mannequin has completely changed
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.27 – 人体模型的左腿已经完全改变
- en: Next, in the **Details** panel, go to the **Preview Scene Settings** tab. Upon
    left-clicking this tab, you will see new options, displaying some default parameters
    and an **Animation** section. If **Preview Scene Settings** is not available,
    navigate to the **Window** tab at the top of the **Persona Editor** area; you
    will find it in the list of options there.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在 **细节** 面板中，转到 **预览场景设置** 选项卡。在左键单击此选项卡时，您将看到新选项，显示一些默认参数和一个 **动画** 部分。如果
    **预览场景设置** 不可用，请导航到 **窗口** 选项卡，位于 **Persona 编辑器** 区域的顶部；您将在那里的选项列表中找到它。
- en: Use the **Animation** section to preview animations and how they are affected
    by the changes that are made to the skeleton. For the **Preview Controller** parameter,
    change that to the **Use Specific Animation** option. By doing this, a new option
    labeled **Animation** will appear. The **Animation** parameter allows us to choose
    an animation associated with the character skeleton to preview.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 **动画** 部分预览动画以及它们如何受到对骨骼所做的更改的影响。对于 **预览控制器** 参数，将其更改为 **使用特定动画** 选项。通过这样做，将出现一个名为
    **动画** 的新选项。**动画** 参数允许我们选择与角色骨骼关联的动画以进行预览。
- en: Next, left-click on the drop-down menu and select the `MF_Walk_Fwd` animation.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，左键单击下拉菜单并选择 `MF_Walk_Fwd` 动画。
- en: 'Finally, you will see the mannequin character playing the walking animation,
    but their left leg is completely misplaced and mis-scaled:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，你会看到人体模型正在播放行走动画，但它们的左腿完全放置不当且比例失调：
- en: '![Figure 10.28 – Preview of the updated animation for the mannequin character
    ](img/Figure_10.28_B18531.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![图10.28 – 更新后的人体模型动画预览](img/Figure_10.28_B18531.jpg)'
- en: Figure 10.28 – Preview of the updated animation for the mannequin character
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.28 – 更新后的人体模型动画预览
- en: Before moving on, make sure to return the `thigh_l` bone to its original **Local
    Location**, **Local Rotation**, and **Scale**; otherwise, the animations moving
    forward will not look correct.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，请确保将 `thigh_l` 骨返回到其原始的 **局部位置**、**局部旋转** 和 **缩放**；否则，向前移动的动画将看起来不正确。
- en: Now that you have completed the final part of our second exercise, you have
    experienced first-hand how skeletal bones affect characters and animations.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经完成了我们第二个练习的最后部分，你亲身体验了骨骼骨头如何影响角色和动画。
- en: Now, let’s move on to our second activity. Here, we will manipulate a different
    bone on the mannequin character and observe the results of applying different
    animations.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续我们的第二个活动。在这里，我们将操纵人体模型角色上的不同骨骼，并观察应用不同动画的结果。
- en: Activity 10.02 – Skeletal bone manipulation and animations
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动十.02 – 骨骼骨骼操纵和动画
- en: For this activity, we will put the knowledge we have gained about manipulating
    bones on the default mannequin into practice and affect how the animations are
    played out on the skeleton.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个活动，我们将把我们在操纵默认人体模型骨骼方面获得的知识付诸实践，并影响动画在骨架上的播放。
- en: 'Follow these steps to complete this activity:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤完成此活动：
- en: Select the bone that will affect the entire skeleton.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择将影响整个骨架的骨骼。
- en: Change the scale of this bone so that the character is half its original size.
    Use these values to change `(X=0.500000, Y=0.500000, Z=0.500000)`.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 改变这个骨骼的缩放，使角色变为原来的一半大小。使用这些值来改变`(X=0.500000, Y=0.500000, Z=0.500000)`。
- en: Apply the running animation to this Skeletal Mesh from the **Preview Scene Settings**
    tab and observe the animation for the half-sized character.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**预览场景设置**选项卡将跑步动画应用到这个骨骼网格上，并观察半大小角色的动画。
- en: 'Here is the expected output:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是预期的输出：
- en: '![Figure 10.29 – The character has been halved in size and is performing the
    running animation ](img/Figure_10.29_B18531.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![图10.29 – 角色尺寸减半并执行跑步动画](img/Figure_10.29_B18531.jpg)'
- en: Figure 10.29 – The character has been halved in size and is performing the running
    animation
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.29 – 角色尺寸减半并执行跑步动画
- en: Note
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The solution to this activity can be found on GitHub here: [https://github.com/PacktPublishing/Elevating-Game-Experiences-with-Unreal-Engine-5-Second-Edition/tree/main/Activity%20solutions](https://github.com/PacktPublishing/Elevating-Game-Experiences-with-Unreal-Engine-5-Second-Edition/tree/main/Activity%20solutions).'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 本活动的解决方案可以在GitHub上找到：[https://github.com/PacktPublishing/Elevating-Game-Experiences-with-Unreal-Engine-5-Second-Edition/tree/main/Activity%20solutions](https://github.com/PacktPublishing/Elevating-Game-Experiences-with-Unreal-Engine-5-Second-Edition/tree/main/Activity%20solutions)。
- en: With this activity complete, you now have practical knowledge of how bone manipulation
    of skeletons and Skeletal Meshes affects how animations are applied. You have
    also seen first-hand the effects weight scaling have on the bones of a skeleton.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这个活动后，你现在对骨骼和骨骼网格的骨骼操纵如何影响动画的应用有了实际的知识。你也亲眼看到了重量缩放对骨架骨骼的影响。
- en: Now that we have some experience with Skeletal Meshes, skeletons, and animations
    within UE5, let’s have a deeper discussion about these elements and how they work.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对UE5中的骨骼网格、骨架和动画有一些经验，让我们对这些元素及其工作方式进行更深入的讨论。
- en: Understanding animations in Unreal Engine 5
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解虚幻引擎5中的动画
- en: 'Let’s break down the main aspects of animations as they function inside Unreal
    Engine. More in-depth information about the topics in this section can be found
    in the documentation that is available directly from Epic Games: [https://docs.unrealengine.com/en-US/Engine/Animation](https://docs.unrealengine.com/en-US/Engine/Animation).'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析动画在虚幻引擎内部运行的主要方面。关于本节主题的更深入信息可以在Epic Games提供的文档中找到：[https://docs.unrealengine.com/en-US/Engine/Animation](https://docs.unrealengine.com/en-US/Engine/Animation)。
- en: Skeletons
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 骨架
- en: Skeletons are Unreal Engine’s representation of the character rig that was made
    in external 3D software; we saw this in *Activity 10.02 – Skeletal bone manipulation
    and animations*. There isn’t much more to skeletons that we haven’t discussed
    already, but the main takeaway is that once the skeleton is in the engine, we
    can view the skeleton hierarchy, manipulate each bone, and add objects known as
    sockets. What sockets allow us to do is attach objects to the bones of our character.
    We can use these sockets to attach objects such as meshes and manipulate the transformation
    of the sockets without disrupting the bones’ transformation. In first-person shooters,
    typically, a weapon socket is made and attached to the appropriate hand.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 骨架是虚幻引擎对外部3D软件中制作的角色绑定的一种表示；我们在*活动10.02 – 骨骼骨骼操纵和动画*中看到了这一点。关于骨架，我们还没有讨论的更多内容，但主要收获是，一旦骨架进入引擎，我们就可以查看骨架层次结构，操纵每个骨骼，并添加称为轴点的对象。轴点允许我们把我们角色的骨骼上的对象附加上去。我们可以使用这些轴点来附加对象，如网格，并操纵轴点的变换，而不会破坏骨骼的变换。在第一人称射击游戏中，通常，会制作一个武器轴点并将其附加到适当的手上。
- en: Skeletal Meshes
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 骨骼网格
- en: A Skeletal Mesh is a specific kind of mesh that combines the 3D character model
    and the hierarchy of bones that make up its skeleton. The main difference between
    a Static Mesh and a Skeletal Mesh is that Skeletal Meshes are required for objects
    that use animations, while Static Meshes cannot use animations due to their lack
    of a skeleton. We will look more into our main character Skeletal Mesh in the
    next chapter, but we will be importing our main character Skeletal Mesh in *Activity
    10.03 – Importing more custom animations to preview the character running*, later
    in this chapter.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 骨骼网格是一种特定类型的网格，它结合了3D角色模型和构成其骨骼的骨骼层次结构。静态网格和骨骼网格之间的主要区别在于，骨骼网格是用于需要动画的对象的，而静态网格由于缺乏骨骼，无法使用动画。我们将在下一章更深入地探讨我们的主要角色骨骼网格，但我们将在本章的*活动10.03
    – 导入更多自定义动画以预览角色跑步*中导入我们的主要角色骨骼网格。
- en: Animation sequences
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动画序列
- en: Finally, an animation sequence is an individual animation that can be played
    on a specific Skeletal Mesh; the mesh it applies to is determined by the skeleton
    selected while importing the animation into the engine. We will look at importing
    a character Skeletal Mesh and a single animation asset together in *Activity 10.03
    – Importing more custom animations to preview the character running*.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，一个动画序列是一个可以在特定骨骼网格上播放的单独动画；它应用到的网格是由在将动画导入引擎时选择的骨骼决定的。我们将在*活动10.03 – 导入更多自定义动画以预览角色跑步*中一起查看导入角色骨骼网格和单个动画资产。
- en: Included in our animation sequence is a timeline that allows us to preview the
    animation frame by frame, with additional controls to pause, loop, rewind, and
    so on.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的动画序列中包含一个时间轴，允许我们逐帧预览动画，并提供额外的暂停、循环、倒退等控制功能。
- en: In the next exercise, you will import a custom character and an animation. The
    custom character will include a Skeletal Mesh and a skeleton, and the animation
    will be imported as an animation sequence.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个练习中，您将导入一个自定义角色和一个动画。自定义角色将包括骨骼网格和骨骼，动画将以动画序列的形式导入。
- en: Exercise 10.03 – Importing and setting up the character and animation
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习10.03 – 导入和设置角色和动画
- en: For our final exercise, we will import our custom character and a single animation
    that we will use for the `SuperSideScroller` game’s main character, as well as
    create the necessary Character Blueprint and Animation Blueprint.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的最终练习中，我们将导入我们的自定义角色和单个动画，我们将使用这个动画作为`SuperSideScroller`游戏主要角色的动画，同时创建必要的角色蓝图和动画蓝图。
- en: Note
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Included with this chapter is a set of files in a folder labeled `Assets`,
    and it is these files that we will import into the engine. These assets come from
    Mixamo: [https://www.mixamo.com/](https://www.mixamo.com/). Feel free to create
    an account and view the free 3D character and animation content available there.'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包含一个文件夹，标签为`Assets`，我们将将这些文件导入到引擎中。这些资产来自Mixamo：[https://www.mixamo.com/](https://www.mixamo.com/)。您可以免费创建账户并查看那里提供的免费3D角色和动画内容。
- en: 'The `Assets` content is available in this book’s GitHub repository: [https://github.com/PacktPublishing/Elevating-Game-Experiences-with-Unreal-Engine-5-Second-Edition](https://github.com/PacktPublishing/Elevating-Game-Experiences-with-Unreal-Engine-5-Second-Edition).'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 本书GitHub仓库中提供了`Assets`内容：[https://github.com/PacktPublishing/Elevating-Game-Experiences-with-Unreal-Engine-5-Second-Edition](https://github.com/PacktPublishing/Elevating-Game-Experiences-with-Unreal-Engine-5-Second-Edition)。
- en: 'Follow these steps to complete this exercise:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤完成此练习：
- en: Open Unreal Editor.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Unreal编辑器。
- en: 'In the `MainCharacter`. Within this folder, create two new folders called `Animation`
    and `Mesh`. The **Content Browser** area should now look as follows:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainCharacter`文件夹内。在这个文件夹中，创建两个新的文件夹，分别命名为`Animation`和`Mesh`。**内容浏览器**区域现在应该如下所示：
- en: '![Figure 10.30 – Folders added to the MainCharacter directory in the Content
    Browser area ](img/Figure_10.30_B18531.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![图10.30 – 在内容浏览器区域MainCharacter目录中添加的文件夹](img/Figure_10.30_B18531.jpg)'
- en: Figure 10.30 – Folders added to the MainCharacter directory in the Content Browser
    area
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.30 – 在内容浏览器区域MainCharacter目录中添加的文件夹
- en: Next, let’s import our character mesh. Inside the `Mesh` folder, right-click
    and select the `Assets` folder that accompanies this chapter and find the `MainCharacter.fbx`
    asset inside the `Character Mesh` folder – for example, `\Assets\Character Mesh\MainCharacter.fbx`
    – and open that file.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们导入我们的角色网格。在`Mesh`文件夹内，右键单击并选择与本章配套的`Assets`文件夹，然后在`Character Mesh`文件夹内找到`MainCharacter.fbx`资产
    – 例如，`\Assets\Character Mesh\MainCharacter.fbx` – 并打开该文件。
- en: When selecting this asset, the `Skeletal Mesh` and `Import Mesh` are set to
    `check` in their respective checkboxes and leave every other option set to its
    default setting.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当选择此资产时，`骨骼网格`和`导入网格`在其各自的复选框中设置为`勾选`，并将每个其他选项设置为默认设置。
- en: Lastly, we can select the `Physics Asset`, which will automatically be created
    for us and assigned to `Skeletal Mesh`; and a `Skeleton Asset`.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以选择`物理资产`，它将自动为我们创建并分配给`骨骼网格`；以及一个`骨骼资产`。
- en: Note
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Ignore any warnings that may appear when importing the `FBX` file; they are
    unimportant and will not affect our project moving forward.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 忽略在导入`FBX`文件时可能出现的任何警告；它们不重要，并且不会影响我们项目的后续进展。
- en: 'Now that we have our character, let’s import an animation. Follow these steps:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了角色，让我们导入一个动画。按照以下步骤操作：
- en: Inside our `Animation` folder in the `MainCharacter` folder directory, right-click
    and select **Import**.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainCharacter`文件夹目录下的`Animation`文件夹内，右键单击并选择**导入**。
- en: Navigate to the directory where you saved the `Assets` folder that accompanies
    this chapter and locate the `Idle.fbx` asset inside the `Animations/Idle` folder
    – for example, `\Assets\Animations\Idle\Idle.fbx` – and open that file.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您保存此章节随附的`Assets`文件夹的目录，并在`Animations/Idle`文件夹中找到`Idle.fbx`资产——例如，`\Assets\Animations\Idle\Idle.fbx`——并打开该文件。
- en: 'When selecting this asset, an almost identical window will appear as when we
    imported our character Skeletal Mesh. Since this asset is only an animation and
    not a Skeletal Mesh/skeleton, we don’t have the same options as before, but there
    is one crucial parameter that we need to set correctly: `Skeleton`.'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 当选择此资产时，将出现一个几乎与导入我们的角色骨骼网格时相同的窗口。由于此资产仅是动画而不是骨骼网格/骨骼，我们之前没有相同的选项，但有一个至关重要的参数需要正确设置：`骨骼`。
- en: The `Skeleton` parameter under the **Mesh** category of our **FBX** import options
    tells the animation to which skeleton the animation applies. Without this parameter
    set, we cannot import our animation, and applying the animation to the wrong skeleton
    can have disastrous results or cause the animation to not import altogether. Luckily
    for us, our project is simple, and we have already imported our character’s Skeletal
    Mesh and skeleton.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的**FBX**导入选项的**网格**类别下的`骨骼`参数告诉动画应用到哪个骨骼上。如果没有设置此参数，我们无法导入我们的动画，并且将动画应用到错误的骨骼上可能会产生灾难性的后果或导致动画根本无法导入。幸运的是，我们的项目很简单，我们已经导入了角色的骨骼网格和骨骼。
- en: 'Select `MainCharacter_Skeleton` and choose **Import All** at the bottom; leave
    all the other parameters set to their defaults:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`MainCharacter_Skeleton`并在底部选择**导入所有**；将所有其他参数设置为默认值：
- en: '![Figure 10.31 – The settings when importing the Idle.fbx animation ](img/Figure_10.31_B18531.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![图10.31 – 导入Idle.fbx动画时的设置](img/Figure_10.31_B18531.jpg)'
- en: Figure 10.31 – The settings when importing the Idle.fbx animation
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.31 – 导入Idle.fbx动画时的设置
- en: Understanding the importing process for both skeletal meshes and animations
    is crucial, and in the next activity, you will import the remaining animations.
    Let’s continue this exercise by creating both the Character Blueprint and the
    Animation Blueprint for the `SuperSideScroller` game’s main character.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 理解骨骼网格和动画的导入过程至关重要，在下一个活动中，你将导入剩余的动画。让我们继续这个练习，为`SuperSideScroller`游戏的主要角色创建角色蓝图和动画蓝图。
- en: Now, although the **Side Scroller** template project does include a Blueprint
    for our character and other assets such as an Animation Blueprint, we will want
    to create our own versions of these assets for the sake of organization and good
    practice as game developers.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，尽管**侧滚动**模板项目确实包括我们的角色和其他资产，如动画蓝图，但为了组织良好和作为游戏开发者的良好实践，我们仍希望创建这些资产的自己的版本。
- en: 'Create a new folder under our `MainCharacter` directory in the `Blueprints`.
    In this directory, create a new Blueprint based on the `SideScrollerCharacter`
    class under `All Classes`. Name this new Blueprint `BP_SuperSideScroller_MainCharacter`:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainCharacter`目录下创建一个新的文件夹，然后在`Blueprints`目录中创建一个新的蓝图，基于`All Classes`下的`SideScrollerCharacter`类。将这个新蓝图命名为`BP_SuperSideScroller_MainCharacter`：
- en: '![Figure 10.32 – The SideScrollerCharacter class to be used as the parent class
    for our character Blueprint ](img/Figure_10.32_B18531.jpg)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![图10.32 – 将用作角色蓝图父类的SideScrollerCharacter类](img/Figure_10.32_B18531.jpg)'
- en: Figure 10.32 – The SideScrollerCharacter class to be used as the parent class
    for our character Blueprint
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.32 – 用作角色蓝图父类的SideScrollerCharacter类
- en: 'In our `Blueprints` directory, right-click in an empty area of the **Content
    Browser** area, hover over the **Animation** option, and select **Animation Blueprint**:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`Blueprints`目录中，在**内容浏览器**区域的空白区域右键点击，将鼠标悬停在**动画**选项上，并选择**动画蓝图**：
- en: '![Figure 10.33 – The Animation Blueprint option under the Animation category
    ](img/Figure_10.33_B18531.jpg)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![图10.33 – 动画类别下的动画蓝图选项](img/Figure_10.33_B18531.jpg)'
- en: Figure 10.33 – The Animation Blueprint option under the Animation category
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.33 – 动画类别下的动画蓝图选项
- en: 'After we select this option, a new window will appear. This new window requires
    us to apply a parent class and a skeleton to our Animation Blueprint. In our case,
    use `MainCharacter_Skeleton`, select `AnimBP_SuperSideScroller_MainCharacter`:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择此选项后，将弹出一个新窗口。这个新窗口要求我们为我们的动画蓝图应用一个父类和一个骨架。在我们的例子中，使用`MainCharacter_Skeleton`，选择`AnimBP_SuperSideScroller_MainCharacter`：
- en: '![Figure 10.34 – The settings we need when creating our Animation Blueprint
    ](img/Figure_10.34_B18531.jpg)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![图10.34 – 创建我们的动画蓝图时所需的设置](img/Figure_10.34_B18531.jpg)'
- en: Figure 10.34 – The settings we need when creating our Animation Blueprint
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.34 – 创建我们的动画蓝图时所需的设置
- en: 'When we open our Character Blueprint, `BP_SuperSideScroller_MainCharacter`,
    and select the **Mesh** component, we will find a handful of parameters that we
    can change:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们打开我们的角色蓝图，`BP_SuperSideScroller_MainCharacter`，并选择**网格**组件时，我们会发现一些可以更改的参数：
- en: '![Figure 10.35 – The SuperSideScroller Character Blueprint using the mannequin
    Skeletal Mesh ](img/Figure_10.35_B18531.jpg)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![图10.35 – 使用人体骨骼网格的SuperSideScroller角色蓝图](img/Figure_10.35_B18531.jpg)'
- en: Figure 10.35 – The SuperSideScroller Character Blueprint using the mannequin
    Skeletal Mesh
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.35 – 使用人体骨骼网格的SuperSideScroller角色蓝图
- en: 'Under the `MainCharacter` Skeletal Mesh and assign it to this parameter:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainCharacter`骨骼网格下，将其分配给此参数：
- en: '![Figure 10.36 – The settings we need for our Mesh component ](img/Figure_10.36_B18531.jpg)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![图10.36 – 我们网格组件所需的设置](img/Figure_10.36_B18531.jpg)'
- en: Figure 10.36 – The settings we need for our Mesh component
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.36 – 我们网格组件所需的设置
- en: While still in our Character Blueprint and with the **Mesh** component selected,
    we can find the **Animation** category just above the **Mesh** category. Luckily,
    by default, the **Animation Mode** parameter is already set to **Use Animation
    Blueprint**, which is the setting we need.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的角色蓝图内，并且选择了**网格**组件的情况下，我们可以在**网格**类别上方找到**动画**类别。幸运的是，默认情况下，**动画模式**参数已经设置为**使用动画蓝图**，这正是我们需要设置的。
- en: Now, assign the `Anim` class parameter to our new Animation Blueprint, `AnimBP_SuperSideScroller_MainCharacter`.
    Finally, head back to our default `SideScrollerExampleMap` level and replace the
    default character with our new Character Blueprint.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将`Anim`类参数分配给我们的新动画蓝图，`AnimBP_SuperSideScroller_MainCharacter`。最后，返回到我们的默认`SideScrollerExampleMap`关卡，并用我们的新角色蓝图替换默认角色。
- en: 'Next, make sure that we have `BP_SuperSideScroller_MainCharacter` selected
    in the **Content Browser** area, right-click on the default character in our map,
    and choose to replace it with our new character:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，确保我们在**内容浏览器**区域选择了`BP_SuperSideScroller_MainCharacter`，在我们的地图中右键点击默认角色，并选择用我们的新角色替换它：
- en: 'With our new character in the level, we can play in the editor and move around
    the level. The result should look something like what’s shown in the following
    screenshot; our character is in the default T-pose and moving around the level
    environment:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在关卡中有了我们的新角色后，我们可以在编辑器中玩耍并在关卡中移动。结果应该看起来像以下截图所示；我们的角色处于默认的T姿势并在关卡环境中移动：
- en: '![Figure 10.37 – You now have the custom character running around the level
    ](img/Figure_10.37_B18531.jpg)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
  zh: '![图10.37 – 你现在可以看到自定义角色在关卡中跑动](img/Figure_10.37_B18531.jpg)'
- en: Figure 10.37 – You now have the custom character running around the level
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.37 – 你现在可以看到自定义角色在关卡中跑动
- en: With our final exercise complete, you have a full understanding of how to import
    custom Skeletal Meshes and animations. Additionally, you learned how to create
    a Character Blueprint and an Animation Blueprint from scratch and how to use those
    assets to create the base for the `SuperSideScroller` character.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成最后的练习后，你对如何导入自定义骨骼网格和动画有了全面的理解。此外，你还学习了如何从头创建角色蓝图和动画蓝图，以及如何使用这些资产为`SuperSideScroller`角色创建基础。
- en: Let’s move on to the final activity of this chapter, where you will be challenged
    to import the remaining animations for the character and preview the running animation
    inside Persona Editor.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续本章的最后一个活动，在那里你将面临导入剩余动画的挑战，并在角色编辑器中预览跑步动画。
- en: Activity 10.03 – Importing more custom animations to preview the character running
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动十.03 – 导入更多自定义动画以预览角色跑步
- en: This activity aims to import the remaining animations, such as running for the
    player character, and preview the running animation on the character skeleton
    to ensure that it looks correct.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 这个活动旨在导入剩余的动画，例如玩家角色的跑步动画，并在角色骨骼上预览跑步动画以确保其正确性。
- en: By the end of the activity, all of the player character animations will be imported
    into the project and you will be ready to use these animations to bring the player
    character to life in the next chapter.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 到活动结束时，所有玩家角色的动画都将导入到项目中，你将准备好在下一章中使用这些动画使玩家角色栩栩如生。
- en: 'Follow these steps to complete this activity:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤完成此活动：
- en: As a reminder, all of the animation assets we need to import exist in the `\Assets\Animations`
    directory, wherever you may have saved the original .`zip` folder. Import all
    of the remaining animations in the `MainCharacter/Animation` folder. Importing
    the remaining animation assets will work the same way as in *Exercise 10.03 –
    Importing and setting up the character and animation*, when you imported the `Idle`
    animation.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为提醒，我们需要导入的所有动画资源都存在于`\Assets\Animations`目录中，无论你在哪里保存了原始的.`zip`文件夹。导入`MainCharacter/Animation`文件夹中的所有剩余动画。导入剩余的动画资源的方式将与*练习10.03
    – 导入和设置角色和动画*中的方式相同，当时你导入了`Idle`动画。
- en: Navigate to the `MainCharacter` skeleton and apply the `Running` animation you
    imported in the previous step.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`MainCharacter`骨骼，并应用你在上一步导入的`Running`动画。
- en: Finally, with the `Running` animation applied, preview the character animation
    in the **Persona Editor** area.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，应用了`Running`动画后，在**角色编辑器**区域预览角色动画。
- en: 'Here is the expected output:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 这是预期的输出：
- en: '![Figure 10.38 – The expected output of the character with additional custom
    imported assets ](img/Figure_10.38_B18531.jpg)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![图10.38 – 带有额外自定义导入资源的角色预期输出](img/Figure_10.38_B18531.jpg)'
- en: Figure 10.38 – The expected output of the character with additional custom imported
    assets
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.38 – 带有额外自定义导入资源的角色预期输出
- en: Note
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The solution to this activity can be found on GitHub here: [https://github.com/PacktPublishing/Elevating-Game-Experiences-with-Unreal-Engine-5-Second-Edition/tree/main/Activity%20solutions](https://github.com/PacktPublishing/Elevating-Game-Experiences-with-Unreal-Engine-5-Second-Edition/tree/main/Activity%20solutions).'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 该活动的解决方案可以在GitHub上找到：[https://github.com/PacktPublishing/Elevating-Game-Experiences-with-Unreal-Engine-5-Second-Edition/tree/main/Activity%20solutions](https://github.com/PacktPublishing/Elevating-Game-Experiences-with-Unreal-Engine-5-Second-Edition/tree/main/Activity%20solutions)。
- en: With this final activity completed, you have now experienced first-hand the
    process of importing custom skeletal and animation assets into UE5\. This import
    process, regardless of the type of asset you are importing, is commonplace in
    the games industry, and you must be comfortable with it.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这个最终活动后，你现在已经亲身体验了将自定义骨骼和动画资源导入UE5的过程。无论你导入的是哪种类型的资源，这种导入过程在游戏行业中都很常见，你必须对此感到舒适。
- en: Summary
  id: totrans-277
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: With the player character skeleton, Skeletal Mesh, and animations imported into
    the engine, we can move on to the next chapter, where we will prepare the character
    movement and Update Animation Blueprint so that the character can animate while
    moving around the level.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 将玩家角色骨骼、骨骼网格和动画导入到引擎后，我们可以进入下一章，在那里我们将准备角色移动和更新动画蓝图，以便角色在关卡内移动时可以动画化。
- en: From the exercises and activities of this chapter, you learned about how the
    skeleton and bones are used to animate and manipulate the character. With first-hand
    experience in importing and applying animations in UE5, you now have a strong
    understanding of the animation pipeline, from the character concept to the final
    assets being imported for your project.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章的练习和活动，你了解了骨骼和骨骼是如何用于动画化和操作角色的。通过在UE5中导入和应用动画的亲身体验，你现在对动画流程有了深入的理解，从角色概念到为你的项目导入的最终资源。
- en: We also took the necessary steps to outline what we want to accomplish with
    our `SuperSideScroller` game; that is, establishing how we want enemies to work,
    which power-ups to develop, how collectibles will work, and how the player HUD
    will look. Lastly, we explored how the character movement component works and
    how to manipulate its parameters to establish the character movement we desire
    for our game.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还采取了必要的步骤来概述我们想要在`SuperSideScroller`游戏中实现的目标；也就是说，确定我们希望敌人如何运作，开发哪些升级道具，收集品将如何工作，以及玩家HUD将呈现何种外观。最后，我们探讨了角色移动组件的工作原理以及如何操纵其参数以建立我们为游戏所期望的角色移动方式。
- en: Additionally, you learned about what we will use in the next chapter, such as
    blend spaces for character movement animation blending. With the `SuperSideScroller`
    project template created and the player character ready, in the next chapter,
    we’ll animate the character with an Animation Blueprint.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你还了解了我们将在下一章中使用的工具，例如用于角色移动动画混合的混合空间。在创建好`SuperSideScroller`项目模板并准备好玩家角色后，在下一章中，我们将使用动画蓝图来为角色进行动画制作。
