["```cpp\n#include <iostream>\n#include <chrono>\n#include <thread>\n#include <functional>\n```", "```cpp\nvoid runner(std::chrono::milliseconds limit,\n            std::function<void(int)> fn,\n            int value) {\n  auto start = std::chrono::system_clock::now();\n  fn(value);\n  auto end = std::chrono::system_clock::now();\n  std::chrono::milliseconds delta =\n      std::chrono::duration_cast<std::chrono::milliseconds>(end - start);\n  if (delta > limit) {\n    throw std::runtime_error(\"Time limit exceeded\");\n  }\n  }\n```", "```cpp\nvoid delay_ms(int count) {\n  for (int i = 0; i < count; i++) {\n    std::this_thread::sleep_for(std::chrono::microseconds(1050));\n  }\n  }\n```", "```cpp\nint main() {\n  int max_delay = 10;\n  for (int i = 0; i < max_delay; i++) {\n    runner(std::chrono::milliseconds(max_delay), delay_ms, i);\n  }\n  return 0;\n  }\n```", "```cpp\ncmake_minimum_required(VERSION 3.5.1)\nproject(loop)\nadd_executable(loop loop.cpp)\n\nset(CMAKE_SYSTEM_NAME Linux)\nset(CMAKE_SYSTEM_PROCESSOR arm)\n\nSET(CMAKE_CXX_FLAGS \"-g --std=c++11\")\n\nset(CMAKE_C_COMPILER /usr/bin/arm-linux-gnueabi-gcc)\nset(CMAKE_CXX_COMPILER /usr/bin/arm-linux-gnueabi-g++)\n\nset(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\nset(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\nset(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nset(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n```", "```cpp\n$ cd /mnt/loop\n```", "```cpp\n$ cmake . && make\n```", "```cpp\n$ gdb ./loop\n```", "```cpp\n(gdb) run\n```", "```cpp\n(gdb) bt\n```", "```cpp\n(gdb) frame 6\n```", "```cpp\n(gdb) list\n```", "```cpp\n(gdb) info locals\n```", "```cpp\n(gdb) info args\n```", "```cpp\nSET(CMAKE_CXX_FLAGS \"-g --std=c++11\")\n```", "```cpp\n(gdb) list runner,delay_ms\n```", "```cpp\n14 if (delta > limit) {\n```", "```cpp\n(gdb) break 14\n```", "```cpp\n(gdb) run\n```", "```cpp\n(gdb) print delta \n$1 = {__r = 0}\n```", "```cpp\n(gdb) c\n```", "```cpp\n(gdb) print delta\n```", "```cpp\n(gdb) command\n```", "```cpp\n(gdb) c\n```", "```cpp\n(gdb) command\nType commands for breakpoint(s) 1, one per line.\nEnd with a line saying just \"end\".\n>silent\n>print delta\n>end\n(gdb) c\n```", "```cpp\n(gdb) command\nType commands for breakpoint(s) 1, one per line.\nEnd with a line saying just \"end\".\n>silent\n>printf \"delta=%d, expected=%d\\n\", delta.__r, value\n>end\n(gdb) c\n```", "```cpp\n$ ulimit -c\n```", "```cpp\n$ su -\nPassword:\n```", "```cpp\n# ulimit -c unlimited\n```", "```cpp\n$ ulimit -c unlimited\n```", "```cpp\n$ ulimit -c\nunlimited\n```", "```cpp\n$ ./loop \n```", "```cpp\n$ ls -l core\n-rw------- 1 dev dev 536576 May 31 00:54 core\n```", "```cpp\n$ gdb ./loop core\n```", "```cpp\n(gdb) bt\n```", "```cpp\n$ gdbserver 0.0.0.0:9090 ./hello\n```", "```cpp\n# cd /mnt\n```", "```cpp\n# gdb -q hello\n```", "```cpp\ntarget remote X.X.X.X:9090\n```", "```cpp\n continue\n```", "```cpp\n#include <iostream>\n#include <chrono>\n#include <thread>\n#include <functional>\n\n#include <syslog.h>\n```", "```cpp\nvoid runner(std::chrono::milliseconds limit,\n            std::function<void(int)> fn,\n            int value) {\n  auto start = std::chrono::system_clock::now();\n  fn(value);\n  auto end = std::chrono::system_clock::now();\n  std::chrono::milliseconds delta =\n      std::chrono::duration_cast<std::chrono::milliseconds>(end - start);\n syslog(LOG_DEBUG, \"Delta is %ld\",\n         static_cast<long int>(delta.count()));\n  if (delta > limit) {\n syslog(LOG_ERR, \n \"Execution time %ld ms exceeded %ld ms limit\",\n static_cast<long int>(delta.count()),\n static_cast<long int>(limit.count()));\n    throw std::runtime_error(\"Time limit exceeded\");\n  }\n}\n```", "```cpp\nint main() {\n openlog(\"loop3\", LOG_PERROR, LOG_USER);\n  int max_delay = 10;\n  for (int i = 0; i < max_delay; i++) {\n    runner(std::chrono::milliseconds(max_delay), delay_ms, i);\n  }\n closelog();\n  return 0;\n}\n```", "```cpp\n# cmake && make\n```", "```cpp\n$ ./loop \n```", "```cpp\n openlog(\"loop3\", LOG_PERROR, LOG_USER);\n```", "```cpp\n syslog(LOG_DEBUG, \"Delta is %d\", delta);\n```", "```cpp\n syslog(LOG_ERR, \n \"Execution time %ld ms exceeded %ld ms limit\",\n static_cast<long int>(delta.count()),\n static_cast<long int>(limit.count()));\n```", "```cpp\n closelog();\n```", "```cpp\nSET(CMAKE_CXX_FLAGS \"-g --std=c++11\")\n```", "```cpp\nSET(CMAKE_CXX_FLAGS_RELEASE \"--std=c++11\")\nSET(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_RELEASE} -g -DDEBUG\")\n```", "```cpp\n#include <iostream>\n#include <chrono>\n#include <thread>\n#include <functional>\n#include <cstdarg>\n\n#ifdef DEBUG\n#define LOG_DEBUG(fmt, args...) fprintf(stderr, fmt, args)\n#else\n#define LOG_DEBUG(fmt, args...)\n#endif\n\nvoid runner(std::chrono::milliseconds limit,\n            std::function<void(int)> fn,\n            int value) {\n  auto start = std::chrono::system_clock::now();\n  fn(value);\n  auto end = std::chrono::system_clock::now();\n  std::chrono::milliseconds delta =\n      std::chrono::duration_cast<std::chrono::milliseconds>(end - start);\n LOG_DEBUG(\"Delay: %ld ms, max: %ld ms\\n\",\n            static_cast<long int>(delta.count()),\n            static_cast<long int>(limit.count()));\n  if (delta > limit) {\n    throw std::runtime_error(\"Time limit exceeded\");\n  }\n}\n```", "```cpp\n# cmake -DCMAKE_BUILD_TYPE=Release . && make\n```", "```cpp\n$ ./loop \n```", "```cpp\n$ ls -l loop\n-rwxr-xr-x 1 dev dev 24880 Jun 1 00:50 loop\n```", "```cpp\n$ cmake -DCMAKE_BUILD_TYPE=Debug && make clean && make\n```", "```cpp\n$ ls -l ./loop\n-rwxr-xr-x 1 dev dev 80008 Jun 1 00:51 ./loop\n```", "```cpp\n$ ./loop \n```", "```cpp\nSET(CMAKE_CXX_FLAGS_RELEASE \"--std=c++11\")\n```", "```cpp\ncmake -DCMAKE_BUILD_TYPE=Debug\n```", "```cpp\ncmake -DCMAKE_BUILD_TYPE=Release && make\n```", "```cpp\ncmake -DCMAKE_BUILD_TYPE=Debug && make clean && make\n```"]