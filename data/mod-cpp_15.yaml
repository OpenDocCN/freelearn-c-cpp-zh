- en: Streams and Filesystems
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 流和文件系统
- en: Problems
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Here are the problem-solving sections for this chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本章的问题解决部分。
- en: 32\. Pascal's triangle
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 32\. 帕斯卡三角形
- en: Write a function that prints up to 10 rows of Pascal's triangle to the console.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个函数，将帕斯卡三角形的最多10行打印到控制台。
- en: 33\. Tabular printing of a list of processes
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 33\. 列出进程列表
- en: 'Suppose you have a snapshot of the list of all processes in a system. The information
    for each process includes name, identifier, status (which can be either *running*
    or *suspended*), account name (under which the process runs), memory size in bytes,
    and platform (which can be either 32-bit or 64-bit). Your task is to write a function
    that takes such a list of processes and prints them to the console alphabetically,
    in tabular format. All columns must be left-aligned, except for the memory column
    which must be right-aligned. The value of the memory size must be displayed in
    KB. The following is an example of the output of this function:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您有系统中所有进程列表的快照。每个进程的信息包括名称、标识符、状态（可以是*运行*或*挂起*）、帐户名称（进程运行的帐户）、以字节为单位的内存大小和平台（可以是32位或64位）。您的任务是编写一个函数，该函数接受这样一个进程列表，并以表格格式按字母顺序将它们打印到控制台。所有列必须左对齐，除了内存列必须右对齐。内存大小的值必须以KB显示。以下是此函数的输出示例：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 34\. Removing empty lines from a text file
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 34\. 从文本文件中删除空行
- en: Write a program that, given the path to a text file, modifies the file by removing
    all empty lines. Lines containing only whitespaces are considered empty.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个程序，给定文本文件的路径，通过删除所有空行来修改文件。只包含空格的行被视为空行。
- en: 35\. Computing the size of a directory
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 35\. 计算目录的大小
- en: Write a function that computes the size of a directory, in bytes, recursively.
    It should be possible to indicate whether symbolic links should be followed or
    not.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个函数，递归计算目录的大小（以字节为单位）。应该可以指示是否应该跟随符号链接。
- en: 36\. Deleting files older than a given date
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 36\. 删除早于给定日期的文件
- en: Write a function that, given the path to a directory and a duration, deletes
    all the entries (files or subdirectories) older than the specified duration, in
    a recursive manner. The duration can represent anything, such as days, hours,
    minutes, seconds, and so on, or a combination of that, such as one hour and twenty
    minutes. If the specified directory is itself older than the given duration, it
    should be deleted entirely.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个函数，给定目录的路径和持续时间，以递归方式删除所有早于指定持续时间的条目（文件或子目录）。持续时间可以表示任何内容，例如天、小时、分钟、秒等，或这些的组合，例如一小时二十分钟。如果指定的目录本身早于给定的持续时间，则应完全删除它。
- en: 37\. Finding files in a directory that match a regular expression
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 37\. 查找与正则表达式匹配的目录中的文件
- en: Write a function that, given the path to a directory and a regular expression,
    returns a list of all the directory entries whose names match the regular expression.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个函数，给定目录的路径和正则表达式，返回所有目录条目的列表，其名称与正则表达式匹配。
- en: 38\. Temporary log files
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 38\. 临时日志文件
- en: Create a logging class that writes text messages to a discardable text file.
    The text file should have a unique name and must be located in a temporary directory.
    Unless specified otherwise, this log file should be deleted when the instance
    of the class is destroyed. However, it should be possible to retain the log file
    by moving it to a permanent location.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个日志类，将文本消息写入可丢弃的文本文件。文本文件应具有唯一名称，并且必须位于临时目录中。除非另有说明，否则当类的实例被销毁时，应删除此日志文件。但是，可以通过将其移动到永久位置来保留日志文件。
- en: Solutions
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案
- en: Here are the solutions for the above problem-solving sections.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是上述问题解决部分的解决方案。
- en: 32\. Pascal's triangle
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 32\. 帕斯卡三角形
- en: 'Pascal''s triangle is a construction representing binomial coefficients. The
    triangle starts with a row that has a single value of 1\. Elements of each row
    are constructed by summing the numbers above, to the left and right, and treating
    blank entries as 0\. Here is an example of the triangle with five rows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 帕斯卡三角形是表示二项式系数的构造。三角形以一个具有单个值1的行开始。每行的元素是通过将上面、左边和右边的数字相加，并将空白条目视为0来构造的。以下是一个具有五行的三角形的示例：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To print the triangle, we must:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要打印三角形，我们必须：
- en: Shift the output position to the right with an appropriate number of spaces,
    so that the top is projected on the middle of the triangle's base.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将输出位置向右移动适当数量的空格，以便顶部投影在三角形底部的中间。
- en: Compute each value by summing the above left and right values. A simpler formula
    is that for a row `i` and column `j`, each new value `x` is equal to the previous
    value of `x` multiplied by `(i - j) / (j + 1)`, where `x` starts at 1.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过对上述左值和右值求和来计算每个值。一个更简单的公式是，对于第`i`行和第`j`列，每个新值`x`等于前一个值`x`乘以`(i - j) / (j +
    1)`，其中`x`从1开始。
- en: 'The following is a possible implementation of a function that prints the triangle:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个可能的打印三角形的函数实现：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following program asks the user to enter the number of levels and prints
    the triangle to the console:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下程序要求用户输入级别的数量，并将三角形打印到控制台：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 33\. Tabular printing of a list of processes
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 33\. 列出进程列表
- en: 'To solve this problem, we will consider the following class representing information
    about a process:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们将考虑以下表示有关进程信息的类：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In order to print the status and platform as text and not as numerical values,
    we need conversion functions from the enumerations to `std::string`:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将状态和平台以文本形式而不是数值形式打印出来，我们需要从枚举到`std::string`的转换函数：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The processes are required to be sorted alphabetically by process name. Therefore,
    the first step would be to sort the input range of processes. For the printing
    itself, we should use the I/O manipulators:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 需要按进程名称按字母顺序排序进程。因此，第一步是对进程的输入范围进行排序。对于打印本身，我们应该使用I/O操纵符：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The following program defines a list of processes (you can actually retrieve
    the list of running processes using operating system-specific APIs) and prints
    it to the console in the requested format:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下程序定义了一个进程列表（实际上可以使用特定于操作系统的API检索运行中的进程列表），并以请求的格式打印到控制台：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 34\. Removing empty lines from a text file
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 34. 从文本文件中删除空行
- en: 'A possible approach to solving this task is to do the following:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 解决此任务的一种可能方法是执行以下操作：
- en: Create a temporary file to contain only the text you want to retain from the
    original file
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个临时文件，其中只包含要保留的原始文件的文本
- en: Read line by line from the input file and copy to the temporary file all lines
    that are not empty
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从输入文件逐行读取并将不为空的行复制到临时文件中
- en: Delete the original file after finishing processing it
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在处理完原始文件后删除它
- en: Move the temporary file to the path of the original file
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将临时文件移动到原始文件的路径
- en: 'An alternative is to move the temporary file and overwrite the original one.
    The following implementation follows the steps listed. The temporary file is created
    in the temporary directory returned by `filesystem::temp_directory_path()`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是移动临时文件并覆盖原始文件。以下实现遵循列出的步骤。临时文件是在`filesystem::temp_directory_path()`返回的临时目录中创建的：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 35\. Computing the size of a directory
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 35. 计算目录的大小
- en: To compute the size of a directory, we have to iterate through all the files
    and sum the size of individual files.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要计算目录的大小，我们必须遍历所有文件并计算各个文件的大小之和。
- en: '`filesystem::recursive_directory_iterator` is an iterator from the `filesystem`
    library that allows iterating all the entries of a directory in a recursive manner.
    It has various constructors, some of them taking a value of the type `filesystem::directory_options` that
    indicates whether symbolic links should be followed or not. The general purpose
    `std::accumulate()` algorithm can be used to sum together the file sizes. Since
    the total size of a directory could exceed 2 GB, you should not use `int` or `long`,
    but `unsigned long long` for the sum type. The following function shows a possible
    implementation for the required task:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`filesystem::recursive_directory_iterator`是`filesystem`库中的一个迭代器，允许以递归方式遍历目录的所有条目。它有各种构造函数，其中一些采用`filesystem::directory_options`类型的值，指示是否应该跟随符号链接。通用的`std::accumulate()`算法可以用于将文件大小总和在一起。由于目录的总大小可能超过2GB，因此不应使用`int`或`long`，而应使用`unsigned
    long long`作为总和类型。以下函数显示了所需任务的可能实现：'
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 36\. Deleting files older than a given date
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 36. 删除早于指定日期的文件
- en: 'To perform filesystem operations, you should be using the `filesystem` library.
    For working with time and duration, you should be using the `chrono` library.
    A function that implements the requested functionality has to do the following:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行文件系统操作，应该使用`filesystem`库。对于处理时间和持续时间，应该使用`chrono`库。实现请求功能的函数必须执行以下操作：
- en: Check whether the entry indicated by the target path exists and is older than
    the given duration, and if so, delete it
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查目标路径指示的条目是否存在且是否比给定持续时间旧，如果是，则删除它
- en: 'If it is not older and it''s a directory, iterate through all its entries and
    call the function recursively:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果不是旧的，并且它是一个目录，则遍历其所有条目并递归调用该函数：
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: An alternative to using `directory_iterator` and recursively calling `remove_files_older_than()`
    would be to use `recursive_directory_iterator` and simply delete the entry if
    older than the given duration. However, this approach would employ undefined behavior,
    because if a file or a directory is deleted or added to the directory tree after
    the recursive directory iterator has been created, it is not specified whether
    the change would be observed through the iterator. Therefore, this method should
    be avoided.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用`directory_iterator`和递归调用`remove_files_older_than()`之外，另一种方法是使用`recursive_directory_iterator`，并且如果超过给定持续时间，则简单地删除条目。然而，这种方法会使用未定义的行为，因为如果在创建递归目录迭代器后删除或添加文件或目录到目录树中，则不指定是否通过迭代器观察到更改。因此，应避免使用此方法。
- en: The `is_older_than()` function template determines the time that has passed
    since the system's clock epoch for the current moment and the last file writing
    operation and checks whether the difference of the two is greater than the specified
    duration.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`is_older_than()`函数模板确定了自系统时钟纪元以来当前时刻和最后一次文件写入操作之间经过的时间，并检查两者之间的差异是否大于指定的持续时间。'
- en: 'The `remove_files_older_than()` function can be used as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`remove_files_older_than()`函数可以如下使用：'
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 37\. Finding files in a directory that match a regular expression
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 37. 在目录中查找与正则表达式匹配的文件
- en: 'Implementing the specified functionality should be straightforward: iterate
    recursively through all the entries of the specified directory and retain all
    the entries that are regular files and whose name matches the regular expression.
    To do that, you should use the following:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 实现指定的功能应该很简单：递归遍历指定目录的所有条目，并保留所有正则文件名匹配的条目。为此，您应该使用以下方法：
- en: '`filesystem::recursive_directory_iterator` to iterate through directory entries'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filesystem::recursive_directory_iterator`用于遍历目录条目'
- en: '`regex` and `regex_match()` to check whether the filename matches the regular
    expression'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`regex`和`regex_match()`来检查文件名是否与正则表达式匹配'
- en: '`copy_if()` and `back_inserter` to copy, at the end of a `vector`, the directory
    entries that match a specific criteria.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`copy_if()`和`back_inserter`来复制符合特定条件的目录条目到`vector`的末尾。'
- en: 'Such a function may look like this:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的函数可能如下所示：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'With this available, we can write the following code:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们可以编写以下代码：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 38\. Temporary log files
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 38. 临时日志文件
- en: 'The logging class that you have to implement for this task should:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须为此任务实现的日志类应该：
- en: Have a constructor that creates a text file in a temporary directory and opens
    it for writing
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一个构造函数，在临时目录中创建一个文本文件并打开它进行写入
- en: During destruction, if the file still exists, close and delete it
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在销毁期间，如果文件仍然存在，则关闭并删除它
- en: Have a method that closes the file and moves it to a permanent path
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一个关闭文件并将其移动到永久路径的方法
- en: Overloads `operator<<` to write a text message to the output file
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重载`operator<<`以将文本消息写入输出文件
- en: 'In order to create unique names for the file, you could use a UUID (also known
    as GUID). The C++ standard does not support any functionality related to that,
    but there are third-party libraries, such as `boost::uuid`, *CrossGuid*, or `stduuid`,
    which is actually a library that I created. For this implementation, I will use
    the last one. You can find it at [https://github.com/mariusbancila/stduuid](https://github.com/mariusbancila/stduuid):'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为文件创建唯一的名称，可以使用 UUID（也称为 GUID）。C++标准不支持与此相关的任何功能，但有第三方库，如`boost::uuid`、*CrossGuid*或`stduuid`，实际上是我创建的一个库。对于这个实现，我将使用最后一个。你可以在[https://github.com/mariusbancila/stduuid](https://github.com/mariusbancila/stduuid)找到它。
- en: '[PRE14]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'An example of using this class is as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个类的一个例子如下：
- en: '[PRE15]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
