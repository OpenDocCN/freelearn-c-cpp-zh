["```cpp\n#include <sched.h>\n#include <iostream>\n#include <string.h>\n#include <sys/types.h>\n#include <unistd.h>\n\nint main ()\n{\n    int policy = sched_getscheduler(getpid());\n    switch(policy) \n    {\n        case SCHED_OTHER: std::cout << \"process' policy = \n            SCHED_OTHER\" \n                                    << std::endl ; break;\n        case SCHED_RR: std::cout << \"process' policy = SCHED_RR\" \n                                 << std::endl; break;\n        case SCHED_FIFO: std::cout << \"process' policy = SCHED_FIFO\" \n                                   << std::endl; break;\n        default: std::cout << \"Unknown policy\" << std::endl;\n    }\n```", "```cpp\n    int fifoMin = sched_get_priority_min(SCHED_FIFO);\n    int fifoMax = sched_get_priority_max(SCHED_FIFO);\n    std::cout << \"MIN Priority for SCHED_FIFO = \" << fifoMin\n        << std::endl;\n    std::cout << \"MAX Priority for SCHED_FIFO = \" << fifoMax\n        << std::endl;\n\n    struct sched_param sched;\n    sched.sched_priority = (fifoMax - fifoMin) / 2;\n    if (sched_setscheduler(getpid(), SCHED_FIFO, &sched) < 0)\n        std::cout << \"sched_setscheduler failed = \" \n                  << strerror(errno) << std::endl;\n    else\n        std::cout << \"sched_setscheduler has set priority to = \"\n                  << sched.sched_priority << std::endl;\n```", "```cpp\n    policy = sched_getscheduler(getpid());\n    std::cout << \"current process' policy = \" << policy << std\n        ::endl ;\n    return 0;\n} \n```", "```cpp\nstatic const struct sched_class fair_sched_class = {\n .next = &idle_sched_class,\n .enqueue_task = enqueue_task_fair,\n .dequeue_task = dequeue_task_fair,\n .yield_task = yield_task_fair,\n .check_preempt_curr = check_preempt_wakeup,\n .pick_next_task = pick_next_task_fair,\n .put_prev_task = put_prev_task_fair,\n\n#ifdef CONFIG_SMP\n .select_task_rq = select_task_rq_fair,\n .load_balance = load_balance_fair,\n .move_one_task = move_one_task_fair,\n .rq_online = rq_online_fair,\n .rq_offline = rq_offline_fair,\n .task_waking = task_waking_fair,\n#endif\n .set_curr_task = set_curr_task_fair,\n .task_tick = task_tick_fair,\n .task_fork = task_fork_fair,\n .prio_changed = prio_changed_fair,\n .switched_to = switched_to_fair,\n .get_rr_interval = get_rr_interval_fair,\n\n#ifdef CONFIG_FAIR_GROUP_SCHED\n .task_move_group = task_move_group_fair,\n#endif\n};\n```", "```cpp\n#include <sched.h>\n#include <iostream>\n#include <string.h>\n\nint main ()\n{\n    std::cout << \"Starting ...\" << std::endl;\n```", "```cpp\n    struct sched_param sched;\n    sched.sched_priority = 8;\n    if (sched_setscheduler(0, SCHED_RR, &sched) == -1)\n        std::cout << \"sched_setscheduler failed = \"\n            << strerror(errno) \n                  << std::endl;\n    else\n        std::cout << \"sched_setscheduler, priority set to = \" \n                  << sched.sched_priority << std::endl;\n```", "```cpp\n    struct timespec tp;\n    int retCode = sched_rr_get_interval(0, &tp);\n    if (retCode == -1)\n    {\n        std::cout << \"sched_rr_get_interval failed = \" \n                  << strerror(errno) << std::endl;\n        return 1;\n    }    \n\n    std::cout << \"timespec sec = \" << tp.tv_sec \n              << \" nanosec = \" << tp.tv_nsec << std::endl;\n    std::cout << \"End ...\" << std::endl;\n    return 0;\n}\n```", "```cpp\n#include <string.h>\n#include <iostream>\n#include <unistd.h>\n\nint main ()\n{\n    std::cout << \"Starting ...\" << std::endl;\n\n    if (nice(5) == -1)\n        std::cout << \"nice failed = \" << strerror(errno)\n            << std::endl;\n    else\n        std::cout << \"nice value successfully set = \" << std::endl;\n\n    while (1) ;\n\n    std::cout << \"End ...\" << std::endl;\n    return 0;\n}\n```", "```cpp\n#include <string.h>\n#include <iostream>\n#include <sched.h>\n\nint main ()\n{\n    std::cout << \"Starting ...\" << std::endl;\n\n    // set policy to SCHED_RR.\n    struct sched_param sched;\n    sched.sched_priority = 8;\n    if (sched_setscheduler(0, SCHED_RR, &sched) == -1)\n        std::cout << \"sched_setscheduler failed = \" \n                  << strerror(errno) \n                  << std::endl;\n\n   for( ;; )\n   {\n      int counter = 0;\n      for(int i = 0 ; i < 10000 ; ++i)\n         counter += i;\n\n      if (sched_yield() == -1)\n      {\n         std::cout << \"sched_yield failed = \" \n                   << strerror(errno) << std::endl;\n         return 1;\n      }\n   }\n\n   // we should never get here ...\n   std::cout << \"End ...\" << std::endl;\n   return 0;\n}\n```", "```cpp\n#include <iostream>\n#include <sched.h>\n#include <unistd.h>\n\nvoid current_affinity();\nint main ()\n{\n    std::cout << \"Before sched_setaffinity => \";\n    current_affinity();\n\n    cpu_set_t cpuset;\n    CPU_ZERO(&cpuset);\nint cpu_id = 3;\n    CPU_SET(cpu_id, &cpuset);\n```", "```cpp\n    int set_result = sched_setaffinity(getpid(), \n                                       sizeof(cpu_set_t), \n                                       &cpuset);\n    if (set_result != 0) \n    {\n        std::cerr << \"Error on sched_setaffinity\" << std::endl;\n    }\n\n    std::cout << \"After sched_setaffinity => \";\n    current_affinity();\n    return 0;\n}\n```", "```cpp\n// Helper function\nvoid current_affinity()\n{\n    cpu_set_t mask;\n    if (sched_getaffinity(0, sizeof(cpu_set_t), &mask) == -1) \n    {\n        std::cerr << \"error on sched_getaffinity\";\n        return;\n    }\n    else\n    {\n        long nproc = sysconf(_SC_NPROCESSORS_ONLN);\n        for (int i = 0; i < nproc; i++) \n        {\n            std::cout << CPU_ISSET(i, &mask);\n        }\n        std::cout << std::endl;\n    }\n}\n```"]