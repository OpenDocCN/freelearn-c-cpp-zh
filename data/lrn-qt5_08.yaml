- en: Web Requests
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web请求
- en: 'This chapter takes us worldwide as we venture even further out from our application
    to the internet. Beginning with writing some helper classes to manage web requests
    for us, we will pull data from a live RSS feed and interpret it via some XML processing.
    With the parsed data at hand, we can then put our QML skills to use and display
    the items on a new view.  Clicking on one of the RSS items will launch a web browser
    window in order to view the related article in more detail. We will cover the
    following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章将带我们走向全球，从我们的应用程序进一步走向互联网。从编写一些辅助类来管理我们的Web请求开始，我们将从实时RSS订阅中提取数据，并通过一些XML处理来解释它。有了解析后的数据，我们可以利用我们的QML技能并在新视图上显示项目。点击RSS项目中的一个将启动一个Web浏览器窗口，以便更详细地查看相关文章。我们将涵盖以下主题：
- en: Network access
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络访问
- en: Web Requests
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web请求
- en: RSS View
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RSS视图
- en: RSS
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RSS
- en: Network access
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络访问
- en: 'The low-level networking protocol negotiation is all handled internally by
    Qt, and we can easily get connected to the outside world via the `QNetworkAccessManager`
    class. To be able to access this functionality, we need to add the `network` module
    to `cm-lib.pro`:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 低级网络协议协商由Qt内部处理，我们可以轻松通过`QNetworkAccessManager`类连接到外部世界。为了能够访问这个功能，我们需要将`network`模块添加到`cm-lib.pro`中：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: One of Qt's weaknesses is the lack of interfaces, making unit testing difficult
    in some cases. If we just use `QNetworkAccessManager` directly, we won’t be able
    to test our code without making real calls to the network, which is undesirable.
    However, a quick and easy solution to this problem is to hide the Qt implementation
    behind an interface of our own, and we will do that here.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Qt的一个弱点是缺乏接口，在某些情况下使单元测试变得困难。如果我们直接使用`QNetworkAccessManager`，我们将无法在不进行真实网络调用的情况下测试我们的代码，这是不可取的。然而，这个问题的一个快速简单的解决方案是将Qt实现隐藏在我们自己的接口后面，我们将在这里这样做。
- en: 'For the purposes of this chapter, all we need to be able to do with the network
    is check that we have connectivity and send a HTTP GET request. With this in mind,
    create a header file `i-network-access-manager.h` in a new folder `cm-lib/source/networking`
    and implement the interface:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们需要能够通过网络检查连接性并发送HTTP GET请求。考虑到这一点，在`cm-lib/source/networking`中创建一个新文件夹`i-network-access-manager.h`并实现接口：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`QNetworkRequest` is another Qt class that represents a request to be sent
    over the network, and `QNetworkReply` represents a response received over the
    network. We will ideally hide these implementations behind interfaces too, but
    let’s make do with the network access interface for now. With that in place, go
    ahead and create a concrete implementation class `NetworkAccessManager` in the
    same folder:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`QNetworkRequest`是另一个Qt类，表示要发送到网络的请求，`QNetworkReply`表示从网络接收到的响应。理想情况下，我们也会隐藏这些实现在接口后面，但现在让我们先使用网络访问接口。有了这个，继续在同一文件夹中创建一个具体的实现类`NetworkAccessManager`：'
- en: '`network-access-manager.h`:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`network-access-manager.h`：'
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`network-access-manager.cpp`:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`network-access-manager.cpp`：'
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: All we are doing is holding a private instance of `QNetworkAccessManager` and
    passing calls to our interface through to it. The interface can easily be extended
    to include additional functionality like HTTP POST requests with the same approach.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所做的就是持有一个`QNetworkAccessManager`的私有实例，并通过接口将调用传递给它。接口可以很容易地扩展以包括使用相同方法的HTTP
    POST请求等其他功能。
- en: Web Requests
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web请求
- en: 'If you haven''t worked with the HTTP protocol before, it boils down to a conversation
    between a client and a server consisting of requests and responses.  For example,
    we can make a request to [www.bbc.co.uk](http://www.bbc.co.uk) in our favorite
    web browser, and we will receive a response containing various news items and
    articles. In the `get()` method of our `NetworkAccessManager` wrapper, we reference
    a `QNetworkRequest` (our request to a server) and a `QNetworkReply` (the server''s
    response back to us). While we won’t directly hide `QNetworkRequest` and `QNetworkReply`
    behind their own independent interfaces, we will take the concept of a web request
    and corresponding response and create an interface and implementation for that
    interaction. Still in `cm-lib/source/networking`, create an interface header file
    `i-web-request.h`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你以前没有使用过HTTP协议，它归结为客户端和服务器之间的请求和响应对话。例如，我们可以在我们喜爱的网络浏览器中向[www.bbc.co.uk](http://www.bbc.co.uk)发出请求，我们将收到一个包含各种新闻和文章的响应。在我们的`NetworkAccessManager`包装器的`get()`方法中，我们引用了一个`QNetworkRequest`（我们对服务器的请求）和一个`QNetworkReply`（服务器对我们的响应）。虽然我们不会直接隐藏`QNetworkRequest`和`QNetworkReply`在它们自己独立的接口后面，但我们将采用Web请求和相应的概念，并为该交互创建一个接口和实现。在`cm-lib/source/networking`中，创建一个接口头文件`i-web-request.h`：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The key piece of information for an HTTP request is the URL the request is to
    be sent to, represented by the `QUrl` Qt class. We provide an `url()` accessor and
    `setUrl()` mutator for the property. The other two methods are to check whether
    the `isBusy()` web request object is making a request or receiving a response
    and also to `execute()` or send the request to the network. Again, with the interface
    in place, let’s move on straight to the implementation with a new `WebRequest`
    class in the same folder.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP请求的关键信息是请求要发送到的URL，由`QUrl` Qt类表示。我们为该属性提供了`url()`访问器和`setUrl()`修改器。另外两个方法是检查`isBusy()`网络请求对象是否正在进行请求或接收响应，以及`execute()`或将请求发送到网络。同样，有了接口，让我们直接转向在同一文件夹中创建一个新的`WebRequest`类的实现。
- en: '`web-request.h`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`web-request.h`：'
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`web-request.cpp`:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`web-request.cpp`：'
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The implementation looks more complicated than it is purely because of the lengthy
    error code map. In the event of some sort of problem, Qt will report the error
    using an enumerator. The purpose of the map is simply to match the enumerator
    to a human readable error description that we can present to the user or write
    to the console or a log file.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 实现看起来比实际复杂，纯粹是因为错误代码映射过长。在出现问题时，Qt将使用枚举器报告错误。映射的目的只是将枚举器与人类可读的错误描述匹配，以便向用户呈现或写入控制台或日志文件。
- en: 'In addition to the interface methods, we also have a handful of signals that
    we can use to tell any interested observers about events that have happened:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 除了接口方法之外，我们还有一些信号，可以用来告诉任何感兴趣的观察者发生了什么事件：
- en: '`error()` will be emitted in the event of a problem and will pass the error
    description as a parameter'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`error()` 将在出现问题时被发出，并将错误描述作为参数传递'
- en: '`isBusyChanged()` is fired when a request starts or finishes and the request
    becomes either busy or idle'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isBusyChanged()` 在请求开始或结束时被触发，并且请求变得繁忙或空闲'
- en: '`requestComplete()` is emitted when the response has been received and processed
    and will contain the HTTP status code and an array of bytes representing the response
    body'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`requestComplete()` 在接收和处理响应后被发出，并将包含HTTP状态代码和表示响应主体的字节数组'
- en: '`urlChanged()` will be fired when the URL is updated'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`urlChanged()` 当URL更新时将被触发'
- en: We also have a couple of private slots that will be the delegates for processing
    a reply and handling any SSL errors. They are connected to signals on the `QNetworkReply`
    object when we execute a new request and disconnected again when we receive the
    reply.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有一些私有槽，将作为处理回复和处理任何SSL错误的委托。当我们执行新请求时，它们连接到 `QNetworkReply` 对象上的信号，当我们收到回复时再次断开连接。
- en: The meat of the implementation is really two methods—`execute()` to send the
    request and `replyDelegate()` to process the response.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 实现的核心是两个方法——`execute()` 用于发送请求和 `replyDelegate()` 用于处理响应。
- en: When executing, we first ensure that we are not already busy executing another
    request and then check with the network access manager that we have an available
    connection. Assuming that we do, we then set the busy flag and construct a `QNetworkRequest`
    using the currently set URL. We then pass the request onto our network access
    manager (injected as an interface, so we can change its behavior) and finally,
    we connect our delegate slots and wait for a response.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行时，我们首先确保我们没有在执行另一个请求，然后与网络访问管理器检查我们是否有可用连接。假设我们有，然后设置繁忙标志并使用当前设置的URL构造一个
    `QNetworkRequest`。然后将请求传递给我们的网络访问管理器（作为接口注入，因此我们可以更改其行为），最后，我们连接我们的委托槽并等待响应。
- en: When we receive the reply, we unset the busy flag and disconnect our slots before
    reading the response details we are interested in, principally the HTTP status
    code and response body. We check that the reply completed successfully (note that
    a “negative” HTTP response code in the ranges 4xx or 5xx still count as successfully
    complete requests in this context) and emit the details for any interested parties
    to capture and process.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们收到回复时，我们取消繁忙标志并断开我们的槽，然后读取我们感兴趣的响应细节，主要是HTTP状态代码和响应主体。我们检查回复是否成功完成（请注意，在此上下文中，“负面”的HTTP响应代码在4xx或5xx范围内仍然算作成功完成的请求），并为任何感兴趣的方捕获和处理细节。
- en: RSS View
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RSS View
- en: Let’s add a new view to our app where we can display some information from a
    web service using our new classes.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们向我们的应用程序添加一个新视图，我们可以使用我们的新类显示来自Web服务的一些信息。
- en: 'There is nothing new or complicated here, so I won’t show all the code, but
    there are a few steps to remember:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有什么新的或复杂的，所以我不会展示所有的代码，但有一些步骤要记住：
- en: Create a new `RssView.qml` view in `cm-ui/views` and copy the QML from `SplashView`
    for now, replacing the "Splash View" text with "Rss View"
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `cm-ui/views` 中创建一个新的 `RssView.qml` 视图，并暂时从 `SplashView` 复制QML，将“Splash View”文本替换为“Rss
    View”
- en: Add the view to `views.qrc` in the `/views` prefix block and with an alias `RssView.qml`
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `/views` 前缀块中的 `views.qrc` 中添加视图，并使用别名 `RssView.qml`
- en: Add the `goRssView()` signal to `NavigationController`
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `goRssView()` 信号添加到 `NavigationController`
- en: In `MasterView`, add the `onGoRssView` slot to the Connections element and use
    it to navigate to `RssView`
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `MasterView` 中，将 `onGoRssView` 槽添加到 Connections 元素，并使用它导航到 `RssView`
- en: In `NavigationBar`, add a new `NavigationButton` with `iconCharacter` `\uf09e`,
    description `RSS Feed`, and `hoverColour` as `#8acece`, and use the `onNavigationButtonClicked`
    slot to call `goRssView()` on the `NavigationController`
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `NavigationBar` 中，添加一个新的 `NavigationButton`，其中 `iconCharacter` 为 `\uf09e`，描述为
    `RSS Feed`，`hoverColour` 为 `#8acece`，并使用 `onNavigationButtonClicked` 槽调用 `NavigationController`
    上的 `goRssView()`
- en: 'With just a few simple steps, we’ve now got a brand new view wired up that
    we can access using the navigation bar:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 只需几个简单的步骤，我们现在已经有了一个全新的视图，可以使用导航栏访问：
- en: '![](img/a39dd8f0-b57c-4e65-be77-0dbb773ed7fa.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a39dd8f0-b57c-4e65-be77-0dbb773ed7fa.png)'
- en: 'Next, we’ll add a context command bar to the view with the following steps:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将通过以下步骤向视图添加一个上下文命令栏：
- en: In `CommandController`, add a new private member list `rssViewContextCommands`
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `CommandController` 中，添加一个新的私有成员列表 `rssViewContextCommands`
- en: Add an accessor method `ui_rssViewContextCommands()`
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个访问器方法 `ui_rssViewContextCommands()`
- en: Add a `Q_PROPERTY` named `ui_rssViewContextCommands`
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为 `ui_rssViewContextCommands` 的 `Q_PROPERTY`
- en: Add a new slot `onRssRefreshExecuted()` that simply writes a debug message to
    the console; for now to indicate it has been called
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个新的槽 `onRssRefreshExecuted()`，它只是向控制台写入调试消息；目前表示它已被调用
- en: Append a new command called `rssRefreshCommand` to `rssViewContextCommands`
    with the `0xf021` icon character and “Refresh” label and connect it to the `onRssRefreshExecuted()`
    slot
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个名为 `rssRefreshCommand` 的新命令附加到 `rssViewContextCommands`，其中 `0xf021` 为图标字符，标签为“Refresh”，并将其连接到
    `onRssRefreshExecuted()` 槽
- en: In `RssView`, add a `CommandBar` component with the `commandList` wired up to
    `ui_rssViewContextCommands` on the command controller
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `RssView` 中，添加一个 `CommandBar` 组件，其中 `commandList` 与命令控制器上的 `ui_rssViewContextCommands`
    相连
- en: 'All the hard work from earlier chapters is really paying dividends now; our
    new view has got its own command bar and a fully functional refresh button. When
    you click on it, it should write out the debug message you added to the console:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 前几章的辛勤工作现在真的开始见效了；我们的新视图有了自己的命令栏和一个完全功能的刷新按钮。当您单击它时，它应该将您添加到控制台的调试消息：
- en: '![](img/ae3e2a0c-6631-4e7f-a51d-bea4afd64603.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae3e2a0c-6631-4e7f-a51d-bea4afd64603.png)'
- en: Next, we need to create instances of our `NetworkAccessManager` and `WebRequest`
    classes. As usual, we will add these to `MasterController` and inject a dependency
    to `CommandController`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建我们的`NetworkAccessManager`和`WebRequest`类的实例。像往常一样，我们将把这些添加到`MasterController`并向`CommandController`注入依赖项。
- en: 'In `MasterController`, add two new private members:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在`MasterController`中，添加两个新的私有成员：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Remember to include the relevant headers. Instantiate these new members in
    the `Implementation` constructor, ensuring that they are created before `commandController`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 记得包含相关的头文件。在`Implementation`构造函数中实例化这些新成员，确保它们在`commandController`之前创建：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here we are using the URL for a BBC RSS feed relevant to the UK; feel free to
    swap this for another feed of your choice simply by replacing the hyperlink text.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用了与英国相关的BBC RSS订阅的URL；随时可以通过替换超链接文本来将其替换为您选择的其他订阅。
- en: 'Next, pass `rssWebRequest` as a new parameter to the `commandController` constructor:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将`rssWebRequest`作为新参数传递给`commandController`构造函数：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, edit `CommandController` to take this new parameter as a pointer to the
    interface:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，编辑`CommandController`以将此新参数作为接口的指针：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Pass this pointer through the `Implementation` constructor and store it in
    a private member variable as we do for all the other dependencies:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`Implementation`构造函数将此指针传递并将其存储为私有成员变量，就像我们对所有其他依赖项所做的那样：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We can now update the `onRssRefreshExecuted()` slot to execute the web request:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以更新`onRssRefreshExecuted()`槽来执行网络请求：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The command controller now reacts to the user pressing the refresh button and
    executes the web request. However, we don’t currently do anything when we receive
    the response. Let’s add a delegate to `MasterController` in the public slots section:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 命令控制器现在对用户按下刷新按钮做出反应并执行网络请求。但是，当我们收到响应时，我们目前并没有做任何事情。让我们在公共槽部分为`MasterController`添加一个委托：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, after we instantiate `rssWebRequest` in `Implementation`, we can wire
    up the `requestComplete` signal to our new delegate:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`Implementation`中实例化`rssWebRequest`后，我们可以将`requestComplete`信号连接到我们的新委托：
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now build and run the application, navigate to the RSS View, and click on Refresh.
    After a brief delay, while the request is executed, you will see all sorts of
    nonsense printed to the Application Output console:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在构建并运行应用程序，导航到RSS视图，并单击刷新。在请求执行时稍等片刻，您将在应用程序输出控制台上看到各种无意义的打印内容：
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Congratulations! You’ve got an RSS feed! Now, what is it?
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您已经获得了一个RSS订阅！现在，这是什么？
- en: RSS
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RSS
- en: '**Rich Site Summary **(**RSS**) is a format for delivering regularly changing
    web content and is essentially an entire website, news broadcast, blog, or similar
    condensed down to bullet points. Each item consists of bare-bones information
    like the date and a descriptive title and is supplied with a hyperlink to the
    website page that contains the full article.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**Rich Site Summary **(**RSS**)是一种用于定期传递变化的网络内容的格式，本质上是整个网站、新闻广播、博客或类似内容被压缩成要点。每个项目由日期和描述性标题等基本信息组成，并附有指向包含完整文章的网页的超链接。'
- en: The data is extended from XML and must adhere to defined standards as described
    at [http://www.rssboard.org/rss-specification](http://www.rssboard.org/rss-specification).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 数据是从XML扩展的，并且必须遵守在[http://www.rssboard.org/rss-specification](http://www.rssboard.org/rss-specification)中描述的定义标准。
- en: 'Boiling it down to the basics for the purposes of this example, the XML looks
    as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为了本示例的目的，将XML简化如下：
- en: '[PRE16]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Inside the root `<rss>` node, we have a `<channel>` node, which in turn contains
    an `<image>` node and a collection of one or more `<item>` nodes.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在根`<rss>`节点内，我们有一个`<channel>`节点，它又包含一个`<image>`节点和一个或多个`<item>`节点的集合。
- en: 'We’ll model these nodes as classes, but first we need to pull in the XML module
    and write a small helper class to do some parsing for us. In `cm-lib.pro` and
    `cm-ui.pro`, add the `xml` module to the modules in the `QT` variable; consider
    this example:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将这些节点建模为类，但首先我们需要引入XML模块并编写一个小的辅助类来为我们进行一些解析。在`cm-lib.pro`和`cm-ui.pro`中，将`xml`模块添加到`QT`变量中的模块中；考虑以下示例：
- en: '[PRE17]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Next, create a new `XmlHelper` class in a new folder `cm-lib/source/utilities`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在新文件夹`cm-lib/source/utilities`中创建一个新的`XmlHelper`类。
- en: '`xml-helper.h`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`xml-helper.h`：'
- en: '[PRE18]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '`xml-helper.cpp`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`xml-helper.cpp`：'
- en: '[PRE19]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'I won’t go into too much detail about what this class does as it isn''t the
    focus of the chapter, but essentially, if we receive an XML node that contains
    HTML markup (which is quite common in RSS), the XML parser gets a bit confused
    and breaks up the HTML into XML nodes too, which isn’t what we want. Consider
    this example:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会详细介绍这个类的功能，因为它不是本章的重点，但基本上，如果我们收到包含HTML标记的XML节点（这在RSS中很常见），XML解析器会有点困惑并将HTML分解为XML节点，这不是我们想要的。考虑以下示例：
- en: '[PRE20]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In this case, the XML parser will see `<a>` as XML and break up the content
    into three child nodes similar to this:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，XML解析器将把`<a>`视为XML，并将内容分解为三个类似于这样的子节点：
- en: '[PRE21]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This makes it difficult to display the contents of xmlNode to the user on the
    UI. Instead, we use XmlHelper to parse the contents manually and construct a single
    string, which is much easier to work with.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得在UI上向用户显示xmlNode的内容变得困难。相反，我们使用XmlHelper手动解析内容并构造一个单个字符串，这样更容易处理。
- en: Now, let’s move on to the RSS classes. In a new `cm-lib/source/rss folder`,
    create new `RssChannel`, `RssImage`, and `RssItem` classes.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续处理RSS类。在新的`cm-lib/source/rss`文件夹中，创建新的`RssChannel`、`RssImage`和`RssItem`类。
- en: '`rss-image.h`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`rss-image.h`：'
- en: '[PRE22]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '`rss-image.cpp`:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`rss-image.cpp`：'
- en: '[PRE23]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This class is just a regular plain data model with the exception that it will
    be constructed from an XML `<image>` node represented by Qt’s `QDomNode` class.
    We use the `firstChildElement()` method to locate the `<url>`, `<title>`, and
    `<link>` mandatory child nodes and then access the value of each node via the
    `text()` method. The `<width>` and `<height>` nodes are optional and if they are
    not present, we use the default image size of 88 x 31 pixels.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类只是一个普通的纯数据模型，唯一的例外是它将从Qt的`QDomNode`类表示的XML `<image>`节点构造而成。我们使用`firstChildElement()`方法来定位`<url>`、`<title>`和`<link>`强制的子节点，然后通过`text()`方法访问每个节点的值。`<width>`和`<height>`节点是可选的，如果它们不存在，我们将使用默认的图像尺寸88
    x 31像素。
- en: '`rss-item.h`:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`rss-item.h`：'
- en: '[PRE24]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '`rss-item.cpp`:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`rss-item.cpp`：'
- en: '[PRE25]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This class is much the same as the last. This time we put our XMLHelper class
    to use when parsing the `<description>` node as that has a good chance of containing
    HTML tags. Also note that Qt also helpfully contains the `Qt::RFC2822Date` format
    specifier when converting a string to a `QDateTime` object using the static `QDateTime::fromString()`
    method. This is the format used in the RSS specification and saves us from having
    to manually parse the dates ourselves.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类与上一个类基本相同。这次我们在解析`<description>`节点时使用我们的XMLHelper类，因为它很有可能包含HTML标记。还要注意，Qt还包含了`Qt::RFC2822Date`格式说明符，当使用静态的`QDateTime::fromString()`方法将字符串转换为`QDateTime`对象时，这是RSS规范中使用的格式，可以节省我们手动解析日期的工作。
- en: '`rss-channel.h`:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`rss-channel.h`：'
- en: '[PRE26]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '`rss-channel.cpp`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`rss-channel.cpp`：'
- en: '[PRE27]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This class is broadly the same as the previous classes, but because this is
    the root object of our XML tree, we also have a static `fromXml()` method. The
    goal here is to take the byte array from the RSS web request response containing
    the RSS feed XML and have the method create an RSS Channel, Image, and Items hierarchy
    for us.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类与之前的类基本相同，但因为这是我们XML树的根对象，所以我们还有一个静态的`fromXml()`方法。这里的目标是获取包含RSS feed XML的RSS网络请求响应的字节数组，并让该方法为我们创建一个RSS
    Channel、Image和Items层次结构。
- en: We pass the XML byte array into the Qt `QDomDocument` class, much like we have
    done previously with JSON and the `QJsonDocument` class. We find the `<channel>`
    tag using the `elementsByTagName()` method and then construct a new `RssChannel`
    object using that tag as the `QDomNode` parameter of the constructor. The `RssChannel`
    populates its own properties, thanks to the `update()` method. We then locate
    the `<image>` and `<item>` child nodes and create new `RssImage` and `RssItem`
    instances that are added to the root `RssChannel` object. Again, the classes are
    capable of populating their own properties from the supplied `QDomNode`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将XML字节数组传递给Qt的`QDomDocument`类，就像我们之前使用JSON和`QJsonDocument`类一样。我们使用`elementsByTagName()`方法找到`<channel>`标签，然后使用该标签作为构造函数的`QDomNode`参数构造一个新的`RssChannel`对象。`RssChannel`通过`update()`方法填充自己的属性。然后我们定位`<image>`和`<item>`子节点，并创建新的`RssImage`和`RssItem`实例，将它们添加到根`RssChannel`对象中。同样，这些类能够从提供的`QDomNode`中填充自己的属性。
- en: 'Before we forget, let’s also register the classes in `main()`:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们忘记之前，让我们也在`main()`中注册这些类：
- en: '[PRE28]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We can now add an `RssChannel` to our `MasterController` for the UI to bind
    to:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以在`MasterController`中添加一个`RssChannel`，供UI绑定：
- en: In `MasterController`, add a new `rssChannel` private member variable of the `RssChannel*` type
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MasterController`中，添加一个新的`rssChannel`私有成员变量，类型为`RssChannel*`
- en: Add an `rssChannel()` accessor method
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`rssChannel()`访问器方法
- en: Add a `rssChannelChanged()` signal
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`rssChannelChanged()`信号
- en: Add a `Q_PROPERTY` named `ui_rssChannel` using the accessor for `READ` and signal
    for `NOTIFY`
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`ui_rssChannel`的`Q_PROPERTY`，使用`READ`访问器和`NOTIFY`信号
- en: 'Rather than creating one construction when we don’t have any RSS data to feed
    it, we’ll do it in the RSS reply delegate:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们没有任何RSS数据来提供时，我们不会创建一个构造，而是在RSS回复委托中执行：
- en: '[PRE29]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: We perform some housekeeping that checks whether we already have an old channel
    object in memory and if we do, it safely deletes it using the `deleteLater()`
    method of `QObject`. We then go ahead and construct a new channel using the XML
    data from the web request.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们进行一些清理工作，检查我们是否已经在内存中有一个旧的频道对象，如果有，我们使用`QObject`的`deleteLater()`方法安全地删除它。然后我们继续使用来自网络请求的XML数据构造一个新的频道。
- en: Always use `deleteLater()` on `QObject` derived classes rather than the standard
    C++ `delete` keyword as the destruction will be synchronized with the event loop
    and you will minimize the risk of unexpected exceptions.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 始终在`QObject`派生类上使用`deleteLater()`，而不是标准的C++ `delete`关键字，因为销毁将与事件循环同步，您将最小化意外异常的风险。
- en: 'We will display the RSS items in the response in a similar way to how we managed
    the search results, with a `ListView` and associated delegate. Add `RssItemDelegate.qml`
    to `cm-ui/components` and perform the usual steps of editing the `components.qrc`
    and `qmldir` files:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将以与管理搜索结果类似的方式显示响应中的RSS项目，使用`ListView`和相关的委托。将`RssItemDelegate.qml`添加到`cm-ui/components`，并执行编辑`components.qrc`和`qmldir`文件的常规步骤：
- en: '[PRE30]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'To support this component, we will need to add a few more Style properties:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 为了支持这个组件，我们需要添加一些额外的样式属性：
- en: '[PRE31]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We can now utilize this delegate in `RssView`:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以在`RssView`中利用这个委托：
- en: '[PRE32]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Build and run, navigate to the RSS View, and click on the Refresh button to
    make the web request and display the response:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行，导航到RSS视图，并单击刷新按钮以进行网络请求并显示响应：
- en: '![](img/7db92f1b-d929-4cf3-87ab-5160b63abe11.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7db92f1b-d929-4cf3-87ab-5160b63abe11.png)'
- en: Hover over the items to see the cursor effects and click on an item to open
    it in your default web browser. Qt handles this action for us in the `Qt.openUrlExternally()`
    method, to which we pass the RSS Item `link` property.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 将鼠标悬停在项目上以查看光标效果，并单击项目以在默认的网络浏览器中打开它。Qt在`Qt.openUrlExternally()`方法中为我们处理此操作，我们将RSS项目`link`属性传递给它。
- en: Summary
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we extended our reach outside of our application and began
    interacting with external APIs using HTTP requests over the internet. We abstracted
    the Qt functionality using our own interfaces to improve decoupling and make our
    components more test friendly. We took a quick look at RSS and its structure and
    how to process XML node trees using Qt’s XML module. Finally, we reinforced the
    great UI work we’ve been doing and added an interactive view to display an RSS
    feed and launch the default web browser for a given URL.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将我们的触角延伸到应用程序之外，并开始使用互联网上的HTTP请求与外部API进行交互。我们使用自己的接口对Qt功能进行了抽象，以改善解耦并使我们的组件更易于测试。我们快速了解了RSS及其结构，以及如何使用Qt的XML模块处理XML节点树。最后，我们加强了我们一直在做的出色的UI工作，并添加了一个交互式视图来显示RSS订阅，并启动默认的Web浏览器以显示给定的URL。
- en: In [Chapter 9](8fbb3a0b-96a5-4497-a8a4-a2f7008df0df.xhtml), *Wrapping Up*, we
    will take a look at the steps required to package our application for deployment
    to other computers.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第9章](8fbb3a0b-96a5-4497-a8a4-a2f7008df0df.xhtml) *总结* 中，我们将看看将我们的应用程序打包部署到其他计算机所需的步骤。
