- en: Chapter 1. UE4 Development Tools
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章 UE4开发工具
- en: 'In this chapter, we will outline basic recipes for getting started in UE4 game
    development, and the basic tools that we use for creating the code that makes
    your game. This will include the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将概述UE4游戏开发的基本方法，并介绍我们用于创建使您的游戏的代码的基本工具。这将包括以下方法：
- en: Installing Visual Studio
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Visual Studio
- en: Creating and building your first C++ project in Visual Studio
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Visual Studio中创建和构建您的第一个C++项目
- en: Changing the code font and color in Visual Studio
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Visual Studio中更改代码字体和颜色
- en: Extension – changing the color theme in Visual Studio
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展 - 在Visual Studio中更改颜色主题
- en: Formatting your code (Autocomplete settings) in Visual Studio
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Visual Studio中格式化您的代码（自动完成设置）
- en: Shortcut keys in Visual Studio
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio中的快捷键
- en: Extended mouse usage in Visual Studio
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Visual Studio中扩展鼠标使用
- en: UE4 – installation
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UE4 - 安装
- en: UE4 – first project
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UE4 - 第一个项目
- en: UE4 – creating your first level
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UE4 - 创建您的第一个级别
- en: UE4 – logging with `UE_LOG`
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UE4 - 使用`UE_LOG`进行日志记录
- en: UE4 – making an `FString` from `FStrings` and other variables
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UE4 - 从`FStrings`和其他变量创建`FString`
- en: Project management on GitHub – getting your Source Control
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub上的项目管理 - 获取您的源代码控制
- en: Project management on GitHub – using the Issue Tracker
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在GitHub上的项目管理 - 使用问题跟踪器
- en: Project management on VisualStudio.com – managing the tasks in your project
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在VisualStudio.com上的项目管理 - 管理项目中的任务
- en: Project management on VisualStudio.com – constructing user stories and tasks
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在VisualStudio.com上的项目管理 - 构建用户故事和任务
- en: Introduction
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Creating a game is an elaborate task that will require a combination of **assets**
    and **code**. To create assets and code, we'll need some pretty advanced tools
    including *art tools*, *sound tools*, *level editing tools*, and *code editing
    tools*. In this chapter, we'll discuss finding suitable tools for asset creation
    and coding. Assets include any visual artwork (2D sprites, 3D models), audio (music
    and sound effects), and game levels. Code is the text (usually C++) that instructs
    the computer on how to tie these assets together to make a game world and level,
    and how to make that game world "play." There are dozens of very good tools for
    each task; we will explore a couple of each, and make some recommendations. Game
    editing tools, especially, are hefty programs that require a powerful CPU and
    lots of memory, and very good, ideal GPUs for good performance.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 创建游戏是一个复杂的任务，需要结合**资产**和**代码**。为了创建资产和代码，我们需要一些非常先进的工具，包括*艺术工具*、*声音工具*、*级别编辑工具*和*代码编辑工具*。在本章中，我们将讨论寻找适合资产创建和编码的工具。资产包括任何视觉艺术品（2D精灵、3D模型）、音频（音乐和音效）和游戏级别。代码是指（通常是C++）指示计算机如何将这些资产组合在一起以创建游戏世界和级别，并如何使该游戏世界“运行”的文本。每项任务都有数十种非常好的工具；我们将探索其中的一些，并提出一些建议。特别是游戏编辑工具是庞大的程序，需要强大的CPU和大量内存，以及非常好的GPU以获得良好的性能。
- en: Protecting your assets and work is also a necessary practice. We'll explore
    and describe source control, which is how you back up your work on a remote server.
    An introduction to *Unreal Engine 4 Programming* is also included, along with
    exploring basic logging functions and library use. Significant planning is also
    required to get the tasks done, so we'll use a task-planner software package to
    do so.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 保护您的资产和工作也是必要的实践。我们将探讨和描述源代码控制，这是您如何在远程服务器上备份工作的方式。还包括*Unreal Engine 4编程*的介绍，以及探索基本的日志记录功能和库的使用。还需要进行重要的规划来完成任务，因此我们将使用任务计划软件包来完成。
- en: Installing Visual Studio
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Visual Studio
- en: Visual Studio is an essential package for code editing when editing the C++
    code for your UE4 game.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在编辑UE4游戏的C++代码时，Visual Studio是一个必不可少的代码编辑包。
- en: Getting ready
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We're going to set up a C++ coding environment to build our UE4 applications.
    We'll download Visual Studio 2015, install it, and set it up for UE4 C++ coding.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将建立一个C++编码环境来构建我们的UE4应用程序。我们将下载Visual Studio 2015，安装它，并为UE4 C++编码进行设置。
- en: How to do it...
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '如何做... '
- en: Begin by visiting [https://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx](https://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx).
    Click on **Download Community 2015**. This downloads the ~200 KB loader/installer.![How
    to do it...](img/00002.jpeg)
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先访问[https://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx](https://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx)。单击**下载Community
    2015**。这将下载大约200 KB的加载程序/安装程序。![如何做...](img/00002.jpeg)
- en: Tip
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can compare editions of Visual Studio at [https://www.visualstudio.com/en-us/products/compare-visual-studio-2015-products-vs.aspx](https://www.visualstudio.com/en-us/products/compare-visual-studio-2015-products-vs.aspx).
    The Community Edition of Visual Studio is fully adequate for UE4 development purposes
    in this book.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://www.visualstudio.com/en-us/products/compare-visual-studio-2015-products-vs.aspx](https://www.visualstudio.com/en-us/products/compare-visual-studio-2015-products-vs.aspx)上比较Visual
    Studio的版本。本书中的UE4开发目的，Visual Studio的社区版是完全足够的。
- en: Launch the installer, and select the components of Visual Studio 2015 that you
    want to add to your PC. Keep in mind that the more features you select, the larger
    your installation will be.![How to do it...](img/00003.jpeg)
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动安装程序，并选择要添加到您的PC的Visual Studio 2015组件。请记住，您选择的功能越多，安装的大小就越大。![如何做...](img/00003.jpeg)
- en: The preceding screenshot shows a recommended minimum installation, with **Common
    Tools for Visual C++ 2015**, **Git for Windows**, and **GitHub Extension for Visual
    Studio** all checked. We will use the **Git for Windows** features in a later
    section in this chapter.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 上述屏幕截图显示了推荐的最小安装，所有都已选中**Visual C++ 2015的公共工具**，**Git for Windows**和**Visual
    Studio的GitHub扩展**。我们将在本章的后面部分使用**Git for Windows**功能。
- en: After you have selected the tools you'd like to add onto Visual Studio, click
    the **Next** button. The installer tool will download the required components,
    and continue setup. Installation should take 20-40 minutes, depending on your
    option selections and connection speed.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您选择要添加到Visual Studio的工具后，单击**下一步**按钮。安装程序将下载所需的组件，并继续设置。安装时间取决于您的选项选择和连接速度，大约需要20-40分钟。
- en: After you download and install Visual Studio 2015, launch it. You will be presented
    with a **Sign in** dialog box.![How to do it...](img/00004.jpeg)
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并安装Visual Studio 2015后，启动它。您将看到一个**登录**对话框。![操作步骤...](img/00004.jpeg)
- en: You can **Sign in** with your Microsoft account (the one you use to sign into
    Windows 10), or **Sign up** for a new account. After you've signed in or signed
    up, you will be able to sign into Visual Studio itself. It may seem odd to sign
    into a desktop code editing program, but your sign-in will be used for source
    control commits to your repositories. On first signing in to Visual Studio, you
    can select (one time only) a unique URL for your source code repositories as hosted
    on Visualstudio.com.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用您的Microsoft帐户（用于登录Windows 10的帐户）**登录**，或者**注册**一个新帐户。登录或注册后，您将能够登录到Visual
    Studio本身。在登录到Visual Studio时，您可以选择（仅一次）Visualstudio.com上托管的源代码库的唯一URL。
- en: How it works...
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Visual Studio is an excellent editor, and you will have a fantastic time coding
    within it. In the next recipe, we'll discuss how to create and compile your own
    code.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio是一个优秀的编辑器，您将在其中编写代码时度过美好的时光。在下一个教程中，我们将讨论如何创建和编译您自己的代码。
- en: Creating and building your first C++ project in Visual Studio
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Visual Studio中创建和构建您的第一个C++项目
- en: In order to compile and run code from Visual Studio, it must be done from within
    a project.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从Visual Studio编译和运行代码，必须在项目内完成。
- en: Getting ready
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, we will identify how to create an actual executable running
    program from Visual Studio. We will do so by creating a project in Visual Studio
    to host, organize, and compile the code.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将介绍如何从Visual Studio创建一个实际的可执行运行程序。我们将通过在Visual Studio中创建一个项目来实现这一点，以托管、组织和编译代码。
- en: How to do it...
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: In Visual Studio, each group of code is contained within something called a
    **Project**. A Project is a buildable conglomerate of code and assets that produce
    either an executable (`.exe` runnable) or a library (`.lib`, or `.dll`). A group
    of Projects can be collected together into something called a **Solution**. Let's
    start by constructing a Visual Studio Solution and Project for a console application,
    followed by constructing a UE4 sample Project and Solution.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在Visual Studio中，每组代码都包含在一个称为**项目**的东西中。项目是一组可构建的代码和资产，可以生成可执行文件（`.exe`可运行）或库（`.lib`或`.dll`）。一组项目可以被收集到一起形成一个称为**解决方案**的东西。让我们首先为控制台应用程序构建一个Visual
    Studio解决方案和项目，然后构建一个UE4示例项目和解决方案。
- en: Open Visual Studio, and go to **File** | **New** | **Project...**
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio，转到**文件** | **新建** | **项目...**
- en: You will see a dialog as follows:![How to do it...](img/00005.jpeg)
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到以下对话框：![操作步骤...](img/00005.jpeg)
- en: Select **Win32** in the pane on the left-hand side. In the right-hand pane,
    hit **Win32 Console Application**. Name your project in the lower box, then hit
    **OK**.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧的窗格中选择**Win32**。在右侧的窗格中，点击**Win32控制台应用程序**。在下方的框中命名您的项目，然后点击**确定**。
- en: In the next dialog box, we specify the properties of our console application.
    Read the first dialog box and simply click **Next**. Then, in the **Application
    Settings** dialog, choose the **Console Application** bullet, then under **Additional
    options**, choose **Empty project**. You can leave **Security Development Lifecycle
    (SDL) checks** unchecked.![How to do it...](img/00006.jpeg)
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个对话框中，我们指定控制台应用程序的属性。阅读第一个对话框，然后简单地点击**下一步**。然后，在**应用程序设置**对话框中，选择**控制台应用程序**选项，然后在**附加选项**下选择**空项目**。您可以不选择**安全开发生命周期（SDL）检查**。![操作步骤...](img/00006.jpeg)
- en: Once the application wizard completes, you will have created your first project.
    Both a Solution and a Project are created. To see these, you need **Solution Explorer**.
    To ensure that **Solution Explorer** is showing, go to **View** | **Solution Explorer**
    (or press *Ctrl* + *Alt* + *L*). **Solution Explorer** is a window that usually
    appears docked on the left-hand side or right-hand side of the main editor window
    as shown in the following screenshot:![How to do it...](img/00007.jpeg)
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序向导完成后，您将创建您的第一个项目。将创建一个解决方案和一个项目。要查看这些内容，您需要**解决方案资源管理器**。为了确保**解决方案资源管理器**正在显示，转到**视图**
    | **解决方案资源管理器**（或按下*Ctrl* + *Alt* + *L*）。**解决方案资源管理器**通常显示在主编辑器窗口的左侧或右侧，如下面的屏幕截图所示：![操作步骤...](img/00007.jpeg)
- en: '**Solution Explorer** also displays all the files that are part of the project.
    Using **Solution Explorer**, we will also add a code file into the editor. Right
    click on your Project `FirstProject`, and select **Add** | **New Item…**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案资源管理器**还显示了项目的所有文件。使用**解决方案资源管理器**，我们还将在编辑器中添加一个代码文件。右键单击您的项目`FirstProject`，然后选择**添加**
    | **新建项...**'
- en: '![How to do it...](img/00008.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/00008.jpeg)'
- en: In the next dialog, simply select **C++ File (.cpp)**, and give the file any
    name you'd like. I called mine `Main.cpp`.![How to do it...](img/00009.jpeg)
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个对话框中，只需选择**C++文件 (.cpp)**，并给文件任何您喜欢的名称。我称我的为`Main.cpp`。![操作步骤...](img/00009.jpeg)
- en: 'Once you have added the file, it will appear in **Solution Explorer** under
    your `FirstProject`''s source file filter. As your Project grows, more and more
    files are going to be added to your project. You can compile and run your first
    C++ program using the following text:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您添加了文件，它将出现在**解决方案资源管理器**中，位于您的`FirstProject`的源文件过滤器下。随着项目的增长，将会添加更多的文件到您的项目中。您可以使用以下文本编译和运行您的第一个C++程序：
- en: '[PRE0]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Press *Ctrl* + *Shift* + *B* to build the project, then *Ctrl* + *F5* to run
    the project.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下*Ctrl* + *Shift* + *B*来构建项目，然后按下*Ctrl* + *F5*来运行项目。
- en: Your executable will be created, and you will see a small black window with
    the results of your program's run:![How to do it...](img/00010.jpeg)
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的可执行文件将被创建，您将看到一个小黑窗口显示程序运行的结果：![操作步骤...](img/00010.jpeg)
- en: How it works...
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Building an executable involves translating your C++ code from text language
    to a binary file. Running the file runs your game program, which is just the code
    text that occurs in the `main()` function between `{` and `}`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 构建可执行文件涉及将您的C++代码从文本语言转换为二进制文件。运行该文件将运行您的游戏程序，这只是发生在`main()`函数之间的代码文本，即在`{`和`}`之间。
- en: There's more...
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'Build configurations are **styles** of build that we should discuss them here.
    There are at least two important build configurations you should know about: **Debug**
    and **Release**. The Build configuration selected is at the top of the editor,
    just below the toolbar in the default position.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 构建配置是我们应该在这里讨论的构建**样式**。至少有两个重要的构建配置需要了解：**调试**和**发布**。所选的构建配置位于编辑器顶部，在默认位置的工具栏下方。
- en: '![There''s more...](img/00011.jpeg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![更多内容...](img/00011.jpeg)'
- en: Depending on which configuration you select, different compiler options are
    used. A **Debug** configuration typically includes extensive debug information
    in the build as well as turning off optimizations to speed up compilation. **Release**
    builds are often optimized (either for size or for speed), take a bit longer to
    build, and result in smaller or faster executables. Behavior stepping through
    with the debugger is often better in the **Debug** mode than the **Release** mode.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您选择的配置，将使用不同的编译器选项。**调试**配置通常在构建中包含大量的调试信息，并关闭优化以加快编译速度。**发布**构建通常经过优化（无论是为了大小还是速度），需要更长时间来构建，并且生成的可执行文件更小或更快。使用调试器进行逐步调试在**调试**模式下通常比**发布**模式更好。
- en: Changing the code font and color in Visual Studio
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Visual Studio中更改代码字体和颜色
- en: Customizing the font and color in Visual Studio is not only extremely flexible,
    you will also find it very necessary if your monitor resolution is quite high
    or quite low.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在Visual Studio中自定义字体和颜色不仅非常灵活，而且如果您的显示器分辨率非常高或非常低，您还会发现它非常必要。
- en: Getting ready
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Visual Studio is a highly customizable code editing tool. You might find the
    default fonts too small for your screen. You may want to change your code's font
    size and color. Or you may want to completely customize the coloration of keywords
    and the text background colors. The **Fonts and Colors** dialog box, which we'll
    show you how to use in this section, allows you to completely customize every
    aspect of the code editor's font and color.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio是一个高度可定制的代码编辑工具。您可能会发现默认字体对于您的屏幕来说太小了。您可能想要更改代码的字体大小和颜色。或者您可能想要完全自定义关键字和文本背景颜色。**字体和颜色**对话框，我们将在本节中向您展示如何使用，允许您完全自定义代码编辑器字体和颜色的每个方面。
- en: '![Getting ready](img/00012.jpeg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/00012.jpeg)'
- en: How to do it...
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: From within Visual Studio, go to **Tools** | **Options…**![How to do it...](img/00013.jpeg)
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Visual Studio中，转到**工具** | **选项...**![如何做...](img/00013.jpeg)
- en: Select **Environment** | **Fonts and Colors** from the dialog that appears.
    It will look like the following screenshot:![How to do it...](img/00014.jpeg)
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从出现的对话框中选择**环境** | **字体和颜色**。它将看起来像下面的截图:![如何做...](img/00014.jpeg)
- en: Play around with the font and font size of **Text Editor/Plain Text**. Click
    **OK** on the dialog, and see the results in the code-text editor.![How to do
    it...](img/00015.jpeg)
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试调整**文本编辑器/纯文本**的字体和字体大小。在对话框上点击**确定**，然后在代码文本编辑器中查看结果。![如何做...](img/00015.jpeg)
- en: '**Text Editor/Plain Text** describes the font and size used for all code text
    within the regular code editor. If you change the size of the font, the size changes
    for any text entered into the coding window (for all languages, including C, C++,
    C#, and others).'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**文本编辑器/纯文本**描述了常规代码编辑器中所有代码文本使用的字体和大小。如果更改字体的大小，那么在编码窗口中输入的任何文本的大小都会改变（包括C、C++、C#等所有语言）。'
- en: '![How to do it...](img/00016.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/00016.jpeg)'
- en: The color (foreground and background) is completely customizable for each item.
    Try this for the **Text Editor/Keyword** setting (affects all languages), or for
    C++-specific items, such as **Text Editor/C++ Functions**. Click **OK**, and you
    will see the changed color of the item reflected in the code editor.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 每个项目的颜色（前景和背景）都可以完全自定义。尝试对**文本编辑器/关键字**设置（影响所有语言），或者对C++特定项目进行设置，比如**文本编辑器/C++函数**。点击**确定**，您将看到项目的更改颜色在代码编辑器中得到反映。
- en: 'You may also want to configure the font size of the **Output Window**—choose
    **Show settings for** => **Output Window** as seen in the following screenshot:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还想配置**输出窗口**的字体大小 - 选择**显示设置** => **输出窗口**，如下截图所示：
- en: '![How to do it...](img/00017.jpeg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/00017.jpeg)'
- en: The **Output Window** is the little window at the bottom of the editor that
    displays build results and compiler errors.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出窗口**是编辑器底部显示构建结果和编译器错误的小窗口。'
- en: Tip
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can't save-out (export) or bring in (import) your changes to the **Fonts
    and Colors** dialog. But you can use something called the *Visual Studio Theme
    Editor Extension,* learn more refer to *Extension – changing the color theme in
    Visual Studio* to export and import customized color themes.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 无法保存（导出）或导入（导入）对**字体和颜色**对话框的更改。但是您可以使用一个叫做*Visual Studio Theme Editor Extension*的东西，了解更多请参考*扩展
    - 在Visual Studio中更改颜色主题*来导出和导入自定义颜色主题。
- en: For this reason, you may want to avoid changing font colors from this dialog.
    You must use this dialog to change the font and font-size, however, for any setting
    (at the time of writing).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您可能希望避免从此对话框更改字体颜色。但是，您必须使用此对话框来更改字体和字体大小，无论在任何设置中（在撰写本文时）。
- en: How it works...
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The **Fonts and Colors** dialog simply changes the appearance of code in the
    text editor as well as for other windows such as the output window. It is very
    useful for making your coding environment more comfortable.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**字体和颜色**对话框只是简单地改变了文本编辑器中代码的外观，以及输出窗口等其他窗口的外观。这对于使您的编码环境更加舒适非常有用。'
- en: There's more...
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: Once you have customized your settings, you'll find that you may want to save
    your customized **Fonts and Colors** settings for others to use, or to put into
    another installation of Visual Studio, which you have on another machine. Unfortunately,
    by default, you won't be able to save-out your customized **Fonts and Colors**
    settings. You will need something called the Visual Studio Theme Editor extension
    to do so. We will explore this in the next recipe.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你自定义了你的设置，你会发现你可能想要保存你定制的**字体和颜色**设置供他人使用，或者放到另一台计算机上的另一个Visual Studio安装中。不幸的是，默认情况下，你无法保存你定制的**字体和颜色**设置。你需要一个叫做Visual
    Studio Theme Editor的扩展来做到这一点。我们将在下一个步骤中探讨这个问题。
- en: See also
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Extension – changing the color theme in Visual Studio* section describes
    how to import and export color themes
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*扩展 - 在Visual Studio中更改颜色主题*部分描述了如何导入和导出颜色主题'
- en: Extension – changing the color theme in Visual Studio
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展 - 在Visual Studio中更改颜色主题
- en: By default, you cannot save the changes you make to the font colors and background
    settings that you make in the **Fonts and Colors** dialog. To fix this issue,
    Visual Studio 2015 has a feature called **Themes**. If you go to **Tools** | **Options**
    | **Environment** | **General**, you can change the theme to one of the three
    pre-installed stock themes (**Light**, **Blue**, and **Dark**).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，你无法保存在**字体和颜色**对话框中所做的字体颜色和背景设置的更改。为了解决这个问题，Visual Studio 2015有一个叫做**主题**的功能。如果你转到**工具**
    | **选项** | **环境** | **常规**，你可以将主题更改为三种预安装的主题之一（**浅色**，**蓝色**和**深色**）。
- en: '![Extension – changing the color theme in Visual Studio](img/00018.jpeg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![扩展 - 在Visual Studio中更改颜色主题](img/00018.jpeg)'
- en: A different theme completely changes the look of Visual Studio—from the colors
    of the title bars to the background color of the text editor window.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的主题会完全改变Visual Studio的外观-从标题栏的颜色到文本编辑器窗口的背景颜色。
- en: You can also customize the theme of Visual Studio completely, but you'll need
    an extension to do so. Extensions are little programs that can be installed into
    Visual Studio to modify its behavior.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以完全自定义Visual Studio的主题，但你需要一个扩展来实现。扩展是可以安装到Visual Studio中以修改其行为的小程序。
- en: By default, your customized color settings cannot be saved or reloaded into
    another Visual Studio installation without the extension. With the extension,
    you will also be able to save your own color theme to share with others. You can
    also load the color settings made by another person or by yourself into a fresh
    copy of Visual Studio.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，你的定制颜色设置无法在没有扩展的情况下保存或重新加载到另一个Visual Studio安装中。有了扩展，你还可以保存自己的颜色主题以供他人使用。你还可以将另一个人或你自己制作的颜色设置加载到全新的Visual
    Studio副本中。
- en: How to do it...
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: Go to **Tools** | **Extensions and Updates…**
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**工具** | **扩展和更新...**
- en: From the dialog that appears, choose **Online** in the panel on the left-hand
    side. Start typing `Theme Editor` into the search box at the right. The **Visual
    Studio 2015 Color Theme Editor** dialog will pop up in your search results.![How
    to do it...](img/00019.jpeg)
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从出现的对话框中，在左侧面板中选择**在线**。在右侧的搜索框中开始输入`Theme Editor`。**Visual Studio 2015 Color
    Theme Editor**对话框将会出现在你的搜索结果中。![操作步骤...](img/00019.jpeg)
- en: Click the small **Download** button in the top right-hand corner of the entry.
    Click through the installation dialog prompts, allowing the plugin to install.
    After installation, Visual Studio will prompt you to restart.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击条目右上角的小**下载**按钮。按照安装对话框提示进行操作，允许插件安装。安装完成后，Visual Studio将提示你重新启动。
- en: Tip
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Alternatively, visit [https://visualstudiogallery.msdn.microsoft.com/6f4b51b6-5c6b-4a81-9cb5-f2daa560430b](https://visualstudiogallery.msdn.microsoft.com/6f4b51b6-5c6b-4a81-9cb5-f2daa560430b)
    and download/install the extension by double-clicking the `.vsix` that comes from
    your browser.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，访问[https://visualstudiogallery.msdn.microsoft.com/6f4b51b6-5c6b-4a81-9cb5-f2daa560430b](https://visualstudiogallery.msdn.microsoft.com/6f4b51b6-5c6b-4a81-9cb5-f2daa560430b)并通过双击浏览器中的`.vsix`来下载/安装扩展。
- en: Click **Restart Now** to ensure the plugin is loaded.![How to do it...](img/00020.jpeg)
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**立即重启**以确保插件已加载。![操作步骤...](img/00020.jpeg)
- en: After restarting, go to **Tools** | **Customize Colors** to open the **Color
    Themes** editor page.![How to do it...](img/00021.jpeg)
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动后，转到**工具** | **自定义颜色** 打开**颜色主题**编辑页面。![操作步骤...](img/00021.jpeg)
- en: From the **Color Themes** dialog that appears, click on the little palette-shaped
    icon on the upper-right corner of the theme that you want to use as your base
    or starting theme (I've clicked on the palette for the **Light** theme here, as
    you can see in the following screenshot).![How to do it...](img/00022.jpeg)
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从出现的**颜色主题**对话框中，点击你想要用作基础或起始主题的右上角小调色板形状图标（我在这里点击了**浅色**主题的调色板，如你在下面的截图中所见）。![操作步骤...](img/00022.jpeg)
- en: A copy of the theme will appear in the **Custom Themes** section in the lower
    part of the **Color Themes** window. Click on **Edit Theme** to modify the theme.
    When you are editing the theme, you can change everything from the font text color
    to the C++ keyword color.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**颜色主题**窗口的下部将出现一个**自定义主题**部分的主题副本。点击**编辑主题**来修改主题。当你编辑主题时，你可以改变从字体文本颜色到C++关键字颜色的一切。
- en: The main area you are interested in is the C++ Text Editor section. To gain
    access to all the C++ Text Editor options, be sure to select the **Show All Elements**
    option at the top of the Theme Editor window, as shown in the following screenshot:![How
    to do it...](img/00023.jpeg)
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你感兴趣的主要区域是C++文本编辑器部分。为了访问所有C++文本编辑器选项，请确保在Theme Editor窗口顶部选择**显示所有元素**选项，如下截图所示：![操作步骤...](img/00023.jpeg)
- en: Note
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Be sure to select the **Show All Elements** option in the Theme Editor window
    to show C++-specific text editor settings. Otherwise, you'll be left with Chrome/GUI
    type modifications being possible only.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在Theme Editor窗口中选择**显示所有元素**选项，以显示特定于C++的文本编辑器设置。否则，你只能进行Chrome/GUI类型的修改。
- en: Note that, while most of the settings you are interested in will be under **Text
    Editor** | **C/C++**, some will not have that **C++** subheading. For example,
    the setting for the main/plain text inside the editor window (for all languages)
    is under **Text Editor** | **Plain Text** (without the **C++** subheading).
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，您感兴趣的大多数设置将在**文本编辑器** | **C/C++**下，但有些设置不会有**C++**子标题。例如，编辑器窗口内的主/纯文本的设置（适用于所有语言）在**文本编辑器**
    | **纯文本**（没有**C++**子标题）下。
- en: Select the theme to use from **Tools** | **Options** | **Environment** | **General**.
    Any new themes you have created will appear automatically in the drop-down menu.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**工具** | **选项** | **环境** | **常规**中选择要使用的主题。您创建的任何新主题都将自动显示在下拉菜单中。
- en: How it works...
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Once we load the plugin, it integrates into Visual Studio quite nicely. Exporting
    and uploading your themes to share with others is quite easy too.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦加载插件，它会很好地集成到Visual Studio中。导出和上传您的主题以与他人共享也非常容易。
- en: Adding a theme to your Visual Studio installs it as an extension in **Tools**
    | **Extensions and Updates…**, To remove a theme, simply **Uninstall** its Extension.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 将主题添加到Visual Studio中，将其安装为**工具** | **扩展和更新...**中的扩展，要删除主题，只需**卸载**其扩展。
- en: '![How it works...](img/00024.jpeg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/00024.jpeg)'
- en: Formatting your code (Autocomplete settings) in Visual Studio
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Visual Studio中格式化您的代码（自动完成设置）
- en: Code-writing formatting with Visual Studio is a pleasure. In this recipe, we'll
    discuss how to control the way Visual Studio lays out the text of your code.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Visual Studio编写代码格式非常愉快。在本教程中，我们将讨论如何控制Visual Studio排列代码文本的方式。
- en: Getting ready
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Code has to be formatted correctly. You and your co-programmers will be able
    to better understand, **grok**, and keep your code bug-free if it is consistently
    formatted. This is why Visual Studio includes a number of auto-formatting tools
    inside the editor.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 代码必须格式正确。如果代码一直保持一致的格式，您和您的合作程序员将能更好地理解、掌握并保持代码无错。这就是为什么Visual Studio在编辑器内包含许多自动格式化工具的原因。
- en: How to do it...
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Go to **Tools** | **Options** | **Text Editor** | **C/C++**. This dialog displays
    a window that allows you to toggle **Automatic brace completion**.![How to do
    it...](img/00025.jpeg)
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**工具** | **选项** | **文本编辑器** | **C/C++**。此对话框显示一个窗口，允许您切换**自动括号完成**。![如何做...](img/00025.jpeg)
- en: '**Automatic brace completion** is the feature where, when you type `{` , a
    corresponding `}` is automatically typed for you. This feature may irk you if
    you don''t like the text editor inserting characters for you unexpectedly.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**自动括号完成**是一种功能，当您键入`{`时，会自动为您键入相应的`}`。如果您不喜欢文本编辑器意外地插入字符，这个功能可能会让您不爽。'
- en: 'You generally want **Auto list members** on, as that displays a nice dialog
    with the complete names of data members listed for you as soon as you start typing.
    This makes it easy to remember variable names, so you don''t have to memorize
    them:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 通常希望打开**自动列出成员**，因为这会显示一个漂亮的对话框，其中列出了您开始键入时的数据成员的完整名称。这样可以轻松记住变量名称，因此您不必记住它们：
- en: '![How to do it...](img/00026.jpeg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/00026.jpeg)'
- en: Tip
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you press *Ctrl* + Spacebar inside the code editor at any time, the auto
    list pops up.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在代码编辑器中随时按*Ctrl* + Spacebar，将弹出自动列表。
- en: Some more autocomplete behavior options are located under **Text Editor** |
    **C/C++** | **Formatting**:![How to do it...](img/00027.jpeg)
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更多的自动完成行为选项位于**文本编辑器** | **C/C++** | **格式**下：![如何做...](img/00027.jpeg)
- en: '**Autoformat section**: Highlight a section of text and select **Edit** | **Advanced**
    | **Format Selection** (*Ctrl* + *K, Ctrl* + *F*).'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**自动格式化部分**：突出显示文本的部分，然后选择**编辑** | **高级** | **格式化选择**（*Ctrl* + *K, Ctrl* +
    *F*）。'
- en: How it works...
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The default autocomplete and autoformat behaviors may irk you. You need to converse
    with your team on how you want your code formatted (spaces or tab indents, size
    of indent, and so on), and then configure your Visual Studio settings accordingly.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的自动完成和自动格式化行为可能会让您不爽。您需要与团队讨论如何格式化代码（空格或制表符缩进、缩进大小等），然后相应地配置您的Visual Studio设置。
- en: Shortcut keys in Visual Studio
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Visual Studio中的快捷键
- en: Shortcut keys really save you time when coding. Knowing shortcut keys offhand
    is always good.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 编码时，快捷键确实可以节省您的时间。随时了解快捷键总是很好的。
- en: Getting ready
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: There are a number of shortcut keys that will make coding and project navigation
    much faster and more efficient for you. In this recipe, we describe how to use
    some of the common shortcut keys that will really enhance your coding speed.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多快捷键可以让您的编码和项目导航更快速、更高效。在本教程中，我们将介绍如何使用一些常见的快捷键，以真正提高您的编码速度。
- en: How to do it...
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following are some very useful keyboard shortcuts for you to try:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些非常有用的键盘快捷键供您尝试：
- en: Click on one page of the code, then click somewhere else, at least 10 lines
    of code away. Now press *Ctrl* + *-* [navigate backwards]. Navigation through
    different pages of source code (the last place you were at, and the place you
    are at now) is done by pressing *Ctrl* + *-* and *Ctrl* + *Shift* + *-* respectively.![How
    to do it...](img/00028.jpeg)
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击代码的一页，然后单击其他地方，至少相隔10行代码。现在按下*Ctrl* + *-* [向后导航]。通过按*Ctrl* + *-*和*Ctrl* +
    *Shift* + *-*分别可以导航到源代码的不同页面（您上次所在的位置和您现在所在的位置）。![如何做...](img/00028.jpeg)
- en: Tip
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Warping around in the text editor using *Ctrl* + *-*. The cursor will jump back
    to the last location it was in that is more than 10 lines of code away, even if
    the last location was in a separate file.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*Ctrl* + *-*在文本编辑器中跳转。光标将跳回到上次所在的位置，即使上次所在的位置距离代码超过10行，即使上次所在的位置在另一个文件中。
- en: 'Say, for example, you''re editing code in one place, and you want to go back
    to the place you''ve just been (or go back to the section in the code you came
    from). Simply press *Ctrl* + *-*, and that will warp you back to the location
    in the code you were at last. To warp forward to the location you were at before
    you pressed *Ctrl* + *-*, press *Ctrl* + *Shift* + *-*. To warp back, the previous
    location should be more than 10 lines away, or in a different file. These correspond
    to the Forward and Back menu buttons in the toolbar:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 比如，例如，你正在一个地方编辑代码，然后你想回到你刚刚去过的地方（或者回到你来自的代码部分）。只需按下*Ctrl* + *-*，就会将你传送回到你上次所在的代码位置。要向前传送到你按下*Ctrl*
    + *-*之前所在的位置，按下*Ctrl* + *Shift* + *-*。要向后传送，前一个位置应该超过10行，或者在不同的文件中。这对应于工具栏中的前进和后退菜单按钮：
- en: '![How to do it...](img/00029.jpeg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/00029.jpeg)'
- en: Tip
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The Back and Forward navigation buttons in the toolbar, which correspond to
    the *Ctrl* + *-* and *Ctrl* + *Shift* + *-* shortcuts respectively.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 工具栏中的后退和前进导航按钮，分别对应*Ctrl* + *-*和*Ctrl* + *Shift* + *-*的快捷键。
- en: Press *Ctrl* + *W* to highlight a single word.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下*Ctrl* + *W*可以高亮显示一个单词。
- en: Press and hold *Ctrl* + *Shift* + right arrow (or left arrow) (not *Shift* +
    right arrow) just to move to the right and left of the cursor, selecting entire
    words.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按住*Ctrl* + *Shift* + 右箭头（或左箭头）（不是*Shift* + 右箭头）来移动到光标的右侧和左侧，选择整个单词。
- en: Press *Ctrl* + *C* to copy text, *Ctrl* + *X* to cut text, and *Ctrl* + *V*
    to paste text.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下*Ctrl* + *C*复制文本，*Ctrl* + *X*剪切文本，*Ctrl* + *V*粘贴文本。
- en: '**Clipboard ring**: The clipboard ring is a kind of a reference to the fact
    that Visual Studio maintains a stack of the last copy operations. By pressing
    *Ctrl* + *C*, you push the text that you are copying into an effective stack.
    Pressing *Ctrl* + *C* a second time on different text pushes that text into the
    **Clipboard Stack**. For example, in the following diagram, we pressed *Ctrl*
    + *C* on the word **cyclic** first, then *Ctrl* + *C* on the word **paste** afterwards.![How
    to do it...](img/00030.jpeg)'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**剪贴板环**: 剪贴板环是对Visual Studio维护的最后一次复制操作堆栈的一种引用。通过按下*Ctrl* + *C*，你将正在复制的文本推送到一个有效的堆栈中。在不同的文本上再次按下*Ctrl*
    + *C*，将该文本推送到**剪贴板堆栈**中。例如，在下图中，我们先是在单词**cyclic**上按下了*Ctrl* + *C*，然后在单词**paste**上按下了*Ctrl*
    + *C*。![操作步骤...](img/00030.jpeg)'
- en: As you know, pressing *Ctrl* + *V* pastes the top item in the stack. Pressing
    *Ctrl* + *Shift* + *V* accesses a very long history of all the items ever copied
    in that session, that is, items underneath the top item in the stack. After you
    exhaust the list of items, the list wraps back to the top item in the stack. This
    is an odd feature, but you may find it useful occasionally.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所知，按下*Ctrl* + *V*会粘贴堆栈中的顶部项目。按下*Ctrl* + *Shift* + *V*会访问在该会话中曾经复制的所有项目的非常长的历史记录，也就是堆栈顶部项目下面的项目。在你用尽项目列表后，列表会回到堆栈顶部的项目。这是一个奇怪的功能，但你可能偶尔会发现它有用。
- en: '*Ctrl* + *M*, *Ctrl* + *M* collapses a code section.![How to do it...](img/00031.jpeg)'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*Ctrl* + *M*，*Ctrl* + *M*折叠代码部分。![操作步骤...](img/00031.jpeg)'
- en: How it works...
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作原理...
- en: Keyboard shortcuts allow you to speed up work in the code editor by reducing
    the number of mouse reaches that you have to perform in a coding session.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 键盘快捷键可以通过减少编码会话中必须执行的鼠标操作次数来加快代码编辑器中的工作速度。
- en: Extended mouse usage in Visual Studio
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Visual Studio中扩展鼠标使用
- en: The mouse is a pretty handy tool for selecting text. In this section, we'll
    highlight how to use the mouse in an advanced way for quick edits to your code's
    text.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 鼠标是一个非常方便的选择文本的工具。在这一部分，我们将介绍如何以一种高级的方式使用鼠标快速编辑代码文本。
- en: How to do it...
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: Hold down the *Ctrl* key while clicking to select an entire word.![How to do
    it...](img/00032.jpeg)
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按住*Ctrl*键单击以选择整个单词。![操作步骤...](img/00032.jpeg)
- en: Hold down the *Alt* key to select a box of text (*Alt* + Left Click + Drag).![How
    to do it...](img/00033.jpeg)
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按住*Alt*键选择文本框（*Alt* + 左键单击 + 拖动）。![操作步骤...](img/00033.jpeg)
- en: You can then either cut, copy, or overwrite the box-shaped text area.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你可以剪切、复制或覆盖方框形的文本区域。
- en: How it works...
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作原理...
- en: Mouse clicking alone can be tedious, but with the help of *Ctrl* + *Alt*, it
    becomes quite cool. Try *Alt* + Left Click + Drag for selecting a row of text,
    then typing as well. The characters you type will be repeated in rows.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 单纯的鼠标点击可能很繁琐，但通过*Ctrl* + *Alt*的帮助，它变得非常酷。尝试*Alt* + 左键单击 + 拖动来选择一行文本，然后进行输入。你输入的字符将在行中重复出现。
- en: UE4 – installation
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UE4 – 安装
- en: There are a number of steps to follow to install and configure UE4 properly.
    In this recipe, we'll walk through the correct installation and setup of the engine.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 安装和配置UE4需要遵循一系列步骤。在这个教程中，我们将详细介绍引擎的正确安装和设置。
- en: Getting ready
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: UE4 takes up quite a few GB of space, so you should have at least 20 GB or so
    free for the installation on the target drive.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: UE4需要相当多的GB空间，所以你应该在目标驱动器上至少有20GB左右的空间来进行安装。
- en: How to do it...
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: Visit unrealengine.com and download it. Sign up for an account if required.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问unrealengine.com并下载它。如果需要，注册一个账户。
- en: Run the installer for the Epic Games Launcher Program by double-clicking the
    `EpicGamesLauncherInstaller-x.x.x-xxx.msi` installer. Install it in the default
    location.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过双击`EpicGamesLauncherInstaller-x.x.x-xxx.msi`安装程序来运行Epic Games Launcher程序的安装程序。在默认位置安装它。
- en: Once the Epic Games Launcher program is installed, open it by double-clicking
    its icon on your desktop or in the Start menu.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Epic Games Launcher程序后，通过双击桌面上的图标或开始菜单中的图标打开它。
- en: Browse the start page and take a look around. Eventually, you will need to install
    an engine. Click on the large orange **Install Engine** button on the top-left
    side from the **UE4** tab, as shown in the following image:![How to do it...](img/00034.jpeg)
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览起始页面，四处看看。最终，你需要安装一个引擎。点击**UE4**选项卡顶部左侧的大橙色**安装引擎**按钮，如下图所示：![操作步骤...](img/00034.jpeg)
- en: A pop-up dialog will show the components that can be installed. Select the components
    you'd like to install. The recommendation is to begin by installing the first
    three components (**Core Components**, **Starter Content**, and **Templates and
    Feature Packs**). You can leave out the **Editor symbols for debugging** component
    if you will not be using it.![How to do it...](img/00035.jpeg)
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 弹出对话框将显示可以安装的组件。选择您想要安装的组件。建议首先安装前三个组件（**核心组件**，**入门内容**和**模板和功能包**）。如果不打算使用，可以不安装**用于调试的编辑符号**组件。![如何操作...](img/00035.jpeg)
- en: After the engine has installed, the **Install Engine** button will change to
    a **Launch Engine** button.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 引擎安装完成后，**安装引擎**按钮将变为**启动引擎**按钮。
- en: How it works...
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The Epic Games Launcher is the program that you need to start up the engine
    itself. It keeps a copy of all your projects and libraries in the **Library**
    tab.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: Epic Games Launcher是您需要启动引擎本身的程序。它在**库**选项卡中保存了所有您的项目和库的副本。
- en: There's more...
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Try downloading some of the free library packages in the **Library** | **Vault**
    section. For that, click the **Library** item on the left side, and scroll down
    until you see **Vault**, underneath **My Projects**.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试在**库** | **保险库**部分下载一些免费的库包。为此，请单击左侧的**库**项目，并向下滚动，直到看到**保险库**，位于**我的项目**下方。
- en: UE4 – first project
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UE4 - 第一个项目
- en: Setting up a Project within UE4 takes a number of steps. It is important to
    get your options correct so that you can have the setup that you like, so carefully
    follow this recipe when constructing your first project.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在UE4中设置项目需要多个步骤。重要的是要正确选择选项，以便您可以获得自己喜欢的设置，因此在构建第一个项目时，请仔细遵循这个配方。
- en: Each project that you create within UE4 takes up at least 1 GB of space or so,
    so you should decide whether you want your created projects on the same target
    drive, or on an external or separate HDD.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在UE4中创建的每个项目至少占用1GB左右的空间，因此您应该决定是否要将创建的项目放在同一目标驱动器上，还是放在外部或单独的硬盘驱动器上。
- en: How to do it...
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: From the Epic Games Launcher, click on the **Launch Unreal Engine 4.11.2** button.
    Once you are inside the engine, an option to create a new project or load an existing
    one will presents itself.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Epic Games Launcher中，单击**启动虚幻引擎4.11.2**按钮。一旦您进入引擎，将出现创建新项目或加载现有项目的选项。
- en: Select the **New Project** tab.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**新项目**选项卡。
- en: Decide whether you will be using C++ to code your project, or Blueprints exclusively.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 决定您是否将使用C++来编写项目，还是仅使用蓝图。
- en: If using Blueprints exclusively, make your selection of a template to use from
    the **Blueprint** tab.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果仅使用蓝图，从**蓝图**选项卡中选择要使用的模板。
- en: If using C++ in addition to Blueprints to construct your project, select the
    project template to construct your project based on the **C++** tab.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果除了蓝图之外还要使用C++来构建项目，请从**C++**选项卡中选择项目模板来构建项目。
- en: If you're not sure what template to base your code on, BASIC Code is an excellent
    starting point for any C++ project (or Blank for a Blueprint-exclusive project).
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果不确定要基于哪个模板编写代码，BASIC Code是任何C++项目的绝佳起点（或者对于仅蓝图的项目，选择Blank）。
- en: 'Take a look at the three icons that appear beneath the template listing. There
    are three options here to configure:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看模板列表下方出现的三个图标。这里有三个配置选项：
- en: You can choose to target Desktop or Mobile applications.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以选择目标桌面或移动应用程序。
- en: You have an option to alter the quality settings (the picture of a plant with
    magic). But you probably don't need to alter these. The quality settings are reconfigurable
    under **Engine** | **Engine Scalability Settings** anyway.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以选择修改质量设置（带有魔法植物的图片）。但您可能不需要修改这些。质量设置在**引擎** | **引擎可扩展性设置**下是可重新配置的。
- en: The last option is whether to include **Starter Content** with the project or
    not. You can probably use the **Starter Content** package in your project. It
    has some excellent materials and textures available within it.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一个选项是是否将**入门内容**包含在项目中。您可能可以在项目中使用**入门内容**包。它包含一些出色的材料和纹理。
- en: Tip
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you don't like the **Starter Content** package, try the packages in the UE4
    Marketplace. There is some excellent free content there, including the **GameTextures
    Material Pack**.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不喜欢**入门内容**包，请尝试UE4市场中的包。那里有一些出色的免费内容，包括**GameTextures Material Pack**。
- en: Select the drive and folder in which you will save your project. Keep in mind
    that each project is roughly 1 GB in size, and you will need at least that much
    space on the destination drive.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择要保存项目的驱动器和文件夹。请记住，每个项目大约占用1GB的空间，您需要目标驱动器上至少有这么多的空间。
- en: Name your project. Preferably name it something unique and specific to what
    you are planning on creating.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给您的项目命名。最好将其命名为与您计划创建的内容相关的独特名称。
- en: Hit **Create**. Both the UE4 Editor and Visual Studio 2015 windows should pop
    up, enabling you to edit your project.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建**。UE4编辑器和Visual Studio 2015窗口都应该弹出，使您能够编辑您的项目。
- en: Tip
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'In the future, keep in mind that you can open the Visual Studio 2015 Solution
    via one of the two following methods:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 将来，请记住，您可以通过以下两种方法之一打开Visual Studio 2015 Solution：
- en: Via your local file explorer. Navigate to the root of where your project is
    stored, and double-click on the `ProjectName.sln` file.
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过您的本地文件浏览器。导航到项目存储的根目录，并双击`ProjectName.sln`文件。
- en: From UE4, click on **File** | **Open Visual Studio**.
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从UE4中，单击**文件** | **打开Visual Studio**。
- en: UE4 – creating your first level
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UE4 - 创建您的第一个级别
- en: Creating levels in UE4 is easy and facilitated by a great UI all around. In
    this recipe, we'll outline basic editor use and describe how to construct your
    first level once you have your first project launched.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在UE4中创建级别非常容易，并且通过一个很好的UI得到了很好的促进。在这个配方中，我们将概述基本的编辑器使用，并描述一旦您启动了第一个项目后如何构建您的第一个级别。
- en: Getting ready
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Complete the previous recipe, *UE4 – First Project*. Once you have a project
    constructed, we can proceed with creating a level.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 完成上一个配方，*UE4 - 第一个项目*。一旦您构建了一个项目，我们就可以继续创建一个级别。
- en: How to do it…
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The default level that gets set up when you start a new project will contain
    some default geometry and scenery. You don't need to start with this starter stuff,
    however. If you don't want to build from it, you can delete it, or create a new
    level.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在开始新项目时设置的默认关卡将包含一些默认几何图形和风景。但是，您不需要从这些入门内容开始。如果您不想从中构建，可以删除它，或者创建一个新关卡。
- en: To create a new level, click **File** | **New Level…** and select to create
    a level with a background sky (**Default**), or without a background sky (**Empty
    Level**).
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建一个新关卡，请单击**文件** | **新建关卡…**，然后选择创建一个带有背景天空（**默认**）或不带背景天空（**空关卡**）的关卡。
- en: Tip
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you choose to create a level without a background sky, keep in mind that
    you must add a **light** to it to see the geometry you add to it effectively.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 如果选择创建一个不带背景天空的关卡，请记住您必须向其添加**灯光**，以有效地查看您添加到其中的几何图形。
- en: If you loaded the **Starter Content** on your project's creation (or some other
    content), then you can use the **Content Browser** to pull content into your level.
    Simply drag and drop instances of your content from the **Content Browser** into
    the level, save, and launch them.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果在项目创建时加载了**入门内容**（或其他内容），那么您可以使用**内容浏览器**将内容拉入您的关卡。只需从**内容浏览器**将您的内容实例拖放到关卡中，保存并启动它们。
- en: Add some geometry to your level using the **Modes** panel (**Window** | **Modes**).
    Be sure to click on the picture of a light bulb and cube to access the placeable
    geometry. You can also add lights via the **Modes** tab by clicking on the **Lights**
    subtab on the left-hand side of the **Modes** tab.![How to do it…](img/00036.jpeg)
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**模式**面板（**窗口** | **模式**）向您的关卡添加一些几何图形。确保单击灯泡和立方体的图片以访问可放置的几何图形。您还可以通过单击**模式**选项卡上左侧的**灯光**子选项卡来添加灯光。![如何做…](img/00036.jpeg)
- en: Note
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The **Modes** panel contains two useful items for level construction: some
    sample geometry to add (cubes and spheres and the like) as well as a panel full
    of lights. Try these out and experiment to begin laying out your level.'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '**模式**面板包含两个有用的项目，用于构建关卡：一些示例几何图形（立方体和球等）以及一个充满灯光的面板。尝试这些并进行实验，开始布置您的关卡。'
- en: UE4 – logging with UE_LOG
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UE4 - 使用UE_LOG记录
- en: Logging is extremely important for outputting internal game data. Using log
    tools lets you print information into a handy little **Output Log** window in
    the UE4 editor.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 记录对于输出内部游戏数据非常重要。使用日志工具可以让您将信息打印到UE4编辑器中一个方便的**输出日志**窗口中。
- en: Getting ready
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: When coding, we may sometimes want to send some debug information out to the
    UE log window. This is possible using the `UE_LOG` macro. Log messages are an
    extremely important and convenient way to keep track of information in your program
    as you are developing it.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在编码时，有时我们可能希望将一些调试信息发送到UE日志窗口。使用`UE_LOG`宏是可能的。日志消息是一种非常重要和方便的方式，可以在开发程序时跟踪信息。
- en: How to do it...
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'In your code, enter a line of code using the form:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的代码中，输入一行代码，使用以下形式：
- en: '[PRE1]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Turn on the **Output Log** inside the UE4 editor to see your log messages printed
    in that window as your program is running.![How to do it...](img/00037.jpeg)
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在UE4编辑器中打开**输出日志**，以便在程序运行时在该窗口中看到打印的日志消息。![如何做…](img/00037.jpeg)
- en: How it works...
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'The `UE_LOG` macro accepts a minimum of three parameters:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`UE_LOG`宏接受至少三个参数：'
- en: The Log category (we used `LogTemp` here to denote a log message in a temporary
    log)
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志类别（我们在这里使用`LogTemp`来表示临时日志中的日志消息）
- en: The Log level (we used a warning here to denote a log message printed in yellow
    warning text)
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志级别（我们在这里使用警告来表示以黄色警告文本打印的日志消息）
- en: A string for the actual text of the log message itself
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于日志消息文本的实际文本的字符串
- en: Do not forget the `TEXT()` macro around your log message text! It promotes the
    enclosed text to Unicode (it prepends an L) when the compiler is set to run with
    Unicode on.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记在日志消息文本周围使用`TEXT()`宏！它会将封闭的文本提升为Unicode（它会在前面加上L），当编译器设置为使用Unicode时。
- en: '`UE_LOG` also accepts a variable number of arguments, just like `printf()`
    from the C programming language.'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '`UE_LOG`也接受可变数量的参数，就像C编程语言中的`printf()`一样。'
- en: '[PRE2]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: There will be an asterisk `*` just before `FString` variables when using `UE_LOG`
    to **dereference** the `FString` to a regular C-style `TCHAR` pointer.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`UE_LOG`时，`FString`变量前面会有一个星号`*`，用于**取消引用**`FString`到常规的C样式`TCHAR`指针。
- en: Tip
  id: totrans-221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '`TCHAR` is usually defined as a variable type `where`, if Unicode is being
    used in the compile, the `TCHAR` resolves to `wchar_t`. If Unicode is off (compiler
    switch `_UNICODE` not defined), then `TCHAR` resolves to simply char.'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '`TCHAR`通常被定义为一个变量类型，如果编译中使用了Unicode，则`TCHAR`解析为`wchar_t`。如果关闭了Unicode（编译器开关`_UNICODE`未定义），那么`TCHAR`解析为简单的char。'
- en: Don't forget to clear your log messages after you no longer need them from the
    source!
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在不再需要来自源的日志消息时，不要忘记清除它们！
- en: UE4 – making an FString from FStrings and other variables
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UE4 - 从FStrings和其他变量创建FString
- en: When coding in UE4, you often want to construct a string from variables. This
    is pretty easy using the `FString::Printf` or `FString::Format` functions.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在UE4编码时，通常希望从变量构造一个字符串。使用`FString::Printf`或`FString::Format`函数非常容易。
- en: Getting ready
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this, you should have an existing project into which you can enter some
    UE4 C++ code. Putting variables into a string is possible via **printing**. It
    may be counterintuitive to print into a string, but you can't just concatenate
    variables together, and hope that they will automatically convert to string, as
    in some languages such as JavaScript.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，您应该有一个现有的项目，可以在其中输入一些UE4 C++代码。通过**打印**可以将变量放入字符串中。将变量打印到字符串中可能有些反直觉，但您不能简单地将变量连接在一起，希望它们会自动转换为字符串，就像JavaScript等某些语言中那样。
- en: How to do it…
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Using `FString::Printf()`:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`FString::Printf()`：
- en: Consider the variables you'd like printed into your string.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 考虑您想要打印到字符串中的变量。
- en: Open and take a look at a reference page of the `printf` format specifiers,
    such as [http://en.cppreference.com/w/cpp/io/c/fprintf](http://en.cppreference.com/w/cpp/io/c/fprintf).
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开并查看`printf`格式说明符的参考页面，例如[http://en.cppreference.com/w/cpp/io/c/fprintf](http://en.cppreference.com/w/cpp/io/c/fprintf)。
- en: 'Try code such as the following:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试以下代码：
- en: '[PRE3]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Notice how the preceding code block uses the format specifiers precisely as
    the traditional `printf` function does. In the preceding example, we used `%s`
    to place a string in the formatted string, and `%d` to place an integer in the
    formatted string. Different format specifiers exist for different types of variables,
    and you should look them up on a site such as cppreference.com.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 注意前面的代码块如何精确地使用格式说明符，就像传统的`printf`函数一样。在前面的示例中，我们使用`%s`将一个字符串放入格式化的字符串中，使用`%d`将一个整数放入格式化的字符串中。不同类型的变量存在不同的格式说明符，你应该在cppreference.com等网站上查找它们。
- en: 'Using `FString::Format()`. Write code in the following form:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`FString::Format()`。以以下形式编写代码：
- en: '[PRE4]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: With `FString::Format()`, instead of using correct format specifiers, we use
    simple integers and a `TArray` of `FStringFormatArg` instead. The `FstringFormatArg`
    helps `FString::Format()` deduce the type of variable to put in the string.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`FString::Format()`，而不是使用正确的格式说明符，我们使用简单的整数和`FStringFormatArg`的`TArray`。`FstringFormatArg`帮助`FString::Format()`推断要放入字符串的变量类型。
- en: Project management on GitHub – getting your Source Control
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitHub上的项目管理-获取你的源代码控制
- en: A very important thing to do for your project as you're developing it is to
    generate a timeline history as you're working. To do so, you need to back up your
    source code periodically. A great tool for doing so is Git. Git allows you to
    park changes (commits) into a repository online on a remote server so that your
    code's development history is documented and preserved on that remote server.
    If your local copy gets damaged somehow, you can always recover from the online
    backups. This timeline-history of your codebase's development is called **Source
    Control**.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发项目时非常重要的一件事是在工作时生成时间线历史。为此，你需要定期备份你的源代码。Git是一个很好的工具，可以做到这一点。Git允许你将更改（提交）存储到远程服务器上的在线存储库中，以便你的代码的开发历史被记录并保存在远程服务器上。如果你的本地副本出现了损坏，你总是可以从在线备份中恢复。你的代码库开发的时间线历史被称为**源代码控制**。
- en: Getting ready
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'There are a couple of free services that offer online source backups. Some
    of the free alternatives for storing your data include:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些免费的在线源备份服务。一些免费的存储数据的替代方案包括：
- en: '**Visualstudio.com**: limited/private sharing of your repository'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Visualstudio.com**：有限/私人分享你的存储库'
- en: '**github.com**: unlimited public sharing of your repositories'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**github.com**：无限公开分享你的存储库'
- en: Visualstudio.com is great for when you want some privacy for your project for
    free, while GitHub is great when you want to share your project with lots of users
    for free. Visualstudio.com also offers some very good workboarding and planning
    features, which we will use later in this text (GitHub also offers a competing
    Issue Tracker, which we'll discuss later on as well).
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: Visualstudio.com非常适合免费为你的项目提供一些隐私，而GitHub非常适合免费与大量用户分享你的项目。Visualstudio.com还提供一些非常好的工作板和规划功能，我们稍后会在本文中使用（GitHub也提供竞争对手问题跟踪器，我们稍后也会讨论）。
- en: The website you choose depends mostly on how you plan on sharing your code.
    In this text, we will use GitHub for source code storage, since we need to share
    our code with a large number of users (you!)
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 你选择的网站主要取决于你计划如何分享你的代码。在本文中，我们将使用GitHub进行源代码存储，因为我们需要与大量用户（包括你！）分享我们的代码。
- en: How to do it...
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Sign up for a GitHub account at [https://github.com](https://github.com). Sign
    into your GitHub account using the **Team Explorer** menu (**View** | **Team Explorer**).
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[https://github.com](https://github.com)注册一个GitHub账户。使用**Team Explorer**菜单（**View**
    | **Team Explorer**）登录到你的GitHub账户。
- en: Once you have the **Team Explorer** open, you can sign into your GitHub account
    using the button that appears in the **Team Explorer** window.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦打开**Team Explorer**，你可以使用**Team Explorer**窗口中出现的按钮登录到你的GitHub账户。
- en: After you've signed in, you should gain the capability to **Clone** and **Create**
    repositories. These options will appear right underneath the GitHub menu in the
    **Team Explorer**.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你登录后，你应该获得**Clone**和**Create**存储库的能力。这些选项将出现在**Team Explorer**中GitHub菜单的正下方。
- en: From here, we want to create our first repository. Hit the **Create** button,
    and name your repository in the window that comes up.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从这里，我们想要创建我们的第一个存储库。点击**Create**按钮，在弹出的窗口中命名你的存储库。
- en: Tip
  id: totrans-251
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: When creating your project, take care to select the **VisualStudio** option
    from the `.gitignore` options menu. This will cause Git to ignore the Visual Studio-specific
    files that you don't want included in your repository, such as the Build and Release
    directories.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建项目时，要小心从`.gitignore`选项菜单中选择**VisualStudio**选项。这将导致Git忽略你不想包含在存储库中的Visual
    Studio特定文件，例如构建和发布目录。
- en: Now you have a repository! The repository is initialized on GitHub. We just
    have to put some code into it.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你有了一个存储库！存储库在GitHub上初始化。我们只需要把一些代码放进去。
- en: Open up the Epic Games Launcher, and create a project to put into the repository.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Epic Games Launcher，并创建一个要放入存储库的项目。
- en: Open the C++ project in Visual Studio 2015, and right-click on Solution. Select
    **Add Solution to Source Control** from the context menu that appears. The dialog
    that appears will ask whether you want to use **Git** or **TFVC**.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio 2015中打开C++项目，右键单击解决方案。从出现的上下文菜单中选择**Add Solution to Source Control**。出现的对话框会询问你是否要使用**Git**还是**TFVC**。
- en: Tip
  id: totrans-256
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you use **Git** for your source control, then you can host on either github.com
    or Visualstudio.com.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用**Git**进行源代码控制，那么你可以托管在github.com或Visualstudio.com上。
- en: After you add Git Source Control to the project, take a look at **Team Explorer**
    again. From that window, you should enter a brief message, then click on the **Commit**
    button.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在将Git源代码控制添加到项目后，再次查看**Team Explorer**。从那个窗口，你应该输入一个简短的消息，然后点击**Commit**按钮。
- en: How it works...
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Git repositories are important for backing up copies of your code and project
    files as your project evolves. There are many commands within Git to browse the
    project history (try the Git GUI tool), see what changes you've made since the
    last commit (`git diff`), or move backward and forward through the Git history
    (`git checkout commit-hash-id`).
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: Git存储库对于备份代码和项目文件的副本在项目发展过程中非常重要。Git中有许多命令可用于浏览项目历史记录（尝试Git GUI工具），查看自上次提交以来的更改（`git
    diff`），或在Git历史记录中向后和向前移动（`git checkout commit-hash-id`）。
- en: Project management on GitHub – using the Issue Tracker
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitHub上的项目管理-使用问题跟踪器
- en: Keeping track of you project's progress, features, and bugs is extremely important.
    The GitHub Issue Tracker will enable you to do this.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 跟踪您项目的进展、功能和错误非常重要。GitHub问题跟踪器将使您能够做到这一点。
- en: Getting ready
  id: totrans-263
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Keeping track of your project's planned features and running issues is important.
    GitHub's Issue Tracker can be used to create lists of features you'd like to add
    to your project as well as bugs you need to fix at some time in the future.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 跟踪您项目计划的功能和运行问题非常重要。GitHub的问题跟踪器可用于创建您想要添加到项目中的功能列表，以及您需要在将来某个时候修复的错误。
- en: How to do it...
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: To add an issue to your Issue Tracker, first select the repository that you'd
    like to edit by going to the front page of GitHub and selecting the
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要向您的问题跟踪器添加问题，首先选择您想要编辑的存储库，方法是转到GitHub的首页并选择
- en: '`The box into which you enter the description of your bug or feature supports
    **Markdown**`**. Markdown is a simplified HTML-like markup language that lets
    you quickly write HTML-like syntax with ease. Examples of some markdown syntax
    are as follows:'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`您输入错误或功能描述的框支持**Markdown**`**。Markdown是一种简化的类似HTML的标记语言，让您可以轻松快速地编写类似HTML的语法。以下是一些markdown语法的示例：'
- en: '[PRE5]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Tip
  id: totrans-269
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you want to learn more about Markdown's syntax, check out [https://daringfireball.net/projects/markdown/syntax](https://daringfireball.net/projects/markdown/syntax).**
    *   **You can further mark the issue as either a bug, enhancement (feature), or
    any other label you like. Customizing labels is possible via the **Issues** |
    **Labels** link:![How to do it...](img/00041.jpeg)***   **From there, you can
    edit, change the color of, or delete your labels. I deleted all the stock labels,
    and replaced the word **enhancement** with `feature`, as seen in the following
    two screenshots:![How to do it...](img/00042.jpeg)![How to do it...](img/00043.jpeg)***   **Once
    you've fully customized your labels, your GitHub **Issue Tracker** is much easier
    to navigate. Prioritize issues by tagging with the appropriate labels.** **##
    How it works...
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解更多关于Markdown语法的信息，请查看[https://daringfireball.net/projects/markdown/syntax](https://daringfireball.net/projects/markdown/syntax)。**
    * **您还可以将问题标记为错误、增强（功能）或其他任何您喜欢的标签。通过**问题** | **标签**链接可以自定义标签：![如何做...](img/00041.jpeg)***
    **从那里，您可以编辑、更改标签的颜色，或删除您的标签。我删除了所有的默认标签，并用`feature`替换了**增强**一词，如下两个屏幕截图所示：![如何做...](img/00042.jpeg)![如何做...](img/00043.jpeg)***
    **一旦您完全自定义了您的标签，您的GitHub **问题跟踪器**就会更容易导航。通过使用适当的标签对问题进行优先处理。** **## 它是如何工作的...
- en: GitHub's Issue Tracker is a fantastic way to track bugs and features in your
    project. Using it not only organizes your workflow, but also maintains an excellent
    history of the work done on the project.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub的问题跟踪器是跟踪项目中的错误和功能的绝佳方式。使用它不仅可以组织您的工作流程，还可以保持项目上所做工作的出色历史记录。
- en: See also
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You should also check out the Wiki feature, which allows you to document your
    source code
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你还应该查看Wiki功能，它允许你记录你的源代码
- en: Project management on VisualStudio.com – managing the tasks in your project
  id: totrans-274
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在VisualStudio.com上的项目管理-管理项目中的任务
- en: High-level management of your project is usually done using a planning tool.
    GitHub's **Issue Tracker** may meet your needs, but if you're looking for more,
    Microsoft's Visual Studio Team Services offers planning tools for **Scrum** and
    **Kanban** style programming assignment of tasks (Features, Bugs, and so on).
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 通常使用规划工具进行项目的高级管理。GitHub的**问题跟踪器**可能满足您的需求，但如果您想要更多，Microsoft的Visual Studio
    Team Services提供了**Scrum**和**Kanban**风格编程任务（功能，错误等）的规划工具。
- en: Using this tool is a great way to organize your tasks to make sure things get
    done on time, and to get used to an industrial-standard workflow. When you sign
    up for Visual Studio's Community Edition during setup, your account includes free
    use of these tools.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此工具是组织任务的绝佳方式，以确保按时完成任务，并适应工业标准的工作流程。在安装过程中注册Visual Studio的社区版时，您的帐户将包括免费使用这些工具。
- en: How to do it...
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: In this section, we'll describe how to use the **Workboard** feature on Visualstudio.com
    to plan a few simple tasks.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将描述如何使用Visualstudio.com上的**Workboard**功能来规划一些简单的任务。
- en: To create your own project Workboard, go to your account at Visualstudio.com.
    Log in, and then select the **Overview** tab. Under **Recent projects & teams
    title**, select the **New** link.![How to do it...](img/00044.jpeg)
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建自己的项目Workboard，请转到Visualstudio.com上的您的帐户。登录，然后选择**概述**选项卡。在**最近的项目和团队标题**下，选择**新建**链接。![如何做...](img/00044.jpeg)
- en: Add a **Project name** and **Description** to your project. After you've named
    your project (I've named mine `Workboards`), click on **Create project**. You
    will wait a second or two for project creation to complete, then hit the **Navigate
    to project** button in the next dialog.![How to do it...](img/00045.jpeg)
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向您的项目添加**项目名称**和**描述**。在命名您的项目之后（我命名为`Workboards`），单击**创建项目**。您将等待一两秒钟以完成项目创建，然后在下一个对话框中单击**导航到项目**按钮。![如何做...](img/00045.jpeg)
- en: The next screen that is shown allows you to navigate to the **Workboards** area.
    Click on **Manage Work**.![How to do it...](img/00046.jpeg)
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一个显示的屏幕允许您导航到**Workboards**区域。单击**管理工作**。![如何做...](img/00046.jpeg)
- en: 'The **Manage Work** screen is a Kanban styled (read: prioritized) task queue
    of things to do in your project. You can hit the **New item** button to add new
    items to your list of things to do.![How to do it...](img/00047.jpeg)'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**管理工作**屏幕是项目中要做的事情的看板式（即：优先级）任务队列。您可以点击**新项目**按钮来添加新项目到您的待办事项列表中。![如何做…](img/00047.jpeg)'
- en: Tip
  id: totrans-283
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: As soon as you add something to your to-do list, it is called being part of
    your backlog. In Kanban, you're always behind! If you're a manager, you never
    want an empty backlog.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您将某些东西添加到您的待办事项列表中，它就被称为是您的待办事项的一部分。在看板中，您总是落后！如果您是经理，您永远不希望待办事项为空。
- en: How it works…
  id: totrans-285
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: Each item on your Board's backlog is called a **User Story**. A User Story is
    an Agile software development term, and each User Story is supposed to describe
    a need of a particular end user. For example, in the preceding User Story, the
    need is to have visual graphics, and the User Story describes that graphics (sprites)
    must be created to satisfy this user requirement.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 您看板的待办事项中的每个项目都被称为**用户故事**。用户故事是敏捷软件开发术语，每个用户故事都应该描述特定最终用户的需求。例如，在前面的用户故事中，需求是有可视图形，用户故事描述了必须创建图形（精灵）来满足这个用户需求。
- en: 'User stories will often have a specific format:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 用户故事通常有一个特定的格式：
- en: Note
  id: totrans-288
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As a <someone>, I want <this> so that <advantage>.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 作为<某人>，我想要<这样做>，这样我就可以<获得好处>。
- en: 'For example:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: Note
  id: totrans-291
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As a <player of the game> I want to <reorganize items> so that I can <set hotkeys
    to slots that I desire>.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 作为<游戏玩家>，我想要<重新组织物品>，这样我就可以<将热键设置为我想要的槽位>。
- en: On the Workboard, you'll have a bunch of user stories. I have placed a few user
    stories earlier so we can play with them.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 在工作板上，您将有许多用户故事。我之前放置了一些用户故事，所以我们可以与它们一起玩。
- en: Once your board is filled with user stories, they will all sit in the New vertical
    column. As you start work on or make progress on a particular User Story, you
    can drag it horizontally from **New** to **Active**, then finally to **Resolved**
    and **Closed** when the User Story is complete.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的看板上充满了用户故事，它们都将位于新的垂直列中。当您开始或者在特定用户故事上取得进展时，您可以将其从**新**水平拖动到**活跃**，最后到**已解决**和**已关闭**，当用户故事完成时。
- en: '![How it works…](img/00048.jpeg)'
  id: totrans-295
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理…](img/00048.jpeg)'
- en: Project management on VisualStudio.com – constructing user stories and tasks
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在VisualStudio.com上进行项目管理 - 构建用户故事和任务
- en: From the Scrum point of view, a User Story is grouping of tasks that need to
    be done. A group of user stories can be collected into a **Feature**, and a group
    of Features can be gathered together into what is called an **Epic** . VisualStudio.com
    organizes User Story creation very well so that it's easy to construct and plan
    the completion of any particular task (user story). In this recipe, we'll describe
    how to assemble and put together user stories.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 从Scrum的角度来看，用户故事是需要完成的任务的分组。一组用户故事可以被收集到一个**特性**中，一组特性可以被聚集到一个称为**史诗**的东西中。VisualStudio.com非常好地组织了用户故事的创建，以便轻松构建和规划完成任何特定任务（用户故事）。在这个教程中，我们将描述如何组装和整理用户故事。
- en: Getting ready
  id: totrans-298
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Every item entered into VisualStudio.com's project management suite should always
    be a feature that somebody wants to be in the software. User story creation is
    a fun, easy, and exciting way to group together and mete out bunches of tasks
    to your programmers as work to be done. Log in to your VisualStudio.com account
    now, edit one of your projects, and begin using this feature.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 在VisualStudio.com的项目管理套件中输入的每个项目都应该是某人希望出现在软件中的特性。用户故事的创建是一种有趣、简单和令人兴奋的方式，可以将一堆任务分组并分配给您的程序员作为要完成的工作。立即登录到您的VisualStudio.com帐户，编辑其中一个项目，并开始使用此功能。
- en: How to do it…
  id: totrans-300
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: From the VisualStudio.com **Team Services** landing page, navigate to the project
    into which you want to enter some new work to be done. All of your Projects can
    be found if you click on **Browse** under the **Recent projects & teams** heading.![How
    to do it…](img/00049.jpeg)
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从VisualStudio.com的**团队服务**首页，导航到您想要输入一些新工作的项目。如果您点击**最近的项目和团队**下的**浏览**，您可以找到所有的项目。![如何做…](img/00049.jpeg)
- en: Select the project that you want to work with and hit **Navigate**.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您想要使用的项目并点击**导航**。
- en: 'Tasks inside Visualstudio.com take place inside of one of the three categories
    of super task:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Visualstudio.com中的任务发生在三种超级任务类别之一中：
- en: User Story
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户故事
- en: Features
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特性
- en: Epics
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 史诗
- en: Tip
  id: totrans-307
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: User Stories, Features, and Epics are just organizational units for work. An
    Epic contains many Features. A Feature contains many User Stories, and a User
    Story contains many Tasks.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 用户故事，特性和史诗只是工作的组织单位。史诗包含许多特性。特性包含许多用户故事，用户故事包含许多任务。
- en: 'By default, **Epics** are not shown. You can display **Epics** by going to
    Settings (the gear icon on the right side of the screen). Then navigate to **General**
    | **Backlogs**. Under the section that says **See only the backlogs your team
    manages**, select to display all three flavors of Backlog: **Epics**, **Features**,
    and **Stories**.'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，**史诗**不会显示。您可以通过转到设置（屏幕右侧的齿轮图标）来显示**史诗**。然后导航到**常规** | **待办事项**。在**仅查看您的团队管理的待办事项**部分下，选择显示所有三种待办事项：**史诗**，**特性**和**故事**。
- en: 'There are now four navigation steps to perform before you can enter your first
    task (User Story) into the **Backlog**:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您可以将第一个任务（用户故事）输入到**待办事项**之前，现在有四个导航步骤要执行：
- en: From the menu bar at the top, select **WORK**.
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从顶部的菜单栏中选择**工作**。
- en: Then, in the submenu that appears on the **WORK** page, select **Backlogs**.
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在**工作**页面上出现的子菜单中，选择**待办事项**。
- en: On the sidebar that appears, click on **Stories**.
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在出现的侧边栏中，点击**故事**。
- en: From the panel on the right-hand side, select **Board**.![How to do it…](img/00050.jpeg)
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从右侧面板中选择**看板**。![如何做…](img/00050.jpeg)
- en: Tip
  id: totrans-315
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Backlog is the set of User Stories and Tasks that we have yet to complete. You
    might think, "Are brand new tasks really entered into a Backlog?" That's right!
    You're already behind! The implications of Scrum's terminology seem to imply "overflowing
    with work".
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: Backlog是我们尚未完成的用户故事和任务集。你可能会想，“全新的任务真的会被输入到Backlog中吗？”没错！你已经落后了！Scrum术语的含义似乎暗示着“工作过剩”。
- en: From the panel on the right-hand side, hit **New item**, and fill in the text
    for your new **User Story** item.
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从右侧面板中，点击**新项目**，并填写你的新**用户故事**项目的文本。
- en: Click on the text of the **User Story** card, and fill in the fields for **Assignee**,
    the **Iteration** that it's a part of, **Description**, **tags**, and any other
    fields of the **Details** tab that you want to explore.
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**用户故事**卡的文本，并填写**受让人**、它所属的**迭代**、**描述**、**标签**以及你想探索的**详情**选项卡的任何其他字段。
- en: Next we break down the overall **User Story** into a series of achievable tasks.
    Hover over your new **User Story** item until the ellipsis (three dots…) appears.
    Click on the ellipsis, and select **+ Add Task**.
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将整个**用户故事**分解为一系列可实现的任务。将鼠标悬停在新的**用户故事**项目上，直到出现省略号（三个点…）。点击省略号，然后选择**+添加任务**。
- en: List the details of completing the **User Story** in the series of Tasks.
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出完成**用户故事**的细节，以一系列任务的形式。
- en: 'Assign each Task to:'
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将每个任务分配给：
- en: An Assignee
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个受让人
- en: An Iteration
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个迭代
- en: Tip
  id: totrans-324
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Simply put, an Iteration is really just a time period. At the end of each iteration,
    you should have a deliverable, testable piece of software completed. Iteration
    is a time period that refers to producing yet another version of your amazing
    software (for testing and possible release).
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，迭代实际上只是一个时间段。在每个迭代结束时，你应该有一个可交付的、可测试的软件完成品。迭代是一个时间段，指的是产生你惊人软件的另一个版本（用于测试和可能的发布）。
- en: Continue adding Tasks to the project as the project develops features to complete
    and bugs to fix.
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 随着项目开发功能完成和错误修复，继续向项目添加任务。
- en: How it works…
  id: totrans-327
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Epics contain a number of Features. Features contain a number of User Stories,
    and User Stories contain a number of Tasks and Tests.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 史诗包含许多特性。特性包含许多用户故事，用户故事包含许多任务和测试。
- en: '![How it works…](img/00051.jpeg)'
  id: totrans-329
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的…](img/00051.jpeg)'
- en: All of these items are assignable to a User (an actual human), and to an Iteration
    (time period), for both assigning responsibility and scheduling a task. Once these
    are assigned, the task should appear in the **Queries** tab.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些项目都可以分配给一个用户（一个实际的人），以及一个迭代（时间段），用于分配责任和安排任务。一旦分配了这些，任务应该出现在**查询**选项卡中。
- en: Tip
  id: totrans-331
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Detailed steps to download the code bundle are mentioned in the Preface of this
    book. Please have a look.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的前言中提到了下载代码包的详细步骤。请查看一下。
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/Unreal-Engine-4-Scripting-with-CPlusPlus-Cookbook](https://github.com/PacktPublishing/Unreal-Engine-4-Scripting-with-CPlusPlus-Cookbook).
    We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!**
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的代码包也托管在GitHub上，网址为[https://github.com/PacktPublishing/Unreal-Engine-4-Scripting-with-CPlusPlus-Cookbook](https://github.com/PacktPublishing/Unreal-Engine-4-Scripting-with-CPlusPlus-Cookbook)。我们还有来自丰富书籍和视频目录的其他代码包，可在[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)上找到。去看看吧！
