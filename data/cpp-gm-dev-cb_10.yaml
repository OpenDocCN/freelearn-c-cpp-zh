- en: Chapter 10. Multithreading in Game Development
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章 游戏开发中的多线程
- en: 'In this chapter, the following recipes will be covered:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，将涵盖以下配方：
- en: Concurrency in games – creating a thread
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏中的并发性-创建线程
- en: Joining and detaching a thread
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加入和分离线程
- en: Passing arguments to a thread
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向线程传递参数
- en: Avoiding deadlocks
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免死锁
- en: Data race and mutex
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据竞争和互斥
- en: Writing a thread-safe class
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写线程安全的类
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: To understand multithreading, let us first understand the meaning of threads.
    A thread is a concurrent unit of execution. It has its own call stack for methods
    being invoked, their arguments, and local variables. Each application has at least
    one thread running when it is started, the main thread. When we talk about multithreading,
    it means one process has many threads running independently and concurrently,
    but with shared memory. Often, multithreading is confused with multi-processing.
    A multiprocessor has multiple processes running, each with its own thread.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解多线程，让我们首先了解线程的含义。线程是并发执行的单位。它有自己的调用堆栈，用于调用的方法，它们的参数和局部变量。每个应用程序在启动时至少有一个正在运行的线程，即主线程。当我们谈论多线程时，意味着一个进程有许多独立和并发运行的线程，但具有共享内存。通常，多线程与多处理混淆。多处理器有多个运行的进程，每个进程都有自己的线程。
- en: Although multithreaded applications may be complex to write, they are lightweight.
    However, a multithreaded architecture is not well suited for a distributed application.
    In games, we may have one or more threads running. The golden question is when
    and why should we use multithreading. Although this is quite subjective, you would
    use multithreading if you want multiple tasks to happen concurrently. So if you
    do not want your physics code, or audio code in the game, to wait for the main
    loop to finish processing, you would multithread the physics and the audio loop.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管多线程应用程序可能编写起来复杂，但它们是轻量级的。然而，多线程架构不适合分布式应用程序。在游戏中，我们可能有一个或多个线程在运行。关键问题是何时以及为什么应该使用多线程。虽然这是相当主观的，但如果您希望多个任务同时发生，您将使用多线程。因此，如果您不希望游戏中的物理代码或音频代码等待主循环完成处理，您将对物理和音频循环进行多线程处理。
- en: Concurrency in games – creating a thread
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏中的并发性-创建线程
- en: The first step of writing multithreaded code is to spawn a thread. At this point,
    we must note that the application is already running an active thread, the main
    thread. So when we spawn a thread, there will be two active threads in the application.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 编写多线程代码的第一步是生成一个线程。在这一点上，我们必须注意应用程序已经运行了一个活动线程，即主线程。因此，当我们生成一个线程时，应用程序中将有两个活动线程。
- en: Getting ready
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To work through this recipe, you will need a machine running Windows and Visual
    Studio. No other prerequisites are required.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个配方，您需要一台运行Windows和Visual Studio的计算机。不需要其他先决条件。
- en: How to do it…
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In this recipe, we will see how easy it is to spawn a thread. Add a source
    file called `Source.cpp` and add the following code to it:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将看到生成线程有多么容易。添加一个名为`Source.cpp`的源文件，并将以下代码添加到其中：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How it works…
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The first step is to include the header file, `thread.h`. This gives us access
    to all the inbuilt libraries that we may need to create our multithreaded application.
    The next step is to create the task or the function that we need to thread. In
    this example, we have created a function called `ThreadOne`. This function represents
    any function that we can use to multithread. This could be a physics function,
    or audio, or anything that we may desire. For simplicity, we have used a function
    that prints a message. The next step is to spawn a thread. We simply need to write
    the keyword `thread`, assign a name to the thread (`T1`) and then write the function/task
    that we want to thread. In this case, it is `ThreadOne`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是包含头文件`thread.h`。这使我们可以访问所有内置库，以便创建我们的多线程应用程序所需的所有库。下一步是创建我们需要线程的任务或函数。在这个例子中，我们创建了一个名为`ThreadOne`的函数。这个函数代表我们可以用来多线程的任何函数。这可以是物理函数，音频函数，或者我们可能需要的任何函数。为简单起见，我们使用了一个打印消息的函数。下一步是生成一个线程。我们只需要编写关键字`thread`，为线程分配一个名称（`T1`），然后编写我们想要线程的函数/任务。在这种情况下，它是`ThreadOne`。
- en: This spawns a thread and will not execute independently of the main thread.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这会生成一个线程，并且不会独立于主线程执行。
- en: Joining and detaching a thread
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入和分离线程
- en: After a thread is spawned, it starts executing as a new task, separate from
    the main thread. However, there may be situations in which we want the task to
    rejoin the main thread. This is possible. We may also want that the thread always
    stays apart from the main thread. That is also possible. However, there are a
    few precautions that we must take when attaching to and detaching from the main
    thread.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 线程生成后，它作为一个新任务开始执行，与主线程分开。然而，可能存在一些情况，我们希望任务重新加入主线程。这是可能的。我们可能还希望线程始终与主线程保持分离。这也是可能的。然而，在连接到主线程和分离时，我们必须采取一些预防措施。
- en: Getting ready
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You need to have a working Windows machine and Visual Studio.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要一台运行Windows和Visual Studio的工作计算机。
- en: How to do it…
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In this recipe we will see how easy it is to join and detach threads. Add a
    source file called `Source.cpp`. Add the following code to it:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将看到加入和分离线程有多么容易。添加一个名为`Source.cpp`的源文件。将以下代码添加到其中：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works…
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the preceding example, at first two threads are spawned. The two threads
    are `T1` and `T2`. When the threads are spawned, they act independently and concurrently.
    However, when there is a need for any thread to be joined back to the main thread,
    we can do that as well. First, we need to check whether the thread can be joined
    to the main thread. We accomplish this with the joinable function. If the function
    returns `true`, the thread can join to the main thread. We can join to the main
    thread with the `join` function. If we directly join, without first checking whether
    the thread can join to the main thread, it may cause issues with the main thread
    failing to accept the thread. After the thread joins to the main thread, the main
    thread waits for that thread to finish.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，首先生成了两个线程。这两个线程是`T1`和`T2`。当线程被生成时，它们会独立并发地运行。然而，当需要将任何线程重新加入到主线程时，我们也可以这样做。首先，我们需要检查线程是否可以加入到主线程。我们可以通过joinable函数来实现这一点。如果函数返回`true`，则线程可以加入到主线程。我们可以使用`join`函数加入到主线程。如果我们直接加入，而没有首先检查线程是否可以加入到主线程，可能会导致主线程无法接受该线程而出现问题。线程加入到主线程后，主线程会等待该线程完成。
- en: If we want to detach a thread from the main thread, we can use the `detach`
    function. However, after we detach it from the main thread, it is detached forever.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要将线程从主线程分离，我们可以使用`detach`函数。然而，在我们将其从主线程分离后，它将永远分离。
- en: Passing arguments to a thread
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向线程传递参数
- en: Like in functions, we may also want to send parameters and arguments to the
    thread. As threads are just tasks, and tasks are just a collection of functions,
    it is necessary to understand how to send arguments to a thread. If we can send
    arguments to a thread at runtime, then the thread can perform all the operations
    dynamically. In most cases, we would thread the physics, AI, or audio sections
    of the code. All these sections would require functions that take in arguments.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在函数中一样，我们可能还想将参数和参数传递给线程。由于线程只是任务，而任务只是一系列函数的集合，因此有必要了解如何向线程发送参数。如果我们可以在运行时向线程发送参数，那么线程可以动态执行所有操作。在大多数情况下，我们会将物理、人工智能或音频部分线程化。所有这些部分都需要接受参数的函数。
- en: Getting ready
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You need a Windows machine and a working copy of Visual Studio. No other prerequisites
    are required.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要一台Windows机器和一个安装好的Visual Studio副本。不需要其他先决条件。
- en: How to do it…
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'In this recipe, we will find out how easy it is to add a heuristic function
    to our game for pathfinding. Add a source file called `Source.cpp`. Add the following
    code to it:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将发现为我们的游戏添加启发式函数进行路径规划有多么容易。添加一个名为`Source.cpp`的源文件。将以下代码添加到其中：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works…
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: The best way to do pass arguments is to write a `Wrapper` class and overload
    the `()` operator. After we overload the `()` operator, we can send arguments
    to the thread. To do this, we create a string and store the string in a variable.
    Then we need to spawn a thread as usual; however, instead of just passing in the
    function name, we pass in the class name and the string. In threads, we need to
    pass the arguments by reference, so we could use the `ref` function. However,
    a better way to do this is by using the `move` function, where we note the memory
    location itself and pass it to the argument. The `operator` function accepts the
    string and prints the message.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 传递参数的最佳方法是编写一个`Wrapper`类并重载`()`运算符。在我们重载`()`运算符之后，我们可以向线程发送参数。为此，我们创建一个字符串并将字符串存储在一个变量中。然后我们需要像往常一样生成一个线程；然而，我们不仅仅传递函数名，而是传递类名和字符串。在线程中，我们需要通过引用传递参数，因此我们可以使用`ref`函数。然而，更好的方法是使用`move`函数，其中我们注意内存位置本身并将其传递给参数。`operator`函数接受字符串并打印消息。
- en: If we want to create a new thread and make it the same as the first thread,
    we can again use the `move` function to do this. In addition to this, we can get
    the thread's ID by using the `get_id` function.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想创建一个新线程并使其与第一个线程相同，我们可以再次使用`move`函数来实现这一点。除此之外，我们还可以使用`get_id`函数来获取线程的ID。
- en: Avoiding deadlocks
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 避免死锁
- en: 'When two or more tasks want to use the same resource, we have a race condition.
    Until one task finishes using the resource, the other task cannot get access to
    it. This is known as a **deadlock**, and we must avoid deadlocks at all costs.
    For example, resource `Collision` and resource `Audio` are used by process `Locomotion`
    and process `Bullet`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当两个或更多任务想要使用相同的资源时，就会出现竞争条件。在一个任务完成使用资源之前，另一个任务无法访问它。这被称为**死锁**，我们必须尽一切努力避免死锁。例如，资源`Collision`和资源`Audio`被进程`Locomotion`和进程`Bullet`使用：
- en: '`Locomotion` starts to use `Collision`'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Locomotion`开始使用`Collision`'
- en: '`Locomotion` and `Bullet` try to start using `Audio`'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Locomotion`和`Bullet`尝试开始使用`Audio`'
- en: '`Bullet` "wins" and gets `Audio` first'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Bullet`“赢得”并首先获得`Audio`'
- en: Now `Bullet` needs to use `Collision`
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在`Bullet`需要使用`Collision`
- en: '`Collision` is locked by `Locomotion`, which is waiting for `Bullet`'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Collision`被`Locomotion`锁定，它正在等待`Bullet`'
- en: Getting ready
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, you will need a Windows machine and an installed copy of Visual
    Studio.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个食谱，你需要一台Windows机器和一个安装好的Visual Studio副本。
- en: How to do it…
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'In this recipe, we will find out how easy it is to avoid deadlocks:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将发现避免死锁有多么容易：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works…
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: In the preceding example, we have spawned a thread, `t1`, which starts a function
    to print numbers from 0 to -100, decreasing by 1\. There is also a main thread,
    which starts to print numbers from 0 to 100, increasing by 1\. Again, we have
    chosen these functions for simplicity of understanding. These could easily be
    replaced by an *A** algorithm and a search algorithm, or anything we want.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们生成了一个名为`t1`的线程，它开始一个函数以从0到-100打印数字，递减1。还有一个主线程，它开始从0到100打印数字，递增1。同样，我们选择了这些函数是为了简单理解。这些可以很容易地被*A*算法和搜索算法或其他任何我们想要的东西所替代。
- en: If we look at the console output, we notice that it is quite messy. The reason
    for that is the `cout` object is being used by both the main thread and `t1`.
    Hence there is a data race condition taking place. Whoever is winning at each
    turn is getting to display the number. We must avoid this kind of programming
    structure at all costs. More often than not, it will cause a deadlock and disruption.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们看控制台输出，我们会注意到它非常混乱。原因是`cout`对象被主线程和`t1`同时使用。因此，发生了数据竞争的情况。每次谁赢得了竞争，谁就会显示数字。我们必须尽一切努力避免这种编程结构。很多时候，它会导致死锁和中断。
- en: Data race and mutex
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据竞争和互斥锁
- en: Data race conditions are very common in multithreaded applications, but we must
    avoid such a scenario so that deadlocks do not happen. A **mutex** helps us to
    overcome deadlocks. A mutex is a program object that allows multiple program threads
    to share the same resource, such as file access, but not simultaneously. When
    a program is started, a mutex is created with a unique name.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 数据竞争条件在多线程应用程序中非常常见，但我们必须避免这种情况，以防止死锁发生。**互斥锁**帮助我们克服死锁。互斥锁是一个程序对象，允许多个程序线程共享相同的资源，比如文件访问，但不是同时。当程序启动时，会创建一个带有唯一名称的互斥锁。
- en: Getting ready
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, you will need a Windows machine and an installed version of
    Visual Studio.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个食谱，你需要一台Windows机器和安装了Visual Studio的版本。
- en: How to do it…
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'In this recipe, we will see how easy it is to understand data races and mutexes.
    Add a source file called `Source.cpp` and add the following code to it:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将看到理解数据竞争和互斥锁是多么容易。添加一个名为`Source.cpp`的源文件，并将以下代码添加到其中：
- en: '[PRE4]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How it works…
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In this example, both the main thread and `t1` want to display some numbers.
    However, as both of them want to use the `cout` object, it creates a data race
    situation. To avoid this, one approach is to use mutex locks. So before executing
    the `print` statement, we have `mutex.lock`, and after the `print` statement,
    we have `mutex.unlock`. This will work, and prevent the data race condition, as
    mutex will allow one thread to use the resource and make the other thread wait
    for it. However, this program is not yet thread safe. This is because if the `cout`
    statement throws an error or exception, the mutex will never get unlocked and
    the other threads will always be in a `wait` state.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，主线程和`t1`都想显示一些数字。然而，由于它们都想使用`cout`对象，这就产生了数据竞争的情况。为了避免这种情况，一种方法是使用互斥锁。因此，在执行`print`语句之前，我们有`mutex.lock`，在`print`语句之后，我们有`mutex.unlock`。这样可以工作，并防止数据竞争条件，因为互斥锁将允许一个线程使用资源，并使另一个线程等待它。然而，这个程序还不是线程安全的。这是因为如果`cout`语句抛出错误或异常，互斥锁将永远不会被解锁，其他线程将始终处于`等待`状态。
- en: To prevent this, we will use the **Resource Acquisition is Initialization technique**
    (**RAII**) of C++. We add an inbuilt lock guard to the function. This code is
    exception-safe because C++ guarantees that all stack objects are destroyed at
    the end of the enclosing scope, known as **stack unwinding**. The destructors
    of both the lock and file objects are therefore guaranteed to be called when returning
    from the function, whether an exception has been thrown or not. Therefore, it
    will not stop other threads from waiting eternally if an exception has occurred.
    Despite doing this, this application is not thread safe. This is because the `cout`
    object is a global object, so other parts of the program can access it as well.
    Therefore, we need to encapsulate this even further. This we will see later.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这种情况，我们将使用C++的**资源获取即初始化技术**（**RAII**）。我们在函数中添加一个内置的锁保护。这段代码是异常安全的，因为C++保证所有堆栈对象在封闭范围结束时被销毁，即所谓的**堆栈展开**。当从函数返回时，锁和文件对象的析构函数都将被调用，无论是否抛出了异常。因此，如果发生异常，它不会阻止其他线程永远等待。尽管这样做，这个应用程序仍然不是线程安全的。这是因为`cout`对象是一个全局对象，因此程序的其他部分也可以访问它。因此，我们需要进一步封装它。我们稍后会看到这一点。
- en: Writing a thread-safe class
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写一个线程安全的类
- en: When dealing with multiple threads, writing a thread-safe class becomes an absolute
    must. If we do not write classes that are thread safe, there are many complications
    that may arise, such as deadlocks. We must also keep in mind that when we write
    a thread-safe class, there is no potential danger from data races and mutex.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理多个线程时，编写一个线程安全的类变得非常重要。如果我们不编写线程安全的类，可能会出现许多复杂情况，比如死锁。我们还必须记住，当我们编写线程安全的类时，就不会有数据竞争和互斥锁的潜在危险。
- en: Getting ready
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, you will need a Windows machine and an installed version Visual
    Studio.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个食谱，你需要一台Windows机器和安装了Visual Studio的版本。
- en: How to do it…
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'In this recipe, we will see how easy it is to write a thread safe class in
    C++. Add a source file called `Source.cpp` and add the following code to it:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将看到在C++中编写一个线程安全的类是多么容易。添加一个名为`Source.cpp`的源文件，并将以下代码添加到其中：
- en: '[PRE5]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works…
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In the previous recipe, we saw how, despite writing a mutex and locks, our code
    was not thread safe. This is because we were using a global object, `cout`, which
    could be accessed from other parts of the code as well and so was not thread safe.
    So we have avoided doing this by adding one more layer of abstraction and outputting
    the result to a log file.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个食谱中，我们看到尽管编写了互斥锁和锁，我们的代码仍然不是线程安全的。这是因为我们使用了一个全局对象`cout`，它也可以从代码的其他部分访问，因此不是线程安全的。因此，我们通过添加一层抽象来避免这样做，并将结果输出到日志文件中。
- en: We have created a class called `Logfile`. Inside this class, we have created
    a lock guard and a mutex. On top of that, we have also created a stream object
    called `f`. Using this, we output the contents to a text file. The threads that
    need access to this functionality will need to create an object of the `LogFile`
    and then use the function appropriately. We are using the lock guard in the RAII
    system. Because of this layer of abstraction, there is no chance that the functionality
    can be used externally and it is quite safe.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了一个名为`Logfile`的类。在这个类里，我们创建了一个锁保护和一个互斥锁。除此之外，我们还创建了一个名为`f`的流对象。使用这个对象，我们将内容输出到一个文本文件中。需要访问这个功能的线程将需要创建一个`LogFile`对象，然后适当地使用这个函数。我们在RAII系统中使用了锁保护。由于这种抽象层，外部无法使用这个功能，因此是非常安全的。
- en: However, even in this program, we need to take certain precautions. The first
    precaution that we should take is that we should not return `f` from any function.
    Also, we have to be careful that `f` should not be directly available from any
    other class or external function. If we do either of the above, the resource `f`
    will again be available to external sections of the program, will not be protected,
    and will therefore no longer be thread safe.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，即使在这个程序中，我们也需要采取一定的预防措施。我们应该采取的第一项预防措施是不要从任何函数中返回`f`。此外，我们必须小心，`f`不应该直接从任何其他类或外部函数中获取。如果我们做了上述任何一项，资源`f`将再次可用于程序的外部部分，将不受保护，因此将不再是线程安全的。
