- en: 10\. Creating a SuperSideScroller Game
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10. 创建一个SuperSideScroller游戏
- en: Overview
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we will set up the project for a new `SuperSideScroller` game.
    You will be introduced to the different aspects of a side-scroller game, including
    power-ups, collectibles, and enemy AI, all of which we will be using in our project.
    You will also learn about the Character animation pipeline in game development
    and see how to manipulate the movement of our game's Character.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将为新的`SuperSideScroller`游戏设置项目。您将了解横向滚动游戏的不同方面，包括强化道具、可收集物品和敌人人工智能，我们将在项目中使用所有这些。您还将了解游戏开发中的角色动画流程，并了解如何操纵我们游戏角色的移动。
- en: By the end of this chapter, you will be able to create a side-scroller project,
    manipulate the default mannequin skeleton for our Character, import Characters
    and animations, and create Character and Animation Blueprints.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将能够创建一个横向滚动项目，操纵我们角色的默认模特骨骼，导入角色和动画，并创建角色和动画蓝图。
- en: Introduction
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: So far, we have learned a lot about the Unreal Engine, C++ programming, and
    general game development techniques and strategies. In previous chapters, we covered
    topics such as collisions, tracing, how to use C++ with Unreal Engine 4, and even
    the Blueprint Visual Scripting system. On top of that, we gained crucial knowledge
    of Skeletons, animations, and Animation Blueprints that we will utilize in the
    upcoming project.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学到了很多关于虚幻引擎、C++编程和一般游戏开发技术和策略的知识。在之前的章节中，我们涵盖了诸如碰撞、追踪、如何在虚幻引擎4中使用C++，甚至蓝图可视化脚本系统等主题。除此之外，我们还获得了关于骨骼、动画和动画蓝图的关键知识，我们将在即将到来的项目中利用这些知识。
- en: For our newest project, `SuperSideScroller`, we will use many of the same concepts
    and tools that we have used in previous chapters to develop our game features
    and systems. Concepts such as collision, input, and the HUD will be at the forefront
    of our project; however, we will also be diving into new concepts involving animation
    to recreate the mechanics of popular side-scrolling games. The final project will
    be a culmination of everything we have learned thus far in this book.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的最新项目`SuperSideScroller`，我们将使用许多在之前章节中使用过的概念和工具来开发我们的游戏特性和系统。碰撞、输入和HUD等概念将是我们项目的重点；然而，我们还将深入研究涉及动画的新概念，以重新创建流行横向滚动游戏的机制。最终项目将是我们迄今为止在本书中学到的一切的结晶。
- en: There are countless examples of side-scroller games out there that can be used
    as references for this project. Most recently, some popular side-scrolling games
    have included titles such as *Celeste*, *Hollow Knight*, and *Shovel Knight*,
    but there is also a deep, rich history behind the side-scroller/platformer genre,
    which we will discuss in this chapter.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 有无数的横向滚动游戏示例可供参考。最近一些流行的横向滚动游戏包括*Celeste*、*Hollow Knight*和*Shovel Knight*，但是横向滚动/平台游戏背后也有悠久而丰富的历史，我们将在本章中讨论。
- en: Project Breakdown
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目分解
- en: 'Let''s consider the example of the famous *Super Mario Bros*, released on the
    **Nintendo Entertainment System** (**NES**) console in 1985\. This game was created
    by Nintendo and designed by Shigeru Miyamoto. For those who are unfamiliar with
    the franchise, the general idea is this: the player takes control of Mario, who
    must traverse the many hazardous obstacles and creatures of the Mushroom Kingdom
    in the hope of rescuing Princess Peach from the sinister King Koopa, Bowser.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一下著名的*超级马里奥兄弟*的例子，该游戏于1985年在**任天堂娱乐系统**（**NES**）主机上发布。这款游戏是由任天堂制作，由宫本茂设计。对于不熟悉这个系列的人来说，一般的想法是：玩家控制马里奥，他必须穿越蘑菇王国的许多危险障碍和生物，希望从邪恶的酷霸王鲍斯那里救出桃花公主。
- en: Note
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'To have an even better understanding of how the game works, feel free to play
    it online for free at [https://supermariobros.io/](https://supermariobros.io/).
    A more in-depth wiki of the entire *Super Mario Brothers* franchise can be found
    here: [https://www.mariowiki.com/Super_Mario_Bros](https://www.mariowiki.com/Super_Mario_Bros).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解游戏的运作方式，请随时在[https://supermariobros.io/](https://supermariobros.io/)免费在线玩游戏。整个*超级马里奥兄弟*系列的更深入的维基可以在这里找到：[https://www.mariowiki.com/Super_Mario_Bros](https://www.mariowiki.com/Super_Mario_Bros)。
- en: 'The following are the core features and mechanics of games in this genre:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是这种类型游戏的核心特点和机制：
- en: '`SuperSideScroller` game will be in 3D and not pure 2D, the movement of our
    Character will work identically to that of Mario, only supporting vertical and
    horizontal movement:![Figure 10.1: A comparison of 2D and 3D coordinate vectors'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`SuperSideScroller`游戏将是3D而不是纯2D，我们角色的移动将与马里奥的移动方式完全相同，只支持垂直和水平移动：![图10.1：2D和3D坐标向量的比较'
- en: '](img/B16183_10_01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_10_01.jpg)'
- en: 'Figure 10.1: A comparison of 2D and 3D coordinate vectors'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.1：2D和3D坐标向量的比较
- en: '`SuperSideScroller` game will be no different. There are many different games,
    such as *Celeste*, *Hollow Knight*, and *Super Meat Boy*, as mentioned before,
    that use the jumping feature – all of which are in 2D.'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`SuperSideScroller`游戏也不例外。有许多不同的游戏，如*Celeste*、*Hollow Knight*和*Super Meat Boy*，如前所述，都使用了跳跃功能-所有这些都是2D的。'
- en: '**Character Power-Ups**: Without Character power-ups, many side-scrolling games
    lose their sense of chaos and replayability. For instance, in the game *Ori and
    the Blind Forest*, the developers introduce different Character abilities that
    change how the game is played. Abilities such as the triple-jump or the air dash
    open a variety of possibilities to navigate the level and allow level designers
    to create interesting layouts based on the movement abilities of the player.'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**角色强化道具**：没有角色强化道具，许多横向滚动游戏会失去混乱感和可重复性。例如，在游戏*奥里和失落的森林*中，开发者引入了不同的角色能力，改变了游戏的玩法。像三段跳或空中冲刺这样的能力打开了各种可能性，使玩家能够根据其移动能力创建有趣的布局。'
- en: '**Enemy AI**: Enemies with various abilities and behaviors are introduced to
    add a layer of challenge for the player, on top of the challenge of navigating
    the level solely through the use of the available movement mechanics.'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**敌方AI**：引入具有各种能力和行为的敌人，以增加玩家的挑战层次，除了通过可用的移动机制单独导航关卡的挑战之外。'
- en: Note
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'What are some ways that AI in games can interact with the player? For example,
    in *The Elder Scrolls V: Skyrim*, there are AI characters in various towns and
    villages that can have conversations with the player to exposit world-building
    elements such as history, sell items to the player, and even give quests to the
    player.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏中的AI可以以哪些方式与玩家互动？例如，在《上古卷轴V：天际》中，各个城镇和村庄中的AI角色可以与玩家进行对话，以阐述世界构建元素，如历史，向玩家出售物品，甚至向玩家提供任务。
- en: '`SuperSideScroller` game will allow players to collect coins.'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`SuperSideScroller`游戏将允许玩家收集硬币。'
- en: Now that we have evaluated the game mechanics that we want to support, we can
    break down the functionality of each mechanic as it relates to our `SuperSideScroller`
    and what we need to do to implement these features.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经评估了我们想要支持的游戏机制，我们可以分解每个机制的功能，以及它如何与我们的`SuperSideScroller`相关，以及我们需要做些什么来实现这些功能。
- en: The Player Character
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 玩家角色
- en: Almost all of the functionality that we want for our Character is given to us
    by default when using the `Side Scroller` game project template in Unreal Engine
    4\.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用虚幻引擎4的`侧向滚动`游戏项目模板时，几乎所有我们想要的角色功能都已经默认给我们了。
- en: Note
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: At the time of writing, we are using Unreal Engine version 4.24.2; using another
    version of the engine could result in some differences in the editor, the tools,
    and how your logic will work later on, so please keep this in mind.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，我们使用的是虚幻引擎版本4.24.2；使用引擎的其他版本可能会导致编辑器、工具以及后续逻辑的一些差异，因此请记住这一点。
- en: For now, let's begin creating our project in the following exercise.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在下一个练习中开始创建我们的项目。
- en: 'Exercise 10.01: Creating the Side-Scroller Project and Using the Character
    Movement Component'
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习10.01：创建侧向滚动项目并使用角色移动组件
- en: In this exercise, you will be setting up Unreal Engine 4 with the `Side Scroller`
    template. This exercise will help you get started with our game.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在本练习中，您将使用`侧向滚动`模板设置虚幻引擎4。这个练习将帮助您开始我们的游戏。
- en: 'The following steps will help you complete the exercise:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助您完成练习：
- en: First, open the Epic Games Launcher, navigate to the `Unreal Engine` tab at
    the bottom of the options on the left-hand side, and select the `Library` option
    at the top.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，打开Epic Games Launcher，导航到左侧选项底部的`Unreal Engine`选项卡，并在顶部选择`Library`选项。
- en: Next, you will be prompted with a window asking you to either open an existing
    project or create a new project of a certain category. Among these options is
    the `Games` category; select this option for our project. With your project category
    selected, you are now prompted to select the template for your project.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您将收到一个窗口提示您要么打开现有项目，要么创建特定类别的新项目。其中包括`游戏`类别；选择此选项以进行我们的项目。选择了项目类别后，您现在需要选择项目的模板。
- en: Next, click on the `Side Scroller` option because we want our game to use 3D
    Skeletal Meshes and animations, and not just 2D textures, flipbooks, and other
    features of the Paper2D toolset.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击`侧向滚动`选项，因为我们希望我们的游戏使用3D骨骼网格和动画，而不仅仅是2D纹理、翻页书和Paper2D工具集的其他功能。
- en: Note
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Be sure to select the correct `Side Scroller` option, because Unreal Engine
    4 has two types of Side Scroller projects: `Side Scroller` and `2D Side Scroller`.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 请务必选择正确的`侧向滚动`选项，因为虚幻引擎4有两种类型的侧向滚动项目：`侧向滚动`和`2D侧向滚动`。
- en: We will discuss the main differences between these two project templates shortly
    after this exercise.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本练习之后讨论这两种项目模板之间的主要区别。
- en: Lastly, we need to set up our project settings.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要设置我们的项目设置。
- en: Choose to base the project on `C++`, not `Blueprints`, to include `Starter Content`,
    and to use `Desktop/Console` as our platform. The remaining project settings can
    be left as their defaults. Select the location and name the project `SuperSideScroller`
    and save the project in an appropriate directory of your choice.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择基于`C++`的项目，而不是`蓝图`，以包括`入门内容`，并将我们的平台选择为`桌面/控制台`。其余的项目设置可以保留为默认设置。选择位置并命名项目为`SuperSideScroller`，并将项目保存在您选择的适当目录中。
- en: 'After these settings are applied, select `Create Project`. When it''s done
    compiling the engine, both the Unreal Editor and Visual Studio will open, and
    we can get started.![Figure 10.2: The Unreal Engine editor should now be open'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用这些设置后，选择`创建项目`。当编译引擎完成后，虚幻编辑器和Visual Studio都将打开，我们就可以开始了。![图10.2：虚幻引擎编辑器现在应该已经打开
- en: '](img/B16183_10_02.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_10_02.jpg)'
- en: 'Figure 10.2: The Unreal Engine editor should now be open'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.2：虚幻引擎编辑器现在应该已经打开
- en: Next, we continue to manipulate the Character movement component that exists
    inside the default `SideScroller` Character and see how this affects the Character.
    The `Character Movement` component can only be implemented in `Character` classes
    and allows bipedal avatars to move by means of *walking*, *jumping*, *flying*,
    and *swimming*. This component also has a built-in network replication functionality
    that is necessary for multiplayer games.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们继续操作默认的`SideScroller`角色内存在的角色移动组件，并查看这如何影响角色。`Character Movement`组件只能在`Character`类中实现，并允许双足化身通过*行走*、*跳跃*、*飞行*和*游泳*移动。这个组件还具有内置的网络复制功能，这对于多人游戏是必要的。
- en: 'In `Content Browser`, navigate to the `/SideScrollerCPP/Blueprints/` directory
    and find the `SideScrollerCharacter` Blueprint:![Figure 10.3: The default SideScrollerCharacter
    Blueprint selected inside Content Browser'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Content Browser`中，导航到`/SideScrollerCPP/Blueprints/`目录，并找到`SideScrollerCharacter`蓝图：![图10.3：Content
    Browser中选择的默认SideScrollerCharacter蓝图
- en: '](img/B16183_10_03.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_10_03.jpg)'
- en: 'Figure 10.3: The default SideScrollerCharacter Blueprint selected inside Content
    Browser'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.3：在内容浏览器中选择默认的SideScrollerCharacter蓝图
- en: 'Double *left-click* the `Blueprint` asset to open the `Blueprint`. Sometimes,
    if the `Blueprint` does not have any graph logic, you will see what is shown in
    *Figure 10.4*. If you see this, just *left-click* on `Open Full Blueprint Editor`:![Figure
    10.4: When a Blueprint has no graph logic'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击*蓝图*资产以打开*蓝图*。有时，如果*蓝图*没有任何图形逻辑，您将看到*图10.4*中显示的内容。如果您看到这个，请只需*左键单击*“打开完整蓝图编辑器”：![图10.4：当蓝图没有图形逻辑时
- en: '](img/B16183_10_04.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_10_04.jpg)'
- en: 'Figure 10.4: When a Blueprint has no graph logic'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.4：当蓝图没有图形逻辑时
- en: With the Character `Blueprint` opened, we can *left-click* the `CharacterMovement(Inherited)`
    component in the `Components` tab to view the parameters for this component.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开角色“蓝图”，我们可以*左键单击*“组件”选项卡中的“CharacterMovement（继承）”组件，以查看此组件的参数。
- en: 'Now, under the `Details` panel, we have access to dozens of parameters that
    affect Character movement. In the `Character Movement: Walking` category, we have
    the `Max Walk Speed` parameter. Change this value from `600.0f` to `2000.0f`.'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '现在，在“详细信息”面板下，我们可以访问数十个影响角色移动的参数。在“Character Movement: Walking”类别中，我们有“Max
    Walk Speed”参数。将此值从“600.0f”更改为“2000.0f”。'
- en: 'Lastly, compile and save our Character `Blueprint`. Now, if we play in the
    editor, we can observe how fast our player Character is moving:![Figure 10.5:
    If we play in the editor, we can see that our Character moves much faster'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，编译并保存我们的角色*蓝图*。现在，如果我们在编辑器中播放，我们可以观察到我们的玩家角色移动得有多快：![图10.5：如果我们在编辑器中播放，我们可以看到我们的角色移动得更快
- en: '](img/B16183_10_05.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_10_05.jpg)'
- en: 'Figure 10.5: If we play in the editor, we can see that our Character moves
    much faster'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.5：如果我们在编辑器中播放，我们可以看到我们的角色移动得更快
- en: Now that you have completed the exercise, you have experienced first-hand the
    control you have over how the player Character moves! Try changing the value of
    `Max Walk Speed` and observe in-game how such changes affect the Character.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经完成了这项练习，亲身体验了对玩家角色移动方式的控制！尝试更改“最大行走速度”的值，并观察这些更改如何影响角色。
- en: Side Scroller versus 2D Side Scroller
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 侧向滚动与2D侧向滚动
- en: Let's take a brief moment here to learn about the main differences between the
    `2D Side Scroller` project template and the `Side Scroller` template. The `2D
    Side Scroller` template uses the Paper2D system built with Unreal Engine 4, which
    takes advantage of texture-based animation via textures, sprites, and paper flipbooks.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在这里花点时间了解“2D侧向滚动”项目模板和“侧向滚动”模板之间的主要区别。 “2D侧向滚动”模板使用了基于纸张2D系统构建的虚幻引擎4，利用了基于纹理的动画，通过纹理、精灵和纸张翻书。
- en: Note
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more details about Paper2D, please refer to the following documentation:
    [https://docs.unrealengine.com/en-US/Engine/Paper2D/index.html](https://docs.unrealengine.com/en-US/Engine/Paper2D/index.html).'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Paper2D的更多详细信息，请参阅以下文档：[https://docs.unrealengine.com/en-US/Engine/Paper2D/index.html](https://docs.unrealengine.com/en-US/Engine/Paper2D/index.html)。
- en: There is enough material about Paper2D to warrant its own textbook, so we will
    not cover much more of that topic. The `Side Scroller` template, however, is almost
    identical to the 2D version, except we are using 3D animated skeletons instead
    of 2D animation.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Paper2D的材料足够多，值得有一本专门的教材，因此我们不会再涉及太多这个主题。然而，“侧向滚动”模板几乎与2D版本相同，只是我们使用3D动画骨骼而不是2D动画。
- en: Now, let's move on and look at performing our first activity to manipulate the
    player Character's jump movement.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续并看看执行我们的第一个活动来操纵玩家角色的跳跃动作。
- en: 'Activity 10.01: Making Our Character Jump Higher'
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动10.01：使我们的角色跳得更高
- en: In this activity, we will be manipulating a new parameter (`jump`) that exists
    within the `CharacterMovement` component of the default `Side Scroller` Character
    Blueprint to observe how these properties affect how our Character moves.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这项活动中，我们将操纵默认的“侧向滚动”角色蓝图中“CharacterMovement”组件中存在的一个新参数（跳跃），以观察这些属性如何影响我们的角色移动。
- en: We will be implementing what we learned from *Exercise 10.01*, *Creating the
    Side-Scroller Project and Using the Character Movement Component*, and applying
    that to how to create our Character power-ups and the general movement feel of
    our Character.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将实施从*练习10.01*中学到的内容，*创建侧向滚动项目并使用角色移动组件*，并将其应用于如何创建我们的角色强化道具以及角色的一般移动感觉。
- en: 'The following steps will help you complete the activity:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助您完成这项活动：
- en: Head to `SideScrollerCharacter` Blueprint and find the `Jump Z Velocity` parameter
    in the `CharacterMovement` component.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到“SideScrollerCharacter”蓝图，并在“CharacterMovement”组件中找到“Jump Z Velocity”参数。
- en: Change this parameter from the default `1000.0`f to a value of `2000.0`f.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此参数从默认的“1000.0”f更改为“2000.0”f。
- en: Compile and save the `SideScrollerCharacter` Blueprint and play in the editor.
    Observe how high our Character can jump using the space bar on your keyboard.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译并保存“SideScrollerCharacter”蓝图，并在编辑器中播放。观察我们的角色使用键盘上的空格键可以跳多高。
- en: Stop playing in the editor, return to the `SideScrollerCharacter` Blueprint,
    and update `Jump Z Velocity` from a value of `2000.0`f to `200.0`f.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止在编辑器中播放，返回到“SideScrollerCharacter”蓝图，并将“Jump Z Velocity”从“2000.0”f的值更新为“200.0”f。
- en: Compile and save the Blueprint again, play in the editor, and watch the Character jump.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次编译并保存蓝图，然后在编辑器中播放，观察角色的跳跃。
- en: '**Expected output**:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**预期输出**：'
- en: '![Figure 10.6: The expected output with the jumping Character'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.6：跳跃角色的预期输出'
- en: '](img/B16183_10_06.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_10_06.jpg)'
- en: 'Figure 10.6: The expected output with the jumping Character'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.6：跳跃角色的预期输出
- en: Note
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The solution to this activity can be found at: [https://packt.live/338jEBx](https://packt.live/338jEBx).'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的解决方案可在此处找到：[https://packt.live/338jEBx](https://packt.live/338jEBx)。
- en: Now that we have completed this activity, we have a better understanding of
    how a few changes to the `CharacterMovement` component parameters can affect our
    player Character. We can use this later on when we need to give our Character
    basic movement behaviors such as `Walking Speed` and `Jump Z Velocity` to achieve
    the Character feel we want. Before moving on, return the Jump Z Velocity parameter
    back to its default value 1000.0f.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了这个活动，对于`CharacterMovement`组件参数的一些更改如何影响我们的玩家角色有了更好的理解。当我们需要给我们的角色基本的移动行为，比如`行走速度`和`跳跃Z速度`时，我们可以在以后使用这些知识来实现我们想要的角色感觉。在继续之前，将跳跃Z速度参数恢复到默认值1000.0f。
- en: We will also keep these parameters in mind when we develop our player Character
    power-ups later on in our project.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们项目的后期，当我们开发我们的玩家角色增强道具时，我们也会记住这些参数。
- en: Features of Our Side-Scroller Game
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们横向卷轴游戏的特点
- en: Let's now take some time to lay out the specifics of the game we'll be designing.
    Many of these features will be implemented in later chapters, but now is a good
    time to lay out the vision for the project.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们花点时间来详细说明我们将要设计的游戏。这些特性中的许多将在后面的章节中实现，但现在是一个好时机来规划项目的愿景。
- en: Enemy Character
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 敌人角色
- en: One thing you should have noticed while playing the `SuperSideScroller` project
    is that there is no enemy AI provided to you by default. So, let's discuss the
    type of enemies we will want to support and how they will work. Our `SuperSideScroller`
    project will support one enemy type.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在玩`SuperSideScroller`项目时，你应该已经注意到默认情况下没有提供敌人AI。因此，让我们讨论我们希望支持的敌人类型以及它们的工作方式。我们的`SuperSideScroller`项目将支持一种敌人类型。
- en: The enemy will have a basic back-and-forth movement pattern and will not support
    any attacks; only by colliding with the player Character will they be able to
    inflict any damage. However, we need to set the two locations to move between
    for the enemy AI, and next, we will need to decide whether the AI should change
    locations. Should they constantly move between locations, or should there be a
    pause before selecting a new location to move to?
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 敌人将有一个基本的来回移动模式，并不支持任何攻击；只有与玩家角色碰撞，他们才能造成伤害。然而，我们需要设置敌人AI要移动的两个位置，接下来，我们需要决定AI是否应该改变位置。他们应该不断在位置之间移动，还是在选择新位置移动之前应该暂停一下？
- en: Finally, we decide whether our AI should be aware of where the player is at
    all times. If the player comes within a certain range of our enemy, should the
    enemy know about this and aggressively move toward the player's last known location?
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们决定我们的AI是否应该始终知道玩家的位置。如果玩家进入敌人的一定范围，敌人是否应该知道这一点，并积极地朝着玩家最后所在的位置移动？
- en: In *Chapter 13,* *Enemy Artificial Intelligence*, we will use the tools available
    in Unreal Engine 4 to develop this AI logic.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第13章* *敌人人工智能*中，我们将使用虚幻引擎4中可用的工具来开发这种AI逻辑。
- en: Power-Up
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 增强道具
- en: The `SuperSideScroller` game project will support one type of power-up, in the
    form of a potion that the player can pick up from the environment. This potion
    power-up will increase the movement speed of the player and the maximum height
    to which the player can jump. These effects will only last a short duration before
    they are removed.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`SuperSideScroller`游戏项目将支持一种类型的增强道具，即玩家可以从环境中拾取的药水。这种药水增强道具将增加玩家的移动速度和最大跳跃高度。这些效果只会持续很短的时间，然后就会消失。'
- en: Keeping in mind what you implemented in *Exercise 10.01*, *Creating the Side-Scroller
    Project and Using the Character Movement Component*, and *Activity 10.01*, *Making
    Our Character Jump Higher*, about the `CharacterMovement` component, you could
    develop a power-up that changes the effect of gravity on the Character, which
    would allow interesting new ways to navigate the level and combat enemies.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 记住你在*练习10.01* *创建横向卷轴项目并使用角色移动组件*和*活动10.01* *使我们的角色跳得更高*中实现的内容，关于`CharacterMovement`组件，你可以开发一个改变角色重力影响的增强道具，这将允许以新的有趣方式穿越关卡和与敌人战斗。
- en: Collectible
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可收集物品
- en: 'Collectibles in video games serve different purposes. In some cases, collectibles
    are used as a form of currency to purchase upgrades, items, and other goods. In
    others, collectibles serve to improve your score or reward you when enough collectibles
    have been collected. For the `SuperSideScroller` game project, the coins will
    serve a single purpose: to give the player the goal of collecting as many coins
    as they can without being destroyed by the enemy.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 视频游戏中的可收集物品有不同的用途。在某些情况下，可收集物品被用作一种货币，用于购买升级、物品和其他商品。在其他情况下，可收集物品用来提高你的得分或在收集足够的可收集物品时奖励你。对于`SuperSideScroller`游戏项目，硬币将只有一个目的：给玩家一个目标，尽可能多地收集硬币，而不被敌人摧毁。
- en: 'Let''s break down the main aspects of our collectible:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解一下我们可收集物品的主要方面：
- en: The collectible needs to interact with our player; this means that we need to
    use collision detection for the player to collect it and for us to add information
    to our UI.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可收集物品需要与我们的玩家进行交互；这意味着我们需要使用碰撞检测让玩家收集它，并且为我们的UI添加信息。
- en: The collectible needs a visual static mesh representation so that the player
    can identify it in the level.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可收集物品需要一个视觉静态网格表示，以便玩家可以在关卡中识别它。
- en: 'The final element of our `SuperSideScroller` project is the brick block. The
    brick block will serve the following purposes for the `SuperSideScroller` game:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们`SuperSideScroller`项目的最后一个元素是砖块。砖块将为`SuperSideScroller`游戏提供以下用途：
- en: Bricks are used as an element of the level's design. Bricks can be used to access
    otherwise unreachable areas; enemies can be placed on different elevated sections
    of bricks to provide variation in gameplay.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 砖块被用作关卡设计的一个元素。砖块可以用来进入其他无法到达的区域；敌人可以放置在不同高度的砖块上，以提供游戏玩法的变化。
- en: Bricks can contain collectible coins. This gives the player an incentive to
    try and see which blocks contain collectibles and which do not.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 砖块中可以包含可收集的硬币。这给玩家一个动力去尝试并查看哪些方块包含可收集物品，哪些不包含。
- en: HUD (Heads-Up Display)
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HUD（头顶显示）
- en: The HUD UI can be used to display to the player important and relevant information,
    based on the type of game and the mechanics that you support. For the `SuperSideScroller`
    project, there will be one HUD element, which will display to the player how many
    coins they have collected. This UI will be updated each time the player collects
    a coin, and it will reset back to `0` when the player is destroyed.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: HUD UI可以用于根据游戏类型和您支持的机制向玩家显示重要和相关的信息。对于“SuperSideScroller”项目，将有一个HUD元素，它将向玩家显示他们收集了多少个硬币。每当玩家收集一个硬币时，此UI将更新，并且当玩家被销毁时将重置为“0”。
- en: Now that we have laid out some of the specifics that we will be working toward
    as part of this project, we will move on to the animation pipeline.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经列出了这个项目的一些具体内容，我们将继续进行动画流程。
- en: Steps in Animation
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画步骤
- en: To be clear, this book is not going to cover animation. We will not discuss
    and learn how to make animations using 3D software tools such as 3D Studio Max,
    Maya, or Blender. However, we will learn how to import these assets into Unreal
    Engine, use animation assets inside the engine, and use the animation toolsets
    available to bring our Characters to life.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 需要明确的是，本书不会涵盖动画制作。我们不会讨论和学习如何使用3D软件工具（如3D Studio Max、Maya或Blender）制作动画。然而，我们将学习如何将这些资产导入虚幻引擎，使用引擎内的动画资产，并使用可用的动画工具集来赋予角色生命。
- en: Character Animation Pipeline
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 角色动画流程
- en: For the purposes of this book, we will only be concerned with 3D animation and
    how animations work inside Unreal Engine 4; however, it's important to briefly
    discuss the pipeline used in many industries to create a Character and its animations.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本书的目的，我们只关注3D动画以及动画在虚幻引擎4中的工作方式；然而，简要讨论许多行业中用于创建角色及其动画的流程是很重要的。
- en: The Concept Stage
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概念阶段
- en: 'The first stage is developing a concept of the Character that we want to create
    and later animate. This is almost always done in 2D, either by hand or through
    the use of a computer using programs such as Photoshop. It makes the job easier
    for the 3D modeler to have several references for how a Character looks, and the
    relative size of the Character, before starting the process of modeling. Below,
    we see a basic example of a stick figure Character in different poses. Notice
    how the Character is posed in different ways:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 第一阶段是开发我们想要创建并稍后进行动画的角色的概念。这几乎总是以2D形式完成，可以手工完成，也可以通过使用诸如Photoshop之类的计算机程序完成。对于3D建模师来说，有几个关于角色外观和相对大小的参考图，可以使建模过程更加容易。下面，我们看到一个棍人角色在不同姿势下的基本示例。注意角色以不同的方式摆姿势：
- en: '![Figure 10.7: A very simple example of a 2D Character concept'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.7：一个2D角色概念的非常简单的例子'
- en: '](img/B16183_10_07.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_10_07.jpg)'
- en: 'Figure 10.7: A very simple example of a 2D Character concept'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.7：一个2D角色概念的非常简单的例子
- en: The 3D Modeling Stage
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3D建模阶段
- en: 'Once the Character concepts are complete, the pipeline can then move to the
    next stage: making a 3D model of the Character. Models are typically made in programs
    such as 3D Studio Max or Maya, but this software is relatively expensive, unless
    you have a student license, and is more often used in professional environments.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦角色概念完成，流程就可以转移到下一个阶段：制作角色的3D模型。模型通常是在3D Studio Max或Maya等程序中制作的，但这些软件相对昂贵，除非您有学生许可证，并且更常用于专业环境中。
- en: Without going into significant detail regarding the complexity of 3D modeling,
    all we need to know is that 3D artists use computer software to manipulate points
    in 3D space known as vertices to create objects. These objects are then sculpted
    into the shapes of our Characters or environment pieces.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 不需要详细讨论3D建模的复杂性，我们只需要知道3D艺术家使用计算机软件来操纵3D空间中的点（称为顶点）来创建物体。然后将这些物体雕刻成我们的角色或环境部件的形状。
- en: The Rigging Stage
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绑定阶段
- en: Once the final Character model is complete, it is ready to begin the rigging
    process. The software that was used to model the Character will usually be what
    is used to rig the Character. Rigging means building a series of bones that form
    the frame of a Character's skeleton.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦最终的角色模型完成，就可以开始绑定过程。通常用于建模角色的软件通常也用于绑定角色。绑定意味着构建一系列形成角色骨架的骨骼。
- en: In the case of humanoid Characters, we would typically see bones for the head,
    along the spine, the hips, the legs, and so on; but a skeleton can vary depending
    on the type of Character you are making. An elephant would have a completely different
    skeletal rig than a human. It is also possible for the same rig to be applied
    to different Characters.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在人形角色的情况下，我们通常会看到头部、脊柱、臀部、腿部等骨骼；但是骨架的形状可能会因您制作的角色类型而有所不同。大象的骨骼结构与人类完全不同。同一个骨骼结构也可以应用于不同的角色。
- en: Animation
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动画
- en: Once we have our Character rigged and a hierarchy of bones, it is time for the
    animator to take this mesh and bring it to life with animation.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们的角色绑定完成并且有了骨骼层次结构，就该是动画师拿起这个网格并用动画赋予它生命的时候了。
- en: 3D animation, in its most basic form, is the manipulation of skeletal bones
    over time. The process of recording the changes to bone position, rotation, and
    scale over time is what results in an animation. With the animation complete,
    we can export the asset from the 3D software and import it into the engine.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 3D动画，基本上是对骨骼在时间上的操纵。记录骨骼位置、旋转和缩放随时间的变化过程就是动画的结果。动画完成后，我们可以从3D软件中导出资产，并将其导入引擎。
- en: Asset Export and Import
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 资产导出和导入
- en: When we have our 3D Character mesh, its skeletal rig, and its animation, it's
    time to export these assets from the 3D software and import them into Unreal Engine
    4\. It is important to note that the artists working on the Character, the rig,
    and the animations will constantly be exporting work-in-progress assets into the
    engine to get a better idea of the final result as seen in-game. We will be implementing
    this later on in this chapter in *Activity 10.03*, *Importing More Custom Animations
    to Preview the Character Running*, and its accompanying exercise.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们有了我们的3D角色网格，它的骨骼系统和动画，就是时候将这些资产从3D软件导出并导入到虚幻引擎4中了。重要的是要注意，负责角色、骨骼和动画的艺术家们将不断地将正在进行中的工作资产导入引擎，以更好地了解最终在游戏中的效果。我们将在本章的*Activity
    10.03*、*导入更多自定义动画以预览角色奔跑*及其相关练习中实施这一点。
- en: 'Exercise 10.02: Exploring the Persona Editor and Manipulating the Default Mannequin
    Skeleton Weights'
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习10.02：探索Persona编辑器并操纵默认人体骨骼权重
- en: Now that we have a better understanding of the animation pipeline, let's go
    ahead and take a deeper look into the default mannequin skeletal mesh that is
    given to us in the `Side Scroller` template project.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对动画流程有了更好的理解，让我们深入了解一下在`Side Scroller`模板项目中给我们的默认人体骨骼网格。
- en: Our goal here is to learn more about the default skeletal mesh and the tools
    that are given to us in the Persona Editor so that we have a better understanding
    of how bones, bone weighting, and skeletons work inside Unreal Engine 4.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是更多地了解默认骨骼网格和Persona编辑器中给我们的工具，以便更好地了解骨骼、骨骼权重和骨骼在虚幻引擎4中的工作方式。
- en: 'The following steps will help you complete the exercise:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助您完成练习：
- en: Open the Unreal Engine Editor and navigate to `Content Browser`.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开虚幻引擎编辑器，导航到`内容浏览器`。
- en: 'Navigate to the `/Mannequin/Character/Mesh/` folder and open the `UE4_Mannequin_Skeleton`
    asset:![Figure 10.8: The UE4_Mannequin_Skeleton asset is highlighted and visible
    here'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`/Mannequin/Character/Mesh/`文件夹并打开`UE4_Mannequin_Skeleton`资产：![图10.8：UE4_Mannequin_Skeleton资产在此处被突出显示并可见
- en: '](img/B16183_10_08.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_10_08.jpg)'
- en: 'Figure 10.8: The UE4_Mannequin_Skeleton asset is highlighted and visible here'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.8：UE4_Mannequin_Skeleton资产在此处被突出显示并可见
- en: 'Upon opening the Skeleton asset, we are shown the `Persona Editor`:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 打开骨骼资产后，我们看到了`Persona编辑器`：
- en: '![Figure 10.9: The Persona Editor'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.9：Persona编辑器
- en: '](img/B16183_10_09.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_10_09.jpg)'
- en: 'Figure 10.9: The Persona Editor'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.9：Persona编辑器
- en: 'Let''s briefly break down the Skeleton Editor of Persona:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简要地解释一下Persona的骨骼编辑器：
- en: On the left-hand side (*marked with a 1*), we see the hierarchy of bones that
    exist in the Skeleton. This is the Skeleton that was made during the rigging process
    of this Character. The `root` bone, as the name suggests, is the root of the skeletal
    hierarchy. This means that transformative changes to this bone will affect all
    of the bones in the hierarchy. From here, we can select a bone or a section of
    bones and see where they are on the Character mesh.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在左侧（*标有1*）我们看到了骨骼层次结构。这是在角色的绑定过程中制作的骨骼。`root`骨骼，顾名思义，是骨骼层次结构的根。这意味着对这个骨骼的变换将影响层次结构中的所有骨骼。从这里，我们可以选择一个骨骼或一组骨骼，并查看它们在角色网格上的位置。
- en: Next, we see the Skeletal Mesh preview window (*marked with a 2*). It shows
    us our Character mesh, and there are several additional options that we can toggle
    on that will give us a preview of our Skeleton and weight painting.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，我们看到了骨骼网格预览窗口（*标有2*）。它显示了我们的角色网格，并且有一些额外的选项，我们可以切换这些选项，以便预览我们的骨骼和权重绘制。
- en: On the right-hand side (*marked with a 3*), we have basic transformation options
    where we can modify individual bones or groups of bones. There are also additional
    settings available that we will take advantage of in the next exercise. Now that
    we know more about what it is and what we are looking at, let's see what the actual
    Skeleton looks like on our mannequin.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在右侧（*标有3*）我们有基本的变换选项，可以修改单个骨骼或骨骼组。还有其他可用的设置，我们将在下一个练习中加以利用。现在我们更了解它是什么以及我们在看什么，让我们看看我们的人体骨骼网格上的实际骨架是什么样子。
- en: 'Navigate to `Character`, as shown in *Figure 10.10*:![Figure 10.10: The Character
    options menu gives you the ability to display the Skeleton of the mannequin over
    the mesh itself'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`Character`，如*图10.10*所示：![图10.10：角色选项菜单让您能够在网格上显示人体骨骼的能力
- en: '](img/B16183_10_10.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_10_10.jpg)'
- en: 'Figure 10.10: The Character options menu gives you the ability to display the
    Skeleton of the mannequin over the mesh itself'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.10：角色选项菜单让您能够在网格上显示人体骨骼的能力
- en: 'From the drop-down menu, select the `Bones` option. Then, make sure the option
    for `All Hierarchy` is selected. With this option selected, you will see the outlining
    Skeleton rendering above the mannequin mesh:![Figure 10.11: The Skeleton overlayed
    on top of the mannequin Skeletal Mesh'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉菜单中选择`Bones`选项。然后确保选择了`All Hierarchy`选项。选择此选项后，您将看到人体骨骼网格上方的轮廓骨架渲染在人体模型上方：![图10.11：骨架叠加在人体骨骼网格上
- en: '](img/B16183_10_11.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_10_11.jpg)'
- en: 'Figure 10.11: The Skeleton overlayed on top of the mannequin Skeletal Mesh'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.11：骨架叠加在人体骨骼网格上
- en: 'Now, hide the mesh and simply preview the skeletal hierarchy, for which we
    can disable the `Mesh` property:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，隐藏网格，只是预览骨骼层次结构，我们可以禁用`Mesh`属性：
- en: Navigate to `Character` and, from the drop-down menu, select the `Mesh` option.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导航到`Character`，从下拉菜单中选择`Mesh`选项。
- en: 'Deselect the option for `Mesh` and the result should be what we see below:![Figure
    10.12: The skeletal hierarchy of the default Character'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 取消`Mesh`选项，结果应该如下所示：![图10.12：默认角色的骨骼层次结构
- en: '](img/B16183_10_12.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_10_12.jpg)'
- en: 'Figure 10.12: The skeletal hierarchy of the default Character'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.12：默认角色的骨骼层次结构
- en: For the purposes of this exercise, let's toggle `Mesh` visibility back on so
    that we see both the mesh and the Skeleton hierarchy.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 为了本练习的目的，让我们切换`Mesh`可见性，这样我们就可以看到网格和骨骼层次结构。
- en: Finally, take a look together at the weight scaling for our default Character.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，一起看一下我们默认角色的权重缩放。
- en: 'To preview this, navigate to `Character` and, from the drop-down menu, select
    the `Mesh` option. Then, select the option for `Selected Bone Weight` toward the
    bottom in the section labeled `Mesh Overlay Drawing`:![Figure 10.13: Drop-down
    option to show the selected bone weight'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要预览此内容，请转到`Character`，然后从下拉菜单中选择`Mesh`选项。然后，在标有`Mesh Overlay Drawing`的部分底部选择`Selected
    Bone Weight`选项：![图10.13：下拉选项显示选定的骨骼权重
- en: of a bone for the mannequin
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 人体模型的骨骼权重
- en: '](img/B16183_10_13.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_10_13.jpg)'
- en: 'Figure 10.13: Drop-down option to show the selected bone weight of a bone for
    the mannequin'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.13：下拉选项显示人体模型骨骼的选定骨骼权重
- en: 'Now, if we select a bone or a group of bones from our hierarchy, we can see
    how each bone affects a certain area of our mesh:![Figure 10.14: This is the weight
    scaling for the spine_03 bone'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果我们从层次结构中选择一个骨骼或一组骨骼，我们可以看到每个骨骼如何影响网格的某个区域：![图10.14：这是spine_03骨的权重缩放
- en: '](img/B16183_10_14.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_10_14.jpg)'
- en: 'Figure 10.14: This is the weight scaling for the spine_03 bone'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.14：这是spine_03骨的权重缩放
- en: 'You will notice that when we are previewing the weight scaling for a particular
    bone, there is a spectrum of colors across different sections of the Skeletal
    Mesh. This is the weight scaling shown visually instead of numerically. Colors
    such as `red`, `orange`, and `yellow` indicate larger weighting for a bone, meaning
    that the highlighted area of the mesh in these colors will be more affected. In
    areas that are `blue`, `green`, and `cyan`, they will still be affected, but not
    as significantly. Lastly, areas that have no overlay highlight will not be affected
    at all by the manipulation of the selected bone. Keep in mind the hierarchy of
    the Skeleton because even though the left arm does not have an overlay color,
    it will still be affected when you are rotating, scaling, and moving the `spine_03`
    bone, since the arms are children of the `spine_03` bone. Please refer to the
    image below to see how the arms are connected to the spine:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到，当我们预览特定骨骼的权重缩放时，骨骼网格的不同部分会显示一系列颜色。这是权重缩放的视觉显示，而不是数值上的。诸如`红色`、`橙色`和`黄色`的颜色表示骨骼的权重较大，这意味着这些颜色的高亮区域将受到更大影响。在`蓝色`、`绿色`和`青色`的区域，它们仍会受到影响，但影响不那么显著。最后，没有高亮叠加的区域将不受选定骨骼的操作影响。请记住骨骼的层次结构，因为即使左臂没有叠加颜色，当您旋转、缩放和移动`spine_03`骨时，它仍会受到影响，因为手臂是`spine_03`骨的子级。请参考下面的图像，看看手臂是如何连接到脊柱的：
- en: '![Figure 10.15: The clavicle_l and clavicle_r bones are children of the spine_03
    bone'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.15：clavicle_l和clavicle_r骨是spine_03骨的子级'
- en: '](img/B16183_10_15.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_10_15.jpg)'
- en: 'Figure 10.15: The clavicle_l and clavicle_r bones are children of the spine_03
    bone'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.15：clavicle_l和clavicle_r骨是spine_03骨的子级
- en: Let's continue by manipulating one of the bones on the mannequin Skeletal Mesh
    and see how these changes affect its animation.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续操作人体模型骨骼网格中的一个骨骼，并看看这些变化如何影响其动画。
- en: 'In the Persona Editor, *left-click* the `thigh_l` bone in the skeletal hierarchy:![Figure
    10.16: Here, the thigh_l bone is selected'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Persona编辑器中，*左键单击*骨骼层次结构中的`thigh_l`骨：![图10.16：这里选择了thigh_l骨
- en: '](img/B16183_10_16.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_10_16.jpg)'
- en: 'Figure 10.16: Here, the thigh_l bone is selected'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.16：这里选择了thigh_l骨
- en: 'With the `thigh_l` bone selected, we have a clear indication of how the weight
    scaling will affect other parts of the mesh. Also, because of how the Skeleton
    is structured, any modifications to this bone will not impact the upper body of
    the mesh:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 选择`thigh_l`骨后，我们清楚地知道权重缩放将如何影响网格的其他部分。此外，由于骨骼的结构，对该骨骼的任何修改都不会影响网格的上半身：
- en: '![Figure 10.17: You can see that on the skeletal bone hierarchy, the thigh_l
    bone'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.17：您可以看到在骨骼层次结构中，大腿_l骨'
- en: is a child of the pelvis bone
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 是骨盆骨的子级
- en: '](img/B16183_10_17.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_10_17.jpg)'
- en: 'Figure 10.17: You can see that on the skeletal bone hierarchy, the thigh_l
    bone is a child of the pelvis bone'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.17：您可以看到，在骨骼层次结构中，大腿骨是骨盆骨的子级
- en: 'Using the knowledge from earlier chapters, change the Local Location, Local
    Rotation, and Scale values to offset the transform of the `thigh_l` bone. The
    image below shows an example of values to use.![Figure 10.18: The thigh_l values
    updated'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用前几章的知识，更改`thigh_l`骨的本地位置、本地旋转和比例值，以偏移骨骼的变换。下面的图像显示了要使用的值示例。![图10.18：更新的thigh_l值
- en: '](img/B16183_10_18.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_10_18.jpg)'
- en: 'Figure 10.18: The thigh_l values updated'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.18：大腿_l值已更新
- en: 'After making the changes to the bone transform, you will see that the mannequin''s
    left leg is completely changed and looks ridiculous:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 对骨骼变换进行更改后，您会看到人体模型的左腿完全改变，看起来很荒谬：
- en: '![Figure 10.19: The left leg of the Mannequin Character is completely changed'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.19：人体模型角色的左腿完全改变'
- en: '](img/B16183_10_19.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_10_19.jpg)'
- en: 'Figure 10.19: The left leg of the Mannequin Character is completely changed'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.19：人体模型角色的左腿完全改变
- en: Next, in the `Details` panel, head to the tab labeled `Preview Scene Settings`.
    *Left-click* this tab and you will see new options, displaying some default parameters
    and an `Animation` section.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在`Details`面板中，转到标有`Preview Scene Settings`的选项卡。*左键单击*此选项卡，您将看到新选项，显示一些默认参数和一个`Animation`部分。
- en: Use the `Animation` section to preview animations and how they are affected
    by the changes made to the Skeleton. For the `Preview Controller` parameter, change
    that to the `Use Specific Animation` option. By doing this, a new option labeled
    `Animation` will appear. The `Animation` parameter allows us to choose an animation
    associated with the Character Skeleton to preview.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`动画`部分预览动画以及它们如何受到对骨骼所做更改的影响。对于`预览控制器`参数，将其更改为`使用特定动画`选项。通过这样做，将出现一个名为`动画`的新选项。`动画`参数允许我们选择与角色骨骼关联的动画来预览。
- en: Next, *left-click* on the drop-down menu and select the `ThirdPersonWalk` animation.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，*左键单击*下拉菜单，选择`ThirdPersonWalk`动画。
- en: 'Finally, now you can see the mannequin Character playing the walking animation,
    but their left leg is completely misplaced and mis-scaled:![Figure 10.20: Preview
    of the updated animation for the mannequin Character'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，现在你可以看到模特角色正在播放行走动画，但他们的左腿完全错位和错缩：![图10.20：模特角色更新动画的预览
- en: '](img/B16183_10_20.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_10_20.jpg)'
- en: 'Figure 10.20: Preview of the updated animation for the mannequin Character'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.20：模特角色更新动画的预览
- en: Before moving on, make sure to return the `thigh_l` bone back to its original
    Local Location, Local Rotation, and Scale; otherwise, animations moving forward
    will not look correct.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，请确保将`thigh_l`骨骼恢复到其原始本地位置、本地旋转和比例；否则，向前进行的动画将不会看起来正确。
- en: Now that you have completed this final part of our second exercise, you have
    experienced first-hand how skeletal bones affect Characters and animations.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经完成了我们第二项练习的最后部分，亲身体验了骨骼对角色和动画的影响。
- en: Now, let's move on and perform our second activity to manipulate a different
    bone on the mannequin Character and observe the results of applying different animations.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续进行第二项活动，操作模特角色的不同骨骼并观察应用不同动画的结果。
- en: 'Activity 10.02: Skeletal Bone Manipulation and Animations'
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动10.02：骨骼操作和动画
- en: For this activity, we will put into practice the knowledge we have gained about
    manipulating bones on the default mannequin to affect how the animations are played
    out on the Skeleton.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这项活动，我们将实践我们对默认模特角色上的骨骼操作如何影响骨骼上的动画的知识。
- en: 'The following steps will help you complete this activity:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助您完成此活动：
- en: Select the bone that will affect the entire Skeleton.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择将影响整个骨骼的骨骼。
- en: Change the scale of this bone so that the Character is half its original size.
    Use these values to change `Scale` to (`X=0.500000, Y=0.500000, Z=0.500000`).
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改此骨骼的比例，使角色的尺寸减半。使用这些值将`Scale`更改为（`X=0.500000，Y=0.500000，Z=0.500000`）。
- en: 'Apply the running animation to this Skeletal Mesh from the `Preview Scene Settings`
    tab and observe the animation for the half-size Character:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将奔跑动画应用于`预览场景设置`选项卡中的这个骨骼网格，并观察半尺寸角色的动画：
- en: 'Here is the expected output:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是预期输出：
- en: '![Figure 10.21: Character that is halved in size performing the running animation'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.21：尺寸减半的角色执行奔跑动画'
- en: '](img/B16183_10_21.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_10_21.jpg)'
- en: 'Figure 10.21: Character that is halved in size performing the running animation'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.21：尺寸减半的角色执行奔跑动画
- en: Note
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The solution to this activity can be found at: [https://packt.live/338jEBx](https://packt.live/338jEBx).'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的解决方案可在以下网址找到：[https://packt.live/338jEBx](https://packt.live/338jEBx)。
- en: With this activity complete, you now have practical knowledge of how bone manipulation
    of Skeletons and Skeletal Meshes affects how animations are applied. You have
    also seen first-hand the effects of weight scaling for the bones of a Skeleton.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此活动后，您现在已经实际了解了骨骼和骨骼网格的骨骼操作如何影响动画的应用。您还亲身见证了对骨骼的权重缩放对骨骼的影响。
- en: Animations in Unreal Engine 4
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 虚幻引擎4中的动画
- en: 'Let''s break down the main aspects of animations as they function inside Unreal
    Engine. More in-depth information about the topics in this section can be found
    in the documentation that is available directly from Epic Games: [https://docs.unrealengine.com/en-US/Engine/Animation](https://docs.unrealengine.com/en-US/Engine/Animation).'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解动画在虚幻引擎内部的主要方面。关于本节中的主题的更深入信息可以在Epic Games的文档中直接找到：[https://docs.unrealengine.com/en-US/Engine/Animation](https://docs.unrealengine.com/en-US/Engine/Animation)。
- en: Skeletons
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 骨骼
- en: Skeletons are Unreal Engine's representation of the Character rig that was made
    in external 3D software; we saw this in *Activity 10.02*, *Skeletal Bone Manipulation
    and Animations*. There isn't much more to skeletons that we haven't discussed
    already, but the main takeaway is that once the Skeleton is in the engine, we
    can view the skeleton hierarchy, manipulate each individual bone, and add objects
    known as sockets. What sockets allow us to do is attach objects to the bones of
    our Character, and we can use these sockets to attach objects such as meshes and
    manipulate the transformation of the sockets without disrupting the bones' transformation.
    In first-person shooters, typically a weapon socket is made and attached to the
    appropriate hand.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 骨骼是虚幻引擎对外部3D软件中制作的角色骨骼的表示；我们在*活动10.02*，*骨骼操作和动画*中看到了这一点。关于骨骼，我们已经讨论过的内容并不多，但主要的要点是一旦骨骼在引擎中，我们可以查看骨骼层次结构，操作每个单独的骨骼，并添加称为插座的对象。插座允许我们将对象附加到角色的骨骼上，并且我们可以使用这些插座来附加对象，如网格，并且在不破坏骨骼变换的情况下操纵插座的变换。在第一人称射击游戏中，通常会制作武器插座并将其附加到适当的手部。
- en: Skeletal Meshes
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 骨骼网格
- en: A Skeletal Mesh is a specific kind of mesh that combines the 3D Character model
    and the hierarchy of bones that make up its skeleton. The main difference between
    a Static Mesh and a Skeletal Mesh is that Skeletal Meshes are required for objects
    that use animations, while Static Meshes cannot use animations due to their lack
    of skeleton. We will look more into our main Character Skeletal Mesh in the next
    chapter, but we will be importing our main Character Skeletal Mesh in *Activity
    10.03*, *Importing More Custom Animations to Preview the Character Running*, later
    in this chapter.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 骨骼网格是一种特定类型的网格，它结合了3D角色模型和构成其骨架的骨骼层次结构。静态网格和骨骼网格的主要区别在于，骨骼网格用于使用动画的对象，而静态网格由于缺乏骨架而无法使用动画。我们将在下一章更深入地研究我们的主角骨骼网格，但我们将在本章后面的*Activity
    10.03*中导入我们的主角骨骼网格，*导入更多自定义动画以预览角色奔跑*。
- en: Animation Sequences
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动画序列
- en: Finally, an animation sequence is an individual animation that can be played
    on a specific Skeletal Mesh; the mesh it applies to is determined by the Skeleton
    selected while importing the animation into the engine. We will look at importing
    our own Character Skeletal Mesh and a single animation asset together in *Activity
    10.03*, *Importing More Custom Animations to Preview the Character Running*.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，动画序列是一种可以在特定骨骼网格上播放的单独动画；它适用于的网格是在将动画导入到引擎时选择的骨架确定的。我们将在*Activity 10.03*中导入我们自己的角色骨骼网格和一个单独的动画资产，*导入更多自定义动画以预览角色奔跑*。
- en: 'Included in our animation sequence is a timeline that allows us to preview
    the animation frame by frame, with additional controls to pause, loop, rewind,
    and so on:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的动画序列中包含一个时间轴，允许我们逐帧预览动画，并附加了其他控件以暂停、循环、倒带等：
- en: '![Figure 10.22: The animation sequence timeline and preview window'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.22：动画序列时间轴和预览窗口'
- en: '](img/B16183_10_22.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_10_22.jpg)'
- en: 'Figure 10.22: The animation sequence timeline and preview window'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.22：动画序列时间轴和预览窗口
- en: In the following exercise, you will import a custom Character and an animation.
    The custom Character will include a Skeletal Mesh and a Skeleton, and the animation
    will be imported as an animation sequence.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的练习中，您将导入一个自定义角色和一个动画。自定义角色将包括一个骨骼网格和一个骨架，动画将被导入为动画序列。
- en: 'Exercise 10.03: Importing and Setting Up the Character and Animation'
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习10.03：导入和设置角色和动画
- en: For our final exercise, we will import our custom Character and a single animation
    that we will use for the `SuperSideScroller` game's main Character, as well as
    creating the necessary Character Blueprint and Animation Blueprint.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的最后一个练习，我们将导入我们自定义的角色和一个我们将用于“SuperSideScroller”游戏主角的动画，以及创建必要的角色蓝图和动画蓝图。
- en: Note
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Included with this chapter is a set of files in a folder labeled `Assets`,
    and it is these files that we will import into the engine. These assets come from
    Mixamo: [https://www.mixamo.com/](https://www.mixamo.com/); feel free to create
    an account and view the free 3D Character and animation content available there.'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 本章附带了一个名为“Assets”的文件夹中的一组文件，我们将导入这些文件到引擎中。这些资产来自Mixamo：[https://www.mixamo.com/](https://www.mixamo.com/)；请随意创建一个账户并查看那里提供的免费3D角色和动画内容。
- en: 'The `Assets` content is available on our GitHub: [https://packt.live/2IcXIOo](https://packt.live/2IcXIOo).'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: “Assets”内容可以在我们的GitHub上找到：[https://packt.live/2IcXIOo](https://packt.live/2IcXIOo)。
- en: 'The following steps will help you complete the exercise:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助您完成练习：
- en: Head to the Unreal Editor.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往虚幻编辑器。
- en: 'In `Content Browser`, create a new folder named `MainCharacter`. Within this
    folder, create two new folders called `Animation` and `Mesh`. Our `Content Browser`
    tab should now look like the image below:![Figure 10.23: Folders added in the
    MainCharacter directory in Content Browser'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“内容浏览器”中，创建一个名为“MainCharacter”的新文件夹。在这个文件夹中，创建两个名为“Animation”和“Mesh”的新文件夹。我们的“内容浏览器”选项卡现在应该看起来像下面的图片：![图10.23：在内容浏览器中的MainCharacter目录中添加的文件夹
- en: '](img/B16183_10_23.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_10_23.jpg)'
- en: 'Figure 10.23: Folders added in the MainCharacter directory in Content Browser'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.23：在内容浏览器中的MainCharacter目录中添加的文件夹
- en: Next, import our Character mesh. Inside the `Mesh` folder we created, *right-click*
    and select the `Import` option, which will open the File Explorer menu. Navigate
    to the directory where you saved the `Assets` folder that accompanies this chapter
    and find the `MainCharacter.fbx` asset inside the `Character Mesh` folder – for
    example, `\Assets\Character Mesh\MainCharacter.fbx` – and open that file.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，导入我们的角色模型。在我们创建的“Mesh”文件夹内，*右键单击*并选择“导入”选项，这将打开文件资源管理器菜单。导航到您保存了本章附带的“Assets”文件夹的目录，并找到“Character
    Mesh”文件夹内的“MainCharacter.fbx”资产，例如“\Assets\Character Mesh\MainCharacter.fbx”，然后打开该文件。
- en: When selecting this asset, the FBX import options window will appear. Make sure
    that the options for `Skeletal Mesh` and `Import Mesh` are set to `check` in their
    respective checkboxes and leave every other option set to its default setting.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择此资产时，将出现FBX导入选项窗口。确保在各自的复选框中将“骨骼网格”和“导入网格”的选项设置为“检查”，并将其他选项保持为默认设置。
- en: Lastly, we can select the `Import` option so that our FBX asset will be imported
    into the engine. This will include the necessary materials created within the
    FBX; a Physics Asset, which will automatically be created for us and assigned
    to the `Skeletal Mesh`; and the `Skeleton Asset`.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以选择“导入”选项，这样我们的FBX资产将被导入到引擎中。这将包括在FBX中创建的必要材质；一个物理资产，它将自动为我们创建并分配给“骨骼网格”；和“骨架资产”。
- en: Note
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Ignore any warnings that may appear when importing the `FBX` file; they are
    unimportant and will not affect our project moving forward.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 忽略导入“FBX”文件时可能出现的任何警告；它们不重要，不会影响我们未来的项目。
- en: Now that we have our Character, let's import an animation.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了角色，让我们导入一个动画。
- en: Inside our `Animation` folder in the `MainCharacter` folder directory, again
    *right-click* and select the option to `Import`.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“MainCharacter”文件夹目录中的“Animation”文件夹内，再次*右键单击*并选择“导入”选项。
- en: Navigate to the directory where you saved the `Assets` folder that accompanies
    this chapter and locate the `Idle.fbx` asset inside the `Animations/Idle` folder
    – for example, `\Assets\Animations\Idle\Idle.fbx` – and open that file.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到保存了本章配套`Assets`文件夹的目录，并在`Animations/Idle`文件夹中找到`Idle.fbx`资产，例如`\Assets\Animations\Idle\Idle.fbx`，然后打开该文件。
- en: 'When selecting this asset, an almost identical window will appear as when we
    imported our Character Skeletal Mesh. Since this asset is only an animation and
    not a Skeletal Mesh/Skeleton, we don''t have the same options as before, but there
    is one crucial parameter that we need to set correctly: `Skeleton`.'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 选择此资产时，将会出现一个几乎相同的窗口，就像我们导入角色骨骼网格时一样。由于这个资产只是一个动画，而不是骨骼网格/骨架，我们没有之前的选项，但有一个关键的参数需要正确设置：`骨架`。
- en: The `Skeleton` parameter under the `Mesh` category of our `FBX` import options
    tells the animation to which Skeleton the animation applies. Without this parameter
    set, we cannot import our animation, and applying the animation to the wrong Skeleton
    can have disastrous results or cause the animation to not import altogether. Luckily
    for us, our project is simple and we have already imported our Character Skeletal
    Mesh and Skeleton.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`FBX`导入选项的`网格`类别下的`骨架`参数告诉动画应用于哪个骨架。如果不设置这个参数，我们无法导入我们的动画，将动画应用于错误的骨架可能会产生灾难性的结果，或者导致动画根本无法导入。幸运的是，我们的项目很简单，我们已经导入了角色骨骼网格和骨架。
- en: 'Select `MainCharacter_Skeleton` and choose the option at the bottom, `Import`;
    leave all other parameters set to their defaults.![Figure 10.24: The settings
    when importing the Idle.fbx animation'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`MainCharacter_Skeleton`并选择底部的`导入`选项；将所有其他参数保持为默认设置。![图10.24：导入Idle.fbx动画时的设置
- en: '](img/B16183_10_24.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_10_24.jpg)'
- en: 'Figure 10.24: The settings when importing the Idle.fbx animation'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.24：导入Idle.fbx动画时的设置
- en: Now we know to import both a custom Character mesh and an animation. Understanding
    the importing process for both types of assets is crucial, and in the next activity,
    you will be challenged to import the remaining animations. Let's continue this
    exercise by creating both the Character Blueprint and the Animation Blueprint
    for the `SuperSideScroller` game's main Character.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道要导入自定义角色网格和动画。了解这两种类型资产的导入过程至关重要，在下一个活动中，您将被挑战导入剩余的动画。让我们继续通过为`SuperSideScroller`游戏的主角色创建角色蓝图和动画蓝图来进行这个练习。
- en: Now, although the Side Scroller template project does include a Blueprint for
    our Character and other assets such as an Animation Blueprint, we will want to
    create our own versions of these assets for the sake of organization and good
    practice as game developers.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，虽然侧向滚动模板项目确实包括了我们角色的蓝图和其他资产，比如动画蓝图，但为了组织和良好的开发实践，我们将要创建我们自己版本的这些资产。
- en: 'Create a new folder under our `MainCharacter` directory in `Content Browser`
    and name this folder `Blueprints`. In this directory, create a new Blueprint based
    on the `SideScrollerCharacter` class under `All Classes`. Name this new Blueprint
    `BP_SuperSideScroller_MainCharacter`:![Figure 10.25: The SideScrollerCharacter
    class to be used'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`内容浏览器`的`MainCharacter`目录下创建一个名为`蓝图`的新文件夹。在该目录中，基于`所有类`下的`SideScrollerCharacter`类创建一个新的蓝图。将这个新蓝图命名为`BP_SuperSideScroller_MainCharacter`：![图10.25：要使用的SideScrollerCharacter类
- en: as the parent class for our Character Blueprint
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 作为我们角色蓝图的父类
- en: '](img/B16183_10_25.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_10_25.jpg)'
- en: 'Figure 10.25: The SideScrollerCharacter class to be used as the parent class
    for our Character Blueprint'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.25：要用作角色蓝图父类的SideScrollerCharacter类
- en: 'In our `Blueprints` directory, *right-click* in an empty area of `Content Browser`,
    hover over the `Animation` option, and select `Animation Blueprint`:![Figure 10.26:
    The Animation Blueprint option under the Animation category'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`蓝图`目录中，在`内容浏览器`的空白区域*右键单击*，悬停在`动画`选项上，然后选择`动画蓝图`：![图10.26：动画类别下的动画蓝图选项
- en: '](img/B16183_10_26.jpg)'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_10_26.jpg)'
- en: 'Figure 10.26: The Animation Blueprint option under the Animation category'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.26：动画类别下的动画蓝图选项
- en: 'After we select this option, a new window will appear. This new window requires
    us to apply a parent class and a Skeleton to our Animation Blueprint. In our case,
    use `MainCharacter_Skeleton`, select OK and name the Animation Blueprint asset
    `AnimBP_SuperSideScroller_MainCharacter`:![Figure 10.27: The settings we need
    when creating our Animation Blueprint'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择此选项后，将会出现一个新窗口。这个新窗口要求我们为我们的动画蓝图应用一个父类和一个骨架。在我们的情况下，使用`MainCharacter_Skeleton`，选择确定，并将动画蓝图资产命名为`AnimBP_SuperSideScroller_MainCharacter`：![图10.27：创建动画蓝图时需要的设置
- en: '](img/B16183_10_27.jpg)'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_10_27.jpg)'
- en: 'Figure 10.27: The settings we need when creating our Animation Blueprint'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.27：创建动画蓝图时需要的设置
- en: 'When we open our Character Blueprint, `BP_SuperSideScroller_MainCharacter`,
    and select the `Mesh` component, we will find a handful of parameters that we
    can change:![Figure 10.28: The SuperSideScroller Character Blueprint using the
    mannequin Skeletal Mesh'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们打开我们的角色蓝图`BP_SuperSideScroller_MainCharacter`并选择`网格`组件时，我们会发现一些可以更改的参数：![图10.28：使用人体模型骨骼网格的SuperSideScroller角色蓝图
- en: '](img/B16183_10_28.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_10_28.jpg)'
- en: 'Figure 10.28: The SuperSideScroller Character Blueprint using the mannequin
    Skeletal Mesh'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.28：使用人体模型骨骼网格的SuperSideScroller角色蓝图
- en: 'Under the `Mesh` category, we have the option to update the `Skeletal Mesh`
    used. Find our `MainCharacter` Skeletal Mesh and assign it to this parameter:![Figure
    10.29: The settings we need for our Mesh component to properly'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`网格`类别下，我们有更新`骨骼网格`的选项。找到我们的`MainCharacter`骨骼网格并将其分配给这个参数：![图10.29：我们的网格组件需要的设置，以正确
- en: use our new Skeletal Mesh and our Animation Blueprint
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们的新骨骼网格和动画蓝图
- en: '](img/B16183_10_29.jpg)'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_10_29.jpg)'
- en: 'Figure 10.29: The settings we need for our Mesh component to properly use our
    new Skeletal Mesh and our Animation Blueprint'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.29：我们的网格组件需要的设置，以正确使用我们的新骨骼网格和动画蓝图
- en: While still in our Character Blueprint and with the `Mesh` component selected,
    we can find the `Animation` category just above the `Mesh` category. Luckily,
    by default, the `Animation Mode` parameter is already set to `Use Animation Blueprint`,
    which is the setting we need.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的角色蓝图中，选择`Mesh`组件后，我们可以在`Mesh`类别的正上方找到`Animation`类别。幸运的是，默认情况下，`Animation
    Mode`参数已经设置为`Use Animation Blueprint`，这是我们需要的设置。
- en: Now assign the `Anim` class parameter to our new Animation Blueprint, `AnimBP_SuperSideScroller_MainCharacter`.
    Finally, head back to our default `SideScrollerExampleMap` level and replace the
    default Character with our new Character Blueprint.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在将`Anim`类参数分配给我们的新动画蓝图，`AnimBP_SuperSideScroller_MainCharacter`。最后，返回到默认的`SideScrollerExampleMap`关卡，并用我们的新角色蓝图替换默认角色。
- en: 'Next, make sure that we have `BP_SuperSideScroller_MainCharacter` selected
    in our `Content Browser` and then *right-click* on the default Character in our
    map and choose to replace it with our new Character:![Figure 10.30: With the Character
    Blueprint selected in Content Browser, we can simply right-click on the default
    Character in the level and replace it with our new Character'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，请确保我们在`Content Browser`中选择了`BP_SuperSideScroller_MainCharacter`，然后*右键单击*关卡中的默认角色，并选择用我们的新角色替换它：![图10.30：在内容浏览器中选择角色蓝图后，我们可以简单地右键单击关卡中的默认角色，并用新角色替换它
- en: '](img/B16183_10_30.jpg)'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_10_30.jpg)'
- en: 'Figure 10.30: With the Character Blueprint selected in Content Browser, we
    can simply right-click on the default Character in the level and replace it with
    our new Character'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.30：在内容浏览器中选择角色蓝图后，我们可以简单地右键单击关卡中的默认角色，并用新角色替换它
- en: 'With our new Character in the level, we can now play in the editor and move
    around the level. The result should look something like the image below; our Character
    in the default T-pose is moving around the level environment:![Figure 10.31: You
    now have the custom Character running around the level'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在关卡中放置了我们的新角色后，我们现在可以在编辑器中进行游戏并在关卡中移动。结果应该看起来像下面的图片；我们的角色处于默认T形姿势并在关卡环境中移动：![图10.31：您现在有自定义角色在关卡中奔跑
- en: '](img/B16183_10_31.jpg)'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_10_31.jpg)'
- en: 'Figure 10.31: You now have the custom Character running around the level'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.31：您现在有自定义角色在关卡中奔跑
- en: With our final exercise complete, you now have a full understanding of how to
    import custom Skeletal Meshes and animations. Additionally, you learned how to
    create a Character Blueprint and an Animation Blueprint from scratch and how to
    use those assets to create the base of the `SuperSideScroller` Character.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 完成我们的最后一个练习后，您现在完全了解了如何导入自定义骨骼网格和动画。此外，您还学会了如何从头开始创建角色蓝图和动画蓝图，以及如何使用这些资产来创建`SuperSideScroller`角色的基础。
- en: Let's move on to the final activity of this chapter, where you will be challenged
    to import the remaining animations for the Character and to preview the running
    animation inside Persona Editor.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续进行本章的最后一个活动，在这个活动中，您将被挑战导入角色的剩余动画，并在Persona编辑器中预览奔跑动画。
- en: 'Activity 10.03: Importing More Custom Animations to Preview the Character Running'
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动10.03：导入更多自定义动画以预览角色奔跑
- en: This activity aims to import the remaining animations, such as running for the
    player Character, and to preview the running animation on the Character Skeleton
    to ensure that it looks correct.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 这个活动旨在导入剩余的动画，比如玩家角色的奔跑动画，并在角色骨架上预览奔跑动画，以确保它看起来正确。
- en: By the end of the activity, all of the player Character animations will be imported
    into the project and you will be ready to use these animations to bring the player
    Character to life in the next chapter.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在活动结束时，所有玩家角色动画将被导入项目中，您将准备好在下一章中使用这些动画来赋予玩家角色生命。
- en: 'The following steps will help you complete the activity:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助您完成该活动：
- en: As a reminder, all of the animation assets we need to import exist in the `\Assets\Animations`
    directory, wherever you may have saved the original `zip` folder. Import all of
    the remaining animations in the `MainCharacter/Animation` folder. Importing the
    remaining animation assets will work the same way as in *Exercise 10.03*, *Importing
    and Setting Up the Character and Animation*, when you imported the `Idle` animation.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为提醒，我们需要导入的所有动画资产都存在于`\Assets\Animations`目录中，无论您将原始`zip`文件夹保存在何处。导入`MainCharacter/Animation`文件夹中的所有剩余动画。导入剩余的动画资产将与*练习10.03*中的*导入和设置角色和动画*相同，当您导入`Idle`动画时。
- en: Navigate to the `MainCharacter` skeleton and apply the `Running` animation you
    imported in the previous step.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`MainCharacter`骨架，并应用您在上一步中导入的`Running`动画。
- en: Finally, with the `Running` animation applied, preview the Character animation
    in the Persona Editor.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，应用`Running`动画后，在Persona编辑器中预览角色动画。
- en: 'Here is the expected output:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是预期输出：
- en: '![Figure 10.32: The expected output of the Character with additional custom
    imported assets'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.32：带有额外自定义导入资产的角色的预期输出'
- en: '](img/B16183_10_32.jpg)'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_10_32.jpg)'
- en: 'Figure 10.32: The expected output of the Character with additional custom imported
    assets'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.32：带有额外自定义导入资产的角色的预期输出
- en: Note
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The solution to this activity can be found at: [https://packt.live/338jEBx](https://packt.live/338jEBx).'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的解决方案可在以下网址找到：[https://packt.live/338jEBx](https://packt.live/338jEBx)。
- en: With this final activity completed, you have now experienced first-hand the
    process of importing custom skeletal and animation assets into Unreal Engine 4\.
    The import process, regardless of the type of asset you are importing, is commonplace
    in the games industry and it's vital that you are comfortable with it.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这个最后的活动后，您现在已经第一手体验了将自定义骨骼和动画资产导入虚幻引擎4的过程。无论您导入的资产类型如何，导入过程在游戏行业中很常见，您对此应该感到舒适。
- en: Summary
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: With the player Character Skeleton, Skeletal Mesh, and animations imported into
    the engine, we can move on to the next chapter, where you will prepare the Character
    movement and UpdateAnimation Blueprint so that the Character can animate while
    moving around the level.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 有了玩家角色的骨骼、骨骼网格和动画导入到引擎中，我们可以继续进行下一章，在那里您将准备角色移动和UpdateAnimation蓝图，以便角色在关卡中移动时能够进行动画。
- en: From the exercises and activities of this chapter, you learned about how the
    Skeleton and bones are used to animate and manipulate the Character. With first-hand
    experience of importing and applying animations into Unreal Engine 4, you now
    have a strong understanding of the animation pipeline, from the Character concept
    to the final assets being imported for your project.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章的练习和活动，您了解了骨骼和骨骼如何用于给角色添加动画和操纵。通过第一手经验将动画导入并应用到虚幻引擎4中，您现在对动画流程有了深刻的理解，从角色概念到最终导入项目的资产。
- en: Additionally, you have learned about topics that we will use in the next chapter,
    such as blend spaces for Character movement animation blending. With the `SuperSideScroller`
    project template created and the player Character ready, in the next chapter,
    let's move on to animating the Character with an Animation Blueprint.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还学习了我们将在下一章中使用的主题，比如用于角色移动动画混合的混合空间。有了创建的“SuperSideScroller”项目模板和玩家角色准备就绪，在下一章中，让我们开始使用动画蓝图为角色添加动画。
