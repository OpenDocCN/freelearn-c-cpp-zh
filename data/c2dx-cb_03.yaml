- en: Chapter 3. Working with Labels
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章. 使用标签
- en: 'In this chapter, we''re going to create labels. To display labels on the screen,
    you can use the `Label` class with system fonts, true type fonts, and bitmap fonts.
    The following topics will be covered in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将创建标签。要在屏幕上显示标签，您可以使用带有系统字体、真型字体和位图字体的 `Label` 类。本章将涵盖以下主题：
- en: Creating system font labels
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建系统字体标签
- en: Creating true type font labels
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建真型字体标签
- en: Creating bitmap font labels
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建位图字体标签
- en: Creating rich text
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建丰富文本
- en: Creating system font labels
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建系统字体标签
- en: Firstly, we will explain how to create a label with system fonts. System fonts
    are the fonts already installed on your devices. Since they are already installed,
    there is no need to go through the installation process. Therefore we will skip
    the installation instructions for system fonts in this recipe, and dive directly
    into creating labels.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将解释如何使用系统字体创建标签。系统字体是已安装在您的设备上的字体。由于它们已经安装，因此无需经过安装过程。因此，我们将跳过此配方中系统字体的安装说明，并直接进入创建标签。
- en: How to do it...
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'Here''s how to create a label by specifying a system font. You can create a
    single-line label by using the following code:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这是如何通过指定系统字体创建标签的方法。您可以使用以下代码创建单行标签：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![How to do it...](img/B00561_03_01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![如何做到...](img/B00561_03_01.jpg)'
- en: How it works...
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: You should use the `Label` class to display strings by specifying a string,
    a system font, and the font size. The `Label` class will display a string that
    is converted into an image. After creating a `Label` instance, you can use it
    in the same way as you use `Sprite`. Because `Label` is also a Node, we can use
    properties such as actions, scaling, and opacity functions to manipulate the labels.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该使用 `Label` 类通过指定一个字符串、系统字体和字体大小来显示字符串。`Label` 类将显示一个转换为图像的字符串。在创建 `Label`
    实例后，您可以像使用 `Sprite` 一样使用它。因为 `Label` 也是一个节点，我们可以使用动作、缩放和透明度函数等属性来操作标签。
- en: Line break
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 换行
- en: 'You can also add a new line at any position by putting a line feed code into
    a string:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在字符串中的任何位置添加新行，只需将换行符代码放入字符串中即可：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![Line break](img/B00561_03_02.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![换行](img/B00561_03_02.jpg)'
- en: Text align
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文本对齐
- en: You can also specify the text alignment in both the horizontal and the vertical
    directions.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在水平和垂直方向上指定文本对齐。
- en: '| Text alignment type | Description |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| 文本对齐类型 | 描述 |'
- en: '| --- | --- |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `TextHAlignment::LEFT` | Aligns text horizontally to the left. This is the
    default value for horizontal alignment. |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `TextHAlignment::LEFT` | 将文本水平对齐到左侧。这是水平对齐的默认值。 |'
- en: '| `TextHAlignment::CENTER` | Aligns text horizontally to the center. |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `TextHAlignment::CENTER` | 将文本水平对齐到中心。 |'
- en: '| `TextHAlignment::RIGHT` | Aligns text horizontally to the right. |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `TextHAlignment::RIGHT` | 将文本水平对齐到右侧。 |'
- en: '| `TextVAlignment::TOP` | Aligns text vertically to the top. This is the default
    value for vertical alignment. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `TextVAlignment::TOP` | 将文本垂直对齐到顶部。这是垂直对齐的默认值。 |'
- en: '| `TextVAlignment::CENTER` | Aligns text vertically to the center. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `TextVAlignment::CENTER` | 将文本垂直对齐到中心。 |'
- en: '| `TextVAlignment::BOTTOM` | Aligns text vertically to the bottom. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `TextVAlignment::BOTTOM` | 将文本垂直对齐到底部。 |'
- en: 'The following code is used for aligning text horizontally to the center:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码用于将文本水平对齐到中心：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![Text align](img/B00561_03_03.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![文本对齐](img/B00561_03_03.jpg)'
- en: There's more...
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'You can also update the string after creating the label. If you want to update
    the string once every second, you can do so by setting the timer as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以在创建标签后更新字符串。如果您想每秒更新一次字符串，可以通过设置以下计时器来实现：
- en: 'First, edit `HelloWorld.h` as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，按照以下方式编辑 `HelloWorld.h`：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, edit `HelloWorld.cpp` as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，按照以下方式编辑 `HelloWorld.cpp`：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: First, you have to define an integer variable in the header file. Second, you
    need to create a label and add it on the layer. Next, you need to set the scheduler
    to execute the function every second. Then you can update the string by using
    the `setString` method.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您必须在头文件中定义一个整型变量。其次，您需要创建一个标签并将其添加到层上。然后，您需要设置调度器每秒执行函数。然后您可以通过使用 `setString`
    方法来更新字符串。
- en: Tip
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You can convert an int or float value to a string value by using the `StringUtils::toString`
    method.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `StringUtils::toString` 方法将整型或浮点值转换为字符串值。
- en: A scheduler can execute the method at a specified interval. We will explain
    how the scheduler works in [Chapter 4](ch04.html "Chapter 4. Building Scenes and
    Layers"), *Building Scenes and Layers*. Refer to it for more details on the scheduler.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 调度器可以在指定的时间间隔执行方法。我们将在[第4章](ch04.html "第4章. 构建场景和层")中解释调度器的工作原理，*构建场景和层*。请参阅它以获取有关调度器的更多详细信息。
- en: Creating true type font labels
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建真型字体标签
- en: In this recipe, we will explain how to create a label with true type fonts.
    True type fonts are fonts that you can install into your project. Cocos2d-x's
    project already has two true type fonts, namely `arial.ttf` and `Maker Felt.ttf`,
    which are present in the `Resources/fonts` folder.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将解释如何使用真型字体创建标签。真型字体是可以安装到项目中的字体。Cocos2d-x的项目已经包含了两个真型字体，即`arial.ttf`和`Marker
    Felt.ttf`，它们位于`Resources/fonts`文件夹中。
- en: How to do it...
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Here''s how to create a label by specifying a true type font. The following
    code can be used for creating a single-line label by using a true type font:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是如何通过指定真型字体来创建标签的方法。以下代码可以用来创建一个单行标签，使用真型字体：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![How to do it...](img/B00561_03_04.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/B00561_03_04.jpg)'
- en: How it works...
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: You can create a `Label` with a true type font by specifying a label string,
    the path to the true type font, and the font size. The true type fonts are located
    in the `font` folder of `Resources`. Cocos2d-x has two true type fonts, namely
    `arial.ttf` and `Marker Felt.ttf`. You can generate `Label` objects of different
    font sizes from one true type font file. If you want to add a true type font,
    you can use a original true type font if you added it into the `font` folder.
    However, a true type font is slower than a bitmap font with respect to rendering,
    and changing properties such as the font face and size is an expensive operation.
    You have to be careful to not update it frequently.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过指定标签字符串、真型字体的路径和字体大小来创建一个具有真型字体的`Label`。真型字体位于`Resources`文件夹的`font`文件夹中。Cocos2d-x有两个真型字体，即`arial.ttf`和`Marker
    Felt.ttf`，它们位于`Resources/fonts`文件夹中。你可以从一个真型字体文件中生成不同字号的`Label`对象。如果你想要添加真型字体，如果你将其添加到`font`文件夹中，你可以使用原始的真型字体。然而，与位图字体相比，在渲染方面，真型字体较慢，并且更改字体样式和大小等属性是一个昂贵的操作。你必须小心不要频繁更新它。
- en: There's more...
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'If you want to create a lot of `Label` objects that have the same properties
    from a true type font, you can create them by specifying `TTFConfig`. `TTFConfig`
    has properties that are required by a true type font. You can create a label by
    using `TTFConfig` as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要创建很多具有相同属性的`Label`对象，你可以通过指定`TTFConfig`来创建它们。`TTFConfig`具有真型字体所需的属性。你可以使用以下方式通过`TTFConfig`创建标签：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: A `TTFConfig` object allows you to set some labels that have the same properties.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`TTFConfig`对象允许你设置一些具有相同属性的标签。'
- en: 'If you want to change the color of `Label`, you can change its color property.
    For instance, by using the following code, you can change the color to `RED`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要改变`Label`的颜色，你可以改变它的颜色属性。例如，使用以下代码，你可以将颜色改为`RED`：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: See also
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: You can set effects to labels. Please check the last recipe in this chapter.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以为标签设置效果。请查看本章的最后一个食谱。
- en: Creating bitmap font labels
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建位图字体标签
- en: Lastly, we will explain how to create a label with bitmap type fonts. Bitmap
    fonts are also fonts that you can install into your project. A bitmap font is
    essentially an image file that contains a bunch of characters and a control file
    that details the size and location of each character within the image. If you
    use bitmap fonts in your game, you can see that the bitmap fonts will be the same
    size on all devices.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将解释如何创建位图类型的标签。位图字体也是你可以安装到项目中的字体。位图字体本质上是一个包含大量字符和控制文件的图像文件，该控制文件详细说明了图像中每个字符的大小和位置。如果你在游戏中使用位图字体，你会看到位图字体在所有设备上大小相同。
- en: Getting ready
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You have to prepare a bitmap font. You can create it by using a tool such as
    `GlyphDesigner`. We will explain this tool after [Chapter 10](ch10.html "Chapter 10. Improving
    Games with Extra Features"), *Improving Games with Extra Features*. Now, we will
    use a bitmap font in Cocos2d-x. It is located in the `COCOS_ROOT/tests/cpp-tests/Resources/fonts`
    folder. To begin with, you will have to add the files mentioned below to your
    `Resources/fonts` folder in your project.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须准备一个位图字体。您可以使用`GlyphDesigner`等工具创建它。我们将在[第10章](ch10.html "第10章。使用额外功能改进游戏")*使用额外功能改进游戏*之后解释这个工具。现在，我们将使用Cocos2d-x中的位图字体。它位于`COCOS_ROOT/tests/cpp-tests/Resources/fonts`文件夹中。首先，您必须将以下文件添加到您的项目中`Resources/fonts`文件夹中。
- en: '`future-48.fnt`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`future-48.fnt`'
- en: '`future-48.png`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`future-48.png`'
- en: How to do it...
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Here''s how to create a label by specifying a bitmap font. The following code
    can be used for creating a single-line label using a bitmap font:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如此通过指定位图字体创建标签。以下代码可以用于使用位图字体创建单行标签：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![How to do it...](img/B00561_03_05.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/B00561_03_05.jpg)'
- en: How it works...
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'You can create `Label` with a bitmap font by specifying a `label` string, the
    path to the true type font, and the font size. The characters in a bitmap font
    are made up of a matrix of dots. This font renders very fast but is not scalable.
    That''s why it has a fixed font size when generated. A bitmap font requires the
    following two files: an .fnt file and a `.png` file.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过指定`label`字符串、真型字体路径和字体大小来创建具有位图字体的`Label`。位图字体中的字符由点阵组成。这种字体渲染速度很快，但不可缩放。这就是为什么它在生成时具有固定字体大小。位图字体需要以下两个文件：一个.fnt文件和一个`.png`文件。
- en: There's more...
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: 'Each character in `Label` is a `Sprite`. This means that each character can
    be rotated or scaled and has other changeable properties:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`Label`中的每个字符都是一个`Sprite`。这意味着每个字符都可以旋转或缩放，并且具有其他可更改的属性：'
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![There''s more...](img/B00561_03_06.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![更多...](img/B00561_03_06.jpg)'
- en: Creating rich text
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建富文本
- en: After creating `Label` objects on screen, you can create some effects such as
    a drop shadow and an outline on them easily without having your own custom class.
    The `Label` class can be used for applying the effects to these objects. However,
    note that not all label types support all effects.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在屏幕上创建`Label`对象后，您可以在它们上轻松创建一些效果，如阴影和轮廓，而无需创建自己的自定义类。`Label`类可以用于将这些效果应用于这些对象。但是请注意，并非所有标签类型都支持所有效果。
- en: How to do it...
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Drop shadow
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阴影
- en: 'Here''s how to create `Label` with a drop shadow effect:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如此创建具有阴影效果的`标签`：
- en: '[PRE10]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![Drop shadow](img/B00561_03_07.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![阴影](img/B00561_03_07.jpg)'
- en: Outline
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 轮廓
- en: 'Here''s how to create `Label` with an outline effect:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如此创建具有轮廓效果的`标签`：
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![Outline](img/B00561_03_08.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![轮廓](img/B00561_03_08.jpg)'
- en: Glow
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发光
- en: 'Here''s how to create `Label` with a glow effect:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如此创建具有发光效果的`标签`：
- en: '[PRE12]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![Glow](img/B00561_03_09.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![发光](img/B00561_03_09.jpg)'
- en: How it works...
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Firstly, we generate a gray layer and change the background color to gray because
    otherwise we will not be able to see the shadow effect. Adding the effect to the
    label is very easy. You need to generate a `Label` instance and execute an effect
    method such as `enableShadow()`. This can be executed without arguments. The `enableOutline()`
    has two arguments, namely the outline color and the outline size. The outline
    size has a default value of -1\. If it has a negative value, the outline does
    not show. Next, you have to set the second argument. The `enableGlow` method has
    only one argument, namely glow color.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们生成一个灰色图层并将背景颜色改为灰色，因为否则我们无法看到阴影效果。将效果添加到标签中非常简单。您需要生成一个`Label`实例并执行一个效果方法，例如`enableShadow()`。这可以无参数执行。`enableOutline()`有两个参数，即轮廓颜色和轮廓大小。轮廓大小有一个默认值-1。如果它有负值，则轮廓不会显示。接下来，您必须设置第二个参数。`enableGlow`方法只有一个参数，即发光颜色。
- en: Not all label types support all effects, but all label types support the drop
    shadow effect. The `Outline` and `Glow` effects are true type font effects only.
    In previous versions, we had to create our own custom fonts class if we wanted
    to apply effects to labels. However, the current version of Cocos2d-x, version
    3, supports label effects such as drop shadow, outline, and glow.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有标签类型都支持所有效果，但所有标签类型都支持阴影效果。`Outline`和`Glow`效果仅适用于真型字体。在之前的版本中，如果我们想在标签上应用效果，我们必须创建自己的自定义字体类。然而，当前版本的Cocos2d-x，版本3，支持标签效果，如阴影、轮廓和发光。
- en: There's more...
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: You can also change the shadow color and the offset. The first argument is shadow
    color, the second argument is the offset, and third argument is the blur radius.
    However, unfortunately, changing the blur radius is not supported in Cocos2d-x
    version 3.4.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以更改阴影颜色和偏移量。第一个参数是阴影颜色，第二个参数是偏移量，第三个参数是模糊半径。然而，不幸的是，在 Cocos2d-x 版本 3.4 中不支持更改模糊半径。
- en: '[PRE13]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'It is also possible to set two or more of these effects at the same time. The
    following code can be used for setting the shadow and outline effects for a label:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 同时设置两个或更多这些效果也是可能的。以下代码可以用于设置标签的阴影和轮廓效果：
- en: '[PRE14]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![There''s more...](img/B00561_03_10.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/B00561_03_10.jpg)'
