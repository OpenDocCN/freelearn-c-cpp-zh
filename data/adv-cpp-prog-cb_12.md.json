["```cpp\n> sudo apt-get install build-essential git cmake \n```", "```cpp\n> sudo apt-get install build-essential git cmake\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter12\n```", "```cpp\n> cmake .\n> make recipe01_examples\n```", "```cpp\n> ./recipe01_example01\ni1 = int\ni2 = int\ni3 = std::initializer_list<int>\ni4 = std::initializer_list<int>\nc = char\nr = int\n\n> ./recipe01_example02\ni1 = int\ni2 = const int\ni3 = volatile int\ni4 = const volatile int\n\n> ./recipe01_example03\ni1 = int\ni2 = int&\na1 = int\na2 = int\na3 = int\na4 = int&\ni3 = int&&\na5 = int&\na6 = int&\na7 = int&\na8 = int&\na9 = int&&\na10 = int&&\n\n> ./recipe01_example04\ni1 = int\ni2 = const int&\ni3 = const int&&\n```", "```cpp\nstd::any i = 42;\ni = \"The answer is: 42\";\n```", "```cpp\nauto i = 42;\ni = \"The answer is: 42\";\n```", "```cpp\nint main(void)\n{\n    auto i1 = 42;\n    auto i2{42};\n    auto i3 = {42};\n    auto i4 = {4, 8, 15, 16, 23, 42};\n\n    show_type(i1);\n    show_type(i2);\n    show_type(i3);\n    show_type(i4);\n\n    char c = 0;\n    auto r = c + 42;\n\n    show_type(c);\n    show_type(r);\n}\n```", "```cpp\nint main(void)\n{\n    auto i1 = 42;\n    const auto i2 = 42;\n    volatile auto i3 = 42;\n    const volatile auto i4 = 42;\n\n    show_type(i1);\n    show_type(i2);\n    show_type(i3);\n    show_type(i4);\n}\n```", "```cpp\nint main(void)\n{\n    int i = 42;\n\n    int i1 = i;\n    int &i2 = i;\n\n    show_type(i1);\n    show_type(i2);\n\n    auto a1 = i1;\n    auto a2 = i2;\n\n    show_type(a1);\n    show_type(a2);\n}\n```", "```cpp\ni1 = int\ni2 = int&\na1 = int\na2 = int\n```", "```cpp\nauto a3 = i1;\nauto &a4 = i2;\n\nshow_type(a3);\nshow_type(a4);\n```", "```cpp\na3 = int\na4 = int&\n```", "```cpp\nint &&i3 = std::move(i);\nshow_type(i3);\n```", "```cpp\ni3 = int&&\n```", "```cpp\nauto &&a5 = i3;\nshow_type(a6);\n```", "```cpp\na5 = int&\n```", "```cpp\nauto &&a6 = i1;\nshow_type(a6);\n```", "```cpp\na6 = int&\n```", "```cpp\nauto &&a7 = i2;\nshow_type(a7);\n```", "```cpp\na7 = int&\n```", "```cpp\nauto &&a8 = i3;\nshow_type(a8);\n```", "```cpp\na8 = int&\n```", "```cpp\nauto &&a9 = std::move(i3);\nshow_type(a9);\n```", "```cpp\na9 = int&&\n```", "```cpp\nauto &&a10 = 42;\nshow_type(a10);\n```", "```cpp\na10 = int&&\n```", "```cpp\nint main(void)\n{\n    const int i = 42;\n\n    auto i1 = i;\n    auto &i2 = i;\n    auto &&i3 = std::move(i);\n\n    show_type(i1);\n    show_type(i2);\n    show_type(i3);\n}\n```", "```cpp\n> sudo apt-get install build-essential git cmake\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter12\n```", "```cpp\n> cmake .\n> make recipe02_examples\n```", "```cpp\n> ./recipe02_example01\ni = int\n\n> ./recipe02_example02\ni = short int\n\n> ./recipe02_example03\ni = short int\n\n> ./recipe02_example04\ni1 = int\ni2 = int\n\n> ./recipe02_example05\ni1 = int\ni2 = const int\ni3 = volatile int\ni4 = const volatile int\n\n> ./recipe02_example06\ni1 = int\ni2 = int&\ni3 = int&&\na1 = int\na2 = int\na3 = int\na4 = int\na5 = int&\na6 = int&&\nd1 = int\nd2 = int&\nd3 = int&&\n```", "```cpp\ntemplate<typename FUNC>\nauto question(FUNC &&func)\n{\n    auto x = func() + 10;\n    return x;\n}\n```", "```cpp\nshort the_answer()\n{\n    return 32;\n}\n\nint main(void)\n{\n    auto i = question(the_answer);\n    show_type(i);\n}\n```", "```cpp\ntemplate<typename FUNC>\nauto question(FUNC &&func)\n{\n    decltype(func()) x = func() + 10;\n    return x;\n}\n```", "```cpp\nshort question(short(*func)())\n{\n    short x = func() + 10;\n    return x;\n}\n```", "```cpp\nint question(short(*func)())\n{\n    int x = func() + 10;\n    return x;\n}\n```", "```cpp\ntemplate<typename FUNC>\nconstexpr auto question(FUNC &&func) -> decltype(func())\n{\n    return func() + 10;\n}\n```", "```cpp\ntemplate<typename FUNC>\nconstexpr decltype(func()) question(FUNC &&func)\n{\n    return func() + 10;\n}\n```", "```cpp\nint main(void)\n{\n    decltype(auto) i1 = 42;\n    decltype(auto) i2{42};\n\n    show_type(i1);\n    show_type(i2);\n}\n```", "```cpp\nint main(void)\n{\n    decltype(auto) i1 = 42;\n    const decltype(auto) i2 = 42;\n    volatile decltype(auto) i3 = 42;\n    const volatile decltype(auto) i4 = 42;\n\n    show_type(i1);\n    show_type(i2);\n    show_type(i3);\n    show_type(i4);\n}\n```", "```cpp\nint main(void)\n{\n    int i = 42;\n\n    int i1 = i;\n    int &i2 = i;\n    int &&i3 = std::move(i);\n\n    show_type(i1);\n    show_type(i2);\n    show_type(i3);\n}\n```", "```cpp\ni1 = int\ni2 = int&\ni3 = int&&\n```", "```cpp\nauto a1 = i1;\nauto a2 = i2;\nauto a3 = std::move(i3);\n\nshow_type(a1);\nshow_type(a2);\nshow_type(a3);\n```", "```cpp\na1 = int\na2 = int\na3 = int\n```", "```cpp\nauto a4 = i1;\nauto &a5 = i2;\nauto &&a6 = std::move(i3);\n\nshow_type(a4);\nshow_type(a5);\nshow_type(a6);\n```", "```cpp\na4 = int\na5 = int&\na6 = int&&\n```", "```cpp\ndecltype(auto) d1 = i1;\ndecltype(auto) d2 = i2;\ndecltype(auto) d3 = std::move(i3);\n\nshow_type(d1);\nshow_type(d2);\nshow_type(d3);\n```", "```cpp\nd1 = int\nd2 = int&\nd3 = int&&\n```", "```cpp\n> sudo apt-get install build-essential git cmake\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter12\n```", "```cpp\n> cmake .\n> make recipe03_examples\n```", "```cpp\n> ./recipe03_example01 \nt = int\nt = int\n\n> ./recipe03_example02\nt = const int&\n\n> ./recipe03_example03\nt = int&\n\n> ./recipe03_example04\nt = int&\n\n> ./recipe03_example05\nt = int&&\n\n> ./recipe03_example06\nt = int&&\n\n> ./recipe03_example07\nt = const int&\n\n> ./recipe03_example08\nt = const int&&\n\n> ./recipe03_example09\nt = int (&&)[6]\n```", "```cpp\ntemplate<typename T>\nvoid foo(T t)\n{\n    show_type(t);\n}\n```", "```cpp\nint main(void)\n{\n    int i = 42;\n\n    foo<int>(i);\n    foo<int>(42);\n}\n```", "```cpp\nint main(void)\n{\n    int i = 42;\n\n    foo(i);\n    foo(42);\n}\n```", "```cpp\ntemplate<typename T>\nvoid foo(T &&t)\n{\n    show_type(t);\n}\n```", "```cpp\nint main(void)\n{\n    int i = 42;\n    foo(i);\n}\n```", "```cpp\nint main(void)\n{\n    int i = 42;\n    foo(std::move(i));\n}\n```", "```cpp\ntemplate<typename T>\nvoid foo(T &&t)\n```", "```cpp\ntemplate<typename T>\nvoid foo(const T &&t)\n```", "```cpp\nvoid foo(int &&t)\n```", "```cpp\nstd::is_rvalue_reference_v<decltype(t)>\n```", "```cpp\ntemplate<typename T, size_t N>\nvoid foo(T (&&t)[N])\n{\n    show_type(t);\n}\n```", "```cpp\nint main(void)\n{\n    foo({4, 8, 15, 16, 23, 42});\n}\n```", "```cpp\n> sudo apt-get install build-essential git cmake\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter12\n```", "```cpp\n> cmake .\n> make recipe04_examples\n```", "```cpp\n> ./recipe04_example01\nt = int\nt = int\n\n> ./recipe04_example02\nt = int&\n\n> ./recipe04_example03\nt = int&&\nt = int&&\n\n> ./recipe04_example04\nt = int&&\nu = int&\n\n> ./recipe04_example05\nt = int&&\n\n> ./recipe04_example06\nt = const char (&)[16]\nu = int&&\n```", "```cpp\ntemplate<typename T>\nclass the_answer\n{\n\npublic:\n    the_answer(T t)\n    {\n        show_type(t);\n    }\n};\n```", "```cpp\nint main(void)\n{\n    the_answer<int> is(42);\n}\n```", "```cpp\nint main(void)\n{\n    the_answer is(42);\n}\n```", "```cpp\ntemplate<typename T>\nclass the_answer\n{\n\npublic:\n    the_answer(T &t)\n    {\n        show_type(t);\n    }\n};\n```", "```cpp\nint main(void)\n{\n    int i = 42;\n    the_answer is(i);\n}\n```", "```cpp\ntemplate<typename T>\nclass the_answer\n{\n\npublic:\n    the_answer(T &&t)\n    {\n        show_type(t);\n    }\n};\n```", "```cpp\nthe_answer is(i);\n```", "```cpp\nthe_answer is(std::move(i));\n```", "```cpp\nthe_answer is(42);\n```", "```cpp\nclass the_answer\n{\n\npublic:\n    the_answer(int &&t)\n    {\n        show_type(t);\n    }\n};\n```", "```cpp\ntemplate<typename T>\nclass the_answer\n{\n\npublic:\n\n    template<typename U>\n    the_answer(T &&t, U &&u)\n    {\n        show_type(t);\n        show_type(u);\n    }\n};\n```", "```cpp\nint main(void)\n{\n    int i = 42;\n    the_answer is(std::move(i), i);\n}\n```", "```cpp\ntemplate<typename T>\nclass the_answer\n{\n\npublic:\n    the_answer(size_t size, T &&t)\n    {\n        show_type(t);\n    }\n};\n```", "```cpp\nint main(void)\n{\n    the_answer is_2(42, 42);\n}\n```", "```cpp\ntemplate<typename T, typename U>\nclass the_answer\n{\n\npublic:\n    the_answer(const T &t, U &&u)\n    {\n        show_type(t);\n        show_type(u);\n    }\n};\n```", "```cpp\nint main(void)\n{\n    the_answer is(\"The answer is: \", 42);\n}\n```", "```cpp\n> sudo apt-get install build-essential git cmake\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter12\n```", "```cpp\n> cmake .\n> make recipe05_examples\n```", "```cpp\n> ./recipe05_example01\nt = unsigned int\nt = int\n\n> ./recipe05_example02\nt = unsigned int\n\n> ./recipe05_example03\nt = std::__cxx11::basic_string<char>\n```", "```cpp\ntemplate<typename T>\nclass the_answer\n{\n\npublic:\n    the_answer(T t)\n    {\n        show_type(t);\n    }\n};\n```", "```cpp\nthe_answer<unsigned> is(42);\n```", "```cpp\nthe_answer is(42U);\n```", "```cpp\nthe_answer(int) -> the_answer<unsigned>;\n```", "```cpp\nthe_answer(const char *) -> the_answer<std::string>;\n```", "```cpp\nint main(void)\n{\n    the_answer is(\"The answer is: 42\");\n}\n```"]