["```cpp\n/* stl.cpp */\n#include <vector>\n#include <iostream>\n#include <algorithm>\n\nint main(void) {\n  int temp;\n  std::vector<int> collection;\n  std::cout << \"Please input the collection of integer numbers, input 0 to STOP!\\n\";\n  while(std::cin >> temp != 0) {\n    if(temp == 0) break;\n    collection.push_back(temp);\n  }\n  std::sort(collection.begin(), collection.end());\n  std::cout << \"\\nThe sort collection of your integer numbers:\\n\";\n  for(int i: collection) {\n    std::cout << i << std::endl;\n  }\n}\n```", "```cpp\ng++ -Wall -ansi -std=c++11 stl.cpp -o stl\n\n```", "```cpp\nstd::vector<int> collection;\n\n```", "```cpp\n vector in the code. A vector manages its elements in a dynamic array, and they can be accessed randomly and directly with the corresponding index. In our code, the container is prepared to hold integer numbers so we have to define the type of the value inside the angle brackets <int>. These angle brackets are also called generics in STL:\n```", "```cpp\ncollection.push_back(temp);\nstd::sort(collection.begin(), collection.end());\n\n```", "```cpp\nfor(int i: collection) {\n std::cout << i << std::endl;\n}\n\n```", "```cpp\n#include <vector>\n#include <algorithm>\n\n```", "```cpp\n/* lexical.cpp */\n#include <boost/lexical_cast.hpp>\n#include <string>\n#include <iostream>\n\nint main(void) {\n  try \t{\n    std::string str;\n    std::cout << \"Please input first number: \";\n    std::cin >> str;\n    int n1 = boost::lexical_cast<int>(str);\n    std::cout << \"Please input second number: \";\n    std::cin >> str;\n    int n2 = boost::lexical_cast<int>(str);\n    std::cout << \"The sum of the two numbers is \";\n    std::cout << n1 + n2 << \"\\n\";\n    return 0;\n  }\n  catch (const boost::bad_lexical_cast &e) {\n    std::cerr << e.what() << \"\\n\";\n    return 1;\n  }\n}\n```", "```cpp\ng++ -Wall -ansi lexical.cpp \u2013Ic:\\boost_1_58_0 -o lexical\n\n```", "```cpp\n#include <boost/lexical_cast.hpp>\n#include <string>\n#include <iostream>\n\n```", "```cpp\nint n1 = boost::lexical_cast<int>(str);\nint n2 = boost::lexical_cast<int>(str);\n\n```", "```cpp\ncatch (const boost::bad_lexical_cast &e)\n{\n std::cerr << e.what() << \"\\n\";\n return 1;\n}\n\n```", "```cpp\nboost::bad_lexical_cast. We call the e.what() function to obtain the string of the error message.\n```", "```cpp\n/* rangen_boost.cpp */\n#include <boost/random/mersenne_twister.hpp>\n#include <boost/random/uniform_int_distribution.hpp>\n#include <iostream>\n\nint main(void) {\n  int guessNumber;\n  std::cout << \"Select number among 0 to 10: \";\n  std::cin >> guessNumber;\n  if(guessNumber < 0 || guessNumber > 10) {\n    return 1;\n  }\n  boost::random::mt19937 rng;\n  boost::random::uniform_int_distribution<> ten(0,10);\n  int randomNumber = ten(rng);\n  if(guessNumber == randomNumber) {\n    std::cout << \"Congratulation, \" << guessNumber << \" is your lucky number.\\n\";\n  }\n  else {\n    std::cout << \"Sorry, I'm thinking about number \" << randomNumber << \"\\n\"; \n  }\n  return 0;\n}\n```", "```cpp\ng++ -Wall -ansi -Ic:/boost_1_58_0 rangen_boost.cpp -o rangen_boost\n\n```", "```cpp\n#include <boost/random/mersenne_twister.hpp>\n\n```", "```cpp\n#include <boost/random/random_device.hpp>\n\n```", "```cpp\nboost::random::mt19937 rng;\n\n```", "```cpp\nboost::random::random_device rng;\n\n```", "```cpp\ng++ -Wall -ansi -Ic:/boost_1_58_0 rangen2_boost.cpp -o rangen2_boost\n\n```", "```cpp\ncc8KWVvX.o:rangen2_boost.cpp:(.text$_ZN5boost6random6detail20generate_uniform_intINS0_13random_deviceEjEET0_RT_S4_S4_N4mpl_5bool_ILb1EEE[_ZN5boost6random6detail20generate_uniform_intINS0_13random_deviceEjEET0_RT_S4_S4_N4mpl_5bool_ILb1EEE]+0x24f): more undefined references to boost::random::random_device::operator()()' follow\ncollect2.exe: error: ld returned 1 exit status\n\n```", "```cpp\nbootstrap.bat mingw\n\n```", "```cpp\nBuilding Boost.Build engine\n\nBootstrapping is done. To build, run:\n\n    .\\b2\n\nTo adjust configuration, edit 'project-config.jam'.\nFurther information:\n\n    - Command line help:\n    .\\b2 --help\n\n    - Getting started guide:\n    http://boost.org/more/getting_started/windows.html\n\n    - Boost.Build documentation:\n    http://www.boost.org/build/doc/html/index.html\n```", "```cpp\nb2 install toolset=gcc\n\n```", "```cpp\n...updated 12562 targets...\n\n```", "```cpp\nc:\\CPP>g++ -Wall -ansi -Ic:/boost_1_58_0 rangen2_boost.cpp -Lc:\\boost_1_58_0\\stage\\lib -lboost_random-mgw49-mt-1_58 -lboost_system-mgw49-mt-1_58 -o rangen2_boost\n\n```", "```cpp\ncopy c:\\boost_1_58_0_1\\stage\\lib\\libboost_random-mgw49-mt-1_58.dll c:\\cpp\ncopy c:\\boost_1_58_0_1\\stage\\lib\\libboost_system-mgw49-mt-1_58.dll c:\\cpp\n\n```"]