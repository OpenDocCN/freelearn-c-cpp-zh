- en: Database Connection
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库连接
- en: In the previous chapter, we learned how to create a login page from scratch.
    However, it is not functional yet, as the login page is not connected to a database.
    In this chapter, you will learn how to connect your Qt application to a MySQL
    (or MariaDB) database that validates login credentials.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何从头开始创建一个登录页面。然而，它还没有功能，因为登录页面还没有连接到数据库。在本章中，您将学习如何将您的Qt应用程序连接到验证登录凭据的MySQL（或MariaDB）数据库。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Introducing the MySQL database system
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍MySQL数据库系统
- en: Setting up the MySQL database
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置MySQL数据库
- en: SQL commands
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQL命令
- en: Database connection in Qt
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Qt中的数据库连接
- en: Functional login page
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功能性登录页面
- en: We will walk through this chapter in a step-by-step approach to discover the
    powerful features that come with Qt and allow your application to connect directly
    to a database without any additional third-party dependencies. Database querying
    is a huge topic by itself, but we will be able to learn the most basic commands
    from scratch through examples and practical methods.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将逐步学习本章内容，以发现Qt提供的强大功能，使您的应用程序可以直接连接到数据库，而无需任何额外的第三方依赖。数据库查询本身是一个庞大的主题，但我们将能够通过示例和实际方法从头开始学习最基本的命令。
- en: 'Qt supports multiple different types of database systems:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Qt支持多种不同类型的数据库系统：
- en: MySQL (or MariaDB)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL（或MariaDB）
- en: SQLite (version 2 and 3)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLite（版本2和3）
- en: IBM DB2
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IBM DB2
- en: Oracle
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle
- en: ODBC
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ODBC
- en: PostgreSQL
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL
- en: Sybase Adaptive Server
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sybase Adaptive Server
- en: Two of the most popular ones are MySQL and SQLite. The SQLite database is usually
    used offline and it doesn't require any setup as it uses an on-disk file format
    for storing data. Therefore, in this chapter, we will learn how to set up a MySQL
    database system instead, and at the same time learn how to connect our Qt application
    to a MySQL database. The C++ code used to connect to the MySQL database can be
    reused for connecting to other database systems without many alterations.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 其中最受欢迎的两种是MySQL和SQLite。SQLite数据库通常用于离线，并且不需要任何设置，因为它使用磁盘文件格式来存储数据。因此，在本章中，我们将学习如何设置MySQL数据库系统，并同时学习如何将我们的Qt应用程序连接到MySQL数据库。用于连接到MySQL数据库的C++代码可以在不进行太多修改的情况下重用于连接到其他数据库系统。
- en: Introducing the MySQL database system
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍MySQL数据库系统
- en: '**MySQL** is an open source database management system based on the relational
    model, which is the most common method used by modern database systems to store
    information for various purposes.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**MySQL**是一种基于关系模型的开源数据库管理系统，这是现代数据库系统用于存储各种信息的最常用方法。'
- en: Unlike some other legacy models—such as an object database system or a hierarchical
    database system—the relational model has been proven to be more user friendly
    and performs well beyond the other models. That's the reason why most of the modern
    database systems we see today are mostly using this method.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 与一些其他传统模型（如对象数据库系统或分层数据库系统）不同，关系模型已被证明更加用户友好，并且在其他模型之外表现出色。这就是为什么我们今天看到的大多数现代数据库系统大多使用这种方法的原因。
- en: MySQL was originally developed by a Swedish company called **MySQL AB**, and
    its name is the combination of *My*, the name of the daughter of the company's
    co-founder, and *SQL*, the abbreviation for **Structured Query Language**.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL最初由一家名为**MySQL AB**的瑞典公司开发，其名称是公司联合创始人的女儿*My*和**Structured Query Language**的缩写*SQL*的组合。
- en: Similar to Qt, MySQL has also been owned by multiple different people throughout
    its history. The most notable acquisition happened in 2008, where **Sun Microsystems**
    bought MySQL AB for $1 billion. One year later in 2009, **Oracle Corporation**
    acquired Sun Microsystems, and so MySQL is owned by Oracle up to this day. Even
    though MySQL changed hands several times, it still remains as an open source software
    that allows users to change the code to suit their own purposes.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 与Qt类似，MySQL在其历史上也曾被多个不同的人拥有。最引人注目的收购发生在2008年，**Sun Microsystems**以10亿美元收购了MySQL
    AB。一年后的2009年，**Oracle Corporation**收购了Sun Microsystems，因此MySQL直到今天仍归Oracle所有。尽管MySQL多次易手，但它仍然是一款开源软件，允许用户更改代码以适应其自身目的。
- en: Due to its open source nature, there are also other database systems out there
    that were derived/forked from the MySQL project, such as **MariaDB**, **Percona
    Server**, and so on. However, these alternatives are not fully compatible with
    MySQL as they have modified it to suit their own needs, and therefore some of
    the commands may be varied among these systems.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 由于其开源性质，还有其他从MySQL项目派生/分叉出来的数据库系统，如**MariaDB**、**Percona Server**等。然而，这些替代方案与MySQL并不完全兼容，因为它们已经修改了以适应自己的需求，因此在这些系统中有些命令可能会有所不同。
- en: 'According to a 2017 survey carried out by **Stack Overflow**, MySQL is the
    most widely used database system among web developers, as we can see in the following
    screenshot:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 根据**Stack Overflow**在2017年进行的一项调查，MySQL是Web开发人员中使用最广泛的数据库系统，如下图所示：
- en: '![](img/ea013fb4-46cf-44fc-ac35-1968cc90e84f.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ea013fb4-46cf-44fc-ac35-1968cc90e84f.png)'
- en: The survey result indicates that what you learn in this chapter can be applied
    to not just Qt projects but also web, mobile app, and other types of applications.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 调查结果表明，您在本章中学到的内容不仅可以应用于Qt项目，还可以应用于Web、移动应用程序和其他类型的应用程序。
- en: Furthermore, MySQL and its variants are being used by big corporations and project
    groups such as Facebook, YouTube, Twitter, NASA, Wordpress, Drupal, Airbnb, Spotify,
    and so on and so forth. This means that you can easily get answers when encountering
    any technical issues during development.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，MySQL及其变体被大公司和项目组使用，如Facebook、YouTube、Twitter、NASA、Wordpress、Drupal、Airbnb、Spotify等。这意味着在开发过程中遇到任何技术问题时，您可以轻松获得答案。
- en: 'For more information regarding MySQL, please visit:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 有关MySQL的更多信息，请访问：
- en: '[https://www.mysql.com](https://www.mysql.com)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.mysql.com](https://www.mysql.com)'
- en: Setting up the MySQL database
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置MySQL数据库
- en: There are many different ways to set up your MySQL database. It really depends
    on the type of platforms you are running, whether it is Windows, Linux, Mac, or
    any other type of operating system; it will also depend on the purpose of your
    database—whether it's for development and testing, or for a large-scale production
    server.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 设置MySQL数据库有许多不同的方法。这实际上取决于您正在运行的平台类型，无论是Windows、Linux、Mac还是其他类型的操作系统；它还将取决于您的数据库用途——无论是用于开发和测试，还是用于大规模生产服务器。
- en: For large scale services (such as social media), the best way is to compile
    MySQL from the source, because such as project requires a ton of optimization,
    configuration, and sometimes customization in order to handle the large amount
    of users and traffic.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大规模服务（如社交媒体），最好的方法是从源代码编译MySQL，因为这样的项目需要大量的优化、配置，有时需要定制，以处理大量用户和流量。
- en: However, you can just download the pre-compiled binaries if you're going for
    normal use, as the default configuration is pretty sufficient for that. You can
    install a standalone MySQL installer from their official website or the download
    installation packages that come with several other pieces of software besides
    MySQL.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果您只是进行正常使用，可以直接下载预编译的二进制文件，因为默认配置对此非常足够。您可以从官方网站或下载安装包安装独立的MySQL安装程序，该安装程序还包括MySQL以外的几个其他软件。
- en: In this chapter, we will be using a software package called **XAMPP**, which
    is a web server stack package developed by a group called **Apache Friends**.
    This package comes with **Apache**, **MariaDB**, **PHP**, and other optional services
    that you can add on during the installation process. Previously, MySQL was part
    of the package, but it has since been replaced with **MariaDB** starting from
    version 5.5.30 and 5.6.14\. MariaDB works almost the same as MySQL, except those
    commands involving advanced features, which we will not be using in this book.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用一个名为**XAMPP**的软件包，这是一个由**Apache Friends**开发的Web服务器堆栈软件包。该软件包包括**Apache**，**MariaDB**，**PHP**和其他可选服务，您可以在安装过程中添加。以前，MySQL是该软件包的一部分，但从5.5.30和5.6.14版本开始，它已经被**MariaDB**替换。MariaDB几乎与MySQL相同，除了涉及高级功能的命令，这些功能我们在本书中不会使用。
- en: The reason why we use XAMPP is that it has a control panel that can easily start
    and stop the services without using Command Prompt, and provides easy access to
    the configuration files without you having to dig into the installation directory
    by yourself. It is very quick and efficient for application development that involves
    frequent testings. However, it is not recommended that you use XAMPP on a production
    server as some of the security features have been disabled by default.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用XAMPP的原因是它有一个控制面板，可以轻松启动和停止服务，而无需使用命令提示符，并且可以轻松访问配置文件，而无需自己深入安装目录。对于涉及频繁测试的应用程序开发来说，它非常快速和高效。但是，不建议在生产服务器上使用XAMPP，因为一些安全功能已经被默认禁用。
- en: Alternatively, you may also install MySQL through other similar software packages
    such as **AppServ**, **AMPPS**, **LAMP** (Linux only), **WAMP** (Windows only),
    **Zend****Server**, and so on.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您也可以通过其他类似的软件包安装MySQL，如**AppServ**，**AMPPS**，**LAMP**（仅限Linux），**WAMP**（仅限Windows），**Zend****Server**等。
- en: 'Now, let''s learn how to install XAMPP:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们学习如何安装XAMPP：
- en: 'First, go to their website at [https://www.apachefriends.org](https://www.apachefriends.org)
    and click on one of the download buttons located at the bottom of your screen,
    which displays the icon of your current operating system:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，访问他们的网站[https://www.apachefriends.org](https://www.apachefriends.org)，并点击屏幕底部的一个下载按钮，显示您当前操作系统的图标：
- en: '![](img/d5053fc7-76bd-47ad-bf75-a82f1f8758db.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d5053fc7-76bd-47ad-bf75-a82f1f8758db.png)'
- en: Once you click on the Download button, the download process should start automatically
    within a few seconds, and it should proceed to install the program once it's done.
    Make sure that Apache and MySQL/MariaDB are included before the installation process
    starts.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您点击下载按钮，下载过程应该在几秒钟内自动开始，并且一旦完成，它应该继续安装程序。在安装过程开始之前，请确保包括Apache和MySQL/MariaDB。
- en: 'After you have installed XAMPP, launch the control panel from the start menu
    or from the desktop shortcut. After that, you may notice that nothing has happened.
    This is because the XAMPP control panel is hidden within the taskbar by default.
    You may display the control panel window by right-clicking on it and selecting
    the Show / Hide option in the pop-up menu. The following screenshot shows you
    what this looks like on a Windows machine. For Linux, the menu may look slightly
    different, but overall it is very similar. For macOS, you must launch XAMPP from
    the launchpad or from the dock:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装XAMPP后，从开始菜单或桌面快捷方式启动控制面板。之后，您可能会注意到没有发生任何事情。这是因为XAMPP控制面板默认隐藏在任务栏中。您可以通过右键单击它并在弹出菜单中选择显示/隐藏选项来显示控制面板窗口。以下屏幕截图显示了Windows机器上的情况。对于Linux，菜单可能看起来略有不同，但总体上非常相似。对于macOS，您必须从启动台或从dock启动XAMPP：
- en: '![](img/2a3b8dac-a0be-4737-9347-82c56c7345a1.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2a3b8dac-a0be-4737-9347-82c56c7345a1.png)'
- en: 'Once you have clicked the Show / Hide option, you will finally see the control
    panel window displayed on your screen. If you click the Show / Hide option again,
    the window will be hidden away:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您点击显示/隐藏选项，您最终将在屏幕上看到控制面板窗口。如果再次点击显示/隐藏选项，窗口将被隐藏起来：
- en: '![](img/4984acd2-2086-41b0-bbcd-962dc8e2a416.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4984acd2-2086-41b0-bbcd-962dc8e2a416.png)'
- en: Their control panel is pretty much self-explanatory at first glance. On the
    left, you can see the names of the services that are available in XAMPP, and on
    the right, you will see the buttons that indicate Start, Config, Logs, and so
    on. For some reason, XAMPP is showing MySQL as the module name but it is in fact
    running MariaDB. Don't worry; both work pretty much the same since MariaDB is
    a fork of MySQL.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 他们的控制面板乍一看就很容易理解。在左侧，您可以看到XAMPP中可用服务的名称，在右侧，您将看到指示启动、配置、日志等按钮。由于某种原因，XAMPP显示MySQL作为模块名称，但实际上它正在运行MariaDB。不用担心；由于MariaDB是MySQL的一个分支，两者基本上工作方式相同。
- en: 'In this chapter, we''ll only need Apache and MySQL (MariaDB), so let''s click
    the Start buttons of these services. After a second or two, you''ll see that the
    Start buttons are now labeled as Stop, which means the services have been launched!:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本章中，我们只需要Apache和MySQL（MariaDB），所以让我们点击这些服务的启动按钮。一两秒后，您会看到启动按钮现在标记为停止，这意味着服务已经启动！：
- en: '![](img/ac835466-9711-40f6-b924-8cecf413aeff.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ac835466-9711-40f6-b924-8cecf413aeff.png)'
- en: 'To verify this, let''s open up the browser and type `localhost` as the website
    address. If you see something like the following image, it means that the Apache
    web server has been successfully launched!:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要验证这一点，让我们打开浏览器，输入`localhost`作为网站地址。如果您看到类似以下图像的东西，这意味着Apache Web服务器已成功启动！：
- en: '![](img/3b8247ee-f9db-4a17-a1a8-ccc18d7147e4.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3b8247ee-f9db-4a17-a1a8-ccc18d7147e4.png)'
- en: Apache is very important here as we'll be using it to configure the database
    using a web-based administrative tool called **phpMyAdmin**. phpMyAdmin is an
    administrative tool for MySQL written in PHP scripting language, hence its name.
    Even though it was originally designed for MySQL, it works pretty well for MariaDB
    as well.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Apache在这里非常重要，因为我们将使用它来使用名为**phpMyAdmin**的基于Web的管理工具来配置数据库。phpMyAdmin是用PHP脚本语言编写的MySQL管理工具，因此得名。尽管它最初是为MySQL设计的，但它对MariaDB也非常有效。
- en: 'To access the phpMyAdmin control panel, type `localhost/phpmyadmin` on your
    browser. After that, you should see something like this:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要访问phpMyAdmin控制面板，请在浏览器上输入`localhost/phpmyadmin`。之后，您应该会看到类似于这样的东西：
- en: '![](img/5b480b92-1af6-46ae-8bf8-e0a965c6b8a0.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5b480b92-1af6-46ae-8bf8-e0a965c6b8a0.png)'
- en: On the left-hand side of the page, you will see the navigation panel, which
    allows you access to the different databases available in your MariaDB database.
    On the right-hand side of the page are various tools that let you view table,
    edit table, run SQL command, export data to spreadsheet, set privileges, and so
    on.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在页面的左侧，您将看到导航面板，它允许您访问MariaDB数据库中可用的不同数据库。页面的右侧是各种工具，让您查看表格，编辑表格，运行SQL命令，将数据导出到电子表格，设置权限等等。
- en: By default, you can only modify the General settings of the database on the
    setting panel located on the right. You must select a database from the navigation
    panel on the left before you are able to modify the settings of a particular database.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，您只能在右侧的设置面板上修改数据库的常规设置。在能够修改特定数据库的设置之前，您必须在左侧的导航面板上选择一个数据库。
- en: A database is like a cabinet that you can store log books within. Each log book
    is called a table and each table contains data, which is sorted like a spreadsheet.
    When you want to obtain a data from MariaDB, you must specify which cabinet (database)
    and log book (table) you would like to access before getting the data from it.
    Hopefully, this will make you better understand the concept behind MariaDB and
    other similar database systems.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据库就像一个您可以在其中存储日志的文件柜。每本日志称为一个表，每个表包含数据，这些数据像电子表格一样排序。当您想从MariaDB获取数据时，您必须在获取数据之前指定要访问的文件柜（数据库）和日志（表）。希望这能让您更好地理解MariaDB和其他类似的数据库系统背后的概念。
- en: 'Now, let''s get started by creating our very first database! To do so, you
    can either click the New button located above the database names on the navigation
    panel or click the Databases button located at the top of the menu. Both buttons
    will bring you to the Databases page, and you should be able to see this located
    below the menu buttons:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们开始创建我们的第一个数据库！要这样做，您可以点击导航面板上方的数据库名称上方的新建按钮，或者点击菜单顶部的数据库按钮。这两个按钮都会带您到数据库页面，您应该能够在菜单按钮下方看到这个：
- en: '![](img/14b5f1e8-da81-4fc8-a2ab-32ea8391e601.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/14b5f1e8-da81-4fc8-a2ab-32ea8391e601.png)'
- en: 'After that, let''s create our very first database! Type in your desired database
    name and click the Create button. Once the database has been created, you will
    be redirected to the Structure page, which will list down all the tables contained
    in this database. By default, your newly created database doesn''t contain any
    tables, so you will see a line of text that says No tables found in database:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，让我们创建我们的第一个数据库！输入您想要创建的数据库名称，然后点击创建按钮。数据库创建后，您将被重定向到结构页面，该页面将列出此数据库中包含的所有表。默认情况下，您新创建的数据库不包含任何表，因此您将看到一行文本，其中说没有在数据库中找到表：
- en: '![](img/e4aa4deb-6437-4a98-98f9-f8ea2582bf7c.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e4aa4deb-6437-4a98-98f9-f8ea2582bf7c.png)'
- en: Guess what we'll be doing next? Correct, we will create our first table! First,
    let's insert the name of the table you want to create. Since we'll be doing a
    login page later in this chapter, let's name our table `user`. We'll leave the
    default number of columns as it is and click Go.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 猜猜我们接下来要做什么？正确，我们将创建我们的第一个表！首先，让我们插入您想要创建的表的名称。由于在本章后面我们将做一个登录页面，让我们将我们的表命名为`user`。我们将保留默认的列数，然后点击Go。
- en: After that, you will be redirected to another page, which contains many columns
    of input fields for you to fill in. Each column represents a data structure which
    will be added to your table after it's been created.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，您将被重定向到另一个页面，其中包含许多列的输入字段供您填写。每一列代表一个数据结构，它将在创建后添加到您的表中。
- en: 'The first thing you need to add to the table structure is an ID that will automatically
    increase upon each new data insertion. Then, add a timestamp column to indicate
    the date and time of the data insertion, which is good for debugging. Last but
    not least, we will add a username column and password column for login validation.
    If you''re unsure on how to do this, please refer to the following image. Make
    sure you follow the settings that are being circled in the image:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一件需要添加到表结构中的是一个ID，它将在每次插入新数据时自动增加。然后，添加一个时间戳列来指示数据插入的日期和时间，这对于调试很有用。最后，我们将添加一个用户名列和密码列用于登录验证。如果您不确定如何操作，请参考以下图片。确保您遵循图片中被圈出的设置：
- en: '![](img/75358cae-706a-4724-bf52-f7e4b844bfff.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/75358cae-706a-4724-bf52-f7e4b844bfff.png)'
- en: The type of the structure is very important and must be set according to its
    intended purpose. For example, the id column must be set as INT (integer number)
    as it must be a full number, while username and password must be set as either
    VARCHAR or other similar data types (CHAR, TEXT, and so on) in order for it to
    save the data correctly.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结构的类型非常重要，必须根据其预期目的进行设置。例如，id列必须设置为INT（整数），因为它必须是一个完整的数字，而用户名和密码必须设置为VARCHAR或其他类似的数据类型（CHAR、TEXT等），以便正确保存数据。
- en: The timestamp, on the other hand, must be set to TIMESTAMP type, and must set
    the default value to CURRENT_TIMESTAMP, which notifies MariaDB to automatically
    generate the current timestamp upon data insertion.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另一方面，时间戳必须设置为时间戳类型，并且必须将默认值设置为CURRENT_TIMESTAMP，这将通知MariaDB在数据插入时自动生成当前时间戳。
- en: 'Please note that the index setting for the ID column must be set to PRIMARY,
    and make sure that the A_I (auto increment) checkbox is ticked. When you check
    the A_I checkbox, an Add Index window will appear. You can keep the default settings
    as they are and then you can click the Go button to complete the steps and start
    creating the table:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，ID列的索引设置必须设置为PRIMARY，并确保A_I（自动增量）复选框被选中。当您选中A_I复选框时，将出现一个添加索引窗口。您可以保持默认设置，然后点击Go按钮完成步骤并开始创建表：
- en: '![](img/edd187b5-7f50-47b4-9f89-d5caee38de4c.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/edd187b5-7f50-47b4-9f89-d5caee38de4c.png)'
- en: 'After you have created the new table, you should be able to see something similar
    like the following image. You can still edit the structure settings anytime by
    clicking the Change button; you can also remove any of the columns by clicking
    on the Drop button located at the right-hand side of the column. Please note that
    deleting a column will also remove all the existing data belonging to that column,
    and this action cannot be undone:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建新表后，您应该能够看到类似以下图片的内容。您仍然可以随时通过单击更改按钮来编辑结构设置；您还可以通过单击列右侧的删除按钮来删除任何列。请注意，删除列也将删除属于该列的所有现有数据，此操作无法撤消：
- en: '![](img/6342b9cf-6219-4036-92a8-e4ed95cf1a96.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6342b9cf-6219-4036-92a8-e4ed95cf1a96.png)'
- en: 'Even though we''ll usually add data to the database through our programs or
    web pages, we can also add data directly on phpMyAdmin for testing purposes. To
    add data using phpMyAdmin, first, you must create a database and table, which
    we have done in the previous steps. Then, click the Insert button located at the
    top of the menu:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尽管我们通常会通过程序或网页向数据库添加数据，但我们也可以直接在phpMyAdmin上添加数据以进行测试。要使用phpMyAdmin添加数据，首先必须创建一个数据库和表，这是我们在前面的步骤中已经完成的。然后，点击菜单顶部的插入按钮：
- en: '![](img/bf34412c-d063-4f91-8f52-053dd8ee6768.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bf34412c-d063-4f91-8f52-053dd8ee6768.png)'
- en: 'After that, you''ll see that a form has appeared, which resembles the data
    structure that we created previously:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，您会看到一个表单出现，它类似于我们之前创建的数据结构：
- en: '![](img/480a40bc-f234-468d-9184-1e3e5b45e03c.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/480a40bc-f234-468d-9184-1e3e5b45e03c.png)'
- en: You can simply ignore the ID and timestamp values as they will be automatically
    generated when you save the data. In this case, only username and password need
    to be filled in. For the sake of testing, let's put `test` as the username and
    `123456` as the password. Then, click the Go button to save the data.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以简单地忽略ID和时间戳的值，因为当您保存数据时它们将自动生成。在这种情况下，只需要填写用户名和密码。为了测试，让我们将`test`作为用户名，`123456`作为密码。然后，点击Go按钮保存数据。
- en: Please note that you should not save your password in a human-readable format
    on your actual production server. You must encrypt the password with a **cryptographic
    hash** function such as SHA-512, RIPEEMD-512, BLAKE2b, and so on before passing
    it to the database. This will ensure that the password is not readable by hackers
    in case your database is being compromised. We will cover this topic at the end
    of this chapter.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您不应该以人类可读的格式保存密码在您的实际生产服务器上。在将密码传递到数据库之前，您必须使用加密哈希函数（如SHA-512、RIPEEMD-512、BLAKE2b等）对密码进行加密。这将确保密码在数据库被攻破时不被黑客读取。我们将在本章末尾讨论这个话题。
- en: Now that we have finished setting up our database and inserted our first test
    data, let's proceed to learn some of the SQL commands!
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了数据库的设置并插入了我们的第一个测试数据，让我们继续学习一些SQL命令！
- en: SQL commands
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL命令
- en: Most of the popular relational database management systems, such as **MySQL**,
    **MariaDB**, **Oracle SQL**, **Microsoft SQL**, and so on, use a type of declarative
    language called **SQL** (**Structured Query Language**) to interact with the database.
    SQL was initially developed by IBM engineers in the 1970s, but later on, it was
    further enhanced by **Oracle Corporation** and other emerging tech companies of
    that era.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数流行的关系数据库管理系统，如MySQL、MariaDB、Oracle SQL、Microsoft SQL等，都使用一种称为SQL（结构化查询语言）的声明性语言来与数据库交互。SQL最初是由IBM工程师在20世纪70年代开发的，但后来又被Oracle
    Corporation和其他当时新兴的技术公司进一步增强。
- en: Today, SQL has become a standard of the **American National Standards Institute**
    (**ANSI**) and of the **International Organization for Standardization** (**ISO**).
    SQL language has since been adopted by many different database systems and has
    become one of the most popular database languages in the modern era.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，SQL已成为**美国国家标准学会**（**ANSI**）和**国际标准化组织**（**ISO**）的标准。SQL语言自那时起已被许多不同的数据库系统采用，并成为现代时代最流行的数据库语言之一。
- en: In this section, we will learn what some of the basic SQL commands you can use
    to interact with your MariaDB database are, specifically for obtaining, saving,
    modifying, and deleting your data from/to the database. These basic commands can
    be used in other types of SQL-based database systems as well as under the ANSI
    and ISO standards. Only, some of the more advanced/customized features could be
    different across different systems, so make sure that you read the system manual
    before using these advanced features.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习一些基本的SQL命令，您可以使用这些命令与您的MariaDB数据库进行交互，特别是用于从数据库中获取、保存、修改和删除数据。这些基本命令也可以用于其他类型的基于SQL的数据库系统，以及在ANSI和ISO标准下。只是，一些更高级/定制的功能在不同系统中可能有所不同，因此在使用这些高级功能之前，请确保阅读系统手册。
- en: Alright, let's get started!
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们开始吧！
- en: SELECT
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SELECT
- en: Most of the SQL statements are one-word short and self-explanatory. This statement,
    for example, is used to select one or more columns from a specific table and to
    obtain the data from the said columns. Let's check out some of the sample commands
    that use the `SELECT` statement.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数SQL语句都是单词简短且不言自明的。例如，此语句用于从特定表中选择一个或多个列，并获取来自所述列的数据。让我们来看看一些使用`SELECT`语句的示例命令。
- en: 'The following command retrieves all the data of all the columns from the `user`
    table:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令检索`user`表中所有列的所有数据：
- en: '[PRE0]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following command retrieves only the `username` column from the user table:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令仅从用户表中检索`username`列：
- en: '[PRE1]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following command retrieves the `username` and `password` columns from
    the `user` table with the condition that the `id` equals `1`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令检索`user`表中`id`等于`1`的`username`和`password`列：
- en: '[PRE2]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can try out these commands by yourself using phpMyAdmin. To do that, click
    the SQL button located at the top of the menu in phpMyAdmin. After that, you can
    type the command in the text field below and click Go to execute the query:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用phpMyAdmin自行尝试这些命令。要执行此操作，请单击phpMyAdmin菜单顶部的SQL按钮。之后，您可以在下面的文本字段中输入命令，然后单击Go以执行查询：
- en: '![](img/7a345815-c3c1-45bb-93aa-affbbcaee5fa.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7a345815-c3c1-45bb-93aa-affbbcaee5fa.png)'
- en: 'To learn more about the `SELECT` statement, please refer to the following link:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解有关`SELECT`语句的更多信息，请参阅以下链接：
- en: '[https://dev.mysql.com/doc/refman/5.7/en/select.html](https://dev.mysql.com/doc/refman/5.7/en/select.html)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://dev.mysql.com/doc/refman/5.7/en/select.html](https://dev.mysql.com/doc/refman/5.7/en/select.html)'
- en: INSERT
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: INSERT
- en: 'Next, the `INSERT` statement is used to save new data into a database table.
    For example:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，`INSERT`语句用于将新数据保存到数据库表中。例如：
- en: '[PRE3]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding SQL command inserts `username` and `password` data into the `user`
    table. There are some other statements that can be used together with `INSERT`,
    such as `LOW_PRIORITY`, `DELAYED`, `HIGH_PRIORITY`, and so on.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 上述SQL命令将`username`和`password`数据插入`user`表中。还有一些其他语句可以与`INSERT`一起使用，例如`LOW_PRIORITY`，`DELAYED`，`HIGH_PRIORITY`等。
- en: 'Please refer to the following link to learn more about these options:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考以下链接以了解更多关于这些选项的信息：
- en: '[https://dev.mysql.com/doc/refman/5.7/en/insert.html](https://dev.mysql.com/doc/refman/5.7/en/insert.html)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://dev.mysql.com/doc/refman/5.7/en/insert.html](https://dev.mysql.com/doc/refman/5.7/en/insert.html)'
- en: UPDATE
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UPDATE
- en: 'The `UPDATE` statement modifies existing data in the database. You must specify
    a condition for the `UPDATE` command as otherwise, it will modify every single
    piece of data in a table, which is not our intended behavior. Try the following
    command, which will change the `username` and `password` of the first user:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`UPDATE`语句修改数据库中的现有数据。您必须为`UPDATE`命令指定条件，否则它将修改表中的每一条数据，这不是我们期望的行为。尝试以下命令，它将更改第一个用户的`username`和`password`：'
- en: '[PRE4]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The command will fail, however, if the user with ID `1` does not exist. The
    command will also return the status `0 rows affected` if the `username` and `password`
    data you provided matches exactly with the one stored in the database (nothing
    to change). For more information regarding the `UPDATE` statement, please refer
    to the following link:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果ID为`1`的用户不存在，该命令将失败。如果您提供的`username`和`password`数据与数据库中存储的数据完全匹配（没有变化），该命令还将返回状态`0行受影响`。有关`UPDATE`语句的更多信息，请参阅以下链接：
- en: '[https://dev.mysql.com/doc/refman/5.7/en/update.html](https://dev.mysql.com/doc/refman/5.7/en/update.html)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://dev.mysql.com/doc/refman/5.7/en/update.html](https://dev.mysql.com/doc/refman/5.7/en/update.html)'
- en: DELETE
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DELETE
- en: 'The `DELETE` statement deletes data from a specific table of a database. For
    example, the following command deletes a data from the `user` table that carries
    the ID `1`:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`DELETE`语句从数据库的特定表中删除数据。例如，以下命令从`user`表中删除ID为`1`的数据：'
- en: '[PRE5]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Even though you can use this statement to delete unwanted data, it is not recommended
    to delete any data from your database because the action cannot be undone. It
    is better to add another column to your table called status and use that to indicate
    whether data should be shown or not. For example, if your user deletes data on
    the front end application, set the status of that data to (let''s say) `1` instead
    of `0`. Then, when you want to display data on the front end, display only the
    data that carries a status of `0`:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管您可以使用此语句删除不需要的数据，但不建议从数据库中删除任何数据，因为该操作无法撤消。最好在表中添加另一列，称为状态，并使用该列指示数据是否应显示。例如，如果用户在前端应用程序中删除数据，请将该数据的状态设置为（假设）`1`而不是`0`。然后，当您想要在前端显示数据时，仅显示携带`status`为`0`的数据：
- en: '![](img/7858c675-a8f2-41dd-8112-e762d1c1b0a8.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7858c675-a8f2-41dd-8112-e762d1c1b0a8.png)'
- en: 'This way, any data that has been accidentally deleted can be recovered with
    ease. You can also use a BOOLEAN type for this if you only plan to use true or
    false. I usually use TINYINT just in case I need a third or fourth status in the
    future. For more information regarding the `DELETE` statement, you can refer to
    the following link:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，任何意外删除的数据都可以轻松恢复。如果您只计划使用true或false，也可以使用BOOLEAN类型。我通常使用TINYINT，以防将来需要第三或第四状态。有关`DELETE`语句的更多信息，您可以参考以下链接：
- en: '[https://dev.mysql.com/doc/refman/5.7/en/delete.html](https://dev.mysql.com/doc/refman/5.7/en/delete.html)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://dev.mysql.com/doc/refman/5.7/en/delete.html](https://dev.mysql.com/doc/refman/5.7/en/delete.html)'
- en: JOIN
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接
- en: The advantage of using a relational database management system is that the data
    can be easily joined together from different tables and can be returned to the
    user in a single bulk. This greatly improves the productivity of the developers
    as it allows fluidity and flexibility when it comes to designing a complex database
    structure.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 使用关系数据库管理系统的优势在于，可以轻松地将来自不同表的数据连接在一起，并以单个批量返回给用户。这极大地提高了开发人员的生产力，因为它在设计复杂的数据库结构时提供了流动性和灵活性。
- en: 'There are many types of JOIN statements in MariaDB/MySQL—INNER JOIN, FULL OUTER
    JOIN, LEFT JOIN, and RIGHT JOIN. All of these different JOIN statements behave
    differently when executed, which you can see in the following image:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: MariaDB/MySQL中有许多类型的JOIN语句—INNER JOIN、FULL OUTER JOIN、LEFT JOIN和RIGHT JOIN。这些不同的JOIN语句在执行时表现不同，您可以在以下图像中看到：
- en: '![](img/12b3d2f1-150c-48c3-b1d5-07f2d459d007.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/12b3d2f1-150c-48c3-b1d5-07f2d459d007.png)'
- en: 'Most of the time, we''ll be using the INNER JOIN statement, as it only returns
    the data that has matching values in both tables, and thus only returns a small
    amount of the data that is needed. The JOIN command is much more complicated than
    the others as you need to design the tables to be join-able in the first place.
    Before we start testing the JOIN command, let''s create another table to make
    this possible. We will call this new table department:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，我们将使用INNER JOIN语句，因为它只返回两个表中具有匹配值的数据，因此只返回所需的少量数据。JOIN命令比其他命令复杂得多，因为您需要首先设计可连接的表。在开始测试JOIN命令之前，让我们创建另一个表以实现这一点。我们将称这个新表为department：
- en: '![](img/02429334-d381-4597-82cc-d533541239a6.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/02429334-d381-4597-82cc-d533541239a6.png)'
- en: 'After that, add two departments, like so:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，添加两个部门，如下所示：
- en: '![](img/e22b95e9-823e-4da3-8983-435a77825095.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e22b95e9-823e-4da3-8983-435a77825095.png)'
- en: 'Then, go to the user table, and at the structure page, scroll all the way to
    the bottom and look for the form shown, then click the Go button:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，转到用户表，在结构页面，滚动到底部，查找所示的表单，然后单击“Go”按钮：
- en: '![](img/ca934b9d-4c81-40e2-8830-f1ee803de1a0.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ca934b9d-4c81-40e2-8830-f1ee803de1a0.png)'
- en: 'Add a new column called deptID (which stands for department ID) and set its
    data type to `int` (integer number):'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个名为deptID（代表部门ID）的新列，并将其数据类型设置为`int`（整数）：
- en: '![](img/50b28f30-fb37-402b-9748-76115be1cd2c.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/50b28f30-fb37-402b-9748-76115be1cd2c.png)'
- en: 'After that, set up a few test users and put each of their deptID as either
    `1` or `2`:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，设置几个测试用户，并将他们的deptID分别设置为`1`或`2`：
- en: '![](img/fc9743b9-80f9-45b3-b8f5-3c2dc3db7af2.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fc9743b9-80f9-45b3-b8f5-3c2dc3db7af2.png)'
- en: 'Please notice that I have also added the status column here for checking whether
    the user has been deleted or not. Once you have done with that, let''s try to
    run a sample command!:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我在这里还添加了状态列，以检查用户是否已被删除。完成后，让我们尝试运行一个示例命令！：
- en: '[PRE6]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'That looks quite complicated at first glance, but it really isn''t if you separate
    it into a few parts. We''ll start from the command within the `()` bracket first,
    in which we asked MariaDB/MySQL to select all columns within the `user` table
    that carry `deptID =  1`:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，这看起来相当复杂，但如果您将其分成几个部分，实际上并不复杂。我们将从`()`括号内的命令开始，其中我们要求MariaDB/MySQL选择`deptID
    = 1`的`user`表中的所有列：
- en: '[PRE7]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'After that, contain it within a `()` bracket and name this entire command as
    `my_user.` After that, you can start joining your user table (now called `my_user`)
    with the department table by using the `INNER JOIN` statement. Here, we also added
    some conditions for it to look up the data, such as the ID of the department table
    must match the `deptID` of `my_user`, and the status value of `my_user` must be
    `0`, indicating that the data is still valid and not tagged as removed:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，将其包含在`()`括号中，并将整个命令命名为`my_user`。之后，您可以开始使用`INNER JOIN`语句将用户表（现在称为`my_user`）与部门表进行连接。在这里，我们还添加了一些条件来查找数据，例如部门表的ID必须与`my_user`的`deptID`匹配，并且`my_user`的状态值必须为`0`，表示数据仍然有效，未标记为已移除：
- en: '[PRE8]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Lastly, add the following code in front to complete the SQL command:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在前面添加以下代码以完成SQL命令：
- en: '[PRE9]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Let's try the preceding command and see if the result is what you expected.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试上述命令，看看结果是否符合您的预期。
- en: You can join infinite numbers of tables using this method as long as the tables
    are linked to each another through matching columns.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 只要表通过匹配列相互连接，您就可以使用此方法连接无限数量的表。
- en: 'To find out more about the **JOIN** statement, please visit the following link:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解有关**JOIN**语句的更多信息，请访问以下链接：
- en: '[https://dev.mysql.com/doc/refman/5.7/en/join.html](https://dev.mysql.com/doc/refman/5.7/en/join.html)'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://dev.mysql.com/doc/refman/5.7/en/join.html](https://dev.mysql.com/doc/refman/5.7/en/join.html)'
- en: There are many other SQL statements that we have not covered in this chapter,
    but the ones that we have covered are pretty much all you need to get started.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们还没有涵盖的许多其他SQL语句，但我们已经涵盖的基本上就是您开始所需的全部内容。
- en: 'One last thing before we move on to the next section—we must create a user
    account for the application to access to our MariaDB/MySQL database. First of
    all, go to your phpMyAdmin home page and click User accounts on the top menu:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进入下一部分之前，我们必须为应用程序创建一个访问MariaDB/MySQL数据库的用户帐户。首先，转到phpMyAdmin的主页，然后单击顶部菜单上的用户帐户：
- en: '![](img/e7591330-3f91-4f6c-9fe3-7cee39a65a11.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e7591330-3f91-4f6c-9fe3-7cee39a65a11.png)'
- en: 'Then, go to the bottom and look for this link called Add user account:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，转到底部，查找名为“添加用户帐户”的链接：
- en: '![](img/bf188b4e-ac18-4800-b4a4-f484bef7e05c.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bf188b4e-ac18-4800-b4a4-f484bef7e05c.png)'
- en: 'Once you''re in the Add user account page, type in the User name and Password
    information in the Login Information form. Make sure that the Host name is set
    to Local:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您进入“添加用户帐户”页面，请在登录信息表单中输入用户名和密码信息。确保主机名设置为本地：
- en: '![](img/ab7d52be-0aba-4723-b40c-a90718e74ce5.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab7d52be-0aba-4723-b40c-a90718e74ce5.png)'
- en: 'Then, scroll down and set the Global privileges of the user. Enabling the options
    within the Data section is well enough, but do not enable the other options as
    it might give hackers the privilege to alter your database structure once your
    server has been compromised:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，向下滚动并设置用户的全局权限。在数据部分启用选项就足够了，但不要启用其他选项，因为一旦您的服务器被入侵，它可能会给黑客修改数据库结构的权限。
- en: '![](img/d3803205-cff4-4c72-ae76-9da02eba99a0.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d3803205-cff4-4c72-ae76-9da02eba99a0.png)'
- en: 'Once you have created the user account, follow the following steps to allow
    the newly-created user access to the database called test (or any other table
    name of your choice):'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 创建用户帐户后，请按照以下步骤允许新创建的用户访问名为test的数据库（或您选择的任何其他表名）：
- en: '![](img/89c0aee6-4bd7-430d-b521-4abf695e9ba9.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/89c0aee6-4bd7-430d-b521-4abf695e9ba9.png)'
- en: After you have clicked the Go button, you have now given the user account the
    privilege to access the database! In the next section, we'll be learning how to
    connect our Qt application to the database.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“Go”按钮后，您现在已经赋予了用户帐户访问数据库的权限！在下一节中，我们将学习如何将我们的Qt应用程序连接到数据库。
- en: Database connection in Qt
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Qt中的数据库连接
- en: Now that we have learned how to set up a functional MySQL/MariaDB database system,
    let's move a step further and discover the database connection module in Qt!
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学会了如何设置一个功能齐全的MySQL/MariaDB数据库系统，让我们再进一步，了解Qt中的数据库连接模块！
- en: 'Before we continue working on our login page from the previous chapter, let''s
    start off with a new Qt project first so that it''s easier to demonstrate the
    functionality solely related to database connection and so that we don''t get
    distracted by the other stuff. This time, we''ll go for the Terminal-style application
    called Qt Console Application, as we don''t really need any GUI for this demonstration:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续处理上一章的登录页面之前，让我们首先开始一个新的Qt项目，这样可以更容易地演示与数据库连接相关的功能，而不会被其他东西分散注意力。这次，我们将选择名为Qt控制台应用程序的终端样式应用程序，因为我们不真的需要任何GUI来进行演示：
- en: '![](img/b62b379e-c4f9-4152-9670-799387f56f43.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b62b379e-c4f9-4152-9670-799387f56f43.png)'
- en: 'After you have created the new project, you should only see two files in the
    project, that is, [project_name].pro and main.cpp:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新项目后，您应该只在项目中看到两个文件，即[project_name].pro和main.cpp：
- en: '![](img/f74bcfc6-d1f9-463d-8fc1-25c4a112d9a6.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f74bcfc6-d1f9-463d-8fc1-25c4a112d9a6.png)'
- en: 'The first thing you need to do is to open up your project file (`.pro`), which
    in my case is DatabaseConnection.pro, and add the `sql` keyword at the back of
    the first line, like so:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要做的第一件事是打开您的项目文件（`.pro`），在我的情况下是DatabaseConnection.pro，并在第一行的末尾添加`sql`关键字，如下所示：
- en: '[PRE10]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'As simple as that, we have successfully imported the `sql` module into our
    Qt project! Then, open up `main.cpp` and you should see a very simple script that
    contains only eight lines of code. This is basically all you need to create an
    empty console application:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 就这么简单，我们已经成功地将`sql`模块导入到了我们的Qt项目中！然后，打开`main.cpp`，您应该看到一个非常简单的脚本，其中只包含八行代码。这基本上是您创建一个空控制台应用程序所需的全部内容：
- en: '[PRE11]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In order for us to connect to our database, we must first import the relevant
    headers to `main.cpp`, like so:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 为了连接到我们的数据库，我们必须首先将相关的头文件导入到`main.cpp`中，如下所示：
- en: '[PRE12]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Without these header files, we won't be able to use the functions provided by
    Qt's `sql` module, which we have imported previously. Additionally, we also added
    the `QDebug` header so that we can easily print out any text on the console display
    (similar to the `std::cout` function provided by C++'s standard library).
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 没有这些头文件，我们将无法使用Qt的`sql`模块提供的函数，这些函数是我们之前导入的。此外，我们还添加了`QDebug`头文件，以便我们可以轻松地在控制台显示上打印出任何文本（类似于C++标准库提供的`std::cout`函数）。
- en: 'Next, we''ll add some code to the `main.cpp` file. Add the following highlighted
    code before `return a.exec()`:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将向`main.cpp`文件添加一些代码。在`return a.exec()`之前添加以下突出显示的代码：
- en: '[PRE13]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Do note that the database name, username, and password could be different from
    what you have set in your database, so please make sure they are correct before
    compiling the project.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，数据库名称、用户名和密码可能与您在数据库中设置的不同，请在编译项目之前确保它们是正确的。
- en: 'Once you are done with that, let''s click the Run button and see what happens!:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，让我们点击“运行”按钮，看看会发生什么！：
- en: '![](img/61992a63-5c9a-4319-95a0-50e25a5ee0ad.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](img/61992a63-5c9a-4319-95a0-50e25a5ee0ad.png)'
- en: 'If you see the following error, don''t worry:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看到以下错误，请不要担心：
- en: '![](img/1b176a50-7762-48d9-8b8f-a1db1165c9b8.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1b176a50-7762-48d9-8b8f-a1db1165c9b8.png)'
- en: That is simply because you must install the MariaDB Connector (or MySQL Connector
    if you're running MySQL) to your computer and copy the DLL file over to your Qt
    installation path. Please make sure that the DLL file matches your server's database
    library. You can open up your phpMyAdmin home page and see which library it is
    currently using.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是因为您必须将MariaDB Connector（或者如果您正在运行MySQL，则是MySQL Connector）安装到您的计算机上，并将DLL文件复制到Qt安装路径。请确保DLL文件与服务器的数据库库匹配。您可以打开phpMyAdmin的主页，查看它当前使用的库。
- en: 'For some reason, even though I''m running XAMPP with MariaDB, the library name
    here shows libmysql instead of libmariadb, so I had to install MySQL Connector
    instead:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 出于某种原因，尽管我正在运行带有MariaDB的XAMPP，但这里的库名称显示为libmysql而不是libmariadb，因此我不得不安装MySQL
    Connector：
- en: '![](img/3b99df22-27e4-4703-92fb-9982f7e896eb.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3b99df22-27e4-4703-92fb-9982f7e896eb.png)'
- en: 'If you''re using MariaDB, please download the MariaDB Connector at the following
    link:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是MariaDB，请在以下链接下载MariaDB Connector：
- en: '[https://downloads.mariadb.org/connector-c](https://downloads.mariadb.org/connector-c)
    If you''re using MySQL instead (or are having the same issue as I did), please
    visit the other link and download MySQL Connector:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://downloads.mariadb.org/connector-c](https://downloads.mariadb.org/connector-c)
    如果您使用的是MySQL（或者遇到了我遇到的相同问题），请访问另一个链接并下载MySQL连接器：'
- en: '[https://dev.mysql.com/downloads/connector/cpp/](https://dev.mysql.com/downloads/connector/cpp/)'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://dev.mysql.com/downloads/connector/cpp/](https://dev.mysql.com/downloads/connector/cpp/)'
- en: 'After you have downloaded the MariaDB Connector, install it on your computer:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在您下载了MariaDB连接器之后，请在您的计算机上安装它：
- en: '![](img/3766d4f4-d470-4bc6-8d6f-239d81751bcf.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3766d4f4-d470-4bc6-8d6f-239d81751bcf.png)'
- en: The preceding screenshot shows the installation process for a Windows machine.
    If you're running Linux, you must download the right package for your Linux distribution.
    If you're running Debian, Ubuntu, or one of its variants, download the Debian
    and Ubuntu packages. If you're running Red Hat, Fedora, CentOS, or one of its
    variants, download the Red Hat, Fedora, and CentOS packages. The installation
    for these packages are automated, so you're good to go. However, if you're running
    neither of those, you'll have to download one of the gzipped tar files listed
    on the download page that fits your system requirement.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的截图显示了Windows机器的安装过程。如果您使用Linux，您必须为您的Linux发行版下载正确的软件包。如果您使用Debian、Ubuntu或其变体之一，请下载Debian和Ubuntu软件包。如果您使用Red
    Hat、Fedora、CentOS或其变体之一，请下载Red Hat、Fedora和CentOS软件包。这些软件包的安装是自动的，所以您可以放心。但是，如果您没有使用这些系统之一，您将需要下载符合您系统要求的下载页面上列出的一个gzipped
    tar文件。
- en: 'For more information about installing MariaDB binary tarballs on Linux, please
    refer to the following link:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 有关在Linux上安装MariaDB二进制tarballs的更多信息，请参阅以下链接：
- en: '[https://mariadb.com/kb/en/library/installing-mariadb-binary-tarballs/](https://mariadb.com/kb/en/library/installing-mariadb-binary-tarballs/)'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://mariadb.com/kb/en/library/installing-mariadb-binary-tarballs/](https://mariadb.com/kb/en/library/installing-mariadb-binary-tarballs/)'
- en: As for macOS, you need to use a package manager called **Homebrew** to install
    MariaDB server.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 至于macOS，您需要使用一个名为**Homebrew**的软件包管理器来安装MariaDB服务器。
- en: 'For more information, check out the following link:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，请查看以下链接：
- en: '[https://mariadb.com/kb/en/library/installing-mariadb-on-macos-using-homebrew/](https://mariadb.com/kb/en/library/installing-mariadb-on-macos-using-homebrew/)'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://mariadb.com/kb/en/library/installing-mariadb-on-macos-using-homebrew/](https://mariadb.com/kb/en/library/installing-mariadb-on-macos-using-homebrew/)'
- en: Once you have installed it, go to its installation directory and look for the
    DLL file (`libmariadb.dll` for MariaDB or `libmysql.dll` for MySQL). For Linux
    and macOS, it's `libmariadb.so` or `libmysql.so` instead of DLL.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，转到其安装目录并查找DLL文件（MariaDB的`libmariadb.dll`或MySQL的`libmysql.dll`）。对于Linux和macOS，而不是DLL，它是`libmariadb.so`或`libmysql.so`。
- en: 'Then, copy the file over to your application''s build directory (the same folder
    as your application''s executable file). After that, try and run your application
    again:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将文件复制到应用程序的构建目录（与应用程序的可执行文件相同的文件夹）。之后，尝试再次运行您的应用程序：
- en: '![](img/b0d5c6d5-4a32-43f6-9050-27f519df0800.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b0d5c6d5-4a32-43f6-9050-27f519df0800.png)'
- en: If you still getting `Failed to connect` but without the `QMYSQL driver not
    loaded` message, please check your XAMPP control panel and make sure that your
    database service is running; also make sure that the database name, username,
    and password that you put in the code is all the correct information.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您仍然收到`连接失败`的消息，但没有`QMYSQL driver not loaded`的消息，请检查您的XAMPP控制面板，并确保您的数据库服务正在运行；还要确保您在代码中输入的数据库名称、用户名和密码都是正确的信息。
- en: 'Next, we can start playing around with SQL commands! Add the following code
    before `return a.exec()`:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以开始尝试使用SQL命令！在`return a.exec()`之前添加以下代码：
- en: '[PRE14]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The preceding code sends the command text to the database and synchronously
    waits for the result to return from the server. After that, use a `while` loop
    to go through every single result and convert it to a string format. Then, display
    the result on the console window. If everything went right, you should see something
    like this:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将命令文本发送到数据库，并同步等待来自服务器的结果返回。之后，使用`while`循环遍历每个结果并将其转换为字符串格式。然后，在控制台窗口上显示结果。如果一切顺利，您应该会看到类似这样的东西：
- en: '![](img/1de75368-744f-4875-8829-37ac18d64e11.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1de75368-744f-4875-8829-37ac18d64e11.png)'
- en: 'Let''s try out something more complex:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试一些更复杂的东西：
- en: '[PRE15]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This time, we used **INNER JOIN** to combine two tables to select the `username`
    and `department` name. To avoid confusion regarding the variable called `name`,
    rename it to `deptname` using the `AS` statement. After that, display both the
    `username` and `department` name on the console window:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，我们使用**INNER JOIN**来合并两个表以选择`username`和`department`名称。为了避免关于名为`name`的变量的混淆，使用`AS`语句将其重命名为`deptname`。之后，在控制台窗口上显示`username`和`department`名称：
- en: '![](img/8b7da1e9-561b-44b2-b239-72c4041f0ccd.png)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8b7da1e9-561b-44b2-b239-72c4041f0ccd.png)'
- en: We're done... for now. Let's move on to the next section, where we will learn
    how to make our login page functional!
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们暂时完成了。让我们继续下一节，学习如何使我们的登录页面功能正常！
- en: Creating our functional login page
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的功能性登录页面
- en: Since we have learned how to connect our Qt application to the MariaDB/MySQL
    database system, it's time to continue working on the login page! In the previous
    chapter, we learned how to set up the GUI of our login page. However, it didn't
    have any functionality at all as a login page since it doesn't connect to the
    database and verify login credentials. Therefore, we will learn how to achieve
    that by empowering Qt's `sql` module.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经学会了如何将我们的Qt应用程序连接到MariaDB/MySQL数据库系统，现在是时候继续在登录页面上继续工作了！在上一章中，我们学会了如何设置登录页面的GUI。但是，它作为登录页面完全没有任何功能，因为它没有连接到数据库并验证登录凭据。因此，我们将学习如何通过赋予Qt的`sql`模块来实现这一点。
- en: 'Just to recap—this is what the login screen looks like:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 只是为了回顾一下——这就是登录界面的样子：
- en: '![](img/cb136c81-3dfb-4e7b-83f5-61bb09344f75.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cb136c81-3dfb-4e7b-83f5-61bb09344f75.png)'
- en: 'The very first thing we need to do now is to name the widgets that are important
    in this login page, which are the Username input, Password input, and the Submit
    button. You can set these properties by selecting the widget and looking for the
    property in the property editor:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要做的第一件事是为这个登录页面中重要的小部件命名，包括用户名输入、密码输入和提交按钮。您可以通过选择小部件并在属性编辑器中查找属性来设置这些属性：
- en: '![](img/b729735b-5cfb-437d-9b48-f45a85d46314.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b729735b-5cfb-437d-9b48-f45a85d46314.png)'
- en: 'Then, set the echoMode of the password input as Password. This setting will
    hide the password visually by replacing it with dots:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将密码输入的echoMode设置为Password。这个设置将通过用点替换密码来在视觉上隐藏密码：
- en: '![](img/5a5a484f-a746-4be7-8841-08707e28016e.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5a5a484f-a746-4be7-8841-08707e28016e.png)'
- en: 'After that, right-click on the Submit button and select Go to slot... A window
    will pop up and ask you which signal to use. Select clicked() and click OK:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，右键单击提交按钮，选择转到槽... 一个窗口将弹出并询问您要使用哪个信号。选择clicked()，然后点击确定：
- en: '![](img/aaf55004-4f8c-47b6-ba33-6aa31b5480b3.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aaf55004-4f8c-47b6-ba33-6aa31b5480b3.png)'
- en: A new function called `on_loginButton_clicked()` will be automatically added
    to the `MainWindow` class. This function will be triggered by Qt when the Submit
    button is pressed by the user, and thus you just need to write the code here to
    submit the `username` and `password` to the database for login verification. The
    signal and slots mechanism is a special feature provided by Qt which is used for
    communication between objects. When one widget is emitting a signal, another widget
    will be notified and will proceed to run a specific function that is designed
    to react to the particular signal.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 一个名为`on_loginButton_clicked()`的新函数将自动添加到`MainWindow`类中。当用户按下提交按钮时，这个函数将被Qt触发，因此你只需要在这里编写代码来提交`username`和`password`以进行登录验证。信号和槽机制是Qt提供的一项特殊功能，用于对象之间的通信。当一个小部件发出信号时，另一个小部件将收到通知，并将继续运行特定的函数，该函数旨在对特定信号做出反应。
- en: Let's check out the code.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看代码。
- en: 'First, add in the `sql` keyword at your project (.pro) file:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在项目（.pro）文件中添加`sql`关键字：
- en: '`QT += core gui`'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`QT += core gui`'
- en: '**sql**'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '**sql**'
- en: 'Then, proceed and add the relevant headers to `mainwindow.cpp`:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，继续在`mainwindow.cpp`中添加相关的头文件：
- en: '[PRE16]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then, go back to `mainwindow.cpp` and add the following code to the `on_loginButton_clicked()`
    function:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，回到`mainwindow.cpp`，在`on_loginButton_clicked()`函数中添加以下代码：
- en: '[PRE17]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now, click the Run button and wait for the application to start. Then, key in
    any random `username` and `password`, followed by clicking on the submit button.
    You should now see your `username` and `password` being displayed on the application
    output window in Qt Creator.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击运行按钮，等待应用程序启动。然后，输入任意随机的`username`和`password`，然后点击提交按钮。您现在应该在Qt Creator的应用程序输出窗口中看到您的`username`和`password`被显示出来。
- en: 'Next, we''ll copy the SQL integration code we have written previously into
    `mainwindow.cpp`:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将把之前编写的SQL集成代码复制到`mainwindow.cpp`中：
- en: '[PRE18]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Do note that I've used some random text for the database name, username, and
    password. Please make sure you enter the correct details here and that they match
    with what you've set in the database system.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我在数据库名称、用户名和密码中使用了一些随机文本。请确保在这里输入正确的详细信息，并确保它们与您在数据库系统中设置的内容匹配。
- en: 'One minor thing we have changed for the preceding code is that we only need
    to call `db = QSqlDatabase::addDatabase("QMYSQL")` in `mainwindow.cpp` without
    the class name as the declaration `QSqlDatabase db` has now been relocated to
    `mainwindow.h`:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对前面的代码做了一个小改动，就是我们只需要在`mainwindow.cpp`中调用`db = QSqlDatabase::addDatabase("QMYSQL")`，而不需要类名，因为声明`QSqlDatabase
    db`现在已经被移到了`mainwindow.h`中：
- en: '[PRE19]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Lastly, we add in the code that combines the `username` and `password` information
    with the SQL command, and send the whole thing to the database for execution.
    If there is a result that matches the login information, then it means that the
    login has been successful, otherwise, it means the login has failed:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们添加了将`username`和`password`信息与SQL命令结合的代码，并将整个内容发送到数据库进行执行。如果有与登录信息匹配的结果，那么意味着登录成功，否则，意味着登录失败：
- en: '[PRE20]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Click the Run button again and see what happens when you click the Submit button:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 再次点击运行按钮，看看当您点击提交按钮时会发生什么：
- en: '![](img/a486dbd1-070a-42c9-9c64-9b6f274b0987.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a486dbd1-070a-42c9-9c64-9b6f274b0987.png)'
- en: Hip hip hooray! The login page is now fully functional!
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 万岁！登录页面现在已经完全可用！
- en: Summary
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to set up a database system and make our Qt
    application connect to it. In the next chapter, we will learn how to draw graphs
    and charts using the powerful Qt Framework.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何设置数据库系统并使我们的Qt应用程序连接到它。在下一章中，我们将学习如何使用强大的Qt框架绘制图表和图表。
