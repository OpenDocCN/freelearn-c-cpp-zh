- en: Sound FX
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 音效
- en: The current state of sound on the web is a bit of a mess and has been for quite
    a while. For a long time, there were issues with loading MP3 versus OGG files
    based on which browser you were using. Recently, there have been issues with browsers
    blocking sounds that play automatically to prevent annoying audio spam. This feature
    in Chrome sometimes seems to create problems when playing audio in our game. I
    have noticed that, if Chrome does not initially play the audio, it will usually
    play if you reload the page. I have not had this problem on Firefox.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 网络上的音频当前处于一种混乱状态，而且已经有一段时间了。很长一段时间以来，根据您使用的浏览器的不同，加载MP3与OGG文件存在问题。最近，浏览器阻止自动播放声音以防止令人讨厌的音频垃圾的问题。Chrome中的这一功能有时似乎会在我们的游戏中播放音频时出现问题。我注意到，如果Chrome最初没有播放音频，通常在重新加载页面后就会播放。我在Firefox上没有遇到这个问题。
- en: You will need to include several images and audio files in your build to make
    this project work. Make sure that you include the `/Chapter12/sprites/` folder
    as well as the `/Chapter12/audio/` folder from the project's GitHub. If you haven't
    yet downloaded the GitHub project, you can get it online at [https://github.com/PacktPublishing/Hands-On-Game-Development-with-WebAssembly](https://github.com/PacktPublishing/Hands-On-Game-Development-with-WebAssembly).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在构建中包含几个图像和音频文件才能使该项目正常工作。确保您从项目的GitHub中包含`/Chapter12/sprites/`文件夹以及`/Chapter12/audio/`文件夹。如果您还没有下载GitHub项目，可以在[https://github.com/PacktPublishing/Hands-On-Game-Development-with-WebAssembly](https://github.com/PacktPublishing/Hands-On-Game-Development-with-WebAssembly)上获取它。
- en: Emscripten’s support for audio playback is not as good as I would like it to
    be. On the message boards, Emscripten's defenders are quick to blame the state
    of audio on the web as opposed to Emscripten itself, and there is some truth to
    that assessment. Emscripten's FAQ claims that Emscripten supports the use of SDL1
    Audio, SDL2 Audio, and OpenAL, but, in my experience, I have found that using
    a very limited set of SDL2 Audio provides the best outcomes. I am going to keep
    our use of SDL2 Audio to a minimum, using the audio queue instead of mixing sound
    effects. You may wish to expand on or modify what I have done here. OpenAL, in
    theory, should work with Emscripten, although I have not had much luck with it.
    Also, you may wish to look into `SDL_MixAudio` ([https://wiki.libsdl.org/SDL_MixAudio](https://wiki.libsdl.org/SDL_MixAudio))
    and `SDL_AudioStream` ([https://wiki.libsdl.org/Tutorials/AudioStream](https://wiki.libsdl.org/Tutorials/AudioStream))
    to improve the audio system in your game, but be aware that performance and support
    for streaming and mixing audio on the web may not be ready for prime time.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Emscripten对音频播放的支持并不如我所希望的那样好。在留言板上，Emscripten的支持者很快就把音频的状态归咎于网络而不是Emscripten本身，这种评估有一定道理。Emscripten的常见问题解答声称，Emscripten支持使用SDL1音频、SDL2音频和OpenAL，但根据我的经验，我发现使用非常有限的SDL2音频提供了最佳的结果。我将尽量减少对SDL2音频的使用，使用音频队列而不是混合音效。您可能希望扩展或修改我在这里所做的工作。理论上，OpenAL应该可以与Emscripten一起工作，尽管我在这方面并不太幸运。此外，您可能希望查看`SDL_MixAudio`（[https://wiki.libsdl.org/SDL_MixAudio](https://wiki.libsdl.org/SDL_MixAudio)）和`SDL_AudioStream`（[https://wiki.libsdl.org/Tutorials/AudioStream](https://wiki.libsdl.org/Tutorials/AudioStream)）来改进游戏中的音频系统，但请注意，网络上的音频流和混音的性能和支持可能还没有准备好投入实际使用。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Where to get sound effects
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取音效的地方
- en: Simple audio with Emscripten
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Emscripten制作简单音频
- en: Adding sound to our game
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向我们的游戏添加声音
- en: Compiling and running
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译和运行
- en: Where to get sound effects
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取音效的地方
- en: There are a lot of great places to get music and sound effects online. I generated
    the sound effects we use in this chapter with SFXR ([http://www.drpetter.se/project_sfxr.html](http://www.drpetter.se/project_sfxr.html)),
    which is a tool used to generate old school 8-bit sound effects that sound like
    something you would hear in an NES game. These kinds of sound effects may not
    be to your taste. OpenGameArt.org also has a large collection of sound effects
    ([https://opengameart.org/art-search-advanced?keys=&field_art_type_tid%5B%5D=13&sort_by=count&sort_order=DESC](https://opengameart.org/art-search-advanced?keys=&field_art_type_tid%5B%5D=13&sort_by=count&sort_order=DESC))
    and music ([https://opengameart.org/art-search-advanced?keys=&field_art_type_tid%5B%5D=12&sort_by=count&sort_order=DESC](https://opengameart.org/art-search-advanced?keys=&field_art_type_tid%5B%5D=12&sort_by=count&sort_order=DESC))
    with a variety of open licenses, so make sure that you look over the license of
    any sounds or art on that website before you use it.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多很棒的地方可以在线获取音乐和音效。我使用SFXR（[http://www.drpetter.se/project_sfxr.html](http://www.drpetter.se/project_sfxr.html)）生成了本章中使用的音效，这是一个用于生成类似NES游戏中听到的老式8位音效的工具。这种类型的音效可能不符合您的口味。OpenGameArt.org还有大量的音效（[https://opengameart.org/art-search-advanced?keys=&field_art_type_tid%5B%5D=13&sort_by=count&sort_order=DESC](https://opengameart.org/art-search-advanced?keys=&field_art_type_tid%5B%5D=13&sort_by=count&sort_order=DESC)）和音乐（[https://opengameart.org/art-search-advanced?keys=&field_art_type_tid%5B%5D=12&sort_by=count&sort_order=DESC](https://opengameart.org/art-search-advanced?keys=&field_art_type_tid%5B%5D=12&sort_by=count&sort_order=DESC)）的大量开放许可，因此在使用该网站上的任何音频或艺术之前，请确保您仔细阅读许可证。
- en: Simple audio with Emscripten
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Emscripten制作简单音频
- en: 'Before we add sound effects to our main game, I will show you how to make an
    audio player in the `audio.c` file to demonstrate how **SDL Audio** can be used
    to play sound effects in a WebAssembly application. This application will take
    five sound effects that we will use in our game and allow the user to press number
    keys one to five to play all of the chosen sound effects. I will first show you
    the code broken into two sections, and then I will walk you through what everything
    does. Here is all of the code in `audio.c` with the exception of the `main` function:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '在我们将音效添加到主游戏之前，我将向您展示如何在`audio.c`文件中制作音频播放器，以演示**SDL音频**如何在WebAssembly应用程序中用于播放音效。该应用程序将使用五种我们将在游戏中使用的音效，并允许用户按数字键1到5来播放所有选择的音效。我将首先向您展示代码分为两个部分，然后我将向您解释每一部分的功能。以下是`audio.c`中的所有代码，除了`main`函数： '
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'At the end of the `audio.c` file we have our `main` function:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在`audio.c`文件的末尾，我们有我们的`main`函数：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now that you have seen the entire audio.c file, let''s take a look at all of
    its parts. At the top of this file, we have our `#include` and `#define` macros:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经看到了整个`audio.c`文件，让我们来看看它的所有部分。在这个文件的顶部，我们有我们的`#include`和`#define`宏：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'After that, we have our SDL specific-global variables. We need an `SDL_AudioDeviceID`
    for our audio output. `SDL_Window`, `SDL_Renderer` and `SDL_Event` have been used
    in most of the earlier chapters and should be familiar by now:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们有我们的SDL特定的全局变量。我们需要一个`SDL_AudioDeviceID`用于我们的音频输出。`SDL_Window`、`SDL_Renderer`和`SDL_Event`在大多数早期章节中都被使用过，现在应该很熟悉了：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We are working on a C program, not a C++ program, so we will be using a structure
    to hold our audio data instead of a class. We will create a C structure called
    `audio_clip` that will hold all of the information for the audio we will be playing
    in our application. This information includes a string holding the filename. It
    contains an `SDL_AudioSpec` object that holds the audio specification. It also
    contains the length of the audio clip and a pointer to an 8-bit data buffer, which
    holds the waveform data of the audio clip. After the `audio_clip` structure is
    defined, five instances of that structure are created that we will later be able
    to use to play these sounds:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在开发一个C程序，而不是C++程序，所以我们将使用一个结构来保存我们的音频数据，而不是一个类。我们将创建一个名为`audio_clip`的C结构，它将保存我们应用程序中将要播放的音频的所有信息。这些信息包括一个包含文件名的字符串。它包含一个保存音频规格的`SDL_AudioSpec`对象。它还包含音频片段的长度和一个指向8位数据缓冲区的指针，该缓冲区保存了音频片段的波形数据。在定义了`audio_clip`结构之后，创建了五个该结构的实例，我们稍后将能够使用这些声音进行播放：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'After we define the `audio_clip` structure, we need to create a function to
    play the audio in that structure. This function calls `SDL_QueueAudio` passing
    in the global `device_id`, a pointer to the waveform buffer, and the length of
    the clip. The `device_id` is a reference to the audio device (sound card). The
    `clip->buf` variable is a pointer to a buffer that contains the waveform data
    of the `.wav` file we will be loading. The `clip->len` variable contains the length
    of time that the clip plays:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们定义了`audio_clip`结构之后，我们需要创建一个函数来播放该结构中的音频。这个函数调用`SDL_QueueAudio`，传入全局`device_id`、波形缓冲区的指针和片段的长度。`device_id`是对音频设备（声卡）的引用。`clip->buf`变量是一个指向包含我们将要加载的`.wav`文件的波形数据的缓冲区的指针。`clip->len`变量包含片段播放的时间长度：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The next function we need is the function that initializes our `audio_clip`
    so that we can pass it into the `play_audio` function. This function sets the
    filename of our `audio_clip` and loads a wave file setting the `spec`, `buf`,
    and `len` values in our `audio_clip`. If the call to `SDL_LoadWAV` fails, we print
    out an error message:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要的下一个函数是初始化我们的`audio_clip`，这样我们就可以将它传递到`play_audio`函数中。这个函数设置了我们的`audio_clip`的文件名，并加载了一个波形文件，设置了我们的`audio_clip`中的`spec`、`buf`和`len`值。如果调用`SDL_LoadWAV`失败，我们会打印出一个错误消息：
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `input_loop` should look pretty familiar by now. The function calls the
    `SDL_PollEvent` and uses the event it returns to check for a keyboard key release.
    It checks to see which key is released. If that key is one of the number keys
    from one to five, a switch statement is used to call the `play_audio` function,
    passing in a specific `audio_clip`. The reason we are using the key release instead
    of the key press is to prevent the key repeat when the user holds the key down.
    We could easily prevent this, but I am trying to keep the code for this application
    as short as possible. Here is the `input_loop` code:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`input_loop`现在应该看起来很熟悉了。该函数调用`SDL_PollEvent`并使用它返回的事件来检查键盘按键的释放。它检查释放了哪个键。如果该键是从一到五的数字键之一，那么使用switch语句调用`play_audio`函数，传入特定的`audio_clip`。我们使用按键释放而不是按键按下的原因是为了防止用户按住键时的按键重复。我们可以很容易地防止这种情况，但我正在尽量保持这个应用程序的代码尽可能简短。这是`input_loop`的代码：'
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'As always, the `main` function does all of the initialization for our application.
    In addition to the initialization that we executed in previous applications, we
    need a new initialization for our audio. This is what the new version of the `main`
    function looks like:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，`main`函数负责我们应用程序的所有初始化。除了我们在之前的应用程序中执行的初始化之外，我们还需要对我们的音频进行新的初始化。这就是`main`函数的新版本。
- en: '[PRE8]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The first thing we changed was our call to `SDL_Init`. We needed to add a flag
    telling SDL to initialize the audio subsystem. We did this by adding `|SLD_INIT_AUDIO`
    to the parameter we passed in, which performs a bitwise operation on the parameter
    with the `SDL_INIT_AUDIO` flag. Following the new version of `SDL_Init`, we will
    create the window and renderer, which we have done many times at this point.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们改变的第一件事是我们对`SDL_Init`的调用。我们需要添加一个标志，告诉SDL初始化音频子系统。我们通过在传入的参数中添加`|SLD_INIT_AUDIO`来实现这一点，这将对参数进行位操作，并使用`SDL_INIT_AUDIO`标志。在新版本的`SDL_Init`之后，我们将创建窗口和渲染器，这在这一点上我们已经做了很多次。
- en: 'The `init_audio` calls are all new and initialize our `audio_clip` structures:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`init_audio`调用都是新的，并初始化了我们的`audio_clip`结构：'
- en: '[PRE9]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, we need to call `SDL_OpenAudioDevice` and retrieve a device ID. Opening
    an audio device requires a default spec, which informs the audio device of the
    quality of sound clip that you would like to play. Make sure that you pick a sound
    file with a quality level that is a good example of what you would like to play
    in your game. In our code, we chose `enemy_laser_snd`. We also need to call `SDL_PauseAudioDevice`.
    Whenever you create a new audio device, it is paused by default. Calling `SDL_PauseAudioDevice`
    and passing in `0` as the second parameter unpauses the audio device we just created.
    I found this a little confusing at first, but keep in mind that the following
    call to `SDL_PauseAudioDevice` is actually unpausing the audio clip:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要调用`SDL_OpenAudioDevice`并检索设备ID。打开音频设备需要一个默认规范，它通知音频设备您想要播放的声音剪辑的质量。确保选择一个声音文件，其质量水平是您想在游戏中播放的一个很好的例子。在我们的代码中，我们选择了`enemy_laser_snd`。我们还需要调用`SDL_PauseAudioDevice`。每当创建新的音频设备时，默认情况下会暂停。调用`SDL_PauseAudioDevice`并将`0`作为第二个参数传递进去会取消暂停我们刚刚创建的音频设备。起初我觉得有点困惑，但请记住，对`SDL_PauseAudioDevice`的后续调用实际上是取消暂停音频剪辑：
- en: '[PRE10]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The last thing we will do before returning is set our loop to be the `input_loop`
    function we created earlier:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在返回之前，我们将做的最后一件事是将我们的循环设置为我们之前创建的`input_loop`函数：
- en: '[PRE11]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now that we have our code, we should compile and test our `audio.c` file:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了代码，我们应该编译和测试我们的`audio.c`文件：
- en: '[PRE12]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We need to preload the audio folder so that we have access to the `.wav` files
    in our virtual filesystem. Then, load `audio.html` in a web browser, serving the
    file with emrun, or with an alternative web server. When you load the application
    in Chrome, you may run into some minor difficulties. New versions of Chrome have
    added checks to prevent unrequested audio from playing to prevent some of the
    irritating spam that has been going around. Sometimes, this check is a little
    too sensitive, and this can prevent the audio in our game from running. If this
    happens to you, try reloading the page in the Chrome browser. Sometimes, this
    fixes the problem. Another way to prevent this from happening is to switch over
    to Firefox.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要预加载音频文件夹，以便在虚拟文件系统中访问`.wav`文件。然后，在Web浏览器中加载`audio.html`，使用emrun提供文件，或者使用其他替代Web服务器。当您在Chrome中加载应用程序时，可能会遇到一些小困难。Chrome的新版本已添加了检查，以防止未经请求的音频播放，以防止一些令人讨厌的垃圾邮件。有时，这种检查过于敏感，这可能会阻止我们游戏中的音频运行。如果发生这种情况，请尝试在Chrome浏览器中重新加载页面。有时，这可以解决问题。另一种防止这种情况发生的方法是切换到Firefox。
- en: Adding sound to our game
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向我们的游戏添加声音
- en: Now that we have an understanding of how to get SDL Audio to work on the web,
    we can start adding sound effects to our game. We will not be using a mixer in
    our game, so only one sound effect will play at a time. Because of this, we will
    need to classify some sounds as **priority** sound effects. If a priority sound
    effect is triggered, the sound queue will clear, and that sound effect will run.
    We also want to prevent our sound queue from becoming too long, so we will clear
    our sound queue if there are more than two items in it. Do not fear! I will repeat
    all of this when we get to that part of our code.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了如何在Web上让SDL音频工作，我们可以开始向我们的游戏添加音效。我们的游戏中不会使用混音器，因此一次只会播放一个音效。因此，我们需要将一些声音分类为**优先**音效。如果触发了优先音效，声音队列将被清除，并且该音效将运行。我们还希望防止我们的声音队列变得太长，因此如果其中有两个以上的项目，我们将清除我们的声音队列。不要害怕！当我们到达代码的那部分时，我会重复所有这些。
- en: Updating game.hpp
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新game.hpp
- en: 'The first thing we will need to change is our `game.hpp` file. We need to add
    a new `Audio` class, as well as other new code to support audio in our game. Near
    the top of the `game.hpp` file, we will add a series of `#define` macros to define
    the location of our sound effect `.wav` files:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要改变的第一件事是我们的`game.hpp`文件。我们需要添加一个新的`Audio`类，以及其他新代码来支持我们游戏中的音频。在`game.hpp`文件的顶部附近，我们将添加一系列`#define`宏来定义我们声音效果`.wav`文件的位置：
- en: '[PRE13]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'At the top of our list of class declarations, we should add a new declaration
    of a class called `Audio`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的类声明列表的顶部，我们应该添加一个名为`Audio`的新类声明：
- en: '[PRE14]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We will then define the new `Audio` class, which will be very similar to the
    `audio_clip` structure that we used in our `audio.c` file. This class will have
    a filename, a spec, a length (in runtime), and a buffer. It will also have a priority
    flag that, when set, will give it priority over everything else that is currently
    in our audio queue. Finally, we will have two functions in this class; a constructor
    that will initialize the sound, and a `Play` function that will actually play
    the sound. This is what the class definition looks like:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将定义新的`Audio`类，它将与我们在`audio.c`文件中使用的`audio_clip`结构非常相似。这个类将有一个文件名，一个规范，一个长度（以运行时间为单位）和一个缓冲区。它还将有一个优先标志，当设置时，将优先于我们音频队列中当前的所有其他内容。最后，我们将在这个类中有两个函数；一个构造函数，用于初始化声音，和一个`Play`函数，用于实际播放声音。这就是类定义的样子：
- en: '[PRE15]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Finally, we need to define some external audio related to global variables.
    These global variables will be references to the variables that will appear in
    our `main.cpp` file. Most of these are instances of the `Audio` class, which will
    be used in our game to play audio files. The last of these variables is a reference
    to our audio device:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要定义一些外部与音频相关的全局变量。这些全局变量将是对将出现在我们的`main.cpp`文件中的变量的引用。其中大部分是`Audio`类的实例，将在我们的游戏中用于播放音频文件。最后一个变量是对我们的音频设备的引用：
- en: '[PRE16]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Updating main.cpp
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新main.cpp
- en: 'The first thing we need to do in our `main.cpp` file is define the audio-related
    global variables that we defined as external variables at the end of the `game.hpp`
    file:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`main.cpp`文件中要做的第一件事是定义我们在`game.hpp`文件的末尾定义为外部变量的与音频相关的全局变量：
- en: '[PRE17]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Most of these sound effects are related to explosions that occur when there
    is a collision in our game. Because of this, we will be adding calls to play these
    sound effects throughout our `collisions` function. This is what the new version
    of our `collisions` function looks like:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这些音效大多与我们游戏中发生碰撞时爆炸有关。因此，我们将在整个`collisions`函数中添加调用以播放这些音效。这是我们`collisions`函数的新版本：
- en: '[PRE18]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Sounds will now play after several explosions and collisions; for example,
    after the player explodes:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在声音将在几次爆炸和碰撞后播放；例如，在玩家爆炸后：
- en: '[PRE19]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Sound will also play when the enemy ship explodes:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当敌舰爆炸时也会播放声音：
- en: '[PRE20]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'After an asteroid explodes, we will want the same effect:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在一颗小行星爆炸后，我们也希望有同样的效果：
- en: '[PRE21]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'If an enemy shield is hit, we want to play the `hit` sound:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果敌人的护盾被击中，我们想播放`hit`声音：
- en: '[PRE22]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Similarly, if the player''s shield is hit, we will, again, want to play the
    `hit` sound:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果玩家的护盾被击中，我们还想播放`hit`声音：
- en: '[PRE23]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Finally, we need to change the `main` function to initialize our audio. Here
    is the entire `main` function code:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要更改`main`函数来初始化我们的音频。以下是完整的`main`函数代码：
- en: '[PRE24]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The first change we need to make to the `main` function is to the `SDL_Init`
    call to include the initialization of the audio subsystem:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要对`main`函数进行的第一个更改是在`SDL_Init`调用中包括音频子系统的初始化：
- en: '[PRE25]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The other change we need to make is the addition of the new `Audio` objects
    and the call to `SDL_OpenAudioDevice`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的另一个更改是添加新的`Audio`对象和调用`SDL_OpenAudioDevice`：
- en: '[PRE26]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Updating ship.cpp
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新ship.cpp
- en: 'The `ship.cpp` file has one minor change to it. We are adding a call to play
    a sound when the ship launches a projectile. That happens in the `Ship::Shoot()`
    function. You will notice that the call to `player_laser_snd->Play()` occurs after
    the call to `projectile->Launch`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`ship.cpp`文件有一个小的更改。我们正在添加一个调用，当飞船发射抛射物时播放声音。这发生在`Ship::Shoot()`函数中。您会注意到在调用`projectile->Launch`之后发生对`player_laser_snd->Play()`的调用：'
- en: '[PRE27]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The new audio.cpp file
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新的audio.cpp文件
- en: 'We are adding a new `audio.cpp` file to implement the `Audio` class constructor
    function and the `Audio` class `Play` function. Here is the `audio.cpp` file in
    its entirety:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在添加一个新的`audio.cpp`文件来实现`Audio`类的构造函数和`Audio`类的`Play`函数。以下是完整的`audio.cpp`文件：
- en: '[PRE28]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The first function in this file is the constructor for the `Audio` class. This
    function sets the `FileName` attribute to the value passed and sets the `priority`
    value. It also loads the wave file from the filename passed in and uses the `SDL_LoadWAV`
    file to set the `spec`, `buf`, and `len` attributes.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件中的第一个函数是`Audio`类的构造函数。此函数将`FileName`属性设置为传递的值，并设置`priority`值。它还从传递的文件名加载波形文件，并使用`SDL_LoadWAV`文件设置`spec`、`buf`和`len`属性。
- en: 'The `Audio::Play()` function first looks to see whether this is high-priority
    audio, or whether the size of the audio queue is greater than two sounds. If either
    of these is the case, we clear out the audio queue:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`Audio::Play()`函数首先查看这是否是高优先级音频，或者音频队列的大小是否大于两个声音。如果是这种情况，我们会清空音频队列：'
- en: '[PRE29]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We are doing this because we do not want to mix the audio. We are playing the
    audio sequentially in a queue. If we have a priority audio clip, we want to clear
    out the queue so that the audio plays immediately. We also want to do this if
    the queue is too long. We will then call `SDL_QueueAudio` to queue up this sound
    to play as soon as possible:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这样做是因为我们不想混合音频。我们正在按顺序播放音频。如果我们有一个优先级音频剪辑，我们希望清空队列，以便音频立即播放。如果队列太长，我们也希望这样做。然后我们将调用`SDL_QueueAudio`来排队播放此声音以尽快播放：
- en: '[PRE30]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Now, we should be ready to compile and run our code.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们应该准备编译和运行我们的代码。
- en: Compiling and running
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编译和运行
- en: 'Now that we have made all the necessary changes to our code, we can compile
    and run our new code with Emscripten:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经对我们的代码进行了所有必要的更改，我们可以使用Emscripten编译和运行我们的新代码：
- en: '[PRE31]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: There are no new flags added to allow us to use the SDL Audio library. However,
    we need to add a new `--preload-file audio` flag to load the new `audio` directory
    into our virtual filesystem. Once you have compiled the new version of the game,
    you can run it using emrun (assuming that you included the necessary emrun flag
    when you compiled). If you prefer, you can choose a different web server to serve
    these files.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 没有添加新的标志来允许我们使用SDL音频库。但是，我们需要添加一个新的`--preload-file audio`标志，将新的`audio`目录加载到我们的虚拟文件系统中。一旦编译了游戏的新版本，您可以使用emrun来运行它（假设您在编译时包含了必要的emrun标志）。如果您愿意，您也可以选择一个不同的Web服务器来提供这些文件。
- en: Summary
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We have discussed the current (messy) state of audio on the web and have looked
    at the audio libraries available to Emscripten. I mentioned a few places where
    you can get free sound effects. We created a simple audio application using C
    and Emscripten that allowed us to play a series of audio files. We then added
    sound effects to our game, which included explosion and laser sounds. We modified
    our initialization code inside the `main()` function to initialize the SDL Audio
    subsystem. We added a new `Shoot` function to be used by our spaceships when they
    shoot projectiles. We also created a new `Audio` class to help us play our audio
    files.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了网络上当前（混乱的）音频状态，并查看了Emscripten可用的音频库。我提到了一些可以获得免费音效的地方。我们使用C和Emscripten创建了一个简单的音频应用程序，允许我们播放一系列音频文件。然后我们为我们的游戏添加了音效，包括爆炸和激光声音。我们修改了`main()`函数中的初始化代码，以初始化SDL音频子系统。我们添加了一个新的`Shoot`函数，供我们的飞船在发射抛射物时使用。我们还创建了一个新的`Audio`类来帮助我们播放我们的音频文件。
- en: In the next chapter, we will learn how we can add some physics to our game.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何为我们的游戏添加一些物理效果。
