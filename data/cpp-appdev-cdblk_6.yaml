- en: Appendix A. Appendix
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录A. 附录
- en: This Appendix focuses on the feature set of Code::Blocks. Apart from code editing,
    managing, and building, Code::Blocks has numerous other features. It can be scripted
    to extend features of Code::Blocks. It has plugin to generate documentation of
    code. It is also able to export code in different formats such as rich text format,
    portable document format, and so on. It can also manage snippets of code to ease
    the development process. We shall discuss about them in the next couple of sections.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本附录侧重于Code::Blocks的功能集。除了代码编辑、管理和构建之外，Code::Blocks还有许多其他功能。它可以被脚本化以扩展Code::Blocks的功能。它有插件可以生成代码文档。它还能够以不同格式导出代码，如富文本格式、便携式文档格式等。它还可以管理代码片段以简化开发过程。我们将在接下来的几节中讨论它们。
- en: Scripting Code::Blocks
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚本化Code::Blocks
- en: Code::Blocks uses **Squirrel** language for scripting. Squirrel language is
    a high-level, object oriented, and light weight programming language. Squirrel
    syntax is similar to C/C++ programing language.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Code::Blocks使用**Squirrel**语言进行脚本编写。Squirrel语言是一种高级、面向对象、轻量级的编程语言。Squirrel语法类似于C/C++编程语言。
- en: Code::Blocks exposes a large amount of its API via scripting. As a result several
    aspects of Code::Blocks can be extended via scripting.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Code::Blocks通过脚本公开了大量API。因此，Code::Blocks的许多方面都可以通过脚本进行扩展。
- en: 'Refer to the documentation from the following URLS for scripting references:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 有关脚本参考，请参考以下网址的文档：
- en: '**Scripting commands**: [http://wiki.codeblocks.org/index.php?title=Scripting_commands](http://wiki.codeblocks.org/index.php?title=Scripting_commands)'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**脚本命令**：[http://wiki.codeblocks.org/index.php?title=Scripting_commands](http://wiki.codeblocks.org/index.php?title=Scripting_commands)'
- en: '**API bindings**: [http://wiki.codeblocks.org/index.php?title=Script_bindin](http://wiki.codeblocks.org/index.php?title=Script_bindin)'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API绑定**：[http://wiki.codeblocks.org/index.php?title=Script_bindin](http://wiki.codeblocks.org/index.php?title=Script_bindin)'
- en: Documentation generation
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文档生成
- en: Documentation of code is very important for any project. It builds an overview
    of the written code, explains its usage, and helps developers understand the code.
    Code::Blocks allows generation of code documentation from the IDE itself.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何项目，代码文档都非常重要。它建立了编写的代码的概述，解释了其用法，并帮助开发人员理解代码。Code::Blocks允许从IDE本身生成代码文档。
- en: '**Doxygen** is a standard tool to create documentation from annotated C++ files.
    Code::Blocks comes with a plugin called **DoxyBlocks** that creates an interface
    with the externally installed doxygen tool.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**Doxygen**是从带注释的C++文件创建文档的标准工具。Code::Blocks带有一个名为**DoxyBlocks**的插件，它与外部安装的doxygen工具创建了一个接口。'
- en: 'We need to download and install doxygen tool first. Subsequently we can use
    DoxyBlocks plugin to generate documentation. Perform the following steps:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先需要下载并安装doxygen工具。随后我们可以使用DoxyBlocks插件生成文档。执行以下步骤：
- en: Download doxygen from the following URL—[http://www.stack.nl/~dimitri/doxygen/download.html](http://www.stack.nl/~dimitri/doxygen/download.html).
    Also download `doxygen-x.x.x-setup.exe` file. Double-click on that file to install
    it.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下网址下载doxygen - [http://www.stack.nl/~dimitri/doxygen/download.html](http://www.stack.nl/~dimitri/doxygen/download.html)。还要下载`doxygen-x.x.x-setup.exe`文件。双击该文件进行安装。
- en: We need to connect DoxyBlocks plugin with doxygen tool. Go to **DoxyBlocks**
    | **Open preferences…** menu option. The following screenshot will be displayed:![Documentation
    generation](img/3415OS_06_01.jpg)
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要将DoxyBlocks插件与doxygen工具连接起来。转到**DoxyBlocks** | **打开首选项...**菜单选项。将显示以下截图：![文档生成](img/3415OS_06_01.jpg)
- en: Click on the **General** tab. Next click on the **Browse** button next to **Path
    To doxygen** option and set the path to `C:\Program Files\doxygen\bin\doxygen.exe`.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**常规**选项卡。然后单击**Path To doxygen**选项旁边的**浏览**按钮，并设置路径为`C:\Program Files\doxygen\bin\doxygen.exe`。
- en: 'Next create a new C++ console project and add the following code to wizard
    generated `main.cpp` file:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来创建一个新的C++控制台项目，并将以下代码添加到向导生成的`main.cpp`文件中：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Navigate to **DoxyBlocks** | **Extract documentation** menu option or press
    *Ctrl* + *Alt*+ *E* key combination. Code::Blocks will now generate documentation
    of the project inside `doxygen` folder.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**DoxyBlocks** | **提取文档**菜单选项，或按下*Ctrl* + *Alt* + *E*键组合。Code::Blocks现在将在`doxygen`文件夹内生成项目文档。
- en: Go to **DoxyBlocks** | **Run HTML** menu option or press the *Ctrl* + *Alt*
    + *H* key combination to open the newly created documentation in a Web browser.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**DoxyBlocks** | **运行HTML**菜单选项，或按下*Ctrl* + *Alt* + *H*键组合，以在Web浏览器中打开新创建的文档。
- en: We can also add additional detailed description of function, class, etc to create
    a detailed documentation.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以添加有关函数、类等的详细描述，以创建详细的文档。
- en: 'Move the cursor to the beginning of `B::CallMe()` function and click on the
    **DoxyBlocks | /** Block comment** menu option or press *Ctrl* + *Alt* + *B* key
    combination. Code::Blocks will analyze the function parameters and will insert
    a default comment block suitable for doxygen tool. Adjust the comment block and
    our code will look similar to the following snippet:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将光标移动到`B::CallMe()`函数的开头，然后单击**DoxyBlocks | /** Block comment**菜单选项，或按下*Ctrl*
    + *Alt* + *B*键组合。Code::Blocks将分析函数参数，并插入适合doxygen工具的默认注释块。调整注释块，我们的代码将类似于以下代码片段：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Press *Ctrl* + *Alt* + *E* key combination to regenerate the documentation and
    use the *Ctrl* + *Alt* + *H* key combination to open it inside Web browser. Documentation
    of `B::CallMe()` will look similar to the following screenshot:![Documentation
    generation](img/3415OS_06_02.jpg)
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下*Ctrl* + *Alt* + *E*键组合重新生成文档，并使用*Ctrl* + *Alt* + *H*键组合在Web浏览器中打开它。`B::CallMe()`的文档将类似于以下截图：![文档生成](img/3415OS_06_02.jpg)
- en: We can also customize DoxyBlocks plugin option to use advanced features of doxygen.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以定制DoxyBlocks插件选项，以使用doxygen的高级功能。
- en: Management of code snippets
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码片段管理
- en: Code::Blocks allows developers to store and retrieve frequently used code snippets.
    We have used DoxyBlocks plugin in our previous example to comment blocks suitable
    for generating documents. However we can also save a blank template as a code
    snippet and reuse it wherever needed.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Code::Blocks允许开发人员存储和检索经常使用的代码片段。在我们之前的示例中，我们使用了DoxyBlocks插件来注释适用于生成文档的块。但是我们也可以将空模板保存为代码片段，并在需要时重复使用它。
- en: Go to **View** | **Code snippets** menu option to show the **CodeSnippets**
    window.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**视图** | **代码片段**菜单选项，以显示**CodeSnippets**窗口。
- en: Right-click on the `codesnippets` in the tree and select **Add SubCategory**
    menu option.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击树中的`codesnippets`，然后选择**添加子类别**菜单选项。
- en: Name it `doxygen`. Right-click on this **doxygen** category and click on the
    **Add snippet** menu option.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其命名为`doxygen`。右键单击此**doxygen**类别，然后单击**添加片段**菜单选项。
- en: 'Enter `Block comment` as **Label** and following code as the snippet text:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`块注释`输入为**标签**，并将以下代码输入为片段文本：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Click on the **OK** button to save this snippet. **CodeSnippets** window will
    look similar to the following screenshot:![Management of code snippets](img/3415OS_06_03.jpg)
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**确定**按钮以保存此片段。**CodeSnippets**窗口将类似于以下屏幕截图：![管理代码片段](img/3415OS_06_03.jpg)
- en: Now click on any place in the Code::Blocks editor window, right-click on this
    snippet and select **Apply** menu option. This snippet will now be pasted into
    the Editor window.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在单击Code::Blocks编辑器窗口中的任何位置，右键单击此片段，然后选择**应用**菜单选项。此片段现在将粘贴到编辑器窗口中。
- en: We can add code, bookmarks, text files as a code snippet. Code snippets are
    not project specific and works across all the projects.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将代码、书签、文本文件添加为代码片段。代码片段不是特定于项目的，并且适用于所有项目。
- en: Use of external tools for a project
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目使用外部工具
- en: Code::Blocks allows user to use external tools for any project. Imagine we want
    to use doxygen tool to generate documentation without using the DoxyBlocks plugin.
    We can add doxygen as an external tool and then use it on demand.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Code::Blocks允许用户为任何项目使用外部工具。想象一下，我们想要使用doxygen工具来生成文档，而不使用DoxyBlocks插件。我们可以将doxygen添加为外部工具，然后根据需要使用它。
- en: Go to **Tools** | **Configure tools…** menu option to add a new tool. The following
    window will be opened:![Use of external tools for a project](img/3415OS_06_04.jpg)
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**工具** | **配置工具…**菜单选项以添加新工具。将打开以下窗口：![项目使用外部工具](img/3415OS_06_04.jpg)
- en: Click on the **Add** button to add a new tool. The following window will be
    opened:![Use of external tools for a project](img/3415OS_06_05.jpg)
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**添加**按钮以添加新工具。将打开以下窗口：![项目使用外部工具](img/3415OS_06_05.jpg)
- en: 'Enter following details:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下详细信息：
- en: Set **Name** property to `doxygen`. This value will be used to create a new
    menu item under **Tools** menu
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**名称**属性设置为`doxygen`。此值将用于在**工具**菜单下创建一个新的菜单项
- en: Set **Executable** property to `C:\Program Files\doxygen\bin\doxygen.exe`
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**可执行文件**属性设置为`C:\Program Files\doxygen\bin\doxygen.exe`
- en: Set **Parameters** property to `${PROJECT_DIR}doxygen\doxyfile`
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**参数**属性设置为`${PROJECT_DIR}doxygen\doxyfile`
- en: Set **Working** directory property to `${PROJECT_DIR}doxygen\`
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**工作目录**属性设置为`${PROJECT_DIR}doxygen\`
- en: Click on the **OK** button to close this window and then click on the **OK**
    button to close **User-defined tools** window. A menu item will be created under
    **Tools** menu option.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**确定**按钮关闭此窗口，然后单击**确定**按钮关闭**用户定义的工具**窗口。将在**工具**菜单选项下创建一个菜单项。
- en: Navigate to **Tools** | **doxygen** menu option and the doxygen tool will be
    launched inside a console window. Press any key to close this console window when
    it has completed.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**工具** | **doxygen**菜单选项，doxygen工具将在控制台窗口内启动。当完成后，按任意键关闭此控制台窗口。
- en: We can use any other tool in a similar manner.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以以类似的方式使用任何其他工具。
- en: Exporting source code in different format
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以不同格式导出源代码
- en: 'Code::Blocks allows user to export source code to HTML, RTF, ODF, or PDF format.
    Perform the following steps to export source in different format:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Code::Blocks允许用户将源代码导出为HTML、RTF、ODF或PDF格式。执行以下步骤以以不同格式导出源代码：
- en: To export a file as PDF format go to **File** | **Export** | **As PDF…** menu
    option.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将文件导出为PDF格式，请转到**文件** | **导出** | **作为PDF…**菜单选项。
- en: Enter a file name and path in the next dialog. Click on the **Save** button
    to continue.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个对话框中输入文件名和路径。单击**保存**按钮继续。
- en: Code::Block will prompt to confirm inclusion of line numbers in the exported
    source code. Select **Yes** or **No** option and that particular source file will
    be exported.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Code::Block将提示确认在导出的源代码中包含行号。选择**是**或**否**选项，将导出特定的源文件。
