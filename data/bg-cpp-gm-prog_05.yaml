- en: Chapter 5. Collisions, Sound, and End Conditions – Making the Game Playable
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。碰撞、声音和结束条件-使游戏可玩
- en: 'This is the final phase of the first project. By the end of this chapter you
    will have your first completed game. Once you have Timber!!! up-and-running, be
    sure to read the last section of this chapter as it will suggest ways to make
    the game better. We will be looking at the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这是第一个项目的最后阶段。在本章结束时，您将拥有您的第一个完成的游戏。一旦您运行了Timber！！！，一定要阅读本章的最后一节，因为它将提出改进游戏的建议。我们将讨论以下主题：
- en: Adding the rest of the sprites
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加其余的精灵
- en: Handling the player input
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理玩家输入
- en: Animating the flying log
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动画飞行原木
- en: Handling death
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理死亡
- en: Adding sound effects
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加音效
- en: Adding features and improving Timber!!!
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加功能并改进Timber！！！
- en: Preparing the player (and other sprites)
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备玩家（和其他精灵）
- en: Let's add the code for the player's sprite, as well as a few more sprites and
    textures at the same time. This next, quite large, block of code also adds a gravestone
    sprite for when the player gets squished, an ax sprite to chop with, and a log
    sprite that can whiz away each time the player chops.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们同时为玩家的精灵添加代码，以及一些更多的精灵和纹理。这下面的相当大的代码块还为玩家被压扁时添加了一个墓碑精灵，一个用来砍伐的斧头精灵，以及一个可以在玩家砍伐时飞走的原木精灵。
- en: Notice that after the `spritePlayer` object we also declare a `side` variable,
    `playerSide,` to keep track of where the player is currently standing. Furthermore,
    we add some extra variables for the `spriteLog` object, including, `logSpeedX`,
    `logSpeedY`, and `logActive` to store how fast the log will move, and whether
    it is currently moving. The `spriteAxe` also has two related `float` constant
    variables to remember where the ideal pixel position is on both the left and the
    right.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在`spritePlayer`对象之后，我们还声明了一个`side`变量`playerSide`，以跟踪玩家当前站立的位置。此外，我们为`spriteLog`对象添加了一些额外的变量，包括`logSpeedX`、`logSpeedY`和`logActive`，用于存储原木的移动速度以及它当前是否在移动。`spriteAxe`还有两个相关的`float`常量变量，用于记住左右两侧的理想像素位置。
- en: Add this next block of code just before the `while(window.isOpen())` code as
    we have done so often before. Note that all the code in this next listing is new,
    not just the highlighted code. I haven't provided any extra context for the next
    block of code as `while(window.isOpen())` should be easy to identify. The highlighted
    code is the code we have just specifically discussed.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 像以前那样，在`while(window.isOpen())`代码之前添加下一个代码块。请注意，下一个清单中的所有代码都是新的，而不仅仅是突出显示的代码。我没有为下一个代码块提供任何额外的上下文，因为`while(window.isOpen())`应该很容易识别。突出显示的代码是我们刚刚讨论过的代码。
- en: 'Add the entirety of this code, just before the `while(window.isOpen())` line,
    and make a mental note of the highlighted lines we have briefly discussed. It
    will make the rest of the chapter''s code easier to understand:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在`while(window.isOpen())`行之前添加整个代码，并在脑海中记住我们简要讨论过的突出显示的行。这将使本章其余的代码更容易理解：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now we can draw all our new sprites.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以绘制所有新的精灵。
- en: Drawing the player and other sprites
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制玩家和其他精灵
- en: Before we add the code to move the player and use all our new sprites, let's
    draw them. This is so that, as we add code to update/change/move the sprites,
    we will be able to see what is happening.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们添加移动玩家和使用所有新精灵的代码之前，让我们先绘制它们。这样，当我们添加代码来更新/改变/移动精灵时，我们将能够看到发生了什么。
- en: 'Add the highlighted code to draw the four new sprites:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 添加突出显示的代码以绘制四个新的精灵：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Run the game and you will see our new sprites in the scene.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 运行游戏，你会看到我们在场景中的新精灵。
- en: '![Drawing the player and other sprites](img/image_05_001.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![绘制玩家和其他精灵](img/image_05_001.jpg)'
- en: We are really close to a working game now.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在离一个可运行的游戏非常接近了。
- en: Handling the player's input
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理玩家的输入
- en: Lots of different things depend on the movement of the player, such as when
    to show the ax, when to begin animating the log, and when to move all the branches
    down a place. It therefore makes sense to set up the keyboard handling for the
    player chopping. Once this is done, we can put all the features we just mentioned
    into the same part of the code.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 许多不同的事情取决于玩家的移动，比如何时显示斧头，何时开始动画原木，以及何时将所有的树枝移动到一个地方。因此，为玩家砍伐设置键盘处理是有意义的。一旦完成这一点，我们就可以将刚才提到的所有功能放入代码的同一部分。
- en: Let's think for a moment about how we detect keyboard presses. In each frame
    we test whether a particular keyboard key is currently being held down. If it
    is, we take action. If the ***Esc*** key is being held down, we quit the game,
    or if the ***Enter*** key is being held down we restart the game. So far, this
    has been sufficient for our needs.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们思考一下我们如何检测键盘按键。在每一帧中，我们测试特定的键盘键当前是否被按下。如果是，我们就采取行动。如果按下***Esc***键，我们退出游戏，或者如果按下***Enter***键，我们重新开始游戏。到目前为止，这对我们的需求已经足够了。
- en: There is, however, a problem with this approach when we try and handle the chopping
    of the tree. The problem has always been there, it just didn't matter until now.
    Depending on how powerful your PC is, the game loop could be executing thousands
    of times per second. Each and every pass through the game loop during which a
    key is held down, it is detected and the related code will execute.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当我们尝试处理砍树时，这种方法存在问题。这个问题一直存在，只是直到现在才变得重要。根据您的PC有多强大，游戏循环可能每秒执行数千次。在游戏循环中每次按下键时，都会检测到并执行相关代码。
- en: So actually, every time you press ***Enter*** to restart the game, you are most
    likely restarting it well in excess of a hundred times. This is because even the
    briefest of presses will last a significant fraction of a second. You can verify
    this by running the game and holding down the ***Enter*** key. Note that the time
    bar doesn't move. This is because the game is being restarted over and over again,
    hundreds, or even thousands, of times a second.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，每次按下***Enter***重新开始游戏时，您很可能会重新开始游戏超过一百次。这是因为即使是最短暂的按键按下也会持续相当长的时间。您可以通过运行游戏并按住***Enter***键来验证这一点。请注意，时间条不会移动。这是因为游戏一遍又一遍地重新启动，每秒甚至数千次。
- en: 'If we don''t use a different approach for the player chopping, then just one
    attempted chop will bring the entire tree down in a mere fraction of a second.
    We need to be a bit more sophisticated. What we will do is allow the player to
    chop then, when he does so, disable the code that detects a key press. We will
    then detect when the player removes his finger from a key and then re-enable the
    detection of key presses. Here are the steps laid out clearly:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不对玩家的砍伐采取不同的方法，那么只需一次尝试的砍伐就会在短短的时间内将整棵树砍倒。我们需要更加复杂一些。我们将允许玩家进行砍伐，然后在他这样做时禁用检测按键的代码。然后我们将检测玩家何时从按键上移开手指，然后重新启用按键检测。以下是清晰列出的步骤：
- en: Wait for the player to use the left or right arrow keys to chop a log.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待玩家使用左右箭头键砍伐木头。
- en: When the player chops, disable key press detection.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当玩家砍伐时，禁用按键检测。
- en: Wait for the player to remove their finger from a key.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待玩家从按键上移开手指。
- en: Re enable chop detection.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启用砍伐检测。
- en: Repeat from step 1.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从步骤1重复。
- en: This might sound complicated, but with SFML's help it will be really straightforward.
    Let's implement this now, one step at a time.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能听起来很复杂，但借助SFML的帮助，这将非常简单。让我们现在一步一步地实现这个。
- en: 'Add the highlighted line of code, which declares a `bool` variable, and `acceptInput`,
    which will be used to determine when to listen for chops and when to ignore them:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 添加代码中的突出显示行，声明一个`bool`变量和`acceptInput`，用于确定何时监听砍伐动作和何时忽略它们：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now we have our Boolean set up we can move on to the next step.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置好了布尔值，可以继续下一步了。
- en: Handling setting up a new game
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理设置新游戏
- en: 'Now we''re ready to handle chops, add the highlighted code to the `if` block
    that starts a new game:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备处理砍伐，将突出显示的代码添加到开始新游戏的`if`块中：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the previous code we used a `for` loop to set the tree with no branches.
    This is fair to the player because, if the game started with a branch right above
    his head, it would be considered unsporting. Then we simply move the gravestone
    off the screen and the player into his starting location on the left. The last
    thing this new code does is to set `acceptInput` to `true`. We are now ready to
    receive chopping key presses.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的代码中，我们使用`for`循环将树设置为没有分支。这对玩家是公平的，因为如果游戏从他的头顶上方开始，那将被认为是不公平的。然后我们简单地将墓碑移出屏幕，玩家移动到左侧的起始位置。这个新代码的最后一件事是将`acceptInput`设置为`true`。我们现在准备好接收砍伐按键了。
- en: Detecting the player chopping
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检测玩家的砍伐
- en: 'Now we can prepare to handle the left and right cursor key presses. Add this
    simple `if` block, which only executes when `acceptInput` is `true`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以准备处理左右方向键的按下。添加这个简单的`if`块，只有当`acceptInput`为`true`时才执行：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, inside the `if` block that we just coded, add the highlighted code to
    handle what happens when the player presses the right cursor key (**→**) on the
    keyboard:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在我们刚刚编写的`if`块中，添加突出显示的代码来处理玩家在键盘上按下右箭头键（**→**）时发生的情况：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Quite a bit is happening in that previous code, so let's go through it. First
    we detect if the player has chopped on the right hand side of the tree. If he
    has, then we set `playerSide` to `side::RIGHT`. We will respond to the value of
    `playerSide` later in the code.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中发生了很多事情，让我们逐步进行。首先，我们检测玩家是否在树的右侧砍伐。如果是，我们将`playerSide`设置为`side::RIGHT`。我们将在代码的后面对`playerSide`的值做出响应。
- en: Then we add 1s to the score with `score ++`. The next line of code is slightly
    mysterious, but all that is happening is that we are adding to the amount of time
    remaining. We are rewarding the player for taking action. The problem for the
    player, however, is that the bigger the score gets, the less additional time is
    added on. You can play with this formula to make the game easier or harder.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们用`score ++`将分数加1。下一行代码有点神秘，但实际上我们只是增加了剩余时间的数量。我们正在奖励玩家采取行动。然而，对于玩家来说，问题在于分数越高，增加的时间就越少。您可以通过调整这个公式来使游戏变得更容易或更难。
- en: Then, the ax is moved into its right-hand side position with `spriteAxe.setPosition`
    and the player sprite is also moved into its right-hand position.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，斧头移动到右侧位置，使用`spriteAxe.setPosition`，玩家精灵也移动到右侧位置。
- en: Next, we call `updateBranches` to move all the branches down one place and spawn
    a new random branch (or space) at the top of the tree.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们调用`updateBranches`将所有的分支向下移动一个位置，并在树的顶部生成一个新的随机分支（或空格）。
- en: Then, `spriteLog` is moved into its starting position, camouflaged against the
    tree, and its `speedX` variable is set to a negative number, so that it whizzes
    off to the left. Also, `logActive` is set to true so that the log-moving code,
    which we will write soon, animates the log each frame.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，`spriteLog`移动到起始位置，伪装成树，它的`speedX`变量设置为负数，这样它就会向左飞去。此外，`logActive`设置为`true`，这样我们即将编写的移动木头的代码就会在每一帧中使木头动起来。
- en: Finally, `acceptInput` is set to `false`. At this point, the player can make
    no more chops. We have solved the problem of the presses being detected too frequently
    and we will see how we re-enable chopping soon.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`acceptInput`被设置为`false`。此时，玩家无法再进行砍伐。我们已经解决了按键被频繁检测的问题，很快我们将看到如何重新启用砍伐。
- en: 'Now, still inside the `if(acceptInput)` block that we just coded, add the highlighted
    code to handle what happens when the player presses the left cursor key (**←**)
    on the keyboard:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在我们刚刚编写的`if(acceptInput)`块内，添加突出显示的代码来处理玩家在键盘上按下左箭头键（**←**）时发生的情况：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The previous code is just the same as the code that handles the right-hand side
    chop, except that the sprites are positioned differently and the `logSpeedX` variable
    is set to a positive value, so that the log whizzes to the right.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码与处理右侧砍伐的代码完全相同，只是精灵的位置不同，并且`logSpeedX`变量设置为正值，使得木头向右飞去。
- en: Detecting a key being released
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检测按键释放
- en: To make the above work beyond the first chop, we need to detect when the player
    releases a key and set `acceptInput` back to `true`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使上述代码在第一次砍伐之后继续工作，我们需要检测玩家何时释放键，并将`acceptInput`设置回`true`。
- en: This is slightly different to the key handling we have seen so far. SFML has
    two different ways of detecting keyboard input from the player. The first way
    we have already seen. It is dynamic and instantaneous, exactly what we need to
    respond immediately to a key press.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这与我们迄今为止看到的按键处理略有不同。SFML有两种不同的方式来检测玩家的键盘输入。我们已经看到了第一种方式。它是动态和瞬时的，正是我们需要立即对按键做出响应的。
- en: 'This next code uses the other method. *Enter* the next highlighted code at
    the top of the `Handle the players input` section and then we will go through
    it:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码使用了另一种方法。*输入*下一个突出显示的代码到`处理玩家输入`部分的顶部，然后我们将逐步讲解它：
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: First we declare an object of the type `Event` called `event`. Then we call
    the `window.pollEvent` function, passing in our new object, `event`. The `pollEvent`
    function puts data into the `event` object, which describes an operating system
    event. This could be a key press, key release, mouse movement, mouse click, game
    controller action or something that happened to the window itself (it could be
    resized and so on).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们声明了一个名为`event`的`Event`类型的对象。然后我们调用`window.pollEvent`函数，传入我们的新对象`event`。`pollEvent`函数将数据放入`event`对象中，描述了操作系统事件。这可能是按键、释放键、鼠标移动、鼠标点击、游戏控制器动作或发生在窗口本身的事件（例如调整大小等）。
- en: The reason that we wrap our code in a `while` loop is because there might be
    many events stored in a queue. The `window.pollEvent` function will load them,
    one at a time, into `event`. We will see each pass through the loop, if we are
    interested in the current event, and respond if we are. When `window.pollEvent`
    returns `false`, that means there are no more events in the queue and the `while`
    loop will exit.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将代码包装在`while`循环中的原因是因为队列中可能存储了许多事件。`window.pollEvent`函数将这些事件一个接一个地加载到`event`中。我们将在循环中的每次通过中看到当前事件，如果我们感兴趣，就会做出响应。当`window.pollEvent`返回`false`时，这意味着队列中没有更多事件，`while`循环将退出。
- en: This `if` condition `(event.type == Event::KeyReleased && !paused)` is `true`
    when both a key has been released and also the game is not paused.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当释放一个键并且游戏没有暂停时，这个`if`条件（`event.type == Event::KeyReleased && !paused`）为`true`。
- en: Inside the `if` block we set `acceptInput` back to `true` and hide the ax sprite
    off screen.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在`if`块中，我们将`acceptInput`设置回`true`，并将斧头精灵隐藏在屏幕外。
- en: You can run the game now and gaze in awe at the moving tree, swinging ax, and
    animated player. It won't, however, squash the player, and the log needs to move
    when chopped as well.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以运行游戏，惊叹于移动的树木、摆动的斧头和动画的玩家。然而，它不会压扁玩家，砍伐时木头也需要移动。
- en: Animating the chopped logs and the ax
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动画砍伐的木头和斧头
- en: When the player chops, `logActive` is set to `true`, so we can wrap some code
    in a block that only executes when `logActive` is `true`. Furthermore, each chop
    sets `logSpeedX` to either a positive or negative number, so the log is ready
    to fly away from the tree in the correct direction.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当玩家砍木头时，`logActive`被设置为`true`，因此我们可以将一些代码包装在一个块中，只有当`logActive`为`true`时才执行。此外，每次砍木头都会将`logSpeedX`设置为正数或负数，因此木头准备好朝着正确的方向飞离树。
- en: 'Add this next highlighted code, right after we update the branch sprites:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们更新分支精灵之后，添加下面突出显示的代码：
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The code sets the position of the sprite by getting its current x and y location
    with `getPosition,` and then adding to it using `logSpeedX` and `logSpeedY`, respectively,
    multiplied by `dt.asSeconds`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 代码通过使用`getPosition`获取精灵的当前x和y位置，然后分别使用`logSpeedX`和`logSpeedY`乘以`dt.asSeconds`加到其上，来设置精灵的位置。
- en: After the log sprite has been moved in each frame, the code uses an `if` block
    to see if the sprite has disappeared out of view on either the left or the right.
    If it has, the log is moved back to its starting point ready for the next chop.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在每一帧中移动木头精灵后，代码使用`if`块来查看精灵是否已经从左侧或右侧消失在视野中。如果是，木头就会移回到起点，准备下一次砍伐。
- en: If you run the game you will be able to see the log flying off to the appropriate
    side of the screen.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您运行游戏，您将能够看到木头飞向屏幕的适当一侧。
- en: '![Animating the chopped logs and the ax](img/image_05_002.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![动画砍伐的木头和斧头](img/image_05_002.jpg)'
- en: Now for a more sensitive subject.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是一个更敏感的话题。
- en: Handling death
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理死亡
- en: Every game has to end badly, with either the player running out of time (which
    we have already handled), or getting squished by a branch.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 每个游戏都必须以不好的方式结束，要么是玩家时间用完（这已经处理过了），要么是被分支压扁。
- en: Detecting the player getting squished is really simple. All we want to know
    is whether the last branch in the `branchPositions` array equals `playerSide`.
    If it does, the player is dead.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 检测玩家被压扁非常简单。我们只想知道`branchPositions`数组中的最后一个分支是否等于`playerSide`。如果是，玩家就死了。
- en: 'Add the highlighted code that detects this and then we will talk about everything
    we do when the player is squished:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 添加检测这一点的突出代码，然后我们将讨论玩家被压扁时的所有操作：
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The first thing the code does, after the player's demise, is to set `paused`
    to `true`. Now the loop will complete this frame and won't run the update part
    of the loop again until a new game is started by the player.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在玩家死亡后，代码的第一件事是将`paused`设置为`true`。现在循环将完成这一帧，并且在玩家开始新游戏之前不会再次运行循环的更新部分。
- en: Then we move the gravestone into position, near where the player was standing,
    and hide the player sprite off-screen.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将墓碑移动到靠近玩家站立的位置，并将玩家精灵隐藏在屏幕外。
- en: We set the string of `messageText` to `"SQUISHED!!"` and then use the usual
    technique to center it on the screen.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`messageText`的字符串设置为`"SQUISHED !!"`，然后使用通常的技术将其居中显示在屏幕上。
- en: You can now run the game and play it for real. This image shows the player's
    final score and his gravestone, as well as the **SQUISHED** message.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以运行游戏并真正玩它。这张图片显示了玩家的最终得分和他的墓碑，以及**SQUISHED**消息。
- en: '![Handling death](img/image_05_003.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![处理死亡](img/image_05_003.jpg)'
- en: There is just one more problem. Is it just me, or is it a little bit quiet?
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个问题。只是我吗，还是有点安静？
- en: Simple sound FX
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简单的声音效果
- en: We will add three sounds. Each sound will be played on a particular game event.
    A simple thud sound whenever the player chops, a gloomy losing sound when the
    player runs out of time, and a retro crushing sound when the player is squished
    to death.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加三种声音。每种声音都将在特定的游戏事件上播放。每当玩家砍伐时播放简单的重击声音，当玩家时间用尽时播放沮丧的失败声音，当玩家被压扁致死时播放复古的压碎声音。
- en: How SFML sound works?
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SFML声音是如何工作的？
- en: SFML plays sound effects using two different classes. The first class is the
    `SoundBuffer` class. This is the class that holds the actual audio data from the
    sound file. It is the `SoundBuffer` that is responsible for loading the `.wav`
    files into the PC's RAM in a format that can be played without any further decoding
    work.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: SFML使用两种不同的类来播放声音效果。第一个类是`SoundBuffer`类。这个类保存了来自声音文件的实际音频数据。它是`SoundBuffer`负责将`.wav`文件加载到PC的RAM中，以一种无需进一步解码工作即可播放的格式。
- en: In a minute, when we write code for the sound effects, we will see that, once
    we have a `SoundBuffer` object with our sound stored in it, we will then create
    another object of the type `Sound`. We can then associate this `Sound` object
    with a `SoundBuffer` object. Then, at the appropriate moment in our code, we will
    be able to call the `play` function of the appropriate `Sound` object.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 一会儿，当我们为声音效果编写代码时，我们将看到，一旦我们有了一个包含我们声音的`SoundBuffer`对象，我们将创建另一个类型为`Sound`的对象。然后，我们可以将这个`Sound`对象与`SoundBuffer`对象关联起来。然后，在我们的代码中适当的时刻，我们将能够调用适当`Sound`对象的`play`函数。
- en: When to play the sounds
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 何时播放声音
- en: 'As we will see very soon, the C++ code to load and play sounds is really simple.
    What we need to consider, however, is when to call the `play` function. Where
    in our code will we put the function calls to `play`? Following are some of the
    features we want to achieve:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 很快我们将看到，加载和播放声音的C++代码真的很简单。然而，我们需要考虑的是何时调用`play`函数。我们的代码中何处将调用`play`函数？以下是我们想要实现的一些功能：
- en: The chop sound can be called from the key presses of the left and right cursor
    keys
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 砍伐声音可以从按下左右光标键时调用
- en: The death sound can be played from the `if` block that detects that a tree has
    mangled the player
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 死亡声音可以从检测到树木将玩家搅碎的`if`块中播放
- en: The out-of-time sound can be played from the `if` block that detects that the
    `timeRemaining` is less than zero
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时间用尽的声音可以从检测到`timeRemaining`小于零的`if`块中播放
- en: Now we can write our sound code.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以编写我们的声音代码。
- en: Adding the sound code
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加声音代码
- en: 'First we add another `#include` directive to make the SFML sound-related classes
    available. Add the following highlighted code:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们添加另一个`#include`指令，以使SFML与声音相关的类可用。添加下面突出显示的代码：
- en: '[PRE10]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now we declare three different `SoundBuffer` objects, load three different
    sound files into them, and associate three different objects of the type `Sound`
    with the related objects of the type `SoundBuffer`. Add the following highlighted
    code:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们声明三个不同的`SoundBuffer`对象，将三个不同的声音文件加载到它们中，并将三个不同的`Sound`对象与相关的`SoundBuffer`对象关联起来。添加下面突出显示的代码：
- en: '[PRE11]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now we can play our first sound effect. Add the single line of code as shown
    next to the `if` block that detects that the player has pressed the left cursor
    key:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以播放我们的第一个声音效果。在检测到玩家按下左光标键的`if`块旁边添加如下一行代码：
- en: '[PRE12]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Tip
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Add exactly the same code at the end of the next block of code that starts `if
    (Keyboard::isKeyPressed(Keyboard::Left))` to make a chopping sound when the player
    chops on the left-hand side of the tree.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个以`if (Keyboard::isKeyPressed(Keyboard::Left))`开头的代码块的末尾添加完全相同的代码，以使玩家在树的左侧砍伐时发出砍伐声音。
- en: 'Find the code that deals with the player running out of time and add the highlighted
    code, shown next, to play the out-of-time-related sound effect:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 找到处理玩家时间用尽的代码，并添加下一个突出显示的代码，以播放与时间相关的音效：
- en: '[PRE13]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Finally, to play the death sound when the player is squished, add the highlighted
    code to the `if` block that executes when the bottom branch is on the same side
    as the player:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当玩家被压扁时播放死亡声音，将下面突出显示的代码添加到执行当底部树枝与玩家同侧时的`if`块中：
- en: '[PRE14]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: That's it! We have finished the first game. Let's discuss some possible enhancements
    before we move on to the second project.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！我们已经完成了第一个游戏。在我们继续进行第二个项目之前，让我们讨论一些可能的增强功能。
- en: Improving the game and the code
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改进游戏和代码
- en: 'Take a look at these suggested enhancements for the Timber!!! project. You
    can see the enhancements in action in the `Runnable` folder of the download bundle:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 看看Timber!!!项目的这些建议的增强功能。您可以在下载包的`Runnable`文件夹中看到增强功能的效果：
- en: '**Speeding up the code**: There is a part of our code that is slowing down
    our game. It doesn''t matter for this simple game, but we can speed things up
    by putting the `sstream` code in a block that only executes occasionally. After
    all, we don''t need to update the score hundreds of times a second!'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**加快代码速度**：我们的代码中有一部分正在减慢我们的游戏。对于这个简单的游戏来说无所谓，但我们可以通过将`sstream`代码放在仅偶尔执行的块中来加快速度。毕竟，我们不需要每秒更新得分数百次！'
- en: '**Debugging console**: Let''s add some more text so we can see the current
    frame rate. As with the score, we don''t need to update this too often. Once every
    hundred frames will do.'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**调试控制台**：让我们添加一些文本，以便我们可以看到当前的帧速率。与得分一样，我们不需要经常更新这个。每一百帧更新一次就足够了。'
- en: '**Adding more trees in the background**: Simply add some more tree sprites
    and draw them in whatever position looks good (you could have some nearer the
    camera, some further away).'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在背景中添加更多的树**：只需添加一些更多的树精灵并将它们绘制在看起来不错的位置（你可以在相机附近放一些，远一些）。'
- en: '**Improving the visibility of the HUD text**: We can draw simple `RectangleShape`
    objects behind the score and the FPS counter; black with a bit of transparency
    will look quite good.'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**改善HUD文本的可见性**：我们可以在分数和FPS计数器后面绘制简单的`RectangleShape`对象；黑色并带有一些透明度看起来会很好。'
- en: '**Making the cloud code more efficient**: As we alluded to a few times already,
    we can use our knowledge of arrays to make the cloud code a lot shorter.'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使云代码更有效率**：正如我们已经提到过几次的，我们可以利用我们对数组的知识使云代码变得更短。'
- en: Take a look at the game in action with extra trees, clouds, and a transparent
    background for the text.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 看看游戏中额外的树、云和文本的透明背景。
- en: '![Improving the game and the code](img/image_05_004.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![改善游戏和代码](img/image_05_004.jpg)'
- en: To see the code for these enhancements, take a look in the `Timber Enhanced
    Version` folder for the download bundle.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看这些增强的代码，请查看下载包中的“伐木工增强版”文件夹。
- en: FAQ
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见问题
- en: Q) I admit that the array solution for the clouds was more efficient. But do
    we really need three separate arrays, one for active, one for speed, and one for
    the sprite itself?
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Q）我承认，对于云的数组解决方案更有效率。但是我们真的需要三个单独的数组吗，一个用于活动，一个用于速度，一个用于精灵本身吗？
- en: A) If we look at the properties/variables that various objects have, for example
    `Sprite` objects, we will see they are numerous. Sprites have position, color,
    size, rotation, and many more as well. But it would be just perfect if they had
    `active`, `speed,` and perhaps more as well. The problem is that the coders at
    SFML can't possibly predict all the ways that we will use their `Sprite` class.
    Fortunately, we can make our own classes. We could make a class called `Cloud`
    that has a Boolean for `active` and an `int` for speed. We can even give our `Cloud`
    class an SFML `Sprite` object. We could then simplify our cloud code even further.
    We will look at designing our own classes in the next chapter.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: A）如果我们查看各种对象的属性/变量，例如`Sprite`对象，我们会发现它们很多。精灵有位置、颜色、大小、旋转等等。但如果它们有`active`、`speed`，甚至更多的话就更完美了。问题在于SFML的程序员不可能预测我们将如何使用他们的`Sprite`类。幸运的是，我们可以制作自己的类。我们可以制作一个名为`Cloud`的类，其中有一个布尔值用于`active`和一个整数用于速度。我们甚至可以给我们的`Cloud`类一个SFML的`Sprite`对象。然后我们甚至可以进一步简化我们的云代码。我们将在下一章中设计我们自己的类。
- en: Summary
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter we added the finishing touches and graphics to the Timber!!!
    game. If, prior to this book, you had never coded a single line of C++ then you
    can give yourself a big pat on the back. In just five modest chapters you have
    gone from zero knowledge to a working game.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们为《伐木工》游戏添加了最后的修饰和图形。如果在读这本书之前，你从未编写过一行C++代码，那么你可以为自己鼓掌。在短短的五章中，你已经从零基础到一个可运行的游戏。
- en: However, we will not be congratulating ourselves for too long because in the
    next chapter we will move straight on to some slightly more hardcore C++, which
    we can use to build more complicated and fuller-featured games.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们不会为自己的成就而沾沾自喜太久，因为在下一章中，我们将直接转向一些稍微更复杂和更全面的C++，这可以用来构建更复杂和更全面的游戏。
