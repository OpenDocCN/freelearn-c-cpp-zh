- en: Debugging Techniques
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试技术
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Effective debugging
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有效的调试
- en: Debugging strategies
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试策略
- en: Debugging tools
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试工具
- en: Debugging your application using GDB
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用GDB调试应用程序
- en: Debugging memory leaks with Valgrind
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Valgrind调试内存泄漏
- en: Logging
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志记录
- en: Effective debugging
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有效的调试
- en: Debugging is an art rather than a science, and it is a very big topic in itself.
    Strong debugging skills are the strengths of a good developer. All expert developers
    have some common traits, of which strong problem-solving and debugging skills
    top all. The first step in fixing a bug is to reproduce the issue. It is crucial
    to capture the steps involved in reproducing the bug very efficiently. Experienced
    QA engineers will know the importance of capturing detailed steps to reproduce,
    as developers will find it difficult to fix an issue if they can't reproduce it.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 调试是一门艺术而不是一门科学，它本身是一个非常庞大的主题。强大的调试技能是一个优秀开发人员的优势。所有专业的开发人员都有一些共同的特点，其中强大的问题解决和调试技能是最重要的。修复错误的第一步是复现问题。高效地捕获复现错误所涉及的步骤至关重要。有经验的QA工程师会知道捕获详细的复现步骤的重要性，因为如果无法复现问题，开发人员将很难修复问题。
- en: From my point of view, a bug that can't be reproduced can't be fixed. One could
    make guesses and beat around the bush but can't be sure whether the issue has
    really been fixed without being able to reproduce the bug in the first place.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，无法复现的错误无法修复。人们可以猜测和打草稿，但如果一开始就无法复现问题，就无法确定问题是否真正被修复。
- en: 'The following details will help developers reproduce and debug the issue more
    quickly:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下详细信息将帮助开发人员更快地复现和调试问题：
- en: Detailed steps to reproduce the issue
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 详细的复现问题的步骤
- en: Screenshot images of the bug
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误的屏幕截图
- en: Priority and severity
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优先级和严重程度
- en: Inputs and scenarios that reproduce the issue
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复现问题的输入和场景
- en: Expected and actual output
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预期和实际输出
- en: Error logs
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误日志
- en: Application logs and traces
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序日志和跟踪
- en: Dump files in case the application crashes
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在应用程序崩溃时转储文件
- en: Environment details
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环境详细信息
- en: OS details
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作系统详细信息
- en: Software versions
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件版本
- en: 'Some commonly used debugging techniques are as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常用的调试技术如下：
- en: Use of the `cout`/`cerr` print statements comes in really handy
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`cout`/`cerr`打印语句非常方便
- en: Core dumps, mini dumps, and full dumps help analyze the bug remotely
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 核心转储、迷你转储和完整转储有助于远程分析错误
- en: Using debugging tools to execute the code step by step by inspecting variables,
    arguments, intermediate values, and so on
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用调试工具逐步执行代码，检查变量、参数、中间值等
- en: Test frameworks help prevent the issue in the first place
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试框架有助于在第一时间防止问题的发生
- en: Performance analysis tools can be of great help in finding performance issues
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能分析工具可以帮助找到性能问题
- en: Tools that deduct memory leaks, resource leaks, deadlocks, and so on
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测内存泄漏、资源泄漏、死锁等工具
- en: The `log4cpp` open source C++ library is an elegant and useful log utility which
    helps add debug messages that support debugging, which can be disabled in the
    release mode or in the production environment.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`log4cpp`开源C++库是一个优雅且有用的日志实用程序，它可以添加支持调试的调试消息，在发布模式或生产环境中可以禁用。'
- en: Debugging strategies
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试策略
- en: 'Debugging strategies help a great deal in quickly reproducing, debugging, detecting,
    and fixing issues efficiently. The following list explains some high-level debugging
    strategies:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 调试策略有助于快速复现、调试、检测和高效修复问题。以下列表解释了一些高级调试策略：
- en: Using a defect tracking system, such as JIRA, Bugzilla, TFS, YouTrack, Teamwork,
    and others
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用缺陷跟踪系统，如JIRA、Bugzilla、TFS、YouTrack、Teamwork等
- en: Application crashes or freezes must include core dumps, mini dumps, or full
    dumps
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序崩溃或冻结必须包括核心转储、迷你转储或完整转储
- en: Application trace logs are a great aid and help in all scenarios
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序跟踪日志在所有情况下都是一个很好的帮助
- en: Enabling multilevel error logs
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用多级错误日志
- en: Capturing application trace logs in debug and release modes
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在调试和发布模式下捕获应用程序跟踪日志
- en: Debugging tools
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试工具
- en: Debugging tools help narrow down the issue through step-by-step execution, with
    breakpoints, variable inspection, and so on. Though debugging the issue step by
    step may be a time-consuming task, it is definitely a sure-shot way of nailing
    down the issue, and I can say that it pretty much always works.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 调试工具通过逐步执行、断点、变量检查等帮助缩小问题范围。尽管逐步调试问题可能是一项耗时的任务，但这绝对是确定问题的一种方法，我可以说这几乎总是有效的。
- en: 'Here is a list of debugging tools for C++:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是C++的调试工具列表：
- en: '**GDB**: This is an open source CLI debugger'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GDB**：这是一个开源的CLI调试器'
- en: '**Valgrind**: This is an open source CLI, good for memory leaks, deadlocks,
    racing detection, and so on'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Valgrind**：这是一个用于内存泄漏、死锁、竞争检测等的开源CLI工具'
- en: '**Affinic debugger**: This is a commercial GUI tool for GDB'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Affinic debugger**：这是一个用于GDB的商业GUI工具'
- en: '**GNU DDD**: This is an open source graphical debugger for GDB, DBX, JDB, XDB,
    and so on'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GNU DDD**：这是一个用于GDB、DBX、JDB、XDB等的开源图形调试器'
- en: '**GNU Emacs GDB mode**: This is an open source tool with minimal graphical
    debugger support'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GNU Emacs GDB模式**：这是一个带有最小图形调试器支持的开源工具'
- en: '**KDevelop**: This is an open source tool with graphical debugger support'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**KDevelop**：这是一个带有图形调试器支持的开源工具'
- en: '**Nemiver**: This is an open source tool that works well in the GNOME desktop
    environment'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Nemiver**：这是一个在GNOME桌面环境中运行良好的开源工具'
- en: '**SlickEdit**: This is good for debugging multithreaded and multiprocessor
    code'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SlickEdit**：适用于调试多线程和多处理器代码'
- en: In C++, there are quite a lot of open source and commercially licensed debugging
    tools. However, in this book, we will explore the GDB and Valgrind open source
    command-line interface tools.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在C++中，有很多开源和商业许可的调试工具。然而，在本书中，我们将探索GDB和Valgrind这两个开源命令行界面工具。
- en: Debugging your application using GDB
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用GDB调试应用程序
- en: Classic, old-fashioned C++ developers use print statements to debug code. However,
    debugging with print tracing messages is a time-consuming task, as you need to
    put quite a lot of effort into writing print statements at multiples places, recompiling,
    and executing the application.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 经典的老式C++开发人员使用打印语句来调试代码。然而，使用打印跟踪消息进行调试是一项耗时的任务，因为您需要在多个地方编写打印语句，重新编译并执行应用程序。
- en: The old-style debugging approach requires many such iterations and, typically,
    every iteration requires adding more print statements in order to narrow down
    the issue. Once the issues are fixed, we need to clean up the code and remove
    the print statements, as too many print statements tend to slow down application
    performance. Also, the debug print messages will distract and are irrelevant for
    the end customers using your product the production environment.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 老式的调试方法需要许多这样的迭代，通常每次迭代都需要添加更多的打印语句以缩小问题范围。一旦问题解决了，我们需要清理代码并删除打印语句，因为太多的打印语句会减慢应用程序的性能。此外，调试打印消息会分散注意力，对于在生产环境中使用您产品的最终客户来说是无关紧要的。
- en: The C++ debug `assert()` macro statement that comes with the `<cassert>` header
    can be used for debugging.  The C++ `assert()` macros can be disabled in release
    mode and are only enabled in debug mode.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: C++调试`assert()`宏语句与`<cassert>`头文件一起使用于调试。C++ `assert()`宏在发布模式下可以被禁用，只有在调试模式下才启用。
- en: Debug tools are there to rescue you from such tedious efforts. The GDB debugger
    is an open source CLI tool, which is the debugger for C++ in the Unix/Linux world.
    For Windows platforms, Visual Studio is the most popular one-stop IDE with inbuilt
    debugging facilities.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 调试工具可以帮助您摆脱这些繁琐的工作。GDB调试器是一个开源的CLI工具，在Unix/Linux世界中是C++的调试器。对于Windows平台，Visual
    Studio是最受欢迎的一站式IDE，具有内置的调试功能。
- en: 'Let''s take a simple example:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们举一个简单的例子：
- en: '[PRE0]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output of the program is as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 程序的输出如下：
- en: '[PRE1]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'However, our expected output is the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们期望的输出如下：
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The bug is obvious; let''s go easy with GDB learning. Let''s first compile
    the program in debug mode, that is, with the debugging metadata and symbol table
    enabled, as shown here:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 错误是显而易见的；让我们轻松地学习GDB。让我们首先以调试模式编译程序，也就是启用调试元数据和符号表，如下所示：
- en: '[PRE3]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: GDB commands quick reference
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GDB命令快速参考
- en: 'The following GDB quick tips chart will help you find the GDB commands for
    debugging your applications:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下GDB快速提示表将帮助您找到调试应用程序的GDB命令：
- en: '| **Command** | **Short command** | **Description** |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| **命令** | **简短命令** | **描述** |'
- en: '| `gdb yourappln.exe` | `-` | Opening an application in GDB for debugging |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `gdb yourappln.exe` | `-` | 在GDB中打开应用程序进行调试 |'
- en: '| `break main` | `b main` | Set the breakpoint to the `main` function |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `break main` | `b main` | 将断点设置为`main`函数 |'
- en: '| `run` | `r` | Executes the program till it reaches the breakpoint for step-by-step
    execution |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `run` | `r` | 执行程序直到达到逐步执行的断点 |'
- en: '| `next` | `n` | Executes the program one step at a time |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `next` | `n` | 逐步执行程序 |'
- en: '| `step` | `s` | Steps into the function to execute the function step by step
    |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `step` | `s` | 步入函数以逐步执行函数 |'
- en: '| `continue` | `c` | Continues the execution of the program until the next
    breakpoint; if no breakpoints are set, it will continue the execution of the application
    normally |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `continue` | `c` | 继续执行程序直到下一个断点；如果没有设置断点，它将正常执行应用程序 |'
- en: '| `backtrace` | `bt` | Prints the entire call stack |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `backtrace` | `bt` | 打印整个调用堆栈 |'
- en: '| `quit` | `q` or`Ctrl + d`  | Exits GDB |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `quit` | `q`或`Ctrl + d` | 退出GDB |'
- en: '| `-help` | `-h` | Displays the available options and briefly displays their
    use |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `-help` | `-h` | 显示可用选项并简要显示其用法 |'
- en: 'With the preceding basic GDB quick reference, let''s start debugging our faulty
    application to detect the bug. Let''s first start GDB with the following command:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 有了上述基本的GDB快速参考，让我们开始调试我们有问题的应用程序以检测错误。让我们首先使用以下命令启动GDB：
- en: '[PRE4]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, let''s add a breakpoint at `main()` to perform step-by-step execution:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，让我们在`main()`处添加一个断点以进行逐步执行：
- en: '[PRE5]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After launching our application with `gdb`, the `b main` command will add a
    breakpoint to the first line of the `main()` function. Now let''s try to execute
    the application:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`gdb`启动我们的应用程序后，`b main`命令将在`main()`函数的第一行添加一个断点。现在让我们尝试执行应用程序：
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As you may have observed, the program execution has paused at line number `46`
    in our `main()` function, since we added a breakpoint to the `main()` function.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能已经观察到的，程序执行在我们的`main()`函数的行号`46`处暂停，因为我们在`main()`函数中添加了一个断点。
- en: 'At this point, let''s execute the application step by step, as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，让我们逐步执行应用程序，如下所示：
- en: '[PRE7]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, let''s add two more breakpoints at line numbers `29` and `33`, as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在行号`29`和`33`处再添加两个断点，如下所示：
- en: '[PRE8]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'From this, you will understand that the breakpoints can be added by the function
    name or by the line numbers as well. Let''s now let the program continue its execution
    until it reaches one of the breakpoints that we have set:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 从中，您将了解到断点可以通过函数名或行号添加。现在让程序继续执行，直到达到我们设置的断点之一：
- en: '[PRE9]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you can see, the program execution paused at line number `29`, as it gets
    invoked whenever the `sort` function needs to decide whether the two items must
    be swapped in the process of sorting the vector entries in an ascending order.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，程序执行在行号`29`处暂停，因为每当`sort`函数需要决定是否交换两个项目以按升序排序向量条目时，它就会被调用。
- en: 'Let''s explore how to inspect or print the variables, `this->number` and `rhsObject.number`:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索如何检查或打印变量`this->number`和`rhsObject.number`：
- en: '[PRE10]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Did you see the way the `<` and `>` operators are implemented? The operator
    checks for the *less than* operation, while the actual implementation checks for
    the *greater than* operation, and a similar bug is observed in the `>` operator-overloaded
    method as well. Please check the following code:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 您是否注意到`<`和`>`操作符的实现方式？该操作符检查*小于*操作，而实际的实现检查*大于*操作，并且`>`操作符重载方法中也观察到了类似的bug。请检查以下代码：
- en: '[PRE11]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'While the `sort()` function is supposed to be sorting the `vector` entries
    in an ascending order, the output shows that it is sorting them in a descending
    order, and the preceding code is the root cause of the issue. Hence, let''s fix
    the issue, as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`sort()`函数应该按升序对`vector`条目进行排序，但输出显示它是按降序对它们进行排序的，前面的代码是问题的根源。因此，让我们修复问题，如下所示：
- en: '[PRE12]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'With these changes, let''s compile and run the program:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些更改，让我们编译并运行程序：
- en: '[PRE13]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This is the output that you''ll get:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您将获得的输出：
- en: '[PRE14]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Cool, we fixed the bug! Needless to say, you will have recognized how useful
    the GDB debugging tool is.  While we have only scratched the surface of  the GDB
    tool's capability, it offers many powerful debugging features. However, in this
    chapter, it would be impractical to cover every single feature the GDB tool supports;
    hence, I would strongly recommend you explore GDB documentation for further learning
    at [https://sourceware.org/gdb/documentation/](https://sourceware.org/gdb/documentation/).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，我们修复了bug！毋庸置疑，您已经认识到了GDB调试工具的用处。虽然我们只是浅尝辄止了GDB工具的功能，但它提供了许多强大的调试功能。然而，在本章中，涵盖GDB工具支持的每一个功能是不切实际的；因此，我强烈建议您查阅GDB文档以进行进一步学习[https://sourceware.org/gdb/documentation/](https://sourceware.org/gdb/documentation/)。
- en: Debugging memory leaks with Valgrind
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Valgrind调试内存泄漏
- en: 'Valgrind is a collection of open source C/C++ debugging and profiling tools
    for the Unix and Linux platforms. The collection of tools that Valgrind supports
    are as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Valgrind是Unix和Linux平台的一组开源C/C++调试和性能分析工具。Valgrind支持的工具集如下：
- en: '**Cachegrind**: This is the cache profiler'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Cachegrind**：这是缓存分析器'
- en: '**Callgrind**: This works in a similar manner to the cache profiler but supports
    the caller-callee sequence'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Callgrind**：这与缓存分析器类似，但支持调用者-被调用者序列'
- en: '**Helgrind**: This helps in detecting thread synchronization issues'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Helgrind**：这有助于检测线程同步问题'
- en: '**DRD**: This is the thread error detector'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DRD**：这是线程错误检测器'
- en: '**Massif**: This is the heap profiler'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Massif**：这是堆分析器'
- en: '**Lackey**: This provides basic performance-related statistics and measurements
    about your application'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Lackey**：这提供了关于应用程序的基本性能统计和测量'
- en: '**exp-sgcheck**: This detects stack overruns; it is generally useful in finding
    issues that Memcheck can''t find'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**exp-sgcheck**：这检测堆栈越界；通常用于查找Memcheck无法找到的问题'
- en: '**exp-bbv**: This is useful for computer architecture R&D-related work'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**exp-bbv**：这对计算机架构研发工作很有用'
- en: '**exp-dhat**: This is another heap profiler'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**exp-dhat**：这是另一个堆分析器'
- en: '**Memcheck**: This helps in detecting memory leaks and crashes related to memory
    issues'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Memcheck**：这有助于检测内存泄漏和与内存问题相关的崩溃'
- en: In this chapter, we will only be exploring Memcheck, as demonstrating every
    Valgrind tool is not in the scope of this book.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将只探讨Memcheck，因为展示每个Valgrind工具不在本书的范围内。
- en: The Memcheck tool
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Memcheck工具
- en: 'The default tool that Valgrind uses is Memcheck.  The Memcheck tool can detect
    quite an exhaustive list of issues, and some of them are as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Valgrind使用的默认工具是Memcheck。Memcheck工具可以检测出相当详尽的问题列表，其中一些如下所示：
- en: Accessing outside the boundary of array, stack, or heap overruns
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问数组、堆栈或堆越界的边界外
- en: Use of uninitialized memory
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未初始化内存的使用
- en: Accessing the already released memory
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问已释放的内存
- en: Memory leaks
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存泄漏
- en: Mismatched use of `new` and `free` or `malloc` and `delete`
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`new`和`free`或`malloc`和`delete`的不匹配使用'
- en: Let's have a look at some such issues in the next subsections.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在接下来的小节中看一些这样的问题。
- en: Detecting memory access outside the boundary of an array
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测数组边界外的内存访问
- en: 'The following example demonstrates memory access outside the boundary of an
    array:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了对数组边界外的内存访问：
- en: '[PRE15]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The following output shows the valgrind debug session that precisely points
    to memory access outside the boundary of the array:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 以下输出显示了Valgrind调试会话，准确指出了数组边界外的内存访问：
- en: '[PRE16]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As you will notice, the application crashed with core dump due to illegal memory
    access.  In the preceding output, the Valgrind tool accurately points to the line
    that caused the crash.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所注意到的，应用程序由于非法内存访问而崩溃并生成了核心转储。在前面的输出中，Valgrind工具准确指出了导致崩溃的行。
- en: Detecting memory access to already released memory locations
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测对已释放内存位置的内存访问
- en: 'The following example code demonstrates memory access to the already released
    memory locations:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例代码演示了对已释放内存位置的内存访问：
- en: '[PRE17]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Let''s compile the preceding program and learn how Valgrind reports the illegal
    memory access that attempts to access an already released memory location:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编译前面的程序并学习Valgrind如何报告试图访问已释放内存位置的非法内存访问：
- en: '[PRE18]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Valgrind precisely points to the line number (`14`) that attempts to access
    the memory location that got released at line number `12`.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: Valgrind准确指出了尝试访问在第`12`行释放的内存位置的行号。
- en: Detecting uninitialized memory access
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测未初始化内存访问
- en: 'The following example code demonstrates the use of uninitialized memory access
    and how the same can be detected using Memcheck:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例代码演示了未初始化内存访问的使用以及如何使用Memcheck检测相同的问题：
- en: '[PRE19]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Let''s now compile and detect the uninitialized memory access issue using Memcheck:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们编译并使用Memcheck检测未初始化内存访问问题：
- en: '[PRE20]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The lines highlighted in bold in the preceding output clearly point to the
    exact line where the uninitialized variable is accessed:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的输出中，加粗显示的行清楚地指出了访问未初始化变量的确切行号（`14`）：
- en: '[PRE21]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The preceding code snippet is shown for your reference; however, Valgrind will
    not show the code details.  The bottomline is that Valgrind precisely points to
    the line that accesses the uninitialized variable, which is normally difficult
    to detect using other means.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码片段是供你参考的；然而，Valgrind不会显示代码细节。底线是Valgrind精确指出了访问未初始化变量的行，这通常很难用其他方法检测到。
- en: Detecting memory leaks
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测内存泄漏
- en: 'Let''s take a simple program that has some memory leaks and explore how the
    Valgrind tool, with the help of Memcheck, can help us detect memory leaks. As
    Memcheck is the default tool used by Valgrind, it is not necessary to explicitly
    call out the Memcheck tool while issuing the Valgrind command:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个有一些内存泄漏的简单程序，并探索Valgrind工具如何在Memcheck的帮助下帮助我们检测内存泄漏。由于Memcheck是Valgrind默认使用的工具，因此在发出Valgrind命令时不需要显式调用Memcheck工具：
- en: '[PRE22]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The following code implements a singly linked list:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码实现了一个单链表：
- en: '[PRE23]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: As you may have observed, the preceding class declaration has methods to `append()`
    a new node, `print()` the list, and a `size()` method that returns the number
    of nodes in the list.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能已经观察到的，前面的类声明有`append()`一个新节点的方法，`print()`列表的方法，以及一个`size()`方法，返回列表中节点的数量。
- en: 'Let''s explore the `list.cpp` source file that implements the `append()` method,
    the `print()` method, the constructor, and the destructor:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索实现`append()`方法、`print()`方法、构造函数和析构函数的`list.cpp`源文件：
- en: '[PRE24]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The following code demonstrates the `main()` function:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码演示了`main()`函数：
- en: '[PRE25]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Let''s compile the program and attempt to detect memory leaks in the preceding
    program:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编译程序并尝试在前面的程序中检测内存泄漏：
- en: '[PRE26]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: From the preceding output, it is evident that 80 bytes are leaked by our application.
    While `definitely lost` and `indirectly lost` indicate the memory leaked by our
    application, `still reachable` does not necessarily indicate our application,
    and it could be leaked by third-party libraries or C++ runtime libraries. It may
    be possible that they are not really memory leaks, as the C++ runtime library
    might use memory pools.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的输出可以看出，我们的应用泄漏了80字节。虽然`definitely lost`和`indirectly lost`表示我们的应用泄漏的内存，但`still
    reachable`并不一定表示我们的应用，它可能是由第三方库或C++运行时库泄漏的。可能它们并不是真正的内存泄漏，因为C++运行时库可能使用内存池。
- en: Fixing the memory leaks
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修复内存泄漏
- en: 'Let''s try to fix the memory leak issue by adding the following code in the
    `List::~List()` destructor:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试通过在`List::~List()`析构函数中添加以下代码来修复内存泄漏问题：
- en: '[PRE27]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'From the following output, you will observe that the memory leak has been fixed:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 从下面的输出中，你会发现内存泄漏已经被修复：
- en: '[PRE28]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'If you are still not convinced with the `still reachable` issue reported in
    the preceding output, let''s try the following code in `simple.cpp` to understand
    if this is something in our control:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仍然对前面输出中报告的`still reachable`问题不满意，让我们尝试在`simple.cpp`中尝试以下代码，以了解这是否在我们的控制之内：
- en: '[PRE29]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Execute the following commands:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下命令：
- en: '[PRE30]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'As you can see, the `main()` function does nothing but return `0`, and Valgrind
    reports that this program too has the same section: `still reachable": 72, 704
    bytes in 1 blocks`.  Hence, what really matters in the `Valgrind` leak summary
    is whether there are leaks reported under any or all of the following sections:
    `definitely lost`, `indirectly lost`, and `possibly lost`.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '正如你所看到的，`main()`函数除了返回`0`之外什么也没做，Valgrind报告说这个程序也有相同的部分：`still reachable":
    72, 704 bytes in 1 blocks`。因此，在`Valgrind`泄漏摘要中真正重要的是是否有泄漏报告在以下任何或所有部分：`definitely
    lost`，`indirectly lost`和`possibly lost`。'
- en: Mismatched use of new and free or malloc and delete
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: new和free或malloc和delete的不匹配使用
- en: These types of issues are rare but the possibility of them occurring can't be
    ruled out. It may so happen that when a legacy C-based tool is ported to C++,
    that some memory allocation is allocated by mistake but is freed up using the
    `delete` keyword or vice versa.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这种问题很少见，但不能排除它们发生的可能性。可能会出现这样的情况，当一个基于C的遗留工具被移植到C++时，一些内存分配被错误地分配，但使用`delete`关键字或反之亦然被释放。
- en: 'The following example demonstrates detecting the issue using Valgrind:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了使用Valgrind检测问题：
- en: '[PRE31]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The following output demonstrates a Valgrind session that detects mismatched
    usage of `free` and `delete`:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 以下输出演示了一个Valgrind会话，检测到了`free`和`delete`的不匹配使用：
- en: '[PRE32]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Summary
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about various C++ debugging tools and the applications
    of the Valgrind tool, such as detecting uninitialized variable access and detecting
    memory leaks. You also learned about the GDB tool and detecting issues that arise
    due to illegal memory access of the already released memory locations.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了各种C++调试工具以及Valgrind工具的应用，比如检测未初始化的变量访问和检测内存泄漏。你还学习了GDB工具和检测由于非法内存访问已释放内存位置而引起的问题。
- en: In the next chapter, you will be learning about code smells and clean code practices.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习代码异味和清洁代码实践。
