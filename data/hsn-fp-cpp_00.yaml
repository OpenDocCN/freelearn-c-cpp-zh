- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: Welcome to a hands-on tour of functional programming in C++! This book is about
    an old idea, that is, functional programming, and a classic programming language,
    that is, C++, finally uniting forces.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到C++中的函数式编程实践之旅！这本书讲述了一个古老的概念，即函数式编程，以及一个经典的编程语言，即C++，最终联合起来。
- en: Functional programming has been around since the 1950s; however, due to its
    mathematical underpinnings, it has been of limited interest to mainstream software
    development for many years. With the advent of multicore CPUs and big data leading
    to the need for parallelization, and with programming language designers becoming
    more interested in immutability and lambdas, functional programming concepts have
    been gradually introduced in all major programming languages, including C#, Java,
    PHP, JavaScript, Python, and Ruby. C++ has never been far from functional programming,
    with features such as function pointers, functors, and the algorithms from STL
    allowing many programmers to take advantage of certain constructs. However, starting
    with C++ 11, we see the introduction of lambdas, and of higher-order functions
    such as `all_of`, `any_of`, and `none_of`. In C++ 17, we see more progress, with
    the introduction of `map` (implemented as `transform`). Additionally, the features
    coming in C++ 20 are very exciting; for example, the ranges library, which allows
    composable, lightweight, and lazily evaluated transformations, is a great addition
    to the standard.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 函数式编程自上世纪50年代以来就存在；然而，由于其数学基础，多年来一直对主流软件开发的兴趣有限。随着多核CPU和大数据的出现导致需要并行化，以及编程语言设计者对不可变性和lambda表达式的兴趣增加，函数式编程概念逐渐被引入到包括C＃、Java、PHP、JavaScript、Python和Ruby在内的所有主要编程语言中。C++一直与函数式编程息息相关，例如函数指针、函数对象和STL中的算法等功能使许多程序员能够利用某些构造。然而，从C++
    11开始，我们看到了lambda的引入，以及`all_of`、`any_of`和`none_of`等高阶函数的引入。在C++ 17中，我们看到了更多的进展，包括`map`（实现为`transform`）。此外，C++
    20中的功能也非常令人兴奋；例如，允许可组合、轻量级和惰性评估转换的ranges库是标准库的一个重要补充。
- en: This brings us to what you will learn from this book. Whether you are a seasoned
    programmer or a C++ beginner, you will learn about functional programming concepts,
    how to use them in C++, and why they are useful for managing and improving existing
    code bases. Every idea will be showcased with clear code samples and verified
    with unit tests; we highly encourage you to take these code samples and play around
    with them yourself.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这就引出了你将从本书中学到的内容。无论您是经验丰富的程序员还是C++初学者，您都将学习有关函数式编程概念的知识，以及如何在C++中使用它们，以及它们对管理和改进现有代码库的有用性。每个想法都将通过清晰的代码示例展示，并通过单元测试进行验证；我们强烈建议您拿这些代码示例来自己尝试一下。
- en: Special effort has been put into ensuring that every idea is presented in a
    clear manner, and that a flow of understanding is followed; in other words, we've
    been looking at optimizing your learning experience. In order to do that, we have
    decided to exaggerate the use of certain constructs. For example, the sample code
    uses a lot of lambdas since we wanted to show how they can be used. We believe
    that the best way to learn functional programming is to fully dive into the world
    of lambdas and operations on lambdas. We expect the reader to separate this approach
    from a production approach; in fact, I advise you to experiment with these concepts
    on your own, then on small parts of production code, and only then use those that
    are promising to their full extent. To support this goal, we have documented multiple
    ways of using operations on functions so that you will possess enough tools to
    use in various contexts.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们特别努力确保每个想法都以清晰的方式呈现，并且遵循理解的流程；换句话说，我们一直在优化您的学习体验。为了做到这一点，我们决定夸大使用某些构造。例如，示例代码大量使用lambda，因为我们想展示它们的用法。我们认为学习函数式编程的最佳方式是充分了解lambda和对lambda的操作。我们期望读者能够将这种方法与生产方法区分开；事实上，我建议您自己尝试这些概念，然后在生产代码的小部分上进行实验，然后再充分利用那些有前途的概念。为了支持这一目标，我们记录了多种使用函数操作的方法，这样您将拥有足够的工具来在各种情境下使用。
- en: It's important to note that we made a calculated decision to present the C++
    17 standard in most of the book. We don't use external libraries (other than the
    unit testing library), and we stick to the standard features of the language and
    of **Standard Template Library** (**STL**). The focus is on functional programming
    concepts and on how to implement them using a minimalistic approach. The only
    exception is the last section of the book that looks at the future of C++ and
    STL. We did this because we believe that it's more important for you to understand
    the concepts and be ready to apply them with minimal tooling than to provide a
    multitude of implementation options. This has left out the ranges library for
    most of the book, the Boost library support for functional programming, and, most
    likely, other useful libraries that can extend or simplify the code. I will leave
    it to the reader to try them out for themselves and let us know how they worked.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，我们经过深思熟虑决定在大部分书中使用C++ 17标准。我们不使用外部库（除了单元测试库），并且坚持使用语言和STL的标准功能。重点是函数式编程概念以及如何使用最简化的方法来实现它们。唯一的例外是书的最后一部分，它涉及C++和STL的未来。我们这样做是因为我们认为让您理解这些概念并准备好以最少的工具应用它们比提供多种实现选项更重要。这在大部分书中省略了ranges库、Boost库对函数式编程的支持，以及其他可能的有用库，可以扩展或简化代码。我将把尝试它们的机会留给读者，并让我们知道它们的效果如何。
- en: Who this book is for
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这本书适合谁
- en: This book is for programmers who already know C++ (including the language syntax,
    STL containers, and elements of templates) and who want to add more tools to their
    toolkit. You don't need to know anything about functional programming to read
    the book; we took care to explain every idea in a clear and practical manner.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书适用于已经了解C++（包括语言语法、STL容器和模板元素）并希望为自己的工具箱增添更多工具的程序员。您不需要了解任何有关函数式编程的知识来阅读本书；我们已经以清晰实用的方式解释了每个想法。
- en: You do, however, need to be curious about the set of tools coming from the world
    of functional programming. A hefty dose of experimentation will help you to make
    the most of this book, so I encourage you to play around with the code and to
    let us know what you find.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，您需要对来自函数式编程世界的工具集感到好奇。大量的实验将帮助您充分利用本书，因此我鼓励您尝试运行代码，并告诉我们您的发现。
- en: What this book covers
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书涵盖的内容
- en: '[Chapter 1](04c66ecc-bfe4-4e93-a32f-c2e0a51a9fd9.xhtml), *An Introduction to
    Functional Programming*, introduces you to the fundamental ideas of functional
    programming.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 第1章《函数式编程简介》向您介绍了函数式编程的基本思想。
- en: '[Chapter 2](79295589-e861-4722-96a5-d131b429aac0.xhtml), *Understanding Pure
    Functions*, teaches you the fundamental building blocks of functional programming,
    functions that focus on immutability, and how to write them in C++.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 第2章《理解纯函数》教会您函数式编程的基本构建块，即侧重于不变性的函数，以及如何在C++中编写它们。
- en: '[Chapter 3](c4cdce72-828b-4cb8-b904-481315999c60.xhtml), *Deep Dive into Lambdas*,
    focuses on lambdas and how to write them in C++.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 第3章《深入了解Lambda表达式》侧重于Lambda表达式以及如何在C++中编写它们。
- en: '[Chapter 4](d361a3f0-acc7-4e77-9387-2b563fac2f09.xhtml), *The Idea of Functional
    Composition*, looks at how to compose functions with a higher order operation.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 第4章《函数组合的概念》探讨了如何使用高阶操作组合函数。
- en: '[Chapter 5](daf883d3-a1ab-4969-8c81-7d3f33ed1934.xhtml), *Partial Application
    and Currying*, teaches you how to use two fundamental operations on functions—partial
    application and currying in C++.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 第5章《部分应用和柯里化》教会您如何在C++中使用函数的两个基本操作——部分应用和柯里化。
- en: '[Chapter 6](0b87d535-3c52-44cd-a6df-ba6d03fc37cf.xhtml), *Thinking in Functions –
    from Data in to Data out*, introduces you to another way of organizing your code,
    enabling function-centric design.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 第6章《函数式思维-从数据到数据输出》向您介绍了另一种组织代码的方式，实现以函数为中心的设计。
- en: '[Chapter 7](9d86d296-6caf-4b65-9020-4307c85f3acd.xhtml), *Removing Duplication
    with Functional Operations*, is an overview of the **Don''t Repeat Yourself** (**DRY**)
    principle, the types of code duplication and code similarities, and how to write
    more DRY code using functional operations such as composition, partial application,
    and currying.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 第7章《使用功能操作消除重复》是对“不要重复自己”（DRY）原则、代码重复和相似性类型以及如何使用功能操作（如组合、部分应用和柯里化）编写更加DRY代码的概述。
- en: '[Chapter 8](2adc86fe-d4df-4b55-b8bf-bb1319faeba6.xhtml), *Improving Cohesion
    Using Classes*, demonstrates how functions can evolve into classes and how classes
    can be turned into functions.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 第8章《使用类改善内聚性》演示了函数如何演变为类，以及如何将类转换为函数。
- en: '[Chapter 9](f3b31186-dfef-496e-bc6e-82a55eeb0cba.xhtml), *Test-Driven Development
    for Functional Programming*, looks at how to use **Test-Driven Development** (**TDD**)
    with functional programming and at how immutability and pure functions simplify
    tests.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 第9章《函数式编程的测试驱动开发》探讨了如何在函数式编程中使用测试驱动开发（TDD），以及不变性和纯函数如何简化测试。
- en: '[Chapter 10](4612efcd-7520-4ae3-9813-0c42acee664a.xhtml), *Performance Optimization*,
    dives into specific methods of how to optimize the performance of function-centric
    design, including memoization, tail recursion optimization, and parallel execution.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 第10章《性能优化》深入探讨了如何优化以函数为中心设计的性能的具体方法，包括记忆化、尾递归优化和并行执行。
- en: '[Chapter 11](56c096aa-67a7-48ad-bf22-a78367941a26.xhtml), *Property-Based Testing*,
    looks at how functional programming enables a new paradigm of writing automated
    tests that enhances example-based testing with data generation.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 第11章《基于属性的测试》探讨了函数式编程如何实现编写自动化测试的新范式，通过数据生成增强了基于示例的测试。
- en: '[Chapter 12](3b3ccc61-d5b6-4e3c-b142-cf32355f6229.xhtml), *Refactoring to and
    through Pure Functions*, explains how any existing code can be refactored to pure
    functions and then back into classes with minimal risk. It also looks at classic
    design patterns and a few functional design patterns.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 第12章《重构到和通过纯函数》解释了任何现有代码如何被重构为纯函数，然后再次转换为类，而风险最小。它还涉及经典设计模式和一些函数式设计模式。
- en: '[Chapter 13](03d5f0b0-bfc9-4526-992e-8e4f23cec30b.xhtml), *Immutability and
    Architecture – Event Sourcing*, explains that immutability can move at the data
    storage level, looks at how to use event sourcing, and discusses its advantages
    and disadvantages.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 第13章《不变性和架构-事件溯源》解释了不变性可以在数据存储级别上移动，介绍了如何使用事件溯源，并讨论了它的优缺点。
- en: '[Chapter 14](1edd5963-94e4-48dc-830f-8f201b3a39c7.xhtml), *Lazy Evaluation
    Using the Ranges Library*, dives into the awesome ranges library and demonstrates
    how to use it in C++ 17 and C++ 20.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 第14章《使用Ranges库进行惰性求值》深入研究了强大的Ranges库，并演示了如何在C++ 17和C++ 20中使用它。
- en: '[Chapter 15](f33810ab-9028-4f3c-b457-0e8039d8f52c.xhtml), *STL Support and
    Proposals*, looks at STL functional features in the C++ 17 standard and at a few
    interesting additions to C++ 20.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 第15章《STL支持和提案》介绍了C++ 17标准中的STL功能特性，以及C++ 20的一些有趣的补充。
- en: '[Chapter 16](f621e2cb-9b72-475b-9694-fc1b308a05ce.xhtml), *Standard Language
    Support and Proposals*, closes the book with an overview of the fundamental building
    blocks of functional programming and the various options for using them in the
    C++ 17 standard.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[第16章](f621e2cb-9b72-475b-9694-fc1b308a05ce.xhtml)，*标准语言支持和提案*，总结了函数式编程的基本构建块以及在C++
    17标准中使用它们的各种选项。'
- en: To get the most out of this book
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 充分利用本书
- en: This book assumes a good knowledge of the C++ syntax and of basic STL containers. However,
    it does not assume any knowledge of functional programming, functional constructs,
    category theory, or math. We've gone to great lengths to ensure that each concept
    is explained clearly and from a practical, programmer-centric perspective.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 本书假定您对C++语法和基本STL容器有很好的了解。但是，它并不假定您对函数式编程、函数式构造、范畴论或数学有任何了解。我们已经非常努力地确保每个概念都以清晰的方式从实际的、以程序员为中心的角度进行解释。
- en: We strongly encourage you to play around with the code after reading the chapters
    or try to replicate the code from the samples after finishing a chapter. Even
    better, pick a coding kata (for example, from [http://codingdojo.org/kata/](http://codingdojo.org/kata/))
    problem and try to solve it using the techniques from this book. You will learn
    much more by combining reading with toying with code than by simply reading the
    theory on its own.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们强烈建议您在阅读章节后玩弄代码，或者在完成章节后尝试复制样本中的代码。更好的是，选择一个编码卡塔（例如，来自[http://codingdojo.org/kata/](http://codingdojo.org/kata/)）问题，并尝试使用本书中的技术来解决它。通过阅读和玩弄代码的结合，您将学到更多，而不仅仅是阅读理论。
- en: Most of the content in this book requires you to think differently about the
    code structure and, sometimes, this will be contrary to what you are used to.
    However, we see functional programming as another tool in your toolkit; it doesn't
    contradict what you already know, instead, it just provides you with additional
    instruments to use with your production code. When and how you use them is your
    decision.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的大部分内容需要您以不同的方式思考代码结构，有时这与您习惯的方式相悖。然而，我们认为函数式编程是您工具箱中的另一个工具；它并不与您已经知道的知识相矛盾，而是为您提供了额外的工具来用于生产代码。何时以及如何使用它们是您的决定。
- en: To run the code samples from the book, you will need `g++` and the `make` command.
    Alternatively, you can run the samples using any compiler that supports C++ 17,
    but you will need to manually run each file. All the code samples compile and
    automatically run with `make` or `make [specific example]`, and provide the output
    on the console with a few caveats that follow.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行本书中的代码示例，您将需要`g++`和`make`命令。或者，您可以使用支持C++ 17的任何编译器运行示例，但您需要手动运行每个文件。所有代码示例都可以使用`make`或`make
    [specific example]`进行编译和自动运行，并在控制台上提供输出，但有一些注意事项需要遵循。
- en: The memory optimization samples from [Chapter 10](4612efcd-7520-4ae3-9813-0c42acee664a.xhtml), *Performance
    Optimization*, need to run with `make allMemoryLogs` or a specific target, require
    a keyboard press after each target run, and will create log files in the `out/`
    folder, showing the evolution of allocated memory for the process. This will only
    work on Linux systems.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 来自[第10章](4612efcd-7520-4ae3-9813-0c42acee664a.xhtml)的内存优化示例，*性能优化*，需要使用`make
    allMemoryLogs`或特定目标运行，需要在每个目标运行后按键盘，将在`out/`文件夹中创建日志文件，显示进程分配内存的演变。这仅适用于Linux系统。
- en: The reactive programming sample from [Chapter 10](4612efcd-7520-4ae3-9813-0c42acee664a.xhtml), *Performance
    Optimization* and requires user input. Just input numbers and the program will
    compute in a reactive way whether they are prime or not. The program should receive
    inputs even while computing. The code samples from [Chapter 16](f621e2cb-9b72-475b-9694-fc1b308a05ce.xhtml), *Standard
    Language Support and Proposals*, require a compiler that supports C++20; at this
    point, `g++-8` is used. You will need to install `g++-8` separately.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 来自[第10章](4612efcd-7520-4ae3-9813-0c42acee664a.xhtml)的反应式编程示例，*性能优化*，需要用户输入。只需输入数字，程序将以反应式方式计算它们是否为质数。即使在计算过程中，程序也应该接收输入。来自[第16章](f621e2cb-9b72-475b-9694-fc1b308a05ce.xhtml)的代码示例，*标准语言支持和提案*，需要支持C++20的编译器；目前使用`g++-8`。您需要单独安装`g++-8`。
- en: Download the example code files
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载示例代码文件
- en: You can download the example code files for this book from your account at [www.packt.com](http://www.packt.com).
    If you purchased this book elsewhere, you can visit [www.packt.com/support](http://www.packt.com/support)
    and register to have the files emailed directly to you.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[www.packt.com](http://www.packt.com)的帐户中下载本书的示例代码文件。如果您在其他地方购买了本书，您可以访问[www.packt.com/support](http://www.packt.com/support)并注册，以便直接通过电子邮件接收文件。
- en: 'You can download the code files by following these steps:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以按照以下步骤下载代码文件：
- en: Log in or register at [www.packt.com](http://www.packt.com).
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[www.packt.com](http://www.packt.com)上登录或注册。
- en: Select the SUPPORT tab.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“支持”选项卡。
- en: Click on Code Downloads & Errata.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“代码下载和勘误”。
- en: Enter the name of the book in the Search box and follow the onscreen instructions.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索框中输入书名，然后按照屏幕上的说明操作。
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 下载文件后，请确保使用最新版本的以下工具解压或提取文件夹：
- en: WinRAR/7-Zip for Windows
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows的WinRAR/7-Zip
- en: Zipeg/iZip/UnRarX for Mac
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mac的Zipeg/iZip/UnRarX
- en: 7-Zip/PeaZip for Linux
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux的7-Zip/PeaZip
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/Hands-On-Functional-Programming-with-Cpp](https://github.com/PacktPublishing/Hands-On-Functional-Programming-with-Cpp). In
    case there's an update to the code, it will be updated on the existing GitHub
    repository.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 该书的代码包也托管在GitHub上，网址为[https://github.com/PacktPublishing/Hands-On-Functional-Programming-with-Cpp](https://github.com/PacktPublishing/Hands-On-Functional-Programming-with-Cpp)。如果代码有更新，将在现有的GitHub存储库上进行更新。
- en: We also have other code bundles from our rich catalog of books and videos available
    at **[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)**.
    Check them out!
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有其他代码包，来自我们丰富的图书和视频目录，可在**[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)**上找到。去看看吧！
- en: Code in Action
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码实例
- en: 'Visit the following link to see the code being executed:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 访问以下链接以查看代码的执行情况：
- en: '[http://bit.ly/2ZPw0KH](http://bit.ly/2ZPw0KH)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://bit.ly/2ZPw0KH](http://bit.ly/2ZPw0KH)'
- en: Conventions used
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用的约定
- en: There are a number of text conventions used throughout this book.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中使用了许多文本约定。
- en: '`CodeInText`: Indicates code words in text, database table names, folder names,
    filenames, file extensions, pathnames, dummy URLs, user input, and Twitter handles.
    Here is an example: "In STL, it''s implemented with the `find_if` function. Let''s
    see it in action."'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`CodeInText`：表示文本中的代码词、数据库表名、文件夹名、文件名、文件扩展名、路径名、虚拟URL、用户输入和Twitter句柄。以下是一个例子：“在STL中，它是用`find_if`函数实现的。让我们看看它的运行情况。”'
- en: 'A block of code is set as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一块代码设置如下：
- en: '[PRE0]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们希望引起您对代码块的特定部分的注意时，相关的行或项目将以粗体设置：
- en: '[PRE1]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Warnings or important notes appear like this.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 警告或重要说明看起来像这样。
- en: Tips and tricks appear like this.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 提示和技巧看起来像这样。
- en: Get in touch
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 联系方式
- en: Feedback from our readers is always welcome.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们始终欢迎读者的反馈意见。
- en: '**General feedback**: If you have questions about any aspect of this book,
    mention the book title in the subject of your message and email us at `customercare@packtpub.com`.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**一般反馈**：如果您对本书的任何方面有疑问，请在您的消息主题中提及书名，并通过`customercare@packtpub.com`与我们联系。'
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packt.com/submit-errata](http://www.packt.com/submit-errata),
    selecting your book, clicking on the Errata Submission Form link, and entering
    the details.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**勘误**：尽管我们已经非常注意确保内容的准确性，但错误确实会发生。如果您在本书中发现错误，我们将不胜感激，如果您能向我们报告。请访问[www.packt.com/submit-errata](http://www.packt.com/submit-errata)，选择您的书，点击勘误提交表单链接，并输入详细信息。'
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the Internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at `copyright@packt.com` with a link
    to the material.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**盗版**：如果您在互联网上发现我们作品的任何形式的非法副本，我们将不胜感激，如果您能向我们提供位置地址或网站名称。请通过链接`copyright@packt.com`与我们联系。'
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com/).'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果您有兴趣成为作者**：如果您在某个专题上有专业知识，并且有兴趣撰写或为一本书做出贡献，请访问[authors.packtpub.com](http://authors.packtpub.com/)。'
- en: Reviews
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评论
- en: Please leave a review. Once you have read and used this book, why not leave
    a review on the site that you purchased it from? Potential readers can then see
    and use your unbiased opinion to make purchase decisions, we at Packt can understand
    what you think about our products, and our authors can see your feedback on their
    book. Thank you!
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 请留下评论。一旦您阅读并使用了本书，为什么不在购买书籍的网站上留下评论呢？潜在的读者可以看到并使用您的客观意见来做出购买决策，我们在Packt可以了解您对我们产品的看法，我们的作者可以看到您对他们书籍的反馈。谢谢！
- en: For more information about Packt, please visit [packt.com](http://www.packt.com/).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Packt的更多信息，请访问[packt.com](http://www.packt.com/)。
