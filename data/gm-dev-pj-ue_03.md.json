["```cpp\n    // Spring arm component which will act as a placeholder for   the player camera\n    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category =   MyTPS_Cam, meta = (AllowPrivateAccess = \"true\"))\n    class USpringArmComponent* CameraBoom;\n    // Follow camera\n    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category =   MyTPS_Cam, meta = (AllowPrivateAccess = \"true\"))\n    class UCameraComponent* FollowCamera;\n    ```", "```cpp\n    #include \"GameFramework/SpringArmComponent.h\"\n    #include \"Camera/CameraComponent.h\"\n    ```", "```cpp\n    #include \"Components/CapsuleComponent.h\"\n    #include \"GameFramework/CharacterMovementComponent.h\"\n    ```", "```cpp\n    // Set size for collision capsule\n    GetCapsuleComponent()->InitCapsuleSize(42.f, 96.0f);\n    // Don't rotate when the controller rotates. Let that just   affect the camera.\n    bUseControllerRotationPitch = false;\n    bUseControllerRotationYaw = false;\n    bUseControllerRotationRoll = false;\n    // Configure character movement\n    GetCharacterMovement()->bOrientRotationToMovement = true;\n    // Create a camera boom (pulls in towards the   player if there is a collision)\n    CameraBoom =   CreateDefaultSubobject<USpringArmComponent>(TEXT(\"CameraBoom\"));\n    CameraBoom->SetupAttachment(RootComponent);\n    CameraBoom->TargetArmLength = 300.0f;\n    CameraBoom->bUsePawnControlRotation = true; \n    // Create a camera that will follow the character\n    FollowCamera =   CreateDefaultSubobject<UCameraComponent>(TEXT(\"FollowCamera\"));\n    FollowCamera->SetupAttachment(CameraBoom,   USpringArmComponent::SocketName);\n    FollowCamera->bUsePawnControlRotation = false;\n    ```"]