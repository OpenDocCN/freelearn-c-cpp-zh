["```cpp\nemcc hello.c --shell-file new_shell.html --emrun -o hello2.html\n```", "```cpp\n<style>\n .emscripten { padding-right: 0; margin-left: auto; margin-right: auto;    \n               display: block; }\n textarea.emscripten { font-family: monospace; width: 80%; }\n div.emscripten { text-align: center; }\n div.emscripten_border { border: 1px solid black; }\n /* the canvas *must not* have any border or padding, or mouse coords \n    will be wrong */\n canvas.emscripten { border: 0px none; background-color: black; }\n .spinner {\n            height: 50px;\n            width: 50px;\n            margin: 0px auto;\n            -webkit-animation: rotation .8s linear infinite;\n            -moz-animation: rotation .8s linear infinite;\n            -o-animation: rotation .8s linear infinite;\n            animation: rotation 0.8s linear infinite;\n            border-left: 10px solid rgb(0,150,240);\n            border-right: 10px solid rgb(0,150,240);\n            border-bottom: 10px solid rgb(0,150,240);\n            border-top: 10px solid rgb(100,0,200);\n            border-radius: 100%;\n            background-color: rgb(200,100,250);\n          }\n @-webkit-keyframes rotation {\n         from {-webkit-transform: rotate(0deg);}\n         to {-webkit-transform: rotate(360deg);}\n  }\n @-moz-keyframes rotation {\n         from {-moz-transform: rotate(0deg);}\n         to {-moz-transform: rotate(360deg);}\n }\n @-o-keyframes rotation {\n         from {-o-transform: rotate(0deg);}\n         to {-o-transform: rotate(360deg);}\n }\n @keyframes rotation {\n         from {transform: rotate(0deg);}\n         to {transform: rotate(360deg);}\n }\n </style>\n```", "```cpp\n<link href=\"shell.css\" rel=\"stylesheet\" type=\"text/css\">\n```", "```cpp\n<figure style=\"overflow:visible;\" id=\"spinner\">\n    <div class=\"spinner\"></div>\n    <center style=\"margin-top:0.5em\"><strong>emscripten</strong></center>\n</figure>\n<div class=\"emscripten\" id=\"status\">Downloading...</div>\n    <div class=\"emscripten\">\n        <progress value=\"0\" max=\"100\" id=\"progress\" hidden=1></progress>\n    </div>\n```", "```cpp\n<div class=\"emscripten\">\n    <input type=\"checkbox\" id=\"resize\">Resize canvas\n    <input type=\"checkbox\" id=\"pointerLock\" checked>Lock/hide mouse \n     pointer&nbsp;&nbsp;&nbsp;\n    <input type=\"button\" value=\"Fullscreen\" onclick=\n    \"Module.requestFullscreen(document.getElementById\n    ('pointerLock').checked,\n            document.getElementById('resize').checked)\">\n </div>\n```", "```cpp\n <hr/>\n <textarea class=\"emscripten\" id=\"output\" rows=\"8\"></textarea>\n <hr/>\n```", "```cpp\nvar statusElement = document.getElementById('status');\nvar progressElement = document.getElementById('progress');\nvar spinnerElement = document.getElementById('spinner');\n```", "```cpp\nvar Module = {\n preRun: [],\n postRun: [],\n```", "```cpp\npreRun: [function() {console.log(\"pre run 1\")},\n            function() {console.log(\"pre run 2\")}],\npostRun: [function() {console.log(\"post run 1\")},\n            function() {console.log(\"post run 2\")}],\n```", "```cpp\npre run 2\npre run 1\nstatus: Running...\nHello wasm\npost run 2\npost run 1\n```", "```cpp\nprint: (function() {\n    var element = document.getElementById('output');\n    if (element) element.value = ''; // clear browser cache\n    return function(text) {\n        if (arguments.length > 1) text = \n        Array.prototype.slice.call(arguments).join(' ');\n        // These replacements are necessary if you render to raw HTML\n        //text = text.replace(/&/g, \"&amp;\");\n        //text = text.replace(/</g, \"&lt;\");\n        //text = text.replace(/>/g, \"&gt;\");\n        //text = text.replace('\\n', '<br>', 'g');\n        console.log(text);\n        if (element) {\n            element.value += text + \"\\n\";\n            element.scrollTop = element.scrollHeight; // focus on \n            bottom\n        }\n    };\n})(),\n```", "```cpp\nprintErr: function(text) {\n     if (arguments.length > 1) text = \n     Array.prototype.slice.call(arguments).join(' ');\n     if (0) { // XXX disabled for safety typeof dump == 'function') {\n       dump(text + '\\n'); // fast, straight to the real console\n     } else {\n         console.error(text);\n     }\n },\n```", "```cpp\ncanvas: (function() {\n     var canvas = document.getElementById('canvas');\n     // As a default initial behavior, pop up an alert when webgl \n        context is lost. To make your\n     // application robust, you may want to override this behavior \n        before shipping!\n     // See http://www.khronos.org/registry/webgl/specs/latest/1.0/#5.15.2\n     canvas.addEventListener(\"webglcontextlost\", function(e) { \n        alert('WebGL context lost. You will need to reload the page.'); \n        e.preventDefault(); }, false);\n     return canvas;\n })(),\n```", "```cpp\nsetStatus: function(text) {\n    if (!Module.setStatus.last) Module.setStatus.last = { time: \n        Date.now(), text: '' };\n    if (text === Module.setStatus.last.text) return;\n    var m = text.match(/([^(]+)\\((\\d+(\\.\\d+)?)\\/(\\d+)\\)/);\n    var now = Date.now();\n\n    // if this is a progress update, skip it if too soon\n    if (m && now - Module.setStatus.last.time < 30) return; \n    Module.setStatus.last.time = now;\n    Module.setStatus.last.text = text;\n    if (m) {\n        text = m[1];\n    }\n    console.log(\"status: \" + text);\n},\ntotalDependencies: 0,\nmonitorRunDependencies: function(left) {\n  this.totalDependencies = Math.max(this.totalDependencies, left);\n    Module.setStatus(left ? 'Preparing... (' + (this.totalDependencies-\n                     left) + '/' + this.totalDependencies + ')' : 'All \n                     downloads complete.');\n}\n};\n Module.setStatus('Downloading...');\n```", "```cpp\nwindow.onerror = function() {\n    Module.setStatus('Exception thrown, see JavaScript console');\n    Module.setStatus = function(text) {\n        if (text) Module.printErr('[post-exception status] ' + text);\n    };\n```", "```cpp\n{{{ SCRIPT }}}\n```", "```cpp\n<script async type=\"text/javascript\" src=\"img/shell-min.js\"></script>\n```", "```cpp\n#include <emscripten.h>\n#include <stdlib.h>\n#include <stdio.h>\n\nint main() {\n    printf(\"Hello World\\n\");\n    EM_ASM( InitWrappers() );\n    printf(\"Initialization Complete\\n\");\n}\n\nvoid test() {\n    printf(\"button test\\n\");\n}\n\nvoid int_test( int num ) {\n    printf(\"int test=%d\\n\", num);\n}\n\nvoid float_test( float num ) {\n    printf(\"float test=%f\\n\", num);\n}\n\nvoid string_test( char* str ) {\n    printf(\"string test=%s\\n\", str);\n}\n```", "```cpp\n<!doctype html>\n<html lang=\"en-us\">\n<head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n    <title>New Emscripten Shell</title>\n    <link href=\"shell.css\" rel=\"stylesheet\" type=\"text/css\">\n</head>\n```", "```cpp\n<body>\n    <div class=\"input_box\">&nbsp;</div>\n    <div class=\"input_box\">\n        <button id=\"click_me\" class=\"em_button\">Click Me!</button>\n    </div>\n    <div class=\"input_box\">\n        <input type=\"number\" id=\"int_num\" max=\"9999\" min=\"0\" step=\"1\" \n         value=\"1\" class=\"em_input\">\n        <button id=\"int_button\" class=\"em_button\">Int Click!</button>\n    </div>\n    <div class=\"input_box\">\n        <input type=\"number\" id=\"float_num\" max=\"99\" min=\"0\" \n          step=\"0.01\" value=\"0.0\" class=\"em_input\">\n        <button id=\"float_button\" class=\"em_button\">Float Click!</button>\n    </div>\n    <div class=\"input_box\">&nbsp;</div>\n    <textarea class=\"em_textarea\" id=\"output\" rows=\"8\"></textarea>\n    <div id=\"string_box\">\n        <button id=\"string_button\" class=\"em_button\">String Click!</button>\n        <input id=\"string_input\">\n    </div>\n```", "```cpp\n\n <script type='text/javascript'>\n    function InitWrappers() {\n        var test = Module.cwrap('test', 'undefined');\n        var int_test = Module.cwrap('int_test', 'undefined', ['int']);\n        var float_test = Module.cwrap('float_test', 'undefined', \n                                       ['float']);\n        var string_test = Module.cwrap('string_test', 'undefined', \n                                       ['string']);\n        document.getElementById(\"int_button\").onclick = function() {\n\n        if( int_test != null ) {\n            int_test(document.getElementById('int_num').value);\n        }\n    }\n\n    document.getElementById(\"string_button\").onclick = function() {\n        if( string_test != null ) {\n            string_test(document.getElementById('string_input').value);\n        }\n    }\n\n    document.getElementById(\"float_button\").onclick = function() {\n        if( float_test != null ) {\n            float_test(document.getElementById('float_num').value);\n        }\n    }\n\n    document.getElementById(\"click_me\").onclick = function() {\n        if( test != null ) {\n            test();\n        }\n    }\n }\n\nfunction runbefore() {\n    console.log(\"before module load\");\n}\n\nfunction runafter() {\n    console.log(\"after module load\");\n}\n```", "```cpp\nvar Module = {\n    preRun: [runbefore],\n    postRun: [runafter],\n    print: (function() {\n        var element = document.getElementById('output');\n        if (element) element.value = ''; // clear browser cache\n            return function(text) {\n                if (arguments.length > 1) text = \n                   Array.prototype.slice.call(arguments).join(' ');\n                /*\n                // The printf statement in C is currently writing to a \n                   textarea. If we want to write\n                // to an HTML tag, we would need to run these lines of \n                   codes to make our text HTML safe\n                text = text.replace(/&/g, \"&amp;\");\n                text = text.replace(/</g, \"&lt;\");\n                text = text.replace(/>/g, \"&gt;\");\n                text = text.replace('\\n', '<br>', 'g');\n                */\n                console.log(text);\n                if (element) {\n                    element.value += text + \"\\n\";\n                    element.scrollTop = element.scrollHeight; \n                     // focus on bottom\n                } \n            };\n        })(),\n        printErr: function(text) {\n            if (arguments.length > 1) text = \n                Array.prototype.slice.call(arguments).join(' ');\n            if (0) { // XXX disabled for safety typeof dump == \n                       'function') {\n                dump(text + '\\n'); // fast, straight to the real                     console\n            } else {\n                console.error(text);\n            }\n        },\n        setStatus: function(text) {\n            if (!Module.setStatus.last) Module.setStatus.last = { time: \n                Date.now(), text: '' };\n            if (text === Module.setStatus.last.text) return;\n            var m = text.match(/([^(]+)\\((\\d+(\\.\\d+)?)\\/(\\d+)\\)/);\n            var now = Date.now();\n\n            // if this is a progress update, skip it if too soon\n            if (m && now - Module.setStatus.last.time < 30) return;\n            Module.setStatus.last.time = now;\n            Module.setStatus.last.text = text;\n\n            if (m) {\n                text = m[1];\n            }\n            console.log(\"status: \" + text);\n        },\n        totalDependencies: 0,\n        monitorRunDependencies: function(left) {\n            this.totalDependencies = Math.max(this.totalDependencies,                                               \n                                              left);\n            Module.setStatus(left ? 'Preparing... (' + \n            (this.totalDependencies-left) + '/' +             \n            this.totalDependencies + ')' : 'All downloads complete.');\n        }\n    };\n    Module.setStatus('Downloading...');\n    window.onerror = function() {\n    Module.setStatus('Exception thrown, see JavaScript console');\n    Module.setStatus = function(text) {\n        if (text) Module.printErr('[post-exception status] ' + text);\n    };\n};\n</script>\n{{{ SCRIPT }}}\n</body>\n</html>\n```", "```cpp\n<link href=\"shell.css\" rel=\"stylesheet\" type=\"text/css\">\n```", "```cpp\n<div class=\"input_box\">\n    <button id=\"click_me\" class=\"em_button\">Click Me!</button>\n</div>\n```", "```cpp\n<div class=\"input_box\">\n    <input type=\"number\" id=\"int_num\" max=\"9999\" min=\"0\" step=\"1\" \n     value=\"1\" class=\"em_input\">\n    <button id=\"int_button\" class=\"em_button\">Int Click!</button>\n</div>\n<div class=\"input_box\">\n    <input type=\"number\" id=\"float_num\" max=\"99\" min=\"0\" step=\"0.01\" \n     value=\"0.0\" class=\"em_input\">\n    <button id=\"float_button\" class=\"em_button\">Float Click!</button>\n</div>\n```", "```cpp\n<textarea class=\"em_textarea\" id=\"output\" rows=\"8\"></textarea>\n<div id=\"string_box\">\n    <button id=\"string_button\" class=\"em_button\">String Click!</button>\n    <input id=\"string_input\">\n</div>\n```", "```cpp\nfunction InitWrappers() {\n    var test = Module.cwrap('test', 'undefined');\n    var int_test = Module.cwrap('int_test', 'undefined', ['int']);\n    var float_test = Module.cwrap('float_test', 'undefined', \n                                   ['float']);\n    var string_test = Module.cwrap('string_test', 'undefined',\n                                     ['string']);\n    document.getElementById(\"int_button\").onclick = function() {\n        if( int_test != null ) {\n            int_test(document.getElementById('int_num').value);\n        }\n    }\n\n    document.getElementById(\"string_button\").onclick = function() {\n        if( string_test != null ) {\n            string_test(document.getElementById('string_input').value);\n        }\n    }\n\n    document.getElementById(\"float_button\").onclick = function() {\n        if( float_test != null ) {\n            float_test(document.getElementById('float_num').value);\n        }\n    }\n\n    document.getElementById(\"click_me\").onclick = function() {\n        if( test != null ) {\n            test();\n        }\n    }\n}\n```", "```cpp\ndocument.getElementById(\"int_button\").onclick = function() {\n    if( int_test != null ) {\n        int_test(document.getElementById('int_num').value);\n    }\n}\n```", "```cpp\nfunction runbefore() {\n    console.log(\"before module load\");\n}\nfunction runafter() {\n    console.log(\"after module load\");\n}\nvar Module = {\n    preRun: [runbefore],\n    postRun: [runafter],\n```", "```cpp\nbody {\n    margin-top: 20px;\n}\n\n.input_box {\n    width: 20%;\n    display: inline-block;\n}\n.em_button {\n    width: 45%;\n    height: 40px;\n    background-color: orangered;\n    color: white;\n    border: 2px solid white;\n    font-size: 20px;\n    border-radius: 8px;\n    transition-duration: 0.5s;\n}\n\n.em_button:hover {\n    background-color: orange;\n    color: white;\n    border: 2px solid white;\n}\n\n.em_input {\n    width: 45%;\n    height: 20px;\n    font-size: 20px;\n    background-color: darkslategray;\n    color: white;\n    padding: 6px;\n}\n\n#output {\n    background-color: darkslategray;\n    color: white;\n    font-size: 16px;\n    padding: 10px;\n    padding-right: 0;\n    margin-left: auto;\n    margin-right: auto;\n    display: block;\n    width: 60%;\n}\n\n#string_box {\n    padding-top: 10px;\n    margin-left: auto;\n    margin-right: auto;\n    display: block;\n    width: 60%;\n}\n\n#string_input {\n    font-size: 20px;\n    background-color: darkslategray;\n    color: white;\n    padding: 6px;\n    margin-left: 5px;\n    width: 45%;\n    float: right;\n}\n```", "```cpp\nbody {\n    margin-top: 20px;\n}\n```", "```cpp\n.input_box {\n    width: 20%;\n    display: inline-block;\n}\n```", "```cpp\n.em_button {\n    width: 45%;\n    height: 40px;\n    background-color: orangered;\n    color: white;\n    border: 0px;\n    font-size: 20px;\n    border-radius: 8px;\n    transition-duration: 0.2s;\n}\n\n.em_button:hover {\n    background-color: orange;\n}\n```", "```cpp\n.em_input {\n    width: 45%;\n    height: 20px;\n    font-size: 20px;\n    background-color: darkslategray;\n    color: white;\n    padding: 6px;\n}\n```", "```cpp\n#output {\n    background-color: darkslategray;\n    color: white;\n    font-size: 16px;\n    padding: 10px;\n    margin-left: auto;\n    margin-right: auto;\n    display: block;\n    width: 60%;\n}\n```", "```cpp\nmargin-left: auto;\nmargin-right: auto;\n```", "```cpp\n#string_box {\n    padding-top: 10px;\n    margin-left: auto;\n    margin-right: auto;\n    display: block;\n    width: 60%;\n}\n\n#string_input {\n    font-size: 20px;\n    background-color: darkslategray;\n    color: white;\n    padding: 6px;\n    margin-left: 5px;\n    width: 45%;\n    float: right;\n}\n```", "```cpp\n emcc shell.c -o shell-test.html --shell-file new_shell.html -s NO_EXIT_RUNTIME=1 -s EXPORTED_FUNCTIONS=\"['_test', '_string_test', '_int_test', '_float_test', '_main']\" -s EXTRA_EXPORTED_RUNTIME_METHODS=\"['cwrap', 'ccall']\"\n```", "```cpp\n<!doctype html>\n<html lang=\"en-us\">\n<head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n    <title>Canvas Shell</title>\n    <link href=\"canvas.css\" rel=\"stylesheet\" type=\"text/css\">\n</head>\n```", "```cpp\n<body>\n    <canvas id=\"canvas\" width=\"800\" height=\"600\" oncontextmenu=\"event.preventDefault()\"></canvas>\n    <textarea class=\"em_textarea\" id=\"output\" rows=\"8\"></textarea>\n    <img src=\"img/spaceship.png\" id=\"spaceship\">\n```", "```cpp\n    <script type='text/javascript'>\n        var img = null;\n        var canvas = null;\n        var ctx = null;\n        function ShipPosition( ship_x, ship_y ) {\n            if( img == null ) {\n                return;\n            }\n            ctx.fillStyle = \"black\";\n            ctx.fillRect(0, 0, 800, 600);\n            ctx.save();\n            ctx.translate(ship_x, ship_y);\n            ctx.drawImage(img, 0, 0, img.width, img.height);\n            ctx.restore();\n        }\n        function ModuleLoaded() {\n            img = document.getElementById('spaceship');\n            canvas = document.getElementById('canvas');\n            ctx = canvas.getContext(\"2d\");\n        }\n```", "```cpp\n        var Module = {\n            preRun: [],\n            postRun: [ModuleLoaded],\n            print: (function() {\n                var element = document.getElementById('output');\n                if (element) element.value = ''; // clear browser cache\n                return function(text) {\n                    if (arguments.length > 1) text = \n                    Array.prototype.slice.call(arguments).join(' ');\n                        // uncomment block below if you want to write \n                           to an html element\n                        /*\n                        text = text.replace(/&/g, \"&amp;\");\n                        text = text.replace(/</g, \"&lt;\");\n                        text = text.replace(/>/g, \"&gt;\");\n                        text = text.replace('\\n', '<br>', 'g');\n                        */\n                        console.log(text);\n                        if (element) {\n                            element.value += text + \"\\n\";\n                            element.scrollTop = element.scrollHeight; \n      // focus on bottom\n                        }\n                    };\n                })(),\n                printErr: function(text) {\n                    if (arguments.length > 1) text = \n                       Array.prototype.slice.call(arguments).join(' ');\n                    console.error(text);\n                },\n                canvas: (function() {\n                    var canvas = document.getElementById('canvas');\n                    canvas.addEventListener(\"webglcontextlost\", \n                    function(e) { \n                        alert('WebGL context lost. You will need to \n                                reload the page.');\n                        e.preventDefault(); }, \n                        false);\n                    return canvas;\n                })(),\n                setStatus: function(text) {\n                    if (!Module.setStatus.last) Module.setStatus.last = \n                    { time: Date.now(), text: '' };\n                    if (text === Module.setStatus.last.text) return;\n                    var m = text.match(/([^(]+)\\((\\d+\n                    (\\.\\d+)?)\\/(\\d+)\\)/);\n                    var now = Date.now();\n\n                    // if this is a progress update, skip it if too        \n                       soon\n                    if (m && now - Module.setStatus.last.time < 30) \n            return; \n                    Module.setStatus.last.time = now;\n                    Module.setStatus.last.text = text;\n                    if (m) {\n                        text = m[1];\n                    }\n                    console.log(\"status: \" + text);\n                },\n                totalDependencies: 0,\n                monitorRunDependencies: function(left) {\n                    this.totalDependencies = \n                    Math.max(this.totalDependencies, left);\n                    Module.setStatus(left ? 'Preparing... (' + \n                    (this.totalDependencies-left) + \n                        '/' + this.totalDependencies + ')' : 'All \n                        downloads complete.');\n                }\n            };\n            Module.setStatus('Downloading...');\n            window.onerror = function() {\n                Module.setStatus('Exception thrown, see JavaScript \n                                    console');\n                Module.setStatus = function(text) {\n                    if (text) Module.printErr('[post-exception status] \n                    ' + text);\n                };\n            };\n```", "```cpp\n    </script>\n{{{ SCRIPT }}}\n</body>\n</html>\n```", "```cpp\n<title>Canvas Shell</title>\n<link href=\"canvas.css\" rel=\"stylesheet\" type=\"text/css\">\n```", "```cpp\n<canvas id=\"canvas\" width=\"800\" height=\"600\" oncontextmenu=\"event.preventDefault()\"></canvas>\n<textarea class=\"em_textarea\" id=\"output\" rows=\"8\"></textarea>\n<img src=\"img/spaceship.png\" id=\"spaceship\">\n```", "```cpp\nvar img = null;\nvar canvas = null;\nvar ctx = null;\n```", "```cpp\nfunction ShipPosition( ship_x, ship_y ) {\n    if( img == null ) {\n        return;\n    } \n    ctx.fillStyle = \"black\";\n    ctx.fillRect(0, 0, 800, 600); \n    ctx.save();\n    ctx.translate(ship_x, ship_y);\n    ctx.drawImage(img, 0, 0, img.width, img.height);\n    ctx.restore();\n}\n```", "```cpp\nfunction ModuleLoaded() {\n    img = document.getElementById('spaceship');\n    canvas = document.getElementById('canvas');\n    ctx = canvas.getContext(\"2d\");\n} \nvar Module = {\n    preRun: [],\n    postRun: [ModuleLoaded],\n```", "```cpp\ncanvas: (function() {\n    var canvas = document.getElementById('canvas');\n    // As a default initial behavior, pop up an alert when webgl \n       context is lost. To make your\n    // application robust, you may want to override this behavior \n       before shipping!\n    // See http://www.khronos.org/registry/webgl/specs/latest/1.0/#5.15.2\n    canvas.addEventListener(\"webglcontextlost\", function(e) { \n        alert('WebGL context lost. You will need to reload the page.'); \n        e.preventDefault(); }, false);\n    return canvas;\n})(),\n```", "```cpp\n#include <emscripten.h>\n#include <stdlib.h>\n#include <stdio.h>\n\nint ship_x = 0;\nint ship_y = 0;\n\nvoid MoveShip() {\n    ship_x += 2;\n    ship_y++;\n\n    if( ship_x >= 800 ) {\n        ship_x = -128;\n    }\n\n    if( ship_y >= 600 ) {\n        ship_y = -128;\n    }\n    EM_ASM( ShipPosition($0, $1), ship_x, ship_y );\n}\n\nint main() {\n    printf(\"Begin main\\n\");\n    emscripten_set_main_loop(MoveShip, 0, 0);\n    return 1;\n}\n```", "```cpp\nemscripten_set_main_loop(MoveShip, 0, 0);\n```", "```cpp\nbody {\n    margin-top: 20px;\n}\n\n#output {\n    background-color: darkslategray;\n    color: white;\n    font-size: 16px;\n    padding: 10px;\n    margin-left: auto;\n    margin-right: auto;\n    display: block;\n    width: 60%;\n}\n\n#canvas {\n    width: 800px;\n    height: 600px;\n    margin-left: auto;\n    margin-right: auto;\n    display: block;\n}\n```", "```cpp\nemcc canvas.c -o canvas.html --shell-file canvas_shell.html\n```"]