["```cpp\n    PublicDependencyModuleNames.AddRange(new string[] { \"Core\",   \"CoreUObject\", \"Engine\", \"InputCore\", \"HeadMountedDisplay\",   \"UMG\", \"Slate\", \"SlateCore\" });\n    ```", "```cpp\n    UPROPERTY(meta = (BindWidget))\n    class UButton* RestartButton;\n    ```", "```cpp\n    protected:\n    UFUNCTION()\n    void OnRestartClicked();\n    ```", "```cpp\n    #include \"Kismet/GameplayStatics.h\"\n    ```", "```cpp\n    void URestartWidget::OnRestartClicked()\n    {\n    }\n    ```", "```cpp\n    UGameplayStatics::OpenLevel(this,   FName(*UGameplayStatics::GetCurrentLevelName(this)));\n    ```", "```cpp\n    virtual void NativeOnInitialized() override;\n    ```", "```cpp\n    void URestartWidget::NativeOnInitialized()\n    {\n    \u00a0\u00a0Super::NativeOnInitialized();\n    \u00a0\u00a0if (RestartButton != nullptr)\n    \u00a0\u00a0{\n    \u00a0\u00a0}\n    }\n    ```", "```cpp\n    if (RestartButton != nullptr)\n    {\n    \u00a0\u00a0RestartButton->OnClicked.AddDynamic(this,   &URestartWidget::OnRestartClicked);\n    }\n    ```", "```cpp\n    #include \"Components/Button.h\"\n    ```", "```cpp\n    public:\n    UPROPERTY(EditDefaultsOnly)\n    TSubclassOf<class URestartWidget> BP_RestartWidget;\n    ```", "```cpp\n    private:\n    UPROPERTY()\n    class URestartWidget* RestartWidget;\n    ```", "```cpp\n    void ShowRestartWidget();\n    ```", "```cpp\n    #include \"RestartWidget.h\"\n    ```", "```cpp\n    void ADodgeballPlayerController::ShowRestartWidget()\n    {\n    \u00a0\u00a0if (BP_RestartWidget != nullptr)\n    \u00a0\u00a0{\n    \u00a0\u00a0}\n    }\n    ```", "```cpp\n    SetPause(true);\n    ```", "```cpp\n    SetInputMode(FInputModeUIOnly());\n    ```", "```cpp\n    bShowMouseCursor = true;\n    ```", "```cpp\n    RestartWidget = CreateWidget<URestartWidget>(this,   BP_RestartWidget);\n    ```", "```cpp\n    RestartWidget->AddToViewport();\n    ```", "```cpp\n    void HideRestartWidget();\n    ```", "```cpp\n    void ADodgeballPlayerController::HideRestartWidget()\n    {\n    }\n    ```", "```cpp\n    RestartWidget->RemoveFromParent();\n    RestartWidget->Destruct();\n    ```", "```cpp\n    SetPause(false);\n    ```", "```cpp\n    SetInputMode(FInputModeGameOnly());\n    bShowMouseCursor = false;\n    ```", "```cpp\n    #include \"DodgeballPlayerController.h\"\n    ```", "```cpp\n        ADodgeballPlayerController* PlayerController = Cast<ADodgeballPlayerController>(GetController());\n        ```", "```cpp\n        if (PlayerController != nullptr)\n        {\n        \u00a0\u00a0PlayerController->ShowRestartWidget();\n        }\n        ```", "```cpp\n    #include \"DodgeballPlayerController.h\"\n    ```", "```cpp\n    ADodgeballPlayerController* PlayerController =   Cast<ADodgeballPlayerController>(GetOwningPlayer());\n    ```", "```cpp\n    if (PlayerController != nullptr)\n    {\n    \u00a0\u00a0PlayerController->HideRestartWidget();\n    }\n    ```", "```cpp\n    UPROPERTY(meta = (BindWidget))\n    class UProgressBar* HealthBar;\n    ```", "```cpp\n    void UpdateHealthPercent(float HealthPercent);\n    ```", "```cpp\n    void UHUDWidget::UpdateHealthPercent(float HealthPercent)\n    {\n    \u00a0\u00a0HealthBar->SetPercent(HealthPercent);\n    }\n    ```", "```cpp\n    #include \"Components/ProgressBar.h\"\n    ```", "```cpp\n    UPROPERTY(EditDefaultsOnly)\n    TSubclassOf<class UHUDWidget> BP_HUDWidget;\n    ```", "```cpp\n    UPROPERTY()\n    class UHUDWidget* HUDWidget;\n    ```", "```cpp\n    virtual void BeginPlay() override;\n    ```", "```cpp\n    void UpdateHealthPercent(float HealthPercent);\n    ```", "```cpp\n    #include \"HUDWidget.h\"\n    ```", "```cpp\n    void ADodgeballPlayerController::BeginPlay()\n    {\n    \u00a0\u00a0Super::BeginPlay();\n    }\n    ```", "```cpp\n    if (BP_HUDWidget != nullptr)\n    {\n    \u00a0\u00a0HUDWidget = CreateWidget<UHUDWidget>(this, BP_HUDWidget);\n    }\n    ```", "```cpp\n    HUDWidget->AddToViewport();\n    ```", "```cpp\n    void ADodgeballPlayerController::UpdateHealthPercent(float   HealthPercent)\n    {\n    \u00a0\u00a0if (HUDWidget != nullptr)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0HUDWidget->UpdateHealthPercent(HealthPercent);\n    \u00a0\u00a0}\n    }\n    ```", "```cpp\n    UFUNCTION(BlueprintNativeEvent, Category = Health)\n    void OnTakeDamage();\n    virtual void OnTakeDamage_Implementation() = 0;\n    ```", "```cpp\n    if (GetOwner()->Implements<UHealthInterface>())\n    {\n    \u00a0\u00a0IHealthInterface::Execute_OnTakeDamage(GetOwner());\n    }\n    ```", "```cpp\n    FORCEINLINE float GetHealthPercent() const { return Health /   100.f; }\n    ```", "```cpp\n    virtual void OnTakeDamage_Implementation() override;\n    ```", "```cpp\n    void ADodgeballCharacter::OnTakeDamage_Implementation()\n    {\n    \u00a0\u00a0ADodgeballPlayerController* PlayerController =   Cast<ADodgeballPlayerController>(GetController());\n    \u00a0\u00a0if (PlayerController != nullptr)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0PlayerController->UpdateHealthPercent(HealthComponent-  >GetHealthPercent());\n    \u00a0\u00a0}\n    }\n    ```"]