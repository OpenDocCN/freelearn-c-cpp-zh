["```cpp\n<!doctype html><html lang=\"en-us\">\n<head><meta charset=\"utf-8\"><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n    <title>Upload Shell</title>\n    <link href=\"upload.css\" rel=\"stylesheet\" type=\"text/css\">\n</head>\n<body>\n    <canvas id=\"canvas\" width=\"800\" height=\"600\" \n     oncontextmenu=\"event.preventDefault()\"></canvas>\n    <textarea class=\"em_textarea\" id=\"output\" rows=\"8\"></textarea>\n    <script type='text/javascript'>\n        var canvas = null;\n        var ctx = null;\n        function ShowFileInput()         \n            {document.getElementById(\"file_input_label\")\n            .style.display=\"block\";}\n        var Module = {\n            preRun: [],\n            postRun: [ShowFileInput],\n            print: (function() {\n                var element = document.getElementById('output');\n                if (element) element.value = '';\n                return function(text) {\n                    if (arguments.length > 1)         \n                    text=Array.prototype.slice.call(arguments).join('                     \n                    ');\n                    console.log(text);\n                    if (element) {\n                        element.value += text + \"\\n\";\n                        element.scrollTop = element.scrollHeight;\n                } }; })(),\n    printErr: function(text) {\n        if (arguments.length > 1) \n        text=Array.prototype.slice.call(arguments).join(' ');\n        if (0) { dump(text + '\\n'); } \n        else { console.error(text); } },\n    canvas: (function() {\n        var canvas = document.getElementById('canvas');\n        canvas.addEventListener(\"webglcontextlost\", function(e) { \n        alert('WebGL context lost. You will need to reload the page.'); \n        e.preventDefault(); }, false);\n        return canvas; })(),\n    setStatus: function(text) {\n        if (!Module.setStatus.last) Module.setStatus.last = { time: \n            Date.now(), text: '' };\n        if (text === Module.setStatus.last.text) return;\n        var m = text.match(/([^(]+)\\((\\d+(\\.\\d+)?)\\/(\\d+)\\)/);\n        var now = Date.now();\n        if (m && now - Module.setStatus.last.time < 30) return;\n        Module.setStatus.last.time = now;\n        Module.setStatus.last.text = text;\n        if (m) { text = m[1]; }\n        console.log(\"status: \" + text);\n    },\n    totalDependencies: 0,\n    monitorRunDependencies: function(left) {\n        this.totalDependencies = Math.max(this.totalDependencies,left);\n        Module.setStatus(left ? 'Preparing... (' + \n        (this.totalDependencies-left) + '/' +\n         this.totalDependencies + ')' : 'All downloads complete.'); }\n};\nModule.setStatus('Downloading...');\nwindow.onerror = function() {\n    Module.setStatus('Exception thrown, see JavaScript console');\n    Module.setStatus = function(text) { if (text) Module.printErr('[post-exception status] ' + text); };\n};\nfunction handleFiles(files) {\n    var file_count = 0;\n    for (var i = 0; i < files.length; i++) {\n        if (files[i].type.match(/image.png/)) {\n            var file = files[i];\n            console.log(\"file name=\" + file.name);\n            var file_name = file.name;\n            var fr = new FileReader();\n            fr.onload = function (file) {\n                var data = new Uint8Array(fr.result);\n                Module.FS_createDataFile('/', file_name, data, true, \n                true, true);\n                Module.ccall('add_image', 'undefined', [\"string\"], \n                [file_name]);\n            };\n            fr.readAsArrayBuffer(files[i]);\n        }\n    }\n}\n</script>\n<input type=\"file\" id=\"file_input\" onchange=\"handleFiles(this.files)\" />\n<label for=\"file_input\" id=\"file_input_label\">Upload .png</label>\n{{{ SCRIPT }}}\n</body></html>\n```", "```cpp\n<title>Upload Shell</title>\n<link href=\"upload.css\" rel=\"stylesheet\" type=\"text/css\">\n```", "```cpp\nfunction ShowFileInput() {\n    document.getElementById(\"file_input_label\").style.display = \"block\";\n}\n\nvar Module = {\n    preRun: [],\n    postRun: [ShowFileInput],\n```", "```cpp\nfunction handleFiles(files) {\n    var file_count = 0;\n    for (var i = 0; i < files.length; i++) {\n        if (files[i].type.match(/image.png/)) {\n            var file = files[i];\n            var file_name = file.name;\n            var fr = new FileReader();\n\n            fr.onload = function (file) {\n                var data = new Uint8Array(fr.result);\n                Module.FS_createDataFile('/', file_name, data, true, \n                true, true);\n                Module.ccall('add_image', 'undefined', [\"string\"], \n                [file_name]);\n            };\n            fr.readAsArrayBuffer(files[i]);\n        }\n    }\n}\n```", "```cpp\nfr.onload = function (file) {\n    var data = new Uint8Array(fr.result);\n    Module.FS_createDataFile('/', file_name, data, true, true, true);\n    Module.ccall('add_image', 'undefined', [\"string\"], [file_name]);\n};\n```", "```cpp\nfr.readAsArrayBuffer(files[i]);\n```", "```cpp\n<input type=\"file\" id=\"file_input\" onchange=\"handleFiles(this.files)\" />\n<label for=\"file_input\" id=\"file_input_label\">Upload .png</label>\n```", "```cpp\n#include <emscripten.h>\n#include <stdlib.h>\n#include <SDL2/SDL.h>\n#include <SDL2/SDL_image.h>\n\nSDL_Window *window;\nSDL_Renderer *renderer;\nchar* fileName;\nSDL_Texture *sprite_texture = NULL;\nSDL_Rect dest = {.x = 160, .y = 100, .w = 16, .h = 16 };\n\nint sprite_x = 0;\nint sprite_y = 0;\n\nvoid add_image(char* file_name) {\n    SDL_Surface *temp_surface = IMG_Load( file_name );\n\n    if( !temp_surface ) {\n        printf(\"failed to load image: %s\\n\", IMG_GetError() );\n        return;\n    }\n    sprite_texture = SDL_CreateTextureFromSurface( renderer, \n    temp_surface );\n    SDL_FreeSurface( temp_surface );\n    SDL_QueryTexture( sprite_texture,\n                        NULL, NULL,\n                        &dest.w, &dest.h );\n}\n\nvoid show_animation() {\n    if( sprite_texture == NULL ) {\n        return;\n    }\n\n    SDL_SetRenderDrawColor( renderer, 0, 0, 0, 255 );\n    SDL_RenderClear( renderer );\n\n    sprite_x += 2;\n    sprite_y++;\n\n    if( sprite_x >= 800 ) {\n        sprite_x = -dest.w;\n    }\n\n    if( sprite_y >= 600 ) {\n        sprite_y = -dest.h;\n    }\n    dest.x = sprite_x;\n    dest.y = sprite_y;\n\n    SDL_RenderCopy( renderer, sprite_texture, NULL, &dest );\n    SDL_RenderPresent( renderer );\n}\n\nint main() {\n    printf(\"Enter Main\\n\");\n    SDL_Init( SDL_INIT_VIDEO );\n\n    int return_val = SDL_CreateWindowAndRenderer( 800, 600, 0, &window, \n    &renderer );\n\n    if( return_val != 0 ) {\n        printf(\"Error creating renderer %d: %s\\n\", return_val, \n        IMG_GetError() );\n         return 0;\n    }\n    emscripten_set_main_loop(show_animation, 0, 0);\n    printf(\"Exit Main\\n\");\n    return 1;\n}\n```", "```cpp\nvoid add_image(char* file_name) {\n    SDL_Surface *temp_surface = IMG_Load( file_name );\n\n    if( !temp_surface ) {\n        printf(\"failed to load image: %s\\n\", IMG_GetError() );\n        return;\n    }\n    sprite_texture = SDL_CreateTextureFromSurface( renderer, \n    temp_surface );\n    SDL_FreeSurface( temp_surface );\n    SDL_QueryTexture( sprite_texture,\n                        NULL, NULL,\n                        &dest.w, &dest.h );\n}\n```", "```cpp\nSDL_Surface *temp_surface = IMG_Load( file_name );\n```", "```cpp\nif( !temp_surface ) {\n    printf(\"failed to load image: %s\\n\", IMG_GetError() );\n    return;\n}\n```", "```cpp\nsprite_texture = SDL_CreateTextureFromSurface( renderer, temp_surface );\nSDL_FreeSurface( temp_surface );\n```", "```cpp\nSDL_QueryTexture( sprite_texture,\n                  NULL, NULL,\n                  &dest.w, &dest.h );\n```", "```cpp\nvoid show_animation() {\n    if( sprite_texture == NULL ) {\n        return;\n    }\n\n    SDL_SetRenderDrawColor( renderer, 0, 0, 0, 255 );\n    SDL_RenderClear( renderer );\n    sprite_x += 2;\n    sprite_y++;\n\n    if( sprite_x >= 800 ) {\n        sprite_x = -dest.w;\n    }\n    if( sprite_y >= 600 ) {\n        sprite_y = -dest.h;\n    }\n\n    dest.x = sprite_x;\n    dest.y = sprite_y;\n    SDL_RenderCopy( renderer, sprite_texture, NULL, &dest );\n    SDL_RenderPresent( renderer );\n}\n```", "```cpp\nif( sprite_texture == NULL ) {\n    return;\n}\n```", "```cpp\nSDL_SetRenderDrawColor( renderer, 0, 0, 0, 255 );\nSDL_RenderClear( renderer );\n```", "```cpp\nsprite_x += 2;\nsprite_y++;\nif( sprite_x >= 800 ) {\n    sprite_x = -dest.w;\n}\nif( sprite_y >= 600 ) {\n    sprite_y = -dest.h;\n}\ndest.x = sprite_x;\ndest.y = sprite_y;\n```", "```cpp\nSDL_RenderCopy( renderer, sprite_texture, NULL, &dest );\nSDL_RenderPresent( renderer );\n```", "```cpp\nint main() {\n    printf(\"Enter Main\\n\");\n    SDL_Init( SDL_INIT_VIDEO );\n    int return_val = SDL_CreateWindowAndRenderer( 800, 600, 0, &window, \n    &renderer );\n\n    if( return_val != 0 ) {\n        printf(\"Error creating renderer %d: %s\\n\", return_val, \n        IMG_GetError() );\n        return 0;\n    }\n\n    emscripten_set_main_loop(show_animation, 0, 0);\n    printf(\"Exit Main\\n\");\n    return 1;\n}\n```", "```cpp\nSDL_Init( SDL_INIT_VIDEO );\nint return_val = SDL_CreateWindowAndRenderer( 800, 600, 0, &window, &renderer );\n\nif( return_val != 0 ) {\n    printf(\"Error creating renderer %d: %s\\n\", return_val, \n    IMG_GetError() );\n    return 0;\n}\n```", "```cpp\nemscripten_set_main_loop(show_animation, 0, 0);\n```", "```cpp\nbody {\n    margin-top: 20px;\n}\n#output {\n    background-color: darkslategray;\n    color: white;\n    font-size: 16px;\n    padding: 10px;\n    margin-left: auto;\n    margin-right: auto;\n    display: block;\n    width: 780px;\n}\n#canvas {\n    width: 800px;\n    height: 600px;\n    margin-left: auto;\n    margin-right: auto;\n    display: block;\n    background-color: black;\n    margin-bottom: 20px;\n}\n[type=\"file\"] {\n    height: 0;\n    overflow: hidden;\n    width: 0;\n    display: none;\n}\n\n[type=\"file\"] + label {\n    background: orangered;\n    border-radius: 5px;\n    color: white;\n    display: none;\n    font-size: 20px;\n    font-family: Verdana, Geneva, Tahoma, sans-serif;\n    text-align: center;\n    margin-top: 10px;\n    margin-bottom: 10px;\n    margin-left: auto;\n    margin-right: auto;\n    width: 130px;\n    padding: 10px 50px;\n    transition: all 0.2s;\n    vertical-align: middle;\n}\n[type=\"file\"] + label:hover {\n    background-color: orange;\n}\n```", "```cpp\n[type=\"file\"] {\n height: 0;\n overflow: hidden;\n width: 0;\n display: none;\n }\n```", "```cpp\n[type=\"file\"] + label {\n    background: orangered;\n    border-radius: 5px;\n    color: white;\n    display: none;\n    font-size: 20px;\n    font-family: Verdana, Geneva, Tahoma, sans-serif;\n    text-align: center;\n    margin-top: 10px;\n    margin-bottom: 10px;\n    margin-left: auto;\n    margin-right: auto;\n    width: 130px;\n    padding: 10px 50px;\n    transition: all 0.2s;\n    vertical-align: middle;\n}\n[type=\"file\"] + label:hover {\n    background-color: orange;\n}\n```", "```cpp\nfunction ShowFileInput() {\n    document.getElementById(\"file_input_label\").style.display = \n    \"block\";\n}\n```", "```cpp\n<svg id=\"pie\" width=\"200\" height=\"200\" viewBox=\"-1 -1 2 2\"></svg>\n <br/>\n <div style=\"margin-left: auto; margin-right: auto\">\n <span class=\"label\">min angle:</span>\n <input type=\"number\" id=\"min_angle\" max=\"359\" min=\"-90\" step=\"1\" \n  value=\"-20\" class=\"em_input\"><br/>\n <span class=\"label\">max angle:</span>\n <input type=\"number\" id=\"max_angle\" max=\"360\" min=\"0\" step=\"1\" \n  value=\"20\" class=\"em_input\"><br/>\n </div>\n```", "```cpp\n\n<script>\n    document.getElementById(\"min_angle\").onchange = function() {\n        var min_angle = Number(this.value);\n        var max_angle = Number(document.getElementById         \n                        (\"max_angle\").value);\n\n        if( min_angle >= max_angle ) {\n            max_angle = min_angle + 1;\n            document.getElementById(\"max_angle\").value = max_angle;\n        }\n\n        if( min_angle < this.min ) {\n            min_angle = this.min;\n            this.value = min_angle;\n        }\n        SetPie( min_angle / 180 * Math.PI, max_angle / 180 * Math.PI );\n    }\n\n    document.getElementById(\"max_angle\").onchange = function() {\n        var min_angle = Number(document.getElementById         \n                        (\"min_angle\").value);\n        var max_angle = Number(this.value);\n\n        if( min_angle >= max_angle ) {\n            min_angle = max_angle - 1;\n            document.getElementById(\"min_angle\").value = min_angle;\n        }\n\n        if( max_angle > this.max ) {\n            max_angle = this.max;\n            this.value = max_angle;\n        }\n\n        SetPie( min_angle / 180 * Math.PI, max_angle / 180 * Math.PI );\n    }\n\n    function SetPie( start_angle, end_angle ) {\n        const svg = document.getElementById('pie');\n        const start_x = Math.cos( start_angle );\n        const start_y = Math.sin( start_angle );\n\n        const end_x = Math.cos( end_angle );\n        const end_y = Math.sin( end_angle );\n        var arc_flag_1 = 0;\n        var arc_flag_2 = 0;\n\n        if( end_angle - start_angle <= 3.14) {\n            arc_flag_1 = 0;\n            arc_flag_2 = 1;\n        }\n        else {\n            arc_flag_1 = 1;\n            arc_flag_2 = 0;\n        }\n\n        const path_data_1 = \n            `M 0 0 L ${start_x} ${start_y} A 1 1 0 ${arc_flag_1} 1 \n            ${end_x} ${end_y} L 0 0`;\n\n        const path_1 = document.createElementNS         \n        ('http://www.w3.org/2000/svg', 'path');\n        path_1.setAttribute('d', path_data_1);\n        path_1.setAttribute('fill', 'red');\n        svg.appendChild(path_1);\n\n        const path_data_2 = \n            `M 0 0 L ${end_x} ${end_y} A 1 1 0 ${arc_flag_2} 1 \n             ${start_x} ${start_y} L 0 0`;\n\n        const path_2 = \n        document.createElementNS('http://www.w3.org/2000/svg', 'path');\n        path_2.setAttribute('d', path_data_2);\n        path_2.setAttribute('fill', 'blue');\n        svg.appendChild(path_2);\n    }\n\n    SetPie( Number(document.getElementById(\"min_angle\").value) / 180 *             \n            Math.PI,\n    Number(document.getElementById(\"max_angle\").value) / 180 * Math.PI );\n</script>\n```", "```cpp\nconst end_x = Math.cos( end_angle );\nconst end_y = Math.sin( end_angle );\n```", "```cpp\nif( end_angle - start_angle <= 3.14) {\n    arc_flag_1 = 0;\n    arc_flag_2 = 1;\n}\nelse {\n    arc_flag_1 = 1;\n    arc_flag_2 = 0;\n}\n```", "```cpp\nconst path_data_1 = `M 0 0 L ${start_x} ${start_y} A 1 1 0 ${arc_flag_1} 1 ${end_x} ${end_y} L 0 0`;\n\nconst path_1 = document.createElementNS('http://www.w3.org/2000/svg',                                         \n                                        'path');\npath_1.setAttribute('d', path_data_1);\npath_1.setAttribute('fill', 'red');\nsvg.appendChild(path_1);\n```", "```cpp\n<div class=\"container\">\n    <svg id=\"pie\" width=\"200\" height=\"200\" viewBox=\"-1 -1 2 2\"></svg>\n    <br/>\n    <div style=\"margin-left: auto; margin-right: auto\">\n        <span class=\"label\">min angle:</span>\n        <input type=\"number\" id=\"min_angle\" max=\"359\" min=\"-90\" \n         step=\"1\" value=\"-20\" class=\"em_input\">\n        <br/>\n        <span class=\"label\">max angle:</span>\n        <input type=\"number\" id=\"max_angle\" max=\"360\" min=\"0\" step=\"1\" \n         value=\"20\" class=\"em_input\">\n        <br/>\n    </div>\n    <span class=\"label\">max particles:</span>\n    <input type=\"number\" id=\"max_particles\" max=\"10000\" min=\"10\" \n            step=\"10\" value=\"100\" class=\"em_input\">    \n    <br/>\n    <span class=\"label\">life time:</span>\n    <input type=\"number\" id=\"lifetime\" max=\"10000\" min=\"10\"\n            step=\"10\" value=\"1000\" class=\"em_input\"><br/>\n    <span class=\"label\">acceleration:</span>\n\n    <input type=\"number\" id=\"acceleration\" max=\"2.0\" min=\"0.0\"\n                        step=\"0.1\" value=\"1.0\" class=\"em_input\"><br/>\n    <label class=\"ccontainer\"><span class=\"label\">alpha fade:</span>\n        <input type=\"checkbox\" checked=\"checked\">\n        <span class=\"checkmark\"></span>\n    </label>\n    <br/>\n    <span class=\"label\">emission rate:</span>\n    <input type=\"number\" id=\"emission_rate\" max=\"100\" min=\"1\" step=\"1\" \n     value=\"20\" class=\"em_input\">\n    <br/>\n\n    <span class=\"label\">x position:</span>\n    <input type=\"number\" id=\"x_pos\" max=\"800\" min=\"0\" step=\"1\" \n     value=\"400\" class=\"em_input\">\n    <br/>\n    <span class=\"label\">y position:</span>\n    <input type=\"number\" id=\"y_pos\" max=\"600\" min=\"0\" step=\"1\" \n     value=\"300\" class=\"em_input\">\n    <br/>\n    <span class=\"label\">radius:</span>\n    <input type=\"number\" id=\"radius\" max=\"500\" min=\"0\" step=\"1\" \n     value=\"20\" class=\"em_input\">\n    <br/>\n\n    <span class=\"label\">min start vel:</span>\n    <input type=\"number\" id=\"min_starting_vel\" max=\"9.9\" min=\"0.0\"\n                        step=\"0.1\" value=\"1.0\" class=\"em_input\"><br/>\n    <span class=\"label\">max start vel:</span>\n    <input type=\"number\" id=\"max_starting_vel\" max=\"10.0\" min=\"0.0\"\n                        step=\"0.1\" value=\"2.0\" class=\"em_input\"><br/>\n\n    <div class=\"input_box\">\n        <button id=\"update_btn\" class=\"em_button\" \n         onclick=\"UpdateClick()\">Update Emitter</button>\n    </div>\n </div>\n```", "```cpp\n<script type='text/javascript'>\n var canvas = null;\n var ctx = null;\n var ready = false;\n    var image_added = false;\n    function ShowFileInput() {\n        document.getElementById(\"file_input_label\").style.display = \n        \"block\";\n        ready = true;\n    }\n    function UpdateClick() {\n        if( ready == false || image_added == false ) { return; }\n        var max_particles = Number(document.getElementById         \n                             (\"max_particles\").value);\n        var min_angle = Number(document.getElementById         \n                            (\"min_angle\").value) / 180 * Math.PI;\n        var max_angle = Number(document.getElementById             \n                              (\"max_angle\").value) / 180 * Math.PI\n        var particle_lifetime = Number(document.getElementById         \n                                    (\"lifetime\").value);\n        var acceleration = Number(document.getElementById        \n                               (\"acceleration\").value);\n        var alpha_fade = Boolean(document.getElementById         \n                               (\"alpha_fade\").checked);\n        var emission_rate = Number(document.getElementById             \n                                (\"emission_rate\").value);\n        var x_pos = Number(document.getElementById(\"x_pos\").value);\n        var y_pos = Number(document.getElementById(\"y_pos\").value);\n        var radius = Number(document.getElementById(\"radius\").value);\n        var min_starting_velocity = Number(document.getElementById                                                                                                                                                         \n                                    (\"min_starting_vel\").value);\n        var max_starting_velocity = Number(document.getElementById                                                                                                                                                         \n                                    (\"max_starting_vel\").value);\n        Module.ccall('update_emitter', 'undefined',             \n        [\"number\",\"number\",\"number\",\"number\", \"number\",\"bool\", \n        \"number\",\"number\",\"number\",\"number\",\"number\",\"number\"],\n\n        [max_particles,min_angle,max_angle,particle_lifetime,\n         acceleration,alpha_fade,min_starting_velocity,\n         max_starting_velocity,emission_rate,x_pos ,y_pos,radius]);\n        }\n        var Module = {\n            preRun: [],\n            postRun: [ShowFileInput],\n            print: (function() {\n                var element = document.getElementById('output');\n                if (element) element.value = '';\n                return function(text) {\n                    if (arguments.length > 1) text =   \n                    Array.prototype.slice.call(arguments).join(' ');\n                    console.log(text);\n                    if (element) {\n                        element.value += text + \"\\n\";\n                        element.scrollTop = element.scrollHeight;\n                    }\n                }; })(),\n        printErr: function(text) {\n            if (arguments.length > 1) text = \n            Array.prototype.slice.call(arguments).join(' ');\n            if (0) { dump(text + '\\n'); } \n            else { console.error(text); }\n        },\n        canvas: (function() {\n            var canvas = document.getElementById('canvas');\n            canvas.addEventListener(\"webglcontextlost\", function(e) {\n                alert('WebGL context lost. You will need to reload the \n                       page.');\n                e.preventDefault();},false);\n            return canvas; })(),\n        setStatus: function(text) {\n            if (!Module.setStatus.last) Module.setStatus.last={ time: \n                Date.now(), text: '' };\n            if (text === Module.setStatus.last.text) return;\n            var m = text.match(/([^(]+)\\((\\d+(\\.\\d+)?)\\/(\\d+)\\)/);\n            var now = Date.now();\n            if (m && now - Module.setStatus.last.time < 30) return;\n            Module.setStatus.last.time = now;\n            Module.setStatus.last.text = text;\n            if(m) { text = m[1]; }\n            console.log(\"status: \" + text); },\n        totalDependencies: 0,\n        monitorRunDependencies: function(left) {\n            this.totalDependencies = Math.max(this.totalDependencies, \n                                              left);\n            Module.setStatus(left?'Preparing... (' + \n                            (this.totalDependencies-left) +\n                '/' + this.totalDependencies + ')' : \n                'All downloads complete.');\n        } };\n    Module.setStatus('Downloading...');\n    window.onerror = function() {\n        Module.setStatus('Exception thrown, see JavaScript console');\n        Module.setStatus = function(text) {\n            if (text) Module.printErr('[post-exception status] ' + \n                                        text);\n        }; };\n    function handleFiles(files) {\n      var file_count = 0;\n      for (var i = 0; i < files.length; i++) {\n          if (files[i].type.match(/image.png/)) {\n              var file = files[i];\n              var file_name = file.name;\n              var fr = new FileReader();\n              fr.onload = function(file) {\n                var data = new Uint8Array(fr.result);\n                Module.FS_createDataFile('/', file_name, data, \n                                          true, true, true);\n                var max_particles = Number(document.getElementById                                         \n                                    (\"max_particles\").value);\n                var min_angle = Number(document.getElementById                                       \n                                (\"min_angle\").value) / 180 * \n                                Math.PI;\n                var max_angle = Number(document.getElementById                                     \n                                (\"max_angle\").value) / 180 * \n                                 Math.PI\n                var particle_lifetime = Number(document.getElementById                                                \n                                        (\"lifetime\").value);\n                var acceleration = Number(document.getElementById \n                                    (\"acceleration\").value);\n                var alpha_fade = Boolean(document.getElementById \n                                 (\"alpha_fade\").checked);\n                var emission_rate = Number(document.getElementById \n                                    (\"emission_rate\").value);\n                var x_pos = Number(document.getElementById \n                            (\"x_pos\").value);\n                var y_pos = Number(document.getElementById \n                            (\"y_pos\").value);\n                var radius = Number(document.getElementById                                          \n                            (\"radius\").value);\n                var min_starting_velocity = Number(document.getElementById\n                                            (\"min_starting_vel\").value);\n                var max_starting_velocity = Number(document.getElementById                                             \n                                            (\"max_starting_vel\").value);\n                Module.ccall('add_emitter','undefined', \n                [\"string\",\"number\", \"number\", \"number\", \"number\", \n                 \"number\", \"bool\",  \"number\", \"number\",\"number\", \n                 \"number\", \"number\", \"number\"],\n                [file_name, max_particles, min_angle, max_angle, \n                particle_lifetime, acceleration, alpha_fade, \n                min_starting_velocity, max_starting_velocity, \n                emission_rate, x_pos, y_pos, radius]);\n                image_added = true; };\n              fr.readAsArrayBuffer(files[i]);\n} } }\n</script>\n```", "```cpp\nfunction ShowFileInput() {\n    document.getElementById(\"file_input_label\").style.display = \"block\";\n    ready = true;\n}\n```", "```cpp\nfunction handleFiles(files) {\n    var file_count = 0;\n    for (var i = 0; i < files.length; i++) {\n        if (files[i].type.match(/image.png/)) {\n            var file = files[i];\n            var file_name = file.name;\n            var fr = new FileReader();\n            fr.onload = function (file) {\n                var data = new Uint8Array(fr.result);\n                Module.FS_createDataFile('/', file_name, data, true, \n                                          true, true);\n                var max_particles = Number(document.getElementById( \n                                    \"max_particles\").value);\n                var min_angle = Number(document.getElementById         \n                                (\"min_angle\").value) / 180 * Math.PI;\n                var max_angle = Number(document.getElementById         \n                                (\"max_angle\").value) / 180 * Math.PI\n                var particle_lifetime = Number(document.getElementById                                         \n                                        (\"lifetime\").value);\n                var acceleration = Number(document.getElementById \n                                   (\"acceleration\").value);\n                var alpha_fade = Boolean(document.getElementById \n                                 (\"alpha_fade\").checked);\n                var emission_rate = Number(document.getElementById \n                                    (\"emission_rate\").value);\n                var x_pos = Number(document.getElementById \n                            (\"x_pos\").value);\n                var y_pos = Number(document.getElementById    \n                            (\"y_pos\").value);\n                var radius = Number(document.getElementById \n                             (\"radius\").value);\n              var min_starting_velocity = Number(document.getElementById \n                                         (\"min_starting_vel\").value);\n              var max_starting_velocity = Number(document.getElementById                                                        \n                                          (\"max_starting_vel\").value);\n                Module.ccall('add_emitter', 'undefined', [\"string\", \n                \"number\", \"number\", \"number\",\n                \"number\", \"number\", \"bool\",\n                \"number\", \"number\",\n                \"number\", \"number\", \"number\", \"number\"],\n                [file_name, max_particles,\n                min_angle, max_angle,\n                particle_lifetime, acceleration, alpha_fade,                                                      \n                min_starting_velocity, max_starting_velocity,\n                emission_rate, x_pos, y_pos, radius]);\n                image_added = true;\n            };\n            fr.readAsArrayBuffer(files[i]);\n        }\n    }\n}\n```", "```cpp\nvar max_particles = Number(document.getElementById    \n                    (\"max_particles\").value);\nvar min_angle = Number(document.getElementById(\"min_angle\").value) / \n                180 * Math.PI;\nvar max_angle = Number(document.getElementById(\"max_angle\").value) / \n                180 * Math.PI\nvar particle_lifetime = Number(document.getElementById     \n                        (\"lifetime\").value);\nvar acceleration = Number(document.getElementById         \n                   (\"acceleration\").value);\nvar alpha_fade = Boolean(document.getElementById \n                 (\"alpha_fade\").checked);\nvar emission_rate = Number(document.getElementById \n                    (\"emission_rate\").value);\nvar x_pos = Number(document.getElementById(\"x_pos\").value);\nvar y_pos = Number(document.getElementById(\"y_pos\").value);\nvar radius = Number(document.getElementById(\"radius\").value);\nvar min_starting_velocity = Number(document.getElementById \n                            (\"min_starting_vel\").value);\nvar max_starting_velocity = Number(document.getElementById   \n                            (\"max_starting_vel\").value);\n```", "```cpp\nModule.ccall('add_emitter', 'undefined', [\"string\", \"number\", \"number\", \n             \"number\",\n             \"number\", \"number\", \"bool\",\n             \"number\", \"number\",\n             \"number\", \"number\", \"number\", \"number\"],\n             [file_name, max_particles, min_angle, max_angle,\n             particle_lifetime, acceleration, alpha_fade,\n             min_starting_velocity, max_starting_velocity,\n             emission_rate, x_pos, y_pos, radius]);\n```", "```cpp\nfunction UpdateClick() {\n    if( ready == false || image_added == false ) {\n        return;\n    }\n    var max_particles = Number(document.getElementById    \n                        (\"max_particles\").value);\n    var min_angle = Number(document.getElementById(\"min_angle\").value) \n                    / 180 * Math.PI;\n    var max_angle = Number(document.getElementById(\"max_angle\").value) \n                    / 180 * Math.PI\n    var particle_lifetime = Number(document.getElementById \n                            (\"lifetime\").value);\n    var acceleration = Number(document.getElementById     \n                       (\"acceleration\").value);\n    var alpha_fade = Boolean(document.getElementById \n                     (\"alpha_fade\").checked);\n    var emission_rate = Number(document.getElementById \n                        (\"emission_rate\").value);\n    var x_pos = Number(document.getElementById(\"x_pos\").value);\n    var y_pos = Number(document.getElementById(\"y_pos\").value);\n    var radius = Number(document.getElementById(\"radius\").value);\n    var min_starting_velocity = Number(document.getElementById     \n                                (\"min_starting_vel\").value);\n    var max_starting_velocity = Number(document.getElementById \n                                (\"max_starting_vel\").value);\n\n    Module.ccall('update_emitter', 'undefined', [\"number\", \"number\", \n                 \"number\",\n                 \"number\", \"number\", \"bool\",\n                 \"number\", \"number\",\n                 \"number\", \"number\", \"number\", \"number\"],\n                 [max_particles, min_angle, max_angle,\n                 particle_lifetime, acceleration, alpha_fade,\n                 min_starting_velocity, max_starting_velocity,\n                 emission_rate, x_pos, y_pos, radius]);\n}\n```", "```cpp\nif( ready == false || image_added == false ) {\n    return;\n}\n```", "```cpp\nvar max_particles = Number(document.getElementById             \n                    (\"max_particles\").value);\nvar min_angle = Number(document.getElementById(\"min_angle\").value) / \n                180 * Math.PI;\nvar max_angle = Number(document.getElementById(\"max_angle\").value) / \n                180 * Math.PI\nvar particle_lifetime = Number(document.getElementById     \n                        (\"lifetime\").value);\nvar acceleration = Number(document.getElementById         \n                   (\"acceleration\").value); \nvar alpha_fade = Boolean(document.getElementById \n                 (\"alpha_fade\").checked);\nvar emission_rate = Number(document.getElementById     \n                    (\"emission_rate\").value);\nvar x_pos = Number(document.getElementById(\"x_pos\").value);\nvar y_pos = Number(document.getElementById(\"y_pos\").value);\nvar radius = Number(document.getElementById(\"radius\").value);\nvar min_starting_velocity = Number(document.getElementById \n                            (\"min_starting_vel\").value);\nvar max_starting_velocity = Number(document.getElementById \n                            (\"max_starting_vel\").value);\n```", "```cpp\nModule.ccall('update_emitter', 'undefined', [\"number\", \"number\", \n             \"number\",\n             \"number\", \"number\", \"bool\",\n             \"number\", \"number\",\n             \"number\", \"number\", \"number\", \"number\"],\n             [max_particles, min_angle, max_angle,\n             particle_lifetime, acceleration, alpha_fade,\n             min_starting_velocity, max_starting_velocity,\n             emission_rate, x_pos, y_pos, radius]);\n\n```", "```cpp\nclass Point {\n    public:\n        float x;\n        float y;\n        Point();\n        Point( float X, float Y );\n        Point operator=(const Point& p);\n        void Rotate( float radians );\n};\n```", "```cpp\nvoid Point::Rotate( float radians ) {\n    float sine = sin(radians);\n    float cosine = cos(radians);\n    float rx = x * cosine - y * sine;\n    float ry = x * sine + y * cosine;\n    x = rx;\n    y = ry;\n}\n```", "```cpp\nclass Particle {\n    public:\n        bool m_active;\n        bool m_alpha_fade;\n        SDL_Texture *m_sprite_texture;\n        int m_ttl;\n        Uint32 m_life_time;\n        float m_acceleration;\n        float m_alpha;\n        Point m_position;\n        Point m_velocity;\n        SDL_Rect m_dest = {.x = 0, .y = 0, .w = 0, .h = 0 };\n        Particle( SDL_Texture *sprite, Uint32 life_time, float \n        acceleration, bool alpha_fade, int width, int height );\n        void Update( Uint32 life_time, float acceleration,\n                    bool alpha_fade );\n        void Spawn( float x, float y, float velocity_x, float \n        velocity_y, float alpha );\n        void Move();\n        void Render();\n};\n```", "```cpp\nParticle::Particle( SDL_Texture *sprite_texture, Uint32 life_time, \n                    float acceleration, bool alpha_fade, \n                    int width, int height ) {\n    m_sprite_texture = sprite_texture;\n    m_life_time = life_time;\n    m_acceleration = acceleration;\n    m_alpha_fade = alpha_fade;\n    m_dest.w = width;\n    m_dest.h = height;\n    m_active = false;\n}\nvoid Particle::Update( Uint32 life_time, float acceleration, bool \n                       alpha_fade ) {\n    m_life_time = life_time;\n    m_acceleration = acceleration;\n    m_alpha_fade = alpha_fade;\n    m_active = false;\n}\n```", "```cpp\nvoid Particle::Spawn( float x, float y, float velocity_x, \n                      float velocity_y, float alpha ) {\n    m_position.x = x;\n    m_dest.x = (int)m_position.x;\n    m_position.y = y;\n    m_dest.y = (int)m_position.y;\n    m_velocity.x = velocity_x;\n    m_velocity.y = velocity_y;\n    m_alpha = alpha;\n    m_active = true;\n    m_ttl = m_life_time;\n}\n```", "```cpp\nvoid Particle::Move() { \n    float acc_adjusted = 1.0f;\n    if( m_acceleration < 1.0f ) {\n        acc_adjusted = 1.0f - m_acceleration;\n        acc_adjusted *= delta_time;\n        acc_adjusted = 1.0f - acc_adjusted;\n    }\n    else if( m_acceleration > 1.0f ) {\n        acc_adjusted = m_acceleration - 1.0f;\n        acc_adjusted *= delta_time;\n        acc_adjusted += 1.0f;\n    }\n    m_velocity.x *= acc_adjusted;\n    m_velocity.y *= acc_adjusted;\n    m_position.x += m_velocity.x;\n    m_position.y += m_velocity.y;\n    m_dest.x = (int)m_position.x;\n    m_dest.y = (int)m_position.y;\n\n    if( m_alpha_fade == true ) {\n        m_alpha = 255.0 * (float)m_ttl / (float)m_life_time;\n        if( m_alpha < 0 ) {\n            m_alpha = 0;\n        }\n    }\n    else {\n        m_alpha = 255.0;\n    }\n    m_ttl -= diff_time;\n    if( m_ttl <= 0 ) {\n        m_active = false;\n    }\n}\n```", "```cpp\nvoid Particle::Render() {\n    SDL_SetTextureAlphaMod(m_sprite_texture, (Uint8)m_alpha );\n    SDL_RenderCopy( renderer, m_sprite_texture, NULL, &m_dest );\n}\n```", "```cpp\nclass Emitter {\n    public:\n        SDL_Texture *m_sprite_texture;\n        std::vector<Particle*> m_particle_pool;\n        int m_sprite_width;\n        int m_sprite_height;\n        Uint32 m_max_particles;\n        Uint32 m_emission_rate;\n        Uint32 m_emission_time_ms;\n        int m_next_emission;\n        float m_max_angle;\n        float m_min_angle;\n        float m_radius;\n        float m_min_starting_velocity;\n        float m_max_starting_velocity;\n        Point m_position;\n\n        Emitter(char* sprite_file, int max_particles, float min_angle, \n                float max_angle,\n                Uint32 particle_lifetime, float acceleration, bool \n                alpha_fade,\n                float min_starting_velocity, float \n                max_starting_velocity,\n                Uint32 emission_rate, int x_pos, int y_pos, float \n                radius );\n        void Update(int max_particles, float min_angle, float \n        max_angle,\n                    Uint32 particle_lifetime, float acceleration, bool \n                    alpha_fade,\n                    float min_starting_velocity, float \n                    max_starting_velocity,\n                    Uint32 emission_rate, int x_pos, int y_pos, float \n                    radius );\n        void Move();\n        Particle* GetFreeParticle();\n};\n```", "```cpp\nEmitter::Emitter(char* sprite_file, int max_particles, float min_angle, \nfloat max_angle, Uint32 particle_lifetime, float acceleration, bool alpha_fade, float min_starting_velocity, float max_starting_velocity,\nUint32 emission_rate, int x_pos, int y_pos, float radius ) {\n\n    if( min_starting_velocity > max_starting_velocity ) {\n        m_min_starting_velocity = max_starting_velocity;\n        m_max_starting_velocity = min_starting_velocity;\n    }\n    else {\n        m_min_starting_velocity = min_starting_velocity;\n        m_max_starting_velocity = max_starting_velocity;\n    }\n    SDL_Surface *temp_surface = IMG_Load( sprite_file );\n\n    if( !temp_surface ) {\n        printf(\"failed to load image: %s\\n\", IMG_GetError() );\n        return;\n    }\n    m_sprite_texture = SDL_CreateTextureFromSurface( renderer, \n    temp_surface );\n    SDL_FreeSurface( temp_surface );\n    SDL_QueryTexture( m_sprite_texture,\n                     NULL, NULL, &m_sprite_width, &m_sprite_height );\n    m_max_particles = max_particles;\n\n    for( int i = 0; i < m_max_particles; i++ ) {\n        m_particle_pool.push_back(\n            new Particle( m_sprite_texture, particle_lifetime, \n            acceleration, alpha_fade, m_sprite_width, m_sprite_height )\n        );\n    }\n    m_max_angle = max_angle;\n    m_min_angle = min_angle;\n    m_radius = radius;\n    m_position.x = (float)x_pos;\n    m_position.y = (float)y_pos;\n    m_emission_rate = emission_rate;\n    m_emission_time_ms = 1000 / m_emission_rate;\n    m_next_emission = 0;\n}\n\nvoid Emitter::Update(int max_particles, float min_angle, float \n                     max_angle, Uint32 particle_lifetime, float \n                     acceleration, bool alpha_fade,\n                     float min_starting_velocity, float \n                     max_starting_velocity, Uint32 emission_rate, int \n                     x_pos, int y_pos, float radius ) {\n    if( min_starting_velocity > max_starting_velocity ) {\n        m_min_starting_velocity = max_starting_velocity;\n        m_max_starting_velocity = min_starting_velocity;\n    }\n    else {\n        m_min_starting_velocity = min_starting_velocity;\n        m_max_starting_velocity = max_starting_velocity;\n    }\n    m_max_particles = max_particles;\n    m_min_angle = min_angle;\n    m_max_angle = max_angle;\n    m_emission_rate = emission_rate;\n    m_position.x = (float)x_pos;\n    m_position.y = (float)y_pos;\n    m_radius = radius;\n\n    if( m_particle_pool.size() > m_max_particles ) {\n        m_particle_pool.resize( m_max_particles );\n    }\n    else if( m_max_particles > m_particle_pool.size() ) {\n        while( m_max_particles > m_particle_pool.size() ) {\n            m_particle_pool.push_back(\n                new Particle( m_sprite_texture, particle_lifetime, \n                acceleration, alpha_fade, m_sprite_width, \n                m_sprite_height )\n            );\n        }\n    }\n\n    Particle* particle;\n    std::vector<Particle*>::iterator it;\n\n    for( it = m_particle_pool.begin(); it != m_particle_pool.end(); \n         it++ ) {\n        particle = *it;\n        particle->Update( particle_lifetime, acceleration, alpha_fade );\n    }\n}\n```", "```cpp\nParticle* Emitter::GetFreeParticle() {\n    Particle* particle;\n    std::vector<Particle*>::iterator it;\n    for( it = m_particle_pool.begin(); it != m_particle_pool.end(); \n         it++ ) {\n        particle = *it;\n        if( particle->m_active == false ) {\n            return particle;\n        }\n    }\n    return NULL;\n}\n\nvoid Emitter::Move() {\n    Particle* particle;\n    std::vector<Particle*>::iterator it;\n    static int count = 0;\n    m_next_emission -= diff_time;\n    if( m_next_emission <= 0 ) {\n        m_next_emission = m_emission_time_ms;\n        particle = GetFreeParticle();\n        if( particle != NULL ) {\n            float rand_vel = (rand() %\n                (int)((m_max_starting_velocity - \n                       m_min_starting_velocity) * 1000)) / 1000.0f;\n            Point spawn_point;\n            spawn_point.x = (float)(rand() % (int)(m_radius * 1000)) / \n            1000.0;\n            Point velocity_point;\n            velocity_point.x = (float)(rand() %\n                (int)((m_max_starting_velocity + rand_vel) * 1000)) / \n                 1000.0;\n            int angle_int = (int)((m_max_angle - m_min_angle) * \n            1000.0);\n            float add_angle = (float)(rand() % angle_int) /1000.0f;\n            float angle = m_min_angle + add_angle;\n            velocity_point.Rotate(angle);\n            angle = (float)(rand() % 62832) / 10000.0;\n            spawn_point.Rotate( angle );\n            spawn_point.x += m_position.x;\n            spawn_point.y += m_position.y;\n            particle->Spawn(spawn_point.x, spawn_point.y, \n            velocity_point.x, velocity_point.y, 255.0f );\n        }\n    }\n    for( it = m_particle_pool.begin(); it != m_particle_pool.end(); \n         it++ ) {\n        particle = *it;\n        if( particle->m_active ) {\n            particle->Move();\n            particle->Render();\n        }\n    }\n}\n```", "```cpp\n#include \"game.hpp\"\n#include <emscripten/bind.h>\nSDL_Window *window;\nSDL_Renderer *renderer;\nchar* fileName;\nEmitter* emitter = NULL;\nUint32 last_time = 0;\nUint32 current_time = 0;\nUint32 diff_time = 0;\nfloat delta_time = 0.0f;\nextern \"C\"\n    EMSCRIPTEN_KEEPALIVE\n    void add_emitter(char* file_name, int max_particles, float \n    min_angle, float max_angle, Uint32 particle_lifetime, float \n    acceleration, bool alpha_fade, float min_starting_velocity, float \n    kmax_starting_velocity, Uint32 emission_rate, float x_pos, float \n    y_pos, float radius) {\n        if( emitter != NULL ) {\n            delete emitter;\n        }\n        emitter = new Emitter(file_name, max_particles, min_angle, \n                              max_angle, particle_lifetime, \n                              acceleration, alpha_fade,\n                              min_starting_velocity, \n                              max_starting_velocity,\n                              emission_rate, x_pos, y_pos, radius );\n        }\nextern \"C\"\n    EMSCRIPTEN_KEEPALIVE\n    void update_emitter(int max_particles, float min_angle, float   \n    max_angle, Uint32 particle_lifetime, float acceleration, bool   \n    alpha_fade, float min_starting_velocity, float \n    max_starting_velocity, Uint32 emission_rate, float x_pos, float \n    y_pos, float radius ) {\n        if( emitter == NULL ) {\n            return;\n        }\n        emitter->Update(max_particles, min_angle, max_angle,\n                        particle_lifetime, acceleration, alpha_fade,\n                        min_starting_velocity, max_starting_velocity,\n                        emission_rate, x_pos, y_pos, radius );\n    }\n    void show_emission() {\n        current_time = SDL_GetTicks();\n        delta_time = (double)(current_time - last_time) / 1000.0;\n        diff_time = current_time - last_time;\n        last_time = current_time;\n        if( emitter == NULL ) {\n            return;\n        }\n        SDL_SetRenderDrawColor( renderer, 0, 0, 0, 255 );\n        SDL_RenderClear( renderer );\n        emitter->Move();\n        SDL_RenderPresent( renderer );\n    }\n    int main() {\n        printf(\"Enter Main\\n\");\n        SDL_Init( SDL_INIT_VIDEO );\n        int return_val = SDL_CreateWindowAndRenderer( 800, 600, 0, \n        &window, &renderer );\n        SDL_EventState(SDL_TEXTINPUT, SDL_DISABLE);\n        SDL_EventState(SDL_KEYDOWN, SDL_DISABLE);\n        SDL_EventState(SDL_KEYUP, SDL_DISABLE);\n        if( return_val != 0 ) {\n            printf(\"Error creating renderer %d: %s\\n\", return_val, \n            IMG_GetError() );\n            return 0;\n        }\n        last_time = SDL_GetTicks();\n        emscripten_set_main_loop(show_emission, 0, 0);\n        printf(\"Exit Main\\n\");\n        return 1;\n    }\n```", "```cpp\nSDL_Window *window;\nSDL_Renderer *renderer;\n```", "```cpp\nEmitter* emitter = NULL;\n```", "```cpp\nUint32 last_time = 0;\nUint32 current_time = 0;\nUint32 diff_time = 0;\nfloat delta_time = 0.0f;\n```", "```cpp\nextern \"C\"\n    EMSCRIPTEN_KEEPALIVE\n    void add_emitter(char* file_name, int max_particles, float \n    min_angle, float max_angle, Uint32 particle_lifetime, float   \n    acceleration, bool alpha_fade, float min_starting_velocity, float \n    max_starting_velocity, Uint32 emission_rate, float x_pos, float \n    y_pos, float radius) {\n        if( emitter != NULL ) {\n            delete emitter;\n        }\n        emitter = new Emitter(file_name, max_particles, min_angle, \n        max_angle, particle_lifetime, acceleration, alpha_fade,\n        min_starting_velocity, max_starting_velocity,\n        emission_rate, x_pos, y_pos, radius );\n    }\n\n```", "```cpp\nextern \"C\"\n    EMSCRIPTEN_KEEPALIVE\n```", "```cpp\nextern \"C\"\n    EMSCRIPTEN_KEEPALIVE\n    void update_emitter(int max_particles, float min_angle, float   \n    max_angle, Uint32 particle_lifetime, float acceleration, bool \n    alpha_fade, float min_starting_velocity, float \n    max_starting_velocity, Uint32 emission_rate, float x_pos, float \n    y_pos, float radius ) {\n        if( emitter == NULL ) {\n            return;\n        }\n        emitter->Update(max_particles, min_angle, max_angle,\n                        particle_lifetime, acceleration, alpha_fade,\n                        min_starting_velocity, max_starting_velocity,\n                        emission_rate, x_pos, y_pos, radius );\n    }\n```", "```cpp\nvoid show_emission() {\n    current_time = SDL_GetTicks();\n    delta_time = (double)(current_time - last_time) / 1000.0;\n    diff_time = current_time - last_time;\n    last_time = current_time;\n\n    if( emitter == NULL ) {\n        return;\n    }\n    SDL_SetRenderDrawColor( renderer, 0, 0, 0, 255 );\n    SDL_RenderClear( renderer );\n    emitter->Move();\n    SDL_RenderPresent( renderer );\n}\n```", "```cpp\ncurrent_time = SDL_GetTicks();\ndelta_time = (double)(current_time - last_time) / 1000.0;\ndiff_time = current_time - last_time;\nlast_time = current_time;\n```", "```cpp\nif( emitter == NULL ) {\n    return;\n}\n```", "```cpp\nSDL_SetRenderDrawColor( renderer, 0, 0, 0, 255 );\nSDL_RenderClear( renderer );\n```", "```cpp\nemitter->Move();\nSDL_RenderPresent( renderer );\n```", "```cpp\nint main() {\n    SDL_Init( SDL_INIT_VIDEO );\n    int return_val = SDL_CreateWindowAndRenderer( 800, 600, 0, &window, \n                                                  &renderer );\n    if( return_val != 0 ) {\n        printf(\"Error creating renderer %d: %s\\n\", return_val, \n                IMG_GetError() );\n        return 0;\n    }\n    SDL_EventState(SDL_TEXTINPUT, SDL_DISABLE);\n    SDL_EventState(SDL_KEYDOWN, SDL_DISABLE);\n    SDL_EventState(SDL_KEYUP, SDL_DISABLE);\n    last_time = SDL_GetTicks();\n    emscripten_set_main_loop(show_emission, 0, 0);\n    return 1;\n}\n```", "```cpp\nSDL_Init( SDL_INIT_VIDEO );\nint return_val = SDL_CreateWindowAndRenderer( 800, 600, 0, &window, \n                                              &renderer );\n```", "```cpp\nSDL_EventState(SDL_TEXTINPUT, SDL_DISABLE);\nSDL_EventState(SDL_KEYDOWN, SDL_DISABLE);\nSDL_EventState(SDL_KEYUP, SDL_DISABLE);\n```", "```cpp\nlast_time = SDL_GetTicks();\n```", "```cpp\nemscripten_set_main_loop(show_emission, 0, 0);\n```", "```cpp\nem++ emitter.cpp particle.cpp point.cpp basic_particle.cpp -o particle.html -std=c++17 --shell-file basic_particle_shell.html -s NO_EXIT_RUNTIME=1 -s USE_WEBGL2=1 -s USE_SDL=2 -s USE_SDL_IMAGE=2 -s SDL2_IMAGE_FORMATS=[\"png\"] -s NO_EXIT_RUNTIME=1 -s EXPORTED_FUNCTIONS=\"['_add_emitter', '_update_emitter', '_main']\" -s EXTRA_EXPORTED_RUNTIME_METHODS=\"['cwrap', 'ccall']\" -s FORCE_FILESYSTEM=1\n```"]