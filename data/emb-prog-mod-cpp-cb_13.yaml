- en: Guidelines for Real-Time Systems
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实时系统的指南
- en: 'Real-time systems are a class of embedded systems where the time of reaction
    is critical. The consequences of not reacting in time vary between different applications.
    Based on severity, real-time systems are classified as follows:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 实时系统是时间反应至关重要的嵌入式系统的一类。未能及时反应的后果在不同的应用程序之间有所不同。根据严重程度，实时系统被分类如下：
- en: '**Hard real time**: Missing a deadline is not acceptable and considered a system
    failure. These are usually mission-critical systems in airplanes, cars, and power
    plants.'
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**硬实时**：错过截止日期是不可接受的，被视为系统故障。这些通常是飞机、汽车和发电厂中的关键任务系统。'
- en: '**Firm real time**: Missing a deadline is acceptable in rare cases. The usefulness
    of the result is zero after the deadline. Think about a live streaming service.
    A video frame delivered too late can only be discarded. This is tolerable provided
    it happens infrequently.'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**严格实时**：在极少数情况下错过截止日期是可以接受的。截止日期后结果的有用性为零。想想一个直播流服务。交付太晚的视频帧只能被丢弃。只要这种情况不经常发生，这是可以容忍的。'
- en: '**Soft real time**: Missing a deadline is acceptable. The usefulness of results
    degrades after the deadline, causing degradation of the overall quality, and should
    be avoided. Such an example is capturing and synchronizing data from multiple
    sensors.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**软实时**：错过截止日期是可以接受的。截止日期后结果的有用性会下降，导致整体质量的下降，应该避免。一个例子是从多个传感器捕获和同步数据。'
- en: Real-time systems are not necessarily required to be super fast. What they need
    is predictable reaction time. If a system can normally respond to an event within
    10 milliseconds, but it often takes much longer, it is not a real-time system.
    If a system responds within 1 second guaranteed, this constitutes hard real time.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 实时系统不一定需要非常快。它们需要的是可预测的反应时间。如果一个系统通常可以在10毫秒内响应事件，但经常需要更长时间，那么它就不是一个实时系统。如果一个系统能够在1秒内保证响应，那就构成了硬实时。
- en: Determinism and predictability are the main traits of real-time systems. In
    this chapter, we will explore potential sources of unpredictable behavior and
    ways to mitigate them.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 确定性和可预测性是实时系统的主要特征。在本章中，我们将探讨不可预测行为的潜在来源以及减轻它们的方法。
- en: 'This chapter covers the following topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖以下主题：
- en: Using real-time schedulers in Linux
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Linux中使用实时调度器
- en: Using statically allocated memory
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用静态分配的内存
- en: Avoiding exceptions for error handling
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免异常处理错误
- en: Exploring real-time operating systems
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索实时操作系统
- en: The recipes in this chapter will help you better understand the specifics of
    real-time systems and learn some best practices of software development for this
    kind of embedded system.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的食谱将帮助您更好地了解实时系统的具体情况，并学习一些针对这种嵌入式系统的软件开发的最佳实践。
- en: Using real-time schedulers in Linux
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Linux中使用实时调度器
- en: Linux is a general-purpose operating system that is commonly used in various
    embedded devices because of its versatility. It can be tailored to the particular
    hardware and is free.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Linux是一个通用操作系统，在各种嵌入式设备中通常被使用，因为它的多功能性。它可以根据特定的硬件进行定制，并且是免费的。
- en: Linux is not a real-time operating system and is not the best choice for implementing
    a hard real-time system. However, it can be used efficiently to build a soft real-time
    system, since it provides a real-time scheduler for time-critical applications.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Linux不是一个实时操作系统，也不是实现硬实时系统的最佳选择。然而，它可以有效地用于构建软实时系统，因为它为时间关键的应用程序提供了实时调度器。
- en: In this recipe, we will learn how to use the real-time scheduler in Linux in
    our application.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何在我们的应用程序中在Linux中使用实时调度器。
- en: How to do it...
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We are going to create an application that uses the real-time scheduler:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个使用实时调度器的应用程序：
- en: In your working directory, `~/test`, create a subdirectory called `realtime`.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的工作目录`~/test`中，创建一个名为`realtime`的子目录。
- en: Use your favorite text editor to create a `realtime.cpp` file in the `realtime` subdirectory.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的文本编辑器在`realtime`子目录中创建一个`realtime.cpp`文件。
- en: 'Add all the necessary includes and namespaces:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加所有必要的包含和命名空间：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, add a function that configures a thread to use the real-time scheduler:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，添加一个配置线程使用实时调度器的函数：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, we define a thread function that we want to run with normal priority:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们定义一个希望以正常优先级运行的线程函数：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This is followed by a real-time thread function and a `main` function that
    starts both threads:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来是一个实时线程函数和一个启动这两个线程的`main`函数：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Finally, we create a `CMakeLists.txt` file containing build rules for our program:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们创建一个包含程序构建规则的`CMakeLists.txt`文件：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can now build and run the application.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您可以构建和运行应用程序了。
- en: How it works...
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Linux has several scheduling policies that it applies to application processes
    and threads. `SCHED_OTHER` is the default Linux time-sharing policy. It is intended
    for all threads and does not provide real-time mechanisms.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Linux有几种调度策略，它应用于应用程序进程和线程。`SCHED_OTHER`是默认的Linux分时策略。它适用于所有线程，不提供实时机制。
- en: In our application, we use another policy, `SCHED_FIFO`. This is a simple scheduling
    algorithm. All threads that use this scheduler can only be preempted by a thread
    with a higher priority. If the thread goes to sleep, it is placed at the back
    of the queue of those threads with the same priority.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，我们使用另一个策略`SCHED_FIFO`。这是一个简单的调度算法。使用这个调度器的所有线程只能被优先级更高的线程抢占。如果线程进入睡眠状态，它将被放置在具有相同优先级的线程队列的末尾。
- en: The priority of a thread with a `SCHED_FIFO` policy is always higher than the
    priority of any thread with a `SCHED_OTHER` policy, and as soon as a `SCHED_FIFO`
    thread becomes runnable, it immediately preempts a running `SCHED_OTHER` thread.
    From a practical standpoint, if there is only one `SCHED_FIFO` thread running
    in the system, it can use as much CPU time as it requires. The deterministic behavior
    and high priority of the `SCHED_FIFO` scheduler make it a good fit for real-time
    applications.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`SCHED_FIFO`策略的线程优先级始终高于`SCHED_OTHER`策略的线程优先级，一旦`SCHED_FIFO`线程变为可运行状态，它立即抢占正在运行的`SCHED_OTHER`线程。从实际的角度来看，如果系统中只有一个`SCHED_FIFO`线程在运行，它可以使用所需的CPU时间。`SCHED_FIFO`调度程序的确定性行为和高优先级使其非常适合实时应用程序。'
- en: 'To assign a real-time priority to a thread, we define a `ConfigureRealtime` function. This
    accepts two parameters—a thread ID and the desired priority:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将实时优先级分配给一个线程，我们定义了一个`ConfigureRealtime`函数。它接受两个参数——线程ID和期望的优先级：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The function populates data for the `pthread_setschedparam` function that uses
    the low-level API of the operating system to change the scheduler and the priority
    of a thread:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数为`pthread_setschedparam`函数填充数据，该函数使用操作系统的低级API来更改线程的调度程序和优先级：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We define a `Measure` function that runs a busy loop, invoking a `nanosleep`
    function with parameters requiring it to sleep for 10 nanoseconds – way too short
    to yield execution to another thread:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义一个`Measure`函数，运行一个繁忙循环，调用`nanosleep`函数，参数要求它休眠10纳秒，这对于将执行让给另一个线程来说太短了：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This function captures timestamps before and after the loop and calculates
    the elapsed time in seconds:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数在循环之前和之后捕获时间戳，并计算经过的时间（以秒为单位）：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, we define the `RealTimeThread` function as a wrapper around the `Measure` function. This
    sets the priority of the current thread to real time and immediately invokes `Measure`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将`RealTimeThread`函数定义为`Measure`函数的包装。这将当前线程的优先级设置为实时，并立即调用`Measure`：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the `main` function, we start two threads, passing text literals as parameters
    to differentiate their output. If we run the program on a Raspberry Pi device,
    we can see the following output:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在`main`函数中，我们启动两个线程，传递文本字面量作为参数以区分它们的输出。如果我们在树莓派设备上运行程序，可以看到以下输出：
- en: '![](img/56a567f4-a5ee-43ce-8a70-8e6471fc11d3.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/56a567f4-a5ee-43ce-8a70-8e6471fc11d3.png)'
- en: Real-time threads took four times lesser time because this was not preempted
    by normal threads. This technique can be efficiently used to meet the soft real-time
    requirements in the Linux environment.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 实时线程所花费的时间少了四倍，因为它没有被普通线程抢占。这种技术可以有效地满足Linux环境中的软实时需求。
- en: Using statically allocated memory
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用静态分配的内存
- en: As has already been discussed in [Chapter 6](ce2d6580-cf8f-42ca-bd14-de8d3265d07e.xhtml)*,
    Memory Management*, dynamic memory allocation should be avoided in real-time systems
    because generic memory allocators are not time-bound. While, in most cases, memory
    allocation does not take much time, it is not guaranteed. It is not acceptable
    for real-time systems.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第6章](ce2d6580-cf8f-42ca-bd14-de8d3265d07e.xhtml)中已经讨论过的，应该避免在实时系统中使用动态内存分配，因为通用内存分配器没有时间限制。虽然在大多数情况下，内存分配不会花费太多时间，但不能保证。这对于实时系统是不可接受的。
- en: The most straightforward way to avoid dynamic memory allocation is to replace
    it with static allocation. C++ developers often use `std::vector` to store sequences
    of elements. On account of its similarity with C arrays, it is efficient and easy
    to use and its interface is consistent with other containers in the standard library.
    Since vectors have a variable number of elements, they use dynamic memory allocation
    extensively. In many situations, however, the `std::array` class can be used instead
    of `std::vector`. It has the same interface, except that the number of its elements
    is fixed and so its instances can be allocated statically. This makes it a good
    alternative to `std::vector` when memory allocation time is critical.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 避免动态内存分配的最直接方法是用静态分配替换它。C++开发人员经常使用`std::vector`来存储元素序列。由于它与C数组相似，因此它高效且易于使用，并且其接口与标准库中的其他容器一致。由于向量具有可变数量的元素，因此它们广泛使用动态内存分配。然而，在许多情况下，可以使用`std::array`类来代替`std::vector`。它具有相同的接口，只是其元素的数量是固定的，因此其实例可以静态分配。这使得它成为在内存分配时间至关重要时替代`std::vector`的良好选择。
- en: In this recipe, we will learn how `std::array` can be efficiently used to represent
    a sequence of elements of fixed size.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，我们将学习如何有效地使用`std::array`来表示固定大小的元素序列。
- en: How to do it...
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤如下...
- en: 'We are going to create an application that uses the power of the C++ standard
    library algorithms to generate and process fixed data frames without using dynamic
    memory allocation:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个应用程序，利用C++标准库算法的功能来生成和处理固定数据帧，而不使用动态内存分配：
- en: In your working directory, `~/test`, create a subdirectory called `array`.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的工作目录`~/test`中，创建一个名为`array`的子目录。
- en: Use your favorite text editor to create a `array.cpp` file in the `array` subdirectory.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的文本编辑器在`array`子目录中创建一个名为`array.cpp`的文件。
- en: 'Add includes and a new type definition to the `array.cpp` file:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`array.cpp`文件中添加包含和新的类型定义：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, we add a function that generates data frames:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们添加一个生成数据帧的函数：
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This is followed by the function to process data frames:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来是处理数据帧的函数：
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Add a `main` function that ties data generation and processing together:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个将数据生成和处理联系在一起的`main`函数：
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Finally, we create a `CMakeLists.txt` file containing build rules for our program:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们创建一个`CMakeLists.txt`文件，其中包含程序的构建规则：
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You can now build and run the application.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在可以构建和运行应用程序了。
- en: How it works...
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'We use the `std::array` template to declare a custom `DataFrame` data type. For
    our sample application, a `DataFrame` is a sequence of eight 32-bit integers:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`std::array`模板来声明自定义的`DataFrame`数据类型。对于我们的示例应用程序，`DataFrame`是一个包含八个32位整数的序列：
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, we can use the new data type in functions to generate and process data
    frames. Since the data frame is an array, we pass it by reference to the `GenerateData`
    function to avoid extra copying:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在函数中使用新的数据类型来生成和处理数据框架。由于数据框架是一个数组，我们通过引用将其传递给`GenerateData`函数，以避免额外的复制：
- en: '[PRE16]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`GenerateData` fills the data frame with random numbers. Since `std::array`
    has the same interface as other containers in the standard library, we can use
    standard algorithms to make the code shorter and more readable:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`GenerateData`用随机数填充数据框架。由于`std::array`具有与标准库中其他容器相同的接口，我们可以使用标准算法使代码更短更可读：'
- en: '[PRE17]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We define the `ProcessData` function in a similar manner. It also accepts a
    `DataFrame`, but it is not supposed to modify it. We use a constant reference
    to explicitly state that data will not be modified:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以类似的方式定义了`ProcessData`函数。它也接受一个`DataFrame`，但不应该修改它。我们使用常量引用明确说明数据不会被修改：
- en: '[PRE18]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '`ProcessData` prints all values in the data frame, and then finds the minimum
    and the maximum values in the frame. Unlike built-in arrays, `std::arrays` do
    not decay to raw pointers when passed to functions, so we can use range-based
    loop syntax. You may notice that we do not pass the size of the array into the
    function, and do not use any global constant to query it. It is part of the `std::array`
    interface. It not only reduces the number of parameters to the function, but also
    ensures that we cannot pass an incorrect size when calling it:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`ProcessData`打印数据框架中的所有值，然后找到框架中的最小值和最大值。与内置数组不同，当传递给函数时，`std::arrays`不会衰减为原始指针，因此我们可以使用基于范围的循环语法。您可能会注意到，我们没有将数组的大小传递给函数，并且没有使用任何全局常量来查询它。这是`std::array`接口的一部分。它不仅减少了函数的参数数量，还确保我们在调用它时不能传递错误的大小：'
- en: '[PRE19]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'To find the minimum and maximum values, we use the `std::minmax_` element function
    of the standard library instead of writing a custom loop:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为了找到最小值和最大值，我们使用标准库的`std::minmax_`元素函数，而不是编写自定义循环：
- en: '[PRE20]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In the `main` function, we create an instance of `DataFrame`:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在`main`函数中，我们创建了一个`DataFrame`的实例：
- en: '[PRE21]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Then, we run a loop. On each iteration, a new data frame is generated and processed:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们运行一个循环。在每次迭代中，都会生成和处理一个新的数据框架：
- en: '[PRE22]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'If we run the application, we get the following output:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行应用程序，我们会得到以下输出：
- en: '![](img/5443008c-9e80-4ed5-818e-9b2df50b60c6.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5443008c-9e80-4ed5-818e-9b2df50b60c6.png)'
- en: Our application generated four data frames and processed its data with only
    a few lines of code and using only statically allocated data. This makes `std::array`
    a good choice for developers of real-time systems. Moreover, unlike built-in arrays,
    our functions are type-safe and we can detect and fix a number of coding errors
    at build time.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序生成了四个数据框架，并且只使用了几行代码和静态分配的数据来处理其数据。这使得`std::array`成为实时系统开发人员的一个很好的选择。此外，与内置数组不同，我们的函数是类型安全的，我们可以在构建时检测和修复许多编码错误。
- en: There's more...
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The C++20 standard introduced a new function, `to_array`, that allows developers
    to create instances of `std::array` from one-dimensional built-in arrays. See
    more details and examples on the `to_array` reference page ([https://en.cppreference.com/w/cpp/container/array/to_array](https://en.cppreference.com/w/cpp/container/array/to_array)).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: C++20标准引入了一个新函数`to_array`，允许开发人员从一维内置数组创建`std::array`的实例。在`to_array`参考页面上查看更多细节和示例（[https://en.cppreference.com/w/cpp/container/array/to_array](https://en.cppreference.com/w/cpp/container/array/to_array)）。
- en: Avoiding exceptions for error handling
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 避免使用异常进行错误处理
- en: A mechanism of exceptions is an integral part of the C++ standard. It is a recommended
    way to design error handling in C++ programs. It does, however, have limitations
    that do not always make it acceptable for real-time systems, especially safety-critical
    ones.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 异常机制是C++标准的一个组成部分。这是设计C++程序中的错误处理的推荐方式。然而，它确实有一些限制，不总是适用于实时系统，特别是安全关键系统。
- en: C++ exception handling depends heavily on stack unwinding. Once an exception
    is thrown, it propagates by the call stack up to the catch block that can handle
    it. This means that destructors of all local objects in all stack frames in its
    path are invoked, and it is hard to determine and formally prove the worst-case
    time of this process.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: C++异常处理严重依赖于堆栈展开。一旦抛出异常，它会通过调用堆栈传播到可以处理它的catch块。这意味着在其路径中调用堆栈帧中的所有本地对象的析构函数，并且很难确定并正式证明此过程的最坏情况时间。
- en: That is why coding guidelines for safety-critical systems, such as MISRA or
    JSF, explicitly forbid the use of exceptions for error handling.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么安全关键系统的编码指南，如MISRA或JSF，明确禁止使用异常进行错误处理。
- en: This does not mean that C++ developers have to revert to the traditional plain
    C error codes. In this recipe, we will learn how to use C++ templates to define
    data types that can hold either the result or the error code of a function call.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不意味着C++开发人员必须回到传统的纯C错误代码。在这个示例中，我们将学习如何使用C++模板来定义可以保存函数调用的结果或错误代码的数据类型。
- en: How to do it...
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We are going to create an application that uses the power of the C++ standard
    library algorithms to generate and process fixed data frames without using dynamic
    memory allocation:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个应用程序，利用C++标准库算法的强大功能来生成和处理固定数据框架，而不使用动态内存分配：
- en: In your working directory, `~/test`, create a subdirectory called `expected`.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的工作目录`~/test`中，创建一个名为`expected`的子目录。
- en: Use your favorite text editor to create an `expected.cpp` file in the `expected` subdirectory.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你喜欢的文本编辑器在`expected`子目录中创建一个`expected.cpp`文件。
- en: 'Add includes and a new type definition to the `expected.cpp` file:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向`expected.cpp`文件添加包含和新的类型定义：
- en: '[PRE23]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Next, we add a wrapper for the open POSIX function:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们为打开的POSIX函数添加一个包装器：
- en: '[PRE24]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Add the `main` function that shows how to use the `OpenForRead` wrapper:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`main`函数，显示如何使用`OpenForRead`包装器：
- en: '[PRE25]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Finally, we create a `CMakeLists.txt` file containing build rules for our program:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们创建一个`CMakeLists.txt`文件，其中包含我们程序的构建规则：
- en: '[PRE26]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: You can now build and run the application.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在可以构建和运行应用程序了。
- en: How it works...
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In our application, we create a data type that can hold either an expected value
    or an error code in a type-safe way. C++17 provides a type-safe union class, `std::variant,`
    which we are going to use as an underlying data type for our templated class, `Expected`.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，我们创建了一个数据类型，可以以类型安全的方式保存预期值或错误代码。C++17提供了一个类型安全的联合类`std::variant`，我们将使用它作为我们的模板类`Expected`的基础数据类型。
- en: 'The `Expected` class encapsulates an `std::variant` field that can hold one
    of two data types, either templated type `T` or `std::error_code`, which is a
    standard C++ generalization of error codes:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`Expected`类封装了一个`std::variant`字段，可以容纳两种数据类型之一，即模板类型`T`或`std::error_code`，后者是错误代码的标准C++泛化：'
- en: '[PRE27]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Although it is possible to work with `std::variant` directly, we expose public
    methods that make it more convenient. The `valid` method returns `true` if the
    result holds the templated type, otherwise `false`:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然可以直接使用`std::variant`，但我们公开了一些使其更加方便的公共方法。`valid`方法在结果持有模板类型时返回`true`，否则返回`false`：
- en: '[PRE28]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The `value` and `error` methods are used to access returned values or error
    code, respectively:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`value`和`error`方法用于访问返回的值或错误代码：'
- en: '[PRE29]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Once the `Expected` class is defined, we create an `OpenForReading` function
    that uses it. This invokes the open system function and, based on the return value,
    creates an instance of `Expected` that holds either a file descriptor or error
    code:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦定义了`Expected`类，我们就创建一个使用它的`OpenForReading`函数。这会调用打开系统函数，并根据返回值创建一个持有文件描述符或错误代码的`Expected`实例：
- en: '[PRE30]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In the `main` function, when we call `OpenForReading` for non-existing files,
    it is expected to fail. When we run the application, we can see the following
    output:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在`main`函数中，当我们为不存在的文件调用`OpenForReading`时，预计会失败。当我们运行应用程序时，可以看到以下输出：
- en: '![](img/60b67f21-dfee-4227-8fa9-b3367d95f288.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/60b67f21-dfee-4227-8fa9-b3367d95f288.png)'
- en: Our `Expected` class allows us to write functions that may return error codes,
    and do it in a type-safe way. Compile time-type validation helps developers to
    avoid many issues common to traditional error codes, making our applications more
    robust and safe.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`Expected`类允许我们以类型安全的方式编写可能返回错误代码的函数。编译时类型验证有助于开发人员避免许多传统错误代码常见的问题，使我们的应用程序更加健壮和安全。
- en: There's more...
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Our implementation of the `Expected` data type is a variation of the `std::expected`
    class ([http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0323r7.html](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0323r7.html))
    proposed for standardization, but not approved. One of the implementations of
    `std::expected` can be found on GitHub at [https://github.com/TartanLlama/expected](https://github.com/TartanLlama/expected).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`Expected`数据类型的实现是`std::expected`类的一个变体（[http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0323r7.html](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0323r7.html)），该类被提议用于标准化，但尚未获得批准。`std::expected`的一个实现可以在GitHub上找到（[https://github.com/TartanLlama/expected](https://github.com/TartanLlama/expected)）。
- en: Exploring real-time operating systems
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索实时操作系统
- en: As has already been discussed in this chapter, Linux is not a real-time system.
    It is a good choice for soft real-time tasks, but despite the fact that it provides
    a real-time scheduler, its kernel is too complex to guarantee the level of determinism
    needed for hard real-time applications.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 正如本章已经讨论的那样，Linux不是实时系统。它是软实时任务的一个很好选择，但尽管它提供了一个实时调度程序，但其内核过于复杂，无法保证硬实时应用程序所需的确定性水平。
- en: Time-critical applications require either a real-time operating system to run,
    or are designed and implemented to run on bare metal, with no operating system
    at all.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 时间关键的应用程序要么需要实时操作系统来运行，要么被设计和实现为在裸机上运行，根本没有操作系统。
- en: Real-time operating systems are usually much simpler than general-purpose operating
    systems such as Linux. Also, they require tailoring to the particular hardware
    platform, usually a microcontroller.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 实时操作系统通常比Linux等通用操作系统简单得多。此外，它们需要根据特定的硬件平台进行定制，通常是微控制器。
- en: There are a number of real-time operating systems, with most of them being proprietary
    and not free. FreeRTOS is a good starting point to explore the capabilities of
    real-time operating systems. Unlike most of the alternatives, it is open source
    and free to use since it is distributed under the MIT license. It is ported to
    a number of microcontrollers and small microprocessors, but even if you do not
    have the specific hardware, Windows and POSIX simulators are available.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多实时操作系统，其中大多数是专有的，而且不是免费的。FreeRTOS是探索实时操作系统功能的良好起点。与大多数替代方案不同，它是开源的，并且可以免费使用，因为它是根据MIT许可证分发的。它被移植到许多微控制器和小型微处理器，但即使您没有特定的硬件，Windows和POSIX模拟器也是可用的。
- en: In this recipe, we will learn how to download and run the FreeRTOS POSIX simulator.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将学习如何下载和运行FreeRTOS POSIX模拟器。
- en: How to do it...
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'We are going to download and build a FreeRTOS simulator in our build environment:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在我们的构建环境中下载和构建FreeRTOS模拟器：
- en: 'Switch to your Ubuntu Terminal and change the current directory to `/mnt`:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Ubuntu终端并将当前目录更改为`/mnt`：
- en: '[PRE31]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Download the source code of the FreeRTOS simulator:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载FreeRTOS模拟器的源代码：
- en: '[PRE32]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Extract the downloaded archive:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提取下载的存档：
- en: '[PRE33]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Change the current directory to `Posix_GCC_Simulator/FreeRTOS_Posix/Debug`:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将当前目录更改为`Posix_GCC_Simulator/FreeRTOS_Posix/Debug`：
- en: '[PRE34]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Fix the minor mistake in `makefile` by running the following command:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令修复`makefile`中的小错误：
- en: '[PRE35]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Build the simulator from the source code:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从源代码构建模拟器：
- en: '[PRE36]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Start it:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动它：
- en: '[PRE37]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: At this point, the simulator is running.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，模拟器正在运行。
- en: How it works...
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As we already know, the kernels of real-time operating systems are usually much
    simpler than the kernels of general-purpose operating systems. The same is also
    true for FreeRTOS.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经知道的那样，实时操作系统的内核通常比通用操作系统的内核简单得多。对于FreeRTOS也是如此。
- en: As a consequence of this simplicity, the kernel can be built and run as a process
    in a general-purpose operating system, such as Linux or Windows. When used from
    within another operating system, it stops being truly real time, but can be used
    as a starting point to explore the FreeRTOS API and start working on applications
    that can later be run in the real-time environment of the target hardware platform.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这种简单性，内核可以在通用操作系统（如Linux或Windows）中作为一个进程构建和运行。当从另一个操作系统中使用时，它就不再是真正的实时，但可以作为探索FreeRTOS
    API并开始开发后续可以在目标硬件平台的实时环境中运行的应用程序的起点。
- en: In this recipe, we downloaded and built the FreeRTOS kernel for the POSIX operating
    system.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们下载并为POSIX操作系统构建了FreeRTOS内核。
- en: 'The build stage is straightforward. Once the code has been downloaded and extracted
    from the archive, we run `make`, and this builds a single executable, `FreeRTOS-POSIX`.
    Before running the `make` command, we fix a mistake in `makefile` by placing the
    `-lrt` option at the end of the GCC command line. We do this by running `sed`:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 构建阶段很简单。一旦代码从存档中下载并提取出来，我们运行`make`，这将构建一个单个可执行文件`FreeRTOS-POSIX`。在运行`make`命令之前，我们通过运行`sed`在`makefile`中修复了一个错误，将`-lrt`选项放在GCC命令行的末尾。
- en: '[PRE38]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Running the application starts the kernel and pre-packaged applications:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序会启动内核和预打包的应用程序：
- en: '![](img/592082ae-35ae-405e-8d7d-fefe26872dae.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/592082ae-35ae-405e-8d7d-fefe26872dae.png)'
- en: We were able to run FreeRTOS in our build environment. You can dive deeper into
    its code base and documentation to get a better understanding of the internals
    and APIs of real-time operating systems.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能够在我们的构建环境中运行FreeRTOS。您可以深入研究其代码库和文档，以更好地理解实时操作系统的内部和API。
- en: There's more...
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: If you work in the Windows environment, there is a better supported Windows
    version of the FreeRTOS simulator. It can be downloaded from [https://www.freertos.org/FreeRTOS-Windows-Simulator-Emulator-for-Visual-Studio-and-Eclipse-MingW.html](https://www.freertos.org/FreeRTOS-Windows-Simulator-Emulator-for-Visual-Studio-and-Eclipse-MingW.html),
    along with documentation and tutorials.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在Windows环境中工作，有一个更好支持的FreeRTOS模拟器的Windows版本。它可以从[https://www.freertos.org/FreeRTOS-Windows-Simulator-Emulator-for-Visual-Studio-and-Eclipse-MingW.html](https://www.freertos.org/FreeRTOS-Windows-Simulator-Emulator-for-Visual-Studio-and-Eclipse-MingW.html)下载，还有文档和教程。
