["```cpp\nsudo apt-get install build-essential git cmake\n```", "```cpp\n> sudo apt-get install build-essential git cmake\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter02\n```", "```cpp\n> mkdir build && cd build\n> cmake ..\n> make recipe01_examples\n```", "```cpp\n> ./recipe01_example01\nThe answer is: 42\n\n> ./recipe01_example02\nterminate called after throwing an instance of 'std::runtime_error'\nwhat(): The answer is: 42\nAborted\n\n> ./recipe01_example03\nThe answer is: 42\n\n> ./recipe01_example04\nterminate called after throwing an instance of 'std::runtime_error'\nwhat(): The answer is: 42\nAborted\n\n> ./recipe01_example05\nfoo: 18446744069414584320\nfoo: T is too large\n```", "```cpp\n#include <iostream>\n#include <stdexcept>\n\nvoid foo()\n{\n    throw std::runtime_error(\"The answer is: 42\");\n}\n\nint main(void)\n{\n    try {\n        foo();\n    }\n    catch(const std::exception &e) {\n        std::cout << e.what() << '\\n';\n    }\n\n    return 0;\n}\n```", "```cpp\n#include <iostream>\n#include <stdexcept>\n\nvoid foo() noexcept\n{\n    throw std::runtime_error(\"The answer is: 42\");\n}\n\nint main(void)\n{\n    try {\n        foo();\n    }\n    catch(const std::exception &e) {\n        std::cout << e.what() << '\\n';\n    }\n\n    return 0;\n}\n```", "```cpp\n#include <iostream>\n#include <stdexcept>\n\nvoid foo() noexcept\n{\n    try {\n        throw std::runtime_error(\"The answer is: 42\");\n    }\n    catch(const std::exception &e) {\n        std::cout << e.what() << '\\n';\n    }\n}\n\nint main(void)\n{\n    foo();\n    return 0;\n}\n```", "```cpp\n#include <iostream>\n#include <stdexcept>\n\nvoid foo() noexcept(true)\n{\n    throw std::runtime_error(\"The answer is: 42\");\n}\n\nint main(void)\n{\n    try {\n        foo();\n    }\n    catch(const std::exception &e) {\n        std::cout << e.what() << '\\n';\n    }\n\n    return 0;\n}\n```", "```cpp\n#include <limits>\n#include <iostream>\n#include <stdexcept>\n\ntemplate<typename T>\nuint64_t foo(T val) noexcept(sizeof(T) <= 4)\n{\n    if constexpr(sizeof(T) <= 4) {\n        return static_cast<uint64_t>(val) << 32;\n    }\n\n    throw std::runtime_error(\"T is too large\");\n}\n\nint main(void)\n{\n    try {\n        uint32_t val1 = std::numeric_limits<uint32_t>::max();\n        std::cout << \"foo: \" << foo(val1) << '\\n';\n\n        uint64_t val2 = std::numeric_limits<uint64_t>::max();\n        std::cout << \"foo: \" << foo(val2) << '\\n';\n    }\n    catch(const std::exception &e) {\n        std::cout << e.what() << '\\n';\n    }\n\n    return 0;\n}\n```", "```cpp\n> sudo apt-get install build-essential git cmake\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter02\n```", "```cpp\n> mkdir build && cd build\n> cmake ..\n> make recipe02_examples\n```", "```cpp\n> ./recipe02_example01\ncould foo throw: true\n\n> ./recipe02_example02\ncould foo throw: true\ncould foo throw: true\ncould foo throw: false\ncould foo throw: false\n\n> ./recipe02_example03\nterminate called after throwing an instance of 'std::runtime_error'\nwhat(): The answer is: 42\nAborted\n\n> ./recipe02_example04\n\n> ./recipe02_example05\nterminate called after throwing an instance of 'std::runtime_error'\nwhat(): The answer is: 42\nAborted\n\n> ./recipe02_example06\ncould foo throw: true\ncould foo throw: true\n```", "```cpp\n#include <iostream>\n#include <stdexcept>\n\nvoid foo()\n{\n    std::cout << \"The answer is: 42\\n\";\n}\n\nint main(void)\n{\n    std::cout << std::boolalpha;\n    std::cout << \"could foo throw: \" << !noexcept(foo()) << '\\n';\n    return 0;\n}\n```", "```cpp\n#include <iostream>\n#include <stdexcept>\n\nvoid foo1()\n{\n    std::cout << \"The answer is: 42\\n\";\n}\n\nvoid foo2()\n{\n    throw std::runtime_error(\"The answer is: 42\");\n}\n\nvoid foo3() noexcept\n{\n    std::cout << \"The answer is: 42\\n\";\n}\n\nvoid foo4() noexcept\n{\n    throw std::runtime_error(\"The answer is: 42\");\n}\n\nint main(void)\n{\n    std::cout << std::boolalpha;\n    std::cout << \"could foo throw: \" << !noexcept(foo1()) << '\\n';\n    std::cout << \"could foo throw: \" << !noexcept(foo2()) << '\\n';\n    std::cout << \"could foo throw: \" << !noexcept(foo3()) << '\\n';\n    std::cout << \"could foo throw: \" << !noexcept(foo4()) << '\\n';\n    return 0;\n}\n```", "```cpp\n#include <iostream>\n#include <stdexcept>\n\nvoid foo()\n{\n    throw std::runtime_error(\"The answer is: 42\");\n}\n\nint main(void)\n{\n    foo();\n}\n```", "```cpp\n#include <iostream>\n#include <stdexcept>\n\nvoid foo()\n{\n    throw std::runtime_error(\"The answer is: 42\");\n}\n\nint main(void)\n{\n    if constexpr(noexcept(foo())) {\n        foo();\n    }\n    else {\n        try {\n            foo();\n        }\n        catch (...)\n        { }\n    }\n}\n```", "```cpp\n#include <iostream>\n#include <stdexcept>\n\nvoid foo() noexcept\n{\n    throw std::runtime_error(\"The answer is: 42\");\n}\n\nint main(void)\n{\n    if constexpr(noexcept(foo())) {\n        foo();\n    }\n    else {\n        try {\n            foo();\n        }\n        catch (...)\n        { }\n    }\n}\n```", "```cpp\n#include <iostream>\n#include <stdexcept>\n\nvoid foo1()\n{\n    std::cout << \"The answer is: 42\\n\";\n}\n\nvoid foo2() noexcept(noexcept(foo1()))\n{\n    foo1();\n}\n\nint main(void)\n{\n    std::cout << std::boolalpha;\n    std::cout << \"could foo throw: \" << !noexcept(foo1()) << '\\n';\n    std::cout << \"could foo throw: \" << !noexcept(foo2()) << '\\n';\n}\n```", "```cpp\n> sudo apt-get install build-essential git cmake\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter02\n```", "```cpp\n> mkdir build && cd build\n> cmake ..\n> make recipe03_examples\n```", "```cpp\n> ./recipe03_example01\nThe answer is: 42\n\n> ./recipe03_example02\nThe answer is: 42\n\n> ./recipe03_example03\nThe answer is not: 43\n\n> ./recipe03_example04\nThe answer is: 42\n\n> ./recipe03_example05\nstep 1: Collect answers\nThe answer is: 42\n```", "```cpp\n#include <iostream>\n#include <stdexcept>\n\nclass the_answer\n{\npublic:\n    the_answer()\n    {\n        std::cout << \"The answer is: \";\n    }\n\n    ~the_answer()\n    {\n        std::cout << \"42\\n\";\n    }\n};\n\nint main(void)\n{\n    the_answer is;\n    return 0;\n}\n```", "```cpp\n#include <iostream>\n#include <stdexcept>\n\nclass the_answer\n{\npublic:\n\n    int *answer{};\n\n    the_answer() :\n        answer{new int}\n    {\n        *answer = 42;\n    }\n\n    ~the_answer()\n    {\n        std::cout << \"The answer is: \" << *answer << '\\n';\n        delete answer;\n    }\n};\n\nint main(void)\n{\n    the_answer is;\n\n    if (*is.answer == 42) {\n        return 0;\n    }\n\n    return 1;\n}\n```", "```cpp\n#include <iostream>\n#include <stdexcept>\n\nclass the_answer\n{\npublic:\n\n    int *answer{};\n\n    the_answer() :\n        answer{new int}\n    {\n        *answer = 43;\n    }\n\n    ~the_answer()\n    {\n        std::cout << \"The answer is not: \" << *answer << '\\n';\n        delete answer;\n    }\n};\n\nvoid foo()\n{\n    the_answer is;\n\n    if (*is.answer == 42) {\n        return;\n    }\n\n    throw std::runtime_error(\"\");\n}\n\nint main(void)\n{\n    try {\n        foo();\n    }\n    catch(...)\n    { }\n\n    return 0;\n}\n```", "```cpp\n#include <iostream>\n#include <stdexcept>\n\ntemplate<typename FUNC>\nclass finally\n{\n    FUNC m_func;\n\npublic:\n    finally(FUNC func) :\n        m_func{func}\n    { }\n\n    ~finally()\n    {\n        m_func();\n    }\n};\n\nint main(void)\n{\n    auto execute_on_exit = finally{[]{\n        std::cout << \"The answer is: 42\\n\";\n    }};\n}\n```", "```cpp\n#include <iostream>\n#include <stdexcept>\n\ntemplate<typename FUNC>\nclass finally\n{\n    FUNC m_func;\n\npublic:\n    finally(FUNC func) :\n        m_func{func}\n    { }\n\n    ~finally()\n    {\n        m_func();\n    }\n};\n\nint main(void)\n{\n    try {\n        auto execute_on_exit = finally{[]{\n            std::cout << \"The answer is: 42\\n\";\n        }};\n\n        std::cout << \"step 1: Collect answers\\n\";\n        throw std::runtime_error(\"???\");\n        std::cout << \"step 3: Profit\\n\";\n    }\n    catch (...)\n    { }\n}\n```", "```cpp\n> sudo apt-get install build-essential git cmake\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter02\n```", "```cpp\n> mkdir build && cd build\n> cmake ..\n> make recipe04_examples\n```", "```cpp\n> ./recipe04_example01\nterminate called after throwing an instance of 'std::runtime_error'\nwhat(): 42\nAborted\n\n> ./recipe04_example02\nThe answer is: 42\n\n> ./recipe04_example03\nterminate called after throwing an instance of 'std::runtime_error'\nwhat(): 42\nAborted\n\n> ./recipe04_example04\n# exceptions: 2\nThe answer is: 42\nThe answer is: always 42\n```", "```cpp\n#include <iostream>\n#include <stdexcept>\n\nclass the_answer\n{\npublic:\n    ~the_answer()\n    {\n        throw std::runtime_error(\"42\");\n    }\n};\n\nint main(void)\n{\n    try {\n        the_answer is;\n    }\n    catch (const std::exception &e) {\n        std::cout << \"The answer is: \" << e.what() << '\\n';\n    }\n}\n```", "```cpp\n#include <iostream>\n#include <stdexcept>\n\nclass the_answer\n{\npublic:\n    ~the_answer() noexcept(false)\n    {\n        throw std::runtime_error(\"42\");\n    }\n};\n\nint main(void)\n{\n    try {\n        the_answer is;\n }\n    catch (const std::exception &e) {\n        std::cout << \"The answer is: \" << e.what() << '\\n';\n    }\n}\n```", "```cpp\n#include <iostream>\n#include <stdexcept>\n\nclass the_answer\n{\npublic:\n    ~the_answer() noexcept(false)\n    {\n        throw std::runtime_error(\"42\");\n    }\n};\n\nint main(void)\n{\n    try {\n        the_answer is;\n        throw std::runtime_error(\"first exception\");\n    }\n    catch (const std::exception &e) {\n        std::cout << \"The answer is: \" << e.what() << '\\n';\n    }\n}\n```", "```cpp\n#include <iostream>\n#include <stdexcept>\n\nclass nested\n{\npublic:\n    ~nested()\n    {\n        std::cout << \"# exceptions: \" << std::uncaught_exceptions() << '\\n';\n    }\n};\n\nclass the_answer\n{\npublic:\n    ~the_answer()\n    {\n        try {\n            nested n;\n            throw std::runtime_error(\"42\");\n        }\n        catch (const std::exception &e) {\n            std::cout << \"The answer is: \" << e.what() << '\\n';\n        }\n    }\n};\n```", "```cpp\nint main(void)\n{\n    try {\n        the_answer is;\n        throw std::runtime_error(\"always 42\");\n    }\n    catch (const std::exception &e) {\n        std::cout << \"The answer is: \" << e.what() << '\\n';\n    }\n}\n```", "```cpp\n> sudo apt-get install build-essential git cmake\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter02\n```", "```cpp\n> mkdir build && cd build\n> cmake ..\n> make recipe05_examples\n```", "```cpp\n> ./recipe05_example01\nThe answer is: 42\n\n> ./recipe05_example02\nThe answer is: 42\n\n> ./recipe05_example03\nThe answer is: 42\n```", "```cpp\n#include <iostream>\n#include <stdexcept>\n\nclass the_answer : public std::exception\n{\npublic:\n    the_answer() = default;\n    const char *what() const noexcept\n    {\n        return \"The answer is: 42\";\n    }\n};\n\nint main(void)\n{\n    try {\n        throw the_answer{};\n    }\n    catch (const std::exception &e) {\n        std::cout << e.what() << '\\n';\n    }\n}\n```", "```cpp\n#include <iostream>\n#include <stdexcept>\n\nclass the_answer : public std::exception\n{\n    const char *m_str;\npublic:\n\n    the_answer(const char *str):\n        m_str{str}\n    { }\n\n    const char *what() const noexcept\n    {\n        return m_str;\n    }\n};\n\nint main(void)\n{\n    try {\n        throw the_answer(\"42\");\n    }\n    catch (const std::exception &e) {\n        std::cout << \"The answer is: \" << e.what() << '\\n';\n    }\n}\n```", "```cpp\n#include <iostream>\n#include <stdexcept>\n#include <string.h>\n\nclass the_answer : public std::runtime_error\n{\npublic:\n    explicit the_answer(const char *str) :\n        std::runtime_error{str}\n    { }\n};\n\nint main(void)\n{\n    try {\n        throw the_answer(\"42\");\n    }\n    catch (const the_answer &e) {\n        std::cout << \"The answer is: \" << e.what() << '\\n';\n    }\n    catch (const std::exception &e) {\n        std::cout << \"unknown exception: \" << e.what() << '\\n';\n    }\n}\n```"]