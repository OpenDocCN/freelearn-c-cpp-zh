["```cpp\n    /* first_class_1.cpp */\n    #include <functional>\n    #include <iostream>\n\n    using namespace std;\n\n    // Defining a type of function named FuncType\n    // representing a function\n    // that pass two int arguments\n    // and return an int value\n    typedef function<int(int, int)> FuncType;\n\n    int addition(int x, int y)\n    {\n      return x + y;\n    }\n\n    int subtraction(int x, int y)\n    {\n      return x - y;\n    }\n\n    int multiplication(int x, int y)\n    {\n      return x * y;\n    }\n\n    int division(int x, int y)\n    {\n      return x / y;\n    }\n\n    void PassingFunc(FuncType fn, int x, int y)\n    {\n      cout << \"Result = \" << fn(x, y) << endl;\n    }\n\n    auto main() -> int\n    {\n      cout << \"[first_class_1.cpp]\" << endl;\n      int i, a, b;\n      FuncType func;\n\n      // Displaying menu for user\n      cout << \"Select mode:\" << endl;\n      cout << \"1\\. Addition\" << endl;\n      cout << \"2\\. Subtraction\" << endl;\n      cout << \"3\\. Multiplication\" << endl;\n      cout << \"4\\. Division\" << endl;\n      cout << \"Choice: \";\n      cin >> i;\n\n      // Preventing user to select\n      // unavailable modes\n      if(i < 1 || i > 4)\n      {\n         cout << \"Please select available mode!\";\n         return 1;\n      }\n\n      // Getting input from user for variable a\n      cout << \"a -> \";\n      cin >> a;\n\n      // Input validation for variable a\n      while (cin.fail())\n      {\n        // Clearing input buffer to restore cin to a usable state\n        cin.clear();\n\n        // Ignoring last input\n        cin.ignore(INT_MAX, '\\n');\n\n        cout << \"You can only enter numbers.\\n\";\n        cout << \"Enter a number for variable a -> \";\n        cin >> a;\n      }\n\n      // Getting input from user for variable b\n      cout << \"b -> \";\n      cin >> b;\n\n      // Input validation for variable b\n      while (cin.fail())\n      {\n        // Clearing input buffer to restore cin to a usable state\n        cin.clear();\n\n        // Ignoring last input\n        cin.ignore(INT_MAX, '\\n');\n\n        cout << \"You can only enter numbers.\\n\";\n        cout << \"Enter a number for variable b -> \";\n        cin >> b;\n      }\n      switch(i)\n      {\n        case 1: PassingFunc(addition, a, b); break;\n        case 2: PassingFunc(subtraction, a, b); break;\n        case 3: PassingFunc(multiplication, a, b); break;\n        case 4: PassingFunc(division, a, b); break;\n      }\n\n      return 0;\n    }\n\n```", "```cpp\n    case 1: PassingFunc(addition, a, b); break;\n    case 2: PassingFunc(subtraction, a, b); break;\n    case 3: PassingFunc(multiplication, a, b); break;\n    case 4: PassingFunc(division, a, b); break;\n\n```", "```cpp\n    /* first_class_2.cpp */\n    #include <functional>\n    #include <iostream>\n\n    using namespace std;\n\n    // Defining a type of function named FuncType\n    // representing a function\n    // that pass two int arguments\n    // and return an int value\n    typedef function<int(int, int)> FuncType;\n\n    int addition(int x, int y)\n    {\n      return x + y;\n    }\n\n    int subtraction(int x, int y)\n    {\n      return x - y;\n    }\n\n    int multiplication(int x, int y)\n    {\n      return x * y;\n    }\n\n    int division(int x, int y)\n    {\n      return x / y;\n    }\n\n    auto main() -> int\n    {\n      cout << \"[first_class_2.cpp]\" << endl;\n\n      int i, a, b;\n      FuncType func;\n\n      // Displaying menu for user\n      cout << \"Select mode:\" << endl;\n      cout << \"1\\. Addition\" << endl;\n      cout << \"2\\. Subtraction\" << endl;\n      cout << \"3\\. Multiplication\" << endl;\n      cout << \"4\\. Division\" << endl;\n      cout << \"Choice: \";\n      cin >> i;\n\n      // Preventing user to select\n      // unavailable modes\n      if(i < 1 || i > 4)\n      {\n        cout << \"Please select available mode!\";\n        return 1;\n      }\n\n      // Getting input from user for variable a\n      cout << \"a -> \";\n      cin >> a;\n\n      // Input validation for variable a\n      while (cin.fail())\n      {\n        // Clearing input buffer to restore cin to a usable state\n        cin.clear();\n\n        // Ignoring last input\n        cin.ignore(INT_MAX, '\\n');\n\n        cout << \"You can only enter numbers.\\n\";\n        cout << \"Enter a number for variable a -> \";\n        cin >> a;\n      }\n\n      // Getting input from user for variable b\n      cout << \"b -> \";\n      cin >> b;\n\n      // Input validation for variable b\n      while (cin.fail())\n      {\n        // Clearing input buffer to restore cin to a usable state\n        cin.clear();\n\n        // Ignoring last input\n        cin.ignore(INT_MAX, '\\n');\n\n        cout << \"You can only enter numbers.\\n\";\n        cout << \"Enter a number for variable b -> \";\n        cin >> b;\n      }\n\n      switch(i)\n      {\n        case 1: func = addition; break;\n        case 2: func = subtraction; break;\n        case 3: func = multiplication; break;\n        case 4: func = division; break;\n      }\n\n      cout << \"Result = \" << func(a, b) << endl;\n\n      return 0;\n    }\n\n```", "```cpp\n    case 1: func = addition; break;\n    case 2: func = subtraction; break;\n    case 3: func = multiplication; break;\n    case 4: func = division; break;\n\n```", "```cpp\n    cout << \"Result = \" << func(a, b) << endl;\n\n```", "```cpp\n    /* first_class_3.cpp */\n    #include <vector>\n    #include <functional>\n    #include <iostream>\n\n    using namespace std;\n\n    // Defining a type of function named FuncType\n    // representing a function\n    // that pass two int arguments\n    // and return an int value\n    typedef function<int(int, int)> FuncType;\n\n    int addition(int x, int y)\n    {\n      return x + y;\n    }\n\n    int subtraction(int x, int y)\n    {\n      return x - y;\n    }\n\n    int multiplication(int x, int y)\n    {\n      return x * y;\n    }\n\n    int division(int x, int y)\n    {\n      return x / y;\n    }\n\n    auto main() -> int\n    {\n      cout << \"[first_class_3.cpp]\" << endl;\n\n      // Declaring a vector containing FuncType element\n      vector<FuncType> functions;\n\n      // Assigning several FuncType elements to the vector\n      functions.push_back(addition);\n      functions.push_back(subtraction);\n      functions.push_back(multiplication);\n      functions.push_back(division);\n\n      int i, a, b;\n      function<int(int, int)> func;\n\n      // Displaying menu for user\n      cout << \"Select mode:\" << endl;\n      cout << \"1\\. Addition\" << endl;\n      cout << \"2\\. Subtraction\" << endl;\n      cout << \"3\\. Multiplication\" << endl;\n      cout << \"4\\. Division\" << endl;\n      cout << \"Choice: \";\n      cin >> i;\n\n      // Preventing user to select\n      // unavailable modes\n      if(i < 1 || i > 4)\n      {\n        cout << \"Please select available mode!\";\n        return 1;\n      }\n\n      // Getting input from user for variable a\n      cout << \"a -> \";\n      cin >> a;\n\n      // Input validation for variable a\n      while (cin.fail())\n      {\n        // Clearing input buffer to restore cin to a usable state\n        cin.clear();\n\n        // Ignoring last input\n        cin.ignore(INT_MAX, '\\n');\n\n        cout << \"You can only enter numbers.\\n\";\n        cout << \"Enter a number for variable a -> \";\n        cin >> a;\n      }\n\n      // Getting input from user for variable b\n      cout << \"b -> \";\n      cin >> b;\n\n      // Input validation for variable b\n      while (cin.fail())\n      {\n        // Clearing input buffer to restore cin to a usable state\n        cin.clear();\n\n        // Ignoring last input\n        cin.ignore(INT_MAX, '\\n');\n\n        cout << \"You can only enter numbers.\\n\";\n        cout << \"Enter a number for variable b -> \";\n        cin >> b;\n      }\n\n      // Invoking the function inside the vector\n      cout << \"Result = \" << functions.at(i - 1)(a, b) << endl;\n\n      return 0;\n    }\n\n```", "```cpp\n    cout << \"Result = \" << functions.at(i - 1)(a, b) << endl;\n\n```", "```cpp\n    /* first_class_4.cpp */\n    #include <vector>\n    #include <cmath>\n    #include <algorithm>\n    #include <functional>\n    #include <iostream>\n\n    using std::vector;\n    using std::function;\n    using std::transform;\n    using std::back_inserter;\n    using std::cout;\n    using std::endl;\n\n    // Defining a type of function named HyperbolicFunc\n    // representing a function\n    // that pass a double argument\n    // and return an double value\n    typedef function<double(double)> HyperbolicFunc;\n\n    // Initializing a vector containing four functions\n    vector<HyperbolicFunc> funcs = {\n      sinh,\n      cosh,\n      tanh,\n      [](double x) {\n        return x*x; }\n    };\n\n    // Initializing a vector containing four functions\n    vector<HyperbolicFunc> inverseFuncs = {\n      asinh,\n      acosh,\n      atanh,\n      [](double x) {\n        return exp(log(x)/2); }\n    };\n\n    // Declaring a template to be able to be reused\n    template <typename A, typename B, typename C>\n    function<C(A)> compose(\n      function<C(B)> f,\n      function<B(A)> g) {\n        return [f,g](A x) {\n            return f(g(x));\n      };\n    }\n\n    auto main() -> int\n    {\n      cout << \"[first_class_4.cpp]\" << endl;\n\n      // Declaring a template to be able to be reused\n      vector<HyperbolicFunc> composedFuncs;\n\n      // Initializing a vector containing several double elements\n      vector<double> nums;\n      for (int i = 1; i <= 5; ++i)\n        nums.push_back(i * 0.2);\n\n      // Transforming the element inside the vector\n      transform(\n        begin(inverseFuncs),\n        end(inverseFuncs),\n        begin(funcs),\n        back_inserter(composedFuncs),\n        compose<double, double, double>);\n\n      for (auto num: nums)\n      {\n        for (auto func: composedFuncs)\n            cout << \"f(g(\" << num << \")) = \" << func(num) << endl;\n\n        cout << \"---------------\" << endl;\n      }\n\n      return 0;\n    }\n\n```", "```cpp\n transform(\n begin(inverseFuncs), \n inverseFuncs.end(inverseFuncs), \n begin(funcs), \n back_inserter(composedFuncs), \n compose<double, double, double>);\n\n```", "```cpp\n    /* transform_1.cpp */\n    #include <vector>\n    #include <algorithm>\n    #include <iostream>\n\n    using namespace std;\n\n    auto main() -> int\n    {\n      cout << \"[transform_1.cpp]\" << endl;\n\n      // Initializing a vector containing integer element\n      vector<int> v1;\n      for (int i = 0; i < 5; ++i)\n        v1.push_back(i);\n\n      // Creating another v2 vector\n      vector<int> v2;\n      // Resizing the size of v2 exactly same with v1\n      v2.resize(v1.size());\n\n      // Transforming the element inside the vector\n      transform (\n        begin(v1),\n        end(v1),\n        begin(v2),\n        [](int i){\n            return i * i;});\n\n      // Displaying the elements of v1\n      std::cout << \"v1 contains:\";\n      for (auto v : v1)\n        std::cout << \" \" << v;\n      std::cout << endl;\n\n      // Displaying the elements of v2\n      std::cout << \"v2 contains:\";\n      for (auto v : v2)\n        std::cout << \" \" << v;\n      std::cout << endl;\n\n      return 0;\n    }\n\n```", "```cpp\n transform (\n      begin(v1), \n      end(v1), \n      begin(v2), \n      [](int i){\n        return i * i;});\n\n```", "```cpp\n    /* filter_1.cpp */\n    #include <vector>\n    #include <algorithm>\n    #include <iterator>\n    #include <iostream>\n\n    using namespace std;\n\n    auto main() -> int\n    {\n      cout << \"[filter_1.cpp]\" << endl;\n\n      // Initializing a vector containing integer elements\n      vector<int> numbers;\n      for (int i = 0; i < 20; ++i)\n        numbers.push_back(i);\n\n       // Displaying the elements of numbers\n       cout << \"The original numbers: \" << endl;\n       copy(\n        begin(numbers),\n        end(numbers),\n        ostream_iterator<int>(cout, \" \"));\n       cout << endl;\n\n       // Declaring a vector containing int elements\n       vector<int> primes;\n\n      // Filtering the vector\n      copy_if(\n        begin(numbers),\n        end(numbers),\n        back_inserter(primes),\n        [](int n) {\n            if(n < 2) {\n                return (n != 0) ? true : false;}\n            else {\n                for (int j = 2; j < n; ++j) {\n                    if (n % j == 0){\n                        return false;}\n            }\n\n            return true;\n         }});\n\n        // Displaying the elements of primes\n        // using copy() function\n        cout << \"The primes numbers: \" << endl;\n        copy(\n         begin(primes),\n         end(primes),\n         ostream_iterator<int>(cout, \" \"));\n         cout << endl;\n\n         return 0;\n    }\n\n```", "```cpp\n    /* filter_2.cpp */\n    #include <vector>\n    #include <algorithm>\n    #include <iterator>\n    #include <iostream>\n\n    using namespace std;\n\n    int main()\n   {\n      cout << \"[filter_2.cpp]\" << endl;\n\n      // Initializing a vector containing integer elements\n      vector<int> numbers;\n      for (int i = 0; i < 20; ++i)\n        numbers.push_back(i);\n\n      // Displaying the elements of numbers\n      cout << \"The original numbers: \" << endl;\n      copy(\n        begin(numbers),\n        end(numbers),\n        ostream_iterator<int>(cout, \" \"));\n      cout << endl;\n\n      // Declaring a vector containing int elements\n      vector<int> nonPrimes;\n\n      // Filtering the vector\n      remove_copy_if(\n        numbers.begin(),\n        numbers.end(),\n        back_inserter(nonPrimes),\n        [](int n) {\n            if(n < 2){\n                return (n != 0) ? true : false;}\n            else {\n                for (int j = 2; j < n; ++j){\n                    if (n % j == 0) {\n                        return false;}\n            }\n\n            return true;\n        }});\n\n      // Displaying the elements of nonPrimes\n      // using copy() function\n      cout << \"The non-primes numbers: \" << endl;\n      copy(\n        begin(nonPrimes),\n        end(nonPrimes),\n        ostream_iterator<int>(cout, \" \"));\n      cout << endl;\n\n      return 0;\n    }\n\n```", "```cpp\n    ((((0 + 1) + 2) + 3) + 4)\n\n```", "```cpp\n    (0 + (1 + (2 + (3 + 4))))\n\n```", "```cpp\n    /* fold_1.cpp */\n    #include <vector>\n    #include <numeric>\n    #include <functional>\n    #include <iostream>\n\n    using namespace std;\n\n    auto main() -> int\n    {\n      cout << \"[fold_1.cpp]\" << endl;\n\n      // Initializing a vector containing integer elements\n      vector<int> numbers = {0, 1, 2, 3, 4};\n\n      // Calculating the sum of the value\n      // in the vector\n      auto foldl = accumulate(\n        begin(numbers),\n        end(numbers),\n        0,\n        std::plus<int>());\n\n      // Calculating the sum of the value\n      // in the vector\n      auto foldr = accumulate(\n        rbegin(numbers),\n        rend(numbers),\n        0,\n        std::plus<int>());\n\n      // Displaying the calculating result\n      cout << \"foldl result = \" << foldl << endl;\n      cout << \"foldr result = \" << foldr << endl;\n\n      return 0;\n    }\n\n```", "```cpp\n    /* fold_2.cpp */\n    #include <vector>\n    #include <numeric>\n    #include <functional>\n    #include <iostream>\n\n    using namespace std;\n\n    // Function for logging the flow\n    int addition(const int& x, const int& y)\n    {\n      cout << x << \" + \" << y << endl;\n      return x + y;\n    }\n\n    int main()\n    {\n      cout << \"[fold_2.cpp]\" << endl;\n\n      // Initializing a vector containing integer elements\n      vector<int> numbers = {0, 1, 2, 3, 4};\n\n      // Calculating the sum of the value\n      // in the vector\n      // from left to right\n      cout << \"foldl\" << endl;\n      auto foldl = accumulate(\n          begin(numbers),\n          end(numbers),\n          0,\n          addition);\n\n      // Calculating the sum of the value\n      // in the vector\n      // from right to left\n      cout << endl << \"foldr\" << endl;\n      auto foldr = accumulate(\n          rbegin(numbers),\n          rend(numbers),\n          0,\n          addition);\n\n      cout << endl;\n\n      // Displaying the calculating result\n      cout << \"foldl result = \" << foldl << endl;\n      cout << \"foldr result = \" << foldr << endl;\n\n      return 0;\n    }\n\n```", "```cpp\n    /* pure_function_1.cpp */\n    #include <iostream>\n\n    using namespace std;\n\n    float circleArea(float r)\n    {\n      return 3.14 * r * r;\n    }\n\n    auto main() -> int\n    {\n      cout << \"[pure_function_1.cpp]\" << endl;\n\n      // Initializing a float variable\n      float f = 2.5f;\n\n      // Invoking the circleArea() function\n      // passing the f variable five times\n      for(int i = 1; i <= 5; ++i)\n      {\n        cout << \"Invocation \" << i << \" -> \";\n        cout << \"Result of circleArea(\" << f << \") = \";\n        cout << circleArea(f) << endl;\n      }\n\n      return 0;\n    }\n\n```", "```cpp\n    /* impure_function_1.cpp */\n    #include <iostream>\n\n    using namespace std;\n\n    // Initializing a global variable\n    int currentState = 0;\n\n    int increment(int i)\n    {\n      currentState += i;\n      return currentState;\n    }\n\n    auto main() -> int\n    {\n      cout << \"[impure_function_1.cpp]\" << endl;\n\n      // Initializing a local variable\n      int fix = 5;\n\n      // Involving the global variable\n      // in the calculation\n      for(int i = 1; i <= 5; ++i)\n      {\n        cout << \"Invocation \" << i << \" -> \";\n        cout << \"Result of increment(\" << fix << \") = \";\n        cout << increment(fix) << endl;\n      }\n\n       return 0;\n    }\n\n```", "```cpp\n    /* im_pure_function_1.cpp */\n    #include <iostream>\n\n    using namespace std;\n\n    // Initializing a global variable\n    float phi = 3.14f;\n\n    float circleArea(float r)\n    {\n      return phi * r * r;\n    }\n\n    auto main() -> int\n    {\n      cout << \"[im_pure_function_1.cpp]\" << endl;\n\n      // Initializing a float variable\n      float f = 2.5f;\n\n      // Involving the global variable\n      // in the calculation\n      for(int i = 1; i <= 5; ++i)\n      {\n        cout << \"Invocation \" << i << \" -> \";\n        cout << \"Result of circleArea(\" << f << \") = \";\n        cout << circleArea(f) << endl;\n      }\n\n      return 0;\n    }\n\n```", "```cpp\n    /* curry_1.cpp */\n\n    #include <functional>\n    #include <iostream>\n\n    using namespace std;\n\n    // Variadic template for currying\n    template<typename Func, typename... Args>\n    auto curry(Func func, Args... args)\n    {\n      return [=](auto... lastParam)\n      {\n        return func(args..., lastParam...);\n      };\n    }\n\n    int areaOfRectangle(int length, int width)\n    {\n      return length * width;\n    }\n\n    auto main() -> int\n    {\n      cout << \"[curry_1.cpp]\" << endl;\n\n      // Currying the areaOfRectangle() function\n      auto length5 = curry(areaOfRectangle, 5);\n\n      // Invoking the curried function\n      cout << \"Curried with spesific length = 5\" << endl;\n      for(int i = 0; i <= 5; ++i)\n      {\n        cout << \"length5(\" << i << \") = \";\n        cout << length5(i) << endl;\n      }\n\n      return 0;\n    }\n\n```", "```cpp\n    int i = areaOfRectangle(5, 2);\n\n```", "```cpp\n auto length5 = curry(areaOfRectangle, 5);\n\n```", "```cpp\n length5(i) // where i is the width parameter we want to pass\n\n```", "```cpp\n    /* curry_2.cpp */\n\n    #include <functional>\n    #include <iostream>\n\n    using namespace std;\n\n    // Variadic template for currying\n    template<typename Func, typename... Args>\n    auto curry(Func func, Args... args)\n    {\n      return [=](auto... lastParam)\n      {\n        return func(args..., lastParam...);\n      };\n    }\n\n    int volumeOfRectanglular(\n      int length,\n      int width,\n      int height)\n     {\n        return length * width * height;\n     }\n\n    auto main() -> int\n    {\n      cout << \"[curry_2.cpp]\" << endl;\n\n      // Currying the volumeOfRectanglular() function\n      auto length5width4 = curry(volumeOfRectanglular, 5, 4);\n\n      // Invoking the curried function\n      cout << \"Curried with spesific data:\" << endl;\n      cout << \"length = 5, width 4\" << endl;\n      for(int i = 0; i <= 5; ++i)\n      {\n        cout << \"length5width4(\" << i << \") = \";\n        cout << length5width4(i) << endl;\n      }\n\n      return 0;\n    }\n\n```"]