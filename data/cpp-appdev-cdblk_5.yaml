- en: Chapter 5. Programming Assignment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。编程作业
- en: We have learned about Code:Blocks and app development for Windows in previous
    chapters. In this chapter we will use this knowledge and develop an app from scratch
    as an exercise. We will first take a look at the final app and then develop it
    from ground up. We will use the tools we learned in the previous chapters, which
    you can refer as you need.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在之前的章节中学习了Code:Blocks和Windows应用程序开发。在本章中，我们将运用这些知识，并作为练习从头开始开发一个应用程序。我们将首先查看最终的应用程序，然后从零开始开发它。我们将使用之前章节中学到的工具，您可以在需要时参考。
- en: Developing MyPaint – an image viewer
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发MyPaint - 一个图像查看器
- en: 'We will develop an image viewer app as an exercise in this chapter. Our image
    viewer app shall have the following features:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章练习中开发一个图像查看器应用程序。我们的图像查看器应用程序应具有以下功能：
- en: It shall open `.jpeg`, `.png`, and `.bmp` files
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它应该能够打开`.jpeg`、`.png`和`.bmp`文件
- en: It shall allow user to zoom in and out of the loaded image at an interval of
    10 percent
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它应该允许用户以10%的间隔放大和缩小加载的图像
- en: Zoom range shall be within 10 percent to 200 percent
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缩放范围应在10%到200%之间
- en: There shall be keyboard shortcuts assigned to most commands
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大多数命令应该分配键盘快捷键
- en: There shall be toolbar to provide access to commonly used functions
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该有工具栏以提供对常用功能的访问
- en: The app shall be developed using wxSmith plugin of Code::Blocks
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序应该使用Code::Blocks的wxSmith插件开发
- en: The app shall use wxWidgets toolkit
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序将使用wxWidgets工具包
- en: Our app shall look like the following screenshot. The following screenshot shows
    our image viewer app has opened the `Koala.jpg` file (part of Windows 7 standard
    wallpaper set) with a zoom level set at 60 percent.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序应该看起来像下面的屏幕截图。下面的屏幕截图显示我们的图像查看器应用程序已经打开了`Koala.jpg`文件（Windows 7标准壁纸集的一部分），并将缩放级别设置为60%。
- en: '![Developing MyPaint – an image viewer](img/3415OS_05_01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![开发MyPaint - 一个图像查看器](img/3415OS_05_01.jpg)'
- en: Looks interesting, doesn't it? Let us begin our exercise and solve it. We'll
    do it in two steps.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来很有趣，不是吗？让我们开始练习并解决它。我们将分两步进行。
- en: Understand the structure of our image viewer app.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 了解我们的图像查看器应用程序的结构。
- en: Begin app development with Code::Blocks.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Code::Blocks开始应用程序开发。
- en: Anatomy of exercise app
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习应用程序的解剖结构
- en: 'Our image viewer app uses several C++ classes to open, display, and control
    display of image. The following screenshot highlights major classes that are responsible
    for user interaction:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的图像查看器应用程序使用多个C++类来打开、显示和控制图像的显示。以下屏幕截图突出显示了负责用户交互的主要类：
- en: '![Anatomy of exercise app](img/3415OS_05_02.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![练习应用程序的解剖结构](img/3415OS_05_02.jpg)'
- en: 'Let us see more about the classes listed in the following bullet list:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更多地了解以下项目列表中列出的类：
- en: 'The `wxFrame` class: This class represents main window. All other visual elements
    are displayed inside this class.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wxFrame`类：此类表示主窗口。所有其他可视元素都显示在此类内部。'
- en: 'The `wxMenuBar` class: This class shows the menu bar in our app.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wxMenuBar`类：此类在我们的应用程序中显示菜单栏。'
- en: 'The `wxToolBar` class: This class shows a tool bar in our app.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wxToolBar`类：此类在我们的应用程序中显示工具栏。'
- en: 'The `wxScrolledWindow` class: This class is used to display images. This class
    creates a resizable window to match window size.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wxScrolledWindow`类：此类用于显示图像。此类创建一个可调整大小的窗口以匹配窗口大小。'
- en: 'The `wxStatusBar` class: This class shows a status bar at the bottom of our
    app. We''ll be using this to display menu item help and other information.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wxStatusBar`类：此类在应用程序底部显示状态栏。我们将使用它来显示菜单项帮助和其他信息。'
- en: 'A tree of the classes and their relationship with the `wxFrame` derived class
    is shown in the following diagram:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了类的树形结构及其与`wxFrame`派生类的关系：
- en: '![Anatomy of exercise app](img/3415OS_05_11.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![练习应用程序的解剖结构](img/3415OS_05_11.jpg)'
- en: In the preceding diagram `wxMenuBar`, `wxToolBar`, and `wxStatusBar` are derived
    classes and have been added directly to `wxFrame` derived class.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在上图中，`wxMenuBar`、`wxToolBar`和`wxStatusBar`是派生类，并直接添加到`wxFrame`派生类中。
- en: Whereas we need couple of extra classes for the `wxScrolledWindow` derived class.
    We have two intermediate classes, `wxBoxSizer` and `wxGridSizer`, for the `wxScrolledWindow`
    derived class. These classes are known as layout classes that help laying out
    child windows within a parent window. Note that layout classes are not visible
    to the user.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 而对于`wxScrolledWindow`派生类，我们需要几个额外的类。我们有两个中间类，`wxBoxSizer`和`wxGridSizer`，用于`wxScrolledWindow`派生类。这些类被称为布局类，帮助在父窗口内布局子窗口。请注意，布局类对用户不可见。
- en: wxWidgets provides a class to load, manipulate multiple image formats via the
    `wxImage` class. This class is the engine of our app. The `wxScrolledWindow` class
    uses it to load and manipulate image file. `wxPaintDC` is the class that `wxScrolledWindow`
    uses to paint loaded image file on to itself.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: wxWidgets提供了一个类来通过`wxImage`类加载、操作多种图像格式。这个类是我们应用程序的引擎。`wxScrolledWindow`类使用它来加载和操作图像文件。`wxPaintDC`是`wxScrolledWindow`用来将加载的图像文件绘制到自身上的类。
- en: With this introduction to the structure of our app we shall proceed with the
    development of our app.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个对我们应用程序结构的介绍，我们将继续开发我们的应用程序。
- en: Solution of exercise problem
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习问题的解决方案
- en: 'Let us solve it step-by-step by performing the following steps:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下步骤逐步解决它：
- en: Create a new `wxWidgets` project and set the project name to `MyPaint`. Choose
    **wxSmith** as the **Preferred GUI Builder**.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`wxWidgets`项目，并将项目名称设置为`MyPaint`。选择**wxSmith**作为**首选GUI生成器**。
- en: Click on the **wxFrame** in the **Management** pane as shown in the following
    screenshot:![Solution of exercise problem](img/3415OS_05_02A.jpg)
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在如下屏幕截图所示的**管理**窗格中单击**wxFrame**：![练习问题的解决方案](img/3415OS_05_02A.jpg)
- en: Set the `Title` property to `MyPaint`.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Title`属性设置为`MyPaint`。
- en: Click on the **Layout** tab and click on the wxBoxSizer button as shown in the
    following screenshot. Then click on the frame shown inside wxSmith window:![Solution
    of exercise problem](img/3415OS_05_03.jpg)
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**布局**选项卡，然后单击如下屏幕截图所示的wxBoxSizer按钮。然后单击wxSmith窗口内显示的框架：![练习问题的解决方案](img/3415OS_05_03.jpg)
- en: Next add a wxGridSizer to the newly added wxBoxSizer in a similar manner. Refer
    to the following screenshot for the wxGridSizer button. After wxGridSizer is added
    set the **Cols** property to `1`.![Solution of exercise problem](img/3415OS_05_04.jpg)
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，以类似的方式将wxGridSizer添加到新添加的wxBoxSizer中。参考以下截图以获取wxGridSizer按钮。添加wxGridSizer后，将**Cols**属性设置为`1`。![练习问题的解决方案](img/3415OS_05_04.jpg)
- en: Click on the **Standard** tab and add a wxScrolledWindow to the wxGridSizer
    as per the following screenshot:![Solution of exercise problem](img/3415OS_05_05.jpg)
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**标准**选项卡，并根据以下截图将wxScrolledWindow添加到wxGridSizer中：![练习问题的解决方案](img/3415OS_05_05.jpg)
- en: 'Set the following properties for wxScrolledWindow:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为wxScrolledWindow设置以下属性：
- en: '**Var name** to `MyPaintWindow`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**变量名**设置为`MyPaintWindow`'
- en: '**Min Width** to `640` and **Min Height** to `480`'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将最小宽度设置为`640`，最小高度设置为`480`
- en: '**Border Width** to 5.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**边框宽度**设置为5。'
- en: At this step the **Management** pane shall look similar to the following screenshot:![Solution
    of exercise problem](img/3415OS_05_06.jpg)
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此步骤中，**管理**窗格应类似于以下截图：![练习问题的解决方案](img/3415OS_05_06.jpg)
- en: 'Click on the **Dialogs** tab and click on the wxFileDialog button. Set the
    following properties according to the bullet list:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**对话框**选项卡，然后单击wxFileDialog按钮。根据项目符号列表设置以下属性：
- en: '**Message** to `Select file`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消息**设置为`选择文件`'
- en: '**Wildcard** to `*.bmp;*.jpg;*.png`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通配符**设置为`*.bmp;*.jpg;*.png`'
- en: '**Var name** to `MyPaintFileDialog`'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**变量名**设置为`MyPaintFileDialog`'
- en: 'Click on the **Tools** in the **Management** pane can click on the wxStatusBar
    item. Set the following properties:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**管理**窗格中的**工具**，然后单击wxStatusBar项目。设置以下属性：
- en: '**Var name** to `StatusBarMain`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**变量名**设置为`StatusBarMain`'
- en: '**Fields** to `2`'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**字段**设置为`2`'
- en: In **Field 1**, **Width** to `5`
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**字段1**中，将**宽度**设置为`5`
- en: In **Field 2**, **Width** to `10`.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**字段2**中，将**宽度**设置为`10`。
- en: 'Next open the **MenuBar Editor** and add menu items as per the next screenshot:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来打开**菜单栏编辑器**，并根据下一个截图添加菜单项：
- en: '| Menu item | ID | Label | Accelerator | Help item |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 菜单项 | ID | 标签 | 加速键 | 帮助项目 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| **&File** &#124; **&Open Image** | `idFileOpen` | `&Open Image` | `Ctrl +
    O` | `Opens an Image file...` |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| **&文件** &#124; **&打开图像** | `idFileOpen` | `&打开图像` | `Ctrl + O` | `打开图像文件...`
    |'
- en: '| **&View** &#124; **Zoom &In** | `idViewZoomIn` | `Zoom &In` | `Ctrl++` |
    `Zooms +10%` |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| **&查看** &#124; **放大** | `idViewZoomIn` | `放大` | `Ctrl++` | `放大10%` |'
- en: '| **&View** &#124; **Zoom &Out** | `idViewZoomOut` | `Zoom &Out` | `Ctrl+-`
    | `Zooms -10%` |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| **&查看** &#124; **缩小** | `idViewZoomOut` | `缩小` | `Ctrl+-` | `缩小10%` |'
- en: 'The final menu bar editor window shall look similar to the following screenshot:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的菜单栏编辑器窗口应类似于以下截图：
- en: '![Solution of exercise problem](img/3415OS_05_07.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![练习问题的解决方案](img/3415OS_05_07.jpg)'
- en: We'll now add a wxToolBar to our app. Click on the **Tools** tab as shown in
    the following screenshot and click on the wxToolBar button to add a wxToolBar
    to our app.![Solution of exercise problem](img/3415OS_05_08.jpg)
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将向我们的应用程序添加一个wxToolBar。如下截图所示，单击**工具**选项卡，然后单击wxToolBar按钮，将wxToolBar添加到我们的应用程序中。![练习问题的解决方案](img/3415OS_05_08.jpg)
- en: Double-click on the wxToolBar icon in the wxSmith window and add the following
    items.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击wxSmith窗口中的wxToolBar图标，并添加以下项目。
- en: '| Label | Options | Bitmap | Tooltip/Help text |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 标签 | 选项 | 位图 | 工具提示/帮助文本 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| **Open an image…** | **Normal** | Image from wxArtProvider—wxART_FILE_OPEN
    | `Opens an image file` |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| **打开图像...** | **正常** | 来自wxArtProvider的图像—wxART_FILE_OPEN | `打开图像文件` |'
- en: '| – | Separator | – | – |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| – | 分隔符 | – | – |'
- en: '| **Zoom in** | **Normal** | `zoom_in.png` file from the project folder | `Zoom
    in by 10%` |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| **放大** | **正常** | 项目文件夹中的`zoom_in.png`文件 | `放大10%` |'
- en: '| **Zoom out** | **Normal** | `zoom_out.png` file from the project folder |
    `Zoom out by 10%` |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| **缩小** | **正常** | 项目文件夹中的`zoom_out.png`文件 | `缩小10%` |'
- en: The final **ToolBar editor** window will look similar to the following screenshot.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的**ToolBar编辑器**窗口将类似于以下截图。
- en: '![Solution of exercise problem](img/3415OS_05_09.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![练习问题的解决方案](img/3415OS_05_09.jpg)'
- en: We have completed addition of most GUI elements. We need to write code to complete
    our app. Before doing that please note that wxSmith generated code remains inside
    the matching `//(*` and `//*)` block. Do not write your code inside this block
    as wxSmith will delete any custom code within this block while regenerating code.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了大多数GUI元素的添加。我们需要编写代码来完成我们的应用程序。在这之前，请注意wxSmith生成的代码保留在匹配的`//(*`和`//*)`块内。不要在此块内编写代码，因为wxSmith将在重新生成代码时删除此块内的任何自定义代码。
- en: Add the following code inside the `MyPaintFrame` class declaration in the `MyPaintFrame.h`
    file as a private member variable and function.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MyPaintFrame.h`文件中的`MyPaintFrame`类声明内添加以下代码作为私有成员变量和函数。
- en: '[PRE0]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Add the following code inside the `MyPaintFrame()` constructor function. We
    will be creating a new image class and assign it to `m_Image` variable. We'll
    use `SetScrollbars()` and `ShowScrollbars()` function to assign scroll bar related
    properties. We'll assign initial zoom factor of 100 percent and use the `wxInitAllImageHandlers()`
    function to initialize image processing engine for our app. Finally we'll use
    the `SetStatusText()` function to set status bar text.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MyPaintFrame()`构造函数内添加以下代码。我们将创建一个新的图像类并将其分配给`m_Image`变量。我们将使用`SetScrollbars()`和`ShowScrollbars()`函数来分配与滚动条相关的属性。我们将分配初始缩放因子为100%，并使用`wxInitAllImageHandlers()`函数来初始化我们应用程序的图像处理引擎。最后，我们将使用`SetStatusText()`函数来设置状态栏文本。
- en: '[PRE1]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Click on the resources tree and navigate to **&File** | **&Open Image** menu
    option. Go to the **Events** tab (identified by **{}**), click on the dropdown
    menu next to **EVT_MENU** and select the **--- Add new handler ---** menu option.
    Enter `OnFileOpen` as the name of the event handler. Then enter the following
    code inside the `MyPaintFrame::OnFileOpen()` function:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击资源树，导航到**&文件** | **&打开图像**菜单选项。转到**事件**选项卡（由**{}**标识），单击**EVT_MENU**旁边的下拉菜单，然后选择**---添加新处理程序---**菜单选项。输入`OnFileOpen`作为事件处理程序的名称。然后在`MyPaintFrame::OnFileOpen()`函数内输入以下代码：
- en: '[PRE2]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Next add the `OnViewZoomIn` and `OnViewZoomOut` event handler function to **Zoom
    &In** and **Zoom &Out** by navigating to **&View** | **Zoom &In** and **&View**
    | **Zoom &Out** menu options respectively. Refer completed exercise for the code
    to be added to each handler.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，通过导航到**&View** | **放大**和**&View** | **缩小**菜单选项，将`OnViewZoomIn`和`OnViewZoomOut`事件处理程序函数添加到**放大**和**缩小**。请参考已完成的练习，了解要添加到每个处理程序的代码。
- en: 'Select **MyPaintWindow** from the resources tree and click on the **Events**
    tab. Add the `OnMyPaintWindowPaint` event handler to **EVT_PAINT** and paste the
    following code. This code paints loaded image on `wxScrolledWindow`:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从资源树中选择**MyPaintWindow**，单击**事件**选项卡。将`OnMyPaintWindowPaint`事件处理程序添加到**EVT_PAINT**，并粘贴以下代码。此代码在`wxScrolledWindow`上绘制加载的图像：
- en: '[PRE3]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add `OnResize` event handler to **MyPaintWindow** and add the following line
    of code:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`OnResize`事件处理程序添加到**MyPaintWindow**，并添加以下代码行：
- en: '[PRE4]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next add `RefreshPaintWindow()` function to the `MyPaintFrame` class and add
    the following code inside that function:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将`RefreshPaintWindow()`函数添加到`MyPaintFrame`类中，并在该函数内添加以下代码：
- en: '[PRE5]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now we''ll add code to our toolbar buttons. Select the **Item: Open an image…**
    item in the resource tree and go to the **Events** tab. Add the existing `OnFileOpen`
    event handler to **EVT_TOOL**. This will connect the existing `OnFileOpen()` function
    to this toolbar button. So clicking on this toolbar button will emulate navigating
    to the **File** | **Open menu** options.'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将为工具栏按钮添加代码。在资源树中选择**项目：打开图像...**项目，转到**事件**选项卡。将现有的`OnFileOpen`事件处理程序添加到**EVT_TOOL**。这将把现有的`OnFileOpen()`函数连接到这个工具栏按钮。因此，单击此工具栏按钮将模拟导航到**文件**
    | **打开**菜单选项。
- en: Follow previous steps and connect the **Zoom in** and **Zoom out** toolbar buttons
    to `OnViewZoomIn` and `OnViewZoomOut` event handlers respectively.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以前的步骤，将**放大**和**缩小**工具栏按钮连接到分别的`OnViewZoomIn`和`OnViewZoomOut`事件处理程序。
- en: Our app is now complete. Hit *F9* key to build and run. Upon successful build
    app will be run and we'll be presented with app window. Now open any image file
    and enjoy viewing it inside your freshly written app. Our app will now look as
    per the following screenshot:![Solution of exercise problem](img/3415OS_05_10.jpg)
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的应用程序现在已经完成。按下*F9*键进行构建和运行。成功构建后，应用程序将运行，并且我们将看到应用程序窗口。现在打开任何图像文件，并在您新编写的应用程序中享受查看它。我们的应用程序现在将如下截图所示：![练习问题的解决方案](img/3415OS_05_10.jpg)
- en: Summary
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We planned and wrote our own image viewer app in this exercise. We have used
    the RAD capability of Code::Blocks to write our app and we found that we can write
    an app from scratch within a short period of time.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们计划并编写了自己的图像查看器应用程序。我们使用了Code::Blocks的RAD功能来编写我们的应用程序，并发现我们可以在短时间内从头开始编写一个应用程序。
- en: With this we conclude our book on app development with C++ and Code::Blocks.
    C++ is a vast subject. Code::Blocks also has numerous features. It is impossible
    to highlight each and every aspect of them. I hope that with this book I have
    been able to shed light on app development with C++ and Code::Blocks. I also believe
    this book has also shown that app development with C++ and Code::Blocks can be
    fun and exciting.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们结束了关于使用C++和Code::Blocks进行应用程序开发的书籍。C++是一个广阔的主题。Code::Blocks也有许多功能。不可能突出它们的每一个方面。我希望通过这本书，我已经能够阐明使用C++和Code::Blocks进行应用程序开发。我也相信这本书也表明了使用C++和Code::Blocks进行应用程序开发可以是有趣和令人兴奋的。
