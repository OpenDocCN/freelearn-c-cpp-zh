["```cpp\nui->listWidget->addItem(\"My Test Item\"); \n```", "```cpp\n#ifndef MAINWINDOW_H \n#define MAINWINDOW_H \n\n#include <QMainWindow> \n#include <QDebug> \n#include <QListWidgetItem> \n```", "```cpp\nQListWidgetItem* listItem = new QListWidgetItem; \nlistItem->setText(\"My Second Item\"); \nlistItem->setData(100, 1000); \nui->listWidget->addItem(listItem); \n```", "```cpp\nqDebug() << listItem->data(100); \n```", "```cpp\nQTreeWidgetItem* treeItem = new QTreeWidgetItem; \ntreeItem->setText(0, \"My Test Item\"); \nui->treeWidget->addTopLevelItem(treeItem); \n```", "```cpp\nQTreeWidgetItem* treeItem2 = new QTreeWidgetItem; \ntreeItem2->setText(0, \"My Test Subitem\"); \ntreeItem->addChild(treeItem2); \n```", "```cpp\nQTableWidgetItem* tableItem = new QTableWidgetItem; \ntableItem->setText(\"Testing1\"); \nui->tableWidget->setItem(0, 0, tableItem); \n\nQTableWidgetItem* tableItem2 = new QTableWidgetItem; \ntableItem2->setText(\"Testing2\"); \nui->tableWidget->setItem(1, 2, tableItem2); \n```", "```cpp\nQMessageBox::information(this, \"Alert\", \"Just to let you know, something happened!\"); \n```", "```cpp\nQMessageBox::question(this, \"Alert\", \"Just to let you know, something happened!\"); \nQMessageBox::warning(this, \"Alert\", \"Just to let you know, something happened!\"); \nQMessageBox::information(this, \"Alert\", \"Just to let you know, something happened!\"); \nQMessageBox::critical(this, \"Alert\", \"Just to let you know, something happened!\"); \n```", "```cpp\nQMessageBox::question(this, \"Serious Question\", \"Am I an awesome guy?\", QMessageBox::Ignore, QMessageBox::Yes); \n```", "```cpp\nQMessageBox msgBox; \nmsgBox.setWindowTitle(\"Alert\"); \nmsgBox.setText(\"Just to let you know, something happened!\"); \nmsgBox.exec(); \n```", "```cpp\nQMessageBox msgBox; \nmsgBox.setWindowTitle(\"Serious Question\"); \nmsgBox.setText(\"Am I an awesome guy?\"); \nmsgBox.addButton(\"Seriously Yes!\", QMessageBox::YesRole); \nmsgBox.addButton(\"Well no thanks\", QMessageBox::NoRole); \nmsgBox.setIcon(QMessageBox::Question); \nmsgBox.exec(); \n```", "```cpp\nQMessageBox msgBox; \nmsgBox.setWindowTitle(\"Serious Question\"); \nmsgBox.setText(\"Am I an awesome guy?\"); \nmsgBox.addButton(\"Seriously Yes!\", QMessageBox::YesRole); \nmsgBox.addButton(\"Well no thanks\", QMessageBox::NoRole); \nQPixmap myIcon(\":/images/icon.png\"); \nmsgBox.setIconPixmap(myIcon); \nmsgBox.exec(); \n```", "```cpp\nif (QMessageBox::question(this, \"Question\", \"Some random question. Yes or no?\") == QMessageBox::Yes) \n{ \n   QMessageBox::warning(this, \"Yes\", \"You have pressed Yes!\"); \n} \nelse \n{ \n   QMessageBox::warning(this, \"No\", \"You have pressed No!\"); \n} \n```", "```cpp\nQMessageBox msgBox; \nmsgBox.setWindowTitle(\"Serious Question\"); \nmsgBox.setText(\"Am I an awesome guy?\"); \nQPushButton* yesButton = msgBox.addButton(\"Seriously Yes!\", QMessageBox::YesRole); \nQPushButton* noButton = msgBox.addButton(\"Well no thanks\", QMessageBox::NoRole); \nmsgBox.setIcon(QMessageBox::Question); \nmsgBox.exec(); \n\nif (msgBox.clickedButton() == (QAbstractButton*) yesButton) \n{ \n   QMessageBox::warning(this, \"Yes\", \"Oh thanks! :)\"); \n} \nelse if (msgBox.clickedButton() == (QAbstractButton*) noButton) \n{ \n   QMessageBox::warning(this, \"No\", \"Oh why... :(\"); \n} \n```", "```cpp\n#ifndef MAINWINDOW_H \n#define MAINWINDOW_H \n\n#include <QMainWindow> \n#include <QFileDialog> \n#include <QDebug> \n```", "```cpp\nQString fileName = QFileDialog::getOpenFileName(this); \nqDebug() << fileName; \n```", "```cpp\nQString fileName = QFileDialog::getOpenFileName(this, \"Your title\", QDir::currentPath(), \"All files (*.*) ;; Document files (*.doc *.rtf);; PNG files (*.png)\"); \nqDebug() << fileName; \n```", "```cpp\n#ifndef MAINWINDOW_H \n#define MAINWINDOW_H \n\n#include <QMainWindow> \n#include <QMessageBox> \n#include <QFileDialog> \n#include <QPainter> \n```", "```cpp\nprivate: \n   Ui::MainWindow *ui; \n   bool canDraw; \n   QPixmap* pix; \n   QSize imageSize; \n   QSize drawSize; \n   QPoint drawPos; \n```", "```cpp\nvoid MainWindow::on_browseButton_clicked() \n{ \n   QString fileName = QFileDialog::getOpenFileName(this, tr(\"Open   \n   Image\"), QDir::currentPath(), tr(\"Image Files (*.jpg *.jpeg)\")); \n\n   if (!fileName.isEmpty()) \n   { \n         QPixmap* newPix = new QPixmap(fileName); \n\n         if (!newPix->isNull()) \n         { \n               if (newPix->width() < 150 || newPix->height() < 150) \n               { \n                     QMessageBox::warning(this, tr(\"Invalid Size\"), \n                     tr(\"Image size too small. Please use an image  \n                     larger than 150x150.\")); \n                     return; \n               } \n\n               pix = newPix; \n               imageSize = pix->size(); \n               drawSize = pix->size(); \n\n               canDraw = true; \n\n         } \n         else \n         { \n               canDraw = false; \n\n               QMessageBox::warning(this, tr(\"Invalid Image\"), \n               tr(\"Invalid or corrupted file. Please try again with  \n               another image file.\")); \n         } \n   } \n} \n```", "```cpp\npublic: \n   explicit MainWindow(QWidget *parent = 0); \n   ~MainWindow(); \n   virtual void paintEvent(QPaintEvent *event); \n   void paintImage(QString fileName, int x, int y); \n```", "```cpp\nvoid MainWindow::paintEvent(QPaintEvent *event) \n{ \n   if (canDraw) \n   { \n         paintImage(\"\", ui->productImage->pos().x(), ui->productImage-\n         >pos().y()); \n   } \n} \n```", "```cpp\nvoid MainWindow::paintImage(QString fileName, int x, int y) \n{ \n   QPainter painter; \n   QImage saveImage(150, 150, QImage::Format_RGB16); \n\n   if (!fileName.isEmpty()) \n   { \n         painter.begin(&saveImage); \n   } \n   else \n   { \n         painter.begin(this); \n   } \n\n   if (!pix->isNull()) \n   { \n         painter.setClipRect(x, y, 150, 150); \n         painter.fillRect(QRect(x, y, 150, 150), Qt::SolidPattern); \n         painter.drawPixmap(x - drawPos.x(), y - drawPos.y(), \n         drawSize.width(), drawSize.height(), *pix); \n   } \n\n   painter.end(); \n\n   if (fileName != \"\") \n   { \n         saveImage.save(fileName); \n         QMessageBox::information(this, \"Success\", \"Image has been \n         successfully saved!\"); \n   } \n} \n```", "```cpp\nvoid MainWindow::on_saveButton_clicked() \n{ \n   if (canDraw) \n   { \n         if (!pix->isNull()) \n         { \n               // Save new pic from painter \n               paintImage(QCoreApplication::applicationDirPath() + \n               \"/image.jpg\", 0, 0); \n         } \n   } \n} \n```", "```cpp\nvoid MainWindow::on_scaleSlider_valueChanged(int value) \n{ \n   drawSize = imageSize * value / 100; \n   update(); \n} \n\nvoid MainWindow::on_leftSlider_valueChanged(int value) \n{ \n   drawPos.setX(value * drawSize.width() / 100 * 0.5); \n   update(); \n} \n\nvoid MainWindow::on_topSlider_valueChanged(int value) \n{ \n   drawPos.setY(value * drawSize.height() / 100 * 0.5); \n   update(); \n} \n```"]