- en: Manipulating Functions in Functional Programming
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在函数式编程中操作函数
- en: In the previous chapter, we talked about modern C++ in depth, especially about
    the new feature in C++11--the Lambda expression. As we discussed earlier, the
    Lambda expression is useful in simplifying function notation. Thus, in this chapter,
    we will apply the power of the Lambda expression again, which will be used in
    functional code, especially when we talk about currying--the technique to split
    and reduce the current function.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们深入讨论了现代C++，特别是C++11中的新功能——Lambda表达式。正如我们之前讨论的，Lambda表达式在简化函数表示法方面非常有用。因此，在本章中，我们将再次应用Lambda表达式的威力，它将用于函数式代码，特别是在谈论柯里化时——这是一种分割和减少当前函数的技术。
- en: 'In this chapter, we will discuss the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Applying the first-class function and higher-order function so that our functions
    can not only be invoked as a function, but also be assigned to any variable, pass
    a function, and return a function
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用头等函数和高阶函数，使我们的函数不仅可以作为函数调用，还可以分配给任何变量，传递函数，并返回函数
- en: Pure function, to avoid side effect in our function since it no longer contacts
    an outside state
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 纯函数，以避免我们的函数产生副作用，因为它不再接触外部状态
- en: Currying, as mentioned at the beginning of this chapter, to reduce the multiple
    arguments function so we can evaluate a sequence of functions, with a single argument
    in each function
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 柯里化，正如本章开头提到的，以减少多个参数函数，这样我们可以评估一系列函数，每个函数中只有一个参数
- en: Applying the first-class function in all functions
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在所有函数中应用头等函数
- en: 'The first-class function is just a normal class. We can treat the first-class
    function like any other data type. However, in the language that supports the
    first-class function, we can do the following tasks without invoking the compiler
    recursively:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 头等函数只是一个普通的类。我们可以像对待其他数据类型一样对待头等函数。然而，在支持头等函数的语言中，我们可以在不递归调用编译器的情况下执行以下任务：
- en: Passing a function as another function's parameter
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将函数作为另一个函数的参数传递
- en: Assigning functions to variables
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将函数分配给变量
- en: Storing functions in collections
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将函数存储在集合中
- en: Creating new functions from the existing functions at runtime
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在运行时从现有函数创建新函数
- en: Fortunately, C++ can be used to solve the preceding tasks. We will discuss it
    in depth in the following topics.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，C++可以用来解决前面的任务。我们将在接下来的主题中深入讨论。
- en: Passing a function as another function's parameter
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将函数作为另一个函数的参数传递
- en: 'Let''s start to pass a function as the function parameter. We will choose one
    of four functions and invoke the function from its main function. The code will
    look like this:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始将一个函数作为函数参数传递。我们将选择四个函数中的一个，并从其主函数调用该函数。代码将如下所示：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'From the preceding code, we can see that we have four functions, and we want
    the user to choose one, and then run it. In the switch statement, we will invoke
    one of the four functions based on the choice of the user. We will pass the selected
    function to `PassingFunc()`, as we can see in the following code snippet:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码中，我们可以看到我们有四个函数，我们希望用户选择一个，然后运行它。在switch语句中，我们将根据用户的选择调用四个函数中的一个。我们将选择的函数传递给`PassingFunc()`，如下面的代码片段所示：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We also have the input validation to prevent the user from selecting unavailable
    modes as well as inputting a non-integer value for variable `a` and `b`. The output
    we will see on the screen should look like this:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有输入验证，以防止用户选择不可用的模式，以及为变量`a`和`b`输入非整数值。我们在屏幕上看到的输出应该是这样的：
- en: '![](img/e7a276f3-b116-4d3e-80fd-12b4fe9e197f.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e7a276f3-b116-4d3e-80fd-12b4fe9e197f.png)'
- en: The preceding screenshot shows that we select the `Multiplication` mode from
    the available modes. Then, we try to input the `r` and `e` variables for variable
    `a`. Fortunately, the program rejects it since we have had the input validation.
    Then, we give `4` to variable `a` and `2` to variable `b`. As we expect, the program
    gives us `8` as a result.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的屏幕截图显示，我们从可用模式中选择了“乘法”模式。然后，我们尝试为变量`a`输入`r`和`e`变量。幸运的是，程序拒绝了它，因为我们已经进行了输入验证。然后，我们给变量`a`赋值`4`，给变量`b`赋值`2`。正如我们期望的那样，程序给我们返回`8`作为结果。
- en: As we can see in the `first_class_1.cpp` program, we use the `std::function`
    class and the `typedef` keyword to simplify the code. The `std::function` class
    is used to store, copy, and invoke any callable functions, Lambda expressions,
    or other function objects, as well as pointers to member functions and pointers
    to data members. However, the `typedef` keyword is used as an alias name for another
    type or function.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在`first_class_1.cpp`程序中看到的，我们使用`std::function`类和`typedef`关键字来简化代码。`std::function`类用于存储、复制和调用任何可调用函数、Lambda表达式或其他函数对象，以及成员函数指针和数据成员指针。然而，`typedef`关键字用作另一个类型或函数的别名。
- en: Assigning a function to a variable
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将函数分配给变量
- en: 'We can also assign a function to the variable so we can call the function by
    calling the variable. We will refactor `first_class_1.cpp`, and it will be as
    follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将函数分配给变量，这样我们可以通过调用变量来调用函数。我们将重构`first_class_1.cpp`，代码将如下所示：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We will now assign the four functions based on the user''s choice and store
    the selected function in the `func` variable inside the switch statement as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将根据用户的选择分配四个函数，并将所选函数存储在`func`变量中的switch语句内，如下所示：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'After the `func` variable is assigned with the user''s choice, the code will
    just call the variable like it calls the function, as shown in the following line
    of code:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在`func`变量被赋予用户的选择后，代码将像调用函数一样调用变量，如下面的代码行所示：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: And we will then obtain the same output on the console if we run the code.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，如果我们运行代码，我们将在控制台上获得相同的输出。
- en: Storing a function in the container
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将函数存储在容器中
- en: 'Now, let''s save the function to the container. Here, we will use **vector**
    as the container. The code is written as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将函数保存到容器中。在这里，我们将使用**vector**作为容器。代码编写如下：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'From the preceding code, we can see that we create a new vector named functions,
    then store four different functions to it. Just like we did with our two previous
    code examples, we ask the user to select the mode as well. However, now the code
    becomes simpler, since we don''t need to add the switch statement; we can select
    the function directly by selecting the vector index, as we can see in the following
    code snippet:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码中，我们可以看到我们创建了一个名为functions的新向量，然后将四个不同的函数存储到其中。就像我们之前的两个代码示例一样，我们也要求用户选择模式。然而，现在代码变得更简单了，因为我们不需要添加switch语句；我们可以通过选择向量索引直接选择函数，就像我们在下面的代码片段中看到的那样：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: However, since the vector is a **zero-based** index, we have to adjust the index
    with the menu choice. The result will be same with our two previous code samples.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，由于向量是基于零的索引，我们必须调整菜单选择的索引。结果将与我们之前的两个代码示例相同。
- en: Creating a new function from the existing functions at runtime
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在运行时从现有函数创建新函数
- en: Now let's make a new function at runtime from the preexisting functions. Let's
    suppose we have two collections of functions, the first is hyperbolic functions
    and the second is the inverse of the first one. Beside these built-in functions,
    we also add one user-defined function to calculate the squared number in the first
    collection and the inverse of the squared number in the second collection. Then,
    we will implement the function composition and build a new function from two existing
    functions.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们从现有函数中在运行时创建一个新函数。假设我们有两个函数集合，第一个是双曲函数，第二个是第一个函数的反函数。除了这些内置函数之外，我们还在第一个集合中添加一个用户定义的函数来计算平方数，在第二个集合中添加平方数的反函数。然后，我们将实现函数组合，并从两个现有函数构建一个新函数。
- en: '**Function composition** is a process to combine two or more simple functions
    to create a more complex one. The result of each function is passed as the argument
    to the next function. The final result is obtained from the last function result.
    In a mathematical approach, we usually use the following notation to function
    composition: `compose(f, g) (x) = f(g(x))`. Let''s suppose we have the following
    code:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**函数组合**是将两个或多个简单函数组合成一个更复杂的函数的过程。每个函数的结果作为下一个函数的参数传递。最终结果是从最后一个函数的结果获得的。在数学方法中，我们通常使用以下符号来表示函数组合：`compose(f,
    g) (x) = f(g(x))`。假设我们有以下代码：'
- en: '`double x, y, z; // ... y = g(x); z = f(y);`'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`double x, y, z; // ... y = g(x); z = f(y);`'
- en: 'So, to simplify the notation, we can use the function composition and have
    the following notation for *z*:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了简化表示，我们可以使用函数组合，并对*z*有以下表示：
- en: '`z = f(g(x));`'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`z = f(g(x));`'
- en: 'If we run the hyperbolic functions, then pass the result to the inverse one,
    we will see that we indeed get the original value that we passed to the hyperbolic
    function. Now, let''s take a look at the following code:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行双曲函数，然后将结果传递给反函数，我们将看到我们确实得到了传递给双曲函数的原始值。现在，让我们看一下以下代码：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As we can see in the preceding code, we have two function collections--`funcs`
    and `inverseFuncs`. Moreover, as we discussed previously, the `inverseFuncs` function
    is the inverse of the `funcs` function. The `funcs` function contains three built-in
    hyperbolic functions, along with one user-defined function to calculate the squared
    number, whereas `inverseFuncs` contains three built-in inverse hyperbolic functions
    along with one user-defined function to compute the inverse of the squared number.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的代码中所看到的，我们有两个函数集合--`funcs`和`inverseFuncs`。此外，正如我们之前讨论的，`inverseFuncs`函数是`funcs`函数的反函数。`funcs`函数包含三个内置的双曲函数，以及一个用户定义的函数来计算平方数，而`inverseFuncs`包含三个内置的反双曲函数，以及一个用户定义的函数来计算平方数的反函数。
- en: As we can see in the preceding `first_class_4.cpp` code, we will use individual
    classes/functions when calling the `using` keyword. Compared to the other code
    samples in this chapter, the use of the `using` keyword in individual classes/functions
    is inconsistent, since we use `using namespace std`. It's because there's a clashing
    function name in the `std` namespace, so we have to call them individually.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的`first_class_4.cpp`代码中所看到的，当调用`using`关键字时，我们将使用单独的类/函数。与本章中的其他代码示例相比，在单独的类/函数中使用`using`关键字是不一致的，因为我们使用`using
    namespace std`。这是因为在`std`命名空间中有一个冲突的函数名称，所以我们必须单独调用它们。
- en: 'By using these two collections of functions, we will construct one new function
    from them. To achieve this purpose, we will use the `transform()` function to
    combine the two functions from the two different collections. The code snippet
    is as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用这两个函数集合，我们将从中构建一个新函数。为了实现这个目的，我们将使用`transform()`函数来组合来自两个不同集合的两个函数。代码片段如下：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, we have a new function collection stored in the `composedFuncs` vector.
    We can iterate the collection and pass the value we have provided in the `nums`
    variable to this new function. We should obtain the following output on the console
    if we run the code:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们在`composedFuncs`向量中存储了一个新的函数集合。我们可以迭代集合，并将我们在`nums`变量中提供的值传递给这个新函数。如果我们运行代码，我们应该在控制台上获得以下输出：
- en: '![](img/020e5ce8-760c-4446-82c2-7aeca8fddc1a.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/020e5ce8-760c-4446-82c2-7aeca8fddc1a.png)'
- en: As we can see from the preceding output, whatever we pass to the transforming
    function, we will get the same output as the input. Here, we can prove that C++
    programming can be used to compose a function from two or more existing functions.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的输出中可以看出，无论我们传递给变换函数什么，我们都将得到与输入相同的输出。在这里，我们可以证明C++编程可以用于从两个或多个现有函数组合一个函数。
- en: On the preceding `first_class_4.cpp` code, we use `template<>` in the code.
    If you need a more detailed explanation about `template<>`, refer to [Chapter
    7](2093af96-36ce-46a4-b90f-ee9876987290.xhtml), *Running Parallel Execution Using
    Concurrency*.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的`first_class_4.cpp`代码中，我们在代码中使用了`template<>`。如果您需要关于`template<>`的更详细解释，请参考[第7章](2093af96-36ce-46a4-b90f-ee9876987290.xhtml)，*使用并行执行运行并发*。
- en: Getting acquainted with three functional techniques in the higher-order function
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在高阶函数中熟悉三种功能技术
- en: We discussed that in the first-class function, the C++ language treats the functions
    as the value, which means we can pass them to the other functions, assign to variables,
    and so on. However, we have another term in functional programming, that is, a
    higher-order function, which are functions that work on other functions. It means
    the higher-order function can pass functions as the argument and can also return
    a function.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了在一等函数中，C++语言将函数视为值，这意味着我们可以将它们传递给其他函数，分配给变量等。然而，在函数式编程中，我们还有另一个术语，即高阶函数，这是指可以处理其他函数的函数。这意味着高阶函数可以将函数作为参数传递，也可以返回一个函数。
- en: The higher-order function concept can be applied to the function in general,
    like in a mathematical function, instead of the first-class function concept that
    can only be applied in the functional programming language. Now, let's examine
    the three most useful higher-order functions in functional programming--**map**,
    **filter**, and **fold**.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 高阶函数的概念可以应用于一般的函数，比如数学函数，而不仅仅是适用于函数式编程语言的一等函数概念。现在，让我们来看看函数式编程中三个最有用的高阶函数--**map**，**filter**和**fold**。
- en: Executing each element list using map
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用map执行每个元素列表
- en: 'We won''t talk about map as a container in the C++ language, but a feature
    in the higher-order function instead. This feature is used to apply a given function
    to each element of the list and return a list of results in the same order. We
    can use the `transform()` function to achieve this purpose. As you know, we already
    discussed this function previously. However, we can take a look at the following
    piece of code to view the use of the `transform()` function:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会将map作为C++语言中的容器来讨论，而是作为高阶函数的一个特性。这个特性用于将给定的函数应用于列表的每个元素，并按相同的顺序返回结果列表。我们可以使用`transform()`函数来实现这个目的。正如你所知，我们之前已经讨论过这个函数。然而，我们可以看一下下面的代码片段，查看`transform()`函数的使用：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As shown in our preceding definition of map in the higher-order function, it
    will apply the given function to each element of the list. In the preceding code,
    we try to map the `v1` vector to the `v2` vector with the given function in the
    Lambda expression as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在高阶函数中的map的前面定义中所看到的，它将对列表的每个元素应用给定的函数。在前面的代码中，我们尝试使用Lambda表达式将`v1`向量映射到`v2`向量，给定的函数如下：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If we run the code, we should get the following output on the console screen:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行代码，应该在控制台屏幕上得到以下输出：
- en: '![](img/30abb408-577c-4cfd-82c7-8b1030998fc0.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/30abb408-577c-4cfd-82c7-8b1030998fc0.png)'
- en: As we can see in the output display, we transform `v1` into `v2` using the given
    function notating in the Lambda expression, which is doubling the input value.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在输出显示中所看到的，我们使用Lambda表达式中给定的函数将`v1`转换为`v2`，这个函数是将输入值加倍。
- en: Extracting data using filter
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用过滤器提取数据
- en: 'Filter, in a higher-order function, is a function to produce a new data structure
    from the existing one that exactly matches each element in the new data structure
    to a given predicate returning a Boolean value. In C++ language, we can apply
    the `copy_if()` function, which is added in C++11, to gain the filtering processes.
    Let''s take a look at the following piece of code to analyze the filtering process
    using the `copy_if()` function:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在高阶函数中，过滤器是一个从现有数据结构中生成新数据结构的函数，新数据结构中的每个元素都与返回布尔值的给定谓词完全匹配。在C++语言中，我们可以应用`copy_if()`函数，它是在C++11中添加的，来进行过滤过程。让我们看一下下面的代码片段，分析使用`copy_if()`函数进行过滤过程：
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'As we see in the preceding code, we filter the `numbers` vector into the `0`
    primes vector using the `copy_if()` function. We will pass the Lambda expression
    to decide whether or not the selected element is a prime number, as we used for
    the `lambda_multiline_func.cpp` code in [Chapter 1](58c8c3cc-432a-4664-be4d-a78917b16f15.xhtml),
    *Diving into Modern C++*. We will also use the `copy()` function to copy all elements
    in the selected vector to be printed. The result, when we run the preceding code,
    should be like this:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的代码中所看到的，我们使用`copy_if()`函数将`numbers`向量过滤为`0`素数向量。我们将传递Lambda表达式来决定所选元素是否为素数，就像我们在[第1章](58c8c3cc-432a-4664-be4d-a78917b16f15.xhtml)中的`lambda_multiline_func.cpp`代码中所使用的那样，我们还将使用`copy()`函数将所选向量中的所有元素复制出来打印。当我们运行前面的代码时，结果应该是这样的：
- en: '![](img/84a91b01-5fb5-4111-afaa-c2ca77c868ca.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/84a91b01-5fb5-4111-afaa-c2ca77c868ca.png)'
- en: 'Beside the `copy_if()` function, we can also use the `remove_copy_if()` function
    to filter the data structure. Instead of selecting the match predicate element
    from the existing data structure, using the `remove_copy_if()` function will omit
    the match predicate element, choose the unmatch one, and store it in the new data
    structure. Let''s refactor our `filter_1.cpp` code and create a new vector that
    is not a prime number. The code will be as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`copy_if()`函数，我们还可以使用`remove_copy_if()`函数来过滤数据结构。使用`remove_copy_if()`函数将不选择匹配谓词元素的现有数据结构中的元素，而是选择不匹配的元素，并将其存储在新的数据结构中。让我们重构我们的`filter_1.cpp`代码，并创建一个不是素数的新向量。代码将如下所示：
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'As we can see from the preceding highlighted code, we refactor the previous
    code and use the `remove_copy_if()` function to choose non-prime numbers. As we
    expect, the console window will display the following output:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面突出显示的代码中，我们重构了以前的代码，并使用`remove_copy_if()`函数选择非素数。正如我们所期望的，控制台窗口将显示以下输出：
- en: '![](img/c0b50b7a-1cfb-48ed-b552-c4bfb806a152.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c0b50b7a-1cfb-48ed-b552-c4bfb806a152.png)'
- en: We now have the non-prime number instead of the prime number, like we have in
    the `filter_1.cpp` code.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了非素数，而不是像在`filter_1.cpp`代码中那样的素数。
- en: Combining all elements of a list using fold
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用折叠组合列表的所有元素
- en: 'In functional programming, a fold is a technique to reduce a data structure
    into a single value. There are two types of fold--left fold (`foldl`) and right
    fold (`foldr`). Let''s suppose we have a list that contains 0, 1, 2, 3, and 4\.
    Let''s use the fold technique to add all the contents of the list, first using
    `foldl` and then `foldr`. However, there is a significant difference between the
    two--`foldl` is the left associative, which means we combine the leftmost element
    then move towards the rightmost element. For instance, by the list we have, we
    will get the following parentheses:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数式编程中，折叠是一种将数据结构减少为单个值的技术。有两种类型的折叠——左折叠（`foldl`）和右折叠（`foldr`）。假设我们有一个包含0、1、2、3和4的列表。让我们使用折叠技术来添加列表的所有内容，首先使用`foldl`，然后使用`foldr`。然而，两者之间有一个显著的区别——`foldl`是左结合的，这意味着我们首先组合最左边的元素，然后向右边移动。例如，通过我们拥有的列表，我们将得到以下括号：
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'While `foldr` is the right associative, which means we will combine the rightmost
    element then move towards the leftmost element. The parentheses will be like the
    following line of code:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 而`foldr`是右结合的，这意味着我们将首先组合最右边的元素，然后向左边移动。括号将如下代码行所示：
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, let''s take a look at the following code:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一下以下的代码：
- en: '[PRE15]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In C++ programming, we can apply the `fold` technique using the `accumulate()`
    function. As we can see in the preceding code, we use the forward iterator in
    `foldl` while we use the backward iterator in `foldr`. The output on the console
    should be like following screenshot:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在C++编程中，我们可以使用`accumulate()`函数应用`fold`技术。正如我们在前面的代码中看到的，我们在`foldl`中使用前向迭代器，而在`foldr`中使用后向迭代器。控制台上的输出应该如下截图所示：
- en: '![](img/9cb482af-59c6-4f00-b396-d4fbabd686c9.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9cb482af-59c6-4f00-b396-d4fbabd686c9.png)'
- en: 'As we can see in the preceding output screenshot, we''ve got the same result
    for both, the `foldl` and `foldr` techniques. For those curious about the order
    of the sum, we can refactor the preceding code into the following one:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的输出截图中看到的，我们对`foldl`和`foldr`技术得到了相同的结果。对于那些好奇求和的顺序的人，我们可以将前面的代码重构为以下代码：
- en: '[PRE16]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In the preceding code, we pass a new `addition()` function and pass it to the
    `accumulate()` function. From the `addition()` function, we will track the operation
    of each element. Now, let''s run the preceding code whose the output will be as
    follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们传递了一个新的`addition()`函数并将其传递给`accumulate()`函数。从`addition()`函数中，我们将跟踪每个元素的操作。现在，让我们运行前面的代码，其输出将如下所示：
- en: '![](img/5b662182-a4b8-4a3f-a969-29983904dcbb.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5b662182-a4b8-4a3f-a969-29983904dcbb.png)'
- en: From the preceding output screenshot, we can see that, even though both `foldl`
    and `foldr` give the exact same result, they make a different operation order.
    Since we set the initial value to `0`, the addition operation starts by adding
    `0` to the first element in the `foldl` technique and to the last element in the
    `foldr` technique.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的输出截图中，我们可以看到，即使`foldl`和`foldr`都给出了完全相同的结果，它们执行的操作顺序不同。由于我们将初始值设置为`0`，加法操作从`foldl`技术中的第一个元素开始，然后在`foldr`技术中的最后一个元素开始。
- en: We will set the initial value to `0` because `0` is the additive identity that
    won't impact the addition result. However, in multiplication, we have to consider
    changing the initial value to `1` since `1` is the identity element for multiplication.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将初始值设置为`0`，因为`0`是不会影响加法结果的加法恒等元。然而，在乘法中，我们必须考虑将初始值更改为`1`，因为`1`是乘法的单位元。
- en: Avoiding the side effect with pure function
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过纯函数避免副作用
- en: 'A **pure function** is a function that will always return the same result every
    time it is given the same input. The result doesn''t depend on any information
    or state and won''t produce a **side effect**, or a change of the system state
    outside of the function. Let''s take a look at the following piece of code:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**纯函数**是一个函数，每次给定相同的输入时都会返回相同的结果。结果不依赖于任何信息或状态，也不会产生**副作用**，或者改变函数之外的系统状态。让我们看看以下代码片段：'
- en: '[PRE17]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'From the preceding code, we can see that we have a function named `circleArea()`
    to calculate the area of a circle based on the given radius. We then invoke the
    function five times and pass the same radius value. The output on the console
    should be like the following screenshot:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码中，我们可以看到一个名为`circleArea()`的函数，根据给定的半径计算圆的面积。然后我们调用该函数五次并传递相同的半径值。控制台上的输出应该如下截图所示：
- en: '![](img/363316b8-632e-4346-a2f6-50003c5a8c14.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/363316b8-632e-4346-a2f6-50003c5a8c14.png)'
- en: 'As we can see, in five invocations passing the same input, the function returns
    the same output as well. So that we can say that `circleArea()` is a pure function.
    Now, let''s see how the impure function looks like in the following piece of code:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，在五次调用中传递相同的输入，函数返回的输出也是相同的。因此我们可以说`circleArea()`是一个纯函数。现在，让我们看看在以下代码片段中不纯的函数是什么样子的：
- en: '[PRE18]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In the preceding code, we see that a function named `increment()` increases
    the value of the `currentState` variable. As we can see, the `increment()` function
    depends on the value of the `currentState` variable, so it''s not a pure function.
    Let''s prove it by running the preceding code. The console window should display
    the following screenshot:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们看到一个名为`increment()`的函数增加了`currentState`变量的值。正如我们所看到的，`increment()`函数依赖于`currentState`变量的值，因此它不是一个纯函数。让我们通过运行前面的代码来证明这一点。控制台窗口应该显示以下截图：
- en: '![](img/d0f1d544-925c-447a-9780-1ae4db9ca6f1.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d0f1d544-925c-447a-9780-1ae4db9ca6f1.png)'
- en: We see that the `increment()` function gives a different result even though
    we pass the same input. It's the side effect of the impure function when it depends
    on the outside state or changes the value of the outside state.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到`increment()`函数给出了不同的结果，即使我们传递相同的输入。这是不纯函数的副作用，当它依赖于外部状态或改变外部状态的值时。
- en: 'We have been able to distinguish the pure function over the impure function.
    However, consider the following code:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经能够区分纯函数和不纯函数。然而，请考虑以下代码：
- en: '[PRE19]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The preceding code comes from `pure_function_1.cpp`, but we add a global state,
    `phi`. If we run the preceding code, we will definitely obtain the same result
    as `pure_function_1.cpp`. Although the function returns the same result in the
    five invocations, `circleArea()` in `im_pure_function_1.cpp` is not a pure function
    since it depends on the `phi` variable.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码来自`pure_function_1.cpp`，但我们添加了一个全局状态`phi`。如果我们运行上述代码，我们肯定会得到与`pure_function_1.cpp`相同的结果。尽管函数在五次调用中返回相同的结果，但`im_pure_function_1.cpp`中的`circleArea()`不是一个纯函数，因为它依赖于`phi`变量。
- en: The side effect is not only the change of global state that is done by the function.
    Printing to the screen is also the side effect. However, since we need to show
    the result of every code we create, we cannot avoid the existence of printing
    to screen in our codes. In the next chapter, we will also discuss the immutable
    state, which is the way we can turn an impure function into a pure function.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 副作用不仅是函数所做的全局状态的改变。向屏幕打印也是副作用。然而，由于我们需要显示我们创建的每个代码的结果，我们无法避免在我们的代码中存在向屏幕打印的情况。在下一章中，我们还将讨论不可变状态，这是我们可以将不纯函数转变为纯函数的方法。
- en: Reducing a multiple arguments function with currying
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用柯里化来减少多参数函数
- en: 'Currying is a technique to split a function that takes multiple arguments into
    evaluating a sequence of functions, each with a single argument. In other words,
    we create other functions based on a current function by reducing the current
    function. Let''s suppose we have a function named `areaOfRectangle()`, which takes
    two parameters, `length` and `width`. The code will be like this:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 柯里化是一种将接受多个参数的函数拆分为评估一系列具有单个参数的函数的技术。换句话说，我们通过减少当前函数来创建其他函数。假设我们有一个名为`areaOfRectangle()`的函数，它接受两个参数，`length`和`width`。代码将如下所示：
- en: '[PRE20]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'As we can see in the preceding code, we have a variadic template and function
    named `curry`. We will use this template to construct a currying function. In
    a normal function invocation, we can invoke the `areaOfRectangle()` function as
    follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的代码中所示，我们有一个可变模板和名为`curry`的函数。我们将使用此模板来构建一个柯里化函数。在正常的函数调用中，我们可以如下调用`areaOfRectangle()`函数：
- en: '[PRE21]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'As we can see in the preceding code snippet, we pass `5` and `2` as the argument
    to the `areaOfRectangle()` function. However, using the curried function, we can
    reduce the `areaOfRectangle()` function so we just have a single argument. All
    we have to do is invoke the curry function template as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的代码片段中所示，我们将`5`和`2`作为参数传递给`areaOfRectangle()`函数。但是，使用柯里化函数，我们可以减少`areaOfRectangle()`函数，使其只有一个参数。我们只需要调用柯里化函数模板，如下所示：
- en: '[PRE22]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now, we have the `areaOfRectangle()` function having the value for the `length`
    argument named `length5`. It''s easier for us to call the function and add just
    the `width` argument as the following code snippet:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有了`areaOfRectangle()`函数，它具有名为`length5`的`length`参数的值。我们可以更容易地调用函数，并只添加`width`参数，如下面的代码片段所示：
- en: '[PRE23]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Let''s take a look at the output we will see on the console when we run the
    preceding code:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看当我们运行上述代码时，控制台上会看到的输出：
- en: '![](img/1097f10c-3b57-448c-8d71-fc69bf9f4918.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1097f10c-3b57-448c-8d71-fc69bf9f4918.png)'
- en: 'The variadic template and function has helped us reduce the `areaOfRectangle()`
    function to become the `length5()` function. However, it can also help us reduce
    the function that has more than two arguments. Let''s suppose we have a function
    named `volumeOfRectanglular()` that passes three arguments. We will reduce the
    function as well, as shown in the following code:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 可变模板和函数已经帮助我们将`areaOfRectangle()`函数减少为`length5()`函数。但是，它也可以帮助我们减少具有两个以上参数的函数。假设我们有一个名为`volumeOfRectanglular()`的函数，它传递三个参数。我们也将减少该函数，如下面的代码所示：
- en: '[PRE24]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'As we can see in the preceding code, we have successfully passed the `length`
    and `width` arguments to the `volumeOfRectanglular()` function only, then reduced
    it as `length5width4()`. We can invoke the `length5width4()` function and just
    pass the rest argument, `height`, to it. The following is the output we will see
    on the console screen if we run the preceding code:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的代码中所示，我们已成功将`length`和`width`参数传递给`volumeOfRectanglular()`函数，然后将其减少为`length5width4()`。我们可以调用`length5width4()`函数，并只传递其余参数`height`。如果我们运行上述代码，我们将在控制台屏幕上看到以下输出：
- en: '![](img/dbbc74e9-74e1-4a84-af5e-59a4b8494f0c.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dbbc74e9-74e1-4a84-af5e-59a4b8494f0c.png)'
- en: By using the currying technique, we can partially evaluate a multiple arguments
    function by reducing the function so it will only pass a single parameter.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用柯里化技术，我们可以通过减少函数来部分评估多个参数函数，使其只传递单个参数。
- en: Summary
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We have discussed that there are some techniques to manipulate a function. We
    will gain many advantages from it. Since we can implement the first-class function
    in the C++ language, we can pass a function as another function's parameter. We
    can treat a function as a data object so we can assign it to a variable and store
    it in the container. Also, we can compose a new function from the existing one.
    Moreover, by using map, filter, and fold, we can implement the higher-order function
    in every function we create.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了一些操纵函数的技术。我们将从中获得许多优势。由于我们可以在C++语言中实现头等函数，我们可以将一个函数作为另一个函数的参数传递。我们可以将函数视为数据对象，因此可以将其分配给变量并存储在容器中。此外，我们可以从现有函数中组合出一个新的函数。此外，通过使用map、filter和fold，我们可以在我们创建的每个函数中实现高阶函数。
- en: Another technique we have to implement in gaining a better functional code is
    a pure function to avoid a side effect. We can refactor all the functions we have
    so it won't talk to outside variables or states and won't change and retrieve
    the value from the outside state. Also, to reduce the multiple arguments function
    so we can evaluate its sequence, we can implement the currying technique to our
    function.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有另一种技术可以实现更好的函数式代码，那就是使用纯函数来避免副作用。我们可以重构所有函数，使其不会与外部变量或状态交互，并且不会改变或检索外部状态的值。此外，为了减少多参数函数，以便我们可以评估其顺序，我们可以将柯里化技术应用到我们的函数中。
- en: In the next chapter, we will discuss another technique to avoid side effects.
    We will make all states in our code immutable so there's no state that will mutate
    each time the function is invoked.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论另一种避免副作用的技术。我们将使代码中的所有状态都是不可变的，这样每次调用函数时都不会发生状态变化。
