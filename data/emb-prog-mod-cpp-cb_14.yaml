- en: Guidelines for Safety-Critical Systems
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全关键系统的指南
- en: The requirements for the code quality of embedded systems are usually higher
    than in other software domains. Since lots of embedded systems work without supervision
    or control expensive industrial equipment, the cost of error is high. It becomes
    even higher in safety-critical systems where software or hardware failure may
    lead to injuries or even death. Software for such systems must follow specific
    guidelines that aim to minimize the chances of bugs not being found during the
    debugging and testing stages.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌入式系统的代码质量要求通常比其他软件领域更高。由于许多嵌入式系统在没有监督或控制的情况下工作，或者控制昂贵的工业设备，错误的成本很高。在安全关键系统中，软件或硬件故障可能导致受伤甚至死亡，错误的成本甚至更高。这种系统的软件必须遵循特定的指南，旨在最大程度地减少在调试和测试阶段未发现错误的机会。
- en: 'In this chapter, we''ll explore some of the requirements and best practices
    for safety-critical systems through the following recipes:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过以下示例探讨安全关键系统的一些要求和最佳实践：
- en: Using the return values of all functions
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用所有函数的返回值
- en: Using static code analyzers
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用静态代码分析器
- en: Using preconditions and postconditions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用前置条件和后置条件
- en: Exploring formal validation of code correctness
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索代码正确性的正式验证
- en: These recipes will help you understand the requirements and guidelines for safety-critical
    systems, as well as the tools and methods used for certification and conformance
    testing.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这些示例将帮助您了解安全关键系统的要求和指南，以及用于认证和一致性测试的工具和方法。
- en: Using the return values of all functions
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用所有函数的返回值
- en: Neither the C nor C++ languages require developers to use the value returned
    by any function. It is totally acceptable to define a function that returns an
    integer and then invoke it in the code, ignoring its return value.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: C语言和C++语言都不要求开发人员使用任何函数的返回值。完全可以定义一个返回整数的函数，然后在代码中调用它，忽略其返回值。
- en: Such flexibility often causes software errors that may be difficult to diagnose
    and fix. Most commonly, it happens for functions returning error code. Developers
    may forget to add error condition checks for functions that are used often and
    rarely fail, such as `close`.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这种灵活性经常导致软件错误，可能难以诊断和修复。最常见的情况是函数返回错误代码。开发人员可能会忘记为经常使用且很少失败的函数添加错误条件检查，比如`close`。
- en: One of the most widely used coding standards for safety-critical systems is MISRA. It
    defines requirements for C and C++ languages—MISRA C and MISRA C++, respectively. 
    A recently introduced Adaptive AUTOSAR defines coding guidelines for the automotive
    industry. It is expected that the Adaptive AUTOSAR guidelines will be used as
    a base for the updated MISRA C++ guidelines in the near future.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对于安全关键系统，最广泛使用的编码标准之一是MISRA。它分别为C和C++语言定义了要求——MISRA C和MISRA C++。最近引入的自适应AUTOSAR为汽车行业定义了编码指南。预计自适应AUTOSAR指南将作为更新后的MISRA
    C++指南的基础。
- en: 'Both MISRA and AUTOSAR coding guidelines ([https://www.autosar.org/fileadmin/user_upload/standards/adaptive/17-03/AUTOSAR_RS_CPP14Guidelines.pdf](https://www.autosar.org/fileadmin/user_upload/standards/adaptive/17-03/AUTOSAR_RS_CPP14Guidelines.pdf))
    for C++ require developers to use values returned by all non-void functions and
    methods. The corresponding rule is defined as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: MISRA和AUTOSAR的C++编码指南（[https://www.autosar.org/fileadmin/user_upload/standards/adaptive/17-03/AUTOSAR_RS_CPP14Guidelines.pdf](https://www.autosar.org/fileadmin/user_upload/standards/adaptive/17-03/AUTOSAR_RS_CPP14Guidelines.pdf)）要求开发人员使用所有非void函数和方法的返回值。相应的规则定义如下：
- en: '"Rule A0-1-2 (required, implementation, automated): The value returned by a
    function having a non-void return type that is not an overloaded operator shall
    be used."'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '"规则A0-1-2（必需，实现，自动化）：具有非void返回类型的函数返回值应该被使用。"'
- en: In this recipe, we will learn how to use this rule in our code.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将学习如何在我们的代码中使用这个规则。
- en: How to do it...
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We are going to create two classes that save two timestamps in a file. One
    timestamp indicates when an instance was created, while the other indicates when
    the instance was destroyed. This is useful for code profiling, to measure how
    much time we have spent in a function or any other code block of interest. Follow
    these steps:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建两个类，它们在文件中保存两个时间戳。一个时间戳表示实例创建的时间，另一个表示实例销毁的时间。这对于代码性能分析很有用，可以测量我们在函数或其他感兴趣的代码块中花费了多少时间。按照以下步骤进行：
- en: In your working directory, that is, `~/test`, create a subdirectory called `returns`.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的工作目录中，即`~/test`，创建一个名为`returns`的子目录。
- en: Use your favorite text editor to create a file called `returns.cpp` in the `returns` subdirectory.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的文本编辑器在`returns`子目录中创建一个名为`returns.cpp`的文件。
- en: 'Add the first class to the `returns.cpp` file:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`returns.cpp`文件中添加第一个类：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, we add the second class:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们添加第二个类：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `main` function creates instances of both classes:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`main`函数创建了两个类的实例：'
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, we create a `CMakeLists.txt` file containing the build rules for our
    program:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们创建一个`CMakeLists.txt`文件，其中包含程序的构建规则：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You can now build and run the application.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在可以构建和运行应用程序了。
- en: How it works...
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We have now created two classes, `TimeSaver1` and `TimeSaver2`, which look almost
    identical and do identical jobs. Both classes open a file in their constructors
    and call the `Update` function, which writes a timestamp into an open file.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在创建了两个类，`TimeSaver1`和`TimeSaver2`，它们看起来几乎相同，并且执行相同的工作。这两个类都在它们的构造函数中打开一个文件，并调用`Update`函数，该函数将时间戳写入打开的文件。
- en: Similarly, their destructors invoke the same `Update` function to add a second
    timestamp and close the file descriptor.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，它们的析构函数调用相同的`Update`函数来添加第二个时间戳并关闭文件描述符。
- en: '`TimeSaver1`, however, breaks the *A0-1-2* rule and is unsafe. Let''s take
    a closer look at this. Its `Update` function invokes two functions, `time` and
    `write`. Both functions may fail, returning proper error code, but our implementation
    ignores it:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，`TimeSaver1`违反了*A0-1-2*规则，是不安全的。让我们仔细看看这一点。它的`Update`函数调用了两个函数，`time`和`write`。这两个函数可能失败，返回适当的错误代码，但我们的实现忽略了它：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Also, the destructor of `TimeSaver1` closes the open file by calling the `close` function.
    This may also fail, returning an error code, which we ignore:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`TimeSaver1`的析构函数通过调用`close`函数关闭打开的文件。这也可能失败，返回错误代码，我们忽略了它：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The second class, `TimeSaver2`, complies with the requirement. We assign the
    result of the time call to the `tm` variable:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个类`TimeSaver2`符合要求。我们将时间调用的结果分配给`tm`变量：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If `Write` returns an error, we throw an exception:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`Write`返回错误，我们会抛出异常：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Similarly, we throw an exception if `close` returns an error:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果`close`返回错误，我们会抛出异常：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To mitigate this kind of issue, the C++17 standard introduced a special attribute
    called `[[nodiscard]]`. If a function is declared with this attribute, or it returns
    a class or enumeration marked as `nodiscard`, the compiler should display a warning
    if its return value is discarded. To use this feature, we created a custom wrapper
    around the `write` function and declared it `nodiscard`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了减轻这种问题，C++17标准引入了一个特殊的属性称为`[[nodiscard]]`。如果一个函数声明了这个属性，或者它返回一个标记为`nodiscard`的类或枚举，那么如果其返回值被丢弃，编译器应该显示警告。为了使用这个特性，我们创建了一个围绕`write`函数的自定义包装器，并声明它为`nodiscard`：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can see this in the compiler output when we build our application, which
    also means we have the opportunity to fix it:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们构建应用程序时，我们可以在编译器输出中看到这一点，这也意味着我们有机会修复它：
- en: '![](img/0d3ff757-ae38-48be-b05c-de4b55b2ed2c.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0d3ff757-ae38-48be-b05c-de4b55b2ed2c.png)'
- en: In fact, the compiler was able to recognize and report another issue in our
    code that we will discuss in the next recipe.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，编译器能够识别并报告我们代码中的另一个问题，我们将在下一个示例中讨论。
- en: 'If we build and run the application, we won''t see any output since all writes
    go to files. We can run the `ls` command to check that the program produces a
    result, as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们构建并运行应用程序，我们不会看到任何输出，因为所有写入都会写入文件。我们可以运行`ls`命令来检查程序是否产生结果，如下所示：
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'From this, we get the following output:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 从中，我们得到以下输出：
- en: '![](img/bad36a2a-3f7f-40a6-855b-345fba095e31.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bad36a2a-3f7f-40a6-855b-345fba095e31.png)'
- en: As expected, two files are created by our program. They should be identical,
    but they are not. The file created by `TimeSaver1` is empty, meaning its implementation
    has an issue.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期的那样，我们的程序创建了两个文件。它们应该是相同的，但实际上并不是。由`TimeSaver1`创建的文件是空的，这意味着它的实现存在问题。
- en: The file generated by `TimeSaver2` is valid, but does that mean that its implementation
    is 100 percent correct? Not necessarily, as we'll see in the next recipe.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 由`TimeSaver2`生成的文件是有效的，但这是否意味着其实现是100％正确的？未必，正如我们将在下一个示例中看到的那样。
- en: There's more...
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: More information about the `[[nodiscard]]` attribute can be found on its reference
    page ([https://en.cppreference.com/w/cpp/language/attributes/nodiscard](https://en.cppreference.com/w/cpp/language/attributes/nodiscard)).
    Starting from C++20, the `nodiscard` attribute can include a string literal, explaining
    why the value should not be discarded; for example, `[[nodiscard("Check for write
    errors")]]`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`[[nodiscard]]`属性的更多信息可以在其参考页面上找到（[https://en.cppreference.com/w/cpp/language/attributes/nodiscard](https://en.cppreference.com/w/cpp/language/attributes/nodiscard)）。从C++20开始，`nodiscard`属性可以包括一个字符串文字，解释为什么不应丢弃该值；例如，`[[nodiscard("检查写入错误")]]`。
- en: It is important to understand that compliance with safety guidelines does make
    your code safer, but does not guarantee it. In our implementation of `TimeSaver2`,
    we use the value returned by `time`, but we do not check whether it is valid.
    Instead, we write to the output file unconditionally. Similarly, if `write` returns
    a non-zero number, it can still write less data to the file than requested. Even
    if your code formally matches the guidelines, it may contain related issues.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要理解，遵守安全准则确实可以使您的代码更安全，但并不保证它。在我们的`TimeSaver2`实现中，我们使用`time`返回的值，但我们没有检查它是否有效。相反，我们无条件地写入输出文件。同样，如果`write`返回非零数字，它仍然可以向文件写入比请求的数据少。即使您的代码形式上符合指南，它可能仍然存在相关问题。
- en: Using static code analyzers
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用静态代码分析器
- en: All safety guidelines are defined as extensive sets of specific requirements
    to the source code or design of the application. Many of these requirements can
    be checked automatically by using static code analyzers.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 所有安全准则都被定义为源代码或应用程序设计的具体要求的广泛集合。许多这些要求可以通过使用静态代码分析器自动检查。
- en: '**Static code analyzers** are tools that can analyze the source code and warn
    developers if they detect code patterns that violate code quality requirements.
    They are extremely efficient when it comes to error detection and prevention.
    Since they can be run before the code is built, a lot of errors are fixed at the
    earliest stage of development, without involving the time-consuming testing and
    debugging process.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**静态代码分析器**是一种可以分析源代码并在检测到违反代码质量要求的代码模式时警告开发人员的工具。在错误检测和预防方面，它们非常有效。由于它们可以在代码构建之前运行，因此很多错误都可以在开发的最早阶段修复，而不需要耗时的测试和调试过程。'
- en: Besides error detection and prevention, static code analyzers are used to prove
    that the code complies with target requirements and guidelines during the certification
    process.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 除了错误检测和预防，静态代码分析器还用于证明代码在认证过程中符合目标要求和指南。
- en: In this recipe, we will learn how to use a static code analyzer in our applications.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将学习如何在我们的应用程序中使用静态代码分析器。
- en: How to do it...
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We are going to create a simple program and run one of the many open source
    code analyzers that are available to check for potential issues. Follow these
    steps:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个简单的程序，并运行其中一个许多可用的开源代码分析器，以检查潜在问题。按照以下步骤进行：
- en: Go to the `~/test/returns` directory, which we created as part of the previous
    recipe.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到我们之前创建的`~/test/returns`目录。
- en: 'Install the `cppcheck` tool from the repository. Make sure you are under the `root`
    account, not `user`:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从存储库安装`cppcheck`工具。确保您处于`root`帐户下，而不是`user`：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Change to the `user` account again:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次切换到`user`帐户：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Run `cppcheck` against the `returns.cpp` file:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对`returns.cpp`文件运行`cppcheck`：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Analyze its output.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分析它的输出。
- en: How it works...
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The code analyzer can parse the source code of our applications and test it
    against a number of patterns representing bad coding practices.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 代码分析器可以解析我们应用程序的源代码，并根据多种代表不良编码实践的模式进行测试。
- en: A lot of code analyzers exist, from open source and free to use to expensive
    commercial products for enterprise use.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 存在许多代码分析器，从开源和免费到昂贵的企业级商业产品。
- en: The **MISRA** coding standard that was mentioned in *Using the Return Values
    of All Functions* recipe is a commercial standard. This means that you need to
    buy a license to use it and, similarly, buy a certified code analyzer that can
    test code for MISRA compliance.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在*使用所有函数的返回值*示例中提到的**MISRA**编码标准是商业标准。这意味着您需要购买许可证才能使用它，并且需要购买一个经过认证的代码分析器，以便测试代码是否符合MISRA标准。
- en: 'For learning purposes, we will use an open source code analyzer called `cppcheck`.
    It is widely used and already included in the Ubuntu repository. We can install
    it in the same way as any other Ubuntu package:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 出于学习目的，我们将使用一个名为`cppcheck`的开源代码分析器。它被广泛使用，并已经包含在Ubuntu存储库中。我们可以像安装其他Ubuntu软件包一样安装它：
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, we pass the source filename as a parameter. The check is fast and generates
    the following report:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将源文件名作为参数传递。检查很快，生成以下报告：
- en: '![](img/659c3b78-ca64-474f-8917-0345f48808e4.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/659c3b78-ca64-474f-8917-0345f48808e4.png)
- en: As we can see, it has detected two issues in our code, even before we have tried
    to build it. The first issue is in our safer, enhanced `TimeSaver2` class! To
    make it comply with A0-1-2 requirements, we need to check for the status code
    returned by `close` and throw an exception if an error occurs. However, we do
    this in a destructor, breaking C++ error handling mechanisms.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，它在我们的代码中检测到了两个问题，甚至在我们尝试构建之前。第一个问题出现在我们更安全、增强的`TimeSaver2`类中！为了使其符合A0-1-2要求，我们需要检查`close`返回的状态代码，并在发生错误时抛出异常。然而，我们在析构函数中执行此操作，违反了C++错误处理机制。
- en: 'The second issue that was detected by the code analyzer is a resource leak.
    This explains why `TimeSaver1` generates empty files. When opening a file, we
    accidentally assign the file descriptor to the local variable instead of the instance
    variable, that is, `fd`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 代码分析器检测到的第二个问题是资源泄漏。这解释了为什么`TimeSaver1`会生成空文件。当打开文件时，我们意外地将文件描述符分配给局部变量，而不是实例变量，即`fd`：
- en: '[PRE15]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now, we can fix them and rerun `cppcheck` to make sure the issues have gone
    and that no new issues are introduced. Using code analyzers as part of the development
    workflow makes your code safer and your performance faster since you can detect
    and prevent issues in the early stages of the development cycle.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以修复它们并重新运行`cppcheck`，以确保问题已经消失，并且没有引入新问题。在开发工作流程中使用代码分析器可以使您的代码更安全，性能更快，因为您可以在开发周期的早期阶段检测和预防问题。
- en: There's more...
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Though `cppcheck` is an open source tool, it supports a number of MISRA checks.
    This does not make it a certified tool for the validation of conformance to MISRA
    guidelines but allows you to understand how close your code is to the MISRA requirements
    and how much effort might be needed to make it compliant.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管`cppcheck`是一个开源工具，但它支持多种MISRA检查。这并不意味着它是一个用于验证符合MISRA指南的认证工具，但它可以让您了解您的代码与MISRA要求的接近程度，以及可能需要多少努力使其符合要求。
- en: The MISRA check is implemented as an add-on; you can run it according to the
    instructions that can be found in the add-ons section of the GitHub repository
    for `cppcheck` ([https://github.com/danmar/cppcheck/tree/master/addons](https://github.com/danmar/cppcheck/tree/master/addons)).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: MISRA检查是作为一个附加组件实现的；您可以根据`cppcheck`的GitHub存储库的附加组件部分中的说明来运行它（[https://github.com/danmar/cppcheck/tree/master/addons](https://github.com/danmar/cppcheck/tree/master/addons)）。
- en: Using preconditions and postconditions
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用前置条件和后置条件
- en: In the previous recipe, we learned how to use static code analyzers to prevent
    coding errors at the early stages of development. Another powerful tool for error
    prevention is **programming by contract**.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个示例中，我们学习了如何使用静态代码分析器来防止在开发的早期阶段出现编码错误。另一个防止错误的强大工具是**按合同编程**。
- en: Programming by contract is a practice in which developers explicitly define
    contracts or expectations for input values of a function or module, its results,
    and intermediate states. While intermediate states depend on implementation, the
    contracts for the input and output values can be defined as part of the public
    interface. These expectations are called **preconditions** and **preconditions**,
    respectively, and help avoid programming errors caused by vaguely defined interfaces.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 按合同编程是一种实践，开发人员在其中明确定义函数或模块的输入值、结果和中间状态的合同或期望。虽然中间状态取决于实现，但输入和输出值的合同可以作为公共接口的一部分进行定义。这些期望分别称为**前置条件**和**后置条件**，有助于避免由模糊定义的接口引起的编程错误。
- en: In this recipe, we will learn how to define preconditions and postconditions
    in our C++ code.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将学习如何在我们的C++代码中定义前置条件和后置条件。
- en: How to do it...
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To test how preconditions and postconditions work, we will partially reuse
    the code of the **`TimeSaver1`** class we used in the previous recipe. Follow
    these steps:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试前置条件和后置条件的工作原理，我们将部分重用我们在上一个示例中使用的**`TimeSaver1`**类的代码。按照以下步骤进行：
- en: In your working directory, that is, `~/test`, create a subdirectory called `assert`.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的工作目录中，即`〜/test`，创建一个名为`assert`的子目录。
- en: Use your favorite text editor to create a file called `assert.cpp` in the `assert` subdirectory.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的文本编辑器在`assert`子目录中创建一个名为`assert.cpp`的文件。
- en: 'Add the modified version of the `TimeSaver1` class to the `assert.cpp` file:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`TimeSaver1`类的修改版本添加到`assert.cpp`文件中：
- en: '[PRE16]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This is followed by a simple `main` function:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来是一个简单的`main`函数：
- en: '[PRE17]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Put the build rules into the `CMakeLists.txt` file:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将构建规则放入`CMakeLists.txt`文件中：
- en: '[PRE18]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: You can now build and run the application.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您可以构建和运行应用程序。
- en: How it works...
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Here, we reused some of the code from the `TimeSaver1` class from the previous
    recipe. For simplicity, we removed the `Update` method, leaving only its constructor
    and destructor.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们重用了上一个示例中`TimeSaver1`类的一些代码。为简单起见，我们删除了`Update`方法，只留下了它的构造函数和析构函数。
- en: We intentionally kept the same error that was discovered by the static code
    analyzer in the previous recipe to check whether precondition and postcondition checks
    can be used to prevent such issues.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们故意保留了在上一个示例中由静态代码分析器发现的相同错误，以检查前置条件和后置条件检查是否可以防止这类问题。
- en: 'Our constructor accepts a filename as a parameter. We do not have any particular
    restrictions on the filename, except that it should be valid. Two obviously invalid
    filenames are as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的构造函数接受一个文件名作为参数。对于文件名，我们没有特定的限制，除了它应该是有效的。两个明显无效的文件名如下：
- en: A null pointer as a name
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个空指针作为名称
- en: An empty name
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个空的名称
- en: 'We put these rules as preconditions using the `assert` macro:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将这些规则作为前置条件使用`assert`宏：
- en: '[PRE19]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'To use this macro, we need to include a header file, that is, `csassert`:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用这个宏，我们需要包含一个头文件，即`csassert`：
- en: '[PRE20]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Next, we use the filename to open the file and store it in the `fd` variable.
    We assign it to the local variable, that is, `fd`, instead of the instance variable, `fd`.
    This is a coding error we want to detect:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用文件名打开文件并将其存储在`fd`变量中。我们将其分配给局部变量`fd`，而不是实例变量`fd`。这是我们想要检测到的一个编码错误：
- en: '[PRE21]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Finally, we put postconditions in the constructor. The only postcondition,
    in our case, is that the instance variable, `fd`, should be valid:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们在构造函数中放置后置条件。在我们的情况下，唯一的后置条件是实例变量`fd`应该是有效的：
- en: '[PRE22]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Note how we prefix it with this to disambiguate it from local variables. In
    the same way, we add a precondition to the destructor:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们用this作为前缀以消除它与局部变量的歧义。同样，我们在析构函数中添加了一个前置条件：
- en: '[PRE23]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We don't add any postconditions here because after the destructor returns, the
    instance is not valid anymore.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们不添加任何后置条件，因为在析构函数返回后，实例就不再有效了。
- en: 'Now, let''s test our code. In the `main` function, we create an instance of
    `TimeSaver1`, passing an empty filename as a parameter:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们测试我们的代码。在`main`函数中，我们创建了一个`TimeSaver1`的实例，将一个空的文件名作为参数传递：
- en: '[PRE24]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'After we''ve built and run our program, we will see the following output:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建和运行程序之后，我们将看到以下输出：
- en: '![](img/bcd001f1-c8c9-4e3f-bd48-a4dbc27177be.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bcd001f1-c8c9-4e3f-bd48-a4dbc27177be.png)'
- en: 'The precondition check in the constructor has detected the violation of contracts
    and terminated the application. Let''s change the filename to a valid one:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数中的前置条件检查已经检测到了合同的违反并终止了应用程序。让我们将文件名更改为有效的文件名：
- en: '[PRE25]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We build and run the application once again and get a different output:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次构建和运行应用程序，得到了不同的输出：
- en: '![](img/2a162765-e45c-4207-a02c-fe63f35de7c1.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2a162765-e45c-4207-a02c-fe63f35de7c1.png)'
- en: 'Now, all the preconditions have been met, but we violated the postcondition
    since we failed to update the instance variable, `fd`. Change line 16 by removing
    the type definition before `fd`, like so:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，所有的前置条件都已经满足，但我们违反了后置条件，因为我们没有更新实例变量`fd`。在第16行删除`fd`前的类型定义，如下所示：
- en: '[PRE26]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Rebuilding and running the program again yields an empty output:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 重新构建并再次运行程序会产生空输出：
- en: '![](img/8a57bd09-8c9e-4004-91b6-1a39c806c0e2.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8a57bd09-8c9e-4004-91b6-1a39c806c0e2.png)'
- en: This indicates that all the expectations for the input parameters and results
    have been met. Even in a rudimentary form, programming using the contract helped
    us prevent two coding issues. That is why this technique is widely used in all
    areas of software development and in safety-critical systems in particular.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明输入参数和结果的所有期望都已经满足。即使以基本形式，使用合同编程也帮助我们防止了两个编码问题。这就是为什么这种技术在软件开发的所有领域以及特别是在安全关键系统中被广泛使用的原因。
- en: There's more...
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: More elaborate support for programming by contract was expected to be added
    to the C++20 standard. However, it has been deferred to a later standard. A description
    of the proposal can be found in the paper *A Contract Design*  ([http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0380r1.pdf](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0380r1.pdf))
    by G. Dos Reis, J. D. Garcia, J. Lakos, A. Meredith, N. Myers, B. Stroustrup.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 对于C++20标准，预计会添加更详细的合同编程支持。然而，它已经推迟到了以后的标准。提案的描述可以在论文*A Contract Design* ([http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0380r1.pdf](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0380r1.pdf))中找到，作者是G.
    Dos Reis, J. D. Garcia, J. Lakos, A. Meredith, N. Myers, B. Stroustrup。
- en: Exploring the formal validation of code correctness
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索代码正确性的形式验证
- en: Static code analyzers and the programming-by-contract methodology help developers
    significantly reduce the number of coding errors in their code. However, this
    is not sufficient in safety-critical software development. It is important to
    formally prove that the design of a software component is correct.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 静态代码分析器和合同编程方法有助于开发人员显著减少其代码中的编码错误数量。然而，在安全关键软件开发中，这还不够。重要的是正式证明软件组件的设计是正确的。
- en: There are a number of fairly complex methods to do this, along with tools to
    automate this process. In this recipe, we will explore one of the tools for formal
    software validation, called CPAchecker ([https://cpachecker.sosy-lab.org/index.php](https://cpachecker.sosy-lab.org/index.php)).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些相当复杂的方法来做到这一点，还有一些工具可以自动化这个过程。在这个示例中，我们将探索一种名为CPAchecker的正式软件验证工具之一 ([https://cpachecker.sosy-lab.org/index.php](https://cpachecker.sosy-lab.org/index.php))。
- en: How to do it...
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We are going to download and install `CPAcheck` to our build environment, and
    then run it against a sample program. Follow these steps:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将下载并安装`CPAcheck`到我们的构建环境中，然后对一个示例程序运行它。按照以下步骤进行：
- en: Open a Terminal with your build environment included.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用包括您的构建环境在内的终端打开。
- en: Make sure you have root permissions. If not, press *Ctrl* + *D* to exit from
    the *user* session back to the *root* session.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您有root权限。如果没有，按*Ctrl* + *D*退出*user*会话返回到*root*会话。
- en: 'Install the Java runtime:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Java运行时：
- en: '[PRE27]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Switch to the user session and change directory to `/mnt`:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到用户会话并切换到`/mnt`目录：
- en: '[PRE28]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Download and unpack the `CPACheck` archive, as follows:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并解压`CPACheck`存档，如下所示：
- en: '[PRE29]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Change directory to `CPAchecker-1.9-unix`:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到`CPAchecker-1.9-unix`目录：
- en: '[PRE30]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Run `CPAcheck` against an example file:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对示例文件运行`CPAcheck`：
- en: '[PRE31]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Download the example file that intentionally contains a bug:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载故意包含错误的示例文件：
- en: '[PRE32]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Run the checker against the new example:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对新示例运行检查器：
- en: '[PRE33]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Switch to your web browser and open the `~/test/CPAchecker-1.9-unix/output/Report.html`
    report file that was generated by the tool.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到您的网络浏览器并打开由工具生成的`~/test/CPAchecker-1.9-unix/output/Report.html`报告文件。
- en: How it works...
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: To run `CPAcheck`, we need to install the Java runtime. This is available in
    the Ubuntu repository, and we use `apt-get` to install it.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行`CPAcheck`，我们需要安装Java运行时。这在Ubuntu存储库中可用，我们使用`apt-get`来安装它。
- en: The next step is to download `CPAcheck` itself. We use the `wget` tool to download
    the archive file and feed it to `tar` utility immediately to extract it. When
    completed, the tool can be found in the `CPAchecker-1.9-unix` directory.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是下载`CPAcheck`本身。我们使用`wget`工具下载存档文件，并立即将其提供给`tar`实用程序进行提取。完成后，可以在`CPAchecker-1.9-unix`目录中找到该工具。
- en: 'We use one of the pre-packaged example files to check how the tool works:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用预打包的示例文件之一来检查工具的工作方式：
- en: '[PRE34]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'It generates the following output:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 它生成了以下输出：
- en: '![](img/ff8fcef6-80fd-45a3-9eed-4785e0e00f6b.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ff8fcef6-80fd-45a3-9eed-4785e0e00f6b.png)'
- en: 'We can see, the tool has not discovered any issues with this file. There is
    no similar file that contains bugs in the `CPAcheck` archive, but we can download
    it from its site:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，该工具没有发现这个文件中的任何问题。在`CPAcheck`存档中没有包含错误的类似文件，但我们可以从其网站上下载：
- en: '[PRE35]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'We run the tool again and get the following output:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次运行该工具并获得以下输出：
- en: '![](img/ab5c77a6-4eb2-4ef5-8dea-d5ad44974a53.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab5c77a6-4eb2-4ef5-8dea-d5ad44974a53.png)'
- en: 'Now, the result is different: an error was detected. We can open an HTML report
    generated by the tool for further analysis. Besides logs and statistics, it also
    displays a flow automation graph:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，结果不同了：检测到了一个错误。我们可以打开工具生成的HTML报告进行进一步分析。除了日志和统计信息外，它还显示了流自动化图：
- en: '![](img/9fdfd67a-296b-404e-a6e3-ee5065fd6216.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9fdfd67a-296b-404e-a6e3-ee5065fd6216.png)'
- en: Formal validation methods and tools are complex and can deal with relatively
    simple applications, but they guarantee the correctness of application logic in
    all cases.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 正式验证方法和工具是复杂的，可以处理相对简单的应用程序，但它们保证了所有情况下应用程序逻辑的正确性。
- en: There's more...
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: You can find more information about CPAchecker on its website ([https://cpachecker.sosy-lab.org/index.php](https://cpachecker.sosy-lab.org/index.php)).
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在其网站上找到有关CPAchecker的更多信息（[https://cpachecker.sosy-lab.org/index.php](https://cpachecker.sosy-lab.org/index.php)）。
