["```cpp\nTEST_CASE(\"Increment\"){\n    auto increment =  [](auto value) { return value + 1;};\n\n    CHECK_EQ(2, increment(1));\n}\n```", "```cpp\nTEST_CASE(\"Increment\"){\n    auto increment =  [](int value) { return value + 1;};\n\n    CHECK_EQ(2, increment(1));\n}\n```", "```cpp\nTEST_CASE(\"Increment\"){\n    auto increment =  [](int value) -> int { return value + 1;};\n\n    CHECK_EQ(2, increment(1));\n}\n```", "```cpp\nTEST_CASE(\"One\"){\n    auto one =  []{ return 1;};\n\n    CHECK_EQ(1, one());\n}\n```", "```cpp\nTEST_CASE(\"Capture value\"){\n    int value = 5;\n    auto addToValue =  [value](int toAdd) { return value + toAdd;};\n\n    CHECK_EQ(6, addToValue(1));\n}\n```", "```cpp\nTEST_CASE(\"Capture value by reference\"){\n    int value = 5;\n    auto addToValue =  [&value](int toAdd) { return value + toAdd;};\n\n    CHECK_EQ(6, addToValue(1));\n}\n```", "```cpp\nTEST_CASE(\"Capture all values by value\"){\n    int first = 5;\n    int second = 10;\n    auto addToValues = [=](int toAdd) { return first + second + \n        toAdd;};\n    CHECK_EQ(16, addToValues(1));\n}\n```", "```cpp\nTEST_CASE(\"Capture all values by reference\"){\n    int first = 5;\n    int second = 10;\n    auto addToValues = [&](int toAdd) { return first + second + \n        toAdd;};\n    CHECK_EQ(16, addToValues(1));\n}\n```", "```cpp\nTEST_CASE(\"Increment mutable - NOT RECOMMENDED\"){\n    auto increment =  [](int& value) mutable { return ++value;};\n\n    int value = 1;\n    CHECK_EQ(2, increment(value));\n    CHECK_EQ(2, value);\n}\n\n```", "```cpp\nTEST_CASE(\"Increment\"){\n    auto one = []() consteval { return 1;};\n\n    CHECK_EQ(1, one());\n}\n```", "```cpp\nTEST_CASE(\"Increment\"){\n    auto increment =  [](int value) noexcept { return value + 1;};\n\n    CHECK_EQ(2, increment(1));\n}\n\n```", "```cpp\nTEST_CASE(\"Increment\"){\n    auto increment =  [](int value) throw() { return value + 1;};\n\n    CHECK_EQ(2, increment(1));\n}\n```", "```cpp\nTEST_CASE(\"Increment\"){\n    auto increment =  [] <typename T>(T value) -> requires \n        NumericType<T> { return value + 1;};\n\n    CHECK_EQ(2, increment(1));\n}\n```", "```cpp\nTEST_CASE(\"Increment\"){\n    auto increment =  [](const int value) { return plus<int>()(value, \n        1); };\n\n    CHECK_EQ(2, increment(1));\n}\n```", "```cpp\nnamespace Increment{\n    int increment(const int value){\n        return plus<int>()(value, 1);\n    };\n}\n\nTEST_CASE(\"Increment\"){\n    CHECK_EQ(2, Increment::increment(1));\n}\n```", "```cpp\nTEST_CASE(\"Increment\"){\n    auto increment = bind(plus<int>(), _1, 1);\n\n    CHECK_EQ(2, increment(1));\n}\n```", "```cpp\nauto curriedPower = [](const int base) {\n    return [base](const int exponent) {\n        return pow(base, exponent);\n    };\n};\n\nTEST_CASE(\"Power and curried power\"){\n    CHECK_EQ(16, pow(2, 4));\n    CHECK_EQ(16, curriedPower(2)(4));\n}\n```", "```cpp\n    auto powerOf2 = curriedPower(2);\n    CHECK_EQ(16, powerOf2(4));\n```", "```cpp\ntemplate<typename F>\nauto curry2(F f){\n    return [=](auto first){\n        return [=](auto second){\n            return f(first, second);\n        };\n    };\n}\n```", "```cpp\nTEST_CASE(\"Power and curried power\"){\n    auto power = [](const int base, const int exponent){\n        return pow(base, exponent);\n    };\n    auto curriedPower = curry2(power);\n    auto powerOf2 = curriedPower(2);\n    CHECK_EQ(16, powerOf2(4));\n}\n```", "```cpp\nauto powerOf2 = [](const int exponent){\n    return pow(2, exponent);\n};\n\nauto increment = [](const int value){\n    return value + 1;\n};\n```", "```cpp\nTEST_CASE(\"Composition\"){\n    auto incrementPowerOf2 = [](const int exponent){\n        return increment(powerOf2(exponent));\n    };\n\n    CHECK_EQ(9, incrementPowerOf2(3));\n}\n```", "```cpp\nnamespace Functions{\n    int incrementPowerOf2(const int exponent){\n        return increment(powerOf2(exponent));\n    };\n}\n\nTEST_CASE(\"Composition\"){\n    CHECK_EQ(9, Functions::incrementPowerOf2(3));\n}\n```", "```cpp\ntemplate <class F, class G>\nauto compose(F f, G g){\n    return [=](auto value){return f(g(value));};\n}\n\nTEST_CASE(\"Composition\"){\n    auto incrementPowerOf2 = compose(increment, powerOf2); \n\n    CHECK_EQ(9, incrementPowerOf2(3));\n}\n```", "```cpp\nauto isEven = [](const auto number){\n    return number % 2 == 0;\n};\n\nauto isMultipleOf3 = [](const auto number){\n    return number % 3 == 0;\n};\n\nauto sumOfMultiplesOf6 = [](const auto& numbers){\n    return ranges::accumulate(\n            numbers | ranges::view::filter(isEven) | \n                ranges::view::filter(isMultipleOf3), 0);\n};\n\nTEST_CASE(\"Sum of even numbers and of multiples of 6\"){\n    list<int> numbers{1, 2, 5, 6, 10, 12, 17, 25};\n\n    CHECK_EQ(18, sumOfMultiplesOf6(numbers));\n}\n```"]