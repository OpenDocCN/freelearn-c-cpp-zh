- en: '*Chapter 1*: Installing LLVM'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章：安装LLVM
- en: To learn how to work with LLVM, it is best to begin by compiling LLVM from the
    source. LLVM is an umbrella project, and its GitHub repository contains the sources
    for all the projects that belong to LLVM. Each LLVM project is in a top-level
    directory of the repository. Besides cloning the repository, your system must
    also have all tools that are required by the build system installed.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何使用LLVM，最好从源代码编译LLVM开始。LLVM是一个综合项目，其GitHub存储库包含属于LLVM的所有项目的源代码。每个LLVM项目都在存储库的顶级目录中。除了克隆存储库外，您的系统还必须安装构建系统所需的所有工具。
- en: 'In this chapter, you will learn about the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将了解以下主题：
- en: Getting the prerequisites ready, which will show you how to set up your build
    system.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备先决条件，将向您展示如何设置构建系统。
- en: Building with CMake, which will cover how to compile and install the LLVM core
    libraries and Clang with CMake and Ninja.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用CMake构建，将介绍如何使用CMake和Ninja编译和安装LLVM核心库和Clang。
- en: Customizing the build process, which will talk about the various way we can
    influence the build process.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定制构建过程，将讨论我们可以影响构建过程的各种方式。
- en: Getting the prerequisites ready
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备先决条件
- en: To work with LLVM, your development system must run a common operating system
    such as Linux, FreeBSD, macOS, or Windows. Building LLVM and Clang with debug
    symbols enabled easily need tens of gigabytes of disk space, so be sure that your
    system has plenty of disk space available – in this scenario, you should have
    30 GB of free space.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用LLVM，您的开发系统必须运行常见的操作系统，如Linux，FreeBSD，macOS或Windows。启用调试符号构建LLVM和Clang很容易需要数十GB的磁盘空间，因此请确保您的系统有足够的磁盘空间可用-在这种情况下，您应该有30GB的可用空间。
- en: The required disk space depends heavily on the chosen build options. For example,
    building only the LLVM core libraries in release mode, while targeting only one
    platform, requires about 2 GB of free disk space, which is the bare minimum needed.
    To reduce compile times, a fast CPU (such as a quadcore CPU with 2.5 GHz clock
    speed) and a fast SSD would also be helpful.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的磁盘空间严重依赖于所选择的构建选项。例如，仅在发布模式下构建LLVM核心库，同时仅针对一个平台，大约需要2GB的可用磁盘空间，这是所需的最低限度。为了减少编译时间，快速的CPU（例如2.5GHz时钟速度的四核CPU）和快速的SSD也会有所帮助。
- en: It is even possible to build LLVM on a small device such as a Raspberry Pi –
    it just takes a lot of time to do so. I developed the examples in this book on
    a laptop with an Intel quadcore CPU running at 2.7 GHz clock speed, with 40 GB
    RAM and 2.5 TB SSD disk space. This system is well-suited for the development
    task at hand.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至可以在树莓派等小型设备上构建LLVM-只是需要花费很长时间。我在一台配有Intel四核CPU，时钟速度为2.7GHz，40GB RAM和2.5TB
    SSD磁盘空间的笔记本电脑上开发了本书中的示例。这个系统非常适合手头的开发任务。
- en: Your development system must have some prerequisite software installed. Let's
    review the minimal required versions of these software packages.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您的开发系统必须安装一些先决条件软件。让我们回顾一下这些软件包的最低要求版本。
- en: Note
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Linux distributions often contain more recent versions that can be used. The
    version numbers are suitable for LLVM 12\. Later versions of LLVM may require
    more recent versions of the packages mentioned here.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Linux发行版通常包含可以使用的更新版本。版本号适用于LLVM 12。LLVM的较新版本可能需要这里提到的软件包的更新版本。
- en: To check out the source from **GitHub**, you need **git** ([https://git-scm.com/](https://git-scm.com/)).
    There is no requirement for a specific version. The GitHub help pages recommend
    using at least version 1.17.10.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要从**GitHub**检出源代码，您需要**git** ([https://git-scm.com/](https://git-scm.com/))。没有特定版本的要求。GitHub帮助页面建议至少使用版本1.17.10。
- en: The LLVM project uses **CMake** ([https://cmake.org/](https://cmake.org/)) as
    the build file generator. At least version 3.13.4 is required. CMake can generate
    build files for various build systems. In this book, **Ninja** ([https://ninja-build.org/](https://ninja-build.org/))
    is being used because it is fast and available on all platforms. The latest version,
    1.9.0, is recommended.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: LLVM项目使用**CMake** ([https://cmake.org/](https://cmake.org/)) 作为构建文件生成器。至少需要版本3.13.4。CMake可以为各种构建系统生成构建文件。在本书中，使用**Ninja**
    ([https://ninja-build.org/](https://ninja-build.org/))，因为它快速且在所有平台上都可用。建议使用最新版本1.9.0。
- en: 'Obviously, you also need a **C/C++ compiler**. The LLVM projects are written
    in modern C++, based on the C++14 standard. A conforming compiler and standard
    library are required. The following compilers are known to work with LLVM 12:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，您还需要一个**C/C++编译器**。LLVM项目是用现代C++编写的，基于C++14标准。需要符合的编译器和标准库。已知以下编译器与LLVM 12兼容：
- en: gcc 5.1.0 or later
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: gcc 5.1.0或更高版本
- en: Clang 3.5 or later
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Clang 3.5或更高版本
- en: Apple Clang 6.0 or later
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apple Clang 6.0或更高版本
- en: Visual Studio 2017 or later
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio 2017或更高版本
- en: Please be aware that with further development of the LLVM project, the requirements
    for the compiler are most likely to change. At the time of writing, there are
    discussions to use C++17 and drop Visual Studio 2017 support. In general, you
    should use the latest compiler version available for your system.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，随着LLVM项目的进一步发展，编译器的要求很可能会发生变化。在撰写本文时，有讨论要使用C++17并放弃对Visual Studio 2017的支持。一般来说，您应该使用系统中可用的最新编译器版本。
- en: '**Python** ([https://python.org/](https://python.org/)) is used to generate
    the build files and to run the test suite. It should be at least version 3.6.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**Python** ([https://python.org/](https://python.org/)) 用于生成构建文件和运行测试套件。它应至少是3.6版本。'
- en: Although not covered in this book, there may be reasons why you need to use
    Make instead of Ninja. In this case, you need to use `ninja` in each command with
    `make` for the scenarios described here.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管本书未涉及，但您可能有理由需要使用Make而不是Ninja。在这种情况下，您需要在每个命令中使用`make`和本书中描述的场景。
- en: To install the prerequisite software, the easiest thing to do is use the package
    manager from your operating system. In the following sections, the commands you
    must enter to install the software for the most popular operating systems are
    shown.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装先决条件软件，最简单的方法是使用操作系统的软件包管理器。在接下来的部分中，将显示安装最受欢迎操作系统的软件所需输入的命令。
- en: Ubuntu
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ubuntu
- en: 'Ubuntu 20.04 uses the APT package manager. Most of the basic utilities are
    already installed; only the development tools are missing. To install all the
    packages at once, type the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Ubuntu 20.04使用APT软件包管理器。大多数基本实用程序已经安装好了；只有开发工具缺失。要一次安装所有软件包，请键入以下内容：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Fedora and RedHat
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Fedora和RedHat
- en: 'The package manager for Fedora 33 and RedHat Enterprise Linux 8.3 is called
    **DNF.** Like Ubuntu, most of the basic utilities are already installed. To install
    all the packages at once, type the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Fedora 33和RedHat Enterprise Linux 8.3的软件包管理器称为**DNF**。与Ubuntu一样，大多数基本实用程序已经安装好了。要一次安装所有软件包，请键入以下内容：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: FreeBSD
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: FreeBSD
- en: 'On FreeBSD 12 or later, you must use the PKG package manager. FreeBSD differs
    from Linux-based systems in that Clang is the preferred compiler. To install all
    the packages at once, type the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在FreeBSD 12或更高版本上，必须使用PKG软件包管理器。FreeBSD与基于Linux的系统不同，它更喜欢使用Clang编译器。要一次安装所有软件包，请键入以下内容：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: OS X
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OS X
- en: 'For development on OS X, it is best to install **Xcode** from the Apple store.
    While the XCode IDE is not used in this book, it comes with the required C/C++
    compilers and supporting utilities. To install the other tools, you can use the
    Homebrew package manager (https://brew.sh/). To install all the packages at once,
    type the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在OS X上进行开发时，最好从Apple商店安装**Xcode**。虽然本书中没有使用XCode IDE，但它带有所需的C/C++编译器和支持工具。要安装其他工具，可以使用Homebrew软件包管理器（https://brew.sh/）。要一次安装所有软件包，请键入以下内容：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Windows
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Windows
- en: 'Like OS X, Windows does not come with a package manager. The easiest way to
    install all the software is to use the **Chocolately** ([https://chocolatey.org/](https://chocolatey.org/))
    package manager. To install all the packages at once, type the following:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 与OS X一样，Windows没有软件包管理器。安装所有软件的最简单方法是使用**Chocolately**（[https://chocolatey.org/](https://chocolatey.org/)）软件包管理器。要一次安装所有软件包，请键入以下内容：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Please note that this only installs the build tools from `package visualstudio2019community`
    instead of `visualstudio2019buildtools`. Part of the Visual Studio 2019 installation
    is the x64 Native Tools Command Prompt for VS 2019\. Upon using this command prompt,
    the compiler is automatically added to the search path.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这只安装了来自`package visualstudio2019community`而不是`visualstudio2019buildtools`的构建工具。Visual
    Studio 2019安装的一部分是x64 Native Tools Command Prompt for VS 2019。使用此命令提示时，编译器会自动添加到搜索路径中。
- en: Configuring Git
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置Git
- en: 'The LLVM project uses Git for version control. If you have not used Git before,
    then you should do some basic configuration of Git first before continuing; that
    is, setting a username and email address. Both pieces of information are used
    if you commit changes. In the following commands, replace `Jane` with your name
    and `jane@email.org` with your email:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: LLVM项目使用Git进行版本控制。如果您以前没有使用过Git，则应该在继续之前对Git进行一些基本配置；也就是说，设置用户名和电子邮件地址。如果您提交更改，这两个信息都会被使用。在以下命令中，将`Jane`替换为您的姓名，`jane@email.org`替换为您的电子邮件：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'By default, Git uses the **vi** editor for commit messages. If you would prefer
    using another editor, then you can change the configuration in a similar way.
    To use the **nano** editor, type the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Git使用**vi**编辑器进行提交消息。如果您希望使用其他编辑器，则可以以类似的方式更改配置。要使用**nano**编辑器，请键入以下内容：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: For more information about git, please see the *Git Version Control Cookbook
    - Second Edition* by Packt Publishing ([https://www.packtpub.com/product/git-version-control-cookbook/9781782168454](https://www.packtpub.com/product/git-version-control-cookbook/9781782168454)).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 有关git的更多信息，请参阅Packt Publishing的*Git Version Control Cookbook - Second Edition*（[https://www.packtpub.com/product/git-version-control-cookbook/9781782168454](https://www.packtpub.com/product/git-version-control-cookbook/9781782168454)）。
- en: Building with CMake
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用CMake构建
- en: With the build tools ready, you can now check out all the LLVM projects from
    GitHub. The command for doing this is essentially the same on all platforms. However,
    on Windows, it is recommended to turn off auto-translation for line endings.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好构建工具后，您现在可以从GitHub检出所有LLVM项目。执行此操作的命令在所有平台上基本相同。但是，在Windows上，建议关闭行结束的自动翻译。
- en: 'Let''s review this process in three parts: cloning the repository, creating
    a build directory, and generating the build system files.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分三部分回顾这个过程：克隆存储库，创建构建目录和生成构建系统文件。
- en: Cloning the repository
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 克隆存储库
- en: 'On all non-Windows platforms, type in the following command to clone the repository:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有非Windows平台上，键入以下命令以克隆存储库：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'On Windows, you must add the option to disable line endings from being auto-translated.
    Here, type the following:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，您必须添加选项以禁用自动翻译行结束。在这里，键入以下内容：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This `git` command clones the latest source code from GitHub into a local directory
    named `llvm-project`. Now, change the current directory to the new `llvm-project`
    directory with the following command:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`git`命令将最新的源代码从GitHub克隆到名为`llvm-project`的本地目录中。现在，使用以下命令将当前目录更改为新的`llvm-project`目录：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Inside the directory is all the LLVM projects, each in its own directory. Most
    notably, the LLVM core libraries are in the `llvm` subdirectory. The LLVM project
    uses branches for subsequent release development ("release/12.x") and tags ("llvmorg-12.0.0")
    to mark a certain release. With the preceding `clone` command, you get the current
    development state. This book uses LLVM 12\. To check out the first release of
    LLVM 12, type the following:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在目录中包含了所有LLVM项目，每个项目都在自己的目录中。值得注意的是，LLVM核心库位于`llvm`子目录中。LLVM项目使用分支进行后续发布的开发（“release/12.x”）和标记（“llvmorg-12.0.0”）来标记特定的发布。使用前面的`clone`命令，您可以获得当前的开发状态。本书使用LLVM
    12。要检出LLVM 12的第一个发布版本，请键入以下内容：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: With this, you have cloned the whole repository and checked out a tag. This
    is the most flexible approach.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，你已经克隆了整个存储库并检出了一个标签。这是最灵活的方法。
- en: Git also allows you to clone only a branch or a tag (including history). With
    `git clone --branch llvmorg-12.0.0 https://github.com/llvm/llvm-project`, you
    check out the same label, as we did previously, but only the history for this
    tag is cloned. With the additional`–-depth=1` option, you prevent the history
    from being cloned too. This saves time and space but obviously limits what you
    can do locally.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Git还允许你只克隆一个分支或一个标签（包括历史记录）。使用`git clone --branch llvmorg-12.0.0 https://github.com/llvm/llvm-project`，你检出了与之前相同的标签，但只克隆了该标签的历史记录。通过额外的`--depth=1`选项，你可以防止克隆历史记录。这样可以节省时间和空间，但显然会限制你在本地可以做什么。
- en: The next step is to create a build directory.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建一个构建目录。
- en: Creating a build directory
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个构建目录
- en: 'Unlike many other projects, LLVM does not support inline builds and requires
    a separate `build` directory. This can easily be created inside the `llvm-project`
    directory. Change into this directory with the following command:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 与许多其他项目不同，LLVM不支持内联构建，需要一个单独的`build`目录。这可以很容易地在`llvm-project`目录内创建。使用以下命令切换到此目录：
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then, create a build directory called `build` for simplicity. Here, the commands
    for Unix and Windows systems differ. On Unix-likes system, you should use the
    following command:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，为简单起见，创建一个名为`build`的构建目录。在这里，Unix和Windows系统的命令不同。在类Unix系统上，你应该使用以下命令：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'On Windows, you should use the following command:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，你应该使用以下命令：
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then, change into the `build` directory:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，切换到`build`目录：
- en: '[PRE14]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now, you are ready to create the build system files with the CMake tool inside
    this directory.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经准备好在这个目录中使用CMake工具创建构建系统文件。
- en: Generating the build system files
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成构建系统文件
- en: 'To generate the build system files that will compile LLVM and Clang using Ninja,
    run the following command:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成使用Ninja编译LLVM和Clang的构建系统文件，请运行以下命令：
- en: '[PRE15]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Tip
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: On Windows, the backslash character, `\`, is the directory name separator. On
    Windows, CMake automatically translates the Unix separator, `/`, into the Windows
    one.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，反斜杠字符`\`是目录名称分隔符。在Windows上，CMake会自动将Unix分隔符`/`转换为Windows分隔符。
- en: 'The `-G` option tells CMake which system to generate build files for. The most
    often used options are as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`-G`选项告诉CMake为哪个系统生成构建文件。最常用的选项如下：'
- en: '`Ninja`: For the Ninja build system'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Ninja`：对于Ninja构建系统'
- en: '`Unix Makefiles`: For GNU Make'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Unix Makefiles`：对于GNU Make'
- en: '`Visual Studio 15 VS2017` and `Visual Studio 16 VS2019`: For Visual Studio
    and MS Build'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Visual Studio 15 VS2017`和`Visual Studio 16 VS2019`：对于Visual Studio和MS Build'
- en: '`Xcode`: For XCode projects'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Xcode`：对于XCode项目'
- en: The generation process can be influenced by setting various variables with the
    `–D` option. Usually, they are prefixed with `CMAKE_` (if defined by CMake) or
    `LLVM_` (if defined by LLVM). With the `LLVM_ENABLE_PROJECTS=clang` variable setting,
    CMake generates build files for Clang in addition to LLVM. The last part of the
    command tells CMake where to find the LLVM core library source. More on that in
    the next section.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 生成过程可以通过使用`-D`选项设置各种变量来进行影响。通常，它们以`CMAKE_`（如果由CMake定义）或`LLVM_`（如果由LLVM定义）为前缀。通过设置`LLVM_ENABLE_PROJECTS=clang`变量，CMake会生成Clang的构建文件，除了LLVM。命令的最后一部分告诉CMake在哪里找到LLVM核心库源代码。关于这一点，我们将在下一节详细介绍。
- en: 'Once the build files have been generated, LLVM and Clang can be compiled with
    the following command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦构建文件生成，LLVM和Clang可以使用以下命令编译：
- en: '[PRE16]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Depending on the hardware resources, this command takes between 15 minutes (a
    server with lots of CPU cores and memory and fast storage) and several hours (dual-core
    Windows notebook with limited memory) to run. By default, Ninja utilizes all available
    CPU cores. This is good for compilation speed but may prevent other tasks from
    running. For example, on a Windows-based notebook, it is almost impossible to
    surf the internet while Ninja is running. Fortunately, you can limit resource
    usage with the `–j` option.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 根据硬件资源的不同，这个命令需要花费15分钟（具有大量CPU核心和内存以及快速存储的服务器）到几个小时（双核Windows笔记本，内存有限）不等。默认情况下，Ninja利用所有可用的CPU核心。这对于编译速度很好，但可能会阻止其他任务运行。例如，在基于Windows的笔记本上，几乎不可能在Ninja运行时上网冲浪。幸运的是，你可以使用`-j`选项限制资源使用。
- en: 'Let''s assume you have four CPU cores available and that Ninja should only
    use two (because you have parallel tasks to run). Here, you should use the following
    command for compilation:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有四个CPU核心可用，而Ninja只应该使用两个（因为你有并行任务要运行）。在这里，你应该使用以下命令进行编译：
- en: '[PRE17]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Once compilation is finished, a best practice is to run the test suite to check
    if everything works as expected:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦编译完成，最佳实践是运行测试套件，以检查一切是否按预期工作：
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Again, the runtime of this command varies widely due to the available hardware
    resources. The Ninja `check-all` target runs all test cases. Targets are generated
    for each directory containing test cases. Using `check-llvm`, instead of `check-all`
    runs the LLVM tests but not the Clang tests; `check-llvm-codegen` only runs the
    tests in the `CodeGen` directory from LLVM (that is, the `llvm/test/CodeGen` directory).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令的运行时间因可用的硬件资源而变化很大。Ninja `check-all`目标运行所有测试用例。为包含测试用例的每个目录生成目标。使用`check-llvm`而不是`check-all`运行LLVM测试但不运行Clang测试；`check-llvm-codegen`只运行LLVM的`CodeGen`目录中的测试（即`llvm/test/CodeGen`目录）。
- en: 'You can also do a quick manual check. One of the LLVM applications you will
    be using is `-version` option, it shows the LLVM version of it, its host CPU,
    and all its supported architectures:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以进行快速手动检查。你将使用的LLVM应用程序之一是`-version`选项，它显示它的LLVM版本，它的主机CPU以及所有支持的架构：
- en: '[PRE19]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If you have trouble getting LLVM compiled, then you should consult the *Common
    Problems* section of the *Getting Started with the LLVM System* documentation
    ([https://llvm.org/docs/GettingStarted.html#common-problems](https://llvm.org/docs/GettingStarted.html#common-problems))
    for solutions to typical problems.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在编译LLVM时遇到问题，应该查阅*Getting Started with the LLVM System*文档的*Common Problems*部分（[https://llvm.org/docs/GettingStarted.html#common-problems](https://llvm.org/docs/GettingStarted.html#common-problems)）以解决常见问题。
- en: 'Finally, install the binaries:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，安装二进制文件：
- en: '[PRE20]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: On a Unix-like system, the install directory is `/usr/local`. On Windows, `C:\Program
    Files\LLVM` is used. This can be changed, of course. The next section explains
    how.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在类Unix系统上，安装目录为`/usr/local`。在Windows上，使用`C:\Program Files\LLVM`。当然可以更改。下一节将解释如何更改。
- en: Customizing the build process
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义构建过程
- en: The CMake system uses a project description in the `CMakeLists.txt` file. The
    top-level file is in the `llvm` directory; that is, `llvm/CMakeLists.txt`. Other
    directories also contain `CMakeLists.txt` files, which are recursively included
    during the build-file generation.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: CMake系统使用`CMakeLists.txt`文件中的项目描述。顶层文件位于`llvm`目录中；即`llvm/CMakeLists.txt`。其他目录也包含`CMakeLists.txt`文件，在构建文件生成期间递归包含。
- en: Based on the information provided in the project description, CMake checks which
    compilers have been installed, detects libraries and symbols, and creates the
    build system files, such as `build.ninja` or `Makefile` (depending on the chosen
    generator). It is also possible to define reusable modules, such as a function
    to detect if LLVM is installed. These scripts are placed in the special `cmake`
    directory (`llvm/cmake`), which is searched automatically during the generation
    process.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 根据项目描述中提供的信息，CMake检查已安装的编译器，检测库和符号，并创建构建系统文件，例如`build.ninja`或`Makefile`（取决于选择的生成器）。还可以定义可重用的模块，例如检测LLVM是否已安装的函数。这些脚本放置在特殊的`cmake`目录（`llvm/cmake`），在生成过程中会自动搜索。
- en: The build process can be customized by defining CMake variables. The`–D` command-line
    option is used to set a variable to a value. These variables are used in CMake
    scripts. Variables defined by CMake itself are almost always prefixed with `CMAKE_`,
    and these variables can be used in all projects. Variables defined by LLVM are
    prefixed with `LLVM_` but they can only be used if the project definition includes
    the use of LLVM.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 构建过程可以通过定义CMake变量进行自定义。使用`-D`命令行选项设置变量的值。这些变量在CMake脚本中使用。CMake本身定义的变量几乎总是以`CMAKE_`为前缀，并且这些变量可以在所有项目中使用。LLVM定义的变量以`LLVM_`为前缀，但只能在项目定义中包括LLVM使用时使用。
- en: Variables defined by CMake
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CMake定义的变量
- en: Some variables are initialized with the values of environment variables. The
    most notable are `CC` and `CXX`, which define the C and C++ compilers to be used
    for building. CMake tries to locate a C and a C++ compiler automatically, using
    the current shell search path. It picks the first compiler that's found. If you
    have several compilers installed, such as gcc and Clang or different versions
    of Clang, then this might not be the compiler you want for building LLVM.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 一些变量使用环境变量的值进行初始化。最显著的是`CC`和`CXX`，它们定义了用于构建的C和C++编译器。CMake会尝试自动定位C和C++编译器，使用当前的shell搜索路径。它会选择找到的第一个编译器。如果安装了多个编译器，例如gcc和Clang或不同版本的Clang，则这可能不是您要用于构建LLVM的编译器。
- en: 'Suppose you like to use `clang9` as a C compiler and clang++9 as a C++ compiler.
    Here, you can invoke CMake in a Unix shell in the following way:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想将`clang9`用作C编译器，将`clang++9`用作C++编译器。在Unix shell中，可以按以下方式调用CMake：
- en: '[PRE21]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This sets the value of the environment variables for the invocation of `cmake`.
    If necessary, you can specify an absolute path for the compiler executables.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这将设置`cmake`调用时环境变量的值。如果需要，您可以为编译器可执行文件指定绝对路径。
- en: '`CC` is the default value of the `CMAKE_C_COMPILER` CMake variable, while `CXX`
    is the default value of the `CMAKE_CXX_COMPILER` CMake variable. Instead of using
    the environment variables, you can set the CMake variables directly. This is equivalent
    to the preceding call:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`CC`是`CMAKE_C_COMPILER` CMake变量的默认值，而`CXX`是`CMAKE_CXX_COMPILER` CMake变量的默认值。您可以直接设置CMake变量，而不是使用环境变量。这相当于前面的调用：'
- en: '[PRE22]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Other useful variables defined by CMake are as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: CMake定义的其他有用变量如下：
- en: '`CMAKE_INSTALL_PREFIX`: A path prefix that is prepended to every path during
    installation. The default is `/usr/local` on Unix and `C:\Program Files\<Project>`
    on Windows. To install LLVM in the `/opt/llvm` directory, you must specify `-DCMAKE_INSTALL_PREFIX=/opt/llvm`.
    The binaries are copied to `/opt/llvm/bin`, the library files are copied to `/opt/llvm/lib`,
    and so on.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CMAKE_INSTALL_PREFIX`：安装期间添加到每个路径前面的路径前缀。Unix上默认为`/usr/local`，Windows上为`C:\Program
    Files\<Project>`。要在`/opt/llvm`目录中安装LLVM，必须指定`-DCMAKE_INSTALL_PREFIX=/opt/llvm`。二进制文件将被复制到`/opt/llvm/bin`，库文件将被复制到`/opt/llvm/lib`，依此类推。'
- en: '`CMAKE_BUILD_TYPE`: Different types of builds require different settings. For
    example, a debug build needs to specify options for generating debug symbols and
    are usually linking against debug versions of system libraries. In contrast, a
    release build uses optimization flags and links against production versions of
    libraries. This variable is only used for build systems that can only handle one
    build type, such as Ninja or Make. For IDE build systems, all variants are generated,
    and you must use the mechanism of the IDE to switch between build types. Some
    possible values are as follows:'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CMAKE_BUILD_TYPE`：不同类型的构建需要不同的设置。例如，调试构建需要指定生成调试符号的选项，并且通常链接到系统库的调试版本。相比之下，发布构建使用优化标志，并链接到库的生产版本。此变量仅用于只能处理一种构建类型的构建系统，例如Ninja或Make。对于IDE构建系统，会生成所有变体，您必须使用IDE的机制在构建类型之间切换。一些可能的值如下：'
- en: '`DEBUG`: Build with debug symbols'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`DEBUG`：带有调试符号的构建'
- en: '`RELEASE`: Build with optimization for speed'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`RELEASE`：用于速度优化的构建'
- en: '`RELWITHDEBINFO`: Release build with debug symbols'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`RELWITHDEBINFO`：带有调试符号的发布版本'
- en: '`MINSIZEREL`: Build with optimization for size'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`MINSIZEREL`：针对大小进行优化的构建'
- en: The default build type is `DEBUG`. To generate build files for a release build,
    you must specify `-DCMAKE_BUILD_TYPE=RELEASE`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的构建类型是`DEBUG`。要为发布构建生成构建文件，必须指定`-DCMAKE_BUILD_TYPE=RELEASE`。
- en: '`CMAKE_C_FLAGS` and `CMAKE_CXX_FLAGS`: These are extra flags that are used
    when we''re compiling C and C++ source files. The initial values are taken from
    the `CFLAGS` and `CXXFLAGS` environment variables, which can be used as alternatives.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CMAKE_C_FLAGS`和`CMAKE_CXX_FLAGS`：这些是在编译C和C++源文件时使用的额外标志。初始值取自`CFLAGS`和`CXXFLAGS`环境变量，可以用作替代。'
- en: '`CMAKE_MODULE_PATH`: Specifies additional directories that are searched for
    in CMake modules. The specified directories are searched before the default ones.
    The value is a semicolon-separated list of directories.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CMAKE_MODULE_PATH`：指定要在CMake模块中搜索的附加目录。指定的目录将在默认目录之前搜索。该值是一个用分号分隔的目录列表。'
- en: '`PYTHON_EXECUTABLE`: If the Python interpreter is not found or if the wrong
    one is picked if you have installed multiple versions of it, you can set this
    variable to the path of the Python binary. This variable only takes effect if
    the Python module of CMake is included (which is the case for LLVM).'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PYTHON_EXECUTABLE`：如果找不到Python解释器，或者如果安装了多个版本并选择了错误的版本，则可以将此变量设置为Python二进制文件的路径。只有在包含CMake的Python模块时，此变量才会生效（这是LLVM的情况）。'
- en: 'CMake provides built-in help for variables. The `--help-variable var` option
    prints help for the `var` variable. For instance, you can type the following to
    get help for `CMAKE_BUILD_TYPE`:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: CMake为变量提供了内置帮助。`--help-variable var`选项会打印`var`变量的帮助信息。例如，您可以输入以下内容以获取`CMAKE_BUILD_TYPE`的帮助：
- en: '[PRE23]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You can also list all the variables with the following command:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用以下命令列出所有变量：
- en: '[PRE24]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This list is very long. You may want to pipe the output to `more` or a similar
    program.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 此列表非常长。您可能希望将输出导入`more`或类似的程序。
- en: Variables defined by LLVM
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LLVM定义的变量
- en: 'The variables defined by LLVM work in the same way as those defined by CMake,
    except that there is no built-in help. The most useful variables are as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: LLVM定义的变量与CMake定义的变量的工作方式相同，只是没有内置帮助。最有用的变量如下：
- en: '`LLVM_TARGETS_TO_BUILD`: LLVM supports code generation for different CPU architectures.
    By default, all these targets are built. Use this variable to specify the list
    of targets to build, separated by semicolons. The current targets are `AArch64`,
    `AMDGPU`, `ARM`, `BPF`, `Hexagon`, `Lanai`, `Mips`, `MSP430`, `NVPTX`, `PowerPC`,
    `RISCV`, `Sparc`, `SystemZ`, `WebAssembly`, `X86`, and `XCore`. `all` can be used
    as shorthand for all targets. The names are case-sensitive. To only enable PowerPC
    and the System Z target, you must specify `-DLLVM_TARGETS_TO_BUILD="PowerPC;SystemZ"`.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LLVM_TARGETS_TO_BUILD`：LLVM支持不同CPU架构的代码生成。默认情况下，会构建所有这些目标。使用此变量指定要构建的目标列表，用分号分隔。当前的目标有`AArch64`、`AMDGPU`、`ARM`、`BPF`、`Hexagon`、`Lanai`、`Mips`、`MSP430`、`NVPTX`、`PowerPC`、`RISCV`、`Sparc`、`SystemZ`、`WebAssembly`、`X86`和`XCore`。`all`可以用作所有目标的简写。名称区分大小写。要仅启用PowerPC和System
    Z目标，必须指定`-DLLVM_TARGETS_TO_BUILD="PowerPC;SystemZ"`。'
- en: '`LLVM_ENABLE_PROJECTS`: This is a list of the projects you want to build, separated
    by semicolons. The source for the projects must be at the same level as the `llvm`
    directory (side-by-side layout). The current list is `clang`, `clang-tools-extra`,
    `compiler-rt`, `debuginfo-tests`, `lib`, `libclc`, `libcxx`, `libcxxabi`, `libunwind`,
    `lld`, `lldb`, `llgo`, `mlir`, `openmp`, `parallel-libs`, `polly`, and `pstl`.
    `all` can be used as shorthand for all the projects in this list. To build Clang
    and llgo together with LLVM, you must specify `-DLLVM_ENABLE_PROJECT="clang;llgo"`.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LLVM_ENABLE_PROJECTS`：这是要构建的项目列表，用分号分隔。项目的源代码必须与`llvm`目录处于同一级别（并排布局）。当前列表包括`clang`、`clang-tools-extra`、`compiler-rt`、`debuginfo-tests`、`lib`、`libclc`、`libcxx`、`libcxxabi`、`libunwind`、`lld`、`lldb`、`llgo`、`mlir`、`openmp`、`parallel-libs`、`polly`和`pstl`。`all`可以用作此列表中所有项目的简写。要与LLVM一起构建Clang和llgo，必须指定`-DLLVM_ENABLE_PROJECT="clang;llgo"`。'
- en: '`LLVM_ENABLE_ASSERTIONS`: If set to `ON`, then assertion checks are enabled.
    These checks help find errors and are very useful during development. The default
    value is `ON` for a `DEBUG` build and `OFF` otherwise. To turn assertion checks
    on (for example, for a `RELEASE` build), you must specify `–DLLVM_ENABLE_ASSERTIONS=ON`.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LLVM_ENABLE_ASSERTIONS`：如果设置为`ON`，则启用断言检查。这些检查有助于发现错误，在开发过程中非常有用。对于`DEBUG`构建，默认值为`ON`，否则为`OFF`。要打开断言检查（例如，对于`RELEASE`构建），必须指定`–DLLVM_ENABLE_ASSERTIONS=ON`。'
- en: '`LLVM_ENABLE_EXPENSIVE_CHECKS`: This enables some expensive checks that can
    really slow down your compilation speed or consume large amounts of memory. The
    default value is `OFF`. To turn these checks on, you must specify `-DLLVM_ENABLE_EXPENSIVE_CHECKS=ON`.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LLVM_ENABLE_EXPENSIVE_CHECKS`：这将启用一些可能会显著减慢编译速度或消耗大量内存的昂贵检查。默认值为`OFF`。要打开这些检查，必须指定`-DLLVM_ENABLE_EXPENSIVE_CHECKS=ON`。'
- en: '`LLVM_APPEND_VC_REV`: LLVM tools such as `llc` display the LLVM version they
    are based on, besides other information if the`–version` command-line option is
    provided. This version information is based on the `LLVM_REVISION` C macro. By
    default, not only the LLVM version but also the Git hash of the latest commit
    is part of the version information. This is handy in case you are following the
    development of the master branch because it makes it clear which Git commit the
    tool is based on. If this isn''t required, then this can be turned off with `–DLLVM_APPEND_VC_REV=OFF`.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LLVM_APPEND_VC_REV`：LLVM工具（如`llc`）显示它们所基于的LLVM版本，以及其他信息（如果提供了`--version`命令行选项）。此版本信息基于`LLVM_REVISION`
    C宏。默认情况下，版本信息不仅包括LLVM版本，还包括最新提交的Git哈希。如果您正在跟踪主分支的开发，这很方便，因为它清楚地指出了工具所基于的Git提交。如果不需要这个信息，则可以使用`–DLLVM_APPEND_VC_REV=OFF`关闭。'
- en: '`LLVM_ENABLE_THREADS`: LLVM automatically includes thread support if a threading
    library is detected (usually, the pthreads library). Furthermore, in this case,
    LLVM assumes that the compiler supports `-DLLVM_ENABLE_THREADS=OFF`.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LLVM_ENABLE_THREADS`：如果检测到线程库（通常是pthread库），LLVM会自动包含线程支持。此外，在这种情况下，LLVM假定编译器支持`-DLLVM_ENABLE_THREADS=OFF`。'
- en: '`LLVM_ENABLE_EH`: The LLVM projects do not use C++ exception handling, so they
    turn exception support off by default. This setting can be incompatible with other
    libraries your project is linking with. If needed, you can enable exception support
    by specifying `–DLLVM_ENABLE_EH=ON`.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LLVM_ENABLE_EH`：LLVM项目不使用C++异常处理，因此默认情况下关闭异常支持。此设置可能与您的项目链接的其他库不兼容。如果需要，可以通过指定`–DLLVM_ENABLE_EH=ON`来启用异常支持。'
- en: '`LLVM_ENABLE_RTTI`: LVM uses a lightweight, self-built system for runtime type
    information. Generating C++ RTTI is turned off by default. Like the exception
    handling support, this may be incompatible with other libraries. To turn generation
    for C++ RTTI on, you must specify `–DLLVM_ENABLE_RTTI=ON`.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LLVM_ENABLE_RTTI`：LVM使用了一个轻量级的、自建的运行时类型信息系统。默认情况下，生成C++ RTTI是关闭的。与异常处理支持一样，这可能与其他库不兼容。要打开C++
    RTTI的生成，必须指定`–DLLVM_ENABLE_RTTI=ON`。'
- en: '`LLVM_ENABLE_WARNINGS`: Compiling LLVM should generate no warning messages
    if possible. Due to this, the option to print warning messages is turned on by
    default. To turn it off, you must specify `–DLLVM_ENABLE_WARNINGS=OFF`.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LLVM_ENABLE_WARNINGS`：编译LLVM应尽可能不生成警告消息。因此，默认情况下打印警告消息的选项是打开的。要关闭它，必须指定`–DLLVM_ENABLE_WARNINGS=OFF`。'
- en: '`LLVM_ENABLE_PEDANTIC`: The LLVM source should be C/C++ language standard-conforming;
    hence, pedantic checking of the source is enabled by default. If possible, compiler-specific
    extensions are also disabled. To reverse this setting, you must specify `–DLLVM_ENABLE_PEDANTIC=OFF`.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LLVM_ENABLE_PEDANTIC`：LLVM源代码应符合C/C++语言标准；因此，默认情况下启用源代码的严格检查。如果可能，还会禁用特定于编译器的扩展。要取消此设置，必须指定`–DLLVM_ENABLE_PEDANTIC=OFF`。'
- en: '`LLVM_ENABLE_WERROR`: If set to `ON`, then all the warnings are treated as
    errors – the compilation aborts as soon as warnings are found. It helps to find
    all the remaining warnings in the source. By default, it is turned off. To turn
    it on, you must specify `–DLLVM_ENABLE_WERROR=ON`.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LLVM_ENABLE_WERROR`：如果设置为`ON`，则所有警告都被视为错误-一旦发现警告，编译就会中止。它有助于找到源代码中所有剩余的警告。默认情况下，它是关闭的。要打开它，必须指定`–DLLVM_ENABLE_WERROR=ON`。'
- en: '`LLVM_OPTIMIZED_TABLEGEN`: Usually, the tablegen tool is built with the same
    options as the other parts of LLVM. At the same time, tablegen is used to generate
    large parts of the code generator. As a result, tablegen is much slower in a debug
    build, thus increasing the compile time noticeably. If this option is set to `ON`,
    then tablegen is compiled with optimization turned on, even for a debug build,
    possibly reducing compile time. The default is `OFF`. To turn this on, you must
    specify `–DLLVM_OPTIMIZED_TABLEGEN=ON`.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LLVM_OPTIMIZED_TABLEGEN`：通常，tablegen工具与LLVM的其他部分使用相同的选项构建。同时，tablegen用于生成代码生成器的大部分代码。因此，在调试构建中，tablegen的速度要慢得多，从而显著增加了编译时间。如果将此选项设置为`ON`，则即使在调试构建中，tablegen也将使用优化进行编译，可能会减少编译时间。默认为`OFF`。要打开它，必须指定`–DLLVM_OPTIMIZED_TABLEGEN=ON`。'
- en: '`LLVM_USE_SPLIT_DWARF`: If the build compiler is gcc or Clang, then turning
    on this option will instruct the compiler to generate the DWARF debug information
    in a separate file. The reduced size of the object files reduces the link time
    of debug builds significantly. The default is `OFF`. To turn this on, you must
    specify `-LLVM_USE_SPLIT_DWARF=ON`.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LLVM_USE_SPLIT_DWARF`：如果构建编译器是gcc或Clang，则打开此选项将指示编译器将DWARF调试信息生成到单独的文件中。对象文件的减小尺寸显著减少了调试构建的链接时间。默认为`OFF`。要打开它，必须指定`-LLVM_USE_SPLIT_DWARF=ON`。'
- en: LLVM defines many more CMake variables. You can find the complete list in the
    LLVM documentation of CMake ([https://releases.llvm.org/12.0.0/docs/CMake.html#llvm-specific-variables](https://releases.llvm.org/12.0.0/docs/CMake.html#llvm-specific-variables)).
    The preceding list only contains the ones you are likely to need.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: LLVM定义了许多更多的CMake变量。您可以在LLVM CMake文档中找到完整的列表([https://releases.llvm.org/12.0.0/docs/CMake.html#llvm-specific-variables](https://releases.llvm.org/12.0.0/docs/CMake.html#llvm-specific-variables))。前面的列表只包含您可能需要的变量。
- en: Summary
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you prepared your development machine to compile LLVM. You
    cloned the LLVM GitHub repository and compiled your own versions of LLVM and Clang.
    The build process can be customized with CMake variables. You also learned about
    useful variables and how to change them. Equipped with this knowledge, you can
    tweak LLVM for your needs.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您准备好了开发机器来编译LLVM。您克隆了LLVM GitHub存储库，并编译了自己的LLVM和Clang版本。构建过程可以使用CMake变量进行自定义。您还了解了有用的变量以及如何更改它们。掌握了这些知识，您可以根据自己的需求调整LLVM。
- en: In the next chapter, we will take a closer look at the contents of the LLVM
    mono repository. You will learn which projects are in it and how the projects
    are structured. You will then use this information to create your own project
    using LLVM libraries. Finally, you will learn how to compile LLVM for a different
    CPU architecture.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将更仔细地查看LLVM单一存储库的内容。您将了解其中包含哪些项目以及这些项目的结构。然后，您将使用这些信息来使用LLVM库创建自己的项目。最后，您将学习如何为不同的CPU架构编译LLVM。
