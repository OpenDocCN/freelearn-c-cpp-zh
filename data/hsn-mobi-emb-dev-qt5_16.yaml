- en: Cross Compiling and Remote Debugging
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交叉编译和远程调试
- en: Since there is a good chance of using a Linux system on an embedded device,
    we will go through the steps needed to set up a cross compiler on Linux. Mobile
    phone platforms have their own ways of development, which will also be discussed.
    You will learn to compile cross-platforms for a different device and debug remotely
    via a network or USB connection. We will go through various mobile platforms.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在嵌入式设备上使用Linux系统的可能性很大，我们将介绍在Linux上设置交叉编译器的步骤。手机平台有自己的开发方式，这也会被讨论。你将学习如何为不同设备编译跨平台应用，并通过网络或USB连接进行远程调试。我们将探讨各种移动平台。
- en: 'We will cover the following topics in this section:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将涵盖以下主题：
- en: Cross compiling
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交叉编译
- en: Connecting to a remote device
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接到远程设备
- en: Debugging remotely
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 远程调试
- en: Cross compiling
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交叉编译
- en: Cross compiling is a method for building applications and libraries on a host
    machine for a different architecture than what is running on the host machine.
    When you build for a phone using an Android or iOS SDKs, you are cross compiling.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 交叉编译是一种在宿主机上为不同于宿主机运行架构的应用程序和库构建的方法。当你使用Android或iOS SDKs为手机构建时，你正在进行交叉编译。
- en: One easy way to do this is to use Qt for Device Creation, or Qt's Boot to Qt
    commercial tools. It is available for evaluation or purchase.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 做这件事的一个简单方法就是使用Qt for Device Creation，或者Qt的Boot to Qt商业工具。它可用于评估或购买。
- en: You do not have to build any of the tools and device system images yourself.
    I used Boot to Qt for my Raspberry Pi. This made set up a lot faster and easier.
    There are also more traditional ways of building for different devices, and they
    would be about the same, except for the target machine.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你不必自己构建任何工具和设备系统镜像。我为我使用的树莓派使用了Boot to Qt。这使得设置变得更快、更简单。还有更多传统的为不同设备构建的方法，除了目标机器之外，它们大致相同。
- en: If you are on Windows, cross compiling can be a bit more tricky. You either
    install MinGW or Cygwin to build your own cross compiler, install Windows Subsystem
    for Linux, or install a prebuilt cross `toolchain`, for example, from Sysprogs.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是Windows，交叉编译可能会有些棘手。你可以安装MinGW或Cygwin来构建自己的交叉编译器，安装Windows Subsystem
    for Linux，或者安装预构建的交叉`toolchain`，例如来自Sysprogs。
- en: Traditional cross tools
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 传统交叉工具
- en: There are many ways to get a cross compiler. Device makers can release a cross
    `toolchain` with their software stack. Of course, if you are building your own
    hardware, or just want to create your own cross `toolchain`, there are other options.
    You can download a prebuilt cross `toolchain` for your device's architecture,
    or you can build it yourself. If you do end up compiling the `toolchain`, you
    will need a fast and robust machine with a lot of disk space, as it will take
    quite a long time to finish and use a lot of filesystem—easily 50 GB if you build
    the entire system.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 获取交叉编译器有许多方法。设备制造商可以与其软件栈一起发布交叉`toolchain`。当然，如果你正在构建自己的硬件，或者只是想创建自己的交叉`toolchain`，还有其他选择。你可以为你的设备架构下载预构建的交叉`toolchain`，或者自己构建它。如果你最终决定编译`toolchain`，你需要一台快速且健壮的机器，并且有大量的磁盘空间，因为它将花费相当长的时间来完成，并且会使用大量的文件系统——如果你构建整个系统，可能需要50
    GB。
- en: DIY toolchain
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DIY工具链
- en: 'There are also projects for which you can or must (if there is no supplied
    `toolchain`) build your own `toolchain`. The following are some of the more well
    known cross tools:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对于某些项目，你可能需要或者必须（如果没有提供`toolchain`）自己构建自己的`toolchain`。以下是一些较为知名的交叉工具：
- en: '**Buildroot**: [https://buildroot.org/](https://buildroot.org/)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Buildroot**：[https://buildroot.org/](https://buildroot.org/)'
- en: '**Crosstool-NG**: [http://crosstool-ng.github.io/](http://crosstool-ng.github.io/)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Crosstool-NG**：[http://crosstool-ng.github.io/](http://crosstool-ng.github.io/)'
- en: '**OpenEmbedded**: [http://www.openembedded.org](http://www.openembedded.org)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OpenEmbedded**：[http://www.openembedded.org](http://www.openembedded.org)'
- en: '**Yocto**: [https://www.yoctoproject.org/](https://www.yoctoproject.org/)'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Yocto**：[https://www.yoctoproject.org/](https://www.yoctoproject.org/)'
- en: '**Ångström**: [http://wp.angstrom-distribution.org/](http://wp.angstrom-distribution.org/)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ångström**：[http://wp.angstrom-distribution.org/](http://wp.angstrom-distribution.org/)'
- en: BitBake is used by OpenEmbedded, Yocto, and Ångström (as well as Boot to Qt),
    so it might be easiest to start out with one of those. You could say it is *Buildroot
    2.0*, as it is the second incarnation of the original Buildroot. It is a completely
    different construction though. Buildroot is simpler and has no concept of packages,
    and thus, upgrading the system can be more difficult.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: BitBake 被 OpenEmbedded、Yocto 和 Ångström（以及 Boot to Qt）使用，因此从其中之一开始可能最容易。您可以说它是
    *Buildroot 2.0*，因为它是原始 Buildroot 的第二次版本。尽管如此，它是一个完全不同的构建。Buildroot 更简单，没有包的概念，因此升级系统可能更困难。
- en: I will describe building a `toolchain` with BitBake in [Chapter 15](590553c7-965b-4002-bbfe-fd61e30ce5a8.xhtml),
    *Building a Linux System.* Essentially it is very similar to building a system
    image; in fact, it has to build the `toolchain` before it can build the system
    image.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在第 15 章 [构建 Linux 系统](590553c7-965b-4002-bbfe-fd61e30ce5a8.xhtml)中描述使用 BitBake
    构建 `toolchain`，本质上它与构建系统镜像非常相似；事实上，它必须在构建系统镜像之前构建 `toolchain`。
- en: Buildroot
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Buildroot
- en: Buildroot is a tool that helps build complete systems. It can build the cross
    `toolchain` or use an external one. It traditionally uses an ncurses interface
    for configuration, much like the Linux kernel. It also has a new ncurses configurator,
    but also a Qt-based one. Let's use that!
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Buildroot 是一个帮助构建完整系统的工具。它可以构建交叉 `toolchain` 或使用外部的一个。它传统上使用 ncurses 接口进行配置，就像
    Linux 内核一样。它还有一个新的 ncurses 配置器，但还有一个基于 Qt 的配置器。让我们使用那个吧！
- en: 'In the directory where you unpacked Buildroot, run the following command:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在您解压缩 Buildroot 的目录中，运行以下命令：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Bah! It uses Qt 4\. If you don't want to install Qt 4, you can always use `make
    menuconfig` or `make nconfig`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 哎！它使用 Qt 4。如果您不想安装 Qt 4，您始终可以使用 `make menuconfig` 或 `make nconfig`。
- en: 'Here is what the Qt interface looks like:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Qt 接口的外观：
- en: '![](img/7a3b33a4-4924-4da7-abb3-96a917070e28.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7a3b33a4-4924-4da7-abb3-96a917070e28.png)'
- en: By default, Buildroot will create a system based on BusyBox, instead of glibc.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Buildroot 将创建一个基于 BusyBox 的系统，而不是 glibc。
- en: Once you have configured your system, save the configuration and close the configurator.
    Then run `make`, sit back, and let it build. It will place files into a directory
    called `output/`, under which your system image is in a directory named image.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您已配置好系统，保存配置并关闭配置器。然后运行 `make`，坐下来，让它构建。它将文件放入一个名为 `output/` 的目录中，其中您的系统镜像位于一个名为
    image 的目录中。
- en: Crosstool-NG
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Crosstool-NG
- en: Crosstool-NG is meant for building toolchains, not system images. You can use
    the `toolchain` built with crosstools to build a system, although you would have
    to do it manually.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Crosstool-NG 是用于构建工具链的，而不是系统镜像。您可以使用用 crosstools 构建的 `toolchain` 来构建系统，尽管您可能需要手动完成。
- en: 'Crosstool-NG is similar to Buildroot, in that it uses ncurses to configure
    the `toolchain` to be built. Once you unpack it, you need to run the following
    `bootstrap` script:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Crosstool-NG 与 Buildroot 类似，因为它使用 ncurses 配置要构建的 `toolchain`。一旦您解压缩它，您需要运行以下
    `bootstrap` 脚本：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To install it, you would call configure with the following `--prefix` argument:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装它，您需要使用以下 `--prefix` 参数调用配置器：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can also run it locally as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以按照以下方式本地运行它：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: It will tell you any packages that are missing to install. On my Ubuntu Linux,
    I had to install `flex`, `lzip`, `help2man`, `libtool-bin`, and `ncurses-dev`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 它将告诉您需要安装的任何缺失的包。在我的 Ubuntu Linux 上，我必须安装 `flex`、`lzip`、`help2man`、`libtool-bin`
    和 `ncurses-dev`。
- en: Then run `make` and `make install` it you configured with a prefix.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 然后运行 `make` 和 `make install`，如果您配置了前缀。
- en: You will need to add `/path/to/output/bin` into your `$PATH`
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要将 `/path/to/output/bin` 添加到您的 `$PATH` 中。
- en: '`export PATH=$PATH:/path/to/output/bin`.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`export PATH=$PATH:/path/to/output/bin`。'
- en: 'Now you can run the following configuration:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以运行以下配置：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](img/09fb9dce-d527-44f9-a869-f34254b3f006.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/09fb9dce-d527-44f9-a869-f34254b3f006.png)'
- en: Then run `make`, which will build the cross `toolchain`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 然后运行 `make`，这将构建交叉 `toolchain`。
- en: Prebuilt tools
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预构建工具
- en: 'There are companies that make the following prebuilt cross tool chains for
    various devices and architectures:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 有公司为各种设备和架构提供了以下预构建的交叉工具链：
- en: '**Code Sourcery**: [http://www.codesourcery.com/](http://www.codesourcery.com/)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Code Sourcery**: [http://www.codesourcery.com/](http://www.codesourcery.com/)'
- en: '**Bootlin**: [https://toolchains.bootlin.com/toolchains.html](https://toolchains.bootlin.com/toolchains.html)'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Bootlin**: [https://toolchains.bootlin.com/toolchains.html](https://toolchains.bootlin.com/toolchains.html)'
- en: '**Linaro, Debian, Fedora**: download from package manager'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Linaro, Debian, Fedora**：从软件包管理器下载'
- en: '**Boot to Qt**: [https://doc.qt.io/QtForDeviceCreation/qtb2-index.html](https://doc.qt.io/QtForDeviceCreation/qtb2-index.html)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Boot to Qt**: [https://doc.qt.io/QtForDeviceCreation/qtb2-index.html](https://doc.qt.io/QtForDeviceCreation/qtb2-index.html)'
- en: '**Sysprogs**: [http://gnutoolchains.com/](http://gnutoolchains.com/)'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Sysprogs**: [http://gnutoolchains.com/](http://gnutoolchains.com/)'
- en: These are a few of the better ones. I have experienced the majority of these
    and used them at one time or another. Each comes with it's own instructions on
    how to install and use. Linaro, Debian, and Fedora all make ARM cross compilers.
    This is a book on Qt development, so I will describe Qt Company's offering—Boot
    to Qt.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是一些较好的选择。我大多数都体验过，并且一度使用过。每个都附带安装和使用说明。Linaro、Debian和Fedora都制作ARM交叉编译器。这是一本关于Qt开发的书籍，所以我将描述Qt公司的产品——Boot
    to Qt。
- en: Boot to Qt
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Boot to Qt
- en: 'Qt Company''s Boot to Qt product comes complete with development tools and
    a prebuilt operating system image that you write to a micro SD card or flash to
    run on the device. They support the following other devices besides the Raspberry
    Pi:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Qt公司的Boot to Qt产品包含开发工具和预构建的操作系统镜像，你可以将其写入微SD卡或烧录到设备上运行。除了Raspberry Pi之外，他们还支持以下其他设备：
- en: Boundary Devices i.MX6 Boards
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Boundary Devices i.MX6 Boards
- en: Intel NUC
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Intel NUC
- en: NVIDIA Jetson TX2
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NVIDIA Jetson TX2
- en: NXP i.MX 8QMax LPDDR4
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NXP i.MX 8QMax LPDDR4
- en: Raspberry Pi 3
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Raspberry Pi 3
- en: Toradex Apalis iMX6 and iMX8
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Toradex Apalis iMX6和iMX8
- en: Toradex Colibri iMX6, iMX6ULL, and iMX7
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Toradex Colibri iMX6, iMX6ULL, 和 iMX7
- en: WaRP7
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WaRP7
- en: I picked the RPI, as I already have a model 3 lying around with a touch screen.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择了RPI，因为我已经有一个带有触摸屏的3型模型在身边。
- en: When you run the system image, you boot into a Qt app that serves as a launcher
    for example apps. It also sets up Qt Creator to be able to run cross compiled
    apps on the device. You can run it on the device by hitting the Run button in
    Qt Creator.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行系统镜像时，你会启动一个Qt应用程序，该应用程序充当示例应用程序的启动器。它还设置Qt Creator以便能够在设备上运行交叉编译的应用程序。你可以在Qt
    Creator中点击运行按钮来在设备上运行它。
- en: Boot to Qt is a really fast and easy way to get a prototype up and running on
    a touch screen with a relatively small system. The Qt Company is currently working
    on getting Qt working well on smaller devices, such as microcontrollers.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Boot to Qt是一种快速且简单的方法，可以在相对较小的系统上快速将原型运行在触摸屏上。Qt公司目前正在努力让Qt在更小的设备上运行良好，例如微控制器。
- en: You can run the Boot to Qt `toolchain` directly; you simply have to source the
    environment file. In the case of Raspberry Pi and Boot to Qt, it's called `environment-setup-cortexa7hf-neon-vfpv4-poky-linux-gnueabi`.
    You can also call the qmake of `toolchain` directly and run it on your profile
    `/path/to/x86_64-pokysdk-linux/usr/bin/qmake myApp.pro`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以直接运行Boot to Qt的`toolchain`；你只需要源环境文件。在Raspberry Pi和Boot to Qt的情况下，它被称为`environment-setup-cortexa7hf-neon-vfpv4-poky-linux-gnueabi`。你也可以直接调用`toolchain`的qmake并在你的配置文件`/path/to/x86_64-pokysdk-linux/usr/bin/qmake
    myApp.pro`上运行它。
- en: A third option here is to just use Qt Creator and pick the Raspberry Pi as the
    target.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这里还有一个选择是直接使用Qt Creator并选择Raspberry Pi作为目标。
- en: If you use Windows, there are a few options you can use to get a cross compiler
    `toolchain`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用Windows，有几个选项你可以使用来获取交叉编译`toolchain`。
- en: Cross toolchains on Windows
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows上的交叉工具链
- en: 'There are a few ways you can cross compile on Windows, and we can briefly go
    through them. They are as follows, but there are undoubtedly others that are not
    covered here:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在Windows上以几种方式交叉编译，我们可以简要地介绍一下。它们如下，但无疑还有其他未涵盖的：
- en: Sysrogs provides prebuilt cross `toolchain` for use on Windows.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sysrogs为Windows提供了预构建的交叉`toolchain`。
- en: Windows Subsystem for Linux.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows Subsystem for Linux.
- en: Sysprogs
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Sysprogs
- en: Sysprogs is a company that makes cross tool chains for targeting Linux devices
    that runs on Windows. Their `toolchain` can be downloaded from [http://gnutoolchains.com/](http://gnutoolchains.com/)
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Sysprogs是一家为在Windows上运行针对Linux设备的交叉工具链的公司。他们的`toolchain`可以从[http://gnutoolchains.com/](http://gnutoolchains.com/)下载
- en: Once installed, start a Qt 5.12.1 (MinGW 7.3.0 64-bit) console terminal
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，启动一个Qt 5.12.1（MinGW 7.3.0 64位）控制台终端
- en: 'You need to add the `toolchain` to your path as follows:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要按照以下方式将`toolchain`添加到你的路径中：
- en: '[PRE5]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Add the `PATH` to Qt''s `mingw` as follows:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式将`PATH`添加到Qt的`mingw`中：
- en: '[PRE6]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You will also have to build OpenGL and other requirements for Qt.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你还必须构建OpenGL和其他Qt的要求。
- en: 'Configure Qt to cross compile as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下方式配置Qt以交叉编译：
- en: '[PRE7]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Windows Subsystem for Linux
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows Subsystem for Linux
- en: You can install Windows Subsystem for Linux to install a cross compiler, which
    can be downloaded from [https://docs.microsoft.com/en-us/windows/wsl/install-win10.](https://docs.microsoft.com/en-us/windows/wsl/install-win10)
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以安装 Windows Subsystem for Linux 来安装交叉编译器，您可以从 [https://docs.microsoft.com/en-us/windows/wsl/install-win10](https://docs.microsoft.com/en-us/windows/wsl/install-win10)
    下载。
- en: You can then pick the required Linux distribution—Ubuntu, OpenSUSE, or Debian.
    Once this is installed, you can use the built-in package manager to install the
    `toolchain` for Linux.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以选择所需的 Linux 发行版——Ubuntu、OpenSUSE 或 Debian。一旦安装完成，您就可以使用内置的包管理器来安装 Linux
    的 `toolchain`。
- en: Mobile platform-specific tools
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动平台特定工具
- en: Both iOS and Android have prebuilt cross tools and SDKs that are available to
    download. You will need either of these if you are going to use Qt on the mobile
    platforms, as Qt Creator depends on the native platform build tools.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: iOS 和 Android 都提供了预构建的交叉工具和 SDK，可供下载。如果您打算在移动平台上使用 Qt，则需要其中之一，因为 Qt Creator
    依赖于原生平台构建工具。
- en: iOS
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: iOS
- en: Xcode is the IDE beast you want to download, and it only runs on macOS X. You
    can get it from the App store on your desktop if you do not already have it. You
    will need to register as an iOS developer. From there, you can select the iOS
    build tools to download and set up. It's fairly automatic once you start the download.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode 是您想要下载的 IDE 巨兽，它只能在 macOS X 上运行。如果您还没有，可以从桌面上的 App Store 下载它。您需要注册为 iOS
    开发者。从那里，您可以选择要下载和设置的 iOS 构建工具。一旦开始下载，这个过程就相当自动化了。
- en: You can also use these tools from the command line, but you need to install
    the command line tools from within Xcode. For Sierra, you can simply type the
    `gcc` command in the terminal. In that case, the system will open a dialog asking
    you if you want to install the command line tools. Alternatively, you can install
    it by running `xcode-select --install`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以从命令行使用这些工具，但您需要从 Xcode 内安装命令行工具。对于 Sierra，您只需在终端中输入 `gcc` 命令即可。在这种情况下，系统将打开一个对话框询问您是否想要安装命令行工具。或者，您可以通过运行
    `xcode-select --install` 来安装它。
- en: I don't know of any tools for embedded systems that you can use with Xcode,
    unless you count the iWatch or iTV SDKs. Both of these you can download through
    Xcode.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我不知道有任何嵌入式系统工具可以与 Xcode 一起使用，除非您将 iWatch 或 iTV SDKs 计算在内。这两个 SDK 您都可以通过 Xcode
    下载。
- en: You could use Darwin, of course, since it is open source and based on **Berkeley
    Software Distribution** (**BSD**). You could also use BSD. This is far from being
    able to run an Apple operating system on arbitrary embedded hardware, so your
    choices are limited.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 您当然可以使用 Darwin，因为它开源且基于 **伯克利软件发行版**（**BSD**）。您也可以使用 BSD。这远远达不到在任意嵌入式硬件上运行苹果操作系统的能力，因此您的选择有限。
- en: Android
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android
- en: Android has Android Studio for its IDE development package and is available
    for macOS X, Windows, and Linux systems.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Android 为其 IDE 开发包提供了 Android Studio，并且适用于 macOS X、Windows 和 Linux 系统。
- en: Like Xcode, Android Studio has command line tools as well, which you install
    through the SDK manager or the `sdkmanager` command.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Xcode 一样，Android Studio 也提供了命令行工具，您可以通过 SDK 管理器或 `sdkmanager` 命令进行安装。
- en: '`~/Android/Sdk/tools/bin/sdkmanager --list` will list all packages available.
    If you wanted to download the `adb` and `fastboot` commands, you could do the
    following:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`~/Android/Sdk/tools/bin/sdkmanager --list` 将列出所有可用的包。如果您想下载 `adb` 和 `fastboot`
    命令，可以执行以下操作：'
- en: '`~/Android/Sdk/tools/bin/sdkmanager install "platform-tools"`'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`~/Android/Sdk/tools/bin/sdkmanager install "platform-tools"`'
- en: 'Android has catchy code names for their different versions, which is completely
    different from their API level. You should stick with the API level when installing
    Android SDKs. I have an Android phone that runs Android version 8.0.0, which has
    the code name Oreo. I would need to install an SDK for the API level 26 or 27\.
    If I wanted to install the SDK, I might do the following:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Android 为其不同版本提供了吸引人的代码名称，这与它们的 API 级别完全不同。在安装 Android SDKs 时，您应该坚持使用 API 级别。我有一部运行
    Android 版本 8.0.0 的手机，其代码名称为 Oreo。我需要安装 API 级别 26 或 27 的 SDK。如果我想安装 SDK，我可能会执行以下操作：
- en: '[PRE8]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: For working in Qt, you also need to install the Android NDK. I have NDK version
    10.4.0, or r10e, and Qt Creator works with that just fine. I had issues with running
    a later version of the NDK. Your mileage may vary, as they say.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Qt 进行开发时，您还需要安装 Android NDK。我使用的是 NDK 版本 10.4.0，或者称为 r10e，Qt Creator 与之配合工作得很好。我在运行较新版本的
    NDK 时遇到了问题。正如他们所说，您的体验可能会有所不同。
- en: QNX
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QNX
- en: QNX is a commercial UNIX-like operating system, which is currently owned by
    Blackberry. It is not open source, but I thought I would mention it here, as Qt
    runs on QNX, and is being used commercially in the market.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: QNX 是一个商业化的类 UNIX 操作系统，目前由 Blackberry 拥有。它不是开源的，但我认为在这里提一下是合适的，因为 Qt 在 QNX 上运行，并且在市场上被商业使用。
- en: Connecting to a remote device
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接到远程设备
- en: This is a book about Qt development and I will stick to Qt Creator. The method
    is nearly the same to connect to any device, with a few minor differences. You
    can also connect via **Secure Shell** (**SSH**) and friends with a terminal. I
    often use both methods, as each has its own advantages and disadvantages.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一本关于 Qt 开发的书，我将坚持使用 Qt Creator。连接到任何设备的方法几乎相同，只有一些细微的差别。你也可以通过终端使用 **Secure
    Shell** (**SSH**) 和其他相关工具进行连接。我经常使用这两种方法，因为每种方法都有其自身的优缺点。
- en: Qt Creator
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Qt Creator
- en: I remember when what is now called Qt Creator was first released for internal
    testing at Nokia. At that time, it was called Workbench. It was basically a good
    text editor. Since that time, it has gained heaps of awesome features and it is
    my go to IDE for Qt-based projects.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我记得当现在被称为 Qt Creator 的版本首次在诺基亚内部进行测试时，它被称为 Workbench。当时，它基本上是一个好的文本编辑器。从那时起，它获得了大量的优秀功能，并且它是我
    Qt 项目的首选 IDE。
- en: Qt Creator is a multi-platform IDE, it runs on macOS X, Windows, and Linux.
    It can connect to Android, iOS, or generic Linux devices. You can even get SDKs
    for devices such as UBports (Open Source Ubuntu Phone) or Jolla Phones.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Creator 是一个多平台 IDE，它可以在 macOS X、Windows 和 Linux 上运行。它可以连接到 Android、iOS 或通用的
    Linux 设备。你甚至可以获得 UBports（开源 Ubuntu 手机）或 Jolla 手机等设备的 SDK。
- en: To configure your device, in Qt Creator navigate to Tools | Options... | Devices
    | Devices.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置您的设备，在 Qt Creator 中导航到 工具 | 选项... | 设备 | 设备。
- en: Generic Linux
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通用的 Linux
- en: A generic Linux device could be a custom embedded Linux device or even a Raspberry
    Pi. It should be running an SSH server. Since I used an RPI, I will demonstrate
    with that.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 一个通用的 Linux 设备可能是一个定制的嵌入式 Linux 设备，甚至是一个树莓派。它应该运行一个 SSH 服务器。由于我使用了一个 RPI，我将使用它进行演示。
- en: 'The following is the devices tab showing connection details for a Raspberry
    Pi:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在设备选项卡中显示的连接细节，用于树莓派：
- en: '![](img/acc696a5-6f66-4d2e-baa6-fff925e52696.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/acc696a5-6f66-4d2e-baa6-fff925e52696.png)'
- en: As you can see here, the most important item is probably Host name. Make sure
    the IP address in the Host name configuration matches the actual IP of the device.
    Other devices may have a direct USB connection instead of using the regular network.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，最重要的可能就是主机名。请确保主机名配置中的 IP 地址与设备的实际 IP 地址相匹配。其他设备可能使用常规网络而不是直接 USB 连接。
- en: Android
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android
- en: You will need Android SDK and NDK installed.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要安装 Android SDK 和 NDK。
- en: 'Android is a device that uses a direct USB connection, so it will be easier
    copying the application binary files when it runs the application:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Android 是一个使用直接 USB 连接的设备，因此当运行应用程序时，复制应用程序二进制文件将更容易：
- en: '![](img/0b655d7d-223b-4a0c-86e3-243ac6d4bd8d.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0b655d7d-223b-4a0c-86e3-243ac6d4bd8d.png)'
- en: Qt Creator more or less configures this connection automatically.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Creator 大概会自动配置这个连接。
- en: iOS
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: iOS
- en: Make sure your device is seen by Xcode first, then Qt Creator will automatically
    pick it up and use it.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您的设备首先被 Xcode 发现，然后 Qt Creator 将自动识别并使用它。
- en: 'It would look similar to this image:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 它看起来可能像这张图片：
- en: '![](img/89ed76f8-f521-4bce-8035-e363aedea0f5.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/89ed76f8-f521-4bce-8035-e363aedea0f5.png)'
- en: Notice the little green LED-like icon? Ya, all good to go!
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到那个类似绿色 LED 的图标吗？是的，一切正常！
- en: Bare metal
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 硬件裸机
- en: If your device does not run an SSH server, you can connect with it using `gdb/gdbserver`
    or a hardware server. You will need to enable the plugin first. In Qt Creator,
    navigate to **Help** | **About Plugins** | **Device Support**, and then select
    BareMetal. The bare metal connection uses OpenOCD that you can get from `http://openocd.org`.
    OpenOCD is not some new anxiety disorder, but an on-chip debugger that runs through
    a JTAG interface. Qt Creator also has support for the ST-LINK debugger. Both use
    JTAG connectors. There are USB JTAG connectors as well as the traditional JTAG
    interface, which do not require any device drivers to get connected.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的设备没有运行 SSH 服务器，您可以使用 `gdb/gdbserver` 或硬件服务器通过它进行连接。您首先需要启用插件。在 Qt Creator
    中，导航到 **帮助** | **关于插件** | **设备支持**，然后选择裸机。裸机连接使用您可以从 `http://openocd.org` 获取的
    OpenOCD。OpenOCD 不是一个新的焦虑症，而是一个通过 JTAG 接口运行的片上调试器。Qt Creator 还支持 ST-LINK 调试器。两者都使用
    JTAG 接口。有 USB JTAG 接口以及传统的 JTAG 接口，它们不需要任何设备驱动程序即可连接。
- en: Writing this section brought back memories of when Trolltech got the Trolltech
    Greenphone up and running, as well as working on some other devices, like the
    OpenMoko phone. Good times!
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 写这部分内容让我想起了当Trolltech推出Trolltech Greenphone并使其运行，以及在其他设备上工作，比如OpenMoko手机时的情景。美好的时光！
- en: Now that we have a connected device, we can start debugging.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经连接了设备，我们可以开始调试。
- en: Debugging remotely
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 远程调试
- en: Developing software is hard. All software has bugs. Some bugs are more painful
    than others. The worst kind are probably when you have a random crash that requires
    a specific sequence of events to trigger that reside on a read-only filesystem
    remote device that was built in release mode. Been there. Done that. Even got
    a t-shirt. (I have many Trolltech and Nokia t-shirts left over from days gone
    by.)
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 开发软件很困难。所有软件都有bug。有些bug比其他bug更痛苦。最糟糕的情况可能是当你遇到一个随机崩溃，需要特定的触发事件序列，这些事件序列位于一个只读文件系统的远程设备上，而这个设备是在发布模式下构建的。我经历过。做过。甚至得到了一件T恤。（我还有许多来自过去的Trolltech和诺基亚T恤。）
- en: Remote debugging traditionally involves running the gdbserver command on the
    device. On very small machines where there isn't enough RAM to run gdb directly,
    running gdbserver on the remote device is probably the only way to use gdb. Let's
    put on some groove salad and get cracking!
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，远程调试涉及在设备上运行`gdbserver`命令。在非常小的机器上，由于没有足够的RAM直接运行gdb，所以在远程设备上运行`gdbserver`可能是使用gdb的唯一方法。让我们播放一些groove
    salad，开始工作吧！
- en: gdbserver
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: gdbserver
- en: You may want to experience remote debugging without a UI, or something weird
    like that. This will get you started. The `gdbserver` command needs to be running
    on the remote device, and there needs to be either a serial or TCP connection.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想体验没有UI的远程调试，或者类似的东西。这将帮助你开始。`gdbserver`命令需要在远程设备上运行，并且需要有一个串行或TCP连接。
- en: 'On the *remote* device, run the following command:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在*远程*设备上，运行以下命令：
- en: '[PRE9]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Using the `host` argument will start `gdbserver` running on port `1234`. You
    could also attach the debugger on a running application by running the following
    command:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`host`参数将在端口`1234`上启动`gdbserver`。你也可以通过运行以下命令将调试器附加到正在运行的应用程序：
- en: '[PRE10]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`pid` is the process ID of the already running application you are trying to
    debug, which you could get through running the command `ps`, or top, or similar.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`pid`是你试图调试的已运行应用程序的进程ID，你可以通过运行`ps`、top或类似的命令来获取。'
- en: 'On the *host* device, run the following command:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在*主机*设备上，运行以下命令：
- en: '[PRE11]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You will then `issue` commands on the host device through the console that is
    running `gdb`.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你将通过运行`gdb`的控制台在主机设备上`issue`命令。
- en: If you run into a crash, after it happens you can type `bt` to get a backtrace
    listing. If you have a crash memory dump, or core dump as it's called, on the
    remote, `gdbserver` does not support debugging core memory dumps remotely. You
    will have to run `gdb` itself on the remote in order to do this.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到崩溃，崩溃发生后，你可以输入`bt`来获取一个回溯列表。如果你在远程设备上有崩溃内存转储，或者称为核心转储，`gdbserver`不支持远程调试核心内存转储。你必须远程运行`gdb`本身才能完成这项工作。
- en: Using `gdb` via the command line might be fun to some, but I prefer a UI, since
    it is easier to remember things to be done. Having a GUI that can do remote debugging
    can help if you are not very familiar with running `gdb` commands, as this can
    be a daunting task. Qt Creator can do remote debugging, so let's move on to debugging
    with Qt Creator.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 通过命令行使用`gdb`可能对某些人来说很有趣，但我更喜欢UI，因为它更容易记住要完成的事情。拥有一个可以进行远程调试的GUI可以帮助你，如果你不太熟悉运行`gdb`命令，因为这可能是一项艰巨的任务。Qt
    Creator可以进行远程调试，所以让我们继续使用Qt Creator进行调试。
- en: Qt Creator
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Qt Creator
- en: Qt Creator uses `gdbserver` on the device, so it is essentially just a UI interface.
    You will need to have Python scripting support for `gdbserver` on the device; otherwise,
    you will see a message Selected build of GDB does not support Python scripting,
    and it will not work.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Creator在设备上使用`gdbserver`，所以它本质上只是一个UI界面。你需要为设备上的`gdbserver`提供Python脚本支持；否则，你会看到一条消息“Selected
    build of GDB does not support Python scripting”，并且它将无法工作。
- en: For the most part, debugging with Qt Creator works out-of-the-box for Android,
    iOS, and any supported Boot to Qt device.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数情况，使用Qt Creator进行调试对于Android、iOS和任何支持的Boot to Qt设备来说都是即插即用的。
- en: Load any project in Qt Creator and it can handle C++ debugging, as well as debugging
    into Qt Quick projects. Make sure the correct settings are configured in the Run
    Settings page down where it says Debugger settings within Qt Creator to enable
    `qml` debugging and/or C++ debugging if you need it.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Qt Creator 中加载任何项目，它都可以处理 C++ 调试，以及调试 Qt Quick 项目。请确保在 Qt Creator 的运行设置页面中正确配置了设置，在下面的调试器设置中，以启用所需的
    `qml` 调试和/或 C++ 调试。
- en: 'Add the following to your project and rebuild:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下内容添加到您的项目中并重新构建：
- en: '[PRE12]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Add this to the application startup arguments `-qmljsdebugger=port:<port>, host:<ip>`.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下内容添加到应用程序启动参数 `-qmljsdebugger=port:<port>, host:<ip>`。
- en: To interrupt the execution of the app, click on the icon whose tooltip says
    'Interrupt GDB for "yourapp"'. You can then inspect the value of variables and
    step though the code.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 要中断应用程序的执行，请单击工具栏上提示为 '中断 GDB for "yourapp"' 的图标。然后您可以检查变量的值并逐行执行代码。
- en: Set a breakpoint somewhere—right-click on the line in question and select Set
    Breakpoint on line .
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在某处设置一个断点——在相关的行上右键单击并选择在行上设置断点。
- en: Press *F5* to start the application build (if needed). Once successfully built,
    it will be transferred and executed on the device and the remote debugging service
    is started. It will, of course, stop execution on your breakpoint, if you have
    one set. To continue normal execution, press *F5* until you hit that painful crash,
    and then you can inspect that wonderful backtrace! From here, you can hopefully
    gather enough clues to fix it.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 按 *F5* 开始应用程序构建（如果需要）。一旦成功构建，它将被传输并在设备上执行，同时远程调试服务启动。当然，如果设置了断点，它将在断点处停止执行。要继续正常执行，请按
    *F5* 直到遇到那个痛苦的崩溃，然后您可以检查那个美妙的回溯！从这里，您可能希望收集足够的线索来修复它。
- en: 'Other key commands supported by Qt Creator by default are as follows:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Creator 默认支持的其他键命令如下：
- en: '*F5*: start / continue execution'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*F5*：开始/继续执行'
- en: '*F9*: toggle breakpoint'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*F9*：切换断点'
- en: '*F10*: step over'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*F10*：跳过'
- en: '*Ctrl* + *F10*: run to current line'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ctrl* + *F10*：运行到当前行'
- en: '*F11*: step into'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*F11*：进入'
- en: '*Shift* + *F11*: step out'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Shift* + *F11*：跳出'
- en: Let's try it out. Load the source code for this chapter.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试试。加载本章的源代码。
- en: 'To toggle a breakpoint on the current line in the Qt Creator editor, press
    *F9* on Linux and Windows, or *F8* on macOS as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Qt Creator 编辑器中的当前行切换断点，请按 Linux 和 Windows 上的 *F9*，或在 macOS 上按 *F8*，如下所示：
- en: '![](img/84ec6236-d9de-44d0-925a-7cd43c4d946a.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/84ec6236-d9de-44d0-925a-7cd43c4d946a.png)'
- en: 'Now start the debugger by pressing *F5* to run the app in the debugger. It
    will stop execution on our line as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在通过按 *F5* 运行调试器中的应用程序来启动调试器。它将在我们的行上停止执行，如下所示：
- en: '![](img/3cda3273-f7a4-434a-ade2-c1f34afe8813.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3cda3273-f7a4-434a-ade2-c1f34afe8813.png)'
- en: See that little yellow arrow? It informs us that the execution has stopped on
    this line, before the statement has been executed.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 看到那个小黄色箭头吗？它告诉我们执行在执行语句之前停止了。
- en: 'You will be able to see the following values for the variables:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 您将能够看到变量的以下值：
- en: '![](img/37d3bd2f-15bc-497d-912b-d62bcbfe5e15.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](img/37d3bd2f-15bc-497d-912b-d62bcbfe5e15.png)'
- en: 'As you can see, the breakpoint stopped execution before `QString` `b` has been
    initialized, so the value is `""`. If you push *F10* or step over, the `QString`
    `b` gets initialized and you can see the new value as follows:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，断点在 `QString` `b` 被初始化之前就停止了执行，所以其值是 `""`。如果您按 *F10* 或跳过，`QString` `b`
    将被初始化，您可以看到新的值如下：
- en: '![](img/9521bc99-abd2-4ab8-8367-8bac3e2ec6d1.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9521bc99-abd2-4ab8-8367-8bac3e2ec6d1.png)'
- en: 'You will notice from the following screenshot that the execution line gets
    moved to the next statement as well:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从下面的屏幕截图注意到，执行行也会移动到下一行：
- en: '![](img/681dd2a8-e4c7-4156-8b00-f1b79aaa78f9.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](img/681dd2a8-e4c7-4156-8b00-f1b79aaa78f9.png)'
- en: 'You can also edit the breakpoint by right-clicking on the breakpoint in the
    editor and selecting Edit Breakpoint. Let''s set a breakpoint on Line 20 in the
    for loop as follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过在编辑器中右键单击断点并选择编辑断点来编辑断点。让我们在 for 循环的第 20 行设置一个断点，如下所示：
- en: '![](img/a0aba595-2164-4246-897d-b69b5d1ab132.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a0aba595-2164-4246-897d-b69b5d1ab132.png)'
- en: 'Right-click and select Edit Breakpoint to open the Edit Breakpoint Properties
    dialog as follows:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击并选择编辑断点以打开以下编辑断点属性对话框：
- en: '![](img/ce1db2e2-1e79-4137-aaf8-f78275a29dfd.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ce1db2e2-1e79-4137-aaf8-f78275a29dfd.png)'
- en: 'Edit the Condition field and add `i == 15` as follows and click OK:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑条件字段并添加 `i == 15`，然后点击确定：
- en: '![](img/edb54855-33c5-4510-a91c-1a0a26fe9d6c.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](img/edb54855-33c5-4510-a91c-1a0a26fe9d6c.png)'
- en: 'Run the app in the debugger by clicking *F5*. Click on the Strings button.
    When it hits the breakpoint, you can see it stopped when i contains the value
    15:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击 *F5* 运行调试器中的应用程序。点击字符串按钮。当它遇到断点时，你可以看到它停止时 i 包含的值是 15：
- en: '![](img/746ee8de-bda8-4c15-a82e-52ab03c6e52d.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/746ee8de-bda8-4c15-a82e-52ab03c6e52d.png)'
- en: You could then step into, or step over.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以接着进入或跳过。
- en: Let's now look at a crash bug, which is a divide by zero crash when you push
    the crash button.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在看看一个崩溃错误，当你点击崩溃按钮时，它是一个除以零的崩溃。
- en: 'Set a breakpoint at line *31*. Run the debugger, and it will stop just before
    the crash. Now step over. You should see a dialog popup as follows:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 *31* 行设置断点。运行调试器，它将在崩溃前停止。现在执行下一步。你应该会看到一个如下所示的对话框弹出：
- en: '![](img/64eb0602-9f5a-4c92-a5d0-32e74c5e48d7.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/64eb0602-9f5a-4c92-a5d0-32e74c5e48d7.png)'
- en: Oh my. Now that is ugly.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 哇，现在看起来真丑。
- en: 'In the stack view shown in the following screenshot, you can see where the
    program has crashed:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下屏幕截图所示的堆栈视图中，你可以看到程序崩溃的位置：
- en: '![](img/d12dc805-5795-4da9-83d0-15f05fd99896.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d12dc805-5795-4da9-83d0-15f05fd99896.png)'
- en: Yep, it is right where I put it! Bad things happen when you divide by zero in
    C++.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，它就在我放的地方！在 C++ 中除以零会发生糟糕的事情。
- en: Summary
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Debugging is a powerful process and often required to fix bugs. You can either
    run debuggers such as `gdb` from the command line, or you should be able to connect
    the `gdb` to a debugger server running on a remote device. Running a GUI-based
    debugger is much more fun. You should be able to debug your Qt app running on
    your mobile or embedded device from Qt Creator over a remote connection.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 调试是一个强大的过程，通常需要修复错误。你可以从命令行运行调试器，例如 `gdb`，或者你应该能够将 `gdb` 连接到在远程设备上运行的调试服务器。使用基于
    GUI 的调试器会更有趣。你应该能够通过远程连接从 Qt Creator 调试运行在您的移动或嵌入式设备上的 Qt 应用程序。
- en: The next step is to deploy your application. We will explore various ways to
    deploy your application on a few different mobile and embedded platforms.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是部署你的应用程序。我们将探讨在几个不同的移动和嵌入式平台上部署你的应用程序的多种方法。
