- en: Library Management System with Pointers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于指针的图书馆管理系统
- en: 'In this chapter, we will continue to study a system for the management of a
    library. Similar to [Chapter 3](6814bf19-e75b-4083-8447-892dd8416f49.xhtml), *Building
    a Library Management System*, we have three classes—`Book`, `Customer`, and `Library`.
    However, there is one large difference: we do not work with identity numbers.
    Instead, we work with pointers; each `Book` object holds a pointer to the customer
    (an object of the `Customer` class) that has borrowed the book as well as a list
    of pointers to the customers that have reserved the book. In the same way, each
    customer holds sets of pointers for the books (objects of the `Book` class) they
    have borrowed and reserved.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将继续研究一个图书馆管理系统。类似于[第3章](6814bf19-e75b-4083-8447-892dd8416f49.xhtml)，*构建图书馆管理系统*，我们有三个类—`Book`、`Customer`和`Library`。然而，有一个很大的不同：我们不使用身份号码。相反，我们使用指针；每个`Book`对象都包含一个指向借阅该书的客户（`Customer`类的对象）的指针，以及一个指向已预订该书的客户的指针列表。同样，每个客户都持有他们借阅和预订的书籍（`Book`类的对象）的指针集合。
- en: However, this approach gives rise to a problem; we cannot store the values of
    pointers directly in the file. Instead, when we save the file we need to convert
    from pointers to indexes in the book and customer lists, and when we load the
    file we need to transform the indexes back to pointers. This process is called
    **marshmallowing**.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种方法引发了一个问题；我们无法直接在文件中存储指针的值。相反，当我们保存文件时，我们需要将指针转换为书籍和客户列表中的索引，而当我们加载文件时，我们需要将索引转换回指针。这个过程被称为**棉花糖化**。
- en: 'In this chapter, we are going to dive deeper into the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将更深入地探讨以下主题：
- en: Just as in [Chapter 3](6814bf19-e75b-4083-8447-892dd8416f49.xhtml), *Building
    a Library Management System*, we will work with classes for books and customers
    that constitute a small database. However, in this chapter, we will work directly
    with pointers instead of integer numbers.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正如[第3章](6814bf19-e75b-4083-8447-892dd8416f49.xhtml)，*构建图书馆管理系统*中一样，我们将使用构成小型数据库的书籍和客户类。然而，在本章中，我们将直接使用指针而不是整数数字。
- en: As we work with pointers instead of integer numbers, the file handling becomes
    more complicated. We need to perform a process called marshmallowing.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于我们使用指针而不是整数数字，文件处理变得更加复杂。我们需要执行一个称为棉花糖化的过程。
- en: Finally, we will work with the generic standard C++ classes, `set` and `list`.
    However, in this chapter they hold pointers to book and customer objects instead
    of objects.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们将使用通用的标准C++类`set`和`list`。然而，在本章中，它们持有指向书籍和客户对象的指针，而不是对象本身。
- en: The Book class
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 书籍类
- en: 'Similar to the system of the previous chapter, we have three classes: `Book`,
    `Customer`, and `Library`. The `Book` class keeps track of a book, where each
    book has an author and a title. The `Customer` class keeps track of a customer,
    where each customer has a name and an address. The `Library` class keeps track
    of the library operations, such as borrowing, returning, and reserving. Finally,
    the `main` function simply creates an object of the `Library` class.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 与上一章的系统类似，我们有三个类：`Book`、`Customer`和`Library`。`Book`类跟踪书籍，其中每本书都有一个作者和标题。`Customer`类跟踪客户，其中每个客户都有一个姓名和地址。`Library`类跟踪图书馆操作，如借阅、归还和预订。最后，`main`函数简单地创建了一个`Library`类的对象。
- en: The `Book` class is similar to the `Book` class of [Chapter 3](6814bf19-e75b-4083-8447-892dd8416f49.xhtml),
    *Building a Library Management System*. The only real difference is that there
    are no identity numbers, only pointers.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`Book`类与[第3章](6814bf19-e75b-4083-8447-892dd8416f49.xhtml)，*构建图书馆管理系统*中的`Book`类相似。唯一的真正区别是没有身份号码，只有指针。'
- en: '**Book.h:**'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**Book.h:**'
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We do not have a method returning the identity number of the book, since the
    books in this chapter do not use identity numbers.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有返回书籍身份号码的方法，因为本章中的书籍不使用身份号码。
- en: 'The `borrowedPtr` method returns the address of the customer who has borrowed
    the book, or `nullptr` if the book is not borrowed at the moment. It comes in
    two versions, where the first version returns a reference to a pointer to a `Customer`
    object. In that way, we can assign a new value of the pointer to the customer.
    The second version is constant, which means that we can call it on constant objects:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`borrowedPtr`方法返回借阅书籍的客户的地址，或者如果此刻没有书籍被借出，则返回`nullptr`。它有两种版本，其中第一种版本返回对`Customer`对象指针的引用。这样，我们可以分配指针的新值给客户。第二种版本是常量版本，这意味着我们可以在常量对象上调用它：'
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note that we do not have a `borrowed` method in this chapter. We do not need
    it since `borrowerPtr` returns `nullptr` if the book is not borrowed at the moment.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在本章中我们没有`borrowed`方法。我们不需要它，因为如果此时没有借阅书籍，`borrowerPtr`将返回`nullptr`。
- en: 'In this chapter, `reservationPtrList` returns a list of customer pointers instead
    of integer values. It comes in two versions, where the first version returns a
    reference to the list. In that way, we can add and remove pointers from the list.
    The second version is constant and returns a constant list, which means it can
    be called on constant `Book` objects and returns a list that cannot be changed:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，`reservationPtrList`返回客户指针的列表而不是整数值。它有两种版本，其中第一种返回列表的引用。这样，我们可以向列表中添加和移除指针。第二种版本是常量，返回一个常量列表，这意味着它可以在常量`Book`对象上调用，并返回一个不可更改的列表：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The output stream operator works in the same way as in [Chapter 3](6814bf19-e75b-4083-8447-892dd8416f49.xhtml),
    *Building a Library Management System*:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 输出流操作符的工作方式与[第3章](6814bf19-e75b-4083-8447-892dd8416f49.xhtml)，*构建图书馆管理系统*中的方式相同：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `m_author` and `m_title` fields are strings similar to [Chapter 3](6814bf19-e75b-4083-8447-892dd8416f49.xhtml),
    *Building a Library Management System*:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`m_author`和`m_title`字段是字符串，类似于[第3章](6814bf19-e75b-4083-8447-892dd8416f49.xhtml)，*构建图书馆管理系统*：'
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'However, we have omitted the `m_bookId` field, since we do not use identity
    numbers in this chapter. We have also replaced the `m_borrowedId` and `m_customerId`
    fields with `m_borrowerPtr`, which is initialized to `nullptr` since the book
    is not borrowed from the beginning:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们省略了`m_bookId`字段，因为在本章中我们不使用身份号码。我们还用`m_borrowerPtr`替换了`m_borrowedId`和`m_customerId`字段，因为从开始就没有借阅书籍，所以它被初始化为`nullptr`：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `m_reservationPtrList` field holds a list of pointers to the customers
    that have reserved the book, rather than a list of integer identity numbers of
    [Chapter 3](6814bf19-e75b-4083-8447-892dd8416f49.xhtml), *Building a Library Manageme**nt
    System*:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`m_reservationPtrList`字段包含指向已预约书籍的客户的指针列表，而不是[第3章](6814bf19-e75b-4083-8447-892dd8416f49.xhtml)，*构建图书馆管理系统*中的整数身份号码列表：'
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Book.cpp:**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**Book.cpp:** '
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The default constructor is similar to the constructor of [Chapter 3](6814bf19-e75b-4083-8447-892dd8416f49.xhtml),
    *Building a Library Management System*:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 默认构造函数与[第3章](6814bf19-e75b-4083-8447-892dd8416f49.xhtml)，*构建图书馆管理系统*的构造函数类似：
- en: '[PRE8]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The second constructor is also similar to the constructor of [Chapter 3](6814bf19-e75b-4083-8447-892dd8416f49.xhtml),
    *Building a Library Management System*. However, there is no `m_bookId` field
    to initialize:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个构造函数与[第3章](6814bf19-e75b-4083-8447-892dd8416f49.xhtml)，*构建图书馆管理系统*的构造函数类似。但是没有`m_bookId`字段需要初始化：
- en: '[PRE9]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Reading and writing the book
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 阅读和写入书籍
- en: 'The `read` and `write` methods have been shortened in this chapter. They only
    read and write the author and title of the book. The potential loan and reservation
    lists are read and written by the `save` and `write` methods of the `Library`
    class:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，`read`和`write`方法已被简化。它们只读取和写入书籍的作者和标题。潜在的借阅和预约列表由`Library`类的`save`和`write`方法读取和写入：
- en: '[PRE10]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Borrowing and reserving the book
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 借阅和预约书籍
- en: 'When a customer reserves a book, the pointer to the `Customer` object is added
    to the reservation pointer list of the book. The size of the list is returned
    for the customer to be notified of their position in the reservation list:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当客户预约书籍时，将`Customer`对象的指针添加到书籍的预约指针列表中。返回列表的大小，以便客户知道他们在预约列表中的位置：
- en: '[PRE11]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'When a customer returns a book, we simply set `m_borrowerPtr` to `nullptr`,
    which indicates that the book is no longer borrowed:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当客户归还书籍时，我们只需将`m_borrowerPtr`设置为`nullptr`，这表示书籍不再被借阅：
- en: '[PRE12]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `removeReservation` method simply removes the customer pointer from the
    reservation list:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`removeReservation`方法简单地从预约列表中移除客户指针：'
- en: '[PRE13]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Displaying the book
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示书籍
- en: 'The output stream operator writes the title and author, the customer that has
    borrowed the book (if any), and the customers that have reserved the book (if
    any):'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 输出流操作符写入标题和作者，以及借阅书籍的客户（如果有），以及已预约书籍的客户（如果有）：
- en: '[PRE14]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If the book is borrowed, we write the borrower to the stream:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果书籍被借阅，我们将借阅者写入流中：
- en: '[PRE15]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If the reservation list of the book is not empty, we iterate through it, and
    for each reservation, we write the customer:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果书籍的预约列表不为空，我们遍历它，并为每个预约写入客户：
- en: '[PRE16]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The Customer class
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户类
- en: The `Customer` class of this chapter is similar to the `Customer` class of [Chapter
    3](6814bf19-e75b-4083-8447-892dd8416f49.xhtml), *Building a Library Management
    System*. Again, in this case, the difference is that we work with pointers instead
    of integer identity numbers.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的`Customer`类与[第3章](6814bf19-e75b-4083-8447-892dd8416f49.xhtml)，《构建图书馆管理系统》中的`Customer`类相似。再次，在这种情况下，区别在于我们使用指针而不是整数标识号。
- en: '**Customer.h:**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**Customer.h:**'
- en: '[PRE17]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `borrowBook`, `returnBook`, `reserveBook`, and `unreserveBook` take a pointer
    to a `Book` object as the parameter:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`borrowBook`、`returnBook`、`reserveBook`和`unreserveBook`方法接受一个指向`Book`对象的指针作为参数：'
- en: '[PRE18]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The `loadPtrSet` and `reservationPtrSet` methods return sets of `Book` pointers,
    rather than sets of integer identity numbers:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`loadPtrSet`和`reservationPtrSet`方法返回`Book`指针的集合，而不是整数标识号的集合：'
- en: '[PRE19]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The output stream operator is unchanged, compared to [Chapter 3](6814bf19-e75b-4083-8447-892dd8416f49.xhtml),
    *Building a Library Managemen**t System*:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 输出流操作符与[第3章](6814bf19-e75b-4083-8447-892dd8416f49.xhtml)，《构建图书馆管理系统》相比没有变化：
- en: '[PRE20]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The `m_name` and `m_address` fields store the name and address of the customer,
    just as in [Chapter 3](6814bf19-e75b-4083-8447-892dd8416f49.xhtml), *Building
    a Library Mana**gement System*:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`m_name`和`m_address`字段存储客户的名称和地址，正如在[第3章](6814bf19-e75b-4083-8447-892dd8416f49.xhtml)，《构建图书馆管理系统》中一样：'
- en: '[PRE21]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The `m_loanPtrSet` and `m_reservationPtrSet` fields hold pointers to `Book`
    objects, rather than integer identity numbers:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`m_loanPtrSet`和`m_reservationPtrSet`字段持有指向`Book`对象的指针，而不是整数标识号：'
- en: '[PRE22]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '**Customer.cpp:**'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**Customer.cpp:**'
- en: '[PRE23]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The constructors are similar to the constructors of [Chapter 3](6814bf19-e75b-4083-8447-892dd8416f49.xhtml),
    *Building a Library Management System*. The first constructor does nothing and
    is called when the customer list is loaded from a file:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数与[第3章](6814bf19-e75b-4083-8447-892dd8416f49.xhtml)，《构建图书馆管理系统》中的构造函数相似。第一个构造函数不执行任何操作，并在从文件加载客户列表时被调用：
- en: '[PRE24]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The second constructor initializes the name and address of the customer. However,
    compared to the constructor of [Chapter 3](6814bf19-e75b-4083-8447-892dd8416f49.xhtml),
    *Building a Library Management System*, there is no `m_customerId` field to initialize:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个构造函数初始化客户的名称和地址。然而，与[第3章](6814bf19-e75b-4083-8447-892dd8416f49.xhtml)，《构建图书馆管理系统》中的构造函数相比，没有初始化`m_customerId`字段：
- en: '[PRE25]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Reading and writing the customer
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取和写入客户信息
- en: 'Similar to the preceding `Book` case, the `read` and `write` methods have been
    shortened. They only read and write the name and address. The loan and reservation
    sets are read and written in the `Library` class, shown as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面的`Book`案例类似，`read`和`write`方法已被简化。它们只读取和写入名称和地址。借阅和预约集合在`Library`类中读取和写入，如下所示：
- en: '[PRE26]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Borrowing and reserving a book
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 借阅和预约书籍
- en: 'The `borrowBook` method adds the book pointer to the loan set and removes it
    from the reservation set in case it was reserved:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`borrowBook`方法将书籍指针添加到借阅集合中，并从预约集合中移除，以防它已被预约：'
- en: '[PRE27]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The `reserveBook` method simply adds the book pointer to the reservation list,
    and `returnBook` and `unreserveBook` remove the book pointer from the loan and
    reservation sets:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`reserveBook`方法简单地将书籍指针添加到预约列表中，而`returnBook`和`unreserveBook`方法从借阅和预约集合中移除书籍指针：'
- en: '[PRE28]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Displaying the customer
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示客户信息
- en: 'The output stream operator works in the same way as in [Chapter 3](6814bf19-e75b-4083-8447-892dd8416f49.xhtml),
    *Building a Library Management System*. It writes the name and address of the
    customer, as well as the sets of borrowed and reserved books (if any):'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 输出流操作符与[第3章](6814bf19-e75b-4083-8447-892dd8416f49.xhtml)，《构建图书馆管理系统》中的操作方式相同。它写入客户的名称和地址，以及借阅和预约的书籍集合（如果有）：
- en: '[PRE29]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'If the loan list of the customer is not empty, we iterate through it, and for
    each loan, we write the book:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果客户的借阅列表不为空，我们遍历它，并对每个借阅项写入书籍：
- en: '[PRE30]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In the same way, if the reservation list of the customer is not empty, we iterate
    through it, and for each reservation, we write the book:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果客户的预约列表不为空，我们遍历它，并对每个预约项写入书籍：
- en: '[PRE31]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The Library class
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图书馆类
- en: 'The `Library` class is quite similar to its counterpart in  [Chapter 3](6814bf19-e75b-4083-8447-892dd8416f49.xhtml), *Building
    a Library Management System*. However, we have added lookup `methods` to transform
    between pointers and list indexes when saving and loading the library information
    to a file:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`Library`类与[第3章](6814bf19-e75b-4083-8447-892dd8416f49.xhtml)，《构建图书馆管理系统》中的对应类非常相似。然而，我们在保存和加载图书馆信息到文件时添加了查找`方法`，以在指针和列表索引之间进行转换：'
- en: '**Library.h:**'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**Library.h:**'
- en: '[PRE32]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The destructor deallocates all the dynamically allocated memory of this application:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 析构函数释放应用程序中所有动态分配的内存：
- en: '[PRE33]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The `lookupBook` and `lookupCustomer` methods return pointers to `Book` and
    `Customer` objects. If the book or customer does not exist, `nullptr` is returned:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`lookupBook` 和 `lookupCustomer` 方法返回指向 `Book` 和 `Customer` 对象的指针。如果书籍或客户不存在，则返回
    `nullptr`：'
- en: '[PRE34]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The `lookupBookIndex` and `lookupCustomerIndex` methods take a pointer, search
    the book and customer lists after the object pointed at, and return its index
    in the lists:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`lookupBookIndex` 和 `lookupCustomerIndex` 方法接受一个指针，在指向的对象之后的书籍和客户列表中进行搜索，并返回其在列表中的索引：'
- en: '[PRE35]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The `lookupBookPtr` and `lookupCustomerPtr` methods take an index and return
    a pointer to the object at the position in the book and customer lists:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`lookupBookPtr` 和 `lookupCustomerPtr` 方法接受一个索引，并返回书籍和客户列表中该位置的指针：'
- en: '[PRE36]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The `save` and `write` methods save and load the library information from a
    file. However, they are more complicated than their counterparts in [Chapter 3](6814bf19-e75b-4083-8447-892dd8416f49.xhtml),
    *Building a Library Management System*:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`save` 和 `write` 方法从文件中保存和加载图书馆信息。然而，它们比 [第 3 章](6814bf19-e75b-4083-8447-892dd8416f49.xhtml)，*构建图书馆管理系统*
    中的对应方法更复杂：'
- en: '[PRE37]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The `m_bookPtrList` and `m_customerPtrList` fields hold pointers to `Book`
    and `Customer` objects, rather than the objects themselves, as in  [Chapter 3](https://cdp.packtpub.com/c___by_example/wp-admin/post.php?post=47&action=edit#post_43), *Building
    a Library Management System*:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`m_bookPtrList` 和 `m_customerPtrList` 字段持有指向 `Book` 和 `Customer` 对象的指针，而不是对象本身，正如
    [第 3 章](https://cdp.packtpub.com/c___by_example/wp-admin/post.php?post=47&action=edit#post_43)，*构建图书馆管理系统*
    所述：'
- en: '[PRE38]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '**Library.cpp:**'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**Library.cpp:**'
- en: '[PRE39]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The constructor is identical to the constructor of  [Chapter 3](https://cdp.packtpub.com/c___by_example/wp-admin/post.php?post=47&action=edit#post_43), *Building
    a Library Management System*:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数与 [第 3 章](https://cdp.packtpub.com/c___by_example/wp-admin/post.php?post=47&action=edit#post_43)，*构建图书馆管理系统*
    的构造函数相同：
- en: '[PRE40]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Looking up books and customers
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找书籍和客户
- en: 'The `lookupBook` method of this chapter searches for the `Book` object with
    the author and title, in a way similar to [Chapter 3](https://cdp.packtpub.com/c___by_example/wp-admin/post.php?post=47&action=edit#post_43), *Building
    a Library Management System*. However, if it finds a `Book` object that matches
    the author and title, it does not copy the information to a given object. Instead,
    it simply returns a pointer to the object. If it does not find the `Book` object,
    `nullptr` is returned:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的 `lookupBook` 方法通过作者和标题搜索具有 `Book` 对象，其方式类似于 [第 3 章](https://cdp.packtpub.com/c___by_example/wp-admin/post.php?post=47&action=edit#post_43)，*构建图书馆管理系统*。然而，如果找到与作者和标题匹配的
    `Book` 对象，它不会将信息复制到指定的对象中。相反，它只是返回该对象的指针。如果没有找到 `Book` 对象，则返回 `nullptr`：
- en: '[PRE41]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'In the same way, `lookupCustomer` tries to find a `Customer` object that matches
    the name and address. If it finds the object, its pointer is returned. If it does
    not find it, `nullptr` is returned:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，`lookupCustomer` 尝试查找与名称和地址匹配的 `Customer` 对象。如果找到该对象，则返回其指针。如果没有找到，则返回 `nullptr`：
- en: '[PRE42]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Adding a book
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加书籍
- en: 'The `addBook` method prompts the user for the author and the title:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`addBook` 方法提示用户输入作者和标题：'
- en: '[PRE43]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'When checking if the book already exists, we call `lookupBook`. If the book
    exists, a pointer to the `Book` object is returned. If the book does not exist,
    `nullptr` is returned. Therefore, we test whether the return value does not equal
    `nullptr`. If it does not equal `nullptr`, the book already exists and an error
    message is displayed:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查书籍是否已存在时，我们调用 `lookupBook`。如果书籍存在，则返回 `Book` 对象的指针。如果书籍不存在，则返回 `nullptr`。因此，我们测试返回值是否不等于
    `nullptr`。如果不等于 `nullptr`，则表示书籍已存在，并显示错误消息：
- en: '[PRE44]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'When adding the book, we dynamically create a new `Book` object with the `new`
    operator. We use the standard C++ `assert` macro to check that the book pointer
    is not null. If it is null, the execution will be aborted with an error message:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加书籍时，我们使用 `new` 运算符动态创建一个新的 `Book` 对象。我们使用标准的 C++ `assert` 宏来检查书籍指针是否不为空。如果为空，则执行将因错误消息而终止：
- en: '[PRE45]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Deleting a book
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除书籍
- en: 'The `deleteBook` method deletes a book from the library by prompting the user
    about the author and title of the book. If the book exists, we return, unreserve,
    and delete it:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`deleteBook` 方法通过提示用户关于书籍的作者和标题来从图书馆中删除书籍。如果书籍存在，我们返回、取消保留并删除它：'
- en: '[PRE46]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'We obtain a pointer to the `Book` object by calling `lookupBook`:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过调用 `lookupBook` 获取 `Book` 对象的指针：
- en: '[PRE47]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'If the pointer is `nullptr`, the book does not exist and an error message is
    displayed:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果指针是`nullptr`，则书籍不存在，并显示错误消息：
- en: '[PRE48]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'We check whether the book has been borrowed by looking up the borrower:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过查找借阅者来检查书籍是否已被借阅：
- en: '[PRE49]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'If the pointer returned by `borrowerPtr` is not `nullptr`, we return the book
    by calling `returnBook` of the borrower. In that way, the book is no longer registered
    as borrowed by the customer:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`borrowerPtr`返回的指针不是`nullptr`，我们通过调用借阅者的`returnBook`方法来归还书籍。这样，书籍就不再被注册为客户借阅的书籍：
- en: '[PRE50]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Moreover, we need to check whether the book has been reserved by any other
    customer. We do so by obtaining the reservation list of the book and, for every
    customer in the list, we unreserve the book:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们需要检查书籍是否已被其他客户预留。我们通过获取书籍的预留列表来实现，并对列表中的每个客户，取消书籍的预留：
- en: '[PRE51]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Note that we do not check whether the book has actually been reserved by the
    customer, we simply unreserve the book. Also note that we do not need to put back
    any object to the list, since we work with pointers to objects and do not copy
    objects:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们并不检查书籍是否实际上已被客户预留，我们只是取消预留。另外，注意我们不需要将任何对象放回列表中，因为我们处理的是对象的指针，而不是对象的副本：
- en: '[PRE52]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'When removing the book, we remove the book pointer from the book pointer list,
    and then deallocate the `Book` object. It may seem strange that we first display
    the message and then delete the book pointer. However, it has to be in that order.
    After we have deleted the object, we can do nothing with it. We cannot delete
    the object and then write it, it would cause memory errors:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 当移除书籍时，我们从书籍指针列表中移除书籍指针，然后释放`Book`对象。看起来我们首先显示消息然后删除书籍指针似乎很奇怪。然而，顺序必须如此。删除对象后，我们无法再对其进行任何操作。我们不能先删除对象再写入它，这会导致内存错误：
- en: '[PRE53]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Listing the books
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出书籍
- en: 'When listing the books, we first check whether the list is empty. If it is
    empty, we simply write `"No books."`:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 当列出书籍时，我们首先检查列表是否为空。如果为空，我们简单地写入`"No books."`：
- en: '[PRE54]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'However, if the list is not empty, we iterate through the book pointer list
    and, for each book pointer, dereference the pointer and write the information:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果列表不为空，我们遍历书籍指针列表，并对每个书籍指针，解引用指针并写入信息：
- en: '[PRE55]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Adding a customer
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加客户
- en: 'The `addCustomer` method prompts the user for the name and address of the customer:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`addCustomer`方法提示用户输入客户的名称和地址：'
- en: '[PRE56]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'If a customer with the name and address already exists, an error message is
    displayed:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果已存在具有相同名称和地址的客户，将显示错误消息：
- en: '[PRE57]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'When adding the customer, we dynamically create a new `Customer` object that
    we add to the customer object pointer list:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 当添加客户时，我们动态创建一个新的`Customer`对象，并将其添加到客户对象指针列表中：
- en: '[PRE58]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Deleting a customer
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除客户
- en: 'When deleting a customer, we look them up and display an error message if they
    do not exist:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 当删除客户时，我们查找他们，如果不存在则显示错误消息：
- en: '[PRE59]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'If the customer with the given name and address does not exist, an error message
    is displayed. Consider the following code:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给定名称和地址的客户不存在，则显示错误消息。考虑以下代码：
- en: '[PRE60]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'If the customer has borrowed at least one book, they cannot be deleted, and
    an error message is displayed, which is shown as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如果客户至少借阅了一本书，则不能删除，并显示错误消息，如下所示：
- en: '[PRE61]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'However, if the customer has not borrowed any books, the customer is first
    removed from the reservation list of every book in the library, shown in the following
    code:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果客户没有借阅任何书籍，客户首先从图书馆中每本书的预留列表中移除，如下面的代码所示：
- en: '[PRE62]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Then the customer is removed from the customer list, and the `Customer` object
    is deallocated by the `delete` operator. Again, note that we first must write
    the customer information, and then delete its object. The other way around would
    not have worked since we cannot inspect a deleted object. That would have caused
    memory errors:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 然后客户从客户列表中移除，并通过`delete`运算符释放`Customer`对象。再次注意，我们首先必须写入客户信息，然后删除其对象。反过来是不行的，因为我们无法检查已删除的对象。这会导致内存错误：
- en: '[PRE63]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Listing the customers
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出客户
- en: 'When listing the customer, we go through the customer list and, for each customer,
    dereference the `Customer` object pointer and write the information of the object:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 当列出客户时，我们遍历客户列表，并对每个客户，解引用`Customer`对象指针并写入对象信息：
- en: '[PRE64]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Borrowing a book
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 借阅书籍
- en: 'When borrowing a book, we start by prompting the user for the author and title,
    which is shown in the following code snippet:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 当借阅书籍时，我们首先提示用户输入作者和标题，如下面的代码片段所示：
- en: '[PRE65]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'We look up the book and if the book does not exist, an error message is displayed,
    which is shown in the following code:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们查找书籍，如果书籍不存在，将显示错误信息，如下面的代码所示：
- en: '[PRE66]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'If the book has already been borrowed by another customer, it cannot be borrowed
    again:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这本书已经被其他顾客借走，则不能再被借阅：
- en: '[PRE67]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'We prompt the user for the name and address of the customer:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提示用户输入顾客的姓名和地址：
- en: '[PRE68]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'If there is no customer with the given name and address, an error message is
    displayed:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有找到具有给定姓名和地址的顾客，将显示错误信息：
- en: '[PRE69]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Finally, we add the book to the customer''s loan set and we mark the customer
    as the borrower of the book:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将书籍添加到顾客的借阅集合中，并将顾客标记为书籍的借阅者：
- en: '[PRE70]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Reserving a book
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预订书籍
- en: 'The reservation process is similar to the preceding borrowing process. We prompt
    the user for the author and title of the book, as well as the name and address
    of the customer, which is shown as follows:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 预订过程与之前的借阅过程类似。我们提示用户输入书籍的作者和标题，以及顾客的姓名和地址，如下所示：
- en: '[PRE71]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'If the book does not exist, an error message is displayed:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 如果书籍不存在，将显示错误信息：
- en: '[PRE72]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'If the book has not been borrowed, it is not possible to reserve it. Instead,
    we encourage the user to borrow the book:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 如果书籍尚未被借阅，则无法预订。相反，我们鼓励用户借阅这本书：
- en: '[PRE73]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'We prompt the user for the name and address of the customer:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提示用户输入顾客的姓名和地址：
- en: '[PRE74]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'If the customer does not exist, an error message is displayed:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 如果顾客不存在，将显示错误信息：
- en: '[PRE75]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'If the customer has already borrowed the book, they cannot also reserve the
    book:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如果顾客已经借阅了这本书，他们也不能预订这本书：
- en: '[PRE76]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Finally, we add the customer to the reservation list of the book and we add
    the book to the reservation set of the customer. Note that there is a list of
    reservation customers for the book, while there is a set of reserved books for
    the customer. The reason for this is that when a book is returned, the first customer
    in the reservation list borrows the book. There are no such restrictions when
    it comes to a set of reservations for a customer:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将顾客添加到书籍的预订列表中，并将书籍添加到顾客的预订集合中。请注意，对于书籍有一个预订顾客列表，而对于顾客有一个已预订书籍集合。这样做的原因是当一本书被归还时，预订列表中的第一个顾客会借阅这本书。对于顾客的预订集合没有这样的限制：
- en: '[PRE77]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'We notify the customer of its position on the reservation list:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通知顾客其在预订列表中的位置：
- en: '[PRE78]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Returning a book
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 归还书籍
- en: 'When returning a book, we prompt the user for its author and title. However,
    we do not ask for the customer who has borrowed the book. That information is
    already stored in the `Book` object:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 当归还一本书时，我们提示用户输入其作者和标题。然而，我们不询问借阅这本书的顾客。这些信息已经存储在`Book`对象中：
- en: '[PRE79]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'If the book with the given author and title does not exist, an error message
    is displayed:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给定作者和标题的书籍不存在，将显示错误信息：
- en: '[PRE80]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'If the customer with the given name and address does not exist, an error message
    is displayed:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给定姓名和地址的顾客不存在，将显示错误信息：
- en: '[PRE81]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'When we have returned the book, we need to find out whether any customer has
    reserved it:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们归还了书籍后，我们需要找出是否有任何顾客已经预订了它：
- en: '[PRE82]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'If there is at least one customer in the reservation list of the book, we obtain
    that customer, remove them from the reservation list of the book, mark the customer
    as the borrower of the book, and add the book to the loan set of the customer:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 如果书籍的预订列表中至少有一个顾客，我们获取该顾客，将其从书籍的预订列表中移除，将顾客标记为书籍的借阅者，并将书籍添加到顾客的借阅集合中：
- en: '[PRE83]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Looking up books and customers
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找书籍和顾客
- en: 'When saving and loading the library information from a file, we need to transform
    between pointers to `Book` and `Customer` objects and indexes in the book and
    customer lists. The `lookupIndex` method takes a pointer to a `Book` object and
    returns its index in the book list:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 当从文件保存和加载图书馆信息时，我们需要在`Book`和`Customer`对象的指针与书籍和顾客列表中的索引之间进行转换。`lookupIndex`方法接受一个指向`Book`对象的指针，并返回它在书籍列表中的索引：
- en: '[PRE84]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'If we reach this point, the execution is aborted with an error message by the
    `assert` macro. However, we should not reach this point, since the `Book` pointer
    should be in the book pointer list:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们达到这个点，执行将通过`assert`宏显示错误信息而终止。然而，我们不应该达到这个点，因为`Book`指针应该在书籍指针列表中：
- en: '[PRE85]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'The `lookupBookPtr` method performs the opposite task. It finds the `Book`
    object pointer at the position given by `bookIndex` in the book pointer list.
    The `assert` macro aborts the execution with an error message if the index is
    outside the scope of the list. However, that should not happen since all indexes
    shall be within the scope:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '`lookupBookPtr` 方法执行相反的任务。它根据`bookIndex`在书籍指针列表中的位置找到`Book`对象指针。如果索引超出列表范围，`assert`宏会通过错误信息终止执行。然而，这种情况不应该发生，因为所有索引都应该在范围内：'
- en: '[PRE86]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'The `lookupCustomerIndex` method gives the index of the `Customer` pointer
    in the customer pointer list, in the same way as shown in the preceding `lookupBookIndex`
    method:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`lookupCustomerIndex`方法以与前面`lookupBookIndex`方法相同的方式给出`Customer`指针在客户指针列表中的索引：'
- en: '[PRE87]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'The `lookupCustomerPtr` method looks up the index of the `Customer` pointer
    in the customer pointer list in the same way as shown in the preceding `lookupBookPtr` method:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '`lookupCustomerPtr`方法以与前面`lookupBookPtr`方法相同的方式在客户指针列表中查找`Customer`指针的索引：'
- en: '[PRE88]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Marshmallowing
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Marshmallowing
- en: 'The `save` and `load` methods of the `Library` class of this chapter are a
    bit more complicated than their counterparts in [Chapter 3](6814bf19-e75b-4083-8447-892dd8416f49.xhtml),
    *Building a Library Management System*. The reason for this is that we cannot
    save pointers directly, since a pointer holds a memory address that can be changed
    between executions. Instead, we need to save their indexes to the file. The process
    of transforming pointers to indexes and indexes to pointers is called **marshmallowing**.
    When saving the library, we divide the saving process into several steps:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中`Library`类的`save`和`load`方法比第3章中对应的*构建图书馆管理系统*要复杂一些。原因是我们不能直接保存指针，因为指针持有可能在执行之间改变的内存地址。相反，我们需要将它们的索引保存到文件中。将指针转换为索引和索引转换为指针的过程称为**Marshmallowing**。当保存图书馆时，我们将保存过程分为几个步骤：
- en: Saving the book list:  At this point, we save the author and title only.
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保存书籍列表：在这个阶段，我们只保存作者和标题。
- en: Saving the customer list:  At this point, we save the name and address only.
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保存客户列表：在这个阶段，我们只保存姓名和地址。
- en: 'For each book: Save the borrower (if the book is borrowed) and the (possibly
    empty) reservation list. We save the customer list indexes, rather than the pointers
    to the customers.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于每本书：保存借阅者（如果书籍被借出）和（可能为空的）预订列表。我们保存客户列表索引，而不是客户的指针。
- en: For each customer, we save the loan and reservation sets. We save the book list
    indexes, rather than the pointers to the books.
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于每个客户，我们保存借阅和预订集合。我们保存书籍列表索引，而不是书籍的指针。
- en: Saving the library information to a file
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将图书馆信息保存到文件中
- en: 'The `Save` method opens the file and, if it was successfully opened, reads
    the books and customers of the library:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '`Save`方法打开文件，如果成功打开，则读取图书馆的书籍和客户：'
- en: '[PRE89]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: Writing the book objects
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写书籍对象
- en: We save the book objects. We only save the author and title of the books by
    calling `write` for each `Book` object. We do not save the potential borrower
    and reservation list at this point.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我们保存书籍对象。我们通过为每个`Book`对象调用`write`来只保存书籍的作者和标题。在这个阶段，我们不保存潜在的借阅者和预订列表。
- en: 'We start by writing the number of books in the list to the file:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将列表中的书籍数量写入文件：
- en: '[PRE90]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'Then we write the information of each book to the file by calling `write` on
    each `Book` object pointer:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们通过在每个`Book`对象指针上调用`write`来将每本书的信息写入文件：
- en: '[PRE91]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Writing the customer objects
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写客户对象
- en: We save the customer objects. Similar to the preceding book case, we only save
    the name and address of the customers by calling `write` for each `Customer` object.
    We do not save sets of borrowed and reserved books at this point.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 我们保存客户对象。类似于前面的书籍案例，我们通过为每个`Customer`对象调用`write`来只保存客户的名字和地址。在这个阶段，我们不保存借阅和预订的书籍集合。
- en: 'In the same way, as in the preceding book case, we start by writing the number
    of customers on the list to the file:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，就像前面的书籍案例一样，我们首先将列表中的客户数量写入文件：
- en: '[PRE92]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Then we write the information of each customer to the file by calling the `write`
    method on each `Customer` object pointer:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们通过在每个`Customer`对象指针上调用`write`方法来将每个客户的信息写入文件：
- en: '[PRE93]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Writing the borrower index
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写借阅者索引
- en: 'For each `Book` object, if the book is borrowed we look up and save the index
    of the `Customer`, rather than the pointer to the object:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个`Book`对象，如果书籍被借出，我们查找并保存`Customer`的索引，而不是对象的指针：
- en: '[PRE94]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'For each book, we start by checking if it has been borrowed. If it has been
    borrowed, we write the value `true` to the file, to indicate that it is borrowed:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每本书，我们首先检查它是否已被借出。如果已被借出，我们将值`true`写入文件，以表示它已被借出：
- en: '[PRE95]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'Then we look up the index of the customer that has borrowed the book in the
    customer pointer list and write the index to the file:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在客户指针列表中查找借阅了这本书的客户索引，并将索引写入文件：
- en: '[PRE96]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'If the book is not borrowed, we just write the value `false` to the file, to
    indicate that the book has not been borrowed:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 如果书籍没有被借出，我们只需将值`false`写入文件，以表示书籍没有被借出：
- en: '[PRE97]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: Writing the reservation indexes
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 写入预约索引
- en: 'As a book can be reserved for more than one customer, we iterate through the
    list of reservations and save the index of each customer in the reservation list:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 由于一本书可以被多个客户预约，我们遍历预约列表并保存每个客户在预约列表中的索引：
- en: '[PRE98]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'For each book, we start by writing the number of reservations of the book to
    the file:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每一本书，我们首先将书的预约数量写入文件：
- en: '[PRE99]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'Then we iterate through the reservation list and, for each reservation, we
    look up and write the index of each customer that reserved the book:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们遍历预约列表，对于每个预约，我们在文件中查找并写入预约了这本书的每个客户的索引：
- en: '[PRE100]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Writing the loan book indexes
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 写入借阅书籍索引
- en: 'For each customer, we save the indexes of the books they have borrowed. First,
    we save the size of the loan list and then the book indexes:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个客户，我们保存他们借阅的书籍索引。首先保存借阅列表的大小，然后是书籍索引：
- en: '[PRE101]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'For each customer, we start by writing the number of loans to the file:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个客户，我们首先写入其借阅数量到文件：
- en: '[PRE102]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'Then we iterate through the loan set and, for each loan, we look up and write
    the index of each book to the file:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们遍历借阅集合，对于每个借阅，我们在文件中查找并写入每本书的索引：
- en: '[PRE103]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Writing the reservation book indexes
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 写入预约书籍索引
- en: 'In the same way, for each customer, we save the indexes of the books they have
    reserved. First, we save the size of the reservation list and then the indexes
    of the books they reserved:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，对于每个客户，我们保存他们预约的书籍索引。首先保存预约列表的大小，然后是预约的书籍索引：
- en: '[PRE104]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'For each customer, we start by writing the number of reserved books to the
    file:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个客户，我们首先写入其预约书籍的数量到文件：
- en: '[PRE105]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'Then we iterate through the reservation set and, for each reservation, we look
    up and write the index of each book to the file:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们遍历预约集合，对于每个预约，我们在文件中查找并写入每本书的索引：
- en: '[PRE106]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: Loading the library information from a file
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从文件中加载图书馆信息
- en: 'When loading the file, we proceed in the same manner as when we saved the file:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 当加载文件时，我们按照保存文件时的相同方式操作：
- en: '[PRE107]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: Reading the book objects
  id: totrans-265
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取书籍对象
- en: 'We read the size of the book list, and then the books themselves. Remember
    that we have so far read the author and title of the books only:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 我们读取书籍列表的大小，然后读取书籍本身。记住，到目前为止，我们只读取了书籍的作者和标题：
- en: '[PRE108]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'We start by reading the number of books:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先读取书籍数量：
- en: '[PRE109]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'Then we read the books themselves. For each book, we dynamically allocate a
    `Book` object, read its information by calling `read` on the pointer, and add
    the pointer to the book pointer list:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 然后读取书籍本身。对于每本书，我们动态分配一个`Book`对象，通过调用指针上的`read`方法读取其信息，并将指针添加到书籍指针列表中：
- en: '[PRE110]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: Reading the customer objects
  id: totrans-272
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取客户对象
- en: 'In the same way, we read the size of the customer list and then the customers
    themselves. Up until this point, we read the name and address of the customers
    only:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，我们读取客户列表的大小，然后读取客户本身。到目前为止，我们只读取了客户的姓名和地址：
- en: '[PRE111]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'We start by reading the number of customers:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先读取客户数量：
- en: '[PRE112]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'Then we read the customers themselves. For each customer, we dynamically allocate
    a `Customer` object, read its information by calling `read` on the pointer, and
    add the pointer to the book pointer list:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们读取客户本身。对于每个客户，我们动态分配一个`Customer`对象，通过调用指针上的`read`方法读取其信息，并将指针添加到书籍指针列表中：
- en: '[PRE113]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: Reading the borrower index
  id: totrans-279
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取借阅者索引
- en: 'For each book, we read the customers that have borrowed it (if any) and the
    list of customers that have reserved the book:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每本书，我们读取借阅了它的客户（如果有）以及预约了这本书的客户列表：
- en: '[PRE114]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'If `borrowed` is `true`, the book has been borrowed. In that case, we read
    the index of the customer. We then look up the pointer of the `Customer` object,
    which we add to the reservation list of the book:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`borrowed`是`true`，则表示书籍已被借出。在这种情况下，我们读取客户索引。然后我们查找`Customer`对象的指针，将其添加到书籍的预约列表中：
- en: '[PRE115]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'If `borrowed` is `false`, the book has not been borrowed. In that case, we
    set the pointer to the customer that has borrowed the book to `nullptr`:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `borrowed` 是 `false`，则表示书籍尚未被借出。在这种情况下，我们将借出书籍的客户指针设置为 `nullptr`：
- en: '[PRE116]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: Reading the reservation indexes
  id: totrans-286
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取预订索引
- en: 'For each book, we also read the reservation list. First, we read the size of
    the list and then the customer indexes themselves:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每一本书，我们也会读取预订列表。首先，我们读取列表的大小，然后是客户索引本身：
- en: '[PRE117]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'We start by reading the number of reservations of the book:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先读取书籍的预订数量：
- en: '[PRE118]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'For each reservation, we read the index of the customer and call `lookupCustomerPtr`
    to obtain the pointer to the `Customer` object, which we add to the reservation
    pointer list of the book:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每一笔预订，我们读取客户的索引并调用 `lookupCustomerPtr` 来获取 `Customer` 对象的指针，然后将其添加到书籍的预订指针列表中：
- en: '[PRE119]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: Reading the loan book indexes
  id: totrans-293
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取借阅书籍索引
- en: 'For each customer, we read the set of borrowed books:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每一位客户，我们读取借阅的书籍集合：
- en: '[PRE120]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'We start by reading the size of the loan list:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先读取借阅列表的大小：
- en: '[PRE121]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'For each loan, we read the index of the book and call `lookupBookPtr` to obtain
    the pointer to the `Book` object, which we add to the loan pointer list:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每一笔借阅，我们读取书籍的索引并调用 `lookupBookPtr` 来获取 `Book` 对象的指针，然后将其添加到借阅指针列表中：
- en: '[PRE122]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: Reading the reservation book indexes
  id: totrans-300
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取预订书籍索引
- en: 'In the same way, for each customer, we read the set of reserved books:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，对于每一位客户，我们读取预订的书籍集合：
- en: '[PRE123]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: 'We start by reading the size of the reservation list:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先读取预订列表的大小：
- en: '[PRE124]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: 'For each reservation, we read the index of the book and call `lookupBookPtr`
    to obtain the pointer to the `Book` object, which we add to the reservation pointer
    list:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每一笔预订，我们读取书籍的索引并调用 `lookupBookPtr` 来获取 `Book` 对象的指针，然后将其添加到预订指针列表中：
- en: '[PRE125]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: Deallocating memory
  id: totrans-307
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 释放内存
- en: 'Since we have added dynamically allocated `Book` and `Customer` objects to
    the lists, we need to deallocate them at the end of the execution. The destructor
    iterates through the book and customer pointer lists and deallocates all the book
    and customer pointers:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经将动态分配的 `Book` 和 `Customer` 对象添加到列表中，我们需要在执行结束时释放它们。析构函数遍历书籍和客户指针列表，并释放所有书籍和客户指针：
- en: '[PRE126]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: The main function
  id: totrans-310
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主函数
- en: 'Similar to [Chapter 3](6814bf19-e75b-4083-8447-892dd8416f49.xhtml), *Building
    a Library Management System*, the `main` function simply creates a `Library` object:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 与 [第 3 章](6814bf19-e75b-4083-8447-892dd8416f49.xhtml)，*构建图书馆管理系统* 类似，`main`
    函数只是创建一个 `Library` 对象：
- en: '**Main.cpp**'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '**Main.cpp**'
- en: '[PRE127]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: Summary
  id: totrans-314
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we built a library management system similar to the system
    of [Chapter 3](6814bf19-e75b-4083-8447-892dd8416f49.xhtml), *Building a Library
    Management System*. However, we omitted all integer identity numbers and replaced
    them with pointers. This gives us the advantage that we can store loans and reservations
    more directly, but it also makes it harder for us to save and load them into a
    file.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们构建了一个类似于 [第 3 章](6814bf19-e75b-4083-8447-892dd8416f49.xhtml)，*构建图书馆管理系统*
    的图书馆管理系统。然而，我们省略了所有整数身份号码，并用指针替换了它们。这使我们能够更直接地存储借阅和预订，但也使得我们保存和加载到文件中变得更加困难。
- en: In [Chapter 5](411aae8c-9215-4315-8a2e-882bf028834c.xhtml), *Qt Graphical Applications*,
    we will look at graphical applications.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 5 章](411aae8c-9215-4315-8a2e-882bf028834c.xhtml)，*Qt 图形应用程序* 中，我们将探讨图形应用程序。
