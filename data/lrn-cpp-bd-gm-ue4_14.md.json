["```cpp\nPublicDependencyModuleNames.AddRange(new string[] { \"Core\", \"CoreUObject\", \"Engine\", \"InputCore\" });\n```", "```cpp\n, \"UMG\", \"Slate\", \"SlateCore\"\n```", "```cpp\n#include \"CoreMinimal.h\"\n#include \"Blueprint/UserWidget.h\"\n#include \"UMG/Public/Components/Button.h\"\n#include \"WidgetBase.generated.h\"\n\n/**\n * WidgetBase.h\n */\nUCLASS()\nclass GOLDENEGG_API UWidgetBase : public UUserWidget\n{\n    GENERATED_BODY()\n\npublic:\n    UPROPERTY(meta = (BindWidgetOptional))\n    UButton* CloseButton;\n\n    bool isOpen;\n\n    bool Initialize();\n    void NativeConstruct();\n\n    UFUNCTION(BlueprintCallable)\n    void CloseWindow();\n};\n```", "```cpp\n#include \"WidgetBase.h\"\n#include \"Avatar.h\"\n#include \"Kismet/GameplayStatics.h\"\n\nbool UWidgetBase::Initialize()\n{\n    bool success = Super::Initialize();\n    if (!success)  return false;\n\n    if (CloseButton != NULL)\n    {\n        CloseButton->OnClicked.AddDynamic(this, &UWidgetBase::CloseWindow);\n    }\n\n    return true;\n}\n\nvoid UWidgetBase::NativeConstruct()\n{\n    isOpen = true;\n}\n\nvoid UWidgetBase::CloseWindow()\n{\n    if (isOpen)\n    {\n        AAvatar *avatar = Cast<AAvatar>(\n            UGameplayStatics::GetPlayerPawn(GetWorld(), 0));\n\n        avatar->ToggleInventory();\n        isOpen = false;\n    }\n}\n```", "```cpp\nCloseButton->OnClicked.AddDynamic(this, &UWidgetBase::CloseWindow);\n```", "```cpp\n#include \"CoreMinimal.h\"\n#include \"WidgetBase.h\"\n#include \"UMG/Public/Components/Image.h\"\n#include \"UMG/Public/Components/TextBlock.h\"\n#include \"UMG/Public/Components/Button.h\"\n#include \"InventoryWidget.generated.h\"\n\n/**\n * \n */\nUCLASS()\nclass GOLDENEGG_API UInventoryWidget : public UWidgetBase\n{\n    GENERATED_BODY()\n\npublic:\n    const int kNumWidgets = 2;\n    //image widgets\n    UPROPERTY(meta = (BindWidget))\n        UImage* InventoryImage1;\n\n    UPROPERTY(meta = (BindWidget))\n        UImage* InventoryImage2;\n\n    //text widgets\n    UPROPERTY(meta = (BindWidget))\n        UTextBlock* InventoryText1;\n\n    UPROPERTY(meta = (BindWidget))\n        UTextBlock* InventoryText2;\n\n    //Invisible Buttons\n    UPROPERTY(meta = (BindWidget))\n        UButton* InventoryButton1;\n\n    UPROPERTY(meta = (BindWidget))\n        UButton* InventoryButton2;\n\n    bool Initialize();\n\n    void HideWidgets();\n    void AddWidget(int idx, FString name, UTexture2D* img);\n\n    UFUNCTION(BlueprintCallable)\n    void MouseClicked1();\n    UFUNCTION(BlueprintCallable)\n    void MouseClicked2();\n};\n```", "```cpp\n#include \"InventoryWidget.h\"\n#include \"MyHUD.h\"\n#include \"Runtime/UMG/Public/Components/SlateWrapperTypes.h\"\n```", "```cpp\nbool UInventoryWidget::Initialize()\n{\n    bool success = Super::Initialize();\n    if (!success)  return false;\n\n    if (InventoryButton1 != NULL)\n    {\n        InventoryButton1->OnClicked.AddDynamic(this, &UInventoryWidget::MouseClicked1);\n    }\n    if (InventoryButton2 != NULL)\n    {\n        InventoryButton2->OnClicked.AddDynamic(this, &UInventoryWidget::MouseClicked2);\n    }\n\n    return true;\n}\n```", "```cpp\nvoid UInventoryWidget::HideWidgets()\n{\n    InventoryImage1->SetVisibility(ESlateVisibility::Hidden);\n    InventoryText1->SetVisibility(ESlateVisibility::Hidden);\n    InventoryImage2->SetVisibility(ESlateVisibility::Hidden);\n    InventoryText2->SetVisibility(ESlateVisibility::Hidden);\n}\n\nvoid UInventoryWidget::AddWidget(int idx, FString name, UTexture2D* img)\n{\n    if (idx < kNumWidgets)\n    {\n        switch (idx)\n        {\n        case 0:\n            InventoryImage1->SetBrushFromTexture(img);\n            InventoryText1->SetText(FText::FromString(name));\n            InventoryImage1->SetVisibility(ESlateVisibility::Visible);\n            InventoryText1->SetVisibility(ESlateVisibility::Visible);\n            break;\n        case 1:\n            InventoryImage2->SetBrushFromTexture(img);\n            InventoryText2->SetText(FText::FromString(name));\n            InventoryImage2->SetVisibility(ESlateVisibility::Visible);\n            InventoryText2->SetVisibility(ESlateVisibility::Visible);\n            break;\n        }\n\n    }\n}\n```", "```cpp\nvoid UInventoryWidget::MouseClicked1()\n{\n    // Get the controller & hud \n    APlayerController* PController = GetWorld()->GetFirstPlayerController();\n    AMyHUD* hud = Cast<AMyHUD>(PController->GetHUD());\n    hud->MouseClicked(0);\n}\n\nvoid UInventoryWidget::MouseClicked2()\n{\n    // Get the controller & hud \n    APlayerController* PController = GetWorld()->GetFirstPlayerController();\n    AMyHUD* hud = Cast<AMyHUD>(PController->GetHUD());\n    hud->MouseClicked(1);\n}\n```", "```cpp\n    void MouseClicked(int idx);\n\n    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Widgets\") \n        TSubclassOf<class UUserWidget> wInventory;\n\n    UInventoryWidget* Inventory;\n\n    void OpenInventory();\n    void CloseInventory();\n```", "```cpp\nvoid AMyHUD::DrawWidgets()\n{\n    for (int c = 0; c < widgets.Num(); c++)\n    {\n        Inventory->AddWidget(c, widgets[c].icon.name, widgets[c].icon.tex);\n    }\n}\n\nvoid AMyHUD::addWidget(Widget widget)\n{\n    widgets.Add(widget);\n}\n\nvoid AMyHUD::clearWidgets()\n{\n    widgets.Empty();\n}\n```", "```cpp\nvoid AMyHUD::MouseClicked(int idx)\n{\n    AAvatar *avatar = Cast<AAvatar>(\n        UGameplayStatics::GetPlayerPawn(GetWorld(), 0));\n    if (widgets[idx].bpSpell)\n    {\n        avatar->CastSpell(widgets[idx].bpSpell);\n    }\n\n}\n```", "```cpp\nvoid AMyHUD::OpenInventory()\n{\n    if (!Inventory)\n    {\n        Inventory = CreateWidget<UInventoryWidget>(GetOwningPlayerController(), wInventory);\n    }\n    Inventory->AddToViewport();\n    Inventory->HideWidgets();\n}\n\nvoid AMyHUD::CloseInventory()\n{\n    clearWidgets();\n    if (Inventory)\n    {\n        Inventory->HideWidgets();\n        Inventory->RemoveFromViewport();\n    }\n}\n```", "```cpp\nstruct Widget\n{\n    Icon icon;\n    // bpSpell is the blueprint of the spell this widget casts \n    UClass *bpSpell;\n    Widget(Icon iicon)\n    {\n        icon = iicon;\n    }\n};\n```", "```cpp\n\nvoid AAvatar::ToggleInventory()\n{\n    // Get the controller & hud \n    APlayerController* PController = GetWorld()->GetFirstPlayerController();\n    AMyHUD* hud = Cast<AMyHUD>(PController->GetHUD());\n\n    // If inventory is displayed, undisplay it. \n    if (inventoryShowing)\n    {\n        hud->CloseInventory();\n        inventoryShowing = false;\n        PController->bShowMouseCursor = false;\n        return;\n    }\n\n    // Otherwise, display the player's inventory \n    inventoryShowing = true;\n    PController->bShowMouseCursor = true;\n    hud->OpenInventory();\n    for (TMap<FString, int>::TIterator it =\n        Backpack.CreateIterator(); it; ++it)\n    {\n        // Combine string name of the item, with qty eg Cow x 5 \n        FString fs = it->Key + FString::Printf(TEXT(\" x %d\"), it->Value);\n        UTexture2D* tex;\n        if (Icons.Find(it->Key))\n        {\n            tex = Icons[it->Key];\n            Widget w(Icon(fs, tex));\n            w.bpSpell = Spells[it->Key];\n            hud->addWidget(w);\n        }    \n    }\n    hud->DrawWidgets();\n}\n```", "```cpp\n        AMyHUD* hud = Cast<AMyHUD>(PController->GetHUD());\n        hud->MouseMoved();\n```", "```cpp\n        AMyHUD* hud = Cast<AMyHUD>(PController->GetHUD());\n        hud->MouseRightClicked();\n```", "```cpp\n    AMyHUD* hud = Cast<AMyHUD>(PController->GetHUD());\n    hud->MouseClicked();\n```", "```cpp\n#include \"Sound/SoundCue.h\"\n```", "```cpp\nUPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Sound\")\n    USoundCue* audioCue;\n```", "```cpp\n        UGameplayStatics::PlaySound2D(this, audioCue);\n```"]