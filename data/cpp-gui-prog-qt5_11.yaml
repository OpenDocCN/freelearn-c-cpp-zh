- en: Implementing a Graphics Editor
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现图形编辑器
- en: Qt provides us with low-level graphics rendering using the `QPainter` class.
    Qt is capable of rendering both bitmap and vector images. In this chapter, we
    will learn how to draw shapes using Qt, and finally, create a paint program of
    our own.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Qt为我们提供了使用`QPainter`类进行低级图形渲染的功能。Qt能够渲染位图和矢量图像。在本章中，我们将学习如何使用Qt绘制形状，并最终创建我们自己的绘图程序。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Drawing vector shapes
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘制矢量形状
- en: Saving vector images to an SVG file
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将矢量图像保存为SVG文件
- en: Creating a paint program
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建绘图程序
- en: Are you ready? Let's get started!
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好了吗？让我们开始吧！
- en: Drawing vector shapes
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制矢量形状
- en: In the following section, we will learn how to render vector graphics on our
    Qt application using the QPainter class.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将学习如何在我们的Qt应用程序中使用QPainter类渲染矢量图形。
- en: Vector versus bitmap
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 矢量与位图
- en: There are two types of format in computer graphics—bitmap and vector. Bitmap
    images (also known as raster images) are images that are stored as a series of
    tiny dots called **pixels**. Each pixel will be assigned a color and gets displayed
    on screen exactly how it's stored—a one-to-one correspondence between the pixels
    and what is displayed on the screen.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机图形中有两种格式——位图和矢量。位图图像（也称为光栅图像）是以一系列称为**像素**的微小点存储的图像。每个像素将被分配一种颜色，并且以存储的方式显示在屏幕上——像素与屏幕上显示的内容之间是一一对应的关系。
- en: On the other hand, vector images are not based on bitmap patterns but rather
    use mathematical formulas to represent lines and curves that can be combined to
    create geometrical shapes.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，矢量图像不是基于位图模式，而是使用数学公式来表示可以组合成几何形状的线条和曲线。
- en: 'The main characteristics of both formats are listed here:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这里列出了两种格式的主要特点：
- en: 'Bitmap:'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 位图：
- en: Usually a larger file size
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通常文件大小较大
- en: Cannot be enlarged into a higher resolution as the image quality will be affected
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不能放大到更高分辨率，因为图像质量会受到影响
- en: Used to display complex images with many colors, such as photographs
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于显示颜色丰富的复杂图像，如照片
- en: 'Vector:'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 矢量：
- en: Very small in file size
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件大小非常小
- en: Graphics can be resized without affecting the image quality
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图形可以调整大小而不影响图像质量
- en: Only a limited amount of color can be applied to each shape (single color, gradient,
    or pattern)
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个形状只能应用有限数量的颜色（单色、渐变或图案）
- en: Complex shapes require high-processing power to be generated
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复杂形状需要高处理能力才能生成
- en: 'The diagram here compares bitmap and vector graphics:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的图表比较了位图和矢量图形：
- en: '![](img/94527953-3456-480e-92b6-2303f304d7c4.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/94527953-3456-480e-92b6-2303f304d7c4.png)'
- en: We will focus on learning how to draw vector graphics using Qt in this section,
    but we will also cover bitmap graphics later in this chapter.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将专注于学习如何使用Qt绘制矢量图形，但我们也将在本章后面介绍位图图形。
- en: Drawing vector shapes using QPainter
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用QPainter绘制矢量形状
- en: 'First, create another Qt project by going to File | New File or Project. Then
    select Qt Widget Application under the Application category. After the project
    has been created, open up `mainwindow.h` and add in the `QPainter` header:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，通过转到文件|新建文件或项目来创建另一个Qt项目。然后在应用程序类别下选择Qt Widget应用程序。创建项目后，打开`mainwindow.h`并添加`QPainter`头文件：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After that, we also declare a virtual function called `paintEvent()`, which
    is a standard event handler in Qt that gets called whenever there is something
    that needs to be painted, be it a GUI update, a window resize, or when the `update()`
    function is being called manually:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们还声明了一个名为`paintEvent()`的虚函数，这是Qt中的标准事件处理程序，每当需要绘制东西时都会调用它，无论是GUI更新、窗口调整大小，还是手动调用`update()`函数时：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, open up `mainwindow.cpp` and add the `paintEvent()` function:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，打开`mainwindow.cpp`并添加`paintEvent()`函数：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you build the program now, you should see the following:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果现在构建程序，你应该会看到以下内容：
- en: '![](img/24aed423-bb6e-4adc-b33f-3804ca1972c2.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/24aed423-bb6e-4adc-b33f-3804ca1972c2.png)'
- en: The preceding code is really long. Let's break it down, so it's easier for you
    to understand. Whenever the `paintEvent()` is called (usually it will be called
    once when the window needs to be drawn), we call `QPainter::begin()` to tell Qt
    we're about to draw something, and we call `QPainter::end()` when we're done.
    Therefore, the code that draws graphics will be contained within `QPainter::begin()`
    and `QPainter::end()`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码真的很长。让我们把它分解一下，这样你就更容易理解了。每当调用`paintEvent()`时（通常在窗口需要绘制时会调用一次），我们调用`QPainter::begin()`告诉Qt我们要开始绘制东西了，然后在完成时调用`QPainter::end()`。因此，绘制图形的代码将包含在`QPainter::begin()`和`QPainter::end()`之间。
- en: 'Let''s look at the following steps:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下步骤：
- en: The first thing that we drew was a straight line, which is quite simple – just
    call `QPainter::drawLine()` and insert the start point and end point values to
    the function. Do note that the coordinate system used by Qt is in pixel format.
    Its origin starts from the top-left corner of the application window and increases
    to the right and bottom directions, depending on the *x* and *y* values. The increment
    of the *x* value moves the position to the right direction, while the increment
    of the *y* value moves the position to the bottom direction.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们绘制的第一件事是一条直线，这很简单——只需调用`QPainter::drawLine()`并将起点和终点值插入函数中。请注意，Qt使用的坐标系统是以像素格式的。它的原点从应用程序窗口的左上角开始，并向右和向下方向增加，取决于*x*和*y*的值。*x*值的增加将位置移动到右方向，而*y*值的增加将位置移动到下方向。
- en: Next, draw a rectangle that has a hatching pattern within the shape. This time,
    we called `QPainter::setBrush()` to set the pattern, before calling `drawRect()`.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，绘制一个矩形，在形状内部有一种阴影图案。这次，我们调用了`QPainter::setBrush()`来设置图案，然后调用`drawRect()`。
- en: After that, we drew an elliptical shape with a dash-dot outline and hatching
    pattern within the shape. Since we have already set the pattern in the previous
    step, we don't have to do it again. Instead, we use the QPen class to set the
    outline style before calling `drawEllipse()`. Just remember that in Qt's terms,
    a brush is used to define the inner color or pattern of a shape, while a pen is
    used to define the outline.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们用虚线轮廓和图案在形状内部绘制了一个椭圆形。由于我们已经在上一步中设置了图案，所以我们不必再次设置。相反，我们使用`QPen`类在调用`drawEllipse()`之前设置轮廓样式。只需记住，在Qt的术语中，刷子用于定义形状的内部颜色或图案，而笔用于定义轮廓。
- en: The next two shapes are basically similar to the previous ones; we only changed
    different colors and patterns so that you can see the distinctions between them
    and the previous examples.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来的两个形状基本上与之前的相似；我们只是改变了不同的颜色和图案，这样你就可以看到它们与之前的例子之间的区别。
- en: Drawing text
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制文本
- en: 'Additionally, you can also draw text using the `QPainter`class. All you need
    to do is to call `QPainter::setFont()` to set the font properties before calling
    `QPainter::drawText()`, like so:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还可以使用`QPainter`类来绘制文本。在调用`QPainter::drawText()`之前，您只需要调用`QPainter::setFont()`来设置字体属性，就像这样：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `setFont()` function is optional as you will get a default font if you
    don''t specify it. Once you''re done, build and run the program. You should see
    the word Hello World! displayed in the window:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`setFont()`函数是可选的，如果您不指定它，将获得默认字体。完成后，构建并运行程序。您应该在窗口中看到“Hello World！”这个词显示出来：'
- en: '![](img/69667eda-dc36-4753-be48-1c8ac3a0143f.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/69667eda-dc36-4753-be48-1c8ac3a0143f.png)'
- en: As you can see here, the vector shapes are basically generated by Qt in real
    time, which looks perfectly fine regardless of how you rescale the window and
    change its aspect ratio. If you're rendering a bitmap image instead, its visual
    quality may get degraded when its rescaled along with the window or changed in
    its aspect ratio.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里你可以看到，矢量形状基本上是由Qt实时生成的，无论你如何重新调整窗口大小和改变它的纵横比，它看起来都很好。如果你渲染的是位图图像，当它与窗口一起重新调整大小或改变纵横比时，它的视觉质量可能会下降。
- en: Saving vector images to an SVG File
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将矢量图像保存到SVG文件
- en: Beside drawing vector graphics, Qt allows us to save these graphics into a vector
    image file, called the **SVG** (**Scalable Vector Graphics**) file format. The
    SVG format is an open format used by a lot of software, including web browsers
    to display vector graphics. In fact, Qt can also read SVG files and render them
    on screen, but we'll skip that for now. Let's check out how we can save our vector
    graphics to an SVG file!
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 除了绘制矢量图形，Qt还允许我们将这些图形保存为矢量图像文件，称为**SVG**（可缩放矢量图形）文件格式。SVG格式是许多软件使用的开放格式，包括Web浏览器用于显示矢量图形。实际上，Qt也可以读取SVG文件并在屏幕上呈现它们，但我们暂时跳过这一点。让我们看看如何将我们的矢量图形保存为SVG文件！
- en: This example continues from where we left it in the previous section. Therefore,
    we don't have to create a new Qt project and can just stick to the previous one.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子继续了我们在上一节中留下的地方。因此，我们不必创建一个新的Qt项目，只需坚持之前的项目即可。
- en: 'First, let''s add a menu bar to our main window if it doesn''t already have
    one. Then, open `mainwindow.ui`, and in the form editor, right-click on the MainWindow
    object on the hierarchy window and select Create Menu Bar:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，如果主窗口还没有菜单栏，让我们为主窗口添加一个菜单栏。然后，打开`mainwindow.ui`，在表单编辑器中，右键单击层次结构窗口上的MainWindow对象，然后选择创建菜单栏：
- en: '![](img/6041e5ce-79df-4fd0-8b7f-0308f37da1b9.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6041e5ce-79df-4fd0-8b7f-0308f37da1b9.png)'
- en: 'Once you''re done, add File to the menu bar, followed by Save as SVG underneath
    it:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，将文件添加到菜单栏，然后在其下方添加“另存为SVG”：
- en: '![](img/22dbdd71-1359-46bb-8a7e-6537dc52034e.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/22dbdd71-1359-46bb-8a7e-6537dc52034e.png)'
- en: 'Then, go to the Action Editor at the bottom and right-click on the menu option
    we just added and select Go to slot...:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，转到底部的操作编辑器，右键单击我们刚刚添加的菜单选项，并选择转到槽...：
- en: '![](img/e6fe895f-60a5-4fd8-9328-d937ea068f9a.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e6fe895f-60a5-4fd8-9328-d937ea068f9a.png)'
- en: 'A window will pop up and ask you to pick a signal. Choose triggered() and click
    OK. A new slot function will be created for you in `mainwindow.cpp`. Before we
    open up `mainwindow.cpp`, let''s open up our `project file`(`.pro`) and add the
    following `svg` module:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 将弹出一个窗口询问您选择一个信号。选择`triggered()`，然后点击确定。这样就会在`mainwindow.cpp`中为您创建一个新的槽函数。在打开`mainwindow.cpp`之前，让我们打开我们的`项目文件`（`.pro`）并添加以下`svg`模块：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `svg` keyword tells Qt to add relevant classes to your project that can
    help you to handle the SVG file format. Then, we also need to add two more headers
    to our `mainwindow.h`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`svg`关键字告诉Qt向您的项目添加相关类，可以帮助您处理SVG文件格式。然后，我们还需要在`mainwindow.h`中添加另外两个头文件：'
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After that, open up `mainwindow.cpp` and add the following code to the slot
    function we just added in the previous step:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，打开`mainwindow.cpp`并将以下代码添加到我们刚刚在上一步中添加的槽函数中：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the preceding code, we used `QFileDialog` to let the users choose where they
    want to save their SVG file. Then, we used the `QSvgGenerator` class to export
    the graphics into an SVG file. Finally, we called the `paintAll()` function, which
    is a custom function we are going to define in the next step.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们使用`QFileDialog`让用户选择他们想要保存SVG文件的位置。然后，我们使用`QSvgGenerator`类将图形导出到SVG文件中。最后，我们调用`paintAll()`函数，这是我们将在下一步中定义的自定义函数。
- en: 'Actually, we need to modify the existing `paintAll()` method and put our rendering
    code into it. Then, pass the `QSvgGenerator` object into the function input as
    the paint device:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们需要修改现有的`paintAll()`方法并将我们的渲染代码放入其中。然后，将`QSvgGenerator`对象作为绘制设备传递到函数输入中：
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Therefore, our `paintEvent()` now simply looks like this in `mainwindow.cpp`:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们的`paintEvent()`现在在`mainwindow.cpp`中看起来像这样：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The procedure here might seem a little confusing, but what it does is basically
    call the `paintAll()` function to draw all the graphics once when the window is
    being created, and then you call `paintAll()` again when you want to save the
    graphics to an SVG file.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的过程可能看起来有点混乱，但它的基本作用是在创建窗口时调用`paintAll()`函数一次绘制所有图形，然后当您想要将图形保存到SVG文件时再次调用`paintAll()`。
- en: The only difference is the paint device – one is the main window itself, which
    we use as the drawing canvas, and for the latter one we will pass the `QSvgGenerator` object
    as the paint device, which will save the graphics into an SVG file instead.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的区别是绘图设备——一个是主窗口本身，我们将其用作绘图画布，对于后者，我们将`QSvgGenerator`对象传递为绘图设备，它将把图形保存到SVG文件中。
- en: 'Build and run the program now, click File | Save SVG File, you should be able
    to save the graphics into an SVG file. Try and open up the file with the web browser
    and see what it looks like:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在构建并运行程序，单击文件|保存SVG文件，您应该能够将图形保存到SVG文件中。尝试用网络浏览器打开文件，看看它是什么样子的：
- en: '![](img/982756a6-c52f-45d4-ab97-f9429e05366c.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/982756a6-c52f-45d4-ab97-f9429e05366c.png)'
- en: It seems like my web browser (Firefox) does not support the hatching pattern,
    but other things turn out to be fine. Since vector graphics are generated by the
    program and the shapes are not stored in the SVG file (only the mathematical formula
    and its variables are stored), you may need to make sure the features that you
    use are supported by the user's platform.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来我的网络浏览器（Firefox）不支持填充图案，但其他东西都很好。由于矢量图形是由程序生成的，形状不存储在SVG文件中（只存储数学公式及其变量），您可能需要确保用户平台支持您使用的功能。
- en: In the next section, we will learn how to create our own paint program and draw
    bitmap images using it!
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何创建我们自己的绘画程序，并使用它绘制位图图像！
- en: Creating a paint program
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建绘画程序
- en: In the following section, we will move over to the realm of pixels and learn
    how to create a paint program using Qt. Users will be able to express their creativity
    by using different sizes and colors of the brush to draw pixel images!
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将转向像素领域，并学习如何使用Qt创建绘画程序。用户将能够通过使用不同大小和颜色的画笔来表达他们的创造力，绘制像素图像！
- en: Setting up a user interface
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置用户界面
- en: 'Again, for this example, we will create a new Qt Widget Application. After
    that, open up `mainwindow.ui` and add a menu bar to the main window. Then, add
    the following options to the menu bar:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，对于这个例子，我们将创建一个新的Qt Widget应用程序。之后，打开`mainwindow.ui`并在主窗口上添加一个菜单栏。然后，在菜单栏中添加以下选项：
- en: '![](img/6c4c1e46-259b-4888-a009-0a1ddbbac18c.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6c4c1e46-259b-4888-a009-0a1ddbbac18c.png)'
- en: We have three menu items on the menu bar—File, Brush Size, and Brush Color.
    Under the File menu are functions for saving the canvas into a bitmap file, as
    well as clearing the entire canvas. The Brush Size category contains different
    options for the brush size; last but not least, the Brush Color category contains
    several options for setting the brush color.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的菜单栏上有三个菜单项——文件、画笔大小和画笔颜色。在文件菜单下有将画布保存为位图文件的功能，以及清除整个画布的功能。画笔大小类别包含不同的画笔大小选项；最后，画笔颜色类别包含设置画笔颜色的几个选项。
- en: You can go for something more *paint-like* or *Photoshop-like* for the GUI design,
    but we will use this for now for the sake of simplicity.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以选择更像*绘画*或*Photoshop*的GUI设计，但出于简单起见，我们现在将使用这个。
- en: 'Once you''re done with all that, open up `mainwindow.h` and add the following
    headers on top:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 完成所有这些后，打开`mainwindow.h`并在顶部添加以下头文件：
- en: '[PRE9]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'After that, we also declare a few virtual functions, like so:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们还声明了一些虚拟函数，如下所示：
- en: '[PRE10]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Besides the `paintEvent()` function which we used in the previous example,
    we can also add a few more for handling mouse events and window resize events.
    Then, we also add the following variables to our `MainWindow` class:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们在上一个示例中使用的`paintEvent()`函数之外，我们还可以添加一些用于处理鼠标事件和窗口调整事件的函数。然后，我们还向我们的`MainWindow`类添加以下变量：
- en: '[PRE11]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'After that, let''s open up `mainwindow.cpp` and  start with the class constructor:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，让我们打开`mainwindow.cpp`并从类构造函数开始：
- en: '[PRE12]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We need to first create a `QImage` object, which acts as the canvas, and set
    its size to match our window size. Then, we set the default brush color to black
    and its default size to `2`. After that, we will look at each of the event handlers
    and how they work.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要首先创建一个`QImage`对象，它充当画布，并将其大小设置为与我们的窗口大小相匹配。然后，我们将默认画笔颜色设置为黑色，其默认大小设置为`2`。之后，我们将看一下每个事件处理程序及其工作原理。
- en: 'First, let''s take a look at the `paintEvent()` function, which we also used
    in the vector graphics, example. This time, all it does is call `QPainter::drawImage()`
    and render the `QImage` object (our image buffer) on top of our main window:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看一下`paintEvent()`函数，这也是我们在矢量图形示例中使用的。这一次，它所做的就是调用`QPainter::drawImage()`并在我们的主窗口上渲染`QImage`对象（我们的图像缓冲区）：
- en: '[PRE13]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Next, we will look at the `resizeEvent()` function, which gets triggered whenever
    the main window is being resized by the user. To avoid image stretching, we must
    resize our image buffer to match the new window size. This can be achieved by
    creating a new `QImage` object and setting its size the same as the resized main
    window, then copying the previous QImage's pixel information and placing it at
    the exact same spot on the new image buffer.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看一下`resizeEvent()`函数，每当用户调整主窗口大小时都会触发该函数。为了避免图像拉伸，我们必须调整图像缓冲区的大小以匹配新的窗口大小。这可以通过创建一个新的`QImage`对象并设置其大小与调整后的主窗口相同来实现，然后复制先前的QImage的像素信息，并将其放置在新图像缓冲区的完全相同的位置。
- en: 'This means that your image will be cropped if the window size is smaller than
    the drawing, but at least the canvas will not be stretched and distort the image
    when the window is resized. Let''s take a look at the code:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着如果窗口大小小于绘图，您的图像将被裁剪，但至少画布不会被拉伸和扭曲图像，当窗口调整大小时。让我们看一下代码：
- en: '[PRE14]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next, we will look at the mouse event handlers, which we use to apply colors
    on the canvas. First, the `mousePressEvent()` function, which will be triggered
    when we start pressing our mouse button (left mouse button in this case). We are
    still not drawing anything at this point, but set the drawing Boolean to `true`
    and save our cursor position to the `lastPoint` variable:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看一下鼠标事件处理程序，我们将使用它来在画布上应用颜色。首先是`mousePressEvent()`函数，当我们开始按下鼠标按钮（在这种情况下是左鼠标按钮）时将触发该函数。在这一点上我们仍然没有画任何东西，但是将绘图布尔值设置为`true`并将我们的光标位置保存到`lastPoint`变量中。
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then, here is the `mouseMoveEvent()` function, which will be called when the
    mouse cursor is moved:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，这是`mouseMoveEvent()`函数，当鼠标光标移动时将被调用：
- en: '[PRE16]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the preceding code, we check if indeed we are moving the mouse while holding
    the left mouse button. If we are, then we draw a line from the previous cursor
    position to our current cursor position. Then, we save the current cursor position
    to the `lastPoint` variable and call `update()` to notify Qt to trigger the `paintEvent()`
    function.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们检查是否确实在按住鼠标左键移动鼠标。如果是，那么我们就从上一个光标位置画一条线到当前光标位置。然后，我们保存当前光标位置到`lastPoint`变量，并调用`update()`通知Qt触发`paintEvent()`函数。
- en: 'Finally, when we release the left mouse button, the `mouseReleaseEvent()` will
    be called. We simply set the drawing variable to `false`, and we''re done:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当我们释放鼠标左键时，将调用`mouseReleaseEvent()`。我们只需将绘图变量设置为`false`，然后完成：
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If we build the program and run it now, we should be able to start drawing
    something on our little paint program:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在构建并运行程序，我们应该能够在我们的小绘画程序上开始绘制一些东西：
- en: '![](img/89598a8c-02fa-4d93-9868-37aa3a30d6f8.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/89598a8c-02fa-4d93-9868-37aa3a30d6f8.png)'
- en: 'Even though we can draw something now, it''s all the same brush size and with
    the same color all the time. That''s a little boring! Let''s right-click on each
    of the options on the Brush Size category in the main menu and select Go to slot...,
    then pick the triggered() option and then press OK. Qt will then create the slot
    functions accordingly for us, and what we need to do within these functions is
    basically change the brushSize variable, like so:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管现在我们可以绘制一些东西，但都是相同的笔刷大小和相同的颜色。这有点无聊！让我们在主菜单的“笔刷大小”类别上右键单击每个选项，然后选择“转到槽...”，然后选择“触发()”选项，然后按“确定”。然后Qt将为我们创建相应的槽函数，我们需要在这些函数中做的就是基本上改变brushSize变量，就像这样：
- en: '[PRE18]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The same goes for all the options under the Brush Color category. This time,
    we set the `brushColor` variable accordingly:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在“笔刷颜色”类别下的所有选项也是一样的。这次，我们相应地设置了`brushColor`变量：
- en: '[PRE19]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If you build and run the program again, you will be able to draw your images
    with a variety of settings for your brush:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您再次构建和运行程序，您将能够使用各种笔刷设置绘制图像：
- en: '![](img/a9b9ff12-8980-45c0-8cf2-ed3f9eaab8fe.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a9b9ff12-8980-45c0-8cf2-ed3f9eaab8fe.png)'
- en: 'Other than that, we can also add an existing bitmap image to our canvas so
    that we can draw on top of it. Let''s say I have a penguin image in the form of
    a PNG image (called `tux.png`), we can then add the following code to the class
    constructor:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，我们还可以将现有的位图图像添加到我们的画布上，以便我们可以在其上绘制。假设我有一个企鹅图像，以PNG图像的形式存在（名为`tux.png`），我们可以在类构造函数中添加以下代码：
- en: '[PRE20]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The preceding code basically opens up the image file and moves it to position
    100 x 100 before drawing the image onto our image buffer. Now we can see a penguin
    on the canvas whenever we start the program:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码基本上打开图像文件并将其移动到位置100 x 100，然后将图像绘制到我们的图像缓冲区上。现在，每当我们启动程序时，我们就可以在画布上看到一个企鹅：
- en: '![](img/1eb1fc12-4d31-4fd6-be34-8c5c174ff48d.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1eb1fc12-4d31-4fd6-be34-8c5c174ff48d.png)'
- en: 'Next, we will look at the Clear option under File. When the user clicks on
    this option on the menu bar, we use the following code to clear the entire canvas
    (including the penguin) and start all over again:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看一下“文件”下的“清除”选项。当用户在菜单栏上点击此选项时，我们使用以下代码清除整个画布（包括企鹅）并重新开始：
- en: '[PRE21]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Finally, when the user clicks on the Save option under File, we open up a file
    dialog and let the users save their artwork into a bitmap file. In the following
    code, we filter out the image formats and only allow the users to save PNG and
    JPEG formats:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当用户点击“文件”下的“保存”选项时，我们打开一个文件对话框，让用户将他们的作品保存为位图文件。在以下代码中，我们过滤图像格式，只允许用户保存PNG和JPEG格式：
- en: '[PRE22]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'That''s it, we have successfully created a simple paint program from scratch
    using Qt! You may even combine the knowledge learned from this chapter with the
    previous chapter to create an online collaborative whiteboard! The only limitation
    is your creativity. Lastly, I would like to say thank you to all the readers for
    creating the following masterpiece, using our newly created paint program:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样，我们成功地使用Qt从头开始创建了一个简单的绘画程序！您甚至可以将从本章学到的知识与上一章结合起来，创建一个在线协作白板！唯一的限制就是您的创造力。最后，我要感谢所有读者使用我们新创建的绘画程序创建了以下杰作：
- en: '![](img/2d43a36a-906f-4b53-8e78-f4a72b9416c6.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2d43a36a-906f-4b53-8e78-f4a72b9416c6.jpg)'
- en: Summary
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have learned how to draw vector and bitmap graphics, and
    subsequently we created our very own paint program using Qt. In the following
    chapter, we will look into the aspects of creating a program that transfers and
    stores our data on to the cloud.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们学习了如何绘制矢量和位图图形，随后我们使用Qt创建了自己的绘画程序。在接下来的章节中，我们将研究创建一个将数据传输并存储到云端的程序的方面。
