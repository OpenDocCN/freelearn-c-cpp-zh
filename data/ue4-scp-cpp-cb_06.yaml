- en: Chapter 6. Input and Collision
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章 输入和碰撞
- en: This chapter covers recipes surrounding game control input (keyboard, mouse,
    and gamepad), and collisions with obstacles.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了围绕游戏控制输入（键盘、鼠标和游戏手柄）以及与障碍物的碰撞相关的教程。
- en: 'The following recipes will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下教程：
- en: Axis Mappings – keyboard, mouse, and gamepad directional input for an FPS character
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轴映射-键盘、鼠标和游戏手柄方向输入，用于FPS角色
- en: Axis Mappings – normalized input
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轴映射-标准化输入
- en: Action Mappings – one-button responses for an FPS character
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动作映射-用于FPS角色的单按钮响应
- en: Adding Axis and Action Mappings from C++
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从C++添加轴和动作映射
- en: Mouse UI input handling
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鼠标UI输入处理
- en: UMG keyboard UI shortcut keys
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UMG键盘UI快捷键
- en: Collision – letting objects pass through one another using Ignore
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 碰撞-使用忽略让物体相互穿过
- en: Collision – picking up objects using Overlap
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 碰撞-使用重叠拾取物体
- en: Collision – preventing interpenetration using Block
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 碰撞-使用阻止防止相互穿透
- en: Introduction
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Good input controls are extremely important in your game. Providing all of keyboard,
    mouse, and especially gamepad input is going to make your game much more palatable
    to users.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 良好的输入控件在您的游戏中非常重要。提供键盘、鼠标和尤其是游戏手柄输入将使您的游戏更受用户欢迎。
- en: Tip
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '![Introduction](img/00099.jpeg) You can use Xbox 360 and PlayStation controllers
    on your Windows PC—they have USB input. Check your local electronics shops for
    USB game controllers in order to find some good ones. You can also use a wireless
    controller with a game controller wireless receiver adapter connected to your
    PC.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '![介绍](img/00099.jpeg) 您可以在Windows PC上使用Xbox 360和PlayStation控制器-它们具有USB输入。检查您当地的电子商店，以找到一些好的USB游戏控制器。您还可以使用无线控制器，连接到PC的游戏控制器无线接收器适配器。'
- en: Axis Mappings – keyboard, mouse and gamepad directional input for an FPS character
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 轴映射-键盘、鼠标和游戏手柄方向输入，用于FPS角色
- en: 'There are two types of input mapping: **Axis mappings** and **Action mappings**.
    Axis mappings are inputs that you hold down for an extended period of time to
    get their effect (for example, holding the *W* key to move the player forward),
    while Action mappings are one-off inputs (such as pressing the *A* key on the
    gamepad to make the player jump). In this recipe, we''ll cover how to set up keyboard,
    mouse, and gamepad axis-mapped input controls to move an FPS character.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种类型的输入映射：**轴映射**和**动作映射**。轴映射是您按住一段时间以获得其效果的输入（例如，按住*W*键移动玩家向前），而动作映射是一次性输入（例如，按下游戏手柄上的*A*键使玩家跳跃）。在本教程中，我们将介绍如何设置键盘、鼠标和游戏手柄轴映射输入控件以移动FPS角色。
- en: Getting ready
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: You must have a UE4 project, which has a main character player in it, and a
    ground plane to walk on, ready for this recipe.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须有一个UE4项目，其中有一个主角玩家，以及一个地面平面可供行走，以准备进行此操作。
- en: How to do it...
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Create a C++ class, `Warrior`, deriving from `Character`:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个C++类，`Warrior`，从`Character`派生：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Launch UE4, and derive a Blueprint, `BP_Warrior`, based on your `Warrior` class.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动UE4，并根据您的`Warrior`类派生一个蓝图，`BP_Warrior`。
- en: 'Create and select a new Blueprint for your `GameMode` class as follows:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建并选择一个新的`GameMode`类蓝图，如下所示：
- en: Go to **Settings** | **Project Settings** | **Maps & Modes**.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**设置** | **项目设置** | **地图和模式**。
- en: Click on the **+** icon beside the default **GameMode** drop-down menu, which
    will create a new Blueprint of the `GameMode` class, and name of your choice (say,
    `BP_GameMode`).
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击默认**GameMode**下拉菜单旁边的**+**图标，这将创建一个`GameMode`类的新蓝图，并选择您选择的名称（例如`BP_GameMode`）。
- en: Double-click the new `BP_GameMode` Blueprint class that you have created to
    edit it.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击您创建的新`BP_GameMode`蓝图类以进行编辑。
- en: Open your `BP_GameMode` blueprint, and select your Blueprinted `BP_Warrior`
    class as default `Pawn` Class.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的`BP_GameMode`蓝图，并选择您的蓝图化的`BP_Warrior`类作为默认的`Pawn`类。
- en: 'To set up the keyboard''s input driving the player, open **Settings** | **Project
    Settings** | **Input**. In the following steps, we will complete the process that
    drives the player forward in the game:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要设置键盘输入驱动玩家，打开**设置** | **项目设置** | **输入**。在接下来的步骤中，我们将完成在游戏中驱动玩家向前的过程：
- en: Click on the **+** icon beside the **Axis Mappings** heading.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**轴映射**标题旁边的**+**图标。
- en: Tip
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Axis Mappings** supports continuous (button-held) input, while **Action Mappings**
    supports one-off events.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**轴映射**支持连续（按住按钮）输入，而**动作映射**支持一次性事件。'
- en: Give a name to the Axis mapping. This first example will show how to move the
    player forward, so name it something like **Forward**.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为轴映射命名。第一个示例将展示如何移动玩家向前，因此将其命名为**Forward**。
- en: Underneath **Forward**, select a keyboard key to assign to this Axis mapping,
    such as *W*.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Forward**下方，选择一个键盘键来分配给此轴映射，例如*W*。
- en: Click on the **+** icon beside **Forward**, and select a game controller input
    to map to moving the player Forward (such as gamepad Left Thumbstick Up).
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**Forward**旁边的**+**图标，并选择一个游戏控制器输入，以将玩家前进映射到移动玩家的游戏控制器左拇指杆上。
- en: Complete **Axis Mappings** for Back, Left, and Right with keyboard, gamepad,
    and, optionally, mouse input bindings for each.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用键盘、游戏手柄和可选的鼠标输入绑定，完成**轴映射**的后退、左转和右转。
- en: 'From your C++ code, override the `SetupPlayerInputComponent` function for the
    `AWarrior` class as follows:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的C++代码中，重写`AWarrior`类的`SetupPlayerInputComponent`函数，如下所示：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Provide a `Forward` function inside your `AWarrior` class as follows:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的`AWarrior`类中提供一个`Forward`函数，如下所示：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Write and complete functions for the rest of the input directions, `AWarrior::Back`,
    `AWarrior::Left`, and `AWarrior::Right`.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写并完成其余输入方向的函数，`AWarrior::Back`，`AWarrior::Left`和`AWarrior::Right`。
- en: How it works…
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The UE4 Engine allows wire-up input events directly to C++ function calls. The
    function called by an input event are member functions of some class. In the preceding
    example, we routed both the pressing of the *W* key and holding of the gamepad's
    Left Thumbstick Up to the `AWarrior::Forward` C++ function. The instance to call
    `AWarrior::Forward` on is the instance that routed the controller's input. That
    is controlled by the object set as the player's avatar in the `GameMode` class.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: UE4引擎允许直接将输入事件连接到C++函数调用。由输入事件调用的函数是某个类的成员函数。在前面的示例中，我们将*W*键的按下和手柄的左摇杆向上按下都路由到了`AWarrior::Forward`的C++函数。调用`AWarrior::Forward`的实例是路由控制器输入的实例。这由在`GameMode`类中设置为玩家角色的对象控制。
- en: See also
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Instead of entering the `Forward` input axis binding in the UE4 editor, you
    can actually code it in from C++. We'll describe this in detail in a later recipe,
    *Adding Axis and Action Mappings from C++*.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以实际上从C++中编写`Forward`输入轴绑定，而不是在UE4编辑器中输入。我们将在以后的示例中详细描述这一点，*从C++添加轴和动作映射*。
- en: Axis Mappings – normalized input
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 轴映射 - 规范化输入
- en: If you've noticed, inputs of 1.0 right and 1.0 forward will actually sum to
    a total of 2.0 units of speed. This means it is possible to move faster diagonally
    than it is to move in purely forward, backward, left, or right directions. What
    we really should do is clamp off any input value that results in speed in excess
    of 1.0 units while maintaining the direction of input indicated. We can do this
    by storing the previous input values, and overriding the `::Tick()` function.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您注意到，右侧和前方的输入为1.0实际上会总和为2.0的速度。这意味着在对角线上移动可能比纯粹向前、向后、向左或向右移动更快。我们真正应该做的是夹住任何导致速度超过1.0单位的输入值，同时保持指示的输入方向。我们可以通过存储先前的输入值并覆盖`::Tick()`函数来实现这一点。
- en: Getting ready
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Open a project, and set up a `Character` derivative class (let's call ours `Warrior`).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个项目，并设置一个`Character`派生类（我们称之为`Warrior`）。
- en: How to do it…
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Override the `AWarrior::SetupPlayerInputComponent( UInputComponent* Input )`
    function as follows:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如下覆盖`AWarrior::SetupPlayerInputComponent( UInputComponent* Input )`函数：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Write the corresponding `::Forward`, `::Back`, `::Right` and `::Left` functions
    as follows:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写相应的`::Forward`、`::Back`、`::Right`和`::Left`函数如下：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the `AWarrior::Tick()` function, modify the input values after normalizing
    any oversize in the input vector:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`AWarrior::Tick()`函数中，在规范化输入向量中任何超大值后修改输入值：
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works...
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: We normalize the input vector when it is over a magnitude of 1.0\. This constricts
    the maximum input velocity to 1.0 units (rather than 2.0 units when full up and
    full right are pressed, for example).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当输入向量超过1.0的幅度时，我们对其进行规范化。这将限制最大输入速度为1.0单位（例如，当完全向上和向右按下时，速度为2.0单位）。
- en: Action Mappings – one button responses for an FPS character
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动作映射 - 用于FPS角色的单按钮响应
- en: An Action mapping is for handling single-button pushes (not buttons that are
    held down). For buttons that should be held down, be sure to use an Axis mapping
    instead.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 动作映射用于处理单按钮按下（而不是按住的按钮）。对于应该按住的按钮，请确保使用轴映射。
- en: Getting ready
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Have a UE4 project ready with the actions that you need to complete, such as
    `Jump` or `ShootGun`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好一个带有您需要完成的操作的UE4项目，例如`Jump`或`ShootGun`。
- en: How to do it...
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: Open **Settings** | **Project Settings** | **Input**.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**设置** | **项目设置** | **输入**。
- en: Go to the **Action Mappings** heading, and click on the **+** icon beside it.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**动作映射**标题，并单击旁边的**+**图标。
- en: Start to type in the actions that should be mapped to button pushes. For example,
    type in `Jump` for the first Action.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始输入应映射到按钮按下的操作。例如，为第一个动作输入`Jump`。
- en: Select a key to press for that action to occur, for example, **Space Bar**.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择要按下的键以执行该操作，例如，**空格键**。
- en: If you would like the same action triggered by another key push, click on the
    **+** beside your **Action Mappings** name, and select another key to trigger
    the Action.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您希望通过另一个按键触发相同的操作，请单击**动作映射**名称旁边的**+**，然后选择另一个按键来触发该操作。
- en: If you want that the **Shift**, **Ctrl**, **Alt**, or **Cmd** keys should be
    held down for the Action to occur, be sure to indicate that in the checkboxes
    to the right of the key selection box.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果要求**Shift**、**Ctrl**、**Alt**或**Cmd**键必须按下才能触发操作，请确保在键选择框右侧的复选框中指示。
- en: '![How to do it...](img/00100.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![如何做…](img/00100.jpeg)'
- en: 'To link your Action to a C++ code function, you need to override the `SetupPlayerInputComponent(UInputControl*
    control )` function. Enter the following code inside that function:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将您的操作链接到C++代码函数，您需要覆盖`SetupPlayerInputComponent(UInputControl* control )`函数。在该函数内输入以下代码：
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works…
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: '**Action Mappings** are single-button-push events that fire off C++ code to
    run in response to them. You can define any number of actions that you wish in
    the UE4 Editor, but be sure to tie up **Action Mappings** to actual key pushes
    in C++.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**动作映射**是单按钮按下事件，触发C++代码以响应它们运行。您可以在UE4编辑器中定义任意数量的操作，但请确保将**动作映射**与C++中的实际按键绑定起来。'
- en: See also
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You can list the Actions that you want mapped from C++ code. See the following
    recipe on *Adding Axis and Action Mappings from C++* for this.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以列出您希望从C++代码映射的操作。有关此信息，请参阅*从C++添加轴和动作映射*中的以下示例。
- en: Adding Axis and Action Mappings from C++
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从C++添加轴和动作映射
- en: '**Axis Mappings** and **Action Mappings** can be added to your game via the
    UE4 Editor, but we can also add them directly from C++ code. Since the wireup
    to C++ functions is from C++ code anyway, you may find it convenient to define
    your Axis and Action Mappings in C++ as well.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**轴映射**和**动作映射**可以通过UE4编辑器添加到游戏中，但我们也可以直接从C++代码中添加它们。由于C++函数的连接本来就是从C++代码进行的，因此您可能会发现在C++中定义您的轴和动作映射也很方便。'
- en: Getting ready
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'You need a UE4 project to which you''d like to add some Axis and Action mappings.
    You can delete the existing Axis and Action mappings listed in **Settings** |
    **Project Settings** | **Input** if you are adding them via C++ code. To add your
    custom axis and action mappings, there are two C++ functions that you need to
    know about: the `UPlayerInput::AddAxisMapping` and `UPlayerInput:: AddActionMapping`.
    These are member functions available on the `UPlayerInput` object. The `UPlayerInput`
    object is inside the `PlayerController` object, accessible via the following code:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要一个UE4项目，您想要在其中添加一些轴和动作映射。如果您通过C++代码添加它们，您可以删除**Settings** | **Project Settings**
    | **Input**中列出的现有轴和动作映射。要添加您的自定义轴和动作映射，有两个C++函数您需要了解：`UPlayerInput::AddAxisMapping`和`UPlayerInput::AddActionMapping`。这些是`UPlayerInput`对象上可用的成员函数。`UPlayerInput`对象位于`PlayerController`对象内，可以通过以下代码访问：
- en: '[PRE7]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You can also use the two static member functions of `UPlayerInput` to create
    your axis and action mappings if you''d prefer not to access player controllers
    individually:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`UPlayerInput`的两个静态成员函数来创建您的轴和动作映射，如果您不想单独访问玩家控制器的话：
- en: '[PRE8]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How to do it...
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: To begin with, we need to define our `FInputAxisKeyMapping` or `FInputActionKeyMapping`
    objects, depending on whether you are hooking up an Axis key mapping (for buttons
    that are held down for input) or an Action key mapping (for one-off events—buttons
    that are pressed once for input).
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要定义我们的`FInputAxisKeyMapping`或`FInputActionKeyMapping`对象，具体取决于您是连接轴键映射（用于按下按钮进行输入）还是连接动作键映射（用于一次性事件-按下按钮进行输入）。
- en: 'For Axis key mappings, we define an `FInputAxisKeyMapping` object, as follows:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于轴键映射，我们定义一个`FInputAxisKeyMapping`对象，如下所示：
- en: '[PRE9]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This will include the string name for the action, the key to press (use the
    EKeys `enum`), and whether or not *Shift*, *Ctrl*, *Alt*, or *cmd* (Mac) should
    be held to trigger the event.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将包括动作的字符串名称，要按的键（使用EKeys `enum`），以及是否应按住*Shift*、*Ctrl*、*Alt*或*cmd*（Mac）来触发事件。
- en: 'For action key mappings, define `FInputActionKeyMapping`, as follows:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于动作键映射，定义`FInputActionKeyMapping`，如下所示：
- en: '[PRE10]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This will include the string name for the action, the key to press, and whether
    or not *Shift*, *Ctrl*, *Alt*, or *cmd* (Mac) should be held to trigger the event.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将包括动作的字符串名称，要按的键，以及是否应按住*Shift*、*Ctrl*、*Alt*或*cmd*（Mac）来触发事件。
- en: 'In your player `Pawn` class `SetupPlayerInputComponent` function, register
    your axis and action key mappings to the following:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的玩家`Pawn`类的`SetupPlayerInputComponent`函数中，将您的轴和动作键映射注册到以下内容：
- en: 'The `PlayerInput` object connected to a specific controller:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与特定控制器连接的`PlayerInput`对象：
- en: '[PRE11]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Or, alternatively, you could register to the static member functions of the
    `UPlayerInput` object directly:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 或者，您可以直接注册到`UPlayerInput`对象的静态成员函数：
- en: '[PRE12]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Tip
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Be sure you're using the correct function for Axis versus Action mappings!
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您对轴与动作映射使用了正确的函数！
- en: 'Register your Action and Axis mappings to C++ functions using C++ code just
    as shown in the preceding two recipes, for example:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用C++代码注册您的动作和轴映射到C++函数，就像前两个示例中所示的那样：
- en: '[PRE13]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How it works…
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The action and axis mapping registration functions allow you to set up your
    input mappings from C++ code directly. The C++ coded input mappings are essentially
    the same as entering the input mappings in the **Settings** | **Project Settings**
    | **Input** dialog.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 动作和轴映射注册函数允许您直接从C++代码设置您的输入映射。C++编码的输入映射本质上与在**Settings** | **Project Settings**
    | **Input**对话框中输入映射相同。
- en: Mouse UI input handling
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 鼠标UI输入处理
- en: When using the **Unreal Motion Graphics (UMG)** toolkit, you will find that
    mouse events are very easy to handle. We can register C++ functions to run after
    mouse clicks or other types of interactions with the UMG components.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用**虚幻运动图形（UMG）**工具包时，您会发现鼠标事件非常容易处理。我们可以注册C++函数以在鼠标单击或与UMG组件的其他类型交互后运行。
- en: Usually, event registration will be via Blueprints; but in this recipe, we will
    outline how to write and wire-up C++ functions to UMG events.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，事件注册将通过蓝图进行；但在这个示例中，我们将概述如何编写和连接UMG事件的C++函数。
- en: Getting ready
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a UMG canvas in your UE4 project. From there, we'll register event handlers
    for the `OnClicked`, `OnPressed`, and `OnReleased` events.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的UE4项目中创建一个UMG画布。从那里，我们将为`OnClicked`、`OnPressed`和`OnReleased`事件注册事件处理程序。
- en: How to do it...
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Right-click in your **Content Browser** (or click on **Add New**), and select
    **User Interface** | **Widget Blueprint**, as shown in the following screenshot.
    This will add an editable widget blueprint to your project.![How to do it...](img/00101.jpeg)
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Content Browser**中右键单击（或单击**Add New**），然后选择**User Interface** | **Widget
    Blueprint**，如下截图所示。这将向您的项目添加一个可编辑的小部件蓝图。![How to do it...](img/00101.jpeg)
- en: Double-click on your **Widget Blueprint** to edit it.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击您的**Widget Blueprint**进行编辑。
- en: Add a button to the interface by dragging it from the palette on the left.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过从左侧的调色板拖动按钮来向界面添加按钮。
- en: Scroll down the **Details** panel for your button until you find the **Events**
    subsection.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动**Details**面板，直到找到**Events**子部分。
- en: Click on the **+** icon beside any event that you'd like to handle.![How to
    do it...](img/00102.jpeg)
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击您想要处理的任何事件旁边的**+**图标。![How to do it...](img/00102.jpeg)
- en: 'Connect the event that appears in Blueprints to any C++ `UFUNCTION()` that
    has the `BlueprintCallable` tag in the macro. For example, in your `GameMode`
    class derivative, you could include a function such as:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将出现在蓝图中的事件连接到任何具有`BlueprintCallable`标签的C++ `UFUNCTION()`。例如，在您的`GameMode`类派生中，您可以包括一个函数，如下：
- en: '[PRE14]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Trigger the function call by routing to it in the Blueprints diagram under the
    event of your choice.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在您选择的事件下的蓝图图表中路由到它来触发函数调用。
- en: Construct and display your UI by calling **Create Widget**, followed by **Add
    to Viewport** in the **Begin Play** function of your `GameMode` (or any such main
    object).
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在`GameMode`的**Begin Play**函数中调用**Create Widget**，然后调用**Add to Viewport**来构建和显示您的UI（或任何主要对象）。
- en: How it works…
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Your widget Blueprint's buttons events can be easily connected to Blueprints
    events, or C++ functions via the preceding method.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 您的小部件蓝图的按钮事件可以轻松连接到蓝图事件，或通过前面的方法连接到C++函数。
- en: UMG keyboard UI shortcut keys
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UMG键盘UI快捷键
- en: Every user interface needs shortcut keys associated with it. To program these
    into your UMG interface, you can simply wire-up certain key combinations to an
    Action mapping. When the Action triggers, just invoke the same Blueprints function
    that the UI button itself triggers.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 每个用户界面都需要与之关联的快捷键。要将这些程序到您的UMG界面中，您可以简单地将某些键组合连接到一个动作映射中。当动作触发时，只需调用与UI按钮本身触发相同的蓝图函数。
- en: Getting ready
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have a UMG interface created already, as shown in the previous recipe.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该已经创建了一个UMG界面，就像前面的示例中所示的那样。
- en: How to do it...
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: In **Settings** | **Project Settings** | **Input**, define a new Action mapping
    for your hot key event, for example, `HotKey_UIButton_Spell`.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**设置** | **项目设置** | **输入**中，为您的热键事件定义一个新的动作映射，例如`HotKey_UIButton_Spell`。
- en: Wire up the event to your UI's function call either in Blueprints or in C++
    code.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将事件连接到您的UI的函数调用，无论是在蓝图中还是在C++代码中。
- en: How it works…
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: Wiring up an Action Mapping with a short circuit to the function called by the
    UI will allow you to implement hot keys in your game program nicely.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将动作映射与UI调用的函数进行短路连接，可以使您在游戏程序中很好地实现热键。
- en: Collision – letting objects pass through one another using Ignore
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 碰撞 - 使用忽略让物体相互穿过
- en: 'Collision settings are fairly easy to get hold of. There are three classes
    of intersection for collisions:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 碰撞设置相当容易获得。碰撞有三类交集：
- en: '`Ignore`: Collisions that pass through each other without any notification.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`忽略`：相互穿过而没有任何通知的碰撞。'
- en: '`Overlap`: Collisions that trigger the `OnBeginOverlap` and `OnEndOverlap`
    events. Interpenetration of objects with an Overlap setting is allowed.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`重叠`：触发`OnBeginOverlap`和`OnEndOverlap`事件的碰撞。允许具有重叠设置的对象相互渗透。'
- en: '`Block`: Collisions that prevent all interpenetration, and prevent objects
    from overlapping each other at all.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`阻止`：阻止所有相互渗透的碰撞，并完全阻止物体相互重叠。'
- en: Objects are classed into one of many **Object Type**. The **Collision** settings
    for a particular Blueprint's Component allow you to class the object as an **Object
    Type** of your choice as well as to specify how that object collides with all
    other objects of all other types. This takes a tabular format in the **Details**
    | **Collision** section of the Blueprint Editor.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 对象被归类为许多**对象类型**之一。特定蓝图组件的**碰撞**设置允许您将对象归类为您选择的**对象类型**，并指定该对象如何与所有其他类型的所有其他对象发生碰撞。这在蓝图编辑器的**详细信息**
    | **碰撞**部分以表格格式呈现。
- en: 'For example, the following screenshot shows the **Collision** settings for
    a character''s `CapsuleComponent`:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下屏幕截图显示了角色的`CapsuleComponent`的**碰撞**设置：
- en: '![Collision – letting objects pass through one another using Ignore](img/00103.jpeg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![碰撞 - 使用忽略让物体相互穿过](img/00103.jpeg)'
- en: Getting ready
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have a UE4 project with some objects that you'd like to program intersections
    for.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该有一个UE4项目，其中包含一些您希望为其编程交集的对象。
- en: How to do it...
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: Open the Blueprint editor for the object that you'd like other objects to simply
    pass through and ignore. Under the **Components** listing, select the component
    that you'd like to program settings for.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开蓝图编辑器，选择您希望其他对象只是穿过并忽略的对象。在**组件**列表下，选择您想要设置程序的组件。
- en: With your component selected, see your **Details** tab (usually on the right).
    Under **Collision Presets**, select either the **NoCollision** or **Custom…**
    presets.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您的组件后，查看您的**详细信息**标签（通常在右侧）。在**碰撞预设**下，选择**无碰撞**或**自定义…**预设。
- en: If you select the **NoCollision** preset, you can just leave it at that, and
    all collisions will be ignored.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果选择**无碰撞**预设，您可以只需保持不变，所有碰撞都将被忽略。
- en: 'If you select the **Custom…** preset, then choose either of the following:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果选择**自定义…**预设，则选择以下之一：
- en: '**NoCollision** under the **Collision Enabled** drop-down menu.'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**无碰撞**在**启用碰撞**下拉菜单中。'
- en: Select a collision mode under **Collision Enabled** involving Queries, and be
    sure to check the **Ignore** checkbox for each **Object Type** that you'd like
    it to ignore collisions with.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**启用碰撞**下选择一个碰撞模式，确保为每个您希望忽略碰撞的**对象类型**勾选**忽略**复选框。
- en: How it works…
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: Ignored collisions will not fire any events or prevent interpenetrations between
    objects marked as such.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 忽略的碰撞不会触发任何事件，也不会阻止标记为忽略的对象之间的相互渗透。
- en: Collision – picking up objects using Overlap
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 碰撞 - 使用重叠拾取物品
- en: Item pickup is a pretty important thing to get down cleanly. In this recipe,
    we'll outline how to get item pickups working using **Overlap** events on Actor
    Component primitives.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 物品拾取是一件非常重要的事情。在这个示例中，我们将概述如何使用Actor组件基元上的**重叠**事件使物品拾取起作用。
- en: Getting ready
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The previous recipe, *Collisions: Letting Objects pass through each other using
    Ignore*, describes the basics of collisions. You should read it for background
    before beginning this recipe. What we''ll do here is create a **New Object Channel...**
    to identify `Item` class objects so that they can be programmed for overlaps only
    with the player avatar''s collision volume.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例，*碰撞：使用忽略让物体相互穿过*，描述了碰撞的基础知识。在开始本示例之前，您应该阅读它以了解背景。我们将在这里创建一个**新对象通道…**来识别`Item`类对象，以便可以对其进行重叠的编程，只与玩家角色的碰撞体发生重叠。
- en: How to do it...
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: Start by creating a unique collision Channel for the `Item` object's collision
    primitive. Under **Project Settings** | **Collision**, create a new Object Channel
    by going to **New Object Channel…**![How to do it...](img/00104.jpeg)
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先为`Item`对象的碰撞基元创建一个独特的碰撞通道。在**项目设置** | **碰撞**下，通过转到**新对象通道…**来创建一个新的对象通道！[如何做…](img/00104.jpeg)
- en: Name the new Object Channel as `Item`.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新的对象通道命名为`Item`。
- en: Take your `Item` actor and select the primitive component on it that is used
    to intersect for pickup with the player avatar. Make the **Object Type** of that
    primitive an `Item` class **Object Type**.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取你的`Item`角色并选择用于与玩家角色交叉拾取的基本组件。将该基本组件的**对象类型**设置为`Item`类的**对象类型**。
- en: Check the **Overlap** checkbox against the `Pawn` class **Object Type** as shown
    in the following screenshot:![How to do it...](img/00105.jpeg)
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 勾选`Pawn`类**对象类型**旁边的**Overlap**复选框，如下截图所示：![操作步骤...](img/00105.jpeg)
- en: Ensure that the **Generate Overlap Events** checkbox is checked.![How to do
    it...](img/00106.jpeg)
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保勾选**Generate Overlap Events**复选框。![操作步骤...](img/00106.jpeg)
- en: Take the player actor who will pick up the items, and select the component on
    him that feels for the items. Usually, this will be his `CapsuleComponent`. Check
    **Overlap** with the `Item` object.![How to do it...](img/00107.jpeg)
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择将拾取物品的玩家角色，并选择他身上用于寻找物品的组件。通常，这将是他的`CapsuleComponent`。检查与`Item`对象的**Overlap**。![操作步骤...](img/00107.jpeg)
- en: Now the Player overlaps the item, and the item overlaps the player pawn. We
    do have to signal overlaps it both ways (`Item` Overlaps `Pawn` and Pa`w`n Overlaps
    `Item`) for it to work properly. Ensure that **Generate Overlap Events** is also
    checked for the `Pawn` intersecting component.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在玩家重叠了物品，物品也重叠了玩家角色。我们必须双向信号重叠（`Item`重叠`Pawn`和`Pawn`重叠`Item`）才能正常工作。确保`Pawn`交叉组件的**Generate
    Overlap Events**也被勾选。
- en: Next we have to complete the `OnComponentBeginOverlap` event for either the
    item or the Player's pickup volume, using either Blueprints or C++ code.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们必须完成`OnComponentBeginOverlap`事件，要么是对物品，要么是对玩家的拾取体积，使用蓝图或C++代码。
- en: If you prefer Blueprints, in the **Events** section of the **Details** pane
    of the Coin's intersectable Component, click on the **+** icon beside the **On
    Component Begin Overlap** event.![How to do it...](img/00108.jpeg)
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你更喜欢蓝图，在Coin的可交叉组件的**Details**面板的**Events**部分，点击**On Component Begin Overlap**事件旁边的**+**图标。![操作步骤...](img/00108.jpeg)
- en: Use the `OnComponentBeginOverlap` event that appears in your `Actor` Blueprint
    diagram to wire-in Blueprints code to run when an overlap with the Player's capsule
    volume occurs.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用出现在你的`Actor`蓝图图表中的`OnComponentBeginOverlap`事件，将蓝图代码连接到玩家的胶囊体积发生重叠时运行。
- en: 'If you prefer C++, you can write and attach a C++ function to the `CapsuleComponent`.
    Write a member function in your player''s avatar class with a signature as follows:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你更喜欢C++，你可以编写并附加一个C++函数到`CapsuleComponent`。在你的玩家角色类中编写一个成员函数，签名如下：
- en: '[PRE15]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Tip
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**In UE 4.13, the OnOverlapsBegin function''s signature has changed to:**'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '**在UE 4.13中，OnOverlapsBegin函数的签名已更改为：**'
- en: '[PRE16]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Complete the implementation of the `OnOverlapsBegin()` function in your `.cpp`
    file, making sure to end the function name with `_Implementation`:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的`.cpp`文件中完成`OnOverlapsBegin()`函数的实现，确保以`_Implementation`结束函数名：
- en: '[PRE17]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then, provide a `PostInitializeComponents()` override to connect the `OnOverlapsBegin()`
    function with overlaps to the capsule in your avatar''s class as follows:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，提供一个`PostInitializeComponents()`覆盖，将`OnOverlapsBegin()`函数与你的角色类中的胶囊体重叠连接起来，如下所示：
- en: '[PRE18]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: How it works…
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The **Overlap** event raised by the engine allows code to run when two UE4 `Actor`
    Components overlap, without preventing interpenetration of the objects.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 引擎引发的**Overlap**事件允许代码在两个UE4`Actor`组件重叠时运行，而不会阻止对象的相互穿透。
- en: Collision – preventing interpenetration using Block
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 碰撞 - 使用阻挡来防止穿透
- en: Blocking means that the `Actor` components will be prevented from interpenetration
    in the engine, and any collision between two primitive shapes will be resolved,
    and not overlapping, after collisions are found.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 阻挡意味着在引擎中将阻止`Actor`组件相互穿透，并且在发现碰撞后，任何两个基本形状之间的碰撞将被解决，不会重叠。
- en: Getting ready
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Begin with a UE4 project that has some objects with Actors having collision
    primitives attached to them (`SphereComponents`, `CapsuleComponents`, or `BoxComponents`).
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 从一个具有附加到它们的碰撞基元的对象的UE4项目开始（`SphereComponents`，`CapsuleComponents`或`BoxComponents`）。
- en: How to do it...
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the Blueprint of an actor that you want to block another actor with. For
    example, we want the Player actor to block other Player actor instances.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你想要阻挡另一个角色的角色的蓝图。例如，我们希望玩家角色阻挡其他玩家角色实例。
- en: Mark primitives inside the actor that you do not want interpenetrating with
    other components as Blocking those components in the **Details** pane.![How to
    do it...](img/00109.jpeg)
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Details**面板中标记你不希望与其他组件相互穿透的角色内的基元，将这些组件标记为**Blocking**。![操作步骤...](img/00109.jpeg)
- en: How it works…
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When objects **Block** one another, they will not be allowed to interpenetrate.
    Any interpenetration will be automatically resolved, and the objects will be pushed
    off each other.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 当对象相互**阻挡**时，它们将不被允许相互穿透。任何穿透将被自动解决，并且对象将被推开。
- en: There's more…
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: You can override the `OnComponentHit` function to run code when two objects
    hit each other. This is distinct from the `OnComponentBeginOverlap` event.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以重写`OnComponentHit`函数，以便在两个对象相撞时运行代码。这与`OnComponentBeginOverlap`事件是不同的。
