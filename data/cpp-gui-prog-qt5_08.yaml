- en: Graphics View
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Graphics View
- en: In the previous chapter, we learned about the importance of visual presentation
    for the user by displaying coordinate data on a map. In this chapter, we will
    further explore the possibility of graphics data representation using Qt's Graphics
    View framework.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了通过在地图上显示坐标数据来为用户提供视觉呈现的重要性。在本章中，我们将进一步探索使用Qt的`Graphics View`框架来表示图形数据的可能性。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Graphics View framework
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Graphics View框架
- en: Moveable graphics items
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可移动的图形项
- en: Creating an organization chart
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个组织图表
- en: At the end of this chapter, you will be able to create an organization chart
    display using C++ and Qt's API. Let's get started!
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，你将能够使用C++和Qt的API创建一个组织图表显示。让我们开始吧！
- en: Graphics View framework
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Graphics View框架
- en: The Graphics View framework is part of the widgets module in Qt so it is already
    supported by default, unless you're running Qt console application instead, which
    does not need the widgets module.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`Graphics View`框架是Qt中的小部件模块的一部分，因此它已经默认支持，除非你运行的是Qt控制台应用程序，它不需要小部件模块。'
- en: The Graphics View view in Qt works pretty much like a whiteboard, where you
    can draw anything on it using C/C++ code, such as drawing shapes, lines, text,
    and even images. This chapter may be a little hard to follow for beginners but
    it will definitely be a fun project to work with. Let's get started!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在Qt中，`Graphics View`视图的工作方式基本上就像一个白板，你可以使用C/C++代码在上面画任何东西，比如绘制形状、线条、文本，甚至图像。对于初学者来说，这一章可能有点难以理解，但肯定会是一个有趣的项目。让我们开始吧！
- en: Setting up a new project
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置一个新项目
- en: 'First, create a new Qt Widgets Application project. After that, open `mainwindow.ui`
    and drag and drop the Graphics View widget onto the main window, like this:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个新的Qt Widgets应用程序项目。之后，打开`mainwindow.ui`，将`Graphics View`小部件拖放到主窗口上，就像这样：
- en: '![](img/01a52e3d-f0ef-4e70-b7dd-c390e5edc2b1.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/01a52e3d-f0ef-4e70-b7dd-c390e5edc2b1.png)'
- en: 'Then, create a layout for the graphics view by clicking on the Lay Out Vertically
    button at the top of the canvas. After that, open up `mainwindow.h` and add the
    following headers and variables:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过点击画布顶部的垂直布局按钮为图形视图创建一个布局。之后，打开`mainwindow.h`并添加以下头文件和变量：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After that, open `mainwindow.cpp`. Once it is opened, add the following code:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，打开`mainwindow.cpp`。一旦打开，添加以下代码：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Build and run the program now, and you should see something like this:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在构建并运行程序，你应该会看到类似这样的东西：
- en: '![](img/8b6246e1-dedd-4df3-b865-75e323337c8a.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8b6246e1-dedd-4df3-b865-75e323337c8a.png)'
- en: The code is a bit long so let me explain to you what it does and how it draws
    the graphics onto the screen.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 代码有点长，所以让我向你解释一下它的作用以及它如何将图形绘制到屏幕上。
- en: 'As I said earlier, the Graphics View widget is like a canvas or whiteboard
    that allows you to draw anything you want on it. However, we also need something
    called Graphics Scene, which is essentially a scene graph that stores all the
    graphical components in a parent–child hierarchy before displaying them on the Graphics
    View, accordingly. Scene graph hierarchy is something that the image that appears
    in the previous screenshot, where each object could have a parent or children
    that link together:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我之前所说，`Graphics View`小部件就像一个画布或白板，允许你在上面画任何你想要的东西。然而，我们还需要一个叫做Graphics Scene的东西，它本质上是一个场景图，它在显示在`Graphics
    View`上之前以父子层次结构存储所有图形组件。场景图层次结构就像在之前的截图中出现的图像，每个对象都可以有一个链接在一起的父对象或子对象：
- en: '![](img/25c1c1d4-4bba-4b7d-9fe3-ec7e109bfcbb.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/25c1c1d4-4bba-4b7d-9fe3-ec7e109bfcbb.png)'
- en: 'In the preceding code, we first created a `QGraphicsScene` object and set it
    as the Graphics Scene for our Graphics View widget:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们首先创建了一个`QGraphicsScene`对象，并将其设置为我们的`Graphics View`小部件的Graphics Scene：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In this example, however, we don''t have to link the graphics items together
    so we''ll just create them independently, like so:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在这个例子中，我们不必将图形项链接在一起，所以我们只需独立创建它们，就像这样：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `QPen` and `QBrush` classes are used to define the rendering style of these
    graphics items. `QBrush` is usually for defining the background color and pattern
    for the item, while `QPen` normally affects the outline of the item.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`QPen`和`QBrush`类用于定义这些图形项的渲染样式。`QBrush`通常用于定义项目的背景颜色和图案，而`QPen`通常影响项目的轮廓。'
- en: 'Qt provides many types of graphics items for the most common shapes, including:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Qt提供了许多类型的图形项，用于最常见的形状，包括：
- en: '`QGraphicsEllipseItem` – ellipse item'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QGraphicsEllipseItem` – 椭圆项'
- en: '`QGraphicsLineItem` – line item'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QGraphicsLineItem` – 线条项'
- en: '`QGraphicsPathItem` – arbitrary path item'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QGraphicsPathItem` – 任意路径项'
- en: '`QGraphicsPixmapItem` – pixmap item'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QGraphicsPixmapItem` – 图像项'
- en: '`QGraphicsPolygonItem` – polygon item'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QGraphicsPolygonItem` – 多边形项'
- en: '`QGraphicsRectItem` – rectangular item'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QGraphicsRectItem` – 矩形项'
- en: '`QGraphicsSimpleTextItem` – simple text label item'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QGraphicsSimpleTextItem` – 简单文本标签项'
- en: '`QGraphicsTextItem` – advanced formatted text item'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QGraphicsTextItem` – 高级格式化文本项'
- en: 'For more information, please visit this link: [http://doc.qt.io/archives/qt-5.8/qgraphicsitem.html#details.](http://doc.qt.io/archives/qt-5.8/qgraphicsitem.html#details)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息，请访问此链接：[http://doc.qt.io/archives/qt-5.8/qgraphicsitem.html#details.](http://doc.qt.io/archives/qt-5.8/qgraphicsitem.html#details)
- en: Movable graphics items
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可移动的图形项
- en: In the previous example, we have successfully drawn some simple shapes and text
    onto the Graphics View widget. However, these graphics items are not interactive
    and thus don't suit our purpose. What we want is an interactive organization chart
    where the user can move the items around using mouse. It is actually really easy
    to make these items movable under Qt; let's see how we can do that by continuing
    our previous project.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个例子中，我们成功地将一些简单的形状和文本绘制到了`Graphics View`小部件上。然而，这些图形项是不可交互的，因此不适合我们的目的。我们想要的是一个交互式的组织图表，用户可以使用鼠标移动项目。在Qt下，使这些项目可移动实际上非常容易；让我们看看我们如何通过继续我们之前的项目来做到这一点。
- en: 'First, make sure you don''t change the default interactive property of our
    Graphics View widget, which is set to enabled (checkbox is checked):'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，确保不要更改我们的图形视图小部件的默认交互属性，即启用（复选框已选中）：
- en: '![](img/01e7d066-00f9-4c4e-ae4b-9352ecf34437.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/01e7d066-00f9-4c4e-ae4b-9352ecf34437.png)'
- en: 'After that, add the following code below each of the graphics items we just
    created in the previous `Hello World` example:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在那之后，在之前的`Hello World`示例中创建的每个图形项下面添加以下代码：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Build and run the program again, and this time you should be able to select
    and move the items around the Graphics View. Do note that `ItemIsMovable` and
    `ItemIsSelectable` both give you a different behavior—the former flag will make
    the item movable by mouse, and the latter makes the item selectable, which typically
    gives it a visual indication using dotted outline when selected. Each of the flags
    works independently and will not affect the other.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 再次构建和运行程序，这次您应该能够在图形视图中选择和移动项目。请注意，`ItemIsMovable`和`ItemIsSelectable`都会给您不同的行为——前者标志将使项目可以通过鼠标移动，而后者使项目可选择，通常在选择时使用虚线轮廓进行视觉指示。每个标志都独立工作，不会影响其他标志。
- en: 'We can test out the effect of `ItemIsSelectable` flag by using the signal and
    slot mechanism in Qt. Let''s go back to our code and add the following line:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用Qt中的信号和槽机制来测试`ItemIsSelectable`标志的效果。让我们回到我们的代码并添加以下行：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `selectionChanged()` signal will be triggered whenever you selected an
    item on the Graphics View widget and the `selectionChanged()` slot function under
    our `MainWindow` class will then be called (which we need to write). Let''s open
    up `mainwindow.h` and add in another header for displaying debug messages:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`selectionChanged()`信号将在您在图形视图小部件上选择项目时触发，然后`MainWindow`类下的`selectionChanged()`槽函数将被调用（我们需要编写）。让我们打开`mainwindow.h`并添加另一个头文件以显示调试消息：'
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Then, we declare the slot function, like this:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们声明槽函数，就像这样：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'After that open `mainwindow.cpp` and define the slot function, like this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 之后打开`mainwindow.cpp`并定义槽函数，就像这样：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now try and run the program again; you should see a line of debug messages that
    say Item selection which appears whenever a graphics item has been clicked. It's
    really simple, isn't it?
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在尝试再次运行程序；您应该看到一行调试消息，每当单击图形项时会出现“项目选择”。这真的很简单，不是吗？
- en: As for the `ItemIsMovable` flag, we won't be able to test it using the signal
    and slot method. This is because all classes inherited from `QGraphicsItem` class
    are not inherited from the `QObject` class, and therefore the signal and slot
    mechanism doesn't work on these classes. This is intentionally done by Qt developers
    to make it lightweight, which improves the performance, especially when rendering
    thousands of items on the screen.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 至于`ItemIsMovable`标志，我们将无法使用信号和槽方法进行测试。这是因为所有从`QGraphicsItem`类继承的类都不是从`QObject`类继承的，因此信号和槽机制不适用于这些类。这是Qt开发人员有意为之，以使其轻量级，从而提高性能，特别是在屏幕上渲染数千个项目时。
- en: Even though signal and slot is not an option for this, we can still use the
    event system, which requires an override to the `itemChange()` virtual function,
    which I will demonstrate in the next section.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管信号和槽对于这个选项不是一个选择，我们仍然可以使用事件系统，这需要对`itemChange()`虚函数进行重写，我将在下一节中演示。
- en: Creating an organization chart
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建组织图表
- en: Let's proceed to learn how to create an organization chart using Graphics View.
    An organization chart is a diagram that shows the structure of an organization
    and the relationship hierarchy of its employee positions. It is easy to understand
    a company's structure by using graphical representation; therefore it's best to
    use Graphics View instead of, say, a table.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续学习如何使用Graphics View创建组织图表。组织图表是一种显示组织结构和员工职位关系层次结构的图表。通过使用图形表示来理解公司的结构是很容易的；因此最好使用Graphics
    View而不是表格。
- en: This time, we need to create our own classes for the graphics items so that
    we can make use of Qt's event system, as well as have more control of how it's
    grouped and displayed.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，我们需要为图形项创建自己的类，以便我们可以利用Qt的事件系统，并且更好地控制它的分组和显示方式。
- en: 'First, create a C/C++ class by going to File | New File or Project:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，通过转到文件 | 新建文件或项目来创建一个C/C++类：
- en: '![](img/a86a053b-8bab-4827-b081-a2858e1b1d66.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a86a053b-8bab-4827-b081-a2858e1b1d66.png)'
- en: 'Next, name our class as `profileBox` before clicking the Next and Finish button:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在点击下一步和完成按钮之前，将我们的类命名为`profileBox`：
- en: '![](img/e257c658-4e37-45d9-a89a-e0ef788161b7.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e257c658-4e37-45d9-a89a-e0ef788161b7.png)'
- en: 'After that, open `mainwindow.h` and add in these headers:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，打开`mainwindow.h`并添加这些头文件：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then, open `profilebox.h` and make our `profileBox` class inherit `QGraphicsItemGroup`
    instead:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，打开`profilebox.h`并使我们的`profileBox`类继承`QGraphicsItemGroup`：
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'After that, open `profilebox.cpp` and at the constructor of the class, set
    up `QBrush`, `QPen` and `QFont`, which will be used for rendering in a moment:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在那之后，打开`profilebox.cpp`并在类的构造函数中设置`QBrush`、`QPen`和`QFont`，这将在稍后用于渲染：
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'After that, also in the constructor, create a `QGraphicsRectItem`, `QGraphicsTextItem`
    and a `QGraphicsPixmapItem`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，在构造函数中，创建一个`QGraphicsRectItem`、`QGraphicsTextItem`和一个`QGraphicsPixmapItem`：
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then, add these items to the group, which is the current class, since this
    class is inherited from the `QGraphicsItemGroup` class:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将这些项目添加到组中，这是当前类，因为这个类是从`QGraphicsItemGroup`类继承的：
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Finally, set three flags for the current class, which are `ItemIsMovable`,
    `ItemIsSelectable` and `ItemSendsScenePositionChanges`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为当前类设置三个标志，即`ItemIsMovable`、`ItemIsSelectable`和`ItemSendsScenePositionChanges`：
- en: '[PRE14]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: These flags are very important because they are all disabled by default for
    performance reasons. We have covered both `ItemIsMovable` and `ItemIsSelectable`
    in the previous section, while `ItemSendsPositionChanges` is something new. This
    flag makes the graphics item notify Graphics Scene when it's being moved by the
    user, hence the name.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这些标志非常重要，因为它们默认情况下都是禁用的，出于性能原因。我们在上一节中已经涵盖了`ItemIsMovable`和`ItemIsSelectable`，而`ItemSendsPositionChanges`是一些新的东西。此标志使图形项在用户移动时通知图形场景，因此得名。
- en: 'Next, create another function called `init()` for setting up the employee profile.
    For the sake of simplicity, we only set the employee name, however, you can do
    more if you wish, such as setting a different background color based on the rank,
    or changing their profile picture:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建另一个名为`init()`的函数，用于设置员工个人资料。为简单起见，我们只设置了员工姓名，但是如果您愿意，还可以进行更多操作，例如根据职级设置不同的背景颜色，或更改其个人资料图片：
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Do notice that we also set the main window and Graphics Scene pointers here
    so that we can use them later on. We must add the `QGraphicsItem` to a scene before
    it will render on screen. In this case, we group all the graphics items into a
    `QGraphicsItemGroup` so we only need to add the group to the scene instead of
    an individual item.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们还在这里设置了主窗口和图形场景指针，以便以后使用。在将其呈现在屏幕上之前，我们必须将`QGraphicsItem`添加到场景中。在这种情况下，我们将所有图形项分组到`QGraphicsItemGroup`中，因此我们只需要将组添加到场景中，而不是单个项。
- en: 'Do note that you must do a forward declaration for the `MainWindow` class in
    `profilebox.h` after `#include "mainwindow.h"` to avoid the error that says recursive
    header inclusion. At the same time, we also placed the `MainWindow` and `QGraphicsTextItem`
    pointers in `profilebox.h` so that we can call them later:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您必须在`profilebox.h`中的`#include "mainwindow.h"`之后进行`MainWindow`类的前向声明，以避免递归头文件包含错误。同时，我们还在`profilebox.h`中放置了`MainWindow`和`QGraphicsTextItem`指针，以便以后调用它们：
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You will also notice that I have used an icon in the `QGraphicsPixmapItem`
    as a decorative icon:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 您还会注意到，我在`QGraphicsPixmapItem`中使用了一个图标作为装饰图标：
- en: '![](img/9787b7b9-c914-42cd-a823-622a852bea88.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9787b7b9-c914-42cd-a823-622a852bea88.png)'
- en: 'This icon is a PNG image that is stored within the resource file. You can get
    this image from our sample project files on our GitHub page: [http://github.com/PacktPublishing/Hands-On-GUI-Programming-with-C-QT5](http://github.com/PacktPublishing/Hands-On-GUI-Programming-with-C-QT5)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 此图标是存储在资源文件中的PNG图像。您可以从我们在GitHub页面上的示例项目文件中获取此图像：[http://github.com/PacktPublishing/Hands-On-GUI-Programming-with-C-QT5](http://github.com/PacktPublishing/Hands-On-GUI-Programming-with-C-QT5)
- en: 'Let''s create a resource file for your project. Go to File | New File or Project
    and select the Qt Resource File option under Qt category:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 为您的项目创建一个资源文件。转到文件|新建文件或项目，然后在Qt类别下选择Qt资源文件选项：
- en: '![](img/b48d892f-781d-4781-a7d1-2548d6d5dca4.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b48d892f-781d-4781-a7d1-2548d6d5dca4.png)'
- en: 'After you have created an empty resource file, add a new prefix by going to
    Add | AddPrefix. We will just call this prefix `images`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 创建空的资源文件后，通过添加|添加前缀添加一个新前缀。我们将只称此前缀为`images`：
- en: '![](img/8a5addd2-28d8-4bb3-b595-9acd7b2a0531.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8a5addd2-28d8-4bb3-b595-9acd7b2a0531.png)'
- en: Then, select the newly created `images` prefix and click Add | Add Files. Add
    the icon image to your resource file and save. You have now successfully added
    the image to your project.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，选择新创建的`images`前缀，单击添加|添加文件。将图标图像添加到资源文件并保存。您现在已成功将图像添加到项目中。
- en: '![](img/1803de41-0a6d-4761-bf75-a9da8ff984bf.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1803de41-0a6d-4761-bf75-a9da8ff984bf.png)'
- en: If your prefix name or filename is different than the prefix name or filename
    in this book, you may right-click on your image in the resource file and select
    Copy Resource Path to Clipboard and replace the one in the code with your path.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的前缀名称或文件名与本书中的前缀名称或文件名不同，您可以右键单击资源文件中的图像，然后选择复制资源路径到剪贴板，并用您的路径替换代码中的路径。
- en: '![](img/27bfcbda-33d3-4330-8ed7-33cd8082e990.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/27bfcbda-33d3-4330-8ed7-33cd8082e990.png)'
- en: 'After that, open `mainwindow.h` and add in:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，打开`mainwindow.h`并添加：
- en: '[PRE17]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then, open `mainwindow.cpp` and add the following code to create a profile
    box manually:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，打开`mainwindow.cpp`并添加以下代码以手动创建个人资料框：
- en: '[PRE18]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Build and run the project now and you should see something like this:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在构建和运行项目，您应该看到类似于这样的东西：
- en: '![](img/af8e4e65-97ea-4571-a6f0-b00a43980191.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/af8e4e65-97ea-4571-a6f0-b00a43980191.png)'
- en: Looks neat; but we're far from done. There are a few things left to be done—we
    must allow the user to add or delete profile boxes with a user interface, and
    not by using code. At the same time, we also need to add lines that connect different
    profile boxes to showcase the relationship between different employees and their
    position within the company.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来整洁；但我们还远未完成。还有一些事情要做——我们必须允许用户通过用户界面添加或删除个人资料框，而不是使用代码。同时，我们还需要添加连接不同个人资料框的线条，以展示不同员工之间的关系以及他们在公司内的职位。
- en: 'Let''s start with the easy part. Open `mainwindow.ui` again and add a push
    button to the bottom of the Graphics View widget and name it `addButton`:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从简单的部分开始。再次打开`mainwindow.ui`，并在图形视图小部件底部添加一个推送按钮，并将其命名为`addButton`：
- en: '![](img/03f5b860-526e-425f-b3d7-d24c86c84ebd.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/03f5b860-526e-425f-b3d7-d24c86c84ebd.png)'
- en: 'Then, right-click on the push button and select Go to slot... After that, select
    the clicked option and click Ok. A new slot function will be created for you automatically,
    called `on_addButton_clicked()`. Add the following code to allow the user to create
    a profile box when they click the Add button:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，右键单击推送按钮，选择转到插槽...之后，选择单击选项，然后单击确定。将自动为您创建一个新的插槽函数，名为`on_addButton_clicked()`。添加以下代码以允许用户在单击添加按钮时创建个人资料框：
- en: '[PRE19]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Instead of creating each profile box using code, users can now easily create
    any number of profile boxes they want by clicking the Add button. A message box
    will also appear and let the user type in the employee name before creating the
    profile box:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，用户不再需要使用代码创建每个个人资料框，他们可以通过单击添加按钮轻松创建任意数量的个人资料框。还将出现一个消息框，让用户在创建个人资料框之前输入员工姓名：
- en: '![](img/7f6b3cf5-f348-49a5-a43e-71172aab6166.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7f6b3cf5-f348-49a5-a43e-71172aab6166.png)'
- en: 'Next, we''ll create another class called `profileLine`. This time, we will
    make this class inherit `QGraphicsLineItem`. The `profileline.h` basically looks
    like this:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建另一个名为`profileLine`的类。这次，我们将使这个类继承`QGraphicsLineItem`。`profileline.h`基本上看起来像这样：
- en: '[PRE20]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Similar to `profileBox` class, we also create an `init` function for `profileLine`
    class, called the `initLine()` function. This function takes in two `QGraphicsItem`
    objects as the starting point and ending point for rendering the line. Besides
    that, we also create an `updateLine()` function to redraw the line whenever the
    profile boxes move.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 与`profileBox`类类似，我们还为`profileLine`类创建了一个`init`函数，称为`initLine()`函数。此函数接受两个`QGraphicsItem`对象作为渲染行的起点和终点。此外，我们还创建了一个`updateLine()`函数，以便在配置框移动时重新绘制行。
- en: 'Next, open `profileline.cpp` and add the following code to the constructor:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开`profileline.cpp`并将以下代码添加到构造函数中：
- en: '[PRE21]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: We used `QPen` to set the color of the line to be black and its width to be
    `2`. After that, we also set the `Zvalue` of the line to be `-999` so that it
    will always remain at the back of the profile boxes.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`QPen`将线的颜色设置为黑色，宽度设置为`2`。之后，我们还将线的`Zvalue`设置为`-999`，这样它将始终保持在配置框的后面。
- en: 'After that, add the following code to our `initLine()` function so that it
    looks something like this:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，将以下代码添加到我们的`initLine()`函数中，使其看起来像这样：
- en: '[PRE22]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: What it does is basically set the boxes for it to position its starting point
    and ending point. After that, call `updateLine()` function to render the line.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 它的作用基本上是设置框的起点和终点位置。之后，调用`updateLine()`函数来渲染行。
- en: 'Finally, the `updateLine()` function looks like this:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`updateLine()`函数看起来像这样：
- en: '[PRE23]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The preceding code looks a little complicated, but it''s really simple if I
    put it this way:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码看起来有点复杂，但如果我这样说，它就真的很简单：
- en: '[PRE24]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The values `x1` and `y1` are basically the center position of the first profile
    box while `x2` and `y2` are the center position of the second profile box. Since
    the position value we get from calling `pos()` starts from the top-left corner,
    we must get the bounding size of the profile box and divide it by two to get its
    center position. Then, add that value to the top-left corner position to offset
    it to the center.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 值`x1`和`y1`基本上是第一个配置框的中心位置，而`x2`和`y2`是第二个配置框的中心位置。由于从调用`pos()`获取的位置值从左上角开始，我们必须获取配置框的边界大小并除以二以获取其中心位置。然后，将该值添加到左上角位置以将其偏移至中心。
- en: 'Once you''re done, let''s open `mainwindow.cpp` again and add the following
    code to the `on_addButton_clicked()` function:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，让我们再次打开`mainwindow.cpp`并将以下代码添加到`on_addButton_clicked()`函数中：
- en: '[PRE25]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: In the preceding code, we check whether there is any profile box selected by
    the user. If there is none, we don't have to create any line. Otherwise, create
    a new `profileLine` object and set the newly created profile box and the currently
    selected profile box as the `startBox` and `endBox` properties.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们检查用户是否选择了任何配置框。如果没有，我们就不必创建任何线。否则，创建一个新的`profileLine`对象，并将新创建的配置框和当前选择的配置框设置为`startBox`和`endBox`属性。
- en: 'After that, add the line to our Graphics Scene so that it will appear on the
    screen. Lastly, store this `profileLine` object to a `QList` array so that we
    can use it later. The array declaration looks like this in `mainwindow.h`:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，将该`profileLine`对象添加到我们的图形场景中，以便它出现在屏幕上。最后，将此`profileLine`对象存储到`QList`数组中，以便我们以后使用。在`mainwindow.h`中，数组声明如下所示：
- en: '[PRE26]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Build and run the project now. You should be able to see the line appear when
    you created the second profile box by clicking on the `Add` button, entering a
    name, and selecting OK while the first box remains selected. However, you may
    notice a problem whenever you move the profile box away from its original position—the
    lines simply won''t update themselves!:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在构建和运行项目。当您点击“添加”按钮创建第二个配置框时，您应该能够看到线出现，并在选择第一个框时保持选中。但是，您可能会注意到一个问题，即当您将配置框移出原始位置时，线根本不会更新自己！：
- en: '![](img/115bd268-e78e-49b4-95d5-f58d962cd051.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/115bd268-e78e-49b4-95d5-f58d962cd051.png)'
- en: That is the main reason we put the lines into a `QList` array, so that we can
    update these lines whenever a profile box has been moved by the user.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们将行放入`QList`数组的主要原因，这样我们就可以在用户移动配置框时更新这些行。
- en: 'To do that, first, we need to override the virtual function in the `profileBox`
    class called `itemChanged()`. Let''s open `profilebox.h` and add the following
    line of code:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，首先，我们需要重写`profileBox`类中的虚函数`itemChanged()`。让我们打开`profilebox.h`并添加以下代码行：
- en: '[PRE27]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Then, open `profilebox.cpp` and add the code for `itemChanged()`:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，打开`profilebox.cpp`并添加`itemChanged()`的代码：
- en: '[PRE28]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The `itemChanged()` function is a virtual function in `QGraphicsItem` class
    which will automatically be called by Qt's event system when something has changed
    in the graphics item, be it position change, visibility change, parent change,
    selection change, and so on.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`itemChanged()`函数是`QGraphicsItem`类中的虚函数，当图形项发生变化时，Qt的事件系统将自动调用它，无论是位置变化、可见性变化、父级变化、选择变化等等。'
- en: Therefore, all we need to do is to override the function and add in our own
    custom behavior to the function. In the preceding sample code, all we did was
    to call the `updateLines()` function in our main window class.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们所需要做的就是重写该函数并向函数中添加我们自己的自定义行为。在前面的示例代码中，我们所做的就是在我们的主窗口类中调用`updateLines()`函数。
- en: 'Next, open `mainwindow.cpp` and define the `updateLines()` function. As the
    function name implies, what you''re going to do in this function is to loop through
    all the profile line objects stored in the lines array and update every single
    one of them, like so:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开`mainwindow.cpp`并定义`updateLines()`函数。正如函数名所示，您要在此函数中做的是循环遍历存储在行数组中的所有配置行对象，并更新每一个，如下所示：
- en: '[PRE29]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Once you''re done, build and run the project again. This time, you should be
    able to create an organization chart, such as the following:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，再次构建和运行项目。这次，您应该能够创建一个组织图表，如下所示：
- en: '![](img/72762a59-c68a-4e39-8bb7-097924dd8425.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/72762a59-c68a-4e39-8bb7-097924dd8425.png)'
- en: This is just a simpler version that shows you how you can make use of Qt's powerful
    Graphics View system to display graphical representation of a set of data that
    can be easily understood by an average Joe.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个更简单的版本，向您展示了如何利用Qt强大的图形视图系统来显示一组数据的图形表示，这些数据可以被普通人轻松理解。
- en: 'One last thing before it''s done–we have yet to cover how to delete the profile
    box yet. It''s actually pretty simple, let''s open `mainwindow.h` and add the `keyReleaseEvent()`
    function, which looks like this:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成之前还有一件事-我们还没有讲解如何删除配置档框。实际上很简单，让我们打开`mainwindow.h`并添加`keyReleaseEvent()`函数，看起来像这样：
- en: '[PRE30]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This virtual function will also get called by Qt''s event system automatically
    when a keyboard button is being pressed and released. The content of the function
    looks like this in `mainwindow.cpp`:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这个虚函数在键盘按钮被按下和释放时也会被Qt的事件系统自动调用。函数的内容在`mainwindow.cpp`中看起来像这样：
- en: '[PRE31]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'What we did in this function is first to detect the keyboard button that''s
    being pressed by the user. If the button is `Qt::Key_Delete (delete button)`,
    then we''ll check if the user has selected any profile box by checking whether
    `scene->selectedItems().size()` is empty. If the user has indeed selected a profile
    box, then remove that item from the Graphics Scene. After that, loop through the
    lines array and check whether any profile line has connected to the profile box
    that has been deleted. Remove any lines that are connected to the profile box
    from the scene and we''re done:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个函数中，我们首先要检测用户按下的键盘按钮。如果按钮是`Qt::Key_Delete (删除按钮)`，那么我们将检查用户是否选择了任何配置档框，通过检查`scene->selectedItems().size()`是否为空来判断。如果用户确实选择了一个配置档框，那么就从图形场景中移除该项。之后，循环遍历线数组，并检查是否有任何配置线连接到已删除的配置档框。从场景中移除连接到配置档框的任何线，然后我们就完成了：
- en: '![](img/6fb5678c-13c1-4f9e-a849-3abd267b209c.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6fb5678c-13c1-4f9e-a849-3abd267b209c.png)'
- en: This screenshot shows the result of deleting the `Jane Smith` profile box from
    the organization chart. Notice that the lines connecting the profile box have
    been correctly removed. That's it for this chapter; I hope you found this interesting
    and will perhaps go on to create something even better than this!
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这个截图显示了从组织结构图中删除`Jane Smith`配置档框的结果。请注意，连接配置框的线已经被正确移除。就是这样，本章到此结束；希望您觉得这很有趣，也许会继续创造比这更好的东西！
- en: Summary
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have learned how to create an application using Qt that
    allows the user to easily create and edit an organization chart. We have learned
    about classes such as `QGraphicsScene`, `QGrapicsItem`, `QGraphicsTextItem`, `QGraphicsPixmapItem`
    and so on that help us to create an interactive organization chart in a short
    period of time. In the upcoming chapter, we will learn how to capture images using
    our webcam!
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用Qt创建一个应用程序，允许用户轻松创建和编辑组织结构图。我们学习了诸如`QGraphicsScene`、`QGrapicsItem`、`QGraphicsTextItem`、`QGraphicsPixmapItem`等类，这些类帮助我们在短时间内创建一个交互式组织结构图。在接下来的章节中，我们将学习如何使用网络摄像头捕捉图像！
