["```cpp\n    void PickableActor_Base::Tick(float DeltaTime)\n    {\n    \u00a0\u00a0Super::Tick(DeltaTime);\n    }\n    ```", "```cpp\n    UPROPERTY(VisibleDefaultsOnly, Category = PickableItem)\n    class USphereComponent* CollisionComp;\n    ```", "```cpp\n    UPROPERTY(VisibleDefaultsOnly, Category = PickableItem)\n    class UStaticMeshComponent* MeshComp;\n    ```", "```cpp\n    UPROPERTY(VisibleDefaultsOnly, Category = PickableItem)\n    class URotatingMovementComponent* RotationComp;\n    ```", "```cpp\n    #include \"Components/SphereComponent.h\"\n    #include \"Components/StaticMeshComponent.h\"\n    #include \"GameFramework/RotatingMovementComponent.h\"\n    ```", "```cpp\n    APickableActor_Base::APickableActor_Base()\n    {\n    }\n    ```", "```cpp\n    CollisionComp = CreateDefaultSubobject   <USphereComponent>(TEXT(\"SphereComp\"));\n    ```", "```cpp\n    CollisionComp->InitSphereRadius(30.0f);\n    ```", "```cpp\n    CollisionComp->BodyInstance.SetCollisionProfileName(\"OverlapAllDynamic\");\n    ```", "```cpp\n    RootComponent = CollisionComp;\n    ```", "```cpp\n    MeshComp = CreateDefaultSubobject<UStaticMeshComponent>(TEXT(\"MeshComp\"));\n    MeshComp->AttachToComponent(RootComponent,   FAttachmentTransformRules::KeepWorldTransform);\n    MeshComp->SetCollisionEnabled(ECollisionEnabled::NoCollision);\n    ```", "```cpp\n    RotationComp =   CreateDefaultSubobject<URotatingMovementComponent>(TEXT(\"RotationComp\"));\n    ```", "```cpp\n    (X=100.000000,Y=100.000000,Z=100.000000)\n    ```", "```cpp\n    protected:\n    \u00a0\u00a0virtual void BeginPlay() override;\n    ```", "```cpp\n    virtual void PlayerPickedUp(class ASuperSideScroller_Player* Player)   override;\n    ```", "```cpp\n    public:\n    \u00a0\u00a0UPROPERTY(EditAnywhere, Category = Collectable)\n    \u00a0\u00a0int32 CollectableValue = 1;\n    ```", "```cpp\n    void APickableActor_Collectable::PlayerPickedUp(class   ASuperSideScroller_Player* Player)\n    {\n    }\n    ```", "```cpp\n    Super::PlayerPickedUp(Player);\n    ```", "```cpp\n    void APickableActor_Collectable::BeginPlay()\n    {\n    }\n    ```", "```cpp\n    Super::BeginPlay();\n    ```", "```cpp\nUE_LOG(LogTemp, Warning, TEXT(\"Example Text\"));\n```", "```cpp\nUE_LOG(LogTemp, Warning, TEXT(\"My integer variable %d), MyInteger);\n```", "```cpp\n    int32 NumberofCollectables;\n    ```", "```cpp\n    UFUNCTION(BlueprintPure)\n    int32 GetCurrentNumberofCollectables() { return NumberofCollectables; };\n    ```", "```cpp\n    void IncrementNumberofCollectables(int32  Value);\n    ```", "```cpp\n    void ASuperSideScroller_Player::IncrementNumberofCollectables(int32 Value)\n    {\n    }\n    ```", "```cpp\n    if(Value== 0)\n    {\n    \u00a0\u00a0return;\n    }\n    ```", "```cpp\n    else\n    {\n    \u00a0\u00a0NumberofCollectables += Value;\n    }\n    ```", "```cpp\n    UE_LOG(LogTemp, Warning, TEXT(\"Number of Coins: %d\"), NumberofCollectables);\n    ```", "```cpp\n    #include \"SuperSideScroller_Player.h\"\n    ```", "```cpp\n    Player->IncrementNumberofCollectables(CollectableValue);\n    ```", "```cpp\n    Coins: {coins}\n    ```", "```cpp\ntemplate<typename WidgetT, typename OwnerT>\nWidgetT * CreateWidget\n(\n\u00a0\u00a0OwnerT * OwningObject,\n\u00a0\u00a0TSubclassOf < UUserWidget > UserWidgetClass,\n\u00a0\u00a0FName WidgetName\n)\n```", "```cpp\nHUDWidget = CreateWidget<UHUDWidget>(this, BP_HUDWidget);\n```", "```cpp\nvoid SetTimer\n(\n\u00a0\u00a0\u00a0\u00a0FTimerHandle & InOutHandle,\n\u00a0\u00a0\u00a0\u00a0TFunction < void )> && Callback,\n\u00a0\u00a0\u00a0\u00a0float InRate,\n\u00a0\u00a0\u00a0\u00a0bool InbLoop,\n\u00a0\u00a0\u00a0\u00a0float InFirstDelay\n)\nvoid ClearTimer(FTimerHandle& InHandle)\n```", "```cpp\n    FTimerHandle PowerupHandle;\n    ```", "```cpp\n    bool bHasPowerupActive;\n    ```", "```cpp\n    void IncreaseMovementPowerup();\n    ```", "```cpp\n    void EndPowerup();\n    ```", "```cpp\n    void ASuperSideScroller_Player::IncreaseMovementPowerup()\n    {\n    }\n    ```", "```cpp\n    bHasPowerupActive = true;\n    ```", "```cpp\n    GetCharacterMovement()->MaxWalkSpeed = 500.0f;\n    GetCharacterMovement()->JumpZVelocity = 1500.0f;\n    ```", "```cpp\n    UWorld* World = GetWorld();\n    if (World)\n    {\n    }\n    ```", "```cpp\n    World->GetTimerManager().SetTimer(PowerupHandle, this,   &ASuperSideScroller_Player::EndPowerup, 8.0f, false);\n    ```", "```cpp\n    void ASuperSideScroller_Player::EndPowerup()\n    {\n    }\n    ```", "```cpp\n    bHasPowerupActive = false;\n    ```", "```cpp\n    GetCharacterMovement()->MaxWalkSpeed = 300.0f;\n    GetCharacterMovement()->JumpZVelocity = 1000.0f;\n    ```", "```cpp\n    UWorld* World = GetWorld();\n    if (World)\n    {\n    }\n    ```", "```cpp\n    World->GetTimerManager().ClearTimer(PowerupHandle);\n    ```", "```cpp\n    void ASuperSideScroller_Player::Sprint()\n    {\n    \u00a0\u00a0if (!bIsSprinting)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0bIsSprinting = true;\n    \u00a0\u00a0\u00a0\u00a0if (bHasPowerupActive)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0GetCharacterMovement()->MaxWalkSpeed = 900.0f;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0GetCharacterMovement()->MaxWalkSpeed = 500.0f;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}\n    }\n    ```", "```cpp\n    if (bHasPowerupActive)\n    {\n    \u00a0\u00a0GetCharacterMovement()->MaxWalkSpeed = 900.0f;\n    }\n    ```", "```cpp\n    void ASuperSideScroller_Player::StopSprinting()\n    {\n    \u00a0\u00a0if (bIsSprinting)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0bIsSprinting = false;\n    \u00a0\u00a0\u00a0\u00a0if (bHasPowerupActive)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0GetCharacterMovement()->MaxWalkSpeed = 500.0f;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0GetCharacterMovement()->MaxWalkSpeed = 300.0f;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}\n    }\n    ```", "```cpp\n    if (bHasPowerupActive)\n    {\n    \u00a0\u00a0GetCharacterMovement()->MaxWalkSpeed = 500.0f;\n    }\n    ```", "```cpp\n    UPROPERTY(VisibleDefaultsOnly, Category = Brick)\n    class UStaticMeshComponent* BrickMesh;\n    ```", "```cpp\n    UPROPERTY(VisibleDefaultsOnly, Category = Brick)\n    class UBoxComponent* BrickCollision;\n    ```", "```cpp\n    UFUNCTION()\n    void OnHit(UPrimitiveComponent* HitComp, AActor* OtherActor,   UprimitiveComponent* OtherComp, FVector NormalImpulse,   const FHitResult& Hit);\n    ```", "```cpp\n    UPROPERTY(EditAnywhere)\n    bool bHasCollectable;\n    ```", "```cpp\n    UPROPERTY(EditAnywhere)\n    int32 CollectableValue = 1;\n    ```", "```cpp\n    UPROPERTY(EditAnywhere, BlueprintReadOnly)\n    class USoundBase* HitSound;\n    ```", "```cpp\n    UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Brick)\n    class UParticleSystem* Explosion;\n    ```", "```cpp\n    #include \"Components/StaticMeshComponent.h\"\n    #include \"Components/BoxComponent.h\"\n    ```", "```cpp\n    BrickMesh = CreateDefaultSubobject<UStaticMeshComponent>(TEXT(\"BrickMesh\"));\n    ```", "```cpp\n    BrickMesh->SetCollisionProfileName(\"BlockAll\");\n    ```", "```cpp\n    RootComponent = BrickMesh;\n    ```", "```cpp\n    BrickCollision = CreateDefaultSubobject<UBoxComponent>  (TEXT(\"BrickCollision\"));\n    ```", "```cpp\n    BrickCollision->SetCollisionProfileName(\"BlockAll\");\n    ```", "```cpp\n    BrickCollision->AttachToComponent(RootComponent,   FAttachmentTransformRules::KeepWorldTransform);\n    ```", "```cpp\n    void ASuperSideScroller_Brick::OnHit(UPrimitiveComponent* HitComp, AActor*   OtherActor, UPrimitiveComponent* OtherComp, FVector NormalImpulse, const   FHitResult& Hit)\n    {\n    }\n    ```", "```cpp\n    BrickCollision->OnComponentHit.AddDynamic(this,   &ASuperSideScroller_Brick::OnHit);\n    ```", "```cpp\n    (X=0.750000,Y=0.750000,Z=0.750000)\n    ```", "```cpp\n    (X=0.000000,Y=0.000000,Z=30.000000)\n    ```", "```cpp\n    void AddCollectable(class ASuperSideScroller_Player* Player);\n    ```", "```cpp\n    void PlayHitSound();\n    ```", "```cpp\n    void PlayHitExplosion();\n    ```", "```cpp\n    #include \"Engine/World.h\"\n    #include \"Kismet/GameplayStatics.h\"\n    #include \"SuperSideScroller_Player.h\"\n    ```", "```cpp\n    void ASuperSideScroller_Brick::AddCollectable(class   ASuperSideScroller_Player* Player)\n    {\n    }\n    ```", "```cpp\n    Player->IncrementNumberofCollectables(CollectableValue);\n    ```", "```cpp\n    void ASuperSideScroller_Brick::PlayHitSound()\n    {\n    \u00a0\u00a0UWorld* World = GetWorld();\n    \u00a0\u00a0if (World)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0if (HitSound)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0UGameplayStatics::SpawnSoundAtLocation(World, HitSound,         GetActorLocation());\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}\n    }\n    ```", "```cpp\n    void ASuperSideScroller_Brick::PlayHitExplosion()\n    {\n    \u00a0\u00a0UWorld* World = GetWorld();\n    \u00a0\u00a0if (World)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0if (Explosion)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0UGameplayStatics::SpawnEmitterAtLocation(World, Explosion,         GetActorTransform());\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}\n    }\n    ```", "```cpp\n    ASuperSideScroller_Player* Player =   Cast<ASuperSideScroller_Player>(OtherActor);\n    ```", "```cpp\n    if (Player && bHasCollectable)\n    {\n    }\n    ```", "```cpp\n    AddCollectable(Player);\n    PlayHitSound();\n    PlayHitExplosion();\n    ```", "```cpp\n    Destroy();\n    ```"]