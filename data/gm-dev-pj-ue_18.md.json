["```cpp\n    virtual void Tick(float DeltaSeconds) override;\n    ```", "```cpp\n    #include \"DrawDebugHelpers.h\"\n    #include \"GameFramework/PlayerController.h\"\n    ```", "```cpp\n    void AGFInstancesCharacter::Tick(float DeltaSeconds)\n    {\n    \u00a0\u00a0Super::Tick(DeltaSeconds);\n    }\n    ```", "```cpp\n    AGameModeBase* GameMode = GetWorld()->GetAuthGameMode();\n    AGameStateBase* GameState = GetWorld()->GetGameState();\n    APlayerController* PlayerController =   Cast<APlayerController>(GetController());\n    AHUD* HUD = PlayerController != nullptr ? PlayerController-  >GetHUD() : nullptr;\n    ```", "```cpp\n    const FString GameModeString = GameMode != nullptr ?   TEXT(\"Valid\") : TEXT(\"Invalid\");\n    const FString GameStateString = GameState != nullptr ?   TEXT(\"Valid\") : TEXT(\"Invalid\");\n    const FString PlayerStateString = GetPlayerState() != nullptr ?   TEXT(\"Valid\") : TEXT(\"Invalid\");\n    const FString PawnString = GetName();\n    const FString PlayerControllerString = PlayerController !=   nullptr ? TEXT(\"Valid\") : TEXT(\"Invalid\");\n    const FString HUDString = HUD != nullptr ? TEXT(\"Valid\") :   TEXT(\"Invalid\");\n    ```", "```cpp\n    const FString String = FString::Printf(TEXT(\"Game Mode = %s\\nGame   State = %s\\nPlayerState = %s\\nPawn = %s\\nPlayer Controller =   %s\\nHUD = %s\"), *GameModeString, *GameStateString,   *PlayerStateString, *PawnString, *PlayerControllerString,   *HUDString);\n    DrawDebugString(GetWorld(), GetActorLocation(), String, nullptr,   FColor::White, 0.0f, true);\n    ```", "```cpp\n    PublicDependencyModuleNames.AddRange(new string[] { \"Core\",   \"CoreUObject\", \"Engine\", \"InputCore\", \"HeadMountedDisplay\",   \"UMG\" });\n    ```", "```cpp\n    UPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Category = \"GF   Instance Player Controller\")\n    TSubclassOf<UUserWidget> MenuClass;\n    UPROPERTY()\n    UUserWidget* Menu;\n    ```", "```cpp\n    virtual void BeginPlay() override;\n    ```", "```cpp\n    #include \"Blueprint/UserWidget.h\"\n    ```", "```cpp\n    void AGFInstancePlayerController::BeginPlay()\n    {\n    \u00a0\u00a0Super::BeginPlay();\n    }\n    ```", "```cpp\n    if (!IsLocalController() || MenuClass == nullptr)\n    {\n    \u00a0\u00a0return;\n    }\n    ```", "```cpp\n    Menu = CreateWidget<UUserWidget>(this, MenuClass);\n    if (Menu != nullptr)\n    {\n    \u00a0\u00a0Menu->AddToViewport(0);\n    }\n    ```", "```cpp\nATestGameMode::ATestGameMode()\n{\n\u00a0\u00a0DefaultPawnClass = AMyCharacter::StaticClass();\n\u00a0\u00a0PlayerControllerClass = AMyPlayerController::StaticClass();\n\u00a0\u00a0PlayerStateClass = AMyPlayerState::StaticClass();\n\u00a0\u00a0GameStateClass = AMyGameState::StaticClass();\n}\n```", "```cpp\nAGameModeBase* GameMode = GetWorld()->GetAuthGameMode();\n```", "```cpp\nvoid ATestGameMode::OnDeath(APlayerController* VictimController)\n{\n\u00a0\u00a0if(VictimController == nullptr)\n\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0return;\n\u00a0\u00a0}\n\n\u00a0\u00a0APawn* Pawn = VictimController->GetPawn();\n\u00a0\u00a0if(Pawn != nullptr)\n\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0Pawn->Destroy();\n\u00a0\u00a0}\n\n\u00a0\u00a0RestartPlayer(VicitimController);\n}\n```", "```cpp\nbool ATestGameMode::ShouldSpawnAtStartSpot(AController* Player)\n{\n\u00a0\u00a0return false;\n}\n```", "```cpp\nAPlayerState* PlayerState = Controller->PlayerState;\n```", "```cpp\n// Default version\nAPlayerState* PlayerState = Controller->GetPlayerState();\n// Template version\nATestPlayerState* MyPlayerState = Controller->GetPlayerState<ATestPlayerState>();\n```", "```cpp\n// Default version\nAPlayerState* PlayerState = Pawn->GetPlayerState();\n// Template version\nATestPlayerState* MyPlayerState = Pawn-  >GetPlayerState<ATestPlayerState>();\n```", "```cpp\nTArray<APlayerState*> PlayerStates = GameState->PlayerArray;\n```", "```cpp\n// Default version\nAGameStateBase* GameState = GetWorld()->GetGameState();\n// Template version\nAMyGameState* MyGameState = GetWorld()->GetGameState<AMyGameState>();\n```", "```cpp\nAGameStateBase* GameState = GameMode->GameState;\n```", "```cpp\n// Default version\nAGameStateBase* GameState = GameMode->GetGameState<AGameStateBase>();\n// Template version\nAMyGameState* MyGameState = GameMode->GetGameState<AMyGameState>();\n```", "```cpp\nvoid ATestActor::EndPlay(const EEndPlayReason::Type EndPlayReason)\n{\n\u00a0\u00a0Super::EndPlay(EndPlayReason);\n\u00a0\u00a0const FString String = FString::Printf(TEXT(\u00abThe actor %s has just     stopped playing\"), *GetName());\n\u00a0\u00a0GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Red, String);\n}\n```", "```cpp\nvoid ATestCharacter::Landed(const FHitResult& Hit)\n{\n\u00a0\u00a0Super::Landed(Hit);\n\u00a0\u00a0UGameplayStatics::PlaySound2D(GetWorld(), LandSound);\n}\n```", "```cpp\nvoid ATestGameModeBase::RestartMap()\n{\n\u00a0\u00a0const FString URL = GetWorld()->GetName();\n\u00a0\u00a0GetWorld()->ServerTravel(URL, false, false);\n}\n```", "```cpp\nvoid ATestActor::SortValues()\n{\n\u00a0\u00a0TArray<int32> SortTest;\n\u00a0\u00a0SortTest.Add(43);\n\u00a0\u00a0SortTest.Add(1);\n\u00a0\u00a0SortTest.Add(23);\n\u00a0\u00a0SortTest.Add(8);\n\u00a0\u00a0SortTest.Sort([](const int32& A, const int32& B) { return A < B; });\n}\n```", "```cpp\nvoid AFPSCharacter::FellOutOfWorld(const UDamageType& DmgType)\n{\n\u00a0\u00a0Super::FellOutOfWorld(DmgType);\n\u00a0\u00a0const FString String = FString::Printf(TEXT(\"The actor %s has fell     out of the world\"), *GetName());\n\u00a0\u00a0GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Red, String);\n}\n```", "```cpp\n#include \"GameFramework/RotatingMovementComponent.h\"\n```", "```cpp\nUPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = \"Test Actor\")\nURotatingMovementComponent* RotatingMovement;\n```", "```cpp\nRotatingMovement = CreateDefaultSubobject   <URotatingMovementComponent>(\"Rotating Movement\");\nRotatingMovement->RotationRate = FRotator(0.0, 90.0f, 0);\n```", "```cpp\n    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category =   \"Pickup\")\n    UStaticMeshComponent* Mesh;\n    ```", "```cpp\n    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category =   \"Pickup\")\n    class URotatingMovementComponent* RotatingMovement;\n    ```", "```cpp\n    UPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Category =   \"Pickup\")\n    USoundBase* PickupSound;\n    ```", "```cpp\n    APickup();\n    virtual void BeginPlay() override;\n    ```", "```cpp\n    UFUNCTION()\n    void OnBeginOverlap(UPrimitiveComponent* OverlappedComp, AActor*   OtherActor, UPrimitiveComponent* OtherComp, int32   OtherBodyIndex, bool bFromSweep, const FHitResult& Hit);\n    ```", "```cpp\n    #include \"PickupsCharacter.h\"\n    #include \"PickupsGameState.h\"\n    #include \"Components/StaticMeshComponent.h\"\n    #include \"GameFramework/RotatingMovementComponent.h\"\n    ```", "```cpp\n    Mesh = CreateDefaultSubobject<UStaticMeshComponent>(\"Mesh\");\n    Mesh->SetCollisionProfileName(\"OverlapAll\");\n    RootComponent = Mesh;\n    ```", "```cpp\n    RotatingMovement = CreateDefaultSubobject   <URotatingMovementComponent>(\"Rotating Movement\");\n    RotatingMovement->RotationRate = FRotator(0.0, 90.0f, 0);\n    ```", "```cpp\n    bReplicates = true;\n    PrimaryActorTick.bCanEverTick = false;\n    ```", "```cpp\n    void APickup::BeginPlay()\n    {\n    \u00a0\u00a0Super::BeginPlay();\n    \u00a0\u00a0Mesh->OnComponentBeginOverlap.AddDynamic(this,     &APickup::OnBeginOverlap);\n    }\n    ```", "```cpp\n    void APickup::OnBeginOverlap(UPrimitiveComponent* OverlappedComp,   AActor* OtherActor, UPrimitiveComponent* OtherComp, int32   OtherBodyIndex, bool bFromSweep, const FHitResult& Hit)\n    {\n    \u00a0\u00a0APickupsCharacter* Character =     Cast<APickupsCharacter>(OtherActor);\n    \u00a0\u00a0if (Character == nullptr || !HasAuthority())\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0return;\n    \u00a0\u00a0}\n    \u00a0\u00a0APickupsGameState* GameState =     Cast<APickupsGameState>(GetWorld()->GetGameState());\n    \u00a0\u00a0if (GameState != nullptr)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0GameState->RemovePickup();\n    \u00a0\u00a0}\n    \u00a0\u00a0Character->ClientPlaySound2D(PickupSound);\n    \u00a0\u00a0Character->AddScore(10);\n    \u00a0\u00a0Character->AddPickup();\n    \u00a0\u00a0Destroy();\n    }\n    ```", "```cpp\n    UPROPERTY(Replicated, BlueprintReadOnly)\n    int32 PickupsRemaining;\n    ```", "```cpp\n    virtual void BeginPlay() override;\n    ```", "```cpp\n    UFUNCTION(BlueprintCallable)\n    TArray<APlayerState*> GetPlayerStatesOrderedByScore() const;\n    ```", "```cpp\n    void RemovePickup() { PickupsRemaining--; }\n    ```", "```cpp\n    bool HasPickups() const { return PickupsRemaining > 0; }\n    ```", "```cpp\n    #include \"Pickup.h\"\n    #include \"Kismet/GameplayStatics.h\"\n    #include \"Net/UnrealNetwork.h\"\n    #include \"GameFramework/PlayerState.h\"\n    ```", "```cpp\n    void APickupsGameState::GetLifetimeReplicatedProps(TArray<   FLifetimeProperty >& OutLifetimeProps) const\n    {\n    \u00a0\u00a0Super::GetLifetimeReplicatedProps(OutLifetimeProps);\n    \u00a0\u00a0DOREPLIFETIME(APickupsGameState, PickupsRemaining);\n    }\n    ```", "```cpp\n    void APickupsGameState::BeginPlay()\n    {\n    \u00a0\u00a0Super::BeginPlay();\n    \u00a0\u00a0TArray<AActor*> Pickups;\n    \u00a0\u00a0UGameplayStatics::GetAllActorsOfClass(this,     APickup::StaticClass(), Pickups);\n    \u00a0\u00a0PickupsRemaining = Pickups.Num();\n    }\n    ```", "```cpp\n    TArray<APlayerState*> APickupsGameState::GetPlayerStatesOrderedByScore() const\n    {\n    \u00a0\u00a0TArray<APlayerState*> PlayerStates(PlayerArray);\n    \u00a0\u00a0PlayerStates.Sort([](const APlayerState& A, const APlayerState&     B) { return A.Score > B.Score; });\n    \u00a0\u00a0return PlayerStates;\n    }\n    ```", "```cpp\n    UPROPERTY(Replicated, BlueprintReadOnly)\n    int32 Pickups;\n    ```", "```cpp\n    void AddPickup() { Pickups++; }\n    ```", "```cpp\n    #include \"Net/UnrealNetwork.h\"\n    ```", "```cpp\n    void APickupsPlayerState::GetLifetimeReplicatedProps(TArray<   FLifetimeProperty >& OutLifetimeProps) const\n    {\n    \u00a0\u00a0Super::GetLifetimeReplicatedProps(OutLifetimeProps);\n    \u00a0\u00a0DOREPLIFETIME(APickupsPlayerState, Pickups);\n    }\n    ```", "```cpp\n    UPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Category = \"Pickup   Player Controller\")\n    TSubclassOf<class UUserWidget> ScoreboardMenuClass;\n    ```", "```cpp\n    UPROPERTY()\n    class UUserWidget* ScoreboardMenu;\n    ```", "```cpp\n    virtual void BeginPlay() override;\n    ```", "```cpp\n    #include \"Blueprint/UserWidget.h\"\n    ```", "```cpp\n    void APickupsPlayerController::BeginPlay()\n    {\n    \u00a0\u00a0Super::BeginPlay();\n    \u00a0\u00a0if (!IsLocalController() || ScoreboardMenuClass == nullptr)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0return;\n    \u00a0\u00a0}\n    \u00a0\u00a0ScoreboardMenu = CreateWidget<UUserWidget>(this,     ScoreboardMenuClass);\n    \u00a0\u00a0if (ScoreboardMenu != nullptr)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0ScoreboardMenu->AddToViewport(0);\n    \u00a0\u00a0}\n    }\n    ```", "```cpp\n    #include \"GameFramework/GameMode.h\"\n    ```", "```cpp\n    class APickupsGameMode : public AGameMode\n    ```", "```cpp\n    UPROPERTY()\n    class APickupsGameState* MyGameState;\n    ```", "```cpp\n    virtual void BeginPlay() override;\n    ```", "```cpp\n    virtual bool ShouldSpawnAtStartSpot(AController* Player)   override;\n    ```", "```cpp\n    virtual void HandleMatchHasStarted() override;\n    virtual void HandleMatchHasEnded() override;\n    virtual bool ReadyToStartMatch_Implementation() override;\n    virtual bool ReadyToEndMatch_Implementation() override;\n    ```", "```cpp\n    void RestartMap();\n    ```", "```cpp\n    #include \"Kismet/GameplayStatics.h\"\n    #include \"PickupsGameState.h\"\n    #include \"Engine/World.h\"\n    #include \"Engine/Public/TimerManager.h\"\n    #include \"Engine/Engine.h\"\n    ```", "```cpp\n    void APickupsGameMode::BeginPlay()\n    {\n    \u00a0\u00a0Super::BeginPlay();\n    \u00a0\u00a0MyGameState = GetGameState<APickupsGameState>();\n    }\n    ```", "```cpp\n    bool APickupsGameMode::ShouldSpawnAtStartSpot   (AController* Player)\n    {\n    \u00a0\u00a0return false;\n    }\n    ```", "```cpp\n    void APickupsGameMode::HandleMatchHasStarted()\n    {\n    \u00a0\u00a0Super::HandleMatchHasStarted();\n    \u00a0\u00a0GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Green, \"The     game has started!\");\n    }\n    ```", "```cpp\n    void APickupsGameMode::HandleMatchHasEnded()\n    {\n    \u00a0\u00a0Super::HandleMatchHasEnded();\n    \u00a0\u00a0GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Red, \"The     game has ended!\");\n    \u00a0\u00a0TArray<AActor*> Characters;\n    \u00a0\u00a0\u00a0\u00a0UGameplayStatics::GetAllActorsOfClass(this,     APickupsCharacter::StaticClass(), Characters);\n    \u00a0\u00a0for (AActor* Character : Characters)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0Character->Destroy();\n    \u00a0\u00a0}\n    \u00a0\u00a0FTimerHandle TimerHandle;\n    \u00a0\u00a0GetWorldTimerManager().SetTimer(TimerHandle, this,     &APickupsGameMode::RestartMap, 5.0f);\n    }\n    ```", "```cpp\n    bool APickupsGameMode::ReadyToStartMatch_Implementation()\n    {\n    \u00a0\u00a0return true;\n    }\n    ```", "```cpp\n    bool APickupsGameMode::ReadyToEndMatch_Implementation()\n    {\n    \u00a0\u00a0return MyGameState != nullptr && !MyGameState->HasPickups();\n    }\n    ```", "```cpp\n    void APickupsGameMode::RestartMap()\n    {\n    \u00a0\u00a0GetWorld()->ServerTravel(GetWorld()->GetName(), false, false);\n    }\n    ```", "```cpp\n    UPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Category =   \"Pickups Character\")\n    USoundBase* FallSound;\n    UPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Category =   \"Pickups Character\")\n    USoundBase* LandSound;\n    ```", "```cpp\n    virtual void EndPlay(const EEndPlayReason::Type EndPlayReason)   override;\n    virtual void Landed(const FHitResult& Hit) override;\n    virtual void FellOutOfWorld(const UDamageType& DmgType) override;\n    ```", "```cpp\n    void AddScore(const float Score);\n    void AddPickup();\n    ```", "```cpp\n    UFUNCTION(Client, Unreliable)\n    void ClientPlaySound2D(USoundBase* Sound);\n    ```", "```cpp\n    #include \"PickupsPlayerState.h\"\n    #include \"GameFramework/GameMode.h\"\n    #include \"Kismet/GameplayStatics.h\"\n    ```", "```cpp\n    void APickupsCharacter::EndPlay(const EEndPlayReason::Type   EndPlayReason)\n    {\n    \u00a0\u00a0Super::EndPlay(EndPlayReason);\n    \u00a0\u00a0if (EndPlayReason == EEndPlayReason::Destroyed)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0UGameplayStatics::PlaySound2D(GetWorld(), FallSound);\n    \u00a0\u00a0}\n    }\n    ```", "```cpp\n    void APickupsCharacter::Landed(const FHitResult& Hit)\n    {\n    \u00a0\u00a0Super::Landed(Hit);\n    \u00a0\u00a0UGameplayStatics::PlaySound2D(GetWorld(), LandSound);\n    }\n    ```", "```cpp\n    void APickupsCharacter::FellOutOfWorld(const UDamageType&   DmgType)\n    {\n    \u00a0\u00a0AController* PreviousController = Controller;\n    \u00a0\u00a0AddScore(-10);\n    \u00a0\u00a0Destroy();\n    \u00a0\u00a0AGameMode* GameMode = GetWorld()->GetAuthGameMode<AGameMode>();\n    \u00a0\u00a0if (GameMode != nullptr)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0GameMode->RestartPlayer(PreviousController);\n    \u00a0\u00a0}\n    }\n    ```", "```cpp\n    void APickupsCharacter::AddScore(const float Score)\n    {\n    \u00a0\u00a0APlayerState* MyPlayerState = GetPlayerState();\n    \u00a0\u00a0if (MyPlayerState != nullptr)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0MyPlayerState->Score += Score;\n    \u00a0\u00a0}\n    }\n    ```", "```cpp\n    void APickupsCharacter::AddPickup()\n    {\n    \u00a0\u00a0APickupsPlayerState* MyPlayerState =     GetPlayerState<APickupsPlayerState>();\n    \u00a0\u00a0if (MyPlayerState != nullptr)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0MyPlayerState->AddPickup();\n    \u00a0\u00a0}\n    }\n    ```", "```cpp\n    void APickupsCharacter::ClientPlaySound2D_Implementation(USoundBase*   Sound)\n    {\n    \u00a0\u00a0UGameplayStatics::PlaySound2D(GetWorld(), Sound);\n    }\n    ```", "```cpp\n    PublicDependencyModuleNames.AddRange(new string[] { \"Core\",   \"CoreUObject\", \"Engine\", \"InputCore\", \"HeadMountedDisplay\",   \"UMG\" });\n    ```", "```cpp\n    Scale = 0.5, 0.5, 0.5\t\n    Static Mesh = Engine\\BasicShapes\\Cube\n    Material Element 0 = CubeMaterial\n    ```", "```cpp\n    Game State Class = PickupsGameState\n    Player Controller Class = BP_PlayerController\n    Player State Class = PickupsPlayerState\n    ```"]