["```cpp\nbool IsInHierarchy(Pose& pose, unsigned int root, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 unsigned int search);\nvoid Blend(Pose& output,Pose& a,Pose& b,float t,int root);\n```", "```cpp\n    bool IsInHierarchy(Pose& pose, unsigned int parent, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 unsigned int search) {\n    \u00a0\u00a0\u00a0\u00a0if (search == parent) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return true;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0int p = pose.GetParent(search);\n    \u00a0\u00a0\u00a0\u00a0while (p >= 0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (p == (int)parent) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return true;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0p = pose.GetParent(p);\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0return false;\n    }\n    ```", "```cpp\n    void Blend(Pose& output, Pose& a, Pose& b, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 float t, int root) {\n    \u00a0\u00a0\u00a0\u00a0unsigned int numJoints = output.Size();\n    \u00a0\u00a0\u00a0\u00a0for (unsigned int i = 0; i < numJoints; ++i) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (root >= 0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!IsInHierarchy(output, root, i)) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0continue;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0output.SetLocalTransform(i, mix(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a.GetLocalTransform(i), \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0b.GetLocalTransform(i), t)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0);\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cpp\nstruct CrossFadeTarget {\n\u00a0\u00a0 Pose mPose;\n\u00a0\u00a0 Clip* mClip;\n\u00a0\u00a0 float mTime;\n\u00a0\u00a0 float mDuration;\n\u00a0\u00a0 float mElapsed;\n\u00a0\u00a0 inline CrossFadeTarget() \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: mClip(0), mTime(0.0f), \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mDuration(0.0f), mElapsed(0.0f) { }\n\u00a0\u00a0 inline CrossFadeTarget(Clip* target,Pose& pose,float dur) \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: mClip(target), mTime(target->GetStartTime()), \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mPose(pose), mDuration(dur), mElapsed(0.0f) { }\n};\n```", "```cpp\nclass CrossFadeController {\nprotected:\n\u00a0\u00a0\u00a0\u00a0std::vector<CrossFadeTarget> mTargets;\n\u00a0\u00a0\u00a0\u00a0Clip* mClip;\n\u00a0\u00a0\u00a0\u00a0float mTime;\n\u00a0\u00a0\u00a0\u00a0Pose mPose;\n\u00a0\u00a0\u00a0\u00a0Skeleton mSkeleton;\n\u00a0\u00a0\u00a0\u00a0bool mWasSkeletonSet;\npublic:\n\u00a0\u00a0\u00a0\u00a0CrossFadeController();\n\u00a0\u00a0\u00a0\u00a0CrossFadeController(Skeleton& skeleton);\n\u00a0\u00a0\u00a0\u00a0void SetSkeleton(Skeleton& skeleton);\n\u00a0\u00a0\u00a0\u00a0void Play(Clip* target);\n\u00a0\u00a0\u00a0\u00a0void FadeTo(Clip* target, float fadeTime);\n\u00a0\u00a0\u00a0\u00a0void Update(float dt);\n\u00a0\u00a0\u00a0\u00a0Pose& GetCurrentPose();\n\u00a0\u00a0\u00a0\u00a0Clip* GetcurrentClip();\n};\n```", "```cpp\n    CrossFadeController::CrossFadeController() {\n    \u00a0\u00a0\u00a0\u00a0mClip = 0;\n    \u00a0\u00a0\u00a0\u00a0mTime = 0.0f;\n    \u00a0\u00a0\u00a0\u00a0mWasSkeletonSet = false;\n    }\n    CrossFadeController::CrossFadeController(Skeleton& skeleton) {\n    \u00a0\u00a0\u00a0\u00a0mClip = 0;\n    \u00a0\u00a0\u00a0\u00a0mTime = 0.0f;\n    \u00a0\u00a0\u00a0\u00a0SetSkeleton(skeleton);\n    }\n    ```", "```cpp\n    void CrossFadeController::SetSkeleton(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Skeleton& skeleton) {\n    \u00a0\u00a0\u00a0\u00a0mSkeleton = skeleton;\n    \u00a0\u00a0\u00a0\u00a0mPose = mSkeleton.GetRestPose();\n    \u00a0\u00a0\u00a0\u00a0mWasSkeletonSet = true;\n    }\n    ```", "```cpp\n    void CrossFadeController::Play(Clip* target) {\n    \u00a0\u00a0\u00a0\u00a0mTargets.clear();\n    \u00a0\u00a0\u00a0\u00a0mClip = target;\n    \u00a0\u00a0\u00a0\u00a0mPose = mSkeleton.GetRestPose();\n    \u00a0\u00a0\u00a0\u00a0mTime = target->GetStartTime();\n    }\n    ```", "```cpp\n    void CrossFadeController::FadeTo(Clip* target, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 float fadeTime) {\n    \u00a0\u00a0\u00a0\u00a0if (mClip == 0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Play(target);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0if (mTargets.size() >= 1) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Clip* clip=mTargets[mTargets.size()-1].mClip;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (clip == target) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (mClip == target) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0mTargets.push_back(CrossFadeTarget(target, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 mSkeleton.GetRestPose(), fadeTime));\n    }\n    ```", "```cpp\n    void CrossFadeController::Update(float dt) {\n    \u00a0\u00a0\u00a0\u00a0if (mClip == 0 || !mWasSkeletonSet) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return;\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0unsigned int numTargets = mTargets.size();\n    \u00a0\u00a0\u00a0\u00a0for (unsigned int i = 0; i < numTargets; ++i) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0float duration = mTargets[i].mDuration;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (mTargets[i].mElapsed >= duration) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mClip = mTargets[i].mClip;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mTime = mTargets[i].mTime;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mPose = mTargets[i].mPose;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mTargets.erase(mTargets.begin() + i);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0numTargets = mTargets.size();\n    \u00a0\u00a0\u00a0\u00a0mPose = mSkeleton.GetRestPose();\n    \u00a0\u00a0\u00a0\u00a0mTime = mClip->Sample(mPose, mTime + dt);\n    \u00a0\u00a0\u00a0\u00a0for (unsigned int i = 0; i < numTargets; ++i) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CrossFadeTarget& target = mTargets[i];\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0target.mTime = target.mClip->Sample(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 target.mPose, target.mTime + dt);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0target.mElapsed += dt;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0float t = target.mElapsed / target.mDuration;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (t > 1.0f) { t = 1.0f; }\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Blend(mPose, mPose, target.mPose, t, -1);\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cpp\n    Pose& CrossFadeController::GetCurrentPose() {\n    \u00a0\u00a0\u00a0\u00a0return mPose;\n    }\n    Clip* CrossFadeController::GetcurrentClip() {\n    \u00a0\u00a0\u00a0\u00a0return mClip;\n    }\n    ```", "```cpp\nPose MakeAdditivePose(Skeleton& skeleton, Clip& clip);\nvoid Add(Pose& output, Pose& inPose, Pose& addPose, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Pose& additiveBasePose, int blendroot);\n```", "```cpp\nPose MakeAdditivePose(Skeleton& skeleton, Clip& clip) {\n\u00a0\u00a0\u00a0\u00a0Pose result = skeleton.GetRestPose();\n\u00a0\u00a0\u00a0\u00a0clip.Sample(result, clip.GetStartTime());\n\u00a0\u00a0\u00a0\u00a0return result;\n}\n```", "```cpp\nvoid Add(Pose& output, Pose& inPose, Pose& addPose, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Pose& basePose, int blendroot) {\n\u00a0\u00a0 unsigned int numJoints = addPose.Size();\n\u00a0\u00a0 for (int i = 0; i < numJoints; ++i) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Transform input = inPose.GetLocalTransform(i);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Transform additive = addPose.GetLocalTransform(i);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Transform additiveBase=basePose.GetLocalTransform(i);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (blendroot >= 0 && \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0!IsInHierarchy(addPose, blendroot, i)) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 continue;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // outPose = inPose + (addPose - basePose)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Transform result(input.position + \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 (additive.position - additiveBase.position),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0normalized(input.rotation * \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 (inverse(additiveBase.rotation) * \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0additive.rotation)),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0input.scale + (additive.scale - \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0additiveBase.scale)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0output.SetLocalTransform(i, result);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```"]