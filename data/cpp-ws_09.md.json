["```cpp\n    dotnet new webapi\n    ```", "```cpp\n    dotnet run --urls=https://localhost:7021/\n    ```", "```cpp\n[ApiController]\n[Route(\"[controller]\")]\npublic class WeatherForecastController : ControllerBase\n{\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0private readonly ILogger<WeatherForecastController> _logger;\n\u00a0\u00a0\u00a0\u00a0public WeatherForecastController(ILogger<WeatherForecastController> logger)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_logger = logger;\n\u00a0\u00a0\u00a0\u00a0}\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0[HttpGet]\n\u00a0\u00a0\u00a0\u00a0public IEnumerable<WeatherForecast> Get()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return new List<WeatherForecast>(){new WeatherForecast()};\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\ndotnet run --urls=https://localhost:7021/\n```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[HttpGet(\"error\")]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public IEnumerable<WeatherForecast> GetError()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw new Exception(\"Something went wrong\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\nCannot implicitly convert type 'Microsoft.AspNetCore.Mvc.OkObjectResult' to 'Chapter09.Service.Models.WeatherForecast'\n```", "```cpp\n[HttpGet(\"weekday/{day}\")]\npublic IActionResult GetWeekday(int day)\n{\n\u00a0\u00a0\u00a0\u00a0if (day < 1 || day > 7)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return NotFound($\"'{day}' is not a valid day of a week.\");\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0return Ok(new WeatherForecast());\n}\n```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0[ApiController]\n    \u00a0\u00a0\u00a0\u00a0[Route(\"[controller]\")]\n    \u00a0\u00a0\u00a0\u00a0public class TimeController : ControllerBase\n    \u00a0\u00a0\u00a0\u00a0{\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[HttpGet(\"current\")]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public IActionResult GetCurrentTime()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return Ok(DateTime.Now.ToString(\"o\"));\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    2022-07-30T15:06:28.4924356+03:00\n    ```", "```cpp\n// Inject dependencies (DI)\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddControllers();\n// Add middleware\nvar app = builder.Build();\nif (builder.Environment.IsDevelopment())\n{\n\u00a0\u00a0\u00a0\u00a0app.UseDeveloperExceptionPage();\n}\napp.MapControllers();\napp.Run();\n```", "```cpp\nvar builder = WebApplication.CreateBuilder(args);\n```", "```cpp\nbuilder.Services.AddControllers();\n```", "```cpp\napp.MapControllers();\n```", "```cpp\nbuilder.Services.AddLogging(builder =>\n{\n\u00a0\u00a0\u00a0\u00a0builder.ClearProviders();\n});\n```", "```cpp\nbuilder.Services.AddLogging(builder =>\n{\n\u00a0\u00a0\u00a0\u00a0builder.ClearProviders();\n\u00a0\u00a0\u00a0\u00a0builder.AddConsole();\n\u00a0\u00a0\u00a0\u00a0builder.AddDebug();\n});\n```", "```cpp\n[HttpGet(\"error\")]\npublic IEnumerable<WeatherForecast> GetError()\n{\n\u00a0\u00a0\u00a0\u00a0_logger.LogError(\"Whoops\");\n\u00a0\u00a0\u00a0\u00a0throw new Exception(\"Something went wrong\");\n}\n```", "```cpp\ndotnet run --urls=https://localhost:7021/\n```", "```cpp\nservices.AddSingleton<ILoggerFactory, LoggerFactory>();\n```", "```cpp\npublic WeatherForecastController(ILoggerFactory logger)\n```", "```cpp\n_logger = logger.CreateLogger(typeof(WeatherForecastController).FullName);\n```", "```cpp\npublic interface IWeatherForecastService\n{\n\u00a0\u00a0\u00a0\u00a0WeatherForecast GetWeekday(int day);\n}\n```", "```cpp\npublic class NoSuchWeekdayException : Exception\n{\n\u00a0\u00a0\u00a0\u00a0public NoSuchWeekdayException(int day) \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: base($\"'{day}' is not a valid day of a week.\") { }\n}\n```", "```cpp\npublic class WeatherForecastService : IWeatherForecastService\n{\n\u00a0\u00a0\u00a0\u00a0public WeatherForecast GetWeekday(int day)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (day < 1 || day > 7)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw new NoSuchWeekdayException(day);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return new WeatherForecast();\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\nprivate readonly IWeatherForecastService _weatherForecastService;\nprivate readonly Ilogger _logger;\npublic WeatherForecastController(IloggerFactory logger, IWeatherForecastService weatherForecastService)\n{\n\u00a0\u00a0\u00a0\u00a0_weatherForecastService = weatherForecastService;\n\u00a0\u00a0\u00a0\u00a0_logger = logger.CreateLogger(typeof(WeatherForecastController).FullName);\n}\n```", "```cpp\n[HttpGet(\"weekday/{day}\")]\npublic IActionResult GetWeekday(int day)\n{\n\u00a0\u00a0\u00a0\u00a0try\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var result = _weatherForecastService.GetWeekday(day);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return Ok(result);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0catch(NoSuchWeekdayException exception)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return NotFound(exception.Message);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\nUnable to resolve service for type 'Chapter09.Service.Examples.TemplateApi.Services.IweatherForecastService' while attempting to activate 'Chapter09.Service.Examples.TemplateApi.Controllers.WeatherForecastController'\n```", "```cpp\nbuilder.Services.AddSingleton<IWeatherForecastService, WeatherForecastService>();\n```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0private readonly ILogger<WeatherForecastService> _logger;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public WeatherForecastService(ILogger<WeatherForecastService> logger)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_logger = logger;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public WeatherForecastService(ILogger<WeatherForecastService> logger)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_logger = logger;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_logger.LogInformation(Guid.NewGuid().ToString());\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0public class WeatherForecastController : ControllerBase\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0private readonly IWeatherForecastService _weatherForecastService1;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0private readonly IWeatherForecastService _weatherForecastService2;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0private readonly ILogger _logger;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public WeatherForecastController(ILoggerFactory logger, IWeatherForecastService weatherForecastService1, IWeatherForecastService weatherForecastService2)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_weatherForecastService1 = weatherForecastService1;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_weatherForecastService2 = weatherForecastService2;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_logger = logger.CreateLogger(typeof(WeatherForecastController).FullName);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[HttpGet(\"weekday/{day}\")]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public IActionResult GetWeekday(int day)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0try\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var result = _weatherForecastService1.GetWeekday(day);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result = _weatherForecastService1.GetWeekday(day);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return Ok(result);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0catch (NoSuchWeekdayException exception)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return NotFound(exception.Message);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\nbuilder.Services.AddSingleton<IWeatherForecastService, WeatherForecastService>();\n```", "```cpp\ninfo: Chapter09.Service.Services.WeatherForecastService[0]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a02b0c4e0c-97ff-4472-862a-b6326992d9a6\ninfo: Chapter09.Service.Services.WeatherForecastService[0]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a02b0c4e0c-97ff-4472-862a-b6326992d9a6\n```", "```cpp\ninfo: Chapter09.Service.Services.WeatherForecastService[0]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a02b0c4e0c-97ff-4472-862a-b6326992d9a6\ninfo: Chapter09.Service.Services.WeatherForecastService[0]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a02b0c4e0c-97ff-4472-862a-b6326992d9a6\n```", "```cpp\nbuilder.Services.AddScoped<IWeatherForecastService, WeatherForecastService>();\n```", "```cpp\ninfo: Chapter09.Service.Services.WeatherForecastService[0]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0921a29e8-8f39-4651-9ffa-2e83d2289f29\ninfo: Chapter09.Service.Services.WeatherForecastService[0]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0921a29e8-8f39-4651-9ffa-2e83d2289f29\n```", "```cpp\ninfo: Chapter09.Service.Services.WeatherForecastService[0]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0974e082d-1ff5-4727-93dc-fde9f61d3762\ninfo: Chapter09.Service.Services.WeatherForecastService[0]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0974e082d-1ff5-4727-93dc-fde9f61d3762\n```", "```cpp\nbuilder.Services.AddTransient<IWeatherForecastService, WeatherForecastService>();\n```", "```cpp\ninfo: Chapter09.Service.Services.WeatherForecastService[0]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a06335a0aa-f565-4673-a5c4-0590a5d0aead\ninfo: Chapter09.Service.Services.WeatherForecastService[0]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a04074f4d3-5e50-4748-9d6f-15fb6a782000\n```", "```cpp\nbuilder.Services.AddSingleton<IWeatherForecastService, WeatherForecastService>();\nDebug.WriteLine(\"Services count: \" + services.Count);\nbuilder.services.AddSingleton<IWeatherForecastService, WeatherForecastService>();\nDebug.WriteLine(\"Services count: \" + services.Count);\n```", "```cpp\nServices count: 156\nServices count: 157\n```", "```cpp\nbuilder.Services.TryAddSingleton<IWeatherForecastService, WeatherForecastService>();\nDebug.WriteLine(\"Services count: \" + services.Count);\nbuilder.Services.TryAddSingleton<IWeatherForecastService, WeatherForecastService>();\nDebug.WriteLine(\"Services count: \" + services.Count);\n```", "```cpp\nServices count: 156\nServices count: 156\n```", "```cpp\nUnable to resolve a controller\n```", "```cpp\npublic class WeatherForecastServiceV2 : IWeatherForecastService\n{\n\u00a0\u00a0\u00a0\u00a0private readonly string _city;\n\u00a0\u00a0\u00a0\u00a0private readonly int _refreshInterval;\n\u00a0\u00a0\u00a0\u00a0public WeatherForecastService(string city, int refreshInterval)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_city = city;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_refreshInterval = refreshInterval;\n\u00a0\u00a0\u00a0\u00a0}\n```", "```cpp\nbuilder.Services.AddSingleton<IWeatherForecastService, WeatherForecastService>(BuildWeatherForecastService);\nstatic WeatherForecastServiceV2 BuildWeatherForecastService(IServiceProvider _)\n{\n\u00a0\u00a0\u00a0\u00a0return new WeatherForecastServiceV2(\"New York\", 5);\n}\n```", "```cpp\n    public interface ICurrentTimeProvider\n    {\n    \u00a0\u00a0\u00a0\u00a0DateTime GetTime(string timezoneId);\n    }\n    ```", "```cpp\n    public class CurrentTimeUtcProvider : ICurrentTimeProvider\n    {\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0public DateTime GetTime(string timezoneId)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var timezoneInfo = TimeZoneInfo.FindSystemTimeZoneById(timezoneId);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var time = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, timezoneInfo);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return time;\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cpp\n    [ApiController]\n    [Route(\"[controller]\")]\n    public class CurrentTimeController : ControllerBase\n    {\n    \u00a0\u00a0\u00a0\u00a0private readonly ICurrentTimeProvider _currentTimeProvider;\n    \u00a0\u00a0\u00a0\u00a0public CurrentTimeController(ICurrentTimeProvider currentTimeProvider)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_currentTimeProvider = currentTimeProvider;\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0[HttpGet]\n    \u00a0\u00a0\u00a0\u00a0public IActionResult Get(string timezoneId)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var time = _currentTimeProvider.GetTime(timezoneId);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return Ok(time);\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cpp\n    builder.Services.AddSingleton<ICurrentTimeProvider, CurrentTimeUtcProvider>();\n    ```", "```cpp\n\"2021-09-18T20:32:29.1619999\"\n```", "```cpp\ndotnet add package Swashbuckle.AspNetCore\n```", "```cpp\nbuilder.Services.AddSwaggerGen();\n```", "```cpp\napp.UseSwagger();\napp.UseSwaggerUI(c => { c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"My API V1\"); }); \n```", "```cpp\ndotnet run --urls=https://localhost:7021/\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0public interface IWeatherForecastService\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WeatherForecast GetWeekday(int day);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0void SaveWeatherForecast(WeatherForecast forecast);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WeatherForecast GetWeatherForecast(DateTime date);\n\u00a0\u00a0\u00a0\u00a0}\n```", "```cpp\nprivate readonly IMemoryCache _cache;\n```", "```cpp\npublic WeatherForecastService(ILogger<WeatherForecastService> logger, string city, int refreshInterval, IMemoryCache cache)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_logger = logger;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_city = city;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_refreshInterval = refreshInterval;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_serviceIdentifier = Guid.NewGuid();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_cache = cache;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public void SaveWeatherForecast(WeatherForecast forecast)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_cache.Set(forecast.Date.ToShortDateString(), forecast);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public WeatherForecast GetWeatherForecast(DateTime date)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var shortDateString = date.ToShortDateString();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var contains = _cache.TryGetValue(shortDateString, out var entry);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return !contains ? null : (WeatherForecast) entry;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[HttpGet(\"{date}\")]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public IActionResult GetWeatherForecast(DateTime date)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var weatherForecast = _weatherForecastService1.GetWeatherForecast(date);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (weatherForecast == null) return NotFound();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return Ok(weatherForecast);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[HttpPost]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public IActionResult SaveWeatherForecast(WeatherForecast weatherForecast)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_weatherForecastService1.SaveWeatherForecast(weatherForecast);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return CreatedAtAction(\"GetWeatherForecast\", new { date = weatherForecast.Date.ToShortDateString()}, weatherForecast);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/// <summary>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/// Gets weather forecast at a specified date.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/// </summary>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/// <param name=\"date\">Date of a forecast.</param>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/// <returns>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/// A forecast at a specified date.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/// If not found - 404.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/// </returns>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[HttpGet(\"{date}\")]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[ProducesResponseType(StatusCodes.Status404NotFound)]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[ProducesResponseType(StatusCodes.Status200OK)]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public IActionResult GetWeatherForecast(DateTime date)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/// <summary>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/// Saves a forecast at forecast date.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/// </summary>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/// <param name=\"weatherForecast\">Date which identifies a forecast. Using short date time string for identity.</param>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/// <returns>201 with a link to an action to fetch a created forecast.</returns>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[HttpPost]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[ProducesResponseType(StatusCodes.Status201Created)]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public IActionResult SaveWeatherForecast(WeatherForecast weatherForecast)\n```", "```cpp\n\u00a0\u00a0<PropertyGroup>\n\u00a0\u00a0\u00a0\u00a0<GenerateDocumentationFile>true</GenerateDocumentationFile>\n\u00a0\u00a0\u00a0\u00a0<NoWarn>$(NoWarn);1591</NoWarn>\n\u00a0\u00a0</PropertyGroup>\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0builder.Services.AddSwaggerGen(cfg =>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var xmlFile = $\"{Assembly.GetExecutingAssembly().GetName().Name}.xml\";\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cfg.IncludeXmlComments(xmlPath);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n```", "```cpp\ndotnet add package Hellang.Middleware.ProblemDetails\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0builder.Services.AddProblemDetails(opt =>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0opt.MapToStatusCode<NoSuchWeekdayException>(404);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0opt.IncludeExceptionDetails = (context, exception) => false;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (builder.Environment.IsDevelopment())\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0app.UseDeveloperExceptionPage();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[HttpGet(\"weekday/{day}\")]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public IActionResult GetWeekday(int day)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var result = _weatherForecastService.GetWeekday(day);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return Ok(result);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n```", "```cpp\n{\n\u00a0\u00a0\u00a0\u00a0\"type\": \"/weatherforecast/weekday/9\",\n\u00a0\u00a0\u00a0\u00a0\"title\": \"Not Found\",\n\u00a0\u00a0\u00a0\u00a0\"status\": 404,\n\u00a0\u00a0\u00a0\u00a0\"traceId\": \"|41dee286-4c5efb72e344ee2d.\"\n}\n```", "```cpp\ndotnet add package FluentValidation.AspNetCore\n```", "```cpp\npublic class WeatherForecastValidator : AbstractValidator<WeatherForecast>\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public WeatherForecastValidator()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0RuleFor(p => p.Date)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.LessThan(DateTime.Now.AddMonths(1))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.WithMessage(\"Weather forecasts in more than 1 month of future are not supported\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0RuleFor(p => p.TemperatureC)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.InclusiveBetween(-100, 100)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.WithMessage(\"A temperature must be between -100 and +100 C.\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n```", "```cpp\n{\n\u00a0\u00a0\"date\": \"2022-09-19T19:34:34.511Z\",\n\u00a0\u00a0\"temperatureC\": -111,\n\u00a0\u00a0\"summary\": \"string\"\n}\n```", "```cpp\n{\n\u00a0\u00a0\"type\": \"https://tools.ietf.org/html/rfc7231#section-6.5.1\",\n\u00a0\u00a0\"title\": \"One or more validation errors occurred.\",\n\u00a0\u00a0\"status\": 400,\n\u00a0\u00a0\"traceId\": \"|ade14b9-443aaaf79026feec.\",\n\u00a0\u00a0\"errors\": {\n\u00a0\u00a0\u00a0\u00a0\"Date\": [\n\u00a0\u00a0\u00a0\u00a0  \"Weather forecasts in more than 1 month of future are not supported\"\n\u00a0\u00a0\u00a0\u00a0],\n\u00a0\u00a0\u00a0\u00a0\"TemperatureC\": [\n\u00a0\u00a0\u00a0\u00a0  \"A temperature must be between -100 and +100 C.\"\n\u00a0\u00a0\u00a0\u00a0]\n\u00a0\u00a0}\n}\n```", "```cpp\n\u00a0\u00a0\"WeatherForecastConfig\": {\n\u00a0\u00a0\u00a0\u00a0\"City\": \"New York\",\n\u00a0\u00a0\u00a0\u00a0\"RefreshInterval\":  5 \n\u00a0\u00a0}\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0public class WeatherForecastConfig\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public string City { get; set; }\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public int RefreshInterval { get; set; }\n\u00a0\u00a0\u00a0\u00a0}\n```", "```cpp\npublic WeatherForecastService(Ilogger<WeatherForecastService> logger, Ioptions<WeatherForecastConfig> config, ImemoryCache cache)\n```", "```cpp\nbuilder.Services.Configure<WeatherForecastConfig>(builder.Configuration.GetSection(nameof(WeatherForecastConfig)));\n```", "```cpp\n{\n\u00a0\u00a0\"Logging\": {\n\u00a0\u00a0\u00a0\u00a0\"LogLevel\": {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Default\": \"Information\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Microsoft\": \"Information\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Microsoft.Hosting.Lifetime\": \"Information\"\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0},\n\u00a0\u00a0\"AllowedHosts\": \"*\",\n\u00a0\u00a0\"WeatherForecastConfig\": {\n\u00a0\u00a0\u00a0\u00a0\"City\": \"New York\",\n\u00a0\u00a0\u00a0\u00a0\"RefreshInterval\": 5\n\u00a0\u00a0},\n\u00a0\u00a0\"WeatherForecastProviderUrl\": \"https://community-open-weather-map.p.rapidapi.com/\",\n\u00a0\u00a0\"AzureAd\": {\n\u00a0\u00a0\u00a0\u00a0\"Instance\": \"https://login.microsoftonline.com/\",\n\u00a0\u00a0\u00a0\u00a0\"ClientId\": \"2d8834d3-6a27-47c9-84f1-0c9db3eeb4bb\",\n\u00a0\u00a0\u00a0\u00a0\"TenantId\": \"ddd0fd18-f056-4b33-88cc-088c47b81f3e\",\n\u00a0\u00a0\u00a0\u00a0\"Audience\": \"api://2d8834d3-6a27-47c9-84f1-0c9db3eeb4bb\"\n  }\n}\n```", "```cpp\n{\n\u00a0\u00a0\"Logging\": {\n\u00a0\u00a0\u00a0\u00a0\"LogLevel\": {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Default\": \"Trace\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Microsoft\": \"Trace\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Microsoft.Hosting.Lifetime\": \"Trace\"\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0}\n}\n```", "```cpp\n{\n\u00a0\u00a0\"Logging\": {\n\u00a0\u00a0\u00a0\u00a0\"LogLevel\": {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Default\": \"Trace\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Microsoft\": \"Trace\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Microsoft.Hosting.Lifetime\": \"Trace\"\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0},\n\u00a0\u00a0\"AllowedHosts\": \"*\",\n\u00a0\u00a0\"WeatherForecastConfig\": {\n\u00a0\u00a0\u00a0\u00a0\"City\": \"New York\",\n\u00a0\u00a0\u00a0\u00a0\"RefreshInterval\": 5\n\u00a0\u00a0},\n\u00a0\u00a0\"WeatherForecastProviderUrl\": \"https://community-open-weather-map.p.rapidapi.com/\",\n\u00a0\u00a0\"AzureAd\": {\n\u00a0\u00a0\u00a0\u00a0\"Instance\": \"https://login.microsoftonline.com/\",\n\u00a0\u00a0\u00a0\u00a0\"ClientId\": \"2d8834d3-6a27-47c9-84f1-0c9db3eeb4bb\",\n\u00a0\u00a0\u00a0\u00a0\"TenantId\": \"ddd0fd18-f056-4b33-88cc-088c47b81f3e\",\n\u00a0\u00a0\u00a0\u00a0\"Audience\": \"api://2d8834d3-6a27-47c9-84f1-0c9db3eeb4bb\"\n\u00a0\u00a0}\n}\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0public static class ControllersConfigurationSetup\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public static IserviceCollection AddControllersConfiguration(this IserviceCollection services)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0services\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.AddControllers()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.AddFluentValidation();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return services;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0public static class LoggingSetup\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public static IServiceCollection AddLoggingConfiguration(this IServiceCollection services)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0services.AddLogging(builder =>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0builder.ClearProviders();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0builder.AddConsole();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0builder.AddDebug();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return services;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0public static class RequestValidatorsSetup\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public static IServiceCollection AddRequestValidators(this IServiceCollection services)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0services.AddTransient<Ivalidator<WeatherForecast>, WeatherForecastValidator>();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return services;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0public static class SwaggerSetup\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public static IServiceCollection AddSwagger(this IServiceCollection services)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0services.AddSwaggerGen(cfg =>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var xmlFile = $\"{Assembly.GetExecutingAssembly().GetName().Name}.xml\";\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cfg.IncludeXmlComments(xmlPath);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return services;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0public static class WeatherServiceSetup\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public static IServiceCollection AddWeatherService(this IServiceCollection services, IConfiguration configuration)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0services.AddScoped<IWeatherForecastService, WeatherForecastService>(BuildWeatherForecastService);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0services.AddSingleton<ICurrentTimeProvider, CurrentTimeUtcProvider>();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0services.AddSingleton<ImemoryCache, MemoryCache>();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0services.Configure<WeatherForecastConfig>(configuration.GetSection(nameof(WeatherForecastConfig)));\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return services;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0private static WeatherForecastService BuildWeatherForecastService(IserviceProvider provider)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var logger = provider\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.GetService<IloggerFactory>()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.CreateLogger<WeatherForecastService>();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var options = provider.GetService<Ioptions<WeatherForecastConfig>>();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return new WeatherForecastService(logger, options, provider.GetService<ImemoryCache>());\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0public static class ExceptionMappingSetup\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public static IServiceCollection AddExceptionMappings(this IServiceCollection services)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0services.AddProblemDetails(opt =>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0opt.MapToStatusCode<NoSuchWeekdayException>(404);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return services;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n```", "```cpp\nbuilder.Services\n\u00a0\u00a0\u00a0\u00a0.AddControllersConfiguration()\n\u00a0\u00a0\u00a0\u00a0.AddLoggingConfiguration()\n\u00a0\u00a0\u00a0\u00a0.AddRequestValidators()\n\u00a0\u00a0\u00a0\u00a0.AddSwagger()\n\u00a0\u00a0\u00a0\u00a0.AddWeatherService(builder.Configuration)\n\u00a0\u00a0\u00a0\u00a0.AddExceptionMappings();\n```", "```cpp\nvar services = builder.Services;\nvar configuration = builder.Configuration;\nvar environment = builder.Environment;\n```", "```cpp\n    \"WeatherForecastProviderUrl\": \"https://visual-crossing-weather.p.rapidapi.com/\"\n    ```", "```cpp\n    public class WeatherForecast\n    {\n    \u00a0\u00a0\u00a0\u00a0public DateTime Datetime { get; set; }\n    \u00a0\u00a0\u00a0\u00a0public string Temperature { get; set; }\n    \u00a0\u00a0\u00a0\u00a0public string Conditions { get; set; }\n    }\n    ```", "```cpp\n    dotnet add package CsvHelper\n    ```", "```cpp\n    public class WeatherForecastClassMap : ClassMap<WeatherForecast>\n    {\n    \u00a0\u00a0\u00a0\u00a0public WeatherForecastClassMap()\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Map(m => m.Datetime).Name(\"Date time\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Map(m => m.Temperature).Name(\"Temperature\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Map(m => m.Conditions).Name(\"Conditions\");\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cpp\n\u00a0\u00a0\u00a0\u00a0public interface IWeatherForecastProvider\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Task<WeatherForecast> GetCurrent(string location);\n\u00a0\u00a0\u00a0\u00a0}\n```", "```cpp\npublic class WeatherForecastProvider : IWeatherForecastProvider\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0private readonly HttpClient _client;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public WeatherForecastProvider(HttpClient client)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_client = client;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n```", "```cpp\npublic async Task<WeatherForecast> GetCurrent(string location)\n{\n```", "```cpp\nvar request = new HttpRequestMessage\n{\n\u00a0\u00a0\u00a0\u00a0\tMethod = HttpMethod.Get,\n\u00a0\u00a0\u00a0\u00a0\tRequestUri = new Uri($\"forecast?aggregateHours=1&location={location}&contentType=csv\", UriKind.Relative),\n};\n```", "```cpp\nusing var response = await _client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\n```", "```cpp\nvar body = await response.Content.ReadAsStringAsync();\nusing var reader = new StringReader(body);\nusing var csv = new CsvReader(reader, CultureInfo.InvariantCulture);\ncsv.Context.RegisterClassMap<WeatherForecastClassMap>();\n```", "```cpp\nvar forecasts = csv.GetRecords<WeatherForecast>();\n```", "```cpp\nreturn forecasts.First();\n}\n```", "```cpp\ndotnet add package Microsoft.AspNetCore.Mvc.NewtonsoftJson\n```", "```cpp\n.AddNewtonsoftJson();\n```", "```cpp\ndotnet add package AutoMapper.Extensions.Microsoft.DependencyInjection\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0public class WeatherForecastProfile : Profile\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public WeatherForecastProfile()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CreateMap<Dtos.WeatherForecast, Models.WeatherForecast>()\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.ForMember(to => to.TemperatureC, opt => opt.MapFrom(from => from.main.temp));\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0private static string BuildDescription(Dtos.WeatherForecast forecast)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return string.Join(\",\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0forecast.weather.Select(w => w.description));\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n```", "```cpp\n.ForMember(to => to.Summary, opt => opt.MapFrom(from => BuildDescription(from)))\n```", "```cpp\npublic static class MapperSetup\n{\n\u00a0\u00a0\u00a0\u00a0public static IServiceCollection AddModelMappings(this IServiceCollection services)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0services.AddAutoMapper(cfg =>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cfg.AddProfile<WeatherForecastProfile>();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return services;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0public static class HttpClientsSetup\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public static IServiceCollection AddHttpClients(IServiceCollection services)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n```", "```cpp\nservices.AddHttpClient<IWeatherForecastProvider, WeatherForecastProvider>((provider, client) =>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0client.BaseAddress = new Uri(config[\"WeatherForecastProviderUrl\"]);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var apiKey = Environment.GetEnvironmentVariable(\"x-rapidapi-key\", EnvironmentVariableTarget.User);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0client.DefaultRequestHeaders.Add(\"x-rapidapi-key\", apiKey);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n```", "```cpp\nreturn services;\n```", "```cpp\n.AddHttpClients(Configuration)\n```", "```cpp\npublic WeatherForecastService(..., IWeatherForecastProvider provider, IMapper mapper)\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public async Task<WeatherForecast> GetWeatherForecast(DateTime date)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const string DateFormat = \"yyyy-MM-ddthh\";\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var contains = _cache.TryGetValue(date.ToString(DateFormat), out var entry);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(contains){return (WeatherForecast)entry;}\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var forecastDto = await _provider.GetCurrent(_city);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var forecast = _mapper.Map<WeatherForecast>(forecastDto);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0forecast.Date = DateTime.UtcNow;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_cache.Set(DateTime.UtcNow.ToString(DateFormat), forecast);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return forecast;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n```", "```cpp\n{\"date\":\"2021-09-21T20:17:47.410549Z\",\"temperatureC\":25,\"temperatureF\":76,\"summary\":\"clear sky\"}\n```", "```cpp\n    public interface IFilesService\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Task Delete(string name);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Task Upload(string name, Stream content);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Task<byte[]> Download(string filename);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Uri GetDownloadLink(string filename);\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    FilesService.cs\n    public class FilesService : IFilesService\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0private readonly BlobServiceClient _blobServiceClient;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0private readonly BlobContainerClient _defaultContainerClient;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public FilesClient()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var endpoint = \"https://packtstorage2.blob.core.windows.net/\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var account = \"packtstorage2\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var key = Environment.GetEnvironmentVariable(\"BlobStorageKey\", EnvironmentVariableTarget.User);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var storageEndpoint = new Uri(endpoint);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var storageCredentials = new StorageSharedKeyCredential(account, key);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_blobServiceClient = new BlobServiceClient(storageEndpoint, storageCredentials);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_defaultContainerClient = CreateContainerIfNotExists(\"Exercise03).Result;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0private async Task<BlobContainerClient> CreateContainerIfNotExists(string container)\n    ```", "```cpp\nYou can find the complete code here: https://packt.link/fNQAX.\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var lowerCaseContainer = container.ToLower();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var containerClient = _blobServiceClient.GetBlobContainerClient(lowerCaseContainer);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!await containerClient.ExistsAsync())\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0containerClient = await _blobServiceClient.CreateBlobContainerAsync(lowerCaseContainer);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return containerClient;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n```", "```cpp\n    private static void ValidateFileExists(BlobClient blobClient)\n    {\n    \u00a0\u00a0\u00a0\u00a0if (!blobClient.Exists())\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw new FileNotFoundException($\"File {blobClient.Name} in default blob storage not found.\");\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cpp\n    public Task Delete(string name)\n    {\n    \u00a0\u00a0\u00a0\u00a0var blobClient = _defaultContainerClient.GetBlobClient(name);\n    \u00a0\u00a0\u00a0\u00a0ValidateFileExists(blobClient);\n    \u00a0\u00a0\u00a0\u00a0return blobClient.DeleteAsync();\n    }\n    ```", "```cpp\n    public Task UploadFile(string name, Stream content)\n    {\n    \u00a0\u00a0\u00a0\u00a0var blobClient = _defaultContainerClient.GetBlobClient(name);\n    \u00a0\u00a0\u00a0\u00a0return blobClient.UploadAsync(content, headers);\n    }\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public async Task<byte[]> Download(string filename)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var blobClient = _defaultContainerClient.GetBlobClient(filename);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var stream = new MemoryStream();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0await blobClient.DownloadToAsync(stream);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return stream.ToArray();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0private Uri GetUri(BlobClient blobClient)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var sasBuilder = new BlobSasBuilder\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0BlobContainerName = _defaultContainerClient.Name,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0BlobName = blobClient.Name,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Resource = \"b\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ExpiresOn = DateTimeOffset.UtcNow.AddHours(1)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sasBuilder.SetPermissions(BlobSasPermissions.Read);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var sasUri = blobClient.GenerateSasUri(sasBuilder);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return sasUri;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public Uri GetDownloadLink(string filename)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var blobClient = _defaultContainerClient.GetBlobClient(filename);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var url = GetUri(blobClient);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return url;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    opt.MapToStatusCode<FileNotFoundException>(404);\n    ```", "```cpp\n    public static class FileUploadServiceSetup\n    {\n    \u00a0\u00a0\u00a0\u00a0public static IServiceCollection AddFileUploadService(this IServiceCollection services)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0services.AddScoped<IFilesService, FilesService>();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return services;\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cpp\n    .AddFileUploadService();\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0[Route(\"api/[controller]\")]\n    \u00a0\u00a0\u00a0\u00a0[ApiController]\n    \u00a0\u00a0\u00a0\u00a0public class FileController : ControllerBase\n    \u00a0\u00a0\u00a0\u00a0{\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0private readonly IFilesService _filesService;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public FileController(IFilesService filesService)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_filesService = filesService;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[HttpDelete(\"{file}\")]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public async Task<IActionResult> Delete(string file)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0await _filesService.Delete(file);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return Ok();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    \u00a0\u00a0[HttpGet(\"Download/{file}\")]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public async Task<IActionResult> Download(string file)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var content = await _filesService.Download(file);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return new FileContentResult(content, \"application/octet-stream \");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[HttpGet(\"Link\")]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public IActionResult GetDownloadLink(string file)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var link = _filesService.GetDownloadLink(file);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return Ok(link);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[HttpPost(\"upload\")]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public async Task<IActionResult> Upload(IFormFile file)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0await _filesService.UploadFile(file.FileName, file.OpenReadStream());\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return Ok();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\ndotnet add package Microsoft.Identity.Web\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0public static class SecuritySetup\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public static IServiceCollection AddSecurity(this IServiceCollection services, IConfiguration configuration, IWebHostEnvironment env)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0services.AddMicrosoftIdentityWebApiAuthentication(configuration);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return services;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n```", "```cpp\n.AddSecurity()\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0app.UseAuthentication();\n\u00a0\u00a0\u00a0\u00a0app.UseAuthorization();\n```", "```cpp\n\u00a0\u00a0\"AzureAd\": {\n\u00a0\u00a0\u00a0\u00a0\"Instance\": \"https://login.microsoftonline.com/\",\n\u00a0\u00a0\u00a0\u00a0\"ClientId\": \"2d8834d3-6a27-47c9-84f1-0c9db3eeb4ba\",\n\u00a0\u00a0\u00a0\u00a0\"TenantId\": \"ddd0fd18-f056-4b33-88cc-088c47b81f3e\",\n\u00a0\u00a0\u00a0\u00a0\"Audience\": \"api://2d8834d3-6a27-47c9-84f1-0c9db3eeb4bb\"\n\u00a0\u00a0}\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0[Authorize]\n\u00a0\u00a0\u00a0\u00a0[ApiController]\n\u00a0\u00a0\u00a0\u00a0[RequiredScope(\"access_as_user\")]\n\u00a0\u00a0\u00a0\u00a0[Route(\"[controller]\")]\n\u00a0\u00a0\u00a0\u00a0public class WeatherForecastController : ControllerBase\n```", "```cpp\n    dotnet add package Microsoft.Identity.Client\n    ```", "```cpp\n    static IPublicClientApplication BuildAadClientApplication()\n    {\n    \u00a0\u00a0\u00a0\u00a0const string clientId = \"2d8834d3-6a27-47c9-84f1-0c9db3eeb4bb\"; // Service\n    \u00a0\u00a0\u00a0\u00a0const string tenantId = \"ddd0fd18-f056-4b33-88cc-088c47b81f3e\";\n    \u00a0\u00a0\u00a0\u00a0const string redirectUri = \"http://localhost:7022/token\";\n    \u00a0\u00a0\u00a0\u00a0string authority = string.Concat(\"https://login.microsoftonline.com/\", tenantId);\n    \u00a0\u00a0\u00a0\u00a0var application = PublicClientApplicationBuilder.Create(clientId)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.WithAuthority(authority)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.WithRedirectUri(redirectUri)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.Build();\n    \u00a0\u00a0\u00a0\u00a0return application;\n    }\n    ```", "```cpp\n    static async Task<string> GetTokenUsingAzurePortalAuth(IPublicClientApplication application)\n    {\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var scopes = new[] { $\"api://{clientId}/{scope}\" };\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0AuthenticationResult result;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0try\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var accounts = await application.GetAccountsAsync();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result = await application.AcquireTokenSilent(scopes, accounts.FirstOrDefault()).ExecuteAsync();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0catch (MsalUiRequiredException ex)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result = await application.AcquireTokenInteractive(scopes)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.WithClaims(ex.Claims)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.ExecuteAsync();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return result.AccessToken;\n    ```", "```cpp\n    var application = BuildAadClientApplication();\n    var token = await GetTokenUsingAzurePortalAuth(application);\n    Console.WriteLine($\"Bearer {token}\");\n    ```", "```cpp\nAuthentication complete. You can return to the application. Feel free to close this browser tab.\n```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cfg.AddSecurityDefinition(\"Bearer\", new OpenApiSecurityScheme()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Name = \"Authorization\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Type = SecuritySchemeType.ApiKey,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Scheme = \"Bearer\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0BearerFormat = \"JWT\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0In = ParameterLocation.Header,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Description = $\"Example: \\\"Bearer YOUR_TOKEN>\\\"\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cfg.AddSecurityRequirement(new OpenApiSecurityRequirement\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new OpenApiSecurityScheme\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Reference = new OpenApiReference\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Type = ReferenceType.SecurityScheme,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Id = \"Bearer\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new string[] {}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n    ```", "```cpp\n{\n\u00a0\u00a0\"Logging\": {\n\u00a0\u00a0\u00a0\u00a0\"LogLevel\": {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Default\": \"Trace\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Microsoft\": \"Trace\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Microsoft.Hosting.Lifetime\": \"Trace\"\n\u00a0\u00a0\u00a0\u00a0}\n  }\n}\n```", "```cpp\nAudience validation failed. Audiences: 'api://2d8834d3-6a27-47c9-84f1-0c9db3eeb4bb'. Did not match: validationParameters.ValidAudience: 'api://2d8834d3-6a27-47c9-84f1-0c9db3eeb4bc' or validationParameters.ValidAudiences: 'null'.\n```", "```cpp\n    namespace Pact.Function\n    {\n    \u00a0\u00a0\u00a0\u00a0public static class GetCurrentTime\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[Function(\"GetCurrentTime\")]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public static HttpResponseData Run([HttpTrigger(AuthorizationLevel.Anonymous, \"get\", \"post\")] HttpRequestData request,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0FunctionContext executionContext)\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var timezoneId = HttpUtility.ParseQueryString(request.Url.Query).Get(\"timezoneId\");\n    ```", "```cpp\n    var timezoneInfo = TimeZoneInfo.FindSystemTimeZoneById(timezoneId);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var time = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, timezoneInfo);\n    ```", "```cpp\n    var response = request.CreateResponse(HttpStatusCode.OK);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0response.Headers.Add(\"Content-Type\", \"text/plain; charset=utf-8\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0response.WriteString(time.ToString());\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return response;\n    }\n    ```", "```cpp\n2022-08-07 16:02:03\n```"]