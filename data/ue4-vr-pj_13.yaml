- en: Useful Mind Hacks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有用的思维技巧
- en: We've talked a lot throughout this book about ways to think about development,
    and we've suggested once or twice before that the factor that differentiates an
    effective developer from an amateur isn't so much what they know as how they think.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们一直在讨论开发思维的方式，并且曾经一两次提到，区分有效的开发者和业余开发者的因素不是他们知道什么，而是他们如何思考。
- en: Effective thinking is a skill, and, like any other, it can be practiced. As
    we saw in the last chapter, you can simplify a complicated problem by breaking
    it down and finding a starting point. Let's take a moment now to explore a few
    more tricks that can help.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 有效思考是一种技能，就像其他技能一样，它可以通过实践来提高。正如我们在上一章中所看到的，通过分解问题并找到一个起点，你可以简化一个复杂的问题。现在让我们花点时间来探索一些更多的技巧，这些技巧可以帮助你。
- en: Rubber-duck debugging
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 橡皮鸭调试
- en: You may have heard this phrase before: **rubber-duck debugging**. It's been
    around a long while and it's one of the most effective problem-solving tricks
    you can perform. The idea here is simple. Take anybody who will listen, and if
    there's nobody around, a rubber duck on your desk would do just as well (hence
    the name). Describe the problem you're trying to solve, out loud, and in simple
    terms. This forces you to organize your thoughts about the problem. If you find
    that you can't describe the problem in clear, simple terms, then you don't understand
    it yet. You're not ready to try to answer the question because you're not yet
    clear on what question you need to ask. Play with it and explore it until you
    really can phrase it in simple terms. Often, this process alone will suggest a
    clear solution to you, and if not, you now have a much better shot at finding
    a solution because you now know what question you're asking. Do this out loud
    or in writing. It's too easy to stay fuzzy and gloss over things when you let
    it tumble around in your mind. Force yourself to put the words in order. You'll
    be surprised by how powerful and effective this technique is.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能以前听过这个短语：“橡皮鸭调试”。它已经存在很长时间了，是你可以执行的最有效的解决问题的技巧之一。这里的想法很简单。找一个愿意倾听的人，如果周围没有人，桌子上的一个橡皮鸭也可以（因此得名）。大声地、用简单的语言描述你要解决的问题。这迫使你组织关于问题的思考。如果你发现自己无法用清晰简单的语言描述问题，那么你还没有理解它。你还没有准备好尝试回答这个问题，因为你还不清楚你需要问什么问题。尝试并探索它，直到你真正能用简单的语言表达出来。通常，仅仅这个过程就会给你提供一个清晰的解决方案，如果不行，你现在有更好的机会找到解决方案，因为你现在知道你在问什么问题。大声说出来或写下来。当你让它在脑海中翻滚时，很容易保持模糊和忽略细节。强迫自己把话放在一起。你会惊讶于这种技术的强大和有效。
- en: Just the facts
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 只说事实
- en: When you realize something is going wrong in your software, write down what
    you see happening. Not what you think you see happening—just what you see. It's
    far too easy in debugging to jump to a conclusion about why something is happening
    and then dive into trying to solve that problem before you've really ascertained
    what problem you actually have. Take a step back and just look at what you can
    concretely observe.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当你意识到软件出现问题时，写下你所看到的发生的事情。不是你认为你看到的事情，只是你看到的事情。在调试中，很容易对为什么会发生某事做出结论，然后在真正确定你实际遇到的问题之前，就开始试图解决这个问题。退一步，只看你能具体观察到的事情。
- en: Think like this: *That torch is appearing in the wrong position when it spawns*, as
    opposed to *The spawning routine is putting things in the wrong place*. You don't
    know that yet. You just know that one torch isn't where you expected it to be.
    Do an experiment. Spawn a different object. Does it appear in the right place?
    OK, then maybe there's a weird offset in your model. Another object is also out
    of position? OK, then, yes, it might be the routine that's spawning it. Or it
    might be some collision in your level that's keeping things from spawning where
    you want them and is shoving them to the closest available spot. Try moving the
    spawn point and see whether that changes things.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 像这样思考：“当火炬生成时，它出现在错误的位置”，而不是“生成例程将物体放在错误的位置”。你还不知道那个。你只知道一个火炬不在你期望的位置。做一个实验。生成一个不同的物体。它是否出现在正确的位置？好的，那么也许你的模型有一个奇怪的偏移量。另一个物体也不在正确的位置？好的，那么，是生成例程的问题。或者可能是你的关卡中的某个碰撞导致物体无法生成在你想要的位置，并将它们推到最近可用的位置。尝试移动生成点，看看是否会改变事情。
- en: See what we're doing here? We're applying a basic scientific method to the problem
    we're solving. What do we see? What can we think of that might be causing that?
    How could we test it to see whether we're right? What new information did our
    test just give us? Do we know enough to work on a solution now?
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 看到我们在这里做什么了吗？我们正在将基本的科学方法应用于我们正在解决的问题。我们看到了什么？我们能想到可能引起这个问题的原因吗？我们如何测试它以确定我们是否正确？我们的测试给我们带来了什么新信息？我们是否已经知道足够的信息来解决问题了？
- en: It's very very easy to jump to a conclusion and burn a lot of time debugging
    the wrong problem. Taking the time to take a step back will help to keep you from
    doing this and keep you from a lot of frustrated stabbing in the dark. You'll
    solve problems this way.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易就会得出结论并浪费很多时间来调试错误的问题。花时间退一步将有助于避免这种情况，并避免盲目尝试。通过这种方式，你将解决问题。
- en: Describing your solutions in positive terms
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用积极的方式描述你的解决方案
- en: We talked a bit about *cargo-cult programming* in [Chapter 10](9090733f-bb14-4203-836c-f1f8e3c00dbe.xhtml),
    *Creating a Multiplayer Experience in VR*, and made you promise not to do it.
    To take this idea further, let's look at a phrase we'd like you never to utter: *It
    works—don't touch it! *
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在第10章《在VR中创建多人体验》中稍微谈到了“模仿神秘仪式的编程”，并让你承诺不要这样做。为了进一步阐述这个想法，让我们看一下一个我们希望你永远不要说出口的短语：“它能用——别碰它！”
- en: 'This isn''t how we describe a robust system. If you feel tempted to say this,
    congratulations! You''re at step one of the *make it work; make it right; make
    it fast* process, and that means you''re not done. What you''ve created is a successful
    example of what your ultimate solution may look like, but now it''s time to start
    the *make it right* phase. You''ve met the requirements for this step of your
    development when you can give three answers about your solution in positive terms:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是我们描述一个健壮系统的方式。如果你感到诱惑说这样的话，恭喜你！你已经完成了“让它工作；让它正确；让它快速”的过程的第一步，这意味着你还没有完成。你所创建的是你最终解决方案的一个成功示例，但现在是时候开始“让它正确”的阶段了。当你能够用积极的方式回答关于你的解决方案的三个问题时，你已经满足了这个开发阶段的要求：
- en: It needs to solve X
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它需要解决X问题
- en: I know it solves X because....
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我知道它解决了X问题，因为……
- en: I know it's safe because....
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我知道这是安全的，因为……
- en: 'Remember these three statements. Don''t skip them. You should be able to describe
    in clear, simple terms what you''re trying to do. (Your rubber duck is a good
    listener for this too.) You should be able to explain why the thing you just did
    takes care of the thing you''re trying to do, and you should be able to do this
    in positive terms: *We needed to make sure the player can''t fire their weapon
    while the pause menu is up. This takes care of it by having the input handler
    check for a paused state before it calls the fire function.* Finally, you should
    be able to explain why this thing is safe to do: *I know this is safe because
    we''re ensuring that we clear any existing input when the pause state begins,
    and the input handler knows to allow only the unpause command through.*'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 记住这三个陈述。不要跳过它们。你应该能够用清晰简单的语言描述你想要做的事情。（你的橡皮鸭也是一个好的倾听者。）你应该能够解释为什么你刚刚做的事情能够解决你想要做的事情，并且你应该能够用积极的方式来做到这一点：*我们需要确保玩家在暂停菜单出现时不能开火。这通过输入处理程序在调用开火函数之前检查暂停状态来解决。*最后，你应该能够解释为什么这样做是安全的：*我知道这是安全的，因为我们确保在暂停状态开始时清除任何现有的输入，并且输入处理程序知道只允许取消暂停命令通过。*
- en: 'Discipline yourself to do this, and use clear, positive terms. If you''re being
    vague, you''re hiding from a thing you need to solve. Make this a habit: describe
    what you''re trying to do, why you know your solution does it, and why you know
    it''s safe to do it. You''ll head off a lot of bugs before they ever even have
    a chance to make it into your software this way.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 自律地做到这一点，并使用清晰、积极的术语。如果你含糊其辞，那就是在逃避你需要解决的问题。养成这样的习惯：描述你想要做的事情，为什么你知道你的解决方案能够做到这一点，以及为什么你知道这样做是安全的。这样做可以在软件中出现之前阻止很多错误。
- en: Plan how you're going to maintain and debug your code when you write it
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在编写代码时，计划如何维护和调试你的代码
- en: '**Technical debt** is an insidious thing. This term describes the downstream
    cost of fixing a mess that was left in the code, usually as a result of rushed
    development. And it''s a project-killer.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 技术债务是一种隐形的东西。这个术语描述了修复代码中留下的混乱所带来的下游成本，通常是由于匆忙开发而导致的。它是一个项目杀手。
- en: Let's say, for instance, that you needed to get something ready for a demo,
    and you ran out of time so you put in a hack solution. Then, you left it there
    and built a bunch of additional systems on top of it. Now, you're trying to get
    your game online, and the thing you did shows up incorrectly on the client, and
    you realize to your horror that you have to rewrite every one of those systems
    you built on top of that hack that went in for the demo, and, even worse, you
    realize it's going to take weeks of work to do this.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 比如说，你需要为演示准备一些东西，但时间不够，所以你采用了一个临时解决方案。然后，你把它留在那里，并在其上构建了一堆额外的系统。现在，你想要将你的游戏上线，但你所做的事情在客户端上显示不正确，你恐惧地意识到你必须重写那些在演示中使用的临时解决方案上构建的所有系统，更糟糕的是，你意识到这将需要数周的工作。
- en: Or, let's say you were in a hurry building your blueprint, and it works but
    looks like a clump of hair in a drain. You move on to the next problem. Six months
    later, you're about to demo the game for your publisher and a weird bug keeps
    happening in your system. You haven't looked at it since you wrote it, and now
    you're forced to spend all day and all night untangling the mess you made so you
    can figure out where the bug is happening.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，假设你在匆忙构建蓝图时，它能够工作，但看起来像排水管中的一团头发。你继续解决下一个问题。六个月后，你准备向出版商演示游戏，但系统中一直出现奇怪的错误。自从你写下它以来，你就没有再看过它，现在你被迫花费整天整夜来解决你制造的混乱，以便找出错误发生的位置。
- en: In both of these cases, you would have saved yourself a lot of time and heartache
    if you'd taken the time to clean up the work you did while it was fresh in your
    mind. If you absolutely have to hack, mark the hack as a hack, and if you know
    what the proper solution should really be, write it into a comment right next
    to the hack. And then fix it before you build anything else on top of it. If you've
    gotten a blueprint or a bit of code running, go straight into your *make it right* phase
    while everything you learned during your *make it work* phase is still fresh in
    your mind.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，如果你在事情还新鲜在脑海中的时候花时间整理你的工作，你将节省很多时间和痛苦。如果你绝对必须进行临时解决，将其标记为临时解决，并且如果你知道真正的解决方案应该是什么，就在临时解决方案旁边写入注释。然后在构建其他东西之前修复它。如果你已经运行了一个蓝图或一段代码，那么在你的“让它工作”阶段的一切都还新鲜在脑海中时，直接进入“让它正确”的阶段。
- en: 'Remember this truth: *The vast majority of the life cycle of a piece of code
    is spent maintaining and debugging it*. Drill this into your head. It''s much
    harder to debug code than it is to write it the first time, so give yourself every
    advantage you can. You are not saving yourself any time if you rush when you first
    write your solution. You''re saving time on the small part of its life and creating
    a big headache that will haunt you during the long part of its life. Plan for
    your code to be debugged when you write it. You''ll be happy you did.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 记住这个真理：“代码的绝大部分生命周期都是用来维护和调试的”。把这个铭记在心。调试代码比第一次编写代码要困难得多，所以尽可能给自己创造优势。如果你在第一次编写解决方案时匆忙行事，那么你并没有节省时间。你只是在它的生命周期的一小部分上节省了时间，却给自己带来了长时间的大麻烦。在编写代码时要为其进行调试做好计划。你会为此感到高兴的。
- en: Favor simple solutions
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 倾向于简单的解决方案
- en: Sadly, you're going to run into developers who write complicated, impenetrable
    code or blueprints in a mistaken effort to impress everyone else with how smart
    they are. They're secretly fantasizing that someone else is going to look over
    their shoulder at their unreadable code and think, *Wow! They must be so smart!
    I can't read any of that.* Please, oh please, don't be this developer.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，你会遇到那些写复杂、难以理解的代码或蓝图的开发者，他们错误地试图用这种方式给其他人留下智商有多高的印象。他们暗自幻想着其他人会看着他们难以阅读的代码，然后想，“哇！他们一定很聪明！我一个字都看不懂。”拜托，请不要成为这样的开发者。
- en: The experienced developers whose respect you really want won't be impressed
    by a shambolic blueprint or obfuscated code. They'll wonder why you left it in
    such a mess and assume that it's because you didn't know any better. Amateurs
    write unreadable code. Pros know they're going to have to maintain it a year from
    now when they've forgotten everything about it, and they don't want to make that
    job any harder than it has to be.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 那些你真正想要得到尊重的经验丰富的开发者不会对一个混乱的蓝图或晦涩难懂的代码印象深刻。他们会想知道为什么你把它留在这样的混乱中，并认为这是因为你不知道更好的方法。业余者写出难以阅读的代码，而专业人士知道他们将来一年都要维护这些代码，而且他们不想让这项工作变得更加困难。
- en: You'll know you're doing it well if your *make it right* draft is simpler and
    cleaner than your *make it work* draft was.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的“做对”草稿比你的“让它工作”草稿更简单、更清晰，那么你就知道你做得很好了。
- en: Look it up before you make it up
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在你创造之前先查一下
- en: 'We mentioned this in [Chapter 10](9090733f-bb14-4203-836c-f1f8e3c00dbe.xhtml),
    *Creating a Multiplayer Experience in VR*, and want to reiterate it here: one
    of the core mistakes new developers make is failing to do research before they
    dive into a problem, and they wind up rewriting code that''s already been written.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在《第10章》中提到了这一点，即在VR中创建多人体验，并希望在这里重申：新开发者常犯的一个核心错误是在解决问题之前没有进行研究，结果他们不得不重写已经存在的代码。
- en: Do your homework. When you're trying to solve a problem, before you start hacking
    away at it, see whether anybody else has tacked anything similar and left footprints
    behind. Is there already a tool in the engine that does this or does most of it?
    Are there examples in the templates or the sample projects that show how it can
    be solved? Has someone written a tutorial somewhere? Sometimes, the answer is
    going to be *no*, but far more often, you're going to find something that either
    points you directly toward a solution or gets you closer than you would have gotten
    without it.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 做好功课。当你试图解决一个问题时，在你开始动手之前，看看是否有其他人解决过类似的问题并留下了足迹。引擎中是否已经有一个可以完成这个任务或大部分任务的工具？模板或示例项目中是否有示例展示如何解决这个问题？是否有人在某个地方写了一个教程？有时候，答案可能是否定的，但更常见的情况是，你会找到一些直接指向解决方案或让你更接近解决方案的东西。
- en: We once saw a small team of engineers waste weeks of development budget on a
    problem that had already been solved with a single function in a freely-licensed
    plugin. That's time that didn't go into making the game better, and you don't
    need to fall into this trap. Research is part of your development process and
    should always happen before you start typing or dragging nodes.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们曾经看到一个小团队的工程师们在一个已经通过一个自由许可插件的单个函数解决的问题上浪费了几周的开发预算。这是没有用于改进游戏的时间，你不需要陷入这个陷阱。研究是你开发过程的一部分，应该在你开始输入或拖动节点之前进行。
- en: This leads us right into our next topic of discussion where can you look when
    you need to find information?
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这就引出了我们下一个讨论主题：当你需要找到信息时，你可以去哪里寻找？
