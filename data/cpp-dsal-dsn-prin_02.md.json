["```cpp\n    #include <iostream>\n    #include <queue>\n    ```", "```cpp\n    struct node\n    {\n    \u00a0\u00a0\u00a0\u00a0std::string position;\n    \u00a0\u00a0\u00a0\u00a0node *first, *second;\n    };\n    ```", "```cpp\n    struct org_tree\n    {\n    \u00a0\u00a0\u00a0\u00a0node *root;\n    ```", "```cpp\n    static org_tree create_org_structure(const std::string& pos)\n    {\n    \u00a0\u00a0\u00a0\u00a0org_tree tree;\n    \u00a0\u00a0\u00a0\u00a0tree.root = new node{pos, NULL, NULL};\n    \u00a0\u00a0\u00a0\u00a0return tree;\n    }\n    ```", "```cpp\n    static node* find(node* root, const std::string& value)\n    {\n    \u00a0\u00a0\u00a0\u00a0if(root == NULL)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return NULL;\n    \u00a0\u00a0\u00a0\u00a0if(root->position == value)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return root;\n    \u00a0\u00a0\u00a0\u00a0auto firstFound = org_tree::find(root->first, value);\n    \u00a0\u00a0\u00a0\u00a0if(firstFound != NULL)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return firstFound;\n    \u00a0\u00a0\u00a0\u00a0return org_tree::find(root->second, value);\n    }\n    ```", "```cpp\n    bool addSubordinate(const std::string& manager, const std::string& subordinate)\n    {\n    \u00a0\u00a0\u00a0\u00a0auto managerNode = org_tree::find(root, manager);\n    \u00a0\u00a0\u00a0\u00a0if(!managerNode)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"No position named \" << manager << std::endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return false;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0if(managerNode->first && managerNode->second)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << manager << \" already has 2 subordinates.\" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return false;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0if(!managerNode->first)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0managerNode->first = new node{subordinate, NULL, NULL};\n    \u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0managerNode->second = new node{subordinate, NULL, NULL};\n    \u00a0\u00a0\u00a0\u00a0return true;\n    }\n    };\n    ```", "```cpp\n    int main()\n    {\n    \u00a0\u00a0\u00a0\u00a0auto tree = org_tree::create_org_structure(\"CEO\");\n    \u00a0\u00a0\u00a0\u00a0if(tree.addSubordinate(\"CEO\", \"Deputy Director\"))\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Added Deputy Director in the tree.\" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Couldn't add Deputy Director in the tree\" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0if(tree.addSubordinate(\"Deputy Director\", \"IT Head\"))\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Added IT Head in the tree.\" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Couldn't add IT Head in the tree\" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0if(tree.addSubordinate(\"Deputy Director\", \"Marketing Head\"))\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Added Marketing Head in the tree.\" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Couldn't add Marketing Head in the tree\" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0if(tree.addSubordinate(\"IT Head\", \"Security Head\"))\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Added Security Head in the tree.\" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Couldn't add Security Head in the tree\" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0if(tree.addSubordinate(\"IT Head\", \"App Development Head\"))\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Added App Development Head in the tree.\" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Couldn't add App Development Head in the tree\" << std::endl;\n    if(tree.addSubordinate(\"Marketing Head\", \"Logistics Head\"))\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Added Logistics Head in the tree.\" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Couldn't add Logistics Head in the tree\" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0if(tree.addSubordinate(\"Marketing Head\", \"Public Relations Head\"))\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Added Public Relations Head in the tree.\" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Couldn't add Public Relations Head in the tree\" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0if(tree.addSubordinate(\"Deputy Director\", \"Finance Head\"))\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Added Finance Head in the tree.\" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Couldn't add Finance Head in the tree\" << std::endl;\n    }\n    ```", "```cpp\n    Added Deputy Director in the tree.\n    Added IT Head in the tree.\n    Added Marketing Head in the tree.\n    Added Security Head in the tree.\n    Added App Development Head in the tree.\n    Added Logistics Head in the tree.\n    Added Public Relations Head in the tree.\n    Deputy Director already has 2 subordinates.\n    Couldn't add Finance Head in the tree\n    ```", "```cpp\n    CEO, Deputy Director, IT Head, Security Head, App Development Head, Marketing Head, Logistics Head, Public Relations Head,\n    ```", "```cpp\n    static void preOrder(node* start)\n    {\n    \u00a0\u00a0\u00a0\u00a0if(!start)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return;\n    \u00a0\u00a0\u00a0\u00a0std::cout << start->position << \", \";\n    \u00a0\u00a0\u00a0\u00a0preOrder(start->first);\n    \u00a0\u00a0\u00a0\u00a0preOrder(start->second);\n    }\n    ```", "```cpp\n    Security Head, IT Head, App Development Head, Deputy Director, Logistics Head, Marketing Head, Public Relations Head, CEO, \n    ```", "```cpp\n    static void inOrder(node* start)\n    {\n    \u00a0\u00a0\u00a0\u00a0if(!start)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return;\n    \u00a0\u00a0\u00a0\u00a0inOrder(start->first);\n    std::cout << start->position << \", \";\n    \u00a0\u00a0\u00a0\u00a0inOrder(start->second);\n    }\n    ```", "```cpp\n    Security Head, App Development Head, IT Head, Logistics Head, Public Relations Head, Marketing Head, Deputy Director, CEO, \n    ```", "```cpp\n    static void postOrder(node* start)\n    {\n    \u00a0\u00a0\u00a0\u00a0if(!start)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return;\n    \u00a0\u00a0\u00a0\u00a0postOrder(start->first);\n    \u00a0\u00a0\u00a0\u00a0postOrder(start->second);\n    \u00a0\u00a0\u00a0\u00a0std::cout << start->position << \", \";\n    }\n    ```", "```cpp\n    CEO, \n    Deputy Director, \n    IT Head, Marketing Head, \n    Security Head, App Development Head, Logistics Head, Public Relations Head, \n    ```", "```cpp\n    static void levelOrder(node* start)\n    {\n    \u00a0\u00a0\u00a0\u00a0if(!start)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return;\n    \u00a0\u00a0\u00a0\u00a0std::queue<node*> q;\n    \u00a0\u00a0\u00a0\u00a0q.push(start);\n    \u00a0\u00a0\u00a0\u00a0while(!q.empty())\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int size = q.size();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for(int i = 0; i < size; i++)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0auto current = q.front();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0q.pop();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << current->position << \", \";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(current->first)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0q.push(current->first);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(current->second)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0q.push(current->second);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << std::endl;\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cpp\n    CEO, \n    Deputy Director, \n    IT Head, Marketing Head, \n    Security Head, App Development Head, Logistics Head, Public Relations Head, \n    ```", "```cpp\n    #include <iostream>\n    ```", "```cpp\n    struct node\n    {\n    \u00a0\u00a0\u00a0\u00a0int data;\n    \u00a0\u00a0\u00a0\u00a0node *left, *right;\n    };\n    ```", "```cpp\n    struct bst\n    {\n    \u00a0\u00a0\u00a0\u00a0node* root = nullptr;\n    ```", "```cpp\n    node* find(int value)\n    {\n    \u00a0\u00a0\u00a0\u00a0return find_impl(root, value);\n    }\n    \u00a0\u00a0\u00a0\u00a0private:\n    node* find_impl(node* current, int value)\n    {\n    \u00a0\u00a0\u00a0\u00a0if(!current)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << std::endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return NULL;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0if(current->data == value)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Found \" << value << std::endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return current;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0if(value < current->data)\u00a0\u00a0// Value will be in the left subtree\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Going left from \" << current->data << \", \";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return find_impl(current->left, value);\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0if(value > current->data) // Value will be in the right subtree\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Going right from \" << current->data << \", \";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return find_impl(current->right, value);\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cpp\n    public:\n    void insert(int value)\n    {\n    \u00a0\u00a0\u00a0\u00a0if(!root)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0root = new node{value, NULL, NULL};\n    \u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0insert_impl(root, value);\n    }\n    private:\n    void insert_impl(node* current, int value)\n    {\n    \u00a0\u00a0\u00a0\u00a0if(value < current->data)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(!current->left)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0current->left = new node{value, NULL, NULL};\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0insert_impl(current->left, value);\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(!current->right)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0current->right = new node{value, NULL, NULL};\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0insert_impl(current->right, value);\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cpp\n    public:\n    void inorder()\n    {\n    \u00a0\u00a0\u00a0\u00a0inorder_impl(root);\n    }\n    private:\n    void inorder_impl(node* start)\n    {\n    \u00a0\u00a0\u00a0\u00a0if(!start)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return;\n    \u00a0\u00a0\u00a0\u00a0inorder_impl(start->left);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Visit the left sub-tree\n    \u00a0\u00a0\u00a0\u00a0std::cout << start->data << \" \";\u00a0\u00a0// Print out the current node\n    \u00a0\u00a0\u00a0\u00a0inorder_impl(start->right);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Visit the right sub-tree\n    }\n    ```", "```cpp\n    public:\n    node* successor(node* start)\n    {\n    \u00a0\u00a0\u00a0\u00a0auto current = start->right;\n    \u00a0\u00a0\u00a0\u00a0while(current && current->left)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0current = current->left;\n    \u00a0\u00a0\u00a0\u00a0return current;\n    }\n    ```", "```cpp\n    void deleteValue(int value)\n    {\n    \u00a0\u00a0\u00a0\u00a0root = delete_impl(root, value);\n    }\n    private:\n    node* delete_impl(node* start, int value)\n    {\n    \u00a0\u00a0\u00a0\u00a0if(!start)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return NULL;\n    \u00a0\u00a0\u00a0\u00a0if(value < start->data)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0start->left = delete_impl(start->left, value);\n    \u00a0\u00a0\u00a0\u00a0else if(value > start->data)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0start->right = delete_impl(start->right, value);\n    \u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(!start->left)\u00a0\u00a0// Either both children are absent or only left child is absent\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0auto tmp = start->right;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0delete start;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return tmp;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(!start->right)\u00a0\u00a0// Only right child is absent\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0auto tmp = start->left;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0delete start;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return tmp;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0auto succNode = successor(start);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0start->data = succNode->data;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Delete the successor from right subtree, since it will always be in the right subtree\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0start->right = delete_impl(start->right, succNode->data);\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0return start;\n    }\n    };\n    ```", "```cpp\n    int main()\n    {\n    \u00a0\u00a0\u00a0\u00a0bst tree;\n    \u00a0\u00a0\u00a0\u00a0tree.insert(12);\n    \u00a0\u00a0\u00a0\u00a0tree.insert(10);\n    \u00a0\u00a0\u00a0\u00a0tree.insert(20);\n    \u00a0\u00a0\u00a0\u00a0tree.insert(8);\n    \u00a0\u00a0\u00a0\u00a0tree.insert(11);\n    \u00a0\u00a0\u00a0\u00a0tree.insert(15);\n    \u00a0\u00a0\u00a0\u00a0tree.insert(28);\n    \u00a0\u00a0\u00a0\u00a0tree.insert(4);\n    \u00a0\u00a0\u00a0\u00a0tree.insert(2);\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"Inorder: \";\n    \u00a0\u00a0\u00a0\u00a0tree.inorder();\u00a0\u00a0// This will print all the elements in ascending order\n    \u00a0\u00a0\u00a0\u00a0std::cout << std::endl;\n    \u00a0\u00a0\u00a0\u00a0tree.deleteValue(12);\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"Inorder after deleting 12: \";\n    \u00a0\u00a0\u00a0\u00a0tree.inorder();\u00a0\u00a0// This will print all the elements in ascending order\n    \u00a0\u00a0\u00a0\u00a0std::cout << std::endl;\n    \u00a0\u00a0\u00a0\u00a0if(tree.find(12))\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Element 12 is present in the tree\" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Element 12 is NOT present in the tree\" << std::endl;\n    }\n    ```", "```cpp\n    Inorder: 2 4 8 10 11 12 15 20 28 \n    Inorder after deleting 12: 2 4 8 10 11 15 20 28 \n    Going left from 15, Going right from 10, Going right from 11, \n    Element 12 is NOT present in the tree\n    ```", "```cpp\nbst tree;\ntree.insert(10);\ntree.insert(9);\ntree.insert(11);\ntree.insert(8);\ntree.insert(7);\ntree.insert(6);\ntree.insert(5);\ntree.insert(4);\n```", "```cpp\nbst tree;\ntree.insert(7);\ntree.insert(5);\ntree.insert(9);\ntree.insert(4);\ntree.insert(6);\ntree.insert(10);\ntree.insert(11);\ntree.insert(8);\n```", "```cpp\nstruct nTree\n{\n\u00a0\u00a0\u00a0\u00a0int data;\n\u00a0\u00a0\u00a0\u00a0std::vector<nTree*> children;\n};\n```", "```cpp\n    #include <iostream>\n    #include <queue>\n    #include <vector>\n    ```", "```cpp\n    struct median\n    {\n    \u00a0\u00a0\u00a0\u00a0std::priority_queue<int> maxHeap;\n    \u00a0\u00a0\u00a0\u00a0std::priority_queue<int, std::vector<int>, std::greater<int>> minHeap;\n    ```", "```cpp\n    void insert(int data)\n    {\n    \u00a0\u00a0\u00a0\u00a0// First element\n    \u00a0\u00a0\u00a0\u00a0if(maxHeap.size() == 0)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0maxHeap.push(data);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0if(maxHeap.size() == minHeap.size())\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(data <= get())\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0maxHeap.push(data);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0minHeap.push(data);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0if(maxHeap.size() < minHeap.size())\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(data > get())\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0maxHeap.push(minHeap.top());\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0minHeap.pop();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0minHeap.push(data);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0maxHeap.push(data);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0if(data < get())\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0minHeap.push(maxHeap.top());\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0maxHeap.pop();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0maxHeap.push(data);\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0minHeap.push(data);\n    }\n    ```", "```cpp\n    double get()\n    {\n    \u00a0\u00a0\u00a0\u00a0if(maxHeap.size() == minHeap.size())\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return (maxHeap.top() + minHeap.top()) / 2.0;\n    \u00a0\u00a0\u00a0\u00a0if(maxHeap.size() < minHeap.size())\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return minHeap.top();\n    \u00a0\u00a0\u00a0\u00a0return maxHeap.top();\n    }\n    };\n    ```", "```cpp\n    int main()\n    {\n    \u00a0\u00a0\u00a0\u00a0median med;\n    \u00a0\u00a0\u00a0\u00a0med.insert(1);\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"Median after insert 1: \" << med.get() << std::endl;\n    \u00a0\u00a0\u00a0\u00a0med.insert(5);\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"Median after insert 5: \" << med.get() << std::endl;\n    \u00a0\u00a0\u00a0\u00a0med.insert(2);\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"Median after insert 2: \" << med.get() << std::endl;\n    \u00a0\u00a0\u00a0\u00a0med.insert(10);\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"Median after insert 10: \" << med.get() << std::endl;\n    \u00a0\u00a0\u00a0\u00a0med.insert(40);\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"Median after insert 40: \" << med.get() << std::endl;\n    \u00a0\u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```cpp\n    Median after insert 1: 1\n    Median after insert 5: 3\n    Median after insert 2: 2\n    Median after insert 10: 3.5\n    Median after insert 40: 5\n    ```", "```cpp\n    #include <iostream>\n    #include <vector>\n    ```", "```cpp\n    enum class city: int\n    {\n    \u00a0\u00a0\u00a0\u00a0LONDON,\n    \u00a0\u00a0\u00a0\u00a0MOSCOW,\n    \u00a0\u00a0\u00a0\u00a0ISTANBUL,\n    \u00a0\u00a0\u00a0\u00a0DUBAI,\n    \u00a0\u00a0\u00a0\u00a0MUMBAI,\n    \u00a0\u00a0\u00a0\u00a0SEATTLE,\n    \u00a0\u00a0\u00a0\u00a0SINGAPORE\n    };\n    ```", "```cpp\n    std::ostream& operator<<(std::ostream& os, const city c)\n    {\n    \u00a0\u00a0\u00a0\u00a0switch(c)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case city::LONDON:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os << \"LONDON\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return os;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case city::MOSCOW:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os << \"MOSCOW\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return os;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case city::ISTANBUL:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os << \"ISTANBUL\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return os;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case city::DUBAI:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os << \"DUBAI\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return os;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case city::MUMBAI:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os << \"MUMBAI\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return os;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case city::SEATTLE:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os << \"SEATTLE\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return os;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case city::SINGAPORE:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os << \"SINGAPORE\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return os;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0default:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return os;\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cpp\n    struct graph\n    {\n    \u00a0\u00a0\u00a0\u00a0std::vector<std::vector<int>> data;\n    ```", "```cpp\n    graph(int n)\n    {\n    \u00a0\u00a0\u00a0\u00a0data.reserve(n);\n    \u00a0\u00a0\u00a0\u00a0std::vector<int> row(n);\n    \u00a0\u00a0\u00a0\u00a0std::fill(row.begin(), row.end(), -1);\n    \u00a0\u00a0\u00a0\u00a0for(int i = 0; i < n; i++)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data.push_back(row);\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cpp\n    void addEdge(const city c1, const city c2, int dis)\n    {\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"ADD: \" << c1 << \"-\" << c2 << \"=\" << dis << std::endl;\n    \u00a0\u00a0\u00a0\u00a0auto n1 = static_cast<int>(c1);\n    \u00a0\u00a0\u00a0\u00a0auto n2 = static_cast<int>(c2);\n    \u00a0\u00a0\u00a0\u00a0data[n1][n2] = dis;\n    \u00a0\u00a0\u00a0\u00a0data[n2][n1] = dis;\n    }\n    ```", "```cpp\n    void removeEdge(const city c1, const city c2)\n    {\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"REMOVE: \" << c1 << \"-\" << c2 << std::endl;\n    \u00a0\u00a0\u00a0\u00a0auto n1 = static_cast<int>(c1);\n    \u00a0\u00a0\u00a0\u00a0auto n2 = static_cast<int>(c2);\n    \u00a0\u00a0\u00a0\u00a0data[n1][n2] = -1;\n    \u00a0\u00a0\u00a0\u00a0data[n2][n1] = -1;\n    }\n    };\n    ```", "```cpp\n    int main()\n    {\n    \u00a0\u00a0\u00a0\u00a0graph g(7);\n    \u00a0\u00a0\u00a0\u00a0g.addEdge(city::LONDON, city::MOSCOW, 900);\n    \u00a0\u00a0\u00a0\u00a0g.addEdge(city::LONDON, city::ISTANBUL, 500);\n    \u00a0\u00a0\u00a0\u00a0g.addEdge(city::LONDON, city::DUBAI, 1000);\n    \u00a0\u00a0\u00a0\u00a0g.addEdge(city::ISTANBUL, city::MOSCOW, 1000);\n    \u00a0\u00a0\u00a0\u00a0g.addEdge(city::ISTANBUL, city::DUBAI, 500);\n    \u00a0\u00a0\u00a0\u00a0g.addEdge(city::DUBAI, city::MUMBAI, 200);\n    \u00a0\u00a0\u00a0\u00a0g.addEdge(city::ISTANBUL, city::SEATTLE, 1500);\n    \u00a0\u00a0\u00a0\u00a0g.addEdge(city::DUBAI, city::SINGAPORE, 500);\n    \u00a0\u00a0\u00a0\u00a0g.addEdge(city::MOSCOW, city::SEATTLE, 1000);\n    \u00a0\u00a0\u00a0\u00a0g.addEdge(city::MUMBAI, city::SINGAPORE, 300);\n    \u00a0\u00a0\u00a0\u00a0g.addEdge(city::SEATTLE, city::SINGAPORE, 700);\n    \u00a0\u00a0\u00a0\u00a0g.addEdge(city::SEATTLE, city::LONDON, 1800);\n    \u00a0\u00a0\u00a0\u00a0g.removeEdge(city::SEATTLE, city::LONDON);\n    \u00a0\u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```cpp\n    ADD: LONDON-MOSCOW=900\n    ADD: LONDON-ISTANBUL=500\n    ADD: LONDON-DUBAI=1000\n    ADD: ISTANBUL-MOSCOW=1000\n    ADD: ISTANBUL-DUBAI=500\n    ADD: DUBAI-MUMBAI=200\n    ADD: ISTANBUL-SEATTLE=1500\n    ADD: DUBAI-SINGAPORE=500\n    ADD: MOSCOW-SEATTLE=1000\n    ADD: MUMBAI-SINGAPORE=300\n    ADD: SEATTLE-SINGAPORE=700\n    ADD: SEATTLE-LONDON=1800\n    REMOVE: SEATTLE-LONDON\n    ```", "```cpp\n    #include <iostream>\n    #include <vector>\n    #include <algorithm>\n    ```", "```cpp\n    enum class city: int\n    {\n    \u00a0\u00a0\u00a0\u00a0MOSCOW,\n    \u00a0\u00a0\u00a0\u00a0LONDON,\n    \u00a0\u00a0\u00a0\u00a0ISTANBUL,\n    \u00a0\u00a0\u00a0\u00a0SEATTLE,\n    \u00a0\u00a0\u00a0\u00a0DUBAI,\n    \u00a0\u00a0\u00a0\u00a0MUMBAI,\n    \u00a0\u00a0\u00a0\u00a0SINGAPORE\n    };\n    ```", "```cpp\n    std::ostream& operator<<(std::ostream& os, const city c)\n    {\n    \u00a0\u00a0\u00a0\u00a0switch(c)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case city::MOSCOW:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os << \"MOSCOW\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return os;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case city::LONDON:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os << \"LONDON\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return os;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case city::ISTANBUL:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os << \"ISTANBUL\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return os;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case city::SEATTLE:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os << \"SEATTLE\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return os;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case city::DUBAI:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os << \"DUBAI\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return os;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case city::MUMBAI:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os << \"MUMBAI\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return os;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case city::SINGAPORE:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os << \"SINGAPORE\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return os;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0default:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return os;\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cpp\n    struct graph\n    {\n    \u00a0\u00a0\u00a0\u00a0std::vector<std::vector<std::pair<int, int>>> data;\n    ```", "```cpp\n    graph(int n)\n    {\n    \u00a0\u00a0\u00a0\u00a0data = std::vector<std::vector<std::pair<int, int>>>(n, std::vector<std::pair<int, int>>());\n    }\n    ```", "```cpp\n    void addEdge(const city c1, const city c2, int dis)\n    {\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"ADD: \" << c1 << \"-\" << c2 << \"=\" << dis << std::endl;\n    \u00a0\u00a0\u00a0\u00a0auto n1 = static_cast<int>(c1);\n    \u00a0\u00a0\u00a0\u00a0auto n2 = static_cast<int>(c2);\n    \u00a0\u00a0\u00a0\u00a0data[n1].push_back({n2, dis});\n    \u00a0\u00a0\u00a0\u00a0data[n2].push_back({n1, dis});\n    }\n    ```", "```cpp\n    void removeEdge(const city c1, const city c2)\n    {\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"REMOVE: \" << c1 << \"-\" << c2 << std::endl;\n    \u00a0\u00a0\u00a0\u00a0auto n1 = static_cast<int>(c1);\n    \u00a0\u00a0\u00a0\u00a0auto n2 = static_cast<int>(c2);\n    \u00a0\u00a0\u00a0\u00a0std::remove_if(data[n1].begin(), data[n1].end(), [n2](const auto& pair)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return pair.first == n2;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0\u00a0\u00a0std::remove_if(data[n2].begin(), data[n2].end(), [n1](const auto& pair)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return pair.first == n1;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n    }\n    };\n    ```", "```cpp\n    int main()\n    {\n    \u00a0\u00a0\u00a0\u00a0graph g(7);\n    \u00a0\u00a0\u00a0\u00a0g.addEdge(city::LONDON, city::MOSCOW, 900);\n    \u00a0\u00a0\u00a0\u00a0g.addEdge(city::LONDON, city::ISTANBUL, 500);\n    \u00a0\u00a0\u00a0\u00a0g.addEdge(city::LONDON, city::DUBAI, 1000);\n    \u00a0\u00a0\u00a0\u00a0g.addEdge(city::ISTANBUL, city::MOSCOW, 1000);\n    \u00a0\u00a0\u00a0\u00a0g.addEdge(city::ISTANBUL, city::DUBAI, 500);\n    \u00a0\u00a0\u00a0\u00a0g.addEdge(city::DUBAI, city::MUMBAI, 200);\n    \u00a0\u00a0\u00a0\u00a0g.addEdge(city::ISTANBUL, city::SEATTLE, 1500);\n    \u00a0\u00a0\u00a0\u00a0g.addEdge(city::DUBAI, city::SINGAPORE, 500);\n    \u00a0\u00a0\u00a0\u00a0g.addEdge(city::MOSCOW, city::SEATTLE, 1000);\n    \u00a0\u00a0\u00a0\u00a0g.addEdge(city::MUMBAI, city::SINGAPORE, 300);\n    \u00a0\u00a0\u00a0\u00a0g.addEdge(city::SEATTLE, city::SINGAPORE, 700);\n    \u00a0\u00a0\u00a0\u00a0g.addEdge(city::SEATTLE, city::LONDON, 1800);\n    \u00a0\u00a0\u00a0\u00a0g.removeEdge(city::SEATTLE, city::LONDON);\n    \u00a0\u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```cpp\n    ADD: LONDON-MOSCOW=900\n    ADD: LONDON-ISTANBUL=500\n    ADD: LONDON-DUBAI=1000\n    ADD: ISTANBUL-MOSCOW=1000\n    ADD: ISTANBUL-DUBAI=500\n    ADD: DUBAI-MUMBAI=200\n    ADD: ISTANBUL-SEATTLE=1500\n    ADD: DUBAI-SINGAPORE=500\n    ADD: MOSCOW-SEATTLE=1000\n    ADD: MUMBAI-SINGAPORE=300\n    ADD: SEATTLE-SINGAPORE=700\n    ADD: SEATTLE-LONDON=1800\n    REMOVE: SEATTLE-LONDON\n    ```"]