- en: Scheduling
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调度
- en: 'System programming is about interacting with the underlying OS. The scheduler
    is one of the core components of every OS and impacts the way processes are allocated
    on CPUs. Ultimately, this is what the end user is concerned about: processes running
    smoothly and with correct priority over other processes. This chapter will teach
    you the practical skills you need in order to interact with the scheduler by changing
    the process'' policy, its `nice` value, the real-time priority, processor affinity,
    and how real-time processes can **yield** the processor.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 系统编程涉及与底层操作系统的交互。调度程序是每个操作系统的核心组件之一，影响进程在CPU上的分配方式。最终，这是最终用户关心的：进程顺利运行，并且具有正确的优先级超过其他进程。本章将教会您与调度程序交互所需的实际技能，方法包括更改进程的策略、其`nice`值、实时优先级、处理器亲和力，以及实时进程如何**让出**处理器。
- en: 'This chapter will cover the following recipes:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下示例：
- en: Learning to set and get a scheduler policy
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习设置和获取调度程序策略
- en: Learning to get the timeslice value
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习获取时间片值
- en: Learning how to set a nice value
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何设置nice值
- en: Learning how to yield the processor
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何让出处理器
- en: Learning about processor affinity
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解处理器亲和力
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To try out the programs in this chapter, we've set up a Docker image that contains
    all the tools and libraries we'll need throughout this book. It is based on Ubuntu
    19.04.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了尝试本章中的程序，我们设置了一个Docker镜像，其中包含本书中将需要的所有工具和库。它基于Ubuntu 19.04。
- en: 'To set it up, follow these steps:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置它，请按照以下步骤进行：
- en: Download and install Docker Engine from [www.docker.com](https://www.docker.com/).
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[www.docker.com](https://www.docker.com/)下载并安装Docker Engine。
- en: Pull the image from Docker Hub: `docker pull kasperondocker/system_programming_cookbook:latest`.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Docker Hub拉取镜像：`docker pull kasperondocker/system_programming_cookbook:latest`。
- en: The image should now be available. Type in the following command to view the
    image: `docker images`.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 镜像现在应该可用。输入以下命令查看镜像：`docker images`。
- en: 'You should have the following image: `kasperondocker/system_programming_cookbook`.'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该有以下镜像：`kasperondocker/system_programming_cookbook`。
- en: Run the Docker image with an interactive shell with the help of the `docker
    run -it --cpu-rt-runtime=95000 --ulimit rtprio=99 --cap add=sys_nice kasperondocker/system_programming_cookbook:latest /bin/bash` command.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`docker run -it --cpu-rt-runtime=95000 --ulimit rtprio=99 --cap add=sys_nice
    kasperondocker/system_programming_cookbook:latest /bin/bash`命令以交互式shell运行Docker镜像。
- en: The shell on the running container is now available. Use `root@39a5a8934370/#
    cd /BOOK/` to get all the programs that have been developed for this book.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正在运行的容器上现在可用shell。使用`root@39a5a8934370/# cd /BOOK/`获取为本书开发的所有程序。
- en: The `--cpu-rt-runtime=95000`, `--ulimit rtprio=99`, and `--cap add=sys_nice` arguments are
    needed to allow the software written in Docker to set the scheduler parameters.
    If the host machine has been configured correctly, the software won't have any
    issues.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`--cpu-rt-runtime=95000`、`--ulimit rtprio=99`和`--cap add=sys_nice`参数是为了允许在Docker中编写的软件设置调度程序参数。如果主机已正确配置，软件将不会有任何问题。'
- en: '**Disclaimer**: The C++20 standard has been approved (that is, technically
    finalized) by WG21 in a meeting in Prague at the end of February. This means that
    the GCC compiler version that this book uses, 8.3.0, does not include (or has
    very, very limited support for) the new and cool C++20 features. For this reason,
    the Docker image does not include the C++20 recipe code. GCC keeps the development
    of the newest features in branches (you have to use appropriate flags for that,
    for example, `-std=c++2a`); therefore, you are encouraged to experiment with them
    by yourself. So, clone and explore the GCC contracts and module branches and have
    fun.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**免责声明**：C++20标准已经在二月底的布拉格会议上由WG21批准（即在技术上完成）。这意味着本书使用的GCC编译器版本8.3.0不包括（或者对C++20的新功能支持非常有限）。因此，Docker镜像不包括C++20示例代码。GCC将最新功能的开发保留在分支中（您必须使用适当的标志，例如`-std=c++2a`）；因此，鼓励您自己尝试。因此，请克隆并探索GCC合同和模块分支，并尽情玩耍。'
- en: Learning to set and get a scheduler policy
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习设置和获取调度程序策略
- en: In a system programming context, there are cases where some processes must be
    handled differently than others. By differently, we mean the different ways a
    process gets a processor time or a different priority. A system programmer must
    be aware of this and learn how to interact with the scheduler's API. This recipe
    will show you how to change the **policy** of a process to meet different scheduling
    requirements.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在系统编程环境中，有些进程必须与其他进程处理方式不同。不同之处在于进程获取处理器时间或不同优先级的方式。系统程序员必须意识到这一点，并学会如何与调度程序的API进行交互。这个示例将向您展示如何更改进程的**策略**以满足不同的调度要求。
- en: How to do it...
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'This recipe will show you how to get and set the *policy* of a process alongside
    the limits that can be assigned to it. Let''s get started:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例将向您展示如何获取和设置进程的*policy*以及可以分配给它的限制。让我们开始吧：
- en: 'On a shell, let''s open a new source file called `schedParameters.cpp`. We
    need to check what the current (default) process policy is. To do this, we''ll
    use the `sched_getscheduler()` system call:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在shell上，让我们打开一个名为`schedParameters.cpp`的新源文件。我们需要检查当前（默认）进程策略是什么。为此，我们将使用`sched_getscheduler()`系统调用：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, we want to assign the `SCHED_FIFO` policy with a real-time (`rt`) priority.
    To make the code portable, we get the min and max from the `sched_get_priority_min`
    and `sched_get_priority_max` APIs:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们想要分配`SCHED_FIFO`策略和实时（`rt`）优先级。为了使代码可移植，我们从`sched_get_priority_min`和`sched_get_priority_max`API中获取最小值和最大值：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We should be able to check the new `SCHED_FIFO` policy that was assigned with
    the `sched_getscheduler()` function:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们应该能够检查已分配的新的`SCHED_FIFO`策略，使用`sched_getscheduler()`函数：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The next section will describe the preceding code in detail.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将详细描述前面的代码。
- en: How it works...
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'The POSIX standard defines the following policies:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: POSIX标准定义了以下策略：
- en: '`SCHED_OTHER`: The normal scheduler policy (that is, not for real-time processes)'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SCHED_OTHER`：正常的调度程序策略（即非实时进程）'
- en: '`SCHED_FIFO`: First-in/first-out'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SCHED_FIFO`：先进先出'
- en: '`SCHED_RR`: Round-robin'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SCHED_RR`：轮转'
- en: Here, `SCHED_OTHER` is the default one and `SCHED_FIFO` and `SCHED_RR` are the
    real-time ones. Actually, Linux defines `SCHED_NORMAL`, `SCHED_BATCH`, and `SCHED_IDLE` as
    other real-time policies. These are defined in the `sched.h` header file.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`SCHED_OTHER`是默认的，而`SCHED_FIFO`和`SCHED_RR`是实时的。实际上，Linux将`SCHED_NORMAL`、`SCHED_BATCH`和`SCHED_IDLE`定义为其他实时策略。这些定义在`sched.h`头文件中。
- en: '*Step 1* calls `sched_getscheduler()` to check the current policy of the process.
    As expected, the default is `SCHED_OTHER`. We passed the input to the `getpid()`
    function (`<unistd.h>`), which returns the PID of the current process. `sched_getscheduler()`
    also accepts `0`, which in this case represents the current process.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤1*调用`sched_getscheduler()`检查进程的当前策略。预期的默认值是`SCHED_OTHER`。我们将输入传递给`getpid()`函数（`<unistd.h>`），该函数返回当前进程的PID。`sched_getscheduler()`还接受`0`，在这种情况下表示当前进程。'
- en: '*Step 2* has the goal of setting a real-time policy and giving priority to
    the current process with the `sched_setscheduler()` function. We want this process
    to have a higher priority over the normal processes running on the machine. Think,
    for example, of a (soft) real-time application where the computation cannot be
    interrupted or if a software interrupt is received and its processing cannot be
    postponed. These Linux boxes usually run very few processes for a dedicated purpose.
    To achieve this, the policy to set is `SCHED_FIFO` and the priority we set is
    the middle value between the min and max that can be set on the current system.
    It is always suggested to check these values with the `sched_get_priority_max()`
    and `sched_get_priority_min()` functions in order to write portable code. One
    thing to highlight is that the `sched_setscheduler()` function internally sets
    the `rt_priority` field of `struct task_struct`.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤2*的目标是设置实时策略，并使用`sched_setscheduler()`函数为当前进程设置优先级。我们希望该进程比机器上运行的普通进程具有更高的优先级。例如，考虑（软）实时应用程序，其中计算不能被中断，或者收到软件中断并且其处理不能被延迟。这些Linux系统通常只运行很少的进程，用于专用目的。为了实现这一点，要设置的策略是`SCHED_FIFO`，我们设置的优先级是当前系统上可以设置的最小值和最大值之间的中间值。建议始终使用`sched_get_priority_max()`和`sched_get_priority_min()`函数检查这些值，以编写可移植的代码。需要强调的一点是，`sched_setscheduler()`函数在内部设置了`struct
    task_struct`的`rt_priority`字段。'
- en: '*Step 3* checks that `SCHED_FIFO` has been correctly set by calling the `sched_getscheduler()`
    function, similar to what happened in *step 1*.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤3*通过调用`sched_getscheduler()`函数检查了`SCHED_FIFO`是否已正确设置，类似于*步骤1*中发生的情况。'
- en: There's more...
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: '`SCHED_FIFO` and `SCHED_RR` are the two policies that are defined by POSIX
    and implemented on Linux that allocate tasks on processors that are more suitable
    for real-time software. Let''s go over how they work:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`SCHED_FIFO`和`SCHED_RR`是由POSIX定义并在Linux上实现的两种策略，它们分配任务给更适合实时软件的处理器。让我们看看它们是如何工作的：'
- en: '`SCHED_FIFO`: When a task is returned by this policy, it continues to run until
    it blocks (for example, I/O requests), it yields the processor, or a higher priority
    task preempts it.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SCHED_FIFO`：当任务由此策略返回时，它会继续运行，直到阻塞（例如，I/O请求）、让出处理器或更高优先级的任务抢占它。'
- en: '`SCHED_RR`: This has the exact same logic as `SCHED_FIFO` but with one difference:
    the tasks that are scheduled with this policy have a timeslice assigned so that
    a task continues to run until the time slice expires or a higher task preempts
    it or yields the processor.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SCHED_RR`：这与`SCHED_FIFO`的逻辑完全相同，但有一个区别：使用此策略调度的任务分配了时间片，以便任务继续运行，直到时间片到期或更高优先级的任务抢占它或让出处理器。'
- en: Note that when `SCHED_OTHER` (or `SCHED_NORMAL`) implements a preemptive form
    of multitasking, `SCHED_FIFO` and `SCHED_RR` are cooperative (they are not preempted).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当`SCHED_OTHER`（或`SCHED_NORMAL`）实现抢占式的多任务处理时，`SCHED_FIFO`和`SCHED_RR`是协作的（它们不会被抢占）。
- en: 'The Linux main scheduler function loops over all the policies and for each
    one, it asks the next task to run. It does this with the `pick_next_task()` function,
    which is implemented by each policy. The main scheduler is defined in `kernel/sched.c`,
    which defines the `sched_class` struct. This states that each policy must be defined
    and implemented so that all the different policies are working properly. Let''s
    take a look at this at a graphical level:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Linux主调度程序函数循环遍历所有策略，并针对每个策略询问下一个要运行的任务。它使用`pick_next_task()`函数执行此操作，该函数由每个策略实现。主调度程序在`kernel/sched.c`中定义，该文件定义了`sched_class`结构。该结构规定必须定义和实现每个策略，以便所有不同的策略都能正常工作。让我们以图形方式查看这一点：
- en: '`kernel/sched.c`: Defines `struct sched_class` and loops over the following
    policies:'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kernel/sched.c`：定义`struct sched_class`并循环遍历以下策略：'
- en: '`kernel/rt.c` (for `SCHED_FIFO` and `SCHED_RR`) sets `const struct sched_class
    rt_sched_class` with the specific real-time policy functions.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kernel/rt.c`（用于`SCHED_FIFO`和`SCHED_RR`）设置了具体实时策略函数的`const struct sched_class
    rt_sched_class`。'
- en: '`kernel/fair.c` (for `SCHED_NORMAL` or `SCHED_OTHER`) sets `const struct sched_class
    fair_sched_class` with the fair scheduler-specific functions.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kernel/fair.c`（用于`SCHED_NORMAL`或`SCHED_OTHER`）使用公平调度程序特定函数设置了`const struct
    sched_class fair_sched_class`。'
- en: 'One way of looking at the Linux scheduler design is this: `kernel/sched.c`
    defines the interface and the specific policies beneath the interface. The interface
    is represented by the `struct sched_class` structure. The following is the interface
    implementation for `SCHED_OTHER`/`SCHED_NORMAL` (the CFS fair scheduler policy):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 看待Linux调度程序设计的一种方式是：`kernel/sched.c`定义了接口和接口下的具体策略。接口由`struct sched_class`结构表示。以下是`SCHED_OTHER`/`SCHED_NORMAL`（CFS公平调度程序策略）的接口实现：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The real-time priority range of the `SCHED_FIFO` and `SCHED_RR` policies is `[1,
    99]`, while the `SCHED_OTHER` priority (called `nice`) is `[-20, 10]`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`SCHED_FIFO`和`SCHED_RR`策略的实时优先级范围是`[1, 99]`，而`SCHED_OTHER`优先级（称为`nice`）是`[-20,
    10]`。'
- en: See also
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Learning how to set a nice value* recipe to see how the real-time priority
    is related to the nice priority
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*学习如何设置nice值*的步骤，以了解实时优先级与nice优先级的关系'
- en: The *Learning how to yield the processor* recipe to learn how to yield a running
    real-time task
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*学习如何让出处理器*这个教程可以学习如何让一个正在运行的实时任务'
- en: '*Linux Kernel Development*, *Third Edition*, by Robert Love'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Linux内核开发*，第三版，作者Robert Love'
- en: Learning to get the timeslice value
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习获取时间片值
- en: The Linux scheduler offers different policies for allocating processor time
    to tasks. The *Learning to set and get a scheduler policy* recipe shows what policies
    are available and how to change them. The `SCHED_RR` policy, that is, the round-robin
    policy, is the one that's used on real-time tasks (with `SCHED_FIFO`). The `SCHED_RR`
    policy assigns a timeslice to each process. This recipe will show you how to configure
    the timeslice.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Linux调度程序提供了不同的策略来分配处理器时间给任务。*学习设置和获取调度程序策略*这个教程展示了有哪些策略可用以及如何更改它们。`SCHED_RR`策略，即循环轮询策略，是用于实时任务（使用`SCHED_FIFO`）的策略。`SCHED_RR`策略为每个进程分配一个时间片。这个教程将向您展示如何配置时间片。
- en: How to do it...
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In this recipe, we''ll be writing a small program to get the round-robin timeslice
    by using the `sched_rr_get_interval()` function:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将编写一个小程序，通过使用`sched_rr_get_interval()`函数来获取循环轮询时间片：
- en: 'On a new shell, open a new file called `schedGetInterval.cpp`. We have to include
    `<sched.h>` for the scheduler capabilities, `<iostream.h>` to log to the standard
    output, and `<string.h>` to use the `strerror` function and translate the `errno`
    integer into a readable string:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个新的shell中，打开一个名为`schedGetInterval.cpp`的新文件。我们必须包括`<sched.h>`以获取调度程序功能，`<iostream.h>`以记录到标准输出，`<string.h>`以使用`strerror`函数并将`errno`整数转换为可读字符串：
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To get the round-robin interval, we have to set the scheduler policy for our
    process:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要获取循环轮询间隔，我们必须为我们的进程设置调度程序策略：
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, we can get the interval with the `sched_rr_get_interval()` function:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以使用`sched_rr_get_interval()`函数获取时间间隔：
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Let's see how this works under the hood.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这是如何在底层工作的。
- en: How it works...
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When a task gets the processor with the `SCHED_RR` policy, it has priority over
    the `SCHED_OTHER` and `SCHED_NORMAL` tasks and gets allocated a defined timeslice
    that continues to run until the timeslice expires. Higher priority tasks run until
    they explicitly yield the processor or block. An important factor for a system
    programmer is to know the timeslice for the `SCHED_RR` policy. This is quite important.
    If the time slice is too large, other processes might wait a long time before
    getting CPU time, while if it is too small, the system might spend a significant
    amount of time context switching.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当任务使用`SCHED_RR`策略获取处理器时，它优先于`SCHED_OTHER`和`SCHED_NORMAL`任务，并分配一个定义的时间片，直到时间片到期为止。较高优先级的任务运行，直到它们明确让出处理器或阻塞。对于系统程序员来说，了解`SCHED_RR`策略的时间片是一个重要因素。这非常重要。如果时间片太大，其他进程可能要等很长时间才能获得CPU时间，而如果时间片太小，系统可能会花费大量时间进行上下文切换。
- en: '*Step 1* shows the includes that are needed for the rest of the program. `<iostream>` is
    for the standard output, `<sched.h>` is used to get access to the scheduler features,
    and `<string.h>` is used for the `strerror()` function.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤1*显示了程序其余部分所需的包含文件。`<iostream>`用于标准输出，`<sched.h>`用于访问调度程序功能，`<string.h>`用于`strerror()`函数。'
- en: '*Step 2* is very important as it sets the `SCHED_RR` policy for the current
    process. As you may have noticed, we passed `0` as the first parameter. This is
    perfectly fine since the man page of the `sched_setscheduler()` function says, *If
    pid equals zero, the policy of the calling thread will be set*.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤2*非常重要，因为它为当前进程设置了`SCHED_RR`策略。您可能已经注意到，我们将`0`作为第一个参数传递。这是完全可以的，因为`sched_setscheduler()`函数的手册页上说，*如果pid等于零，则将设置调用线程的策略*。'
- en: '*Step 3* calls the `sched_rr_get_interval()` function. It accepts two parameters:
    the PID and `struct timespec`. The first is an input parameter, while the latter
    is an output parameter that contains the timeslice in the form of `{sec, nanoseconds}`.
    For the first parameter, we could have passed the `getpid()` function, which returns
    the PID of the current process. Then, we simply log the standard output to the
    timeslice that''s returned.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤3*调用了`sched_rr_get_interval()`函数。它接受两个参数：PID和`struct timespec`。第一个是输入参数，而后者是一个输出参数，它以`{sec,
    nanoseconds}`的形式包含时间片。对于第一个参数，我们可以传递`getpid()`函数，该函数返回当前进程的PID。然后，我们简单地记录标准输出到返回的时间片。'
- en: There's more...
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Where does the `SCHED_RR` timeslice come from? The Linux scheduler, as we already
    know, has different policies. All of them are implemented in different modules:
    `kernel/sched_fair.c` for `SCHED_NORMAL` or `SCHED_OTHER` and `kernel/rt.c` for
    `SCHED_RR` and `SCHED_FIFO`. By looking at `kernel/rt.c`, we can see that the `sched_rr_get_interval()`
    function returns the `sched_rr_timeslice()` variable, which is defined on top
    of the module. We can also see that if `sched_rr_timeslice()` is called for the
    `SCHED_FIFO` policy, it returns `0`.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`SCHED_RR`时间片来自哪里？正如我们已经知道的，Linux调度程序有不同的策略。它们都是在不同的模块中实现的：`kernel/sched_fair.c`用于`SCHED_NORMAL`或`SCHED_OTHER`，`kernel/rt.c`用于`SCHED_RR`和`SCHED_FIFO`。通过查看`kernel/rt.c`，我们可以看到`sched_rr_get_interval()`函数返回`sched_rr_timeslice()`变量，该变量在模块顶部定义。我们还可以看到，如果为`SCHED_FIFO`策略调用`sched_rr_timeslice()`，它将返回`0`。'
- en: See also
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Learning how to yield the processor* recipe as an alternative to stopping
    the running task instead of waiting for the timeslice
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*学习如何让出处理器*这个教程是停止运行任务的替代方法，而不是等待时间片。'
- en: The *Learning to set and get a scheduler policy* recipe
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*学习设置和获取调度程序策略*这个教程'
- en: '*Linux Kernel Development, Third Edition*, by Robert Love'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Linux内核开发，第三版*，作者Robert Love'
- en: Learning how to set a nice value
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习如何设置一个良好的值
- en: The `SCHED_OTHER`/`SCHED_NORMAL` policy implements the so-called completely
    fair scheduler (`CFS`). This recipe will show you how to set the nice value for
    normal processes in order to increase their priority. We'll see that the nice
    value is used to weigh the timeslice that a process has. Priority must not be
    confused with the real-time priority, which is specific to the `SCHED_FIFO` and
    `SCHED_RR` policies.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`SCHED_OTHER`/`SCHED_NORMAL`策略实现了所谓的完全公平调度器（`CFS`）。这个配方将向您展示如何为普通进程设置nice值以增加它们的优先级。我们将看到nice值用于权衡进程的时间片。优先级不应与实时优先级混淆，实时优先级是特定于`SCHED_FIFO`和`SCHED_RR`策略的。'
- en: How to do it...
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In this recipe, we''ll implement a program that will increase the nice value
    of a process:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将实现一个程序，它将增加进程的nice值：
- en: 'On a shell, open a new source file called `schedNice.cpp`. We need to add some
    includes and call the `nice()` system call by passing the value we want to set
    for the current process:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在shell上，打开一个名为`schedNice.cpp`的新源文件。我们需要添加一些包含并调用`nice()`系统调用，通过传递我们想要为当前进程设置的值：
- en: '[PRE7]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the next section, we'll see how this program works and how the `nice` value
    is used to influence the time a task gets on a processor.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看到这个程序是如何工作的，以及`nice`值如何影响任务在处理器上的时间。
- en: How it works...
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '*Step 1* basically calls the `nice()` system call, which increments the static
    priority of the task by the given amount. Just to be clear, assuming a process
    starts with a priority of `0` (which is the default value for the `SCHED_OTHER`
    and `SCHED_NORMAL` policies), two consecutive calls of `nice(5)` will set its
    static priority to `10`.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤1*基本上调用`nice()`系统调用，它会按给定的数量增加任务的静态优先级。只是为了明确起见，假设一个进程从优先级`0`（这是`SCHED_OTHER`和`SCHED_NORMAL`策略的默认值）开始，连续两次调用`nice(5)`将把它的静态优先级设置为`10`。'
- en: 'Let''s build and run the `schedNice.cpp` program:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建并运行`schedNice.cpp`程序：
- en: '![](img/72ada2c0-3f65-42c4-9324-8ae514069606.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/72ada2c0-3f65-42c4-9324-8ae514069606.png)'
- en: Here, we can see that, on the left, we have our process running and on the right,
    we've run the `ps -el` command to get the nice values of the running processes.
    We can see that the `./a.out` process now has a `nice` value of `5`. To give a
    task a higher priority (and then a lower value of `nice`), the process needs to
    run as root.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到，在左边，我们的进程正在运行，而在右边，我们运行了`ps -el`命令来获取正在运行的进程的`nice`值。我们可以看到`./a.out`进程现在有一个`nice`值为`5`。要给一个任务更高的优先级（然后一个更低的`nice`值），进程需要以root身份运行。
- en: There's more...
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The `struct task_struct` structure has three values to represent a task priority:
    `rt_prio`, `static_prio`, and `prio`. We discussed `rt_prio` in the *Learning
    to set and get a scheduler policy* recipe and defined that this field represents
    the priority for real-time tasks. `static_prio` is the `struct task_struct` field
    that''s used to store the `nice` value, while `prio` contains the actual task
    priority. The lower `static_prio` is, the higher the `prio` value of the task.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`struct task_struct`结构有三个值来表示任务优先级：`rt_prio`、`static_prio`和`prio`。我们在*学习如何设置和获取调度策略*配方中讨论了`rt_prio`，并定义了这个字段代表实时任务的优先级。`static_prio`是`struct
    task_struct`字段，用于存储`nice`值，而`prio`包含实际的任务优先级。`static_prio`越低，任务的`prio`值就越高。'
- en: There may be cases where we need to set the `nice` value of a process at runtime.
    The command we should use in this situation is `renice value -p pid`; for example, `renice
    10 -p 186`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 也许有些情况下我们需要在运行时设置进程的`nice`值。在这种情况下，我们应该使用的命令是`renice value -p pid`；例如，`renice
    10 -p 186`。
- en: See also
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Learning how to yield the processor* recipe as an alternative to stopping
    the running task instead of waiting for the timeslice
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*学习如何让出处理器*这个配方作为停止运行任务的替代方法，而不是等待时间片'
- en: The *Learning to set and get a scheduler policy* recipe
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*学习如何设置和获取调度策略*配方'
- en: Learning how to yield the processor
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习如何让出处理器
- en: When a task is scheduled with one of the real-time scheduling policies (that
    is, `SCHED_RR` or `SCHED_FIFO`), you may need to yield the task from the processor (yielding
    the task means to relinquish the CPU, making it available to other tasks). As
    we described in the *Learning to set and get a scheduler policy* recipe, when
    a task is scheduled with the `SCHED_FIFO` policy, it does not leave the processor
    until a certain event occurs; that is, there is no concept of a timeslice. This
    recipe will show you how to yield a process with the `sched_yield()` function.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个任务使用实时调度策略之一（即`SCHED_RR`或`SCHED_FIFO`）进行调度时，您可能需要让出处理器（让出任务意味着放弃CPU，使其可用于其他任务）。正如我们在*学习如何设置和获取调度策略*配方中所描述的，当一个任务使用`SCHED_FIFO`策略进行调度时，它不会离开处理器，直到发生某个特定事件；也就是说，没有时间片的概念。这个配方将向您展示如何使用`sched_yield()`函数让出一个进程。
- en: How to do it...
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In this recipe, we''ll develop a program that will yield the current process:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将开发一个程序，它将让出当前进程：
- en: 'On a shell, open a new source file called `schedYield.cpp` and type in the
    following code:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在shell上，打开一个名为`schedYield.cpp`的新源文件，并输入以下代码：
- en: '[PRE8]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the next section, we'll describe how our program and `sched_yield()` work.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将描述我们的程序和`sched_yield()`的工作原理。
- en: How it works...
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When `sched_yield()` is called on a task scheduled with `SCHED_FIFO` or `SCHED_RR`,
    it is moved to the end of a queue with the same priority and another task is run.
    Yields cause a context switch, so it should be used carefully and when strictly
    needed.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当在使用`SCHED_FIFO`或`SCHED_RR`调度的任务上调用`sched_yield()`时，它会被移动到具有相同优先级的队列的末尾，并运行另一个任务。让步会导致上下文切换，因此应谨慎使用，仅在严格需要时使用。
- en: '*Step 1* defines the program that shows us how to use `sched_yield()`. We simulated
    a CPU-bound type of process where we check periodically in order to yield the
    processor. Before doing that, we had to set the policy type for this process to
    `SCHED_RR` and the priority to `8`. As you can see, there is no information about
    the process (PID) to yield, so it assumes that the current task will be yielded.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤1*定义了一个程序，向我们展示了如何使用`sched_yield()`。我们模拟了一种CPU密集型的进程，在这种进程中，我们定期检查以便让出处理器。在这之前，我们必须将此进程的策略类型设置为`SCHED_RR`，优先级设置为`8`。如你所见，没有关于要让出的进程（PID）的信息，因此它假定当前任务将被让出。'
- en: There's more...
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: '`sched_yield()` is a system call that can be used by userspace applications.
    Linux usually calls the `yield()` system call, which has the advantage of keeping
    the process in a `RUNNABLE` state.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`sched_yield()`是一个可以被用户空间应用程序使用的系统调用。Linux通常调用`yield()`系统调用，它的优势是保持进程处于`RUNNABLE`状态。'
- en: See also
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Learning to set and get a scheduler policy* recipe to review how to change
    a policy's type
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*学习设置和获取调度程序策略*的教程来回顾如何更改策略的类型'
- en: '*Linux Kernel Development,* *Third Edition*, by Robert Love'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Linux内核开发*，第三版，作者Robert Love'
- en: Learning about processor affinity
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解处理器亲和力
- en: In a multi-processor environment, the scheduler has to deal with task allocation
    on multiple processors or cores. From a Linux perspective, processes and threads
    are the same thing; both are represented by the `struct task_struct` kernel structure.
    There may be the need to force two or more tasks (that is, threads or processes)
    to run on the same processor to leverage, for example, the cache by avoiding the
    cache invalidation. This recipe will teach you how to set a *hard affinity* on
    a task.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在多处理器环境中，调度程序必须处理多个处理器或核心上的任务分配。从Linux的角度来看，进程和线程是相同的；两者都由`struct task_struct`内核结构表示。可能需要强制两个或更多任务（即线程或进程）在同一个处理器上运行，以利用例如避免缓存失效的缓存。本教程将教你如何在任务上设置*硬亲和力*。
- en: How to do it...
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In this recipe, we''ll develop a small piece of software in which we''ll force
    it to run on a CPU:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将开发一个小型软件，强制其在一个CPU上运行：
- en: 'On a shell, open a new source file called `schedAffinity.cpp`. What we want
    is to check the affinity mask for the newly created process. Then, we need to
    prepare the `cpu_set_t` mask to set the affinity on the CPU to `3`:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在shell中，打开一个名为`schedAffinity.cpp`的新源文件。我们想要检查新创建进程的亲和力掩码。然后，我们需要准备`cpu_set_t`掩码，以在CPU上设置亲和力为`3`：
- en: '[PRE9]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, we are ready to call the `sched_setaffinity()` method and force the hard
    affinity for the current task on CPU number `3`. To check whether the affinity
    has been set correctly, we''ll also print the mask:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们准备调用`sched_setaffinity()`方法，并强制将当前任务的硬亲和力设置在CPU编号为`3`上。为了检查亲和力是否已正确设置，我们还将打印掩码：
- en: '[PRE10]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, we have to develop the `current_affinity()` method, which will just print
    the mask for the processors:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要开发`current_affinity()`方法，它将只打印处理器的掩码：
- en: '[PRE11]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: What would happen if we set the affinity on a nonexistent CPU (for example, `cpu_id
    = 12`)? Where in the kernel is the affinity mask information stored? We'll answer
    these and other questions in the next section.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在一个不存在的CPU上设置亲和力（例如`cpu_id = 12`），会发生什么？内核中的哪个位置存储了亲和力掩码信息？我们将在下一节中回答这些和其他问题。
- en: How it works...
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '*Step 1* does two things. First, it prints the default affinity mask. We can
    see that the process is scheduled to run on all the processors. Second, it prepares `cpu_set_t`,
    which represents a set of CPUs, by initializing it with the `CPU_ZERO` macro and
    setting the affinity on CPU `3` with the `CPU_SET` macro. Note that the `cpu_set_t` object
    must be manipulated directly but only via the macro provided. A full list of macros
    is documented on the man page: `man cpu_set`.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤1*做了两件事。首先，它打印了默认的亲和力掩码。我们可以看到该进程被调度在所有处理器上运行。其次，它准备了`cpu_set_t`，它表示一组CPU，通过使用`CPU_ZERO`宏进行初始化，并使用`CPU_SET`宏在CPU`3`上设置亲和力。请注意，`cpu_set_t`对象必须直接操作，但只能通过提供的宏进行操作。完整的宏列表在手册页上有文档：`man
    cpu_set`。'
- en: '*Step 2* calls the `sched_setaffinity()` system call to set the affinity (specified
    in the `mask` variable, that is, `cpu_set_t`) on the process with the PID returned
    by the `getpid()` function. We could have passed `0` instead of `getpid()`, meaning
    the current process. After the `setaffinity` function, we printed the CPU''s mask
    to verify the correct new value.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤2*调用`sched_setaffinity()`系统调用，在由`getpid()`函数返回的PID的进程上设置亲和力（在`mask`变量中指定为`cpu_set_t`）。我们可以传递`0`而不是`getpid()`，表示当前进程。在`setaffinity`函数之后，我们打印CPU的掩码以验证正确的新值。'
- en: '*Step 3* contains the definition of the helper function we used to print the
    standard output onto the mask for the CPUs. Note that we get the number of available
    processors through the `sysconf()` system call and by passing `_SC_NPROCESSORS_ONLN`.
    This function checks the system information that''s present in the `/sys/` folder.
    Then, we loop over each processor and call the `CPU_ISSET` macro while passing
    `i-th`. The `CPU_ISSET` macro will set the respective bit for the `i-th` CPU.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤3*包含了我们用来将标准输出打印到CPU掩码上的辅助函数的定义。请注意，我们通过`sysconf()`系统调用并传递`_SC_NPROCESSORS_ONLN`来获取可用处理器的数量。此函数检查了`/sys/`文件夹中存在的系统信息。然后，我们循环遍历每个处理器，并调用`CPU_ISSET`宏，同时传递`i-th`。`CPU_ISSET`宏将为第`i`个CPU设置相应的位。'
- en: If you try to modify `int cpu_id = 3` and pass a different processor, that is,
    a nonexisting one (for example, `15`), the `sched_setaffinity()` function will
    obviously fail, returning `EINVAL` and leaving the affinity mask untouched.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果尝试修改`int cpu_id = 3`并传递一个不同的处理器，即一个不存在的处理器（例如`15`），`sched_setaffinity()`函数显然会失败，返回`EINVAL`，并保持亲和力掩码不变。
- en: 'Let''s take a look at the program now:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看一下程序：
- en: '![](img/7d5e58de-a8e5-4864-95ee-0d348ada14af.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7d5e58de-a8e5-4864-95ee-0d348ada14af.png)'
- en: As we can see, the CPUs mask is set to 1 for each processor. This means that
    the process, at this stage, can be scheduled on each CPU. Now, we set the mask,
    asking the scheduler to run the process (**hard affinity**) only on CPU `3`. When
    we call `sched_getaffinity()`, the mask reflects this.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，每个处理器的CPU掩码都设置为1。这意味着在这个阶段，进程可以在每个CPU上调度。现在，我们设置了掩码，要求调度程序只在CPU `3`上运行该进程（**硬亲和力**）。当我们调用`sched_getaffinity()`时，掩码会反映这一点。
- en: There's more...
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: When we call the `sched_setaffinity()` system call, we ask the scheduler to
    run a task on a specific processor. We call this hard affinity. There is also
    a soft affinity. This is automatically managed by the scheduler. Linux always
    tries to optimize resources and avoids cache invalidation in order to speed up
    the performance of the whole system.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们调用`sched_setaffinity()`系统调用时，我们要求调度程序在特定处理器上运行任务。我们称之为硬亲和力。还有软亲和力。这是由调度程序自动管理的。Linux始终尝试优化资源，并避免缓存失效，以加快整个系统的性能。
- en: When we set the affinity mask through the macro, we are basically setting `cpus_allowed` in
    the `task_struct` structure. This makes a lot of sense since we're setting the
    affinity of a process or thread on one or more CPUs.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们通过宏设置亲和性掩码时，基本上是在`task_struct`结构中设置了`cpus_allowed`。这是非常合理的，因为我们正在为一个或多个CPU上的进程或线程设置亲和性。
- en: If you want to set the affinity of a task to more than one CPU, the `CPU_SET`
    macro must be called for the CPUs you want to set.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要将任务的亲和性设置为多个CPU，必须为要设置的CPU调用`CPU_SET`宏。
- en: See also
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Learning how to yield the processor* recipe
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*学习如何让出处理器*食谱'
- en: The *Learning to get the timeslice value* recipe
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*学习获取时间片值*食谱'
- en: The *Learning to set and get a scheduler policy* recipe
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*学习设置和获取调度策略*食谱'
