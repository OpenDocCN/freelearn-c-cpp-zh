- en: C++17 Features
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C++17功能
- en: 'In this chapter, you will be learning the following concepts:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习以下概念：
- en: C++17 background
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C++17背景
- en: What is new in C++17?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C++17中有什么新功能？
- en: What features are deprecated or removed in C++17?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C++17中弃用或移除的功能是什么？
- en: Key features in C++17
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C++17的关键特性
- en: C++17 background
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C++17背景
- en: As you know, the C++ language is the brain child of Bjarne Stroustrup, who developed
    C++ in 1979\. The C++ programming language is standardized by International Organization
    for Standardization (ISO).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所知，C++语言是Bjarne Stroustrup的心血结晶，他于1979年开发了C++。C++编程语言由国际标准化组织（ISO）标准化。
- en: The initial standardization was published in 1998, commonly referred to as C++98,
    and the next standardization C++03 was published in 2003, which was primarily
    a bug fix release with just one language feature for value initialization. In
    August 2011, the C++11 standard was published with several additions to the core language,
    including several significant interesting changes to the **Standard Template Library**
    (**STL**); C++11 basically replaced the C++03 standard. C++14 was published in
    December, 2014 with some new features, and later, the C++17 standard was published
    on July 31, 2017\.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 最初的标准化于1998年发布，通常称为C++98，接下来的标准化C++03于2003年发布，这主要是一个修复错误的版本，只有一个语言特性用于值初始化。2011年8月，C++11标准发布，核心语言增加了一些内容，包括对**标准模板库**（**STL**）的一些重大有趣的更改；C++11基本上取代了C++03标准。C++14于2014年12月发布，带有一些新功能，后来，C++17标准于2017年7月31日发布。
- en: At the time of writing this book, C++17 is the latest revision of the ISO/IEC
    standard for the C++ programming language.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，C++17是C++编程语言的ISO/IEC标准的最新修订版。
- en: 'This chapter requires a compiler that supports C++17 features: gcc version
    7 or later. As gcc version 7 is the latest version at the time of writing this
    book, I''ll be using gcc version 7.1.0 in this chapter.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章需要支持C++17功能的编译器：gcc版本7或更高版本。由于gcc版本7是撰写本书时的最新版本，因此在本章中我将使用gcc版本7.1.0。
- en: 'In case you haven''t installed g++ 7 that supports C++17 features, you can
    install it with the following commands:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有安装支持C++17功能的g++ 7，可以使用以下命令安装：
- en: '`sudo add-apt-repository ppa:jonathonf/gcc-7.1'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`sudo add-apt-repository ppa:jonathonf/gcc-7.1'
- en: sudo apt-get update
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: sudo apt-get update
- en: sudo apt-get install gcc-7 g++-7`
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: sudo apt-get install gcc-7 g++-7`
- en: What's new in C++17?
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C++17中有什么新功能？
- en: The complete list of C++17 features can be found at [http://en.cppreference.com/w/cpp/compiler_support#C.2B.2B17_features](http://en.cppreference.com/w/cpp/compiler_support#C.2B.2B17_features).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的C++17功能列表可以在[http://en.cppreference.com/w/cpp/compiler_support#C.2B.2B17_features](http://en.cppreference.com/w/cpp/compiler_support#C.2B.2B17_features)找到。
- en: 'To give a high-level idea, the following are some of the new C++17 features:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了给出一个高层次的概念，以下是一些新的C++17功能：
- en: New auto rules for direct-list-initialization
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接列表初始化的新汽车规则
- en: '`static_assert` with no messages'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有消息的`static_assert`
- en: Nested namespace definition
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌套命名空间定义
- en: Inline variables
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内联变量
- en: Attributes for namespaces and enumerators
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命名空间和枚举器的属性
- en: C++ exceptions specifications are part of the type system
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C++异常规范是类型系统的一部分
- en: Improved lambda capabilities that give performance benefits on servers
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进的lambda功能，可在服务器上提供性能优势
- en: NUMA architecture
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NUMA架构
- en: Using attribute namespaces
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用属性命名空间
- en: Dynamic memory allocation for over-aligned data
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于超对齐数据的动态内存分配
- en: Template argument deduction for class templates
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类模板的模板参数推导
- en: Non-type template parameters with auto type
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有自动类型的非类型模板参数
- en: Guaranteed copy elision
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保证的拷贝省略
- en: New specifications for inheriting constructors
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 继承构造函数的新规范
- en: Direct-list-initialization of enumerations
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 枚举的直接列表初始化
- en: Stricter expression evaluation order
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更严格的表达式评估顺序
- en: '`shared_mutex`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shared_mutex`'
- en: String conversions
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串转换
- en: 'Otherwise, there are many new interesting features that were added to the core
    C++ language: STL, lambadas, and so on. The new features give a facelift to C++,
    and starting from `C++17`, as a C++ developer, you will feel that you are working
    in a modern programming language, such as Java or C#.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，核心C++语言中添加了许多有趣的新功能：STL、lambda等。新功能为C++带来了面貌更新，从`C++17`开始，作为C++开发人员，您会感到自己正在使用现代编程语言，如Java或C#。
- en: What features are deprecated or removed in C++17?
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C++17中弃用或移除的功能是什么？
- en: 'The following features are now removed in C++17:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下功能现在已在C++17中移除：
- en: The `register` keyword was deprecated in C++11 and got removed in C++17
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`register`关键字在C++11中已被弃用，并在C++17中被移除'
- en: The `++` operator for `bool` was deprecated in C++98 and got removed in C++17
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`++`运算符对`bool`在C++98中已被弃用，并在C++17中被移除'
- en: The dynamic exception specifications were deprecated in C++11 and and got removed
    in C++17
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态异常规范在C++11中已被弃用，并在C++17中被移除
- en: Key features in C++17
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C++17的关键特性
- en: 'Let''s explore the following C++17 key features one by one in the following
    sections:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐个探讨以下C++17的关键功能：
- en: Easier nested namespace
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更简单的嵌套命名空间
- en: New rules for type detection from the braced initializer list
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从大括号初始化列表中检测类型的新规则
- en: Simplified `static_assert`
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简化的`static_assert`
- en: '`std::invoke`'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`std::invoke`'
- en: Structured binding
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结构化绑定
- en: The `if` and `switch` local-scoped variables
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if`和`switch`局部作用域变量'
- en: Template type auto-detection for class templates
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类模板的模板类型自动检测
- en: Inline variables
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内联变量
- en: Easier nested namespace syntax
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更简单的嵌套命名空间语法
- en: 'Until the C++14 standard, the syntax supported for a nested namespace in C++
    was as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 直到C++14标准，C++中支持的嵌套命名空间的语法如下：
- en: '[PRE0]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding code can be compiled and the output can be viewed with the following
    commands:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码可以使用以下命令编译，并且可以查看输出：
- en: '[PRE1]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output of the preceding program is as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 上述程序的输出如下：
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Every namespace level starts and ends with curly brackets, which makes it difficult
    to use nested namespaces in large applications. C++17 nested namespace syntax
    is really cool; just take a look at the following code and you will readily agree
    with me:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 每个命名空间级别都以大括号开始和结束，这使得在大型应用程序中使用嵌套命名空间变得困难。C++17嵌套命名空间语法真的很酷；只需看看下面的代码，你就会很容易同意我的观点：
- en: '[PRE3]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The preceding code can be compiled and the output can be viewed with the following
    commands:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码可以编译，并且可以使用以下命令查看输出：
- en: '[PRE4]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The output remains the same as the previous program:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 输出与上一个程序相同：
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: New rules for type auto-detection from braced initializer list
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 来自大括号初始化列表的类型自动检测的新规则
- en: 'C++17 introduced new rules for auto-detection of the initializer list, which
    complements C++14 rules. The C++17 rule insists that the program is ill-formed
    if an explicit or partial specialization of `std::initializer_list` is declared:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: C++17引入了对初始化列表的自动检测的新规则，这补充了C++14的规则。C++17规则坚持认为，如果声明了`std::initializer_list`的显式或部分特化，则程序是非法的：
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The preceding code can be compiled and the output can be viewed with the following
    commands:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码可以编译，并且可以使用以下命令查看输出：
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output of the preceding program is as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 上述程序的输出如下：
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Simplified static_assert
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简化的static_assert
- en: The `static_assert` macro helps identify assert failures during compile time.
    This feature has been supported since C++11; however, the `static_assert` macro
    used to take a mandatory assertion failure message till, which is now made optional
    in C++17.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`static_assert`宏有助于在编译时识别断言失败。这个特性自C++11以来就得到了支持；然而，在C++17中，`static_assert`宏在之前是需要一个强制的断言失败消息的，现在已经变成了可选的。'
- en: 'The following example demonstrates the use of `static_assert` with and without
    the message:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了使用`static_assert`的方法，包括消息和不包括消息：
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The output of the preceding program is as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 上述程序的输出如下：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: From the preceding output, you can see that the message, `Assertion failed`,
    appears as part of the compilation error, while in the second compilation the
    default compiler error message appears, as we didn't supply an assertion failure
    message. When there is no assertion failure, the assertion error message will
    not appear as demonstrated in `static_assert ( x == y )`.  This feature is inspired
    by the C++ community from the BOOST C++ library.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的输出中，您可以看到消息“Assertion failed”作为编译错误的一部分出现，而在第二次编译中，由于我们没有提供断言失败消息，出现了默认的编译器错误消息。当没有断言失败时，断言错误消息不会出现，如`static_assert(x==y)`所示。这个特性受到了BOOST
    C++库中C++社区的启发。
- en: The std::invoke( ) method
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`std::invoke()`方法'
- en: 'The `std::invoke()` method can be used to call functions, function pointers,
    and member pointers with the same syntax:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`std::invoke()`方法可以用相同的语法调用函数、函数指针和成员指针：'
- en: '[PRE11]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The preceding code can be compiled and the output can be viewed with the following
    commands:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码可以编译，并且可以使用以下命令查看输出：
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The output of the preceding program is as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 上述程序的输出如下：
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `std::invoke( )` method is a template function that helps you seamlessly
    invoke callable objects, both built-in and user-defined.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`std::invoke()`方法是一个模板函数，可以帮助您无缝地调用可调用对象，无论是内置的还是用户定义的。'
- en: Structured binding
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结构化绑定
- en: 'You can now initialize multiple variables with a return value with a really
    cool syntax, as shown in the following code sample:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以使用一个非常酷的语法初始化多个变量，并返回一个值，如下面的示例代码所示：
- en: '[PRE14]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the preceding program, the code highlighted in **bold** is the structured
    binding feature introduced in C++17. Interestingly, we have not declared the `string
    name` and `int age` variables. These are deduced automatically by the C++ compiler
    as `string` and `int`, which makes the C++ syntax just like any modern programming
    language, without losing its performance and system programming benefits.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述程序中，用**粗体**突出显示的代码是C++17引入的结构化绑定特性。有趣的是，我们没有声明`string name`和`int age`变量。这些都是由C++编译器自动推断为`string`和`int`，这使得C++的语法就像任何现代编程语言一样，而不会失去其性能和系统编程的好处。
- en: 'The preceding code can be compiled and the output can be viewed with the following
    commands:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码可以编译，并且可以使用以下命令查看输出：
- en: '[PRE15]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The output of the preceding program is as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 上述程序的输出如下：
- en: '[PRE16]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: If and Switch local scoped variables
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: If和Switch局部作用域变量
- en: 'There is an interesting new feature that allows you to declare a local variable
    bound to the `if` and `switch` statements'' block of code. The scope of the variable
    used in the `if` and `switch` statements will go out of scope outside the respective
    blocks. It can be better understood with an easy to understand example, as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个有趣的新功能，允许您声明一个绑定到`if`和`switch`语句代码块的局部变量。在`if`和`switch`语句中使用的变量的作用域将在各自的块之外失效。可以通过以下易于理解的示例更好地理解，如下所示：
- en: '[PRE17]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The preceding code can be compiled and the output can be viewed with the following
    commands:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码可以编译，并且可以使用以下命令查看输出：
- en: '[PRE18]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The output of the preceding program is as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 上述程序的输出如下：
- en: '[PRE19]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Template type auto-deduction for class templates
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类模板的模板类型自动推断
- en: 'I''m sure you will love what you are about to see in the sample code.  Though
    templates are quite useful, a lot of people don''t like it due to its tough and
    weird syntax. But you don''t have to worry anymore; take a look at the following
    code snippet:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信你会喜欢你即将在示例代码中看到的内容。虽然模板非常有用，但很多人不喜欢它，因为它的语法很难和奇怪。但是你不用担心了；看看下面的代码片段：
- en: '[PRE20]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The preceding code can be compiled and the output can be viewed with the following
    commands:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码可以编译，并且可以使用以下命令查看输出：
- en: '[PRE21]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The output of the program is as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 程序的输出如下：
- en: '[PRE22]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Inline variables
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内联变量
- en: 'Just like the inline function in C++, you could now use inline variable definitions.
    This comes in handy to initialize static variables, as shown in the following
    sample code:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 就像C++中的内联函数一样，现在您可以使用内联变量定义。这对初始化静态变量非常方便，如下面的示例代码所示：
- en: '[PRE23]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The preceding code can be compiled and the output can be viewed with the following
    commands:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码可以编译，并且可以使用以下命令查看输出：
- en: '[PRE24]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The output of the preceding code is as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出如下：
- en: '[PRE25]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Summary
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you got to know interesting new features introduced in C++17\.
    You learned the super simple C++17 nested namespace syntax. You also learned datatype
    detection with a braced initializer list and the new rule imposed in the C++17
    standard.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了C++17引入的有趣的新特性。您学会了超级简单的C++17嵌套命名空间语法。您还学会了使用大括号初始化列表进行数据类型检测以及C++17标准中引入的新规则。
- en: You also noticed that `static_assert` can be done without assert failure messages.
    Also, using `std::invoke()`, you can now invoke global functions, function pointers,
    member functions, and static class member functions. And, using structured binding,
    you could now initialize multiple variables with a return value.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 您还注意到，`static_assert`可以在没有断言失败消息的情况下完成。此外，使用`std::invoke()`，您现在可以调用全局函数、函数指针、成员函数和静态类成员函数。并且，使用结构化绑定，您现在可以用返回值初始化多个变量。
- en: You also learned that the `if` and `switch` statements can have a local-scoped
    variable right before the `if` condition and `switch` statements. You learned
    about auto type detection of class templates. Lastly, you used `inline` variables.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 您还学到了`if`和`switch`语句可以在`if`条件和`switch`语句之前有一个局部作用域的变量。您了解了类模板的自动类型检测。最后，您使用了`inline`变量。
- en: There are many more C++17 features, but this chapter attempts to cover the most
    useful features that might be required for most of the developers.  In the next
    chapter, you will be learning about the Standard Template Library.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: C++17有许多更多的特性，但本章试图涵盖大多数开发人员可能需要的最有用的特性。在下一章中，您将学习标准模板库。
