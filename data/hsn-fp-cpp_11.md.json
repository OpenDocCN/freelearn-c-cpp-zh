["```cpp\nTEST_CASE(\"Greater Than\"){\n    int first = 3;\n    int second = 2;\n\n    bool result = greater<int>()(first, second);\n\n    CHECK(result);\n}\n```", "```cpp\nTEST_CASE(\"Not Greater Than when first is less than second\"){\n    int first = 2;\n    int second = 3;\n\n    bool result = greater<int>()(first, second);\n\n    CHECK_FALSE(result);\n}\n\nTEST_CASE(\"Not Greater Than when first equals second\"){\n    int first = 2;\n\n    bool result = greater<int>()(first, first);\n\n    CHECK_FALSE(result);\n}\n```", "```cpp\nTEST_CASE(\"Greater than\") {\n    struct Data {\n        int first;\n        int second;\n        bool expected;\n } data;\n\n    SUBCASE(\"2 is greater than 1\") { data.first = 2; data.second = 1; \n        data.expected = true; }\n    SUBCASE(\"2 is not greater than 2\") { data.first = 2; data.second = \n         2; data.expected = false; }\n    SUBCASE(\"2 is not greater than 3\") { data.first = 2; data.second = \n         3; data.expected = false; }\n\n    CAPTURE(data);\n\n    CHECK_EQ(greaterThan(data.first, data.second), data.expected);\n}\n```", "```cpp\nCase 1: Alice wins\n\nInputs:\n Alice: 2\u2660, 3\u2660, 4\u2660, 5\u2660, 6\u2660\n Bob: 2\u2663, 4\u2666, 7\u2665, 9\u2660, A\u2665\n\nOutput:\n Alice wins with straight flush\n\nCase 2: Bob wins\n\nInputs:\n    Alice: 2\u2660, 3\u2660, 4\u2660, 5\u2660, 9\u2660\n    Bob: 2\u2663, 3\u2663, 4\u2663, 5\u2663, 6\u2663\n\nOutput:\n    Bob wins with straight flush\n\nCase 3: Alice wins with a higher straight flush\n\nInputs:\n    Alice: 3\u2660, 4\u2660, 5\u2660, 6\u2660, 7\u2660\n    Bob: 2\u2663, 3\u2663, 4\u2663, 5\u2663, 6\u2663\n\nOutput:\n    Alice wins with straight flush\n\nCase 4: Draw\n\nInputs:\n    Alice: 3\u2660, 4\u2660, 5\u2660, 6\u2660, 7\u2660\n    Bob: 3\u2663, 4\u2663, 5\u2663, 6\u2663, 7\u2663\n\nOutput:\n    Draw (equal straight flushes)\n\nCase 5: Undecided\n\nInputs:\n    Alice: 3\u2660, 3\u2663, 5\u2660, 6\u2660, 7\u2660\n    Bob: 3\u2663, 4\u2663, 6\u2663, 6\u2665, 7\u2663\n\nOutput:\n    Not implemented yet.\n\n```", "```cpp\nCase 1: Alice wins\n\nInputs:\n Alice: 2\u2660, 3\u2660, 4\u2660, 5\u2660, 6\u2660\n Bob: 2\u2663, 4\u2666, 7\u2665, 9\u2660, A\u2665\n\nOutput:\n Alice wins with straight flush\n```", "```cpp\nTEST_CASE(\"Alice wins with straight flush\"){\n    vector<string> aliceHand{\"2\u2660\", \"3\u2660\", \"4\u2660\", \"5\u2660\", \"6\u2660\"};\n    vector<string> bobHand{\"2\u2663\", \"4\u2666\", \"7\u2665\", \"9\u2660\", \"A\u2665\"};\n\n    auto result = comparePokerHands(aliceHand, bobHand);\n\n    CHECK_EQ(\"Alice wins with straight flush\", result);\n}\n```", "```cpp\nauto comparePokerHands = [](const auto& aliceHand, const auto& bobHand){\n    return \"\";\n};\n```", "```cpp\nauto comparePokerHands = [](const auto& aliceHand, const auto& bobHand){\n    return \"Alice wins with straight flush\";\n};\n```", "```cpp\nauto comparePokerHands = [](const auto& /*aliceHand*/, const auto&  \n    /*bobHand*/){\n        return \"Alice wins with straight flush\";\n};\n```", "```cpp\nTEST_CASE(\"Alice wins with straight flush\"){\n    vector<string> aliceHand;\n    const vector<string> bobHand {\"2\u2663\", \"4\u2666\", \"7\u2665\", \"9\u2660\", \"A\u2665\"};\n\n    SUBCASE(\"2 based straight flush\"){\n        aliceHand = {\"2\u2660\", \"3\u2660\", \"4\u2660\", \"5\u2660\", \"6\u2660\"};\n    };\n    SUBCASE(\"3 based straight flush\"){\n        aliceHand = {\"3\u2660\", \"4\u2660\", \"5\u2660\", \"6\u2660\", \"7\u2660\"};\n    };\n    SUBCASE(\"4 based straight flush\"){\n        aliceHand = {\"4\u2660\", \"5\u2660\", \"6\u2660\", \"7\u2660\", \"8\u2660\"};\n    };\n    SUBCASE(\"10 based straight flush\"){\n        aliceHand = {\"T\u2660\", \"J\u2660\", \"Q\u2660\", \"K\u2660\", \"A\u2660\"};\n    };\n\n    CAPTURE(aliceHand);\n\n    auto result = comparePokerHands(aliceHand, bobHand);\n\n    CHECK_EQ(\"Alice wins with straight flush\", result);\n}\n```", "```cpp\nCase: Bob wins\n\nInputs:\n Alice: 2\u2660, 3\u2660, 4\u2660, 5\u2660, 9\u2660\n Bob: 2\u2663, 3\u2663, 4\u2663, 5\u2663, 6\u2663\n\nOutput:\n Bob wins with straight flush\n```", "```cpp\nTEST_CASE(\"Bob wins with straight flush\"){\n    const vector<string> aliceHand{\"2\u2660\", \"3\u2660\", \"4\u2660\", \"5\u2660\", \"9\u2660\"};\n    vector<string> bobHand;\n\n    SUBCASE(\"2 based straight flush\"){\n        bobHand = {\"2\u2663\", \"3\u2663\", \"4\u2663\", \"5\u2663\", \"6\u2663\"};\n    };\n\n    CAPTURE(bobHand);\n\n    auto result = comparePokerHands(aliceHand, bobHand);\n\n    CHECK_EQ(\"Bob wins with straight flush\", result);\n}\n```", "```cpp\nauto comparePokerHands = [](const vector<string>& /*aliceHand*/, const vector<string>& bobHand){\n    const vector<string> winningBobHand {\"2\u2663\", \"3\u2663\", \"4\u2663\", \"5\u2663\", \"6\u2663\"};\n    if(bobHand == winningBobHand){\n        return \"Bob wins with straight flush\";\n    }\n    return \"Alice wins with straight flush\";\n};\n```", "```cpp\nusing Hand = vector<string>;\n\nauto comparePokerHands = [](const Hand& /*aliceHand*/, const Hand& bobHand){\n    Hand winningBobHand {\"2\u2663\", \"3\u2663\", \"4\u2663\", \"5\u2663\", \"6\u2663\"};\n    if(bobHand == winningBobHand){\n        return \"Bob wins with straight flush\";\n    }\n    return \"Alice wins with straight flush\";\n};\n\nTEST_CASE(\"Bob wins with straight flush\"){\n    Hand aliceHand{\"2\u2660\", \"3\u2660\", \"4\u2660\", \"5\u2660\", \"9\u2660\"};\n    Hand bobHand;\n\n    SUBCASE(\"2 based straight flush\"){\n        bobHand = {\"2\u2663\", \"3\u2663\", \"4\u2663\", \"5\u2663\", \"6\u2663\"};\n    };\n\n    CAPTURE(bobHand);\n\n    auto result = comparePokerHands(aliceHand, bobHand);\n\n    CHECK_EQ(\"Bob wins with straight flush\", result);\n}\n```", "```cpp\nTEST_CASE(\"Hand is straight flush\"){\n    Hand hand;\n\n    SUBCASE(\"2 based straight flush\"){\n        hand = {\"2\u2663\", \"3\u2663\", \"4\u2663\", \"5\u2663\", \"6\u2663\"};\n    };\n\n    CAPTURE(hand);\n\n    CHECK(isStraightFlush(hand));\n}\n```", "```cpp\nauto isStraightFlush = [](const Hand&){\n    return true;\n};\n```", "```cpp\nauto isStraightFlush = [](const Hand& hand){\n    return has5Cards(hand) && \n        isSameSuit(allSuits(hand)) && \n        areValuesConsecutive(allValuesInOrder(hand));\n};\n```", "```cpp\nauto has5Cards = [](const Hand& hand){\n    return hand.size() == 5;\n};\n```", "```cpp\nusing Card = string;\nauto suitOf = [](const Card& card){\n    return card.substr(1);\n};\n\nauto allSuits = [](Hand hand){\n    return transformAll<vector<string>>(hand, suitOf);\n};\n\nauto isSameSuit = [](const vector<string>& allSuits){\n    return std::equal(allSuits.begin() + 1, allSuits.end(),  \n        allSuits.begin());\n};\n```", "```cpp\nauto valueOf = [](const Card& card){\n    return charsToCardValues.at(card.front());\n};\n\nauto allValuesInOrder = [](const Hand& hand){\n    auto theValues = transformAll<vector<int>>(hand, valueOf);\n    sort(theValues.begin(), theValues.end());\n    return theValues;\n};\n\nauto toRange = [](const auto& collection, const int startValue){\n    vector<int> range(collection.size());\n    iota(begin(range), end(range), startValue);\n    return range;\n};\n\nauto areValuesConsecutive = [](const vector<int>& allValuesInOrder){\n    vector<int> consecutiveValues = toRange(allValuesInOrder, \n        allValuesInOrder.front());\n\n    return consecutiveValues == allValuesInOrder;\n};\n```", "```cpp\nconst std::map<char, int> charsToCardValues = {\n    {'1', 1},\n    {'2', 2},\n    {'3', 3},\n    {'4', 4},\n    {'5', 5},\n    {'6', 6},\n    {'7', 7},\n    {'8', 8},\n    {'9', 9},\n    {'T', 10},\n    {'J', 11},\n    {'Q', 12},\n    {'K', 13},\n    {'A', 14},\n};\n```", "```cpp\nTEST_CASE(\"Hand is straight flush\"){\n    Hand hand;\n\n    SUBCASE(\"2 based straight flush\"){\n        hand = {\"2\u2663\", \"3\u2663\", \"4\u2663\", \"5\u2663\", \"6\u2663\"};\n    };\n\n    SUBCASE(\"3 based straight flush\"){\n        hand = {\"3\u2663\", \"4\u2663\", \"5\u2663\", \"6\u2663\", \"7\u2663\"};\n    };\n\n    SUBCASE(\"4 based straight flush\"){\n        hand = {\"4\u2663\", \"5\u2663\", \"6\u2663\", \"7\u2663\", \"8\u2663\"};\n    };\n\n    SUBCASE(\"4 based straight flush on hearts\"){\n        hand = {\"4\u2665\", \"5\u2665\", \"6\u2665\", \"7\u2665\", \"8\u2665\"};\n    };\n\n    SUBCASE(\"10 based straight flush on hearts\"){\n        hand = {\"T\u2665\", \"J\u2665\", \"Q\u2665\", \"K\u2665\", \"A\u2665\"};\n    };\n\n    CAPTURE(hand);\n\n    CHECK(isStraightFlush(hand));\n}\n```", "```cpp\nTEST_CASE(\"Hand is not straight flush\"){\n    Hand hand;\n\n    SUBCASE(\"Would be straight flush except for one card from another \n        suit\"){\n            hand = {\"2\u2663\", \"3\u2663\", \"4\u2663\", \"5\u2663\", \"6\u2660\"};\n    };\n\n    SUBCASE(\"Would be straight flush except not enough cards\"){\n        hand = {\"2\u2663\", \"3\u2663\", \"4\u2663\", \"5\u2663\"};\n    };\n\n    SUBCASE(\"Would be straight flush except too many cards\"){\n        hand = {\"2\u2663\", \"3\u2663\", \"4\u2663\", \"5\u2663\", \"6\u2660\", \"7\u2660\"};\n    };\n\n    SUBCASE(\"Empty hand\"){\n        hand = {};\n    };\n\n    CAPTURE(hand);\n\n    CHECK(!isStraightFlush(hand));\n}\n```", "```cpp\nauto comparePokerHands = [](const Hand& /*aliceHand*/, const Hand& bobHand){\n    const Hand winningBobHand {\"2\u2663\", \"3\u2663\", \"4\u2663\", \"5\u2663\", \"6\u2663\"};\n    if(bobHand == winningBobHand){\n        return \"Bob wins with straight flush\";\n    }\n    return \"Alice wins with straight flush\";\n};\n```", "```cpp\nauto comparePokerHands = [](Hand /*aliceHand*/, Hand bobHand){\n    if(isStraightFlush(bobHand)) {\n        return \"Bob wins with straight flush\";\n    }\n    return \"Alice wins with straight flush\";\n};\n```", "```cpp\nTEST_CASE(\"Bob wins with straight flush\"){\n    Hand aliceHand{\"2\u2660\", \"3\u2660\", \"4\u2660\", \"5\u2660\", \"9\u2660\"};\n    Hand bobHand;\n\n    SUBCASE(\"2 based straight flush\"){\n        bobHand = {\"2\u2663\", \"3\u2663\", \"4\u2663\", \"5\u2663\", \"6\u2663\"};\n    };\n\n    SUBCASE(\"3 based straight flush\"){\n        bobHand = {\"3\u2663\", \"4\u2663\", \"5\u2663\", \"6\u2663\", \"7\u2663\"};\n    };\n\n    SUBCASE(\"10 based straight flush\"){\n        bobHand = {\"T\u2663\", \"J\u2663\", \"Q\u2663\", \"K\u2663\", \"A\u2663\"};\n    };\n\n    CAPTURE(bobHand);\n\n    auto result = comparePokerHands(aliceHand, bobHand);\n\n    CHECK_EQ(\"Bob wins with straight flush\", result);\n}\n```", "```cpp\nCase: Alice wins with a higher straight flush\n\nInputs:\n Alice: 3\u2660, 4\u2660, 5\u2660, 6\u2660, 7\u2660\n Bob: 2\u2663, 3\u2663, 4\u2663, 5\u2663, 6\u2663\n\nOutput:\n Alice wins with straight flush\n```", "```cpp\nTEST_CASE(\"Alice and Bob have straight flushes but Alice wins with higher straight flush\"){\n    Hand aliceHand;\n    Hand bobHand{\"2\u2663\", \"3\u2663\", \"4\u2663\", \"5\u2663\", \"6\u2663\"};\n\n    SUBCASE(\"3 based straight flush\"){\n        aliceHand = {\"3\u2660\", \"4\u2660\", \"5\u2660\", \"6\u2660\", \"7\u2660\"};\n    };\n\n    CAPTURE(aliceHand);\n\n    auto result = comparePokerHands(aliceHand, bobHand);\n\n    CHECK_EQ(\"Alice wins with straight flush\", result);\n}\n```", "```cpp\nauto comparePokerHands = [](const Hand& aliceHand, const Hand& bobHand){\n    if(isStraightFlush(bobHand) && isStraightFlush(aliceHand)){\n         return \"Alice wins with straight flush\";\n    }\n\n    if(isStraightFlush(bobHand)) {\n        return \"Bob wins with straight flush\";\n    }\n\n    return \"Alice wins with straight flush\";\n};\n```", "```cpp\nCase: Bob wins with a higher straight flush\n\nInputs:\n Alice: 3\u2660, 4\u2660, 5\u2660, 6\u2660, 7\u2660\n Bob: 4\u2663, 5\u2663, 6\u2663, 7\u2663, 8\u2663\n\nOutput:\n Bob wins with straight flush\n```", "```cpp\nTEST_CASE(\"Alice and Bob have straight flushes but Bob wins with higher \n    straight flush\"){\n        Hand aliceHand = {\"3\u2660\", \"4\u2660\", \"5\u2660\", \"6\u2660\", \"7\u2660\"};\n        Hand bobHand;\n\n        SUBCASE(\"3 based straight flush\"){\n            bobHand = {\"4\u2663\", \"5\u2663\", \"6\u2663\", \"7\u2663\", \"8\u2663\"};\n    };\n\n    CAPTURE(bobHand);\n\n    auto result = comparePokerHands(aliceHand, bobHand);\n\n    CHECK_EQ(\"Bob wins with straight flush\", result);\n}\n```", "```cpp\nauto compareStraightFlushes = [](const Hand& first, const Hand& second){\n    int firstHandValue = allValuesInOrder(first).front();\n    int secondHandValue = allValuesInOrder(second).front();\n    if(firstHandValue > secondHandValue) return 1;\n    if(secondHandValue > firstHandValue) return -1;\n    return 0;\n};\n```", "```cpp\nauto comparePokerHands = [](const Hand& aliceHand, const Hand& bobHand){\n    if(isStraightFlush(bobHand) && isStraightFlush(aliceHand)){\n        int whichIsHigher = compareStraightFlushes(aliceHand, bobHand);\n        if(whichIsHigher == 1) return \"Alice wins with straight flush\";\n        if(whichIsHigher == -1) return \"Bob wins with straight flush\";\n    }\n\n    if(isStraightFlush(bobHand)) {\n        return \"Bob wins with straight flush\";\n    }\n\n    return \"Alice wins with straight flush\";\n};\n```", "```cpp\nTEST_CASE(\"Draw due to equal straight flushes\"){\n    Hand aliceHand;\n    Hand bobHand;\n\n    SUBCASE(\"3 based straight flush\"){\n        aliceHand = {\"3\u2660\", \"4\u2660\", \"5\u2660\", \"6\u2660\", \"7\u2660\"};\n    };\n\n    CAPTURE(aliceHand);\n    bobHand = aliceHand;\n\n    auto result = comparePokerHands(aliceHand, bobHand);\n\n    CHECK_EQ(\"Draw\", result);\n}\n```", "```cpp\nauto comparePokerHands = [](Hand aliceHand, Hand bobHand){\n    if(isStraightFlush(bobHand) && isStraightFlush(aliceHand)){\n        int whichIsHigher = compareStraightFlushes(aliceHand, bobHand);\n        if(whichIsHigher == 1) return \"Alice wins with straight flush\";\n        if(whichIsHigher == -1) return \"Bob wins with straight flush\";\n        return \"Draw\";\n    }\n\n    if(isStraightFlush(bobHand)) {\n        return \"Bob wins with straight flush\";\n    }\n\n    return \"Alice wins with straight flush\";\n};\n```"]