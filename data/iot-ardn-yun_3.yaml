- en: Chapter 3. Making Your Own Cloud-connected Camera
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章：制作自己的云连接摄像头
- en: In this project, we are going to build a security camera that automatically
    uploads pictures to the Web. We will connect a camera to the Arduino Yún board,
    and use its powerful features to control this camera easily and upload pictures
    to the Web. What we are going to build is a system that can detect motion, and
    if some motion is detected, can automatically take a picture and save it both
    on the local SD card attached to the Yún board and to a cloud storage; in our
    case, Dropbox. We are also going to make the camera stream a video live on a private
    YouTube feed.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将构建一个自动上传照片到网络的监控摄像头。我们将把摄像头连接到Arduino Yún板，并利用其强大的功能轻松控制这个摄像头并上传照片到网络。我们将构建的是一个能够检测运动的系统，如果检测到运动，可以自动拍照，并将照片保存在Yún板上的本地SD卡和云端存储中；在我们的案例中是Dropbox。我们还将使摄像头在私人YouTube频道上实时直播视频。
- en: Getting started
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始
- en: 'Let''s see what we are going to do in this project in more detail:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地看看这个项目中我们将做什么：
- en: First, we are going to build the hardware part of the project with a typical
    USB camera, a PIR motion sensor, and one SD card.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，我们将使用一个典型的USB摄像头、一个PIR运动传感器和一张SD卡来构建项目的硬件部分。
- en: Then, we will write some code to test all the hardware connections of the project.
    We'll check whether the motion sensor is working correctly and try to take a picture
    with the camera while it is connected to the Arduino Yún board.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们将编写一些代码来测试项目的所有硬件连接。我们将检查运动传感器是否工作正常，并尝试在连接到Arduino Yún板时用摄像头拍照。
- en: After testing the hardware, we are going to build the first application, which
    captures pictures whenever some motion is detected and automatically stores these
    pictures on the SD card.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在测试硬件之后，我们将构建第一个应用程序，该程序在检测到运动时捕捉照片，并自动将这些照片存储在SD卡上。
- en: Right after building this simple local application, we are going to connect
    the project to the cloud. The project will do the same as in the earlier case,
    take pictures when some motion is detected, but this time the pictures will also
    be uploaded to your Dropbox folder. This way, the pictures can be seen in real
    time from anywhere, as you can log in to Dropbox from any web browser.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在构建这个简单的本地应用程序之后，我们将把项目连接到云端。项目将执行与之前案例相同的功能，当检测到运动时拍照，但这次照片也将上传到你的Dropbox文件夹。这样，你可以从任何地方实时查看照片，因为你可以从任何网络浏览器登录到Dropbox。
- en: Finally, we are going to stream a video to the Web, so you can always check
    what's going on in your home from a mobile phone or tablet, wherever you are in
    the world. For this application, we are going to install a streaming library on
    the Yún board and make it continuously stream a video over Wi-Fi. This stream
    will be acquired by your computer and sent to YouTube via a dedicated software.
    On YouTube, we will then be able to access this live stream just as you would
    watch a typical YouTube video.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们将把视频流式传输到Web上，这样你就可以随时随地通过手机或平板电脑检查家里的情况。为此，我们将在Yún板上安装一个流媒体库，并使其通过Wi-Fi持续流式传输视频。这个流将被你的电脑获取，并通过专用软件发送到YouTube。在YouTube上，我们就可以像观看典型的YouTube视频一样访问这个实时流。
- en: The required hardware and software components
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 所需的硬件和软件组件
- en: 'First, let''s see which components we need for the project. Apart from the
    Yún board, you will need three components: a USB camera, a PIR motion sensor,
    and an SD card. We will only make direct connections to Yún in this part, so you
    won''t need a breadboard to make electrical connections.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看我们需要哪些组件来完成这个项目。除了Yún板之外，你还需要三个组件：一个USB摄像头、一个PIR运动传感器和一张SD卡。在这个部分，我们将直接连接到Yún，所以你不需要面包板来制作电气连接。
- en: The most important component of this project is the USB camera. We are using
    a standard USB webcam from Logitech, the C700 model, which can record pictures
    up to the HD resolution. Of course, you can use other cameras if you already have
    one on your desk. Make sure that the camera is compatible with **USB Video Class**
    (**UVC**). Most of the recent webcams are compatible with this protocol. It might
    work with a camera that is not officially compatible with UVC, but there is no
    guarantee. You can find a list of all UVC compatible cameras at [http://en.wikipedia.org/wiki/List_of_USB_video_class_devices](http://en.wikipedia.org/wiki/List_of_USB_video_class_devices).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目最重要的组件是USB相机。我们使用的是罗技的标准USB网络摄像头，型号为C700，它可以记录高达高清分辨率的图片。当然，如果你已经在你的桌子上有一个相机，你也可以使用其他相机。确保相机与**USB视频类**（**UVC**）兼容。大多数最新的网络摄像头都与此协议兼容。它可能也适用于未官方兼容UVC的相机，但没有保证。你可以在[http://en.wikipedia.org/wiki/List_of_USB_video_class_devices](http://en.wikipedia.org/wiki/List_of_USB_video_class_devices)找到所有UVC兼容相机的列表。
- en: 'Also, try to choose a camera with at least HD resolution, so you can get nice
    and clear pictures. It''s not so important for the streaming part, but can be
    great if you want to use this project for other applications than security, for
    example, to create time-lapse videos. The following is an image of the USB camera
    we are using, the C700 USB webcam from Logitech:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，尽量选择至少具有高清分辨率的相机，这样你可以获得清晰漂亮的图片。对于流媒体部分来说这并不那么重要，但如果你想将这个项目用于除了安全以外的其他应用，比如创建时间流逝视频，那就太棒了。以下是我们使用的USB相机的图片，罗技的C700
    USB网络摄像头：
- en: '![The required hardware and software components](img/8007OS_03_01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![所需的硬件和软件组件](img/8007OS_03_01.jpg)'
- en: 'Then, there is the PIR motion sensor. This sensor is a really inexpensive sensor
    that uses infrared pictures to detect motion in a room from anything that emits
    heat, such as humans. We could have used the camera directly to detect motion,
    but that would have not been so efficient. The camera uses quite a lot of power
    when it is on, whereas a PIR motion sensor uses nearly no power. It would also
    have been more difficult to write the software required to detect motion efficiently
    from the camera recording. We used a PIR motion sensor from Parallax, which you
    can see in the following image:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，还有PIR运动传感器。这个传感器是一个非常便宜的传感器，它使用红外图像来检测房间中任何散发热量的物体，例如人类。我们本可以直接使用相机来检测运动，但那样可能不太高效。当相机开启时，它消耗相当多的电力，而PIR运动传感器几乎不耗电。从相机记录中高效地检测运动所需的软件编写也会更困难。我们使用了一个来自Parallax的PIR运动传感器，你可以在下面的图片中看到：
- en: '![The required hardware and software components](img/8007OS_03_02.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![所需的硬件和软件组件](img/8007OS_03_02.jpg)'
- en: Again, you can use other brands of PIR sensors. The main thing to consider is
    that it should work with 5V voltage levels because that is the voltage level used
    by the Yún. Most sensors work with both 3.3V and 5V voltage levels, so you shouldn't
    have many problems with this characteristic. When motion is detected, it should
    simply put a logical high level on its signal pin.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，你也可以使用其他品牌的PIR传感器。主要考虑的是它应该能够与5V电压等级工作，因为Yún使用的就是这种电压等级。大多数传感器都适用于3.3V和5V电压等级，所以你应该不会在这个特性上遇到太多问题。当检测到运动时，它应该简单地在其信号引脚上输出逻辑高电平。
- en: For the SD card, we used a standard micro SD card. Usually, you will have one
    already in your digital camera or smartphone. You will need to format it correctly
    so that the Yún can use it. We recommend that you use the official SD card formatter
    from the SD card association, see [https://www.sdcard.org/downloads/formatter_4/](https://www.sdcard.org/downloads/formatter_4/).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于SD卡，我们使用了一个标准的micro SD卡。通常，你已经在你的数码相机或智能手机中有一个了。你需要正确格式化它，以便Yún可以使用它。我们建议你使用SD卡协会的官方SD卡格式化工具，请参阅[https://www.sdcard.org/downloads/formatter_4/](https://www.sdcard.org/downloads/formatter_4/)。
- en: Now, on the software side, you will need a bit more than just the Arduino IDE.
    We are going to install the required software for the camera directly on the Yún
    board when we connect to it via SSH, but you will need the Temboo Python SDK to
    upload pictures on to Dropbox. You can find the SDK at [https://www.temboo.com/download](https://www.temboo.com/download).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在软件方面，你需要的不仅仅是Arduino IDE。当我们通过SSH连接到它时，我们将直接在Yún板上安装所需的相机软件。但是，你需要Temboo
    Python SDK来上传图片到Dropbox。你可以在[https://www.temboo.com/download](https://www.temboo.com/download)找到SDK。
- en: Then, you also need to have a Dropbox account, so you can upload pictures on
    to it. You can simply create an account by going to [https://www.dropbox.com/home](https://www.dropbox.com/home).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您还需要拥有一个 Dropbox 账户，以便您可以在上面上传图片。您只需访问 [https://www.dropbox.com/home](https://www.dropbox.com/home)
    即可简单地创建一个账户。
- en: Once your account is created, you need to create an app that will be used by
    your project. This basically means that you have to authorize the project you
    are going to build in this chapter to automatically send pictures to your Dropbox
    account without having to enter your login and password every time. You will also
    be given all the required information (such as an API key) that we will enter
    later in the Python script on Yún.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的账户创建完成，您需要创建一个将被您的项目使用的应用。这基本上意味着您必须授权您将在本章中构建的项目，以便自动将图片发送到您的 Dropbox 账户，而无需每次都输入登录名和密码。您还将获得所有所需的信息（例如
    API 密钥），我们将在 Yún 上的 Python 脚本中稍后输入。
- en: 'Perform the following steps to create an app:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以创建应用：
- en: To create an app, first go to [https://www.dropbox.com/developers/apps](https://www.dropbox.com/developers/apps).
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建应用，首先访问 [https://www.dropbox.com/developers/apps](https://www.dropbox.com/developers/apps)。
- en: Then, click on **Create app** in the top-right corner of the window. You can
    now choose the type of app you want to create. In our case, we want to use the
    **Dropbox API** directly, as shown in the following screenshot:![The required
    hardware and software components](img/8007OS_03_03.jpg)
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击窗口右上角的 **创建应用**。您现在可以选择要创建的应用类型。在我们的案例中，我们想直接使用 **Dropbox API**，如下面的截图所示：![所需的硬件和软件组件](img/8007OS_03_03.jpg)
- en: You will then be prompted to choose the kind of data your app needs to store.
    We want to upload pictures, so choose **Files and datastores**, as shown in the
    following screenshot:![The required hardware and software components](img/8007OS_03_04.jpg)
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，您将被提示选择您的应用需要存储的数据类型。我们想上传图片，所以选择 **文件和数据存储**，如下面的截图所示：![所需的硬件和软件组件](img/8007OS_03_04.jpg)
- en: You can then finish the process of creating your Dropbox app.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，您就可以完成创建 Dropbox 应用的流程。
- en: On the confirmation page that describes the app, you will need to write down
    the **App key** and **App secret**, which we will need for the rest of the project.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在描述应用的确认页面上，您需要记下 **应用密钥** 和 **应用密钥**，这些是我们将在整个项目中需要的。
- en: Also, make sure that the **Permission type** field is set to **App folder**.
    This will ensure that the pictures are uploaded to the folder dedicated to the
    app and that the Yún won't have access to the rest of your Dropbox folder.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，请确保 **权限类型** 字段设置为 **应用文件夹**。这将确保图片被上传到专门为应用设置的文件夹，并且 Yún 不会访问您的 Dropbox
    文件夹的其他部分。
- en: What you need to get now is the Token key and Token secret relative to your
    Dropbox app, so you can enter them later in the software of our project.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在需要获取与您的 Dropbox 应用相关的 Token 密钥和 Token 密钥，以便您可以在我们项目的软件中稍后输入它们。
- en: To get them, the first step is to go to the InitialiseOAuth Choreo on the Temboo
    website at [https://temboo.com/library/Library/Dropbox/OAuth/InitializeOAuth/](https://temboo.com/library/Library/Dropbox/OAuth/InitializeOAuth/).
    Here, you will need to enter the App key and App secret. This will generate some
    additional information such as a callback ID and a temporary token secret. You'll
    also be asked to visit a link to Dropbox to confirm the authentication.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要获取这些信息，首先需要访问 Temboo 网站上的 InitializeOAuth Choreo，网址为 [https://temboo.com/library/Library/Dropbox/OAuth/InitializeOAuth/](https://temboo.com/library/Library/Dropbox/OAuth/InitializeOAuth/)。在这里，您需要输入应用密钥和应用密钥。这将生成一些附加信息，例如回调
    ID 和临时令牌密钥。您还将被要求访问 Dropbox 的链接以确认身份验证。
- en: Finally, go to the FinalizeOAuth page to finish the process. You'll be asked
    to enter your App key, App secret, callback ID, and temporary token secret at
    [https://temboo.com/library/Library/Dropbox/OAuth/FinalizeOAuth/](https://temboo.com/library/Library/Dropbox/OAuth/FinalizeOAuth/).
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，转到 FinalizeOAuth 页面以完成流程。您将被要求在 [https://temboo.com/library/Library/Dropbox/OAuth/FinalizeOAuth/](https://temboo.com/library/Library/Dropbox/OAuth/FinalizeOAuth/)
    输入您的应用密钥、应用密钥、回调 ID 和临时令牌密钥。
- en: After this step, you'll be given your final Token key and Token secret. Write
    them down as you'll need them later.
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此步骤之后，您将获得最终的 Token 密钥和 Token 密钥。请将它们记下来，因为您稍后需要它们。
- en: Making hardware connections
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进行硬件连接
- en: 'It''s now time to assemble our project. As we are going to use most of the
    Yún''s connectivity, such as the USB port, it will be quite easy and quick to
    assemble the project. First, simply put the formatted micro SD card into the SD
    card reader of the Yún, which is located below the Yún board, as shown in the
    following image:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是组装我们的项目的时候了。由于我们将使用Yún的大部分连接性，例如USB端口，因此组装项目将非常简单快捷。首先，只需将格式化的micro SD卡放入Yún板下方的SD卡读卡器中，如下面的图像所示：
- en: '![Making hardware connections](img/8007OS_03_05.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![制作硬件连接](img/8007OS_03_05.jpg)'
- en: 'Then, plug the USB camera into the Yún USB port, as shown:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将USB摄像头插入Yún的USB端口，如下所示：
- en: '![Making hardware connections](img/8007OS_03_06.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![制作硬件连接](img/8007OS_03_06.jpg)'
- en: 'Finally, you need to connect the PIR motion sensor to the Yún board. It basically
    has three pins: VCC, GND, and SIG (signal pin). Connect VCC to the Yún''s 5V pin,
    GND to the Yún ground, and SIG to pin number 8 of the Yún. You should end up with
    a setup similar to the following image:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您需要将PIR运动传感器连接到Yún板。它基本上有三个引脚：VCC、GND和SIG（信号引脚）。将VCC连接到Yún的5V引脚，GND连接到Yún的地线，SIG连接到Yún的第8号引脚。您应该得到一个类似于以下图像的设置：
- en: '![Making hardware connections](img/8007OS_03_07.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![制作硬件连接](img/8007OS_03_07.jpg)'
- en: Finally, you can connect the Yún to your computer via a micro USB cable or power
    it with a USB adapter if you want to use the project remotely and upload the Arduino
    sketches via Wi-Fi.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您可以通过micro USB线将Yún连接到您的计算机，或者如果您想通过Wi-Fi远程使用项目并上传Arduino草图，可以使用USB适配器为其供电。
- en: Testing your hardware connections
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试您的硬件连接
- en: 'Now that all the connections are made, we can test the project. To get started,
    we will take care of the motion sensor. For this, we will write a very simple
    sketch that will only make use of the embedded Atmel microcontroller on the Yún
    board. We first need to declare the pin that the sensor is connected to, as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在所有的连接都已经完成，我们可以测试项目了。为了开始，我们将关注运动传感器。为此，我们将编写一个非常简单的草图，它将仅使用Yún板上的嵌入式Atmel微控制器。我们首先需要声明传感器连接到的引脚，如下所示：
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, in the `setup()` function, we will start the Serial connection, as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`setup()`函数中，我们将启动串行连接，如下所示：
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We can also set some delay before data is read from the sensor, as it needs
    some time to initialize and work correctly. In the `loop()` function, we continuously
    read the value from pin number 8\. Remember that the sensor will simply return
    a logical high state if some motion is detected and a low state otherwise. This
    means that we can store the sensor''s reading into a Boolean variable, as shown
    in the following line of code:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在从传感器读取数据之前设置一些延迟，因为传感器需要一些时间来初始化并正确工作。在`loop()`函数中，我们持续从第8号引脚读取值。记住，如果检测到运动，传感器将简单地返回逻辑高状态，否则返回低状态。这意味着我们可以将传感器的读数存储到布尔变量中，如下面的代码行所示：
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Every second, this value is then printed on the Serial monitor using the following
    lines of code:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 每秒钟，这个值将使用以下代码行在串行监视器上打印出来：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The complete code for this part can be found at [https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter3/pir_test](https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter3/pir_test).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分的完整代码可以在[https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter3/pir_test](https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter3/pir_test)找到。
- en: 'You can now upload the preceding code on to your Yún board. Open the Serial
    monitor and try to pass your hand in front of the sensor; you should see the value
    change instantly on the Serial monitor, as shown in the following screenshot:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以将前面的代码上传到您的Yún板上。打开串行监视器，尝试将手放在传感器前；你应该会看到串行监视器上的值立即改变，如下面的截图所示：
- en: '![Testing your hardware connections](img/8007OS_03_08.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![测试您的硬件连接](img/8007OS_03_08.jpg)'
- en: If you can see the values change instantly as you pass your hand in front of
    the sensor, this means that the Yún is wired correctly. You will also notice that
    the sensor turns red when it detects motion.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在传感器前移动手时看到值立即改变，这意味着Yún的接线是正确的。你也会注意到当检测到运动时，传感器会变红。
- en: Now we are going to test the USB camera. We can actually test the camera without
    writing any Arduino sketch. What we are going to do instead is connect directly
    to the Yún board via SSH. Indeed, the camera is interfaced directly to the Linux
    machine of the Yún via the USB port, so the Arduino sketch will later have to
    use the `Bridge` library in order to access the camera.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将测试 USB 摄像头。实际上，我们可以在不编写任何 Arduino 脚本的情况下测试摄像头。我们将要做的是通过 SSH 直接连接到 Yún 板。确实，摄像头是通过
    USB 端口直接连接到 Yún 的 Linux 机器的，因此 Arduino 脚本稍后必须使用 `Bridge` 库来访问摄像头。
- en: 'For now, just go to a terminal window (the typical terminal that comes installed
    with OS X or Linux, or install one such as HyperTerminal if you are under Windows),
    and type the following command:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，只需打开一个终端窗口（通常是随操作系统 X 或 Linux 安装的典型终端，或者如果您在 Windows 下，可以安装一个类似 HyperTerminal
    的终端），然后输入以下命令：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Of course, you will have to put the name you gave to your own Yún in place of
    `yourYunName`. For example, the name of my Yún is `myarduinoyun`; therefore, I
    need to type `myarduinoyun.local`. This will establish a direct connection with
    the Linux machine of the Yún.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您必须将您为您的 Yún 给定的名称替换为 `yourYunName`。例如，我的 Yún 的名称是 `myarduinoyun`；因此，我需要输入
    `myarduinoyun.local`。这将建立与 Yún 的 Linux 机器的直接连接。
- en: 'You will then be prompted to enter the password that you chose for your Yún.
    If it works, you should see the following screenshot being displayed on your terminal,
    which indicates that you are now working directly on the Yún:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您将被提示输入为您的 Yún 选择密码。如果一切正常，您应该在终端上看到以下截图显示，这表明您现在正在直接在 Yún 上工作：
- en: '![Testing your hardware connections](img/8007OS_03_09.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![测试您的硬件连接](img/8007OS_03_09.jpg)'
- en: 'You can access all the functions from your Yún Linux machine. We are now going
    to install the required software for the camera. This requires the Arduino Yún
    to be connected to the Internet so that it can get the required packages, as described
    in the following steps:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您的 Yún Linux 机器访问所有功能。我们现在将安装摄像头所需的软件。这需要将 Arduino Yún 连接到互联网，以便它能够获取所需的软件包，具体步骤如下：
- en: 'The process starts by updating the package manager, `opkg`, as follows:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此过程首先通过更新软件包管理器 `opkg` 来开始，如下所示：
- en: '[PRE5]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Install the UVC drivers, as follows:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下步骤安装 UVC 驱动程序：
- en: '[PRE6]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Install the `python-openssl` package that we will use later in the project,
    as shown in the following command:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装我们将在项目中使用的 `python-openssl` 软件包，如下所示：
- en: '[PRE7]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Finally, you can install the `fswebcam` software that we will use to take pictures,
    as shown in the following command:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，您可以安装我们将用于拍照的 `fswebcam` 软件，如下所示：
- en: '[PRE8]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Once this part is done and the software is installed on the Yún, we can test
    the camera and take a picture. To also test whether the SD card is working at
    the same time, go over to the SD card folder, which is usually called `sda1`,
    using the following command:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦这部分完成并且软件已安装在 Yún 上，我们就可以测试摄像头并拍照。为了同时测试 SD 卡是否正常工作，请转到 SD 卡文件夹，通常称为 `sda1`，使用以下命令：
- en: '[PRE9]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You can now take a picture by typing the following command:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在可以通过输入以下命令来拍照：
- en: '[PRE10]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You should see some message being printed that starts with the following:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该会看到一些以以下内容开始的打印消息：
- en: '[PRE11]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Some errors might be printed as well, but this doesn't matter for the process
    of taking a picture.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会打印出一些错误信息，但这对于拍照过程没有影响。
- en: 'To check whether this works correctly, you can first check whether there is
    a file named `test.png` located on the SD card. To do this, you can simply type
    the following command:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检查是否正确工作，您首先可以检查 SD 卡上是否存在名为 `test.png` 的文件。为此，您可以简单地输入以下命令：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The preceding command will print the list of all the files in the current folder;
    in the present case, the SD card. You should see at least a file named `test.png`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将打印当前文件夹（在本例中为 SD 卡）中所有文件的列表。您应该至少看到一个名为 `test.png` 的文件。
- en: 'Now, to check that the picture is fine and not corrupted, you can, for example,
    remove the SD card from the Yún (by unmounting it first using the `unmount/dev/sda1`
    command), and plug it directly to your computer using a micro SD card to normal
    SD card adapter. You should see the following screenshot in your browser (we already
    added the files that are required for the next sections of the project at this
    point, which explains the other files located on the SD card):'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了检查图片是否完好且未被损坏，你可以例如，先使用`unmount/dev/sda1`命令卸载Yún上的SD卡，然后使用微型SD卡到普通SD卡适配器直接将其连接到你的电脑。你应该能在浏览器中看到以下截图（我们已经在这一点上添加了项目下一部分所需的文件，这解释了SD卡上其他文件的位置）：
- en: '![Testing your hardware connections](img/8007OS_03_10.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![测试你的硬件连接](img/8007OS_03_10.jpg)'
- en: If you see a picture on your SD card at this point, open it to check that it
    was correctly taken. If that's the case, congratulations! Everything is now set
    up for you to write exciting applications with this project. If you can't see
    a picture at this point, the first step is to repeat the whole process again.
    Be careful to actually unmount the SD card after the picture is taken. You can
    also plug the camera directly to your computer to check whether the problem comes
    from the camera itself.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你此时在SD卡上看到一张图片，请打开它以检查它是否被正确拍摄。如果是这样，恭喜！现在一切都已经设置好了，你可以用这个项目编写令人兴奋的应用程序。如果你此时看不到图片，第一步是重复整个过程。请注意，在拍摄图片后，实际上要卸载SD卡。你也可以直接将相机连接到电脑上，以检查问题是否来自相机本身。
- en: Recording pictures when motion is detected
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测到运动时记录图片
- en: The first application we are going to build with the hardware that we just step
    up will be only local, so nothing will be sent to the Web yet. In this section,
    we just want to build a camera that will be triggered by the motion sensor.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要使用刚刚搭建好的硬件构建的第一个应用程序将是本地的，所以目前不会将任何内容发送到Web。在这一节中，我们只想构建一个由运动传感器触发的相机。
- en: With this, you can, for example, check whether somebody entered your home while
    you were not there because the PIR motion sensor would instantly notice it. This
    section is really the foundation of the whole project. We are going to reuse the
    code developed in this section later when we write the piece of code to upload
    pictures to Dropbox.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，例如，你可以检查在你不在家的时候是否有人进入了你的家，因为PIR运动传感器会立即注意到。这一部分实际上是整个项目的基础。我们将在编写将图片上传到Dropbox的代码时，重新使用这一部分开发的代码。
- en: For this part of the project, we don't want to use the SSH access to take pictures
    anymore; we need to trigger the camera right from the Arduino sketch. For this,
    we are going to use the `Bridge` library and the `Process` library to call a command
    on the Linux machine, just as if you were typing it on a terminal window.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目的一部分，我们不想再使用SSH访问来拍摄图片了；我们需要直接从Arduino草图触发相机。为此，我们将使用`Bridge`库和`Process`库在Linux机器上调用一个命令，就像你在终端窗口中输入一样。
- en: 'The sketch starts by declaring the libraries that we need to use:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 草图首先声明我们需要使用的库：
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To call some commands on the Yún''s Linux machine, we will need to declare
    a process, which is an object that we will call to emulate some terminal entries:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在Yún的Linux机器上调用一些命令，我们需要声明一个进程，这是一个我们将调用来模拟一些终端输入的对象：
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We''ll also build a filename for each picture that will be taken, as shown
    in the following line of code. Indeed, we named the file `test.png` earlier, but
    in this application, we want every picture taken by the project to have a different
    name:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将为每张要拍摄的图片构建一个文件名，如下代码所示。实际上，我们之前将文件命名为`test.png`，但在这个应用中，我们希望项目拍摄的每张图片都有一个不同的名字：
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Declare the pin on which the motion sensor is connected, as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 声明连接运动传感器的引脚，如下所示：
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We also need to define where the pictures will be stored. Remember, we want
    to store them all on the SD card, as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要定义图片将存储的位置。记住，我们希望将它们全部存储在SD卡上，如下所示：
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: You can also store pictures locally on the Yún, but it would quickly saturate
    the memory of the Arduino Yún.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在Yún上本地存储图片，但这会迅速耗尽Arduino Yún的内存。
- en: 'Then, in the `setup()` function, we start the bridge between the Atmel microcontroller
    and the Linux machine of the Yún, as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`setup()`函数中，我们开始建立Atmel微控制器和Yún的Linux机器之间的桥梁，如下所示：
- en: '[PRE18]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Also, we set the pin of the PIR motion sensor as an input, as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们将PIR运动传感器的引脚设置为输入，如下所示：
- en: '[PRE19]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In the `loop()` function, what we want to do is to continuously read data from
    the motion sensor and trigger the camera if any motion is detected.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在`loop()`函数中，我们想要做的是持续从运动传感器读取数据，并在检测到任何运动时触发相机。
- en: 'This is done by a simple `if` statement that checks the sensor''s value, as
    follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这是通过一个简单的`if`语句完成的，该语句检查传感器的值，如下所示：
- en: '[PRE20]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Then, if some motion is detected, we need to prepare everything to take the
    picture. The first step is to build a filename that will contain the date on which
    the picture was taken. To do so, we are using the Linux date command that outputs
    the current date and time. This is important because we want to know what time
    the picture was taken at and give a unique filename to every picture. At the end,
    we also want to specify that this picture will be taken in a `PNG` format. The
    filename formatting part is done by the following code:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，如果检测到运动，我们需要准备拍照。第一步是构建一个包含拍照日期的文件名。为此，我们使用Linux日期命令输出当前日期和时间。这很重要，因为我们想知道拍照的时间，并为每张图片提供一个唯一的文件名。最后，我们还想指定这张图片将以`PNG`格式拍摄。文件名格式化部分是通过以下代码完成的：
- en: '[PRE21]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Finally, we can take the picture. What we are going to do here is to call the
    `fswebcam` command again using the `runShellCommand` function of our picture process
    that will emulate a terminal entry.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以拍照。我们在这里要做的是再次调用`fswebcam`命令，使用我们图片处理的`runShellCommand`函数来模拟终端输入。
- en: 'We also want to use the maximum resolution available on the camera. In the
    case of the camera we chose, it was 1280 x 720 (standard HD resolution). We have
    quite a lot of space available on the SD card (4 GB with the one I used), so you
    can use the maximum resolution without running into problems. We recommend that
    you use a dedicated SD card for this project so that you don''t run into problems
    with other files that could be stored on the card. For the sake of simplicity,
    we won''t add an automated check to see whether the card is full, but this is
    something you should consider if you want to let the project run continuously
    over time. You can specify the resolution using the `–o` command at the end of
    the call. Finally, we can build the complete code to take a picture:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还希望使用相机上可用的最大分辨率。在我们选择的相机中，它是1280 x 720（标准高清分辨率）。我们SD卡上有相当多的空间（我使用的是4 GB），因此你可以使用最大分辨率而不会遇到问题。我们建议你为这个项目使用一个专门的SD卡，以免与其他存储在卡上的文件发生问题。为了简单起见，我们不会添加自动检查卡是否已满的功能，但如果你想让项目长时间连续运行，你应该考虑这一点。你可以在调用末尾使用`–o`命令指定分辨率。最后，我们可以构建完整的代码来拍照：
- en: '[PRE22]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Note that we are also using a `while()` statement here to make sure that the
    `fswebcam` utility has enough time to take the picture. The complete code can
    be found at [https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter3/triggered_camera](https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter3/triggered_camera).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们在这里也使用了一个`while()`语句，以确保`fswebcam`工具有足够的时间拍照。完整的代码可以在[https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter3/triggered_camera](https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter3/triggered_camera)找到。
- en: You can now upload the code to the Yún board and test the project. Once it's
    uploaded, try moving your hand in front of the sensor. The Arduino Yún should
    trigger the camera to take a picture and save it to the SD card. To make sure
    that a picture was taken at this point, you can simply check on the camera itself.
    For example, the Logitech webcam that I used has a small LED that turns green
    whenever it is active.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以将代码上传到Yún板并测试项目。一旦上传，尝试在传感器前移动你的手。Arduino Yún应该触发相机拍照并将其保存到SD卡。为了确保此时已经拍照，你可以简单地检查相机本身。例如，我使用的罗技网络摄像头有一个小型的LED灯，每当它处于活动状态时就会变绿。
- en: 'After a while, remove the SD card from the Arduino Yún (as earlier, unmount
    the SD card from the Yún first), and put it in your computer with the adapter
    we used earlier. You should see all the pictures that were taken at the root of
    the SD card, as shown in the following screenshot:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 一段时间后，将SD卡从Arduino Yún中取出（如前所述，首先从Yún卸载SD卡），然后将其插入我们之前使用的适配器中的电脑。你应该在SD卡的根目录下看到所有拍摄的图片，如下面的截图所示：
- en: '![Recording pictures when motion is detected](img/8007OS_03_11.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![检测到运动时记录图片](img/8007OS_03_11.jpg)'
- en: Again, check these pictures to make sure that they are not corrupted and that
    everything worked as planned.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 再次检查这些图片，确保它们没有被损坏，并且一切按计划进行。
- en: Sending pictures to Dropbox at regular intervals
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定期将图片发送到 Dropbox
- en: We are now going to extend the code we built in the previous section and write
    some new code that automatically uploads the pictures that were taken by the camera
    to Dropbox. For this, we will need to build a slightly more complex software than
    in the previous part.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将扩展上一节构建的代码，并编写一些自动将相机拍摄的图片上传到 Dropbox 的新代码。为此，我们需要构建比上一部分稍微复杂一些的软件。
- en: For now, we only used the Choreos (Temboo libraries) for the Arduino Yún. However,
    there are actually many other Choreos available for other languages, such as for
    Python. This is great news because the Linux machine of the Yún is capable of
    running Python code out of the box.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们只使用了 Arduino Yún 的 Choreos（Temboo 库）。然而，实际上还有许多其他语言的可用的 Choreos，例如 Python。这是一个好消息，因为
    Yún 的 Linux 机器能够直接运行 Python 代码。
- en: It's actually much easier to access the Dropbox API from Python, so that's what
    we are going to use in this part. We will build a Python script that uploads the
    pictures we took to Dropbox, and call this script from the Arduino sketch using
    the `Bridge` library and our picture processes.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，从 Python 访问 Dropbox API 要容易得多，所以我们将在这个部分使用它。我们将构建一个 Python 脚本，将我们拍摄的图片上传到
    Dropbox，并使用 `Bridge` 库和我们的图片处理过程从 Arduino 脚本中调用此脚本。
- en: I will now explain the content of the Python script. Later, we will save all
    these lines of code in a separate file, and put it on the SD card along with the
    Temboo Python SDK.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我现在将解释 Python 脚本的内容。稍后，我们将将这些代码行保存到单独的文件中，并将其与 Temboo Python SDK 一起放置在 SD 卡上。
- en: 'The Python script starts with the following lines of code:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Python 脚本以以下代码行开始：
- en: '[PRE23]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The Python script will also take an argument: the name of the file to be uploaded.
    This way, we can directly pass the name of file (built by the Arduino code with
    a timestamp) to the Python script. The following lines of code do exactly this:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Python 脚本还将接受一个参数：要上传的文件名。这样，我们可以直接将文件名（由 Arduino 代码与时间戳一起构建）传递给 Python 脚本。以下代码行正是这样做的：
- en: '[PRE24]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Inside the script, you need to define your Temboo credentials, as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本内部，您需要定义您的 Temboo 凭据，如下所示：
- en: '[PRE25]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'These are exactly the same credentials we used for Temboo earlier. We then
    need to declare the upload file Choreo for Python that will be used to automatically
    upload pictures to Dropbox, as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这些正是我们之前用于 Temboo 的相同凭据。然后我们需要声明用于自动上传图片到 Dropbox 的 Python `upload file Choreo`，如下所示：
- en: '[PRE26]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The next step is to set the different inputs, which you had done when you created
    your Dropbox app, as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是设置不同的输入，这是您在创建 Dropbox 应用时所做的，如下所示：
- en: '[PRE27]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Finally, we can order `uploadFileChoreo` to upload the file to your Dropbox
    folder in the corresponding folder of your app, as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以调用 `uploadFileChoreo` 来将文件上传到您应用对应文件夹中的 Dropbox 文件夹，如下所示：
- en: '[PRE28]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'You can now save this code in a file named `upload_picture.py` and put it at
    the root of the SD card. Remember the Temboo Python library we downloaded earlier?
    It''s time to unpack it and place it at the root of the SD card as well. Just
    make sure that it appears with the name `temboo` in the root of the SD card, so
    the Python file we just created can access it correctly. If no pictures have been
    recorded yet, the following screenshot shows what your SD card folder should look
    like:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以将此代码保存到名为 `upload_picture.py` 的文件中，并将其放置在 SD 卡的根目录下。还记得我们之前下载的 Temboo Python
    库吗？现在是时候将其解压并放置在 SD 卡的根目录下了。只需确保它在 SD 卡根目录下以 `temboo` 的名称出现，这样我们刚刚创建的 Python 文件就可以正确访问它。如果尚未记录任何图片，以下截图显示了您的
    SD 卡文件夹应该看起来像什么：
- en: '![Sending pictures to Dropbox at regular intervals](img/8007OS_03_12.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![定期将图片发送到 Dropbox](img/8007OS_03_12.jpg)'
- en: We also need to slightly modify the Arduino sketch to upload pictures on Dropbox.
    We used exactly the same code base as in the previous section, so we will only
    detail the new code that was added.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要稍微修改 Arduino 脚本来上传 Dropbox 上的图片。我们使用了与上一节完全相同的代码库，因此我们只需详细说明新添加的代码。
- en: 'In the part that is executed when motion is detected, right at the end of the
    loop, you need to use the picture process again to execute the Python script,
    as shown in the following code:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在检测到运动时执行的代码部分，在循环的末尾，您需要再次使用图片处理来执行 Python 脚本，如下面的代码所示：
- en: '[PRE29]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Note that we are passing along the same filename and path as the pictures that
    are recorded on the SD card, so the exact same picture name is recorded locally
    and sent to Dropbox.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们正在传递与SD卡上记录的图片相同的文件名和路径，所以相同的图片名称在本地记录并发送到Dropbox。
- en: The complete code for this part can be found at [https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter3/dropbox_log](https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter3/dropbox_log).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分的完整代码可以在[https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter3/dropbox_log](https://github.com/openhomeautomation/geeky-projects-yun/tree/master/chapter3/dropbox_log)找到。
- en: 'You can now put the SD card back into the Arduino Yún, upload the updated Arduino
    sketch, and head to your Dropbox folder. At this point, you should note that a
    new folder was created in your `Apps` folder with the name of your Dropbox app
    that you set on the Dropbox website, as shown in the following screenshot:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以将SD卡放回Arduino Yún，上传更新的Arduino草图，然后前往你的Dropbox文件夹。此时，你应该注意在你的`Apps`文件夹中创建了一个新文件夹，其名称与你在Dropbox网站上设置的Dropbox应用名称相同，如下面的截图所示：
- en: '![Sending pictures to Dropbox at regular intervals](img/8007OS_03_13.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![定期将图片发送到Dropbox](img/8007OS_03_13.jpg)'
- en: Now, if motion is detected, the sketch should not only log the pictures on the
    SD card, but also on your Dropbox folder. If everything is working correctly,
    you can see that pictures arrive in real time inside your Dropbox folder as the
    Yún takes the pictures using the USB camera.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果检测到运动，草图不仅应该在SD卡上记录图片，还应该在你的Dropbox文件夹上。如果一切正常工作，你应该能看到当Yún使用USB摄像头拍照时，图片实时出现在你的Dropbox文件夹中。
- en: The cool aspect about these applications of our project is that this can be
    done from anywhere in the world. You can do this from your computer, of course,
    but also from a web browser. Many mobile devices can also run the mobile version
    of Dropbox, so you can see if somebody has entered your home right from your mobile
    device. On my computer, for example, Dropbox also sends me a notification that
    a new file was uploaded, so I can instantly see whether something is happening
    in my house and can act accordingly.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们项目应用的酷炫之处在于，这可以在世界上的任何地方完成。你当然可以从你的电脑上做这件事，也可以从网页浏览器上做。许多移动设备也可以运行Dropbox的移动版，所以你可以直接从你的移动设备上查看是否有人进入了你的家。例如，在我的电脑上，Dropbox也会给我发送通知，告诉我有新文件上传，这样我就可以立即看到我的家里是否发生了什么，并据此采取行动。
- en: Live video streaming via Wi-Fi
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过Wi-Fi进行实时视频流
- en: To finish this chapter, we are going to see another cool application that we
    can make with the Arduino Yún and our USB camera. Remember that the camera is
    actually a standard webcam, and that it is also made to capture videos. Wouldn't
    it be cool to automatically stream video on a private video channel on the Web,
    so you can watch over your home in real time from anywhere just by going into
    a web browser? That's exactly what we are going to do in this section.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成这一章节，我们将要了解另一个使用Arduino Yún和我们的USB摄像头可以实现的酷炫应用。请记住，这个摄像头实际上是一个标准的网络摄像头，它也是为了捕捉视频而设计的。在网络上自动流式传输视频到私人视频频道，这样你就可以通过进入网页浏览器在任何地方实时查看你的家，这不是很酷吗？这正是本节我们要做的。
- en: Many commercial IP cameras are actually doing this with proprietary solutions,
    but I wanted to use commonly available tools; this is why we chose the YouTube
    live event service to stream the video that can then be accessed from any device.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 许多商业IP摄像头实际上使用专有解决方案来做这件事，但我希望使用常见的工具；这就是我们选择YouTube直播事件服务来流式传输视频的原因，这样任何设备都可以访问。
- en: 'To make the application work, we first need to install some additional software
    packages on the Yún, as shown in the following steps:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 要使应用程序工作，我们首先需要在Yún上安装一些额外的软件包，如下面的步骤所示：
- en: 'Connect to the Yún again using SSH with your Arduino Yún name and password,
    and type the following command to get the correct package for live streaming:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次使用Arduino Yún的用户名和密码通过SSH连接到Yún，并输入以下命令以获取正确的直播流软件包：
- en: '[PRE30]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Note that if the link is not valid anymore and you can''t find the files, this
    package is also available inside the code of this chapter. You can now install
    it with the following command:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，如果链接不再有效且你找不到文件，这个包也可以在本章的代码中找到。你现在可以使用以下命令安装它：
- en: '[PRE31]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'You can now start the live streaming software on your Arduino Yún using the
    following command:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以使用以下命令在你的Arduino Yún上启动直播流软件：
- en: '[PRE32]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Here, the parameter after `–h` is the resolution and the one after `–i` is the
    port on which the stream will be available. We also specified the number of frames
    per second using the `–I` command. The other options are less important and you
    do not have to worry about them.
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，`-h`后面的参数是分辨率，而`-i`后面的参数是流可用的端口。我们还使用`-I`命令指定了每秒的帧数。其他选项不太重要，你不必担心它们。
- en: Note that we didn't stream at HD resolution; it was apparently too much for
    the Arduino Yún, and the video stream suffered significant lag and also had corrupted
    images, which is not what we want at all. You can then access your stream by going
    to your Arduino Yún's address in your web browser followed by `8080` to specify
    the correct port. For example, in my case, it was `http://myarduinoyun.local:8080/stream.html`.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们没有以高清分辨率进行直播；显然这对Arduino Yún来说太多了，视频流出现了显著的延迟，并且还有损坏的图像，这根本不是我们想要的。你可以通过在你的网络浏览器中输入Arduino
    Yún的地址后跟`8080`来指定正确的端口来访问你的流。例如，在我的情况下，它是`http://myarduinoyun.local:8080/stream.html`。
- en: 'This actually gives you direct access to the live stream. You should then see
    the stream interface with the live stream in the middle of the page, as shown
    in the following screenshot:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上让你可以直接访问直播流。你应该会看到页面中间的流界面，其中包含直播流，如下面的截图所示：
- en: '![Live video streaming via Wi-Fi](img/8007OS_03_14.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![通过Wi-Fi进行实时视频流](img/8007OS_03_14.jpg)'
- en: You can also use the different elements of the menu on the left to explore other
    possibilities of this streaming software. For example, you can get a link for
    **VideoLAN**, so you can access your stream right from the VLC player.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用左侧菜单的不同元素来探索这个流软件的其他可能性。例如，你可以获取一个**VideoLAN**的链接，这样你就可以直接从VLC播放器访问你的流。
- en: Now, this is already great and you could stop here to access your video stream
    from your local Wi-Fi network. But it would be even better if the stream was available
    online, so you could access it from anywhere in the world even without being connected
    to your local Wi-Fi network.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这已经很不错了，你可以在这里停止以从你的本地Wi-Fi网络访问你的视频流。但如果流可以在网上访问，那就更好了，这样你就可以从世界任何地方访问它，即使没有连接到本地Wi-Fi网络。
- en: 'The first step is to go to your YouTube account in **VIDEO MANAGER** and to
    the **Live Events** menu on the left, as shown in the following screenshot:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是进入你的YouTube账户的**视频管理器**，然后点击左侧的**直播活动**菜单，如下面的截图所示：
- en: '![Live video streaming via Wi-Fi](img/8007OS_03_15.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![通过Wi-Fi进行实时视频流](img/8007OS_03_15.jpg)'
- en: From this menu, you can create your stream just like you would create a new
    YouTube video. Make sure that you put the video as unlisted unless you want other
    people on YouTube to be able to see what's going on in your home. Compared to
    a private video, you will still be able to share the video with the people you
    know just by giving them the URL of the stream. Then, on the next page, YouTube
    will ask you to choose which encoder you want to use.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个菜单中，你可以创建你的流，就像创建一个新的YouTube视频一样。确保将视频设置为不公开，除非你不想让YouTube上的其他人看到你家里的情况。与私密视频相比，你仍然可以通过只给他们提供流的URL来与你知道的人分享视频。然后，在下一页，YouTube会要求你选择你想要使用的编码器。
- en: 'I chose **Wirecast** from the list and downloaded it from their website. In
    the Wirecast interface, you need to set the correct video source (by default,
    it will stream from your computer''s webcam). In the menu where you can select
    the video source, select **Web Stream Source** and configure it, as shown in the
    following screenshot:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我从列表中选择了**Wirecast**并从他们的网站下载了它。在Wirecast界面中，你需要设置正确的视频源（默认情况下，它将从你的电脑摄像头进行直播）。在你可以选择视频源的菜单中，选择**Web
    Stream Source**并配置它，如下面的截图所示：
- en: '![Live video streaming via Wi-Fi](img/8007OS_03_16.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![通过Wi-Fi进行实时视频流](img/8007OS_03_16.jpg)'
- en: Basically, you need to choose HTTP as the protocol, use **Motion JPEG** as the
    format, and put the URL from the VideoLAN tab of the streaming interface. For
    example, for my project, it was `myarduinoyun.local:8080/?action=stream`.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，你需要选择HTTP作为协议，使用**Motion JPEG**作为格式，并将流界面视频标签页中的URL放入其中。例如，对于我的项目，它是`myarduinoyun.local:8080/?action=stream`。
- en: 'After a moment, if everything is working fine, you should see the live stream
    from your USB camera appear directly in the main window of Wirecast. Don''t worry
    if there is some lag at this point; it is only a delay usually; in my case, I
    had about 1-2 seconds of delay in the Wirecast software. The following is the
    image I got in the main Wirecast interface after adding the right video stream:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 一段时间后，如果一切正常，您应该看到来自USB摄像头的实时流直接出现在Wirecast的主窗口中。如果此时出现一些延迟，请不要担心；这通常只是延迟；在我的情况下，Wirecast软件中大约有1-2秒的延迟。以下是在添加正确的视频流后我在Wirecast主界面中获得的图像：
- en: '![Live video streaming via Wi-Fi](img/8007OS_03_17.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![通过Wi-Fi进行实时视频直播](img/8007OS_03_17.jpg)'
- en: Also, make sure that this stream is the only one that will be sent to YouTube.
    For this purpose, delete all the other streams from the Wirecast interface. Indeed,
    by default, Wirecast puts the stream that comes from your webcam on the interface.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请确保此流是唯一一个将被发送到YouTube的流。为此，请从Wirecast界面删除所有其他流。实际上，Wirecast默认将来自您的网络摄像头的流放在界面上。
- en: Note
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Also note that using an HTTP stream is a feature from the paid version of Wirecast;
    it works perfectly in the free version, but you will get a watermark displayed
    on the video from time to time. Don't worry; it's actually not a problem to monitor
    what is going on in your house.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请注意使用HTTP流是Wirecast付费版本的功能；它在免费版本中运行得很好，但您会在视频上不时地看到水印。不用担心；实际上，监控您家中的情况并不是问题。
- en: The next step is to actually stream data to YouTube. Click on the **Stream**
    button at the top of the interface, which should turn red, after which you will
    be prompted to enter your YouTube credentials. It should then automatically detect
    your live event video that you just created on YouTube.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是实际上传数据到YouTube。点击界面顶部的**流**按钮，该按钮应变为红色，之后您将被提示输入您的YouTube凭证。然后它应该自动检测您刚刚在YouTube上创建的实时事件视频。
- en: 'Accept the settings, make sure it is streaming from Wirecast, and go back to
    the YouTube interface. You can now go to the video manager, and go to the **Live
    Control Room** tab. This is where you should see that YouTube is actually receiving
    some data from your Arduino Yún via Wirecast running on your computer. It should
    indicate that the **Stream Status** is **GOOD**, as shown in the following screenshot:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 接受设置，确保直播来自Wirecast，然后返回YouTube界面。现在您可以进入视频管理器，并转到**直播控制室**标签。这就是您应该看到YouTube实际上正在通过运行在您计算机上的Wirecast从您的Arduino
    Yún接收一些数据的地方。它应该指示**流状态**为**良好**，如下面的截图所示：
- en: '![Live video streaming via Wi-Fi](img/8007OS_03_18.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![通过Wi-Fi进行实时视频直播](img/8007OS_03_18.jpg)'
- en: If this is not the case, please go back to the Wirecast application to check
    that the streaming process is working correctly. At this moment, don't worry;
    your stream is not working just yet. You should see that the **Preview** button,
    as shown in the following screenshot, is now available and can be clicked. Just
    click on it.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不是这种情况，请回到Wirecast应用程序，检查直播过程是否正常工作。此刻，请不要担心；您的直播还没有开始工作。您应该看到如下截图所示的**预览**按钮现在可用并可点击。只需点击它。
- en: '![Live video streaming via Wi-Fi](img/8007OS_03_19.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![通过Wi-Fi进行实时视频直播](img/8007OS_03_19.jpg)'
- en: 'YouTube will then prepare your stream, as shown in the following screenshot,
    and you will have to wait for a moment (around 30 seconds when I tried it):'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: YouTube将准备您的直播，如下面的截图所示，您将需要等待片刻（当我尝试时大约30秒）：
- en: '![Live video streaming via Wi-Fi](img/8007OS_03_20.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![通过Wi-Fi进行实时视频直播](img/8007OS_03_20.jpg)'
- en: 'After a while, the page will be updated automatically so that you can move
    to the next step and actually start the streaming, as shown in the following screenshot:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 一段时间后，页面将自动更新，以便您可以进入下一步并实际开始直播，如下面的截图所示：
- en: '![Live video streaming via Wi-Fi](img/8007OS_03_21.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![通过Wi-Fi进行实时视频直播](img/8007OS_03_21.jpg)'
- en: 'Note that before making the stream live, you can preview it using the options
    on the preceding page. If what you see is satisfactory, you can now click on **Start
    Streaming** to finally finish the process. You will then have access to the stream
    on this page or directly on the dedicated page of the stream. The following screenshot
    is the final result on the YouTube interface:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 注意在将直播流设置为实时之前，您可以使用上一页上的选项预览它。如果看到的内容令人满意，现在您可以点击**开始直播**以最终完成此过程。然后您将能够在此页面上或直接在直播的专用页面上访问流。以下截图是YouTube界面上最终的结果：
- en: '![Live video streaming via Wi-Fi](img/8007OS_03_22.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![通过Wi-Fi进行实时视频直播](img/8007OS_03_22.jpg)'
- en: You can see from the red dot below the video that the video is streaming live.
    Because the video is marked as **Unlisted**, only people with the URL can access
    it. You can, for example, mark the video as a favorite in your YouTube account
    and then access it from anywhere. You can also share it with your family and friends,
    so they can also watch the stream from their browsers.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从视频下方的红点看出，视频正在实时流式传输。因为视频被标记为**未列出**，只有拥有URL的人才能访问它。例如，您可以将视频标记为YouTube账户中的收藏夹，然后从任何地方访问它。您还可以与家人和朋友分享，这样他们也可以从他们的浏览器中观看直播。
- en: Note that because we are using the Wirecast software on our computer to encode
    the stream for YouTube, we need to have our computer on for this to work. At the
    time this book was written, no software was available to directly stream the video
    to YouTube without the help of a computer, but this might change in the future,
    removing the need for a computer to stream the video.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，因为我们使用计算机上的Wirecast软件对视频流进行编码以上传到YouTube，所以我们需要保持计算机开启才能使这个过程工作。在本书编写时，没有软件可以直接在YouTube上流式传输视频而不需要计算机的帮助，但这种情况在未来可能会改变，从而不再需要计算机来流式传输视频。
- en: Summary
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Let's now summarize what we learned in this project. What we've built in this
    project is a security camera that can automatically log pictures locally and to
    Dropbox whenever motion is detected. We also learned how to stream the video that
    comes from this camera live on YouTube via Wi-Fi.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在总结一下在这个项目中我们学到了什么。我们在项目中构建的是一个安全摄像头，可以在检测到运动时自动将图片记录到本地和Dropbox。我们还学会了如何通过Wi-Fi将来自这个摄像头的视频实时流式传输到YouTube。
- en: 'The following were the major takeaways from this project:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本项目的主要收获：
- en: In the first part of the project, we connected the USB camera to the Arduino
    Yún as well as the PIR motion sensor. We also plugged a micro SD card to the Yún
    so we can also record pictures locally, even if the Internet connection is not
    available. We also installed the required software packages for the project, such
    as the driver, to access the USB camera from a terminal command.
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在项目的第一部分，我们将USB摄像头连接到Arduino Yún，以及PIR运动传感器。我们还连接了一个micro SD卡到Yún，这样我们也可以在互联网连接不可用的情况下本地记录图片。我们还安装了项目所需的软件包，例如驱动程序，以便从终端命令访问USB摄像头。
- en: Then, we tested our hardware by checking whether the motion sensor was working
    properly and by making sure that we can actually take pictures using the USB camera.
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们通过检查运动传感器是否正常工作，并确保我们可以使用USB摄像头实际拍照来测试我们的硬件。
- en: Then, we built a simple application using our hardware to automatically take
    a picture when motion is detected and store it on the micro SD card. We tested
    this software on the Yún, and when we checked later, we found that some pictures
    were indeed stored on the SD card.
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们使用我们的硬件构建了一个简单的应用程序，当检测到运动时自动拍照并将其存储在micro SD卡上。我们在Yún上测试了此软件，后来检查时发现确实有一些图片存储在SD卡上。
- en: After this simple application, we built on the sketch to automatically upload
    the pictures on our Dropbox folder as well. For this, we wrote a Python script
    that can automatically upload files to Dropbox. This script was then called from
    the Arduino sketch to upload pictures over to Dropbox whenever motion is detected.
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这个简单的应用之后，我们基于草图自动上传了我们的Dropbox文件夹中的图片。为此，我们编写了一个Python脚本，该脚本可以自动将文件上传到Dropbox。然后，我们从Arduino草图调用这个脚本，以便在检测到运动时将图片上传到Dropbox。
- en: Finally, in the last part of the sketch, we used the video capabilities of the
    camera to stream video live on YouTube. This way, we can monitor what's going
    on in your home from wherever you are in the world; we just need an Internet connection
    and a device that can access YouTube, such as a smartphone.
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，在草图的最后一部分，我们使用了摄像头的视频功能，在YouTube上实时直播视频。这样，无论您在世界上的哪个地方，都可以监控您家的情况；我们只需要一个互联网连接和一个可以访问YouTube的设备，例如智能手机。
- en: Of course, there are many ways you can improve and extend this project based
    on what we learned in this chapter. You can, of course, have many of these modules
    with a camera and a motion sensor within your home. This way, you can have a complete
    security system that monitors your home remotely.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您可以根据我们在本章中学到的知识以多种方式改进和扩展这个项目。您当然可以在您的家中安装许多带有摄像头和运动传感器的模块。这样，您就可以拥有一个完整的远程监控系统，以监控您的家。
- en: One way to improve the project is to integrate more Choreos into the project.
    For example, you can inject the Gmail Choreo we used in the first chapter to automatically
    send an e-mail alert as well whenever some motion is detected. This will create
    another layer of security in your home. In a similar way, you can also use the
    Twilio Choreo that will send you an SMS when motion is detected in your home.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 提高项目的一种方法是将更多的Choreos集成到项目中。例如，你可以将我们在第一章中使用过的Gmail Choreo注入到项目中，以便在检测到运动时自动发送电子邮件警报。这将为你家的安全增加另一层保障。以类似的方式，你也可以使用Twilio
    Choreo，当在家中发现运动时，它会给你发送短信。
- en: You can also use the project for completely different purposes. While testing
    the project, we, for example, created a time-lapse device that takes pictures
    at regular time intervals (for example, every minute) and uploads these pictures
    on Dropbox.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以将这个项目用于完全不同的目的。在测试项目时，例如，我们创建了一个定时摄影设备，它以固定的时间间隔拍照（例如，每分钟一次）并将这些照片上传到Dropbox。
- en: 'In the next chapter, we are going to use the Arduino Yún''s Wi-Fi capabilities
    for a completely different application: to control a mobile robot. We are going
    to use the power of the Arduino Yún to remotely control this robot and read out
    data that comes from the robot, all within a simple web application running on
    your computer.'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将利用Arduino Yún的Wi-Fi功能进行一个完全不同的应用：控制一个移动机器人。我们将利用Arduino Yún的力量远程控制这个机器人，并读取来自机器人的数据，所有这些都在你电脑上运行的一个简单网络应用程序中完成。
