["```cpp\n    class Skeleton {\n    protected:\n    \u00a0\u00a0\u00a0\u00a0Pose mRestPose;\n    \u00a0\u00a0\u00a0\u00a0Pose mBindPose;\n    \u00a0\u00a0\u00a0\u00a0std::vector<mat4> mInvBindPose;\n    \u00a0\u00a0\u00a0\u00a0std::vector<std::string> mJointNames;\n    ```", "```cpp\n    protected:\n    \u00a0\u00a0\u00a0\u00a0void UpdateInverseBindPose();\n    ```", "```cpp\n    public:\n    \u00a0\u00a0\u00a0\u00a0Skeleton();\n    \u00a0\u00a0\u00a0\u00a0Skeleton(const Pose& rest, const Pose& bind, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 const std::vector<std::string>& names);\n    \u00a0\u00a0\u00a0\u00a0void Set(const Pose& rest, const Pose& bind, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 const std::vector<std::string>& names);\n    \u00a0\u00a0\u00a0\u00a0Pose& GetBindPose();\n    \u00a0\u00a0\u00a0\u00a0Pose& GetRestPose();\n    \u00a0\u00a0\u00a0\u00a0std::vector<mat4>& GetInvBindPose();\n    \u00a0\u00a0\u00a0\u00a0std::vector<std::string>& GetJointNames();\n    \u00a0\u00a0\u00a0\u00a0std::string& GetJointName(unsigned int index);\n    }; // End Skeleton class\n    ```", "```cpp\n    Skeleton::Skeleton() { }\n    Skeleton::Skeleton(const Pose& rest, const Pose& bind,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const std::vector<std::string>& names) {\n    \u00a0\u00a0\u00a0\u00a0Set(rest, bind, names);\n    }\n    ```", "```cpp\n    void Skeleton::Set(const Pose& rest, const Pose& bind, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 const std::vector<std::string>& names) {\n    \u00a0\u00a0\u00a0\u00a0mRestPose = rest;\n    \u00a0\u00a0\u00a0\u00a0mBindPose = bind;\n    \u00a0\u00a0\u00a0\u00a0mJointNames = names;\n    \u00a0\u00a0\u00a0\u00a0UpdateInverseBindPose();\n    }\n    ```", "```cpp\n    void Skeleton::UpdateInverseBindPose() {\n    \u00a0\u00a0unsigned int size = mBindPose.Size();\n    \u00a0\u00a0mInvBindPose.resize(size);\n    \u00a0\u00a0for (unsigned int i = 0; i < size; ++i) {\n    \u00a0\u00a0\u00a0\u00a0Transform world = mBindPose.GetGlobalTransform(i);\n    \u00a0\u00a0\u00a0\u00a0mInvBindPose[i] = inverse(transformToMat4(world));\n    \u00a0\u00a0}\n    }\n    ```", "```cpp\n    Pose& Skeleton::GetBindPose() {\n    \u00a0\u00a0\u00a0\u00a0return mBindPose;\n    }\n    Pose& Skeleton::GetRestPose() {\n    \u00a0\u00a0\u00a0\u00a0return mRestPose;\n    }\n    std::vector<mat4>& Skeleton::GetInvBindPose() {\n    \u00a0\u00a0\u00a0\u00a0return mInvBindPose;\n    }\n    std::vector<std::string>& Skeleton::GetJointNames() {\n    \u00a0\u00a0\u00a0\u00a0return mJointNames;\n    }\n    std::string& Skeleton::GetJointName(unsigned int idx) {\n    \u00a0\u00a0\u00a0\u00a0return mJointNames[idx];\n    }\n    ```", "```cpp\n    Pose LoadBindPose(cgltf_data* data) {\n    \u00a0\u00a0\u00a0\u00a0Pose restPose = LoadRestPose(data);\n    \u00a0\u00a0\u00a0\u00a0unsigned int numBones = restPose.Size();\n    \u00a0\u00a0\u00a0\u00a0std::vector<Transform> worldBindPose(numBones);\n    \u00a0\u00a0\u00a0\u00a0for (unsigned int i = 0; i < numBones; ++i) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0worldBindPose[i] = restPose.GetGlobalTransform(i);\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0unsigned int numSkins = data->skins_count;\n    \u00a0\u00a0\u00a0\u00a0for (unsigned int i = 0; i < numSkins; ++i) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cgltf_skin* skin = &(data->skins[i]);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::vector<float> invBindAccessor;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0GLTFHelpers::GetScalarValues(invBindAccessor, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 16, *skin->inverse_bind_matrices);\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int numJoints = skin->joints_count;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (int j = 0; j < numJoints; ++j) { \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Read the ivnerse bind matrix of the joint\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0float* matrix = &(invBindAccessor[j * 16]);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mat4 invBindMatrix = mat4(matrix);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// invert, convert to transform\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mat4 bindMatrix = inverse(invBindMatrix);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Transform bindTransform = \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mat4ToTransform(bindMatrix);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Set that transform in the worldBindPose.\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cgltf_node* jointNode = skin->joints[j];\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int jointIndex = GLTFHelpers::GetNodeIndex(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 jointNode, data->nodes, numBones);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0worldBindPose[jointIndex] = bindTransform;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} // end for each joint\n    \u00a0\u00a0\u00a0\u00a0} // end for each skin\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0//Convert the world bind pose to a regular bind pose\n    \u00a0\u00a0\u00a0\u00a0Pose bindPose = restPose;\n    \u00a0\u00a0\u00a0\u00a0for (unsigned int i = 0; i < numBones; ++i) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Transform current = worldBindPose[i];\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int p = bindPose.GetParent(i);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (p >= 0) { // Bring into parent space\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Transform parent = worldBindPose[p];\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0current = combine(inverse(parent), current);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bindPose.SetLocalTransform(i, current);\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0return bindPose;\n    } // End LoadBindPose function\n    ```", "```cpp\nSkeleton LoadSkeleton(cgltf_data* data) {\n\u00a0\u00a0\u00a0\u00a0return Skeleton(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0LoadRestPose(data),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0LoadBindPose(data),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0LoadJointNames(data)\n\u00a0\u00a0\u00a0\u00a0);\n}\n```", "```cpp\n    class Mesh {\n    protected:\n    \u00a0\u00a0\u00a0\u00a0std::vector<vec3> mPosition;\n    \u00a0\u00a0\u00a0\u00a0std::vector<vec3> mNormal;\n    \u00a0\u00a0\u00a0\u00a0std::vector<vec2> mTexCoord;\n    \u00a0\u00a0\u00a0\u00a0std::vector<vec4> mWeights;\n    \u00a0\u00a0\u00a0\u00a0std::vector<ivec4> mInfluences;\n    \u00a0\u00a0\u00a0\u00a0std::vector<unsigned int> mIndices;\n    ```", "```cpp\n    protected:\n    \u00a0\u00a0\u00a0\u00a0Attribute<vec3>* mPosAttrib;\n    \u00a0\u00a0\u00a0\u00a0Attribute<vec3>* mNormAttrib;\n    \u00a0\u00a0\u00a0\u00a0Attribute<vec2>* mUvAttrib;\n    \u00a0\u00a0\u00a0\u00a0Attribute<vec4>* mWeightAttrib;\n    \u00a0\u00a0\u00a0\u00a0Attribute<ivec4>* mInfluenceAttrib;\n    \u00a0\u00a0\u00a0\u00a0IndexBuffer* mIndexBuffer;\n    ```", "```cpp\n    protected:\n    \u00a0\u00a0\u00a0\u00a0std::vector<vec3> mSkinnedPosition;\n    \u00a0\u00a0\u00a0\u00a0std::vector<vec3> mSkinnedNormal;\n    \u00a0\u00a0\u00a0\u00a0std::vector<mat4> mPosePalette;\n    ```", "```cpp\n    public:\n    \u00a0\u00a0\u00a0\u00a0Mesh();\n    \u00a0\u00a0\u00a0\u00a0Mesh(const Mesh&);\n    \u00a0\u00a0\u00a0\u00a0Mesh& operator=(const Mesh&);\n    \u00a0\u00a0\u00a0\u00a0~Mesh();\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0std::vector<vec3>& GetPosition();\n    \u00a0\u00a0\u00a0\u00a0std::vector<vec3>& GetNormal();\n    \u00a0\u00a0\u00a0\u00a0std::vector<vec2>& GetTexCoord();\n    \u00a0\u00a0\u00a0\u00a0std::vector<vec4>& GetWeights();\n    \u00a0\u00a0\u00a0\u00a0std::vector<ivec4>& GetInfluences();\n    \u00a0\u00a0\u00a0\u00a0std::vector<unsigned int>& GetIndices();\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0void CPUSkin(Skeleton& skeleton, Pose& pose);\n    \u00a0\u00a0\u00a0\u00a0void UpdateOpenGLBuffers();\n    \u00a0\u00a0\u00a0\u00a0void Bind(int position, int normal, int texCoord, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int weight, int influence);\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0void Draw();\n    \u00a0\u00a0\u00a0\u00a0void DrawInstanced(unsigned int numInstances);\n    \u00a0\u00a0\u00a0\u00a0void UnBind(int position, int normal, int texCoord, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int weight, int influence);\n    };\n    ```", "```cpp\n    Mesh::Mesh() {\n    \u00a0\u00a0\u00a0\u00a0mPosAttrib = new Attribute<vec3>();\n    \u00a0\u00a0\u00a0\u00a0mNormAttrib = new Attribute<vec3>();\n    \u00a0\u00a0\u00a0\u00a0mUvAttrib = new Attribute<vec2>();\n    \u00a0\u00a0\u00a0\u00a0mWeightAttrib = new Attribute<vec4>();\n    \u00a0\u00a0\u00a0\u00a0mInfluenceAttrib = new Attribute<ivec4>();\n    \u00a0\u00a0\u00a0\u00a0mIndexBuffer = new IndexBuffer();\n    }\n    ```", "```cpp\n    Mesh::Mesh(const Mesh& other) {\n    \u00a0\u00a0\u00a0\u00a0mPosAttrib = new Attribute<vec3>();\n    \u00a0\u00a0\u00a0\u00a0mNormAttrib = new Attribute<vec3>();\n    \u00a0\u00a0\u00a0\u00a0mUvAttrib = new Attribute<vec2>();\n    \u00a0\u00a0\u00a0\u00a0mWeightAttrib = new Attribute<vec4>();\n    \u00a0\u00a0\u00a0\u00a0mInfluenceAttrib = new Attribute<ivec4>();\n    \u00a0\u00a0\u00a0\u00a0mIndexBuffer = new IndexBuffer();\n    \u00a0\u00a0\u00a0\u00a0*this = other;\n    }\n    ```", "```cpp\n    Mesh& Mesh::operator=(const Mesh& other) {\n    \u00a0\u00a0\u00a0\u00a0if (this == &other) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return *this;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0mPosition = other.mPosition;\n    \u00a0\u00a0\u00a0\u00a0mNormal = other.mNormal;\n    \u00a0\u00a0\u00a0\u00a0mTexCoord = other.mTexCoord;\n    \u00a0\u00a0\u00a0\u00a0mWeights = other.mWeights;\n    \u00a0\u00a0\u00a0\u00a0mInfluences = other.mInfluences;\n    \u00a0\u00a0\u00a0\u00a0mIndices = other.mIndices;\n    \u00a0\u00a0\u00a0\u00a0UpdateOpenGLBuffers();\n    \u00a0\u00a0\u00a0\u00a0return *this;\n    }\n    ```", "```cpp\n    Mesh::~Mesh() {\n    \u00a0\u00a0\u00a0\u00a0delete mPosAttrib;\n    \u00a0\u00a0\u00a0\u00a0delete mNormAttrib;\n    \u00a0\u00a0\u00a0\u00a0delete mUvAttrib;\n    \u00a0\u00a0\u00a0\u00a0delete mWeightAttrib;\n    \u00a0\u00a0\u00a0\u00a0delete mInfluenceAttrib;\n    \u00a0\u00a0\u00a0\u00a0delete mIndexBuffer;\n    }\n    ```", "```cpp\n    std::vector<vec3>& Mesh::GetPosition() {\n    \u00a0\u00a0\u00a0\u00a0return mPosition;\n    }\n    std::vector<vec3>& Mesh::GetNormal() {\n    \u00a0\u00a0\u00a0\u00a0return mNormal;\n    }\n    std::vector<vec2>& Mesh::GetTexCoord() {\n    \u00a0\u00a0\u00a0\u00a0return mTexCoord;\n    }\n    std::vector<vec4>& Mesh::GetWeights() {\n    \u00a0\u00a0\u00a0\u00a0return mWeights;\n    }\n    std::vector<ivec4>& Mesh::GetInfluences() {\n    \u00a0\u00a0\u00a0\u00a0return mInfluences;\n    }\n    std::vector<unsigned int>& Mesh::GetIndices() {\n    \u00a0\u00a0\u00a0\u00a0return mIndices;\n    }\n    ```", "```cpp\n    void Mesh::UpdateOpenGLBuffers() {\n    \u00a0\u00a0\u00a0\u00a0if (mPosition.size() > 0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mPosAttrib->Set(mPosition);\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0if (mNormal.size() > 0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mNormAttrib->Set(mNormal);\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0if (mTexCoord.size() > 0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mUvAttrib->Set(mTexCoord);\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0if (mWeights.size() > 0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mWeightAttrib->Set(mWeights);\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0if (mInfluences.size() > 0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mInfluenceAttrib->Set(mInfluences);\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0if (mIndices.size() > 0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mIndexBuffer->Set(mIndices);\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cpp\n    void Mesh::Bind(int position, int normal, int texCoord, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int weight, int influcence) {\n    \u00a0\u00a0\u00a0\u00a0if (position >= 0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mPosAttrib->BindTo(position);\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0if (normal >= 0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mNormAttrib->BindTo(normal);\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0if (texCoord >= 0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mUvAttrib->BindTo(texCoord);\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0if (weight >= 0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mWeightAttrib->BindTo(weight);\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0if (influcence >= 0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mInfluenceAttrib->BindTo(influcence);\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cpp\n    void Mesh::Draw() {\n    \u00a0\u00a0\u00a0\u00a0if (mIndices.size() > 0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0::Draw(*mIndexBuffer, DrawMode::Triangles);\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0::Draw(mPosition.size(), DrawMode::Triangles);\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    void Mesh::DrawInstanced(unsigned int numInstances) {\n    \u00a0\u00a0\u00a0\u00a0if (mIndices.size() > 0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0::DrawInstanced(*mIndexBuffer, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DrawMode::Triangles, numInstances);\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0::DrawInstanced(mPosition.size(), \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DrawMode::Triangles, numInstances);\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cpp\n    void Mesh::UnBind(int position, int normal, int texCoord, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int weight, int influence) {\n    \u00a0\u00a0\u00a0\u00a0if (position >= 0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mPosAttrib->UnBindFrom(position);\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0if (normal >= 0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mNormAttrib->UnBindFrom(normal);\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0if (texCoord >= 0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mUvAttrib->UnBindFrom(texCoord);\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0if (weight >= 0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mWeightAttrib->UnBindFrom(weight);\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0if (influcence >= 0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mInfluenceAttrib->UnBindFrom(influence);\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cpp\n    void Mesh::CPUSkin(Skeleton& skeleton, Pose& pose) {\n    \u00a0\u00a0\u00a0\u00a0unsigned int numVerts = mPosition.size();\n    \u00a0\u00a0\u00a0\u00a0if (numVerts == 0) { return;\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0mSkinnedPosition.resize(numVerts);\n    \u00a0\u00a0\u00a0\u00a0mSkinnedNormal.resize(numVerts);\n    \u00a0\u00a0\u00a0\u00a0Pose& bindPose = skeleton.GetBindPose();\n    \u00a0\u00a0\u00a0\u00a0for (unsigned int i = 0; i < numVerts; ++i) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ivec4& joint = mInfluences[i];\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vec4& weight = mWeights[i];\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Transform skin0 = combine(pose[joint.x], \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0inverse(bindPose[joint.x]));\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vec3 p0 = transformPoint(skin0, mPosition[i]);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vec3 n0 = transformVector(skin0, mNormal[i]);\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Transform skin1 = combine(pose[joint.y], \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0inverse(bindPose[joint.y]));\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vec3 p1 = transformPoint(skin1, mPosition[i]);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vec3 n1 = transformVector(skin1, mNormal[i]);\n\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Transform skin2 = combine(pose[joint.z], \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0inverse(bindPose[joint.z]));\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vec3 p2 = transformPoint(skin2, mPosition[i]);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vec3 n2 = transformVector(skin2, mNormal[i]);\n\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Transform skin3 = combine(pose[joint.w], \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0inverse(bindPose[joint.w]));\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vec3 p3 = transformPoint(skin3, mPosition[i]);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vec3 n3 = transformVector(skin3, mNormal[i]);\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mSkinnedPosition[i] = p0 * weight.x + \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0p1 * weight.y + \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0p2 * weight.z + \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0p3 * weight.w;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mSkinnedNormal[i] = n0 * weight.x + \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0n1 * weight.y + \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0n2 * weight.z + \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0n3 * weight.w;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0mPosAttrib->Set(mSkinnedPosition);\n    \u00a0\u00a0\u00a0\u00a0mNormAttrib->Set(mSkinnedNormal);\n    }\n    ```", "```cpp\nvoid Mesh::CPUSkin(Skeleton& skeleton, Pose& pose) {\n\u00a0\u00a0\u00a0\u00a0unsigned int numVerts = (unsigned int)mPosition.size();\n\u00a0\u00a0\u00a0\u00a0if (numVerts == 0) { return; }\n\u00a0\u00a0\u00a0\u00a0mSkinnedPosition.resize(numVerts);\n\u00a0\u00a0\u00a0\u00a0mSkinnedNormal.resize(numVerts);\n\u00a0\u00a0\u00a0\u00a0pose.GetMatrixPalette(mPosePalette);\n\u00a0\u00a0\u00a0\u00a0vector<mat4> invPosePalette = skeleton.GetInvBindPose();\n\u00a0\u00a0\u00a0\u00a0for (unsigned int i = 0; i < numVerts; ++i) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ivec4& j = mInfluences[i];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vec4& w = mWeights[i];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mat4 m0=(mPosePalette[j.x]*invPosePalette[j.x])*w.x;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mat4 m1=(mPosePalette[j.y]*invPosePalette[j.y])*w.y;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mat4 m2=(mPosePalette[j.z]*invPosePalette[j.z])*w.z;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mat4 m3=(mPosePalette[j.w]*invPosePalette[j.w])*w.w;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mat4 skin = m0 + m1 + m2 + m3;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mSkinnedPosition[i]=transformPoint(skin,mPosition[i]);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mSkinnedNormal[i] = transformVector(skin, mNormal[i]);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0mPosAttrib->Set(mSkinnedPosition);\n\u00a0\u00a0\u00a0\u00a0mNormAttrib->Set(mSkinnedNormal);\n}\n```", "```cpp\n    // In the GLTFHelpers namespace\n    void GLTFHelpers::MeshFromAttribute(Mesh& outMesh, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cgltf_attribute& attribute, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cgltf_skin* skin, cgltf_node* nodes, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int nodeCount) {\n    \u00a0\u00a0\u00a0\u00a0cgltf_attribute_type attribType = attribute.type;\n    \u00a0\u00a0\u00a0\u00a0cgltf_accessor& accessor = *attribute.data;\n    \u00a0\u00a0\u00a0\u00a0unsigned int componentCount = 0;\n    \u00a0\u00a0\u00a0\u00a0if (accessor.type == cgltf_type_vec2) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0componentCount = 2;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0else if (accessor.type == cgltf_type_vec3) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0componentCount = 3;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0else if (accessor.type == cgltf_type_vec4) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0componentCount = 4;\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0std::vector<float> values;\n    \u00a0\u00a0\u00a0\u00a0GetScalarValues(values, componentCount, accessor);\n    \u00a0\u00a0\u00a0\u00a0unsigned int acessorCount = accessor.count;\n    \u00a0\u00a0\u00a0\u00a0std::vector<vec3>& positions = outMesh.GetPosition();\n    \u00a0\u00a0\u00a0\u00a0std::vector<vec3>& normals = outMesh.GetNormal();\n    \u00a0\u00a0\u00a0\u00a0std::vector<vec2>& texCoords = outMesh.GetTexCoord();\n    \u00a0\u00a0\u00a0\u00a0std::vector<ivec4>& influences = \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 outMesh.GetInfluences();\n    \u00a0\u00a0\u00a0\u00a0std::vector<vec4>& weights = outMesh.GetWeights();\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0for (unsigned int i = 0; i < acessorCount; ++i) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int index = i * componentCount;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0switch (attribType) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case cgltf_attribute_type_position:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0positions.push_back(vec3(values[index + 0], \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0values[index + 1],\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0values[index + 2]));\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case cgltf_attribute_type_texcoord:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0texCoords.push_back(vec2(values[index + 0], \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0values[index + 1]));\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case cgltf_attribute_type_weights:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0weights.push_back(vec4(values[index + 0], \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 values[index + 1], \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 values[index + 2], \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 values[index + 3]));\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case cgltf_attribute_type_normal:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vec3 normal = vec3(values[index + 0], \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 values[index + 1], \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 values[index + 2]);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (lenSq(normal) < 0.000001f) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0normal = vec3(0, 1, 0);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0normals.push_back(normalized(normal));\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case cgltf_attribute_type_joints:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// These indices are skin relative.\u00a0\u00a0This \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// function has no information about the\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// skin that is being parsed. Add +0.5f to \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// round, since we can't read integers\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ivec4 joints(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(int)(values[index + 0] + 0.5f),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(int)(values[index + 1] + 0.5f),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(int)(values[index + 2] + 0.5f),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(int)(values[index + 3] + 0.5f)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0);\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0joints.x = GetNodeIndex(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 skin->joints[joints.x], \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 nodes, nodeCount);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0joints.y = GetNodeIndex(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 skin->joints[joints.y], \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 nodes, nodeCount);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0joints.z = GetNodeIndex(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 skin->joints[joints.z], \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 nodes, nodeCount);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0joints.w = GetNodeIndex(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 skin->joints[joints.w], \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 nodes, nodeCount);\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0joints.x = std::max(0, joints.x);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0joints.y = std::max(0, joints.y);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0joints.z = std::max(0, joints.z);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0joints.w = std::max(0, joints.w);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0influences.push_back(joints);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    }// End of MeshFromAttribute function\n    ```", "```cpp\n    std::vector<Mesh> LoadMeshes(cgltf_data* data) {\n    \u00a0\u00a0\u00a0\u00a0std::vector<Mesh> result;\n    \u00a0\u00a0\u00a0\u00a0cgltf_node* nodes = data->nodes;\n    \u00a0\u00a0\u00a0\u00a0unsigned int nodeCount = data->nodes_count;\n    \u00a0\u00a0\u00a0\u00a0for (unsigned int i = 0; i < nodeCount; ++i) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cgltf_node* node = &nodes[i];\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (node->mesh == 0 || node->skin == 0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0continue;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int numPrims = node->mesh->primitives_count;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (int j = 0; j < numPrims; ++j) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result.push_back(Mesh());\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Mesh& mesh = result[result.size() - 1];\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cgltf_primitive* primitive = \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &node->mesh->primitives[j];\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned int ac=primitive->attributes_count;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (unsigned int k = 0; k < ac; ++k) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cgltf_attribute* attribute = \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &primitive->attributes[k];\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0GLTFHelpers::MeshFromAttribute(mesh,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 *attribute, node->skin, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 nodes, nodeCount);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (primitive->indices != 0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int ic = primitive->indices->count;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::vector<unsigned int>& indices = \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 mesh.GetIndices();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0indices.resize(ic);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (unsigned int k = 0; k < ic; ++k) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 indices[k]=cgltf_accessor_read_index(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0primitive->indices, k);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mesh.UpdateOpenGLBuffers();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0return result;\n    } // End of the LoadMeshes function\n    ```", "```cpp\n    #version 330 core\n    uniform mat4 model;\n    uniform mat4 view;\n    uniform mat4 projection;\n    in vec3 position;\n    in vec3 normal;\n    in vec2 texCoord;\n    in vec4 weights;\n    in ivec4 joints;\n    ```", "```cpp\n    uniform mat4 pose[120];\n    uniform mat4 invBindPose[120];\n    out vec3 norm;\n    out vec3 fragPos;\n    out vec2 uv;\n    ```", "```cpp\n    void main() {\n    mat4 skin =(pose[joints.x]* invBindPose[joints.x]) \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0* weights.x;\n    skin+=(pose[joints.y] * invBindPose[joints.y]) \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0* weights.y;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 skin+=(pose[joints.z] * invBindPose[joints.z])\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0* weights.z;\n    skin+=(pose[joints.w] * invBindPose[joints.w]) \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0* weights.w;\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0gl_Position= projection * view * model * \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 skin * vec4(position,1.0);\n\n    \u00a0\u00a0\u00a0\u00a0fragPos = vec3(model * skin * vec4(position, 1.0));\n    \u00a0\u00a0\u00a0\u00a0norm = vec3(model * skin * vec4(normal, 0.0f));\n    \u00a0\u00a0\u00a0\u00a0uv = texCoord;\n    }\n    ```"]