["```cpp\n> sudo apt-get install build-essential git cmake\n```", "```cpp\n> sudo apt-get install build-essential git\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter05\n```", "```cpp\n> cmake .\n> make recipe01_examples\n```", "```cpp\n> ./recipe01_example01\nThe answer is: 42\nThe answer is: 42\nThe answer is: 42\nThe\n answer is: 42\nThe answer is: 42\n...\n\n> ./recipe01_example02\nThe answer is: 42\nThe answer is: 42\nThe answer is: 42\nThe answer is: 42\nThe answer is: 42\n...\n\n> ./recipe01_example03\n...\n\n> ./recipe01_example04\nThe answer is: 42\n\n> ./recipe01_example05\nThe answer is: 42\nThe answer is: 42\nThe answer is: 42\nThe answer is: 42\nThe answer is: 42\n...\n\n> ./recipe01_example06\nThe answer is: 42\nThe answer is: 42\n\n> ./recipe01_example07\n\n> ./recipe01_example08\nlock acquired\nlock failed\n```", "```cpp\n#include <thread>\n#include <string>\n#include <iostream>\n\nvoid foo()\n{\n    static std::string msg{\"The answer is: 42\\n\"};\n    while(true) {\n        for (const auto &c : msg) {\n            std::clog << c;\n        }\n    }\n}\n\nint main(void)\n{\n    std::thread t1{foo};\n    std::thread t2{foo};\n\n    t1.join();\n    t2.join();\n\n    // Never reached\n    return 0;\n}\n```", "```cpp\n#include <mutex>\n#include <thread>\n#include <string>\n#include <iostream>\n\nstd::mutex m{};\n\nvoid foo()\n{\n    static std::string msg{\"The answer is: 42\\n\"};\n    while(true) {\n        m.lock();\n        for (const auto &c : msg) {\n            std::clog << c;\n        }\n        m.unlock();\n    }\n}\n\nint main(void)\n{\n    std::thread t1{foo};\n    std::thread t2{foo};\n\n    t1.join();\n    t2.join();\n\n    // Never reached\n    return 0;\n}\n```", "```cpp\n#include <mutex>\n#include <thread>\n\nstd::mutex m{};\n\nvoid foo()\n{\n    m.lock();\n}\n\nint main(void)\n{\n    std::thread t1{foo};\n    std::thread t2{foo};\n\n    t1.join();\n    t2.join();\n\n    // Never reached\n    return 0;\n}\n```", "```cpp\n#include <array>\n#include <mutex>\n#include <thread>\n#include <string>\n#include <iostream>\n\nstd::mutex m{};\nstd::array<int,6> numbers{4,8,15,16,23,42};\n\nint foo(int index)\n{\n    m.lock();\n    auto element = numbers.at(index);\n    m.unlock();\n\n    return element;\n}\n\nint main(void)\n{\n    std::cout << \"The answer is: \" << foo(5) << '\\n';\n    return 0;\n}\n```", "```cpp\n#include <mutex>\n#include <thread>\n#include <iostream>\n\nstd::mutex m{};\n\nvoid foo()\n{\n    static std::string msg{\"The answer is: 42\\n\"};\n\n    while(true) {\n        std::lock_guard lock(m);\n        for (const auto &c : msg) {\n            std::clog << c;\n        }\n    }\n}\n\nint main(void)\n{\n    std::thread t1{foo};\n    std::thread t2{foo};\n\n    t1.join();\n    t2.join();\n\n    // Never reached\n    return 0;\n}\n```", "```cpp\n#include <mutex>\n#include <thread>\n#include <string>\n#include <iostream>\n\nstd::recursive_mutex m{};\n\nvoid foo()\n{\n    m.lock();\n    m.lock();\n\n    std::cout << \"The answer is: 42\\n\";\n\n    m.unlock();\n    m.unlock();\n}\n\nint main(void)\n{\n    std::thread t1{foo};\n    std::thread t2{foo};\n\n    t1.join();\n    t2.join();\n\n    return 0;\n}\n```", "```cpp\nint i = 0;\n\nauto tmp = i;\ntmp++;\ni = tmp; // i == 1\n```", "```cpp\nauto tmp_thread1 = i;\ntmp_thread1++;\ni = tmp_thread1; // i == 1\n\nauto tmp_thread2 = i;\ntmp_thread2++;\ni = tmp_thread2; // i == 2\n```", "```cpp\nauto tmp_thread1 = i; // 0\nauto tmp_thread2 = i; // 0\ntmp_thread1++; // 1\ntmp_thread2++; // 1\ni = tmp_thread1; // i == 1\ni = tmp_thread2; // i == 1\n```", "```cpp\n#include <mutex>\n#include <shared_mutex>\n#include <thread>\n#include <iostream>\n\nint count_rw{};\nconst auto &count_ro = count_rw;\n\nstd::shared_mutex m{};\n\nvoid reader()\n{\n    while(true) {\n        std::shared_lock lock(m);\n        if (count_ro >= 42) {\n            return;\n        }\n    }\n}\n\nvoid writer()\n{\n    while(true) {\n        std::unique_lock lock(m);\n        if (++count_rw == 100) {\n            return;\n        }\n    }\n}\n\nint main(void)\n{\n    std::thread t1{reader};\n    std::thread t2{reader};\n    std::thread t3{reader};\n    std::thread t4{reader};\n    std::thread t5{writer};\n\n    t1.join();\n    t2.join();\n    t3.join();\n    t4.join();\n    t5.join();\n\n    return 0;\n}\n```", "```cpp\n#include <mutex>\n#include <thread>\n#include <iostream>\n\nstd::timed_mutex m{};\n\nvoid foo()\n{\n    using namespace std::chrono;\n\n    if (m.try_lock_for(seconds(1))) {\n        std::cout << \"lock acquired\\n\";\n    }\n    else {\n        std::cout << \"lock failed\\n\";\n    }\n}\n\nint main(void)\n{\n    std::thread t1{foo};\n    std::thread t2{foo};\n\n    t1.join();\n    t2.join();\n\n    return 0;\n}\n```", "```cpp\nint i = 0;\n\nauto tmp = i;\ntmp++;\ni = tmp; // i == 1\n```", "```cpp\n> sudo apt-get install build-essential git\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter05\n```", "```cpp\n> cmake .\n> make recipe02_examples\n```", "```cpp\n> ./recipe02_example01\ncount: 711\natomic count: 1000\n```", "```cpp\n#include <atomic>\n#include <thread>\n#include <iostream>\n\nint count{};\nstd::atomic<int> atomic_count{};\n\nvoid foo()\n{\n    do {\n        count++;\n        atomic_count++;\n    }\n    while (atomic_count < 99999);\n}\n\nint main(void)\n{\n    std::thread t1{foo};\n    std::thread t2{foo};\n\n    t1.join();\n    t2.join();\n\n    std::cout << \"count: \" << count << '\\n';\n    std::cout << \"atomic count: \" << atomic_count << '\\n';\n\n    return 0;\n}\n```", "```cpp\n> sudo apt-get install build-essential git\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter05\n```", "```cpp\n> cmake .\n> make recipe03_examples\n```", "```cpp\n> ./recipe03_example01\nThe answer is: 42\n\n> ./recipe03_example03\nThe answer is: 42\n```", "```cpp\n#include <mutex>\n#include <thread>\n#include <iostream>\n\nstd::mutex m{};\n\nclass the_answer\n{\npublic:\n    void print() const\n    {\n        std::lock_guard lock(m);\n        std::cout << \"The answer is: 42\\n\";\n    }\n};\n\nint main(void)\n{\n    the_answer is;\n    is.print();\n\n    return 0;\n}\n```", "```cpp\n#include <mutex>\n#include <thread>\n#include <iostream>\n\nclass the_answer\n{\n    std::mutex m{};\n\npublic:\n    void print() const\n    {\n        std::lock_guard lock(m);\n        std::cout << \"The answer is: 42\\n\";\n    }\n};\n\nint main(void)\n{\n    the_answer is;\n    is.print();\n\n    return 0;\n}\n```", "```cpp\n#include <mutex>\n#include <thread>\n#include <iostream>\n\nclass the_answer\n{\n    mutable std::mutex m{};\n\npublic:\n    void print() const\n    {\n        std::lock_guard lock(m);\n        std::cout << \"The answer is: 42\\n\";\n    }\n};\n\nint main(void)\n{\n    the_answer is;\n    is.print();\n\n    return 0;\n}\n```", "```cpp\n> sudo apt-get install build-essential git\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter05\n```", "```cpp\n> cmake .\n> make recipe04_examples\n```", "```cpp\n> ./recipe04_example01\n```", "```cpp\n#include <mutex>\n#include <stack>\n#include <iostream>\n\ntemplate<typename T>\nclass my_stack\n{\n    std::stack<T> m_stack;\n    mutable std::mutex m{};\n\npublic:\n\n    template<typename ARG>\n    void push(ARG &&arg)\n    {\n        std::lock_guard lock(m);\n        m_stack.push(std::forward<ARG>(arg));\n    }\n\n void pop()\n    {\n        std::lock_guard lock(m);\n        m_stack.pop();\n    }\n\n    auto empty() const\n    {\n        std::lock_guard lock(m);\n        return m_stack.empty();\n    }\n};\n```", "```cpp\nint main(void)\n{\n    my_stack<int> s;\n\n    s.push(4);\n    s.push(8);\n    s.push(15);\n    s.push(16);\n    s.push(23);\n    s.push(42);\n\n    while(s.empty()) {\n        s.pop();\n    }\n\n    return 0;\n}\n```", "```cpp\n> sudo apt-get install build-essential git\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter05\n```", "```cpp\n> cmake .\n> make recipe05_examples\n```", "```cpp\n> ./recipe05_example01\n```", "```cpp\n#include <mutex>\n#include <stack>\n#include <iostream>\n\nstd::mutex m{};\n\ntemplate<typename S, typename T>\nvoid push(S &s, T &&t)\n{\n    std::lock_guard lock(m);\n    s.push(std::forward<T>(t));\n}\n\ntemplate<typename S>\nvoid pop(S &s)\n{\n    std::lock_guard lock(m);\n    s.pop();\n}\n\ntemplate<typename S>\nauto empty(S &s)\n{\n    std::lock_guard lock(m);\n    return s.empty();\n}\n```", "```cpp\nint main(void)\n{\n    std::stack<int> mystack;\n\n    push(mystack, 4);\n    push(mystack, 8);\n    push(mystack, 15);\n    push(mystack, 16);\n    push(mystack, 23);\n    push(mystack, 42);\n\n    while(empty(mystack)) {\n        pop(mystack);\n    }\n\n    return 0;\n}\n```", "```cpp\n> sudo apt-get install build-essential git\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter05\n```", "```cpp\n> cmake .\n> make recipe06_examples\n```", "```cpp\n> time ./recipe06_example01\n999999\n999999\n999999\n999999\n\nreal 0m1.477s\n...\n\n> time ./recipe06_example02\n999999\n999999\n999999\n999999\n\nreal 0m1.058s\n...\n\n> time ./recipe06_example03\n999999\n999999\n999998\n999999\n\nreal 0m1.140s\n...\n```", "```cpp\n#include <vector>\n#include <iostream>\n#include <algorithm>\n\nconstexpr auto size = 1000000;\n\nint main(void)\n{\n    std::vector<int> numbers1(size);\n    std::vector<int> numbers2(size);\n    std::vector<int> numbers3(size);\n    std::vector<int> numbers4(size);\n```", "```cpp\n    std::generate(numbers1.begin(), numbers1.end(), []() {\n      return rand() % size;\n    });\n    std::generate(numbers2.begin(), numbers2.end(), []() {\n      return rand() % size;\n    });\n    std::generate(numbers3.begin(), numbers3.end(), []() {\n      return rand() % size;\n    });\n    std::generate(numbers4.begin(), numbers4.end(), []() {\n      return rand() % size;\n    });\n```", "```cpp\n    std::sort(numbers1.begin(), numbers1.end());\n    std::sort(numbers2.begin(), numbers2.end());\n    std::sort(numbers3.begin(), numbers3.end());\n    std::sort(numbers4.begin(), numbers4.end());\n```", "```cpp\n    std::cout << numbers1.back() << '\\n';\n    std::cout << numbers2.back() << '\\n';\n    std::cout << numbers3.back() << '\\n';\n    std::cout << numbers4.back() << '\\n';\n\n    return 0;\n}\n```", "```cpp\n#include <future>\n#include <thread>\n#include <vector>\n#include <iostream>\n#include <algorithm>\n\nconstexpr auto size = 1000000;\n\nint foo()\n{\n    std::vector<int> numbers(size);\n    std::generate(numbers.begin(), numbers.end(), []() {\n      return rand() % size;\n    });\n\n    std::sort(numbers.begin(), numbers.end());\n    return numbers.back();\n}\n```", "```cpp\nint main(void)\n{\n    auto a1 = std::async(std::launch::async, foo);\n    auto a2 = std::async(std::launch::async, foo);\n    auto a3 = std::async(std::launch::async, foo);\n    auto a4 = std::async(std::launch::async, foo);\n\n    std::cout << a1.get() << '\\n';\n    std::cout << a2.get() << '\\n';\n    std::cout << a3.get() << '\\n';\n    std::cout << a4.get() << '\\n';\n\n    return 0;\n}\n```", "```cpp\nint main(void)\n{\n    auto a1 = std::async(std::launch::deferred, foo);\n    auto a2 = std::async(std::launch::deferred, foo);\n    auto a3 = std::async(std::launch::deferred, foo);\n    auto a4 = std::async(std::launch::deferred, foo);\n\n    std::cout << a1.get() << '\\n';\n    std::cout << a2.get() << '\\n';\n    std::cout << a3.get() << '\\n';\n    std::cout << a4.get() << '\\n';\n\n    return 0;\n}\n```", "```cpp\n> sudo apt-get install build-essential git\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter05\n```", "```cpp\n> cmake .\n> make recipe07_examples\n```", "```cpp\n> ./recipe07_example01\nThe answer is: 42\n\n> ./recipe07_example02\nThe answer is: 42\n```", "```cpp\n#include <thread>\n#include <iostream>\n#include <future>\n\nvoid foo(std::promise<int> promise)\n{\n    promise.set_value(42);\n}\n\nint main(void)\n{\n    std::promise<int> promise;\n    auto future = promise.get_future();\n\n    std::thread t{foo, std::move(promise)};\n    t.join();\n\n    std::cout << \"The answer is: \" << future.get() << '\\n';\n\n    return 0;\n}\n```", "```cpp\n#include <thread>\n#include <iostream>\n#include <future>\n\nvoid foo(std::promise<int> promise)\n{\n    promise.set_value(42);\n    while (true);\n}\n\nint main(void)\n{\n    std::promise<int> promise;\n    auto future = promise.get_future();\n\n    std::thread t{foo, std::move(promise)};\n\n    future.wait();\n    std::cout << \"The answer is: \" << future.get() << '\\n';\n\n    t.join();\n\n    // Never reached\n    return 0;\n}\n```"]