- en: '14'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '14'
- en: Deploying Multiplayer Games
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署多人游戏
- en: Deploying an Unreal multiplayer game can be a daunting task for any developer.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何开发者来说，部署 Unreal 多人游戏可能是一项艰巨的任务。
- en: In this chapter, I will present you with the key steps involved in packaging
    and deploying a game – a process that needs proper planning and preparation beforehand.
    This will help you avoid most issues, resulting in a successful launch at deploy
    time.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我将向您介绍包装和部署游戏的关键步骤——这是一个需要事先进行适当规划和准备的过程。这将帮助您避免大多数问题，从而在部署时成功发布。
- en: This process will also involve a crucial task – compiling Unreal Engine from
    its source code and then packaging your game as a standalone server executable
    and client executable.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 此过程还将涉及一个关键任务——从源代码编译 Unreal Engine，然后将您的游戏打包为独立的服务器可执行文件和客户端可执行文件。
- en: 'So, in the next sections, I will present you with the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在接下来的几节中，我将向您介绍以下主题：
- en: Going online for real
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 真正上线
- en: Compiling Unreal Engine
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译 Unreal Engine
- en: Setting up a dedicated server
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置专用服务器
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To follow the topics presented in this chapter, you should have completed all
    the previous chapters and have understood their content.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本章中介绍的主题，您应该已经完成了所有前面的章节，并理解了它们的内容。
- en: Although not mandatory, basic knowledge of Git technology ([https://git-scm.com](https://git-scm.com))
    will help in the second section of this chapter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然不是强制性的，但基本了解 Git 技术 ([https://git-scm.com](https://git-scm.com)) 将有助于本章的第二部分。
- en: Going online for real
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 真正上线
- en: Up until now, to work on your projects, you have been utilizing an Unreal Engine
    official release that can be accessed through the Epic Games Launcher. However,
    if you aspire to enhance your skills in multiplayer development, you must take
    a further step to proficiently excel in this field and become an adept multiplayer
    game developer.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，为了处理您的项目，您一直在使用可以通过 Epic Games Launcher 访问的 Unreal Engine 官方发布版本。然而，如果您渴望提高您的多人开发技能，您必须进一步努力，以在多人开发领域熟练地脱颖而出，并成为一名熟练的多人游戏开发者。
- en: The first thing you need to know is that Unreal Engine releases are not “complete”
    versions of the software; they offer almost all that’s needed to work on your
    project, but they usually miss less common and more advanced features. One of
    the main reasons is to keep the regular version of Unreal Engine to a smaller,
    more affordable size.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要知道的是，Unreal Engine 的发布版本并不是软件的“完整”版本；它们提供了几乎您在项目上所需的所有功能，但通常缺少较少见和更高级的功能。其中一个主要原因是保持
    Unreal Engine 的常规版本更小、更经济。
- en: Regrettably, these releases lack the necessary functionality to compile a project
    for multiplayer deployment, which in turn means that if you plan to release your
    game in the wild, you are out of luck.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 很遗憾，这些发布版本缺乏编译多人部署项目所需的功能，这反过来意味着，如果您计划在野外发布您的游戏，那么您将很不幸。
- en: Luckily there is a solution available – compiling the Unreal Engine Editor yourself
    directly from the source code. The full Unreal Engine source code is available
    in a repository hosted on GitHub ([https://github.com/](https://github.com/))
    and, with minimum effort, you will be able to get it and use it for your own needs.
    There are many advantages in compiling your own version of the engine, including
    peeking through the actual engine implementation classes – such as Actor and Pawn
    – and stepping inside the engine code while debugging your game to get an introspection
    on what’s happening.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，有一个解决方案可用——直接从源代码编译 Unreal Engine 编辑器。完整的 Unreal Engine 源代码存储在 GitHub 上托管的一个仓库中（[https://github.com/](https://github.com/)），并且只需付出最小的努力，您就能获取它并用于您自己的需求。编译您自己的引擎版本有许多优点，包括在调试游戏时查看实际的引擎实现类（如
    Actor 和 Pawn）以及进入引擎代码，以获得对发生情况的洞察。
- en: 'A great number of individuals have made valuable contributions to the engine
    by identifying software glitches and taking the time to fix them. At the time
    of writing this chapter, the number of contributors to the engine is as many as
    563 developers, as shown in *Figure 14**.1*:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 许多个人通过识别软件漏洞并花费时间修复它们，为该引擎做出了宝贵的贡献。在撰写本章时，该引擎的贡献者人数多达 563 名开发者，如图 *14.1* 所示：
- en: '![Figure 14.1 – The Unreal Engine GitHub page](img/Figure_14_01_B18203.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.1 – Unreal Engine 的 GitHub 页面](img/Figure_14_01_B18203.jpg)'
- en: Figure 14.1 – The Unreal Engine GitHub page
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.1 – Unreal Engine 的 GitHub 页面
- en: Another advantage of accessing the engine source code and compiling your own
    executable version is that you will be able to compile your multiplayer game as
    a **dedicated server** – a game version that will run without rendering any visuals
    and that will not run on a client machine. This kind of game instance is usually
    referred to as a **headless** game version.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 访问引擎源代码并编译自己的可执行版本的好处之一是，您将能够将您的多人游戏编译为**专用服务器**——一种不渲染任何视觉效果的版本，且不会在客户端机器上运行。这类游戏实例通常被称为**无头**游戏版本。
- en: 'Using a dedicated server offers many advantages over a listen server:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用专用服务器比使用监听服务器具有许多优势：
- en: The size of the executable will be smaller
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可执行文件的大小将更小
- en: The server version will mainly focus on gameplay logic and handling information
    from the clients
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器版本将主要关注游戏逻辑和处理来自客户端的信息
- en: No client will have advantages or disadvantages over the others due to hosting
    the game session
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于托管游戏会话，没有任何客户端会比其他客户端有优势或劣势
- en: You can build a dedicated server release separate from the client release and
    a client release from the dedicated server
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以构建一个与客户端发布版分开的专用服务器发布版，以及从专用服务器构建的客户端发布版
- en: The server-side code logic can be compiled just in the server, obfuscating important
    code that may be available to malevolent hackers if distributed inside the client
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器端代码逻辑可以在服务器上编译，从而隐藏可能被恶意黑客获取的重要代码，如果将其分发到客户端中
- en: With this in mind, let’s kick off this exciting journey by creating our very
    own executable program for the Unreal Engine Editor using the source code.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在此基础上，让我们开始这段激动人心的旅程，通过使用源代码创建我们自己的虚幻引擎编辑器可执行程序。
- en: The first thing to do is to obtain the actual source code from the GitHub repository
    – something we are going to do in the next section.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 首件事是获取GitHub仓库中的实际源代码——我们将在下一节中完成这项工作。
- en: Compiling the Unreal Engine
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编译虚幻引擎
- en: In this section, you’ll be downloading the engine source code and building it
    to get a personal, executable release that will let you create your own dedicated
    servers for multiplayer deployment.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将下载引擎源代码并构建它，以获得个人可执行发布版，这将允许您创建自己的专用服务器进行多人部署。
- en: 'This process is divided into two main parts:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 此过程分为两个主要部分：
- en: Cloning the project from the official Epic Games GitHub repository
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从官方Epic Games GitHub仓库克隆项目
- en: Setting up and building the sources with Visual Studio
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Visual Studio设置和构建源代码
- en: Don’t worry if you’re unfamiliar with GitHub – I’ll walk you through everything
    with clear and easy-to-follow step-by-step instructions.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不熟悉GitHub，不要担心——我将用清晰易懂的步骤引导您完成所有操作。
- en: Downloading the Unreal Engine source project
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载虚幻引擎源代码项目
- en: 'During the next steps, you will be downloading the Unreal Engine source code
    from the official Epic Games GitHub repository in order to have the full project
    in your hands. The requisites you will need to satisfy are as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的步骤中，您将从官方Epic Games GitHub仓库下载虚幻引擎源代码，以便将整个项目掌握在手中。您需要满足以下要求：
- en: Have Git installed on your computer
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的计算机上安装Git
- en: Have a GitHub account
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拥有GitHub账户
- en: Connect the GitHub account to your Epic Games account
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将GitHub账户连接到您的Epic Games账户
- en: Note
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you already know Git, chances are you will already have satisfied some or
    all of the requisites. If so, feel free to skip the following steps.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经了解Git，那么您可能已经满足了一些或所有要求。如果是这样，请随意跳过以下步骤。
- en: You will start by installing Git on your computer.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 您将首先在计算机上安装Git。
- en: Installing Git on your computer
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在您的计算机上安装Git
- en: '**Git** is a version control system that is both free and open source. It is
    designed to track the changes made to computer files, which it does by taking
    “snapshots” of a project’s files whenever a commit is executed. This feature enables
    developers to oversee and regulate their code’s evolution in an efficient, speedy
    fashion. Git is an excellent source code management tool for projects of all sizes,
    ranging from small to extremely large.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**Git** 是一个免费且开源的版本控制系统。它旨在跟踪对计算机文件所做的更改，通过在执行提交时对项目文件进行“快照”来实现。此功能使开发者能够以高效、快速的方式监督和控制其代码的演变。Git
    是一个出色的源代码管理工具，适用于从小型到极其大型所有规模的项目。'
- en: As stated before, you don’t have to be proficient with Git in order to obtain
    the Unreal Engine repository – you will just be using its cloning capabilities
    to download the engine source code.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，您不需要精通 Git 就能获取 Unreal Engine 仓库——您只需使用其克隆功能下载引擎源代码。
- en: To install Git on your computer, head to the official download page ([https://git-scm.com/downloads](https://git-scm.com/downloads))
    and get the latest release. Once it is downloaded, simply install it as you would
    do with any common software. Once the installation phase has been completed, you
    will have the Git command line available on your machine.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的计算机上安装 Git，请访问官方下载页面 ([https://git-scm.com/downloads](https://git-scm.com/downloads))
    并获取最新版本。下载完成后，就像安装任何常见软件一样简单地安装它。一旦安装阶段完成，您将在您的机器上获得 Git 命令行。
- en: Note
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Some people – including me – prefer to use dedicated client software instead
    of using the command line, easing the pain of using the command prompt. If you
    feel uncomfortable with the command line, you can use a third-party client, some
    of which are listed on this page: [https://git-scm.com/downloads/guis](https://git-scm.com/downloads/guis).'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 有些人——包括我——更喜欢使用专用客户端软件而不是使用命令行，这样可以减轻使用命令提示符的痛苦。如果您对命令行感到不舒服，您可以使用第三方客户端，其中一些在本页面上列出：[https://git-scm.com/downloads/guis](https://git-scm.com/downloads/guis)。
- en: Once you have installed Git, you can safely proceed to create a GitHub account.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您安装了 Git，您就可以安全地继续创建 GitHub 账户。
- en: Creating a GitHub account
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建 GitHub 账户
- en: '**GitHub** ([https://github.com/](https://github.com/)) is a cloud-based service
    that allows software developers to store, manage, track, and control changes made
    to their code base using Git. It enables developers to collaborate on projects
    from anywhere and provides a range of features such as project management tools,
    documentation, issue tracking, and continuous integration and deployment. GitHub
    is widely used in the software development industry and has become a crucial part
    of the software development workflow for many organizations and developers.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**GitHub** ([https://github.com/](https://github.com/)) 是一个基于云的服务，允许软件开发者使用
    Git 存储管理、跟踪和控制对代码库所做的更改。它使开发者能够从任何地方协作进行项目，并提供项目管理工具、文档、问题跟踪和持续集成和部署等功能。GitHub
    在软件开发行业中得到广泛应用，并已成为许多组织和开发人员软件开发工作流程的关键部分。'
- en: To create a GitHub account, you just need to click the **Sign up** button and,
    after adding your email, follow the instructions you will be presented with.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建 GitHub 账户，您只需点击**注册**按钮，然后添加您的电子邮件后，按照您将收到的指示操作。
- en: Once you have got your GitHub account, it’s time to get access to the Epic Games
    organization by connecting the GitHub and Epic Games accounts.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您创建了 GitHub 账户，就是时候通过连接 GitHub 和 Epic Games 账户来访问 Epic Games 组织了。
- en: Connecting your GitHub account to the Epic Games account
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将您的 GitHub 账户连接到 Epic Games 账户
- en: 'Epic Games has a GitHub organization ([https://github.com/EpicGames](https://github.com/EpicGames))
    where public repositories are stored, including the Unreal Engine project. Accessing
    this organization is free – you just have to connect the Epic Games account to
    the GitHub one. Here’s how to do so:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Epic Games 拥有一个 GitHub 组织 ([https://github.com/EpicGames](https://github.com/EpicGames))，其中存储了公共仓库，包括
    Unreal Engine 项目。访问这个组织是免费的——您只需将 Epic Games 账户连接到 GitHub 账户。以下是操作方法：
- en: Visit your Epic Games account page ([https://www.epicgames.com/account](https://www.epicgames.com/account)).
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问您的 Epic Games 账户页面 ([https://www.epicgames.com/account](https://www.epicgames.com/account))。
- en: Select the **APPS AND** **ACCOUNTS** page.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**应用程序和账户**页面。
- en: 'In the **GITHUB** section, click the **CONNECT** button, as shown in *Figure
    14**.2*:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**GITHUB**部分，点击如图 14.2 所示的**连接**按钮：
- en: '![Figure 14.2 – The Apps and Accounts section](img/Figure_14_02_B18203.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.2 – 应用程序和账户部分](img/Figure_14_02_B18203.jpg)'
- en: Figure 14.2 – The Apps and Accounts section
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.2 – 应用程序和账户部分
- en: Once you have authorized the connect operation, you will be granted access to
    the Epic Games GitHub organization ([https://github.com/EpicGames](https://github.com/EpicGames))
    and to the Unreal Engine repository ([https://github.com/EpicGames/UnrealEngine](https://github.com/EpicGames/UnrealEngine)).
    The Unreal Engine repository includes all the Unreal Engine versions organized
    in their own separate branches.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您授权了连接操作，您将获得访问 Epic Games GitHub 组织 ([https://github.com/EpicGames](https://github.com/EpicGames))
    和 Unreal Engine 仓库 ([https://github.com/EpicGames/UnrealEngine](https://github.com/EpicGames/UnrealEngine))
    的权限。Unreal Engine 仓库包括所有 Unreal Engine 版本，它们分别组织在自己的分支中。
- en: In Git, a `release` branch includes the latest stable release of the engine.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在Git中，`release`分支包含引擎的最新稳定版本。
- en: 'You are now ready to clone the repository on your local machine:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以开始在本地机器上克隆仓库：
- en: On your PC, navigate to an empty folder or create a new one.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的PC上，导航到一个空文件夹或创建一个新的文件夹。
- en: 'Right-click and, from the drop-down menu, select **Git Bash Here**, as depicted
    in *Figure 14**.3*:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击，从下拉菜单中选择**Git Bash Here**，如图*图14.3*所示：
- en: '![Figure 14.3 – The Git Bash Here option](img/Figure_14_03_B18203.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图14.3 – Git Bash Here选项](img/Figure_14_03_B18203.jpg)'
- en: Figure 14.3 – The Git Bash Here option
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.3 – Git Bash Here选项
- en: This will open a command prompt and you will be ready to clone the Unreal Engine
    project.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开一个命令提示符，您将准备好克隆虚幻引擎项目。
- en: 'Type the following command:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令：
- en: '[PRE0]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You may be asked to enter your credentials; in this case, use those of your
    GitHub account.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能需要输入您的凭据；在这种情况下，请使用您的GitHub账户的凭据。
- en: The download and clone process may take a long time, depending on your internet
    connection.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 下载和克隆过程可能需要很长时间，具体取决于您的互联网连接。
- en: 'Once the process has finished, you should see an `UnrealEngine` folder in your
    directory; this is the project source code. In the Git terminal, type the following:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦过程完成，您应该在您的目录中看到一个`UnrealEngine`文件夹；这是项目源代码。在Git终端中，输入以下命令：
- en: '[PRE1]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This command will retrieve all available branches in the remote repository.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将检索远程仓库中所有可用的分支。
- en: 'As an optional step, if you want to work with a particular release of the engine,
    you can type the following command:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为可选步骤，如果您想使用引擎的特定版本，可以输入以下命令：
- en: '[PRE2]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'For instance, if you need Unreal Engine 5.1, you will type:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您需要虚幻引擎5.1，您将输入：
- en: '[PRE3]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This command will switch to the 5.1 version branch and make its sources available.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将切换到5.1版本分支，并使其源代码可用。
- en: Once the process has finished, you are ready to go and compile the sources.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦过程完成，您就可以开始编译源文件了。
- en: Compiling from the source code
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从源代码编译
- en: Once you have downloaded the source code from the GitHub repository, you’ll
    need to compile it, in order to get an executable out of it. This will allow you
    to launch the compiled Unreal Engine application and take advantage of all its
    features.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您从GitHub仓库下载了源代码，您就需要编译它，以便从中生成可执行文件。这将允许您启动编译后的虚幻引擎应用程序并利用其所有功能。
- en: 'There are four main steps you’ll need to complete in order to have a fully
    working executable:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 为了拥有一个完全工作的可执行文件，您需要完成以下四个主要步骤：
- en: Set up your programming IDE
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置您的编程IDE
- en: Set up the project
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置项目
- en: Generate the project files
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成项目文件
- en: Compile the source files
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译源文件
- en: Let’s get started by checking that your programming IDE is up to date and ready
    to go.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从检查您的编程IDE是否更新并准备好开始使用开始。
- en: Setting up your programming IDE
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置您的编程IDE
- en: 'As you have been working with Unreal and C++ so far, your programming IDE should
    already be up to date to compile the source files, but a double-check is mandatory,
    in order to have everything properly set up:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 由于您到目前为止一直在使用虚幻和C++，因此您的编程IDE应该已经更新到最新版本，以便编译源文件，但进行双重检查是强制性的，以确保一切设置正确：
- en: Open the Visual Studio installer on your PC.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的PC上的Visual Studio安装程序。
- en: 'Select **Modify** from your own Visual Studio installation, as shown in *Figure
    14**.4*:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的Visual Studio安装中选择**修改**，如图*图14.4*所示：
- en: '![Figure 14.4 – Visual Studio Installer](img/Figure_14_04_B18203.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图14.4 – Visual Studio安装程序](img/Figure_14_04_B18203.jpg)'
- en: Figure 14.4 – Visual Studio Installer
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.4 – Visual Studio安装程序
- en: 'Once the **Modyfing** window is open, select the **Individual components**
    tab, as shown in *Figure 14**.5*:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦**修改**窗口打开，选择**单个组件**选项卡，如图*图14.5*所示：
- en: '![Figure 14.5 – The Modifying window](img/Figure_14_05_B18203.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图14.5 – 修改窗口](img/Figure_14_05_B18203.jpg)'
- en: Figure 14.5 – The Modifying window
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.5 – 修改窗口
- en: 'From the **Individual components** tab, install the latest .NET Framework development
    tools, the latest .NET Framework SDK and – not mandatory, but strongly recommended
    – all the previous versions of the .NET Framework SDK. *Figure 14**.6* depicts
    my setup at the time of writing this book:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**单个组件**选项卡安装最新的.NET Framework开发工具、最新的.NET Framework SDK以及 – 虽然不是强制性的，但强烈推荐
    – 所有的.NET Framework SDK旧版本。*图14.6*展示了我在撰写本书时的设置：
- en: '![Figure 14.6 – The individual components setup](img/Figure_14_06_B18203.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图14.6 – 单个组件设置](img/Figure_14_06_B18203.jpg)'
- en: Figure 14.6 – The individual components setup
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.6 – 单个组件设置
- en: Once the installation is finished, you can safely close the Visual Studio installer
    and you’ll be ready to set up the project.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，你可以安全地关闭 Visual Studio 安装程序，并准备好设置项目。
- en: Setting up the project
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置项目
- en: 'In this step, you’ll be downloading the needed dependency files in order to
    properly set up the project. This process is pretty straightforward, but it may
    take some time, depending on your internet connection. Just open the source file
    project folder you cloned from GitHub, which should be named `Setup.bat` file,
    as shown in *Figure 14**.7*:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一步，你将下载所需的依赖文件，以便正确设置项目。这个过程相当直接，但可能需要一些时间，具体取决于你的互联网连接。只需打开从 GitHub 克隆的源文件项目文件夹，该文件夹应命名为
    `Setup.bat` 文件，如图 *图 14.7* 所示：
- en: '![Figure 14.7 – The Setup.bat file](img/Figure_14_07_B18203.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.7 – Setup.bat 文件](img/Figure_14_07_B18203.jpg)'
- en: Figure 14.7 – The Setup.bat file
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.7 – Setup.bat 文件
- en: Then right-click on this file and select **Run as administrator**; this will
    open the command prompt and run the needed commands.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 然后右键单击此文件并选择**以管理员身份运行**；这将打开命令提示符并运行所需的命令。
- en: Note
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For a more advanced level of customization, you may want to pre-determine the
    target hardware and platform. For instance, you can run the `Setup.bat` command
    excluding unneeded platforms by using the `-exclude` option. As an extra benefit,
    fewer files will be downloaded and, by the end of the build process, you will
    get an engine with a smaller file size.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更高级的定制级别，你可能想要预先确定目标硬件和平台。例如，你可以使用 `-exclude` 选项排除不需要的平台来运行 `Setup.bat` 命令。作为额外的好处，将下载
    fewer 文件，并且在构建过程结束时，你将得到一个文件大小更小的引擎。
- en: Once the process has finished, you will have added the needed dependencies and
    will be ready for the next step.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦过程完成，你将添加所需的依赖项，并准备好进行下一步。
- en: Generating the project files
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 生成项目文件
- en: 'Once you have properly set up your project, you are ready to generate the project
    files, in order to open the project in Visual Studio. The process is almost identical
    to the previous one, but you will have to run another `.bat` file instead. In
    the sources project folder (i.e., the `UnrealEngine` folder), locate the `GenerateProjectFiles.bat`
    file, as shown in *Figure 14**.8*:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你正确设置了项目，你就可以生成项目文件，以便在 Visual Studio 中打开项目。这个过程几乎与之前相同，但你将不得不运行另一个 `.bat`
    文件。在源项目文件夹（即 `UnrealEngine` 文件夹）中，找到 `GenerateProjectFiles.bat` 文件，如图 *图 14.8*
    所示：
- en: '![Figure 14.8  – The GenerateProjectFiles.bat file](img/Figure_14_08_B18203.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.8 – GenerateProjectFiles.bat 文件](img/Figure_14_08_B18203.jpg)'
- en: Figure 14.8 – The GenerateProjectFiles.bat file
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.8 – GenerateProjectFiles.bat 文件
- en: 'Again, right-click on the file and select `UE.sln` file added to your source
    files folder, as depicted in *Figure 14**.9*:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，右键单击文件并选择将 `UE.sln` 文件添加到你的源文件文件夹中，如图 *图 14.9* 所示：
- en: '![Figure 14.9 – The .sln file](img/Figure_14_09_B18203.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.9 – .sln 文件](img/Figure_14_09_B18203.jpg)'
- en: Figure 14.9 – The .sln file
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.9 – .sln 文件
- en: Note
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you require a greater degree of customization for the project generation
    command, I recommend referring to the official documentation, which provides an
    exhaustive list of all available command options: [https://docs.unrealengine.com/5.1/en-US/how-to-generate-unreal-engine-project-files-for-your-ide/](https://docs.unrealengine.com/5.1/en-US/how-to-generate-unreal-engine-project-files-for-your-ide/).'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要为项目生成命令进行更多定制，我建议参考官方文档，它提供了所有可用命令选项的详尽列表：[https://docs.unrealengine.com/5.1/en-US/how-to-generate-unreal-engine-project-files-for-your-ide/](https://docs.unrealengine.com/5.1/en-US/how-to-generate-unreal-engine-project-files-for-your-ide/).
- en: You are now ready to open Visual Studio and build Unreal Engine.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以打开 Visual Studio 并构建 Unreal Engine。
- en: Compiling the source files
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编译源文件
- en: We will now compile the source code in Visual Studio through the previously
    generated solution. To open it, just double-click on the `UE.sln` file and the
    software should open up.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将通过之前生成的解决方案在 Visual Studio 中编译源代码。要打开它，只需双击 `UE.sln` 文件，软件应该会打开。
- en: Note
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you have more than one Visual Studio version, you may need to open the right
    one in order to correctly compile the project. This will depend on your PC configuration
    and .NET SDK installations.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你安装了多个 Visual Studio 版本，你可能需要打开正确的版本，以便正确编译项目。这取决于你的 PC 配置和 .NET SDK 安装。
- en: 'The first thing to do is to set the correct solution configuration. To do so,
    locate the **Solution Configurations** drop-down menu in the toolbar and set its
    value to **Development Editor**, as shown in *Figure 14**.10*:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 首件事是设置正确的解决方案配置。为此，在工具栏中找到**解决方案配置**下拉菜单，并将其值设置为**开发编辑器**，如图*图 14.10*所示：
- en: '![Figure 14.10 – The Solution Configurations drop-down menu](img/Figure_14_10_B18203.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.10 – 解决方案配置下拉菜单](img/Figure_14_10_B18203.jpg)'
- en: Figure 14.10 – The Solution Configurations drop-down menu
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.10 – 解决方案配置下拉菜单
- en: Next, you need to check the solution platform you will be compiling for. In
    the Visual Studio toolbar, locate the **Solution Platforms** drop-down menu and
    double-check that the target platform is set to **Win64**, as shown in *Figure
    14**.11*
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要检查您将要编译的解决方案平台。在 Visual Studio 工具栏中，找到**解决方案平台**下拉菜单，并确认目标平台设置为**Win64**，如图*图
    14.11*所示：
- en: '![Figure 14.11 – The Solution Platforms drop-down menu](img/Figure_14_11_B18203.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.11 – 解决方案平台下拉菜单](img/Figure_14_11_B18203.jpg)'
- en: Figure 14.11 – The Solution Platforms drop-down menu
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.11 – 解决方案平台下拉菜单
- en: 'You are finally ready to start the build process. To do so, locate the `Engine`
    folder content. Then right-click on **UE5** and select **Build** as shown in *Figure
    14**.12*:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 您终于准备好开始构建过程了。为此，找到`Engine`文件夹内容。然后右键单击**UE5**并选择**构建**，如图*图 14.12*所示：
- en: '![Figure 14.12 – The Build option](img/Figure_14_12_B18203.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.12 – 构建选项](img/Figure_14_12_B18203.jpg)'
- en: Figure 14.12 – The Build option
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.12 – 构建选项
- en: The build process will require a lot of time to complete (which will further
    depend on the capabilities of your computer), so you can relax and have a coffee
    break.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 构建过程将需要大量时间才能完成（这将进一步取决于您计算机的能力），所以您可以放松一下，喝杯咖啡休息一下。
- en: 'After completing the process, you’ll have something to celebrate! You’ve just
    created your very own, fresh-out-of-the-box executable for Unreal Engine. The
    `.exe` file can be found in your source files project, in the `Engine` | `Binaries`
    | `Win 64` folder. My own compiled binaries are shown in *Figure 14**.13*:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 完成过程后，您有值得庆祝的东西！您刚刚创建了自己的全新 Unreal Engine 可执行文件。`.exe`文件可以在您的源文件项目中找到，在`Engine`
    | `Binaries` | `Win 64`文件夹中。我的编译二进制文件如图*图 14.13*所示：
- en: '![Figure 14.13 – The Unreal Engine compiled executable](img/Figure_14_13_B18203.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.13 – Unreal Engine 编译的可执行文件](img/Figure_14_13_B18203.jpg)'
- en: Figure 14.13 – The Unreal Engine compiled executable
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.13 – Unreal Engine 编译的可执行文件
- en: When you double-click on it, Unreal Engine will launch, and you’ll notice that
    things look pretty much the same as the regular Unreal Engine Editor. However,
    the difference is that, under the hood, you will have a more powerful engine with
    more features at your disposal.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 当您双击它时，Unreal Engine 将启动，您会注意到一切看起来几乎与常规 Unreal Engine 编辑器相同。然而，区别在于，在底层，您将拥有一个功能更强大的引擎，拥有更多可供使用的功能。
- en: In this section, you have accomplished the challenging task of compiling the
    Unreal Engine Editor from its source code – that’s something to be really proud
    of! Now, get ready for an even more challenging task in the next section, where
    you’ll be creating a dedicated server for a multiplayer game.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您已经完成了从源代码编译 Unreal Engine 编辑器的挑战性任务 – 这是一件值得骄傲的事情！现在，为下一节中更具挑战性的任务做好准备，在那里您将为多人游戏创建一个专用服务器。
- en: Setting up a dedicated server
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置专用服务器
- en: In this section, you’ll be compiling a multiplayer project as a dedicated server.
    To keep things simple, you’ll be working with a simple project generated from
    one of the official templates, but all the topics and techniques can be easily
    adapted to any other project, including the Unreal Shadows project you’ve been
    working on so far.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将编译一个作为专用服务器的多人项目。为了使事情简单，您将使用从官方模板生成的简单项目，但所有主题和技术都可以轻松地适应任何其他项目，包括您迄今为止一直在工作的
    Unreal Shadows 项目。
- en: 'In order to proceed with the creation of a dedicated server, your project must
    meet the specified requirements listed here:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建一个专用服务器，您的项目必须满足这里列出的特定要求：
- en: You must utilize a source build of Unreal Engine – the one you compiled in the
    previous section
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您必须使用 Unreal Engine 的源代码构建 – 就是您在前一节编译的那个
- en: Your project must be created as a C++ one
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的项目必须创建为 C++ 类型
- en: The project needs to, obviously, support client-server gameplay
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显然，项目需要支持客户端-服务器游戏玩法
- en: Without any more delays, let’s get started by creating the project.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 不再拖延，让我们开始创建项目。
- en: Creating the project
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建项目
- en: 'In this section, you’ll be creating a new project starting from an Unreal Engine
    template. To do this, the first thing you will need to do is to open your own
    compiled Unreal Engine Editor. So, locate the executable, which can be found in
    your GitHub downloaded directory using the following path:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将从 Unreal Engine 模板开始创建一个新项目。为此，你需要做的第一件事是打开你自己的编译好的 Unreal Engine 编辑器。所以，找到可执行文件，可以使用以下路径在你的
    GitHub 下载目录中找到：
- en: '`[Your Project Folder]` | `Engine` | `Binaries` | `Win64` | `UnrealEngine.exe`'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`[你的项目文件夹]` | `Engine` | `Binaries` | `Win64` | `UnrealEngine.exe`'
- en: 'Double-click on the file to launch the Unreal Engine Editor and, once it has
    started, create a new project with the following settings:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 双击文件以启动 Unreal Engine 编辑器，一旦启动，就使用以下设置创建一个新项目：
- en: '**Template**: **Games** | **Third Person**'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模板**：**游戏** | **第三人称**'
- en: '**Project** **Name**: **TP_Multiplayer**'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目名称**：**TP_Multiplayer**'
- en: '**Project Type**: **C++** (if you opt for a **Blueprint** project, just remember
    that, later on, you will have to convert it to a C++ one when you need to compile
    the dedicated server; this will be a really easy task, as you will just need to
    add a C++ class to the project)'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目类型**：**C++**（如果你选择**蓝图**项目，请记住，稍后当你需要编译专用服务器时，你将不得不将其转换为 C++ 项目；这将是一个非常简单的任务，因为你只需要将一个
    C++ 类添加到项目中）'
- en: Leave **Starter** **Content** unchecked
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不勾选**起始内容**
- en: 'My setup for this project is shown in *Figure 14**.14*:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我为这个项目的设置如图 14*所示。14*：
- en: '![Figure 14.14 – The project setup](img/Figure_14_14_B18203.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.14 – 项目设置](img/Figure_14_14_B18203.jpg)'
- en: Figure 14.14 – The project setup
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.14 – 项目设置
- en: Once the project has been created, you are ready to set up and build the project
    solution.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建项目，你就可以设置和构建项目解决方案了。
- en: Building the project solution
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建项目解决方案
- en: Now that you have created the project, locate the `Source` folder inside your
    project. Here, you will find two files named `TP_Multiplayer.Target.cs` and `TP_MultiplayerEditor.Target.cs`.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了项目，找到项目内的 `Source` 文件夹。在这里，你可以找到两个名为 `TP_Multiplayer.Target.cs` 和 `TP_MultiplayerEditor.Target.cs`
    的文件。
- en: Target files are written in C# language and their purpose is to define how the
    Unreal Engine build tool will compile the target builds. In this case, the first
    one will be used when packaging a regular executable and the second one will be
    used for the Unreal Engine Editor.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 目标文件是用 C# 语言编写的，它们的目的是定义 Unreal Engine 构建工具将如何编译目标构建。在这种情况下，第一个将用于打包常规的可执行文件，第二个将用于
    Unreal Engine 编辑器。
- en: We need to define a third one that will be used to package the server version
    of the application. In order to do this, in the same folder as the other two `.Target.cs`
    files, create a third target file and name it `TP_MultiplayerServer.Target.cs`.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要定义第三个，它将用于打包应用程序的服务器版本。为了做到这一点，在另外两个 `.Target.cs` 文件相同的文件夹中，创建一个第三个目标文件，并将其命名为
    `TP_MultiplayerServer.Target.cs`。
- en: 'Once the file has been created, open it with your text editor of choice and
    insert the following code:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建文件，使用你选择的文本编辑器打开它，并插入以下代码：
- en: '[PRE4]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If you are not familiar with C# syntax, don’t worry! There’s not much to understand
    here – we are just defining a class named `TP_MultiplayerServerTarget` and, in
    the constructor, we are defining some build settings. The only thing to notice
    is that we have defined the built target type as `Server` as we need to create
    a dedicated server build.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不太熟悉 C# 语法，不要担心！这里没有太多要理解的——我们只是在定义一个名为 `TP_MultiplayerServerTarget` 的类，并在构造函数中定义了一些构建设置。唯一要注意的是，我们已经将构建目标类型定义为
    `Server`，因为我们需要创建一个专用服务器构建。
- en: 'Get back to the root folder of your project and locate the Unreal Engine project
    file, which should be called `TP_Multiplayer.uproject`. Right-click on it and,
    from the drop-down options, select **Generate Visual Studio project files**, as
    depicted in *Figure 14**.15*:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到你的项目根目录，找到名为 `TP_Multiplayer.uproject` 的 Unreal Engine 项目文件。右键单击它，从下拉选项中选择**生成
    Visual Studio 项目文件**，如图 14*所示。15*：
- en: '![Figure 14.15 – The project file generation option](img/Figure_14_15_B18203.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.15 – 项目文件生成选项](img/Figure_14_15_B18203.jpg)'
- en: Figure 14.15 – The project file generation option
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.15 – 项目文件生成选项
- en: Once the generation process has finished, your project will be set to also compile
    a server build – something you will need to create your dedicated server.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦生成过程完成，你的项目将设置为编译服务器构建版本——这是你需要创建专用服务器时所需的。
- en: 'You can now open Visual Studio by double-clicking on the `TP_Multiplayer.sln`
    solution file, in order to create the needed builds. Once your programming IDE
    is opened, create your build by clicking on the **Solution Configurations** drop-down
    menu in the main toolbar and selecting **Development Server**, as shown in *Figure
    14**.16*:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以通过双击`TP_Multiplayer.sln`解决方案文件来打开 Visual Studio，以创建所需的构建。一旦您的编程 IDE 已打开，通过在主工具栏中的**解决方案配置**下拉菜单中单击并选择**开发服务器**来创建构建，如图
    *图 14*.16* 所示：
- en: '![Figure 14.16 – The solution configuration set as Development Server](img/Figure_14_16_B18203.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.16 – 设置为开发服务器的解决方案配置](img/Figure_14_16_B18203.jpg)'
- en: Figure 14.16 – The solution configuration set as Development Server
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.16 – 设置为开发服务器的解决方案配置
- en: You can now build the project by right-clicking on the **TP_Multiplayer** item
    in the **Solution Explorer** window and selecting **Build**.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以通过在**解决方案资源管理器**窗口中右键单击**TP_Multiplayer**项并选择**构建**来构建项目。
- en: Once the process has finished, you will have successfully built the development
    server, which will allow the Unreal build tool to recognize the server build target.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦过程完成，您将成功构建开发服务器，这将允许 Unreal 构建工具识别服务器构建目标。
- en: Before getting back to the Unreal Engine Editor, you will have to also build
    the Development Editor configuration, so repeat the previous steps with the Editor
    configuration by taking the following steps. In the main toolbar, click on the
    **Solution Configurations** drop-down menu and select **Development Editor**.
    Then build the project by right-clicking on the **TP_Multiplayer** item in the
    **Solution Explorer** window and selecting **Build**.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在返回 Unreal Engine 编辑器之前，您还必须构建开发编辑器配置，因此请按照以下步骤重复之前的步骤，通过选择以下步骤使用编辑器配置：在主工具栏中，单击**解决方案配置**下拉菜单并选择**开发编辑器**。然后在**解决方案资源管理器**窗口中右键单击**TP_Multiplayer**项并选择**构建**。
- en: Once the build process has finished, you can safely close Visual Studio and
    get back to Unreal Engine to build the dedicated server.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦构建过程完成，您可以安全地关闭 Visual Studio 并返回 Unreal Engine 以构建专用服务器。
- en: Building the dedicated server
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建专用服务器
- en: 'In this subsection, you’ll be building a dedicated server executable for your
    project from the Unreal Engine Editor. The first thing you will need to do is
    to create a new map that will serve as an entry point for the server:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在本小节中，您将从 Unreal Engine 编辑器构建项目的一个专用服务器可执行文件。您首先需要做的是创建一个新的地图，该地图将作为服务器的入口点：
- en: From the main menu, select **File** | **New Level** and create a new **Basic**
    level.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从主菜单中选择**文件** | **新建关卡**并创建一个新的**基本**关卡。
- en: In the Content Browser, create a `Maps` folder and save the level in it, calling
    it `Map_0`.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在内容浏览器中，创建一个`Maps`文件夹并将级别保存在其中，命名为`Map_0`。
- en: In the **World Setting** window of the level, set **Game Mode Override** to
    **Game Mode Base**; this will avoid opening this level with the default Third
    Person Game Mode.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在级别的**世界设置**窗口中，将**游戏模式覆盖**设置为**游戏模式基础**；这将避免使用默认的第三人称游戏模式打开此关卡。
- en: This map will be used by the client as an entry point when connecting to the
    server. The next step is to update some project settings before starting the server
    packaging phase.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 此地图将在客户端连接到服务器时用作入口点。下一步是在开始服务器打包阶段之前更新一些项目设置。
- en: Let’s start by selecting **Edit** | **Project Settings** from the main menu.
    Then select the **Maps &** **Modes** section.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从在主菜单中选择**编辑** | **项目设置**开始。然后选择**地图与模式**部分。
- en: In the **Default Modes** | **Selected GameMode** category, expand the **Advanced**
    section.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**默认模式** | **选定的游戏模式**类别中，展开**高级**部分。
- en: 'Set the **Global Default Server Game Mode** drop-down value to **BP_ThirdPersonGameMode**,
    as shown in *Figure 14**.17*:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**全局默认服务器游戏模式**下拉值设置为**BP_ThirdPersonGameMode**，如图 *图 14*.17* 所示：
- en: '![Figure 14.17 – Global Default Server Game Mode](img/Figure_14_17_B18203.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.17 – 全局默认服务器游戏模式](img/Figure_14_17_B18203.jpg)'
- en: Figure 14.17 – Global Default Server Game Mode
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.17 – 全局默认服务器游戏模式
- en: The aforementioned setup will define the Game Mode that will be used by clients
    when connected to the server.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 上述设置将定义客户端连接到服务器时使用的游戏模式。
- en: 'We are now going to define the game and server maps, in order to set the entry
    point that will be used when the clients connect. Locate the **Default Maps**
    category and do the following:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将定义游戏和服务器地图，以便设置客户端连接时使用的入口点。定位到**默认地图**类别并执行以下操作：
- en: In the **Game Default Map** drop-down menu, select **Map_0**.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**游戏默认地图**下拉菜单中，选择**Map_0**。
- en: Expand the **Advanced** section and, in the **Server Default Map** drop-down
    menu, select **ThirdPersonMap**.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开高级部分，并在 **服务器默认地图** 下拉菜单中选择 **ThirdPersonMap**。
- en: 'The final result for the **Default Maps** category is shown in *Figure 14**.18*:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '**默认地图** 类别的最终结果如图 *14.18* 所示：'
- en: '![Figure 14.18 – The Default Maps category](img/Figure_14_18_B18203.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.18 – 默认地图类别](img/Figure_14_18_B18203.jpg)'
- en: Figure 14.18 – The Default Maps category
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.18 – 默认地图类别
- en: 'We are done with the **Maps & Modes** settings. You will now need to define
    the packaging settings for your project:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了 **地图与模式** 设置。你现在需要为你的项目定义打包设置：
- en: In **Project Settings**, expand the **Packaging** | **Advanced** section.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **项目设置** 中，展开 **打包** | **高级** 部分。
- en: Locate the **List of maps to include in the packaged build** array field.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位到 **包含在打包构建中的地图列表** 数组字段。
- en: Use the **+** button to add the **Map_0.umap** level.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 **+** 按钮添加 **Map_0.umap** 级别。
- en: Use the **+** button again to add the **ThirdPersonMap.umap** level.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次使用 **+** 按钮添加 **ThirdPersonMap.umap** 级别。
- en: 'You should now have a setup pretty similar to the one shown in *Figure 14**.19*:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该有一个与图 *14.19* 中所示相当类似的设置：
- en: '![Figure 14.19 – The list of maps to be packaged in the build](img/Figure_14_19_B18203.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.19 – 构建中要打包的地图列表](img/Figure_14_19_B18203.jpg)'
- en: Figure 14.19 – The list of maps to be packaged in the build
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.19 – 构建中要打包的地图列表
- en: As an additional step, double-check that in the **Project** category, the **Build**
    configuration is set to **Development**; this will allow us to connect to the
    server through the command line later on in this chapter.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为额外步骤，请再次确认在 **项目** 类别中，**构建** 配置设置为 **开发**；这将允许我们在本章后面通过命令行连接到服务器。
- en: 'Close the **Project Settings** window and in the Unreal Engine main toolbar,
    click the **Platforms** button and select **Windows** | **TP_MultiplayerServer**
    to set the build target, as shown in *Figure 14**.20*:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭 **项目设置** 窗口，并在 Unreal Engine 主工具栏中，点击 **平台** 按钮，选择 **Windows** | **TP_MultiplayerServer**
    以设置构建目标，如图 *14.20* 所示：
- en: '![Figure 14.20 – Building the server](img/Figure_14_20_B18203.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.20 – 构建服务器](img/Figure_14_20_B18203.jpg)'
- en: Figure 14.20 – Building the server
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.20 – 构建服务器
- en: Next, click **Windows** | **Package Content** to start packaging the application
    and, once the build has finished, you will have in your hands a dedicated server
    executable!
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击 **Windows** | **Package Content** 以开始打包应用程序，一旦构建完成，你将手握一个专用的服务器可执行文件！
- en: 'To get a client executable, you will have to repeat the same steps as above,
    using a different build target. To do so, in the Unreal Engine main toolbar, click
    the **Platforms** button and select **Windows** | **TP_Multiplayer** to set the
    build target, as shown in *Figure 14**.21*:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要获取客户端可执行文件，你必须重复上述步骤，使用不同的构建目标。为此，在 Unreal Engine 主工具栏中，点击 **平台** 按钮，选择 **Windows**
    | **TP_Multiplayer** 以设置构建目标，如图 *14.21* 所示：
- en: '![ Figure 14.21 – Building the client](img/Figure_14_21_B18203.jpg)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.21 – 构建客户端](img/Figure_14_21_B18203.jpg)'
- en: Figure 14.21 – Building the client
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.21 – 构建客户端
- en: Then, click **Windows** | **Package Content** to start packaging the client
    build. Once it has finished, you will also have the client executable, and you
    will be ready to test the application.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，点击 **Windows** | **Package Content** 以开始打包客户端构建。一旦完成，你也将拥有客户端可执行文件，并且你将准备好测试应用程序。
- en: Testing the project
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试项目
- en: Now that both the dedicated server and the client have been successfully built,
    it’s time to test their functionalities.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 现在客户端和专用服务器都已成功构建，是时候测试它们的功能了。
- en: To start your server locally, all you have to do is double-click on the build
    executable you created in the previous steps.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 要在本地启动你的服务器，你只需要双击之前步骤中创建的构建可执行文件。
- en: 'Alternatively, if you are interested in checking the server log, you can take
    the following steps:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果你有兴趣检查服务器日志，可以采取以下步骤：
- en: Open the Windows Command Prompt.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Windows 命令提示符。
- en: Through the `cd` command, navigate to the folder that contains the server executable.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过 `cd` 命令，导航到包含服务器可执行文件的文件夹。
- en: 'Insert the name of your server executable, followed by the `–log` parameter,
    for instance:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插入你的服务器可执行文件名称，后跟 `–log` 参数，例如：
- en: '[PRE5]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Once the server has started, it will start listening for connection requests
    from clients.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦服务器启动，它将开始监听来自客户端的连接请求。
- en: As we have used an out-of-the-box, base template and we did not implement any
    session logic, we will be connecting the clients from the Unreal Engine command
    line. This is something you obviously won’t use in a final release but that is
    really handy at development time.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用了现成的、基础模板，并且我们没有实现任何会话逻辑，我们将从虚幻引擎命令行连接客户端。这显然不是你将在最终版本中使用的功能，但在开发时却非常有用。
- en: The command line is available in the client executable because we compiled the
    project as a development build in the previous steps.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行在客户可执行文件中可用，因为我们之前将这些步骤编译为开发版本的项目。
- en: To start the client application, all you have to do is to double-click on the
    executable, which should be named `TP_Multiplayer.exe`. This will open the executable
    with the default starting map (i.e., `Map_0`).
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动客户应用程序，你只需双击可执行文件，其名称应该是`TP_Multiplayer.exe`。这将使用默认的起始地图（即，`Map_0`）打开可执行文件。
- en: 'As stated before, to connect to the server, we will be using the console command,
    which can be opened by default with the ’ character (i.e., backtick). Once the
    console is open, enter the following command:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，为了连接到服务器，我们将使用控制台命令，默认情况下可以通过单引号字符（即反引号）打开。一旦控制台打开，输入以下命令：
- en: '[PRE6]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The client application with the console command open is shown in *Figure 14**.22*:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台命令打开的客户应用程序如**图14.22**所示。22：
- en: '![Figure 14.22 – The client application with the console command open](img/Figure_14_22_B18203.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![图14.22 – 控制台命令打开的客户应用程序](img/Figure_14_22_B18203.jpg)'
- en: Figure 14.22 – The client application with the console command open
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.22 – 控制台命令打开的客户应用程序
- en: Note
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you are using a keyboard that does not support the backtick character (like
    mine), you can easily change the keyboard shortcut by opening **Editor Preferences**
    and looking for the **Open Console Command** **Box** field.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的键盘不支持反引号字符（像我的一样），你可以通过打开**编辑器首选项**并查找**打开控制台命令****框**字段来轻松更改键盘快捷键。
- en: 'The client should now open the regular Third Person map and your client will
    be connected to the dedicated server. To double-check this, if you started the
    server with the `–log` option enabled, you should see a log message similar to
    this one:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端现在应该打开常规第三人称地图，你的客户端将连接到专用服务器。为了确认这一点，如果你在启动服务器时启用了`–log`选项，你应该看到一条类似于以下的消息：
- en: '[PRE7]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: And that’s it – you have finally succeeded in creating your own dedicated server
    and connecting your clients to a LAN!
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样 – 你终于成功创建了你的专用服务器，并将你的客户端连接到了局域网！
- en: If you want an extra challenge, you can give compiling the Unreal Shadows project
    with a dedicated server a try. You already have some knowledge in this area, so
    it shouldn’t take too much effort.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要一个额外的挑战，你可以尝试使用专用服务器编译 Unreal Shadows 项目。你在这个领域已经有了一些知识，所以这不应该需要太多的努力。
- en: Additionally, if you want to go deeper into this topic, Epic Games has provided
    a full tutorial on how to compile Lyra Starter Game ([https://docs.unrealengine.com/5.1/en-US/lyra-sample-game-in-unreal-engine/](https://docs.unrealengine.com/5.1/en-US/lyra-sample-game-in-unreal-engine/)),
    a real-world project including many of the topics covered in this book. The link
    to the tutorial is [https://docs.unrealengine.com/5.1/en-US/setting-up-dedicated-servers-in-unreal-engine/](https://docs.unrealengine.com/5.1/en-US/setting-up-dedicated-servers-in-unreal-engine/).
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果你想深入了解这个主题，Epic Games 提供了一个关于如何编译 Lyra Starter Game 的完整教程（[https://docs.unrealengine.com/5.1/en-US/lyra-sample-game-in-unreal-engine/](https://docs.unrealengine.com/5.1/en-US/lyra-sample-game-in-unreal-engine/))，这是一个包含本书中涵盖的许多主题的实战项目。教程的链接是
    [https://docs.unrealengine.com/5.1/en-US/setting-up-dedicated-servers-in-unreal-engine/](https://docs.unrealengine.com/5.1/en-US/setting-up-dedicated-servers-in-unreal-engine/)。
- en: Anything is possible with a little bit of hard work!
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 一点点的努力就能实现一切！
- en: Summary
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you have faced the frightening task of downloading the Unreal
    Engine Editor source code from GitHub and compiling it into an executable application.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你面临了从 GitHub 下载虚幻引擎编辑器源代码并将其编译成可执行应用程序的令人畏惧的任务。
- en: If you plan to make a living as a multiplayer developer, building Unreal Engine
    source code is a mandatory skill whenever you want to set up a dedicated server
    for your game or need to customize the engine’s networking and multiplayer settings.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你计划以多人游戏开发者为生，那么在需要为你的游戏设置专用服务器或需要自定义引擎的网络和多人设置时，构建虚幻引擎源代码是一项必备技能。
- en: As you have discovered, building and packaging a dedicated server is not an
    easy task and requires a lot of time and patience – and sometimes a bit of luck!
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所发现的，构建和打包一个专用服务器并不是一项容易的任务，它需要大量的时间和耐心——有时还需要一点运气！
- en: In the next – and final – chapter, you will learn how to take a step further
    in multiplayer game development by using online cloud services, specifically Epic
    Online Services.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章——也是最后一章中，你将学习如何通过使用在线云服务，特别是Epic Online Services，在多人游戏开发中更进一步。
