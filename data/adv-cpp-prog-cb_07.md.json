["```cpp\n> sudo apt-get install build-essential git cmake\n```", "```cpp\n> sudo apt-get install build-essential git cmake\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter07\n```", "```cpp\n> cmake .\n> make recipe01_examples\n```", "```cpp\n> ./recipe01_example01\n===========================================================================\nAll tests passed (1 assertion in 1 test case)\n\n> ./recipe01_example02\n===========================================================================\nAll tests passed (6 assertions in 1 test case)\n\n> ./recipe01_example03\n===========================================================================\nAll tests passed (8 assertions in 1 test case)\n\n> ./recipe01_example04\n===========================================================================\nAll tests passed (1 assertion in 1 test case)\n\n> ./recipe01_example05\n...\n===========================================================================\ntest cases: 1 | 1 passed\nassertions: - none -\n\n> ./recipe01_example06\n...\n===========================================================================\ntest cases: 5 | 3 passed | 2 failed\nassertions: 8 | 6 passed | 2 failed\n\n> ./recipe01_example07\n===========================================================================\ntest cases: 1 | 1 passed\nassertions: - none -\n\n> ./recipe01_example08\n===========================================================================\nAll tests passed (3 assertions in 1 test case)\n```", "```cpp\n> git clone https://github.com/catchorg/Catch2.git catch\n> cd catch\n> mkdir build\n> cd build\n> cmake ..\n> make\n> sudo make install\n```", "```cpp\n#define CATCH_CONFIG_MAIN\n#include <catch.hpp>\n\nTEST_CASE(\"the answer\")\n{\n   CHECK(true);\n}\n```", "```cpp\n#define CATCH_CONFIG_MAIN\n#include <catch.hpp>\n\n#include <vector>\n#include <iostream>\n#include <algorithm>\n\nTEST_CASE(\"sort a vector\")\n{\n    std::vector<int> v{4, 8, 15, 16, 23, 42};\n    REQUIRE(v.size() == 6);\n\n    SECTION(\"sort descending order\") {\n        std::sort(v.begin(), v.end(), std::greater<int>());\n\n        CHECK(v.front() == 42);\n        CHECK(v.back() == 4);\n    }\n\n    SECTION(\"sort ascending order\") {\n        std::sort(v.begin(), v.end(), std::less<int>());\n\n        CHECK(v.front() == 4);\n        CHECK(v.back() == 42);\n    }\n}\n```", "```cpp\n#define CATCH_CONFIG_MAIN\n#include <catch.hpp>\n\n#include <vector>\n#include <iostream>\n#include <algorithm>\n\nvoid foo(int val)\n{\n    if (val != 42) {\n        throw std::invalid_argument(\"The answer is: 42\");\n    }\n}\n\nTEST_CASE(\"the answer\")\n{\n    CHECK_NOTHROW(foo(42));\n    REQUIRE_NOTHROW(foo(42));\n\n    CHECK_THROWS(foo(0));\n    CHECK_THROWS_AS(foo(0), std::invalid_argument);\n    CHECK_THROWS_WITH(foo(0), \"The answer is: 42\");\n\n    REQUIRE_THROWS(foo(0));\n    REQUIRE_THROWS_AS(foo(0), std::invalid_argument);\n    REQUIRE_THROWS_WITH(foo(0), \"The answer is: 42\");\n}\n```", "```cpp\n#define CATCH_CONFIG_MAIN\n#include <catch.hpp>\n\nTEST_CASE(\"the answer\")\n{\n    CHECK(true);\n}\n```", "```cpp\n> ./recipe01_example01 -r xml\n```", "```cpp\n#define CATCH_CONFIG_MAIN\n#define CATCH_CONFIG_ENABLE_BENCHMARKING\n#include <catch.hpp>\n\n#include <vector>\n#include <iostream>\n\nTEST_CASE(\"the answer\")\n{\n    std::vector<int> v{4, 8, 15, 16, 23, 42};\n\n    BENCHMARK(\"sort vector\") {\n        std::sort(v.begin(), v.end());\n    };\n}\n```", "```cpp\n#define CATCH_CONFIG_MAIN\n#include <catch.hpp>\n\n#include <cmath>\n#include <climits>\n\nclass vector\n{\n    int m_x{};\n    int m_y{};\n```", "```cpp\npublic:\n\n    vector() = default;\n\n    vector(int x, int y) :\n        m_x{x},\n        m_y{y}\n    { }\n\n    auto x() const\n    { return m_x; }\n\n    auto y() const\n    { return m_y; }\n\n    void translate(const vector &p)\n    {\n        m_x += p.m_x;\n        m_y += p.m_y;\n    }\n\n    auto magnitude()\n    {\n        auto a2 = m_x * m_x;\n        auto b2 = m_y * m_y;\n\n        return sqrt(a2 + b2);\n    }\n};\n```", "```cpp\nbool operator== (const vector &p1, const vector &p2)\n{ return p1.x() == p2.x() && p1.y() == p2.y(); }\n\nbool operator!= (const vector &p1, const vector &p2)\n{ return !(p1 == p2); }\n\nconstexpr const vector origin;\n```", "```cpp\nTEST_CASE(\"default constructor\")\n{\n    vector p;\n\n    CHECK(p.x() == 0);\n    CHECK(p.y() == 0);\n}\n\nTEST_CASE(\"origin\")\n{\n    CHECK(vector{0, 0} == origin);\n    CHECK(vector{1, 1} != origin);\n}\n\nTEST_CASE(\"translate\")\n{\n    vector p{-4, -8};\n    p.translate({46, 50});\n\n    CHECK(p.x() == 42);\n    CHECK(p.y() == 42);\n}\n\nTEST_CASE(\"magnitude\")\n{\n    vector p(1, 1);\n    CHECK(Approx(p.magnitude()).epsilon(0.1) == 1.4);\n}\n\nTEST_CASE(\"magnitude overflow\")\n{\n    vector p(INT_MAX, INT_MAX);\n    CHECK(p.magnitude() == 65536);\n}\n```", "```cpp\n#define CATCH_CONFIG_MAIN\n#include <catch.hpp>\n\n#include <string>\n#include <fstream>\n\nclass file\n{\n    std::fstream m_file{\"test.txt\", std::fstream::out};\n\npublic:\n\n    void write(const std::string &str)\n    {\n        m_file.write(str.c_str(), str.length());\n    }\n};\n\nclass the_answer\n{\npublic:\n\n    the_answer(file &f)\n    {\n        f.write(\"The answer is: 42\\n\");\n    }\n};\n```", "```cpp\nTEST_CASE(\"the answer\")\n{\n    file f;\n    the_answer{f};\n}\n```", "```cpp\n#define CATCH_CONFIG_MAIN\n#include <catch.hpp>\n\n#include <string>\n#include <fstream>\n\nclass file\n{\n    std::fstream m_file{\"test.txt\", std::fstream::out};\n\npublic:\n    VIRTUAL ~file() = default;\n\n    VIRTUAL void write(const std::string &str)\n    {\n        m_file.write(str.c_str(), str.length());\n    }\n};\n\nclass the_answer\n{\npublic:\n    the_answer(file &f)\n    {\n        f.write(\"The answer is: 42\\n\");\n    }\n};\n```", "```cpp\nclass mock_file : public file\n{\npublic:\n    void write(const std::string &str)\n    {\n        if (str == \"The answer is: 42\\n\") {\n            passed = true;\n        }\n        else {\n            passed = false;\n        }\n    }\n\n    bool passed{};\n};\n```", "```cpp\nTEST_CASE(\"the answer\")\n{\n    mock_file f;\n    REQUIRE(f.passed == false);\n\n    f.write(\"The answer is not: 43\\n\");\n    REQUIRE(f.passed == false);\n\n    the_answer{f};\n    CHECK(f.passed);\n}\n```", "```cpp\n> sudo apt-get install build-essential git cmake\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter07\n```", "```cpp\n> cmake -DCMAKE_BUILD_TYPE=ASAN ..\n> make recipe02_examples\n```", "```cpp\n> ./recipe02_example01\n...\n\n> ./recipe02_example02\n...\n\n> ./recipe02_example03\n...\n\n> ./recipe02_example04\n...\n\n> ./recipe02_example05\n...\n```", "```cpp\n-fsanitize=address \n-fno-optimize-sibling-calls \n-fsanitize-address-use-after-scope \n-fno-omit-frame-pointer \n-g -O1\n```", "```cpp\nint main(void)\n{\n    new int;\n}\n```", "```cpp\nint main(void)\n{\n    auto p = new int;\n    delete p;\n\n    delete p;\n}\n```", "```cpp\nint main(void)\n{\n    int *p = (int *)42;\n    *p = 0;\n}\n```", "```cpp\nint main(void)\n{\n    auto p = new int;\n    delete p;\n\n    *p = 0;\n}\n```", "```cpp\nint main(void)\n{\n    int *p = (int *)42;\n    delete p;\n}\n```", "```cpp\n> sudo apt-get install build-essential git cmake\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter07\n```", "```cpp\n> cmake -DCMAKE_BUILD_TYPE=UBSAN .\n> make recipe03_examples\n```", "```cpp\n> ./recipe03_example01\nFloating point exception (core dumped)\n\n> ./recipe03_example02\nSegmentation fault (core dumped)\n\n> ./recipe03_example03\nSegmentation fault (core dumped)\n\n> ./recipe03_example04\n\n```", "```cpp\n-fsanitize=undefined\n```", "```cpp\nint main(void)\n{\n    int n = 42;\n    int d = 0;\n\n    auto f = n/d;\n}\n```", "```cpp\nint main(void)\n{\n    int *p = 0;\n    *p = 42;\n}\n```", "```cpp\nint main(void)\n{\n    int numbers[] = {4, 8, 15, 16, 23, 42};\n    numbers[10] = 0;\n}\n```", "```cpp\n#include <climits>\n\nint main(void)\n{\n    int i = INT_MAX;\n    i++;\n}\n```", "```cpp\n> sudo apt-get install build-essential git cmake\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter07\n```", "```cpp\n> cmake .\n> make recipe04_examples\n```", "```cpp\n> ./recipe04_example01\nThe answer is: 42\n\n> ./recipe04_example02\nrecipe04_example02: /home/user/book/chapter07/recipe04.cpp:45: int main(): Assertion `42 == 0' failed.\nAborted (core dumped)\n```", "```cpp\nvoid __assert(int val, const char *str)\n{\n    if (val == 0) {\n        fprintf(stderr, \"Assertion '%s' failed.\\n\", str);\n        abort();\n    }\n}\n\n#ifndef NDEBUG\n    #define assert(a) __assert(a, #a)\n#else\n    #define assert(a)\n#endif \n```", "```cpp\n> cmake -DCMAKE_BUILD_TYPE=Release ..\n```", "```cpp\n> cmake -DCMAKE_BUILD_TYPE=Debug ..\n```", "```cpp\n#include <cassert>\n\nint main(void)\n{\n    assert(42 == 0);\n}\n```", "```cpp\nint main(void)\n{\n#ifndef NDEBUG\n    std::cout << \"The answer is: 42\\n\";\n#endif\n}\n```"]