- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Setting Up the Environment
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置环境
- en: Game development is becoming more accessible as game engines become more powerful.
    Tools and pipelines that were only available to big companies and wealthy individuals
    are now freely available to everyone with a computer. Anyone can feel the satisfaction
    of creating their own game and having others play it.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 随着游戏引擎变得越来越强大，游戏开发正变得越来越容易接近。以前只有大公司和富裕个人才能使用的工具和流程现在对任何拥有电脑的人都是免费的。任何人都可以体验到创建自己游戏并让他人玩游戏的满足感。
- en: This is exactly what we are going to achieve in this book. We will go from knowing
    absolutely nothing about programming or developing games to creating our very
    first game and even a little beyond.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是本书要实现的目标。我们将从对编程或游戏开发一无所知，到创建我们的第一个游戏，甚至更远。
- en: During the first part of this book, we will learn all about setting up Godot
    and programming. This might be a little more abstract, but I’ll try to give clear
    examples and keep you engaged with exercises and experiments you can do for yourself.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的第一部分，我们将学习有关设置Godot和编程的所有知识。这可能有点抽象，但我将尝试提供清晰的示例，并通过您可以自己进行的练习和实验来保持您的参与度。
- en: The second part of this book will be way more practical as we will dive neck-deep
    into creating our very own video game! We’ll learn how to use the Godot editor
    to create interesting game scenes and scenarios.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本书第二部分将更加实用，因为我们将会深入创建我们自己的视频游戏！我们将学习如何使用Godot编辑器创建有趣的游戏场景和情景。
- en: In the last part of this book, we’ll take our programming skills to the next
    level and learn all about advanced topics, such as more powerful concepts, programming
    patterns, the filesystem, and much more.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的最后部分，我们将把我们的编程技能提升到新的水平，并学习所有关于高级主题的知识，例如更强大的概念、编程模式、文件系统等等。
- en: But before we get there, nothing is more satisfying than starting a new project!
    It represents a blank slate with endless possibilities. By the end of this chapter,
    we’ll have created our very own blank slate and written our first lines of code.
    But first, I’d like to take some time to introduce the Godot game engine and open-source
    software in general.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 但在我们到达那里之前，没有什么比开始一个新的项目更令人满足的了！它代表了一块空白的画布，充满了无限的可能性。在本章结束时，我们将创建我们自己的空白画布，并写下我们的第一行代码。但首先，我想花些时间介绍Godot游戏引擎和开源软件。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Godot Engine and open-source software
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Godot引擎和开源软件
- en: Downloading the engine from the official website
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从官方网站下载引擎
- en: Creating our first project
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建我们的第一个项目
- en: How to join the community
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何加入社区
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: As this book aims to get you from knowing nothing about programming and game
    development to an intermediate level, there are no technical requirements. So,
    instead, I’ll guide you through all (or at least most) of the steps required for
    creating games.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本书旨在帮助您从对编程和游戏开发一无所知到达到中级水平，因此没有技术要求。所以，我将引导您完成所有（或至少大多数）创建游戏所需的步骤。
- en: Example project and code
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 示例项目和代码
- en: 'You can find the example project and code for this book in this book’s GitHub
    repository: [https://github.com/PacktPublishing/Learning-GDScript-by-Developing-a-Game-with-Godot-4/tree/main/chapter01](https://github.com/PacktPublishing/Learning-GDScript-by-Developing-a-Game-with-Godot-4/tree/main/chapter01).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在本书的GitHub仓库中找到本书的示例项目和代码：[https://github.com/PacktPublishing/Learning-GDScript-by-Developing-a-Game-with-Godot-4/tree/main/chapter01](https://github.com/PacktPublishing/Learning-GDScript-by-Developing-a-Game-with-Godot-4/tree/main/chapter01).
- en: Godot game engine and open-source software
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Godot游戏引擎和开源软件
- en: We’ll be using the Godot game engine, which I presume you already know exists
    as this is a book specifically about that engine. But let me give you some more
    insight into its history and what open-source means.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Godot游戏引擎，我假设您已经知道它的存在，因为这是一本专门关于该引擎的书。但让我给您一些关于其历史和开源含义的更多见解。
- en: Some background on the engine
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于引擎的一些背景信息
- en: '**Godot Engine** is a piece of open-source software that lets people from all
    experience levels and walks of life create games. The project was started in 2007
    by Juan Linietsky and Ariel Manzur as an in-house engine for several Argentinian
    game studios. In late 2014, the engine got open-sourced, giving everyone free
    access to the code. Since then, it has gained lots of traction and is currently
    one of the most used game engines on the market. Many commercial games have been
    released or are under development using the engine. Examples of released games
    are Brotato, Dome Keeper, Case of the Golden Idol, and Cassette Beasts.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**Godot引擎**是一款开源软件，让不同经验和背景的人都能创建游戏。该项目始于2007年，由Juan Linietsky和Ariel Manzur发起，作为几个阿根廷游戏工作室的内部引擎。到2014年底，该引擎被开源化，使每个人都能免费访问代码。从那时起，它获得了大量关注，并成为市场上最受欢迎的游戏引擎之一。许多商业游戏已经发布或正在使用该引擎开发。已发布的游戏示例包括Brotato、Dome
    Keeper、Case of the Golden Idol和Cassette Beasts。'
- en: For those of you wondering, yes, the engine is named after the theatrical piece
    *Waiting for Godot*, by Samuel Beckett. This choice of name is because people
    will always be waiting for the next version or new feature, resulting in an endless
    cycle of waiting.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些好奇的人，是的，这个引擎是以塞缪尔·贝克特的戏剧作品*等待戈多*命名的。选择这个名称是因为人们总是会等待下一个版本或新功能，从而形成一个无休止的等待循环。
- en: While on the topic of the engine’s name, let’s also get the pronunciation out
    of the way. In short, there is no standard way of pronouncing Godot. Because of
    the association with the play’s title, which is written in French, some people
    say it should be “go-do,” without emphasis on any syllable. But most English speakers
    would say “GOH-doh” and stress the first syllable. Then, there is the stream of
    people that pronounce it “go-DOT,” mainly because it sounds similar to the word
    “robot” and the engine’s logo is a blue robot. But I notice that I say Godot differently
    each time. So, to cut a long story short, pronounce it however you like. Just
    use roughly the same letters.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在谈论引擎名称的话题时，让我们也把发音问题一并解决。简而言之，没有标准的发音方式来读Godot。由于与法语剧本标题的关联，有些人说它应该读作“go-do”，不强调任何一个音节。但大多数英语使用者会说“GOH-doh”，并强调第一个音节。然后，还有一群人把它读作“go-DOT”，主要是因为它听起来与单词“robot”相似，而且引擎的标志是一个蓝色机器人。但我注意到我每次说的Godot都不一样。所以，长话短说，怎么读都行。只要大致使用相同的字母。
- en: What is open-source software?
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开源软件是什么？
- en: 'As mentioned earlier, Godot is open-source, meaning the engine’s source code
    is freely available. Because everyone has access, people can alter this code to
    their liking. Once they have tweaked enough parameters or developed a new feature,
    they can ask the creator of the software to include these tweaks or features in
    the original project. The creator will then review what the other person has done,
    alter it a bit if needed, and then add it to the code of the original software.
    This process creates a virtuous circle that results in a win-win situation for
    everyone:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Godot是开源的，这意味着引擎的源代码是免费可用的。由于每个人都有访问权限，人们可以按照自己的喜好修改这段代码。一旦他们调整了足够的参数或开发了新功能，他们可以向软件的创作者请求将这些调整或功能包含到原始项目中。创作者将审查其他人所做的工作，如果需要的话稍作修改，然后将它添加到原始软件的代码中。这个过程创造了一个良性循环，使每个人都受益：
- en: '*The software’s creator* can grow the code faster because everyone chips in'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*软件的创作者*可以更快地扩展代码，因为每个人都有所贡献'
- en: '*People with technical knowledge* can add the features they miss, making it
    fit their needs'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*有技术知识的人*可以添加他们缺少的功能，使其满足他们的需求'
- en: '*The end user* gets a much better and more stable end product'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*最终用户*将获得更好、更稳定的最终产品'
- en: 'But not every open-source project is created equal. Each **free open-source
    software** (**FOSS**) comes with its respective license. This license dictates
    how you can or should use the software. Some of these are pretty restrictive,
    but in the case of Godot Engine, we are in luck: we can do anything without significant
    restrictions. We only have to attribute the creators on the credit page of our
    games.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 但并非每个开源项目都是平等的。每个**免费开源软件**（**FOSS**）都有自己的许可证。这个许可证规定了你可以或应该如何使用该软件。其中一些相当限制性，但在Godot引擎的情况下，我们很幸运：我们可以做任何事情，没有重大的限制。我们只需在我们的游戏信用页面中提及创作者。
- en: Alright – we know what Godot Engine is, how to pronounce its name (or not),
    and why FOSS is so awesome. Let’s dive right into preparing our development environment!
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧——我们已经知道了Godot引擎是什么，如何发音它的名字（或者不发音），以及为什么FOSS如此出色。让我们直接进入准备我们的开发环境吧！
- en: Getting and preparing Godot
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取和准备 Godot
- en: Before we can do any programming, we’ll need to set up the development environment.
    That is what we will do in this section, beginning with downloading the engine
    and creating a new project.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进行任何编程之前，我们需要设置开发环境。这就是我们将在本节中做的，从下载引擎和创建一个新项目开始。
- en: Downloading the engine
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载引擎
- en: 'Getting the engine is relatively easy and only requires a few steps:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 获取引擎相对简单，只需要几个步骤：
- en: First, we’ll need to download a copy of the software. We can do this at [https://godotengine.org/download](https://godotengine.org/download).
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要下载软件的一个副本。我们可以在 [https://godotengine.org/download](https://godotengine.org/download)
    做这件事。
- en: '![Figure 1.1 – The download page of Godot Engine 4.0 for the Windows platform](img/B19358_01_01.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.1 – Windows 平台 Godot Engine 4.0 的下载页面](img/B19358_01_01.jpg)'
- en: Figure 1.1 – The download page of Godot Engine 4.0 for the Windows platform
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1 – Windows 平台 Godot Engine 4.0 的下载页面
- en: Usually, the page will automatically direct you to the download page of the
    operating system you are using to browse the website and you can press the big
    blue button in the middle of the page to download the engine. If it doesn’t, you’ll
    need to select your computer’s platform (Windows, macOS, Linux, and so on) when
    scrolling down the page.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通常，页面会自动将您带到浏览网站时使用的操作系统的下载页面，您可以在页面中间按下大蓝色按钮来下载引擎。如果它没有这样做，您需要在页面向下滚动时选择您的计算机平台（Windows、macOS、Linux
    等）。
- en: '![Figure 1.2 – Select your computer’s platform if the download page was not
    able to detect it](img/B19358_01_02.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.2 – 如果下载页面无法检测到您的计算机平台，请选择](img/B19358_01_02.jpg)'
- en: Figure 1.2 – Select your computer’s platform if the download page was not able
    to detect it
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2 – 如果下载页面无法检测到您的计算机平台，请选择
- en: 'The download page should also detect whether you’re using a 64- or 32-bit system.
    If it did not do this correctly, then you can find the other versions under the
    **All** **downloads** section:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载页面也应该检测您是否使用的是 64 位或 32 位系统。如果它没有正确检测，那么您可以在 **所有下载** 部分找到其他版本：
- en: '![Figure 1.3 – The All Downloads section, where you can find different versions
    of the engine](img/B19358_01_04.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.3 – 所有下载部分，您可以在这里找到不同版本的引擎](img/B19358_01_04.jpg)'
- en: Figure 1.3 – The All Downloads section, where you can find different versions
    of the engine
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3 – 所有下载部分，您可以在这里找到不同版本的引擎
- en: What we downloaded is a ZIP file. So, unzip it to get to the actual engine.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们下载的是一个 ZIP 文件。因此，解压它以获取实际的引擎。
- en: 'On Windows: Right-click the zip file and select **Extract All...**. Now follow
    the prompt that pops up to choose a location.'
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Windows 上：右键单击 zip 文件并选择 **解压到...**。现在按照弹出的提示选择一个位置。
- en: 'On macOS: Double-click the zip file, the file will be unzipped into a new folder.'
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 macOS 上：双击 zip 文件，文件将被解压到一个新的文件夹中。
- en: 'On Linux: Run the following command in the terminal:'
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Linux 上：在终端中运行以下命令：
- en: '[PRE0]'
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Put the extracted files somewhere on your computer where it will be safe, such
    as the desktop, applications, or any other location besides the `Downloads` folder.
    Otherwise, if you are anything like me, you might accidentally remove it in a
    clean-up spree of the `Downloads` folder.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将解压的文件放在您电脑上的一个安全位置，例如桌面、应用程序或任何除了 `下载` 文件夹之外的位置。否则，如果您像我一样，您可能会在清理 `下载` 文件夹的狂潮中不小心删除它。
- en: For this book, we will be using version 4.0.0, as it just came out. But any
    version with a 4 at the beginning should work fine. Unfortunately, this is not
    a guarantee. We’ll do our best to keep this book’s content up to date, but open-source
    software can move quickly.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这本书，我们将使用 4.0.0 版本，因为它刚刚发布。但任何以 4 开头的版本都应该可以正常工作。不幸的是，这并不能保证。我们将尽力保持这本书的内容更新，但开源软件的发展速度很快。
- en: The download size of Godot Engine is tiny, about 30 to 100 MB, depending on
    your platform. This small package is all we need to create awesome games. Compare
    this to Unity’s 10 GB and Unreal Engine’s whopping 34 GB! Of course, these all
    come without any assets, such as visuals or audio.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Godot Engine 的下载大小很小，大约 30 到 100 MB，具体取决于您的平台。这个小巧的包就足够我们创建令人惊叹的游戏了。与 Unity
    的 10 GB 和 Unreal Engine 的 34 GB 相比！当然，这些都没有包含任何资产，如视觉效果或音频。
- en: That’s it for getting the engine. You don’t need to install anything else to
    use it.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 获取引擎的过程就到这里。您不需要安装任何其他东西来使用它。
- en: Other versions of the engine
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 引擎的其他版本
- en: Because Godot Engine is open-source, there are also a lot of complete game projects
    that are open-source too. If you ever want to run one of those game projects on
    your machine, make sure you use the correct version of Godot; otherwise, the game
    could crash and weird things might happen. You can find and download all official
    versions of Godot from [https://godotengine.org/download/](https://godotengine.org/download/).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Godot 引擎是开源的，因此也有很多开源的完整游戏项目。如果你想在你的机器上运行这些游戏项目之一，请确保你使用正确的 Godot 版本；否则，游戏可能会崩溃，出现一些奇怪的事情。你可以从
    [https://godotengine.org/download/](https://godotengine.org/download/) 找到并下载所有官方版本的
    Godot。
- en: Creating a new project
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建新项目
- en: Now, let’s go ahead and create our first Godot Engine project, hopefully with
    many others to come in the future!
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续创建我们的第一个 Godot 引擎项目，希望未来会有更多！
- en: 'First, open the engine by double-clicking the file we downloaded in the *Downloading
    the engine* section. A screen like this will greet you:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，通过双击在**下载引擎**部分下载的文件来打开引擎。屏幕将出现如下画面：
- en: '![Figure 1.4 – Creating a new project by pressing the New button](img/B19358_01_05.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.4 – 通过点击“新建”按钮创建新项目](img/B19358_01_05.jpg)'
- en: Figure 1.4 – Creating a new project by pressing the New button
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4 – 通过点击“新建”按钮创建新项目
- en: 'Choose **+ New**; a new window will pop up:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**+新建**；将弹出一个新窗口：
- en: '![Figure 1.5 – Setting up the new project](img/B19358_01_06.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.5 – 设置新项目](img/B19358_01_06.jpg)'
- en: Figure 1.5 – Setting up the new project
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5 – 设置新项目
- en: Call the project `Hello World`.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将项目命名为“Hello World”。
- en: Select a **Project Path** area to put the project. Create a new folder by using
    the **Create Folder** button or use an existing one but note that this folder
    should preferably be empty. Although the folder you select can contain files already,
    starting from a clean directory will keep everything we do more organized.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个**项目路径**区域来放置项目。通过使用**创建文件夹**按钮创建一个新的文件夹，或者使用现有的一个，但请注意，这个文件夹最好是空的。虽然你选择的文件夹可以包含文件，但从一个干净的目录开始将使我们所做的一切更加有序。
- en: Select **Compatibility** under the **Renderer** category. The compatibility
    renderer is made to make sure that our game can run on a wide variety of hardware
    and supports older graphics cards and web exports. The Forward+ renderer is used
    for cutting-edge graphics but demands a better graphics card, while the mobile
    renderer is optimized for mobile devices. For what we are doing, the compatibility
    renderer is more than capable enough and it makes sure that we can export to the
    biggest amount of platforms possible.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**渲染器**类别下选择**兼容性**。兼容性渲染器是为了确保我们的游戏可以在各种硬件上运行，并支持旧版显卡和网页导出。Forward+渲染器用于尖端图形，但需要更好的显卡，而移动渲染器针对移动设备进行了优化。对于我们正在做的事情，兼容性渲染器已经足够强大，并确保我们可以导出到尽可能多的平台。
- en: Finally, press **Create &** **Edit**!
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，按**创建 & 编辑**！
- en: 'Godot will now set up the basic structure of our project within the selected
    folder and, after a few seconds, show us the editor:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Godot 将在所选文件夹内设置我们项目的基结构，几秒钟后，将显示编辑器：
- en: '![Figure 1.6 – The Godot Engine 4.0 editor](img/B19358_01_07.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.6 – Godot 引擎 4.0 编辑器](img/B19358_01_07.jpg)'
- en: Figure 1.6 – The Godot Engine 4.0 editor
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.6 – Godot 引擎 4.0 编辑器
- en: At first sight, this may look quite daunting – little windows everywhere, multiple
    controls here and there, and a giant 3D space in the middle. Don’t worry. By the
    end of this book, you’ll know the ins and outs of almost everything that lies
    before you. You’re in good hands.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 初看可能会觉得相当令人畏惧——到处都是小窗口，这里那里有多个控件，中间有一个巨大的 3D 空间。别担心。到这本书的结尾，你将几乎了解你面前几乎所有东西的来龙去脉。你正在掌握良好的手艺。
- en: Fun fact
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的事实
- en: The Godot developers used Godot Engine to create the editor itself. Try to wrap
    your brain around that! They did this to easily extend and maintain the editor.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Godot 开发者使用 Godot 引擎创建了编辑器本身。试着让你的大脑围绕这一点转转！他们这样做是为了更容易地扩展和维护编辑器。
- en: Light mode
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 亮色模式
- en: Because of the limitations of printed media, dark screenshots might look grainy
    and unsharp. That is why, from this point on, we’ll switch to the light version
    of Godot. There is no difference but the appearance of the editor.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 由于印刷媒体的局限性，暗色截图可能会看起来有颗粒感且不清晰。这就是为什么，从现在开始，我们将切换到 Godot 的亮色版本。没有区别，只是编辑器的外观不同。
- en: 'If you also want to follow along in light mode, perform these optional steps:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还想在亮色模式下跟进，请执行以下可选步骤：
- en: 'Go to **Editor** | **Editor Settings…** at the top of the screen:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在屏幕顶部，转到**编辑器** | **编辑器设置…**：
- en: '![Figure 1.7 – The Editor Settings… option in the Editor menu](img/B19358_01_08.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图1.7 – 编辑器菜单中的“编辑器设置…”选项](img/B19358_01_08.jpg)'
- en: Figure 1.7 – The Editor Settings… option in the Editor menu
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.7 – 编辑器菜单中的“编辑器设置…”选项
- en: Find the **Theme** settings.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找**主题**设置。
- en: 'Select the **Light** theme within the **Preset** dropdown:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**预设**下拉菜单中选择**浅色**主题：
- en: '![Figure 1.8 – Selecting the Light theme preset in the Theme settings](img/B19358_01_09.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图1.8 – 在主题设置中选择浅色主题预设](img/B19358_01_09.jpg)'
- en: Figure 1.8 – Selecting the Light theme preset in the Theme settings
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.8 – 在主题设置中选择浅色主题预设
- en: 'Now, the editor will look like what’s shown in *Figure 1**.9*:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，编辑器将看起来像*图1.9*中所示：
- en: '![Figure 1.9 – The Godot Engine editor with the Light theme applied](img/B19358_01_10.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图1.9 – 应用了浅色主题的Godot引擎编辑器](img/B19358_01_10.jpg)'
- en: Figure 1.9 – The Godot Engine editor with the Light theme applied
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.9 – 应用了浅色主题的Godot引擎编辑器
- en: With that out of the way, let’s get back to creating a game by learning how
    to create a scene.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成这些之后，让我们通过学习如何创建场景来创建一个游戏。
- en: Creating the main scene
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建主场景
- en: 'Let’s continue by setting up our first scene:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续设置我们的第一个场景：
- en: 'In the leftmost panel of *Figure 1**.10*, which shows the **Scene** panel,
    select **2D Scene**. This button will set up the scene for a 2D game, as shown
    here:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在*图1.10*的最左侧面板中，显示**场景**面板，选择**2D场景**。这个按钮将为2D游戏设置场景，如图所示：
- en: '![Figure 1.10 – Selecting 2D Scene in the left panel](img/B19358_01_11.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图1.10 – 在左侧面板中选择2D场景](img/B19358_01_11.jpg)'
- en: Figure 1.10 – Selecting 2D Scene in the left panel
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.10 – 在左侧面板中选择2D场景
- en: You’ll see that there is one node in the **Scene** panel called **Node2D** and
    that the 3D space in the middle window got replaced with a 2D plane.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到在**场景**面板中有一个名为**Node2D**的节点，并且中间窗口中的3D空间被一个2D平面所取代。
- en: 'Right-click the node called `Main`. This node will be our main node to work
    with for now:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击名为`Main`的节点。这个节点将是我们目前要工作的主节点：
- en: '![Figure 1.11 – Renaming the Node2D node to Main](img/B19358_01_12.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图1.11 – 将Node2D节点重命名为Main](img/B19358_01_12.jpg)'
- en: Figure 1.11 – Renaming the Node2D node to Main
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.11 – 将Node2D节点重命名为Main
- en: 'Save the scene by going to **Scene** | **Save Scene** or by pressing *Ctrl*/*Cmd*
    + *S*:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过转到**场景** | **保存场景**或按*Ctrl*/*Cmd* + *S*来保存场景：
- en: '![Figure 1.12 – Saving the scene](img/B19358_01_13.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图1.12 – 保存场景](img/B19358_01_13.jpg)'
- en: Figure 1.12 – Saving the scene
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.12 – 保存场景
- en: 'We’ll be asked where we wish to save the scene. Choose the project’s root folder
    and name the file `main.tscn`:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们会被询问希望将场景保存到何处。选择项目的根文件夹，并将文件命名为`main.tscn`：
- en: '![Figure 1.13 – Selecting the root folder to save the scene and naming it main.tscn](img/B19358_01_14.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图1.13 – 选择根文件夹以保存场景并命名为main.tscn](img/B19358_01_14.jpg)'
- en: Figure 1.13 – Selecting the root folder to save the scene and naming it main.tscn
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.13 – 选择根文件夹以保存场景并命名为main.tscn
- en: That’s all for creating our first scene. What we just added is a node. These
    nodes represent everything in Godot. Images, sounds, menus, special effects –
    everything is a node. You can think of them as game objects, each having a separate
    function in the game. The player could be a node, just like enemies or coins.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 首个场景的创建就到这里。我们刚刚添加的是一个节点。这些节点代表Godot中的所有内容。图像、声音、菜单、特殊效果——一切都是一个节点。你可以把它们看作是游戏对象，每个在游戏中都有其独立的功能。玩家可以是一个节点，就像敌人或金币一样。
- en: On the other hand, scenes are collections of nodes or collections of game objects.
    For now, you can think of scenes as levels. For a level, you need a player node,
    some enemy nodes, and a bunch of coin nodes; the collection of these is a scene.
    It’s like nodes are the paint and scenes are our canvases.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，场景是由节点或游戏对象的集合组成的。目前，你可以将场景视为关卡。对于一个关卡，你需要一个玩家节点，一些敌人节点，以及一大堆金币节点；这些节点的集合就是一个场景。这就像节点是颜料，场景是我们的画布。
- en: We’ll come back to nodes and scenes throughout this book.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在整本书中回顾节点和场景。
- en: A brief UI overview
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简要的UI概述
- en: 'Now would be a great time to review some of the more prominent features of
    the editor’s UI. As we saw earlier, it looks something like this:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候回顾编辑器UI的一些更突出的功能了。正如我们之前看到的，它看起来就像这样：
- en: '![Figure 1.14 – An overview of the editor](img/B19358_01_15.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图1.14 – 编辑器的概述](img/B19358_01_15.jpg)'
- en: Figure 1.14 – An overview of the editor
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.14 – 编辑器的概述
- en: 'The prominent elements of the editor are as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑器中的突出元素如下：
- en: The **Scene Tree** area shows all the nodes in the current scene. For now, there
    is only one.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**场景树**区域显示了当前场景中的所有节点。目前只有一个。'
- en: The **FileSystem** area provides access to the files within the project folder.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**文件系统** 区域提供了对项目文件夹内文件的访问。'
- en: The middle window is the **currently active main editor**. For now, we can see
    the 2D editor, which will allow us to place nodes in 2D space within the scene.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 中间窗口是 **当前活动的主要编辑器**。目前，我们可以看到 2D 编辑器，它将允许我们在场景中 2D 空间内放置节点。
- en: The **Inspector** area can be found entirely to the right and shows the properties
    for the currently selected node. If you open some accordion menus, such as the
    **Transform** section, you will find multiple settings associated with the selected
    node.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**检查器**区域完全位于右侧，显示当前选中节点的属性。如果你打开一些手风琴菜单，例如 **变换** 部分，你将找到与选中节点相关联的多个设置。'
- en: Nodes by themselves don’t do much. They provide us with specific functionalities,
    such as showing an image, playing a sound, and more, but they still need some
    higher logic to bind them into the actual game. That’s why we can extend their
    functionality and behavior with scripts.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 单独的节点本身并没有什么作用。它们为我们提供了特定的功能，例如显示图像、播放声音等，但它们仍然需要一些高级逻辑来将它们绑定到实际的游戏中。这就是为什么我们可以通过脚本扩展它们的功能和行为。
- en: Writing our first script
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写我们的第一个脚本
- en: A **script** is a piece of code that adds logic to a node, such as moving an
    image or deciding when to play that sound.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**脚本** 是一段代码，它为节点添加逻辑，例如移动图像或决定何时播放声音。'
- en: 'We’ll create our first script now. Right-click the `Main` node again and choose
    **Attach Script**:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将创建我们的第一个脚本。再次右键点击 `Main` 节点并选择 **附加脚本**：
- en: '![Figure 1.15 – Attaching a script to the Main node](img/B19358_01_16.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.15 – 将脚本附加到主节点](img/B19358_01_16.jpg)'
- en: Figure 1.15 – Attaching a script to the Main node
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.15 – 将脚本附加到主节点
- en: 'A pop-up window will appear. Keep everything as-is. The important thing to
    note is that the selected language is **GDScript**, the programming language we’ll
    learn throughout this book. The rest is not very important for now. It even pre-filled
    the script’s name after the node’s name, which will attach this script. Press
    **Create**:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 将会出现一个弹出窗口。保持一切原样。需要注意的是，选中的语言是 **GDScript**，这是我们将在本书的整个过程中学习的编程语言。其他内容目前并不很重要。它甚至预先填充了脚本名称，该名称将附加到节点上。按下
    **创建**：
- en: '![Figure 1.16 – Pressing Create to create the script](img/B19358_01_17.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.16 – 点击创建以创建脚本](img/B19358_01_17.jpg)'
- en: Figure 1.16 – Pressing Create to create the script
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.16 – 点击创建以创建脚本
- en: 'The middle panel, where the 2D plane used to be, is replaced with a new window:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 中间面板，之前是 2D 平面所在的位置，被一个新的窗口所取代：
- en: '![Figure 1.17 – A fresh script](img/B19358_01_18.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.17 – 一个新的脚本](img/B19358_01_18.jpg)'
- en: Figure 1.17 – A fresh script
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.17 – 一个新的脚本
- en: This is the **Script** editor. We will spend most of our time here learning
    how to program during the first part of this book.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 **脚本** 编辑器。我们将在本书的第一部分的大部分时间里在这里学习如何编程。
- en: 'As you may have noticed, the middle window is context-dependent. It can be
    a **2D**, **3D**, or **Script** editor:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所注意到的，中间窗口是上下文相关的。它可以是一个 **2D**、**3D** 或 **脚本** 编辑器：
- en: '![Figure 1.18 – The different main windows](img/B19358_01_19.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.18 – 不同的主要窗口](img/B19358_01_19.jpg)'
- en: Figure 1.18 – The different main windows
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.18 – 不同的主要窗口
- en: To switch between these different editors, use the buttons at the top of the
    screen.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 要在这些不同的编辑器之间切换，请使用屏幕顶部的按钮。
- en: AssetLib
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: AssetLib
- en: The last tab, **AssetLib**, is useful for getting pre-made assets from the Asset
    Library of Godot. This library can provide custom nodes, scripts, or any other
    assets for your project directly from within Godot Editor. We won’t cover the
    3D editor or AssetLib, but it is good to know they are there.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个标签页，**AssetLib**，用于从 Godot 的资产库中获取预制的资产。这个库可以直接在 Godot 编辑器内为你的项目提供自定义节点、脚本或其他任何资产。我们不会涵盖
    3D 编辑器或 AssetLib，但了解它们的存在是好的。
- en: All of the assets on **AssetLib** are open-source and thus completely free to
    use! Hurray for FOSS!
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**AssetLib** 上的所有资产都是开源的，因此可以完全免费使用！为自由开源软件欢呼！'
- en: 'If you have tried to change to the different editors, return to the **Script**
    editor so that we can create our first script and ensure everything is ready.
    The code within the script looks like this for the moment:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试切换到不同的编辑器，请返回到 **脚本** 编辑器，这样我们就可以创建我们的第一个脚本并确保一切准备就绪。脚本中的代码目前看起来是这样的：
- en: '[PRE1]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Again, don’t worry about all the different commands and specific syntax here.
    We will cover everything in due time. For now, it’s enough to know that this is
    a script written in GDScript, the scripting language of Godot.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 再次提醒，不要担心这里的所有不同命令和特定语法。我们将在适当的时候覆盖所有内容。现在，知道这是一个用GDScript编写的脚本就足够了，GDScript是Godot的脚本语言。
- en: 'To create the classic `pass # Replace with function body.` to the following:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '为了创建经典的 `pass # Replace with function body.`，将其替换为以下内容：'
- en: '[PRE2]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This line of code will show the text `"Hello, World;"` it will not use a printer
    to print out anything. We can also throw away a bunch of the code we don’t need.
    The whole script should now look like this:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码将显示文本 `"Hello, World;"`，它不会使用打印机打印任何内容。我们也可以丢弃一些不需要的代码。整个脚本现在应该看起来像这样：
- en: '[PRE3]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
