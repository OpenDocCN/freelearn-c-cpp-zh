- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Introduction to Godot 4.0
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Godot 4.0简介
- en: Whether it’s a career goal or a recreational hobby, game development is a fun
    and rewarding endeavor. There’s never been a better time to get started in game
    development. Modern programming languages and tools have made it easier than ever
    to build high-quality games and distribute them to the world. If you’re reading
    this book, then you’ve set your feet on the path to making the game(s) of your
    dreams.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是一个职业目标还是一种休闲爱好，游戏开发都是一项有趣且有益的活动。现在开始游戏开发从未有过更好的时机。现代编程语言和工具使得构建高质量的游戏并将它们分发到全世界变得更加容易。如果你正在阅读这本书，那么你已经踏上了实现你梦想中的游戏（们）的道路。
- en: This book is an introduction to the Godot Game Engine and its new 4.0 version,
    which was released in 2023\. Godot 4.0 has a large number of new features and
    capabilities that make it a strong alternative to expensive commercial game engines.
    For beginners, it offers a friendly way to learn game development fundamentals.
    For more experienced developers, Godot is a powerful, customizable, and *open*
    toolkit for bringing your visions to life.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本书是关于Godot游戏引擎及其新4.0版本的介绍，该版本于2023年发布。Godot 4.0拥有大量新特性和功能，使其成为昂贵商业游戏引擎的有力替代品。对于初学者来说，它提供了一种友好的方式来学习游戏开发的基础知识。对于更有经验的开发者来说，Godot是一个强大、可定制且*开放*的工具包，可以帮助你将你的愿景变为现实。
- en: This book takes a project-based approach that will introduce you to the fundamentals
    of the engine. It consists of five game projects that are designed to help you
    achieve a sound understanding of game development concepts and how they’re applied
    in Godot. Along the way, you will learn how Godot works and absorb important techniques
    that you can apply to your own projects.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书采用基于项目的教学方法，将向你介绍引擎的基本原理。它由五个游戏项目组成，旨在帮助你获得对游戏开发概念及其在Godot中应用的深入理解。在这个过程中，你将了解Godot的工作原理，并吸收你可以应用到自己的项目中的重要技术。
- en: 'In this chapter, we’ll cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: General advice for getting started
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始的一般建议
- en: What is a game engine?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是游戏引擎？
- en: What is Godot?
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是Godot？
- en: Downloading Godot
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载Godot
- en: Overview of the Godot UI
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Godot UI概述
- en: Nodes and scenes
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节点和场景
- en: Scripting in Godot
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Godot中的脚本编写
- en: General advice
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一般建议
- en: This section contains some general advice to readers, based on the author’s
    experience as a teacher and lecturer. Keep these tips in mind as you work through
    the book, especially if you’re very new to programming.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本节包含了一些基于作者作为教师和讲师经验的读者一般建议。在阅读本书时，请记住这些提示，特别是如果你对编程非常陌生。
- en: Try to follow the projects in the book in order. Later chapters may build on
    topics that were introduced in earlier chapters, where they are explained in more
    detail. When you encounter something that you don’t remember, go back and review
    that topic in the earlier chapter. No one is timing you, and there’s no prize
    for finishing the book quickly.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试按照书中项目的顺序进行。后面的章节可能会基于前面章节介绍的主题进行构建，其中它们会得到更详细的解释。当你遇到你不记得的内容时，回到前面的章节去复习那个主题。没有人会给你计时，快速完成这本书也没有奖励。
- en: There is a lot of material to absorb here. Don’t feel discouraged if you don’t
    get it at first. The goal is not to become an expert in game development overnight
    – that’s just not possible. Just like with any other skill – carpentry or a musical
    instrument, for example – it takes years of practice and study to develop proficiency.
    Repetition is the key to learning complex topics; the more you work with Godot’s
    features, the more familiar and easier they will start to seem. Try repeating
    one of the earlier chapters after you reach the end. You’ll be surprised at how
    much more you’ll understand compared to the first time you read it.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有很多内容需要吸收。如果你一开始不理解，不要感到气馁。目标不是一夜之间成为游戏开发专家——那是不可能的。就像任何其他技能——比如木工或乐器——一样，需要多年的实践和学习才能达到熟练。重复是学习复杂主题的关键；你与Godot的功能工作得越多，它们就会开始显得越熟悉、越容易。在你读完之后，尝试重复阅读前面的章节。你会惊讶于与第一次阅读相比，你理解了多少。
- en: 'If you’re reading this as an e-book, resist the temptation to copy and paste
    the code. Typing the code yourself will engage your brain more actively. It’s
    similar to how taking notes during a lecture helps you learn better than just
    listening, even if you never look back at the notes. If you’re a slow typist,
    it will also help you work on your typing speed. In a nutshell: you’re a programmer,
    so get used to typing code!'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在以电子书的形式阅读，请抵制复制粘贴代码的诱惑。自己输入代码会让你的大脑更加活跃。这就像在讲座中做笔记一样，即使你永远不会再看笔记，它也能帮助你更好地学习。如果你打字速度慢，这也有助于你提高打字速度。总之：你是一名程序员，所以习惯于输入代码！
- en: One of the biggest mistakes that new game developers make is taking on a bigger
    project than they can handle. It is very important to keep the scope of your project
    as small as possible when starting out. You will be much more successful (and
    learn more) if you finish two or three small games than if you have a large, incomplete
    project that has grown beyond your ability to manage.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 新游戏开发者犯的最大错误之一是承担了超出他们能力范围的项目。在开始时，保持你项目的范围尽可能小是非常重要的。如果你能完成两三个小型游戏，你将比有一个大型的、不完整的项目并且已经超出了你管理能力的项目要成功得多（并且学到的东西也更多）。
- en: You’ll notice that the five games in the book follow this strategy very strictly.
    They are all small in scope, both for practical reasons – to fit reasonably into
    book-sized lessons – but also to remain focused on practicing the basics. As you
    build the game, you will likely find yourself thinking of additional features
    and gameplay elements right away. *What if the spaceship had upgrades?* *What
    if the character could do* *wall jumps?*
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到书中提到的五款游戏都严格遵循这一策略。它们在范围上都较小，这既有实际原因——为了合理地适应书本大小的课程——也是为了保持对基础知识的专注。当你构建游戏时，你可能会立即想到额外的功能和游戏元素。*如果太空船有升级会怎样？*
    *如果角色可以做* *墙跳会怎样？*
- en: Ideas are great, but if you haven’t finished the basic project yet, write them
    down and save them for later. Don’t let yourself be sidetracked by one “cool idea”
    after another. Developers call this *feature creep*, meaning a list of features
    that never stops growing, and it’s a trap that has led to many an unfinished project.
    Don’t fall victim to it.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 灵感是很好的，但如果你还没有完成基本项目，就把它们写下来并留到以后。不要让自己被一个接一个的“酷点子”所分心。开发者称之为*功能蔓延*，意味着一个永远不会停止增长的功能列表，这是一个导致许多项目未完成的陷阱。不要成为它的受害者。
- en: Finally, don’t forget to take a break now and again. You shouldn’t try and power
    through the whole book, or even one project, in just a few sittings. After each
    new concept, and especially after each chapter, give yourself time to absorb the
    new information before you dive into the next one. You’ll find that you not only
    retain more information, but you’ll probably enjoy the process more.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，别忘了时不时地休息一下。你不应该试图在短短几次阅读中就完成整本书，或者甚至是一个项目。在每个新概念之后，尤其是在每个章节之后，在你深入下一个概念之前，给自己一些时间来吸收新信息。你会发现，你不仅能够记住更多的信息，而且可能会更加享受这个过程。
- en: The secret to learning effectively
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 学习有效的秘诀
- en: 'Here’s the secret to getting the most out of these projects and increasing
    your skills in a way that makes them stick: at the end of each chapter, once you’ve
    finished building the game project, immediately delete it and start over. This
    time, try and re-create it without looking at the book. If you get stuck, just
    look at that part in the chapter, and then close the book again. If you really
    feel confident, try adding your own spin to the game – change some parts of the
    gameplay or add a new twist.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 获取这些项目最大效益和提升技能的秘诀在于：在每章结束时，一旦你完成了游戏项目，立即删除它并重新开始。这次，尝试在不看书的情况下重新创建它。如果你卡住了，只需查看章节中的那部分内容，然后再次合上书本。如果你真的很有信心，尝试给游戏添加你自己的特色——改变一些游戏玩法或添加新的转折。
- en: If you do this multiple times with each of the games, you’ll be amazed at how
    less often you’ll need to check the book. If you can make the projects in this
    book on your own without help, then you’re surely ready to branch out and take
    on your original concepts.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对每个游戏都这样做多次，你会惊讶地发现你检查书本的频率会降低。如果你能在没有帮助的情况下独立完成这本书中的项目，那么你肯定已经准备好扩展你的思路并承担你自己的原创概念了。
- en: Keep these tips in mind as you read through the following sections. In the next
    section, you’ll learn what a game engine is and why game developers might want
    to choose to use one.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在阅读以下部分时，请记住这些提示。在下一节中，你将了解什么是游戏引擎以及为什么游戏开发者可能想要选择使用它。
- en: What is a game engine?
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是游戏引擎？
- en: Game development is complex and involves a wide variety of knowledge and skills.
    To build a modern game, you need a great deal of underlying technology before
    you can make the actual game itself. Imagine that you had to build your computer
    and write your own operating system before you could even start programming. Game
    development would be a lot like that if you truly had to start from scratch and
    make everything that you need.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏开发是复杂的，涉及广泛的知识和技能。要构建现代游戏，在能够制作实际游戏之前，你需要大量的底层技术。想象一下，在你开始编程之前，你必须构建自己的计算机并编写自己的操作系统。如果你真的要从零开始并制作所有你需要的东西，游戏开发就会像那样。
- en: There are also a number of common needs that every game has. For example, no
    matter what the game is, it’s going to need to draw things on the screen. If the
    code to do that has already been written, it makes more sense to reuse it than
    to create it all over again for every game. That’s where game frameworks and engines
    come in.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 每个游戏还有一些共同的需求。例如，无论游戏是什么，它都需要在屏幕上绘制东西。如果已经编写了执行此操作的代码，那么重用它比为每个游戏重新创建它更有意义。这就是游戏框架和引擎发挥作用的地方。
- en: A **game framework** is a set of libraries with helper code that assists in
    building the foundational parts of a game. It doesn’t necessarily provide all
    the pieces, and you may still have to write a great deal of code to tie everything
    together. Because of this, building a game with a game framework can take more
    time than one built with a full game engine.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**游戏框架**是一组带有辅助代码的库，它帮助构建游戏的基础部分。它并不一定提供所有组件，你可能仍然需要编写大量代码来整合所有内容。正因为如此，使用游戏框架构建游戏可能比使用完整游戏引擎构建的游戏花费更多时间。'
- en: A **game engine** is a collection of tools and technologies designed to ease
    the process of game-making by removing the need to reinvent the wheel for each
    new game project. It provides a collection of commonly needed functionality that
    often would require a significant investment in time and effort to develop.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**游戏引擎**是一组工具和技术，旨在通过消除每个新游戏项目都需要重新发明轮子的需求来简化游戏制作过程。它提供了一组通常需要的功能，这些功能通常需要大量的时间和精力来开发。'
- en: 'Here are some of the main features a typical game engine will provide:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一些典型游戏引擎将提供的主要功能：
- en: '**Rendering (2D and 3D)**: Rendering is the process of displaying the game
    on the player’s screen. A good rendering pipeline must take into account modern
    GPU support, high-resolution displays, and effects such as lighting, perspective,
    and viewports, all while maintaining a very high framerate.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**渲染（2D和3D）**：渲染是将游戏显示在玩家屏幕上的过程。一个好的渲染管道必须考虑到现代GPU支持、高分辨率显示器以及光照、透视和视口等效果，同时保持非常高的帧率。'
- en: '**Physics**: While a very common requirement, building a robust and accurate
    physics engine is a monumental task. Most games require some sort of collision
    detection and response system, and many need physics simulations, but few developers
    want to take on the task of writing one - especially if they have never tried
    to do so before!'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**物理**：虽然这是一个非常常见的需求，但构建一个强大且准确的物理引擎是一项艰巨的任务。大多数游戏都需要某种形式的碰撞检测和响应系统，许多游戏需要物理模拟，但很少有开发者愿意承担编写一个物理引擎的任务——尤其是如果他们以前从未尝试过的话！'
- en: '**Platform support**: In today’s market, most developers want to be able to
    release their games on multiple platforms, such as desktops, consoles, mobile,
    and/or the web. A game engine provides a unified exporting process to publish
    games on multiple platforms without needing to rewrite game code or support multiple
    versions.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平台支持**：在当今的市场中，大多数开发者都希望能够在多个平台上发布他们的游戏，例如桌面、游戏机、移动设备和/或网页。游戏引擎提供了一个统一的导出过程，可以在多个平台上发布游戏，而无需重写游戏代码或支持多个版本。'
- en: '**Common development environment**: By using the same unified interface to
    make multiple games, the developer doesn’t have to re-learn a new workflow every
    time they start a new project.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**常见开发环境**：通过使用相同的统一界面来制作多个游戏，开发者不必每次开始新项目时都重新学习新的工作流程。'
- en: In addition to these, there will be tools to assist with features such as networking,
    easing the process of managing images and sound, animations, debugging, and many
    more. Often, game engines will include the ability to import content from other
    tools, such as those used to create animations or 3D models.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些，还有工具可以帮助处理网络、简化图像和声音管理、动画、调试等功能。通常，游戏引擎会包括从其他工具导入内容的能力，例如用于创建动画或3D模型的工具。
- en: Using a game engine allows the developer to focus on building their game rather
    than creating the underlying framework needed to make it work. For small or independent
    developers, this can mean the difference between releasing a game after one year
    of development instead of three, or even never at all.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用游戏引擎可以让开发者专注于构建他们的游戏，而不是创建使其工作的底层框架。对于小型或独立开发者来说，这可能意味着在开发一年后发布游戏而不是三年，甚至根本无法发布。
- en: There are dozens of popular game engines on the market today, such as Unity,
    Unreal Engine, and GameMaker Studio, just to name a few. An important fact to
    be aware of is that the majority of popular game engines are commercial products.
    They may or may not require any financial investment to get started, but they
    will require some kind of licensing and/or royalty payments if your game makes
    money. Whatever engine you choose, you need to carefully read the user agreement
    and make sure you understand what you are and are not allowed to do with the engine,
    and what hidden costs, if any, you may be responsible for.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 目前市场上有很多流行的游戏引擎，例如Unity、Unreal Engine和GameMaker Studio，仅举几个例子。需要了解的一个重要事实是，大多数流行的游戏引擎都是商业产品。它们可能或可能不需要任何财务投资来开始，但如果你的游戏赚钱，它们将需要某种形式的许可和/或版税支付。无论你选择哪个引擎，你都需要仔细阅读用户协议，并确保你理解你可以和不可以做什么，以及可能需要承担的任何隐藏成本。
- en: On the other hand, some engines are non-commercial and *open source*, such as
    the Godot game engine, which is what this book is all about.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，一些引擎是非商业性的和*开源*的，例如Godot游戏引擎，这正是本书的主题。
- en: What is Godot?
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Godot？
- en: Godot is a fully featured modern game engine, providing all of the features
    described in the previous section and more. It is also completely free and open
    source, released under the very permissive MIT license. This means there are no
    fees, no hidden costs, and no royalties to pay on your game’s revenue. Everything
    you make with Godot 100% belongs to you, which is not the case with many commercial
    game engines that require an ongoing contractual relationship. For many developers,
    this is very appealing.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Godot是一个功能齐全的现代游戏引擎，提供了上一节中描述的所有功能，还有更多。它也是完全免费和开源的，在非常宽松的MIT许可下发布。这意味着没有任何费用、隐藏成本和版税需要支付。你用Godot制作的一切100%属于你，而许多要求持续合同关系的商业游戏引擎则不是这样。对于许多开发者来说，这一点非常有吸引力。
- en: If you’re not familiar with the concept of open source, community-driven development,
    this may seem strange to you. However, much like the Linux kernel, Firefox browser,
    and many other very well-known pieces of software, Godot is not developed by a
    company as a commercial product. Instead, a dedicated community of passionate
    developers donates their time and expertise to building the engine, testing and
    fixing bugs, producing documentation, and more.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不太熟悉开源、社区驱动的开发概念，这可能会让你感到奇怪。然而，与Linux内核、Firefox浏览器以及许多其他非常著名的软件一样，Godot并非由公司作为商业产品开发。相反，一群热心的开发者捐赠他们的时间和专业知识来构建引擎，测试和修复错误，制作文档等等。
- en: As a game developer, the benefits of using Godot are many. Because it is unencumbered
    by commercial licensing, you have complete control over exactly how and where
    your game is distributed. Many commercial game engines restrict the types of projects
    you can make or require a much more expensive license to build games in certain
    categories, such as gambling.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '作为游戏开发者，使用Godot的好处很多。因为它不受商业许可的束缚，你可以完全控制你的游戏如何以及在哪里分发。许多商业游戏引擎限制了你可以制作的项目类型，或者要求为某些类别（如赌博）的游戏购买更昂贵的许可。 '
- en: Godot’s open source nature also means there is a level of transparency that
    doesn’t exist with commercial game engines. For example, if you find that a particular
    engine feature doesn’t quite meet your needs, you are free to modify the engine
    itself and add the new features you need, with no permission required. This can
    also be very helpful when debugging a large project because you have full access
    to the engine’s internal workings.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Godot的开源性质也意味着它具有与商业游戏引擎不同的透明度。例如，如果你发现某个特定的引擎功能并不完全满足你的需求，你可以自由地修改引擎本身并添加你需要的新功能，无需获得任何许可。这在大项目的调试中也非常有帮助，因为你可以完全访问引擎的内部工作。
- en: It also means that you can directly contribute to Godot’s future. See *additional
    topics* in [*Chapter 7*](B19289_07.xhtml#_idTextAnchor207) for more information
    about how you can get involved with Godot development.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这也意味着你可以直接为Godot的未来做出贡献。参见[*第7章*](B19289_07.xhtml#_idTextAnchor207)中的*附加主题*，了解更多关于如何参与Godot开发的信息。
- en: Now that you have an understanding of what Godot is and how it can help you
    build a game, it’s time to get started. In the next section, you’ll see how to
    download Godot and set it up for use on your own computer.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了Godot是什么以及它如何帮助你构建游戏，是时候开始行动了。在下一节中，你将了解如何下载Godot并将其设置在你的电脑上使用。
- en: Downloading Godot
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载Godot
- en: You can download the latest version of Godot by visiting [https://godotengine.org/](https://godotengine.org/)
    and clicking **Download Latest**. This book is written for version 4.0\. If the
    version you download has another number at the end (such as 4.0.3), that’s fine
    – this just means that it includes updates to version 4.0 that fix bugs or other
    issues.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过访问[https://godotengine.org/](https://godotengine.org/)并点击**下载最新版**来下载Godot的最新版本。本书是为4.0版本编写的。如果你下载的版本末尾有另一个数字（例如4.0.3），那没关系——这仅仅意味着它包含了修复4.0版本中的错误或其他问题的更新。
- en: On the download page, you will also see a standard version and a .NET version.
    The .NET version is specially built to be used with the C# programming language.
    Don’t download this one unless you plan to use C# with Godot. The projects in
    this book do not use C#.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在下载页面，你还将看到一个标准版本和一个.NET版本。.NET版本是专门为与C#编程语言一起使用而构建的。除非你计划使用C#与Godot一起使用，否则不要下载这个版本。本书中的项目不使用C#。
- en: '![Figure 1.1: The Godot download page](img/B19289_01_01.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图1.1：Godot下载页面](img/B19289_01_01.jpg)'
- en: 'Figure 1.1: The Godot download page'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1：Godot下载页面
- en: Unzip the downloaded file, and you’ll have the Godot application. Optionally,
    you can drag it to your `Programs` or `Applications` folder, if you have one.
    Double-click the application to launch it and you’ll see Godot’s **Project Manager**
    window, which you’ll learn about in the next section.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 解压下载的文件，你将拥有Godot应用程序。如果你有“程序”或“应用程序”文件夹，可以选择将其拖放到那里。双击应用程序以启动它，你将看到Godot的**项目管理器**窗口，你将在下一节中了解它。
- en: Alternate installation methods
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他安装方法
- en: 'There are a few other ways to get Godot on your computer besides downloading
    it from the Godot website. Note that there is no difference in functionality when
    installed this way. The following are merely alternatives for downloading the
    application:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 除了从Godot网站下载之外，还有其他几种方法可以将Godot安装到你的电脑上。请注意，以这种方式安装时功能没有差异。以下是一些下载应用程序的替代方法：
- en: '**Steam**: If you have an account on Steam, you can install Godot via the Steam
    desktop application. Search for Godot in the Steam store and follow the instructions
    to install it. You can launch Godot from the Steam application:'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Steam**：如果你在Steam上有账户，可以通过Steam桌面应用程序安装Godot。在Steam商店中搜索Godot，并按照说明进行安装。你可以从Steam应用程序启动Godot：'
- en: '![Figure 1.2: The Godot engine on Steam](img/B19289_01_02.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图1.2：Steam上的Godot引擎](img/B19289_01_02.jpg)'
- en: 'Figure 1.2: The Godot engine on Steam'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2：Steam上的Godot引擎
- en: '**Itch.io**: You can also download Godot from the popular itch.io website.
    Itch is a marketplace for independent game developers and creators. Search for
    Godot and download it from the provided links.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Itch.io**：你还可以从流行的itch.io网站下载Godot。Itch是一个独立游戏开发者和创作者的市场。搜索Godot，并从提供的链接下载。'
- en: '**Package Managers**: If you’re using one of the following operating system
    package managers, you can install Godot via its normal installation process. See
    the documentation for your package manager for details. Godot is available in
    these package managers:'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**包管理器**：如果你使用以下操作系统的包管理器之一，你可以通过其正常安装过程安装Godot。有关详细信息，请参阅你的包管理器文档。Godot在这些包管理器中可用：'
- en: Homebrew (macOS)
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Homebrew（macOS）
- en: Scoop (Windows)
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Scoop（Windows）
- en: Snap (Linux)
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Snap（Linux）
- en: Android and web versions
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓和网页版本
- en: You will also see downloads available for Godot versions that run on Android
    and in your web browser. At the time of this writing, these versions are listed
    as “experimental” and may not be stable or fully functional. It is recommended
    that you use the desktop version of Godot, especially while you’re learning.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你还将看到适用于在Android和网页浏览器上运行的Godot版本。在撰写本文时，这些版本被列为“实验性”，可能不稳定或功能不完整。建议你使用Godot的桌面版本，尤其是在学习期间。
- en: Congratulations, you have successfully installed Godot on your computer. In
    the next section, you will see an overview of Godot’s editor interface – the purposes
    of the various windows and buttons you’ll use when working with the editor.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜，您已成功将 Godot 安装到您的计算机上。在下一节中，您将看到 Godot 编辑器界面的概述——您在编辑器中工作时将使用的各种窗口和按钮的目的。
- en: Overview of the Godot UI
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Godot UI 概览
- en: Like most game engines, Godot has a unified development environment. This means
    that you use the same interface to work on all of the aspects of your game – code,
    visuals, audio, and so on. This section is an introduction to the interface and
    its parts. Take note of the terminology used here; it will be used throughout
    this book when referring to actions you’ll take in the editor window.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '与大多数游戏引擎一样，Godot 具有统一的开发生态。这意味着你使用相同的界面来处理游戏的所有方面——代码、视觉、音频等等。本节是关于界面及其部分的介绍。请注意这里使用的术语；在本书中提及编辑器窗口中的操作时，将使用这些术语。 '
- en: Project Manager
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目管理器
- en: 'The **Project Manager** window is the first window you’ll see when you open
    Godot:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**项目管理器**窗口是您打开 Godot 后看到的第一个窗口：'
- en: '![Figure 1.3: Project Manager](img/B19289_01_03.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.3：项目管理器](img/B19289_01_03.jpg)'
- en: 'Figure 1.3: Project Manager'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3：项目管理器
- en: Opening Godot for the first time
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 首次打开 Godot
- en: The first time you open Godot, you won’t have any projects yet. You’ll see a
    pop-up window asking if you want to *explore official example projects in the
    Asset Library*. Select **Cancel**, and you’ll see the **Project Manager** as it
    appears in the preceding screenshot.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次打开 Godot 时，您还没有任何项目。您会看到一个弹出窗口询问您是否想要*在资源库中探索官方示例项目*。选择**取消**，您将看到**项目管理器**，如图中所示。
- en: 'In this window, you can see a list of your existing Godot projects. You can
    choose an existing project and click **Run** to play the game or **Edit** to work
    on it in the Godot editor. You can also create a new project by clicking **New
    Project**:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '在此窗口中，您可以看到您现有的 Godot 项目列表。您可以选择一个现有项目，点击**运行**来玩游戏或**编辑**在 Godot 编辑器中工作。您还可以通过点击**新建项目**来创建新项目： '
- en: '![Figure 1.4: New project settings](img/B19289_01_04.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.4：新项目设置](img/B19289_01_04.jpg)'
- en: 'Figure 1.4: New project settings'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4：新项目设置
- en: Here, you can give the project a name and create a folder to store it in. Note
    the warning message – a Godot project is stored as a separate folder on the computer.
    All the files that the project uses must be located in this folder. This makes
    it convenient to share Godot projects because you only need to zip the project
    folder and you can be confident that another Godot user will be able to open it
    and not be missing any necessary data.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以为项目命名并创建一个文件夹来存储它。注意警告信息——Godot 项目在计算机上作为独立的文件夹存储。项目使用的所有文件都必须位于此文件夹中。这使得共享
    Godot 项目变得方便，因为你只需要压缩项目文件夹，并且可以确信另一个 Godot 用户能够打开它，而不会缺少任何必要的数据。
- en: Renderer
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 渲染器
- en: When creating a new project, you also have the choice of **Renderer**. The three
    options represent the balance between advanced, high-performance graphics that
    require a modern desktop GPU, and compatibility with less-capable platforms such
    as mobile and older desktops. You can change this option later if you need, so
    it’s OK to leave it as the default setting. If you later decide to build games
    for the mobile platform, the Godot documentation has a great deal of information
    regarding performance and rendering options. See [*Chapter 7*](B19289_07.xhtml#_idTextAnchor207)
    for links and more information.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建新项目时，您还可以选择**渲染器**。这三个选项代表了在需要现代桌面 GPU 的高级、高性能图形和与移动和较老桌面等不太强大的平台兼容性之间的平衡。如果您需要，您可以在以后更改此选项，所以将其保留为默认设置是可以的。如果您以后决定为移动平台构建游戏，Godot
    文档提供了大量关于性能和渲染选项的信息。参见[*第 7 章*](B19289_07.xhtml#_idTextAnchor207)以获取链接和更多信息。
- en: Choosing filenames
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择文件名
- en: 'When you’re naming your new project, there are a few simple rules you should
    try and follow that may save you some trouble in the future. Give your project
    a name that describes what it is – *Wizard Battle Arena* is a much better project
    name than *Game #2*. In the future, you’ll never be able to remember which game
    number two was, so be as descriptive as possible.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '当您为新项目命名时，有一些简单的规则您应该尝试遵循，这可能会在将来为您节省一些麻烦。为您的项目起一个描述性的名字——*巫师战斗竞技场*比*游戏 #2*是一个更好的项目名称。在未来，您将永远无法记住哪个是游戏编号二，所以尽可能描述得详细。'
- en: You should also think about how you name your project folder and the files in
    it. Some operating systems are case-sensitive and distinguish between `My_Game`
    and `my_game`, while others do not. This can lead to problems if you move your
    project from one computer to another. For this reason, many programmers develop
    a standardized naming scheme for their projects, such as not using spaces in filenames
    and using `_` between words. Regardless of what naming scheme you adopt, the most
    important thing is to be consistent.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应该考虑如何命名你的项目文件夹和其中的文件。一些操作系统区分大小写，区分 `My_Game` 和 `my_game`，而其他则不区分。如果你将项目从一个计算机移动到另一个计算机，这可能会导致问题。因此，许多程序员为他们的项目开发了一个标准化的命名方案，例如不在文件名中使用空格，并在单词之间使用
    `_`。无论你采用什么命名方案，最重要的是要保持一致性。
- en: Once you’ve created the project folder, the `test_project`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你创建了项目文件夹，`test_project`。
- en: Console window
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台窗口
- en: If you’re using a version of the Windows operating system, you’ll also see a
    console window open when you run Godot. In this window, you can see warnings and
    errors produced by the engine and/or your project. This window doesn’t appear
    on macOS or Linux, but you can see the console output if you launch the application
    from the command line using a Terminal program
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用 Windows 操作系统版本，当你运行 Godot 时，你也会看到一个控制台窗口打开。在这个窗口中，你可以看到由引擎和/或你的项目产生的警告和错误。在
    macOS 或 Linux 上，这个窗口不会出现，但如果你使用终端程序从命令行启动应用程序，你可以看到控制台输出。
- en: Editor window
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编辑器窗口
- en: 'The following figure is a screenshot of the main Godot editor window. This
    is where you will spend most of your time when building projects in Godot. The
    editor interface is divided into several sections, each offering different functionality.
    The specific terminology for each section is described after *Figure 1**.5*:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图是 Godot 主编辑窗口的截图。当你使用 Godot 构建项目时，你将在这里花费大部分时间。编辑器界面被分为几个部分，每个部分提供不同的功能。每个部分的特定术语将在
    *图 1*.*5* 之后描述：
- en: '![Figure 1.5: The Godot editor window](img/B19289_01_05.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.5：Godot 编辑器窗口](img/B19289_01_05.jpg)'
- en: 'Figure 1.5: The Godot editor window'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5：Godot 编辑器窗口
- en: The main portion of the editor window is the *Viewport*. This is where you’ll
    see the parts of your game as you’re working on them.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑器窗口的主要部分是 *视口*。这是你在工作时将看到你的游戏部分的地方。
- en: In the top center of the window is a list of the *Workspaces* you can switch
    between when working on different parts of your game. You can switch between **2D**
    and **3D** mode, as well as **Script** mode, where you’ll edit your game’s code.
    **AssetLib** is a place where you can download add-ons and example projects contributed
    by the Godot community. See [*Chapter 7*](B19289_07.xhtml#_idTextAnchor207) for
    more information about using the asset library.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在窗口的顶部中央是一个你可以切换的 *工作空间* 列表，当你在游戏的不同部分工作时，你可以在这之间切换。你可以切换到 **2D** 和 **3D** 模式，以及
    **脚本** 模式，在那里你将编辑你的游戏代码。**AssetLib** 是你可以下载由 Godot 社区贡献的插件和示例项目的地方。参见 [*第 7 章*](B19289_07.xhtml#_idTextAnchor207)
    了解有关使用资产库的更多信息。
- en: '*Figure 1**.6* shows the *toolbar* for the current workspace you’re using.
    The icons here will change based on what kind of object you’re working with:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1*.*6* 展示了你当前工作空间使用的 *工具栏*。这里的图标将根据你正在处理的对象类型而变化：'
- en: '![Figure 1.6: Toolbar icons](img/B19289_01_06.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.6：工具栏图标](img/B19289_01_06.jpg)'
- en: 'Figure 1.6: Toolbar icons'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.6：工具栏图标
- en: 'The buttons in the upper-right *playtest* area are for launching the game and
    interacting with it when it’s running:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 上右角的 *游戏测试* 区域中的按钮用于启动游戏并在游戏运行时与之交互：
- en: '![Figure 1.7: Playtest buttons](img/B19289_01_07.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.7：游戏测试按钮](img/B19289_01_07.png)'
- en: 'Figure 1.7: Playtest buttons'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.7：游戏测试按钮
- en: 'On the left and right sides are the *Docks* or *Tabs* you can use to view and
    select game items and set their properties. On the bottom of the left-hand dock,
    you’ll find the `res://` path, which is the project’s root folder. For example,
    a file path might look like this: `res://player/player.tscn`. This refers to a
    file in the `player` folder:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧和右侧是你可以用来查看和选择游戏项目并设置其属性的 *坞* 或 *标签*。在左侧坞的底部，你会找到 `res://` 路径，这是项目的根文件夹。例如，文件路径可能看起来像这样：`res://player/player.tscn`。这指的是
    `player` 文件夹中的一个文件：
- en: '![Figure 1.8: The FileSystem tab](img/B19289_01_08.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.8：FileSystem 选项卡](img/B19289_01_08.jpg)'
- en: 'Figure 1.8: The FileSystem tab'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.8：FileSystem 选项卡
- en: 'At the top of the left-hand dock is the **Scene** tab, which shows the current
    scene you are working on in the viewport (more about scenes after *Figure 1**.9*):'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧工具栏的顶部是**场景**标签，它显示了你在视图中正在工作的当前场景（关于场景的更多内容请参阅*图1.9*后的内容）：
- en: '![Figure 1.9: The Scene tab](img/B19289_01_09.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图1.9：场景标签](img/B19289_01_09.jpg)'
- en: 'Figure 1.9: The Scene tab'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.9：场景标签
- en: On the right-hand side, you’ll find a box labeled **Inspector**, where you can
    see and adjust the properties of your game objects.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在右侧，你会找到一个标记为**检查器**的框，在那里你可以查看和调整游戏对象的属性。
- en: As you work through the game projects in this book, you’ll learn about the functionality
    of these items and become familiar with navigating the editor interface.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 随着你在这本书中处理游戏项目，你将了解这些项目的功能，并熟悉导航编辑器界面。
- en: After reading this section, you should feel comfortable with the layout of the
    Godot editor window and the names of the elements you’ll be seeing throughout
    the book. You’re one step closer to finishing this introduction and getting started
    on a game. First, though, did you notice those items in *Figure 1**.9*? Those
    are called nodes, and you’ll find out what they’re all about in the next section.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在阅读本节之后，你应该对Godot编辑器窗口的布局以及你在本书中将要看到的元素名称感到舒适。你离完成这个介绍并开始制作游戏又近了一步。不过，你注意到*图1.9*中的那些项目了吗？那些被称为节点，你将在下一节中了解到它们的所有内容。
- en: Learning about nodes and scenes
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解节点和场景
- en: '**Nodes** are the basic building blocks for creating games in Godot. A node
    is an object that can give you a variety of specialized game functions. A given
    type of node might display an image, play an animation, or represent a 3D model.
    The node contains a collection of properties, allowing you to customize its behavior.
    Which nodes you add to your project depends on what functionality you need. It’s
    a modular system designed to give you flexibility in building your game objects.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**节点**是创建Godot游戏的基石。节点是一个可以提供各种专业游戏功能的对象。给定类型的节点可能显示图像、播放动画或表示3D模型。节点包含一系列属性，允许你自定义其行为。你添加到项目中的节点取决于你需要的功能。这是一个模块化系统，旨在在构建游戏对象时为你提供灵活性。'
- en: 'The nodes you add are organized into a *tree* structure. In a tree, nodes are
    added as *children* of other nodes. A particular node can have any number of children,
    but only one *parent* node. When a group of nodes is collected into a tree, it
    is called a *scene*:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 你添加的节点组织成一个*树状结构*。在树中，节点被添加为其他节点的*子节点*。一个特定的节点可以有任意数量的子节点，但只有一个*父节点*。当一组节点被收集到一个树中时，它被称为*场景*：
- en: '![Figure 1.10: Nodes arranged in a tree](img/B19289_01_10.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图1.10：以树状结构排列的节点](img/B19289_01_10.jpg)'
- en: 'Figure 1.10: Nodes arranged in a tree'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.10：以树状结构排列的节点
- en: '**Scenes** in Godot are typically used to create and organize the various game
    objects in your project. You might have a player scene that contains all the nodes
    and scripts that make the player’s character work. Then, you might create another
    scene that defines the game’s map: the obstacles and items that the player must
    navigate through. You can then combine these various scenes into the final game.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Godot中的**场景**通常用于创建和组织项目中的各种游戏对象。你可能有一个包含所有使玩家角色工作的节点和脚本的玩家场景。然后，你可能创建另一个场景来定义游戏的地图：玩家必须导航的障碍和物品。然后，你可以将这些不同的场景组合成最终的游戏。
- en: While nodes come with a variety of properties and functions, any node’s behavior
    and capabilities can be extended by attaching a *script* to the node. This allows
    you to write code that makes the node do more than it can do in its default state.
    For example, you can add a `Sprite2D` node to display an image, but if you want
    that image to move or disappear when clicked, you’ll need to add a script to create
    that behavior.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然节点自带各种属性和功能，但任何节点的行为和能力都可以通过附加一个*脚本*到节点来扩展。这允许你编写代码，使节点能够执行其默认状态之外的功能。例如，你可以添加一个`Sprite2D`节点来显示图像，但如果你想让该图像在点击时移动或消失，你需要添加一个脚本来创建这种行为。
- en: Nodes are powerful tools, and understanding them is the key to effectively building
    game objects in Godot. However, on their own, they can only do so much. It’s still
    up to you to provide the game logic – the rules that objects in your game will
    follow. In the next section, you can see how that’s done by writing code using
    Godot’s scripting language.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 节点是强大的工具，理解它们是有效构建Godot中游戏对象的关键。然而，仅凭节点本身，它们能做的有限。游戏逻辑——即你的游戏中的对象将遵循的规则——还需要你来提供。在下一节中，你可以通过使用Godot的脚本语言编写代码来了解如何实现这一点。
- en: Scripting in Godot
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Godot 中的脚本编写
- en: 'Godot provides two official languages for scripting nodes: **GDScript** and
    **C#**. GDScript is the dedicated built-in language, providing the tightest integration
    with the engine, and is the most straightforward to use. For those that are already
    familiar or proficient with C#, you can download a version that supports that
    language.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Godot 为节点脚本提供了两种官方语言：**GDScript** 和 **C#**。GDScript 是专用内置语言，提供与引擎最紧密的集成，并且使用起来最简单。对于已经熟悉或精通
    C# 的人来说，您可以下载支持该语言版本的版本。
- en: In addition to the two supported languages, Godot itself is written in C++,
    and you can get even more performance and control by extending the engine’s functionality
    directly. See *Additional topics* in [*Chapter 7*](B19289_07.xhtml#_idTextAnchor207)
    for information on using other languages and extending the engine.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 除了支持的语言之外，Godot 本身是用 C++ 编写的，您可以通过直接扩展引擎的功能来获得更多的性能和控制。有关使用其他语言和扩展引擎的信息，请参阅
    [*第 7 章*](B19289_07.xhtml#_idTextAnchor207) 中的 *附加主题*。
- en: All the games in this book will use GDScript. For the majority of projects,
    GDScript is the best choice of language. It is tightly integrated with Godot’s
    **Application Programming Interface** (**API**) and is designed for rapid development.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的所有游戏都将使用 GDScript。对于大多数项目来说，GDScript 是最佳的语言选择。它与 Godot 的 **应用程序编程接口** (**API**)
    紧密集成，并专为快速开发设计。
- en: About GDScript
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于 GDScript
- en: GDScript’s syntax is very closely modeled on the Python language. If you are
    familiar with Python already, you will find GDScript very familiar. If you are
    comfortable with another dynamic language, such as JavaScript, you should find
    it relatively easy to learn. Python is very often recommended as a good beginner
    language, and GDScript shares that user-friendliness.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: GDScript 的语法非常接近 Python 语言。如果您已经熟悉 Python，您会发现 GDScript 非常熟悉。如果您对其他动态语言，如 JavaScript，感到舒适，您应该会发现学习它相对容易。Python
    经常被推荐为一种良好的入门语言，GDScript 也具有这种用户友好性。
- en: This book assumes you have at least some programming experience already. If
    you’ve never coded before, you may find it a little more difficult. Learning a
    game engine is a large task on its own; learning to code at the same time means
    you’ve taken on a major challenge. If you find yourself struggling with the code
    in this book, you may find that working through an introductory programming lesson
    in a language such as Python or Javascript will help you grasp the basics.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 本书假设您已经具备至少一些编程经验。如果您以前从未编码过，您可能会觉得这有点困难。学习游戏引擎本身就是一项艰巨的任务；同时学习编码意味着您已经接受了重大挑战。如果您发现自己在这本书的代码中遇到困难，您可能会发现通过在
    Python 或 JavaScript 等语言中进行入门编程课程的学习，可以帮助您掌握基础知识。
- en: Like Python, GDScript is a dynamically typed language, meaning you do not need
    to declare a variable’s type when creating it, and it uses whitespace (indentation)
    to denote code blocks. Overall, the advantage of using GDScript for your game’s
    logic is that, due to its tight integration with the engine, you write less code,
    which means faster development and fewer mistakes to fix.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Python 一样，GDScript 是一种动态类型语言，这意味着在创建变量时不需要声明其类型，并且它使用空白（缩进）来表示代码块。总的来说，使用
    GDScript 为您的游戏逻辑编写代码的优势在于，由于它与引擎的紧密集成，您编写的代码更少，这意味着开发速度更快，需要修复的错误也更少。
- en: 'To give you an idea of what GDScript looks like, here is a small script that
    causes a sprite to move from left to right across the screen at a given speed:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让您了解 GDScript 的样子，这里有一个小脚本，它使精灵以给定的速度在屏幕上从左到右移动：
- en: '[PRE0]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you’ve used other high-level languages such as Python before, this will look
    very familiar, but don’t worry if this code doesn’t make much sense to you yet.
    In the following chapters, you’ll be writing lots of code, which will be accompanied
    by explanations of how it all works.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您之前使用过其他高级语言，如 Python，这看起来会非常熟悉，但如果您觉得这段代码现在还不太明白，请不要担心。在接下来的章节中，您将编写大量的代码，这些代码将伴随着所有工作原理的解释。
- en: Summary
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you were introduced to the concept of a game engine in general
    and to Godot in particular. Most importantly, you downloaded Godot and launched
    it!
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了游戏引擎的一般概念，特别是 Godot。最重要的是，您下载了 Godot 并启动了它！
- en: You learned some important vocabulary that will be used throughout this book
    when referring to various parts of the Godot editor window. You also learned about
    the concepts of nodes and scenes, which are the fundamental building blocks of
    Godot.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经学习了一些重要的词汇，这些词汇将在本书中提及 Godot 编辑器窗口的各个部分时使用。你还了解了节点和场景的概念，它们是 Godot 的基本构建模块。
- en: You also received some advice on how to approach the projects in this book and
    game development in general. If you ever find yourself getting frustrated as you
    are working through this book, go back and reread the *General advice* section.
    There’s a lot to learn, and it’s OK if it doesn’t all make sense the first time.
    You’ll make five different games throughout this book, and each one will help
    you understand things a little bit more.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 你还得到了一些关于如何处理本书中的项目和游戏开发一般性建议。如果你在阅读本书的过程中感到沮丧，请返回并重新阅读 *一般性建议* 部分。有很多东西要学习，第一次不一定都能理解，这是正常的。本书中你将制作五个不同的游戏，每个游戏都会帮助你更好地理解一些东西。
- en: You’re ready to move on to the next chapter, where you’ll start building your
    first game in Godot.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经准备好进入下一章，在那里你将开始使用 Godot 构建你的第一个游戏。
