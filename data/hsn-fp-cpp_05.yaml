- en: The Idea of Functional Composition
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数组合的概念
- en: We've seen in the past chapters how to write pure functions and lambdas. These
    are the basic building blocks of functional programming. It's time to take them
    to the next level.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的章节中，我们已经学习了如何编写纯函数和lambda。这些是函数式编程的基本构建模块。现在是时候将它们提升到下一个级别了。
- en: In this chapter, we will learn how to obtain more functions from existing functions,
    thus building complex behavior from the simple examples that we've looked at so
    far.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将学习如何从现有的函数中获得更多功能，从而从我们迄今为止所看到的简单示例中构建复杂的行为。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Composing functions in C++
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在C++中组合函数
- en: A basic decomposition strategy for functions with multiple arguments
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有多个参数的函数的基本分解策略
- en: Removing duplication (or code similarity) using functional composition
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用函数组合消除重复（或代码相似性）
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You will need a compiler that supports C++ 17\. I used GCC 7.3.0.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 您将需要一个支持C++ 17的编译器。我使用的是GCC 7.3.0。
- en: 'The code is on GitHub at [https://github.com/PacktPublishing/Hands-On-Functional-Programming-with-Cpp](https://github.com/PacktPublishing/Hands-On-Functional-Programming-with-Cpp),
    in the `Chapter04` folder. It includes and uses `doctest`, which is a single-header
    open source unit testing library. You can find it in its GitHub repository here:
    [https://github.com/onqtam/doctest](https://github.com/onqtam/doctest).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码位于GitHub上的[https://github.com/PacktPublishing/Hands-On-Functional-Programming-with-Cpp](https://github.com/PacktPublishing/Hands-On-Functional-Programming-with-Cpp)中，位于`Chapter04`文件夹中。它包括并使用`doctest`，这是一个单头开源单元测试库。您可以在其GitHub存储库中找到它：[https://github.com/onqtam/doctest](https://github.com/onqtam/doctest)。
- en: What is functional composition?
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是函数组合？
- en: Pure functions and lambdas are the basic blocks of functional programming. But
    all the examples we've looked at so far use very simple functions. We obviously
    deal with much more complex problems in our industry. However, as we've seen,
    we still want our basic blocks to be very simple, since we want to understand
    and maintain them easily. So, how can we create complex programs from the simple
    lambdas and pure functions we've seen so far? Functional programming has a simple
    answer—let's create more complex functions by combining the simple functions we
    have. The fundamental way to create complex functions in functional programming
    is functional composition.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 纯函数和lambda是函数式编程的基本组成部分。但到目前为止，我们所看到的所有示例都使用非常简单的函数。在我们的行业中，我们显然处理着更复杂的问题。然而，正如我们所看到的，我们仍然希望我们的基本组成部分非常简单，因为我们希望能够轻松理解和维护它们。那么，我们如何能够从迄今为止所看到的简单lambda和纯函数创建复杂的程序呢？函数式编程有一个简单的答案——让我们通过组合我们拥有的简单函数来创建更复杂的函数。在函数式编程中创建复杂函数的基本方法是函数组合。
- en: Functional composition
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数组合
- en: At its core, functional composition is very simple. We'll use a basic example
    to illustrate it. We will start with our `increment` function. Also, from now
    on, I will use test cases to show how the code works. I'm using `doctest`, a single-header
    open source unit testing library ([https://github.com/onqtam/doctest](https://github.com/onqtam/doctest)).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 从本质上讲，函数组合非常简单。我们将使用一个基本示例来说明它。我们将从我们的`increment`函数开始。从现在开始，我将使用测试用例来展示代码的工作原理。我正在使用`doctest`，这是一个单头开源单元测试库([https://github.com/onqtam/doctest](https://github.com/onqtam/doctest))。
- en: 'Let''s look at our `increment` function with a test case:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们的`increment`函数及其测试用例：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let''s also say that, for some reason, we need to increment the value twice.
    Since we''re thinking in functions, we want to reuse our function. We could, therefore,
    call it twice:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以说，出于某种原因，我们需要两次增加值。由于我们在思考函数，我们希望重用我们的函数。因此，我们可以调用它两次：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This works fine if we only need a double increment in a single place. If we
    need it in multiple places in our code, we will need a function. It''s easy enough
    to extract a function that performs a double increment:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们只需要在代码中的一个地方进行双重增量，那么这样做是可以的。如果我们需要在代码中的多个地方进行双重增量，我们将需要一个函数。很容易提取一个执行双重增量的函数：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If we look at `incrementTwiceLambda`, we can see that it is formed by `increment`
    called on the result of `increment`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们看`incrementTwiceLambda`，我们可以看到它是由对`increment`的结果调用`increment`形成的。
- en: 'Let''s let it rest for now, and move on to another case. We now want to compute
    the square of a number, still using functions. It''s easy to write, once again:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们暂且不谈它，转而讨论另一个情况。我们现在想要计算一个数字的平方，仍然使用函数。这很容易写，再次：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Our next requirement is to compute the incremented square of a value. Once
    again, we could extract a lambda that combines `increment` and `square` as we
    need them:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一个要求是计算一个值的增加平方。我们可以再次提取一个lambda，将`increment`和`square`组合在一起，因为我们需要它们：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'That''s very nice. However, we have a hidden similarity in the code. Let''s
    look at the `incrementTwiceLambda` and `incrementSquareLambda` functions:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这很好。然而，我们在代码中有一个隐藏的相似之处。让我们看看`incrementTwiceLambda`和`incrementSquareLambda`函数：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: They both have the same pattern—we created a function, *C*, by having a function, *f*,
    call on the result of another function, *g*, applied to the value passed to our
    function, *C*. This is a kind of code similarity that we can expect to see a lot
    when we use small, pure functions. It would be nice to have a name and maybe even
    a way to implement it without writing so much boilerplate code.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 它们都有相同的模式——我们通过让一个函数`f`调用另一个函数`g`应用于传递给我们的函数`C`的值的结果来创建一个函数`C`。这是一种我们可以期望在使用小的纯函数时经常看到的代码相似性。最好有一个名称，甚至可能有一种方法来实现它，而不需要写太多样板代码。
- en: 'It turns out, it does have a name—this is functional composition. In general
    terms, for any *f* or *g* function with single arguments, we can obtain a function, *C*,
    as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，它确实有一个名字——这就是函数组合。一般来说，对于任何具有单个参数的*f*或*g*函数，我们可以按照以下方式获得一个函数*C*：
- en: '![](img/332f1ee6-da2c-45e7-8605-58a475e6b52f.png) meaning that for every value
    of *x*, ![](img/fc102ff6-21a4-45e8-aa49-1b6bf0f9daf7.png).'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/332f1ee6-da2c-45e7-8605-58a475e6b52f.png) 意味着对于*x*的每个值，![](img/fc102ff6-21a4-45e8-aa49-1b6bf0f9daf7.png)。'
- en: The ![](img/14204b22-3e95-49e7-b99f-9726698eca8d.png) symbol is the mathematical
    operator for functional composition.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/14204b22-3e95-49e7-b99f-9726698eca8d.png)符号是函数组合的数学运算符。'
- en: As you can see, what we're actually trying to do is to obtain functions from
    other functions by having operations on the functions themselves! It's a type
    of calculus that uses lambdas instead of numbers, and defines operations on lambdas.
    Lambda calculus is an apt name, don't you think?
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们实际上正在尝试通过对函数本身进行操作来获得其他函数！这是一种使用lambda而不是数字的微积分类型，并定义了对lambda的操作。Lambda演算是一个合适的名称，你不觉得吗？
- en: This is the concept of functional composition. The next question is—can we eliminate
    the boilerplate code?
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是函数组合的概念。下一个问题是-我们能否消除样板代码？
- en: Implementing functional composition in C++
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在C++中实现函数组合
- en: 'It would be nice to have an operator that allows us to perform functional composition.
    Indeed, other programming languages provide one; for example, in Groovy, we can
    use the `<<` operator as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们能有一个运算符，允许我们执行函数组合，那就太好了。事实上，其他编程语言提供了一个；例如，在Groovy中，我们可以使用`<<`运算符如下：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Unfortunately, C++ doesn't (yet) have a standard operator for functional composition.
    However, C++ is a powerful language, so it should be possible to write our own
    function that performs functional composition, at least for limited cases.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，C++（尚）没有标准的函数组合运算符。但是，C++是一种强大的语言，因此应该可以为有限的情况编写自己的执行函数组合的函数。
- en: 'First, let''s clearly define the problem. We would like to have a `compose` function
    that receives two lambdas, `f` and `g`, and returns a new lambda that calls `value
    -> f(g(value)`. The simplest implementation in C++ would look like the following
    code:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们清楚地定义问题。我们希望有一个`compose`函数，它接收两个lambda，`f`和`g`，并返回一个调用`value -> f(g(value)`的新lambda。在C++中最简单的实现看起来像下面的代码：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Unfortunately, this code doesn''t compile because C++ doesn''t allow parameters
    with `auto` types. One way would be to specify the function type:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，这段代码无法编译，因为C++不允许使用`auto`类型的参数。一种方法是指定函数类型：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This works fine and passes the tests. But now our `compose` function depends
    on the function type. That's not very useful, since we will have to reimplement
    `compose` for every type of function that we need. It's less boilerplate than
    before, but still far from ideal.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这很好地运行并通过了测试。但现在我们的`compose`函数取决于函数类型。这并不是很有用，因为我们将不得不为我们需要的每种类型的函数重新实现`compose`。虽然比以前的样板代码少了，但仍然远非理想。
- en: 'But this is exactly the type of problem resolved by C++ templates. Maybe they
    can help:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 但这正是C++模板解决的问题类型。也许它们可以帮助：
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Indeed, this code works! So, we now know that, although there is no operator
    for functional composition in C++,  we can implement it with an elegant function.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，这段代码有效！因此，我们现在知道，尽管C++中没有函数组合的运算符，但我们可以用一个优雅的函数来实现它。
- en: Please note how compose returns a lambda, which uses lazy evaluation. Therefore,
    our functional composition function also uses lazy evaluation. This is an advantage,
    since the composed lambda will only be initialized when we use it.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，compose返回一个lambda，它使用惰性评估。因此，我们的函数组合函数也使用惰性评估。这是一个优势，因为组合的lambda只有在我们使用它时才会初始化。
- en: Functional composition is not commutative
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数组合不是可交换的
- en: 'It''s important to realize that functional composition is not commutative.
    Indeed, it''s easy to see why when we speak—*the increment square of a value*
    is different from *squaring the increment of a value*. However, we need to be
    careful in code because the two differ just by the order of the parameters for
    the compose function:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要意识到函数组合不是可交换的。事实上，当我们说话时很容易理解-“值的增量平方”与“增量值的平方”是不同的。然而，在代码中我们需要小心，因为这两者只是compose函数参数顺序不同而已：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We've seen what functional composition is, how to implement it in C++, and how
    to use it for simple cases. I bet you're eager to try it now for more complex
    programs. We'll get there, but first let's look at more complex situations. What
    about functions with multiple parameters?
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了函数组合是什么，如何在C++中实现它，以及如何在简单情况下使用它。我敢打赌你现在渴望尝试它，用于更复杂的程序。我们会到那里的，但首先让我们看看更复杂的情况。多参数函数怎么办？
- en: Complex functional composition
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复杂的函数组合
- en: Our compose function has a problem—it only works with lambdas that receive one
    argument. So, what do we do if we want to compose functions with multiple arguments?
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的compose函数有一个问题-它只能与接收一个参数的lambda一起使用。那么，如果我们想要组合具有多个参数的函数，我们该怎么办呢？
- en: 'Let''s take the following example—given two lambdas, `multiply` and `increment`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看下面的例子-给定两个lambda，`multiply`和`increment`：
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Can we obtain a lambda that increments the result of the multiplication?
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能否获得一个增加乘法结果的lambda？
- en: 'Unfortunately, we cannot use our `compose` function since it assumes that both
    functions have one parameter:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，我们不能使用我们的`compose`函数，因为它假定两个函数都有一个参数：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: So, what are our options?
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们有哪些选择呢？
- en: Implementing more compose functions
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现更多的组合函数
- en: 'We could implement a variant of the `compose` function that takes a function, `f`,
    which takes one argument, and another function, `g`, which takes two arguments:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以实现`compose`函数的变体，它接受一个接收一个参数的函数`f`，和另一个接收两个参数的函数`g`：
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This solution is simple enough. However, if we need to obtain a function that
    multiplies the incremented values of its arguments, we need yet another `compose`
    variant:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这个解决方案足够简单。但是，如果我们需要获得一个函数，它将增加其参数的值，我们需要另一个`compose`变体：
- en: '[PRE14]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: What if we only want to increment one of the arguments? There are a lot of possible
    combinations, and while we can cover them with multiple variants of compose, it's
    worth visiting other options as well.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们只想增加其中一个参数怎么办？有很多可能的组合，虽然我们可以用多个compose变体来覆盖它们，但也值得考虑其他选项。
- en: Decomposing functions with multiple arguments
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分解具有多个参数的函数
- en: 'Instead of implementing more variations of compose, we could look into the
    `multiply` function itself:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是实现更多的compose变体，我们可以查看`multiply`函数本身：
- en: '[PRE15]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'There''s a trick we can use to decompose it into two lambdas, each taking one
    argument. The key idea is that a lambda is just a value, so it can be returned
    by a function. We''ve already seen this in action in our `compose` function; it
    creates and returns a new lambda:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用一个技巧将其分解为两个分别接收一个参数的lambda。关键思想是lambda只是一个值，因此它可以被函数返回。我们已经在我们的`compose`函数中看到了这一点；它创建并返回一个新的lambda：
- en: '[PRE16]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We can, therefore, decompose a function with two arguments by returning a new
    lambda with a single argument that captures the `first` argument from the context:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以通过返回一个捕获上下文中的`first`参数的单参数lambda来分解具有两个参数的函数：
- en: '[PRE17]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Let''s unpack this code, because it''s quite complex:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们解开这段代码，因为它非常复杂：
- en: '`multiplyDecomposed` takes one argument, `first`, and it returns a lambda.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`multiplyDecomposed`接收一个参数`first`，并返回一个lambda。'
- en: The returned lambda captures `first` from the context.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回的lambda捕获了上下文中的`first`。
- en: It then receives one parameter, `second`.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后接收一个参数`second`。
- en: It returns the result of the addition of `first` and `second`.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它返回了`first`和`second`的加法结果。
- en: 'It turns out that any function with two arguments can be decomposed like this.
    We can, therefore, write a generic implementation using templates. We just need
    to use the same trick—specify the function type as a template type, and proceed
    with using it in our decomposition:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，任何具有两个参数的函数都可以像这样分解。因此，我们可以使用模板编写一个通用实现。我们只需要使用相同的技巧——将函数类型指定为模板类型，并继续在我们的分解中使用它：
- en: '[PRE18]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This method is promising; it might simplify our implementation of functional
    composition. Let's see if it works.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法很有前途；它可能简化我们的函数组合实现。让我们看看它是否有效。
- en: Incrementing the result of multiplication
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 增加乘法结果
- en: 'Let''s move forward toward our goal. Can we use `compose` to obtain a function
    that increments the result of the multiplication? It''s easy now, since `add`
    is decomposed into lambdas that receive one argument. We would expect to just
    compose `multiplyDecomposed` with `increment`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们朝着我们的目标前进。我们能否使用`compose`来获得一个增加乘法结果的函数？现在很容易，因为`add`已经分解成了接收一个参数的lambda。我们期望只需将`multiplyDecomposed`与`increment`组合起来：
- en: '[PRE19]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: However, this doesn't compile. Our compose function assumes that the result
    of `multiplyDecomposed(first)` can be passed to increment. But `multiplyDecompose(first)`
    returns a lambda, and `increment` takes an integer.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这不会编译。我们的compose函数假设`multiplyDecomposed(first)`的结果可以传递给increment。但是`multiplyDecompose(first)`返回一个lambda，而`increment`接收一个整数。
- en: 'We need, therefore, to compose `increment` with `multipyDecomposed(first)`:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们需要将`increment`与`multipyDecomposed(first)`组合：
- en: '[PRE20]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This works, but we have not yet achieved our goal. We didn't obtain a function
    that takes the two values in; instead, the first value is passed to `multiplyDecomposed`
    when composing it with the `increment` function.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做是有效的，但我们还没有实现我们的目标。我们没有获得一个接收两个值的函数；相反，在将其与`increment`函数组合时，第一个值被传递给了`multiplyDecomposed`。
- en: 'Fortunately, this is the perfect place to use a lambda, as shown in the following
    code:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，这是使用lambda的完美场所，如下面的代码所示：
- en: '[PRE21]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This definitely works, and we''ve achieved our goal! The `incrementResultOfMultiplication`
    lambda takes two parameters and returns the increment of the multiplication. It
    would be nicer, though, if we didn''t have to rewrite `multiply`. Fortunately,
    we have our `decomposeToOneParameter` function to help us:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这绝对有效，我们实现了我们的目标！`incrementResultOfMultiplication` lambda接收两个参数并返回乘法的增量。不过，如果我们不必重写`multiply`就更好了。幸运的是，我们有我们的`decomposeToOneParameter`函数来帮助我们：
- en: '[PRE22]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: It's time to look at the reversed composition—what if we wanted to multiply
    the increments of both our arguments?
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候看看反向组合了——如果我们想要将两个参数的增量相乘呢？
- en: Multiplying increments
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 乘法增量
- en: 'We would like to obtain a function that multiplies the increments of our arguments,
    by using our `compose` function. The simplest code, which doesn''t use `compose`,
    is the following:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望通过使用我们的`compose`函数获得一个将参数的增量相乘的函数。不使用`compose`的最简单的代码如下：
- en: '[PRE23]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'As we''ve seen, we need to decompose the `multiply` lambda first if we want
    to use our version of compose:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，如果我们想要使用我们的compose版本，我们首先需要分解`multiply`lambda：
- en: '[PRE24]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now we can see the call to `multiplyDecomposed(increment(first))`, which is
    the composition between `multiplyDecomposed` and `increment`. We can replace it
    with our `compose` function, as shown in the following code:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以看到对`multiplyDecomposed(increment(first))`的调用，这是`multiplyDecomposed`和`increment`之间的组合。我们可以用我们的`compose`函数替换它，如下面的代码所示：
- en: '[PRE25]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Again, it would be nice if we didn''t have to rewrite our `multiply` function.
    But remember that we implemented a useful function that can decompose any function
    with two parameters into two functions with a parameter. We don''t have to rewrite
    `multiply`; we just have to call our decomposition utility on it:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，如果我们不必重写我们的`multiply`函数就好了。但是请记住，我们实现了一个有用的函数，可以将具有两个参数的任何函数分解为具有一个参数的两个函数。我们不必重写`multiply`；我们只需在其上调用我们的分解实用程序：
- en: '[PRE26]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: We've achieved our goal!
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实现了我们的目标！
- en: Reflections on the composition and decomposition of functions
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对函数的组合和分解的反思
- en: Let's take a moment to look at the results and at our working method. Here's
    the good news—we made good progress with learning how to think in functions. Our
    previous examples work just by operating on functions as first-class citizens
    of our code, which is exactly the mindset we need if we want to design applications
    using the functional paradigm. The decomposition and recomposition of functions
    is incredibly powerful; master it and you will be able to implement very complex
    behavior with very little code.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们花点时间来看看结果和我们的工作方法。好消息是，我们在学习如何以函数思维的方式思考方面取得了良好的进展。我们之前的例子只需在代码中操作函数作为一等公民就可以工作，这正是我们在设计应用程序时需要的思维方式。函数的分解和重组非常强大；掌握它，你将能够用很少的代码实现非常复杂的行为。
- en: As for the resulting code, it has an interesting property—we can generalize
    it to reuse on many combinations of functions.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 至于结果代码，它具有一个有趣的属性——我们可以将其泛化以在许多函数组合上重用。
- en: But we're not done yet! We can use these functions to remove certain types of
    duplication from our code. Let's see how.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们还没有完成！我们可以使用这些函数来从我们的代码中删除某些类型的重复。让我们看看如何做到这一点。
- en: Using functional composition to remove duplication
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用函数组合来消除重复
- en: So far, we've seen how we can write functions that compose lambdas in various
    ways. But code tends to repeat itself, so we would like to make this method more
    general. We can indeed take this even further; let's look at a few examples.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了如何以各种方式编写组合lambda的函数。但是代码往往会重复，因此我们希望使这种方法更加通用。我们确实可以进一步进行；让我们看几个例子。
- en: Generalizing incrementResultOfMultiplication
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 泛化增量乘法结果
- en: 'Let''s take another look at our `incrementResultOfMultiplication` lambda:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再看看我们的`incrementResultOfMultiplication` lambda：
- en: '[PRE27]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'There''s something interesting about it—it''s not specific to `increment` and
    `multiply`. Since lambdas are just values, we can pass them as parameters and
    obtain a general `composeWithTwoParameters` function:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些有趣的东西——它并不特定于“增量”和“乘法”。由于lambda只是值，我们可以将它们作为参数传递并获得一个通用的“composeWithTwoParameters”函数：
- en: '[PRE28]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This function allows us to *compose any other two functions,* `f` *and* `g`*,
    where* `g` *takes two parameters and* `f` *only one parameter*.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数允许我们*组合任何其他两个函数*，`f` *和* `g`*，其中* `g` *接受两个参数，* `f` *只接受一个参数*。
- en: Let's do some more of this. Let's generalize `multiplyIncrementedValues`.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再做一些。让我们泛化`multiplyIncrementedValues`。
- en: Generalizing multiplyIncrementedValues
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 泛化增量乘法结果
- en: 'Similarly, we can easily generalize our `multiplyIncrementedValues` lambda,
    as shown in the following code:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以轻松地泛化我们的`multiplyIncrementedValues` lambda，如下面的代码所示：
- en: '[PRE29]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In the same manner, we need to pass the `multiply` and `increment` lambdas
    as parameters:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们需要将“乘法”和“增量”lambda作为参数传递：
- en: '[PRE30]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: We can use this new function to create a function, *C*, which implements `g(f(first),
    f(second))`, no matter what `g` and `f` are.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用这个新函数来创建一个函数*C*，它实现了“g(f(first), f(second))”，无论“g”和“f”是什么。
- en: Our work here is done for now.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们目前的工作已经完成。
- en: Summary
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: If you thought that pure functions and lambdas are powerful, you will now realize
    how much you can do by composing them! In this chapter, you learned what functional
    composition is and how to compose functions in C++.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你认为纯函数和lambda很强大，那么现在你将意识到通过组合它们可以做多少事情！在本章中，您学会了什么是函数组合以及如何在C++中组合函数。
- en: 'We also worked on something much more important. In this chapter, we really
    started to think in functions. Here are some things we learned:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还做了一件更重要的事情。在本章中，我们真正开始思考函数。以下是我们学到的一些东西：
- en: A lambda is just a value, so we can have functions that return lambdas, or lambdas
    that return lambdas.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: lambda只是一个值，所以我们可以有返回lambda的函数，或者返回lambda的lambda。
- en: Also, we can have functions that receive one or more lambdas and return a new
    lambda.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此外，我们可以有接收一个或多个lambda并返回一个新lambda的函数。
- en: Any function with multiple arguments can be decomposed into multiple lambdas
    with single arguments and captured values.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何具有多个参数的函数都可以分解为具有单个参数和捕获值的多个lambda。
- en: Operations with functions are quite complex. If you feel your head spinning,
    that's OK—we've been playing with very powerful and abstract concepts.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数的操作非常复杂。如果你感到头晕，没关系——我们一直在玩强大而抽象的概念。
- en: It's very difficult to instantly come up with a solution when it comes to various
    ways of composing functions. The best way is to go step by step, have a clear
    goal and a clear mind, and use the techniques described in this chapter to improve.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在各种组合函数的方式上立即想出解决方案是非常困难的。最好的方法是一步一步地进行，设定明确的目标和清晰的思路，并使用本章中描述的技术来改进。
- en: Functional composition can help remove some types of duplication; for example,
    when you have multiple compositions between different functions with similar signatures.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数组合可以帮助消除某些类型的重复；例如，当您有多个具有相似签名的不同函数之间的多个组合时。
- en: However, there is a cost to implementing the compose family of functions as
    we did in this chapter—a higher level of abstraction. It's quite difficult to
    understand how the functions that perform operations on lambdas work; indeed,
    trust me that I also have trouble understanding the results. Still, they are quite
    easy to use once you understand their goal.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然而，像我们在本章中所做的那样实现compose函数族是有成本的——更高的抽象级别。理解对lambda执行操作的函数的工作方式非常困难；确实，相信我，我也很难理解结果。但是，一旦您理解了它们的目标，它们就非常容易使用。
- en: After all this effort, let's take a moment to consider the result. Imagine that
    any two functions you already have in your code base, or in libraries that you
    use, could be composed just with a function call and expressed as variables. Moreover,
    these calls can stack; the functions you obtain can be composed even more. Functional
    composition is extremely powerful; with very simple lambdas and a few operations
    with functions, we can very quickly implement complex behavior.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 经过所有这些努力，让我们花点时间考虑一下结果。想象一下，您已经在代码库中拥有的任何两个函数，或者您使用的库中的任何两个函数，都可以通过一个函数调用组合并表示为变量。此外，这些调用可以堆叠；您获得的函数甚至可以进一步组合。函数组合非常强大；通过非常简单的lambda和一些函数操作，我们可以非常快速地实现复杂的行为。
- en: We've seen how to compose two functions. There's yet another operation on functions
    we need to learn—obtaining new functions by playing around with arguments.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何组合两个函数。我们还需要学习函数的另一个操作——通过玩弄参数来获得新函数。
- en: Questions
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is functional composition?
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是函数组合？
- en: Functional composition has a property that is usually associated with mathematical
    operations. What is it?
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 函数组合具有通常与数学运算相关联的属性。是什么？
- en: How can you turn an `add` function with two parameters into two functions with
    one parameter?
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何将具有两个参数的“add”函数转换为具有一个参数的两个函数？
- en: How can you write a C++ function that comprises two single argument functions?
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何编写一个包含两个单参数函数的C++函数？
- en: What are the advantages of functional composition?
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 函数组合的优势是什么？
- en: What are the potential disadvantages of implementing operations on functions?
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在函数操作的实施中有哪些潜在的缺点？
