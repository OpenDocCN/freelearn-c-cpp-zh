- en: '*Chapter 3*: Indirect Addressing: Pointers'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章：间接寻址：指针
- en: This chapter will provide a thorough understanding of how to utilize pointers
    in C++. Though it is assumed that you have some prior experience with indirect
    addressing, we will start at the beginning. Pointers are a ground-level and pervasive
    feature of the language – one you must thoroughly understand and be able to utilize
    with ease. Many other languages use indirect addressing through references alone,
    however, in C++ you must roll up your sleeves and understand how to use and return
    heap memory correctly and effectively with pointers. You will see pointers heavily
    used throughout code from other programmers; there is no sensible way to ignore
    their use. Misusing pointers can be the most difficult errors to find in a program.
    A thorough understanding of indirect addressing using pointers is a necessity
    in C++ to create successful and maintainable code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将全面介绍如何在C++中利用指针。虽然假定您具有一些间接寻址的先前经验，但我们将从头开始。指针是语言中的一个基本和普遍的特性 - 您必须彻底理解并能够轻松地利用它。许多其他语言仅通过引用使用间接寻址，然而，在C++中，您必须动手理解如何正确有效地使用和返回堆内存。您将看到其他程序员在代码中大量使用指针；无法忽视它们的使用。错误使用指针可能是程序中最难找到的错误。在C++中，彻底理解使用指针进行间接寻址是创建成功和可维护代码的必要条件。
- en: The goal of this chapter will be to build or enhance your understanding of indirect
    addressing using pointers so that you can easily understand and modify other's
    code, as well as being able to write original, sophisticated, error-free C++ code
    yourself.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是建立或增强您对使用指针进行间接寻址的理解，以便您可以轻松理解和修改他人的代码，以及能够自己编写原始、复杂、无错误的C++代码。
- en: 'In this chapter, we will cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Pointer basics, including access, memory allocation, and release – for standard
    and user defined types
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指针基础知识，包括访问、内存分配和释放 - 适用于标准和用户定义类型
- en: Dynamically allocating arrays of `1`, `2`, `N` dimensions, and managing their
    memory release
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态分配`1`、`2`、`N`维数组，并管理它们的内存释放
- en: Pointers as arguments to functions and as return values from functions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指针作为函数的参数和从函数返回的值
- en: Adding the `const` qualifier to pointer variables
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向指针变量添加`const`限定符
- en: Using void pointers – pointers to objects of unspecified types
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用void指针 - 指向未指定类型的对象的指针
- en: By the end of this chapter, you will understand how to allocate memory from
    the heap using `new()` for simple and complex data types, as well as how to mark
    the memory for return to the heap management facility using `delete()`. You will
    be able to dynamically allocate arrays of any data type and of any number of dimensions,
    and well as understanding basic memory management for releasing memory when it
    is no longer needed in your applications to avoid memory leakage. You will be
    able to pass pointers as arguments to functions with any level of indirection
    – that is, pointers to data, pointers to pointers to data, and so on. You will
    understand how and why to combine the `const` qualification with pointers – to
    the data, to the pointer itself, or to both. Lastly, you will understand how to
    declare and utilize generic pointers with no type – void pointers – and understand
    the situations in which they may prove useful. These skills will be necessary
    in order to move forward with the next chapters in the book successfully.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章结束时，您将了解如何使用`new()`从堆中分配内存，用于简单和复杂的数据类型，以及如何使用`delete()`标记内存以返回给堆管理设施。您将能够动态分配任何数据类型和任意维数的数组，并且了解释放内存的基本内存管理，以避免在应用程序中不再需要时发生内存泄漏。您将能够将指针作为参数传递给具有任何间接级别的函数
    - 即，指向数据的指针，指向指向数据的指针，依此类推。您将了解如何以及为什么将`const`限定符与指针结合使用 - 对数据、对指针本身，或对两者都是。最后，您将了解如何声明和使用没有类型的通用指针
    - void指针 - 并了解它们可能证明有用的情况。这些技能将是成功地继续阅读本书后续章节所必需的。
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Online code for full program examples can be found at the following GitHub
    URL: [https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter03](https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter03).
    Each full program example can be found in the GitHub repository under the appropriate
    chapter heading (subdirectory) in a file that corresponds to the chapter number,
    followed by a dash, followed by the example number in the chapter at hand. For
    example, the first full program in this chapter can be found in the subdirectory
    `Chapter03` in a file named `Chp3-Ex1.cpp` under the aforementioned GitHub directory.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 完整程序示例的在线代码可以在以下GitHub网址找到：[https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter03](https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter03)。每个完整程序示例都可以在GitHub存储库中找到，位于相应章节标题（子目录）下的文件中，文件名与所在章节编号相对应，后跟该章节中的示例编号。例如，本章的第一个完整程序可以在子目录`Chapter03`中的名为`Chp3-Ex1.cpp`的文件中找到，位于上述GitHub目录下。
- en: 'The CiA video for this chapter can be viewed at: [https://bit.ly/2OY41sn](https://bit.ly/2OY41sn)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的CiA视频可在以下网址观看：[https://bit.ly/2OY41sn](https://bit.ly/2OY41sn)
- en: Understanding pointer basics and memory allocation
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解指针基础知识和内存分配
- en: In this section, we will review pointer basics as well as introducing operators
    applicable to pointers, such as the address-of operator, the deference operator,
    and the operators `new()` and `delete()`. We will employ the address-of operator
    `&` to calculate the address of an existing variable, and conversely, we will
    apply the deference operator `*` to a pointer variable to go to the address contained
    within the variable. We will see examples of memory allocation on the heap, as
    well as how to mark that same memory for potential reuse by returning it to the
    free list when we are done with it.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将回顾指针的基础知识，并介绍适用于指针的运算符，如取地址运算符、解引用运算符以及`new()`和`delete()`运算符。我们将使用取地址运算符`&`来计算现有变量的地址，反之，我们将应用解引用运算符`*`到指针变量，以访问变量中包含的地址。我们将看到堆上的内存分配示例，以及如何在完成后将同一内存标记为可重新使用，将其返回到空闲列表。
- en: Using pointer variables allows our applications to have greater flexibility.
    At run time, we can determine the quantity of a certain data type we may desire
    (such as in a dynamically allocated array), organize data in data structures that
    facilitate sorting (such as in a linked list), or gain speed by passing an address
    of a large piece of data to a function (rather than passing a copy of the entire
    piece of data itself). Pointers have many uses, and we will see many examples
    throughout this chapter and throughout the course. Let's start at the beginning
    with pointer basics.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用指针变量使我们的应用程序具有更大的灵活性。在运行时，我们可以确定可能需要的某种数据类型的数量（例如在动态分配的数组中），在数据结构中组织数据以便进行排序（例如在链表中），或者通过将大块数据的地址传递给函数来提高速度（而不是传递整个数据块的副本）。指针有许多用途，我们将在本章和整个课程中看到许多示例。让我们从指针的基础知识开始。
- en: Revisiting pointer basics
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新审视指针的基础知识
- en: First and foremost, let's review the meaning of a pointer variable. A pointer
    variable is one that may contain an address, and at that address may be relevant
    data. It is typical to say that the pointer variable "*points*" to an address
    containing the relevant data. The value of the pointer variable itself is an address,
    not the data we are after. When we then go to that address, we find the data of
    interest. This is known as indirect addressing. To summarize, the content of a
    pointer variable is an address; if you then go to that address, you find the data.
    This is for a single level of indirection.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们回顾一下指针变量的含义。指针变量可能包含一个地址，而在该地址可能包含相关数据。通常说指针变量“指向”包含相关数据的地址。指针变量本身的值是一个地址，而不是我们要找的数据。当我们去到那个地址时，我们找到感兴趣的数据。这被称为间接寻址。总之，指针变量的内容是一个地址；如果你去到那个地址，你会找到数据。这是单级间接寻址。
- en: A pointer variable may point to the existing memory of a non-pointer variable,
    or it may point to memory that is dynamically allocated on the heap. The latter
    case is the most usual situation. Unless a pointer variable is properly initialized
    or assigned a value, the content of the pointer variable is meaningless and does
    not represent a usable address. A large mistake can be assuming that a pointer
    variable has been properly initialized when it may not have been. Let's look at
    some basic operators that are useful with pointers. We will start with the address-of
    `&` and the dereference operator `*`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 指针变量可以指向非指针变量的现有内存，也可以指向在堆上动态分配的内存。后一种情况是最常见的情况。除非指针变量被正确初始化或分配一个值，否则指针变量的内容是没有意义的，也不代表可用的地址。一个常见的错误是假设指针变量已经被正确初始化，而实际上可能并没有。让我们看一些与指针有用的基本运算符。我们将从取地址`&`和解引用运算符`*`开始。
- en: Using the address-of and dereference operators
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用取地址和解引用运算符
- en: The address-of operator `&` can be applied to a variable to determine its location
    in memory. The dereference operator `*` can be applied to a pointer variable to
    obtain the value of the data at the valid address contained within the pointer
    variable.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 取地址运算符`&`可以应用于变量，以确定其在内存中的位置。解引用运算符`*`可以应用于指针变量，以获取指针变量中包含的有效地址处的数据值。
- en: 'Let''s see a simple example:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个简单的例子：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Notice in the previous segment of code that we first declare and initialize
    variable `x` to `10`. Next, we declare `int *pointerToX;` to state that variable
    `pointerToX` may someday point to an integer. As of this declaration, this pointer
    variable is uninitialized, and hence does not contain a valid memory address.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在前面的代码片段中，我们首先声明并初始化变量`x`为`10`。接下来，我们声明`int *pointerToX;`来说明变量`pointerToX`可能有一天会指向一个整数。在这个声明时，这个指针变量是未初始化的，因此不包含有效的内存地址。
- en: Moving forward in the code to the line `pointerToX = &x;`, we assign the memory
    location of `x` using the address-of operator (`&`) as the value of `pointerToX`,
    which is waiting to be filled with a valid address of some integer. On the last
    line of this code fragment, we print out both `x` and `*pointerToX`. Here, we
    are using the dereference operator `*` with the variable `pointerToX`. The dereference
    operator tells us to go to the address contained in the variable `pointerToX`.
    At that address, we find the data value of integer `10`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码中继续到`pointerToX = &x;`这一行，我们使用取地址运算符（`&`）将`x`的内存位置分配给`pointerToX`，它正在等待用某个整数的有效地址填充。在这段代码片段的最后一行，我们打印出`x`和`*pointerToX`。在这里，我们使用变量`pointerToX`的解引用运算符`*`。解引用运算符告诉我们去到变量`pointerToX`中包含的地址。在那个地址，我们找到整数`10`的数据值。
- en: 'Here is the output this fragment would generate as a full program:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是这个片段作为完整程序将生成的输出：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Important note
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: For efficiency, C++ does not neatly initialize all memory with zeros when an
    application starts, nor does C++ ensure that memory is conveniently empty, without
    values, when paired with a variable. The memory simply has in it what was previously
    stored there; C++ memory is not considered *clean*. Because memory is not given
    to a programmer *clean* in C++, the contents of a newly declared pointer variable,
    unless properly initialized or assigned a value, should not be construed to contain
    a valid address.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了效率，C++ 在应用程序启动时不会将所有内存清零初始化，也不会确保内存与变量配对时方便地为空，没有值。内存中只是存储了先前存储在那里的内容；C++
    内存不被认为是 *干净* 的。因为在 C++ 中内存不是 *干净* 的，所以除非正确初始化或分配一个值，否则新声明的指针变量的内容不应被解释为包含有效地址。
- en: In the preceding example, we used the address-of operator `&` to calculate the
    address of an existing integer in memory, and we set our pointer variable to point
    to that memory. Instead, let's introduce the operators `new()` and `delete()`
    to allow us to utilize dynamically allocated heap memory for use with pointer
    variables.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们使用取地址操作符 `&` 来计算内存中现有整数的地址，并将我们的指针变量设置为指向该内存。相反，让我们引入 `new()` 和 `delete()`
    操作符，以便我们可以利用动态分配的堆内存来使用指针变量。
- en: Using the operators new() and delete()
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 `new()` 和 `delete()` 操作符
- en: The operator `new()` can be utilized to obtain dynamically allocated memory
    from the heap. A pointer variable may choose to point to memory that is dynamically
    allocated at run time, rather than to point to another variable's existing memory.
    This gives us flexibility as to when we want to allocate the memory, and how many
    pieces of such memory we may choose to have. The operator `delete()` can then
    be applied to a pointer variable to mark memory we no longer require, returning
    the memory to the heap management facility for later reuse in the application.
    It is important to understand that once we `delete()` a pointer variable, we should
    no longer use the address contained within that variable as a valid address.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`new()` 操作符可以用来从堆中获取动态分配的内存。指针变量可以选择指向在运行时动态分配的内存，而不是指向另一个变量的现有内存。这使我们可以灵活地决定何时分配内存，以及我们可以选择拥有多少块这样的内存。然后，`delete()`
    操作符可以应用于指针变量，标记我们不再需要的内存，并将内存返回给堆管理设施以供应用程序以后重用。重要的是要理解，一旦我们 `delete()` 一个指针变量，我们不应再使用该变量中包含的地址作为有效地址。'
- en: 'Let''s take a look at simple memory allocation and release using a basic data
    type:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个简单的数据类型的内存分配和释放：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the previous program segment, we first declare pointer variable `y` with
    `int *y;`. Here, `y` may someday contain the address of an integer. On the next
    line, we allocate memory from the heap large enough to accommodate an integer
    with `y = new int;`, storing that address in pointer variable `y`. Next, with
    `*y = 17;` we dereference `y` and store the value of `17` in the memory location
    pointed to by `y`. After printing out the value of `*y`, we then decide that we
    are done with the memory `y` points to and return it to the heap management facility
    by using the operator `delete()`. It is important to note that the variable `y`
    still contains the memory address it obtained with its call to `new()`, however,
    `y` should no longer use this relinquished memory.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的程序段中，我们首先声明指针变量 `y` 为 `int *y;`。在这里，`y` 可能会包含一个整数的地址。在下一行，我们从堆中分配了足够容纳一个整数的内存，使用
    `y = new int;` 将该地址存储在指针变量 `y` 中。接下来，使用 `*y = 17;` 我们对 `y` 进行解引用，并将值 `17` 存储在
    `y` 指向的内存位置。在打印出 `*y` 的值后，我们决定我们已经完成了 `y` 指向的内存，并通过使用 `delete()` 操作符将其返回给堆管理设施。重要的是要注意，变量
    `y` 仍然包含它通过调用 `new()` 获得的内存地址，但是，`y` 不应再使用这个放弃的内存。
- en: Important note
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: It is the programmer's responsibility to remember that once memory has been
    deallocated, you should never again dereference that pointer variable; please
    understand that that address may have been reissued to another variable through
    another call to `new()` elsewhere in the program.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员有责任记住，一旦内存被释放，就不应再次对该指针变量进行解引用；请理解该地址可能已经通过程序中的另一个 `new()` 调用重新分配给另一个变量。
- en: Now that we understand pointer basics with simple data types, let's move onward
    by allocating more complex data types, as well as understanding the notation necessary
    to utilize and access members of user defined data types.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了简单数据类型的指针基础知识，让我们继续通过分配更复杂的数据类型，并理解必要的符号来使用和访问用户定义的数据类型的成员。
- en: Creating and using pointers to user defined types
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建和使用指向用户定义类型的指针
- en: Next, let's examine how to declare pointers to user defined types, and how to
    allocate their associated memory on the heap. To dynamically allocate a user defined
    type, the pointer will first be declared of that type. The pointer then must either
    be initialized or assigned a valid memory address – the memory can either be that
    of an existing variable or newly allocated heap memory. Once the address for the
    appropriate memory has been placed within the pointer variable, the `->` operator
    may be utilized to access struct or class members. Alternatively, the `(*ptr).member`
    notation may be used to access struct or class members.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们来看看如何声明指向用户定义类型的指针，以及如何在堆上分配它们的关联内存。要动态分配用户定义类型，指针首先必须声明为该类型。然后，指针必须初始化或分配一个有效的内存地址
    - 内存可以是现有变量的内存，也可以是新分配的堆内存。一旦适当内存的地址被放入指针变量中，`->` 操作符可以用来访问结构体或类的成员。另外，`(*ptr).member`
    符号也可以用来访问结构体或类的成员。
- en: 'Let''s see a basic example:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个基本的例子：
- en: '[https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter03/Chp3-Ex1.cpp](https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter03/Chp3-Ex1.cpp)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter03/Chp3-Ex1.cpp](https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter03/Chp3-Ex1.cpp)'
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: First, in the aforementioned program, we have declared a user defined type of
    `collection`, with data members `x` and `y`. Next, we declare `item` as a pointer
    to that type with `collection *item;`. Then we allocate heap memory for `item`
    to point to, using the operator `new()`. Now, we assign values to the `x` and
    `y` members of `item`, respectively, using either the `->` operator or the `(*).member`
    access notation. In either case, the notation means to first dereference the pointer
    and then to choose the appropriate data member. It's pretty straightforward with
    the `(*).` notation – the parentheses show us that the pointer deference happens
    first, and then the choice of the member happens next with the `.` (member selection
    operator). The `->` shorthand notation indicates pointer deference followed by
    member selection. After we use `cout` with the insertion operator `<<` to print
    the appropriate values, we decide that we no longer need the memory associated
    with `item` and issue a `delete item;` to mark this segment of heap memory for
    return to the free list.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在上述程序中，我们声明了一个名为`collection`的用户定义类型，其中包含数据成员`x`和`y`。接下来，我们用`collection *item;`声明`item`作为指向该类型的指针。然后，我们为`item`分配堆内存，使用`new()`运算符指向。现在，我们分别为`item`的`x`和`y`成员赋值，使用`->`运算符或`(*).member`访问表示法。在任一情况下，表示法意味着首先取消引用指针，然后选择适当的数据成员。使用`(*).`表示法非常简单-括号告诉我们指针解除引用首先发生，然后使用`.`（成员选择运算符）选择成员。`->`简写表示指针解除引用后选择成员。在我们使用`cout`和插入运算符`<<`打印适当的值后，我们决定不再需要与`item`相关的内存，并发出`delete
    item;`来标记此段堆内存以返回到空闲列表。
- en: 'Let''s take a look at this example''s output:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下这个例子的输出：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Let's also take a look at the memory layout for this example. The memory address
    (9000) used is arbitrary – just an example address that may be generated by `new()`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也来看一下这个例子的内存布局。使用的内存地址（9000）是任意的-只是一个可能由`new()`生成的示例地址。
- en: '![Figure 3.1 – Memory model for Chp3-Ex1.cpp](img/B15702_03_01.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图3.1-Chp3-Ex1.cpp的内存模型](img/B15702_03_01.jpg)'
- en: Figure 3.1 – Memory model for Chp3-Ex1.cpp
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.1-Chp3-Ex1.cpp的内存模型
- en: Now that we know how to allocate and release memory for user defined types,
    let's move forward and dynamically allocate arrays of any data type.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何为用户定义的类型分配和释放内存，让我们继续动态分配任何数据类型的数组。
- en: Allocating and deallocating arrays at run time
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在运行时分配和释放数组
- en: Arrays may be dynamically allocated so that their size may be determined at
    run time. Dynamically allocated arrays may be of any type, including user defined
    types. Determining the size of an array at run time can be a space-saving advantage
    and gives us programming flexibility. Rather than allocating a fixed-sized array
    of the largest possible quantity needed (potentially wasting space), you can instead
    allocate the necessary size determined by various factors at run time. You have
    the additional flexibility to delete and reallocate an array should the need arise
    to change an array's size. Arrays of any number of dimensions can be dynamically
    allocated.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 数组可以动态分配，以便在运行时确定其大小。动态分配的数组可以是任何类型，包括用户定义的类型。在运行时确定数组大小可以节省空间，并为我们提供编程灵活性。您可以根据运行时的各种因素分配所需的大小，而不是分配可能浪费空间的最大可能数量的固定大小数组。您还可以在需要更改数组大小时删除和重新分配数组。可以动态分配任意维数的数组。
- en: In this section, we will examine how to dynamically allocate arrays of both
    basic and user defined data types, and of single and multiple dimensions. Let's
    get started.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将研究如何动态分配基本数据类型和用户定义数据类型的数组，以及单维和多维数组。让我们开始吧。
- en: Dynamically allocating single-dimension arrays
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动态分配单维数组
- en: Single-dimension arrays may be dynamically allocated so that their size may
    be determined at run time. We will use a pointer to represent each array and will
    allocate the required memory with the operator `new()`. Once the array is allocated,
    standard array notation can be used to access each array element.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 单维数组可以动态分配，以便在运行时确定其大小。我们将使用指针来表示每个数组，并将使用`new()`运算符分配所需的内存。一旦数组被分配，可以使用标准数组表示法来访问每个数组元素。
- en: 'Let''s take a look at a simple example. We''ll break it into two segments,
    however, the full program example can be found using the link below:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个简单的例子。我们将把它分成两个部分，但是完整的程序示例可以在下面的链接中找到：
- en: '[https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter03/Chp3-Ex2.cpp](https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter03/Chp3-Ex2.cpp)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter03/Chp3-Ex2.cpp](https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter03/Chp3-Ex2.cpp)'
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the first part of this program, we first declare a user defined type, `collection`,
    using a struct. Next, we declare an integer variable to hold the number of elements
    we would like to prompt the user to enter to select as the size for our two arrays.
    We also declare a pointer to an integer with `int *intArray;` and a pointer to
    a `collection` using `collection *collectionArray;`. These declarations state
    that these pointers may one day each, respectively, point to one or more integers,
    or one or more objects of type `collection`. These variables, once allocated,
    will comprise our two arrays.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在程序的第一部分中，我们首先声明了一个使用结构体的用户定义类型`collection`。接下来，我们声明一个整数变量来保存我们希望提示用户输入以选择作为两个数组大小的元素数量。我们还声明一个指向整数的指针`int
    *intArray;`和一个指向`collection`的指针`collection *collectionArray;`。这些声明表明这些指针有一天可能分别指向一个或多个整数，或一个或多个`collection`类型的对象。一旦分配，这些变量将组成我们的两个数组。
- en: 'After prompting the user to enter the number of elements desired using `cin`
    and the extraction operator `>>`, we dynamically allocate both an array of integers
    of that size and an array of collections of that size. We use the operator `new()`
    in both cases: `intArray = new int[numElements];` and `collectionArray = new collection[numElements];`.
    The bracketed quantity of `numElements` indicates that the respective chunks of
    memory requested for each data type will be large enough to accommodate that many
    sequential elements of the relevant data type. That is, `intArray` will have memory
    allocated to accommodate `numElements` multiplied by the size needed for an integer.
    Note that an object''s data type is known because the data type of what will be
    pointed to is included in the pointer declaration itself. The appropriate amount
    of memory for `collectionArray` will be similarly provided for with its respective
    call to the operator `new()`.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 提示用户使用`cin`和提取运算符`>>`输入所需元素的数量后，我们动态分配了一个整数数组和一个相同大小的集合数组。我们在两种情况下都使用了`new()`运算符：`intArray
    = new int[numElements];`和`collectionArray = new collection[numElements];`。括号中的`numElements`表示为每种数据类型请求的内存块将足够大，以容纳相应数据类型的这么多个连续元素。也就是说，`intArray`将分配内存以容纳`numElements`乘以整数所需的大小。注意，对象的数据类型是已知的，因为指针声明本身包含了将要指向的数据类型。对于`collectionArray`，将以类似的方式提供适当数量的内存。
- en: 'Let''s continue by examining the remaining code in this example program:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续检查这个示例程序中的剩余代码：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Next, as we continue this example with the `for` loop, notice that we are using
    a typical array notation of `[]` to access each element of the two arrays, even
    though the arrays have been dynamically allocated. Because `collectionArray` is
    a dynamically allocated array of user defined types, we must use add the `.` notation
    to access individual data members within each array element. Though using standard
    array notation makes accessing dynamic arrays quite simple, you may alternatively
    use pointer notation to access the memory.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，当我们继续使用`for`循环来进行这个示例时，请注意，我们使用了典型的`[]`数组表示法来访问两个数组的每个元素，即使这些数组已经被动态分配。因为`collectionArray`是一个动态分配的用户定义类型数组，我们必须使用`.`符号来访问每个数组元素内的单个数据成员。虽然使用标准数组表示法使得访问动态数组非常简单，但您也可以使用指针表示法来访问内存。
- en: Within the loop, notice that we incrementally print both the elements of `intArray`
    and the `y` member of `collectionArray` using pointer notation. In the expression
    `*(intArray +i)`, the identifier `intArray` represents the starting address of
    the array. By adding `i` offsets to this address, you are now at the address of
    the `i`-th element in this array. By dereferencing this composite address with
    `*`, you will now go to the proper address to retrieve the relevant integer data,
    which is then printed using `cout` and the insertion operator `<<`. Likewise,
    with `(*(collectionArray + i)).y`, we first add `i` to the starting address of
    `collectionArray`, then using `()`, we dereference that address with `*`. Since
    this is a user defined type, we must then use `.` to select the appropriate data
    member `y`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在循环中，请注意我们逐渐打印`intArray`的元素和`collectionArray`的`y`成员，使用指针表示法。在表达式`*(intArray
    +i)`中，标识符`intArray`表示数组的起始地址。通过向该地址添加`i`偏移量，现在您位于该数组中第`i`个元素的地址。通过使用`*`对这个复合地址进行解引用，您现在将转到正确的地址以检索相关的整数数据，然后使用`cout`和插入运算符`<<`进行打印。同样，在`(*(collectionArray
    + i)).y`中，我们首先将`i`添加到`collectionArray`的起始地址，然后使用`()`对该地址进行解引用。由于这是一个用户定义的类型，我们必须使用`.`来选择适当的数据成员`y`。
- en: Lastly, in this example, we demonstrate how to deallocate memory that we no
    longer need using `delete()`. A simple statement of `delete intArray;` will suffice
    for the dynamically allocated array of standard types, whereas a more complex
    statement of `delete [] collectionArray;` is necessary for proper deletion of
    the array of user-defined types. In both cases, the memory associated with each
    dynamically allocated array will be returned to the free list, and can then be
    reused when heap memory is allocated with subsequent calls to the operator `new()`.
    It is crucial to remember not to deference a pointer variable once its memory
    has been marked for deletion. Though that address will remain in the pointer variable
    until you assign the pointer a new address (or null pointer), once memory is marked
    for deletion, the memory in question might have been already reused by a subsequent
    call to `new()` elsewhere in the program. This is one of many ways you must be
    diligent when using pointers in C++.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在这个示例中，我们演示了如何使用`delete()`释放我们不再需要的内存。对于动态分配的标准类型数组，简单的`delete intArray;`语句就足够了，而对于用户定义类型的数组，需要更复杂的`delete
    [] collectionArray;`语句才能正确删除。在两种情况下，与每个动态分配的数组相关联的内存将返回到空闲列表中，并且可以在后续调用`new()`运算符分配堆内存时重新使用。在指针变量的内存被标记为删除后，记住不要对指针变量进行解引用是至关重要的。尽管该地址将保留在指针变量中，直到您为指针分配新地址（或空指针），但一旦内存被标记为删除，该内存可能已经被程序中其他地方对`new()`的后续调用重用。这是在C++中使用指针时必须要谨慎的许多方式之一。
- en: 'The output to accompany the full program example is as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 完整程序示例的输出如下：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Let's additionally take a look at the memory layout for this example. The memory
    addresses (8500 and 9500) used are arbitrary – they are example addresses on the
    heap that may be generated by `new()`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进一步看一下这个示例的内存布局。使用的内存地址（8500和9500）是任意的 - 它们是堆上可能由`new()`生成的示例地址。
- en: '![Figure 3.2 – Memory model for Chp3-Ex2.cpp](img/B15702_03_02.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图3.2 - Chp3-Ex2.cpp的内存模型](img/B15702_03_02.png)'
- en: Figure 3.2 – Memory model for Chp3-Ex2.cpp
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.2 - Chp3-Ex2.cpp的内存模型
- en: Next, let's move forward with our discussion on dynamically allocated arrays
    by allocating arrays of multiple dimensions.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们继续讨论通过分配多维数组来动态分配数组。
- en: 'Dynamically allocating 2-D arrays: arrays of pointers'
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动态分配2-D数组：指针数组
- en: Two or more dimensioned arrays may also be dynamically allocated. For a 2-D
    array, the column dimension may be dynamically allocated and the row dimension
    may remain fixed, or both dimensions may be dynamically allocated. Allocating
    one or more dimensions dynamically allows the programmer to account for run time
    decisions regarding the array size.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 二维或更高维的数组也可以动态分配。对于2-D数组，列维度可以动态分配，而行维度可以保持固定，或者两个维度都可以动态分配。动态分配一个或多个维度允许程序员考虑数组大小的运行时决策。
- en: Let's first consider the case where we have a fixed number of rows, and a variable
    amount of entries in each of those rows (which would be the column dimension).
    For simplicity, we will assume that the number of entries in each row is the same
    from row to row, but it need not be. We can model a 2-D array with a fixed number
    of rows and a run time determined amount of entries in each of those rows (the
    column dimension) using an array of pointers.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 首先考虑一种情况，即我们有固定数量的行，以及每行中可变数量的条目（即列维度）。为简单起见，我们假设每行中的条目数量从一行到另一行是相同的，但实际上并非如此。我们可以使用指针数组来模拟具有固定行数和运行时确定的每行中的条目数量（列维度）的二维数组。
- en: Let's consider an example to illustrate a 2-D array where the column dimension
    is dynamically allocated.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个例子来说明动态分配列维度的二维数组。
- en: '[https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter03/Chp3-Ex3.cpp](https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter03/Chp3-Ex3.cpp)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter03/Chp3-Ex3.cpp](https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter03/Chp3-Ex3.cpp)'
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this example, notice that we initially declare an array of pointers to floats
    using `float *TwoDimArray[NUMROWS];`. Sometimes, it is helpful to read pointer
    declarations right to left; that is, we have an array, `NUMROWS`, which contains
    pointers to floating-point numbers. More specifically, we have a fixed-sized array
    of pointers where each pointer entry can point to one or more contiguous floating-point
    numbers. The number of entries pointed to in each row comprise the column dimension.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，请注意我们最初使用`float *TwoDimArray[NUMROWS];`声明了一个指向浮点数的指针数组。有时，从右向左阅读指针声明是有帮助的；也就是说，我们有一个包含指向浮点数的指针的数组`NUMROWS`。更具体地说，我们有一个固定大小的指针数组，其中每个指针条目可以指向一个或多个连续的浮点数。每行指向的条目数量构成了列维度。
- en: Next, we prompt the user for the number of column entries. Here, we are assuming
    that each row will have the same number of entries in it (to make the column dimension),
    however, it is possible that each row could have a different total number of entries.
    By assuming each row will have a uniform number of entries, we have a straightforward
    loop using `i` to allocate the column quantity for each row using `TwoDimArray[i]
    = new float [numColumns];`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们提示用户输入列条目的数量。在这里，我们假设每行将有相同数量的条目（以形成列维度），但是可能每行的总条目数量是不同的。通过假设每行将有统一数量的条目，我们可以使用`i`来简单地循环分配每行的列数量，使用`TwoDimArray[i]
    = new float [numColumns];`。
- en: In the nested loop that uses `j` as an index, we simply load values for each
    column entry of the row specified by `i` in the outer loop. The arbitrary assignment
    of `TwoDimArray[i][j] = i + j + .05;` loads an interesting value into each element.
    In the nested loop indexed on `j`, we also print out each column entry for row
    `i`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`j`作为索引的嵌套循环中，我们简单地为外部循环指定的行的每个列条目加载值。任意赋值`TwoDimArray[i][j] = i + j + .05;`将一个有趣的值加载到每个元素中。在以`j`为索引的嵌套循环中，我们还打印出每行`i`的每个列条目。
- en: Lastly, the program illustrates how to deallocate the dynamically allocated
    memory. Since the memory was allocated in a loop over a fixed number of rows –
    one memory allocation to gather memory to comprise each row's column entries –
    the deallocation will work similarly. For each of the rows, we utilize the statement
    `delete TwoDimArray[i];`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，该程序说明了如何释放动态分配的内存。由于内存是在固定数量的行上循环分配的 - 为了收集组成每行列条目的内存而进行的一次内存分配 - 因此释放工作方式类似。对于每一行，我们使用语句`delete
    TwoDimArray[i];`。
- en: 'The output for the example is as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 示例的输出如下：
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Next, let's take a look at the memory layout for this example. As in previous
    memory diagrams, the memory addresses used are arbitrary – they are example addresses
    on the heap as may be generated by `new()`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们来看一下这个例子的内存布局。与以前的内存图一样，所使用的内存地址是任意的 - 它们是堆上的示例地址，可能由`new()`生成。
- en: '![Figure 3.3 – Memory model for Chp3-Ex3.cpp](img/B15702_03_03.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图3.3 - Chp3-Ex3.cpp的内存模型](img/B15702_03_03.jpg)'
- en: Figure 3.3 – Memory model for Chp3-Ex3.cpp
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.3 - Chp3-Ex3.cpp的内存模型
- en: Now that we have seen how to utilize an array of pointers to model a 2-D array,
    let's move onward to see how we can model a 2-D array using a pointer to a pointer
    so that we may choose both dimensions at run time.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到如何利用指针数组来模拟二维数组，让我们继续看看如何使用指向指针的指针来模拟二维数组，以便我们可以在运行时选择两个维度。
- en: 'Dynamically allocating 2-D arrays: pointers to pointers'
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动态分配2-D数组：指向指针的指针
- en: Dynamically allocating both the row and column dimensions for an array can add
    necessary run time flexibility to a program. To achieve this ultimate flexibility,
    a 2-D array can be modeled using a pointer to a pointer of the desired data type.
    Initially, the dimension representing the number of rows will be allocated. Next,
    for each row, the number of elements in each row will be allocated. As with the
    last example using an array of pointers, the number of elements in each row (the
    column entries) need not be uniform in size across rows. However, to accurately
    model the concept of a 2-D array, it is assumed that the column size will be allocated
    uniformly from row to row.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为数组动态分配行和列维度可以为程序添加必要的运行时灵活性。为了实现这种最终的灵活性，可以使用所需数据类型的指针来模拟一个2-D数组。最初，表示行数的维度将被分配。接下来，对于每一行，将分配每行中的元素数量。与上一个示例中使用指针数组一样，每行中的元素数量（列条目）不需要在行之间的大小上是一致的。然而，为了准确地模拟2-D数组的概念，假定列的大小将从一行到另一行均匀分配。
- en: Let's consider an example to illustrate a 2-D array where both the row and column
    dimensions are dynamically allocated.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个例子来说明一个动态分配了行和列维度的2-D数组。
- en: '[https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter03/Chp3-Ex4.cpp](https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter03/Chp3-Ex4.cpp)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter03/Chp3-Ex4.cpp](https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter03/Chp3-Ex4.cpp)'
- en: '[PRE10]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In this example, notice that we initially declare a pointer to a pointer of
    type `float` using `float **TwoDimArray;`. Reading this declaration right to left,
    we have `TwoDimArray` as a pointer to a pointer to `float`. More specifically,
    we understand `TwoDimArray` will contain the address of one or more contiguous
    pointers, each of which may point to one or more contiguous floating-point numbers.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，注意我们最初声明了一个指向`float`类型的指针的指针，使用`float **TwoDimArray;`。从右向左阅读这个声明，我们有`TwoDimArray`是指向`float`的指针的指针。更具体地说，我们理解`TwoDimArray`将包含一个或多个连续指针的地址，每个指针可能指向一个或多个连续的浮点数。
- en: Now, we prompt the user for the number of row entries. We follow this input
    with the allocation to a set of `float` pointers, `TwoDimArray = new float * [numRows];`.
    This allocation creates `numRows` quantity of `float` pointers.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们提示用户输入行条目的数量。我们在这个输入之后分配给一组`float`指针，`TwoDimArray = new float * [numRows];`。这个分配创建了`numRows`数量的`float`指针。
- en: Just as in the previous example, we prompt the user for how many columns in
    each row we would like to have. Just as before, in the outer loop indexed on `i`,
    we allocate the column entries for each row. In the nested loop indexed on `j`,
    we again assign values to our array entries and print them just as before.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在上一个示例中一样，我们提示用户希望每行有多少列。就像以前一样，在以`i`为索引的外部循环中，我们为每行分配列条目。在以`j`为索引的嵌套循环中，我们再次为数组条目赋值并打印它们，就像以前一样。
- en: Lastly, the program continues with the memory deallocation. Just as before,
    the column entries for each row are deallocated within a loop. Additionally, however,
    we need to deallocate the dynamically allocated number of row entries. We do this
    with `delete TwoDimArray;`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，程序继续进行内存释放。与之前一样，每行的列条目在循环内被释放。然而，此外，我们需要释放动态分配的行条目数量。我们使用`delete TwoDimArray;`来做到这一点。
- en: 'The output for this program is slightly more flexible, as we can enter at run
    time the number of both the desired rows and columns:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序的输出稍微灵活一些，因为我们可以在运行时输入所需行和列的数量：
- en: '[PRE11]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Let's again take a look at the memory model for this program. As a reminder,
    just as in previous memory diagrams, the memory addresses used are arbitrary –
    they are example addresses on the heap as may be generated by `new()`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次看一下这个程序的内存模型。作为提醒，就像以前的内存图一样，使用的内存地址是任意的 - 它们是堆上可能由`new()`生成的示例地址。
- en: '![Figure 3.4 – Memory model for Chp3-Ex4.cpp](img/B15702_03_04.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图3.4 – Chp3-Ex4.cpp的内存模型](img/B15702_03_04.jpg)'
- en: Figure 3.4 – Memory model for Chp3-Ex4.cpp
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.4 – Chp3-Ex4.cpp的内存模型
- en: Now that we have seen how to utilize pointers to pointers to model a 2-D array,
    let's move onward to see how we may model arrays of any number of dimensions using
    pointers to pointers to pointers, and so on. In C++, you can model any dimensionality
    of a dynamically allocated array, so long as you can imagine it!
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了如何利用指向指针来模拟2-D数组，让我们继续看看如何使用指向指针的指针来模拟任意维度的数组，等等。在C++中，只要你能想象得到，就可以模拟任意维度的动态分配数组！
- en: 'Dynamically allocating N-D arrays: pointers to pointers to pointers'
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动态分配N-D数组：指向指针的指针
- en: In C++, you can model any dimensionality of a dynamically allocated array. You
    need only be able to imagine it, declare the appropriate levels of pointers, and
    make the required levels of memory allocation (and eventual deallocation).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在C++中，你可以模拟任意维度的动态分配数组。你只需要能够想象它，声明适当级别的指针，并进行所需级别的内存分配（和最终的释放）。
- en: 'Let''s take a look at the pattern you will need to follow:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下你需要遵循的模式：
- en: '[https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter03/Chp3-Ex5.cpp](https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter03/Chp3-Ex5.cpp)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter03/Chp3-Ex5.cpp](https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter03/Chp3-Ex5.cpp)'
- en: '[PRE12]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In this example, notice that we use three levels of indirection to specify the
    variable to represent the 3-D array `int ***ThreeDimArray;`. We subsequently allocate
    the required memory for each level of indirection. The first allocation is `ThreeDimArray
    = new int ** [dim1];`, which allocates dimension 1's set of pointers to pointers.
    Next, in a loop iterating over `i`, and for each element in dimension 1, we allocate
    `ThreeDimArray[i] = new int * [dim2];` to allocate the pointers to integers for
    the second dimension of the array. And in a nested loop iterating over `j`, and
    for each element in dimension 2, we allocate `ThreeDimArray[i][j] = new int [dim3];`
    to allocate the integers themselves in a quantity specified by `dim3`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，请注意我们使用三级间接来指定表示3-D数组的变量`int ***ThreeDimArray;`。然后我们为每个间接分配所需的内存。第一个分配是`ThreeDimArray
    = new int ** [dim1];`，它分配了维度1的指针到指针。接下来，在一个循环中迭代`i`，对于维度1中的每个元素，我们分配`ThreeDimArray[i]
    = new int * [dim2];`来为数组的第二维度分配整数指针。在一个嵌套循环中迭代`j`，对于第二维度中的每个元素，我们分配`ThreeDimArray[i][j]
    = new int [dim3];`来分配由`dim3`指定的整数本身的数量。
- en: As in the last two examples, we initialize the array elements in the inner loops
    and print their values. At this point, you will undoubtedly notice the similarities
    between this program and its predecessor. A pattern for the allocation is emerging.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 与前两个例子一样，我们在内部循环中初始化数组元素并打印它们的值。此时，您无疑会注意到这个程序与其前身之间的相似之处。一个分配的模式正在出现。
- en: Lastly, we will deallocate the three levels of memory in a manner similar –
    yet in reverse – to the levels of allocation. We use a nested loop iterating over
    `j` to release the memory of the innermost level, followed by the memory release
    in the outer loop, which iterates over `i`. Finally, we relinquish the memory
    for the initial dimension with a simple call to `delete ThreeDimArray;`.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将以与分配级别相反的方式释放三个级别的内存。我们使用一个嵌套循环来迭代`j`来释放最内层级别的内存，然后在外部循环中迭代`i`来释放内存。最后，我们通过简单调用`delete
    ThreeDimArray;`来放弃初始维度的内存。
- en: 'The output for this example is as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子的输出如下：
- en: '[PRE13]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now that we have seen how to model a 3-D array using pointers to pointers to
    pointers, a pattern has emerged to show us how to declare the required level and
    number of pointers to model an N-D array. We can also see the pattern for the
    necessary allocations. Multi-dimensional arrays can become quite large, especially
    if you were forced to model them with the largest potentially necessary fixed-sized
    array. The beauty of modeling with pointers to pointers (to pointers and so on)
    for each level of a necessary multi-dimensional array, is that you can allocate
    exactly a size that may be determined at run time. To make usage easy, array notation
    using `[]` can be used as an alternative to pointer notation to access the elements
    in the dynamically allocated array. C++ has a lot of flexibility stemming from
    pointers. Dynamically allocated arrays demonstrate one such flexibility.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了如何使用指针来模拟3-D数组，一个模式已经出现，向我们展示了如何声明所需级别和数量的指针来模拟N-D数组。我们还可以看到必要分配的模式。多维数组可能会变得非常大，特别是如果你被迫使用最大潜在必要的固定大小数组来模拟它们。使用指针来模拟必要的多维数组的每个级别，可以精确地分配可能在运行时确定的大小。为了方便使用，可以使用`[]`的数组表示法作为指针表示法的替代，以访问动态分配的数组中的元素。C++具有许多源自指针的灵活性。动态分配的数组展示了这种灵活性之一。
- en: Let's now move forward with our understanding of pointers and consider their
    usage in functions.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们继续深入了解指针，并考虑它们在函数中的使用。
- en: Using pointers with functions
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在函数中使用指针
- en: Functions in C++ will undoubtedly take arguments. We have seen many examples
    in the previous chapters illustrating function prototypes and function definitions.
    Now, let's augment our understanding of functions by passing pointers as arguments
    to functions, and using pointers as return values from a function.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: C++中的函数无疑会带有参数。我们在前几章中看到了许多例子，说明了函数原型和函数定义。现在，让我们通过将指针作为参数传递给函数，并将指针用作函数的返回值来增进我们对函数的理解。
- en: Passing pointers as arguments to functions
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将指针作为函数参数传递
- en: Arguments passed from actual to formal parameters in a function call are by
    default copied on the stack. In order to modify the contents of a variable as
    an argument to a function, a pointer to that argument must instead be used as
    a function parameter.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数调用中，从实际参数到形式参数传递的参数默认上是在堆栈上复制的。为了修改作为函数参数的变量的内容，必须使用该参数的指针作为函数参数。
- en: Any time an actual parameter is passed to a function in C++, a copy of something
    is made and passed on the stack to that function. For example, if an integer is
    passed as an actual parameter to a function, a copy of that integer is made and
    then passed on the stack to the function to be received as the formal parameter.
    Changing the formal parameter in the scope of the function would only change the
    copy of the data that was passed into the function.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在C++中，任何时候实际参数被传递给函数，都会在堆栈上复制一份内容并传递给该函数。例如，如果将整数作为实际参数传递给函数，将复制该整数并将其传递到堆栈上，以便在函数中接收为形式参数。在函数范围内更改形式参数只会更改传递到函数中的数据的副本。
- en: Should we instead require the ability to modify a function's parameters, it
    is then necessary that we pass a pointer to the desired data as a parameter of
    the function. In C++, passing a pointer as an actual parameter copies this address
    on the stack and the copy of the address is received as the formal parameter in
    the function. However, using the copy of the address, we can still go to that
    address (by dereferencing that pointer) to access the desired data and make changes
    to the desired data.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要修改函数的参数，那么有必要将所需数据的指针作为函数的参数传递。在C++中，将指针作为实际参数传递会在堆栈上复制该地址，并且该地址的副本将作为形式参数接收到函数中。然而，使用地址的副本，我们仍然可以访问所需的数据并对其进行更改。
- en: To reiterate, something is always copied on the stack when you pass a parameter
    in C++. If you pass a non-pointer variable, you get a copy of that data passed
    on the stack to the function. Changes made to that data in the scope of that function
    are local changes only and do not persist when the function returns. The local
    copy is simply popped off the stack at the conclusion of the function. However,
    if you pass a pointer to a function, though the address stored in the pointer
    variable is still copied on the stack and passed to the function, you can still
    dereference the copy of the pointer to access the real data at the desired address.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 重申一下，在C++中，当你传递参数时，总是在堆栈上复制某些东西。如果你传递一个非指针变量，你会得到一个在堆栈上传递给函数的数据副本。在该函数的范围内对该数据所做的更改只是局部的，当函数返回时不会持续。局部副本在函数结束时会被简单地从堆栈中弹出。然而，如果你将指针传递给函数，尽管指针变量中存储的地址仍然被复制到堆栈上并传递给函数，你仍然可以解引用指针的副本来访问所需地址处的真实数据。
- en: You always need to be one step back from that which you want to modify. If you
    want to change a standard data type, pass a pointer to that type. If you want
    to change the value of the pointer itself (the address), you must pass a pointer
    to that pointer as a parameter to the function. Remember, a copy of something
    is passed to the function on the stack. You cannot change that copy beyond the
    scope of the function. Pass the address of that which you want to change – you
    are still passing a copy of that address but using it will get you to the real
    data.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 你总是需要比你想修改的东西多一步。如果你想改变一个标准数据类型，传递一个指向该类型的指针。如果你想改变指针本身（地址）的值，你必须将指向该指针的指针作为函数的参数传递。记住，在堆栈上将某物的副本传递给函数。你不能在函数的范围之外改变那个副本。传递你想要改变的地址
    - 你仍然传递那个地址的副本，但使用它将让你访问真正的数据。
- en: Let's take a few minutes to understand an example illustrating passing pointers
    as arguments to functions. Here we will begin by examining two functions that
    contribute to the following full program example.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们花几分钟来理解一个例子，说明将指针作为函数参数传递。在这里，我们将首先检查两个函数，它们构成以下完整程序示例的一部分。
- en: '[https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter03/Chp3-Ex6.cpp](https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter03/Chp3-Ex6.cpp)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter03/Chp3-Ex6.cpp](https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter03/Chp3-Ex6.cpp)'
- en: '[PRE14]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Examining the functions above, notice that `TryToAddOne()` takes an `int` as
    a formal parameter, whilst `AddOne()` takes an `int *` as a formal parameter.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的函数中，请注意`TryToAddOne()`以`int`作为形式参数，而`AddOne()`以`int *`作为形式参数。
- en: In `TryToAddOne()`, an integer passed to the function is merely a copy of the
    actual parameter sent to the function. This parameter is referred to as `arg`
    in the formal parameter list. Incrementing the value of `arg` by one in the body
    of the function is a local change only within `TryToAddOne()`. Once the function
    completes, the formal parameter, `arg`, is popped off the stack and the actual
    parameter in the call to this function will not have been modified.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在`TryToAddOne()`中，传递给函数的整数只是实际参数的副本。这个参数在形式参数列表中被称为`arg`。在函数体中将`arg`的值增加一是`TryToAddOne()`内部的局部改变。一旦函数完成，形式参数`arg`将从堆栈中弹出，并且调用该函数时的实际参数将不会被修改。
- en: However, notice that `AddOne()` takes an `int *` as a formal parameter. The
    address of the actual integer parameter will be copied on the stack and received
    as the formal parameter, `arg`. Using the copy of that address, we deference the
    pointer `arg` using `*`, then increment the integer value at that address using
    `++` in the line of code `(*arg)++;`. When this function completes, the actual
    parameter will have been modified because we have passed a copy of the pointer
    to that integer, rather than a copy of the integer itself.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，请注意`AddOne()`以`int *`作为形式参数。实际整数参数的地址将被复制到堆栈上，并作为形式参数`arg`接收。使用该地址的副本，我们使用`*`来解引用指针`arg`，然后在代码行`(*arg)++;`中递增该地址处的整数值。当这个函数完成时，实际参数将被修改，因为我们传递了指向该整数的指针的副本，而不是整数本身的副本。
- en: 'Let''s examine the remainder of this program:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查这个程序的其余部分：
- en: '[PRE15]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Notice the function prototypes at the top of this program segment. They will
    match the function definitions in the previous segment of code. Now, in the `main()`
    function, we declare and initialize `int x = 10;` and declare a pointer: `int
    *y;`. We allocate the memory for `y` using `new()` and then assign a value by
    dereferencing the pointer with `*y = 15;`. We print out the respective values
    of `x` and `*y` as a baseline.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 注意程序段顶部的函数原型。它们将与前一段代码中的函数定义相匹配。现在，在`main()`函数中，我们声明并初始化`int x = 10;`，并声明一个指针：`int
    *y;`。我们使用`new()`为`y`分配内存，然后通过解引用指针`*y = 15;`来赋值。我们打印出`x`和`*y`的各自值作为基线。
- en: Next, we call `TryToAddOne(x);` followed by `TryToAddOne(*y);`. In both cases,
    we are passing integers as actual parameters to the function. Variable `x` is
    declared to be an integer and `*y` refers to the integer pointed to by `y`. Neither
    of these function calls will result in the actual parameter being changed, which
    we can verify when their respective values are next printed using `cout` and the
    insertion operator `<<`.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们调用`TryToAddOne(x);`，然后是`TryToAddOne(*y);`。在这两种情况下，我们都将整数作为实际参数传递给函数。变量`x`被声明为整数，`*y`指的是`y`指向的整数。这两个函数调用都不会导致实际参数被更改，我们可以通过使用`cout`和插入运算符`<<`打印它们的值来验证。
- en: Finally, we call `AddOne(&x);` followed by `AddOne(y);`. In both cases, we are
    passing a copy of an address as the actual parameter to the function. Of course,
    `&x` is the address of variable `x`, so this works. Likewise, `y` itself is an
    address – it is declared as a pointer variable. Recall, inside the `AddOne()`
    function, the formal parameter is first dereferenced and then incremented in the
    body of the function `(*arg)++;`. We can use a copy of a pointer to access actual
    data.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们调用`AddOne(&x);`，然后是`AddOne(y);`。在这两种情况下，我们都将一个地址的副本作为实际参数传递给函数。当然，`&x`是变量`x`的地址，所以这样可以。同样，`y`本身就是一个地址
    - 它被声明为指针变量。回想一下，在`AddOne()`函数内部，形式参数首先被解引用，然后在函数体中递增`(*arg)++;`。我们可以使用指针的副本来访问实际数据。
- en: 'Here is the output for the full program example:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是完整程序示例的输出：
- en: '[PRE16]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Next, let's add to our discussion of using pointers with functions by using
    pointers as return values from functions.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们通过使用指针作为函数的返回值来扩展我们对使用指针与函数的讨论。
- en: Using pointers as return values from functions
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用指针作为函数的返回值
- en: Functions may return pointers to data via their return statements. When returning
    a pointer via the return statement of a function, be sure that the memory that
    is pointed to will persist after the function call is completed. Do not return
    a pointer to stack memory that is local to the function. That is, do not return
    a pointer to local variables defined on the stack within the function. However,
    returning a pointer to memory allocated using `new()` within the function is sometimes
    acceptable. As the allocated memory will be on the heap, it will exist past the
    function call.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 函数可以通过它们的返回语句返回指向数据的指针。当通过函数的返回语句返回指针时，确保指向的内存在函数调用完成后仍然存在。不要返回指向函数内部局部栈内存的指针。也就是说，不要返回在函数内部定义的局部变量的指针。然而，有时返回指向在函数内部使用`new()`分配的内存的指针是可以接受的。由于分配的内存将位于堆上，它将存在于函数调用之后。
- en: 'Let''s see an example to illustrate these concepts:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子来说明这些概念：
- en: '[https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter03/Chp3-Ex7.cpp](https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter03/Chp3-Ex7.cpp)'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter03/Chp3-Ex7.cpp](https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter03/Chp3-Ex7.cpp)'
- en: '[PRE17]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In this example, `const int MAX = 20;` is defined and then `char *createName();`
    is prototyped, indicating that this function takes no arguments, yet returns a
    pointer to one or more characters.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`const int MAX = 20;`被定义，然后`char *createName();`被原型化，表明这个函数不带参数，但返回一个或多个字符的指针。
- en: 'In the `main()` function, a local variable: `char *name;` is defined but not
    initialized. Next, `createName()` is called and its return value is used to assign
    a value to `name`. Notice both `name` and the function''s return type are of type
    `char *`.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在`main()`函数中，定义了一个局部变量：`char *name;`，但没有初始化。接下来，调用`createName()`，并将其返回值用于赋值给`name`。注意`name`和函数的返回类型都是`char
    *`类型。
- en: In the call to `createName()`, notice that a local variable, `char *temp = new
    char[MAX];`, is both defined and allocated to point to a fixed amount of memory
    on the heap using the operator `new()`. The user is then prompted to enter a name
    and that name is stored in `temp`. The local variable `temp` is then returned
    from `createName()`.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用`createName()`时，注意到一个局部变量`char *temp = new char[MAX];`被定义并分配到堆上的固定内存量，使用`new()`操作符。然后提示用户输入一个名称，并将该名称存储在`temp`中。然后从`createName()`返回局部变量`temp`。
- en: In `createName()`, it is important that the memory for `temp` be comprised of
    heap memory so that it will persist beyond the scope of this function. Here, a
    copy of the address stored in `temp` will be copied onto the stack in the area
    reserved for a return value from the function. Fortunately, that address refers
    to heap memory. The assignment `name = createName();` in `main()` will capture
    this address and copy it to be stored into the `name` variable, which is local
    to `main()`. Since the memory allocated in `createName()` is on the heap, this
    memory will exist once the function completes.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在`createName()`中，很重要的是`temp`的内存由堆内存组成，以便它在函数的范围之外存在。在这里，存储在`temp`中的地址的副本将被复制到堆栈中为函数的返回值保留的区域。幸运的是，该地址指向堆内存。在`main()`中的赋值`name
    = createName();`将捕获这个地址，并将其复制存储到`name`变量中，该变量是`main()`中的局部变量。由于在`createName()`中分配的内存位于堆上，所以一旦函数完成，这个内存将存在。
- en: Just as important to note, had `temp` been defined as `char temp[MAX];` in `createName()`,
    the memory comprising `temp` would have existed on the stack and would have been
    local to `createName()`. Once `createName()` returns to `main`, the memory for
    this variable will have been popped off the stack and will be unavailable for
    proper use – even if that address has been captured in a pointer variable within
    `main()`. This is another potential pointer trap in C++. When returning a pointer
    from a function, always ensure that the memory that the pointer points to exists
    beyond the extent of the function.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 同样重要的是，如果在`createName()`中定义`char temp[MAX];`，那么组成`temp`的内存将存在于堆栈上，并且将局限于`createName()`。一旦`createName()`返回到`main`，这个变量的内存将从堆栈中弹出，并且将无法正确使用
    - 即使该地址已经在`main()`中的指针变量中被捕获。这是C++中另一个潜在的指针陷阱。当从函数返回指针时，始终确保指针指向的内存存在于函数的范围之外。
- en: 'The output for this example is:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子的输出是：
- en: '[PRE18]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now that we understand how pointers can be used within parameters to functions
    and as return values from functions, let's move forward by examining further pointer
    nuances.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了指针如何在函数的参数中使用以及作为函数的返回值，让我们继续通过进一步研究指针的微妙之处。
- en: Using the const qualifier with pointers
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用指针的const限定符
- en: The `const` qualifier can be used to qualify pointers in several different ways.
    The keyword `const` can be applied to the data pointed to, to the pointer itself,
    or to both. By using the `const` qualifier in this variety of ways, C++ offers
    the means to protect values in a program that may be mean to be initialized but
    never again modified. Let's examine each of these various scenarios. We will also
    be combining `const` qualified pointers with return values from functions to understand
    which of these various scenarios are reasonable to implement.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`const`限定符可以以几种不同的方式用于限定指针。关键字`const`可以应用于指向的数据，指针本身，或两者都可以。通过以这种多种方式使用`const`限定符，C++提供了保护程序中可能被初始化但永远不会再次修改的值的手段。让我们检查每种不同的情况。我们还将结合`const`限定指针与函数返回值，以了解哪些情况是合理实现的。'
- en: Using pointers to constant objects
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用指向常量对象的指针
- en: A pointer to a constant object may be specified so that the object that is pointed
    to may not be directly modified. A dereferenced pointer to this object may not
    be used as an l-value in any assignment. An l-value means a value that can be
    modified, and that occurs on the left-hand side of an assignment.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 可以指定指向常量对象的指针，以便不能直接修改指向的对象。对这个对象进行解引用后，不能将其用作任何赋值中的l值。l值表示可以修改的值，并且出现在赋值的左侧。
- en: 'Let''s introduce a simple example to understand the situation:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们举一个简单的例子来理解这种情况：
- en: '[PRE19]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Here, we've introduced `const char *constData = "constant";`. The pointer points
    to data, which is initialized, and which may never again be modified through this
    identifier. For example, should we try to alter this value using a `strcpy` where
    `constData` is the destination string, the compiler will issue an error.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们引入了`const char *constData = "constant";`。指针指向初始化的数据，通过这个标识符可能永远不会再次修改。例如，如果我们尝试使用`strcpy`来更改这个值，其中`constData`是目标字符串，编译器将发出错误。
- en: Also, trying to circumvent the situation by trying to store `constData` in a
    pointer of the same (but not `const`) type, will also generate a compiler error,
    such as in the line of code `regularString = constData;`. Of course, in C++ you
    can do anything if you try hard enough, so an explicit typecast here will work,
    but is purposely not shown. An explicit typecast will still generate a compiler
    warning to allow you to question whether this is truly something you intend to
    do. When we move forward with OO concepts, we will introduce ways to further protect
    data so that this type of circumvention can be eliminated.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，试图通过将`constData`存储在相同类型（但不是`const`）的指针中来规避这种情况，也会生成编译器错误，比如代码行`regularString
    = constData;`。当然，在C++中，如果你足够努力，你可以做任何事情，所以这里的显式类型转换会起作用，但故意没有显示。显式类型转换仍会生成编译器警告，以便你质疑这是否真的是你打算做的事情。当我们继续使用OO概念时，我们将介绍进一步保护数据的方法，以消除这种规避。
- en: On the last line of the previous code, notice that we store the address of a
    regular string in `const char *moreConstData`. This is allowed – you can always
    treat something with more respect than it was defined to have (just not less).
    This means that using the identifier `moreConstData`, this string may not be modified.
    However, using its own identifier, which is defined as `char *anotherRegularString;`,
    this string may be changed. This seems inconsistent, but it is not. The `const
    char *` variable chose to point to a `char *` – elevating its protection for a
    particular situation. If the `const char *` truly wanted to point to an immutable
    object, it would have chosen to instead point to another `const char *` variable.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面代码的最后一行，请注意我们将常规字符串的地址存储在`const char *moreConstData`中。这是允许的-你总是可以对待某物比它定义的更尊重（只是不能更少）。这意味着使用标识符`moreConstData`，这个字符串可能不会被修改。然而，使用它自己的标识符，定义为`char
    *anotherRegularString;`，这个字符串可能会被更改。这似乎是不一致的，但实际上并不是。`const char *`变量选择指向`char
    *`-提升了它对特定情况的保护。如果`const char *`真的想指向一个不可变对象，它本应选择指向另一个`const char *`变量。
- en: Next, let's see a variation on this theme.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看一个与此主题相关的变化。
- en: Using constant pointers to objects
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用常量指针指向对象
- en: A constant pointer to an object is a pointer that is initialized to point to
    a specific object. This pointer may never be assigned to point to another object.
    This pointer itself may not be used as an l-value in an assignment.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 指向对象的常量指针是初始化为指向特定对象的指针。这个指针可能永远不会被分配给指向另一个对象。这个指针本身不能在赋值中用作l值。
- en: 'Let''s review a simple example:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一个简单的例子：
- en: '[PRE20]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In this example, two regular `char *` variables (`regularString` and `anotherRegularString`)
    are defined and loaded with string literals. Next, `char *const constPtrString
    = regularString;` is defined and initialized to point to a modifiable string.
    Because the `const` qualification is on the pointer itself and not the data pointed
    to, the pointer itself must be initialized with a value at declaration. Notice
    that the line of code `constPtrString = anotherRegularString;` would generate
    a compiler error because a `const` pointer cannot be on the left-hand side of
    an assignment. However, because the `const` qualification is not applicable to
    the data pointed to, a `strcpy` may be used to modify the value of the data as
    is seen in `strcpy(constPtrString, "I can change the value");`.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，定义了两个常规的`char *`变量（`regularString`和`anotherRegularString`），并加载了字符串文字。接下来，定义并初始化了`char
    *const constPtrString = regularString;`，指向可修改的字符串。因为`const`限定符是应用于指针本身而不是指向的数据，所以指针本身必须在声明时初始化。请注意，代码行`constPtrString
    = anotherRegularString;`会生成编译器错误，因为`const`指针不能出现在赋值的左侧。然而，因为`const`限定符不适用于指向的数据，所以可以使用`strcpy`来修改数据的值，就像在`strcpy(constPtrString,
    "I can change the value");`中看到的那样。
- en: Next, let's combine the `const` qualifier on both the pointer and the data that
    is pointed to.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们将`const`限定符应用于指针和指向的数据。
- en: Using constant pointers to constant objects
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用常量指针指向常量对象
- en: A constant pointer to a constant object is a pointer that is established to
    point to a specific object and to unmodifiable data. The pointer itself must be
    initialized to a given object, which is (hopefully) initialized with appropriate
    values. Neither the object or the pointer may be modified or used as l-values
    in assignments.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 指向常量对象的常量指针是指向特定对象和不可修改数据的指针。指针本身必须初始化为给定对象，该对象（希望）用适当的值初始化。对象或指针都不能在赋值中被修改或用作左值。
- en: 'Here is an example:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个例子：
- en: '[PRE21]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In this example, two regular `char *` variables are declared, `regularString`
    and `anotherRegularString`. Each is initialized with a string literal. Next, we
    introduce `const char *const constStringandPtr = regularString;`, which is a `const`
    qualified pointer to data that is also treated as `const`. Notice that this variable
    must be initialized because the pointer itself cannot be an l-value in a later
    assignment. You will also want to ensure that this pointer is initialized with
    a meaningful value, as the data that is pointed to also cannot be changed (as
    illustrated by the `strcpy` statement, which would generate a compiler error).
    Combining `const` on the pointer as well as the data pointed to is a strict way
    to safeguard data.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们声明了两个常规的`char *`变量，`regularString`和`anotherRegularString`。每个都用字符串字面值初始化。接下来，我们引入了`const
    char *const constStringandPtr = regularString;`，这是一个对数据进行const限定的指针，也被视为const。注意，这个变量必须初始化，因为指针本身不能在后续赋值中成为左值。您还需要确保这个指针用有意义的值进行初始化，因为指向的数据也不能被更改（如`strcpy`语句所示，这将生成编译器错误）。在指针和指向的数据上结合使用const是一种严格的保护数据的方式。
- en: Tip – deciphering pointer declarations
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 提示-解读指针声明
- en: To read complex pointer declarations, it often helps to read the declaration
    backwards – from right to left. For example, the pointer declaration `const char
    *p1 = "hi!";` would be interpreted as `p1` is a pointer to (one or more) characters
    that are constant. The declaration `const char *const p2 = p1;` would be read
    as `p2` is a constant pointer to (one or more) characters that are constant.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读复杂的指针声明时，通常从右向左阅读声明会有所帮助。例如，指针声明`const char *p1 = "hi!";`可以解释为`p1`是指向（一个或多个）常量字符的指针。声明`const
    char *const p2 = p1;`可以解释为`p2`是指向（一个或多个）常量字符的常量指针。
- en: Finally, let's move forward to understand the implications of `const` qualifying
    pointers that serve as function parameters or as return values from functions.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们继续了解作为函数参数或函数返回值的指针的const限定的含义。
- en: Using pointers to constant objects as function arguments and as return types
    from functions
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用指向常量对象的指针作为函数参数和函数返回类型
- en: Copying arguments on the stack that are user defined types can be time-consuming.
    Passing a pointer as a function argument is speedier, yet permits the dereferenced
    object to possibly be modified in the scope of the function. Passing a pointer
    to a constant object as a function argument provides both speed and safety for
    the argument in question. The dereferenced pointer simply may not be an l-value
    in the scope of the function in question. The same principle holds true for the
    return value from a function. Const qualifying the data pointed to insists that
    the caller of the function must also store the return value in a pointer to a
    constant object, ensuring the object's long-term immutability.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在堆栈上复制用户定义类型的参数可能是耗时的。将指针作为函数参数传递速度更快，但允许在函数范围内修改解引用的对象。将指向常量对象的指针作为函数参数既提供了速度又保证了参数的安全性。在问题函数的范围内，解引用的指针可能不是一个左值。同样的原则也适用于函数的返回值。对指向的数据进行const限定要求函数的调用者也必须将返回值存储在指向常量对象的指针中，确保对象的长期不可变性。
- en: 'Let''s take a look at an example to examine these ideas:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子来检验这些想法：
- en: '[https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter03/Chp3-Ex8.cpp](https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter03/Chp3-Ex8.cpp)'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter03/Chp3-Ex8.cpp](https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter03/Chp3-Ex8.cpp)'
- en: '[PRE22]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In this example, we begin with a global variable to store an initial suffix:
    `char *suffix = ''A'';` and the prototype for the function `const char *genId(const
    char *base);`. In `main()`, we declare but do not initialize `const char* newId1,
    *newId2;`, which will eventually hold the IDs generated by `genId()`.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们从一个全局变量开始存储一个初始后缀：`char *suffix = 'A';`和函数`const char *genId(const
    char *base);`的原型。在`main()`中，我们声明但不初始化`const char* newId1, *newId2;`，它们最终将保存`genId()`生成的ID。
- en: 'Next, we call `genId()` twice, passing a string literal, `"Group"`, to this
    function as the actual parameter. This parameter is received as a formal parameter:
    `const char *base`. The return value of this function will be used to assign values
    to `newId1` and `newId2`, respectively.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们调用`genId()`两次，将字符串字面值`"Group"`作为实际参数传递给这个函数。这个参数作为形式参数`const char *base`接收。这个函数的返回值将分别用于赋值给`newId1`和`newId2`。
- en: Looking more closely, we see that the call to `genId("Group")` passes the string
    literal `"Group"` as the actual parameter, which is received as `const char *base`
    in the formal parameter list of the function definition. This means that using
    the identifier `base`, this string may not be modified.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 更仔细地看，调用`genId("Group")`将字符串字面值`"Group"`作为实际参数传递，这在函数定义的形式参数列表中被接收为`const char
    *base`。这意味着使用标识符`base`，这个字符串是不可修改的。
- en: Next, within `genId()`, we declare local pointer variable `temp` on the stack
    and allocate enough heap memory for `temp` to point to, to accommodate the string
    pointed to by `base` plus an extra character for the suffix to be added, plus
    one for the null character to terminate the new string. Note that `strlen()` counts
    the number of characters in a string, excluding the null character. Now, using
    `strcpy()`, `base` is copied into `temp`. Then, using the assignment `temp[strlen(base)]
    = suffix++;`, the letter stored in `suffix` is added to the string pointed to
    by `temp` (and `suffix` is incremented to the next letter for the next time we
    call this function). Remember that arrays are zero-based in C++ when adding characters
    to the end of a given string. For example, if `"Group"` comprises 5 characters
    in array `temp`'s positions 0 through 4, then the next character (from `suffix`)
    will be added at position 5 in `temp` (overwriting the current null character).
    In the next line of code, the null character is re-added to the end of the new
    string pointed to by `temp`, as all strings need to be null-terminated. Note that
    whereas `strcpy()` will automatically null terminate a string, that once you resort
    to single-character replacement, such as by adding the suffix to the string, you
    then need to re-add the null character to the new overall string yourself.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在 `genId()` 中，我们在堆栈上声明了局部指针变量 `temp`，并分配了足够的堆内存给 `temp` 指向，以容纳 `base` 指向的字符串加上一个额外的字符用于添加后缀，再加上一个用于终止新字符串的空字符。请注意，`strlen()`
    计算字符串中的字符数，不包括空字符。现在，使用 `strcpy()`，将 `base` 复制到 `temp` 中。然后，使用赋值 `temp[strlen(base)]
    = suffix++;`，将存储在 `suffix` 中的字母添加到 `temp` 指向的字符串中（并且 `suffix` 递增到下一次调用此函数时的下一个字母）。请记住，在C++中数组是从零开始的，当向给定字符串的末尾添加字符时。例如，如果
    `"Group"` 包含5个字符，分别位于数组 `temp` 的位置0到4，那么下一个字符（来自 `suffix`）将被添加到 `temp` 的位置5（覆盖当前的空字符）。在代码的下一行，空字符被重新添加到
    `temp` 指向的新字符串的末尾，因为所有字符串都需要以空字符结尾。请注意，虽然 `strcpy()` 会自动以空字符结尾字符串，但是一旦你开始进行单个字符的替换，比如将后缀添加到字符串中，你就需要自己重新添加新整体字符串的空字符。
- en: Lastly, in this function, `temp` is returned. Notice that though `temp` is declared
    as a `char *`, it is returned as a `const char *`. This means that the string
    will be treated in a more restrictive fashion upon its return to `main()` than
    it was treated in the body of the function. In essence, it has been up-cast to
    a `const char *`. The implication is that since the return value of this function
    is a `const char *`, that only a pointer of type `const char *` can capture the
    return value of this function. This is required so that the string cannot be treated
    in a less restrictive fashion than intended by the creator of function `genId()`.
    Had `newId1` and `newId2` been declared of type `char *` rather than `const char
    *`, they would not have been allowed to serve as l-values to capture the return
    value of `genId()`.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在这个函数中，`temp` 被返回。请注意，虽然 `temp` 被声明为 `char *`，但它以 `const char *` 的形式返回。这意味着在返回到
    `main()` 时，该字符串将以更严格的方式对待，而不是在函数体中对待的那样。实质上，它已经被向上转型为 `const char *`。这意味着由于此函数的返回值是
    `const char *`，因此只有类型为 `const char *` 的指针才能捕获此函数的返回值。这是必需的，以便字符串不能以比 `genId()`
    函数的创建者意图更不严格的方式对待。如果 `newId1` 和 `newId2` 被声明为 `char *` 而不是 `const char *`，它们将不被允许作为l值来捕获
    `genId()` 的返回值。
- en: At the end of `main()`, we delete the memory associated with `newId1` and `newId2`.
    Notice that the memory for these pointer variables was allocated and released
    in different scopes within the program. The programmer must always be diligent
    to keep track of memory allocation and release in C++. Forgetting to deallocate
    memory can lead to memory leakage within an application.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `main()` 的末尾，我们删除了与 `newId1` 和 `newId2` 相关联的内存。请注意，这些指针变量的内存是在程序的不同作用域中分配和释放的。程序员必须始终注意在C++中跟踪内存分配和释放。忘记释放内存可能导致应用程序中的内存泄漏。
- en: 'Here is the output to accompany our example:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们示例的输出的附加部分：
- en: '[PRE23]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Now that we have an understanding of how and why to `const` qualify pointers,
    let's take a look at how and why we might choose a generic pointer type by considering
    void pointers.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了如何以及为什么要对指针进行 `const` 限定，让我们通过考虑void指针来看看如何以及为什么选择通用指针类型。
- en: Using pointers to objects of unspecified types
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用未指定类型的对象指针
- en: Sometimes programmers ask why they cannot simply have a generic pointer. That
    is, why must we always declare the type of data that the pointer will eventually
    point to, such as `int *ptr;`? C++ certainly does allow us to create pointers
    without associated types, but C++ then requires the programmer to keep track of
    things that would normally be done on their behalf. Nonetheless, we will see why
    void pointers are useful and what the programmer must undertake when using more
    generic, `void` pointers in this section.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 有时程序员会问为什么他们不能简单地拥有一个通用指针。也就是说，为什么我们总是要声明指针最终将指向的数据类型，比如 `int *ptr;`？C++确实允许我们创建没有关联类型的指针，但是C++要求程序员自己来跟踪通常由编译器代劳的事情。尽管如此，在本节中我们将看到为什么void指针很有用，以及程序员在使用更通用的
    `void` 指针时必须承担的任务。
- en: To understand a `void` pointer, let's first consider why a type is typically
    associated with a pointer variable. Typically, declaring the type with the pointer
    gives C++ information about how to conduct pointer arithmetic or index into a
    dynamic array of that pointer type. That is, if we have allocated `int *ptr =
    new int [10];`, we have 10 consecutive integers. Using either array notation of
    `ptr[3] = 5;` or pointer arithmetic of `*(ptr + 3) = 5;` to access one such element
    in this dynamically allocated set relies on the size of the data type `int` to
    internally allow C++ to understand how large each element is and how to move from
    one such item to the next. The data type also tells C++, once it has arrived at
    an appropriate memory address, how to interpret the memory. For example, an `int`
    and a `float` may have the same storage size on a given machine, however, the
    two's complement memory layout of an `int` versus the mantissa, exponent layout
    of a `float` is quite different. C++'s knowledge of how to interpret the given
    memory is crucial and the data type of the pointer does just that.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解`void`指针，让我们首先考虑为什么类型通常与指针变量相关联。通常，使用指针声明类型会让C++了解如何进行指针算术或索引到该指针类型的动态数组。也就是说，如果我们分配了`int
    *ptr = new int [10];`，我们有10个连续的整数。使用`ptr[3] = 5;`的数组表示法或`*(ptr + 3) = 5;`的指针算术来访问这个动态分配集合中的一个元素依赖于数据类型`int`的大小，以便C++内部理解每个元素的大小以及如何从一个元素移动到下一个元素。数据类型还告诉C++，一旦它到达适当的内存地址，如何解释内存。例如，`int`和`float`在给定机器上可能具有相同的存储大小，但是`int`的二进制补码内存布局与`float`的尾数、指数布局是完全不同的。C++对如何解释给定内存的了解至关重要，指针的数据类型正是做到这一点的。
- en: Still, however, the need exists to have a more generic pointer. For example,
    you may want a pointer that might point to an integer in one situation, yet to
    a set of user defined types in another situation. Using a `void` pointer allows
    just this to happen. But what about type? What happens when you dereference a
    `void` pointer? If C++ does not know how many bytes to go from one element in
    a set to another, how can it index into a dynamically allocated array of `void`
    pointers? How will it interpret the bytes once at an address? What is the type?
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，仍然存在需要更通用指针的需求。例如，你可能希望一个指针在一种情况下指向一个整数，而在另一种情况下指向一组用户定义的类型。使用`void`指针可以实现这一点。但是类型呢？当你对`void`指针进行取消引用时会发生什么？如果C++不知道如何从一个集合中的一个元素走到另一个元素，它如何索引到动态分配的`void`指针数组中？一旦到达地址，它将如何解释字节？类型是什么？
- en: The answer is that you, the programmer, must personally remember what you are
    pointing to at all times. Without the type associated with the pointer, the compiler
    cannot do this for you. And when it is time to dereference the `void` pointer,
    you will be in charge of correctly remembering the ultimate type involved and
    performing the appropriate type cast on that pointer.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 答案是，你，程序员，必须随时记住你指向的是什么。没有与指针相关联的类型，编译器无法为你做到这一点。当需要对`void`指针进行取消引用时，你将负责正确记住所涉及的最终类型，并对该指针执行适当的类型转换。
- en: Let's take a look at the mechanics and logistics of what is involved.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看所涉及的机制和逻辑。
- en: Creating void pointers
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建void指针
- en: Pointers to objects of unspecified types may be specified by using `void *`.
    The `void` pointer may then point to an object of any type. Explicit casting must
    be used in order to dereference actual memory pointed to by the `void *`. Explicit
    casting must also be used in C++ to assign memory pointed to by a `void *` to
    a pointer variable of a known type. It is the programmer's responsibility to ensure
    that the dereferenced data types are the same before making the assignment. Should
    the programmer be incorrect, there will be an elusive pointer mistake to find
    elsewhere in the code.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`void *`可以指定未指定类型的对象的指针。然后，`void`指针可以指向任何类型的对象。在C++中，必须使用显式转换来对`void *`指向的实际内存进行取消引用。在C++中，还必须使用显式转换将`void
    *`指向的内存分配给已知类型的指针变量。程序员有责任确保取消引用的数据类型在进行赋值之前是相同的。如果程序员错误，那么在代码的其他地方将会有一个难以找到的指针错误。
- en: 'Here is an example:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个例子：
- en: '[https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter03/Chp3-Ex9.cpp](https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter03/Chp3-Ex9.cpp)'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter03/Chp3-Ex9.cpp](https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter03/Chp3-Ex9.cpp)'
- en: '[PRE24]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In this example, the declaration `void *unspecified;` creates an uninitialized
    pointer that may one day point to the memory of any data type. The declaration
    `int *x;` declares a pointer that may someday point to one or more consecutive
    integers.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，声明`void *unspecified;`创建了一个未初始化的指针，它可能有一天指向任何数据类型的内存。声明`int *x;`声明了一个可能有一天指向一个或多个连续整数的指针。
- en: The assignment `*((int *) unspecified = 89;` first uses an explicit typecast
    to cast `unspecified` to an `(int *)` and then dereferences the `int *` to place
    the value of `89` in memory. It is important to note that this typecast must be
    done before `unspecified` may be dereferenced – otherwise C++ does not understand
    how to interpret the memory `unspecified` points to. Also note, if you accidentally
    typecast `unspecified` to the wrong type, the compiler will let you proceed as
    typecasts are seen as a "*just do it*" command to the compiler. It is your job,
    as the programmer, to remember what type of data your `void *` points to.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 赋值`*((int *) unspecified = 89;`首先使用显式类型转换将`unspecified`转换为`(int *)`，然后取消引用`int
    *`将值`89`放入内存。重要的是要注意，在对`unspecified`进行取消引用之前必须进行此类型转换-否则C++无法理解如何解释`unspecified`指向的内存。还要注意，如果你意外地将`unspecified`转换为错误的类型，编译器将允许你继续进行，因为类型转换被视为对编译器的"*just
    do it*"命令。作为程序员，你的工作是记住你的`void *`指向的数据类型。
- en: 'Lastly, we would like `x` to point to where `unspecified` points. The variable
    `x` is an integer and needs to point to one or more integers. The variable `unspecified`
    truly points to an integer, but since the data type of unspecified is `void *`,
    we must use an explicit typecast to make the following assignment work: `x = (int
    *) unspecified;`. Also, programmatically, we hope that we are correct that we
    have remembered that `unspecified` truly points to an `int`; knowing the correct
    memory layout is important should the `int *` ever be dereferenced. Otherwise,
    we have just forced an assignment between pointers of different types, leaving
    a lurking error in our program.'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们希望`x`指向`unspecified`指向的位置。变量`x`是一个整数，需要指向一个或多个整数。变量`unspecified`确实指向一个整数，但由于unspecified的数据类型是`void
    *`，我们必须使用显式类型转换使以下赋值生效：`x = (int *) unspecified;`。此外，从程序上看，我们希望我们正确地记住了`unspecified`确实指向一个`int`；知道正确的内存布局对于`int
    *`如果被取消引用是很重要的。否则，我们只是强制了不同类型指针之间的赋值，在我们的程序中留下了潜在的错误。
- en: 'Here is the output to accompany our program:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是与我们的程序配套的输出：
- en: '[PRE25]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: There are many creative uses of `void` pointers in C++. There are techniques
    that use `void *` for generic pointer manipulations and pair this inner processing
    with a thin layer on top to cast the data into a known data type. The thin top
    layers can be further genericized with the C++ feature of templates. Using templates,
    only one version of the explicit type casts are maintained by the programmer,
    yet many versions are truly made available on your behalf – one per actual concrete
    data type needed. These ideas encompass advanced techniques, but we will see several
    of them in the chapters ahead, starting with [*Chapter 13*](B15702_13_Final_NM_ePub.xhtml#_idTextAnchor486),
    *Working with Templates*.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在C++中有许多`void`指针的创造性用途。有一些技术使用`void *`进行通用指针操作，并将这种内部处理与在顶部添加的薄层配对，以将数据转换为已知的数据类型。薄顶层可以进一步通过C++的模板特性进行泛型化。使用模板，程序员只需维护一个显式类型转换的版本，但实际上可以为您提供许多版本-每个实际的具体数据类型需要一个版本。这些想法涵盖了高级技术，但我们将在接下来的章节中看到其中的一些，从[*第13章*](B15702_13_Final_NM_ePub.xhtml#_idTextAnchor486)，*使用模板*开始。
- en: Summary
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned many aspects surrounding pointers in C++. We
    have seen how to allocate memory from the heap using `new()` and how to relinquish
    that memory to the heap management facility using `delete()`. We have seen examples
    using both standard and user defined types. We have also understood why we may
    want to dynamically allocate arrays and have seen how to do so for 1, 2, and N
    dimensions. We have seen how to release the corresponding memory using `delete[]`.
    We have reviewed functions by adding pointers as parameters to functions and as
    return values from functions. We have also learned how to `const` qualify pointers
    as well as the data that they point to (or both) and why you may want to do so.
    Lastly, we have seen one way to genericize pointers by introducing `void` pointers.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了C++中指针的许多方面。我们已经看到如何使用`new()`从堆中分配内存，以及如何使用`delete()`将该内存交还给堆管理设施。我们已经看到了使用标准类型和用户定义类型的示例。我们还了解了为什么我们可能希望动态分配数组，并且已经了解了如何为1、2和N维数组这样做。我们已经看到了如何使用`delete[]`释放相应的内存。我们通过将指针添加为函数的参数和从函数返回值来回顾函数。我们还学习了如何对指针进行`const`限定以及它们指向的数据（或两者）以及为什么要这样做。最后，我们已经看到了通过引入`void`指针来泛化指针的一种方法。
- en: All of the skills using pointers from this chapter will be used freely in the
    upcoming chapters. C++ expects programmers to have a great facility for using
    pointers. Pointers allow the language great freedom and efficiency to utilize
    a vast number of data structures and to employ creative programming solutions.
    However, pointers can provide a massive way to introduce errors into a program
    with memory leakage, returning pointers to memory that no longer exists, dereferencing
    pointers that have been deleted, and so on. Not to worry, we will utilize many
    examples going forward using pointers so that you will be able to manipulate pointers
    with great facility.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用指针的所有技能将在接下来的章节中自由使用。C++希望程序员能够很好地使用指针。指针使语言具有很大的自由度和效率，可以利用大量的数据结构并采用创造性的编程解决方案。然而，指针可能会为程序引入大量错误，如内存泄漏，返回指向不再存在的内存的指针，取消引用已被删除的指针等。不用担心，我们将在接下来的示例中使用许多指针，以便您能够轻松地操纵指针。
- en: Most importantly, you are now ready to move forward to [*Chapter 4*](B15702_04_Final_NM_ePub.xhtml#_idTextAnchor169),
    *Indirect Addressing – References*, in which we will explore indirect addressing
    using references. Once you have understood both types of indirect addressing –
    pointers and references – and can manipulate either with ease, we will take on
    the core Object-Oriented concepts in this book, starting in [*Chapter 5*](B15702_05_Final_NM_ePub.xhtml#_idTextAnchor199),
    *Exploring Classes in Detail*.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是，您现在已经准备好继续前进到[*第4章*](B15702_04_Final_NM_ePub.xhtml#_idTextAnchor169)，*间接寻址-引用*，在这一章中，我们将使用引用来探索间接寻址。一旦您了解了间接寻址的两种类型-指针和引用-并且可以轻松地操纵其中任何一种，我们将在本书中探讨核心面向对象的概念，从[*第5章*](B15702_05_Final_NM_ePub.xhtml#_idTextAnchor199)，*详细探讨类*开始。
- en: Questions
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Modify and augment your C++ program from [*Chapter 2*](B15702_02_Final_NM_ePub.xhtml#_idTextAnchor066),
    *Adding Language Necessities*, *Exercise 2* as follows:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改并增强您的C++程序，从[*第2章*](B15702_02_Final_NM_ePub.xhtml#_idTextAnchor066)，*添加语言必需性*，*练习2*如下所示：
- en: a. Create a function, `ReadData()`, which accepts a pointer to a `Student` as
    an argument to allow `firstName`, `lastName`, `gpa`, and `currentCourseEnrolled`
    to be entered from the keyboard within the function and stored as the input parameter's
    data.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: a. 创建一个名为`ReadData()`的函数，该函数接受一个指向`Student`的指针作为参数，以允许在函数内从键盘输入`firstName`、`lastName`、`gpa`和`currentCourseEnrolled`，并将其存储为输入参数的数据。
- en: b. Modify `firstName`, `lastName`, and `currentCourseEnrolled` to be modeled
    as `char *` in your `Student` class instead of using fixed-sized arrays (as they
    may have been modeled in [*Chapter 2*](B15702_02_Final_NM_ePub.xhtml#_idTextAnchor066),
    *Adding Language Necessities*). You may utilize a `temp` variable, which is a
    fixed size, to initially capture user input for these values, and then allocate
    the proper, respective sizes for each of these data members.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: b. 修改`firstName`，`lastName`和`currentCourseEnrolled`，在您的`Student`类中将它们建模为`char
    *`，而不是使用固定大小的数组（就像在[*第2章*](B15702_02_Final_NM_ePub.xhtml#_idTextAnchor066)中可能已经建模的那样，*添加语言必需性*）。您可以利用一个固定大小的`temp`变量，最初捕获这些值的用户输入，然后为这些数据成员分配适当的大小。
- en: c. Rewrite, if necessary, the `Print()` function from your solution in [*Chapter
    2*](B15702_02_Final_NM_ePub.xhtml#_idTextAnchor066), *Adding Language Necessities*
    to take a `Student` as a parameter for `Print()`.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: c. 如果需要，重新编写您在[*第2章*](B15702_02_Final_NM_ePub.xhtml#_idTextAnchor066)解决方案中的`Print()`函数，以便为`Print()`接受`Student`作为参数。
- en: d. Overload the `Print()` function with one that takes a `const Student *` as
    a parameter. Which one is more efficient? Why?
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: d. 重载`Print()`函数，使用一个以`const Student *`为参数的函数。哪一个更有效？为什么？
- en: e. In `main()`, create an array of pointers to `Student` to accommodate 5 students.
    Allocate each `Student`, call `ReadData()` for each `Student`, and then `Print()`
    each `Student` using a selection from your above functions. When done, remember
    to `delete()` the `memory` for each student `allocated`.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: e. 在`main()`中，创建一个指向`Student`的指针数组，以容纳5个学生。为每个`Student`分配内存，为每个`Student`调用`ReadData()`，然后使用上述函数中的选择`Print()`每个`Student`。完成后，请记得为每个分配的学生`delete()`内存。
- en: 'f. Also in `main()`, create an array of `void` pointers that is the same size
    as the array of pointers to `Student`. Set each element in the array of `void`
    pointers to point to a corresponding `Student` from the array of `Student` pointers.
    Call the version of `Print()` that takes a `const Student *` as a parameter for
    each element in the `void *` array. Hint: you will need to cast `void *` elements
    to type `Student *` prior to making certain assignments and function calls.'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: f. 同样在`main()`中，创建一个`void`指针数组，大小与指向`Student`的指针数组相同。将`void`指针数组中的每个元素设置为指向`Student`指针数组中相应的`Student`。对`void
    *`数组中的每个元素调用以`const Student *`为参数的`Print()`版本。提示：在进行某些赋值和函数调用之前，您需要将`void *`元素转换为`Student
    *`类型。
- en: 'Write the following pointer declarations, which include a `const` qualification:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 写下以下指针声明，其中包括`const`修饰：
- en: 'a. Write a declaration for a pointer to a constant object. Assume the object
    is of type `Student`. Hint: read your declaration from right to left to verify
    its correctness.'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: a. 为指向常量对象的指针编写声明。假设对象的类型为`Student`。提示：从右向左阅读您的声明以验证其正确性。
- en: b. Write a declaration for a constant pointer to a non-constant object. Again,
    assume the object is of type `Student`.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: b. 为指向非常量对象的常量指针编写声明。再次假设对象的类型为`Student`。
- en: c. Write a declaration for a constant pointer to a constant object. The object
    will again be of type `Student`.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: c. 为指向常量对象的常量指针编写声明。对象将再次是`Student`类型。
- en: Why does passing an argument of type `const Student *` to `Print()` in your
    program above make sense, and why would passing a parameter of type `Student *
    const` not make sense?
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么在上面的程序中将类型为`const Student *`的参数传递给`Print()`是有意义的，为什么传递类型为`Student * const`的参数是没有意义的？
- en: Can you think of programming situations that may require a dynamically allocated
    3-D array? What about a dynamically allocated array with more dimensions?
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您能想到可能需要动态分配的3D数组的编程情况吗？动态分配具有更多维度的数组呢？
