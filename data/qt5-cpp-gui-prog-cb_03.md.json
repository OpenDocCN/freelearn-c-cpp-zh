["```cpp\n    #include <QMainWindow>\n    #include <QPainter>\n\n    ```", "```cpp\n    public:\n    explicit MainWindow(QWidget *parent = 0);\n    ~MainWindow();\n    virtual void paintEvent(QPaintEvent *event);\n\n    ```", "```cpp\n    void MainWindow::paintEvent(QPaintEvent *event)\n    {\n    }\n    ```", "```cpp\n    QPainter textPainter(this);\n    textPainter.setFont(QFont(\"Times\", 14, QFont::Bold));\n    textPainter.drawText(QPoint(20, 30), \"Testing\");\n    ```", "```cpp\n    QPainter linePainter(this);\n    linePainter.drawLine(QPoint(50, 60), QPoint(100, 100));\n    ```", "```cpp\n    QPainter rectPainter(this);\n    rectPainter.setBrush(Qt::BDiagPattern);\n    rectPainter.drawRect(QRect(40, 120, 80, 30));\n    ```", "```cpp\n    QPen ellipsePen;\n    ellipsePen.setColor(Qt::red);\n    ellipsePen.setStyle(Qt::DashDotLine);\n\n    QPainter ellipsePainter(this);\n    ellipsePainter.setPen(ellipsePen);\n    ellipsePainter.drawEllipse(QPoint(80, 200), 50, 20);\n    ```", "```cpp\n    QPainterPath rectPath;\n    rectPath.addRect(QRect(150, 20, 100, 50));\n\n    QPainter pathPainter(this);\n    pathPainter.setPen(QPen(Qt::red, 1, Qt::DashDotLine, Qt::FlatCap, Qt::MiterJoin));\n    pathPainter.setBrush(Qt::yellow);\n    pathPainter.drawPath(rectPath);\n    ```", "```cpp\n    QPainterPath ellipsePath;\n    ellipsePath.addEllipse(QPoint(200, 120), 50, 20);\n\n    QPainter ellipsePathPainter(this);\n    ellipsePathPainter.setPen(QPen(QColor(79, 106, 25), 5, Qt::SolidLine, Qt::FlatCap, Qt::MiterJoin));\n    ellipsePathPainter.setBrush(QColor(122, 163, 39));\n    ellipsePathPainter.drawPath(ellipsePath);\n    ```", "```cpp\n    QImage image;\n    image.load(\"tux.png\");\n\n    QPainter imagePainter(this);\n    imagePainter.drawImage(QPoint(100, 150), image);\n    ```", "```cpp\nQPainter linePainter(this);\n```", "```cpp\n    void MainWindow::on_actionSave_as_SVG_triggered()\n    {\n    }\n    ```", "```cpp\n    #include <QtSvg/QSvgGenerator>\n    #include <QFileDialog>\n    ```", "```cpp\n    QT += core gui svg\n    ```", "```cpp\n    public:\n      explicit MainWindow(QWidget *parent = 0);\n      ~MainWindow();\n\n      virtual void paintEvent(QPaintEvent *event);\n      void paintAll(QSvgGenerator *generator = 0);\n    ```", "```cpp\n    void MainWindow::paintAll(QSvgGenerator *generator)\n    {\n      QPainter painter;\n\n      if (engine)\n        painter.begin(engine);\n      else\n        painter.begin(this);\n\n      painter.setFont(QFont(\"Times\", 14, QFont::Bold));\n      painter.drawText(QPoint(20, 30), \"Testing\");\n\n      painter.drawLine(QPoint(50, 60), QPoint(100, 100));\n\n      painter.setBrush(Qt::BDiagPattern);\n      painter.drawRect(QRect(40, 120, 80, 30));\n\n      QPen ellipsePen;\n      ellipsePen.setColor(Qt::red);\n      ellipsePen.setStyle(Qt::DashDotLine);\n\n      painter.setPen(ellipsePen);\n      painter.drawEllipse(QPoint(80, 200), 50, 20);\n\n      QPainterPath rectPath;\n      rectPath.addRect(QRect(150, 20, 100, 50));\n\n      painter.setPen(QPen(Qt::red, 1, Qt::DashDotLine, Qt::FlatCap, Qt::MiterJoin));\n      painter.setBrush(Qt::yellow);\n      painter.drawPath(rectPath);\n\n      QPainterPath ellipsePath;\n      ellipsePath.addEllipse(QPoint(200, 120), 50, 20);\n\n      painter.setPen(QPen(QColor(79, 106, 25), 5, Qt::SolidLine, Qt::FlatCap, Qt::MiterJoin));\n      painter.setBrush(QColor(122, 163, 39));\n      painter.drawPath(ellipsePath);\n\n      QImage image;\n      image.load(\"tux.png\");\n\n      painter.drawImage(QPoint(100, 150), image);\n\n      painter.end();\n    }\n    ```", "```cpp\n    void MainWindow::paintEvent(QPaintEvent *event)\n    {\n     paintAll();\n    }\n    ```", "```cpp\n    void MainWindow::on_actionSave_as_SVG_triggered()\n    {\n      QString filePath = QFileDialog::getSaveFileName(this, \"Save SVG\", \"\", \"SVG files (*.svg)\");\n\n      if (filePath == \"\")\n        return;\n    }\n    ```", "```cpp\n    void MainWindow::on_actionSave_as_SVG_triggered()\n    {\n      QString filePath = QFileDialog::getSaveFileName(this, \"Save SVG\", \"\", \"SVG files (*.svg)\");\n\n      if (filePath == \"\")\n        return;\n\n     QSvgGenerator generator;\n     generator.setFileName(filePath);\n     generator.setSize(QSize(this->width(), this->height()));\n     generator.setViewBox(QRect(0, 0, this->width(), this->height()));\n     generator.setTitle(\"SVG Example\");\n     generator.setDescription(\"This SVG file is generated by Qt.\");\n\n     paintAll(&generator);\n    }\n    ```", "```cpp\nif (engine)\n painter.begin(engine);\nelse\n  painter.begin(this);\n```", "```cpp\n    #include <QTime>\n    #include <QTimer>\n    #include <QPainter>\n    ```", "```cpp\n    public:\n      explicit MainWindow(QWidget *parent = 0);\n      ~MainWindow();\n\n    virtual void paintEvent(QPaintEvent *event);\n\n    ```", "```cpp\n    void MainWindow::paintEvent(QPaintEvent *event)\n    {\n     static const QPoint hourHand[3] =\n     {\n     QPoint(4, 4),\n     QPoint(-4, 4),\n     QPoint(0, -40)\n     };\n\n     static const QPoint minuteHand[3] =\n     {\n     QPoint(4, 4),\n     QPoint(-4, 4),\n     QPoint(0, -70)\n     };\n\n     static const QPoint secondHand[3] =\n     {\n     QPoint(2, 2),\n     QPoint(-2, 2),\n     QPoint(0, -90)\n     };\n    }\n    ```", "```cpp\n    int side = qMin(width(), height());\n\n    QPainter painter(this);\n    painter.setRenderHint(QPainter::Antialiasing);\n    painter.translate(width() / 2, height() / 2);\n    painter.scale(side / 250.0, side / 250.0);\n    ```", "```cpp\n    for (int i = 0; i < 60; ++i)\n    {\n      if ((i % 5) != 0)\n        painter.drawLine(92, 0, 96, 0);\n      else\n        painter.drawLine(86, 0, 96, 0);\n      painter.rotate(6.0);\n    }\n    ```", "```cpp\n    QTime time = QTime::currentTime();\n\n    // Draw hour hand\n    painter.save();\n    painter.rotate((time.hour() * 360) / 12);\n    painter.setPen(Qt::NoPen);\n    painter.setBrush(Qt::black);\n    painter.drawConvexPolygon(hourHand, 3);\n    painter.restore();\n\n    // Draw minute hand\n    painter.save();\n    painter.rotate((time.minute() * 360) / 60);\n    painter.setPen(Qt::NoPen);\n    painter.setBrush(Qt::black);\n    painter.drawConvexPolygon(minuteHand, 3);\n    painter.restore();\n\n    // Draw second hand\n    painter.save();\n    painter.rotate((time.second() * 360) / 60);\n    painter.setPen(Qt::NoPen);\n    painter.setBrush(Qt::black);\n    painter.drawConvexPolygon(secondHand, 3);\n    painter.restore();\n    ```", "```cpp\n    MainWindow::MainWindow(QWidget *parent) :\n      QMainWindow(parent), ui(new Ui::MainWindow)\n    {\n      ui->setupUi(this);\n\n      QTimer* timer = new QTimer(this);\n      timer->start(1000);\n      connect(timer, SIGNAL(timeout()), this, SLOT(update()));\n    }\n    ```", "```cpp\n    #include <QPainter>\n    ```", "```cpp\n    virtual void paintEvent(QPaintEvent* event);\n    ```", "```cpp\n    void MainWindow::paintEvent(QPaintEvent* event)\n    {\n     QImage image;\n     image.load(\"checker.png\");\n\n     QImage image2;\n     image2.load(\"tux.png\");\n\n     QImage image3;\n     image3.load(\"butterfly.png\");\n    }\n    ```", "```cpp\n    QPainter painter(this);\n    painter.drawImage(QPoint(10, 10), image);\n    painter.drawImage(QPoint(10, 10), image2);\n    painter.drawImage(QPoint(300, 10), image);\n    painter.drawImage(QPoint(300, 40), image3);\n    ```", "```cpp\n    QPainter painter(this);\n\n    painter.setCompositionMode(QPainter::CompositionMode_Difference);\n    painter.drawImage(QPoint(10, 10), image);\n    painter.setCompositionMode(QPainter::CompositionMode_Multiply);\n    painter.drawImage(QPoint(10, 10), image2);\n\n    painter.setCompositionMode(QPainter::CompositionMode_Xor);\n    painter.drawImage(QPoint(300, 10), image);\n    painter.setCompositionMode(QPainter::CompositionMode_SoftLight);\n    painter.drawImage(QPoint(300, 40), image3);\n    ```", "```cpp\n    font: 26pt \"MS Shell Dlg 2\";\n    ```", "```cpp\n    #include <QGraphicsBlurEffect>\n    #include <QGraphicsDropShadowEffect>\n    #include <QGraphicsColorizeEffect>\n    #include <QGraphicsOpacityEffect>\n    ```", "```cpp\n    MainWindow::MainWindow(QWidget *parent) :\n      QMainWindow(parent), ui(new Ui::MainWindow)\n    {\n      ui->setupUi(this);\n\n     QGraphicsDropShadowEffect* shadow = new QGraphicsDropShadowEffect();\n     shadow->setXOffset(4);\n     shadow->setYOffset(4);\n     ui->label->setGraphicsEffect(shadow);\n    }\n    ```", "```cpp\n    QGraphicsColorizeEffect* colorize = new QGraphicsColorizeEffect();\n    colorize->setColor(QColor(255, 0, 0));\n    ui->butterfly->setGraphicsEffect(colorize);\n    ```", "```cpp\n    QGraphicsBlurEffect* blur = new QGraphicsBlurEffect();\n    blur->setBlurRadius(12);\n    ui->label2->setGraphicsEffect(blur);\n    ```", "```cpp\n    QGraphicsOpacityEffect* alpha = new QGraphicsOpacityEffect();\n    alpha->setOpacity(0.2);\n    ui->penguin->setGraphicsEffect(alpha);\n    ```", "```cpp\n    #include <QPainter>\n    #include <QMouseEvent>\n    #include <QFileDialog>\n    ```", "```cpp\n    private:\n    Ui::MainWindow *ui;\n\n    QImage image;\n    bool drawing;\n    QPoint lastPoint;\n    int brushSize;\n    QColor brushColor;\n\n    ```", "```cpp\n    public:\n      explicit MainWindow(QWidget *parent = 0);\n      ~MainWindow();\n\n     virtual void mousePressEvent(QMouseEvent *event);\n     virtual void mouseMoveEvent(QMouseEvent *event);\n     virtual void mouseReleaseEvent(QMouseEvent *event);\n     virtual void paintEvent(QPaintEvent *event);\n     virtual void resizeEvent(QResizeEvent *event);\n\n    ```", "```cpp\n    MainWindow::MainWindow(QWidget *parent) :\n      QMainWindow(parent), ui(new Ui::MainWindow)\n    {\n      ui->setupUi(this);\n\n     image = QImage(this->size(), QImage::Format_RGB32);\n     image.fill(Qt::white);\n\n     drawing = false;\n     brushColor = Qt::black;\n     brushSize = 2;\n    }\n    ```", "```cpp\n    void MainWindow::mousePressEvent(QMouseEvent *event)\n    {\n      if (event->button() == Qt::LeftButton)\n      {\n        drawing = true;\n        lastPoint = event->pos();\n      }\n    }\n    ```", "```cpp\n    void MainWindow::mouseMoveEvent(QMouseEvent *event)\n    {\n      if ((event->buttons() & Qt::LeftButton) && drawing)\n      {\n        QPainter painter(&image);\n        painter.setPen(QPen(brushColor, brushSize, Qt::SolidLine, Qt::RoundCap, Qt::RoundJoin));\n        painter.drawLine(lastPoint, event->pos());\n\n        lastPoint = event->pos();\n        this->update();\n      }\n    }\n    ```", "```cpp\n    void MainWindow::mouseReleaseEvent(QMouseEvent *event)\n    {\n      if (event->button() == Qt::LeftButton)\n      {\n        drawing = false;\n      }\n    }\n    ```", "```cpp\n    void MainWindow::paintEvent(QPaintEvent *event)\n    {\n      QPainter canvasPainter(this);\n      canvasPainter.drawImage(this->rect(), image, image.rect());\n    }\n    ```", "```cpp\n    private slots:\n      void on_actionSave_triggered();\n      void on_actionClear_triggered();\n      void on_action2px_triggered();\n      void on_action5px_triggered();\n      void on_action10px_triggered();\n      void on_actionBlack_triggered();\n      void on_actionWhite_triggered();\n      void on_actionRed_triggered();\n      void on_actionGreen_triggered();\n      void on_actionBlue_triggered();\n    ```", "```cpp\n    void MainWindow::on_actionSave_triggered()\n    {\n      QString filePath = QFileDialog::getSaveFileName(this, \"Save Image\", \"\", \"PNG (*.png);;JPEG (*.jpg *.jpeg);;All files (*.*)\");\n\n      if (filePath == \"\")\n        return;\n\n      image.save(filePath);\n    }\n    void MainWindow::on_actionClear_triggered()\n    {\n      image.fill(Qt::white);\n      this->update();\n    }\n    void MainWindow::on_action2px_triggered()\n    {\n      brushSize = 2;\n    }\n    void MainWindow::on_action5px_triggered()\n    {\n      brushSize = 5;\n    }\n    void MainWindow::on_action10px_triggered()\n    {\n      brushSize = 10;\n    }\n    void MainWindow::on_actionBlack_triggered()\n    {\n      brushColor = Qt::black;\n    }\n\n    void MainWindow::on_actionWhite_triggered()\n    {\n      brushColor = Qt::white;\n    }\n    void MainWindow::on_actionRed_triggered()\n    {\n      brushColor = Qt::red;\n    }\n    void MainWindow::on_actionGreen_triggered()\n    {\n      brushColor = Qt::green;\n    }\n    void MainWindow::on_actionBlue_triggered()\n    {\n      brushColor = Qt::blue;\n    }\n    ```", "```cpp\n    import QtQuick 2.5\n    import QtQuick.Window 2.2\n\n    Window\n    {\n      id: myWindow\n      visible: true\n      width: 540\n      height: 380\n    }\n    ```", "```cpp\n    Window\n    {\n      id: myWindow\n      visible: true\n      width: 540\n      height: 380\n\n     Canvas\n     {\n     id: myCanvas\n     width: myWindow.width\n     height: myWindow.height\n     }\n    }\n    ```", "```cpp\n    Canvas\n    {\n      id: myCanvas\n      width: myWindow.width\n      height: myWindow.height\n\n      onPaint:\n     {\n     var context = getContext('2d')\n     context.fillStyle = 'white'\n     context.fillRect(0, 0, width, height)\n     context.lineWidth = 2\n     context.strokeStyle = 'black'\n\n     // Draw cross\n     context.beginPath()\n     context.moveTo(50, 50)\n     context.lineTo(100, 100)\n     context.closePath()\n     context.stroke()\n\n     context.beginPath()\n     context.moveTo(100, 50)\n     context.lineTo(50, 100)\n     context.closePath()\n     context.stroke()\n     }\n    }\n    ```", "```cpp\n    // Draw tick\n    context.beginPath()\n    context.moveTo(150, 90)\n    context.lineTo(158, 100)\n    context.closePath()\n    context.stroke()\n\n    context.beginPath()\n    context.moveTo(180, 100)\n    context.lineTo(210, 50)\n    context.closePath()\n    context.stroke()\n    ```", "```cpp\n    // Draw triangle\n    context.lineWidth = 4\n    context.strokeStyle = \"red\"\n    context.fillStyle = \"salmon\"\n\n    context.beginPath()\n    context.moveTo(50,150)\n    context.lineTo(150,150)\n    context.lineTo(50,250)\n    context.closePath()\n    context.fill()\n    context.stroke()\n    ```", "```cpp\n    // Draw circle\n    context.lineWidth = 4\n    context.strokeStyle = \"blue\"\n    context.fillStyle = \"steelblue\"\n\n    var pi = 3.141592653589793\n\n    context.beginPath()\n    context.arc(220, 200, 60, 0, pi, true)\n    context.closePath()\n    context.fill()\n    context.stroke()\n\n    context.beginPath()\n    context.arc(220, 280, 60, 0, 2 * pi, true)\n    context.closePath()\n    context.fill()\n    context.stroke()\n    ```", "```cpp\n    // Draw image\n    context.drawImage(\"tux.png\", 280, 10, 256, 297)\n    ```", "```cpp\n    Component.onCompleted:\n    {\n     loadImage(\"tux.png\")\n    }\n\n    onImageLoaded:requestPaint();\n    onPaint:\n    {\n      // The code we added previously\n    }\n    ```"]