- en: Time Points and Intervals
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间点和间隔
- en: Embedded applications handle events and control processes happening in the physical
    world—that is why the correct handling of time and delays is crucial for them.
    Switching traffic lights; generation of sound tones; synchronization of data from
    multiple sensors—all these tasks rely on proper time measurements.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌入式应用程序处理发生在物理世界中的事件和控制过程——这就是为什么正确处理时间和延迟对它们至关重要。交通灯的切换；声音音调的生成；来自多个传感器的数据同步——所有这些任务都依赖于正确的时间测量。
- en: Plain C does not provide any standard functions to work with time. It is expected
    that application developers will use a time API specific for the target operating
    system—Windows, Linux, or macOS. For bare-metal embedded systems, developers have
    to create custom functions to work with time, based on a low-level timer API specific
    for the target platform. As a result, the code is hard to port to other platforms.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 纯C不提供任何标准函数来处理时间。预期应用程序开发人员将使用特定于目标操作系统的时间API——Windows、Linux或macOS。对于裸机嵌入式系统，开发人员必须创建自定义函数来处理时间，这些函数基于特定于目标平台的低级定时器API。结果，代码很难移植到其他平台。
- en: To overcome the portability issue, C++ (starting with C++11) defines data types
    and functions to work with time and time intervals. This API, referenced as an
    `std::chrono` library, helps developers work with time in a uniform way in any
    environment and on any target platform.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了克服可移植性问题，C++（从C++11开始）定义了用于处理时间和时间间隔的数据类型和函数。这个API被称为`std::chrono`库，它帮助开发人员以统一的方式在任何环境和任何目标平台上处理时间。
- en: In this chapter, we will learn how to work with timestamps, time intervals,
    and delays in our applications. We will discuss some of the common pitfalls related
    to time management, along with the proper workarounds for them.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何在我们的应用程序中处理时间戳、时间间隔和延迟。我们将讨论与时间管理相关的一些常见陷阱，以及它们的适当解决方法。
- en: 'We will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: Exploring the C++ Chrono library
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索C++ Chrono库
- en: Measuring time intervals
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测量时间间隔
- en: Working with delays
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理延迟
- en: Using the monotonic clock
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用单调时钟
- en: Using **Portable Operating System Interface** (**POSIX**) timestamps
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**可移植操作系统接口**（**POSIX**）时间戳
- en: Using these recipes, you will be able to write portable code for time handling
    that works on any embedded platform.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些示例，您将能够编写可在任何嵌入式平台上运行的时间处理的可移植代码。
- en: Exploring the C++ Chrono library
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索C++ Chrono库
- en: Starting from C++11, the C++ Chrono library provides standardized data types
    and functions to work with clocks, time points, and time intervals. In this recipe,
    we will explore the basic capabilities of the Chrono library, and learn how to
    work with time points and intervals.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 从C++11开始，C++ Chrono库提供了标准化的数据类型和函数，用于处理时钟、时间点和时间间隔。在这个示例中，我们将探索Chrono库的基本功能，并学习如何处理时间点和间隔。
- en: We will also learn how to use C++ literals for a more readable representation
    of time intervals.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将学习如何使用C++字面量来更清晰地表示时间间隔。
- en: How to do it...
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: We are going to create a simple application that creates three time points and
    compares them to each other.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个简单的应用程序，创建三个时间点并将它们相互比较。
- en: In your  `~/test` working directory, create a subdirectory called `chrono`.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的`~/test`工作目录中，创建一个名为`chrono`的子目录。
- en: Use your favorite text editor to create a `chrono.cpp` file in the `chrono` subdirectory.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的文本编辑器在`chrono`子目录中创建一个`chrono.cpp`文件。
- en: 'Put the following code snippet into the file:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码片段放入文件中：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create a `CMakeLists.txt` file containing build rules for our program:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含程序构建规则的`CMakeLists.txt`文件：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can now build and run the application.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以构建和运行应用程序。
- en: How it works...
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Our application creates three different time points. The first one is created
    using the `now` function of the system clock:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序创建了三个不同的时间点。第一个是使用系统时钟的`now`函数创建的：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Two others are derived from the first one by adding fixed time intervals of
    `1` second and `200` milliseconds:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 另外两个时间点是通过添加固定的时间间隔`1`秒和`200`毫秒从第一个时间点派生出来的：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Please note how we specified the time units next to the numeric values. We
    used a feature called C++ literals. The Chrono library defines such literals for
    basic time units. To use these definitions, we added the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意我们是如何在数字值旁边指定时间单位的。我们使用了一个叫做C++字面量的特性。Chrono库为基本时间单位定义了这样的字面量。为了使用这些定义，我们添加了以下内容：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This was added before our `main` function.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在我们的`main`函数之前添加的。
- en: 'Next, we compared these time points to each other:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将比较这些时间点：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'When we run the application, we see the following output:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行应用程序时，我们会看到以下输出：
- en: '![](img/00856d97-097c-4ff9-98ef-4ed42bfda18c.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00856d97-097c-4ff9-98ef-4ed42bfda18c.png)'
- en: As expected, time point `a` is earlier than both `b` and `c`, where time point
    `c`—which is `a` + 200 milliseconds—is earlier than `b` (`a` + 1 second). String
    literals help write more readable code, and C++ Chrono provides a rich set of
    functions to work with time. We will learn how to work with them in the next recipes.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期的那样，时间点`a`比`b`和`c`都要早，其中时间点`c`（即`a`+200毫秒）比`b`（`a`+1秒）要早。字符串字面量有助于编写更易读的代码，C++
    Chrono提供了丰富的函数集来处理时间。我们将在下一个示例中学习如何使用它们。
- en: There's more...
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Information about all data types, templates, and functions defined in the Chrono
    library can be found in the Chrono reference at [https://en.cppreference.com/w/cpp/chrono ](https://en.cppreference.com/w/cpp/chrono)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Chrono库中定义的所有数据类型、模板和函数的信息可以在Chrono参考中找到[https://en.cppreference.com/w/cpp/chrono ](https://en.cppreference.com/w/cpp/chrono)
- en: Measuring time intervals
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测量时间间隔
- en: Every embedded application interacting with peripheral hardware or responding
    to external events has to deal with timeouts and reaction times. To do this properly,
    developers need the ability to measure time intervals with sufficient precision.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 与外围硬件交互或响应外部事件的每个嵌入式应用程序都必须处理超时和反应时间。为了正确地做到这一点，开发人员需要能够以足够的精度测量时间间隔。
- en: The C++ Chrono library provides an `std::chrono::duration` templated class for
    handling durations of arbitrary span and precision. In this recipe, we will learn
    how to use this class to measure the time interval between two timestamps and
    check it against a reference duration.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: C++ Chrono库提供了一个用于处理任意跨度和精度的持续时间的`std::chrono::duration`模板类。在这个示例中，我们将学习如何使用这个类来测量两个时间戳之间的时间间隔，并将其与参考持续时间进行比较。
- en: How to do it...
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Our application will measure the duration of simple console output and compare
    it to the previous values in the loop.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序将测量简单控制台输出的持续时间，并将其与循环中的先前值进行比较。
- en: In your `~/test` working directory, create a subdirectory called `intervals`.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的`〜/test`工作目录中，创建一个名为`intervals`的子目录。
- en: Use your favorite text editor to create an `intervals.cpp` file in the `intervals` subdirectory.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的文本编辑器在`intervals`子目录中创建一个名为`intervals.cpp`的文件。
- en: 'Copy the following code snippet into the `intervals.cpp` file:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码片段复制到`intervals.cpp`文件中：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Finally, create a `CMakeLists.txt` file containing build rules for our program:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，创建一个`CMakeLists.txt`文件，其中包含我们程序的构建规则：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You can now build and run the application.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以构建并运行应用程序。
- en: How it works...
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'On each iteration of the application loop, we measure the performance of one
    output operation. To do so, we capture a timestamp before the operation and another
    timestamp after the operation is complete:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序循环的每次迭代中，我们测量一个输出操作的性能。为此，我们在操作之前捕获一个时间戳，操作完成后捕获另一个时间戳：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We use C++11 `auto` to let the compiler infer data types for the timestamps.
    Now, we need to calculate a time interval between these timestamps. Subtracting
    one timestamp from another does the job. We explicitly define the result variable
    as an `std::chrono::duration` class that tracks a microsecond in a `double` value:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用C++11的`auto`让编译器推断时间戳的数据类型。现在，我们需要计算这些时间戳之间的时间间隔。从一个时间戳减去另一个时间戳就可以完成任务。我们明确将结果变量定义为`std::chrono::duration`类，该类跟踪`double`值中的微秒：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We use another `duration` variable of the same type to hold the previous value.
    On each iteration except the first one, we calculate the difference between these
    two durations:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用另一个相同类型的`duration`变量来保存先前的值。除了第一次迭代之外的每次迭代，我们计算这两个持续时间之间的差异：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The duration and the difference are printed to the Terminal on each iteration.
    When we run the application, we get this output:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在每次迭代中，持续时间和差异都会打印到终端上。当我们运行应用程序时，我们会得到这个输出：
- en: '![](img/ec323f6d-4496-4050-a609-dc90436a90c5.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ec323f6d-4496-4050-a609-dc90436a90c5.png)'
- en: As we can see, modern C++ provides convenient ways of handling time intervals
    in applications. Thanks to overloaded operators, it is easy to get a duration
    between two time points and add, subtract, or compare durations.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，现代C++提供了方便的方法来处理应用程序中的时间间隔。由于重载运算符，很容易获得两个时间点之间的持续时间，并且可以添加、减去或比较持续时间。
- en: There's more...
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Starting from C++20, the Chrono library supports direct writing of durations
    into output streams and parsing durations from input streams. There is no need
    to serialize durations into integer or float values explicitly. This makes handling
    durations even more convenient for C++ developers.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 从C++20开始，Chrono库支持直接将持续时间写入输出流并从输入流中解析持续时间。无需将持续时间显式序列化为整数或浮点值。这使得处理持续时间对于C++开发人员更加方便。
- en: Working with delays
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理延迟
- en: Periodic data processing is a common pattern in many embedded applications.
    The code does not need to work all the time. If we know in advance when processing
    is needed, an application or a worker thread can be inactive most of the time,
    waking up and processing data only when needed. It saves power consumption or
    lets other applications running on the device use the CPU resources when the application
    is idle.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 周期性数据处理是许多嵌入式应用程序中的常见模式。代码不需要一直运行。如果我们预先知道何时需要处理，应用程序或工作线程可以大部分时间处于非活动状态，只有在需要时才唤醒并处理数据。这样可以节省电力消耗，或者在应用程序空闲时让设备上运行的其他应用程序使用CPU资源。
- en: There are several techniques to organize periodic processing. A worker thread
    that runs a loop with a delay in it is one of the simplest and most common of
    them.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种组织周期性处理的技术。运行一个带有延迟的循环的工作线程是其中最简单和最常见的技术之一。
- en: C++ provides standard functions to add a delay to the current execution thread.
    In this recipe, we will learn two ways of adding a delay into an application and
    discuss their pros and cons.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: C++提供了标准函数来向当前执行线程添加延迟。在这个示例中，我们将学习两种向应用程序添加延迟的方法，并讨论它们的优缺点。
- en: How to do it...
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: We are going to create an application with two processing loops. These loops
    use different functions to pause the execution of the current thread.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个具有两个处理循环的应用程序。这些循环使用不同的函数来暂停当前线程的执行。
- en: In your `~/test` working directory, create a subdirectory called `delays`.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的`〜/test`工作目录中，创建一个名为`delays`的子目录。
- en: Use your favorite text editor to create a `delays.cpp` file in the `delays` subdirectory.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的文本编辑器在`delays`子目录中创建一个名为`delays.cpp`的文件。
- en: 'Let''s start by adding a first function, `sleep_for`, along with the necessary
    inclusions:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们首先添加一个名为`sleep_for`的函数，以及必要的包含：
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'It is followed by a second function, `sleep_until`:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它后面是第二个函数`sleep_until`：
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next, add a simple `main` function that invokes them:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，添加一个简单的`main`函数来调用它们：
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Finally, create a `CMakeLists.txt` file containing the build rules for our
    program:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，创建一个`CMakeLists.txt`文件，其中包含我们程序的构建规则：
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You can now build and run the application.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以构建并运行应用程序了。
- en: How it works...
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In our application, we created two functions, `sleep_for` and `sleep_until`.
    They are almost identical, except `sleep_for` uses `std::this_thread::sleep_for`
    to add a delay, while `sleep_until` uses `std::this_thread::sleep_until`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，我们创建了两个函数，`sleep_for`和`sleep_until`。它们几乎相同，只是`sleep_for`使用`std::this_thread::sleep_for`来添加延迟，而`sleep_until`使用`std::this_thread::sleep_until`。
- en: Let's take a closer look at the `sleep_for` function. It takes two parameters—`count`
    and `delay`. The first parameter defines a number of iterations in its loop, and
    the second parameter specifies a delay. We use `auto` as a data type of the `delay`
    parameter, letting C++ infer the actual data type for us.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看看`sleep_for`函数。它接受两个参数——`count`和`delay`。第一个参数定义了循环中的迭代次数，第二个参数指定了延迟。我们使用`auto`作为`delay`参数的数据类型，让C++为我们推断实际的数据类型。
- en: 'The function body consists of a single loop:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 函数体由一个循环组成：
- en: '[PRE15]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'On each iteration, we run the `delay` and measure its actual duration by taking
    timestamps before and after the `delay`. The `std::this_thread::sleep_for` function
    accepts a time interval as a parameter:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在每次迭代中，我们运行`delay`并通过在`delay`之前和之后获取时间戳来测量其实际持续时间。`std::this_thread::sleep_for`函数接受时间间隔作为参数：
- en: '[PRE16]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The actual delay is measured in milliseconds, and we use a `double` value as
    a milliseconds counter:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 实际延迟以毫秒为单位测量，我们使用`double`值作为毫秒计数器：
- en: '[PRE17]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `wait_until` function is only slightly different. It uses the `std::current_thred::wait_until` function,
    which accepts a time point to wake up instead of a time interval. We introduce
    an additional `wake_up` variable to track the wake-up time point:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`wait_until`函数只是稍有不同。它使用`std::current_thred::wait_until`函数，该函数接受一个时间点来唤醒，而不是一个时间间隔。我们引入了一个额外的`wake_up`变量来跟踪唤醒时间点：'
- en: '[PRE18]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Initially, it is set to the current time, and on each iteration, it adds the
    delay passed as a function parameter to its value:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，它被设置为当前时间，并在每次迭代中，将作为函数参数传递的延迟添加到其值中：
- en: '[PRE19]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The rest of the function is identical to the `sleep_for` implementation, except
    the `delay` function:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的其余部分与`sleep_for`实现相同，除了`delay`函数：
- en: '[PRE20]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We run both functions, using the same number of iterations and the same delay.
    Please note how we use C++ string literals to pass milliseconds into the functions
    to make the code more readable. To use string literals, we added the following:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们运行两个函数，使用相同数量的迭代和相同的延迟。请注意我们如何使用C++字符串字面量将毫秒传递给函数，以使代码更易读。为了使用字符串字面量，我们添加了以下内容：
- en: '[PRE21]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This was done above the function definitions, like so:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在函数定义之上完成的，就像这样：
- en: '[PRE22]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Do different delay functions make any difference? We use the same delay in
    both implementations, after all. Let''s run the code and compare the results:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的延迟函数会有什么不同吗？毕竟，我们在两种实现中都使用了相同的延迟。让我们运行代码并比较结果：
- en: '![](img/f3b5c599-d2cd-4f38-9cdc-a5a908f9ce68.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f3b5c599-d2cd-4f38-9cdc-a5a908f9ce68.png)'
- en: Interestingly, we can see that all actual delays for `sleep_for` are greater
    than `100` milliseconds, while some results for `sleep_until` fall below this
    value. Our first function, `delay_for`, does not account for the time needed to
    print data to the console. `sleep_for` is a good choice when you know exactly
    how long you need to wait. However, if your goal is to wake up with specific periodicity,
    `sleep_until` might be a better choice.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，我们可以看到`sleep_for`的所有实际延迟都大于`100`毫秒，而`sleep_until`的一些结果低于这个值。我们的第一个函数`delay_for`没有考虑打印数据到控制台所需的时间。当您确切地知道需要等待多长时间时，`sleep_for`是一个不错的选择。然而，如果您的目标是以特定的周期性唤醒，`sleep_until`可能是一个更好的选择。
- en: There's more...
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are other subtle differences between `sleep_for` and `sleep_until`. The
    system timer is often not too precise and might be adjusted by time synchronization
    services such as **Network Time Protocol** **daemon **(**ntpd**). These clock
    adjustments do not affect `sleep_for`, but `sleep_until` takes them into account.
    Use it if your application relies on a specific time rather than a time interval;
    for example, if you need to redraw the digits on a clock display every second.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`sleep_for`和`sleep_until`之间还有其他微妙的差异。系统定时器通常不太精确，并且可能会被时间同步服务（如**网络时间协议** **守护程序**（**ntpd**））调整。这些时钟调整不会影响`sleep_for`，但会影响`sleep_until`。如果您的应用程序依赖于特定时间而不是时间间隔，请使用它；例如，如果您需要每秒重新绘制时钟显示上的数字。'
- en: Using the monotonic clock
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用单调时钟
- en: 'The C++ Chrono library provides three types of clocks:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: C++ Chrono库提供了三种类型的时钟：
- en: System clock
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统时钟
- en: Steady clock
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 稳定时钟
- en: High-resolution clock
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高分辨率时钟
- en: The high-resolution clock is often implemented as an alias of the system clock
    or the steady clock. The system clock and the steady clock, however, are quite
    different.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 高分辨率时钟通常被实现为系统时钟或稳定时钟的别名。然而，系统时钟和稳定时钟是非常不同的。
- en: The system clock reflects the system time and hence is not monotonic. It can
    be adjusted at any time by time synchronization services such as **Network Time
    Protocol** (**NTP**), and, as a result, can even go backward.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 系统时钟反映系统时间，因此不是单调的。它可以随时通过时间同步服务（如**网络时间协议**（**NTP**））进行调整，因此甚至可以倒退。
- en: This makes the system clock a poor choice for dealing with precise durations.
    The steady clock is monotonic; it is never adjusted and never goes backward. This
    property has its cost—it is not related to wall clock time and is usually represented
    as the time since the last reboot.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得系统时钟成为处理精确持续时间的不良选择。稳定时钟是单调的；它永远不会被调整，也永远不会倒退。这个属性有它的代价——它与挂钟时间无关，通常表示自上次重启以来的时间。
- en: The steady clock should not be used for persistent timestamps that need to remain
    valid after reboots—for example, serialized into a file or saved into a database.
    Also, the steady clock should not be used for any time calculations involving
    time from different sources, such as remote systems or peripheral devices.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 稳定时钟不应该用于需要在重启后保持有效的持久时间戳，例如序列化到文件或保存到数据库。此外，稳定时钟不应该用于涉及来自不同来源的时间的任何时间计算，例如远程系统或外围设备。
- en: In this recipe, we will learn how to use the steady clock to implement a simple
    software watchdog. When running a background worker thread, it is important to
    know if it works correctly or hangs because of a coding error or an unresponsive
    peripheral device. The thread periodically updates a timestamp, while a monitoring
    routine compares the timestamp with the current time, and, if the threshold is
    exceeded, performs a certain recovery action.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将学习如何使用稳定时钟来实现一个简单的软件看门狗。在运行后台工作线程时，重要的是要知道它是否正常工作或因编码错误或无响应的外围设备而挂起。线程定期更新时间戳，而监视例程则将时间戳与当前时间进行比较，如果超过阈值，则执行某种恢复操作。
- en: How to do it...
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: In our application, we are going to create a simple iterative function that
    runs in the background, along with the monitoring loop running in the main thread.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，我们将创建一个在后台运行的简单迭代函数，以及在主线程中运行的监视循环。
- en: In your `~/test` working directory, create a subdirectory called `monotonic`.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的`~/test`工作目录中，创建一个名为`monotonic`的子目录。
- en: Use your favorite text editor to create a `monotonic.cpp` file in the `monotonic` subdirectory.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的文本编辑器在`monotonic`子目录中创建一个`monotonic.cpp`文件。
- en: 'Let''s add headers and define global variables used by our routines:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们添加头文件并定义我们例程中使用的全局变量：
- en: '[PRE23]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'They are followed by the code of the background worker thread routine:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它们后面是后台工作线程例程的代码：
- en: '[PRE24]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Add the `main` function that contains the monitoring routine:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加包含监视例程的`main`函数：
- en: '[PRE25]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Finally, create a `CMakeLists.txt` file containing build rules for our program:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，创建一个包含程序构建规则的`CMakeLists.txt`文件：
- en: '[PRE26]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: You can now build and run the application.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以构建和运行应用程序了。
- en: How it works...
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Our application is multithreaded—it consists of the main thread that runs the
    monitoring and the background worker thread. We use three global variables for
    their synchronization.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序是多线程的——它由运行监视的主线程和后台工作线程组成。我们使用三个全局变量进行同步。
- en: The `touched` variable is holding the timestamp that is to be periodically updated
    by the `Worker` thread. Since the timestamp is accessed by both threads, access
    needs to be protected. We use an `m` mutex for this purpose. Finally, to indicate
    that the worker thread has finished its job, an atomic variable, `ready`, is used.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`touched`变量保存了由`Worker`线程定期更新的时间戳。由于时间戳被两个线程访问，需要进行保护。我们使用一个`m`互斥锁来实现。最后，为了指示工作线程已经完成了它的工作，使用了一个原子变量`ready`。'
- en: 'The worker thread is a loop that contains artificial delays inside. The delay
    is calculated based on the step number, resulting in delays from 100 milliseconds
    to 130 milliseconds:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 工作线程是一个包含人为延迟的循环。延迟是基于步骤编号计算的，导致延迟从100毫秒到130毫秒不等：
- en: '[PRE27]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'On each iteration, the `Worker` thread updates the timestamp. A lock guard
    is used to synchronize access to the timestamp:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在每次迭代中，`Worker`线程更新时间戳。使用锁保护同步访问时间戳：
- en: '[PRE28]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The monitoring routine runs in a loop while the `Worker` thread is running.
    On each iteration, it calculates the time interval between the current time and
    the last update:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 监视例程在`Worker`线程运行时循环运行。在每次迭代中，它计算当前时间和上次更新之间的时间间隔：
- en: '[PRE29]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'If it is larger than the threshold, the function prints a warning message,
    as shown:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果超过阈值，函数会打印警告消息，如下所示：
- en: '[PRE30]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In many cases, applications may invoke a recovery function to reset a peripheral
    device or restart the thread. We add a delay of `10` milliseconds in the monitoring
    loop:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，应用程序可能调用恢复函数来重置外围设备或重新启动线程。我们在监视循环中添加了`10`毫秒的延迟：
- en: '[PRE31]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This helps us to reduce resource consumption yet achieve an acceptable reaction
    time. Running the application produces the following output:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这有助于减少资源消耗，同时实现可接受的反应时间。运行应用程序会产生以下输出：
- en: '![](img/7962b124-e6ed-45a4-b2da-ffa84adf2d9b.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7962b124-e6ed-45a4-b2da-ffa84adf2d9b.png)'
- en: We can see several warnings in the output, indicating that some iterations in
    the `worker` thread took more time than the threshold of `120` milliseconds. It
    is predictable since the `worker` function is written this way. It is important
    that we use a monotonic `std::chrono::steady_clock` function for monitoring purposes.
    Using the system clock could lead to the spurious invocations of the recovery
    function during the clock adjustments.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在输出中看到几个警告，表明`worker`线程中的一些迭代所花费的时间超过了`120`毫秒的阈值。这是可以预料的，因为`worker`函数是这样编写的。重要的是我们用一个单调的`std::chrono::steady_clock`函数进行监视。使用系统时钟可能会导致在时钟调整期间对恢复函数的虚假调用。
- en: There's more...
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: C++20 defines several other types of clocks, such as `gps_clock`, representing **Global
    Positioning System** (**GPS**) time, or `file_clock`, to work with file timestamps.
    These clocks may, or may not, be steady, or monotonic. Use an `is_steady` member
    function to check if a clock is monotonic or not.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: C++20定义了几种其他类型的时钟，比如`gps_clock`，表示**全球定位系统**（**GPS**）时间，或者`file_clock`，用于处理文件时间戳。这些时钟可能是稳定的，也可能不是。使用`is_steady`成员函数来检查时钟是否是单调的。
- en: Using POSIX timestamps
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用POSIX时间戳
- en: POSIX timestamps are a traditional internal representation of time in Unix-based
    operating systems. A POSIX timestamp is defined as the number of seconds since
    the epoch, or 00:00:00 **Coordinated Universal Time** (**UTC**), January 1, 1970.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: POSIX时间戳是Unix操作系统中时间的传统内部表示。POSIX时间戳被定义为自纪元以来的秒数，即**协调世界时**（**UTC**）1970年1月1日的00:00:00。
- en: Because of its simplicity, this representation is widely used in network protocols,
    file metadata, or serialization.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 由于其简单性，这种表示在网络协议、文件元数据或序列化中被广泛使用。
- en: In this recipe, we will learn how to convert C++ time points to POSIX timestamps,
    and create C++ time points from POSIX timestamps.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将学习如何将C++时间点转换为POSIX时间戳，并从POSIX时间戳创建C++时间点。
- en: How to do it...
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: We are going to create an application that converts a time point into a POSIX
    timestamp and then recovers a time point from this timestamp.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个应用程序，将时间点转换为POSIX时间戳，然后从该时间戳中恢复时间点。
- en: In your  `~/test` working directory, create a subdirectory called `timestamps`.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的`~/test`工作目录中，创建一个名为`timestamps`的子目录。
- en: Use your favorite text editor to create a `timestamps.cpp` file in the `timestamps` subdirectory.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你喜欢的文本编辑器在`timestamps`子目录中创建一个名为`timestamps.cpp`的文件。
- en: 'Put the following code snippet into the file:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码片段放入文件中：
- en: '[PRE32]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Create a `CMakeLists.txt` file containing build rules for our program:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含我们程序构建规则的`CMakeLists.txt`文件：
- en: '[PRE33]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: You can now build and run the application.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以构建并运行应用程序。
- en: How it works...
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Firstly, we create a time point object for the current time, using the system
    clock:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用系统时钟为当前时间创建一个时间点对象：
- en: '[PRE34]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Since POSIX timestamps represent the time since the epoch, we cannot use the
    steady clock. The system clock, however, knows how to convert its internal representation
    into POSIX format. It provides a `to_time_t` static function for this purpose:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 由于POSIX时间戳表示自纪元以来的时间，我们不能使用稳定时钟。然而，系统时钟知道如何将其内部表示转换为POSIX格式。它提供了一个`to_time_t`静态函数来实现这个目的：
- en: '[PRE35]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The result is defined as having type `std::time_t`, but this is an integral
    integer type, not an object. Unlike a time point instance, we can write it directly
    into an output stream:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 结果被定义为具有类型`std::time_t`，但这是一个整数类型，而不是对象。与时间点实例不同，我们可以直接将其写入输出流：
- en: '[PRE36]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Let''s try to recover a time point from this integer timestamp. We use a `from_time_t` static
    function:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试从这个整数时间戳中恢复一个时间点。我们使用一个`from_time_t`静态函数：
- en: '[PRE37]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Now, we have two timestamps. Are they the same? Let''s calculate and display
    the difference:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有两个时间戳。它们是相同的吗？让我们计算并显示差异：
- en: '[PRE38]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'When we run the application, we get the following output:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行应用程序时，我们会得到以下输出：
- en: '![](img/1b9142d4-dd21-4eed-a8f0-d2457fd084f2.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1b9142d4-dd21-4eed-a8f0-d2457fd084f2.png)'
- en: The timestamps are different, but the difference is always less than 1,000\.
    Since POSIX timestamps are defined as the number of seconds since the epoch, we
    lost the fine granularity time, such as milliseconds and microseconds.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 时间戳是不同的，但差异始终小于1,000。由于POSIX时间戳被定义为自纪元以来的秒数，我们丢失了毫秒和微秒等细粒度时间。
- en: Despite such limitations, POSIX timestamps remain an important and widely used
    transport representation of time, and we learned how to convert them into an internal
    C++ representation when needed.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管存在这样的限制，POSIX时间戳仍然是时间的重要和广泛使用的传输表示，我们学会了如何在需要时将它们转换为内部C++表示。
- en: There's more...
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In many cases, it is sufficient to work with POSIX timestamps directly. Since
    they are represented as numbers, a simple numeric comparison can be used to decide
    which timestamp is newer or older. Similarly, subtracting one timestamp from another
    gives a time interval in seconds between them. If performance is a bottleneck,
    this approach can be preferable to comparing to native C++ time points.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，直接使用POSIX时间戳就足够了。由于它们被表示为数字，可以使用简单的数字比较来决定哪个时间戳更新或更旧。类似地，从一个时间戳中减去另一个时间戳会给出它们之间的秒数时间间隔。如果性能是一个瓶颈，这种方法可能比与本机C++时间点进行比较更可取。
