- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Conversion Library
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 转换库
- en: Data kept within our computer environment is encoded in a variety of ways. Sometimes,
    it can be used directly for a certain purpose; other times, it needs to be converted
    into another format in order to fit the context of the task. The process of converting
    data from one format into another also varies depending on the source format as
    well as the target format.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的计算机环境中保存的数据以各种方式编码。有时，它可以直接用于某个目的；其他时候，它需要转换为另一种格式，以便适应任务的上下文。将数据从一种格式转换为另一种格式的过程也取决于源格式以及目标格式。
- en: Sometimes, the process can be very complex, especially when dealing with data
    that is feature-rich and sensitive, such as image or video conversion. Even a
    small error during the conversion process may render a file unusable.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，这个过程可能非常复杂，尤其是在处理功能丰富且敏感的数据时，如图像或视频转换。即使在转换过程中出现的小错误也可能使文件无法使用。
- en: 'This chapter will cover the following recipes:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下食谱：
- en: Converting data
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转换数据
- en: Converting images
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转换图像
- en: Converting videos
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转换视频
- en: Converting currency
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转换货币
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The technical requirements for this chapter include Qt 6.6.1 MinGW-64-bit and
    Qt Creator 12.0.2\. All the code used in this chapter can be downloaded from the
    following GitHub repository: [https://github.com/PacktPublishing/QT6-C-GUI-Programming-Cookbook---Third-Edition-/tree/main/Chapter11](https://github.com/PacktPublishing/QT6-C-GUI-Programming-Cookbook---Third-Edition-/tree/main/Chapter11).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的技术要求包括 Qt 6.6.1 MinGW-64 位和 Qt Creator 12.0.2。本章中使用的所有代码都可以从以下 GitHub 仓库下载：[https://github.com/PacktPublishing/QT6-C-GUI-Programming-Cookbook---Third-Edition-/tree/main/Chapter11](https://github.com/PacktPublishing/QT6-C-GUI-Programming-Cookbook---Third-Edition-/tree/main/Chapter11)。
- en: Converting data
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 转换数据
- en: Qt provides a set of classes and functions for easily converting between different
    types of data. This makes Qt more than just a GUI library; it is a complete platform
    for software development. The `QVariant` class, which we will use in the following
    example, makes Qt even more flexible and powerful compared to the similar conversion
    functionalities provided by the C++ standard library.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Qt 提供了一套类和函数，可以轻松地在不同类型的数据之间进行转换。这使得 Qt 不仅仅是一个 GUI 库；它是一个完整的软件开发平台。在以下示例中，我们将使用的
    `QVariant` 类与 C++ 标准库提供的类似转换功能相比，使 Qt 更加灵活和强大。
- en: How to do it…
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'Let’s learn how to convert various data types in Qt by following these steps:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下步骤学习如何在 Qt 中转换各种数据类型：
- en: 'Open **Qt Creator** and create a new **Qt Console Application** project by
    going to **File** | **New Project…**:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 **Qt Creator** 并创建一个新的 **Qt 控制台应用程序**项目，方法是通过 **文件** | **新建项目…**：
- en: '![Figure 11.1 – Create a Qt Console Application project](img/B20976_11_001.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.1 – 创建 Qt 控制台应用程序项目](img/B20976_11_001.jpg)'
- en: Figure 11.1 – Create a Qt Console Application project
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.1 – 创建 Qt 控制台应用程序项目
- en: 'Open `main.cpp` and add the following headers to it:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `main.cpp` 并向其中添加以下头文件：
- en: '[PRE0]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: int numberA = 2;
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: int numberA = 2;
- en: QString numberB = "5";
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: QString numberB = "5";
- en: qDebug() << "1) " << "2 + 5 =" << numberA + numberB.toInt();
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: qDebug() << "1) " << "2 + 5 =" << numberA + numberB.toInt();
- en: '[PRE1]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Convert the number back into a string:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数字转换回字符串：
- en: '[PRE2]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let’s see how to round down a value using `qFloor()`:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们看看如何使用 `qFloor()` 来向下舍入一个值：
- en: '[PRE3]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Using `qCeil()`, we are able to round down a number to the smallest integral
    value not smaller than its initial value:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `qCeil()`，我们可以将一个数字向下舍入到不小于其初始值的最小整数：
- en: '[PRE4]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create a date-time variable by converting it from a piece of date-time data
    written in the string format:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将字符串格式的日期时间数据转换来创建日期时间变量：
- en: '[PRE5]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Convert the date-time variable back into a string with our custom format:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用我们的自定义格式将日期时间变量转换回字符串：
- en: '[PRE6]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Call the `QString::toUpper()` function to convert a string variable into all
    capital letters:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用 `QString::toUpper()` 函数将字符串变量转换为大写字母：
- en: '[PRE7]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Calling `QString::toLower()` will convert the string completely into lowercase:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用 `QString::toLower()` 将字符串完全转换为小写：
- en: '[PRE8]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `QVariant` class provided by Qt is a very powerful data type that can be
    easily converted to other types without any effort from the programmer:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Qt 提供的 `QVariant` 类是一个非常强大的数据类型，可以轻松地转换为其他类型，而无需程序员做任何努力：
- en: '[PRE9]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This demonstrates how a single `QVariant` variable can be simultaneously converted
    to multiple data types without any effort from the programmer:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这演示了单个 `QVariant` 变量如何同时转换为多个数据类型，而无需程序员做任何努力：
- en: '[PRE10]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The full source code in `main.cpp` will now look like this:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`main.cpp` 中的完整源代码现在看起来是这样的：'
- en: '[PRE11]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'After that, let’s add code to convert a string into a number, and vice versa:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，让我们添加代码将字符串转换为数字，反之亦然：
- en: '[PRE12]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Write the code to convert floating-point numbers to their nearest succeeding
    or preceding integer number, respectively:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写代码将浮点数转换为最接近的整数，分别向上取整或向下取整：
- en: '[PRE13]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Convert a string into the date-time format, and vice versa:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将字符串转换为日期时间格式，反之亦然：
- en: '[PRE14]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Continue to add code to convert strings into uppercase or lowercase characters:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续添加代码将字符串转换为大写或小写字符：
- en: '[PRE15]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Convert the `QVariant` data type into other types:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `QVariant` 数据类型转换为其他类型：
- en: '[PRE16]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Convert the `QVariant` data type into `QDateTime` and `QString`:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `QVariant` 数据类型转换为 `QDateTime` 和 `QString`：
- en: '[PRE17]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Compile and run the project, and you should see something like this:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译并运行项目，你应该会看到类似这样的结果：
- en: '![Figure 11.2 – Printing the conversion results on the application output window](img/B20976_11_002.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.2 – 在应用程序输出窗口中打印转换结果](img/B20976_11_002.jpg)'
- en: Figure 11.2 – Printing the conversion results on the application output window
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.2 – 在应用程序输出窗口中打印转换结果
- en: How it works…
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: All the data types provided by Qt, such as `QString`, `QDateTime`, and `QVariant`,
    contain functions that make conversion to other types easy and straightforward.
    Qt also provides its own object conversion function, `qobject_cast()`, which doesn’t
    rely on the standard library. It is also more compatible with Qt and works well
    to convert between Qt’s widget types and data types.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Qt 提供的所有数据类型，如 `QString`、`QDateTime` 和 `QVariant`，都包含使转换到其他类型变得简单直接的函数。Qt 还提供了自己的对象转换函数
    `qobject_cast()`，它不依赖于标准库。它也与 Qt 更为兼容，并且可以很好地在 Qt 的控件类型和数据类型之间进行转换。
- en: Qt also provides you with the `QtMath` class, which helps you to manipulate
    number variables, such as rounding up a floating-point number or converting an
    angle from degrees to radians. `QVariant` is a special class that can be used
    to store data of all kinds of types, such as `int`, `float`, `char`, and `string`.
    It can automatically determine the data type by examining the value stored in
    the variable. You can also easily convert the data into any of the types supported
    by the `QVariant` class by just calling a single function, such as `toFloat()`,
    `toInt()`, `toBool()`, `toChar()`, or `toString()`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Qt 还为你提供了 `QtMath` 类，它可以帮助你操作数字变量，例如向上取整一个浮点数或将角度从度转换为弧度。`QVariant` 是一个特殊类，可以用来存储各种类型的数据，例如
    `int`、`float`、`char` 和 `string`。它可以通过检查变量中存储的值来自动确定数据类型。你还可以通过调用单个函数，如 `toFloat()`、`toInt()`、`toBool()`、`toChar()`
    或 `toString()`，轻松地将数据转换为 `QVariant` 类支持的任何类型。
- en: There’s more…
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: Be aware that each of these conversions takes computing power. Even though modern
    computers are extremely fast at handling these operations, you should be careful
    not to overdo it with a large quantity at once. If you’re converting a large set
    of variables for complex calculations, it might slow down your computer significantly,
    so try to convert variables only when necessary.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这些转换都需要计算能力。尽管现代计算机在处理这些操作方面非常快，但你应该小心不要一次性处理大量数据。如果你正在为复杂计算转换大量变量，这可能会显著减慢你的计算机速度，因此请尽量仅在必要时转换变量。
- en: Converting images
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 转换图像
- en: In this section, we will learn how to build a simple image converter that converts
    an image from one format into another. Qt supports reading and writing different
    types of image formats, and this support comes in the form of external DLL files
    due to licensing issues.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何构建一个简单的图像转换器，它可以将图像从一种格式转换为另一种格式。Qt 支持读取和写入不同类型的图像格式，由于许可问题，这种支持以外部
    DLL 文件的形式提供。
- en: However, you don’t have to worry about that because as long as you include those
    DLL files in your project, it will work seamlessly across different formats. There
    are certain formats that only support reading and not writing, and some that support
    both.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你不必担心这一点，因为只要你在项目中包含那些 DLL 文件，它就可以在不同格式之间无缝工作。某些格式只支持读取而不支持写入，而某些格式则两者都支持。
- en: Note
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You can check out the full details about converting images at [http://doc.qt.io/qt-6/qtimageformats-index.html](http://doc.qt.io/qt-6/qtimageformats-index.html).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [http://doc.qt.io/qt-6/qtimageformats-index.html](http://doc.qt.io/qt-6/qtimageformats-index.html)
    查看有关转换图像的完整详细信息。
- en: How to do it…
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'Qt’s built-in image libraries make image conversion really simple:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Qt 的内置图像库使得图像转换变得非常简单：
- en: Open Qt Creator and create a new **Qt Widgets** **Application** project.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Qt Creator 并创建一个新的 **Qt Widgets** **应用程序** 项目。
- en: 'Open `mainwindow.ui` and add a line edit and push button to the canvas to select
    image files, a combo box to select the desired file format, and another push button
    to start the conversion process:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`mainwindow.ui`并在画布上添加一个用于选择图像文件的文本框和一个按钮，一个用于选择所需文件格式的组合框，以及另一个用于启动转换过程的按钮：
- en: '![Figure 11.3 – Lay out the UI as shown here](img/B20976_11_003.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.3 – 按照此处所示布局 UI](img/B20976_11_003.jpg)'
- en: Figure 11.3 – Lay out the UI as shown here
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.3 – 按照此处所示布局 UI
- en: 'Double-click the combobox, and a window will then appear where you can edit
    the box. We will add three items to the combobox list by clicking the `PNG`, `JPEG`,
    and `BMP`:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击组合框，然后会出现一个窗口，您可以在其中编辑框。我们将通过点击`PNG`、`JPEG`和`BMP`来向组合框列表中添加三项：
- en: '![Figure 11.4 – Adding three options to the combobox](img/B20976_11_004.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.4 – 向组合框添加三个选项](img/B20976_11_004.jpg)'
- en: Figure 11.4 – Adding three options to the combobox
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.4 – 向组合框添加三个选项
- en: 'Right-click on one of the push buttons, select **Go to slot…**, and then click
    the **OK** button. A slot function will be automatically added to your source
    files. Repeat this step for the other push button as well:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击一个按钮，选择**转到槽…**，然后点击**确定**按钮。将自动为您添加一个槽函数。对其他按钮也重复此步骤：
- en: '![Figure 11.5 – Select the clicked() signal and press OK](img/B20976_11_005.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.5 – 选择 clicked() 信号并点击确定](img/B20976_11_005.jpg)'
- en: Figure 11.5 – Select the clicked() signal and press OK
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.5 – 选择 clicked() 信号并点击确定
- en: 'Let’s move over to the source code. Open `mainwindow.h` and add the following
    header:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们转到源代码。打开`mainwindow.h`并添加以下头文件：
- en: '[PRE18]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: void MainWindow::on_browseButton_clicked() {
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: void MainWindow::on_browseButton_clicked() {
- en: QString fileName = QFileDialog::getOpenFileName(this, "Open Image", "", "Image
    Files (*.png *.jpg *.bmp)");
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: QString fileName = QFileDialog::getOpenFileName(this, "Open Image", "", "Image
    Files (*.png *.jpg *.bmp)");
- en: ui->filePath->setText(fileName);
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ui->filePath->setText(fileName);
- en: '}'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE19]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Define what will happen when the **Convert** button is clicked:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义当**转换**按钮被点击时会发生什么：
- en: '[PRE20]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Check which format is used:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查使用的格式：
- en: '[PRE21]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Check whether the image has been converted:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查图像是否已转换：
- en: '[PRE22]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Display the message boxes:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示消息框：
- en: '[PRE23]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Build and run the program now, and we should get a pretty simple image converter
    that looks like this:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在构建并运行程序，我们应该得到一个看起来像这样的简单图像转换器：
- en: '![Figure 11.6 – Browse an image, select a format, and press the Convert button](img/B20976_11_006.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.6 – 浏览图像，选择格式，然后点击转换按钮](img/B20976_11_006.jpg)'
- en: Figure 11.6 – Browse an image, select a format, and press the Convert button
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.6 – 浏览图像，选择格式，然后点击转换按钮
- en: How it works…
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The previous example uses the native `QImage` class from Qt, which contains
    functions that can access pixel data and manipulate it. It is also used to load
    an image file and extract its data through different decompression methods, depending
    on the format of the image.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的例子使用了 Qt 的原生`QImage`类，它包含可以访问像素数据并操作它的函数。它也被用来通过不同的解压缩方法加载图像文件并提取其数据，具体取决于图像的格式。
- en: Once the data is extracted, you can do anything you want with it, such as display
    the image on screen, manipulate its color information, resize the image, or compress
    it with another format and save it as a file.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦数据被提取，您就可以对它做任何您想做的事情，例如在屏幕上显示图像，操作其颜色信息，调整图像大小，或者用另一种格式压缩它并保存为文件。
- en: We used `QFileInfo` to separate the filename from the extension so that we could
    amend the extension name with the new format selected by the user from the combobox.
    This way, we can save the newly converted image in the same folder as the original
    image and automatically give it the same filename as well, except in a different
    format.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了`QFileInfo`来将文件名与扩展名分开，这样我们就可以使用用户从组合框中选择的新的格式来修改扩展名。这样，我们就可以将新转换的图像保存到与原始图像相同的文件夹中，并且自动给它相同的文件名，除了不同的格式。
- en: As long as you’re trying to convert the image to a format supported by Qt, you
    just need to call `QImage::save()`. Internally, Qt will figure out the rest for
    you and output the image to the chosen format. In the `QImage::save()` function,
    there is a parameter that sets the image quality and another that sets the format.
    In this example, we just set both as the default values, which saves the image
    at the highest quality and lets Qt figure out the format by checking the extension
    stated in the output filename.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 只要您尝试将图像转换为 Qt 支持的格式，您只需调用 `QImage::save()`。内部，Qt 会为您处理其余部分并将图像输出到所选格式。在 `QImage::save()`
    函数中，有一个参数用于设置图像质量，另一个参数用于设置格式。在这个例子中，我们只是将两者都设置为默认值，这样图像就会以最高质量保存，并且 Qt 会根据输出文件名中声明的扩展名来确定格式。
- en: There’s more…
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: You can also convert an image into a PDF using the `QPdfWriter` class provided
    by Qt. Essentially, you paint the selected image to the layout of a newly created
    PDF document and set its resolution accordingly.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用 Qt 提供的 `QPdfWriter` 类将图像转换为 PDF。本质上，您将选定的图像绘制到新创建的 PDF 文档的布局中，并相应地设置其分辨率。
- en: Note
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For more information about the `QPdfWriter` class, visit [http://doc.qt.io/qt-6/qpdfwriter.html](http://doc.qt.io/qt-6/qpdfwriter.html).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 想了解更多关于 `QPdfWriter` 类的信息，请访问 [http://doc.qt.io/qt-6/qpdfwriter.html](http://doc.qt.io/qt-6/qpdfwriter.html)。
- en: Converting videos
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 转换视频
- en: In this recipe, we will create a simple video converter using Qt and `QProcess`
    class provided by Qt.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将使用 Qt 和 Qt 提供的 `QProcess` 类创建一个简单的视频转换器。
- en: How to do it…
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Let’s make a simple video converter with the following steps:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下步骤制作一个简单的视频转换器：
- en: Download `FFmpeg` (a static package) from [http://ffmpeg.zeranoe.com/builds](http://ffmpeg.zeranoe.com/builds)
    and extract the contents to your preferred location – for example, `C:/FFmpeg/`.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [http://ffmpeg.zeranoe.com/builds](http://ffmpeg.zeranoe.com/builds) 下载 `FFmpeg`（一个静态包）并将其内容解压到您喜欢的位置
    – 例如，`C:/FFmpeg/`。
- en: Open Qt Creator and create a new **Qt Widgets Application** project by going
    to **File** | **New Project...**.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Qt Creator 并创建一个新的 **Qt Widgets 应用程序** 项目，方法是转到 **文件** | **新建项目...**。
- en: 'Open `mainwindow.ui` – we’re going to work on the program’s user interface.
    Its UI is very similar to the previous example, except that we add an extra text-edit
    widget to the canvas, just under the combobox:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `mainwindow.ui` – 我们将处理程序的用户界面。它的 UI 与之前的例子非常相似，只是我们在组合框下方添加了一个额外的文本编辑小部件：
- en: '![Figure 11.7 – Design your video converter’s UI like this](img/B20976_11_007.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.7 – 按照这样设计你的视频转换器 UI](img/B20976_11_007.jpg)'
- en: Figure 11.7 – Design your video converter’s UI like this
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.7 – 按照这样设计你的视频转换器 UI
- en: 'Double-click the combobox, and then a window will appear to edit the box. We
    will add three items to the combobox list by clicking the `AVI`, `MP4`, and `MOV`:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击组合框，然后会出现一个窗口来编辑该框。我们将通过点击 `AVI`、`MP4` 和 `MOV` 添加三个项目到组合框列表中：
- en: '![Figure 11.8 – Adding three video formats to the combobox](img/B20976_11_008.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.8 – 向组合框添加三个视频格式](img/B20976_11_008.jpg)'
- en: Figure 11.8 – Adding three video formats to the combobox
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.8 – 向组合框添加三个视频格式
- en: Right-click on one of the push buttons, select **Go to slot…**, and then click
    the **OK** button. A slot function will then be automatically added to your source
    files. Repeat this step for the other push button as well.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击其中一个按钮，选择 **转到槽...**，然后点击 **确定** 按钮。然后会自动将槽函数添加到您的源文件中。对其他按钮重复此步骤。
- en: 'Open `mainwindow.h` and add the following headers to the top:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `mainwindow.h` 并将以下头文件添加到顶部：
- en: '[PRE24]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'public:'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'public:'
- en: explicit MainWindow(QWidget *parent = 0);
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: explicit MainWindow(QWidget *parent = 0);
- en: ~MainWindow();
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ~MainWindow();
- en: QProcess* process;
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: QProcess* process;
- en: QString outputText;
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: QString outputText;
- en: QString fileName;
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: QString fileName;
- en: QString outputFileName;
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: QString outputFileName;
- en: '[PRE25]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Add three extra slot functions under the two functions that Qt created for
    us previously in the *Converting* *images* recipe:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在之前 Qt 为我们创建的两个函数（*转换* *图像* 菜单）下添加三个额外的槽函数：
- en: '[PRE26]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Open `mainwindow.cpp` and add the following code to the class constructor:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `mainwindow.cpp` 并在类构造函数中添加以下代码：
- en: '[PRE27]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Define what will happen when the **Browse** button is clicked, which in this
    case is opening up the file dialog to allow us to choose the video file:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义当 **浏览** 按钮被点击时会发生什么，在这种情况下是打开文件对话框以允许我们选择视频文件：
- en: '[PRE28]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Define what will happen if the `FFmpeg`, which will then handle the conversion
    process externally:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义当 `FFmpeg`（它将随后处理转换过程）发生时会发生什么：
- en: '[PRE29]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Check for the file’s format – specifically, whether it’s `.avi`, `.mp4`, or
    `.mov`:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查文件的格式 – 特别是它是否为 `.avi`、`.mp4` 或 `.mov`：
- en: '[PRE30]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Start the conversion using the following code:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码开始转换：
- en: '[PRE31]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Display the message boxes:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示消息框：
- en: '[PRE32]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Tell the program what to do when the conversion process has started:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当转换过程开始时，告诉程序要做什么：
- en: '[PRE33]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Write the slot function that gets called during the conversion process whenever
    `FFmpeg` returns an output to the program:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写在转换过程中`FFmpeg`向程序返回输出时被调用的槽函数：
- en: '[PRE34]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Define the slot function that gets called when the entire conversion process
    has been completed:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义在转换过程完成后被调用的槽函数：
- en: '[PRE35]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Build and run the project, and you should get a simple, yet workable, video
    converter:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建并运行项目，你应该得到一个简单但实用的视频转换器：
- en: '![Figure 11.9 – Your own video converter powered by FFmpeg and Qt](img/B20976_11_009.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![图11.9 – 由FFmpeg和Qt驱动的您的视频转换器](img/B20976_11_009.jpg)'
- en: Figure 11.9 – Your own video converter powered by FFmpeg and Qt
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.9 – 由FFmpeg和Qt驱动的您的视频转换器
- en: How it works…
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The `QProcess` class provided by Qt is used to start external programs and communicate
    with them. In this case, we started `ffmpeg.exe`, located in `C:/FFmpeg/bin/`,
    as a process and started communicating with it. We also sent it a set of arguments
    to tell it what to do when it started. The arguments we used in this example are
    relatively basic – we only told `FFmpeg` the path to the source image and the
    output filename.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: Qt提供的`QProcess`类用于启动外部程序并与它们通信。在本例中，我们将位于`C:/FFmpeg/bin/`的`ffmpeg.exe`作为一个进程启动，并开始与之通信。我们还向它发送了一组参数，告诉它在启动时应该做什么。在这个例子中，我们使用的参数相对基础——我们只告诉`FFmpeg`源图像的路径和输出文件名。
- en: Note
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For more information regarding the argument settings available in `FFmpeg`,
    check out [www.ffmpeg.org/ffmpeg.html](http://www.ffmpeg.org/ffmpeg.html).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 想了解更多关于`FFmpeg`中可用参数设置的信息，请查看[www.ffmpeg.org/ffmpeg.html](http://www.ffmpeg.org/ffmpeg.html)。
- en: '`FFmpeg` does more than just convert video files. You can also use it to convert
    audio files and images.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`FFmpeg`不仅能转换视频文件，还可以用来转换音频文件和图片。'
- en: Note
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For more information regarding all the formats supported by `FFmpeg`, check
    out [https://www.ffmpeg.org/general.html#File-Formats](https://www.ffmpeg.org/general.html#File-Formats).
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 想了解更多关于`FFmpeg`支持的所有格式的信息，请查看[https://www.ffmpeg.org/general.html#File-Formats](https://www.ffmpeg.org/general.html#File-Formats)。
- en: Other than that, you can also play a video or audio file by running `ffplay.exe`,
    located in `C:/FFmpeg/bin`, or print out the information of the video or audio
    file in a human-readable fashion by running `ffprobe.exe`.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还可以通过运行位于`C:/FFmpeg/bin`的`ffplay.exe`播放视频或音频文件，或者通过运行`ffprobe.exe`以人类可读的方式打印视频或音频文件的信息。
- en: Note
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Check out `FFmpeg's` full documentation at [https://www.ffmpeg.org/about.html](https://www.ffmpeg.org/about.html).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://www.ffmpeg.org/about.html](https://www.ffmpeg.org/about.html)查看`FFmpeg`的完整文档。
- en: There’s more…
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: There are lots of things you can do using this method. You’re not limited to
    what Qt provides, and you can break out of such limitations by carefully selecting
    a third-party program that provides what you need. One such example is making
    your own antivirus GUI by utilizing the command-line-only antivirus scanners available
    on the market, such as **Avira ScanCL**, **Panda Antivirus Command Line Scanner**,
    **SAV32CLI**, and **ClamAV**. You can build your own GUI using Qt and essentially
    send commands to the antivirus process to tell it what to do.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方法，您可以做很多事情。您不仅限于Qt提供的内容，而且可以通过仔细选择提供您所需功能的第三方程序来突破这些限制。一个这样的例子是利用市场上仅提供命令行扫描程序的杀毒软件，如**Avira
    ScanCL**、**Panda Antivirus Command Line Scanner**、**SAV32CLI**和**ClamAV**。您可以使用Qt构建自己的GUI，并基本上向杀毒进程发送命令，告诉它要做什么。
- en: Converting currency
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 货币转换
- en: In this example, we will learn how to create a simple currency converter using
    Qt, with the help of an external service provider called **Fixer.io**.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将学习如何使用Qt创建一个简单的货币转换器，借助名为**Fixer.io**的外部服务提供商。
- en: How to do it…
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'Make yourself a currency converter by following these simple steps:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下简单步骤制作自己的货币转换器：
- en: Open Qt Creator and create a new **Qt Widgets Application** project from **File**
    | **New Project...**.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Qt Creator，从**文件** | **新建项目...**创建一个新的**Qt Widgets应用程序**项目。
- en: 'Open the project file (`.pro`) and add the network module to our project:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开项目文件（`.pro`），将网络模块添加到我们的项目中：
- en: '[PRE36]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Add three horizontal layouts, a horizontal line, and a push button to the canvas.
    Left-click on the canvas, and continue by clicking the `Convert`. The UI should
    look something like this:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向画布添加三个水平布局、一条水平线和一个推按钮。在画布上左键单击，然后通过点击 `Convert` 继续操作。UI 应该看起来像这样：
- en: '![Figure 11.10 – Place three vertical layouts above the Convert button](img/B20976_11_010.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.10 – 在转换按钮上方放置三个垂直布局](img/B20976_11_010.jpg)'
- en: Figure 11.10 – Place three vertical layouts above the Convert button
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.10 – 在转换按钮上方放置三个垂直布局
- en: 'Add two labels to the top layout, and set the text of the left one to `From:`,
    followed by the right one to `To:`. Add two `1`:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在顶部布局中添加两个标签，并将左侧标签的文本设置为 `From:`，右侧标签的文本设置为 `To:`。添加两个 `1`：
- en: '![Figure 11.11 – Add labels and Line Edit widgets to the layouts](img/B20976_11_011.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.11 – 向布局中添加标签和行编辑小部件](img/B20976_11_011.jpg)'
- en: Figure 11.11 – Add labels and Line Edit widgets to the layouts
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.11 – 向布局中添加标签和行编辑小部件
- en: 'Select the line edit on the right and enable the **readOnly** checkbox located
    in the **Property** pane:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择右侧的行编辑，并在 **属性** 面板中启用 **只读** 复选框：
- en: '![Figure 11.12 – Enable the readOnly property for the second line edit](img/B20976_11_012.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.12 – 为第二个行编辑启用只读属性](img/B20976_11_012.jpg)'
- en: Figure 11.12 – Enable the readOnly property for the second line edit
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.12 – 为第二个行编辑启用只读属性
- en: 'Set the cursor property to **Forbidden** so that users know it’s not editable
    when hovering the mouse over the widget:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将光标属性设置为 **禁止**，以便用户知道在鼠标悬停在控件上时它不可编辑：
- en: '![Figure 11.13 – Display the Forbidden cursor to let users know it’s disabled](img/B20976_11_013.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.13 – 显示禁止光标以让用户知道它已被禁用](img/B20976_11_013.jpg)'
- en: Figure 11.13 – Display the Forbidden cursor to let users know it’s disabled
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.13 – 显示禁止光标以让用户知道它已被禁用
- en: 'Add two comboboxes to the third layout located at the bottom. We will leave
    them empty for now:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在底部布局的第三个布局中添加两个组合框。我们现在将它们留空：
- en: '![Figure 11.14 – Add two comboboxes to the final layout](img/B20976_11_014.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.14 – 向最终布局添加两个组合框](img/B20976_11_014.jpg)'
- en: Figure 11.14 – Add two comboboxes to the final layout
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.14 – 向最终布局添加两个组合框
- en: Right-click on the `clicked()` signal as the selection and click `mainwindow.h`
    and `mainwindow.cpp`.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击 `clicked()` 信号作为选择，并点击 `mainwindow.h` 和 `mainwindow.cpp`。
- en: 'Open `mainwindow.h` and make sure the following headers are added to the top
    of the source file:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `mainwindow.h` 并确保以下头文件被添加到源文件顶部：
- en: '[PRE37]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'private slots:'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 私有槽位：
- en: void on_convertButton_clicked();
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: void on_convertButton_clicked();
- en: void finished(QNetworkReply* reply);
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: void finished(QNetworkReply* reply);
- en: '[PRE38]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Add two variables under the `private` label:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `private` 标签下添加两个变量：
- en: '[PRE39]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Open the `mainwindow.cpp` file. Add several currency short code to both comboboxes
    in the class constructor. Set a validator to the `finished()` signal to our `finished()`
    slot function:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `mainwindow.cpp` 文件。在类构造函数中向两个组合框添加几个货币简码。将验证器设置到 `finished()` 信号到我们的 `finished()`
    槽函数：
- en: '[PRE40]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'We continue from the previous code and insert the currency short forms into
    the comboboxes. Then, we declare a new network access manager and connect its
    finished signal to our custom slot function:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们从前面的代码继续，并将货币简写形式插入到组合框中。然后，我们声明一个新的网络访问管理器，并将其 finished 信号连接到我们的自定义槽函数：
- en: '[PRE41]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Define what will happen if the **Convert** button is clicked by the user:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义当用户点击 **转换** 按钮时会发生什么：
- en: '[PRE42]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Start the request by calling `get()`:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过调用 `get()` 来启动请求：
- en: '[PRE43]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Define what will happen when the `finished()` signal is triggered:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义当 `finished()` 信号被触发时会发生什么：
- en: '[PRE44]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Continue to write the code from the preceding code, as shown in the following
    snippet:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续编写前面的代码，如下面的代码片段所示：
- en: '[PRE45]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Compile and run the project, and then you should get a simple currency converter
    that looks like this:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译并运行项目，然后你应该得到一个看起来像这样的简单货币转换器：
- en: '![Figure 11.15 – A usable currency converter is complete](img/B20976_11_015.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.15 – 一个可用的货币转换器已完成](img/B20976_11_015.jpg)'
- en: Figure 11.15 – A usable currency converter is complete
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.15 – 一个可用的货币转换器已完成
- en: How it works…
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Similar to the previous example we saw, which uses an external program to achieve
    a specific task, this time we used an external service provider that provided
    us with an open **Application Programming Interface** (**API**) that is free for
    all and easy to use.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们之前看到的示例类似，该示例使用外部程序来完成特定任务，这次我们使用了一个外部服务提供商，它为我们提供了一个对所有用户免费且易于使用的 **应用程序编程接口**
    (**API**)。
- en: This way, we don’t have to think about the method used to retrieve the latest
    currency rate. Instead, the service provider has already done the job for us;
    we just have to send a polite request for it. Then, we wait for the response from
    their server and process the data according to our intended purposes.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们就不必考虑获取最新货币汇率的方法。相反，服务提供商已经为我们完成了这项工作；我们只需礼貌地请求它。然后，我们等待从他们的服务器返回的响应，并根据我们的目的处理数据。
- en: There are quite a few different service providers you can choose from, besides
    Fixer.io ([http://fixer.io](http://fixer.io)). Some are free but come without
    any advanced features; some provide you with a premium price. Some of these alternatives
    are **Open Exchange Rates** ([https://openexchangerates.org](https://openexchangerates.org)),
    the **currencylayer API** ([https://currencylayer.com](https://currencylayer.com)),
    the **Currency API** ([https://currency-api.appspot.com](https://currency-api.appspot.com)),
    the **XE Currency Data API** ([http://www.xe.com/xecurrencydata](http://www.xe.com/xecurrencydata)),
    and **jsonrates** ([http://jsonrates.com](http://jsonrates.com)).
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 除了Fixer.io ([http://fixer.io](http://fixer.io))之外，您还可以选择相当多的不同服务提供商。有些是免费的，但没有任何高级功能；有些提供您以高端价格。这些替代方案中的一些是**Open
    Exchange Rates** ([https://openexchangerates.org](https://openexchangerates.org))、**currencylayer
    API** ([https://currencylayer.com](https://currencylayer.com))、**Currency API**
    ([https://currency-api.appspot.com](https://currency-api.appspot.com))、**XE Currency
    Data API** ([http://www.xe.com/xecurrencydata](http://www.xe.com/xecurrencydata))和**jsonrates**
    ([http://jsonrates.com](http://jsonrates.com))。
- en: In the previous code, you should have noticed an access key being passed to
    the Fixer.io API, which is a free access key I registered for this tutorial. If
    you use it for your own project, you should create an account at Fixer.io.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的代码中，您应该已经注意到一个访问密钥被传递给了Fixer.io API，这是我为此教程注册的一个免费访问密钥。如果您将其用于自己的项目，您应该在Fixer.io上创建一个账户。
- en: There’s more…
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Besides currency exchange rates, you can use this method to execute more advanced
    tasks that are perhaps too complicated to do by yourself, or are simply impossible
    to access unless you use the services provided by specialists, such as programmable
    **Short Message Service** (**SMS**) and voice services, web analytics and statistics
    generation, and online payment gateways. Most of these services are not free,
    but you can easily achieve those functions in minutes without even setting up
    the server infrastructure and backend system; it’s definitely the cheapest and
    fastest way to get your product up and running without much hassle.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 除了货币汇率，您还可以使用这种方法执行更高级的任务，这些任务可能太复杂而无法自行完成，或者除非您使用专家提供的服务，否则根本无法访问，例如可编程的**短信服务**（**SMS**）和语音服务、网站分析和统计数据生成，以及在线支付网关。大多数这些服务都不是免费的，但您可以在几分钟内轻松实现这些功能，甚至无需设置服务器基础设施和后端系统；这绝对是快速且成本最低的方式，让您的产品快速运行而无需太多麻烦。
