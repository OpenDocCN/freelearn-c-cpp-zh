- en: Additional Topics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他主题
- en: Congratulations! The projects you've built in this book have started you on
    the road to becoming a Godot expert. However, you've only just scratched the surface
    of what's possible in Godot. As you become more proficient, and the size of your
    projects grows, you'll need to know how to find solutions to your problems, how
    to distribute your games so they can be played, and even how to extend the engine
    yourself.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！在这本书中你构建的项目让你开始走上成为 Godot 专家的道路。然而，你只是刚刚触及了 Godot 可能性的表面。随着你技能的提高，以及项目规模的扩大，你需要知道如何找到解决问题的方案，如何分发你的游戏以便他人可以玩，甚至如何扩展引擎本身。
- en: 'In this chapter, you''ll learn about the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将了解以下主题：
- en: How to effectively use Godot's built-in documentation
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何有效地使用 Godot 内置的文档
- en: Exporting projects to run on other platforms
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将项目导出以在其他平台上运行
- en: Using other programming languages in Godot
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Godot 中使用其他编程语言
- en: How to use Godot's asset library to install plugins
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 Godot 的资产库安装插件
- en: Becoming a Godot contributor
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成为 Godot 贡献者
- en: Community resources
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 社区资源
- en: Using Godot's documentation
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Godot 的文档
- en: 'Learning Godot''s API can seem overwhelming at first. How can you learn all
    the different nodes, and the properties and methods each one contains? Fortunately,
    Godot''s built-in documentation is there to help you. Develop the habit of using
    it often: it will help you find things when you''re learning, but it''s also a
    great way to quickly look up a method or property for reference once you know
    your way around.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 学习 Godot 的 API 最初可能会感觉令人压倒。你该如何学习所有不同的节点，以及每个节点包含的属性和方法呢？幸运的是，Godot 内置的文档可以帮助你。养成经常使用它的习惯：在学习过程中，它将帮助你找到所需内容；而且，当你熟悉环境后，快速查阅方法或属性也是一个很好的方式。
- en: 'When you are in the Script tab of the editor, you''ll see the following buttons
    in the upper-right corner:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在编辑器的“脚本”选项卡中时，你会在右上角看到以下按钮：
- en: '![](img/00175.jpeg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00175.jpeg)'
- en: The Online Docs button will open the documentation website in your browser.
    If you have a multimonitor setup, it can be very useful to keep the API reference
    open on one side for quick reference while you're working in Godot.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: “在线文档”按钮将在你的浏览器中打开文档网站。如果你有多个显示器设置，保持 API 参考在一边以便快速查阅，当你正在 Godot 中工作时，这会非常有用。
- en: 'The other two buttons allow you to view the documentation directly in the Godot
    editor. The Classes button allows you to browse through the available node and
    object types, while the Search Help button lets you search for any method or property
    name. Both searches are *smart*, meaning you can type part of a word and the results
    will be narrowed down as you type. Take a look at the following screenshot:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 另外两个按钮允许你在 Godot 编辑器中直接查看文档。“类”按钮允许你浏览可用的节点和对象类型，而“搜索帮助”按钮则允许你搜索任何方法或属性名称。这两个搜索都是“智能”的，这意味着你可以输入单词的一部分，随着你输入，结果会逐渐缩小。请看以下截图：
- en: '![](img/00176.jpeg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00176.jpeg)'
- en: When you find the property or method you're looking for, click Open and the
    documentation reference for that node will appear.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当你找到所需的属性或方法时，点击“打开”，该节点的文档引用将出现。
- en: Reading the API documentation
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 阅读API文档
- en: 'When you''ve found the documentation for the node you want, you''ll see that
    it follows a common format, with the name of the node at the top followed by several
    subsections of information, as shown in the following screenshot:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当你找到你想要的节点文档时，你会看到它遵循一个常见的格式，顶部是节点的名称，然后是几个信息子节，如下面的截图所示：
- en: '![](img/00177.jpeg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00177.jpeg)'
- en: 'At the top of the document is a list titled Inherits, which shows you the chain
    of classes that a particular node is built from all the way back to `Object`,
    which is Godot''s base object class. For example, an `Area2D` node has the following
    inheritance chain:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 文档顶部有一个名为“Inherits”的列表，它显示了特定节点从“Object”（Godot 的基础对象类）开始的所有类继承链。例如，一个 `Area2D`
    节点具有以下继承链：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This lets you quickly see what other properties this type of object may have.
    You can click on any of the node names to jump to that node's documentation.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这让你可以快速查看此类对象可能具有的其他属性。你可以点击任何节点名称以跳转到该节点的文档。
- en: You can also see a list of what node types, if any, inherit from that particular
    node, as well as a general description of the node. Below that, you can see the
    member variables and methods of the node. The names of most methods and types
    are links, so you can click on any item to read more about it.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以查看哪些节点类型（如果有）继承自特定节点，以及节点的一般描述。下面，您可以查看节点的成员变量和方法。大多数方法和类型名称是链接，因此您可以点击任何项目以了解更多信息。
- en: Develop the habit of consulting the API documentation regularly as you work.
    You'll find that you will quickly begin to develop a stronger understanding of
    how everything works together.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在您工作的过程中，养成定期查阅API文档的习惯。您会发现您将很快开始更深入地理解一切是如何协同工作的。
- en: Exporting projects
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导出项目
- en: Eventually, your project will reach the stage where you want to share it with
    the world. *Exporting* your project means converting it into a package that can
    be run by someone who doesn't have the Godot editor. You can export your project
    for a number of popular platforms.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，您的项目将达到您希望与世界分享的阶段。*导出*您的项目意味着将其转换为没有Godot编辑器的人可以运行的一个包。您可以为许多流行的平台导出您的项目。
- en: 'At the time of writing, Godot supports the following target platforms:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，Godot支持以下目标平台：
- en: Windows Universal
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows通用
- en: Windows Desktop
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows桌面
- en: macOS
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: macOS
- en: Linux
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux
- en: Android (mobile)
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android (移动端)
- en: iOS (mobile)
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: iOS (移动端)
- en: HTML5 (web)
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML5 (网页)
- en: The method for exporting the project varies depending on the platform you are
    targeting. For example, to export for iOS, you must be running on a macOS computer
    with Xcode installed.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 导出项目的具体方法取决于您要针对的平台。例如，要导出iOS，您必须在安装了Xcode的macOS计算机上运行。
- en: Each platform is unique, and some features of your game may not work on some
    platforms because of hardware limitations, screen size, or other factors. As an
    example, if you wanted to export the Coin Dash game (from [Chapter 1](part0022.html#KVCC0-5809b3bef8d2453086d97dfad17b2ee2),
    *Introduction*) for the Android platform, your player wouldn't be able to move
    because the keyboard controls wouldn't work! For that platform, you would need
    to include touchscreen controls in your game's code (more about this later).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 每个平台都是独特的，由于硬件限制、屏幕尺寸或其他因素，您的游戏的一些功能可能在某些平台上无法工作。例如，如果您想将“Coin Dash”游戏（来自[第1章](part0022.html#KVCC0-5809b3bef8d2453086d97dfad17b2ee2)，*简介*）导出为Android平台，您的玩家将无法移动，因为键盘控制将不起作用！对于该平台，您需要在游戏代码中包含触摸屏控制（关于这一点稍后会有更多介绍）。
- en: You may even find that you need to set different values in Project Settings
    for different platforms. You can do this by selecting the setting and clicking
    Override For....This will create a new setting specific to that platform.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您甚至可能发现需要为不同的平台在项目设置中设置不同的值。您可以通过选择设置并点击“为...覆盖”来完成此操作。这将创建一个针对该平台的新设置。
- en: 'For example, if you want to enable HiDPI support, but not allow it for Android,
    you can create an override for that setting:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您想启用HiDPI支持，但不允许Android使用，您可以为此设置创建一个覆盖：
- en: '![](img/00178.jpeg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00178.jpeg)'
- en: Every platform is unique, and there are many factors to consider when configuring
    your project for export. Consult the official documentation for the latest instructions
    on exporting to your desired platform.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 每个平台都是独特的，在配置项目以导出时需要考虑许多因素。请查阅官方文档以获取有关导出到您所需平台的最新说明。
- en: Getting the export templates
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取导出模板
- en: '*Export templates* are versions of Godot that are compiled for each target
    platform, but don''t include the editor. Your project will be combined with the
    target platform''s template to create a standalone application.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*导出模板*是针对每个目标平台编译的Godot版本，但不包括编辑器。您的项目将与目标平台的模板结合以创建一个独立的应用程序。'
- en: 'To begin, you must download the export templates. Click on Manage Export Templates
    from the Editor menu:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，您必须下载导出模板。从编辑器菜单中点击“管理导出模板”：
- en: '![](img/00179.jpeg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00179.jpeg)'
- en: 'In this window, you can click Download to fetch the export templates:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在此窗口中，您可以点击下载以获取导出模板：
- en: '![](img/00180.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00180.jpeg)'
- en: Templates can also be downloaded from the Godot website at [http://godotengine.org/download](http://godotengine.org/download).
    If you choose to do this, use the Install From File button to complete the installation.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以从Godot网站[http://godotengine.org/download](http://godotengine.org/download)下载模板。如果您选择这样做，请使用“从文件安装”按钮来完成安装。
- en: The template's version must match the version of Godot you are using. If you
    upgrade to a new version of Godot, make sure that you also download the corresponding
    templates, or your exported project may not work properly.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 模板的版本必须与您使用的 Godot 版本相匹配。如果您升级到 Godot 的新版本，请确保您也下载了相应的模板，否则您的导出项目可能无法正常工作。
- en: Export presets
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导出预设
- en: 'When you''re ready to export your project, click on Project | Export:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当您准备好导出项目时，点击“项目”|“导出”：
- en: '![](img/00181.jpeg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00181.jpeg)'
- en: In this window, you can create *presets* for each platform by clicking Add...
    and selecting the platform from the list. You can make as many presets for each
    platform as you wish. For example, you may want to create both Debug and Release
    versions of your projects.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在此窗口中，您可以通过点击“添加...”并从列表中选择平台来为每个平台创建“预设”。您可以为每个平台创建尽可能多的预设。例如，您可能希望为项目创建调试和发布版本。
- en: Each platform has its own settings and options, too many to describe here. The
    default values are typically good, but you should test them thoroughly before
    distributing the project.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 每个平台都有自己的设置和选项，太多无法在此描述。默认值通常很好，但在分发项目之前，您应该彻底测试它们。
- en: 'In the Resources tab, you can customize which portions of your project are
    exported. For example, you can choose to only export selected scenes or to exclude
    certain source files from the project:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在“资源”标签中，您可以自定义要导出的项目部分。例如，您可以选择仅导出选定的场景或从项目中排除某些源文件：
- en: '![](img/00182.jpeg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00182.jpeg)'
- en: The Patches tab allows you to create updates for your previously exported projects.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: “补丁”标签允许您为之前导出的项目创建更新。
- en: 'Finally, the Features tab displays a summary of the features (configured in
    the Options tab) for the platform. These features can determine which properties
    are customized by the Override value in the Project Settings:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，“功能”标签会显示（在“选项”标签中配置的）平台的功能摘要。这些功能可以确定哪些属性由项目设置中的“覆盖”值自定义：
- en: '![](img/00183.jpeg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00183.jpeg)'
- en: Exporting
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导出
- en: There are two export buttons at the bottom of the window. The first button, Export
    PCK/Zip, will only create a PCK, or packed, version of your project's data. This
    doesn't include an executable, so the game can't be run on its own. This method
    is useful if you need to provide add-ons or DLC (downloadable content) for your
    game.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 窗口底部有两个导出按钮。第一个按钮“导出 PCK/Zip”将仅创建项目数据的 PCK 或打包版本。这不包括可执行文件，因此游戏不能独立运行。此方法适用于您需要为游戏提供附加组件或
    DLC（可下载内容）的情况。
- en: The second button, Export Project, will create an executable version of your
    game, such as an `.exe` for Windows or an `.apk` for Android.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个按钮“导出项目”将创建游戏的可执行版本，例如 Windows 的 `.exe` 或 Android 的 `.apk`。
- en: Click Save and you will have a playable version of your game.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“保存”，您将拥有一个可玩的游戏版本。
- en: Example – Coin Dash for Android
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例 – Android 平台的 Coin Dash
- en: If you have an Android device, you can follow this example to export the Coin
    Dash game for mobile platforms. For other platforms, see Godot's documentation
    at [http://docs.godotengine.org/en/latest/getting_started/workflow/export](http://docs.godotengine.org/en/latest/getting_started/workflow/export).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您拥有安卓设备，您可以按照此示例将 Coin Dash 游戏导出为移动平台。对于其他平台，请参阅 Godot 的文档，链接为 [http://docs.godotengine.org/en/latest/getting_started/workflow/export](http://docs.godotengine.org/en/latest/getting_started/workflow/export)。
- en: Mobile devices come with a wide variety of capabilities. Always consult the
    official documentation in the preceding link for information on your platform
    and what restrictions, if any, may apply to your device. In most cases, Godot's
    default settings will work, but mobile development is sometimes more art than
    science, and you may need to do some experimenting and searching for help in order
    to get everything working.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 移动设备具有各种各样的功能。始终参考前述链接中的官方文档，以获取有关您平台的信息以及可能适用于您的设备的任何限制。在大多数情况下，Godot 的默认设置将适用，但移动开发有时更像是一门艺术而非科学，您可能需要进行一些实验并寻找帮助，以便让一切正常工作。
- en: Modifying the game
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改游戏
- en: 'Because the game as written in this chapter uses keyboard controls, you won''t
    be able to play on a mobile device without making some changes. Fortunately, Godot
    has support for touchscreen input. First, open Project Settings, and in the Display/Window
    section, make sure Orientation is set to portrait and Emulate Touchscreen is On.
    This will let you test the program on your computer by treating mouse clicks as
    touch events:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 因为本章编写的游戏使用键盘控制，所以如果不做些修改，你将无法在移动设备上玩游戏。幸运的是，Godot支持触摸屏输入。首先，打开项目设置，在“显示/窗口”部分，确保“方向”设置为纵向，并开启“模拟触摸屏”。这将允许你通过将鼠标点击视为触摸事件来在计算机上测试程序：
- en: '![](img/00184.jpeg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00184.jpeg)'
- en: 'Next, you need to change the player controls. Instead of using the four direction
    inputs, the player will move toward the position of the touch event. Change the
    player script as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要更改玩家控制。不再使用四个方向输入，玩家将移动到触摸事件的位置。按照以下方式更改玩家脚本：
- en: '[PRE1]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Try it out and make sure that mouse clicks are causing the player to move. If
    everything is working, you're ready to set up your computer for Android development.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试一下，确保鼠标点击会导致玩家移动。如果一切正常，你就可以为安卓开发设置你的计算机了。
- en: Preparing your system
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备你的系统
- en: In order to export your project to Android, you'll need to download the Android
    **software development kit** (**SDK**) from [https://developer.android.com/studio/](https://developer.android.com/studio/)
    and the **Java Development Kit** (**JDK**) from [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将你的项目导出到安卓，你需要从[https://developer.android.com/studio/](https://developer.android.com/studio/)下载安卓**软件开发工具包**（**SDK**）和从[http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html)下载**Java开发工具包**（**JDK）**：
- en: 'When you run Android Studio for the first time, click on Configure | SDK Manager
    and make sure that you install Android SDK Platform-Tools:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当你第一次运行Android Studio时，点击“配置”|“SDK管理器”，并确保安装Android SDK Platform-Tools：
- en: '![](img/00185.jpeg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00185.jpeg)'
- en: This will install the `adb` command-line tool, which Godot uses to communicate
    with your device.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装`adb`命令行工具，Godot使用它来与你的设备通信。
- en: 'After you''ve installed the development tools, create a debug keystore by running
    the following command:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 安装开发工具后，通过运行以下命令创建一个调试密钥库：
- en: '[PRE2]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In Godot, click on Editor | Editor Settings, find the Export/Android section,
    and set the paths to the applications on your system. Note that you''ll only have
    to do this once, as the editor settings are independent of the project settings:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在Godot中，点击“编辑器”|“编辑器设置”，找到“导出/安卓”部分，并设置系统上应用程序的路径。请注意，你只需做一次，因为编辑器设置与项目设置是独立的：
- en: '![](img/00186.jpeg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00186.jpeg)'
- en: Exporting
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导出
- en: 'You''re now ready to export. Click on Project | Export and add a preset for
    Android (see the previous section). Click the Export Project button and you''ll
    have an **Android Package Kit** (**APK**) you can install on your device. You
    can do this with a graphical tool or from the command line using `adb`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以导出了。点击“项目”|“导出”，并为安卓添加一个预设（参见上一节）。点击“导出项目”按钮，你将得到一个可以安装在你设备上的**安卓包工具包**（**APK**）。你可以使用图形工具或通过命令行使用`adb`来完成此操作：
- en: '[PRE3]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Note that if your system supports it, connecting a compatible Android device
    will cause the one-click deploy button to appear in the Godot editor:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果你的系统支持，连接一个兼容的安卓设备将导致一键部署按钮在Godot编辑器中显示：
- en: '![](img/00187.jpeg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00187.jpeg)'
- en: 'Clicking this button will export the project and install it on your device
    in one step. Your device may need to be in developer mode for this to happen:
    consult your device''s documentation for details.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 点击此按钮将导出项目并在你的设备上一步安装。你的设备可能需要处于开发者模式才能完成此操作：请查阅你的设备文档以获取详细信息。
- en: Shaders
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 着色器
- en: A *shader* is a program that is designed to run in the GPU, and alters the way
    that objects appear on the screen. Shaders are used extensively in both 2D and
    3D development to create a variety of visual effects. They are called shaders
    because they were originally used for shading and lighting effects, but today
    they are used for any number of visual effects. Because they run in the GPU in *parallel*,
    they are very fast, but also come with some restrictions.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**着色器**是一个设计在GPU上运行的程序，它改变了物体在屏幕上显示的方式。着色器在2D和3D开发中被广泛使用，以创建各种视觉效果。它们被称为着色器，因为它们最初用于着色和光照效果，但如今它们被用于各种视觉效果。因为它们在GPU中**并行**运行，所以它们非常快，但也带来了一些限制。'
- en: This section is a very brief introduction to the concept of shaders. For a more
    in-depth understanding, see [https://thebookofshaders.com/](https://thebookofshaders.com/)
    and Godot's shader documentation at [http://docs.godotengine.org/en/latest/tutorials/shading/shading_language.html](http://docs.godotengine.org/en/latest/tutorials/shading/shading_language.html).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 本节是对着色器概念的简要介绍。要深入了解，请参阅[https://thebookofshaders.com/](https://thebookofshaders.com/)和Godot的着色器文档[http://docs.godotengine.org/en/latest/tutorials/shading/shading_language.html](http://docs.godotengine.org/en/latest/tutorials/shading/shading_language.html)。
- en: In Godot 3.0, shaders are written in a language very similar to GLSL ES 3.0\.
    If you are familiar with C, you will find the syntax very similar. If you are
    not, it may look strange to you at first. See the end of this section for links
    to further resources where you can learn more.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在Godot 3.0中，着色器是用与GLSL ES 3.0非常相似的语言编写的。如果你熟悉C语言，你会发现语法非常相似。如果你不熟悉，一开始可能会觉得有些奇怪。请参阅本节末尾的链接，以获取更多学习资源。
- en: 'Shaders in Godot come in three types: **spatial** (for 3D rendering), **canvas
    item** (for 2D), and **particles** (for rendering particle effects). The first
    line of your shader must declare which of these types you are writing.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Godot中的着色器分为三种类型：**空间**（用于3D渲染）、**画布项**（用于2D）和**粒子**（用于渲染粒子效果）。你的着色器第一行必须声明你正在编写哪种类型。
- en: After determining the type of shader, you have another three choices of what render
    phase(s) you want to affect: fragment, vertex, and/or light. Fragment shaders
    are used to set the color of every affected pixel. Vertex shaders are used to
    modify the vertices of a shape or mesh (and thus are typically used more in 3D
    applications). Finally, light shaders are applied to alter the way light is processed
    for an object.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在确定着色器类型后，你还有三个选择来决定你想要影响的渲染阶段：片段、顶点以及/或光线。片段着色器用于设置每个受影响像素的颜色。顶点着色器用于修改形状或网格的顶点（因此通常在3D应用程序中使用得更多）。最后，光线着色器用于改变对象处理光线的方式。
- en: After choosing the type(s) of your shader, you will then write code that will
    be run *simultaneously* on every affected item. This is where the real power of
    shaders comes from. For example, when using a fragment shader, the code is run
    on every pixel of the object at the same time. This is a very different process
    than what you might be used to using a traditional language, where you would loop
    over each pixel one at a time. That kind of sequential code just isn't fast enough
    to handle the huge number of pixels modern games need to process.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择你的着色器类型后，你将编写将在每个受影响的项目上**同时**运行的代码。这就是着色器的真正威力所在。例如，当使用片段着色器时，代码将在对象的每个像素上同时运行。这与使用传统语言时你可能习惯的过程非常不同，在传统语言中，你会逐个遍历每个像素。这种顺序代码的速度不足以处理现代游戏需要的巨大像素数量。
- en: 'Consider a game running at the relatively low resolution of 480 x 720\. The
    total number of pixels on the screen is almost 350,000\. Any manipulation of those
    pixels in code must happen in less than 1/60 of a second to avoid lag—even less
    when you consider the rest of your code that also has to run for every frame:
    game logic, animation, networking, and everything else. This is why GPUs are so
    important, especially for high-end games that may be processing millions of pixels
    for each frame.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个以相对较低的分辨率480 x 720运行的游戏。屏幕上的像素总数接近350,000。在代码中对这些像素的任何操作必须在不到1/60秒内完成，以避免延迟——当你考虑到还需要为每一帧运行的其他代码：游戏逻辑、动画、网络和所有其他内容时，这个时间会更短。这就是为什么GPU如此重要的原因，尤其是对于可能为每一帧处理数百万像素的高端游戏。
- en: Creating a shader
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建着色器
- en: 'To demonstrate some shader effects, create a scene with a `Sprite` node and
    choose any texture you like. This demo will use the cactus image from Coin Dash:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示一些着色器效果，创建一个带有`Sprite`节点的场景并选择你喜欢的任何纹理。这个演示将使用Coin Dash中的仙人掌图像：
- en: '![](img/00188.jpeg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00188.jpeg)'
- en: A shader can be added to any `CanvasItem` derived node—in this case, `Sprite`,
    via its Material property. In this property, select New Shader Material and click
    on the newly created resource. The first property is Shader, where you can choose
    a New Shader. When you do, a Shader panel appears at the bottom of the editor
    window.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 着色器可以添加到任何由`CanvasItem`派生的节点中——在这个例子中，通过其`Material`属性添加到`Sprite`中。在这个属性中，选择“新建着色器材料”并点击新创建的资源。第一个属性是“着色器”，在这里你可以选择“新建着色器”。当你这样做时，编辑器窗口底部会出现一个着色器面板。
- en: 'This is where you''ll write your shader code:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你将编写着色器代码的地方：
- en: '![](img/00189.jpeg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00189.jpeg)'
- en: 'A blank shader looks like the following:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 一个空的着色器看起来如下所示：
- en: '[PRE4]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: For the purposes of this example, you'll be coding a 2D-fragment shader, so
    you won't need to include the other two functions.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，你将编写一个2D片段着色器，因此你不需要包含其他两个函数。
- en: Shader functions have a number of *built-ins*, which are either input values
    or output values. For example, the `TEXTURE` input built-in contains the pixel
    data of the object's texture, while the `COLOR` output built-in is used to set
    the result of your calculation. Remember, a fragment shader's purpose is to affect
    the color of every processed pixel.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 着色器函数包含许多**内置函数**，这些函数可以是输入值或输出值。例如，`TEXTURE`输入内置函数包含对象纹理的像素数据，而`COLOR`输出内置函数用于设置计算结果。记住，片段着色器的作用是影响每个处理像素的颜色。
- en: 'When working with shaders in the `TEXTURE` property, for example, coordinates
    are measured in a *normalized* (that is, ranging from `0` to `1`) coordinate space.
    This coordinate space is called `UV` to distinguish it from the *x*/*y* coordinate
    space:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当在`TEXTURE`属性中使用着色器时，例如，坐标是在一个**归一化**（即范围从`0`到`1`）的坐标空间中测量的。这个坐标空间被称为`UV`，以区别于*x*/*y*坐标空间：
- en: '![](img/00190.jpeg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图片2](img/00190.jpeg)'
- en: As a result, all values in coordinate vectors will range from `0` and `1`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，坐标向量中的所有值都将介于`0`和`1`之间。
- en: As a very small example, this first shader will take the pixels of the cactus
    image and change them all to a single color. To allow you to choose the color,
    you can use a `uniform` variable.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个非常小的例子，这个第一个着色器将把仙人掌图像的像素全部变为单色。为了让你选择颜色，你可以使用一个`uniform`变量。
- en: Uniforms allow you to pass data into the shader from outside. Declaring a `uniform` variable will
    cause it to appear in the Inspector (similar to how `export` works in GDScript)
    and also allow you to set it via code.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 常量允许你从外部将数据传递到着色器中。声明一个`uniform`变量将使其在检查器中显示（类似于GDScript中的`export`工作方式）并允许你通过代码设置它。
- en: 'Type the following code into the Shader panel:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码输入到着色器面板中：
- en: '[PRE5]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You should see the image change immediately: The whole image turns black. To
    select a different color, click on the Material in the inspector, and you''ll
    see your `uniform` variable listed under Shader Param:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会立即看到图像发生变化：整个图像变成了黑色。要选择不同的颜色，点击检查器中的材质，你会在着色器参数下看到你的`uniform`变量。
- en: '![](img/00191.jpeg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图片1](img/00191.jpeg)'
- en: 'You''re not done, however. The image just turned to a colored rectangle, but
    you only want the cactus to change color, not its surrounding transparent pixels.
    Add one more line after setting `COLOR.rgb`:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你还没有完成。图像现在变成了一个彩色矩形，但你只想改变仙人掌的颜色，而不是其周围的透明像素。在设置`COLOR.rgb`之后添加一行：
- en: '[PRE6]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This last line makes the shader output every pixel with the same alpha (transparency)
    value as the pixel in the original texture. Now the empty area around the cactus
    remains transparent, with an alpha of `0`.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这最后一行使着色器输出每个像素，其alpha（透明度）值与原始纹理中的像素相同。现在仙人掌周围的空白区域保持透明，alpha值为`0`。
- en: 'The following code shows one more example. In this shader, you create a blur
    effect by setting each pixel''s color to the average value of the pixels around
    it:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码显示了一个更进一步的例子。在这个着色器中，你通过将每个像素的颜色设置为周围像素的平均值来创建模糊效果：
- en: '[PRE7]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Note that since you''ve added five color values together (the original pixel''s,
    plus the four that are found by moving in each direction around it), you need
    to divide by `5.0` to get the average value. The larger you make the `radius`,
    the more "smeared" the image looks:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，由于你把五个颜色值加在一起（原始像素的，加上围绕它移动的四个），你需要除以`5.0`来得到平均值。你使`radius`越大，图像看起来就越“模糊”：
- en: '![](img/00192.jpeg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![图片3](img/00192.jpeg)'
- en: Learning more
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习更多
- en: Shaders are capable of an amazing range of effects. Experimenting with Godot's
    shader language is a great way to learn the basics, but there is also a wealth
    of resources on the internet for learning more. When learning about shaders, you
    can use resources that aren't specific to Godot, and you shouldn't have much trouble
    getting them to work in Godot. The concept is the same across all types of graphics
    applications.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 着色器能够实现令人惊叹的范围的效果。在Godot的着色器语言中进行实验是学习基础的好方法，但互联网上也有大量资源可以帮助你学习更多。在学习着色器时，你可以使用不特定于Godot的资源，并且你不太可能遇到在Godot中使用它们的问题。这个概念在所有类型的图形应用程序中都是相同的。
- en: To see some examples of just how powerful shaders can be, visit [https://www.shadertoy.com/](https://www.shadertoy.com/).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解着色器有多强大，请访问[https://www.shadertoy.com/](https://www.shadertoy.com/)。
- en: Using other languages
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用其他语言
- en: The projects in this book have all been written using GDScript. GDScript has
    a number of advantages that make it the best choice for building your games. It
    is very tightly integrated with Godot's API, and its Python-style syntax makes
    it useful for rapid development while also being very beginner-friendly.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的项目都是使用 GDScript 编写的。GDScript 具有许多优势，使其成为构建游戏的最佳选择。它与 Godot 的 API 集成非常紧密，其
    Python 风格的语法使其适用于快速开发，同时也非常适合初学者。
- en: It's not the only option, however. Godot also supports two other "official"
    scripting languages, and also provides tools for integrating code using a variety
    of other languages.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这并非唯一的选择。Godot 还支持两种其他“官方”脚本语言，并提供使用各种其他语言集成代码的工具。
- en: C#
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C#
- en: With the release of Godot 3.0 in early 2018, support was added for C# as a scripting
    language for the first time. C# is very popular in game development, and the Godot
    version is based on the Mono 5.2 .NET framework. Because of its wide use, there
    are many resources available for learning C# and a great deal of existing code
    in the language for accomplishing a variety of game-related functions.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2018 年初 Godot 3.0 版本发布时，首次添加了对 C# 作为脚本语言的支持。C# 在游戏开发中非常流行，Godot 版本基于 Mono
    5.2 .NET 框架。由于其广泛的使用，有许多学习 C# 的资源，以及大量用于实现各种游戏相关功能的现有代码。
- en: At the time of writing, the current Godot version is 3.0.2\. In this version,
    C# support should be considered preliminary; it is functional, but has not been
    fully tested. Some features and capabilities, such as exporting projects, are
    not yet supported.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，当前 Godot 版本是 3.0.2。在这个版本中，C# 支持应被视为初步的；它是功能性的，但尚未经过全面测试。一些功能和功能，如导出项目，尚不支持。
- en: If you want to try out the C# implementation, you'll need to first make sure
    you have Mono installed, which you can get from [http://www.mono-project.com/download/](http://www.mono-project.com/download/).
    You must also download the Godot version that has C# support included, which you
    can find at [http://godotengine.org/download](http://godotengine.org/download) where
    it is labeled Mono Version.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想尝试 C# 实现，你首先需要确保已经安装了 Mono，你可以从[http://www.mono-project.com/download/](http://www.mono-project.com/download/)获取。你还必须下载包含
    C# 支持的 Godot 版本，你可以在[http://godotengine.org/download](http://godotengine.org/download)找到它，其中标注为“Mono
    版本”。
- en: You'll probably also want to use an external editor—such as Visual Studio Code
    or MonoDevelop—that provides more debugging and language functionality than Godot's
    built-in editor. You can set this in Editor Settings under the Mono section.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还想使用外部编辑器——例如 Visual Studio Code 或 MonoDevelop——它提供的调试和语言功能比 Godot 内置编辑器更强大。你可以在“编辑器设置”下的“Mono”部分设置此选项。
- en: 'To attach a C# script to a node, select the language from the Attach Node Script
    dialog:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 C# 脚本附加到节点，请从“附加节点脚本”对话框中选择语言：
- en: '![](img/00193.jpeg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00193.jpeg)'
- en: In general, scripting in C# works very much the same as what you've seen with
    GDScript. The main difference is that API functions are renamed in `PascalCase`
    to follow C# standards instead of `snake_case`, which is the standard for GDScript.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，使用 C# 脚本与 GDScript 的使用方式非常相似。主要区别在于 API 函数的命名方式改为遵循 C# 标准，即使用 `PascalCase`
    而不是 GDScript 的标准 `snake_case`。
- en: 'Here is an example of `KinematicBody2D` movement using C#:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个使用 C# 的 `KinematicBody2D` 运动的示例：
- en: '[PRE8]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: For more details about using C#, see the **Scripting** section of the documentation
    at [http://docs.godotengine.org/en/latest/getting_started/scripting/](http://docs.godotengine.org/en/latest/getting_started/scripting/).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 有关使用 C# 的更多详细信息，请参阅[http://docs.godotengine.org/en/latest/getting_started/scripting/](http://docs.godotengine.org/en/latest/getting_started/scripting/)文档中的**脚本**部分。
- en: VisualScript
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VisualScript
- en: Visual scripting is intended to provide an alternative scripting method using
    a drag-and-drop visual metaphor instead of written code. To create a script, you
    drag nodes (not to be confused with Godot's nodes) representing functions and
    data, and connect them by drawing lines. Running your script means following the
    path of the line through the nodes. The goal of this style of presentation is
    to provide a more intuitive way to visualize program flow for non-programmers,
    such as artists or animators, who need to collaborate on a project.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: Visual scripting 的目的是提供一种使用拖放视觉隐喻作为替代脚本方法，而不是编写代码。要创建脚本，你需要拖动代表函数和数据的节点（不要与
    Godot 的节点混淆），并通过绘制线条将它们连接起来。运行你的脚本意味着沿着节点中的线条路径进行。这种展示方式的目标是为非程序员提供更直观的程序流程可视化方式，例如艺术家或动画师，他们需要在项目上进行协作。
- en: In practice, this goal has yet to be reached in a practical way. Godot's VisualScript
    was also added for the first time in version 3.0, and it is currently not mature
    enough as a feature to be used in an actual project. As with C#, it should be
    considered in testing, and if you're interested in it, your testing and feedback
    will be very valuable to the Godot team in improving its functionality.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这个目标还没有以实际的方式实现。Godot的VisualScript也是在3.0版本中首次添加的，作为一个功能，它目前还不够成熟，不能在实际项目中使用。就像C#一样，它应该被考虑在测试中，如果你对此感兴趣，你的测试和反馈将对Godot团队改进其功能非常有价值。
- en: One potential strength of VisualScript is to use it as a second layer of scripting.
    You can create an object's core behavior in GDScript, and then a game designer
    can use a VisualScript that calls the functions of those scripts in visual nodes.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: VisualScript的一个潜在优势是将其用作脚本的第二层。你可以在GDScript中创建一个对象的核心行为，然后游戏设计师可以使用VisualScript，在视觉节点中调用这些脚本的功能。
- en: 'The following screenshot is an example VisualScript project. Here, you can
    see a portion of the player movement code in Coin Dash:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图是一个VisualScript项目的示例。在这里，你可以看到Coin Dash中玩家移动代码的一部分：
- en: '![](img/00194.jpeg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00194.jpeg)'
- en: The player movement code in Coin Dash
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Coin Dash中的玩家移动代码
- en: Native code – GDNative
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本地代码 – GDNative
- en: There are many programming languages to choose from. Each has its strengths
    and weaknesses, as well as its fans who prefer to use it over other options. While
    it doesn't make sense to support every language directly in Godot, there are situations
    where GDScript is no longer sufficient to solve a particular problem. Perhaps
    you want to use an existing external library, or you're doing something computationally
    intensive—such as AI or procedural world generation—that doesn't make sense for
    GDScript.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多编程语言可供选择。每种语言都有其优点和缺点，以及一些更喜欢使用它而不是其他选项的粉丝。虽然直接在Godot中支持每种语言都没有意义，但在某些情况下，GDScript可能不再足以解决特定问题。也许你想使用现有的外部库，或者你正在做一些计算密集型的工作——比如AI或程序化世界生成——这些对于GDScript来说并不合适。
- en: Because GDScript is an interpreted language, it trades performance for flexibility.
    This means that for some processor-intensive code, it can run unacceptably slow.
    In this case, the highest performance would be achieved by running native code
    written in a compiled language. In this situation, you can move that code to a
    GDNative library.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 由于GDScript是一种解释型语言，它以灵活性为代价换取性能。这意味着对于一些处理密集型的代码，它可能运行得非常慢，无法接受。在这种情况下，通过运行用编译语言编写的本地代码可以获得最高的性能。在这种情况下，你可以将那段代码移动到GDNative库中。
- en: GDNative is a C API that can be used by external libraries to interface with
    Godot. These external libraries can be your own or any existing third-party libraries
    that you may need for a particular project.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: GDNative是一个C API，外部库可以使用它来与Godot接口。这些外部库可以是你的或任何你可能需要的现有第三方库。
- en: 'In GDScript, you can then use the `GDNative` and `GDNativeLibrary` classes
    to load and call functions from these libraries. The following code is an example
    of calling a library that has been saved as a `GDNativeLibrary` resource file:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在GDScript中，你可以使用`GDNative`和`GDNativeLibrary`类来加载和调用这些库中的函数。以下代码是调用已保存为`GDNativeLibrary`资源文件的库的示例：
- en: '[PRE9]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Whereas, the library might look something like this (in C):'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 而这个库可能看起来像这样（用C编写）：
- en: '[PRE10]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Keep in mind that writing code like this is definitely more involved than sticking
    to pure GDScript. In a native language, you'll need to handle calling constructors
    and destructors for objects and manually manage working with Godot's `Variant`
    class. You should only resort to using GDNative when performance truly becomes
    an issue, and even then, only use it if the functionality really demands its use.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，编写这样的代码肯定比坚持使用纯GDScript要复杂得多。在本地语言中，你需要处理对象的构造函数和析构函数的调用，并手动管理与Godot的`Variant`类的交互。你应该只在性能真正成为问题时才使用GDNative，即使如此，也只有当功能确实需要使用它时才使用。
- en: If this section made no sense at all to you, don't worry. Most Godot developers
    will never need to delve into this side of development. Even if you find yourself
    needing higher-performance code, you may only need to look at the Asset library
    to find that someone has already created a library for you. You can find out about
    the Asset library in the next section.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个部分对你来说完全不知所云，请不要担心。大多数Godot开发者永远不会需要深入研究这一方面的开发。即使你发现自己需要更高性能的代码，你可能只需要查看资产库，以发现有人已经为你创建了一个库。你可以在下一节中了解关于资产库的信息。
- en: Language bindings
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语言绑定
- en: Another benefit of GDNative is that it has allowed proponents of other languages
    to create API bindings to enable scripting in those languages.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: GDNative的另一个好处是它允许其他语言的倡导者创建API绑定，以实现这些语言的脚本化。
- en: At the time of writing, several projects are available that use GDNative to
    allow you to use other languages for scripting. These include C, C++, Python,
    Nim, D, Go, and others. While these additional language bindings are still relatively
    new at the time of writing, they each have a dedicated group of developers working
    on them. If you're interested in using a particular language with Godot, a Google
    search of "godot + <language name>" will help you find what's available.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，有几个项目可以使用GDNative，允许您使用其他语言进行脚本编写。这些包括C、C++、Python、Nim、D、Go以及其他语言。尽管这些额外的语言绑定在撰写本文时仍然相对较新，但每个语言都有专门的开发团队在致力于它们。如果您对使用特定语言与Godot一起使用感兴趣，通过谷歌搜索“godot
    + <语言名称>”将帮助您找到可用的资源。
- en: Asset library
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 资产库
- en: 'At the top of the editor window, in the Workspaces section, you''ll find a
    button labeled AssetLib:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在编辑器窗口的顶部，在“工作区”部分，您会找到一个标有“AssetLib”的按钮：
- en: '![](img/00195.jpeg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![图片2](img/00195.jpeg)'
- en: 'Clicking this button will take you to Godot''s Asset library. This is a collection
    of add-ons, tools, and utilities contributed by the Godot community that you may
    find useful in your projects. For example, if you search for `State`, you''ll
    see that there is a tool called **finite state machine** (**FSM**) available in
    the library. You can click on its name for more information, and if you decide
    you want to try it out, click Install to download it into the `res://addons/`
    folder, which will be created if it doesn''t already exist:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 点击此按钮将带您进入Godot的资产库。这是一个由Godot社区贡献的插件、工具和实用程序的集合，您可能会在项目中找到它们很有用。例如，如果您搜索“状态”，您会看到库中有一个名为**有限状态机**（**FSM**）的工具。您可以点击其名称获取更多信息，如果您决定尝试它，可以点击“安装”将其下载到`res://addons/`文件夹中，如果该文件夹不存在，将会创建：
- en: '![](img/00196.jpeg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![图片3](img/00196.jpeg)'
- en: 'You then need to enable the add-on by opening Project Settings and choosing
    the Plugins tab:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您需要通过打开项目设置并选择插件选项卡来启用插件：
- en: '![](img/00197.jpeg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![图片1](img/00197.jpeg)'
- en: The plugin is now ready to use. Be sure to read the plugin author's instructions
    to understand how it works.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 插件现在可以使用了。请务必阅读插件作者的说明，以了解其工作原理。
- en: Contributing to Godot
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Godot做出贡献
- en: Godot is an open source, community-driven project. All of the work that's done
    to build, test, document, and otherwise support Godot is done primarily by passionate
    individuals contributing their time and skills. For the majority of contributors,
    it is a labor of love, and they take pride in helping to build something of quality
    that people enjoy using.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Godot是一个开源、社区驱动的项目。构建、测试、编写文档以及支持Godot的其他所有工作主要由充满热情的个人贡献他们的时间和技能来完成。对于大多数贡献者来说，这是一项充满爱心的劳动，他们为帮助构建人们喜欢使用的优质产品而感到自豪。
- en: In order for Godot to continue growing and improving, there is always a need
    for more members of the community to step up and contribute. There are many ways
    you can help out, regardless of your skill level or the amount of time you can
    commit.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让Godot继续成长和改进，社区总是需要更多成员站出来做出贡献。无论您的技能水平如何或您能投入多少时间，都有很多方式可以帮助。
- en: Contributing to the engine
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为引擎做出贡献
- en: 'There are two main ways you can directly contribute to Godot''s development.
    If you visit [https://github.com/godotengine/godot](https://github.com/godotengine/godot),
    you can see Godot''s source code, as well as find out exactly what''s being worked
    on. Click the Clone or Download button, and you''ll have the up-to-the-minute
    source code and can test out the latest features. You''ll need to build the engine,
    but don''t be intimidated: Godot is one of the easiest open source projects to
    compile that you''ll find. See [http://docs.godotengine.org/en/latest/development/compiling/](http://docs.godotengine.org/en/latest/development/compiling/)
    for instructions.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以直接以两种主要方式为Godot的开发做出贡献。如果你访问[https://github.com/godotengine/godot](https://github.com/godotengine/godot)，你可以看到Godot的源代码，以及了解正在进行的具体工作。点击“克隆”或“下载”按钮，你将获得最新的源代码，并可以测试最新的功能。你需要构建引擎，但不要感到害怕：Godot是你能找到的最容易编译的开源项目之一。有关说明，请参阅[http://docs.godotengine.org/en/latest/development/compiling/](http://docs.godotengine.org/en/latest/development/compiling/)。
- en: If you're not able to actually contribute to the C++ code, go to the Issues
    tab, where you can report or read about bugs and suggestions for improvements.
    There is always a need for people to confirm bug reports, test fixes, and give
    their opinions on new features.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你无法实际贡献C++代码，请转到“问题”标签页，在那里你可以报告或阅读有关错误和改进建议的信息。总是需要有人确认错误报告、测试修复并提供对新功能的意见。
- en: Writing documentation
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写文档
- en: Godot's official documentation is only as good as its community's contributions.
    From something as small as correcting a typo to writing an entire tutorial, all
    levels of help are very welcome. The home of the official documentatin is [https://github.com/godotengine/godot-docs](https://github.com/godotengine/godot-docs).
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: Godot的官方文档的质量取决于其社区的贡献。从小到纠正一个错别字，大到编写整个教程，所有级别的帮助都非常受欢迎。官方文档的家园是[https://github.com/godotengine/godot-docs](https://github.com/godotengine/godot-docs)。
- en: Hopefully, by now you've taken some time to browse through the official documentation
    and get an idea of what's available. If you spot something wrong or something
    missing, open an issue at the aforementioned GitHub link. If you're comfortable
    with using GitHub, you can even go ahead and submit a pull request yourself. Just
    make sure you read all the guidelines first so that your contribution will be
    accepted. You can find the guidelines at [http://docs.godotengine.org/en/latest/community/contributing/](http://docs.godotengine.org/en/latest/community/contributing/).
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 希望到现在为止，你已经花了一些时间浏览官方文档，并对可用的内容有所了解。如果你发现有什么错误或遗漏，请在上述GitHub链接处提交一个issue。如果你熟悉使用GitHub，甚至可以直接提交一个pull
    request。但请确保首先阅读所有指南，以确保你的贡献会被接受。指南可以在[http://docs.godotengine.org/en/latest/community/contributing/](http://docs.godotengine.org/en/latest/community/contributing/)找到。
- en: If you speak a language other than English, translations are also very much
    needed, and will be greatly appreciated by Godot's non-English-speaking users.
    See [https://hosted.weblate.org/projects/godot-engine/godot-docs/](https://hosted.weblate.org/projects/godot-engine/godot-docs/)
    for how to contribute in your language.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你说的不是英语，翻译也非常需要，并且会受到Godot的非英语用户的高度赞赏。有关如何在你的语言中做出贡献的信息，请参阅[https://hosted.weblate.org/projects/godot-engine/godot-docs/](https://hosted.weblate.org/projects/godot-engine/godot-docs/)。
- en: Donations
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 捐赠
- en: Godot is a not-for-profit project, and user donations go a long way to help
    pay for hosting costs and development resources, such as hardware. Financial contributions
    also allow the project to pay core developers, allowing them to dedicate themselves
    part- or full-time to working on the engine.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: Godot是一个非营利项目，用户的捐赠在很大程度上有助于支付托管费用和开发资源，例如硬件。财务捐助还允许项目支付核心开发者的工资，使他们能够全职或部分时间致力于引擎的开发工作。
- en: The easiest way to contribute to Godot is via the Patreon page at [https://www.patreon.com/godotengine](https://www.patreon.com/godotengine).
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 向Godot贡献的最简单方式是通过Patreon页面，网址为[https://www.patreon.com/godotengine](https://www.patreon.com/godotengine)。
- en: Getting help – community resources
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取帮助 - 社区资源
- en: Godot's online community is one of its strengths. Because of its open source
    nature, there is a wide variety of people working together to improve the engine,
    write documentation, and help each other with issues.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: Godot的在线社区是其优势之一。由于其开源性质，有各种各样的人一起工作，以改进引擎、编写文档并互相帮助解决问题。
- en: You can find a full list of community resources at [https://godotengine.org/community](https://godotengine.org/community).
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://godotengine.org/community](https://godotengine.org/community)找到社区资源的完整列表。
- en: These links may change over time, but the following are the main community resources
    you should be aware of.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这些链接可能会随时间变化，但以下是你应该了解的主要社区资源。
- en: GitHub
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitHub
- en: '** [https://github.com/godotengine/](https://github.com/godotengine/)**'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '**[https://github.com/godotengine/](https://github.com/godotengine/)**'
- en: The Godot GitHub repository is where Godot's developers work. You can find Godot's
    source code here, if you find yourself needing to compile a custom version of
    the engine for your own use.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: Godot的GitHub仓库是开发者工作的地方。如果你需要为个人使用编译引擎的定制版本，你可以在这里找到Godot的源代码。
- en: If you find any kind of problem with the engine itself—something that doesn't
    work, a typo in the documentation, and so on—this is the place where you should
    report it.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发现引擎本身有任何问题——比如某些功能不工作、文档中的错别字等——这就是你应该报告的地方。
- en: Godot Q and A
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Godot问答
- en: '[https://godotengine.org/qa/](https://godotengine.org/qa/)'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://godotengine.org/qa/](https://godotengine.org/qa/)'
- en: This is Godot's official help site. You can post questions here for the community
    to answer, as well as search the growing database of previously answered questions.
    If you happen to see a question you know the answer to, you can help out as well.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Godot 的官方帮助网站。你可以在这里发布问题供社区回答，以及搜索不断增长的先前回答的问题数据库。如果你恰好看到你知道答案的问题，你也可以提供帮助。
- en: Discord / Forum
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Discord / 论坛
- en: '[https://discord.gg/zH7NUgz](https://discord.gg/zH7NUgz)'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://discord.gg/zH7NUgz](https://discord.gg/zH7NUgz)'
- en: '[http://godotdevelopers.org/](http://godotdevelopers.org/)'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://godotdevelopers.org/](http://godotdevelopers.org/)'
- en: While not *official*, these are two very active communities of Godot users where
    you can get help, find answers to questions, and discuss your project with others.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然不是官方的，但这些是两个非常活跃的 Godot 用户社区，你可以在这里寻求帮助，找到问题的答案，并与他人讨论你的项目。
- en: Summary
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about a few additional topics that will help you
    continue to level up your Godot skills. Godot has a great many features in addition
    to those explored in this book. You'll need to know where to look and where to
    ask for help as you move on to working on projects of your own.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解了一些额外的主题，这些主题将帮助你继续提升你的 Godot 技能。除了本书中探索的功能外，Godot 还拥有许多其他功能。当你开始着手自己的项目时，你需要知道去哪里寻找信息，以及去哪里寻求帮助。
- en: You also learned about some more advanced topics, such as working with other
    programming languages and using shaders to enhance your game's visual effects.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 你还了解了一些更高级的主题，例如与其他编程语言一起工作以及使用着色器来增强你的游戏视觉效果。
- en: In addition, since Godot is built by its community, you learned how you can
    participate and become part of the team that is making it one of the fastest-growing
    projects of its kind.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，由于 Godot 是由其社区构建的，你学习了如何参与其中，并成为使其成为其类型中增长最快的项目之一的团队的一部分。
