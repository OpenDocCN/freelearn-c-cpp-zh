["```cpp\nif( SDL_PollEvent( &event ) ){\n    switch( event.type ){\n        case SDL_KEYDOWN:\n            switch( event.key.keysym.sym ){\n                case SDLK_LEFT:\n                    left_key_down = true;\n                    break;\n                case SDLK_RIGHT:\n                    right_key_down = true;\n                    break;\n                case SDLK_UP:\n                    up_key_down = true;\n                    break;\n                case SDLK_DOWN:\n                    down_key_down = true;\n                    break;\n                case SDLK_f:\n                    f_key_down = true;\n                    break;\n                case SDLK_SPACE:\n                    space_key_down = true;\n                    break;\n                default:\n                    break;\n            }\n            break;\n```", "```cpp\nif(SDL_PollEvent( &event ) )\n{\n    switch (event.type)\n    {\n        case SDL_MOUSEMOTION:\n        {\n            int x_val = 0;\n            int y_val = 0;\n            SDL_GetMouseState( &x_val, &y_val );\n            printf(\u201dmouse move x=%d y=%d\\n\u201d, x_val, y_val);\n        }\n        case SDL_MOUSEBUTTONDOWN:\n        {\n            switch (event.button.button)\n            {\n                case SDL_BUTTON_LEFT:\n                {\n                    int x_val = 0;\n                    int y_val = 0;\n                    SDL_GetMouseState( &x_val, &y_val );\n                    printf(\u201dmouse down x=%d y=%d\\n\u201d, x_val, y_val);\n                    break;\n                }\n                default:\n                {\n                    break;\n                }\n            }\n            break;\n        }\n        case SDL_MOUSEBUTTONUP:\n        {\n            switch (event.button.button)\n            {\n                case SDL_BUTTON_LEFT:\n                {\n                    int x_val = 0;\n                    int y_val = 0;\n                    SDL_GetMouseState( &x_val, &y_val );\n                    printf(\u201dmouse up x=%d y=%d\\n\u201d, x_val, y_val);\n                    break;\n                }\n                default:\n                {\n                    break;\n                }\n            }\n            break;\n        }\n```", "```cpp\nclass UIButton {\n    public:\n        bool m_Hover;\n        bool m_Click;\n        bool m_Active;\n        void (*m_Callback)();\n\n        SDL_Rect m_dest = {.x = 0, .y = 0, .w = 128, .h = 32 };\n        SDL_Texture *m_SpriteTexture;\n        SDL_Texture *m_ClickTexture;\n        SDL_Texture *m_HoverTexture;\n\n        UIButton( int x, int y,\n        char* file_name, char* hover_file_name, char* click_file_name,\n        void (*callback)() );\n\n        void MouseClick(int x, int y);\n        void MouseUp(int x, int y);\n        void MouseMove( int x, int y );\n        void KeyDown( SDL_Keycode key );\n        void RenderUI();\n};\n```", "```cpp\nvoid (*m_Callback)();\n```", "```cpp\nSDL_Rect m_dest = {.x = 0, .y = 0, .w = 128, .h = 32 };\n```", "```cpp\nSDL_Texture *m_SpriteTexture;\nSDL_Texture *m_ClickTexture;\nSDL_Texture *m_HoverTexture;\n```", "```cpp\nUIButton( int x, int y,\n         char* file_name, char* hover_file_name, char* click_file_name,\n         void (*callback)() );\n```", "```cpp\nvoid MouseClick(int x, int y);\nvoid MouseUp(int x, int y);\nvoid MouseMove( int x, int y );\n```", "```cpp\nvoid KeyDown( SDL_Keycode key );\n```", "```cpp\nvoid RenderUI();\n```", "```cpp\nenum SCREEN_STATE {\n    START_SCREEN = 0,\n    PLAY_SCREEN = 1,\n    PLAY_TRANSITION = 2,\n    GAME_OVER_SCREEN = 3,\n    YOU_WIN_SCREEN = 4\n};\n```", "```cpp\nclass UISprite {\n    public:\n        bool m_Active;\n        SDL_Texture *m_SpriteTexture;\n        SDL_Rect m_dest = {.x = 0, .y = 0, .w = 128, .h = 32 };\n        UISprite( int x, int y, char* file_name );\n        void RenderUI();\n};\n```", "```cpp\nSDL_Texture *m_SpriteTexture;\nSDL_Rect m_dest = {.x = 0, .y = 0, .w = 128, .h = 32 };\n```", "```cpp\nUISprite( int x, int y, char* file_name );\n```", "```cpp\nvoid RenderUI();\n```", "```cpp\nclass RenderManager {\n    public:\n        const int c_BackgroundWidth = 800;\n        const int c_BackgroundHeight = 600;\n        SDL_Texture *m_BackgroundTexture;\n        SDL_Rect m_BackgroundDest = {.x = 0, .y = 0, .w = \n        c_BackgroundWidth, .h = c_BackgroundHeight };\n        SDL_Texture *m_StartBackgroundTexture;\n\n        RenderManager();\n        void RenderBackground();\n        void RenderStartBackground(int alpha = 255);\n        void Render( SDL_Texture *tex, SDL_Rect *src, SDL_Rect *dest, \n        float rad_rotation = 0.0,\n                     int alpha = 255, int red = 255, int green = 255, \n                     int blue = 255 );\n        void RenderUI( SDL_Texture *tex, SDL_Rect *src, SDL_Rect *dest, \n        float rad_rotation = 0.0,\n                       int alpha = 255, int red = 255, int green = 255, \n                       int blue = 255 );\n};\n```", "```cpp\nSDL_Texture *m_StartBackgroundTexture;\n```", "```cpp\nvoid RenderStartBackground(int alpha = 255);\n```", "```cpp\nextern UISprite *you_win_sprite;\nextern UISprite *game_over_sprite;\nextern UIButton* play_btn;\n```", "```cpp\nUIButton* play_btn;\nUIButton* play_again_btn;\nUISprite *you_win_sprite;\nUISprite *game_over_sprite;\nSCREEN_STATE current_screen = START_SCREEN;\nint transition_time = 0;\nbool you_win = false;\n```", "```cpp\nUISprite *you_win_sprite;\nUISprite *game_over_sprite;\n```", "```cpp\nSCREEN_STATE current_screen = START_SCREEN;\n```", "```cpp\nvoid start_input() {\n    if(SDL_PollEvent( &event ) )\n    {\n        switch (event.type)\n        {\n            case SDL_MOUSEMOTION:\n            {\n                int x_val = 0;\n                int y_val = 0;\n                SDL_GetMouseState( &x_val, &y_val );\n                play_btn->MouseMove(x_val, y_val);\n            }\n            case SDL_MOUSEBUTTONDOWN:\n            {\n                switch (event.button.button)\n                {\n                    case SDL_BUTTON_LEFT:\n                    {\n                        int x_val = 0;\n                        int y_val = 0;\n                        SDL_GetMouseState( &x_val, &y_val );\n                        play_btn->MouseClick(x_val, y_val);\n                        break;\n                    }\n                    default:\n                    {\n                        break;\n                    }\n                }\n                break;\n            }\n            case SDL_MOUSEBUTTONUP:\n            {\n                switch (event.button.button)\n                {\n                    case SDL_BUTTON_LEFT:\n                    {\n                        int x_val = 0;\n                        int y_val = 0;\n                        SDL_GetMouseState( &x_val, &y_val );\n                        play_btn->MouseUp(x_val, y_val);\n                        break;\n                    }\n                    default:\n                    {\n                        break;\n                    }\n                }\n                break;\n            }\n            case SDL_KEYDOWN:\n            {\n                play_btn->KeyDown( event.key.keysym.sym );\n            }\n        }\n    }\n}\n```", "```cpp\ncase SDL_MOUSEMOTION:\n{\n    int x_val = 0;\n    int y_val = 0;\n    SDL_GetMouseState( &x_val, &y_val );\n    play_btn->MouseMove(x_val, y_val);\n}\n```", "```cpp\ncase SDL_MOUSEBUTTONDOWN:\n{\n    switch (event.button.button)\n    {\n        case SDL_BUTTON_LEFT:\n        {\n            int x_val = 0;\n            int y_val = 0;\n\n            SDL_GetMouseState( &x_val, &y_val );\n            play_btn->MouseClick(x_val, y_val);\n            break;\n        }\n        default:\n        {\n            break;\n        }\n    }\n    break;\n}\n```", "```cpp\ncase SDL_MOUSEBUTTONUP:\n{\n    switch (event.button.button)\n    {\n        case SDL_BUTTON_LEFT:\n        {\n            int x_val = 0;\n            int y_val = 0;\n\n            SDL_GetMouseState( &x_val, &y_val );\n            play_btn->MouseUp(x_val, y_val);\n            break;\n        }\n        default:\n        {\n            break;\n        }\n    }\n    break;\n}\n```", "```cpp\ncase SDL_KEYDOWN:\n{\n    play_btn->KeyDown( event.key.keysym.sym );\n}\n```", "```cpp\nvoid end_input() {\n    if(SDL_PollEvent( &event ) )\n    {\n        switch(event.type)\n        {\n            case SDL_MOUSEMOTION:\n            {\n                int x_val = 0;\n                int y_val = 0;\n                SDL_GetMouseState( &x_val, &y_val );\n                play_again_btn->MouseMove(x_val, y_val);\n            }\n            case SDL_MOUSEBUTTONDOWN:\n            {\n                switch(event.button.button)\n                {\n                    case SDL_BUTTON_LEFT:\n                    {\n                        int x_val = 0;\n                        int y_val = 0;\n                        SDL_GetMouseState( &x_val, &y_val );\n                        play_again_btn->MouseClick(x_val, y_val);\n                        break;\n                    }\n                    default:\n                    {\n                        break;\n                    }\n                }\n                break;\n            }\n            case SDL_MOUSEBUTTONUP:\n            {\n                switch(event.button.button)\n                {\n                    case SDL_BUTTON_LEFT:\n                    {\n                        int x_val = 0;\n                        int y_val = 0;\n                        SDL_GetMouseState( &x_val, &y_val );\n                        play_again_btn->MouseUp(x_val, y_val);\n                        break;\n                    }\n                    default:\n                    {\n                        break;\n                    }\n                }\n                break;\n            }\n            case SDL_KEYDOWN:\n            {\n                printf(\"SDL_KEYDOWN\\n\");\n                play_again_btn->KeyDown( event.key.keysym.sym );\n            }\n        }\n    }\n}\n```", "```cpp\nvoid start_render() {\n    render_manager->RenderStartBackground();\n    play_btn->RenderUI();\n}\n```", "```cpp\nvoid collisions() {\n Asteroid* asteroid;\n std::vector<Asteroid*>::iterator ita;\n    if( player->m_CurrentFrame == 0 && player->CompoundHitTest( star ) ) {\n        player->m_CurrentFrame = 1;\n        player->m_NextFrameTime = ms_per_frame;\n        player->m_Explode->Run();\n        current_screen = GAME_OVER_SCREEN;\n        large_explosion_snd->Play();\n    }\n    if( enemy->m_CurrentFrame == 0 && enemy->CompoundHitTest( star ) ) {\n        enemy->m_CurrentFrame = 1;\n        enemy->m_NextFrameTime = ms_per_frame;\n        current_screen = YOU_WIN_SCREEN;\n        enemy->m_Explode->Run();\n        large_explosion_snd->Play();\n    }\n    Projectile* projectile;\n    std::vector<Projectile*>::iterator it;\n    for(it=projectile_pool->m_ProjectileList.begin(); \n    it!=projectile_pool->m_ProjectileList.end();it++){\n        projectile = *it;\n        if( projectile->m_CurrentFrame == 0 && projectile->m_Active ) {\n            for( ita = asteroid_list.begin(); ita!=asteroid_list.end(); \n            ita++ ) {\n                asteroid = *ita;\n                if( asteroid->m_Active ) {\n                    if( asteroid->HitTest( projectile ) ) {\n                        asteroid->ElasticCollision( projectile );\n                        projectile->m_CurrentFrame = 1;\n                        projectile->m_NextFrameTime = ms_per_frame;\n                        small_explosion_snd->Play();\n                    }\n                }\n            }\n            if( projectile->HitTest( star ) ){\n                projectile->m_CurrentFrame = 1;\n                projectile->m_NextFrameTime = ms_per_frame;\n                small_explosion_snd->Play();\n            }\n            else if( player->m_CurrentFrame == 0 &&\n                ( projectile->HitTest( player ) || player->CompoundHitTest( \n                 projectile ) ) ) {\n                if( player->m_Shield->m_Active == false ) {\n                    player->m_CurrentFrame = 1;\n                    player->m_NextFrameTime = ms_per_frame;\n                    current_screen = GAME_OVER_SCREEN;\n                    player->m_Explode->Run();\n                    large_explosion_snd->Play();\n                }\n                else {\n                    hit_snd->Play();\n                    player->ElasticCollision( projectile );\n                }\n                projectile->m_CurrentFrame = 1;\n                projectile->m_NextFrameTime = ms_per_frame;\n            }\n            else if( enemy->m_CurrentFrame == 0 &&\n                ( projectile->HitTest( enemy ) || enemy->CompoundHitTest( \n                 projectile ) ) ) {\n                if( enemy->m_Shield->m_Active == false ) {\n                    enemy->m_CurrentFrame = 1;\n                    enemy->m_NextFrameTime = ms_per_frame;\n                    current_screen = YOU_WIN_SCREEN;\n                    enemy->m_Explode->Run();\n                    large_explosion_snd->Play();\n                    enemy->m_Shield->m_ttl -= 1000;\n                }\n                else {\n                    enemy->ElasticCollision( projectile );\n                    hit_snd->Play();\n                }\n                projectile->m_CurrentFrame = 1;\n                projectile->m_NextFrameTime = ms_per_frame;\n            }\n        }\n    }\n    for( ita = asteroid_list.begin(); ita != asteroid_list.end(); ita++ ) {\n        asteroid = *ita;\n        if( asteroid->m_Active ) {\n            if( asteroid->HitTest( star ) ) {\n                asteroid->Explode();\n                small_explosion_snd->Play();\n            }\n        }\n        else { continue; }\n        if( player->m_CurrentFrame == 0 && asteroid->m_Active &&\n          ( asteroid->HitTest( player ) || player->CompoundHitTest( \n           asteroid ) ) ) {\n            if( player->m_Shield->m_Active == false ) {\n                player->m_CurrentFrame = 1;\n                player->m_NextFrameTime = ms_per_frame;\n\n                player->m_Explode->Run();\n                current_screen = GAME_OVER_SCREEN;\n                large_explosion_snd->Play();\n            }\n            else {\n                player->ElasticCollision( asteroid );\n                small_explosion_snd->Play();\n            }\n        }\n        if( enemy->m_CurrentFrame == 0 && asteroid->m_Active &&\n          ( asteroid->HitTest( enemy ) || enemy->CompoundHitTest( asteroid \n           ) ) ) {\n            if( enemy->m_Shield->m_Active == false ) {\n                enemy->m_CurrentFrame = 1;\n                enemy->m_NextFrameTime = ms_per_frame;\n\n                enemy->m_Explode->Run();\n                current_screen = YOU_WIN_SCREEN;\n                large_explosion_snd->Play();\n            }\n            else {\n                enemy->ElasticCollision( asteroid );\n                small_explosion_snd->Play();\n            }\n        }\n    }\n    Asteroid* asteroid_1;\n    Asteroid* asteroid_2;\n    std::vector<Asteroid*>::iterator ita_1;\n    std::vector<Asteroid*>::iterator ita_2;\n    for( ita_1 = asteroid_list.begin(); ita_1 != asteroid_list.end(); \n    ita_1++ ) {\n        asteroid_1 = *ita_1;\n        if( !asteroid_1->m_Active ) { continue; }\n        for( ita_2 = ita_1+1; ita_2 != asteroid_list.end(); ita_2++ ) {\n            asteroid_2 = *ita_2;\n            if( !asteroid_2->m_Active ) { continue; }\n            if(asteroid_1->HitTest(asteroid_2)) { \n            asteroid_1->ElasticCollision( asteroid_2 ); }\n        }\n    }\n}\n```", "```cpp\ncurrent_screen = YOU_WIN_SCREEN;\n```", "```cpp\nvoid draw_play_transition() {\n    transition_time -= diff_time;\n    if( transition_time <= 0 ) {\n        current_screen = PLAY_SCREEN;\n        return;\n    }\n    render_manager->RenderStartBackground(transition_time/4);\n}\n```", "```cpp\nvoid game_loop() {\n    current_time = SDL_GetTicks();\n    diff_time = current_time - last_time;\n    delta_time = diff_time / 1000.0;\n    last_time = current_time;\n    if( current_screen == START_SCREEN ) {\n        start_input();\n        start_render();\n    }\n    else if( current_screen == PLAY_SCREEN || current_screen == \n             PLAY_TRANSITION ) {\n        play_input();\n        move();\n        collisions();\n        play_render();\n        if( current_screen == PLAY_TRANSITION ) {\n            draw_play_transition();\n        }\n    }\n    else if( current_screen == YOU_WIN_SCREEN || current_screen == \n             GAME_OVER_SCREEN ) {\n        end_input();\n        move();\n        collisions();\n        play_render();\n        play_again_btn->RenderUI();\n        if( current_screen == YOU_WIN_SCREEN ) {\n            you_win_sprite->RenderUI();\n        }\n        else {\n            game_over_sprite->RenderUI();\n        }\n    }\n}\n```", "```cpp\nif( current_screen == START_SCREEN ) {\n    start_input();\n    start_render();\n}\n```", "```cpp\nelse if( current_screen == PLAY_SCREEN || current_screen == PLAY_TRANSITION ) {\n    play_input();\n    move();\n    collisions();\n    play_render();\n    if( current_screen == PLAY_TRANSITION ) {\n        draw_play_transition();\n    }\n}\n```", "```cpp\nelse if( current_screen == YOU_WIN_SCREEN || current_screen == \n         GAME_OVER_SCREEN ) {\n    end_input();\n    move();\n    collisions();\n    play_render();\n    play_again_btn->RenderUI();\n    if( current_screen == YOU_WIN_SCREEN ) {\n        you_win_sprite->RenderUI();\n    }\n    else {\n        game_over_sprite->RenderUI();\n    }\n}\n```", "```cpp\nvoid play_click() {\n    current_screen = PLAY_TRANSITION;\n    transition_time = 1020;\n}\n```", "```cpp\nvoid play_again_click() {\n    EM_ASM(\n        location.reload();\n    );\n}\n```", "```cpp\ngame_over_sprite = new UISprite( 400, 300, (char*)\"/sprites/GameOver.png\" );\ngame_over_sprite->m_Active = true;\nyou_win_sprite = new UISprite( 400, 300, (char*)\"/sprites/YouWin.png\" );\nyou_win_sprite->m_Active = true;\n```", "```cpp\nplay_btn = new UIButton(400, 500,\n                     (char*)\"/sprites/play_button.png\",\n                     (char*)\"/sprites/play_button_hover.png\",\n                     (char*)\"/sprites/play_button_click.png\",\n                     play_click );\n\nplay_again_btn = new UIButton(400, 500,\n                     (char*)\"/sprites/play_again_button.png\",\n                     (char*)\"/sprites/play_again_button_hover.png\",\n                     (char*)\"/sprites/play_again_button_click.png\",\n                     play_again_click );\n```", "```cpp\nint main() {\n    SDL_Init( SDL_INIT_VIDEO | SDL_INIT_AUDIO );\n    int return_val = SDL_CreateWindowAndRenderer( CANVAS_WIDTH, \n    CANVAS_HEIGHT, 0, &window, &renderer );\n    if( return_val != 0 ) {\n        printf(\"Error creating renderer %d: %s\\n\", return_val, \n        IMG_GetError() );\n        return 0;\n    }\n    SDL_SetRenderDrawColor( renderer, 0, 0, 0, 255 );\n    SDL_RenderClear( renderer );\n    game_over_sprite = new UISprite( 400, 300, \n    (char*)\"/sprites/GameOver.png\" );\n    game_over_sprite->m_Active = true;\n    you_win_sprite = new UISprite( 400, 300, \n    (char*)\"/sprites/YouWin.png\" );\n    you_win_sprite->m_Active = true;\n    last_frame_time = last_time = SDL_GetTicks();\n    player = new PlayerShip();\n    enemy = new EnemyShip();\n    star = new Star();\n    camera = new Camera(CANVAS_WIDTH, CANVAS_HEIGHT);\n    render_manager = new RenderManager();\n    locator = new Locator();\n    enemy_laser_snd = new Audio(ENEMY_LASER, false);\n    player_laser_snd = new Audio(PLAYER_LASER, false);\n    small_explosion_snd = new Audio(SMALL_EXPLOSION, true);\n    large_explosion_snd = new Audio(LARGE_EXPLOSION, true);\n    hit_snd = new Audio(HIT, false);\n    device_id = SDL_OpenAudioDevice(NULL, 0, &(enemy_laser_snd->spec), \n    NULL, 0);\n    if (device_id == 0) {\n        printf(\"Failed to open audio: %s\\n\", SDL_GetError());\n    }\n    SDL_PauseAudioDevice(device_id, 0);\n    int asteroid_x = 0;\n    int asteroid_y = 0;\n    int angle = 0;\n    // SCREEN 1\n    for( int i_y = 0; i_y < 8; i_y++ ) {\n        asteroid_y += 100;\n        asteroid_y += rand() % 400;\n        asteroid_x = 0;\n        for( int i_x = 0; i_x < 12; i_x++ ) {\n            asteroid_x += 66;\n            asteroid_x += rand() % 400;\n            int y_save = asteroid_y;\n            asteroid_y += rand() % 400 - 200;\n            angle = rand() % 359;\n            asteroid_list.push_back(\n            new Asteroid( asteroid_x, asteroid_y,\n                          get_random_float(0.5, 1.0),\n                          DEG_TO_RAD(angle) ) );\n            asteroid_y = y_save;\n        }\n    }\n    projectile_pool = new ProjectilePool();\n    play_btn = new UIButton(400, 500,\n                     (char*)\"/sprites/play_button.png\",\n                     (char*)\"/sprites/play_button_hover.png\",\n                     (char*)\"/sprites/play_button_click.png\",\n                     play_click );\n    play_again_btn = new UIButton(400, 500,\n                     (char*)\"/sprites/play_again_button.png\",\n                     (char*)\"/sprites/play_again_button_hover.png\",\n                     (char*)\"/sprites/play_again_button_click.png\",\n                     play_again_click );\n    emscripten_set_main_loop(game_loop, 0, 0);\n    return 1;\n}\n```", "```cpp\n#include \"game.hpp\"\n```", "```cpp\nUIButton::UIButton( int x, int y, char* file_name, char* hover_file_name, char* click_file_name, void (*callback)() ) {\n    m_Callback = callback;\n    m_dest.x = x;\n    m_dest.y = y;\n    SDL_Surface *temp_surface = IMG_Load( file_name );\n\n    if( !temp_surface ) {\n        printf(\"failed to load image: %s\\n\", IMG_GetError() );\n        return;\n    }\n    else {\n        printf(\"success creating ui button surface\\n\");\n    }\n    m_SpriteTexture = SDL_CreateTextureFromSurface( renderer, \n    temp_surface );\n    if( !m_SpriteTexture ) {\n        return;\n    }\n    SDL_QueryTexture( m_SpriteTexture,\n                        NULL, NULL,\n                        &m_dest.w, &m_dest.h );\n    SDL_FreeSurface( temp_surface );\n\n     temp_surface = IMG_Load( click_file_name );\n    if( !temp_surface ) {\n        printf(\"failed to load image: %s\\n\", IMG_GetError() );\n        return;\n    }\n    else {\n        printf(\"success creating ui button click surface\\n\");\n    }\n    m_ClickTexture = SDL_CreateTextureFromSurface( renderer, \n    temp_surface );\n\n    if( !m_ClickTexture ) {\n        return;\n    }\n    SDL_FreeSurface( temp_surface );\n\n    temp_surface = IMG_Load( hover_file_name );\n    if( !temp_surface ) {\n        printf(\"failed to load image: %s\\n\", IMG_GetError() );\n        return;\n    }\n    else {\n        printf(\"success creating ui button hover surface\\n\");\n    }\n    m_HoverTexture = SDL_CreateTextureFromSurface( renderer, \n    temp_surface );\n\n    if( !m_HoverTexture ) {\n        return;\n    }\n    SDL_FreeSurface( temp_surface );\n\n    m_dest.x -= m_dest.w / 2;\n    m_dest.y -= m_dest.h / 2;\n\n    m_Hover = false;\n    m_Click = false;\n    m_Active = true;\n}\n```", "```cpp\nm_Callback = callback;\n```", "```cpp\nm_dest.x = x;\nm_dest.y = y;\n```", "```cpp\nSDL_Surface *temp_surface = IMG_Load( file_name );\n\nif( !temp_surface ) {\n    printf(\"failed to load image: %s\\n\", IMG_GetError() );\n    return;\n}\nelse {\n    printf(\"success creating ui button surface\\n\");\n}\nm_SpriteTexture = SDL_CreateTextureFromSurface( renderer, temp_surface );\n\nif( !m_SpriteTexture ) {\n    return;\n}\nSDL_QueryTexture( m_SpriteTexture,\n                  NULL, NULL,\n                  &m_dest.w, &m_dest.h );\nSDL_FreeSurface( temp_surface );\n\ntemp_surface = IMG_Load( click_file_name );\n\nif( !temp_surface ) {\n    printf(\"failed to load image: %s\\n\", IMG_GetError() );\n    return;\n}\nelse {\n    printf(\"success creating ui button click surface\\n\");\n}\nm_ClickTexture = SDL_CreateTextureFromSurface( renderer, temp_surface );\n\nif( !m_ClickTexture ) {\n    return;\n}\nSDL_FreeSurface( temp_surface );\n\ntemp_surface = IMG_Load( hover_file_name );\nif( !temp_surface ) {\n    printf(\"failed to load image: %s\\n\", IMG_GetError() );\n    return;\n}\nelse {\n    printf(\"success creating ui button hover surface\\n\");\n}\nm_HoverTexture = SDL_CreateTextureFromSurface( renderer, temp_surface );\n\nif( !m_HoverTexture ) {\n    return;\n}\nSDL_FreeSurface( temp_surface );\n```", "```cpp\nm_dest.x -= m_dest.w / 2;\nm_dest.y -= m_dest.h / 2;\n```", "```cpp\nm_Hover = false;\nm_Click = false;\nm_Active = true;\n```", "```cpp\nvoid UIButton::MouseMove(int x, int y) {\n    if( x >= m_dest.x && x <= m_dest.x + m_dest.w &&\n        y >= m_dest.y && y <= m_dest.y + m_dest.h ) {\n        m_Hover = true;\n    }\n    else {\n        m_Hover = false;\n    }\n}\n```", "```cpp\nvoid UIButton::MouseClick(int x, int y) {\n    if( x >= m_dest.x && x <= m_dest.x + m_dest.w &&\n        y >= m_dest.y && y <= m_dest.y + m_dest.h ) {\n        m_Click = true;\n    }\n    else {\n        m_Click = false;\n    }\n}\n```", "```cpp\nvoid UIButton::MouseUp(int x, int y) {\n    if( m_Click == true &&\n        x >= m_dest.x && x <= m_dest.x + m_dest.w &&\n        y >= m_dest.y && y <= m_dest.y + m_dest.h ) {\n        if( m_Callback != NULL ) {\n            m_Callback();\n        }\n    }\n    m_Click = false;\n}\n```", "```cpp\nvoid UIButton::KeyDown( SDL_Keycode key ) {\n    if( key == SDLK_RETURN) {\n        if( m_Callback != NULL ) {\n            m_Callback();\n        }\n    }\n}\n```", "```cpp\nvoid UIButton::RenderUI() {\n    if( m_Active == false ) {\n        return;\n    }\n    if( m_Click == true ) {\n        render_manager->RenderUI( m_ClickTexture, NULL, &m_dest, 0.0,\n                                    0xff, 0xff, 0xff, 0xff );\n    }\n    else if( m_Hover == true ) {\n        render_manager->RenderUI( m_HoverTexture, NULL, &m_dest, 0.0,\n                                    0xff, 0xff, 0xff, 0xff );\n    }\n    else {\n        render_manager->RenderUI( m_SpriteTexture, NULL, &m_dest, 0.0,\n                                    0xff, 0xff, 0xff, 0xff );\n    }\n}\n```", "```cpp\n#include \"game.hpp\"\n```", "```cpp\nUISprite::UISprite( int x, int y, char* file_name ) {\n    m_dest.x = x;\n    m_dest.y = y;\n    SDL_Surface *temp_surface = IMG_Load( file_name );\n\n    if( !temp_surface ) {\n        printf(\"failed to load image: %s\\n\", IMG_GetError() );\n        return;\n    }\n    else {\n        printf(\"success creating ui button surface\\n\");\n    }\n\n    m_SpriteTexture = SDL_CreateTextureFromSurface( renderer, \n    temp_surface );\n\n    if( !m_SpriteTexture ) {\n        return;\n    }\n    SDL_QueryTexture( m_SpriteTexture,\n                      NULL, NULL,\n                      &m_dest.w, &m_dest.h );\n    SDL_FreeSurface( temp_surface );\n    m_dest.x -= m_dest.w / 2;\n    m_dest.y -= m_dest.h / 2;\n}\n```", "```cpp\nvoid UISprite::RenderUI() {\n    if( m_Active == false ) {\n        return;\n    }\n    render_manager->RenderUI( m_SpriteTexture, NULL, &m_dest, 0.0,\n                              0xff, 0xff, 0xff, 0xff );\n}\n```", "```cpp\nem++ asteroid.cpp audio.cpp camera.cpp collider.cpp emitter.cpp enemy_ship.cpp finite_state_machine.cpp locator.cpp main.cpp particle.cpp player_ship.cpp projectile_pool.cpp projectile.cpp range.cpp render_manager.cpp shield.cpp ship.cpp star.cpp ui_button.cpp ui_sprite.cpp vector.cpp -o ui.html --preload-file audio --preload-file sprites -std=c++17 -s USE_WEBGL2=1 -s USE_SDL=2 -s USE_SDL_IMAGE=2 -s SDL2_IMAGE_FORMATS=[\"png\"] -s USE_SDL_IMAGE=2 -s SDL2_IMAGE_FORMATS=[\"png\"] \n```"]