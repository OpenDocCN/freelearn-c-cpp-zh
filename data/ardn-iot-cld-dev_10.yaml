- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: 'Project #6 – Making Your Home Smarter with a Voice Assistant'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目#6 - 使用语音助手使你的家更智能
- en: This chapter is dedicated to smart homes. **Smart homes** is a wide field that
    aims to automate everything in your home to make your life experience better and
    more comfortable, for example, smart light systems, smart air conditioning, smart
    TVs, and so on. But in this chapter, we will explore how we can build a multi-color
    smart bulb that is controlled by the **Arduino IoT Cloud** web and mobile dashboard.
    We’ll also add the Amazon Alexa voice assistant to control the smart bulb using
    voice commands.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章致力于智能家居。**智能家居**是一个广泛的领域，旨在自动化你家的所有事物，以使你的生活体验更好、更舒适，例如智能照明系统、智能空调、智能电视等等。但在这章中，我们将探讨如何构建一个由**Arduino
    IoT Cloud**网页和移动仪表板控制的彩色智能灯泡。我们还将添加亚马逊Alexa语音助手，通过语音命令来控制智能灯泡。
- en: Here, we will practically explore smart homes, picking up the **WS2812 RGB LED**
    ring and Seeed Studio’s newest, and very small, development board in the XIAO
    series, which is based on ESP32 with a lot of features. With the help of the light
    module, development board, and the Arduino IoT Cloud, we will build a smart light
    system.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将实际探索智能家居，选择**WS2812 RGB LED**环形灯和Seeed Studio最新、非常小巧的XIAO系列开发板，该开发板基于ESP32，具有许多功能。借助灯光模块、开发板和Arduino
    IoT Cloud，我们将构建一个智能照明系统。
- en: By the end of this chapter, you will have the confidence to build smart home
    solutions with the help of any open source ESP32/ESP8266 or Arduino series development
    board using the Arduino IoT Cloud. In particular, you will learn how easy it is
    to integrate Amazon Alexa Voice assistant into your smart home projects to make
    them more convenient for end users.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将能够自信地使用任何开源ESP32/ESP8266或Arduino系列开发板，借助Arduino IoT Cloud构建智能家居解决方案。特别是，你将了解如何轻松地将亚马逊Alexa语音助手集成到你的智能家居项目中，使其对最终用户更加方便。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Creating smarter homes with IoT
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用物联网创建更智能的家庭
- en: Essential components – sensors and development boards
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必要组件 - 传感器和开发板
- en: Blueprint for your smart home IoT project
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 智能家居物联网项目的蓝图
- en: Initial setup – Thing, network credentials, cloud variables, and code
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始设置 - 事物、网络凭证、云变量和代码
- en: User-friendly controls – building web and mobile dashboards
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户体验友好的控件 - 构建网页和移动仪表板
- en: Enhancing controls – integrating the Arduino IoT Cloud with Amazon Alexa
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增强控制 - 将Arduino IoT Cloud与亚马逊Alexa集成
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following hardware components are required to complete this chapter’s exercise:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章练习需要以下硬件组件：
- en: Seeed Studio XIAO ESP32C3
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Seeed Studio XIAO ESP32C3
- en: USB type-C cable for XIAO ESP32C3
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XIAO ESP32C3的USB Type-C线缆
- en: WS2812 RGB LED ring
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WS2812 RGB LED环形灯
- en: Male headers, female headers, and a veroboard
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阳性端子、阴性端子和Veroboard
- en: Jumper cables
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳线
- en: Soldering iron
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 焊锡枪
- en: Amazon Echo Dot and the Amazon Alexa mobile app
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亚马逊Echo Dot和亚马逊Alexa移动应用
- en: For coding, we will use the **Arduino Web Editor**, which includes a large collection
    of development boards and sensor libraries, and the Arduino IoT Cloud for the
    Thing and dashboard setup. To develop hardware and sensor designs, we need the
    **Fritzing** desktop software and the **Arduino IDE** for testing the WS2812 ring.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于编码，我们将使用**Arduino Web Editor**，它包含大量开发板和传感器库，以及用于事物和仪表板设置的Arduino IoT Cloud。为了开发硬件和传感器设计，我们需要**Fritzing**桌面软件和**Arduino
    IDE**来测试WS2812环形灯。
- en: 'Here, we will use the **Amazon Echo Dot** as a voice assistant for voice commands
    to control the smart bulb. If you don’t have an Echo Dot, then you can use the
    **Amazon Alexa** app for Android/iOS. The chapter’s code is available in the official
    GitHub repository for the book by following this link: [https://github.com/PacktPublishing/Arduino-IoT-Cloud-for-Developers](https://github.com/PacktPublishing/Arduino-IoT-Cloud-for-Developers).'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将使用**亚马逊Echo Dot**作为语音助手来执行语音命令以控制智能灯泡。如果你没有Echo Dot，那么你可以使用**亚马逊Alexa**应用（适用于Android/iOS）。本章的代码可在官方GitHub仓库中找到，请通过以下链接访问：[https://github.com/PacktPublishing/Arduino-IoT-Cloud-for-Developers](https://github.com/PacktPublishing/Arduino-IoT-Cloud-for-Developers)。
- en: Creating smarter homes with IoT
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用物联网创建更智能的家庭
- en: '**Internet of Things** (**IoT**) technology plays a crucial role in the development
    of smart homes. It enables various devices and appliances within a home to connect,
    communicate, and automate tasks for the convenience, comfort, and efficiency of
    homeowners. Here are some key aspects of IoT for smart homes:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**物联网技术**（**IoT**）在智能家居的发展中起着至关重要的作用。它使得家庭中的各种设备和家电能够连接、通信并自动化任务，从而为房主提供便利、舒适和效率。以下是智能家居中物联网的一些关键方面：'
- en: '**Connectivity**: IoT devices in a smart home are connected to the internet,
    allowing them to communicate with each other, as well as with the homeowner, remotely.
    This connectivity facilitates the control, monitoring, and automation of devices
    from anywhere, using smartphones, tablets, or computers.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**连接性**：智能家居中的物联网设备连接到互联网，使它们能够相互通信，以及与房主远程通信。这种连接性使得无论身在何处，都可以使用智能手机、平板电脑或电脑控制、监控和自动化设备。'
- en: '**Home automation**: IoT enables the automation of various tasks within a smart
    home. For example, lights can automatically turn on or off based on occupancy
    or the time of day. Thermostats can adjust temperature settings based on the homeowner’s
    preferences or presence in the house. IoT-powered automation helps optimize energy
    usage, enhance security, and simplify routine activities.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**家庭自动化**：物联网使得智能家居中各种任务的自动化成为可能。例如，灯光可以根据占用情况或一天中的时间自动开启或关闭。恒温器可以根据房主的偏好或在家中的存在情况调整温度设置。物联网驱动的自动化有助于优化能源使用、增强安全和简化日常活动。'
- en: '**Security and surveillance**: IoT devices can enhance the security of a smart
    home. Smart locks provide keyless entry and allow remote access control. Video
    doorbells enable homeowners to see and communicate with visitors remotely. Surveillance
    cameras can be accessed and monitored from anywhere, providing an additional layer
    of security.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全和监控**：物联网设备可以增强智能家居的安全性。智能锁提供无钥匙进入并允许远程访问控制。视频门铃允许房主远程看到并与访客通信。监控摄像头可以从任何地方访问和监控，提供额外的安全层。'
- en: '**Energy management**: IoT devices help optimize energy consumption within
    a smart home. Smart thermostats learn user preferences and adjust temperature
    settings accordingly, conserving energy when rooms are unoccupied. Smart plugs
    and power strips can monitor and control the energy usage of appliances and electronics,
    helping identify energy-hungry devices and promoting efficient usage.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**能源管理**：物联网设备有助于优化智能家居中的能源消耗。智能恒温器会学习用户的偏好并根据需要调整温度设置，在房间无人时节约能源。智能插座和电源插座可以监控和控制家电和电子产品的能源使用，帮助识别能源消耗大的设备并促进高效使用。'
- en: '**Voice control**: Voice assistants, such as Amazon Alexa or **Google Assistant**,
    integrated with IoT devices enable hands-free control of various functions in
    a smart home. Homeowners can use voice commands to control lights, adjust thermostats,
    play music, check the weather, and perform other tasks, enhancing convenience
    and accessibility.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**语音控制**：与物联网设备集成的语音助手，如亚马逊Alexa或**谷歌助手**，使得智能家居中各种功能的免提控制成为可能。房主可以使用语音命令控制灯光、调整恒温器、播放音乐、查看天气并执行其他任务，从而提高便利性和可访问性。'
- en: '**Health and wellness**: IoT devices can contribute to health and wellness
    within a smart home. Wearable devices, such as fitness trackers or smartwatches,
    can integrate with other home devices, such as smart scales or health monitors,
    to provide comprehensive health data and insights. This data can be shared with
    healthcare professionals or used to automate certain health-related tasks.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**健康与福祉**：物联网设备可以促进智能家居中的健康与福祉。可穿戴设备，如健身追踪器或智能手表，可以与其他家庭设备，如智能秤或健康监测器，集成，以提供全面的健康数据和见解。这些数据可以与医疗保健专业人员共享，或用于自动化某些与健康相关的任务。'
- en: '**Appliance control**: IoT enables the remote control and monitoring of various
    appliances in a smart home. Refrigerators, ovens, washing machines, and other
    appliances can be connected to the internet, allowing homeowners to check their
    status, receive alerts, or control their operation remotely. This connectivity
    adds convenience and flexibility to household chores and management.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**家电控制**：物联网使得智能家居中各种家电的远程控制和监控成为可能。冰箱、烤箱、洗衣机和其他家电可以连接到互联网，允许房主检查其状态、接收警报或远程控制其操作。这种连接性为家务管理和操作提供了便利性和灵活性。'
- en: '**Integration and interoperability**: A crucial aspect of IoT for smart homes
    is the integration and interoperability of devices from different manufacturers.
    Standards and protocols, such as **Zigbee** or **Z-Wave**, facilitate the seamless
    connection and communication between devices, ensuring that different IoT products
    can work together in a unified ecosystem.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成和互操作性**：对于智能家居的物联网来说，一个关键方面是来自不同制造商的设备的集成和互操作性。例如**Zigbee**或**Z-Wave**这样的标准和协议，促进了设备之间无缝的连接和通信，确保不同的物联网产品可以在统一的生态系统中协同工作。'
- en: It’s important to note that while IoT technology brings numerous benefits to
    smart homes, it also introduces potential security and privacy risks. Homeowners
    should take measures to secure their IoT devices, such as using strong passwords,
    keeping firmware up to date, and ensuring proper network security configurations.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，尽管物联网技术为智能家居带来了众多好处，但它也引入了潜在的安全和隐私风险。房主应采取措施确保他们的物联网设备安全，例如使用强密码、保持固件更新以及确保适当的网络安全配置。
- en: Here, we have discussed in detail how IoT is reshaping the lives of human beings
    in homes and offices. Next, we are going to talk about the hardware and components
    that we require to carry on with this chapter’s project.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们详细讨论了物联网如何改变人类在家庭和办公室的生活。接下来，我们将讨论进行本章项目所需的硬件和组件。
- en: Essential components – sensors and development boards
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 必要组件 – 传感器和开发板
- en: In the ESP32 series, we have a wide collection of development boards, which
    vary in size and pins. In this chapter, we are using Seeed Studio’s latest development
    board, the **XIAO ESP32C3**, as it’s very compact and smaller in size than other
    boards, and of course, cheaper and is suitable for 5V as well as 3.3V. The following
    figure is the pin layout diagram of XIAO ESP32C3.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在ESP32系列中，我们有各种各样的开发板，大小和引脚数量各不相同。在本章中，我们使用的是Seeed Studio的最新开发板**XIAO ESP32C3**，因为它非常紧凑，尺寸比其他板更小，当然，价格也更便宜，并且适用于5V以及3.3V。以下图是XIAO
    ESP32C3的引脚布局图。
- en: '![Figure 10.1 – XIAO ESP32C pinout diagram](img/B19752_10_01.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图10.1 – XIAO ESP32C引脚图](img/B19752_10_01.jpg)'
- en: Figure 10.1 – XIAO ESP32C pinout diagram
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.1 – XIAO ESP32C引脚图
- en: XIAO ESP32C provides multiple pins for digital input/output. In the previous
    ESP series board, we found only one analog pin, but on this development board,
    we have four analog pins, which removes the biggest hurdle while developing a
    solution that uses multiple analog pins. With previous ESP series boards, we used
    ADS1115/ADS1015 for extra analog pins, so this development board will save us
    some bucks as we will get four analog pins by default on the development board.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: XIAO ESP32C提供了多个数字输入/输出引脚。在之前的ESP系列板上，我们只找到一个模拟引脚，但在这块开发板上，我们有四个模拟引脚，这消除了在开发使用多个模拟引脚的解决方案时的最大障碍。使用之前的ESP系列板时，我们使用了ADS1115/ADS1015来获得额外的模拟引脚，因此这块开发板将为我们节省一些费用，因为我们可以在开发板上默认获得四个模拟引脚。
- en: Besides all those features, XIAO provides a built-in battery charge module and
    the board is optimized for power consumption, which helps to use this board as
    a wearable device. For connectivity, there are both Wi-Fi and Bluetooth options
    available. It also supports **Bluetooth Low Energy** (**BLE 5**), which is more
    specific to IoT use cases. For further details, please visit [https://wiki.seeedstudio.com/XIAO_ESP32C3_Getting_Started/](https://wiki.seeedstudio.com/XIAO_ESP32C3_Getting_Started/).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 除了所有这些特性之外，XIAO还提供内置的电池充电模块，并且该板针对功耗进行了优化，有助于将其用作可穿戴设备。对于连接性，提供了Wi-Fi和蓝牙选项。它还支持**低功耗蓝牙**（**BLE
    5**），这更适用于物联网用例。有关更多详细信息，请访问[https://wiki.seeedstudio.com/XIAO_ESP32C3_Getting_Started/](https://wiki.seeedstudio.com/XIAO_ESP32C3_Getting_Started/)。
- en: In the current project, we need one digital pin for the WS2812 RGB LED ring.
    One of the good features of the development board is that we have a 5V power pin,
    which is not available on most of the ESP32 series development boards.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前项目中，我们需要一个数字引脚用于WS2812 RGB LED灯环。开发板的一个优点是有5V电源引脚，这在大多数ESP32系列开发板上是不常见的。
- en: We are using the WS2812 16-pixel RGB ring but it comes in different pixels and
    shapes, such as a stick, matrix, and strip. For the lamp, we prefer the ring shape,
    but you guys can choose according to your preferences. WS2812 also comes in long
    strip cables for room decoration and computer tables – especially for gamers,
    hotels, and so on. There are different vendors who provide the WS2812 module,
    but we are using a WS2812 that we purchased from AliExpress and it’s working perfectly.
    You can buy it from Amazon, AdaFruit, SparkFun, or from AliExpress.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的是 WS2812 16 像素 RGB 环形灯，但它有不同的像素和形状，如棒状、矩阵和条形。对于灯具，我们更喜欢环形形状，但你们可以根据自己的喜好选择。WS2812
    还提供长条形电缆，用于室内装饰和电脑桌——特别是对游戏玩家、酒店等。有不同供应商提供 WS2812 模块，但我们使用的是从 AliExpress 购买的 WS2812，它工作得很好。您可以从
    Amazon、AdaFruit、SparkFun 或 AliExpress 购买。
- en: WS2812 comes with RGB color, and it also allows you to control the brightness
    of the module, which varies from 1–100%. It also allows you to control every single
    pixel of the LED – either on/off, or any color, which provides a broad range of
    use cases to develop interesting solutions and prototypes. The WS2812 RGB LED
    comes in different sizes and shapes. The following figure shows the RGB LED ring
    with both the front and back sides.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: WS2812 配备 RGB 颜色，并且它还允许您控制模块的亮度，范围从 1–100%。它还允许您控制每个单独的 LED 像素——无论是开/关，还是任何颜色，这为开发有趣解决方案和原型提供了广泛的应用场景。WS2812
    RGB LED 有不同的尺寸和形状。以下图示显示了带有正面和背面的 RGB LED 环形灯。
- en: '![Figure 10.2 – WS2812 RGB LED ring and pinout diagram](img/B19752_10_02.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.2 – WS2812 RGB LED 环形灯和引脚布局图](img/B19752_10_02.jpg)'
- en: Figure 10.2 – WS2812 RGB LED ring and pinout diagram
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.2 – WS2812 RGB LED 环形灯和引脚布局图
- en: 'The preceding diagram depicts the pinout layout of the WS2812 RGB ring. The
    complete configuration of the pin connections of WS2812 with XIAO ESP32C3 is shown
    in *Table 10.1*. *Pin #1* is a GND pin that connects with the onboard GND pin
    of XIAO ESP32C3\. *Pin #2* is a Power 5V DC pin that works with both 3.3V and
    5V. *Pin #3* is **Data Input**, which connects with any digital pin. *Pin #4*
    is **Data Out**, which is only used if you want to extend the WS2812 ring with
    another ring or stick – this pin will connect to the other ring’s data input pin
    as an extension. Here, I am connecting **Data Input** with *Pin #D3* of the board.
    You can solder the male headers with WS2812 or directly solder the cables without
    any header pins.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '前面的图示展示了 WS2812 RGB 环形灯的引脚布局。WS2812 与 XIAO ESP32C3 的引脚连接完整配置显示在 *表 10.1* 中。*引脚
    #1* 是一个 GND 引脚，它与 XIAO ESP32C3 板上的 GND 引脚相连。*引脚 #2* 是一个 5V DC 电源引脚，它既适用于 3.3V
    也适用于 5V。*引脚 #3* 是 **数据输入**，它可以连接到任何数字引脚。*引脚 #4* 是 **数据输出**，仅在您想用另一个环形灯或条形灯扩展 WS2812
    环形灯时使用——这个引脚将作为扩展连接到另一个环形灯的数据输入引脚。在这里，我将 **数据输入** 连接到板上的 *引脚 #D3*。您可以使用带有 WS2812
    的公头或直接焊接电缆而不使用任何头针。'
- en: Important note
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The WS2812 module works perfectly, but still it’s necessary to verify that all
    pixels of the ring/strip are working perfectly. In my case, my last pixel is not
    working.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: WS2812 模块工作得很好，但仍然有必要验证环形灯/条形灯的所有像素是否都工作正常。在我的情况下，我的最后一个像素没有工作。
- en: In the current section, we have discussed the XIAO ESP32C3 and WS2812 RGH LED
    ring, as well as its pins. Next, we are going to discuss the project architecture
    in detail, which includes the project schematics and assembly.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了 XIAO ESP32C3 和 WS2812 RGB 环形 LED，以及其引脚。接下来，我们将详细讨论项目架构，包括项目原理图和组装。
- en: Blueprint for your smart home IoT project
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 智能家居 IoT 项目蓝图
- en: In the preceding sections, we discussed the sensors and development board in
    detail. Now, it’s time to cook the recipe. In hardware development, before starting
    to work with sensors and development boards, we need to develop the design concepts
    to get a better understanding of how things will be connected. There is a lot
    of software available to design and develop design concepts regarding electronics
    projects, but we are going to use Fritzing.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们详细讨论了传感器和开发板。现在，是时候动手制作食谱了。在硬件开发中，在开始使用传感器和开发板之前，我们需要开发设计概念，以便更好地理解事物如何连接。有许多软件可用于设计和发展有关电子项目的概念，但我们将使用
    Fritzing。
- en: In the following two subsections, first, we will talk about the schematics and
    design of a project and explain how to connect the pins of the development board
    with soldering. Next, we will do some testing of the WS2812 to check all the colors
    and pixels are working.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下两个小节中，首先，我们将讨论项目的原理图和设计，并解释如何通过焊接将开发板的引脚连接起来。接下来，我们将对WS2812进行一些测试，以检查所有颜色和像素是否正常工作。
- en: Schematic design and assembly
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原理图设计和组装
- en: The purpose of the design is to clearly understand how sensors will connect
    with the development board. It helps engineers to develop a prototype on a breadboard
    or on a veroboard by using these design files. Another major benefit of designing
    is that Fritzing builds hardware schematics and a **Printed Circuit Board** (**PCB**)
    design in the background according to your design, which could be adjusted by
    designers according to system requirements. The complete connection diagram of
    the XIAO ESP32C3 and WS2812 RGB LED ring is shown in the following figure.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 设计的目的是清楚地了解传感器将如何连接到开发板。它帮助工程师使用这些设计文件在面包板或veroboard上开发原型。设计的主要好处之一是Fritzing会在后台根据您的设计构建硬件原理图和**印刷电路板**（**PCB**）设计，设计师可以根据系统要求进行调整。XIAO
    ESP32C3和WS2812 RGB LED环的完整连接图如下所示。
- en: '![Figure 10.3 – XIAO ESP32C and WS2812 system design](img/B19752_10_03.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图10.3 – XIAO ESP32C和WS2812系统设计](img/B19752_10_03.jpg)'
- en: Figure 10.3 – XIAO ESP32C and WS2812 system design
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.3 – XIAO ESP32C和WS2812系统设计
- en: '*Figure 10**.3* illustrates the pin diagram of the whole setup, but for easy
    guidance, we also created *Table 10.1*, which explains, in a simple way, how to
    connect the pins of WS2812 to XIAO ESP32C.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10*.*3*展示了整个设置的引脚图，但为了便于指导，我们还创建了*表10.1*，它以简单的方式解释了如何将WS2812的引脚连接到XIAO ESP32C。'
- en: '| **XIAO ESP32C** | **WS2812 Ring** |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| **XIAO ESP32C** | **WS2812 环形灯** |'
- en: '| A3 | Data Input |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| A3 | 数据输入 |'
- en: '| 5V | Power 5V DC |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 5V | 电源5V直流 |'
- en: '| GND | Power Signal Ground |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| GND | 电源信号地 |'
- en: Table 10.1 – XIAO ESP32C and WS2812 connection
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 表10.1 – XIAO ESP32C和WS2812连接
- en: The preceding design and table provide a full overview of how you can connect
    the sensors to the development board. According to the design, we have common
    5V and GND pins from the XIAO ESP32C3 board to the WS2812 module. WS2812 is a
    digital module so we connected its **Data Input** pin to the D3 pin of the development
    board. The following figure shows the final prototype of the smart bulb on the
    veroboard.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 上述设计和表格提供了如何将传感器连接到开发板的全面概述。根据设计，我们从XIAO ESP32C3板到WS2812模块有常见的5V和GND引脚。WS2812是一个数字模块，因此我们将它的**数据输入**引脚连接到开发板的D3引脚。以下图显示了veroboard上智能灯泡的最终原型。
- en: '![Figure 10.4 – Final prototype](img/B19752_10_04.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图10.4 – 最终原型](img/B19752_10_04.jpg)'
- en: Figure 10.4 – Final prototype
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.4 – 最终原型
- en: After soldering cables to the module and the male header to the XIAO ESP32C3,
    connect the pins according to the schematic diagram. There is only one module,
    so there is no requirement for a veroboard. But I am developing a proper prototype
    this time – that’s why I used a Veroboard. Now it’s time to verify the colors
    and pixels of the WS2812 using ESP32C3.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在将电缆连接到模块和公排针连接到XIAO ESP32C3之后，根据原理图连接引脚。只有一个模块，因此不需要veroboard。但这次我正在开发一个合适的原型——这就是为什么我使用了veroboard。现在，是时候使用ESP32C3验证WS2812的颜色和像素了。
- en: Testing the WS2812 with the Arduino IDE
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Arduino IDE测试WS2812
- en: 'To install the ESP32 series development board in the Arduino IDE, first, add
    the board’s definition file in the preferences. To proceed further, follow these
    steps:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Arduino IDE中安装ESP32系列开发板，首先，在首选项中添加板的定义文件。要继续操作，请按照以下步骤进行：
- en: Navigate to **File** > **Preferences** and fill **Additional Boards Manager
    URLs** with the URL [https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_dev_index.json](https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_dev_index.json),
    as shown in the following figure.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**文件** > **首选项**，并在**附加板管理器URL**中填写URL [https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_dev_index.json](https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_dev_index.json)，如图以下所示。
- en: '![Figure 10.5 – ESP32 board information in the Arduino IDE](img/B19752_10_05.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图10.5 – Arduino IDE中的ESP32板信息](img/B19752_10_05.jpg)'
- en: Figure 10.5 – ESP32 board information in the Arduino IDE
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.5 – Arduino IDE中的ESP32板信息
- en: Later on, navigate to `esp32` in the search box, select the latest version of
    **esp32**, and install it, as shown in the following figure.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，在搜索框中导航到`esp32`，选择最新的**esp32**版本，并安装，如图所示。
- en: '![Figure 10.6 – ESP32 series board installation in the Arduino IDE](img/B19752_10_06.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图10.6 – ESP32系列板在Arduino IDE中的安装](img/B19752_10_06.jpg)'
- en: Figure 10.6 – ESP32 series board installation in the Arduino IDE
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.6 – ESP32系列板在Arduino IDE中的安装](img/B19752_10_06.jpg)'
- en: Finally, select the board, navigate to **Tools** > **Board** > **ESP32 Arduino**,
    and select **XIAO_ESP32C3**. The list of boards is a little long and you need
    to scroll to the bottom, as shown in the following figure.![](img/B19752_10_07.jpg)
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，选择板子，导航到**工具** > **板** > **ESP32 Arduino**，并选择**XIAO_ESP32C3**。板子的列表有点长，你需要滚动到最底部，如图所示。![图B19752_10_07.jpg](img/B19752_10_07.jpg)
- en: Figure 10.7 – XIAO ESP32C3 board selection in the Arduino IDE
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.7 – XIAO ESP32C3板在Arduino IDE中的选择](img/B19752_10_07.jpg)'
- en: It’s time to install the WS2812 library. Navigate to `Adafruit neopixel` in
    the search bar. Here, you will get different libraries, but you need to install
    the specific library that matches the search query.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是安装WS2812库的时候了。在搜索栏中导航到`Adafruit neopixel`。在这里，你会得到不同的库，但你需要安装与搜索查询匹配的特定库。
- en: 'Now we are ready to proceed with the testing steps. Download the code from
    the official GitHub repository for the book, navigate to the `WS2812_Testing`
    folder, and open up the code:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好进行测试步骤。从官方GitHub仓库下载代码，导航到`WS2812_Testing`文件夹，并打开代码：
- en: '[PRE0]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Change the `LED_PIN` constant to `D3` or `D5`. Next, assign the number of pixels
    to the `LED_COUNT` constant. Right now, I have 16 pixels in the WS2812 – that’s
    why I am inserting `16`. After making modifications, upload the code to the board.
    Later, you will see the color white on the LED and a moving animation in a circular
    form. In the `setup()` method, we initialized `NeoPixel strip` and set the brightness
    to 50%:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 将`LED_PIN`常量更改为`D3`或`D5`。接下来，将像素数量分配给`LED_COUNT`常量。目前，我在WS2812中有16个像素，这就是为什么我插入`16`。修改后，将代码上传到板子。之后，你将在LED上看到白色，以及圆形形式的移动动画。在`setup()`方法中，我们初始化了`NeoPixel
    strip`并将亮度设置为50%：
- en: '[PRE1]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Later, in the `loop()` method, there are two loops. The first loop is used to
    assign the white color to each pixel and turn on the pixel according to the loop
    value, with a delay of 200 milliseconds, while in the second loop, we turn off
    all the pixels one by one by changing the brightness to `0` and RGB colors to
    `0`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在`loop()`方法中，有两个循环。第一个循环用于将白色分配给每个像素，并根据循环值打开像素，延迟200毫秒，而在第二个循环中，我们通过将亮度更改为`0`和RGB颜色更改为`0`，逐个关闭所有像素。
- en: In this section, we have assembled the hardware component on the veroboard and
    used the code to verify that the WS2812 RGB LED is working. Next, we will set
    up the Thing and cloud variables in the Arduino IoT Cloud to make our prototype
    live.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们在veroboard上组装了硬件组件，并使用代码验证WS2812 RGB LED是否工作。接下来，我们将在Arduino IoT云中设置设备和云变量，使我们的原型机运行。
- en: Initial setup – Thing, network credentials, cloud variables, and code
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始设置 – 设备、网络凭证、云变量和代码
- en: After setting up the hardware, it’s time to set up Thing in the Arduino IoT
    Cloud. For this project, we need one cloud variable to control the LED brightness
    and color, and turn on/off the WS2812 ring, but I am using three different cloud
    variables so you will get an idea of when and why we need to use these cloud variables,
    and every variable connects with a specific widget. The network settings will
    be different from Arduino development boards due to using ESP series board.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置好硬件后，现在是时候在Arduino IoT云中设置设备了。对于这个项目，我们需要一个云变量来控制LED亮度、颜色，以及打开/关闭WS2812环形灯，但我使用了三个不同的云变量，这样你就可以了解何时以及为什么需要使用这些云变量，每个变量都与一个特定的小部件连接。由于使用了ESP系列板，网络设置将与Arduino开发板不同。
- en: '![Figure 10.8 – Air quality monitoring system Thing setup](img/B19752_10_08.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图10.8 – 空气质量监控系统设备设置](img/B19752_10_08.jpg)'
- en: Figure 10.8 – Air quality monitoring system Thing setup
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.8 – 空气质量监控系统设备设置
- en: 'Set up a new `Voice Controlled Smart Lamp` and follow these steps to create
    variables, associate a device and network configuration, and finally, write the
    code:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 设置一个新的`语音控制智能灯`，并按照以下步骤创建变量，关联设备和网络配置，最后编写代码：
- en: Firstly, we need to set up three cloud variables for the WS2812\. Complete details
    regarding cloud variables are available in the following section.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要为WS2812设置三个云变量。有关云变量的详细信息，请参阅以下部分。
- en: After that, we need to associate the device with the Thing. In the current project,
    we are using the XIAO ESP32C3, so the wizard will be different than for Arduino
    boards. The complete details are available in the *Associating a* *device* section.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们需要将设备与实体关联起来。在当前项目中，我们使用XIAO ESP32C3，因此向导将与Arduino板不同。完整的细节在*关联设备*部分有所说明。
- en: Finally, we need to set up the network configuration for the device, but this
    time we need to provide a security key for ESP series boards to make the connection
    secure. Arduino-compatible boards are configured by the Arduino IoT Cloud automatically
    during the device setup wizard.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要设置设备的网络配置，但这次我们需要为ESP系列板提供安全密钥以确保连接安全。Arduino兼容的板子在设备设置向导期间由Arduino IoT
    Cloud自动配置。
- en: Cloud variables
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 云变量
- en: The following table provides all the properties of the variables that we need
    to use during cloud variable creation. For the WS2812, we can use the integer
    and bool data types, which creates a lot of mess, but thanks to the Arduino IoT
    Cloud’s extended group of variables, we have the **Dimmed light**, **Color**,
    and **Colored Light** type variables. Next, make sure the same variables are declared
    as shown in *Table 10.2*, otherwise, you’ll need to modify the example code according
    to your naming.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格提供了我们在创建云变量时需要使用的所有变量的属性。对于WS2812，我们可以使用整数和布尔数据类型，这会创建很多混乱，但多亏了Arduino IoT
    Cloud扩展的变量组，我们有**Dimmed light**、**Color**和**Colored Light**类型的变量。接下来，确保变量声明与*表10.2*中所示相同，否则您需要根据您的命名修改示例代码。
- en: Here, I made the permission read and write, as this time we will send commands
    from the cloud dashboard or voice assistant, so it’s mandatory to give cloud variables
    permission to read and write.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我设置了读写权限，因为这次我们将从云仪表板或语音助手发送命令，因此必须授予云变量读写权限。
- en: '| **S#** | **Variable Name** | **Variable Type** | **Declaration** | **Permission**
    | **Update** **Policy** |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| **S#** | **Variable Name** | **Variable Type** | **Declaration** | **Permission**
    | **Update Policy** |'
- en: '| 1 | `LightBrightness` | Dimmed light | `lightBrightness` | Read and write
    | On change |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| 1 | `LightBrightness` | Dimmed light | `lightBrightness` | Read and write
    | On change |'
- en: '| 2 | `RGBLightColor` | Color | `rGBLightColor` | Read and write | On change
    |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| 2 | `RGBLightColor` | Color | `rGBLightColor` | Read and write | On change
    |'
- en: '| 3 | `TableLight` | Colored Light | `tableLight` | Read and write | On change
    |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| 3 | `TableLight` | Colored Light | `tableLight` | Read and write | On change
    |'
- en: Table 10.2 – Cloud variables properties table
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 表10.2 – 云变量属性表
- en: 'Previously, I mentioned that we only need one cloud variable, but I am using
    three different cloud variables and will explain their usage. If I start from
    the `RGBLightColor`, has only one option regarding the color change. But if we
    come to the **Colored Light** type cloud variable, then it provides all three
    options: brightness, color, and an on/off switch. This cloud variable is also
    compatible with Amazon Alexa and that type cloud variable will be represented
    as a device in the Amazon Alexa Smart Home skills portal, which is discussed in
    the *Enhancing control – Integrating Arduino IoT Cloud with Amazon* *Alexa* section.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我提到我们只需要一个云变量，但我正在使用三个不同的云变量，并将解释它们的用法。如果我们从`RGBLightColor`开始，关于颜色变化只有一个选项。但如果我们转到**Colored
    Light**类型的云变量，那么它提供了所有三个选项：亮度、颜色以及开关。这个云变量也与Amazon Alexa兼容，并且这种类型的云变量将在Amazon
    Alexa智能家居技能门户中作为一个设备表示，这在*增强控制 - 将Arduino IoT Cloud与Amazon Alexa集成*部分有所讨论。
- en: Associating a device
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关联设备
- en: After variable creation, it’s time to add a device associated with the Thing.
    Before adding the device, connect the development board to the computer and open
    the **Arduino Create Agent** application. The following figure shows how to select
    the ESP32 and then the XIAO_ESP32C3 development board in the popup.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 变量创建后，是时候添加与实体关联的设备了。在添加设备之前，将开发板连接到计算机并打开**Arduino Create Agent**应用程序。以下图示显示了如何在弹出窗口中选择ESP32，然后选择XIAO_ESP32C3开发板。
- en: '![Figure 10.9 – Device selection wizard](img/B19752_10_09.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图10.9 – 设备选择向导](img/B19752_10_09.jpg)'
- en: Figure 10.9 – Device selection wizard
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.9 – 设备选择向导
- en: 'Follow these steps to associate the XIAO ESP32C3 to the Thing:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤将XIAO ESP32C3与实体关联：
- en: Click on the **Select Device** button under the **Associated Device** section
    on the Thing page shown in *Figure 10**.8*.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在实体的页面中，点击**关联设备**部分下的**选择设备**按钮，如图10.8*所示。
- en: A popup will appear where you can see all the devices that are already available.
    If you have already added your XIAO ESP32C3, select it. Otherwise, click on **SET
    UP** **NEW DEVICE**.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将出现一个弹出窗口，其中您可以查看所有已可用的设备。如果您已经添加了您的 XIAO ESP32C3，请选择它。否则，点击 **设置** **新设备**。
- en: Next, click on the **Third party** **device** option.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击 **第三方** **设备** 选项。
- en: Select **ESP32** and **XIAO_ESP32C3** from the dropdown and click on the **CONTINUE**
    button shown in *Figure 10**.9*.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉菜单中选择 **ESP32** 和 **XIAO_ESP32C3**，然后点击 *图 10.9* 中显示的 **继续** 按钮。
- en: Fill in **Device Name** and click on the **Next** button.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写 **设备名称** 并点击 **下一步** 按钮。
- en: In the final wizard, **Device ID** and **Secret Key** will be displayed. Copy
    the secret key to a safe place as it will be used during the network configuration.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在最后的向导中，将显示 **设备 ID** 和 **密钥**。请将密钥复制到安全的地方，因为它将在网络配置过程中使用。
- en: Now, let’s move to the network configuration.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们转到网络配置。
- en: Network
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络
- en: After associating the device with the Thing, it is time to configure the Wi-Fi
    settings for device communication. The following figure shows the network configuration
    popup with the **Wi-Fi Name** and **Password** fields.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在将设备与 Thing 关联后，是时候配置设备通信的 Wi-Fi 设置了。以下图显示了带有 **Wi-Fi 名称** 和 **密码** 字段的网络配置弹出窗口。
- en: "![Figure 10.10 – Network configuration for \uFEFFthe Thing](img/B19752_10_10.jpg)"
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.10 – Thing 的网络配置](img/B19752_10_10.jpg)'
- en: Figure 10.10 – Network configuration for the Thing
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.10 – Thing 的网络配置
- en: You will find a new field – **Secret Key**. Paste the secret key that we received
    from the system during device creation.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 您将找到一个新字段 – **密钥**。粘贴我们在设备创建期间从系统收到的密钥。
- en: Coding
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编码
- en: The chapter’s code is available at the official GitHub repository for the book.
    Download the `Voice_Controlled_Smart_Lamp_may13a` code from the repository and
    import it to the Arduino Web Editor.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 该章节的代码可在本书的官方 GitHub 仓库中找到。从仓库下载 `Voice_Controlled_Smart_Lamp_may13a` 代码并将其导入到
    Arduino Web 编辑器中。
- en: 'You can download the code and put it into your Thing by navigating to the `delay()`
    method – it will block the `ArduinoCloud.update()` method. But before moving forward,
    at the start of the code, we need to change the `LED_PIN` constant to `5` and
    assign a value to `LED_COUNT` according to the number of pixels in the ring/strip.
    Here, I am assigning the value `16` as I am using a 16-pixel ring:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过导航到 `delay()` 方法下载代码并将其放入您的 Thing 中 – 它将阻塞 `ArduinoCloud.update()` 方法。但在继续之前，我们需要在代码的开始处将
    `LED_PIN` 常量更改为 `5` 并根据环/条带中的像素数量为 `LED_COUNT` 分配一个值。在这里，我将值设置为 `16`，因为我使用的是一个
    16 像素的环：
- en: '[PRE2]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If we review the preceding code for the constant, then we will see there is
    one `NeoPixel strip` object and four global variables for the switch (`swi`),
    brightness (`bright`), saturation (`sat`), and hue that will be used later to
    sync the values from one widget control to another widget control to enable the
    synchronization between widgets.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们回顾先前的常量代码，那么我们会看到有一个 `NeoPixel strip` 对象和四个全局变量（开关 `swi`）、亮度 `bright`）、饱和度
    `sat`）和色调，这些将在以后用于从一个部件控制同步到另一个部件控制，以启用部件之间的同步。
- en: After filling the preceding constants with appropriate values, it’s time to
    explore some other methods. If we talk about the setup, then there are only a
    few lines that initiate the `NeoPixel strip` object as well as the Arduino IoT
    Cloud and some other operations. In this project, our `loop()` method will include
    one line regarding an Arduino Cloud update and nothing else. Actually, in this
    project, code will be executed where any change happens on the widget side.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在用适当的值填写前面的常量之后，是时候探索一些其他方法了。如果我们谈论设置，那么只有几行代码会初始化 `NeoPixel strip` 对象以及 Arduino
    IoT Cloud 和一些其他操作。在这个项目中，我们的 `loop()` 方法将包括一行关于 Arduino Cloud 更新的代码，没有其他内容。实际上，在这个项目中，代码将在部件侧发生任何变化时执行。
- en: 'In the project, we have four more methods. Three are event-oriented and one
    is a common helper method that will be used by three `onLightBrightnessChange()`,
    `onRGBLightColorChange()`, and `onTableLightChange()` methods are event-oriented
    and the `ControlTheWS2812()` method is a **common helper method**. Next, we are
    going to explore all the methods step by step:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目中，我们还有四种更多方法。其中三种是面向事件的，一种是一个将被三个 `onLightBrightnessChange()`、`onRGBLightColorChange()`
    和 `onTableLightChange()` 方法使用的通用辅助方法，而 `ControlTheWS2812()` 方法是一个 **通用辅助方法**。接下来，我们将逐步探索所有这些方法：
- en: '[PRE3]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the `onLightBrightnessChange()` method, we take brightness and switch values
    from the `lightBrightness` cloud variable and later assign the values with global
    variables. The last calling method, `ControlTheWS2812()`, performs the operation
    on the WS2812 ring according to global variable values:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `onLightBrightnessChange()` 方法中，我们从 `lightBrightness` 云变量中获取亮度和开关值，随后将这些值与全局变量一起分配。最后一个调用的方法
    `ControlTheWS2812()` 根据全局变量的值在 WS2812 环上执行操作：
- en: '[PRE4]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `onRGBLightColorChange()` method is the second method that will be called
    when there is any change in the color widget control. This method fetches hue,
    saturation, and brightness values from the `Color` type cloud variable and later
    assigns these values to other cloud variables as well as global variables. The
    last calling method, `ControlTheWS2812()`, performs the operation on the WS2812
    ring according to global variable values:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`onRGBLightColorChange()` 方法是在颜色控件控制中发生任何变化时将被调用的第二个方法。此方法从 `Color` 类型的云变量中获取色调、饱和度和亮度值，随后将这些值分配给其他云变量以及全局变量。最后一个调用的方法
    `ControlTheWS2812()` 根据全局变量的值在 WS2812 环上执行操作：'
- en: '[PRE5]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `onTableLightChange()` method is associated with the `tablelight` cloud
    variable and assign these values to global variables as well to two other cloud
    variables for synchronization. The last calling method, `ControlTheWS2812()`,
    will perform the operation on the WS2812 ring according to global variable values:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`onTableLightChange()` 方法与 `tablelight` 云变量相关联，并将这些值分配给全局变量以及另外两个云变量以实现同步。最后一个调用的方法
    `ControlTheWS2812()` 将根据全局变量的值在 WS2812 环上执行操作：'
- en: '[PRE6]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Finally, we have our last, common helper method, `ControlTheWS2812()`. This
    method will first generate RGB color from hue, saturation, and brightness. Then
    it will check the switch value – if it is true, then the condition will assign
    the brightness and color to the WS2812 ring and turn on every pixel of the ring
    with the help of the `for` loop. Otherwise, it will set the brightness to `0`
    and turn off all the pixels of the WS2812.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有我们的最后一个、通用的辅助方法 `ControlTheWS2812()`。此方法首先根据色调、饱和度和亮度生成 RGB 颜色。然后它将检查开关值
    – 如果它是真的，那么条件将分配亮度和颜色到 WS2812 环，并借助 `for` 循环打开环上的每个像素。否则，它将亮度设置为 `0` 并关闭 WS2812
    的所有像素。
- en: Important note
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: If you used different *naming* in the variable declaration, then update the
    code according to your naming scheme. But it’s better if you first follow all
    the steps according to the book and later change the cloud variable names and
    modify your code respectively.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在变量声明中使用了不同的 *命名*，那么请根据你的命名方案更新代码。但最好是首先按照书中的所有步骤进行，然后再分别更改云变量名称并修改你的代码。
- en: The Arduino IoT Cloud only updates the values on the dashboard whenever a variable
    value is changed. For example, if the temperature is 30 and after 5 minutes it’s
    the same, then the Arduino IoT Cloud will not record the value. So, don’t get
    confused if values are not changed on the widget controls. Another benefit of
    this feature is you will not get duplicated data when you are exporting the content.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino IoT Cloud 仅在变量值更改时更新仪表板上的值。例如，如果温度是 30 度，5 分钟后仍然是同样的温度，那么 Arduino IoT
    Cloud 不会记录该值。所以，如果控件上的值没有变化，请不要感到困惑。此功能的另一个好处是，当你导出内容时，你将不会得到重复的数据。
- en: In this section, we set up the Thing, associated the XIAO ESP32C3 with the Thing,
    and set up cloud variables of different types to control LED operations. We also
    discussed the code for the device in detail, step by step, according to different
    methods. Now, in the next section, we will set up the dashboard.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们设置了事物，将 XIAO ESP32C3 与事物关联，并设置了不同类型的云变量以控制 LED 操作。我们还根据不同的方法详细讨论了设备的代码，一步一步地。现在，在下一节中，我们将设置仪表盘。
- en: User-friendly controls – building web and mobile dashboards
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户体验友好的控件 – 构建网页和移动仪表盘
- en: After uploading the code to the device, it’s time to set up a dashboard for
    web and mobile to visualize the data with different widgets. The following screenshot
    shows a visualization of light controls with different widgets.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在将代码上传到设备后，是时候为网页和移动设备设置仪表盘，以便使用不同的控件可视化数据了。以下截图显示了使用不同控件的光控制可视化。
- en: '![Figure 10.11 – Thing dashboard](img/B19752_10_11.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.11 – 事物仪表盘](img/B19752_10_11.jpg)'
- en: Figure 10.11 – Thing dashboard
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.11 – 事物仪表盘
- en: We have three core functionalities of WS2812, which include RGB color, brightness,
    and the on/off switch. In the previous section, we created three different cloud
    variables, which provide different functionalities. That’s why here we have three
    different widget controls, which only work with these cloud variables. The first
    widget is `tableLight` cloud variable and capable of performing all of the operations
    on the WS2812, such as color change, brightness control, and switching it on and
    off.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: WS2812有三个核心功能，包括RGB颜色、亮度和开关。在上一节中，我们创建了三个不同的云变量，提供了不同的功能。这就是为什么这里我们有三个不同的小部件控制，它们只与这些云变量一起工作。第一个小部件是`tableLight`云变量，能够执行WS2812上的所有操作，例如颜色变化、亮度控制和开关。
- en: Next, we have two more controls with limited functionalities. The second widget
    is `lightBrightness` cloud variable and only provides an on/off switch and brightness
    control, while our third widget control is `rGBLightColor` cloud variable and
    only provides the option to choose the color. If we compare all three widgets,
    then the **Colored Light** widget is equal to both **Dimmed light** and the **Color**
    widget, as the **Colored Light** widget has three functionalities, which include
    turning it on and off, color selection, and brightness control, while the **Dimmed
    light** widget control has only two options, brightness control and turning on
    and off functionality, and the **Color** widget control only has the option to
    choose the color.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们还有两个具有有限功能的小部件。第二个小部件是`lightBrightness`云变量，它只提供了一个开关和亮度控制，而我们的第三个小部件控制是`rGBLightColor`云变量，它只提供了选择颜色的选项。如果我们比较这三个小部件，那么**彩色灯光**小部件等于**调暗灯光**和**颜色**小部件，因为**彩色灯光**小部件有三个功能，包括开关、颜色选择和亮度控制，而**调暗灯光**小部件控制只有两个选项，亮度控制和开关功能，**颜色**小部件控制只有选择颜色的选项。
- en: So, the final conclusion is if you have a multi-color strip with a brightness
    control feature, then the **Colored Light** widget and cloud variable are good
    to go; otherwise, for a single-color light with brightness control, the **Dimmed
    light** widget and cloud variable are perfect. And if you have only a strip with
    the multi-color option without a brightness control, then a simple **Color** widget
    and cloud variable type are enough but remember the **Color** type cloud variable
    is not compatible with Amazon Alexa.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，最终的结论是，如果你有一个带有亮度控制功能的多色条，那么**彩色灯光**小部件和云变量就很好用；否则，对于带有亮度控制的单色灯，**调暗灯光**小部件和云变量是完美的。如果你只有带有多色选项但没有亮度控制的多色条，那么一个简单的**颜色**小部件和云变量类型就足够了，但请记住，**颜色**类型的云变量与Amazon
    Alexa不兼容。
- en: In this section, we have set up the dashboard with different types of widget
    controls, which help you to control WS2812 in different ways, such as controlling
    the brightness, color, and turning on and off the LED ring. Next, we are going
    to set up the Amazon Alexa Skill with the Arduino IoT Cloud to control our table
    lamp with voice commands using Amazon Alexa.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们已经设置了包含不同类型小部件控制的仪表板，这有助于你以不同的方式控制WS2812，例如控制亮度、颜色以及开关LED环。接下来，我们将使用Arduino
    IoT Cloud设置Amazon Alexa技能，通过Amazon Alexa使用语音命令控制我们的台灯。
- en: Enhancing controls – integrating the Arduino IoT Cloud with Amazon Alexa
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 增强控制功能 – 将Arduino IoT Cloud与Amazon Alexa集成
- en: After testing everything on the device using the Arduino IoT Cloud dashboard,
    it’s time to link Amazon Alexa with our thing for the voice control system. We
    have a physical hardware device for Alexa as well mobile apps for Android/iOS.
    Please visit [https://alexa.amazon.com/](https://alexa.amazon.com/) to set up
    this project. I am using Amazon Echo Dot second generation, but if you don’t have
    access to an Alexa hardware device, then you can simply use the mobile app.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在Arduino IoT Cloud仪表板上测试完所有设备后，是时候将Amazon Alexa与我们的设备连接起来，以实现语音控制系统。我们有一个用于Alexa的物理硬件设备以及Android/iOS的移动应用程序。请访问[https://alexa.amazon.com/](https://alexa.amazon.com/)来设置此项目。我使用的是第二代Amazon
    Echo Dot，但如果你无法访问Alexa硬件设备，那么你可以简单地使用移动应用程序。
- en: '![Figure 10.12 – Arduino Skill for Amazon Alexa](img/B19752_10_12.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.12 – Arduino Skill for Amazon Alexa](img/B19752_10_12.jpg)'
- en: Figure 10.12 – Arduino Skill for Amazon Alexa
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.12 – Arduino Skill for Amazon Alexa
- en: The Arduino IoT Cloud natively developed a skill for Amazon Alexa, which can
    be found at [https://www.amazon.com/Arduino-LLC/dp/B07ZT2PK2H](https://www.amazon.com/Arduino-LLC/dp/B07ZT2PK2H).
    Set up your Amazon Alexa and navigate to the preceding URL to enable a skill,
    which is shown in the preceding figure. When you link the account, it will automatically
    link the Arduino IoT cloud account that is already logged in with this Skill.
    So, make sure you are already logged in to the Arduino IoT Cloud. The preceding
    figure shows the Arduino Skill for Amazon Alexa.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino IoT Cloud原生开发了一个适用于Amazon Alexa的技能，可以在[https://www.amazon.com/Arduino-LLC/dp/B07ZT2PK2H](https://www.amazon.com/Arduino-LLC/dp/B07ZT2PK2H)找到。设置您的Amazon
    Alexa并导航到前面的URL以启用技能，如图所示。当您链接账户时，它将自动链接已登录此技能的Arduino IoT云账户。因此，请确保您已经登录到Arduino
    IoT云。前面的图显示了Amazon Alexa的Arduino技能。
- en: '![Figure 10.13 – Amazon Alexa Smart Home and devices](img/B19752_10_13.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![图10.13 – Amazon Alexa智能家居和设备](img/B19752_10_13.jpg)'
- en: Figure 10.13 – Amazon Alexa Smart Home and devices
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.13 – Amazon Alexa智能家居和设备
- en: After enabling the Arduino skill in Amazon Alexa, navigate to [https://alexa.amazon.com/spa/index.html](https://alexa.amazon.com/spa/index.html)
    and click on the **Smart Home** link, which is located in the left sidebar, then
    click on **Devices**, shown in the preceding figure. Here, you will see cloud
    variables will become devices, as shown in the following figure. If you don’t
    see your desired Arduino IoT Cloud variables as a device, then at the bottom,
    click on the **Discover** button on the **Devices** page, which will take around
    20 seconds to load all the stuff.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 启用Amazon Alexa中的Arduino技能后，导航到[https://alexa.amazon.com/spa/index.html](https://alexa.amazon.com/spa/index.html)并点击左侧侧边栏中的**智能家居**链接，然后点击图中的**设备**。在这里，您将看到云变量将变成设备，如图所示。如果您看不到您想要的Arduino
    IoT云变量作为设备，那么在页面底部，点击**设备**页面上的**发现**按钮，这将花费大约20秒来加载所有内容。
- en: '![Figure 10.14 – Arduino Cloud variables as devices at Amazon Alexa](img/B19752_10_14.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![图10.14 – Arduino Cloud变量作为Amazon Alexa中的设备](img/B19752_10_14.jpg)'
- en: Figure 10.14 – Arduino Cloud variables as devices at Amazon Alexa
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.14 – Arduino Cloud变量作为Amazon Alexa中的设备
- en: 'Finally, turn on your Amazon Echo Dot and WS2812-based smart lamp and try the
    following voice commands on Amazon Alexa. Firstly, try these commands, which will
    help you turn on/off **TableLight**. As shown in the preceding figure, **TableLight**
    is now acting as a device in the Amazon Alexa smart home:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，打开您的Amazon Echo Dot和基于WS2812的智能灯，并在Amazon Alexa上尝试以下语音命令。首先，尝试以下命令，这将帮助您打开/关闭**TableLight**。如图所示，**TableLight**现在正在作为Amazon
    Alexa智能家居中的设备运行：
- en: '[PRE7]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now it’s time to change the brightness and colors of the WS2812 using voice
    commands. Try the following commands, which will help you to update the brightness
    and colors. Right now, I have just written four different colors, but you can
    choose any color name that you want:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候使用语音命令来改变WS2812的亮度和颜色了。尝试以下命令，这将帮助您更新亮度和颜色。目前，我刚刚写了四种不同的颜色，但您可以选择任何您想要的颜色名称：
- en: '[PRE8]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Finally, I am using the Alexa timer functionality to schedule turning on/off
    the table light after a specific time interval. But you can also use this function
    just like an alarm and turn on/off the WS2812 for long intervals, such as to turn
    on the light early in the morning, turning off the lamp at 10:00 P.M., and so
    on:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我正在使用Alexa计时器功能来安排在特定时间间隔后打开/关闭台灯。但您也可以像闹钟一样使用此功能，长时间打开/关闭WS2812，例如在清晨提前打开灯光，晚上10:00关闭灯等：
- en: '[PRE9]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We have discussed different voice commands for Amazon Alexa, but you can search
    on the internet for more commands regarding light controls and colors.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了针对Amazon Alexa的不同语音命令，但您可以在互联网上搜索更多有关灯光控制和颜色的命令。
- en: 'Now it’s time to talk about which Arduino Cloud variables are compatible with
    Amazon Alexa. You can get up-to-date information at [https://www.amazon.com/Arduino-LLC/dp/B07ZT2PK2H](https://www.amazon.com/Arduino-LLC/dp/B07ZT2PK2H).
    At the moment, we have the following list of cloud variables that work perfectly
    with Amazon Alexa:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候讨论哪些Arduino Cloud变量与Amazon Alexa兼容了。您可以在[https://www.amazon.com/Arduino-LLC/dp/B07ZT2PK2H](https://www.amazon.com/Arduino-LLC/dp/B07ZT2PK2H)获取最新信息。目前，我们有以下列表的云变量可以完美与Amazon
    Alexa配合工作：
- en: Temperature
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 温度
- en: Motion detection
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运动检测
- en: Light, smart plug, and smart switch
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轻巧的智能插头和智能开关
- en: Dimmed light
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调暗灯光
- en: Colored light
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 彩色灯光
- en: According to the preceding list, you can create a thermostat for a room, which
    will help you to change the room or kitchen temperature according to outdoor and
    indoor thermostat temperature, you can control your heating and cooling system.
    To turn on/off any device, we have four different types of cloud variables, which
    have the same data type Boolean but different names, including light, smart plug,
    smart switch, and motion detection. These four variables could be used to control
    any relay/magnetic contactors to turn home appliances on/off, such as cooling/heating
    systems. We have already discussed **Dimmed light** and **Colored Light** in previous
    sections.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的列表，你可以创建一个房间恒温器，这将帮助你根据室外和室内恒温器的温度来改变房间或厨房的温度，你可以控制你的供暖和冷却系统。为了开启/关闭任何设备，我们有四种不同类型的云变量，它们具有相同的数据类型布尔型但名称不同，包括灯光、智能插头、智能开关和运动检测。这四个变量可以用来控制任何继电器/电磁接触器来开启/关闭家用电器，例如冷却/供暖系统。我们已经在之前章节讨论了**调光灯光**和**彩色灯光**。
- en: In this section, we have set up the Amazon Alexa with Arduino Cloud skill and
    tried different voice commands related to turning lights on and off, as well as
    how to change the color and brightness of the WS2812 RGB LED ring.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们设置了亚马逊Alexa与Arduino云技能，并尝试了与开启/关闭灯光以及如何更改WS2812 RGB LED环形灯的颜色和亮度相关的不同语音命令。
- en: What next?
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接下来是什么？
- en: We still have lots of options available to explore, but now your assignment
    is to use different relays, sensors, and development boards to do some more experiments
    and learn from them. In the current chapter, we have only used one WS2812 module
    for light control, but you can use temperature sensors, relays, and motion sensors
    to automate your devices in your home, such as automating room switches to control
    fans, exhaust fans, lights, and air conditioning systems according to room temperature.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有很多选项可供探索，但现在你的任务是使用不同的继电器、传感器和开发板进行更多实验并从中学习。在当前章节中，我们只使用了一个WS2812模块进行灯光控制，但你可以使用温度传感器、继电器和运动传感器来自动化你家的设备，例如自动化房间开关来控制风扇、排气扇、灯光和空调系统，根据房间温度来开启/关闭。
- en: Important note
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Be careful when playing with high-voltage power cables when patching the cables
    to relays.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接电缆到继电器时，玩弄高压电缆时要小心。
- en: Summary
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have explored how to develop a low-cost, multi-color smart
    table lamp for our room using the XIAO ESP32C3 and WS2812\. We have set up the
    Thing, which included cloud variable creation, device association, network configuration,
    and coding of the development board. Later, we created a dashboard using different
    widgets to control the WS2812 RGB ring. Finally, we used the Amazon Alexa voice
    assistant to turn our table lamp on/off and control its color and brightness with
    voice commands.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了如何使用XIAO ESP32C3和WS2812开发一个低成本、多色智能台灯，用于我们的房间。我们设置了事物，包括云变量创建、设备关联、网络配置和开发板的编码。后来，我们使用不同的小部件创建了一个仪表盘来控制WS2812
    RGB环形灯。最后，我们使用亚马逊Alexa语音助手通过语音命令来开启/关闭我们的台灯，并控制其颜色和亮度。
- en: This chapter will give you the confidence to build more interesting stuff to
    make your home and office smarter. In the next chapter, we will talk about Cloud
    Scheduler and over-the-air update’ features. Both features are interesting and
    specially designed to carry out operations on IoT nodes.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将让你有信心构建更多有趣的东西，让你的家和办公室更智能。在下一章中，我们将讨论云调度器和空中更新功能。这两个功能都很有趣，专门设计用于在物联网节点上执行操作。
- en: 'Part 4: Learning Advanced Features of the Arduino IoT Cloud and Looking Ahead'
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4部分：学习Arduino IoT云的高级功能和展望
- en: In *Part 4*, the reader is guided through the advanced features of the Arduino
    IoT Cloud platform, how to use them to develop professional applications, and
    the tools for maintaining solutions during their life cycle. The book ends with
    some suggestions for further learning, experimenting, and sourcing information.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第4部分*中，读者被引导了解Arduino IoT云平台的高级功能，如何使用它们来开发专业应用程序，以及在整个生命周期中维护解决方案的工具。本书以一些关于进一步学习、实验和获取信息的建议结束。
- en: 'This part has the following chapters:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包含以下章节：
- en: '[*Chapter 11*](B19752_11.xhtml#_idTextAnchor229), *Implementing the Arduino
    IoT Cloud Scheduler and Over-the-Air Features*'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第11章*](B19752_11.xhtml#_idTextAnchor229)，*实现Arduino IoT云调度器和空中更新功能*'
- en: '[*Chapter 12*](B19752_12.xhtml#_idTextAnchor251), *Project #6 – Tracking and
    Notifying about Your Heart Rate*'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第12章*](B19752_12.xhtml#_idTextAnchor251)，*项目#6 – 跟踪和通知心率*'
- en: '[*Chapter 13*](B19752_13.xhtml#_idTextAnchor268), *Scripting the Arduino IoT
    Cloud with Cloud CLI*'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第13章*](B19752_13.xhtml#_idTextAnchor268), *使用Cloud CLI编写Arduino物联网云脚本*'
- en: '[*Chapter 14*](B19752_14.xhtml#_idTextAnchor296), *Moving Ahead in the Arduino
    IoT Cloud*'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第14章*](B19752_14.xhtml#_idTextAnchor296), *在Arduino物联网云中继续前进*'
