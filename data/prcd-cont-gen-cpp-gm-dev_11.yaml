- en: Chapter 11. Epilogue
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章。结语
- en: With our game finished, and after a quick foray into component based design,
    our introduction to procedural content generation is complete. We started simply
    with the generation and use of random numbers, and worked our way right up to
    creating complex procedural behaviors and content. We've touched upon many subjects,
    and hopefully working through this book has helped define what procedural generation
    is, and given some solid examples of how to approach and implement it in your
    games.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的游戏已经完成，经过一次快速的组件设计探索，我们对程序内容生成的介绍也完成了。我们从生成和使用随机数开始，一直到创建复杂的程序行为和内容。我们涉及了许多主题，希望通过这本书的学习，能够帮助定义程序生成是什么，并提供一些如何在游戏中实现它的实例。
- en: Before you close the book for the final time, let's take a quick look back at
    the project, identifying how and where we implemented procedural generation. We'll
    then reiterate its pros and cons one last time before finishing our work.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在你最后关闭这本书之前，让我们快速回顾一下项目，看看我们是如何以及在哪里实现程序生成的。然后在完成我们的工作之前，我们将再次重申它的优缺点。
- en: Project breakdown
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目分解
- en: Our game project started as a blank roguelike template with limited functionality,
    but with our work, we turned it into a fully fledged procedural roguelike game.
    Let's run through the project to identify how we used procedural generation to
    do so.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的游戏项目最初是一个空白的地牢游戏模板，功能有限，但通过我们的工作，我们将其变成了一个完全成熟的程序生成地牢游戏。让我们回顾一下项目，看看我们如何使用程序生成来实现这一点。
- en: We'll also identify some further possible exercises for each chapter if you
    wish to explore the topic in detail. The goal of this book was to introduce you
    to the fundamentals of the topic, so hopefully you can hit the ground running
    as you take this further.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望深入探讨每一章的话，我们还将提供一些可能的进一步练习。这本书的目标是向你介绍这个主题的基础知识，希望你在进一步学习时能够快速上手。
- en: Procedurally populating environments
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 程序生成环境
- en: We started by spawning game items randomly around the level. This involved the
    generation of random numbers within a given range and using those as tile indices
    and enumerator values. This was the first time we used random numbers and enumerators
    to select random values and items, which is a technique that we relied heavily
    on throughout the course of the book.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先在关卡周围随机生成游戏物品。这涉及在给定范围内生成随机数，并将其用作瓷砖索引和枚举器值。这是我们第一次使用随机数和枚举器来选择随机值和物品，这是我们在整本书中都大量依赖的技术。
- en: If you wished to take this further, you could have a look at how to bias the
    spawn location of items or limit it to certain areas of the map. So, for example,
    you can bias the spawn location in such a way that all the gems will tend to spawn
    to the right-hand side of the level, and all the gold to the left-hand side. While
    not immediately beneficial to our project, you can imagine how it might be useful
    in other situations. You may want all your enemies to spawn at a certain part
    of the level, or a certain item to spawn in a given area of the map. Gaining more
    control over your game levels will be very beneficial.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望进一步探索，可以看看如何偏向物品的生成位置，或者限制它在地图的某些区域。例如，你可以偏向生成位置，使所有宝石倾向于生成在关卡的右侧，所有黄金倾向于生成在左侧。虽然对我们的项目没有立即好处，但你可以想象在其他情况下它可能有用。你可能希望所有的敌人生成在关卡的某个特定部分，或者某个物品生成在地图的某个区域。更多地控制游戏关卡将非常有益。
- en: Creating unique and random game objects
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建独特和随机的游戏对象
- en: With our items now spread around the levels, we turned our attention to making
    them more random and unique. Instead of hardcoding item variables we generated
    them during runtime, making the objects more varied. We used this technique to
    create multiple object types from a single class, such as all potions coming from
    the same class.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的物品已经分布在各个关卡中，我们开始关注如何使它们更随机和独特。我们不是在运行时硬编码物品变量，而是在运行时生成它们，使物品更加多样化。我们使用这种技术从一个类中创建多个对象类型，比如所有药水都来自同一个类。
- en: To extend this further in the project, why not try adding some random armor
    and/or weapons? They can be dropped by the enemies and have random sprites and
    statistics. You can take the same approach that we took with potions and create
    an ambiguous class that can generate a vast range of possibilities.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目中进一步扩展这一点，为什么不尝试添加一些随机的护甲和/或武器呢？它们可以被敌人掉落，并具有随机的精灵和统计数据。你可以采用我们在药水中采用的相同方法，创建一个模糊的类，可以生成各种可能性。
- en: Procedurally generating art
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 程序生成艺术
- en: In this chapter, we had a look at how to create art procedurally. We started
    with a simple approach by using SFML's built-in sprite modification functions
    and moved on to a more complex approach in which we rendered multiple sprite components
    together to create new, unique ones, giving the enemies random armor.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了如何通过程序生成艺术。我们从简单的方法开始，使用SFML内置的精灵修改函数，然后转向更复杂的方法，通过将多个精灵组件一起渲染，创建新的、独特的精灵，给敌人随机生成护甲。
- en: If you want to learn more, you should have a look at how to create art completely
    from scratch. There are algorithms, such as Perlin and Simplex noise, that generate
    2D noise. These algorithms can be used as a base for a procedural texture. Start
    looking at such algorithms and take it from there.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想学到更多，你应该看看如何完全从头开始创建艺术。有一些算法，比如Perlin和Simplex噪声，可以生成2D噪声。这些算法可以作为程序纹理的基础。开始研究这些算法，然后从那里开始。
- en: Procedurally modifying audio
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 程序修改音频的生成。
- en: Procedurally generating audio is a complex task. Therefore, the work that we
    did in this chapter was somewhat brief and really limited to modifying the existing
    sound procedurally as opposed to their outright creation. As with art, SFML provides
    a range of functions to edit sounds, such as pitch and volume, which were used
    to give simple sounds some variance. We then created spatialized 3D sound using
    SFML's built-in audio functions, giving our game some depth.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 通过程序生成音频是一项复杂的任务。因此，在本章中，我们的工作有些简短，而且真正局限于对现有声音进行程序修改，而不是完全创作它们。与艺术一样，SFML提供了一系列编辑声音的功能，比如音调和音量，这些功能被用来给简单的声音增加一些变化。然后，我们使用SFML的内置音频功能创建了空间化的3D声音，为我们的游戏增添了一些深度。
- en: Sound can be generated entirely procedurally, but it's a complex and difficult
    process and as such, it isn't very popular as compared to other procedural implementations.
    However, if you want to look into this further, you could perhaps start by creating
    single sounds and learn how a computer produces them. From here, it's a case of
    learning how to put these sounds together to create something appealing, and then
    generating a procedural algorithm to do so. It's not for the faint-hearted, that's
    for sure!
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 声音可以完全通过程序生成，但这是一个复杂而困难的过程，因此与其他程序实现相比并不那么受欢迎。然而，如果你想进一步了解这一点，也许可以先创建单个声音并学习计算机如何产生它们。从这里开始，就是学习如何将这些声音组合在一起创造出吸引人的东西，然后生成一个程序算法来实现。这绝对不是一件简单的事情！
- en: Procedural behavior and mechanics
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 程序行为和机制
- en: Progressing from the simple use of random numbers and selecting values from
    enumerators, we implemented a much more sophisticated and meaty procedural system,
    giving the enemies a basic AI in the form of pathfinding. We implemented A* pathfinding,
    enabling the enemies to chase the player around the maze. We also created a system
    to generate random level goals, so now our player is periodically presented with
    a unique goal in return for a unique reward.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 从简单使用随机数和从枚举器中选择值开始，我们实现了一个更复杂和丰富的程序系统，为敌人提供了基本的AI形式的路径规划。我们实现了A*路径规划，使敌人能够在迷宫中追逐玩家。我们还创建了一个系统来生成随机的关卡目标，因此现在我们的玩家定期会面临一个独特的目标，以换取独特的奖励。
- en: The game mechanics that we generated are rather simple, so why not have a go
    at generating some more complex ones yourself? You can give players an actual
    task that has to be completed in order to continue playing the game. Otherwise,
    if it was the AI work that captured your interest, you could build upon it, making
    the enemies smarter and more of a challenge. Maybe if they lose line of sight
    of the player they will stop chasing, or they try predict player movement to block
    you off instead of simply following.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们生成的游戏机制相当简单，那么为什么不试着自己生成一些更复杂的呢？你可以给玩家一个真正需要完成的任务，以便继续玩游戏。或者，如果是AI工作吸引了你，你可以在此基础上进行扩展，使敌人更聪明，更具挑战性。也许如果他们失去了对玩家的视线，他们会停止追逐，或者他们会试图预测玩家的移动来挡住你，而不仅仅是跟随。
- en: Procedural dungeon generation
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 程序生成地牢
- en: For our pièce de résistance, we implemented procedural dungeon generation. Until
    this point levels were loaded from a text file, but we implemented a recursive
    backtracker algorithm to generate a maze and then added rooms to that maze to
    create more open areas. Thus, levels are now procedurally generated, and we can
    generate a new one with a single function call.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 作为我们的巅峰之作，我们实现了程序生成地牢。在此之前，关卡是从文本文件中加载的，但我们实现了一个递归回溯算法来生成一个迷宫，然后在迷宫中添加房间以创建更开阔的区域。因此，关卡现在是程序生成的，我们可以通过一个函数调用生成一个新的关卡。
- en: There are lots of ways to approach procedural dungeon generation, and a number
    of different algorithms that can be utilized for this. If this area interests
    you there's plenty of room to explore. Take a look at some alternate algorithms
    and experiment with the implementation. Try to generate some rooms with different
    characteristics, or add some environmental and aesthetic features to give a level
    more character.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多方法可以用来实现程序生成地牢，以及许多不同的算法可以用于此。如果你对这个领域感兴趣，有很多探索的空间。看看一些替代算法，并尝试实现。尝试生成一些具有不同特征的房间，或者添加一些环境和美学特征，给关卡增添更多特色。
- en: Tip
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: A great resource for further reading is [http://weblog.jamisbuck.org/](http://weblog.jamisbuck.org/).
    The blog is a goldmine for everything related to maze generation and covers a
    number of algorithms. You should definitely check it out.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步阅读的好资源是[http://weblog.jamisbuck.org/](http://weblog.jamisbuck.org/)。这个博客是关于迷宫生成的一切的宝库，涵盖了许多算法。你一定要去看看。
- en: Component-based architecture
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于组件的架构
- en: Procedural content generation revolves around flexibility and as such, I felt
    that touching upon component-based design would be a good way to end our work.
    Through component-based design, we can create a flexible code base whose inherent
    flexibility will make it easier to implement procedural systems.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 程序内容生成围绕灵活性展开，因此，我觉得涉及基于组件的设计会是结束我们工作的一个好方法。通过基于组件的设计，我们可以创建一个灵活的代码基础，其固有的灵活性将使实施程序系统变得更容易。
- en: We ran through the fundamentals of component-based design in this chapter and
    looked at a couple of isolated examples. A good exercise is to run through the
    project, moving it over to an entirely component-based approach. This will really
    get you familiar with the concept, and you'll be ready to use it in your next
    project.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了基于组件的设计的基本原理，并看了一些孤立的例子。一个很好的练习是运行项目，将其完全转换为基于组件的方法。这将使你真正熟悉这个概念，并且你将准备好在下一个项目中使用它。
- en: The pros and cons of procedural generation
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 程序生成的利与弊
- en: For the last time, let's have a look at the major pros and cons of using procedural
    generation in our games.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一次，让我们来看看在我们的游戏中使用程序生成的主要利与弊。
- en: Pros
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 利与弊
- en: It creates dynamic content
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它创造了动态内容
- en: It can save on memory usage
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以节省内存使用
- en: It saves development time and money
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以节省开发时间和金钱
- en: It creates a large variety of options
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它创造了大量的选择
- en: It increases replayability
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它增加了可重复性
- en: Cons
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缺点
- en: You relinquish control*
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您放弃控制*
- en: It can be taxing on hardware
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可能会对硬件造成负担
- en: It can feel repetitive
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能会感觉重复
- en: It's hard to script set game events
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 很难编写游戏事件的脚本
- en: It may generate unusable content
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能会生成无法使用的内容
- en: Note
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '* The amount of control that you will relinquish depends upon the quality of
    your algorithm. At the end of the day, you''re the one that writes the algorithm.
    Therefore, you can make it do what you want.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*您放弃的控制量取决于您的算法质量。最终，你是写算法的人。因此，你可以让它做你想要的事情。'
- en: Summary
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: I hope that you found the content in this book useful. The goal was to introduce
    you to the vast topic that procedural generation is, and I felt that working with
    a real game was the best way to do that. We covered the key areas of development
    and identified ways to use procedural generation in each aspects. Hopefully, you
    now have enough knowledge to use it in your own games, and can undertake further
    reading to learn more about the areas that interest you the most.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你觉得这本书中的内容有用。目标是向您介绍程序生成的广泛主题，我觉得与真实游戏一起工作是最好的方法。我们涵盖了开发的关键领域，并确定了在每个方面使用程序生成的方法。希望现在您已经有足够的知识来在自己的游戏中使用它，并且可以进行进一步阅读，了解更多您最感兴趣的领域。
- en: Remember, procedural generation isn't just one thing or one approach. It's the
    dynamic generation of content. There's no one right way to implement it, so experiment.
    Find new ways to create content dynamically and play with it. There's no wrong
    answer.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，程序生成不仅仅是一种方法或一种途径。它是内容的动态生成。没有一种正确的实现方式，所以要进行实验。找到新的动态创建内容的方法并进行尝试。没有错误的答案。
- en: Happy programming!
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 愉快的编程！
