["```cpp\nbool linear_search(const std::vector<int>& vals, int key) noexcept { \n  for (const auto& v : vals) { \n    if (v == key) { \n      return true; \n    } \n  } \n  return false; \n} \n```", "```cpp\nstruct Point { \n  int x_{}; \n  int y_{}; \n}; \n\nbool linear_search(const std::vector<Point>& a, const Point& key) { \n  for (size_t i = 0; i < a.size(); ++i) { \n    if (a[i].x_ == key.x_ && a[i].y_ == key.y_) { \n      return true; \n    } \n  } \n  return false; \n} \n```", "```cpp\nbool binary_search(const std::vector<int>& a, int key) {\n  auto low = 0; \n  auto high = static_cast<int>(a.size()) - 1;\n  while (low <= high) {\n    const auto mid = std::midpoint(low, high); // C++20\n    if (a[mid] < key) {\n      low = mid + 1;\n    } else if (a[mid] > key) {\n      high = mid - 1;\n    } else {\n      return true;\n    }\n  }\n  return false;\n} \n```", "```cpp\nvoid insertion_sort(std::vector<int>& a) { \n  for (size_t i = 1; i < a.size(); ++i) { \n    auto j = i; \n    while (j > 0 && a[j-1] > a[j]) {  \n      std::swap(a[j], a[j-1]); \n      --j;  \n    } \n  } \n} \n```", "```cpp\nif (internal_array.size() > size) { \n  internal_array[size] = new_element; \n  ++size; \n} \n```", "```cpp\nperf stat ./your-program \n```", "```cpp\nPerformance counter stats for './my-prog':\n     1\u00a0129,86 msec task-clock               # 1,000 CPUs utilized          \n            8      context-switches         # 0,007 K/sec                  \n            0      cpu-migrations           # 0,000 K/sec                  \n       97\u00a0810      page-faults              # 0,087 M/sec                  \n3\u00a0968\u00a0043\u00a0041      cycles                   # 3,512 GHz                    \n1\u00a0250\u00a0538\u00a0491      stalled-cycles-frontend  # 31,52% frontend cycles idle\n  497\u00a0225\u00a0466      stalled-cycles-backend   # 12,53% backend cycles idle    \n6\u00a0237\u00a0037\u00a0204      instructions             # 1,57  insn per cycle         \n                                            # 0,20  stalled cycles per insn\n1\u00a0853\u00a0556\u00a0742      branches                 # 1640,516 M/sec                  \n    3\u00a0486\u00a0026      branch-misses            # 0,19% of all branches        \n  1,130355771 sec  time elapsed\n  1,026068000 sec  user\n  0,104210000 sec  sys \n```", "```cpp\nclass ScopedTimer { \npublic: \n  using ClockType = std::chrono::steady_clock;\n  ScopedTimer(const char* func) \n      : function_name_{func}, start_{ClockType::now()} {}\n  ScopedTimer(const ScopedTimer&) = delete; \n  ScopedTimer(ScopedTimer&&) = delete; \n  auto operator=(const ScopedTimer&) -> ScopedTimer& = delete; \n  auto operator=(ScopedTimer&&) -> ScopedTimer& = delete;\n  ~ScopedTimer() {\n    using namespace std::chrono;\n    auto stop = ClockType::now(); \n    auto duration = (stop - start_); \n    auto ms = duration_cast<milliseconds>(duration).count(); \n    std::cout << ms << \" ms \" << function_name_ << '\\n'; \n  } \n\nprivate: \n  const char* function_name_{}; \n  const ClockType::time_point start_{}; \n}; \n```", "```cpp\nauto some_function() {\n  ScopedTimer timer{\"some_function\"};\n  // ...\n} \n```", "```cpp\n#if USE_TIMER \n#define MEASURE_FUNCTION() ScopedTimer timer{__func__} \n#else \n#define MEASURE_FUNCTION() \n#endif \n```", "```cpp\nauto some_function() { \n  MEASURE_FUNCTION(); \n  // ...\n} \n```", "```cpp\n2.3 ms some_function \n```", "```cpp\nbool linear_search(const std::vector<int>& v, int key);\nbool binary_search(const std::vector<int>& v, int key); \n```", "```cpp\nauto gen_vec(int n) {\n  std::vector<int> v;\n  for (int i = 0; i < n; ++i) { \n    v.push_back(i); \n  }\n  return v;\n} \n```", "```cpp\nint main() { // Don't do performance tests like this!\n  ScopedTimer timer(\"linear_search\");\n  int n = 1024;\n  auto v = gen_vec(n);\n  linear_search(v, n);\n} \n```", "```cpp\n#include <benchmark/benchmark.h> // Non-standard header\n#include <vector>\nbool linear_search(const std::vector<int>& v, int key) { /* ... */ }\nauto gen_vec(int n) { /* ... */ }\nstatic void bm_linear_search(benchmark::State& state) {\n  auto n = 1024;\n  auto v = gen_vec(n);\n  for (auto _ : state) {\n    benchmark::DoNotOptimize(linear_search(v, n));\n  }\n}\nBENCHMARK(bm_linear_search); // Register benchmarking function\nBENCHMARK_MAIN(); \n```", "```cpp\n-------------------------------------------------------------------\nBenchmark                Time   CPU           Iterations\n-------------------------------------------------------------------\nbm_linear_search         361 ns 361 ns        1945664 \n```", "```cpp\nfor (auto _ : state) {   // Only this loop is measured\n  benchmark::DoNotOptimize(binary_search(v, n));\n} \n```", "```cpp\nstatic void bm_linear_search(benchmark::State& state) {\n  auto n = state.range(0);\n  auto v = gen_vec(n);\n  for (auto _ : state) {\n    benchmark::DoNotOptimize(linear_search(v, n));\n  }\n}\nBENCHMARK(bm_linear_search)->RangeMultiplier(2)->Range(64, 256); \n```", "```cpp\n-------------------------------------------------------------------\nBenchmark                Time    CPU          Iterations\n-------------------------------------------------------------------\nbm_linear_search/64      17.9 ns 17.9 ns      38143169\nbm_linear_search/128     44.3 ns 44.2 ns      15521161\nbm_linear_search/256     74.8 ns 74.7 ns      8836955 \n```", "```cpp\n#include <benchmark/benchmark.h>\n#include <vector>\nbool linear_search(const std::vector<int>& v, int key) { /* ... */ }\nbool binary_search(const std::vector<int>& v, int key) { /* ... */ }\nauto gen_vec(int n) { /* ... */ }\nstatic void bm_linear_search(benchmark::State& state) {\n  auto n = state.range(0); \n  auto v = gen_vec(n);\n  for (auto _ : state) { \n    benchmark::DoNotOptimize(linear_search(v, n)); \n  }\n  state.SetComplexityN(n);\n}\nstatic void bm_binary_search(benchmark::State& state) {\n  auto n = state.range(0); \n  auto v = gen_vec(n);\n  for (auto _ : state) { \n    benchmark::DoNotOptimize(binary_search(v, n)); \n  }\n  state.SetComplexityN(n);\n}\nBENCHMARK(bm_linear_search)->RangeMultiplier(2)->\n  Range(64, 4096)->Complexity();\nBENCHMARK(bm_binary_search)->RangeMultiplier(2)->\n  Range(64, 4096)->Complexity();\nBENCHMARK_MAIN(); \n```", "```cpp\n-------------------------------------------------------------------\nBenchmark                Time     CPU         Iterations\n-------------------------------------------------------------------\nbm_linear_search/64      18.0 ns  18.0 ns     38984922\nbm_linear_search/128     45.8 ns  45.8 ns     15383123\n...\nbm_linear_search/8192    1988 ns  1982 ns     331870\nbm_linear_search_BigO    0.24 N   0.24 N\nbm_linear_search_RMS        4 %   4 %\nbm_binary_search/64      4.16 ns  4.15 ns     169294398\nbm_binary_search/128     4.52 ns  4.52 ns     152284319\n...\nbm_binary_search/4096    8.27 ns  8.26 ns     80634189\nbm_binary_search/8192    8.90 ns  8.90 ns     77544824\nbm_binary_search_BigO    0.67 lgN 0.67 lgN\nbm_binary_search_RMS        3 %   3 % \n```"]