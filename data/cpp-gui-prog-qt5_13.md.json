["```cpp\n#include <QMainWindow> \n#include <QFileDialog> \n#include <QPixmap> \n#include <QPainter>\n```", "```cpp\nprivate: \n   Ui::MainWindow *ui; \n QPixmap* imageBuffer; \n\npublic:\n   void resizeImage();\n void paintEvent(QPaintEvent *event);\n\npublic slots:\n   void on_actionOpen_triggered();\n```", "```cpp\nMainWindow::MainWindow(QWidget *parent) : \n   QMainWindow(parent), \n   ui(new Ui::MainWindow) \n{ \n   ui->setupUi(this); \n   imageBuffer = nullptr; \n} \n```", "```cpp\nvoid MainWindow::on_actionOpen_triggered() \n{ \n   QString fileName = QFileDialog::getOpenFileName(this, \"Open Image File\", qApp->applicationDirPath(), \"JPG (*.jpg *.jpeg);;PNG (*.png)\"); \n\n   if (!fileName.isEmpty()) \n   { \n         imageBuffer = new QPixmap(fileName); \n         resizeImage(); \n   } \n}\n```", "```cpp\nvoid MainWindow::resizeImage() \n{ \n   if (imageBuffer != nullptr) \n   { \n         QSize size = ui->imageDisplay->size(); \n         QPixmap pixmap = imageBuffer->scaled(size, \n            Qt::KeepAspectRatio); \n\n         // Adjust the position of the image to the center \n         QRect rect = ui->imageDisplay->rect(); \n         rect.setX((this->size().width() - pixmap.width()) / 2); \n         rect.setY((this->size().height() - pixmap.height()) / 2); \n\n         QPainter painter; \n         painter.begin(this); \n         painter.drawPixmap(rect, pixmap, ui->imageDisplay->rect()); \n         painter.end(); \n   } \n} \n```", "```cpp\nvoid MainWindow::paintEvent(QPaintEvent *event) \n{ \n   resizeImage(); \n} \n```", "```cpp\nQT += core gui multimedia \n```", "```cpp\n#include <QMainWindow> \n#include <QDebug> \n#include <QFileDialog> \n#include <QMediaPlayer> \n#include <QMediaMetaData> \n#include <QTime> \n```", "```cpp\nprivate: \n   Ui::MainWindow *ui; \n   QMediaPlayer* player; \n\npublic:\n void stateChanged(QMediaPlayer::State state);\n void positionChanged(qint64 position);\n```", "```cpp\nMainWindow::MainWindow(QWidget *parent) : \n   QMainWindow(parent), \n   ui(new Ui::MainWindow) \n{ \n   ui->setupUi(this); \n\n   player = new QMediaPlayer(this); \n   player->setVolume(ui->volume->value()); \n   connect(player, &QMediaPlayer::stateChanged, this, &MainWindow::stateChanged); \n   connect(player, &QMediaPlayer::positionChanged, this, &MainWindow::positionChanged); \n} \n```", "```cpp\nvoid MainWindow::stateChanged(QMediaPlayer::State state) \n{ \n   if (state == QMediaPlayer::PlayingState) \n   { \n         ui->playButton->setEnabled(false); \n         ui->pauseButton->setEnabled(true); \n         ui->stopButton->setEnabled(true); \n   } \n   else if (state == QMediaPlayer::PausedState) \n   { \n         ui->playButton->setEnabled(true); \n         ui->pauseButton->setEnabled(false); \n         ui->stopButton->setEnabled(true); \n   } \n   else if (state == QMediaPlayer::StoppedState) \n   { \n         ui->playButton->setEnabled(true); \n         ui->pauseButton->setEnabled(false); \n         ui->stopButton->setEnabled(false); \n   } \n} \n\n```", "```cpp\n void MainWindow::positionChanged(qint64 position) \n{ \n   if (ui->progressbar->maximum() != player->duration()) \n         ui->progressbar->setMaximum(player->duration()); \n\n   ui->progressbar->setValue(position); \n\n   int seconds = (position/1000) % 60; \n   int minutes = (position/60000) % 60; \n   int hours = (position/3600000) % 24; \n   QTime time(hours, minutes,seconds); \n   ui->durationDisplay->setText(time.toString()); \n} \n\n```", "```cpp\nvoid MainWindow::on_playButton_clicked() \n{  \n   player->play(); \n} \n\nvoid MainWindow::on_pauseButton_clicked() \n{ \n   player->pause(); \n} \n\nvoid MainWindow::on_stopButton_clicked() \n{ \n   player->stop(); \n} \n```", "```cpp\nvoid MainWindow::on_volume_sliderMoved(int position) \n{ \n   player->setVolume(position); \n} \n\nvoid MainWindow::on_progressbar_sliderMoved(int position) \n{ \n   player->setPosition(position); \n} \n```", "```cpp\n void MainWindow::on_actionOpen_File_triggered() \n{ \n   QString fileName = QFileDialog::getOpenFileName(this,\n      \"Select Audio File\", qApp->applicationDirPath(), \n       \"MP3 (*.mp3);;WAV (*.wav)\"); \n   QFileInfo fileInfo(fileName); \n\n   player->setMedia(QUrl::fromLocalFile(fileName)); \n\n   if (player->isMetaDataAvailable()) \n   { \n         QString albumTitle = player-\n         >metaData(QMediaMetaData::AlbumTitle).toString(); \n         ui->songNameDisplay->setText(\"Playing \" + albumTitle); \n   } \n   else \n   { \n         ui->songNameDisplay->setText(\"Playing \" + \n           fileInfo.fileName()); \n   } \n\n   ui->playButton->setEnabled(true); \n   ui->playButton->click(); \n} \n\n```", "```cpp\nQT += core gui multimedia multimediawidgets \n```", "```cpp\nbackground-color: rgb(0, 0, 0); \n```", "```cpp\n#include <QMainWindow> \n#include <QDebug> \n#include <QFileDialog> \n#include <QMediaPlayer> \n#include <QMediaMetaData> \n#include <QTime> \n#include <QVideoWidget> \n```", "```cpp\nMainWindow::MainWindow(QWidget *parent) : \n   QMainWindow(parent), \n   ui(new Ui::MainWindow) \n{ \n   ui->setupUi(this); \n\n   player = new QMediaPlayer(this); \n\n   QVideoWidget* videoWidget = new QVideoWidget(this); \n   player->setVideoOutput(videoWidget); \n   ui->movieLayout->addWidget(videoWidget); \n\n   player->setVolume(ui->volume->value()); \n   connect(player, &QMediaPlayer::stateChanged, this, &MainWindow::stateChanged); \n   connect(player, &QMediaPlayer::positionChanged, this, &MainWindow::positionChanged); \n} \n```", "```cpp\nQString fileName = QFileDialog::getOpenFileName(this, \"Select Movie File\", qApp->applicationDirPath(), \"MP4 (*.mp4);;MOV (*.mov)\"); \n```"]