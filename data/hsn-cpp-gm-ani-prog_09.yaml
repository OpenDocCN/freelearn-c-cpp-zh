- en: '*Chapter 9*: Implementing Animation Clips'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第9章*：实现动画片段'
- en: An animation clip is a collection of the `TransformTrack` objects. An animation
    clip animates a collection of transforms over time and the collection of transforms
    that is animated is called a pose. Think of a pose as the skeleton of an animated
    character at a specific point in time. A pose is a hierarchy of transforms. The
    value of each transform affects all of its children.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 动画片段是`TransformTrack`对象的集合。动画片段在时间上对一组变换进行动画处理，被动画处理的变换集合称为姿势。将姿势视为动画角色在特定时间点的骨架。姿势是一组变换的层次结构。每个变换的值都会影响其所有子节点。
- en: 'Let''s walk through what it takes to generate the pose for one frame of a game''s
    character animation. When an animation clip is sampled, the result is a pose.
    An animation clip is made up of animation tracks and each animation track is made
    up of one or more frames. This relationship looks something like this:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看生成游戏角色动画一帧的姿势需要做些什么。当对动画片段进行采样时，结果是一个姿势。动画片段由动画轨道组成，每个动画轨道由一个或多个帧组成。这种关系看起来像这样：
- en: '![Figure 9.1: The dependencies of generating a pose.](img/Figure_9.1_B16191.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![图9.1：生成姿势的依赖关系。](img/Figure_9.1_B16191.jpg)'
- en: 'Figure 9.1: The dependencies of generating a pose'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1：生成姿势的依赖关系
- en: By the end of this chapter, you should be able to load animation clips from
    glTF files and sample those clips into a pose.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您应该能够从glTF文件中加载动画片段，并将这些片段采样为姿势。
- en: Implementing poses
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现姿势
- en: To store a parent-child hierarchy between transforms, you need to maintain two
    parallel vectors—one filled with transforms and one filled with integers. The
    integer array contains the index of the parent transform for each joint. Not all
    joints have parents; if a joint doesn't have a parent, its parent value is negative.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为了存储变换之间的父子层次关系，需要维护两个并行向量——一个填充有变换，另一个填充有整数。整数数组包含每个关节的父变换的索引。并非所有关节都有父节点；如果一个关节没有父节点，其父节点值为负数。
- en: 'When thinking about a skeleton or pose, it''s easy to think of a hierarchy
    that has one root node and many nodes that branch off it. In practice, it''s not
    uncommon to have two or three root nodes. Sometimes, file formats store models
    in a way that the first node of the skeleton is a root node, but there is also
    a root node that all the skinned meshes are children of. These hierarchies tend
    to look like this:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在考虑骨骼或姿势时，很容易想到一个具有一个根节点和许多分支节点的层次结构。实际上，拥有两个或三个根节点并不罕见。有时，文件格式以骨骼的第一个节点作为根节点，但也有一个所有蒙皮网格都是其子节点的根节点。这些层次结构通常看起来像这样：
- en: '![Figure 9.2: Multiple root nodes in one file](img/Figure_9.2_B16191.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![图9.2：一个文件中的多个根节点](img/Figure_9.2_B16191.jpg)'
- en: 'Figure 9.2: Multiple root nodes in one file'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.2：一个文件中的多个根节点
- en: There are three common poses for an animated character—the current pose, the
    bind pose, and the rest pose. The rest pose is the default configuration of all
    the bones. The animation describes the transformation of each bone over time.
    Sampling an animation in time results in the current pose that is used to skin
    a character. The bind pose is covered in the next chapter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 动画角色有三种常见的姿势——当前姿势、绑定姿势和静止姿势。静止姿势是所有骨骼的默认配置。动画描述了每个骨骼随时间的变换。在时间上对动画进行采样会得到当前姿势，用于对角色进行蒙皮。绑定姿势将在下一章中介绍。
- en: 'Not all animations affect every bone or joint of a character; this means that
    some animations might not change the value of a joint. Remember, in this context
    a joint is expressed as a `Transform` object. What happens if animation `1` but
    animation **B** doesn''t? The following list shows you the result:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有动画都会影响角色的每根骨骼或关节；这意味着有些动画可能不会改变关节的值。请记住，在这种情况下，关节表示为`Transform`对象。如果动画`1`播放了，但动画**B**没有？以下列表显示了结果：
- en: If you only play **A** or **B**, everything is fine.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果只播放**A**或**B**，一切都很好。
- en: If you play **B** and then **A**, everything is fine.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果先播放**B**，然后播放**A**，一切都很好。
- en: If you play **A** and then **B**, things get a bit wonky.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果先播放**A**，然后播放**B**，情况会有点混乱。
- en: In the last example, where you play animation `1` maintains its last modified
    transform from animation `Pose` class.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个示例中，播放动画`1`会保持其从动画`Pose`类中最后修改的变换。
- en: Declaring the Pose class
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 声明Pose类
- en: The `Pose` class needs to keep track of the transformation of every joint in
    the skeleton of the character that you are animating. It also needs to keep track
    of the parent joint of every joint. This data is kept in two parallel vectors.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`Pose`类需要跟踪要动画的角色骨架中每个关节的变换。它还需要跟踪每个关节的父关节。这些数据保存在两个并行向量中。'
- en: 'Before a new animation clip is sampled, the pose of the current character needs
    to be reset to the rest pose. The `Pose` class implements a copy constructor and
    assignment operator to make copying poses as fast as possible. Follow these steps
    to declare the `Pose` class:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在对新的动画片段进行采样之前，需要将当前角色的姿势重置为静止姿势。`Pose`类实现了复制构造函数和赋值运算符，以尽可能快地复制姿势。按照以下步骤声明`Pose`类：
- en: 'Create a new header file, `Pose.h`. Add the definition of the `Pose` class
    to this file, starting with the parallel vectors for joint transforms and their
    parents:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的头文件`Pose.h`。在这个文件中添加`Pose`类的定义，从关节变换和它们的父节点的并行向量开始：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add a default constructor and a copy constructor and overload the assignment
    operator. The `Pose` class also has a convenience constructor that takes the number
    of joints the pose will have as arguments:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加默认构造函数和复制构造函数，并重载赋值运算符。`Pose`类还有一个方便的构造函数，它以关节数作为参数：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add a getter and setter function for the number of joints in the pose. When
    the setter function is used, both the `mJoints` and `mParents` vectors need to
    be resized:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为姿势的关节数添加获取器和设置器函数。当使用设置器函数时，需要调整`mJoints`和`mParents`向量的大小：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Add getter and setter functions for the parent of a joint. Both of these functions
    need to take the index of the joint as an argument:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为关节的父级添加获取和设置函数。这两个函数都需要以关节的索引作为参数：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `Pose` class needs to provide a way to get and set the local transform
    of a joint, as well as to retrieve the global transform of a joint. Overload `[]
    operator` to return the global transform of a joint:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Pose`类需要提供一种获取和设置关节的本地变换的方法，以及检索关节的全局变换。重载`[]运算符`以返回关节的全局变换：'
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'For a `Pose` class to be passed to OpenGL, it needs to be converted into a
    linear array of matrices. The `GetMatrixPalette` function carries out this conversion.
    The function takes a reference to a vector of matrices and fills it out with the
    global transform matrix of each joint in the pose:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将`Pose`类传递给OpenGL，需要将其转换为矩阵的线性数组。`GetMatrixPalette`函数执行此转换。该函数接受矩阵向量的引用，并用姿势中每个关节的全局变换矩阵填充它：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finish setting up the `Pose` class by overloading the equality and inequality
    operators:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过重载等式和不等式运算符完成`Pose`类的设置：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `Pose` class is used to hold the transformation of every bone in an animated
    hierarchy. Think of it as a frame in an animation; the `Pose` class represents
    the state of an animation at a given time. In the following section, you will
    implement the `Pose` class.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`Pose`类用于保存动画层次结构中每个骨骼的变换。将其视为动画中的一帧；`Pose`类表示给定时间的动画状态。在接下来的部分中，您将实现`Pose`类。'
- en: Implementing the Pose class
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现Pose类
- en: 'Create a new file, `Pose.cpp`. You will implement the `Pose` class in this
    file. Take the following steps to implement the `Pose` class:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新文件，`Pose.cpp`。您将在此文件中实现`Pose`类。采取以下步骤来实现`Pose`类：
- en: 'The default constructor doesn''t have to do anything. The copy constructor
    calls the assignment operator. The convenience constructor calls the `Resize`
    method:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认构造函数不必执行任何操作。复制构造函数调用赋值运算符。方便构造函数调用`Resize`方法：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The assignment operator needs to copy the pose as fast as possible. You need
    to make sure the pose isn''t assigned to itself. Next, make sure that the pose
    has the correct number of joints and parents. Then, carry out a mem-copy to fast-copy
    all of the parent and pose data:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 赋值运算符需要尽快复制姿势。您需要确保姿势没有分配给自己。接下来，确保姿势具有正确数量的关节和父级。然后，进行内存复制以快速复制所有父级和姿势数据：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Since the parent and joint vectors are parallel, the `Resize` function needs
    to set the size of both. The `size` getter function can return the size of either
    vector:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于父级和关节向量是平行的，`Resize`函数需要设置两者的大小。`size`获取函数可以返回任一向量的大小：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The getter and setter methods for the local transforms are simple:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 本地变换的获取和设置方法很简单：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Starting from the current transform, the `GetGlobalTransform` method needs
    to combine all the transforms up the parent chain until it reaches the root bone.
    Remember, transform concatenation is carried out from right to left. The overloaded
    `[] operator` should be treated as an alias for `GetGlobalTransform`:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从当前变换开始，`GetGlobalTransform`方法需要将所有变换组合到父级链中，直到达到根骨骼。请记住，变换连接是从右到左进行的。重载的`[]运算符`应被视为`GetGlobalTransform`的别名：
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To convert a `Pose` class into a vector of matrices, loop through every transform
    in the pose. For every transform, find the global transform, convert it into a
    matrix, and store the result in the vector of matrices. This function isn''t optimized
    yet; you will optimize it in a later chapter:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将`Pose`类转换为矩阵的向量，请循环遍历姿势中的每个变换。对于每个变换，找到全局变换，将其转换为矩阵，并将结果存储在矩阵的向量中。此函数尚未经过优化；您将在以后的章节中对其进行优化：
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The getter and setter methods for the parent joint indices are simple:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 父关节索引的获取和设置方法很简单：
- en: '[PRE13]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'When comparing two poses, you need to make sure that all of the joint transforms
    and parent indices are identical in both poses:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在比较两个姿势时，您需要确保两个姿势中的所有关节变换和父索引都是相同的：
- en: '[PRE14]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: It's not uncommon for one animated character to have multiple active poses.
    Consider a case where a character runs and shoots a gun at the same time. Two
    animations will likely play—one that affects the lower body, the **run** animation,
    and one that affects the upper body, the **shoot** animation. These poses blend
    together into a final pose that is used to display the animated character. This
    type of animation blending is covered in [*Chapter 12*](B16191_12_Final_JC_ePub.xhtml#_idTextAnchor204),
    *Blending between Animations*.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一个动画角色通常会有多个活动姿势并不罕见。考虑一个角色同时奔跑和开枪的情况。很可能会播放两个动画——一个影响下半身的**run**动画，一个影响上半身的**shoot**动画。这些姿势混合在一起形成最终姿势，用于显示动画角色。这种动画混合在[*第12章*](B16191_12_Final_JC_ePub.xhtml#_idTextAnchor204)中有所涵盖，*动画之间的混合*。
- en: In the following section, you will implement animation clips. An animation clip
    contains the animation for all the animated joints in a pose over time. The `Clip`
    class is used to sample animations and generate poses to display.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，您将实现动画剪辑。动画剪辑包含姿势中所有动画关节的动画随时间的变化。`Clip`类用于对动画进行采样并生成用于显示的姿势。
- en: Implementing clips
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现剪辑
- en: An animation clip is a collection of animation tracks; each track describes
    the motion of one joint over time and all of the tracks combined describe the
    motion of the animated model over time. If you sample an animation clip, you get
    a pose that describes the configuration of each joint in the animation clip at
    the specified time.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 动画剪辑是动画轨道的集合；每个轨道描述了一个关节随时间的运动，所有轨道组合描述了动画模型随时间的运动。如果对动画剪辑进行采样，您将得到一个姿势，该姿势描述了动画剪辑中每个关节在指定时间的配置。
- en: For a basic clip class, all you need is a vector of `Clip` class should also
    keep track of metadata, such as the name of the clip, whether the clip is looping,
    and information about the time or duration of the clip.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基本的剪辑类，您只需要一个`Clip`类的向量，该类还应该跟踪元数据，例如剪辑的名称，剪辑是否循环，以及有关剪辑的时间或持续时间的信息。
- en: Declaring the Clip class
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 声明Clip类
- en: The `Clip` class needs to maintain a vector of transform tracks. This is the
    most important data that the clip contains. Other than the tracks, a clip has
    a name, a start time, and an end time, and the clip should know whether it's looping
    or not.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`Clip`类需要维护一个变换轨迹的向量。这是剪辑包含的最重要的数据。除了轨迹之外，剪辑还有一个名称、开始时间和结束时间，剪辑应该知道它是否循环。'
- en: 'The looping attribute of the `Clip` class could be offloaded to a construct
    that''s further down the pipeline (such as an animation component or something
    similar). However, when implementing a bare-bones animation system, this is a
    good place to put the looping property:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`Clip`类的循环属性可以转移到管道中更深的构造（例如动画组件或类似物）。但是，在实现基本的动画系统时，这是放置循环属性的好地方：'
- en: 'Create a new file, `Clip.h`, and start the declaration of the `Clip` class:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新文件，`Clip.h`，并开始声明`Clip`类：
- en: '[PRE15]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Clips are sampled in the same way that tracks are sampled. The provided sample
    time might be outside the range of the clip. To deal with this, you need to implement
    a helper function that adjusts the provided sample time so that it is within the
    range of the current animation clip:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 剪辑的采样方式与轨迹的采样方式相同。提供的采样时间可能超出剪辑的范围。为了处理这个问题，您需要实现一个辅助函数，调整提供的采样时间，使其在当前动画剪辑的范围内：
- en: '[PRE16]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `Clip` class needs a default constructor to assign default values to some
    of its members. The compiler-generated destructor, the copy constructor, and the
    assignment operator should be fine here:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Clip`类需要一个默认构造函数来为其某些成员分配默认值。在这里，编译器生成的析构函数、复制构造函数和赋值运算符应该是可以的：'
- en: '[PRE17]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `Clip` class should provide a way to get the number of joints a clip contains,
    as well as the joint ID for a specific track index. You also need to have a joint
    ID setter that''s based on the index of the joint in the clip:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Clip`类应提供一种获取剪辑包含的关节数量以及特定轨迹索引的关节ID的方法。您还需要有一个基于剪辑中关节索引的关节ID设置器：'
- en: '[PRE18]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Retrieving data from a clip can be done in one of two ways. The `[] operator`
    returns a transform track for the specified joint. If no track exists for the
    specified joint, one is created and returned. The `Sample` function takes a `Pose`reference
    and a time and returns a `float` value that is also a time. This function samples
    the animation clip at the provided time into the `Pose` reference:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从剪辑中检索数据可以通过两种方式之一完成。`[]运算符`返回指定关节的变换轨迹。如果指定关节没有轨迹，则会创建一个并返回。`Sample`函数接受`Pose`引用和时间，并返回一个也是时间的`float`值。此函数在提供的时间内对动画剪辑进行采样，并将结果分配给`Pose`引用：
- en: '[PRE19]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We need a public helper function to figure out the start and end times of the
    animation clip. The `RecalculateDuration` function loops through all the `TransformTrack`
    objects and sets the start/end time of the animation clip based on the tracks
    that make up the clip. This function is intended to be called by the code that
    loads the animation clip from a file format.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要一个公共辅助函数来确定动画剪辑的开始和结束时间。`RecalculateDuration`函数循环遍历所有`TransformTrack`对象，并根据组成剪辑的轨迹设置动画剪辑的开始/结束时间。此函数旨在由从文件格式加载动画剪辑的代码调用。
- en: '[PRE20]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Finally, the `Clip` class takes simple getter and setter functions:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，`Clip`类需要简单的getter和setter函数：
- en: '[PRE21]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `Clip` class implemented here can be used to animate anything; don't feel
    like you are limited to humans and humanoid animations. In the following section,
    you will implement the `Clip` class.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 此处实现的`Clip`类可用于对任何内容进行动画化；不要觉得自己受限于人类和类人动画。在接下来的部分，您将实现`Clip`类。
- en: Implementing the Clip class
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现Clip类
- en: 'Create a new file, `Clip.cpp`. You will implement the `Clip` class in this
    new file. Follow these steps to implement the `Clip` class:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新文件，`Clip.cpp`。您将在这个新文件中实现`Clip`类。按照以下步骤实现`Clip`类：
- en: 'The default constructor needs to assign some default values to the members
    of the `Clip` class:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认构造函数需要为`Clip`类的成员分配一些默认值：
- en: '[PRE22]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'To implement the `Sample` function, make sure the clip is valid and that the
    time is in the range of the clip. Then, loop through all of the tracks. Get the
    joint ID of the track, sample the track, and assign the sampled value back to
    the `Pose` reference. If a component of a transform isn''t animated, the reference
    components are used to provide default values. The function then returns the adjusted
    time:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要实现`Sample`函数，请确保剪辑有效，并且时间在剪辑范围内。然后，循环遍历所有轨迹。获取轨迹的关节ID，对轨迹进行采样，并将采样值分配回`Pose`引用。如果变换的某个组件没有动画，将使用引用组件提供默认值。然后函数返回调整后的时间：
- en: '[PRE23]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The `AdjustTimeToFitRange` function that should loop has the same logic as
    the `AdjustTimeToFitTrack` function you implemented for the templated `Track`
    class:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`AdjustTimeToFitRange`函数应该循环，其逻辑与您为模板化的`Track`类实现的`AdjustTimeToFitTrack`函数相同：'
- en: '[PRE24]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The `RecalculateDuration` function sets `mStartTime` and `mEndTime` to default
    values of `0`. Next, these functions loop through every `TransformTrack` object
    in the animation clip. If the track is valid, the start and end times of the track
    are retrieved. The smallest start time and the largest end time are stored. The
    start time of a clip might not be `0`; it''s possible to have a clip that starts
    at an arbitrary point in time:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`RecalculateDuration`函数将`mStartTime`和`mEndTime`设置为`0`的默认值。接下来，这些函数循环遍历动画剪辑中的每个`TransformTrack`对象。如果轨迹有效，则检索轨迹的开始和结束时间。存储最小的开始时间和最大的结束时间。剪辑的开始时间可能不是`0`；可能有一个从任意时间点开始的剪辑：'
- en: '[PRE25]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '`[] operator` is meant to retrieve the `TransformTrack` object for a specific
    joint in the clip. This function is mainly used by whatever code loads the animation
    clip from a file. The function performs a linear search through all of the tracks
    to see whether any of them targets the specified joint. If a qualifying track
    is found, a reference to it is returned. If no qualifying track is found, a new
    one is created and returned:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`[] operator`用于检索剪辑中特定关节的`TransformTrack`对象。此函数主要由从文件加载动画剪辑的任何代码使用。该函数通过所有轨道进行线性搜索，以查看它们中的任何一个是否针对指定的关节。如果找到符合条件的轨道，则返回对其的引用。如果找不到符合条件的轨道，则创建并返回一个新的：'
- en: '[PRE26]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The remaining getter functions of the `Clip` class are simple:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Clip`类的其余getter函数都很简单：'
- en: '[PRE27]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Similarly, the remaining setter functions of the `Clip` class are simple:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样，`Clip`类的其余setter函数都很简单：
- en: '[PRE28]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: An animation clip always modifies the same joints. There is no need to re-set
    the pose that is sampled into so that it is the bind pose every frame. However,
    when switching animations, there is no guarantee that two clips will animate the
    same tracks. It's a good idea to reset the pose that is sampled into so that it
    is the bind pose whenever we switch animation clips!
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 动画剪辑始终修改相同的关节。没有必要重新设置每帧采样到的姿势，使其成为绑定姿势。但是，当切换动画时，不能保证两个剪辑将对相同的轨道进行动画。最好在切换动画剪辑时重置每帧采样到的姿势，使其成为绑定姿势！
- en: In the following section, you will learn how to load the rest pose of a character
    from a glTF file. The rest pose is important; it's the pose that a character is
    in when it's not animated.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，您将学习如何从glTF文件中加载角色的静止姿势。静止姿势很重要；这是角色在没有动画时的姿势。
- en: glTF – loading the rest pose
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: glTF - 加载静止姿势
- en: In this book, we will assume that a glTF file only contains one animated character.
    It's safe to assume that the entire hierarchy of the glTF file can be treated
    as the skeleton of the model. This makes loading the rest pose easy as the rest
    pose becomes the hierarchy in its initial configuration.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将假设一个glTF文件只包含一个动画角色。可以安全地假设glTF文件的整个层次结构可以视为模型的骨架。这使得加载静止姿势变得容易，因为静止姿势成为其初始配置中的层次结构。
- en: Before loading the rest pose, you need to create several helper functions. These
    functions are internal to the glTF loader and should not be exposed in the header
    file. Create a new namespace in `GLTFLoader.cpp` and call it `GLTFHelpers`. All
    the helper functions are created in this namespace.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在加载静止姿势之前，您需要创建几个帮助函数。这些函数是glTF加载器的内部函数，不应在头文件中公开。在`GLTFLoader.cpp`中创建一个新的命名空间，并将其命名为`GLTFHelpers`。所有帮助函数都在此命名空间中创建。
- en: 'Follow these steps to implement the helper functions that are needed to load
    the rest pose from a glTF file:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤实现加载glTF文件中静止姿势所需的帮助函数：
- en: 'First, implement a helper function to get the local transform of `cgltf_node`.
    A node can store its transform either as a matrix or as a separate position, rotation,
    and scale components. If the node stores its transformation as a matrix, use the
    `mat4ToTransform` decomposition function; otherwise, create the components as
    needed:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，实现一个帮助函数来获取`cgltf_node`的本地变换。节点可以将其变换存储为矩阵或单独的位置、旋转和缩放组件。如果节点将其变换存储为矩阵，请使用`mat4ToTransform`分解函数；否则，根据需要创建组件：
- en: '[PRE29]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Next, implement a helper function to get the index of `cgltf_node` from an
    array. The `GLTFNodeIndex` function can perform a simple linear lookup by looping
    through all the nodes in a `.gltf` file and returning the index of the node that
    you are searching for. If the index is not found, return `-1` to signal an invalid
    index:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，实现一个帮助函数，从数组中获取`cgltf_node`的索引。`GLTFNodeIndex`函数可以通过循环遍历`.gltf`文件中的所有节点来执行简单的线性查找，并返回您正在搜索的节点的索引。如果找不到索引，则返回`-1`以表示无效索引：
- en: '[PRE30]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'With these helper functions, loading the rest pose takes very little work.
    Loop through all the nodes in the current glTF file. For each node, assign the
    local transform to the pose that will be returned. You can find the parent of
    a node using the `GetNodeIndex` helper function, which returns `-1` if a node
    has no parent:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有了这些帮助函数，加载静止姿势需要很少的工作。循环遍历当前glTF文件中的所有节点。对于每个节点，将本地变换分配给将返回的姿势。您可以使用`GetNodeIndex`帮助函数找到节点的父节点，如果节点没有父节点，则返回`-1`：
- en: '[PRE31]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: In the following section, you will learn how to load joint names from a glTF
    file. These joint names appear in the same order as the rest pose joints. Knowing
    the joint names can be helpful to debug what a skeleton looks like. Joint names
    can also be used to retrieve a joint by something other than an index. The animation
    system you will build in this book does not support joint lookup by name, only
    index.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，您将学习如何从glTF文件中加载关节名称。这些关节名称按照静止姿势关节的顺序出现。了解关节名称可以帮助调试骨骼的外观。关节名称还可以用于通过其他方式而不是索引来检索关节。本书中构建的动画系统不支持按名称查找关节，只支持索引。
- en: glTF – loading joint names
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: glTF - 加载关节名称
- en: At some point, you might want to know the name assigned to each joint that is
    loaded. This can help make debugging or building tools easier. To load the names
    of every joint in the same order that you loaded the joints for the rest pose
    in, loop through the joints and use the name accessor.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在某个时候，您可能想要知道每个加载的关节分配的名称。这可以帮助更轻松地进行调试或构建工具。要加载与静止姿势中加载关节的顺序相同的每个关节的名称，请循环遍历关节并使用名称访问器。
- en: 'Implement the `LoadJointNames` function in `GLTFLoader.cpp`. Don''t forget
    to add the function declaration to `GLTFLoader.h`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在`GLTFLoader.cpp`中实现`LoadJointNames`函数。不要忘记将函数声明添加到`GLTFLoader.h`中：
- en: '[PRE32]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Joint names are extremely useful for debugging. They let you associate the index
    of a joint with a name, so you know what the data represents. In the following
    section, you will learn how to load animation clips from glTF files.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 关节名称对于调试非常有用。它们让您将关节的索引与名称关联起来，这样您就知道数据代表什么。在接下来的部分中，您将学习如何从glTF文件中加载动画剪辑。
- en: glTF – loading animation clips
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: glTF - 加载动画剪辑
- en: To generate pose data at runtime, you need to be able to load animation clips.
    As with the rest pose, this requires a few helper functions.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 要在运行时生成姿势数据，您需要能够加载动画剪辑。与静止姿势一样，这需要一些辅助函数。
- en: The first helper function you need to implement, `GetScalarValues`, reads the
    floating-point values of a `gltf` accessor. This can be done with the `cgltf_accessor_read_float`
    helper function.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要实现的第一个辅助函数`GetScalarValues`读取`gltf`访问器的浮点值。这可以通过`cgltf_accessor_read_float`辅助函数完成。
- en: The next helper function, `TrackFromChannel`, does most of the heavy lifting.
    It converts a glTF animation channel into a `VectorTrack` or a `QuaternionTrack`.
    glTF animation channels are documented at [https://github.com/KhronosGroup/glTF-Tutorials/blob/master/gltfTutorial/gltfTutorial_007_Animations.md](https://github.com/KhronosGroup/glTF-Tutorials/blob/master/gltfTutorial/gltfTutorial_007_Animations.md).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个辅助函数`TrackFromChannel`承担了大部分的重活。它将glTF动画通道转换为`VectorTrack`或`QuaternionTrack`。glTF动画通道的文档位于[https://github.com/KhronosGroup/glTF-Tutorials/blob/master/gltfTutorial/gltfTutorial_007_Animations.md](https://github.com/KhronosGroup/glTF-Tutorials/blob/master/gltfTutorial/gltfTutorial_007_Animations.md)。
- en: The `LoadAnimationClips` function should return a vector of clips objects. This
    isn't optimal; it's done to make the loading API easier to use. If performance
    is a concern, consider passing the result vector as a reference.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`LoadAnimationClips`函数应返回剪辑对象的向量。这并不是最佳的做法；这样做是为了使加载API更易于使用。如果性能是一个问题，请考虑将结果向量作为引用传递。'
- en: 'Follow these steps to load animations from a glTF file:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤从glTF文件中加载动画：
- en: 'Implement the `GetScalarValues` helper function in `GLTFLoader.cpp` in the
    `GLTFHelpers` namespace:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`GLTFLoader.cpp`文件的`GLTFHelpers`命名空间中实现`GetScalarValues`辅助函数：
- en: '[PRE33]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Implement the `TrackFromChannel` helper function in `GLTFLoader.cpp`. Start
    the function implementation by setting the `Track` interpolation. To do this,
    make sure the `Interpolation` type of the track matches the `cgltf_interpolation_type`
    type of the sampler:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`GLTFLoader.cpp`中实现`TrackFromChannel`辅助函数。通过设置`Track`插值来开始函数的实现。为此，请确保轨迹的`Interpolation`类型与采样器的`cgltf_interpolation_type`类型匹配：
- en: '[PRE34]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The sampler input is an accessor to the animation timeline. The sampler output
    is an accessor to the animation values. Use `GetScalarValues` to convert these
    accessors into linear arrays of floating-point numbers. The number of frames the
    number of elements in the sampler input. The number of components per frame (`vec3`
    or `quat`) is the number of value elements divided by the number of timeline elements.
    Resize the track to have enough room to store all the frames:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 采样器输入是动画时间轴的访问器。采样器输出是动画值的访问器。使用`GetScalarValues`将这些访问器转换为浮点数的线性数组。帧的数量等于采样器输入中的元素数量。每帧的组件数量（`vec3`或`quat`）等于值元素数量除以时间轴元素数量。调整轨迹的大小以存储所有帧：
- en: '[PRE35]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'To parse the `time` and `value` arrays into frame structures, loop through
    every frame in the sampler. For each frame, set the time, then read the input
    tangent, the value, then the output tangent. Input and output tangents are only
    available if the sampler is cubic; if it is not, these should default to `0`.
    A local `offset` variable needs to be used to deal with cubic tracks since the
    input and output tangents are as large as the number of components:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`time`和`value`数组解析为帧结构，循环遍历采样器中的每一帧。对于每一帧，设置时间，然后读取输入切线、值，然后输出切线。如果采样器是立方的，则输入和输出切线是可用的；如果不是，则应默认为`0`。需要使用本地`offset`变量来处理立方轨迹，因为输入和输出切线的大小与组件的数量一样大：
- en: '[PRE36]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Implement the `LoadAnimationClips` function in `GLTFLoader.cpp`; don''t forget
    to add the declaration of the function to `GLTFLoader.h`. Loop through all the
    clips in the provided `gltf_data`. For every clip, set its name. Loop through
    all of the channels in the clip and find the index of the node that the current
    channel affects:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`GLTFLoader.cpp`中实现`LoadAnimationClips`函数；不要忘记将该函数的声明添加到`GLTFLoader.h`中。循环遍历提供的`gltf_data`中的所有剪辑。对于每个剪辑，设置其名称。循环遍历剪辑中的所有通道，并找到当前通道影响的节点的索引：
- en: '[PRE37]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Each channel of a glTF file is an animation track. Some nodes might only animate
    their position, while others might animate the position, rotation, and scale.
    Check the type of channel that is parsed and call the `TrackFromChannel` helper
    function to convert it into an animation track. The `[] operator` of the `Track`
    class either retrieves the current track or creates a new one. This means the
    `TransformTrack` function for the node that you are parsing is always valid:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: glTF文件的每个通道都是一个动画轨迹。一些节点可能只会动画它们的位置，而其他节点可能会动画位置、旋转和缩放。检查解析的通道类型，并调用`TrackFromChannel`辅助函数将其转换为动画轨迹。`Track`类的`[]操作符`可以检索当前轨迹或创建一个新的轨迹。这意味着正在解析的节点的`TransformTrack`函数始终有效：
- en: '[PRE38]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'After all the tracks in a clip have been populated, call the `ReclaculateDuration`
    function of the clip. This ensures that the playback happens in the proper time
    range:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在剪辑中的所有轨迹都被填充后，调用剪辑的`ReclaculateDuration`函数。这确保了播放发生在适当的时间范围内：
- en: '[PRE39]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Being able to load animation clips and sample them into poses is about half
    of the work involved in animation programming. You can load an animation clip,
    sample it as the application updates, and use debug lines to draw the pose. The
    result is an animated skeleton. In the next chapter, you will learn how to use
    this animated skeleton to deform a mesh.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 能够加载动画剪辑并将其采样为姿势是动画编程中约一半的工作。您可以加载动画剪辑，在应用程序更新时对其进行采样，并使用调试线来绘制姿势。结果是一个动画骨架。在下一章中，您将学习如何使用这个动画骨架来变形网格。
- en: Summary
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you implemented the `Pose` and `Clip` classes. You learned
    how to load the rest pose out of a glTF file, as well as how to load animation
    clips. You also learned how to sample an animation clip to produce a pose.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您实现了`Pose`和`Clip`类。您学会了如何从glTF文件中加载静止姿势，以及如何加载动画剪辑。您还学会了如何对动画剪辑进行采样以生成姿势。
- en: The downloadable content for this book can be found on GitHub at [https://github.com/PacktPublishing/Game-Animation-Programming](https://github.com/PacktPublishing/Game-Animation-Programming).
    The sample in `Chapter09/Sample01` loads a glTF file and uses the `DebugDraw`
    functions to draw both the rest pose and the currently animated pose. To draw
    a bone using debug lines, draw a line from the position of the joint to the position
    of its parent.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的可下载内容可以在GitHub上找到：[https://github.com/PacktPublishing/Game-Animation-Programming](https://github.com/PacktPublishing/Game-Animation-Programming)。第9章的示例`Chapter09/Sample01`加载了一个glTF文件，并使用`DebugDraw`函数来绘制静止姿势和当前动画姿势。要使用调试线绘制骨骼，请从关节的位置绘制一条线到其父级的位置。
- en: Keep in mind that not all clips animate every joint of a pose. Any time the
    animation clip that you are sampling changes, the post it is sampled into needs
    to be reset. Resetting a pose is easy—assign to it the value of the rest pose.
    This is demonstrated in the code samples for this chapter.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，并非所有剪辑都会使每个姿势的关节发生动画。每当您正在采样的动画剪辑发生变化时，它被采样到的姿势都需要被重置。重置姿势很容易——将其赋值为静止姿势的值。这在本章的代码示例中有所展示。
- en: In the next chapter, you will learn how to skin an animated mesh. Once you know
    how to skin a mesh, you will be able to display an animated model.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何对动画网格进行蒙皮。一旦您知道如何对网格进行蒙皮，您就能够显示一个动画模型。
