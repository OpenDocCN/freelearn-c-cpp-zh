- en: 3\. Character Class Components and Blueprint Setup
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3. 角色类组件和蓝图设置
- en: Overview
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 概述
- en: This chapter will focus on the `Character` class in C++. You will be shown how
    to extend the `Character` class in C++ and then extend this newly created `Character`
    class further in Blueprints via inheritance. You will also work with player input
    and some movement logic.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将重点讨论C++中的`Character`类。您将学习如何在C++中扩展`Character`类，然后通过继承在蓝图中进一步扩展这个新创建的`Character`类。您还将处理玩家输入和一些移动逻辑。
- en: By the end of this chapter, you will be able to understand how class inheritance
    works in UE4 and how to utilize it to your advantage. You will also be able to
    work with Axis and Action Input Mappings, which are key in driving player-related
    input logic.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将能够理解UE4中的类继承是如何工作的，以及如何利用它来获得优势。您还将能够使用轴和动作输入映射，这在驱动与玩家相关的输入逻辑中非常关键。
- en: Introduction
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In the previous chapter, we learned how to create empty projects and import
    files, which folder structure to use, and how to work with animations. In this
    chapter, we'll explore some other key tools and functionality that you will work
    with when using Unreal Engine.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何创建空项目和导入文件，使用哪种文件夹结构，以及如何处理动画。在本章中，我们将探索一些其他关键工具和功能，这些工具和功能在使用虚幻引擎时会用到。
- en: Game developers often need to use certain tools that save them time and energy
    when building game functionality. Unreal Engine's powerful object inheritance
    capabilities give developers the edge they need to be more efficient. Developers
    can also work with both C++ and Blueprints interchangeably and use them to their
    benefit when developing games.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏开发人员经常需要使用一些工具，这些工具可以节省他们构建游戏功能时的时间和精力。虚幻引擎强大的对象继承能力为开发人员提供了更高效的优势。开发人员还可以交替使用C++和蓝图，并在开发游戏时充分利用它们。
- en: Another value-added benefit developers gain is the ability to extend code for
    use later in a project. Let's say your client has new requirements that build
    upon the old ones (as is the case in most game studios). Now, to extend functionality,
    developers can just inherit a class and add more functionality to it to get results
    quickly. This is very powerful, and it comes in handy in many situations.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员获得的另一个增值好处是能够扩展代码以供以后在项目中使用。假设您的客户有新的要求，这些要求建立在旧的要求之上（这在大多数游戏工作室都是这样的情况）。现在，为了扩展功能，开发人员只需继承一个类并向其添加更多功能，以快速获得结果。这是非常强大的，在许多情况下都很方便。
- en: In this chapter, we will discuss the Unreal `Character` class, create C++ code,
    and then extend it in Blueprints, before finally using it to create an in-game
    character.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论虚幻`Character`类，创建C++代码，然后在蓝图中扩展它，最后使用它来创建游戏角色。
- en: The Unreal Character Class
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 虚幻角色类
- en: Before we talk about the Unreal `Character` class, let's briefly touch on the
    concept of inheritance. If you're used to working with C++ or another similar
    language, you should already be familiar with this concept. Inheritance is the
    process whereby a class derives characteristics and behavior from another class.
    A C++ class can be extended to create a new class – the derived class – that retains
    properties of the base class and allows for these properties to be modified, or
    for new characteristics to be added. An example of this is the `Character` class.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们谈论虚幻`Character`类之前，让我们简要地谈一下继承的概念。如果您习惯使用C++或其他类似的语言，您应该已经熟悉这个概念。继承是一个类从另一个类中继承特性和行为的过程。一个C++类可以被扩展以创建一个新的类
    - 派生类 - 它保留了基类的属性，并允许修改这些属性，或者添加新的特性。`Character`类就是一个例子。
- en: A `Character` class is a special type of pawn and is a descendant of the Unreal
    `Pawn` class. Extending upon the `Pawn` class, the `Character` class has some
    movement capabilities by default, along with some inputs that add movement to
    the character. As standard, the `Character` class gives users the ability to get
    a character to walk, run, jump, fly, and swim within the created world.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`Character`类是一种特殊类型的pawn，是虚幻`Pawn`类的后代。在扩展`Pawn`类的基础上，`Character`类默认具有一些移动能力，以及一些输入，可以为角色添加移动。作为标准，`Character`类使用户能够让角色在创建的世界中行走、奔跑、跳跃、飞行和游泳。'
- en: Since a `Character` class is an extension of the `Pawn` class, it contains all
    the code/logic of the pawn, and developers can extend this class to add more functionality
    to it. When extending the `Character` class, its existing components get carried
    over to the extended class as inherited components. (In this case, the Capsule
    component, Arrow component, and Mesh).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`Character`类是`Pawn`类的扩展，它包含了所有的pawn的代码/逻辑，开发人员可以扩展这个类以添加更多功能。当扩展`Character`类时，它的现有组件会作为继承组件传递到扩展类中。（在这种情况下，Capsule组件、Arrow组件和Mesh）。
- en: Note
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Inherited components cannot be removed. Their settings may be changed, but a
    component that's added to a base class will always be present in the extended
    class. In this case, the base class is the `Pawn` class, while the extended (or
    child) class is the `Character` class.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 继承组件无法被移除。它们的设置可以被改变，但添加到基类的组件将始终存在于扩展类中。在这种情况下，基类是`Pawn`类，而扩展（或子）类是`Character`类。
- en: 'The `Character` class provides the following inherited components:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`Character`类提供以下继承组件：'
- en: '**Capsule component**: This is the root component that serves as the "origin"
    that other components get attached to within the hierarchy. This component can
    also be used for collisions and takes the form of a capsule that logically outlines
    many character forms (especially humanoid ones).'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Capsule组件**：这是作为“原点”的根组件，其他组件在层次结构中附加到它上面。这个组件也可以用于碰撞，并且以胶囊的形式逻辑地勾勒出许多角色形式（特别是人形角色）。'
- en: '`hide` when the game starts, but it can be tweaked to be visible. This component
    can be useful for debugging and adjusting game logic if required.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`隐藏`当游戏开始时，但可以调整为可见。如果需要，此组件可用于调试和调整游戏逻辑。'
- en: '`Character` class. The Skeletal Mesh, which is the form the character will
    take, can be set up here along with all the relevant variables, including animations,
    collisions, and so on.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Character`类。在这里可以设置角色将采取的形式的骨骼网格，以及所有相关变量，包括动画、碰撞等。'
- en: Most developers usually prefer to code the game and character logic in C++ and
    extend that class to blueprints so that they can perform other simple tasks, such
    as connecting assets to the class. So, for example, a developer may create a C++
    class that inherits from the `Character` class, write all the movement and jumping
    logic within that class, and then extend this class with a Blueprint, in which
    the developer updates the components with the required assets (such as the Skeletal
    Mesh and animation blueprint), and optionally code additional functionality into
    blueprints.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数开发人员通常更喜欢在C++中编写游戏和角色逻辑，并将该类扩展到蓝图，以便他们可以执行其他简单的任务，比如将资产连接到类。例如，开发人员可以创建一个从`Character`类继承的C++类，在该类中编写所有移动和跳跃逻辑，然后使用蓝图扩展此类，在其中开发人员可以使用所需的资产（如骨骼网格和动画蓝图）更新组件，并可选择在蓝图中编写其他功能。
- en: Extending the Character Class
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展Character类
- en: The `Character` class is extended when it is inherited by either C++ or Blueprints.
    This extended `Character` class will be a child of the `Character` class (*which
    will be called its parent*). Class extension is a powerful part of object-oriented
    programming, and classes can be extended to great depths and hierarchies.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当C++或蓝图继承时，`Character`类会被扩展。这个扩展的`Character`类将成为`Character`类的子类（*也称为其父类*）。类扩展是面向对象编程的一个强大部分，类可以被扩展到很深的层次和层次结构。
- en: 'Exercise 3.01: Creating and Setting Up a Third-Person Character C++ Class'
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习3.01：创建和设置第三人称角色C++类
- en: In this exercise, you will create a C++ class based on a `Character` class.
    You will also initialize the variables that will be set in the default values
    for the class that will extend this `Character` class.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在此练习中，您将创建一个基于`Character`类的C++类。您还将初始化将在扩展此`Character`类的类的默认值中设置的变量。
- en: 'The following steps will help you complete this exercise:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助您完成此练习：
- en: Launch Unreal Engine, select the `Games` category, and click the `Next` button.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Unreal Engine，选择`Games`类别，然后单击`Next`按钮。
- en: Select `Blank` and click the `Next` button.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`Blank`，然后单击`Next`按钮。
- en: Choose `C++` as the project type, set up the project name as `MyThirdPerson`,
    choose a suitable project directory, and click the `Create Project` button.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`C++`作为项目类型，将项目名称设置为`MyThirdPerson`，选择适当的项目目录，然后单击`Create Project`按钮。
- en: '*Right-click* in the `Content Browser` interface and click the `New C++ Class` button:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*右键单击*`Content Browser`界面，然后单击`New C++ Class`按钮：'
- en: In the dialog box that opens, select `Character` as the class type and click
    the `Next` button.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在打开的对话框中，选择`Character`作为类类型，然后单击`Next`按钮。
- en: Name it `MyThirdPersonChar` and click the `Create Class` button.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其命名为`MyThirdPersonChar`，然后点击`Create Class`按钮。
- en: Upon doing so, Visual Studio will open the `MyThirdPersonChar.cpp` and `MyThirdPersonChar.h`
    tabs.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这样做后，Visual Studio将打开`MyThirdPersonChar.cpp`和`MyThirdPersonChar.h`选项卡。
- en: Note
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: On some systems, it might be required to run the Unreal Engine editor with administrator
    privileges to automatically open the Visual Studio solution with the newly created
    C++ files.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些系统上，可能需要以管理员权限运行Unreal Engine编辑器，以自动打开新创建的C++文件的Visual Studio解决方案。
- en: 'Open the `MyThirdPersonChar.h` tab and add the following code under the `GENERATED_BODY()`
    text:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`MyThirdPersonChar.h`选项卡，在`GENERATED_BODY()`文本下添加以下代码：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the preceding code, we''re declaring two components: the `Camera` itself
    and `Camera boom`, which acts as the placeholder for the camera at a certain distance
    from the player. These components will be initialized in the constructor in *Step
    11*.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们声明了两个组件：`Camera`本身和`Camera boom`，它充当了玩家与摄像机之间的某个距离的占位符。这些组件将在*步骤11*中在构造函数中初始化。
- en: 'Add the following in the includes section, under `#include "CoreMinimal.h"`,
    in the `MyThirdPersonChar.h` file:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MyThirdPersonChar.h`文件的`#include "CoreMinimal.h"`下的包含部分中添加以下内容：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, head over to the `MyThirdPersonChar.cpp` tab and add the following includes
    after the `#include MyThirdPersonChar.h` code:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，转到`MyThirdPersonChar.cpp`选项卡，在`#include MyThirdPersonChar.h`代码后添加以下包含：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the preceding code snippet, the code adds the relevant classes to the class,
    which means we now have access to its methods and definitions.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码片段中，代码将相关类添加到类中，这意味着我们现在可以访问其方法和定义。
- en: 'In the `AMyThirdPersonChar::AMyThirdPersonChar()` function, add the following
    lines:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`AMyThirdPersonChar::AMyThirdPersonChar()`函数中，添加以下行：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The last line of the preceding code snipped will set up the camera to bind its
    rotation with the pawn's. This means that the camera should, in turn, rotate with
    rotation of the player controller associated with this pawn.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码片段的最后一行将设置摄像机与角色的旋转绑定。这意味着摄像机应该随着与该角色关联的玩家控制器的旋转而旋转。
- en: 'Head back to the Unreal Engine project and click the `Compile` button in the top bar:![Figure
    3.1: Compile button on the Unreal Editor top bar'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回Unreal Engine项目，点击顶部栏的`Compile`按钮：![图3.1：Unreal Editor顶部栏上的编译按钮
- en: '](img/B16183_03_01.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_03_01.jpg)'
- en: 'Figure 3.1: Compile button on the Unreal Editor top bar'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.1：Unreal Editor顶部栏上的编译按钮
- en: A `Compile Complete!` message should appear on the bottom-right.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在右下角应该出现`Compile Complete!`消息。
- en: Note
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can locate the completed exercise code files on GitHub, in the `Chapter03`
    -> `Exercise3.01` directory, at the following link: [https://packt.live/3khFrMt](https://packt.live/3khFrMt).'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitHub上的`Chapter03` -> `Exercise3.01`目录中找到已完成的练习代码文件，链接如下：[https://packt.live/3khFrMt](https://packt.live/3khFrMt)。
- en: After extracting the `.rar` file, *double-click* the `.uproject` file. You will
    see a prompt asking `Would you like to rebuild now?`. Click `Yes` on that prompt
    so that it can build the necessary intermediate files, after which it should open
    the project in Unreal Editor automatically.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 解压`.rar`文件后，*双击*`.uproject`文件。你会看到一个提示，询问`是否要立即重建？`。点击该提示上的`是`，这样它就可以构建必要的中间文件，然后应该会自动在Unreal
    Editor中打开项目。
- en: By completing this exercise, you've learned how to extend the `Character` class.
    You also learned how to initialize the default components of the `Character` class
    and how to compile the updated code from within Unreal Editor. Next up, you will
    learn how to extend the C++ class you created in Blueprints and why that is feasible
    in many situations.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 通过完成这个练习，你学会了如何扩展`Character`类。你还学会了如何初始化`Character`类的默认组件，并且学会了如何在Unreal Editor中编译更新的代码。接下来，你将学会如何扩展你在蓝图中创建的C++类，以及在许多情况下为什么这是可行的。
- en: Extending the C++ Class with Blueprints
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用蓝图扩展C++类
- en: As mentioned earlier, most developers extend the C++ code logic to blueprints
    in order to link this with the assets they will use. This is done to achieve easy
    asset assignment compared to finding and setting up the asset in code. Furthermore,
    it gives developers the ability to use powerful blueprint features such as Timelines,
    Events, and ready-to-use macros, in combination with their C++ code, to achieve
    the maximum benefit of developing with both C++ and Blueprints.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，大多数开发人员将C++代码逻辑扩展到蓝图中，以便将其与他们将使用的资产联系起来。这样做是为了实现比在代码中查找和设置资产更容易的资产分配。此外，它还使开发人员能够利用强大的蓝图功能，如时间轴、事件和即用型宏，与他们的C++代码结合使用，以实现在C++和蓝图一起开发的最大效益。
- en: So far, we have made a C++ `Character` class. In it, we have set up components
    and movement capabilities. Now, we want to specify the assets that are going to
    be used in our class, as well as add input and movement ability. For this, it
    is easier to extend with Blueprint and set up the options there. This is what
    we will be doing in the next exercise.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经创建了一个C++ `Character`类。在其中，我们设置了组件和移动能力。现在，我们想要指定将在我们的类中使用的资产，并添加输入和移动能力。为此，最好是用蓝图进行扩展并在那里设置选项。这就是我们将在接下来的练习中要做的事情。
- en: 'Exercise 3.02: Extending C++ with Blueprints'
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习3.02：用蓝图扩展C++
- en: In this exercise, you will learn how to extend the C++ class you created with
    Blueprints to add Blueprint code on top of the pre-existing C++ code. You will
    also be adding input key bindings, which will be responsible for moving the character.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将学会如何扩展你用蓝图创建的C++类，以在现有的C++代码之上添加蓝图代码。你还将添加输入按键绑定，这将负责移动角色。
- en: 'The following steps will help you complete this exercise:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助你完成这个练习：
- en: Download and extract all the contents of the `Chapter03` *|* `Exercise3.02`
    *|* `ExerciseFiles` directory, which can be found on GitHub.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并提取`Chapter03` *|* `Exercise3.02` *|* `ExerciseFiles`目录中的所有内容，这些内容可以在GitHub上找到。
- en: Note
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The `ExerciseFiles` directory can be found on GitHub at the following link:
    [https://packt.live/2GO0dG8](https://packt.live/2GO0dG8).'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`ExerciseFiles`目录可以在以下链接的GitHub上找到：[https://packt.live/2GO0dG8](https://packt.live/2GO0dG8)。'
- en: Browse to the `Content` folder inside the `MyThirdPerson` project we created
    in *Exercise 3.01*, *Creating and Setting Up a Third-Person Character C++ Class*.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览到我们在*练习3.01*中创建的`MyThirdPerson`项目内的`Content`文件夹。
- en: 'Copy the `MixamoAnimPack` folder we created in *Step 1* and paste it into the
    `Content` folder directory we opened in *Step 2*, as shown in the following screenshot:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制我们在*步骤1*中创建的`MixamoAnimPack`文件夹，并将其粘贴到我们在*步骤2*中打开的`Content`文件夹目录中，如下图所示：
- en: Note
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The `MixamoAnimPack` assets were obtained from the Epic marketplace via the
    following link: [https://www.unrealengine.com/marketplace/en-US/product/mixamo-animation-pack](https://www.unrealengine.com/marketplace/en-US/product/mixamo-animation-pack).'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`MixamoAnimPack`资产是通过以下链接从Epic市场获得的：[https://www.unrealengine.com/marketplace/en-US/product/mixamo-animation-pack](https://www.unrealengine.com/marketplace/en-US/product/mixamo-animation-pack)。'
- en: '![Figure 3.2: MixamoAnimPack placed in the project directory'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.2：MixamoAnimPack放置在项目目录中'
- en: '](img/B16183_03_02.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_03_02.jpg)'
- en: 'Figure 3.2: MixamoAnimPack placed in the project directory'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.2：MixamoAnimPack放置在项目目录中
- en: Open the project. *Right-click* inside the `Content Browser` interface and click
    `Blueprint Class`.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开项目。在`Content Browser`界面内*右键单击*，然后点击`Blueprint Class`。
- en: 'In the `Search` dialogue, type `GameMode`, *right-click* the class matching
    the name, and click the `Select` button. Have a look at the following screenshot:![Figure
    3.3: Creating the GameMode class'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`搜索`对话框中输入`GameMode`，*右键单击*与名称匹配的类，然后点击`选择`按钮。查看下面的截图：![图3.3：创建GameMode类
- en: '](img/B16183_03_03.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_03_03.jpg)'
- en: 'Figure 3.3: Creating the GameMode class'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.3：创建GameMode类
- en: Name the blueprint we created in *Step 6* `BP_GameMode`.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在*步骤6*中创建的蓝图命名为`BP_GameMode`。
- en: Now, repeat *Step 5*.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，重复*步骤5*。
- en: In the `Search` box, type `MyThirdPersonChar`, select the class, and then *right-click*
    on the `Select` button.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索框中，输入`MyThirdPersonChar`，选择该类，然后*右键单击*`选择`按钮。
- en: Name the blueprint we created in *Step 9* `BP_MyTPC`.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在*步骤9*中创建的蓝图命名为`BP_MyTPC`。
- en: 'In the `World Settings` tab, click the `None` option next to `GameMode Override`
    and select `BP_GameMode`:![Figure 3.4: Specifying Game Mode in World Settings'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`World Settings`选项卡中，点击`GameMode Override`旁边的`None`选项，然后选择`BP_GameMode`：![图3.4：在世界设置中指定游戏模式
- en: '](img/B16183_03_04.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_03_04.jpg)'
- en: 'Figure 3.4: Specifying Game Mode in World Settings'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.4：在世界设置中指定游戏模式
- en: 'Set `Default Pawn Class` to `BP_MyTPC`:![Figure 3.5: Specifying Default Pawn
    Class in Game Mode'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Default Pawn Class`设置为`BP_MyTPC`：![图3.5：在游戏模式中指定默认角色类
- en: '](img/B16183_03_05.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_03_05.jpg)'
- en: 'Figure 3.5: Specifying Default Pawn Class in Game Mode'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.5：在游戏模式中指定默认角色类
- en: Open `BP_MyTPC` and click on the `Mesh (Inherited)` component in the hierarchy
    of the `Components` tab on the left-hand side.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`BP_MyTPC`，在左侧的`Components`选项卡的层次结构中点击`Mesh (Inherited)`组件。
- en: In the `Details` tab, find the `Mesh` section and set `Skeletal Mesh` to `Maximo_Adam`.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“详细信息”选项卡中，找到“网格”部分，并将“骨骼网格”设置为“Maximo_Adam”。
- en: Note
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Meshes and Animations will be covered in depth in *Chapter 13*, *Blend Spaces
    1D, Key Bindings, and State Machines*.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 骨骼网格和动画将在*第13章*中深入讨论，*混合空间1D，按键绑定和状态机*。
- en: 'In the `Details` tab, find the `Animation` section and set `Anim Class` to
    `MixamoAnimBP_Adam_C`. You''ll note that this class name gets suffixed with `_C`
    when selected. This is basically the instance of the blueprint created by UE4\.
    Blueprints, in a working project/build, usually get suffixed this way to differentiate
    between a Blueprint Class and an instance of that class.![Figure 3.6: Setting
    up Anim Class and Skeletal Mesh'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“详细信息”选项卡中，找到“动画”部分，并将“动画类”设置为“MixamoAnimBP_Adam_C”。您会注意到当选择时，此类名称会以“_C”结尾。这基本上是UE4创建的蓝图的实例。在工作项目/构建中，蓝图通常以这种方式结尾，以区分蓝图类和该类的实例。![图3.6：设置动画类和骨骼网格
- en: '](img/B16183_03_06.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_03_06.jpg)'
- en: 'Figure 3.6: Setting up Anim Class and Skeletal Mesh'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.6：设置动画类和骨骼网格
- en: From the top-most menu, go to the `Edit` drop-down and click `Project Settings`.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从顶部菜单中，转到“编辑”下拉菜单，单击“项目设置”。
- en: 'Click on the `Input` section, which can be found in the `Engine` section:![Figure
    3.7: Input section of Project Settings'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“输入”部分，该部分位于“引擎”部分中：![图3.7：项目设置的输入部分
- en: '](img/B16183_03_07.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_03_07.jpg)'
- en: 'Figure 3.7: Input section of Project Settings'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.7：项目设置的输入部分
- en: In the `Bindings` section, click the `+` icon next to `Axis Mappings` and expand
    the section.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“绑定”部分，单击“轴映射”旁边的“+”图标并展开该部分。
- en: Note
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Action Mappings are single keypress actions that are performed such as jump,
    dash, or run, while Axis Mappings are float values that are assigned that will
    return a floating-point value based on the keypress of the user. This is more
    relevant in the case of gamepad controllers or VR controllers, where the analog
    thumb stick comes into play. In that case, it would return the floating value
    of the state of the thumb stick, which is very important for managing player movement
    or related functionalities.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 动作映射是执行单个按键操作的动作，例如跳跃、冲刺或奔跑，而轴映射是分配的浮点值，将根据用户的按键返回浮点值。这在游戏手柄或VR手柄的情况下更相关，其中模拟拇指杆起作用。在这种情况下，它将返回拇指杆状态的浮点值，这对于管理玩家移动或相关功能非常重要。
- en: Rename `NewAxisMapping_0` to `MoveForward`.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将“NewAxisMapping_0”重命名为“MoveForward”。
- en: In the `MoveForward` section, click the drop-down menu and select `W`.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“MoveForward”部分，单击下拉菜单并选择“W”。
- en: Click the `+` icon next to the `MoveForward` icon to add another field.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“MoveForward”图标旁边的“+”图标以添加另一个字段。
- en: Set the new field as `S`. Set its scale to `-1.0` (since we want to move backward
    with the `S` key).
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新字段设置为“S”。将其比例设置为“-1.0”（因为我们希望使用“S”键向后移动）。
- en: 'Create another axis mapping by repeating *Step 18*, name it `MoveRight`, and
    add two fields – `A` with `-1.0` for the scale and `D` with `1.0` for the scale:![Figure
    3.8: Movement Axis Mappings'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过重复*步骤18*创建另一个轴映射，命名为“MoveRight”，并添加两个字段——“A”为比例-1.0，“D”为比例1.0：![图3.8：移动轴映射
- en: '](img/B16183_03_08.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_03_08.jpg)'
- en: 'Figure 3.8: Movement Axis Mappings'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.8：移动轴映射
- en: 'Open `BP_MyTPC` and click the `Event Graph` tab:![Figure 3.9: Event Graph tab'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开“BP_MyTPC”并单击“事件图”选项卡：![图3.9：事件图标签
- en: '](img/B16183_03_09.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_03_09.jpg)'
- en: 'Figure 3.9: Event Graph tab'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.9：事件图标签
- en: '*Right-click* anywhere inside the graph, type `MoveForward`, and select the
    first node option:![Figure 3.10: MoveForward Axis Event'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*右键单击*图表内任意位置，键入“MoveForward”，并选择第一个节点选项：![图3.10：MoveForward轴事件'
- en: '](img/B16183_03_10.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_03_10.jpg)'
- en: 'Figure 3.10: MoveForward Axis Event'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.10：MoveForward轴事件
- en: '*Right-click* inside the graph, search for `Get Control Rotation`, and select
    the first node option.'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*右键单击*图表内，搜索“获取控制旋转”，并选择第一个节点选项。'
- en: Note
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Since the camera associated with a player can choose not to show the pawn's
    yaw, roll, or pitch, the `Get Control Rotation` gives the pawn full aim rotation.
    This is useful in many calculations.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 由于与玩家相关联的摄像机可以选择不显示角色的偏航、翻滚或俯仰，“获取控制旋转”给予角色完整的瞄准旋转。这在许多计算中很有用。
- en: '*Left-click* and drag from `Return Value` of the `Get Control Rotation` node,
    search for `Break Rotator`, and select it.'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*左键单击*并从“获取控制旋转”节点的“返回值”处拖动，搜索“断裂旋转器”，并选择它。'
- en: '*Right-click* inside the graph, search for `Make Rotator`, and select the first
    node option.'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*右键单击*图表内，搜索“创建旋转器”，并选择第一个节点选项。'
- en: Connect the `Z` (*Yaw*) node from `Break Rotator` to the `Z` (*Yaw*) node of
    the `Make Rotator` node.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将“断裂旋转器”中的“Z”（偏航）节点连接到“创建旋转器”节点的“Z”（偏航）节点。
- en: Note
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Make `Rotator` create a rotator with the Pitch, Roll, and Yaw values, while
    the break rotator splits a rotator into its components (Roll, Pitch, and Yaw).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 使“旋转器”创建一个具有俯仰、翻滚和偏航值的旋转器，而断裂旋转器将一个旋转器分解为其组件（翻滚、俯仰和偏航）。
- en: '*Left-click* and drag from `Return Value` of the `Make Rotator` node, search
    for `Get` `Forward Vector`, and select it.'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*左键单击*并从“创建旋转器”节点的“返回值”处拖动，搜索“获取前向矢量”，并选择它。'
- en: '*Left-click* and drag from `Return Value` of the `Get Forward Vector` node,
    search for `Add Movement Input`, and select it.'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*左键单击*并从“获取前向矢量”节点的“返回值”处拖动，搜索“添加移动输入”，并选择它。'
- en: Connect the `Axis Value` node from the `InputAxis MoveForward` node to the `Scale
    Value` node in the `Add Movement Input` node.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将“InputAxis MoveForward”节点中的“轴值”节点连接到“添加移动输入”节点中的“比例值”节点。
- en: Finally, connect the white `Execution` pin from the `InputAxis MoveForward`
    node to the `Add Movement Input` node.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将“InputAxis MoveForward”节点的白色“执行”引脚连接到“添加移动输入”节点。
- en: '*Right-click* inside the graph, search for `InputAxis MoveRight`, and select
    the first node option.'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*右键单击*图表内，搜索“InputAxis MoveRight”，并选择第一个节点选项。'
- en: '*Left-click* and drag from `Return Value` of the `Make Rotator` node, search
    for `Get Right Vector`, and select it.'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*左键单击*并从“创建旋转器”节点的“返回值”处拖动，搜索“获取右矢量”，并选择它。'
- en: '*Left-click* and drag from `Return Value` of the `Get Right Vector` node, search
    for `Add Movement Input`, and select it.'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`Get Right Vector`节点的`Return Value`处进行*左键单击*并拖动，搜索`Add Movement Input`，并选择它。
- en: Connect the `Axis Value` pin from the `InputAxis MoveRight` node to the `Scale
    Value` pin in the `Add Movement Input` node we created in the previous step.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`InputAxis MoveRight`节点中的`Axis Value`引脚连接到我们在上一步中创建的`Add Movement Input`节点中的`Scale
    Value`引脚。
- en: 'Finally, connect the `white Execution` pin from the `InputAxis MoveRight` node
    to the `Add Movement Input` node we added in *Step 36*:![Figure 3.11: Movement
    logic'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将`InputAxis MoveRight`节点中的`白色执行`引脚连接到我们在*步骤36*中添加的`Add Movement Input`节点：![图3.11：移动逻辑
- en: '](img/B16183_03_11.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_03_11.jpg)'
- en: 'Figure 3.11: Movement logic'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.11：移动逻辑
- en: 'Now, head to the `Viewport` tab. Here, you will see that the character''s front
    is not pointing in the direction of the arrow and that the character is displaced
    above the capsule component. Click on the `Mesh` component and select the object
    translation node located at the top of the viewport. Then, drag the arrows on
    the Mesh to adjust it so that the feet align with the bottom of the capsule component
    and the Mesh is rotated to point toward the arrow:![Figure 3.12: Translation Rotation
    and Scale Selector section'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，转到`视口`选项卡。在这里，您会看到角色的正面没有指向箭头的方向，并且角色在胶囊组件上方。单击`Mesh`组件，选择位于视口顶部的对象平移节点。然后，拖动网格上的箭头进行调整，使脚与胶囊组件底部对齐，并且网格旋转以指向箭头：![图3.12：平移旋转和比例选择器部分
- en: '](img/B16183_03_12.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_03_12.jpg)'
- en: 'Figure 3.12: Translation Rotation and Scale Selector section'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.12：平移旋转和比例选择器部分
- en: 'Once the character is aligned in the capsule, it will appear as the following screenshot:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦角色在胶囊中对齐，它将显示如下截图：
- en: '![Figure 3.13: Mesh adjusted within the capsule component'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.13：在胶囊组件内调整网格'
- en: '](img/B16183_03_13.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_03_13.jpg)'
- en: 'Figure 3.13: Mesh adjusted within the capsule component'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.13：在胶囊组件内调整网格
- en: In the `Toolbar` menu, press the `Compile` button and then `Save`.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`工具栏`菜单中，点击`编译`按钮，然后点击`保存`。
- en: Go back to the map tab and press the `Play` button to view your character in-game.
    Use the *W*, *A*, *S*, and *D* keys to move around.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到地图选项卡，点击`播放`按钮以查看游戏中的角色。使用*W*、*A*、*S*和*D*键来移动。
- en: Note
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can locate the completed exercise code files on GitHub, in the `Chapter03`
    -> `Exercise3.02` directory, at the following link: [https://packt.live/3keGxIU](https://packt.live/3keGxIU).'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitHub上的`Chapter03` -> `Exercise3.02`目录中找到已完成的练习代码文件，链接如下：[https://packt.live/3keGxIU](https://packt.live/3keGxIU)。
- en: After extracting the `.rar` file, double-click the `.uproject` file. You will
    see a prompt asking `Would you like to rebuild now?`. Click `Yes` on that prompt
    so that it can build the necessary intermediate files, after which it should open
    the project in Unreal Editor automatically.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 解压`.rar`文件后，双击`.uproject`文件。您会看到一个提示询问“是否要立即重建？”。点击该提示上的“是”，这样它就可以构建必要的中间文件，之后应该会自动在虚幻编辑器中打开项目。
- en: By completing this exercise, you are now able to understand how to extend C++
    code with Blueprints, and why that is favorable in many situations for the developer.
    You also learned how to add input mappings and how they are used to drive player-related
    input logic.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 通过完成这个练习，您现在能够理解如何使用蓝图扩展C++代码，以及为什么在许多情况下这对开发人员是有利的。您还学会了如何添加输入映射以及它们如何用于驱动与玩家相关的输入逻辑。
- en: In the activity for this chapter, you will be combining the skills you have
    gained from the previous exercises of this chapter and extending the project you
    completed in *Activity 2.01, Linking Animations to a Character* activity of *Chapter
    2*, *Working with Unreal Engine*. This will allow you to build on your own created
    Blueprint and see how that maps to real-world scenarios.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的活动中，您将结合本章前面练习中所学到的技能，并扩展您在*第2.01活动，将动画链接到角色*活动中完成的项目。这将使您能够构建自己创建的蓝图，并了解它如何映射到现实世界的场景。
- en: 'Activity 3.01: Extending the C++ Character Class with Blueprint in the Animation
    Project'
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动3.01：在动画项目中使用蓝图扩展C++角色类
- en: Now that you've created a C++ class and extended it with Blueprints, it is time
    to bring both concepts together in a real-world scenario. In this activity, your
    aim is to make our character from *Activity 2.01*, *Mixamo Character Animation*,
    which can be found in *Chapter 2,* *Working with Unreal Engine,* to jump using
    the *spacebar* key on your keyboard. However, you need to create the `Character`
    class from scratch in C++ and then later extend it with Blueprint to reach the
    final goal.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经创建了一个C++类并将其与蓝图扩展，是时候将这两个概念结合到一个真实的场景中了。在这个活动中，您的目标是使我们在*第2.01活动*中的角色，*Mixamo角色动画*，在键盘上使用*空格键*跳跃。但是，您需要从头开始在C++中创建`Character`类，然后稍后将其扩展为蓝图以达到最终目标。
- en: 'The following steps will help you complete this activity:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '以下步骤将帮助您完成此活动： '
- en: Open the project from *Activity 2.01*, *Mixamo Character Animation*.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开*Activity 2.01*，*Mixamo角色动画*的项目。
- en: Create a `Character` class in C++ that will initialize the character variables,
    including the camera associated with the player.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在C++中创建一个`Character`类，该类将初始化角色变量，包括与玩家相关联的摄像机。
- en: Map the Jump input to the *spacebar* key in the project settings.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将跳跃输入映射到项目设置中的*空格键*。
- en: Extend the created C++ class with a blueprint to add the associated assets and
    jump functionality.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用蓝图扩展创建的C++类，以添加相关资产和跳跃功能。
- en: 'Expected Output:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 预期输出：
- en: 'The character should be able to jump when you press the *spacebar* key. The
    level should use the Blueprint that extends the C++ `Character` class:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 当您按下*空格键*时，角色应该能够跳跃。关卡应该使用扩展了C++ `Character`类的蓝图：
- en: '![Figure 3.14: Ganfault jump activity expected output'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.14：Ganfault跳跃活动预期输出'
- en: '](img/B16183_03_14.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_03_14.jpg)'
- en: 'Figure 3.14: Ganfault jump activity expected output'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.14：Ganfault跳跃活动预期输出
- en: Note
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The solution to this activity can be found at: [https://packt.live/338jEBx](https://packt.live/338jEBx).'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的解决方案可在以下网址找到：[https://packt.live/338jEBx](https://packt.live/338jEBx)。
- en: By completing this activity, you've understood scenarios where C++ code is extended
    in Blueprints to implement functionalities and logic. This combination of C++
    and Blueprints is the most powerful tool game developers possess to create masterful
    and unique games within Unreal Engine.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 通过完成这项活动，您已经了解了在蓝图中扩展C++代码以实现功能和逻辑的场景。这种C++和蓝图的结合是游戏开发者在虚幻引擎中创作精湛和独特游戏的最强大工具。
- en: Summary
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to create a C++ `Character` class, add initializer
    code to it, and then use Blueprints to extend it to set up assets and add additional code.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何创建一个C++的`Character`类，为其添加初始化代码，然后使用蓝图来扩展它以设置资产并添加额外的代码。
- en: The result obeys the C++ code, as well as the Blueprint code, and can be used
    in any purposeful scenario.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 结果遵循了C++代码以及蓝图代码，并可以在任何有意义的场景中使用。
- en: You also learned how to set up Axis Mappings mapped to the *W*, *A*, *S*, and
    *D* keys to move players (which is the default movement mapping in many games).
    You also learned how to make the character jump within the game.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 您还学习了如何设置与*W*、*A*、*S*和*D*键映射的轴映射，以移动玩家（这是许多游戏中默认的移动映射）。您还学习了如何使角色在游戏中跳跃。
- en: In the next chapter, you will explore Input Mapping in-depth and how to use
    the Mobile Previewer within Unreal Editor. This will help you create games with
    solid inputs mapped to game and player logic. It will also allow you to quickly
    test what your game will look and feel like on a mobile, all within Unreal Editor.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将深入探讨输入映射以及如何在虚幻编辑器中使用移动预览器。这将帮助您创建具有稳定输入映射到游戏和玩家逻辑的游戏。它还将允许您快速测试您的游戏在移动设备上的外观和感觉，所有这些都在虚幻编辑器中完成。
