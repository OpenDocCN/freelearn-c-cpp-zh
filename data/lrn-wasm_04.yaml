- en: Installing the Required Dependencies
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装所需的依赖项
- en: Now that you have your development environment set up and you're ready to start
    writing C, C++, and JavaScript, it's time to add the final piece of the puzzle.
    In order to generate `.wasm` files from our C/C++ code, we need to install and
    configure the **Emscripten SDK** (**EMSDK**).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经设置好了开发环境，并准备开始编写C、C++和JavaScript，是时候添加最后一块拼图了。为了从我们的C/C++代码生成`.wasm`文件，我们需要安装和配置**Emscripten
    SDK**（**EMSDK**）。
- en: In this chapter, we'll discuss the development workflow and talk about how the
    EMSDK fits into the development process. Detailed instructions will be provided
    on how to install and configure the EMSDK on each platform, as well as any prerequisites.
    Once the installation and configuration process is complete, you'll test it out
    by writing and compiling some C code.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论开发工作流程，并谈论EMSDK如何融入开发过程。我们将提供详细的说明，说明如何在每个平台上安装和配置EMSDK，以及任何先决条件。安装和配置过程完成后，您将通过编写和编译一些C代码来测试它。
- en: 'Our goal for this chapter is to understand the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是理解以下内容：
- en: The overall development workflow when working with WebAssembly
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与WebAssembly一起工作时的整体开发工作流程
- en: How the EMSDK relates to Emscripten and WebAssembly and why it's needed
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EMSDK与Emscripten和WebAssembly的关系以及为什么需要它
- en: How to install the prerequisites for the EMSDK
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何安装EMSDK的先决条件
- en: How to install and configure the EMSDK
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何安装和配置EMSDK
- en: How to test the EMSDK to ensure it's working correctly
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何测试EMSDK以确保它正常工作
- en: The development workflow
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发工作流程
- en: The development workflow for WebAssembly is comparable to most other languages
    that require compilation and a build process. Before getting into the tooling
    setup, we will cover the development cycle. In this section, we will establish
    some context for the tooling we will install and configure in the rest of this
    chapter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: WebAssembly的开发工作流程与大多数其他需要编译和构建过程的语言类似。在进入工具设置之前，我们将介绍开发周期。在本节中，我们将为本章其余部分将安装和配置的工具建立一些上下文。
- en: Steps in the workflow
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作流程中的步骤
- en: 'For this book, we will write C and C++ code and compile it down to a Wasm module,
    but the workflow will be applicable to any programming language that compiles
    down to a `.wasm` file. The following diagram gives an overview of the process:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本书，我们将编写C和C++代码，并将其编译为Wasm模块，但这个工作流程适用于任何编译为`.wasm`文件的编程语言。以下图表概述了这个过程：
- en: '![](img/b43e1500-5c09-4f8d-a81c-665fad256758.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b43e1500-5c09-4f8d-a81c-665fad256758.png)'
- en: Steps in the development workflow
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 开发工作流程中的步骤
- en: This process will be used throughout the book for our examples, so you'll get
    an idea of how the project structure corresponds to the workflow. We'll use some
    of the tooling available to expedite and simplify the process, but the steps will
    still be the same.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中将使用这个过程来进行示例，因此您将了解项目结构如何与工作流程对应。我们将使用一些可用的工具来加快和简化这个过程，但步骤仍将保持不变。
- en: Integrating Tooling into the workflow
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将工具集成到工作流程中
- en: There are many editors and tools available to simplify the development process.
    Fortunately, C/C++ and JavaScript have been around for quite some time, so you
    can take advantage of the options that suit you best. The list of tools for WebAssembly
    is considerably shorter, given the shorter duration of which the technology has
    existed, but they are out there.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多编辑器和工具可用于简化开发过程。幸运的是，C/C++和JavaScript已经存在了相当长的时间，因此您可以利用最适合您的选项。WebAssembly的工具列表要短得多，因为这项技术存在的时间较短，但它们确实存在。
- en: The primary tool we'll use, VS Code, offers some excellent and useful features
    for simplifying the build and development process. In addition to using it for
    writing our code, we'll utilize VS Code's built-in Tasks feature to build the
    `.wasm` file from C/C++. By creating a `.vscode/tasks.json` file in the project
    root folder, we're able to specify all of the parameters associated with the build
    step and run it quickly using a keyboard shortcut. In addition to performing a
    build, we can start and stop a running Node.js process (that is, the local server
    in the workflow diagram). We'll cover how to add and configure these features
    in the next chapter.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用的主要工具是VS Code，它提供了一些优秀和有用的功能，可以简化构建和开发过程。除了用它来编写我们的代码外，我们还将利用VS Code内置的任务功能从C/C++构建`.wasm`文件。通过在项目根文件夹中创建一个`.vscode/tasks.json`文件，我们可以指定与构建步骤相关的所有参数，并使用键盘快捷键快速运行它。除了执行构建之外，我们还可以启动和停止运行的Node.js进程（即工作流程图中的本地服务器）。我们将在下一章中介绍如何添加和配置这些功能。
- en: Emscripten and the EMSDK
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Emscripten和EMSDK
- en: We'll use Emscripten to compile our C/C++ code down to `.wasm` files. Up to
    this point, Emscripten has only briefly been mentioned in a general context. Since
    we'll use this tool and the corresponding Emscripten SDK (EMSDK) in the build
    process, it's important to understand what each technology is and the part it
    plays in the development workflow. In this section, we'll describe Emscripten's
    purpose and discuss its relationship to the EMSDK.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Emscripten将我们的C/C++代码编译为`.wasm`文件。到目前为止，Emscripten只是在一般情况下简要提到过。由于我们将在构建过程中使用这个工具和相应的Emscripten
    SDK（EMSDK），因此了解每种技术的作用以及它在开发工作流程中的作用是很重要的。在本节中，我们将描述Emscripten的目的，并讨论它与EMSDK的关系。
- en: Emscripten overview
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Emscripten概述
- en: 'So what is Emscripten? Wikipedia provides the following definition:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 那么Emscripten是什么？维基百科提供了以下定义：
- en: '"Emscripten is a source-to-source compiler that runs as a back end to the LLVM
    compiler and produces a subset of JavaScript known as asm.js. It can also produce
    WebAssembly."'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: “Emscripten是一个源到源编译器，作为LLVM编译器的后端运行，并生成称为asm.js的JavaScript子集。它也可以生成WebAssembly。”
- en: We discussed source-to-source compilers (or transpilers) in the first chapter
    and used TypeScript as an example. Transpilers convert source code in one programming
    language to equivalent source code in another programming language. To elaborate
    on Emscripten running as a backend to the LLVM compiler, we need to provide some
    additional details about LLVM.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在第一章中讨论了源到源编译器（或转换器），并以TypeScript为例。转换器将一种编程语言的源代码转换为另一种编程语言的等效源代码。为了详细说明Emscripten作为LLVM编译器的后端运行，我们需要提供有关LLVM的一些额外细节。
- en: 'The official website for LLVM ([https://llvm.org](https://llvm.org)) defines
    the LLVM as *a collection of modular and reusable compiler and toolchain technologies*.
    There are several sub-projects that make up LLVM, but we''ll be focusing on the
    two that Emscripten utilizes: Clang and the LLVM Core libraries. To understand
    how these pieces fit together, let''s review the design of a three-stage compiler:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: LLVM的官方网站（[https://llvm.org](https://llvm.org)）将LLVM定义为*一组模块化和可重用的编译器和工具链技术*。LLVM由几个子项目组成，但我们将重点放在Emscripten使用的两个项目上：Clang和LLVM核心库。为了了解这些部件如何组合在一起，让我们回顾一下三阶段编译器的设计：
- en: '![](img/fd686aef-f7e8-4aa4-a782-25c68ec02e2a.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fd686aef-f7e8-4aa4-a782-25c68ec02e2a.png)'
- en: Design of a general three-stage compiler
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 通用三阶段编译器的设计
- en: 'The process is relatively straightforward: three separate stages or *ends*
    handle the compilation process. This design allows for different frontends and
    backends for various programming languages and target architectures and completely
    decouples the machine code from the source code by using an intermediate representation.
    Now let''s associate each compilation stage with a component of the toolchain
    we''ll use to generate WebAssembly:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 该过程相对简单：三个独立的阶段或*端*处理编译过程。这种设计允许不同的前端和后端用于各种编程语言和目标架构，并通过使用中间表示将机器代码与源代码完全解耦。现在让我们将每个编译阶段与我们将用于生成WebAssembly的工具链的组件相关联：
- en: '![](img/3a332b22-6a36-4623-b326-dde857731fd7.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3a332b22-6a36-4623-b326-dde857731fd7.png)'
- en: Three-stage compilation using the LLVM, Clang, and Emscripten
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使用LLVM、Clang和Emscripten的三阶段编译
- en: Clang is used to compile C/C++ down to LLVM's **Intermediate Representation**
    (**IR**), which Emscripten compiles to a Wasm module (binary format). The two
    diagrams also demonstrate the relationship between Wasm and machine code. You
    can think of WebAssembly as a CPU in the browser, with Wasm being the machine
    code on which it runs.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Clang用于将C/C++编译为LLVM的**中间表示**（**IR**），Emscripten将其编译为Wasm模块（二进制格式）。这两个图表还展示了Wasm和机器代码之间的关系。您可以将WebAssembly视为浏览器中的CPU，Wasm是其运行的机器代码。
- en: Where does the EMSDK fit in?
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: EMSDK适用于哪里？
- en: 'Emscripten refers to the toolchain used to compile C and C++ down to `asm.js`
    or WebAssembly. The EMSDK is used to manage the tools in the toolchain and the
    corresponding configuration. This eliminates the need for complex environment
    setup and prevents issues with incompatible versions of tooling. By installing
    the EMSDK, we have all of the tooling we need (with the exception of the prerequisites)
    to use the Emscripten compiler. The following diagram is a visual representation
    of the Emscripten toolchain (with the EMSDK shown in dark gray):'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Emscripten是指用于将C和C++编译为`asm.js`或WebAssembly的工具链。EMSDK用于管理工具链中的工具和相应的配置。这消除了复杂的环境设置需求，并防止了工具版本不兼容的问题。通过安装EMSDK，我们拥有了使用Emscripten编译器所需的所有工具（除了先决条件）。以下图表是Emscripten工具链的可视化表示（EMSDK显示为深灰色）：
- en: '![](img/c88f7e5e-eefe-454f-a218-816b9caebac5.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c88f7e5e-eefe-454f-a218-816b9caebac5.png)'
- en: Emscripten Toolchain (modified slightly from emscripten.org)
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Emscripten工具链（从emscripten.org稍作修改）
- en: Now that you have a better understanding of Emscripten and the EMSDK, let's
    move on to the installation process for the prerequisites.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您对Emscripten和EMSDK有了更好的了解，让我们继续安装先决条件的过程。
- en: Installing the prerequisites
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装先决条件
- en: Before installing and configuring the EMSDK, we'll need to install some prerequisites.
    You installed two of the prerequisites in [Chapter 3](706c89b2-c820-4fb0-906c-2f2e49602d27.xhtml),
    *Setting Up a Development Environment*: Node.js and Git. Each platform has slightly
    different installation processes and tooling requirements. In this section, we
    cover the installation process for the prerequisite tooling for each platform.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装和配置EMSDK之前，我们需要安装一些先决条件。您在[第3章](706c89b2-c820-4fb0-906c-2f2e49602d27.xhtml)中安装了两个先决条件：Node.js和Git。每个平台都有略有不同的安装过程和工具要求。在本节中，我们将介绍每个平台的先决条件工具的安装过程。
- en: Common prerequisites
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见的先决条件
- en: 'It''s possible that you already have all of the prerequisites installed. Here
    are the three that you''ll need regardless of the platform:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经安装了所有的先决条件。以下是无论平台如何都需要的三个先决条件：
- en: Git
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git
- en: Node.js
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js
- en: Python 2.7
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 2.7
- en: Note the Python version; this is important because installing the wrong version
    could cause the installation process to fail. If you followed along in [Chapter
    2](0b30dfc9-4624-48b6-a968-0342540d1ef5.xhtml), *Elements of WebAssembly - Wat,
    Wasm, and the JavaScript API*, and installed Node.js and Git, all that's left
    is to install Python 2.7 and any additional prerequisites specified for your platform.
    The Python installation process for each platform will be specified in the following
    subsections.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 注意Python版本；这很重要，因为安装错误的版本可能会导致安装过程失败。如果您在[第2章](0b30dfc9-4624-48b6-a968-0342540d1ef5.xhtml)中跟随并安装了Node.js和Git，那么剩下的就是安装Python
    2.7和为您的平台指定的任何其他先决条件。每个平台的Python安装过程将在以下子节中指定。
- en: Python is a high-level programming language used for general-purpose programming.
    If you'd like to learn more, check out the official website at [https://www.python.org/](https://www.python.org/).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Python是一种用于通用编程的高级编程语言。如果您想了解更多，请访问官方网站[https://www.python.org/](https://www.python.org/)。
- en: Installing the prerequisites on macOS
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在macOS上安装先决条件
- en: 'There are three additional tools you''ll need to install prior to installing
    the EMSDK:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装EMSDK之前，您需要安装另外三个工具：
- en: Xcode
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Xcode
- en: Xcode Command Line Tools
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Xcode命令行工具
- en: CMake
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CMake
- en: 'You can install Xcode from the macOS App Store. If you already had Xcode installed,
    you can check if the Command Line Tools are installed by going to Xcode | Preferences
    | Locations and checking if the Command Line Tools option has a value. The Command
    Line Tools should have already been installed if you installed the Homebrew package
    manager:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从macOS应用商店安装Xcode。如果您已经安装了Xcode，可以通过转到Xcode | 首选项 | 位置并检查命令行工具选项是否有值来检查是否已安装命令行工具。如果您安装了Homebrew软件包管理器，则应该已经安装了命令行工具：
- en: '![](img/1fec0953-9278-4312-b286-c5ed34ec45e3.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1fec0953-9278-4312-b286-c5ed34ec45e3.png)'
- en: Checking the current version of the Xcode Command Line Tools
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 检查Xcode命令行工具的当前版本
- en: 'If you don''t see that, open up Terminal and run this command:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有看到，请打开终端并运行此命令：
- en: '[PRE0]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once complete, you can install CMake by running this command:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，可以通过运行此命令来安装CMake：
- en: '[PRE1]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Prior to installing Python, run this command:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装Python之前，请运行此命令：
- en: '[PRE2]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you see `Python 2.7.xx` (where `xx` is the patch version and can be any
    number), you''re ready to install the EMSDK. If you get an error saying the Python
    command wasn''t found or you see `Python 3.x.xx`, I recommend you install `pyenv`,
    a Python Version manager. To install `pyenv`, run this command:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看到`Python 2.7.xx`（其中`xx`是补丁版本，可以是任何数字），则可以准备安装EMSDK。如果出现错误，表示找不到Python命令，或者看到`Python
    3.x.xx`，我建议您安装`pyenv`，一个Python版本管理器。要安装`pyenv`，请运行此命令：
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You''ll need to take some additional configuration steps to finalize the installation.
    Follow the installation instructions for Homebrew at [https://github.com/pyenv/pyenv#homebrew-on-mac-os-x](https://github.com/pyenv/pyenv#homebrew-on-mac-os-x).
    After installing and configuring `pyenv`, run this command to install Python 2.7:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要执行一些额外的配置步骤才能完成安装。请按照[https://github.com/pyenv/pyenv#homebrew-on-mac-os-x](https://github.com/pyenv/pyenv#homebrew-on-mac-os-x)上的Homebrew安装说明进行操作。安装和配置`pyenv`后，运行此命令安装Python
    2.7：
- en: '[PRE4]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'After the installation is complete, run this command:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，运行此命令：
- en: '[PRE5]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To ensure you''re using the correct version of Python, run this command:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为确保您使用的是正确版本的Python，请运行此命令：
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You should see Python `2.7.xx`, where `xx` is the patch version (I was seeing
    `2.7.10`, which will work fine).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到Python `2.7.xx`，其中`xx`是补丁版本（我看到的是`2.7.10`，这将可以正常工作）。
- en: Installing the prerequisites on Ubuntu
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Ubuntu上安装先决条件
- en: 'Ubuntu should already have Python 2.7 installed. You can confirm this by running
    this command:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Ubuntu应该已经安装了Python 2.7。您可以通过运行此命令确认：
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If you see Python `2.7.xx` (where `xx` is the patch version and can be any
    number), you''re ready to install the EMSDK. If you get an error saying the python
    command wasn''t found or you see `Python 3.x.xx`, I recommend you install `pyenv`,
    a Python version manager. Before installing `pyenv`, check if you have `curl`
    installed. You can do this by running the following command:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看到Python `2.7.xx`（其中`xx`是补丁版本，可以是任何数字），则可以准备安装EMSDK。如果出现错误，表示找不到python命令，或者看到`Python
    3.x.xx`，我建议您安装`pyenv`，一个Python版本管理器。在安装`pyenv`之前，请检查是否已安装`curl`。您可以通过运行以下命令来执行此操作：
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If you see a version number and other information, `curl` is installed. If
    not, you can install `curl` by running the following command:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看到版本号和其他信息，则已安装`curl`。如果没有，您可以通过运行以下命令来安装`curl`：
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Once the `curl` installation is complete, run this command to install `pyenv`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`curl`安装完成后，运行此命令安装`pyenv`：'
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'After installing and configuring pyenv, run this command to install Python
    2.7:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 安装和配置pyenv后，运行此命令安装Python 2.7：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If you encounter build issues, navigate to the *Common build problems* page
    at [https://github.com/pyenv/pyenv/wiki/common-build-problems](https://github.com/pyenv/pyenv/wiki/common-build-problems).
    After the installation is complete, run this command:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果遇到构建问题，请转到[https://github.com/pyenv/pyenv/wiki/common-build-problems](https://github.com/pyenv/pyenv/wiki/common-build-problems)上的*常见构建问题*页面。安装完成后，运行此命令：
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To ensure you''re using the correct version of Python, run this command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 为确保您使用的是正确版本的Python，请运行此命令：
- en: '[PRE13]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You should see `Python 2.7.xx`, where `xx` is the patch version (I was seeing
    `2.7.10`, which will work fine).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到`Python 2.7.xx`，其中`xx`是补丁版本（我看到的是`2.7.10`，这将可以正常工作）。
- en: Installing the prerequisites on Windows
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows上安装先决条件
- en: 'The only additional prerequisite for Windows is Python 2.7\. Before attempting
    the installation, run this command:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Windows的唯一额外先决条件是Python 2.7。在尝试安装之前，运行此命令：
- en: '[PRE14]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If you see `Python 2.7.xx` (where `xx` is the patch version and can be any
    number), you''re ready to install the EMSDK. If you get an error saying the Python
    command wasn''t found, or you see `Python 3.x.xx` and Python 2.7 isn''t installed
    on your system, run this command to install Python 2.7:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看到`Python 2.7.xx`（其中`xx`是补丁版本，可以是任何数字），则可以准备安装EMSDK。如果出现错误，表示找不到Python命令，或者看到`Python
    3.x.xx`并且系统上没有安装Python 2.7，请运行此命令安装Python 2.7：
- en: '[PRE15]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If you saw `Python 3.x.xx` prior to installing Python 2.7, you should be able
    to change the current Python version by updating your path. Before attempting
    the EMSDK installation, run this command to set Python to 2.7:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在安装Python 2.7之前看到`Python 3.x.xx`，您应该能够通过更新路径来更改当前的Python版本。在尝试安装EMSDK之前，运行此命令将Python设置为2.7：
- en: '[PRE16]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Installing and configuring the EMSDK
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置EMSDK
- en: If you have all of the prerequisites installed, you're ready to install the
    EMSDK. The process for getting the EMSDK up and running is relatively straightforward.
    In this section, we cover the installation process for the EMSDK and demonstrate
    how to update your VS Code C/C++ configuration to accommodate for Emscripten.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已安装了所有先决条件，就可以准备安装EMSDK了。获取EMSDK并使其运行的过程相对简单。在本节中，我们将介绍EMSDK的安装过程，并演示如何更新您的VS
    Code C/C++配置以适应Emscripten。
- en: Installation process across all platforms
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跨所有平台的安装过程
- en: 'First, select a folder to install the EMSDK. I created a folder at `~/Tooling`
    (or `C:\Users\Mike\Tooling` on Windows). In a terminal, `cd` into the folder you
    just created and run this command:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，选择一个文件夹来安装 EMSDK。我创建了一个文件夹在 `~/Tooling`（或者在 Windows 上是 `C:\Users\Mike\Tooling`）。在终端中，`cd`
    到你刚创建的文件夹，并运行这个命令：
- en: '[PRE17]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Once the clone process is complete, follow the instructions to complete the
    installation from the section below that corresponds to your platform.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦克隆过程完成，请按照下面对应你的平台的部分中的说明完成安装。
- en: Installation on macOS and Ubuntu
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 macOS 和 Ubuntu 上安装
- en: 'Once the clone process is complete, run each of the commands from the following
    code snippet. If you see a message recommending that you run `git pull` instead
    of `./emsdk update`, use the `git pull` command prior to running the `./emsdk
    install latest` command:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦克隆过程完成，运行以下代码片段中的每个命令。如果看到一条建议你运行 `git pull` 而不是 `./emsdk update` 的消息，请在运行
    `./emsdk install latest` 命令之前使用 `git pull` 命令：
- en: '[PRE18]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The `source ./emsdk_env.sh` command will activate the environment variables
    in the current Terminal, which means every time you create a new Terminal instance,
    you''d have to re-run it. To prevent having to take this step, you can add the
    following line to your Bash or Zsh configuration file (that is, `~/.bash_profile`
    or `~/.zshrc`):'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`source ./emsdk_env.sh` 命令将在当前终端中激活环境变量，这意味着每次创建新的终端实例时，你都需要重新运行它。为了避免这一步，你可以将以下行添加到你的
    Bash 或 Zsh 配置文件中（即 `~/.bash_profile` 或 `~/.zshrc`）：'
- en: '[PRE19]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If you installed the EMSDK in a different location, make sure that you update
    the path to reflect this. Adding this line to your configuration file will run
    that environment update command automatically so you can start using the EMSDK
    immediately. To ensure you can use the Emscripten compiler, run this command:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将 EMSDK 安装在不同的位置，请确保更新路径以反映这一点。将这行添加到你的配置文件中将自动运行该环境更新命令，这样你就可以立即开始使用 EMSDK。为了确保你可以使用
    Emscripten 编译器，请运行这个命令：
- en: '[PRE20]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: If you see a message with version information, the setup was successful. If
    you see an error message stating that the command was not found, double-check
    your configuration. You may have specified an invalid path for the `emsdk_env.sh`
    in your Bash or Zsh configuration file.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到一个带有版本信息的消息，设置就成功了。如果你看到一个错误消息，说明找不到该命令，请仔细检查你的配置。你可能在你的 Bash 或 Zsh 配置文件中指定了无效的
    `emsdk_env.sh` 路径。
- en: Installation and configuration on Windows
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Windows 上安装和配置
- en: 'Before completing the installation, I recommend you use **PowerShell** going
    forward. The examples in this book will be using PowerShell inside `cmder`. Once
    the clone process is complete, run each of the commands given in the following
    code snippet. If you see a message recommending that you run `git pull` instead
    of `./emsdk update`, use the `git pull` command prior to running the `./emsdk
    install latest` command:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成安装之前，我建议你以后使用 **PowerShell**。本书中的示例将在 `cmder` 中使用 PowerShell。一旦克隆过程完成，运行以下代码片段中给出的每个命令。如果看到一条建议你运行
    `git pull` 而不是 `./emsdk update` 的消息，请在运行 `./emsdk install latest` 命令之前使用 `git
    pull` 命令：
- en: '[PRE21]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The `--global` flag in the `.\emsdk activate` command allows you to run `emcc`
    without having to run a script to set the environment variables each session.
    To ensure you can use the Emscripten compiler, restart your CLI and run this command:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`.\emsdk activate` 命令中的 `--global` 标志允许你在每个会话中运行 `emcc` 而无需运行脚本来设置环境变量。为了确保你可以使用
    Emscripten 编译器，请重新启动你的 CLI 并运行这个命令：'
- en: '[PRE22]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: If you see a message with version information, the setup was successful.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到一个带有版本信息的消息，设置就成功了。
- en: Configuration in VS Code
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 VS Code 中配置
- en: 'If you haven''t already done so, create a folder that will contain the code
    samples we''ll be working through (the examples use the name `book-examples`).
    Open this folder in VS Code, press the *F1* key, and select C/Cpp: Edit Configurations…
    to create a `.vscode/c_cpp_properties.json` file in the root of your project.
    It should open the file automatically. Add the following line to the `browse.path`
    array: `"${env:EMSCRIPTEN}/system/include"`. This will prevent errors being thrown
    if you include the `emscripten.h` header. You may need to manually create the
    `browse` object with a `path` entry if it didn''t generate one automatically.
    The following snippet represents the updated configuration file on Ubuntu:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '如果你还没有这样做，创建一个包含我们将要使用的代码示例的文件夹（示例使用名称 `book-examples`）。在 VS Code 中打开这个文件夹，按
    *F1* 键，选择 C/Cpp: Edit Configurations… 来创建一个 `.vscode/c_cpp_properties.json` 文件在你项目的根目录。它应该会自动打开文件。将以下行添加到
    `browse.path` 数组中：`"${env:EMSCRIPTEN}/system/include"`。这将防止在包含 `emscripten.h`
    头文件时抛出错误。如果它没有自动生成，你可能需要手动创建 `browse` 对象并添加一个 `path` 条目。以下代码片段代表了 Ubuntu 上更新后的配置文件：'
- en: '[PRE23]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Testing the compiler
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试编译器
- en: After installing and configuring the EMSDK, you'll need to test it to ensure
    you're able to generate Wasm modules from C/C++ code. The easiest way to test
    it is to compile some code using the `emcc` command and try running it in a browser.
    In this section, we'll validate the EMSDK installation by writing and compiling
    some simple C code and evaluating the Wat associated with the `.wasm` output.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 安装和配置 EMSDK 后，你需要测试它以确保你能够从 C/C++ 代码生成 Wasm 模块。测试的最简单方法是使用 `emcc` 命令编译一些代码，并尝试在浏览器中运行它。在这一部分，我们将通过编写和编译一些简单的
    C 代码并评估与 `.wasm` 输出相关联的 Wat 来验证 EMSDK 的安装。
- en: The C code
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C 代码
- en: We'll use some very simple C code to test our compiler installation. We won't
    need to import any headers or external libraries. We won't use C++ for this test
    because we need to perform an extra step with C++ to prevent name mangling, which
    we'll describe in greater detail in [Chapter 6](cdf64596-59dd-4805-8509-7315b7760b1e.xhtml), *Interacting
    with JavaScript and Debugging*. The code for this section is located in the `/chapter-04-installing-deps` folder
    of the `learn-webassembly` repository. Follow the instructions listed here to
    test out the EMSDK.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一些非常简单的C代码来测试我们的编译器安装。我们不需要导入任何头文件或外部库。我们不会在这个测试中使用C++，因为我们需要对C++执行额外的步骤，以防止名称混淆，我们将在[第6章](cdf64596-59dd-4805-8509-7315b7760b1e.xhtml)中更详细地描述。本节的代码位于`learn-webassembly`存储库的`/chapter-04-installing-deps`文件夹中。按照这里列出的说明来测试EMSDK。
- en: 'Create a subfolder named `/chapter-04-installing-deps` in your `/book-examples`
    folder. Next, create a new file in this folder named `main.c` and populate it
    with the following contents:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的`/book-examples`文件夹中创建一个名为`/chapter-04-installing-deps`的子文件夹。接下来，在这个文件夹中创建一个名为`main.c`的新文件，并填充以下内容：
- en: '[PRE24]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Compiling the C code
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编译C代码
- en: 'In order to compile a C/C++ file with Emscripten, we''ll use the `emcc` command.
    We need to pass some arguments to the compiler to ensure we get a valid output
    that we can utilize in the browser. To generate a Wasm file from a C/C++ file,
    the command follows this format:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用Emscripten编译C/C++文件，我们将使用`emcc`命令。我们需要向编译器传递一些参数，以确保我们获得一个在浏览器中可以利用的有效输出。为了从C/C++文件生成Wasm文件，命令遵循这种格式：
- en: '[PRE25]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Here''s a breakdown of each of the arguments for the `emcc` command:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`emcc`命令的每个参数的详细说明：
- en: '| **Argument** | **Description** |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| **参数** | **描述** |'
- en: '| `<file.c>` | Path of the C or C++ input file that will be compiled down to
    a Wasm module; we''ll replace this with the actual file path when we run the command.
    |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| `<file.c>` | 将被编译为Wasm模块的C或C++输入文件的路径；当我们运行命令时，我们将用实际文件路径替换它。 |'
- en: '| `-Os` | Compiler optimization level. This optimization flag allows for module
    instantiation without requiring Emscripten''s glue code. |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| `-Os` | 编译器优化级别。这个优化标志允许模块实例化，而不需要Emscripten的粘合代码。 |'
- en: '| `-s WASM=1` | Tells the compiler to compile code to WebAssembly. |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| `-s WASM=1` | 告诉编译器将代码编译为WebAssembly。 |'
- en: '| `-s SIDE_MODULE=1` | Ensures only a `WebAssembly` module is output (no glue
    code). |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| `-s SIDE_MODULE=1` | 确保只输出一个`WebAssembly`模块（没有粘合代码）。 |'
- en: '| `-s BINARYEN_ASYNC_COMPILATION=0` | From official docs:Whether to compile
    the wasm asynchronously, which is more efficient and does not block the main thread.
    This is currently required for all but the smallest modules to run in V8*.* |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| `-s BINARYEN_ASYNC_COMPILATION=0` | 来自官方文档：是否异步编译wasm，这更有效，不会阻塞主线程。目前，这对于除了最小的模块之外的所有模块在V8中运行是必需的。
    |'
- en: '| `-o <file.wasm>` | Path of output file `.wasm` file. We''ll replace this
    with the desired output path when we run the command. |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| `-o <file.wasm>` | 输出文件`.wasm`文件的路径。当我们运行命令时，我们将用所需的输出路径替换它。 |'
- en: 'To test if Emscripten is working correctly, open the integrated terminal in
    VS Code and run the following commands:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试Emscripten是否正常工作，请在VS Code中打开集成终端并运行以下命令：
- en: '[PRE26]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: It may take a minute to compile the file the first time, but subsequent builds
    will be much faster. If the compilation was successful, you should see a `main.wasm`
    file in the `/chapter-04-installing-deps` folder. If you encounter an error, Emscripten's
    error message should be descriptive enough to help you correct the issue.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次编译文件可能需要一分钟，但后续构建将会快得多。如果编译成功，你应该在`/chapter-04-installing-deps`文件夹中看到一个`main.wasm`文件。如果遇到错误，Emscripten的错误消息应该足够详细，以帮助你纠正问题。
- en: 'If everything completed successfully, you can view the Wat associated with
    the `main.wasm` file by right-clicking `main.wasm` in VS Code''s file explorer
    and selecting Show WebAssembly from the context menu. The output should look like
    this:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利完成，你可以通过在VS Code的文件资源管理器中右键单击`main.wasm`并从上下文菜单中选择显示WebAssembly来查看与`main.wasm`文件相关的Wat。输出应该如下所示：
- en: '[PRE27]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: If the compiler ran successfully, you're ready to move on to the next step and
    write JavaScript code to interact with the module, which we'll cover in the next
    chapter.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果编译器成功运行，你就可以继续下一步，编写JavaScript代码与模块进行交互，这将在下一章中介绍。
- en: Summary
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered the overall development workflow when working with
    WebAssembly. In order to generate our `.wasm` files, we're using Emscripten, which
    requires the installation of the EMSDK. Prior to reviewing any installation details,
    we discussed the technologies under the hood and described how they relate to
    each other and to WebAssembly. We covered each of the steps required to get EMDSK
    working locally on your computer. The installation process for the EMSDK on each
    platform was presented, as well as the installation and configuration instructions
    for the EMSDK. After installing the EMSDK , we tested the compiler (no to). That
    was the `emcc` command we ran in the previous section. Using the `emcc` command
    on a simple C code file to ensure Emscripten was working correctly. In the next
    chapter, we'll walk through the process of creating and loading your first module!
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了在使用WebAssembly时的整体开发工作流程。为了生成我们的`.wasm`文件，我们正在使用Emscripten，这需要安装EMSDK。在审查任何安装细节之前，我们讨论了底层技术，并描述了它们如何相互关联以及与WebAssembly的关系。我们介绍了在本地计算机上使EMDSK工作所需的每个步骤。每个平台上EMSDK的安装过程都有所介绍，以及EMSDK的安装和配置说明。安装EMSDK之后，我们测试了编译器（不是）。那是我们在上一节中运行的`emcc`命令。使用`emcc`命令对一个简单的C代码文件，以确保Emscripten工作正常。在下一章中，我们将详细介绍创建和加载你的第一个模块的过程！
- en: Questions
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What are the five steps in the development workflow?
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开发工作流程中的五个步骤是什么？
- en: Which stage or end does Emscripten represent in the compilation process?
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Emscripten在编译过程中代表哪个阶段或结束？
- en: What does IR stand for (LLVM's output)?
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: IR代表什么（LLVM的输出）？
- en: What role does the EMSDK play with regard to Emscripten?
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: EMSDK在Emscripten的编译过程中扮演什么角色？
- en: Which EMSDK prerequisites are required on all three platforms (macOS, Windows,
    and Linux)?
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在所有三个平台（macOS、Windows和Linux）上需要哪些EMSDK先决条件？
- en: Why do you need to run the `emsdk_env` script before you can use the Emscripten
    compiler?
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么需要在使用Emscripten编译器之前运行`emsdk_env`脚本？
- en: Why do you need to add the `"${env:EMSCRIPTEN}/system/include"` path to the
    C/Cpp configuration file?
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么需要将`"${env:EMSCRIPTEN}/system/include"`路径添加到C/Cpp配置文件中？
- en: What is the command used to compile C/C++ down to Wasm modules?
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于将C/C++编译为Wasm模块的命令是什么？
- en: What does the `-Os` compiler flag represent?
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`-Os`编译器标志代表什么？'
- en: Further reading
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Emscripten: [http://emscripten.org](http://emscripten.org)'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Emscripten: [http://emscripten.org](http://emscripten.org)'
- en: The LLVM Compiler Infrastructure Project: [https://llvm.org](https://llvm.org)
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LLVM编译器基础设施项目：[https://llvm.org](https://llvm.org)
- en: 'C++ programming with Visual Studio Code: [https://code.visualstudio.com/docs/languages/cpp](https://code.visualstudio.com/docs/languages/cpp)'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Visual Studio Code进行C++编程：[https://code.visualstudio.com/docs/languages/cpp](https://code.visualstudio.com/docs/languages/cpp)
