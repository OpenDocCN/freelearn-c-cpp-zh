- en: Chapter 2. Audio Playback
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。音频播放
- en: In this chapter, we will perform two of the most fundamental operations in audio
    programming—loading and playing audio files. This might not seem like much, but
    it is already enough to get us started adding audio into our games.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将执行音频编程中最基本的两个操作——加载和播放音频文件。这可能看起来不像什么，但已经足够让我们开始将音频添加到我们的游戏中了。
- en: There are many different audio libraries available these days, such as DirectSound,
    Core Audio, PortAudio, OpenAL, FMOD, or Wwise. Some are available only on certain
    platforms, while others work almost everywhere. Some are very low-level, providing
    little more than a bridge between the user and the sound card driver, while others
    provide high-level features such as 3D sound or interactive music.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如今有许多不同的音频库可用，如DirectSound、Core Audio、PortAudio、OpenAL、FMOD或Wwise。有些仅在特定平台上可用，而其他一些几乎在任何地方都可以工作。有些是非常低级的，几乎只提供了用户和声卡驱动程序之间的桥梁，而其他一些则提供了高级功能，如3D音效或交互式音乐。
- en: For this book, we will be using FMOD, a cross-platform audio middleware developed
    by Firelight Technologies that is extremely powerful, yet easy-to-use. However,
    you should try to focus more on the concepts covered, instead of the API, because
    understanding them will allow you to adapt to other libraries more easily, since
    a lot of this knowledge is interchangeable.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本书，我们将使用FMOD，这是由Firelight Technologies开发的跨平台音频中间件，非常强大，但易于使用。然而，你应该更专注于所涵盖的概念，而不是API，因为理解它们将使你更容易适应其他库，因为很多知识是可以互换的。
- en: For starters, we will learn how to install FMOD, how to initialize and update
    the audio system, and how to get it to play an audio file. At the end of the chapter,
    we will work through the creation of a very simple audio manager class, which
    encapsulates all of these tasks behind a minimalistic interface.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将学习如何安装FMOD，如何初始化和更新音频系统，以及如何让它播放音频文件。在本章结束时，我们将通过创建一个非常简单的音频管理器类来完成这些任务，它将所有这些任务封装在一个极简的接口后面。
- en: Understanding FMOD
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解FMOD
- en: One of the main reasons why I chose FMOD for this book is that it contains two
    separate APIs—the FMOD Ex Programmer's API, for low-level audio playback, and
    FMOD Designer, for high-level data-driven audio. This will allow us to cover game
    audio programming at different levels of abstraction without having to use entirely
    different technologies.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择FMOD作为本书的主要原因之一是它包含两个单独的API——FMOD Ex程序员API，用于低级音频播放，以及FMOD Designer，用于高级数据驱动音频。这将使我们能够在不必使用完全不同的技术的情况下，以不同的抽象级别涵盖游戏音频编程。
- en: Tip
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从[http://www.packtpub.com](http://www.packtpub.com)的帐户中下载你购买的所有Packt图书的示例代码文件。如果你在其他地方购买了这本书，你可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，文件将直接通过电子邮件发送给你。
- en: 'Besides that reason, FMOD is also an excellent piece of software, with several
    advantages to game developers:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，FMOD也是一款优秀的软件，对游戏开发者有几个优势：
- en: '**License**: It is free for non-commercial use, and has reasonable licenses
    for commercial projects.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**许可证**：它可以免费用于非商业用途，并且对于商业项目有合理的许可证。'
- en: '**Cross-platform**: It works across an impressive number of platforms. You
    can run it on Windows, Mac, Linux, Android, iOS, and on most of the modern video
    game consoles by Sony, Microsoft, and Nintendo.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跨平台**：它可以在令人印象深刻的多个平台上运行。你可以在Windows、Mac、Linux、Android、iOS上运行它，并且在索尼、微软和任天堂的大多数现代游戏主机上也可以运行。'
- en: '**Supported formats**: It has native support for a huge range of audio file
    formats, which saves you the trouble of having to include other external libraries
    and decoders.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支持的格式**：它原生支持大量的音频文件格式，这样就不用包含其他外部库和解码器了。'
- en: '**Programming languages**: Not only can you use FMOD with C and C++, there
    are also bindings available for other programming languages, such as C# and Python.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编程语言**：你不仅可以使用C和C++来使用FMOD，还有其他编程语言的绑定可用，比如C#和Python。'
- en: '**Popularity**: It is extremely popular, being widely considered as the industry
    standard nowadays. It was used in games such as BioShock, Crysis, Diablo 3, Guitar
    Hero, Start Craft II, and World of Warcraft. It is also used to power several
    popular game engines, such as Unity3D and CryEngine.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**流行度**：它非常受欢迎，被广泛认为是目前的行业标准。它被用于游戏如BioShock，Crysis，Diablo 3，Guitar Hero，Start
    Craft II和World of Warcraft。它还被用来驱动几个流行的游戏引擎，如Unity3D和CryEngine。'
- en: '**Features**: It is packed with features, covering everything from simple audio
    playback, streaming and 3D sound, to interactive music, DSP effects and low-level
    audio programming.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**特点**：它功能齐全，涵盖了从简单的音频播放、流式传输和3D音效到交互式音乐、DSP效果和低级音频编程的一切。'
- en: Installing FMOD Ex Programmer's API
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装FMOD Ex程序员API
- en: 'Installing a C++ library can be a bit daunting at first. The good side is that
    once you have done it for the first time, the process is usually the same for
    every other library. Here are the steps that you should follow if you are using
    Microsoft Visual Studio:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 首次安装C++库可能有点令人生畏。好的一面是，一旦你第一次完成了这个过程，对于其他库来说，通常过程是一样的。如果你使用的是Microsoft Visual
    Studio，你应该遂循以下步骤：
- en: Download the FMOD Ex Programmer's API from [http://www.fmod.org](http://www.fmod.org)
    and install it to a folder that you can remember, such as `C:\FMOD`.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[http://www.fmod.org](http://www.fmod.org)下载FMOD Ex程序员API并将其安装到一个你可以记住的文件夹，比如`C:\FMOD`。
- en: Create a new empty project, and add at least one `.cpp` file to it. Then, right-click
    on the project node on the **Solution Explorer**, and select **Properties** from
    the list. For all the steps that follow, make sure that the **Configuration**
    option is set to **All Configurations**.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的空项目，并至少向其中添加一个`.cpp`文件。然后，在**解决方案资源管理器**上右键单击项目节点，并从列表中选择**属性**。对于接下来的所有步骤，请确保**配置**选项设置为**所有配置**。
- en: Navigate to **C/C++** | **General**, and add `C:\FMOD\api\inc` to the list of
    **Additional Include Directories** (entries are separated by semicolons).
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**C/C++** | **常规**，并将`C:\FMOD\api\inc`添加到**附加包含目录**列表中（条目用分号分隔）。
- en: Navigate to **Linker** | **General**, and add `C:\FMOD\api\lib` to the list
    of **Additional Library Directories**.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**链接器** | **常规**，并将`C:\FMOD\api\lib`添加到**附加库目录**列表中。
- en: Navigate to **Linker** | **Input**, and add `fmodex_vc.lib` to the list of **Additional
    Dependencies**.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**链接器** | **输入**，并将`fmodex_vc.lib`添加到**附加依赖项**列表中。
- en: Navigate to **Build Events** | **Post-Build Event**, and add `xcopy /y "C:\FMOD\api\fmodex.dll"
    "$(OutDir)"` to the **Command Lin****e** list.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**生成事件** | **后期生成事件**，并将`xcopy /y "C:\FMOD\api\fmodex.dll" "$(OutDir)"`添加到**命令行**列表中。
- en: Include the `<fmod.hpp>` header file from your code.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的代码中包含`<fmod.hpp>`头文件。
- en: Creating and managing the audio system
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和管理音频系统
- en: 'Everything that happens inside FMOD is managed by a class named `FMOD::System`,
    which we must start by instantiating with the `FMOD::Syste` `m_Create()` function:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: FMOD内发生的一切都由一个名为`FMOD::System`的类管理，我们必须通过`FMOD::System`的`m_Create()`函数实例化它：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Notice that the function returns the `system` object through a parameter. You
    will see this pattern every time one of the FMOD functions needs to return a value,
    because they all reserve the regular return value for an error code. We will discuss
    error checking in a bit, but for now let us get the audio engine up and running.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，该函数通过参数返回`system`对象。每当FMOD函数需要返回一个值时，您都会看到这种模式，因为它们都将常规返回值保留给错误代码。我们将在稍后讨论错误检查，但现在让我们让音频引擎运行起来。
- en: 'Now that we have a `system` object instantiated, we also need to initialize
    it by calling the `init()` method:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经实例化了一个`system`对象，我们还需要通过调用`init()`方法来初始化它：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The first parameter specifies the maximum number of channels to allocate. This
    controls how many sounds you are able to play simultaneously. You can choose any
    number for this parameter because the system performs some clever priority management
    behind the scenes and distributes the channels using the available resources.
    The second and third parameters customize the initialization process, and you
    can usually leave them as shown in the example.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数指定要分配的最大通道数。这控制了您能够同时播放多少个声音。您可以为此参数选择任何数字，因为系统在幕后执行一些聪明的优先级管理，并使用可用资源分配通道。第二个和第三个参数自定义了初始化过程，通常可以将它们保留为示例中所示。
- en: 'Many features that we will use work properly only if we update the `system`
    object every frame. This is done by calling the `update()` method from inside
    your game loop:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用的许多功能只有在每帧更新`system`对象时才能正常工作。这是通过在游戏循环内调用`update()`方法来完成的：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You should also remember to shutdown the `system` object before your game ends,
    so that it can dispose of all resources. This is done by calling the `release()`
    method:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您还应该记住在游戏结束之前关闭`system`对象，以便它可以处理所有资源。这是通过调用`release()`方法来完成的：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Loading and streaming audio files
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载和流式传输音频文件
- en: 'One of the greatest things about FMOD is that you can load virtually any audio
    file format with a single method call. To load an audio file into memory, use
    the `createSound()` method:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: FMOD最伟大的一点是，你可以用一个方法调用加载几乎任何音频文件格式。要将音频文件加载到内存中，请使用`createSound()`方法：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To stream an audio file from disk without having to store it in memory, use
    the `createStream()` method:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要从磁盘流式传输音频文件而无需将其存储在内存中，请使用`createStream()`方法：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Both methods take the path of the audio file as the first parameter, and return
    a pointer to an `FMOD::Sound` object through the fourth parameter, which you can
    use to play the sound. The paths in the previous examples are relative to the
    application path. If you are running these examples in Visual Studio, make sure
    that you copy the audio files into the output folder (for example, using a post-build
    event such as `xcopy /y "$(ProjectDir)*.ogg" "$(OutDir)"`).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种方法都将音频文件的路径作为第一个参数，并通过第四个参数返回一个指向`FMOD::Sound`对象的指针，您可以使用它来播放声音。以前示例中的路径是相对于应用程序路径的。如果您在Visual
    Studio中运行这些示例，请确保将音频文件复制到输出文件夹中（例如，使用后期构建事件，如`xcopy /y "$(ProjectDir)*.ogg" "$(OutDir)"`）。
- en: The choice between loading and streaming is mostly a tradeoff between memory
    and processing power. When you load an audio file, all of its data is uncompressed
    and stored in memory, which can take up a lot of space, but the computer can play
    it without much effort. Streaming, on the other hand, barely uses any memory,
    but the computer has to access the disk constantly, and decode the audio data
    on the fly. Another difference (in FMOD at least) is that when you stream a sound,
    you can only have one instance of it playing at any time. This limitation exists
    because there is only one decode buffer per stream. Therefore, for sound effects
    that have to be played multiple times simultaneously, you have to either load
    them into memory, or open multiple concurrent streams. As a rule of thumb, streaming
    is great for music tracks, voice cues, and ambient tracks, while most sound effects
    should be loaded into memory.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 加载和流式传输之间的选择主要是内存和处理能力之间的权衡。当您加载音频文件时，所有数据都会被解压缩并存储在内存中，这可能会占用大量空间，但计算机可以轻松播放它。另一方面，流式传输几乎不使用任何内存，但计算机必须不断访问磁盘，并即时解码音频数据。另一个区别（至少在FMOD中）是，当您流式传输声音时，您一次只能播放一个实例。这种限制存在是因为每个流只有一个解码缓冲区。因此，对于必须同时播放多次的音效，您必须将它们加载到内存中，或者打开多个并发流。作为一个经验法则，流式传输非常适合音乐曲目、语音提示和环境曲目，而大多数音效应该加载到内存中。
- en: 'The second and third parameters allow us to customize the behavior of the sound.
    There are many different options available, but the following list summarizes
    the ones we will be using the most. Using `FMOD_DEFAULT` is equivalent to combining
    the first option of each of these categories:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个和第三个参数允许我们自定义声音的行为。有许多不同的选项可用，但以下列表总结了我们将要使用最多的选项。使用`FMOD_DEFAULT`等同于组合每个类别的第一个选项：
- en: '`FMOD_LOOP_OFF` and `FMOD_LOOP_NORMAL`: These modes control whether the sound
    should only play once, or loop once it reaches the end'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FMOD_LOOP_OFF`和`FMOD_LOOP_NORMAL`：这些模式控制声音是否应该只播放一次，或者在达到结尾时循环播放'
- en: '`FMOD_HARDWARE` and `FMOD_SOFTWARE`: These modes control whether the sound
    should be mixed in hardware (better performance) or software (more features)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FMOD_HARDWARE`和`FMOD_SOFTWARE`：这些模式控制声音是否应该在硬件中混合（性能更好）或软件中混合（更多功能）'
- en: '`FMOD_2D` and `FMOD_3D`: These modes control whether to use 3D sound'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FMOD_2D`和`FMOD_3D`：这些模式控制是否使用3D声音'
- en: We can combine multiple modes using the bitwise `OR` operator (for instance,
    `FMOD_DEFAULT | FMOD_LOOP_NORMAL | FMOD_SOFTWARE`). We can also tell the system
    to stream a sound even when we are using the `createSound()` method, by setting
    the `FMOD_CREATESTREAM` flag. In fact, the `createStream()` method is simply a
    shortcut for this.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用按位`OR`运算符组合多个模式（例如，`FMOD_DEFAULT | FMOD_LOOP_NORMAL | FMOD_SOFTWARE`）。我们还可以告诉系统在使用`createSound()`方法时流式传输声音，通过设置`FMOD_CREATESTREAM`标志。实际上，`createStream()`方法只是这样做的一个快捷方式。
- en: When we do not need a sound anymore (or at the end of the game) we should dispose
    of it by calling the `release()` method of the sound object. We should always
    release the sounds we create, regardless of the audio system also being released.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们不再需要声音（或者游戏结束时），我们应该通过调用声音对象的`release()`方法来处理它。无论音频系统是否也被释放，我们都应该释放我们创建的声音。
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Playing sounds
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 播放声音
- en: 'With the sounds loaded into memory or prepared for streaming, all that is left
    is telling the system to play them using the `playSound()` method:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 将声音加载到内存中或准备好进行流式传输后，剩下的就是告诉系统使用`playSound()`方法来播放它们：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The first parameter selects in which channel the sound will play. You should
    usually let FMOD handle it automatically, by passing `FMOD_CHANNEL_FREE` as the
    parameter.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数选择声音将在哪个通道播放。通常应该让FMOD自动处理，通过将`FMOD_CHANNEL_FREE`作为参数传递。
- en: The second parameter is a pointer to the `FMOD::Sound` object that you want
    to play.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个参数是指向要播放的`FMOD::Sound`对象的指针。
- en: The third parameter controls whether the sound should start in a paused state,
    giving you a chance to modify some of its properties without the changes being
    audible. If you set this to true, you will also need to use the next parameter
    so that you can unpause it later.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个参数控制声音是否应该在暂停状态下开始，让您有机会修改一些属性，而这些更改不会被听到。如果您将其设置为true，您还需要使用下一个参数，以便稍后取消暂停。
- en: The fourth parameter is an output parameter that returns a pointer to the `FMOD::Channel`
    object in which the sound will play. You can use this handle to control the sound
    in multiple ways, which will be the main topic of the next chapter.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 第四个参数是一个输出参数，返回`FMOD::Channel`对象的指针，声音将在其中播放。您可以使用此句柄以多种方式控制声音，这将是下一章的主要内容。
- en: You can ignore this last parameter if you do not need any control over the sound,
    and simply pass in `0` in its place. This can be useful for non-lopping one-shot
    sounds.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不需要对声音进行任何控制，可以忽略最后一个参数，并在其位置传递`0`。这对于非循环的一次性声音很有用。
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Checking for errors
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查错误
- en: So far, we have assumed that every operation will always work without errors.
    However, in a real scenario, there is room for a lot to go wrong. For example,
    we could try to load an audio file that does not exist.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们假设每个操作都会顺利进行，没有错误。然而，在实际情况下，有很多事情可能会出错。例如，我们可能会尝试加载一个不存在的音频文件。
- en: 'In order to report errors, every function and method in FMOD has a return value
    of type `FMOD_RESULT`, which will only be equal to `FMOD_OK` if everything went
    right. It is up to the user to check this value and react accordingly:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了报告错误，FMOD中的每个函数和方法都有一个`FMOD_RESULT`类型的返回值，只有当一切顺利时才会等于`FMOD_OK`。用户需要检查这个值并做出相应的反应：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: For starters, it would be useful to know what the error was. However, since
    `FMOD_RESULT` is an enumeration, you will only see a number if you try to print
    it. Fortunately, there is a function called `FMOD_ErrorString()` inside the `fmod_errors.h`
    header file which will give you a complete description of the error.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，了解错误是什么将是有用的。然而，由于`FMOD_RESULT`是一个枚举，如果尝试打印它，您只会看到一个数字。幸运的是，在`fmod_errors.h`头文件中有一个名为`FMOD_ErrorString()`的函数，它将为您提供完整的错误描述。
- en: 'You might also want to create a helper function to simplify the error checking
    process. For instance, the following function will check for errors, print a description
    of the error to the standard output, and exit the application:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还想创建一个辅助函数来简化错误检查过程。例如，以下函数将检查错误，将错误描述打印到标准输出，并退出应用程序：
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You could then use that function to check for any critical errors that should
    cause the application to abort:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以使用该函数来检查是否有任何应该导致应用程序中止的关键错误：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The initialization process described earlier also assumes that everything will
    go as planned, but a real game should be prepared to deal with any errors. Fortunately,
    there is a template provided in the FMOD documentation which shows you how to
    write a robust initialization sequence. It is a bit long to cover here, so I urge
    you to refer to the file named `Getting started with FMOD for Windows.pdf` inside
    the documentation folder for more information.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 前面描述的初始化过程也假设一切都会按计划进行，但真正的游戏应该准备好处理任何错误。幸运的是，FMOD文档中提供了一个模板，向您展示如何编写健壮的初始化序列。这里涵盖的内容有点长，所以我建议您参考文档文件夹中名为`Getting
    started with FMOD for Windows.pdf`的文件，以获取更多信息。
- en: For clarity, all of the code examples will continue to be presented without
    error checking, but you should always check for errors in a real project.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为了清晰起见，所有的代码示例将继续在没有错误检查的情况下呈现，但在实际项目中，你应该始终检查错误。
- en: Project 1 – building a simple audio manager
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目1 - 构建一个简单的音频管理器
- en: In this project, we will be creating a `SimpleAudioManager` class that combines
    everything that was covered in this chapter. Creating a wrapper for an underlying
    system that only exposes the operations that we need is known as the **façade
    design pattern**, and is very useful in order to keep things nice and simple.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将创建一个`SimpleAudioManager`类，它结合了本章涵盖的所有内容。创建一个仅公开我们需要的操作的底层系统的包装器被称为**外观设计模式**，在保持事情简单的同时非常有用。
- en: Since we have not seen how to manipulate sound yet, do not expect this class
    to be powerful enough to be used in a complex game. Its main purpose will be to
    let you load and play one-shot sound effects with very little code (which could
    in fact be enough for very simple games).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们还没有看到如何操作声音，不要指望这个类足够强大，可以用于复杂的游戏。它的主要目的将是让你用非常少的代码加载和播放一次性音效（实际上对于非常简单的游戏可能已经足够了）。
- en: 'It will also free you from the responsibility of dealing with sound objects
    directly (and having to release them) by allowing you to refer to any loaded sound
    by its filename. The following is an example of how to use the class:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 它还会让你摆脱直接处理声音对象（并且需要释放它们）的责任，通过允许你通过文件名引用任何加载的声音。以下是如何使用该类的示例：
- en: '[PRE12]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: From an educational point of view, what is perhaps even more important is that
    you use this exercise as a way to get some ideas on how to adapt the technology
    to your needs. It will also form the basis of the next chapters in the book, where
    we will build systems that are more complex.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 从教育角度来看，也许更重要的是，你可以将这个练习作为一种获取一些关于如何调整技术以满足你需求的想法的方式。它还将成为本书后续章节的基础，我们将构建更复杂的系统。
- en: Class definition
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类定义
- en: 'Let us start by examining the class definition:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从检查类定义开始：
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'From browsing through the list of public class members, it should be easy to
    deduce what it is capable of doing:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 通过浏览公共类成员列表，应该很容易推断它能做什么：
- en: The class can load audio files (given a path) using the `Load()` method
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该类可以使用`Load()`方法加载音频文件（给定路径）
- en: The class can stream audio files (given a path) using the `Stream()` method
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该类可以使用`Stream()`方法流式传输音频文件（给定路径）
- en: The class can play audio files (given a path) using the `Play()` method (granted
    that they have been previously loaded or streamed)
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该类可以使用`Play()`方法播放音频文件（前提是它们已经被加载或流式传输）
- en: There is also an `Update()` method and a constructor/destructor pair to manage
    the sound system
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还有一个`Update()`方法和一个构造函数/析构函数对来管理声音系统
- en: 'The private class members, on the other hand, can tell us a lot about the inner
    workings of the class:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，私有类成员可以告诉我们很多关于类内部工作的信息：
- en: At the core of the class is an instance of `FMOD::System` responsible for driving
    the entire sound engine. The class initializes the sound system on the constructor,
    and releases it on the destructor.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该类的核心是一个`FMOD::System`实例，负责驱动整个声音引擎。该类在构造函数中初始化声音系统，并在析构函数中释放它。
- en: Sounds are stored inside an associative container, which allows us to search
    for a sound given its file path. For this purpose, we will be relying on one of
    the C++ **Standard Template Library** (**STL**) associative containers, the `std::map`
    class, as well as the `std::string` class for storing the keys. Looking up a string
    key is a bit inefficient (compared to an integer, for example), but it should
    be fast enough for our needs. An advantage of having all the sounds stored on
    a single container is that we can easily iterate over them and release them from
    the class destructor.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声音存储在一个关联容器中，这允许我们根据文件路径搜索声音。为此，我们将依赖于C++标准模板库（STL）关联容器之一，`std::map`类，以及用于存储键的`std::string`类。查找字符串键有点低效（例如与整数相比），但对于我们的需求来说应该足够快。将所有声音存储在单个容器中的优势是我们可以轻松地遍历它们并从类析构函数中释放它们。
- en: Since the code for loading and streaming audio file is almost the same, the
    common functionality has been extracted into a private method called `LoadOrStream()`,
    to which `Load()` and `Stream()` delegate all of the work. This prevents us from
    repeating the code needlessly.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于加载和流式传输音频文件的代码几乎相同，公共功能已经被提取到一个名为`LoadOrStream()`的私有方法中，`Load()`和`Stream()`将所有工作委托给它。这样可以避免不必要地重复代码。
- en: Initialization and destruction
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始化和销毁
- en: Now, let us walk through the implementation of each of these methods. First
    we have the class constructor, which is extremely simple, as the only thing that
    it needs to do is initialize the `system` object.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们逐一实现每个方法。首先是类构造函数，非常简单，因为它唯一需要做的就是初始化`system`对象。
- en: '[PRE14]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Updating is even simpler, consisting of a single method call:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 更新更简单，只需要一个方法调用：
- en: '[PRE15]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The destructor, on the other hand, needs to take care of releasing the `system`
    object, as well as all the sound objects that were created. This process is not
    that complicated though. First, we iterate over the map of sounds, releasing each
    one in turn, and clearing the map at the end. The syntax might seem a bit strange
    if you have never used an STL iterator before, but all that it means is to start
    at the beginning of the container, and keep advancing until we reach its end.
    Then we finish off by releasing the `system` object as usual.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，析构函数需要负责释放`system`对象，以及创建的所有声音对象。不过，这个过程并不复杂。首先，我们遍历声音的映射，依次释放每一个，并在最后清除映射。如果你以前从未使用过STL迭代器，语法可能会显得有点奇怪，但它的意思只是从容器的开头开始，不断前进直到达到末尾。然后我们像往常一样释放`system`对象。
- en: '[PRE16]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Loading or streaming sounds
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载或流式传输声音
- en: Next in line are the `Load()` and `Stream()` methods, but let us examine the
    private `LoadOrStream()` method first. This method takes the path of the audio
    file as a parameter, and checks if it has already been loaded (by querying the
    sound map). If the sound has already been loaded there is no need to do it again,
    so the method returns. Otherwise, the file is loaded (or streamed, depending on
    the value of the second parameter) and stored in the sound map under the appropriate
    key.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是`Load()`和`Stream()`方法，但让我们先来看一下私有的`LoadOrStream()`方法。这个方法以音频文件的路径作为参数，并检查它是否已经被加载（通过查询声音映射）。如果声音已经被加载，就没有必要再次加载，所以该方法返回。否则，文件将被加载（或流式传输，取决于第二个参数的值），并存储在声音映射中的适当键下。
- en: '[PRE17]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'With the previous method in place, both the `Load()` and the `Stream()` methods
    can be trivially implemented as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 有了前面的方法，`Load()`和`Stream()`方法可以轻松实现如下：
- en: '[PRE18]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Playing sounds
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 播放声音
- en: Finally, there is the `Play()` method, which works the other way around. It
    starts by checking if the sound has already been loaded, and does nothing if the
    sound is not found on the map. Otherwise, the sound is played using the default
    parameters.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，还有`Play()`方法，它的工作方式相反。它首先检查声音是否已经加载，如果在地图上找不到声音，则不执行任何操作。否则，使用默认参数播放声音。
- en: '[PRE19]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We could have tried to automatically load the sound in the case when it was
    not found. In general, this is not a good idea, because loading a sound is a costly
    operation, and we do not want that happening during a critical gameplay section
    where it could slow the game down. Instead, we should stick to having separate
    load and play operations.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们本可以尝试在找不到声音时自动加载声音。一般来说，这不是一个好主意，因为加载声音是一个昂贵的操作，我们不希望在关键的游戏过程中发生这种情况，因为这可能会减慢游戏速度。相反，我们应该坚持分开加载和播放操作。
- en: A note about the code samples
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于代码示例的说明
- en: Although this is a book about audio, all the samples need an environment to
    run on. In order to keep the audio portion of the samples as clear as possible,
    we will also be using the **Simple and Fast Multimedia Library 2.0** (**SFML**)
    ([http://www.sfml-dev.org](http://www.sfml-dev.org)). This library can very easily
    take care of all the miscellaneous tasks, such as window creation, timing, graphics,
    and user input, which you will find in any game.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这是一本关于音频的书，但所有示例都需要一个运行环境。为了尽可能清晰地保持示例的音频部分，我们还将使用**Simple and Fast Multimedia
    Library 2.0**（SFML）（[http://www.sfml-dev.org](http://www.sfml-dev.org)）。这个库可以非常容易地处理所有杂项任务，比如窗口创建、定时、图形和用户输入，这些任务在任何游戏中都会找到。
- en: For example, here is a complete sample using SFML and the `SimpleAudioManager`
    class. It creates a new window, loads a sound, runs a game loop at 60 frames per
    second, and plays the sound whenever the user presses the space key.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这里有一个使用SFML和`SimpleAudioManager`类的完整示例。它创建一个新窗口，加载一个声音，以60帧每秒的速度运行游戏循环，并在用户按下空格键时播放声音。
- en: '[PRE20]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Summary
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have seen some of the advantages of using the FMOD audio
    engine. We saw how to install the FMOD Ex Programmer's API in Visual Studio, how
    to initialize, manage, and release the FMOD sound system, how to load or stream
    an audio file of any type from disk, how to play a sound that has been previously
    loaded by FMOD, how to check for errors in every FMOD function, and how to create
    a simple audio manager that encapsulates the act of loading and playing audio
    files behind a simple interface.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经看到了使用FMOD音频引擎的一些优势。我们看到了如何在Visual Studio中安装FMOD Ex程序员API，如何初始化、管理和释放FMOD音频系统，如何从磁盘加载或流式传输任何类型的音频文件，如何播放先前由FMOD加载的声音，如何检查每个FMOD函数中的错误，以及如何创建一个简单的音频管理器，它封装了加载和播放音频文件的操作背后的简单接口。
