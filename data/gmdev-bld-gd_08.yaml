- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Adding Sound Assets
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加声音资产
- en: Sound is often the most neglected part of game projects. While creating visual
    assets may seem hard to do, a lot of us still tackle it because we get quick and
    reliable feedback, however, most people don’t even know where to start when it
    comes to producing sound assets. Luckily, there are royalty-free assets out there
    that you can use.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 声音往往是游戏项目中最被忽视的部分。虽然创建视觉资产可能看起来很难，但很多人仍然会尝试，因为我们能快速可靠地获得反馈，然而，当涉及到制作声音资产时，大多数人甚至不知道从何开始。幸运的是，有一些免费的声音资产可以使用。
- en: This chapter will not cover how to make sound assets but how to import them
    into your game. We will focus on some of the technical aspects of sound management
    in Godot. This involves learning about the different sound formats the engine
    supports. Picking the appropriate sound format is no different than ironing out
    a topology for a 3D model for animation. Choose wisely and, even better, know
    the benefits and limitations of each format.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章不会介绍如何制作声音资产，而是介绍如何将它们导入到你的游戏中。我们将关注Godot中声音管理的某些技术方面。这涉及到了解引擎支持的不同声音格式。选择合适的声音格式与为动画拓扑整理3D模型并无不同。明智地选择，并且最好了解每种格式的优缺点。
- en: Next, you will learn when and how some sound assets should be looped. We’ll
    investigate the import options for different sound types and mention format-specific
    differences. We’ll also discuss scenarios where it makes sense to have your sound
    assets looped.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将学习何时以及如何循环某些声音资产。我们将探讨不同声音类型的导入选项，并提及格式特定的差异。我们还将讨论在哪些情况下循环声音资产是有意义的。
- en: Lastly, we’ll get to know different types of Godot nodes that are responsible
    for playing sound assets in your scenes. This way, you can pick the appropriate
    audio player node for your project. To finish off, we’ll play some sample sound
    assets to show the differences between these different nodes.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将了解在场景中播放声音资产的不同类型的Godot节点。这样，你可以为你的项目选择合适的音频播放节点。最后，我们将播放一些示例声音资产，以展示这些不同节点之间的差异。
- en: Needless to say, to make the best of this chapter, you may want to be in a quiet
    place where you can practice some of the topics, especially in the later sections
    of this chapter.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 不言而喻，为了充分利用本章内容，你可能需要在安静的地方练习一些主题，尤其是在本章的后期部分。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Learning about different sound formats
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解不同的声音格式
- en: Deciding on looping or not
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 决定是否循环
- en: Playing audio in Godot
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Godot中播放音频
- en: By the end of this chapter, you’ll know how to import sound assets, choose which
    file type is correct, configure their settings, and play them in your project
    automatically or when it’s needed.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将知道如何导入声音资产，选择正确的文件类型，配置它们的设置，并在你的项目中自动或需要时播放它们。
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Unlike the other chapters, instead of a `Finish` folder with individual assets,
    we’ll give you the finished Godot project with all the scenes and scripts set
    up. Nevertheless, we would like you to practice but focus solely on the topics
    presented in this chapter. Thus, we suggest you start with a clean slate, import
    the sound files from the `Start` folder, and follow along. Following tradition,
    the necessary resources can be found in this book’s GitHub repository: [https://github.com/PacktPublishing/Game-Development-with-Blender-and-Godot](https://github.com/PacktPublishing/Game-Development-with-Blender-and-Godot).'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他章节不同，我们不会提供一个包含单个资产的`Finish`文件夹，而是会提供一个包含所有场景和脚本设置的完成后的Godot项目。尽管如此，我们仍然希望你们练习，但仅关注本章中提出的话题。因此，我们建议你们从一张白纸开始，从`Start`文件夹中导入声音文件，并跟随操作。按照惯例，必要的资源可以在本书的GitHub仓库中找到：[https://github.com/PacktPublishing/Game-Development-with-Blender-and-Godot](https://github.com/PacktPublishing/Game-Development-with-Blender-and-Godot)。
- en: Learning about different sound formats
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解不同的声音格式
- en: Sound files come in different formats, just like graphics files can come in
    different formats including JPG, GIF, PNG, and others. The industry, and sometimes
    the consumers, define the fate of these formats. Let’s place the consumers in
    the right context here. Occasionally, the specifications laid out by the creator
    of a file format are not welcome by the people who are using this very format
    to produce the work. Then, the work is created but not accepted by the platforms
    that would disperse such content due to technical reasons. It’s almost like a
    tug of war where the inconvenience or the cost of maintaining a file type outweighs
    the benefits and the ease of use. At these times, we tend to hear about newer
    formats, hence there being a multitude of file formats out there.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 音频文件有不同的格式，就像图形文件可以有不同的格式，包括 JPG、GIF、PNG 等等。行业，有时甚至是消费者，决定了这些格式的命运。让我们在这里将消费者放在正确的背景下。偶尔，文件格式创造者提出的规范并不被使用该格式制作作品的用户所欢迎。然后，作品虽然被创作出来，但由于技术原因，无法被用于分发此类内容的平台所接受。这几乎就像一场拔河比赛，维护文件类型的麻烦或成本超过了其带来的好处和易用性。在这些时候，我们往往会听到关于新格式的消息，这就是为什么存在众多文件格式的原因。
- en: Most of the time, this kind of technical layer is not visible to an end user,
    especially if they are only perusing the content, such as listening to music on
    Spotify or YouTube. However, since we are building a game, even though we are
    not too concerned about the production of such assets, we should still be knowledgeable
    on this topic since we’d like to pick the most appropriate file format for a certain
    scenario.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数时候，这种技术层对最终用户来说是不可见的，尤其是如果他们只是浏览内容，比如在 Spotify 或 YouTube 上听音乐。然而，既然我们正在制作一款游戏，尽管我们不太关心这些资产的生产，但我们仍然应该对这个主题有所了解，因为我们想为特定场景选择最合适的文件格式。
- en: Distinguishing what sound means
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 区分“声音”的含义
- en: This is a note on what we mean by sound. We’ll be using the word sound or audio,
    in this chapter and the rest of this book, to cover all possible scenarios, such
    as the feedback you get when you interact with UI elements, when a player character
    is notified by an in-game event, or ambient music.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个关于我们所说的“声音”的说明。在本章和本书的其余部分，我们将使用“声音”或“音频”这个词来涵盖所有可能的场景，比如与 UI 元素交互时获得的反馈，当玩家角色被游戏内事件通知时，或者环境音乐。
- en: The version of Godot, 3.4.4, that this book is covering currently supports three
    different audio file formats. Each has different advantages and limitations. Although
    converting these files into each other is possible, after we present their formal
    definitions, perhaps you’ll decide not to.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 目前这本书所涵盖的 Godot 版本 3.4.4 支持三种不同的音频文件格式。每种格式都有不同的优点和局限性。尽管可以将这些文件相互转换，但我们在介绍它们的正式定义后，你可能决定不这么做。
- en: Introducing WAV
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍 WAV
- en: Pronounced *wave*, WAV files have been around since the early 90s. It’s the
    short form of Wavefront Audio File Format, a file specification created by IBM
    and Microsoft. This is a popular format among music and audio professionals, despite
    being uncompressed since it retains the quality of a sound recording. Thanks to
    the improvements in file storage capacity and internet speed, the high file size
    doesn’t seem to be a big issue anymore.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 发音为 *wave* 的 WAV 文件自 90 年代初以来一直存在。它是 Wavefront Audio File Format 的简称，这是一种由 IBM
    和微软创建的文件规范。这是音乐和音频专业人士中流行的格式，尽管它是不压缩的，因为它保留了声音记录的质量。多亏了文件存储容量和互联网速度的改进，高文件大小似乎不再是太大的问题。
- en: On the limitation side, as far as technical aspects go, a WAV file can’t exceed
    4 GB. However, this should not be a concern because that number is equivalent
    to almost 7 hours of audio. It is extremely unlikely there will be one audio file
    in any video game of that size.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在局限性方面，从技术角度来看，WAV 文件不能超过 4 GB。然而，这不应该成为问题，因为这个数字相当于近 7 小时的音频。在任何一个视频游戏中，几乎不可能有一个这么大的音频文件。
- en: So, why should you choose this format? Since it’s an uncompressed file type,
    the CPU that is also responsible for processing a sound file will have an easier
    time playing it. A likely scenario for using this file type is for sound effects.
    Usually, these effects are short-lived, such as the creaking of a door, the swing
    of a sword, and so on. The file size won’t matter that much because the duration
    will be short.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，为什么你应该选择这种格式呢？由于它是一种不压缩的文件类型，负责处理音频文件的 CPU 将更容易播放它。使用这种文件类型的一个可能场景是音效。通常，这些效果是短暂的，比如门的吱嘎声，剑的挥舞声等等。文件大小不会太重要，因为持续时间会很短。
- en: Conversely, this is not the best format for background music. Sure, there won’t
    be any need to decompress the file to be able to play it, but the file size will
    be significantly larger.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，这也不是背景音乐的最佳格式。当然，你不需要解压缩文件就能播放它，但文件大小将显著更大。
- en: In summary, if you want a quick reaction and would rather have a sound file
    play as quickly as possible, such as effects, then this is the right format for
    you. After all, you wouldn’t want the CPU to be dealing with the decompression
    of an effect file while your game characters are busy with the next chain of events.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，如果你想快速反应，并且希望音效文件尽可能快地播放，比如效果，那么这是适合你的格式。毕竟，你不想在游戏角色忙于处理下一连串事件的同时，CPU 还在处理效果文件的解压缩。
- en: If you are willing to sacrifice a few hundred milliseconds to wait for a decompression,
    such as when not having the background music play instantly is a big deal, then
    you can opt for compressed file types. These come in two different flavors.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你愿意牺牲几百毫秒来等待解压缩，比如当背景音乐不能立即播放是一个大问题时，那么你可以选择压缩文件类型。这些文件类型有两种不同的风味。
- en: Introducing OGG
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍 OGG
- en: We should start by clarifying this format since the name could be confusing
    if you come across some resources on the internet. Technically, OGG is a container
    file format that can hold file types such as audio, video, text, and metadata.
    Its developer and maintainer, *Xiph*, is also responsible for another audio file
    format known as **Free Lossless Audio Codec** (**FLAC**). So, according to OGG
    specifications, a FLAC could be part of an OGG file. Historically speaking, most
    OGG files out there have contained a different audio file format known as Vorbis.
    So, you may find some websites with Vorbis content that are essentially complying
    with the OGG format’s specifications.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该首先澄清这个格式，因为如果你在网上遇到一些资源，名称可能会令人困惑。技术上讲，OGG 是一种容器文件格式，可以容纳音频、视频、文本和元数据等文件类型。其开发者和维护者
    *Xiph* 还负责另一种名为 **Free Lossless Audio Codec** （**FLAC**）的音频文件格式。因此，根据 OGG 规范，FLAC
    可以是 OGG 文件的一部分。从历史的角度来看，大多数 OGG 文件都包含另一种名为 Vorbis 的不同音频文件格式。因此，你可能会发现一些提供 Vorbis
    内容的网站实际上是在遵守 OGG 格式规范。
- en: Here is an example to simplify all these names and how they relate to each other.
    Consider OGG as a ZIP file that knows what to do with its content. An OGG file
    carrying a video and a subtitle file will trigger the necessary settings in a
    video player so that the player knows where to find the subtitles since they will
    be embedded in one file. Similarly, another OGG file with an audio and metadata
    file will command an audio player to display the album and track, record, and
    play the audio.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个示例来简化所有这些名称以及它们之间的关系。将 OGG 视为一个知道如何处理其内容的 ZIP 文件。一个携带视频和字幕文件的 OGG 文件将触发视频播放器中的必要设置，以便播放器知道在哪里找到字幕，因为它们将嵌入在一个文件中。同样，另一个携带音频和元数据文件的
    OGG 文件将指示音频播放器显示专辑和曲目、记录和播放音频。
- en: 'Since the format is not just one thing, but rather a set of files, it is often
    confusing to associate a specific need with one file extension. For example, the
    `.ogg` extension was used before 2007 as a multimedia holder as that was its original
    intention. Since then, Xiph suggests we use the `.ogg` extension for Vorbis audio
    files. Additionally, the company has created a new set of file extensions to simplify
    things:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 由于格式不仅仅是一件事，而是一组文件，因此将特定需求与一个文件扩展名关联起来常常令人困惑。例如，`.ogg` 扩展名在 2007 年之前被用作多媒体容器，因为这是它的原始意图。从那时起，Xiph
    建议我们使用 `.ogg` 扩展名来表示 Vorbis 音频文件。此外，该公司创建了一套新的文件扩展名以简化事物：
- en: '`.oga` for audio-only files'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.oga` 用于仅音频文件'
- en: '`.ogv` for video'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.ogv` 用于视频'
- en: '`.ogx` for multiplexed cases'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.ogx` 用于复用情况'
- en: Despite the naming conundrum, what you need to know is that the OGG audio format
    is compressed, so it’s a lossy file format. Lossy in our context means that we
    could attain almost the same sound quality by requiring less hard disk space.
    So, this is a good thing because this file format is a perfect fit for playing
    background music. Keep in mind that since the CPU has to decompress this file
    type, this is not the preferred format for playing quick sound effects.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管存在命名难题，但你需要知道的是，OGG 音频格式是压缩的，因此它是一个有损文件格式。在我们的语境中，“有损”意味着我们可以通过要求更少的硬盘空间来获得几乎相同的声音质量。所以，这是一件好事，因为这个文件格式非常适合播放背景音乐。记住，由于
    CPU 必须解压缩这种文件类型，因此这不是播放快速音效的首选格式。
- en: Speaking of a lossy file format, our next candidate is another lossy file format
    that gained some notoriety in the early 2000s.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 说到有损文件格式，我们的下一个候选者是有损文件格式，它在2000年代初获得了一些恶名。
- en: Introducing MP3
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍MP3
- en: When internet speed and disk storage were at a premium in the late 90s, MP3
    filled an important gap in transferring audio content just when a big audience
    needed it at the turn of the millennium. Consumers flocked to websites to download
    copies of the tracks from their favorite bands. Sadly, so many of these websites
    did not bother to have a legal license to distribute such content, so this led
    to copyright infringements and, in the case of Napster, a lawsuit.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在20世纪90年代末，互联网速度和磁盘存储非常昂贵的时候，MP3在转移音频内容方面填补了一个重要的空白，正好在千禧年之交，大量受众需要它。消费者纷纷涌向网站下载他们最喜欢的乐队的曲目副本。遗憾的是，许多这些网站没有麻烦去获得分发此类内容的合法许可，这导致了版权侵权，在Napster的情况下，甚至引发了诉讼。
- en: From a technical standpoint, MP3 files are somewhere in between WAV and OGG,
    compression-wise. So, you’ll get smaller file sizes in OGG for the same quality
    of sound. That being said, decompressing an MP3 file is faster than decompressing
    an OGG. Hence, this makes the MP3 format still useful, especially where CPUs are
    challenged to the maximum, such as in mobile devices.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术角度来看，MP3文件在WAV和OGG之间，在压缩方面处于中间位置。因此，对于相同音质，OGG文件的大小会更小。话虽如此，解压缩MP3文件比解压缩OGG文件要快。因此，这使得MP3格式仍然有用，尤其是在CPU承受最大压力的地方，比如在移动设备上。
- en: Despite disk space getting cheaper and cheaper, from a business point of view,
    it still makes sense to prioritize WAV over MP3\. For example, some websites that
    offer royalty-free sound files provide the MP3 version but put the WAV version
    of a sound behind a paywall. Since an MP3 file has already lost some of the original
    data due to its compression algorithm, editing with this file over and over will
    yield more lossy results. So, having access to the original WAV file is always
    better if you want to make modifications to it. However, if you don’t need to,
    then you might be fine with an MP3 version.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管磁盘空间越来越便宜，但从商业角度来看，仍然有优先考虑WAV而不是MP3的合理性。例如，一些提供免版税音效文件的网站提供MP3版本，但将WAV版本的音效放在付费墙后面。由于MP3文件已经因为其压缩算法而丢失了一些原始数据，因此反复编辑此文件会产生更多有损的结果。所以，如果你想要对其做出修改，能够访问原始WAV文件总是更好的。然而，如果你不需要这样做，那么MP3版本可能就足够了。
- en: Wrapping up
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结束语
- en: 'In summary, WAV files are better for short sound effects whereas longer sound
    effects, especially theme music, would be handled better with MP3 files. At the
    time of writing, most sound libraries still don’t offer OGG commonly, despite
    being a good candidate. Nevertheless, if you have access to a lot of WAV files
    and you want to be efficient in file size, then you can convert them into OGG
    using online converters. Two examples are as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，WAV文件更适合短音效，而较长的音效，尤其是主题曲，用MP3文件处理会更好。在撰写本文时，大多数音效库仍然不常用OGG，尽管它是一个很好的候选者。尽管如此，如果你有很多WAV文件并且想要在文件大小上更有效率，那么你可以使用在线转换器将它们转换为OGG。以下有两个例子：
- en: '[https://audio.online-convert.com/convert-to-ogg](https://audio.online-convert.com/convert-to-ogg)'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://audio.online-convert.com/convert-to-ogg](https://audio.online-convert.com/convert-to-ogg)'
- en: '[https://online-audio-converter.com/](https://online-audio-converter.com/)'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://online-audio-converter.com/](https://online-audio-converter.com/)'
- en: 'In the case of music files, which are normally a few minutes long, if your
    original is in WAV format, then uploading and processing these files online may
    take a long time since the file sizes will easily be over 50 MB. Also, some of
    these online converters have file size limitations. To get around these limitations,
    here is a link to a website that compares some offline converters that you can
    employ in your efforts: [https://www.lifewire.com/free-audio-converter-software-programs-2622863](https://www.lifewire.com/free-audio-converter-software-programs-2622863).'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在音乐文件的情况下，这些文件通常只有几分钟长，如果你的原始文件是WAV格式，那么在线上传和处理这些文件可能会花费很长时间，因为文件大小很容易超过50 MB。此外，一些在线转换器有文件大小限制。为了绕过这些限制，这里有一个链接到网站，比较了一些你可以用于你的努力的离线转换器：[https://www.lifewire.com/free-audio-converter-software-programs-2622863](https://www.lifewire.com/free-audio-converter-software-programs-2622863)。
- en: Regardless of what file type you choose and whether it’s for a sound effect
    or music, there comes a point in your game development journey when you will have
    to decide if your sound asset should loop or not. In the next section, we’ll discuss
    the reasons why having the loop feature on or off is useful.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你选择什么类型的文件，以及它是声音效果还是音乐，在你的游戏开发旅程中，你都会到达一个决定你的声音资产是否应该循环的时刻。在下一节中，我们将讨论为什么开启或关闭循环功能是有用的。
- en: Deciding on looping or not
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 决定是否循环
- en: A loop, in literal terms, is a continuous motion or structure in which if you
    pick a random spot, you could come back to it by traveling all the way through.
    In aural terms, this is similar, but we don’t start anywhere; we usually start
    playing a sound file, but the player restarts the track once it reaches the end.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在字面上，循环是一个连续的运动或结构，如果你随机选择一个点，你可以通过完全穿越它回到那里。在听觉上，这很相似，但我们不是从任何地方开始；我们通常开始播放一个声音文件，但玩家会在它到达末尾时重新启动曲目。
- en: 'This definition is classic, and not that insightful, so let’s do a better job
    by discussing it in various contexts inside Godot or any game projects. So, you
    can make informed decisions in your projects since it’s situation-specific. We’ll
    do this by presenting different use cases:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这个定义是经典的，但并不那么有洞察力，所以让我们通过在 Godot 或任何游戏项目中讨论它在各种情境下的应用来做得更好。这样，你可以在项目中做出明智的决定，因为它是特定情境的。我们将通过展示不同的用例来完成这项工作：
- en: '**Background music**: This is the most typical case where a music piece plays
    in the background while the game is running. The composer creates this kind of
    piece with the intention that once played back to back, there will be no abrupt
    end. The sound at the end of the file will seamlessly match the beginning. Sure,
    if you pay attention to the ups and downs in the rhythm, you will know where you
    are in the file, but so long as the loop setting is on, everything will sound
    smooth and blend in so that you can focus on your game experience.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**背景音乐**: 这是最常见的案例，在游戏运行时，背景音乐持续播放。作曲家创作这种作品的目的就是一旦连续播放，就不会有突然的结尾。文件末尾的声音会无缝地与开头匹配。当然，如果你注意节奏的起伏，你会知道你在文件中的位置，但只要循环设置开启，一切听起来都会很顺畅，融合在一起，这样你就可以专注于游戏体验。'
- en: '**Machine gun**: Imagine that either the player or an enemy character is interacting
    with a machine gun in your game. Although short bursts are possible, due to the
    nature of machine guns, the gun might be fired continuously. So, instead of detecting
    if the sound file has reached the end and instructing the player to restart the
    file, you may want to play the file once if the said file’s loop feature is on.
    This way, the machine gun effect will play until a stop command is given.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**机关枪**: 想象一下，在游戏中玩家或敌人角色正在与机关枪互动。虽然可以发射短点射，但由于机关枪的特性，枪可能会连续发射。因此，与其检测声音文件是否到达了结尾并指示玩家重新启动文件，不如如果该文件启用了循环功能，就播放一次文件。这样，机关枪效果将持续播放，直到接收到停止命令。'
- en: '**Doors**: This one is a bit of an edge case. Let’s assume we have visuals
    and other sound effects in our game that indicate that we’re in an outdoor scene
    on a windy day. Perhaps the door is in poor condition with rusted hinges, and
    one of the hinges is even leaning out a bit. The artist may have decided to have
    this door animated to match the wind’s effect on the door so that it oscillates
    between a closed and an open state. Here, it would make sense to have a looped
    sound file that contains most likely squeaks and creaks that are synchronized
    with the door’s animation.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**门**: 这是一个有点边缘的情况。假设我们在游戏中有一些视觉和其他声音效果，表明我们正在一个风大的户外场景中。也许这扇门状况不佳，铰链生锈，甚至有一个铰链稍微向外倾斜。艺术家可能决定让这扇门动画化以匹配风对门的影响，使其在关闭和打开状态之间摆动。在这种情况下，有一个循环的声音文件是有意义的，其中很可能包含与门动画同步的吱吱声和嘎吱声。'
- en: However, if a door will be responding to a player character’s action such as
    it being opened or closed, then it doesn’t make sense to have the sound file in
    a loop. This is going to be a one-off event.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果一扇门将响应玩家的动作，比如打开或关闭，那么将声音文件设置为循环就没有意义了。这将是一个一次性的事件。
- en: '**User interface**: The sound you hear when you interact with a user interface
    falls under this category. These are usually not looped since they are event-based,
    similar to the one-off-door action from the previous use case. However, let’s
    present a case that may seem like looping is a good idea. Nevertheless, we’ll
    rule it out for a good reason.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户界面**：当您与用户界面交互时听到的声音属于此类。这些通常不会循环，因为它们基于事件，类似于之前用例中的一次性开门动作。然而，让我们提出一个可能认为循环是个好主意的情况。尽管如此，我们仍会出于一个很好的理由将其排除。'
- en: Imagine that there is a UI component that’s helping the player set an amount.
    The interface has two buttons that will increment and decrement the amount the
    player is seeing. Placing a UI sound effect on either button is fine, and the
    sound will play only once, so long as the player keeps clicking. What if we would
    like to give the player a chance to press and hold the button down? After all,
    clicking a button ad nauseam to get to really high or low numbers may get tedious
    quickly. So, how should we treat the looping condition in this case?
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下有一个UI组件帮助玩家设置一个数值。界面有两个按钮，将增加和减少玩家看到的数值。在任一按钮上放置UI音效是可以的，只要玩家继续点击，声音就会播放一次。如果我们想给玩家一个按住按钮的机会呢？毕竟，不断地点击按钮以获得非常高或非常低的数值可能会很快变得乏味。那么，在这种情况下我们应该如何处理循环条件呢？
- en: Human perception is sensitive during events like this. Players are usually busy
    during gameplay, so they won’t perceive the delay while the CPU is busily decompressing
    a music file. However, we are usually very perceptive in detecting the discrepancies
    at the end of a holding event for a UI button. So, instead of treating repetitive
    UI events such as a machine gun, even though they might feel similar, designers
    opt to trigger the sound effect individually instead of looping it.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种事件中，人类的感知非常敏感。玩家在游戏过程中通常很忙，所以当CPU忙于解压缩音乐文件时，他们不会察觉到延迟。然而，我们通常非常敏感地检测到UI按钮保持事件结束时的差异。因此，即使它们可能感觉相似，设计师也会选择单独触发音效，而不是循环播放。
- en: In this section, we presented different use cases where the use of looping,
    or lack thereof, is common. However, what you haven’t seen is how to turn the
    loop functionality on and off. We’ll show this by revisiting our old friend, the
    **Import** panel.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们介绍了不同用例，在这些用例中，循环的使用或未使用是常见的。然而，您还没有看到如何打开和关闭循环功能。我们将通过重新访问我们的老朋友，即**导入**面板，来展示这一点。
- en: Turning the looping on and off
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 打开和关闭循环
- en: So far, we have discussed what looping is and under which scenarios it may make
    sense to have it on or off, but we haven’t seen how we can flip its status. In
    this section, we’ll put sound files of each type in our project and study their
    settings in the **Import** panel.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经讨论了循环是什么以及何时打开或关闭循环可能是有意义的，但我们还没有看到如何翻转其状态。在本节中，我们将把每种类型的音文件放入我们的项目中，并研究**导入**面板中的设置。
- en: We are going to use the `Loop_Someday_03.wav` file from the *Freesound* website,
    which was created by a user called *LittleRobotSoundFactory*. The sound was originally
    in WAV format, but we have converted it into OGG and MP3 versions as well. You
    can find all the versions in the `Start` folder and compare their file sizes.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用来自*Freesound*网站的`Loop_Someday_03.wav`文件，该文件由用户*LittleRobotSoundFactory*创建。声音最初是WAV格式，但我们已经将其转换为OGG和MP3版本。您可以在`Start`文件夹中找到所有版本，并比较它们的文件大小。
- en: 'Once you’ve added the files to your project, let’s learn how Godot recognizes
    these files. So, switch on the **Import** panel, and select either the OGG or
    MP3 version. Then, select the WAV version. The interface differences are shown
    in the following screenshot:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您已将文件添加到您的项目中，让我们学习Godot如何识别这些文件。因此，打开**导入**面板，并选择OGG或MP3版本。然后，选择WAV版本。界面差异在以下屏幕截图中显示：
- en: '![Figure 8.1 – The MP3 and OGG versions have fewer import settings than the
    WAV version ](img/Figure_8.1_B17473.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图8.1 – MP3和OGG版本比WAV版本有更少的导入设置](img/Figure_8.1_B17473.jpg)'
- en: Figure 8.1 – The MP3 and OGG versions have fewer import settings than the WAV
    version
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.1 – MP3和OGG版本比WAV版本有更少的导入设置
- en: As you can see, by default, the MP3 and OGG versions come with the loop setting
    on. Also, these versions don’t seem to have that many settings. On the other hand,
    the WAV version’s loop is off by default. Why is that?
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，默认情况下，MP3和OGG版本都带有循环设置。此外，这些版本似乎没有太多设置。另一方面，WAV版本的循环默认是关闭的。这是为什么？
- en: If you remember what we introduced for different sound formats earlier in the
    *Learning about different sound formats* section, Godot took the liberty of looping
    the compressed versions since these will most likely be used for background music.
    On the contrary, if our example file was for a sound effect, we’d most likely
    use a WAV file with no loop, since it’d be a quick one-off thing with minimal
    CPU requirements.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你记得我们在“了解不同的音频格式”部分介绍的不同音频格式，Godot 自由地循环了压缩版本，因为这些很可能会用于背景音乐。相反，如果我们的示例文件是声音效果，我们很可能会使用没有循环的
    WAV 文件，因为它将是一个快速的一次性事件，对 CPU 的要求最小。
- en: Other WAV settings
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 其他 WAV 设置
- en: Since we are currently working with the **Import** interface, let’s also point
    out that you can reduce the file size of your WAV files by turning on some of
    the options in the **Force** section. *Figure 8.1* shows this and some other settings,
    such as trimming and normalizing your files. The former of these will trim the
    silent part at the beginning and the end of files, which is sometimes automatically
    added when exporting WAV files. This is especially important if you want your
    sound effects to start right away without a delay.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们目前正在使用 **导入** 界面，让我们也指出，你可以在 **强制** 部分打开一些选项来减小 WAV 文件的大小。*图 8.1* 展示了这一点以及一些其他设置，例如修剪和归一化你的文件。前者将在文件的开始和结束处修剪静音部分，这在导出
    WAV 文件时有时会自动添加。如果你希望声音效果立即开始而不延迟，这一点尤为重要。
- en: So, turning the loop feature for any given sound file on and off is as easy
    as a click and you know how to do it. Perhaps it’s more important to decide whether
    a file should be looped or not. This is something you’ll have to answer along
    the way.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对于任何给定的声音文件，打开或关闭循环功能就像点击一下那么简单，而且你知道如何操作。也许更重要的是决定一个文件是否应该循环。这是你在过程中必须回答的问题。
- en: Regardless, you still need a Godot node to play your sounds at some point. In
    the next section, we’ll get to know the different audio players Godot uses, and
    attach our sound files to the appropriate player.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 不论如何，你最终都需要一个 Godot 节点来播放你的声音。在下一节中，我们将了解 Godot 使用的不同音频播放器，并将我们的声音文件附加到适当的播放器上。
- en: Playing audio in Godot
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Godot 中播放音频
- en: Since Godot uses nodes for almost everything, it is no different for playing
    sounds. To play an audio file, there are nodes you can attach to your scene, and
    you can configure them according to whether it’s for a 2D or 3D game. We’ll focus
    on different audio players Godot uses in this section.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Godot 几乎使用节点来处理所有事情，播放声音也不例外。要播放音频文件，你可以将节点附加到你的场景中，并根据是 2D 还是 3D 游戏来配置它们。在本节中，我们将重点关注
    Godot 使用的不同音频播放器。
- en: 'No matter what audio file type you choose, you will be able to play it with
    the nodes we’ll present in this section. The experience you’ll feel will be different,
    of course, based on the node type, but this is something you have to decide, depending
    on the type of game you are making. So, let’s look at the audio streamer nodes
    Godot uses so that you can pick the appropriate one. Your three choices are as
    follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你选择什么音频文件类型，你都将能够使用本节中将要介绍的节点来播放它。当然，根据节点类型，你的体验会有所不同，但这取决于你正在制作的游戏类型，你必须做出决定。因此，让我们看看
    Godot 使用的音频流节点，以便你可以选择合适的节点。你的三个选择如下：
- en: '**AudioStreamPlayer**: This node’s official definition is somewhat dry; it
    plays audio non-positionally. What this means is that you are not concerned with
    which direction the audio is coming from. For an FPS game, it’s essential to know
    in which direction the enemy is firing at you. This involves positional data.
    You don’t have any kind of positional information in this audio node. However,
    this is the right candidate for playing background music. Find more about it at
    [https://docs.godotengine.org/en/3.4/classes/class_audiostreamplayer.xhtml](https://docs.godotengine.org/en/3.4/classes/class_audiostreamplayer.xhtml).'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AudioStreamPlayer**：这个节点的官方定义有些枯燥；它以非位置方式播放音频。这意味着你不需要关心音频来自哪个方向。对于第一人称射击游戏，知道敌人从哪个方向向你开火是至关重要的。这涉及到位置数据。在这个音频节点中，你没有任何位置信息。然而，这是播放背景音乐的合适候选者。更多关于它的信息可以在
    [https://docs.godotengine.org/en/3.4/classes/class_audiostreamplayer.xhtml](https://docs.godotengine.org/en/3.4/classes/class_audiostreamplayer.xhtml)
    找到。'
- en: '**AudioStreamPlayer2D**: You guessed it – this node includes position information.
    So, the farther away the camera is from this node, the quieter the sound will
    be. This node is useful for 2D platformer games, for example. So, as soon as a
    game object enters the view, the stream will be picked up by the camera. Also,
    objects that are on the right-hand side of the camera will prioritize the right
    speakers and vice versa. More details are available at [https://docs.godotengine.org/en/3.4/classes/class_audiostreamplayer2d.xhtml](https://docs.godotengine.org/en/3.4/classes/class_audiostreamplayer2d.xhtml).'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AudioStreamPlayer2D**：正如你所猜到的——这个节点包括位置信息。因此，摄像机从这个节点越远，声音就越小。这个节点对于2D平台游戏很有用，例如。所以，一旦游戏对象进入视野，流就会被摄像机拾取。此外，位于摄像机右侧的对象将优先考虑右侧扬声器，反之亦然。更多详细信息请参阅[https://docs.godotengine.org/en/3.4/classes/class_audiostreamplayer2d.xhtml](https://docs.godotengine.org/en/3.4/classes/class_audiostreamplayer2d.xhtml)。'
- en: '**AudioStreamPlayer3D**: Last but not least is the 3D version of an audio streamer.
    This conveys 3D positional information to a listener. Therefore, this is the kind
    of audio streamer node you’ll be using in 3D setups. Naturally, this type of streamer
    employs more advanced features, such as attenuation, which controls how the sound
    will dampen over a distance, and Doppler effects. Thus, it might be a good idea
    to examine its properties by visiting [https://docs.godotengine.org/en/3.4/classes/class_audiostreamplayer3d.xhtml](https://docs.godotengine.org/en/3.4/classes/class_audiostreamplayer3d.xhtml).'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AudioStreamPlayer3D**：最后但同样重要的是音频流的三维版本。它将三维位置信息传递给听众。因此，这是你在三维设置中会使用的音频流节点。自然地，这种流器采用了更高级的功能，例如衰减，它控制声音在距离上的衰减方式，以及多普勒效应。因此，通过访问[https://docs.godotengine.org/en/3.4/classes/class_audiostreamplayer3d.xhtml](https://docs.godotengine.org/en/3.4/classes/class_audiostreamplayer3d.xhtml)来检查其属性可能是个好主意。'
- en: We could go over every property for each type of stream player, but we leave
    that task to you since picking the right streamer and configuring its settings
    is a form of art. We’ll use the proper streamer when we build our game later in
    this book and focus on the important settings in that context. In the meantime,
    you can read what each one is capable of by going to the aforementioned URLs from
    the official documentation.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以逐一介绍每种流播放器的每个属性，但我们将这项任务留给你，因为选择正确的流器和配置其设置是一种艺术形式。在本书的后面部分，我们将使用适当的流器构建游戏，并关注该上下文中的重要设置。与此同时，你可以通过访问官方文档中提到的上述URL来了解每个流器能做什么。
- en: That being said, we won’t leave this chapter just yet. Let’s play a few sounds
    to simulate some of the examples we’ve enumerated so far.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，我们不会立刻离开这一章。让我们播放一些声音来模拟我们之前列举的一些例子。
- en: Playing background music
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 播放背景音乐
- en: 'Let’s practice some of the things we’ve covered in this chapter. We’ll start
    by playing a sound that’s a good candidate for background music. We’ll use the
    MP3 version of the `loop-someday-03` file we imported in the *Deciding on looping
    or not* section. To play this sound as background music, follow these steps:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们练习一下本章中介绍的一些内容。我们将从播放一个适合作为背景音乐的声音开始。我们将使用在*决定是否循环*部分导入的`loop-someday-03`文件的MP3版本。要将此声音作为背景音乐播放，请按照以下步骤操作：
- en: Create a new scene and save it as `Background-Music.tscn`.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的场景并将其保存为`Background-Music.tscn`。
- en: Add an **AudioStreamPlayer** node to your scene and turn on its **Autoplay**
    property in the **Inspector** panel.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的场景中添加一个**AudioStreamPlayer**节点，并在**Inspector**面板中打开其**Autoplay**属性。
- en: Drag and drop `loop-someday-03.mp3` from the **FileSystem** panel into the **Stream**
    property in the **Inspector** panel.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`loop-someday-03.mp3`从**FileSystem**面板拖放到**Inspector**面板中的**Stream**属性。
- en: Press *F6*.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下 *F6*。
- en: This will launch your current scene and automatically play the MP3 file. Since
    the file’s loop setting is set to true, the 9-second-long music will play endlessly.
    You can now add this scene to other scenes where you want to have background music.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动你的当前场景并自动播放MP3文件。由于文件的循环设置被设置为true，9秒长的音乐将无限循环播放。你现在可以将这个场景添加到其他你想有背景音乐的场景中。
- en: Playing a sound effect on demand
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 按需播放声音效果
- en: 'For this effort, we’ll return to the machine gun example from the *Deciding
    on looping or not* section. The sound for the machine gun is also set to loop,
    but we wouldn’t want this to *autoplay* when a scene is launched. It’s most likely
    that your player character will enter or approach an area where enemy forces are
    pummeling you with machine gun fire. Let’s write some code to simulate this sort
    of triggering behavior:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 为了这个努力，我们将回到*决定是否循环*部分中的机枪示例。机枪的声音也被设置为循环，但我们不希望当场景启动时自动*播放*。很可能是你的玩家角色会进入或接近一个敌人用机枪火力猛攻的区域。让我们编写一些代码来模拟这种触发行为：
- en: Create a new scene and save it as `Machine-Gun.tscn`.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的场景并将其保存为 `Machine-Gun.tscn`。
- en: 'Add an **AudioStreamPlayer** node to your scene and attach a script to it with
    the following lines of code in it:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的场景中添加一个**音频流播放器**节点，并将其与以下代码行的脚本相关联：
- en: '[PRE0]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Drag and drop `machine-gun.ogg` from the **FileSystem** panel into the **Stream**
    property in the **Inspector** panel.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `machine-gun.ogg` 从**文件系统**面板拖放到**检查器**面板中的**流**属性。
- en: Press *F6*.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下 *F6*。
- en: Since we want the stream to play on demand, we are wiring it to a condition
    to be true – that is, pressing the spacebar. Go ahead and press it once or twice;
    even hold it down for a brief period. You’ll hear the machine gun sound going
    on or off, thanks to the play and stop commands of the **AudioStreamPlayer** node.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们希望流按需播放，我们将它连接到一个条件，使其为真——即按下空格键。继续按下一次或两次；甚至可以短暂地按住。你会听到机枪声音的开和关，这是由于**音频流播放器**节点的播放和停止命令。
- en: 'The script we’ve implemented looks good enough, but it’s also a bit problematic.
    Maybe you’ve already noticed it. Try to hold down the spacebar for long enough,
    such as 3 or 4 seconds, and you’ll hear a jamming sound. This is because the script
    is firing too many play commands. So, after a while, the CPU will be instructed
    to play the same asset too many times. We can do better by replacing the script’s
    content with the following:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实现的脚本看起来足够好，但也有些问题。你可能已经注意到了。尝试长时间按住空格键，比如3或4秒，你会听到卡顿的声音。这是因为脚本发出了太多的播放命令。所以，过了一会儿，CPU将指示播放相同的资产太多次。我们可以通过用以下内容替换脚本的内容来做得更好：
- en: '[PRE1]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here, we have replaced the lines that had the play and stop commands with a
    different kind of command. The new version will control whether the stream should
    be paused or not. For this script to work, we need to turn on two things in the
    **Inspector** panel:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们用不同类型的命令替换了原来包含播放和停止命令的行。新版本将控制流是否应该暂停。为了让这个脚本工作，我们需要在**检查器**面板中开启两件事：
- en: '**Autoplay**'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动播放**'
- en: '**Stream Paused**'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**流已暂停**'
- en: This new setup will play the stream automatically, similar to what happened
    in the *Playing background music* section, but then pause it right away. This
    seems counter-intuitive at first, but let’s analyze what the new script is doing.
    When the spacebar is pressed, we resume the stream, and since the stream was already
    playing, thanks to `else` case, the stream will be paused again. So, the new script
    will not send consecutive play and stop commands, and thus will not clog the CPU.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这个新的设置将自动播放流，类似于在*播放背景音乐*部分发生的情况，但随后立即暂停。一开始这似乎有些不合直觉，但让我们分析一下新脚本正在做什么。当按下空格键时，我们恢复流，由于`else`情况，流将被再次暂停。因此，新脚本不会发送连续的播放和停止命令，从而不会占用CPU。
- en: We’ll conclude by discussing two more flavors of the machine gun firing in light
    of what we have presented throughout this chapter.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过对本章所展示的内容进行讨论，来总结机枪发射的两种更多风味。
- en: Increasing gameplay experience
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提高游戏体验
- en: Did you notice that we used the same type of audio stream node for both the
    background music and machine gun? In a way, we treated the machine gun as if it
    was background music. In other words, we were not too concerned about where the
    sound was coming from.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 你有没有注意到我们为背景音乐和机枪都使用了相同类型的音频流节点？从某种意义上说，我们将机枪视为背景音乐。换句话说，我们并不太关心声音是从哪里传来的。
- en: To deliver a more enjoyable gameplay experience, you could use the **AudioStreamPlayer2D**
    and **AudioStreamPlayer3D** nodes in 2D and 3D games, respectively. By tweaking
    the attenuation values of these nodes, which define how sound travels over distances,
    your players can hear the sound of the machine gun louder and louder as their
    characters get closer to the source. This would elevate the sense of danger, and
    it’s a cheap and nice way to deliver immersion.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供更愉悦的游戏体验，你可以在2D游戏中使用**AudioStreamPlayer2D**节点，在3D游戏中使用**AudioStreamPlayer3D**节点。通过调整这些节点上的衰减值，这些值定义了声音随距离传播的方式，当你的角色靠近声音源时，玩家可以听到越来越大的机枪声。这将提升危险感，而且这是一种既经济又好的沉浸式体验方式。
- en: Summary
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We started this chapter by presenting different types of files that Godot uses
    for playing sound. Knowing the differences among these formats, when you work
    with composers, you can emphasize in which format you want your sound files to
    be delivered. Chances are they might ask you about this, and they might even deliver
    in all three possible formats.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '我们在本章开始时介绍了Godot用于播放声音的不同文件类型。了解这些格式之间的差异，当你与作曲家合作时，你可以强调你希望你的声音文件以哪种格式交付。可能性很大，他们可能会询问这个问题，他们甚至可能会以所有三种可能的格式交付。 '
- en: Next, we discussed a few cases where looping a sound file might be a good idea.
    To facilitate this, we investigated the options presented in the **Import** panel.
    However, the decision to loop or not is still something you’ll have to decide.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们讨论了几种可能适合循环声音文件的情况。为了便于操作，我们研究了**导入**面板中提供的选项。然而，是否循环的决定仍然需要你自己来做出。
- en: Finally, to put our theoretical knowledge to use, we created two scenes that
    could play the sample files. In the first case, we attached a sound file to an
    audio streamer and let it play automatically. For the second case, we wrote a
    very simple script that let you start and stop the sound to mimic an enemy character’s
    behavior, hence the sound effect it may make.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了将我们的理论知识付诸实践，我们创建了两个可以播放样本文件的场景。在第一种情况下，我们将声音文件附加到音频流器上，并让它自动播放。在第二种情况下，我们编写了一个非常简单的脚本，允许你开始和停止声音，以模拟敌人角色的行为，因此可能产生的声音效果。
- en: So far, we have been discovering some of the ingredients that are necessary
    for building games, such as importing assets – whether it’s models from the previous
    chapter or sound assets in this one. In the next chapter, we’ll dive right into
    building our point-and-click adventure game by designing our level.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在探索构建游戏所需的某些成分，例如导入资产——无论是上一章中的模型还是这一章中的声音资产。在下一章中，我们将通过设计关卡来直接构建我们的点击冒险游戏。
- en: Further reading
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'If you are into creating music and sound effects, here is a short list of software
    you can start with:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢创作音乐和声音效果，以下是一些你可以开始使用的软件列表：
- en: 'LMMS: [https://lmms.io](https://lmms.io)'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'LMMS: [https://lmms.io](https://lmms.io)'
- en: 'Waveform Free: [https://www.tracktion.com/products/waveform-free](https://www.tracktion.com/products/waveform-free)'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Waveform Free: [https://www.tracktion.com/products/waveform-free](https://www.tracktion.com/products/waveform-free)'
- en: 'Cakewalk: [https://www.bandlab.com/products/cakewalk](https://www.bandlab.com/products/cakewalk)'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Cakewalk: [https://www.bandlab.com/products/cakewalk](https://www.bandlab.com/products/cakewalk)'
- en: The aforementioned links will only cover the using a tool side of music production,
    so you may also need to learn the artistic side of it, for which there are courses
    on multiple online training platforms, such as Udemy.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 上述链接仅涵盖音乐制作中工具的使用方面，因此你可能还需要学习其艺术方面，这可以通过多个在线培训平台上的课程来实现，例如Udemy。
- en: 'By the way, if you see a sound file out there and it looks like it is free
    to download, it doesn’t mean you have the license to utilize the piece in your
    work. You may want to read the fine print if you don’t want to get a surprise
    call from a lawyer someday. Nevertheless, the following are a few websites that
    offer paid and free sound content:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，如果你看到某个声音文件看起来可以免费下载，并不意味着你有权在你的作品中使用这个片段。如果你不想有一天接到律师的电话，你可能需要仔细阅读条款。尽管如此，以下是一些提供付费和免费声音内容的网站：
- en: '[https://gamesounds.xyz](https://gamesounds.xyz)'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://gamesounds.xyz](https://gamesounds.xyz)'
- en: '[https://freesound.org](https://freesound.org)'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://freesound.org](https://freesound.org)'
- en: '[https://www.zapsplat.com](https://www.zapsplat.com)'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.zapsplat.com](https://www.zapsplat.com)'
- en: '[https://opengameart.org](https://opengameart.org)'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://opengameart.org](https://opengameart.org)'
- en: 'Part 3: Clara’s Fortune – An Adventure Game'
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三部分：克拉拉的财富——一个冒险游戏
- en: In this final part of the book, you'll be creating a point-and-click adventure
    game. Since it would be too time-consuming to prepare all the game assets, you'll
    be provided with the necessary files.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的最后一部分，你将创建一个点击冒险游戏。由于准备所有游戏资源会非常耗时，因此你将获得必要的文件。
- en: 'In this part, we cover the following chapters:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本部分，我们将涵盖以下章节：
- en: '[*Chapter 9*](B17473_09.xhtml#_idTextAnchor146)*, Designing the Level*'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第9章*](B17473_09.xhtml#_idTextAnchor146)*，设计关卡*'
- en: '[*Chapter 10*](B17473_10.xhtml#_idTextAnchor165)*, Making Things Look Better
    with Lights and Shadows*'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第10章*](B17473_10.xhtml#_idTextAnchor165)*，利用光线和阴影使事物看起来更好*'
- en: '[*Chapter 11*](B17473_11.xhtml#_idTextAnchor186)*, Creating the User Interface*'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第11章*](B17473_11.xhtml#_idTextAnchor186)*，创建用户界面*'
- en: '[*Chapter 12*](B17473_12.xhtml#_idTextAnchor206)*, Interacting with the World
    through Camera and Character Controllers*'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第12章*](B17473_12.xhtml#_idTextAnchor206)*，通过摄像头和角色控制器与世界交互*'
- en: '[*Chapter 13*](B17473_13.xhtml#_idTextAnchor230)*, Finishing with Sound and
    Animation*'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第13章*](B17473_13.xhtml#_idTextAnchor230)*，以声音和动画结束*'
- en: '[*Chapter 14*](B17473_14.xhtml#_idTextAnchor255)*, Conclusion*'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第14章*](B17473_14.xhtml#_idTextAnchor255)*，结论*'
