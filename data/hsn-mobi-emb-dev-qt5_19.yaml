- en: Building a Linux System
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建 Linux 系统
- en: Building your own Linux system for use on an embedded device can be an overwhelming
    task. Knowing what software is needed to get the stack up and running; knowing
    what the software dependencies are; finding the software to download and downloading
    it; configuring, building, and packaging all of that software—it could literally
    take weeks of time. It used to back in the good old days. Now, there are some
    great tools to facilitate building a custom Linux filesystem. You can be up and
    running on an embedded device within a day, if you have a machine powerful enough.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在嵌入式设备上构建自己的 Linux 系统可能是一项令人望而生畏的任务。了解需要哪些软件才能使堆栈启动并运行；了解软件依赖项；找到要下载的软件并下载它；配置、构建和打包所有这些软件——这实际上可能需要几周的时间。在过去的好日子里是这样的。现在，有一些优秀的工具可以简化构建自定义
    Linux 文件系统的过程。如果您有一台足够强大的机器，您可以在一天之内启动并运行嵌入式设备。
- en: Prototyping is always the first step in device creation. Having the correct
    tools will streamline this process. Embedded systems need to boot fast and directly
    into a Qt application, such as an automotive instrument cluster. In this chapter,
    you will learn about creating a full software stack for embedded Linux systems
    using Yocto and Boot to Qt for Device Creation. A Raspberry Pi device will be
    used as a target to demonstrate how to build the operating system.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 原型设计始终是设备创建的第一步。拥有正确的工具将使此过程更加流畅。嵌入式系统需要快速且直接地启动到 Qt 应用程序，例如汽车仪表盘。在本章中，您将学习如何使用
    Yocto 和 Boot to Qt for Device Creation 创建嵌入式 Linux 系统的完整软件栈。将使用 Raspberry Pi 设备作为目标来演示如何构建操作系统。
- en: 'We will be looking at the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将探讨以下内容：
- en: Bootcamp – Boot to Qt
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bootcamp – Boot to Qt
- en: Rolling your own – custom embedded Linux
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DIY – 定制嵌入式 Linux
- en: Deploying to an embedded system
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署到嵌入式系统
- en: Bootcamp – Boot to Qt
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Bootcamp – Boot to Qt
- en: We have already discussed Qt Company's Boot to Qt system in [Chapter 12](143c9219-edf3-4886-aadb-41d91691b2f5.xhtml),* Cross
    Compiling and Remote Debugging*. Provided with Boot to Qt are configuration files
    for you to use to create a custom operating system. It requires the BitBake software
    and the Yocto Project, which is an open source project to help to build custom
    Linux-based systems, which itself is based on my old friend, OpenEmbedded.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在[第 12 章](143c9219-edf3-4886-aadb-41d91691b2f5.xhtml)中讨论了 Qt 公司的 Boot to
    Qt 系统，*交叉编译和远程调试*。Boot to Qt 提供了配置文件，供您使用以创建自定义操作系统。它需要 BitBake 软件 和 Yocto 项目，这是一个开源项目，旨在帮助构建基于
    Linux 的自定义系统，该项目本身基于我的老朋友 OpenEmbedded。
- en: There is a script named `b2qt-init-build-env` in the `/path/to/install/dir/<Qtversion>/Boot2Qt/sources/meta-boot2qt/b2qt-init-build-env` file
    of this book that will initialize the build for a Raspberry Pi. You run the command
    from a build directory of your choice.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的 `/path/to/install/dir/<Qtversion>/Boot2Qt/sources/meta-boot2qt/b2qt-init-build-env`
    文件中有一个名为 `b2qt-init-build-env` 的脚本，该脚本将为 Raspberry Pi 初始化构建。您可以从您选择的构建目录中运行该命令。
- en: 'To get a list of supported devices, use the `list-devices` argument. The output
    on my system is as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取支持设备的列表，请使用 `list-devices` 参数。我的系统输出如下：
- en: '![](img/3a65e42d-5ae7-457d-8cca-6d1899e665b7.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3a65e42d-5ae7-457d-8cca-6d1899e665b7.png)'
- en: 'You will need to initialize the build system and build environment, so run
    the script named `b2qt-init-build-env`, which is in the directory that Boot to
    Qt is installed:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要初始化构建系统和构建环境，因此请运行名为 `b2qt-init-build-env` 的脚本，该脚本位于 Boot to Qt 安装目录中：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Replace `/path/to/install/dir` with the directory path that `Boot2Qt` is in,
    typically `~/Qt`. Also, replace `<Qtversion>` to whatever Qt version is installed
    there. If you are using a different device, change `raspberrypi3` to one that
    is in the list of supported devices by `Boot2Qt`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `/path/to/install/dir` 替换为 `Boot2Qt` 所在的目录路径，通常是 `~/Qt`。同时，将 `<Qtversion>`
    替换为安装的 Qt 版本。如果您使用的是不同的设备，将 `raspberrypi3` 更改为 `Boot2Qt` 支持的设备列表中的一个。
- en: Yocto comes with scripts and configurations so that you can build your own system
    and customize it, and perhaps add MySQL database support. The `B2Q` script, `setup-environment.sh`,
    will help to set up the environment for development.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Yocto 提供了脚本和配置，以便您可以构建自己的系统并对其进行自定义，也许还可以添加 MySQL 数据库支持。`B2Q` 脚本 `setup-environment.sh`
    将帮助设置开发环境。
- en: 'You need to export your device type into the `MACHINE` environmental variable and
    source the `environment` setup script:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要将设备类型导出到 `MACHINE` 环境变量中，并源 `environment` 设置脚本：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, you can build the default image by using the following command:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以使用以下命令构建默认镜像：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You could first customize it by adding a package that you need that isn't there
    by default—let's say the `mysql` plugin, so that we can access a database remotely!
    Let's look at how we can do that.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以先通过添加默认情况下不存在的所需软件包来自定义它——比如说添加`mysql`插件，这样我们就可以远程访问数据库了！让我们看看如何做到这一点。
- en: Rolling your own – custom embedded Linux
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 滚动自己的——定制嵌入式Linux
- en: Yocto has a history and got its start from the OpenEmbedded project. The OpenEmbedded
    project got its name in the programming world from the OpenZaurus project. At
    that time, I was involved with OpenZaurus and projects surrounding that, with
    the original focus being the Sharp Zaurus that ran Trolltech's Qtopia using a
    different operating system. OpenZaurus was an open source replacement OS that
    users could flash onto their devices. The evolution of the build system went from
    being the Makefile-based Buildroot to being displaced by BitBake.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Yocto有一个历史，它起源于OpenEmbedded项目。OpenEmbedded项目在编程世界中的名字来源于OpenZaurus项目。当时，我参与了OpenZaurus及其相关项目，最初的焦点是运行Trolltech的Qtopia的Sharp
    Zaurus，使用的是不同的操作系统。OpenZaurus是一个开源的替代操作系统，用户可以将它刷到他们的设备上。构建系统的演变从基于Makefile的Buildroot到被BitBake取代。
- en: You can, of course, build Poky or Yocto for this section. I am going to use
    the `Boot2Qt` configurations.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您当然可以为此部分构建Poky或Yocto。我将使用`Boot2Qt`配置。
- en: 'To get started with Yocto so that you can customize it, make a base image by
    using the following command:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用Yocto并进行定制，请使用以下命令创建基本映像：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This will take quite a bit of time.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这将需要相当多的时间。
- en: The basic customization procedure would be the same as customizing Boot to Qt,
    regarding adding layers and recipes, as well as customizing already existing recipes.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 基本定制过程将与定制Boot to Qt相同，包括添加层和配方，以及定制现有配方。
- en: System customization
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 系统定制
- en: By default, the `Boot2Qt rpi` image does not contain the MySQL Qt plugin, so
    the MySQL example I mentioned previously will not work. I added it by customizing
    the image build.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`Boot2Qt rpi`映像不包含MySQL Qt插件，所以我之前提到的MySQL示例将无法工作。我通过自定义映像构建添加了它。
- en: 'Yocto and all BitBake-derived systems use a `conf/local.conf` file so that
    you can customize the image build. If you do not have one already, after you run
    `setup-environment.sh file`, create a `local.conf` file and add the following
    line of code:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Yocto和所有基于BitBake的系统使用`conf/local.conf`文件，以便您可以自定义映像构建。如果您还没有，在运行`setup-environment.sh
    file`之后，创建一个`local.conf`文件并添加以下代码行：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `sql-mysql` part comes from Qt's configure arguments, so this is telling
    `bitbake` to add the `-sql-mysql` argument to the configure arguments, which will
    build the MySQL plugin and hence include it in the system image. There are other
    options, but you will need to look in `meta-qt5/recipes-qt/qt5/qtbase_git.bb`
    and see the lines that start with `PACKAGECONFIG`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`sql-mysql`部分来自Qt的配置参数，因此这是告诉`bitbake`将`-sql-mysql`参数添加到配置参数中，这将构建MySQL插件并将其包含在系统映像中。还有其他选项，但您需要查看`meta-qt5/recipes-qt/qt5/qtbase_git.bb`文件中以`PACKAGECONFIG`开头的行。'
- en: 'There is one other customization I need to do, which has nothing to do with
    Qt. OpenEmbedded uses the `www.example.com` URL to test for connectivity. For
    whatever reason, my ISP''s DNS does not have an entry for `https://www.example.com`,
    so I initially could not reach it, and the build failed straight away. I could
    have added a new DNS to my computer''s network configuration, but it was faster
    to tell `bitbake` to use another server for its online check, so I added the following
    line to my `conf/local.conf` file:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我还需要进行一项其他定制，这与Qt无关。OpenEmbedded使用`www.example.com` URL来测试连通性。由于某种原因，我的ISP的DNS没有`https://www.example.com`的条目，所以我最初无法访问它，构建立即失败。我可以在计算机的网络配置中添加一个新的DNS，但告诉`bitbake`使用另一个服务器进行在线检查更快，所以我将以下行添加到我的`conf/local.conf`文件中：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If you need more extensive customization, you can create your own `bitbake`
    layer, which is a collection of recipes.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要进行更广泛的定制，您可以创建自己的`bitbake`层，这是一个配方集合。
- en: local.conf file
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: local.conf文件
- en: The `conf/local.conf` file is where you can make local changes to the image
    build. Like `PACKAGECONFIG_append_pn-`, which we mentioned in the previous section,
    there are other ways to add packages and issue other configuration commands. The
    templated `local.conf` has loads of comments to guide you in the process.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`conf/local.conf`文件是您可以进行本地更改以构建映像的地方。就像我们在上一节中提到的`PACKAGECONFIG_append_pn-`一样，还有其他方法可以添加软件包和发布其他配置命令。模板化的`local.conf`包含大量注释，以指导您完成这个过程。'
- en: '`IMAGE_INSTALL_append` allows you to add packages into the image.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`IMAGE_INSTALL_append` 允许您将包添加到镜像中。'
- en: '`PACKAGECONFIG_append_pn-<package>` allows you to append package-specific configurations
    to the package. In the case of `qtbase`, it allows you to add arguments to the
    configure process. Each recipe will have specific configurations.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`PACKAGECONFIG_append_pn-<package>` 允许您将特定于包的配置追加到包中。在`qtbase`的情况下，它允许您向配置过程添加参数。每个配方都将具有特定的配置。'
- en: meta-<layer> directories
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: meta-<layer> 目录
- en: 'Layers are a way to add packages or add functionality to existing packages.
    To create your own layer, you will need to create a template directory structure
    in the `sources/` directory, where you initialized the `bitbake` build. Change
    `<layer>` to whatever name you are going to use:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 层是一种向包添加功能或向现有包添加功能的方式。要创建自己的层，您需要在`sources/`目录中创建一个模板目录结构，在那里您初始化了`bitbake`构建。将`<layer>`更改为您打算使用的名称：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `licenses/` directory is where you put any license files for the package.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`licenses/`目录是放置任何许可证文件的位置。'
- en: Any recipes you may add go into `recipes/` directly. There's more on this a
    bit later.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能添加的任何配方都直接放入`recipes/`中。关于这一点稍后会有更多说明。
- en: 'The `layer.conf` file is the controlling configuration for the layer. A place
    to start with this file could be as follows, filled in with generic entries:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`layer.conf`文件是层的控制配置。使用此文件的起点可以是以下内容，其中包含通用条目：'
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Change `meta-custom` to whatever you want to name it.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 将`meta-custom`更改为您想要的任何名称。
- en: Once you have created the layer, you will need to add it to the `conf/bblayers.conf` file,
    which is in the directory that you initialized in the `Boot2Qt` build. In my case,
    this was `~/development/b2qt/build-raspberrypi3/`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了层，您需要将其添加到`conf/bblayers.conf`文件中，该文件位于您在`Boot2Qt`构建中初始化的目录中。在我的情况下，这是`~/development/b2qt/build-raspberrypi3/`。
- en: We can now add one or more packages to our custom layer.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以向我们的自定义层添加一个或多个包。
- en: <recipe>.bb files
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`<recipe>.bb`文件'
- en: You can also create your own recipe if you have existing code, or if there is
    a software project somewhere that you want to include in the system image.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有现有的代码，或者如果某个软件项目需要包含在系统镜像中，您也可以创建自己的配方。
- en: In the custom layer, we created a `recipes/` directory where our new recipe
    can live.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在自定义层中，我们创建了一个`recipes/`目录，我们的新配方可以在这里存在。
- en: To get a feel of how recipes can be written, take a look at some of the recipes
    included with Boot2Qt or Yocto.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解如何编写配方，请查看Boot2Qt或Yocto中包含的一些配方。
- en: There are some scripts that can help in the creation of recipe files, that is,
    `devtool` and `recipetool`. The `devtool` and `recipetool` commands are fairly
    similar in what they do. `Devtool` makes it easier if you need to apply patches
    and work on the code. Sometimes, your software needs to be developed or debugged
    on the actual device, for example, if you are developing something that uses any
    sensors. `Devtool` can also build the recipe so that you can work the kinks out.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些脚本可以帮助创建配方文件，即`devtool`和`recipetool`。`devtool`和`recipetool`命令在执行功能上相当相似。`Devtool`在需要应用补丁和修改代码时会使事情变得更容易。有时，您的软件需要在实际设备上进行开发或调试，例如，如果您正在开发使用任何传感器的产品。`Devtool`还可以构建配方，这样您就可以解决其中的问题。
- en: devtool command
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: devtool命令
- en: 'The output of `devtool --help` is as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`devtool --help`的输出如下：'
- en: '![](img/5ae324eb-3713-4e94-ab61-f35985343cc9.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5ae324eb-3713-4e94-ab61-f35985343cc9.png)'
- en: The most important arguments would be `add`, `modify`, and `upgrade`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的参数将是`add`、`modify`和`upgrade`。
- en: 'For `devtool`, I will use a Git repository URL to add my repository of `sensors-examples`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`devtool`，我将使用Git仓库URL来添加我的`sensors-examples`仓库：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Running the preceding command will output something similar to this:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 运行前面的命令将输出类似以下内容：
- en: '![](img/fb60f5a5-b026-4e64-967e-45defe194f94.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fb60f5a5-b026-4e64-967e-45defe194f94.png)'
- en: 'We need to try and build the package to see whether it succeeds or fails, which
    we can do by running the following command:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要尝试构建包以查看它是否成功或失败，这可以通过运行以下命令来完成：
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We might need to edit this `.bb` file to make it build if it does fail.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果构建失败，我们可能需要编辑这个`.bb`文件来使其构建成功。
- en: 'In the case of `sensors-examples`, we will get the following output:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在`sensors-examples`的情况下，我们将得到以下输出：
- en: '![](img/3a278aac-8a3e-4cc5-bfd6-dc40f6205b00.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3a278aac-8a3e-4cc5-bfd6-dc40f6205b00.png)'
- en: We've built it!
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经构建完成了！
- en: You will find this build in `tmp/work/cortexa7hf-neon-vfpv4-poky-linux-gnueabi/sensors-examples/1.0+git999-r0`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`tmp/work/cortexa7hf-neon-vfpv4-poky-linux-gnueabi/sensors-examples/1.0+git999-r0`中找到这个构建。
- en: 'If you want to edit a recipe, you can use `devtool` and then create a patch
    so that you can use it:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要编辑一个食谱，你可以使用 `devtool` 并创建一个补丁，这样你就可以使用了：
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We get the following output by running the preceding command:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 运行前面的命令后，我们得到以下输出：
- en: '![](img/f432ca34-25e5-4212-9a88-4743b923bba0.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f432ca34-25e5-4212-9a88-4743b923bba0.png)'
- en: 'This will duplicate the recipe in your local workspace so that you can edit
    without losing it when you update `bitbake`. Now, you can edit the sources, in
    this case, of `qtsensors`. I have a patch to add a `qtsensors` plugin for the
    Raspberry Pi Sense HAT, so I am going to manually apply that now:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在你的本地工作区中复制食谱，这样你就可以编辑它，而不用担心在更新 `bitbake` 时丢失。现在，你可以编辑源代码，在这个例子中，是 `qtsensors`。我有一个补丁，用于添加
    Raspberry Pi Sense HAT 的 `qtsensors` 插件，所以我现在将手动应用它：
- en: '![](img/629745f4-a2dd-43e1-882c-d483d6ebb9b9.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/629745f4-a2dd-43e1-882c-d483d6ebb9b9.png)'
- en: 'My patch is old, and I need to fix it up. You can build this on its own by
    running the following command:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我的补丁已经过时了，我需要修复它。你可以通过运行以下命令单独构建它：
- en: '[PRE11]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This initially fails to find `rtimulib.h`, so we need to add a dependency on
    that lib.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这最初无法找到 `rtimulib.h`，因此我们需要添加对该库的依赖。
- en: 'In the OpenEmbedded Layer Index, there is a `python-rtimu` recipe, but it does
    not export the headers or build the library, so I will create a new recipe based
    on the Git repository, as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在 OpenEmbedded 层索引中，有一个 `python-rtimu` 食谱，但它没有导出头文件或构建库，所以我将基于 Git 仓库创建一个新的食谱，如下所示：
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This is a `cmake`-based project, and I will need to modify the recipe to add
    some `cmake` arguments. To edit this, I can simply run the following command:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个基于 `cmake` 的项目，我需要修改食谱来添加一些 `cmake` 参数。为了编辑这个，我可以简单地运行以下命令：
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'I added the following lines, which use `EXTRA_OECMAKE` to disable some of the
    demos that depend on Qt 4\. I think at one time, I had a patch that ported it
    to Qt 5, but I cannot find it. The last `EXTRA_OEMAKE` tells `cmake` to build
    in the Linux directory. Then, we tell `bitbake` it needs to inherit the `cmake`
    stuff:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我添加了以下行，这些行使用 `EXTRA_OECMAKE` 来禁用一些依赖于 Qt 4 的演示。我认为曾经有一个补丁将其移植到 Qt 5，但我找不到它。最后的
    `EXTRA_OEMAKE` 告诉 `cmake` 在 Linux 目录中构建。然后，我们告诉 `bitbake` 它需要继承 `cmake` 相关的内容：
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We then need to edit our `qtsensors_git.bb` file so that we can add a dependency
    on this new package. This will allow it to find the headers:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要编辑我们的 `qtsensors_git.bb` 文件，以便我们可以添加对这个新包的依赖。这将允许它找到头文件：
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: When I run the build command, `bitbake qtsensors`, it will make sure my `rtimulib`
    package is built, then apply my `sensehat` patch to `qtsensors`, and then build
    and package that up!
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当我运行构建命令 `bitbake qtsensors` 时，它将确保我的 `rtimulib` 包被构建，然后应用我的 `sensehat` 补丁到
    `qtsensors`，然后构建并打包它！
- en: '`Recipetool` is another way that you can create a new recipe. It is simpler
    in design and usage than `devtool`.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`Recipetool` 是另一种创建新食谱的方法。它的设计和使用比 `devtool` 更简单。'
- en: recipetool command
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: recipetool 命令
- en: 'The output of using the `recipetool create --help` command is as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `recipetool create --help` 命令的输出如下：
- en: '![](img/0a9d2928-4ba6-48cb-8176-499524e2fc1b.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0a9d2928-4ba6-48cb-8176-499524e2fc1b.png)'
- en: 'As an example, I ran `recipetool -d create -o rotationtray_1.bb https://github.com/lpotter/rotationtray.git`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我运行了 `recipetool -d create -o rotationtray_1.bb https://github.com/lpotter/rotationtray.git`：
- en: '![](img/3ac573f3-1f38-466f-9019-d6068005e820.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3ac573f3-1f38-466f-9019-d6068005e820.png)'
- en: 'Using the `-d argument` means it will be more verbose, so I excluded some output:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `-d` 参数意味着它将更加详细，所以我排除了部分输出：
- en: '![](img/ff47533d-54dd-4ff3-bf0f-368efae25983.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ff47533d-54dd-4ff3-bf0f-368efae25983.png)'
- en: Now, you may want to edit the resulting file. A great way to learn about `bitbake`
    is to look at other recipes and see how they do things.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可能想要编辑生成的文件。了解 `bitbake` 的一个好方法是查看其他食谱，看看它们是如何做的。
- en: bitbake-layers
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: bitbake-layers
- en: OpenEmbedded comes with a script called `bitbake-layers`, which you can use
    to get information on layers that are available. You can also use this to add
    a new layer or remove one from the configuration file.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: OpenEmbedded 随带一个名为 `bitbake-layers` 的脚本，你可以用它来获取有关可用层的详细信息。你还可以使用它来添加新层或从配置文件中删除一个层。
- en: 'Running `bblayers --help` will give us the following output:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `bblayers --help` 将给出以下输出：
- en: '![](img/340262f5-fe17-4b58-82ac-cde9695e40ad.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/340262f5-fe17-4b58-82ac-cde9695e40ad.png)'
- en: Running `bitbake-layers show-recipes` will dump all of the available recipes.
    This list can be quite extensive.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `bitbake-layers show-recipes` 将输出所有可用的食谱。这个列表可能相当长。
- en: yocto-layer
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: yocto-layer
- en: Yocto has a script named `yocto-layer`, which will create an empty layer directory
    structure that you can then add with `bitbake-layers`. You can also add an example
    recipe and a `bbappend` file.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Yocto有一个名为`yocto-layer`的脚本，它将创建一个空的层目录结构，然后你可以使用`bitbake-layers`将其添加。你还可以添加一个示例配方和一个`bbappend`文件。
- en: 'To create a new layer, run `yocto-layer` with the `create` argument:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的层，使用`create`参数运行`yocto-layer`：
- en: '[PRE16]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This will run interactively and ask you a few questions. I told it yes to both
    questions to create examples:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这将交互式运行并询问你几个问题。我告诉它两个问题都回答“是”以创建示例：
- en: '![](img/57244712-3fc3-43bd-bac4-d34ef7d837a9.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/57244712-3fc3-43bd-bac4-d34ef7d837a9.png)'
- en: 'You will then see a new directory tree named `meta-mylayer`. You can then make
    the new layer available to `bitbake` using `bitbake-layers`, as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到一个新的名为`meta-mylayer`的目录树。然后你可以使用`bitbake-layers`将新层提供给`bitbake`，如下所示：
- en: '[PRE17]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Use the following command to see the new layer running:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令查看新层运行情况：
- en: '[PRE18]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: bbappend files
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: bbappend文件
- en: When I imported the `qtsensors` recipe into my workspace, I could have used
    a `bbappend` file. When you import the recipe into your workspace, it is essentially
    being duplicated. Please note, however, that you will no longer be able to build
    it with `devtool`.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 当我将`qtsensors`配方导入我的工作区时，我可以用一个`bbappend`文件。当你将配方导入你的工作区时，它实际上是被复制的。请注意，然而，你将无法使用`devtool`构建它。
- en: I also mentioned that the `yocto-layer` script can create an example `bbappend`
    file with a patch so that we can see how it works. The filename that you choose
    must match whatever recipe you are modifying. The only difference in name would
    be the extension, which is `.bbappend` for a `bbappend` file.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我还提到，`yocto-layer`脚本可以创建一个包含补丁的示例`bbappend`文件，这样我们可以看到它是如何工作的。你选择的文件名必须与你要修改的配方相匹配。名称的唯一区别将是扩展名，对于`bbappend`文件来说是`.bbappend`。
- en: In the `workspace/conf/local.conf` file, there is a line about BBFILES that
    tells me where it is looking for `bbappend` files. Of course, you can put them
    anywhere as long as you tell `bitbake` where they are. Mine is configured for
    them to be in `${LAYERDIR}/appends/*.bbappend`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在`workspace/conf/local.conf`文件中，有一行关于BBFILES的说明，告诉我它在寻找`bbappend`文件的位置。当然，你可以将它们放在任何地方，只要告诉`bitbake`它们在哪里。我的配置是它们位于`${LAYERDIR}/appends/*.bbappend`。
- en: 'Ours is simple—it only applies a patch. With only the following few lines in
    the `bbappend` file, we can get it up and running:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的系统很简单——它只应用补丁。只需在`bbappend`文件中包含以下几行，我们就可以让它启动并运行：
- en: '`SUMMARY`: Simple string explaining the patch'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SUMMARY`：简单字符串解释补丁'
- en: '`FILESEXTRAPATHS_prepend`: String of the path to the patch files'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FILESEXTRAPATHS_prepend`：补丁文件路径的字符串'
- en: '`SRC_URI`: The URL string to the patch file'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SRC_URI`：补丁文件的URL字符串'
- en: 'If we wanted to create a `bbappend` file to patch `qtsensors` with the `sensehat`
    patch, it would be a four line edit, along with the actual patch. The simple `bbappends`
    file would look like this:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要创建一个`bbappend`文件来使用`sensehat`补丁修补`qtsensors`，这将是一个四行编辑，包括实际的补丁。简单的`bbappends`文件看起来像这样：
- en: '[PRE19]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: It's good practice to place the patch into a directory, but this one is on the
    same level as the `bbappend` file.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 将补丁放置在目录中是一种良好的实践，但这个补丁与`bbappend`文件处于同一级别。
- en: 'We would need to remove the `qtsensors` recipe that was imported from the workspace before
    we can build our appended recipe:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们能够构建附加的配方之前，我们需要从工作区中移除导入的`qtsensors`配方：
- en: '[PRE20]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Place `qtsensors_git.bbappend` and the patch file into the `appends` directory.
    To build it, simply run the following command:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 将`qtsensors_git.bbappend`和补丁文件放入`appends`目录。要构建它，只需运行以下命令：
- en: '[PRE21]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Now that we can customize our OpenEmbedded/Yocto image, we can deploy to the
    device.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以自定义我们的OpenEmbedded/Yocto镜像，我们可以将设备部署到设备上。
- en: Deploying to an embedded system
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将部署到嵌入式系统
- en: We've built a custom system image, and there are a few different ways that systems
    can be deployed onto a device. Usually, an embedded device has a particular way
    of doing this. The image can be deployed to a Raspberry Pi by writing the system
    image file directly onto a storage disk using dd or similar. Other devices might
    need to be deployed by writing the filesystem to a formatted disk, or even as
    low level as using JTAG.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经构建了一个自定义的系统镜像，系统可以以几种不同的方式部署到设备上。通常，嵌入式设备有特定的部署方式。可以使用dd或类似工具将系统镜像文件直接写入存储磁盘来部署到Raspberry
    Pi。其他设备可能需要将文件系统写入格式化的磁盘，甚至使用JTAG进行低级部署。
- en: OpenEmbedded
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OpenEmbedded
- en: If you plan on using Qt with OpenEmbedded, you should be aware of the ​`meta-qt5-extra`
    layer, which contains desktop environments such as LXQt and even KDE5\. I personally
    use both environments and switch back and forth between the two on my desktop,
    but I prefer LXQt most of the time as it's lightweight.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您计划使用Qt与OpenEmbedded，您应该了解`meta-qt5-extra`层，它包含LXQt和甚至KDE5等桌面环境。我个人使用这两个环境，并在我的桌面上在这两个之间来回切换，但大多数时候我更喜欢LXQt，因为它轻量级。
- en: Building an OpenEmbedded image with LXQt is fairly straightforward, and similar
    to building a Boot to Qt image.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 使用LXQt构建OpenEmbedded镜像相当直接，与构建Boot to Qt镜像类似。
- en: 'To see the image targets that are available, you can run the following command:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看可用的镜像目标，您可以运行以下命令：
- en: '[PRE22]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: If you have Boot to Qt, you should see the `b2qt-embedded-qt5-image` layer,
    which we will use to create the image for Raspberry Pi. You should also see OpenEmbedded's
    `core-image-base and core-image-x11`, which may also be interesting.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有Boot to Qt，您应该看到`b2qt-embedded-qt5-image`层，我们将使用它来为Raspberry Pi创建镜像。您还应该看到OpenEmbedded的`core-image-base`和`core-image-x11`，这可能也很有趣。
- en: There are other layers available that you can search for and download from [https://layers.openembedded.org/layerindex/branch/master/layers/](https://layers.openembedded.org/layerindex/branch/master/layers/).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他可用的层，您可以在[https://layers.openembedded.org/layerindex/branch/master/layers/](https://layers.openembedded.org/layerindex/branch/master/layers/)中搜索并下载。
- en: The deployment method really depends on your target device. Let's see how we
    can deploy the system image to a Raspberry Pi.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 部署方法实际上取决于您的目标设备。让我们看看如何将系统镜像部署到Raspberry Pi。
- en: Raspberry Pi
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Raspberry Pi
- en: The example in this section targets the Raspberry Pi. You may have a different
    device, and the process here might be similar.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中的示例针对Raspberry Pi。您可能有不同的设备，这里的流程可能类似。
- en: 'If you intend to only create a cross `toolchain` that you can use in Qt Creator,
    you can run the following command:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您打算只创建一个可以在Qt Creator中使用的交叉`toolchain`，您可以运行以下命令：
- en: '[PRE23]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'To create the system image to copy to an SD card, run the following command:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建要复制到SD卡上的系统镜像，请运行以下命令：
- en: '[PRE24]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `b2qt-embedded-qt5-image` target will also create the SDK if it is needed.
    When you let that run for a day or so, you'll have a freshly baked Qt image! I
    would suggest using the fastest machine you have with the most memory and storage,
    as a full distro build can take many hours, even on a fast machine.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`b2qt-embedded-qt5-image`目标还会在需要时创建SDK。当您让它运行一天左右时，您将有一个新鲜出炉的Qt镜像！我建议使用您拥有的最快机器，并具有最多的内存和存储空间，因为完整的发行版构建可能需要数小时，即使在快速机器上也是如此。'
- en: You can then take the system image and use the device's flash procedure or whatever
    method it uses to make the filesystem. For the RPI, you put the micro SD into
    a USB reader, and then run the `dd` command to write the image file.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以将系统镜像用于设备的闪存程序或它使用的任何方法来制作文件系统。对于RPI，您将micro SD卡放入USB读卡器中，然后运行`dd`命令来写入镜像文件。
- en: 'The resulting file I need to write to the SD card was at the following location:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我需要写入SD卡的文件位于以下位置：
- en: '[PRE25]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'To write this to the SD card, use the following command:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 要将其写入SD卡，请使用以下命令：
- en: '[PRE26]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'My exact command was as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我的确切命令如下：
- en: '[PRE27]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Now, wait until everything has been written to the disk. Plop it into the Raspberry
    Pi SD slot, power it on, and then you're on your way!
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，等待直到所有内容都已写入磁盘。将其插入Raspberry Pi的SD卡槽中，打开电源，然后您就可以开始了！
- en: Summary
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about how to use `bitbake` to build a custom system
    image, starting with Qt's Boot to Qt configuration files. The process is similar
    to building Yocto, Poky, or Ångström. We also learned how use `devtool` to customize
    Qt's build to add more functionality. Then, we discussed how to add your own recipe
    using `recipetool` into the image. By doing this, you were also able to add this
    recipe into a new layer. We finished off by deploying the image onto an SD card
    so that it could be run on the Raspberry Pi.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用`bitbake`构建自定义系统镜像，从Qt的Boot to Qt配置文件开始。这个过程与构建Yocto、Poky或Ångström类似。我们还学习了如何使用`devtool`自定义Qt的构建以添加更多功能。然后，我们讨论了如何使用`recipetool`将您自己的配方添加到镜像中。通过这样做，您还可以将此配方添加到一个新层中。最后，我们将镜像部署到SD卡上，以便在Raspberry
    Pi上运行。
