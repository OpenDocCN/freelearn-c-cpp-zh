["```cpp\nint sum1(int n)\n{\n\u00a0\u00a0int ret = 0;\n\u00a0\u00a0for(int i = 1; i <= n; ++i)\n\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0ret += i;\n\u00a0\u00a0}\n\u00a0\u00a0return ret;\n}\nint sum2(int n)\n{\n\u00a0\u00a0return (n * (n + 1)) / 2;\n}\n```", "```cpp\nint sum(int n)\n{\n\u00a0\u00a0int ret = 0;\n\u00a0\u00a0for(int i = 1; i <= n; ++i)\n\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0ret += i;\n\u00a0\u00a0}\n\u00a0\u00a0return ret;\n}\n```", "```cpp\neax = n - 1;\necx = n - 2;\nrcx *= rax;\nrcx >>= 1;\neax = rcx + 2 * n;\neax--;\nreturn eax;\n```", "```cpp\nreturn ((n-1) * (n-2) / 2) + (n * 2) - 1;\n```", "```cpp\n((n^2 - 3n + 2) / 2) + 2n - 1\n```", "```cpp\n((n^2 - 3n + 2) + 4n - 2) / 2\n```", "```cpp\n(n^2 + n) / 2\n```", "```cpp\n(n * (n+1)) / 2\n```", "```cpp\n#include <vector>\nint three()\n{ \n\u00a0\u00a0const std::vector<int> v = {1, 2};\n\u00a0\u00a0return v[0] + v[1];\n}\n```", "```cpp\npowershell -Command \"Measure-Command {<your program and arguments here>}\"\n```", "```cpp\ntime <your program and arguments here>\n```", "```cpp\n    int sumVector(std::vector<int> &v)\n    {\n    \u00a0\u00a0int ret = 0;\n    \u00a0\u00a0for(int i: v)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0ret += i;\n    \u00a0\u00a0}\n\n    \u00a0\u00a0return ret;\n    }\n    ```", "```cpp\n    #include <random>\n    #include <iostream>\n    int main()\n    {\n    \u00a0\u00a0// Initialize a random number generator\n    \u00a0\u00a0std::random_device dev;\n    \u00a0\u00a0std::mt19937 rng(dev());\n    \u00a0\u00a0// Create a distribution range from 0 to 1000\n    \u00a0\u00a0std::uniform_int_distribution<std::mt19937::result_type> dist(0,1000); \n    \u00a0\u00a0// Fill 10000 numbers in a vector\n    \u00a0\u00a0std::vector<int> v;\n    \u00a0\u00a0v.reserve(10000);\n    \u00a0\u00a0for(int i = 0; i < 10000; ++i)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0v.push_back(dist(rng));\n    \u00a0\u00a0}\n    \u00a0\u00a0// Call out function 1000 times, accumulating to a total sum\n    \u00a0\u00a0double total = 0.0;\n    \u00a0\u00a0for(int i = 0; i < 1000; ++i)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0total += sumVector(v);\n    \u00a0\u00a0}\n    \u00a0\u00a0std::cout << \"Total: \" << total << std::endl;\n    }\n    ```", "```cpp\n    $ g++ Snippet1.cpp\n    $ time ./a.out\n    ```", "```cpp\n    $ g++ -O3 Snippet1.cpp\n    $ time ./a.out\n    ```", "```cpp\n    // Call out function 100000 times\n    for(int i = 0; i < 100000; ++i)\n    {\n    \u00a0\u00a0total += sumVector(v);\n    }\n    ```", "```cpp\n    $ g++ -O3 Snippet1.cpp\n    $ time ./a.out\n    ```", "```cpp\n    std::cout<<\"Total:\"<<total<<std::endl;\n    ```", "```cpp\n    $ g++ -O3 Snippet1.cpp\n    $ time ./a.out\n    ```", "```cpp\n    #include <map>\n    #include <string>\n    #include <chrono>\n    #include <iostream>\n    #include <cstdint> \n    using std::map;\n    using std::string;\n    using std::cerr;\n    using std::endl;\n    ```", "```cpp\n    class Timer\n    {\n    \u00a0\u00a0static map<string, int64_t> ms_Counts;\n    \u00a0\u00a0static map<string, int64_t> ms_Times;\n    \u00a0\u00a0const string &m_sName;\n    \u00a0\u00a0std::chrono::time_point<std::chrono::high_resolution_clock> m_tmStart;\n    ```", "```cpp\n    public:\n    \u00a0\u00a0// When constructed, save the name and current clock time\n    \u00a0\u00a0Timer(const string &sName): m_sName(sName)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0m_tmStart = std::chrono::high_resolution_clock::now();\n    \u00a0\u00a0}\n    ```", "```cpp\n    \u00a0\u00a0// When destroyed, add the time elapsed and also increment the count under this name\n    \u00a0\u00a0~Timer()\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0auto tmNow = std::chrono::high_resolution_clock::now();\n    \u00a0\u00a0\u00a0\u00a0auto msElapsed = std::chrono::duration_cast<std::chrono::milliseconds>(tmNow - m_tmStart);\n    \u00a0\u00a0\u00a0\u00a0ms_Counts[m_sName]++;\n    \u00a0\u00a0\u00a0\u00a0ms_Times[m_sName] += msElapsed.count();\n    \u00a0\u00a0}\n    ```", "```cpp\n    \u00a0\u00a0// Print out the stats for each measured block/function\n    \u00a0\u00a0static void dump()\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0cerr << \"Name\\t\\t\\tCount\\t\\t\\tTime(ms)\\t\\tAverage(ms)\\n\";\n    \u00a0\u00a0\u00a0\u00a0cerr << \"-----------------------------------------------------------------------------------\\n\";\n    \u00a0\u00a0\u00a0\u00a0for(const auto& it: ms_Times)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0auto iCount = ms_Counts[it.first];\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cerr << it.first << \"\\t\\t\\t\" << iCount << \"\\t\\t\\t\" << it.second << \"\\t\\t\\t\" << it.second / iCount << \"\\n\";\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}\n    };\n    ```", "```cpp\n    // Define static members\n    map<string, int64_t> Timer::ms_Counts;\n    map<string, int64_t> Timer::ms_Times;\n    const int64_t N = 1'000'000'000;\n    ```", "```cpp\n    unsigned int testMul()\n    {\n    \u00a0\u00a0Timer t(\"Mul\");\n\n    \u00a0\u00a0unsigned int x = 1;\n    \u00a0\u00a0for(int i = 0; i < N; ++i)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0x *= i;\n    \u00a0\u00a0}\n\n    \u00a0\u00a0return x;\n    }\n    unsigned int testAdd()\n    {\n    \u00a0\u00a0Timer t(\"Add\");\n\n    \u00a0\u00a0unsigned int x = 1;\n    \u00a0\u00a0for(int i = 0; i < N; ++i)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0x += i;\n    \u00a0\u00a0}\n\n    \u00a0\u00a0return x;\n    }\n    ```", "```cpp\n    int main()\n    {\n    \u00a0\u00a0volatile unsigned int dummy;\n    \u00a0\u00a0for(int i = 0; i < 10; ++i)\n    \u00a0\u00a0\u00a0\u00a0dummy = testAdd();\n    \u00a0\u00a0for(int i = 0; i < 10; ++i)\n    \u00a0\u00a0\u00a0\u00a0dummy = testMul();\n    \u00a0\u00a0Timer::dump();\n    }\n    ```", "```cpp\n    $ g++ -O1 Snippet2.cpp && ./a.out\n    ```", "```cpp\n    $ g++ -O2 Snippet2.cpp && ./a.out\n    ```", "```cpp\n    $ g++ -O3 Snippet2.cpp && ./a.out\n    ```", "```cpp\n    #define TIME_IT Timer t(__func__)\n    ```", "```cpp\n    unsigned int testMul()\n    {\n    \u00a0\u00a0TIME_IT;\n    unsigned int testAdd()\n    {\n    \u00a0\u00a0TIME_IT;\n    ```", "```cpp\n    $ g++ -O3 Snippet2.cpp && ./a.out\n    ```", "```cpp\napt-get install linux-tools-common linux-tools-generic\n```", "```cpp\n    $ g++ -O3 Snippet2.cpp\n    $ perf record ./a.out\n    ```", "```cpp\n    $ perf report\n    ```", "```cpp\n    # include <iostream>\n    int main()\n    {\n    \u00a0\u00a0int ret = 0;\n    \u00a0\u00a0for(size_t i = 1; i < 10000; ++i)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0for(size_t j = 1; j < 10000; ++j)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(i % j == 0)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0++ret;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}\n\n    \u00a0\u00a0std::cout << \"Result: \" << ret << std::endl;\n    }\n    ```", "```cpp\n    $ g++ -O3 Snippet3.cpp\n    $ time ./a.out\n    ```", "```cpp\n    $ g++ -O3 -funroll-loops Snippet3.cpp \n    $ time ./a.out \n    ```", "```cpp\n    $ g++ -O3 -fprofile-generate Snippet3.cpp\n    ```", "```cpp\n    $ ./a.out\n    ```", "```cpp\n    $ g++ -O3 -fprofile-use -fprofile-correction Snippet3.cpp\n    ```", "```cpp\n    $ time ./a.out\n    ```", "```cpp\n    #include <vector>\n    #include <string>\n    #include <iostream>\n    #include <algorithm>\n    #include <numeric>\n    #include <cstdint> \n    using std::cerr;\n    using std::endl;\n    int main()\n    {\n    \u00a0\u00a0// Fill 100,000,000 1s in a vector\n    \u00a0\u00a0std::vector<int> v( 100'000'000, 1);\n    \u00a0\u00a0// Call accumulate 100 times, accumulating to a total sum\n    \u00a0\u00a0uint64_t total = 0;\n    \u00a0\u00a0for(int i = 0; i < 100; ++i)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0total += std::accumulate(v.begin(), v.end(), 0);\n    \u00a0\u00a0}\n    \u00a0\u00a0std::cout << \"Total: \" << total << std::endl;\n    }\n    ```", "```cpp\n    $ g++ -O3 Snippet4.cpp\n    $ time ./a.out\n    ```", "```cpp\n    $ g++ -O3 -fopenmp -D_GLIBCXX_PARALLEL Snippet4.cpp\n    $ time ./a.out\n    ```", "```cpp\n    #include <map>\n    #include <string>\n    #include <chrono>\n    #include <cstdint>\n    ```", "```cpp\n    class Timer\n    {\n    \u00a0\u00a0static std::map<std::string, int64_t> ms_Counts;\n    \u00a0\u00a0static std::map<std::string, int64_t> ms_Times;\n    \u00a0\u00a0std::string m_sName;\n    \u00a0\u00a0std::chrono::time_point<std::chrono::high_resolution_clock> m_tmStart;\n    \u00a0\u00a0public:\n    \u00a0\u00a0\u00a0\u00a0// When constructed, save the name and current clock time\n    \u00a0\u00a0\u00a0\u00a0Timer(std::string sName);\n    \u00a0\u00a0\u00a0\u00a0// When destroyed, add the time elapsed and also increment the count under this name\n    \u00a0\u00a0\u00a0\u00a0~Timer();\n    \u00a0\u00a0\u00a0\u00a0// Print out the stats for each measured block/function\n    \u00a0\u00a0\u00a0\u00a0static void dump();\n    };\n    ```", "```cpp\n    // Helper macro to time functions\n    #define TIME_IT Timer t(__func__)\n    ```", "```cpp\n    #include <string>\n    #include <iostream>\n    #include <cstdint> \n    #include \"Timer.h\"\n    using std::map;\n    using std::string;\n    using std::cerr;\n    using std::endl;\n    // When constructed, save the name and current clock time\n    Timer::Timer(string sName): m_sName(sName)\n    {\n    \u00a0\u00a0m_tmStart = std::chrono::high_resolution_clock::now();\n    }\n    // When destroyed, add the time elapsed and also increment the count under this name\n    Timer::~Timer()\n    {\n    \u00a0\u00a0auto tmNow = std::chrono::high_resolution_clock::now();\n    \u00a0\u00a0auto msElapsed = std::chrono::duration_cast<std::chrono::milliseconds>(tmNow - m_tmStart);\n    \u00a0\u00a0ms_Counts[m_sName]++;\n    \u00a0\u00a0ms_Times[m_sName] += msElapsed.count();\n    }\n    // Print out the stats for each measured block/function\n    void Timer::dump()\n    {\n    \u00a0\u00a0cerr << \"Name\\t\\t\\tCount\\t\\t\\tTime(ms)\\t\\tAverage(ms)\\n\";\n    \u00a0\u00a0cerr << \"-----------------------------------------------------------------------------------\\n\";\n    \u00a0\u00a0for(const auto& it: ms_Times)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0auto iCount = ms_Counts[it.first];\n    \u00a0\u00a0\u00a0\u00a0cerr << it.first << \"\\t\\t\\t\" << iCount << \"\\t\\t\\t\" << it.second << \"\\t\\t\\t\" << it.second / iCount << \"\\n\";\n    \u00a0\u00a0}\n    }\n    // Define static members\n    map<string, int64_t> Timer::ms_Counts;\n    map<string, int64_t> Timer::ms_Times;\n    ```", "```cpp\n    #include <vector>\n    #include <string>\n    #include <iostream>\n    #include \"Timer.h\"\n    using std::vector;\n    using std::cerr;\n    using std::endl;\n    const int N = 1000000;\n    void withoutReserve(vector<int> &v)\n    {\n    \u00a0\u00a0TIME_IT;\n    \u00a0\u00a0for(int i = 0; i < N; ++i)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0v.push_back(i);\n    \u00a0\u00a0}\n    }\n    void withReserve(vector<int> &v)\n    {\n    \u00a0\u00a0TIME_IT;\n    \u00a0\u00a0v.reserve(N);\n    \u00a0\u00a0for(int i = 0; i < N; ++i)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0v.push_back(i);\n    \u00a0\u00a0}\n    }\n    ```", "```cpp\n    int main()\n    {\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0vector<int> v1;\n    \u00a0\u00a0\u00a0\u00a0for(int i = 0; i < 100; ++i)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0withoutReserve(v1);\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0vector<int> v2;\n    \u00a0\u00a0\u00a0\u00a0for(int i = 0; i < 100; ++i)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0withReserve(v2);\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}\n    \u00a0\u00a0Timer::dump();\n    }\n    ```", "```cpp\n    $ g++ -O3 Snippet5.cpp Timer.cpp\n    $ ./a.out\n    ```", "```cpp\n    #include <vector>\n    #include <string>\n    #include <iostream>\n    #include <random>\n    #include \"Timer.h\"\n    using std::vector;\n    using std::cerr;\n    using std::endl;\n    ```", "```cpp\n    const uint64_t N = 100000000;\n    uint64_t sum1()\n    {\n    \u00a0\u00a0TIME_IT;\n    \u00a0\u00a0uint64_t ret = 0;\n    \u00a0\u00a0for(uint64_t b=0; b < N; ++b)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0if(b % 3 == 2 || b < N/2)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ret += b;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}\n\n    \u00a0\u00a0return ret;\n    }\n    ```", "```cpp\n    uint64_t sum2()\n    {\n    \u00a0\u00a0TIME_IT;\n    \u00a0\u00a0uint64_t ret = 0;\n    \u00a0\u00a0for(uint64_t b=0; b < N; ++b)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0if(b < N/2 || b % 3 == 2)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0ret += b;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}\n\n    \u00a0\u00a0return ret;\n    }\n    ```", "```cpp\n    int main()\n    {\n    \u00a0\u00a0volatile uint64_t dummy = 0;\n    \u00a0\u00a0for(int i = 0; i < 100; ++i)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0dummy = sum1();\n    \u00a0\u00a0}\n    \u00a0\u00a0for(int i = 0; i < 100; ++i)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0dummy = sum2();\n    \u00a0\u00a0}\n    \u00a0\u00a0Timer::dump();\n    }\n    ```", "```cpp\n    $ g++ -O3 Snippet6.cpp Timer.cpp\n    $ ./a.out\n    ```", "```cpp\n    #include <vector>\n    #include <string>\n    #include <iostream>\n    #include <random>\n    #include \"Timer.h\"\n    using std::vector;\n    using std::cerr;\n    using std::endl;\n    ```", "```cpp\n    const uint64_t N = 100000000;\n    uint64_t sum1()\n    {\n    \u00a0\u00a0TIME_IT;\n    \u00a0\u00a0uint64_t ret = 0;\n    \u00a0\u00a0for(int i = 0; i < N; ++i)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0for(int j = 0; j < 100; ++j)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ret += i ^ j;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}\n    \u00a0\u00a0return ret;\n    }\n    ```", "```cpp\n    uint64_t sum2()\n    {\n    \u00a0\u00a0TIME_IT;\n    \u00a0\u00a0uint64_t ret = 0;\n    \u00a0\u00a0for(int i = 0; i < 100; ++i)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0for(int j = 0; j < N; ++j)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ret += i ^ j;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}\n    \u00a0\u00a0return ret;\n    }\n    ```", "```cpp\n    int main()\n    {\n    \u00a0\u00a0volatile uint64_t dummy;\n    \u00a0\u00a0dummy = sum1();\n    \u00a0\u00a0dummy = sum2();\n    \u00a0\u00a0Timer::dump();\n    }\n    ```", "```cpp\n    $ g++ -O3 Snippet7.cpp Timer.cpp\n    $ ./a.out\n    ```", "```cpp\n    #include <vector>\n    #include <list>\n    #include <algorithm>\n    #include <string>\n    #include <iostream>\n    #include <random>\n    #include \"Timer.h\"\n    using std::vector;\n    using std::list;\n    using std::cerr;\n    using std::endl;\n    ```", "```cpp\n    const int N = 100000;\n    ```", "```cpp\n    std::random_device dev;\n    std::mt19937 rng(dev());\n    std::uniform_int_distribution<std::mt19937::result_type> dist(0,N);\n    ```", "```cpp\n    template<class C> void insertRandom(C &l)\n    {\n    \u00a0\u00a0// insert one element to initialize\n    \u00a0\u00a0l.insert(l.end(), 0);\n    \u00a0\u00a0for(int i = 0; i < N; ++i)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0int pos = dist(rng) % l.size();\n    \u00a0\u00a0\u00a0\u00a0auto it = l.begin();\n    \u00a0\u00a0\u00a0\u00a0advance(it, pos);\n    \u00a0\u00a0\u00a0\u00a0l.insert(it, i);\n    \u00a0\u00a0}\n    }\n    ```", "```cpp\n    template<class C> void insertStart(C &l)\n    {\n    \u00a0\u00a0for(int i = 0; i < N; ++i)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0l.insert(l.begin(), i);\n    \u00a0\u00a0}\n    }\n    ```", "```cpp\n    template<class C> void insertEnd(C &l)\n    {\n    \u00a0\u00a0for(int i = 0; i < N; ++i)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0l.insert(l.end(), i);\n    \u00a0\u00a0}\n    }\n    ```", "```cpp\n    int main()\n    {\n    \u00a0\u00a0std::list<int> l;\n    \u00a0\u00a0std::vector<int> v;\n    \u00a0\u00a0// list\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0Timer t(\"list random\");\n    \u00a0\u00a0\u00a0\u00a0insertRandom(l);\n    \u00a0\u00a0}\n\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0Timer t(\"list end\");\n    \u00a0\u00a0\u00a0\u00a0insertEnd(l);\u00a0\u00a0\u00a0\u00a0\n    \u00a0\u00a0}\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0Timer t(\"list start\");\n    \u00a0\u00a0\u00a0\u00a0insertStart(l);\n    \u00a0\u00a0}\n    \u00a0\u00a0// vector\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0Timer t(\"vect random\");\n    \u00a0\u00a0\u00a0\u00a0insertRandom(v);\n    \u00a0\u00a0}\n\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0Timer t(\"vect end\");\n    \u00a0\u00a0\u00a0\u00a0insertEnd(v);\u00a0\u00a0\u00a0\u00a0\n    \u00a0\u00a0}\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0Timer t(\"vect start\");\n    \u00a0\u00a0\u00a0\u00a0insertStart(v);\n    \u00a0\u00a0}\n    \u00a0\u00a0cerr << endl << l.size() << endl << v.size() << endl;\n    \u00a0\u00a0Timer::dump();\n    }\n    ```", "```cpp\n    $ g++ -O3 Snippet8.cpp Timer.cpp\n    $ ./a.out\n    ```", "```cpp\n    #include <vector>\n    #include <list>\n    #include <algorithm>\n    #include <string>\n    #include <iostream>\n    #include <random>\n    #include \"Timer.h\"\n    using std::vector;\n    using std::list;\n    using std::cerr;\n    using std::endl;\n    const int SIZE = 100'000'000;\n    const int N = 100'000'000;\n    std::random_device dev;\n    std::mt19937 rng(dev());\n    std::uniform_int_distribution<std::mt19937::result_type> dist(0,SIZE-1);\n    ```", "```cpp\n    uint64_t getPRIndex(uint64_t i)\n    {\n    \u00a0\u00a0return (15485863 * i) % SIZE;\n    }\n    ```", "```cpp\n    uint64_t sum1(vector<int> &v)\n    {\n    \u00a0\u00a0TIME_IT;\n    \u00a0\u00a0uint64_t sum = 0;\n    \u00a0\u00a0for(int i = 0; i < N; ++i)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0sum += v[getPRIndex(i)];\n    \u00a0\u00a0}\n    \u00a0\u00a0return sum;\n    }\n    ```", "```cpp\n    uint64_t sum2()\n    {\n    \u00a0\u00a0TIME_IT;\n    \u00a0\u00a0uint64_t sum = 0;\n    \u00a0\u00a0for(int i = 0; i < N; ++i)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0sum += getPRIndex(i);\n    \u00a0\u00a0}\n    \u00a0\u00a0return sum;\n    }\n    ```", "```cpp\n    int main()\n    {\n    \u00a0\u00a0// Allocate SIZE integers\n    \u00a0\u00a0std::vector<int> v(SIZE, 0);\n    \u00a0\u00a0// Fill 0 to SIZE-1 values into the vector\n    \u00a0\u00a0for(int i = 0; i < v.size(); ++i)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0v[i] = i;\n    \u00a0\u00a0}\n    \u00a0\u00a0volatile uint64_t asum1 = sum1(v);\n    \u00a0\u00a0volatile uint64_t asum2 = sum2();\n    \u00a0\u00a0Timer::dump();\n    }\n    ```", "```cpp\n    $ g++ -O3 Snippet9.cpp Timer.cpp\n    $ ./a.out\n    ```", "```cpp\n    uint64_t sum3(vector<int> &v)\n    {\n    \u00a0\u00a0TIME_IT;\n    \u00a0\u00a0uint64_t sum = 0;\n    \u00a0\u00a0for(int i = 0; i < N; ++i)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0sum += v[i];\n    \u00a0\u00a0}\n    \u00a0\u00a0return sum;\n    }\n    int main()\n    {\n    \u00a0\u00a0// Allocate SIZE integers\n    \u00a0\u00a0std::vector<int> v(SIZE, 0);\n\n    \u00a0\u00a0// Fill 0 to SIZE-1 values into the vector\n    \u00a0\u00a0for(int i = 0; i < v.size(); ++i)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0v[i] = i;\n    \u00a0\u00a0}\n    \u00a0\u00a0volatile uint64_t asum1 = sum1(v);\n    \u00a0\u00a0volatile uint64_t asum2 = sum2();\n    \u00a0\u00a0volatile uint64_t asum3 = sum3(v);\u00a0\u00a0\n    \u00a0\u00a0Timer::dump();\n    }\n    ```", "```cpp\n    $ g++ -O3 Snippet10.cpp Timer.cpp\n    $ ./a.out\n    ```", "```cpp\n    #include <string>\n    #include <iostream>\n    #include <random>\n    #include \"Timer.h\"\n    using std::string;\n    using std::cerr;\n    using std::endl;\n    ```", "```cpp\n    const int N = 10'000'000;\n    const char* fruits[] = \n    \u00a0\u00a0{\"apple\", \"banana\", \"cherry\", \"durian\", \"guava\", \"jackfruit\", \"kumquat\", \"mango\", \"orange\", \"pear\"};\n    ```", "```cpp\n    uint64_t fun1()\n    {\n    \u00a0\u00a0TIME_IT;\n    \u00a0\u00a0uint64_t sum = 0;\n    \u00a0\u00a0string s1;\n    \u00a0\u00a0for(uint64_t i = 0; i < N; ++i)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0s1 = fruits[i % 10];\n    \u00a0\u00a0\u00a0\u00a0for(int k = 0; k < s1.size(); ++k) sum += s1[k];\n    \u00a0\u00a0}\n    \u00a0\u00a0return sum;\n    }\n    ```", "```cpp\n    uint64_t fun2()\n    {\n    \u00a0\u00a0TIME_IT;\n    \u00a0\u00a0uint64_t sum = 0;\n    \u00a0\u00a0char s1[32];\n\n    \u00a0\u00a0for(uint64_t i = 0; i < N; ++i)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0char *ps1 = s1;\n    \u00a0\u00a0\u00a0\u00a0const char *p1 = fruits[i % 10];\n    \u00a0\u00a0\u00a0\u00a0do { *ps1++ = *p1; } while(*p1++);\n    \u00a0\u00a0\u00a0\u00a0for(ps1 = s1; *ps1; ++ps1) sum += *ps1;\n    \u00a0\u00a0}\n    \u00a0\u00a0return sum;\n    }\n    ```", "```cpp\n    int main()\n    {\n    \u00a0\u00a0for(int i = 0; i < 10; ++i)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0volatile uint64_t asum1 = fun1();\n    \u00a0\u00a0\u00a0\u00a0volatile uint64_t asum2 = fun2();\u00a0\u00a0\n    \u00a0\u00a0}\n    \u00a0\u00a0Timer::dump();\n    }\n    ```", "```cpp\n    $ g++ -O3 Snippet11.cpp Timer.cpp\n    $ ./a.out\n    ```", "```cpp\n    $ perf record ./a.out\n    ```", "```cpp\n    $ perf report\n    ```", "```cpp\n    #include <vector>\n    #include <list>\n    #include <algorithm>\n    #include <string>\n    #include <iostream>\n    #include <random>\n    #include \"Timer.h\"\n    using std::vector;\n    using std::list;\n    using std::cerr;\n    using std::endl;\n    const int N = 100'000'000;\n    std::random_device dev;\n    std::mt19937 rng(dev());\n    std::uniform_int_distribution<std::mt19937::result_type> dist(1,N-1);\n    ```", "```cpp\n    struct Data1\n    {\n    \u00a0\u00a0uint64_t field1;\n    \u00a0\u00a0uint64_t field2;\n    \u00a0\u00a0uint64_t field3;\n    \u00a0\u00a0uint64_t field4;\n    \u00a0\u00a0uint64_t field5;\n    \u00a0\u00a0uint64_t field6;\n    };\n    struct Data2\n    {\n    \u00a0\u00a0vector<uint64_t> field1;\n    \u00a0\u00a0vector<uint64_t> field2;\n    \u00a0\u00a0vector<uint64_t> field3;\n    \u00a0\u00a0vector<uint64_t> field4;\n    \u00a0\u00a0vector<uint64_t> field5;\n    \u00a0\u00a0vector<uint64_t> field6;\n    };\n    struct Sum\n    {\n    \u00a0\u00a0uint64_t field1;\n    \u00a0\u00a0uint64_t field2;\n    \u00a0\u00a0uint64_t field3;\n    \u00a0\u00a0Sum(): field1(), field2(), field3() {}\n    };\n    ```", "```cpp\n    Sum sumAOS(vector<Data1> &aos)\n    {\n    \u00a0\u00a0TIME_IT;\n    \u00a0\u00a0Sum ret;\n    \u00a0\u00a0for(int i = 0; i < N; ++i)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0ret.field1 += aos[i].field1;\n    \u00a0\u00a0\u00a0\u00a0ret.field2 += aos[i].field2;\n    \u00a0\u00a0\u00a0\u00a0ret.field3 += aos[i].field3;\n    \u00a0\u00a0}\n    \u00a0\u00a0return ret;\n    }\n    Sum sumSOA(Data2 &soa)\n    {\n    \u00a0\u00a0TIME_IT;\n    \u00a0\u00a0Sum ret;\n    \u00a0\u00a0for(int i = 0; i < N; ++i) \n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0ret.field1 += soa.field1[i];\n    \u00a0\u00a0\u00a0\u00a0ret.field2 += soa.field2[i];\n    \u00a0\u00a0\u00a0\u00a0ret.field3 += soa.field3[i];\n    \u00a0\u00a0}\n    \u00a0\u00a0return ret;\n    }\n    ```", "```cpp\n    int main()\n    {\n    \u00a0\u00a0\u00a0vector<Data1> arrOfStruct;\n    \u00a0\u00a0\u00a0Data2 structOfArr;\n\n    \u00a0\u00a0\u00a0// Reserve space\n    \u00a0\u00a0\u00a0structOfArr.field1.reserve(N);\n    \u00a0\u00a0\u00a0structOfArr.field2.reserve(N);\n    \u00a0\u00a0\u00a0structOfArr.field3.reserve(N);\n    \u00a0\u00a0\u00a0arrOfStruct.reserve(N);\n    \u00a0\u00a0\u00a0// Fill random values\n    \u00a0\u00a0\u00a0for(int i = 0; i < N; ++i)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0Data1 temp;\n    \u00a0\u00a0\u00a0\u00a0\u00a0temp.field1 = dist(rng);\n    \u00a0\u00a0\u00a0\u00a0\u00a0temp.field2\u00a0\u00a0= dist(rng);\n    \u00a0\u00a0\u00a0\u00a0\u00a0temp.field3 = dist(rng);\n    \u00a0\u00a0\u00a0\u00a0\u00a0arrOfStruct.push_back(temp);\n    \u00a0\u00a0\u00a0\u00a0\u00a0structOfArr.field1.push_back(temp.field1);\n    \u00a0\u00a0\u00a0\u00a0\u00a0structOfArr.field2.push_back(temp.field2);\n    \u00a0\u00a0\u00a0\u00a0\u00a0structOfArr.field3.push_back(temp.field3);\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0Sum s1 = sumAOS(arrOfStruct);\n    \u00a0\u00a0Sum s2 = sumSOA(structOfArr);\n    \u00a0\u00a0Timer::dump();\n    }\n    ```", "```cpp\n    $ g++ -O3 Snippet12.cpp Timer.cpp\n    $ ./a.out\n    ```", "```cpp\n    int wordCount(const std::string &s)\n    {\n    \u00a0\u00a0int count = 0;\n    \u00a0\u00a0for(int i = 0, j = 1; i < s.size() - 1; ++i, ++j)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0if(!isspace(s[i]) && isspace(s[j]))\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0++count;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}\n    \u00a0\u00a0return count;\n    }\n    ```", "```cpp\n    $ g++ -O3 Snippet13.cpp SnippetWC.cpp Timer.cpp\n    $ ./a.out data.txt\n    ```", "```cpp\n    $ time wc -w data.txt\n    ```", "```cpp\n    int wordCount(const std::string &s)\n    {\n    \u00a0\u00a0// Create a lookup table\n    \u00a0\u00a0bool isSpace[256];\n    \u00a0\u00a0for(int i = 0; i < 256; ++i)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0isSpace[i] = isspace((unsigned char)i);\n    \u00a0\u00a0}\n    \u00a0\u00a0int count = 0;\n    \u00a0\u00a0int len = s.size() - 1;\n    \u00a0\u00a0for(int i = 0, j = 1; i < len; ++i, ++j)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0count += !isSpace[s[i]] & isSpace[s[j]];\n    \u00a0\u00a0}\n    \u00a0\u00a0return count;\n    }\n    ```", "```cpp\n    !isSpace[s[i]] & isSpace[s[j]]\n    ```", "```cpp\n    (!isSpace[s[i]] && isSpace[s[j]]) ? 1 : 0\n    ```", "```cpp\n    $ g++ -O3 Snippet14.cpp SnippetWC.cpp Timer.cpp\n    $ ./a.out data.txt\n    ```", "```cpp\n    // Create a lookup table for every pair of chars\n    bool table[65536];\n    for(int i = 0; i < 256; ++i)\n    {\n    \u00a0\u00a0for(int j = 0; j < 256; ++j)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0int idx = j + i * 256;\n    \u00a0\u00a0\u00a0\u00a0table[idx] = !isspace(j) && isspace(i);\n    \u00a0\u00a0}\n    }\n    ```", "```cpp\n    $ g++ -O3 Snippet15.cpp SnippetWC.cpp Timer.cpp\n    $ ./a.out data.txt\n    ```", "```cpp\n    X OP (a[0] OP2 b[0]) OP (a[1] OP2 b[1]) OP (a[2] OP2 b[2]) ... OP (a[N] OP2 b[N])\u00a0\u00a0\n    ```", "```cpp\n    $ g++ -O3 Snippet16.cpp SnippetWC.cpp Timer.cpp\n    $ ./a.out data.txt\n    ```", "```cpp\n    $ g++ -O3 Snippet17.cpp SnippetWC.cpp Timer.cpp\n    $ ./a.out data.txt\n    ```", "```cpp\n    $ g++ -O3 -fopenmp -D_GLIBCXX_PARALLEL Snippet17.cpp SnippetWC.cpp Timer.cpp\n    $ ./a.out data.txt\n    ```", "```cpp\n    $ g++ -O3 -fopenmp -D_GLIBCXX_PARALLEL Snippet16.cpp SnippetWC.cpp Timer.cpp\n    $ ./a.out data.txt\n    ```", "```cpp\n    int wordCount(const std::string &s)\n    {\n    \u00a0\u00a0auto isWordEnd = [&](char a, char b) \n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0return a > 32 & b < 33; \n    \u00a0\u00a0};\n    \u00a0\u00a0return std::inner_product(s.begin(), s.end()-1, s.begin()+1, 0, std::plus<int>(), isWordEnd);\n    }\n    ```", "```cpp\n    $ g++ -O3 Snippet18.cpp SnippetWC.cpp Timer.cpp\n    $ ./a.out data.txt\n    ```", "```cpp\n    $ g++ -O3 -fopenmp -D_GLIBCXX_PARALLEL Snippet18.cpp SnippetWC.cpp Timer.cpp\n    $ ./a.out data.txt\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Timer t(\"File read\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0buf << ifs.rdbuf(); \n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Timer t(\"String copy\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sContent = buf.str();\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Timer t(\"String push\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sContent.push_back(' ');\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0int wc;\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Timer t(\"Word count\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0wc = wordCount(sContent);\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    $ g++ -O3 Snippet18.cpp SnippetWC2.cpp Timer.cpp\n    $ ./a.out data.txt\n    ```", "```cpp\n    {\n    \u00a0\u00a0Timer t(\"File read\");\n    \u00a0\u00a0buf << ifs.rdbuf(); \n    } \n    {\n    \u00a0\u00a0Timer t(\"String copy\");\n    \u00a0\u00a0sContent = buf.str();\n    }\n    int wc;\n    {\n    \u00a0\u00a0Timer t(\"Word count\");\n    \u00a0\u00a0wc = wordCount(sContent);\n    }\n    ```", "```cpp\n    int wordCount(const std::string &s)\n    {\n    \u00a0\u00a0auto isWordStart = [&](char a, char b) \n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0return a < 33 & b > 32; \n    \u00a0\u00a0};\n    \u00a0\u00a0// Count the first word if any\n    \u00a0\u00a0int count = s[0] > 32;\n    \u00a0\u00a0// count the remaining\n    \u00a0\u00a0return std::inner_product(s.begin(), s.end()-1, s.begin()+1, count, std::plus<int>(), isWordStart);\n    }\n    ```", "```cpp\n    int count = std::inner_product(s.begin(), s.end()-1, s.begin()+1, 0, std::plus<int>(), isWordEnd);\n    // count the last word if any\n    if(s.back() > 32) \n    {\n    \u00a0\u00a0++count;\n    }\n    return count;\n    ```", "```cpp\n    $ g++ -O3 Snippet19.cpp SnippetWC3.cpp Timer.cpp\n    $ ./a.out data.txt\n    ```", "```cpp\n    $ g++ -O3 Snippet20.cpp SnippetWC3.cpp Timer.cpp\n    $ ./a.out data.txt\n    ```", "```cpp\n    $ g++ -O3 Snippet21.cpp SnippetWC3.cpp Timer.cpp\n    $ ./a.out data.txt\n    ```", "```cpp\n    string sContent;\n    {\n    \u00a0\u00a0Timer t(\"String Alloc\");\n    \u00a0\u00a0// Seek to end and reserve memory\n    \u00a0\u00a0ifs.seekg(0, std::ios::end);\u00a0\u00a0\u00a0\n    \u00a0\u00a0sContent.resize(ifs.tellg());\n    }\n    {\n    \u00a0\u00a0Timer t(\"File read\");\n    \u00a0\u00a0// Seek back to start and read data\n    \u00a0\u00a0ifs.seekg(0, std::ios::beg);\n    \u00a0\u00a0ifs.read(&sContent[0], sContent.size());\n    }\n    int wc;\n    {\n    \u00a0\u00a0Timer t(\"Word count\");\n    \u00a0\u00a0wc = wordCount(sContent);\n    }\u00a0\u00a0\n    ```", "```cpp\n    $ g++ -O3 Snippet21.cpp SnippetWC4.cpp Timer.cpp\n    ```", "```cpp\n    $ g++ -O3 -march=native Snippet22.cpp SnippetWC5.cpp Timer.cpp\n    $ ./a.out data.txt\n    ```", "```cpp\n    $ g++ -O3 Speller1.cpp Timer.cpp\n    $ ./a.out\n    ```"]