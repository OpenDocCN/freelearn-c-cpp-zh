- en: Assessments
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估
- en: Chapter 1
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章
- en: The act of making system calls to accomplish tasks provided by the operating
    system is called **system programming**.
  id: totrans-2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过系统调用来完成操作系统提供的任务的行为称为**系统编程**。
- en: By calling an operating system's interrupt handlers.
  id: totrans-3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过调用操作系统的中断处理程序。
- en: Special instructions were added to the CPU to support system calls without the
    need to call an interrupt handler, which saves more of the CPU state prior to
    execution.
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 特殊指令已添加到CPU以支持系统调用，无需调用中断处理程序，这在执行之前保存了更多的CPU状态。
- en: No. Most implementations of `malloc()`/`free()` ask for a large amount of memory
    from the operating system and then divide up that memory during the program's
    execution. A system call is only needed when this memory runs out and `malloc()`/`free()`
    must ask for more.
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不。`malloc()`/`free()`的大多数实现会从操作系统请求大量内存，然后在程序执行期间划分该内存。只有在内存用尽并且`malloc()`/`free()`必须请求更多内存时才需要系统调用。
- en: Speculative execution.
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 推测执行。
- en: Type safety is the extent to which a programming language helps to prevent errors
    due to the differences between types. Strongly typed languages prevent these types
    of error more than weakly typed languages.
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类型安全是编程语言帮助防止由于类型之间差异而导致错误的程度。强类型语言比弱类型语言更能防止这些类型的错误。
- en: C++ templates provide a user with the ability to define your code without having
    to define type information ahead of time.
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: C++模板为用户提供了在不提前定义类型信息的情况下定义代码的能力。
- en: Chapter 2
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章
- en: Yes. Most of the C standard is also part of the POSIX standard. POSIX generally
    goes above and beyond to provide additional facilities specific to POSIX operating
    systems. Examples of C and POSIX functions include `read()` and `write()`.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是的。C标准的大部分内容也是POSIX标准的一部分。 POSIX通常会提供特定于POSIX操作系统的附加设施。 C和POSIX函数的示例包括`read()`和`write()`。
- en: '`_start()` is the entry point to an application and is usually provided by
    the C runtime facilities. `main()` is a function provided by the user and is usually
    the first function to execute in the user''s code, which is eventually called
    by the C runtime facilities once the application is fully initialized.'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`_start()`是应用程序的入口点，通常由C运行时设施提供。`main()`是用户提供的函数，通常是用户代码中要执行的第一个函数，最终由C运行时设施在应用程序完全初始化后调用。'
- en: Executing global constructors and destructors, and initializing C++ exceptions.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行全局构造函数和析构函数，并初始化C++异常。
- en: Before.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之前。
- en: C++ name mangling embeds the entire signature of a function into the function's
    symbol. This is not only needed to provide support for function overloading in
    C++, but also ensures that the linker doesn't accidentally dynamically link two
    functions with the same name that have different signatures (which can happen
    in C).
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: C++名称修饰将函数的整个签名嵌入到函数的符号中。这不仅需要为C++中的函数重载提供支持，还确保链接器不会意外地动态链接两个具有相同名称但具有不同签名的函数（这在C中可能会发生）。
- en: C symbols are not mangled. C++ are.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: C符号不会被修饰。C++会。
- en: A pointer can point to any memory, including a `nullptr`. A reference cannot.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指针可以指向任何内存，包括`nullptr`。引用则不行。
- en: Chapter 3
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章
- en: This depends on the CPU architecture. On some CPUs, a short `int` is 16 bits
    wide, while an `int` is 32 bits wide. This is not the case on all CPUs.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这取决于CPU架构。在某些CPU上，短`int`为16位宽，而`int`为32位宽。但并非所有CPU都是这样。
- en: This depends on the CPU architecture. On most CPUs, an `int` is 32 bits wide,
    but this is not always the case.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这取决于CPU架构。在大多数CPU上，`int`是32位宽，但并非总是如此。
- en: No.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不。
- en: An `int32_t` will always be 32 bits wide. On some CPUs, an `int` could be 16,
    32, or 64 bits wide.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`int32_t`始终为32位宽。在某些CPU上，`int`可以是16、32或64位宽。'
- en: Yes. These are called **exact-width** types and will always be the desired width.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是的。这些称为**精确宽度**类型，将始终是所需的宽度。
- en: Ensures that structures are not automatically padded by the compiler for optimizations.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保结构不会被编译器自动填充以进行优化。
- en: No.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不。
- en: Chapter 4
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章
- en: Structured binding provides the ability to retrieve the result of a structure
    by manually providing individual variables, for example, `auto [first, second]
    = std::pair{1, 2}`
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结构化绑定提供了通过手动提供单独变量来检索结构结果的能力，例如，`auto [first, second] = std::pair{1, 2}`
- en: You can now list nested namespace on the same line
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在可以在同一行上列出嵌套的命名空间
- en: You no longer need to provide an error message
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您不再需要提供错误消息
- en: Provides you with the ability to define a variable inside an `if` statement
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使您能够在`if`语句中定义变量
- en: Resource acquisition is initialization
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 资源获取即初始化
- en: To acquire and initialize a resource on construction and release the resource
    on destruction
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构造时获取和初始化资源，并在销毁时释放资源
- en: States who owns a pointer (that is, the entity responsible for deleting the
    pointer)
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指出谁拥有指针（即负责删除指针的实体）
- en: '`Expects()` defines a functions input expectations and `Ensures()` defines
    a function''s output'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Expects()`定义了函数的输入期望，`Ensures()`定义了函数的输出'
- en: Chapter 5
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章
- en: '`rax`.'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`rax`。'
- en: '`rdi`.'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`rdi`。'
- en: subtracts.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 减法。
- en: A segment is a group of sections.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 段是一组部分。
- en: The information needed to handle exceptions.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 处理异常所需的信息。
- en: '`Fork()` creates a new process, while `exec()` overwrites an existing process
    with a new program. Both are needed to launch a new program.'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Fork()`创建一个新进程，而`exec()`用新程序覆盖现有进程。这两者都需要启动新程序。'
- en: second.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二。
- en: The process ID of the process that completed.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成的进程的进程ID。
- en: Chapter 6
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章
- en: '`std::cin` is type-aware.'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`std::cin`是类型感知的。'
- en: Capable of handling user-defined types providing cleaner, type-safe IO.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 能够处理用户定义的类型，提供更清晰、类型安全的IO。
- en: Format specifiers are often more flexible than `#include <iomanip>`.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 格式说明符通常比`#include <iomanip>`更灵活。
- en: Use `std::endl` if a flush must occur.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果必须发生刷新，请使用`std::endl`。
- en: '`std::cerr` will flush after each write, while `std::clog` will not. Use `std::cerr`
    when handling errors to ensure that all debugging information is successfully
    flushed prior to a catastrophic issue.'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`std::cerr`在每次写入后会刷新，而`std::clog`不会。在处理错误时，请使用`std::cerr`确保在灾难性问题发生之前成功刷新所有调试信息。'
- en: '`std::internal`.'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`std::internal`。'
- en: By using both `std::oct` and `std::uppercase`.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过同时使用`std::oct`和`std::uppercase`。
- en: By leveraging a `gsl::span`.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过利用`gsl::span`。
- en: By leveraging the `rdbuf()` member function.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过利用`rdbuf()`成员函数。
- en: Chapter 7
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章
- en: '`new()` allocates a single object, while `new()` allocates an array of objects.'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`new()`分配单个对象，而`new()`分配对象数组。'
- en: No.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不。
- en: Global memory is visible to the entire program, while static memory (defined
    globally) is only visible to the source file in which it is defined.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 全局内存对整个程序可见，而静态内存（在全局定义）仅对定义它的源文件可见。
- en: By leveraging an alias with the `alignas()` function, such as `using aligned_int
    alignas(0x1000) = int;`.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用`alignas()`函数的别名，比如`using aligned_int alignas(0x1000) = int;`。
- en: Not in C++17 and below
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不适用于C++17及以下版本
- en: '`std::shared_ptr` should only be used if more than one object must own the
    memory (that is, the memory needs to be able to be released by more than one object
    in any order and at any time).'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只有在多个对象必须拥有内存时才应该使用`std::shared_ptr`（也就是说，内存需要能够以任何顺序和任何时间被多个对象释放）。
- en: Yes (depending on the operating system and permissions).
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是的（取决于操作系统和权限）。
- en: If you allocate 4 bytes and use 3, you have created internal fragmentation (wasted
    memory). If you allocate memory in such a way that the allocator no longer has
    contiguous blocks of memory to give out (even if it has a lot of free memory),
    you have created external fragmentation.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果分配了4个字节并使用了3个，那么就会产生内部碎片（浪费内存）。如果以这样的方式分配内存，使得分配器不再具有连续的内存块可供分配（即使它有大量空闲内存），那么就会产生外部碎片。
- en: Chapter 8
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章
- en: '`is_open()`'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`is_open()`'
- en: '`std::ios_base::in` | `std::ios_base::out`'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`std::ios_base::in` | `std::ios_base::out`'
- en: '`0` is read and a flag is set'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 读取`0`并设置标志
- en: Buffer overflow errors
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 缓冲区溢出错误
- en: 'Yes'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是的
- en: test
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试
- en: '`/home/user`'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`/home/user`'
- en: Chapter 9
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章
- en: This means that two instances of the same allocator are always equal, which
    in turn means that both allocators can allocate and deallocate each other's memory.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这意味着相同分配器的两个实例始终相等，这反过来意味着两个分配器都可以分配和释放彼此的内存。
- en: If two instances of the same allocator can allocate and deallocate each other's
    memory.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果相同分配器的两个实例可以分配和释放彼此的内存。
- en: Yes.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是的。
- en: Yes.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是的。
- en: When a container is copied, its allocator is also copied.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当容器被复制时，它的分配器也被复制。
- en: It provides the container with the ability to create a copy of the allocator
    it was provided for a different type.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它为容器提供了使用为不同类型创建分配器的副本的能力。
- en: For `std::list`, `n ==1`; for `std::vector`, `n` can be any number.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`std::list`，`n ==1`；对于`std::vector`，`n`可以是任何数字。
- en: Chapter 10
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章
- en: UDP is connectionless.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: UDP是无连接的。
- en: '`SOCK_DGRAM`'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`SOCK_DGRAM`'
- en: '`SOCK_STREAM`'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`SOCK_STREAM`'
- en: IPV4.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: IPV4。
- en: '`Bind()` allocates a port, while `connect()` connects to a previously allocated
    port.'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Bind()`分配一个端口，而`connect()`连接到先前分配的端口。'
- en: '`sendto()` takes the address as a parameter and is usually used by UDP, while
    `send()` is usually used by TCP.'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`sendto()`以地址作为参数，通常由UDP使用，而`send()`通常由TCP使用。'
- en: It doesn't.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它不会。
- en: Type safety.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类型安全。
- en: Chapter 11
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章
- en: Thursday, 1 January 1970
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 1970年1月1日星期四
- en: The number of seconds since the UNIX epoch began.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 自UNIX纪元开始以来的秒数。
- en: '`clock()` is relative to the execution of the program.'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`clock()`相对于程序的执行。'
- en: Non-POSIX operating systems might support fractional time.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 非POSIX操作系统可能支持分数时间。
- en: A wrapper around `difftime()`.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`difftime()`的包装器。'
- en: A steady clock provides the actual time, while a high resolution timer provides
    a number that only provides a value when used with `duration{}`.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 稳定时钟提供实际时间，而高分辨率计时器提供的数字只有在与`duration{}`一起使用时才提供值。
- en: Chapter 12
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章
- en: '`pthread_self()`'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pthread_self()`'
- en: They are not type safe.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它们不是类型安全的。
- en: When two threads race to read/write the same resource.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当两个线程竞争读/写相同的资源时。
- en: When a thread waits on a synchronization primitive (for example, a mutex) that
    will never be released.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当线程等待永远不会被释放的同步原语（例如互斥锁）时。
- en: A C++ future provides a type-safe mechanism for returning the result of a thread.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: C++ future提供了一种类型安全的机制，用于返回线程的结果。
- en: To ensure that a function is only executed once, regardless of the number of
    threads that call it.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保函数只执行一次，而不管调用它的线程数是多少。
- en: '`std::shared_mutex` provides the ability to support multiple readers.'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`std::shared_mutex`提供了支持多个读取器的能力。'
- en: Allows a single thread to lock the same mutex more than once without entering
    deadlock.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 允许单个线程多次锁定同一互斥锁而不会陷入死锁。
- en: Chapter 13
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第13章
- en: C++ exceptions do not need to check the return result of every function call.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: C++异常不需要检查每个函数调用的返回结果。
- en: POSIX-style functions must reserve a part of a function's output to convey an
    error. For example, if a function must return a file handle, `0` is returned in
    the event of an error, which means that a file handle cannot have the value `0`.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: POSIX风格的函数必须保留函数输出的一部分以传达错误。例如，如果函数必须返回文件句柄，在发生错误时返回`0`，这意味着文件句柄不能具有值`0`。
- en: Set jump does not unwind the stack, which means destructors are skipped.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 跳转设置不会解开堆栈，这意味着析构函数被跳过。
- en: '`catch(...)`'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`catch(...)`'
- en: Instructions on how to unwind a stack must be stored for every function. This
    is the tradeoff for increased performance.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 必须为每个函数存储如何解开堆栈的指令。这是为了提高性能而进行的权衡。
- en: They are slow.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它们很慢。
