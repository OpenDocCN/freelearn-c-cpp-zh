["```cpp\n    #include <thread>\n    int main()\n    {\n    \u00a0\u00a0std::thread myThread;\u00a0\u00a0\n    \u00a0\u00a0return 0;\n    }\n    ```", "```cpp\n    #include <iostream>\n    #include <thread>\n    void printHello()\n    {\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"hello\" << std::endl;\n    }\n    int main()\n    {\n    \u00a0\u00a0std::thread myThread(printHello);\n    \u00a0\u00a0myThread.join();\n    \u00a0\u00a0return 0;\n    }\n    ```", "```cpp\n#include <iostream>\nvoid printHello1()\n{\n\u00a0\u00a0\u00a0\u00a0std::cout << \"Hello from printHello1()\" << std::endl;\u00a0\u00a0\u00a0\u00a0\n}\nvoid printHello2()\n{\n\u00a0\u00a0\u00a0\u00a0std::cout << \"Hello from printHello2()\" << std::endl;\u00a0\u00a0\u00a0\u00a0\n}\nvoid printHello3()\n{\n\u00a0\u00a0\u00a0\u00a0std::cout << \"Hello from printHello3()\" << std::endl;\u00a0\u00a0\u00a0\u00a0\n}\nvoid printHello4()\n{\n\u00a0\u00a0\u00a0\u00a0std::cout << \"Hello from printHello4()\" << std::endl;\u00a0\u00a0\u00a0\u00a0\n}\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0printHello1();\n\u00a0\u00a0\u00a0\u00a0printHello2();\n\u00a0\u00a0\u00a0\u00a0printHello3();\n\u00a0\u00a0\u00a0\u00a0printHello4();\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```cpp\n#include <iostream>\n#include <thread>\nvoid printHello1()\n{\n\u00a0\u00a0\u00a0\u00a0std::cout << \"Hello from printHello1()\" << std::endl;\u00a0\u00a0\u00a0\u00a0\n}\nvoid printHello2()\n{\n\u00a0\u00a0\u00a0\u00a0std::cout << \"Hello from printHello2()\" << std::endl;\u00a0\u00a0\u00a0\u00a0\n}\nvoid printHello3()\n{\n\u00a0\u00a0\u00a0\u00a0std::cout << \"Hello from printHello3()\" << std::endl;\u00a0\u00a0\u00a0\u00a0\n}\nvoid printHello4()\n{\n\u00a0\u00a0\u00a0\u00a0std::cout << \"Hello from printHello4()\" << std::endl;\u00a0\u00a0\u00a0\u00a0\n}\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0std::thread thread1(printHello1);\n\u00a0\u00a0\u00a0\u00a0thread1.join();\n\u00a0\u00a0\u00a0\u00a0std::thread thread2(printHello2);\n\u00a0\u00a0\u00a0\u00a0thread2.join();\n\u00a0\u00a0\u00a0\u00a0std::thread thread3(printHello3);\n\u00a0\u00a0\u00a0\u00a0thread3.join();\n\u00a0\u00a0\u00a0\u00a0std::thread thread4(printHello4);\n\u00a0\u00a0\u00a0\u00a0thread4.join();\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```cpp\n#include <iostream>\n#include <thread>\n#include <chrono>\nvoid printHello1()\n{\n\u00a0\u00a0\u00a0\u00a0std::cout << \"Hello from thread: \" << std::this_thread::get_id() << std::endl;\u00a0\u00a0\u00a0\u00a0\n}\nvoid printHello2()\n{\n\u00a0\u00a0\u00a0\u00a0std::cout << \"Hello from thread: \" << std::this_thread::get_id() << std::endl;\u00a0\u00a0\u00a0\u00a0\n}\nvoid printHello3()\n{\n\u00a0\u00a0\u00a0\u00a0std::cout << \"Hello from thread: \" << std::this_thread::get_id() << std::endl;\u00a0\u00a0\u00a0\u00a0\n}\nvoid printHello4()\n{\n\u00a0\u00a0\u00a0\u00a0std::cout << \"Hello from thread: \" << std::this_thread::get_id() << std::endl;\u00a0\u00a0\u00a0\u00a0\n}\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0std::thread thread1(printHello1);\n\u00a0\u00a0\u00a0\u00a0std::thread thread2(printHello2);\n\u00a0\u00a0\u00a0\u00a0std::thread thread3(printHello3);\n\u00a0\u00a0\u00a0\u00a0std::thread thread4(printHello4);\n\u00a0\u00a0\u00a0\u00a0thread1.detach();\n\u00a0\u00a0\u00a0\u00a0thread2.detach();\n\u00a0\u00a0\u00a0\u00a0thread3.detach();\n\u00a0\u00a0\u00a0\u00a0thread4.detach();\n\n\u00a0\u00a0\u00a0\u00a0using namespace std::chrono_literals;\n\u00a0\u00a0\u00a0\u00a0std::this_thread::sleep_for(2s);\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```cpp\n#include <thread>\nvoid runMessageLoop()\n{\n\u00a0\u00a0\u00a0\u00a0while (true)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (message)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::thread procRes(processResults, message);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0procRes.detach();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n}\nvoid processResults(Result res)\n{\n\u00a0\u00a0\u00a0\u00a0display();\n}\nvoid sendRequest(Currency from, Currency to, double amount)\n{\n\u00a0\u00a0\u00a0\u00a0send();\n}\nvoid displayProgress()\n{\n}\nvoid getUserInput()\n{\n\u00a0\u00a0\u00a0\u00a0Currency from;\n\u00a0\u00a0\u00a0\u00a0Currency to;\n\u00a0\u00a0\u00a0\u00a0double amount;\n\u00a0\u00a0\u00a0\u00a0std::thread progress(displayProgress);\n\u00a0\u00a0\u00a0\u00a0progress.detach();\n\u00a0\u00a0\u00a0\u00a0std::thread request(sendRequest, from, to, amount);\n\u00a0\u00a0\u00a0\u00a0request.detach();\n}\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0std::thread messageLoop(runMessageLoop);\n\u00a0\u00a0\u00a0\u00a0messageLoop.detach();\n\n\u00a0\u00a0\u00a0\u00a0std::thread userInput(getUserInput);\n\u00a0\u00a0\u00a0\u00a0userInput.detach();\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```cpp\n    #include <iostream>\n    #include <thread>\n    #include <functional>\n    ```", "```cpp\n    void printNumbers()\n    {\n    \u00a0\u00a0\u00a0\u00a0for(int i = 0; i < 100; ++i)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << i << \" \";\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0std::cout << std::endl;\n    }\n    ```", "```cpp\n    class Printer\n    {\n    \u00a0\u00a0\u00a0\u00a0public:\n    \u00a0\u00a0\u00a0\u00a0void operator()()\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for(int i = 0; i < 100000; ++i)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!(i % 200))\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << std::endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"*\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    };\n    ```", "```cpp\n    int main()\n    {\n    \u00a0\u00a0\u00a0\u00a0auto printRevers = []()\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for(int i = 100; i >= 0; --i)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << i << \" \";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << std::endl;\n    \u00a0\u00a0\u00a0\u00a0};\n    \u00a0\u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```cpp\n    std::function<void()> printOther = []()\n    {\n    \u00a0\u00a0\u00a0\u00a0for(int i = 0; i < 100000; ++i)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!(i % 200))\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << std::endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"^\";\n    \u00a0\u00a0\u00a0\u00a0}\n    };\n    ```", "```cpp\n    std::thread thr1(printNumbers);\n    thr1.join();\n    ```", "```cpp\n    std::thread thr2(printRevers);\n    thr2.join();\n    ```", "```cpp\n    Printer print;\n    std::thread thr3(print);\n    thr3.detach();\n    ```", "```cpp\n    std::thread thr4(printOther);\n    thr4.detach();\n    ```", "```cpp\n    std::getchar();\n    ```", "```cpp\n    #include <iostream>\n    #include <chrono>\n    #include <thread>\n    ```", "```cpp\n    void divide(int& divisor, int& dividend)\n    {\n    \u00a0\u00a0\u00a0\u00a0if (0 != dividend)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Dividend = \" << dividend << std::endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Result: \" << (divisor / dividend) << std::endl;\u00a0\u00a0\u00a0\u00a0\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Error: dividend = 0\" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cpp\n    int main()\n    {\n    \u00a0\u00a0\u00a0\u00a0int divisor = 15;\n    \u00a0\u00a0\u00a0\u00a0int dividend = 5;\n    \u00a0\u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```cpp\n    std::thread thr1(divide, std::ref(divisor), std::ref(dividend));\n    thr1.detach();\n    std::getchar();\n    ```", "```cpp\n    if (0 != dividend)\n    {\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"Child thread goes sleep\" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0using namespace std::chrono_literals;\n    \u00a0\u00a0\u00a0\u00a0std::this_thread::sleep_for(2s);\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"Child thread woke up\" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"Dividend = \" << dividend << std::endl;\n    \u00a0\u00a0\u00a0\u00a0std::cout << (divisor / dividend) << std::endl;\n    }\n    ```", "```cpp\n    std::cout << \"Main thread goes sleep\" << std::endl;\n    using namespace std::chrono_literals;\n    std::this_thread::sleep_for(1s);\n    std::cout << \"Main thread woke up\" << std::endl;\n    dividend = 0;\u00a0\u00a0\u00a0\n    std::cout << \"Main thread set dividend to 0\" << std::endl;\n    ```", "```cpp\n    std::getchar();\n    ```", "```cpp\nThread A: a = doSomeStuff();\nThread B: b = a - doOtherStuff();\n```", "```cpp\nThread A: b = a - doSomeStuff();\nThread B: a = doOtherStuff();\n```", "```cpp\nThread A: a = doSomeStuff();\nThread B: b = a - doOtherStuff();\nThread C: a = doNewStuff();\n```", "```cpp\nclass Messages\n{\n\u00a0\u00a0\u00a0\u00a0public:\n\u00a0\u00a0\u00a0\u00a0Messages(const int& size)\n\u00a0\u00a0\u00a0\u00a0: ArraySize(size)\n\u00a0\u00a0\u00a0\u00a0, currentIdx(0)\n\u00a0\u00a0\u00a0\u00a0, msgArray(new std::string[ArraySize])\n\u00a0\u00a0\u00a0\u00a0{}\n\u00a0\u00a0\u00a0\u00a0void push(const std::string& msg)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0msgArray[currentIdx++] = msg;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0std::string pop()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0auto msg = msgArray[currentIdx - 1];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0msgArray[currentIdx - 1] = \"\";\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0--currentIdx;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return msg;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0bool full()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return ArraySize == currentIdx;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0bool empty()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 0 == currentIdx;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0private:\n\u00a0\u00a0\u00a0\u00a0const int ArraySize;\n\u00a0\u00a0\u00a0\u00a0int currentIdx;\n\u00a0\u00a0\u00a0\u00a0std::string * msgArray;\n};\n```", "```cpp\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0Messages msgs(10);\n\u00a0\u00a0\u00a0\u00a0std::thread thr1([&msgs](){\n\u00a0\u00a0\u00a0\u00a0while(true)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!msgs.full())\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0msgs.push(\"Hello\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}});\n\u00a0\u00a0\u00a0\u00a0std::thread thr2([&msgs](){\n\u00a0\u00a0\u00a0\u00a0while(true)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!msgs.empty())\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << msgs.pop() << std::endl;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}});\n\u00a0\u00a0\u00a0\u00a0thr1.detach();\n\u00a0\u00a0\u00a0\u00a0thr2.detach();\n\u00a0\u00a0\u00a0\u00a0using namespace std::chrono_literals;\n\u00a0\u00a0\u00a0\u00a0std::this_thread::sleep_for(2s);\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```cpp\n#include <thread>\nstd::thread* thr1;\nstd::thread* thr2;\nvoid someStuff()\n{\n\u00a0\u00a0\u00a0\u00a0thr1->join();\n}\nvoid someAnotherStuff()\n{\n\u00a0\u00a0\u00a0\u00a0thr2->join();\n}\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0std::thread t1(someStuff); \n\u00a0\u00a0\u00a0\u00a0std::thread t2(someAnotherStuff);\n\u00a0\u00a0\u00a0\u00a0thr1 = &t1;\n\u00a0\u00a0\u00a0\u00a0thr2 = &t2;\n\u00a0\u00a0\u00a0\u00a0using namespace std::chrono_literals;\n\u00a0\u00a0\u00a0\u00a0std::this_thread::sleep_for(2s);\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```cpp\nstd::thread thr1(someFunc);\nstd::thread thr2(someFunc);\nstd::thread thr3(someFunc);\nstd::thread thr4(someFunc);\nstd::thread thr5(someFunc);\nthr1.join();\nthr2.join();\nthr3.join();\nthr4.join();\nthr5.join();\n```", "```cpp\nstd::vector<std::thread> threads;\n```", "```cpp\nfor (int i = 0; i < 10; i++) \n{\n\u00a0\u00a0\u00a0\u00a0auto t = std::thread([i]()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"thread: \" << i << \"\\n\";\n\u00a0\u00a0\u00a0\u00a0});\n\u00a0\u00a0\u00a0\u00a0threads.push_back(std::move(t));\n}\n```", "```cpp\nfor (auto& thr: threads) \n{\n\u00a0\u00a0\u00a0\u00a0if (thr.joinable())\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0thr.join();\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\nclass Handler\n{\n\u00a0\u00a0\u00a0\u00a0std::thread\u00a0\u00a0threadHandler;\n\npublic:\n\u00a0\u00a0\u00a0\u00a0Handler(const Handler&) = delete;\n\u00a0\u00a0\u00a0\u00a0Handler& operator=(const Handler&) = delete;\n\u00a0\u00a0\u00a0\u00a0Handler(Handler && obj)\n\u00a0\u00a0\u00a0\u00a0: threadHandler(std::move(obj.threadHandler))\n\u00a0\u00a0\u00a0\u00a0{}\n\u00a0\u00a0\u00a0\u00a0Handler & operator=(Handler && obj)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (threadHandler.joinable())\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0threadHandler.join();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0threadHandler = std::move(obj.threadHandler);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return *this;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0~Handler()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0if (threadHandler.joinable())\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0threadHandler.join();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n};\n```", "```cpp\n    #include <iostream>\n    #include <thread>\n    ```", "```cpp\n    class Handler\n    { \n    public:\n    \u00a0\u00a0\u00a0\u00a0Handler()\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Handler()\" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0Handler(const Handler&)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Handler(const Handler&)\" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0Handler& operator=(const Handler&)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Handler& operator=(const Handler&)\" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return *this;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0Handler(Handler && obj)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Handler(Handler && obj)\" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0Handler & operator=(Handler && obj)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Handler & operator=(Handler && obj)\" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return *this;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0~Handler()\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"~Handler()\" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0}\n    };\n    ```", "```cpp\n    void doSomeJob(Handler&& h)\n    {\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"I'm here\" << std::endl;\n    }\n    ```", "```cpp\n    Handler handler;\n    std::thread thr1(doSomeJob, std::move(handler));\n    ```", "```cpp\n    thr1.detach();\n    using namespace std::chrono_literals; \n    std::this_thread::sleep_for(5s);\n    ```", "```cpp\nclass Converter\n{\n\u00a0\u00a0\u00a0\u00a0public:\n\u00a0\u00a0\u00a0\u00a0Converter(Converter&&)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0Converter& operator=(Converter&&)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return *this;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0Converter() = default;\n\u00a0\u00a0\u00a0\u00a0Converter(const Converter&) = delete;\n\u00a0\u00a0\u00a0\u00a0Converter& operator=(const Converter&) = delete;\n\u00a0\u00a0\u00a0\u00a0void operator()(const std::string&)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// do nothing\n\u00a0\u00a0\u00a0\u00a0}\n};\n```", "```cpp\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0Converter convert;\n\u00a0\u00a0\u00a0\u00a0std::thread convertThread(convert, \"convert me\");\n\u00a0\u00a0\u00a0\u00a0convertThread.join();\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```cpp\nstd::thread convertThread(std::move(convert), \"convert me\");\n```", "```cpp\nauto unique = std::make_unique<Converter>();\n```", "```cpp\nstd::thread convertThread([ unique = std::move(unique) ] { \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unique->operator()(\"convert me\");\n});\n```", "```cpp\n    #include <iostream>\n    #include <thread>\n    #include <vector>\n    #include <string>\n    ```", "```cpp\n    class Converter\n    {\n    \u00a0\u00a0\u00a0\u00a0public:\n    \u00a0\u00a0\u00a0\u00a0Converter(std::vector<std::string>& bufferIn)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: m_bufferIn(bufferIn)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0Converter(Converter&& rhs)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: m_bufferIn(std::move(rhs.m_bufferIn))\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0Converter(const Converter&) = delete;\n    \u00a0\u00a0\u00a0\u00a0Converter& operator=(const Converter&) = delete;\n    \u00a0\u00a0\u00a0\u00a0Converter& operator=(Converter&&) = delete;\n    \u00a0\u00a0\u00a0\u00a0void operator()(const int idx, std::vector<std::string>& result)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0try\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::string::const_iterator end = m_bufferIn.at(idx).end();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::string bufferOut;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (std::string::const_iterator iter = m_bufferIn.at(idx).begin(); iter != end; iter++)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (*iter >= 97 && *iter <= 122)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bufferOut += static_cast<char>(static_cast<int>(*iter) - 32);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bufferOut += *iter;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result[idx] = bufferOut;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0catch(...)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Invalid index\" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0private:\n    \u00a0\u00a0\u00a0\u00a0const std::vector<std::string>& m_bufferIn;\n    };\n    ```", "```cpp\n    const int numberOfTasks = 5;\n    std::vector<Converter> functions;\n    functions.reserve(numberOfTasks);\n    std::vector<std::thread> threads;\n    threads.reserve(numberOfTasks); \n    ```", "```cpp\n    std::vector<std::string> textArr;\n    textArr.emplace_back(\"In the previous topics, we learned almost all that we need to work with threads. But we still have something interesting to consider \u2013 how to synchronize threads using future results. When we considered condition variables we didn't cover the second type of synchronization with future results. Now it's time to learn that.\");\n    textArr.emplace_back(\"First of all, let's consider a real-life example. Imagine, you just passed the exam at the university. You were asked to wait some amount of time for results. So, you have time to coffee with your mates, and every 10-15 mins you check are results available. Then, when you finished all your other activities, you just come to the door of the lecture room and wait for results.\");\n    textArr.emplace_back(\"In this exercise, we will write a simple application where we will use std::move() with threads. First of all, we will implement a class that is move constructible. This class will convert lowercase text into uppercase text. Then we will create a vector of instances of this class. Next, we will create a vector of std::thread object. Finally, we will initialize threads with an object from the first vector\");\n    textArr.emplace_back(\"Let's consider one interesting issue. As you remember when we initialize std::thread all constructor arguments are copied into thread memory, including a callable object \u2013 lambda, function, std::function. But what if our callable object doesn't support copy semantic? For example, we created a class that has only move constructor and a move assignment operator:\");\n    textArr.emplace_back(\"Run this code in your editor. You will see in the terminal log from the default constructor, two logs from the move operator, then one log from a destructor, then message from the doSomeJob() function and, finally two other log messages from the destructor. We see that the move constructor is called twice. You will get the output like the following:\");\n    ```", "```cpp\n    for (int i = 0; i < numberOfTasks; ++i)\n    {\n    \u00a0\u00a0\u00a0\u00a0functions.push_back(Converter(textArr));\n    }\n    ```", "```cpp\n    std::vector<std::string> result;\n    for (int i = 0; i < numberOfTasks; ++i)\n    {\n    \u00a0\u00a0\u00a0\u00a0result.push_back(\"\");\n    }\n    int idx = 0;\n    ```", "```cpp\n    for (auto iter = functions.begin(); iter != functions.end(); ++iter)\n    {\n    \u00a0\u00a0\u00a0\u00a0std::thread tmp(std::move(*iter), idx, std::ref(result));\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n    \u00a0\u00a0\u00a0\u00a0threads.push_back(std::move(tmp));\n    \u00a0\u00a0\u00a0\u00a0from = to;\n    \u00a0\u00a0\u00a0\u00a0to += step;\n    }\n    ```", "```cpp\n    for (auto iter = threads.begin(); iter != threads.end(); ++iter)\n    {\n    \u00a0\u00a0\u00a0\u00a0\u00a0(*iter).detach();\n    }\n    ```", "```cpp\n    using namespace std::chrono_literals; \n    std::this_thread::sleep_for(5s);\n    ```", "```cpp\n    for (const auto& str : result)\n    {\n    \u00a0\u00a0\u00a0\u00a0std::cout << str;\n    }\n    ```", "```cpp\nstd::string toUppercase(const std::string& bufIn)\n{\n\u00a0\u00a0\u00a0\u00a0std::string bufferOut;\n\u00a0\u00a0\u00a0\u00a0for (std::string::const_iterator iter = bufIn.begin(); iter != bufIn.end(); iter++)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (*iter >= 97 && *iter <= 122)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bufferOut += static_cast<char>(static_cast<int>(*iter) - 32);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bufferOut += *iter;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0return bufferOut;\n}\n```", "```cpp\n#include <iostream>\n#include <future>\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0std::future<std::string> result = std::async(toUppercase, \"please, make it uppercase\");\n\u00a0\u00a0\u00a0\u00a0std::cout << \"Main thread isn't locked\" << std::endl;\n\u00a0\u00a0\u00a0\u00a0std::cout << \"Future result = \" << result.get() << std::endl;\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```cpp\nstd::future<std::string> result = std::async(toUppercase, \"please, make it uppercase\");\n```", "```cpp\nstd::future<std::string> result = std::async(std::launch::async, toUppercase, \"please, make it uppercase\");\n```", "```cpp\nstd::cout << \"Future result = \" << result.get() << std::endl;\n```", "```cpp\nstd::future<std::string> result = std::async(toUppercase, \"please, make it uppercase\");\nstd::cout << \"Main thread isn't locked\" << std::endl;\nstd::shared_future<std::string> sharedResult(std::move(result));\nstd::cout << \"Future result = \" << sharedResult.get() << std::endl;\nstd::shared_future<std::string> anotherSharedResult(sharedResult);\nstd::cout << \"Future result = \" << anotherSharedResult.get() << std::endl;\n```", "```cpp\nstd::future<std::string> result = std::async(toUppercase, \"please, make it uppercase\");\nstd::cout << \"Main thread isn't locked\" << std::endl;\nauto sharedResult = result.share();\nstd::cout << \"Future result = \" << sharedResult.get() << std::endl;\n```", "```cpp\n    std::packaged_task<std::string(const std::string&)> task(toUppercase);\n    ```", "```cpp\n    auto futureResult = task.get_future();\n    ```", "```cpp\n    std::thread thr1(std::move(task), \"please, make it uppercase\");\n    thr1.detach();\n    ```", "```cpp\n    std::cout << \"Future result = \" << futureResult.get() << std::endl;\n    ```", "```cpp\n#include <iostream>\n#include <future>\nvoid toUppercase(const std::string& bufIn)\n{\n\u00a0\u00a0\u00a0\u00a0std::string bufferOut;\n\u00a0\u00a0\u00a0\u00a0for (std::string::const_iterator iter = bufIn.begin(); iter != bufIn.end(); iter++)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (*iter >= 97 && *iter <= 122)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bufferOut += static_cast<char>(static_cast<int>(*iter) - 32);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bufferOut += *iter;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0using namespace std::chrono_literals;\n\u00a0\u00a0\u00a0\u00a0std::this_thread::sleep_for(2s);\n\u00a0\u00a0\u00a0\u00a0std::cout << bufferOut << std::endl;\n}\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0std::packaged_task<void(const std::string&)> task(toUppercase);\n\u00a0\u00a0\u00a0\u00a0auto futureResult = task.get_future();\n\u00a0\u00a0\u00a0\u00a0std::thread thr1(std::move(task), \"please, make it uppercase\");\n\u00a0\u00a0\u00a0\u00a0thr1.detach();\n\u00a0\u00a0\u00a0\u00a0std::cout << \"Main thread is not blocked here\" << std::endl;\n\u00a0\u00a0\u00a0\u00a0futureResult.get();\n\u00a0\u00a0\u00a0\u00a0std::cout << \"The packaged_task is done\" << std::endl;\n\u00a0\u00a0\u00a0\u00a0return 0;\n} \n```", "```cpp\nvoid toUppercase(const std::string& bufIn, std::promise<std::string> result)\n```", "```cpp\nresult.set_value(bufferOut);\n```", "```cpp\nstd::promise<std::string> stringInUpper;\n```", "```cpp\nstd::future<std::string> futureRes = stringInUpper.get_future();\n```", "```cpp\nstd::thread thr(toUppercase, \"please, make it uppercase\", std::move(stringInUpper));\nthr.detach();\n```", "```cpp\nfutureRes.wait();\nstd::cout << \"Result = \" << futureRes.get() << std::endl;\n```", "```cpp\n#include <iostream>\n#include <future>\nvoid toUppercase(const std::string& bufIn, std::promise<std::string> result)\n{\n\u00a0\u00a0\u00a0\u00a0std::string bufferOut;\n\u00a0\u00a0\u00a0\u00a0for (std::string::const_iterator iter = bufIn.begin(); iter != bufIn.end(); iter++)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (*iter >= 97 && *iter <= 122)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bufferOut += static_cast<char>(static_cast<int>(*iter) - 32);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bufferOut += *iter;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0result.set_value(bufferOut);\n}\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0std::promise<std::string> stringInUpper;\n\u00a0\u00a0\u00a0\u00a0std::future<std::string> futureRes = stringInUpper.get_future();\n\u00a0\u00a0\u00a0\u00a0std::thread thr(toUppercase, \"please, make it uppercase\", std::move(stringInUpper));\n\u00a0\u00a0\u00a0\u00a0thr.detach();\n\u00a0\u00a0\u00a0\u00a0std::cout << \"Main thread is not blocked here\" << std::endl;\n\u00a0\u00a0\u00a0\u00a0futureRes.wait();\n\u00a0\u00a0\u00a0\u00a0std::cout << \"Result = \" << futureRes.get() << std::endl;\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```cpp\n#include <sstream>\n#include <exception>\n#include <iostream>\n#include <future>\nstd::string getException()\n{\n\u00a0\u00a0\u00a0\u00a0std::stringstream ss;\n\u00a0\u00a0\u00a0\u00a0ss << \"Exception from thread: \";\n\u00a0\u00a0\u00a0\u00a0ss << std::this_thread::get_id();\n\u00a0\u00a0\u00a0\u00a0throw std::runtime_error(ss.str());\n}\n```", "```cpp\nstd::string toUppercase(const std::string& bufIn)\n{\n\u00a0\u00a0\u00a0\u00a0std::string bufferOut;\n\u00a0\u00a0\u00a0\u00a0for (std::string::const_iterator iter = bufIn.begin(); iter != bufIn.end(); iter++)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (*iter >= 97 && *iter <= 122)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bufferOut += static_cast<char>(static_cast<int>(*iter) - 32);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bufferOut += *iter;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0getException();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0return bufferOut;\n}\n```", "```cpp\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0try\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::thread thr(toUppercase, \"please, make it uppercase\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0thr.join();\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0catch(const std::exception& ex)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Caught an exception: \" << ex.what() << std::endl;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```cpp\n#include <iostream>\n#include <future>\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0std::future<std::string> result = std::async(toUppercase, \"please, make it uppercase\");\n\u00a0\u00a0\u00a0\u00a0try\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Future result = \" << result.get() << std::endl;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0catch(const std::exception& ex)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Caught an exception: \" << ex.what() << std::endl;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```cpp\n#include <iostream>\n#include <future>\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0std::packaged_task<std::string(const std::string&)> task(toUppercase);\n\u00a0\u00a0\u00a0\u00a0auto result = task.get_future();\n\u00a0\u00a0\u00a0\u00a0std::thread thr(std::move(task), \"please, make it uppercase\");\n\u00a0\u00a0\u00a0\u00a0thr.detach();\n\u00a0\u00a0\u00a0\u00a0try\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Future result = \" << result.get() << std::endl;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0catch(const std::exception& ex)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Caught an exception: \" << ex.what() << std::endl;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```cpp\nvoid toUppercase(const std::string& bufIn, std::promise<std::string> result)\n{\n\u00a0\u00a0\u00a0\u00a0std::string bufferOut;\n\u00a0\u00a0\u00a0\u00a0try\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (std::string::const_iterator iter = bufIn.begin(); iter != bufIn.end(); iter++)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (*iter >= 97 && *iter <= 122)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bufferOut += static_cast<char>(static_cast<int>(*iter) - 32);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bufferOut += *iter;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0getException();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0catch(const std::exception& ex)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result.set_exception(std::make_exception_ptr(ex));\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0result.set_value(bufferOut);\n}\n```", "```cpp\n#include <iostream>\n#include <future>\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0std::promise<std::string> upperResult;\n\u00a0\u00a0\u00a0\u00a0std::future<std::string> futureRes = upperResult.get_future();\n\u00a0\u00a0\u00a0\u00a0std::thread thr(toUppercase, \"please, make it uppercase\", std::move(upperResult));\n\u00a0\u00a0\u00a0\u00a0thr.detach();\n\u00a0\u00a0\u00a0\u00a0futureRes.wait();\n\u00a0\u00a0\u00a0\u00a0try\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Result = \" << futureRes.get() << std::endl;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0catch(...)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Caught an exception\" << std::endl;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```cpp\n    #include <iostream>\n    #include <thread>\n    #include <future>\n    ```", "```cpp\n    class ToUppercase\n    {\n    \u00a0\u00a0\u00a0\u00a0public:\n    \u00a0\u00a0\u00a0\u00a0std::string operator()(const std::string& bufIn)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::string bufferOut;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (std::string::const_iterator iter = bufIn.begin(); iter != bufIn.end(); iter++)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (*iter >= 97 && *iter <= 122)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bufferOut += static_cast<char>(static_cast<int>(*iter) - 32);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bufferOut += *iter;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return bufferOut;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0void operator()(const std::string& bufIn, std::promise<std::string> result)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::string bufferOut;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (std::string::const_iterator iter = bufIn.begin(); iter != bufIn.end(); iter++)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (*iter >= 97 && *iter <= 122)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bufferOut += static_cast<char>(static_cast<int>(*iter) - 32);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bufferOut += *iter;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result.set_value(bufferOut);\n    \u00a0\u00a0\u00a0\u00a0}\n    };\n    ```", "```cpp\n    ToUppercase ptConverter;\n    std::packaged_task<std::string(const std::string&)> upperCaseResult1(ptConverter);\n    std::future<std::string> futureUpperResult1= upperCaseResult1.get_future();\n    std::thread thr1(std::move(ptConverter), \"This is a string for the first asynchronous task\");\n    thr1.detach(); \n    ```", "```cpp\n    ToUppercase fConverter;\n    std::future<std::string> futureUpperResult2 = std::async(fConverter, \"This is a string for the asynchronous task\"); \n    ```", "```cpp\n    ToUppercase pConverter;\n    std::promise<std::string> promiseResult;\n    std::future<std::string> futureUpperResult3 = promiseResult.get_future();\n    std::thread thr2(pConverter, \"This is a string for the task that returns a promise\", std::move(promiseResult));\n    thr2.detach(); \n    ```", "```cpp\n    futureUpperResult3.wait();\n    std::cout\u00a0\u00a0<< \"Converted strings: \"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< futureUpperResult1.get() << std::endl\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< futureUpperResult2.get() << std::endl\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< futureUpperResult3.get() << std::endl;\n    ```"]