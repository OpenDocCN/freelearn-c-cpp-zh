- en: Chapter 7. Conversion Library
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章 转换库
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下配方：
- en: Data conversion
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据转换
- en: Image conversion
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图像转换
- en: Video conversion
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视频转换
- en: Currency conversion
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 货币转换
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Data kept within our computer environment is encoded in a variety of ways. Sometimes
    it can be used directly for a certain purpose, other times it needs to be converted
    to another format in order to fit the context of the task. The process of converting
    the data from one format to another also varies, depending on the source format
    as well as the target format. Sometimes the process can be very complex, especially
    when dealing with data that is feature-rich and sensitive, such as image or video
    conversion. Even a small error during the conversion process may render the file
    unusable.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们计算机环境中的数据以各种方式进行编码。有时它可以直接用于某种目的，其他时候需要将其转换为另一种格式以适应任务的上下文。根据源格式和目标格式，数据从一种格式转换为另一种格式的过程也各不相同。有时这个过程可能非常复杂，特别是在处理功能丰富和敏感的数据时，比如图像或视频转换。即使在转换过程中出现小错误，也可能使文件无法使用。
- en: Data conversion
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据转换
- en: Qt provides a set of classes and functions for easily converting between different
    types of data. This makes Qt more than just a GUI library; it is a complete platform
    for software development. The `QVariant` class, which we will be using in the
    following example, makes Qt even more flexible and powerful compared to similar
    conversion functionalities provided by the C++ standard library.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Qt提供了一组类和函数，用于轻松地在不同类型的数据之间进行转换。这使得Qt不仅仅是一个GUI库；它是一个完整的软件开发平台。`QVariant`类，我们将在下面的示例中使用，使Qt比C++标准库提供的类似转换功能更加灵活和强大。
- en: How to do it…
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Let''s learn how to convert various data types in Qt by following these steps:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下步骤学习如何在Qt中转换各种数据类型：
- en: Open up Qt Creator and create a new **Qt Console Application** project by going
    to **File** | **New File or Project**:![How to do it…](img/B02820_07_01.jpg)
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Qt Creator，并通过**文件** | **新建文件或项目**创建一个新的**Qt控制台应用程序**项目：![如何做…](img/B02820_07_01.jpg)
- en: 'Next, open up `main.cpp` and add the following headers to it:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开`main.cpp`并添加以下头文件：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, in the `main()` function, add the following code to convert a string
    to a number:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在`main()`函数中，添加以下代码将字符串转换为数字：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After that, we''ll convert a number back to a string:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们将把一个数字转换回字符串：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We also learn how to round down a value by using `qFloor()`:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还学习了如何使用`qFloor()`将值向下舍入：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then, by using `qCeil()`, we are able to round a number to the smallest integral
    value not smaller than its initial value:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，通过使用`qCeil()`，我们能够将数字舍入到不小于其初始值的最小整数值：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'After that, we will create a date time variable by converting from a string:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们将通过从字符串转换来创建一个日期时间变量：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Subsequently, we can also convert the date time variable back to a string with
    our own custom format:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 随后，我们还可以将日期时间变量转换为具有自定义格式的字符串：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We can call the `QString::toUpper()` function to convert a string variable
    to all capital letters:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以调用`QString::toUpper()`函数将字符串变量转换为全大写字母：
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'On the other hand, calling `QString::toLower()` will convert the string to
    all lowercase:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另一方面，调用`QString::toLower()`将把字符串转换为全小写：
- en: '[PRE8]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `QVariant` class provided by Qt is a very powerful data type that can be
    easily converted to other types without any effort by the programmer:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Qt提供的`QVariant`类是一种非常强大的数据类型，可以轻松转换为其他类型，程序员无需任何努力：
- en: '[PRE9]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This demonstrates how a single `QVariant` variable can be simultaneously converted
    to multiple data types without any effort by the programmer:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这演示了如何将单个`QVariant`变量同时转换为多个数据类型，而程序员无需任何努力：
- en: '[PRE10]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The full source code in `main.cpp` will now look like this:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`main.cpp`中的完整源代码现在看起来是这样的：'
- en: '![How to do it…](img/B02820_07_16.jpg)![How to do it…](img/B02820_07_19.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![如何做…](img/B02820_07_16.jpg)![如何做…](img/B02820_07_19.jpg)'
- en: Compile and run the project now and you should see something like this:![How
    to do it…](img/B02820_07_02.jpg)
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在编译并运行项目，你应该会看到类似这样的东西：![如何做…](img/B02820_07_02.jpg)
- en: How it works...
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: All the data types provided by Qt, such as `QString`, `QDateTime`, `QVariant`,
    and so on, contain functions that make conversion to other types easy and straightforward.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Qt提供的所有数据类型，如`QString`、`QDateTime`、`QVariant`等，都包含使转换到其他类型变得简单和直接的函数。
- en: Qt also provides its own object conversion function, `qobject_cast()`, which
    doesn't rely on the standard library. It is also more compatible with Qt and works
    well for converting between Qt's widget types and data types.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Qt还提供了自己的对象转换函数`qobject_cast()`，它不依赖于标准库。它也更兼容Qt，并且对于在Qt的窗口部件类型和数据类型之间进行转换非常有效。
- en: Qt also provides you with the `QtMath` class, which helps you to manipulate
    number variables, such as rounding up a floating point number or converting an
    angle from degrees to radians.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Qt还为您提供了`QtMath`类，它可以帮助您操作数字变量，例如将浮点数四舍五入或将角度从度转换为弧度。
- en: '`QVariant` is a special class that can be used to store data of all kinds of
    type. It can automatically determine the data type by examining the value stored
    in the variable. You can also easily convert the data to any of the types supported
    by the `QVariant` class by just calling a single function, such as `toFloat()`,
    `toInt()`, `toBool()`, `toChar()`, `toString()`, and so on.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`QVariant`是一个特殊的类，可以用于存储各种类型的数据。它可以通过检查变量中存储的值来自动确定数据类型。您还可以通过调用单个函数（如`toFloat()`、`toInt()`、`toBool()`、`toChar()`、`toString()`等）轻松地将数据转换为`QVariant`类支持的任何类型。'
- en: There's more…
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: Be aware that each of these conversions takes computing power to make it happen.
    Even though modern computers are extremely fast at handling operations such as
    these, you should be careful not to overdo it with a large quantity at the same
    time. If you're converting a large set of variables for complex calculations,
    it might slow down your computer significantly, so therefore try to convert variables
    only whenever it's deemed necessary.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，每次转换都需要计算资源才能实现。尽管现代计算机在处理此类操作时非常快速，但您应该小心，不要一次处理大量操作。如果您正在为复杂计算转换大量变量，可能会显著减慢计算机的速度，因此请尽量仅在必要时转换变量。
- en: Image conversion
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图像转换
- en: In this section, we will learn how to build a simple image converter that converts
    an image from one format to another. Qt supports reading and writing different
    types of image formats, and this support comes in the form of external DLL files
    due to licensing issues. However, you don't have to worry about that because as
    long as you include those DLL files in your project, it will work seamlessly across
    different formats. There are certain formats that only support reading and not
    writing, and some that support both. You can check out the full details at [http://doc.qt.io/qt-5/qtimageformats-index.html](http://doc.qt.io/qt-5/qtimageformats-index.html).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何构建一个简单的图像转换器，将图像从一种格式转换为另一种格式。Qt支持读取和写入不同类型的图像格式，这种支持以外部DLL文件的形式出现，这是由于许可问题。但是，您不必担心，因为只要将这些DLL文件包含在项目中，它将在不同格式之间无缝工作。有些格式仅支持读取而不支持写入，还有一些支持两者。您可以在[http://doc.qt.io/qt-5/qtimageformats-index.html](http://doc.qt.io/qt-5/qtimageformats-index.html)上查看完整的详细信息。
- en: How to do it…
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Qt''s built-in image libraries make image conversion really simple:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Qt内置的图像库使图像转换变得非常简单：
- en: First of all, open up Qt Creator and create a new **Qt Widgets Application**
    project.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，打开Qt Creator并创建一个新的**Qt Widgets Application**项目。
- en: Open up `mainwindow.ui` and add a line edit and push button to the canvas for
    selecting image files, a combo box for selecting the desired file format, and
    another push button for starting the conversion process:![How to do it…](img/B02820_07_03.jpg)
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`mainwindow.ui`，并在画布上添加一个行编辑和一个按钮，用于选择图像文件，一个下拉框，用于选择所需的文件格式，以及另一个按钮，用于启动转换过程：![如何操作...](img/B02820_07_03.jpg)
- en: Next, double-click the combo box and a window will appear for editing the combo
    box. We will add three items to the combo box list by clicking the **+** button
    three times and renaming the items `PNG`, `JPEG`, and `BMP`:![How to do it…](img/B02820_07_04.jpg)
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，双击下拉框，将出现一个窗口，用于编辑下拉框。我们将通过点击**+**按钮三次并将项目重命名为`PNG`，`JPEG`和`BMP`，向下拉框列表中添加三个项目：![如何操作...](img/B02820_07_04.jpg)
- en: After that, right-click on one of the push buttons and select **Go to slot…**,
    then click the **OK** button. A slot function will then be automatically added
    to your source files. Then, repeat this step for the other push button as well:![How
    to do it…](img/B02820_07_05.jpg)
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，右键单击其中一个按钮，选择**转到槽...**，然后单击**确定**按钮。然后，槽函数将自动添加到您的源文件中。然后，对另一个按钮重复此步骤：![如何操作...](img/B02820_07_05.jpg)
- en: 'Once you are done with the UI, let''s move over to the source code. Open up
    `mainwindow.h` and add in the following header:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成UI后，让我们转到源代码。打开`mainwindow.h`，并添加以下头文件：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then, open up `mainwindow.cpp` and define what will happen when the **Browse**
    button is clicked, which in this case is opening the file dialog to select an
    image file:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，打开`mainwindow.cpp`并定义单击**浏览**按钮时会发生什么，即打开文件对话框以选择图像文件：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Finally, we also define what will happen when the **Convert** button is clicked:![How
    to do it…](img/B02820_07_17.jpg)
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们还定义了单击**转换**按钮时会发生什么：![如何操作...](img/B02820_07_17.jpg)
- en: Build and run the program now and we should get a pretty simple image converter
    that looks like this:![How to do it…](img/B02820_07_06.jpg)
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在构建并运行程序，我们应该得到一个非常简单的图像转换器，看起来像这样：![如何操作...](img/B02820_07_06.jpg)
- en: How it works...
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The previous example uses the native `QImage` class from Qt, which contains
    functions that can access pixel data and manipulate it. It is also used to load
    an image file and extract its data through different decompression methods, depending
    on the format of the image. Once the data is extracted, you can then do anything
    you want with it, such as displaying the image on screen, manipulating its color
    information, resizing the image, or compressing it with another format and saving
    it as a file.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例使用了Qt中的本机`QImage`类，其中包含可以访问像素数据并操纵它的函数。它还用于通过不同的解压缩方法加载图像文件并提取其数据，具体取决于图像的格式。一旦提取了数据，您就可以对其进行任何操作，例如在屏幕上显示图像，操纵其颜色信息，调整图像大小，或者使用另一种格式对其进行压缩并将其保存为文件。
- en: We used `QFileInfo` to separate the filename from the extension so that we can
    amend the extension name with the new format selected by the user from the combo
    box. This way we can save the newly converted image in the same folder as the
    original image and automatically give it the same file name as well, except in
    a different format.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`QFileInfo`将文件名与扩展名分开，以便我们可以使用用户从下拉框中选择的新格式修改扩展名。这样，我们可以将新转换的图像保存在与原始图像相同的文件夹中，并自动以相同的文件名保存，只是格式不同。
- en: As long as you're trying to convert the image to a format supported by Qt, all
    you need to do is to call `QImage::save()`. Internally, Qt will figure out the
    rest for you and output the image to the chosen format. In the `QImage::save()`
    function, there is a parameter that sets the image quality and another for setting
    the format. In this example, we just set both as the default values, which saves
    the image at the highest quality and lets Qt figure out the format by checking
    the extension stated in the output file name.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 只要您尝试将图像转换为Qt支持的格式，您只需要调用`QImage::save()`。在内部，Qt会为您解决其余问题，并将图像输出到所选格式。在`QImage::save()`函数中，有一个设置图像质量的参数，另一个用于设置格式。在本例中，我们将两者都设置为默认值，这将以最高质量保存图像，并让Qt通过检查输出文件名中的扩展名来确定格式。
- en: There's more…
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Here are some tips. You can also convert an image to PDF by using the `QPdfWriter`
    class provided by Qt. Essentially, what you do is paint the selected image to
    the layout of a newly created PDF document and set its resolution accordingly.
    For more information about the `QPdfWriter` class, visit [http://doc.qt.io/qt-5/qpdfwriter.html](http://doc.qt.io/qt-5/qpdfwriter.html).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些提示。您还可以使用Qt提供的`QPdfWriter`类将图像转换为PDF。基本上，您要做的是将所选图像绘制到新创建的PDF文档的布局中，并相应地设置其分辨率。有关`QPdfWriter`类的更多信息，请访问[http://doc.qt.io/qt-5/qpdfwriter.html](http://doc.qt.io/qt-5/qpdfwriter.html)。
- en: Video conversion
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 视频转换
- en: In this recipe, we will create a simple video converter using Qt and FFmpeg,
    a leading multimedia framework that is free and open source. Although Qt does
    support playing video files through its widget, it does not support video conversion
    at the moment. Fear not! You can actually still achieve the same goal by making
    your program cooperate with another standalone program through the `QProcess`
    class provided by Qt.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将使用Qt和FFmpeg创建一个简单的视频转换器，FFmpeg是一个领先的多媒体框架，是免费开源的。虽然Qt确实支持通过其小部件播放视频文件，但目前不支持视频转换。不用担心！通过Qt提供的`QProcess`类，您实际上仍然可以通过使您的程序与另一个独立程序合作来实现相同的目标。
- en: How to do it…
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s make a simple video converter with the following steps:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下步骤制作一个简单的视频转换器：
- en: Download FFmpeg (static package) from [http://ffmpeg.zeranoe.com/builds](http://ffmpeg.zeranoe.com/builds)
    and extract the contents to `C:/FFmpeg/`.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[http://ffmpeg.zeranoe.com/builds](http://ffmpeg.zeranoe.com/builds)下载FFmpeg（静态包），并将内容提取到`C:/FFmpeg/`。
- en: Then, open up Qt Creator and create a new **Qt Widgets Application** project
    by going to **File** | **New File or Project…**.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，打开Qt Creator，并通过**文件** | **新建文件或项目…**创建一个新的**Qt Widgets应用程序**项目。
- en: After that, open up `mainwindow.ui` and we're going to work on the program's
    user interface. Its UI is very similar to the previous example, except we add
    an extra text edit widget to the canvas, just below the combo box:![How to do
    it…](img/B02820_07_07.jpg)
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，打开`mainwindow.ui`，我们将在程序的用户界面上进行工作。它的用户界面与之前的示例非常相似，只是我们在画布下方添加了一个额外的文本编辑小部件，就在组合框下面：![如何做…](img/B02820_07_07.jpg)
- en: Double-click the combo box and a window will appear to edit the combo box. We
    will add three items to the combo box list by clicking the **+** button three
    times, and rename the items `AVI`, `MP4`, and `MOV`:![How to do it…](img/B02820_07_08.jpg)
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击组合框，将出现一个窗口以编辑组合框。我们将通过点击**+**按钮三次向组合框列表添加三个项目，并将项目重命名为`AVI`，`MP4`和`MOV`：![如何做…](img/B02820_07_08.jpg)
- en: After that, right-click on one of the push buttons and select **Go to slot…**,
    then click the **OK** button. A slot function will then be automatically added
    to your source files. Then, repeat this step for the other push button as well.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，右键单击其中一个按钮，选择**转到槽…**，然后单击**确定**按钮。然后，槽函数将自动添加到您的源文件中。然后，对另一个按钮重复此步骤。
- en: 'After that, open up `mainwindow.h` and add the following headers to the top:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，打开`mainwindow.h`，并在顶部添加以下头文件：
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then, add the following pointers under the `public` keyword:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在`public`关键字下添加以下指针：
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Besides that, we also need to add three extra slot functions under the two
    functions that Qt created for us previously:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除此之外，我们还需要在Qt为我们之前创建的两个函数下添加三个额外的槽函数：
- en: '[PRE15]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, open up `mainwindow.cpp` and add the following code to the class constructor:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开`mainwindow.cpp`，并将以下代码添加到类构造函数中：
- en: '[PRE16]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'After that, we define what will happen when the **Browse** button is clicked,
    which in this case will open up the file dialog to choose the video file:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们定义了**浏览**按钮点击时会发生什么，这种情况下将打开文件对话框以选择视频文件：
- en: '[PRE17]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Then, we also define what will happen if the **Convert** button is clicked.
    What we are doing here is passing the filenames and arguments to FFmpeg and then
    the conversion process will be handled externally by FFmpeg:![How to do it…](img/B02820_07_18.jpg)
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们还定义了**转换**按钮点击时会发生什么。我们在这里做的是将文件名和参数传递给FFmpeg，然后转换过程将由FFmpeg在外部处理：![如何做…](img/B02820_07_18.jpg)
- en: 'Once we are done with that, we will then tell our program what to do when the
    conversion process has started:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，我们将告诉我们的程序在转换过程开始时要做什么：
- en: '[PRE18]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Next, we will write the slot function that gets called during the conversion
    process whenever FFmpeg returns an output to the program:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将编写在转换过程中由FFmpeg返回程序输出时调用的槽函数：
- en: '[PRE19]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Lastly, we define the slot function that gets called when the entire conversion
    process has been completed:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们定义了在整个转换过程完成时调用的槽函数：
- en: '[PRE20]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Build and run the project now and you should get a simple yet workable video
    converter:![How to do it…](img/B02820_07_09.jpg)
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在构建和运行项目，您应该得到一个简单但可用的视频转换器：![如何做…](img/B02820_07_09.jpg)
- en: How it works...
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `QProcess` class provided by Qt is used to start external programs and communicate
    with them. In this case, we started `ffmpeg.exe` located in `C:/FFmpeg/bin/` as
    a process and started communicating with it. We also sent it a set of arguments
    to tell it what to do when started. The arguments we used in this example are
    relatively basic; we only told FFmpeg the path to the source image and the output
    filename. For more information regarding the argument settings available in FFmpeg,
    check out [https://www.ffmpeg.org/ffmpeg.html](https://www.ffmpeg.org/ffmpeg.html).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Qt提供的`QProcess`类用于启动外部程序并与其通信。在这种情况下，我们启动了位于`C:/FFmpeg/bin/`中的`ffmpeg.exe`作为一个进程，并开始与其通信。我们还向它发送了一组参数，告诉它启动时该做什么。我们在这个例子中使用的参数相对基本；我们只告诉FFmpeg源图像的路径和输出文件名。有关FFmpeg中可用的参数设置的更多信息，请查看[https://www.ffmpeg.org/ffmpeg.html](https://www.ffmpeg.org/ffmpeg.html)。
- en: FFmpeg does more than just converting video files. You can also use it to convert
    audio files and even images. For more information regarding all the formats supported
    by FFmpeg, check out [https://www.ffmpeg.org/general.html#File-Formats](https://www.ffmpeg.org/general.html#File-Formats).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: FFmpeg不仅可以转换视频文件。您还可以使用它来转换音频文件，甚至图像。有关FFmpeg支持的所有格式的更多信息，请查看[https://www.ffmpeg.org/general.html#File-Formats](https://www.ffmpeg.org/general.html#File-Formats)。
- en: Other than that, you can also play a video or audio file by running `ffplay.exe`,
    located in `C:/FFmpeg/bin`, or print out the information of the video or audio
    file in human-readable fashion by running `ffprobe.exe`. Check out FFmpeg's full
    documentation at [https://www.ffmpeg.org/about.html](https://www.ffmpeg.org/about.html).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，您还可以通过运行位于`C:/FFmpeg/bin`中的`ffplay.exe`来播放视频或音频文件，或者通过运行`ffprobe.exe`以人类可读的方式打印视频或音频文件的信息。查看FFmpeg的完整文档：[https://www.ffmpeg.org/about.html](https://www.ffmpeg.org/about.html)。
- en: There's more…
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: There are lots of things you can do using this method. It means that you're
    not limited to what Qt provides and you can break out of such limitations by carefully
    selecting a third-party program that provides what you need. One such example
    is making your own anti-virus GUI by utilizing the command-line-only anti-virus
    scanners available on the market, such as Avira ScanCL, Panda Antivirus Command
    Line Scanner, SAV32CLI, ClamavNet, and so on. You can build your own GUI using
    Qt and essentially send commands to the anti-virus process to tell it what to
    do.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方法可以做很多事情。这意味着您不受Qt提供的限制，可以通过仔细选择提供所需功能的第三方程序来摆脱这些限制。一个这样的例子是利用市场上提供的仅支持命令行的反病毒扫描程序，如Avira
    ScanCL、Panda Antivirus Command Line Scanner、SAV32CLI、ClamavNet等，制作自己的反病毒GUI。您可以使用Qt构建自己的GUI，并向反病毒进程发送命令，告诉它该做什么。
- en: Currency conversion
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 货币转换
- en: In this example, we will learn how to create a simple currency converter using
    Qt, with the help of an external service provider called `Fixer.io`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将学习如何使用Qt创建一个简单的货币转换器，借助名为`Fixer.io`的外部服务提供商。
- en: How to do it…
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Make yourself a currency converter with these simple steps:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以下简单步骤制作一个货币转换器：
- en: We start by opening Qt Creator and creating a new **Qt Widgets Application**
    project from **File** | **New File or Project**.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先打开Qt Creator，并从“文件”|“新建文件或项目”中创建一个新的“Qt Widgets应用程序”项目。
- en: 'Next, open up the project file (`.pro`) and add the network module to our project:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开项目文件（`.pro`）并将网络模块添加到我们的项目中：
- en: '[PRE21]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: After that, open up `mainwindow.ui` and remove the menu bar, tool bar, and status
    bar from the UI.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，打开`mainwindow.ui`并从UI中删除菜单栏、工具栏和状态栏。
- en: Then, add three horizontal layouts, a horizontal line, and a push button to
    the canvas. Once they're all placed, left-click on the canvas and follow by clicking
    the **Lay Out Vertically** button above the canvas. Then, set the label of the
    push button as **Convert**. The UI should now look something like this:![How to
    do it…](img/B02820_07_10.jpg)
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在画布上添加三个水平布局、一条水平线和一个按钮。一旦它们都放好了，左键单击画布，然后点击画布上方的“垂直布局”按钮。然后，将按钮的标签设置为“转换”。UI现在应该看起来像这样：![如何做…](img/B02820_07_10.jpg)
- en: After that, add two labels to the top layout and set the text of the left one
    as **From:**, followed by the right one as **To:**. Right after that, add two
    line edit widgets to the second layout and set both their default values as `1`:![How
    to do it…](img/B02820_07_11.jpg)
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，将两个标签添加到顶部布局，并将左侧的文本设置为“从：”，右侧的文本设置为“到：”。紧接着，在第二个布局中添加两个行编辑小部件，并将它们的默认值都设置为`1`：![如何做…](img/B02820_07_11.jpg)
- en: Before we proceed to add the last batch of widgets to the last layout, let's
    select the line edit on the right and enable the `readOnly` checkbox located in
    the property pane:![How to do it…](img/B02820_07_12.jpg)
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们继续向最后一个布局添加最后一批小部件之前，让我们选择右侧的行编辑框，并在属性窗格中启用`readOnly`复选框：![如何做…](img/B02820_07_12.jpg)
- en: Other than that, we also must set its **cursor** property to **Forbidden** so
    that users know it's not editable when mousing over the widget:![How to do it…](img/B02820_07_13.jpg)
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除此之外，我们还必须将其**cursor**属性设置为**Forbidden**，以便用户在鼠标悬停在小部件上时知道它是不可编辑的：![如何做…](img/B02820_07_13.jpg)
- en: Once you're done with that, let's add two combo boxes to the third layout located
    at the bottom. We will just leave them empty for now:![How to do it…](img/B02820_07_14.jpg)
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，让我们将两个组合框添加到底部的第三个布局中。现在我们只是把它们留空：![如何做…](img/B02820_07_14.jpg)
- en: After that, right-click on the **Convert** button and select **Go to slot…**.
    A window will now pop up, asking you to select an appropriate signal. Let's keep
    the default `clicked()` signal as the selection and click **OK**. Qt Creator will
    now automatically add a slot function for you to both `mainwindow.h` and `mainwindow.cpp`.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，右键单击“转换”按钮，选择“转到槽…”。一个窗口将弹出，要求您选择适当的信号。让我们保持默认的`clicked()`信号作为选择，然后点击“确定”。Qt
    Creator现在会自动为您在`mainwindow.h`和`mainwindow.cpp`中添加一个槽函数。
- en: 'Next, open up `mainwindow.h` and make sure the following headers are being
    added to the top of the source file:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开`mainwindow.h`，确保以下头文件被添加到源文件的顶部：
- en: '[PRE22]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Then, we need to add another slot function called `finished()`:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要添加另一个名为`finished()`的槽函数：
- en: '[PRE23]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Besides that, we also need to add two variables under the `private` label:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除此之外，我们还需要在`private`标签下添加两个变量：
- en: '[PRE24]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Once you''re done, let''s open up `mainwindow.cpp` this time. We will add several
    currency shortcodes to both the combo boxes in the class constructor. We also
    set a validator to the line edit widget on the left so that it can only accept
    inputs that are numbers. Lastly, we also initialize the network access manager
    and connect its `finished()` signal to our `finished()` slot function:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，让我们这次打开`mainwindow.cpp`。我们将在类构造函数中的两个组合框中添加几个货币简码。我们还为左侧的行编辑小部件设置了验证器，以便它只能接受数字输入。最后，我们还初始化了网络访问管理器，并将其`finished()`信号连接到我们的`finished()`槽函数。
- en: '[PRE25]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'After that, we define what will happen if the **Convert** button is being clicked
    by the user:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们定义了当用户点击**转换**按钮时会发生什么：
- en: '[PRE26]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Lastly, define what will happen when the `finished()` signal is triggered:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，定义`finished()`信号被触发时会发生什么：
- en: '[PRE27]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Compile and run the project now and you should be able to get a simple currency
    converter that looks like this:![How to do it…](img/B02820_07_15.jpg)
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在编译并运行项目，您应该能够获得一个简单的货币转换器，看起来像这样：![如何做…](img/B02820_07_15.jpg)
- en: How it works...
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Similar to the previous example we saw, which uses an external program to achieve
    a specific task, this time we use an external service provider who provided us
    with an open **Application Programming Interface** (**API**) that is free for
    all and easy to use.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们之前看到的示例类似，该示例使用外部程序来实现特定任务，这次我们使用了一个外部服务提供商，他们为我们提供了一个免费且易于使用的开放**应用程序编程接口**（**API**）。
- en: This way, we don't have to think about the method to retrieve the latest currency
    rate. Instead, the service provider has already done the job for us and we just
    have to send a polite request and ask for it. Then, we just wait for the response
    from their server and process the data according to our intended purposes.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们就不必考虑检索最新货币汇率的方法。相反，服务提供商已经为我们完成了这项工作，我们只需发送一个礼貌的请求并要求它。然后，我们只需等待他们服务器的响应，并根据我们的意图处理数据。
- en: There are quite a few different service providers you can choose from besides
    `Fixer.io` ([http://fixer.io](http://fixer.io)). Some are free but without any
    advanced features; some provide you with additional functionalities, although
    they come at a premium price. Some of these alternatives are Open Exchange Rate
    ([https://openexchangerates.org](https://openexchangerates.org)), Currencylayer
    ([https://currencylayer.com](https://currencylayer.com)), Currency API ([https://currency-api.appspot.com](https://currency-api.appspot.com)),
    XE Currency Data API ([http://www.xe.com/xecurrencydata](http://www.xe.com/xecurrencydata)),
    and Jsonrates ([http://jsonrates.com](http://jsonrates.com)).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`Fixer.io`（[http://fixer.io](http://fixer.io)）之外，您还可以选择其他几个不同的服务提供商。有些是免费的，但没有任何高级功能；有些提供额外的功能，尽管它们是付费的。其中一些替代方案包括Open
    Exchange Rate（[https://openexchangerates.org](https://openexchangerates.org)）、Currencylayer（[https://currencylayer.com](https://currencylayer.com)）、Currency
    API（[https://currency-api.appspot.com](https://currency-api.appspot.com)）、XE Currency
    Data API（[http://www.xe.com/xecurrencydata](http://www.xe.com/xecurrencydata)）和Jsonrates（[http://jsonrates.com](http://jsonrates.com)）。
- en: There's more…
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Besides currency exchange rates, you can also use this method to do other more
    advanced tasks that are perhaps too complicated to do by yourself, or are simply
    impossible to access unless you use the services provided by specialists, for
    example, programmable **Short Message Service** (**SMS**) and voice services,
    web analytics and statistic generation, online payment gateways, and the list
    goes on. Most of these services are not free, but you can easily achieve those
    functions in minutes without even setting up the server infrastructure, backend
    system, and whatnot; it's definitely the cheapest and fastest way to get your
    product up and running without much hassle.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 除了货币汇率，您还可以使用这种方法来执行其他更高级的任务，这些任务可能太复杂而无法自行完成，或者除非使用专家提供的服务，否则根本无法访问，例如可编程**短信服务**（**SMS**）和语音服务、网络分析和统计生成、在线支付网关等等。大多数这些服务都不是免费的，但您可以在几分钟内轻松实现这些功能，甚至无需设置服务器基础架构、后端系统等等；这绝对是最便宜和最快的方式，让您的产品快速上线而几乎没有任何麻烦。
