- en: Map Viewer
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 地图查看器
- en: User location and map display are two features that have become more common
    these days and have been used in various types of applications. They are commonly
    used for both backend analytics and frontend display purposes.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 用户位置和地图显示是如今变得更加常见的两个功能，已经被用于各种类型的应用程序。它们通常用于后端分析和前端显示目的。
- en: The map viewer can be used for navigation, nearby point-of-interest lookup,
    location-based services (such as calling for a taxi), and so on. You can use Qt
    to achieve most of it but you will require an advanced database system, if you're
    going for something more complex.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 地图查看器可用于导航、附近的兴趣点查找、基于位置的服务（如叫出租车）等等。你可以使用Qt来实现大部分功能，但如果你要做更复杂的东西，就需要一个先进的数据库系统。
- en: 'In the previous chapter, we learned how to embed a web browser into your application.
    In this chapter, we will try something more fun, which covers the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何将Web浏览器嵌入到应用程序中。在本章中，我们将尝试一些更有趣的东西，涵盖以下主题：
- en: Creating a map display
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建地图显示
- en: Marker and shape display
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标记和形状显示
- en: Obtaining a user's location
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取用户位置
- en: Geo Routing Request
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地理路由请求
- en: Let's proceed to create our own map viewer!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续创建我们自己的地图查看器！
- en: Map display
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 地图显示
- en: The Qt Location module provides developer access to geocoding and navigation
    information. It can also allow the user to do a place search for which the data
    needs to be retrieved, either from a server or from the user's device.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Qt位置模块为开发者提供了地理编码和导航信息的访问权限。它还可以允许用户进行地点搜索，需要从服务器或用户设备中检索数据。
- en: At the moment, Qt's map view does not support C++, only QML. This means that
    we can only use QML script to alter anything related to the visual—displaying
    a map, adding a marker, and so on; on the other hand, we can use the C++ classes
    provided by the module to obtain information from a database or from a service
    provider, before displaying it to the user via QML.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，Qt的地图视图不支持C++，只支持QML。这意味着我们只能使用QML脚本来改变与可视化相关的任何内容——显示地图，添加标记等等；另一方面，我们可以使用模块提供的C++类来从数据库或服务提供商获取信息，然后通过QML将其显示给用户。
- en: Just a quick note, **QML** (**Qt Modeling Language**) is a user interface markup
    language for Qt Quick applications. Since QML is powered by the JavaScript framework,
    its coding syntax is almost similar to the JavaScript. If you need an in-depth
    learning on QML and Qt Quick, please proceed to [Chapter 14](f8abebf4-f2be-457b-802a-4744ddba7eac.xhtml),
    *Qt Quick and QML,* as it is an entire chapter dedicated to it.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，**QML**（**Qt建模语言**）是用于Qt Quick应用程序的用户界面标记语言。由于QML由JavaScript框架驱动，其编码语法几乎与JavaScript相似。如果你需要深入学习QML和Qt
    Quick，请继续阅读[第14章](f8abebf4-f2be-457b-802a-4744ddba7eac.xhtml)，*Qt Quick和QML*，因为这是一个专门的章节。
- en: There are many tutorials out there that teach you how to create a fully fledged
    map viewer using Qt Quick and QML language, but there isn't a lot that teaches
    you how to combine C++ with QML. Let's get started!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多教程教你如何使用Qt Quick和QML语言创建一个完整的地图查看器，但并没有很多教你如何将C++与QML结合使用。让我们开始吧！
- en: Setting up the Qt location module
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Qt位置模块
- en: First, create a new Qt Widgets Application project.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，创建一个新的Qt Widgets应用程序项目。
- en: 'After that, open up your project file (`.pro`) and add the following modules
    to your Qt project:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，打开项目文件（`.pro`）并将以下模块添加到你的Qt项目中：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Besides the `location` module, we also added `qml` and `quickwidgets` modules,
    which are required by the map display widget in the next section. That is all
    we need to do for enabling the `Qt Location` module in our project. Next, we will
    proceed to add the map display widget to our project.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`location`模块，我们还添加了`qml`和`quickwidgets`模块，这些模块是下一节地图显示小部件所需的。这就是我们在项目中启用`Qt
    Location`模块所需要做的。接下来，我们将继续向项目中添加地图显示小部件。
- en: Creating a map display
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建地图显示
- en: 'Once you are ready, let''s open up `mainwindow.ui` and remove the menuBar,
    toolBar, and statusBar as we don''t need any of those in this project:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好后，让我们打开`mainwindow.ui`，并移除menuBar、toolBar和statusBar，因为在这个项目中我们不需要这些东西：
- en: '![](img/c0b7b1d8-e5fe-4bcc-a390-a313956cddb6.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c0b7b1d8-e5fe-4bcc-a390-a313956cddb6.png)'
- en: 'After that, drag a QQuickWidget from the widget box to the UI canvas. Then,
    click on the Lay Out Horizontally button located at the top of the canvas to add
    layout properties to it:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，从小部件框中拖动一个QQuickWidget到UI画布上。然后，点击画布顶部的水平布局按钮，为其添加布局属性：
- en: '![](img/28d2e932-e3fa-4392-a2b3-0426a394ff24.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/28d2e932-e3fa-4392-a2b3-0426a394ff24.png)'
- en: 'Then, set all the margin properties of the central widget to 0:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将中央小部件的所有边距属性设置为0：
- en: '![](img/3a817668-af69-4e72-9b67-377db36a1240.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3a817668-af69-4e72-9b67-377db36a1240.png)'
- en: 'Next, we need to create a new file called `mapview.qml` by going to File |
    New File or Project.... After that, select Qt category and follow QML File (Qt
    Quick 2):'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建一个名为`mapview.qml`的新文件，方法是转到文件 | 新建文件或项目... 然后选择Qt类别并选择QML文件（Qt Quick
    2）：
- en: '![](img/6a51fac1-dd56-4e67-bf24-8ac694b71266.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6a51fac1-dd56-4e67-bf24-8ac694b71266.png)'
- en: 'Once the QML file has been created, open it up and add the following code to
    include the `location`and `positioning`modules to this file so that we can use
    its functions later:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦QML文件创建完成，打开它并添加以下代码以包含`location`和`positioning`模块，以便稍后可以使用其功能：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After that, we create a `Plugin` object and name it **osm** (**Open Street
    Map**), we then create a Map object and apply the plugin to its `plugin` property.
    We also set the starting coordinates to (`40.7264175,-73.99735`), which is somewhere
    in New York. Other than that, the default `zoom level` is set to `14`, which is
    enough to have a good view of the city:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们创建一个`Plugin`对象并命名为**osm**（**Open Street Map**），然后创建一个Map对象并将插件应用到其`plugin`属性上。我们还将起始坐标设置为（`40.7264175，-73.99735`），这是纽约的某个地方。除此之外，默认的`缩放级别`设置为`14`，足以让我们有一个良好的城市视图：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Before we're able to display the map on our application, we must first create
    a resource file and add the QML file to it. This can be done by going to File
    | Create New File or Project.... Then, select Qt category and pick Qt Resource
    File.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们能够在应用程序上显示地图之前，我们必须先创建一个资源文件并将QML文件添加到其中。这可以通过转到文件 | 创建新文件或项目...来完成。然后，选择Qt类别并选择Qt资源文件。
- en: 'Once the resource file has been created, add a prefix called `qml`, and add
    the QML file to the prefix, like so:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 资源文件创建完成后，添加一个名为`qml`的前缀，并将QML文件添加到前缀中，如下所示：
- en: '![](img/ccdd7e2f-cb58-4ebd-b4f3-dc5320be49f4.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ccdd7e2f-cb58-4ebd-b4f3-dc5320be49f4.png)'
- en: We can now open up `mainwindow.ui` and set the `source` property of the QQuickWidget
    to `qrc:/qml/mapview.qml`. You may also click the button behind the source property
    to select the QML file straight from the resources.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以打开`mainwindow.ui`并将QQuickWidget的`source`属性设置为`qrc:/qml/mapview.qml`。您还可以点击源属性后面的按钮，直接从资源中选择QML文件。
- en: 'Once you''re done, let''s compile and run our project and see what we''ve got!
    You can try panning around and zooming in and out from the map using the mouse,
    too:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，让我们编译并运行项目，看看我们得到了什么！您也可以尝试使用鼠标在地图上平移和放大缩小：
- en: '![](img/7151aaa3-59be-4e8a-8dee-883c039e2c05.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7151aaa3-59be-4e8a-8dee-883c039e2c05.png)'
- en: Even though we can achieve the same result by using the web view widget, it
    will make us write a ton of JavaScript code just to display a map like this. By
    using Qt Quick, we only need to write a few simple lines of QML code and that's
    it.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们可以通过使用web视图小部件来实现相同的结果，但这将使我们编写大量的JavaScript代码来显示地图。通过使用Qt Quick，我们只需要编写几行简单的QML代码就可以了。
- en: Marker and shape display
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标记和形状显示
- en: In the previous section, we successfully created a map display, but that is
    just the beginning of this project. We need to be able to display custom data
    in the form of markers or shapes layered on top of the map, so that the user can
    understand the data.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分中，我们成功创建了地图显示，但这只是这个项目的开始。我们需要能够以标记或形状的形式显示自定义数据，以便用户能够理解这些数据。
- en: Displaying position markers on a map
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在地图上显示位置标记
- en: If I tell you my favorite restaurant is located at (`40.7802655, -74.108644`),
    you won't be able to make sense of it. However, if those coordinates are being
    displayed on the map view in the form of a location marker, instantly, you will
    have an idea of where it is. Let's see how we can add position markers to our
    map view!
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我告诉你我的最喜欢的餐厅位于（`40.7802655, -74.108644`），你可能无法理解。然而，如果这些坐标以位置标记的形式显示在地图视图上，你会立刻知道它在哪里。让我们看看如何向地图视图添加位置标记！
- en: 'First of all, we need a marker image that should look something like this,
    or even better, design your own marker:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要一个标记图像，应该看起来像这样，或者更好的是，设计你自己的标记：
- en: '![](img/04d42016-db00-4884-a2c8-0c8edfb9052d.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/04d42016-db00-4884-a2c8-0c8edfb9052d.png)'
- en: 'After that, we need to register this image to our project''s resource file.
    Open up `resource.qrc` with Qt Creator and create a new prefix called `images`.
    Then, add the marker image to the newly created prefix. Do make sure that the
    image has a transparent background to look good on the map:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们需要将这个图像注册到我们项目的资源文件中。用Qt Creator打开`resource.qrc`，创建一个名为`images`的新前缀。然后，将标记图像添加到新创建的前缀中。确保图像具有透明背景，以便在地图上显示良好。
- en: '![](img/935d7d97-990d-4453-a247-1a9a05867f34.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/935d7d97-990d-4453-a247-1a9a05867f34.png)'
- en: 'Next, open up `mapview.qml` and replace the code with the following:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开`mapview.qml`并用以下代码替换原来的代码：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the preceding code, we first added an image object that will be used as the
    marker's image. Since the original image is really huge, we have to resize it
    by setting the `sourceSize` property to `50x50`. We must also set the `anchor
    point` of the marker image to the `center-bottom` of the image because that is
    where the tip of the marker is located.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们首先添加了一个图像对象，它将用作标记的图像。由于原始图像非常庞大，我们必须通过将`sourceSize`属性设置为`50x50`来调整其大小。我们还必须将标记图像的锚点设置为图像的`中心底部`，因为那是标记的尖端所在的位置。
- en: After that, we create a `MapQuickItem` object that will be served as the marker
    itself. Set the marker image as the `sourceItem` of the `MapQuickItem` object,
    then add the marker to the map by calling `map.addMapItem()`. This function must
    be called after the map has been created and is ready to be displayed, which means
    we can only call it after the `Component.onCompleted` event has been triggered.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们创建一个`MapQuickItem`对象，它将作为标记本身。将标记图像设置为`MapQuickItem`对象的`sourceItem`，然后通过调用`map.addMapItem()`将标记添加到地图上。这个函数必须在地图创建并准备好显示之后调用，这意味着我们只能在`Component.onCompleted`事件触发后调用它。
- en: 'Now that we''re done with the code, let''s compile and look at the result:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们完成了代码，让我们编译并查看结果：
- en: '![](img/6977a437-56a1-4f90-bcc9-55b5005d9fda.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6977a437-56a1-4f90-bcc9-55b5005d9fda.png)'
- en: Even though it's now looking all good, we don't want to hardcode the marker
    in QML. Imagine adding hundreds of markers to the map, it's simply impossible
    to manually add each marker using a distinct set of code.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管现在看起来一切都很好，但我们不想在QML中硬编码标记。想象一下向地图添加数百个标记，手动使用不同的代码添加每个标记是不可能的。
- en: 'In order to create a function that allows us to dynamically create position
    markers, we need to first separate the marker QML code from `mapview.qml` to a
    new QML file. Let''s create a new QML file called `marker.qml` and add it to the
    resource file:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建一个允许我们动态创建位置标记的函数，我们需要先将标记的QML代码从`mapview.qml`中分离出来，放到一个新的QML文件中。让我们创建一个名为`marker.qml`的新QML文件，并将其添加到资源文件中：
- en: '![](img/2dd8239b-895d-482c-985e-cde898426da4.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2dd8239b-895d-482c-985e-cde898426da4.png)'
- en: 'Next, remove both the `MapQuickItem` and `Image` objects from `mapview.qml` and
    move it to `marker.qml`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，从`mapview.qml`中删除`MapQuickItem`和`Image`对象，并将其移动到`marker.qml`中：
- en: '[PRE4]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As you can see from the preceding code, I have merged the `Image` object with
    the `MapQuickItem` object. The coordinate property has also been removed as we
    will only set it when putting the marker on the map.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 从上述代码中，您可以看到我已经将`Image`对象与`MapQuickItem`对象合并。坐标属性也已被删除，因为我们只会在将标记放在地图上时设置它。
- en: 'Now, open up `mapview.qml` again, and add this function to the `Item` object:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，再次打开`mapview.qml`，并将此函数添加到`Item`对象中：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: From the preceding code, we first created a component by loading the `marker.qml`
    file. Then, we created an object/item from the component by calling `createObject()`.
    In the `createObject()` function, we made the window object as its parent and
    set its position to the coordinate supplied by the `addMarker()` function. Finally,
    we added the item to the map for it to be rendered.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 从上述代码中，我们首先通过加载`marker.qml`文件创建了一个组件。然后，我们通过调用`createObject()`从组件创建了一个对象/项。在`createObject()`函数中，我们将窗口对象设置为其父对象，并将其位置设置为`addMarker()`函数提供的坐标。最后，我们将项目添加到地图中以进行渲染。
- en: 'Whenever we want to create a new position marker, we''ll just have to call
    this `addMarker()` function. To demonstrate this, let''s create three different
    markers by calling `addMarker()` three times:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们想要创建一个新的位置标记时，我们只需调用这个`addMarker()`函数。为了演示这一点，让我们通过三次调用`addMarker()`来创建三个不同的标记：
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Build and run the project again, and you should be able to see something like
    this:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 再次构建和运行项目，您应该能够看到类似于这样的东西：
- en: '![](img/581d34bc-8dfb-46c4-80e3-fbea4706da85.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/581d34bc-8dfb-46c4-80e3-fbea4706da85.png)'
- en: 'We can go even further by adding a text label to each of the markers. To do
    that, first open up `marker.qml`, then add another module called `QtQuick.Controls`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以进一步为每个标记添加文本标签。要做到这一点，首先打开`marker.qml`，然后添加另一个名为`QtQuick.Controls`的模块：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'After that, add a custom property to the `MapQuickItem` object called `labelText`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，向`MapQuickItem`对象添加一个自定义属性称为`labelText`：
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Once you''re done, change its `sourceItem` property into this:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成，将其`sourceItem`属性更改为：
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'From the preceding code, we created an `Item` object to group multiple objects
    together. Then, we created a `Rectangle` object to serve as the label background
    and a `Label` object for the text. The `text` property of the `Label` object will
    get linked to the `labelText` property of the `MapQuickItem` object. We can add
    another input to the `addMarker()` function for setting the `labelText` property,
    like so:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 从上述代码中，我们创建了一个`Item`对象来将多个对象组合在一起。然后，我们创建了一个`Rectangle`对象作为标签背景，以及一个文本的`Label`对象。`Label`对象的`text`属性将链接到`MapQuickItem`对象的`labelText`属性。我们可以为`addMarker()`函数添加另一个输入，用于设置`labelText`属性，如下所示：
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Therefore, when we create the markers, we can call the `addMarker()` function
    like this:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当我们创建标记时，我们可以像这样调用`addMarker()`函数：
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Build and run the project again and you should see this:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 再次构建和运行项目，您应该会看到这个：
- en: '![](img/8b2f536b-7199-4fd7-bd36-b15745c7e285.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8b2f536b-7199-4fd7-bd36-b15745c7e285.png)'
- en: Pretty awesome isn't it? However, we're not done yet. Since we're most likely
    using C++ to obtain data from the database through Qt's SQL module, we need to
    find a way to call the QML function from C++.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 相当棒，不是吗？但是，我们还没有完成。由于我们很可能使用C++通过Qt的SQL模块从数据库获取数据，我们需要找到一种方法从C++调用QML函数。
- en: 'To achieve that, let''s comment out the three `addMarker()` functions in `mapview.qml`
    and open up `mainwindow.h` and the following headers:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，让我们在`mapview.qml`中注释掉三个`addMarker()`函数，并打开`mainwindow.h`和以下头文件：
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'After that, open up `mainwindow.cpp` and call the `QMetaObject::invokeMethod()`
    function, like this:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，打开`mainwindow.cpp`并调用`QMetaObject::invokeMethod()`函数，如下所示：
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The preceding code might seem complex, but it's actually really simple if we
    dissect it and analyze each of its arguments. The first argument of the preceding
    function is the object that we want to call the function from, and in this case,
    it is the root object (the `Item` object in `mapview.qml`) of the map view widget.
    Next, we want to tell which function name we want to call, and it is the `addMarker()`
    function. After that, the third argument is the connection type used by the signal
    and slot system to invoke this method. For this, we'll just let it be the default
    setting, which is `Qt::AutoConnection`. The rest are the arguments that are needed
    by the `addMarker()` function. We used the `Q_ARG` macro for indicating the type
    and value of the data.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码可能看起来复杂，但如果我们分解并分析每个参数，实际上非常简单。上述函数的第一个参数是我们要从中调用函数的对象，在这种情况下，它是地图视图小部件中的根对象（`mapview.qml`中的`Item`对象）。接下来，我们要告诉要调用的函数名称是什么，它是`addMarker()`函数。之后，第三个参数是信号和槽系统使用的连接类型来调用此方法。对于这一点，我们将让它保持默认设置，即`Qt::AutoConnection`。其余的是`addMarker()`函数所需的参数。我们使用`Q_ARG`宏来指示数据的类型和值。
- en: 'Finally, build and run the application again. You will see a marker with the
    label has been added to the map, but this time, it''s called from our C++ code
    instead of QML:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，再次构建和运行应用程序。您将看到一个带有标签的标记已经添加到地图上，但这次是从我们的C++代码而不是QML中调用的：
- en: '![](img/3372e8f3-0227-467a-ba57-3a7033d395e1.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3372e8f3-0227-467a-ba57-3a7033d395e1.png)'
- en: Displaying shapes on a map
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在地图上显示形状
- en: Besides adding markers to the map, we can also draw different types of shapes
    on the map to indicate an area of interest or serve as geofences, which give out
    warnings whenever a target is entering or leaving the area covered by the shape.
    A geofence is a polygonal shape that defines an area of interest or virtual geographic
    boundary on a map for location-based services. Usually, geofences are used to
    trigger an alarm when a device is entering and/or exiting a geofence. A good example
    of using a geofence is when you need a shopping reminder, you can draw a geofence
    around the supermarket and attach a shopping list along with the geofence. When
    you (and your phone) are entering the area of the geofence, you will get a notification
    on your phone that reminds you what to buy. Wouldn't that be great?
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 除了在地图上添加标记，我们还可以在地图上绘制不同类型的形状，以指示感兴趣的区域或作为地理围栏，当目标进入或离开形状覆盖的区域时发出警告。地理围栏是在地图上定义感兴趣区域或虚拟地理边界的多边形形状，用于基于位置的服务。通常，地理围栏用于在设备进入和/或离开地理围栏时触发警报。使用地理围栏的一个很好的例子是当你需要购物提醒时，你可以在超市周围画一个地理围栏，并附上购物清单。当你（和你的手机）进入地理围栏区域时，你将收到一条提醒你要买什么的手机通知。那不是很棒吗？
- en: For more information about geofences, please visit: `https://en.wikipedia.org/wiki/Geo-fence`
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 有关地理围栏的更多信息，请访问：`https://en.wikipedia.org/wiki/Geo-fence`
- en: We won't be creating a functional geofence in this chapter as it is quite an
    advanced topic, and it usually runs as a server-side service for checking and
    triggering an alarm. We will only use Qt to draw the shape and display it visually
    on the screen.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们不会创建一个功能性的地理围栏，因为这是一个相当高级的话题，通常作为服务器端服务运行，用于检查和触发警报。我们只会使用Qt来绘制形状并在屏幕上显示它。
- en: 'To draw shapes on the map view widget, we''ll create a few more QML files for
    each type of shape and add them to the program''s resources:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在地图视图小部件上绘制形状，我们将为每种类型的形状创建一些新的QML文件，并将它们添加到程序的资源中：
- en: '![](img/7ea97aa7-6e6d-4218-8515-adc2ad7578b5.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7ea97aa7-6e6d-4218-8515-adc2ad7578b5.png)'
- en: 'For each of the newly created QML files, we''ll do something similar to the
    position marker. For `circle.qml`, it looks like this:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个新创建的QML文件，我们将类似于位置标记的操作。对于`circle.qml`，它看起来像这样：
- en: '[PRE14]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We only declare `borderWidth` in this file because we can directly set the
    other properties later, when calling the `createCircle()` function. The same goes
    for `rectangle.qml`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只在这个文件中声明`borderWidth`，因为当调用`createCircle()`函数时，我们可以直接设置其他属性。对于`rectangle.qml`也是一样的：
- en: '[PRE15]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Repeat a similar step for `polygon.qml`:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`polygon.qml`，重复类似的步骤：
- en: '[PRE16]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You can set other properties if you want, but for the sake of demonstration,
    we only change a few of the properties such as color, shape, and border width.
    Once you''re done, let''s open up `mapview.qml` and define a few functions for
    adding the shapes:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你愿意，你可以设置其他属性，但为了演示，我们只改变了一些属性，比如颜色、形状和边框宽度。完成后，让我们打开`mapview.qml`并定义一些函数来添加形状：
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'These functions are very similar to the `addMarker()` function, except it takes
    in different arguments that are later passed to the `createObject()` function.
    After that, let''s try and create the shapes using the preceding function:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数与`addMarker()`函数非常相似，只是它接受稍有不同的参数，稍后传递给`createObject()`函数。之后，让我们尝试使用前面的函数创建形状：
- en: '[PRE18]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The following are the shapes created using the functions we have just defined.
    I have called each of the functions separately to demonstrate its outcome, hence
    the three different windows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用我们刚刚定义的函数创建的形状。我分别调用了每个函数来演示其结果，因此有三个不同的窗口：
- en: '![](img/c6a0e1b2-e88a-4a65-b6a0-c5c4ea11274d.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c6a0e1b2-e88a-4a65-b6a0-c5c4ea11274d.png)'
- en: Obtaining a user's location
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取用户位置
- en: Qt provides us with a set of functions to retrieve a user's location information,
    but it will only work if the user's device supports geopositioning. This should
    work on all modern smartphones and might work on some of the modern computers
    as well.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 'Qt为我们提供了一组函数来获取用户的位置信息，但只有在用户的设备支持地理定位时才能工作。这应该适用于所有现代智能手机，也可能适用于一些现代计算机。 '
- en: 'To obtain the user''s location using the `Qt Location` module, first let''s
    open up `mainwindow.h` and add the following header files:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`Qt Location`模块获取用户位置，首先让我们打开`mainwindow.h`并添加以下头文件：
- en: '[PRE19]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'After that, declare the following `slot` function in the same file:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一个文件中声明以下的`slot`函数：
- en: '[PRE20]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Right after that, open up `mainwindow.cpp` and add the following code to the
    place where you want it to start getting the user''s location. For demonstration
    purposes, I''ll just call it within the `MainWindow` constructor:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 就在那之后，打开`mainwindow.cpp`并将以下代码添加到你希望开始获取用户位置的地方。出于演示目的，我只是在`MainWindow`构造函数中调用它：
- en: '[PRE21]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Then, implement the `positionUpdated()` function we declared earlier, like
    this:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，实现我们之前声明的`positionUpdated()`函数，就像这样：
- en: '[PRE22]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'If you build and run the application now, you may or may not get any location
    information, depending on the device you use to run the test. If you get debug
    messages like these:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果现在构建并运行应用程序，根据你用于运行测试的设备，你可能会或者不会获得任何位置信息。如果你收到这样的调试消息：
- en: '[PRE23]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '![](img/d9095bd8-9aa1-4369-998f-0cc65b69698d.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9095bd8-9aa1-4369-998f-0cc65b69698d.png)'
- en: 'Then you probably need to find some other devices for the test. Otherwise,
    you may get a result similar to this:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你可能需要找一些其他设备进行测试。否则，你可能会得到类似于这样的结果：
- en: '[PRE24]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: I will leave you an assignment here which you can try and do by making use of
    the functions that we have created thus far. Since you can now obtain the coordinates
    of your location, try and further enhance your application by adding a marker
    to the map display to show where you are currently located. That should be fun
    to work with!
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这里给你留下一个作业，你可以尝试使用我们迄今为止创建的函数来完成。由于你现在可以获取你的位置坐标，尝试通过在地图显示上添加一个标记来进一步增强你的应用程序。这应该很有趣！
- en: Geo Routing Request
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 地理路由请求
- en: There is another important feature called **Geo Routing Request**, which is
    a set of functions that help you plot out the route (often the shortest route)
    from point A to point B. This feature requires a service provider; in this case,
    we will be using **Open Street Map** (**OSM**) as it is completely free.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个重要的功能叫做**地理路由请求**，它是一组函数，帮助你绘制从A点到B点的路线（通常是最短路线）。这个功能需要一个服务提供商；在这种情况下，我们将使用**Open
    Street Map**（**OSM**），因为它是完全免费的。
- en: Do note that OSM is an online collaborative project, which means that if no
    one from your area contributed the route data to the OSM server, then you won't
    be able to get an accurate result. Optionally, you can also use paid services
    such as Mapbox or ESRI.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，OSM是一个在线协作项目，这意味着如果你所在地区没有人向OSM服务器贡献路线数据，那么你将无法获得准确的结果。作为可选项，你也可以使用付费服务，如Mapbox或ESRI。
- en: 'Let''s see how we can implement Geo Routing Request in Qt! First, include the
    following headers to our `mainwindow.h` file:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何在Qt中实现地理路由请求！首先，将以下头文件包含到我们的`mainwindow.h`文件中：
- en: '[PRE25]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'After that, add two slot functions to `MainWindow` class, namely, `routeCalculated()`
    and `routeError()`:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，向`MainWindow`类添加两个槽函数，分别是`routeCalculated()`和`routeError()`：
- en: '[PRE26]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Once you''re done, open up `mainwindow.cpp` and create a service provider object
    in the `MainWindow` constructor method. We will be using the OSM service so we''ll
    place the acronym `"osm"` when initiating the `QGeoServiceProvider` class:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，打开`mainwindow.cpp`并在`MainWindow`构造方法中创建一个服务提供商对象。我们将使用OSM服务，因此在初始化`QGeoServiceProvider`类时，我们将放置缩写`"osm"`：
- en: '[PRE27]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Right after that, we''ll get the pointer of the routing manager from the service
    provider object we just created:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，我们将从刚刚创建的服务提供商对象中获取路由管理器的指针：
- en: '[PRE28]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Then, connect the `finished()` signal and `error()` signal from the routing
    manager with the `slot` functions we just defined:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将路由管理器的`finished()`信号和`error()`信号与我们刚刚定义的`slot`函数连接起来：
- en: '[PRE29]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'These slot functions will be triggered when there is a reply from the service
    provider upon a successful request, or when the request is failed and returned
    with an error message instead. The `routeCalculated()` slot function looks something
    like this:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 当成功请求后，这些槽函数将在服务提供商回复时被触发，或者当请求失败并返回错误消息时被触发。`routeCalculated()`槽函数看起来像这样：
- en: '[PRE30]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: As you can see, the `QGeoRouteReply` pointer contains route information sent
    by the service provider upon a successful request. Sometimes it comes with more
    than one route, so in the example, we just obtain the first route and display
    it through Qt's application output window. Alternatively, you can use these coordinates
    to draw a path or animate your marker along the route.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，`QGeoRouteReply`指针包含了服务提供商在成功请求后发送的路线信息。有时它会有多条路线，所以在这个例子中，我们只获取第一条路线并通过Qt的应用程序输出窗口显示出来。或者，你也可以使用这些坐标来绘制路径或沿着路线动画移动你的标记。
- en: 'As for `routeError()` slot function, we''ll just output the error string sent
    by the service provider:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 至于`routeError()`槽函数，我们将只输出服务提供商发送的错误字符串：
- en: '[PRE31]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Once you''re done with that, let''s initiate a Geo Routing Request in the `MainWindow`
    constructor method and send it to the service provider:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，让我们在`MainWindow`构造方法中发起一个地理路由请求并将其发送给服务提供商：
- en: '[PRE32]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Build and run the project now and you should see results like the following:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在构建并运行项目，你应该能看到以下结果：
- en: '![](img/849cb2c6-e347-4f25-b95e-743695a488fc.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/849cb2c6-e347-4f25-b95e-743695a488fc.png)'
- en: Here comes another challenging assignment for you—try to put all these coordinates
    into an array and create an `addLine()` function that takes in the array and draws
    a series of straight lines that represent the route described by the Geo Routing
    service.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有另一个具有挑战性的任务——尝试将所有这些坐标放入一个数组中，并创建一个`addLine()`函数，该函数接受数组并绘制一系列直线，代表地理路由服务描述的路线。
- en: Geo Routing has been one of the most important features ever since GPS navigator
    systems were invented. Hopefully, you will be able to create something useful
    after going through the tutorial!
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 自从GPS导航系统发明以来，地理路由一直是最重要的功能之一。希望在完成本教程后，你能够创造出一些有用的东西！
- en: Summary
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned how to create our own map view similar to Google
    Maps. We have learned how to create a map display, placing markers and shapes
    on the map, and finally finding a user's location. Do note that you can also use
    the web view and call Google's JavaScript mapping API to create a similar map
    display. However, using QML is much simpler, lightweight (we don't have to load
    the entire web engine module just to use the map), works very well on mobile and
    touch screens, and it can also be easily ported to other map services. Hopefully,
    you can make use of this knowledge and create something really awesome and useful.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何创建类似于谷歌地图的自己的地图视图。我们学习了如何创建地图显示，将标记和形状放在地图上，最后找到用户的位置。请注意，你也可以使用Web视图并调用谷歌的JavaScript地图API来创建类似的地图显示。然而，使用QML更简单，轻量级（我们不必加载整个Web引擎模块来使用地图），在移动设备和触摸屏上运行得非常好，并且也可以轻松移植到其他地图服务上。希望你能利用这些知识创造出真正令人印象深刻和有用的东西。
- en: In the next chapter, we will look into how to display information using graphical
    items. Let's move on!
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何使用图形项显示信息。让我们继续吧！
