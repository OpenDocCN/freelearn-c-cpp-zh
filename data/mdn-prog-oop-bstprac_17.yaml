- en: '*Chapter 15*'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第15章*'
- en: Philosophy
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 哲学
- en: Introduction
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引言
- en: 'As the manuscript for this book came together, I realized that a lot of the
    content was based on a limited and naive *philosophy* of software creation. I
    was outlining this philosophy as it applied to each chapter, then explaining what
    the various relevant tasks were and how they fit into that philosophy. Here it
    is, written explicitly and separately from other considerations in the book:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当这本书的手稿逐渐成形时，我意识到其中很多内容是基于一种有限且天真的软件创建的*哲学*。我正在概述这种哲学如何应用于每一章，然后解释各种相关任务是什么以及它们如何融入这种哲学。以下是它的具体内容，明确地、独立于书中的其他考虑：
- en: '*Our role as people who make software is to "solve problems," and only incidentally
    to make software. Making software for its own sake is at best a benign waste of
    time and money, or at worst detrimental to those exposed to it. Our leading considerations
    at all times must be the people whose problems we are solving, and the problems
    themselves.*'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们作为软件制作者的角色是“解决问题”，而制作软件只是顺便的事情。仅仅为了制作软件而制作软件，充其量是时间和金钱的无害浪费，最坏的情况是会对那些接触到它的人造成伤害。我们始终首要考虑的是我们正在解决其问题的人，以及这些问题本身。*'
- en: If this were the 1970s, you might call that *new age* claptrap. These days,
    you'd probably just think of it as the kind of nonsense you get in those self-help
    books about becoming a better manager; perhaps I should've left software behind
    for management consultancy by now. But it's only by agreeing on the philosophy
    of a discipline that we can decide what work represents a valuable contribution.
    Consider how the philosophy of science has changed over the millennia (The discussion
    here is based on a talk given by my first manager, John Ward, at Oxford University's
    Department of Physics.).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是20世纪70年代，你可能会称之为*新时代*的胡言乱语。如今，你可能会把它看作是那些关于成为更好的管理者的自助书籍中的废话；也许我现在应该把软件放下，去做管理咨询了。但只有通过同意一个学科的哲学，我们才能决定哪些工作代表了有价值的贡献。考虑一下科学哲学在千年间的变化（这里的讨论基于我的第一位经理约翰·沃德在牛津大学物理系的一次演讲）。
- en: In ancient Greek civilization, any conclusion that you could construct a logical
    argument for could be accepted as scientific fact. So, women had fewer teeth than
    men, and wood could combust because it was made of heavy earth and light fire,
    and the fire wanted to escape to the heavens. These things were accepted as true
    because people thought about them and decided that they were true.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在古希腊文明中，任何你可以构建逻辑论证的结论都可以被接受为科学事实。因此，女性的牙齿比男性少，木头可以燃烧，因为它是由重土和轻火组成的，而火想要逃向天堂。这些事情被接受为真实，因为人们思考了它们，并决定它们是真实的。
- en: 'Over the next few centuries, the face of science changed. Richard P. Feynman
    was likely paraphrasing the French philosopher-priest Buridan when he expressed
    the belief that "the test of all knowledge is experiment"; a viewpoint that, by
    Feynman''s time, had already spent centuries working its way into society''s philosophy
    of science. At the time of the foundation of the Royal Society, if a respectable
    person presented evidence for something in the correct circles, then it was true:
    this is how we knew that sea monsters existed, because gentlemen had sailed to
    the Americas and reported seeing them. If someone of repute had seen something,
    then it must be there.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几个世纪里，科学的面貌发生了变化。理查德·P·费曼可能是在引用法国哲学家-牧师布尔迪安时表达了他的信念，即“所有知识的检验是实验”；这个观点在费曼的时代，已经花费了几个世纪的时间逐渐融入社会的科学哲学中。在皇家学会成立的时候，如果一个可敬的人在一个正确的圈子中提出了某事的证据，那么它就是真的：这就是我们如何知道海怪的存在，因为绅士们航行到美洲并报告说他们看到了它们。如果某个有声誉的人看到了什么，那么它一定在那里。
- en: 'In the twentieth century, Karl Popper argued for a falsification philosophy
    of science: rather than looking for evidence that a theory is true, accept it
    weakly and look for evidence that it is false. This is the approach that scientists
    take today. All of this is not some grand history presented to show progress toward
    our current, enlightened state. The accepted philosophy of science could change
    again at any time. The reason for presenting this anecdote is to show that what''s
    considered good science, or bad science, or worthwhile science, is *situated*
    within the prevailing philosophical view (in addition to other considerations,
    including ethics). By analogy, if anyone wants to argue that there is such a thing
    as *good* programming practice, or bad practice, or worthwhile practice, they
    must do it, whether explicitly or implicitly, with reference to a particular philosophy
    and system of values.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在20世纪，卡尔·波普尔为科学哲学提出了一个可证伪的哲学：与其寻找证明一个理论是正确的证据，不如弱化它并寻找证明它是错误的证据。这就是科学家今天采取的方法。所有这些并不是为了展示我们当前启蒙状态的进步而呈现的伟大历史。科学哲学的接受可能会随时改变。提出这个轶事的原因是为了表明，被认为是好的科学、坏的科学或值得的科学，都是*定位*在占主导地位的哲学观点之中（除了其他考虑因素，包括伦理）。通过类比，如果有人想要论证存在*好的*编程实践、坏实践或值得的实践，他们必须这样做，无论是明确还是隐含地，都要参考特定的哲学和价值体系。
- en: In this concluding chapter, I want to bring the whole book together by examining
    the role of and inputs into a holistic philosophy of software construction.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章的结尾，我想通过考察整体软件构建哲学的角色和输入，将整本书的内容综合起来。
- en: Software as A Pursuit
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 软件作为一种追求
- en: Is making software (for money – we'll leave hobby aside) a profession? Is it
    a craft? Is it a science? An engineering discipline? An art form? A social science?
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 制作软件（为了金钱——我们将业余爱好放在一边）是一种职业吗？它是一种手艺？它是一种科学？一个工程学科？一种艺术形式？一门社会科学？
- en: 'It''s easy to refute the idea of professional programmers. Professions are
    marked by an educational barrier to entry: you can''t be a self-taught lawyer
    or architect, for example. The education ensures that (prospective) practitioners
    are aware of the institutional body of knowledge and code of ethics – things that
    are absent from the "profession" of programming. Certain organizations, such as
    the *Chartered Institute for IT*—[http://www.bcs.org/](http://www.bcs.org/) and
    the **Association for Computing Machinery**—[http://www.acm.org](http://www.acm.org)
    are trying to cast it as such but represent a minority of practitioners.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 质疑专业程序员的观念很容易。职业的特点是进入门槛的教育壁垒：你不能成为一个自学成才的律师或建筑师，例如。教育确保（潜在的）从业者了解机构的知识体系和道德规范——这些在编程的“职业”中是缺失的。某些组织，如*特许信息系统学会*——[http://www.bcs.org/](http://www.bcs.org/)和**计算机协会**——[http://www.acm.org](http://www.acm.org)正在试图将其定位为这样的职业，但它们代表了少数从业者。
- en: 'We have professional-style conferences; these cater to a small minority of
    practitioners, frequently featuring sales rhetoric and self-promotion alongside
    (or instead of) problem-solving workshops and technical presentations. There is
    no professional closure: you cannot be disbarred from writing software if you
    disregard the ethics of doing so. The ethics of programming were discussed in
    *Chapter 14, Ethics*, and were found to be largely absent.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有专业风格的会议；这些会议服务于一小部分从业者，通常在问题解决研讨会和技术演示中穿插（或代替）销售说辞和自我推销。没有专业性的结论：如果你忽视编写软件的伦理，你不能被禁止编写软件。编程的伦理在*第14章，伦理*中讨论过，并发现其很大程度上是缺失的。
- en: 'A further difficulty with organizing software as a profession: as I described
    in the *Chapter 10, Learning*, the teaching of programming is far too haphazard
    to represent the transference of a core body of knowledge. In recommending a curriculum
    for university computing courses back in 1968, the ACM drew a thick line between
    academic computer science and computing as practiced in the wild. Even in the
    *latest version of the curriculum*—[http://ai.stanford.edu/users/sahami/CS2013/](http://ai.stanford.edu/users/sahami/CS2013/),
    professional standards and ethical implications are only a small part of the training
    a *Computer Science* course would offer. (At time of writing, curriculum 13 was
    still in draft status.) People who complete CS degrees undoubtedly have good knowledge
    of the workings of a computer, but one could argue that this is a necessary, though
    insufficient, input to be a novice programmer.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 将软件组织为职业的另一个困难：正如我在第10章“学习”中描述的，编程教学过于随意，无法代表核心知识体系的转移。在1968年推荐大学计算机课程的教学大纲时，ACM在学术计算机科学和野外的计算实践之间划了一条厚重的界限。即使在最新版本的教学大纲中——[http://ai.stanford.edu/users/sahami/CS2013/](http://ai.stanford.edu/users/sahami/CS2013/)，专业标准和伦理影响也只是计算机科学课程提供的培训中的一小部分。（在撰写本文时，教学大纲13仍处于草案状态。）无疑，完成计算机科学学位的人对计算机的工作原理有很好的了解，但可以争论的是，这虽然是成为新手程序员所必需的，但并不充分。
- en: The extent to which software practitioners treat our work as a profession has,
    then, always been varied. It is also largely à la carte. The practice of writing
    software is not a profession and would not survive professionalization over a
    short timescale. Almost everyone who currently calls themselves a programmer would
    be excluded from the profession until they had taken some appropriate training,
    unless there were some way to get "grandfathered" in, which would undermine the
    value of being a member of a recognized profession. The sudden collapse in the
    availability of "licensed" programmers would either cripple businesses or see
    them using existing, unlicensed practitioners legally or otherwise. Imagine, for
    example, that the BCS managed to secure protected nomination for the profession
    in the UK. Would UK-based companies wait until their programmers were chartered
    professionals before proceeding with their IT projects, or would they sack the
    now-underqualified employees and outsource their work abroad?
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 软件从业者将我们的工作视为职业的程度，一直以来都是多样化的。这也很大程度上是按需定制的。编写软件的实践并不是一种职业，而且不会在短期内实现职业化。目前几乎所有自称为程序员的人，除非他们接受过一些适当的培训，否则都会被排除在职业之外，除非有某种方式可以“祖父式”地加入，这会削弱成为认可职业成员的价值。突然出现的“许可”程序员可用性的下降，要么会削弱企业，要么会看到他们合法或非法地使用现有的、未经许可的从业者。例如，想象一下，如果BCS设法在英国为该职业获得保护提名，英国的公司会等到他们的程序员成为特许专业人士后再进行IT项目，还是会解雇现在不合格的员工并将工作外包到国外？
- en: Could programming, then, be an art form, or a craft or trade that combines artisanal
    capability with some technical knowledge? In the book *The Computer Boys Take
    Over*, Nathan Ensmenger makes a compelling argument for this position. He observes
    that, while there is a significant corpus of technical knowledge and computer
    science that *can* go into programming, many programmers have only a partial understanding
    of this corpus. They augment their technical knowledge with self-taught patterns
    – things that experience tells them have worked before and will work again. Any
    programmer or team of programmers builds up a local domain of craft knowledge,
    with the result that the craft of programming varies from context to context.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，编程是否可以成为一种艺术形式，或者是一种结合了手工艺能力和某些技术知识的技艺或贸易？在《计算机男孩们接管》一书中，Nathan Ensmenger为这一立场提出了有力的论据。他观察到，尽管有大量的技术知识和计算机科学可以用于编程，但许多程序员对这个知识体系只有部分了解。他们通过自学模式来增强他们的技术知识——经验告诉他们以前有效，将来也会有效的东西。任何程序员或程序员团队都会建立起一个局部的手工艺知识领域，结果是编程技艺因环境而异。
- en: 'Ensmenger also notices that the programmer is responsible for mediating "between
    the technological and social architectures of the organization." He concludes
    that this combination of artisanal craft with scientific knowledge and social
    integration makes the programmer not a professional, but a technician. He also
    observes that the rhetoric of professional programmers is one of fluid boundaries:
    programmers will talk about their work as science, engineering, *or* art, depending
    on who is listening. Bear this in mind throughout this discussion – both to appraise
    the various positions that are described and to analyze my own conclusions for
    signs of Humpty-Dumptyism:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 恩斯梅格纳也注意到程序员负责在“组织的科技架构和社会架构之间进行调解。”他得出结论，这种将手工艺技术与科学知识和社会整合相结合的做法，使程序员不是一个专业人士，而是一个技术人员。他还观察到，专业程序员的修辞学具有流动的界限：程序员会根据听众的不同，将他们的工作描述为科学、工程、*或*艺术。在整个讨论中请记住这一点——既要评估所描述的各种立场，也要分析我自己的结论，看看是否有Humpty-Dumpty主义的表现：
- en: '*''When I use a word,'' Humpty Dumpty said in rather a scornful tone, ''it
    means just what I choose it to mean—neither more nor less.''*'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*“当我使用一个词时，”Humpty Dumpty带着一种轻蔑的语气说，“它的意思就是我选择的意思——不多也不少。”*'
- en: The **Software Craftsmanship movement**—[http://manifesto.softwarecraftsmanship.org/](http://manifesto.softwarecraftsmanship.org/)
    uses language that's firmly rooted in mediaeval trade schools. Adherents talk
    of apprenticeships and journeymen (and, to carry on an earlier reference, of shoes
    and ships and sealing-wax; of cabbages and kings.), though parallels with the
    guilds of middle-age Europe (and the exclusivity they practiced, on a par with
    professional institutes) tend not to be drawn. Focus is on community interaction,
    on learning from the experiences of others and synthesizing a new approach to
    the craft by combining those experiences.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**软件工艺运动**—[http://manifesto.softwarecraftsmanship.org/](http://manifesto.softwarecraftsmanship.org/)
    使用的是深深植根于中世纪贸易学校的语言。信徒们谈论学徒制和行会成员（以及继续一个早期的参考，关于鞋子和船只和封蜡；关于卷心菜和君主们），尽管与中世纪欧洲的行会（以及他们所实践的排他性，与专业机构相当）的平行关系往往不被提及。重点是社区互动，从他人的经验中学习，并通过结合这些经验来综合一种新的工艺方法。'
- en: 'While it appeals to centuries of tradition, software craftsmanship is very
    clearly a direct response to and retreat from the profession of "software engineering,"
    or maybe from a straw man idea of it. The foreword to Pete McBreen''s *Software
    Craftsmanship* asks:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然它吸引了几百年的传统，但软件工艺显然是对“软件工程”职业的直接回应和撤退，或者也许是对它的一个稻草人观点的撤退。皮特·麦克布伦的《软件工艺》序言问道：
- en: '*Is software engineering appropriate for projects of less than 100 developer-years?
    Is the specialization inherent in software engineering a good idea? Can software
    development even be expressed in engineering terms?*'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*软件工程是否适合于少于100开发者年的项目？软件工程中固有的专业化是否是一个好主意？软件开发甚至可以用工程术语来表达吗？*'
- en: The answer, as far as McBreen is concerned, of course turns out to be "no";
    apprenticeship, practice, and self-organized teams are preferred here. Software
    engineering may be suitable for building space shuttle software, McBreen tells
    us, but fails the producer of shrink-wrap commercial software or in-house line
    of business applications. Such applications need the personal touch, and a good
    programmer would understand not only the technical details of software construction,
    but the artistry required to make a bespoke piece.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 就麦克布伦而言，答案当然是“不”；这里更倾向于学徒制、实践和自我组织的团队。麦克布伦告诉我们，软件工程可能适合于建造航天飞机软件，但对于生产压缩包装商业软件或内部业务应用程序来说则失败了。这类应用程序需要个性化的触摸，而一个好的程序员不仅应该理解软件构建的技术细节，还应该理解制作定制作品所需的艺术技巧。
- en: What that *doesn't* address, though, is whether the software craftsmanship movement
    actually promotes software making as a *craft*, or whether it's as much a straw
    man as the version of engineering discussed in software engineering. The image
    of the mediaeval craft is as much one of exclusivity and division as that of the
    professional trade. Master craftsmen would be members of a guild that controlled
    the practice of the craft (and the dissemination of its secret techniques) in
    a given region. Other than the guild members, only the apprentices would be allowed
    to practice (and then only in the limited fashions enabled by their masters).
    Anyone who had finished their apprenticeship would be booted out to become a "journeyman,"
    taking odd jobs as they traveled to find a town that wasn't already under guild
    control, where they could set up shop, or until they could submit a "masterpiece"
    and become a member of the guild.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，它没有解决软件工艺运动实际上是否促进了软件制作作为一种*工艺*，或者它是否像软件工程中讨论的工程版本一样，同样是一个稻草人。中世纪工艺的形象与专业贸易一样，既具有排他性和分裂性。大师工匠是该地区控制工艺实践（及其秘密技术的传播）的行会成员。除了行会成员外，只有学徒被允许实践（而且只有在其师傅允许的有限方式下）。任何完成学徒期的人都会被赶出去成为“行商”，在他们旅途中寻找一个尚未被行会控制的城镇，在那里他们可以开店，或者直到他们可以提交“杰作”并成为行会成员。
- en: 'That members of the craftsmanship movement in software see this exclusivity
    as appealing is evident. The **Software Craftsmanship Manifesto**—[http://manifesto.softwarecraftsmanship.org](http://manifesto.softwarecraftsmanship.org)
    makes this point in both explicit ways:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 软件工艺运动中的成员将这种排他性视为吸引人的证据是显而易见的。《**软件工艺宣言**》—[http://manifesto.softwarecraftsmanship.org](http://manifesto.softwarecraftsmanship.org)
    以明确和隐晦的方式阐述了这一点：
- en: '*we have come to value […] a community of professionals.*'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们开始重视 [...] 一群专业人士的社区。*'
- en: '…and implicit ways:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: …以及隐晦的方式：
- en: '*we have come to value […] well-crafted software.*'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们开始重视 [...] 精心制作的软件。*'
- en: The second example is quite subtle, but what *is* "well-crafted software"? It's
    such a woolly phrase that the only way to get a definition would be by joining
    the guild of professionals; that is, by submitting to the masters.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个例子相当微妙，但“精心制作的软件”究竟是什么？这是一个如此模糊的短语，唯一获得定义的方式就是加入专业人士的行会；也就是说，通过向大师们屈服。
- en: 'Robert C. Martin likes to take this divisive approach to the language of software
    by defining "professionals" as those who exhibit desirable qualities, and "unprofessional"
    as those who do not:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 罗伯特·C·马丁喜欢通过定义“专业人士”为那些表现出可取品质的人，而将“非专业人士”定义为那些不具备这些品质的人来区分软件语言的不同：
- en: '*Legacy code is not inevitable when programmers behave professionally*—[https://twitter.com/unclebobmartin/status/298762801164451840](https://twitter.com/unclebobmartin/status/298762801164451840)'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*当程序员表现出专业行为时，遗留代码并非不可避免*—[https://twitter.com/unclebobmartin/status/298762801164451840](https://twitter.com/unclebobmartin/status/298762801164451840)'
- en: Here is a *minimal* list of the things that every software professional should
    be conversant with (from **The Clean Coder**—[http://www.amazon.com/The-Clean-Coder-Professional-Programmers/dp/0137081073](http://www.amazon.com/The-Clean-Coder-Professional-Programmers/dp/0137081073),
    *Chapter 1*, *emphasis original*)
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这里是一个*最小*的列表，列出了每个软件专业人士都应该熟悉的（来自**《清洁程序员》**—[http://www.amazon.com/The-Clean-Coder-Professional-Programmers/dp/0137081073](http://www.amazon.com/The-Clean-Coder-Professional-Programmers/dp/0137081073)，第一章，*原文强调*）
- en: Professionals know they are arrogant and are not falsely humble. A professional
    knows their job and takes pride in their work. A professional is confident in
    their abilities and takes bold and calculated risks based on that confidence.
    A professional is not timid. (*The Clean Coder*, *Chapter 1*)
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 专业人士知道他们很自大，但并不假装谦卑。专业人士了解自己的工作，并为其工作感到自豪。专业人士对自己的能力充满信心，并基于这种信心采取大胆而谨慎的风险。专业人士并不胆怯。（*《清洁程序员》，第一章*）
- en: 'The language used here automatically creates a division among programmers:
    those who conform to Martin''s ideal are "professional," and everybody else is,
    well, something else. Unprofessional? Amateurish? Not a programmer? It *also*
    creates a division between professional programmers and those they work with.
    Managers and customers had best not dare question how we''re working – we''re
    working *professionally*. (Brad Cox, in his book *Superdistribution: Objects as
    property on the electronic frontier*—[http://virtualschool.edu/mon/Superdistribution/](http://virtualschool.edu/mon/Superdistribution/),
    makes the same point about the division between programmers and non-programmers,
    so it already existed when he was writing in 1996\. He says, tongue in cheek,
    "The role of customers, and especially of managers, is to stand out of the way,
    checkbook in hand, admiring the brilliance of this programmer''s skill and devotion
    to his craft.")'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这里使用的语言自动在程序员之间造成了一种划分：那些符合马丁的理想的人是“专业人士”，而其他人则是，嗯，其他什么。不专业的？业余的？不是程序员？这也*同样*在专业程序员和他们合作的人之间造成了划分。经理和客户最好不要敢质疑我们的工作方式——我们在*专业*地工作。（布拉德·科克斯在他的书《超级分销：电子前沿上的对象作为财产》——[http://virtualschool.edu/mon/Superdistribution/](http://virtualschool.edu/mon/Superdistribution/)中提出了程序员和非程序员之间划分的观点，所以他写作于1996年时，这种划分已经存在。他半开玩笑地说：“客户，尤其是经理，的角色是站在一边，手拿支票簿，赞赏这位程序员技能的卓越和对他的手艺的奉献。”）
- en: The craftsmanship movement asks whether software is *really* a professional
    engineering discipline, and in answering "no" promotes many of the same ideals
    and divisions as the software engineering movement or of any regulated profession.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 手工艺运动质疑软件是否*真的*是一门专业工程学科，在回答“不是”时，它推广了许多与软件工程运动或任何受监管职业相同的理想和划分。
- en: 'I would like to pose a different question: is programming *really* a social
    science? To what extent should a programmer know the social, interpersonal side
    of software construction? Much of the content of this book has focused on the
    collaborative nature of programming: documentation, management, teamwork, and
    requirements engineering are all examples of things programmers do that are for
    or with other people. I would argue, then, that there are few situations in which
    a programmer can get away *without* those skills. The remaining sections in this
    chapter look at the practice of making software through the lenses of various
    branches of the social sciences.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我想提出一个不同的问题：编程*真的*是一门社会科学吗？程序员应该了解多少关于软件构建的社会、人际方面的知识？本书的大部分内容都集中在编程的协作性质上：文档、管理、团队合作和需求工程都是程序员为他人或与他人一起做的事情的例子。因此，我认为很少有情况是程序员可以*不*需要这些技能的。本章剩余部分将通过对社会科学各个分支的视角来探讨制作软件的实践。
- en: An Economic Philosophy of Software
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 软件的经济哲学
- en: Direct Economic Factors
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 直接经济因素
- en: Software products are often created or extended as fixed-duration projects.
    The estimated cost of the project is compared against the estimated revenue generated,
    and if the balance is favorable then the project is given the go-ahead. Advanced
    project funders will consider *protected revenue* (how many customers will not
    jump to a competing product if this feature is added) and *opportunity cost* (what
    work could we be doing if we decline this work), factoring those into the decisions
    about the project.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 软件产品通常作为固定期限的项目被创建或扩展。项目的预估成本与预估产生的收入进行比较，如果平衡有利，则项目获得批准。高级项目资助者会考虑*保护性收入*（如果添加此功能，有多少客户不会跳转到竞争产品）和*机会成本*（如果我们拒绝这项工作，我们可能在做些什么），将这些因素纳入项目决策中。
- en: I mentioned Barry W. Boehm and his book, **Software Engineering Economics**—[http://books.google.co.uk/books/about/Software_engineering_economics.html?id=mpZQAAAAMAAJ&redir_esc=y](http://books.google.co.uk/books/about/Software_engineering_economics.html?id=mpZQAAAAMAAJ&redir_esc=y)
    in *Chapter 9, Requirements Engineering*. He introduced the idea of human economic
    factors; assigning a dollar value to the satisfaction (or otherwise) the software
    would bring to its users, for example. I'll come back to that in the next section,
    on *Externalities*, but for the moment, bear in mind that the expected human economic
    factors are considered in the *project* cost.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我提到了巴里·W·博伊姆和他的书，**《软件工程经济学**》——[http://books.google.co.uk/books/about/Software_engineering_economics.html?id=mpZQAAAAMAAJ&redir_esc=y](http://books.google.co.uk/books/about/Software_engineering_economics.html?id=mpZQAAAAMAAJ&redir_esc=y)，在**第9章，需求工程**中。他介绍了人类经济因素的概念；例如，为软件将给其用户带来的满足感（或否则）分配美元价值。我将在下一节，关于**外部性**的下一节中回到这一点，但在此刻，请记住，预期的人类经济因素被认为是**项目**成本的一部分。
- en: So, strangely enough, the *maintenance* costs are considered a part of the project
    economics in Boehm's COCOMO model. Remember from Lehman's Laws of E-type software
    that the deployment environment evolves, and the software system must evolve to
    keep up with it. In Boehm's model, this evolution is accounted for in an entry
    in the project's costs.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，奇怪的是，**维护**成本在博伊姆的COCOMO模型中被视为项目经济的一部分。记住莱赫曼关于E型软件的定律，部署环境会进化，软件系统必须与之保持同步。在博伊姆的模型中，这种进化在项目成本的一个条目中得到体现。
- en: This maintenance costs fudge seems to be an indicator that something is wrong
    with the way we're budgeting for software. Some evolutionary changes (feature
    additions) must be accounted for as explicit projects, their costs explicitly
    calculated and balanced against projected income. Other evolutionary changes (maintenance
    fixes) are just considered a necessary risk of writing software, the costs of
    which are absorbed into the calculations of writing new features.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这种维护成本估算似乎表明我们在为软件预算的方式存在问题。一些进化变化（功能添加）必须被视为明确的项目，其成本必须明确计算并与其预期的收入相平衡。其他进化变化（维护修复）只是被视为编写软件的必要风险，其成本被纳入编写新功能的计算中。
- en: Are new features always bigger and more expensive than bug fixes? No. Do bug
    fixes always cost us money, and never attract or protect income? No. Are new features
    sometimes snuck into maintenance? Yes. Are bug fixes sometimes held off until
    new project releases? Yes. Then why aren't they budgeted together?
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 新功能总是比错误修复更大、更昂贵吗？不。错误修复总是花费我们金钱，并且从未吸引或保护收入吗？不。新功能有时会悄悄地融入维护中吗？是的。错误修复有时会推迟到新项目发布吗？是的。那么为什么它们没有被一起预算呢？
- en: 'It could be for ethical reasons: perhaps programmers feel that maintenance
    problems are mistakes they should own up to and correct free of charge. But remember
    that one of Lehman''s Laws says that the satisfaction derived from software will
    decay as the *social environment* involves. Not all bugs *were* bugs at the time
    of writing! You cannot be apologetic for work you did *correctly* before a change
    in the environment.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 可能是出于道德原因：也许程序员认为维护问题是他们应该承认并免费纠正的错误。但记住，莱赫曼定律之一指出，软件带来的满足感会随着**社会环境**的涉及而衰减。并非所有在编写时被认为是错误的错误在编写时都是错误的！你不能为在环境变化之前你做**正确**的工作道歉。
- en: To me, this suggests a need for a nimbler economic model; one that treats any
    change equally regardless of whether it's a bug fix, feature addition, or internal
    quality cleanup. Forget what we've *already* spent and made on this product (for
    that way lies the sunk-cost fallacy), what will the *proposed* change cost? What
    will it get us? How risky is it? What else could we be doing instead? What alternatives
    do we have?
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说，这表明需要一个更敏捷的经济模型；一个无论它是错误修复、功能添加还是内部质量清理，都同等对待任何变化的模型。忘记我们**已经**在这个产品上花费和制造了什么（因为这样会导致沉没成本谬误），**提议**的改变将花费多少？这将给我们带来什么？它有多大的风险？我们还能做什么？我们有什么替代方案？
- en: Externalities
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 外部性
- en: The above questions only consider the *direct* economic impact of making software.
    There are other factors; factors that have some form of cost or benefit but that
    don't have a tangible effect on the price or revenue of the work. In economics,
    these are called *externalities*.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 上述问题仅考虑了制作软件的**直接**经济影响。还有其他因素；这些因素以某种形式产生成本或效益，但不会对工作的价格或收入产生实际影响。在经济学中，这些被称为**外部性**。
- en: Externalities can be positive or negative, but they can also be personal rather
    than relating to a company and its work. Software making as a career has all sorts
    of externalities, in terms of benefits and costs, to being a programmer that aren't
    reflected in our salaries. Let's consider externalities that affect both the individual
    as well as the business.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 外部性可以是正面的，也可以是负面的，但它们也可以是个人层面的，而不是与公司及其工作相关。作为职业的软件开发具有各种外部性，包括利益和成本，这些外部性并没有反映在我们的工资中。让我们考虑那些既影响个人又影响企业的外部性。
- en: Open source software is a positive externality for many businesses. Many companies
    in the software industry take components or systems that have been published freely
    and incorporate them into their own products or provide "value-added" services
    such as support. These companies receive value from the open source software without
    having to pay for creating that software. As an example of open source software
    as an externality, the cost of writing OpenSSH doesn't factor into the price of
    macOS X, although OpenSSH is a component of that system.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 开源软件对许多企业来说是一种正面的外部性。软件行业的许多公司采用已经免费发布的组件或系统，并将它们纳入自己的产品中，或者提供“增值”服务，如支持。这些公司从开源软件中获得价值，而无需为创建该软件付费。作为一个开源软件作为外部性的例子，编写OpenSSH的成本并没有计入macOS
    X的价格，尽管OpenSSH是该系统的一个组件。
- en: 'The picture for individual programmers is less clear. Leaving aside micro-ISV
    developers for a moment, who''s personal and business goals are often tightly
    coupled, a career programmer applying for a job might be asked to produce a portfolio
    of open source projects that they have created or contributed to. I infer from
    this that *having created* open source software has a positive effect: it improves
    our reputation and the likelihood that we will be hired. On the other hand, *the
    act of creating* open source software can be negative: if you don''t do it as
    part of your job, then you''re effectively increasing the amount of work you do
    without any direct compensation.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 对于个人程序员的情况则不太明确。暂时不考虑那些个人和商业目标紧密相连的微型独立软件开发者，一个求职的职业程序员可能会被要求展示他们创建或贡献的开源项目组合。我推断，*创建*开源软件具有积极的影响：它提高了我们的声誉，增加了我们被雇佣的可能性。另一方面，*创建*开源软件的行为可能是负面的：如果你不是作为工作的一部分来做这件事，那么你实际上是在增加工作量而没有直接报酬。
- en: 'Bugs are negative externalities. Software companies often either price their
    work according to market forces if they''re selling to consumers or based on a
    day-rate for the initial project if they''re selling to a client business. In
    neither case is the subsequent cost of maintenance factored into the selling price;
    it''s going to be a reduction in profit compared to the same product requiring
    no maintenance. Customers themselves do not factor bugs into the (economic or
    psychological) cost of *using* software. As argued by David Rice in *Geekonomics:
    the real price of insecure software*—[http://books.google.co.uk/books/about/Geekonomics.html?id=k6cRhfp2aWgC](http://books.google.co.uk/books/about/Geekonomics.html?id=k6cRhfp2aWgC),
    customers often only have the feature checklist to go on when evaluating a software
    product and cannot tell anything about its quality. But the quality costs; you
    pay testers, you triage bug reports, you monitor support channels for problems,
    and you work on the fixes.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '缺陷是负面的外部性。软件公司通常在向消费者销售时根据市场力量定价，如果他们向客户企业销售，则基于初始项目的日费率。在两种情况下，后续的维护成本都没有计入销售价格；与无需维护的相同产品相比，这将导致利润减少。客户本身并没有将缺陷计入使用软件的（经济或心理）成本。正如David
    Rice在《Geekonomics: the real price of insecure software》一书中所论证的——[http://books.google.co.uk/books/about/Geekonomics.html?id=k6cRhfp2aWgC](http://books.google.co.uk/books/about/Geekonomics.html?id=k6cRhfp2aWgC)，在评估软件产品时，客户通常只有功能清单可以参考，无法了解其质量。但质量是有成本的；你支付测试人员，你分类处理缺陷报告，你监控支持渠道以发现问题，并致力于修复工作。'
- en: Some organizations run hackathons or hack days, in which people usually form
    teams to produce a software-based solution to some challenge, with the winners
    getting a prize. These hack days can have a positive career effect in that some
    employers might value contributing to hack days as evidence of community involvement,
    and they give the opportunity to "sharpen the saw" and try new skills or tools.
    On the other hand, spending even more time working (especially the all-nighters
    required at some hack days) will have a bad effect on your health, which is a
    negative effect.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一些组织会举办黑客马拉松或黑客日，在这些活动中，人们通常会组成团队，为某些挑战提供基于软件的解决方案，获胜者将获得奖品。这些黑客日可能会对职业生涯产生积极影响，因为一些雇主可能会将参与黑客日视为社区参与的证据，并且它们提供了“磨砺锯子”和尝试新技能或工具的机会。另一方面，花费更多时间工作（尤其是在某些黑客日中需要的通宵达旦）会对你的健康产生不利影响，这是一个负面影响。
- en: 'Finally, consider whether all of the work that goes into making a software
    product is even reflected in the label price. If you double the amount you spend
    on producing a user guide, does the price go up? Probably not. The same goes for
    localization: you get a larger pool of potential customers, but for the most part
    you wouldn''t be able to raise the price. That shows that, to your customers,
    localization is an externality: a benefit of localized software but not one that
    changes how much they pay.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，考虑一下制作软件产品所投入的所有工作是否都反映在标签价格上。如果你在制作用户指南上花费的金额加倍，价格会上涨吗？可能不会。同样适用于本地化：你将拥有更大的潜在客户池，但大部分情况下，你无法提高价格。这表明，对你的客户来说，本地化是一种外部性：本地化软件的好处，但不是改变他们支付金额的好处。
- en: 'Companies can factor the value they place on externalities into their decisions
    by internally charging for them or even passing the costs or savings onto customers:
    a simple example is that some agency companies will charge less for a project
    if they''re allowed to co-brand the resulting product. The association of the
    agency''s brand with the product and the possibility of that driving future work
    is a positive externality. Passing savings onto customers—that is, reducing costs
    when there are positive externalities—is obviously more palatable to them than
    passing on charges for negative externalities, but the latter can be done. Think
    of the price premiums on **organic foods**—[https://www.mint.com/blog/trends/organic-food-07082010/](https://www.mint.com/blog/trends/organic-food-07082010/),
    which are greater than the cost differences in production (which can, in some
    cases, be lower than for non-organic foods, due to subsidies—another way to reify
    an externality). By convincing purchasers that there are real benefits to organic
    foods, suppliers can command a premium price.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 公司可以通过内部收费或将成本或节省转嫁给客户来将他们对外部性的价值纳入其决策中：一个简单的例子是，如果允许他们共同品牌化最终产品，一些代理公司会对项目收取更少的费用。代理品牌与产品的关联以及可能推动未来工作的可能性是一种正外部性。将节省转嫁给客户——即在存在正外部性时降低成本——显然比转嫁负外部性的费用更易于接受，但后者是可以做到的。想想有机食品的价格溢价——[https://www.mint.com/blog/trends/organic-food-07082010/](https://www.mint.com/blog/trends/organic-food-07082010/)，这比生产成本差异（在某些情况下，由于补贴可能低于非有机食品）要高。通过说服购买者有机食品确实有实际的好处，供应商可以要求更高的价格。
- en: Traditional Supply-And-Demand Economics
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 传统供需经济学
- en: 'Many economics textbooks will start with a discussion of supply and demand
    as the key influences on market price: when demand is high or supply is low, prices
    go up; they go down when demand is low, or supply is high. The problem with applying
    this economic structure to software pricing is that supply is infinite: there''s
    no "unit cost," so once the software is made, it can be copied over and over until
    everybody who wants a copy has one. So how can software be sold *at all* without
    prices instantly plummeting to zero?'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 许多经济学教科书都会从讨论供需作为影响市场价格的关键因素开始：当需求高或供给低时，价格上升；当需求低或供给高时，价格下降。将这种经济结构应用于软件定价的问题在于供给是无限的：没有“单位成本”，所以一旦软件制作完成，就可以不断复制，直到所有想要副本的人都有为止。那么，软件如何才能在价格不立即跌至零的情况下进行销售呢？
- en: 'In the face of evidence, some people don''t believe it can. That''s what **Digital
    Rights Management** is about: trying to reinsert the scarcity of physical goods
    into the economics of software (and other digital goods) distribution. But people
    *do* successfully sell software, music, documents (such as this one), and so on
    without DRM. Rather than noticing the infinite supply "issue" and trying to limit
    supply, we need to try to understand the market that *does* exist, *is* sustainable,
    but that doesn''t match long-standing models.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 面对证据，有些人不相信这是可能的。这就是**数字版权管理**的宗旨：试图将物理商品的稀缺性重新引入软件（和其他数字商品）的经济学中。但人们确实成功地销售了软件、音乐、文档（例如这一篇）等，而没有使用DRM。我们不仅要注意到无限供应“问题”并试图限制供应，还需要尝试理解那个确实存在、可持续，但与长期模型不匹配的市场。
- en: 'I''ll start with a hypothesis: that what''s being traded is not the software
    itself, but *capability* first, and *time* second. Given the desire, but inability,
    to do something as a problem, *anything* that solves the problem by enabling that
    thing is valued. This is what economist Herbert Simon described as bounded rationality,
    or **satisficing**—[http://www.economist.com/node/13350892](http://www.economist.com/node/13350892).
    So, a first solution discovered, whether ideal or not, is still valued. This already
    explains why the infinite supply "problem" is not real: on discovering that a
    product can be purchased that meets their needs, a consumer is likely to settle
    for making the purchase as a satisficing solution—many will not spend extra time
    on researching a pirated version of the app. (For some people, using a pirated
    version of an application *does* cost, in terms of anxiety. Any decision, however
    rational, that runs counter to a person''s ethics exerts a mental cost. This is
    understood by the information security sector as one of the limiting factors of
    controlling security via policy.)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我将从假设开始：所交易的不是软件本身，而是首先*能力*，其次是*时间*。鉴于有做某事的愿望，但无法做到，任何通过使该事物成为可能来解决该问题的东西都是有价值的。这就是经济学家赫伯特·西蒙描述的**有限理性**，或**满意解法**—[http://www.economist.com/node/13350892](http://www.economist.com/node/13350892)。因此，第一个发现的解决方案，无论是否理想，都是有价值的。这已经解释了为什么无限供应“问题”不是真实的：在发现可以购买到满足他们需求的产品时，消费者可能会满足于作为满意解法进行购买——许多人不会花额外的时间去研究盗版应用。对于一些人来说，使用盗版应用*确实*会带来成本，即焦虑。任何与一个人的道德相悖的决定，无论多么理性，都会产生心理成本。信息安全行业将这一点视为通过政策控制安全的限制因素之一。
- en: 'Having found that the problem can indeed be solved, the customer is then able
    to spend a little effort on thinking about how to improve that solution. That''s
    where the time-saving part comes in. Now that they know *what* they are capable
    of, it''s possible to improve that capability so that they''ve got more free time
    for other things: that''s also worth money, as Benjamin Franklin made clear. (This
    argument applies, in a modified form, to games. Just reverse the two factors.
    *Given* that I have time available, can you supply the *capability* for me to
    enjoy its passage?)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 找到问题确实可以解决后，顾客随后可以花一点时间思考如何改进这个解决方案。这就是节省时间的地方。现在他们知道*自己能够做什么*，就有可能提高这种能力，以便有更多的时间去做其他事情：这也很有价值，正如本杰明·富兰克林所明确指出的。（这个论点以修改后的形式适用于游戏。只需颠倒这两个因素。*鉴于*我有时间可用，你能提供让我享受其过程的*能力*吗？）
- en: 'In this model, software itself has no value, compatible with the infinite supply
    problem in traditional economics. But the customer''s time and abilities *are*
    in limited supply, and software can be used as a tool to unlock these. In this
    sense, paying for software is similar to paying for education: it is not the *teaching*
    that you want, it is the *having been taught*. We can then say of software that
    it is not *creating the solution to the problem* that customers value, but *the
    problem having been solved*. Because of the nature of satisfaction, customers
    will pay for a solution if the cost and the capability are "good enough."'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个模型中，软件本身没有价值，这与传统经济学的无限供应问题相符合。但顾客的时间和能力是有限的，软件可以用作工具来解锁这些。从这个意义上说，为软件付费类似于为教育付费：你想要的不是*教学*，而是*已经受过教育*。因此，我们可以这样说，软件的价值不在于*创造解决问题的方案*，而在于*问题已经被解决*。由于满足的本质，如果成本和能力“足够好”，顾客会为解决方案付费。
- en: Looking back to the second paragraph in this chapter, we see that this economic
    model is just the same philosophy, expressed in economic terms. Our role as people
    who make software is to *solve problems*—we provide a valuable service to our
    customers by *solving problems*.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾本章的第二段，我们看到这种经济模式只是同样的哲学，用经济术语表达。我们作为软件制作者的角色是*解决问题*——我们通过*解决问题*为我们的客户提供有价值的服务。
- en: A Management Philosophy of Software
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 软件管理哲学
- en: Imagine a world in which programmers are valued similar to middle managers.
    But first, disabuse yourself of the idea that managers are inherently useless
    and evil, and let me explain what a manager is.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一个世界，在这个世界里，程序员的地位与中层管理者相似。但首先，请摒弃管理者天生无用且邪恶的观念，让我来解释一下管理者的定义。
- en: Managers typically don't get paid for doing work; they typically get paid according
    to how well their team does work, and how much work their team does. Lots of work
    done badly isn't very good, but not enough work done well isn't desirable either.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 管理者通常不会因为工作而获得报酬；他们通常根据团队的工作表现和团队完成的工作量来获得报酬。大量工作做得不好并不好，但工作做得不够好也不理想。
- en: That usually means that they avoid doing work. Given some work to do, their
    usual action is to find the person on their team most capable of doing the work,
    and to get them to do the work. They will make that person responsible for doing
    the work, and (if they're any good) give them the authority to do it.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常意味着他们会避免做工作。给他们一些工作要做，他们通常的做法是找到团队中最有能力完成这项工作的人，并让他们去做。他们会让那个人负责完成工作，并且（如果他们做得好）给予他们完成工作的权限。
- en: But they're not paid for telling the person how to do the work, or for the task
    of delegating responsibility or authority. In fact, if the work isn't done, or
    isn't done well, it's the *manager* that the rest of the company will hold responsible.
    They're paid for the work having been done.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 但他们并不是因为告诉别人如何做工作，或者因为委托责任或授权的任务而获得报酬。事实上，如果工作没有完成，或者没有做好，那么公司其他部门会认为*管理者*应该负责。他们是因为工作已经完成而获得报酬。
- en: '*Now*, imagine a world in which programmers are valued similar to middle managers:
    a world in which the programmer is the manager and the computers report to the
    programmer. The programmer is not paid for *writing software* – for explaining
    to the computer what work needs to be done. The programmer is paid for the computers
    *having done the work* that was assigned, both in sufficient quantity and to sufficient
    quality. If the computers don''t do the work, it''s the *programmer* who will
    be held responsible.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*现在*，想象一个程序员与中层管理者一样被重视的世界：一个程序员是管理者，计算机向程序员汇报的世界。程序员不是因为*编写软件*——向计算机解释需要完成的工作而获得报酬。程序员是因为计算机*完成了分配的工作*而获得报酬，无论是数量足够还是质量足够。如果计算机没有完成工作，那么*程序员*将承担责任。'
- en: Again, this is just a restatement of the position taken at the beginning of
    the chapter. While the restatement in the previous section told us what the people
    who buy software value, this one tells us what should be considered valuable in
    someone who makes software. We see that "number of lines of code written," "number
    of story points completed," "number of features added," and "number of bugs fixed"
    are not, in themselves, valuable things, but perhaps we can see the extent to
    which each is a useful *proxy* of our work.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，这只是在章节开头所采取立场的重申。虽然前一个部分的重申告诉我们购买软件的人重视什么，但这一点告诉我们，在软件制作人身上应该考虑什么是有价值的。我们看到，“编写的代码行数”、“完成的用户故事点数”、“增加的功能数量”和“修复的bug数量”本身并不是有价值的东西，但也许我们可以看到每个指标作为我们工作有用*代理*的程度。
- en: A Social Philosophy of Software
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 软件社会哲学
- en: 'In *Chapter 9, Requirements Engineering*, you saw that software does not stand
    on its own but is embedded in the social system in which it''s used. Much of the
    rest of this book has discussed a different social system: the system in which
    software is *developed*. A lot of software is made by more than one person. Even
    in the rare cases where a single person does all the *production* (the coding,
    the design, the UI text, the marketing, the sales, and so on), there will likely
    be some customer input, even if that just takes the form of support emails.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在第9章“需求工程”中，你了解到软件并非独立存在，而是嵌入在其使用的社交系统中。本书的其余部分主要讨论了另一个社交系统：软件的开发系统。许多软件是由多个人共同制作的。即使在罕见的情况下，一个人完成了所有的*生产*（编码、设计、UI文本、营销、销售等），也可能会有些客户反馈，即使那只是以支持邮件的形式。
- en: 'So, how are these two social systems accounted for in the field? The typical
    image of a programmer is of someone (typically a white male in his 20s), working
    on his own, staring at a monitor. If the outside world is acknowledged at all,
    it is through its exclusion: the programmer wears his headphones to avoid distractions
    as he cuts his code. (At the time of writing, and for my account, the results
    of *a Google Images search for "programmer"*— [https://www.google.co.uk/search?q=programmer&aq=f&um=1&ie=UTF-8&hl=en&tbm=isch&source=og&sa=N&tab=wi&ei=4J2TUbOrOZSV0QWI7YHABQ&biw=2560&bih=1368&sei=452TUcKIFoi40QXmjIDYCQ](https://www.google.co.uk/search?q=programmer&aq=f&um=1&ie=UTF-8&hl=en&tbm=isch&source=og&sa=N&tab=wi&ei=4J2TUbOrOZSV0QWI7YHABQ&biw=2560&bih=1368&sei=452TUcKIFoi40QXmjIDYCQ)
    supported this description of the "typical" image.)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这些两种社会系统在这个领域是如何被考虑的？典型的程序员形象是某人（通常是20多岁的白人男性），独自工作，盯着显示器。如果外界被承认，那也是通过其排除：程序员戴上耳机以避免干扰，编写代码。（在撰写本文时，以及就我的观点而言，*谷歌图片搜索“程序员”*的结果——[https://www.google.co.uk/search?q=programmer&aq=f&um=1&ie=UTF-8&hl=en&tbm=isch&source=og&sa=N&tab=wi&ei=4J2TUbOrOZSV0QWI7YHABQ&biw=2560&bih=1368&sei=452TUcKIFoi40QXmjIDYCQ](https://www.google.co.uk/search?q=programmer&aq=f&um=1&ie=UTF-8&hl=en&tbm=isch&source=og&sa=N&tab=wi&ei=4J2TUbOrOZSV0QWI7YHABQ&biw=2560&bih=1368&sei=452TUcKIFoi40QXmjIDYCQ)支持了这种“典型”形象的描述。）
- en: We automatically see all sorts of problems here. The person making the software
    is a programmer, not any of the other specialists involved. He is male, not female
    or trans*. He is white, not of any other ethnicity. He is young, not old. He is
    alone, not working with others. All of these inequalities exist in the *depiction*
    of software makers. All of which fail to capture the diversity and the complexity
    of the social systems surrounding software systems. Many of these inequalities
    exist in the depiction of software makers because they exist in the *reality*
    of software making.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里自动看到了各种问题。制作软件的人是程序员，而不是其他任何相关专家。他是男性，而不是女性或跨性别者。他是白人，而不是其他任何种族。他是年轻人，而不是老年人。他是独自一人，而不是与他人一起工作。所有这些不平等都存在于软件制作者的*描绘*中。所有这些都未能捕捉到围绕软件系统的社会系统的多样性和复杂性。许多这些不平等存在于软件制作者的描绘中，因为它们存在于软件制作的*现实*中。
- en: 'Social scientists ask two high-level questions of any social system they investigate:
    How is the society made and repaired? What divisions and inequalities does it
    support? By examining the "conventional" view of a programmer, we have seen some
    of the inequalities currently supported by the software industry.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 社会科学家会对他们研究的任何社会系统提出两个高级问题：社会是如何构建和修复的？它支持哪些分化和不平等？通过审视“传统”的程序员观点，我们已经看到了软件行业目前支持的一些不平等。
- en: 'We could potentially find more. Shanley Kane *examined the language used by
    Silicon Valley start-ups*—[http://blog.prettylittlestatemachine.com/blog/2013/02/20/what-your-culture-really-says](http://blog.prettylittlestatemachine.com/blog/2013/02/20/what-your-culture-really-says)
    looking for the underlying biases, for example:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能还能找到更多。Shanley Kane *研究了硅谷初创公司使用的语言*——[http://blog.prettylittlestatemachine.com/blog/2013/02/20/what-your-culture-really-says](http://blog.prettylittlestatemachine.com/blog/2013/02/20/what-your-culture-really-says)，寻找潜在的偏见，例如：
- en: We don't have a vacation policy
  id: totrans-74
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 我们没有休假政策
- en: What your culture might actually be saying is… We fool ourselves into thinking
    we have a better work/life balance when really people take even less vacation
    than they would when they had a vacation policy. Social pressure and addiction
    to work has replaced policy as a regulator of vacation time.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你的文化可能实际上在说……我们欺骗自己认为我们有一个更好的工作/生活平衡，而实际上人们即使有休假政策，休假时间也比没有休假政策时还要少。社会压力和对工作的沉迷已经取代了政策，成为休假时间的调节器。
- en: 'If true, this implies that those able to work longer hours and take fewer holidays
    are in a position of relative power within the system. This is turn privileges
    certain classes of people: those who are younger and do not have children, for
    example.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是真的，那么这表明那些能够工作更长的时间并且休假更少的人在这个系统中处于相对有利的地位。这反过来又赋予了某些阶级特权：例如，那些年轻且没有孩子的阶级。
- en: So, that's the social system where software is *made*. What about that in which
    software is *used*? There are inequalities and divisions there, too. Commercial
    software systems (and even free software systems that run on commercial platforms)
    are only accessible to those who can afford to buy them.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这就是软件是*制造*的社会系统。那么，软件是*使用*的社会系统又如何呢？那里也存在不平等和分化。商业软件系统（甚至运行在商业平台上的免费软件系统）只有那些买得起的人才能访问。
- en: In the UK, the Office of National Statistics *estimates that over 7 million
    people have never used the internet*. They identify correlations between ability
    to access the internet and demographic status, so online services are (for example)
    less likely to be available to people over 75 and to disabled people (This lack
    of accessibility is before we even consider whether specific services have "accessibility"
    features as commonly understood by developers.)
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在英国，国家统计局**估计有超过700万人从未使用过互联网**。他们确定了互联网接入能力与人口统计状况之间的相关性，因此在线服务（例如）不太可能对75岁以上的人或残疾人可用（在我们考虑特定服务是否具有开发者通常理解的“可访问性”功能之前，这种可访问性的缺乏就已经存在了。）
- en: Other inequalities can be found. Many applications have been created to only
    support the English language, and where they *can* be localized, they don't handle
    non-Gregorian calendars, right-to-left writing systems, characters with diacritic
    modifiers, and other "non-English" (or non-American) locale features.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以找到其他不平等。许多应用程序只支持英语，而且即使它们*可以*本地化，它们也不处理非格里高利日历、从右到左的书写系统、带变音符号的字符以及其他“非英语”（或非美国）地区特性。
- en: Knowing that these inequalities exist (others do, too) and reporting them is
    one thing, but probably isn't novel. What are we to do with that awareness?
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 知道这些不平等存在（其他也存在）并报告它们是一回事，但可能并不新颖。我们该如何利用这种意识呢？
- en: 'Which inequalities you feel are *unjust* probably depends on your political
    views, though the ethics documents described in the previous chapter give us a
    handy guide. From **the ACM code of ethics**— [http://www.acm.org/about/code-of-ethics](http://www.acm.org/about/code-of-ethics):'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 你觉得哪些不平等是不公正的，这很可能取决于你的政治观点，尽管前一章中描述的伦理文件为我们提供了一个实用的指南。从**ACM伦理准则**—— [http://www.acm.org/about/code-of-ethics](http://www.acm.org/about/code-of-ethics)：
- en: '*Inequities between different groups of people may result from the use or misuse
    of information and technology. In a fair society, all individuals would have equal
    opportunity to participate in, or benefit from, the use of computer resources
    regardless of race, sex, religion, age, disability, national origin or other such
    similar factors. However, these ideals do not justify unauthorized use of computer
    resources nor do they provide an adequate basis for violation of any other ethical
    imperatives of this code.*'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '*不同群体之间可能存在的不平等可能源于信息和技术的不当使用。在一个公平的社会中，所有个人，无论种族、性别、宗教、年龄、残疾、国籍或其他类似因素，都应享有平等的机会参与或从计算机资源的使用中受益。然而，这些理想并不能证明未经授权使用计算机资源的合理性，也不能为违反本准则的任何其他伦理规范提供充分的依据。*'
- en: That's quite explicit. The behavior the ACM expects from its members is that
    of no discrimination whatsoever *within the limits of the rest of the ethical
    code* – as ever, potential ethical conflicts exist. Stealing computer resources
    from privileged parties for the use of disadvantaged parties (I hereby dub this
    "Robin Hood scheduling") would be one example of such a conflict.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当明确。ACM期望其成员遵守的，是在其他伦理准则范围内的**完全不歧视**——正如以往一样，潜在的伦理冲突仍然存在。从特权方窃取计算机资源供弱势方使用（我将其称为“罗宾汉调度”）就是这种冲突的一个例子。
- en: An important factor to be aware of in discrimination is **othering**. Social
    psychologists differentiate between **marked and unmarked identities**—[http://cak400.wordpress.com/2012/10/01/marked-and-unmarked-identities-and-social-hierarchy/](http://cak400.wordpress.com/2012/10/01/marked-and-unmarked-identities-and-social-hierarchy/).
    An "unmarked" identity is what's accepted to be normal, and other identities are
    differentiated ("marked") by being different from this benchmark. People who talk
    about immigrants are *marking* some people as immigrants, and by extension implicitly
    defining natives as normal. People who talk about women are *marking* some people
    as women, and implicitly defining men as normal.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在歧视中需要注意的一个重要因素是**他者化**。社会心理学家区分了**标记身份和非标记身份**——[http://cak400.wordpress.com/2012/10/01/marked-and-unmarked-identities-and-social-hierarchy/](http://cak400.wordpress.com/2012/10/01/marked-and-unmarked-identities-and-social-hierarchy/)。一个“非标记”的身份是人们认为正常的东西，而其他身份通过不同于这个基准来区分（“标记”）。谈论移民的人是在**标记**一些人作为移民，并由此隐含地将本土人定义为正常。谈论女性的人是在**标记**一些人作为女性，并隐含地将男性定义为正常。
- en: 'The important aspect with regard to Othering is the asymmetric nature of this
    distinction: it is between those who are "normal" and those who are "not like
    us." It''s important to realize that we *do* this, that it''s how our minds *work*,
    to *identify* when we''re doing it and to consciously *correct* for it. As *Mike
    Lee put it*—[https://twitter.com/bmf/status/333960606837272577](https://twitter.com/bmf/status/333960606837272577):'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 关于“他者化”的重要方面是这种区别的不对称性质：它是在“正常”人和“不像我们的人”之间。重要的是要认识到我们*确实*这样做，这是我们的思维方式，要*识别*我们何时这样做，并自觉地*纠正*它。正如
    *Mike Lee* 所说—[https://twitter.com/bmf/status/333960606837272577](https://twitter.com/bmf/status/333960606837272577)：
- en: '*We put those qualities into the other that we reject in ourselves. But that
    blinds us to the reality.*'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们把那些我们自己在自己身上拒绝的品质放入其他人的身上。但这使我们忽视了现实。*'
- en: So, next time you think "normal people wouldn't want *that* feature," or "no
    one with an ounce of common sense would use it *that* way," ask whether you *really*
    think "people who aren't like me wouldn't want that," then consider whether you're
    making software for the small number of people who are like you, or for everyone.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，下次当你认为“普通人不会想要*那个*功能”或“任何有常识的人都不会那样使用它”时，问问自己你是否真的认为“不像我的人不会想要那个”，然后考虑你是否在为像你这样的人的少数人编写软件，还是为所有人编写。
- en: A Pedagogic Philosophy of Software
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 软件的教育哲学
- en: This is the most technical and low-level part of the philosophy chapter, and
    the one I'm least qualified to talk about. I've done a couple of years of teaching
    programming at a university but as one of the most obvious features of university
    teaching is that no one trains you before you start, I'm not sure whether that
    counts.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这是哲学章节中最技术性和最基础的组成部分，也是我最没有资格谈论的部分。我在大学教了几年编程，但作为大学教学最明显的特征之一是，在你开始之前没有人会培训你，我不确定这算不算。
- en: It's easy to find assertions that *academic computer science bears no relation
    to practice*—[http://shape-of-code.coding-guidelines.com/2013/05/15/wot-apply-academic-work-in-industry/](http://shape-of-code.coding-guidelines.com/2013/05/15/wot-apply-academic-work-in-industry/)
    and that *computer science is not adequate preparation for a career in software*.
    Is this a problem? If it is, what is the cause? What alternatives are there?
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易找到这样的断言：*学术计算机科学与实践无关*—[http://shape-of-code.coding-guidelines.com/2013/05/15/wot-apply-academic-work-in-industry/](http://shape-of-code.coding-guidelines.com/2013/05/15/wot-apply-academic-work-in-industry/)
    和 *计算机科学不足以作为软件职业的准备*。这是一个问题吗？如果是，原因是什么？有哪些替代方案？
- en: 'The divergence between commercial and academic software practices began early
    in the history of computing. The first version of the ACM curriculum described
    in *Software as a pursuit* was **Curriculum 68**—[http://dl.acm.org/citation.cfm?id=362976](http://dl.acm.org/citation.cfm?id=362976).
    In the introduction to this curriculum, the authors make it clear that the academic
    computer science course is not appropriate for training professional IT staff:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 商业软件和学术软件实践之间的差异在计算机历史的早期就已经开始。在《*软件作为一项追求*》中描述的 ACM 课程的第一版是**课程 68**—[http://dl.acm.org/citation.cfm?id=362976](http://dl.acm.org/citation.cfm?id=362976)。在这门课程的介绍中，作者明确指出，学术计算机科学课程不适合培训专业
    IT 人员：
- en: '*For example, these recommendations are not directed to the training of computer
    operators, coders, and other service personnel. Training for such positions, as
    well as for many programming positions, can probably be supplied best by applied
    technology programs, vocational institutes, or junior colleges. It is also likely
    that the majority of applications programmers in such areas as business data processing,
    scientific research, and engineering analysis will continue to be specialists
    educated in the related subject matter areas, although such students can undoubtedly
    profit by taking a number of computer science courses.*'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '*例如，这些建议并不是针对计算机操作员、编码员和其他服务人员的培训。对于这些职位以及许多编程职位，可能最好由应用技术项目、职业学院或大专院校提供培训。也很有可能，在商业数据处理、科学研究、工程分析等领域的大多数应用程序员将继续是受过相关学科领域教育的专家，尽管这样的学生无疑可以通过参加一些计算机科学课程而受益。*'
- en: 'So, the curriculum was created with the knowledge that it would *not* apply
    directly to those who wish to be professional programmers. While vocational courses
    do exist, it''s very common to meet capable self-taught programmers who had no
    formal introduction to the field – myself included. There''s a *lot* of information
    about how to make software out in the world, which the self-taught must discover
    somehow: ultimately, much will be learned by trial and error. The **Software Engineering
    Body of Knowledge**—[https://www.computer.org/education/bodies-of-knowledge/software-engineering](https://www.computer.org/education/bodies-of-knowledge/software-engineering)
    can be thought of as a guide to what to learn from the published literature on
    software engineering. When formatted as a book, the guide is longer than this
    text. Like this book, the guide itself is not at the level of "this is how software
    is made" but at the level of "these are the things you should bear in mind while
    making software." So, we have a 200-page guide to 13 "knowledge areas," which
    comprise lists of things you should know, with *some* references to available
    literature. The knowledge areas, the topics chosen in each, and the currency and
    validity of the references are all (as you could probably expect from this field)
    contentious, so the **SWEBOK** (**Software Engineering Body of Knowledge**) represents
    a conservative selection of ideas that have definitely become broadly applied.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，课程是在这样的认识下创建的：它**不会**直接适用于那些希望成为专业程序员的人。虽然存在职业课程，但遇到没有接受过该领域正规介绍的有能力自学程序员是非常常见的——包括我自己。世界上关于如何制作软件的信息**很多**，自学的人必须以某种方式发现这些信息：最终，很多知识将通过试错来学习。《软件工程知识体系》（[https://www.computer.org/education/bodies-of-knowledge/software-engineering](https://www.computer.org/education/bodies-of-knowledge/software-engineering)）可以被视为从已发表的软件工程文献中学习内容的指南。当以书籍的形式呈现时，这个指南比本文更长。就像这本书一样，指南本身并不处于“这是如何制作软件”的水平，而是处于“在制作软件时应牢记的这些事情”的水平。因此，我们有一个200页的指南，涵盖了13个“知识领域”，这些领域包括你应该知道的事情列表，并附带一些对可用文献的引用。知识领域、每个领域选择的主题以及参考文献的时效性和有效性都是（正如你可能从这个领域预料到的）有争议的，因此**SWEBOK**（**软件工程知识体系**）代表了保守选择的一组已经广泛应用的观念。
- en: 'How can the self-taught programmer get up to speed on this huge and evolving
    body of knowledge? Supporters of "software as a profession" would say that they
    can''t; that it''s up to professional bodies to teach and maintain the body of
    knowledge and to ensure that only those who are up to speed may be considered
    programmers. Supporters of "software as a craft" would also say that they can''t:
    that they need the expert guidance that comes from apprenticeship, then the period
    of self-searching that comes from being a journeyman.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 自学程序员如何才能跟上这个庞大且不断发展的知识体系？支持“软件作为一门职业”的人会说他们不能；他们认为这是专业机构的责任去教授和维护知识体系，并确保只有跟上进度的人才能被认为是程序员。支持“软件作为一门手艺”的人也会说他们不能：他们认为他们需要来自学徒期的专家指导，然后是作为熟练工人的自我探索期。
- en: 'But, reflecting on *Chapter 10, Learning*, I have to ask: is the SWEBOK anything
    other than a *curriculum* for learning, whether taught or self-directed? It''s
    presented at quite an abstract level (and in a very dry style), so may work better
    for instructors to decide what to teach than for beginners trying to find out
    what to *learn*.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，反思第10章“学习”，我必须问：SWEBOK除了是一个学习课程，无论是教授的还是自学的，还有什么吗？它以相当抽象的水平（以及非常枯燥的风格）呈现，因此可能更适合教师决定教什么，而不是初学者试图找出要**学习**什么。
- en: 'That content – not necessarily the SWEBOK itself, but something akin to it
    – could easily be adapted into a guide for self-learning. The pattern I find most
    appropriate for this is the competency matrix: I have evaluated my own knowledge
    of computer science against **the Programmer Competency Matrix**—[http://www.starling-software.com/employment/programmer-competency-matrix.html](http://www.starling-software.com/employment/programmer-competency-matrix.html)
    over the last few years, and in the course of writing this text created **the
    Programmer Courtesy Matrix**—[http://blog.securemacprogramming.com/2013/04/rebooting-the-programmer-competency-matrix/](http://blog.securemacprogramming.com/2013/04/rebooting-the-programmer-competency-matrix/)
    to summarize the material.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 那些内容——不一定是SWEBOK本身，但类似于它——可以很容易地改编成自学指南。我发现最合适的模式是能力矩阵：我在过去几年中，将我对计算机科学的知识与**程序员能力矩阵**（[http://www.starling-software.com/employment/programmer-competency-matrix.html](http://www.starling-software.com/employment/programmer-competency-matrix.html)）进行了评估，并在撰写本文的过程中创建了**程序员礼仪矩阵**（[http://blog.securemacprogramming.com/2013/04/rebooting-the-programmer-competency-matrix/](http://blog.securemacprogramming.com/2013/04/rebooting-the-programmer-competency-matrix/)），以总结材料。
- en: Where the matrix succeeds is that it gives learners a handy way to evaluate
    their own progress (whether through reflection, or discussion with evaluators
    or educators) and to understand what's needed to advance in any particular row
    of the matrix. The columnar layout provides guidance on what's "next" and what
    can be left to "later."
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 矩阵成功的地方在于，它为学习者提供了一个方便的方式来评估自己的进度（无论是通过反思，还是与评估者或教育者的讨论），并了解在矩阵的任何特定行中需要什么来前进。列布局提供了关于“接下来”是什么以及可以留到“以后”的指导。
- en: '*This ordering is something I struggled with early in my career. I was working
    at a large company that had progression through technical roles: software engineer,
    senior software engineer, principal software engineer, and software architect.
    I was hired at the first level but quickly got promoted to senior software engineer.
    Because I focused on the next level, I tried to learn about the responsibilities
    of the principal engineer before consolidating and extending my understanding
    of the senior role. I therefore didn''t make a particularly good senior engineer:
    a prerequisite for moving onward.*'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '*这种排序是我职业生涯早期遇到的一个难题。我在一家大型公司工作，该公司有通过技术角色的晋升途径：软件工程师、高级软件工程师、资深软件工程师和软件架构师。我被雇佣在第一个级别，但很快就被提升为高级软件工程师。因为我专注于下一个级别，所以我试图在巩固和扩展我对高级角色的理解之前，学习资深工程师的职责。因此，我没有成为一个特别好的资深工程师：这是继续前进的先决条件。*'
- en: 'Where the matrix *fails* is at the part the **SWEBOK** does well: giving you
    references to material at each level, so the learner knows *where* to find the
    information to progress. That part of a curriculum is much more contextual: a
    curriculum for self-learning might point to books, articles, conference presentations,
    or websites for where to learn; a curriculum for directed learning might suggest
    particular training or university courses, or a problem set to be assessed by
    an educator. The point is that there''s no reason a self-taught programmer can''t,
    with awareness of the field and their own capabilities, provided by a competency
    matrix, progress as a career programmer – maybe at a different pace to a taught
    or master-bound programmer, but progressing, nonetheless.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 矩阵在**SWEBOK**做得好的部分**失败**了：为每个级别提供参考资料，让学习者知道*在哪里*找到进步所需的信息。这部分课程内容更加具体：自学课程可能会指向书籍、文章、会议演讲或网站，以了解学习资源；而指导学习课程可能会建议特定的培训或大学课程，或者由教育者评估的问题集。关键是，没有理由一个自学程序员不能，通过能力矩阵提供的领域意识和自身能力，像职业程序员一样进步——可能进度比教授或硕士程序员慢，但仍然在进步。
- en: Referring this discussion (and *Chapter 10, Learning*) back to the position
    statement at the beginning of this chapter, the teaching of software makers should
    really be considered the teaching of *problem identification and solution* within
    the context of software systems. From this view, the goals of teaching in the
    academic and commercial fields are compatible; it's just the choice of problems
    to solve (and hence the focus on particular areas of the body of knowledge, equivalent
    to particular rows in the competency matrix) that are different.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 将这次讨论（以及*第10章，学习*）与本章开头的位置声明联系起来，软件制作者的教学实际上应该被视为在软件系统背景下进行*问题识别和解决方案*的教学。从这个角度看，学术和商业领域的教学目标是一致的；只是选择要解决的问题（因此关注知识体系中的特定领域，相当于能力矩阵中的特定行）不同。
- en: For novice programmers, the self-taught, apprenticed, and educated (Beware of
    reading a false dichotomy in this sentence; self-taught and apprenticed programmers
    are not "uneducated," they just did not learn how to make software *from an educator*)
    alike, the course from hobbyist to professional software making – whatever the
    context in which that software is made, and whatever the specific definition of
    "professional" we choose – starts with *awareness* of software as a means to solve
    problems, not as an end in itself. The next step is *awareness* of the gap between
    their novice competence and the current state of the art. How they choose to close
    that gap is less important than awareness of the gap's existence.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 对于新手程序员，无论是自学成才、学徒出身还是受过教育（请注意，这句话中不存在错误的二分法；自学和学徒出身的程序员并非“未受过教育”，他们只是没有从教育者那里学习如何制作软件*而已*），从爱好者到专业软件制作的课程——无论软件是在何种背景下制作的，无论我们选择何种“专业”的具体定义——都始于对软件作为解决问题的手段而非目的本身的*认识*。下一步是认识到他们新手能力与当前技术水平之间的差距。他们选择如何填补这个差距并不那么重要，重要的是认识到这个差距的存在。
- en: What Does It Mean to Be "Good" At Making Software?
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 成为“擅长”制作软件意味着什么？
- en: Statements abound about the productivity of people who make software. Many people
    claim *that some programmers are 10x more productive than others*—[http://www.johndcook.com/blog/2011/01/10/some-programmers-really-are-10x-more-productive/](http://www.johndcook.com/blog/2011/01/10/some-programmers-really-are-10x-more-productive/).
    What does that *mean*?
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 关于制作软件的人的生产力，有很多说法。许多人声称*有些程序员的生产力是其他程序员的10倍*——[http://www.johndcook.com/blog/2011/01/10/some-programmers-really-are-10x-more-productive/](http://www.johndcook.com/blog/2011/01/10/some-programmers-really-are-10x-more-productive/)。这*意味着*什么？
- en: Presumably, to come up with a quantity, even a relative one like "10x," we have
    some quantitative measure that can be applied to people who make software in different
    contexts. What is that quantity? The number of significant lines of code written?
    If so, should we sack programmers *who write -2000 lines of code in a day*—[http://folklore.org/StoryView.py?story=Negative_2000_Lines_Of_Code.txt](http://folklore.org/StoryView.py?story=Negative_2000_Lines_Of_Code.txt)?
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 想要得出一个数量，即使是像“10倍”这样的相对数，我们可能有一些可以应用于在不同背景下制作软件的人的定量指标。这个数量是什么？是编写的具有重大意义的代码行数吗？如果是这样，我们应该解雇那些*一天只写-2000行代码的程序员*——[http://folklore.org/StoryView.py?story=Negative_2000_Lines_Of_Code.txt](http://folklore.org/StoryView.py?story=Negative_2000_Lines_Of_Code.txt)？
- en: How about the time taken to fix a bug, the measure originally applied (to a
    small number of programmers) to discover the 10x figure? Maybe the programmers
    aren't more productive, but *we caught them on a good day*? What about the programmer
    who spent more time ensuring the bug wasn't present in the first place? Is that
    person more diligent or wasting time gold-plating?
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，修复一个错误所需的时间，最初是用来发现10倍数的指标（针对少数程序员）？也许程序员并没有更有效率，但我们*恰好捕捉到了他们效率高的一天*？那么，那个花了更多时间确保错误最初就不存在的人呢？这个人是不是更勤奋，还是在浪费时间进行过度设计？
- en: If you accept the view of software making presented here, then the *amount of
    software one can write* is, regardless of the way you measure it, irrelevant to
    the question of how good the maker is. The relevant question is how many problems
    the software maker removed from (or introduced into) the system in which their
    customers are working.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你接受这里提出的软件制作观点，那么一个人能编写的软件数量，无论你如何衡量，都与制作人是否优秀无关。相关的问题是，软件制作人从（或引入）他们的客户正在工作的系统中移除了多少问题。
- en: '*One of the most effective demonstrations of this measure of productivity came
    from a friend who was asked by a potential client to design a mobile app to solve
    a particular issue the client''s business had. Having met with the client and
    discussed their problems, this person observed that a spreadsheet was a better
    solution than the mobile app. They thus declined the opportunity to waste the
    client''s money creating a suboptimal solution. That person could get their spreadsheet
    written, and the software maker could turn their attention to more appropriate
    uses of their skills.*'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '*这种生产力度量标准最有效的展示之一来自一位朋友，他被一位潜在客户要求设计一个移动应用程序来解决客户业务中存在的特定问题。在与客户会面并讨论他们的问题后，这个人观察到电子表格比移动应用程序是一个更好的解决方案。因此，他们拒绝了浪费客户金钱创建次优解决方案的机会。那个人可以写出电子表格，软件制造商可以将他们的注意力转向更合适的技能应用。*'
- en: Unfortunately, the question of whether software's net effect in a system has
    been to solve or to introduce problems is unanswered, and is perhaps unanswerable,
    as systems get large. For example, until the 1980s, many offices in Western organizations
    employed a largely female typing pool, albeit on low wages and in noisy environments.
    After the introduction of the desktop computer, those typists were replaced by
    people in traditionally higher-status jobs preparing their own documents with
    word-processing applications. Those applications and the computers they ran on
    were supported by a predominantly male IT support workforce.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，关于软件在系统中的净效应是解决问题还是引入问题的问题尚未得到解答，也许在系统变得庞大时是无法回答的。例如，直到20世纪80年代，西方组织中的许多办公室都雇佣了主要由女性组成的打字员，尽管工资较低且环境嘈杂。在引入台式电脑后，那些打字员被那些使用文字处理应用程序准备自己文档的传统上地位较高的工作人员所取代。那些应用程序以及它们运行的电脑得到了主要由男性IT支持工作团队的支撑。
- en: To the businesses in which those changes occurred, was the IT support department
    more or less cost-effective than the typing pool? Was typing in a word processor
    a better use of an executive's time than handwriting a manuscript for a typist?
    Do desktop computers and office printers cause fewer problems than a few dozen
    typewriters, or more problems?
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 对于经历了这些变化的企业来说，IT支持部门与打字员相比，其成本效益是更高还是更低？使用文字处理器的打字是否比为打字员手写稿件更有效地利用了高管的时间？台式电脑和办公打印机是否比几十台打字机造成的问题更少，还是更多？
- en: At a social level, have the unemployed typists been freed from the tyranny of
    the typing pool, or have they been excluded from the workforce? Has the computer
    been good or bad for gender equality? Has software opened up more opportunities
    than it has removed?
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在社会层面，失业的打字员是否从打字员的专制中解放出来，或者他们被排除在劳动力之外？电脑对性别平等是好事还是坏事？软件是否创造了比它消除的更多机会？
- en: These are complicated questions, and I'm going to finish without answering them.
    Suffice it to say that, while our new metric for productivity is better philosophically
    than things like lines of code, it's a lot harder to apply.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这些问题是复杂的，我将不回答它们就结束。只需说，虽然我们新的生产力度量标准在哲学上比代码行数等事物更好，但应用起来要困难得多。
- en: Conclusion
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: I wrote this book to reflect on what I knew about making software and to understand
    what I didn't know about making software. I published it so that you could take
    advantage of what I've found over the decade I've been doing this for a living,
    and to trigger your own reflections on your experiences (with the hope that you
    would share these with us, just as I have).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我写这本书是为了反思我所知道的关于制作软件的知识，以及理解我关于制作软件所不知道的知识。我出版它是为了让你们能够利用我在从事这一职业的十年中所发现的东西，并激发你们对自己经历的反思（希望你们能像我所做的那样与我们分享）。
- en: 'I started by looking at the things we do when we''re at the coal face: the
    tools and practices we use to convert ideas into software. Then I looked at how
    we work with other people: how we document what we''ve done; how we find out what
    software needs writing; how we take advantage of opportunities to learn from other
    people, interpret other people''s arguments, and work with them in the context
    of a team or a business. Finally, I tried to construct a high-level model in which
    to situate all of that work, by considering the ethics and philosophy of making
    software, and how to move our knowledge forward by teaching this generation''s
    novices.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我首先从我们在煤场工作时的事情开始：我们用来将想法转化为软件的工具和实践。然后我观察了我们如何与其他人合作：我们如何记录我们所做的工作；我们如何找出需要编写的软件；我们如何利用机会从他人那里学习，解释他人的论点，并在团队或商业环境中与他们合作。最后，我试图构建一个高级模型，将所有这些工作定位其中，通过考虑制作软件的伦理和哲学，以及如何通过教授这一代新手的技能来推进我们的知识。
- en: 'Through this process, I found that, while computer science may be able to tell
    us something about the compilers and languages we use on computers, software products
    can''t be isolated from the *social* systems in which they''re made and used.
    Psychology, sociology, ethnography, and economics: all of the social sciences
    have wisdom to impart that can help us use our skills as software makers to solve
    problems for people.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个过程，我发现，虽然计算机科学可能能够告诉我们关于我们在计算机上使用的编译器和语言的一些信息，但软件产品不能脱离它们被制作和使用的*社会*系统。心理学、社会学、民族志和经济学：所有社会科学都有智慧可以传授，可以帮助我们作为软件制作者使用我们的技能来解决人们的问题。
- en: 'Unfortunately, this work closed on a quandary: while different bodies of software
    makers have identified the ethical imperative to avoid discrimination, we cannot
    unequivocally say that our industry has not caused *new* divisions and inequalities
    in the societies it has affected. Questions of whether to use web or native technologies,
    or whether functional or object-oriented programming styles are "better" will
    either be answered, become irrelevant, or both. The question of whether our work
    removes or strengthens divisions between people will never go away and will be
    the measure by which history judges what we do.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，这项工作以一个困境结束：虽然不同的软件制作者群体已经确定了避免歧视的道德必要性，但我们不能明确地说我们的行业没有在其影响的社会中造成*新的*分裂和不平等。关于是否使用Web或本地技术，或者是否使用函数式或面向对象的编程风格是“更好”的问题，要么会被回答，要么变得无关紧要，或者两者都会。我们工作是否消除或加强了人与人之间的分裂的问题永远不会消失，这将是历史评判我们所作所为的标准。
