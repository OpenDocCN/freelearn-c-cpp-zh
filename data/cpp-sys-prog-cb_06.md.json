["```cpp\n#include <stdio.h>\n#include <unistd.h>\n#include <string.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n\nchar* msg1 = \"Message sent from Child to Parent\";\nchar* msg2 = \"Message sent from Parent to Child\";\n#define MSGSIZE 34\n#define IN      0\n#define OUT 1\n```", "```cpp\nint main()\n{\n    char inbufToParent[MSGSIZE];\n    char inbufToChild[MSGSIZE];\n    int childToParent[2], parentToChild[2], pid, nbytes;\n\n    inbufToParent[0] = 0;\n    inbufToChild[0] = 0;\n    if (pipe(childToParent) < 0)\n        return 1;\n\n    if (pipe(parentToChild) < 0)\n        return 1;\n```", "```cpp\nif ((pid = fork()) > 0)\n{\n        printf(\"Created child with PID = %d\\n\", pid);\n        close(childToParent[IN]);\n        write(childToParent[OUT], msg1, strlen(msg1));\n        close(childToParent[OUT]);\n\n        close (parentToChild[OUT]);\n\n        read(parentToChild[IN], inbufToChild, strlen(msg2));\n        printf(\"%s\\n\", inbufToChild);\n        close (parentToChild[IN]);\n        wait(NULL);\n}\n```", "```cpp\nelse\n{\n        close (childToParent[OUT]);\n        read(childToParent[IN], inbufToParent, strlen(msg1));\n        printf(\"%s\\n\", inbufToParent);\n        close (childToParent[IN]);\n\n        close (parentToChild[IN]);\n        write(parentToChild[OUT], msg2, strlen(msg2));\n        close (parentToChild[OUT]);\n}\nreturn 0;\n```", "```cpp\n#include <stdio.h>\n#include <string.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n#include <unistd.h>\n\n#define MAX_LENGTH 128\n```", "```cpp\nint main()\n{\n    char* fifoChat = \"/tmp/chat\";\n    mkfifo(fifoChat, 0600);\n\n    char msgReceived[MAX_LENGTH], msgToSend[MAX_LENGTH];\n```", "```cpp\n    while (1)\n    {\n        int fdUser1 = open(fifoChat, O_WRONLY);\n        printf(\"User1: \");\n        fgets(msgToSend, MAX_LENGTH, stdin);\n        write(fdUser1, msgToSend, strlen(msgToSend)+1);\n        close(fdUser1);\n\n        int fdUser2 = open(fifoChat, O_RDONLY);\n        read(fdUser2, msgReceived, sizeof(msgReceived));\n        printf(\"User2: %s\\n\", msgReceived);\n        close(fdUser2);\n    }\n    return 0;\n}\n```", "```cpp\nwhile (1)\n{\n        int fdUser2 = open(myfifo, O_RDONLY);\n        read(fdUser2, msgReceived, sizeof(msgReceived));\n        printf(\"User1: %s\\n\", msgReceived);\n        close(fdUser2);\n\n        int fdUser1 = open(myfifo, O_WRONLY);\n        printf(\"User2: \");\n        fgets(msgToSend, MAX_LENGTH, stdin);\n        write(fdUser1, msgToSend, strlen(msgToSend)+1);\n        close(fdUser1);\n}\n```", "```cpp\ngcc fifo_chat_user1.c -o chatUser1\n\ngcc fifo_chat_user2.c -o chatUser2\n```", "```cpp\nroot@d73a2ef8d899:/BOOK/chapter6# ls -latr /tmp/chat\nprw------- 1 root root 0 Oct 1 23:40 /tmp/chat\n```", "```cpp\n#include <stdio.h>\n#include <string.h>\n#include <mqueue.h>\n\n#define MAX_MESSAGES 10\n#define MAX_MSG_SIZE 256\n```", "```cpp\nint main()\n{\n    mqd_t user1Desc, user2Desc;\n    char message[MAX_MSG_SIZE];\n    char message2[MAX_MSG_SIZE];\n\n    struct mq_attr attr;\n    attr.mq_flags = 0;\n    attr.mq_maxmsg = MAX_MESSAGES;\n    attr.mq_msgsize = MAX_MSG_SIZE;\n    attr.mq_curmsgs = 0;\n```", "```cpp\n    if ((user1Desc = mq_open (\"/user1\", O_WRONLY | O_CREAT,\n         \"0660\", &attr)) == -1)\n    {\n        perror (\"User1: mq_open error\");\n        return (1);\n     }\n     if ((user2Desc = mq_open (\"/user2\", O_RDONLY | O_CREAT,\n         \"0660\", &attr)) == -1)\n     {\n         perror (\"User2: mq_open error\");\n         return (1);\n     }\n```", "```cpp\n    while (1)\n    {\n        printf(\"USER 1: \");\n        fgets(message, MAX_MSG_SIZE, stdin);\n        if (mq_send (user1Desc, message, strlen (message)\n            + 1, 0) == -1)\n        {\n            perror (\"Not able to send message to User 2\");\n            continue;\n        }\n        if (mq_receive (user2Desc, message2, MAX_MSG_SIZE,\n             NULL) == -1)\n        {\n            perror (\"tried to receive a message from User 2\n                but I've failed!\");\n            continue;\n        }\n        printf(\"USER 2: %s\\n\", message2);\n    }\n    return 0;\n}\n```", "```cpp\ngcc mq_chat_user_1.c -o user1 -g -lrt\ngcc mq_chat_user_2.c -o user2 -g -lrt\n```", "```cpp\nroot@1f5b72ed6e7f:/BOOK/chapter6# ll /dev/mqueue/user*\n------x--- 1 root root 80 Oct 7 13:11 /dev/mqueue/user1*\n------x--- 1 root root 80 Oct 7 13:11 /dev/mqueue/user2*\n```", "```cpp\n#include <stdio.h>\n#include <sys/mman.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <string.h>\n\n#define STORAGE_ID1 \"/SHM_USER1\"\n#define STORAGE_ID2 \"/SHM_USER2\"\n#define STORAGE_SIZE 32\n```", "```cpp\nint main(int argc, char *argv[])\n{\n    char message1[STORAGE_SIZE];\n    char message2[STORAGE_SIZE];\n\n    int fd1 = shm_open(STORAGE_ID1, O_RDWR | O_CREAT, S_IRUSR | \n        S_IWUSR);\n    int fd2 = shm_open(STORAGE_ID2, O_RDWR | O_CREAT, S_IRUSR | \n        S_IWUSR);\n    if ((fd1 == -1) || (fd2 == -1))\n    {\n        perror(\"open\");\n        return 10;\n    }\n```", "```cpp\n    // extend shared memory object as by default it's initialized \n    //  with size 0\n    int res1 = ftruncate(fd1, STORAGE_SIZE);\n    if (res1 == -1)\n    {\n        perror(\"ftruncate\");\n        return 20;\n    }\n\n    // map shared memory to process address space\n    void *addr1 = mmap(NULL, STORAGE_SIZE, PROT_WRITE, MAP_SHARED, \n        fd1, 0);\n    void *addr2 = mmap(NULL, STORAGE_SIZE, PROT_WRITE, MAP_SHARED, \n        fd2, 0);\n    if ((addr1 == MAP_FAILED) || (addr2 == MAP_FAILED))\n    {\n        perror(\"mmap\");\n        return 30;\n    }\n```", "```cpp\n    while (1)\n    {\n        printf(\"USER 1: \");\n        fgets(message1, STORAGE_SIZE, stdin);\n        int len = strlen(message1) + 1;\n        memcpy(addr1, message1, len);\n\n        printf(\"USER 2 (enter to get the message):\"); getchar();\n        memcpy(message2, addr2, STORAGE_SIZE);\n        printf(\"%s\\n\", message2);\n    }\n\n    return 0;\n}\n```", "```cpp\ngcc shm_chat_user1.c -o user1 -g -lrt\ngcc shm_chat_user2.c -o user2 -g -lrt\n```", "```cpp\nroot@1f5b72ed6e7f:/BOOK/chapter6# ll /dev/shm/SHM_USER*\n-rw------- 1 root root 32 Oct 7 23:26 /dev/shm/SHM_USER1\n-rw------- 1 root root 0 Oct 7 23:26 /dev/shm/SHM_USER2\n```"]