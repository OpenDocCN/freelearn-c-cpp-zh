- en: Appendix A
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 附录A
- en: Thank you for coming this far on this journey through software architecture.
    Our goal in writing this book was to help you make informed decisions regarding
    the design of your applications and systems. By now, you should feel confident
    when deciding whether to choose IaaS, PaaS, SaaS, or FaaS.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢您在软件架构的旅程中走到这一步。我们撰写这本书的目标是帮助您在设计应用程序和系统时做出明智的决策。到目前为止，当决定选择IaaS、PaaS、SaaS或FaaS时，您应该感到自信。
- en: There are a lot of things we haven't even touched on in this book as they were
    extensive and out of the scope of the book. Either we had too little experience
    with the given topic, or we thought that it was too niche. There are also areas
    that we felt were very important, but we couldn't find the right place for them
    in the chapters. You'll find them in this appendix.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们还有很多事情没有涉及，因为它们非常广泛，超出了书的范围。要么是我们对给定主题的经验太少，要么是我们认为它太小众。还有一些领域，我们觉得非常重要，但我们在章节中找不到合适的位置。您将在这个附录中找到它们。
- en: Designing data storage
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计数据存储
- en: Let's now discuss the storage for your application. First let's decide whether
    you should go with SQL, NoSQL, or something else.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们讨论一下应用程序的存储。首先让我们决定您应该选择SQL、NoSQL还是其他什么。
- en: A good rule of thumb is to decide on the technology according to the size of
    your database. For small databases, say, those whose size will never grow into
    the terabyte area, going with SQL is a valid approach. If you have a very small
    database or want to create an in-memory cache, you can try SQLite. If you plan
    to go into single terabytes, again guaranteeing that the size will never get bigger
    than that, your best bet would be to go with NoSQL. It's possible in some cases
    to still stick to SQL databases, but it gets expensive quickly because of the
    costs of hardware, as you'll need a beast of a server for your master node. Even
    if it's not an issue, you should measure whether the performance is enough for
    your needs and be prepared for long maintenance windows. In some cases, it may
    also suit you to just run a cluster of SQL machines using technologies such as
    Citus, which is, in essence, a sharded PostgreSQL. However, usually, it's just
    cheaper and simpler to go with NoSQL in such cases. If the size of your database
    exceeds 10 TBs or you need to ingest data in real time, consider using a data
    warehouse instead of NoSQL.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的经验法则是根据数据库的大小来决定技术。对于小型数据库，比如那些大小永远不会增长到千兆字节区域的数据库，选择SQL是一个有效的方法。如果您有一个非常小的数据库或想创建一个内存缓存，您可以尝试SQLite。如果您计划进入单一的千兆字节，再次保证大小永远不会超过这个范围，您最好选择NoSQL。在某些情况下，仍然可以坚持使用SQL数据库，但由于硬件成本的原因，这很快就会变得昂贵，因为您需要一台强大的服务器作为主节点。即使这不是问题，您也应该衡量性能是否足够满足您的需求，并准备好长时间的维护窗口。在某些情况下，只需运行一组SQL机器，使用诸如Citus之类的技术，这也可能适合您，Citus本质上是一个分片的PostgreSQL。然而，通常在这种情况下，选择NoSQL更便宜、更简单。如果您的数据库大小超过10
    TB，或者需要实时摄入数据，考虑使用数据仓库而不是NoSQL。
- en: Which NoSQL technology should I use?
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我应该使用哪种NoSQL技术？
- en: 'The answer to this question depends on several factors. A few are listed here:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题的答案取决于几个因素。以下是其中的一些：
- en: If you want to store time series (save increments at small, regular intervals),
    then the best option would be to use InfluxDB or VictoriaMetrics.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您想存储时间序列（在小的、定期的间隔内保存增量），那么最好的选择是使用InfluxDB或VictoriaMetrics。
- en: If you need something similar to SQL but could live without joins, or in other
    words, if you plan to store your data in columns, you can try out Apache Cassandra,
    AWS DynamoDB, or Google's BigTable.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您需要类似SQL但可以不使用连接，或者换句话说，如果您计划将数据存储在列中，您可以尝试使用Apache Cassandra、AWS DynamoDB或Google的BigTable。
- en: If that's not the case, then you should think about whether your data is a document
    without a schema, such as JSON or some kind of application logs. If that's the
    case, you could go with Elasticsearch, which is great for such flexible data and
    provides a RESTful API. You could also try out MongoDB, which stores its data
    in **Binary JSON** (**BSON**) format and allows MapReduce.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果不是这种情况，那么您应该考虑您的数据是否是没有模式的文档，比如JSON或某种应用程序日志。如果是这种情况，您可以选择Elasticsearch，它非常适合这种灵活的数据，并提供RESTful
    API。您也可以尝试使用MongoDB，它以**二进制JSON**（**BSON**）格式存储数据，并允许MapReduce。
- en: OK, but what if you don't want to store documents? Then you could opt for object
    storage, especially if your data is large. Usually, going with a cloud provider
    is OK in this case, which means that using Amazon's S3 or Google's Cloud Storage
    or Microsoft's Blob storage should help your case. If you want to go with something
    local, you could use OpenStack's Swift or deploy Ceph.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，但如果您不想存储文档怎么办？那么您可以选择对象存储，特别是如果您的数据很大的话。在这种情况下，通常选择云提供商是可以的，这意味着使用Amazon的S3或Google的Cloud
    Storage或Microsoft的Blob存储应该有助于您的情况。如果您想选择本地存储，您可以使用OpenStack的Swift或部署Ceph。
- en: If file storage is also not what you're looking for, then perhaps your case
    is just about simple key-value data. Using such storage has its benefits as it's
    fast. This is why many distributed caches are built using it. Notable technologies
    include Riak, Redis, and Memcached (this last one is not suitable for persisting
    data).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文件存储也不是你要找的，那么也许你的情况只是简单的键值数据。使用这种存储有它的好处，因为它很快。这就是为什么许多分布式缓存都是使用它构建的。值得注意的技术包括Riak、Redis和Memcached（最后一个不适合持久化数据）。
- en: Aside from the previously mentioned options, you could consider using a tree-based
    database such as BerkeleyDB. Those databases are basically specialized key-value
    storage with path-like access. If trees are too restricting for your case, you
    might be interested in graph-oriented databases such as Neo4j or OrientDB.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 除了前面提到的选项，您还可以考虑使用基于树的数据库，比如BerkeleyDB。这些数据库基本上是专门的键值存储，具有类似路径的访问。如果��对您的情况太过限制，您可能会对面向图的数据库感兴趣，比如Neo4j或OrientDB。
- en: Serverless architecture
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无服务器架构
- en: While related to cloud-native design, serverless architecture is a popular topic
    on its own. It gained a lot of popularity since the introduction of FaaS or CaaS
    products, such as AWS Lambda, AWS Fargate, Google Cloud Run, and Azure Functions.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然与云原生设计相关，无服务器架构本身是一个热门话题。自引入FaaS或CaaS产品（如AWS Lambda、AWS Fargate、Google Cloud
    Run和Azure Functions）以来，它变得非常受欢迎。
- en: Serverless is mostly an evolution of PaaS products such as Heroku. It abstracts
    the underlying infrastructure so that developers can focus on the application
    and not on infrastructural choices.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器主要是PaaS产品（如Heroku）的演进。它抽象了底层基础架构，使开发人员可以专注于应用程序，而不是基础架构选择。
- en: An additional benefit of serverless over older PaaS solutions is that you don't
    have to pay for what you don't use. Rather than paying for a given service level,
    you typically pay for the actual execution time of the deployed workload with
    serverless. If you only want to run a given piece of code once a day, you don't
    need to pay a monthly fee for an underlying server.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 与旧的PaaS解决方案相比，无服务器的另一个好处是您不必为您不使用的部分付费。与支付给定服务级别的费用不同，您通常会根据部署的工作负载的实际执行时间付费。如果您只想每天运行一段代码，您不需要为基础服务器支付月费。
- en: While we didn't get into too much detail about serverless, it is rarely used
    with C++. When it comes to FaaS, only AWS Lambda currently supports C++ as a possible
    language. Since containers are language-agnostic, you can use C++ applications
    and functions with CaaS products such as AWS Fargate, Azure Container Instances,
    or Google Cloud Run.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们没有详细讨论无服务器，但它很少与C++一起使用。在FaaS方面，目前只有AWS Lambda支持C++作为可能的语言。由于容器是语言无关的，您可以使用C++应用程序和函数与AWS
    Fargate、Azure容器实例或Google Cloud Run等CaaS产品一起使用。
- en: Serverless functions may still be relevant to you if you want to run non-C++
    auxiliary code used along with your C++ application. Maintenance tasks and scheduled
    jobs are an excellent fit for serverless and they usually don't require the performance
    or efficiency of C++ binaries.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要运行与您的C++应用程序一起使用的非C++辅助代码，无服务器函数可能仍然与您相关。维护任务和定期作业非常适合无服务器，它们通常不需要C++二进制文件的性能或效率。
- en: Communication and culture
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通信和文化
- en: The focus of this book is software architecture. Why would we want to mention
    communication and culture in a book around software, then? If you think about
    it, all software is written *by* people *for* people. The human aspect is prevalent
    and yet we often fail to admit it.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的重点是软件架构。那么为什么我们要在围绕软件的书中提到沟通和文化呢？如果您仔细想想，所有的软件都是由人编写的，供人使用的。人的因素是主要的，但我们经常不愿承认它。
- en: As an architect, your role won't be to figure out the best approach to solving
    a given problem. You'll also have to communicate your proposed solution to your
    team members. Often, the choices you make will result from previous conversations.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 作为架构师，您的角色不仅是找出解决特定问题的最佳方法。您还必须将您提出的解决方案与团队成员沟通。通常，您所做的选择将是基于先前的对话。
- en: These are the reasons communication and team culture also play a role in software
    architecture.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是沟通和团队文化在软件架构中也发挥作用的原因。
- en: In one of the early chapters, we've mentioned Conway's Law. This law states
    that the architecture of the software system reflects the organization that's
    working on it. This means that building great products requires building great
    teams and understanding psychology.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在早期的章节中，我们提到了康威定律。这个定律指出软件系统的架构反映了正在处理它的组织。这意味着构建优秀的产品需要构建优秀的团队并理解心理学。
- en: If you want to be a great architect, learning people skills may be as important
    as learning technical ones.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想成为一名优秀的架构师，学习人际关系技能可能与学习技术技能一样重要。
- en: DevOps
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps
- en: We've used the term DevOps (and DevSecOps) several times within this book. This
    topic deserves some additional space, in our opinion. DevOps is an approach to
    building software products that breaks with traditional silo-based development.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本书中多次使用了DevOps（和DevSecOps）这个术语。在我们看来，这个主题值得额外的空间。DevOps是一种构建软件产品的方法，它打破了传统的基于独立开发的模式。
- en: In the waterfall model, teams operated on single aspects of work independently
    of each other. The development team would write code, QA would test and validate
    the code, and security and compliance would come after that. Eventually, the operations
    team would take care of maintenance. The teams rarely communicated, and even then,
    it was usually a very formal process.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在瀑布模型中，团队独��地操作单个工作方面。开发团队编写代码，QA测试和验证代码，然后才是安全和合规性。最终，运维团队将负责维护。团队很少进行沟通，即使进行沟通，通常也是一个非常正式的过程。
- en: Knowledge about particular fields of expertise was only available to the teams
    responsible for a given piece of the workflow. Developers knew very little about
    QA and next to nothing about operations. While this setup was very convenient,
    the modern landscape requires more agility than the waterfall model can provide.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 关于特定专业领域的知识以前只能由负责特定工作流程的团队获得。开发人员对QA知之甚少，对运维几乎一无所知。虽然这种设置非常方便，但现代环境需要比瀑布模型提供更多的灵活性。
- en: That's why a new model of working was proposed, one that encourages more collaboration,
    better communication, and lots of knowledge sharing between different stakeholders
    of a software product. While DevOps refers to bringing together developers and
    operations, what it means is bringing everyone closer.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么提出了一种新的工作模式，鼓励更多的协作，更好的沟通，并在软件产品的不同利益相关者之间进行大量的知识共享。虽然DevOps指的是将开发人员和运维团队聚集在一起，但它的意思是让每个人更加接近。
- en: Developers start working with QA and security even before they write the first
    lines of code. Operation engineers are more familiar with the code base. Businesses
    can easily track the progress of a given ticket and, in some cases, can even do
    a deployment preview in a self-service manner.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员在编写第一行代码之前就开始与QA和安全合作。运维工程师对代码库更熟悉。企业可以轻松跟踪特定工单的进展，并且在某些情况下，甚至可以自助进行部署预览。
- en: DevOps has become synonymous with using particular tools such as Terraform or
    Kubernetes. But DevOps is by no means the same as using any specific tools. Your
    organization can follow the DevOps principles without using Terraform or Kubernetes,
    and it can use Terraform and Kubernetes while not practicing DevOps.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps已经成为使用特定工具如Terraform或Kubernetes的代名词。但DevOps并不意味着使用任何特定的工具。你的组织可以遵循DevOps原则而不使用Terraform或Kubernetes，也可以在不实践DevOps的情况下使用Terraform和Kubernetes。
- en: 'One of the principles of DevOps is that it encourages improved information
    flow among the product''s stakeholders. With that, it''s possible to fulfill another
    principle: reduce wasteful activities that don''t bring value to the end product.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps的原则之一是鼓励产品利益相关者之间改善信息流动。有了这一点，就有可能实现另一个原则：减少不为最终产品带来价值的浪费活动。
- en: When you're building modern systems, it is worth doing so using modern methodology.
    Migrating an existing organization to DevOps may require a massive mindset shift,
    so it is not always possible. It's worth pursuing when starting a greenfield project
    that you have control over.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当你构建现代系统时，值得使用现代方法。将现有组织迁移到DevOps可能需要进行大规模的思维转变，因此并非总是可能的。在启动一个你可以控制的全新项目时值得追求。
