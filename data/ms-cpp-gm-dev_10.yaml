- en: Multiplayer
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多人游戏
- en: 'Since my earliest gaming adventures, I have found that sharing the experience
    always made it more memorable. Back in those days, the concept of multiplayer
    revolved around playing with friends on the couch or getting together with other
    game fans for an epic **LAN** (**local area network**) party. Things have changed
    dramatically since then, with online, worldwide, shared gaming experiences the
    new norm. In this chapter, we will cover the concept of adding multiplayer support
    to your game project, specifically focusing on networked multiplayer. As I have
    said before, the topic of computer networking is a very large and diverse topic
    and would require more time and space than we have to cover in full. Instead,
    we will focus on the high-level overview and go deep where required. In this chapter,
    we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 自从我最早的游戏冒险以来，我发现分享体验总是让它更加难忘。在那些日子里，多人游戏的概念围绕着与朋友一起在沙发上玩游戏或者与其他游戏爱好者聚在一起举办一场史诗般的**LAN**（本地区域网络）派对。自那时以来，情况发生了巨大变化，现在在线、全球共享的游戏体验已成为新常态。在本章中，我们将介绍如何为您的游戏项目添加多人支持的概念，重点关注网络多人游戏。正如我之前所说，计算机网络的话题是一个非常庞大和多样化的话题，需要比我们现在有的时间和空间更多的时间来全面覆盖。因此，我们将重点介绍高层概述，并在需要时深入讨论。在本章中，我们将涵盖以下主题：
- en: Introduction to multiplayer in games
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多人游戏简介
- en: Network design and protocol development
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络设计和协议开发
- en: Creating a client/server
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建客户端/服务器
- en: Introduction to multiplayer in games
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏中的多人游戏简介
- en: To boil it down to its simplest terms, a multiplayer game is a type of video
    game where more than one person can play simultaneously. While single-player video
    games are usually geared around one player competing with AI opponents and achieving
    predefined goals, multiplayer games are designed around interaction with other
    human players. These interactions can be in the form of competition, partnership,
    or simply social engagement. How these multiple player interactions are implemented
    can vary depending on factors such as location and genre, from fighter games with
    same screen multiplayer to online multiplayer role-playing games, with users sharing
    a common environment. In this next section, we will look at some of the various
    ways multiplayer interactions can be included in video games.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，多人游戏是一种视频游戏类型，可以让多人同时玩。而单人游戏通常是围绕一个玩家与人工智能对手竞争和实现预定目标，而多人游戏则是围绕与其他人类玩家的互动而设计的。这些互动可以是竞争、合作伙伴关系，或者简单的社交互动。多人互动的实现方式可以根据地点和类型的因素而有所不同，从同屏多人游戏的格斗游戏到在线多人角色扮演游戏，用户共享一个共同的环境。在接下来的部分，我们将看一些多人互动可以包含在视频游戏中的各种方式。
- en: Local multiplayer
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本地多人游戏
- en: The idea of multiplayer in games first appeared in the form of local multiplayer.
    Very early on a lot of games had two-player modes. Some games would implement
    a two-player mode known as turn-based multiplayer, where players could take turns
    playing the game. While this but even early on developers saw the benefit of shared
    experiences. Even the earliest games such as *Spacewar!* (1962) and *PONG* (1972)
    pitted players against each other. The rise of the arcade gaming scene helped
    push local multiplayer games, with games such as *Gauntlet* (1985) offering up
    to four player co-operative gaming experience.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏中的多人游戏概念最早出现在本地多人游戏的形式中。很早以前，很多游戏都有两人模式。一些游戏会实现一种称为回合制多人游戏的两人模式，玩家可以轮流玩游戏。尽管如此，开发者早早就看到了共享体验的好处。甚至最早的游戏，比如《Spacewar!》（1962）和《PONG》（1972）也是让玩家互相对抗的。街机游戏的兴起推动了本地多人游戏，比如《Gauntlet》（1985）这样的游戏提供了最多四个玩家的合作游戏体验。
- en: Most local multiplayer games can be placed into one of a few categories, turn-based,
    shared single-screen, or split-screen multiplayer.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数本地多人游戏可以分为几类，回合制、共享单屏或分屏多人游戏。
- en: Turn-based, as its name suggests, is a multiplayer mode where the players take
    turns playing the game using a single screen. A good example of a turn-based multiplayer
    game would be the original *Super Mario Bros*, for **Nintendo Entertainment System**
    (**NES**). In this game, if the two-player mode is selected, the first player
    plays as the Mario character; when the player dies, the second player has their
    turn and plays as the other brother, Luigi.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 回合制，顾名思义，是一种多人游戏模式，玩家轮流使用单个屏幕玩游戏。一个很好的回合制多人游戏的例子是原版的《超级马里奥兄弟》，适用于**任天堂娱乐系统**（**NES**）。在这个游戏中，如果选择了双人模式，第一个玩家扮演马里奥角色；当玩家死亡时，第二个玩家轮到，扮演另一个兄弟路易吉。
- en: Shared single-screen multiplayer is a common local multiplayer mode where each
    player's character is on the same screen. Each player has control of their character/avatar
    simultaneously. This mode is very well-suited to versus gameplay such as sports
    and fighter games, as well as co-operative gameplay such as platformers and puzzle
    solvers. This mode continues to be very popular today, with a great example being
    the recently released Cuphead title.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 共享单屏多人游戏是一种常见的本地多人游戏模式，每个玩家的角色都在同一个屏幕上。每个玩家同时控制他们的角色/化身。这种模式非常适合对战游戏，比如体育和格斗游戏，以及合作游戏，比如平台游戏和解谜游戏。这种模式今天仍然非常受欢迎，一个很好的例子就是最近发布的《杯头》游戏。
- en: Single-screen multiplayer
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单屏多人游戏
- en: Split-screen multiplayer is another popular local multiplayer mode where each
    player has a portion of the entire local screen as their gameplay view. Each player
    controls their character/avatar simultaneously. This mode is very well-suited
    to versus games such as shooter titles. Although most games choosing to implement
    a split-screen mode are two-player games, some titles supported as many as four
    local players, with the local screen being split vertically and horizontally into
    quarters. A great example of a game that implements split-screen multiplayer is
    the first person shooter, *Halo*.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 分屏多人游戏是另一种流行的本地多人游戏模式，其中每个玩家在整个本地屏幕上都有自己的游戏视图。每个玩家同时控制自己的角色/化身。这种模式非常适合对战游戏，如射击游戏。尽管大多数选择实施分屏模式的游戏都是双人游戏，但有些游戏支持多达四名本地玩家，本地屏幕被垂直和水平分成四分之一。一个很好的实施分屏多人游戏的游戏是第一人称射击游戏《光环》。
- en: Local area network
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 局域网
- en: With the proliferation of personal computers in the early 1990s' the idea of
    connecting computers together to share information soon developed into a core
    need for most computer users. One early way of connecting multiple computers together
    was through a LAN. A LAN allows computers in a limited area, such as a university,
    office, school, or even a personal residence. LAN's are not by default connectable
    unless you are in that limited area in which the LAN is located. While the business
    computing world had already adopted the idea of LAN computing, the gaming industry
    really started using the technology for multiplayer with the release of *DOOM*
    in 1993.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 随着个人电脑在20世纪90年代初的大量普及，将计算机连接在一起共享信息的想法很快成为大多数计算机用户的核心需求。连接多台计算机的早期方法之一是通过局域网（LAN）。LAN允许有限区域内的计算机进行连接，例如大学、办公室、学校，甚至个人住所。除非在LAN所在的有限区域内，否则默认情况下无法连接LAN。虽然商业计算世界已经采用了LAN计算的想法，但游戏行业真正开始使用这项技术进行多人游戏是在1993年发布《毁灭战士》时。
- en: The popularity of LAN-based multiplayer games has weaned since the wide adoption
    of the internet. That being said, LAN is still the way multiplayer games are played
    at competitions such as the e-sport leagues of today. The idea of LAN-based multiplayer
    gaming also spawned a phenomenon known as the **LAN party**. LAN parties are getting
    where players of games come together in the same physical location and connect
    all their computers together in order to play with each other. These events usually
    spanned multiple days, with players traveling large distances to take part. LAN
    parties were a staple of the gaming landscape in the early to late 1990's, for
    any gamer that took part, it was a memorable way to connect with other gamers.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 自从互联网被广泛采用以来，基于局域网的多人游戏的流行度已经下降。尽管如此，局域网仍然是当今电子竞技联赛等比赛中进行多人游戏的方式。基于局域网的多人游戏也催生了一种称为**局域网聚会**的现象。局域网聚会是玩家们聚集在同一物理位置，将所有计算机连接在一起以便彼此游玩的活动。这些活动通常持续多天，玩家们会跋涉长途前来参加。局域网聚会是20世纪90年代初至90年代末游戏界的一个重要组成部分，对于参与其中的任何玩家来说，这是一种与其他玩家联系的难忘方式。
- en: Online multiplayer
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在线多人游戏
- en: The popularity of the internet brought with it the ability for gamers around
    the world to connect and play together in a whole new way. Unlike the LAN parties
    of old, gamers could now play and compete with fellow gamers from all over the
    world without leaving the comfort of their own home. The history of online multiplayer
    can be traced all the way back to the early examples such as **MUD** (**Multi-User
    Dungeon**), where users could play the simple RPGs over the internet. Online multiplayer
    games span almost every genre of games today, from first-person shooters to real-time
    strategy games. Internet-based gameplay also spawned a new genre of games called
    **Massively Multiplayer Online** (**MMO**) games. In MMOs' massive amounts of
    players can all connect and interact in a single instance or world. One of the
    most popular MMO games to date is *World of Warcraft*.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网的普及带来了全球玩家以全新方式连接和游玩的能力。与旧时的局域网聚会不同，玩家现在可以在家中舒适的环境中与世界各地的玩家一起游玩和竞争。在线多人游戏的历史可以追溯到早期的例子，如**MUD**（多用户地下城），用户可以通过互联网玩简单的角色扮演游戏。在线多人游戏几乎涵盖了当今游戏的各种类型，从第一人称射击游戏到实时策略游戏。基于互联网的游戏还催生了一种称为**大型多人在线**（MMO）游戏的新类型游戏。在MMO中，大量玩家可以在单个实例或世界中连接和互动。迄今为止最受欢迎的MMO游戏之一是《魔兽世界》。
- en: Network design and protocol development
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络设计和协议开发
- en: Two of the biggest considerations when designing and developing multiplayer
    games is deciding on the network topology and connection protocol to use. Each
    choice has a significant bearing on the implementation and gameplay itself. In
    this next part of the chapter, we will cover the different network topologies
    and protocols in use, and discuss their various effects and considerations.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计和开发多人游戏时，两个最重要的考虑因素是决定要使用的网络拓扑和连接协议。每个选择对实施和游戏本身都有重大影响。在本章的下一部分中，我们将介绍不同的网络拓扑和使用的协议，并讨论它们的各种影响和考虑因素。
- en: Network topology
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络拓扑
- en: Simply put, network topology is the way computers on a network are connected
    to one another. For online gaming, the network topology will determine how the
    computers on the network are organized to allow users to receive updates to the
    game. How the computers are networked will determine many aspects of the overall
    multiplayer design and each type of topology has its own strengths and weakness.
    In this next section, we will cover the two most popular topologies used in game
    development, the client/server, and the peer-to-peer model.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，网络拓扑是网络上的计算机如何连接在一起的方式。对于在线游戏，网络拓扑将决定如何组织网络上的计算机，以允许用户接收游戏的更新。计算机如何组网将决定整体多人游戏设计的许多方面，每种拓扑类型都有其自身的优势和劣势。在接下来的部分中，我们将介绍游戏开发中使用的两种最流行的拓扑结构，即客户端/服务器和点对点模型。
- en: Peer-to-peer
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 点对点
- en: 'In a peer-to-peer network, each individual player is connected to every other
    player in the game instance:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在点对点网络中，每个玩家都与游戏实例中的每个其他玩家连接。
- en: '![](img/d3d659e4-2a88-41f3-89bb-e8c3d6ec723a.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d3d659e4-2a88-41f3-89bb-e8c3d6ec723a.png)'
- en: A peer-to-peer network is usually implemented in a non-authoritative design.
    This means that no single entity that controls game states, so every player must
    handle its own game state, and communicate any local changes to other players
    connected. This means as a consequence of this topology we have a few issues to
    think about. The first is bandwidth; as you have probably imagined, with this
    design there is a large amount of data that needs to be passed between players.
    In fact, the number of connections can be represented as a quadratic function
    where each player will have O(n-1) connections, which means that there will be
    O(2n) connections in total for this network topology. This network design is also
    symmetric, which means that every player will have to have the same available
    bandwidth for both upload and download streams. The other issue we need to consider
    is the concept of authority.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 点对点网络通常采用非权威设计。这意味着没有单一实体控制游戏状态，因此每个玩家必须处理自己的游戏状态，并将任何本地更改通知给其他连接的玩家。这意味着由于这种拓扑结构，我们需要考虑一些问题。首先是带宽；正如你可能想象的那样，使用这种设计需要在玩家之间传递大量数据。事实上，连接的数量可以表示为一个二次函数，其中每个玩家将有O(n-1)个连接，这意味着对于这种网络拓扑结构，总共将有O(2n)个连接。这种网络设计也是对称的，这意味着每个玩家都必须具有相同的可用带宽，用于上传和下载流。我们需要考虑的另一个问题是权威的概念。
- en: As I mentioned here, the most common approach to handling authority in a peer-to-peer
    network is to have all players share updates to every other player on the network.
    As a consequence of handling authority in this manner is that the player sees
    two situations accruing at the same time, the players own input updating the game
    state instantaneously and a simulation of the other player's movements. Since
    the updates from the other players have to traverse the network, the updates are
    not instantaneous. When the local player receives an update, to say move an opponent
    to (x, y, z), the chances of the opponent still being in that location at the
    time of receiving the update are low, that is why the updates from other players
    are simulated. The biggest issue with simulating updates is that as the latency
    increases, the simulation becomes more and more inaccurate. We will discuss techniques
    for handling this issue of update lag and simulation in the next section of this
    chapter.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我在这里提到的，处理点对点网络中的权威的最常见方法是让所有玩家共享对网络上每个其他玩家的更新。由于以这种方式处理权威的结果是玩家同时看到两种情况发生，即玩家自己的输入立即更新游戏状态以及其他玩家移动的模拟。由于其他玩家的更新需要在网络上传播，因此更新不是即时的。当本地玩家收到更新时，比如说将对手移动到（x，y，z）的位置，对手在收到更新时仍然在那个位置的可能性很低，这就是为什么需要对其他玩家的更新进行模拟。模拟更新的最大问题是随着延迟的增加，模拟变得越来越不准确。我们将在本章的下一节讨论处理更新延迟和模拟的技术。
- en: Client/server
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户端/服务器
- en: 'In a client-server topology, one instance is designated the server, and all
    of the other player instances connect to it. Each of the player instances (the
    client) will only ever communicates with the server. The server, in turn, is responsible
    for communicating all updates of the players to the other clients connected on
    the network. The following image demonstrates this network topology:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端-服务器拓扑结构中，一个实例被指定为服务器，所有其他玩家实例都连接到它。每个玩家实例（客户端）只会与服务器通信。服务器反过来负责将玩家的所有更新通知给网络上连接的其他客户端。以下图片展示了这种网络拓扑结构：
- en: '![](img/15371b3c-817a-4dd0-8f36-3efc7ed10f5d.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/15371b3c-817a-4dd0-8f36-3efc7ed10f5d.png)'
- en: While not the only method, a client-server network commonly implements an authoritative
    design. This means, as a player performs an action, such as moving their character
    to another place, that information is sent in the form of an update to the server.
    The server checks whether the update is considered correct, and if it is, the
    server then relays this update information to the other players connected on the
    network. If there is ever a situation where the client and server disagree on
    the update information, the server is considered the correct version. Just like
    the peer-to-peer topology, there are some things to consider when implementing.
    When it comes to bandwidth, in theory, the bandwidth requirement for each player
    will not change depending on the number of players connected. If we looked at
    this in the form of a quadratic formula, given n players the total of connections
    would be O(2n). However, unlike the peer-to-peer topology, client-server topology
    is asymmetric, meaning the server will have only O(n) connections, or one to one
    per client. This means that as the number of players connected increases, the
    bandwidth required to support the connections will increase linearly. That said,
    in practice, as more players join, more objects need to be simulated, which might
    cause slight increases to bandwidth requirements for both client and server.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然不是唯一的方法，但客户端-服务器网络通常实现了一种权威设计。这意味着，当玩家执行动作，比如将他们的角色移动到另一个地方时，这些信息以更新的形式发送到服务器。服务器会检查更新是否正确，如果是，服务器会将此更新信息传递给网络上连接的其他玩家。如果客户端和服务器在更新信息上发生分歧，服务器被认为是正确的版本。与点对点拓扑结构一样，在实施时需要考虑一些事情。在带宽方面，理论上，每个玩家的带宽要求不会随着连接的玩家数量而改变。如果我们将其表示为二次方程，给定n个玩家，连接的总数将是O(2n)。然而，与点对点拓扑结构不同，客户端-服务器拓扑结构是不对称的，这意味着服务器只有O(n)个连接，或者每个客户端一个连接。这意味着随着连接的玩家数量增加，支持连接所需的带宽将线性增加。也就是说，在实践中，随着更多玩家加入，需要模拟更多对象，这可能会导致客户端和服务器的带宽需求略微增加。
- en: An authoritative design is considered more secure against cheating. This is
    because the server fully controls the game states and update. If a suspicious
    update is passed from a player, the server can ignore it and provide the correct
    update information to the other clients instead.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 权威设计被认为比作弊更安全。这是因为服务器完全控制游戏状态和更新。如果从玩家传递了可疑的更新，服务器可以忽略它，并向其他客户端提供正确的更新信息。
- en: Understanding the protocols
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解协议
- en: Before diving into implementing multiplayer, it is important to understand how
    things are handled under the hood so to speak. One of the most important aspects
    is how the data is being exchanged between two computers. This is where protocols
    come in. Although there are many different ways to exchange data on networks,
    in this section, we are going to look at the **Transmission Control Protocol/Internet
    Protocol** (**TCP/IP**) model with a focus on the host-to-host layer protocols.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入实现多人游戏之前，了解事情是如何处理的非常重要。其中最重要的一个方面是数据如何在两台计算机之间交换。这就是协议的作用。尽管在网络上有许多不同的数据交换方式，但在本节中，我们将重点关注主机到主机层协议的**传输控制协议/互联网协议（TCP/IP）**模型。
- en: TCP/IP model
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TCP/IP模型
- en: 'The TCP/IP model is a description of a protocol suite, which is a collection
    of protocols that are designed to work together to transfer data from one computer
    to another. It is named after two of the main protocols (TCP and IP). TCP/IP is
    considered the de-facto standard protocol today and has replaced older protocol
    suites, such as IPX and SPX. The TCP/IP protocol suite can be broken down into
    a 4-layer model shown in the following image:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: TCP/IP模型是一个协议套件的描述，它是一组旨在共同工作以将数据从一台计算机传输到另一台计算机的协议。它以两个主要协议（TCP和IP）命名。TCP/IP被认为是当今的事实标准协议，并已取代了较旧的协议套件，如IPX和SPX。TCP/IP协议套件可以分解为以下图像中显示的4层模型：
- en: '![](img/8101e9f1-4a5d-41d6-b776-6243c8ca3b9d.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8101e9f1-4a5d-41d6-b776-6243c8ca3b9d.png)'
- en: Most modern networking courses teach the 7-layer OSI model. The OSI model is
    an idealized networking model and, as of yet, not a practical implementation.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数现代网络课程教授7层OSI模型。OSI模型是一种理想化的网络模型，目前还没有实际实现。
- en: 'The four layers are broken down into the application layer, the transport layer,
    the networking layer, and the datalink layer. The application is the layer that
    represents the data to the user and handles the encoding and dialog control. A
    commonly known application layer protocol is the **Hyper Text Transfer Protocol
    (HTTP**), which is the protocol that powers the websites we all use daily. The
    transport layer, also known as the host-to-host layer, is the layer that supports
    the lower level communications between various devices and networks, independent
    of the hardware being used. We will dive deeper into this layer next. The networking
    layer is the layer that determines the best path for the data through the network
    and handles addressing. The most common protocol in this layer is **Internet Protocol**
    (**IP**). There are two versions of IP: the IPv4 standard, and the IPv6 standard.
    The fourth and final layer is the datalink or network access layer. The datalink
    layer specifies the hardware devices and media that make up the network. Common
    datalink protocols are Ethernet and Wi-Fi.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这四层分别是应用层、传输层、网络层和数据链路层。应用层代表用户的数据并处理编码和对话控制。一个众所周知的应用层协议是**超文本传输协议（HTTP）**，这是我们日常使用的网站的协议。传输层，也称为主机到主机层，支持各种设备和网络之间的低级通信，独立于所使用的硬件。我们将在下一节深入探讨这一层。网络层确定数据通过网络的最佳路径并处理寻址。这一层中最常见的协议是**互联网协议（IP）**。IP有两个版本：IPv4标准和IPv6标准。第四层也是最后一层是数据链路或网络访问层。数据链路层指定组成网络的硬件设备和媒体。常见的数据链路协议是以太网和Wi-Fi。
- en: 'Now that we have a general understanding of the layers, let''s take a closer
    look at the two most commonly used networking layer protocols in game development:
    TCP and UDP.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对层有了一般的了解，让我们更仔细地看一下游戏开发中最常用的两个网络层协议：TCP和UDP。
- en: UDP – User Datagram Protocol
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UDP – 用户数据报协议
- en: 'To begin with, let''s look at the **User Datagram Protocol** (**UDP**). UDP
    is a very lightweight protocol that can be used to pass data from a specified
    port on one host to another specified port on another host. A grouping of data
    being sent in one instance is referred to as a datagram. The datagram consists
    of an 8-byte header followed by the data to be passed, referred to as the payload.
    A UDP header is depicted in the following table:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看**用户数据报协议（UDP）**。UDP是一个非常轻量级的协议，可用于从一台主机的指定端口传递数据到另一台主机的指定端口。一次发送的数据组称为数据报。数据报由8字节的头部和随后要传递的数据组成，称为有效载荷。UDP头部如下表所示：
- en: '| **Bit#** | 0 | 16 |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| **位#** | 0 | 16 |'
- en: '| 0-31 | Source Port | Destination Port |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 0-31 | 源端口 | 目标端口 |'
- en: '| 32-63 | Length | Checksum |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 32-63 | 长度 | 校验和 |'
- en: UDP header
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: UDP头部
- en: 'To break it down bits by bits:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 逐位分解：
- en: '**Source port**: (16 bits) This identifies the port from which the data being
    passed is originating from.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**源端口**：（16位）这标识传递数据的端口的来源。'
- en: '**Destination port:** (16 bits) This is the target port of the data being passed.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标端口**：（16位）这是传递数据的目标端口。'
- en: '**Length**: (16 bits) This is the total length of the UDP header and the data
    payload combined.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**长度**：（16位）这是UDP头部和数据有效载荷的总长度。'
- en: '**Checksum**: (16 bits, optional) This is a checksum calculated based on the
    UDP header, payload, and certain fields of the IP header. By default, this field
    is set to all zeros.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**校验和**：（16位，可选）这是根据UDP头部、有效载荷和IP头部的某些字段计算的校验和。默认情况下，此字段设置为全零。'
- en: Because UDP is such a simple protocol, it gives up a few features to keep it
    lightweight. One missing feature is a shared state between the two hosts. This
    means that no effort is made to ensure the complete passage of the datagram. There
    is no guarantee that the data will be in the right order when it arrives, if it
    arrives at all. This is very different to the next protocol we will look at, the
    TCP protocol.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 因为UDP是一个如此简单的协议，它放弃了一些功能以保持轻量级。一个缺失的功能是两个主机之间的共享状态。这意味着不会有努力来确保数据报的完整传递。不能保证数据到达时会按正确的顺序，甚至是否会到达。这与我们将要看的下一个协议TCP协议非常不同。
- en: TCP – Transmission Control Protocol
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TCP - 传输控制协议
- en: 'Unlike UDP, where a single datagram is passed, the TCP protocol, as its name
    suggests, creates a constant connection for transmission between two hosts. This
    allows a reliable stream of data to be passed back and forth between the hosts.
    TCP also attempts to ensure all data that is sent is actually received and in
    the proper order. With these added features, comes some added overhead. The header
    of a TCP connection is much larger than that of UDP. A depiction of a TCP header
    in a table format is as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 与UDP不同，TCP协议创建了两个主机之间的传输恒定连接，这允许可靠的数据流在两个主机之间来回传递。TCP还试图确保所有发送的数据实际上都被接收并且按正确的顺序。随着这些附加功能的增加，也带来了一些额外的开销。TCP连接的头部比UDP的要大得多。TCP头部的表格格式如下所示：
- en: '![](img/477d5bac-3328-4025-b9d0-fb7219a94faa.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/477d5bac-3328-4025-b9d0-fb7219a94faa.png)'
- en: TCP header
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: TCP头部
- en: For a TCP connection, a unit of data transmission is referred to as a segment.
    A segment consists of the TCP header and then the data that is being passed in
    that single segment.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 对于TCP连接，数据传输的一个单位称为一个段。一个段由TCP头部和在该单个段中传递的数据组成。
- en: 'Let''s break it down bit by bit as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐位分解如下：
- en: '**Source port**: (16 bits) This identifies the port from which the data being
    passed is originating from.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源端口：（16位）这标识了正在传递的数据的起始端口。
- en: '**Destination port**: (16 bits) This is the target port of the data being passed.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标端口**：（16位）这是正在传递的数据的目标端口。'
- en: '**Sequence number**: (32-bits) This is a unique identifier number. Since TCP
    attempts to have the recipient receive the data in the order it was sent, each
    byte transferred through TCP receives a sequence number. These numbers allow the
    recipient and sender to ensure the order by following the sequence of these numbers.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**序列号**：（32位）这是一个唯一的标识号。由于TCP试图让接收方按照发送顺序接收数据，通过TCP传输的每个字节都会收到一个序列号。这些数字允许接收方和发送方通过遵循这些数字的顺序来确保顺序。'
- en: '**Acknowledgment number**: (32-bits) This is the sequence number of the next
    byte of data that the sender is passing. This, in essence, acts as an acknowledgment
    for all data with sequence numbers lower than this number.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**确认号**：（32位）这是发送方正在传递的下一个数据字节的序列号。实质上，这充当了所有序列号低于此号码的数据的确认。'
- en: '**Data offset**: (4 bits) This specifies the length of the header in 32-bit
    words. It allows the addition of custom header components, if needed.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据偏移**：（4位）这指定了头部以32位字为单位的长度。如果需要，它允许添加自定义头部组件。'
- en: '**Control bits**: (9 bits) This holds metadata about the header.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制位**：（9位）这保存了头部的元数据。'
- en: '**Receive window**: (16 bits) This conveys the amount of remaining buffer space
    the sender has for incoming data. This is important when trying to maintaining
    flow control.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**接收窗口**：（16位）这传达了发送方用于传入数据的剩余缓冲空间的数量。在尝试维护流量控制时，这很重要。'
- en: '**Urgent pointer**: (16 bits) This is the delta value between the first byte
    of data in this segment and the first byte of urgent data. This is optional and
    only relevant if the `URG` flag is set in the metadata of the header.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**紧急指针**：（16位）这是该段中数据的第一个字节和紧急数据的第一个字节之间的增量值。这是可选的，只有在头部的元数据中设置了`URG`标志时才相关。'
- en: Introducing sockets
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍套接字
- en: In the OSI model, there are a few different types of sockets that determine
    the structure of the transport layer. The two most common types are stream sockets
    and datagram sockets. In this section, we will briefly cover them and how they
    differ.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在OSI模型中，有几种不同类型的套接字确定了传输层的结构。最常见的两种类型是流套接字和数据报套接字。在本节中，我们将简要介绍它们以及它们的区别。
- en: Stream sockets
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 流套接字
- en: A stream socket is used for the reliable two-way communication between different
    hosts. You can think of a stream socket as being similar to making a telephone
    call. When one host calls, other's connection is initiated; once the connection
    is made, both parties can communicate back and forth. The connection is constant
    like a stream.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 流套接字用于不同主机之间可靠的双向通信。您可以将流套接字视为类似于打电话。当一个主机呼叫时，另一个主机的连接被初始化；一旦连接建立，双方可以来回通信。连接像流一样是恒定的。
- en: An example of the use of stream sockets can be seen in the Transmission Control
    Protocol, which we discussed earlier in this chapter. Using TCP allows the data
    to be sent in sequences or packets. As mentioned before, TCP maintains state and
    provides a way to ensure that data arrives and that it is in the same order as
    it was sent. This is important for many types of applications including communications
    between web servers, mail servers, and their client applications.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 流套接字的使用示例可以在我们在本章前面讨论过的传输控制协议中看到。使用TCP允许数据以序列或数据包的形式发送。如前所述，TCP维护状态并提供了一种确保数据到达并且顺序与发送时相同的方法。这对于许多类型的应用程序非常重要，包括Web服务器、邮件服务器和它们的客户端应用程序之间的通信。
- en: In a later section, we will look at how you can implement your own stream sockets
    using the Transmission Control Protocol.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在后面的部分，我们将看看如何使用传输控制协议实现自己的流套接字。
- en: Datagram sockets
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据报套接字
- en: As opposed to stream sockets, datagram sockets are less like making a phone
    call and more akin to sending a letter in the mail. A datagram socket connection
    is a one-way only and is an unreliable connection. Unreliable in the sense that
    you can not be sure when or even if datagram socket data will arrive at the receiver.
    There is no way to guarantee the order in which the data arrives.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 与流套接字相反，数据报套接字更像是寄信而不是打电话。数据报套接字连接是单向的，是不可靠的连接。不可靠是指您无法确定数据报套接字数据何时甚至是否会到达接收方。无法保证数据到达的顺序。
- en: User Datagram Protocol, as described in the previous section, uses datagram
    sockets. Although UDP and datagram sockets are more lightweight, they provide
    a great choice when you just need to send data. The overhead of creating stream
    sockets, establishing and then maintaining that socket connection can overkill
    in many cases.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一节所述，用户数据报协议使用数据报套接字。虽然UDP和数据报套接字更轻量级，但在只需要发送数据时，它们提供了一个很好的选择。在许多情况下，创建流套接字、建立然后维护套接字连接的开销可能过大。
- en: Datagram sockets and UDP are commonly used in networked games and streaming
    media. UDP is typically a good choice when a client needs to make a short query
    to a server, and it expects to receive a single response. To provide this send
    and receive service, we would need to use the UDP specific function calls, `sendto()`
    and `recvfrom()`, `instead of read()` and `write()` seen in the socket implementation.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 数据报套接字和UDP通常用于网络游戏和流媒体。当客户端需要向服务器发出短查询并且希望接收单个响应时，UDP通常是一个不错的选择。为了提供这种发送和接收服务，我们需要使用UDP特定的函数调用`sendto()`和`recvfrom()`，而不是在套接字实现中看到的`read()`和`write()`。
- en: Creating a simple TCP server
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个简单的TCP服务器
- en: In this section, we will look at the process of implementing a simple TCP server
    example using the sockets technique discussed in the preceding sections. This
    example can then be expanded to support various gameplay needs and features.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看一下使用前面部分讨论的套接字技术实现一个简单的TCP服务器示例的过程。然后可以扩展此示例以支持各种游戏需求和功能。
- en: Since the process of creating a server is slightly different for each platform,
    I have broken the examples into two different versions.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 由于为每个平台创建服务器的过程略有不同，我已将示例分成了两个不同的版本。
- en: Windows
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows
- en: 'To begin with let’s look at how we can use the WinSock libraries on the Windows
    platform to create a simple socket server that will listen for connections and
    print out a simple debug message when a connection is made. For the full implementation,
    check out the `Chapter10` directory of the code repository:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先看看如何在Windows平台上使用WinSock库创建一个简单的套接字服务器，该服务器将监听连接并在建立连接时打印一个简单的调试消息。有关完整实现，请查看代码存储库的`Chapter10`目录：
- en: '[PRE0]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: First, we have our includes. This gives us access to the libraries that we need
    to create our sockets (this is different for other platforms).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们有我们的包含文件。这使我们能够访问我们需要创建套接字的库（这对其他平台来说是不同的）。
- en: '[PRE1]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Jumping to the main method, we begin with initializing the underlying libraries.
    In this case, we are using the WinSock libraries.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 跳转到主方法，我们开始初始化底层库。在这种情况下，我们使用WinSock库。
- en: '[PRE2]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Next, we set up our addressing information for the socket.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们为套接字设置寻址信息。
- en: '[PRE3]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We then create our socket, passing in the elements we created in the addressing
    stage.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们创建套接字，传入我们在寻址阶段创建的元素。
- en: '[PRE4]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: After we create our socket, it is good to setup our socket to be able to reuse
    the address we defined on a closer or reset.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 创建完套接字后，最好设置套接字以便在关闭或重置时能够重用我们定义的地址。
- en: '[PRE5]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now we can bind our address and finally listen for connections.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以绑定我们的地址，最后监听连接。
- en: '[PRE6]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In our main loop, we check for new connections, on receiving a valid one we
    print a simple debug message to the console.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的主循环中，我们检查新的连接，当接收到一个有效的连接时，我们会在控制台上打印一个简单的调试消息。
- en: '[PRE7]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Finally, we have to clean up after ourselves. We close the socket and call the
    `WSACleanup` function to initialize clean up of the WinSock library.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们必须清理自己。我们关闭套接字并调用`WSACleanup`函数来初始化清理WinSock库。
- en: And, that’s it. We now have a simple server that will listen for an incoming
    connection on the port we specified, `44000` in this example.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。现在我们有一个简单的服务器，它将在我们指定的端口`44000`上监听传入的连接。
- en: macOS
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: macOS
- en: For macOS (and other *nix-based operating systems) the process is very similar
    to the Windows example, however, we need to use different libraries to help support
    us.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 对于macOS（和其他*nix系统），该过程与Windows示例非常相似，但是我们需要使用不同的库来帮助我们支持。
- en: '[PRE8]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: First, we have the include, here we are using the system sockets, which on *nix
    systems is based on the BSD implementation.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们有包含文件，在这里我们使用系统套接字，*nix系统上基于BSD实现。
- en: '[PRE9]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In our main function, we begin by setting the addressing information.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的主函数中，我们首先设置寻址信息。
- en: '[PRE10]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We then create our socket, passing in the elements we created in the addressing
    stage.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们创建套接字，传入我们在寻址阶段创建的元素。
- en: '[PRE11]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: After we create our socket, it is good to set up our socket to be able to reuse
    the address we defined on a closer or reset.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 创建完套接字后，最好设置套接字以便在关闭或重置时能够重用我们定义的地址。
- en: '[PRE12]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now we can bind our address and finally listen for connections.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以绑定我们的地址，最后监听连接。
- en: '[PRE13]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In our main loop, we check for new connections, on receiving a valid one we
    print a simple debug message to the console.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的主循环中，我们检查新的连接，当接收到一个有效的连接时，我们会在控制台上打印一个简单的调试消息。
- en: '[PRE14]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Finally, we have to clean up after ourselves. In this case, we just have to
    close the socket.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们必须清理自己。在这种情况下，我们只需要关闭套接字。
- en: And, that’s it. We now have a simple server that will listen for an incoming
    connection on the port we specified, `44000` in this example.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。现在我们有一个简单的服务器，它将在我们指定的端口`44000`上监听传入的连接。
- en: To test our example, we can either use an existing program such as **putty**
    to connect to our server. Or we could create a simple client, which I will leave
    to you as a takeaway project. While just a simple server, this creates a starting
    point for building up your own implementations.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试我们的示例，我们可以使用现有的程序，比如**putty**来连接到我们的服务器。或者我们可以创建一个简单的客户端，这个项目就留给你来完成。虽然只是一个简单的服务器，但这为构建你自己的实现提供了一个起点。
- en: Summary
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we took big steps to understand how multiplayer is implemented
    at a lower level. You learned about the TCP/IP stack and the different network
    topologies in use for game development. We looked at using UDP and TCP protocols
    in order to pass data to and from a client-server setup. Finally, we looked at
    some of the issues faced by developers when they start to implement multiplayer
    features. In the next chapter, we will look at how we can take our games to a
    new realm—virtual reality.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们迈出了重要的一步，以了解多人游戏是如何在更低的层次上实现的。你学习了关于TCP/IP协议栈和不同的网络拓扑在游戏开发中的使用。我们研究了使用UDP和TCP协议来在客户端-服务器设置中传递数据。最后，我们看了一些开发者在开始实现多人游戏功能时面临的问题。在下一章中，我们将看看如何将我们的游戏带入一个新的领域——虚拟现实。
