- en: Appendix 1
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录1
- en: Compilation Database
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编译数据库
- en: The test examples considered in the book do not require special compilation
    flags and typically can be compiled without any flags. However, this is not the
    scenario if you want to employ the material on a real project, such as running
    a lint check on your code base. In that situation, you will need to furnish special
    compilation flags for each file to be processed. Clang offers various methods
    for supplying these flags. We will explore in detail the JSON Compilation Database,
    which is one of the primary tools for delivering compilation flags to Clang tools
    such as Clang-Tidy and Clangd.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 书中考虑的测试示例不需要特殊的编译标志，通常可以不带任何标志进行编译。然而，如果你想在真实项目中使用这些材料，例如在你的代码库上运行lint检查，情况就不同了。在这种情况下，你需要为每个要处理的文件提供特殊的编译标志。Clang提供了各种方法来提供这些标志。我们将详细探讨JSON编译数据库，这是向Clang工具（如Clang-Tidy和Clangd）提供编译标志的主要工具之一。
- en: 9.1 Compilation database definition
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 9.1 编译数据库定义
- en: 'A **compilation database (CDB)** is a JSON file that specifies how each source
    file in a code base should be compiled. This JSON file is typically named `compile``_commands.json`
    and resides in the root directory of a project. It provides a machine-readable
    record of all compiler invocations in the build process and is often used by various
    tools for more accurate analysis, refactoring, and more. Each entry in this JSON
    file typically contains the following fields:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**编译数据库（CDB）**是一个JSON文件，它指定了代码库中每个源文件应该如何编译。这个JSON文件通常命名为`compile_commands.json`，位于项目的根目录中。它提供了构建过程中所有编译器调用的机器可读记录，并且常被各种工具用于更精确的分析、重构等。这个JSON文件中的每个条目通常包含以下字段：'
- en: '**directory**: The working directory of the compilation.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**directory**：编译的工作目录。'
- en: '**command**: The actual compile command, including compiler options.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**command**：实际的编译命令，包括编译器选项。'
- en: '**arguments**: Another field that can be used to specify compilation arguments.
    It contains the list of arguments.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**arguments**：另一个可以用来指定编译参数的字段。它包含参数列表。'
- en: '**file**: The path to the source file being compiled.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**file**：正在编译的源文件路径。'
- en: '**output**: The path to the output created by this compilation step.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**output**：此编译步骤创建的输出路径。'
- en: 'As we can see from the fields description, there are two ways to specify compilation
    flags: using the **command** or **arguments** field. Let’s look at a specific
    example. Suppose our C++ file `ProjectLib.cpp` is located at the `/home/user/project/src/lib`
    folder and can be compiled with Clang using the following invocation command (the
    command is used as an example, and you can ignore the meaning of its arguments)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 从字段描述中我们可以看出，有三种方式可以指定编译标志：使用**命令**或**参数**字段。让我们看一个具体的例子。假设我们的C++文件`ProjectLib.cpp`位于`/home/user/project/src/lib`文件夹中，可以使用以下调用命令（命令仅作为示例，你可以忽略其参数）
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following CDB can be used to represent the command:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以下CDB可以用来表示命令：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Figure 9.1**: Compilation Database for ProjectLib.cpp'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**图9.1**：ProjectLib.cpp的编译数据库'
- en: 'The `"command"` field was used in the example. We can also create the CDB in
    another form and use the `arguments` field. The result will be as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例中使用了`"command"`字段。我们也可以以另一种形式创建CDB并使用`"arguments"`字段。结果如下：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Figure 9.2**: CDB for ProjectLib.cpp'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**图9.2**：ProjectLib.cpp的CDB'
- en: The **CDB** shown in [Figure 9.2](#x1-182029r2) represents the same compilation
    recipe as in [Figure 9.1](#x1-182012r1), but it uses a list of arguments (the
    ”arguments” field) instead of the invocation command (the ”command” field) used
    in [Figure 9.1](#x1-182012r1). It’s important to note that the list of arguments
    also contains the executable ”clang” as its first argument. CDB processing tools
    can use this argument to make a decision about which compiler should be used for
    the compilation in environments where different compilers are available, such
    as GCC versus Clang.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[图9.2](#x1-182029r2)中显示的**CDB**与[图9.1](#x1-182012r1)中的相同编译配方，但它使用参数列表（"arguments"字段）而不是[图9.1](#x1-182012r1)中使用的调用命令（"command"字段）。重要的是要注意，参数列表也包含可执行文件"clang"作为其第一个参数。CDB处理工具可以使用这个参数在存在不同编译器的环境中（如GCC与Clang）决定使用哪个编译器进行编译。'
- en: The provided CDB example contains only one record for one file. A real project
    might contain thousands of records. LLVM is a good example, and if you look at
    the `build` folder that we used for the LLVM build (see [*Section** 1.3.1*](B19722_01.xhtml#x1-270001)*,
    Configuration with CMake*), you may notice that it contains a `compile``_commands.json`
    file with the CDB for the projects we selected to be built. It’s worth noting
    that LLVM creates the CDB by default, but your project might require some special
    manipulations to create it. Let’s look at how the CDB can be created in detail.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 提供的 CDB 示例只包含一个文件的记录。一个真实的项目可能包含数千条记录。LLVM 是一个很好的例子，如果你查看我们用于 LLVM 构建的 `build`
    文件夹（见 [*第 1.3.1 节*](B19722_01.xhtml#x1-270001)*，使用 CMake 进行配置*），你可能会注意到它包含一个 `compile_commands.json`
    文件，其中包含我们选择构建的项目 CDB。值得注意的是，LLVM 默认创建 CDB，但你的项目可能需要一些特殊的操作来创建它。让我们详细看看如何创建 CDB。
- en: 9.2 CDB creation
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 9.2 CDB 创建
- en: The `shell`compile˙commands.json file can be generated in various ways. For
    example, the build system CMake has built-in support for generating a compilation
    database. Some tools can also generate this file from Makefiles or other build
    systems. There are even tools such as Bear and intercept-build that can generate
    a CDB by intercepting the actual compile commands as they are run.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`shell`compile˙commands.json 文件可以通过多种方式生成。例如，构建系统 CMake 内置了对生成编译数据库的支持。一些工具也可以从
    Makefiles 或其他构建系统生成此文件。甚至有像 Bear 和 intercept-build 这样的工具可以通过拦截实际编译命令的执行来生成 CDB。'
- en: So while the term is commonly associated with Clang and LLVM-based tools, the
    concept itself is more general and could theoretically be used by any tool that
    needs to understand the compilation settings for a set of source files. We will
    start with CDB generation using CMake, one of the most popular build systems.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，虽然这个术语通常与 Clang 和基于 LLVM 的工具相关联，但这个概念本身更为通用，理论上可以被任何需要理解一组源文件编译设置的工具体现。我们将从使用
    CMake 生成 CDB 开始，CMake 是最受欢迎的构建系统之一。
- en: Generating a CDB with CMake
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用 CMake 生成 CDB
- en: 'Generating a CDB with CMake involves a few steps:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 CMake 生成 CDB 涉及几个步骤：
- en: First, open a terminal or command prompt and navigate to your project’s root
    directory.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，打开一个终端或命令提示符，并导航到你的项目根目录。
- en: Then, run CMake with the `-DCMAKE``_EXPORT``_COMPILE``_COMMANDS=ON` option,
    which instructs CMake to create a `compile``_commands.json` file. This file contains
    the compilation commands for all source files in your project.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，使用 `-DCMAKE_EXPORT_COMPILE_COMMANDS=ON` 选项运行 CMake，该选项指示 CMake 创建一个 `compile_commands.json`
    文件。此文件包含项目中所有源文件的编译命令。
- en: After configuring your project with CMake, you can find the `compile``_commands.json`
    file in the same directory where you ran the configuration command.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在使用 CMake 配置你的项目后，你可以在运行配置命令的同一目录中找到 `compile_commands.json` 文件。
- en: 'As we noticed before, LLVM created the CDB by default. It’s achievable because
    `llvm/CMakeLists.txt` contains the following setup:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所注意到的，LLVM 默认创建了 CDB。这是可行的，因为 `llvm/CMakeLists.txt` 包含以下设置：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Figure 9.3**: LLVM-18.x CMake configuration from llvm/CMakeLists.txt'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 9.3**：从 llvm/CMakeLists.txt 的 LLVM-18.x CMake 配置'
- en: i.e., it set up the CDB generation by default.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 即，它默认设置了 CDB 生成。
- en: Ninja to Generate a CDB
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用 Ninja 生成 CDB
- en: 'The Ninja can also be used to generate a CDB. We can use a Ninja subtool called
    `"compdb"` to dump the CDB to stdout. To run the subtool, we use the `-t <subtool>`
    command-line option in Ninja. Thus, we will use the following command to produce
    the CDB with Ninja:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Ninja 也可以用来生成 CDB。我们可以使用一个名为 `"compdb"` 的 Ninja 子工具将 CDB 输出到 stdout。要运行子工具，我们使用
    Ninja 的 `-t <subtool>` 命令行选项。因此，我们将使用以下命令使用 Ninja 生成 CDB：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Figure 9.4**: Creating a CDB with Ninja'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 9.4**：使用 Ninja 创建 CDB'
- en: This command instructs Ninja to generate the CDB information and save it in
    the `compile``_commands.json` file.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令指示 Ninja 生成 CDB 信息并将其保存到 `compile_commands.json` 文件中。
- en: The generated compilation database can be used with the different Clang tools
    that we have described in the book. Let’s look at two of the most valuable examples,
    which include Clang-Tidy and Clangd.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的编译数据库可以与书中描述的不同 Clang 工具一起使用。让我们看看两个最有价值的例子，包括 Clang-Tidy 和 Clangd。
- en: 9.3 Clang tools and a CDB
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 9.3 Clang 工具和 CDB
- en: The concept of a CDB is not specific to Clang but Clang-based tools make extensive
    use of it. For instance, the Clang compiler itself can use a compilation database
    to understand how to compile files in a project. Tools such as Clang-Tidy and
    Clangd (for language support in IDEs) can also use it to ensure they understand
    code as it was built, making their analyses and transformations more accurate.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: CDB 的概念并不仅限于 Clang，基于 Clang 的工具广泛地使用了它。例如，Clang 编译器本身可以使用编译数据库来理解如何在项目中编译文件。像
    Clang-Tidy 和 Clangd（用于 IDE 中的语言支持）这样的工具也可以使用它来确保它们理解代码的构建方式，从而使它们的分析和转换更加准确。
- en: Clang-Tidy Configuration for Large Projects
  id: totrans-40
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 大型项目的 Clang-Tidy 配置
- en: To use clang-tidy with a CDB, you typically don’t need any additional configuration.
    Clang-tidy can automatically detect and utilize the `compile``_commands.json`
    file in your project’s root directory.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 CDB 与 clang-tidy，通常不需要任何额外的配置。Clang-tidy 可以自动检测并利用项目根目录中的 `compile_commands.json`
    文件。
- en: 'On the other hand, Clang Tools provide a special option, **-p**, defined as
    follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，Clang 工具提供了一个特殊的选项，**-p**，定义如下：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can use this option to run Clang-Tidy on a file from the Clang source code.
    For example, if you run it from the llvm-project folder where the source code
    was cloned, it would look like this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用此选项在 Clang 源代码的文件上运行 Clang-Tidy。例如，如果您从包含源代码的 llvm-project 文件夹中运行它，它将看起来像这样：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Figure 9.5**: Running Clang-Tidy on the LLVM code base'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 9.5**：在 LLVM 代码库上运行 Clang-Tidy'
- en: In this case, we are running Clang-Tidy from the folder, where we installed
    it, as described in [*Section** 5.2.1*](B19722_05.xhtml#x1-1020001)*, Building
    and testing Clang-Tidy*. We have also specified the `build` folder as the project
    root folder containing the CDB.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们正在从安装 Clang-Tidy 的文件夹中运行 Clang-Tidy，如 [*第 5.2.1 节*](B19722_05.xhtml#x1-1020001)
    中所述，构建和测试 Clang-Tidy。我们还指定了 `build` 文件夹作为包含 CDB 的项目根文件夹。
- en: Clang-Tidy is one of the tools that actively uses the CDB to be executed on
    large projects. Another tool is Clangd, which we will also explore.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Clang-Tidy 是积极使用 CDB 在大型项目上执行的工具之一。另一个工具是 Clangd，我们也将对其进行探讨。
- en: Clangd Setup for Large Projects
  id: totrans-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 大型项目的 Clangd 设置
- en: 'Clangd offers a special configuration option to specify the path to the CDB.
    This option is defined as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Clangd 提供了一个特殊的配置选项来指定 CDB 的路径。此选项定义如下：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Figure 9.6**: Description for ’–compile-commands-dir’ option from ’clangd
    –help’ output'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 9.6**：从 `clangd –help` 输出中获取的 `–compile-commands-dir` 选项的描述'
- en: 'You can specify this option in Visual Studio Code via the **Settings** panel,
    as shown in the following figure:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过以下图中的 **设置** 面板在 Visual Studio Code 中指定此选项：
- en: '![Figure 9.7: Configure the CDB path for clangd ](img/file12.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.7：为 clangd 配置 CDB 路径](img/file12.png)'
- en: '**Figure 9.7**: Configure the CDB path for clangd'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 9.7**：为 clangd 配置 CDB 路径'
- en: 'Therefore, if you open a file from the Clang source code, you will have access
    to navigation support provided by Clangd as you can see in the following figure:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果您从 Clang 源代码打开一个文件，您将能够访问 Clangd 提供的导航支持，如图所示：
- en: '![Figure 9.8: Hover provided for Parser::Parser method by Clangd at clang/lib/Parse/Parser.cpp
    ](img/file13.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.8：Clangd 在 clang/lib/Parse/Parser.cpp 为 Parser::Parser 方法提供的悬停信息](img/file13.png)'
- en: '**Figure 9.8**: Hover provided for Parser::Parser method by Clangd at clang/lib/Parse/Parser.cpp'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 9.8**：Clangd 在 clang/lib/Parse/Parser.cpp 为 Parser::Parser 方法提供的悬停信息'
- en: Integration of compile commands with Clang tools, such as Clang-Tidy or Clangd,
    provides a powerful tool for exploring and analyzing your source code.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 将编译命令与 Clang 工具（如 Clang-Tidy 或 Clangd）集成，为探索和分析您的源代码提供了一个强大的工具。
- en: 9.4 Further reading
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 9.4 进一步阅读
- en: 'Clang Documentation - JSON Compilation Database Format Specification: [https://clang.llvm.org/docs/JSONCompilationDatabase.html](https://clang.llvm.org/docs/JSONCompilationDatabase.html)'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Clang 文档 - JSON 编译数据库格式规范：[https://clang.llvm.org/docs/JSONCompilationDatabase.html](https://clang.llvm.org/docs/JSONCompilationDatabase.html)
- en: 'Clangd documentation - Compile commands: [https://clangd.llvm.org/design/compile-commands](https://clangd.llvm.org/design/compile-commands)'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Clangd 文档 - 编译命令：[https://clangd.llvm.org/design/compile-commands](https://clangd.llvm.org/design/compile-commands)
