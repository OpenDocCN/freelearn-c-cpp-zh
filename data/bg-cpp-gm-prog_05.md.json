["```cpp\n// Prepare the player \nTexture texturePlayer; \ntexturePlayer.loadFromFile(\"graphics/player.png\"); \nSprite spritePlayer; \nspritePlayer.setTexture(texturePlayer); \nspritePlayer.setPosition(580, 720); \n\n// The player starts on the left \nside playerSide = side::LEFT; \n\n// Prepare the gravestone \nTexture textureRIP; \ntextureRIP.loadFromFile(\"graphics/rip.png\"); \nSprite spriteRIP; \nspriteRIP.setTexture(textureRIP); \nspriteRIP.setPosition(600, 860); \n\n// Prepare the axe \nTexture textureAxe; \ntextureAxe.loadFromFile(\"graphics/axe.png\"); \nSprite spriteAxe; \nspriteAxe.setTexture(textureAxe); \nspriteAxe.setPosition(700, 830); \n\n// Line the axe up with the tree \nconst float AXE_POSITION_LEFT = 700; \nconst float AXE_POSITION_RIGHT = 1075; \n\n// Prepare the flying log \nTexture textureLog; \ntextureLog.loadFromFile(\"graphics/log.png\"); \nSprite spriteLog; \nspriteLog.setTexture(textureLog); \nspriteLog.setPosition(810, 720); \n\n// Some other useful log related variables \nbool logActive = false; \nfloat logSpeedX = 1000; \nfloat logSpeedY = -1500; \n\n```", "```cpp\n// Draw the tree \nwindow.draw(spriteTree); \n\n// Draw the player \nwindow.draw(spritePlayer); \n\n// Draw the axe \nwindow.draw(spriteAxe); \n\n// Draraw the flying log \nwindow.draw(spriteLog); \n\n// Draw the gravestone \nwindow.draw(spriteRIP); \n\n// Draw the bee \nwindow.draw(spriteBee); \n\n```", "```cpp\nfloat logSpeedX = 1000; \nfloat logSpeedY = -1500; \n\n// Control the player input \nbool acceptInput = false; \n\nwhile (window.isOpen()) \n{ \n\n```", "```cpp\n/* \n**************************************** \nHandle the players input \n**************************************** \n*/ \n\nif (Keyboard::isKeyPressed(Keyboard::Escape)) \n{ \n  window.close(); \n} \n\n// Start the game \nif (Keyboard::isKeyPressed(Keyboard::Return)) \n{ \n  paused = false; \n\n  // Reset the time and the score \n  score = 0; \n  timeRemaining = 6; \n\n  // Make all the branches disappear \n  for (int i = 1; i < NUM_BRANCHES; i++) \n  { \n    branchPositions[i] = side::NONE; \n  } \n\n  // Make sure the gravestone is hidden \n  spriteRIP.setPosition(675, 2000); \n\n  // Move the player into position \n  spritePlayer.setPosition(580, 720); \n\n  acceptInput = true;  \n} \n\n/* \n**************************************** \nUpdate the scene \n**************************************** \n*/ \n\n```", "```cpp\n// Start the game \nif (Keyboard::isKeyPressed(Keyboard::Return)) \n{ \n  paused = false; \n\n  // Reset the time and the score \n  score = 0; \n  timeRemaining = 5; \n\n  // Make all the branches disappear \n  for (int i = 1; i < NUM_BRANCHES; i++) \n  { \n    branchPositions[i] = side::NONE; \n  } \n\n  // Make sure the gravestone is hidden \n  spriteRIP.setPosition(675, 2000); \n\n  // Move the player into position \n  spritePlayer.setPosition(675, 660); \n\n  acceptInput = true; \n\n} \n\n// Wrap the player controls to \n// Make sure we are accepting input \nif (acceptInput) \n{ \n  // More code here next... \n} \n\n/* \n**************************************** \nUpdate the scene \n**************************************** \n*/ \n\n```", "```cpp\n// Wrap the player controls to \n// Make sure we are accepting input \nif (acceptInput) \n{ \n  // More code here next... \n\n  // First handle pressing the right cursor key \n  if (Keyboard::isKeyPressed(Keyboard::Right)) \n  { \n    // Make sure the player is on the right \n    playerSide = side::RIGHT; \n\n    score ++; \n\n    // Add to the amount of time remaining \n    timeRemaining += (2 / score) + .15; \n\n    spriteAxe.setPosition(AXE_POSITION_RIGHT, \n      spriteAxe.getPosition().y); \n\n    spritePlayer.setPosition(1200, 720); \n\n    // update the branches \n    updateBranches(score); \n\n    // set the log flying to the left \n    spriteLog.setPosition(810, 720); \n    logSpeedX = -5000; \n    logActive = true; \n\n    acceptInput = false; \n  } \n\n  // Handle the left cursor key \n} \n\n```", "```cpp\n  // Handle the left cursor key \n\n  if (Keyboard::isKeyPressed(Keyboard::Left)) \n  { \n    // Make sure the player is on the left \n    playerSide = side::LEFT; \n\n    score++; \n\n    // Add to the amount of time remaining \n    timeRemaining += (2 / score) + .15; \n\n    spriteAxe.setPosition(AXE_POSITION_LEFT, \n      spriteAxe.getPosition().y); \n\n    spritePlayer.setPosition(580, 720); \n\n    // update the branches \n    updateBranches(score); \n\n    // set the log flying \n    spriteLog.setPosition(810, 720); \n    logSpeedX = 5000; \n    logActive = true; \n\n    acceptInput = false; \n  } \n\n} \n\n```", "```cpp\n/* \n**************************************** \nHandle the players input \n**************************************** \n*/ \n\nEvent event; \n\nwhile (window.pollEvent(event)) \n{ \n  if (event.type == Event::KeyReleased && !paused) \n  { \n    // Listen for key presses again \n    acceptInput = true; \n\n    // hide the axe \n    spriteAxe.setPosition(2000, \n      spriteAxe.getPosition().y); \n  } \n} \n\nif (Keyboard::isKeyPressed(Keyboard::Escape)) \n{ \n  window.close(); \n} \n\n```", "```cpp\n  // update the branch sprites \n  for (int i = 0; i < NUM_BRANCHES; i++) \n  { \n\n    float height = i * 150; \n\n    if (branchPositions[i] == side::LEFT) \n    { \n      // Move the sprite to the left side \n      branches[i].setPosition(610, height); \n\n      // Flip the sprite round the other way \n      branches[i].setRotation(180); \n    } \n    else if (branchPositions[i] == side::RIGHT) \n    { \n      // Move the sprite to the right side \n      branches[i].setPosition(1330, height); \n\n      // Flip the sprite round the other way \n      branches[i].setRotation(0); \n\n    } \n    else \n    { \n      // Hide the branch \n      branches[i].setPosition(3000, height); \n    } \n  } \n\n  // Handle a flying log         \n  if (logActive) \n  { \n\n    spriteLog.setPosition( \n      spriteLog.getPosition().x +  \n      (logSpeedX * dt.asSeconds()), \n\n    spriteLog.getPosition().y +  \n      (logSpeedY * dt.asSeconds())); \n\n    // Has the log reached the right hand edge? \n    if (spriteLog.getPosition().x < -100 || \n      spriteLog.getPosition().x > 2000) \n    { \n      // Set it up ready to be a whole new log next frame \n      logActive = false; \n      spriteLog.setPosition(810, 720); \n    } \n  } \n\n} // End if(!paused) \n\n/* \n**************************************** \nDraw the scene \n**************************************** \n*/ \n\n```", "```cpp\n  // Handle a flying log         \n  if (logActive) \n  { \n\n    spriteLog.setPosition( \n      spriteLog.getPosition().x + (logSpeedX * dt.asSeconds()),\n        spriteLog.getPosition().y + (logSpeedY * dt.asSeconds())); \n\n    // Has the log reached the right hand edge? \n    if (spriteLog.getPosition().x < -100 || \n      spriteLog.getPosition().x > 2000) \n    { \n      // Set it up ready to be a whole new cloud next frame \n      logActive = false; \n      spriteLog.setPosition(800, 600); \n    } \n  } \n\n  // Has the player been squished by a branch? \n  if (branchPositions[5] == playerSide) \n  { \n    // death \n    paused = true; \n    acceptInput = false; \n\n    // Draw the gravestone \n    spriteRIP.setPosition(525, 760); \n\n    // hide the player \n    spritePlayer.setPosition(2000, 660); \n\n    // Change the text of the message \n    messageText.setString(\"SQUISHED!!\"); \n\n    // Center it on the screen \n    FloatRect textRect = messageText.getLocalBounds(); \n\n    messageText.setOrigin(textRect.left + \n      textRect.width / 2.0f, \n      textRect.top + textRect.height / 2.0f); \n\n    messageText.setPosition(1920 / 2.0f, \n      1080 / 2.0f); \n\n  } \n\n} // End if(!paused) \n\n/* \n**************************************** \nDraw the scene \n**************************************** \n*/ \n\n```", "```cpp\n#include \"stdafx.h\" \n#include <sstream> \n#include <SFML/Graphics.hpp> \n#include <SFML/Audio.hpp>\n\nusing namespace sf; \n\n```", "```cpp\n// Control the player input \nbool acceptInput = false; \n\n// Prepare the sound \nSoundBuffer chopBuffer; \nchopBuffer.loadFromFile(\"sound/chop.wav\"); \nSound chop; \nchop.setBuffer(chopBuffer); \n\nSoundBuffer deathBuffer; \ndeathBuffer.loadFromFile(\"sound/death.wav\"); \nSound death; \ndeath.setBuffer(deathBuffer); \n\n// Out of time \nSoundBuffer ootBuffer; \nootBuffer.loadFromFile(\"sound/out_of_time.wav\"); \nSound outOfTime; \noutOfTime.setBuffer(ootBuffer); \n\nwhile (window.isOpen()) \n{ \n\n```", "```cpp\n// Wrap the player controls to \n// Make sure we are accepting input \nif (acceptInput) \n{ \n  // More code here next... \n\n  // First handle pressing the right cursor key \n  if (Keyboard::isKeyPressed(Keyboard::Right)) \n  { \n    // Make sure the player is on the right \n    playerSide = side::RIGHT; \n\n    score++; \n\n    timeRemaining += (2 / score) + .15; \n\n    spriteAxe.setPosition(AXE_POSITION_RIGHT, \n      spriteAxe.getPosition().y); \n\n    spritePlayer.setPosition(1120, 660); \n\n    // update the branches \n    updateBranches(score); \n\n    // set the log flying to the left \n    spriteLog.setPosition(800, 600); \n    logSpeedX = -5000; \n    logActive = true; \n\n    acceptInput = false; \n\n    // Play a chop sound \n    chop.play(); \n  } \n\n```", "```cpp\nif (timeRemaining <= 0.f) { \n  // Pause the game \n  paused = true; \n\n  // Change the message shown to the player \n  messageText.setString(\"Out of time!!\"); \n\n  //Reposition the text based on its new size \n  FloatRect textRect = messageText.getLocalBounds(); \n  messageText.setOrigin(textRect.left + \n    textRect.width / 2.0f, \n    textRect.top + \n    textRect.height / 2.0f); \n\n  messageText.setPosition(1920 / 2.0f, 1080 / 2.0f); \n\n  // Play the out of time sound \n  outOfTime.play(); \n\n} \n\n```", "```cpp\n// has the player been squished by a branch? \nif (branchPositions[5] == playerSide) \n{ \n  // death \n  paused = true; \n  acceptInput = false; \n\n  // Draw the gravestone \n  spriteRIP.setPosition(675, 660); \n\n  // hide the player \n  spritePlayer.setPosition(2000, 660); \n\n  messageText.setString(\"SQUISHED!!\"); \n  FloatRect textRect = messageText.getLocalBounds(); \n\n  messageText.setOrigin(textRect.left + \n    textRect.width / 2.0f, \n    textRect.top + textRect.height / 2.0f); \n\n  messageText.setPosition(1920 / 2.0f, 1080 / 2.0f); \n\n  // Play the death sound \n  death.play();\n} \n\n```"]