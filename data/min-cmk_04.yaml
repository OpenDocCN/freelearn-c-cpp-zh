- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Using FetchContent with External Dependencies
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 FetchContent 与外部依赖
- en: Now that we are up and running with CMake, one of the most useful features to
    be aware of is `FetchContent`. `FetchContent` is a CMake feature that allows you
    to bring external libraries (also called **dependencies**) into your project.
    It only takes a few lines of code and is quick and convenient to use. It does
    rely on the dependency also using CMake, but the good news is that a considerable
    proportion of open source software written in C and C++ uses CMake to build itself.
    Even if the dependency doesn’t use CMake, adding CMake support is often quite
    easy and makes consuming the library a lot simpler.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经启动并运行了 CMake，值得注意的一个非常有用的功能是 `FetchContent`。`FetchContent` 是 CMake 的一项功能，允许你将外部库（也称为
    **依赖**）引入到你的项目中。只需要几行代码，使用起来快速且方便。它确实依赖于依赖库本身也使用 CMake，但好消息是，使用 C 和 C++ 编写的开源软件中有相当一部分使用
    CMake 进行构建。即使该依赖库不使用 CMake，添加 CMake 支持通常也非常简单，并且能使使用该库变得更加轻松。
- en: We’ll see how to use `FetchContent` in the context of our project to introduce
    some new useful functionality to our app. We’ll also cover some subtleties to
    be aware of while using it. By the end of the chapter, you’ll be able to use external
    libraries with confidence.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到如何在我们的项目中使用 `FetchContent`，为我们的应用程序引入一些新的有用功能。我们还会讨论一些使用时需要注意的细节。到本章结束时，你将能够自信地使用外部库。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将覆盖以下主要内容：
- en: Why FetchContent
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么选择 FetchContent
- en: Using FetchContent
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 FetchContent
- en: Describing our dependency
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述我们的依赖关系
- en: Setting options on dependencies
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为依赖设置选项
- en: Updating our application
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新我们的应用程序
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow along, please ensure you have met the requirements outlined in [*Chapter
    1*](B21152_01.xhtml#_idTextAnchor019), *Getting Started*. These include the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟上进度，请确保你已满足[*第 1 章*](B21152_01.xhtml#_idTextAnchor019)《入门》中的要求。这些要求包括：
- en: A Windows, Mac, or Linux machine with an up-to-date **operating** **system**
    (**OS**)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一台运行最新 **操作系统** (**OS**) 的 Windows、Mac 或 Linux 机器
- en: A working C/C++ compiler (a system default is recommended for each platform
    if you don’t already have this)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个可用的 C/C++ 编译器（如果你还没有，建议使用每个平台的系统默认编译器）
- en: 'The code examples in this chapter can be found by following this link: [https://github.com/PacktPublishing/Minimal-CMake](https://github.com/PacktPublishing/Minimal-CMake).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的代码示例可以通过以下链接找到：[https://github.com/PacktPublishing/Minimal-CMake](https://github.com/PacktPublishing/Minimal-CMake)。
- en: Why FetchContent
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择 FetchContent
- en: '`FetchContent` is a relatively new addition to CMake, only appearing in CMake
    3.11 in March 2018\. `FetchContent` allows you to provide a path to a source library
    (this is usually a repository URL of some kind, though a URL to a ZIP file or
    local directory path is also supported) and have CMake download (or **fetch**)
    the code for you. In the most basic case, this path is all that you need to provide
    (we’ll cover some of the additional arguments shortly).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`FetchContent` 是 CMake 中相对较新的功能，首次出现在 2018 年 3 月的 CMake 3.11 版本中。`FetchContent`
    允许你提供一个源库的路径（通常是某种类型的代码库 URL，尽管 ZIP 文件或本地目录路径的 URL 也被支持），并让 CMake 为你下载（或**获取**）代码。在最基本的情况下，只需要提供这个路径（我们稍后会介绍一些额外的参数）。'
- en: When to use FetchContent
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 何时使用 FetchContent
- en: An incredibly valuable property of `FetchContent` is that it allows you to keep
    the source of any third-party dependency out of your codebase. When working with
    a third-party library without using `FetchContent`, there are a few different
    options, all with various trade-offs. One solution is to copy/paste the third-party
    library into your source directory (ideally in a well-designated folder). If that
    project is using CMake, it’s possible to use a feature called `add_subdirectory`
    to add that library relatively cleanly. The alternative is adding the separate
    library files into your own `CMakeLists.txt` files, which can get unwieldy quickly.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`FetchContent` 的一个非常有价值的特点是，它允许你将任何第三方依赖的源代码从代码库中剥离。当你在没有使用 `FetchContent`
    的情况下与第三方库一起工作时，有几种不同的选择，每种都有不同的权衡。一种解决方案是将第三方库复制/粘贴到你的源代码目录中（理想情况下是在一个专门的文件夹中）。如果该项目使用
    CMake，你可以使用一个叫做 `add_subdirectory` 的功能相对干净地添加该库。另一种方式是将独立的库文件直接添加到你自己的 `CMakeLists.txt`
    文件中，这样做可能会迅速变得不太方便。'
- en: Having the source readily available has some advantages, but great care must
    be taken not to make any modifications. If this happens, it will make future upgrades
    incredibly painful. You must also be careful when it comes to licensing and attribution
    (ensuring a `LICENSE` file exists in that library’s root folder is particularly
    important).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有源代码的直接访问权限有一些优势，但必须小心避免对其进行任何修改。如果发生修改，将使未来的升级变得异常痛苦。在涉及许可和归属时也需要小心（确保该库的根目录下存在`LICENSE`文件尤为重要）。
- en: Another potential approach is to rely on Git submodules. They have the advantage
    of keeping the source files of third-party dependencies out of your project (at
    least as tracked files) but using Git submodules can be fiddly, and makes cloning
    and updating your own project more complex.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种可能的做法是依赖 Git 子模块。它们的优势在于可以将第三方依赖的源代码文件从你的项目中排除（至少是作为跟踪文件），但使用 Git 子模块可能会有些繁琐，并且使得克隆和更新你自己的项目变得更加复杂。
- en: '`FetchContent` solves all of these problems, keeping good hygiene between your
    code and dependencies and avoiding introducing any unwanted complexity or maintenance
    headaches.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`FetchContent` 解决了所有这些问题，保持了代码和依赖项之间的良好卫生，避免了引入不必要的复杂性或维护问题。'
- en: One last point to note is that using `FetchContent` will make the dependency
    available at configure time. This means your target can depend on the targets
    provided by the dependency at configure time (as if the dependency was local).
    The dependency will be built at the same time as your code, with the build artifacts
    added to a folder called `_deps` inside your `build` folder.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个需要注意的点是，使用 `FetchContent` 会使依赖项在配置时可用。这意味着你的目标可以在配置时依赖于由依赖项提供的目标（就像该依赖项是本地的一样）。依赖项将在与你的代码同时构建时构建，构建结果将添加到
    `build` 文件夹中的一个名为 `_deps` 的文件夹内。
- en: When not to use FetchContent
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么时候不应该使用 FetchContent
- en: While `FetchContent` is an incredibly useful tool, it is not without its downsides.
    The main trade-off to be aware of when building using `FetchContent` is that you
    are building your dependencies at the same time as your own code. This often adds
    unnecessary work and makes it difficult to rebuild your code without also rebuilding
    the dependencies (ideally, we want to build our dependencies once and then forget
    about them). This isn’t so much of a problem with small dependencies, but as we’ll
    see later, there are better alternatives when using larger dependencies (we’ll
    cover this in [*Chapter 6*](B21152_06.xhtml#_idTextAnchor152), *Installing Dependencies*
    *and ExternalProject_Add*).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 `FetchContent` 是一个非常有用的工具，但它并非没有缺点。使用 `FetchContent` 构建时需要注意的主要权衡是，你在构建自己的代码的同时也在构建依赖项。这通常会增加不必要的工作，并且使得在不重新构建依赖项的情况下重新构建代码变得困难（理想情况下，我们希望只构建一次依赖项，然后忘记它们）。对于小型依赖项来说，这不是大问题，但正如我们稍后将看到的，对于较大的依赖项，使用更好的替代方案会更加合适（我们将在
    [*第 6 章*](B21152_06.xhtml#_idTextAnchor152) 中详细讨论，*安装依赖项和 ExternalProject_Add*）。
- en: One other factor to be aware of when using both `FetchContent` and `ExternalProject_Add`
    is that the dependencies that are referenced might become unavailable in the future
    (a repository may be deleted, or a remote file could be renamed or moved). These
    are risks we need to account for, and taking steps such as forking public repos
    or self-hosting important files might be something to consider.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `FetchContent` 和 `ExternalProject_Add` 时需要注意的另一个因素是，所引用的依赖项将来可能会变得不可用（例如，某个仓库可能会被删除，或者远程文件可能会被重命名或移动）。这些是我们需要考虑的风险，采取一些措施，比如为公共仓库创建分支或自托管重要文件，可能是值得考虑的。
- en: Lastly, if a dependency we wish to use doesn’t currently have CMake support,
    we can’t use it with `FetchContent`. For smaller dependencies, adding CMake support
    might not be too difficult, but for larger dependencies, it can be challenging.
    The ongoing maintenance effort of keeping the CMake support up to date can also
    be a significant overhead (this is where CMake find modules can help, described
    in [*Chapter 7*](B21152_07.xhtml#_idTextAnchor170), *Adding Install Support for*
    *Your Libraries*).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果我们想使用的依赖项目前没有 CMake 支持，我们就无法使用 `FetchContent`。对于较小的依赖项，添加 CMake 支持可能不会太困难，但对于较大的依赖项来说，这可能是一个挑战。保持
    CMake 支持的持续维护也可能成为一个巨大的开销（在这里，CMake 查找模块可以提供帮助，相关内容请参见 [*第 7 章*](B21152_07.xhtml#_idTextAnchor170)，*为你的库添加安装支持*）。
- en: Now that we’re familiar with `FetchContent` and where it fits into the bigger
    CMake picture, we can dive into the concrete commands needed to use it.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了 `FetchContent` 及其在更大 CMake 环境中的位置，接下来我们可以深入探讨使用它所需的具体命令。
- en: Using FetchContent
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 FetchContent
- en: 'Now that we’ve covered what `FetchContent` is and why we’d use it, let’s look
    at how we can integrate a dependency into our project using `FetchContent` commands:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经了解了 `FetchContent` 的作用及其使用原因，接下来我们来看看如何通过 `FetchContent` 命令将依赖项集成到我们的项目中：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The library we’ll be introducing is a cross-platform timer library called `timer_lib`.
    `timer_lib` will allow our `Game of Life` application to run on its own without
    the user needing to hit the *Enter* key to transition to the next stage of the
    board.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要介绍的库是一个跨平台的计时器库，名为 `timer_lib`。`timer_lib` 将允许我们的 `Game of Life` 应用程序独立运行，用户无需按
    *Enter* 键来切换到棋盘的下一阶段。
- en: The preceding snippet is taken from `ch3/part-1/CMakeListst.txt` in the book’s
    GitHub repository and appears directly under the CMake commands we reviewed in
    [*Chapter 2*](B21152_02.xhtml#_idTextAnchor032), *Hello CMake!* (see `ch2/part-3/CMakeLists.txt`).
    We’ll now walk through each command in turn.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码片段来自书籍 GitHub 仓库中的 `ch3/part-1/CMakeListst.txt`，并且紧接着我们在 [*第二章*](B21152_02.xhtml#_idTextAnchor032)
    中回顾的 CMake 命令（见 `ch2/part-3/CMakeLists.txt）`。接下来，我们将逐一讲解每条命令。
- en: Including other CMake code
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引入其他 CMake 代码
- en: 'Let’s begin by seeing how we can use CMake library code:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从了解如何使用 CMake 库代码开始：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `include` command is used to bring in CMake functionality stored in a separate
    file. `FetchContent` is a **module** provided by CMake, which can be found in
    your CMake install folder. This breaks down per platform as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`include` 命令用于引入存储在单独文件中的 CMake 功能。`FetchContent` 是 CMake 提供的**模块**，可以在你的 CMake
    安装文件夹中找到。按照平台的不同，具体如下：'
- en: 'Windows: `C:\Program Files\CMake\share\cmake-3.28\Modules`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Windows: `C:\Program Files\CMake\share\cmake-3.28\Modules`'
- en: 'macOS: `/Applications/CMake.app/Contents/share/cmake-3.28/Modules`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'macOS: `/Applications/CMake.app/Contents/share/cmake-3.28/Modules`'
- en: 'Linux: `/opt/cmake-3.28.1-linux-aarch64/share/cmake-3.28/Modules`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Linux: `/opt/cmake-3.28.1-linux-aarch64/share/cmake-3.28/Modules`'
- en: The preceding paths match the location where we installed CMake in [*Chapter
    1*](B21152_01.xhtml#_idTextAnchor019), *Getting Started*. In the case of Windows
    and macOS, the paths will usually only differ based on the CMake version. With
    Linux, the path may be quite different depending on how CMake was installed (for
    example, if CMake was installed using a package manager such as `apt`, the install
    location will likely be `/usr/share/cmake-<version>/Modules`).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 上述路径与我们在 [*第一章*](B21152_01.xhtml#_idTextAnchor019) *入门* 中安装 CMake 时的路径相匹配。对于
    Windows 和 macOS，路径通常只会根据 CMake 版本有所不同。对于 Linux，路径可能会有所不同，具体取决于 CMake 的安装方式（例如，如果通过
    `apt` 等包管理器安装 CMake，安装位置可能是 `/usr/share/cmake-<version>/Modules`）。
- en: 'CMake knows to search in the `Modules/` folder to look for these default modules
    (maintained by the CMake developers). It’s also possible to use the `include`
    command to bring in our own CMake files. For example, we can write a quick CMake
    function to list all CMake variables. Let’s make a new file called `CMakeHelpers.cmake`
    and add this command as a function:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: CMake 知道在 `Modules/` 文件夹中搜索这些默认模块（由 CMake 开发者维护）。也可以使用 `include` 命令来引入我们自己的
    CMake 文件。例如，我们可以编写一个简单的 CMake 函数来列出所有 CMake 变量。让我们创建一个新文件 `CMakeHelpers.cmake`，并将该命令作为函数添加进去：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Add the following code and then save the file:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 添加以下代码并保存文件：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Don’t worry about understanding the implementation of this function right now.
    This is just an example to show how to extract useful CMake functionality to reuse
    in our `CMakeLists.txt` files.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 不用担心现在理解该函数的实现。这只是一个示例，用来展示如何提取有用的 CMake 功能以便在我们的 `CMakeLists.txt` 文件中重用。
- en: From `ch3/part-1/CMakeLists.txt`, we can now write `include(CMakeHelpers.cmake)`
    anywhere after the `project` command and then call `list_cmake_variables()` at
    the end of our script. To see all CMake variables printed to the terminal, after
    making the suggested changes, run `cmake -B build` from `ch3/part-1` (if you’d
    rather not implement the changes yourself, navigate to `ch3/part-2` for a working
    example of this functionality).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `ch3/part-1/CMakeLists.txt` 中，现在我们可以在 `project` 命令之后的任何位置写入 `include(CMakeHelpers.cmake)`，然后在脚本的末尾调用
    `list_cmake_variables()`。为了查看所有 CMake 变量在终端中的输出，完成建议的更改后，从 `ch3/part-1` 目录运行 `cmake
    -B build`（如果你不想自己实现这些更改，可以转到 `ch3/part-2`，那里有一个功能正常的示例）。
- en: 'The output from the command is quite noisy, and not something to leave on by
    default. The sort order is also a little unconventional, appearing in case-sensitive
    sorted order (uppercase `Z` appears before lowercase `a`), but occasionally enabling
    such debug functionality can help us better understand what CMake is doing behind
    the scenes:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令的输出非常冗长，默认情况下不建议开启。排序顺序也有些不常见，按区分大小写的顺序排序（大写的`Z`会出现在小写的`a`之前），但偶尔启用这种调试功能可以帮助我们更好地理解CMake在后台执行的内容：
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: One difference you may have spotted between our `include` call and the `FetchContent`
    `include` call is that we had to specify the full filename including the extension
    (`include(CMakeHelpers.cmake)` as opposed to `include(CMakeHelpers)`). The reason
    for this is that when we omit the `.cmake` extension, instead of looking for a
    file, CMake looks for a module. A module isn’t any different from our example
    file. The only difference is that it can be found in `CMAKE_MODULE_PATH`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能注意到我们的`include`调用与`FetchContent`的`include`调用之间有一个区别，那就是我们必须指定完整的文件名，包括扩展名（`include(CMakeHelpers.cmake)`而不是`include(CMakeHelpers)`）。这是因为当我们省略`.cmake`扩展名时，CMake并不是在查找文件，而是在查找一个模块。模块与我们的示例文件没有区别，唯一的不同是它可以在`CMAKE_MODULE_PATH`中找到。
- en: 'As a quick test to verify this, we can add the following code before our call
    to `include`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了快速验证这一点，我们可以在调用`include`之前添加以下代码：
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The preceding command adds the directory with our `CMakeLists.txt` file to `CMAKE_MODULE_PATH`.
    Now `include(CMakeHelpers)` works. This isn’t recommended but is to show that
    there’s no special syntax or commands to turn a regular `.cmake` file into a module.
    `CMakeHelpers.cmake` only needs to be discoverable by looking through directories
    in `CMAKE_MODULE_PATH`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令将包含`CMakeLists.txt`文件的目录添加到`CMAKE_MODULE_PATH`中。现在`include(CMakeHelpers)`可以正常工作了。这不是推荐的做法，而是为了演示没有特殊的语法或命令可以将常规的`.cmake`文件转换为模块。`CMakeHelpers.cmake`只需要通过查找`CMAKE_MODULE_PATH`中的目录来被发现。
- en: To learn more about CMake’s `include` command, see [https://cmake.org/cmake/help/latest/command/include.html](https://cmake.org/cmake/help/latest/command/include.html).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于CMake的`include`命令，请参阅[https://cmake.org/cmake/help/latest/command/include.html](https://cmake.org/cmake/help/latest/command/include.html).
- en: Describing our dependency
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 描述我们的依赖
- en: 'With the `FetchContent` functionality now available to us, we can specify the
    library we want to depend on:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用`FetchContent`功能，我们可以指定我们想依赖的库：
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`FetchContent_Declare` allows us to describe how to retrieve our dependency.
    In the command shown here, we’ve used a subset of options for simplicity. These
    are usually sufficient but many more are available. To begin, we will name the
    dependency. It’s important to note that this name can be completely arbitrary
    and does not come from the library itself. Here we could instead have called the
    dependency `CoolTimingLibrary` and used that name in the `FetchContent_MakeAvailable`
    command:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`FetchContent_Declare`允许我们描述如何获取我们的依赖。在这里展示的命令中，我们使用了一小部分选项以简化说明。通常这些选项就足够了，但实际上有更多的选项可供使用。首先，我们需要为依赖命名。需要注意的是，这个名字完全可以是任意的，并不来自库本身。这里我们也可以将依赖命名为`CoolTimingLibrary`，并在`FetchContent_MakeAvailable`命令中使用这个名字：'
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'GIT_TAG 2d7217 # v1.0'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 'GIT_TAG 2d7217 # v1.0'
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: FetchContent_Declare(
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: FetchContent_Declare(
- en: timer_lib
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: timer_lib
- en: GIT_REPOSITORY https://github.com/pr0g/timer_lib.git
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: GIT_REPOSITORY https://github.com/pr0g/timer_lib.git
- en: GIT_TAG 2d7217114f1ab10d9b46a2e7544009867b80b59c)
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: GIT_TAG 2d7217114f1ab10d9b46a2e7544009867b80b59c)
- en: '# 2d72171 will work too'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '# 2d72171也可以正常工作'
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: FetchContent_Declare(
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: FetchContent_Declare(
- en: <dependency-name>
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: <dependency-name>
- en: SOURCE_DIR <path/to/dependency>)
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: SOURCE_DIR <path/to/dependency>)
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: ├── minimal-cmake
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: ├── minimal-cmake
- en: │   └── ch3
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: │   └── ch3
- en: │       └── part-1
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: │       └── part-1
- en: └── timer-lib
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: └── timer-lib
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: FetchContent_Declare(
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: FetchContent_Declare(
- en: timer_lib
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: timer_lib
- en: SOURCE_DIR ../../../../timer-lib)
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: SOURCE_DIR ../../../../timer-lib)
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: FetchContent_MakeAvailable(timer_lib)
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: FetchContent_MakeAvailable(timer_lib)
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: FetchContent_Declare(
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: FetchContent_Declare(
- en: LibraryA
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: LibraryA
- en: '...)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '...)'
- en: FetchContent_Declare(
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: FetchContent_Declare(
- en: LibraryB
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: LibraryB
- en: '...)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '...)'
- en: FetchContent_MakeAvailable(LibraryA LibraryB)
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: FetchContent_MakeAvailable(LibraryA LibraryB)
- en: '[PRE14]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: target_link_libraries(${PROJECT_NAME} PRIVATE timer_lib)
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: target_link_libraries(${PROJECT_NAME} PRIVATE timer_lib)
- en: '[PRE15]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: target_include_directories(
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: target_include_directories(
- en: ${PROJECT_NAME}
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: ${PROJECT_NAME}
- en: PRIVATE third-party/timer-lib/include)
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: PRIVATE third-party/timer-lib/include)
- en: target_link_directories(
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: target_link_directories(
- en: ${PROJECT_NAME} PRIVATE
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: ${PROJECT_NAME} PRIVATE
- en: third-party/timer-lib/lib/macos
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: third-party/timer-lib/lib/macos
- en: third-party/timer-lib/lib/win
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: third-party/timer-lib/lib/win
- en: third-party/timer-lib/lib/linux)
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: third-party/timer-lib/lib/linux)
- en: target_link_libraries(${PROJECT_NAME} PRIVATE timer_lib)
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: target_link_libraries(${PROJECT_NAME} PRIVATE timer_lib)
- en: '[PRE16]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: FetchContent_Declare(
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: FetchContent_Declare(
- en: as-c-math
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: as-c-math
- en: GIT_REPOSITORY https://github.com/pr0g/as-c-math.git
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: GIT_REPOSITORY https://github.com/pr0g/as-c-math.git
- en: GIT_TAG 616fe946956561ef4884fc32c4eec2432fd952c8)
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: GIT_TAG 616fe946956561ef4884fc32c4eec2432fd952c8)
- en: '[PRE17]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'FetchContent_MakeAvailable(timer_lib add_library (we’ll learn more about add_library
    in *Chapter 4*, *Creating Libraries for FetchContent*), which contains the name
    of the target we want to link to in target_link_libraries. In this case, it’s
    the name of the project, using the same technique we discussed in *Chapter 2*,
    *Hello CMake!* (using the ${PROJECT_NAME} CMake variable). Let’s add that dependency
    now to ensure we are linking against it correctly:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: FetchContent_MakeAvailable(timer_lib add_library（我们将在*第4章*，*为 FetchContent 创建库*中进一步了解
    add_library），该内容包含我们希望在 target_link_libraries 中链接的目标名称。在这种情况下，它是项目的名称，使用我们在*第2章*，*Hello
    CMake!*中讨论的相同技术（使用 ${PROJECT_NAME} CMake 变量）。现在让我们添加这个依赖项，以确保我们正确地链接它：
- en: '[PRE18]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: cmake -B build -G "Ninja Multi-Config"
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: cmake -B build -G "Ninja Multi-Config"
- en: cmake --build build
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: cmake --build build
- en: '[PRE19]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[11/11] Linking C executable _deps/as-c-math-build/Debug/as-c-math-test'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '[11/11] 正在链接 C 可执行文件 _deps/as-c-math-build/Debug/as-c-math-test'
- en: '[PRE20]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: option(AS_MATH_ENABLE_TEST "Enable testing" ON)
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: option(AS_MATH_ENABLE_TEST "启用测试" ON)
- en: '[PRE21]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: if(AS_MATH_ENABLE_TEST)
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: if(AS_MATH_ENABLE_TEST)
- en: '...'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: endif()
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: endif()
- en: '[PRE22]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: FetchContent_Declare(
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: FetchContent_Declare(
- en: as-c-math
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: as-c-math
- en: GIT_REPOSITORY https://github.com/pr0g/as-c-math.git
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: GIT_REPOSITORY https://github.com/pr0g/as-c-math.git
- en: GIT_TAG 616fe946956561ef4884fc32c4eec2432fd952c8)
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: GIT_TAG 616fe946956561ef4884fc32c4eec2432fd952c8)
- en: set(AS_MATH_ENABLE_TEST OFF CACHE INTERNAL "")
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: set(AS_MATH_ENABLE_TEST OFF CACHE INTERNAL "")
- en: set(AS_MATH_ENABLE_COVERAGE OFF CACHE INTERNAL "")
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: set(AS_MATH_ENABLE_COVERAGE OFF CACHE INTERNAL "")
- en: FetchContent_MakeAvailable(timer_lib as-c-math)
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: FetchContent_MakeAvailable(timer_lib as-c-math)
- en: '[PRE23]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: set(AS_MATH_ENABLE_TEST ON CACHE BOOL "Enable testing").
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: set(AS_MATH_ENABLE_TEST ON CACHE BOOL "启用测试").
- en: '[PRE24]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: //Enable coverage
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: //启用覆盖率
- en: AS_MATH_ENABLE_COVERAGE:BOOL=OFF
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: AS_MATH_ENABLE_COVERAGE:BOOL=OFF
- en: //Enable testing
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: //启用测试
- en: AS_MATH_ENABLE_TEST:BOOL=ON
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: AS_MATH_ENABLE_TEST:BOOL=ON
- en: '[PRE25]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'set given invalid arguments for CACHE mode: missing type and docstring'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: set 给定无效的参数用于 CACHE 模式：缺少类型和文档字符串
- en: '[PRE26]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: //Enable coverage
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: //启用覆盖率
- en: AS_MATH_ENABLE_COVERAGE:INTERNAL=OFF
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: AS_MATH_ENABLE_COVERAGE:INTERNAL=OFF
- en: //Enable testing
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: //启用测试
- en: AS_MATH_ENABLE_TEST:INTERNAL=OFF
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: AS_MATH_ENABLE_TEST:INTERNAL=OFF
- en: '[PRE27]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
