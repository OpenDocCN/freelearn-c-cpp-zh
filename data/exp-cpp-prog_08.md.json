["```cpp\n#include <iostream>\n#include <string>\nusing namespace std;\nclass Item {\n       private:\n         string name;\n         double quantity;\n         double pricePerUnit;\n       public:\n         Item ( string name, double pricePerUnit, double quantity ) {\n         this-name = name; \n         this->pricePerUnit = pricePerUnit;\n         this->quantity = quantity;\n    }\n    public double getPrice( ) {\n           return quantity * pricePerUnit;\n    }\n    public String getDescription( ) {\n           return name;\n    }\n};\n```", "```cpp\n#ifndef __VISITABLE_H\n#define __VISITABLE_H\n#include <string>\n using namespace std;\nclass Visitor;\n\nclass Visitable {\n public:\n        virtual void accept ( Visitor * ) = 0;\n        virtual double getPrice() = 0;\n        virtual string getDescription() = 0;\n };\n#endif\n```", "```cpp\n#ifndef __ITEM_H\n#define __ITEM_H\n#include <iostream>\n#include <string>\nusing namespace std;\n#include \"Visitable.h\"\n#include \"Visitor.h\"\nclass Item : public Visitable {\n private:\n       string name;\n       double quantity;\n       double unitPrice;\n public:\n       Item ( string name, double quantity, double unitPrice );\n       string getDescription();\n       double getQuantity();\n       double getPrice();\n       void accept ( Visitor *pVisitor );\n };\n\n #endif\n```", "```cpp\nclass Visitable;\n#ifndef __VISITOR_H\n#define __VISITOR_H\nclass Visitor {\n protected:\n double price;\n\n public:\n virtual void visit ( Visitable * ) = 0;\n virtual double getPrice() = 0;\n };\n\n #endif\n```", "```cpp\n#include \"GSTVisitor.h\"\n\nvoid GSTVisitor::visit ( Visitable *pItem ) {\n     price = pItem->getPrice() + (0.18 * pItem->getPrice());\n}\n\ndouble GSTVisitor::getPrice() {\n     return price;\n}\n```", "```cpp\nall: GSTVisitor.o Item.o main.o\n     g++ -o gst.exe GSTVisitor.o Item.o main.o\n\nGSTVisitor.o: GSTVisitor.cpp Visitable.h Visitor.h\n     g++ -c GSTVisitor.cpp\n\nItem.o: Item.cpp\n     g++ -c Item.cpp\n\nmain.o: main.cpp\n     g++ -c main.cpp\n\n```", "```cpp\n#include <iostream>\n#include <string>\nusing namespace std;\n\nclass IEmployee {\n      public:\n          virtual string getDoor() = 0;\n          virtual string getStreet() = 0;\n          virtual string getCity() = 0;\n          virtual string getPinCode() = 0;\n          virtual string getState() = 0;\n          virtual string getCountry() = 0;\n          virtual string getName() = 0;\n          virtual string getTitle() = 0;\n          virtual string getCountryDialCode() = 0;\n          virtual string getContactNumber() = 0;\n};\n```", "```cpp\n#include <iostream>\n#include <string>\n#include <list>\nusing namespace std;\n\nclass IEmployee {\n  private:\n     string firstName, middleName, lastName,\n     string title;\n     string employeeCode;\n     list<IAddress> addresses;\n     list<IContact> contactNumbers;\n  public:\n     virtual string getAddress() = 0;\n     virtual string getContactNumber() = 0;\n};\n\nclass IAddress {\n     private:\n          string doorNo, street, city, pinCode, state, country;\n     public:\n          IAddress ( string doorNo, string street, string city, \n            string pinCode, string state, string country );\n          virtual string getAddress() = 0;\n};\n\nclass IContact {\n      private:\n           string countryCode, mobileNumber;\n      public:\n           IContact ( string countryCode, string mobileNumber );\n           virtual string getMobileNumber() = 0;\n};\n```", "```cpp\n#include <iostream>\nusing namespace std;\n\nclass Mobile {\n     private:\n          Camera camera;\n     public:\n          Mobile ( );\n          bool powerOn();\n          bool powerOff();\n};\n\nclass Camera {\n      public:\n          bool ON();\n          bool OFF();\n};\n\nbool Mobile::powerOn() {\n       if ( camera.ON() ) {\n           cout << \"nPositive Logic - assume some complex Mobile power ON logic happens here.\" << endl;\n           return true;\n       }\n       cout << \"nNegative Logic - assume some complex Mobile power OFF logic happens here.\" << endl;\n            << endl;\n       return false;\n}\n\nbool Mobile::powerOff() {\n      if ( camera.OFF() ) {\n              cout << \"nPositive Logic - assume some complex Mobile power OFF             logic happens here.\" << endl;\n      return true;\n }\n      cout << \"nNegative Logic - assume some complex Mobile power OFF logic happens here.\" << endl;\n      return false;\n}\n\nbool Camera::ON() {\n     cout << \"nAssume Camera class interacts with Camera hardware heren\" << endl;\n     cout << \"nAssume some Camera ON logic happens here\" << endl;\n     return true;\n}\n\nbool Camera::OFF() {\n cout << \"nAssume Camera class interacts with Camera hardware heren\" << endl;\n cout << \"nAssume some Camera OFF logic happens here\" << endl;\n return true;\n}\n```", "```cpp\n#include <iostream>\nusing namespace std;\n\nclass ICamera {\n public:\n virtual bool ON() = 0;\n virtual bool OFF() = 0;\n};\n\nclass Mobile {\n      private:\n ICamera *pCamera;\n      public:\n Mobile ( ICamera *pCamera );\n            void setCamera( ICamera *pCamera ); \n            bool powerOn();\n            bool powerOff();\n};\n\nclass Camera : public ICamera {\npublic:\n            bool ON();\n            bool OFF();\n};\n\n//Constructor Dependency Injection\nMobile::Mobile ( ICamera *pCamera ) {\n this->pCamera = pCamera;\n}\n\n//Method Dependency Injection\nMobile::setCamera( ICamera *pCamera ) {\n this->pCamera = pCamera;\n}\n\nbool Mobile::powerOn() {\n if ( pCamera->ON() ) {\n            cout << \"nPositive Logic - assume some complex Mobile power ON logic happens here.\" << endl;\n            return true;\n      }\ncout << \"nNegative Logic - assume some complex Mobile power OFF logic happens here.\" << endl;\n<< endl;\n      return false;\n}\n\nbool Mobile::powerOff() {\n if ( pCamera->OFF() ) {\n           cout << \"nPositive Logic - assume some complex Mobile power OFF logic happens here.\" << endl;\n           return true;\n}\n      cout << \"nNegative Logic - assume some complex Mobile power OFF logic happens here.\" << endl;\n      return false;\n}\n\nbool Camera::ON() {\n       cout << \"nAssume Camera class interacts with Camera hardware heren\" << endl;\n       cout << \"nAssume some Camera ON logic happens here\" << endl;\n       return true;\n}\n\nbool Camera::OFF() {\n       cout << \"nAssume Camera class interacts with Camera hardware heren\" << endl;\n       cout << \"nAssume some Camera OFF logic happens here\" << endl;\n       return true;\n}\n```", "```cpp\nif ( condition1 ) {\n     // some block of code\n}\nelse if ( condition2 ) {\n     // some block of code\n}\nelse {\n     // OOPS - the control should not reach here ### Code Smell ###\n}\n```", "```cpp\nvoid Employee::validateAndSave( ) {\n        if ( ( street != \"\" ) && ( city != \"\" ) )\n              saveEmployeeDetails();\n}\n```", "```cpp\nprivate:\nvoid Employee::validateAddress( ) {\n     if ( ( street == \"\" ) || ( city == \"\" ) )\n          throw exception(\"Invalid Address\");\n}\n\npublic:\nvoid Employee::save() {\n      validateAddress();\n}\n```", "```cpp\n//Before refactoring\nvoid SomeClass::someMethod( ) {\n      if (  ! conition1 && condition2 )\n         //perform some logic\n      else if ( ! condition3 && condition4 && condition5 )\n         //perform some logic\n      else\n         //do something \n} \n\n//After refactoring\nvoid SomeClass::someMethod() {\n     if ( privateMethod1() )\n          //perform some logic\n     else if ( privateMethod2() )\n          //perform some logic\n     else\n         //do something\n}\n```"]