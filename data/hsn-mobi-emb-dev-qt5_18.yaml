- en: Universal Platform for Mobiles and Embedded Devices
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动和嵌入式设备的通用平台
- en: Deploying applications and targeting all the different platforms can take heaps
    of time and cost thousands of dollars. There's a new target platform for Qt applications
    called Qt for WebAssembly that allows Qt and Qt Quick apps to be run over a network
    from a web browser. You will learn how to set up, cross build, deploy, and run
    Qt applications that work on any device with a modern web browser. You could say
    that Qt for WebAssembly is the universal platform.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 部署应用程序并针对所有不同的平台可能需要大量时间和数千美元的成本。有一个新的 Qt 应用程序目标平台，称为 Qt for WebAssembly，它允许
    Qt 和 Qt Quick 应用程序通过网络从浏览器中运行。你将学习如何设置、交叉构建、部署和运行在任何具有现代浏览器的设备上运行的 Qt 应用程序。可以说，Qt
    for WebAssembly 是一个通用平台。
- en: 'We will detail the following material:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将详细介绍以下材料：
- en: Technical requirements
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 技术要求
- en: Getting started
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 入门
- en: Building with the command line
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用命令行构建
- en: Building with Qt Creator
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Qt Creator 构建
- en: Deploying for mobile and embedded devices
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 针对移动和嵌入式设备进行部署
- en: Tips, tricks and suggestions
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小贴士、技巧和建议
- en: What is this WebAssembly thing?
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 WebAssembly？
- en: WebAssembly is neither strictly Web nor Assembly. At the same time, it is a
    little of both.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: WebAssembly 既不是严格意义上的 Web，也不是 Assembly。同时，它两者都有一点。
- en: At the technical level, it is a new binary instruction format for a stack-based
    virtual machine, according to the WebAssembly web site at [http://webassembly.org](http://webassembly.org).
    It runs in a modern web browser, but people are naturally experimenting with this
    and it can now run standalone and experimentally like any other app, with support
    being written for the Linux kernel.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在技术层面上，根据 WebAssembly 网站 [http://webassembly.org](http://webassembly.org) 的描述，它是一个基于栈的虚拟机的新二进制指令格式。它在现代浏览器中运行，但人们自然地在进行实验，现在它可以像任何其他应用程序一样独立和实验性地运行，同时正在编写支持
    Linux 内核的代码。
- en: Through the use of the Emscripten tool, it can be compiled from C and C++. Emscripten
    is a tool written in Python that uses LLVM to transpile C++ code into WebAssembly
    byte code that can be loaded by a web browser.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 Emscripten 工具，它可以编译 C 和 C++。Emscripten 是一个用 Python 编写的工具，它使用 LLVM 将 C++
    代码转换为可以被浏览器加载的 WebAssembly 字节码。
- en: WebAssembly byte code runs in the same sandbox as JavaScript, so consequentially
    it has the same limitations regarding access to the local file system, as well
    as living in one thread. It also has the same security benefits. Although there
    is work being done to fully support pthreads, it is, at the time of this writing,
    still experimental.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: WebAssembly 字节码在同一个沙盒中运行与 JavaScript，因此它对本地文件系统的访问以及生活在单个线程中的限制与 JavaScript
    相同。它也具有相同的安全优势。尽管正在进行工作以完全支持 pthreads，但在撰写本文时，它仍然是实验性的。
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Easy install binary SDK from the following Git repository:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 从以下 Git 仓库轻松安装二进制 SDK：
- en: Emscripten sdk [https://github.com/emscripten-core/emscripten.git](https://github.com/emscripten-core/emscripten.git)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Emscripten sdk [https://github.com/emscripten-core/emscripten.git](https://github.com/emscripten-core/emscripten.git)
- en: 'Alternatively, manually compile the SDK. You can download the sources from
    these Git URLs:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，手动编译 SDK。您可以从以下 Git 网址下载源代码：
- en: Emscripten [https://github.com/emscripten-core/emscripten.git](https://github.com/emscripten-core/emscripten.git)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Emscripten [https://github.com/emscripten-core/emscripten.git](https://github.com/emscripten-core/emscripten.git)
- en: Binaryen [https://github.com/WebAssembly/binaryen.git](https://github.com/WebAssembly/binaryen.git)
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Binaryen [https://github.com/WebAssembly/binaryen.git](https://github.com/WebAssembly/binaryen.git)
- en: LLVM [https://github.com/llvm/llvm-project.git](https://github.com/llvm/llvm-project.git)
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LLVM [https://github.com/llvm/llvm-project.git](https://github.com/llvm/llvm-project.git)
- en: Getting started
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: According to the Emscripten website at [https://emscripten.org/:](https://emscripten.org/)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 Emscripten 网站 [https://emscripten.org/:](https://emscripten.org/)
- en: '*Emscripten is a toolchain that uses LLVM to transpile code to WebAssembly
    to run in a web browser at near native speeds.*'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*Emscripten 是一个使用 LLVM 将代码转换为 WebAssembly 以在浏览器中以接近原生速度运行的工具链。*'
- en: 'These are the two ways to install Emscripten:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Emscripten 有两种方式：
- en: Clone the repository, install precompiled binaries
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 克隆仓库，安装预编译的二进制文件
- en: Clone the repositories, build them
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 克隆仓库，构建它们
- en: I recommend the first one, as LLVM is very time-consuming to build. It is also
    recommended to use Linux or macOS. If you are on Windows, you can install the
    Linux subsystem and use that, or use MinGW compiler. The Visual Studio compiler
    does not seem to support output targets with the four-letter extensions that Emscripten
    outputs, namely `.wasm` and `.html`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我推荐第一个，因为构建 LLVM 非常耗时。也建议使用 Linux 或 macOS。如果您使用的是 Windows，您可以安装 Linux 子系统并使用它，或者使用
    MinGW 编译器。Visual Studio 编译器似乎不支持 Emscripten 输出的四字母扩展名目标，即 `.wasm` 和 `.html`。
- en: Download Emscripten
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载 Emscripten
- en: 'You need to have Git and Python installed for this—just clone the `emscripten
    sdk`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要安装 Git 和 Python 才能进行此操作——只需克隆 `emscripten sdk`：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In there, are Python scripts to help out, the most important one being `emsdk`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在其中，有一些 Python 脚本可以帮助您，其中最重要的是 `emsdk`。
- en: First run `./emsdk --help` to print out some documentation on how to run it.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 首先运行 `./emsdk --help` 以打印有关如何运行的文档。
- en: 'Then you need to install and then activate the SDK as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然后您需要安装并激活 SDK，如下所示：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can target a specific SDK; you can see what is available by running the
    following command:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以针对特定的 SDK；您可以通过运行以下命令查看可用的选项：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then install a particular version of the SDK by running the following commands:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然后通过运行以下命令安装特定版本的 SDK：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `activate` command sets up the `~/.emscripten` file that contains the environment
    settings needed by Emscripten.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`activate` 命令会设置包含 Emscripten 所需环境设置的 `~/.emscripten` 文件。'
- en: 'To be able build with it, you need to source the `emsdk_env.sh` file as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要能够使用它进行构建，您需要按照以下方式源码 `emsdk_env.sh` 文件：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Qt targets a certain Emscripten version that is known to be good for that version.
    For Qt 5.11, Qt for WebAssembly has its own branch—`wip/webassembly`. It has been
    integrated into 5.12 as a tech preview, and in 5.13 for official support. At the
    time of this writing, it is planned to be included with Qt Creator as a binary
    install.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Qt 针对某个已知对该版本有良好支持的 Emscripten 版本。对于 Qt 5.11，Qt for WebAssembly 有自己的分支——`wip/webassembly`。它已集成到
    5.12 作为技术预览，并在 5.13 中提供官方支持。截至本文撰写时，它计划作为二进制安装包含在 Qt Creator 中。
- en: Building an Emscripten SDK manually
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 手动构建 Emscripten SDK
- en: If you want to build Emscripten manually, such as to compile upstream LLVM which
    has support for transpiling directly to WebAssembly binary instead of writing
    first to JavaScript and then to WebAssembly. This can speed up compile times,
    but, at the time of this writing, is still experimental. This makes use of adding
    an argument to the linker `-s WASM_OBJECT_FILES=1`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想手动构建 Emscripten，例如编译支持直接转换为 WebAssembly 二进制文件而不是首先写入 JavaScript 然后转换为 WebAssembly
    的上游 LLVM。这可以加快编译时间，但截至本文撰写时，这仍然是实验性的。这通过向链接器添加一个参数 `-s WASM_OBJECT_FILES=1` 来实现。
- en: For more information on using `WASM_OBJECT_FILES`, see [https://github.com/emscripten-core/emscripten/issues/6830](https://github.com/emscripten-core/emscripten/issues/6830).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 关于使用 `WASM_OBJECT_FILES` 的更多信息，请参阅 [https://github.com/emscripten-core/emscripten/issues/6830](https://github.com/emscripten-core/emscripten/issues/6830)。
- en: Technical requirements
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You will need to install `node.js` and `cmake` packages from your OS. Clone
    the following resources:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要从您的操作系统安装 `node.js` 和 `cmake` 软件包。克隆以下资源：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Emscripten does not have to be built, as it is written in Python.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Emscripten 不需要构建，因为它是用 Python 编写的。
- en: 'To build `binaryen`, enter the following code:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建 `binaryen`，请输入以下代码：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To build LLVM, enter the following code:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建 LLVM，请输入以下代码：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Run `emscripten` to write the configure file as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `emscripten` 以编写配置文件，如下所示：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This will create a `~/.emscripten` file. Copy this file over to your `emsdks`
    directory as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个 `~/.emscripten` 文件。按照以下方式将此文件复制到您的 `emsdks` 目录：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To set up the environment, write a script as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 设置环境时，请编写以下脚本：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Save it somewhere as `emsdk-env.sh`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 将其保存为 `emsdk-env.sh`。
- en: You will need to make this executable, so run `chmod +x emsdk-env.sh`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要使其可执行，因此运行 `chmod +x emsdk-env.sh`。
- en: Whenever you need to set up the build environment, simply run this script and
    use the same console to build.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 每次您需要设置构建环境时，只需运行此脚本并使用相同的控制台进行构建。
- en: Now that we are ready, let's see how to configure and build Qt.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好了，让我们看看如何配置和构建 Qt。
- en: Configuring and compiling Qt
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置和编译 Qt
- en: You can find information on Qt for WebAssembly at this URL: [https://wiki.qt.io/Qt_for_WebAssembly](https://wiki.qt.io/Qt_for_WebAssembly)
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下 URL 找到有关 Qt for WebAssembly 的信息：[https://wiki.qt.io/Qt_for_WebAssembly](https://wiki.qt.io/Qt_for_WebAssembly)
- en: I guess we need the sources. You can get them through Qt Creator, or you can
    `git clone` the repository. Using Git, you have more control over which version
    and any branch if needed.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我猜我们需要源代码。您可以通过Qt Creator获取它们，或者您可以通过`git clone`克隆仓库。使用Git，您可以对版本和任何需要的分支有更多的控制。
- en: 'For 5.12 and 5.13, you can simply clone the following tag:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 对于5.12和5.13，您可以简单地克隆以下标签：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Alternatively, you can `clone` this tag:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以克隆此标签：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As with any new technology, it is moving fast, so grab the latest version you
    can. For this book, we are using Qt 5.12, but I included mentioning other versions
    as they have many bug fixes and optimizations.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 就像任何新技术一样，它发展迅速，所以请获取最新版本。对于这本书，我们使用Qt 5.12，但我提到了其他版本，因为它们有很多错误修复和优化。
- en: Now we can configure and compile Qt!
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以配置和编译Qt了！
- en: 'For 5.12 and 5.13 it was simplified to the following:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 对于5.12和5.13，它简化为以下内容：
- en: '[PRE13]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If you need threads, 5.13 has support for multithreading WebAssembly, but you
    also need to configure the browser to support it.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要线程，5.13支持多线程WebAssembly，但您还需要配置浏览器以支持它。
- en: Once it configures, all you need to do is run make!
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦配置完成，您只需运行make！
- en: Then, to build your Qt app for running in a web browser, simply use the `qmake` command
    from the build directory and run it on your apps pro file. Not every Qt feature
    is supported—like local filesystem access and threads. `QOpenGLWidget` is also
    not supported, although `QOpenGLWindow` works fine. Let's see how to build using
    then command line.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，为了构建在网页浏览器中运行的Qt应用程序，只需从构建目录使用`qmake`命令并在您的app.pro文件上运行即可。并非所有Qt功能都受支持——例如本地文件系统访问和线程。`QOpenGLWidget`也不受支持，尽管`QOpenGLWindow`运行良好。让我们看看如何使用命令行进行构建。
- en: Building with the command line
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用命令行构建
- en: 'Building a Qt for a WebAssembly application requires you to source the Emscripten
    environment file, so run this in your console command as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 构建用于WebAssembly应用程序的Qt需要您源码Emscripten环境文件，因此请在控制台命令中运行以下内容：
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You will need to add the path to Qt for WebAssembly `qmake` as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要添加Qt WebAssembly的路径到`qmake`，如下所示：
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Of course, you must replace `/path/to` with the actual filesystem path.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您必须将`/path/to`替换为实际的文件系统路径。
- en: 'You are then ready for action! You build it just like any other Qt app, by
    running `qmake` as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以开始操作了！您只需像其他任何Qt应用程序一样运行`qmake`即可，如下所示：
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If you need to debug, rerun `qmake` with `CONFIG+=debug` as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要调试，请按照以下方式重新运行带有`CONFIG+=debug`的`qmake`：
- en: '[PRE17]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This will add various Emscripten specific arguments to the compiler and linker.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为编译器和链接器添加各种Emscripten特定参数。
- en: 'Once it is built, you can run it by using the `emrun` command from Emscripten,
    which will start a simple web server and serve the `<target>.html` file. This
    will, in turn, load up `qtloader.js`, which, in turn, loads up the `<target>.js`
    file, which loads the `<target>.wasm` binary file:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦构建完成，您可以使用Emscripten的`emrun`命令运行它，这将启动一个简单的Web服务器并服务`<target>.html`文件。这将反过来加载`qtloader.js`，然后加载`<target>.js`文件，然后加载`<target>.wasm`二进制文件：
- en: '[PRE18]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You can also give `emrun` the directory, such as:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以给`emrun`指定目录，例如：
- en: '[PRE19]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This gives you time to bring up the browser's web console for debugging. Now,
    let's see how to use Qt creator for building.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这给您时间打开浏览器控制台进行调试。现在，让我们看看如何使用Qt Creator进行构建。
- en: Building with Qt Creator
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Qt Creator构建
- en: It is possible to use Qt Creator to build and run your Qt app once you have
    compiled Qt itself from the command line.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您从命令行编译了Qt本身，您就可以使用Qt Creator构建和运行您的Qt应用程序。
- en: The Build environment
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建环境
- en: In Qt Creator, navigate to Tools | Options... | Kits
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在Qt Creator中，导航到工具 | 选项... | 套件
- en: Then go to the Compilers tab. You need to add `emcc` as a C compiler, and `em++`
    as a C++ compiler, so click on the Add button and select Custom from the drop-down
    list.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 然后转到编译器选项卡。您需要添加`emcc`作为C编译器，并将`em++`作为C++编译器，因此点击添加按钮并从下拉列表中选择自定义。
- en: 'First select C and add the following details:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 首先选择C并添加以下详细信息：
- en: 'Name: `emcc (1.38.16)`'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称：`emcc (1.38.16)`
- en: Compiler path: `/home/user/emsdk/emscripten/1.38.16/emcc`
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译器路径：`/home/user/emsdk/emscripten/1.38.16/emcc`
- en: 'Make path: `/usr/bin/make`'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Make路径：`/usr/bin/make`
- en: 'ABI: `x86 linux unknown elf 64bit`'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ABI：`x86 linux unknown elf 64bit`
- en: 'Qt mkspecs: `wasm-emscripten`'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Qt mkspecs: `wasm-emscripten`'
- en: 'Select C++ and add the following details:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 选择C++并添加以下详细信息：
- en: 'Name: `emc++(1.38.16)`'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称：`emc++(1.38.16)`
- en: Compiler path: `/home/user/emsdk/emscripten/1.38.16/em++`
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译器路径：`/home/user/emsdk/emscripten/1.38.16/em++`
- en: 'Make path: `/usr/bin/make`'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Make路径：`/usr/bin/make`
- en: 'ABI: `x86 linux unknown elf 64bit`'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ABI：`x86 linux unknown elf 64bit`
- en: 'Qt mkspecs: `wasm-emscripten`'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Qt mkspecs: `wasm-emscripten`'
- en: Click Apply.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 点击应用。
- en: Go to the tab labeled Qt Versions and click on the Add button. Navigate to where
    you build Qt for WebAssembly, and, in the `bin` directory, select the qmake. Click
    Apply.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 前往标签页“Qt 版本”并点击添加按钮。导航到您构建 Qt for WebAssembly 的位置，然后在 `bin` 目录中选择 qmake。点击应用。
- en: 'Go to the tab labeled Kits, and click on the Add button. Add the following
    details:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 前往标签页“工具包”，然后点击添加按钮。添加以下详细信息：
- en: Name: `Qt %{Qt:Version} (qt5-wasm)`
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称：`Qt %{Qt:Version} (qt5-wasm)`
- en: 'Compiler: `C: emcc (1.38.16`'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '编译器：`C: emcc (1.38.16)`'
- en: 'Compile: `C++: em++ (1.38.16)`'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '编译：`C++: em++ (1.38.16)`'
- en: 'Qt version: `Qt (qt5-wasm)`'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Qt 版本：`Qt (qt5-wasm)`
- en: The Run environment
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行环境
- en: You need to make your application's project active to build for Qt for WebAssembly.
    From the left-hand side buttons in Qt Creator, select Projects, and select your
    Qt for WebAssembly kit.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要使应用程序的项目处于活动状态，以构建 Qt for WebAssembly。从 Qt Creator 左侧的按钮中选择“项目”，然后选择您的 Qt
    for WebAssembly 工具包。
- en: Running the WebAssembly apps in Qt Creator is currently a bit tricky, as you
    need to specify `emrun` as a custom executable and then the build directory or
    `<target>.html` file as its argument. You can also specify which browser to run.
    You can run Chrome using the `--browser chrome argument`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Qt Creator 中运行 WebAssembly 应用目前有些棘手，因为你需要将 `emrun` 指定为一个自定义的可执行文件，然后将其构建目录或
    `<target>.html` 文件作为其参数。你也可以指定要运行的浏览器。你可以使用 `--browser chrome` 参数运行 Chrome。
- en: To get a list of found browsers, run the command `emrun --list_browsers`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取已找到的浏览器列表，请运行命令 `emrun --list_browsers`。
- en: You can even run the app in an Android device that is connected to a USB using
    the `--android` argument. You need to have **Android Debug Bridge** (**adb**) command
    installed and running.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 您甚至可以使用 `--android` 参数在连接到 USB 的 Android 设备上运行应用。您需要安装并运行 **Android Debug Bridge**
    (`adb`) 命令。
- en: Anyway, now that we know how to run the app, we need to tell the Qt Creator
    project to run it.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，现在我们知道了如何运行应用，我们需要告诉 Qt Creator 项目运行它。
- en: 'Go to Projects | Run. In the Run section, select Add | Custom Executable and
    add the following details:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 前往“项目”|“运行”。在“运行”部分，选择“添加”|“自定义可执行文件”，并添加以下详细信息：
- en: 'Executable: `/home/user/emsdk/emrun <target>.html`'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可执行文件：`/home/user/emsdk/emrun <target>.html`
- en: Working directory: `%{buildDir}`
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作目录：`%{buildDir}`
- en: 'Now we are ready to build and run. Here is how it should look:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好构建和运行。以下是它应该看起来的样子：
- en: '![](img/0993db3c-14f7-43b0-b7d7-988382dca979.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0993db3c-14f7-43b0-b7d7-988382dca979.png)'
- en: 'We can even run OpenGL apps! Here is the `hellogles3` example from Qt running
    in the Firefox browser on Android:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以运行 OpenGL 应用！以下是从 Android Firefox 浏览器中运行的 Qt 的 `hellogles3` 示例：
- en: '![](img/787ad667-750d-4c79-979b-a00035465efb.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/787ad667-750d-4c79-979b-a00035465efb.png)'
- en: 'We can also run declarative apps! Here is Qt Quick''s `qopenglunderqml` example
    app:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以运行声明性应用！以下是从 Qt Quick 的 `qopenglunderqml` 示例应用：
- en: '![](img/11a3c9d8-4ab8-4914-b5b6-c7010ce5e66f.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/11a3c9d8-4ab8-4914-b5b6-c7010ce5e66f.png)'
- en: Deploying for mobile and embedded devices
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为移动和嵌入式设备部署
- en: Really, deploying for mobile and embedded devices is only copying the resulting
    files from Emscripten built onto a CORS-enabled web server.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，为移动和嵌入式设备部署只需将 Emscripten 构建的结果文件复制到支持 CORS 的 Web 服务器上。
- en: Any web browser that supports WebAssembly will be able to run it.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 任何支持 WebAssembly 的网络浏览器都能运行它。
- en: Of course, there are considerations regarding screen size.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，屏幕尺寸也是一个需要考虑的因素。
- en: For testing, you can run your application using the `emrun` command from the
    Emscripten SDK. If you plan on testing from another device other than localhost,
    you will need to use the `--hostname` argument to set the IP address that it uses.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 对于测试，您可以使用 Emscripten SDK 中的 `emrun` 命令运行您的应用程序。如果您计划从除 localhost 之外的其他设备进行测试，您需要使用
    `--hostname` 参数设置它使用的 IP 地址。
- en: There are Python scripts for CORS-enabled web servers for testing as well. The
    Apache web server can also be configured to support CORS.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 还有用于测试 CORS 启用型 Web 服务器的 Python 脚本。Apache Web 服务器也可以配置为支持 CORS。
- en: There are five files that currently need to be deployed—`qtloader.js`, `qtlogo.svg`,
    `<target>.html`, `<target>.js`, and `<target>.wasm`. The `.wasm` file is the big
    WebAssembly binary, statically linked. Following are few suggestions to help you
    along with the process.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 目前需要部署的文件有五个——`qtloader.js`、`qtlogo.svg`、`<target>.html`、`<target>.js` 和 `<target>.wasm`。`.wasm`
    文件是大的 WebAssembly 二进制文件，静态链接。以下是一些建议，以帮助您完成此过程。
- en: Tips, tricks, and suggestions
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 小贴士、技巧和建议
- en: Qt for WebAssembly is treated by Qt as a cross platform build. It is an emerging
    technology and, as such, some features required may need special settings configuration
    to be changed or enabled. There are a few things you need to keep in mind when
    using it as a target.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Qt for WebAssembly被视为Qt的跨平台构建。它是一种新兴技术，因此，可能需要一些特殊设置配置来更改或启用所需的一些功能。在使用它作为目标时，你需要注意以下几点。
- en: Here, I run through some tips regarding Qt for WebAssembly.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我提供了一些关于Qt for WebAssembly的技巧。
- en: Browsers
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浏览器
- en: All major browsers now have support for loading WebAssembly. Firefox seems to
    load fastest, although Chrome has a configuration that can be set to speed it
    up (look at `chrome://flags for #enable-webassembly-baseline`). Mobile browsers
    that come with Android and iOS also work, although these may run into out of memory
    errors, depending on the application being run.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '所有主流浏览器现在都支持加载WebAssembly。Firefox似乎加载速度最快，尽管Chrome有一个可以设置为加速的配置（查看`chrome://flags
    for #enable-webassembly-baseline`）。随Android和iOS一起提供的移动浏览器也适用，尽管这些浏览器可能会遇到内存不足错误，这取决于正在运行的应用程序。'
- en: Qt 5.13 for WebAssembly has added experimental support for threads, which rely
    `onSharedArrayBuffer` support in the browsers. This has been turned off by default,
    due to Spectre vulnerabilities, and need to be enabled in the browsers.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: Qt 5.13 for WebAssembly添加了对线程的实验性支持，这些线程依赖于浏览器中的`onSharedArrayBuffer`支持。由于Spectre漏洞，默认情况下已关闭，需要在浏览器中启用。
- en: In Chrome, navigate to `chrome://flags` and enable `#enable-webassembly-threads`.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在Chrome中，导航到`chrome://flags`并启用`#enable-webassembly-threads`。
- en: In Firefox, navigate to `about://config` and enable `javascript.options.shared.memory`.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在Firefox中，导航到`about://config`并启用`javascript.options.shared.memory`。
- en: Debugging
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试
- en: 'Debugging is done by using the debugging console in the web browser. Extra
    debugging capabilities can be enabled by invoking `qmake` with `CONFIG+=debug`,
    even with a Qt compiled in release mode. Here is what a crash can look like:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 调试是通过在Web浏览器中使用调试控制台来完成的。可以通过调用带有`CONFIG+=debug`的`qmake`来启用额外的调试功能，即使是在发布模式下编译的Qt。以下是崩溃可能看起来像什么：
- en: '![](img/e4f39e1f-2c55-4d87-89f0-8f969d470f2b.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e4f39e1f-2c55-4d87-89f0-8f969d470f2b.png)'
- en: 'You can also remote debug from your phone and see the remote browser''s JavaScript
    console output on your desktop. See the following link:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以从你的手机进行远程调试，并在你的桌面上查看远程浏览器的JavaScript控制台输出。请参阅以下链接：
- en: '[https://developer.mozilla.org/en-US/docs/Tools/Remote_Debugging](https://developer.mozilla.org/en-US/docs/Tools/Remote_Debugging)'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.mozilla.org/en-US/docs/Tools/Remote_Debugging](https://developer.mozilla.org/en-US/docs/Tools/Remote_Debugging)'
- en: Networking
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络
- en: 'Simple download requests can be made with the usual `QNetworkAccessManager`.
    These will go through `XMLNetworkRequest`, and will require a CORS-enabled server
    to download from. Typical `QTCPSocket` and `QUdpSockets` get transpiled into WebSockets.
    Your web server needs to support WebSockets, or you can use the Websockify tool,
    which is available from the following link:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用常规的`QNetworkAccessManager`进行简单的下载请求。这些将通过`XMLNetworkRequest`进行，并需要启用CORS的服务器才能下载。典型的`QTCPSocket`和`QUdpSockets`会被转换成WebSockets。你的Web服务器需要支持WebSockets，或者你可以使用Websockify工具，该工具可以从以下链接获取：
- en: '[https://github.com/novnc/websockify](https://github.com/novnc/websockify)'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/novnc/websockify](https://github.com/novnc/websockify)'
- en: Fonts and filesystem access
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字体和文件系统访问
- en: System fonts cannot be accessed, and must be included and embedded into the
    application. Qt embeds one font.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 系统字体无法访问，必须包含并嵌入到应用程序中。Qt嵌入了一种字体。
- en: Filesystem access is also not currently supported, but will be in the future
    by using a Qt WebAssembly specific API.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 文件系统访问目前也不受支持，但将来将通过使用Qt WebAssembly特定API来实现。
- en: OpenGL
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OpenGL
- en: OpenGL is supported as OpenGL ES2, which gets transpiled into WebGL.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: OpenGL以OpenGL ES2的形式得到支持，并将其转换成WebGL。
- en: There are a few differences between OpenGL ES2 and WebGL that you should be
    aware of if you plan on using OpenGL in your WebAssembly application. WebGL is
    more strict generally.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你计划在WebAssembly应用程序中使用OpenGL，你应该注意OpenGL ES2和WebGL之间的一些差异。WebGL通常更严格。
- en: 'Here are some of the differences for WebGL:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一些关于WebGL的差异：
- en: A buffer may only be bound to one `ARRAY_BUFFER` or `ELEMENT_ARRAY_BUFFER` in
    it's lifetime
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缓冲区在其生命周期内只能绑定到一个`ARRAY_BUFFER`或`ELEMENT_ARRAY_BUFFER`
- en: No client side `Arrays`
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有客户端`Arrays`
- en: No binary shaders, `ShaderBinary`
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有二进制着色器，`ShaderBinary`
- en: Enforces `offset` for `drawElements`; `vertexAttribPointer` and `stride` arguments
    for `vertexAttribPointer` are a multiple of the size of the data type
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对`drawElements`强制执行`offset`；`vertexAttribPointer`和`vertexAttribPointer`的`stride`参数是数据类型大小的倍数
- en: '`drawArrays` and `drawElements` are restricted from requesting data outside
    the bounds of a buffer'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`drawArrays` 和 `drawElements` 被限制在缓冲区边界之外请求数据'
- en: Adds `DEPTH_STENCIL_ATTACHMENT` and `DEPTH_STENCIL`
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加 `DEPTH_STENCIL_ATTACHMENT` 和 `DEPTH_STENCIL`
- en: '`texImage2D` and `texSubImage2D` size based on the `TexImageSource` object'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`texImage2D` 和 `texSubImage2D` 的大小基于 `TexImageSource` 对象'
- en: '`copyTexImage2D`, `copyTexSubImage2D` and `readPixels` cannot touch pixels
    outside of `framebuffer`'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`copyTexImage2D`、`copyTexSubImage2D` 和 `readPixels` 不能触及 `framebuffer` 之外的像素'
- en: Stencil testing and bound `framebuffer` have restricted drawing
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板测试和绑定的 `framebuffer` 限制了绘制
- en: '`vertexAttribPointer` value must not exceed the value 255'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vertexAttribPointer` 的值不得超过 255'
- en: '`zNear` cannot be greater than `zFar`'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zNear` 不能大于 `zFar`'
- en: constant color and constant alpha cannot be used with `blendFunc`
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常量颜色和常量 alpha 不能与 `blendFunc` 一起使用
- en: no support for `GL_FIXED`
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不支持 `GL_FIXED`
- en: '`compressedTexImage2D` and `compressedTexSubImage2D` are not supported'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`compressedTexImage2D` 和 `compressedTexSubImage2D` 不受支持'
- en: GLSL token size limited to 256 characters
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GLSL 令牌大小限制为 256 个字符
- en: GLSL is ASCII characters only
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GLSL 只支持 ASCII 字符
- en: GLSL limited to 1 level of nested structures
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GLSL 限制为 1 级嵌套结构
- en: Uniform and attribute location lengths limited to 256 characters
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通用和属性位置长度限制为 256 个字符
- en: '`INFO_LOG_LENGTH`, `SHADER_SOURCE_LENGTH`, `ACTIVE_UNIFORM_MAX_LENGTH`, and
    `ACTIVE_ATTRIBUTE_MAX_LENGTH` have been removed.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INFO_LOG_LENGTH`、`SHADER_SOURCE_LENGTH`、`ACTIVE_UNIFORM_MAX_LENGTH` 和 `ACTIVE_ATTRIBUTE_MAX_LENGTH`
    已被移除。'
- en: Texture type passed to `texSubImage2D` must match `texImage2D`
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传递给 `texSubImage2D` 的纹理类型必须与 `texImage2D` 匹配
- en: Calls that `read` and `write` to same texture (feedback loop) not allowed
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不允许对同一纹理（反馈循环）进行 `read` 和 `write` 调用
- en: Reading data from missing attachment is not allowed
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从缺失的附件中读取数据是不允许的
- en: Attribute aliasing not allowed
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 属性别名不允许
- en: ​`gl_Position` initial value defined as (0,0,0,0)
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gl_Position` 的初始值定义为 (0,0,0,0)'
- en: 'For more information, see the following web pages:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息，请参阅以下网页：
- en: WebGL 1.0 [https://www.khronos.org/registry/webgl/specs/latest/1.0/#6](https://www.khronos.org/registry/webgl/specs/latest/1.0/#6)
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: WebGL 1.0 [https://www.khronos.org/registry/webgl/specs/latest/1.0/#6](https://www.khronos.org/registry/webgl/specs/latest/1.0/#6)
- en: WebGL 2.0 [https://www.khronos.org/registry/webgl/specs/latest/2.0/#5](https://www.khronos.org/registry/webgl/specs/latest/2.0/#5)
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: WebGL 2.0 [https://www.khronos.org/registry/webgl/specs/latest/2.0/#5](https://www.khronos.org/registry/webgl/specs/latest/2.0/#5)
- en: Supported Qt modules
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 支持的 Qt 模块
- en: 'Qt for WebAssembly supports the following Qt modules:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: Qt for WebAssembly 支持以下 Qt 模块：
- en: '`qtbase`'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qtbase`'
- en: '`qtdeclarative`'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qtdeclarative`'
- en: '`qtquickcontrols2`'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qtquickcontrols2`'
- en: '`qtwebsockets`'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qtwebsockets`'
- en: '`qtmqtt`'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qtmqtt`'
- en: '`qtsvg`'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qtsvg`'
- en: '`qtcharts`'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qtcharts`'
- en: '`qtgraphicaleffects`'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qtgraphicaleffects`'
- en: Other caveats
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他注意事项
- en: Secondary event loops do not work in Qt for Webassembly. This is because the
    Emscripten event loop it needs to tie in to does not return. If you need to pop
    up a dialog, do not call `exec()` but call `show()`, and use signals to get a
    return value.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 二级事件循环在 Qt for Webassembly 中不起作用。这是因为它需要连接的 Emscripten 事件循环不会返回。如果您需要弹出对话框，不要调用
    `exec()`，而是调用 `show()`，并使用信号获取返回值。
- en: Virtual keyboards on mobile platforms like Android and iOS do not automatically
    pop up. You can use Qt Virtual Keyboard directly in your project.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在移动平台如 Android 和 iOS 上的虚拟键盘不会自动弹出。您可以直接在项目中使用 Qt 虚拟键盘。
- en: Summary
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Qt for WebAssembly is a new and upcoming platform for Qt, which runs Qt apps
    in a web browser.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: Qt for WebAssembly 是 Qt 的新兴平台，可以在网络浏览器中运行 Qt 应用程序。
- en: You should now be able to download or build the Emscripten SDK, and use to build
    Qt for WebAssembly. You can now run Qt apps in a web browser, including mobile
    and embedded devices, as long as the browser supports WebAssembly.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在应该能够下载或构建 Emscripten SDK，并用于构建 WebAssembly 的 Qt。您现在可以在网络浏览器中运行 Qt 应用程序，包括移动和嵌入式设备，只要浏览器支持
    WebAssembly。
- en: In the final chapter, we explore building a complete Linux embedded operating
    system.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一章，我们探讨了构建一个完整的 Linux 嵌入式操作系统。
