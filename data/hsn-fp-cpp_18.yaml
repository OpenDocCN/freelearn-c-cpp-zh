- en: Lazy Evaluation Using the Ranges Library
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ranges库进行懒惰评估
- en: We discussed at length in this book how to think in terms of functions, and
    how function chaining and composition helps to create designs that are modular
    and composable. Yet, we hit a problem—with our current approach, a lot of data
    needs to be copied from one collection to another.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们详细讨论了如何以函数的方式思考，以及函数链接和组合如何帮助创建模块化和可组合的设计。然而，我们遇到了一个问题——根据我们当前的方法，需要将大量数据从一个集合复制到另一个集合。
- en: Fortunately, Eric Niebler took it upon himself to work on a library that enables
    a solution available in purely functional programming languages—lazy evaluation.
    The library, called **ranges**, was then officially accepted into the C++ 20 standard.
    In this chapter, we will see how to take advantage of it.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Eric Niebler自己着手开发了一个库，使纯函数式编程语言中的解决方案——懒惰评估成为可能。该库名为**ranges**，随后被正式纳入C++
    20标准。在本章中，我们将看到如何利用它。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Why and when lazy evaluation is useful
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么以及何时懒惰评估是有用的
- en: Introduction to the ranges library
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ranges库的介绍
- en: How to use lazy evaluation using the ranges library
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用ranges库进行懒惰评估
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You will need a compiler that supports C++ 17\. I used GCC 7.4.0.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要一个支持C++ 17的编译器。我使用的是GCC 7.4.0。
- en: The code can be found on GitHub at [https:/​/​github.​com/​PacktPublishing/​Hands-​On-​Functional-Programming-​with-​Cpp](https://github.%E2%80%8Bcom/PacktPublishing/Hands-On-Functional-Programming-with-Cpp)
    in the `Chapter14` folder. It includes and uses `doctest`, which is a single header
    open source unit testing library. You can find it on its GitHub repository at [https:/​/github.​com/​onqtam/​doctest](https://github.%E2%80%8Bcom/onqtam/doctest).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码可以在GitHub上找到，网址为[https:/​/​github.​com/​PacktPublishing/​Hands-​On-​Functional-Programming-​with-​Cpp](https://github.%E2%80%8Bcom/PacktPublishing/Hands-On-Functional-Programming-with-Cpp)，在`Chapter14`文件夹中。它包括并使用了`doctest`，这是一个单头文件的开源单元测试库。你可以在它的GitHub仓库上找到它，网址为[https:/​/github.​com/​onqtam/​doctest](https://github.%E2%80%8Bcom/onqtam/doctest)。
- en: An overview of the ranges library
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ranges库概述
- en: The ranges library offers a variety of helpful new tools for the C++ programmer.
    All of them are useful, but many are particularly so for our functional programming
    needs.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: ranges库为C++程序员提供了各种有用的新工具。它们都很有用，但对于我们的函数式编程需求来说，许多工具尤其如此。
- en: 'But first, let''s see how to set it up. To use the ranges library with C++
    17, you need to use the instructions from [https://ericniebler.github.io/range-v3/](https://ericniebler.github.io/range-v3/).
    Then, you just need to include the `all.hpp` header file:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 但首先，让我们看看如何设置它。要在C++ 17中使用ranges库，你需要使用来自[https://ericniebler.github.io/range-v3/](https://ericniebler.github.io/range-v3/)的指示。然后，你只需要包含`all.hpp`头文件：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As for C++ 20, you just need to include the `<ranges>` header since the library
    was included in the standard:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 至于C++ 20，你只需要包含`<ranges>`头文件，因为该库已包含在标准中：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: However, if you get a compilation error when trying out the previous line of
    code, don't be surprised. At the time of writing, the latest version of g++ is
    9.1, but the ranges library hasn't yet been included in the standard. Due to its
    size, the implementations are expected to be quite late. Until then, if you want
    to try it out, you can still use Eric Niebler's version.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你在尝试上一行代码时遇到编译错误，不要感到惊讶。在撰写本文时，最新版本的g++是9.1，但ranges库尚未包含在标准中。由于其规模，实现预计会相当晚。在那之前，如果你想尝试它，你仍然可以使用Eric
    Niebler的版本。
- en: So, what does the ranges library offer? Well, it all starts from the concept
    of range. A range is formed by a begin and an end iterator. This allows us, for
    starters, to add a range on top of an existing collection. Then, we can pass a
    range to an algorithm that requires a begin and end iterator (such as `transform`,
    `sort`, or `accumulate`), hence removing the inconvenient calls to `begin()` and
    `end()`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，ranges库提供了什么？嗯，一切都始于范围的概念。一个范围由一个起始迭代器和一个结束迭代器组成。这使我们首先可以在现有集合的基础上添加一个范围。然后，我们可以将一个范围传递给需要起始和结束迭代器的算法（如`transform`、`sort`或`accumulate`），从而消除了对`begin()`和`end()`的不便调用。
- en: 'With ranges, we can build views. Views specify that we are interested in a
    partial or full collection through the two iterators, but also to allow lazy evaluation
    and composability. Since views are just lightweight wrappers on top of a collection,
    we can declare a chain of operations without actually executing them until the
    result is needed. We will see in detail how this works in the next section, but
    here''s a simple example composing two operations that will filter all numbers
    from a collection that are multiples of six by filtering first *all of the even
    numbers*, followed by filtering the numbers that are *multiples of 3*:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用ranges，我们可以构建视图。视图指定我们对部分或全部集合感兴趣，通过两个迭代器，但也允许懒惰评估和可组合性。由于视图只是集合的轻量级包装器，我们可以声明一系列操作，而不实际执行它们，直到需要结果。我们将在下一节详细介绍这是如何工作的，但这里有一个简单的示例，组合两个操作，将过滤出集合中所有的倍数为六的数字，首先通过过滤*所有的偶数*，然后再过滤出*是3的倍数*的数字：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Mutations are also possible on ranges, with the help of actions. Actions are
    similar to views, except that they mutate the underlying container in-place rather
    than creating a copy. As we''ve discussed many times previously, we prefer not
    to mutate data in functional programming; however, there are cases when we can
    optimize performance with this solution, so it''s worth mentioning. Here''s an
    example of an action in...well, in action:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在ranges上也可以进行突变，借助于操作。操作类似于视图，只是它们会就地改变底层容器，而不是创建副本。正如我们之前多次讨论过的那样，在函数式编程中，我们更喜欢不改变数据；然而，在某些情况下，我们可以通过这种解决方案优化性能，因此值得一提。下面是一个操作的示例...嗯，在操作中：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `|` operator is very interesting for functional programmers, since it's
    a kind of functional composition operator. It's also natural to use for Unix/Linux
    users, who are very used to composing operations. As we've seen in [Chapter 4](d361a3f0-acc7-4e77-9387-2b563fac2f09.xhtml),
    *The Idea of Functional Composition*, such an operator would be very useful. Unfortunately,
    it doesn't yet support the composition of any two functions—just views and actions.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`|`运算符对于函数式编程者来说非常有趣，因为它是一种函数组合运算符。对于Unix/Linux用户来说，使用它也很自然，他们非常习惯组合操作。正如我们在[第4章](d361a3f0-acc7-4e77-9387-2b563fac2f09.xhtml)中所看到的，*函数组合的概念*，这样的运算符将非常有用。不幸的是，它还不支持任意两个函数的组合，只支持视图和操作的组合。'
- en: Finally, the ranges library supports custom views. This opens up possibilities
    such as data generation, which is useful for many things, but [Chapter 11](56c096aa-67a7-48ad-bf22-a78367941a26.xhtml),
    *Property-Based Testing,* in particular.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，ranges库支持自定义视图。这打开了诸如数据生成之类的可能性，这对许多事情都很有用，特别是[第11章](56c096aa-67a7-48ad-bf22-a78367941a26.xhtml)中的*基于属性的测试*。
- en: Let's visit the features of the range library in more detail and with examples.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地访问范围库的特性，并举例说明。
- en: Lazy evaluation
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 惰性求值
- en: 'We have seen, in past chapters, how to structure code in a functional way,
    by taking advantage of small transformations on data structures. Let''s take a
    simple example—compute the sum of all even numbers from a list. The structured
    programming approach would be to write a loop that goes over the whole structure
    and adds all elements that are even:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的章节中，我们已经看到了如何以函数式的方式构造代码，通过对数据结构进行小的转换来利用。让我们举一个简单的例子——计算列表中所有偶数的和。结构化编程方法是编写一个循环，遍历整个结构，并添加所有偶数元素：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The test for this function runs correctly on a simple example:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数的测试在一个简单的例子上运行正确：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Of course, this method mutates data and we have seen that it''s not always
    a good idea. It also does too many things at once. We''d rather compose more functions.
    The first function needed decides whether a number is even:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这种方法会改变数据，我们已经知道这不总是一个好主意。它也一次做了太多的事情。我们宁愿组合更多的函数。第一个函数需要决定一个数字是否是偶数：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The second picks the numbers from a collection that satisfy a predicate:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个函数从集合中挑选满足谓词的数字：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The third computes the sum of all elements from a collection:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个计算集合中所有元素的和：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This leads us to the final implementation, which composes all of these functions:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这将我们带到了最终的实现，它包括所有这些函数：
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'And then it passes the test, like the structured solution:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 然后它通过了测试，就像结构化的解决方案一样：
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The functional solution has distinct advantages—it's simple, composed of small
    functions that can be recombined, and it's immutable, which also means it can
    run in parallel. However, it does have a disadvantage—it copies data.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 函数式解决方案有明显的优势——它简单，由可以重新组合的小函数组成，而且它是不可变的，这也意味着它可以并行运行。然而，它也有一个缺点——它会复制数据。
- en: We've seen in [Chapter 10,](4612efcd-7520-4ae3-9813-0c42acee664a.xhtml) *Performance
    Optimization*, how to deal with this issue, but the truth is that the simplest
    solution is lazy evaluation. Imagine what it would mean if we could chain the
    function calls, but the code wouldn't actually execute until the moment we need
    its result. This solution opens the possibility of writing the code we need to
    write, and how we need it, with the compiler optimizing, to the maximum, the chain
    of functions.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在[第10章](4612efcd-7520-4ae3-9813-0c42acee664a.xhtml)中看到了如何处理这个问题，但事实上，最简单的解决方案是惰性求值。想象一下，如果我们可以链接函数调用，但是在我们需要其结果的时刻之前，代码实际上并没有执行，那将意味着什么。这个解决方案打开了编写我们需要编写的代码以及我们需要的方式的可能性，编译器最大限度地优化了函数链。
- en: That's what the ranges library is doing and other things on top.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是ranges库正在做的事情，以及其他一些额外的功能。
- en: Lazy evaluation using the ranges library
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ranges库进行惰性求值
- en: 'The ranges library offers a facility called **views**. Views allow the construction
    of immutable and cheap data ranges from iterators. They don''t copy the data—they
    just refer to it. We can use `view` to filter all of the even numbers from our
    collection:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: ranges库提供了一个名为**views**的工具。视图允许从迭代器构造不可变且廉价的数据范围。它们不会复制数据，只是引用数据。我们可以使用`view`来过滤我们的集合中的所有偶数：
- en: '[PRE11]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Views can be composed without any copying and by using the composition operator, `|`.
    For example, we can obtain the list of numbers divisible by `6` by composing two
    filters: the first one on even numbers, and the second on numbers divisible by
    `3`. Given a new predicate that checks whether a number is multiple of `3`, we
    use the following:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 视图可以在不复制任何内容的情况下进行组合，并使用组合运算符`|`。例如，我们可以通过组合两个过滤器来获得能被`6`整除的数字列表：第一个是偶数，第二个是能被`3`整除的数字。给定一个新的谓词，检查一个数字是否是`3`的倍数，我们使用以下方法：
- en: '[PRE12]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We obtain the list of numbers divisible by `6` through the following composition:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过以下组合获得能被`6`整除的数字列表：
- en: '[PRE13]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'It''s important to notice that nothing was actually computed when writing this
    code. The views were initialized and are waiting for a command. So, let''s compute
    the sum of the elements from the views:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，当编写这段代码时实际上没有计算任何东西。视图已经初始化，并且正在等待命令。所以，让我们计算视图中元素的和：
- en: '[PRE14]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `ranges::accumulate` function is a special implementation of accumulate
    that knows how to work with the views. Only when calling `accumulate` is the view
    acting; moreover, no data is actually copied—instead, the ranges use smart iterators
    to compute the result.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`ranges::accumulate`函数是accumulate的一个特殊实现，它知道如何与视图一起工作。只有在调用`accumulate`时，视图才会起作用；此外，实际上没有数据被复制——相反，ranges使用智能迭代器来计算结果。'
- en: 'Let''s also see the result of composing the views. As expected, the sum of
    all numbers from the vector that are divisible by `6` is `18`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也看看组合视图的结果。如预期的那样，向量中所有能被`6`整除的数字的和是`18`：
- en: '[PRE15]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: What a nice way of writing code! It is much easier than both previous options,
    while having a low memory footprint.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 写代码的方式真好！它比以前的两种选项都要容易得多，同时内存占用也很低。
- en: But that's not all ranges can do.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 但这还不是ranges能做的全部。
- en: Mutable changes with actions
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用操作进行可变更改
- en: 'In addition to views, the ranges library offers actions. Actions allow eager,
    mutable operations. For example, to sort the values in the same vector, we can
    use the following syntax:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 除了视图，范围库还提供了操作。操作允许急切的、可变的操作。例如，要对同一个向量中的值进行排序，我们可以使用以下语法：
- en: '[PRE16]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `|=` operator is similar to the `ranges::action::sort(numbers)` call, sorting
    the vector in place. Actions are also composable, either through a direct method
    call or with the `|` operator. This allows allows us to write code that sorts
    and keeps the unique items from a container through composition of the `sort`
    and `unique` actions with the `|` operator:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`|=`运算符类似于`ranges::action::sort(numbers)`调用，原地对向量进行排序。操作也是可组合的，可以通过直接方法调用或使用`|`运算符进行组合。这使我们能够编写代码，通过`sort`和`unique`操作的组合来对容器进行排序并保留唯一项：'
- en: '[PRE17]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Still, that's not everything ranges can do.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这还不是范围可以做的一切。
- en: Infinite series and data generation
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无限序列和数据生成
- en: 'Since views are lazy evaluated, they allow us to create infinite series. For
    example, to generate a series of integers, we can use the `view::ints` function.
    Then, we need to limit the series so we can use `view::take` to keep the first
    five elements from the series:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 由于视图是惰性评估的，它们允许我们创建无限序列。例如，要生成一系列整数，我们可以使用`view::ints`函数。然后，我们需要限制序列，所以我们可以使用`view::take`来保留序列的前五个元素：
- en: '[PRE18]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Additional data generation can be done using `view::iota` for any type that
    allows increments, for example, for `chars`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`view::iota`来进行额外的数据生成，例如对于`chars`类型，只要允许增量即可：
- en: '[PRE19]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In addition, you can generate linearly distributed values with the `linear_distribute`
    view. Given a value interval and a number of items to include in the linear distribution,
    the view includes both interval boundaries, plus enough values from inside the
    interval. For example, taking five linearly distributed values from the [`1`,
    `10`] interval leads to the values `{1, 3, 5, 7, 10}`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您可以使用`linear_distribute`视图生成线性分布的值。给定一个值间隔和要包含在线性分布中的项目数，该视图包括间隔边界以及足够多的内部值。例如，从[`1`，`10`]区间中取出五个线性分布的值会得到这些值：`{1,
    3, 5, 7, 10}`：
- en: '[PRE20]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'What if we need more complex data generators? Fortunately, we can create custom
    ranges. Let''s say that we want to create a list of each tenth power of `2` starting
    from `1` (that is, *2¹*, *2^(11)*, *2^(21)* , and so on). We could do that with
    a transform call; however, we can also do this using the `yield_if` function in
    combination with the `for_each` view. The line in bold from the following code
    shows you exactly how to use these two together:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要更复杂的数据生成器怎么办？幸运的是，我们可以创建自定义范围。假设我们想要创建从`1`开始的每个`2`的十次幂的列表（即*2¹*，*2^(11)*，*2^(21)*等）。我们可以使用transform调用来做到这一点；然而，我们也可以使用`yield_if`函数结合`for_each`视图来实现。下面代码中的粗体行显示了如何将这两者结合使用：
- en: '[PRE21]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: We first generate an infinite series of integers starting from `1`. Then, for
    each of them, we check whether the value divided by `10` has the remainder `1`.
    If it does, we return `2` to that power. To obtain a finite vector, we pipe the
    previous infinite series into the `take` view, which keeps only the first four
    elements.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们生成从`1`开始的无限整数序列。然后，对于每个整数，我们检查该值除以`10`的余数是否为`1`。如果是，我们返回`2`的幂。为了获得有限的向量，我们将前面的无限序列传递给`take`视图，它只保留前四个元素。
- en: Of course, this type of generation is not optimal. For every useful number,
    we need to visit `10`, and it would be better to start from a range that goes
    `1`, `11`, `21`, and so on.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这种生成方式并不是最佳的。对于每个有用的数字，我们需要访问`10`，最好是从`1`，`11`，`21`等开始。
- en: 'It''s worth mentioning here that an alternative to writing this code is to
    use the stride view. The `stride` view takes every n^(th) element from a series,
    exactly as we need it to. In combination with the `transform` view, we can achieve
    exactly the same result:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 值得在这里提到的是，编写这段代码的另一种方法是使用stride视图。`stride`视图从序列中取出每个n^(th)元素，正好符合我们的需求。结合`transform`视图，我们可以实现完全相同的结果：
- en: '[PRE22]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: By now, you've probably realized that data generation is very interesting for
    testing, in particular, property-based testing (as we discussed in [Chapter 11](56c096aa-67a7-48ad-bf22-a78367941a26.xhtml),
    *Property-Based Testing*). For testing, however we often need to generate strings.
    Let's see how.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您可能已经意识到数据生成对于测试非常有趣，特别是基于属性的测试（正如我们在[第11章](56c096aa-67a7-48ad-bf22-a78367941a26.xhtml)中讨论的那样，*基于属性的测试*）。然而，对于测试，我们经常需要生成字符串。让我们看看如何做到这一点。
- en: Generating strings
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成字符串
- en: 'To generate strings, first, we need to generate characters. For ASCII characters,
    we can start from a range of integers from `32` to `126`, that is, the ASCII code
    for the interesting, printable characters. We take a random sample and transform
    the code into characters. How do we take a random sample? Well, there''s a view
    for that called `view::sample`, which, given a number of items, takes a random
    sample from the range. Finally, we just need to turn it into a string. This is
    how we get a random string of the length `10` formed out of ASCII characters:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成字符串，首先我们需要生成字符。对于ASCII字符，我们可以从`32`到`126`的整数范围开始，即有趣的可打印字符的ASCII代码。我们取一个随机样本并将代码转换为字符。我们如何取一个随机样本呢？好吧，有一个叫做`view::sample`的视图，它可以从范围中取出指定数量的随机样本。最后，我们只需要将其转换为字符串。这就是我们如何得到一个由ASCII字符组成的长度为`10`的随机字符串：
- en: '[PRE23]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Here are a few samples resulted from running this code:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是运行此代码后得到的一些样本：
- en: '[PRE24]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: As you can see, these are interesting strings to use in our tests. Moreover,
    we can vary the size of the strings by changing the argument of `view::sample`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，这些是我们测试中使用的有趣字符串。此外，我们可以通过改变`view::sample`的参数来改变字符串的大小。
- en: This example is limited to ASCII characters. However, with support for UTF-8
    now being part of the C++ standard, it should be easy to expand to support special
    characters.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子仅限于ASCII字符。然而，由于UTF-8现在是C++标准的一部分，扩展以支持特殊字符应该很容易。
- en: Summary
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Eric Niebler's ranges library is a rare feat in software engineering. It manages
    to simplify the use of existing STL high-order functions, while adding lazy evaluation,
    with a topping of data generation. Not only is it part of the C++ 20 standard,
    but it is also useful for older versions of C++.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Eric Niebler的ranges库在软件工程中是一个罕见的成就。它成功地简化了现有STL高阶函数的使用，同时添加了惰性评估，并附加了数据生成。它不仅是C++
    20标准的一部分，而且也适用于较旧版本的C++。
- en: Even if you don't use a functional style of structuring your code, and whether
    you prefer mutable or immutable code, the ranges library allows you to make it
    elegant and composable. Therefore, I advise you to play with it and try for yourself
    how it changes your code. It's definitely worth it, and it's an enjoyable exercise.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 即使您不使用函数式的代码结构，无论您喜欢可变的还是不可变的代码，ranges库都可以让您的代码变得优雅和可组合。因此，我建议您尝试一下，看看它如何改变您的代码。这绝对是值得的，也是一种愉快的练习。
- en: We're closing in on the end of this book. It's now time to have a look at STL
    and the language standard support functional programming, and what we can expect
    from C++ 20, and this will be the topic of the next chapter.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们即将结束本书。现在是时候看看STL和语言标准对函数式编程的支持，以及我们可以从C++ 20中期待什么，这将是下一章的主题。
