- en: Example - Linux-Based Infotainment System
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例-基于Linux的信息娱乐系统
- en: 'This chapter provides an example of how to implement an infotainment system
    using a Linux-based **single-board computer** (**SBC**). It also shows how to
    connect to remote devices using Bluetooth, and how to use online streaming services.
    The resulting device will be able to play back audio from a variety of sources
    without a complex UI. In particular, we will be covering the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章提供了一个使用基于Linux的单板计算机（SBC）实现信息娱乐系统的示例。它还展示了如何使用蓝牙连接远程设备，以及如何使用在线流媒体服务。最终的设备将能够从各种来源播放音频，而无需复杂的用户界面。具体来说，我们将涵盖以下主题：
- en: Developing for a Linux-based SBC
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为基于Linux的SBC开发
- en: Using Bluetooth under Linux
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Linux下使用蓝牙
- en: Playing back audio from a variety of sources and recording audio
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从各种来源播放音频和录制音频
- en: Using GPIO for both simple input and voice recognition
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用GPIO进行简单输入和语音识别
- en: Connecting to online streaming audio services
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接到在线流媒体音频服务
- en: One box that does everything
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个能够完成所有功能的盒子
- en: Infotainment systems have become a common feature in our daily lives, starting
    with **in-car entertainment** (**ICE**) systems (also known as **In-Vehicle Infotainment** or
    **IVI**), which evolved from the basic radios and cassette players to include
    features such as navigation and connecting to smartphones over Bluetooth for access
    to one's music library, and much more. Another big feature is to provide the driver
    with hands-free functionality so that they can start a phone call and control
    the radio without having to take their eyes off the road or their hands off the
    steering wheel.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 信息娱乐系统已经成为我们日常生活中的常见功能，从车载娱乐系统（ICE）开始（也称为车载信息娱乐或IVI），它们从基本的收音机和磁带播放器发展到包括诸如导航和通过蓝牙连接智能手机以访问音乐库等功能。另一个重要功能是为驾驶员提供免提功能，使他们可以开始电话并控制收音机，而无需将目光从道路上移开或双手离开方向盘。
- en: As smartphones became more popular, providing their users with constant access
    to news, weather, and entertainment, the arrival of onboard assistants that use
    a voice-driven interface, both on smartphones and ICEs, ultimately led to the
    arrival of speech-driven infotainment systems aimed at in-home use. These usually
    consist of a speaker and microphone, along with the required hardware for the
    voice-driven interface and access to the required internet-based services.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 随着智能手机的普及，为用户提供持续访问新闻、天气和娱乐，使用语音驱动界面的车载助手的到来，最终导致了面向家庭使用的语音驱动信息娱乐系统的到来。这些通常包括扬声器和麦克风，以及用于语音驱动界面和访问所需的互联网服务的必要硬件。
- en: This chapter will mostly focus on this type of voice-driven infotainment system.
    In [Chapter 10](c3f58bee-de57-4934-95e8-18c78b667373.xhtml), *Developing Embedded
    Systems with Qt*, we will take an in-depth look at adding a graphical user interface.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将主要关注这种类型的语音驱动信息娱乐系统。在[第10章](c3f58bee-de57-4934-95e8-18c78b667373.xhtml)中，*使用Qt开发嵌入式系统*，我们将深入研究添加图形用户界面。
- en: 'The goals which we want to achieve here are the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要在这里实现的目标是：
- en: Play music from a Bluetooth source, such as a smartphone
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从蓝牙源（如智能手机）播放音乐
- en: Play music from an online streaming service
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从在线流媒体服务播放音乐
- en: Play music from the local filesystem, including USB sticks
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从本地文件系统（包括USB存储设备）播放音乐
- en: Record an audio clip and repeat it when asked
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 录制音频片段并在需要时重复播放
- en: Control all actions with one's voice, with buttons for some actions
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用语音控制所有操作，并为一些操作配备按钮
- en: In the next sections, we'll look at these goals and how to accomplish them.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将看看这些目标以及如何实现它们。
- en: Hardware needed
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 所需的硬件
- en: 'For this project, any SBC that''s capable of running Linux should work. It
    also needs to have the following features for a full implementation:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，任何能够运行Linux的SBC都应该可以。它还需要具备以下功能以进行完整实现：
- en: An internet connection (wireless or wired) to access online content.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 互联网连接（无线或有线）以访问在线内容。
- en: Bluetooth functionality (built-in or as an add-on module) to allow the system
    to act as a Bluetooth speaker.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 蓝牙功能（内置或作为附加模块）以使系统能够充当蓝牙扬声器。
- en: Free GPIO input to allow for buttons to be hooked up.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 释放GPIO输入以允许连接按钮。
- en: A functioning microphone input and audio output for the voice input and audio
    playback, respectively.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于语音输入和音频播放的功能麦克风输入和音频输出。
- en: SATA connectivity or similar for connecting storage devices like hard-drives.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SATA连接或类似连接用于连接硬盘等存储设备。
- en: I2C bus peripheral for an I2C display.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: I2C总线外设用于I2C显示器。
- en: For the example code in this chapter we only require the microphone input and
    audio output, along with some storage for local media files.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的示例代码中，我们只需要麦克风输入和音频输出，以及一些用于本地媒体文件存储的存储空间。
- en: To the GPIO pins, we can connect a number of buttons that can be used to control
    the infotainment system without having to use the voice-activated system. This
    is convenient for situations where using the voice-activated system would be awkward,
    such as when pausing or muting music when taking a phone call.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 对于GPIO引脚，我们可以连接一些按钮，用于控制信息娱乐系统，而无需使用语音激活系统。这在使用语音激活系统会很尴尬的情况下非常方便，比如在接听电话时暂停或静音音乐。
- en: Connecting the buttons will not be demonstrated in this example, but an example
    can be found in an earlier project in [Chapter 3](47e0b6fb-cb68-43c3-9453-2dc7575b1a46.xhtml),
    *Developing for Embedded Linux and Similar Systems*. There, we used the WiringPi
    library to connect switches to GPIO pins and configured interrupt routines to
    handle changes on these switches.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 连接按钮在本示例中不会进行演示，但可以在[第3章](47e0b6fb-cb68-43c3-9453-2dc7575b1a46.xhtml)的早期项目中找到示例，即*开发嵌入式Linux和类似系统*。在那里，我们使用WiringPi库将开关连接到GPIO引脚，并配置中断例程来处理这些开关上的变化。
- en: One could also connect a small display to the system, if one wanted to show
    current information, such as the name of the current song or other relevant status
    information. Cheap displays of 16x2 characters, which can be controlled over an
    I2C interface, are widely available; these, along with a range of OLED and other
    small displays, would be suitable for this purpose thanks to their minimal hardware
    requirements.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要显示当前信息，比如当前歌曲的名称或其他相关状态信息，也可以将小型显示器连接到系统上。16x2字符的廉价显示器可以通过I2C接口进行控制，而且有各种OLED和其他小型显示器可供选择，由于其最低硬件要求，它们非常适合这个用途。
- en: In [Chapter 3](47e0b6fb-cb68-43c3-9453-2dc7575b1a46.xhtml), *Developing for
    Embedded Linux and Similar Systems*, we had a brief look at what kind of hardware
    one might want to use for an infotainment system such as this, along with a number
    of possible user interfaces and storage options. What the right hardware configuration
    is, of course, depends on one's requirements. If one wants to store a lot of music
    locally for playback, having a large SATA hard drive connected to the system would
    be highly convenient.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](47e0b6fb-cb68-43c3-9453-2dc7575b1a46.xhtml)《开发嵌入式Linux和类似系统》中，我们简要介绍了为这样的信息娱乐系统使用什么样的硬件，以及一些可能的用户界面和存储选项。当然，正确的硬件配置取决于个人的需求。如果想要本地存储大量音乐进行播放，连接到系统的大型SATA硬盘将非常方便。
- en: For the example in this chapter, however, we will make no such assumptions,
    acting more as an easily extensible starting point. The hardware requirements
    are therefore very minimal, beyond the obvious need for a microphone and an audio
    output.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对于本章的示例，我们不会做出这样的假设，而是更像一个易于扩展的起点。因此，硬件要求非常低，除了明显需要麦克风和音频输出之外。
- en: Software requirements
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件需求
- en: For this project, we are assuming that Linux has been installed on the target
    SBC, and that the drivers for the hardware functionality, such as the microphone
    and audio output, have been installed and configured.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，我们假设Linux已经安装在目标SBC上，并且硬件功能的驱动程序，如麦克风和音频输出的驱动程序已经安装和配置好。
- en: Since we use the Qt framework for this project, all dependencies there should
    be met as well. This means that the shared libraries should be present on the
    system on which the resulting binary for the project will be run. The Qt framework
    can be obtained via the package manager of the OS, or via the Qt website at [http://qt.io/](http://qt.io/).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在这个项目中使用Qt框架，因此所有依赖项也应该得到满足。这意味着生成项目的二进制文件所在的系统上应该存在共享库。Qt框架可以通过操作系统的软件包管理器获得，也可以通过Qt网站[http://qt.io/](http://qt.io/)获得。
- en: In [Chapter 10](c3f58bee-de57-4934-95e8-18c78b667373.xhtml), *Developing Embedded
    Systems with Qt*, we will look at developing on embedded platforms with Qt in
    more detail. This chapter will briefly touch upon the use of Qt APIs.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第10章](c3f58bee-de57-4934-95e8-18c78b667373.xhtml)《使用Qt开发嵌入式系统》中，我们将更详细地研究在嵌入式平台上使用Qt进行开发。本章将简要介绍Qt
    API的使用。
- en: Depending on whether we want to compile the application directly on the SBC
    or on our development PC, we might have to install the compiler toolchain and
    further dependencies on the SBC, or the cross-compiling toolchain for Linux on
    the target SBC (ARM, x86, or other architecture). In [Chapter 6](7d5d654f-a027-4825-ab9e-92c369b576a8.xhtml),
    *Testing OS-Based Applications*, we looked at cross-compiling for SBC systems,
    as well as testing the system locally.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们是否想要直接在SBC上编译应用程序，还是在开发PC上编译应用程序，我们可能需要在SBC上安装编译器工具链和其他依赖项，或者在目标SBC（ARM、x86或其他架构）上安装交叉编译工具链。在[第6章](7d5d654f-a027-4825-ab9e-92c369b576a8.xhtml)《测试基于操作系统的应用程序》中，我们研究了为SBC系统进行交叉编译，以及在本地测试系统。
- en: As the example project in this chapter doesn't require any special hardware,
    it can be compiled directly on any system that's supported by the Qt framework.
    This is the recommended way to test out the code prior to deploying it on the
    SBC.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本章的示例项目不需要任何特殊的硬件，因此可以直接在任何受Qt框架支持的系统上进行编译。这是在将代码部署到SBC之前测试代码的推荐方式。
- en: Bluetooth audio sources and sinks
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 蓝牙音频源和接收器
- en: Bluetooth is unfortunately a technology that, despite being ubiquitous, suffers
    from its proprietary nature. As a result, support for the full range of Bluetooth
    functionality (in the form of profiles) is lacking. The profile that we are interested
    in for this project is called **Advanced Audio Distribution Profile** (**A2DP**).
    This is the profile used by everything from Bluetooth headphones to Bluetooth
    speakers in order to stream audio.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，蓝牙是一种专有技术，尽管它无处不在，但由于其专有性质，它缺乏对蓝牙功能的全面支持（以配置文件的形式）。我们在这个项目中感兴趣的配置文件称为**高级音频分发配置文件**（**A2DP**）。这是一种用于流式传输音频的配置文件，从蓝牙耳机到蓝牙音箱都在使用。
- en: Any device that implements A2DP can stream audio to an A2DP receiver or can
    themselves act as a receiver (depending on the BT stack implementation). Theoretically,
    this would allow someone to connect with a smartphone or similar device to our
    infotainment system and play back music on it, as they would with a standalone
    Bluetooth speaker.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 任何实现A2DP的设备都可以将音频流式传输到A2DP接收器，或者可以自己充当接收器（取决于BT堆栈的实现）。理论上，这将允许某人连接智能手机或类似设备到我们的信息娱乐系统，并在其上播放音乐，就像连接独立的蓝牙音箱一样。
- en: A receiver in the A2DP profile is an A2DP sink, whereas the other side is the
    A2DP source. A Bluetooth headphone or speaker device would always be a sink device
    as they can only consume an audio stream. A PC, SBC, or similar multi-purpose
    device can be configured to act as either a sink or a source.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: A2DP配置文件中的接收器是A2DP接收器，而另一侧是A2DP源。蓝牙耳机或音箱设备始终是接收器设备，因为它们只能消耗音频流。PC、SBC或类似的多用途设备可以配置为充当接收器或源。
- en: As mentioned earlier, the complications surrounding the implementation of a
    full Bluetooth stack on mainstream OSes has led to lackluster support for anything
    more than the basic serial communication functionality of Bluetooth.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面提到的，主流操作系统上实现完整蓝牙堆栈的复杂性导致对蓝牙的基本串行通信功能以外的支持不足。
- en: While FreeBSD, macOS, Windows, and Android all have Bluetooth stacks, they are
    limited in the number of Bluetooth adapters they can support (just one on Windows,
    and only USB adapters), the profiles they support (FreeBSD is data-transfer-only),
    and configurability (Android is essentially only targeted at smartphones).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然FreeBSD、macOS、Windows和Android都有蓝牙堆栈，但它们在支持的蓝牙适配器数量（Windows只支持一个，而且只支持USB适配器）、支持的配置文件（FreeBSD只支持数据传输）和可配置性方面存在限制（Android基本上只针对智能手机）。
- en: For Windows 10, A2DP profile support has currently regressed from being functional
    in Windows 7 to not being functional as of the time of writing due to changes
    to its Bluetooth stack. With macOS, its Bluetooth stack added A2DP support with
    version 10.5 of the OS (Leopard, in 2007) and should function.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows 10，A2DP配置文件支持目前已经从Windows 7中的功能性退化到了在撰写本文时不再起作用，这是由于其蓝牙堆栈的更改。而macOS的蓝牙堆栈在操作系统的10.5版本（2007年的Leopard）中添加了A2DP支持，并应该可以正常工作。
- en: The BlueZ Bluetooth stack that has become the official Bluetooth stack for Linux
    was originally developed by Qualcomm and is now included with official Linux kernel
    distributions. It's one of the most full-featured Bluetooth stacks.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: BlueZ蓝牙堆栈已成为Linux的官方蓝牙堆栈，最初由高通开发，现在已包含在官方Linux内核发行版中。它是最全面的蓝牙堆栈之一。
- en: With the move from BlueZ version 4 to 5, ALSA sound API support was dropped,
    and instead moved to the PulseAudio audio system, along with the renaming of the
    old APIs. This means that applications and code implemented using the old (version
    4) API no longer work. Unfortunately a lot of the example code and tutorials one
    finds online still targets the version 4, which is something to be aware of, as
    they work very differently.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 从BlueZ版本4到5的转变中，ALSA音频API支持被删除，而是转移到了PulseAudio音频系统，并且旧API的名称也被更改。这意味着使用旧（版本4）API实现的应用程序和代码不再起作用。不幸的是，许多在线找到的示例代码和教程仍然针对版本4，这是需要注意的，因为它们的工作方式有很大不同。
- en: BlueZ is configured via the D-Bus Linux system IPC (interprocess communication)
    system, or by editing configuration files directly. Actually implementing BlueZ
    support in an application like that in this chapter's project to configure it
    programmatically would be fairly complicated however, due to the sheer scope of
    the APIs, as well the limitations in setting configuration options that go beyond
    just the Bluetooth stack and require access to text-based configuration files.
    The application would therefore have to run with the correct permissions to access
    certain properties and files, editing the latter directly or performing those
    steps manually.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: BlueZ通过D-Bus Linux系统IPC（进程间通信）系统进行配置，或者直接编辑配置文件。然而，在像本章项目中那样以编程方式配置它实际上会相当复杂，因为API的范围非常广，而且在设置超出蓝牙堆栈的配置选项时需要访问基于文本的配置文件。因此，应用程序必须以正确的权限运行，以访问某些属性和文件，直接编辑后者或手动执行这些步骤。
- en: Another complication for the infotainment project is setting up an automatic
    pairing mode, as otherwise the remote device (smartphone) would be unable to actually
    connect to the infotainment system. This would require constant interaction with
    the Bluetooth stack as well, to poll it for any new devices that may have connected
    in the meantime.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 信息娱乐项目的另一个复杂之处是设置自动配对模式，否则远程设备（智能手机）将无法连接到信息娱乐系统。这还需要与蓝牙堆栈进行持续交互，以便在此期间轮询任何新连接的设备。
- en: Each new device would have to be checked to see whether it supports the A2DP
    source mode, in which case it would be added to the audio input for the system.
    One could then hook into the audio system to make use of that new input.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 每个新设备都需要检查是否支持A2DP源模式，如果支持，它将被添加到系统的音频输入中。然后可以连接到音频系统，利用新的输入。
- en: Due to the complexity and scope of this implementation, it was left out of the
    example code in this chapter. It could, however, be added to the code. SBCs such
    as the Raspberry Pi 3 come with a built-in Bluetooth adapter. Others can have
    a Bluetooth adapter added using a USB device.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个实现的复杂性和范围，它被省略在本章的示例代码中。但是，它可以被添加到代码中。像树莓派3这样的SBC带有内置蓝牙适配器。其他设备可以使用USB设备添加蓝牙适配器。
- en: Online streaming
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在线流媒体
- en: There are a number of online streaming services which one could integrate into
    an infotainment system like the type which are looking at in this chapter. All
    of them use a similar streaming API (usually an HTTP-based REST API), which requires
    one to create an account with the service, using which one can obtain an application-specific
    token that gives one access to that API, allowing one to query it for specific
    artists, music tracks, albums, and so on.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多在线流媒体服务可以集成到类似于本章所研究的信息娱乐系统中。它们都使用类似的流媒体API（通常是基于HTTP的REST API），需要用户使用该服务创建一个帐户，从而获取一个特定于应用程序的令牌，以便访问该API，允许用户查询特定的艺术家、音乐曲目、专辑等。
- en: Using an HTTP client, such as the one found in the Qt framework, it would be
    fairly easy to implement the necessary control flow. Due to the requirement of
    having a registered application ID for those streaming services, it was left out
    of the example code.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 使用HTTP客户端，比如在Qt框架中找到的客户端，实现必要的控制流将会相当容易。由于需要为这些流媒体服务注册应用程序ID，因此它被省略在示例代码中。
- en: 'The basic sequence to stream from a REST API usually looks like this, with
    a simple wrapper class around the HTTP calls:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 从REST API流式传输的基本顺序通常是这样的，使用一个简单的HTTP调用包装类：
- en: '[PRE0]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Voice-driven user interface
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语音驱动用户界面
- en: This project employs a user interface that is fully controllable by voice commands.
    For this, it implements a voice-to-text interface powered by the PocketSphinx
    library (see [https://cmusphinx.github.io/](https://cmusphinx.github.io/)) that
    uses both keyword-spotting and a grammar search in order to recognize and interpret
    commands given to it.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目采用了完全可通过语音命令控制的用户界面。为此，它实现了由PocketSphinx库提供动力的语音到文本接口（参见[https://cmusphinx.github.io/](https://cmusphinx.github.io/)），它使用关键词识别和语法搜索来识别和解释给定的命令。
- en: We use the default US-English language model that comes with the PocketSphinx
    distribution. This means that any commands spoken should be pronounced with a
    US-English accent in order to be accurately understood. To change this, one can
    load a different language model aimed at different languages and accents. Various
    models are available via the PocketSphinx website, and it is possible to make
    one's own language model with some effort.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了随PocketSphinx发行的默认的美式英语语言模型。这意味着任何口语命令都应该以美式英语口音发音，以便准确理解。要更改这一点，可以加载针对不同语言和口音的不同语言模型。通过PocketSphinx网站可以获得各种模型，也可以通过一些努力制作自己的语言模型。
- en: Usage scenarios
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用场景
- en: We don't want the infotainment system to be activated every single time that
    the voice user interface recognizes command words when they are not intended as
    such. The common way to prevent this from happening is by having a keyword that
    activates the command interface. If no command is recognized after the keyword
    within a certain amount of time, the system reverts to the keyword-spotting mode.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不希望信息娱乐系统在语音用户界面识别到命令词时每次都被激活，而这些命令词并非有意为之。防止这种情况发生的常见方法是有一个关键词来激活命令界面。如果在关键词之后一定时间内没有识别到命令，系统将恢复到关键词识别模式。
- en: 'For this example project, we use the keyword `computer`. After the system spots
    this keyword, we can use the following commands:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例项目，我们使用关键词`computer`。系统识别到这个关键词后，我们可以使用以下命令：
- en: '| **Command** | **Result** |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| **命令** | **结果** |'
- en: '| Play Bluetooth | Starts playing from any connected A2DP source device (unimplemented).
    |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 播放蓝牙 | 从任何连接的A2DP源设备开始播放（未实现）。 |'
- en: '| Stop Bluetooth | Stops playing from any Bluetooth device. |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 停止蓝牙 | 停止从任何蓝牙设备播放。 |'
- en: '| Play local | Plays the (hardcoded) local music file. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 播放本地 | 播放（硬编码的）本地音乐文件。 |'
- en: '| Stop local | Stops playing the local music file, if currently playing. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| 停止本地 | 如果当前正在播放本地音乐文件，则停止播放。 |'
- en: '| Play remote | Plays from an online streaming service or server (unimplemented).
    |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 播放远程 | 从在线流媒体服务或服务器播放（未实现）。 |'
- en: '| Stop remote | Stops playing, if active. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| 停止远程 | 如果正在播放，则停止播放。 |'
- en: '| Record message | Records a message. Records until a number of seconds of
    silence occurs. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| 录制消息 | 录制一条消息。录制直到发生一定时间的静音。'
- en: '| Play message | Plays back the recorded message, if any. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| 播放消息 | 如果有录制的消息，则播放回。 |'
- en: Source code
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 源代码
- en: This application has been implemented using the Qt framework, as a GUI application,
    so that we also get a graphical interface for ease of debugging. This debugging
    UI was designed using the Qt Designer of the Qt Creator IDE as a single UI file.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序是使用Qt框架实现的GUI应用程序，因此我们还获得了一个用于调试的图形界面。这个调试UI是使用Qt Creator IDE的Qt Designer设计的单个UI文件。
- en: 'We start by creating an instance of the GUI application:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建了GUI应用程序的实例：
- en: '[PRE1]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This creates an instance of the `MainWindow` class in which we have implemented
    the application, along with an instance of `QApplication`, which is a wrapper
    class used by the Qt framework.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这在`MainWindow`类中创建了一个实例，我们在其中实现了应用程序，以及`QApplication`的实例，这是Qt框架使用的包装类。
- en: 'Next, this is the `MainWindow` header:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，这是`MainWindow`的标题：
- en: '[PRE2]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Its implementation contains most of the core functionality, declaring the audio
    recorder and player instances, with just the voice command processing being handled
    in a separate class:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 其实现包含大部分核心功能，声明了音频录制器和播放器实例，只是声音命令处理是在一个单独的类中处理的：
- en: '[PRE3]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the constructor, we set up all of the UI connections for the buttons in the
    GUI window that allow us to trigger the application's functionality without having
    to use the voice user interface. This is useful for testing purposes.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在构造函数中，我们为GUI窗口中的按钮设置了所有UI连接，以便我们可以触发应用程序的功能，而无需使用语音用户界面。这对于测试目的很有用。
- en: In addition, we create an instance of the audio recorder and media player, along
    with an audio probe that is linked with the audio recorder, so that we can look
    at the audio samples it's recording and act on them.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们创建了音频录制器和媒体播放器的实例，以及与音频录制器链接的音频探针，以便我们可以查看它正在录制的音频样本并对其进行操作。
- en: 'Finally, we create an instance of the voice input interface class and push
    it onto its own thread before starting it. We connect its signals to specific
    commands, and other events to their respective slots:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们创建了语音输入接口类的实例，并在启动之前将其推送到自己的线程上。我们将其信号连接到特定命令，其他事件连接到它们各自的插槽：
- en: '[PRE4]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As mentioned in the section on Bluetooth technology, we have left the Bluetooth
    functionality unimplemented for the reasons explained in that section.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在蓝牙技术部分中提到的，出于该部分所述的原因，我们未实现了蓝牙功能。
- en: '[PRE5]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The same is true for the online streaming functionality. See the section on
    online streaming earlier in this chapter for details on how to implement this
    functionality.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在线流功能也是如此。有关如何实现此功能的详细信息，请参阅本章前面关于在线流的部分。
- en: '[PRE6]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: To play a local file, we expect to find an MP3 file present in the hardcoded
    path. This could, however, also play all of the music in a specific folder with
    just a few modifications by reading in the filenames and playing them back one
    by one.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要播放本地文件，我们期望在硬编码路径中找到一个MP3文件。但是，也可以通过读取文件名并逐个播放它们来播放特定文件夹中的所有音乐。
- en: '[PRE7]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the constructor, we configured the recorder to record to a file in a sub-folder
    called `message`. This will be overwritten if a new recording is made, allowing
    one to leave a message that can be played back later. The optional display or
    another accessory could be used to indicate when a new recording has been made
    and hasn''t been listened to yet:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在构造函数中，我们配置了录音机将记录到一个名为`message`的子文件夹中的文件中。如果进行新的录音，这将被覆盖，允许留下一条可以稍后播放的消息。可选的显示器或其他附件可以用来指示是否已经进行了新的录音并且尚未被听过：
- en: '[PRE8]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This method is called by our audio probe whenever the recorder is active. In
    this function, we calculate the **root-mean square** (**RMS**) value of the audio
    buffer to determine whether it's filled with silence. Here, silence is relative
    and might have to be adjusted depending on the recording environment.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 每当录音机处于活动状态时，我们的音频探测器就会调用这个方法。在这个函数中，我们计算音频缓冲区的**均方根**（**RMS**）值，以确定它是否充满了静默。在这里，静默是相对的，可能需要根据录音环境进行调整。
- en: 'After five seconds of silence have been detected, the recording of the message
    is stopped:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在检测到五秒的静默后，消息的录制将停止：
- en: '[PRE9]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The remaining methods handle the reporting of error messages that may be emitted
    elsewhere in the application, as well as terminating the application.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 其余的方法处理可能在应用程序的其他地方发出的错误消息的报告，以及终止应用程序。
- en: 'The `VoiceInput` class header defines the functionality for the voice input
    interface:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`VoiceInput`类头文件定义了语音输入接口的功能：'
- en: '[PRE10]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As PocketSphinx is a C library, we have to make sure that it is used with C-style
    linkage. Beyond this, we create the class members for the audio input and related
    IO device that the voice input will use.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 由于PocketSphinx是一个C库，我们必须确保它使用C风格的链接。除此之外，我们为音频输入和相关IO设备创建了类成员，语音输入将使用这些成员。
- en: 'Next, the class definition:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是类的定义：
- en: '[PRE11]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The constructor doesn''t do anything special, as the next method does all of
    the initializing and setting up of the main loop:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数并没有做任何特殊的事情，因为接下来的方法将初始化和设置主循环：
- en: '[PRE12]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The first part of this method sets up the audio interface, configuring it to
    record using the audio format settings PocketSphinx requires: mono, little-endian,
    16-bit signed PCM audio at 16,000 Hertz. After checking that the audio input supports
    this format, we create a new audio input instance:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法的第一部分设置了音频接口，配置它使用PocketSphinx所需的音频格式设置进行录制：单声道，小端，16位有符号PCM音频，采样率为16,000赫兹。在检查音频输入是否支持这种格式后，我们创建了一个新的音频输入实例：
- en: '[PRE13]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, we set up the keyword-spotting and JSGF grammar file that will be used
    during the processing of the audio sample. With the first `ps_set_search()` function
    call, we start the keyword-spotting search. The following loop will keep processing
    samples until the utterance `computer` is detected:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们设置了在处理音频样本时将使用的关键词检测和JSGF语法文件。通过第一个`ps_set_search()`函数调用，我们开始了关键词检测搜索。接下来的循环将持续处理样本，直到检测到`computer`这个话语：
- en: '[PRE14]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Each cycle, we read in another buffer worth of audio samples, to then have
    PocketSphinx process these samples. It also does silence detection for us to determine
    whether someone has started speaking into the microphone. If someone is speaking
    but we haven''t started interpreting it yet, we start a new utterance:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 每个周期，我们读入另一个缓冲区的音频样本，然后让PocketSphinx处理这些样本。它还为我们进行了静默检测，以确定是否有人开始对麦克风说话。如果有人在说话，但我们还没有开始解释，我们就开始一个新的话语：
- en: '[PRE15]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The rest of the method checks whether we have a usable hypothesis we can analyze.
    Depending on whether we are in keyword or grammar mode, we check for the detection
    of the keyword in the former case and switch to grammar mode. If we're already
    in grammar mode, we try to narrow the utterance down to a specific command, at
    which point we will emit the relevant signal that will trigger the connected functionality.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 方法的其余部分检查我们是否有可用的假设可以分析。根据我们是处于关键词模式还是语法模式，我们在前一种情况下检查关键词的检测并切换到语法模式。如果我们已经处于语法模式，我们尝试将话语缩小到特定的命令，此时我们将发出相关信号，触发连接的功能。
- en: A new utterance is started whenever PocketSphinx detects at least one second
    of silence. After executing a command, the system switches back to keyword-spotting
    mode.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 每当PocketSphinx检测到至少一秒的静默时，就会开始一个新的话语。执行命令后，系统会切换回关键词检测模式。
- en: Building the project
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建项目
- en: To build the project, the PocketSphinx project has to be built first. In the
    example project's source code that comes with this chapter, there are two Makefiles
    underneath the `sphinx` folder, one in the `pocketsphinx` folder and one in the
    `sphinxbase` folder. With these, the two libraries that form PocketSphinx will
    be built.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建项目，必须先构建PocketSphinx项目。在本章附带的示例项目源代码中，`sphinx`文件夹下有两个Makefile，一个在`pocketsphinx`文件夹中，另一个在`sphinxbase`文件夹中。通过这些，将构建形成PocketSphinx的两个库。
- en: 'After this, one can build the Qt project, either from Qt Creator or from the
    command line, by executing the following command:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，可以通过执行以下命令从Qt Creator或命令行构建Qt项目：
- en: '[PRE16]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Extending the system
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展系统
- en: In addition to audio formats, one could also add the ability to play back videos
    and integrate the ability to make and respond to phone calls (using the Bluetooth
    API). One may want to extend the application to make it more flexible and modular,
    so that, for example, one could add a module that would add the voice commands
    and resulting actions.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 除了音频格式，还可以添加播放视频和集成制作和回复电话的能力（使用蓝牙API）。可能希望扩展应用程序，使其更灵活和模块化，例如，可以添加一个模块，用于添加语音命令和相应的操作。
- en: Having voice output would be convenient as well, making it more aligned with
    the current commercial offerings. For this, one could use the text-to-speech API
    that's available in the Qt framework.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 具有语音输出也将很方便，使其更符合当前的商业产品。为此，可以使用Qt框架中提供的文本到语音API。
- en: It would also be useful to add more *information* to the infotainment system
    by querying remote APIs for things such as the current weather, news updates,
    and maybe even running updates on a current football game. The voice-based UI
    could be used to set up timers and task reminders, integrate a calendar, and much
    more.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 通过查询远程API获取更多*信息*，例如当前天气、新闻更新，甚至是当前足球比赛的更新，也将非常有用。基于语音的用户界面可以用于设置定时器和任务提醒，集成日历等等。
- en: Finally, as can be seen in this chapter's example code, one cannot specify the
    name of the track that one wants to play, or a specific album or artist name.
    Allowing such freestyle input is incredibly useful, but comes with its own set
    of issues.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，正如本章示例代码所示，人们无法指定要播放的曲目名称，或特定的专辑或艺术家名称。允许这种自由输入非常有用，但也带来了一系列问题。
- en: The main problem is the recognition rate of a voice-to-text system, especially
    for words it doesn't have in its dictionary. Some of us may already have had the
    pleasure of raising our voice in trying to make a voice-driven user interface
    on the phone, in the car, or on our smartphones understand a certain word.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 主要问题是语音转文本系统的识别率，特别是对于其词典中没有的单词。我们中的一些人可能已经有幸提高了声音，试图让手机、汽车或智能手机上的语音驱动用户界面理解某个词。
- en: At this point, it's still a big point of research, without a quick and easy
    solution. One could conceivably brute-force such recognition and get much better
    accuracy by using an index of local audio filenames and artists, along with other
    metadata, as part of the dictionary. The same could be done for a remote streaming
    service, through querying its API. This might add considerable latency to the
    recognition effort, however.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，这仍然是一个需要大量研究的重点，没有快速简单的解决方案。可以想象通过使用本地音频文件名和艺术家的索引，以及其他元数据作为词典的一部分，来强制进行这种识别，并通过查询其API来对远程流媒体服务进行更准确的识别。然而，这可能会给识别工作增加相当大的延迟。
- en: Summary
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at how one can fairly easily construct an SBC-based
    infotainment system, using voice-to-text to construct a voice-driven user interface.
    We also looked at ways that we could extend it to add even more functionality.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了如何相当容易地构建基于SBC的信息娱乐系统，使用语音转文本来构建语音驱动用户界面。我们还看了如何扩展它以添加更多功能。
- en: The reader is expected to be able to implement a similar system at this point,
    and to extend it to connect it to online and network-based services. The reader
    should also read up on the implementation of more advanced voice-driven user interfaces,
    the addition of text-to-speech, and the use of A2DP-based Bluetooth devices.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 预计读者能够在这一点上实施类似的系统，并将其扩展到连接在线和基于网络的服务。读者还应该阅读更高级的语音驱动用户界面的实施，添加文本到语音，以及使用基于A2DP的蓝牙设备。
- en: In the next chapter, we'll be taking a look at how to implement a building-wide
    monitoring and control system using microcontrollers and the local network.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看看如何使用微控制器和本地网络实现建筑范围的监控和控制系统。
