- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Importing Blender Assets into Godot
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Blender资源导入Godot
- en: You’ve come a long way. Your models are ready. Their scale and rotation values
    are fixed. What’s left to do? Import them into Godot, of course! Hopefully, you’ll
    find the importing process much more straightforward. This is a transitional chapter
    that covers mostly Godot topics with a minimal amount of Blender involvement.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经走了很长的路。你的模型准备好了。它们的缩放和旋转值已经固定。接下来要做什么？当然是将它们导入Godot！希望你会觉得导入过程更加直接。这是一个过渡章节，主要涵盖Godot主题，而Blender的参与度最小。
- en: We’ll start this chapter by showing you how to create game objects using your
    imported models with the click of a button. This process will convert the glTF
    files into game objects – more specifically, scenes in Godot terminology.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先通过点击按钮使用你导入的模型创建游戏对象，这个过程将glTF文件转换为游戏对象——更具体地说，在Godot术语中是场景。
- en: If you must fix something with your models or add detail, where can you do this?
    Since you are now in Godot, it’s tempting to fix the models in Godot, but this
    is counterproductive. In this chapter, we’ll show you how you can update your
    Blender file and reflect the changes in Godot.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你必须修复你的模型或添加细节，你可以在哪里做这件事？由于你现在在Godot中，修复模型可能很有诱惑力，但这是不利的。在本章中，我们将向你展示如何更新你的Blender文件，并在Godot中反映这些更改。
- en: In [*Chapter 2*](B17473_02.xhtml#_idTextAnchor032), *Building Materials and
    Shaders*, we learned how to work with materials in Blender. We’ll revisit this
    topic in the context of Godot so that we can understand how materials work in
    both applications. We’ll present the pros and cons of handling materials in either
    application so that you can decide which one works best for you. Whether you are
    working alone or in a team, there are a few decisions that can either save a lot
    of time or be frustrating down the line when you realize you’ve got to make a
    fundamental change. A decent material pipeline is one of these topics.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第2章*](B17473_02.xhtml#_idTextAnchor032) *构建材质和着色器*中，我们学习了如何在Blender中处理材质。我们将在Godot的上下文中重新探讨这个主题，以便我们能够理解两种应用程序中材质的工作方式。我们将介绍处理材质在任一应用程序中的优缺点，以便你可以决定哪个最适合你。无论你是单独工作还是团队合作，都有一些决定可能会节省大量时间，或者当你意识到你需要进行基本更改时，可能会感到沮丧。一个合理的材质管道是这些主题之一。
- en: In [*Chapter 5*](B17473_05.xhtml#_idTextAnchor075), *Setting Up Animation and
    Rigging*, we stored two actions in our snake model. We’ll import that model to
    see how Godot handles the animations stored in a glTF file. This chapter will
    only cover how to import animations; how to use imported animations will be covered
    later in this book when we build our point-and-click adventure game.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第5章*](B17473_05.xhtml#_idTextAnchor075) *设置动画和绑定*中，我们在我们的蛇模型中存储了两个动作。我们将导入这个模型来查看Godot如何处理存储在glTF文件中的动画。本章将仅涵盖如何导入动画；如何使用导入的动画将在本书稍后当我们构建我们的点击冒险游戏时进行介绍。
- en: Thus, you’ll be presented with some of the crucial building blocks and practices
    that will serve you in later chapters and your game projects.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你将了解到一些至关重要的构建块和实践，这些将在后面的章节和你的游戏项目中为你服务。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Making a scene!
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制作场景！
- en: Going between Blender and Godot
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Blender和Godot之间切换
- en: Deciding what to do with materials
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 决定如何处理材质
- en: Importing animations
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入动画
- en: By the end of this chapter, you’ll be able to take your glTF files and convert
    them into usable Godot assets, decide what to do with materials from a project
    pipeline perspective, and make sure you can access the animations that come with
    a model file.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将能够将你的glTF文件转换为可用的Godot资源，从项目管道的角度决定如何处理材质，并确保你可以访问模型文件中包含的动画。
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: As mentioned in the *Preface* section, we assume you already know your way around
    Godot for basic things such as creating and composing scenes, adding scripts to
    **nodes**, using the **Inspector** panel to change the conditions of your game
    objects, and more.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如*前言*部分所述，我们假设你已经熟悉Godot的基本操作，例如创建和组合场景，向**节点**添加脚本，使用**检查器**面板更改游戏对象的条件，等等。
- en: 'However, if you are a novice in Godot Engine, then you may want to start with
    the official learning material at this address first: [https://docs.godotengine.org/en/3.4/getting_started/introduction/](https://docs.godotengine.org/en/3.4/getting_started/introduction/).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你是Godot引擎的新手，那么你可能首先想从以下地址的官方学习材料开始：[https://docs.godotengine.org/en/3.4/getting_started/introduction/](https://docs.godotengine.org/en/3.4/getting_started/introduction/)。
- en: Throughout this book, we’ll be using Godot 3.4.4\. There may always be something
    new or missing even between minor versions. Should you be using a different version
    when you are reading this book, you can either switch to the version this book
    is using or read the detailed changelog for different releases for the appropriate
    version listed at [https://godotengine.org/news](https://godotengine.org/news).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我们将使用Godot 3.4.4。即使在较小的版本之间，也可能会有新功能或缺失的功能。如果您在阅读本书时使用的是不同版本，您可以切换到本书使用的版本，或者阅读[https://godotengine.org/news](https://godotengine.org/news)上列出的不同版本的相关详细变更日志。
- en: This is still a transitional chapter; as is the previous and the next chapter.
    We’ll create a new Godot project in [*Chapter 9*](B17473_09.xhtml#_idTextAnchor146),
    *Designing the Level*, and work within that Godot project in later chapters to
    make a point-and-click adventure game. Until then, we can make do with temporary
    Godot projects. This means that in this chapter and the next, we won’t be concerned
    at all with the structure of our files and folders. However, the sections in this
    chapter have been laid out in a way that we assume you are still working on the
    same Godot project.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这仍然是一个过渡章节；前一章和下一章也是如此。我们将在[第9章](B17473_09.xhtml#_idTextAnchor146)“设计关卡”中创建一个新的Godot项目，并在后续章节中在该Godot项目中工作以制作一个点对点冒险游戏。在此之前，我们可以使用临时的Godot项目。这意味着在本章和下一章中，我们根本不会关心我们文件和文件夹的结构。然而，本章中的部分已经按照我们假设您仍在同一个Godot项目中工作的方式安排。
- en: As usual, this book’s GitHub repository at [https://github.com/PacktPublishing/Game-Development-with-Blender-and-Godot](https://github.com/PacktPublishing/Game-Development-with-Blender-and-Godot)
    contains some files that are relevant to this chapter.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如往常一样，本书的GitHub仓库[https://github.com/PacktPublishing/Game-Development-with-Blender-and-Godot](https://github.com/PacktPublishing/Game-Development-with-Blender-and-Godot)包含一些与本章节相关的文件。
- en: Making a scene!
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作场景！
- en: In a typical 2D game built in Godot, using a **sprite** node is essential. You
    would then assign a texture to your sprite nodes in Godot’s **Inspector** panel.
    The 3D version is essentially the same, but it involves using a **MeshInstance**
    node and then assigning a **mesh** to it. So, what textures are to sprite nodes
    is what meshes are to mesh instance nodes. Although creating a Godot scene that
    just has a sprite node and instancing this scene in a bigger scene is possible,
    it’s overkill since you could easily attach the sprite node itself to the big
    scene.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在Godot中构建的典型2D游戏中，使用**精灵**节点是必不可少的。然后您将在Godot的**检查器**面板中将纹理分配给您的精灵节点。3D版本基本上是相同的，但它涉及使用**MeshInstance**节点并将其分配给一个**网格**。所以，纹理对于精灵节点来说就像网格对于网格实例节点一样。虽然创建一个只包含精灵节点并在更大场景中实例化此场景的Godot场景是可能的，但这是一种过度设计，因为您可以直接将精灵节点本身附加到大型场景中。
- en: This is where it makes sense to treat mesh instances differently and store them
    in their own scenes, unlike sprites, since 3D models have a lot more going on
    than getting assigned just one texture. Additionally, since a 3D model has a lot
    more moving parts, assigning individual meshes to mesh instances could be tiresome
    too, so let’s do better. The goal of this section will be to create a scene out
    of a 3D model and to automate how to assign meshes to mesh instances.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么需要将网格实例区别对待并存储在它们自己的场景中，与精灵不同，因为3D模型不仅仅是一个纹理的分配，还有很多其他的事情要做。此外，由于3D模型有很多可移动的部分，将单个网格分配给网格实例也可能很繁琐，所以让我们做得更好。本节的目标将是从3D模型中创建一个场景，并自动化如何将网格分配给网格实例。
- en: Adobe Animate
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Adobe Animate
- en: Godot’s scene concept incorporates a lot of notions you might be familiar with
    if you have worked with *Adobe Flash* in the past, or *Adobe Animate* these days,
    which uses **movie clips**, similar to what Godot does with its scenes. Creating
    nested movie clips and binding scripts is very handy, which is pretty much how
    a Godot project goes. Despite this similarity, there comes a moment in Godot when
    it makes sense to consider a 3D model its own scene, which is what this section
    will cover.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Godot的场景概念包含了您如果以前使用过*Adobe Flash*或现在的*Adobe Animate*（它使用**电影剪辑**，类似于Godot对场景的处理）可能会熟悉的一些概念。创建嵌套电影剪辑和绑定脚本非常方便，这正是Godot项目进行的方式。尽管有这种相似性，但在Godot中，有时将3D模型视为自己的场景是有意义的，这正是本节将要涵盖的内容。
- en: 'We suggest that you start a fresh Godot project for this section. Once you’ve
    done that, you need to find the `Sconce.glb` file in the `Start` folder for this
    chapter. You have two options at this point. First, you can copy and then paste
    this file, using your operating system’s filesystem, into where your Godot project
    folder is. Alternatively, you can drag the sconce file to the **FileSystem** panel
    of Godot. When you make a glTF file as part of your project, you’ll have something
    similar to the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议您为这一部分开始一个新的Godot项目。一旦您这样做，您需要找到本章的`Start`文件夹中的`Sconce.glb`文件。此时您有两个选择。首先，您可以使用操作系统的文件系统将此文件复制并粘贴到您的Godot项目文件夹中。或者，您可以将sconce文件拖到Godot的**文件系统**面板中。当您将glTF文件作为项目的一部分时，您将得到以下类似的内容：
- en: '![Figure 7.1 – The Sconce model is now part of your Godot project ](img/Figure_7.1_B17473.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图7.1 – Sconce模型现在是你的Godot项目的一部分](img/Figure_7.1_B17473.jpg)'
- en: Figure 7.1 – The Sconce model is now part of your Godot project
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.1 – Sconce模型现在是你的Godot项目的一部分
- en: Did you have a red cross as an icon for your `Sconce.glb` entry too? This doesn’t
    happen all the time, but that icon indicates there is a configuration problem;
    luckily, the fix is easy. Restarting Godot fixes the issue most of the time. If
    that doesn’t work, then we’ll have to press a button to reimport the file for
    Godot to configure it for us. The preceding screenshot also shows the **Import**
    panel in focus. You can click the **Reimport** button at the bottom of that panel
    to make the file compatible with Godot.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你在`Sconce.glb`条目中也有一个红色的十字图标作为图标吗？这种情况并不总是发生，但这个图标表示存在配置问题；幸运的是，修复起来很容易。重启Godot通常可以解决这个问题。如果这还不行，那么我们就需要按一个按钮来重新导入文件，以便Godot为我们配置它。前面的截图也显示了**导入**面板的焦点。您可以在该面板底部点击**重新导入**按钮，使文件与Godot兼容。
- en: 'Something else happened while we were discussing the icon issue. There are
    two material files in our project:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们讨论图标问题时，还发生了其他事情。在我们的项目中有两个材质文件：
- en: '`DarkMetal.material`'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DarkMetal.material`'
- en: '`Fire.material`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Fire.material`'
- en: These materials came within the glTF file that was exported from Blender since
    we opted to keep the materials. If you need a refresher on this, you can read
    the *Deciding what to export* section in [*Chapter 6*](B17473_06.xhtml#_idTextAnchor092),
    *Exporting Blender Assets*. By default, Godot will place the materials next to
    the model file. You may want to place your models and materials in separate folders
    for organizational reasons. We’ll discuss something related to this in the *Deciding
    what to do with materials* section later in this chapter.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这些材质包含在从Blender导出的glTF文件中，因为我们选择保留材质。如果您需要复习这一点，您可以阅读[*第6章*](B17473_06.xhtml#_idTextAnchor092)中的*决定导出什么*部分，*导出Blender资源*。默认情况下，Godot会将材质放置在模型文件旁边。出于组织原因，您可能希望将模型和材质放在不同的文件夹中。我们将在本章后面的*决定如何处理材质*部分讨论与此相关的内容。
- en: 'We’re now ready to make a scene using the sconce model. This effort will create
    all the necessary bindings to display a Blender model in Godot. To achieve this,
    you must do the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好使用Sconce模型创建场景。这项工作将创建显示Blender模型在Godot中的所有必要绑定。为了实现这一点，您必须执行以下操作：
- en: Double-click the `Sconce.glb` entry in the **FileSystem** panel.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击**文件系统**面板中的`Sconce.glb`条目。
- en: Click the **New Inherited** button on the pop-up screen.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在弹出窗口中点击**新建继承**按钮。
- en: The pop-up screen will display another button beside the one you’ve just clicked.
    There is also a piece of information about what each button does but it might
    be confusing, so let’s explain it. In layman’s terms, the **Open Anyway** button
    will let you see the contents of a glTF file, but this will be read-only. Since
    you may want to make alterations, such as attaching scripts, you’ll often click
    the **New Inherited** button.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 弹出窗口将在您刚刚点击的按钮旁边显示另一个按钮。还有关于每个按钮功能的说明，但它可能有些令人困惑，所以让我们来解释一下。用通俗易懂的话说，**打开任何方式**按钮将允许您查看glTF文件的内容，但这是只读的。由于您可能想要进行修改，例如附加脚本，您通常会点击**新建继承**按钮。
- en: If you bring up the **Scene** panel, you’ll see that your last effort has created
    two **MeshInstance** nodes under one **Spatial** node. When you click either the
    **Sconce** or **Flame** mesh instance node, you’ll see their mesh bindings in
    the **Inspector** panel. We didn’t have to create all this structure and bindings
    manually; creating a scene out of a glTF file did it all for us.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打开**场景**面板，你会看到你的最后努力在**空间**节点下创建了两個**网格实例**节点。当你点击**Sconce**或**Flame**网格实例节点时，你会在**检查器**面板中看到它们的网格绑定。我们不必手动创建所有这些结构和绑定；从glTF文件创建场景为我们完成了这一切。
- en: 'When you have finished examining what’s changed so far, you can save your file
    as `Sconce.tscn` since it is still a temporary construct as far as Godot is concerned.
    The following screenshot shows our progress:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当你检查完到目前为止的变化后，你可以将你的文件保存为`Sconce.tscn`，因为就Godot而言，它仍然是一个临时构造。以下截图显示了我们的进度：
- en: '![Figure 7.2 – You have created a scene with a click of a button ](img/Figure_7.2_B17473.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图7.2 – 你只需点击一下按钮就创建了一个场景](img/Figure_7.2_B17473.jpg)'
- en: Figure 7.2 – You have created a scene with a click of a button
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.2 – 你只需点击一下按钮就创建了一个场景
- en: You can now utilize `Sconce.tscn` in other scenes by creating more instances
    of it. For example, in most 2D platformer games where there are enemies, you would
    have to create instances of scenes that stored the enemy character sprites. This
    is similar. Hence, every time you need a sconce, you can use the **Sconce** scene
    instead of the model file. We’ll create many more instances of this scene when
    we work on our game later in this book.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以通过创建更多`Sconce.tscn`的实例在其他场景中使用它。例如，在大多数2D平台游戏（其中包含敌人）中，你必须创建存储敌人角色精灵的场景实例。这很相似。因此，每次你需要sconce时，你都可以使用**Sconce**场景而不是模型文件。在我们这本书的后续部分工作游戏时，我们将创建更多此类场景的实例。
- en: Creating a scene out of a model file was easy, but how easy is it to change
    it? Either the sconce or the flame could use a bit of touch. We’ll tackle how
    to update our models in our scenes next.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 从模型文件创建场景很容易，但改变它有多容易呢？无论是 sconce 还是火焰，都可以稍微调整一下。接下来，我们将探讨如何在场景中更新我们的模型。
- en: Going between Blender and Godot
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Blender和Godot之间切换
- en: 'In later versions of Godot, specifically starting with Godot 4.x, you’ll be
    able to directly import Blender files into Godot and interact with them. Saving
    things in Blender will automatically update the situation in Godot. We are not
    there yet. At the time of writing, we must resolve to an already tried and tested
    method: re-exporting our assets. Let’s see how we can accomplish this easily.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在Godot的后续版本中，特别是从Godot 4.x版本开始，你将能够直接将Blender文件导入Godot并与它们交互。在Blender中保存内容将自动更新Godot中的情况。我们还没有达到那个阶段。在撰写本文时，我们必须坚持已经尝试并验证过的方法：重新导出我们的资产。让我们看看我们如何轻松地完成这项任务。
- en: 'While you are developing your game, you’ll likely want to make changes to your
    models. Perhaps you’ve been working with a prototype that your 3D artist friend
    or contractor provided a while ago. Now, they are ready to give you a more refined
    piece. So, let’s simulate a similar scenario by making modifications to the sconce
    model we’ve been using. If you want to skip the Blender parts, you can find the
    finished changes in the `Sconce.blend` file in the `Finish` folder. If you want
    to exercise some Blender muscles, then we suggest that you make two changes in
    the `Sconce.blend` file in the `Start` folder. These changes are as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在你开发游戏的过程中，你可能会想要更改你的模型。也许你一直在使用你的3D艺术家朋友或承包商之前提供的一个原型。现在，他们准备给你一个更精细的作品。所以，让我们通过修改我们一直在使用的sconce模型来模拟一个类似的场景。如果你想要跳过Blender部分，你可以在`Finish`文件夹中的`Sconce.blend`文件中找到完成后的更改。如果你想锻炼一下Blender技能，我们建议你在`Start`文件夹中的`Sconce.blend`文件中进行两个更改。这些更改如下：
- en: 'Move the tip of the flame so that it doesn’t look too pointy. (Hint: go into
    **Edit Mode**.)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将火焰的尖端移动一下，让它看起来不要太尖锐。（提示：进入**编辑模式**。）
- en: 'Replace the flame material with something that is bright yellow. You can pick
    a name such as **HotFire** for it. (Hint: Remove the old material and add a new
    one.)'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将火焰材质替换为明亮的黄色。你可以为它选择一个名字，比如**HotFire**。（提示：删除旧材质并添加一个新的。）
- en: We’re applying two important changes to our model. First, we are changing the
    geometry of our model, however minor it might be. Second, we are introducing a
    new material instead of changing the color of an existing material. All there
    is left to do is re-export our model and overwrite the existing `Sconce.glb` file
    in our Godot project. Chances are, if you were following along, the `Sconce.glb`
    in the project, it looks like nothing has changed.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对我们的模型进行了两项重要的更改。首先，我们改变了模型的几何形状，尽管这可能微不足道。其次，我们引入了一种新材料，而不是更改现有材料的颜色。剩下的唯一事情就是重新导出我们的模型，并覆盖
    Godot 项目中现有的 `Sconce.glb` 文件。如果你一直在跟随，项目中的 `Sconce.glb` 文件看起来似乎没有任何变化。
- en: If you restart Godot, switch to a different scene tab, or do any other thing
    that would refresh the view, then you’ll see your updates. Otherwise, you may
    still have the same old look. There is a general refreshing problem, it’d seem.
    Hopefully, little things like this will be fixed in future versions of Godot.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你重新启动 Godot，切换到不同的场景标签，或执行任何其他会刷新视图的操作，那么你就会看到你的更新。否则，你可能仍然保持原来的外观。似乎存在一个普遍的刷新问题。希望像这样的小问题将在
    Godot 的未来版本中得到修复。
- en: 'The following screenshot shows the updates you will see:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了您将看到的更新：
- en: '![Figure 7.3 – The flame is hotter and straighter with our newest changes ](img/Figure_7.3_B17473.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.3 – 我们的最新更改使火焰更热、更直](img/Figure_7.3_B17473.jpg)'
- en: Figure 7.3 – The flame is hotter and straighter with our newest changes
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.3 – 我们的最新更改使火焰更热、更直
- en: While we successfully updated the **Sconce** scene, we also introduced a new
    material to the project. The import process was smart enough to know there was
    a new material coming in, but it was judicious enough to keep the old materials,
    just in case they might be needed and used sometime later in your project.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们成功更新了 **Sconce** 场景，但我们还向项目中引入了一种新材料。导入过程足够智能，知道即将导入新材料，但它足够谨慎，保留了旧材料，以防将来在项目中可能需要使用它们。
- en: This could lead to having lots of unused files over time. That is not the worst
    of your problems, though. There is a much more insidious thing waiting for you
    when you import more and more models and eventually lose track of what’s happening
    due to the sheer number of files as your project grows.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能会导致随着时间的推移积累大量未使用的文件。但这还不是你遇到的最糟糕的问题。当你导入越来越多的模型，最终因为文件数量庞大而失去对项目状况的跟踪时，有一个更加隐蔽的问题在等待着你。
- en: In the next section, we’ll present a scenario where importing glTF files straightforwardly
    as we have done so far may cause some problems.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将展示一个场景，其中直接导入 glTF 文件，就像我们迄今为止所做的那样，可能会引起一些问题。
- en: Deciding what to do with materials
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 决定如何处理材料
- en: An important decision awaits you. When you were exporting your Blender assets
    in [*Chapter 6*](B17473_06.xhtml#_idTextAnchor092), *Exporting Blender Assets*,
    we briefly discussed what the export options in the exporter’s UI meant. However,
    we never really talked about the implications of keeping the materials or not.
    In this section, we’ll present the pros and cons of handling materials in Blender
    versus Godot.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 一个重要的决定等待着你。当你导出 Blender 资产时，在 [*第 6 章*](B17473_06.xhtml#_idTextAnchor092)，*导出
    Blender 资产*，我们简要讨论了导出器 UI 中的导出选项的含义。然而，我们从未真正讨论过保留材料或不保留材料的含义。在本节中，我们将介绍在 Blender
    与 Godot 中处理材料的优缺点。
- en: Let’s assume you are now ready to import another model. For example, the `Vessel.glb`
    file in the `Start` folder is something you want to add to your game. If you take
    a look inside the associated `Vessel.blend` file, you’ll notice that we are using
    a material labeled as **DarkMetal**. Ironically, perhaps accidentally, someone
    has decided to pick a light color, but the name, regardless of what the intentions
    are, is the same material name we used in the sconce model file.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你现在已经准备好导入另一个模型。例如，`Start` 文件夹中的 `Vessel.glb` 文件是你想要添加到游戏中的东西。如果你查看相关的 `Vessel.blend`
    文件，你会注意到我们使用了一种标记为 **DarkMetal** 的材料。讽刺的是，也许是无意的，有人决定选择一种浅色，但不管意图如何，名称与我们在 sconce
    模型文件中使用的是相同的材料名称。
- en: 'So, what will happen when we import this file into Godot? To find out, follow
    these steps:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，当我们将此文件导入 Godot 时会发生什么？为了找出答案，请按照以下步骤操作：
- en: Add `Vessel.glb` to your Godot project.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `Vessel.glb` 添加到您的 Godot 项目中。
- en: Turn this vessel model into a scene. For familiarity’s sake, save it as `Vessel.tscn`.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将这个船体模型转换成一个场景。为了方便起见，将其保存为 `Vessel.tscn`。
- en: 'The following screenshot shows the new scene, as well as the status of the
    **FileSystem** panel:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了新的场景，以及 **FileSystem** 面板的状态：
- en: '![Figure 7.4 – Everything is kind of looking OK, but shouldn’t this vessel
    have a lighter color? ](img/Figure_7.4_B17473.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.4 – 东西看起来都还好，但这个容器不应该有一个更浅的颜色吗？](img/Figure_7.4_B17473.jpg)'
- en: Figure 7.4 – Everything is kind of looking OK, but shouldn’t this vessel have
    a lighter color?
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.4 – 东西看起来都还好，但这个容器不应该有一个更浅的颜色吗？
- en: Despite the mislabeling in Blender, we knew what we wanted for the vessel’s
    color. It was supposed to be a lighter color but that’s not what we are seeing
    in Godot. While importing the vessel model, since there was already a material
    with the same name in the project, Godot chose not to duplicate the resources.
    This is efficient, perhaps, but not accurate. This kind of thing could easily
    happen, especially if you are utilizing someone else’s files. Luckily, only the
    new stuff doesn’t look correct. In other words, the incoming resources are not
    overwriting and messing up the existing resources.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在 Blender 中的标记有误，但我们知道我们想要的容器颜色。它应该是浅色，但在 Godot 中我们看到的情况并非如此。在导入容器模型时，由于项目中已经存在同名材质，Godot
    选择不复制资源。这可能很高效，但并不准确。这种事情很容易发生，尤其是如果你正在使用他人的文件。幸运的是，只有新导入的内容看起来不正确。换句话说，新导入的资源并没有覆盖和破坏现有的资源。
- en: 'So, what do we do to make the vessel show the color we want? We can offer a
    few suggestions that are more organizational solutions. Thus, this is not a technical
    but a workflow or a pipeline type of solution as it is often labeled in the industry.
    Therefore, the solution lies in how you want to treat your files in your project,
    and whether you are working solo or in a group. These suggestions are to do the
    following:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们该如何让容器显示我们想要的颜色呢？我们可以提供一些更组织性的建议。因此，这不仅仅是一个技术解决方案，而是一种工作流程或管道类型的解决方案，这在行业中通常是这样标记的。因此，解决方案在于你如何在项目中处理你的文件，以及你是单独工作还是团队合作。以下是一些建议：
- en: Label Blender materials by purpose
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过用途标记 Blender 材质
- en: Label Blender materials by color
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过颜色标记 Blender 材质
- en: Import your models into separate folders
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将你的模型导入到单独的文件夹中
- en: Use a staging area in Godot
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Godot 中使用预演区域
- en: None of these suggestions is a magic pill. You have to try and decide if they’re
    beneficial for you. Also, sometimes, projects of different sizes make some of
    these solutions easy or difficult to apply. The decision is yours after you learn
    what each one entails.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这些建议都不是灵丹妙药。你必须尝试并决定它们对你是否有益。此外，不同规模的项目可能会使某些解决方案容易或困难。在你了解每个建议包含的内容之后，决定权在你手中。
- en: Labeling Blender materials by purpose
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过用途标记 Blender 材质
- en: 'Naming materials in Blender by their shade, such as **DarkMetal**, can only
    go so far. How dark are we talking about? Sooner or later, we will find ourselves
    playing a game of adjectives: dark, darker, darkest, and likewise. It will get
    worse when we want to pick a lighter version of the dark tone we have already
    picked.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Blender 中通过其色调命名材质，例如 **DarkMetal**，只能走这么远。我们说的是多暗？迟早我们会发现自己陷入一个形容词的游戏：暗、更暗、最暗，以此类推。当我们想要选择比我们已选择的暗色调更浅的版本时，情况会更糟。
- en: Typically, a sconce’s base is wrought iron. Since it’s a metal, it makes sense
    to use the word metal in its name, but it could easily get confusing. Instead,
    you could use the object’s name for its material title. So, you’ll have `Sconce.material`
    once you import it into Godot.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，壁灯的底座是铸铁制成的。由于它是一种金属，所以在名称中使用“金属”这个词是有意义的，但它可能会很容易造成混淆。相反，你可以使用物体的名称作为其材质标题。所以，一旦你将其导入到
    Godot 中，你将会有 `Sconce.material`。
- en: Labeling Blender materials by color
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过颜色标记 Blender 材质
- en: If you want to go with color-like labels, then you can make this obvious and
    in a unique way without leaving any room for Godot to interpret it in its own
    way. The `393646.material`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要使用类似颜色的标签，那么你可以以一种明显且独特的方式做到这一点，而不会给 Godot 留下任何以它自己的方式解释的空间。`393646.material`。
- en: Keep in mind that you’ll often get busy and distracted while you are authoring
    your models and find yourself fine-tuning a lot of things in your models, whether
    it’s geometry, materials, animations, and much more. So, if you have already chosen
    a hex color as a name, and later alter the color of the material, then you will
    have to remember to update the name.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，在创作模型时，你可能会变得忙碌和分心，发现自己正在对模型中的许多事物进行微调，无论是几何形状、材质、动画等等。所以，如果你已经选择了一个十六进制颜色作为名称，并且后来改变了材质的颜色，那么你必须记得更新名称。
- en: Importing your models into separate folders
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将你的模型导入到单独的文件夹中
- en: 'Some people organize their Godot projects so that they have separate folders
    for bigger concepts. This includes materials, models, scenes, and scripts. If
    you want to make sure your materials are unique to the model you are importing,
    a safer and easier way to do this is to create custom folders inside a specific
    folder. For example, if you have a `Models` folder at the root of your project,
    instead of dumping all the glTF files into this folder, you can create subfolders
    named after the model you are importing. In our case, this is the structure you’d
    see:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 有些人组织他们的Godot项目，以便他们有单独的文件夹来存放更大的概念。这包括材质、模型、场景和脚本。如果你想确保你的材质只属于你正在导入的模型，一个更安全、更简单的方法是在特定文件夹内创建自定义文件夹。例如，如果你的项目根目录下有一个`Models`文件夹，你不需要将所有glTF文件都放入这个文件夹，你可以创建以你正在导入的模型命名的子文件夹。在我们的例子中，你会看到以下结构：
- en: '`Models` > `Sconce` > `Sconce.glb`'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Models` > `Sconce` > `Sconce.glb`'
- en: '`Models` > `Vessel` > `Vessel.glb`'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Models` > `Vessel` > `Vessel.glb`'
- en: Then, all the relevant materials for each glTF file will be contained in their
    own folder. This might seem counter-productive at first since the same material
    file will be duplicated in different folders, especially if the material’s names
    are color-coded. However, you’ll at least know what you are importing is what
    you want in the first place.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，每个glTF文件的相关材质都将包含在其自己的文件夹中。这乍一看可能似乎适得其反，因为相同的材质文件将在不同的文件夹中重复，尤其是如果材质的名称是彩色编码的话。然而，你至少会知道你导入的正是你最初想要的。
- en: This method might be advantageous in some scenarios. Maybe you are designing
    more than one sconce style for your game. In this new style, despite the wrought
    iron part having a different shape, it’ll most likely use the same material. Then,
    you can easily rename the folder as `Sconces` to store multiple sconce files.
    This way, you’re intentionally agreeing with the fact that Godot will not create
    duplicate materials but use the first imported model’s material.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法在某些情况下可能具有优势。也许你正在为你的游戏设计不止一种烛台样式。在这个新样式中，尽管铸铁部分有不同的形状，但它很可能会使用相同的材质。然后，你可以轻松地将文件夹重命名为`Sconces`来存储多个烛台文件。这样，你是有意同意Godot不会创建重复的材质，而是使用第一个导入的模型的材质。
- en: Last but not least, let’s cover a caveat about this technique. If you are importing
    your files by dropping them over the **FileSystem** panel, you’ve got to be careful
    since that panel is context-sensitive. This means that you need to have the appropriate
    folder selected in the entry list. Otherwise, whichever entry is selected will
    be the recipient. To be sure of where you are sending your files, you can do all
    this by using your operating system’s filesystem. When you switch to Godot, your
    files will be processed and, depending on the speed of your system, you might
    see a progress bar showing the progress of the import.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，让我们来谈谈这个技术的注意事项。如果你是通过将文件拖放到**文件系统**面板来导入文件，你必须小心，因为这个面板是上下文相关的。这意味着你需要选择条目列表中的适当文件夹。否则，被选中的任何条目都将成为接收者。为了确保你知道你的文件发送到了哪里，你可以通过使用操作系统的文件系统来完成所有这些操作。当你切换到Godot时，你的文件将被处理，并且根据你系统的速度，你可能会看到一个进度条显示导入的进度。
- en: Using a staging area in Godot
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Godot中使用预演区域
- en: Last in our list of possible solutions to making sure models and materials are
    imported properly is to use a staging area. This means, similar to using unique
    folders for models, you can designate a folder to monitor what’s going on with
    a model. Perhaps this is a folder labeled as `Staging` inside the `Models` folder.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们确保模型和材质正确导入的可能解决方案列表中，最后一个是使用预演区域。这意味着，类似于为模型使用唯一文件夹，你可以指定一个文件夹来监控模型的情况。也许这是一个位于`Models`文件夹内的标记为`Staging`的文件夹。
- en: Using the search functionality in the **FileSystem** panel, you can even check
    if there are duplicate materials in other folders. This is a safe way to compare
    materials because you can observe their properties in the **Inspector** panel.
    If there are no obvious differences, and you deem it safe, you can just move the
    relevant glTF file to its final place while ignoring the duplicate material file
    in this staging area.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**文件系统**面板中的搜索功能，你甚至可以检查其他文件夹中是否有重复的材质。这是一种安全比较材质的方法，因为你可以通过**检查器**面板观察它们的属性。如果没有明显差异，并且你认为这是安全的，你只需将相关的glTF文件移动到其最终位置，同时忽略这个预演区域中的重复材质文件。
- en: This requires a bit of work, but it might be a necessary practice in larger
    teams so that you can decide and even notify the artist if there are obvious labeling
    mistakes. For example, if there is a typo for the same material that multiple
    similar models should use, you won’t end up with two separate materials.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这需要一点工作，但在大型团队中这可能是一项必要的实践，以便你可以决定甚至通知艺术家是否存在明显的标签错误。例如，如果有多个类似模型应该使用的相同材质存在拼写错误，你不会得到两个不同的材质。
- en: Wrapping up
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: Out of all these options, and perhaps a few more you may find online, you must
    decide which one works best for you. It’s a common thing that you’ll start one
    way and switch to an alternative method as your project’s needs change. Although
    your choice might have technical ramifications, it’s rather a business decision;
    so, weigh up the pros and cons while making it.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有这些选项中，也许还有你在网上找到的几个选项，你必须决定哪一个最适合你。这是一个常见的情况，你可能会开始一种方式，但随着项目需求的变化而切换到另一种方法。虽然你的选择可能具有技术影响，但它更多的是一个商业决策；因此，在做出决定时权衡利弊。
- en: There is one more thing you can do regarding your materials and models, but
    since this chapter is about importing, we’re intentionally leaving it for later.
    It’s when you decide to create your materials in Godot and bind them to the meshes
    of a model manually because, sometimes, you find models with just their meshes
    but with no material information. We’ll show you how to create materials in Godot
    in [*Chapter 9*](B17473_09.xhtml#_idTextAnchor146), *Designing the Level*, in
    the *Constructing the missing materials* section.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 关于你的材料和模型，你还可以做一件事，但由于本章是关于导入的，所以我们有意将其留到后面。那就是当你决定在 Godot 中创建你的材料并将其手动绑定到模型的网格上时，因为有时你会发现只有网格但没有材质信息的模型。我们将在
    [*第 9 章*](B17473_09.xhtml#_idTextAnchor146) 的 *设计关卡* 部分的 *构建缺失的材质* 中向你展示如何在 Godot
    中创建材质。
- en: Now that we seem to be done with material things, in the next section, we’ll
    learn how to import the animations we created for our snake in [*Chapter 5*](B17473_05.xhtml#_idTextAnchor075),
    *Setting Up Animation and Rigging*.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们似乎已经完成了关于材质的事情，在下一节中，我们将学习如何导入我们在 [*第 5 章*](B17473_05.xhtml#_idTextAnchor075)
    的 *设置动画和绑定* 中为蛇创建的动画。
- en: Importing animations
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入动画
- en: The last thing we’ll cover about importing Blender assets is animation. Thus
    far, we have taken care of importing the mesh and materials of a model. We even
    discussed workflow problems concerning the default import workflow for materials.
    Hopefully, there won’t be a hidden surprise in importing animations, but how do
    we do it? You’ll find out in this section.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将介绍的关于导入 Blender 资产的最后一件事情是动画。到目前为止，我们已经处理了导入模型的网格和材质。我们甚至讨论了与默认导入流程相关的材质工作流程问题。希望导入动画不会有隐藏的惊喜，但我们如何做呢？你将在本节中找到答案。
- en: 'You can start by moving the `Snake.glb` file in the `Start` folder of this
    chapter to your project. Then, as shown in the *Making a scene!* section, you
    can create and save a scene out of this model. The snake model will bring a lot
    of its materials, and your **FileSystem** panel will look a bit crowded, but this
    is what we have so far:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从将本章的 `Snake.glb` 文件移动到你的项目的 `Start` 文件夹开始。然后，如 *制作场景!* 部分所示，你可以从这个模型创建并保存一个场景。蛇模型将带来很多它的材质，你的
    **FileSystem** 面板看起来会有些拥挤，但这是我们目前所拥有的：
- en: '![Figure 7.5 – The snake has followed you to Godot Engine ](img/Figure_7.5_B17473.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.5 – 蛇跟随你进入 Godot 引擎](img/Figure_7.5_B17473.jpg)'
- en: Figure 7.5 – The snake has followed you to Godot Engine
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.5 – 蛇跟随你进入 Godot 引擎
- en: This is a good time to introduce some of the 3D nodes Godot uses. We’ll utilize
    the snake scene for this effort because it has a good sample of different nodes
    you’ll most likely use in your projects.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这是个好时机来介绍一些 Godot 使用的 3D 节点。我们将利用蛇场景来完成这项工作，因为它有你在项目中最可能使用的不同节点的良好样本。
- en: The root node is of the **spatial** type. Godot’s chosen color for all 3D nodes
    is red. If you’ve been using Godot’s **Node2D** nodes, which have a blue circle
    icon, **Spatial** nodes are the equivalent of that, only in 3D, and they are red.
    Whereas a **Node2D** node will have coordinates only in the *XY* plane, a **Spatial**
    node will have them in the *XYZ* plane. You usually employ this kind of node as
    a root container for other nodes. For example, the **Armature** and **AnimationPlayer**
    nodes are the direct children of the root **Spatial** node, which is labeled as
    **Snake**.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 根节点是 **spatial** 类型。Godot 为所有 3D 节点选择的红颜色。如果你一直在使用 Godot 的 **Node2D** 节点，它们有一个蓝色圆形图标，**Spatial**
    节点就是那个节点的 3D 版本，颜色是红色。而一个 **Node2D** 节点只有 *XY* 平面的坐标，一个 **Spatial** 节点则会在 *XYZ*
    平面有坐标。你通常使用这种类型的节点作为其他节点的根容器。例如，**Armature** 和 **AnimationPlayer** 节点是根 **Spatial**
    节点的直接子节点，该节点被标记为 **Snake**。
- en: Node types versus labels
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 节点类型与标签
- en: In the snake scene, the **MeshInstance** node has been renamed **Snake**, which
    is useful so that you can differentiate if you have a lot of mesh instances. There
    is no built-in *Snake* node type in Godot, but it’s okay to just say **Snake**
    node, even though it’s of the **MeshInstance** type. The **Inspector** panel will
    figure out the type and only list the relevant properties. Therefore, throughout
    the rest of this book, we’ll refer to the scene’s nodes either with their custom
    labeled names or node types.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在蛇场景中，**MeshInstance** 节点已被重命名为 **Snake**，这在你有大量网格实例时很有用。Godot 中没有内置的 *Snake*
    节点类型，但说 **Snake** 节点是可以的，即使它属于 **MeshInstance** 类型。**Inspector** 面板会确定类型并只列出相关属性。因此，在这本书的其余部分，我们将使用场景的节点名称或节点类型进行引用。
- en: We’ll soon analyze the role of **AnimationPlayer**, but let’s finish looking
    at the **MeshInstance** and **Skeleton** child nodes first.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们很快将分析 **AnimationPlayer** 的作用，但让我们先完成对 **MeshInstance** 和 **Skeleton** 子节点的查看。
- en: MeshInstance and Skeleton
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MeshInstance 和 Skeleton
- en: We made an analogy between the **MeshInstance** and **Sprite** nodes in the
    *Making a scene!* section, stating that they are responsible for holding visual
    elements in 3D and 2D spaces, respectively. So, that leaves us with the **Skeleton**
    node.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 *制作场景* 部分的 **MeshInstance** 和 **Sprite** 节点之间做了一个类比，指出它们分别负责在 3D 和 2D 空间中持有视觉元素。因此，这就留下了
    **Skeleton** 节点。
- en: 'In [*Chapter 5*](B17473_05.xhtml#_idTextAnchor075), *Setting Up Animation and
    Rigging*, we used bones and attached them so that we could animate the snake.
    When the `Snake.glb` file was imported, the bones were imported as a single unit.
    In other words, Godot grouped all your bones into a node of the **Skeleton** type.
    However, you can still access each bone if you wish:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第五章*](B17473_05.xhtml#_idTextAnchor075) *设置动画和绑定* 中，我们使用了骨骼并将它们绑定起来，以便我们可以对蛇进行动画处理。当
    `Snake.glb` 文件被导入时，骨骼作为一个整体被导入。换句话说，Godot 将你所有的骨骼组合成一个 **Skeleton** 类型的节点。然而，如果你愿意，你仍然可以访问每个骨骼：
- en: Select the **Skeleton** node.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **Skeleton** 节点。
- en: Expand the **Bones** section in the **Inspector** panel.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Inspector** 面板中展开 **Bones** 部分。
- en: Expand some of the entries, especially **9** and **10**.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开一些条目，特别是 **9** 和 **10**。
- en: Do you recognize the names? These are the names you picked for the bones in
    Blender. Look at how much preparation we require to construct a skeleton. The
    rigging process to create all this, however complicated it may have looked initially,
    is still far too easy to do in Blender compared to Godot.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 你能认出这些名字吗？这些是你为 Blender 中的骨骼所取的名字。看看我们构建骨骼需要做多少准备工作。创建所有这些的绑定过程，尽管一开始看起来可能很复杂，但在
    Blender 中做起来仍然比在 Godot 中要简单得多。
- en: Now, let’s turn our attention to the last node type in the scene to further
    appreciate why doing the animation in Blender was also a superior and preferred
    move. Enter **AnimationPlayer**.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将注意力转向场景中的最后一个节点类型，以进一步理解为什么在 Blender 中进行动画也是一个更优越和更受欢迎的选择。进入 **AnimationPlayer**。
- en: AnimationPlayer
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AnimationPlayer
- en: 'The last node in the **Snake.tscn** scene is **AnimationPlayer**. The color
    of this node is neither blue nor red. This means you can use it in both 2D and
    3D contexts. You may already be familiar with this node if you have been building
    2D games. If that’s the case, then you know that you need to place keyframes in
    the player’s timeline to mark the changing points, just like we did in Blender.
    Regardless of whether you have experience with **AnimationPlayer** or if this
    is the first time you are tackling it, you’ll notice that creating so many keyframes,
    as shown in the following screenshot, is a lot of work:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**Snake.tscn** 场景中的最后一个节点是 **AnimationPlayer**。这个节点的颜色既不是蓝色也不是红色。这意味着你可以在2D和3D环境中都使用它。如果你已经构建过2D游戏，你可能已经熟悉这个节点了。如果是这样，那么你知道你需要在你玩家的时间轴上放置关键帧来标记变化点，就像我们在Blender中做的那样。无论你是否熟悉
    **AnimationPlayer**，或者这是你第一次处理它，你都会注意到，像下面的截图所示，创建这么多关键帧是一项大量工作：'
- en: '![Figure 7.6: You worked smart, not hard, to create all those keyframes in
    AnimationPlayer ](img/Figure_7.6_B17473.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图7.6：你聪明地而不是辛苦地创建了AnimationPlayer中的所有这些关键帧](img/Figure_7.6_B17473.jpg)'
- en: 'Figure 7.6: You worked smart, not hard, to create all those keyframes in AnimationPlayer'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.6：你聪明地而不是辛苦地创建了AnimationPlayer中的所有这些关键帧
- en: Each orange diamond in the preceding screenshot is a keyframe and marks an important
    turning point in the animation’s life cycle. This is the timeline for the **Attack**
    action we created in Blender. You can see it in a dropdown in the top section.
    This is the main reason why we opted for Blender to create all this for us – we
    were only concerned with the major events, not with what exactly happened in between
    major events. Godot and Blender worked together to fill in the details. Also,
    updating your animation in Blender is still a much better idea than fiddling with
    those diamonds.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中的每个橙色菱形都是一个关键帧，标志着动画生命周期中的重要转折点。这是我们在Blender中创建的 **Attack** 动作的时间轴。你可以在顶部的下拉菜单中看到它。这是我们选择Blender为我们做所有这些的主要原因——我们只关心主要事件，而不是主要事件之间具体发生了什么。Godot和Blender一起填补了细节。此外，在Blender中更新你的动画仍然比摆弄那些菱形要好得多。
- en: As you can see, animations and actions are automatically imported, recognized,
    and organized in **AnimationPlayer** for us. Despite how easy this was, there
    is currently a bug in Godot regarding the animation imports. So, we need to do
    something about it that may not be necessary in the future. We’ll discuss what
    the problem is and present a solution here. However, to follow the discussion
    and updates on the problem, you can go to [https://github.com/godotengine/godot/issues/34394](https://github.com/godotengine/godot/issues/34394).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，动画和动作会自动导入、识别和组织到 **AnimationPlayer** 中。尽管这很简单，但Godot在动画导入方面目前存在一个bug。因此，我们需要做一些可能在未来不再必要的事情。我们将在下面讨论这个问题并提出解决方案。然而，要跟进这个问题的讨论和更新，你可以访问
    [https://github.com/godotengine/godot/issues/34394](https://github.com/godotengine/godot/issues/34394)。
- en: On the right-hand side of the **Animation** panel, there is an icon that looks
    like a recycling symbol. At the time of writing, that loop button, which is supposed
    to play an action indefinitely, only works while you are editing a scene. So,
    even though you can toggle the loop button on, the action will play only once
    when you launch the game. Hopefully, soon, newer Godot versions will fix this
    looping issue. Still, it makes sense to present a workaround for the time being.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **Animation** 面板的右侧，有一个看起来像回收符号的图标。在撰写本文时，那个循环按钮，本应无限期地播放动作，只有在编辑场景时才起作用。所以，即使你可以切换循环按钮，当你在游戏中启动时，动作也只会播放一次。希望不久，更新的Godot版本将修复这个循环问题。不过，目前提出一个临时解决方案是有意义的。
- en: Separating actions
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分离动作
- en: Luckily, there is a solution to the problem we’ve just presented. We’ll instruct
    Godot to separate the actions into separate files, similar to the way materials
    for a model are kept in the filesystem.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，我们刚刚提出的问题有解决方案。我们将指导Godot将动作分离到单独的文件中，类似于模型材料在文件系统中保持的方式。
- en: 'The default behavior for keeping animations for a model is to store them inside
    its file. In this case, the `Snake.glb` entity is holding all its animations.
    To extract these animations, follow these steps:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 对于保持模型动画的默认行为是将它们存储在其文件内部。在这种情况下，`Snake.glb` 实体包含了它所有的动画。要提取这些动画，请按照以下步骤操作：
- en: Select `Snake.glb` in the **FileSystem** panel.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **FileSystem** 面板中选择 `Snake.glb`。
- en: Switch on the **Import** panel and scroll down to the **Animation** section.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 **Import** 面板并向下滚动到 **Animation** 部分。
- en: Choose **Files (.anim)** in the **Storage** drop-down options.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**存储**下拉选项中选择**文件 (.anim)**。
- en: Click the **Reimport** button.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**重新导入**按钮。
- en: 'The following screenshot shows the steps we have taken so far:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了我们已经采取的步骤：
- en: '![Figure 7.7 – The import settings for the Snake.glb file ](img/Figure_7.7_B17473.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图7.7 – Snake.glb文件的导入设置](img/Figure_7.7_B17473.jpg)'
- en: Figure 7.7 – The import settings for the Snake.glb file
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.7 – Snake.glb文件的导入设置
- en: 'This will extract the actions into the filesystem. In the end, you’ll have
    two more files in your project:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把动作提取到文件系统中。最终，您项目中将多出两个文件：
- en: '`Attack.anim`'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Attack.anim`'
- en: '`Idle.anim`'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Idle.anim`'
- en: 'These are the actions you defined in Blender a while ago. Also, similarly named
    actions are listed in Godot’s **AnimationPlayer** dropdown. For example, *Figure
    7.6* shows the **Attack** action selected. There is one more step left for us
    to fix the looping issue – it’s to reintroduce these actions we’ve just separated
    back to **AnimationPlayer**, even though it’s already listing them. To achieve
    this, follow these steps:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是您之前在Blender中定义的动作。同样命名的动作也列在Godot的**AnimationPlayer**下拉菜单中。例如，*图7.6*显示了选中的**Attack**动作。我们还需要一个步骤来解决循环问题——那就是将这些我们刚刚分离的动作重新引入到**AnimationPlayer**中，即使它已经列出了这些动作。为了实现这一点，请按照以下步骤操作：
- en: Switch the **Scene** panel on.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**场景**面板。
- en: Select the **AnimationPlayer** node in the scene structure.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在场景结构中选择**AnimationPlayer**节点。
- en: Click the **Animation** button in the **Animation** panel (the button to the
    left of the **Action** dropdown).
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**动画**面板中点击**动画**按钮（位于**动作**下拉菜单左侧的按钮）。
- en: Choose `Attack.anim` from the **Open a File** pop-up menu.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**打开文件**弹出菜单中选择`Attack.anim`。
- en: Repeat *Step 4* to load `Idle.anim`.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复**步骤4**以加载`Idle.anim`。
- en: 'This will replace the existing actions with the actions coming from your filesystem.
    The following screenshot shows where you can find all these names since there
    have been a lot of similar words. Here, the **Animation** button has already been
    pressed and is displaying the available commands:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这将用来自文件系统的动作替换现有的动作。以下截图显示了您可以在哪里找到所有这些名称，因为有很多类似的单词。在这里，**动画**按钮已经被按下，并显示了可用的命令：
- en: '![Figure 7.8 – The Animation panel’s menu for loading, saving, and doing many
    other things ](img/Figure_7.8_B17473.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![图7.8 – 动画面板的加载、保存和其他操作菜单](img/Figure_7.8_B17473.jpg)'
- en: Figure 7.8 – The Animation panel’s menu for loading, saving, and doing many
    other things
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.8 – 动画面板的加载、保存和其他操作菜单
- en: In the future, hopefully, you won’t have to separate and reimport your actions
    with newer versions of Godot. For the time being, this will work, but we won’t
    see the effects of this until we get to the later chapters of this book, where
    we will trigger these actions.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在未来，希望您不需要使用Godot的新版本分离和重新导入动作。目前，这将会工作，但我们不会看到效果，直到我们到达这本书的后期章节，在那里我们将触发这些动作。
- en: Summary
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Since we took care of exporting Blender assets in the previous chapter, it was
    time to learn how to import these into Godot. This is what we covered in this
    chapter.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在上一章中处理了Blender资产的导出，现在是时候学习如何将这些导入到Godot中。这就是本章所涵盖的内容。
- en: First, we learned that once a glTF file is part of a Godot project, Godot automatically
    takes care of things such as separating materials. That being said, since we’d
    most likely keep creating more instances of 3D assets, we looked into creating
    dedicated scenes out of glTF files. Moreover, we learned how to make modifications
    to our models in Blender and get the scenes using these models updated back in
    Godot.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们了解到一旦glTF文件成为Godot项目的一部分，Godot会自动处理诸如分离材质等问题。换句话说，由于我们很可能会继续创建更多3D资产实例，我们研究了如何从glTF文件中创建专用场景。此外，我们还学习了如何在Blender中对我们的模型进行修改，并使用这些模型在Godot中更新场景。
- en: Then, we covered materials, which is an enmeshed topic within the model workflow,
    and discussed different ways of labeling the materials, and even keeping the models
    in separate folders to prevent any material file from overlapping. You decided
    what works best for you since this kind of thing might be team-size or project
    specific.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们讨论了材质，这是模型工作流程中的一个复杂话题，并讨论了不同的材质标记方法，甚至将模型保存在不同的文件夹中以防止任何材质文件重叠。您决定哪种方法最适合您，因为这类事情可能是团队规模或项目特定的。
- en: Finally, we tackled how easily animations can be imported. Creating a scene
    out of a model took care of all the scaffolding. Even though we’ll learn how to
    trigger animations in later chapters, especially for looped animations, we presented
    a problem that may occur. A workaround was presented, and we hope you won’t need
    this in the future.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们探讨了动画导入的简便性。从模型创建场景已经处理了所有框架。尽管我们将在后面的章节中学习如何触发动画，特别是循环动画，但我们提出了一个可能发生的问题。我们提供了一个解决方案，并希望你在未来不需要使用它。
- en: This was your first chapter on Godot and you’re now officially using Godot Engine.
    Importing 3D assets into Godot is an essential operation, and we hope you have
    a seamless back-and-forth between Blender and Godot for your games.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你关于 Godot 的第一章节，你现在正式开始使用 Godot 引擎。将 3D 资源导入到 Godot 是一个基本操作，我们希望你在 Blender
    和 Godot 之间进行游戏开发时能够实现无缝的交互。
- en: In the next chapter, we’ll still work on a standalone topic, *Adding Sound Assets*,
    to keep things simple. By the end of the next chapter, we’ll have covered the
    basics of setting up a project structure, which means we can focus on building
    the game after that.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们仍将专注于一个独立主题，*添加音效资源*，以保持内容简单。到下一章结束时，我们将涵盖设置项目结构的基础知识，这意味着我们可以在之后专注于构建游戏。
- en: Further reading
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: You’ve already interacted with the **Import** panel of Godot. That area has
    a lot of settings that would require us to write a chapter to investigate all
    possible combinations. The default settings work most of the time but there is
    a **Preset** button in the top-right corner that lists the most used combinations.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经与 Godot 的**导入**面板进行了交互。该区域有许多设置，如果我们要调查所有可能的组合，可能需要写一个章节。默认设置在大多数情况下都适用，但在右上角有一个**预设**按钮，列出了最常用的组合。
- en: 'Since the needs of a project, and thus the import requirements of a model,
    won’t be clear ahead of time, we leave the task of discovering what those options
    entail to you. That being said, here is the official resource that can guide you
    if you want to get more information: [https://docs.godotengine.org/en/3.4/tutorials/assets_pipeline/importing_scenes.xhtml](https://docs.godotengine.org/en/3.4/tutorials/assets_pipeline/importing_scenes.xhtml).'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 由于项目的需求以及因此模型导入的要求在事先可能并不明确，我们将发现这些选项包含的任务留给你来完成。话虽如此，这里有一个官方资源，如果你想要获取更多信息，可以参考：[https://docs.godotengine.org/en/3.4/tutorials/assets_pipeline/importing_scenes.xhtml](https://docs.godotengine.org/en/3.4/tutorials/assets_pipeline/importing_scenes.xhtml)。
- en: 'Similarly, you may want to import images instead of 3D assets. This is necessary
    when you are building UI elements for a game. We’re mostly covering the 3D workflow
    throughout this book, so we won’t emphasize the import settings for 2D assets.
    Nevertheless, if you want to be informed before we tackle the UI topics, here
    is the official URL: [https://docs.godotengine.org/en/3.4/tutorials/assets_pipeline/importing_images.xhtml](https://docs.godotengine.org/en/3.4/tutorials/assets_pipeline/importing_images.xhtml).'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，你可能想要导入图像而不是 3D 资源。当你正在为游戏构建 UI 元素时，这是必要的。我们在这本书中主要涵盖 3D 工作流程，因此我们不会强调 2D
    资源的导入设置。尽管如此，如果你想在处理 UI 主题之前了解相关信息，这里有一个官方网址：[https://docs.godotengine.org/en/3.4/tutorials/assets_pipeline/importing_images.xhtml](https://docs.godotengine.org/en/3.4/tutorials/assets_pipeline/importing_images.xhtml)。
