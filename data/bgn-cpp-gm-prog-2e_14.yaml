- en: '*Chapter 13*: Sound Effects, File I/O, and Finishing the Game'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 13 章*：音效、文件 I/O 和完成游戏'
- en: We are nearly there. This short chapter will demonstrate how we can easily manipulate
    files stored on the hard drive using the C++ standard library, and we will also
    add sound effects. Of course, we know how to add sound effects, but we will discuss
    exactly where in the code the calls to the `play` function will go. We will also
    tie up a few loose ends to make the game complete.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们即将完成。这一简短的章节将展示我们如何使用 C++ 标准库轻松地操作硬盘上存储的文件，我们还将添加音效。当然，我们知道如何添加音效，但我们将讨论代码中
    `play` 函数调用的确切位置。我们还将解决一些悬而未决的问题，以使游戏完整。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Saving and loading the hi-score using file input and file output
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用文件输入和文件输出保存和加载最高分
- en: Adding sound effects
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加音效
- en: Allowing the player to level up
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许玩家升级
- en: Creating multiple never-ending waves
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建多个永无止境的波次
- en: Saving and loading the high score
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保存和加载最高分
- en: File `fstream`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 文件 `fstream`。
- en: 'First, we include `fstream` in the same way we included `sstream`:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们以与包含 `sstream` 相同的方式包含 `fstream`：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now, add a new folder in the `ZombieArena` folder called `gamedata`. Next, right-click
    in this folder and create a new file called `scores.txt`. It is in this file that
    we will save the player's high score. You can easily open the file and add a score
    to it. If you do, make sure it is quite a low score so that we can easily test
    whether beating that score results in the new score being added. Be sure to close
    the file once you are done with it or the game will not be able to access it.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在 `ZombieArena` 文件夹中添加一个新的文件夹，命名为 `gamedata`。然后，在此文件夹中右键单击并创建一个名为 `scores.txt`
    的新文件。我们将在这个文件中保存玩家的最高分。你可以轻松地打开文件并添加分数。如果你这样做，请确保分数相当低，这样我们就可以轻松地测试击败这个分数是否会添加新的分数。完成操作后，务必关闭文件，否则游戏将无法访问它。
- en: In the following code, we will create an `ifstream` object called `inputFile`
    and send the folder and file we just created as a parameter to its constructor.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，我们将创建一个名为 `inputFile` 的 `ifstream` 对象，并将我们刚刚创建的文件夹和文件作为参数传递给其构造函数。
- en: '`if(inputFile.is_open())` checks that the file exists and is ready to read
    from. We then put the contents of the file into `hiScore` and close the file.
    Add the following highlighted code:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`if(inputFile.is_open())` 检查文件是否存在且准备好读取。然后我们将文件内容放入 `hiScore` 并关闭文件。添加以下突出显示的代码：'
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, we can handle saving a potentially new high score. Within the block that
    handles the player''s health being less than or equal to zero, we need to create
    an `ofstream` object called `outputFile`, write the value of `hiScore` to the
    text file, and then close the file, like so:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以处理保存可能的新最高分。在处理玩家健康值小于或等于零的代码块中，我们需要创建一个名为 `outputFile` 的 `ofstream`
    对象，将 `hiScore` 的值写入文本文件，然后关闭文件，如下所示：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You can play the game and your hi-score will be saved. Quit the game and notice
    that your hi-score is still there if you play it again.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以玩游戏，你的最高分将被保存。退出游戏后，如果你再次玩游戏，会发现你的最高分仍然在那里。
- en: Let's make some noise.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们制造一些噪音。
- en: Preparing sound effects
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备音效
- en: In this section, we will create all the `SoundBuffer` and `Sound` objects that
    we need to add a range of sound effects to the game.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建所有需要的 `SoundBuffer` 和 `Sound` 对象，以便为游戏添加一系列音效。
- en: 'Start by adding the required SFML `#include` statements:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，添加所需的 SFML `#include` 语句：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, go ahead and add the seven `SoundBuffer` and `Sound` objects that load
    and prepare the seven sound files that we prepared in [*Chapter 8*](B14278_08_Final_AG_ePub.xhtml#_idTextAnchor183)*,
    SFML Views – Starting the Zombie Shooter Game*:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，继续添加七个 `SoundBuffer` 和 `Sound` 对象，这些对象将加载和准备我们在 [*第 8 章*](B14278_08_Final_AG_ePub.xhtml#_idTextAnchor183)*，SFML
    视图 – 开始僵尸射击游戏* 中准备的七个音效文件：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now, the seven sound effects are ready to play. We just need to work out where
    in our code each of the calls to the `play` function will go.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，七个音效已经准备好播放。我们只需要确定代码中每个 `play` 函数调用的确切位置。
- en: Leveling up
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 升级
- en: The following code we will add allows the player to level up between waves.
    It is because of the work we have already done that this is straightforward to
    achieve.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要添加的代码允许玩家在波次之间升级。正是因为我们已经完成的工作，所以这很容易实现。
- en: 'Add the following highlighted code to the `LEVELING_UP` state where we handle
    player input:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下突出显示的代码添加到处理玩家输入的 `LEVELING_UP` 状态中：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The player can now level up each time a wave of zombies is cleared. We can't,
    however, increase the number of zombies or the size of the level just yet.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 每当玩家清空一波僵尸时，他们都可以升级。然而，我们目前还不能增加僵尸的数量或升级的大小。
- en: In the next part of the `LEVELING_UP` state, right after the code we have just
    added, amend the code that runs when the state changes from `LEVELING_UP` to `PLAYING`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们刚刚添加的代码之后，在`LEVELING_UP`状态的下一部分，修改当状态从`LEVELING_UP`变为`PLAYING`时运行的代码。
- en: Here is the code in full. I have highlighted the lines that are either new or
    have been slightly amended.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是完整的代码。我已经突出显示了新添加或略有修改的行。
- en: 'Add or amend the following highlighted code:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 添加或修改以下突出显示的代码：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The previous code starts by incrementing the `wave` variable. Then, the code
    is amended to make the number of zombies and size of the arena relative to the
    new value of `wave`. Finally, we add the call to `powerup.play()` to play the
    leveling up sound effect.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码首先增加`wave`变量。然后，代码被修改以使僵尸的数量和竞技场的大小与`wave`的新值成比例。最后，我们添加对`powerup.play()`的调用以播放升级音效。
- en: Restarting the game
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新开始游戏
- en: 'We already determine the size of the arena and the number of zombies by the
    value of the `wave` variable. We must also reset the ammo and gun-related variables,
    as well as setting `wave` and `score` to zero at the start of each new game. Find
    the following code in the event-handling section of the game loop and add the
    following highlighted code:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经通过`wave`变量的值确定了竞技场的大小和僵尸的数量。我们还必须重置弹药和枪相关的变量，以及在每场新游戏开始时将`wave`和`score`设置为零。在游戏循环的事件处理部分找到以下代码，并添加以下突出显示的代码：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now, we can play the game, the player can get even more powerful, and the zombies
    will get ever more numerous within an arena of increasing size—until they die.
    Then, the game starts all over again.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以玩游戏了，玩家可以变得更加强大，僵尸将在不断扩大的竞技场中越来越多——直到它们死亡。然后，游戏重新开始。
- en: Playing the rest of the sounds
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 播放其余的声音
- en: Now, we will add the rest of the calls to the `play` function. We will deal
    with each of them individually, as locating exactly where they go is key to playing
    them at the right moment.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将把其余的调用添加到`play`函数中。我们将逐个处理它们，因为精确地确定它们的位置对于在正确的时间播放它们至关重要。
- en: Adding sound effects while the player is reloading
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在玩家装弹时添加音效
- en: 'Add the following highlighted code in three places to play the appropriate
    `reload` or `reloadFailed` sound when the player presses the *R* key to attempt
    to reload their gun:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下三个地方添加以下突出显示的代码，以便在玩家按下*R*键尝试装弹时播放适当的`reload`或`reloadFailed`声音：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The player will now get an audible response when they reload or attempt to reload.
    Let's move on to playing a shooting sound.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当玩家装弹或尝试装弹时，他们会得到一个可听见的响应。让我们继续播放射击声音。
- en: Making a shooting sound
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 制作射击声音
- en: 'Add the following highlighted call to `shoot.play()` near the end of the code
    that handles the player clicking the left mouse button:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理玩家点击左鼠标按钮的代码的末尾添加以下突出显示的`shoot.play()`调用：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The game will now play a satisfying shooting sound. Next, we will play a sound
    when the player is hit by a zombie.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏现在将播放令人满意的射击声音。接下来，我们将播放玩家被僵尸击中的声音。
- en: Playing a sound when the player is hit
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 当玩家被击中时播放声音
- en: In this following code, we wrap the call to `hit.play` in a test to see if the
    `player.hit` function returns true. Remember that the `player.hit` function tests
    to see if a hit has been recorded in the previous 100 milliseconds. This will
    have the effect of playing a fast-repeating thud sound, but not so fast that the
    sound blurs into one noise.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，我们将`hit.play`调用包裹在一个测试中，以查看`player.hit`函数是否返回true。请记住，`player.hit`函数检查前100毫秒内是否有击中记录。这将产生快速重复的咚咚声，但不会快到声音模糊成一个噪音。
- en: 'Add the call to `hit.play`, as highlighted in the following code:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 添加以下代码中突出显示的`hit.play`调用：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The player will hear an ominous thudding sound when a zombie touches them, and
    this sound will repeat around five times per second if the zombie continues touching
    them. The logic for this is contained in the `hit` function of the `Player` class.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当僵尸接触到玩家时，玩家会听到一个不祥的咚咚声，如果僵尸继续接触玩家，这个声音每秒会重复大约五次。这个逻辑包含在`Player`类的`hit`函数中。
- en: Playing a sound when getting a pickup
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在拾取物品时播放声音
- en: When the player picks up a health pickup, we will play the regular pickup sound.
    However, when the player gets an ammo pickup, we will play the reload sound effect.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当玩家拾取生命恢复物品时，我们将播放常规拾取声音。然而，当玩家拾取弹药时，我们将播放装弹声音效。
- en: 'Add the two calls to play sounds within the appropriate collision detection
    code:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在适当的碰撞检测代码中添加播放声音的两个调用：
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Making a splat sound when a zombie is shot
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 当僵尸被击中时发出噗嗤声
- en: 'Add a call to `splat.play` at the end of the section of code that detects a
    bullet colliding with a zombie:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在检测子弹与僵尸碰撞的代码段末尾添加对 `splat.play` 的调用：
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You can now play the completed game and watch the number of zombies and the
    arena increase each wave. Choose your level-ups carefully:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以播放完成的游戏，并观察每一波僵尸和竞技场数量的增加。仔细选择你的等级提升：
- en: '![](img/B14278_13_01.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B14278_13_01.jpg)'
- en: Congratulations!
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！
- en: Summary
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We've finished the Zombie Arena game. It has been quite a journey. We have learned
    a whole bunch of C++ fundamentals, such as references, pointers, OOP, and classes.
    In addition, we have used SFML to manage cameras (views), vertex arrays, and collision
    detection. We learned how to use sprite sheets to reduce the number of calls to
    `window.draw` and speed up the frame rate. Using C++ pointers, the STL, and a
    little bit of OOP, we built a singleton class to manage our textures. In the next
    project, we will extend this idea to manage all of our game's assets.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了僵尸竞技场游戏。这是一段相当漫长的旅程。我们学习了许多 C++ 基础知识，例如引用、指针、面向对象编程和类。此外，我们还使用了 SFML
    来管理摄像机（视图）、顶点数组和碰撞检测。我们学习了如何使用精灵图来减少对 `window.draw` 的调用次数并提高帧率。使用 C++ 指针、STL 和一点面向对象编程，我们构建了一个单例类来管理我们的纹理。在下一个项目中，我们将扩展这个想法来管理我们游戏的所有资产。
- en: Coming up in the penultimate project of this book, we will discover particle
    effects, directional sound, and split-screen co-op gaming. In C++, we will encounter
    inheritance, polymorphism, and a few more new concepts as well.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的倒数第二个项目中，我们将发现粒子效果、方向性声音和分屏合作游戏。在 C++ 中，我们将遇到继承、多态以及一些新的概念。
- en: FAQ
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见问题解答
- en: 'Here are some questions that might be on your mind:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些可能出现在你脑海中的问题：
- en: Q) Despite using classes, I am finding that the code is getting very long and
    unmanageable again.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Q) 尽管使用了类，但我发现代码变得越来越长且难以管理。
- en: A) One of the biggest issues is the structure of our code. As we learn more
    C++, we will also learn ways to make the code more manageable and generally less
    lengthy. We will do so in the next project and the final project too. By the end
    of this book, you will know about a number of strategies that you can use to manage
    your code.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: A) 最大的问题之一是我们代码的结构。随着我们学习更多的 C++，我们也会学习如何使代码更易于管理，并且通常更短。我们将在下一个项目和最终项目中这样做。到本书结束时，你将了解一些你可以用来管理你代码的策略。
- en: Q) The sound effects seem a bit flat and unrealistic. How can they be improved?
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Q) 声音效果听起来有点平淡和不真实。如何改进它们？
- en: A) One way to significantly improve the feeling the player gets from sound is
    to make the sound directional, as well as changing the volume based on the distance
    of the sound source to the player character. We will use SFML's advanced sound
    features in the next project.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: A) 一种显著提高玩家从声音中获得的感觉的方法是使声音具有方向性，并根据声音源与玩家角色的距离改变音量。我们将在下一个项目中使用 SFML 的高级声音功能。
