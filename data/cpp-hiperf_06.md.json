["```cpp\nstruct Student {\n\u00a0\u00a0int year_{};\n\u00a0\u00a0int score_{};\n\u00a0\u00a0std::string name_{};\n\u00a0\u00a0// ...\n}; \n```", "```cpp\nauto get_max_score(const std::vector<Student>& students, int year) {\n  auto by_year = [=](const auto& s) { return s.year_ == year; }; \n  // The student list needs to be copied in\n  // order to filter on the year\n  auto v = std::vector<Student>{};\n  std::ranges::copy_if(students, std::back_inserter(v), by_year);\n  auto it = std::ranges::max_element(v, std::less{}, &Student::score_);\n  return it != v.end() ? it->score_ : 0; \n} \n```", "```cpp\nauto students = std::vector<Student>{\n  {3, 120, \"Niki\"},\n\u00a0\u00a0{2, 140, \"Karo\"},\n\u00a0\u00a0{3, 190, \"Sirius\"},\n\u00a0\u00a0{2, 110, \"Rani\"},\n   // ...\n};\nauto score = get_max_score(students, 2);\nstd::cout << score << '\\n'; \n// Prints 140 \n```", "```cpp\nauto get_max_score(const std::vector<Student>& students, int year) {\n\u00a0\u00a0auto max_score = 0;\n\u00a0\u00a0for (const auto& student : students) {\n\u00a0\u00a0\u00a0\u00a0if (student.year_ == year) {\n\u00a0\u00a0\u00a0\u00a0\u00a0 max_score = std::max(max_score, student.score_);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0}\n\u00a0\u00a0return max_score;\n} \n```", "```cpp\nauto max_value(auto&& range) {\n  const auto it = std::ranges::max_element(range);\n  return it != range.end() ? *it : 0;\n}\nauto get_max_score(const std::vector<Student>& students, int year) {\n  const auto by_year = [=](auto&& s) { return s.year_ == year; };\n  return max_value(students \n    | std::views::filter(by_year)\n    | std::views::transform(&Student::score_));\n} \n```", "```cpp\nauto numbers = std::vector{1, 2, 3, 4};\nauto square = [](auto v) {\u00a0 return v * v; };\nauto squared_view = std::views::transform(numbers, square);\nfor (auto s : squared_view) { \u00a0// The square lambda is invoked here\n\u00a0\u00a0std::cout << s << \" \";\n}\n// Output: 1 4 9 16 \n```", "```cpp\nauto v = std::vector{4, 5, 6, 7, 6, 5, 4};\nauto odd_view = \n  std::views::filter(v,\u00a0[](auto i){ return (i % 2) == 1; });\nfor (auto odd_number : odd_view) {\n\u00a0\u00a0std::cout << odd_number << \" \";\n}\n// Output: 5 7 5 \n```", "```cpp\nauto list_of_lists = std::vector<std::vector<int>> {\n\u00a0\u00a0{1, 2},\n\u00a0\u00a0{3, 4, 5},\n\u00a0\u00a0{5},\n\u00a0\u00a0{4, 3, 2, 1}\n};\nauto flattened_view = std::views::join(list_of_lists);\nfor (auto v : flattened_view)\u00a0\n\u00a0\u00a0std::cout << v << \" \";\n// Output: 1 2 3 4 5 5 4 3 2 1\n\nauto max_value = *std::ranges::max_element(flattened_view);\n// max_value is 5 \n```", "```cpp\nauto get_max_score(const std::vector<Student>& s, int year) {\n  auto by_year = [=](const auto& s) { return s.year_ == year; };\n\n  auto v1 = std::ranges::ref_view{s}; // Wrap container in a view\n  auto v2 = std::ranges::filter_view{v1, by_year};\n  auto v3 = std::ranges::transform_view{v2, &Student::score_};\n  auto it = std::ranges::max_element(v3);\n\u00a0\u00a0return it != v3.end() ? *it : 0;\n} \n```", "```cpp\nusing namespace std::ranges; // _view classes live in std::ranges\nauto scores = \n  transform_view{filter_view{ref_view{s}, by_year},\n    &Student::score_}; \n```", "```cpp\nusing namespace std::views; // range adaptors live in std::views\nauto scores = s | filter(by_year) | transform(&Student::score_); \n```", "```cpp\nusing namespace std::views;\nauto scores = transform(filter(s, by_year), &Student::score_); \n```", "```cpp\nint to std::string:\n```", "```cpp\nauto ints = std::list{2, 3, 4, 2, 1};\nauto strings = ints \n  | std::views::transform([](auto i) { return std::to_string(i); }); \n```", "```cpp\nauto ints = std::list{2, 3, 4, 2, 1};\nauto r = ints \n  | std::views::transform([](auto i) { return std::to_string(i); }); \n```", "```cpp\nauto vec = std::vector<std::string>{};\nstd::ranges::copy(r, std::back_inserter(vec)); \n```", "```cpp\nauto to_vector(auto&& r) {\n  std::vector<std::ranges::range_value_t<decltype(r)>> v;\n  if constexpr(std::ranges::sized_range<decltype(r)>) {\n    v.reserve(std::ranges::size(r));\n  }\n  std::ranges::copy(r, std::back_inserter(v));\n  return v;\n} \nhttps://timur.audio/how-to-make-a-container-from-a-c20-range, which is well worth a read. \n```", "```cpp\nauto ints = std::list{2, 3, 4, 2, 1};\nauto r = ints \n  | std::views::transform([](auto i) { return std::to_string(i); });\nauto strings = to_vector(r); \n// strings is now a std::vector<std::string> \n```", "```cpp\nauto vec = std::vector{4, 2, 7, 1, 2, 6, 1, 5};\nauto is_odd = [](auto i) { return i % 2 == 1; };\nauto odd_numbers = vec | std::views::filter(is_odd); \n```", "```cpp\nstd::ranges::sort(odd_numbers); // Doesn't compile \n```", "```cpp\nauto v = to_vector(odd_numbers);\nstd::ranges::sort(v);\n// v is now 1, 1, 5, 7 \n```", "```cpp\nauto vec = std::vector{4, 2, 7, 1, 2, 6, 1, 5};\nauto first_half = vec | std::views::take(vec.size() / 2);\nstd::ranges::sort(first_half);\n// vec is now 1, 2, 4, 7, 2, 6, 1, 5 \n```", "```cpp\n-2, -1, 0, and 1:\n```", "```cpp\nfor (auto i : std::views::iota(-2, 2)) {\n  std::cout << i << ' ';\n}\n// Prints -2 -1 0 1 \n```", "```cpp\nauto csv = std::string{\"10,11,12\"};\nauto digits = csv \n  | std::views::split(',')      // [ [1, 0], [1, 1], [1, 2] ]\n  | std::views::join;           // [ 1, 0, 1, 1, 1, 2 ]\nfor (auto i : digits) {   std::cout << i; }\n// Prints 101112 \n```", "```cpp\nauto vec = std::vector{1, 2, 3, 4, 5, 4, 3, 2, 1};\n\u00a0auto v = vec\n\u00a0\u00a0 | std::views::drop_while([](auto i) { return i < 5; })\n\u00a0\u00a0\u00a0| std::views::take(3);\n\u00a0for (auto i : v) { std::cout << i << \" \"; }\n // Prints 5 4 3 \n```", "```cpp\n1.4142 1.618 2.71828 3.14159 6.283 ... \n```", "```cpp\nauto ifs = std::ifstream(\"numbers.txt\");\nfor (auto f : std::ranges::istream_view<float>(ifs)) {\n\u00a0\u00a0std::cout << f << '\\n';\n}\nifs.close(); \n```", "```cpp\nauto reset(std::span<int> values, int n) {\n  for (auto& i : std::ranges::take_view{values, n}) {\n\u00a0\u00a0\u00a0\u00a0i = int{};\n\u00a0\u00a0}\n} \n```", "```cpp\nint a[]{33, 44, 55, 66, 77};\nreset(a, 3); \n// a is now [0, 0, 0, 66, 77]\nauto v = std::vector{33, 44, 55, 66, 77};\nreset(v, 2); \n// v is now [0, 0, 55, 66, 77] \n```", "```cpp\nauto split(std::string_view s, char delim) {\n  const auto to_string = [](auto&& r) -> std::string {\n    const auto cv = std::ranges::common_view{r};\n    return {cv.begin(), cv.end()};\n  };\n  return to_vector(std::ranges::split_view{s, delim} \n    | std::views::transform(to_string));\n} \n```", "```cpp\n const char* c_str = \"ABC,DEF,GHI\";  // C style string\n  const auto v1 = split(c_str, ',');  // std::vector<std::string>\n  const auto s = std::string{\"ABC,DEF,GHI\"};\n  const auto v2 = split(s, ',');      // std::vector<std::string>\n  assert(v1 == v2);                   // true \n```"]