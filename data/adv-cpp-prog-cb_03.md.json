["```cpp\n> sudo apt-get install build-essential git cmake \n```", "```cpp\n> sudo apt-get install build-essential git\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter03\n```", "```cpp\n> cmake .\n> make recipe01_examples\n```", "```cpp\n> ./recipe01_example01\nThe answer is: 42\n\n> ./recipe01_example02\nThe answer is: 42\n\n> ./recipe01_example03\nThe answer is: 42\n\n> ./recipe01_example04\nThe answer is: 42\n```", "```cpp\nclass the_answer\n{\n    int m_answer{42};\n\npublic:\n\n    ~the_answer()\n    {\n        std::cout << \"The answer is: \" << m_answer << '\\n';\n    }\n};\n```", "```cpp\n~the_answer() = default;\n\nthe_answer(the_answer &&) noexcept = default;\nthe_answer &operator=(the_answer &&) noexcept = default;\n\nthe_answer(const the_answer &) = default;\nthe_answer &operator=(const the_answer &) = default;\n```", "```cpp\nclass the_answer\n{\n    int m_answer{42};\n\npublic:\n\n    the_answer()\n    {\n        std::cout << \"The answer is: \" << m_answer << '\\n';\n    }\n\npublic:\n\n    virtual ~the_answer() = default;\n\n    the_answer(the_answer &&) noexcept = default;\n    the_answer &operator=(the_answer &&) noexcept = default;\n\n    the_answer(const the_answer &) = default;\n    the_answer &operator=(const the_answer &) = default;\n};\n```", "```cpp\nclass the_answer\n{\n    int m_answer{42};\n\npublic:\n\n    the_answer()\n    {\n        std::cout << \"The answer is: \" << m_answer << '\\n';\n    }\n\npublic:\n\n    ~the_answer() = default;\n\n    the_answer(the_answer &&) noexcept = default;\n    the_answer &operator=(the_answer &&) noexcept = default;\n\n    the_answer(const the_answer &) = delete;\n    the_answer &operator=(const the_answer &) = delete;\n};\n```", "```cpp\nclass the_answer\n{\n    int m_answer{42};\n\npublic:\n\n    the_answer()\n    {\n        std::cout << \"The answer is: \" << m_answer << '\\n';\n    }\n\npublic:\n\n    ~the_answer() = default;\n\n    the_answer(the_answer &&) noexcept = delete;\n    the_answer &operator=(the_answer &&) noexcept = delete;\n\n    the_answer(const the_answer &) = default;\n    the_answer &operator=(const the_answer &) = default;\n};\n```", "```cpp\n> sudo apt-get install build-essential git\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter03\n```", "```cpp\n> cmake .\n> make recipe02_examples\n```", "```cpp\n> ./recipe02_example01\nThe answer is: 42\n> ./recipe02_example02\nThe answer is: 42\nThe answer is: 42\n\nThe answer is: 42\n```", "```cpp\n#include <iostream>\n\nclass the_answer\n{\n    int m_answer{42};\n\npublic:\n\n    the_answer() = default;\n\npublic:\n\n    ~the_answer()\n    {\n        std::cout << \"The answer is: \" << m_answer << '\\n';\n    }\n};\n\nint main(void)\n{\n    the_answer is;\n    return 0;\n}\n```", "```cpp\nthe_answer(the_answer &&other) noexcept;\nthe_answer &operator=(the_answer &&other) noexcept;\n```", "```cpp\ninstance2 = std::move(instance1);\n```", "```cpp\n#include <iostream>\n\nclass the_answer\n{\n    int m_answer{};\n\npublic:\n\n    the_answer() = default;\n\n    explicit the_answer(int answer) :\n        m_answer{answer}\n    { }\n```", "```cpp\npublic:\n\n    ~the_answer()\n    {\n        if (m_answer != 0) {\n            std::cout << \"The answer is: \" << m_answer << '\\n';\n        }\n    }\n```", "```cpp\n    the_answer(the_answer &&other) noexcept\n    {\n        *this = std::move(other);\n    }\n\n    the_answer &operator=(the_answer &&other) noexcept\n    {\n        if (&other == this) {\n            return *this;\n        }\n\n        m_answer = std::exchange(other.m_answer, 0);        \n        return *this;\n    }\n\n    the_answer(const the_answer &) = default;\n    the_answer &operator=(const the_answer &) = default;\n};\n```", "```cpp\nint main(void)\n{\n    {\n        the_answer is;\n        the_answer is_42{42};\n        is = is_42;\n    }\n\n    std::cout << '\\n';\n\n    {\n        the_answer is{23};\n        the_answer is_42{42};\n        is = std::move(is_42);\n    }\n\n    return 0;\n}\n```", "```cpp\n> sudo apt-get install build-essential git\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter03\n```", "```cpp\n> cmake .\n> make recipe03_examples\n```", "```cpp\n> ./recipe03_example01\nThe answer is: 42\n\n> ./recipe03_example03\ncount: 2\nThe answer is: 42\nThe answer is: 42\n\ncount: 1\nThe answer is: 42\n```", "```cpp\nclass the_answer\n{\n    std::unique_ptr<int> m_answer;\n\npublic:\n\n    explicit the_answer(int answer) :\n        m_answer{std::make_unique<int>(answer)}\n    { }\n\n    ~the_answer()\n    {\n        if (m_answer) {\n            std::cout << \"The answer is: \" << *m_answer << '\\n';\n        }\n    }\n\npublic:\n\n    the_answer(the_answer &&other) noexcept\n    {\n        *this = std::move(other);\n    }\n\n    the_answer &operator=(the_answer &&other) noexcept\n    {\n        m_answer = std::move(other.m_answer);\n        return *this;\n    }\n};\n```", "```cpp\nint main(void)\n{\n    the_answer is_42{42};\n    the_answer is = std::move(is_42);\n\n    return 0;\n}\n```", "```cpp\nthe_answer(const the_answer &) = default;\nthe_answer &operator=(const the_answer &) = default;\n```", "```cpp\n#include <memory>\n#include <iostream>\n\nclass the_answer\n{\n    std::shared_ptr<int> m_answer;\n\npublic:\n\n    the_answer() = default;\n\n    explicit the_answer(int answer) :\n        m_answer{std::make_shared<int>(answer)}\n    { }\n\n    ~the_answer()\n    {\n        if (m_answer) {\n            std::cout << \"The answer is: \" << *m_answer << '\\n';\n        }\n    }\n\n    auto use_count()\n    { return m_answer.use_count(); }\n```", "```cpp\npublic:\n\n    the_answer(the_answer &&other) noexcept\n    {\n        *this = std::move(other);\n    }\n\n    the_answer &operator=(the_answer &&other) noexcept\n    {\n        m_answer = std::move(other.m_answer);\n        return *this;\n    }\n\n    the_answer(const the_answer &other)\n    {\n        *this = other;\n    }\n\n    the_answer &operator=(const the_answer &other)\n    {\n        m_answer = other.m_answer;\n        return *this;\n    }\n};\n```", "```cpp\nint main(void)\n{\n    {\n        the_answer is_42{42};\n        the_answer is = is_42;\n        std::cout << \"count: \" << is.use_count() << '\\n';\n    }\n\n    std::cout << '\\n';\n\n    {\n        the_answer is_42{42};\n        the_answer is = std::move(is_42);\n        std::cout << \"count: \" << is.use_count() << '\\n';\n    }\n\n    return 0;\n}\n```", "```cpp\n> sudo apt-get install build-essential git\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter03\n```", "```cpp\n> cmake .\n> make recipe04_examples\n```", "```cpp\n> ./recipe04_example01\nfailed to move\n\nThe answer is: 42\n```", "```cpp\nm_answer = std::move(other.m_answer);\n```", "```cpp\n#include <vector>\n#include <iostream>\n\nclass the_answer\n{\n    std::vector<int> m_answer;\n\npublic:\n\n    the_answer() = default;\n\n    explicit the_answer(int answer) :\n        m_answer{{answer}}\n    { }\n\n    ~the_answer()\n    {\n        if (!m_answer.empty()) {\n            std::cout << \"The answer is: \" << m_answer.at(0) << '\\n';\n        }\n    }\n```", "```cpp\npublic:\n\n    the_answer(the_answer &&other) noexcept\n    {\n        *this = std::move(other);\n    }\n\n    the_answer &operator=(the_answer &&other) noexcept\n    {\n        if (&other == this) {\n            return *this;\n        }\n\n        try {\n            m_answer.emplace(m_answer.begin(), other.m_answer.at(0));\n            other.m_answer.erase(other.m_answer.begin());\n        }\n        catch(...) {\n            std::cout << \"failed to move\\n\";\n        }\n\n        return *this;\n    }\n};\n```", "```cpp\nint main(void)\n{\n    {\n        the_answer is_42{};\n        the_answer is_what{};\n\n        is_what = std::move(is_42);\n    }\n\n    std::cout << '\\n';\n\n    {\n        the_answer is_42{42};\n        the_answer is_what{};\n\n        is_what = std::move(is_42);\n    }\n\n    return 0;\n}\n```", "```cpp\n> sudo apt-get install build-essential git\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter03\n```", "```cpp\n> cmake .\n> make recipe05_examples\n```", "```cpp\n> ./recipe05_example01\ncopy\n```", "```cpp\n#include <iostream>\n\nclass copy_or_move\n{\npublic:\n\n    copy_or_move() = default;\n\npublic:\n\n    copy_or_move(copy_or_move &&other) noexcept\n    {\n        *this = std::move(other);\n    }\n\n    copy_or_move &operator=(copy_or_move &&other) noexcept\n    {\n        std::cout << \"move\\n\";\n        return *this;\n    }\n\n    copy_or_move(const copy_or_move &other)\n    {\n        *this = other;\n    }\n\n    copy_or_move &operator=(const copy_or_move &other)\n    {\n        std::cout << \"copy\\n\";\n        return *this;\n    }\n};\n\nint main(void)\n{\n    const copy_or_move test1;\n    copy_or_move test2;\n\n    test2 = std::move(test1);\n    return 0;\n}\n```", "```cpp\n> sudo apt-get install build-essential git\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter03\n```", "```cpp\n> cmake .\n> make recipe06_examples\n```", "```cpp\n> ./recipe06_example01\nthe answer is: 42\nthe answer is not: 0\nthe answer is not: 0\n```", "```cpp\n#include <iostream>\n\nclass the_answer\n{\npublic:\n\n ~the_answer() = default;\n\n void foo() &\n {\n std::cout << \"the answer is: 42\\n\";\n }\n\n void foo() &&\n {\n std::cout << \"the answer is not: 0\\n\";\n }\n\npublic:\n\n the_answer(the_answer &&other) noexcept = default;\n the_answer &operator=(the_answer &&other) noexcept = default;\n\n the_answer(const the_answer &other) = default;\n the_answer &operator=(const the_answer &other) = default;\n};\n```", "```cpp\nint main(void)\n{\n    the_answer is;\n\n    is.foo();\n    std::move(is).foo();\n    the_answer{}.foo();\n}\n```", "```cpp\n> sudo apt-get install build-essential git\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter03\n```", "```cpp\n> cmake .\n> make recipe07_examples\n```", "```cpp\n> ./recipe07_example01\nThe answer is: 42\nSegmentation fault (core dumped)\n```", "```cpp\n#include <iostream>\n\nclass the_answer\n{\n    std::unique_ptr<int> m_answer;\n\npublic:\n\n    explicit the_answer(int answer) :\n        m_answer{std::make_unique<int>(answer)}\n    { }\n\n    ~the_answer()\n    {\n        std::cout << \"The answer is: \" << *m_answer << '\\n';\n    }\n\npublic:\n\n    the_answer(the_answer &&other) noexcept = default;\n    the_answer &operator=(the_answer &&other) noexcept = default;\n};\n\nint main(void)\n{\n    the_answer is_42{42};\n    the_answer is_what{42};\n\n    is_what = std::move(is_42);\n    return 0;\n}\n```", "```cpp\nclass the_answer\n{\n std::unique_ptr<int> m_answer;\n\npublic:\n\n explicit the_answer(int answer) :\n m_answer{std::make_unique<int>(answer)}\n { }\n\n ~the_answer()\n {\n std::cout << \"The answer is: \" << *m_answer << '\\n';\n }\n\npublic:\n\n the_answer(the_answer &&other) noexcept = delete;\n the_answer &operator=(the_answer &&other) noexcept = delete;\n\n the_answer(const the_answer &other) = delete;\n the_answer &operator=(const the_answer &other) = delete;\n};\n```", "```cpp\n/home/user/book/chapter03/recipe07.cpp: In function \u2018int main()\u2019:\n/home/user/book/chapter03/recipe07.cpp:106:30: error: use of deleted function \u2018the_answer& the_answer::operator=(the_answer&&)\u2019\nis_what = std::move(is_42);\n^\n/home/user/book/chapter03/recipe07.cpp:95:17: note: declared here\nthe_answer &operator=(the_answer &&other) noexcept = delete;\n^~~~~~~~\n```"]