- en: Microcontroller Programming
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微控制器编程
- en: In previous chapters, we mostly covered topics applicable to relatively powerful
    embedded systems that have megabytes of memory and run Linux operating systems.
    Now, we are going to explore the other side of the embedded system spectrum—microcontrollers.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们大多涵盖了适用于具有兆字节内存并运行Linux操作系统的相对强大的嵌入式系统的主题。现在，我们将探索嵌入式系统光谱的另一面——微控制器。
- en: As we discussed in the introduction, microcontrollers are commonly used to perform
    simple, often real-time tasks, such as collecting data or providing a high-level
    API to a specific device. Microcontrollers are inexpensive, consume little energy,
    and can work in a wide range of environmental conditions, making them a perfect
    choice for IoT applications.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在介绍中讨论的那样，微控制器通常用于执行简单的、通常是实时的任务，比如收集数据或为特定设备提供高级API。微控制器价格低廉，能耗低，可以在各种环境条件下工作，因此是物联网应用的理想选择。
- en: The other side of their low cost is their capabilities. Normally, they have
    onboard memory that is measured in kilobytes and do not have hardware memory mapping.
    They do not run any operating system at all, or run a simple real-time operating
    system like FreeRTOS.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 他们低成本的另一面是他们的能力。通常，它们具有以千字节为单位的内置存储器，没有硬件内存映射。它们根本不运行任何操作系统，或者运行像FreeRTOS这样的简单实时操作系统。
- en: There are many models of microcontrollers, tailored for specific applications.
    In this chapter, we will learn how to use the Arduino development environment.
    The recipes were created for the Arduino UNO board built on top of an ATmega328
    microcontroller, which is widely used for education and prototyping purposes,
    but they will work for other Arduino boards as well.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多型号的微控制器，专为特定应用而设计。在本章中，我们将学习如何使用Arduino开发环境。这些配方是为基于ATmega328微控制器的Arduino
    UNO板创建的，该板广泛用于教育和原型开发，但它们也适用于其他Arduino板。
- en: 'We will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: Setting up the development environment
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搭建开发环境
- en: Compiling and uploading a program
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译和上传程序
- en: Debugging microcontroller code
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试微控制器代码
- en: These recipes will help with setting up the environment and starting development
    for microcontrollers.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这些配方将帮助您设置环境并开始为微控制器开发。
- en: Setting up the development environment
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 搭建开发环境
- en: The Arduino UNO board comes with an integrated development environment, or IDE,
    called the Arduino IDE. It can be downloaded for free from [https://www.arduino.cc/](https://www.arduino.cc/)[ website.](https://www.arduino.cc/)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino UNO板配备了一个名为Arduino IDE的集成开发环境，可以从[https://www.arduino.cc/](https://www.arduino.cc/)[网站](https://www.arduino.cc/)免费下载。
- en: In this recipe, we will learn how to set it up and connect your Arduino board.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将学习如何设置并连接您的Arduino板。
- en: How to do it...
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We are going to install the Arduino IDE, connect the Arduino UNO board to your
    computer, and then establish the communication between the IDE and the board:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将安装Arduino IDE，将Arduino UNO板连接到计算机，然后在IDE和板之间建立通信：
- en: In your browser, open the downloads ([https://www.arduino.cc/en/Main/Software](https://www.arduino.cc/en/Main/Software))
    page and choose an installation option that matches your operating system.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开下载页面（[https://www.arduino.cc/en/Main/Software](https://www.arduino.cc/en/Main/Software)），选择与您的操作系统匹配的安装选项。
- en: Once the download is complete, follow the installation instructions from the
    *Getting started* ([https://www.arduino.cc/en/Guide/HomePage](https://www.arduino.cc/en/Guide/HomePage))
    page.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载完成后，按照*入门*（[https://www.arduino.cc/en/Guide/HomePage](https://www.arduino.cc/en/Guide/HomePage)）页面上的安装说明进行操作。
- en: Connect your Arduino board to your computer using a USB cable. It will power
    on automatically.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用USB电缆将您的Arduino板连接到计算机上，它将自动上电。
- en: Run the Arduino IDE.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行Arduino IDE。
- en: Now, we need to establish communication between the IDE and the board. Switch
    to the Arduino IDE window. In the application menu, select Tools -> Port. This
    will open a sub-menu with serial port options available. Choose the one that has
    Arduino in its name.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要在IDE和板之间建立通信。切换到Arduino IDE窗口。在应用程序菜单中，选择“工具”->“端口”。这将打开一个子菜单，显示可用的串行端口选项。选择带有Arduino名称的端口。
- en: In the Tools menu, click the Board item and then select a model of your Arduino
    board.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“工具”菜单中，点击“板”项目，然后选择您的Arduino板型号。
- en: Select the Tools -> Board Info menu item.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“工具”->“板信息”菜单项。
- en: How it works...
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Arduino boards come with a free IDE that can be downloaded from the manufacturer's
    site. The IDE installation is straightforward and is not different from the installation
    of any other software for your platform.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino板配备了一个免费的IDE，可以从制造商的网站下载。IDE的安装很简单，与为您的平台安装任何其他软件没有区别。
- en: All code is written, compiled, and debugged in the IDE, but the resulting compiled
    images should be flashed to the target board and executed there. For this, the
    IDE should be able to communicate with the board.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 所有代码都是在IDE中编写、编译和调试的，但生成的编译图像应该被刷到目标板上并在那里执行。为此，IDE应该能够与板进行通信。
- en: The board is connected to the computer running the IDE via USB. The USB cable
    provides not only communication but also power for the board. As soon as the board
    is connected to the computer, it turns on and starts working.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 该板通过USB连接到运行IDE的计算机。USB电缆不仅提供通信，还为板提供电源。一旦板连接到计算机，它就会打开并开始工作。
- en: 'The IDE uses a serial interface for communication with the board. Since there
    can be multiple serial ports already configured on your computer, one of the steps
    to set up the communication is to choose one of the available ports. Usually,
    it is the one that has Arduino in its name:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: IDE使用串行接口与板进行通信。由于您的计算机上可能已经配置了多个串行端口，设置通信的步骤之一是选择其中一个可用的端口。通常，它是带有Arduino名称的端口：
- en: '![](img/c1a46111-aa64-40fa-8b02-89e6f0e44b6c.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c1a46111-aa64-40fa-8b02-89e6f0e44b6c.png)'
- en: 'Finally, once the port has been selected, we let the IDE know the type of Arduino
    board we use. Once done, we can check whether communication between the board
    and the IDE actually works. When we invoke the Board Info menu item, the IDE displays
    a dialog window with information pertaining to the connected board:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，一旦选择了端口，我们让IDE知道我们使用的Arduino板的类型。完成后，我们可以检查板和IDE之间的通信是否实际有效。当我们调用Board Info菜单项时，IDE会显示一个包含有关连接板的信息的对话框窗口：
- en: '![](img/16acebfc-27e7-4597-9f52-8beceb7b0020.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/16acebfc-27e7-4597-9f52-8beceb7b0020.png)'
- en: If the dialog does not show up, this indicates a problem. The board may be disconnected
    or damaged, or the wrong port may have been selected. Otherwise, we are ready
    to build and run our first program.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对话框没有显示，这表示存在问题。板可能已断开连接或损坏，或者可能选择了错误的端口。否则，我们准备构建和运行我们的第一个程序。
- en: There's more...
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: If something goes wrong, consider reading the troubleshooting section ([https://www.arduino.cc/en/Guide/Troubleshooting](https://www.arduino.cc/en/Guide/Troubleshooting))
    on the Arduino site.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出现问题，请考虑阅读Arduino网站上的故障排除部分（[https://www.arduino.cc/en/Guide/Troubleshooting](https://www.arduino.cc/en/Guide/Troubleshooting)）。
- en: Compiling and uploading a program
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编译和上传程序
- en: In the previous recipe, we learned how to set up the development environment.
    Now, let's compile and run our first program.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个步骤中，我们学习了如何设置开发环境。现在，让我们编译和运行我们的第一个程序。
- en: The Arduino UNO board itself does not have a screen, but we need some way to
    know that our program is doing something. It does, however, have a built-in LED
    that we can control from our program without connecting any peripherals to the
    board.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino UNO板本身没有屏幕，但我们需要一种方式来知道我们的程序正在做些什么。但是，它确实有一个内置LED，我们可以在不连接任何外围设备到板上的情况下从我们的程序中控制。
- en: In this recipe, we will learn how to compile and run a program that blinks a
    built-in LED on an Arduino UNO board.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个步骤中，我们将学习如何编译和运行一个在Arduino UNO板上闪烁内置LED的程序。
- en: How to do it...
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We are going to compile and upload to the board an existing example application
    that comes with the IDE:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将编译并上传到板上一个已经存在的IDE自带的示例应用程序：
- en: Connect the Arduino board to your computer and open the Arduino IDE.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Arduino板连接到计算机并打开Arduino IDE。
- en: In the Arduino IDE, open the File menu and choose Examples -> 01\. Basics ->
    Blink.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Arduino IDE中，打开文件菜单，选择示例-> 01\.基础-> 闪烁。
- en: A new window will open. In this window, click the Upload button.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将打开一个新窗口。在此窗口中，单击上传按钮。
- en: Observe how the built-in LED on the board starts flashing.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察板上的内置LED开始闪烁。
- en: How it works...
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Arduino is a platform widely used for educational purposes. It is designed
    to be easy to use and comes with a bunch of examples. For our first program, we
    have chosen an application that does not require the board to be wired with external
    peripherals. Once we launch the IDE, we select the Blink application from the
    examples available, as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino是一个广泛用于教育目的的平台。它设计成易于使用，并附带一堆示例。对于我们的第一个程序，我们选择了一个不需要将板与外部设备连接的应用程序。一旦启动IDE，我们从可用的示例中选择了Blink应用程序，如下所示：
- en: '![](img/9c4aa898-0a41-4617-b54b-6bee11bd551f.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9c4aa898-0a41-4617-b54b-6bee11bd551f.png)'
- en: 'This opens a window with the program code:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开一个带有程序代码的窗口：
- en: '![](img/e5b18011-15bc-4c0e-aed8-d2f26799737d.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e5b18011-15bc-4c0e-aed8-d2f26799737d.png)'
- en: Aside from the source code of the program, we can also see a black console window
    and a status bar, indicating that the Arduino UNO board is connected via the `/dev/cu.usbmodem14101`
    serial port. The device name depends on the board model, and the port name may
    look different in Windows or Linux.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 除了程序的源代码外，我们还可以看到一个黑色控制台窗口和状态栏，指示Arduino UNO板通过`/dev/cu.usbmodem14101`串行端口连接。设备名称取决于板型号，端口名称在Windows或Linux中可能看起来不同。
- en: 'Above the source code, we can see several buttons. The second button, a right-pointing
    arrow, is the Upload button. Once we press it, the IDE starts building the application
    and then uploads the resulting binary to the board. We can see the build status
    in the console window:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在源代码上方，我们可以看到几个按钮。第二个按钮是上传按钮。按下后，IDE开始构建应用程序，然后将生成的二进制文件上传到板上。我们可以在控制台窗口中看到构建状态：
- en: '![](img/d0a8e609-5449-4491-866d-7708f48e4f68.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d0a8e609-5449-4491-866d-7708f48e4f68.png)'
- en: The application starts immediately after uploading. If we take a look at the
    board, we can see that the built-in yellow LED has started blinking. We were able
    to build and run our first Arduino application.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 上传后立即启动应用程序。如果我们看看板，我们可以看到内置的黄色LED已经开始闪烁。我们成功构建并运行了我们的第一个Arduino应用程序。
- en: There's more...
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: After uploading, your program is stored in the flash memory on the board. If
    you power off your board and then power it on again, the program starts running
    even if you do not have an IDE running.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 上传后，程序将存储在板上的闪存内存中。如果关闭板电源然后再次打开，即使没有运行IDE，程序也会开始运行。
- en: Debugging microcontroller code
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试微控制器代码
- en: Compared with more powerful embedded platforms, such as the Raspberry PI, the
    debugging capabilities of Arduino are limited. The Arduino IDE does not provide
    an integrated debugger, and the Arduino board itself does not have a built-in
    screen. It does, however, have UART, and provides a serial interface that can
    be used for debugging purposes.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 与树莓派等更强大的嵌入式平台相比，Arduino的调试能力有限。Arduino IDE不提供集成调试器，Arduino板本身也没有内置屏幕。但是，它确实具有UART，并提供可用于调试目的的串行接口。
- en: In this recipe, we will learn how to use the Arduino serial interface for debugging
    and reading user input.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个步骤中，我们将学习如何使用Arduino串行接口进行调试和读取用户输入。
- en: How to do it...
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We will implement a simple program for the Arduino controller that waits for
    user input on the serial port and turns the built-in LED on or off depending on
    the data:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为Arduino控制器实现一个简单的程序，该程序在串行端口上等待用户输入，并根据数据打开或关闭内置LED：
- en: Open Arduino IDE and select New in its File menu. A new Sketch window will show
    up.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Arduino IDE并在其文件菜单中选择新建。将显示一个新的Sketch窗口。
- en: 'Paste the following code snippet into the Sketch window:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码片段粘贴到 Sketch 窗口中：
- en: '[PRE0]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Click the Upload button to build and run the code.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“上传”按钮以构建和运行代码。
- en: Select Serial Monitor in the Tools menu of the Arduino IDE. A Serial Monitor
    window will appear.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Arduino IDE 的工具菜单中选择串行监视器。串行监视器窗口将出现。
- en: In the Serial Monitor window, enter `1010110`.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在串行监视器窗口中，输入 `1010110`。
- en: How it works...
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: We create a new Arduino sketch that consists of two functions. The first function,
    `setup`, is invoked on the program startup and is used to provide the initial
    configuration of the application.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建一个由两个函数组成的新的 Arduino 草图。第一个函数 `setup` 在程序启动时被调用，并用于提供应用程序的初始配置。
- en: 'In our case, we need to initialize the serial interface. The most important
    parameter of serial communication is its speed in bits per second. Both the microcontroller
    and the IDE should agree to use the same speed, otherwise the communication will
    not work. By default, the serial monitor uses 9,600 bits per second, and we use
    this value in our program:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们需要初始化串行接口。串行通信的最重要参数是每秒位数的速度。微控制器和 IDE 都应同意使用相同的速度，否则通信将无法工作。串行监视器默认使用每秒
    9,600 位，我们在程序中使用这个值：
- en: '[PRE1]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: It is possible to use higher communication speeds though. The serial monitor
    has a dropdown in the bottom-right corner of the screen that allows other speeds
    to be selected. If you decide to use other speeds, the code should be modified
    accordingly.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然可以使用更高的通信速度。串行监视器在屏幕右下角有一个下拉菜单，允许选择其他速度。如果决定使用其他速度，则应相应修改代码。
- en: 'We also configure pin 13, corresponding to the built-in LED, for output:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还为输出配置引脚 13，对应于内置 LED：
- en: '[PRE2]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We use the constant, `LED_BUILTIN`, instead of `13`, to make the code more
    understandable. The second function, `loop`, defines an endless loop of the Arduino
    program. For each iteration, we read a byte from the serial port:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用常量 `LED_BUILTIN`，而不是 `13`，以使代码更易理解。第二个函数 `loop` 定义了 Arduino 程序的无限循环。对于每次迭代，我们从串行端口读取一个字节：
- en: '[PRE3]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'It the byte is `1`, we turn the LED on and write a message back to the serial
    port:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果字节是 `1`，我们打开 LED 并向串行端口写入一条消息：
- en: '[PRE4]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Similarly, for `0`, we turn the LED off:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，对于 `0`，我们关闭 LED：
- en: '[PRE5]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: All other values are ignored. After each byte read from the port, we add a 500
    microsecond delay. This way, we can define different blinking patterns. For example,
    if we send `1001001`, the LED will turn on for 0.5 seconds, then off for 1 second,
    on for 0.5 seconds, off for 1 second, and finally, on again.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 所有其他值都被忽略。在从端口读取每个字节后，我们添加 500 微秒的延迟。这样，我们可以定义不同的闪烁模式。例如，如果我们发送 `1001001`，LED
    将在 0.5 秒内打开，然后在 1 秒内关闭，再在 0.5 秒内打开，再在 1 秒内关闭，最后再次打开。
- en: 'If we run the code and enter `1001001` in the serial monitor, we can see the
    following output:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行代码并在串行监视器中输入 `1001001`，我们可以看到以下输出：
- en: '![](img/6d2f169e-1b5f-4686-8942-7f5faf28a277.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6d2f169e-1b5f-4686-8942-7f5faf28a277.png)'
- en: The LED is blinking as expected and, apart from that, we can see debug messages
    in the serial monitor. In this way, we can debug real, more complex applications.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: LED 正如预期地闪烁，并且除此之外，我们可以在串行监视器中看到调试消息。通过这种方式，我们可以调试真实的、更复杂的应用程序。
