["```cpp\nstd::string name(\"Marilyn Monroe\");\nint age = 18;\nstd::cout << \"Name: \" << name << \", age: \" << age << std::endl;\n```", "```cpp\nstd::string name;\nstd::string sex;\nint age;\nstd::cout << \"Enter your name: \" << std::endl;\nstd::getline(std::cin, name);\nstd::cout << \"Enter your age: \" << std::endl;\nstd::cin >> age;\nstd::cout << \"Enter your sex (male, female):\" << std::endl;\nstd::cin >> sex;\nstd::cout << \"Your name is \" << name << \", your age is \" << age << \", your sex is \" << sex << std::endl;\n```", "```cpp\n    #include <iostream>\n    #include <string>\n    ```", "```cpp\n    class Track\n    {\n    public:\n    \u00a0\u00a0\u00a0\u00a0\u00a0Track(const std::string& name,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const std::string& singer,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const std::string& date,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const unsigned int& lengthInSeconds)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: m_Name(name)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0, m_Singer(singer)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0, m_Date(date)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0, m_LengthInSeconds(lengthInSeconds)\n    {\n    }\n    \u00a0\u00a0\u00a0\u00a0\u00a0std::string getName() const { return m_Name; }\n    \u00a0\u00a0\u00a0\u00a0\u00a0std::string getSinger() const { return m_Singer; }\n    \u00a0\u00a0\u00a0\u00a0\u00a0std::string getDate() const { return m_Date; }\n    \u00a0\u00a0\u00a0\u00a0\u00a0unsigned int getLength() const { return m_LengthInSeconds; }\n    private:\n    \u00a0\u00a0\u00a0\u00a0\u00a0std::string m_Name;\n    \u00a0\u00a0\u00a0\u00a0\u00a0std::string m_Singer;\n    \u00a0\u00a0\u00a0\u00a0\u00a0std::string m_Date;\n    \u00a0\u00a0\u00a0\u00a0\u00a0unsigned int m_LengthInSeconds;\n    };\n    ```", "```cpp\n    template <typename charT, typename Traits>\n    ```", "```cpp\n    template <typename charT, typename Traits>\n    inline std::basic_ostream<charT, Traits>&\n    operator<<(std::basic_ostream<charT, Traits>& os, Track trackItem);\n    ```", "```cpp\n    template <typename charT, typename Traits>\n    inline std::basic_ostream<charT, Traits>&\n    operator<<(std::basic_ostream<charT, Traits>& os, Track trackItem)\n    {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os << \"Track information: [\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< \"Name: \" << trackItem.getName()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< \", Singer: \" << trackItem.getSinger()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< \", Date of creation: \" << trackItem.getDate()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< \", Length in seconds: \" << trackItem.getLength()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< \"]\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return os;\n    }\n    ```", "```cpp\n    int main()\n    {\n    \u00a0\u00a0\u00a0\u00a0\u00a0Track track_001(\"Summer night city\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"ABBA\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"1979\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0213);\n    \u00a0\u00a0\u00a0\u00a0\u00a0std::cout << track_001 << std::endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```cpp\nstd::ofstream outFile(filename);\nstd::ifstream outFile(filename);\nstd::fstream outFile(filename);\n```", "```cpp\nstd::ofstream outFile;\noutFile.open(filename);\n```", "```cpp\nif (outFile.fail())\n{\n\u00a0\u00a0\u00a0\u00a0std::cerr << filename << \" file couldn't be opened\"<< std::endl;\n}\n```", "```cpp\nif (!outFile.is_open())\n{\n\u00a0\u00a0\u00a0\u00a0std::cerr << filename << \" file couldn't be opened\"<< std::endl;\n}\n```", "```cpp\nstd::ofstream outFile(filename, std::ios_base::out|std::ios_base::trunc);\n```", "```cpp\nstd::ofstream outFile;\noutFile.open(filename, std::ios_base::out|std::ios_base::trunc);\n```", "```cpp\noutFile.seekp(-5, std::ios_base::end);\n```", "```cpp\noutFile << \"This is line No \" << 1 << std::endl;\n```", "```cpp\nstd::ifstream inFile(filename);\t\t\nstd::string str;\nint num;\nfloat floatNum;\n// for data: \"book 3 24.5\"\ninFile >> str >> num >> floatNum;\n```", "```cpp\n    #include <fstream>\n    #include <iostream>\n    #include <string>\n    ```", "```cpp\n    class Book\n    {\n    public:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Book(const std::string& name,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const std::string& author,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const int year,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const float price)\n    \u00a0\u00a0\u00a0\u00a0\u00a0: m_Name(name)\n    \u00a0\u00a0\u00a0\u00a0\u00a0, m_Author(author)\n    \u00a0\u00a0\u00a0\u00a0\u00a0, m_Year(year)\n    \u00a0\u00a0\u00a0\u00a0\u00a0, m_Price(price) {}\n    \u00a0\u00a0\u00a0\u00a0\u00a0std::string getName() const { return m_Name; }\n    \u00a0\u00a0\u00a0\u00a0\u00a0std::string getAuthor() const { return m_Author; }\n    \u00a0\u00a0\u00a0\u00a0\u00a0int getYear() const { return m_Year; }\n    \u00a0\u00a0\u00a0\u00a0\u00a0float getPrice() const { return m_Price; }\n    private:\n    \u00a0\u00a0\u00a0\u00a0\u00a0std::string m_Name;\n    \u00a0\u00a0\u00a0\u00a0\u00a0std::string m_Author;\n    \u00a0\u00a0\u00a0\u00a0\u00a0int m_Year;\n    \u00a0\u00a0\u00a0\u00a0\u00a0float m_Price;\n    };\n    ```", "```cpp\n    std::string pricesFile(\"prices.txt\");\n    ```", "```cpp\n    Book book_001(\"Brave\", \"Olena Lizina\", 2017, 33.57);\n    ```", "```cpp\n    std::ofstream outFile(pricesFile);\n    if (outFile.fail())\n    {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cerr << \"Failed to open file \" << pricesFile << std::endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    }\n    ```", "```cpp\n    outFile << book_001.getName() << \" \"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< book_001.getAuthor() << \" \"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< book_001.getYear() << \" \"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< book_001.getPrice() << std::endl;\n    ```", "```cpp\n    std::ifstream inFile(pricesFile);\n    if (inFile.fail())\n    {\n    \u00a0\u00a0\u00a0\u00a0\u00a0std::cerr << \"Failed to open file \" << pricesFile << std::endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0return 1;\n    }\n    ```", "```cpp\n    std::string name;\n    std::string authorName;\n    std::string authorSurname;\n    int year;\n    float price;\n    ```", "```cpp\n    inFile >> name >> authorName >> authorSurname >> year >> price;\n    ```", "```cpp\n    Book book_002(name, std::string(authorName + \" \" + authorSurname), year, price);\n    ```", "```cpp\n    std::cout\u00a0\u00a0<< \"Book name: \" << book_002.getName() << std::endl\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< \"Author name: \" << book_002.getAuthor() << std::endl\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< \"Year: \" << book_002.getYear() << std::endl\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< \"Price: \" << book_002.getPrice() << std::endl;\n    ```", "```cpp\nstd::string track(\"ABBA 1967 Vule\");\nstd::istringstream iss(track);\n```", "```cpp\nstd::string track(\"ABBA 1967 Vule\");\nstd::istringstream iss;\niss.str(track);\n```", "```cpp\nstd::string group;\nstd::string name;\nint year;\niss >> group >> year >> name;\n```", "```cpp\nstd::ostringstream oss;\n```", "```cpp\nstd::string group(\"ABBA\");\nstd::string name(\"Vule\");\nint year = 1967;\noss << group << std::endl\n\u00a0\u00a0\u00a0\u00a0<< name << std::endl\n\u00a0\u00a0\u00a0\u00a0<< year << std::endl;\n```", "```cpp\nstd::cout << oss.str();\n```", "```cpp\nstd::stringstream ss;\nss << \"45\";\nint count;\nss >> count;\n```", "```cpp\nstd::string employee(\"Alex Ismailow 26\");\nstd::stringstream ss(employee);\n```", "```cpp\nstd::string employee(\"Charlz Buttler 26\");\nstd::stringstream ss;\nss.str(employee);\n```", "```cpp\nstd::string name;\nstd::string surname;\nint age;\nss >> name >> surname >> age;\n```", "```cpp\n    #include <sstream>\n    #include <iostream>\n    ```", "```cpp\n    std::string operator()(const std::string& originalString,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const std::string& wordToBeReplaced,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const std::string& wordReplaceBy);\n    ```", "```cpp\n    std::istringstream iss(originalString);\n    ```", "```cpp\n    std::ostringstream oss;\n    ```", "```cpp\n    class Replacer\n    {\n    public:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::string operator()(const std::string& originalString,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const std::string& wordToBeReplaced,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const std::string& wordReplaceBy)\n    \u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::istringstream iss(originalString);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::ostringstream oss;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::string word;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while (iss >> word)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (0 == word.compare(wordToBeReplaced))\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0oss << wordReplaceBy << \" \";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0oss << word << \" \";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return oss.str();\n    \u00a0\u00a0\u00a0\u00a0\u00a0}\n    };\n    ```", "```cpp\n    int main()\n    {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Replacer worker;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::string foodList(\"coffee tomatoes coffee cucumbers sugar\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::string changedList(worker(foodList, \"coffee\", \"chocolate\"));\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << changedList;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```cpp\n    #include <iostream>\n    enum BASE\n    {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DECIMAL,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0OCTAL,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0HEXADECIMAL\n    };\n    ```", "```cpp\n    void displayInBases(const int number, const BASE numberBase)\n    {\n    \u00a0\u00a0switch(numberBase)\n    \u00a0\u00a0{\n    \u00a0\u00a0case DECIMAL:\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"Your input in octal with base: \"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< std::showbase << std::oct << number\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< \", without base: \" \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< std::noshowbase << std::oct << number << std::endl;\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"Your input in hexadecimal with base: \"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< std::showbase << std::hex << number\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< \", without base: \" \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< std::noshowbase << std::hex << number << std::endl;\n    \u00a0\u00a0\u00a0\u00a0break;\n    \u00a0\u00a0case OCTAL:\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"Your input in hexadecimal with base: \"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< std::showbase << std::hex << number\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< \", without base: \" \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< std::noshowbase << std::hex << number << std::endl;\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"Your input in decimal with base: \"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< std::showbase << std::dec << number\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< \", without base: \" \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< std::noshowbase << std::dec << number << std::endl;\n    \u00a0\u00a0\u00a0\u00a0break;\n    \u00a0\u00a0case HEXADECIMAL:\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"Your input in octal with base: \"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< std::showbase << std::oct << number\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< \", without base: \" \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< std::noshowbase << std::oct << number << std::endl;\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"Your input in decimal with base: \"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< std::showbase << std::dec << number\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< \", without base: \" \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< std::noshowbase << std::dec << number << std::endl;\n    \u00a0\u00a0\u00a0\u00a0break;\n    \u00a0\u00a0}\n    }\n    ```", "```cpp\n    int integer; \n    ```", "```cpp\n    int main(int argc, char **argv)\n    {\n    \u00a0\u00a0int integer;\n    \u00a0\u00a0while(true)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"Enter the decimal value: \";\n    \u00a0\u00a0\u00a0\u00a0std::cin >> std::dec >> integer;\n    \u00a0\u00a0\u00a0\u00a0displayInBases(integer, BASE::DECIMAL);\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"Enter the hexadecimal value: \";\n    \u00a0\u00a0\u00a0\u00a0std::cin >> std::hex >> integer;\n    \u00a0\u00a0\u00a0\u00a0displayInBases(integer, BASE::HEXADECIMAL);\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"Enter the octal value: \";\n    \u00a0\u00a0\u00a0\u00a0std::cin >> std::oct >> integer;\n    \u00a0\u00a0\u00a0\u00a0displayInBases(integer, BASE::OCTAL);\n    \u00a0\u00a0}\n    \u00a0\u00a0return 0;\n    }\n    ```", "```cpp\n    int main(int argc, char **argv)\n    {\n    \u00a0\u00a0int integer;\n    \u00a0\u00a0while(true)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"Enter the decimal value: \";\n    \u00a0\u00a0\u00a0\u00a0std::cin >> std::setbase(10) >> integer;\n    \u00a0\u00a0\u00a0\u00a0displayInBases(integer, BASE::DECIMAL);\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"Enter the hexadecimal value: \";\n    \u00a0\u00a0\u00a0\u00a0std::cin >> std::setbase(16) >> integer;\n    \u00a0\u00a0\u00a0\u00a0displayInBases(integer, BASE::HEXADECIMAL);\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"Enter the octal value: \";\n    \u00a0\u00a0\u00a0\u00a0std::cin >> std::setbase(8) >> integer;\n    \u00a0\u00a0\u00a0\u00a0displayInBases(integer, BASE::OCTAL);\n    \u00a0\u00a0}\n    \u00a0\u00a0return 0;\n    }\n    ```", "```cpp\n    #include <iostream>\n    #include <iomanip>\n    ```", "```cpp\n    template< typename FloatingPoint >\n    void formattingPrint(const FloatingPoint number)\n    {\n    \u00a0\u00a0\u00a0\u00a0\u00a0auto precision = std::cout.precision();\n    \u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Default formatting with point: \"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< std::showpoint << number << std::endl\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< \"Default formatting without point: \"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< std::noshowpoint << number << std::endl\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< \"Fixed formatting: \"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< std::fixed << number << std::endl\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< \"Scientific formatting: \"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< std::scientific << number << std::endl\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< \"Hexfloat formatting: \"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< std::hexfloat << number << std::endl\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< \"Defaultfloat formatting: \"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< std::defaultfloat << number << std::endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0for (int i = 0; i < 22; i++)\n    \u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Precision: \" << i \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< \", number: \" << std::setprecision(i) \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< number << std::endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0std::cout << std::setprecision(precision);\n    }\n    ```", "```cpp\n    int main(int argc, char **argv)\n    {\n    \u00a0\u00a0\u00a0\u00a0\u00a0float floatNum;\n    \u00a0\u00a0\u00a0\u00a0\u00a0double doubleNum;\n    \u00a0\u00a0\u00a0\u00a0\u00a0long double longDoubleNum;\n    \u00a0\u00a0\u00a0\u00a0\u00a0while(true)\n    \u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Enter the floating-point digit: \";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cin >> std::setprecision(36) >> longDoubleNum;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"long double output\" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0formattingPrint(longDoubleNum);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0doubleNum = longDoubleNum;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"double output\" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0formattingPrint(doubleNum);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0floatNum = longDoubleNum;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"float output\" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0formattingPrint(floatNum);\n    \u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```cpp\nstd::cout << \"Default formatting of bool variables: \"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< \"true: \" << true\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< \", false: \" << false << std::endl;\nstd::cout << \"Formatting of bool variables with boolalpha flag is set: \"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< std::boolalpha\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< \"true: \" << true\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< \", false: \" << false << std::endl;\nstd::cout << \"Formatting of bool variables with noboolalpha flag is set: \"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< std::noboolalpha\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< \"true: \" << true\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< \", false: \" << false << std::endl;\n```", "```cpp\nDefault formatting of bool variables: true: 1, false: 0\nFormatting of bool variables with boolalpha flag is set: true: true, false: false\nFormatting of bool variables with noboolalpha flag is set: true: 1, false: 0\n```", "```cpp\nbool trueValue, falseValue;\nstd::istringstream iss(\"false true\");\niss >> std::boolalpha >> falseValue >> trueValue;\nstd::istringstream iss(\"0 1\");\niss >> std::noboolalpha >> falseValue >> trueValue;\n```", "```cpp\n2.33 3.45\n2.2 4.55\n3.67 3.02\n```", "```cpp\n2.33\u00a0\u00a0\u00a03.45\n2.2\u00a0\u00a0\u00a0\u00a0\u00a04.55\n3.67\u00a0\u00a0\u00a03.02\n```", "```cpp\n2.33* 3.45*\n2.2** 4.55*\n3.67* 3.02*\n```", "```cpp\nstd::cout << \"Internal fill: \" << std::endl\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< std::setfill('#')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< std::internal\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< std::setw(10) << -2.38 << std::endl\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< std::setw(10) << 2.38 << std::endl\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< std::setw(10) << std::hex << std::showbase << 0x4b << std::endl;\nstd::cout << \"Left fill: \" << std::endl\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< std::left\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< std::setw(10) << -2.38 << std::endl\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< std::setw(10) << 2.38 << std::endl\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< std::setw(10) << std::hex << std::showbase << 0x4b << std::endl;\nstd::cout << \"Right fill: \" << std::endl\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< std::right\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< std::setw(10) << -2.38 << std::endl\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< std::setw(10) << 2.38 << std::endl\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< std::setw(10) << std::hex << std::showbase << 0x4b << std::endl;\n```", "```cpp\nInternal fill: \n-#####2.38\n######2.38\n0x######4b\nLeft fill: \n-2.38#####\n2.38######\n0x4b######\nRight fill: \n#####-2.38\n######2.38\n######0x4b\n```", "```cpp\nstd::cout << \"Default formatting: \" << 13 << \" \" << 0 << std::endl;\nstd::cout << \"showpos flag is set: \" << std::showpos << 13 << \" \" << 0 << std::endl;\nstd::cout << \"noshowpos flag is set: \" << std::noshowpos << 13 << \" \" << 0 << std::endl;\n```", "```cpp\nDefault formatting: 13 0\nshowpos flag is set: +13 +0\nnoshowpos flag is set: 13 0\n```", "```cpp\nstd::cout << \"12345.0 in uppercase with precision 4: \"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< std::setprecision(4) << std::uppercase << 12345.0 << std::endl;\nstd::cout << \"12345.0 in no uppercase with precision 4: \"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< std::setprecision(4) << std::nouppercase << 12345.0 << std::endl;\nstd::cout << \"0x2a in uppercase: \"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< std::hex << std::showbase << std::uppercase << 0x2a << std::endl;\nstd::cout << \"0x2a in nouppercase: \"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< std::hex << std::showbase << std::nouppercase << 0x2a << std::endl;\n```", "```cpp\n12345.0 in uppercase with precision 4: 1.234E+004\n12345.0 in no uppercase with precision 4: 1.234e+004\n0x2a in uppercase: 0X2A\n0x2a in nouppercase: 0x2a\n```", "```cpp\nstd::string name;\nstd::string surname;\nstd::istringstream(\"Peppy Ping\") >> name >> surname;\nstd::cout << \"Your name: \" << name << \", your surname: \" << surname << std::endl;\nname.clear();\nsurname.clear();\nstd::istringstream(\"Peppy Ping\") >> std::noskipws >> name >> surname;\nstd::cout << \"Your name: \" << name << \", your surname: \" << surname << std::endl;\n```", "```cpp\nYour name: Peppy, your surname: Ping\nYour name: Peppy, your surname:\n```", "```cpp\nstd::string str1(\"String without quotes\");\nstd::string str2(\"String with quotes \\\"right here\\\"\");\nstd::ostringstream ss;\nss << str1;\nstd::cout << \"[\" << ss.str() << \"]\" << std::endl;\nss.str(\"\");\nss << str2;\nstd::cout << \"[\" << ss.str() << \"]\" << std::endl; \n```", "```cpp\n[String without quotes]\n[String with quotes \"right here\"] \n```", "```cpp\nstd::string str1(\"String without quotes\");\nstd::string str2(\"String with quotes \\\"right here\\\"\");\nstd::ostringstream ss;\nss << std::quoted(str1);\nstd::cout << \"[\" << ss.str() << \"]\" << std::endl;\nss.str(\"\");\nss << std::quoted(str2);\nstd::cout << \"[\" << ss.str() << \"]\" << std::endl;\n```", "```cpp\n[\"String without quotes\"]\n[\"String with quotes \\\"right here\\\"\"]\n```", "```cpp\nstd::string quote(const std::string& str)\n{\n\u00a0\u00a0\u00a0\u00a0\u00a0std::ostringstream oss;\n\u00a0\u00a0\u00a0\u00a0\u00a0oss << std::quoted(str);\n\u00a0\u00a0\u00a0\u00a0\u00a0return oss.str();\n}\n```", "```cpp\nstd::string str1(\"String without quotes\");\nstd::string str2(\"String with quotes \\\"right here\\\"\");\nstd::coot << \"[\" << quote(str1) << \"]\" << std::endl;\nstd::cout << \"[\" << quote(str2) << \"]\" << std::endl;\n```", "```cpp\n    #include <iostream>\n    #include <sstream>\n    #include <thread>\n    #include <chrono>\n    #include <ctime>\n    ```", "```cpp\n    class extendedOstream\n    {\n    private:\n    \u00a0\u00a0\u00a0\u00a0\u00a0std::ostream& m_oss;\n    \u00a0\u00a0\u00a0\u00a0\u00a0bool writeAdditionalInfo;\n    };\n    ```", "```cpp\n    extendedOstream()\n    \u00a0\u00a0\u00a0\u00a0\u00a0: m_oss(std::cout)\n    \u00a0\u00a0\u00a0\u00a0\u00a0, writeAdditionalInfo(true)\n    {\n    }\n    ```", "```cpp\n    template<typename T>\n    extendedOstream& operator<<(const T& value)\n    {\n    \u00a0\u00a0\u00a0\u00a0\u00a0if (writeAdditionalInfo)\n    \u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::string time = fTime();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0auto id = threadId();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0m_oss << time << id << value;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0writeAdditionalInfo = false;\n    \u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0m_oss << value;\n    \u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0return *this;\n    }\n    ```", "```cpp\n    extendedOstream&\n    operator<<(std::ostream& (*pfn)(std::ostream&))\n    {\n    \u00a0\u00a0\u00a0\u00a0\u00a0writeAdditionalInfo = true;\n    \u00a0\u00a0\u00a0\u00a0\u00a0pfn(m_oss);\n    \u00a0\u00a0\u00a0\u00a0\u00a0return *this;\n    }\n    ```", "```cpp\n    std::string fTime()\n    {\n    \u00a0\u00a0\u00a0\u00a0\u00a0auto now = std::chrono::system_clock::now();\n    \u00a0\u00a0\u00a0\u00a0\u00a0std::time_t time = std::chrono::system_clock::to_time_t(now);\n    \u00a0\u00a0\u00a0\u00a0\u00a0std::ostringstream oss;\n    \u00a0\u00a0\u00a0\u00a0\u00a0std::string strTime(std::ctime(&time));\n    \u00a0\u00a0\u00a0\u00a0\u00a0strTime.pop_back();\n    \u00a0\u00a0\u00a0\u00a0\u00a0oss << \"[\" << strTime << \"]\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0return oss.str();\n    }\n    ```", "```cpp\n    std::string threadId()\n    {\n    \u00a0\u00a0\u00a0\u00a0\u00a0auto id = std::this_thread::get_id();\n    \u00a0\u00a0\u00a0\u00a0\u00a0std::ostringstream oss;\n    \u00a0\u00a0\u00a0\u00a0\u00a0oss << \"[\" << std::dec << id << \"]\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0return oss.str();\n    }\n    ```", "```cpp\n    extendedOstream oss;\n    oss << \"Integer: \" << 156 << std::endl;\n    oss << \"Float: \" << 156.12 << std::endl;\n    oss << \"Hexadecimal: \" << std::hex << std::showbase \n    \u00a0\u00a0\u00a0\u00a0<< std::uppercase << 0x2a << std::endl;\n    oss << \"Bool: \" << std::boolalpha << false << std::endl;\n    ```", "```cpp\n    std::thread thr1([]()\n    \u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0extendedOstream oss;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0oss << \"Integer: \" << 156 << std::endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0oss << \"Float: \" << 156.12 << std::endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0oss << \"Hexadecimal: \" << std::hex << std::showbase\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< std::uppercase << 0x2a << std::endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0oss << \"Bool: \" << std::boolalpha << false << std::endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0});\n    thr1.join();\n    ```", "```cpp\n    template< class CharT, class Traits = std::char_traits<CharT> >\n    class extended_streambuf : public std::basic_streambuf< CharT, Traits >\n    {\n    public:\n    \u00a0\u00a0\u00a0\u00a0int overflow( int c = EOF ) override\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!Traits::eq_int_type(c, EOF))\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return fputc(c, stdout);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return Traits::not_eof(c);\n    \u00a0\u00a0\u00a0\u00a0}\n    };\n    ```", "```cpp\n    template< class CharT, class Traits = std::char_traits<CharT> >\n    class extended_ostream : public std::basic_ostream< CharT, Traits >\n    {\n    public:\n    \u00a0\u00a0\u00a0\u00a0extended_ostream()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: std::basic_ostream< CharT, Traits >::basic_ostream(&buffer)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0, buffer()\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this->init(&buffer);\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0extended_streambuf< CharT, Traits >* rdbuf () const\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return (extended_streambuf< CharT, Traits >*)&buffer;\n    \u00a0\u00a0\u00a0\u00a0}\n    private:\n    \u00a0\u00a0\u00a0\u00a0extended_streambuf< CharT, Traits > buffer;\n    };\n    ```", "```cpp\n    class logger\n    {\n    public:\n    \u00a0\u00a0\u00a0\u00a0\u00a0logger()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: m_log()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0, writeAdditionalInfo(true)\n    \u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0template<typename T>\n    \u00a0\u00a0\u00a0\u00a0\u00a0logger& operator<<(const T& value)\n    \u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (writeAdditionalInfo)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::string time = fTime();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0auto id = threadId();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0m_log << time << id << value;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0writeAdditionalInfo = false;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0m_log << value;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return *this;\n    \u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0logger&\n    \u00a0\u00a0\u00a0\u00a0\u00a0operator<<(std::ostream& (*pfn)(std::ostream&))\n    \u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0writeAdditionalInfo = true;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pfn(m_log);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return *this;\n    \u00a0\u00a0\u00a0\u00a0\u00a0}\n    private:\n    \u00a0\u00a0\u00a0\u00a0\u00a0std::string fTime()\n    \u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0auto now = std::chrono::system_clock::now();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::time_t time = std::chrono::system_clock::to_time_t(now);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::ostringstream log;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::string strTime(std::ctime(&time));\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0strTime.pop_back();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0log << \"[\" << strTime << \"]\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return log.str();\n    \u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0std::string threadId()\n    \u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0auto id = std::this_thread::get_id();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::ostringstream log;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0log << \"[\" << std::dec << id << \"]\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return log.str();\n    \u00a0\u00a0\u00a0\u00a0\u00a0}\n    private:\n    \u00a0\u00a0\u00a0\u00a0\u00a0extended_ostream<char> m_log;\n    \u00a0\u00a0\u00a0\u00a0\u00a0bool writeAdditionalInfo;\n    };\n    ```", "```cpp\nHANDLE CreateFile( PCTSTR pszName, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DWORD\u00a0\u00a0dwDesiredAccess, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DWORD\u00a0\u00a0dwShareMode, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0PSECURITY_ATTRIBUTES psa, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DWORD\u00a0\u00a0dwCreationDisposition, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DWORD\u00a0\u00a0dwFlagsAndAttributes, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0HANDLE hFileTemplate);\n```", "```cpp\n0 // only for configuration changing\nGENERIC_READ // only reading\nGENERIC_WRITE // only for writing\nGENERIC_READ | GENERIC_WRITE // both for reading and writing\n```", "```cpp\n0 // only one application can open device simultaneously\nFILE_SHARE_READ // allows reading by multiple applications simultaneously\nFILE_SHARE_WRITE // allows writing by multiple applications simultaneously\nFILE_SHARE_READ | FILE_SHARE_WRITE // allows both reading and writing by multiple applications simultaneously\nFILE_SHARE_DELETE // allows moving or deleting by multiple applications simultaneously\n```", "```cpp\nCREATE_NEW // creates new file or fails if it is existing\nCREATE_ALWAYS // creates new file or overrides existing\nOPEN_EXISTING // opens file or fails if it is not exists\nOPEN_ALWAYS // opens or creates file\nTRUNCATE_EXISTING // opens existing file and truncates it or fails if it is not exists\n```", "```cpp\nFILE_FLAG_NO_BUFFERING // do not use cache\nFILE_FLAG_SEQUENTIAL_SCAN // tells the OS that you will read the file sequentially\nFILE_FLAG_RANDOM_ACCESS // tells the OS that you will not read the file in sequentially\nFILE_FLAG_WR1TE_THROUGH // write without cache but read with\n```", "```cpp\nFILE_FLAG_DELETE_ON_CLOSE // delete file after closing (for temporary files)\nFILE_FLAG_BACKUP_SEMANTICS // used for backup and recovery programs\nFILE_FLAG_POSIX_SEMANTICS // used to set case sensitive when creating or opening a file\nFILE_FLAG_OPEN_REPARSE_POINT // allows to open, read, write, and close files differently\nFILE_FLAG_OPEN_NO_RECALL // prevents the system from recovering the contents of the file from archive media\nFILE_FLAG_OVERLAPPED // allows to work with the device asynchronously\n```", "```cpp\nFILE_ATTRIBUTE_ARCHIVE // file should be deleted\nFILE_ATTRIBUTE_ENCRYPTED // file is encrypted\nFILE_ATTRIBUTE_HIDDEN // file is hidden\nFILE_ATTRIBUTE_NORMAL // other attributes are not set\nFILE_ATTRIBUTE_NOT_CONTENT_ INDEXED // file is being processed by the indexing service\nFILE_ATTRIBUTE_OFFLINE // file is transferred to archive media\nFILE_ATTRIBUTE_READONLY // only read access\nFILE_ATTRIBUTE_SYSTEM // system file\nFILE_ATTRIBUTE_TEMPORARY // temporary file\n```", "```cpp\n#include <iostream>\n#include <Windows.h>\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0\u00a0HANDLE hFile = CreateFile(TEXT(\"Test.txt\"), GENERIC_READ, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0FILE_SHARE_READ | FILE_SHARE_WRITE, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0NULL, OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);\n\u00a0\u00a0\u00a0\u00a0\u00a0if (INVALID_HANDLE_VALUE == hFile)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Failed to open file for reading\" << std::endl;\n\u00a0\u00a0\u00a0\u00a0\u00a0else\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Successfully opened file for reading\" << std::endl;\n\u00a0\u00a0\u00a0\u00a0\u00a0CloseHandle(hFile);\n\u00a0\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```cpp\nBYTE pb[20];\nDWORD dwNumBytes;\nReadFile(hFile, pb, 20, &dwNumBytes, NULL);\n```", "```cpp\nBYTE pb[20] = \"Some information\\0\";\nDWORD dwNumBytes;\nWriteFile(hFile, pb, 20, &dwNumBytes, NULL);\n```", "```cpp\n#include <iostream>\n#include <Windows.h>\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0\u00a0HANDLE hFile = CreateFile(TEXT(\"Test.txt\"), GENERIC_READ, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0FILE_SHARE_READ | FILE_SHARE_WRITE, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0NULL, OPEN_ALWAYS, FILE_FLAG_OVERLAPPED, NULL);\n\u00a0\u00a0\u00a0\u00a0\u00a0if (INVALID_HANDLE_VALUE == hFile)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Failed to open file for reading\" << std::endl;\n\u00a0\u00a0\u00a0\u00a0\u00a0else\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Successfully opened file for reading\" << std::endl;\n\u00a0\u00a0\u00a0\u00a0\u00a0CloseHandle(hFile);\n\u00a0\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```cpp\ntypedef struct _OVERLAPPED { \nDWORD\u00a0\u00a0Internal; // for error code \nDWORD\u00a0\u00a0InternalHigh; // for number of read bytes \nDWORD\u00a0\u00a0Offset; \nDWORD\u00a0\u00a0OffsetHigh; \nHANDLE hEvent; // handle to an event \n} OVERLAPPED, *LPOVERLAPPED;\n```", "```cpp\n#include <Windows.h>\n#include <WinError.h>\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0\u00a0HANDLE hFile = CreateFile(TEXT(\"Test.txt\"), GENERIC_READ,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0FILE_SHARE_READ | FILE_SHARE_WRITE, NULL,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0OPEN_ALWAYS, FILE_FLAG_OVERLAPPED, NULL);\n\u00a0\u00a0\u00a0\u00a0\u00a0BYTE bBuffer[100];\n\u00a0\u00a0\u00a0\u00a0\u00a0OVERLAPPED o = { 0 };\n\u00a0\u00a0\u00a0\u00a0\u00a0BOOL bResult = ReadFile(hFile, bBuffer, 100, NULL, &o);\n\u00a0\u00a0\u00a0\u00a0\u00a0DWORD dwError = GetLastError();\n\u00a0\u00a0\u00a0\u00a0\u00a0if (bResult && (dwError == ERROR_IO_PENDING))\n\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WaitForSingleObject(hFile, INFINITE);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bResult = TRUE;\n\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0CloseHandle(hFile);\n\u00a0\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```cpp\n#include <Windows.h>\n#include <synchapi.h>\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0\u00a0HANDLE hFile = CreateFile(TEXT(\"Test.txt\"), GENERIC_READ, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0FILE_SHARE_READ | FILE_SHARE_WRITE,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0NULL, OPEN_ALWAYS, FILE_FLAG_OVERLAPPED, NULL);\n\u00a0\u00a0\u00a0\u00a0\u00a0BYTE bInBuffer[10];\n\u00a0\u00a0\u00a0\u00a0\u00a0OVERLAPPED o = { 0 };\n\u00a0\u00a0\u00a0\u00a0\u00a0o.hEvent = CreateEvent(NULL,TRUE,FALSE,\"IOEvent\");\n\u00a0\u00a0\u00a0\u00a0\u00a0ReadFile(hFile, bInBuffer, 10, NULL, &o);\n\u00a0\u00a0\u00a0\u00a0\u00a0///// do some work\n\u00a0\u00a0\u00a0\u00a0\u00a0HANDLE hEvent = o.hEvent;\n\u00a0\u00a0\u00a0\u00a0\u00a0WaitForSingleObject(hEvent, INFINITE);\n\u00a0\u00a0\u00a0\u00a0\u00a0CloseHandle(hFile);\n\u00a0\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```cpp\nVOID WINAPI \nCompletionRoutine(DWORD dwError,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DWORD dwNumBytes,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0OVERLAPPED* po);\n```", "```cpp\nHANDLE \nCreateIoCompletionPort(HANDLE hFile,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0HANDLE hExistingCompletionPort,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ULONG_PTR CompletionKey,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DWORD dwNumberOfConcurrentThreads);\n```", "```cpp\n#include <Windows.h>\n#include <synchapi.h>\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0HANDLE hFile = CreateFile(TEXT(\"Test.txt\"), GENERIC_READ,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0FILE_SHARE_READ | FILE_SHARE_WRITE,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0NULL, OPEN_ALWAYS, FILE_FLAG_OVERLAPPED, NULL);\n\u00a0\u00a0\u00a0\u00a0HANDLE m_hIOcp = CreateIoCompletionPort(INVALID_HANDLE_VALUE, NULL, 0, 0);\n\u00a0\u00a0\u00a0\u00a0CreateIoCompletionPort(hFile, m_hIOcp, 1, 0);\n\n\u00a0\u00a0\u00a0\u00a0BYTE bInBuffer[10];\n\u00a0\u00a0\u00a0\u00a0OVERLAPPED o = { 0 };\n\u00a0\u00a0\u00a0\u00a0ReadFile(hFile, bInBuffer, 10, NULL, &o);\n\n\u00a0\u00a0\u00a0\u00a0DWORD dwNumBytes;\n\u00a0\u00a0\u00a0\u00a0ULONG_PTR completionKey;\n\u00a0\u00a0\u00a0\u00a0GetQueuedCompletionStatus(m_hIOcp, &dwNumBytes, &completionKey, (OVERLAPPED**) &o, INFINITE);\n\u00a0\u00a0\u00a0\u00a0CloseHandle(hFile);\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```cpp\nint\u00a0open\u00a0(const char *filename, int\u00a0flags[, mode_t\u00a0mode])\n```", "```cpp\nstruct aiocb \n{\n\u00a0\u00a0\u00a0\u00a0int aio_fildes;\n\u00a0\u00a0\u00a0\u00a0off_t aio_offset;\n\u00a0\u00a0\u00a0\u00a0volatile void *aio_buf;\n\u00a0\u00a0\u00a0\u00a0size_t aio_nbytes;\n\u00a0\u00a0\u00a0\u00a0int aio_reqprio;\n\u00a0\u00a0\u00a0\u00a0struct sigevent aio_sigevent;\n\u00a0\u00a0\u00a0\u00a0int aio_lio_opcode;\n};\n```", "```cpp\nstd::string fileContent;\nconstexpr int BUF_SIZE = 20;\nfileContent.resize(BUF_SIZE, 0);\naiocb aiocbObj;\naiocbObj.aio_fildes = open(\"test.txt\", O_RDONLY);\nif (aiocbObj.aio_fildes == -1)\n{\n\u00a0\u00a0\u00a0\u00a0\u00a0std::cerr << \"Failed to open file\" << std::endl;\n\u00a0\u00a0\u00a0\u00a0\u00a0return -1;\n}\naiocbObj.aio_buf = const_cast<char*>(fileContent.c_str());\naiocbObj.aio_nbytes = BUF_SIZE;\naiocbObj.aio_reqprio = 0;\naiocbObj.aio_offset = 0;\naiocbObj.aio_sigevent.sigev_notify = SIGEV_SIGNAL;\naiocbObj.aio_sigevent.sigev_signo = SIGUSR1;\naiocbObj.aio_sigevent.sigev_value.sival_ptr = &aiocbObj;\n```", "```cpp\n    #include <aio.h>\n    #include <signal.h>\n    #include <fcntl.h>\n    #include <unistd.h>\n    #include <iostream>\n    #include <chrono>\n    #include <thread>\n    ```", "```cpp\n    bool isDone{};\n    ```", "```cpp\n    void name(int number, siginfo_t* si, void* additional)\n    ```", "```cpp\n    void\n    aioSigHandler(int no, siginfo_t* si, void*)\n    {\n    \u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Signo: \" << no << std::endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0if (si->si_code == SI_ASYNCIO)\n    \u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"I/O completion signal received\" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0isDone = true;\n    }\n    ```", "```cpp\n    bool \n    initSigAct(struct sigaction& item)\n    {\n    \u00a0\u00a0\u00a0\u00a0\u00a0item.sa_flags = SA_RESTART | SA_SIGINFO;\n    \u00a0\u00a0\u00a0\u00a0\u00a0item.sa_sigaction = aioSigHandler;\n    \u00a0\u00a0\u00a0\u00a0\u00a0if (-1 == sigaction(SIGUSR1, &item, NULL))\n    \u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cerr << \"sigaction usr1 failed\" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return false;\n    \u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Successfully set up a async IO handler to SIGUSR1 action\" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0return true;\n    }\n    ```", "```cpp\n    void \n    fillAiocb(aiocb& item, const int& fileDescriptor,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0char* buffer, const int& bufSize)\n    {\n    \u00a0\u00a0\u00a0\u00a0\u00a0item.aio_fildes = fileDescriptor;\n    \u00a0\u00a0\u00a0\u00a0\u00a0item.aio_buf = static_cast<void*>(buffer);\n    \u00a0\u00a0\u00a0\u00a0\u00a0item.aio_nbytes = bufSize;\n    \u00a0\u00a0\u00a0\u00a0\u00a0item.aio_reqprio = 0;\n    \u00a0\u00a0\u00a0\u00a0\u00a0item.aio_offset = 0;\n    \u00a0\u00a0\u00a0\u00a0\u00a0item.aio_sigevent.sigev_notify = SIGEV_SIGNAL;\n    \u00a0\u00a0\u00a0\u00a0\u00a0item.aio_sigevent.sigev_signo = SIGUSR1;\n    \u00a0\u00a0\u00a0\u00a0\u00a0item.aio_sigevent.sigev_value.sival_ptr = &item;\n    }\n    ```", "```cpp\n    constexpr int bufSize = 100;\n    char* buffer = new char(bufSize);\n    if (!buffer)\n    {\n    \u00a0\u00a0\u00a0\u00a0\u00a0std::cerr << \"Failed to allocate buffer\" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0return -1;\n    }\n    ```", "```cpp\n    const std::string fileName(\"Test.txt\");\n    int descriptor = open(fileName.c_str(), O_RDONLY);\n    if (-1 == descriptor)\n    {\n    \u00a0\u00a0\u00a0\u00a0\u00a0std::cerr << \"Failed to opene file for reading\" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0return -1;\n    }\n    std::cout << \"Successfully opened file for reading\" << std::endl;\n    ```", "```cpp\n    struct sigaction sa;\n    if (!initSigAct(sa))\n    {\n    \u00a0\u00a0\u00a0\u00a0\u00a0std::cerr << \"failed registering signal\" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0return -1;\n    }\n    ```", "```cpp\n    aiocb aiocbObj;\n    fillAiocb(aiocbObj, descriptor, buffer, bufSize);\n    ```", "```cpp\n    if (-1 == aio_read(&aiocbObj))\n    {\n    \u00a0\u00a0\u00a0\u00a0\u00a0std::cerr << \"aio_read failed\" << std::endl;\n    }\n    ```", "```cpp\n    while (!isDone)\n    {\n    \u00a0\u00a0\u00a0\u00a0\u00a0using namespace std::chrono_literals;\n    \u00a0\u00a0\u00a0\u00a0\u00a0std::this_thread::sleep_for(3ms);\n    }\n    std::cout << \"Successfully finished read operation. Buffer: \" << std::endl << buffer; \n    ```", "```cpp\n    a1a\"1 a1\\a1 a1\ta1 \n    a1a\"1 a1\\a1 a1\ta1 \n    a1a\"1 a1\\a1 a1\ta1 \n    a1a\"1 a1\\a1 a1\ta1 \n    a1a\"1 a1\\a1 a1\ta1 \n    a1a\"1 a1\\a1 a1\ta1 \n    a1a\"1 a1\\a1 a1\ta1 \n    a1a\"1 a1\\a1 a1\ta1 \n    a1a\"1 a1\\a1 a1\ta1 \n    a1a\"1 a1\\a1 a1\ta1 \n    a1a\"1 a1\\a1 a1\ta1 \n    a1a\"1 a1\\a1 a1\ta1 \n    a1a\"1 a1\\a1 a1\ta1 \n    a1a\"1 a1\\a1 a1\ta1\n    ```", "```cpp\n#ifdef WIN\n#include <WinAIO.hpp>\n#else\n#include <LinAIO.hpp>\n#endif\n```", "```cpp\nboost::asio::io_service io_service1;\nio_service1.run();\nboost::asio::io_service io_service2;\nio_service2.run_one();\nboost::asio::io_service io_service3;\nio_service3.poll();\nboost::asio::io_service io_service4;\nio_service4.poll_one();\n```", "```cpp\nboost::asio::io_service io_service1;\nboost::asio::io_service::work work(io_service1);\nio_service1.run();\nboost::asio::io_service io_service2;\nboost::asio::io_service::work work(io_service2);\nio_service2.poll();\n```", "```cpp\nboost::asio::io_service ioService;\ntcp::socket socket;\nint length = 15;\nchar* msg = new char(length);\nmsg = \"Hello, world!\";\nauto postHandler = [=]()\n{\n\u00a0\u00a0\u00a0\u00a0\u00a0auto writeHandler = [=](boost::system::error_code ec, std::size_t length)\n\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (ec)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0socket_.close();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// wrote length characters\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0};\n\u00a0\u00a0\u00a0\u00a0\u00a0boost::asio::async_write(socket, boost::asio::buffer(msg, length), writeHandler);\n};\nioService.post(postHandler);\n```", "```cpp\nstd::cout << \"Counter: \" << counter << std::endl;\n```", "```cpp\nstd::cout << \"Counter: \";\nstd::cout << counter;\nstd::cout << std::endl;\n```", "```cpp\nstd::stringsream ss;\nss << \"Counter: \" << counter << std::endl;\nstd::cout << ss.str();\n```", "```cpp\n    #include <iostream> // for std::cout\n    #include <thread>\u00a0\u00a0\u00a0// for std::thread\n    #include <mutex>\u00a0\u00a0\u00a0\u00a0// for std::mutex\n    #include <sstream>\u00a0\u00a0// for std::ostringstream\n    ```", "```cpp\n    mtcout cout;\n    cout << msg << std::endl;\n    cout.write();\n    ```", "```cpp\n    mtcout{} << msg << std::endl; \n    ```", "```cpp\n    class mtcout : public std::ostringstream\n    {\n    public:\n    \u00a0\u00a0\u00a0\u00a0\u00a0mtcout() = default;\n    \u00a0\u00a0\u00a0\u00a0\u00a0~mtcout()\n    \u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0std::lock_guard<std::mutex> lock(m_mux);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << std::this_thread::get_id() << \" \" << this->str();\n    \u00a0\u00a0\u00a0\u00a0\u00a0}\n    private:\n    \u00a0\u00a0\u00a0\u00a0\u00a0static std::mutex m_mux;\n    };\n    ```", "```cpp\n    std::mutex mtcout::m_mux; \n    ```", "```cpp\n    auto func = [](const std::string msg)\n    {\n    \u00a0\u00a0\u00a0\u00a0\u00a0using namespace std::chrono_literals;\n    \u00a0\u00a0\u00a0\u00a0\u00a0for (int i = 0; i < 1000; ++i)\n    \u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mtcout{} << msg << std::endl;\n    //\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << std::this_thread::get_id() << \" \" << msg << std::endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0}\n    };\n    ```", "```cpp\n    std::thread thr1(func, \"111111111\");\n    std::thread thr2(func, \"222222222\");\n    std::thread thr3(func, \"333333333\");\n    std::thread thr4(func, \"444444444\");\n    thr1.join();\n    thr2.join();\n    thr3.join();\n    thr4.join();\n    ```", "```cpp\nstd::cout << std::this_thread::get_id();\nstd::cout << \" \";\nstd::cout << msg;\nstd::cout << std::endl;\n```", "```cpp\n#define [name] [expression]\n```", "```cpp\n#define MAX_NUMBER 15\n```", "```cpp\nif (val < MAX_NUMBER)\nwhile (val < MAX_NUMBER)\n```", "```cpp\nif (val < 15)\nwhile (val < 15)\n```", "```cpp\n#define max(a, b) a < b ? b : a\n```", "```cpp\n\nint res = max (5, 3);\n\nstd::cout << (max (a, b));\n```", "```cpp\n\nint res = 5 < 3 ? 3 : 5;\n\nstd::cout << (a < b ? b : a);\n\n```", "```cpp\n#define max(a, b) \\\na < b ? b : a\n```", "```cpp\n[dateTtime][threadId][logLevel][file:line][function] | message\n```", "```cpp\n    [dateTtime][threadId][logLevel][file:line: ][function] | message\n    ```"]