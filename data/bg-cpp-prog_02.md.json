["```cpp\n    int i = 4; \n    i = i / 2; \n    std::cout << \"The result is\" << i << std::endl;\n```", "```cpp\n    int i=4;i=i/2; std::cout<<\"The result is \"<<i<<std::endl;\n```", "```cpp\n    if (/* some test */) { \n        // the test is true  \n        if (/* some other test */) { \n            // second test is true  \n        } else { \n            // second test is false    \n        } \n    } else { \n        // the test is false  \n    }\n```", "```cpp\n        if (/* some test */)  \n        { \n            // the test is true  \n            if (/* some other test */)  \n            { \n                // second test is true   \n            }  \n            else  \n            { \n                // second test is false     \n            } \n        }  \n        else  \n        { \n           // the test is false  \n        }\n```", "```cpp\n    if (x < 0)  \n    { \n       // x < 0 \n       /* lots of code */ \n    }  // if (x < 0) \n\n    else  \n    { \n       // x >= 0 \n       /* lots of code */ \n    }  // if (x < 0)\n```", "```cpp\n    int i; \n    i = 6 * 7;\n```", "```cpp\n    int i; \n    i = 6 * 7;\n```", "```cpp\n    6 * 7 = i;\n```", "```cpp\n    42;\n    std::sqrt(2);\n```", "```cpp\n    int a = 9;\n    int b = 4;\n    int c;\n    c = a + 8, b + 1;\n```", "```cpp\n    c = (a + 8, b + 1);\n```", "```cpp\n    numberOfCustomers \n    NumberOfCustomers \n    number_of_customers\n```", "```cpp\n    int i; \n    i++;           // C4700 uninitialized local variable 'i' used \n    std::cout << i;\n```", "```cpp\n    int i = 1; \n    int j = int(2); \n    int k(3);\n```", "```cpp\n    int pos = +1; \n    int neg = -1; \n    double micro = 1e-6; \n    double unit = 1.; \n    std::string name = \"Richard\";\n```", "```cpp\n    const double pi = 3.1415; \n    double radius = 5.0; \n    double circumference = 2 * pi * radius;\n```", "```cpp\n    // add more precision, generates error C3892 \n    pi += 0.00009265359;\n```", "```cpp\n    #include <cmath> \n    const double sqrtOf2 = std::sqrt(2);\n```", "```cpp\n    int values[5];\n```", "```cpp\n    const int size = 5;  \n    int values[size];\n```", "```cpp\n    constexpr double pi = 3.1415; \n    constexpr double twopi = 2 * pi;\n```", "```cpp\n    constexpr int triang(int i) \n    { \n       return (i == 0) ? 0 : triang(i - 1) + i;\n    }\n```", "```cpp\n    enum suits {clubs, diamonds, hearts, spades};\n```", "```cpp\n    enum suits : char {clubs, diamonds, hearts, spades};\n```", "```cpp\n    suits card1 = diamonds; \n    suits card2 = suits::diamonds;\n```", "```cpp\n    enum class suits : char {clubs, diamonds, hearts, spades};\n```", "```cpp\n    suits card = suits::diamonds; \n    char c = card + 10; // errors C2784 and C2676\n```", "```cpp\n    enum ports {ftp=21, ssh, telnet, smtp=25, http=80};\n```", "```cpp\n    void stack(suits card) \n    { \n        // we know that card is only one of four values \n    }\n```", "```cpp\n    int *p; \n    int i = 42; \n    p = &i;\n```", "```cpp\n    int* p1, p2;\n```", "```cpp\n    int *p1;  \n    int p2;\n```", "```cpp\n    int *p1, *p2;\n```", "```cpp\n    namespace utilities \n    { \n        bool poll_data() \n        { \n            // code that returns a bool \n        } \n        int get_data() \n        { \n            // code that returns an integer \n        } \n    }\n```", "```cpp\n    if (utilities::poll_data()) \n    { \n        int i = utilities::get_data(); \n        // use i here... \n    }\n```", "```cpp\n    namespace utilities \n    { \n        // declare the functions \n        bool poll_data(); \n        int get_data(); \n    } \n\n    //define the functions \n    bool utilities::poll_data() \n    { \n        // code that returns a bool \n    } \n\n    int utilities::get_data() \n    { \n       // code that returns an integer \n    }\n```", "```cpp\n    namespace utilities \n    { \n        bool poll_data(); \n        int get_data(); \n\n        namespace V2 \n        { \n            bool poll_data(); \n            int get_data(); \n            int new_feature(); \n        } \n    }\n```", "```cpp\n    namespace utilities \n    { \n        inline namespace V1 \n        { \n            bool poll_data(); \n            int get_data(); \n        } \n\n        namespace V2 \n        { \n            bool poll_data(); \n            int get_data(); \n            int new_feature(); \n        } \n    }\n```", "```cpp\n    using namespace utilities; \n    int i = get_data(); \n    int j = V2::get_data();\n```", "```cpp\n    using std::cout; \n    using std::endl; \n    cout << \"Hello, World!\" << endl;\n```", "```cpp\n    namespace utilities \n    { \n        namespace V2 \n        { \n            void print_data(); \n        } \n    }\n```", "```cpp\n    namespace com_packtpub_richard_grimes \n    { \n        int get_data(); \n    }\n```", "```cpp\n    int i = com_packtpub_richard_grimes::get_data();\n```", "```cpp\n    namespace packtRG = com_packtpub_richard_grimes; \n    int i = packtRG::get_data();\n```", "```cpp\n    int version = 42; \n\n    void print_version() \n    { \n        std::cout << \"Version = \" << ::version << std::endl; \n    }\n```", "```cpp\n    // in version.h \n    extern int version; \n\n    // in version.cpp \n    #include \"version.h\"  \n    version = 17; \n\n    // print.cpp \n    #include \"version.h\" \n    void print_version() \n    { \n        std::cout << \"Version = \" << ::version << std::endl; \n    }\n```", "```cpp\n    // in print.h \n    void usage(); \n\n    // print.cpp \n    #include \"version.h\" \n    std::string app_name = \"My Utility\"; \n    void print_version() \n    { \n       std::cout << \"Version = \" << ::version << std::endl; \n    } \n\n    void usage() \n    { \n       std::cout << app_name << \" \"; \n       print_version(); \n    }\n```", "```cpp\n    int inc(int i) \n    { \n        static int value; \n        value += i; \n        return value; \n    } \n\n    int main() \n    { \n        std::cout << inc(10) << std::endl; \n        std::cout << inc(5) << std::endl; \n    }\n```", "```cpp\n    int a = b + c * d;\n```", "```cpp\n    int a = b + (c * d);\n```", "```cpp\n    int a = b + c + d;\n```", "```cpp\n    int a = ((b + c) + d);\n```", "```cpp\n    int a = b() + c() + d();\n```", "```cpp\n    (a / b) * b + (a % b)\n```", "```cpp\n    int height = 480; \n    int width = 640; \n    float aspect_ratio = width / height;\n```", "```cpp\n    a = ++b;\n```", "```cpp\n    a = (b = b + 1);\n```", "```cpp\n    a = b++;\n```", "```cpp\n    int t; \n    a = (t = b, b = b + 1, t);\n```", "```cpp\n    unsigned int a = 0x0a0a; // this is the binary 0000101000001010 \n    unsigned int b = 0x00ff; // this is the binary 0000000000001111 \n    unsigned int c = a & b;  // this is the binary 0000000000001010 \n    std::cout << std::hex << std::showbase << c << std::endl;\n```", "```cpp\n    unsigned int a = 0x0a0a; // this is the binary 0000101000001010 \n    unsigned int b = 0x00ff; // this is the binary 0000000000001111 \n    unsigned int c = a & b;  // this is the binary 0000101000001111 \n    std::cout << std::hex << std::showbase << c << std::endl;\n```", "```cpp\n    unsigned int flags = 0x0a0a; // 0000101000001010 \n    unsigned int test = 0x00ff;  // 0000000000001111 \n\n    // 0000101000001111 is (flags & test) \n    if ((flags & test) == flags)  \n    { \n        // code for when all the flags bits are set in test \n    } \n    if ((flags & test) != 0) \n    { \n        // code for when some or all the flag bits are set in test  \n    }\n```", "```cpp\n    int value = 0xf1; \n    int flags = 0x02; \n    int result = value ^ flags; // 0xf3 \n    std::cout << std::hex << result << std::endl;\n```", "```cpp\n    double x = 1.000001 * 1000000000000; \n    double y = 1000001000000; \n    if (x == y) std::cout << \"numbers are the same\";\n```", "```cpp\n    int x = 10; \n    int y = 11; \n    bool b = (x > y); \n    if (b) std::cout << \"numbers same\"; \n    else   std::cout << \"numbers not same\";\n```", "```cpp\n    if (!b) std::cout << \"numbers not same\"; \n    else    std::cout << \"numbers same\";\n```", "```cpp\n    int x = 10, y = 10, z = 9; \n    if ((x == y) || (y < z)) \n        std::cout << \"one or both are true\";\n```", "```cpp\n    if ((x != 0) && (0.5 > 1/x))  \n    { \n        // reciprocal is less than 0.5 \n    }\n```", "```cpp\n    unsigned short s1 = 0x0010; \n    unsigned short s2 = s1 << 8; \n    std::cout << std::hex << std::showbase; \n    std::cout << s2 << std::endl; \n    // 0x1000  \n    s2 = s2 << 3; \n    std::cout << s2 << std::endl; \n    // 0x8000\n```", "```cpp\n    s2 = s2 << 1; \n    std::cout << s2 << std::endl; \n    // 0\n```", "```cpp\n    int x = 10; \n    x = x + 10;\n```", "```cpp\n    int x = 10; \n    x += 10;\n```", "```cpp\n    i *= 8; \n    i <<= 3;\n```", "```cpp\n    int i; \n    std::cin >> i; \n    if (i > 10) std::cout << \"much too high!\" << std::endl;\n```", "```cpp\n    int i; \n    std::cin >> i; \n    if (i > 10) std::cout << \"much too high!\" << std::endl; \n    else        std::cout << \"within range\" << std::endl;\n```", "```cpp\n    int i; \n    std::cin >> i; \n    if (i == -1) std::cout << \"typed -1\" << endl; \n    std::cout << \"i = \" << i << endl;\n```", "```cpp\n    int i; \n    std::cin >> i; \n    if (i = -1) std::cout << \"typed -1\" << endl; \n    std::cout << \"i = \" << i << endl;\n```", "```cpp\n    if (-1 == i) std::cout << \"typed -1\" << endl;\n```", "```cpp\n    if (-1 = i) std::cout << \"typed -1\" << endl;\n```", "```cpp\n    if (int i = getValue()) {    \n        // i != 0    // can use i here  \n    } else {    \n        // i == 0    // can use i here  \n    }\n```", "```cpp\n    int max; \n    if (a > b) max = a; \n    else       max = b;\n```", "```cpp\n    int max = (a > b) ? a : b;\n```", "```cpp\n    int number;  \n    std::cin  >> number; \n    std::cout << \"there \" \n              << ((number == 1) ? \"is \" : \"are \")  \n              << number << \" item\"            \n              << ((number == 1) ? \"\" : \"s\") \n              << std::endl;\n```", "```cpp\n    int i = 10, j = 0; \n    ((i < j) ? i : j) = 7; \n    // i is 10, j is 7 \n\n    i = 0, j = 10; \n    ((i < j) ? i : j) = 7; \n    // i is 7, j is 10\n```", "```cpp\n    int i; \n    std::cin >> i; \n    switch(i) \n    { \n        case 1:  \n            std::cout << \"one\" << std::endl; \n            break; \n        case 2:  \n            std::cout << \"two\" << std::endl; \n            break; \n        default: \n            std::cout << \"other\" << std::endl; \n    }\n```", "```cpp\n    char c; \n    std::cin >> c; \n    switch(c) \n    { \n        case 'a':  \n            std::cout << \"character a\" << std::endl; \n            break; \n        case 'z':   \n            std::cout << \"character z\" << std::endl; \n            break; \n        default: \n            std::cout << \"other character\" << std::endl; \n    }\n```", "```cpp\n    switch(i) \n    { \n        case 1:  \n            std::cout << \"one\" << std::endl; \n            // fall thru \n        case 2:  \n            std::cout << \"less than three\" << std::endl; \n            break; \n        case 3:  \n            std::cout << \"three\" << std::endl; \n            break; \n        case 4: \n            break; \n            default: \n            std::cout << \"other\" << std::endl; \n    }\n```", "```cpp\n    enum suits { clubs, diamonds, hearts, spades }; \n\n    void print_name(suits card) \n    { \n        switch(card) \n        { \n            case suits::clubs: \n                std::cout << \"card is a club\"; \n                break; \n            default: \n                std::cout << \"card is not a club\"; \n        } \n    }\n```", "```cpp\n    for (init_expression; condition; loop_expression) \n        loop_statement;\n```", "```cpp\n    for (int i = 0; i < 10; ++i)   \n    { \n        std::cout << i; \n    }\n```", "```cpp\nfor (int i = 0; ; ++i)  \n{ \n   std::cout << i << std::endl; \n   if (i == 10) break; \n}\n```", "```cpp\nfor (;;)  \n{ \n   // code \n}\n```", "```cpp\nfor (int i = -1; poll_data(); i = get_data()) \n{ \n   if (i != -1) std::cout << i << std::endl; \n}\n```", "```cpp\nfor (; poll_data() ;) \n{ \n   int i = get_data();  \n   std::cout << i << std::endl; \n}\n```", "```cpp\nfor (float divisor = 0.f; divisor < 10.f; ++divisor)  \n{ \n   std::cout << divisor; \n   if (divisor == 0)  \n   {  \n      std::cout << std::endl; \n      continue; \n   } \n   std::cout << \" \" << (1 / divisor) << std::endl; \n}\n```", "```cpp\nfor (for_declaration : expression) loop_statement;\n```", "```cpp\nusing namespace std; \nvector<string> beatles = { \"John\", \"Paul\", \"George\", \"Ringo\" }; \n\nfor (int i = 0; i < beatles.size(); ++i)  \n{ \n   cout << beatles.at(i) << endl; \n}\n```", "```cpp\nvector<string> beatles = { \"John\", \"Paul\", \"George\", \"Ringo\" }; \n\nfor (string musician : beatles)  \n{ \n   cout << musician << endl; \n}\n```", "```cpp\nint birth_years[] = { 1940, 1942, 1943, 1940 }; \n\nfor (int birth_year : birth_years)  \n{ \n   cout << birth_year << endl; \n}\n```", "```cpp\nfor (; poll_data() ;) \n{ \n   int i = get_data();  \n   std::cout << i << std::endl; \n}\n```", "```cpp\nwhile (poll_data()) \n{ \n   int i = get_data();  \n   std::cout << i << std::endl; \n}\n```", "```cpp\nint i = 5; \ndo \n{ \n   std::cout << i-- << std::endl; \n} while (i > 0);\n```", "```cpp\n    int main() \n    { \n        for (int i = 0; i < 10; ++i) \n        { \n            std::cout << i << std::endl; \n            if (i == 5) goto end; \n        } \n\n    end:\n        std::cout << \"end\"; \n    }\n```", "```cpp\n    #include <iostream> \n    #include <string> \n\n    using namespace std;\n```", "```cpp\n    int main(int argc, char *argv[]) \n    { \n    }\n```", "```cpp\n    if (argc != 4) \n    { \n        usage(); \n        return 1; \n    }\n```", "```cpp\n    void usage() \n    { \n        cout << endl; \n        cout << \"calc arg1 op arg2\" << endl; \n        cout << \"arg1 and arg2 are the arguments\" << endl; \n        cout << \"op is an operator, one of + - / or *\" << endl; \n    }\n```", "```cpp\nC:\\Beginning_C++Chapter_02\\cl /EHsc calc.cpp\n```", "```cpp\n'cl' is not recognized as an internal or external command,  \noperable program or batch file.\n```", "```cpp\nC:\\Beginning_C++Chapter_02>calc 6 * 7 \n\nC:\\Beginning_C++Chapter_02>calc 6 * 7 / 3 \n\ncalc arg1 op arg2 \narg1 and arg2 are the arguments \nop is an operator, one of + - / or *\n```", "```cpp\n    string opArg = argv[2]; \n    if (opArg.length() > 1) \n    { \n        cout << endl << \"operator should be a single character\" << endl; \n        usage(); \n        return 1; \n    }\n```", "```cpp\n    char op = opArg.at(0); \n    if (op == 44 || op == 46 || op < 42 || op > 47) \n    { \n        cout << endl << \"operator not recognized\" << endl; \n        usage(); \n        return 1; \n    }\n```", "```cpp\n if (op == ',' || op == '.' || op < '+' || op > '/') \n    { \n        cout << endl << \"operator not recognized\" << endl; \n        usage(); \n        return 1; \n    }\n```", "```cpp\n    double arg1 = atof(argv[1]); \n    double arg2 = atof(argv[3]); \n    double result = 0;\n```", "```cpp\n    double arg1 = atof(argv[1]); \n    double arg2 = atof(argv[3]); \n    double result = 0; \n\n    switch(op) \n    { \n    }\n```", "```cpp\n    switch (op) \n    { \n case '+': result = arg1 + arg2; break; case '-': result = arg1 - arg2; break; case '*': result = arg1 * arg2; break; \n    }\n```", "```cpp\n    cout << endl; \n    cout << arg1 << \" \" << op << \" \" << arg2; \n    cout << \" = \" << result << endl;\n```", "```cpp\n case '/': result = arg1 / arg2; break;\n```", "```cpp\nC:\\Beginning_C++Chapter_02>calc 1 / 0 \n1 / 0 = inf\n```", "```cpp\n    case '/': \n if (arg2 == 0) { cout << endl << \"divide by zero!\" << endl; return 1; } else { \n        result = arg1 / arg2; \n } \n    break;\n```"]