- en: Chapter 4. Constraints
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章 约束
- en: What are constraints?
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 约束是什么？
- en: Constraints are basic physical actors in Unreal Engine 4\. Imagine that physical
    rules need something to be presented with, such as a tool, switch, calculator,
    or container. It's called **physic actor**, and physic actors that are responsible
    for simulating the physical behavior between two objects are known as physics
    constraint actor.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 约束是Unreal Engine 4中的基本物理演员。想象一下，物理规则需要某种东西来展示，比如工具、开关、计算器或容器。它被称为**物理演员**，负责在两个对象之间模拟物理行为的物理演员被称为物理约束演员。
- en: It works in a similar way to a minicomputer. You can connect two inputs to it,
    and it calculates how these two should play with the physical rules in the game.
    Finally, it applies the changes to the object as real-time processing during the
    game play.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 它的工作方式类似于小型计算机。您可以将两个输入连接到它，并计算这两个输入应该如何根据游戏中的物理规则进行交互。最后，它在游戏过程中实时处理时将更改应用到对象上。
- en: The first physics constraint actor experience
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一次物理约束演员体验
- en: 'Before we start working in Unreal Editor, we will need to have a project to
    work with. Perform the following steps:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始在Unreal编辑器中工作之前，我们需要有一个可以工作的项目。执行以下步骤：
- en: First, open Unreal Editor by clicking on the **Launch** button from Unreal Engine
    launcher.
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，通过点击Unreal Engine启动器中的**启动**按钮来打开Unreal编辑器。
- en: Start a new project from **Project** browser by selecting the **New Project**
    tab. Select **First Person** and make sure that **With Starter Content** is selected
    and give the project a name (`constraints_test`).
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过从**项目**浏览器中选择**新建项目**选项卡来启动一个新项目。选择**第一人称**并确保**包含启动内容**被选中，并为项目命名（`constraints_test`）。
- en: Once you are finished, locate the two cubes on your view. Select one and then
    click on the small icon in the top-right corner of your view:![The first physics
    constraint actor experience](img/image00277.jpeg)
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，在视图中定位两个立方体。选择一个，然后点击视图中右上角的小图标：![第一次物理约束演员体验](img/image00277.jpeg)
- en: Now, you have four viewports on your screen. It's good practice when you are
    working with constraints to check your stage from four views. Now, select one
    of the cubes, middle-click on the top view, and press the *F* key. This automatically
    navigates all your viewports so that they are all focused on your actual selection.![The
    first physics constraint actor experience](img/image00278.jpeg)
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您的屏幕上有四个视口。当您使用约束时，从四个视角检查您的舞台是一个好习惯。现在，选择一个立方体，在顶部视图中中间点击，然后按**F**键。这将自动导航所有视口，使它们都聚焦于您的实际选择。![第一次物理约束演员体验](img/image00278.jpeg)
- en: Now, we need to move one cube onto another one. Also, rotate the upper cube
    so that it fits the same angle as the one after it. Use the move and rotate tools
    to create your stage, as shown in the following screenshot. As you can see, the
    upper cube is about three times further away from the lower cube:![The first physics
    constraint actor experience](img/image00279.jpeg)
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要将一个立方体移动到另一个立方体上。同时，旋转上面的立方体，使其与后面的立方体角度相同。使用移动和旋转工具创建您的舞台，如下面的截图所示。如您所见，上面的立方体大约是下面立方体的三倍远：![第一次物理约束演员体验](img/image00279.jpeg)
- en: Let's click on the area in the top-right corner of your **Perspective** view
    to expand it and press **Play**. You will see one cube just fall on the lower
    cube. This is caused by gravity. Also, you can move the cubes by shooting balls
    at them. We need to disable this physic rules for the upper cube. Now, click on
    **Stop** to exit the play mode. Select the upper cube and uncheck **Simulate Physics**
    in **Details** on the right-hand side of your editor. Then, click on **Play**
    again.![The first physics constraint actor experience](img/image00280.jpeg)
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们点击**透视**视图右上角的位置来展开它，并按**播放**。您会看到一个立方体直接落在下面的立方体上。这是由于重力造成的。您还可以通过向它们射击球来移动立方体。我们需要禁用上层立方体的这个物理规则。现在，点击**停止**退出播放模式。选择上层立方体，在编辑器右侧的**细节**中取消选中**模拟物理**。然后，再次点击**播放**。![第一次物理约束演员体验](img/image00280.jpeg)
- en: Now, the upper cube not only falls, but also, when you shoot at it, it doesn't
    move. This gives an ideal location to hang the other cube to this one. For this
    purpose, Unreal Engine defines some tools (known as **PhysX Constraint**). These
    tools allow you to simulate reality based on the physical behavior and the mode
    of the game world. Then, switch back to four views, click on **All Classes** in
    **Modes**, and locate **PhysicsConstraintActor** near **All Classes**:![The first
    physics constraint actor experience](img/image00281.jpeg)
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，上方的立方体不仅会下落，而且当你射击它时，它不会移动。这为将另一个立方体悬挂到这个立方体上提供了一个理想的位置。为此目的，Unreal Engine定义了一些工具（称为**PhysX约束**）。这些工具允许您根据物理行为和游戏世界的模式模拟现实。然后，切换回四视图，在**模式**中点击**所有类**，并在**所有类**附近找到**PhysicsConstraintActor**：![第一次物理约束演员体验](img/image00281.jpeg)
- en: 'Drag and drop this actor and place it in the middle of the cubes. Locate the
    **Constraint** section from the right-hand side list. Each physics constraint
    actor needs two objects to operate with. This means that we need to give the actor
    object names and then this actor presents a physical-based action in the game
    world during the game play. How we do this? You will find two similar actors in
    the **Constraint** section: **Constraint Actor 1** and **Constraint Actor 2**.
    Here, we can define objects. Simply click on the picker icon and then on the upper
    cube for **Constraint Actor 1** and another cube for **Constraint Actor 2**, as
    shown in the following screenshot:![The first physics constraint actor experience](img/image00282.jpeg)'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此演员拖放到立方体中间。从右侧列表中找到**约束**部分。每个物理约束演员需要两个对象来操作。这意味着我们需要给演员对象命名，然后这个演员在游戏过程中在游戏世界中呈现基于物理的动作。我们如何做到这一点？您将在**约束**部分找到两个类似的演员：**约束演员1**和**约束演员2**。在这里，我们可以定义对象。只需点击选择器图标，然后点击上方的立方体作为**约束演员1**，再点击另一个立方体作为**约束演员2**，如图所示：![第一次物理约束演员体验](img/image00282.jpeg)
- en: Now, switch to the **Perspective** view, move the lower cube a bit up, press
    **Play**, and shoot the lower cube from different angles and locations, as shown
    in the following screenshot:![The first physics constraint actor experience](img/image00283.jpeg)
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，切换到**透视**视图，将下方的立方体稍微向上移动，点击**播放**，并从不同的角度和位置射击下方的立方体，如图所示：![第一次物理约束演员体验](img/image00283.jpeg)
- en: As you can see, it looks like something is grabbing the lower cube and forcing
    it to remain there and rotate around that point. Also, the cube shows normal behavior
    with gravity.![The first physics constraint actor experience](img/image00284.jpeg)
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如您所见，看起来好像有什么东西在抓着下方的立方体，并强迫它保持在那个位置并围绕那个点旋转。此外，立方体在重力作用下表现出正常的行为。![第一次物理约束演员体验](img/image00284.jpeg)
- en: 'What you observe here is how physic constraints work in Unreal Engine. You
    can change the physical parameters related to each object and obtain different
    results. Let''s take a look at some:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您在这里观察到的就是Unreal Engine中物理约束的工作方式。您可以更改与每个对象相关的物理参数，并获得不同的结果。让我们看看一些例子：
- en: For the upper cube, check **Physics** in the **Details** window. When you play,
    it seems that all the cubes are connected to each other, whereas when you move
    one, others react to your interaction. Click on **Stop** and uncheck **Physics**
    for the upper cube.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于上方的立方体，在**细节**窗口中检查**物理**。当您开始游戏时，似乎所有立方体都相互连接，而当你移动一个时，其他立方体会对你的交互做出反应。点击**停止**并取消勾选上方面立方体的**物理**。
- en: Select the lower cube. Then, in **Physics**, change **Mass Scale** from `1.0`
    to `1000`. Now, play the game and try to move the cube. It looks like it's heavy,
    very heavy. So, click on **Stop** and change **Mass Scale** to `1.0`.![The first
    physics constraint actor experience](img/image00285.jpeg)
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择下方的立方体。然后，在**物理**中，将**质量比例**从`1.0`改为`1000`。现在，开始游戏并尝试移动立方体。看起来它很重，非常重。所以，点击**停止**并将**质量比例**改回`1.0`。![第一次物理约束演员体验](img/image00285.jpeg)
- en: Select the lower cube, uncheck **Enable Gravity**, and click on **Play**. Try
    to shoot the cube and observe the difference. It saves its connection to other
    objects, but doesn't follow the gravity of the game world.![The first physics
    constraint actor experience](img/image00286.jpeg)
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择下方的立方体，取消勾选**启用重力**，并点击**播放**。尝试射击立方体并观察差异。它保留了与其他对象的连接，但不会跟随游戏世界中的重力。![第一次物理约束演员体验](img/image00286.jpeg)
- en: Then, press **Stop** and check **Enable Gravity**.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击**停止**并检查**启用重力**。
- en: Customizing physics constraint actor
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义物理约束演员
- en: 'Now we know that this actor connects two objects to each other by supporting
    the gravity and physical aspects of each object. We also know that it is invisible
    to players. In addition, **Physics Constraint Actor** has some properties that
    strongly shape the physical behavior of objects. Let''s start with position. Switch
    back to four views and move your **Physics Constraint Actor** close to the upper
    cube, as shown in the following screenshot:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道这个演员通过支持每个物体的重力和物理特性将两个物体连接在一起。我们还知道它对玩家来说是不可见的。此外，**物理约束演员**有一些属性，这些属性强烈地塑造了物体的物理行为。让我们从位置开始。切换回四个视图，并将你的**物理约束演员**移动到上方的立方体附近，如图所示：
- en: '![Customizing physics constraint actor](img/image00287.jpeg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![自定义物理约束演员](img/image00287.jpeg)'
- en: Now, press **Play** and shoot the cube. As you can see, it even goes over the
    upper cube. It seems that the rotation point is going higher. This is correct.
    The exact description is that you move your physics constraint actor to the top.
    This basically changes the way these two objects behave based on physical rules.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，按**播放**并射击立方体。正如你所见，它甚至越过了上方的立方体。这似乎是旋转点变高的原因。这是正确的。确切的描述是，你将你的物理约束演员移动到顶部。这基本上改变了这两个物体根据物理规则的行为方式。
- en: 'Now, click on **Stop**. Then, click on your physics constraint actor and press
    *F*. In **Angular Limits**, in the **Details** section on the right-hand side,
    set **Angular Swing 1Motion** to **Locked**, **Angular Twist Motion** to **Limited**,
    and **Twist Limit Angel** and **Angular Swing 2Motion** to **60**:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击**停止**。然后，点击你的物理约束演员并按*F*。在**角度限制**中，在右侧的**详细信息**部分，将**角度摆动1运动**设置为**锁定**，**角度扭曲运动**设置为**限制**，并将**扭曲限制角度**和**角度摆动2运动**设置为**60**：
- en: '![Customizing physics constraint actor](img/image00288.jpeg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![自定义物理约束演员](img/image00288.jpeg)'
- en: Now, click on **Play**. As you can see, the cube plays in a pyramid-like area
    between 60 degrees and nowhere else. Then, click on **Stop** and change **Angular
    Swing 1Motion** to **Free**. Finally, click on **Play**. As you can see, the cube
    has free rotation on its *z* axis.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击**播放**。正如你所见，立方体在60度到其他地方之间像金字塔一样玩耍。然后，点击**停止**并将**角度摆动1运动**更改为**自由**。最后，点击**播放**。正如你所见，立方体在其*z*轴上有自由旋转。
- en: A simple game with Blueprint
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用蓝图的一个简单游戏
- en: After you click on **Stop**, select the cubes and your actor. Then, hold *Alt*
    and create a copy of all by moving on the *Y* axis. Now, click on the second actor
    and pick the upper and lower cubes. Then, select one point light object from **Modes**
    | **Basic** on the left-hand side and place it close to the stage surface between
    the two cubes. Our goal is to turn on the light when the cubes experience collision
    and break one of the cube's physical constraints.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在你点击**停止**后，选择立方体和你的演员。然后，按住*Alt*并在*Y*轴上移动以创建所有物体的副本。现在，点击第二个演员并选择上下立方体。然后，从左侧的**模式**|**基本**中选择一个点光源对象并将其放置在两个立方体之间的舞台表面附近。我们的目标是当立方体发生碰撞并打破一个立方体的物理约束时打开灯光。
- en: '![A simple game with Blueprint](img/image00289.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![使用蓝图的一个简单游戏](img/image00289.jpeg)'
- en: 'Now, click on point light and navigate to **Rendering** in the **Details**
    section and uncheck **Visible**:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击点光源并导航到**渲染**在**详细信息**部分，取消勾选**可见**：
- en: '![A simple game with Blueprint](img/image00290.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![使用蓝图的一个简单游戏](img/image00290.jpeg)'
- en: 'Now, click on **Blueprint** and select **Open Level Blueprint**. Navigate back
    to editor and select your point light. Now, go back to the **Blueprint** editor,
    right click on it, and select **Create a Reference to PointLight** from the list.
    You will have a curvy box with the **PointLight** title on your blueprint stage.
    Now, locate the small blue hollow circle in the top-right corner of your point
    light box. Then, click and hold the mouse and move the pointer to the right. You
    will find a wire-like line that follows your mouse. When you leave the mouse,
    a list will appear with a search area to type. Enter toggle and click on **Toggle
    Visibility (PointLightComponent)** from the names in the list, as shown in the
    following screenshot:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击**蓝图**并选择**打开级别蓝图**。导航回编辑器并选择你的点光源。现在，回到**蓝图**编辑器，右键单击它，并从列表中选择**创建对PointLight的引用**。你将在蓝图阶段看到一个带有**PointLight**标题的曲线框。现在，找到点光源框右上角的小蓝色空心圆。然后，点击并按住鼠标，将指针向右移动。你会找到一个像电线一样的线随着鼠标移动。当你离开鼠标时，会出现一个带有搜索区域的列表。输入切换并从列表中的名称中选择**切换可见性（PointLightComponent）**，如图所示：
- en: '![A simple game with Blueprint](img/image00291.jpeg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![使用蓝图的一个简单游戏](img/image00291.jpeg)'
- en: 'Now, navigate back to editor and select one of the lower cubes. Then, go back
    to **Blueprint** and use the same method to open the list, but this time, open
    **Add Event** for your cube name. Then, open **Collision** and select **Add On
    Actor Hit**. Now, connect a wire to the previous box you made, as shown in the
    following screenshot:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，返回到编辑器并选择一个下方的立方体。然后，回到**蓝图**并使用相同的方法打开列表，但这次，为你的立方体名称打开**添加事件**。然后，打开**碰撞**并选择**添加演员击中事件**。现在，将一根线连接到之前制作的盒子，如下面的截图所示：
- en: '![A simple game with Blueprint](img/image00292.jpeg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![使用蓝图的一个简单游戏](img/image00292.jpeg)'
- en: What this does is you first define the reference to your **PointLight** and
    then add the **Toggle** functionality to the visibility of the light. However,
    you need to turn the light on by selecting **Hit Event** for your cubes. So, we
    can add **Event** for collision and set the event to execute our toggle function.
    Click on **Play** and check how it works. As you can see, **PointLight** turns
    on and off on each hit to the selected cube.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你首先定义了你的**点光源**的引用，然后添加了**切换**功能到灯光的可见性。然而，你需要通过为你的立方体选择**击中事件**来打开灯光。因此，我们可以为碰撞添加**事件**并设置事件以执行切换函数。点击**播放**并检查它的工作情况。正如你所看到的，**点光源**在每次击中选定的立方体时都会打开和关闭。
- en: 'Now, we need to define another rule for our game. We need to disable the physical
    actor on the hit event. Then, select your actor over the other cube. Create a
    reference for it as you did for the lamp. Then, create the **Break Constraint**
    function with the break keyword on the search area. Now, select the cube that
    responds to the actor and then create another hit event and connect it to this
    function. This is how the result should look:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要为我们的游戏定义另一条规则。我们需要在击中事件上禁用物理演员。然后，选择你的演员覆盖在另一个立方体上。就像为灯创建引用一样，为它创建一个引用。然后，在搜索区域使用break关键字创建**断开约束**函数。现在，选择响应演员的立方体，然后创建另一个击中事件并将其连接到这个函数。结果应该看起来像这样：
- en: '![A simple game with Blueprint](img/image00293.jpeg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![使用蓝图的一个简单游戏](img/image00293.jpeg)'
- en: Now, test the game. As a result of the heat effect, one cube turns the light
    on/off, whereas another falls on the game stage.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，测试一下游戏。由于热效应，一个立方体可以打开/关闭灯光，而另一个则掉落在游戏舞台上。
- en: Summary
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The way game designers and artists try to project the mode and presentation
    of objects in the game meets the frame by frame animation, or wisely use the physical
    aspects of Unreal Engine.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏设计师和艺术家尝试将游戏中的物体模式和呈现方式投影出来，这符合逐帧动画，或者巧妙地利用虚幻引擎的物理特性。
- en: Twenty years ago, game designers animated the open and close movement of a simple
    door with the frame by frame method as an image-sequence file (such as GIF). Now,
    we can do the same in real time with light effects, materials, physical rules,
    and the blueprint code. Unreal Engine 4 provides the detailed properties and customizations
    for movements and dependency between objects in the game world. This is how creativity
    meets artistic details in a game design. Working with constraints is a kind of
    creative art.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 二十年前，游戏设计师使用逐帧方法将简单门的开关动作动画化，作为图像序列文件（如GIF）。现在，我们可以通过实时灯光效果、材质、物理规则和蓝图代码来实现同样的效果。虚幻引擎4为游戏世界中物体的运动和依赖关系提供了详细的属性和自定义选项。这就是创意如何与游戏设计中的艺术细节相遇。与约束一起工作是一种创意艺术。
