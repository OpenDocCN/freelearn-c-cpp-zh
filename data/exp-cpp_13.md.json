["```cpp\nclass CharacterUnit\n{\npublic:\n  virtual void attack(const CharacterUnit&) = 0;\n  virtual void destroy() = 0;\n  virtual int get_power() const = 0;\n  virtual int get_life_points() const = 0;\n};\n```", "```cpp\nclass Reader : public CharacterUnit\n{\npublic:\n  Reader();\n  Reader(const Reader&) = delete;\n  Reader& operator=(const Reader&) = delete;\n\npublic:\n  void attack(const CharacterUnit& attacker) override {\n    decrease_life_points_by_(attacker.get_power());\n  }\n\n  void destroy() override {\n    // we will leave this empty for now\n  }\n\n  int get_life_points() const override {\n    return life_points_;\n  }\n\n  int get_power() const override {\n    return power_;\n  }\n\nprivate:\n  void decrease_life_points_(int num) {\n    life_points_ -= num;\n    if (life_points_ <= 0) {\n      destroy();\n    }\n  }\n\nprivate:\n  int life_points_;\n  int power_;\n};\n```", "```cpp\nReader reader;\nReader* pr = new Reader();\nCharacterUnit* cu = new Reader();\n```", "```cpp\nint calculate_damage(const std::vector<CharacterUnit*>& units)\n{\n  return std::reduce(units.begin(), units.end(), 0, \n            [](CharacterUnit& u1, CharacterUnit& u2) {\n                return u1.get_power() + u2.get_power();\n            }\n  );\n}\n```", "```cpp\nclass House\n{\npublic:\n  House();\n  // copying will be covered by a Prototype\n  House(const House&) = delete;\n  House& operator=(const House&) = delete;\n\npublic:\n  void attack(const CharacterUnit&);\n  void destroy();\n  void build(const CharacterUnit&);\n  // ...\n\nprivate:\n  int life_points_;\n  int capacity_;\n  std::chrono::duration<int> construction_duration_;\n};\n```", "```cpp\nclass IBuilding\n{\npublic:\n  virtual void attack(const CharacterUnit&) = 0;\n  virtual void destroy() = 0;\n  virtual void build(CharacterUnit*) = 0;\n  virtual int get_life_points() const = 0;\n};\n```", "```cpp\nclass Barrack : public IBuilding\n{\npublic:\n  void attack(const ICharacterUnit& attacker) override {\n    decrease_life_points_(attacker.get_power());\n  }\n\n  void destroy() override {\n    // we will leave this empty for now\n  }\n\n  void build(ICharacterUnit* builder) override {\n    // construction of the building\n  }\n\n  int get_life_points() const override {\n    return life_points_;\n  }\n\nprivate:\n  int life_points_;\n  int capacity_;\n  std::chrono::duration<int> construction_duration_;\n};\n```", "```cpp\nclass Building\n{\npublic:\n  virtual void attack(const ICharacterUnit&) = 0;\n  virtual void destroy() = 0;\n  virtual void build(ICharacterUnit*) = 0;\n  virtual int get_life_points() const = 0;\n\npublic:  \n void run() {\n std::jthread{Building::background_action_, this};\n }\n\nprivate:\n  virtual void background_action_() {\n // no or default implementation in the base class \n }\n};\n```", "```cpp\nwhile (true)\n{\n  processUserActions();\n  updateGame();\n}\n```", "```cpp\nclass Command\n{\npublic:\n  void operator()() { std::cout << \"I'm a smart function!\"; }\n};\n```", "```cpp\nvoid myFunction() { std::cout << \"I'm not so smart!\"; }\n```", "```cpp\nmyFunction();\nCommand myCommand;\nmyCommand();\n```", "```cpp\nclass Command\n{\npublic:\n  Command() : called_(0) {}\n\n  void operator()() {\n    ++called_;\n    std::cout << \"I'm a smart function.\" << std::endl;\n    std::cout << \"I've been called\" << called_ << \" times.\" << std::endl;\n  }\n\nprivate:\n  int called_;\n};\n```", "```cpp\nCommand c1;\nCommand c2;\nc1();\nc1();\nc2();\nc2();\nc2();\n// at this point, c1.called_ equals 2, c2.called_ equals 3\n```", "```cpp\nclass CharacterUnit\n{\npublic:\n  CharacterUnit() {}\n  CharacterUnit& operator=(const CharacterUnit&) = delete;\n  virtual ~Character() {}\n\n virtual CharacterUnit* clone() = 0;\n\npublic:\n  void move(const Point& to) {\n    // the graphics-specific implementation\n  }\n  virtual void attack(const CharacterUnit&) = 0;\n  virtual void destroy() = 0;\n\n  int get_power() const { return power_; }\n  int get_life_points() const { return life_points_; }\n\nprivate:\n  CharacterUnit(const CharacterUnit& other) {\n    life_points_ = other.life_points_;\n    power_ = other.power_;\n  }\n\nprivate:\n  int life_points_;\n  int power_;\n};\n```", "```cpp\nclass Reader : public CharacterUnit\n{\npublic:\n Reader* clone() override {\n return new Reader(*this);\n }\n\n // code omitted for brevity\n};\n```", "```cpp\n// The unit can have any of the CharacterUnit derived types\nCharacterUnit* new_unit = unit->clone();\n```", "```cpp\nwhile (true)\n{\n  processUserActions();\n  updateGame();\n}\n```"]