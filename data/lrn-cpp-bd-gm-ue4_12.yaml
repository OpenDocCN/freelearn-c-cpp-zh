- en: Building Smarter Monsters with Advanced AI
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用先进的AI构建更聪明的怪物
- en: The monsters we have so far don't really do a lot. They stand in one place until
    they get in range to see you, and then they head over to you and either do a melee
    attack or a shooting attack, depending on what you have set up. In a real game,
    you want your characters to do a lot more than that so they seem more real. That's
    where **Artificial Intelligence** (**AI**) comes in.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们所拥有的怪物并没有做很多事情。他们站在一个地方，直到他们能看到你，然后他们会朝你走去，根据你设置的情况，进行近战攻击或射击攻击。在一个真正的游戏中，你希望你的角色做的事情比这多得多，这样他们看起来更真实。这就是**人工智能**（**AI**）的作用。
- en: 'AI is a huge topic that has entire books devoted to it, but we''ll be covering
    a few ways UE4 supports making AI programming easier so you can easily create
    more realistic monsters. We''ll be doing a quick overview of the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: AI是一个庞大的主题，有整本书专门讨论它，但我们将介绍一些UE4支持的使AI编程更容易的方法，这样你就可以轻松地创建更真实的怪物。我们将快速概述以下主题：
- en: Navigation - Pathfinding and the NavMesh
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导航 - 路径查找和NavMesh
- en: Behavior Trees
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 行为树
- en: Environment Query Systems
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环境查询系统
- en: Flocking
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 群集
- en: Machine Learning and Neural Networks
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器学习和神经网络
- en: Genetic Algorithms
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遗传算法
- en: If you're interested in learning more after all that, there are many great books
    you can look at for a more in-depth look at what else you can do with AI.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对此感兴趣，并且想了解更多，那么有很多优秀的书籍可以供你深入了解AI的其他方面。
- en: Navigation – pathfinding and the NavMesh
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导航 - 路径查找和NavMesh
- en: Right now, the monsters we've created only move in one direction—in a straight
    line directly toward your position. But what if there are mountains, buildings,
    trees, rivers, or other objects in the way? In many cases, a straight line just
    isn't possible. Right now, if the monster runs into a wall, it'll just stay there,
    which isn't very realistic. This is where pathfinding comes in.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们创建的怪物只能朝一个方向移动——直线朝着你的位置。但是如果有山、建筑、树木、河流或其他物体挡住了怪物的路怎么办？在许多情况下，直线是不可能的。目前，如果怪物撞到墙上，它就会停在那里，这并不是很现实。这就是路径查找的作用。
- en: What is pathfinding?
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是路径查找？
- en: Pathfinding is a way to figure out a path (usually the shortest and/or easiest
    one) to a destination. Picture the entire environment as a grid, with numbers
    in each cell saying how difficult it is to navigate. So a cell with a wall blocking
    the way would have a very high value, and a steep path could have a higher value
    than an easy path. The goal of pathfinding is to find the path with the lowest
    overall value when you add up all the cells along that path.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 路径查找是一种找到路径（通常是最短和/或最容易的路径）到达目的地的方法。将整个环境想象成一个网格，每个单元格中都有一个数字，表示导航的难度。因此，一个有墙挡住去路的单元格将具有非常高的值，而陡峭的路径可能比容易的路径具有更高的值。路径查找的目标是找到所有沿着该路径的单元格的总值最低的路径。
- en: There are different algorithms, or methods, for handling pathfinding available.
    The most well-known one is called A* (pronounced *A star*).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 有不同的算法或方法来处理路径查找。最知名的是称为A*（发音为*A星*）的算法。
- en: What is A*?
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是A*？
- en: We won't be using A* here, but you should at least be familiar with it if you
    plan on doing AI programming in the future, so I'll do a brief overview. A* basically
    searches the cells surrounding the character, prioritizing the ones with the lowest
    cost. It calculates the cost of the path so far (by adding up the costs up until
    that point) plus a heuristic, a guess on the cost from that point to the goal.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这里不会使用A*，但是如果你打算在未来进行AI编程，你至少应该对它有所了解，所以我会做一个简要的概述。A*基本上搜索围绕角色的单元格，优先考虑成本最低的单元格。它计算到目前为止路径的成本（通过累加到该点的成本）加上一个启发式，即从该点到目标的成本的猜测。
- en: There are many ways of calculating a heuristic. It could be something as simple
    as the distance directly to the goal (as the crow flies, you might say). It's
    better for the results if the heuristic is actually lower than what the actual
    cost will turn out to be, so that works well.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多计算启发式的方法。它可以是直接到目标的距离（你可能会说，像乌鸦飞一样简单）。如果启发式实际上比实际成本要低，那么结果会更好，所以这样做效果很好。
- en: Once you find the cell with the lowest cost, then go one step further and look
    at the cells surrounding that cell. You continue until you reach the goal. If
    you find yourself at a cell you've been to before and the total path cost this
    way is lower, you can replace it with the lower-cost path. This helps you get
    a shorter path. Once you get to the goal, you can follow the path backward and
    you'll have a complete path to the goal.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦找到成本最低的单元格，然后再向前一步，查看周围的单元格。一直持续到达目标。如果你发现自己到达了以前去过的单元格，并且这种方式的总路径成本更低，你可以用更低成本的路径替换它。这有助于你获得更短的路径。一旦到达目标，你可以沿着路径向后走，你就会得到一条完整的通往目标的路径。
- en: You can find much more information on A* and other pathfinding algorithms online
    or in books on AI. You will need to know them if you do this in more complex projects,
    but for this, UE4 has a much simpler and easier way: using a `NavMesh`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在网上或人工智能书籍中找到更多关于A*和其他路径查找算法的信息。如果你在更复杂的项目中进行这项工作，你需要了解它们，但对于这个，UE4有一个更简单和更容易的方法：使用`NavMesh`。
- en: Using a NavMesh
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用NavMesh
- en: 'A `NavMesh` is an object in UE4 that you can place in your world to tell it
    what parts of the environment you want characters to be able to navigate. To do
    this, perform the following steps:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`NavMesh`是UE4中的一个对象，你可以将其放置在世界中，告诉它你希望角色能够导航的环境的哪些部分。要做到这一点，请执行以下步骤：'
- en: 'Add some obstacles. You can add cubes, cylinders, or anything else you want
    to add to block movement, like this:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一些障碍。你可以添加立方体、圆柱体或其他任何你想要添加的东西来阻挡移动，就像这样：
- en: '![](img/4ba19b29-326b-4b73-ac0b-5da49506bf4b.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4ba19b29-326b-4b73-ac0b-5da49506bf4b.png)'
- en: Once you've set up the level the way you want it, in the Modes window, go to
    Volumes, find Nav Mesh Bounds Volume, drag it onto the level, and scale it to
    cover the entire area you want the monsters to be able to navigate.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你按照自己的意愿设置了级别，在模式窗口中，转到体积，找到Nav Mesh Bounds Volume，将其拖放到级别上，并缩放以覆盖你希望怪物能够导航的整个区域。
- en: If you try it now, you'll still see the monsters walk into walls and just stop.
    That's because we need to change the way movement is handled. We'll do this by
    creating our own `AIController` class.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您现在尝试，您仍然会看到怪物走进墙壁然后停下来。这是因为我们需要改变移动的方式。我们将通过创建自己的`AIController`类来实现这一点。
- en: Creating an AIController class
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个AIController类
- en: 'Let''s follow a step-by-step procedure to do this:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按步骤来做这个：
- en: 'Create a new C++ class. In this case, you''ll need to check the Show All Classes
    checkbox and search to find `AIController`:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的C++类。在这种情况下，您需要勾选“显示所有类”复选框并搜索找到`AIController`：
- en: '![](img/8be786b7-f5e5-466a-90c5-b5bef7eb9eb5.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8be786b7-f5e5-466a-90c5-b5bef7eb9eb5.png)'
- en: 'Name the class `MonsterAIController`. Your `MonsterAIController.h` should look
    like this:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将类命名为`MonsterAIController`。您的`MonsterAIController.h`应该如下所示：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`MonsterAIController.cpp` should implement that function as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`MonsterAIController.cpp`应该实现以下函数：'
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Also make sure to add `#include "Kismet/GameplayStatics.h"` at the top of the
    file.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 还要确保在文件顶部添加`#include "Kismet/GameplayStatics.h"`。
- en: 'Go back into the `Tick()` function in `Monster.cpp`. Find the following line
    in the `else` clause:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回`Monster.cpp`中的`Tick()`函数。在`else`子句中找到以下行：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Delete this line and replace it with this:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 删除这一行，用这个替换：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Also add `#include "MonsterAIController.h"` at the top of the file, and go into
    `BP_Monster` and change the Ai Controller class to `MonsterAIController`. Now
    the monsters can find their way around the walls to you. If they don't move, check
    to make sure the `NavMesh` covers the area and is tall enough to cover the characters.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 还在文件顶部添加`#include "MonsterAIController.h"`，并进入`BP_Monster`，将Ai Controller类更改为`MonsterAIController`。现在怪物可以绕过墙壁找到你。如果它们不动，检查确保`NavMesh`覆盖了该区域并且足够高以覆盖角色。
- en: Behavior Tree
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行为树
- en: Right now, all the logic for controlling your monsters is in the `Tick()` function
    in `Monster.cpp`. But what you've done so far is pretty simple. In large, complex
    games, the monsters will have a lot more behaviors. They could patrol an area
    until they see you, or even communicate with you and only attack if the conversation
    doesn't go well. The logic for all this would get much too complicated to keep
    everything in one function, or even in the `AMonster` class.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，控制怪物的所有逻辑都在`Monster.cpp`的`Tick()`函数中。但到目前为止，您所做的事情相当简单。在大型复杂的游戏中，怪物将有更多的行为。它们可以在一个区域巡逻，直到看到您，甚至与您交流，只有在对话不顺利时才会攻击。所有这些逻辑将变得过于复杂，无法将所有内容都放在一个函数中，甚至在`AMonster`类中。
- en: Fortunately, UE4 has another way of managing complex tasks, and that is a Behavior
    Tree. A Behavior Tree lets you visually set up a series of tasks to make them
    easier to manage. Since we're focused on C++ here, we'll be creating the tasks
    themselves that way, but the overall tree seems to be easier to manage in Blueprints.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，UE4还有另一种管理复杂任务的方法，那就是行为树。行为树让您可以直观地设置一系列任务，以便更容易管理。由于我们在这里专注于C++，我们将以这种方式创建任务本身，但总体树似乎更容易在蓝图中管理。
- en: 'Behavior Trees are primarily controlled by two different types of nodes:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 行为树主要由两种不同类型的节点控制：
- en: '**Selectors**: Selector will run through its children, from left to right,
    until one succeeds, and then goes back up the tree. Think of it like an `or` statement—once
    it finds one true argument, the `or` itself is true so it is done.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选择器**：选择器将从左到右运行其子节点，直到一个成功，然后返回树。将其视为一个“或”语句——一旦找到一个真实的参数，该“或”本身就是真的，所以它完成了。'
- en: '**Sequences**: Sequences instead go through the children from left to right
    until one fails. This is more like an `and` statement that keeps going until something
    comes up as false, rendering the whole statement false.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**序列**：序列会从左到右依次遍历子节点，直到有一个失败为止。这更像是一个“和”语句，会一直执行直到出现假的情况，使整个语句变为假。'
- en: So if you want to run multiple steps, you will use Sequences, whereas if you
    just want to run one successfully and stop, you will use Selector.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果您想运行多个步骤，您将使用序列，而如果您只想成功运行一个并停止，您将使用选择器。
- en: Setting up the Behavior Tree
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置行为树
- en: 'First, you need to go into your library (put it in a folder name that makes
    sense so you''ll remember where to find it, or Blueprints will work) and, from
    Add New, select Artificial Intelligence | Behavior Tree:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要进入您的库（将其放在一个有意义的文件夹名称中，这样您将记得在哪里找到它，或者蓝图也可以工作），然后从“添加新内容”中选择“人工智能|行为树”：
- en: '![](img/45cc7752-e2b6-4b38-932b-a2cbbc892b6a.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/45cc7752-e2b6-4b38-932b-a2cbbc892b6a.png)'
- en: 'I named mine `MonsterBT`. You will also need to create a Blackboard. This stores
    the data you will use in the Behavior Tree and lets you transfer it easily between
    the AI Controller and the Behavior Tree. You create that by going to Add New and
    this time selecting Artificial Intelligence | Blackboard. I named this one `MonsterBlackboard`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我将其命名为`MonsterBT`。您还需要创建一个黑板。这将存储您将在行为树中使用的数据，并允许您在AI Controller和行为树之间轻松传输。您可以通过转到“添加新内容”，然后选择“人工智能|黑板”来创建它。我将其命名为`MonsterBlackboard`：
- en: '![](img/aed7c42b-29df-495d-9c15-63837eff7415.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aed7c42b-29df-495d-9c15-63837eff7415.png)'
- en: Setting up Blackboard values
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置黑板值
- en: 'Next, you''ll want to set up values in the Blackboard you just created. You
    do this by selecting New Key and then selecting a type (in this case, Bool). For
    this, I''ve added two of them, IsInAttackRange and IsInFollowRange:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要在刚刚创建的黑板中设置值。您可以通过选择新键，然后选择类型（在这种情况下是Bool）来完成此操作。对于此操作，我添加了两个，IsInAttackRange和IsInFollowRange：
- en: '![](img/bd5fe05d-6f94-4222-a2f7-ebe86f1eefe7.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bd5fe05d-6f94-4222-a2f7-ebe86f1eefe7.png)'
- en: You can also give each one a description of what it is used for.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以为每个添加一个描述其用途的描述。
- en: Setting up a BTTask
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置BTTask
- en: 'We will be creating a C++ task to handle following the player. To do this,
    perform the following steps:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个C++任务来处理跟随玩家。要做到这一点，执行以下步骤：
- en: 'Add a new C++ class and base it off BTTaskNode (you will need to view all classes
    and search for it):'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个新的C++类，并以BTTaskNode为基础（您需要查看所有类并搜索它）：
- en: '![](img/fb9cd044-3520-4c1a-b69a-dbefc762d5e9.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fb9cd044-3520-4c1a-b69a-dbefc762d5e9.png)'
- en: I named the new class `BTTask_FollowPlayer`
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我命名了新类`BTTask_FollowPlayer`
- en: 'In `BTTaskFollowPlayer.h`, add the following:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`BTTaskFollowPlayer.h`中，添加以下内容：
- en: '[PRE4]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We won't be using `OnGameplayTaskActivated`, but, without declaring it, your
    code may not compile (if you get a complaint about it not being there, that's
    why)
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会使用`OnGameplayTaskActivated`，但是，如果没有声明它，你的代码可能无法编译（如果你收到关于它不存在的投诉，那就是原因）
- en: 'In `BTTaskFollowPlayer.cpp`, add the following:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`BTTaskFollowPlayer.cpp`中，添加以下内容：
- en: '[PRE5]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Once you have this working, you can go back and create another `BTTask` to handle
    attacking too, as well as any other behaviors you might want.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你做到了这一点，你可以回去创建另一个`BTTask`来处理攻击，以及你可能想要的任何其他行为。
- en: Setting Up the Behavior Tree itself
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置行为树本身
- en: 'Once you have the task set up, it''s time to set up the tree itself:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你设置好了任务，就该设置树本身了：
- en: 'Double-click on it to open the Blueprints:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击它以打开蓝图：
- en: '![](img/4985b890-0951-4a29-b528-09c21619402f.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4985b890-0951-4a29-b528-09c21619402f.png)'
- en: Click on the yellow area on the bottom of Root and drag it out to create a new
    node (it's black but turns yellow when the mouse rolls over it).
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击Root底部的黄色区域并拖动以创建一个新的节点（它是黑色的，但当鼠标滚动到它上面时会变成黄色）。
- en: 'Select the type from the menu that comes up (we''ll use Selector):'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从弹出的菜单中选择类型（我们将使用选择器）：
- en: '![](img/f26c5c77-9cbf-4f45-a37d-4cdfc6d342bb.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f26c5c77-9cbf-4f45-a37d-4cdfc6d342bb.png)'
- en: The selector icon in the center tab
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 中心标签中的选择器图标
- en: 'You should have the following:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该有以下内容：
- en: '![](img/0e7d45c8-0303-4cd9-ac6a-6c502be69764.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0e7d45c8-0303-4cd9-ac6a-6c502be69764.png)'
- en: 'As mentioned before, the Selector will go through nodes in left-to-right order
    until one succeeds, and then stop. In this case, we have three possible states:
    in attack range, in sight range, and neither (ignore the player). First, you want
    to check whether you''re close enough to attack, which means you''ll want to check
    IsInAttackRange in your Blackboard.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，选择器将按从左到右的顺序遍历节点，直到一个成功为止，然后停止。在这种情况下，我们有三种可能的状态：在攻击范围内，在视野范围内，以及两者都不满足（忽略玩家）。首先，你需要检查自己是否足够接近进行攻击，这意味着你需要在你的黑板中检查IsInAttackRange。
- en: Don't do follow first because the attack range is still technically in follow
    range, but you don't want to use the follow functionality, so the Selector will
    stop after checking for follow range because that's the first check it makes,
    so it will never check for attack range (which is what it should really be checking).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 不要先进行跟随，因为攻击范围在技术上仍然在跟随范围内，但你不想使用跟随功能，所以选择器在检查跟随范围后就会停止，因为这是它进行的第一个检查，所以它永远不会检查攻击范围（这才是它真正应该检查的）。
- en: 'To check which state it needs to be in, you''ll need to check the Blackboard
    value, which you do by using a decorator. To do this, click the bottom of the
    Selector and drag off a new node to the left like you did when you created that
    node, and choose a Composite Selector node this time. This node allows you to
    right-click; choose Add Decorator..., and make sure you choose the Blackboard
    type. Once you add it, you can select the blue Decorator on top. You should be
    able to check the Key Query IsSet and select the value you want to check, in this
    case IsInAttackRange (if it doesn''t show up, make sure MonsterBlackboard is set
    in the details as the blackboard; it should be set automatically normally):'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查它需要处于哪种状态，你需要检查黑板值，这可以通过使用装饰器来实现。为此，点击选择器的底部并向左拖动一个新的节点，就像你创建那个节点时所做的那样，并选择一个复合选择器节点。这个节点允许你右键单击；选择添加装饰器...，确保你选择了黑板类型。添加后，你可以选择顶部的蓝色装饰器。你应该能够检查Key
    Query IsSet并选择你想要检查的值，这种情况下是IsInAttackRange（如果它没有显示出来，请确保MonsterBlackboard在详细信息中设置为黑板；通常情况下应该自动设置）：
- en: '![](img/b101c01b-ea3c-4dfc-8234-78df2ae18134.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b101c01b-ea3c-4dfc-8234-78df2ae18134.png)'
- en: The attack node will eventually go to an Attack task, but for now, I just put
    in a Wait as a placeholder (a built-in task that allows you to specify a wait
    time in seconds).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击节点最终会转到一个攻击任务，但现在，我只是放了一个等待作为占位符（一个内置任务，允许你指定等待时间（以秒为单位））。
- en: To the right of it, you'll also want to add another Composite with a Decorator
    that checks for IsInFollowRange. This will use the new task you created (if it
    doesn't show up, make sure you have compiled your code and that there aren't any
    errors).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在它的右侧，你还需要添加另一个复合节点，带有一个检查IsInFollowRange的装饰器。这将使用你创建的新任务（如果它没有显示出来，请确保你已经编译了你的代码，并且没有任何错误）。
- en: 'To the right of that, I added a Wait task in the event that both cases fail.
    When you''re done, you should have something like this:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在那之后，我在事件中添加了一个等待任务，以防两种情况都失败。完成后，你应该有类似这样的东西：
- en: '![](img/195cf009-e901-4bed-a965-f8228644e407.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/195cf009-e901-4bed-a965-f8228644e407.png)'
- en: Now you're ready to go back and modify your existing code to use all this.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以回去修改你现有的代码来使用所有这些。
- en: Updating the MonsterAIController
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新MonsterAIController
- en: 'You''ll be adding a lot more functionality to your `AIController` class now
    to support the Behavior Tree:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你将为你的`AIController`类添加更多功能来支持行为树：
- en: 'Your new `MonsterAIController.h` should look like this:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的新`MonsterAIController.h`应该是这样的：
- en: '[PRE6]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Also make sure you add `#include "BehaviorTree/BehaviorTreeComponent.h"` at
    the top of the file. Here, you are overriding the constructor as well as the `Possess`
    and `UnPossess` classes. The `SetFollowRange` and `SetAttackRange` functions are
    new and let you set the Blackboard values.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 还要确保在文件顶部添加`#include "BehaviorTree/BehaviorTreeComponent.h"`。在这里，你重写了构造函数以及`Possess`和`UnPossess`类。`SetFollowRange`和`SetAttackRange`函数是新的，让你设置黑板值。
- en: 'Add the following functions to `MonsterAIController.cpp`:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MonsterAIController.cpp`中添加以下函数：
- en: '[PRE7]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Also add the following lines at the top of the file:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 还要在文件顶部添加以下行：
- en: '[PRE8]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`StartFollowingPlayer` remains the same so it is not listed here, but make
    sure you leave that in there! Now it''s time to update your `Monster` class (you
    won''t be able to compile until you do that).'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`StartFollowingPlayer`保持不变，所以这里不列出来，但确保你留下它！现在是时候更新你的`Monster`类了（在这之前你无法编译）。'
- en: Updating the Monster class
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新Monster类
- en: 'We will be doing the following updates in the `Monster` class:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`Monster`类中进行以下更新：
- en: 'In `Monster.h`, the only change you''ll be making is to add the following lines
    of code:'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`Monster.h`中，您唯一要做的更改是添加以下代码行：
- en: '[PRE9]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In `Monster.cpp`, you''ll be making some big changes to the `Tick()` function,
    so here is the full version:'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`Monster.cpp`中，您将对`Tick()`函数进行一些重大更改，因此这是完整版本：
- en: '[PRE10]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The changes are to set the values for both the attack and follow ranges. The
    code for attacking is still in there, but if you move TimeSinceLastStrike and
    AttackTimeout into the Blackboard, you can use that to move all that functionality
    into a `BTTask`. Now make sure everything compiles.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 更改是设置攻击和跟随范围的值。攻击代码仍然存在，但是如果将TimeSinceLastStrike和AttackTimeout移入黑板，您可以使用它将所有功能移入`BTTask`。现在确保一切都编译完成。
- en: 'Once it compiles, you need to open the `BP_Monster` Blueprint and set the Behavior
    Tree like this (it can also be set on individual Monsters if you want them to
    be different):'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦编译完成，您需要打开`BP_Monster`蓝图，并设置行为树如下（如果您希望它们不同，也可以在单个怪物上设置）：
- en: '![](img/c3c7768e-704d-47e1-a96d-31ae6e04bce5.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c3c7768e-704d-47e1-a96d-31ae6e04bce5.png)'
- en: Also make sure the AI Controller is set to MonsterAIController. If you run the
    game at this point, the functionality should be the same, but the Behavior Tree
    will be controlling the following of the player.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 还要确保AI控制器设置为MonsterAIController。如果此时运行游戏，功能应该是相同的，但是行为树将控制玩家的跟随。
- en: If you'd like to learn more, look into moving the `Attack` code into a `BTTask`
    class, and also look into what the monsters can do while you're out of range (read
    the next section for something that might help with that).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解更多，请查看将`Attack`代码移入`BTTask`类，并查看在您不在范围内时怪物可以做什么（阅读下一节可能有所帮助）。
- en: Environment Query Systems
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 环境查询系统
- en: '**Environment Query Systems** (**EQS**) are new and still experimental. They
    allow you to create a query in your Behavior Tree to search through the items
    in a level and find one that best fits the criteria you set up. Maybe you want
    your monsters to wander between set waypoints you set up instead of standing still
    when the player is out of range. You can set up a query to look for the closest
    one, or use some other criteria. EQS allow you to do this.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**环境查询系统**（**EQS**）是新的，仍在试验阶段。它允许您在行为树中创建一个查询，以搜索级别中的项目，并找到最符合您设置的条件的项目。也许您希望怪物在玩家超出范围时在设置的路径点之间徘徊，而不是站在原地。您可以设置一个查询来寻找最接近的路径点，或使用其他一些条件。EQS允许您这样做。'
- en: 'You need to enable this in the Settings to be able to use them. To do this,
    perform the following steps:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在设置中启用此功能才能使用它们。要执行此操作，请执行以下步骤：
- en: 'Go to Edit | Editor Preferences:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入编辑|编辑器首选项：
- en: '![](img/d6395ceb-67fc-4d78-84d0-f29c8e2ee2c5.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d6395ceb-67fc-4d78-84d0-f29c8e2ee2c5.png)'
- en: 'Under Experimental | AI, check off Environment Querying System:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在实验|AI下，勾选环境查询系统：
- en: '![](img/e30ed859-293d-4372-8471-864a91f53b5e.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e30ed859-293d-4372-8471-864a91f53b5e.png)'
- en: 'Add a new query by going to Add New | Artificial Intelligence. Environment
    Query will now appear under Behavior Tree and Blackboard:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过转到添加新|人工智能来添加新查询。环境查询现在将出现在行为树和黑板下：
- en: '![](img/18186d59-76d5-4cf2-bf62-995a0863e37a.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/18186d59-76d5-4cf2-bf62-995a0863e37a.png)'
- en: You also need to create a `Context` and a `Generator` in Blueprints (the `Generator`
    will get all the items of a specific type, such as waypoints). To actually run
    the query, you create a Run EQS Query task node in your Behavior Tree. For more
    information on how Environment Query Systems work, see the Unreal documentation
    at [https://docs.unrealengine.com/en-us/Engine/AI/EnvironmentQuerySystem](https://docs.unrealengine.com/en-us/Engine/AI/EnvironmentQuerySystem).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要在蓝图中创建`上下文`和`生成器`（`生成器`将获取特定类型的所有项目，例如路径点）。要实际运行查询，您需要在行为树中创建一个运行EQS查询任务节点。有关环境查询系统的工作原理的更多信息，请参阅[https://docs.unrealengine.com/en-us/Engine/AI/EnvironmentQuerySystem](https://docs.unrealengine.com/en-us/Engine/AI/EnvironmentQuerySystem)中的虚幻文档。
- en: Flocking
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集群
- en: If you have a lot of monsters on the screen all moving at once, you'll want
    them to move in a way that looks realistic. You don't want them walking into each
    other or all going off in different directions.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果屏幕上有很多怪物同时移动，您希望它们以看起来真实的方式移动。您不希望它们互相撞到，或者朝不同的方向走开。
- en: AI researchers have looked into this and come up with algorithms to handle this
    realistically. They're called flocking algorithms because they're based on the
    behavior of a flock of birds.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: AI研究人员已经研究过这个问题，并提出了处理这个问题的算法。它们被称为集群算法，因为它们基于鸟群的行为。
- en: When moving together, monsters have to think of more than just getting to the
    same goal. They also have to take into account the monsters they are moving with.
    They have to make sure they don't get too close to the monsters immediately surrounding
    them, nor should they move too far away or they'll drift apart.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在一起移动时，怪物不仅要考虑到达相同目标，还要考虑与其一起移动的怪物。他们必须确保不要离其周围的怪物太近，也不应该移动得太远，否则它们会分散开来。
- en: In many cases, there is one monster selected as the leader. That monster heads
    toward the goal, and the others focus on following that leader.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，有一个怪物被选为领导者。该怪物朝着目标前进，其他怪物专注于跟随该领导者。
- en: There are many good references on flocking online. It's not built into UE4,
    but you can buy extensions or program your own flocking system.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在线上有很多关于集群的好参考资料。它没有内置到UE4中，但您可以购买扩展或编写自己的集群系统。
- en: Introduction to machine learning and neural networks
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 机器学习和神经网络简介
- en: Machine learning and neural networks are huge topics, so I'll only be giving
    a brief introduction here. Machine Learning is how you can teach a program to
    figure out how to respond to something, instead of just giving it rules. There
    are many different algorithms for doing this, but they all require a lot of sample
    data.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习和神经网络是一个巨大的话题，所以我在这里只会做一个简要介绍。机器学习是如何教导程序去找出如何回应某事情的方法，而不仅仅是给它规则。有许多不同的算法可以做到这一点，但它们都需要大量的样本数据。
- en: Basically, you give the learning program a large amount of example cases (the
    more the better), *and* the best results for each case. You can rate them in different
    ways. By looking at so many cases, it can make the best guess on similar cases
    based on results it has seen in the past. With enough training data, the results
    can be very good, although you can still run into cases it won't work well for.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，你给学习程序大量的例子（越多越好），*和*每个案例的最佳结果。你可以用不同的方式对它们进行评价。通过观察这么多案例，它可以根据它过去看到的结果对类似案例做出最佳猜测。通过足够的训练数据，结果可以非常好，尽管你仍然可能遇到它不适用的情况。
- en: Since this requires so much data (not to mention processing power), except in
    rare cases, this is done by game companies before the game is shipped (if it's
    done at all—this sort of thing tends to get cut in favor of deadlines). The training
    is done offline, and the program has already learned what to do.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这需要如此多的数据（更不用说处理能力），除了在罕见的情况下，这是在游戏公司在游戏发售前完成的（如果有的话——这种事情往往会因为截止日期而被取消）。训练是离线完成的，程序已经学会了该做什么。
- en: Neural Networks are a specific type of machine learning made to emulate the
    way the brain processes data. There are nodes that work like neurons. There can
    be multiple layers of nodes and each layer processes the results of the previous
    one.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 神经网络是一种特定类型的机器学习，旨在模拟大脑处理数据的方式。有工作像神经元的节点。可以有多层节点，每一层处理前一层的结果。
- en: Data is sent across multiple nodes, and each node adjusts that data based on
    some threshold amount. Only data can be passed back (or forward) to the nodes,
    which then adjust those threshold values to get more accurate results to the training
    data. Once they've been trained, those threshold values can be used for future
    decisions.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 数据被发送到多个节点，每个节点根据一定的阈值调整数据。只有数据可以被传递回（或向前）到节点，然后调整这些阈值以获得更准确的训练数据结果。一旦它们被训练过，这些阈值就可以用于未来的决策。
- en: While we're still very far from making a true AI, neural networks have been
    used with interesting results. Neural networks have been trained on music of a
    specific genre and have then generated very impressive (and original) music that
    sounds similar to the genre it was trained on. I've also heard of neural networks
    being written to attempt to write books. I think we're still a long way from a
    neural network that can write UE4 programs, though!
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们离真正的人工智能还有很长的路要走，但神经网络已经被用于产生有趣的结果。神经网络已经在特定流派的音乐上进行了训练，然后生成了非常令人印象深刻（和原创的）音乐，听起来类似于它接受训练的流派。我也听说过神经网络被编写来尝试写书。不过我认为我们离一个可以编写UE4程序的神经网络还有很长的路要走！
- en: Genetic algorithms
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 遗传算法
- en: Recall your high school biology; you probably learned about genetics. Chromosomes
    from two different parents combine to create a child that combines the DNA from
    both parents, and random genetic mutations can also make changes. Genetic algorithms
    are based on the same principles.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下你高中学的生物学；你可能学过遗传学。来自两个不同父母的染色体结合在一起，创造一个结合了两个父母DNA的孩子，而随机的基因突变也可以引起变化。遗传算法基于相同的原则。
- en: 'Like in Darwin''s survival of the fittest, you can do something very similar
    in code. Genetic algorithms have three basic principles:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 就像达尔文的适者生存一样，你可以在代码中做类似的事情。遗传算法有三个基本原则：
- en: '**Selection**: You pick the examples that have the best results, and those
    are the basis for the next generation.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选择**: 你选择那些有最佳结果的例子，它们是下一代的基础。'
- en: '**Crossover**: Two of these selected examples are then combined to create a
    child that is a product of both, just like in biology.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**交叉**: 选择的两个例子然后结合在一起，创造一个同时具有两者特点的孩子，就像在生物学中一样。'
- en: '**Random genetic mutations are introduced**: There could be some good traits
    that the old ones didn''t have, or that got thrown out because those traits were
    overwhelmed by other traits. This means you don''t miss out on some potentially
    great traits just because they weren''t in the original population.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**引入随机基因突变**: 可能有一些好的特征是旧的没有的，或者被其他特征淹没了而被抛弃。这意味着你不会错过一些潜在的优秀特征，只是因为它们不在原始种群中。'
- en: Summary
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: As you've seen, AI is a huge topic, and we've only touched on the basics here.
    We've gone over the basics of pathfinding (with the NavMesh), Behavior Trees,
    environment query systems, Flocking, machine learning and neural networks, and
    Genetic algorithms. There are entire books out there if you want to learn more,
    as well as numerous websites, such as [http://aigamedev.com/](http://aigamedev.com/),
    and articles on [https://www.gamasutra.com](https://www.gamasutra.com).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，人工智能是一个巨大的话题，我们在这里只是触及了基础知识。我们已经了解了基础的寻路（使用NavMesh）、行为树、环境查询系统、群集、机器学习和神经网络以及遗传算法。如果你想了解更多，还有整整一本书，以及许多网站，比如[http://aigamedev.com/](http://aigamedev.com/)，和[https://www.gamasutra.com](https://www.gamasutra.com)上的文章。
- en: In the next section, we will learn to cast spells to defend your player from
    the monsters.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习施展咒语来保护你的玩家免受怪物的侵害。
