- en: '*Chapter 11*: Internationalization'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章：国际化
- en: In earlier chapters, we learned how to create GUI applications with Qt Widgets
    or Qt Quick. To make our applications usable across the world, we need to add
    translations to the application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们学习了如何使用Qt Widgets或Qt Quick创建GUI应用程序。为了使我们的应用程序在全球范围内可用，我们需要为应用程序添加翻译。
- en: The process of making your application translation-aware is known as **internationalization**.
    It makes it easy to localize content for viewers from different cultures, regions,
    or languages. Translating Qt Widgets and Qt Quick apps into local languages is
    very easy with Qt. These processes of adapting an application to different languages
    with the geographical and technical standards of a target market are known as
    **internationalization**.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 使您的应用程序支持翻译的过程被称为国际化。这使得为来自不同文化、地区或语言的观众本地化内容变得容易。使用Qt将Qt Widgets和Qt Quick应用程序翻译成本地语言非常容易。将应用程序适应目标市场的不同语言、地理和技术标准的过程被称为国际化。
- en: 'You will learn how to make an application with multilingual support. Throughout
    the chapter, we will explore different tools and processes to make a translation-aware
    application. In this chapter, we will discuss the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 您将学习如何制作一个支持多语言的应用程序。在本章中，我们将探讨不同的工具和流程，以制作一个支持翻译的应用程序。在本章中，我们将讨论以下内容：
- en: Basics of internationalization
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 国际化的基础知识
- en: Writing source code for translation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为翻译编写源代码
- en: Loading translation files
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载翻译文件
- en: Internationalization with Qt Widgets
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Qt Widgets进行国际化
- en: Internationalization with Qt Quick
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Qt Quick进行国际化
- en: Deploying translations
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署翻译
- en: By the end of this chapter, you will be able to create a translation-aware application
    using Qt Widgets and Qt Quick.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章的学习，您将能够使用Qt Widgets和Qt Quick创建一个支持翻译的应用程序。
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The technical requirements for this chapter include minimum versions of Qt 6.0.0
    and Qt Creator 4.14.0 installed on the latest desktop platform such as Windows
    10, Ubuntu 20.04, or macOS 10.14.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的技术要求包括在最新的桌面平台上安装Qt 6.0.0和Qt Creator 4.14.0的最低版本，如Windows 10、Ubuntu 20.04或macOS
    10.14。
- en: 'All the code used in this chapter can be downloaded from the following GitHub
    link: [https://github.com/PacktPublishing/Cross-Platform-Development-with-Qt-6-and-Modern-Cpp/tree/master/Chapter11](https://github.com/PacktPublishing/Cross-Platform-Development-with-Qt-6-and-Modern-Cpp/tree/master/Chapter11).'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的所有代码都可以从以下GitHub链接下载：[https://github.com/PacktPublishing/Cross-Platform-Development-with-Qt-6-and-Modern-Cpp/tree/master/Chapter11](https://github.com/PacktPublishing/Cross-Platform-Development-with-Qt-6-and-Modern-Cpp/tree/master/Chapter11)。
- en: Important note
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The screenshots used in this chapter are taken on the Windows platform. You
    will see similar screens based on the underlying platform on your machine.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的屏幕截图是在Windows平台上进行的。您将在您的机器上看到基于底层平台的类似屏幕。
- en: Understanding internationalization and Qt Linguist
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解国际化和Qt Linguist
- en: The processes of adjusting an application to different languages, geographical
    variations, and technological specifications of a target market are known as **internationalization**
    and **localization**. Internationalization refers to the process of creating a
    software application that can be translated into a variety of languages and for
    different regions without requiring significant technical changes. Internationalization
    is often abbreviated to **i18n**, with 18 being the number of letters between
    the letters *i* and *n* in the English word. The ease with which a product can
    be localized is greatly influenced by its internationalization. Creating a linguistically
    and culturally focused application for a global market is a much more complex
    and time-consuming process. Hence, companies focus on creating i18n-aware applications
    for global markets from the beginning of product development.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 调整应用程序以适应目标市场的不同语言、地理变化和技术规范的过程被称为国际化和本地化。国际化是指创建一个软件应用程序，可以在不需要进行重大技术更改的情况下被翻译成各种语言和不同地区的过程。国际化通常缩写为i18n，其中18是英语单词中字母i和n之间的字母数。产品能够被本地化的便利程度受到其国际化的影响。为全球市场创建一个语言和文化聚焦的应用程序是一个更加复杂和耗时的过程。因此，公司在产品开发的开始阶段就专注于为全球市场创建i18n感知的应用程序。
- en: For internationalization, you should design your application in such a manner
    that it avoids roadblocks for localization or global deployment later. This covers
    aspects such as allowing Unicode or maintaining careful handling of legacy character
    encodings where appropriate, taking caution of string concatenation, preventing
    code dependencies on user interface string values, and so on. You should provide
    support for features such as identifying translatable strings and system language
    that may be required for internationalization later.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于国际化，您应该设计您的应用程序，以避免以后在本地化或全球部署时出现障碍。这涵盖了允许Unicode或在适当的情况下维护对旧字符编码的小心处理，小心处理字符串连接，防止代码依赖于用户界面字符串值等方面。您应该提供对于识别可翻译字符串和以后可能需要的国际化的系统语言的支持。
- en: Your application should be aware of local languages, date and time formats,
    numeral systems, or cultural preferences. The modification of a product, application,
    or document's content to fulfill the language, cultural, and other preferences
    of a particular target market is known as **localization**. Localization is often
    written in English as **l10n**, where 10 is the number of letters between *l*
    and *n*. Localization entails incorporating region-specific requirements and translating
    applications for a specific region or language. Localizable features should be
    separated from the source code, allowing adaptation as per the user's cultural
    preferences.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您的应用程序应该了解本地语言、日期和时间格式、数字系统或文化偏好。修改产品、应用程序或文档的内容以满足特定目标市场的语言、文化和其他偏好，被称为**本地化**。本地化通常用英文**l10n**表示，其中10是*l*和*n*之间的字母数。本地化包括合并特定地区的要求，并为特定地区或语言翻译应用程序。可本地化的功能应该与源代码分离，以便根据用户的文化偏好进行调整。
- en: '`lupdate` and `lrelease`. These programs can be used with a qmake project or
    directly with the filesystem.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`lupdate`和`lrelease`。这些程序可以与qmake项目或直接与文件系统一起使用。'
- en: 'The `lupdate` tool locates translatable strings in the project''s source, header,
    and `.ui` or `.qml` files. Then it creates or updates the translation files (`.ts`
    files). You can specify the files to be processed on the command line or in a
    `.pro` file as arguments. `.ts` files use **Document Type Definition** (**DTD**)
    format, described at the following link:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`lupdate`工具会定位项目的源代码、头文件和`.ui`或`.qml`文件中的可翻译字符串。然后它会创建或更新翻译文件（`.ts`文件）。您可以在命令行或`.pro`文件中指定要处理的文件作为参数。`.ts`文件使用**文档类型定义**（**DTD**）格式，描述在以下链接中：'
- en: '[https://doc.qt.io/qt-6/linguist-ts-file-format.html](https://doc.qt.io/qt-6/linguist-ts-file-format.html)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://doc.qt.io/qt-6/linguist-ts-file-format.html](https://doc.qt.io/qt-6/linguist-ts-file-format.html)'
- en: Qt provides excellent support for internationalization. Qt has built-in support
    for many languages in all user interface elements. However, when writing source
    code for your application, you have to follow certain practices. This includes
    marking translatable strings, avoiding ambiguous strings, using numbered arguments
    (`%n`) as placeholders, and loading the right translation file. You can use both
    C++ and user interface files, and you can also have translatable strings in both
    sources. The tool locates and adds the strings from all sources into a single
    `.ts` file with corresponding contexts.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Qt为国际化提供了出色的支持。Qt在所有用户界面元素中内置了对许多语言的支持。但是，在为应用程序编写源代码时，您必须遵循某些实践。这包括标记可翻译的字符串，避免模糊的字符串，使用带编号的参数（`%n`）作为占位符，并加载正确的翻译文件。您可以在C++和用户界面文件中使用，也可以在两个源文件中使用可翻译的字符串。该工具会定位并将所有源文件中的字符串添加到一个带有相应上下文的单个`.ts`文件中。
- en: The translation files with `.ts` extension are used during application development.
    These files can be compiled into a compact binary format. The compiled translation
    files are encoded in the `QM` format and have the `.qm` file extension. While
    running an application, the Qt runtime makes use of `.qm` files instead of `.ts`
    files. You can convert `.ts` to `.qm` files using the `lrelease` tool. A `.qm`
    file is a lightweight binary file. It allows lightning-fast translation lookups.
    You can specify `.ts` files on the command line or in a `.pro` project file to
    be processed by `lrelease`. This tool is used every time an application is released,
    from the test version to the final production version. If the `.qm` files aren't
    available, then the application will still work fine and use the original texts
    from the source files.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 带有`.ts`扩展名的翻译文件在应用程序开发过程中使用。这些文件可以编译成紧凑的二进制格式。编译后的翻译文件以`QM`格式编码，并具有`.qm`文件扩展名。在运行应用程序时，Qt运行时使用`.qm`文件而不是`.ts`文件。您可以使用`lrelease`工具将`.ts`文件转换为`.qm`文件。`.qm`文件是一种轻量级的二进制文件。它允许快速的翻译查找。您可以在命令行或`.pro`项目文件中指定要由`lrelease`处理的`.ts`文件。每次发布应用程序时都会使用此工具，从测试版本到最终生产版本。如果没有`.qm`文件，则应用程序仍将正常工作，并使用源文件中的原始文本。
- en: 'For the selection of languages, Qt Linguist and `lrelease` use certain internal
    rules. You can find details about these rules at the following link:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 对于语言的选择，Qt Linguist和`lrelease`使用某些内部规则。您可以在以下链接中找到有关这些规则的详细信息：
- en: '[https://doc.qt.io/qt-6/i18n-plural-rules.html](https://doc.qt.io/qt-6/i18n-plural-rules.html)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://doc.qt.io/qt-6/i18n-plural-rules.html](https://doc.qt.io/qt-6/i18n-plural-rules.html)'
- en: 'Let''s have a look at the Qt Linguist user interface. You can launch Qt Linguist
    from the Qt installation directory by double-clicking the **Linguist** executable
    or selecting it from the command prompt. You will see the following user interface
    appear on your screen:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看Qt Linguist用户界面。您可以通过双击**Linguist**可执行文件或从命令提示符中选择它来启动Qt Linguist。您会在屏幕上看到以下用户界面出现：
- en: '![Figure 11.1 – Qt Linguist user interface'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.1 - Qt Linguist用户界面'
- en: '](img/Figure_11.1_B16231.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.1_B16231.jpg)'
- en: Figure 11.1 – Qt Linguist user interface
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.1 - Qt Linguist用户界面
- en: In the preceding figure, you can see multiple sections and there are a few disabled
    buttons in the toolbar. You can open a `.ts` file from the **File** menu. We will
    discuss these sections while discussing an example in a later section of this
    chapter.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在上图中，您可以看到多个部分，并且工具栏中有一些禁用的按钮。您可以从**文件**菜单中打开一个`.ts`文件。我们将在本章的后面部分讨论一个示例时讨论这些部分。
- en: 'You can learn more about Qt Linguist and the GUI interface at the following
    web page:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下网页了解更多关于Qt Linguist和GUI界面的信息：
- en: '[https://doc.qt.io/qt-6/linguist-translators.html](https://doc.qt.io/qt-6/linguist-translators.html)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://doc.qt.io/qt-6/linguist-translators.html](https://doc.qt.io/qt-6/linguist-translators.html)'
- en: In this section, you got familiar with terms related to internationalization
    and tools provided by the Qt framework. With a good understanding of the basics,
    we are ready to write a translation-aware application in the next section.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您熟悉了与国际化相关的术语和Qt框架提供的工具。在对基础知识有了很好的理解之后，我们准备在下一节中编写一个支持翻译的应用程序。
- en: Writing source code for translation
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写用于翻译的源代码
- en: In this section, we will discuss how to mark strings as translatable strings
    and how to use the tools provided by Qt. Wherever your application uses a quoted
    string that is visible to the user, make sure the `QCoreApplication::translate()`
    method processes it. To do this, simply use the `tr()` method to mark the strings
    as translatable that are meant for display purposes. This feature is used to show
    which text strings are translatable inside your C++ source files.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论如何标记字符串为可翻译字符串以及如何使用Qt提供的工具。无论您的应用程序在何处使用对用户可见的带引号的字符串，都要确保`QCoreApplication::translate()`方法对其进行处理。要做到这一点，只需使用`tr()`方法标记那些用于显示目的的可翻译字符串。此功能用于显示C++源文件中哪些文本字符串是可翻译的。
- en: 'For example, if you want to use a `QLabel` to show text on a user interface,
    then embed the text inside the `tr()` method as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您想要使用`QLabel`在用户界面上显示文本，那么将文本嵌入`tr()`方法中如下：
- en: '`QLabel *label = new QLabel(tr("Welcome"));`'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`QLabel *label = new QLabel(tr("Welcome"));`'
- en: The class name is the translation context for the `QObject` and its derived
    classes. To override the context, `QObject`-derived classes must use the `Q_OBJECT`
    macro in their class definition. This macro sets the context for the derived classes.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 类名是`QObject`及其派生类的翻译上下文。要覆盖上下文，`QObject`派生类必须在其类定义中使用`Q_OBJECT`宏。此宏为派生类设置上下文。
- en: 'Qt provides several convenience macros and methods for internationalization.
    A few of the most common macros used for translation are as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Qt为国际化提供了几个方便的宏和方法。一些最常用于翻译的宏如下：
- en: '`tr()` returns a translated string if translation is available in a C++ source
    file.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在C++源文件中有可用的翻译，`tr()`会返回一个翻译后的字符串。
- en: '`qsTr()` returns a translated string if translation is available in a QML file.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在QML文件中有可用的翻译，`qsTr()`会返回一个翻译后的字符串。
- en: '`qtTrId()` finds and returns a translated string identified by an ID in a C++
    file.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qtTrId()`在C++文件中查找并返回一个由ID标识的翻译后的字符串。'
- en: '`qsTrId()` finds and returns a translated string identified by an ID in a QML
    file.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qsTrId()`在QML文件中查找并返回一个由ID标识的翻译后的字符串。'
- en: '`QT_TR_NOOP()` tells `lupdate` to collect the string in the current context
    for translating later.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QT_TR_NOOP()`告诉`lupdate`收集当前上下文中的字符串以便以后翻译。'
- en: '`QT_TRID_NOOP()` marks an ID for dynamic translation.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QT_TRID_NOOP()`标记动态翻译的ID。'
- en: '`QCoreApplication::translate()` provides the translation by querying the installed
    translation files.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QCoreApplication::translate()`通过查询已安装的翻译文件提供翻译。'
- en: '`qsTranslate()` provides a translated version for a given context in a QML
    file.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qsTranslate()`在QML文件中为给定上下文提供一个翻译版本。'
- en: '`QQmlEngine::retranslate()` updates all binding expressions with strings marked
    for translation.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QQmlEngine::retranslate()`更新所有标记为翻译的字符串的绑定表达式。'
- en: Translatable strings in C++ files are marked using `tr()`, and in QML files
    `qsTr()` is used. We will discuss these macros and methods throughout this chapter.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在C++文件中，可翻译的字符串使用`tr()`标记，在QML文件中使用`qsTr()`。我们将在本章中讨论这些宏和方法。
- en: 'All the translatable strings are fetched by the `lupdate` tool and updated
    in a **Translation Source** (**TS**). A TS file is an XML file. Usually, TS files
    follow the following naming convention:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 所有可翻译的字符串都由`lupdate`工具获取，并更新到**翻译源**（**TS**）中。TS文件是一个XML文件。通常，TS文件遵循以下命名约定：
- en: '`ApplicationName>_<LanguageCode>_<CountryCode>.ts`'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`ApplicationName>_<LanguageCode>_<CountryCode>.ts`'
- en: In this convention, `LanguageCode` is an ISO 639 language code in lowercase
    and `CountryCode` is an ISO 3166 two-letter country code in uppercase. You can
    create translations for the same language but targeting a different country by
    using the specific country code. You can create a default translation file with
    a language code and country code while creating a Qt application through Qt Creator's
    new project wizard.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个约定中，`LanguageCode`是小写的ISO 639语言代码，`CountryCode`是大写的ISO 3166两字母国家代码。您可以通过使用特定的国家代码为相同的语言创建不同国家的翻译。在通过Qt
    Creator的新项目向导创建Qt应用程序时，您可以创建一个带有语言代码和国家代码的默认翻译文件。
- en: 'Once you create the `.ts` files, you can run `lupdate` to update the `.ts`
    files with all the user-visible strings. You can run `lupdate` from the command
    line as well as from Qt Creator and the Visual Studio add-in. Let''s use Qt''s
    command prompt to run the following command for the `HelloWorld` application:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`.ts`文件后，您可以运行`lupdate`来更新所有用户可见的字符串的`.ts`文件。您可以从命令行以及从Qt Creator和Visual Studio插件运行`lupdate`。让我们使用Qt的命令提示符来运行`HelloWorld`应用程序的以下命令：
- en: '[PRE0]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`lupdate` fetches the translatable strings from different source files such
    as `.cpp`, `.h`, `.qml`, and `.ui`. For `lupdate` to work effectively, you should
    specify the translation files in the application''s `.pro` file under the `TRANSLATIONS`
    variable. Look at the following `.pro` file section where we have added six translation
    source files:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`lupdate`从不同的源文件（如`.cpp`、`.h`、`.qml`和`.ui`）中获取可翻译的字符串。为了使`lupdate`有效工作，您应该在应用的`.pro`文件中的`TRANSLATIONS`变量下指定翻译文件。看下面的`.pro`文件部分，我们已经添加了六个翻译源文件：'
- en: '[PRE1]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can also add wildcard-based translation file selections with `*.ts`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`*.ts`添加基于通配符的翻译文件选择。
- en: 'To translate a Qt Quick application, use the `qsTr()` method to mark the strings
    inside the `.qml` files. You can create a translation file for a single QML file
    as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要翻译Qt Quick应用程序，使用`qsTr()`方法标记`.qml`文件中的字符串。您可以按以下方式为单个QML文件创建翻译文件：
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can create multiple translation files for different languages and put them
    inside a `.qrc` file:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以为不同语言创建多个翻译文件，并将它们放在`.qrc`文件中：
- en: '[PRE3]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can process all QML files in a `.qrc` file using `lupdate` as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以按以下方式使用`lupdate`处理`.qrc`文件中的所有QML文件：
- en: '[PRE4]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To process all QML files without using a `.qrc` file, type the following into
    Qt''s command prompt:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要处理所有QML文件而不使用`.qrc`文件，可以在Qt的命令提示符中输入以下内容：
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can also pass a C++ source file as an argument along with the resource
    file. It is optional to mention translation files in the `.pro` file. You can
    do it by specifying the translation file on the command line as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以将C++源文件作为参数与资源文件一起传递。在`.pro`文件中提及翻译文件是可选的。您可以通过在命令行中指定翻译文件来实现：
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`lrelease` integrates translations that are marked as `finished`. If a string
    is missing translations and is marked as `unfinished`, then the original text
    is used. Translators or developers can modify the TS file contents and mark it
    as `finished` with the following steps:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`lrelease` 集成了标记为`finished`的翻译。如果一个字符串缺少翻译并且被标记为`unfinished`，那么将使用原始文本。翻译者或开发人员可以修改TS文件内容，并按以下步骤将其标记为`finished`：'
- en: Launch Qt Linguist and open the `.ts` file from the `.ts` file in the project
    structure and open with Qt Linguist, as shown here:![Figure 11.2 – The Open With
    Qt Linguist option in Qt Creator
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Qt Linguist并打开项目结构中的`.ts`文件，如下所示：![图11.2 - 在Qt Creator中使用Qt Linguist选项打开
- en: '](img/Figure_11.2_B16231.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.2_B16231.jpg)'
- en: Figure 11.2 – The Open With Qt Linguist option in Qt Creator
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.2 - 在Qt Creator中使用Qt Linguist选项打开
- en: Then click on any of the contexts in the **Context** view to see the translatable
    strings for that context in the **Strings** view.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后点击**Context**视图中的任何上下文，以查看**Strings**视图中该上下文的可翻译字符串。
- en: In the **Source text** view, enter the translation of the current string. You
    can find existing translations and similar phrases in the **Phrases and Guesses**
    view.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Source text**视图中，输入当前字符串的翻译。您可以在**Phrases and Guesses**视图中找到现有的翻译和类似短语。
- en: The translator may enter a comment in the **Translator comments** field.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 翻译者可以在**Translator comments**字段中输入评论。
- en: To finish the translation, press *Ctrl* + *Enter* and select the tick icon from
    the toolbar. You will see a green tick mark for translated strings.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要完成翻译，按下*Ctrl* + *Enter*并从工具栏中选择勾号图标。您将看到已翻译字符串的绿色勾号。
- en: Finally, save the file and exit the Qt Linguist tool.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，保存文件并退出Qt Linguist工具。
- en: 'You can run `lrelease` without specifying a `.pro` file. When you run `lrelease`
    to read the `.ts` files, then it generates `.qm` files that are used by the application
    at runtime:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在不指定`.pro`文件的情况下运行`lrelease`。当您运行`lrelease`来读取`.ts`文件时，它会生成应用程序在运行时使用的`.qm`文件：
- en: '[PRE7]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Once the `.qm` files are generated, add them to a `.qrc` file. Your application
    is now ready for translation.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦生成了`.qm`文件，将它们添加到`.qrc`文件中。您的应用程序现在已准备好进行翻译。
- en: You can also use a text ID-based translation mechanism. In this approach, every
    translatable string in the application is assigned a unique identifier. These
    unique text identifiers are directly used in the source code as a replacement
    for actual strings. The user interface developers would need to put more effort
    into this but it is much easier to maintain if your application contains huge
    numbers of translated strings.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用基于文本ID的翻译机制。在这种方法中，应用程序中的每个可翻译字符串都被分配一个唯一的标识符。这些唯一的文本标识符直接用作源代码中实际字符串的替代。用户界面开发人员需要在这方面付出更多的努力，但是如果您的应用程序包含大量翻译字符串，这种方法更容易维护。
- en: In some applications, certain classes may not use `QObject` as the base class
    or use the `Q_OBJECT` macro in their class definition. But these classes may contain
    some strings that may require translation. To solve this issue, Qt provides certain
    macros to add translation support.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些应用程序中，某些类可能不使用`QObject`作为基类，或者在其类定义中使用`Q_OBJECT`宏。但是这些类可能包含一些需要翻译的字符串。为解决此问题，Qt提供了一些宏来添加翻译支持。
- en: 'You can use `Q_DECLARE_TR_FUNCTIONS(ClassName)` as follows to enable translation
    for your non-Qt classes:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下方式使用`Q_DECLARE_TR_FUNCTIONS(ClassName)`来启用非Qt类的翻译：
- en: '[PRE8]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This macro is defined inside `qcoreapplication.h`. When you add this macro,
    Qt adds the following function to your class to enable translation:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 此宏在`qcoreapplication.h`中定义。当您添加此宏时，Qt会向您的类添加以下函数以启用翻译：
- en: '[PRE9]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: From the preceding code, you can notice that Qt calls `QCoreApplication::translate()`
    with the class name as the context.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 从上述代码中，您可以注意到Qt使用类名作为上下文调用`QCoreApplication::translate()`。
- en: You can also have translatable strings outside a class or method; `QT_TR_NOOP()`
    and `QT_TRANSLATE_NOOP()` are used to mark these strings as translatable. There
    are different macros and functions available for text ID-based translation. You
    can use `qsTrId()` instead of `qsTr()`, and `QT_TRID_NOOP()` instead of `QT_TR_NOOP()`.
    You can use the same text IDs as user interface strings instead of plain strings
    in the user interface.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在类或方法之外使用可翻译字符串；`QT_TR_NOOP()`和`QT_TRANSLATE_NOOP()`用于标记这些字符串为可翻译。有不同的宏和函数可用于基于文本ID的翻译。您可以使用`qsTrId()`代替`qsTr()`，以及`QT_TRID_NOOP()`代替`QT_TR_NOOP()`。您可以在用户界面中使用相同的文本ID作为用户界面字符串，而不是在用户界面中使用普通字符串。
- en: In Qt Linguist, multiple translation files can be loaded and edited simultaneously.
    You can also use **phrase books** to reuse existing translations. Phrase books
    are standard XML files that contain typical phrases and their translations. These
    files are created and updated by Qt Linguist and can be used by any number of
    projects and applications. If you would like to translate source strings that
    are available in a phrase book, Qt Linguist's Batch Translation function can be
    used. Select **Batch Translation** to specify which phrase books to use and in
    what order during the batch translation process. Only entries with no current
    translation should be considered, and batch-translated entries should be marked
    as **Accepted**. You can also create a new phrase book from the **New Phrase Book**
    option.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在Qt Linguist中，可以同时加载和编辑多个翻译文件。您还可以使用**phrase books**来重用现有的翻译。Phrase books是包含典型短语及其翻译的标准XML文件。这些文件由Qt
    Linguist创建和更新，并可被任意数量的项目和应用程序使用。如果要翻译源字符串，而这些源字符串在短语书中可用，可以使用Qt Linguist的批量翻译功能。选择**Batch
    Translation**来指定批量翻译过程中要使用的短语书及其顺序。只有没有当前翻译的条目应该被考虑，批量翻译的条目应该被标记为**Accepted**。您还可以从**New
    Phrase Book**选项创建一个新的短语书。
- en: Important note
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: '`lupdate` requires all source code to be encoded in UTF-8 by default. Files
    that feature a `CODECFORSRC` qmake variable to `UTF-16` to parse files without
    a BOM as UTF-16\. By default, certain editors such as Visual Studio use a separate
    encoding. You can avoid encoding problems by limiting source code to ASCII and
    using escape sequences for translatable strings.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`lupdate`默认要求所有源代码以UTF-8编码。具有`CODECFORSRC`qmake变量为`UTF-16`的文件将解析为UTF-16而不带BOM。默认情况下，某些编辑器（如Visual
    Studio）使用单独的编码。通过将源代码限制为ASCII并为可翻译的字符串使用转义序列，您可以避免编码问题。'
- en: In this section, we discussed how to use `lupdate` and `lrelease` to create
    and update translation files. Next, we will learn how to install a translator
    and load a translation file in your Qt application.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了如何使用`lupdate`和`lrelease`创建和更新翻译文件。接下来，我们将学习如何安装翻译器并在Qt应用程序中加载翻译文件。
- en: Loading translations in a Qt application
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Qt应用程序中加载翻译
- en: In the previous section, we created translation files and understood the uses
    of the tools. To look up translations in a TS file, `QTranslator` functions are
    used. The translator must be instantiated before the application's GUI objects.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我们创建了翻译文件并了解了工具的用途。在TS文件中查找翻译时，使用`QTranslator`函数。必须在应用程序的GUI对象之前实例化翻译器。
- en: 'Let''s have a look at how to load these translation files using `QTranslator`
    in the following code snippet:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何在以下代码片段中使用`QTranslator`加载这些翻译文件：
- en: '[PRE10]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the preceding code, you can see that we have created a `translator` object
    and loaded the corresponding translation file. `QLocale` is used to fetch the
    underlying system language. You can also use `QLocale` for localizing numbers,
    the date, the time, and currency strings.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，您可以看到我们创建了一个`translator`对象并加载了相应的翻译文件。`QLocale`用于获取底层系统语言。您还可以使用`QLocale`本地化数字、日期、时间和货币字符串。
- en: 'Alternatively, you can load a translation file as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以按以下方式加载翻译文件：
- en: '[PRE11]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Here, we are looking into the system language and loading the corresponding
    translation files. The preceding approach works well when you want to use the
    system language as your application language. However, some users may like to
    use a regional language that is different from the system language. In that case,
    we can change the language as per user choice. We will learn how to do that in
    the next section.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在查看系统语言并加载相应的翻译文件。当您希望将系统语言用作应用程序语言时，前面的方法效果很好。但是，有些用户可能希望使用与系统语言不同的区域语言。在这种情况下，我们可以根据用户选择更改语言。我们将在下一节中学习如何做到这一点。
- en: Switching languages dynamically
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态切换语言
- en: So far, you have learned how to use the system language or a default language
    for your Qt application. In most applications, you can just detect the language
    in `main()` and load an appropriate `.qm` file. Sometimes, your application must
    be able to support changes to the user's language settings while still running.
    An application that is used by multiple people in shifts may need to switch languages
    without requiring a restart.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您已经学会了如何为Qt应用程序使用系统语言或默认语言。在大多数应用程序中，您只需在`main()`中检测语言并加载适当的`.qm`文件。有时，您的应用程序必须能够在运行时支持用户语言设置的更改。需要在多人轮班使用的应用程序可能需要在无需重新启动的情况下切换语言。
- en: To achieve this in a Qt Widgets-based application, you can override `QWidget::changeEvent()`.
    Then, you have to check whether the event is of the `QEvent::LanguageChange` type.
    You can retranslate the user interface accordingly.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 要在基于Qt Widgets的应用程序中实现这一点，您可以重写`QWidget::changeEvent()`。然后，您必须检查事件是否属于`QEvent::LanguageChange`类型。您可以相应地重新翻译用户界面。
- en: 'The following code snippet explains how to achieve dynamic translation in a
    Qt Widgets-based GUI:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段解释了如何在基于Qt Widgets的GUI中实现动态翻译：
- en: '[PRE12]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`QEvent::LocaleChange` can cause the list of installed translators to switch.
    You can create an application with a user interface that provides users with the
    option to change the current application language. When the `QEvent::LanguageChange`
    event occurs, the default event handler for `QWidget` subclasses will call this
    method. If you are using the `QCoreApplication::installTranslator()` function
    to install a new translation, you will get a `LanguageChange` event. In addition,
    by sending `LanguageChange` events to other widgets, the GUI will force them to
    update. Any other events can be passed to the base class for further processing.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`QEvent::LocaleChange`可能会导致安装的翻译器列表切换。您可以创建一个带有用户界面的应用程序，让用户选择更改当前应用程序语言的选项。当发生`QEvent::LanguageChange`事件时，`QWidget`子类的默认事件处理程序将调用此方法。如果您使用`QCoreApplication::installTranslator()`函数安装新的翻译，您将收到一个`LanguageChange`事件。此外，通过向其他小部件发送`LanguageChange`事件，GUI将强制它们更新。任何其他事件都可以传递给基类进行进一步处理。'
- en: To enable dynamic translation, you can provide an option in the command line
    or over a GUI. By default, Qt puts all of the translatable strings in the `.ui`
    file inside `retranslateUi()`. You have to call this function whenever the language
    is changed. You can also create and call your custom method to retranslate the
    strings created through C++ code based on the `QEvent::LanguageChange` event.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 实现动态翻译，您可以在命令行或GUI中提供选项。默认情况下，Qt将所有可翻译的字符串放在`.ui`文件中的`retranslateUi()`中。每当语言更改时，您都必须调用此函数。您还可以创建并调用自定义方法，根据`QEvent::LanguageChange`事件重新翻译通过C++代码创建的字符串。
- en: In this section, we discussed how to achieve dynamic translation in the application
    runtime. In the next section, we will create a translation-aware application using
    Qt Widgets.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了如何在应用程序运行时实现动态翻译。在下一节中，我们将使用Qt Widgets创建一个支持翻译的应用程序。
- en: Internationalization with Qt Widgets
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Qt Widgets进行国际化
- en: In the previous sections, we discussed how to create translation files and how
    to use `QTranslator` to load a translation file. Let's create a simple example
    using Qt Widgets and implement our learning.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分中，我们讨论了如何创建翻译文件以及如何使用`QTranslator`来加载翻译文件。让我们使用Qt Widgets创建一个简单的示例并实现我们的学习。
- en: 'Follow the subsequent steps to create the sample application:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建示例应用程序：
- en: Create a Qt Widgets-based application using Qt Creator's new project creation
    wizard and follow through the screens as discussed in earlier chapters.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Qt Creator的新项目创建向导创建基于Qt小部件的应用程序，并按照之前章节中讨论的屏幕进行操作。
- en: On the **Translation File** screen, choose **German (Germany)** as the language
    option, or any preferred language.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**翻译文件**屏幕上，选择**德语（德国）**作为语言选项，或者选择任何首选语言。
- en: Finish the project creation. You will see that `Simplei18nDemo_de_DE.ts` is
    created in your project structure.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成项目创建。您将看到`Simplei18nDemo_de_DE.ts`在项目结构中创建了。
- en: Next, you add a `QLabel` to the `.ui` file and add `Welcome` text.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将`QLabel`添加到.ui文件中，并添加`欢迎`文本。
- en: Next, run `lupdate`. You can run `lupdate` from the command line as well as
    from the Qt Creator interface, as shown in *Figure 11.3*:![Figure 11.3 – Qt Linguist
    options in Qt Creator
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，运行`lupdate`。您可以从命令行以及从Qt Creator界面运行`lupdate`，如*图11.3*所示：![图11.3 - Qt Creator中的Qt语言家选项
- en: '](img/Figure_11.3_B16231.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.3_B16231.jpg)'
- en: Figure 11.3 – Qt Linguist options in Qt Creator
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.3 - Qt Creator中的Qt语言家选项
- en: 'When you run `lupdate`, you will see the following output in the console window:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您运行`lupdate`时，您将在控制台窗口中看到以下输出：
- en: '[PRE13]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, the `.ts` file is updated with strings. Open `Simplei18nDemo_de_DE.ts`
    with a plain text editor. You should see the following content:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，.ts文件已更新为字符串。使用纯文本编辑器打开`Simplei18nDemo_de_DE.ts`。您应该看到以下内容：
- en: '[PRE14]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You can see that the user interface strings are updated inside the .ts file
    and the language is defined for the translation at the top of the file. You can
    create respective translation files by modifying this field in the code:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到在.ts文件中更新了用户界面字符串，并且在文件顶部定义了翻译的语言。通过修改代码中的此字段，您可以创建相应的翻译文件：
- en: '`<TS version="2.1" language="de_DE">`'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`<TS version="2.1" language="de_DE">`'
- en: You will also see that the translation status is `unfinished`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 您还会看到翻译状态为`未完成`。
- en: So, let's open the file with Qt Linguist and complete the translation:![Figure
    11.4 – Example showing different sections of the Qt Linguist interface
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，让我们打开Qt语言家并完成翻译：![图11.4 - 显示Qt语言家界面的不同部分的示例
- en: '](img/Figure_11.4_B16231.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.4_B16231.jpg)'
- en: Figure 11.4 – Example showing different sections of the Qt Linguist interface
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.4 - 显示Qt语言家界面的不同部分的示例
- en: You will see six different sections in the user interface. Select a context
    in the **Context** view to load the corresponding strings.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将在用户界面中看到六个不同的部分。在**上下文**视图中选择上下文以加载相应的字符串。
- en: Add a translation in the **Source text** view. You can use Google Translate
    to translate the string into the desired language. Here we have translated the
    strings to the German language using Google Translate.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**源文本**视图中添加翻译。您可以使用谷歌翻译将字符串翻译成所需的语言。在这里，我们使用谷歌翻译将字符串翻译成德语。
- en: Note
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: There are multiple translations used. Please ignore if the strings don't have
    the exact meaning. I am not familiar with the German language. I have used this
    for demonstration purposes. Hence, I have added a translator's comments.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种翻译被使用。如果字符串的确切含义不符，请忽略。我对德语不熟悉。我用这个来进行演示。因此，我添加了翻译者的评论。
- en: To complete the translation, press *Ctrl* + *Enter* or click on the green tick
    icon on the toolbar.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要完成翻译，请按下*Ctrl* + *Enter*，或者单击工具栏上的绿色勾号图标。
- en: The next step is to save the translation. Repeat this for all translatable strings
    listed in the context.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是保存翻译。对上下文中列出的所有可翻译字符串重复此操作。
- en: 'Run `lrelease` from Qt''s command prompt or the IDE''s option. You will see
    that the `.qm` file is generated:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Qt的命令提示符或IDE选项中运行`lrelease`。您将看到生成了`.qm`文件：
- en: '[PRE15]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Let''s add the translator to `main.cpp` and load the translation file:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将翻译器添加到`main.cpp`并加载翻译文件：
- en: '[PRE16]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The final step is to run qmake and build the application. Then, hit the **Run**
    button in the bottom-left corner.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步是运行qmake并构建应用程序。然后，点击左下角的**运行**按钮。
- en: 'We have successfully translated our GUI into German. You will see the following
    output:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已成功将GUI翻译成德语。您将看到以下输出：
- en: '![Figure 11.5 – Output of the translation example using Qt Widgets'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.5 - 使用Qt小部件输出翻译示例'
- en: '](img/Figure_11.5_B16231.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.5_B16231.jpg)'
- en: Figure 11.5 – Output of the translation example using Qt Widgets
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.5 - 使用Qt小部件输出翻译示例
- en: Congratulations! You learned how to translate your application into a different
    language. You can now translate your Qt application to a local language and share
    it with your friends and colleagues.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您学会了如何将应用程序翻译成其他语言。您现在可以将Qt应用程序翻译成本地语言，并与朋友和同事分享。
- en: In this section, we discussed how to create a translation-aware application
    using Qt Widgets. In the next section, we will add dynamic translation capability
    to the Qt Widgets application.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了如何使用Qt小部件创建一个支持翻译的应用程序。在下一节中，我们将为Qt小部件应用程序添加动态翻译功能。
- en: Adding dynamic translation to a Qt Widgets application
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为Qt小部件应用程序添加动态翻译
- en: In the previous section, you learned how to create a Qt Widgets-based application
    and change the language to a preferred language. However, like most global applications,
    you may need to provide more translations and allow users to change the language
    on the fly.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，您学习了如何创建一个基于Qt小部件的应用程序，并将语言更改为首选语言。然而，像大多数全球应用程序一样，您可能需要提供更多的翻译，并允许用户随时更改语言。
- en: 'Let''s modify the example from the preceding section with some additional implementations:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修改前一节的示例，添加一些额外的实现：
- en: Add a combo box to the `.ui` file and add three languages to it. For explanation
    purposes, we have used English, German, and Spanish. We have added a message at
    the center and added a language-switching option in a dropdown:![Figure 11.6 –
    A form in Qt Designer showing layouts used in the example
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在.ui文件中添加一个下拉框，并向其中添加三种语言。为了说明目的，我们使用了英语、德语和西班牙语。我们在中心添加了一条消息，并在下拉菜单中添加了语言切换选项：![图11.6
    - Qt Designer中显示示例中使用的布局的表单
- en: '](img/Figure_11.6_B16231.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.6_B16231.jpg)'
- en: Figure 11.6 – A form in Qt Designer showing layouts used in the example
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.6 - 在Qt Designer中显示示例中使用的布局的表单
- en: 'Add the new translation files to the project file as follows:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新的翻译文件添加到项目文件中如下：
- en: '[PRE17]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Let''s modify the `CustomWidget` class and add the following methods for dynamic
    translation:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们修改`CustomWidget`类并添加以下方法进行动态翻译：
- en: '[PRE18]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The next step is to connect the signal and slot. We have created the connections
    in the constructor:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是连接信号和槽。我们已经在构造函数中创建了连接：
- en: '[PRE19]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Let''s add the following code to the slot definition:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将以下代码添加到槽定义中：
- en: '[PRE20]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Here, we are receiving the language choice from the user interface through the
    combo box index change signal.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们通过组合框索引更改信号从用户界面接收语言选择。
- en: 'The next step is to install a new translator:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是安装一个新的翻译器：
- en: '[PRE21]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The last step is to reimplement `changeEvent()`:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步是重新实现`changeEvent()`：
- en: '[PRE22]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Run qmake and hit the **Run** button on the IDE.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行qmake并在IDE上点击**运行**按钮。
- en: 'The following screen will appear:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 将出现以下屏幕：
- en: '![Figure 11.7 – Example showing the output when the English language is selected'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.7 - 当选择英语时显示输出的示例'
- en: '](img/Figure_11.7_B16231.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.7_B16231.jpg)'
- en: Figure 11.7 – Example showing the output when the English language is selected
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.7 - 当选择英语时显示输出的示例
- en: Change the language from the language selection dropdown. Let's select **German**
    as the new language. You will see the entire GUI changed with German strings:![Figure
    11.8 – Example showing the output when the German language is selected
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从语言选择下拉菜单中更改语言。让我们选择**德语**作为新语言。您将看到整个GUI都使用德语字符串更改了：![图11.8 - 当选择德语时显示输出的示例
- en: '](img/Figure_11.8_B16231.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.8_B16231.jpg)'
- en: Figure 11.8 – Example showing the output when the German language is selected
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.8 - 当选择德语时显示输出的示例
- en: 'Again, switch the language to **Spanish**. You will see the GUI text changed
    to Spanish:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次将语言切换为**西班牙语**。您将看到GUI文本已更改为西班牙语：
- en: '![Figure 11.9 – Example showing the output when the Spanish language is selected'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.9 - 当选择西班牙语时显示输出的示例'
- en: '](img/Figure_11.9_B16231.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.9_B16231.jpg)'
- en: Figure 11.9 – Example showing the output when the Spanish language is selected
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.9 - 当选择西班牙语时显示输出的示例
- en: Congratulations! You have successfully created a multilingual Qt Widgets application.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您已成功创建了一个多语言Qt Widgets应用程序。
- en: In this section, you learned how to translate your Qt Widgets-based GUI at runtime.
    In the next section, we will create a translation-aware application using Qt Quick.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您学会了如何在运行时翻译基于Qt Widgets的GUI。在下一节中，我们将使用Qt Quick创建一个具有翻译意识的应用程序。
- en: Internationalization with Qt Quick
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Qt Quick进行国际化
- en: In the previous section, we discussed internationalization in Qt Widgets. In
    this section, we will discuss different aspects of internationalizing your Qt
    Quick application. The underlying localization scheme in Qt Quick applications
    is similar to Qt Widgets applications. The same set of tools described in the
    Qt Linguist Manual are also used in Qt Quick. You can translate an application
    that uses both C++ and QML.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我们讨论了Qt Widgets中的国际化。在本节中，我们将讨论国际化Qt Quick应用程序的不同方面。Qt Quick应用程序中的基础本地化方案与Qt
    Widgets应用程序类似。Qt Quick中也使用了Qt Linguist手册中描述的相同一组工具。您可以翻译同时使用C++和QML的应用程序。
- en: In a Qt project file, the `SOURCES` variable is used for C++ source files. If
    you list QML or JavaScript files under this variable, the compiler will attempt
    to use the files considering them as C++ files. As a workaround, you can use a
    `lupdate_only {...}` conditional declaration to make the QML files visible to
    the `lupdate` tool but invisible to the C++ compiler.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在Qt项目文件中，`SOURCES`变量用于C++源文件。如果您在此变量下列出QML或JavaScript文件，则编译器将尝试将这些文件视为C++文件来使用。作为一种解决方法，您可以使用`lupdate_only
    {...}`条件声明，使QML文件对`lupdate`工具可见，但对C++编译器不可见。
- en: 'Consider the following example. The application''s `.pro` file snippet lists
    two QML files:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例。应用程序的`.pro`文件片段列出了两个QML文件：
- en: '[PRE23]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You may also use a wildcard match to specify the QML source files. Since the
    search is not recursive, you must list each directory in which user interface
    strings can be found in the source code:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用通配符匹配来指定QML源文件。由于搜索不是递归的，因此您必须列出源代码中可以找到用户界面字符串的每个目录：
- en: '[PRE24]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Let''s create an example with a simple translation. We will create a similar
    screen as we created in the Qt Widgets application. Follow these steps:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个简单的翻译示例。我们将创建一个与Qt Widgets应用程序中创建的类似屏幕相似的屏幕。按照以下步骤进行：
- en: Create a Qt Quick-based application using Qt Creator's new project creation
    wizard and follow through the screens as discussed in earlier chapters.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Qt Creator的新项目创建向导创建基于Qt Quick的应用程序，并按照之前章节中讨论的屏幕进行操作。
- en: On the **Translation File** screen, choose **German (Germany)** as the language
    option or any preferred language.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**翻译文件**屏幕上，选择**德语（德国）**作为语言选项或任何首选语言。
- en: Finish the project creation. You will see that `QMLTranslationDemo_de_DE.ts`
    is created in your project structure.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成项目创建。您将看到`QMLTranslationDemo_de_DE.ts`已创建在您的项目结构中。
- en: 'Next, you add a `Text` to the `.qml` file and add `Welcome` text:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在`.qml`文件中添加一个`Text`并添加`Welcome`文本：
- en: '[PRE25]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Add the following lines of code to `main.cpp`:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`main.cpp`中：
- en: '[PRE26]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The steps are similar to the Qt Widgets example. Next, run `lupdate`.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这些步骤与Qt Widgets示例类似。接下来运行`lupdate`。
- en: Follow the same steps to update the translation in the `.ts` files using Qt
    Linguist.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照相同的步骤使用Qt Linguist更新`.ts`文件中的翻译。
- en: Run `lrelease` from Qt's command prompt or from the IDE's option. You will see
    that the `.qm` file is generated.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Qt的命令提示符或IDE选项中运行`lrelease`。您将看到生成了`.qm`文件。
- en: Add the `.qm` files to the resources (`.qrc`) file and run qmake.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`.qm`文件添加到资源（`.qrc`）文件中并运行qmake。
- en: The last step is to build and run the application. Hit the **Run** button in
    Qt Creator.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步是构建和运行应用程序。在Qt Creator中点击**运行**按钮。
- en: 'You will see the identical output as we have seen in the Qt Widgets example:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到与Qt Widgets示例中相同的输出：
- en: '![Figure 11.10 – Output of the translation example using Qt Quick'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.10 - 使用Qt Quick进行翻译示例的输出'
- en: '](img/Figure_11.10_B16231.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.10_B16231.jpg)'
- en: Figure 11.10 – Output of the translation example using Qt Quick
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.10 - 使用Qt Quick进行翻译示例的输出
- en: In the preceding example, we translated our Qt Quick application to German.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我们将我们的Qt Quick应用程序翻译成了德语。
- en: In this section, we discussed how to create a translation-aware application
    using Qt Quick. In the next section, we will add dynamic translation capability
    to the Qt Quick application.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了如何使用Qt Quick创建一个支持翻译的应用程序。在下一节中，我们将为Qt Quick应用程序添加动态翻译功能。
- en: Translating dynamically in a Qt Quick application
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Qt Quick应用程序中进行动态翻译
- en: In the previous section, you learned how to create a Qt Quick-based application
    and how to change the language to a preferred language. Just like the Qt Widgets
    example, you can also add dynamic translations to your Qt Quick application.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，您学习了如何创建一个基于Qt Quick的应用程序，以及如何将语言更改为首选语言。就像Qt Widgets示例一样，您也可以向Qt Quick应用程序添加动态翻译。
- en: 'Let''s modify the previous example with some additional implementations:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一些额外的实现修改前面的示例：
- en: 'Create an i18n support class named `TranslationSupport` and add the following
    lines:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`TranslationSupport`的i18n支持类，并添加以下行：
- en: '[PRE27]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The preceding code is a helper class that supports the translation feature in
    QML. It is used to update the translation files in the translator.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码是一个辅助类，支持QML中的翻译功能。它用于更新翻译文件中的翻译。
- en: 'In the next step, add the following code to switch the translator:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，添加以下代码以切换翻译器：
- en: '[PRE28]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Then, add the following code to the QML `INVOKABLE` method definition:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在QML的`INVOKABLE`方法定义中添加以下代码：
- en: '[PRE29]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In the `main.cpp` file, add the following code. Please note that we have exposed
    the `TranslationSupport` instance to the QML engine:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main.cpp`文件中，添加以下代码。请注意，我们已将`TranslationSupport`实例暴露给QML引擎：
- en: '[PRE30]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Then add the `updateGUI()` signal with the `QQmlApplicationEngine::retranslate()`
    method.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后使用`QQmlApplicationEngine::retranslate()`方法添加`updateGUI()`信号。
- en: 'Let''s have a look at the `main.qml` file. We have added a combo box to the
    `.qml` file and added three languages to it. For explanation purposes, we have
    used English, German, and Spanish:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们看一下`main.qml`文件。我们在`.qml`文件中添加了一个下拉框，并添加了三种语言。为了说明目的，我们使用了英语、德语和西班牙语：
- en: '[PRE31]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Run `lupdate` and proceed with the translation process.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`lupdate`并继续翻译过程。
- en: Follow the same steps to update the translation in `.ts` files using Qt Linguist.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照相同步骤使用Qt Linguist更新`.ts`文件中的翻译。
- en: Run `lrelease` from Qt's command prompt or from the IDE's option. You will see
    that the `.qm` file is generated.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Qt的命令提示符或IDE选项中运行`lrelease`。您将看到生成了`.qm`文件。
- en: Add the `.qm` files to the resources (`.qrc`) file and run qmake.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`.qm`文件添加到资源（`.qrc`）文件中并运行qmake。
- en: The last step is to build and run the application. Hit the **Run** button in
    Qt Creator.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步是构建和运行应用程序。在Qt Creator中点击**运行**按钮。
- en: 'The following screen will appear:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 将出现以下屏幕：
- en: '![Figure 11.11 – Qt Quick example showing the output when the English language
    is selected'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.11 - 当选择英语语言时，Qt Quick示例显示的输出'
- en: '](img/Figure_11.11_B16231.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.11_B16231.jpg)'
- en: Figure 11.11 – Qt Quick example showing the output when the English language
    is selected
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.11 - 当选择英语语言时，Qt Quick示例显示的输出
- en: Change the language from the language selection dropdown. Let's select **German**
    as the new language. You will see the entire GUI changed with German strings:![Figure
    11.12 – Qt Quick example showing the output when the German language is selected
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从语言选择下拉框中更改语言。让我们选择**德语**作为新语言。您将看到整个GUI都改为了德语字符串：![图11.12 - 当选择德语语言时，Qt Quick示例显示的输出
- en: '](img/Figure_11.12_B16231.jpg)'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.12_B16231.jpg)'
- en: Figure 11.12 – Qt Quick example showing the output when the German language
    is selected
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.12 - 当选择德语语言时，Qt Quick示例显示的输出
- en: 'Again, switch the language to **Spanish**. You will see the GUI text changed
    to Spanish:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次将语言切换为**西班牙语**。您将看到GUI文本已更改为西班牙语：
- en: '![Figure 11.13 – Qt Quick example showing the output when the Spanish language
    is selected'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.13 - 当选择西班牙语言时，Qt Quick示例显示的输出'
- en: '](img/Figure_11.13_B16231.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.13_B16231.jpg)'
- en: Figure 11.13 – Qt Quick example showing the output when the Spanish language
    is selected
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.13 - 当选择西班牙语言时，Qt Quick示例显示的输出
- en: Congratulations! You have successfully created a multilingual Qt Quick application.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您已成功创建了一个多语言Qt Quick应用程序。
- en: In this section, you learned how to translate your Qt Quick-based GUI at runtime.
    In the next section, we will discuss how to deploy translation files.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您学习了如何在运行时翻译基于Qt Quick的GUI。在下一节中，我们将讨论如何部署翻译文件。
- en: Deploying translations
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署翻译
- en: In previous sections, we learned how to create translation-aware applications
    using both Qt Widgets and QML. You don't have to ship the `.ts` files with your
    application. To deploy translations, your release team must use the updated `.qm`
    files and ship them with the application package. The `.qm` files required for
    the application should be placed in a location where `QTranslator` can locate
    them. Typically, this is done by embedding `qm` files in a resource (`.qrc`) file
    or specifying a path that contain the `.qm` files relative to `QCoreApplication::applicationDirPath()`.
    The `rcc` tool is used to embed the translation files into a Qt application during
    the build process. It works by producing a corresponding C++ file containing specified
    data.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们学习了如何使用Qt Widgets和QML创建支持翻译的应用程序。您不必将`.ts`文件与应用程序一起发布。要部署翻译，您的发布团队必须使用更新的`.qm`文件并将其与应用程序包一起发布。应用程序所需的`.qm`文件应放在`QTranslator`可以找到它们的位置。通常，这是通过将`qm`文件嵌入到资源（`.qrc`）文件中或指定包含`.qm`文件的路径相对于`QCoreApplication::applicationDirPath()`来完成的。`rcc`工具用于在构建过程中将翻译文件嵌入到Qt应用程序中。它通过生成包含指定数据的相应C++文件来工作。
- en: 'You can automate the generation of `.qm` files by adding a script to your `.pro`
    file. You do it by following these steps:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过将脚本添加到您的`.pro`文件中来自动生成`.qm`文件。您可以按照以下步骤进行操作：
- en: To begin, use the language codes to declare the languages under the `LANGUAGES`
    variable in your Qt project (`.pro`) file.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在Qt项目（`.pro`）文件中使用语言代码来声明`LANGUAGES`变量下的语言。
- en: Add `lrelease` and `embed_translations` to the `CONFIG` variable.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`lrelease`和`embed_translations`添加到`CONFIG`变量中。
- en: Then add a function to generate the `.ts` files for the intended languages.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后添加一个函数来生成所需语言的`.ts`文件。
- en: Finally, define the `TRANSLATIONS_FILES` variable, use `lrelease` to create
    the `.qm` files, and embed them in the application resources.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，定义`TRANSLATIONS_FILES`变量，使用`lrelease`创建`.qm`文件，并将其嵌入到应用程序资源中。
- en: The preceding steps will run the `lrelease` automatically and generate the `.qm`
    files. The `lrelease` tool processes the translation files listed under the `TRANSLATIONS`
    and `EXTRA_TRANSLATIONS`. Unlike the `TRANSLATIONS` variable, files listed under
    `EXTRA_TRANSLATIONS` are only processed by `lrelease` tool, not by the `lupdate`.
    You need to embed the `.qm` files into your resource or ship the `.qm` files with
    your deployment package.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的步骤将自动运行`lrelease`并生成`.qm`文件。`lrelease`工具处理`TRANSLATIONS`和`EXTRA_TRANSLATIONS`下列出的翻译文件。与`TRANSLATIONS`变量不同，列在`EXTRA_TRANSLATIONS`下的文件只由`lrelease`工具处理，而不是由`lupdate`处理。您需要将`.qm`文件嵌入到资源中或者将`.qm`文件与部署包一起发布。
- en: 'You can learn more about automating generation of QM files here: [https://wiki.qt.io/Automating_generation_of_qm_files.](https://wiki.qt.io/Automating_generation_of_qm_files)'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在这里了解更多关于自动化生成QM文件的信息：[https://wiki.qt.io/Automating_generation_of_qm_files.](https://wiki.qt.io/Automating_generation_of_qm_files)
- en: In this section, you learned how to deploy your translation files. In the next
    section, we will summarize our takeaways from this chapter.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您学会了如何部署您的翻译文件。在下一节中，我们将总结本章的要点。
- en: Summary
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we took a look at the core concepts of internationalization
    and localization in Qt. We discussed different tools provided by Qt for internationalization.
    We learned how to use Qt Linguist. We also looked at how to translate a Qt Widgets
    application into a different language. Then, we learned how to translate dynamically.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们深入了解了Qt中国际化和本地化的核心概念。我们讨论了Qt提供的不同国际化工具。我们学会了如何使用Qt Linguist。我们还学习了如何将Qt
    Widgets应用程序翻译成不同的语言。然后，我们学会了如何动态翻译。
- en: In the latter part of the chapter, we discussed translating a Qt Quick application.
    Afterward, we learned how to switch languages dynamically in a Qt Quick application.
    Now you can create an application with multiple languages and share it with your
    clients or friends in a different geographical region.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的后半部分，我们讨论了如何翻译Qt Quick应用程序。之后，我们学会了如何在Qt Quick应用程序中动态切换语言。现在，您可以创建一个具有多种语言的应用程序，并与您在不同地理区域的客户或朋友分享。
- en: In [*Chapter 12*](B16231_12_Final_ASB_ePub.xhtml#_idTextAnchor273), *Performance
    Considerations*, we will learn about tools and tricks to optimize performance
    in a Qt application.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第12章*](B16231_12_Final_ASB_ePub.xhtml#_idTextAnchor273)，*性能考虑*中，我们将学习有关在Qt应用程序中优化性能的工具和技巧。
