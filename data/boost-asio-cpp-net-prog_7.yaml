- en: Chapter 7. Debugging the Code and Solving the Error
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。调试代码和解决错误
- en: 'We successfully developed a server-client program in the previous chapter.
    We also smoothly ran the program that we created. However, sometimes, we will
    face some problems when we run the application, such as receiving an unexpected
    result or the application crashing during runtime. In this situation, the debugging
    tool has the ability to help us to solve these problems. While discussing the
    debugging tool, in this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们成功开发了一个服务器-客户端程序。我们也顺利地运行了我们创建的程序。然而，有时当我们运行应用程序时，会遇到一些问题，比如收到意外的结果或应用程序在运行时崩溃。在这种情况下，调试工具有能力帮助我们解决这些问题。在本章中讨论调试工具时，我们将涵盖以下主题：
- en: Choosing the debugging tool for our use and keeping it simple and lightweight
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择适合我们使用的调试工具，并保持简单和轻量级
- en: Setting up the debugging tool and preparing the executable file to be debugged
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置调试工具并准备要调试的可执行文件
- en: Familiarizing with commands that are used in the debugging tool
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 熟悉调试工具中使用的命令
- en: Choosing a debugging tool
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择调试工具
- en: Many debugging tools around come with the **Integrated Development Environment**
    (**IDE**) of the programing language. For instance, **Visual Studio** has a debugging
    tool for C, C++, C#, and Visual Basic. Alternatively, you may have heard about
    CodeBlock and Bloodshed Dev-C++, which have their own debugging tools as well.
    However, if you remember what we discussed in [Chapter 1](part0015_split_000.html#page
    "Chapter 1. Simplifying Your Network Programming in C++"), *Simplifying Your Network
    Programming in C++*, we decided not to use an IDE because its heavy load will
    not load much resource to our computer. We need a tool that is lightweight to
    develop our network application.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 许多调试工具都与程序设计语言的**集成开发环境**（**IDE**）一起提供。例如，**Visual Studio**有用于C、C++、C#和Visual
    Basic的调试工具。或者，您可能听说过CodeBlock和Bloodshed Dev-C++，它们也有自己的调试工具。然而，如果您还记得我们在[第1章](part0015_split_000.html#page
    "第1章。简化C++中的网络编程") *简化C++中的网络编程*中讨论过的内容，我们决定不使用IDE，因为它的重负载不会给我们的计算机带来太多资源。我们需要一个轻量级的工具来开发我们的网络应用程序。
- en: Our choice of tool is the **GNU Debugger** (**GDB**). GDB is a powerful debugging
    tool based on a command-line tool; this means that we don't need the complex **Graphic
    User Interface** (**GUI**). In other words, all we need is a keyboard, not even
    a mouse, so the system becomes lightweight as well.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择的工具是**GNU调试器**（**GDB**）。GDB是一个基于命令行工具的强大调试工具；这意味着我们不需要复杂的**图形用户界面**（**GUI**）。换句话说，我们只需要键盘，甚至不需要鼠标，因此系统也变得轻量级。
- en: 'There are four main things that GDB can do to help us solve the code problem,
    which are as follows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: GDB可以做四件事来帮助我们解决代码问题，具体如下：
- en: '**Running our code line-by-line**: When GDB runs our program, we can see which
    line is being executed at the moment'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**逐行运行我们的代码**：当GDB运行我们的程序时，我们可以看到当前正在执行哪一行'
- en: '**Stopping our code on a specific line**: This is useful when we suspect that
    a certain line has caused an error'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在特定行停止我们的代码**：当我们怀疑某一行导致了错误时，这是很有用的'
- en: '**Examining the suspected line**: When we successfully stop at the suspected
    line, we can continue to examine it, for example, by checking the value of the
    variable involved'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**检查怀疑的行**：当我们成功停在怀疑的行时，我们可以继续检查它，例如，通过检查涉及的变量的值'
- en: '**Changing the value of the variable**: If we find the unexpected variable
    value that has caused an error, we can replace the value at GDB runtime with our
    expected value to ensure that the change of the value will solve the problem'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更改变量的值**：如果我们发现了导致错误的意外变量值，我们可以在GDB运行时用我们期望的值替换该值，以确保值的更改将解决问题'
- en: Installing a debugging tool
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装调试工具
- en: Fortunately, you will not need to install anything else if you followed all
    the steps related to the installation of MinGW-w64 in [Chapter 1](part0015_split_000.html#page
    "Chapter 1. Simplifying Your Network Programming in C++"), *Simplifying Your Network
    Programming in C++*, because the installer package contains the GDB tool as well.
    What we need to do now is to run the GDB tool in our command console to check
    whether it runs properly.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，如果您按照[第1章](part0015_split_000.html#page "第1章。简化C++中的网络编程") *简化C++中的网络编程*中与MinGW-w64安装相关的所有步骤，您将不需要安装其他任何东西，因为安装程序包中也包含了GDB工具。现在我们需要做的是在命令控制台中运行GDB工具，以检查它是否正常运行。
- en: 'In any active directory of our command prompt, type the following command:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令提示符的任何活动目录中，键入以下命令：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We should get the following output in our console window:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该在控制台窗口中得到以下输出：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As we can see in the preceding output that we got on the console, we have the
    version 7.8.1 (this is not the latest version as we just obtained it from the
    MinGW-w64 installer package). In the last line, we also have `(gdb)` with a blinking
    cursor next to it; this means that GDB is ready to receive the command. However,
    for now, the command we need to know is `quit` (alternatively, we can use `q`
    as a shortcut) to exit the GDB. Just type `q` and press *Enter*, and you will
    come back to the command prompt.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在控制台上得到的输出中所看到的，我们有版本7.8.1（这不是最新版本，因为我们刚刚从MinGW-w64安装程序包中获得它）。在最后一行中，我们还有`(gdb)`，旁边有一个闪烁的光标；这意味着GDB已准备好接收命令。然而，目前，我们需要知道的命令是`quit`（或者，我们可以使用`q`作为快捷方式）来退出GDB。只需输入`q`并按*Enter*，您将回到命令提示符。
- en: Preparing a file for debugging
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为调试准备一个文件
- en: 'GDB needs at least one executable file to be debugged. For this purpose, we
    will go back to the previous chapter to borrow the source code from there. Do
    you remember that we created a game in [Chapter 1](part0015_split_000.html#page
    "Chapter 1. Simplifying Your Network Programming in C++"), *Simplifying Your Network
    Programming in C++*, where we had to guess the random number that the computer
    was thinking of? If you remember, we have the source code, that we saved as `rangen.cpp`
    in the first chapter, and we have modified it by adding the `Boost` library, saving
    it as `rangen_boost.cpp` in [Chapter 3](part0025_split_000.html#page "Chapter 3. Introducing
    the Boost C++ Libraries"), *Introducing the Boost C++ Libraries*. In the next
    section, we will use the `rangen_boost.cpp` source code to demonstrate the use
    of GDB. Also, for those who have forgotten the source code, I''ve rewritten it
    for you here:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: GDB需要至少一个可执行文件进行调试。为此，我们将回到上一章，从那里借用源代码。你还记得我们在[第1章](part0015_split_000.html#page
    "Chapter 1. Simplifying Your Network Programming in C++")中创建了一个游戏，*Simplifying
    Your Network Programming in C++*，在那里我们必须猜测计算机所想的随机数吗？如果你记得，我们有源代码，我们在第一章中保存为`rangen.cpp`，并且我们通过添加`Boost`库对其进行了修改，将其保存为[第3章](part0025_split_000.html#page
    "Chapter 3. Introducing the Boost C++ Libraries")中的`rangen_boost.cpp`，*Introducing
    the Boost C++ Libraries*。在下一节中，我们将使用`rangen_boost.cpp`源代码来演示GDB的使用。另外，对于那些忘记源代码的人，我已经为你们重新写了它：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We will modify the compiling command in order for it to be used in GDB. We
    will use the `-g` option so that the executable file that is created will contain
    the debugging information and symbols that will be read by GDB. We will produce
    the `rangen_boost_gdb.exe` executable file from the `rangen_boost.cpp` file, which
    contains the debugging information and symbols using the following command:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将修改编译命令，以便在GDB中使用。我们将使用`-g`选项，以便创建的可执行文件包含GDB将读取的调试信息和符号。我们将使用以下命令从`rangen_boost.cpp`文件中生成包含调试信息和符号的`rangen_boost_gdb.exe`可执行文件：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As we can see in the preceding command, we add the `-g` option in the compiling
    command in order to record the debugging information and symbols in the executable
    file. Now, we should have the file named `rangen_boost_gdb.exe` in our active
    directory. In the next section, we will debug it using GDB.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的命令中所看到的，我们在编译命令中添加了`-g`选项，以便在可执行文件中记录调试信息和符号。现在，我们应该在我们的活动目录中有一个名为`rangen_boost_gdb.exe`的文件。在下一节中，我们将使用GDB对其进行调试。
- en: Tip
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: We are only able to debug the executable file that is compiled using the `-g`
    option. In other words, we will not be able to debug the executable file without
    having debugging information and symbols. Also, we cannot debug the source code
    file (`*.cpp` file) or header file (`*.h` file).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只能调试使用`-g`选项编译的可执行文件。换句话说，如果没有调试信息和符号，我们将无法调试可执行文件。此外，我们无法调试源代码文件(`*.cpp`文件)或头文件(`*.h`文件)。
- en: Running the program under GDB
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在GDB下运行程序
- en: 'After preparing the executable file that contains the debugging information
    and symbols, let''s run GDB to read all the symbols from the file and debug it.
    Run the following command to start the debugging process:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 准备包含调试信息和符号的可执行文件后，让我们运行GDB从文件中读取所有符号并进行调试。运行以下命令开始调试过程：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Our output will be as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的输出将如下：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We got the same output as the previous GDB output, except for the last line
    before `(gdb)`. This line tells us that GDB has successfully read all the debugging
    symbols and is ready to initiate the debugging process. In this step, we can also
    specify the arguments, if our program needs any. Since our program does not need
    to specify any argument, we can ignore it for now.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了与之前GDB输出相同的输出，除了`(gdb)`之前的最后一行。这一行告诉我们，GDB已成功读取所有调试符号，并准备启动调试过程。在这一步中，我们还可以指定参数，如果我们的程序需要。由于我们的程序不需要指定任何参数，我们现在可以忽略它。
- en: Starting the debugging process
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始调试过程
- en: To start the debugging process, we can call either the `run` or `start` command.
    The former will start our program under GDB, while the latter will behave similarly
    but will execute the code line-by-line. The difference is that if we have not
    yet set the breakpoint, the program will run as usual if we call the `run` command,
    whereas the debugger will automatically set the breakpoint in the main block of
    code, stopping the program if it reaches that point, if we start with the `start`
    command.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始调试过程，我们可以调用`run`或`start`命令。前者将在GDB下启动我们的程序，而后者将类似地行为，但将逐行执行代码。不同之处在于，如果我们尚未设置断点，如果调用`run`命令，程序将像往常一样运行，而如果我们使用`start`命令开始，调试器将自动在主代码块中设置断点，如果程序达到该点，程序将停止。
- en: 'For now, let''s use the `start` command for the debugging process. Just type
    `start` in the GDB prompt, and the console will append the following output:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用`start`命令进行调试过程。只需在GDB提示符中输入`start`，控制台将附加以下输出：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The debugging process is started. From the output, we can find that one breakpoint
    is created automatically inside the `main` block which is in line 10\. When there
    is no breakpoint, the debugger will choose the first statement inside the main
    block. That is why we get `line 10` as our automatic breakpoint.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 调试过程已经开始。从输出中，我们可以发现一个断点自动创建在`main`块内，位于第10行。当没有断点时，调试器将选择主块内的第一个语句。这就是为什么我们得到`line
    10`作为我们的自动断点。
- en: The continuing and stepping debugging process
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 继续和步进调试过程
- en: 'After we successfully start our program under GDB, the next step is to continue
    and step. We can use one of the following commands to continue and step the debugging
    process:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 成功在GDB下启动程序后，下一步是继续和步进。我们可以使用以下命令之一来继续和步进调试过程：
- en: '`continue`: This command will resume the execution of the program until our
    program completes normally. If it finds a breakpoint, the execution will stop
    at the line where the breakpoint is set.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`继续`: 这个命令将恢复程序的执行，直到程序正常完成。如果它找到一个断点，执行将停在设置断点的那一行。'
- en: '`step`: This command will execute just one more step of our program. The *step*
    might mean either one line of source code or one machine instruction. If it finds
    the invocation of function, it will come into the function and run one more step
    inside the function.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`step`：此命令将执行程序的下一步。*step*可能意味着源代码的一行或一条机器指令。如果它找到函数的调用，它将进入函数并在函数内运行一步。'
- en: '`next`: This command behaves similar to the `step` command, but it only continues
    to the next line in the current stack frame. In other words, if the `next` command
    finds the invocation of a function, it will not come into the function.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`next`：此命令类似于`step`命令，但它只会继续执行当前堆栈帧中的下一行。换句话说，如果`next`命令找到函数的调用，它将不会进入函数。'
- en: 'For now, let''s use the `next` command. Type the `next` command in the GDB
    prompt just after we call the `start` command. We should get the following output:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用`next`命令。在调用`start`命令后，立即在GDB提示符中键入`next`命令。我们应该得到以下输出：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The GDB executes the 10th line and then continues to the 11th line. We will
    call the `next` command again to continue the debugging process. However, if we
    just press the *Enter* key, the GDB will execute our previous command. This is
    why we now just need to press the *Enter* key, which will give us a blinking cursor.
    Now, we have to input the number that we guessed to be stored in the `guessNumber`
    variable. I will input the number `4`, but you may enter your favorite number.
    Press the *Enter* key again to continue debugging as many times as needed to exit
    the program normally. The following output will be appended:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: GDB执行第10行，然后继续执行第11行。我们将再次调用`next`命令以继续调试过程。但是，如果我们只是按下*Enter*键，GDB将执行我们之前的命令。这就是为什么现在我们只需要按下*Enter*键，这将给我们一个闪烁的光标。现在，我们必须输入我们猜测的数字以存储在`guessNumber`变量中。我将输入数字`4`，但您可以输入您喜欢的数字。再次按下*Enter*键，以继续调试，直到正常退出程序为止。以下输出将被附加：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As we can see in the preceding output, after we enter the number guessed, the
    program executes the `if` statement to ensure that the number we entered is not
    out of range. If our guessing number is valid, the program continues to generate
    a random number. Our guessing number is then compared with a random number generated
    by our program. The program will give a different output irrespective of the two
    numbers being same or not. Unfortunately, my guessing number is different than
    the random number. You might obtain a different output if you are able to guess
    the number correctly.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的输出中所看到的，当我们输入猜测的数字后，程序执行`if`语句以确保我们输入的数字不超出范围。如果我们猜测的数字有效，程序将继续生成一个随机数。然后我们猜测的数字将与程序生成的随机数进行比较。无论这两个数字是否相同，程序都会给出不同的输出。不幸的是，我的猜测数字与随机数不同。如果您能正确猜出数字，您可能会得到不同的输出。
- en: Printing the source code
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 打印源代码
- en: 'Sometimes, we may want to examine our source file while we run the debugging
    process. Since the debugging information and symbol are recorded in our program,
    GDB can print the source code even if it is an executable file. To print the source
    code, we can type `list` (or the `l` command for the shortcut) in the GDB prompt.
    By default, GDB will print ten lines at every invocation of the command. However,
    we can change this setting using the `set listsize` command. Also, to know the
    number of lines that will be displayed by the `list` command, we can invoke the
    `show listsize` command. Let''s see the following command line output:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们可能希望在运行调试过程时检查我们的源文件。由于调试信息和符号记录在我们的程序中，即使它是一个可执行文件，GDB也可以打印源代码。要打印源代码，我们可以在GDB提示符中键入`list`（或使用`l`命令进行快捷方式）。默认情况下，GDB在每次调用命令时会打印十行。但是，我们可以使用`set
    listsize`命令更改此设置。此外，要知道`list`命令将显示的行数，我们可以调用`show listsize`命令。让我们看看以下命令行输出：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We increase the number of lines to be displayed using the `list` command. Now,
    every time the `list` command is invoked, the output will display twenty lines
    of source code.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`list`命令增加要显示的行数。现在，每次调用`list`命令时，输出将显示二十行源代码。
- en: 'The following are several forms of the `list` command, which are the most common:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是几种`list`命令的形式，这是最常见的：
- en: '`list`: This command will show the source code for as many lines as the list
    size defines. If we call it again, it will display the remaining lines as many
    as the list size defines.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list`：此命令将显示与列表大小定义的行数相同的源代码。如果再次调用它，它将显示剩余的行数，与列表大小定义的行数相同。'
- en: '`list [linenumber]`: This command will display the lines centered on `linenumber`.
    The command `list 10` will display line 5 to line 14 since line 10 is at the center.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list [linenumber]`：此命令将显示以`linenumber`为中心的行。命令`list 10`将显示第5行到第14行，因为第10行位于中心。'
- en: '`list [functionname]`: This command will display lines centered on the beginning
    of the `functionname` variable. The command `list main` will display the `int
    main(void)` function at the center of list.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list [functionname]`：此命令将显示以`functionname`变量开头的行。命令`list main`将在列表的中心显示`int
    main(void)`函数。'
- en: '`list [first,last]`: This command will display lines from first to last. The
    command `list 15,16` will display line 15 and line 16 only.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list [first,last]`：此命令将显示从第一行到最后一行的内容。命令`list 15,16`将仅显示第15行和第16行。'
- en: '`list [,last]`: This command will display lines ending with the `last`. The
    command `list ,5` will display line 1 to line 5.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list [,last]`：此命令将显示以`last`结尾的行。命令`list ,5`将显示第1行到第5行。'
- en: '`list [first,]`: This command will display all the lines starting with the
    specified line as the first. The command `list 5,` will display line 5 to the
    rest of line if the number of the lines is more than the specified line number.
    Otherwise, it will display as many lines as the list size setting.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list [first,]`：此命令将显示从指定行开始的所有行。命令`list 5,`将显示第5行到最后一行，如果行数超过指定行数。否则，它将显示与列表大小设置相同的行数。'
- en: '`list +`: This command will display all the lines following the lines last
    displayed.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list +`：此命令将显示上次显示的行后面的所有行。'
- en: '`list -`: This command will display all the lines preceding the lines last
    displayed.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list -`：此命令将显示在上次显示的行之前的所有行。'
- en: Setting and deleting the breakpoint
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置和删除断点
- en: 'If we suspect that a line makes an error, we can set a breakpoint in that line
    so that the debugger stops the debugging process at that line. To set a breakpoint,
    we can call the `break [linenumber]` command. Consider that we want to stop at
    line 20, which contains the following code:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们怀疑某一行出错，我们可以在那一行设置一个断点，这样调试器就会在那一行停止调试过程。要设置断点，我们可以调用`break [linenumber]`命令。假设我们想在第20行停下来，其中包含以下代码：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here, we will have to call the `break 20` command just after we load our program
    under GDB to set a breakpoint at line 20\. The following output console illustrates
    this:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们需要在加载程序到GDB后立即调用`break 20`命令，在第20行设置一个断点。下面的输出控制台说明了这一点：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the preceding output console, just after our program is loaded under GDB,
    we call the `break 20` command. The debugger then sets a new breakpoint at line
    20\. Instead of calling the `start` command as we previously did, we call the
    `run` command to execute the program and let it stop when it finds a breakpoint.
    After we enter our guessing number, `2` for example, the debugger stops at line
    20, the line at which we expected it to stop. Then, we call the `next` command
    to continue the debugger and press the *Enter* key several times until the program
    exits.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的输出控制台中，我们在GDB下加载程序后，调用了`break 20`命令。然后调试器在第20行设置了一个新的断点。与之前一样，我们不再调用`start`命令，而是调用`run`命令来执行程序，并让它在找到断点时停止。在我们输入猜测的数字，例如`2`后，调试器停在第20行，这正是我们期望它停下来的地方。然后，我们调用`next`命令继续调试器，并按下*Enter*键多次直到程序退出。
- en: If we want to delete a breakpoint, simply use the `delete N` command, in which
    `N` is the order in which all the breakpoints are set. If we do not memorize all
    the locations of the breakpoints that we set, we can call the `info break` command
    to get a list of all breakpoints. We can also use the `delete` command (without
    `N`), which will delete all breakpoints.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要删除一个断点，只需使用`delete N`命令，其中`N`是设置的所有断点的顺序。如果我们不记得我们设置的所有断点的位置，我们可以调用`info
    break`命令来获取所有断点的列表。我们还可以使用`delete`命令（不带`N`），它将删除所有断点。
- en: Printing a variable value
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 打印变量值
- en: 'We were already able to stop at our desired line. We can also discover the
    value of the variable that we use in our program. We can call the `print [variablename]`
    command to print the value of any variable. Using the previous breakpoint, we
    will print the value of the variable `randomNumber`. Just after the debugger hits
    the breakpoint in line 20, we will call the print `randomNumber` command. Then,
    we call the `next` command and print the `randomNumber` variable again. Look at
    the following illustration of the command invocation:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经能够停在我们想要的行上。我们还可以发现我们程序中使用的变量的值。我们可以调用`print [variablename]`命令来打印任何变量的值。使用前面的断点，我们将打印变量`randomNumber`的值。在调试器命中第20行的断点后，我们将调用打印`randomNumber`命令。然后，我们调用`next`命令并再次打印`randomNumber`变量。看一下命令调用的下面说明：
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'As we can see in the preceding output, the following line is where the breakpoint
    is set:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的输出中所看到的，以下一行是设置断点的地方：
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Before the line is executed, we peek the value of `randomNumber` variable. The
    value of the variable is `0`. Then, we call the `next` command to instruct debugger
    to execute the line. After that, we peek at the value of the variable again, and
    this time it is `8`. Of course, in this experiment, you might get the different
    value rather than 8.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行该行之前，我们窥视`randomNumber`变量的值。变量的值为`0`。然后，我们调用`next`命令指示调试器执行该行。之后，我们再次窥视变量的值，这次是`8`。当然，在这个实验中，你可能得到的值与8不同。
- en: Modifying a variable value
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改变量值
- en: We will cheat our program by modifying the value of one of the variables. The
    value of a variable can be reassigned using the `set var [variablename]=[newvalue]`
    command. To ensure the type of the variable that we want to modify, we can call
    the `whatis [variablename]` command to get the required type of variable.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过修改一个变量的值来欺骗我们的程序。可以使用`set var [variablename]=[newvalue]`命令重新分配变量的值。为了确保我们要修改的变量的类型，我们可以调用`whatis
    [variablename]`命令来获取所需的变量类型。
- en: Now, let's change the value of the `randomNumber` variable after the program
    assigns a random number to the variable. We will restart the debugging process,
    delete all the breakpoints we set already, set a new breakpoint at line 22, and
    continue the debugging process by typing the `continue` command until the debugger
    hits the breakpoint in line 22\. On this condition, we can reassign the value
    of the `randomNumber` variable to be exactly the same as the value of the `guessNumber`
    variable. Now, call the `continue` command again. After this, we will be congratulated
    for guessing the correct number.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在程序为变量分配一个随机数后更改`randomNumber`变量的值。我们将重新启动调试过程，删除我们已经设置的所有断点，设置一个新的断点在第22行，并通过输入`continue`命令继续调试过程，直到调试器在第22行命中断点。在这种情况下，我们可以重新分配`randomNumber`变量的值，使其与`guessNumber`变量的值完全相同。现在，再次调用`continue`命令。之后，我们将因猜对数字而受到祝贺。
- en: 'For more details, let''s take a look at the following output console, which
    will illustrate the preceding step:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多细节，请看下面的输出控制台，它将说明前面的步骤：
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: As we can see in the preceding output, when we call the `start` command, the
    debugger asks us to stop the previous debugging process since it is still running.
    Just type the *Y* key and press the *Enter* key to answer the query. We can list
    all the available breakpoints using the `info break` command and then delete the
    desired breakpoint based on the order we get from the `info break` command. We
    call the `continue` command to resume the debugging process, and when the debugger
    hits the breakpoint, we reassign the `randomNumber` variable with the value of
    the `guessNumber` variable. We continue the debugging process and successfully
    modify the value of the `randomNumber` variable at runtime since we are congratulated
    by the program.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的输出中所看到的，当我们调用`start`命令时，调试器要求我们停止先前的调试过程，因为它仍在运行。只需键入*Y*键并按*Enter*键回答查询。我们可以使用`info
    break`命令列出所有可用的断点，然后根据从`info break`命令获取的顺序删除所需的断点。我们调用`continue`命令恢复调试过程，当调试器触发断点时，我们将`randomNumber`变量重新分配为`guessNumber`变量的值。我们继续调试过程，并成功在运行时修改了`randomNumber`变量的值，因为程序向我们表示祝贺。
- en: If we have many variables in the program, instead of printing all of the variables
    one-by-one, we can print the values of all the variables using the `info locals`
    command.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果程序中有很多变量，我们可以使用`info locals`命令打印所有变量的值，而不是逐个打印所有变量。
- en: Calling the command prompt
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调用命令提示符
- en: 'I occasionally call the Windows shell command inside the GDB prompt, such as
    the `cls` command to clear the screen, the `dir` command to list the content of
    the active directory, and even the compiling command. If you also want to execute
    the Windows shell command, the GDB command that you can use is `shell [Windows
    shell command]`. It actually just adds the `shell` command before the Windows
    shell command and argument when needed. Let''s see the following console output
    to understand executing the Windows shell command inside the GDB prompt. Let''s
    take a look at the following output:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我偶尔在GDB提示符内调用Windows shell命令，比如`cls`命令清除屏幕，`dir`命令列出活动目录的内容，甚至编译命令。如果你也想执行Windows
    shell命令，可以使用的GDB命令是`shell [Windows shell command]`。实际上，只需在需要时在Windows shell命令和参数前添加`shell`命令。让我们看看以下控制台输出，以了解在GDB提示符内执行Windows
    shell命令。让我们看看以下输出：
- en: '[PRE15]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In the preceding console output, we invoke the `dir` command to list all files
    that begin with the `rangen_boost` name within the active directory. Then, we
    invoke the compiling command to produce the `rangen_boost_gdb_2.exe` executable
    file in the active directory. Then, we call the `dir` command again to ensure
    that the `rangen_boost_gdb_2.exe` executable file has been successfully created.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的控制台输出中，我们调用`dir`命令列出活动目录中以`rangen_boost`开头的所有文件。然后，我们调用编译命令在活动目录中生成`rangen_boost_gdb_2.exe`可执行文件。然后，我们再次调用`dir`命令，以确保`rangen_boost_gdb_2.exe`可执行文件已成功创建。
- en: Tip
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can use the `apropos shell` command to get more information about shell
    command in GDB.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`apropos shell`命令获取有关GDB中shell命令的更多信息。
- en: Solving the error
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决错误
- en: In [Chapter 5](part0034_split_000.html#page "Chapter 5. Delving into the Boost.Asio
    Library"), *Delving into the Boost.Asio Library*, we discussed handling exception
    and error. If we follow all the source code in this book, we may never get any
    error code to confuse us. However, if we try to modify the source code, even just
    a little, an error code may be thrown for which the program will not give us any
    description. Since the error code thrown by the `Boost` library is based on Windows
    system error code and is beyond the scope of this book, we can find the description
    on **Microsoft Developer Network** (**MSDN**) website at [msdn.microsoft.com/en-us/library/windows/desktop/ms681381%28v=vs.85%29.aspx](http://msdn.microsoft.com/en-us/library/windows/desktop/ms681381%28v=vs.85%29.aspx).
    Here, we can find all translations of error codes from error 0 to 15999\. Using
    GDB and error code translation from MSDN would become a powerful tool for solving
    an error that occurs in our program.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第5章](part0034_split_000.html#page "第5章。深入了解Boost.Asio库")*深入了解Boost.Asio库*中，我们讨论了处理异常和错误。如果我们遵循本书中的所有源代码，可能永远不会得到任何错误代码来困扰我们。然而，如果我们尝试修改源代码，即使只是一点点，可能会抛出一个错误代码，而程序不会给我们任何描述。由于`Boost`库抛出的错误代码基于Windows系统错误代码，并且超出了本书的范围，我们可以在**Microsoft
    Developer Network**（**MSDN**）网站上找到描述，网址为[msdn.microsoft.com/en-us/library/windows/desktop/ms681381%28v=vs.85%29.aspx](http://msdn.microsoft.com/en-us/library/windows/desktop/ms681381%28v=vs.85%29.aspx)。在这里，我们可以找到从错误0到15999的所有错误代码的翻译。使用GDB和MSDN的错误代码翻译将成为解决程序中出现的错误的强大工具。
- en: 'Let''s go back to [Chapter 6](part0038_split_000.html#page "Chapter 6. Creating
    a Client-server Application"), *Creating a Client-server Application* and run
    the `serverasync` program. When the program is run, it listens to the client in
    `127.0.0.1` on port `4444`, which will be simulated by telnet in our example.
    However, what will happen if the client is not responding? To know further, let''s
    run the `serverasync` program without running telnet. The following error will
    be displayed because the client is not responding:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到[第6章](part0038_split_000.html#page "第6章。创建客户端-服务器应用程序")*创建客户端-服务器应用程序*并运行`serverasync`程序。当程序运行时，它会在`127.0.0.1`上的端口`4444`监听客户端，这将在我们的示例中由telnet模拟。但是，如果客户端不响应会发生什么？要进一步了解，让我们在不运行telnet的情况下运行`serverasync`程序。由于客户端未响应，将显示以下错误：
- en: '![Solving the error](img/00048.jpeg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![解决错误](img/00048.jpeg)'
- en: We got the system error code `995`. Now, with this error code, we can visit
    MSDN System Error Codes and find the error description, which is **The I/O operation
    has been aborted because of either a thread exit or an application request. (ERROR_OPERATION_ABORTED)**.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了系统错误代码`995`。现在，有了这个错误代码，我们可以访问MSDN系统错误代码并找到错误描述，即**I/O操作已因线程退出或应用程序请求而中止。
    (ERROR_OPERATION_ABORTED)**。
- en: What's next?
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接下来呢？
- en: We are familiar with the basic GDB commands. There are many more commands in
    GDB that we cannot discuss in this book. GDB has an official site that we can
    visit at [www.gnu.org/software/gdb/documentation/](http://www.gnu.org/software/gdb/documentation/).
    Here, we can find all the complete commands that we have not yet discussed.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们熟悉了基本的GDB命令。GDB中还有许多命令我们无法在这本书中讨论。GDB有一个官方网站，我们可以访问[www.gnu.org/software/gdb/documentation/](http://www.gnu.org/software/gdb/documentation/)。在这里，我们可以找到所有我们尚未讨论的完整命令。
- en: Note
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We can also get more detailed information on Boost C++ Libraries on the official
    website at [www.boost.org](http://www.boost.org), especially for the `Boost.Asio`
    library documentation, which is available at [www.boost.org/doc/libs/1_58_0/doc/html/boost_asio.html](http://www.boost.org/doc/libs/1_58_0/doc/html/boost_asio.html).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在官方网站[www.boost.org](http://www.boost.org)上获取更详细的Boost C++库信息，特别是`Boost.Asio`库的文档，可以在[www.boost.org/doc/libs/1_58_0/doc/html/boost_asio.html](http://www.boost.org/doc/libs/1_58_0/doc/html/boost_asio.html)上找到。
- en: Summary
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: The debugging process is an essential thing that we can do to analyse our program
    by running it step-by-step. When our program produces unexpected results or it
    crashes in the middle of an execution, there is no other choice than to run the
    debugging process. GDB is our choice since it is compatible with the C++ language,
    as it comes with MinGW-w64 installer packages and is lightweight when loaded.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 调试过程是我们通过逐步运行程序来分析程序的重要工作。当我们的程序产生意外结果或在执行过程中崩溃时，除了运行调试过程别无选择。GDB是我们的选择，因为它与C++语言兼容，随MinGW-w64安装程序包提供，并且加载时很轻量级。
- en: GDB can only run an executable file that compiles using the `-g` option. This
    option will add the debugging information and symbol, which are important in the
    debugging process. You will be unable to debug the executable files that are compiled
    without the `-g` option.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: GDB只能运行使用`-g`选项编译的可执行文件。这个选项会添加调试信息和符号，这在调试过程中很重要。如果没有使用`-g`选项编译可执行文件，你将无法对其进行调试。
- en: After we successfully load our program under GDB, we can choose either the `run`
    or `start` command to execute the debugging process. The `run` command will execute
    our program as usual but will stop if the debugger finds a breakpoint, while the
    `start` command will stop at the `main` block of program at the first execution.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功加载程序到GDB后，我们可以选择使用`run`或`start`命令来执行调试过程。`run`命令会像平常一样执行程序，但如果调试器找到断点，程序会停下来；而`start`命令会在程序的第一次执行时停在`main`块处。
- en: When the debugger stops at certain line, we have to decide whether to continue
    the debugging process. We have the option to run the program until it exits or
    if the breakpoint is found using the `continue` command. Alternatively, we can
    run the debugger step-by-step using the `next` command.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 当调试器停在某一行时，我们必须决定是否继续调试过程。我们可以选择使用`continue`命令运行程序直到退出，或者在找到断点时运行调试器的逐步调试使用`next`命令。
- en: To make the debugger stop at the execution of the debugging process, call the
    `break [linenumber]` command to set the breakpoint. If we want to ensure that
    we set the correct line number, call the `list` command to print the source code.
    Calling the `delete N` command will then delete the breakpoint where `N` can find
    the `info break` command.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要使调试器在调试过程的执行中停下来，可以使用`break [linenumber]`命令设置断点。如果我们想确保设置了正确的行号，可以使用`list`命令打印源代码。然后使用`delete
    N`命令删除断点，其中`N`可以在`info break`命令中找到。
- en: Retrieving the value of a variable is also important when finding an error.
    If the program produces unexpected output, we can trace the value of a variable
    by printing it. We can do this by using the `print [variablename]` command. At
    the variable we suspect is causing an error, we can reassign the value of that
    variable with a new one using the `set var [variablename]=[newvalue]` command.
    We can then run the debugger again until we obtain the expected output. When we
    have fixed all the errors, and are sure that everything is perfect, we can recompile
    our program by calling the compiling command inside GDB prompt using the `shell
    [Windows shell command]` command.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当查找错误时，获取变量的值也很重要。如果程序产生意外输出，我们可以通过打印变量的值来追踪变量的值。我们可以使用`print [variablename]`命令来做到这一点。对于我们怀疑引起错误的变量，我们可以使用`set
    var [variablename]=[newvalue]`命令重新分配该变量的值。然后我们可以再次运行调试器，直到获得预期的输出。当我们修复了所有错误，并确信一切完美无缺时，我们可以通过在GDB提示符中调用编译命令来重新编译我们的程序，使用`shell
    [Windows shell command]`命令。
