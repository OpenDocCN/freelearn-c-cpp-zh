- en: An Introduction to Functional Programming
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数式编程简介
- en: Why is functional programming useful? Functional programming constructs have
    popped up in all major programming languages in the past decade. Programmers have
    enjoyed their benefits—simplified loops, more expressive code, and simple parallelization.
    But there's more to it—decoupling from time, enabling opportunities to remove
    duplication, composability, and a simpler design. Higher adoption of functional
    programming (including the large-scale adoption of Scala in the financial sector)
    means more opportunities for you once you know and understand it. While we will
    take a deep dive into functional programming in this book to help you learn, remember
    that functional programming is another tool to add to your toolbox—one that you
    can choose to use when the problem and the context fits.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么函数式编程有用？在过去的十年里，函数式编程构造已经出现在所有主要的编程语言中。程序员们享受了它们的好处——简化循环，更具表现力的代码，以及简单的并行化。但其中还有更多——脱离时间的耦合，提供消除重复、可组合性和更简单的设计的机会。更多人采用函数式编程（包括金融领域大规模采用Scala）意味着一旦你了解并理解它，就会有更多的机会。虽然我们将在本书中深入探讨函数式编程，帮助你学习，但请记住，函数式编程是你工具箱中的另一个工具，当问题和上下文适合时，你可以选择使用它。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: An introduction to functional programming and an examination of how you've already
    been using functional constructs
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数式编程简介以及对你已经在使用的函数式构造的检查
- en: Structured loops versus functional loops
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结构化循环与函数式循环
- en: Immutability
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不可变性
- en: '**Object-oriented programming** (**OOP**) versus functional design'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**面向对象编程**（**OOP**）与函数式设计'
- en: Composability and removing duplication
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可组合性和消除重复
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The code works with g++ 7.3.0 and C++ 17; it includes a `makefile` for your
    convenience. You can find it in the GitHub repository ([https://github.com/PacktPublishing/Hands-On-Functional-Programming-with-Cpp](https://github.com/PacktPublishing/Hands-On-Functional-Programming-with-Cpp))
    in the `Chapter01` directory.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 代码适用于g++ 7.3.0和C++ 17；它包括一个`makefile`以方便你使用。你可以在GitHub仓库（[https://github.com/PacktPublishing/Hands-On-Functional-Programming-with-Cpp](https://github.com/PacktPublishing/Hands-On-Functional-Programming-with-Cpp)）的`Chapter01`目录中找到它。
- en: An introduction to functional programming
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数式编程简介
- en: My first experience with functional programming was at university. I was a 20-year-old
    geek who was interested in Sci-Fi, reading, and programming; programming was the
    highlight of my academic life. Everything to do with C++, Java, MATLAB, and a
    few other programming languages that we used was fun for me. Unfortunately, I
    can't say the same thing about the disciplines around electrical engineering,
    circuits, or compiler theory. I just wanted to write code!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我第一次接触函数式编程是在大学。我是一个20岁的极客，对科幻小说、阅读和编程感兴趣；编程是我学术生活的亮点。对我来说，与C++、Java、MATLAB以及我们使用的其他一些编程语言有关的一切都很有趣。不幸的是，我不能说同样的话适用于电气工程、电路或编译器理论等学科。我只想写代码！
- en: Based on my interests, functional programming should have been a very fun course
    for me. Our teacher was very passionate. We had to write code. But something went
    wrong—I didn't click with what the teacher was telling us. Why were lists so interesting?
    Why was the syntax so backward and full of parentheses? Why would I use these
    things when it was much simpler to write the same code in C++? I ended up trying
    to translate all the programming constructs I knew from BASIC and C++ into Lisp
    and OCaml. It completely missed the point of functional programming, but I passed
    the course and forgot about it for many years.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我的兴趣，函数式编程本应该是一门非常有趣的课程。我们的老师非常热情。我们不得不写代码。但出了些问题——我没有理解老师在告诉我们的内容。为什么列表如此有趣？为什么语法如此反向且充满括号？为什么我要使用这些东西，当用C++写相同的代码要简单得多？最终我试图将我从BASIC和C++中所知的所有编程构造翻译成Lisp和OCaml。这完全错过了函数式编程的要点，但我通过了这门课程，多年来都忘记了它。
- en: I imagine that many of you can relate to this story, and I have a possible reason
    for this. I now believe that my teacher, despite being extremely passionate, used
    the wrong approach. Today, I understand that functional programming has a certain
    elegance at its core, due to its strong relationship with mathematics. But that
    elegance requires a sense of insightful observation that I didn't have when I
    was 20, that is, a sense that I was lucky to build on after years of various experiences.
    It's obvious to me now that learning functional programming shouldn't be related
    to the ability of the reader to see this elegance.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我想很多人都能理解这个故事，我对此有一个可能的原因。我现在相信，尽管我的老师非常热情，但采用了错误的方法。今天，我明白了函数式编程在其核心具有一定的优雅，因为它与数学有着密切的关系。但这种优雅需要一种深刻的洞察力，而我20岁时并没有，也就是说，我在多年的各种经历后才有幸建立起来的洞察力。现在对我来说很明显，学习函数式编程不应该与读者看到这种优雅的能力有关。
- en: So, what approach could we use instead? Thinking about the past me, that is,
    the geek who just wanted to write code, there's only one way to go—look at the
    common problems in code and explore how functional programming reduces or removes
    them entirely. Additionally, start from the beginning; you've already seen functional
    programming, you've already used some of the concepts and constructs, and you
    might have even found them very useful. Let's examine why.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们可以使用什么方法呢？回想起过去的我，也就是那个只想写代码的极客，只有一种方法——看看代码中的常见问题，并探索函数式编程如何减少或完全消除这些问题。此外，从一开始就开始；你已经看到了函数式编程，已经使用了一些概念和构造，你甚至可能发现它们非常有用。让我们来看看为什么。
- en: Functional programming constructs are everywhere
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数式编程构造随处可见
- en: Around 10 years after I finished the university functional programming course,
    I had a casual chat with my friend, Felix. As any two geeks, we would rarely see
    each other, but we had, for years, an ongoing conversation on instant messaging
    discussing all kinds of nerdy topics and, of course, programming.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在我完成大学函数式编程课程大约10年后，我和我的朋友Felix闲聊。像所有的极客一样，我们很少见面，但多年来，我们一直在即时通讯中讨论各种书呆子话题，当然也包括编程。
- en: Somehow, the topic of functional programming came up. Felix pointed out that
    one of my favorite and most enjoyable programming languages, LOGO, was, in fact,
    a functional programming language.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 不知何故，我们谈到了函数式编程这个话题。Felix指出我最喜欢和最享受的编程语言之一，LOGO，实际上是一种函数式编程语言。
- en: '**LOGO** is an educational programming language whose main characteristic is
    utilization of so-called **turtle graphics**.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**LOGO**是一种教育性编程语言，其主要特点是利用所谓的**turtle graphics**。'
- en: 'It was obvious in retrospect; here is how to write a function that draws a
    square in the KTurtle version of LOGO:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾起来是显而易见的；以下是如何在LOGO的KTurtle版本中编写一个画正方形的函数：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The result is shown in the following screenshot:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显示在以下截图中：
- en: '![](img/45f3ee41-d99c-4630-8595-8f4b1e2aadbb.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/45f3ee41-d99c-4630-8595-8f4b1e2aadbb.png)'
- en: Can you see how we're passing two lines of code to the repeat function? That's
    functional programming! A fundamental tenet of functional programming is that
    code is just another type of data, which can be packed in a function and passed
    around to other functions. I used this construct in LOGO hundreds of times without
    making the connection.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你能看到我们是如何将两行代码传递给repeat函数的吗？这就是函数式编程！函数式编程的一个基本原则是，代码只是另一种类型的数据，可以被打包在一个函数中，并传递给其他函数。我在LOGO中使用了这个构造数百次，却没有意识到这一点。
- en: 'This realization made me think: could there be other functional programming
    constructs that I''ve used without knowing? As it turns out, yes, there were.
    In fact, as a C++ programmer, you''ve most likely used them as well; let''s take
    a look at a few examples:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这个认识让我想：是否还有其他函数式编程构造是我在不知情中使用的？事实证明，是的，还有。事实上，作为一个C++程序员，你很可能也使用过它们；让我们看看一些例子：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This function is a typical example of recommended C++ code. I first learned
    about the benefits of adding `const` everywhere from the amazing books of Bertrand
    Meyer: *Effective C++*, *More Effective C++*, and *Effective STL*. There are multiple
    reasons this construct works well. First, it protects the data members and parameters
    that shouldn't change. Second, it allows a programmer to reason more easily about
    what happens in the function by removing possible side effects. Third, it allows
    the compiler to optimize the function.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数是推荐的C++代码的典型例子。我最初是从Bertrand Meyer的惊人著作《Effective C++》、《More Effective C++》和《Effective
    STL》中了解到在任何地方都添加`const`的好处的。这个构造之所以有效有多个原因。首先，它保护了不应该改变的数据成员和参数。其次，它通过消除可能的副作用，使程序员更容易推理出函数中发生的事情。第三，它允许编译器优化函数。
- en: As it turns out, this is also an example of immutability in action. As we'll
    discover in the following chapters, functional programming places immutability
    at the core of the programs, moving all side effects to the edges of the program.
    We already know the basic construct of functional programming; to say that we
    use functional programming just means to use it much more extensively!
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，这也是不可变性的一个例子。正如我们将在接下来的章节中发现的那样，函数式编程将不可变性置于程序的核心，将所有的副作用移到程序的边缘。我们已经了解了函数式编程的基本构造；说我们使用函数式编程只是意味着我们更广泛地使用它！
- en: 'Here''s another example from STL:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是STL的另一个例子：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The STL algorithms have great power; this power comes from polymorphism. I'm
    using this term in a more fundamental sense than in OOP—it merely means that it
    doesn't matter what the collection contains, because the algorithm will still
    work fine as long as a comparison is implemented. I have to admit that when I
    first understood it, I was impressed by the smart, effective solution.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: STL算法具有很大的威力；这种威力来自多态性。我使用这个术语的含义比在OOP中更基本——这仅仅意味着集合包含什么并不重要，因为只要实现了比较，算法就能正常工作。我必须承认，当我第一次理解它时，我对这个聪明、有效的解决方案印象深刻。
- en: 'There''s a variant of the `sort` function that allows the sorting of elements
    even when the comparison is not implemented, or when it doesn''t work as we''d
    like; for example, when we are given a `Name` structure, as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种`sort`函数的变体，允许在比较没有实现或者不按我们期望的情况下对元素进行排序；例如，当我们给出一个`Name`结构时，如下所示：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If we''d like to sort a `vector<Name>` container by first name, we just need
    a `compare` function:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要按照名字对`vector<Name>`容器进行排序，我们只需要一个`compare`函数：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Additionally, we need to pass it to the `sort` function, as shown in the following
    code:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们需要将其传递给`sort`函数，如下面的代码所示：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This makes a kind of *higher-order function*. A high-level function is a function
    that uses other functions as parameters in order to allow higher levels of polymorphism.
    Congratulations—you've just used a second functional programming construct!
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这构成了一种*高阶函数*。高阶函数是一种使用其他函数作为参数的函数，以允许更高级别的多态性。恭喜——你刚刚使用了第二个函数式编程构造！
- en: I will go as far as to state that STL is a good example of functional programming
    in action. Once you learn more about functional programming constructs, you'll
    realize that they are used everywhere in STL. Some of them, such as function pointers
    or functors, have been in the C++ language for a very long time. In fact, STL
    has stood the test of time, so why not use similar paradigms in our code as well?
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我甚至要说STL是函数式编程在实践中的一个很好的例子。一旦你了解更多关于函数式编程构造，你会意识到它们在STL中随处可见。其中一些，比如函数指针或者仿函数，已经存在于C++语言中很长时间了。事实上，STL经受住了时间的考验，那么为什么不在我们的代码中也使用类似的范式呢？
- en: There's no better example to support this statement other than the functional
    loops present in STL.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 没有比STL中的函数式循环更好的例子来支持这个说法了。
- en: Structured loops versus functional loops
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结构化循环与函数式循环
- en: 'It''s hardly a surprise that one of the first things that we learn as programmers
    is how to write a loop. One of my first loops in C++ was printing the numbers
    from `1` to `10`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 作为程序员，我们学习的第一件事之一就是如何编写循环。我在C++中的第一个循环是打印从`1`到`10`的数字：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As a curious programmer, I took this syntax for granted, went over its peculiarities
    and complications, and just used it. Looking back, I realize that there are a
    few unusual things about this construct. First, why start with `0`? I've been
    told it's a convention, due to historical reasons. Then, the `for` loop has three
    statements—an initialization, a condition, and an increment. This sounds slightly
    too complicated for what we're trying to achieve. Finally, the end condition forced
    me into more off-by-one errors than I'd like to admit.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个好奇的程序员，我曾经认为这种语法是理所当然的，研究了它的特殊之处和复杂性，然后就使用了它。回想起来，我意识到这种结构有一些不寻常的地方。首先，为什么要从`0`开始？我被告知这是一个惯例，出于历史原因。然后，`for`循环有三个语句——初始化、条件和增量。对于我们想要实现的目标来说，这听起来有点太复杂了。最后，结束条件让我犯了比我愿意承认的更多的偏差错误。
- en: 'At this point, you will realize that STL allows you to use iterators when looping
    over collections:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您会意识到STL允许您在循环遍历集合时使用迭代器：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This is definitely better than the `for` loop using a cursor. It avoids off-by-one
    errors and there are no `0` convention shenanigans. There's still a lot of ceremony
    around the operation, however. Even worse is that the loop tends to grow as the
    complexity of the program grows.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这绝对比使用游标的`for`循环要好。它避免了偏差错误，也没有`0`的惯例怪事。然而，该操作周围仍然有很多仪式感。更糟糕的是，随着程序复杂性的增加，循环往往会变得越来越大。
- en: There's an easy way to show this symptom. Let's take a look back at the first
    problems that I've solved using loops.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种简单的方法可以显示这种症状。让我们回顾一下我用循环解决的第一个问题。
- en: 'Let''s consider a vector of integers and compute their sum; the naive implementation
    will be as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个整数向量并计算它们的总和；朴素的实现将如下所示：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If only production code was so simple! Instead, the moment we implement this
    code, we''ll get a new requirement. We now need to sum only the even numbers from
    the vector. Hmm, that''s easy enough, right? Let''s take a look at the following
    code:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果生产代码能如此简单就好了！相反，一旦我们实现了这段代码，就会得到一个新的需求。现在我们需要对向量中的偶数进行求和。嗯，这很容易，对吧？让我们看看下面的代码：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If you thought this is the end, it''s not. We now require three sums for the
    same vector—one of the even numbers, one of the odd numbers, and one of the total.
    Let''s now add some more code, as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你以为这就是结尾，那就错了。我们现在需要对同一个向量进行三次求和——偶数的和、奇数的和和总和。现在让我们添加一些更多的代码，如下所示：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Our loop, which initially started relatively simple, has become more and more
    complex. When I first started professional programming, we used to blame users
    and clients who couldn't make up their minds about the perfect feature and give
    us the final, frozen requirements. That's rarely possible in reality, however;
    our customers learn new things every day from the interaction of users with the
    programs we write. It's up to us to make this code clear, and it's possible with
    functional loops.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最初相对简单的循环变得越来越复杂。当我开始专业编程时，我们常常责怪用户和客户无法确定完美功能并给出最终的冻结需求。然而，在现实中很少可能；我们的客户每天都从用户与我们编写的程序的互动中学到新的东西。我们有责任使这段代码清晰，而使用函数循环是可能的。
- en: 'Years later, I learned Groovy. A Java virtual machine-based programming language,
    Groovy focuses on making the job of programmers easier by helping them to write
    less code and avoid common errors. Here''s how you could write the previous code
    in Groovy:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 多年后，我学会了Groovy。Groovy是一种基于Java虚拟机的编程语言，它专注于通过帮助程序员编写更少的代码和避免常见错误来简化程序员的工作。以下是您如何在Groovy中编写先前的代码：
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Let's compare the two for a moment. There's no loop. The code is extremely clear.
    There's no way to make off-by-one errors. There's no counter, so, therefore, there
    is no *starting from* `0` weirdness. Additionally, there's no scaffolding around
    it—I just write what I want to achieve, and a trained reader can easily understand
    it.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们比较一下这两种方法。没有循环。代码非常清晰。没有办法犯偏差错误。没有计数器，因此也没有*从*`0`开始的怪异现象。此外，它周围没有支撑结构——我只需写出我想要实现的目标，一个经过训练的读者就可以轻松理解。
- en: 'While the C++ version is more verbose, it allows us to achieve the same goals:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然C++版本更冗长，但它允许我们实现相同的目标：
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'There''s still a lot of ceremony though, and too much code similarity. So,
    let''s get rid of it, as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，仪式感仍然很浓重，而且代码相似度太高。因此，让我们摆脱它，如下所示：
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We've just replaced a complex `for` loop with a number of simpler, more readable,
    and composable functions.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚用一些更简单、更易读和可组合的函数替换了一个复杂的`for`循环。
- en: So, is this code better? Well, that depends on your definition of *better*.
    I like to think of any implementation in terms of advantages and disadvantages.
    The advantages of functional loops are simplicity, readability, reduced code duplication,
    and composability. Are there any disadvantages? Well, our initial `for` loop only
    requires one pass through the vector, while our current implementation requires
    three passes. This can be a burden for very large collections, or when response
    time and memory usage are very important. This is definitely worth discussing,
    and we will examine it in more detail in [Chapter 10](4612efcd-7520-4ae3-9813-0c42acee664a.xhtml), *Performance
    Optimization,* which is focused solely on performance optimization for functional
    programming. For now, I recommend that you focus on understanding the new tool
    of functional programming.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这段代码更好吗？嗯，这取决于你对“更好”的定义。我喜欢用优点和缺点来思考任何实现。函数式循环的优点是简单性、可读性、减少代码重复和可组合性。有什么缺点吗？嗯，我们最初的`for`循环只需要通过向量进行一次遍历，而我们当前的实现需要三次遍历。对于非常大的集合，或者当响应时间和内存使用非常重要时，这可能是一个负担。这绝对值得讨论，我们将在[第10章](4612efcd-7520-4ae3-9813-0c42acee664a.xhtml)中更详细地研究这个问题，即专注于函数式编程性能优化的*性能优化*。现在，我建议你专注于理解函数式编程的新工具。
- en: In order to do that, we need to revisit immutability.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们需要重新思考不可变性。
- en: Immutability
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不可变性
- en: 'We''ve already understood that a certain level of immutability is preferred
    in C++; the common example is as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解到，在C++中，一定程度的不可变性是首选的；常见的例子如下：
- en: '[PRE14]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `const` keyword clearly communicates a few important constraints on the
    code, such as the following:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`const`关键字清楚地传达了代码的一些重要约束，例如以下内容：'
- en: The function does not change any of its arguments before returning.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数在返回之前不会改变任何参数。
- en: The function does not change any data member of the class it belongs to.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数在其所属的类的任何数据成员之前不会更改。
- en: Let's now imagine an alternate version of `add`, as follows
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们想象一个`add`的另一个版本，如下所示
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: I called this `uglyAdd` for a reason—I don't tolerate code like this when I'm
    programming! This function violates the principle of minimal surprise and does
    too many things. Reading the function code reveals nothing about its intent. Imagine
    the surprise of the caller, if not careful, then, just by calling an `add` function,
    two things changed—one in the parameters passed, and the second in the class where
    the function is located.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我之所以称之为`uglyAdd`，是有原因的——我在编程时不容忍这样的代码！这个函数违反了最小惊讶原则，做了太多的事情。阅读函数代码并不能揭示其意图。想象一下调用者的惊讶，如果不小心的话，仅仅通过调用`add`函数，就会有两件事情发生变化——一个是传递的参数，另一个是函数所在的类。
- en: While this is an extreme example, it contributes to an argument for immutability.
    Immutable functions are boring; they receive data, change nothing in the received
    data, change nothing in the class containing them, and return a value. When it
    comes to maintaining code over long periods of time, however, boring is good.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这是一个极端的例子，但它有助于支持不可变性的论点。不可变函数很无聊；它们接收数据，在接收的数据中不做任何改变，在包含它们的类中也不做任何改变，并返回一个值。然而，当涉及长时间维护代码时，无聊是好事。
- en: Immutability is the core property of functions in functional programming. Of
    course, there's at least one part of your program that cannot be immutable—**input/output**
    (**I/O**). We will accept I/O for what it is, and we will focus on increasing
    the immutability of our code as much as possible.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 不可变性是函数式编程中函数的核心属性。当然，你的程序中至少有一部分是不可变的——**输入/输出**（**I/O**）。我们将接受I/O的本质，并专注于尽可能增加我们代码的不可变性。
- en: Now, you are probably wondering whether you have to completely rethink the way
    you write programs. Should you forget all that you learned about OOP? Well, not
    really, and let's see why.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可能想知道是否你需要完全重新思考编写程序的方式。你是否应该忘记你学到的关于面向对象编程的一切？嗯，并不完全是这样，让我们看看为什么。
- en: OOP versus functional design styles
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 面向对象编程与函数式设计风格
- en: An important part of my job is to work with programmers and help them to improve
    the way they write code. To do so, I try my best to come up with simple explanations
    for complex ideas. I have one such explanation for software design. Software design
    is, for me, the way we structure the code such that we optimize it for business
    purposes.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我的工作的一个重要部分是与程序员合作，帮助他们改善编写代码的方式。为此，我尽力提出简单的解释复杂的想法。我对软件设计有一个这样的解释。对我来说，软件设计是我们构建代码的方式，使其最大程度地优化为业务目的。
- en: 'I like this definition because it''s plain and short. But one thing bugged
    me after I started experimenting with functional constructs; that is, functional
    programming leads to code such as the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢这个定义，因为它简单明了。但在我开始尝试函数式构造之后，有一件事让我感到困扰；即，函数式编程会导致出现以下代码：
- en: '[PRE16]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Writing similar code in OOP style would most likely mean creating classes and
    using inheritance. So, which style is better? Additionally, if software design
    is about code structure, is there an equivalence between the two styles?
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在面向对象编程风格中编写类似的代码很可能意味着创建类并使用继承。那么，哪种风格更好？此外，如果软件设计涉及代码结构，那么这两种风格之间是否存在等价性？
- en: 'First, let''s take a look at what the two design styles really promote. What
    is OOP? For many years, I believed all the books that listed the following three
    properties of object-oriented languages:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看这两种设计风格真正推广了什么。什么是面向对象编程？多年来，我相信了所有列出以下三个面向对象语言属性的书籍：
- en: Encapsulation
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 封装
- en: Inheritance
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 继承
- en: Polymorphism
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多态
- en: 'Alan Kay, the thinker behind OOP, does not really agree with this list. For
    him, OOP is about communication between many small objects. As a biology major,
    he saw an opportunity to organize programs like the body organizes cells, and
    to allow objects to communicate much like cells do. He places more importance
    on objects over classes, and on communication over the commonly listed OOP properties.
    I would best summarize his position as follows: the dynamic relations in the system
    are more important than its static properties.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 作为面向对象编程(OOP)的思想家，Alan Kay 并不完全同意这个列表。对他来说，OOP 是关于许多小对象之间的通信。作为生物学专业的学生，他看到了将程序组织成身体组织细胞的机会，并允许对象像细胞一样进行通信。他更看重对象而不是类，更看重通信而不是通常列出的
    OOP 特性。我最好地总结他的立场如下：系统中的动态关系比其静态属性更重要。
- en: This changes a lot about the OOP paradigm. So, should classes match the real
    world? Not really. They should be optimized for the representation of the real
    world. Should we focus on having clear, well-thought out class hierarchies? No,
    since those are less important than the communication between objects. What is
    the smallest object that we can think of? Well, either a combination of data,
    or a function.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这改变了关于 OOP 范式的很多东西。那么，类应该与现实世界匹配吗？并不是真的。它们应该被优化以表示现实世界。我们应该专注于拥有清晰、深思熟虑的类层次结构吗？不，因为这些比对象之间的通信更不重要。我们能想到的最小对象是什么？嗯，要么是数据的组合，要么是函数。
- en: In a recent answer on Quora ([https://www.quora.com/Isnt-getting-rid-of-the-evil-state-like-Haskells-approach-something-every-programmer-should-follow/answer/Alan-Kay-11](https://www.quora.com/Isnt-getting-rid-of-the-evil-state-like-Haskells-approach-something-every-programmer-should-follow/answer/Alan-Kay-11)),
    Alan Kay stated an interesting idea when answering a question on functional programming.
    Functional programming came from mathematics and from an effort to model the real
    world in order to enable artificial intelligence. This effort hit the following
    problem—*Alex is in Bucharest* and *Alex is in London* can both be true, but at
    different points in time. The solution to this modeling issue is immutability;
    that is, time becomes a parameter to functions, or a data member in the data structures.
    In any program, we can model data changes as time-bound versions of the data.
    Nothing stops us from modeling the data as small objects, and the changes as functions.
    Additionally, as we will see later, we can easily turn functions into objects
    and vice versa.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Quora 的最近一个回答中（[https://www.quora.com/Isnt-getting-rid-of-the-evil-state-like-Haskells-approach-something-every-programmer-should-follow/answer/Alan-Kay-11](https://www.quora.com/Isnt-getting-rid-of-the-evil-state-like-Haskells-approach-something-every-programmer-should-follow/answer/Alan-Kay-11)），Alan
    Kay 在回答有关函数式编程的问题时提出了一个有趣的想法。函数式编程源自数学，也是为了模拟现实世界以实现人工智能的努力。这一努力遇到了以下问题——*Alex
    在布加勒斯特* 和 *Alex 在伦敦* 都可能是真实的，但发生在不同的时间点。解决这个建模问题的方法是不可变性；也就是说，时间成为函数的一个参数，或者是数据结构中的一个数据成员。在任何程序中，我们可以将数据变化建模为数据的时间限定版本。没有什么能阻止我们将数据建模为小对象，将变化建模为函数。此外，正如我们将在后面看到的那样，我们可以轻松地将函数转换为对象，反之亦然。
- en: So, to summarize, there's no real tension between OOP as Alan Kay meant it and
    functional programming. We can use them together and interchangeably, as long
    as we focus on increasing the immutability of our code, and on small objects that
    communicate with one another. We'll discover, in the following chapters, how easy
    it is to replace a class with functions and vice versa.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，总结一下，Alan Kay 所说的 OOP 和函数式编程之间并没有真正的紧张关系。只要我们专注于增加代码的不可变性，并且专注于小对象之间的通信，我们可以一起使用它们，可以互换使用。在接下来的章节中，我们将发现用函数替换类，反之亦然是多么容易。
- en: But there are many ways to use OOP that are different from Alan Kay's vision.
    I've seen a lot of C++ code with my clients, and I've seen it all—big functions,
    huge classes, and deep inheritance hierarchies. Most of the time, the reason I'm
    called is because the design is too hard to change and because adding new features
    slows down to a crawl. Inheritance is a very strong relationship and overusing
    it leads to strong coupling, and, therefore, to code that's difficult to change.
    Long methods and long classes are harder to understand and harder to change. Of
    course, there are situations when inheritance and long classes make sense, but,
    in general, going for small objects with loose coupling enables changeability.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 但是有很多使用 OOP 的方式与 Alan Kay 的愿景不同。我在客户那里看到了很多 C++ 代码，我见过一切——庞大的函数、巨大的类和深层次的继承层次结构。大多数情况下，我被叫来的原因是因为设计太难改变，添加新功能会变得非常缓慢。继承是一种非常强的关系，过度使用会导致强耦合，因此代码难以改变。长方法和长类更难理解和更难改变。当然，有些情况下继承和长类是有意义的，但总的来说，选择松散耦合的小对象能够实现可变性。
- en: But classes can be reused, can't they? Can we do that with functions? Let's
    visit this topic next.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 但是类可以被重用，对吗？我们能用函数做到吗？让我们下一个讨论这个话题。
- en: Composability and removing duplication
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可组合性和去除重复
- en: 'We have already seen an example of where we had a fair amount of duplication:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了一个存在大量重复的例子：
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We managed to reduce it using functions, as shown in the following code:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设法使用函数来减少它，如下面的代码所示：
- en: '[PRE18]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'It''s interesting to see how the functions are composed in various ways; we
    have `sum(filter())` called twice, and `sum()` called once. Moreover, `filter`
    can be used with multiple predicates. Additionally, with a bit of work, we can
    make both `filter` and `sum` polymorphic functions:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 看到函数以各种方式组合是很有趣的；我们两次调用了 `sum(filter())`，并且一次调用了 `sum()`。此外，`filter` 可以与多个谓词一起使用。此外，通过一些工作，我们可以使
    `filter` 和 `sum` 成为多态函数：
- en: '[PRE19]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: It's now easy to call `filter` and `sum` with arguments of type other than `vector<int>`.
    The implementation is not perfect, but it illustrates the point that I'm trying
    to make, that is, small, immutable functions can easy become polymorphic and composable.
    This works especially well when we can pass functions to other functions.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在很容易使用除了`vector<int>`之外的类型的参数调用`filter`和`sum`。实现并不完美，但它说明了我试图表达的观点，即小的不可变函数可以轻松变成多态和可组合的。当我们可以将函数传递给其他函数时，这种方法特别有效。
- en: Summary
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We've already covered a lot of interesting topics! You've just realized that
    you know the basics of functional programming. You can write immutable functions
    in C++ with the help of the `const` keyword. You've already used high-level functions
    from STL. Additionally, you don't have to forget anything about OOP, but, instead,
    just see it from a different perspective. Finally, we discovered how small immutable
    functions can be composed to offer complex functionality, and how they can become
    polymorphic with the help of C++ templates.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经涵盖了很多有趣的话题！你刚刚意识到你已经掌握了函数式编程的基础知识。你可以使用`const`关键字在C++中编写不可变函数。你已经在STL中使用了高级函数。此外，你不必忘记面向对象编程的任何内容，而是从不同的角度来看待它。最后，我们发现了小的不可变函数如何组合以提供复杂的功能，并且如何借助C++模板实现多态。
- en: It's now time to take an in-depth look at the building blocks of functional
    programming and learn how to use them in C++. This includes pure functions, lambdas,
    and operations with functions such as functional composition, currying, or partial
    functional application.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候深入了解函数式编程的构建模块，并学习如何在C++中使用它们了。这包括纯函数、lambda表达式，以及与函数相关的操作，如函数组合、柯里化或部分函数应用。
- en: Questions
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is an immutable function?
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是不可变函数？
- en: How do you write an immutable function?
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何编写不可变函数？
- en: How do immutable functions support code simplicity?
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不可变函数如何支持代码简洁性？
- en: How do immutable functions support simple design?
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不可变函数如何支持简单设计？
- en: What is a high-level function?
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是高级函数？
- en: What example of high-level function can you give from STL?
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你能从STL中举一个高级函数的例子吗？
- en: What are the advantages of functional loops over structured loops? What are
    the potential disadvantages?
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 函数式循环相对于结构化循环有哪些优势？可能的缺点是什么？
- en: What is OOP from the perspective of Alan Kay? How does it relate to functional
    programming?
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Alan Kay的角度来看，面向对象编程是什么？它如何与函数式编程相关？
