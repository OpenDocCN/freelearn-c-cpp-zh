["```cpp\n#include<stdio.h>\n#include<stdlib.h>\n\n__global__ void print_from_gpu(void) {\n    printf(\"Hello World! from thread [%d,%d] \\\n        From device\\n\", threadIdx.x,blockIdx.x);\n}\n\nint main(void) {\n    printf(\"Hello World from host!\\n\");\n    print_from_gpu<<<1,1>>>();\n    cudaDeviceSynchronize();\n    return 0;\n}\n\n```", "```cpp\n$ nvcc -o hello_world hello_world.cu\n```", "```cpp\n$nvcc -o vector_addition vector_addition.cu\n```", "```cpp\n#include<stdio.h>\n#include<stdlib.h>\n\n#define N 512\n\nvoid host_add(int *a, int *b, int *c) {\n    for(int idx=0;idx<N;idx++)\n        c[idx] = a[idx] + b[idx];\n}\n\n//basically just fills the array with index.\nvoid fill_array(int *data) {\n    for(int idx=0;idx<N;idx++)\n        data[idx] = idx;\n}\n\nvoid print_output(int *a, int *b, int*c) {\n    for(int idx=0;idx<N;idx++)\n        printf(\"\\n %d + %d = %d\", a[idx] , b[idx], c[idx]);\n}\n\nint main(void) {\n    int *a, *b, *c;\n    int size = N * sizeof(int);\n   // Alloc space for host copies of a, b, c and setup input values\n    a = (int *)malloc(size); fill_array(a);\n    b = (int *)malloc(size); fill_array(b);\n    c = (int *)malloc(size);\n    host_add(a,b,c);\n    print_output(a,b,c);\n    free(a); free(b); free(c);\n    return 0;\n}\n```", "```cpp\nint main(void) {\n    int *a, *b, *c;\n    int *d_a, *d_b, *d_c; // device copies of a, b, c\n    int size = N * sizeof(int);\n\n    // Alloc space for host copies of a, b, c and setup input values\n    a = (int *)malloc(size); fill_array(a);\n    b = (int *)malloc(size); fill_array(b);\n    c = (int *)malloc(size);\n\n    // Alloc space for device copies of vector (a, b, c)\n    cudaMalloc((void **)&d_a, N* * sizeof(int));\n    cudaMalloc((void **)&d_b, N* *sizeof(int));\n    cudaMalloc((void **)&d_c, N* * sizeof(int));\n\n    // Copy from host to device\n    cudaMemcpy(d_a, a, N * sizeof(int), cudaMemcpyHostToDevice);\n    cudaMemcpy(d_b, b, N* sizeof(int), cudaMemcpyHostToDevice);\n\n    device_add<<<1,1>>>(d_a,d_b,d_c);\n\n    // Copy result back to host\n    cudaMemcpy(c, d_c, N * sizeof(int), cudaMemcpyDeviceToHost);\n\n    print_output(a,b,c);\n    free(a); free(b); free(c);\n\n    //free gpu memory\n    cudaFree(d_a); cudaFree(d_b); cudaFree(d_c);\n\n    return 0;\n} \n```", "```cpp\n//changing from device_add<<<1,1>>> to\ndevice_add<<<N,1>>>\n```", "```cpp\n__global__ void device_add(int *a, int *b, int *c) {\n c[blockIdx.x] = a[blockIdx.x] + b[blockIdx.x];\n}\n```", "```cpp\n//changing from device_add<<<1,1>>> to\ndevice_add<<<1,N>>>\n```", "```cpp\n__global__ void device_add(int *a, int *b, int *c) {\n     c[threadIdx.x] = a[threadIdx.x] + b[threadIdx.x];\n}\n```", "```cpp\n__global__ void device_add(int *a, int *b, int *c) {\n     int index = threadIdx.x + blockIdx.x * blockDim.x;\n     c[index] = a[index] + b[index];\n}\n```", "```cpp\nthreads_per_block = 8;\nno_of_blocks = N/threads_per_block;\ndevice_add<<<no_of_blocks,threads_per_block>>>(d_a,d_b,d_c);\n```", "```cpp\nthreads_per_block = 4;\nno_of_blocks = N/threads_per_block;\ndevice_add<<<no_of_blocks,threads_per_block>>>(d_a,d_b,d_c);\n```", "```cpp\n cudaError_t e;\n e = cudaMemcpy(...);\n if(e)\n     printf(\"Error: %sn\", cudaGetErrorString(err));\n```", "```cpp\nMyKernel<<< ... >>> (...);\ncudaDeviceSynchronize();\ne = cudaGetLastError();\n```", "```cpp\nstruct __align__(16) {\n    float r;\n    float g;\n    float b;\n};\n```"]