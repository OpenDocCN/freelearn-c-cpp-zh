["```cpp\n> sudo apt-get install build-essential git cmake valgrind\n```", "```cpp\n> sudo apt-get install build-essential git valgrind cmake\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter06\n```", "```cpp\n> cmake -DCMAKE_BUILD_TYPE=Debug .\n> make recipe01_examples\n```", "```cpp\n> ./recipe01_example01\n[==========] Running 2 benchmarks.\n[ RUN ] vector.push_back (10 runs, 100 iterations per run)\n[ DONE ] vector.push_back (0.200741 ms)\n...\n[ RUN ] vector.emplace_back (10 runs, 100 iterations per run)\n[ DONE ] vector.emplace_back (0.166699 ms)\n...\n\n> ./recipe01_example02\n```", "```cpp\n#include <string>\n#include <vector>\n#include <hayai.hpp>\n\nstd::vector<std::string> data;\n\nBENCHMARK(vector, push_back, 10, 100)\n{\n    data.push_back(\"The answer is: 42\");\n}\n\nBENCHMARK(vector, emplace_back, 10, 100)\n{\n    data.emplace_back(\"The answer is: 42\");\n}\n```", "```cpp\nvolatile int data = 0;\n\nvoid foo()\n{\n data++;\n}\n\nint main(void)\n{\n for (auto i = 0; i < 100000; i++) {\n foo();\n }\n}\n```", "```cpp\n> valgrind --tool=callgrind ./recipe01_example02\n> callgrind_annotate callgrind.out.*\n```", "```cpp\n> valgrind --tool=callgrind ls\n> callgrind_annotate callgrind.out.*\n```", "```cpp\n> sudo apt-get install build-essential git cmake\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter06\n```", "```cpp\n> cmake -DCMAKE_BUILD_TYPE=Debug .\n> make recipe02_examples\n```", "```cpp\n> ./recipe02_example01\n\n> ./recipe02_example02\n\n> ./recipe02_example03\n\n> ./recipe02_example04\n\n> ./recipe02_example05\n```", "```cpp\nint main(void)\n{ }\n```", "```cpp\n> objdump -d recipe02_example01\n```", "```cpp\n  401106: push %rbp\n  401107: mov %rsp,%rbp\n```", "```cpp\n  40110a: mov $0x0,%eax\n```", "```cpp\n\n  40110f: pop %rbp\n  401110: retq\n```", "```cpp\n> cmake -DCMAKE_BUILD_TYPE=Release .\n> make\n```", "```cpp\nvolatile int data[1000];\n\nint main(void)\n{\n    for (auto i = 0U; i < 1000; i++) {\n        data[i] = 42;\n    }\n}\n```", "```cpp\n  401020: xor %eax,%eax\n  401022: nopw 0x0(%rax,%rax,1)\n```", "```cpp\n  401028: mov %eax,%edx\n  40102a: add $0x1,%eax\n  40102d: movl $0x2a,0x404040(,%rdx,4)\n```", "```cpp\n movl $0x2a,0x404040(,%rax,4)\n add $0x1,%eax\n```", "```cpp\n  mov %eax,%edx\n```", "```cpp\n  401038: cmp $0x3e8,%eax\n  40103d: jne 401028 <main+0x8>\n```", "```cpp\n  40103f: xor %eax,%eax\n  401041: retq \n```", "```cpp\nvolatile int data[4];\n\nint main(void)\n{\n    for (auto i = 0U; i < 4; i++) {\n        data[i] = 42;\n    }\n}\n```", "```cpp\n    for (auto i = 0U; i < 4; i++) {\n        data[i] = 42;\n    }\n```", "```cpp\n        data[0] = 42;\n        data[1] = 42;\n        data[2] = 42;\n        data[3] = 42;\n```", "```cpp\n> cmake -DCMAKE_BUILD_TYPE=Debug .\n> make\n```", "```cpp\nstruct mydata {\n    int data[100];\n};\n\nvoid foo(mydata d)\n{\n    (void) d;\n}\n\nint main(void)\n{\n    mydata d;\n    foo(d);\n}\n```", "```cpp\n  401137: rep movsq %ds:(%rsi),%es:(%rdi)\n  40113a: callq 401106 <_Z3foo6mydata>\n```", "```cpp\nstruct mydata {\n    int data[100];\n};\n\nvoid foo(mydata &d)\n{\n    (void) d;\n}\n\nint main(void)\n{\n    mydata d;\n    foo(d);\n}\n```", "```cpp\n> sudo apt-get install build-essential git valgrind cmake\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter06\n```", "```cpp\n> cmake .\n> make recipe03_examples\n```", "```cpp\n> ./recipe03_example01\n\n> ./recipe03_example02\n\n> ./recipe03_example03\n\n> ./recipe03_example04\n\n> ./recipe03_example05\n\n> ./recipe03_example06\n\n> ./recipe03_example07\n```", "```cpp\nint main(void)\n{\n}\n```", "```cpp\n> cat massif.out.*\n```", "```cpp\nint main(void)\n{\n    auto ptr = new int;\n    delete ptr;\n}\n```", "```cpp\n> cat massif.out.*\n```", "```cpp\n#include <vector>\nstd::vector<int> data;\n\nint main(void)\n{\n    for (auto i = 0; i < 10000; i++) {\n        data.push_back(i);\n    }\n}\n```", "```cpp\n#include <vector>\nstd::vector<int> data;\n\nint main(void)\n{\n    data.reserve(10000);  // <--- added optimization \n\n    for (auto i = 0; i < 10000; i++) {\n        data.push_back(i);\n    }\n}\n```", "```cpp\n#include <any>\n#include <string>\n\nstd::any data;\n\nint main(void)\n{\n    data = 42;\n    data = std::string{\"The answer is: 42\"};\n}\n```", "```cpp\n#include <any>\n#include <string>\n\nstd::any data;\n\nint main(void)\n{\n    data = 42;\n    data = std::string{\"The answer is: 42\"};\n    data = 42;                                 // <--- keep swapping\n    data = std::string{\"The answer is: 42\"};   // <--- keep swapping\n    data = 42;                                 // <--- keep swapping\n    data = std::string{\"The answer is: 42\"};   // ...\n    data = 42;\n    data = std::string{\"The answer is: 42\"};\n}\n```", "```cpp\n#include <variant>\n#include <string>\n\nstd::variant<int, std::string> data;\n\nint main(void)\n{\n    data = 42;\n    data = std::string{\"The answer is: 42\"};\n}\n```", "```cpp\n> sudo apt-get install build-essential git cmake\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter06\n```", "```cpp\n> cmake .\n> make recipe04_examples\n```", "```cpp\n> ./recipe04_example01 \n\n> ./recipe04_example02\n```", "```cpp\nclass myclass\n{\n    int answer;\n\npublic:\n    ~myclass()\n    {\n        answer = 42;\n    }\n};\n```", "```cpp\nvoid foo()\n{\n    throw 42;\n}\n\nint main(void) \n{\n    myclass c;\n\n    try {\n        foo();\n    }\n    catch (...) {\n    }\n}\n```", "```cpp\nint main(void) noexcept\n{\n    myclass c;\n\n    try {\n        foo();\n    }\n    catch (...) {\n    }\n}\n```"]