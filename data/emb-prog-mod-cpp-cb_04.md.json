["```cpp\n# apt install -y mcu8051ide\n```", "```cpp\n#include<mcs51reg.h> \n\nvolatile int Counter = 0;\nvoid timer0_ISR (void) __interrupt(1) /*interrupt no. 1 for Timer0 */\n{ \n\n  Counter++;\n} \n\nvoid main(void) \n{ \n  TMOD = 0x03; \n  TH0 = 0x0; \n  TL0 = 0x0; \n  ET0 = 1; \n  TR0 = 1;\n  EA = 1;\n  while (1); /* do nothing */ \n} \n```", "```cpp\nStarting compiler ...\n\ncd \"/home/dev\"\nsdcc -mmcs51 --iram-size 128 --xram-size 0 --code-size 4096 --nooverlay --noinduction --verbose --debug -V --std-sdcc89 --model-small \"test.c\"\nsdcc: Calling preprocessor...\n+ /usr/bin/sdcpp -nostdinc -Wall -obj-ext=.rel -D__SDCC_NOOVERLAY -DSDCC_NOOVERLAY -D__SDCC_MODEL_SMALL -DSDCC_MODEL_SMALL -D__SDCC_FLOAT_REENT -DSDCC_FLOAT_REENT -D__SDCC=3_4_0 -DSDCC=340 -D__SDCC_REVISION=8981 -DSDCC_REVISION=8981 -D__SDCC_mcs51 -DSDCC_mcs51 -D__mcs51 -D__STDC_NO_COMPLEX__ -D__STDC_NO_THREADS__ -D__STDC_NO_ATOMICS__ -D__STDC_NO_VLA__ -isystem /usr/bin/../share/sdcc/include/mcs51 -isystem /usr/share/sdcc/include/mcs51 -isystem /usr/bin/../share/sdcc/include -isystem /usr/share/sdcc/include test.c\nsdcc: Generating code...\nsdcc: Calling assembler...\n+ /usr/bin/sdas8051 -plosgffwy test.rel test.asm\nsdcc: Calling linker...\nsdcc: Calling linker...\n+ /usr/bin/sdld -nf test.lk\n\nCompilation successful\n```", "```cpp\n# apt install -y mcu8051ide\n```", "```cpp\nvolatile int Counter = 0;\n```", "```cpp\nvoid timer0_ISR (void) __interrupt(1)\n```", "```cpp\nTMOD = 0x03; \nTH0 = 0x0; \nTL0 = 0x0;\n```", "```cpp\nTR0 = 1;\n```", "```cpp\nET0 = 1; \n```", "```cpp\nEA = 1;\n```", "```cpp\nwhile (1); // do nothing \n```", "```cpp\n#include<8051.h> \n\nvoid timer0_ISR (void) __interrupt(1) \n{ \n  P0_0 = !P0_0;\n} \n\nvoid main(void) \n{ \n  TMOD = 0x02;\n  TH0 = 0xa3; \n  TL0 = 0x0; \n  TR0 = 1;\n  EA = 1; \n  while (1); // do nothing \n}\n```", "```cpp\nvoid timer0_ISR (void) __interrupt(1) \n```", "```cpp\nTMOD = 0x02;\n```", "```cpp\nTH0 = 0xa3; \nTL0 = 0x0;\n```", "```cpp\nTR0 = 1;\n```", "```cpp\nTR0 = 1;\n```", "```cpp\nEA = 1; \n```", "```cpp\nP0_0 = !P0_0;\n```", "```cpp\n#include<8051.h> \n\nvolatile int counter = 0;\nvoid timer1_ISR (void) __interrupt(3) \n{ \n  counter++;\n} \n\nvoid main(void) \n{ \n  TMOD = 0x60;\n  TH1 = 254; \n  TL1 = 254; \n  TR1 = 1;\n  ET1 = 1;\n  EA = 1; \n  while (1); // do nothing \n}\n```", "```cpp\nvoid timer1_ISR (void) __interrupt(3) \n```", "```cpp\nTMOD = 0x60;\n```", "```cpp\nTH1 = 254; \nTL1 = 254; \n```", "```cpp\n TR1 = 1;\n```", "```cpp\n ET1 = 1;\n EA = 1;\n```", "```cpp\n while (1); // do nothing \n```", "```cpp\n#include<8051.h>\n\nvoid serial_isr() __interrupt(4) { \n    if(RI == 1) {\n        P0 = SBUF;\n        RI = 0;\n    }\n }\n\nvoid main() {\n    SCON = 0x50;\n    TMOD = 0x20;\n    TH1 = 0xFD;\n    TR1 = 1; \n    ES = 1;\n    EA = 1;\n\n    while(1);\n }\n```", "```cpp\nvoid serial_isr() __interrupt(4)\n```", "```cpp\nP0 = SBUF;\n```", "```cpp\nSCON = 0x50;\n```", "```cpp\nTMOD = 0x20;\n```"]