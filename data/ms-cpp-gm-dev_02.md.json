["```cpp\n#include <iostream> \nvoid Hello() \n{ \n  std::cout<< \"Hello World!\"<<std::endl; \n} \n```", "```cpp\n    cl /c hello.cpp\n```", "```cpp\n    lib /out:MyLib.lib hello.obj\n```", "```cpp\nvoid Hello(); //Forward declaration of our Hello function \nvoid main() \n{ \n  Hello(); \n} \n```", "```cpp\n    cl main.cpp /link MyLib.lib\n```", "```cpp\n    g++ -c hello.cpp \n```", "```cpp\n    arrvsMylib.ahello.o\n```", "```cpp\nvoid Hello(); //Forward declaration of our Hello function \nvoid main() \n{ \n  Hello(); \n} \n```", "```cpp\n    g++ main.cpp MyLib.a -o Main \n```", "```cpp\n      #include <iostream> \n      __declspec(dllexport) void Hello() \n      { \n        std::cout<< \"Hello World Dynamically\" <<std::endl; \n      } \n```", "```cpp\n    cl /LD /FeMyDynamicLib.dll hello.cpp\n```", "```cpp\n    cl main.cpp /link MyDynamicLib.lib  \n```", "```cpp\n   #include <iostream> \n   __declspec(dllexport) void Hello() \n   { \n     std::cout<< \"Hello World Dynamically!\"<<std::endl; \n     std::cout<< \"Version 2\" <<std::endl; \n   } \n```", "```cpp\n    cl /LD /FeMyDynamicLib.dll hello.cpp\n```", "```cpp\n#include <iostream> \n__attribute__((visibility(\"default\"))) void Hello() \n{ \n  std::cout<< \"Hello World Dynamically\" <<std::endl; \n} \n```", "```cpp\ng++ -dynamiclib -o MyDynamicLib.dylib hello.cpp\n```", "```cpp\ng++ main.cpp MyDynamicLib.dylib -o Main\n```", "```cpp\n#include <iostream> \n__attribute__((visibility(\"default\"))) void Hello() \n{ \n  std::cout<< \"Hello World Dynamically!\"<<std::endl; \n  std::cout<< \"Version 2\" <<std::endl; \n} \n```", "```cpp\ng++ -dynamiclib -o MyDynamicLib.dylib hello.cpp \n```", "```cpp\n#pragma once \n#include <iostream> \nvoid Hello() \n{ \n  std::cout<< \"Hello World Header!\"<<std::endl; \n} \n```", "```cpp\n#include \"hello.h\" \nvoid main() \n{ \n  Hello(); \n} \n```", "```cpp\ncl main.cpp\n```", "```cpp\ng++ main.cpp -o Main\n```", "```cpp\n__declspec(dllexport) int n; //Exporting a variable \n__declspec(dllexport) intfnMemoryMgr(void); //Exporting a function \n```", "```cpp\n#ifdef MEMORYMGR_EXPORTS \n#ifdef _WIN32 \n#define EXPORT __declspec(dllexport) \n#else \n#define EXPORT __declspec(dllimport) \n#elif __APPLE__ \n#define EXPORT __attribute__((visibility(\"default\"))) \n#endif \n#endif \n```", "```cpp\nstruct Block \n{ \n  Block* next; \n}; \n\nstruct Heap \n{ \n  Heap* next; \n  Block* block() \n  { \n    return reinterpret_cast<Block*>(this + 1); \n  } \n}; \n```", "```cpp\nclass EXPORT CMemoryMgr \n```", "```cpp\nEXPORT int n; //Exporting a variable \nEXPORT void fnMemoryMgr(void); //Exporting a function \n```", "```cpp\n__attribute__((visibility(\"default\"))) int n; //Exporting a \n variable__attribute__((visibility(\"default\"))) intfnMemoryMgr(void); \n //Exporting a function\n```", "```cpp\nclass EXPORT CMemoryMgr \n{ \npublic: \n  CMemoryMgr(unsigned int dataSize, unsigned int heapSize, unsigned int \n             memoryAlignmentSize); \n  ~CMemoryMgr(); \n  void* Allocate(); \n  void Deallocate(void* pointerToMemory); \n  void DeallocateAll(); \n```", "```cpp\nprivate: \n  static const unsigned char ALLOCATION_PATTERN = 0xBEEF; \n  static const unsigned char ALIGNMENT_PATTERN = 0xBADD; \n  static const unsigned char FREE_MEMORY_PATTERN = 0xF00D; \n```", "```cpp\nBlock* GetNextBlock(Block* block); \nvoid OverWriteHeap(Heap* heapPointer); \nvoid OverWriteBlock(Block* blockPointer); \nvoid OverWriteAllocatedBlock(Block* blockPointer); \n```", "```cpp\nHeap* m_heapList = nullptr; \nBlock* m_freeBlockList = nullptr; \n```", "```cpp\n unsigned int m_dataSize; \n unsigned int m_heapSize; \n unsigned int m_memoryAlignment; \n unsigned int m_blockSize; \n unsigned int m_blocksPerHeap; \n unsigned int m_numOfHeaps; \n unsigned int m_numOfBlocks; \n unsigned int m_numOfBlocksFree; \n}; \n```", "```cpp\n// This is an example of an exported variable \nEXPORT int nMemoryMgr=0; \n// This is an example of an exported function. \nEXPORT int fnMemoryMgr(void) \n{ \n  return 42; \n} \n```", "```cpp\ncl /LD /FeMemoryMgr.dll MemoryMgr.cpp\n```", "```cpp\ng++ -dynamiclib -o MemoryMgr.dylib MemoryMgr.cpp\n```", "```cpp\nLIBRARY MEMORYMGR \nEXPORTS \n  Allocate      @1 \n  Deallocate    @2 \n  DeallocateAll @3 \n```", "```cpp\n cl /LD /DEF:MemoryMgr.def /FeMemoryMgr2.dll MemoryMgr.cpp\n```", "```cpp\n$(SolutionDir)/lib/$(Platform)/$(Configuration)/MemoryMgr.lib \n```", "```cpp\nvoid Hello(); //Forward declaration of our Hello function \n```", "```cpp\n$(SolutionDir)Include\\MemoryMgr\\\n```", "```cpp\n#include<MemoryMgr\\MemoryMgr.h>;\n```"]