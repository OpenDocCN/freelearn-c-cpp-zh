["```cpp\nusing words = std::vector<std::string>;\nwords list = get_list_of_words(); // suppose the function is implemented\n\nauto find_in_words(const std::string& term)\n{\n  return std::find(list.begin(), list.end(), term);\n}\n```", "```cpp\nIn 1979, Bjarne Stroustrup, a Danish computer scientist, began work on \"C with Classes\", the predecessor to C++. The motivation for creating a new language originated from Stroustrup's experience in programming for his PhD thesis. Stroustrup found that Simula had features that were very helpful for large software development...\n```", "```cpp\nIn\n1979\nBjarne\nStroustrup\na\nDanish\ncomputer\nscientist\nbegan\nwork\n...\n```", "```cpp\nThe motivation for creating a new language originated from Stroustrup's experience in programming for his PhD thesis.\n```", "```cpp\n// The Query and Token will be defined in the next snippet\nclass QueryParser\n{\npublic:\n  static Query parse(const std::string& query_string) {\n auto tokens = QueryParser::tokenize(query_string);\n    // construct the Query object and return\n    // see next snippet for details\n }\n\nprivate:\n  static std::vector<Token> tokenize(const std::string& raw_query) {\n    // return tokenized query string\n  }\n};\n```", "```cpp\nstruct Query\n{\n  std::string raw_query;\n  std::string normalized_query;\n  std::vector<Token> tokens;\n  std::string dialog_id; // we will use this in Dialog Generator\n};\n```", "```cpp\nstruct Token\n{\n  using Word = std::string;\n  using Weight = int;\n  Word value;\n  std::unordered_map<Word, Weight> related;\n};\n```", "```cpp\nclass QueryParser\n{\npublic:\n  static Query parse(const std::string& query_string, \n                     const std::string& dialog_id = \"\")\n  {\n    Query qr;\n    qr.raw_query = query_string;\n    qr.dialog_id = dialog_id;\n    qr.tokens = QueryParser::tokenize(query_string);\n    QueryParser::retrieve_word_relations(qr.tokens);\n    return qr;\n  }\n\nprivate:\n  static std::vector<Token> tokenize(const std::string& raw_string) {\n    // 1\\. split raw_string by space\n    // 2\\. construct for each word a Token\n    // 3\\. return the list of tokens \n  }\n\n  static void retrieve_word_relations(std::vector<Token>& tokens) {\n    // for each token, request the Knowledge Base\n    // to retrieve relations and update tokens list\n  }\n};\n```", "```cpp\nstruct Document {\n  // consider this\n};\n\nclass QueryProcessor\n{\npublic:\n  using Documents = std::vector<Document>;\n  static Documents process_query(const Query& query) {\n if (!query.dialog_id.empty()) {\n // request the knowledge graph for new terms\n }\n // retrieve documents from the index\n // sort and return documents\n }\n};\n```"]