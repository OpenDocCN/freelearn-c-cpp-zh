- en: Chapter 7. Qt Tips and Tricks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。Qt提示和技巧
- en: 'In the previous chapters, we''ve discussed what makes Qt Creator a great toolkit
    for your software development: how to edit, compile, and debug applications; how
    to profile their execution and memory performance; how to localize them for different
    regions of the world; and even how to make mobile applications that run on Android
    phones and tablets. In this chapter, we will discuss a collection of tips and
    tricks you should know about when using Qt Creator and Qt that will have you writing
    software like a pro.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们讨论了Qt Creator作为软件开发工具包的优点：如何编辑、编译和调试应用程序；如何对其执行和内存性能进行分析；如何将其本地化为世界各地的不同地区；甚至如何制作在Android手机和平板电脑上运行的移动应用程序。在本章中，我们将讨论在使用Qt
    Creator和Qt时应该了解的一些提示和技巧的集合，这将使您像专业人士一样编写软件。
- en: Writing console applications with Qt Creator
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Qt Creator编写控制台应用程序
- en: 'Remember the "Hello World" application in [Chapter 1](ch01.html "Chapter 1. Getting
    Started with Qt Creator"), *Getting Started with Qt Creator*? That was a console
    application, about as simple a one as you can write. Recapping the code, we created
    a new Qt console application, and in `main.cpp` we wrote:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得[第1章](ch01.html "第1章。开始使用Qt Creator")中的“Hello World”应用程序，*开始使用Qt Creator*吗？那是一个控制台应用程序，是您可以编写的最简单的一个。回顾代码，我们创建了一个新的Qt控制台应用程序，在`main.cpp`中编写了：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Any valid C++ is valid in a Qt application, including Standard Template Library
    (STL) code. This is especially handy if you need to write a small tool in C++,
    and haven''t learned a lot about Qt yet: everything you know about C++ (and even
    C, if you prefer) is accessible to you in Qt Creator.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在Qt应用程序中，任何有效的C++都是有效的，包括标准模板库（STL）代码。如果您需要用C++编写一个小工具，但还没有学习很多关于Qt：您在Qt Creator中可以访问您所了解的关于C++（甚至C，如果您喜欢）的一切。
- en: 'Although Qt is most widely known as a GUI toolkit, it''s worth mentioning that
    the `QtCore` library, part of every Qt application including Qt console applications,
    includes a bevy of utility and template classes, such as:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Qt最广为人知的是作为GUI工具包，但值得一提的是`QtCore`库，它是每个Qt应用程序的一部分，包括Qt控制台应用程序，其中包括大量的实用程序和模板类，例如：
- en: Collection classes, including `QList`, `QVector`, `QStack`, and `QQueue` for
    keeping lists and vectors, and for last-in-first-out and first-in-first-out data
    storage
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集合类，包括`QList`、`QVector`、`QStack`和`QQueue`，用于保持列表和向量，以及后进先出和先进先出的数据存储
- en: Dictionary classes (otherwise known as hash tables), including `QMap` and `QDict`
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字典类（也称为哈希表），包括`QMap`和`QDict`
- en: Cross-platform file I/O with `QFile` and `QDirectory`
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`QFile`和`QDirectory`进行跨平台文件I/O
- en: Unicode string support with `QString`
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`QString`进行Unicode字符串支持
- en: 'Why will you choose Qt''s classes over what straight C++ provides you? There
    are a few reasons:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么会选择Qt的类而不是直接使用C++提供的内容？有几个原因：
- en: '**Memory** **performance**: Unlike STL collections, Qt collections are reference
    based, and use copy-on-write to save memory. Qt collections typically take less
    memory than their STL counterparts.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内存** **性能**：与STL集合不同，Qt集合是基于引用的，并使用写时复制来节省内存。Qt集合通常比其STL对应物占用更少的内存。'
- en: '**Iteration**: Iterating over Qt collections is safe, with guarded access to
    prevent walking off the end of a collection.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**迭代**：使用Qt集合进行迭代是安全的，具有受保护的访问，以防止超出集合的末端。'
- en: '**Readability**: Using Qt code and libraries throughout an application provides
    a uniform look and feel that can make the code easier to maintain.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可读性**：在整个应用程序中使用Qt代码和库提供了统一的外观和感觉，可以使代码更易于维护。'
- en: '**Portability**: On some embedded platforms where Qt is available, the STL
    may not be. (This isn''t nearly the problem it was when Qt was first being written,
    however.)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可移植性**：在一些嵌入式平台上，Qt可用，但STL可能不可用。（然而，这与Qt最初编写时的问题相比已经不是问题了。）'
- en: 'It''s worth noting that Qt''s collections are often slightly slower than their
    STL counterparts: when using a Qt class for data, you''re often trading memory
    performance for speed. In practice, however, this is rarely a problem.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，Qt的集合通常比其STL对应物稍慢：当使用Qt类处理数据时，通常会以内存性能换取速度。然而，在实践中，这很少是问题。
- en: 'The `QFile` and `QDirectory` classes are worth a special mention, because of
    one thing: **portability**. Even directory separators are handled in a portable
    way; directories are always demarcated by a single `/`, regardless of whether
    you''re running on Mac OS X, Linux, or Windows, making it easy to write your code
    in a platform-agnostic way and ensure that it runs on all platforms. Under the
    hood, Qt translates directory strings to use the platform-specific directory separator
    when accessing files.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`QFile`和`QDirectory`类值得特别一提，因为有一点：**可移植性**。甚至目录分隔符也以可移植的方式处理；无论您在Mac OS X、Linux还是Windows上运行，目录始终由单个`/`标记，这样可以轻松地以与平台无关的方式编写代码，并确保其在所有平台上运行。在底层，Qt在访问文件时会将目录字符串转换为使用特定于平台的目录分隔符。'
- en: Integration with version control systems
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与版本控制系统的集成
- en: 'Nearly all large projects require some sort of version control to coordinate
    changes made to the same files by different users, and ensure that changes to
    a source base occur harmoniously. Even a single developer can benefit by using
    version control, because version control provides a record of what changed in
    each file the developer has changed, and provides a valuable history of the project
    over time. Qt Creator supports the following version control systems:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有大型项目都需要某种版本控制来协调不同用户对同一文件所做的更改，并确保对源代码库的更改和谐地进行。即使是单个开发人员也可以通过使用版本控制来受益，因为版本控制提供了开发人员对每个已更改文件的更改记录，并提供了项目随时间变化的宝贵历史记录。Qt
    Creator支持以下版本控制系统：
- en: Bazaar (supported in Qt Creator in Version 2.2 and beyond)
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bazaar（在Qt Creator 2.2及更高版本中支持）
- en: CVS
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CVS
- en: Git
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git
- en: Mercurial (supported in Qt Creator in Version 2.0 and beyond)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mercurial（在Qt Creator 2.0及更高版本中支持）
- en: Perforce (supporting Perforce Server Version 2006.1 and later)
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Perforce（支持Perforce服务器版本2006.1及更高版本）
- en: Subversion
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Subversion
- en: The first thing you need to do is set up version control software for your project.
    How to do this depends on the version control system you choose (it may be dictated
    by your organization, for example, or you may have a personal preference from
    working on past projects), and how you do this differs from system to system,
    so we won't go into it here. But, you need to have a repository to store the versions
    of your source code, and have the appropriate version control software installed
    on your workstation with the appropriate directories containing the version control
    binaries in your system's `PATH` environment variable, so that Qt Creator can
    find them. It's important that you access the version control commands from your
    system's shell (such as PowerShell or your local terminal prompt), because Qt
    Creator accesses them in the same ways.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要做的第一件事是为项目设置版本控制软件。如何做取决于您选择的版本控制系统（例如，可能由您的组织规定，或者您可能有从过去项目中工作中的个人偏好），以及如何执行此操作因系统而异，因此我们不会在这里详细介绍。但是，您需要有一个存储源代码版本的存储库，并且在您的工作站上安装适当的版本控制软件，并且在系统的`PATH`环境变量中包含包含版本控制二进制文件的适当目录，以便Qt
    Creator可以找到它们。重要的是，您需要从系统的shell（例如PowerShell或本地终端提示符）访问版本控制命令，因为Qt Creator以相同的方式访问它们。
- en: 'Once we''ve done this, we can configure how Qt Creator interacts with version
    control by selecting **Tools** | **Options…** | **Version Control**. There are
    general configuration options, which apply to whatever version control system
    you''re using, and then specific options for each flavor of version control that
    Qt supports. The general options are:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，我们可以通过选择**工具**|**选项...**|**版本控制**来配置Qt Creator与版本控制的交互方式。有适用于您正在使用的任何版本控制系统的一般配置选项，以及Qt支持的每种版本控制的特定选项。一般选项包括：
- en: A script that can be run on any submission message to ensure that your message
    is formatted correctly or contains the right information
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在任何提交消息上运行的脚本，以确保您的消息格式正确或包含正确的信息
- en: A list of names and aliases for your source code control system
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源代码控制系统的名称和别名列表
- en: A list of fields to include in each submission message
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括在每个提交消息中的字段列表
- en: The SSH prompt command used to prompt you for your SSH password when using SSH
    to access your version control system
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SSH提示命令用于在使用SSH访问版本控制系统时提示您输入SSH密码
- en: Some version control systems, such as Git and Mercurial, support local version
    control repositories. This is handy if you're flying solo on a development project
    and just need a place to back up your changes (of course, remember to back up
    the source code repository directory as well!). If you're using one of these systems,
    you can use Qt to create the local repository directory directly by navigating
    to **Tools** | **Create Repository**, or by navigating to **File** | **New File
    or Project** wizard on its last page.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一些版本控制系统，如Git和Mercurial，支持本地版本控制存储库。如果您在开发项目中独自操作并且只需要一个地方来备份您的更改，这将非常方便（当然，也要记得备份源代码存储库目录！）。如果您使用其中一个系统，可以使用Qt直接创建本地存储库目录，方法是导航到**工具**|**创建存储库**，或者导航到**文件**|**新文件或项目**向导的最后一页。
- en: 'If you install and configure a version control system, the various commands
    available from that system are added in a submenu to the **Tools** menu of Qt
    Creator. From there, you can:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果安装和配置版本控制系统，则该系统提供的各种命令将添加到Qt Creator的**工具**菜单的子菜单中。从那里，您可以：
- en: View version control command output by navigating to **Window** | **Output Panes**
    | **Version Control**
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过导航到**窗口**|**输出窗格**|**版本控制**来查看版本控制命令输出
- en: View different output from your version control system, letting you see what's
    changed in a file you are editing from what's in the repository
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看版本控制系统的不同输出，让您看到您正在编辑的文件与存储库中的文件有何不同
- en: View the change log for a file under version control by choosing **Log** or
    **Filelog**
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过选择**日志**或**文件日志**查看文件的变更日志
- en: Commit a file's changes to the system by choosing **Commit** or **Submit**
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过选择**提交**或**提交**将文件的更改提交到系统
- en: Revert changes to a file by choosing **Revert**
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过选择**还原**来撤消对文件的更改
- en: Update your working directory with the current contents of the version control
    system by choosing **Update**
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过选择**更新**，使用当前版本控制系统的内容更新您的工作目录
- en: Access additional per-version-control commands for supporting branches, stashes,
    and remote repositories that may also be available
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问支持分支、存储和远程存储库的其他每个版本控制命令可能也可用
- en: If you're just starting out and need to choose a version control system, perhaps
    the best thing to do is to look at the comparison of various systems on Wikipedia
    at [http://bit.ly/1aVGEUa](http://bit.ly/1aVGEUa) and get familiar with one.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您刚开始并需要选择版本控制系统，也许最好的方法是查看维基百科上各种系统的比较，并熟悉其中一个。
- en: Tip
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Personally, I prefer Git for my work, both using local repositories and in-hosted
    repositories such as GitHub. It's free, fast, has good support for branching,
    and is well-supported by Qt Creator.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 就我个人而言，我更喜欢Git，无论是使用本地存储库还是在GitHub等托管存储库中。它是免费的，速度快，对分支有很好的支持，并且得到了Qt Creator的良好支持。
- en: Configuring coding style and coding format options
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置编码风格和编码格式选项
- en: 'Readable code is crucial, and Qt Creator''s default coding style is one that
    most people find very readable. However, you may be on a project with different
    coding guidelines, or you may just find you can''t bear a particular facet of
    how the Qt Creator editor deals with code formatting: maybe it''s the positioning
    of the brackets, or how a `switch` statement gets formatted. Fortunately, Qt Creator
    is extremely configurable. By navigating to **Tools** | **Options…** | **C++**,
    you can configure how Qt Creator formats your code, as shown in the following
    screenshot:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 可读的代码至关重要，Qt Creator的默认编码风格是大多数人都认为非常易读的。但是，您可能在一个遵循不同编码准则的项目中，或者您可能发现无法忍受Qt
    Creator编辑器处理代码格式的某个特定方面：也许是大括号的位置，或者`switch`语句的格式。幸运的是，Qt Creator是非常可配置的。通过导航到**工具**
    | **选项…** | **C++**，您可以配置Qt Creator如何格式化您的代码，如下面的屏幕截图所示：
- en: '![Configuring coding style and coding format options](img/2319_07_01.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![配置编码风格和编码格式选项](img/2319_07_01.jpg)'
- en: Adjusting code formatting in Qt Creator
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在Qt Creator中调整代码格式
- en: 'The basic dialog lets you pick popular formatting styles, such as Qt''s default
    format, or the format used by most GNU code. You can also click on **Edit…**,
    which brings up the **Edit Code Style** window, as shown in the next screenshot:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 基本对话框允许您选择流行的格式样式，例如Qt的默认格式，或大多数GNU代码使用的格式。您还可以单击**编辑…**，这将打开**编辑代码样式**窗口，如下一个屏幕截图所示：
- en: '![Configuring coding style and coding format options](img/2319_07_02..jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![配置编码风格和编码格式选项](img/2319_07_02..jpg)'
- en: Fine-tuning code formatting in Qt Creator
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在Qt Creator中微调代码格式
- en: 'You''ll want to begin by copying a built-in style and editing it to suit your
    tastes; from the **Edit Code Style** dialog you can select whether tabs are represented
    as tab characters or spaces or tabs and the number of spaces per tab stop, as
    well as how line continuations are handled. Each pane lets you adjust specific
    aspects of code formatting:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您将首先复制一个内置样式，并编辑以适应您的口味；从**编辑代码样式**对话框中，您可以选择选项卡是表示为制表符字符还是空格或选项卡和每个选项卡停止的空格数，以及如何处理行连续。每个窗格都允许您调整代码格式的特定方面：
- en: The **Content** pane lets you adjust how class bodies are formatted, including
    spacing for public, protected, and private declarations
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内容**窗格允许您调整类主体的格式，包括公共、受保护和私有声明的间距'
- en: The **Braces** pane lets you control formatting as it pertains to braces
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**大括号**窗格允许您控制与大括号相关的格式'
- en: The **"switch"** pane lets you control switch and case statement formatting
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “switch”窗格允许您控制switch和case语句的格式
- en: The **Alignment** pane lets you control how code is aligned between consecutive
    lines
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对齐**窗格允许您控制代码在连续行之间的对齐方式'
- en: The **Pointer and References** pane lets you control spacing around pointer
    declarations
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**指针和引用**窗格允许您控制指针声明周围的间距'
- en: 'It''s easy to go crazy with all these options, but I urge you not to: what
    looks good at first glance is often an unreadable mess when you see it day after
    day. If you''re just getting started with Qt, stick with the default formatting,
    and remember the old adage *To do no harm*. When it comes to editing existing
    code—match the formatting that''s already there.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用所有这些选项很容易变得疯狂，但我劝您不要这样做：乍一看好的东西在日复一日看到时通常是无法阅读的混乱。如果您刚开始使用Qt，请坚持使用默认格式，并记住古老的格言*不要伤害别人*。在编辑现有代码时，要匹配已有的格式。
- en: Building from the command line
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从命令行构建
- en: Sometimes, you need to build a project from the command line. Maybe you're working
    on Linux, and you're just more comfortable there, or you've got a remote session
    running to your desktop while you're in a meeting. Or maybe, you want to automate
    builds on a build server, and need to know how Qt does its compilation magic for
    your builds.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您需要从命令行构建项目。也许您正在使用Linux，并且您更喜欢在那里工作，或者您在开会时远程连接到桌面。或者，您想要在构建服务器上自动构建，并且需要知道Qt如何为您的构建执行其编译魔法。
- en: 'The trick is `qmake`: Qt''s meta-make system that manages generating Make files
    for the compiler toolchain you already have installed. The `qmake` command takes
    `.pro` files, which you first saw in [Chapter 2](ch02.html "Chapter 2. Building
    Applications with Qt Creator"), *Building Applications with Qt Creator*, and generates
    the Make or Nmake file necessary for your toolchain to build your application.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 诀窍在于`qmake`：Qt的元构建系统，负责为您已经安装的编译器工具链生成Make文件。`qmake`命令接受`.pro`文件，您在[第2章](ch02.html
    "第2章。使用Qt Creator构建应用程序")中首次看到了这些文件，*使用Qt Creator构建应用程序*，并生成您的工具链构建应用程序所需的Make或Nmake文件。
- en: 'First, be sure that you have your compiler and `make` utility in your system
    path: how you do this varies from development environment to development environment.
    Next, be sure that you have commands for Qt''s build system in your path—a default
    if you''ve installed Qt on Linux using the package manager, and easily done by
    editing your path to include the appropriate `bin` directory from the Qt tools
    you installed on Mac OS X or Windows.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 首先确保您的编译器和`make`实用程序在系统路径中：如何执行此操作因开发环境而异。接下来，请确保您的路径中包含Qt的构建系统命令——如果您在Linux上使用软件包管理器安装了Qt，则默认情况下是这样，如果您在Mac
    OS X或Windows上安装了Qt工具，则可以通过编辑路径以包括适当的`bin`目录来轻松完成。
- en: 'Next, open up a command window and change to the directory containing your
    project: your `.pro` file should be at the root of that directory. Type `qmake`,
    and then either make (if your build system uses `make`), or `nmake` (if you''re
    using a Microsoft Windows toolchain). That''s all there is to it!'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开命令窗口并切换到包含您的项目的目录：您的`.pro`文件应该位于该目录的根目录。键入`qmake`，然后进行构建（如果您的构建系统使用`make`），或者进行`nmake`（如果您使用Microsoft
    Windows工具链）。就是这样！
- en: Setting Qt Quick window display options
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Qt Quick窗口显示选项
- en: Qt Quick is great for building applications for nontraditional computing environments,
    such as set-top boxes or automotive computers. Often, when working with Qt Quick
    you'll want an application that doesn't have all the usual windows chrome (such
    as the close box) around the contents of the window in these settings, because
    you're trying to present a unified user interface based on your Qt Quick application,
    rather than the windowing toolkit on the host platform.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Quick非常适合构建非传统计算环境的应用程序，比如机顶盒或汽车电脑。在使用Qt Quick时，通常您会希望应用程序在这些设置中不具有所有通常的窗口外观（比如关闭框），因为您试图基于您的Qt
    Quick应用程序而不是主机平台上的窗口工具包来呈现统一的用户界面。
- en: 'You can easily set opacity and windows options (such as whether or not to show
    a close box) by editing the `main.cpp` file in your Qt Quick project. By default,
    it looks like this:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过编辑Qt Quick项目中的`main.cpp`文件轻松设置不透明度和窗口选项（比如是否显示关闭框）。默认情况下，它看起来是这样的：
- en: '[PRE1]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This code creates a Qt Quick application viewer, sets its main QML file (the
    first one to be loaded) to the indicated file, and then shows it before starting
    the application''s event loop. Fortunately, the `QtQuick2ApplicationViewer` object
    has a `setFlags` method that lets you pass `Qt::Window` flags to the window it
    initializes to display your Qt Quick application. These flags include:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码创建了一个Qt Quick应用程序查看器，将其主QML文件（要加载的第一个文件）设置为指定的文件，然后在启动应用程序的事件循环之前显示它。幸运的是，`QtQuick2ApplicationViewer`对象有一个`setFlags`方法，让您可以传递`Qt::Window`标志给它初始化的窗口，以显示您的Qt
    Quick应用程序。这些标志包括：
- en: '`Qt::FramelessWindowHint`: This indicates that the window should be borderless
    (works on Linux systems, but not on Windows)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Qt::FramelessWindowHint`：这表示窗口应该没有边框（在Linux系统上有效，在Windows上无效）'
- en: '`Qt::Popup`: This indicates a pop-up window (you can use this on Windows to
    get a nearly borderless window with a slight drop shadow)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Qt::Popup`：这表示一个弹出窗口（您可以在Windows上使用这个选项来获得一个几乎没有边框但有轻微阴影的窗口）'
- en: '`Qt::WindowStaysOnTopHint`: This indicates that the window should stay on top
    of all other windows'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Qt::WindowStaysOnTopHint`：这表示窗口应该始终位于所有其他窗口之上'
- en: '`Qt::WindowStaysOnBottomHint`: This indicates that the window should stay below
    all other windows'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Qt::WindowStaysOnBottomHint`：这表示窗口应该位于所有其他窗口下方'
- en: '`Qt::Desktop`: This indicates that the window should run on the desktop'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Qt::Desktop`：这表示窗口应该在桌面上运行'
- en: A full list of the flags can be found in the Qt documentation at [http://bit.ly/17NT0sm](http://bit.ly/17NT0sm).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Qt文档中可以找到所有标志的完整列表，网址是[http://bit.ly/17NT0sm](http://bit.ly/17NT0sm)。
- en: You can also adjust a window's opacity, by using the `setOpacity` method of
    `QtQuick2ApplicationViewer`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过使用`QtQuick2ApplicationViewer`的`setOpacity`方法来调整窗口的不透明度。
- en: 'Say, for example, we want a blue window with no border but a slight drop shadow
    at 75 percent opacity to hover over all other windows for my Qt Quick application.
    We''d change the QML to read:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 比如，我们想要一个蓝色窗口，没有边框，但是有一个轻微的75%不透明度的阴影，悬浮在所有其他窗口上，用于我的Qt Quick应用程序。我们会修改QML以便读取：
- en: '[PRE2]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Note the `color: blue` declaration for our top-level rectangle. Next, we''d
    modify `main.cpp` to read:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '请注意我们顶层矩形的`color: blue`声明。接下来，我们将修改`main.cpp`以便读取：'
- en: '[PRE3]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The key lines here come just before `viewer.setMainQmlFile`: the `setOpacity`
    method sets the main window''s opacity, and the `setFlags` method sets the flags
    for the main window to be a pop up that will be on top of all other windows. By
    running the application, we can see something like the following screenshot:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 关键的行在`viewer.setMainQmlFile`之前：`setOpacity`方法设置主窗口的不透明度，`setFlags`方法设置主窗口的标志为一个弹出窗口，将位于所有其他窗口之上。通过运行应用程序，我们可以看到类似以下的屏幕截图：
- en: '![Setting Qt Quick window display options](img/2319_07_03.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![设置Qt Quick窗口显示选项](img/2319_07_03.jpg)'
- en: A translucent Qt Quick window atop other windows
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 一个半透明的Qt Quick窗口位于其他窗口之上
- en: You can use this trick to come up with a variety of effects for how your Qt
    Quick application is displayed.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用这个技巧来产生各种效果，来显示您的Qt Quick应用程序。
- en: Learning more about Qt
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解更多关于Qt
- en: 'In the earlier chapters, I pointed you to the **Help** panel of Qt Creator,
    as well as the editor''s facility for autocompletion of class members when editing
    code. The Qt Creator''s **Help** view is really a subview into Qt Assistant, the
    full documentation for all of Qt. Much of this documentation is also on the Web,
    but it''s much faster to access locally. We start Qt Assistant from the Qt SDK
    (either from the command line with `qtassistant` or by finding it in the installed
    list of applications), and we can see something like the following screenshot:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在早期的章节中，我指向了Qt Creator的**帮助**面板，以及编辑代码时自动补全类成员的功能。Qt Creator的**帮助**视图实际上是Qt助手的一个子视图，包含了Qt的完整文档。这些文档的大部分也在网上，但在本地访问速度更快。我们从Qt
    SDK启动Qt助手（可以通过命令行使用`qtassistant`，也可以在已安装的应用程序列表中找到它），我们可以看到类似以下的屏幕截图：
- en: '![Learning more about Qt](img/2319_07_04.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![了解更多关于Qt](img/2319_07_04.jpg)'
- en: Qt Assistant
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Qt助手
- en: Qt Assistant is the definitive place to learn about Qt. In the left column you
    see a table of contents; the best place to start is with Qt Core, and then either
    Qt GUI or Qt Quick depending on whether you want to write GUI or Qt Quick applications.
    The main view on the right is just like a browser window, complete with hyperlinks
    to related sections.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Qt助手是学习Qt的终极地方。在左侧列中，您会看到一个目录；最好的开始位置是Qt Core，然后根据您想要编写GUI还是Qt Quick应用程序选择Qt
    GUI或Qt Quick。右侧的主视图就像一个浏览器窗口，包括到相关部分的超链接。
- en: Also inside Qt Assistant, you can add bookmarks to frequently accessed pages,
    see an index of all terms in the documentation, and quickly search for terms using
    the search tab in the left-hand column. It's an invaluable resource, and as easy
    to use as an e-book.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在Qt助手中，您还可以将常访问的页面添加到书签中，查看文档中所有术语的索引，并通过左侧列的搜索选项卡快速搜索术语。这是一个非常宝贵的资源，使用起来就像使用电子书一样简单。
- en: Finally, if you prefer the Web for learning about things, don't forget Qt's
    extensive online documentation, available at [http://bit.ly/15F11Ok](http://bit.ly/15F11Ok).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果您喜欢通过网络了解事物，请不要忘记Qt的广泛在线文档，可在[http://bit.ly/15F11Ok](http://bit.ly/15F11Ok)上找到。
- en: Summary
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Qt and Qt Creator provide a great environment for your application development,
    whether you're writing console, GUI, or Qt Quick applications. You can mix and
    match standard C++ code with Qt, letting you make the most of your existing skills.
    When doing so, you can add in things such as version control and command-line
    builds to your tools, giving you the ability to work in large teams and perform
    unattended builds of large projects using Qt. Qt also has a great documentation
    both bundled with Qt Creator and on the Web. With what you've learned in this
    book and what's available, the sky's the limit for your application development
    goals!
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Qt和Qt Creator为您的应用程序开发提供了一个很好的环境，无论您是编写控制台、GUI还是Qt Quick应用程序。您可以将标准C++代码与Qt混合使用，从而充分利用您现有的技能。在这样做时，您可以添加诸如版本控制和命令行构建等工具，使您能够在大型团队中工作，并使用Qt执行大型项目的无人值守构建。Qt还有一个很好的文档，既包含在Qt
    Creator中，也可以在网络上找到。通过本书学到的知识和可用的资源，您的应用程序开发目标将不受限制！
