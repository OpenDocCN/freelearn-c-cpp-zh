["```cpp\nMon Tue Wed Thu Fri Sat Sun\n                  1   2   3\n  4   5   6   7   8   9  10\n 11  12  13  14  15  16  17\n 18  19  20  21  22  23  24\n 25  26  27  28  29  30  31\n```", "```cpp\ntemplate <typename Time = std::chrono::microseconds,\n          typename Clock = std::chrono::high_resolution_clock>\nstruct perf_timer\n{\n   template <typename F, typename... Args>\n   static Time duration(F&& f, Args... args)\n   {\n      auto start = Clock::now();\n      std::invoke(std::forward<F>(f), std::forward<Args>(args)...);\n      auto end = Clock::now();\n\n      return std::chrono::duration_cast<Time>(end - start);\n   }\n};\n```", "```cpp\nvoid f() \n{ \n   // simulate work\n   std::this_thread::sleep_for(2s); \n}\n\nvoid g(int const a, int const b) \n{ \n   // simulate work\n   std::this_thread::sleep_for(1s); \n}\n\nint main()\n{\n   auto t1 = perf_timer<std::chrono::microseconds>::duration(f);\n   auto t2 = perf_timer<std::chrono::milliseconds>::duration(g, 1, 2);\n\n   auto total = std::chrono::duration<double, std::nano>(t1 + t2).count();\n}\n```", "```cpp\ninline int number_of_days(\n   int const y1, unsigned int const m1, unsigned int const d1,\n   int const y2, unsigned int const m2, unsigned int const d2)\n{\n   using namespace date;\n\n   return (sys_days{ year{ y1 } / month{ m1 } / day{ d1 } } -\n           sys_days{ year{ y2 } / month{ m2 } / day{ d2 } }).count();\n}\n\ninline int number_of_days(date::sys_days const & first,\n                          date::sys_days const & last)\n{\n   return (last - first).count();\n}\n```", "```cpp\nint main()\n{\n   auto diff1 = number_of_days(2016, 9, 23, 2017, 5, 15);\n\n   using namespace date::literals;\n   auto diff2 = number_of_days(2016_y/sep/23, 15_d/may/2017);\n}\n```", "```cpp\nunsigned int week_day(int const y, unsigned int const m, \n                      unsigned int const d)\n{\n   using namespace date;\n\n   if(m < 1 || m > 12 || d < 1 || d > 31) return 0;\n\n   auto const dt = date::year_month_day{year{ y }, month{ m }, day{ d }};\n   auto const tiso = iso_week::year_weeknum_weekday{ dt };\n\n   return (unsigned int)tiso.weekday();\n}\n\nint main()\n{\n   auto wday = week_day(2018, 5, 9);\n}\n```", "```cpp\nint day_of_year(int const y, unsigned int const m, \n                unsigned int const d)\n{\n   using namespace date;\n\n   if(m < 1 || m > 12 || d < 1 || d > 31) return 0;\n\n   return (sys_days{ year{ y } / month{ m } / day{ d } } -\n           sys_days{ year{ y } / jan / 0 }).count();\n}\n\nunsigned int calendar_week(int const y, unsigned int const m, \n                           unsigned int const d)\n{\n   using namespace date;\n\n   if(m < 1 || m > 12 || d < 1 || d > 31) return 0;\n\n   auto const dt = date::year_month_day{year{ y }, month{ m }, day{ d }};\n   auto const tiso = iso_week::year_weeknum_weekday{ dt };\n\n   return (unsigned int)tiso.weeknum();\n}\n```", "```cpp\nint main()\n{\n   int y = 0;\n   unsigned int m = 0, d = 0;\n   std::cout << \"Year:\"; std::cin >> y;\n   std::cout << \"Month:\"; std::cin >> m;\n   std::cout << \"Day:\"; std::cin >> d;\n\n   std::cout << \"Calendar week:\" << calendar_week(y, m, d) << std::endl;\n   std::cout << \"Day of year:\" << day_of_year(y, m, d) << std::endl;\n}\n```", "```cpp\nstruct user\n{\n   std::string Name;\n   date::time_zone const * Zone;\n\n   explicit user(std::string_view name, std::string_view zone)\n      : Name{name.data()}, Zone(date::locate_zone(zone.data()))\n   {}\n};\n```", "```cpp\ntemplate <class Duration, class TimeZonePtr>\nvoid print_meeting_times(\n   date::zoned_time<Duration, TimeZonePtr> const & time,\n   std::vector<user> const & users)\n{\n   std::cout \n      << std::left << std::setw(15) << std::setfill(' ')\n      << \"Local time: \" \n      << time << std::endl;\n\n   for (auto const & user : users)\n   {\n      std::cout\n         << std::left << std::setw(15) << std::setfill(' ')\n         << user.Name\n         << date::zoned_time<Duration, TimeZonePtr>(user.Zone, time) \n         << std::endl;\n   }\n}\n```", "```cpp\nint main()\n{\n   std::vector<user> users{\n      user{ \"Ildiko\", \"Europe/Budapest\" },\n      user{ \"Jens\", \"Europe/Berlin\" },\n      user{ \"Jane\", \"America/New_York\" }\n   };\n\n   unsigned int h, m;\n   std::cout << \"Hour:\"; std::cin >> h;\n   std::cout << \"Minutes:\"; std::cin >> m;\n\n   date::year_month_day today = \n      date::floor<date::days>(ch::system_clock::now());\n\n   auto localtime = date::zoned_time<std::chrono::minutes>(\n      date::current_zone(), \n      static_cast<date::local_days>(today)+ch::hours{h}+ch::minutes{m});\n\n   print_meeting_times(localtime, users);\n}\n```", "```cpp\nunsigned int week_day(int const y, unsigned int const m, \n                      unsigned int const d)\n{\n   using namespace date;\n\n   if(m < 1 || m > 12 || d < 1 || d > 31) return 0;\n\n   auto const dt = date::year_month_day{year{ y }, month{ m }, day{ d }};\n   auto const tiso = iso_week::year_weeknum_weekday{ dt };\n\n   return (unsigned int)tiso.weekday();\n}\n\nvoid print_month_calendar(int const y, unsigned int m)\n{\n   using namespace date;\n   std::cout << \"Mon Tue Wed Thu Fri Sat Sun\" << std::endl;\n\n   auto first_day_weekday = week_day(y, m, 1);\n   auto last_day = (unsigned int)year_month_day_last(\n      year{ y }, month_day_last{ month{ m } }).day();\n\n   unsigned int index = 1;\n   for (unsigned int day = 1; day < first_day_weekday; ++day, ++index)\n   {\n      std::cout << \" \";\n   }\n\n   for (unsigned int day = 1; day <= last_day; ++day)\n   {\n      std::cout << std::right << std::setfill(' ') << std::setw(3)\n                << day << ' ';\n      if (index++ % 7 == 0) std::cout << std::endl;\n   }\n\n   std::cout << std::endl;\n}\n\nint main()\n{\n   print_month_calendar(2017, 12);\n}\n```"]