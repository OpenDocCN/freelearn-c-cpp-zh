["```cpp\nQT += core gui multimedia multimediawidgets \n```", "```cpp\n#include <QMainWindow> \n#include <QDebug> \n#include <QCameraInfo> \n#include <QCamera> \n#include <QCameraViewfinder> \n#include <QCameraImageCapture> \n#include <QMediaRecorder> \n#include <QUrl> \n```", "```cpp\nprivate: \n   Ui::MainWindow *ui; \n   QCamera* camera; \n   QCameraViewfinder* viewfinder; \n   bool connected; \n```", "```cpp\nMainWindow::MainWindow(QWidget *parent) : \n   QMainWindow(parent), \n   ui(new Ui::MainWindow) \n{ \n   ui->setupUi(this); \n\n   connected = false; \n   camera = new QCamera(); \n\n   qDebug() << \"Number of cameras found:\" << QCameraInfo::availableCameras().count(); \n\n   QList<QCameraInfo> cameras = QCameraInfo::availableCameras(); \n   foreach (const QCameraInfo &cameraInfo, cameras) \n   { \n         qDebug() << \"Camera info:\" << cameraInfo.deviceName() << \n         cameraInfo.description() << cameraInfo.position(); \n\n         ui->deviceSelection->addItem(cameraInfo.description()); \n   } \n} \n```", "```cpp\nvoid MainWindow::on_connectButton_clicked() \n{ \n   if (!connected) \n   { \n         connectCamera(); \n   } \n   else \n   { \n         camera->stop(); \n         viewfinder->deleteLater(); \n         ui->connectButton->setText(\"Connect\"); \n         connected = false; \n   } \n} \n```", "```cpp\nvoid MainWindow::connectCamera() \n{ \n   QList<QCameraInfo> cameras = QCameraInfo::availableCameras(); \n   foreach (const QCameraInfo &cameraInfo, cameras) \n   { \n         qDebug() << cameraInfo.description() << ui->deviceSelection-\n         >currentText(); \n\n         if (cameraInfo.description() == ui->deviceSelection- \n         >currentText()) \n         { \n               camera = new QCamera(cameraInfo); \n               viewfinder = new QCameraViewfinder(this); \n               camera->setViewfinder(viewfinder); \n               ui->webcamLayout->addWidget(viewfinder); \n\n               connected = true; \n               ui->connectButton->setText(\"Disconnect\"); \n\n               camera->start(); \n\n               return; \n         } \n   } \n} \n```", "```cpp\nprivate slots: \n   void cameraError(QCamera::Error error); \n```", "```cpp\nvoid MainWindow::connectCamera() \n{ \n   QList<QCameraInfo> cameras = QCameraInfo::availableCameras(); \n   foreach (const QCameraInfo &cameraInfo, cameras) \n   { \n         qDebug() << cameraInfo.description() << ui->deviceSelection-\n         >currentText(); \n\n         if (cameraInfo.description() == ui->deviceSelection-\n         >currentText()) \n         { \n               camera = new QCamera(cameraInfo); \n               viewfinder = new QCameraViewfinder(this); \n               camera->setViewfinder(viewfinder); \n               ui->webcamLayout->addWidget(viewfinder); \n\n               connect(camera, SIGNAL(error(QCamera::Error)), this, \n               SLOT(cameraError(QCamera::Error))); \n\n               connected = true; \n               ui->connectButton->setText(\"Disconnect\"); \n\n               camera->start(); \n\n               return; \n         } \n   } \n} \n```", "```cpp\nvoid MainWindow::cameraError(QCamera::Error error) \n{ \n   qDebug() << \"Camera error:\" << error; \n\n   connected = false; \n   camera->stop(); \n   ui->connectButton->setText(\"Connect\"); \n} \n```", "```cpp\nprivate: \n   Ui::MainWindow *ui; \n   QCamera* camera; \n   QCameraViewfinder* viewfinder; QCameraImageCapture* imageCapture; bool connected; \n```", "```cpp\nvoid MainWindow::on_captureButton_clicked() \n{ \n   if (connected) \n   { \n         imageCapture = new QCameraImageCapture(camera); \n         camera->setCaptureMode(QCamera::CaptureStillImage); \n         camera->searchAndLock(); \n         imageCapture->capture(qApp->applicationDirPath()); \n         camera->unlock(); \n   } \n} \n```", "```cpp\nprivate: \n   Ui::MainWindow *ui; \n   QCamera* camera; \n   QCameraViewfinder* viewfinder; \n   QCameraImageCapture* imageCapture; \n   QMediaRecorder* recorder; \n\n   bool connected; \n   bool recording; \n```", "```cpp\nvoid MainWindow::on_recordButton_clicked() \n{ \n   if (connected) \n   { \n         if (!recording) \n         { \n               recorder = new QMediaRecorder(camera); \n               camera->setCaptureMode(QCamera::CaptureVideo); \n               recorder->setOutputLocation(QUrl(qApp-\n               >applicationDirPath())); \n               recorder->record(); \n               recording = true; \n         } \n         else \n         { \n               recorder->stop(); \n               recording = false; \n         } \n   } \n} \n```", "```cpp\nvoid MainWindow::on_recordButton_clicked() \n{ \n   if (connected) \n   { \n         if (!recording) \n         { \n               recorder = new QMediaRecorder(camera); \n               connect(recorder, SIGNAL(error(QMediaRecorder::Error)), \n               this, SLOT(recordError(QMediaRecorder::Error))); \n               camera->setCaptureMode(QCamera::CaptureVideo); \n               recorder->setOutputLocation(QUrl(qApp-\n               >applicationDirPath())); \n               recorder->record(); \n               recording = true; \n         } \n         else \n         { \n               recorder->stop(); \n               recording = false; \n         } \n   } \n} \n```", "```cpp\nvoid MainWindow::recordError(QMediaRecorder::Error error) \n{ \n   qDebug() << errorString(); \n} \n```"]