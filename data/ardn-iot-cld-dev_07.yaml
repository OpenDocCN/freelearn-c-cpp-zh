- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Enabling Communication between Different Devices
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用不同设备之间的通信
- en: This chapter is dedicated to **thing-to-thing communication** (**TTC**), which
    is a very important concept and requirement in the field of the **Internet of
    Things** (**IoT**). You can also call it **Device-to-Device** (**D2D**) communication.
    D2D communication plays a vital role in complex systems where one device’s operations
    are totally dependent on another device. For example, say you want to control
    your room’s AC according to outdoor weather conditions; here, D2D communication
    plays a vital role by sending the outdoor temperature to the room’s AC controller
    device so it knows whether it needs to cool or heat the room according to the
    weather outside.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章致力于**物与物通信（TTC**），这是物联网（IoT）领域的一个重要概念和需求。您也可以称之为**设备到设备（D2D**）通信。在复杂系统中，一个设备的操作完全依赖于另一个设备时，D2D通信发挥着至关重要的作用。例如，假设您想根据室外天气条件控制房间的空调；在这里，D2D通信通过将室外温度发送到房间的空调控制器设备，使其知道是否需要根据外面的天气来冷却或加热房间，发挥着至关重要的作用。
- en: Arduino IoT Cloud provides a cloud variable synchronization feature across multiple
    things, as well as for dashboards, which helps us to build complex systems easily.
    This chapter explains the usage of the synchronization feature for the implementation
    of cloud **graphical user interfaces** (**GUIs**) and D2D communication purposes.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino IoT Cloud 为多个设备以及仪表盘提供了云变量同步功能，这有助于我们轻松构建复杂系统。本章解释了同步功能的使用，用于实现云**图形用户界面（GUI**）和点对点（D2D）通信。
- en: In this chapter, you will learn how to sync a cloud variable across things using
    the GUI without writing any complex code. This chapter will help you set up communication
    between things with just a couple of clicks without writing any lengthy code.
    It will also help you to develop solutions that are totally dependent upon other
    device’s sensor data. You will also learn how to create a single dashboard for
    multiple things so you can display their readings in one place, which helps the
    user monitor everything from one display without navigating to other dashboards.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何使用图形用户界面（GUI）同步跨多个设备上的云变量，而无需编写任何复杂的代码。本章将帮助您通过几个点击设置设备之间的通信，而无需编写任何冗长的代码。它还将帮助您开发完全依赖于其他设备传感器数据的解决方案。您还将学习如何为多个设备创建单个仪表盘，以便您可以在一个地方显示它们的读数，这有助于用户从单个显示屏监控一切，而无需导航到其他仪表盘。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: What is D2D communication in the IoT cloud?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 物联网云中的D2D通信是什么？
- en: The benefits of Arduino IoT Cloud thing-to-thing communication
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino IoT Cloud 物与物通信的好处
- en: Hardware components – sensors and development boards
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 硬件组件 - 传感器和开发板
- en: Project architecture
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目架构
- en: Setting up a Thing
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置设备
- en: Implementation of GUIs using synchronized cloud variables
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用同步云变量实现GUI
- en: Limitations of cloud variable/property synchronization
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云变量/属性同步的限制
- en: What next?
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来是什么？
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following are required to complete this chapter’s exercise:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章练习所需的以下内容：
- en: Complete [*Chapter 4*](B19752_04.xhtml#_idTextAnchor085) of this book
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完成本书的**第4章**（B19752_04.xhtml#_idTextAnchor085）
- en: MKR Wi-Fi 1010
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MKR Wi-Fi 1010
- en: 1x 5 mm red LED and 1x 5 mm green LED
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1个5毫米红色LED和1个5毫米绿色LED
- en: A breadboard
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面包板
- en: Jumper cables
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳线
- en: 'We will use the **Arduino Web Editor** for coding, which includes a large collection
    of development boards and sensor libraries, and **Arduino IoT Cloud** for thing
    and dashboard setup. The chapter code is available in the official book GitHub
    repository by following this link: [https://github.com/PacktPublishing/Arduino-IoT-Cloud-for-Developers](https://github.com/PacktPublishing/Arduino-IoT-Cloud-for-Developers).'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用**Arduino Web Editor**进行编码，它包括大量开发板和传感器库，以及**Arduino IoT Cloud**进行设备和仪表盘设置。本章代码可在官方书籍GitHub仓库中找到，请通过以下链接访问：[https://github.com/PacktPublishing/Arduino-IoT-Cloud-for-Developers](https://github.com/PacktPublishing/Arduino-IoT-Cloud-for-Developers)。
- en: What is D2D communication in the IoT cloud?
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 物联网云中的D2D通信是什么？
- en: D2D communication in the context of IoT and the IoT cloud refers to the ability
    of IoT devices to directly exchange data or information with each other without
    relying on a central server or cloud-based service as an intermediary. This form
    of communication is also known as **Peer-to-Peer** (**P2P**) communication among
    IoT devices.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 物联网和物联网云环境中的D2D通信是指物联网设备能够直接相互交换数据或信息，而不依赖于中央服务器或基于云的服务作为中介。这种通信形式也被称为物联网设备之间的**点对点**（**P2P**）通信。
- en: 'Here are some key points to understand about D2D communication in the IoT cloud:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是关于物联网云中D2D通信的一些关键点：
- en: '**Direct communication**: In traditional IoT architectures, devices send data
    to a cloud platform, where it is processed and potentially shared with other devices.
    D2D communication allows devices to talk to each other directly, bypassing the
    cloud when necessary.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**直接通信**: 在传统的物联网架构中，设备将数据发送到云平台，在那里进行处理，并可能与其他设备共享。D2D通信允许设备直接相互通信，在必要时绕过云平台。'
- en: '**Low latency**: D2D communication can reduce latency because data doesn’t
    have to travel to a remote server and back. This is crucial in applications where
    real-time or near-real-time responses are required, such as in industrial automation
    or connected vehicles.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**低延迟**: D2D通信可以降低延迟，因为数据不需要往返于远程服务器。这在需要实时或近实时响应的应用中至关重要，如工业自动化或联网汽车。'
- en: '**Efficiency**: By enabling devices to communicate directly, it can reduce
    the load on cloud servers and bandwidth usage, making the IoT system more efficient
    and cost-effective.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**效率**: 通过使设备能够直接通信，可以减少云服务器的负载和带宽使用，使物联网系统更加高效和成本效益。'
- en: '**Offline operation**: D2D communication can work even when devices are not
    connected to the internet or the cloud. This can be especially useful in scenarios
    where intermittent connectivity is common, such as in remote areas or emergency
    situations.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**离线操作**: D2D通信即使在设备未连接到互联网或云的情况下也能工作。这在间歇性连接常见的场景中特别有用，例如在偏远地区或紧急情况下。'
- en: '**Security**: Implementing direct communication between devices requires robust
    security measures to protect data and ensure the authenticity of messages. Encryption
    and authentication mechanisms are essential to prevent unauthorized access.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全性**: 实现设备之间的直接通信需要强大的安全措施来保护数据并确保消息的真实性。加密和身份验证机制对于防止未授权访问是必不可少的。'
- en: '**Use cases**: D2D communication can be used in various IoT applications. For
    example, in a smart home, IoT devices such as thermostats and lights can communicate
    directly to coordinate actions without needing to send data to a central server.
    In agriculture, sensors on farm equipment can communicate directly to optimize
    tasks.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用例**: D2D通信可用于各种物联网应用。例如，在智能家居中，恒温器和灯光等物联网设备可以直接通信以协调动作，而无需将数据发送到中央服务器。在农业中，农业设备上的传感器可以直接通信以优化任务。'
- en: '**Protocols**: Various communication protocols can facilitate D2D communication
    in IoT, including **Message Queuing Telemetry Transport** (**MQTT**), **Constrained
    Application Protocol** (**CoAP**), Bluetooth, and **Zigbee**. The choice of protocol
    depends on factors such as range, data volume, and power consumption.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**协议**: 在物联网中，各种通信协议可以促进D2D通信，包括**消息队列遥测传输**（**MQTT**）、**约束应用协议**（**CoAP**）、蓝牙和**Zigbee**。协议的选择取决于范围、数据量和功耗等因素。'
- en: '**Challenges**: While D2D communication provides many benefits, it also presents
    challenges, such as ensuring interoperability between devices from different manufacturers
    and managing the complexities of decentralized communication.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**挑战**: 虽然D2D通信提供了许多好处，但也带来了挑战，例如确保来自不同制造商的设备之间的互操作性以及管理去中心化通信的复杂性。'
- en: In summary, D2D communication in IoT cloud environments allows IoT devices to
    communicate directly with each other, which provides benefits such as reduced
    latency, improved efficiency, and offline operation. However, it also requires
    careful planning and security measures to ensure the reliability and integrity
    of the communication network.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，物联网云环境中的D2D通信允许物联网设备直接相互通信，这提供了降低延迟、提高效率和离线操作等好处。然而，它也需要仔细规划和安全措施，以确保通信网络的可靠性和完整性。
- en: In this section, we explored the benefits and challenges of D2D communication,
    which is very important in IoT infrastructure and solution development. In the
    next section, we will explore what type of option Arduino IoT Cloud is providing
    for TTC.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了D2D通信的好处和挑战，这在物联网基础设施和解决方案开发中非常重要。在下一节中，我们将探讨Arduino IoT Cloud为TTC提供的哪种类型选项。
- en: The benefits of Arduino IoT Cloud thing-to-thing communication
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Arduino IoT Cloud设备间通信的好处
- en: 'Arduino IoT Cloud is a platform that’s designed to simplify the development
    and management of IoT projects using Arduino boards and other compatible hardware.
    When it comes to TTC in the context of Arduino IoT Cloud, there are several benefits:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino IoT Cloud是一个专为简化使用Arduino板和其他兼容硬件的物联网项目开发和管理的平台。在Arduino IoT Cloud的上下文中，TTC有几个好处：
- en: '**Ease of integration**: Arduino IoT Cloud provides a user-friendly interface
    for connecting and configuring IoT devices, making it easier to establish communication
    between devices. Users can quickly set up and manage the connections between their
    Arduino boards and other IoT devices.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**易于集成**：Arduino IoT Cloud提供了一个用户友好的界面，用于连接和配置物联网设备，这使得建立设备之间的通信更加容易。用户可以快速设置和管理他们Arduino板与其他物联网设备之间的连接。'
- en: '**Remote control**: You can use TTC to control one Arduino device from another.
    For example, you could use one Arduino device to control a light bulb in another
    room.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**遥控**：您可以使用TTC从一台Arduino设备控制另一台。例如，您可以使用一台Arduino设备控制另一个房间的灯泡。'
- en: '**Scalability**: Arduino IoT Cloud allows you to scale your IoT projects easily.
    You can add new devices to your network and configure their communication parameters
    without extensive programming, making it suitable for both small-scale and large-scale
    IoT deployments.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性**：Arduino IoT Cloud允许您轻松扩展您的物联网项目。您可以向您的网络添加新设备并配置它们的通信参数，而无需进行大量编程，这使得它适用于从小型到大型物联网部署。'
- en: '**Reduced latency**: Direct communication between IoT devices within the same
    network can significantly reduce latency compared to sending data to an external
    cloud server and back. This is crucial for real-time applications, where low latency
    is essential.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**降低延迟**：在同一网络内物联网设备之间的直接通信可以显著降低与发送数据到外部云服务器并返回相比的延迟。这对于需要低延迟的实时应用至关重要。'
- en: '**Energy efficiency**: Arduino IoT Cloud allows you to optimize the power consumption
    of your devices by controlling when and how they communicate with each other.
    This can extend the battery life of battery-powered IoT devices.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**节能**：Arduino IoT Cloud允许您通过控制设备之间何时以及如何通信来优化设备的功耗。这可以延长电池供电的物联网设备的电池寿命。'
- en: '**Customizable logic**: You can program custom logic for TTC to suit your specific
    project requirements. This flexibility enables you to implement complex behaviors
    and automation in your IoT system.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可定制逻辑**：您可以为TTC编程定制逻辑以满足您特定的项目需求。这种灵活性使您能够在物联网系统中实现复杂的行为和自动化。'
- en: '**Security**: Arduino IoT Cloud provides security features to help protect
    the communication between your devices, including encryption and authentication
    mechanisms. This ensures that data exchanged between devices remains secure.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全性**：Arduino IoT Cloud提供安全功能以帮助保护您的设备之间的通信，包括加密和认证机制。这确保了设备之间交换的数据保持安全。'
- en: '**Cost efficiency**: By reducing the reliance on external cloud services and
    minimizing data transfer costs, Arduino IoT Cloud can be a cost-effective solution
    for IoT projects, especially when dealing with a large number of devices.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**成本效益**：通过减少对外部云服务的依赖并最小化数据传输成本，Arduino IoT Cloud可以成为物联网项目的经济高效解决方案，尤其是在处理大量设备时。'
- en: '**Compatibility**: Arduino IoT Cloud supports a wide range of Arduino boards
    and compatible hardware, making it accessible to a broad user base. This compatibility
    simplifies the process of implementing TTC for Arduino-based IoT projects.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**兼容性**：Arduino IoT Cloud支持广泛的Arduino板和兼容硬件，使其对广泛的用户群体可访问。这种兼容性简化了在基于Arduino的物联网项目中实现TTC的过程。'
- en: In summary, Arduino IoT Cloud simplifies TTC in IoT projects, providing features
    such as ease of integration, scalability, reduced latency, energy efficiency,
    offline operation, customization, security, cost efficiency, and broad hardware
    compatibility. These features make it a valuable platform for developing and managing
    IoT systems that rely on direct communication between devices.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，Arduino IoT Cloud 简化了物联网项目中的 TTC，提供了易于集成、可扩展性、降低延迟、节能、离线操作、定制、安全性、成本效益和广泛的硬件兼容性等功能。这些特性使其成为开发和管理依赖设备间直接通信的物联网系统的宝贵平台。
- en: In this section, we have discussed the benefits of Arduino IoT Cloud TTC. In
    the next section, we will explore what hardware components we require to do this
    chapter’s exercise.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了 Arduino IoT Cloud TTC 的好处。在下一节中，我们将探讨完成本章练习所需的硬件组件。
- en: Hardware components – sensors and development boards
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 硬件组件 – 传感器和开发板
- en: In this chapter, we are going to explore how to sync cloud variables across
    multiple Arduino IoT Cloud things. So, here we will use the same thing, including
    a development board and sensors, that was used in [*Chapter 4*](B19752_04.xhtml#_idTextAnchor085).
    For this chapter’s demonstration, we are going to use Arduino MKR Wi-Fi 1010 along
    with two 5 mm LEDs, a red one and a green one. The complete project is summarized
    in *Figure 7**.1.*
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨如何在多个 Arduino IoT Cloud 项目之间同步云变量。因此，这里我们将使用与 [*第 4 章*](B19752_04.xhtml#_idTextAnchor085)
    中相同的设备，包括开发板和传感器。为了本章的演示，我们将使用 Arduino MKR Wi-Fi 1010 以及两个 5 毫米 LED 灯，一个红色和一个绿色。完整的项目总结在
    *图 7**.1* 中。
- en: '![Figure 7.1 – Project architecture](img/B19752_07_01.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.1 – 项目架构](img/B19752_07_01.jpg)'
- en: Figure 7.1 – Project architecture
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.1 – 项目架构
- en: As shown in *Figure 7**.1*, we use one WeMos D1 mini development board, which
    is based on ESP8266, and the whole project is demonstrated in [*Chapter 4*](B19752_04.xhtml#_idTextAnchor085).
    The purpose of using different types of boards in this chapter is to demonstrate
    how easy it is to sync the cloud variables across different types of development
    boards. In the next section, we will talk in detail about project architecture.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如 *图 7**.1* 所示，我们使用了一个基于 ESP8266 的 WeMos D1 mini 开发板，整个项目在 [*第 4 章*](B19752_04.xhtml#_idTextAnchor085)
    中进行了演示。本章使用不同类型的板子的目的是为了展示在不同类型的开发板之间同步云变量是多么容易。在下一节中，我们将详细讨论项目架构。
- en: Project architecture
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目架构
- en: In this section, we will discuss how cloud variable synchronization works. As
    shown in *Figure 7**.1*, we have taken the project from [*Chapter 4*](B19752_04.xhtml#_idTextAnchor085).
    In that project, we set up a device that monitors outdoor temperature, humidity,
    and air quality. Now, we want to share the outdoor temperature with our indoor
    device, which is the MKR Wi-Fi 1010\. To make things easier, we just used LEDs
    with MKR Wi-Fi 1010, which is shown in *Figure 7**.2*. Our indoor device will
    turn on the red LED if the temperature exceeds the specified threshold and turn
    on the green LED if it comes down below a specified threshold. You can also use
    relays instead of LEDs to control the heating and cooling system of your room.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论云变量同步的工作原理。如 *图 7**.1* 所示，我们是从 [*第 4 章*](B19752_04.xhtml#_idTextAnchor085)
    中的项目开始的。在那个项目中，我们设置了一个监控户外温度、湿度和空气质量的设备。现在，我们希望将户外温度与我们的室内设备（MKR Wi-Fi 1010）共享。为了使事情更简单，我们只使用了
    MKR Wi-Fi 1010 和 LED，如 *图 7**.2* 所示。我们的室内设备将在温度超过指定阈值时打开红色 LED，如果温度低于指定阈值则打开绿色
    LED。您也可以使用继电器代替 LED 来控制您房间的加热和冷却系统。
- en: We already have one complete thing in Arduino IoT Cloud that is working, but
    now we need to create another thing for MKR Wi-Fi 1010 named **Indoor MKR Wi-Fi
    1010** with a bunch of cloud variables. We will then sync the temperature cloud
    variable of the Indoor MKR Wi-Fi 1010 thing with the Sense the Environment thing,
    which was created in [*Chapter 4*](B19752_04.xhtml#_idTextAnchor085).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在 Arduino IoT Cloud 中有一个正在运行的项目，但现在我们需要为 MKR Wi-Fi 1010 创建另一个项目，命名为 **室内
    MKR Wi-Fi 1010**，并附带一系列云变量。然后我们将室内 MKR Wi-Fi 1010 项目的温度云变量与在 [*第 4 章*](B19752_04.xhtml#_idTextAnchor085)
    中创建的“感知环境”项目同步。
- en: In the preceding sections, we discussed the module and development board in
    detail. Now, it’s time to begin the exercise. In hardware development, before
    we start working with sensors and development boards, we need to develop design
    concepts to get a better understanding of how things will connect. There is a
    lot of software available for designing and developing design concepts for an
    electronics project, but in this case, we will use **Fritzing**.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们详细讨论了模块和开发板。现在，是时候开始练习了。在硬件开发中，在我们开始使用传感器和开发板之前，我们需要开发设计概念，以便更好地理解事物如何连接。有许多软件可用于设计电子项目的概念和开发，但在此情况下，我们将使用**Fritzing**。
- en: In the following subsection, we will talk about the schematics of a project
    while explaining how to connect pins with a development board.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下子节中，我们将讨论项目的原理图，同时解释如何将引脚与开发板连接。
- en: Schematics design and assembly
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原理图设计和组装
- en: The purpose of schematic design is to get a clear understanding of how sensors/LEDs
    will connect with a development board. This helps engineers to develop a prototype
    on a breadboard or a **Veroboard**. *Figure 7**.2* shows a schematic diagram of
    how LEDs are connected to the MKR Wi-Fi 1010 development board.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 原理图设计的目的是清楚地了解传感器/LED如何与开发板连接。这有助于工程师在面包板或**Veroboard**上开发原型。*图7*.2显示了LED如何连接到MKR
    Wi-Fi 1010开发板的原理图。
- en: '![Figure 7.2 – MKR Wi-Fi 1010 and LEDs schematic diagram](img/B19752_07_02.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图7.2 – MKR Wi-Fi 1010和LEDs原理图](img/B19752_07_02.jpg)'
- en: Figure 7.2 – MKR Wi-Fi 1010 and LEDs schematic diagram
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.2 – MKR Wi-Fi 1010和LEDs原理图
- en: 'In *Figure 7**.2*, we have one common ground from MKR Wi-Fi 1010, which is
    shared with both LEDs using a yellow line. The red LED is connected to MKR Wi-Fi
    1010 by using *Pin #6* and the green LED is using *Pin #7* of the MKR Wi-Fi 1010
    development board.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图7*.2中，我们有一个来自MKR Wi-Fi 1010的共同地线，它通过黄色线与两个LED共享。红色LED通过*引脚#6*连接到MKR Wi-Fi
    1010，绿色LED使用MKR Wi-Fi 1010开发板的*引脚#7*。
- en: In this section, we have discussed how cloud sync works and how we connect the
    LEDs with MKR Wi-Fi 1010\. In the next section, we will set up the Thing for MKR
    Wi-Fi 1010 as well as device association and network configuration; and, most
    importantly, we will create the cloud variables and sync them with other things.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了云同步的工作原理以及如何将LED与MKR Wi-Fi 1010连接。在下一节中，我们将设置MKR Wi-Fi 1010的事物以及设备关联和网络配置；最重要的是，我们将创建云变量并将它们与其他事物同步。
- en: Setting up a Thing
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置事物
- en: 'After setting up the hardware, it’s time to set up a thing in Arduino IoT Cloud.
    For this project, we need three cloud variables. Later on, we will associate MKR
    Wi-Fi 1010 with our thing. Next, we will perform the Wi-Fi network configuration.
    *Figure 7**.3* shows a complete overview of the Thing:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置硬件之后，是时候在Arduino IoT Cloud中设置事物了。对于这个项目，我们需要三个云变量。稍后，我们将把MKR Wi-Fi 1010与我们的事物关联起来。接下来，我们将执行Wi-Fi网络配置。*图7*.3显示了事物的完整概述：
- en: '![Figure 7.3 – Indoor device MKR Wi-Fi 1010 thing setup](img/B19752_07_03.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图7.3 – 室内设备MKR Wi-Fi 1010事物设置](img/B19752_07_03.jpg)'
- en: Figure 7.3 – Indoor device MKR Wi-Fi 1010 thing setup
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.3 – 室内设备MKR Wi-Fi 1010事物设置
- en: 'Set up a new thing called `Indoor Device MKR Wi-Fi 1010`. In *Figure 7**.3*,
    the following steps are marked with red boxes. Follow these steps to create variables,
    associate a device, configure the network, and, finally, write the code:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 设置一个名为“室内设备MKR Wi-Fi 1010”的新事物。在*图7*.3中，以下步骤用红色方框标记。按照这些步骤创建变量、关联设备、配置网络，最后编写代码：
- en: Firstly, we need to set up three cloud variables for the green LED, the red
    LED, and temperature (which will be synced with another thing cloud variable).
    A more detailed discussion of cloud variables is in the upcoming section.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要为绿色LED、红色LED和温度（将与另一个云变量同步）设置三个云变量。关于云变量的更详细讨论将在下一节中介绍。
- en: After that, we need to associate the device with the Thing. In the current project,
    we are using MKR Wi-Fi 1010\. More details are available in the *Associating a
    device* subsection of this chapter.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们需要将设备与事物关联。在当前项目中，我们使用MKR Wi-Fi 1010。更多细节请参阅本章的*关联设备*子节。
- en: After attaching the device, we need to make the device network-ready by providing
    an SSID and a password for the Wi-Fi network. Just click on the **Configure**
    button (if the network is empty, then you will see the **Configure** button. Otherwise,
    you will see the **Change** button) and you will see the popup for network settings.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在连接设备后，我们需要通过提供 Wi-Fi 网络的 SSID 和密码来使设备网络就绪。只需点击**配置**按钮（如果网络为空，则您将看到**配置**按钮。否则，您将看到**更改**按钮）并您将看到网络设置的弹出窗口。
- en: We have discussed the process of setting up a thing, and all these steps will
    be explained in detail in the proceeding subsections. We will start with the *Cloud
    variables* subsection, where we will create cloud variables for our thing as well
    as synchronize them.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了设置事物的过程，所有这些步骤将在后续小节中详细解释。我们将从**云变量**小节开始，在那里我们将为我们的事物创建云变量以及同步它们。
- en: Cloud variables
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 云变量
- en: The following table describes all the properties of the cloud variables that
    we need to configure. For this project, we need three cloud variables, as listed
    in *Table 7.1*. Next, make sure each variable matches the **Declaration** in the
    table; otherwise, you need to modify the example code according to your naming.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 下表描述了我们需要配置的所有云变量的属性。对于这个项目，我们需要三个云变量，如*表 7.1*中所示。接下来，请确保每个变量与表中的**声明**相匹配；否则，您需要根据您的命名修改示例代码。
- en: When we created the cloud variables, we made the permission read-only for all
    variables except `Temperature` because we need this cloud variable to sync with
    the `Temperature` cloud variable of the Sense the Environment thing in [*Chapter
    4*](B19752_04.xhtml#_idTextAnchor085). That’s why this variable’s permissions
    are set to **Read & Write**. **Update Policy** is set to **On change** for all
    variables.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建云变量时，除了`Temperature`之外，我们为所有变量设置了只读权限，因为我们需要这个云变量与[*第 4 章*](B19752_04.xhtml#_idTextAnchor085)中“感知环境”事物的`Temperature`云变量同步。这就是为什么这个变量的权限被设置为**读/写**。**更新策略**对所有变量都设置为**变更时**。
- en: '| **S#** | **Variable Name** | **Variable Type** | **Declaration** | **Permission**
    | **Update** **Policy** |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| **S#** | **变量名** | **变量类型** | **声明** | **权限** | **更新策略** |'
- en: '| 1 | `GreenLed` | Boolean | `greenLed` | Read Only | On change |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| 1 | `GreenLed` | 布尔值 | `greenLed` | 只读 | 变更时 |'
- en: '| 2 | `RedLed` | Boolean | `redLed` | Read Only | On change |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| 2 | `RedLed` | 布尔值 | `redLed` | 只读 | 变更时 |'
- en: '| 3 | `Temperature` | Temperature sensor | `Temperature` | Read & Write | On
    change |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 3 | `Temperature` | 温度传感器 | `Temperature` | 读/写 | 变更时 |'
- en: Table 7.1 – Cloud variables list for things
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 表 7.1 – 事物云变量列表
- en: Use *Table 7.1* to create the `GreenLed` and `RedLed` cloud variables. The creation
    of the `Temperature` cloud variable will be discussed step by step; we are going
    to sync this cloud variable with the Thing cloud variable from [*Chapter 4*](B19752_04.xhtml#_idTextAnchor085).
    *Figure 7**.4* shows the first step of creating the `Temperature` cloud variable.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**表 7.1**创建`GreenLed`和`RedLed`云变量。`Temperature`云变量的创建将分步骤讨论；我们将同步此云变量与[*第
    4 章*](B19752_04.xhtml#_idTextAnchor085)中的事物云变量。*图 7**.4*显示了创建`Temperature`云变量的第一步。
- en: '![Figure 7.4 – Temperature cloud variable step 1](img/B19752_07_04.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.4 – 温度云变量步骤 1](img/B19752_07_04.jpg)'
- en: Figure 7.4 – Temperature cloud variable step 1
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.4 – 温度云变量步骤 1
- en: In this step, we will assign a name to the cloud variable, which is shown in
    *Figure 7**.4*. Next, we will click on **Sync with other Things**. This will open
    a new popup, which is shown in *Figure 7**.5*.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一步，我们将为云变量分配一个名称，如*图 7**.4*所示。接下来，我们将点击**与其他事物同步**。这将打开一个新的弹出窗口，如*图 7**.5*所示。
- en: '![Figure 7.5 – Temperature cloud variable step 2](img/B19752_07_05.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.5 – 温度云变量步骤 2](img/B19752_07_05.jpg)'
- en: Figure 7.5 – Temperature cloud variable step 2
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.5 – 温度云变量步骤 2
- en: In this popup, you will find a complete list of cloud variables across all the
    things that are available in your Arduino IoT Cloud. To prevent complexity and
    errors, select a specific thing. We selected the **Sense the Environment** thing
    from the dropdown, which is marked by a red box in *Figure 7**.5*. After selecting
    the Thing from drop down, you will only see the associated cloud variable of that
    thing in popup. Click on the **Temperature** cloud variable checkbox and then
    click on the **SYNCHRONIZE VARIABLES** button. *Figure 7**.6* shows the final
    popup, where you will find the final status of the cloud variable sync status.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在此弹出窗口中，您将找到所有在您的Arduino IoT Cloud中可用的云变量的完整列表。为了防止复杂性和错误，请选择一个特定的事物。我们从下拉菜单中选择了**感知环境**事物，这在*图
    7.5*中被标记为红色框。在选择下拉菜单中的事物后，您将在弹出窗口中仅看到该事物的关联云变量。点击**温度**云变量复选框，然后点击**同步变量**按钮。*图
    7.6*显示了最终的弹出窗口，其中您将找到云变量同步状态的最终状态。
- en: '![Figure 7.6 – Temperature cloud variable step 3](img/B19752_07_06.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.6 – 温度云变量步骤 3](img/B19752_07_06.jpg)'
- en: Figure 7.6 – Temperature cloud variable step 3
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.6 – 温度云变量步骤 3
- en: In *Figure 7**.6*, you will see the status of the cloud variable sync status,
    which is marked by a red box. Remember that for sync variables, you must choose
    **Read & Write** permission or it will not work properly. Then save the cloud
    variable, and we are good to go. After going through these steps, you should have
    an idea of how easy it is to sync cloud variables across multiple things within
    seconds by just using a simple interface.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图 7.6*中，您将看到云变量同步状态的状态，它被标记为红色框。请记住，对于同步变量，您必须选择**读/写**权限，否则它将无法正常工作。然后保存云变量，我们就可以出发了。完成这些步骤后，您应该对如何通过使用简单的界面在几秒钟内同步多个事物中的云变量有一个大致的了解。
- en: Important note
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Remember that for sync variables, you must choose the **Read & Write** permission
    or it will not work properly.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，对于同步变量，您必须选择**读/写**权限，否则它将无法正常工作。
- en: In this section, we discussed the types of cloud variables that are required
    for this project. We listed three cloud variables of different types and also
    discussed in detail how to sync the cloud variable from one thing to another thing.
    Next, we are going to associate the MKR Wi-Fi 1010 with the Thing.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了本项目所需的云变量类型。我们列出了三种不同类型的云变量，并详细讨论了如何从一个事物同步云变量到另一个事物。接下来，我们将把 MKR
    Wi-Fi 1010 与事物关联起来。
- en: Associating a device
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关联设备
- en: 'After creating the variables, it’s time to add the device and associate it
    with the Thing:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建变量后，是时候添加设备并将其与事物关联了：
- en: 'Before adding the device, connect the development board to the computer and
    open the **Arduino Create Agent** application. *Figure 7**.7* shows a popup where
    we have two options: either select the existing device for association or set
    up the new device if it is not available in the list:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在添加设备之前，将开发板连接到计算机并打开**Arduino Create Agent**应用程序。*图 7.7*显示了弹出窗口，其中我们有两个选项：要么选择现有设备进行关联，要么如果列表中没有可用，则设置新设备：
- en: '![Figure 7.7 – Associate device – select device](img/B19752_07_07.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.7 – 关联设备 – 选择设备](img/B19752_07_07.jpg)'
- en: Figure 7.7 – Associate device – select device
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.7 – 关联设备 – 选择设备
- en: In our case, we already have different devices in the portal, but we want to
    add a new MKR Wi-Fi 1010\. Just click on **SET UP NEW DEVICE** to configure a
    new device in the account.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，我们已经在门户中有了不同的设备，但我们要添加一个新的 MKR Wi-Fi 1010。只需点击**设置新设备**来配置账户中的新设备。
- en: Next, you will see the three options in the popup. The first option is **Arduino
    board** and the second option is **Third party device**. The third option is **Any
    Device**, which is for non-compatible devices. It means you can use any type of
    Arduino device, as well as third-party devices with Arduino IoT Cloud, which supports
    Python, MicroPython, and JavaScript.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您将在弹出窗口中看到三个选项。第一个选项是**Arduino 板**，第二个选项是**第三方设备**。第三个选项是**任何设备**，这是用于非兼容设备的。这意味着您可以使用任何类型的Arduino设备，以及支持Python、MicroPython和JavaScript的Arduino
    IoT Cloud第三方设备。
- en: '![Figure 7.8 – Choosing a development device](img/B19752_07_08.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.8 – 选择开发设备](img/B19752_07_08.jpg)'
- en: Figure 7.8 – Choosing a development device
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.8 – 选择开发设备
- en: Select the right option from the popup for your project. For this example, click
    on **Arduino board** because in this chapter, we are using an MKR Wi-Fi 1010 board.
    Before adding the device, make sure **Arduino Create Agent** is running on your
    machine. *Figure 7**.9* shows that Arduino IoT Cloud detected the MKR Wi-Fi 1010
    device.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从弹出窗口中选择适合您项目的正确选项。在本例中，点击**Arduino板**，因为在本章中，我们使用的是MKR Wi-Fi 1010板。在添加设备之前，请确保**Arduino
    Create Agent**在您的机器上运行。*图7.9*显示Arduino IoT Cloud已检测到MKR Wi-Fi 1010设备。
- en: '![Figure 7.9 – Device found](img/B19752_07_09.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图7.9 – 设备找到](img/B19752_07_09.jpg)'
- en: Figure 7.9 – Device found
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.9 – 设备找到
- en: When the popup displays that it has found the device, just click on the **CONFIGURE**
    button, which will take you to the next configuration step, where you will provide
    the name of the device, and later, another popup will perform some configuration
    on your development board and associate the development board with Arduino IoT
    Cloud. Once this is done, a successful device association message will be displayed.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当弹出窗口显示已找到设备时，只需点击**配置**按钮，这将带您进入下一个配置步骤，在那里您将提供设备的名称，稍后，另一个弹出窗口将在您的开发板上执行一些配置并将开发板与Arduino
    IoT Cloud关联。一旦完成，将显示成功的设备关联消息。
- en: When the device is configured successfully, you will see a popup saying congratulations.
    Just click on the **DONE** button and your device will be associated with your
    thing.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当设备配置成功时，您将看到一个弹出窗口表示祝贺。只需点击**完成**按钮，您的设备将与您的“物”关联。
- en: In this section, we associated the MKR Wi-Fi 1010 device with our thing, and
    in the upcoming sections, we will talk about the network and code.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将MKR Wi-Fi 1010设备与我们的“物”关联，在接下来的章节中，我们将讨论网络和代码。
- en: Network
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络
- en: 'After attaching the device to the Thing, we can see that the device is offline.
    To bring it online, we need to provide Wi-Fi details. The following screenshot
    shows the network configuration popup, which only consists of two fields:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 将设备连接到“物”之后，我们可以看到设备处于离线状态。为了将其上线，我们需要提供Wi-Fi详细信息。以下截图显示了网络配置弹出窗口，它只包含两个字段：
- en: '![Figure 7.10 – Network configuration](img/B19752_07_10.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图7.10 – 网络配置](img/B19752_07_10.jpg)'
- en: Figure 7.10 – Network configuration
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.10 – 网络配置
- en: On the Thing page, shown in *Figure 7**.10*, on the **Network** tab, click on
    the **CONFIGURE** button, which will take you to the **Configure network** popup
    with two fields, **Wi-Fi Name** and **Password**. Type the Wi-Fi SSID and password,
    and then click on the **SAVE** button.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图7.10*所示的“物”页面上，在**网络**选项卡中，点击**配置**按钮，这将带您进入包含两个字段**Wi-Fi名称**和**密码**的**配置网络**弹出窗口。输入Wi-Fi
    SSID和密码，然后点击**保存**按钮。
- en: In this section, we have configured the network for our device, which is MKR
    Wi-Fi 1010\. In the next subsection, we will create the cloud variable.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们已经为我们的设备配置了网络，该设备是MKR Wi-Fi 1010。在下一小节中，我们将创建云变量。
- en: Coding
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编码
- en: This chapter’s code is available in the official GitHub repository for the book.
    Download `Indoor_Device_MKR_Wi-Fi_1010_sep07a.zip` and import it into your Arduino
    Web Editor.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可在本书的官方GitHub仓库中找到。下载`Indoor_Device_MKR_Wi-Fi_1010_sep07a.zip`并将其导入到您的Arduino
    Web Editor中。
- en: 'You can download the code and put it into your thing by navigating to the `RLED`
    and `GLED` in the following snippet and assigned them pin numbers `6` and `7`,
    respectively:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过导航到以下片段中的`RLED`和`GLED`并将它们分别分配为引脚编号`6`和`7`来下载代码并将其放入您的设备中：
- en: '[PRE0]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, we initialize all the required pins and methods in the `setup()` method.
    Specifically, we are changing the modes of the pins to output by using the `pinMode()`
    method:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们在`setup()`方法中初始化所有必需的引脚和方法。具体来说，我们使用`pinMode()`方法将引脚模式更改为输出：
- en: '[PRE1]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The next important method is `onTemperatureChange()`. Whenever the value of
    the `Temperature` cloud variable changes on the Sense the Environment thing, it
    will be automatically synced with the `Temperature` cloud variable of the Indoor
    Device MKR Wi-Fi 1010 thing. Then, when the value changes, this method will be
    called:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个重要方法是`onTemperatureChange()`。每当Sense the Environment设备上的`Temperature`云变量值发生变化时，它将自动与室内设备MKR
    Wi-Fi 1010设备的`Temperature`云变量同步。然后，当值发生变化时，此方法将被调用：
- en: '[PRE2]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the preceding code snippet, we have defined the manual threshold for `temperature`.
    If the `temperature` value is greater than 30 degrees Celsius, then assign `redLed`
    the `true` value and `greenLed` the `false` value; otherwise, assign `redLed`
    with `false` and `greenLed` with `true`. At the end of the method, we are controlling
    the LEDs according to the `redLed` and `greenLed` values. Here, you can use relays
    instead of LEDs to control the heating and cooling system of your indoor environment.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们已定义了`temperature`的手动阈值。如果`temperature`值大于30摄氏度，则将`redLed`赋值为`true`，将`greenLed`赋值为`false`；否则，将`redLed`赋值为`false`，将`greenLed`赋值为`true`。在方法末尾，我们根据`redLed`和`greenLed`的值控制LED。在这里，你可以使用继电器而不是LED来控制室内环境的加热和冷却系统。
- en: Upload the code to the device and you will see that either the red or green
    LED will be turned on, depending on the temperature. After successfully uploading
    data to the cloud, it’s time to set up a beautiful dashboard for web and mobile
    for the users. This time, we will create a dashboard that will show the values
    of two things’ cloud variables.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 将代码上传到设备，你会看到红色或绿色LED之一会被点亮，这取决于温度。在成功将数据上传到云后，是时候为用户设置一个漂亮的仪表盘，用于网页和移动端。这次，我们将创建一个仪表盘，将显示两个事物的云变量值。
- en: Important note
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: If you used different *naming* in the variable declaration, then update the
    code according to your naming scheme. But it’s better if you first follow all
    the steps according to the book and later change the cloud variable names and
    modify your code.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用了不同的*命名*在变量声明中，那么根据你的命名方案更新代码。但最好是首先按照书中的所有步骤进行，然后再更改云变量名称并修改你的代码。
- en: Never try to use the `delay()` method, which will create a block for the `ArduinoCloud.update()`
    method. Also, don’t put the code in an end-of-loop method as it will create a
    delay in the pulse sensor readings.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 永远不要尝试使用`delay()`方法，这将创建一个阻塞`ArduinoCloud.update()`方法的块。也不要将代码放在循环末尾的方法中，因为它会在脉冲传感器读数中创建延迟。
- en: In this section, we have explored the code, and we are using the `Temperature`
    cloud variable, which is synced with the `Temperature` cloud variable in [*Chapter
    4*](B19752_04.xhtml#_idTextAnchor085), and we are turning on and off the LEDs
    according to temperature value. In the next section, we will explore how to display
    the cloud variables of multiple things on a single dashboard.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了代码，并使用与[*第4章*](B19752_04.xhtml#_idTextAnchor085)中的`Temperature`云变量同步的`Temperature`云变量，根据温度值开启和关闭LED。在下一节中，我们将探讨如何在单个仪表盘上显示多个事物的云变量。
- en: Implementation of GUI using synchronized cloud variables
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用同步云变量实现GUI
- en: After uploading the code to the device, it’s time to set up a dashboard for
    web and mobile to visualize the data with different widgets. *Figure 7**.11* demonstrates
    the visualization of readings with different widgets.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在将代码上传到设备后，是时候设置一个仪表盘，用于网页和移动端，以使用不同的小部件可视化数据。“图7**.11**”展示了使用不同小部件的读数可视化。
- en: '![Figure 7.11 – Thing dashboard](img/B19752_07_11.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图7.11 – 事物仪表盘](img/B19752_07_11.jpg)'
- en: Figure 7.11 – Thing dashboard
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.11 – 事物仪表盘
- en: We have three different readings, **Temperature**, **Humidity**, and **Air Quality**,
    from the Sense the Environment thing and two readings, **RedLED** and **GreenLED**,
    from the Indoor Device MKR Wi-Fi 1010 thing. As the temperature from the Indoor
    Device MKR Wi-Fi 1010 thing is synced with the Sense the Environment thing, we
    are only displaying one temperature value here. For every reading, we use different
    widget controls to demonstrate how they all work. But for the LED status, we used
    an LED widget control.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有三个不同的读数，**温度**、**湿度**和**空气质量**来自“感知环境”事物，以及来自“室内设备MKR Wi-Fi 1010”事物的两个读数，**红LED**和**绿LED**。由于室内设备MKR
    Wi-Fi 1010事物的温度与“感知环境”事物同步，所以我们在这里只显示一个温度值。对于每个读数，我们使用不同的小部件控制来展示它们是如何工作的。但对于LED状态，我们使用了LED小部件控制。
- en: The main thing to note about this dashboard is that we are using values from
    two different things but the same dashboard to visualize the values. This example
    demonstrates that we can display the values from multiple things on a single dashboard.
    *Figure 7**.12* shows how easy it is to link any cloud variable to a widget control.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这个仪表盘需要注意的主要事项是，我们正在使用来自两个不同事物但相同仪表盘的值来可视化这些值。这个例子演示了我们可以在一个仪表盘上显示多个事物的值。“图7**.12**”展示了将任何云变量链接到小部件控制是多么容易。
- en: '![Figure 7.12 – Linking a cloud variable to a widget control](img/B19752_07_12.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图7.12 – 将云变量链接到小部件控制](img/B19752_07_12.jpg)'
- en: Figure 7.12 – Linking a cloud variable to a widget control
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.12 – 将云变量链接到小部件控制
- en: '*Figure 7**.12* shows how to link the **RedLed** cloud variable from **Indoor
    Device MKR Wi-Fi 1010** to a widget. But, as you can see, you can select any cloud
    variable from any thing and link it with the widget control. So, we can see how
    the Arduino IoT Cloud dashboard allows us to create a single dashboard for multiple
    things easily.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '*图7.12* 展示了如何将来自**室内设备MKR Wi-Fi 1010**的**RedLed**云变量链接到一个小部件。但是，正如你所看到的，你可以从任何事物中选择任何云变量并将其与小部件控制链接。因此，我们可以看到Arduino
    IoT Cloud仪表板如何使我们能够轻松地为多个事物创建单个仪表板。'
- en: In this section, we discussed how to set up a dashboard that contains widgets
    attached to multiple things. In the next section, we will discuss limits and cloud
    variable synchronization in detail.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了如何设置包含多个事物附加小部件的仪表板。在下一节中，我们将详细讨论限制和云变量同步。
- en: Limitations of cloud variable/property synchronization
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云变量/属性同步的限制
- en: 'Arduino IoT Cloud offers a platform for IoT device management and communication,
    including TTC between devices. While it provides valuable features for connecting
    and managing IoT devices, there are some drawbacks to consider:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino IoT Cloud提供了一个物联网设备管理和通信的平台，包括设备间的TTC。虽然它为连接和管理物联网设备提供了有价值的特性，但也有一些缺点需要考虑：
- en: '**Latency**: TTC can introduce latency, which is the delay between when a change
    is made to a variable on one device and when it is reflected on the other device.
    This can be a problem for applications that require very low latency, such as
    controlling a robot in real time.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**延迟**: TTC可能会引入延迟，这是在一个设备上更改变量时与它在另一个设备上反映之间的延迟。这对于需要非常低延迟的应用程序来说可能是一个问题，例如实时控制机器人。'
- en: '**Offline device challenges**: Devices that are temporarily offline may miss
    important messages or updates from other devices. Ensuring that devices can catch
    up on missed communications when they reconnect to the network can be complex
    to implement.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**离线设备挑战**: 暂时离线的设备可能会错过来自其他设备的重要消息或更新。确保设备在网络重新连接时能够赶上错过的通信可能很复杂。'
- en: '**Dependency on internet connectivity**: Arduino IoT Cloud relies on an internet
    connection for communication between devices. If the internet connection goes
    down, the devices may lose their ability to communicate with each other.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**依赖互联网连接**: Arduino IoT Cloud依赖于互联网连接来实现设备间的通信。如果互联网连接中断，设备可能会失去相互通信的能力。'
- en: '**Limited functionality**: TTC is not as flexible as some other IoT communication
    protocols. For example, you cannot use TTC to send arbitrary data between devices.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**功能有限**: TTC不如一些其他物联网通信协议灵活。例如，你不能使用TTC在设备之间发送任意数据。'
- en: '**Dependency on the cloud**: TTC relies on Arduino IoT Cloud to function. This
    means that if the cloud is unavailable, your TTC connections will not work.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**依赖云服务**: TTC依赖于Arduino IoT Cloud才能运行。这意味着如果云服务不可用，你的TTC连接将无法工作。'
- en: When considering Arduino IoT Cloud for TTC in your IoT project, it’s essential
    to weigh these drawbacks against the platform’s benefits and assess whether it
    aligns with your specific project requirements and constraints. Additionally,
    exploring alternative IoT platforms and communication solutions may be necessary
    to ensure the best fit for your needs.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在物联网项目中考虑使用Arduino IoT Cloud进行TTC时，必须权衡这些缺点与平台的优势，并评估它是否符合你特定的项目需求和限制。此外，探索替代的物联网平台和通信解决方案可能是必要的，以确保最适合你的需求。
- en: In this section, we have discussed in detail the limitations of Arduino IoT
    Cloud TTC. In the next section, we will explore how you can use TTC for different
    types of cloud variables.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们详细讨论了Arduino IoT Cloud TTC的限制。在下一节中，我们将探讨如何为不同类型的云变量使用TTC。
- en: What next?
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接下来是什么？
- en: We still have a lot of options available to explore, but now it’s your turn
    to use different sensors and development boards to do some more experiments and
    learn from them. In this chapter, we have only used one `Temperature` cloud variable
    synced between two things, but you can try using this feature to sync multiple
    cloud variables with multiple things. Next, create a dashboard for multiple things
    to visualize all the values in one place. We configured simple LEDs to turn on
    and off according to the temperature, but you can also use relays to control the
    heating/cooling system of your indoor home/office and warehouse environment, or
    you can create an alarm in case of a temperature increase using this TTC feature.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有很多选项可供探索，但现在轮到您使用不同的传感器和开发板进行更多实验并从中学习。在本章中，我们只使用了一个在两个事物之间同步的`温度`云变量，但您可以尝试使用此功能同步多个云变量与多个事物。接下来，为多个事物创建一个仪表板，以便在一个地方可视化所有值。我们配置了简单的LED灯根据温度开关，但您也可以使用继电器来控制室内家庭/办公室和仓库环境的供暖/冷却系统，或者您可以使用此TTC功能在温度升高时创建一个警报。
- en: Summary
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored D2D communication and the benefits of Arduino IoT
    Cloud for thing-to-thing communication. We discussed how to develop a solution
    for thing-to-thing communication. We also explored how easy it is to sync the
    cloud variable with other things just using a GUI. We set up a dashboard, where
    we linked the widget controls with multiple thing cloud variables. Finally, we
    discussed the limits of Arduino IoT Cloud thing-to-thing communication in detail.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了点对点通信以及Arduino IoT Cloud在物与物通信中的优势。我们讨论了如何开发物与物通信的解决方案。我们还探讨了仅使用图形用户界面同步云变量与其他事物的简便性。我们设置了一个仪表板，其中将小部件控件与多个物云变量相连接。最后，我们详细讨论了Arduino
    IoT Cloud在物与物通信中的限制。
- en: In the next chapter, we are going to explore how to use the Arduino IoT Cloud
    SDK. This chapter is for developers who are eager to learn how to use Arduino
    IoT Cloud programmatically and develop custom solutions using Arduino IoT Cloud
    or integrate Arduino IoT Cloud with third-party platforms.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何使用Arduino IoT Cloud SDK。本章是为那些渴望学习如何使用Arduino IoT Cloud编程和开发自定义解决方案的开发者而准备的，这些解决方案可以使用Arduino
    IoT Cloud或将其与第三方平台集成。
