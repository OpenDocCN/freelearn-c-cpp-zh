["```cpp\nQT += core gui location qml quickwidgets \n```", "```cpp\nimport QtQuick 2.0 \nimport QtLocation 5.3 \nimport QtPositioning 5.0 \n```", "```cpp\nItem \n{ \n    Plugin \n    { \n        id: mapPlugin \n        name: \"osm\" \n    } \n\n    Map \n    { \n        id: map \n        anchors.fill: parent \n        plugin: mapPlugin \n        center: QtPositioning.coordinate(40.7264175,-73.99735) \n        zoomLevel: 14 \n    } \n} \n```", "```cpp\nItem \n{ \n    id: window \n\n    Plugin \n    { \n        id: mapPlugin \n        name: \"osm\" \n    } \n\n    Image \n    { \n        id: icon \n        source: \"qrc:///images/map-marker-icon.png\" \n        sourceSize.width: 50 \n        sourceSize.height: 50 \n    } \n\n    MapQuickItem \n    { \n        id: marker \n        anchorPoint.x: marker.width / 4 \n        anchorPoint.y: marker.height \n        coordinate: QtPositioning.coordinate(40.7274175,-73.99835) \n\n        sourceItem: icon \n    } \n\n    Map \n    { \n        id: map \n        anchors.fill: parent \n        plugin: mapPlugin \n        center: QtPositioning.coordinate(40.7264175,-73.99735) \n        zoomLevel: 14 \n\n        Component.onCompleted: \n        { \n            map.addMapItem(marker) \n        } \n    } \n} \n```", "```cpp\nimport QtQuick 2.0 \nimport QtLocation 5.3 \n\nMapQuickItem \n{ \n    id: marker \n    anchorPoint.x: marker.width / 4 \n    anchorPoint.y: marker.height \n    sourceItem: Image \n    { \n        id: icon \n        source: \"qrc:///images/map-marker-icon.png\" \n        sourceSize.width: 50 \n        sourceSize.height: 50 \n    } \n} \n```", "```cpp\nItem \n{ \n    id: window \n\n    Plugin \n    { \n        id: mapPlugin \n        name: \"osm\" \n    } \n\n    function addMarker(latitude, longitude) \n    { \n        var component = Qt.createComponent(\"qrc:///qml/marker.qml\") \n        var item = component.createObject(window, { coordinate: \n        QtPositioning.coordinate(latitude, longitude) }) \n        map.addMapItem(item) \n    } \n```", "```cpp\nMap \n{ \n    id: map \n    anchors.fill: parent \n    plugin: mapPlugin \n    center: QtPositioning.coordinate(40.7264175,-73.99735) \n    zoomLevel: 14 \n\n    Component.onCompleted: \n    { \n        addMarker(40.7274175,-73.99835) \n        addMarker(40.7276432,-73.98602) \n        addMarker(40.7272175,-73.98935) \n    } \n} \n```", "```cpp\nimport QtQuick 2.0 \nimport QtQuick.Controls 2.0 \nimport QtLocation 5.3 \n```", "```cpp\nMapQuickItem \n{ \n    id: marker \n    anchorPoint.x: marker.width / 4 \n    anchorPoint.y: marker.height \n    property string labelText \n```", "```cpp\nsourceItem: Item \n{ \n        Image \n        { \n            id: icon \n            source: \"qrc:///images/map-marker-icon.png\" \n            sourceSize.width: 50 \n            sourceSize.height: 50 \n        } \n\n        Rectangle \n        { \n            id: tag \n            anchors.centerIn: label \n            width: label.width + 4 \n            height: label.height + 2 \n            color: \"black\" \n        } \n\n        Label \n        { \n            id: label \n            anchors.centerIn: parent \n            anchors.horizontalCenterOffset: 20 \n            anchors.verticalCenterOffset: -12 \n            font.pixelSize: 16 \n            text: labelText \n            color: \"white\" \n        } \n} \n```", "```cpp\nfunction addMarker(name, latitude, longitude) \n{ \n        var component = Qt.createComponent(\"qrc:///qml/marker.qml\") \n        var item = component.createObject(window, { coordinate: QtPositioning.coordinate(latitude, longitude), labelText: name }) \n        map.addMapItem(item) \n} \n```", "```cpp\nComponent.onCompleted: \n{ \n   addMarker(\"Restaurant\", 40.7274175,-73.99835) \n   addMarker(\"My Home\", 40.7276432,-73.98602) \n   addMarker(\"School\", 40.7272175,-73.98935) \n} \n```", "```cpp\n#include <QQuickItem> \n#include <QQuickView> \n```", "```cpp\nMainWindow::MainWindow(QWidget *parent) : \n   QMainWindow(parent), \n   ui(new Ui::MainWindow) \n{ \n   ui->setupUi(this); \n\n QObject* target = qobject_cast<QObject*>(ui->quickWidget->rootObject()); \n   QString functionName = \"addMarker\"; \n\n   QMetaObject::invokeMethod(target, functionName, Qt::AutoConnection, Q_ARG(QVariant, \"Testing\"), Q_ARG(QVariant, 40.7274175), Q_ARG(QVariant, -73.99835)); \n} \n```", "```cpp\nimport QtQuick 2.0 \nimport QtLocation 5.3 \n\nMapCircle \n{ \n    property int borderWidth \n    border.width: borderWidth \n} \n```", "```cpp\nimport QtQuick 2.0 \nimport QtLocation 5.3 \n\nMapRectangle \n{ \n    property int borderWidth \n    border.width: borderWidth \n} \n```", "```cpp\nimport QtQuick 2.0 \nimport QtLocation 5.3 \n\nMapPolygon \n{ \n    property int borderWidth \n    border.width: borderWidth \n} \n```", "```cpp\nItem \n{ \n    id: window \n\n    Plugin \n    { \n        id: mapPlugin \n        name: \"osm\" \n    } \n\n    function addCircle(latitude, longitude, radius, color, borderWidth) \n    { \n       var component = Qt.createComponent(\"qrc:///qml/circle.qml\") \n       var item = component.createObject(window, { center: \n       QtPositioning.coordinate(latitude, longitude), radius: radius, \n       color: color, borderWidth: borderWidth }) \n       map.addMapItem(item) \n    } \n\n    function addRectangle(startLat, startLong, endLat, endLong, color, \n    borderWidth) \n    { \n        var component = Qt.createComponent(\"qrc:///qml/rectangle.qml\") \n        var item = component.createObject(window, { topLeft: \n       QtPositioning.coordinate(startLat, startLong), bottomRight: \n       QtPositioning.coordinate(endLat, endLong), color: color, \n       borderWidth: borderWidth }) \n        map.addMapItem(item) \n    } \n\n    function addPolygon(path, color, borderWidth) \n    { \n        var component = Qt.createComponent(\"qrc:///qml/polygon.qml\") \n        var item = component.createObject(window, { path: path, color: \n        color, borderWidth: borderWidth }) \n        map.addMapItem(item) \n    } \n```", "```cpp\naddCircle(40.7274175,-73.99835, 250, \"green\", 3); \naddRectangle(40.7274175,-73.99835, 40.7376432, -73.98602, \"red\", 2) \nvar path = [{ latitude: 40.7324281, longitude: -73.97602 }, \n            { latitude: 40.7396432, longitude: -73.98666 }, \n            { latitude: 40.7273266, longitude: -73.99835 }, \n            { latitude: 40.7264281, longitude: -73.98602 }]; \naddPolygon(path, \"blue\", 3); \n```", "```cpp\n#include <QDebug> \n#include <QGeoPositionInfo> \n#include <QGeoPositionInfoSource> \n```", "```cpp\nprivate slots: \n   void positionUpdated(const QGeoPositionInfo &info); \n```", "```cpp\nQGeoPositionInfoSource *source = QGeoPositionInfoSource::createDefaultSource(this); \nif (source) \n{ \n   connect(source, &QGeoPositionInfoSource::positionUpdated, \n         this, &MainWindow::positionUpdated); \n   source->startUpdates(); \n} \n```", "```cpp\nvoid MainWindow::positionUpdated(const QGeoPositionInfo &info) \n{ \n   qDebug() << \"Position updated:\" << info; \n} \n```", "```cpp\nserialnmea: No serial ports found\nFailed to create Geoclue client interface. Geoclue error: org.freedesktop.DBus.Error.Disconnected\n```", "```cpp\nPosition updated: QGeoPositionInfo(QDateTime(2018-02-22 19:13:05.000 EST Qt::TimeSpec(LocalTime)), QGeoCoordinate(45.3333, -75.9))\n```", "```cpp\n#include <QGeoServiceProvider>\n#include <QGeoRoutingManager>\n#include <QGeoRouteRequest>\n#include <QGeoRouteReply>\n```", "```cpp\nprivate slots:\n    void positionUpdated(const QGeoPositionInfo &info);\n    void routeCalculated(QGeoRouteReply *reply);\n    void routeError(QGeoRouteReply *reply, QGeoRouteReply::Error error, const QString &errorString);\n```", "```cpp\nQGeoServiceProvider* serviceProvider = new QGeoServiceProvider(\"osm\");\n```", "```cpp\nQGeoRoutingManager* routingManager = serviceProvider->routingManager();\n```", "```cpp\nconnect(routingManager, &QGeoRoutingManager::finished, this, &MainWindow::routeCalculated);\nconnect(routingManager, &QGeoRoutingManager::error, this, &MainWindow::routeError);\n```", "```cpp\nvoid MainWindow::routeCalculated(QGeoRouteReply *reply)\n{\n    qDebug() << \"Route Calculated\";\n    if (reply->routes().size() != 0)\n    {\n        // There could be more than 1 path\n        // But we only get the first route\n        QGeoRoute route = reply->routes().at(0);\n        qDebug() << route.path();\n    }\n    reply->deleteLater();\n}\n```", "```cpp\nvoid MainWindow::routeError(QGeoRouteReply *reply, QGeoRouteReply::Error error, const QString &errorString)\n{\n    qDebug() << \"Route Error\" << errorString;\n    reply->deleteLater();\n}\n```", "```cpp\nQGeoRouteRequest request(QGeoCoordinate(40.675895,-73.9562151), QGeoCoordinate(40.6833154,-73.987715));\nroutingManager->calculateRoute(request);\n```"]