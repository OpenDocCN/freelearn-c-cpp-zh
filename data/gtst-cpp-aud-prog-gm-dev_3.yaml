- en: Chapter 3. Audio Control
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章 音频控制
- en: In the previous chapter, we saw how to load and play audio files in FMOD. This
    time, we will explore some of the ways in which we can control the playback of
    those files. We will start with controlling the playback flow, by stopping the
    sound on demand, or seeking to different points in the audio file. Then we will
    cover how to modify the main properties of sound that were described in [Chapter
    1](ch01.html "Chapter 1. Audio Concepts"), *Audio Concepts*, such as volume and
    pitch. We will also see how FMOD lets us group sounds into categories, in order
    to control multiple sounds at once.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们看到了如何在FMOD中加载和播放音频文件。这一次，我们将探讨一些控制这些文件播放的方式。我们将从控制播放流程开始，通过按需停止声音或寻找音频文件中的不同点。然后，我们将介绍如何修改声音的主要属性，这些属性在[第1章](ch01.html
    "第1章 音频概念")“音频概念”中已经描述，例如音量和音调。我们还将看到FMOD如何让我们将声音分组到类别中，以便一次控制多个声音。
- en: At the end of the chapter, we will expand the audio manager from the previous
    chapter, and make it more flexible and appropriate for use in games. This extended
    audio manager will provide a distinction between songs and sound effects, and
    handle each of them differently. We will see how to implement a fade in/fade out
    effect using simple volume manipulation, and how to add a variation to sound effects
    with a bit of randomness. The audio manager will also expose individual volume
    control for each category, making it easy to control from a game's option screen.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章末尾，我们将扩展上一章的音频管理器，并使其更加灵活和适合在游戏中使用。这个扩展的音频管理器将区分歌曲和音效，并分别处理它们。我们将看到如何使用简单的音量调节来实现淡入/淡出效果，以及如何通过一点随机性为音效添加变化。音频管理器还将为每个类别公开单独的音量控制，使其易于从游戏的选项屏幕进行控制。
- en: The channel handle
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通道句柄
- en: 'Let us start with a quick reminder from last chapter. When we use the `playSound()`
    method and pass the address of an `FMOD::Channel` pointer to the fourth parameter,
    we get a channel handle in return:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从上一章快速回顾一下。当我们使用`playSound()`方法并将`FMOD::Channel`指针的地址传递给第四个参数时，我们会得到一个通道句柄作为返回：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Through this handle, we can control the sound in many ways. This handle remains
    valid while the sound has not finished playing, or until we explicitly stop the
    sound. If we try to perform an operation on the channel after the sound has stopped,
    nothing happens. Instead, the method we called returns an error stating that the
    channel handle is invalid, or already in use by another sound, if that is the
    case.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个句柄，我们可以以许多方式控制声音。只要声音尚未播放完毕，或者直到我们明确停止声音为止，该句柄仍然有效。如果我们尝试在声音停止后对通道执行操作，什么也不会发生。相反，我们调用的方法会返回一个错误，说明通道句柄无效，或者已经被另一个声音使用，如果是这种情况的话。
- en: Something that might be confusing is that this FMOD channel is not the same
    type we talked back in [Chapter 1](ch01.html "Chapter 1. Audio Concepts"), *Audio
    Concepts*, when we discussed multi-channel audio. This is simply the name FMOD
    gives to each of the slots it uses to play sounds simultaneously.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 可能令人困惑的是，这个FMOD通道与我们在[第1章](ch01.html "第1章 音频概念")“音频概念”中讨论的多通道音频不是同一类型。这只是FMOD为同时播放声音使用的每个插槽的名称。
- en: Controlling the playback
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制播放
- en: 'We already know how to play audio files, but it is also important to know how
    to stop them from playing. This is particularly important for looping sounds,
    because otherwise they would keep repeating forever. Usually, all we have to do
    is call the `stop()` method on the channel handle:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经知道如何播放音频文件，但重要的是要知道如何停止它们的播放。这对于循环声音尤为重要，否则它们将永远重复。通常，我们只需要在通道句柄上调用`stop()`方法：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When a sound stops playing—because it reached the end and it is not set to
    loop, or because we stopped it ourselves—its channel becomes free for other sounds
    to use. This means that once we stop a sound there is no way to resume it. If
    we need to stop a sound temporarily, and resume it at a later time, we need to
    use the `setPaused()` method:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当声音停止播放时——因为它已经到达结尾并且没有设置循环，或者因为我们自己停止了它——它的通道就变得空闲，供其他声音使用。这意味着一旦我们停止了声音，就没有办法恢复它。如果我们需要暂时停止声音，并在以后恢复它，我们需要使用`setPaused()`方法：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Most methods that start with `set` are accompanied by an equivalent `get` method,
    such as `getPaused()`, that we can use to check the current value of that property.
    The following is a function that uses both methods in conjunction with each other,
    to toggle the paused state of a channel:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数以`set`开头的方法都有相应的`get`方法，例如`getPaused()`，我们可以使用它来检查该属性的当前值。以下是一个使用这两种方法结合在一起的函数，用于切换通道的暂停状态：
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Another common operation is to seek the sound to a different position in the
    file. This is done with the `setPosition()` method, which takes a number representing
    the position we want to seek to, and the units we are specifying that position
    in (milliseconds in the following example). This is useful if we want to make
    a sound start from the beginning after unpausing it:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个常见的操作是将声音定位到文件中的不同位置。这是通过`setPosition()`方法完成的，该方法接受一个数字，表示我们要寻找的位置，以及我们指定该位置的单位（在以下示例中为毫秒）。如果我们想要使声音在暂停后从头开始播放，这将非常有用：
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Finally, if we have a looping sound, we can use the `setLoopCount()` method
    to control the number of times the sound should loop. The following example shows
    some of the possible parameters (with the default being `-1` to loop endlessly):'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果我们有一个循环声音，我们可以使用`setLoopCount()`方法来控制声音循环的次数。以下示例显示了一些可能的参数（默认值为`-1`表示无限循环）：
- en: '[PRE5]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Controlling the volume
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制音量
- en: 'Next, we will see how to control some of the main properties of sound, starting
    with its volume. This is done with a simple call to the `setVolume()` method,
    which takes a value ranging from `0` (silence) to `1` (maximum volume):'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看到如何控制声音的一些主要属性，首先是音量。这是通过简单调用`setVolume()`方法完成的，该方法接受一个值，范围从`0`（静音）到`1`（最大音量）：
- en: '[PRE6]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Similar to the way we paused the sound earlier, we can also silence it temporarily
    by using the `setMute()` method. Once we unmute the sound, it continues playing
    at its previous volume:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们之前暂停声音的方式类似，我们也可以使用`setMute()`方法暂时将其静音。一旦我们取消静音，声音就会以先前的音量继续播放：
- en: '[PRE7]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Both the methods preciously mentioned modify all channels of the sound simultaneously.
    On a sound with multiple channels, we can modify the volume of each channel separately,
    using the `setInputChannelMix()` method. This works for any amount of channels,
    by taking an array of volume levels as the first parameter, and the number of
    channels as the second. The following is an example for a stereo sound that mutes
    the left channel:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 前面提到的两种方法都同时修改声音的所有通道。对于具有多个通道的声音，我们可以使用`setInputChannelMix()`方法分别修改每个通道的音量。通过将音量级别的数组作为第一个参数，通道数作为第二个参数，可以对任意数量的通道进行操作。以下是一个静音左声道的立体声声音的示例：
- en: '[PRE8]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Controlling the pitch
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 声像的控制
- en: 'Controlling the pitch is not as straightforward as controlling the volume.
    We already know that modifying the frequency of a sound, changes its pitch and
    the channel handle actually has a `setFrequency()` method just for that:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 控制音调并不像控制音量那样直接。我们已经知道修改声音的频率会改变它的音调，通道句柄实际上有一个专门用于此目的的`setFrequency()`方法。
- en: '[PRE9]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: However, it does not work the way some of us might expect. For example, the
    middle C note on a piano has a frequency of approximately 261.626 Hz, so we might
    expect that setting the frequency to that value, would make the sound assume a
    pitch close to the middle C note, but this is not the case.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，它的工作方式并不是我们一些人可能期望的。例如，钢琴上的中央C音符的频率大约为261.626赫兹，因此我们可能期望将频率设置为该值会使声音产生接近中央C音符的音调，但事实并非如此。
- en: In order to understand this problem, let us first turn our attention to the
    `getFrequency()` method. If we call this method on a channel with its original
    frequency, what we get in return is actually the sampling rate of the sound. This
    means that any frequency values that we set must be relative to this value, or
    in other words, that any values above the original sampling rate of the sound
    will increase its pitch, and vice versa.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解这个问题，让我们首先关注`getFrequency()`方法。如果我们在具有其原始频率的通道上调用此方法，我们实际上得到的是声音的采样率。这意味着我们设置的任何频率值必须相对于这个值，换句话说，任何高于声音的原始采样率的值都会增加其音调，反之亦然。
- en: 'We could choose frequency values arbitrarily to get the desired effect, but
    an easier way to deal with pitch is in musical terms. In musical theory, the difference
    between two pitches is called an interval, with two of the most basic types of
    intervals being the octave, which corresponds to the distance between two consecutive
    notes with the same name, and the semitone, which corresponds to the distance
    between any two adjacent notes. The following are a few simple rules; we can modify
    an existing frequency by any of these intervals:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以任意选择频率值来获得所需的效果，但处理音调的更简单方法是用音乐术语。在音乐理论中，两个音高之间的差异称为音程，其中最基本的两种音程是八度，对应于具有相同名称的两个连续音符之间的距离，以及半音，对应于任何两个相邻音符之间的距离。以下是一些简单的规则；我们可以通过任何这些音程来修改现有的频率：
- en: Every time we multiply/divide a frequency by two we get a new frequency that
    sounds one octave higher/lower
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每当我们将频率乘以/除以两，我们得到一个听起来音调更高/更低的新频率
- en: Every time we multiply/divide a frequency by two and a half we get new a frequency
    that sounds one semitone higher/lower
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每当我们将频率乘以/除以两个半，我们得到一个听起来音调更高/更低的新频率
- en: 'To make things easier, here are two helper methods that perform the previous
    calculations, given a frequency, and the number of octaves or semitones to change.
    Notice the use of the `pow()` function to apply the previous multiplications and
    divisions the necessary amount of times:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化问题，这里有两个辅助方法，可以在给定频率和要更改的八度或半音数的情况下执行先前的计算。请注意使用`pow()`函数来应用先前的乘法和除法所需的次数：
- en: '[PRE10]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Using these helper methods, it becomes simple to modify the pitch of a sound
    in FMOD in a meaningful way. For example, to decrease the pitch of a sound by
    3 semitones, we could do the following:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些辅助方法，可以简单地在FMOD中有意义地修改声音的音调。例如，要将声音的音调降低3个半音，我们可以这样做：
- en: '[PRE11]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note that changing the frequency of the sound will also have the side effect
    of speeding it up or slowing it down. There is a way to change the pitch of a
    sound without affecting its speed in FMOD, but it requires using a DSP effect,
    which is outside the scope of this chapter. We will briefly cover DSP effects
    in the next chapter.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，改变声音的频率也会导致加快或减慢速度的副作用。有一种方法可以在FMOD中改变声音的音调而不影响其速度，但这需要使用DSP效果，这超出了本章的范围。我们将在下一章简要介绍DSP效果。
- en: Controlling the panning
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 声像的控制
- en: 'Finally, we can also control the panning of some sounds, as long as they are
    mono or stereo, and 2D (as the FMOD engine automatically positions 3D sounds).
    When these conditions are met, you can change the panning of the sound using the
    `setPan()` method, which takes any value from `-1` (completely on the left) to
    `1` (completely on the right):'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，只要声音是单声道或立体声，并且是2D的（因为FMOD引擎会自动定位3D声音），我们还可以控制一些声音的声像。当满足这些条件时，可以使用`setPan()`方法来改变声音的声像，该方法接受从`-1`（完全在左边）到`1`（完全在右边）的任何值。
- en: '[PRE12]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Panning works by modifying the volume of each output to give the illusion of
    position. However, the way FMOD calculates these values is different between mono
    and stereo sounds.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 声像通过修改每个输出的音量来产生位置的错觉。然而，FMOD计算这些值的方式在单声道和立体声声音之间是不同的。
- en: For mono sounds, the volume of each speaker follows a constant power curve that
    starts at 0 percent on one side, and goes to 100 percent on the other side, with
    the center position being at around 71 percent. This technique results in a smoother
    transition from one side to the other than using regular linear interpolation
    with 50 percent in the middle (because of the way we perceive sound intensity).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 对于单声道声音，每个扬声器的音量遵循一个恒定的功率曲线，从一侧的0％开始，到另一侧的100％，中心位置在大约71％左右。这种技术使得从一侧到另一侧的过渡比使用中间50％的常规线性插值更加平滑（因为我们感知声音强度的方式）。
- en: 'Stereo sounds, on the other hand, use a simpler formula referred to as setting
    the balance of the sound. Using this approach, both outputs are already at 100
    percent in the center position, and panning to one side only decreases the volume
    of the opposite channel in a linear fashion. The following figure demonstrates
    both the approaches:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，立体声声音使用一个更简单的公式，称为设置声音的平衡。使用这种方法，两个输出在中心位置已经达到100％，向一侧平移只会以线性方式减小相反通道的音量。以下图示了这两种方法：
- en: '![Controlling the panning](img/9099OT_03_01.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![控制声像定位](img/9099OT_03_01.jpg)'
- en: Grouping channels together
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将通道组分组在一起
- en: 'Another great feature of FMOD is that it lets us add different channels to
    a group and control them simultaneously. This is very useful for video games,
    where sound tends to fall into categories (such as background music, sound effects,
    or speech). To create a channel group we use the `createChannelGroup()` method
    of the system object:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: FMOD的另一个很棒的功能是它让我们将不同的通道添加到一个组中并同时控制它们。这对于视频游戏非常有用，因为声音往往属于不同的类别（如背景音乐、音效或语音）。要创建一个通道组，我们使用系统对象的`createChannelGroup()`方法：
- en: '[PRE13]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then we can easily add a channel to a group using the `setChannelGroup()` method
    of the channel object:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用通道对象的`setChannelGroup()`方法轻松地将通道添加到组中：
- en: '[PRE14]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'It is also possible to add a group as a child of another group, creating a
    hierarchy. This is done using the `addGroup()` method of the parent channel group
    object:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以将一个组作为另一个组的子级添加，从而创建一个层次结构。这是使用父通道组对象的`addGroup()`方法完成的：
- en: '[PRE15]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'There is also a global channel group called the master channel group, where
    every channel is placed every time you play a sound. You can get a reference to
    the master channel group by calling the `getMasterChannelGroup()` method of the
    system object:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个名为主通道组的全局通道组，在播放声音时每次都会将每个通道放置在其中。您可以通过调用系统对象的`getMasterChannelGroup()`方法来获取主通道组的引用：
- en: '[PRE16]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: A good way to organize sounds in our games is to create a channel group for
    each category of sounds, and add all channel groups to the master channel group.
    This way we have control over individual categories, but we also have a way to
    control all sounds at once.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在游戏中组织声音的一个好方法是为每个声音类别创建一个通道组，并将所有通道组添加到主通道组中。这样我们既可以控制各个类别，又可以一次性控制所有声音。
- en: Controlling groups of channels
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制通道组
- en: Most operations supported by channel groups are the same that we have seen already
    for individual channels. In particular, we can stop, pause, or mute all channels
    in a group, and control their volume and pitch. The syntax for these operations
    is the same as before, except for pitch, which is done through a `setPitch()`
    method, that instead of a frequency, takes any value between `0` and `10`, and
    multiplies it by the current frequency.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 通道组支持的大多数操作与我们已经看到的个别通道相同。特别是，我们可以停止、暂停或静音组中的所有通道，并控制它们的音量和音调。这些操作的语法与以前相同，除了音调，它是通过`setPitch()`方法完成的，该方法不是频率，而是取`0`到`10`之间的任何值，并将其乘以当前频率。
- en: '[PRE17]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: All of these changes propagate down the channel group hierarchy automatically,
    without overwriting the values stored inside the channels. The way these values
    are applied depends on the type of operation.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些更改会自动传播到通道组层次结构中，而不会覆盖通道中存储的值。这些值的应用方式取决于操作的类型。
- en: For operations such as pausing and muting, the values in the channel group override
    the values in the children. This means that if the channel group is paused, every
    channel will remain paused regardless of their real values. On the other hand,
    if the channel group is not paused, the individual values in the channels are
    considered.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 对于暂停和静音等操作，通道组中的值会覆盖子通道中的值。这意味着如果通道组被暂停，每个通道都将保持暂停，而不考虑它们的实际值。另一方面，如果通道组没有暂停，通道中的个别值将被考虑。
- en: For volume and pitch, the values in the channel group are multiplied by the
    values in the children. For example, a channel at 80 percent volume inside a channel
    group at 50 percent volume will play at 40 percent volume instead.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 对于音量和音调，通道组中的值会乘以子通道中的值。例如，在50％音量的通道组中的80％音量的通道将以40％的音量播放。
- en: Project 2 – improving the audio manager
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目2-改进音频管理器
- en: 'In this project, we will build on top of the simple audio manager developed
    in the last chapter, and make it more flexible and game oriented. This time, besides
    loading and playing sounds, we will also be able to stop them and control their
    volume, which is necessary in almost every game. Furthermore, we will divide all
    sounds into two categories, each with its own set of features and behaviors:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将在上一章中开发的简单音频管理器的基础上进行改进，使其更加灵活和游戏导向。这一次，除了加载和播放声音，我们还将能够停止它们并控制它们的音量，这在几乎每个游戏中都是必要的。此外，我们将所有声音分为两类，每类都有自己的特性和行为：
- en: '**Sound effects (SFXs)**: Sounds that are loaded into memory and do not loop.
    Multiple instances can be played at the same time. Their volume and pitch can
    be controlled directly, or randomized within a user-defined range, to add variation
    to the sound.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**音效（SFXs）**：加载到内存中并且不循环的声音。可以同时播放多个实例。它们的音量和音调可以直接控制，或者在用户定义的范围内进行随机化，以增加声音的变化。'
- en: '**Songs**: Sounds that are streamed and set to loop. Only one song can be playing
    at any time. Transitions between songs are handled smoothly by the audio manager
    with volume fades.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**歌曲**：流式传输的声音，设置为循环。一次只能播放一首歌曲。音频管理器通过音量淡入淡出平稳处理歌曲之间的过渡。'
- en: Each game has its own needs, so you might want to create more categories, such
    as one for speech or ambient tracks.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 每个游戏都有自己的需求，因此您可能希望创建更多类别，比如针对语音或环境音轨的类别。
- en: Class definition
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类定义
- en: 'Once again, let us start with a listing of the class definition:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次从类定义的列表开始：
- en: '[PRE18]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The class contains quite a few more members than the `SimpleAudioManager` class,
    but the basis is the same. To summarize the differences, we now have public methods
    to load, play, stop, and control the volume of sound effects and songs separately.
    Then, in the private portion of the class, we have an enumeration with the types
    of categories, and arrays of channel groups, sound maps, and modes, containing
    enough entries for each of the categories. Finally, there are some variables required
    to handle transitions between songs.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 该类包含的成员比“SimpleAudioManager”类多得多，但基础是相同的。总结一下不同之处，现在我们有了用于分别加载、播放、停止和控制音效和歌曲音量的公共方法。然后，在类的私有部分，我们有一个包含类别类型的枚举，以及通道组、声音映射和模式的数组，每个类别都有足够的条目。最后，还有一些变量用于处理歌曲之间的过渡。
- en: Initialization and destruction
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始化和销毁
- en: In the constructor, besides initializing the sound system, we create one group
    channel for each sound category, and add them to the master channel group. We
    also initialize an array of modes describing how sounds in each category should
    be loaded. Finally, we seed the random number generator that will be used to play
    sound effects.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在构造函数中，除了初始化声音系统外，我们为每个声音类别创建了一个组通道，并将它们添加到主通道组中。我们还初始化了一个描述每个类别中的声音应如何加载的模式数组。最后，我们初始化了用于播放音效的随机数生成器。
- en: '[PRE19]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In the destructor, we do the same thing as we did in the simple audio manager,
    but this time there are multiple sound maps to clear.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在析构函数中，我们做了与简单音频管理器中相同的事情，但这次有多个声音映射需要清除。
- en: '[PRE20]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Loading songs and sound effects
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载歌曲和音效
- en: 'The loading portion of the manager is very similar to what we did in the last
    chapter. The public methods `LoadSFX()` and `LoadSong()` delegate their work to
    the private `Load()` method which does the actual loading process. The only difference
    is that the `Load()` method needs to use the correct sound map and mode from the
    arrays, based on the value of the first parameter:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 管理器的加载部分与上一章所做的非常相似。公共方法“LoadSFX（）”和“LoadSong（）”将它们的工作委托给私有的“Load（）”方法，该方法执行实际的加载过程。唯一的区别是，“Load（）”方法需要根据第一个参数的值使用正确的声音映射和模式数组：
- en: '[PRE21]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Playing and stopping sound effects
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 播放和停止音效
- en: 'Sound effects are the easier of the two categories to play. The `PlaySFX()`
    method takes the path of the sound, and a pair of minimum and maximum volume and
    pitch values. Then it searches for the sound in the correct map, and plays it
    back like before, except that it sets the volume and pitch of the sound using
    random values generated within the selected ranges:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 音效是两种类别中较容易播放的。 “PlaySFX（）”方法接受声音的路径和一对最小和最大音量和音调值。然后它在正确的映射中搜索声音，并像以前一样播放它，只是它使用在选定范围内生成的随机值来设置声音的音量和音调：
- en: '[PRE22]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The preceding code makes use of two helper methods, `ChangeSemitone()` which
    was already shown earlier in this chapter, and `RandomBetween()` which can be
    seen in the following code snippet:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码使用了两个辅助方法，“ChangeSemitone（）”在本章前面已经展示过，而“RandomBetween（）”可以在以下代码片段中看到：
- en: '[PRE23]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Stopping all sound effects from playing is trivial to implement, thanks to
    the channel groups. You would typically call this when changing between scenes
    or opening a menu:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 停止播放所有音效非常容易实现，这要归功于通道组。通常在切换场景或打开菜单时调用此方法：
- en: '[PRE24]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Playing and stopping songs
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 播放和停止歌曲
- en: 'Songs are a bit harder to handle because we only want one to be playing at
    all times and we want transitions between them to happen smoothly. FMOD does not
    provide a way to fade the volume between sounds automatically, so we have to implement
    this manually with `setVolume()` calls within the `Update()` method. First, we
    need to create some member variables to store some states:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们只希望一次只播放一首歌曲，并且希望它们之间的过渡能够平稳进行，所以歌曲的处理会有些困难。FMOD没有提供自动在声音之间淡入淡出的方法，因此我们必须在“Update（）”方法中手动实现这一点，使用“setVolume（）”调用。首先，我们需要创建一些成员变量来存储一些状态：
- en: '[PRE25]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'From the top, we need the channel handle to update the volume of the song,
    the path of the current song to ensure that we do not play the same song again,
    and the path of the next song to start playing it after the previous one finishes
    fading out. We also need a variable to store if we are currently fading in or
    fading out. The `PlaySong()` method follows these rules:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 从顶部开始，我们需要通道句柄来更新歌曲的音量，当前歌曲的路径以确保我们不再次播放相同的歌曲，以及下一首歌曲的路径，以便在前一首歌曲淡出后开始播放。我们还需要一个变量来存储我们当前是在淡入还是淡出。
    “PlaySong（）”方法遵循这些规则：
- en: If we are trying to play a song that is already playing, nothing should happen.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们试图播放已经在播放的歌曲，则不应该发生任何事情。
- en: If we are trying to play a song, but another song is already playing, we cannot
    start immediately. Instead, we instruct the manager to begin stopping the current
    song, and store the path of the song to play afterwards.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们试图播放一首歌曲，但已经有另一首歌曲在播放，我们不能立即开始。相反，我们指示管理器开始停止当前的歌曲，并存储要在之后播放的歌曲的路径。
- en: 'If no song is playing, we can start the new song immediately, with its initial
    volume set to zero, and the manager set to the fade in state. The song must also
    be added to the correct channel group:'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果没有歌曲正在播放，我们可以立即开始新的歌曲，其初始音量设置为零，并将管理器设置为淡入状态。歌曲还必须添加到正确的通道组中：
- en: '[PRE26]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The `StopSongs()` method is significantly easier to implement, as it only needs
    to trigger a fade out if a song is playing, and clear any pending song request
    that was previously set:'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`StopSongs()` 方法实现起来要简单得多，因为它只需要在歌曲正在播放时触发淡出，并清除先前设置的任何待定歌曲请求：'
- en: '[PRE27]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'It is in the `Update()` method where all of the fading takes place. The process
    follows these rules:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Update()` 方法中，所有的淡入淡出都是在这里进行的。这个过程遵循以下规则：
- en: If a song is playing and we are fading in, increase the volume of the current
    song a bit. Once the volume reaches one, stop fading.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果有歌曲正在播放并且我们正在淡入，就稍微增加当前歌曲的音量。一旦音量达到一，就停止淡入。
- en: If a song is playing and we are fading out, decrease the volume of the current
    song a bit. Once the volume reaches zero, stop the song, and stop fading.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果有歌曲正在播放并且我们正在淡出，就稍微降低当前歌曲的音量。一旦音量达到零，就停止歌曲播放，并停止淡出。
- en: 'If no song is playing, and there is a song set up to play next, start playing
    it:'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果没有歌曲正在播放，并且设置了下一首歌曲要播放，就开始播放它：
- en: '[PRE28]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Controlling the master volume of each category
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制每个类别的主音量
- en: 'Controlling the master volume of each category is just a matter of calling
    the corresponding channel group method:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 控制每个类别的主音量只是调用相应的通道组方法的问题：
- en: '[PRE29]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Summary
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have seen how to control the playback of a sound, how to
    control the volume, pitch, and panning of a sound, how to control multiple sounds
    at once using channel groups, and finally how to apply these features in practical
    situations, such as fading between songs, or applying random variations to sound
    effects.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经看到了如何控制声音的播放，如何控制声音的音量、音调和声像，如何使用通道组同时控制多个声音，最后如何将这些特性应用到实际情况中，比如在歌曲之间淡入淡出，或者对声音效果应用随机变化。
