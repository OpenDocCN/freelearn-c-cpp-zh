- en: Implementing Windows and Dialog
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现窗口和对话框
- en: In the previous chapter, we learned how to animate our application by using
    signals and slots to trigger and respond to actions that occur within our application.
    So far, we have been concentrating on examples that are contained in only one
    file and do not expressly describe a full working application. To do so, we will
    need to change the style in which our applications are written, and also adopt
    a number of new conventions.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何通过使用信号和槽来触发和响应应用程序内部发生的行为来使我们的应用程序动画化。到目前为止，我们一直专注于只包含在一个文件中的示例，并且没有明确描述一个完整的工作应用程序。要做到这一点，我们需要改变我们编写应用程序的方式，并采用一些新的约定。
- en: 'In this chapter, we shall work with Windows in Qt, so that by the end of the
    chapter, you should be able to do the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用Qt中的窗口，因此到本章结束时，你应该能够做到以下事情：
- en: Understand how to subclass and create a custom window application
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解如何派生和创建自定义窗口应用程序
- en: Add a menu bar to a window
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向窗口添加菜单栏
- en: Add a toolbar to a window
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向窗口添加工具栏
- en: Use the various dialog (boxes) to communicate information to the user
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用各种对话框（框）向用户传达信息
- en: Creating a custom window
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义窗口
- en: To create a window(ed) application, we usually call the `show()` method on an
    instance of `QWidget` and that makes that widget, to be contained in a window
    of its own, along with its child widgets displayed in it.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个窗口（应用程序），我们通常在一个`QWidget`实例上调用`show()`方法，这将使该小部件包含在一个自己的窗口中，以及在其中显示的子小部件。
- en: 'A recap of such a simple application is as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这样一个简单的应用程序的回顾如下：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`mainWindow` here is an instance of `QMainWindow`, which is derived from `QWidget`.
    As such, by calling the `show()` method, a window will appear. If you were to
    replace `QMainWindow` with `QLabel`, this will still work.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`mainWindow`在这里是`QMainWindow`的一个实例，它继承自`QWidget`。因此，通过调用`show()`方法，会出现一个窗口。如果你将`QMainWindow`替换为`QLabel`，这仍然有效。'
- en: But this style of writing applications is not the best. Instead, from this point
    onward, we shall define our own custom widget, in which we shall define child
    widgets and make connections between signals and sockets.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 但这种编写应用程序的方式并不是最好的。相反，从现在开始，我们将定义我们自己的自定义小部件，在其中定义子小部件，并在信号和插槽之间建立连接。
- en: Now, let's rewrite the preceding application by sub-classing `QMainWindow`.
    We have chosen to subclass `QMainWindow` because we need to illustrate the menu
    and toolbars.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过派生`QMainWindow`来重写前面的应用程序。我们选择派生`QMainWindow`是因为我们需要展示菜单和工具栏。
- en: 'We start off by creating a new folder and defining a header file. The name
    of our header file here is `mainwindow.h`, but feel free to name it how you want
    and remember to add the `.h` suffix. This file should basically contain the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建一个新的文件夹并定义一个头文件。我们这里的头文件名为`mainwindow.h`，但你可以随意命名，并记得添加`.h`后缀。这个文件基本上应该包含以下内容：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We include the Qt classes `QMainWindow`, and `QLabel` in our header file. Then,
    we subclass `QMainWindow` and call it `MainWindow`. The constructor of this new
    class is declared with the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在我们的头文件中包含了Qt类`QMainWindow`和`QLabel`。然后，我们派生自`QMainWindow`并称它为`MainWindow`。这个新类的构造函数声明如下：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The entire class definition is wrapped within an `#ifndef ... #endif` directive,
    which tells the preprocessor to ignore its content if it is accidentally included
    multiple times in a file.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '整个类定义被包裹在一个`#ifndef ... #endif`指令中，这个指令告诉预处理器如果它意外地在一个文件中多次包含其内容，则忽略其内容。'
- en: It is possible to use the non-standard, but widely used, preprocessor directive, `#pragma
    once`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用非标准的但广泛使用的预处理器指令`#pragma once`。
- en: Take notice of the `Q_OBJECT` macro. This is what makes the signals and slots
    mechanism possible. Remember that the C++ language does not know about the keywords
    used to set up signals and slots. By including this macro, it becomes part of
    the C++ syntax.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`Q_OBJECT`宏。这是使信号和槽机制成为可能的原因。记住，C++语言不知道用于设置信号和槽的关键字。通过包含这个宏，它就成为了C++语法的组成部分。
- en: 'What we have defined so far is just the header file. The body of the main program
    has to live in some other `.cpp` file. For easy identification, we call it `mainwindow.cpp`.
    Create this file within the same folder and add the following lines of code:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们到目前为止定义的只是头文件。主程序的主体必须存在于某个其他的`.cpp`文件中。为了便于识别，我们称之为`mainwindow.cpp`。在同一个文件夹中创建这个文件，并添加以下代码行：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We include the header file that we defined earlier with the first line of code.
    The default constructor of our sub-classed widget, `MainWindow`, is defined.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们包含了之前定义的头文件。定义了我们的子类小部件 `MainWindow` 的默认构造函数。
- en: Notice how we call the method that sets the title of the window. `setWindowTitle()`
    is invoked and can be accessed from within the constructor since it is an inherited
    method from `QWindow`. There is no need to use the `this` keyword. The size of
    the window is specified by calling the `resize()` method and passing two integer
    values to be used as the dimensions of the window.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们是如何调用设置窗口标题的方法的。`setWindowTitle()` 被调用，并且由于它是一个从 `QWindow` 继承的方法，可以在构造函数内部访问。因此，不需要使用
    `this` 关键字。窗口的大小是通过调用 `resize()` 方法并传递两个整数来指定的，这两个整数用作窗口的尺寸。
- en: An instance of a `QLabel` is created, `mainLabel`. The text within the label
    is aligned to the center by calling `mainLabel->setAlignment(Qt::AlignCenter)`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了一个 `QLabel` 的实例，`mainLabel`。通过调用 `mainLabel->setAlignment(Qt::AlignCenter)`
    将标签内的文本对齐到中心。
- en: A call to `setCentralWidget()` is important as it situates any class that inherits
    from `QWidget` to occupy the interior of the window. Here, `mainLabel` is being
    passed to `setCentralWidget`, and that will make it the only widget to be displayed
    within the window.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 调用 `setCentralWidget()` 是很重要的，因为它将任何从 `QWidget` 继承的类定位在窗口的内部。在这里，`mainLabel`
    被传递给 `setCentralWidget`，这将使其成为窗口内唯一显示的小部件。
- en: 'Consider the structure of `QMainWindow` in the following diagram:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下图中 `QMainWindow` 的结构：
- en: '![](img/60b5e682-55d6-4878-afe7-5aaded0dbb90.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/60b5e682-55d6-4878-afe7-5aaded0dbb90.png)'
- en: At the very top of every window is the **Menu Bar**. Elements such as the file,
    edit, and help menus go there. Below that, are the **Toolbars**. Contained within
    the **Toolbars** are the **Dock Widgets**, which are collapsible panels. Now,
    the main controls within the window must be put in the **Central Widget** location.
    Since a UI is made up of several widgets, it will be good to compose a widget
    that will contain child widgets. This parent widget is what you will stick into
    the **Central Widget** area. To do this, we call `setCentralWidget()` and pass
    in the parent widget. At the bottom of the window, is the **Status Bar**.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个窗口的顶部是 **菜单栏**。文件、编辑和帮助菜单等元素都放在那里。下面是 **工具栏**。工具栏中包含 **停靠小部件**，它们是可以折叠的面板。现在，窗口中的主要控制必须放在
    **中央小部件** 位置。由于 UI 由多个小部件组成，因此创建一个包含子小部件的小部件将是有益的。这个父小部件是你将放入 **中央小部件** 区域的部件。为此，我们调用
    `setCentralWidget()` 并传递父小部件。在窗口底部是 **状态栏**。
- en: 'To run the application, we need to create an instance of our custom window
    class. Create a file called `main.cpp` within the same folder where the header
    and `.cpp` files are located. Add the following lines of code to `main.cpp`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行应用程序，我们需要创建我们自定义窗口类的实例。在头文件和 `.cpp` 文件所在的同一文件夹中创建一个名为 `main.cpp` 的文件。将以下代码行添加到
    `main.cpp` 中：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We include the header file `mainwindow.h`, which contains the declaration of
    our custom class, `MainWindow`. Without this, the compiler wouldn't know where
    to find the definition of the `MainWindow` class.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们包含了头文件 `mainwindow.h`，其中包含了我们自定义类 `MainWindow` 的声明。没有这个头文件，编译器将不知道在哪里找到 `MainWindow`
    类的定义。
- en: An instance of `MainWindow` is created and the `show()` method is called on
    it. We still have to call the `show()` method on `mainwindow`. `MainWindow`, which
    is a subclass of `QMainWindow`, and behaves just like any widget out there. Furthermore,
    as we already know, to cause a widget to appear, you have to call the `show()`
    method on it.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了一个 `MainWindow` 的实例，并调用了它的 `show()` 方法。我们仍然需要在 `mainwindow` 上调用 `show()`
    方法。`MainWindow` 是 `QMainWindow` 的子类，并且表现得就像任何其他小部件一样。此外，正如我们已经知道的，要使小部件出现，必须在该小部件上调用
    `show()` 方法。
- en: 'To run the program, move into the folder via the command line and issue the
    following commands:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行程序，通过命令行进入文件夹，并执行以下命令：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Add `QT += widgets` to the `.pro` file that is generated. Now continue with
    the next set of commands:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `QT += widgets` 添加到生成的 `.pro` 文件中。现在继续执行下一组命令：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Examine the `.pro` file for a second. At the very bottom of the file, we have
    the following lines:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 再次检查 `.pro` 文件。在文件的底部，我们有以下几行：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The headers are automatically collected and added to `HEADERS`. Similarly, the
    `.cpp` files are collected and added to `SOURCES`. Always remember to check this
    file when there are compilation errors to ensure that all required files have
    been added.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 标头文件会自动收集并添加到`HEADERS`中。同样，`.cpp`文件会被收集并添加到`SOURCES`中。始终记得在出现编译错误时检查此文件，以确保已添加所有必需的文件。
- en: 'To run the program, issue the following command:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行程序，请发出以下命令：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'For those who work on the macOS, the correct command you will need to issue
    in order to run the executable is as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 对于在macOS上工作的人来说，为了运行可执行文件，你需要发出的正确命令如下：
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The running application should appear, as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 运行中的应用程序应如下所示：
- en: '![](img/938e02c9-499f-4930-b00b-da7e73f3b26f.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/938e02c9-499f-4930-b00b-da7e73f3b26f.png)'
- en: Menu bar
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 菜单栏
- en: Most applications hold a set of clickable(s) that reveal a list of another set
    of actions that expose more functionality to the user. The most popular among
    these are the File, Edit, and Help menus.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数应用程序都包含一组可点击的菜单项，这些菜单项会显示另一组动作列表，从而向用户展示更多功能。其中最受欢迎的是文件、编辑和帮助菜单。
- en: In Qt, menu bars occupy the very top of the window. We shall create a short
    program to make use of the menu bar.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在Qt中，菜单栏占据窗口的顶部。我们将创建一个简短的程序来使用菜单栏。
- en: 'Three files must be created in a newly created folder. These are as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在新创建的文件夹中必须创建三个文件。这些如下所示：
- en: '`main.cpp`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`main.cpp`'
- en: '`mainwindow.h`'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mainwindow.h`'
- en: '`mainwindow.cpp`'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mainwindow.cpp`'
- en: 'The `main.cpp` file will remain as before in terms of content. Therefore, copy
    the `main.cpp` file from the previous section. Let''s examine the `mainwindow.h`
    file:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在内容方面，`main.cpp`文件将保持不变。因此，从上一节复制`main.cpp`文件。让我们检查`mainwindow.h`文件：
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Once more, the header file is enclosed in an `ifndef` directive to prevent errors
    that may occur as a result of multiple inclusions of this file.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，头文件被包含在一个`ifndef`指令中，以防止由于多次包含此文件而可能发生的错误。
- en: To create a menu within the window, you need instances of `QMenu`. Each menu,
    such as the File menu, will have sub-menus or items that make up the menu. The
    File menu usually has the Open, New, and Close sub-menus.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要在窗口内创建一个菜单，你需要`QMenu`的实例。每个菜单，如文件菜单，都将有子菜单或项目，这些项目构成了菜单。文件菜单通常有打开、新建和关闭子菜单。
- en: 'A typical image of a Menu bar is as follows, with the File, Edit, and Help
    menus. The File menu items under the File menu are New..., Open..., Save, Save
    As..., and Quit:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单栏的典型图像如下，包括文件、编辑和帮助菜单。文件菜单下的文件菜单项包括新建...、打开...、保存、另存为...和退出：
- en: '![](img/30d1b054-175c-40e9-af76-2448906c0f2a.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/30d1b054-175c-40e9-af76-2448906c0f2a.png)'
- en: Our application will have only two menus, namely, `fileMenu` and `helpMenu`.
    The other instances of `QAction` are the individual menu items: `quitAction`,
    `saveAction`, `cancelAction`, and `newAction`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序将只有两个菜单，即`fileMenu`和`helpMenu`。其他`QAction`实例是单个菜单项：`quitAction`、`saveAction`、`cancelAction`和`newAction`。
- en: Both the menu and sub-menu items are defined as members of the class in the
    header file. Furthermore, this kind of declaration will allow users to modify
    their behavior and also to easily access them when connecting them to sockets.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单和子菜单项都被定义为头文件中的类的成员。此外，这种声明将允许用户修改它们的行为，并在将它们连接到套接字时轻松访问它们。
- en: 'Now, let''s switch to the `mainwindow.cpp`. Copy the following code into `mainwindow.cpp`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们切换到`mainwindow.cpp`。将以下代码复制到`mainwindow.cpp`中：
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The header file, `mainwindow.h`, is included at the beginning of the file to
    make available the class declaration and Qt classes that will be used in the program.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件的开始处包含头文件`mainwindow.h`，以便在程序中使用类声明和Qt类。
- en: 'In the default constructor of our custom class, `MainWindow`, we start by setting
    the name of our window by calling `setWindowTitle()` and giving it an appropriate
    name. The size of our window is then established by calling `setFixedSize()`.
    This is demonstrated in the following code block:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们自定义类`MainWindow`的默认构造函数中，我们首先通过调用`setWindowTitle()`并给出一个合适的名称来设置窗口的名称。然后通过调用`setFixedSize()`确定窗口的大小。以下代码块展示了这一点：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Menu items can be displayed with images beside them. To associate an image or
    icon with a menu item, `QAction`, you need to first capture that image within
    an instance of `QPixmap`. Three such images are captured in the `newIcon`, `openIcon`,
    and `closeIcon` variables. These will be used further down the code.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单项可以显示带有图像的旁边。要将图像或图标与菜单项`QAction`关联，首先需要在一个`QPixmap`实例中捕获该图像。`newIcon`、`openIcon`和`closeIcon`变量中捕获了三个这样的图像。这些将在代码的下方使用。
- en: 'Let''s set up the `fileMenu` as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下方式设置`fileMenu`：
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: To add a menu to the window, a call to `menuBar()` is made. This returns an
    instance of `QMenu`, and we call `addMenu` on that object specifying the name
    of the menu we want to add. Here, we call our first menu, File. The `"&"` sign
    in front of the F in File will make it possible to press *Alt* + *F* on the keyboard.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要将菜单添加到窗口中，需要调用`menuBar()`。这将返回一个`QMenu`实例，我们调用该对象的`addMenu`方法，指定要添加的菜单名称。在这里，我们调用我们的第一个菜单，文件。文件中的F前面的`"&"`符号将使得按下键盘上的*Alt*
    + *F*成为可能。
- en: '`quitAction` is passed an instance of `QAction()`. `closeIcon` is the image
    we want to associate with this sub-menu. `"Quit"` is the display name and the
    `this` keyword makes the `quitAction` a child widget of `MainWindow`.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`quitAction`传递了一个`QAction()`实例。`closeIcon`是我们想要与这个子菜单关联的图像。"Quit"是显示名称，`this`关键字使`quitAction`成为`MainWindow`的子小部件。'
- en: A shortcut to a sub-menu is associated with `quitAction` by calling `setShortcuts()`.
    By using `QKeySequence::Quit`, we mask the need to cater for platform-specific
    key sequences that are used.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用`setShortcuts()`将子菜单的快捷键与`quitAction`关联。通过使用`QKeySequence::Quit`，我们掩盖了对平台特定键序列的需求。
- en: '`newAction` and `openAction` follow the same logic in their creation.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`newAction`和`openAction`在其创建中遵循相同的逻辑。'
- en: 'Now that we have our menu in `fileMenu` and the menu items in `quitAction`,
    `newAction`, and `openActions`, we need to link them together:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了`fileMenu`中的菜单和`quitAction`、`newAction`以及`openActions`中的菜单项，我们需要将它们链接在一起：
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: To add a sub-menu item, we call the `addAction()` method on the `QMenu` instance,
    `fileMenu`, and pass the required `QAction` instance. The `addSeparator()` is
    used to insert a visual marker in our list of menu items. It also returns an instance
    of `QAction`, but we are not interested in that object at this moment.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加子菜单项，我们在`QMenu`实例`fileMenu`上调用`addAction()`方法，并传递所需的`QAction`实例。`addSeparator()`用于在我们的菜单项列表中插入一个视觉标记。它也返回一个`QAction`实例，但在此刻我们对此对象不感兴趣。
- en: 'A second menu is added to the application along with its only sub-menu item:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序中添加了一个新的菜单及其唯一的子菜单项：
- en: '[PRE15]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`QAction` encapsulates a general idea of an action that can be inserted into
    widgets. Here, we used `QAction` to insert actions into our menus.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`QAction`封装了一个可以插入到小部件中的通用动作概念。在这里，我们使用`QAction`将动作插入到我们的菜单中。'
- en: 'These `QAction` instances emit the `triggered` signal, which can be connected
    to a socket to cause the application to change, as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这些`QAction`实例发出`triggered`信号，可以将该信号连接到套接字以使应用程序发生变化，如下所示：
- en: '[PRE16]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: When connecting a signal to a slot within a class definition, simply call the
    `connect()` method and pass in the parameters as you would do normally. The first
    parameter is the object that is going to emit the signal we are interested in.
    `&QAction::triggered` is one way of specifying the triggered signal. This is the
    same as writing `SIGNAL(triggered())`. The `this` keyword refers to the `MainWindow`
    object that will be created in the future. The quit slot is specified by `&QApplication::quit`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在类定义中将信号连接到槽时，只需调用`connect()`方法并传递参数，就像通常做的那样。第一个参数是将要发出我们感兴趣信号的对象。`&QAction::triggered`是指定触发信号的一种方式。这等同于写`SIGNAL(triggered())`。`this`关键字指的是将来将要创建的`MainWindow`对象。退出槽由`&QApplication::quit`指定。
- en: The signal and slot connected will create a situation where, when the File menu
    is opened and the Close button is clicked, the application will close.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 连接的信号和槽将创建一种情况，当打开文件菜单并点击关闭按钮时，应用程序将关闭。
- en: The last file needed to run this example is the `main.cpp` file. The previous
    `main.cpp` file created should be copied over to this project.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此示例所需的最后一个文件是`main.cpp`文件。应该将之前创建的`main.cpp`文件复制到这个项目中。
- en: 'Compile and run the project. A typical output should be as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 编译并运行项目。典型的输出应该如下所示：
- en: '![](img/50cfe2b4-db39-4bac-a735-a8e38c568181.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/50cfe2b4-db39-4bac-a735-a8e38c568181.png)'
- en: 'On a Mac, press the key combination *Command* + *Q* and that will close the
    application. On Linux and Windows, *Alt* + *F4* should do the same. This is made
    possible by the following line of code:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在Mac上，按*Command* + *Q*键组合，这将关闭应用程序。在Linux和Windows上，*Alt* + *F4*应该做同样的事情。这是以下代码行实现的：
- en: '[PRE17]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This line of code blurs out the difference by relying on Qt's `QKeySequence::Quit`,
    depending on the OS in use.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码通过依赖于Qt的`QKeySequence::Quit`来模糊不同操作系统之间的差异。
- en: 'Click on the File menu and select New:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 点击文件菜单并选择新建：
- en: '![](img/8001058b-a450-40fb-bfd5-c53630e89a43.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8001058b-a450-40fb-bfd5-c53630e89a43.png)'
- en: Nothing happens. That is because we did not define what should happen when the
    user clicks on that action. The last menu item, Quit, on the other hand, closes
    the application as defined by the socket and slot we declared.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 没有发生任何事情。这是因为我们没有定义当用户点击该操作时应发生什么。另一方面，最后一个菜单项“退出”根据我们声明的套接字和槽关闭应用程序。
- en: Also, take note of how each menu item has an appropriate icon or image in front
    of it.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请注意每个菜单项前面都有一个适当的图标或图像。
- en: Visit the Packt website to obtain the images for this book.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 访问Packt网站以获取本书的图像。
- en: Toolbar
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工具栏
- en: Beneath the menu bar is a panel that is usually referred to as toolbar. It contains
    a set of controls that could be widgets or instances of `QAction`, just as we
    saw in their use in creating the menu bar. This also means that you may choose
    to replace the `QAction` with a widget, such as a regular `QPushButton` or `QComboBox`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在菜单栏下方是一个通常被称为工具栏的面板。它包含一组控件，可以是小部件或`QAction`的实例，就像我们在创建菜单栏时看到的那样。这也意味着你可以选择用小部件替换`QAction`，例如一个普通的`QPushButton`或`QComboBox`。
- en: Toolbars may be fixed to the top of the window (beneath the menu bar) and can
    be pinned there or made to float around the dock widget.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 工具栏可以固定在窗口顶部（菜单栏下方），可以将其固定在那里或使其在停靠小部件周围浮动。
- en: Once again, we will need to create a new project or modify the one from the
    previous section of this chapter. The files that we will be creating are `main.cpp`,
    `mainwindow.h`, and `mainwindow.cpp`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，我们需要创建一个新的项目或修改本章前一部分的项目。我们将创建的文件是`main.cpp`、`mainwindow.h`和`mainwindow.cpp`。
- en: 'The `main.cpp` file remains the same, as follows. We only instantiate our custom
    class and call `show()` on it:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`main.cpp`文件保持不变，如下所示。我们仅实例化我们的自定义类，并在其上调用`show()`：'
- en: '[PRE18]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The `mainwindow.h` file will essentially contain the `QAction` members that
    will hold the actions in our toolbar:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`mainwindow.h`文件将基本上包含将持有我们工具栏中的操作的`QAction`成员：'
- en: '[PRE19]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This header file appears the same as before. The only difference is the `QToolbar`
    instance, `*toolbar`, and the `QAction` objects that will be shown within the
    toolbar. These are `newToolBarAction`, `openToolBarAction`, and `closeToolBarAction`.
    The `QAction` instances that are used in a menu are the same as the ones used
    for toolbars.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 此头文件看起来与之前相同。唯一的不同之处在于`QToolbar`实例`*toolbar`和将在工具栏中显示的`QAction`对象。这些是`newToolBarAction`、`openToolBarAction`和`closeToolBarAction`。在菜单中使用的`QAction`实例与工具栏中使用的相同。
- en: Note that there are no slots being declared.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 注意没有声明槽。
- en: 'The `mainwindow.cpp` file will contain the following:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`mainwindow.cpp`文件将包含以下内容：'
- en: '[PRE20]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The same set of icons used for the menu bar will be used for the toolbars too.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 用于菜单栏的相同图标集也将用于工具栏。
- en: To obtain an instance of the Windows toolbar for further manipulation, call
    the `addTooBar()` method, which will return an instance of a `QToolBar`. The method
    accepts any text that is used as the title of the window. It also adds the toolbar
    to the window.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取用于进一步操作的Windows工具栏的实例，请调用`addTooBar()`方法，它将返回一个`QToolBar`的实例。该方法接受任何用作窗口标题的文本。它还将工具栏添加到窗口中。
- en: 'The toolbar at this point can be moved around within the window. To fix it
    to the top of the window, call the `toolbar->setMovable(false);` function on the
    instance of the `QToolBar`, `toolbar`:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止的工具栏可以在窗口内移动。要将它固定在窗口顶部，请在`QToolBar`实例`toolbar`上调用`toolbar->setMovable(false);`函数：
- en: '[PRE21]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Two `QAction` objects are created and passed to the `newToolBarAction` and `openToolBarAction`
    objects. We pass the `QIcon` object that becomes the image on the `QAction` and
    a name or text to be displayed as a tooltip. A separator is added to the toolbar
    by calling the `addSeparator()` method. The last control, `closeToolBarAction`,
    contains an image to be displayed on the toolbar.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了两个`QAction`对象，并将它们传递给`newToolBarAction`和`openToolBarAction`对象。我们传递了`QIcon`对象，它将成为`QAction`上的图像，以及一个用作工具提示的名称或文本。通过调用`addSeparator()`方法，在工具栏中添加了一个分隔符。最后一个控件`closeToolBarAction`包含要在工具栏上显示的图像。
- en: 'To link the trigger signal of `closeToolBarAction` to the quit slot of the
    window, we do the following:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 将`closeToolBarAction`的触发信号链接到窗口的退出槽，我们进行以下操作：
- en: '[PRE22]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'To compile this project as a recap, run the following commands:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 要编译此项目作为复习，请运行以下命令：
- en: '[PRE23]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Add `QT += widgets` to the `.pro` file that is generated and make sure all
    three files are listed in the bottom of the file:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 将`QT += widgets`添加到生成的`.pro`文件中，并确保文件底部列出所有三个文件：
- en: 'Proceed to issue the following commands in order to build the project:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 按顺序发出以下命令以构建项目：
- en: '[PRE24]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'If everything went well, you will see the following:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，您将看到以下内容：
- en: '![](img/e49d334c-3989-4115-99c9-479ade2fadc8.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e49d334c-3989-4115-99c9-479ade2fadc8.png)'
- en: The preceding screenshot shows the toolbar beneath the File and Help menus.
    Three icons show three `QAction` objects that represent the New, Open, and Close
    actions. Only the last button (to close the application) action works. That is
    because we only defined a single signal-slot connection for the `closeToolBarAction` and `QAction`
    objects.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 上一张截图显示了文件和帮助菜单下方的工具栏。三个图标显示了代表新建、打开和关闭操作的三个`QAction`对象。只有最后一个按钮（关闭应用程序）的操作是有效的。这是因为我们只为`closeToolBarAction`和`QAction`对象定义了一个信号-槽连接。
- en: 'By hovering the mouse over the toolbar menu items, some text appears. This
    message is called a tooltip. As can be seen in the preceding diagram, the Open
    File message is derived from the last parameter of the following line:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将鼠标悬停在工具栏菜单项上，会出现一些文本。这个消息被称为工具提示。如前图所示，打开文件消息是从以下行的最后一个参数派生出来的：
- en: '[PRE25]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'As noted earlier, a toolbar can be moved around within a window as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，工具栏可以在窗口内移动，如下所示：
- en: '![](img/8872f67b-6a3c-4f2b-95cc-430acafc0f19.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8872f67b-6a3c-4f2b-95cc-430acafc0f19.png)'
- en: 'As you can see, by clicking on the three vertical dots on the left-hand side
    of the toolbar and moving it, you can detach the toolbar from the top to either
    the left, right, or bottom. To display this kind of functionality, issue the following
    command:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，通过点击工具栏左侧的三个垂直点并移动它，您可以将工具栏从顶部移至左侧、右侧或底部。要显示此类功能，请发出以下命令：
- en: '[PRE26]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This will fix the toolbar to the top so that it can't be moved around.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使工具栏固定在顶部，使其不能移动。
- en: Adding other widgets
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加其他小部件
- en: So far, we have only added a menu bar and a toolbar to our window. To add other
    widgets that might make our application useful, we have to add more members to
    our header file. In this section, we shall create a simple application that appends
    personal details to a displayable list.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只向窗口添加了菜单栏和工具栏。为了添加可能使我们的应用程序更有用的其他小部件，我们必须向头文件中添加更多成员。在本节中，我们将创建一个简单的应用程序，将个人详细信息追加到可显示的列表中。
- en: There will be a form where the details of a number of contacts will be received.
    This detail will then be added to a list on the window. As more contacts are added,
    the list will grow. We shall base these on the previous section's code and continue
    to build on it.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 将会收到一个表单，其中包含多个联系人的详细信息。这些详细信息随后将被添加到窗口上的一个列表中。随着联系人的增加，列表也会增长。我们将基于前一个部分的代码并在此基础上继续构建。
- en: As usual, you create a new folder with the three files, namely, `main.cpp`,
    `mainwindow.cpp`, and `mainwindow.h`. The `main.cpp` file will remain as before
    from the previous sections.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如常，您创建一个包含三个文件的新文件夹，分别是`main.cpp`、`mainwindow.cpp`和`mainwindow.h`。`main.cpp`文件将保持与之前章节相同。
- en: 'The `mainwindow.h` file should contain the following lines of code:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`mainwindow.h`文件应包含以下代码行：'
- en: '[PRE27]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The file imports the classes that will be used in declaring the members within
    our custom class. The whole file is wrapped with the `#ifndef` directive so that
    the header file can be included multiple times without yielding errors.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件导入了将在自定义类内部声明成员的类。整个文件被`#ifndef`指令包裹，以便头文件可以被多次包含而不会产生错误。
- en: 'Add the following lines of code to the same header file, `mainwindow.h`:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码行添加到相同的头文件`mainwindow.h`中：
- en: '[PRE28]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: We then declare our default constructor for our class.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们声明我们类的默认构造函数。
- en: There is only one slot in our application that will be used to move the content
    of a number of widgets into a list.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中只有一个槽，它将被用来将多个小部件的内容移动到列表中。
- en: 'Continue the code listing by adding the following lines of code that will add
    the members of the class and define the prototype of some `helper` methods:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加以下代码行继续代码列表，这些代码将添加类的成员并定义一些`helper`方法的原型：
- en: '[PRE29]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The members include layout and other widget classes, classes for our menu, toolbars,
    and their associated `QAction` objects.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 成员包括布局和其他小部件类，以及我们的菜单、工具栏及其关联的`QAction`对象。
- en: As you can see, the code is borrowed from the previous section with the exception
    of the widgets being added.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，代码是从前一个部分借用的，除了添加的控件。
- en: The private methods, `createIcons()`, `createMenuBar()`, `createToolBar()`,
    `setupSignalsAndSlot()`, and `setupCoreWidgets()`, will be used to refactor the
    code that should live in our default constructor. The `clearFields()` method will
    be used to clear the data from a number of widgets.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 私有方法`createIcons()`、`createMenuBar()`、`createToolBar()`、`setupSignalsAndSlot()`和`setupCoreWidgets()`将被用来重构应该存在于我们的默认构造函数中的代码。`clearFields()`方法将被用来清除多个小部件中的数据。
- en: 'In the `mainwindow.cpp` file, we shall define our class with the following
    lines of code:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在`mainwindow.cpp`文件中，我们将使用以下代码行定义我们的类：
- en: '[PRE30]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The default constructor has been refactored a great deal here. The building
    blocks of code have been moved away into functions to help make the code readable.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，默认构造函数已经进行了大量的重构。代码的构建块已经被移动到函数中，以帮助使代码可读。
- en: Now, we only set the window title and size of the application window. Next,
    we call the method that will create the icons that will be used by the various
    widgets. Another function call is made to set up the core widgets by calling the
    `setupCoreWidgets()` method. The menu and toolbars are created by calling the
    `createMenuBar()` and `createToolBar()` methods.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们只设置了应用程序窗口的标题和大小。接下来，我们将调用一个方法来创建各种小部件将使用的图标。通过调用`setupCoreWidgets()`方法，我们再次进行函数调用以设置核心小部件。通过调用`createMenuBar()`和`createToolBar()`方法，创建了菜单和工具栏。
- en: The layout object, `centralWidgetLayout`, is the main layout of our application.
    We add the `formLayout` object first, followed by the `appTable` object. As you
    can see, it is possible to insert a layout into another layout. Lastly, we insert
    the `buttonsLayout` object, which contains our buttons.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 布局对象`centralWidgetLayout`是我们应用程序的主要布局。我们首先添加`formLayout`对象，然后是`appTable`对象。正如你所见，可以将布局插入到另一个布局中。最后，我们插入包含我们的按钮的`buttonsLayout`对象。
- en: The `mainWidget` object's layout is set to `centralWidgetLayout`. This `mainWidget`
    object is then set as the main widget that should occupy the center of the window,
    as was demonstrated in the first diagram of this chapter.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 将`mainWidget`对象的布局设置为`centralWidgetLayout`。然后，将此`mainWidget`对象设置为应该占据窗口中心的主体小部件，正如本章第一图所示。
- en: All signals and slots will be set up in the `setupSignalsAndSlot()` method.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 所有信号和槽都将设置在`setupSignalsAndSlot()`方法中。
- en: 'Add the following lines of code to the `mainwindow.cpp` file that defines the
    `createIcons()` method:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码行添加到定义`createIcons()`方法的`mainwindow.cpp`文件中：
- en: '[PRE31]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The `createIcons()` method will pass instances of `QPixmap` to the members that
    were declared in `mainwindow.h`.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`createIcons()`方法将`QPixmap`实例传递给在`mainwindow.h`中声明的成员。'
- en: 'The definition of `setupCoreWidgets()` is as follows, in `mainwindow.cpp`:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`setupCoreWidgets()`的定义如下，位于`mainwindow.cpp`中：'
- en: '[PRE32]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Here, we are just instantiating objects to be used within the application. There
    is nothing out of the ordinary here. `nameLineEdit` and `phoneNumberLineEdit`
    will be used to collect the name and phone number of contacts about to be saved.
    `dateOfBirthEdit` is a special kind of textbox that allows you to specify a date.
    `savePushButton` and `newPushButton` are buttons that will be used to trigger
    the saving of the contact and the clearing of the list.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们只是实例化在应用程序中使用的对象。这里没有什么不同寻常的。`nameLineEdit`和`phoneNumberLineEdit`将被用来收集即将保存的联系人姓名和电话号码。`dateOfBirthEdit`是一种特殊的文本框，允许你指定日期。`savePushButton`和`newPushButton`是按钮，将被用来触发联系人的保存和列表的清除。
- en: The labels and line edit controls will be used in the `formLayout` object, which
    is a `QGridLayout` instance. `QGridLayout` allows widgets to be specified using
    columns and rows.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 标签和行编辑控件将被用于`formLayout`对象，这是一个`QGridLayout`实例。`QGridLayout`允许通过列和行指定小部件。
- en: To save a contact, this means we will save it to a widget that can display a
    list of items. Qt has a number of such widgets. These include `QListView`, `QTableView`,
    and `QTreeView`.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 要保存联系人，这意味着我们将将其保存到可以显示项目列表的小部件中。Qt有多个此类小部件。这些包括`QListView`、`QTableView`和`QTreeView`。
- en: 'When the `QListView` is used in displaying information, it will typically appear
    as in the following screenshot:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`QListView`显示信息时，它通常如下所示：
- en: '![](img/888d6e5f-7929-48f2-b591-542d7dc51a2e.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/888d6e5f-7929-48f2-b591-542d7dc51a2e.png)'
- en: '`QTableView` will use columns and rows to display data or information in cells
    as follows:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`QTableView`将使用列和行在单元格中显示数据或信息，如下所示：'
- en: '![](img/6785168c-b18c-4ac9-aa72-83a5ffedf13f.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6785168c-b18c-4ac9-aa72-83a5ffedf13f.png)'
- en: 'To show hierarchical information, `QTreeView` is also used, as in the following
    screenshot:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 为了显示层次信息，`QTreeView` 也被使用，如下面的截图所示：
- en: '![](img/a6707e92-a5ed-463e-aaf9-3f73dc596906.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a6707e92-a5ed-463e-aaf9-3f73dc596906.png)'
- en: 'An instance of `QTableView` is passed to `appTable`. We need a model for our
    `QTableView` instance. The model will hold the data that will be displayed in
    our table. When data is added or removed from the model, its corresponding view
    will be updated to show the change that has occurred, automatically. The model
    here is an instance of `QStandardItemModel`. The line `QStandardItemModel(1, 3,
    this)` will create an instance with one row and three columns. The `this` keyword
    is used to make the model a child of the `MainWindow` object:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `QTableView` 的一个实例传递给 `appTable`。我们需要为我们的 `QTableView` 实例提供一个模型。该模型将保存将在表格中显示的数据。当数据被添加或从模型中删除时，其相应的视图将自动更新以显示发生的变化。这里的模型是
    `QStandardItemModel` 的一个实例。`QStandardItemModel(1, 3, this)` 这行代码将创建一个具有一行三列的实例。`this`
    关键字用于使模型成为 `MainWindow` 对象的子对象：
- en: '[PRE33]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'This line is used to help us define a custom action that should happen when
    we raise a context menu on the table:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码用于帮助我们定义当我们在表格上打开上下文菜单时应发生的自定义操作：
- en: '[PRE34]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The preceding line is important and enables the headers of our table to stretch
    out fully. This is the result when we omit that line (as shown in an area bounded
    by the red box):'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的这一行很重要，它使得我们的表格标题可以完全拉伸。这是省略该行时的结果（如红色方框所示区域）：
- en: '![](img/66e16468-6820-4379-b2d2-69249b06729d.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/66e16468-6820-4379-b2d2-69249b06729d.png)'
- en: 'Ideally, we want our table to have the following header, so that it looks like
    this:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，我们希望我们的表格具有以下标题，以便看起来像这样：
- en: '![](img/502811d8-85bb-465b-9568-e8c9bccae68f.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/502811d8-85bb-465b-9568-e8c9bccae68f.png)'
- en: 'To set the header for the table, we can do so with the following lines of code:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置表格的标题，我们可以使用以下代码行：
- en: '[PRE35]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The table for displaying the contacts needs headers. The `setHorizontalHeaderItem()`
    method on the model object uses the first parameter to indicate the position where
    the new `QStandardItem(QString())` should be inserted. Because our table uses
    three columns, the line is repeated three times for the headers, Name, Date of
    Birth, and Phone Number:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 显示联系人的表格需要标题。模型对象上的 `setHorizontalHeaderItem()` 方法使用第一个参数来指示新 `QStandardItem(QString())`
    应该插入的位置。由于我们的表格使用三列，因此标题行重复三次，分别是姓名、出生日期和电话号码：
- en: '[PRE36]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: We make `model` the model of our `QTableView` by calling `setModel()` on `appTable`
    and passing `model` as a parameter.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过在 `appTable` 上调用 `setModel()` 并将 `model` 作为参数传递，使 `model` 成为我们的 `QTableView`
    的模型。
- en: To populate our model, which updates its view, `QTableView`, we shall create
    instances of `QStandardItem`. Each cell in our table has to be encapsulated in
    this class. `dateOfBirth` is of the `QDate` type, so we call `toString()` on it
    and pass it to `new QStandardItem()`. `firstItem` is inserted into our model by
    specifying the row and column as in the line `model->setItem(0, 0, firstItem);`.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 为了填充我们的模型，从而更新其视图 `QTableView`，我们将创建 `QStandardItem` 的实例。我们的表格中的每个单元格都必须封装在这个类中。`dateOfBirth`
    是 `QDate` 类型，因此我们在其上调用 `toString()` 并将其传递给 `new QStandardItem()`。通过指定行和列，`firstItem`
    被插入到我们的模型中，如 `model->setItem(0, 0, firstItem);` 这行代码所示。
- en: This is done for the second and third `QStandardItem` objects.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这也适用于第二个和第三个 `QStandardItem` 对象。
- en: 'Now, let''s populate our `formLayout` object. This is of the `QGridLayout` type.
    To insert widgets into our layout, use the following lines of code:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们填充我们的 `formLayout` 对象。这是一个 `QGridLayout` 类型的对象。要向布局中插入小部件，请使用以下代码行：
- en: '[PRE37]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: We add widgets to the layout by calling `addWidget()`, supplying the widget,
    and the row and column it is supposed to fill. `0, 0` will fill the first cell, `0,
    1` will fill the second cell on the first row, and `1, 0` will fill the first
    cell on the second row.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过调用 `addWidget()` 并提供小部件及其应填充的行和列来向布局添加小部件。`0, 0` 将填充第一个单元格，`0, 1` 将填充第一行的第二个单元格，而
    `1, 0` 将填充第二行的第一个单元格。
- en: 'The following code adds buttons to the `QHBoxLayout` instance of `buttonsLayout`:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码向 `buttonsLayout` 的 `QHBoxLayout` 实例添加按钮：
- en: '[PRE38]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: To push `savePushButton` and `newPushButton` to the right, we first add a stretch
    that will expand and fill the empty space by calling `addStretch()` before a call
    to add the widgets is made by `addWidget()`.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 `savePushButton` 和 `newPushButton` 推送到右侧，我们首先通过在调用 `addWidget()` 添加小部件之前调用
    `addStretch()` 来添加一个拉伸，以填充空余空间。
- en: 'Before we come to the menus in the application, add the following code. To
    include menus and a toolbar to our application, add the definition of `createMenuBar()`
    and `createToolBar()` to the `mainwindow.cpp` file:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们来到应用程序的菜单之前，请添加以下代码。为了将菜单和工具栏添加到我们的应用程序中，请将`createMenuBar()`和`createToolBar()`的定义添加到`mainwindow.cpp`文件中：
- en: '[PRE39]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The preceding code is familiar code that adds a toolbar and menus to our window.
    The final lines of code define the `setupSignalsAndSlots()` method:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码是添加工具栏和菜单到我们窗口的熟悉代码。代码的最后几行定义了`setupSignalsAndSlots()`方法：
- en: '[PRE40]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: In the preceding code, we connect the triggered signal of `quitAction` to the
    quit slot of `QApplication`. The triggered signal of `closeToolBarAction` is connected
    to the same, to achieve the effect of closing the application.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们将`quitAction`的触发信号连接到`QApplication`的退出槽。`closeToolBarAction`的触发信号也被连接到相同的槽，以实现关闭应用程序的效果。
- en: The `clicked()` signal of `savePushButton` is connected to the slot, `saveButtonClicked()`.
    Because it is defined within our class, the `this` keyword is used in the third
    parameter.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`savePushButton`的`clicked()`信号被连接到槽`saveButtonClicked()`。因为它是在我们的类中定义的，所以在第三个参数中使用`this`关键字。'
- en: The exact operation that ensures that the information input into the form is
    saved, is defined by the `saveButtonClicked()` function that serves a slot.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 确保输入到表单中的信息被保存的确切操作是由充当槽的`saveButtonClicked()`函数定义的。
- en: 'To define our slot, add the following code to `mainwindow.cpp`:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义我们的槽，请将以下代码添加到`mainwindow.cpp`中：
- en: '[PRE41]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: When `saveButtonClicked()` is invoked, we shall extract the values within the
    controls, `nameLinedEdit`, `dateOfBirthEdit`, and `phoneNumberLineEdit`. We append
    them to the model by calling `appendRow()` on the model object. We can access
    the model object because it is a member point variable in our class definition.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 当`saveButtonClicked()`被调用时，我们将从控件`nameLinedEdit`、`dateOfBirthEdit`和`phoneNumberLineEdit`中提取值。通过在模型对象上调用`appendRow()`，我们将它们追加到模型中。我们可以访问模型对象，因为它是我们类定义中的一个成员指针变量。
- en: After appending the new contact information into the list, all the fields are
    cleared and reset with a call to `clearFields()`.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 将新联系人信息添加到列表后，所有字段都会通过调用`clearFields()`方法被清除并重置。
- en: 'To clear the fields, we call `clearFields()`, which is defined in `mainwindow.cpp`
    as follows:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 为了清除字段，我们调用`clearFields()`，该函数在`mainwindow.cpp`中定义如下：
- en: '[PRE42]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The `nameLineEdit` object is reset to an empty string by calling the `clear()`
    method. This method also doubles as a slot. Another way to set a `QLineEdit` object
    to an empty string is by setting the text to `""` by calling the `setText("")`:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用`clear()`方法，`nameLineEdit`对象被重置为空字符串。此方法也充当槽。将`QLineEdit`对象设置为空字符串的另一种方法是调用`setText("")`来设置文本：
- en: Because `QDateEdit` accepts dates, we have to create an instance of `date` and
    pass it to `setDate()` of `dateOfBirthEdit`.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`QDateEdit`接受日期，所以我们必须创建一个`date`实例并将其传递给`dateOfBirthEdit`的`setDate()`。
- en: 'Compile and run the project. You should see the following output:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 编译并运行项目。你应该会看到以下输出：
- en: '![](img/4d7a1cf3-4101-4cb6-a5dc-1c13ec5f94d5.png)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4d7a1cf3-4101-4cb6-a5dc-1c13ec5f94d5.png)'
- en: 'To add a new contact, complete the form and click on the Save button:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 添加新联系人，请填写表格并点击保存按钮：
- en: '![](img/ef6535e7-49b9-44d5-a228-e984c353d355.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ef6535e7-49b9-44d5-a228-e984c353d355.png)'
- en: 'After clicking on the Save button, you should see the following:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在点击保存按钮后，你应该会看到以下内容：
- en: '![](img/b28d12a8-35dd-48b8-8837-1a2f8a987d87.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b28d12a8-35dd-48b8-8837-1a2f8a987d87.png)'
- en: Adding dialog boxes
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加对话框
- en: There are times when an application needs to inform the user of an action or
    to receive input for further processing. Usually, another window, typically small
    in size, will appear with such information or instructions. In Qt, the `QMessageBox`
    provides us with the functionality to raise alerts and receive input using `QInputDialog`.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，应用程序需要通知用户一个动作或接收输入以进行进一步处理。通常，会出现另一个窗口，通常是小型窗口，其中包含此类信息或说明。在Qt中，`QMessageBox`为我们提供了使用`QInputDialog`发出警报和接收输入的功能。
- en: 'There are different messages, as explained in the following table:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 如下表所述，有不同的消息：
- en: '![](img/6262d2fe-0591-4cc7-b1c7-c4626529abe6.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6262d2fe-0591-4cc7-b1c7-c4626529abe6.png)'
- en: 'To raise an instance of `QMessage` to communicate a recently accomplished task
    to the user, the following code listing can serve as an example:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 为了向用户传达最近完成的任务，可以创建`QMessage`实例的以下代码列表作为示例：
- en: '[PRE43]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The preceding code listing will yield an output such as the following:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码列表将产生如下输出：
- en: '![](img/b70d4daf-c9c9-4298-9519-ec4aab559d4a.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b70d4daf-c9c9-4298-9519-ec4aab559d4a.png)'
- en: This `QMessageBox` instance is being used to communicate to the user that an
    operation was successful.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `QMessageBox` 实例正在被用来向用户传达操作成功。
- en: The icon and number of buttons on a `QMessageBox` instance is configurable.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '`QMessageBox` 实例的图标和按钮数量是可以配置的。'
- en: Let's complete the contact application being written to show how `QMessageBox`
    and `QInputDialog` are used.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们完成正在编写的联系应用，以展示如何使用 `QMessageBox` 和 `QInputDialog`。
- en: Choose to build upon the example in the previous section or create a new folder
    with the three main files we have been working with so far, that is, `main.cpp`,
    `mainwindow.cpp`, and `mainwindow.h`.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 选择基于上一节中的示例进行构建，或者创建一个包含我们迄今为止一直在使用的三个主要文件的新文件夹，即 `main.cpp`、`mainwindow.cpp`
    和 `mainwindow.h`。
- en: 'The `mainwindow.h` file should contain the following:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '`mainwindow.h` 文件应包含以下内容：'
- en: '[PRE44]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: The only notable change is the increase in the number of slots. The `saveButtonClicked()`
    slot will be reimplemented to pop up a message telling the user of a successful
    save action. The `aboutDialog()` slot will be used to show an about message. This
    is usually a window that conveys information about the program and usually contains
    copyright, help, and contact information.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一值得注意的是槽的数量有所增加。`saveButtonClicked()` 槽将被重新实现，以弹出一个消息告知用户保存操作成功。`aboutDialog()`
    槽将用于显示关于信息。这通常是一个传达有关程序信息的窗口，通常包含版权、帮助和联系方式。
- en: The `clearAllRecords()` slot will invoke a question message box that will prompt
    the user of the destructive action about to be taken. `deleteSavedRecord()` will
    use `QInputDialog` to accept input from the user as to which row to remove from
    our list of saved contacts.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '`clearAllRecords()` 槽将调用一个询问消息框，提示用户即将执行破坏性操作。`deleteSavedRecord()` 将使用 `QInputDialog`
    接受用户输入，以确定从我们的联系人列表中删除哪一行。'
- en: '`QAction *aboutQtAction` will be used to invoke the slot to display the about
    page or message. We shall also add a toolbar action, `QAction *deleteOneEntryToolBarAction`,
    that will be used to invoke a dialog box that will receive input from the user.
    Observe these three inputs, `QPixmap deleteIcon`, `QPixmap clearIcon`, and `QPixmap
    deleteIcon`, as we add more actions to the window and, likewise, the `QPushButton*clearPushButton`,
    which is replacing `newPushButton` in the previous example.'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`QAction *aboutQtAction` 将用于调用显示关于页面或消息的插槽。我们还将添加一个工具栏操作 `QAction *deleteOneEntryToolBarAction`，它将用于调用一个接收用户输入的对话框。观察这三个输入，`QPixmap
    deleteIcon`、`QPixmap clearIcon` 和 `QPixmap deleteIcon`，随着我们向窗口添加更多操作，同样还有 `QPushButton*clearPushButton`，它正在替换上一个示例中的
    `newPushButton`。'
- en: Everything else about the header file remains the same. The two extra classes
    imported are the `QMessageBox` and `QInputDialog` classes.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 关于头文件的其他内容保持不变。额外导入的两个类是 `QMessageBox` 和 `QInputDialog` 类。
- en: 'In the `mainwindow.cpp` file, we define the default constructor of the `MainWindow`
    class as follows:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `mainwindow.cpp` 文件中，我们定义 `MainWindow` 类的默认构造函数如下：
- en: '[PRE45]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: This time, we want to give the whole application an icon that will show up in
    a taskbar or dock when it is running. To do this, we call the `setWindowIcon()`
    method and pass in an instance of `QIcon("window_logo.png")`.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我们希望给整个应用程序添加一个图标，当它在运行时会在任务栏或托盘上显示。为此，我们调用 `setWindowIcon()` 方法，并传入 `QIcon("window_logo.png")`
    实例。
- en: The `window_logo.png` file is included in the project, along with the other
    image files being used as an attachment on the Packt site for this book.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '`window_logo.png` 文件包含在项目中，以及其他用作此书 Packt 网站附件的图像文件。'
- en: Everything remains the same as before in the previous example. The methods that
    are setting up the various parts of the application have been modified slightly.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的示例中，一切保持不变。设置应用程序各个部分的方法已经略有修改。
- en: 'The `setupSignalsAndSlots()` method is implemented with the following lines
    of code:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '`setupSignalsAndSlots()` 方法使用以下代码实现：'
- en: '[PRE46]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The `triggered()` signal of `aboutAction` is connected to the `aboutDialog()`.
    slot. This method raises a dialog box that is used to display a window with some
    information about the application and a logo of the app (which we have defined
    by calling `setWindowIcon()`):'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '`aboutAction` 的 `triggered()` 信号连接到 `aboutDialog()` 插槽。此方法会弹出一个对话框，用于显示包含有关应用程序的一些信息和应用程序标志（我们通过调用
    `setWindowIcon()` 定义）的窗口：'
- en: '[PRE47]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The static method, `QMessageBox::about()`, is called with `this` as its first
    argument. The title of the window is the second argument, and a string that describes
    the application is given as the third parameter.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 静态方法`QMessageBox::about()`以`this`作为其第一个参数被调用。窗口的标题是第二个参数，第三个参数是一个描述应用程序的字符串。
- en: 'At runtime, click on the Help menu and then click on About. You should see
    the following output:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行时，点击帮助菜单，然后点击关于。你应该看到以下输出：
- en: '![](img/c4a86188-c4c5-434a-9052-e43a41ea2e2d.png)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4a86188-c4c5-434a-9052-e43a41ea2e2d.png)'
- en: 'The third signal-slot connection that is established in the `setupSignalsAndSlots()`
    method is as follows:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在`setupSignalsAndSlots()`方法中建立的第三个信号-槽连接如下：
- en: '[PRE48]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'In the `clearAllRecords()` slot, we will first ask the user with the aid of
    a prompt if they are sure they want all the items in a model to be removed. This
    can be achieved by the following code:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在`clearAllRecords()`槽中，我们将首先使用提示来询问用户，他们是否确定要删除模型中的所有项目。这可以通过以下代码实现：
- en: '[PRE49]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '`QMessageBox::question` is used to raise a dialog to ask the user a question.
    It has two main buttons, Yes and No. `QMessageBox::No|QMessageBox::Default` sets
    the No option as the default selection. `QMessageBox::No|QMessageBox::Escape`
    makes the escape key have the same effect as clicking on the No option.'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '`QMessageBox::question`用于弹出一个对话框来询问用户问题。它有两个主要按钮，是和否。`QMessageBox::No|QMessageBox::Default`将“否”选项设置为默认选择。`QMessageBox::No|QMessageBox::Escape`使得Esc键具有与点击“否”选项相同的效果。'
- en: 'Whatever option the user chooses will be stored as `int` in the status variable.
    It will then be compared to the `QMessageBox::Yes` constant. This way of asking
    the user a Yes or No question is not informative enough, especially when a destructive
    operation will ensue when the user clicks Yes. We shall use the alternative form
    as defined in `clearAllRecords()`:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 用户选择的任何选项都将存储为`int`类型的`status`变量。然后，它将与`QMessageBox::Yes`常量进行比较。这种方式询问用户是或否的问题信息不足，尤其是在用户点击“是”时将执行破坏性操作的情况下。我们将在`clearAllRecords()`中使用定义的替代形式：
- en: '[PRE50]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: As usual, the parent object is pointed to by `this`. The second parameter is
    the title of the dialog box and the string of the question follows. We shall make
    the first option verbose by passing Yes, Delete all records. The user, upon reading,
    will know what effect the clicking of the button will have. The No ! parameter will
    be displayed on the button that represents the other answer to the question. `QString()`
    is being passed so that we don't display the third button. When the first button
    is clicked, `0` will be returned to `status`. When the second button or option
    is clicked, `1` will be returned. By specifying `1`, we make the `"No !"` button
    the default button of the dialog box. We select `1` again, as the last parameter
    specifies that `"No !"` should be the button selected when the escape button is
    pressed.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 如同往常，父对象由`this`指向。第二个参数是对话框的标题，接下来是问题的字符串。我们将第一个选项描述得详细一些，通过传递“是，删除所有记录”。用户阅读后，将知道点击按钮会有什么效果。`No
    !`参数将显示在代表问题另一个答案的按钮上。传递`QString()`是为了不显示第三个按钮。当点击第一个按钮时，`status`将返回`0`。当点击第二个按钮或选项时，将返回`1`。通过指定`1`，我们使“No
    !”按钮成为对话框的默认按钮。我们再次选择`1`，因为最后一个参数指定当按下Esc键时应该选择“No !”按钮。
- en: If the user clicks on the Yes, Delete all records button, then status will store
    `0`. In the body of the `if` statement, we obtain the number of rows in our model
    object. A call to `removeRows` is made and we specify that all the entries from
    the first, represented by `0`, to the `rowCount`, should be removed. However,
    if the user clicks on the No ! button, the application will do nothing, as we
    don't specify that in the `if` statement.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户点击“是，删除所有记录”按钮，则`status`将存储`0`。在`if`语句的主体中，我们获取我们的模型对象的行数。调用`removeRows`并指定从第一个（由`0`表示）到`rowCount`的所有条目都应该被删除。然而，如果用户点击“No
    !”按钮，应用程序将不执行任何操作，因为我们没有在`if`语句中指定这一点。
- en: 'The dialog window should appear as follows when the Clear All button is clicked:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 当点击“清除所有”按钮时，对话框窗口应如下显示：
- en: '![](img/aaf6dc67-d05e-484b-ba4c-4211f55bc803.png)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aaf6dc67-d05e-484b-ba4c-4211f55bc803.png)'
- en: 'The `saveButtonClicked()` slot has also been modified to show a simple message
    to the user that the operation has been successful, as demonstrated in the following
    block of code:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '`saveButtonClicked()`槽也被修改，向用户显示一个简单的消息，表明操作已成功，如下代码块所示：'
- en: '[PRE51]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The two last parameters are constants that prevent buttons from showing in the
    message box.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 最后两个参数是常数，用于防止按钮在消息框中显示。
- en: 'To allow the application to remove certain rows from the table, the `deleteSaveRecords()` method
    is used to raise an input-based dialog box that receives the `rowId` of the row
    we want to remove through the model:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 为了允许应用程序从表中删除某些行，使用`deleteSaveRecords()`方法来弹出一个基于输入的对话框，该对话框接收我们想要删除的行的`rowId`：
- en: '[PRE52]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: The `this` keyword refers to the parent object. The second parameter to the
    call of the static method `QInputDialog::getInt()` is used as the title of the
    dialog window. The request is captured in the second parameter. The third parameter
    here is used to specify the default number of the input field. `1`, and `model->rowCount()`,
    are the minimum and maximum values that should be accepted.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '`this`关键字指的是父对象。静态方法`QInputDialog::getInt()`的第二个参数用作对话框窗口的标题。请求被捕获在第二个参数中。这里的第三个参数用于指定输入字段的默认数值。`1`和`model->rowCount()`是应接受的最低和最高值。'
- en: The last but one parameter, `1`, is the incremental step between the minimum
    and maximum value. `True` or `False` will be stored in `&ok`. When the user clicks
    OK, `True` will be stored in `&ok` and, based on that, the `if` statement will
    call the `removeRow` on the model object. Whatever value that the user inputs
    will be passed to `rowId`. We pass `rowId-1` to get the actual index of the row
    in the model.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 倒数第二个参数`1`是最低值和最高值之间的增量步长。`True`或`False`将被存储在`&ok`中。当用户点击“确定”时，`True`将被存储在`&ok`中，基于这一点，`if`语句将调用模型对象的`removeRow`。用户输入的任何值都将传递给`rowId`。我们传递`rowId-1`以获取模型中行的实际索引。
- en: 'The connection to this slot is made by executing the following command:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行以下命令建立与此槽的连接：
- en: '[PRE53]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '`deleteOneEntryToolBarAction` is the last but one action on the toolbar.'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '`deleteOneEntryToolBarAction`是工具栏上的倒数第二个操作。'
- en: 'The following screenshot is what will appear when the user clicks on this action:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图是用户点击此操作时将出现的界面：
- en: '![](img/f66acf9a-878e-4a38-9202-a1832c602367.png)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f66acf9a-878e-4a38-9202-a1832c602367.png)'
- en: 'The method that sets up the toolbar is given as follows:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 设置工具栏的方法如下所示：
- en: '[PRE54]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: All the other methods are borrowed from the previous section and can be obtained
    from the source code attached to this book.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 所有其他方法都是从上一节借用的，可以从本书附带的源代码中获得。
- en: 'To recap, this is what you should see after compiling and running the project:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，编译并运行项目后你应该看到以下内容：
- en: '![](img/0a4b9f91-2d37-4eb4-91d4-818f48da3985.png)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0a4b9f91-2d37-4eb4-91d4-818f48da3985.png)'
- en: Remember that the reason we already have an entry in the model object is because
    we created such an entry within the `setupCoreWidgets()` method.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，我们已经在模型对象中有一个条目的原因是因为我们在`setupCoreWidgets()`方法中创建了这样一个条目。
- en: Fill in the name, date of birth, and phone number fields and click on Save.
    This will add an extra line to the table in the window. A dialog message will
    tell you if the operation was successful.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 填写姓名、出生日期和电话号码字段，然后点击保存。这将向窗口中的表格添加一行。一个对话框消息将告诉你操作是否成功。
- en: To delete a row within the table, select the desired row and click on the recycle
    bin icon, and confirm whether you really want to delete the entry.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 要在表中删除一行，选择所需的行并点击回收站图标，然后确认你是否真的想要删除条目。
- en: Summary
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have seen how to create menus, toolbars, and how to use
    dialog boxes to receive further input and display information to the user.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了如何创建菜单、工具栏，以及如何使用对话框接收进一步输入并向用户显示信息。
- en: In [Chapter 5](48ced144-5e85-4e89-9ddf-80e876e83b0f.xhtml), *Managing Events,
    Custom Signals, and Slots*, we will explore the use of events and more on signals
    and slots.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第5章](48ced144-5e85-4e89-9ddf-80e876e83b0f.xhtml)“管理事件、自定义信号和槽”中，我们将探讨事件的使用以及更多关于信号和槽的内容。
