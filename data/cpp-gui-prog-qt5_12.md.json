["```cpp\nQT += core gui network\n```", "```cpp\n#include <QMainWindow> \n#include <QDebug> \n#include <QNetworkAccessManager> \n#include <QNetworkRequest> \n#include <QNetworkReply> \n#include <QFile> \n#include <QFileInfo> \n#include <QFileDialog> \n#include <QListWidgetItem> \n#include <QMessageBox> \n```", "```cpp\nprivate: \n   Ui::MainWindow *ui; \n QNetworkAccessManager* manager; \n\n   QString ftpAddress; \n   int ftpPort; \n   QString username; \n   QString password; \n\n   QNetworkReply* downloadFileListReply; \n   QNetworkReply* uploadFileListReply; \n\n   QNetworkReply* uploadFileReply; \n   QNetworkReply* downloadFileReply; \n\n   QStringList fileList; \n   QString uploadFileName; \n   QString downloadFileName; \n\npublic:\n   void getFileList();\n```", "```cpp\nMainWindow::MainWindow(QWidget *parent) : \n   QMainWindow(parent), \n   ui(new Ui::MainWindow) \n{ \n   ui->setupUi(this); \n\n manager = new QNetworkAccessManager(this); \n\n   ftpAddress = \"ftp://127.0.0.1/\"; \n   ftpPort = 21; \n   username = \"tester\"; // Put your FTP user name here\n   password = \"123456\"; // Put your FTP user password here \n   getFileList(); \n} \n```", "```cpp\nvoid MainWindow::getFileList() \n{ \n   QUrl ftpPath; \n   ftpPath.setUrl(ftpAddress + \"files.txt\"); \n   ftpPath.setUserName(username); \n   ftpPath.setPassword(password); \n   ftpPath.setPort(ftpPort); \n\n   QNetworkRequest request; \n   request.setUrl(ftpPath); \n\n   downloadFileListReply = manager->get(request); \n   connect(downloadFileListReply, &QNetworkReply::finished, this, \n   &MainWindow::downloadFileListFinished); \n} \n```", "```cpp\nvoid MainWindow::downloadFileListFinished() \n{ \n   if(downloadFileListReply->error() != QNetworkReply::NoError) \n   { \n         QMessageBox::warning(this, \"Failed\", \"Failed to load file \n         list: \" + downloadFileListReply->errorString()); \n   } \n   else \n   { \n         QByteArray responseData; \n         if (downloadFileListReply->isReadable()) \n         { \n               responseData = downloadFileListReply->readAll(); \n         } \n\n         // Display file list \n         ui->fileList->clear(); \n         fileList = QString(responseData).split(\",\"); \n\n         if (fileList.size() > 0) \n         { \n               for (int i = 0; i < fileList.size(); i++) \n               { \n                     if (fileList.at(i) != \"\") \n                     { \n                           ui->fileList->addItem(fileList.at(i)); \n                     } \n               } \n         } \n   } \n} \n```", "```cpp\nfilename1,filename2,filename3 \n```", "```cpp\nvoid MainWindow::on_openButton_clicked() \n{ \n   QString fileName = QFileDialog::getOpenFileName(this, \"Select \n   File\", qApp->applicationDirPath()); \n   ui->uploadFileInput->setText(fileName); \n}\n```", "```cpp\nvoid MainWindow::on_uploadButton_clicked() \n{ \n   QFile* file = new QFile(ui->uploadFileInput->text()); \n   QFileInfo fileInfo(*file); \n   uploadFileName = fileInfo.fileName(); \n\n   QUrl ftpPath; \n   ftpPath.setUrl(ftpAddress + uploadFileName); \n   ftpPath.setUserName(username); \n   ftpPath.setPassword(password); \n   ftpPath.setPort(ftpPort); \n\n   if (file->open(QIODevice::ReadOnly)) \n   { \n         ui->uploadProgress->setEnabled(true); \n         ui->uploadProgress->setValue(0); \n\n         QNetworkRequest request; \n         request.setUrl(ftpPath); \n\n         uploadFileReply = manager->put(request, file); \n         connect(uploadFileReply, \n         SIGNAL(uploadProgress(qint64,qint64)), this, \n         SLOT(uploadFileProgress(qint64,qint64))); \n         connect(uploadFileReply, SIGNAL(finished()), this,  \n         SLOT(uploadFileFinished())); \n   } \n   else \n   { \n         QMessageBox::warning(this, \"Invalid File\", \"Failed to open \n         file for upload.\"); \n   } \n} \n\n```", "```cpp\nvoid MainWindow::uploadFileProgress(qint64 bytesSent, qint64 bytesTotal) \n{ \n   qint64 percentage = 100 * bytesSent / bytesTotal; \n   ui->uploadProgress->setValue((int) percentage); \n} \n```", "```cpp\nvoid MainWindow::uploadFileFinished() \n{ \n   if(uploadFileReply->error() != QNetworkReply::NoError) \n   { \n         QMessageBox::warning(this, \"Failed\", \"Failed to upload file: \" \n         + uploadFileReply->errorString()); \n   } \n   else \n   { \n         QMessageBox::information(this, \"Success\", \"File successfully \n         uploaded.\"); \n   } \n} \n\n```", "```cpp\n// Add new file to file list array if not exist yet \nbool exists = false; \nif (fileList.size() > 0) \n{ \n   for (int i = 0; i < fileList.size(); i++) \n   { \n         if (fileList.at(i) == uploadFileName) \n         { \n               exists = true; \n         } \n   } \n} \n\nif (!exists) \n{ \n   fileList.append(uploadFileName); \n} \n```", "```cpp\n// Create new files.txt \nQString fileName = \"files.txt\"; \nQFile* file = new QFile(qApp->applicationDirPath() + \"/\" + fileName); \nfile->open(QIODevice::ReadWrite); \nif (fileList.size() > 0) \n{ \n   for (int j = 0; j < fileList.size(); j++) \n   { \n         if (fileList.at(j) != \"\") \n         { \n               file->write(QString(fileList.at(j) + \",\").toUtf8()); \n         } \n   } \n} \nfile->close(); \n```", "```cpp\n// Re-open the file \nQFile* newFile = new QFile(qApp->applicationDirPath() + \"/\" + fileName); \nif (newFile->open(QIODevice::ReadOnly)) \n{ \n   // Update file list to server \n   QUrl ftpPath; \n   ftpPath.setUrl(ftpAddress + fileName); \n   ftpPath.setUserName(username); \n   ftpPath.setPassword(password); \n   ftpPath.setPort(ftpPort); \n\n   QNetworkRequest request; \n   request.setUrl(ftpPath); \n   uploadFileListReply = manager->put(request, newFile); \n   connect(uploadFileListReply, SIGNAL(finished()), this, SLOT(uploadFileListFinished())); \n   file->close(); \n} \n```", "```cpp\nvoid MainWindow::uploadFileListFinished() \n{ \n   if(uploadFileListReply->error() != QNetworkReply::NoError) \n   { \n         QMessageBox::warning(this, \"Failed\", \"Failed to update file list: \" + uploadFileListReply->errorString()); \n   } \n   else \n   { \n         getFileList(); \n   } \n} \n\n```", "```cpp\nvoid MainWindow::on_setFolderButton_clicked() \n{ \n   QString folder = QFileDialog::getExistingDirectory(this, tr(\"Open Directory\"), qApp->applicationDirPath(), QFileDialog::ShowDirsOnly); \n   ui->downloadPath->setText(folder); \n} \n```", "```cpp\nvoid MainWindow::on_fileList_itemDoubleClicked(QListWidgetItem *item) \n{ \n   downloadFileName = item->text(); \n\n   // Check folder \n   QString folder = ui->downloadPath->text(); \n   if (folder != \"\" && QDir(folder).exists()) \n   { \n         QUrl ftpPath; \n         ftpPath.setUrl(ftpAddress + downloadFileName); \n         ftpPath.setUserName(username); \n         ftpPath.setPassword(password); \n         ftpPath.setPort(ftpPort); \n\n         QNetworkRequest request; \n         request.setUrl(ftpPath); \n\n         downloadFileReply = manager->get(request); \n         connect(downloadFileReply, \n         SIGNAL(downloadProgress(qint64,qint64)), this, \n         SLOT(downloadFileProgress(qint64,qint64))); \n         connect(downloadFileReply, SIGNAL(finished()), this, \n         SLOT(downloadFileFinished())); \n   } \n   else \n   { \n         QMessageBox::warning(this, \"Invalid Path\", \"Please set the \n         download path before download.\"); \n   } \n} \n```", "```cpp\nvoid MainWindow::downloadFileProgress(qint64 byteReceived,qint64 bytesTotal) \n{ \n   qint64 percentage = 100 * byteReceived / bytesTotal; \n   ui->downloadProgress->setValue((int) percentage); \n} \n```", "```cpp\nvoid MainWindow::downloadFileFinished() \n{ \n   if(downloadFileReply->error() != QNetworkReply::NoError) \n   { \n         QMessageBox::warning(this, \"Failed\", \"Failed to download \n         file: \" + downloadFileReply->errorString()); \n   } \n   else \n   { \n         QByteArray responseData; \n         if (downloadFileReply->isReadable()) \n         { \n               responseData = downloadFileReply->readAll(); \n         } \n\n         if (!responseData.isEmpty()) \n         { \n               // Download finished \n               QString folder = ui->downloadPath->text(); \n               QFile file(folder + \"/\" + downloadFileName); \n               file.open(QIODevice::WriteOnly); \n               file.write((responseData)); \n               file.close(); \n\n               QMessageBox::information(this, \"Success\", \"File \n               successfully downloaded.\"); \n         } \n   } \n}\n```"]