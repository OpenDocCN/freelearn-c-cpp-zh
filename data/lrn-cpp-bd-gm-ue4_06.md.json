["```cpp\nstruct Player \n{ \n  string name; \n  int hp; \n}; \n```", "```cpp\nPlayer me;    // create an instance of Player, called me \n```", "```cpp\nme.name = \"Tom\"; \nme.hp = 100; \n```", "```cpp\nstruct Player \n{ \n  string name; \n  int hp; \n  // A member function that reduces player hp by some amount \n  void damage( int amount )      \n  { \n    hp -= amount; \n  } \n  void recover( int amount ) \n  { \n    hp += amount; \n  } \n}; \n```", "```cpp\nvoid damage( int amount ) \n{ \n  this->hp -= amount; \n} \n```", "```cpp\n#include <iostream> \n#include <string> \nusing namespace std; \nint main() \n{ \n  string s = \"strings are objects\"; \n  s.append( \"!!\" ); // add on \"!!\" to end of the string! \n  cout << s << endl; \n} \n```", "```cpp\nobjectName.memberFunction(); \n```", "```cpp\nplayer.damage( 15 );  // player takes 15 damage \n```", "```cpp\nplayer.hp -= 15;      // player takes 15 damage \n```", "```cpp\nstruct Player \n{ \n  string name; \n  int hp; \n  int armorClass; \n}; \n```", "```cpp\nplayer.hp -= 15 - player.armorClass; // non OOP \n```", "```cpp\nstruct Player \n{ \n  string name; \n  int hp; \n  int armorClass;  \n  void damage( int dmgAmount )                \n  { \n    hp -= dmgAmount - armorClass; \n  } \n}; \n```", "```cpp\nstruct Armor \n{ \n  string name; \n  int armorClass; \n  double durability; \n}; \n```", "```cpp\nstruct Player \n{ \n  string name; \n  int hp; \n  Armor armor; // Player has-an Armor \n}; \n```", "```cpp\nplayer.hp -= 15 - player.armorClass; // bad: direct member access \n```", "```cpp\nplayer.damage( 15 );  // right: access through member function \n```", "```cpp\nstruct Player \n{ \nprivate:        // begins private section.. cannot be accessed  \n                // outside the class until \n  string name; \n  int hp;  \n  int armorClass; \npublic:         //  until HERE. This begins the public section \n  // This member function is accessible outside the struct \n  // because it is in the section marked public: \n  void damage( int amount ) \n  { \n    int reduction = amount - armorClass; \n    if( reduction < 0 ) // make sure non-negative! \n      reduction = 0; \n    hp -= reduction; \n  } \n}; \n```", "```cpp\nclass Player // we used class here instead of struct! \n{ \n  string name; \n  // \n}; \n```", "```cpp\nPlayer me; \ncout << me.name << endl; \n```", "```cpp\nme.name = \"William\"; \n```", "```cpp\n    main.cpp(24) : error C2248: 'Player::name' : cannot access private \n    member declared in class 'Player'\n```", "```cpp\nclass Player \n{ \nprivate: \n  string name;  // inaccessible outside this class! \n                //  rest of class as before \npublic: \n  // A getter function retrieves a copy of a variable for you \n  string getName() \n  { \n    return name; \n  } \n}; \n```", "```cpp\ncout << player.getName() << endl; \n```", "```cpp\nclass Player \n{ \nprivate: \n  string name;  // inaccessible outside this class! \n                //  rest of class as before \npublic: \n  // A getter function retrieves a copy of a variable for you \n  string getName() \n  { \n    return name; \n  } \n  void setName( string newName ) \n  { \n    name = newName; \n  } \n}; \n```", "```cpp\nstring getName(){ return name; } \nvoid setName( string newName ){ name = newName; } \n```", "```cpp\nvoid setHp( int newHp ) \n{ \n  // guard the hp variable from taking on negative values \n  if( newHp < 0 ) \n  { \n    cout << \"Error, player hp cannot be less than 0\" << endl; \n    newHp = 0; \n  } \n  hp = newHp; \n} \n```", "```cpp\n#include <iostream> \n#include <string> \nusing namespace std; \nclass Player \n{ \nprivate: \n  string name;  // inaccessible outside this class! \npublic: \n  string getName(){ return name; } \n// The constructor! \n  Player() \n  { \n    cout << \"Player object constructed\" << endl; \n    name = \"Diplo\"; \n  } \n  // ~Destructor (~ is not a typo!) \n  ~Player() \n  { \n    cout << \"Player object destroyed\" << endl; \n  } \n}; \n\nint main() \n  { \n    Player player; \n    cout << \"Player named '\" << player.getName() << \"'\" << endl; \n  } \n  // player object destroyed here \n```", "```cpp\nPlayer object constructed \nPlayer named 'Diplo' \nPlayer object destroyed \n```", "```cpp\n#include <iostream> \nusing namespace std; \nclass Mammal \n{ \nprotected: \n  // protected variables are like privates: they are \n  // accessible in this class but not outside the class. \n  // the difference between protected and private is \n  // protected means accessible in derived subclasses also \nint hp; \n  double speed; \n\npublic: \n  // Mammal constructor - runs FIRST before derived class ctors! \n  Mammal() \n  { \n    hp = 100; \n    speed = 1.0; \n    cout << \"A mammal is created!\" << endl; \n  } \n  ~Mammal() \n  { \n    cout << \"A mammal has fallen!\" << endl; \n  } \n  // Common function to all Mammals and derivatives \n  void breathe() \n  { \n    cout << \"Breathe in.. breathe out\" << endl; \n  } \n  virtual void talk() \n  { \n    cout << \"Mammal talk.. override this function!\" << endl; \n  } \n  // pure virtual function, (explained below) \n  virtual void walk() = 0; \n}; \n\n// This next line says \"class Dog inherits from class Mammal\" \nclass Dog : public Mammal // : is used for inheritance \n{ \npublic: \n  Dog() \n  { \n    cout << \"A dog is born!\" << endl; \n  } \n  ~Dog() \n  { \n    cout << \"The dog died\" << endl; \n  } \n  virtual void talk() override \n  { \n    cout << \"Woof!\" << endl; // dogs only say woof! \n  } \n  // implements walking for a dog \n  virtual void walk() override \n  { \n    cout << \"Left front paw & back right paw, right front paw &  \n     back left paw.. at the speed of \" << speed << endl; \n  } \n}; \n\nclass Cat : public Mammal \n{ \npublic: \n  Cat() \n  { \n    cout << \"A cat is born\" << endl; \n  } \n  ~Cat() \n  { \n    cout << \"The cat has died\" << endl; \n  } \n  virtual void talk() override \n  { \n    cout << \"Meow!\" << endl; \n  } \n  // implements walking for a cat.. same as dog! \n  virtual void walk() override \n  { \n    cout << \"Left front paw & back right paw, right front paw &  \n     back left paw.. at the speed of \" << speed << endl; \n  } \n}; \n\nclass Human : public Mammal \n{ \n  // Data member unique to Human (not found in other Mammals) \n  bool civilized; \npublic: \n  Human() \n  { \n    cout << \"A new human is born\" << endl; \n    speed = 2.0; // change speed. Since derived class ctor \n    // (ctor is short for constructor!) runs after base  \n    // class ctor, initialization sticks initialize member  \n    // variables specific to this class \n    civilized = true; \n  } \n  ~Human() \n  { \n    cout << \"The human has died\" << endl; \n  } \n  virtual void talk() override \n  { \n    cout << \"I'm good looking for a .. human\" << endl; \n  } \n  // implements walking for a human.. \n  virtual void walk() override \n  { \n    cout << \"Left, right, left, right at the speed of \" << speed  \n     << endl; \n  } \n  // member function unique to human derivative \n  void attack( Human & other ) \n  { \n    // Human refuses to attack if civilized \n    if( civilized ) \n      cout << \"Why would a human attack another? I refuse\" <<  \n       endl; \n    else \n      cout << \"A human attacks another!\" << endl; \n  } \n}; \n\nint main() \n{ \n  Human human; \n  human.breathe(); // breathe using Mammal base class  \n   functionality \n  human.talk(); \n  human.walk(); \n\n  Cat cat; \n  cat.breathe(); // breathe using Mammal base class functionality \n  cat.talk(); \n  cat.walk(); \n\n  Dog dog; \n  dog.breathe(); \n  dog.talk(); \n  dog.walk(); \n} \n```", "```cpp\nclass Human \n{ \n  Mammal mammal; \n}; \n```", "```cpp\nvirtual void walk() = 0; \n```", "```cpp\nint main() \n{ \n  Mammal mammal; \n} \n```", "```cpp\nerror C2259: 'Mammal' : cannot instantiate abstract class \n```", "```cpp\nclass Cat : public Mammal \n```", "```cpp\nCat cat; \nMammal* mammalPtr = &cat; // Point to the Cat as if it were a  \n                          // Mammal \n```", "```cpp\nclass Cat : private Mammal \n```", "```cpp\n// Mammal.h \n#pragma once \nclass Mammal \n{ \nprotected: \n  int hp; \n  double speed; \n\npublic: \n  Mammal(); \n  ~Mammal(); \n  void breathe(); \n  virtual void talk(); \n  // pure virtual function,  \n  virtual void walk() = 0; \n}; \n```", "```cpp\n// Mammal.cpp \n#include <iostream> \nusing namespace std; \n\n#include \"Mammal.h\" \nMammal::Mammal() // Notice use of :: (scope resolution operator) \n{ \n  hp = 100; \n  speed = 1.0; \n  cout << \"A mammal is created!\" << endl; \n} \nMammal::~Mammal() \n{ \n  cout << \"A mammal has fallen!\" << endl; \n} \nvoid Mammal::breathe() \n{ \n  cout << \"Breathe in.. breathe out\" << endl; \n} \nvoid Mammal::talk() \n{ \n  cout << \"Mammal talk.. override this function!\" << endl; \n} \n```", "```cpp\n//King.h\n\n#pragma once\n#include <string>\n\nusing namespace std;\n\nclass King\n{\npublic:\n    ~King();\n\n    static King* getInstance();\n\n    void setName(string n) { name = n; };\n    string getName() const { return name; };\n    //Add more functions for King\nprivate:\n    King();\n\n    static King* instance;\n    string name;\n};\n```", "```cpp\n//King.cpp\n\n#include \"King.h\"\n\nKing* King::instance = nullptr;\n\nKing::King()\n{\n}\n\nKing::~King()\n{\n}\n\nKing* King::getInstance()\n{\n    if (instance == nullptr)\n    {\n        instance = new King();\n    }\n    return instance;\n}\n```", "```cpp\n    King::getInstance()->setName(\"Arthur\");\n    cout << \"I am King \" << King::getInstance()->getName();\n```", "```cpp\nKing::getInstance()->setName(\"Arthur\");\n```"]