- en: '*Chapter 5*: Implementing Transforms'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第5章*：实现变换'
- en: In this chapter, you will implement a structure that holds position, rotation,
    and scale data. This structure is a transform. A transform maps from one space
    to another space. Position, rotation, and scale could also be stored in a 4x4
    matrix, so why would you want to use an explicit transform struct instead of a
    matrix? The answer is interpolation. Matrices don't interpolate well, but transform
    structures do.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将实现一个包含位置、旋转和缩放数据的结构。这个结构就是一个变换。变换将一个空间映射到另一个空间。位置、旋转和缩放也可以存储在4x4矩阵中，那么为什么要使用显式的变换结构而不是矩阵？答案是插值。矩阵的插值效果不好，但变换结构可以。
- en: Interpolating between two matrices is difficult because rotation and scale are
    stored in the same components of the matrix. Because of this, interpolating between
    two matrices doesn't yield the result you would expect. Transforms solve this
    problem by storing the position, rotation, and scale components separately.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在两个矩阵之间进行插值是困难的，因为旋转和缩放存储在矩阵的相同组件中。因此，在两个矩阵之间进行插值不会产生您期望的结果。变换通过分别存储位置、旋转和缩放组件来解决了这个问题。
- en: 'In this chapter, you will implement a transform structure and the common operations
    that you need to be able to perform in transforms. By the end of this chapter,
    you should be able to do the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将实现一个变换结构以及您需要执行的常见操作。在本章结束时，您应该能够做到以下事情：
- en: Understand what a transform is
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解什么是变换
- en: Understand how to combine transforms
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解如何组合变换
- en: Convert between transforms and matrices
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在变换和矩阵之间进行转换
- en: Understand how to apply transforms to points and vectors
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解如何将变换应用到点和向量
- en: Important information
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: In this chapter, you will implement a transform structure that represents position,
    rotation, and scale. To find out more about transforms, how they relate to matrices,
    and how they fit into game hierarchies, check out [http://gabormakesgames.com/transforms.html](http://gabormakesgames.com/transforms.html).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将实现一个表示位置、旋转和缩放的变换结构。要了解更多关于变换，它们与矩阵的关系以及它们如何适应游戏层次结构，请访问[http://gabormakesgames.com/transforms.html](http://gabormakesgames.com/transforms.html)。
- en: Creating the transform
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建变换。
- en: 'Transforms are simple structures. A transform contains a position, rotation,
    and scale. Position and scale are vectors and rotation is a quaternion. Transforms
    can be combined hierarchically, but this parent-child relationship should not
    be a part of the actual transform structure. The following steps will guide you
    through creating a transform structure:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 变换是简单的结构。一个变换包含一个位置、旋转和缩放。位置和缩放是向量，旋转是四元数。变换可以按层次结构组合，但这种父子关系不应该是实际变换结构的一部分。以下步骤将指导您创建一个变换结构：
- en: Create a new file, `Transform.h`. This file is required to declare the transform
    structure.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新文件，`Transform.h`。这个文件是必需的，用来声明变换结构。
- en: 'Begin declaring the `Transform` structure in this new file. Start with the
    properties of the transform—`position`, `rotation`, and `scale`:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个新文件中声明`Transform`结构。从变换的属性—`position`、`rotation`和`scale`开始：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create a constructor that takes a position, rotation, and scale. This constructor
    should assign these values to the appropriate members of the Transform struct:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个构造函数，它接受一个位置、旋转和缩放。这个构造函数应该将这些值分配给`Transform`结构的适当成员：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'A blank transform should have no position or rotation and a scale of one. By
    default, the `scale` component will be created as `(0, 0, 0)`. To solve this,
    the default constructor of the `Transform` struct needs to initialize the `scale`
    to the correct value:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 空变换不应该有位置或旋转，缩放为1。默认情况下，`scale`组件将被创建为`(0, 0, 0)`。为了解决这个问题，`Transform`结构的默认构造函数需要将`scale`初始化为正确的值：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `Transform` structure is fairly straightforward; all of its members are
    public. A transform has a position, rotation, and scale. The default constructor
    sets the position vector to *0*, the rotation quaternion to identity, and the
    scale vector to *1*. The transformation created by the default constructor has
    no effect.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`Transform`结构非常简单；它的所有成员都是公共的。一个变换有一个位置、旋转和缩放。默认构造函数将位置向量设置为*0*，将旋转四元数设置为单位，将缩放向量设置为*1*。默认构造函数创建的变换没有效果。'
- en: In the next section, you will learn how to combine transforms in a similar way
    to matrices or quaternions.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，您将学习如何以与矩阵或四元数类似的方式组合变换。
- en: Combining transforms
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组合变换
- en: Consider a skeleton, as an example. At each joint, you could place a transform
    to describe the motion of the joint. When you rotate your shoulder, the elbow
    attached to that shoulder also moves. To apply the shoulder transformation to
    all connected joints, the transform on each joint must be combined with its parent
    joint's transform.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以骨架为例。在每个关节处，您可以放置一个变换来描述关节的运动。当您旋转肩膀时，连接到该肩膀的肘部也会移动。要将肩部变换应用于所有连接的关节，必须将每个关节上的变换与其父关节的变换相结合。
- en: Transforms can be combined in the same way as matrices and quaternions and the
    effects of two transforms can be combined into one transform. To keep things consistent,
    combining transforms should maintain a right-to-left combination order. Unlike
    matrices and quaternions, this `combine` function will not be implemented as a
    multiplication function.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 变换可以像矩阵和四元数一样组合，并且两个变换的效果可以组合成一个变换。为保持一致，组合变换应保持从右到左的组合顺序。与矩阵和四元数不同，这个`combine`函数不会被实现为一个乘法函数。
- en: 'Combining the scale and rotation of two transforms is simple—multiply them
    together. Combining the position is a bit harder. The combined position needs
    to be affected by the `rotation` and `scale` components as well. When finding
    the combined position, remember the order of transformations: scale first, rotate
    second, and translate last.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 组合两个变换的缩放和旋转很简单—将它们相乘。组合位置有点困难。组合位置需要受到`rotation`和`scale`组件的影响。在找到组合位置时，记住变换的顺序：先缩放，然后旋转，最后平移。
- en: 'Create a new file, `Transform.cpp`. Implement the `combine` function and don''t
    forget to add the function declaration to `Transform.h`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新文件，`Transform.cpp`。实现`combine`函数，并不要忘记将函数声明添加到`Transform.h`中：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In later chapters, the `combine` function will be used to organize transforms
    into a hierarchy. In the next section, you will learn how to invert transforms,
    which is again similar to inverting matrices and quaternions.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在后面的章节中，`combine`函数将用于将变换组织成层次结构。在下一节中，你将学习如何反转变换，这与反转矩阵和四元数类似。
- en: Inverting transforms
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 反转变换
- en: You already know that a transform maps from one space into another space. It's
    possible to reverse that mapping and map the transform back into the original
    space. As with matrices and quaternions, transforms can also be inverted.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经知道变换将一个空间映射到另一个空间。可以反转该映射，并将变换映射回原始空间。与矩阵和四元数一样，变换也可以被反转。
- en: When inverting scale, keep in mind that 0 can't be inverted. The case where
    scale is 0 will need to be treated specially
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在反转缩放时，请记住0不能被反转。缩放为0的情况需要特殊处理。
- en: 'Implement the `inverse` transform method in `Transform.cpp`. Don''t forget
    to declare the method in `Transform.h`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Transform.cpp`中实现`inverse`变换方法。不要忘记在`Transform.h`中声明该方法：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Inverting a transform can be done to remove the effects of one transform from
    another transform. Consider a character moving through a level. Once the level
    is over, you might want to move the character back to the origin before starting
    the next level. You could multiply the transform of the character by its inverse.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 反转变换可以消除一个变换对另一个变换的影响。考虑一个角色在关卡中移动。一旦关卡结束，你可能希望将角色移回原点，然后开始下一个关卡。你可以将角色的变换乘以它的逆变换。
- en: In the next section, you will learn how to mix two or more transforms together.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将学习如何将两个或多个变换混合在一起。
- en: Mixing transforms
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 混合变换
- en: You have transforms that represent joints at two specific points in time. To
    make the model appear animated, you need to interpolate or mix between the transformation
    of these frames.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你有代表两个特定时间点的关节的变换。为了使模型看起来动画化，你需要在这些帧的变换之间进行插值或混合。
- en: It's possible to interpolate between vectors and quaternions, the building blocks
    of a transform. So it's possible to interpolate between transforms as well. Instead
    of interpolation, this operation is typically called blend or mix. When mixing
    two transforms together, linearly interpolate the position, rotation, and scale
    of the input transforms.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在向量和四元数之间进行插值，这是变换的构建块。因此，也可以在变换之间进行插值。这个操作通常被称为混合。当将两个变换混合在一起时，线性插值输入变换的位置、旋转和缩放。
- en: 'Implement the `mix` function in `Transform.cpp`. Don''t forget to declare the
    function in `Transform.h`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Transform.cpp`中实现`mix`函数。不要忘记在`Transform.h`中声明该函数：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Being able to mix transformations together is important for creating smooth
    transitions between animations. Here, you implemented a linear blend between transforms.
    In the next section, you will learn how to convert a `transform` into a `mat4`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 能够将变换混合在一起对于创建动画之间的平滑过渡非常重要。在这里，你实现了变换之间的线性混合。在下一节中，你将学习如何将`transform`转换为`mat4`。
- en: Converting transforms to matrices
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将变换转换为矩阵
- en: Shader programs work well with matrices. They don't have a native representation
    of a transform structure. You could port the transform code into GLSL, but that's
    not the best solution. Instead, you could convert a transform into a matrix right
    before submitting it as a shader uniform.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 着色器程序与矩阵配合得很好。它们没有本地表示变换结构。你可以将变换代码转换为GLSL，但这不是最好的解决方案。相反，你可以在将变换提交为着色器统一之前将变换转换为矩阵。
- en: Since transforms encode data that could be stored in matrices, it's possible
    to convert a transform into a matrix. To convert a transform into a matrix, the
    matrix needs to be thought of in terms of vectors.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 由于变换编码了可以存储在矩阵中的数据，因此可以将变换转换为矩阵。要将变换转换为矩阵，需要考虑矩阵的向量。
- en: First, find the basis vectors by multiplying the orientation of the global basis
    vectors by the transform's rotation. Next, scale the basis vectors by the scale
    of the transform. This yields the final basis vectors to fill the upper 3x3 sub-matrix.
    The position goes directly into the last column of the matrix.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，通过将全局基向量的方向乘以变换的旋转来找到基向量。接下来，通过变换的缩放来缩放基向量。这将产生填充上3x3子矩阵的最终基向量。位置直接进入矩阵的最后一列。
- en: 'Implement the from `Transform` method in `Transform.cpp`. Don''t forget to
    add the function declaration to `Transform.h`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Transform.cpp`中实现`from Transform`方法。不要忘记将该方法声明到`Transform.h`中：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Graphics APIs work with matrices not transforms. In later chapters, transforms
    will be converted into matrices before being sent to a shader. In the next section,
    you will learn how to do the opposite, which is converting matrices into transforms.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图形API使用矩阵而不是变换。在后面的章节中，变换将在发送到着色器之前转换为矩阵。在下一节中，你将学习如何做相反的操作，即将矩阵转换为变换。
- en: Converting matrices into transforms
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将矩阵转换为变换
- en: External file formats might store transformation data as matrices. glTF, for
    example, can store the transform of a node as the position, rotation, and scale,
    or as a single 4x4 matrix. To make the transform code robust, you need to be able
    to convert matrices to transforms.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 外部文件格式可能将变换数据存储为矩阵。例如，glTF可以将节点的变换存储为位置、旋转和缩放，或者作为单个4x4矩阵。为了使变换代码健壮，你需要能够将矩阵转换为变换。
- en: Converting a matrix to a transform is more difficult than converting a transform
    to a matrix. Extracting the rotation of the matrix is simple; you have already
    implemented a function to turn a 4x4 matrix into a quaternion. Extracting the
    position is also simple; copy the last column of the matrix into a vector. Extracting
    the scale is more difficult.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 将矩阵转换为变换比将变换转换为矩阵更困难。提取矩阵的旋转很简单；你已经实现了将4x4矩阵转换为四元数的函数。提取位置也很简单；将矩阵的最后一列复制到一个向量中。提取比例尺更困难。
- en: 'Recall that the order of operations for a transform is to scale, rotate, and
    then translate. This means that if you had three matrices—*S*, *R*, and *T*—that
    represent scale, rotation, and translation, respectively, they would combine into
    a transform matrix, *M*, as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下，变换的操作顺序是先缩放，然后旋转，最后平移。这意味着如果你有三个矩阵——*S*、*R*和*T*——分别代表缩放、旋转和平移，它们将组合成一个变换矩阵*M*，如下所示：
- en: '*M = SRT*'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '*M = SRT*'
- en: To find the scale, first, ignore the translation part of the matrix, *M* (zero
    out the translation vector). This leaves you with *M = SR*. To remove the rotation
    component of the matrix, multiply *M* by the inverse of *R*. That should leave
    only the scale component. Well, not exactly. The result would leave a matrix that
    contains a scale and some skew information.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到比例尺，首先忽略矩阵的平移部分*M*（将平移向量归零）。这样你就得到*M = SR*。要去除矩阵的旋转部分，将*M*乘以*R*的逆。这样应该只剩下比例尺部分。嗯，并不完全是这样。结果会留下一个包含比例尺和一些倾斜信息的矩阵。
- en: The way we will extract the scale from this scale-skew matrix is to simply take
    the main diagonal as the scale-skew matrix. While this will work most of the time,
    it's not perfect. The scale that is acquired should be considered a lossy scale,
    as the value can contain skew data as well, which makes the scale inaccurate.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从这个比例尺-倾斜矩阵中提取比例尺的方法是简单地将主对角线作为比例尺-倾斜矩阵。虽然这在大多数情况下都有效，但并不完美。获得的比例尺应该被视为有损的比例尺，因为该值可能包含倾斜数据，这使得比例尺不准确。
- en: Important note
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: It is possible to decompose a matrix into translation, rotation, scale, skew,
    and the sign of the determinant. However, this decomposition is expensive and
    not well suited to real-time applications. To learn more, check out *Matrix  Animation  and  Polar  Decomposition*
    by Ken Shoemake and Tom Duff at [https://research.cs.wisc.edu/graphics/Courses/838-s2002/Papers/polar-decomp.pdf](https://research.cs.wisc.edu/graphics/Courses/838-s2002/Papers/polar-decomp.pdf).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 将矩阵分解为平移、旋转、缩放、倾斜和行列式的符号是可能的。然而，这种分解是昂贵的，不太适合实时应用。要了解更多，请查看Ken Shoemake和Tom
    Duff的*Matrix Animation and Polar Decomposition* [https://research.cs.wisc.edu/graphics/Courses/838-s2002/Papers/polar-decomp.pdf](https://research.cs.wisc.edu/graphics/Courses/838-s2002/Papers/polar-decomp.pdf)。
- en: 'Implement the `toTransform` function in `Transform.cpp`. Don''t forget to add
    the function declaration to `Transform.h`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Transform.cpp`中实现`toTransform`函数。不要忘记将函数声明添加到`Transform.h`中：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: It's important that you're able to convert matrices to transforms because you
    don't always control what format the data you are dealing with comes in. For example,
    a model format might store matrices instead of transforms.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 能够将矩阵转换为变换是很重要的，因为你并不总是能控制你处理的数据以什么格式呈现。例如，一个模型格式可能存储矩阵而不是变换。
- en: By now, you have probably noticed that transforms and matrices can generally
    do the same things. In the next section, you will learn how to transform points
    and vectors using transforms, in a similar way to how it's done with matrices.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你可能已经注意到变换和矩阵通常可以做相同的事情。在下一节中，你将学习如何使用变换来对点和向量进行变换，类似于使用矩阵的方式。
- en: Transforming points and vectors
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变换点和向量
- en: The `Transform` structure can be used to move points and vectors in space. Imagine
    a ball bouncing up and down. The bounce of the ball is derived from the `Transform`
    structure, but how do you know where to move each vertex of the ball? You need
    to transform all the vertices using the `Transform` structure (or a matrix) to
    properly display the ball.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`Transform`结构可用于在空间中移动点和向量。想象一个球上下弹跳。球的弹跳是由`Transform`结构派生的，但你如何知道每个球的顶点应该移动到哪里？你需要使用`Transform`结构（或矩阵）来正确显示球的所有顶点。'
- en: 'Using a transform to modify points and vectors is like combining two transforms.
    To transform a point, first, apply the scale, then rotation, and finally, the
    translation of the transform. To transform a vector, follow the same steps, but
    don''t add the position:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用变换来修改点和向量就像组合两个变换。要变换一个点，首先应用缩放，然后旋转，最后是变换的平移。要变换一个向量，遵循相同的步骤，但不要添加位置：
- en: 'Implement the `transformPoint` function in `Transform.cpp`. Don''t forget to
    add the function declaration to `Transform.h`:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Transform.cpp`中实现`transformPoint`函数。不要忘记将函数声明添加到`Transform.h`中：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Implement the `transformVector` function in `Transform.cpp`. Don''t forget
    to add the function declaration to `Transform.h`:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Transform.cpp`中实现`transformVector`函数。不要忘记将函数声明添加到`Transform.h`中：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `transformPoint` function does the same thing that multiplying a matrix
    and a point does, just one step at a time. `scale` is applied first, then `rotation`,
    and `translation`, last. When you're dealing with a vector instead of a point,
    the same order applies, except the translation is ignored.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`transformPoint`函数做的就是一个一个步骤地将矩阵和点相乘。首先应用`scale`，然后是`rotation`，最后是`translation`。当处理向量而不是点时，同样的顺序适用，只是忽略了平移。'
- en: Summary
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to implement a transformation as a discreet
    structure that contains a position, rotation, and scale. In many ways, the `Transform`
    class holds the same data that you would normally store in a matrix.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了将变换实现为一个包含位置、旋转和比例尺的离散结构。在许多方面，`Transform`类保存了你通常会存储在矩阵中的相同数据。
- en: You learned how to combine, invert, and mix between transforms, as well as how
    to use transforms to move points and rotate vectors. Transforms are going to be
    essential moving forward, as they are used to animate the armature or skeleton
    of game models.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你学会了如何组合、反转和混合变换，以及如何使用变换来移动点和旋转向量。变换在未来将是至关重要的，因为它们用于动画游戏模型的骨骼或骨架。
- en: The reason you need an explicit `Transform` struct is that matrices don't interpolate
    well. Interpolating transforms is very important for animation. It's how you create
    in-between poses to display two given keyframes.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要一个显式的“Transform”结构的原因是矩阵不太容易插值。对变换进行插值对于动画非常重要。这是你创建中间姿势以显示两个给定关键帧的方式。
- en: In the next chapter, you will learn how to write a light abstraction layer on
    top of OpenGL to make rendering in future chapters easier.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何在OpenGL之上编写一个轻量级的抽象层，以使未来章节中的渲染更容易。
