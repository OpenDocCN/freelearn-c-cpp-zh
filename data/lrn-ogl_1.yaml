- en: Setting Up OpenGL
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置OpenGL
- en: Welcome to the world of modern OpenGL. **Open Graphics Library** (**OpenGL**)
    is an API that provides developers with various sets of functions that enable
    them to manipulate graphics and images. It is the core framework of most games
    today, whether it's mobile games for iOS or Android, or for other platforms, such
    as desktops and consoles as well. OpenGL just speaks for itself. Take a look at
    any sort of game you can think of, and it is doable in OpenGL. It's not just restricted
    to 3D; you can create 2D games as well. The 2D and 3D game engines are created
    using OpenGL, so it is more than capable of anything that you can think of. In
    this book, we will learn all the concepts necessary for 3D game development.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到现代OpenGL的世界。**开放图形库**（**OpenGL**）是一个API，它为开发者提供了一系列函数，使他们能够操纵图形和图像。它是当今大多数游戏的核心框架，无论是iOS或Android的移动游戏，还是其他平台，如桌面和游戏机。OpenGL本身就是最好的证明。看看你能想到的任何类型的游戏，在OpenGL中都是可以实现的。它不仅限于3D；你还可以创建2D游戏。2D和3D游戏引擎都是使用OpenGL创建的，所以它能够胜任你所能想到的一切。在本书中，我们将学习所有必要的3D游戏开发概念。
- en: In this chapter, we'll take a look at how to set up OpenGL on Windows and Mac,
    using various libraries, such as GLFW, GLEW, SDL, and SFML. Our main focus for
    this chapter will be to understand how to download the libraries and set up OpenGL
    using those. While we are learning about how to set up our projects, we will also
    take a look at how to link these libraries to our project using absolute and relative
    linking.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨如何在Windows和Mac上使用各种库（如GLFW、GLEW、SDL和SFML）设置OpenGL。本章的主要重点是了解如何下载这些库以及如何使用它们设置OpenGL。在我们学习如何设置项目的同时，我们还将探讨如何使用绝对和相对链接将这些库链接到我们的项目中。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章节将涵盖以下主题：
- en: Downloading the essential libraries
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载必需的库
- en: Setting up a project on different platforms to use the libraries
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在不同平台上设置项目以使用库
- en: Creating an OpenGL rendering window using the libraries
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用库创建OpenGL渲染窗口
- en: You can refer to all the code files for this chapter in the `Chapter01` folder
    on GitHub. The GitHub link can be found in the preface of the book.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitHub上的`Chapter01`文件夹中找到本章节的所有代码文件。GitHub链接可以在本书的序言中找到。
- en: Setting up OpenGL using GLFW and GLEW on Windows
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows上使用GLFW和GLEW设置OpenGL
- en: In this section, we'll learn how to set up OpenGL using GLFW and GLEW on your
    Windows system, by using Visual Studio. But, first let's understand what GLFW
    and GLEW are. **GLFW** is an **OpenGL framework**. It's a very lightweight framework
    that allows us to detect events such as keyboard input, mouse input, and other
    sort of inputs, but more importantly, it allows you to create a render window
    in which you can render your code, as OpenGL doesn't have a way of creating a
    rendering window, and it needs something like GLFW to create it.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何在Windows系统上使用Visual Studio通过GLFW和GLEW设置OpenGL，但首先让我们了解GLFW和GLEW是什么。**GLFW**是一个**OpenGL框架**。这是一个非常轻量级的框架，它允许我们检测事件，如键盘输入、鼠标输入和其他类型的输入，但更重要的是，它允许你创建一个渲染窗口，你可以在其中渲染你的代码，因为OpenGL没有创建渲染窗口的方法，它需要像GLFW这样的东西来创建。
- en: '**GLEW** is the **OpenGL Extension Wrangler,** which basically allows you to
    use OpenGL functions that are new, or more precisely, non-core. It provides systematic
    mechanisms during runtime to determine which OpenGL extensions are supported on
    the target platform. For any new functions, you essentially require something
    like OpenGL Extension Wrangler to initialize extensions and to write portable
    applications.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**GLEW**是**OpenGL扩展包装器**，它基本上允许你使用新的OpenGL函数，或者更确切地说，非核心函数。它在运行时提供系统机制来确定目标平台支持哪些OpenGL扩展。对于任何新函数，你本质上需要像OpenGL扩展包装器这样的东西来初始化扩展并编写可移植的应用程序。'
- en: '**First things first**: For this book, it''s really important that you have
    a good foundation in C++, as, in this book, you will be using OpenGL with C++.
    It''s not the easiest thing, OpenGL. If this is your first time coding or you
    haven''t been coding for long, it is recommended you get a good grasp of C++ and
    then continue with the book.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**首要之事**：对于本书来说，你有一个良好的C++基础非常重要，因为在本书中，你将使用C++与OpenGL结合。OpenGL并不容易。如果你是第一次编码或者编码时间不长，建议你先掌握C++，然后再继续阅读本书。'
- en: Let's begin our setup process by downloading the GLFW and GLEW libraries.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过下载GLFW和GLEW库来开始我们的设置过程。
- en: Downloading the essential libraries
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载必需的库
- en: 'Let''s get started with the setup, by performing below mentioned steps:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始设置，按照以下步骤操作：
- en: First of all, we will need Visual Studio. You might have already installed it.
    If you did, it's fantastic. If not, go to [https://visualstudio.microsoft.com/](https://visualstudio.microsoft.com/),
    go to Downloads, and then click to download the **Visual Studio Community 2017**
    version. Then, follow the instructions and install Visual Studio onto your system.
    Once you've got that installed, you just want to make sure it's set up for the
    C++ environment.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要Visual Studio。您可能已经安装了它。如果您已经安装，那真是太好了。如果没有，请访问[https://visualstudio.microsoft.com/](https://visualstudio.microsoft.com/)，转到“下载”，然后点击下载**Visual
    Studio Community 2017**版本。然后，按照说明将Visual Studio安装到您的系统上。一旦安装完成，您只需确保它已设置为C++环境。
- en: If you have the *Pro* version, that's fantastic, but the *Community* version
    will more than suffice.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有**专业**版本，那真是太好了，但**社区**版本也完全足够。
- en: 'Next, we will download the **OpenGL Extension Wrangler** library. Visit [http://glew.sourceforge.net/](http://glew.sourceforge.net/),
    and then click on the Binaries option to download the 32-bit or 64-bit version
    files, as per your system requirements:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将下载**OpenGL扩展管理器**库。访问[http://glew.sourceforge.net/](http://glew.sourceforge.net/)，然后点击“二进制”选项下载32位或64位版本文件，根据您的系统需求：
- en: '![](img/830addd0-96fa-4d3d-b2e3-a36f9e28391d.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/830addd0-96fa-4d3d-b2e3-a36f9e28391d.png)'
- en: Downloading binaries for GLEW
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 下载GLEW的二进制文件
- en: After downloading, just unzip the file and put it somewhere you find feasible
    to access, because for this project, and any other projects that you create, it
    will reference that directory. So, you don't want to be moving it around because
    then you will have to redo the settings for your project. For this project, it's
    recommended that you create a folder called `OpenGL` in your `C:` drive and place
    all the downloaded libraries in it. This will help you with easy access to the
    libraries while you are linking those to your project.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 下载完成后，只需解压文件并将其放置在您认为方便访问的地方，因为对于这个项目以及您创建的任何其他项目，它将引用该目录。所以，您不想移动它，因为那样您将不得不重新设置您项目的设置。对于这个项目，建议您在`C:`驱动器中创建一个名为`OpenGL`的文件夹，并将所有下载的库放在里面。这将帮助您在链接库到项目时更容易访问。
- en: When you extract the files, they won't be named nicely and you might find it
    confusing to view with all the version numbers and stuff. Therefore, to take off
    any versioning text, it's better that you rename the folders to something as simple
    as `GLEW` and `GLFW`. It's neat this way, you can easily know what you're doing,
    and it makes it a lot easier to see things.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当您解压文件时，它们不会被很好地命名，您可能会发现所有版本号和相关信息都让人困惑。因此，为了去除任何版本信息文本，最好将文件夹重命名为像`GLEW`和`GLFW`这样简单的东西。这样很整洁，您可以轻松知道自己在做什么，并且这使得查看事物变得容易得多。
- en: 'Once you have done that, we will move on to downloading **OpenGL framework**
    library files**.** Go to [http://www.glfw.org/](http://www.glfw.org/) and click
    on the Download menu. We will want to download the precompiled binaries for Windows.
    As seen in the following screenshot, select and click to download either the 32-bit
    or 64-bit version as per your system requirements:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦完成，我们将继续下载**OpenGL框架**库文件。访问[http://www.glfw.org/](http://www.glfw.org/)并点击“下载”菜单。我们将需要下载Windows的预编译二进制文件。如以下截图所示，根据您的系统需求选择并点击下载32位或64位版本：
- en: '![](img/8b277b53-926f-4b48-8dcb-1045e7a46a0d.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8b277b53-926f-4b48-8dcb-1045e7a46a0d.png)'
- en: Downloading binaries for GLFW
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 下载GLFW的二进制文件
- en: '**Note**: Even if you know you need to download the 64-bit version for developing
    on a 64-bit machine, try to stick with the 32-bit version, because unless you
    think your game or your application is going to be using more than 4 GB of memory,
    the 32- bit version will more than suffice and it will help you in maximizing
    compatibility.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：即使您知道您需要下载64位版本来在64位机器上进行开发，也尽量坚持使用32位版本，因为除非您认为您的游戏或应用程序将使用超过4GB的内存，否则32位版本将完全足够，并且有助于最大化兼容性。'
- en: Once you've downloaded the file, unzip it and, as mentioned before, place it
    in the `GLFW` folder inside the `OpenGL` folder.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 下载文件后，解压它，如前所述，将其放置在`OpenGL`文件夹内的`GLFW`文件夹中。
- en: Linking GLFW and GLEW libraries with absolute linking
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用绝对链接链接GLFW和GLEW库
- en: 'After we have downloaded all the necessary files, we will set up the environment
    in Visual Studio for OpenGL using the GLFW and GLEW libraries. Follow these steps:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们下载了所有必要的文件后，我们将使用GLFW和GLEW库在Visual Studio中为OpenGL设置环境。按照以下步骤操作：
- en: 'Open Visual Studio, and then click on Create new Project...:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '打开 Visual Studio，然后点击创建新项目...:'
- en: '![](img/88ae17c4-4206-4b18-acca-895ca75304d5.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/88ae17c4-4206-4b18-acca-895ca75304d5.png)'
- en: Visual Studio start page
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 启动页面
- en: 'Then, go to Visual C++ | Windows Desktop | Windows Console Application and
    name your project `GLFWOpenGL`, as seen in the following screenshot, and then
    click OK:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，转到 Visual C++ | Windows 桌面 | Windows 控制台应用程序，并将你的项目命名为 `GLFWOpenGL`，如以下截图所示，然后点击
    OK：
- en: '![](img/b3d8c2c9-862a-4a59-8c3b-af8163d86a6a.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/b3d8c2c9-862a-4a59-8c3b-af8163d86a6a.png)'
- en: Creating a new project
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新项目
- en: 'If you don''t see the Visual C++ option in the New Project window, you might
    need to download Visual C++. For more information, you can visit the following
    link:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有在新建项目窗口中看到 Visual C++ 选项，你可能需要下载 Visual C++。更多信息，你可以访问以下链接：
- en: '[https://docs.microsoft.com/en-us/cpp/build/vscpp-step-0-installation](https://docs.microsoft.com/en-us/cpp/build/vscpp-step-0-installation)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.microsoft.com/en-us/cpp/build/vscpp-step-0-installation](https://docs.microsoft.com/en-us/cpp/build/vscpp-step-0-installation)'
- en: Now, right-click on the project in the Solution Explorer window. Go to Add |
    New Item, and you will get an Add New Item window. Select C++ File, as this will
    be our main file, and let's name it `main.cpp` and then click on the Add button.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在解决方案资源管理器窗口中右键单击项目。转到添加 | 新项，你将得到一个添加新项窗口。选择 C++ 文件，因为这将是我们的主文件，让我们将其命名为
    `main.cpp`，然后点击添加按钮。
- en: Next, right-click on the project in the Solution Explorer window**.** Click
    on Properties**.**
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在解决方案资源管理器窗口中右键单击项目**。** 点击属性**。**
- en: 'A Property Pages window will pop up; click on C/C++ | General and then go to
    Additional Include Directories. Click on the dropdown, then click on <Edit>, and
    you will get a pop up window as follows:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将弹出一个属性页窗口；点击 C/C++ | 通用，然后转到附加包含目录。点击下拉菜单，然后点击 <编辑>，你将得到如下弹窗：
- en: '![](img/e9655980-1d3c-4e4c-a6ce-bfc0925416f7.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/e9655980-1d3c-4e4c-a6ce-bfc0925416f7.png)'
- en: Adding include directories
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 添加包含目录
- en: As highlighted in the preceding screenshot, click on the new button and then
    click on the three dots. And now, browse to the `GLEW` folder inside the `OpenGL`
    folder. Select the `include` folder and then click on the Select Folder button.
    Next, we repeat the same process to add the GLFW library to our project. Once
    we have included both the libraries, click on the OK button.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前一张截图所示，点击新建按钮，然后点击三个点。现在，浏览到 `OpenGL` 文件夹中的 `GLEW` 文件夹。选择 `include` 文件夹，然后点击选择文件夹按钮。接下来，我们重复相同的步骤将
    GLFW 库添加到我们的项目中。一旦我们包含了这两个库，点击 OK 按钮。
- en: 'Now, again in the Property Pages window, we''ll go to Linker | General, and
    then go to Additional Library Directories. Click on the dropdown, then click on
    <Edit>, and you will get a pop-up window, as follows:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，再次在属性页窗口中，我们将转到链接器 | 通用，然后转到附加库目录。点击下拉菜单，然后点击 <编辑>，你将得到一个弹窗，如下所示：
- en: '![](img/5f823447-dc01-40ae-8246-5f533d7f7ab9.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/5f823447-dc01-40ae-8246-5f533d7f7ab9.png)'
- en: Adding libraries
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 添加库
- en: As highlighted in the preceding screenshot, click on the new button and then
    click on the three dots. Now, browse to the `OpenGL` folder where you have downloaded
    the GLEW files. Open the `lib` folder inside the `GLEW` folder, then double-click
    on the `Release` folder, select `Win32`, and then click on the Select Folder button.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前一张截图所示，点击新建按钮，然后点击三个点。现在，浏览到你下载 GLEW 文件的 `OpenGL` 文件夹。打开 `GLEW` 文件夹中的 `lib`
    文件夹，然后双击 `Release` 文件夹，选择 `Win32`，然后点击选择文件夹按钮。
- en: Repeat the same process to include GLFW libraries. But for GLFW, you've got
    a bunch of different libraries that you could choose from. For our project, it's
    best that we select the `lib-vc2015` folder. Once you have added both the libraries,
    click on the OK button.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复相同的步骤以包含 GLFW 库。但对于 GLFW，你有一系列不同的库可以选择。对于我们的项目，最好选择 `lib-vc2015` 文件夹。一旦你添加了这两个库，点击
    OK 按钮。
- en: There are a bunch of other versions of libraries that you can choose for GLFW.
    So, if you have an older version of Visual Studio, you can select the library
    for that particular version.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多其他版本的库可供选择用于 GLFW。所以，如果你有较旧的 Visual Studio 版本，你可以选择那个特定版本的库。
- en: 'Next, we''ll go to Linker **|** Input, and then go to Additional Dependencies**.**
    Click on the dropdown, and then click on Edit. What we''ll do here is type `opengl32.lib`
    in the textbox, as seen highlighted in the following screenshot. `opengl32.lib`
    is the library built into the operating system. Next, we''ll type `glew32s.lib`.
    This is the static library and it will be statically linked to your project. If
    you don''t want to statically link it, you can just remove the `s` from the suffix;
    it is up to you. Next, we''ll type `glfw3.lib`, and then click on the OK button:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将转到“链接器 | 输入”，然后转到“附加依赖项**”。**点击下拉菜单，然后点击“编辑”。在这里，我们将输入`opengl32.lib`到文本框中，如以下截图所示突出显示。`opengl32.lib`是内置在操作系统中的库。接下来，我们将输入`glew32s.lib`。这是一个静态库，它将被静态链接到你的项目中。如果你不想静态链接它，你可以简单地从后缀中移除`s`；这取决于你。接下来，我们将输入`glfw3.lib`，然后点击“确定”按钮：
- en: '![](img/187c8c8e-2a72-4a5c-9bd1-22af4d437e37.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/187c8c8e-2a72-4a5c-9bd1-22af4d437e37.png)'
- en: Adding additional dependencies
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 添加额外的依赖项
- en: Then, click on the Apply button.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击“应用”按钮。
- en: In the preceding section, we discussed how to download the essential libraries
    and how to link them up to our project with absolute linking.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们讨论了如何下载必需的库以及如何使用绝对链接将它们链接到我们的项目中。
- en: In the following section, we'll study how to link these libraries to our project
    with relative linking, and we'll also learn about how relative linking is beneficial
    for us. You can use either one of them to link the libraries to your project;
    it's your choice.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将研究如何使用相对链接将这些库链接到我们的项目中，我们还将了解相对链接对我们有何益处。你可以选择其中任何一个来将库链接到你的项目中；这是你的选择。
- en: Linking GLFW and GLEW libraries with relative linking
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用相对链接链接GLFW和GLEW库
- en: In this section, we'll take a look at how to set up OpenGL using GLFW as the
    provider to create a render window with relative linking. In the previous section,
    we discussed absolute linking, So, let's just have a quick overview of what absolute
    and relative linking actually are.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨如何使用GLFW作为提供者设置OpenGL，以相对链接创建渲染窗口。在上一节中，我们讨论了绝对链接，所以，让我们快速概述一下绝对链接和相对链接实际上是什么。
- en: Absolute linking is a process where you specifically link your libraries to
    the project. For example, if you create a project and you are linking up libraries
    like GLFW and GLEW, while linking them up, you specifically put in the paths of
    the directory they are in. If they're in the `C:` drive, you would actually put
    the explicit directory. But, if you move the library files to any other location,
    then you would have to update your Visual Studio project with the changed path.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 绝对链接是一个将库明确链接到项目的过程。例如，如果你创建了一个项目，并且正在链接像GLFW和GLEW这样的库，在链接它们时，你将明确输入它们所在目录的路径。如果它们在`C:`驱动器上，你实际上会输入显式的目录。但是，如果你将库文件移动到任何其他位置，那么你就必须更新你的Visual
    Studio项目以反映更改的路径。
- en: With relative linking, the libraries are actually linked, but relative to the
    project. So, you don't say libraries are in the `C:` drive; rather, you say those
    relatively link to your project from a particular folder. So even if you move
    your libraries, it won't affect your project. It is a great method for transporting
    the project from one machine to an other. This method of development is preferable
    when you're working on a platform that doesn't really have a good visual editor;
    for example, platforms, such as Unity or Unreal.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 使用相对链接，库实际上被链接，但相对于项目。所以，你不会说库在`C:`驱动器上；相反，你说它们从特定文件夹相对链接到你的项目。所以即使你移动了库，也不会影响你的项目。这是一个在需要良好视觉编辑器的平台上传输项目的绝佳方法。当你在一个实际上没有良好视觉编辑器的平台上工作时，这种方法更适合开发；例如，Unity或Unreal这样的平台。
- en: 'So, let''s get started with relatively linking our libraries and creating an
    OpenGL render window. Let''s open up Visual Studio and follow these steps:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们开始相对链接我们的库并创建一个OpenGL渲染窗口。让我们打开Visual Studio并按照以下步骤操作：
- en: Click on Create new project... and go to Visual C++ | Windows Desktop | Windows
    Console Application. Name the project `GLApp` (since we are learning how to relatively
    link the libraries, we've created a different project).
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“创建新项目...”并转到Visual C++ | Windows桌面 | Windows控制台应用程序。将项目命名为`GLApp`（因为我们正在学习如何相对链接库，所以我们创建了一个不同的项目）。
- en: Then, in the New Project window, click on the Browse... button. Go to the `OpenGL`
    folder that we've created on the desktop (we are using this folder structure format
    to understand relative linking). Just select the folder and then click OK.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在新项目窗口中，点击浏览...按钮。转到桌面上的 `OpenGL` 文件夹（我们使用这种文件夹结构格式来理解相对链接）。只需选择文件夹，然后点击确定。
- en: One more thing you need to do before starting the project is to create a folder
    called `External Libraries` within the `OpenGL` folder on desktop where you have
    saved your project. Extract the library files for GLEW and GLFW in the `External
    Libraries` folder.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在开始项目之前，你需要做的一件事是在桌面上的 `OpenGL` 文件夹内创建一个名为 `External Libraries` 的文件夹。在 `External
    Libraries` 文件夹中提取 GLEW 和 GLFW 的库文件。
- en: Now, we'll right-click on the project in the Solution Explorer window. Go to
    Add | New Item. Select C++ File and name it `main.cpp`, and then click on the
    Add button.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将右键单击解决方案资源管理器窗口中的项目。转到添加 | 新项。选择 C++ 文件，并将其命名为 `main.cpp`，然后点击添加按钮。
- en: Next, right-click on the project in the Solution Explorer window and go to Properties**.**
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在解决方案资源管理器窗口中右键单击项目，转到属性**。**
- en: 'A Property Pages window will pop up; click on C/C++ | General and then go to
    Additional Include Directories. In it, click on the dropdown and then click on
    <Edit>:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将会弹出一个属性页面窗口；点击 C/C++ | 通用，然后转到附加包含目录。在其中，点击下拉菜单，然后点击 <编辑>：
- en: '![](img/8361ca7f-6d2d-4b88-b42a-810156941d47.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8361ca7f-6d2d-4b88-b42a-810156941d47.png)'
- en: Adding include directories
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 添加包含目录
- en: Then, click on the new button. As we are doing relative linking in this section,
    we won't click on the three dots. Clicking on them is for absolute linking only,
    as we have to browse to the directory where we have stored the libraries.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击新按钮。由于我们在本节中进行相对链接，所以不会点击三个点。点击它们仅用于绝对链接，因为我们必须浏览到存储库的目录。
- en: In the textbox highlighted in the preceding screenshot, type `$(SolutionDir)`;
    this command refers to the folder that contains our `.sln` file. So if we were
    to specify a folder in the path, whenever we do something new in the project it'd
    be relatively linked to wherever that file is located.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前一个截图突出显示的文本框中，键入 `$(SolutionDir)`；这个命令指的是包含我们的 `.sln` 文件的文件夹。所以如果我们指定路径中的文件夹，每次我们在项目中做新的操作时，它都会相对链接到该文件所在的位置。
- en: 'To include the files in our project, add the paths as shown in the following
    screenshot and then click on the OK button:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将文件包含到我们的项目中，添加以下截图所示的路径，然后点击确定按钮：
- en: '![](img/5456ccb6-2bdb-49e1-b290-2b6089f690f4.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5456ccb6-2bdb-49e1-b290-2b6089f690f4.png)'
- en: 'Next, we''ll link up the libraries. So, in the Property Pages window, we''ll
    go to Linker | General, and then go to Additional Library Directories. Click on
    the dropdown, click on Edit, and then click on New. Add the paths as shown in
    the following screenshot, and then click OK and then Apply:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将链接库。所以，在属性页面窗口中，我们将转到链接器 | 通用，然后转到附加库目录。点击下拉菜单，点击编辑，然后点击新建。添加以下截图所示的路径，然后点击确定，然后应用：
- en: '![](img/f37e282c-4382-40fb-b033-9f6f5b184950.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f37e282c-4382-40fb-b033-9f6f5b184950.png)'
- en: Now, we've got one more thing to do, and that is to link up the `.lib` files.
    So, go to Linker **|** Input, and then go to Additional Dependencies. Click on
    the dropdown and then click on <Edit>. Now, in the textbox, just type `opengl32.lib`.
    This library file isn't downloaded with `GLFW` or `GLEW`; it's built into Windows.
    Next, on a new line, just type `glew32s.lib` and now for `GLFW lib-vc2015`, type
    `glfw3.lib`. Then, click OK and click on the Apply button.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们还有一件事要做，那就是链接 `.lib` 文件。所以，转到链接器 **|** 输入，然后转到附加依赖项。点击下拉菜单，然后点击 <编辑>。现在，在文本框中，只需键入
    `opengl32.lib`。这个库文件不是与 `GLFW` 或 `GLEW` 一起下载的；它是内置在 Windows 中的。接下来，在新的一行中，只需键入
    `glew32s.lib`，然后对于 `GLFW lib-vc2015`，键入 `glfw3.lib`。然后，点击确定并点击应用按钮。
- en: Whichever linking process you are comfortable with, you can follow that. With
    either of the methods that you use to link the libraries, there's one last step
    that we need complete before we can begin with coding, and that is to copy and
    paste the dynamic link library into our project.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你选择哪种链接过程，你都可以按照那个方法进行。使用你用来链接库的任何一种方法，我们都需要完成一个最后的步骤，才能开始编码，那就是将动态链接库复制并粘贴到我们的项目中。
- en: Adding a dynamic link library to the project
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将动态链接库添加到项目中
- en: 'Let''s take a look at these steps and understand how to add a **dynamic link
    library** (**dll**) to our project:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这些步骤，并了解如何将一个 **动态链接库** (**dll**) 添加到我们的项目中：
- en: 'Go to the `OpenGL` folder on the `C:` drive; in it, go to the `GLEW` folder,
    open it and go to `bin`, double-click on it, and then go to `Win32` and open it.
    Then, copy the `glew32.dll` dynamic link library, as highlighted in the following
    screenshot:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 `C:` 驱动器上的 `OpenGL` 文件夹；在其中，进入 `GLEW` 文件夹，打开它并进入 `bin`，双击它，然后进入 `Win32` 并打开它。然后，复制如以下截图所示的高亮显示的
    `glew32.dll` 动态链接库：
- en: '![](img/270e2c17-a2fe-4c72-b5ec-06577d134b97.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/270e2c17-a2fe-4c72-b5ec-06577d134b97.png)'
- en: glew32.dll dynamic link library
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: glew32.dll 动态链接库
- en: Do as mentioned in the previous step to add the GLFW `.dll` files to your project
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照上一步的说明，将 GLFW 的 `.dll` 文件添加到你的项目中
- en: Now, go to the location in your system where the `main.cpp` file of your project
    is, and paste the copied dynamic link library file there.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，前往你的系统中 `main.cpp` 文件所在的位置，并将复制的动态链接库文件粘贴在那里。
- en: With this last step, we have completed the setup for OpenGL and have also absolutely
    or relatively linked the libraries to our project. We are now ready to write code
    for the OpenGL rendering window.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这一最后步骤，我们已经完成了 OpenGL 的设置，并且已经将库绝对或相对地链接到我们的项目中。我们现在可以开始编写 OpenGL 渲染窗口的代码了。
- en: In the preceding section, we discussed how to set up OpenGL on a Windows platform.
    But, what if any of you are working on a Mac system? Therefore, let's check out
    how we can download the libraries and set up OpenGL on the Mac platform.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分，我们讨论了如何在 Windows 平台上设置 OpenGL。但是，如果你在 Mac 系统上工作怎么办？因此，让我们看看我们如何在 Mac
    平台上下载库并设置 OpenGL。
- en: Setting up OpenGL using GLFW on a Mac
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Mac 上使用 GLFW 设置 OpenGL
- en: Here's what we've discussed so far, we discussed about how to set up our project
    to use GLFW library on Windows. In this section, we'll discuss how to set up OpenGL
    on a Mac system. So, let's get started.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经讨论了如何设置我们的项目以在 Windows 上使用 GLFW 库。在本节中，我们将讨论如何在 Mac 系统上设置 OpenGL。那么，让我们开始吧。
- en: Downloading the GLFW and GLEW libraries for a Mac
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Mac 上下载 GLFW 和 GLEW 库
- en: To download and install the essential libraries onto your Mac system, we'll
    have to install a package manager for Mac known as **Homebrew**. Homebrew will
    help us in installing all the necessary packages and libraries to run our OpenGL
    code.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要将必需的库下载并安装到你的 Mac 系统中，我们必须安装一个名为 **Homebrew** 的 Mac 包管理器。Homebrew 将帮助我们安装所有必要的包和库来运行我们的
    OpenGL 代码。
- en: 'To install Homebrew, go to [https://brew.sh/](https://brew.sh/), copy the path
    highlighted in the following screenshot, paste it into your Terminal, and then
    hit *Enter*. The prompt will download and install Homebrew on your system:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 Homebrew，请访问 [https://brew.sh/](https://brew.sh/)，复制以下截图中的高亮显示的路径，将其粘贴到你的终端中，然后按下
    *Enter*。提示将会在你的系统中下载并安装 Homebrew：
- en: '![](img/58bf7a73-26b8-43c0-ab1f-b636eef0f0ab.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/58bf7a73-26b8-43c0-ab1f-b636eef0f0ab.png)'
- en: Path on Homebrew homepage
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Homebrew 主页上的路径
- en: 'Once we''ve installed Homebrew, we''ll download the GLFW and GLEW libraries
    onto our system. Let''s install GLFW first. To do that, we need to type the following
    command in the Terminal window:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们安装了 Homebrew，我们就会将 GLFW 和 GLEW 库下载到我们的系统中。让我们首先安装 GLFW。为此，我们需要在终端窗口中输入以下命令：
- en: '[PRE0]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the preceding command, you must have observed we've included the number `3`;
    the reason for that is that if you just type `glfw`, it installs an older version,
    which we don't want, so inserting `glfw3` will install the latest version. Hit
    *Enter* and the libraries will be downloaded onto your system.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的命令中，你必须已经注意到我们包含了数字 `3`；这样做的原因是，如果你只输入 `glfw`，它会安装一个较旧的版本，而我们不希望这样做，所以插入
    `glfw3` 将会安装最新版本。按下 *Enter* 键，库将会被下载到你的系统中。
- en: 'Now, we''re going to do the same process for GLEW; type the following command
    in the Terminal:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将对 GLEW 执行相同的操作；在终端中输入以下命令：
- en: '[PRE1]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We don't need to put any version for this; just press *Enter* and the necessary
    files will be downloaded. That's it for the libraries to download onto our system.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要为这个版本做任何设置；只需按下 *Enter* 键，必要的文件就会被下载。这就是将库下载到我们系统中的全部过程。
- en: Make a note that, since we're installing the libraries on the system itself
    and not in our project, whenever you move your project to a different system,
    you will have to install these libraries onto that particular system.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，由于我们是在系统本身上安装库，而不是在我们的项目中安装，所以每次你将项目移动到不同的系统时，你都需要在那个特定的系统上安装这些库。
- en: Once we've downloaded and installed all the essential libraries with the help
    of Homebrew, we'll now move on to setting up Xcode for OpenGL.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们借助 Homebrew 下载并安装了所有必需的库，我们接下来将进行设置 Xcode 以使用 OpenGL。
- en: Make sure Xcode is installed on to your system. If not, please follow these
    instructions and install it on your system.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 确保Xcode已安装到您的系统上。如果没有，请按照以下说明在您的系统上安装它。
- en: Setting up Xcode for OpenGL
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Xcode以使用OpenGL
- en: 'In this section, we''ll discuss how to set up Xcode to run our OpenGL code.
    Follow these steps and carry out the setup process:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论如何设置Xcode以运行我们的OpenGL代码。按照以下步骤执行设置过程：
- en: Open up Xcode and click on the Create a new Xcode project option.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Xcode，并点击创建一个新的Xcode项目选项。
- en: Go to OS X | Application, select Command Line Tool, and then click Next.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往OS X | 应用程序，选择命令行工具，然后点击下一步。
- en: 'You will get the following window; fill in the necessary details, as highlighted
    in the following screenshot:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到以下窗口；填写必要的详细信息，如以下屏幕截图所示：
- en: '![](img/469677e3-c2a5-46bc-82b8-7b80d378c121.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/469677e3-c2a5-46bc-82b8-7b80d378c121.png)'
- en: Basic details for a project
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 项目的基本细节
- en: In the preceding screenshot, make sure that the Language option is always set
    to **C++**, and then click Next. The Organization Name and Organization identifier
    properties, you can set to whatever you want.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，请确保语言选项始终设置为**C++**，然后点击下一步。组织名称和组织标识符属性，您可以设置为任何您想要的。
- en: Next, set the location you would like to store and save the project to. Then,
    click on the Create button. Next, we have just a plain C++ project ready. Before
    we begin with our code, we need to follow a few more steps necessary to set up
    our project.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，设置您希望存储和保存项目的位置。然后，点击创建按钮。接下来，我们有一个普通的C++项目准备好了。在我们开始编写代码之前，我们需要遵循一些额外的步骤来设置我们的项目。
- en: First of all, in Xcode, click on your project and go to Build Settings. In Build
    Settings, go to the Search Paths section and click on Header Search Paths.Then,
    click on + and type `/usr/local/include`. This will allow us to `#include` GLEW
    and GLFW in our `main.cpp` file.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在Xcode中，点击您的项目并转到构建设置。在构建设置中，转到搜索路径部分，并点击头文件搜索路径。然后，点击加号并输入`/usr/local/include`。这将允许我们在`main.cpp`文件中`#include`
    GLEW和GLFW。
- en: Now go to Build Phases, then click on Link Binary With Libraries, and click
    the + button. Type `opengl` in the search bar, select OpenGL.framework, and then
    click on the Add button.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在转到构建阶段，然后点击链接二进制与库，并点击加号按钮。在搜索栏中输入`opengl`，选择OpenGL.framework，然后点击添加按钮。
- en: Again click on the + button, then click on Add Other.... Now, press *Cmd* +
    *Shift* + *G*, and it will open up a `go-to` folder search bar. In it, type `/usr/local`.
    Then click on Cellar, go to the glew | lib folder, select `libGLEW.1.12.0.dylib`
    without the little arrow, and then click Open.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次点击加号按钮，然后点击添加其他....现在，按*Cmd* + *Shift* + *G*，它将打开一个`go-to`文件夹搜索栏。在它里面，输入`/usr/local`。然后点击Cellar，转到glew
    | lib文件夹，选择没有小箭头的`libGLEW.1.12.0.dylib`，然后点击打开。
- en: The arrow is just a shortcut, an alias, and we don't want that. We also don't
    want the MX version, just the regular `.dy` non-alias lib.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 箭头只是一个快捷方式，一个别名，我们不希望这样。我们也不希望MX版本，只希望普通的`.dy`非别名库。
- en: Click + again, then click Add Other... , press *Cmd* + *Shift* + *G*, and type
    `/usr/local`. Now go to Cellar, and go to glfw | lib. Select the non-alias `libglfw3.3.1.dylib`
    and click Open.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次点击加号，然后点击添加其他...，按*Cmd* + *Shift* + *G*，并输入`/usr/local`。现在转到Cellar，转到glfw
    | lib。选择非别名的`libglfw3.3.1.dylib`并点击打开。
- en: With all the steps executed, our project is now set up to use GLEW and GLFW
    with OpenGL on Mac. We can now go to the `main.cpp` file on Xcode and start writing
    our code for creating the OpenGL rendering window.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 执行所有步骤后，我们的项目现在已设置好，可以在Mac上使用GLEW和GLFW与OpenGL。我们现在可以转到Xcode中的`main.cpp`文件，并开始编写创建OpenGL渲染窗口的代码。
- en: Creating the OpenGL rendering window using GLFW
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用GLFW创建OpenGL渲染窗口
- en: 'Let''s go to our `main.cpp` file in Visual Studio or Xcode, and let''s get
    started. Start typing the following code in your editor:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们去Visual Studio或Xcode中的`main.cpp`文件，然后开始。在您的编辑器中开始输入以下代码：
- en: 'Begin by adding some header files to our code:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，向我们的代码中添加一些头文件：
- en: '[PRE2]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`iostream` is just the input/output stream built into C++. Then, with `GLEW_STATIC`,
    we statically linked GLEW. If you don''t want to statically link it, just omit
    the `#define` line.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`iostream`只是C++中内置的输入/输出流。然后，使用`GLEW_STATIC`，我们静态链接了GLEW。如果您不想静态链接它，只需省略`#define`行。'
- en: 'Next, we''ll create some constants, and these will be used to store the width
    and height of our window:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一些常量，这些常量将用于存储窗口的宽度和高度：
- en: '[PRE3]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You might be thinking, why are we using `GLint` instead of a regular `int`?
    The reason for that is the issues with a regular `int` on different operating
    systems; for example, in a different compiler, it might have a different length.
    With `GLint`, it is consistent on any compiler, so this is a great way of ensuring
    maximum compatibility.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想，为什么我们使用 `GLint` 而不是普通的 `int`？原因在于不同操作系统上普通 `int` 的问题；例如，在不同的编译器中，它可能有不同的长度。使用
    `GLint`，它在任何编译器上都是一致的，因此这是一种确保最大兼容性的好方法。
- en: 'Now, we''ll set up our main entry point with `int main` and then we''ll initialize
    GLFW:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将使用 `int main` 设置我们的主入口点，然后初始化 GLFW：
- en: '[PRE4]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, we''ll set up some window hints, which are essentially some properties
    that we''ll set for our window:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将设置一些窗口提示，这实际上是我们将为窗口设置的某些属性：
- en: '[PRE5]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The reason we choose 3.3 is because after version 3.1, the code was deprecated
    in the old version of OpenGL. This was done to prohibit developers from using
    the older version of OpenGL. Since 3.3, the OpenGL version matches the shader
    version. So for 3.3, the OpenGL shader language version is also 3.3; it helps
    in keeping things consistent, neat, and tidy. But if you need a new feature, feel
    free to use something like 4.3.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择 3.3 的原因是因为在 3.1 版本之后，旧版本的 OpenGL 中的代码已被弃用。这样做是为了禁止开发者使用旧版本的 OpenGL。从 3.3
    版本开始，OpenGL 版本与着色器版本相匹配。因此，对于 3.3 版本，OpenGL 着色器语言版本也是 3.3；这有助于保持事物的一致性、整洁和有序。但如果你需要新功能，请随意使用类似
    4.3 的版本。
- en: 'Next, we''ll type in some more window hints:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将输入一些更多的窗口提示：
- en: '[PRE6]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In this project, we''ll be using `CORE_PROFILE`. Actually, there are two main
    profiles that are available: the core profile and the compatibility profile, `COMPAT_PROFILE`.
    The reason we are using `CORE_PROFILE` in our project is that `CORE_PROFILE` uses
    the new OpenGL stuff, whereas the compatibility profile uses the old way of doing
    things, thus ensuring maximum compatibility. You probably might be thinking even
    if it ensures maximum compatibility, why is it recommended not to use `COMPAT_PROFILE`?
    The reason for that is in this book you''re learning OpenGL in general, so we
    don''t want to learn the old, outdated way of doing things. Rather, we want to
    learn the new, modern OpenGL using vertex objects and vertex arrays to actually
    store stuff on a graphics card. So if you use the compatibility mode, you''re
    just getting into bad practices when using stuff like `glBegin`. So, that is the
    reason why we are setting it to the core profile.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将使用 `CORE_PROFILE`。实际上，有两种主要的配置文件可供选择：核心配置文件和兼容性配置文件，`COMPAT_PROFILE`。我们在项目中使用
    `CORE_PROFILE` 的原因是 `CORE_PROFILE` 使用新的 OpenGL 功能，而兼容性配置文件使用旧的方法做事，从而确保最大的兼容性。你可能可能会想，即使它确保了最大的兼容性，为什么建议不要使用
    `COMPAT_PROFILE`？原因在于这本书中你正在学习 OpenGL 的一般知识，所以我们不想学习过时的方法。相反，我们想学习使用顶点对象和顶点数组来存储图形卡上的新、现代
    OpenGL。因此，如果你使用兼容模式，你只是在使用诸如 `glBegin` 之类的功能时陷入不良实践。所以，这就是我们将其设置为核心配置文件的原因。
- en: 'Once we''ve set the profile, we set the window hint to get forward compatibility:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们设置了配置文件，我们将设置窗口提示以获取向前兼容性：
- en: '[PRE7]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This window hint is actually required in macOS because otherwise it will crash,
    but there's no harm in having it on Windows as well.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这个窗口提示实际上在 macOS 上是必需的，否则它将崩溃，但在 Windows 上也没有任何害处。
- en: 'In `WindowHint`, we''ll set `GLFW_RESIZABLE`, and we''ll set this to `FALSE`
    so that it prevents the window from being resized. If you want it to be resized,
    just set it as `TRUE`:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `WindowHint` 中，我们将设置 `GLFW_RESIZABLE`，并将其设置为 `FALSE` 以防止窗口被调整大小。如果您希望它可以调整大小，只需将其设置为
    `TRUE`：
- en: '[PRE8]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, we''re going to create our window. For that, we''ll add the following
    code:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将创建我们的窗口。为此，我们将添加以下代码：
- en: '[PRE9]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the preceding code, we call the values of the variables `WIDTH` and `HEIGHT`.
    These terms define the window's size and `"LearnOpenGL"` sets the title of our
    window. The window and the monitor variables are defined as null pointers and
    we'll deal with those in later chapters.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们调用变量 `WIDTH` 和 `HEIGHT` 的值。这些术语定义了窗口的大小，而 `"LearnOpenGL"` 设置了窗口的标题。窗口和监视器变量被定义为空指针，我们将在后面的章节中处理这些问题。
- en: 'Next, we''ll define variables for our screen''s width and height because this
    will be the actual resolution that we want the window set to:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将定义屏幕宽度和高度的变量，因为这将是我们希望窗口设置的实际分辨率：
- en: '[PRE10]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then, in the following line of code with `glfwGetFramebufferSize`, we pass
    the references to the screen width and the screen height:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在接下来的代码行中，使用 `glfwGetFramebufferSize`，我们传递屏幕宽度和高度的引用：
- en: '[PRE11]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: What this line of code actually does is it gets the actual width of the screen
    window itself, relative to the density of the screen. You could effectively omit
    these lines when you create an OpenGL viewport and just use `screenWidth` and
    `screenHeight` values only. But if you have something like a Mac or a Retina Mac,
    which is not natively 1920 x 1080, or, for example, a higher-density screen with
    a resolution like 3840 x 2160, the window would just get messed up. The content
    would be displayed in either the bottom-left of the screen or in the top-left.
    The previous line of code helps us in getting the actual width and height of our
    window, relative to any pixel density changes. So it's recommended to have it,
    as it will ensure maximum compatibility in the future, as more and more high resolution
    screens are coming out.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码实际上获取的是屏幕窗口本身的实际宽度，相对于屏幕的密度。当你创建 OpenGL 视口时，你可以有效地省略这些行，只使用 `screenWidth`
    和 `screenHeight` 的值。但是，如果你有像 Mac 或 Retina Mac 这样的设备，它们不是原生 1920 x 1080，或者例如具有
    3840 x 2160 分辨率的更高密度屏幕，窗口就会变得混乱。内容将显示在屏幕的左下角或右上角。上一行代码帮助我们获取窗口的实际宽度和高度，相对于任何像素密度的变化。因此，建议保留它，因为它将确保未来的最大兼容性，因为越来越多的超高分辨率屏幕正在出现。
- en: 'Now, we would want to check the window was created successfully, and we''ll
    do that as follows:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们想要检查窗口是否成功创建，我们将按照以下步骤进行：
- en: '[PRE12]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In the preceding code, we check the `nullptr == window` condition and we let
    the user know that something has gone wrong. Then, we just terminate anything
    that has been initialized with `glfwTerminate();`, and finally exit:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们检查了 `nullptr == window` 条件，并让用户知道出了些问题。然后，我们只是使用 `glfwTerminate();`
    终止任何已初始化的内容，并最终退出：
- en: '[PRE13]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, we need to enable GLEW and we''ll do that as follows:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要启用 GLEW，我们将按照以下步骤进行：
- en: '[PRE14]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Looking at `glewExperimental` in the code, you might wonder are we using experimental
    features? And, why have we to set it to `TRUE`? The reason for that is GLEW knows
    to use a modern approach to retrieve functions, pointers, and extensions. Basically,
    it's just a way of saying we're using GLEW the new and the modern way, but it's
    not necessarily an experimental function.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 看到代码中的 `glewExperimental`，你可能会想知道我们是否在使用实验性功能？为什么我们要将其设置为 `TRUE`？这样做的原因是 GLEW
    知道使用现代方法来检索函数、指针和扩展。基本上，这只是说我们正在使用 GLEW 的新和现代方式，但这并不一定是一个实验性功能。
- en: 'Then, we''re going to initialize GLEW and make sure it''s successfully initialized
    in one go:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将初始化 GLEW 并确保一次性成功初始化：
- en: '[PRE15]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: You can also use `return -1` instead of `return EXIT_FAILURE;` for Xcode.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用 `return -1` 而不是 `return EXIT_FAILURE;` 来代替 Xcode。
- en: 'Next, we''ll set up the OpenGL viewport:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将设置 OpenGL 视口：
- en: '[PRE16]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: What we did in the preceding line of code is that we set the initial coordinates
    from 0, 0 to `screenWidth` and `screenHeight`. The values that you'll retrieve
    here will be an accurate representation of what our window is relative to the
    screen, as you might have a higher or a lower pixel density screen.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一行代码中，我们所做的是将初始坐标从 0, 0 设置到 `screenWidth` 和 `screenHeight`。在这里获取的值将是我们窗口相对于屏幕的准确表示，因为你的屏幕可能有更高的或更低的像素密度。
- en: 'So now that we have set up the view port, we''ll create our game loop:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，现在我们已经设置了视口，我们将创建我们的游戏循环：
- en: '[PRE17]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In the preceding code, we created a `While` loop and initialized it to check
    whether the window is open; if it is, then run the loop. In the loop, we are clearing
    `colorbuffer` with the help of the `glClearColor` function. `ClearColor` is actually
    an optional line of code, but the reason we are adding it is if we don't add this,
    we might just get a blank, black background because we haven't drawn anything
    yet. So instead of a black background, we tried to spruce it up with some color.
    We defined colors in a range between 0 and 1, which is quite similar to a range
    between 0 and 255, where 0 is of no value and 1 is the full intensity of red,
    green, blue, and alpha.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们创建了一个 `While` 循环并将其初始化为检查窗口是否打开；如果是，则运行循环。在循环中，我们使用 `glClearColor`
    函数清除 `colorbuffer`。`ClearColor` 实际上是一行可选代码，但我们添加它的原因是如果我们不添加它，我们可能会得到一个空白、黑色的背景，因为我们还没有绘制任何东西。所以，我们试图用一些颜色来美化它。我们定义了介于
    0 和 1 之间的颜色，这与介于 0 和 255 之间的范围相当相似，其中 0 没有价值，1 是红色、绿色、蓝色和 alpha 的完全强度。
- en: 'Then, we added `glClear` to clear our window so that we''re ready to draw the
    next frame and put in `GL_COLOR_BUFFER_BIT;`. Here is where you would draw your
    OpenGL stuff. As we are not going to draw anything in this chapter, we''ll add
    `glfwSwapBuffers` and provide it to the window. Then, we''ll add `glfwTerminate`
    to close the window after the `while` loop is executed:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们添加了 `glClear` 来清除我们的窗口，以便我们准备好绘制下一帧，并在其中放入 `GL_COLOR_BUFFER_BIT;`。这就是你将绘制
    OpenGL 内容的地方。由于我们本章不会绘制任何内容，我们将添加 `glfwSwapBuffers` 并将其提供给窗口。然后，在 `while` 循环执行后，我们将添加
    `glfwTerminate` 来关闭窗口：
- en: '[PRE18]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: You can also use `return -1` instead of `return EXIT_FAILURE;` for Xcode.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用 `return -1` 代替 `return EXIT_FAILURE;` 来用于 Xcode。
- en: 'Now, let''s run this code and check the output. You will get a similar OpenGL
    window on your screen:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们运行此代码并检查输出。你将在屏幕上看到一个类似的 OpenGL 窗口：
- en: '![](img/63ecd60f-c95a-4af6-9c6a-63dc7a941155.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/63ecd60f-c95a-4af6-9c6a-63dc7a941155.png)'
- en: OpenGL rendering window for Windows
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 的 OpenGL 渲染窗口
- en: Setting up OpenGL using SDL on Windows
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Windows 上使用 SDL 设置 OpenGL
- en: In this section, we'll discuss how to set up OpenGL on a Windows machine using
    SDL and GLEW. **SDL** stands for **Simple DirectMedia Layer**, and it allows us
    to create a render window and provides access to input devices through OpenGL.
    SDL is prominently used to code games and other media applications that run on
    various operating systems. It's a cross-platform multimedia library written in
    the C language. **GLEW** (**OpenGL Extension Wrangler)**, as seen in the previous
    sections, allows us to easily use extensions and non-core OpenGL functionality.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论如何在 Windows 机器上使用 SDL 和 GLEW 设置 OpenGL。**SDL** 代表 **Simple DirectMedia
    Layer**，它允许我们创建渲染窗口，并通过 OpenGL 提供对输入设备的访问。SDL 主要用于编写在各种操作系统上运行的游戏和其他媒体应用程序。它是一个用
    C 语言编写的跨平台多媒体库。**GLEW**（**OpenGL Extension Wrangler**），如前所述，允许我们轻松使用扩展和非核心 OpenGL
    功能。
- en: Downloading the SDL library
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载 SDL 库
- en: 'We''ll begin the setup by downloading the essential libraries. Let''s first
    download the SDL library by following these steps:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先下载基本库开始设置。让我们首先按照以下步骤下载 SDL 库：
- en: Visit [http://libsdl.org/index.php](http://libsdl.org/index.php), go to Download,
    and click on the latest version; at the time of writing this book, SDL 2.0 was
    the latest version.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 [http://libsdl.org/index.php](http://libsdl.org/index.php)，转到下载，并点击最新版本；在撰写本书时，SDL
    2.0 是最新版本。
- en: Once you have clicked on the latest version, you may either want to download
    the development libraries or the runtime libraries. For this project, it is recommended
    that you download Development Libraries.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击最新版本后，你可能想要下载开发库或运行时库。对于这个项目，建议你下载开发库。
- en: We'll go for the Visual C++ one, which is `SDL2-devel-2.0.8-VC.zip`. Click on
    the filename and download it.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将选择 Visual C++ 的版本，即 `SDL2-devel-2.0.8-VC.zip`。点击文件名并下载。
- en: Once you've downloaded the file, unzip it and put it in the `SDL` folder inside
    the `OpenGL` folder that we created in previous sections.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载完文件后，解压并将其放入我们在前面章节中创建的“OpenGL”文件夹内的“SDL”文件夹中。
- en: After downloading the SDL library, we move on to downloading the GLEW libraries,
    but as we've already downloaded them in the previous sections, you can just refer
    to that.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载 SDL 库之后，我们继续下载 GLEW 库，但由于我们在前面的章节中已经下载了它们，所以你可以直接参考那里。
- en: If you want a quick review on downloading GLEW, you can refer to the *Downloading
    the essential libraries* section at the start of the chapter.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想快速回顾下载 GLEW，可以参考章节开头“下载基本库”部分。
- en: Setting up OpenGL using SDL and GLEW with absolute linking
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 SDL 和 GLEW 以绝对链接方式设置 OpenGL
- en: 'Follow these steps to set up the environment in Visual Studio for OpenGL using
    SDL and GLEW with absolute linking:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤在 Visual Studio 中设置使用 SDL 和 GLEW 以绝对链接方式设置 OpenGL 的环境：
- en: Open up Visual Studio and click on Create new Project... in the home page window.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio 并在主页窗口中点击“创建新项目...”。
- en: Go to Visual C++ | Windows Desktop | Windows Console Application, name your
    project `SDLOpenGL`, and then click OK.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 Visual C++ | Windows 桌面 | Windows 控制台应用程序，将你的项目命名为 `SDLOpenGL`，然后点击确定。
- en: Next, right-click on the project in the Solution Explorer window. Click on Properties**.**
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在解决方案资源管理器窗口中右键单击项目。点击“属性**”。**
- en: A Property Pages window will pop up, click on C/C++ | General, and then go to
    Additional Include Directories. Click on the dropdown, then click on Edit, and
    you will get a pop up window.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将弹出一个属性页窗口，点击 C/C++ | 一般，然后转到附加包含目录。点击下拉菜单，然后点击编辑，你将得到一个弹出窗口。
- en: Click on the New button, and then click on the three dots. And now, you want
    to go to SDL in the `OpenGL` folder. Select `include` and then click on the Select
    Folder button. Repeat the same process for including GLEW files. Once both the
    files have been included, click on the OK button.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“新建”按钮，然后点击三个点。现在，你想要进入`OpenGL`文件夹中的SDL。选择`include`，然后点击“选择文件夹”按钮。重复相同的步骤以包含GLEW文件。一旦两个文件都已被包含，点击“确定”按钮。
- en: Now, again in the Property Pages window, we'll go to Linker | General, and then
    go to Additional Library Directories. Click on the dropdown, then click on Edit,
    and you will get a pop-up window.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，再次在“属性页”窗口中，我们将转到链接器 | 一般，然后转到附加库目录。点击下拉菜单，然后点击“编辑”，你将得到一个弹出窗口。
- en: In the window, click on the New button, then click on the three dots, and go
    to the SDL folder. Open the `lib` folder, go to x86 (which is a 32-bit file, actually),
    and then click on the Select Folder button.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在窗口中，点击“新建”按钮，然后点击三个点，进入SDL文件夹。打开`lib`文件夹，转到x86（实际上是一个32位文件），然后点击“选择文件夹”按钮。
- en: Repeat the same process for including GLEW libraries. Open the `lib` folder,
    then double-click on the `Release` folder, select Win32, and then click on the
    Select Folder button. Once you have added both the libraries, click on the OK
    button.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复相同的步骤以包含GLEW库。打开`lib`文件夹，然后双击`Release`文件夹，选择Win32，然后点击“选择文件夹”按钮。一旦添加了这两个库，点击“确定”按钮。
- en: Next, we'll go to Linker **|** Input, and then go to Additional Dependencies**.**
    Click on the dropdown, then click on Edit, and type `opengl32.lib`. Then, we'll
    type `glew32s.lib`. If you don't want to statically link the library, you can
    just remove the `s`. Next, we'll type `SDL2.lib` and `SDL2main.lib`, and then
    click on OK.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将转到链接器 **|** 输入，然后转到附加依赖项**。** 点击下拉菜单，然后点击“编辑”，输入`opengl32.lib`。然后，输入`glew32s.lib`。如果您不想静态链接库，可以只删除`s`。接下来，输入`SDL2.lib`和`SDL2main.lib`，然后点击“确定”。
- en: Then, click on the Apply button.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击“应用”按钮。
- en: Setting up OpenGL using SDL and GLEW with relative linking
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SDL和GLEW设置OpenGL，并使用相对链接
- en: 'In this section, we''ll take a look at how to set up OpenGL using SDL and GLEW
    as the provider for creating a render window with relative linking. Follow these
    steps:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将查看如何使用SDL和GLEW作为创建渲染窗口的提供者来设置OpenGL。按照以下步骤操作：
- en: Click on Create new project... and go to Visual C++. Select Windows Console
    Application and name it something like `SDLApp`.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“创建新项目...”，然后转到Visual C++。选择Windows控制台应用程序，并将其命名为类似`SDLApp`的名称。
- en: Then, in the New Project window, click on the Browse... button. Go to the `OpenGL`
    folder that you created on the desktop and placed the downloaded libraries into
    `External Libraries`. Just select the folder and then click OK.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在“新项目”窗口中，点击“浏览...”按钮。转到您在桌面上创建的`OpenGL`文件夹，并将下载的库放入`外部库`中。只需选择文件夹，然后点击“确定”。
- en: Now, we'll right-click on the project in the Solution Explorer window. Go to
    Add | New Item, and you will get an Add New Item window. Select C++ File, as this
    will be our main entry point; let's name it `main.cpp` and then click on the Add
    button.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将在“解决方案资源管理器”窗口中的项目上右键单击。转到“添加 | 新项”，你将得到一个“添加新项”窗口。选择C++文件，因为这将是我们的主入口点；让我们将其命名为`main.cpp`，然后点击“添加”按钮。
- en: Next, again right-click on the project in the Solution Explorer window. Click
    on Properties**.**
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，再次在“解决方案资源管理器”窗口中右键单击项目。点击“属性**”。**
- en: A Property Pages window will pop up. Click on C/C++ | General and then go to
    Additional Include Directories. Click on the dropdown, and then click on Edit.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将会弹出一个“属性页”窗口。点击C/C++ | 一般，然后转到附加包含目录。点击下拉菜单，然后点击“编辑”。
- en: Then, click on the New button and type `$(SolutionDir)` in the textbox. This
    command refers to the folder that contains our `.sln` file. So if we were to specify
    a folder in the path, and whenever we do something new in the project, it'd be
    relatively linked to wherever that file is located.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击“新建”按钮，在文本框中输入`$(SolutionDir)`。此命令指的是包含我们的`.sln`文件的文件夹。因此，如果我们指定路径中的文件夹，并且每当我们在项目中做新的操作时，它都会相对链接到该文件所在的位置。
- en: 'To link up the include files, add the paths, as shown in the following screenshot:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要链接包含文件，添加路径，如以下截图所示：
- en: '![](img/419f26f2-3273-45fc-8a73-294ae0616179.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/419f26f2-3273-45fc-8a73-294ae0616179.png)'
- en: 'Next, we''ll link up the libraries. So, go to Linker | General, and then go
    to Additional Library Directories. Click on the dropdown and then click on Edit.
    Click on New and add the paths, as shown in the following screenshot, then click
    OK, and click Apply:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将链接库。因此，转到链接器 | 通用，然后转到附加库目录。点击下拉菜单，然后点击编辑。点击新建并添加路径，如以下截图所示，然后点击确定，并点击应用：
- en: '![](img/3ff489e0-a913-4cc4-b26c-56edf808f010.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3ff489e0-a913-4cc4-b26c-56edf808f010.png)'
- en: Next, we'll link up the `.lib` files. So, go to the dropdown and click Edit.
    Now, just type in `opengl32.lib`. Then, we'll type `glew32s.lib`. Next, we'll
    type `SDL2.lib` and `SDL2main.lib`, and then click on OK.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将链接`.lib`文件。因此，转到下拉菜单并点击编辑。现在，只需输入`opengl32.lib`。然后，我们将输入`glew32s.lib`。接下来，我们将输入`SDL2.lib`和`SDL2main.lib`，然后点击确定。
- en: Then, click on the Apply button.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击应用按钮。
- en: Adding a DLL file to the project
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将DLL文件添加到项目中
- en: 'As we saw in the previous sections, before completing the setup, we''ll have
    to copy the dynamic link library into our project. Follow these steps to do that:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 如前几节所述，在完成设置之前，我们必须将动态链接库复制到我们的项目中。按照以下步骤进行操作：
- en: 'Go to `C:\OpenGL\SDL\lib\x86` and copy the `SDL2.dll` dynamic link library,
    as seen in the following screenshot:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`C:\OpenGL\SDL\lib\x86`并复制`SDL2.dll`动态链接库，如以下截图所示：
- en: '![](img/04bff535-965d-46d1-9d07-4b8d44a7a09e.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/04bff535-965d-46d1-9d07-4b8d44a7a09e.png)'
- en: SDL2.dll dynamic link library
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: SDL2.dll动态链接库
- en: Now, go to the location in your system where the `main.cpp` file of your project
    is located and paste the dynamic link library there. We'll also have to copy and
    paste the `glew32.dll` file here from the `bin` folder of the `GLEW` folder.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，转到你的系统中`main.cpp`文件所在的位置，并将动态链接库粘贴在那里。我们还需要从`GLEW`文件夹的`bin`文件夹中复制并粘贴`glew32.dll`文件。
- en: Setting up OpenGL using SDL on a Mac
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Mac上使用SDL设置OpenGL
- en: Here, we'll take a look at how to set up OpenGL using SDL on a Mac system. We'll
    begin by downloading the essential libraries on your system. As seen in the previous
    sections, we'll be using Homebrew to download the packages and libraries.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将查看如何在Mac系统上使用SDL设置OpenGL。我们将首先在你的系统上下载必要的库。如前几节所示，我们将使用Homebrew下载软件包和库。
- en: Downloading the SDL and GLEW libraries
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载SDL和GLEW库
- en: 'In the Terminal, type the following command to download and install the SDL
    libraries:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中，输入以下命令以下载和安装SDL库：
- en: '[PRE19]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Now, just press *Enter* and the SDL library will be downloaded onto your system.
    Next, we'll download the GLEW library, but since we've already downloaded it in
    the previous section, you can refer to that. If you want a quick review on downloading
    GLEW, you can refer to the *Downloading the GLFW and GLEW libraries for a Mac*
    section.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，只需按*Enter*键，SDL库将被下载到你的系统上。接下来，我们将下载GLEW库，但由于我们已经在上一节中下载了它，你可以参考那里。如果你想快速回顾下载GLEW，可以参考*为Mac下载GLFW和GLEW库*部分。
- en: Setting up Xcode for OpenGL using SDL
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SDL设置Xcode的OpenGL
- en: 'Follow these steps:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤操作：
- en: Open up Xcode and click on Create a new Xcode project.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Xcode并点击创建一个新的Xcode项目。
- en: Go to OS X | Application, then select Command Line Tool, and click Next.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到OS X | 应用程序，然后选择命令行工具，并点击下一步。
- en: 'You will get the following window. Fill in the necessary details, as highlighted
    in the screenshot, and make sure for the Language option, C++ is selected:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将看到以下窗口。填写必要的详细信息，如截图所示，并确保在语言选项中选择了C++：
- en: '![](img/1e1c87f6-64da-4ce4-b6eb-21aa4f733bf8.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1e1c87f6-64da-4ce4-b6eb-21aa4f733bf8.png)'
- en: Details of the project
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 项目详情
- en: Then, set the location where you would like to store and save the project, and
    then click on the Create button.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，设置你想要存储和保存项目的位置，然后点击创建按钮。
- en: 'Next, click on your project and go to Build Settings. In Build Settings, go
    to the Search Paths section and click on Header Search Paths. Then, click on +
    and type `/usr/local/include`. This will allow us to #include GLEW and SDL header
    files in our `main.cpp`.'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击你的项目并转到构建设置。在构建设置中，转到搜索路径部分并点击头文件搜索路径。然后，点击加号并输入`/usr/local/include`。这将允许我们在`main.cpp`中包含GLEW和SDL头文件。
- en: Now go to Build Phases, then click on Link Binary With Libraries, and click
    the + button. Type `opengl` in the search bar, select `OpenGL.framework`, and
    then click on the Add button.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在转到构建阶段，然后点击链接二进制与库，并点击加号按钮。在搜索栏中输入`opengl`，选择`OpenGL.framework`，然后点击添加按钮。
- en: Again click on the + button, and then click on Add Other.... Now, press *Cmd*
    + *Shift* + *G*, and it will open up a `go-to` folder search bar. In it, type
    `/usr/local`. Then click on Cellar, go to the glew | lib folder, select `libGLEW.1.12.0.dylib`
    without the little arrow, and click on Open.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次点击+按钮，然后点击添加其他...现在，按*Cmd* + *Shift* + *G*，它将打开一个`go-to`文件夹搜索栏。在其中，键入`/usr/local`。然后点击Cellar，进入glew
    | lib文件夹，选择不带小箭头的`libGLEW.1.12.0.dylib`，然后点击打开。
- en: Click + again, then click Add Other.... Press *Cmd* + *Shift* + *G* and type
    `/usr/local`. Now go to Cellar, and go to sdl | lib. Select the non-alias `libSDL2-2.0.0.dylib`
    and click on the Open button.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次点击+，然后点击添加其他...按*Cmd* + *Shift* + *G*并键入`/usr/local`。现在转到Cellar，进入sdl | lib。选择非别名的`libSDL2-2.0.0.dylib`，然后点击打开按钮。
- en: With all the steps executed, our project is now set up to use SDL and GLEW with
    OpenGL on a Mac. We can now go to the `main.cpp` file and start writing our code
    for creating the OpenGL rendering window.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 执行所有步骤后，我们的项目现在已设置好，可以在Mac上使用SDL和GLEW以及OpenGL。我们现在可以转到`main.cpp`文件，并开始编写创建OpenGL渲染窗口的代码。
- en: Creating the OpenGL rendering window using SDL
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SDL创建OpenGL渲染窗口
- en: 'Perform the following steps to understand how to create a rendering window
    using SDL:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以了解如何使用SDL创建渲染窗口：
- en: 'Let''s go to our `main.cpp` file in Visual Studio or Xcode and let''s get started.
    The first thing to do is include `iostream`; this''ll be used to log out any errors
    that we have:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们去Visual Studio或Xcode中的`main.cpp`文件，开始编写代码。首先，我们需要包含`iostream`；这将用于记录任何错误：
- en: '[PRE20]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Then, we''ll include other necessary header files, such as the following:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将包含其他必要的头文件，如下所示：
- en: '[PRE21]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Next, we''ll create a constant variable using `GLint`:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将使用`GLint`创建一个常量变量：
- en: '[PRE22]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The reason for using `Glint` is quite simple: a regular `int` on different
    compilers might have different sizes, whereas `GLint` is always consistent. The
    `WIDTH` and the `HEIGHT` variables will store the size of our window.'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`GLint`的原因相当简单：在不同的编译器上，普通的`int`可能有不同的大小，而`GLint`始终是一致的。`WIDTH`和`HEIGHT`变量将存储我们窗口的大小。
- en: 'Then, we''ll set up our main entry point:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将设置我们的主入口点：
- en: '[PRE23]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: You might have noticed we have passed the `argc` integer and the `*argv []`
    as `char`. These are the argument count and the argument value and SDL requires
    them to run the code, or else you will get errors while running it.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到我们传递了`argc`整数和`*argv []`作为`char`。这些是参数计数和参数值，SDL需要它们来运行代码，否则在运行时你会得到错误。
- en: 'Next, we''ll initialize SDL with the help of `SDL_Init()` and to it we''ll
    pass `SDL_INIT_EVERYTHING` to make sure we are initializing every part of the
    SDL library:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将使用`SDL_Init()`初始化SDL，并将`SDL_INIT_EVERYTHING`传递给它，以确保我们正在初始化SDL库的每个部分：
- en: '[PRE24]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Then, we''ll set up some attributes, which are essentially properties that
    we''ll set for our window:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将设置一些属性，这些属性本质上是我们将为我们的窗口设置的属性：
- en: '[PRE25]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'So, there are three main profiles that we can use for OpenGL with SDL:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以使用SDL的OpenGL的三个主要配置文件：
- en: ES, which is embedded systems, for stuff like mobile devices
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ES，即嵌入式系统，用于移动设备等设备
- en: There's the core profile, which is for modern OpenGL
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是核心配置文件，用于现代OpenGL
- en: Then there's the compatibility profile, which allows you to use an older version
    of OpenGL and ensures maximum compatibility.
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后是兼容性配置文件，它允许你使用较旧的OpenGL版本，并确保最大兼容性。
- en: For our project, we'll use the core profile.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的项目，我们将使用核心配置文件。
- en: 'Next, we''ll set up some more attributes, as follows:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将设置更多属性，如下所示：
- en: '[PRE26]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Once all the attributes have been declared, we''ll declare the SDL window,
    as follows:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦所有属性都已声明，我们将声明SDL窗口，如下所示：
- en: '[PRE27]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The preceding code contains the name of our window, `OpenGL`. Then, we set the
    position of our window to `(0, 0)`. To set the width and the height of our window,
    we'll use the `WIDTH` and `HEIGHT` values that we declared earlier. The beauty
    of using these values is if we refer to these anywhere, they'll get updated if
    we were to change them later.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码包含我们窗口的名称，`OpenGL`。然后，我们将窗口位置设置为`(0, 0)`。为了设置窗口的宽度和高度，我们将使用之前声明的`WIDTH`和`HEIGHT`值。使用这些值的优点是，如果我们稍后更改它们，这些值将得到更新。
- en: 'Next, for the context, we just need to provide the window variable that we
    created before:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，对于上下文，我们只需要提供之前创建的窗口变量：
- en: '[PRE28]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now, we are going to initialize GLEW and ensure that it''s has been initialized
    by checking for the condition in an `if` statement. If it hasn''t been initialized,
    we''re going to notify the user or the developer about it in the console:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将初始化 GLEW 并通过在 `if` 语句中检查条件来确保它已经被初始化。如果没有初始化，我们将在控制台中通知用户或开发者：
- en: '[PRE29]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now, we''ll set up the OpenGL viewport, as follows:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将设置 OpenGL 视口，如下所示：
- en: '[PRE30]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'What we did in the preceding line of code is that we set the initial coordinates
    from `0`, `0` to `Width` and `Height`. The values that you''ll retrieve here will
    be the accurate representation of what our window is relative to the screen, as
    you might have a higher or a lower pixel density screen. Next, we''re going to
    create a window event, as follows:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码行中，我们设置了初始坐标从 `0`、`0` 到 `Width` 和 `Height`。您在这里检索到的值将是我们窗口相对于屏幕的准确表示，因为您可能有更高或更低的像素密度屏幕。接下来，我们将创建一个窗口事件，如下所示：
- en: '[PRE31]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now, we''ll create our game loop:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将创建我们的游戏循环：
- en: '[PRE32]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In the preceding code, we set `while` to `true` to keep the loop constantly
    running while our application is open. If something happens, like the user closes
    the application, we''ll exit the `while` loop and do some cleanup. While the loop
    is running, we''ll check for a window event and pass a reference to the window.
    We''ll also check if the window is getting shut down and if it is, then we''ll
    break out of the loop. Now, outside of both the `if` statements, we''ll try to
    clear the screen with the help of the `glClearColor` statement. A `ClearColor`
    statement isn''t necessary. We''re adding it because we might just end up getting
    a black background, as we''re not drawing any shapes or any textures at the moment.
    We''ll add color to the window with the help of the following parameters: `0.2f`,
    `0.3f`, `0.3f`, and `1.0f`. These values range between 0 and 1; these are very
    similar to 0 to 255\. And these are red, green, blue, and alpha values. Next,
    we''ll clear the screen with the help of `glClear`. And, the last thing we''re
    going to do is `SDL_GL_SwapWindow`. It swaps the window if double buffering is
    present; if not, then it won''t. Then, we''ll do some cleanup and exit out of
    the code with `EXIT_SUCCESS`.'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们将 `while` 设置为 `true` 以保持循环在应用程序打开期间持续运行。如果发生某些情况，比如用户关闭应用程序，我们将退出
    `while` 循环并进行一些清理。当循环运行时，我们将检查窗口事件并传递窗口的引用。我们还将检查窗口是否正在关闭，如果是的话，我们将退出循环。现在，在两个
    `if` 语句之外，我们将尝试使用 `glClearColor` 语句清除屏幕。`ClearColor` 语句并不是必需的。我们添加它是因为我们可能最终会得到一个黑色背景，因为我们目前没有绘制任何形状或纹理。我们将使用以下参数将颜色添加到窗口中：`0.2f`、`0.3f`、`0.3f`
    和 `1.0f`。这些值介于 0 和 1 之间；它们与 0 到 255 非常相似。这些是红色、绿色、蓝色和 alpha 值。接下来，我们将使用 `glClear`
    清除屏幕。最后，我们将执行的操作是 `SDL_GL_SwapWindow`。如果存在双缓冲，它将交换窗口；如果没有，则不会。然后，我们将进行一些清理并使用
    `EXIT_SUCCESS` 退出代码。
- en: Now, let's run this code and check the output. You will get the same OpenGL
    window as we got in the preceding sections.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们运行此代码并检查输出。您将得到与前面章节中相同的 OpenGL 窗口。
- en: Setting up OpenGL using SFML on Windows
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Windows 上使用 SFML 设置 OpenGL
- en: In this section, we'll study how to set up OpenGL using SFML and GLEW on a Windows
    machine. But, first, let's understand what SFML is. **SFML** is a simple and fast
    multimedia library. It's a software development library designed for cross-platform
    use to provide a programming interface for various multimedia components on the
    system. It allows you to do stuff like handle or render windows, so we can draw
    our OpenGL and handle events, such as various inputs, and it also allows us to
    handle textures.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将研究如何在 Windows 机器上使用 SFML 和 GLEW 设置 OpenGL。但是，首先，让我们了解 SFML 是什么。**SFML**
    是一个简单且快速的多媒体库。它是一个为跨平台使用而设计的软件开发库，旨在为系统上的各种多媒体组件提供编程接口。它允许您执行诸如处理或渲染窗口、绘制我们的 OpenGL
    以及处理事件（如各种输入）等操作，它还允许我们处理纹理。
- en: Downloading the SFML library
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载 SFML 库
- en: Let's download the SFML library onto your system by visiting [https://www.sfml-dev.org/index.php](https://www.sfml-dev.org/index.php).
    Then, go to Download, click on SFML 2.5.0, and then select whichever Visual C++
    version matches your Visual Studio version and system compatibility, and accordingly
    click on the link. The file will be downloaded as a ZIP file onto your system.
    Next, go to the `OpenGL` folder (which we created in the previous sections) and
    inside it, create a folder called `SFML` to extract and place our SFML files.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 请通过访问[https://www.sfml-dev.org/index.php](https://www.sfml-dev.org/index.php)将SFML库下载到您的系统上。然后，转到下载，点击SFML
    2.5.0，然后选择与您的Visual Studio版本和系统兼容性匹配的任何Visual C++版本，并相应地点击链接。文件将以ZIP文件的形式下载到您的系统上。接下来，转到`OpenGL`文件夹（我们在前面的章节中创建的），并在其中创建一个名为`SFML`的文件夹以提取和放置我们的SFML文件。
- en: Linking the SFML and GLEW libraries to the project
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将SFML和GLEW库链接到项目中
- en: The steps to link the SFML and GLEW libraries to our project with absolute or
    relative linking are similar to what we discussed in the previous sections. The
    only difference will be in the step where we link up the `.lib` files. For that,
    go to Additional Dependencies and in the textbox, just type in `opengl32.lib`.
    Then, we'll type `glew32s.lib`. And to link SFML libraries, we'll type `sfml-graphics.lib`,
    `sfml-system.lib`, and `sfml-window.lib`, and then click on OK.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 将SFML和GLEW库以绝对或相对链接方式链接到我们的项目的步骤与我们之前章节中讨论的类似。唯一的区别将在于我们链接`.lib`文件的步骤。为此，转到“附加依赖项”，在文本框中仅输入`opengl32.lib`。然后，我们将输入`glew32s.lib`。要链接SFML库，我们将输入`sfml-graphics.lib`、`sfml-system.lib`和`sfml-window.lib`，然后点击确定。
- en: Adding a DLL file to the project
  id: totrans-272
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将DLL文件添加到项目中
- en: As seen in the previous sections, before we begin with coding, we need to place
    the dynamic link library into our project. To do that, go to `C:\OpenGL\SFML\bin\`
    and copy `sfml-graphics-2.dll`, `sfml-system-2.dll`, and `sfml-window-2.dll`,
    and paste them into the location in your system where the `main.cpp` file of your
    project is located. We'll also have to copy and paste the `glew32.dll` file here
    from the `bin` folder of the `GLEW` folder.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 如前几节所示，在开始编码之前，我们需要将动态链接库放入我们的项目中。为此，转到`C:\OpenGL\SFML\bin\`并复制`sfml-graphics-2.dll`、`sfml-system-2.dll`和`sfml-window-2.dll`，并将它们粘贴到您的系统中`main.cpp`文件所在的位置。我们还将从`GLEW`文件夹的`bin`文件夹中复制并粘贴`glew32.dll`文件到这里。
- en: With this, we are all set to code our OpenGL rendering window using SFML.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，我们就准备好使用SFML编写OpenGL渲染窗口了。
- en: Setting up OpenGL using SFML on a Mac
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Mac上使用SFML设置OpenGL
- en: The steps to download and link the SFML and GLEW libraries to our project will
    be similar to the previous sections where we discussed linking the GLFW and SDL
    libraries to the project on a Mac system.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 将SFML和GLEW库下载并链接到我们的项目的步骤将与之前章节中讨论的将GLFW和SDL库链接到Mac系统上的项目类似。
- en: With the setup process complete, let's move on to coding our OpenGL rendering
    window.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 设置过程完成后，让我们继续编写我们的OpenGL渲染窗口代码。
- en: Creating the OpenGL rendering window using SFML
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SFML创建OpenGL渲染窗口
- en: 'Check out the below mentioned steps:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 检查以下步骤：
- en: 'Go to your `main.cpp` file in Visual Studio or Xcode and begin typing the following
    code:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio或Xcode中转到您的`main.cpp`文件，并开始输入以下代码：
- en: '[PRE33]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Here, we''ll include the GLEW and SFML libraries in our project:'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们将GLEW和SFML库包含到我们的项目中：
- en: '[PRE34]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: In the preceding lines of code, we've defined the `GLint` constant. The reason
    we're creating constant global variables is so that we can easily use these wherever
    we need them in the code, whether that's for initially creating the window or
    for manipulating some sort of shape.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码行中，我们定义了`GLint`常量。我们创建全局变量的原因是为了能够轻松地在代码的任何需要的地方使用它们，无论是最初创建窗口还是操纵某种形状。
- en: 'Next, let''s define our entry point:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们定义我们的入口点：
- en: '[PRE35]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'In the preceding lines of code, we''ve defined some settings for our application
    and rendering window:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码行中，我们为我们的应用程序和渲染窗口定义了一些设置：
- en: '[PRE36]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Here, the `majorVersion` and `minorVersion` that we defined in the preceding
    lines of code are for setting the version of OpenGL. Here, we set the version
    as 3.3 by setting the `minorVersion` and the `majorVersion` to 3\. If you wish
    to set up for any other version, you'll have to make changes accordingly. The
    `majorVersion` is to the left of the decimal point and the `minorVersion` is to
    the right of the decimal point. Then, we defined that we're using core modern
    OpenGL by setting `ContextSettings` to `Core`.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们在前面的代码行中定义的`majorVersion`和`minorVersion`是为了设置OpenGL的版本。在这里，我们通过将`minorVersion`和`majorVersion`设置为3.3来设置版本为3.3。如果你希望设置其他版本，你必须相应地进行更改。`majorVersion`位于小数点左侧，而`minorVersion`位于小数点右侧。然后，我们通过将`ContextSettings`设置为`Core`来定义我们正在使用核心现代OpenGL。
- en: 'Next, you want to define `sf::Window`. Here, we''re going to put `sf::VideoMode`,
    and we''re going to put `WIDTH`, `HEIGHT`, and `32` for the pixel depth. Then,
    we''ll add `OpenGL SFML` as the title of our window. And then, we add `sf::Style::Titlebar`
    and `sf::Style::Close` to have a title bar and a close button for our window:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，你想要定义`sf::Window`。在这里，我们将放置`sf::VideoMode`，并将`WIDTH`、`HEIGHT`和`32`设置为像素深度。然后，我们将添加`OpenGL
    SFML`作为窗口的标题。接着，我们添加`sf::Style::Titlebar`和`sf::Style::Close`以使窗口具有标题栏和关闭按钮：
- en: '[PRE37]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Now, we''ll try to initialize GLEW by setting it to `TRUE` and if it''s unsuccessful,
    then we''ll display a `Failed to initialize GLEW` message to the developer. And
    then, we''re going to do `return EXIT_FAILURE` because it has failed:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将尝试通过将其设置为`TRUE`来初始化GLEW，如果初始化失败，我们将向开发者显示`Failed to initialize GLEW`消息。然后，我们将执行`return
    EXIT_FAILURE`因为初始化失败了：
- en: '[PRE38]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Next, we are going to create a `while` loop and define certain conditions in
    it:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个`while`循环并在其中定义某些条件：
- en: '[PRE39]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: In the preceding `while` loop, we are stating that if the window is closed,
    we are going to stop running our application and break out of our loop.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的`while`循环中，我们声明如果窗口关闭，我们将停止运行我们的应用程序并退出循环。
- en: 'Then, we''ll add some color to our window and define a space to draw:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将为我们的窗口添加一些颜色并定义一个绘图空间：
- en: '[PRE40]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Let's run our code and check whether there are any errors. If no errors pop
    up, we'll get a rendering window as output, similar to what we have witnessed
    in the previous sections.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行我们的代码并检查是否有任何错误。如果没有错误弹出，我们将得到一个渲染窗口作为输出，类似于我们在前面的章节中看到的那样。
- en: Summary
  id: totrans-300
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we discussed how to set up OpenGL using various libraries:
    GLFW, GLEW, SDL, and SFML. We learned how to set up our OpenGL projects on Windows
    and Mac. And, we also discussed how to link the libraries to our projects using
    absolute or relative linking. We then created rendering windows to display OpenGL
    graphics.'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了如何使用各种库设置OpenGL：GLFW、GLEW、SDL和SFML。我们学习了如何在Windows和Mac上设置我们的OpenGL项目。此外，我们还讨论了如何使用绝对或相对链接将库链接到我们的项目中。然后，我们创建了渲染窗口来显示OpenGL图形。
- en: In the next chapter, we'll learn how to draw shapes like triangle and rectangle
    using OpenGL. Also, we'll discuss about how to apply colors and textures to the
    shapes.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用OpenGL绘制三角形和矩形等形状。此外，我们还将讨论如何将颜色和纹理应用到形状上。
