["```cpp\nvoid switchLight(LightBulb bulb){\n    if(switchIsOn) bulb.turnOff();\n    else bulb.turnOn();\n}\n```", "```cpp\nvoid switchLight(boolean switchIsOn, LightBulb bulb){    if(switchIsOn) \n    bulb.turnOff();\n    else bulb.turnOn();\n}\n```", "```cpp\nLightBulbSignal signalForBulb(boolean switchIsOn){\n    if(switchIsOn) return LightBulbSignal.TurnOff;\n    else return LightBulbSignal.TurnOn;\n}\n// use the output like this: sendSignalToLightBulb(signalForBulb(switchIsOn))\n```", "```cpp\nLightBulbSignal signalForBulb(boolean switchIsOn){\n    return switchIsOn ? LightBulbSignal.TurnOff :    \n    LightBulbSignal.TurnOn;\n}\n// use the output like this: sendSignalToLightBulb(signalForBulb(switchIsOn))\n```", "```cpp\nstatic LightBulbSignal signalForBulb(const boolean switchIsOn){\n    return switchIsOn ? LightBulbSignal.TurnOff :  \n    LightBulbSignal.TurnOn;\n}\n// use the output like this: sendSignalToLightBulb(signalForBulb(switchIsOn))\n```", "```cpp\nint zero(){return 0;}\n```", "```cpp\nclass Number{\n    public:\n        static int zero(){ return 0; }\n}\n```", "```cpp\nclass Number{\n    private:\n        static int accessCount;\n    public:\n        static int zero(){++accessCount; return 0;}\n        static int getCount() { return accessCount; }\n};\nint Number::accessCount = 0;\nint main(){\nNumber::zero();\ncout << Number::getCount() << endl; // will print 1\n}\n```", "```cpp\nstatic const int accessCount;\n```", "```cpp\nclass Number{\n    public:\n        static int zero(){ return 0; }\n        static int increment(const int value){ return value + 1; }\n}\n```", "```cpp\nclass Number{\n    public:\n        static int zero(){ return 0; }\n        static int increment(const int value){ return value + 1; }\n        static int add(const int first, const int second){ return first  \n        + second; }\n};\n```", "```cpp\nclass Number{\n    public:\n        static int zero(){ return 0; }\n        static int increment(const int& value){ return value + 1; }\n        static int add(const int& first, const int& second){ return \n        first + second; }\n};\n```", "```cpp\nclass Number{\n    public:\n        static int incrementValueFromPointer(const int* const value )   \n        {return *value + 1;}\n};\n```", "```cpp\nclass Number{\n    public:\n        int increment(int value){ return ++value; }\n};\nint main(){\n    Number number;\n    int output = number.increment(Number::zero());\n    cout << output << endl;\n }\n```", "```cpp\n int increment(int value){ return ++value; }\n```", "```cpp\n static int increment(const int value){ return value + 1; }\n```", "```cpp\n static int increment(int& value){ return ++value; }\n```", "```cpp\n  int value = Number::zero(); //value is 0\n      cout << Number::increment(value) << endl;\n      cout << value << endl; // value is now 1\n```", "```cpp\nstatic int increment(const int& value) {return value + 1; }\n```", "```cpp\n  static int increment(int* pValue)\n```", "```cpp\n static int increment(int* pValue){ return ++*pValue; }\n```", "```cpp\n static int increment(int* const pValue){ return *pValue + 1; }\n```", "```cpp\nclass Number {\n    static int* increment(int* pValue){ return ++pValue; }\n}\n\nint main(){\n    int* pValue = new int(10);\n    cout << \"Address: \" << pValue << endl;\n    cout << \"Increment pointer address:\" <<   \n    Number::incrementPointerAddressImpure(pValue) << endl;\n    cout << \"Address after increment: \" << pValue << endl;\n    delete pValue;\n}\n```", "```cpp\nAddress: 0x55cd35098e80\nIncrement pointer address:0x55cd35098e80\nAddress after increment: 0x55cd35098e80\nIncrement pointer value:10\n```", "```cpp\n static int* increment(int*& pValue){ return ++pValue; }\n```", "```cpp\n static int* increment(int* const& pValue){ return ++pValue; }\n```", "```cpp\n  static int* incrementPointerAddressAndValue(int* const& pValue){\n      (*pValue)++;\n      return pValue + 1;\n  }\n```", "```cpp\n  static const int* incrementPointerAddressAndValuePure(const int* \n      const& pValue){\n          (*pValue)++;//Compilation error\n          return pValue + 1;\n  }\n```", "```cpp\nint zero(){ return 0; }\nint increment(int& value){ return ++value; }\nconst int* incrementPointerAddressAndValuePure(const int* const& pValue){\n    return pValue + 1;\n}\n```", "```cpp\nvector<int> values = {324, 454, 12, 45, 54564, 32};\n     sort(values.begin(), values.end());\n```", "```cpp\nvector<int> sortedValues = pureSort(values);\n```", "```cpp\nvoid incrementAll(int& first, int& second){\n    ++first;\n    ++second;\n}\n```", "```cpp\nconst tuple<int, int> incrementAllPure(const int& first, const int&  \n    second){\n        return make_tuple(first + 1, second + 1);\n }\n int main(){\n     auto results = incrementAllPure(1, 2);\n     // Can also use a simplified version\n     // auto [first, second] = incrementAllPure(1, 2);\n     cout << \"Incremented pure: \" << get<0>(results) << endl;\n     cout << \"Incremented pure: \" << get<1>(results) << endl;\n }\n```", "```cpp\nstatic const string CURRENCY=\"EUR\";\n```", "```cpp\nclass Number{\n    public:\n        static int zero(){ return 0; }\n        static int increment(const int& value){ return value + 1; }\n        static int add(const int& first, const int& second){ return  \n        first + second; }\n};\n```", "```cpp\nclass Number{\n    public:\n        int zero() const{ return 0; }\n        int increment(const int& value) const{ return value + 1; }\n        int add(const int& first, const int& second) const{ return \n        first + second; }\n};\n```", "```cpp\nclass Number{\n    private:\n        int initialValue;\n\n    public:\n        Number(int initialValue) : initialValue(initialValue){}\n        int initial() const{ return initialValue; }\n        int addToInitial(const int& first) const{ return first + \n        initialValue; }\n};\n\nint main(){\n    Number number(10);\n    cout << number.addToInitial(20) << endl;\n}\n```", "```cpp\nvoid printResults(){\n    int* pValue = new int(10);\n    cout << \"Address: \" << pValue << endl;\n    cout << \"Increment pointer address and value pure:\" <<    \n    incrementPointerAddressAndValuePure(pValue) << endl;\n    cout << \"Address after increment: \" << pValue << endl;\n    cout << \"Value after increment: \" << *pValue << endl;\n    delete pValue;\n}\n```", "```cpp\ncout << ....\n```", "```cpp\nstring formatResults(){\n    stringstream output;\n    int* pValue = new int(500);\n    output << \"Address: \" << pValue << endl;\n    output << \"Increment pointer address and value pure:\" << \n    incrementPointerAddressAndValuePure(pValue) << endl;\n    output << \"Address after increment: \" << pValue << endl;\n    output << \"Value after increment: \" << *pValue << endl;\n    delete pValue;\n    return output.str();\n}\n\nvoid printSomething(const string& text){\n    cout << text;\n}\n\nprintSomething(formatResults());\n```", "```cpp\nstring formatResultsPure(const int* pValue){\n    stringstream output;\n    output << \"Address: \" << pValue << endl;\n    output << \"Increment pointer address and value pure:\" << \n    incrementPointerAddressAndValuePure(pValue) << endl;\n    output << \"Address after increment: \" << pValue << endl;\n    output << \"Value after increment: \" << *pValue << endl;\n    return output.str();\n}\n\nint main(){\n    int* pValue = new int(500);\n    printSomething(formatResultsPure(pValue));\n    delete pValue;\n}\n```", "```cpp\nvoid printSomething(const string& text){\n    cout << text;\n}\n```"]