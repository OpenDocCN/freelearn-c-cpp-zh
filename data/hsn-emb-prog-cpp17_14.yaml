- en: Developing for Hybrid SoC/FPGA Systems
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为混合SoC/FPGA系统开发
- en: In addition to standard CPU-based embedded systems, an increasingly common approach
    has been to combine CPUs in the form of SoCs with **Field Programmable Gate Arrays**
    (**FGPAs**). This allows CPU-intensive algorithms and processing, including DSP
    and image processing, to be implemented on the FPGA part of the system, with the
    CPU side handling less intensive tasks, such as user interaction, storage, and
    networking.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 除了标准的基于CPU的嵌入式系统之外，一个越来越常见的方法是将CPU与**现场可编程门阵列**（**FGPAs**）结合在SoC的形式中。这使得CPU密集型算法和处理，包括DSP和图像处理，可以在系统的FPGA部分上实现，而CPU端处理较不密集的任务，如用户交互、存储和网络。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们将涵盖以下主题：
- en: How to communicate with the FPGA side of a hybrid FPGA/SoC system
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何与混合FPGA/SoC系统的FPGA端进行通信
- en: Learning how a variety of algorithms are implemented in FPGA and used from the
    SoC side
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何在FPGA中实现各种算法，并从SoC端使用
- en: How to implement a basic oscilloscope on a hybrid FPGA/SoC system
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在混合FPGA/SoC系统上实现基本示波器
- en: Going extremely parallel
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 极端并行化
- en: When it comes to performance, executing a single instruction at a time on a
    single-core processor is essentially the slowest way you can implement an algorithm
    or other functionality. From here, you can scale this singular execution flow
    to multiple flows using simultaneous scheduling on a single processor core's individual
    functional units.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在性能方面，使用单核处理器一次执行单个指令基本上是实现算法或其他功能的最慢方式。从这里开始，您可以将这种单一执行流扩展到多个流，使用单个处理器核心的各个功能单元进行同时调度。
- en: The next step to increase performance is to add more cores, which of course
    complicates the scheduling even more, and introduces potential latency issues
    with critical tasks being postponed because less critical tasks are blocking resources.
    The use of general purpose processors is also very limiting for certain tasks,
    especially those that are embarrassingly parallel.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 提高性能的下一步是增加更多的核心，这当然会使调度变得更加复杂，并引入潜在的延迟问题，因为关键任务被推迟，而不太关键的任务正在阻塞资源。对于某些任务，特别是那些尴尬地并行的任务，使用通用处理器也非常有限。
- en: For tasks where a single large dataset has to be processed using the same algorithm
    applied to each element in the set, the use of **general-purpose graphical processor
    unit-based** processing (**GPGPU**) has become very popular, along with the use
    of **Digital Signal Processors** (**DSPs**) to massively speed up a range of operations
    by using specialized hardware.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于需要使用相同算法处理单个大型数据集的任务，使用基于**通用图形处理单元**（**GPGPU**）的处理已经变得非常流行，同时还使用**数字信号处理器**（**DSP**）通过使用专用硬件大大加速一系列操作。
- en: On the other side of this issue are the tasks, which are massively parallel,
    but involve many dissimilar operations being performed on incoming data, internal
    data, or both. This is level of complexity that it would be extremely hard to
    get any reasonable performance for if implemented purely in software for a range
    of microprocessor cores.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个问题的另一面是任务，这些任务是大规模并行的，但涉及对传入数据、内部数据或两者都进行许多不同操作。如果纯粹在软件中实现一系列微处理器核心的范围内，要想获得合理的性能将会非常困难。
- en: The use of expensive DSP hardware might help here, but even that would not be
    optimized for the task. Traditionally, this would be the point where a company
    might consider having a custom **integrated circuit** (**IC**) designed and produced
    as an **application-specific integrated circuit** (**ASIC**). The costs for this
    are, however, extremely high, and only realistic for large-volume production where
    it could compete with other options.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 昂贵的DSP硬件可能会有所帮助，但即使如此，也不会针对该任务进行优化。传统上，这将是公司考虑设计和生产**应用特定集成电路**（**ASIC**）的时候。然而，这样做的成本非常高，只有在大规模生产中才是现实的，它才能与其他选项竞争。
- en: Over time, different solutions were invented to make such custom hardware implementations
    more realistic, one of which was the development of the programmable logic chip.
    A system like the Commodore 64, for example, contained a **PLA** (short for **Programmable
    Logic Array**, originally a Signetics 82S100) chip, which was a one-time programmable
    array of combinatorial logic elements. It allowed the processor to reconfigure
    the on-board routing of the address bus to change what parts of the DRAM memory
    chips, ROM chips, and other peripherals were in the active addressing space.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，发明了不同的解决方案，使得这种定制硬件实现更加现实，其中之一就是可编程逻辑芯片的开发。例如，像Commodore 64这样的系统包含一个**PLA**（原名**可编程逻辑阵列**，最初是Signetics
    82S100）芯片，它是一次性可编程的组合逻辑元素阵列。它允许处理器重新配置地址总线的内部路由，以改变DRAM存储芯片、ROM存储芯片和其他外围设备在活动寻址空间中的部分。
- en: After programming the PLA, it functioned in essentially the same way as a large
    number of 74-logic chips (discrete logic chips), but in a fraction of the space
    required for such a discrete solution. This approach essentially gave Commodore
    their very own custom ASIC, but without having to invest money in having to design
    and produce it. Instead, they used an off-the-shelf part, and were free to make
    improvements to the logic burned into the PLA chip during the lifetime of the
    Commodore 64.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程PLA之后，它的功能基本上与大量的74逻辑芯片（离散逻辑芯片）以相同的方式运行，但所需空间仅为离散解决方案的一小部分。这种方法本质上为Commodore提供了他们自己的定制ASIC，但无需投资设计和生产。相反，他们使用了现成的零件，并且可以在Commodore
    64的生命周期内对烧入PLA芯片的逻辑进行改进。
- en: Over time, PLAs (also referred to as PAL**s**) became more advanced, developing
    into **Complex Programmable Logic Devices** (**CPLDs**), which are based around
    macrocells, which allow for the implementation of more advanced features instead
    of just simple combinatorial logic. These eventually evolved into FPGAs, which
    again add more advanced features and peripherals.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，PLAs（也称为PAL**s**）变得更加先进，发展成为基于宏单元的**复杂可编程逻辑设备**（**CPLDs**），这些设备允许实现更高级的功能，而不仅仅是简单的组合逻辑。这些最终演变成了FPGAs，再次增加了更高级的功能和外围设备。
- en: These days, FPGAs are found almost everywhere where some kind of advanced processing
    or control is required. Video and audio-processing equipment often use FPGAs alongside
    DSPs, with an MCU or SoC handling the user interface and other low-priority functionality.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，几乎在所有需要一些高级处理或控制的地方都可以找到FPGAs。视频和音频处理设备通常与DSP一起使用FPGAs，MCU或SoC处理用户界面和其他低优先级功能。
- en: Today, devices such as oscilloscopes are implemented with an analog (and digital,
    if supported) frontend, with DSPs doing the raw converting of data and the initial
    processing of this data prior to handing it over to one or more FPGAs , which
    perform further processing and analysis of the data. After processing, this data
    can be stored in a buffer (the "digital storage" part of a **digital storage oscilloscope**
    (**DSO**) as well as handed over to the frontend, where the software running on
    the SoC will render it in the user interface and allow the user to input commands
    manipulation the displayed data.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，示波器等设备采用模拟（如果支持的话还有数字）前端，DSP进行数据的原始转换和初始处理，然后将数据传递给一个或多个FPGAs，FPGAs进行进一步的处理和分析数据。处理后，这些数据可以存储在缓冲区（**数字存储示波器**（**DSO**）的“数字存储”部分），也可以传递给前端，在那里运行在SoC上的软件将在用户界面中呈现它，并允许用户输入命令来操作显示的数据。
- en: In this chapter, we will look at a basic oscilloscope project that will be implemented
    using simple hardware and an FPGA programmed using VHDL code.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍一个基本示波器项目，该项目将使用简单的硬件和使用VHDL代码编程的FPGA来实现。
- en: Hardware description languages
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 硬件描述语言
- en: As the complexity of **Very Large Scale Integrated** (**VLSI**) circuits increased
    over the past decades, it became more and more crucial to find ways to improve
    the development process, including the ability to verify the design. This led
    to the development of **hardware description languages** (**HDL****s**), of which
    today VHDL and Verilog are the two most commonly used ones.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 随着过去几十年**超大规模集成**（**VLSI**）电路的复杂性增加，改进开发过程的能力，包括验证设计的能力，变得越来越关键。这导致了**硬件描述语言**（**HDL****s**）的发展，其中今天VHDL和Verilog是最常用的两种。
- en: The main purpose of HDLs is to allow a developer to easily describe hardware
    circuits of the type that would be integrated into ASICs or used to program FPGAs
    with. In addition, these HDLs also make it possible to simulate the design and
    to validate its functional correctness.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: HDL的主要目的是允许开发人员轻松描述硬件电路，这些电路可以集成到ASIC中或用于编程FPGAs。此外，这些HDL还使得可以模拟设计并验证其功能正确性。
- en: In this chapter, we will look at an example that uses VHDL for the side of the
    programming that is implemented on the FPGA. **VHSIC Hardware Description Language**
    (**VHDL**) as a language first appeared in 1983, when it was developed by the
    US Department of Defense. It was intended to act as a way to document the behavior
    of ASICs that suppliers would provide with equipment.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍一个使用VHDL实现在FPGA上的编程的示例。**VHSIC硬件描述语言**（**VHDL**）作为一种语言于1983年首次出现，当时由美国国防部开发。它旨在作为一种记录供应商提供设备的ASIC行为的方式。
- en: Over time, the idea was broached that these documentation files could be used
    to simulate the behavior of the ASICs. This development was soon followed by the
    development of synthesis tools, to create a functional hardware implementation
    that could be used to create ASICs.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，人们提出了这些文档文件可以用于模拟ASIC的行为的想法。这一发展很快被综合工具的发展所跟随，以创建可用于创建ASIC的功能硬件实现。
- en: VHDL is heavily based on the Ada programming language, which itself also has
    its roots in the US military. Although VHDL is primarily used as an HDL, it can
    also be used as a generic programming language, much like Ada and its kin.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: VHDL在很大程度上基于Ada编程语言，Ada本身也源自美国军方。虽然VHDL主要用作HDL，但它也可以像Ada及其衍生语言一样用作通用编程语言。
- en: FPGA architecture
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FPGA架构
- en: 'Though not every FPGA is structured the same way, the general principle remains
    the same: they are arrays of logic elements that can be configured to form specific
    circuits. The complexity of these **logic elements** (**LEs**) therefore determines
    what kind of logic circuits can be formed, which has to be taken into account
    when writing VHDL code for a specific FPGA architecture.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管并非每个FPGA的结构都相同，但一般原则仍然相同：它们是可以配置为形成特定电路的逻辑元素阵列。因此，这些**逻辑元素**（**LEs**）的复杂性决定了可以形成什么样的逻辑电路，在为特定FPGA架构编写VHDL代码时必须考虑到这一点。
- en: The terms **logic elements** (**LEs**) and **logic cells** (**LCs**) are used
    interchangeably. An LE consists of one or more **look-up tables** (**LUTs**),
    with an LUT usually having between four and six inputs. Regardless of the exact
    configuration, each LE is surrounded by interconnection logic, which allows different
    LEs to be connected to each other, and the LE itself is programmed to a specific
    configuration, thus forming the intended circuit.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 术语**逻辑元素**（**LEs**）和**逻辑单元**（**LCs**）可以互换使用。一个LE由一个或多个**查找表**（**LUTs**）组成，通常每个LUT具有四到六个输入。无论确切的配置如何，每个LE都被互连逻辑所包围，这允许不同的LE相互连接，LE本身被编程为特定的配置，从而形成预期的电路。
- en: This potential pitfalls of developing for FPGAs include the strong assumption
    by FPGA manufacturers that FPGAs will be used with clocked designs (using a central
    clock source and clock domains), instead of combinatorial (unclocked) logic. In
    general, it's a good idea to familiarize yourself with a target FPGA system prior
    to including it in a new project to see how well it can support the features that
    you need.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 开发FPGA的潜在风险包括FPGA制造商强烈假设FPGA将用于时钟设计（使用中央时钟源和时钟域），而不是组合逻辑（无时钟）的设计。一般来说，在将其包含在新项目中之前，熟悉目标FPGA系统是个好主意，以了解它能够支持你需要的功能有多好。
- en: Hybrid FPGA/SoC chips
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 混合FPGA/SoC芯片
- en: Although systems that include both an FPGA and SoC have been very common for
    years, a more recent addition has been hybrid FPGA/SoC chips, which include the
    dies for both an FPGA and an SoC (usually ARM based) in the same package. These
    are then linked together with a bus so that both can efficiently communicate with
    each other using memory-mapped I/O and similar.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管多年来包含FPGA和SoC的系统非常常见，但最近增加了混合FPGA/SoC芯片，其中在同一封装中包含了FPGA和SoC（通常是基于ARM的）。然后，它们通过总线连接在一起，以便两者可以使用内存映射I/O等方式有效地相互通信。
- en: 'Common examples of such FPGAs currently include Altera (now Intel), Cyclone
    V SoC, and Xilinx Zynq. The Cyclone V SoC''s block diagram from the official datasheet
    gives a good overview of how such a system works:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 目前这类FPGA的常见示例包括Altera（现在是英特尔）的Cyclone V SoC和Xilinx的Zynq。Cyclone V SoC的官方数据表中的块图给出了这种系统工作方式的很好概述：
- en: '![](img/00dec7ee-3feb-4111-97b6-898f96f9b83c.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00dec7ee-3feb-4111-97b6-898f96f9b83c.png)'
- en: Here, we can see that there are a number of ways that the **Hard Processor System**
    (**HPS**) and FPGA sides can communicate with each other, such as via a shared
    SDRAM controller, two point-to-point links, and a number of other interfaces.
    For the Cyclone V SoC, either the FPGA or SoC side can be the first side that
    boots when the system starts, allowing for a wide range of system configuration
    options.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到HPS和FPGA两侧可以相互通信的多种方式，比如通过共享SDRAM控制器、两个点对点链接和其他一些接口。对于Cyclone V SoC，系统启动时FPGA或SoC两侧可以是首先启动的一侧，从而可以实现广泛的系统配置选项。
- en: Example – basic oscilloscope
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例-基本示波器
- en: This example gives a basic overview of how one could use an FPGA in an embedded
    project. It uses the FPGA to sample an input and measure a voltage or similar,
    the way an oscilloscope would. The resulting ADC data is then sent over a serial
    link to a C++/Qt-based application, which displays the data.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例基本上介绍了如何在嵌入式项目中使用FPGA。它使用FPGA对输入进行采样并测量电压或类似的东西，就像示波器一样。然后，得到的ADC数据通过串行链路发送到一个基于C++/Qt的应用程序中，该应用程序显示数据。
- en: The hardware
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 硬件
- en: 'For the project, we will use a Fleasystems FleaFPGA Ohm board ([http://fleasystems.com/fleaFPGA_Ohm.html](http://fleasystems.com/fleaFPGA_Ohm.html)).
    This is a small, sub-$50, sub-€40 FPGA development board in a Raspberry Pi Zero
    form factor:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将使用Fleasystems FleaFPGA Ohm板（[http://fleasystems.com/fleaFPGA_Ohm.html](http://fleasystems.com/fleaFPGA_Ohm.html)）。这是一个小型的、低于50美元、低于40欧元的FPGA开发板，外形尺寸与树莓派Zero相同：
- en: '![](img/0fb4d23c-b3e9-437b-8891-ac36d9abeb84.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0fb4d23c-b3e9-437b-8891-ac36d9abeb84.png)'
- en: 'It has the following specifications:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 它具有以下规格：
- en: '**Lattice ECP5 FPGA** with 24K LUT elements and 112KB Block RAM.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ECP5 FPGA芯片具有24K个LUT元素和112KB的块RAM。
- en: '**256-Mbit SDRAM**, 16 bits wide and 167 MHz clock.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 256-Mbit SDRAM，16位宽，167 MHz时钟。
- en: '**8-Mbit SPI Flash ROM** for FPGA configuration storage.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 8-Mbit SPI Flash ROM，用于FPGA配置存储。
- en: 25 MHz Crystal oscillator.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 25 MHz晶体振荡器。
- en: '**HDMI video** out (up to 1080p30 or 720p60 screen modes possible).'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HDMI视频输出（最高1080p30或720p60屏幕模式）。
- en: '**μSD card slot**.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: μSD卡槽。
- en: Two micro USB host ports with alternate PS/2 host port functionality.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个Micro USB主机端口，具有备用的PS/2主机端口功能。
- en: 29 user GPIO, including 4 x medium-speed ADC inputs and 12 x LVDS signal pairs
    available from the (Raspberry Pi compatible) 40-pin expansion, and 2-pin reset
    headers, respectively.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 29个用户GPIO，包括4个中速ADC输入和12对LVDS信号对，分别来自（与树莓派兼容的）40针扩展和2针复位头。
- en: One micro USB slave port. Provides +5V supply feed to the Ohm, serial console/UART
    communications, as well as access to the on-board JTAG programming interface (for
    configuring the ECP5 FPGA).
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个Micro USB从机端口。提供+5V供电给Ohm，串行控制台/UART通信，以及访问板载JTAG编程接口（用于配置ECP5 FPGA）。
- en: Provision for an external JTAG programming pod to allow real-time debugging.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供外部JTAG编程接口，以实现实时调试。
- en: 'To this board, we connect circuit which will allow us to connect an oscilloscope
    probe:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们连接到这块板子上的电路可以让我们连接示波器探头：
- en: '![](img/be8609a6-c88d-4c76-95aa-3bfdebfdb919.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/be8609a6-c88d-4c76-95aa-3bfdebfdb919.png)'
- en: This circuit will be connected to pin number 29 on the Ohm board's GPIO header,
    corresponding to GPIO 5\. It allows us to measure 0 to 3V DC signals, and 1.5V
    AC (RMS), in 1 x probe measurement mode. Bandwidth is a little over 10 MHz.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这个电路将连接到Ohm板的GPIO引脚29号，对应GPIO 5。它允许我们测量0到3V的直流信号，以及1.5V的交流（有效值），在1x探头测量模式下。带宽略高于10
    MHz。
- en: The VHDL code
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VHDL代码
- en: 'In this section, we will take a look at the top-level entity in the VHDL project,
    to get an idea of what it does. This starts with the standard library includes
    for VHDL as shown:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将看一下VHDL项目中的顶层实体，以了解它的功能。它以VHDL的标准库包含开始，如下所示：
- en: '[PRE0]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This maps to the underlying FPGA''s system clock and reset line. We can also
    see the way that port mapping works, defining the direction of the entity port
    and the type. Here, the type is `std_logic`, which is a standard logic signal
    of either a binary one or zero:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这映射到底层FPGA的系统时钟和复位线。我们还可以看到端口映射的工作方式，定义了实体端口的方向和类型。在这里，类型是`std_logic`，它是一个标准逻辑信号，可以是二进制的1或0：
- en: '[PRE1]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We also use the status LED on the board, map the HDMI's video pins (LVDS signaling),
    and the UART interface, which uses the FDTI USB-UART chip on the board. The latter
    is what we will be using to send the data from the FPGA to the C++ application.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用了板上的状态 LED，映射了 HDMI 的视频引脚（LVDS 信号），以及使用了板上的 FDTI USB-UART 芯片的 UART 接口。后者是我们将用来将数据从
    FPGA 发送到 C++ 应用程序的。
- en: 'Next, the Raspberry Pi compatible header mapping, as shown in the following
    code:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是树莓派兼容的标题映射，如下所示的代码：
- en: '[PRE2]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The reason that GPIO 5 is commented out is because we want to use it for the
    ADC functionality and not general-purpose input/output.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: GPIO 5 被注释掉的原因是因为我们想要将其用于 ADC 功能而不是通用输入/输出。
- en: 'Instead, we enable the sigma-delta-capable ADC3 peripheral to work on that
    pin as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们启用了 sigma-delta-capable ADC3 外设来处理该引脚的工作，如下所示：
- en: '[PRE3]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here, we see that we have another three ADC peripherals that we could use if
    we wanted to add additional channels to the oscilloscope , as shown in the following
    code:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们看到我们还有另外三个 ADC 外设，如果我们想要为示波器添加额外的通道，可以使用这些外设，如下所示的代码：
- en: '[PRE4]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The entity definition for the top-level ends with the MMC (SD card) and PS2
    interfaces.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 顶层的实体定义以 MMC（SD 卡）和 PS2 接口结束。
- en: 'Next is the architecture definition of the module. This part is akin to the
    source file of a C++ application, with the entity definition functioning like
    a header as shown:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是模块的架构定义。这部分类似于 C++ 应用程序的源文件，实体定义的功能类似于标题，如下所示：
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: A number of signals are defined here. These allow us to connect the ports, entities,
    processes, and other elements of a VHDL module with each other.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这里定义了一些信号。这些信号允许我们将 VHDL 模块的端口、实体、进程和其他元素相互连接。
- en: 'We can see that some signals are defined here for VGA support. This allows
    compatibility with VGA-enabled FPGA boards, but parts of it are also compatible
    with the HDMI (or a DVI) peripheral, as we will see in a moment. Let''s look at
    the following code:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到这里定义了一些信号以支持 VGA。这允许与支持 VGA 的 FPGA 板兼容，但其中的部分也与 HDMI（或 DVI）外设兼容，我们稍后将会看到。让我们看看以下代码：
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: With the `begin` keyword, we indicate that this is the point where we want to
    start executing the commands in the architecture definition. Everything after
    this keyword and the terminating keyword (`end architecture`) will be executed
    simultaneously, unless a block of instructions is encapsulated within a `process`
    (not shown in this code).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 `begin` 关键字，我们指示这是我们希望开始执行架构定义中的命令的地方。除非一组指令被封装在 `process` 中（在此代码中未显示），否则在此关键字之后和终止关键字（`end
    architecture`）之前的所有内容将同时执行。
- en: 'We disable a number of hardware features by writing to the appropriate pins.
    We omitted the DRAM (external memory) section in the earlier entity definition
    for brevity''s sake. The DRAM and SD card functionality are disabled, while PS2
    (keyboard, mouse) functionality is enabled. This allows us to connect a PS2 input
    device if we wanted to:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 通过写入适当的引脚，我们禁用了一些硬件功能。出于简洁起见，我们在早期的实体定义中省略了 DRAM（外部内存）部分。DRAM 和 SD 卡功能被禁用，而
    PS2（键盘、鼠标）功能被启用。这样，我们就可以连接 PS2 输入设备，如果我们想的话：
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here, we define that we will be using an instance of the FleaFPGA Digital Storage
    Oscilloscope module. Only the first channel is mapped, though the module could
    support four channels. This simplification helps to demonstrate the principle
    of operation.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们定义将使用 FleaFPGA 数字存储示波器模块的一个实例。虽然模块可以支持四个通道，但只映射了第一个通道。这种简化有助于演示操作原理。
- en: 'The DSO module is responsible for reading out the data from the ADC as it samples
    the signal we''re measuring with the probe, and both renders it to a local cache
    for display on a local (HDMI or VGA) monitor and send it over the serial interface
    to the UART module (shown at the end of this section). . Let''s look at the following
    code:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: DSO 模块负责从 ADC 中读取数据，因为它对我们用探头测量的信号进行采样，并将其呈现到本地缓存以在本地（HDMI 或 VGA）监视器上显示，并通过串行接口发送到
    UART 模块（在本节末尾显示）。让我们看看以下代码：
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here, the final colors for the display output are determined with the HDMI
    output signal:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，显示输出的最终颜色是通过 HDMI 输出信号确定的：
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This whole section serves to output the video signal that gets generated by
    the DSO module, allowing us to also use the FPGA board as a standalone oscilloscope
    unit:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 整个部分用于输出由 DSO 模块生成的视频信号，这样我们也可以将 FPGA 板用作独立示波器单元：
- en: '[PRE10]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Finally, the simple UART implementation that allows the DSO module to communicate
    with our C++ application.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，简单的 UART 实现允许 DSO 模块与我们的 C++ 应用程序进行通信。
- en: The UART is configured to work at a baud rate of 19,200, 8 bits, 1 stop bit,
    and no parity. After building this VHDL project and programming the FPGA board
    with it, we can connect to it over this serial connection.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: UART 配置为工作在波特率为 19,200，8 位，1 个停止位，无校验。构建了这个 VHDL 项目并用 FPGA 板进行了编程后，我们可以通过这个串行连接连接到它。
- en: The C++ code
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C++ 代码
- en: While the VHDL code implements a simple display output with basic input options,
    if we want to have a large (high-resolution) display, perform signal analysis,
    make recordings of multiple minutes or even hours, and so on, it will be very
    convenient to be able to do this on an SBC.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 VHDL 代码实现了简单的显示输出和基本的输入选项，但如果我们想要有一个大型（高分辨率）显示屏，进行信号分析，录制多分钟甚至几小时的数据等，能够在
    SBC 上进行这些操作将非常方便。
- en: The following code is written as a C++/Qt graphical application that takes in
    the raw ADC data from the FPGA board and displays it in a graph. While barebones,
    it provides the framework for a full-featured, SoC-based system.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码是作为一个 C++/Qt 图形应用程序编写的，它从 FPGA 板接收原始 ADC 数据并在图表中显示。虽然简陋，但它为一个功能齐全的基于 SoC
    的系统提供了框架。
- en: 'First, the header is shown, as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，显示标题如下：
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Here, we can see that we will be using the serial port implementation in Qt,
    along with the QChart module, for the visualization part.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到我们将在 Qt 中使用串行端口实现，以及 QChart 模块进行可视化部分。
- en: 'The implementation is shown in the following code:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 实现如下代码所示：
- en: '[PRE12]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the constructor, we create the connections with the menu options in the GUI,
    which allow us to quit the application, connect to a serial port, disconnect from
    a serial port if we are connected, or get information about the application.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在构造函数中，我们创建了与GUI中菜单选项的连接，这些选项允许我们退出应用程序，连接到串行端口，如果已连接则断开与串行端口的连接，或者获取有关应用程序的信息。
- en: We connect the serial port instance to a slot that will be called whenever new
    data is ready to be read.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将串行端口实例连接到一个插槽，每当准备读取新数据时，该插槽将被调用。
- en: 'Finally, we configure the chart view in the GUI, obtaining a reference to the
    QChart instance inside the QChartView widget. On this reference, we set a theme
    for the chart, add default axes, and finally, add an empty series, which we will
    be filling up with the incoming data from the FPGA , as shown in the following
    code:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们在GUI中配置图表视图，获取QChartView小部件内的QChart实例的引用。在这个引用上，我们为图表设置了一个主题，添加了默认轴，最后添加了一个空系列，我们将用来填充来自FPGA的传入数据，如下面的代码所示：
- en: '[PRE13]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: When the user wishes to connect to the FPGA via the UART, the serial connection
    on which the FPGA is connected has to be selected, after which a connection will
    be established, with the 19,200 baud, 8N1 settings we established previously in
    the VHDL section of the project.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户希望通过UART连接到FPGA时，必须选择连接FPGA的串行连接，之后将建立连接，使用我们在项目的VHDL部分中之前建立的19,200波特率，8N1设置。
- en: 'For a fixed configuration where the serial port is always the same, one could
    consider automating the following part when the system boots:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 对于固定配置，其中串行端口始终相同，可以考虑在系统启动时自动化以下部分：
- en: '[PRE14]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Disconnecting from the serial port is quite straightforward:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 从串行端口断开连接非常简单：
- en: '[PRE15]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: When the UART receives new data from the FPGA board, this slot gets called.
    In it, we read all of the data from the UART buffer, appending it to the series
    that we added to the graph widget, which updates the displayed trace. The counter
    variable is used to provide an increasing time base for the graph. This functions
    as a simplistic timestamp here.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当UART从FPGA板接收新数据时，将调用此插槽。在其中，我们从UART缓冲区中读取所有数据，将其附加到我们添加到图形小部件的系列中，从而更新显示的跟踪。计数器变量用于为图表提供递增的时间基准。这在这里充当了简单的时间戳。
- en: 'At some point, we should start removing data from the series to prevent it
    from getting too large, along with the ability to search through it and save the
    data. The counter-based timestamp could report the actual time at which we received
    the signal, though ideally this should be part of the data that we received from
    the FPGA:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在某个时候，我们应该开始从系列中删除数据，以防止其变得过大，同时具有搜索和保存数据的能力。基于计数器的时间戳可以报告我们接收信号的实际时间，尽管理想情况下，这应该是我们从FPGA接收到的数据的一部分：
- en: '[PRE16]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We end with a few simple slots. For the information dialog, we simply show the
    standard Qt information dialog. This could be replaced with a custom help or information
    dialog.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有一些简单的插槽。对于信息对话框，我们只需显示标准的Qt信息对话框。这可以替换为自定义的帮助或信息对话框。
- en: Building the project
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建项目
- en: The VHDL project can be built and programmed onto the Ohm FPGA board using the
    free Lattice Semiconductor Diamond IDE software ([http://www.latticesemi.com/latticediamond](http://www.latticesemi.com/latticediamond)).
    Programming the board requires that the FleaFPGA JTAG utility from [https://github.com/Basman74/FleaFPGA-Ohm](https://github.com/Basman74/FleaFPGA-Ohm)
    is installed so that Diamond can use it.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用免费的Lattice Semiconductor Diamond IDE软件（[http://www.latticesemi.com/latticediamond](http://www.latticesemi.com/latticediamond)）构建VHDL项目，并将其编程到Ohm
    FPGA板上。编程板需要安装来自[https://github.com/Basman74/FleaFPGA-Ohm](https://github.com/Basman74/FleaFPGA-Ohm)的FleaFPGA
    JTAG实用程序，以便Diamond可以使用它。
- en: By following the instructions for the FleaFPGA Ohm board as described in the
    quick start guide, it should be relatively easy to get that part of the project
    up and running. For the C++ side, one has to make sure that the FPGA board and
    SBC (or equivalent) are connected so that the latter can access the UART on the
    former.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 通过按照快速入门指南中描述的FleaFPGA Ohm板的说明，应该相对容易地启动和运行项目的一部分。对于C++部分，必须确保FPGA板和SBC（或等效物）连接在一起，以便后者可以访问前者上的UART。
- en: With this in place, simply compiling the C++ project with the Qt framework (directly
    on the SBC or preferably cross-compiling on a desktop system) suffices. After
    this, one can run the application with the flashed FPGA board active, connect
    to the UART, and observe the trace being drawn on the application window.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个设置，只需使用Qt框架编译C++项目（直接在SBC上或最好是在桌面系统上进行交叉编译）就足够了。之后，可以运行已刷写FPGA板的应用程序，连接到UART，并观察在应用程序窗口上绘制的跟踪。
- en: Summary
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked at what role FPGAs play in embedded development,
    how they have changed in importance over the past decades, and how they are now
    being used. We looked at a simple implementation of an oscilloscope that uses
    both an FPGA and an SBC-based component. Having read through this chapter, you
    should now know when to pick an FPGA for a new embedded project and understand
    how one can use and communicate with such a device.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了FPGA在嵌入式开发中扮演的角色，它们在过去几十年中的重要性发生了变化，以及它们现在的用途。我们看了一个使用FPGA和基于SBC的组件的示波器的简单实现。阅读完本章后，您现在应该知道何时选择FPGA用于新的嵌入式项目，并了解如何使用和与这样的设备通信。
