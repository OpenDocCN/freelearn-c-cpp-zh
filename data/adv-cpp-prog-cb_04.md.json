["```cpp\n> sudo apt-get install build-essential git cmake\n```", "```cpp\n> sudo apt-get install build-essential git cmake\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter04\n```", "```cpp\n> cmake .\n> make recipe01_examples\n```", "```cpp\n> ./recipe01_example01\nThe answer is: 23\nThe answer is: 42\n\n> ./recipe01_example02\nThe answer is: 42\n\n> ./recipe01_example03\nThe answer is: 42\n\n> ./recipe01_example04\nThe answer is: 42\n\n> ./recipe01_example05\nThe answer is: 42\nThe answer is: 42\nThe answer is: 42.12345678\n```", "```cpp\n#include <iostream>\n\nstruct the_answer\n{\n    using type = unsigned;\n};\n\ntemplate<typename T>\nvoid foo(typename T::type t)\n{\n    std::cout << \"The answer is not: \" << t << '\\n';\n}\n\ntemplate<typename T>\nvoid foo(T t)\n{\n    std::cout << \"The answer is: \" << t << '\\n';\n}\n\nint main(void)\n{\n    foo<the_answer>(23);\n    foo<int>(42);\n\n    return 0;\n}\n```", "```cpp\nThe answer is: 23\nThe answer is: 42\n```", "```cpp\ntemplate<bool B, class T = void>\nstruct enable_if {};\n\ntemplate<class T>\nstruct enable_if<true, T> { typedef T type; };\n```", "```cpp\n#include <iostream>\n#include <type_traits>\n\ntemplate<typename T>\nconstexpr auto is_int()\n{ \n    return false; \n}\n\ntemplate<>\nconstexpr auto is_int<int>()\n{ \n    return true; \n}\n\ntemplate<\n    typename T,\n    std::enable_if_t<is_int<T>(), int> = 0\n    >\nvoid the_answer(T is)\n{\n    std::cout << \"The answer is: \" << is << '\\n';\n}\n\nint main(void)\n{\n    the_answer(42);\n    return 0;\n}\n```", "```cpp\n#include <iostream>\n#include <type_traits>\n\ntemplate<\n    typename T,\n    std::enable_if_t<std::is_integral_v<T>>* = nullptr\n    >\nvoid the_answer(T is)\n{\n    std::cout << \"The answer is: \" << is << '\\n';\n}\n\nint main(void)\n{\n    the_answer(42);\n    return 0;\n}\n```", "```cpp\n#include <iostream>\n#include <type_traits>\n\ntemplate<typename T>\nstd::enable_if_t<std::is_integral_v<T>>\nthe_answer(T is)\n{\n    std::cout << \"The answer is: \" << is << '\\n';\n}\n\nint main(void)\n{\n    the_answer(42);\n    return 0;\n}\n\n```", "```cpp\n#include <iostream>\n#include <type_traits>\n#include <iomanip>\n\ntemplate<\n    typename T,\n    std::enable_if_t<std::is_integral_v<T>>* = nullptr\n    >\nvoid the_answer(T is)\n{\n    std::cout << \"The answer is: \" << is << '\\n';\n}\n\ntemplate<\n    typename T,\n    std::enable_if_t<std::is_floating_point_v<T>>* = nullptr\n    >\nvoid the_answer(T is)\n{\n    std::cout << std::setprecision(10);\n    std::cout << \"The answer is: \" << is << '\\n';\n}\n\nint main(void)\n{\n    the_answer(42);\n    the_answer(42U);\n    the_answer(42.12345678);\n\n    return 0;\n}\n\n```", "```cpp\n> sudo apt-get install build-essential git cmake\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter04\n```", "```cpp\n> cmake .\n> make recipe02_examples\n```", "```cpp\n> ./recipe02_example01\nl-value\nl-value\n\n> ./recipe02_example02\nl-value\nr-value\n\n> ./recipe02_example03\nl-value: 42\nr-value: 42\n```", "```cpp\n#include <iostream>\n\nstruct the_answer\n{ };\n\nvoid foo2(const the_answer &is)\n{\n    std::cout << \"l-value\\n\";\n}\n\nvoid foo2(the_answer &&is)\n{\n    std::cout << \"r-value\\n\";\n}\n\ntemplate<typename T>\nvoid foo1(T &&t)\n{\n    foo2(t);\n}\n\nint main(void)\n{\n    the_answer is;\n    foo1(is);\n    foo1(the_answer());\n\n    return 0;\n}\n\n```", "```cpp\nstatic_cast<T&&>(t)\n```", "```cpp\n#include <iostream>\n\nstruct the_answer\n{ };\n\nvoid foo2(const the_answer &is)\n{\n    std::cout << \"l-value\\n\";\n}\n\nvoid foo2(the_answer &&is)\n{\n    std::cout << \"r-value\\n\";\n}\n\ntemplate<typename T>\nvoid foo1(T &&t)\n{\n    foo2(std::forward<T>(t));\n}\n\nint main(void)\n{\n    the_answer is;\n    foo1(is);\n    foo1(the_answer());\n\n    return 0;\n}\n\n```", "```cpp\n#include <iostream>\n\nstruct the_answer\n{ };\n\nvoid foo2(const the_answer &is, int i)\n{\n    std::cout << \"l-value: \" << i << '\\n';\n}\n\nvoid foo2(the_answer &&is, int i)\n{\n    std::cout << \"r-value: \" << i << '\\n';\n}\n\ntemplate<typename... Args>\nvoid foo1(Args &&...args)\n{\n    foo2(std::forward<Args>(args)...);\n}\n\nint main(void)\n{\n    the_answer is;\n\n    foo1(is, 42);\n    foo1(the_answer(), 42);\n\n    return 0;\n}\n```", "```cpp\n> sudo apt-get install build-essential git\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter04\n```", "```cpp\n> cmake .\n> make recipe03_examples\n```", "```cpp\n> ./recipe03_example01\nThe answer is: 42\n\n> ./recipe03_example02\nThe answer is: 42\nThe answer is: 42.12345678\n```", "```cpp\nif (!NDEBUG) {}\n```", "```cpp\n#include <iostream>\n\nconstexpr auto answer = 42;\n\nint main(void)\n{\n    if constexpr (answer == 42) {\n        std::cout << \"The answer is: \" << answer << '\\n';\n    }\n    else {\n        std::cout << \"The answer is not: \" << answer << '\\n';\n    }\n\n    return 0;\n}\n\n```", "```cpp\n#include <iostream>\n#include <iomanip>\n\ntemplate<typename T>\nconstexpr void foo(T &&t)\n{\n    if constexpr (std::is_floating_point_v<T>) {\n        std::cout << std::setprecision(10);\n    }\n\n    std::cout << \"The answer is: \" << std::forward<T>(t) << '\\n';\n}\n\nint main(void)\n{\n    foo(42);\n    foo(42.12345678);\n    return 0;\n}\n```", "```cpp\n> sudo apt-get install build-essential git cmake\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter04\n```", "```cpp\n> cmake .\n> make recipe04_examples\n```", "```cpp\n> ./recipe04_example01\n\n> ./recipe04_example02\nthe answer is: 42\n\n> ./recipe04_example03\nThe answer is: 42\n\n> ./recipe04_example04\n2\n2\n\n> ./recipe04_example05\nThe answer is: 42\n```", "```cpp\n#include <iostream>\n\ntemplate<typename... Args>\nvoid foo(Args &&...args)\n{ }\n\nint main(void)\n{\n    foo(\"The answer is: \", 42);\n    return 0;\n}\n```", "```cpp\n#include <tuple>\n#include <iostream>\n\nint main(void)\n{\n    std::tuple t(\"the answer is: \", 42);\n    std::cout << std::get<0>(t) << std::get<1>(t) << '\\n';\n    return 0;\n}\n```", "```cpp\n#include <tuple>\n#include <iostream>\n\ntemplate<typename... Args>\nvoid foo(Args &&...args)\n{\n    std::tuple t(std::forward<Args>(args)...);\n    std::cout << std::get<0>(t) << std::get<1>(t) << '\\n';\n}\n\nint main(void)\n{\n    foo(\"The answer is: \", 42);\n    return 0;\n}\n```", "```cpp\ntemplate<\n    typename T, \n    typename... Args\n    >\nvoid make_unique(Args &&...args)\n{\n    return unique_ptr<T>(new T(std::forward<Args>(args)...));\n}\n```", "```cpp\n#include <tuple>\n#include <iostream>\n\ntemplate<typename... Args>\nvoid foo(Args &&...args)\n{\n    std::cout << sizeof...(Args) << '\\n';\n    std::cout << std::tuple_size_v<std::tuple<Args...>> << '\\n';\n}\n\nint main(void)\n{\n    foo(\"The answer is: \", 42);\n    return 0;\n}\n\n```", "```cpp\n#include <tuple>\n#include <iostream>\n\ntemplate<\n    std::size_t I = 0,\n    typename ... Args,\n    typename FUNCTION\n    >\nconstexpr void\nfor_each(const std::tuple<Args...> &t, FUNCTION &&func)\n{\n    if constexpr (I < sizeof...(Args)) {\n        func(std::get<I>(t));\n        for_each<I + 1>(t, std::forward<FUNCTION>(func));\n    }\n}\n```", "```cpp\ntemplate<typename... Args>\nvoid foo(Args &&...args)\n{\n    std::tuple t(std::forward<Args>(args)...);\n    for_each(t, [](const auto &arg) {\n        std::cout << arg;\n    });\n}\n```", "```cpp\nint main(void)\n{\n    foo(\"The answer is: \", 42);\n    std::cout << '\\n';\n\n    return 0;\n}\n```", "```cpp\n> sudo apt-get install build-essential git cmake\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter04\n```", "```cpp\n> cmake .\n> make recipe05_examples\n```", "```cpp\n> ./recipe05_example01\nnoexcept: r-value\ncan throw: l-value\n\n> ./recipe05_example02\nmove\nmove\nmove\nmove\nmove\n--------------\ncopy\ncopy\ncopy\ncopy\ncopy\n```", "```cpp\n#include <iostream>\n\nstruct the_answer_noexcept\n{\n    the_answer_noexcept() = default;\n\n    the_answer_noexcept(const the_answer_noexcept &is) noexcept\n    {\n        std::cout << \"l-value\\n\";\n    }\n\n    the_answer_noexcept(the_answer_noexcept &&is) noexcept\n    {\n        std::cout << \"r-value\\n\";\n    }\n};\n```", "```cpp\nstruct the_answer_can_throw\n{\n    the_answer_can_throw() = default;\n\n    the_answer_can_throw(const the_answer_can_throw &is)\n    {\n        std::cout << \"l-value\\n\";\n    }\n\n    the_answer_can_throw(the_answer_can_throw &&is)\n    {\n        std::cout << \"r-value\\n\";\n    }\n};\n```", "```cpp\nint main(void)\n{\n    the_answer_noexcept is1;\n    the_answer_can_throw is2;\n\n    std::cout << \"noexcept: \";\n    auto is3 = std::move_if_noexcept(is1);\n\n    std::cout << \"can throw: \";\n    auto is4 = std::move_if_noexcept(is2);\n\n    return 0;\n}\n\n```", "```cpp\n#include <memory>\n#include <iostream>\n#include <stdexcept>\n\ntemplate<typename T>\nclass mock_vector\n{\npublic:\n    using size_type = std::size_t;\n\n    mock_vector(size_type s) :\n        m_size{s},\n        m_buffer{std::make_unique<T[]>(m_size)}\n    { }\n\n    void resize(size_type size)\n        noexcept(std::is_nothrow_move_constructible_v<T>)\n    {\n        auto tmp = std::make_unique<T[]>(size);\n\n        for (size_type i = 0; i < m_size; i++) {\n            tmp[i] = std::move_if_noexcept(m_buffer[i]);\n        }\n\n        m_size = size;\n        m_buffer = std::move(tmp);\n    }\n\nprivate:\n    size_type m_size{};\n    std::unique_ptr<T[]> m_buffer{};\n};\n```", "```cpp\nstruct suboptimal\n{\n    suboptimal() = default;\n\n    suboptimal(suboptimal &&other)\n    {\n        *this = std::move(other);\n    }\n\n    suboptimal &operator=(suboptimal &&)\n    {\n        std::cout << \"move\\n\";\n        return *this;\n    }\n\n    suboptimal(const suboptimal &other)\n    {\n        *this = other;\n    }\n\n    suboptimal &operator=(const suboptimal &)\n    {\n        std::cout << \"copy\\n\";\n        return *this;\n    }\n};\n```", "```cpp\nstruct optimal\n{\n    optimal() = default;\n\n    optimal(optimal &&other) noexcept\n    {\n        *this = std::move(other);\n    }\n\n    optimal &operator=(optimal &&) noexcept\n    {\n        std::cout << \"move\\n\";\n        return *this;\n    }\n\n    optimal(const optimal &other)\n    {\n        *this = other;\n    }\n\n    optimal &operator=(const optimal &)\n    {\n        std::cout << \"copy\\n\";\n        return *this;\n    }\n};\n```", "```cpp\nint main(void)\n{\n    mock_vector<optimal> d1(5);\n    mock_vector<suboptimal> d2(5);\n\n    d1.resize(10);\n    std::cout << \"--------------\\n\";\n    d2.resize(10);\n\n    return 0;\n}\n\n```", "```cpp\n> sudo apt-get install build-essential git cmake\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter04\n```", "```cpp\n> cmake .\n> make recipe06_examples\n```", "```cpp\n> ./recipe06_example01\nThe answer is: 42\n> ./recipe06_example02\nThe answer is: 42\nThe answer is: 42\n> ./recipe06_example03\nThe answer is: 42\n```", "```cpp\n#include <iostream>\n\ntemplate<int answer>\nvoid foo()\n{\n    std::cout << \"The answer is: \" << answer << '\\n';\n}\n\nint main(void)\n{\n    foo<42>();\n    return 0;\n}\n\n```", "```cpp\n#include <iostream>\n\ntemplate<auto answer>\nvoid foo()\n{\n    std::cout << \"The answer is: \" << answer << '\\n';\n}\n\nint main(void)\n{\n    foo<42>();\n    return 0;\n}\n```", "```cpp\n#include <iostream>\n#include <type_traits>\n\ntemplate<\n    auto answer,\n std::enable_if_t<std::is_integral_v<decltype(answer)>, int> = 0\n >\nvoid foo()\n{\n    std::cout << \"The answer is: \" << answer << '\\n';\n}\n\nint main(void)\n{\n    foo<42>();\n    return 0;\n}\n```", "```cpp\n> sudo apt-get install build-essential git cmake\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter04\n```", "```cpp\n> cmake .\n> make recipe07_examples\n```", "```cpp\n> ./recipe07_example01 \nThe answer is: 42\nThe answer is: 42\nThe answer is: 42.1\n> ./recipe07_example02 \nThe answer is: 4\n```", "```cpp\n#include <iostream>\n\ntemplate<typename T>\nclass the_answer\n{\npublic:\n    the_answer(T t)\n    {\n        std::cout << \"The answer is: \" << t << '\\n';\n    }\n};\n```", "```cpp\ntemplate class the_answer<int>;\ntemplate class the_answer<unsigned>;\ntemplate class the_answer<double>;\n```", "```cpp\nint main(void)\n{\n    the_answer{42};\n    the_answer{42U};\n    the_answer{42.1};\n\n    return 0;\n}\n```", "```cpp\ntemplate<typename T>\nstruct the_answer\n{\n    T m_answer;\n\n    the_answer(T t);\n    void print();\n};\n```", "```cpp\n#include <iostream>\n#include \"recipe07.h\"\n\ntemplate<typename T>\nthe_answer<T>::the_answer(T t) :\n    m_answer{t}\n{ }\n\ntemplate<typename T>\nvoid the_answer<T>::print()\n{\n    std::cout << \"The answer is: \" << m_answer << '\\n';\n}\n\ntemplate class the_answer<int>;\n```", "```cpp\n#include \"recipe07.h\"\n\nint main(void)\n{\n    the_answer is{42};\n    is.print();\n\n    return 0;\n}\n```"]