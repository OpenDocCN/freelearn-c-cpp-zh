["```cpp\n    C:\\<change-with-your-download-path-to-The-C-Sharp-Workshop>\\Chapter06\\AdventureWorks\\>\n    ```", "```cpp\n    psql -U postgres -c \"CREATE DATABASE \\\"Adventureworks\\\";\"\n    ```", "```cpp\n    psql -d Adventureworks -f install.sql -U postgres\n    ```", "```cpp\nusing var connection = new NpgsqlConnection(Program.GlobalFactoryConnectionString);\nconnection.Open(); \nNpgsqlCommand command = new NpgsqlCommand(\"SELECT * FROM factory.product\", connection);\nvar reader = command.ExecuteReader();\nvar products = new List<Product>();\nwhile (reader.Read())\n{\n\u00a0\u00a0\u00a0\u00a0products.Add(new Product\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Id = (int)reader[\"id\"],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//ManufacturerId = (int)reader[\"ManufacturerId\"],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Name = (string)reader[\"name\"],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Price = (decimal)reader[\"price\"]\n\u00a0\u00a0\u00a0\u00a0});\n}\nreturn products;\n```", "```cpp\nSELECT * FROM Users WHERE UserId = 105\n```", "```cpp\nSELECT * FROM Users WHERE UserId = 105 or 1 = 1\n```", "```cpp\n\"Host=localhost;Username=postgres;Password=*****;Database=globalfactory2021\"\n```", "```cpp\n    Host=localhost;Username=postgres;Password=*****;Database=globalfactory2021\n    ```", "```cpp\npublic static string ConnectionString { get; } = Environment.GetEnvironmentVariable(\"GlobalFactory\", EnvironmentVariableTarget.User);\n```", "```cpp\ndotnet add package Microsoft.EntityFrameworkCore\n```", "```cpp\ndotnet add package Npgsql.EntityFrameworkCore.PostgreSQL\n```", "```cpp\npublic class Product\n{\n\u00a0\u00a0\u00a0\u00a0public int id { get; set; }\n\u00a0\u00a0\u00a0\u00a0public string name { get; set; }\n\u00a0\u00a0\u00a0\u00a0public decimal price { get; set; }\n\u00a0\u00a0\u00a0\u00a0public int manufacturerId { get; set; }\n}\n```", "```cpp\npublic class Product\n{\n\u00a0\u00a0\u00a0\u00a0[Key]\n\u00a0\u00a0\u00a0\u00a0public int PrimaryKey { get; set; }\n\u00a0\u00a0\u00a0\u00a0public string name { get; set; }\n\u00a0\u00a0\u00a0\u00a0public decimal price { get; set; }\n\u00a0\u00a0\u00a0\u00a0public int manufacturerId { get; set; }\n}\n```", "```cpp\n[Table(\"manufacturer\", Schema = \"factory\")]\npublic class Manufacturer\n{\n\u00a0\u00a0\u00a0\u00a0public int id { get; set; }\n\u00a0\u00a0\u00a0\u00a0public string name { get; set; }\n\u00a0\u00a0\u00a0\u00a0public string country { get; set; }\n\u00a0\u00a0\u00a0\u00a0public virtual ICollection<Product> Products { get; set; } = new List<Product>();\n}\n```", "```cpp\n[Table(\"product\", Schema = \"factory\")]\npublic class Product\n{\n\u00a0\u00a0\u00a0\u00a0public int id { get; set; }\n\u00a0\u00a0\u00a0\u00a0public string name { get; set; }\n\u00a0\u00a0\u00a0\u00a0public decimal price { get; set; }\n\u00a0\u00a0\u00a0\u00a0public int manufacturerId { get; set; }\n\u00a0\u00a0\u00a0\u00a0public virtual Manufacturer Manufacturer { get; set; }\n}\n```", "```cpp\npublic class FactoryDbContext : DbContext\n{\n\u00a0\u00a0\u00a0\u00a0public DbSet<Product> Products { get; set; }\n\u00a0\u00a0\u00a0\u00a0public DbSet<Manufacturer> Manufacturers { get; set; }\n\n\u00a0\u00a0\u00a0\u00a0protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!optionsBuilder.IsConfigured)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0optionsBuilder.UseNpgsql(Program.GlobalFactoryConnectionString);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\n public FactoryDbContext(DbContextOptions<FactoryDbContext> options)\n\u00a0\u00a0\u00a0\u00a0: base(options)\n{\n}\n```", "```cpp\npublic FactoryDbContext()\n\u00a0\u00a0\u00a0\u00a0: base(UsePostgreSqlServerOptions())\n{\n}\n```", "```cpp\nprotected static DbContextOptions UsePostgreSqlServerOptions()\n{\n\u00a0\u00a0\u00a0\u00a0return new DbContextOptionsBuilder()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.UseNpgsql(Program.ConnectionString)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.Options;\n}\n```", "```cpp\nFactoryDbContext.cs\npublic class FactoryDbContext : DbContext\n{\n\u00a0\u00a0\u00a0\u00a0public DbSet<Product> Products { get; set; }\n\u00a0\u00a0\u00a0\u00a0public DbSet<Manufacturer> Manufacturers { get; set; }\n\n\u00a0\u00a0\u00a0\u00a0public FactoryDbContext(DbContextOptions<FactoryDbContext> options)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: base(options)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0public FactoryDbContext()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: base(UsePostgreSqlServerOptions())\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0}\nThe complete code can be found here: https://packt.link/0uVPP.\n```", "```cpp\nusing var context = new FactoryDbContext();\nvar products = context.Products.ToList();\n```", "```cpp\nusing var context = new FactoryDbContext()\n```", "```cpp\n    [Table(\"location\", Schema = \"production\")]\n    public class Location\n    {\n    \u00a0\u00a0\u00a0\u00a0[Column(\"locationid\")]\n    \u00a0\u00a0\u00a0\u00a0public int LocationId { get; set; }\n    \u00a0\u00a0\u00a0\u00a0[Column(\"name\")]\n    \u00a0\u00a0\u00a0\u00a0public string Name { get; set; }\n    \u00a0\u00a0\u00a0\u00a0[Column(\"costrate\")]\n    \u00a0\u00a0\u00a0\u00a0public double Costrate { get; set; }\n    \u00a0\u00a0\u00a0\u00a0[Column(\"availability\")]\n    \u00a0\u00a0\u00a0\u00a0public double Availability { get; set; }\n    \u00a0\u00a0\u00a0\u00a0[Column(\"modifieddate\")]\n    \u00a0\u00a0\u00a0\u00a0public DateTime ModifiedDate { get; set; }\n    }\n    ```", "```cpp\n    public class AdventureWorksContext : DbContext\n    {\n    \u00a0\u00a0\u00a0\u00a0public DbSet<Location> Locations { get; set; }\n\n    \u00a0\u00a0\u00a0\u00a0public AdventureWorksContext()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: base(UsePostgreSqlServerOptions())\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0}\n\n    \u00a0\u00a0\u00a0\u00a0protected static DbContextOptions UsePostgreSqlServerOptions()\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return new DbContextOptionsBuilder()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.UseNpgsql(Program.AdventureWorksConnectionString)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.Options;\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    Host=localhost;Username=postgres;Password=****;Database=Adventureworks. DbSet<Location>Locations\n    ```", "```cpp\n    var db = new AdventureWorksContext();\n    ```", "```cpp\n    var locations = db.Locations.ToList();\n    ```", "```cpp\n    db.Dispose();\n    ```", "```cpp\n    foreach (var location in locations)\n    {\n    \u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"{location.LocationId} {location.Name} {location.Costrate} {location.Availability} {location.ModifiedDate}\");\n    }\n    ```", "```cpp\n1 Tool Crib 0 0 2008-04-30 00:00:00\n2 Sheet Metal Racks 0 0 2008-04-30 00:00:00\n3 Paint Shop 0 0 2008-04-30 00:00:00\n4 Paint Storage 0 0 2008-04-30 00:00:00\n5 Metal Storage 0 0 2008-04-30 00:00:00\n6 Miscellaneous Storage 0 0 2008-04-30 00:00:00\n7 Finished Goods Storage 0 0 2008-04-30 00:00:00\n10 Frame Forming 22,5 96 2008-04-30 00:00:00\n20 Frame Welding 25 108 2008-04-30 00:00:00\n30 Debur and Polish 14,5 120 2008-04-30 00:00:00\n40 Paint 15,75 120 2008-04-30 00:00:00\n45 Specialized Paint 18 80 2008-04-30 00:00:00\n50 Subassembly 12,25 120 2008-04-30 00:00:00\n60 Final Assembly 12,25 120 2008-04-30 00:00:00\n```", "```cpp\npublic Product GetByName(string name)\n{\n\u00a0\u00a0\u00a0\u00a0var product = db.Products.FirstOrDefault(p => p.Name == name);\n\u00a0\u00a0\u00a0\u00a0return product;\n}\n```", "```cpp\npublic Product GetById(int id)\n{\n\u00a0\u00a0\u00a0\u00a0var product = db.Products.Find(id);\n\u00a0\u00a0\u00a0\u00a0return product;\n}\n```", "```cpp\npublic IEnumerable<Product> GetByManufacturer(int manufacturerId)\n{\u00a0\u00a0\u00a0\u00a0var products = db\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.Products\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.Where(p => p.Manufacturer.Id == manufacturerId)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.ToList();\n\n\u00a0\u00a0\u00a0\u00a0return products;\n}\n```", "```cpp\ndb.Manufacturers\n.Include(m => m.Products)\n.ToList();\n```", "```cpp\ndb.Products\n.Join(db.Manufacturers,\n\u00a0\u00a0\u00a0\u00a0p => p.ManufacturerId, m => m.Id,\n\u00a0\u00a0\u00a0\u00a0(p, m) => new {Product = p.Name, Manufacturer = m.Name})\n.ToList();\n```", "```cpp\n(from p in db.Products\njoin m in db.Manufacturers\n\u00a0\u00a0\u00a0\u00a0on p.ManufacturerId equals m.Id\nselect new {Product = p.Name, Manufacturer = m.Name}\n).ToList();\n```", "```cpp\nfrom p in db.Products\n```", "```cpp\njoin m in db.Manufacturers\n```", "```cpp\non p.ManufacturerId equals m.Id\n```", "```cpp\nforeach(var product in db.Products)\n```", "```cpp\nfrom product in db.Products\n```", "```cpp\nvar product = new Product\n{\n\u00a0\u00a0\u00a0\u00a0Name = \"Teddy Bear\",\n\u00a0\u00a0\u00a0\u00a0Price = 10,\n\u00a0\u00a0\u00a0\u00a0ManufacturerId = 1\n};\ndb.Products.Add(product);\ndb.SaveChanges();\n```", "```cpp\nvar manufacturer = new Manufacturer\n{\n\u00a0\u00a0\u00a0\u00a0Country = \"Lithuania\",\n\u00a0\u00a0\u00a0\u00a0Name = \"Toy Lasers\",\n\u00a0\u00a0\u00a0\u00a0Products = new List<Product>\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Name = \"Laser S\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Price = 4.01m\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Name = \"Laser M\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Price = 7.99m\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n};\ndb.Manufacturers.Add(manufacturer);\ndb.SaveChanges();\n```", "```cpp\nvar productUpdate = new Product\n{\n\u00a0\u00a0\u00a0\u00a0Id = existingProduct.Id,\n\u00a0\u00a0\u00a0\u00a0Price = 45.99m,\n\u00a0\u00a0\u00a0\u00a0ManufacturerId = existingProduct.ManufacturerId,\n\u00a0\u00a0\u00a0\u00a0Name = existingProduct.Name\n};\ndb.Products.Update(productUpdate);\n\u00a0db.SaveChanges();\n```", "```cpp\nvar productToUpdate = db.Products.Find(productUpdate.Id);\nvar anyProductToUpdate = productToUpdate != null;\nif (anyProductToUpdate)\n{\n\u00a0\u00a0\u00a0\u00a0productToUpdate.Name = productUpdate.Name ?? productToUpdate.Name;\n\n\u00a0\u00a0\u00a0\u00a0productToUpdate.ManufacturerId = (productUpdate.ManufacturerId != default)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0? productUpdate.ManufacturerId\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: productToUpdate.ManufacturerId;\n\n\u00a0\u00a0\u00a0\u00a0productToUpdate.Price = (productUpdate.Price != default)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0? productUpdate.Price\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: productToUpdate.Price;\n\n\u00a0\u00a0\u00a0\u00a0db.SaveChanges();\n}\n```", "```cpp\nvar productToDelete = db.Products.Find(productId);\nif (productToDelete != null)\n{\n\u00a0\u00a0\u00a0\u00a0db.Products.Remove(productToDelete);\n\u00a0\u00a0\u00a0\u00a0db.SaveChanges();\n} \n```", "```cpp\n    public class GlobalFactoryService : IDisposable\n    {\n    \u00a0\u00a0\u00a0\u00a0private readonly FactoryDbContext _context;\n\n    \u00a0\u00a0\u00a0\u00a0public GlobalFactoryService(FactoryDbContext context)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_context = context;\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    public void CreateManufacturersInUsa(IEnumerable<string> names)\n    {\n    \u00a0\u00a0\u00a0\u00a0var manufacturers = names\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.Select(name => new Manufacturer()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Name = name,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Country = \"USA\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n\n    \u00a0\u00a0\u00a0\u00a0_context.Manufacturers.AddRange(manufacturers);\n    \u00a0\u00a0\u00a0\u00a0_context.SaveChanges();\n    }\n    ```", "```cpp\n    public void CreateUsaProducts(IEnumerable<Product> products)\n    {\n    \u00a0\u00a0\u00a0\u00a0var manufacturersInUsa = _context\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.Manufacturers\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.Where(m => m.Country == \"USA\")\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.ToList();\n\n    \u00a0\u00a0\u00a0\u00a0foreach (var product in products)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0manufacturersInUsa.ForEach(m => m.Products.Add(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new Product {Name = product.Name, Price = product.Price}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0));\n    \u00a0\u00a0\u00a0\u00a0}\n\n    \u00a0\u00a0\u00a0\u00a0_context.SaveChanges();\n    }\n    ```", "```cpp\n    public void SetAnyUsaProductOnDiscount(decimal discountedPrice)\n    {\n    \u00a0\u00a0\u00a0\u00a0var anyProductInUsa = _context\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.Products\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.FirstOrDefault(p => p.Manufacturer.Country == \"USA\");\n\n    \u00a0\u00a0\u00a0\u00a0anyProductInUsa.Price = discountedPrice;\n\n    \u00a0\u00a0\u00a0\u00a0_context.SaveChanges();\n    }\n    ```", "```cpp\n    public void RemoveAnyProductInUsa()\n    {\n    \u00a0\u00a0\u00a0\u00a0var anyProductInUsa = _context\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.Products\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.FirstOrDefault(p => p.Manufacturer.Country == \"USA\");\n\n    \u00a0\u00a0\u00a0\u00a0_context.Remove(anyProductInUsa);\n    \u00a0\u00a0\u00a0\u00a0_context.SaveChanges();\n    }\n    ```", "```cpp\n      public IEnumerable<Manufacturer> GetManufacturersInUsa()\n      {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var manufacturersFromUsa = _context\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.Manufacturers\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.Include(m => m.Products)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.Where(m => m.Country == \"USA\")\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.ToList();\n\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return manufacturersFromUsa;\n      }\n    }\n    ```", "```cpp\n    Demo.cs\n    public static class Demo\n    {\n    \u00a0\u00a0\u00a0\u00a0public static void Run()\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var service = new GlobalFactoryService(new FactoryDbContext());\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0service.CreateManufacturersInUsa(new []{\"Best Buy\", \"Iron Retail\"});\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0service.CreateUsaProducts(new []\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new Product\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Name = \"Toy computer\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Price = 20.99m\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new Product\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    ```", "```cpp\nThe complete code can be found here: https://packt.link/qMYbi.\n```", "```cpp\nBest Buy:\nLoli microphone 5\nIron Retail:\nToy computer 20,99\nLoli microphone 7,51\n```", "```cpp\ndotnet add package Microsoft.EntityFrameworkCore.tools\n```", "```cpp\ndotnet ef dbcontext scaffold \"Host=localhost;Username=postgres;Password=****;Database=Adventureworks\" Npgsql.EntityFrameworkCore.PostgreSQL -o your/models/path --schema \"production\"\n```", "```cpp\npublic globalfactory2021Context()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public globalfactory2021Context(DbContextOptions<globalfactory2021Context> options)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: base(options)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!optionsBuilder.IsConfigured)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0optionsBuilder.UseNpgsql(Program.GlobalFactoryConnectionString);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n```", "```cpp\nglobalfactory2021Context.cs\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\nmodelBuilder.Entity<Manufacturer>(entity =>\n{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0entity.ToTable(\"manufacturer\", \"factory\");\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0entity.Property(e => e.Id)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.HasColumnName(\"id\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.UseIdentityAlwaysColumn();\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0entity.Property(e => e.Country)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.IsRequired()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.HasMaxLength(50)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.HasColumnName(\"country\");\nThe complete code can be found here: https://packt.link/S5s6d.\n```", "```cpp\nmodelBuilder.Entity< Manufacturer >(entity =>\n```", "```cpp\nentity.ToTable(\"manufacturer\", \"factory\");\n```", "```cpp\nentity.Property(e => e.Name)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.IsRequired()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.HasMaxLength(50)\n\u00a0\u00a0\u00a0.HasColumnName(\"name\");\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0entity.HasOne(d => d.Manufacturer)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.WithMany(p => p.Products)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.HasForeignKey(d => d.Manufacturerid)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.HasConstraintName(\"product_manufacturerid_id\");\n```", "```cpp\nUnable to determine the relationship represented by navigation property Entity.NavProperty' of type 'AnotherEntity'. Either manually configure the relationship, or ignore this property from the model.\n```", "```cpp\ndotnet ef dbcontext scaffold \"Host=localhost;Username=postgres;Password=****;Database=globalfactory2021\" Npgsql.EntityFrameworkCore.PostgreSQL -o Examples/GlobalFactory2021.\n```", "```cpp\ndotnet add package Microsoft.EntityFrameworkCore.Design\n```", "```cpp\ndotnet ef migrations add MyFirstMigration -c globalfactory2021Context\n```", "```cpp\ndotnet ef database update -c globalfactory2021context\n```", "```cpp\npublic DateTime FoundedAt { get; set; }\n```", "```cpp\nentity.Property(e => e.FoundedAt)\n\u00a0\u00a0\u00a0\u00a0.HasColumnType(\"date\")\n```", "```cpp\ndotnet ef migrations add AddManufacturerFoundedDate -c globalfactory2021Context\n```", "```cpp\ndotnet ef database update -c globalfactory2021context\n```", "```cpp\ndotnet ef database update MyFirstMigration -c globalfactory2021context\n```", "```cpp\ndotnet ef migrations remove -c globalfactory2021Context\n```", "```cpp\ndotnet ef migrations script -c globalfactory2021context\n```", "```cpp\npublic class ProductPriceHistory\n{\n\u00a0\u00a0\u00a0\u00a0public int Id { get; set; }\n\u00a0\u00a0\u00a0\u00a0public decimal Price { get; set; }\n\u00a0\u00a0\u00a0\u00a0public DateTime DateOfPrice { get; set; }\n\u00a0\u00a0\u00a0\u00a0public int ProductId { get; set; }\n\n\u00a0\u00a0\u00a0\u00a0public Product Product { get; set; }\n}\n```", "```cpp\n    public ICollection<ProductPriceHistory> PriceHistory { get; set; }\n    ```", "```cpp\n    public partial class Product\n    {\n    \u00a0\u00a0\u00a0\u00a0public int Id { get; set; }\n    \u00a0\u00a0\u00a0\u00a0public string Name { get; set; }\n    \u00a0\u00a0\u00a0\u00a0public int ManufacturerId { get; set; }\n\n    \u00a0\u00a0\u00a0\u00a0public decimal GetPrice() => PriceHistory\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.Where(p => p.ProductId == Id)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.OrderByDescending(p => p.DateOfPrice)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.First().Price;\n\n    \u00a0\u00a0\u00a0\u00a0public Manufacturer Manufacturer { get; set; }\n    \u00a0\u00a0\u00a0\u00a0public ICollection<ProductPriceHistory> PriceHistory { get; set; }\n    }\n    ```", "```cpp\n    modelBuilder.Entity<ProductPriceHistory>(entity =>\n    {\n    \u00a0\u00a0\u00a0\u00a0entity.ToTable(\"ProductPriceHistory\", \"Factory\");\n\n    \u00a0\u00a0\u00a0\u00a0entity.Property(e => e.Price)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.HasColumnType(\"money\");\n\n    \u00a0\u00a0\u00a0\u00a0entity.Property(e => e.DateOfPrice)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.HasColumnType(\"date\");\n    ```", "```cpp\n     RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0entity.HasOne(d => d.Product)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.WithMany(p => p.PriceHistory)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.HasForeignKey(d => d.ProductId), \"FK_ProductPriceHistory_Product\");\n    });\n    ```", "```cpp\n    dotnet ef migrations add AddProductPriceHistory -c globalfactory2021Contextv3 -o Exercises/Exercise03/Migrations\n    ```", "```cpp\n    dotnet ef database update -c globalfactory2021contextv3\n    ```", "```cpp\n    Demo.cs\n    public static class Demo\n    {\n    \u00a0\u00a0\u00a0\u00a0public static void Run()\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var db = new globalfactory2021Contextv3();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var manufacturer = new Manufacturer\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Country = \"Canada\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0FoundedAt = DateTime.UtcNow,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Name = \"Fake Toys\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var product = new Product\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Name = \"Rubber Sweater\",\n    ```", "```cpp\nThe complete code can be found here: https://packt.link/4FMz4.\n```", "```cpp\n    Fake Toys Rubber Sweater 15.5000\n    ```", "```cpp\nvar db = new GlobalFactory2021Context();\n```", "```cpp\ndb.Dispose();\n```", "```cpp\nDataSeeding.cs\npublic static class DataSeeding\n{\n\u00a0\u00a0\u00a0\u00a0public const string ManufacturerName = \"Test Factory\";\n\u00a0\u00a0\u00a0\u00a0public const string TestProduct1Name = \"Product1\u00a0\u00a0\u00a0\u00a0 \";\n\u00a0\u00a0\u00a0\u00a0/// <summary>\n\u00a0\u00a0\u00a0\u00a0/// Padding should be 13 spaces to the right as per our test data, db and filtering requirements\n\u00a0\u00a0\u00a0\u00a0/// </summary>\n\u00a0\u00a0\u00a0\u00a0public const string TestProduct2NameNotPadded = \"Product2\";\n\u00a0\u00a0\u00a0\u00a0public const decimal MaxPrice = 1000;\n\n\u00a0\u00a0\u00a0\u00a0public static void SeedDataNotSeededBefore()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var db = new globalfactory2021Context();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var isDataAlreadySeeded = db.Manufacturers.Any(m => m.Name == ManufacturerName);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (isDataAlreadySeeded) return;\nThe complete code can be found here: https://packt.link/58JTd.\n```", "```cpp\nDemo.cs\npublic static class Demo\n{\n\u00a0\u00a0\u00a0\u00a0public static void Run()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// For benchmarks to be more accurate, make sure you run the seeding before anything\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// And then restart the application\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Lazy loading is a prime example of being impacted by this inverting the intended results.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DataSeeding.SeedDataNotSeededBefore();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Slow-Faster example pairs\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// The title does not illustrate which you should pick\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// It rather illustrates when it becomes a problem.\n\n\u00a0\u00a0\u00a0\u00a0CompareExecTimes(EnumerableVsQueryable.Slow, EnumerableVsQueryable.Fast, \"IEnumerable over IQueryable\");\n\u00a0\u00a0\u00a0\u00a0CompareExecTimes(MethodChoice.Slow, MethodChoice.Fast, \"equals over ==\");\n\u00a0\u00a0\u00a0\u00a0CompareExecTimes(Loading.Lazy, Loading.Eager, \"Lazy over Eager loading\");\nThe complete code can be found here: https://packt.link/xE0Df.\n```", "```cpp\nfor (int i = 0; i < 1000; i++)\n{\n\u00a0\u00a0\u00a0\u00a0var product = new Product\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Name = productName,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Price = 11,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ManufacturerId = 2\n\u00a0\u00a0\u00a0\u00a0};\n\u00a0\u00a0\u00a0\u00a0db.Products.Add(product);\n}\n```", "```cpp\nvar toAdd = new List<Product>();\nfor (int i = 0; i < 1000; i++)\n{\n\u00a0\u00a0\u00a0\u00a0var product = new Product\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Name = productName,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Price = 11,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Manufacturerid = 2\n\u00a0\u00a0\u00a0\u00a0};\n\u00a0\u00a0\u00a0\u00a0toAdd.Add(product);\n}\ndb.Products.AddRange(toAdd);\n```", "```cpp\nvar filtered = db.Products\n\u00a0\u00a0\u00a0\u00a0.Where(p => p.Name.Equals(DataSeeding.TestProduct1Name))\n\u00a0\u00a0\u00a0\u00a0.ToList();\n```", "```cpp\nvar filtered = db.Products\n\u00a0\u00a0\u00a0\u00a0.Where(p => p.Name == DataSeeding.TestProduct1Name)\n\u00a0\u00a0\u00a0\u00a0.ToList();\n```", "```cpp\nIEnumerable<Product> products = db.Products;\nvar filtered = products\n\u00a0\u00a0\u00a0\u00a0.Where(p => p.Name == DataSeeding.TestProduct1Name)\n\u00a0\u00a0\u00a0\u00a0.ToList();\n```", "```cpp\nIQueryable<Product> products = db.Products;\nvar filtered = products\n\u00a0\u00a0\u00a0\u00a0.Where(p => p.Name == DataSeeding.TestProduct1Name)\n\u00a0\u00a0\u00a0\u00a0.ToList();\n```", "```cpp\nvar product = db.Products.First();\n// Lazy loaded\nvar manufacturer = product.Manufacturer;\n```", "```cpp\nvar manufacturer = db.Products\n\u00a0\u00a0\u00a0\u00a0// Eager loaded\n\u00a0\u00a0\u00a0\u00a0.Include(p => p.Manufacturer)\n\u00a0\u00a0\u00a0\u00a0.First()\n\u00a0\u00a0\u00a0\u00a0.Manufacturer;\n```", "```cpp\nvar products = db.Products\n\u00a0\u00a0\u00a0\u00a0.ToList();\n```", "```cpp\nvar products = db.Products\n\u00a0\u00a0\u00a0\u00a0.AsNoTracking()\n\u00a0\u00a0\u00a0\u00a0.ToList();\n```", "```cpp\nIENUMERABLE OVER IQUERYABLE          Scenario1: 75ms,   Scenario2: 31ms\nEQUALS OVER ==                       Scenario1: 33ms,   Scenario2: 24ms\nLAZY OVER EAGER LOADING              Scenario1: 3ms,    Scenario2: 29ms\nREAD-ONLY QUERIES                    Scenario1: 40ms,   Scenario2: 10ms\nMULTIPLE ADDS                        Scenario1: 8ms,    Scenario2: 8ms\n```", "```cpp\noptionsBuilder.LogTo((s) => Debug.WriteLine(s));\n```", "```cpp\npublic interface IProductRepository\n{\n\u00a0\u00a0\u00a0\u00a0int Create(Product product);\n\u00a0\u00a0\u00a0\u00a0void Delete(int id);\n\u00a0\u00a0\u00a0\u00a0void Update(Product product);\n\u00a0\u00a0\u00a0\u00a0Product Get(int id);\n\u00a0\u00a0\u00a0\u00a0IEnumerable<Product> Get();\n}\n```", "```cpp\npublic interface IManufacturerRepository\n{\n\u00a0\u00a0\u00a0\u00a0int Create(Manufacturer product);\n\u00a0\u00a0\u00a0\u00a0void Delete(int id);\n\u00a0\u00a0\u00a0\u00a0void Update(Manufacturer product);\n\u00a0\u00a0\u00a0\u00a0Manufacturer Get(int id);\n\u00a0\u00a0\u00a0\u00a0IEnumerable<Manufacturer> Get();\n}\n```", "```cpp\npublic interface IRepository<TEntity>: IDisposable where TEntity : class\n{\n\u00a0\u00a0\u00a0\u00a0int Create(TEntity productentity);\n\u00a0\u00a0\u00a0\u00a0void Delete(long id)(int id);\n\u00a0\u00a0\u00a0\u00a0void Update(TEntity entityproduct);\n\u00a0\u00a0\u00a0\u00a0TEntity Get(long id)(int id);\n\u00a0\u00a0\u00a0\u00a0IEnumerable<TEntity> Get();\n\u00a0\u00a0\u00a0\u00a0void Dispose();\n}\n```", "```cpp\npublic interface IEntity\n{\n\u00a0\u00a0\u00a0\u00a0int Id { get; }\n}\n```", "```cpp\npublic interface IAggregate : IEntity\n{\n}\n```", "```cpp\n    public class Repository<TAggregate>: IRepository<TAggregate> where TAggregate: class\n    {\n    \u00a0\u00a0\u00a0\u00a0private readonly DbSet<TAggregate> _dbSet;\n    \u00a0\u00a0\u00a0\u00a0private readonly DbContext _context;\n\n    \u00a0\u00a0\u00a0\u00a0public Repository(DbContext context)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_dbSet = context.Set<TAggregate>();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_context = context;\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    public int Create(TAggregate aggregate)\n    {\n    \u00a0\u00a0\u00a0\u00a0var added = _dbSet.Add(aggregate);\n    \u00a0\u00a0\u00a0\u00a0_context.SaveChanges();\n\n    \u00a0\u00a0\u00a0\u00a0return added.Entity.Id;\n    }\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0public void Delete(int id)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var toRemove = _dbSet.Find(id);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (toRemove != null)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_dbSet.Remove(toRemove);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_context.SaveChanges();\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0public void Update(TAggregate aggregate)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_dbSet.Update(aggregate);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_context.SaveChanges();\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0public TAggregate Get(int id)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return _dbSet.Find(id);\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0public IEnumerable<TAggregate> Get()\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return _dbSet.ToList();\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0public void Dispose()\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_context?.Dispose();\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cpp\n    public static void Run()\n    {\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0var db = new FactoryDbContext();\n    \u00a0\u00a0\u00a0\u00a0\u00a0var manufacturersRepository = new Repository<Manufacturer>(db);\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0var manufacturer = new Manufacturer { Country = \"Lithuania\", Name = \"Tomo Baldai\" };\n    \u00a0\u00a0\u00a0\u00a0 var id = manufacturersRepository.Create(manufacturer);\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0manufacturer.Name = \"New Name\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0manufacturersRepository.Update(manufacturer);\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0var manufacturerAfterChanges = manufacturersRepository.Get(id);\n    \u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"Id: {manufacturerAfterChanges.Id}, \" +\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$\"Name: {manufacturerAfterChanges.Name}\");\n    ```", "```cpp\nId: 25, Name: New Name\n```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0var countBeforeDelete = manufacturersRepository.Get().Count();\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0manufacturersRepository.Delete(id);\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0var countAfter = manufacturersRepository.Get().Count();\n    \u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"Before: {countBeforeDelete}, after: {countAfter}\");\n    }\n    ```", "```cpp\n    Before: 3, after: 2\n    ```", "```cpp\ndotnet add package Microsoft.EntityFrameworkCore.InMemory\n```", "```cpp\nvar builder = new DbContextOptionsBuilder<FactoryDbContext>();\nbuilder.UseInMemoryDatabase(Guid.NewGuid().ToString());\nvar options = builder.Options;\n_db = new FactoryDbContext(options);\n```", "```cpp\nvar productsRepository = new Repository<Product>(db);\n```", "```cpp\nvar product = new Product {Name = \"Test PP\", ManufacturerId = 1, Price = 9.99m};\nvar id = productsRepository.Create(product);\n```", "```cpp\nproduct.Price = 19m;\nproductsRepository.Update(product);\n```", "```cpp\nvar productAfterChanges = productsRepository.Get(id);\n```", "```cpp\nConsole.WriteLine($\"Id: {productAfterChanges.Id}, \" +\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$\"Name: {productAfterChanges.Name}, \" +\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$\"Price: {productAfterChanges.Price}\");\n```", "```cpp\nId: 1, Name: Test PP, Price: 19\n```", "```cpp\nvar productToDelete = new Product { Name = \"Test PP 2\", ManufacturerId = 1, Price = 9.99m };\nvar idToDelete = productsRepository.Create(productToDelete);\n```", "```cpp\nvar countBeforeDelete = productsRepository.Get().Count();\n```", "```cpp\nproductsRepository.Delete(idToDelete);\n```", "```cpp\nvar countAfter = productsRepository.Get().Count();\nConsole.WriteLine($\"Before: {countBeforeDelete}, after: {countAfter}\");\n```", "```cpp\nBefore: 2, after: 1\n```", "```cpp\ndotnet add package Microsoft.EntityFrameworkCore.Sqlite\n```", "```cpp\nvar connection = new SqliteConnection(\"Filename=:memory:\");\nconnection.Open();\nvar builder = new DbContextOptionsBuilder<FactoryDbContext>();\nbuilder.UseSqlite(connection);\nvar options = builder.Options;\nvar db = new FactoryDbContext(options);\ndb.Database.EnsureCreated();\n```", "```cpp\nvar manufacturer = new Manufacturer() { Id = 1 };\ndb.Manufacturers.Add(manufacturer);\ndb.SaveChanges();\n```", "```cpp\nconnection.Dispose();\n```", "```cpp\npublic class CreateProductCommand\n{\n\u00a0\u00a0\u00a0\u00a0public string Name { get; set; }\n\u00a0\u00a0\u00a0\u00a0public decimal Price { get; set; }\n\u00a0\u00a0\u00a0\u00a0public int ManufacturerId { get; set; }\n}\n```", "```cpp\nCreateProductQueryHandler.cs\npublic class CreateProductCommandHandler\n{\n\u00a0\u00a0\u00a0\u00a0private readonly FactoryDbContext _context;\n\n\u00a0\u00a0\u00a0\u00a0public CreateProductCommandHandler(FactoryDbContext context)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_context = context;\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0public int Handle(CreateProductCommand command)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var product = new Product\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ManufacturerId = command.ManufacturerId,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Name = command.Name,\nThe complete code can be found here: https://packt.link/xhAVS.\n```", "```cpp\npublic class GetProductQueryHandler\n{\n\u00a0\u00a0\u00a0\u00a0private readonly FactoryDbContext _context;\n\n\u00a0\u00a0\u00a0\u00a0public GetProductQueryHandler(FactoryDbContext context)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_context = context;\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0public Product Handle(int id)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return _context.Products.Find(id);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\nvar command = new CreateProductCommand { Name = \"Test PP\", Manufacturerid = 1, Price = 9.99m };\nvar commandHandler = new CreateProductCommandHandler(db);\nvar newProductId = commandHandler.Handle(command);\n```", "```cpp\nvar query = newProductId;\nvar queryHandler = new GetProductQueryHandler(db);\nvar product = queryHandler.Handle(query);\nConsole.WriteLine($\"Id: {product.Id}, \" +\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$\"Name: {product.Name}, \" +\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$\"Price: {product.Price}\");\n```", "```cpp\nId: 1, Name: Test PP, Price: 9,99\n```", "```cpp\nDispatch: 1 1,1,1 2021-11-02 21:45:42\nDriver: Stephen King 2021-07-25 21:45:42\nTruck: Scania R 500 LA6x2HHA 2009\n```"]