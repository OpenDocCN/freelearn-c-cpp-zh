["```cpp\n#include <iostream>\n#include <vector>\n#include <iterator>\n#include <algorithm>\nusing namespace std;\n\ntemplate <typename T>\nclass Printer {\npublic:\n  void operator() ( const T& element ) {\n    cout << element << \"t\";\n  }\n};\n\nint main () {\n  vector<int> v = { 10, 20, 30, 40, 50 };\n\n  cout << \"nPrint the vector entries using Functor\" << endl;\n\n  for_each ( v.begin(), v.end(), Printer<int>() );\n\n  cout << endl;\n\n  return 0;\n}\n```", "```cpp\ng++ main.cpp -std=c++17\n./a.out\n```", "```cpp\nPrint the vector entries using Functor\n10  20  30  40  50\n```", "```cpp\n#include <iostream>\n#include <array>\nusing namespace std;\nint main () {\n  array<int,5> a = { 1, 5, 2, 4, 3 };\n\n  cout << \"nSize of array is \" << a.size() << endl;\n\n  auto pos = a.begin();\n\n  cout << endl;\n  while ( pos != a.end() ) \n    cout << *pos++ << \"t\";\n  cout << endl;\n\n  return 0;\n}\n```", "```cpp\ng++ main.cpp -std=c++17\n./a.out \n```", "```cpp\nSize of array is 5\n1     5     2     4     3\n```", "```cpp\narray<int,5> a = { 1, 5, 2, 4, 3 };\n```", "```cpp\n#include <iostream>\n#include <array>\nusing namespace std;\n\nint main () {\n\n    array<int, 6> a;\n    int size = a.size();\n    for (int index=0; index < size; ++index)\n         a[index] = (index+1) * 100;   \n\n    cout << \"nPrint values in original order ...\" << endl;\n\n    auto pos = a.begin();\n    while ( pos != a.end() )\n        cout << *pos++ << \"t\";\n    cout << endl;\n\n    cout << \"nPrint values in reverse order ...\" << endl;\n\n    auto rpos = a.rbegin();\n    while ( rpos != a.rend() )\n    cout << *rpos++ << \"t\";\n    cout << endl;\n\n    return 0;\n}\n```", "```cpp\n./a.out\n```", "```cpp\nPrint values in original order ...\n100   200   300   400   500   600\n\nPrint values in reverse order ...\n600   500   400   300   200   100\n```", "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint main () {\n  vector<int> v = { 1, 5, 2, 4, 3 };\n\n  cout << \"nSize of vector is \" << v.size() << endl;\n\n  auto pos = v.begin();\n\n  cout << \"nPrint vector elements before sorting\" << endl;\n  while ( pos != v.end() )\n    cout << *pos++ << \"t\";\n  cout << endl;\n\n  sort( v.begin(), v.end() );\n\n  pos = v.begin();\n\n  cout << \"nPrint vector elements after sorting\" << endl;\n\n  while ( pos != v.end() )\n    cout << *pos++ << \"t\";\n  cout << endl;\n\n  return 0;\n}\n```", "```cpp\ng++ main.cpp -std=c++17\n./a.out\n```", "```cpp\nSize of vector is 5\n\nPrint vector elements before sorting\n1     5     2     4     3\n\nPrint vector elements after sorting\n1     2     3     4     5\n```", "```cpp\nvector<int> v = { 1, 5, 2, 4, 3 };\n```", "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <iterator>\nusing namespace std;\n\nint main () {\n    vector<int> v;\n\n    cout << \"nType empty string to end the input once you are done feeding the vector\" << endl;\n    cout << \"nEnter some numbers to feed the vector ...\" << endl;\n\n    istream_iterator<int> start_input(cin);\n    istream_iterator<int> end_input;\n\n    copy ( start_input, end_input, back_inserter( v ) );\n\n    cout << \"nPrint the vector ...\" << endl;\n    copy ( v.begin(), v.end(), ostream_iterator<int>(cout, \"t\") );\n    cout << endl;\n\n    return 0;\n}\n```", "```cpp\nistream_iterator<int> start_input(cin);\nistream_iterator<int> end_input;\n\ncopy ( start_input, end_input, back_inserter( v ) );\n```", "```cpp\ncout << \"nPrint the vector ...\" << endl;\ncopy ( v.begin(), v.end(), ostream_iterator<int>(cout, \"t\") );\ncout << endl;\n```", "```cpp\n#include <iostream>\n#include <list>\n#include <iterator>\n#include <algorithm>\nusing namespace std;\n\nint main () {\n\n  list<int> l;\n\n  for (int count=0; count<5; ++count)\n    l.push_back( (count+1) * 100 );\n\n  auto pos = l.begin();\n\n  cout << \"nPrint the list ...\" << endl;\n  while ( pos != l.end() )\n    cout << *pos++ << \"-->\";\n  cout << \" X\" << endl;\n\n  return 0;\n}\n```", "```cpp\n#include <iostream>\n#include <list>\n#include <iterator>\n#include <algorithm>\nusing namespace std;\n\nint main () {\n\n    list<int> l = { 100, 20, 80, 50, 60, 5 };\n\n    auto pos = l.begin();\n\n    cout << \"nPrint the list before sorting ...\" << endl;\n    copy ( l.begin(), l.end(), ostream_iterator<int>( cout, \"-->\" ));\n    cout << \"X\" << endl;\n\n    l.sort();\n\n    cout << \"nPrint the list after sorting ...\" << endl;\n    copy ( l.begin(), l.end(), ostream_iterator<int>( cout, \"-->\" ));\n    cout << \"X\" << endl; \n\n    return 0;\n}\n```", "```cpp\n#include <iostream>\n#include <forward_list>\n#include <iterator>\n#include <algorithm>\nusing namespace std;\n\nint main ( ) {\n\n  forward_list<int> l = { 10, 10, 20, 30, 45, 45, 50 };\n\n  cout << \"nlist with all values ...\" << endl;\n  copy ( l.begin(), l.end(), ostream_iterator<int>(cout, \"t\") );\n\n  cout << \"nSize of list with duplicates is \" << distance( l.begin(), l.end() ) << endl;\n\n  l.unique();\n\n  cout << \"nSize of list without duplicates is \" << distance( l.begin(), l.end() ) << endl;\n\n  l.resize( distance( l.begin(), l.end() ) );\n\n  cout << \"nlist after removing duplicates ...\" << endl;\n  copy ( l.begin(), l.end(), ostream_iterator<int>(cout, \"t\") );\n  cout << endl;\n\n  return 0;\n\n}\n```", "```cpp\n./a.out\n```", "```cpp\nlist with all values ...\n10    10    20    30    45    45    50\nSize of list with duplicates is 7\n\nSize of list without duplicates is 5\n\nlist after removing duplicates ...\n10    20   30   45   50\n```", "```cpp\nforward_list<int> l = { 10, 10, 20, 30, 45, 45, 50 };\n```", "```cpp\ncout << \"nSize of list with duplicates is \" << distance( l.begin(), l.end() ) << endl;\n```", "```cpp\nl.unique();\n```", "```cpp\n#include <iostream>\n#include <forward_list>\n#include <iterator>\n#include <algorithm>\nusing namespace std;\n\nint main () {\n\n    forward_list<int> list1 = { 10, 20, 10, 45, 45, 50, 25 };\n    forward_list<int> list2 = { 20, 35, 27, 15, 100, 85, 12, 15 };\n\n    cout << \"nFirst list before sorting ...\" << endl;\n    copy ( list1.begin(), list1.end(), ostream_iterator<int>(cout, \"t\") );\n    cout << endl; \n\n    cout << \"nSecond list before sorting ...\" << endl;\n    copy ( list2.begin(), list2.end(), ostream_iterator<int>(cout, \"t\") );\n    cout << endl;\n\n    list1.sort();\n    list2.sort();\n\n    cout << \"nFirst list after sorting ...\" << endl;\n    copy ( list1.begin(), list1.end(), ostream_iterator<int>(cout, \"t\") );\n    cout << endl; \n\n    cout << \"nSecond list after sorting ...\" << endl;\n    copy ( list2.begin(), list2.end(), ostream_iterator<int>(cout, \"t\") );\n    cout << endl;    \n\n    list1.merge ( list2 );\n\n    cout << \"nMerged list ...\" << endl;\n    copy ( list1.begin(), list1.end(), ostream_iterator<int>(cout, \"t\") );\n\n    cout << \"nMerged list after removing duplicates ...\" << endl;\n    list1.unique(); \n    copy ( list1.begin(), list1.end(), ostream_iterator<int>(cout, \"t\") );\n\n    return 0;\n}\n```", "```cpp\n./a.out\n```", "```cpp\nFirst list before sorting ...\n10   20   10   45   45   50   25\nSecond list before sorting ...\n20   35   27   15   100  85   12   15\n\nFirst list after sorting ...\n10   10   20   25   45   45   50\nSecond list after sorting ...\n12   15   15   20   27   35   85   100\n\nMerged list ...\n10   10   12   15   15   20   20   25   27   35   45   45  50   85  100\nMerged list after removing duplicates ...\n10   12   15   20   25   27   35   45   50   85  100\n```", "```cpp\n#include <iostream>\n#include <deque>\n#include <algorithm>\n#include <iterator>\nusing namespace std;\n\nint main () {\n  deque<int> d = { 10, 20, 30, 40, 50 };\n\n  cout << \"nInitial size of deque is \" << d.size() << endl;\n\n  d.push_back( 60 );\n  d.push_front( 5 );\n\n  cout << \"nSize of deque after push back and front is \" << d.size() << endl;\n\n  copy ( d.begin(), d.end(), ostream_iterator<int>( cout, \"t\" ) );\n  d.clear();\n\n  cout << \"nSize of deque after clearing all values is \" << d.size() <<\nendl;\n\n  cout << \"nIs the deque empty after clearing values ? \" << ( d.empty()\n? \"true\" : \"false\" ) << endl;\n\nreturn 0;\n}\n```", "```cpp\n./a.out\n```", "```cpp\nIntitial size of deque is 5\n\nSize of deque after push back and front is 7\n\nPrint the deque ...\n5  10  20  30  40  50  60\nSize of deque after clearing all values is 0\n\nIs the deque empty after clearing values ? true\n```", "```cpp\n#include <iostream>\n#include <set>\n#include <vector>\n#include <iterator>\n#include <algorithm>\nusing namespace std;\n\nint main( ) {\n    set<int> s1 = { 1, 3, 5, 7, 9 };\n    set<int> s2 = { 2, 3, 7, 8, 10 };\n\n    vector<int> v( s1.size() + s2.size() );\n\n    cout << \"nFirst set values are ...\" << endl;\n    copy ( s1.begin(), s1.end(), ostream_iterator<int> ( cout, \"t\" ) );\n    cout << endl;\n\n    cout << \"nSecond set values are ...\" << endl;\n    copy ( s2.begin(), s2.end(), ostream_iterator<int> ( cout, \"t\" ) );\n    cout << endl;\n\n    auto pos = set_difference ( s1.begin(), s1.end(), s2.begin(), s2.end(), v.begin() ); \n    v.resize ( pos - v.begin() );\n\n    cout << \"nValues present in set one but not in set two are ...\" << endl;\n    copy ( v.begin(), v.end(), ostream_iterator<int> ( cout, \"t\" ) );\n    cout << endl; \n\n    v.clear();\n\n    v.resize ( s1.size() + s2.size() );\n\n    pos = set_union ( s1.begin(), s1.end(), s2.begin(), s2.end(), v.begin() );\n\n    v.resize ( pos - v.begin() );\n\n    cout << \"nMerged set values in vector are ...\" << endl;\n    copy ( v.begin(), v.end(), ostream_iterator<int> ( cout, \"t\" ) );\n    cout << endl; \n\n    return 0;\n}\n```", "```cpp\n./a.out\n```", "```cpp\nFirst set values are ...\n1   3   5   7   9\n\nSecond set values are ...\n2   3   7   8   10\n\nValues present in set one but not in set two are ...\n1   5   9\n\nMerged values of first and second set are ...\n1   2   3   5   7   8   9  10\n```", "```cpp\nset<int> s1 = { 1, 3, 5, 7, 9 };\nset<int> s2 = { 2, 3, 7, 8, 10 };\n```", "```cpp\nvector<int> v( s1.size() + s2.size() );\n```", "```cpp\ncout << \"nFirst set values are ...\" << endl;\ncopy ( s1.begin(), s1.end(), ostream_iterator<int> ( cout, \"t\" ) );\ncout << endl;\n\ncout << \"nSecond set values are ...\" << endl;\ncopy ( s2.begin(), s2.end(), ostream_iterator<int> ( cout, \"t\" ) );\ncout << endl;\n```", "```cpp\nauto pos = set_difference ( s1.begin(), s1.end(), s2.begin(), s2.end(), v.begin() ); \nv.resize ( pos - v.begin() );\n```", "```cpp\ncout << \"nValues present in set one but not in set two are ...\" << endl;\ncopy ( v.begin(), v.end(), ostream_iterator<int> ( cout, \"t\" ) );\ncout << endl;\n```", "```cpp\npos = set_union ( s1.begin(), s1.end(), s2.begin(), s2.end(), v.begin() );\nv.resize ( pos - v.begin() );\n```", "```cpp\ncout << \"nMerged values of first and second set are ...\" << endl;\ncopy ( v.begin(), v.end(), ostream_iterator<int> ( cout, \"t\" ) );\ncout << endl;\n```", "```cpp\n#include <iostream>\n#include <map>\n#include <iterator>\n#include <algorithm>\nusing namespace std;\nint main ( ) {\n\n  map<string, long> contacts;\n\n  contacts[\"Jegan\"] = 123456789;\n  contacts[\"Meena\"] = 523456289;\n  contacts[\"Nitesh\"] = 623856729;\n  contacts[\"Sriram\"] = 993456789;\n\n  auto pos = contacts.find( \"Sriram\" );\n\n  if ( pos != contacts.end() )\n    cout << pos->second << endl;\n\n  return 0;\n}\n```", "```cpp\ng++ main.cpp -std=c++17\n./a.out\n```", "```cpp\nMobile number of Sriram is 8901122334\n```", "```cpp\nmap< string, long > contacts;\n```", "```cpp\n contacts[ \"Jegan\" ] = 1234567890;\n contacts[ \"Meena\" ] = 5784433221;\n contacts[ \"Nitesh\" ] = 4567891234;\n contacts[ \"Sriram\" ] = 8901122334;\n```", "```cpp\n auto pos = contacts.find( \"Sriram\" );\n```", "```cpp\n if ( pos != contacts.end() )\n cout << \"nMobile number of \" << pos->first << \" is \" << pos->second << endl;\n else\n cout << \"nContact not found.\" << endl;\n```", "```cpp\n#include <iostream>\n#include <set>\n#include <iterator>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n  multiset<int> s = { 10, 30, 10, 50, 70, 90 };\n\n  cout << \"nMultiset values are ...\" << endl;\n\n  copy ( s.begin(), s.end(), ostream_iterator<int> ( cout, \"t\" ) );\n  cout << endl;\n\n  return 0;\n}\n```", "```cpp\n./a.out\n```", "```cpp\nMultiset values are ...\n10 30 10 50 70 90\n```", "```cpp\n#include <iostream>\n#include <map>\n#include <vector>\n#include <iterator>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n  multimap< string, long > contacts = {\n    { \"Jegan\", 2232342343 },\n    { \"Meena\", 3243435343 },\n    { \"Nitesh\", 6234324343 },\n    { \"Sriram\", 8932443241 },\n    { \"Nitesh\", 5534327346 }\n  };\n\n  auto pos = contacts.find ( \"Nitesh\" );\n  int count = contacts.count( \"Nitesh\" );\n  int index = 0;\n\n  while ( pos != contacts.end() ) { \n  cout << \"\\nMobile number of \" << pos->first << \" is \" << \n  pos->second << endl; \n  ++index; \n  ++pos;\n  if ( index == count )\n     break; \n}\n  return 0;\n}\n```", "```cpp\ng++ main.cpp -std=c++17\n\n./a.out\n```", "```cpp\nMobile number of Nitesh is 6234324343\nMobile number of Nitesh is 5534327346\n```", "```cpp\n#include <iostream>\n#include <stack>\n#include <iterator>\n#include <algorithm>\nusing namespace std;\n\nint main ( ) {\n\n  stack<string> spoken_languages;\n\n  spoken_languages.push ( \"French\" );\n  spoken_languages.push ( \"German\" );\n  spoken_languages.push ( \"English\" );\n  spoken_languages.push ( \"Hindi\" );\n  spoken_languages.push ( \"Sanskrit\" );\n  spoken_languages.push ( \"Tamil\" );\n\n  cout << \"nValues in Stack are ...\" << endl;\n  while ( ! spoken_languages.empty() ) {\n              cout << spoken_languages.top() << endl;\n        spoken_languages.pop();\n  }\n  cout << endl;\n\n  return 0;\n}\n```", "```cpp\ng++ main.cpp -std=c++17\n\n./a.out\n```", "```cpp\nValues in Stack are ...\nTamil\nKannada\nTelugu\nSanskrit\nHindi\nEnglish\nGerman\nFrench\n```", "```cpp\n#include <iostream>\n#include <queue>\n#include <iterator>\n#include <algorithm>\nusing namespace std;\n\nint main () {\n  queue<int> q;\n\n  q.push ( 100 );\n  q.push ( 200 );\n  q.push ( 300 );\n\n  cout << \"nValues in Queue are ...\" << endl;\n  while ( ! q.empty() ) {\n    cout << q.front() << endl;\n    q.pop();\n  }\n\n  return 0;\n}\n```", "```cpp\ng++ main.cpp -std=c++17\n\n./a.out\n```", "```cpp\nValues in Queue are ...\n100\n200\n300\n```", "```cpp\n#include <iostream>\n#include <queue>\n#include <iterator>\n#include <algorithm>\nusing namespace std;\n\nint main () {\n  priority_queue<int> q;\n\n  q.push( 100 );\n  q.push( 50 );\n  q.push( 1000 );\n  q.push( 800 );\n  q.push( 300 );\n\n  cout << \"nSequence in which value are inserted are ...\" << endl;\n  cout << \"100t50t1000t800t300\" << endl;\n  cout << \"Priority queue values are ...\" << endl;\n\n  while ( ! q.empty() ) {\n    cout << q.top() << \"t\";\n    q.pop();\n  }\n  cout << endl;\n\n  return 0;\n}\n```", "```cpp\ng++ main.cpp -std=c++17\n\n./a.out\n```", "```cpp\nSequence in which value are inserted are ...\n100   50   1000  800   300\n\nPriority queue values are ...\n1000  800   300   100   50\n```"]