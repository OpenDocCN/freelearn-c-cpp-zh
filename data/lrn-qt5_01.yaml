- en: Hello Qt
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hello Qt
- en: Qt is a mature and powerful framework for delivering sophisticated applications
    across a multitude of platforms. It is widely used in embedded devices including
    TVs, satellite set-top boxes, medical equipment, car dashboards, and much more.
    It also has a rich history in the Linux world, with KDE and Sailfish OS using
    it extensively and many apps in the stores being developed using Qt. It has also
    made great strides in the Mobile arena over the past several years. However, in
    the Microsoft Windows and Apple Mac OS X worlds, the dominance of C#/.NET and
    Objective-C/Cocoa mean that Qt is often overlooked.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Qt是一个成熟而强大的框架，可在多种平台上交付复杂的应用程序。它被广泛应用于嵌入式设备，包括电视、卫星机顶盒、医疗设备、汽车仪表板等。它在Linux世界中也有丰富的历史，KDE和Sailfish
    OS广泛使用它，许多应用程序也是使用Qt开发的。在过去几年中，它在移动领域也取得了巨大进展。然而，在Microsoft Windows和Apple Mac
    OS X世界中，C#/.NET和Objective-C/Cocoa的主导地位意味着Qt经常被忽视。
- en: This book aims to demonstrate the power and flexibility of the Qt framework
    and show how you can write your application once and deploy it to multiple operating
    system desktops. We will build a complete real-world **line of business** (**LOB**)
    solution from scratch, with distinct library, user interface, and unit test projects.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本书旨在演示Qt框架的强大和灵活性，并展示如何编写应用程序一次并部署到多个操作系统桌面上。我们将从头开始构建一个完整的现实世界的**业务线**（**LOB**）解决方案，包括独立的库、用户界面和单元测试项目。
- en: We will cover building a modern, responsive user interface with QML and wiring
    it up to rich C++ classes. We will control every aspect of our project configuration
    and output with QMake, including platform detection and conditional expressions.
    We will build “self-aware” data entities that can serialize themselves to and
    from JSON. We will persist those data entities in a database and learn how to
    find and update them. We will reach out to the internet and consume an RSS feed.
    Finally, we will produce an installation package so that we can deploy our application
    onto other machines.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将介绍如何使用QML构建现代、响应式的用户界面，并将其与丰富的C++类连接起来。我们将使用QMake控制项目配置和输出的每个方面，包括平台检测和条件表达式。我们将构建“自我意识”的数据实体，可以将自己序列化到JSON并从中反序列化。我们将在数据库中持久化这些数据实体，并学习如何查找和更新它们。我们将访问互联网并消费RSS源。最后，我们将生成一个安装包，以便将我们的应用程序部署到其他机器上。
- en: 'In this chapter, we will install and configure the Qt framework and associated
    **Integrated Development Environment** (**IDE**) Qt Creator. We will create a
    simple scratchpad application that we will use throughout the remainder of the
    book to demonstrate various techniques. We will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将安装和配置Qt框架以及相关的**集成开发环境**（**IDE**）Qt Creator。我们将创建一个简单的草稿应用程序，我们将在本书的其余部分中使用它来演示各种技术。我们将涵盖以下主题：
- en: Installing Qt
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Qt
- en: Maintaining your installation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维护你的安装
- en: Qt Creator
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Qt Creator
- en: Scratchpad project
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 草稿项目
- en: qmake
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: qmake
- en: Installing Qt
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Qt
- en: 'Let’s start things off by visiting the Qt website at [https://www.qt.io](https://www.qt.io/):'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先访问Qt网站[https://www.qt.io](https://www.qt.io/)：
- en: '![](img/c940d042-dd21-4b22-98cd-da7573f1eab4.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c940d042-dd21-4b22-98cd-da7573f1eab4.png)'
- en: 'The site layout changes fairly frequently, but what you are looking for is
    to download Qt Open Source for Desktop & Mobile:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 网站布局经常变化，但你要找的是下载桌面和移动端的Qt开源版本：
- en: From the top-level menu, select Products and then IDE & Tools
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从顶级菜单中选择产品，然后选择IDE和工具
- en: Click on Start for Free
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击免费开始
- en: Select Desktop & Mobile Applications
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择桌面和移动应用程序
- en: Click on Get your open source package
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击获取你的开源软件包
- en: If you continue to use Qt beyond these personal projects, ensure that you read
    the licensing information available on the Qt website ([https://www.qt.io/licensing/](https://www.qt.io/licensing/)).
    Upgrade to the commercial Qt license if the scope of your projects requires it
    or if you want access to the official Qt support and the benefits of a close strategic
    relationship with the Qt company.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你继续在这些个人项目之外使用Qt，请确保阅读Qt网站上提供的许可信息（[https://www.qt.io/licensing/](https://www.qt.io/licensing/)）。如果你的项目范围需要或者你想要访问官方Qt支持和与Qt公司的紧密战略关系的好处，升级到商业Qt许可证。
- en: 'The site will detect your operating system and suggest a recommended download:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 该网站将检测你的操作系统并建议一个推荐的下载：
- en: '![](img/8bef27df-df7a-4602-8eea-60800d22aa90.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8bef27df-df7a-4602-8eea-60800d22aa90.png)'
- en: 'On Windows, you will be recommended the online installer `*.exe` file, while
    on Linux you will be offered a `*.run` file, and a `.dmg` file if you are running
    Mac OS X. In all cases, download and launch the installer:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，你将被推荐使用在线安装程序`*.exe`文件，而在Linux上，你将被提供一个`*.run`文件，如果你使用Mac OS X，则会提供一个`.dmg`文件。在所有情况下，下载并启动安装程序：
- en: '![](img/a3f707e8-b55d-47bf-a6f0-28bdd400b734.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a3f707e8-b55d-47bf-a6f0-28bdd400b734.png)'
- en: On Linux, once downloaded, you may need to first navigate to the `*.run` file
    and mark it as executable in order to be able to launch it. To do this, right-click
    on the file in the file manager and click on Properties. Click on the Permissions
    tab and tick the box that says Allow executing file as program.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux上，一旦下载完成，你可能需要首先转到`*.run`文件并将其标记为可执行，以便能够启动它。要做到这一点，右键单击文件管理器中的文件，然后单击属性。单击权限选项卡，选中“允许作为程序执行文件”的复选框。
- en: 'After the initial welcome dialog, the first thing you are presented with is
    the option to sign up for or log in with a Qt account. Feel free to create one
    if you wish, but for now we’ll go ahead and Skip:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在初始的欢迎对话框之后，你首先看到的是注册或使用Qt账户登录的选项。如果你愿意，可以随意创建一个，但现在我们将继续跳过：
- en: '![](img/8e5c2903-df00-4369-aa2f-5a626363549f.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8e5c2903-df00-4369-aa2f-5a626363549f.png)'
- en: You are then asked to select which components you wish to install.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 然后会要求你选择要安装的组件。
- en: Your first decision is which version(s) of the Qt framework you want. You can
    have multiple versions installed side by side. Let's select the latest and greatest
    (Qt 5.10 at the time of writing) and leave all the older versions unchecked.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你的第一个决定是你想要哪个版本的Qt框架。你可以同时安装多个版本。让我们选择最新和最好的（写作时的Qt 5.10），并取消选择所有旧版本。
- en: Next, expand the selected version and you will see a secondary list of options.
    All the options where the description reads “Qt 5.9.x Prebuilt Components for
    ...” are what is known as a **Kit**. A Kit is essentially a toolset enabling you
    to build your application with a specific compiler/linker and run it on a particular
    target architecture. Each kit comes with Qt framework binaries compiled specifically
    for that particular toolset as well as necessary supporting files. Note that kits
    do not come with the referenced compiler; you will need to install those ahead
    of time. One exception to this on Windows is MinGW (which includes GCC for Windows),
    which you can optionally install via the Tools component list at the bottom.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，展开所选版本，你会看到一个次要的选项列表。所有描述为“Qt 5.9.x预构建组件...”的选项都被称为**工具包**。工具包本质上是一组工具，使你能够使用特定的编译器/链接器构建你的应用程序，并在特定的目标架构上运行它。每个工具包都带有专门为该特定工具集编译的Qt框架二进制文件以及必要的支持文件。请注意，工具包不包含所引用的编译器；你需要提前安装它们。在Windows上的一个例外是MinGW（包括Windows的GCC），你可以选择通过底部的工具组件列表安装。
- en: On Windows, that is exactly what we’ll do, so we select the MinGW 5.3.0 32 bit
    kit and also the MinGW 5.3.0 development environment from the Tools section. On
    my (64-bit) machine, I already have Microsoft Visual Studio 2017 installed, so
    we will also select the MSVC 2017 64-bit kit to help demonstrate some techniques
    later in the book. On Linux, we select GCC 64-bit, while on Mac OS, we select
    macOS 64-bit (which uses the Clang compiler). Note that on Mac OS, you must have
    XCode installed, and it's a good idea to launch XCode at least once to give it
    an opportunity to complete its initialization and configuration.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，我们将选择MinGW 5.3.0 32位工具包，还有来自工具部分的MinGW 5.3.0开发环境。在我的（64位）机器上，我已经安装了Microsoft
    Visual Studio 2017，所以我们还会选择MSVC 2017 64位工具包，以帮助在本书后面演示一些技术。在Linux上，我们选择GCC 64位，而在Mac
    OS上，我们选择macOS 64位（使用Clang编译器）。请注意，在Mac OS上，你必须安装XCode，并且最好至少启动一次XCode，让它有机会完成初始化和配置。
- en: Feel free to press pause, go and install whatever other IDEs or compilers you
    want to use, and then come back and pick the kits to match. It doesn’t matter
    too much which you go for—the techniques explained throughout the book are applicable
    regardless of the kit, you may just get slightly different results. Note that
    the available kits you are presented with will differ depending on your operating
    system and chipset; for example, if you are on a 32 bit machine, you won’t be
    offered any 64 bit kits.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 随意暂停，安装任何其他IDE或编译器，然后回来选择相匹配的工具包。你选择哪个并不太重要——本书中介绍的技术适用于任何工具包，只是结果可能略有不同。请注意，你所看到的可用工具包将取决于你的操作系统和芯片组；例如，如果你使用的是32位机器，就不会提供64位工具包。
- en: Below the kits are some optional Qt APIs (such as Qt Charts), which we won’t
    need for the topics covered in this book, but feel free to add them in if you
    want to explore their functionality. Note that they may have different licensing
    agreements from the core Qt framework.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在工具包下面是一些可选的Qt API（如Qt Charts），在本书涉及的主题中我们不需要，但如果你想探索它们的功能，可以随意添加。请注意，它们可能与核心Qt框架有不同的许可协议。
- en: 'Regardless of kits and APIs, you will note in the Tools section that Qt Creator
    is installed by default and that is the IDE we will be using throughout this book:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 无论工具包和API，你会注意到在工具部分，Qt Creator是默认安装的IDE，这也是我们在本书中将要使用的IDE。
- en: '![](img/f3fb9cc7-a583-4c20-89f5-b50d4bb5d82f.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f3fb9cc7-a583-4c20-89f5-b50d4bb5d82f.png)'
- en: Once you are finished making your selections, click on Next and Update to kick
    off the installation.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 完成选择后，点击下一步和更新开始安装。
- en: It's generally a good idea to leave the installation location as the default
    for consistency across machines, but feel free to install it wherever you want.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 通常最好将安装位置保持默认以保持机器的一致性，但随意选择任何你想要安装的位置。
- en: Maintaining your installation
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 维护你的安装
- en: Once installed, you can update, add, and remove components (or even the entire
    Qt installation) via the `Maintenance Tool` application that is located in the
    directory you installed Qt to.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，你可以通过位于你安装Qt的目录中的`维护工具`应用程序来更新、添加和删除组件（甚至整个Qt安装）。
- en: Launching this tool provides pretty much the same experience as when we first
    installed Qt. The Add or remove components option is the one you want to add in
    items you may have previously not needed, including kits and even entirely new
    releases of the framework. Unless you actively uncheck them, components already
    installed on your system will not be affected.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 启动这个工具基本上和我们第一次安装Qt时的体验是一样的。添加或移除组件选项是你想要添加之前可能不需要的项目，包括工具包甚至是全新的框架发布。除非你主动取消选择，已经安装在系统上的组件不会受到影响。
- en: Qt Creator
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Qt Creator
- en: 'While a detailed overview of Qt Creator is beyond the scope of this book (the
    Qt Creator manual is accessible via the Help mode as described here), it’s worth
    having a quick whistle stop tour before we get stuck to our first project, so
    launch the freshly installed application and we’ll take a look:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Qt Creator的详细概述超出了本书的范围（Qt Creator手册可以通过帮助模式访问，如此处所述），但在我们开始第一个项目之前，快速浏览一下是值得的，所以启动新安装的应用程序，我们来看一下：
- en: '![](img/82d23d25-1147-4106-9889-b59acce6dfcb.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/82d23d25-1147-4106-9889-b59acce6dfcb.png)'
- en: 'At the upper left-hand side (1) are the different areas or modes of the application:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在左上角（1）是应用程序的不同区域或模式：
- en: Welcome mode is the default when Qt Creator is launched and is the jumping off
    point to create or open projects. There is an extensive set of examples that help
    showcase the various capabilities of the framework as well as a selection of tutorial
    videos.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 欢迎模式是Qt Creator启动时的默认模式，是创建或打开项目的起点。有一套广泛的示例，帮助展示框架的各种功能，以及一些教程视频的选择。
- en: Edit mode is where you will be spending the vast majority of your time and is
    used for editing all the various text-based files.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑模式是您将花费绝大部分时间的地方，用于编辑各种基于文本的文件。
- en: Design is accessible only when you have a UI file open and is a WYSIWYG editor
    for views. Although useful for UX design and basic layout work, it can get frustrating
    quite quickly and we will do all of our QML work in Edit mode instead. Working
    this way promotes understanding of the QML (as you have to write it) and also
    has the advantage that the editor is not adding code that you don’t want.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计仅在打开UI文件时可访问，并且是用于视图的所见即所得编辑器。虽然对UX设计和基本布局工作很有用，但它可能会很快变得令人沮丧，因此我们将在编辑模式下进行所有QML工作。以这种方式工作有助于理解QML（因为你必须编写它），并且还具有编辑器不添加不需要的代码的优势。
- en: Debug mode is used for debugging applications and is beyond the scope of this
    book.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试模式用于调试应用程序，超出了本书的范围。
- en: Projects mode is where configuration for the project is managed, including the
    build settings. Changes made here will be reflected in the `*.pro.user` file.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目模式是管理项目配置的地方，包括构建设置。在此处进行的更改将反映在`*.pro.user`文件中。
- en: Help mode takes you to the Qt Creator manual and Qt library reference.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 帮助模式带您进入Qt Creator手册和Qt库参考。
- en: Pressing *F1* while the cursor is on a recognized Qt symbol will automatically
    open context sensitive help for that symbol.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在识别的Qt符号上按下*F1*将自动打开该符号的上下文相关帮助。
- en: 'Below that, we have the build/run tools (2):'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面，我们有构建/运行工具（2）：
- en: Kit/Build lets you select your kit and set the build mode
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kit/Build让您选择您的工具包并设置构建模式
- en: Run builds and runs the application without debugging
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行构建并在不进行调试的情况下运行应用程序
- en: Start Debugging builds and runs the application with a debugger (note that you
    must have a debugger installed and configured in your selected kit for this to
    work)
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始调试构建并使用调试器运行应用程序（请注意，您必须在所选工具包中安装和配置调试器才能使用此功能）
- en: Build Project builds the application without running it
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建项目构建应用程序而不运行它
- en: 'Along the bottom (3), we have a search box and then several output windows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在底部（3），我们有一个搜索框，然后是几个输出窗口：
- en: Issues displays any warnings or errors. For compiler errors relating to your
    code, double-clicking on the item will navigate you to the relevant source code.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 问题显示任何警告或错误。对于与您的代码相关的编译器错误，双击该项将导航到相关的源代码。
- en: Search Results lets you find occurrences of text within various scopes. *Ctrl *+ *F*
    brings up a quick search, and from there selecting Advanced… also brings up the
    Search Results console.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搜索结果让您在各种范围内查找文本的出现。*Ctrl *+ *F*会带出一个快速搜索，然后从那里选择*高级…*也会带出搜索结果控制台。
- en: Application Output is the console window; all output from application code like
    `std::` cout and Qt’s equivalent `qDebug()` appears here, along with certain messages
    from the Qt framework.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序输出是控制台窗口；所有来自应用程序代码的输出，如`std::`cout和Qt的等效`qDebug()`，以及Qt框架的某些消息都会显示在这里。
- en: Compile Output contains output from the build process, from qmake through to
    compilation and linking.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译输出包含来自构建过程的输出，从qmake到编译和链接。
- en: Debugger Console contains debugging information that we won’t be covering in
    this book.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试器控制台包含我们在本书中不会涉及的调试信息。
- en: General Messages contains other miscellaneous output, the most useful of which
    is from qmake parsing of `*.pro` files, which we will look at later.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常规消息包含其他杂项输出，其中最有用的是来自`*.pro`文件的qmake解析，我们稍后会看到。
- en: The search box really is a hidden gem and saves you from clicking through endless
    files and folders trying to find what you are looking for. You can start typing
    the name of a file you are looking for in the box and a filtered list appears
    with all matching files. Simply click on the file you want, and it opens in the
    editor. Not only that, there are a large number of filters you can apply too.
    Click your cursor in the empty search box and it displays a list of available
    filters.  The filter `m`, for example, searches for C++ methods. So, say you remember
    writing a method called `SomeAmazingFunction()` but can't remember where it is,
    just head over to the search box, start typing `m Some`, and it will appear in
    the filtered list.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索框真的是一个隐藏的宝石，可以帮助您避免点击无尽的文件和文件夹，试图找到您要找的东西。您可以在框中开始输入要查找的文件名，然后会出现一个带有所有匹配文件的过滤列表。只需单击您想要的文件，它就会在编辑器中打开。不仅如此，您还可以应用大量的过滤器。单击光标放在空的搜索框中，它会显示一个可用过滤器的列表。例如，过滤器`m`会搜索C++方法。所以，假设您记得写了一个名为`SomeAmazingFunction()`的方法，但不记得它在哪里，只需转到搜索框，开始输入`m
    Some`，它就会出现在过滤列表中。
- en: 'In Edit mode, the layout changes slightly and some new panes appear. Initially,
    they will be empty, but once you have a project open, they will resemble the following:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在编辑模式下，布局会略有变化，并且会出现一些新的窗格。最初它们将是空的，但一旦打开项目，它们将类似于以下内容：
- en: '![](img/022cfbf8-e903-4cfd-8fbc-8f674707d226.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/022cfbf8-e903-4cfd-8fbc-8f674707d226.png)'
- en: Next to the navigation bar is the project explorer, which you can use to navigate
    the files and folders of your solution. The lower pane is a list of all of the
    documents you currently have open. The larger area to the right is the editor
    pane where you write your code and edit documents.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在导航栏旁边是项目资源管理器，您可以使用它来浏览解决方案的文件和文件夹。下面的窗格是您当前打开的所有文档的列表。右侧的较大区域是编辑器窗格，您可以在其中编写代码和编辑文档。
- en: Double-clicking on a file in the project explorer will generally open it in
    the editor pane and add it to the open documents list. Clicking on a document
    in the open documents list will activate it in the editor pane, while clicking
    on the small x to the right of the filename closes it.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目资源管理器中双击文件通常会在编辑器窗格中打开它并将其添加到打开的文档列表中。单击打开文档列表中的文档将在编辑器窗格中激活它，而单击文件名右侧的小x将关闭它。
- en: Panes can be changed to display different information, resized, split, closed,
    and possibly filtered or synchronized with the editor using the buttons in the
    headers. Experiment to get a feel for what they can do.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 窗格可以更改以显示不同的信息，调整大小，分割，关闭，并可能使用标题中的按钮过滤或与编辑器同步。尝试一下，看看它们能做什么。
- en: 'As you would expect with a modern IDE, the look and feel of the chrome and
    the text editor is very customizable. Select Tools > Options… to see what is available.
    I generally edit the following:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所期望的，现代IDE的外观和感觉是非常可定制的。选择工具 > 选项…来查看可用的选项。我通常编辑以下内容：
- en: '`Environment > Interface > Theme > Flat`'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环境 > 接口 > 主题 > 平面
- en: '`Text Editor > Fonts & Colors > Color Scheme > My own scheme`'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`文本编辑器 > 字体和颜色 > 颜色方案 > 我自己的方案`'
- en: '`Text Editor > Completion > Surround text selection with brackets > Off`'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`文本编辑器 > 完成 > 用括号包围文本选择 > 关闭`'
- en: '`Text Editor > Completion > Surround text selection with quotes > Off`'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`文本编辑器 > 完成 > 用引号包围文本选择 > 关闭`'
- en: '`C++ > Code Style > Current Settings > Copy… then Edit…`'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`C++ > 代码风格 > 当前设置 > 复制…然后编辑…`'
- en: '`Edit Code Style > Pointers and References > Bind to Type name > On (other
    options Off)`'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`编辑代码风格 > 指针和引用 > 绑定到类型名称 > 打开（其他选项关闭）`'
- en: Play around and get things how you like them.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 玩弄一下，把东西弄得你喜欢。
- en: Scratchpad project
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 草稿项目
- en: To demonstrate how minimal a Qt project can be and to give us a programming
    sandpit to play around in, we’ll create a simple scratchpad project. For this
    project, we won’t even use the IDE to do it for us, so you can really see how
    projects are built up.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示Qt项目可以有多简单，并给我们一个编程沙盒来玩耍，我们将创建一个简单的草稿项目。对于这个项目，我们甚至不会使用IDE来为我们做，这样你就可以真正看到项目是如何建立起来的。
- en: First, we need to create a root folder to store all of our Qt projects. On Windows,
    I use `c:\projects\qt`, while I use `~/projects/qt` on Linux and Mac OS. Create
    this folder wherever works for you.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要创建一个根文件夹来存储所有的Qt项目。在Windows上，我使用`c:\projects\qt`，而在Linux和Mac OS上我使用`~/projects/qt`。在任何你喜欢的地方创建这个文件夹。
- en: Note that file syncing tools (OneDrive, DropBox, and so on) can sometimes cause
    problems with project folders, so keep your project files in a regular unsynchronized
    folder and use version control with a remote repository for backups and sharing.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，文件同步工具（OneDrive，DropBox等）有时会导致项目文件夹出现问题，因此请将项目文件保存在常规的未同步文件夹中，并使用远程存储库进行版本控制以进行备份和共享。
- en: For the remainder of the book, I will loosely refer to this folder as `<Qt Projects>`
    or similar. We will also tend toward using the Unix style / separator for file
    paths, rather than Windows style back slash `\`. So, for readers using Windows,
    `<Qt Projects>/scratchpad/amazing/code` is equivalent to `c:\projects\qt\scratchpad\amazing\code`.
    Qt tends to favor this convention too.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的其余部分，我会宽松地将这个文件夹称为`<Qt项目>`或类似的。我们也倾向于使用Unix风格的/分隔符来表示文件路径，而不是Windows风格的反斜杠`\`。因此，对于使用Windows的读者，`<Qt项目>/scratchpad/amazing/code`等同于`c:\projects\qt\scratchpad\amazing\code`。Qt也倾向于使用这种约定。
- en: Equally, the majority of screenshots in the remainder of the book will be from
    Windows, so Linux/Mac users should interpret any references to `c:\projects\qt`
    as `~/projects/qt`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，本书中大部分截图将来自Windows，因此Linux/Mac用户应将任何关于`c:\projects\qt`的引用解释为`~/projects/qt`。
- en: In our Qt projects folder, create a new folder scratchpad and navigate into
    it. Create a new plain text file called `scratchpad.pro`, remembering to remove
    any `.txt` extension the operating system may want to add for you.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的Qt项目文件夹中，创建一个名为scratchpad的新文件夹并进入其中。创建一个名为`scratchpad.pro`的新纯文本文件，记得删除操作系统可能想要为你添加的任何`.txt`扩展名。
- en: 'Next, simply double-click on the file and it will open in Qt Creator:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，只需双击该文件，它将在Qt Creator中打开：
- en: '![](img/0e9f2d91-6e96-4760-b1d0-0537f9cc23e5.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0e9f2d91-6e96-4760-b1d0-0537f9cc23e5.png)'
- en: Here, Qt Creator is asking us how we want our project to be configured, namely,
    which kits we want to use when building and running our code. Pick one or more
    available kits and click on Configure Project. You can easily add and remove kits
    later, so don’t worry about which ones you select.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，Qt Creator问我们如何配置我们的项目，即在构建和运行代码时我们想要使用哪些工具包。选择一个或多个可用的工具包，然后点击配置项目。您可以随后轻松添加和删除工具包，所以不用担心选择哪个。
- en: If you switch back to the `filesystem`, you will see that Qt Creator has created
    a new file for us called `scratchpad.pro.user`. This is just an XML file containing
    configuration information. If you delete this file and open the `.pro` file again,
    you will be prompted to configure the project again. As its name suggests, the
    configuration settings are relevant to the local user, so often if you load a
    project created by someone else, you will need to go through the configure project
    step then too.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你切换回到`文件系统`，你会看到Qt Creator已经为我们创建了一个名为`scratchpad.pro.user`的新文件。这只是一个包含配置信息的XML文件。如果你删除这个文件并再次打开`.pro`文件，你将被提示再次配置项目。正如它的名字所暗示的那样，配置设置与本地用户有关，所以通常如果你加载了别人创建的项目，你也需要通过配置项目步骤。
- en: With the project successfully configured, you will see the project has been
    opened, even with a completely empty `.pro` file. That's about as minimal as a
    project can get!
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 成功配置项目后，您将看到项目已经打开，即使是一个完全空的`.pro`文件。这就是一个项目可以变得多么简单！
- en: 'Back in the `filesystem`, create the following plain text files:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 回到`文件系统`，创建以下纯文本文件：
- en: '`main.cpp`'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`main.cpp`'
- en: '`main.qml`'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`main.qml`'
- en: '`qml.qrc`'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qml.qrc`'
- en: I will go through each of these files, explain their purpose, and add their
    content soon. In a real-world project, we would of course use the IDE to create
    the files for us. Indeed, that’s exactly what we’ll do when we create our main
    solution files. However, the purpose of doing it this way is to show you that
    when you boil it down, a project is just a bunch of text files. Never be afraid
    to create and edit files manually. A lot of modern IDEs can confuse and overcomplicate
    with menu after menu and never-ending option windows. Qt Creator may miss some
    of the advanced bells and whistles of other IDEs but is refreshingly lean and
    straightforward.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我将逐个查看这些文件，解释它们的目的，并很快添加它们的内容。在现实世界的项目中，我们当然会使用 IDE 为我们创建文件。事实上，当我们创建主解决方案文件时，这正是我们要做的。然而，以这种方式做的目的是向您展示，归根结底，项目只是一堆文本文件。永远不要害怕手动创建和编辑文件。许多现代
    IDE 可能会通过一个又一个的菜单和永无止境的选项窗口使人困惑和复杂化。Qt Creator 可能会错过其他 IDE 的一些高级功能，但它非常简洁和直观。
- en: With those files created, double-click on the `scratchpad.pro` file in the Projects
    pane and we’ll start editing our new project.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了这些文件后，在项目窗格中双击 `scratchpad.pro` 文件，我们将开始编辑我们的新项目。
- en: qmake
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: qmake
- en: Our project (`.pro`) files are parsed by a utility called **qmake**, which in
    turn generates `Makefiles` that drive the building of the application. We define
    the type of project output we want, what source files are included as well as
    the dependencies and much more. Much of this is achieved by simply setting variables
    as we will do in our project file now.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的项目（`.pro`）文件由一个名为 **qmake** 的实用程序解析，它生成驱动应用程序构建的 `Makefiles`。我们定义了我们想要的项目输出类型，包括哪些源文件以及依赖关系等等。我们现在将在项目文件中简单地设置变量来实现这些。
- en: 'Add the following to `scratchpad.pro`:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下内容添加到 `scratchpad.pro`：
- en: '[PRE0]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let’s run through each of these lines in turn:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们依次浏览每一行：
- en: '[PRE1]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`TEMPLATE` tells qmake what type of project this is. In our case, it’s an executable
    application that is represented by `app`. Other values we are interested in are
    `lib` for building library binaries and `subdirs` for multi project solutions.
    Note that we set a variable with the `=` operator:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`TEMPLATE` 告诉 qmake 这是什么类型的项目。在我们的情况下，它是一个可执行应用程序，由 `app` 表示。我们感兴趣的其他值是用于构建库二进制文件的
    `lib` 和用于多项目解决方案的 `subdirs`。请注意，我们使用 `=` 运算符设置变量：'
- en: '[PRE2]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Qt is a modular framework that allows you to pull in only the parts you need.
    The `QT` flag specifies the Qt modules we want to use. The *core* and *gui* modules
    are included by default. Note that we append additional values to a variable that
    expects a list with `+=`:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Qt 是一个模块化框架，允许您只引入您需要的部分。`QT` 标志指定我们想要使用的 Qt 模块。*core* 和 *gui* 模块默认包含在内。请注意，我们使用
    `+=` 将附加值追加到期望列表的变量中：
- en: '[PRE3]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`CONFIG` allows you to add project configuration and compiler options. In this
    case, we are specifying that we want to make use of C++14 features. Note that
    these language feature flags will have no effect if the compiler you are using
    does not support them:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`CONFIG` 允许您添加项目配置和编译器选项。在这种情况下，我们指定要使用 C++14 特性。请注意，如果您使用的编译器不支持这些语言特性标志，它们将不起作用。'
- en: '[PRE4]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`SOURCES` is a list of all the `*.cpp` source files we want to include in the
    project. Here, we add our empty `main.cpp` file, where we will implement our `main()`
    function. We don’t have any yet, but when we do, our header files will be specified
    with a `HEADERS` variable:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`SOURCES` 是我们想要包含在项目中的所有 `*.cpp` 源文件的列表。在这里，我们添加了我们的空 `main.cpp` 文件，我们将在其中实现我们的
    `main()` 函数。我们目前还没有，但当我们有时，我们的头文件将使用 `HEADERS` 变量指定：'
- en: '[PRE5]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`RESOURCES` is a list of all the resource collection files (`*.qrc`) included
    in the project. Resource collection files are used for managing application resources
    such as images and fonts, but most crucially for us, our QML files.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`RESOURCES` 是项目中包含的所有资源集合文件（`*.qrc`）的列表。资源集合文件用于管理应用程序资源，如图像和字体，但对我们来说最关键的是我们的
    QML 文件。'
- en: With the project file updated, save the changes.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 更新项目文件后，保存更改。
- en: Whenever you save a change to your `*.pro` files, qmake will parse the file.
    If all is well, you will get a small green bar at the bottom-right of Qt Creator.
    A red bar indicates some kind of issue, usually a syntax error. Any output from
    the process will be written out to the General Messages window to help you diagnose
    and fix the problem. White space is ignored, so don’t worry about matching up
    the blank lines exactly.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 每当您保存对 `*.pro` 文件的更改时，qmake 将解析该文件。如果一切顺利，您将在 Qt Creator 的右下角获得一个小绿条。红色条表示某种问题，通常是语法错误。进程的任何输出都将写入“常规消息”窗口，以帮助您诊断和解决问题。空格将被忽略，所以不用担心完全匹配空行。
- en: To get qmake to take a fresh look at your project and generate new `Makefiles`,
    right-click on your project in the Projects pane and select Run qmake. It may
    be slightly tedious, but it’s a good habit to manually run qmake in this way on
    each of your projects before building and running your application. I’ve found
    that certain types of code changes can “slip under the radar” and leave you scratching
    your head when you run your application and they don’t seem to have had any effect.
    If you ever see your application ignoring the changes you’ve just made, run qmake
    on each of your projects and try again. The same applies if you get spurious linker
    errors.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 要让 qmake 重新审视您的项目并生成新的 `Makefiles`，请在项目窗格中右键单击您的项目，然后选择“运行 qmake”。这可能有点乏味，但在构建和运行应用程序之前手动运行
    qmake 是一个好习惯。我发现某些类型的代码更改可能会“悄悄地”通过，当您运行应用程序时，它们似乎没有产生任何效果。如果您看到应用程序忽略了您刚刚进行的更改，请在每个项目上运行
    qmake 并重试。如果出现虚假的链接器错误，也是同样的情况。
- en: 'You will see that our other files have now magically appeared in the Projects
    pane:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 您会看到我们的其他文件现在神奇地出现在项目窗格中：
- en: '![](img/f3dcc2a3-3a5b-49db-a081-fb4626bb65b4.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f3dcc2a3-3a5b-49db-a081-fb4626bb65b4.png)'
- en: 'Double-click on `main.cpp` to edit it, and we’ll write our first bit of code:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 双击 `main.cpp` 进行编辑，我们将写入我们的第一行代码：
- en: '[PRE6]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: All we are doing here is instantiating a Qt GUI application object and asking
    it to load our `main.qml` file. It’s very short and simple because the Qt framework
    does all the complex low-level work for us. We don’t have to worry about platform
    detection or managing window handles or OpenGL.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里所做的就是实例化一个Qt GUI应用程序对象，并要求它加载我们的`main.qml`文件。这非常简短和简单，因为Qt框架为我们做了所有复杂的底层工作。我们不必担心平台检测或管理窗口句柄或OpenGL。
- en: Possibly one of the most useful things to learn is that placing the cursor in
    one of the Qt objects and pressing *F1* will open the help for that type. The
    same is true for methods and properties on Qt objects. Poke around in the help
    files to see what `QGuiApplication` and `QQmlApplicationEngine` are all about.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 可能最有用的事情之一是学会将光标放在Qt对象中，然后按下*F1*将打开该类型的帮助。对于Qt对象上的方法和属性也是如此。在帮助文件中查看`QGuiApplication`和`QQmlApplicationEngine`是关于什么的。
- en: 'To edit the next file in our project—`qml.qrc`—you need to right-click and
    select the editor you want to open it with. The default is Resource Editor:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 要编辑项目中的下一个文件`qml.qrc`，您需要右键单击并选择要打开它的编辑器。默认是资源编辑器。
- en: '![](img/b6bd98fb-9f91-45f0-aa54-13a13af39bf2.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b6bd98fb-9f91-45f0-aa54-13a13af39bf2.png)'
- en: I am personally not a fan of this editor. I don’t feel it makes editing any
    easier than just writing plain text and isn’t particularly intuitive. Close this
    and instead choose `Open with > Plain Text Editor`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我个人不喜欢这个编辑器。我觉得它并没有比纯文本编辑更容易，也不是特别直观。关闭它，选择`以纯文本编辑器打开`。
- en: 'Add the following content:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 添加以下内容：
- en: '[PRE7]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Back in `main.cpp`, we asked Qt to load the `qrc:/main.qml` file. This essentially
    breaks down as “look for the file in a `qrc` file with a prefix of `/` and a name
    of `main.qml`”. Now here in our `qrc` file, we have created a `qresource` element
    with a prefix property of `/`. Inside this element, we have a collection of resources
    (albeit only one of them) that has the name `main.qml`. Think of `qrc` files as
    a portable filesystem. Note that the resource files are located relative to the
    `.qrc` file that references them. In this case, our `main.qml` file is in the
    same folder as our `qml.qrc` file. If it was in a subfolder called `views`, for
    example, then the line in `qml.qrc` would read this way:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 回到`main.cpp`，我们要求Qt加载`qrc:/main.qml`文件。这基本上可以解释为“在具有前缀`/`和名称`main.qml`的`qrc`文件中查找文件”。现在在我们的`qrc`文件中，我们创建了一个具有前缀属性`/`的`qresource`元素。在这个元素内部，我们有一个资源集合（尽管只有一个），它的名称是`main.qml`。将`qrc`文件视为一个可移植的文件系统。请注意，资源文件相对于引用它们的`.qrc`文件而言。在这种情况下，我们的`main.qml`文件与我们的`qml.qrc`文件在同一个文件夹中。例如，如果它在名为`views`的子文件夹中，那么`qml.qrc`中的行将是这样的：
- en: '[PRE8]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Similarly, the string in `main.cpp` would be `qrc:/views/main.qml`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，在`main.cpp`中的字符串将是`qrc:/views/main.qml`。
- en: 'Once those changes are saved, you will see our empty `main.qml` file appear
    as a child of the `qml.qrc` file in the Projects pane. Double-click on that file
    to edit it, and we will finish off our project:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 保存这些更改后，您将看到我们空的`main.qml`文件出现在项目窗格中`qml.qrc`文件的子文件夹中。双击该文件进行编辑，我们将完成我们的项目：
- en: '[PRE9]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We will cover QML in detail in [Chapter 2](ed8edd43-9e54-4b4c-907e-349764f26c55.xhtml),
    *Project Structure*, but in brief, this file represents the screen or view presented
    to the user when the application launches.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第2章](ed8edd43-9e54-4b4c-907e-349764f26c55.xhtml)中详细介绍QML，*项目结构*，但简而言之，这个文件代表了应用程序启动时向用户呈现的屏幕或视图。
- en: The import lines are similar to `#include` statements in C++, though rather
    than including a single header file, they import a whole module. In this case,
    we want the base QtQuick module to give us access to all the core QML types and
    also the QtQuick window module to give us access to the `Window` component. Modules
    are versioned and generally, you will want to use the latest version for the release
    of Qt you are using. The current version numbers can be found in the Qt documentation.
    Note that although you get code completion when entering the version numbers,
    the options presented sometimes don’t reflect the latest available versions.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 导入行类似于C++中的`#include`语句，不过不是包含单个头文件，而是导入整个模块。在这种情况下，我们希望使用基本的QtQuick模块来访问所有核心的QML类型，还有QtQuick窗口模块来访问`Window`组件。模块是有版本的，通常情况下，你会想要使用你所使用的Qt版本的最新版本。当前的版本号可以在Qt文档中找到。请注意，尽管在输入版本号时会有代码补全，但有时呈现的选项并不反映最新可用的版本。
- en: As its name suggests, the `Window` element gives us a top-level window, inside
    which all of our other content will be rendered. We give it a size of 1024 x 765
    pixels, a title of “scratchpad” and a background color of white represented as
    a hex RGB value.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 正如其名称所示，`Window`元素为我们提供了一个顶级窗口，在其中我们的所有其他内容将被呈现。我们给它一个大小为1024 x 765像素，一个标题为“scratchpad”，以及一个白色的背景颜色，用十六进制RGB值表示。
- en: Within that component (QML is a hierarchical markup language), we add a welcome
    message with the `Text` component. We center the text in the screen and set its
    font size and color, but other than that, we’re not concerned with fancy formatting
    or anything at this stage, so that’s as complicated as we’ll make it. Again, we’ll
    cover this in more detail later, so don’t worry if it seems a bit alien.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在该组件中（QML是一种分层标记语言），我们使用`Text`组件添加了一个欢迎消息。我们将文本居中显示在屏幕上，并设置了字体大小和颜色，但除此之外，在这个阶段我们不关心花哨的格式或其他任何东西，所以这就是我们会做的复杂程度。我们稍后会更详细地介绍这个，所以如果看起来有点陌生，不要担心。
- en: 'That’s it. To build and run our amazing new application, first select the Kit
    and Build configuration you want using the monitor icon at the bottom-left:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。要构建和运行我们令人惊叹的新应用程序，首先使用左下角的监视器图标选择您想要的工具包和构建配置：
- en: '![](img/75cffd4f-352a-47a0-acb8-cce893e02890.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/75cffd4f-352a-47a0-acb8-cce893e02890.png)'
- en: 'Next, right-click on the project name in the Projects pane and select Run qmake.
    When that has completed, Run the application using the green play icon:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在项目窗格中右键单击项目名称，然后选择运行qmake。完成后，使用绿色播放图标运行应用程序：
- en: '![](img/257dd773-1abf-41e5-96f5-53ecb8906aea.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/257dd773-1abf-41e5-96f5-53ecb8906aea.png)'
- en: Summary
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we downloaded, installed, and configured Qt. We’ve taken a
    whirlwind tour of the Qt Creator IDE, played with its options, and seen how to
    edit a variety of files with it. We’ve had a gentle introduction to qmake and
    seen how absurdly simple creating projects can be, demystifying things in the
    process. Finally, we built our debut project up from scratch (weak pun intended)
    and got the obligatory Hello World message on screen.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们下载、安装和配置了Qt。我们快速浏览了Qt Creator IDE，尝试了它的选项，并了解了如何使用它编辑各种文件。我们对qmake有了初步了解，并看到了创建项目是多么简单，从而使事情变得不再神秘。最后，我们从头开始构建了我们的处女作品（弱笑话打算），并在屏幕上得到了必不可少的“Hello
    World”消息。
- en: In [Chapter 2](ed8edd43-9e54-4b4c-907e-349764f26c55.xhtml), *Project Structure*, we
    will build on these basics and set up our main solution.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](ed8edd43-9e54-4b4c-907e-349764f26c55.xhtml) *项目结构*中，我们将在这些基础上建立，并设置我们的主要解决方案。
