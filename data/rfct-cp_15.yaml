- en: '15'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '15'
- en: Code Review
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码审查
- en: In the preceding chapters of this book, we have systematically explored a range
    of automated solutions designed to enhance the quality of our C++ code. These
    include the adoption of clear naming conventions, the utilization of modern C++
    features, the rigorous implementation of unit and end-to-end testing, the maintenance
    of clean commits and messages, and the effective use of debugging techniques such
    as git bisect, among others. Each of these practices serves as a vital component
    in our toolkit for writing robust, maintainable software.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的前几章中，我们已经系统地探索了一系列旨在提高我们C++代码质量的自动化解决方案。这包括采用清晰的命名约定、利用现代C++特性、严格实施单元和端到端测试、维护干净的提交和消息，以及有效使用调试技术，如git
    bisect等。这些实践中的每一项都是我们编写稳健、可维护软件工具箱中的关键组成部分。
- en: However, despite the substantial benefits conferred by these automated tools
    and methodologies, they are not infallible. They rely on correct and consistent
    implementation, and without diligent oversight, it’s all too easy for standards
    to slip and errors to creep into our codebase. This is where the critical role
    of code review comes into play. A human eye, capable of interpreting context and
    nuance, is essential in ensuring that all these automated practices are correctly
    and effectively applied.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，尽管这些自动化工具和方法提供了实质性的好处，但它们并非完美无缺。它们依赖于正确和一致的实施，并且如果没有勤勉的监督，标准很容易下滑，错误就会悄悄地进入我们的代码库。这就是代码审查的关键作用所在。一个能够理解上下文和细微差别的人类视角对于确保所有这些自动化实践被正确和有效地应用是必不可少的。
- en: In this chapter, we will delve deep into the practice of code review, an indispensable
    part of the development process that helps safeguard against the oversights that
    no machine can yet fully detect. We’ll discuss how code reviews not only prevent
    potential bugs and enhance code quality but also foster a collaborative culture
    of learning and accountability among developers. Through a comprehensive exploration
    of effective strategies and practical guidelines, we aim to equip you with the
    knowledge to implement robust code reviews that significantly contribute to the
    success and reliability of your C++ projects.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入探讨代码审查的实践，这是开发过程中不可或缺的一部分，有助于防止任何机器都无法完全检测到的疏忽。我们将讨论代码审查如何不仅预防潜在的bug和提升代码质量，而且培养开发人员之间的学习与合作文化。通过全面探索有效的策略和实际指南，我们旨在为您提供实施稳健代码审查的知识，这对您C++项目的成功和可靠性有重大贡献。
- en: What is a code review and why is it needed?
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是代码审查以及为什么需要它？
- en: The practice of code review, as we understand it today, owes its origins to
    Michael Fagan, who developed the formal process of software inspection in the
    mid-1970s. At that time, software engineering was often a solitary pursuit, with
    individual developers acting as lone cowboys who were responsible for writing,
    testing, and reviewing their own code. This method led to inconsistent standards
    across projects and a higher incidence of overlooked errors, as individual biases
    and blind spots went unchecked.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们今天所理解的代码审查实践起源于Michael Fagan，他在20世纪70年代中期开发了软件检查的正式流程。当时，软件工程通常是一种独立的活动，个人开发者作为孤独的牛仔，负责编写、测试和审查自己的代码。这种方法导致了项目之间标准的不一致，以及被忽视的错误发生率更高，因为个人的偏见和盲点没有得到检查。
- en: Recognizing the limitations of this solitary approach, Fagan introduced a structured
    method to inspect software systematically. His process was aimed not only at finding
    errors but also at examining the overall design and implementation of software.
    This shift marked a significant evolution in software development, emphasizing
    collaboration, meticulous examination, and shared responsibility. By involving
    multiple reviewers, Fagan’s method brought diverse perspectives to the evaluation
    process, enhancing the scrutiny and overall quality of the software.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 认识到这种独立方法的局限性，Fagan引入了一种结构化的方法来系统地检查软件。他的流程不仅旨在发现错误，还旨在检查软件的整体设计和实现。这种转变标志着软件开发的一个重大进步，强调了协作、细致的审查和共同的责任。通过涉及多个审查者，Fagan的方法为评估过程带来了不同的视角，增强了审查的细致程度和软件的整体质量。
- en: Benefits of code reviews
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码审查的好处
- en: Code reviews significantly enhance the overall quality of code by ensuring that
    the software’s design is consistent with the project’s architectural standards
    and the best practices of C++. These reviews are crucial for enforcing coding
    standards and conventions, thereby fostering a codebase that is more uniform and
    easier to comprehend for both new and existing team members. Moreover, they aid
    in maintaining high levels of understandability by facilitating discussions about
    complex sections of the code and clarifying the rationale behind specific approaches.
    For instance, consider a scenario where a developer employs unconventional loop
    structures that, although functional, are challenging to understand and maintain.
    During a code review, these issues can be brought to light, and a suggestion to
    refactor the code using standard STL algorithms might be made. This not only simplifies
    the code but also ensures alignment with modern C++ practices, enhancing readability
    and maintainability.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 代码审查通过确保软件的设计与项目的架构标准和C++的最佳实践保持一致，显著提高了代码的整体质量。这些审查对于强制执行编码标准和惯例至关重要，从而培养出一个对新老团队成员来说都更加统一且易于理解的代码库。此外，它们通过促进对代码复杂部分的讨论和阐明特定方法背后的理由，有助于保持代码的高可理解性。例如，考虑一个开发者使用了虽然功能正常但难以理解和维护的非传统循环结构的情况。在代码审查过程中，这些问题可以被揭露，并可能提出使用标准STL算法重构代码的建议。这不仅简化了代码，还确保了与现代C++实践的兼容性，提高了可读性和可维护性。
- en: Peer reviews are one of the most effective ways to catch bugs early before they
    make it into production. It is always better to have another pair of eyes on the
    code to look for errors, whether they are logical mistakes or incorrect usage
    of the language. Reviewers can identify logic errors, off-by-one errors, memory
    leaks, and other common C++ pitfalls that might not be immediately apparent to
    the original author. Moreover, conducting a thorough review of test cases in unit
    tests during the code review process is equally vital. This practice ensures that
    the tests cover sufficient scenarios and catch potential bugs at an early stage,
    thereby enhancing the reliability and robustness of the software. For example,
    a developer might forget to free the memory allocated during a function, potentially
    causing a memory leak. A peer reviewing this code might spot this oversight and
    suggest the use of smart pointers to automatically manage the memory lifecycle,
    effectively preventing such issues before the software progresses further in the
    development cycle.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 同行评审是在错误进入生产之前捕捉错误的最有效方法之一。总是有另一双眼睛检查代码以寻找错误更好，无论是逻辑错误还是语言使用不当。审阅者可以识别逻辑错误、边界错误、内存泄漏和其他可能对原始作者不是立即明显的常见C++陷阱。此外，在代码审查过程中对单元测试中的测试用例进行彻底审查同样至关重要。这种做法确保测试覆盖了足够的场景，并在早期阶段捕捉到潜在的错误，从而提高了软件的可靠性和健壮性。例如，开发者可能忘记释放函数中分配的内存，这可能导致内存泄漏。审阅此代码的同行可能会注意到这一疏忽，并建议使用智能指针自动管理内存生命周期，从而在软件进一步开发周期之前有效预防此类问题。
- en: Reviews are invaluable as an educational tool, benefiting both the authors and
    the reviewers by disseminating domain knowledge and enhancing familiarity with
    the codebase throughout the team. This aspect of knowledge transfer is crucial
    in ensuring that all team members are aligned and capable of contributing effectively.
    For instance, a junior developer might initially use raw pointers to manage resources,
    which is a common practice yet prone to errors such as memory leaks and pointer-related
    bugs. During a code review, a more experienced developer can guide the junior
    by introducing them to smart pointers. By explaining the advantages of smart pointers,
    such as automatic memory management and improved safety, the senior developer
    not only helps correct immediate issues but also aids in the junior developer’s
    growth and understanding of modern C++ practices. Additionally, code reviews offer
    a unique opportunity for reviewers to deepen their understanding of specific features
    within the project. As they evaluate the work of their peers, reviewers gain insights
    into new functionalities and complex areas of the application. This enhanced understanding
    equips them with the knowledge necessary to effectively address future bugs or
    implement enhancements in those specific areas. Essentially, through the process
    of reviewing others’ code, reviewers not only contribute to the immediate improvement
    of the project but also prepare themselves to maintain and expand on the project’s
    capabilities in the future.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 代码审查作为一项教育工具，对作者和审查者都有益，因为它在团队中传播领域知识，并增强对代码库的熟悉度。这一知识转移方面对于确保所有团队成员保持一致并能够有效贡献至关重要。例如，一个初级开发者最初可能会使用原始指针来管理资源，这是一种常见的做法，但容易出错，如内存泄漏和指针相关错误。在代码审查过程中，经验更丰富的开发者可以通过介绍智能指针来指导初级开发者。通过解释智能指针的优势，如自动内存管理和改进的安全性，资深开发者不仅帮助纠正了即时问题，还帮助初级开发者成长，并加深了对现代C++实践的理解。此外，代码审查为审查者提供了一个独特的机会，以深化对项目特定功能的理解。当他们评估同行的作品时，审查者可以深入了解新的功能和应用复杂区域。这种增强的理解使他们具备了解决未来错误或在这些特定区域实施改进所需的知识。本质上，通过审查他人的代码，审查者不仅为项目的即时改进做出了贡献，还为自己在将来维护和扩展项目功能做好了准备。
- en: Mutual responsibility is a key benefit of conducting regular code reviews within
    a team. As team members consistently examine each other’s work, they cultivate
    a strong sense of shared responsibility and accountability. This collective oversight
    encourages every member to maintain high standards and thoroughness in their coding
    efforts. For example, the awareness that their peers will scrutinize their code
    motivates developers to initially write cleaner and more efficient code. This
    proactive approach to coding quality reduces the likelihood of future extensive
    rewrites, streamlining the development process and enhancing overall productivity.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 互负责任是团队内定期进行代码审查的关键好处。随着团队成员持续审查彼此的工作，他们培养了一种强烈的共同责任感和责任感。这种集体监督鼓励每个成员在编码工作中保持高标准和彻底性。例如，意识到他们的同行将审查他们的代码，会激励开发者最初编写更干净、更高效的代码。这种对编码质量的主动方法减少了未来大规模重写的可能性，简化了开发过程，并提高了整体生产力。
- en: Code reviews frequently catalyze discussions that yield more efficient, elegant,
    or simpler solutions than those initially implemented. This aspect of code reviews
    is particularly valuable as it taps into the collective expertise and experience
    of the team to enhance the overall software design. For instance, consider a developer
    who implements a function to sort a vector inefficiently. During the code review,
    another team member might notice the inefficiency and suggest a more effective
    sorting algorithm or recommend leveraging existing utilities from the standard
    library. Such suggestions not only improve performance but also simplify the code,
    reducing complexity and potential for errors, thus making the software more robust
    and maintainable.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 代码审查经常催化出比最初实现更高效、更优雅或更简单的解决方案的讨论。代码审查的这一方面尤其有价值，因为它利用了团队的集体专业知识和经验，从而提升了整体软件设计。例如，考虑一个开发者以低效的方式实现了一个排序向量的函数。在代码审查过程中，另一位团队成员可能会注意到这种低效，并提出一个更有效的排序算法，或者建议利用标准库中的现有工具。这样的建议不仅提高了性能，还简化了代码，减少了复杂性和潜在的错误，从而使软件更加健壮和易于维护。
- en: Preparing for code reviews
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备代码审查
- en: Before delving into the collaborative process of code reviews, teams must prepare
    adequately to ensure that these reviews are as effective and efficient as possible.
    This preparation not only sets the stage for a smoother review process but also
    minimizes the time spent on avoidable issues, allowing teams to focus on more
    substantive and impactful discussions.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入到代码审查的协作过程之前，团队必须充分准备，以确保这些审查尽可能有效和高效。这种准备不仅为更顺畅的审查过程奠定了基础，而且最大限度地减少了在可避免问题上的时间消耗，使团队能够专注于更实质性和有影响力的讨论。
- en: Clear guidelines
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 清晰的指南
- en: The foundation of an effective code review process is the establishment and
    documentation of clear, specific coding guidelines tailored to C++. These guidelines
    should cover various aspects of coding, including style, practices, and the use
    of language-specific features. By setting these standards, teams create a common
    language that reduces ambiguity and ensures consistency across the codebase.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 有效的代码审查过程的基础是建立和记录针对 C++ 的明确、具体的编码指南。这些指南应涵盖编码的各个方面，包括风格、实践和语言特定功能的用法。通过设定这些标准，团队创建了一种共同语言，减少了歧义并确保了代码库的一致性。
- en: Incorporating as much automation as possible into these guidelines can significantly
    streamline the review process. Tools such as formatters ensure a consistent coding
    style, while static analysis tools can automatically detect potential errors or
    code smells before human reviewers ever look at the code. Additionally, ensuring
    that all code submissions are accompanied by passing unit tests and, where applicable,
    end-to-end tests can prevent many common software defects from ever reaching the
    review stage. This level of automation not only saves time for reviewers but also
    reduces the potential for disputes over subjective preferences in coding style
    or minor oversights.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 将尽可能多的自动化融入这些指南可以显著简化审查过程。例如，格式化工具确保一致的编码风格，而静态分析工具可以在人类审查员查看代码之前自动检测潜在的错误或代码异味。此外，确保所有代码提交都附有通过单元测试，以及适用时端到端测试，可以防止许多常见的软件缺陷进入审查阶段。这种自动化水平不仅为审查员节省了时间，还减少了在编码风格或微小疏忽方面的主观偏好争议的可能性。
- en: Self-review
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自我审查
- en: Another crucial aspect of preparing for code reviews is the practice of self-review.
    Before submitting their code for peer review, developers should thoroughly examine
    their own work. This is where tools such as linters and static analysis come into
    play, helping to catch common issues that can be easily overlooked.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 准备代码审查的另一个关键方面是进行自我审查。在提交代码供同行审查之前，开发者应彻底检查自己的工作。这就是工具如 linters 和静态分析发挥作用的地方，帮助捕捉容易被忽视的常见问题。
- en: 'Self-review encourages developers to take responsibility for their code’s initial
    quality, reducing the burden on peer reviewers and fostering a culture of accountability.
    It also allows developers to reflect on their work and consider potential improvements
    before involving others, which can lead to higher-quality submissions and more
    productive review sessions. A developer should methodically evaluate their work
    by asking the following questions before submitting their code for peer review.
    This reflective practice helps to refine the code, align it more closely with
    project goals, and prepare the developer for any subsequent discussions during
    the code review process:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 自我审查鼓励开发者对其代码的初始质量负责，减轻了同行审查者的负担，并培养了一种责任感文化。它还允许开发者反思自己的工作，在涉及他人之前考虑潜在的改进，这可能导致提交更高质量的代码和更高效的审查会议。在提交代码供同行审查之前，开发者应通过以下问题系统地评估自己的工作。这种反思实践有助于完善代码，使其更接近项目目标，并为代码审查过程中的任何后续讨论做好准备：
- en: '**Did I need to write code? (Is my change rational?)** Before adding new code,
    consider whether the change is necessary. Evaluate whether the functionality is
    essential and justify the addition, keeping in mind the potential for increasing
    complexity in the codebase.'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**我需要写代码吗？（我的改动合理吗？）** 在添加新代码之前，考虑一下这个改动是否必要。评估功能是否关键，并证明添加的合理性，同时考虑到代码库中可能增加的复杂性。'
- en: '**What could I do to avoid writing code? (Is there a third-party library or
    tool that I can utilize?)** Always look for opportunities to leverage existing
    solutions. Using well-tested third-party libraries or tools can often achieve
    the desired functionality without adding new code, thereby reducing potential
    bugs and maintenance overhead.'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**我怎样才能避免编写代码？（是否有我可以利用的第三方库或工具？）** 总是寻找利用现有解决方案的机会。使用经过良好测试的第三方库或工具通常可以实现所需的功能，而无需添加新代码，从而减少潜在的bug和维护开销。'
- en: '**Is my code readable?** Assess the clarity of your code. Good code should
    be self-explanatory to other engineers who might not be familiar with it. Use
    meaningful variable names, maintain a clean structure, and include comments where
    necessary to explain complex logic.'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**我的代码可读吗？** 评估你代码的清晰度。好的代码应该对可能不熟悉它的其他工程师来说是自我解释的。使用有意义的变量名，保持整洁的结构，并在必要时包含注释来解释复杂的逻辑。'
- en: '**Do other engineers need to understand the logic of my code?** Consider whether
    your code can be understood independently by other developers. It is crucial that
    others can follow the logic without needing extensive explanations, which facilitates
    easier maintenance and integration.'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**其他工程师需要理解我的代码逻辑吗？** 考虑你的代码是否可以被其他开发者独立理解。其他人能够在不需要广泛解释的情况下理解逻辑至关重要，这有助于简化维护和集成。'
- en: '**Does my code look similar to the rest of the codebase?** Ensure that your
    code adheres to the established coding styles and patterns in the project. Consistency
    across the codebase helps maintain uniformity, making the software easier to read
    and less prone to errors during integration.'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**我的代码看起来是否与其他代码库相似？** 确保你的代码遵循项目中建立的编码风格和模式。代码库的一致性有助于保持统一性，使软件更容易阅读，并在集成过程中减少错误。'
- en: '**Is my code efficient?** Evaluate the efficiency of your code. It’s important
    to consider resource usage, such as CPU time and memory, especially in performance-critical
    applications. Review your algorithms and data structures to ensure they are optimal
    for the task.'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**我的代码效率如何？** 评估你代码的效率。考虑资源使用，如CPU时间和内存，特别是在性能关键的应用程序中非常重要。审查你的算法和数据结构，以确保它们对任务来说是最佳的。'
- en: '**Do my tests cover edge cases?** Confirm that your tests are comprehensive,
    particularly checking that they cover edge cases. Robust tests are crucial for
    ensuring the resilience and reliability of your code under unusual or unexpected
    conditions.'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**我的测试是否覆盖了边缘情况？** 确认你的测试是全面的，特别是检查它们是否覆盖了边缘情况。健壮的测试对于确保代码在异常或意外条件下的弹性和可靠性至关重要。'
- en: By answering these questions during the self-review process, developers not
    only enhance the quality of the code they write but also streamline the peer review
    process. This thoughtful approach minimizes the likelihood of significant revisions
    during peer reviews and increases the overall effectiveness of the code review
    cycle. This preparation can lead to more informed and constructive discussions
    during code reviews, as developers are already aware of and have addressed many
    potential concerns.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在自我审查过程中回答这些问题，开发者不仅提高了他们所编写代码的质量，还简化了同行评审过程。这种深思熟虑的方法最小化了在同行评审期间进行重大修订的可能性，并提高了代码审查周期的整体有效性。这种准备可以在代码审查期间导致更明智和建设性的讨论，因为开发者已经意识到并解决了许多潜在的问题。
- en: How to pass a code review
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在编写代码之前与审阅者和代码所有者讨论大功能
- en: Successfully navigating the code review process is crucial for maintaining the
    quality of the software and fostering a positive and productive team environment.
    Here, we outline essential strategies for developers aiming to ensure their code
    passes a review smoothly and effectively.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 成功地导航代码审查过程对于维护软件质量以及培养积极和富有成效的团队环境至关重要。在这里，我们概述了旨在确保他们的代码顺利有效地通过审查的开发者所必需的基本策略。
- en: Discuss big features with reviewers and code owners before writing code
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在编写代码之前与审阅者和代码所有者讨论大功能
- en: Before embarking on the development of significant features, it is advisable
    to consult with code reviewers and owners. This preliminary discussion should
    focus on the proposed design, implementation approach, and how the feature fits
    into the existing codebase. Engaging in this dialogue early helps align expectations,
    reduces the likelihood of significant revisions later, and ensures that the feature
    integrates seamlessly with other parts of the project.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在着手开发重大功能之前，建议与代码评审者和所有者进行咨询。这次初步讨论应集中在拟议的设计、实施方法和该功能如何融入现有的代码库。尽早参与这种对话有助于统一预期，减少后期重大修订的可能性，并确保该功能能够与其他项目部分无缝集成。
- en: Go over your code before publishing it
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在发布代码之前仔细检查
- en: Perform a thorough review of your own code before submitting it for peer review.
    This self-assessment should cover the logic, style, and adherence to the project’s
    coding standards. Look for any areas of improvement or potential simplification.
    Ensuring that your submission is as refined as possible not only facilitates a
    smoother review process but also demonstrates your diligence and respect for the
    reviewers’ time.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在提交代码供同行评审之前，请彻底审查自己的代码。这种自我评估应涵盖逻辑、风格以及对项目编码标准的遵守情况。寻找任何可以改进或简化的区域。确保你的提交尽可能完善，这不仅有助于使评审过程更加顺畅，而且也展示了你的勤奋和对评审者时间的尊重。
- en: Make sure the code is compliant with the code convention
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 确保代码符合代码约定
- en: Adherence to established code conventions is critical. These conventions, which
    cover everything from naming schemes to layout and procedural practices, ensure
    consistency throughout the codebase. Consistency leads to code that is easier
    to read, understand, and maintain. Before submitting for review, check that your
    code strictly follows these guidelines to avoid any unnecessary back-and-forth
    during the review process.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 遵守既定的代码约定至关重要。这些约定涵盖了从命名方案到布局和程序实践的各个方面，确保代码库的一致性。一致性使得代码更容易阅读、理解和维护。在提交评审之前，请确保你的代码严格遵循这些指南，以避免在评审过程中出现不必要的来回沟通。
- en: Code review is a conversation, not an order
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码评审是一种对话，而非命令
- en: It is essential to approach code review as a dialogue rather than a directive.
    Reviewers typically provide comments and suggestions that are meant to initiate
    discussion rather than act as unilateral commands. Especially for junior developers,
    it is important to understand that you are encouraged to engage in these discussions.
    If a suggestion or correction is unclear, seek clarification rather than silently
    making changes. This interaction not only aids your professional development but
    also enhances the collaborative spirit of the review process.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 代码评审应被视为一种对话而非指令。评审者通常提供旨在引发讨论而非单方面命令的评论和建议。特别是对于初级开发者来说，理解你被鼓励参与这些讨论非常重要。如果建议或更正不明确，请寻求澄清，而不是默默地进行更改。这种互动不仅有助于你的职业发展，而且增强了评审过程的协作精神。
- en: Remember – your code is not you
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 记住——你的代码不是你本人
- en: A vital lesson I learned from my former boss, Vladi Lyga, is that “*Your code
    is not you*.” Developers often invest significant effort and pride in their code,
    and it can be challenging to receive criticism. However, it’s crucial to remember
    that feedback on your code is not a personal critique of you as a developer or
    individual. The aim is to improve the project and ensure the highest quality outcome,
    and this sometimes requires constructive criticism. Detaching their personal identity
    from their work allows developers to approach feedback more objectively and use
    it as a growth opportunity.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我从前老板Vladi Lyga那里学到的宝贵教训是“*你的代码不是你本人*。”开发者往往在他们的代码上投入了大量的努力和自豪感，接受批评可能具有挑战性。然而，记住，对你代码的反馈并不是对你作为开发者或个人的个人批评。目标是改进项目并确保最高质量的结果，有时这需要建设性的批评。将个人身份与其工作分离，使开发者能够更客观地对待反馈，并将其作为成长的机会。
- en: By preparing thoroughly, engaging in open dialogue, and embracing a constructive
    perspective towards feedback, developers can effectively navigate the code review
    process. These practices not only enhance the quality of the code but also contribute
    to a more supportive and collaborative team environment.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 通过充分准备、参与开放对话并接受建设性的反馈视角，开发者可以有效地应对代码评审过程。这些做法不仅提高了代码质量，而且有助于营造一个更加支持和协作的团队环境。
- en: How to efficiently dispute during a code review
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何在代码评审中高效地提出异议
- en: Disagreements are a natural part of the code review process. Different perspectives
    can lead to conflicts over approaches, implementations, or interpretations of
    best practices. Handling these disputes efficiently is crucial to maintaining
    a productive review process and a healthy team environment. Here are key strategies
    to manage disagreements effectively during code reviews.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 争议是代码审查过程中的自然部分。不同的观点可能导致在方法、实现或最佳实践的解释上产生冲突。有效地处理这些争议对于保持高效的审查过程和健康的团队环境至关重要。以下是一些在代码审查期间有效管理争议的关键策略。
- en: Clear justification for changes
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变更的明确理由
- en: It is imperative for reviewers to not only point out areas needing improvement
    but also to clearly explain why changes are necessary. When suggesting a modification,
    a reviewer should provide a rationale that is anchored in best practices, performance
    considerations, or design principles relevant to the project. Including links
    to coding standards, articles, documentation, or other authoritative resources
    can greatly enhance the clarity and persuasiveness of the arguments. This approach
    helps the reviewee understand the reasoning behind the feedback, making it more
    likely for them to see the value of the suggested changes.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 审阅者不仅需要指出需要改进的领域，而且还需要清楚地解释为什么需要变更。在建议修改时，审阅者应提供基于最佳实践、性能考虑或与项目相关的原则的合理依据。包括对编码标准、文章、文档或其他权威资源的链接可以大大增强论点的清晰度和说服力。这种方法有助于被审阅者理解反馈背后的推理，使他们更有可能看到建议变更的价值。
- en: Reciprocal explanation from reviewees
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 被审阅者的相互解释
- en: Similarly, if a reviewee disagrees with a comment or suggestion, they should
    also articulate their reasoning clearly. This explanation should detail why their
    approach or solution was chosen, supported by relevant technical justifications,
    documentation, or precedents within the project. By providing a well-reasoned
    argument, the reviewee fosters a more informed discussion, which can lead to a
    better understanding or an improved solution.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果被审阅者不同意某个评论或建议，他们也应该清楚地阐述自己的理由。这种解释应详细说明为什么选择了他们的方法或解决方案，并辅以相关的技术依据、文档或项目内的先例。通过提供合理的论点，被审阅者可以促进更明智的讨论，这可能导致更好的理解或改进的解决方案。
- en: Direct communication
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 直接沟通
- en: When a dispute involves more than a couple of comments back and forth, it’s
    advisable to shift the conversation from written comments to a direct dialogue.
    This can be through a video call, phone call, or face-to-face meeting, depending
    on what’s feasible. Direct communication can prevent the kind of miscommunication
    and escalation often seen in text-based discussions, which can quickly become
    unproductive and contentious, much like lengthy threads seen on platforms such
    as Reddit.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当争议涉及多轮来回评论时，建议将对话从书面评论转移到直接对话。这可以通过视频通话、电话或面对面会议来实现，具体取决于可行性。直接沟通可以防止在基于文本的讨论中常见的误解和升级，这些讨论可能会迅速变得无效率和有争议，就像在Reddit等平台上看到的漫长线程一样。
- en: Involving additional perspectives
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引入额外的观点
- en: If a resolution cannot be reached between the reviewer and the reviewee, it
    can be beneficial to involve additional perspectives. Bringing in a third engineer,
    a product manager, a QA specialist, or even an architect can provide new insights
    and help mediate the disagreement. These parties may offer alternative solutions,
    compromise approaches, or a decision based on broader project priorities and impacts.
    Their input can be crucial in breaking deadlocks and ensuring that the decision
    is well rounded and aligns with overall project goals.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果审阅者和被审阅者之间无法达成协议，引入额外的观点可能有益。引入第三位工程师、产品经理、质量保证专家或甚至架构师可以提供新的见解并帮助调解分歧。这些方可能提供替代方案、妥协方法或基于更广泛的项目优先级和影响的决策。他们的意见在打破僵局和确保决策全面并与整体项目目标一致方面可能至关重要。
- en: Efficient dispute resolution during code reviews is vital for keeping the review
    process constructive and focused on enhancing the quality of the codebase. By
    explaining the rationale behind feedback, encouraging direct communication, and
    involving additional perspectives when necessary, teams can resolve disagreements
    effectively and maintain a positive, collaborative environment. This approach
    not only resolves conflicts but also strengthens the team’s ability to work through
    future challenges collaboratively.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码审查期间进行有效的争议解决对于保持审查过程的建设性和专注于提高代码库的质量至关重要。通过解释反馈背后的理由，鼓励直接沟通，并在必要时涉及额外的观点，团队可以有效地解决分歧，并保持积极、协作的环境。这种方法不仅解决了冲突，还增强了团队共同应对未来挑战的能力。
- en: How to be a good reviewer
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何成为一名优秀的审稿人
- en: The role of a reviewer in the code review process is crucial not just for ensuring
    the technical quality of code but also for maintaining a constructive, respectful,
    and educational environment. The following are some key practices that define
    a good reviewer.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码审查过程中，审稿人的角色至关重要，这不仅是为了确保代码的技术质量，也是为了维护一个建设性、尊重性和教育性的环境。以下是一些定义优秀审稿人的关键实践。
- en: Initiate the conversation
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始对话
- en: Start the review process by initiating a friendly conversation with the reviewee.
    This can be a brief message acknowledging the effort they have put into the **pull
    request** (**PR**) and setting a positive tone for the upcoming review. A cordial
    start helps to build rapport with the reviewee, making the subsequent exchange
    more open and collaborative.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 通过与被审稿人进行友好的对话开始审查过程。这可以是一条简短的消息，承认他们为**拉取请求**（**PR**）所付出的努力，并为即将到来的审查设定积极的基调。友好的开始有助于与被审稿人建立联系，使随后的交流更加开放和协作。
- en: Maintain politeness and respect
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保持礼貌和尊重
- en: Always be polite and respectful in your comments. Remember that the reviewee
    has invested significant effort into their code. Critiques should be constructive,
    focusing on the code and its improvement rather than on the individual. Phrasing
    feedback in the form of questions or suggestions rather than directives can also
    help to keep the tone positive and encouraging.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的评论中始终保持礼貌和尊重。记住，被审稿人已经投入了大量努力到他们的代码中。批评应该是建设性的，专注于代码及其改进，而不是个人。以问题或建议的形式表达反馈，而不是指令，也有助于保持积极的语气和鼓励的基调。
- en: Review manageable chunks
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 审查可管理的部分
- en: Limit the amount of code you review at one time to about 400 lines, if possible.
    Reviewing large chunks of code can lead to fatigue, which increases the likelihood
    of missing both minor and critical issues. Breaking down reviews into manageable
    parts not only enhances the effectiveness of the review process but also helps
    to maintain a high level of attention to detail.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果可能，一次审查的代码量限制在大约400行。审查大量代码可能导致疲劳，从而增加遗漏次要和关键问题的可能性。将审查分解为可管理的部分不仅提高了审查过程的有效性，还有助于保持对细节的高度关注。
- en: Avoid personal bias
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 避免个人偏见
- en: 'While reviewing, it’s important to distinguish between code that must be changed
    for objective reasons—such as syntax errors, logical errors, or deviations from
    project standards—and changes that reflect personal coding preferences. For example,
    let us consider the following code snippet:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在审查过程中，区分必须因客观原因更改的代码——例如语法错误、逻辑错误或偏离项目标准——以及反映个人编码偏好的更改非常重要。例如，让我们考虑以下代码片段：
- en: '[PRE0]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Some engineers might prefer to rewrite this function the following way:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一些工程师可能更喜欢以下方式重写这个函数：
- en: '[PRE1]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: While the second version is a bit more concise, the first version is equally
    valid and adheres to the project’s coding standards. If you feel strongly about
    a personal preference that could enhance the code, clearly label it as such. Indicate
    that it is a suggestion based on personal preference and not a mandatory change.
    This clarity helps the reviewee understand which changes are essential for compliance
    with project standards and which are optional enhancements.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然第二个版本更加简洁，但第一个版本同样有效，并且符合项目的编码标准。如果你对可能增强代码的个人偏好有强烈的看法，请明确将其标记为个人偏好。指出这是一个基于个人偏好的建议，而不是强制性的更改。这种清晰度有助于被审稿人理解哪些更改对于符合项目标准是必要的，哪些是可选的改进。
- en: Focus on understandability
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 专注于可理解性
- en: One of the most critical questions to ask yourself as a reviewer is whether
    the code is understandable enough that you, or someone else on the team, could
    fix it in the middle of the night. This question cuts to the heart of code maintainability.
    If the answer is no, it’s important to discuss ways to improve the code’s clarity
    and simplicity. Code that is easily understood is easier to maintain and debug,
    which is crucial for long-term project health.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 作为审稿人，你最需要问自己的关键问题是代码是否足够易懂，以至于你或团队中的其他人可以在半夜修复它。这个问题直击代码可维护性的核心。如果答案是肯定的，那么讨论提高代码清晰度和简洁性的方法就很重要了。易于理解的代码更容易维护和调试，这对于长期项目健康至关重要。
- en: Being a good reviewer involves much more than just identifying flaws in code.
    It requires initiating and maintaining a supportive dialogue, respecting and acknowledging
    the efforts of your peers, managing your review workload effectively, and providing
    clear, helpful feedback that prioritizes the project’s standards over personal
    preferences. By fostering a positive and productive review environment, you contribute
    not only to the quality of the code but also to the growth and cohesion of your
    development team.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 成为一名优秀的审稿人远不止于仅仅识别代码中的缺陷。它需要发起并维持支持性的对话，尊重并认可同事的努力，有效地管理审稿工作量，并提供清晰、有帮助的反馈，将项目标准置于个人偏好之上。通过营造积极和富有成效的审稿环境，你不仅有助于提高代码质量，还有助于团队的发展和凝聚力。
- en: Summary
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter delved into the essential practices and principles of conducting
    effective code reviews, a critical component of the software development process
    in C++. Through a series of structured sub-chapters, we have explored various
    aspects of the code review process that collectively ensure high-quality, maintainable
    code while fostering a positive team environment.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 本章深入探讨了进行有效代码审查的基本实践和原则，这是C++软件开发过程中的一个关键组成部分。通过一系列结构化的子章节，我们探讨了代码审查过程的各个方面，共同确保高质量、可维护的代码，同时营造积极的团队环境。
- en: We began by discussing the *origins of code reviews*, introduced in the 1970s
    by Michael Fagan, highlighting its transformational role in moving software development
    from an isolated task to a collaborative effort that enhances code quality and
    reduces bugs.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先讨论了*代码审查的起源*，这是由迈克尔·法根在20世纪70年代引入的，强调了它将软件开发从孤立的任务转变为增强代码质量和减少错误协作努力的变革性作用。
- en: In the *Preparing for code reviews* section, we emphasized the importance of
    clear guidelines and self-review. Developers are encouraged to use tools such
    as linters and static analyzers to refine their code before it undergoes peer
    review, ensuring adherence to coding standards and reducing the iterative cycle
    of code revisions.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在*准备代码审查*部分，我们强调了明确指南和自我审查的重要性。我们鼓励开发者使用诸如代码检查器和静态分析工具等工具来在同行审查之前完善他们的代码，确保遵守编码标准并减少代码修订的迭代周期。
- en: The *How to pass a code review* section outlined strategies for developers to
    ensure their code is well received during reviews. This includes discussing significant
    changes before coding, understanding code reviews as a constructive dialogue,
    and remembering to detach personal identity from the code to view feedback objectively.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在*如何通过代码审查*部分，我们概述了开发者确保他们的代码在审查中受到良好接受的战略。这包括在编码前讨论重大变更，将代码审查视为建设性对话，并记住在审查反馈时将个人身份与代码分离，以客观地看待反馈。
- en: The *How to efficiently dispute during a code review* section addressed handling
    disagreements productively. We discussed the importance of clear justifications
    for changes, using direct communication to avoid misinterpretations, and involving
    additional perspectives when necessary to resolve conflicts and reach a consensus.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在*如何高效地在代码审查中提出异议*部分，我们讨论了如何有效地处理分歧。我们强调了明确变更理由的重要性，使用直接沟通以避免误解，并在必要时涉及额外观点以解决冲突并达成共识。
- en: Finally, in the *How to be a good reviewer* section, we provided guidance on
    initiating reviews with a positive interaction, reviewing code in manageable portions,
    avoiding bias from personal preferences, and assessing code for its clarity and
    ease of understanding in critical situations.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在*如何成为一名优秀的审稿人*部分，我们提供了关于如何以积极互动开始审稿、分块审阅代码、避免个人偏好的影响，以及在关键时刻评估代码的清晰度和易于理解性的指导。
- en: Throughout this chapter, the underlying theme has been that code reviews are
    not just about critiquing code but about building a supportive community of developers
    who share knowledge, improve continuously, and aim for excellence in their coding
    practices. The goal is to enhance both the technical quality of the software and
    the professional development of the team members involved. By adhering to these
    best practices, teams can achieve more robust, efficient, and error-free code,
    contributing significantly to the success of their C++ projects.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的整个内容中，其核心主题一直是代码审查并不仅仅是关于批评代码，而是关于建立一个支持性的开发者社区，这个社区共享知识、持续改进，并致力于在编码实践中追求卓越。目标是提升软件的技术质量以及参与团队成员的专业发展。通过遵循这些最佳实践，团队可以创造出更加健壮、高效且无错误的代码，这对他们C++项目的成功贡献显著。
