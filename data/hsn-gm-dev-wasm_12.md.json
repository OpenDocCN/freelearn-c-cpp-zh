["```cpp\n#include <SDL2/SDL.h>\n#include <emscripten.h>\n#include <stdio.h>\n#include <stdbool.h>\n\n#define ENEMY_LASER \"/audio/enemy-laser.wav\"\n#define PLAYER_LASER \"/audio/player-laser.wav\"\n#define LARGE_EXPLOSION \"/audio/large-explosion.wav\"\n#define SMALL_EXPLOSION \"/audio/small-explosion.wav\"\n#define HIT \"/audio/hit.wav\"\n\nSDL_AudioDeviceID device_id;\nSDL_Window *window;\nSDL_Renderer *renderer;\nSDL_Event event;\n\nstruct audio_clip {\n    char file_name[100];\n    SDL_AudioSpec spec;\n    Uint32 len;\n    Uint8 *buf;\n} enemy_laser_snd, player_laser_snd, small_explosion_snd, large_explosion_snd, hit_snd;\n\nvoid play_audio( struct audio_clip* clip ) {\n    int success = SDL_QueueAudio(device_id, clip->buf, clip->len);\n    if( success < 0 ) {\n        printf(\"SDL_QueueAudio %s failed: %s\\n\", clip->file_name, \n        SDL_GetError());\n    }\n}\n\nvoid init_audio( char* file_name, struct audio_clip* clip ) {\n    strcpy( clip->file_name, file_name );\n\n    if( SDL_LoadWAV(file_name, &(clip->spec), &(clip->buf), &(clip->len)) \n    == NULL ) {\n        printf(\"Failed to load wave file: %s\\n\", SDL_GetError());\n    }\n}\n\nvoid input_loop() {\n    if( SDL_PollEvent( &event ) ){\n        if( event.type == SDL_KEYUP ) {\n            switch( event.key.keysym.sym ){\n                case SDLK_1:\n                    printf(\"one key release\\n\");\n                    play_audio(&enemy_laser_snd);\n                    break;\n                case SDLK_2:\n                    printf(\"two key release\\n\");\n                    play_audio(&player_laser_snd);\n                    break;\n                case SDLK_3:\n                    printf(\"three key release\\n\");\n                    play_audio(&small_explosion_snd);\n                    break;\n                case SDLK_4:\n                    printf(\"four key release\\n\");\n                    play_audio(&large_explosion_snd);\n                    break;\n                case SDLK_5:\n                    printf(\"five key release\\n\");\n                    play_audio(&hit_snd);\n                    break;\n                default:\n                    printf(\"unknown key release\\n\");\n                    break;\n            }\n        }\n    }\n}\n```", "```cpp\nint main() {\n    if((SDL_Init(SDL_INIT_VIDEO|SDL_INIT_AUDIO)==-1)) {\n        printf(\"Could not initialize SDL: %s.\\n\", SDL_GetError());\n        return 0;\n    }\n\n    SDL_CreateWindowAndRenderer( 320, 200, 0, &window, &renderer );\n\n    init_audio( ENEMY_LASER, &enemy_laser_snd );\n    init_audio( PLAYER_LASER, &player_laser_snd );\n    init_audio( SMALL_EXPLOSION, &small_explosion_snd );\n    init_audio( LARGE_EXPLOSION, &large_explosion_snd );\n    init_audio( HIT, &hit_snd );\n\n    device_id = SDL_OpenAudioDevice(NULL, 0, &(enemy_laser_snd.spec), \n                                    NULL, 0);\n\n    if (device_id == 0) {\n        printf(\"Failed to open audio: %s\\n\", SDL_GetError());\n    }\n\n    SDL_PauseAudioDevice(device_id, 0);\n\n    emscripten_set_main_loop(input_loop, 0, 0);\n\n    return 1;\n}\n```", "```cpp\n#include <SDL2/SDL.h>\n#include <emscripten.h>\n#include <stdio.h>\n#include <stdbool.h>\n\n#define ENEMY_LASER \"/audio/enemy-laser.wav\"\n#define PLAYER_LASER \"/audio/player-laser.wav\"\n#define LARGE_EXPLOSION \"/audio/large-explosion.wav\"\n#define SMALL_EXPLOSION \"/audio/small-explosion.wav\"\n#define HIT \"/audio/hit.wav\"\n```", "```cpp\nSDL_AudioDeviceID device_id;\nSDL_Window *window;\nSDL_Renderer *renderer;\nSDL_Event event;\n```", "```cpp\nstruct audio_clip {\n    char file_name[100];\n    SDL_AudioSpec spec;\n    Uint32 len;\n    Uint8 *buf;\n} enemy_laser_snd, player_laser_snd, small_explosion_snd, large_explosion_snd, hit_snd;\n```", "```cpp\nvoid play_audio( struct audio_clip* clip ) {\n    int success = SDL_QueueAudio(device_id, clip->buf, clip->len);\n    if( success < 0 ) {\n        printf(\"SDL_QueueAudio %s failed: %s\\n\", clip->file_name, \n        SDL_GetError());\n    }\n}\n```", "```cpp\nvoid init_audio( char* file_name, struct audio_clip* clip ) {\n    strcpy( clip->file_name, file_name );\n\n    if( SDL_LoadWAV(file_name, &(clip->spec), &(clip->buf), &(clip-\n        >len)) \n    == NULL ) {\n        printf(\"Failed to load wave file: %s\\n\", SDL_GetError());\n    }\n}\n```", "```cpp\nvoid input_loop() {\n    if( SDL_PollEvent( &event ) ){\n        if( event.type == SDL_KEYUP ) {\n            switch( event.key.keysym.sym ){\n                case SDLK_1:\n                    printf(\"one key release\\n\");\n                    play_audio(&enemy_laser_snd);\n                    break;\n                case SDLK_2:\n                    printf(\"two key release\\n\");\n                    play_audio(&player_laser_snd);\n                    break;\n                case SDLK_3:\n                    printf(\"three key release\\n\");\n                    play_audio(&small_explosion_snd);\n                    break;\n                case SDLK_4:\n                    printf(\"four key release\\n\");\n                    play_audio(&large_explosion_snd);\n                    break;\n                case SDLK_5:\n                    printf(\"five key release\\n\");\n                    play_audio(&hit_snd);\n                    break;\n                default:\n                    printf(\"unknown key release\\n\");\n                    break;\n            }\n        }\n    }\n}\n```", "```cpp\nint main() {\n    if((SDL_Init(SDL_INIT_VIDEO|SDL_INIT_AUDIO)==-1)) {\n        printf(\"Could not initialize SDL: %s.\\n\", SDL_GetError());\n        return 0;\n    }\n    SDL_CreateWindowAndRenderer( 320, 200, 0, &window, &renderer );\n    init_audio( ENEMY_LASER, &enemy_laser_snd );\n    init_audio( PLAYER_LASER, &player_laser_snd );\n    init_audio( SMALL_EXPLOSION, &small_explosion_snd );\n    init_audio( LARGE_EXPLOSION, &large_explosion_snd );\n    init_audio( HIT, &hit_snd );\n\n    device_id = SDL_OpenAudioDevice(NULL, 0, &(enemy_laser_snd.spec), NULL, \n    0);\n\n    if (device_id == 0) {\n        printf(\"Failed to open audio: %s\\n\", SDL_GetError());\n    }\n    SDL_PauseAudioDevice(device_id, 0);\n    emscripten_set_main_loop(input_loop, 0, 0);\n    return 1;\n}\n```", "```cpp\ninit_audio( ENEMY_LASER, &enemy_laser_snd );\ninit_audio( PLAYER_LASER, &player_laser_snd );\ninit_audio( SMALL_EXPLOSION, &small_explosion_snd );\ninit_audio( LARGE_EXPLOSION, &large_explosion_snd );\ninit_audio( HIT, &hit_snd );\n```", "```cpp\ndevice_id = SDL_OpenAudioDevice(NULL, 0, &(enemy_laser_snd.spec), NULL, 0);\n\nif (device_id == 0) {\n    printf(\"Failed to open audio: %s\\n\", SDL_GetError());\n}\n\nSDL_PauseAudioDevice(device_id, 0);\n```", "```cpp\nemscripten_set_main_loop(input_loop, 0, 0);\n```", "```cpp\nemcc audio.c --preload-file audio -s USE_SDL=2 -o audio.html\n```", "```cpp\n#define ENEMY_LASER (char*)\"/audio/enemy-laser.wav\"\n#define PLAYER_LASER (char*)\"/audio/player-laser.wav\"\n#define LARGE_EXPLOSION (char*)\"/audio/large-explosion.wav\"\n#define SMALL_EXPLOSION (char*)\"/audio/small-explosion.wav\"\n#define HIT (char*)\"/audio/hit.wav\"\n```", "```cpp\nclass Audio;\nclass Ship;\nclass Particle;\nclass Emitter;\nclass Collider;\nclass Asteroid;\nclass Star;\nclass PlayerShip;\nclass EnemyShip;\nclass Projectile;\nclass ProjectilePool;\nclass FiniteStateMachine;\nclass Camera;\nclass RenderManager;\nclass Locator;\n```", "```cpp\nclass Audio {\n    public:\n        char FileName[100];\n        SDL_AudioSpec spec;\n        Uint32 len;\n        Uint8 *buf;\n        bool priority = false;\n\n        Audio( char* file_name, bool priority_value );\n        void Play();\n};\n```", "```cpp\nextern Audio* enemy_laser_snd;\nextern Audio* player_laser_snd;\nextern Audio* small_explosion_snd;\nextern Audio* large_explosion_snd;\nextern Audio* hit_snd;\nextern SDL_AudioDeviceID device_id;\n```", "```cpp\nSDL_AudioDeviceID device_id;\n\nAudio* enemy_laser_snd;\nAudio* player_laser_snd;\nAudio* small_explosion_snd;\nAudio* large_explosion_snd;\nAudio* hit_snd;\n```", "```cpp\nvoid collisions() {\n Asteroid* asteroid;\n std::vector<Asteroid*>::iterator ita;\n    if( player->m_CurrentFrame == 0 && player->CompoundHitTest( star ) ) {\n        player->m_CurrentFrame = 1;\n        player->m_NextFrameTime = ms_per_frame;\n        player->m_Explode->Run(); // added\n        large_explosion_snd->Play();\n    }\n    if( enemy->m_CurrentFrame == 0 && enemy->CompoundHitTest( star ) ) {\n        enemy->m_CurrentFrame = 1;\n        enemy->m_NextFrameTime = ms_per_frame;\n        enemy->m_Explode->Run(); // added\n        large_explosion_snd->Play();\n    }\n    Projectile* projectile;\n    std::vector<Projectile*>::iterator it;\n    for(it=projectile_pool->m_ProjectileList.begin(); \n        it!=projectile_pool->m_ProjectileList.end(); \n        it++){\n        projectile = *it;\n        if( projectile->m_CurrentFrame == 0 && projectile->m_Active ) {\n            for( ita = asteroid_list.begin(); ita != \n                asteroid_list.end(); \n                 ita++ ) {\n                asteroid = *ita;\n                if( asteroid->m_Active ) {\n                    if( asteroid->HitTest( projectile ) ) {\n                        projectile->m_CurrentFrame = 1;\n                        projectile->m_NextFrameTime = ms_per_frame;\n                        small_explosion_snd->Play();\n                    }\n                }\n            }\n            if( projectile->HitTest( star ) ){\n                projectile->m_CurrentFrame = 1;\n                projectile->m_NextFrameTime = ms_per_frame;\n                small_explosion_snd->Play();\n            }\n            else if( player->m_CurrentFrame == 0 && ( projectile-\n                     >HitTest( player ) ||\n                      player->CompoundHitTest( projectile ) ) ) {\n                if( player->m_Shield->m_Active == false ) {\n                    player->m_CurrentFrame = 1;\n                    player->m_NextFrameTime = ms_per_frame;\n                    player->m_Explode->Run();\n                    large_explosion_snd->Play();\n                }\n                else { hit_snd->Play(); }\n                projectile->m_CurrentFrame = 1;\n                projectile->m_NextFrameTime = ms_per_frame;\n            }\n            else if( enemy->m_CurrentFrame == 0 && ( projectile-\n                     >HitTest( enemy ) ||\n                      enemy->CompoundHitTest( projectile ) ) ) {\n                if( enemy->m_Shield->m_Active == false ) {\n                    enemy->m_CurrentFrame = 1;\n                    enemy->m_NextFrameTime = ms_per_frame;\n                    enemy->m_Explode->Run();\n                    large_explosion_snd->Play();\n                }\n                else { hit_snd->Play(); }\n                projectile->m_CurrentFrame = 1;\n                projectile->m_NextFrameTime = ms_per_frame;\n            }\n        }\n    }\n    for( ita = asteroid_list.begin(); ita != asteroid_list.end(); \n         ita++ ) {\n        asteroid = *ita;\n        if( asteroid->m_Active ) {\n            if( asteroid->HitTest( star ) ) {\n                asteroid->Explode();\n                small_explosion_snd->Play();\n            }\n        }\n        else { continue; }\n        if( player->m_CurrentFrame == 0 && asteroid->m_Active &&\n            ( asteroid->HitTest( player ) || player->CompoundHitTest( \n            asteroid ) ) ) {\n            if( player->m_Shield->m_Active == false ) {\n                player->m_CurrentFrame = 1;\n                player->m_NextFrameTime = ms_per_frame;\n                player->m_Explode->Run();\n                large_explosion_snd->Play();\n            }\n            else {\n                asteroid->Explode();\n                small_explosion_snd->Play();\n            }\n        }\n        if( enemy->m_CurrentFrame == 0 && asteroid->m_Active &&\n            ( asteroid->HitTest( enemy ) || enemy->CompoundHitTest( \n              asteroid ) ) ) {\n            if( enemy->m_Shield->m_Active == false ) {\n                enemy->m_CurrentFrame = 1;\n                enemy->m_NextFrameTime = ms_per_frame;\n                enemy->m_Explode->Run();\n                large_explosion_snd->Play();\n            }\n            else {\n                asteroid->Explode();\n                small_explosion_snd->Play();\n            }\n        }\n    }\n}\n```", "```cpp\nplayer->m_Explode->Run(); \nlarge_explosion_snd->Play();\n```", "```cpp\nenemy->m_Explode->Run();\nlarge_explosion_snd->Play();\n```", "```cpp\nasteroid->Explode();\nsmall_explosion_snd->Play();\n```", "```cpp\nif( enemy->m_Shield->m_Active == false ) {\n    enemy->m_CurrentFrame = 1;\n    enemy->m_NextFrameTime = ms_per_frame;\n    enemy->m_Explode->Run();\n    large_explosion_snd->Play();\n}\nelse {\n    hit_snd->Play();\n}\n```", "```cpp\nif( player->m_Shield->m_Active == false ) {\n    player->m_CurrentFrame = 1;\n    player->m_NextFrameTime = ms_per_frame;\n\n    player->m_Explode->Run();\n    large_explosion_snd->Play();\n}\nelse {\n    hit_snd->Play();\n}\n```", "```cpp\nint main() {\n    SDL_Init( SDL_INIT_VIDEO | SDL_INIT_AUDIO );\n    int return_val = SDL_CreateWindowAndRenderer( CANVAS_WIDTH, \n    CANVAS_HEIGHT, 0, &window, &renderer );\n\n    if( return_val != 0 ) {\n        printf(\"Error creating renderer %d: %s\\n\", return_val, \n        IMG_GetError() );\n        return 0;\n    }\n\n    SDL_SetRenderDrawColor( renderer, 0, 0, 0, 255 );\n    SDL_RenderClear( renderer );\n    last_frame_time = last_time = SDL_GetTicks();\n\n    player = new PlayerShip();\n    enemy = new EnemyShip();\n    star = new Star();\n    camera = new Camera(CANVAS_WIDTH, CANVAS_HEIGHT);\n    render_manager = new RenderManager();\n    locator = new Locator();\n    enemy_laser_snd = new Audio(ENEMY_LASER, false);\n player_laser_snd = new Audio(PLAYER_LASER, false);\n small_explosion_snd = new Audio(SMALL_EXPLOSION, true);\n large_explosion_snd = new Audio(LARGE_EXPLOSION, true);\n hit_snd = new Audio(HIT, false);\n device_id = SDL_OpenAudioDevice(NULL, 0, &(enemy_laser_snd->spec), \n    NULL, 0);\n\n if (device_id == 0) {\n printf(\"Failed to open audio: %s\\n\", SDL_GetError());\n }\n    int asteroid_x = 0;\n    int asteroid_y = 0;\n    int angle = 0;\n\n    // SCREEN 1\n    for( int i_y = 0; i_y < 8; i_y++ ) {\n        asteroid_y += 100;\n        asteroid_y += rand() % 400;\n        asteroid_x = 0;\n        for( int i_x = 0; i_x < 12; i_x++ ) {\n            asteroid_x += 66;\n            asteroid_x += rand() % 400;\n            int y_save = asteroid_y;\n            asteroid_y += rand() % 400 - 200;\n            angle = rand() % 359;\n            asteroid_list.push_back(\n                new Asteroid( asteroid_x, asteroid_y,\n                get_random_float(0.5, 1.0),\n                DEG_TO_RAD(angle) ) );\n            asteroid_y = y_save;\n        }\n    }\n    projectile_pool = new ProjectilePool();\n    emscripten_set_main_loop(game_loop, 0, 0);\n    return 1;\n}\n```", "```cpp\nSDL_Init( SDL_INIT_VIDEO | SDL_INIT_AUDIO );\n```", "```cpp\nenemy_laser_snd = new Audio(ENEMY_LASER, false);\nplayer_laser_snd = new Audio(PLAYER_LASER, false);\nsmall_explosion_snd = new Audio(SMALL_EXPLOSION, true);\nlarge_explosion_snd = new Audio(LARGE_EXPLOSION, true);\nhit_snd = new Audio(HIT, false);\n\ndevice_id = SDL_OpenAudioDevice(NULL, 0, &(enemy_laser_snd->spec), \nNULL, 0);\n\nif (device_id == 0) {\n    printf(\"Failed to open audio: %s\\n\", SDL_GetError());\n}\n```", "```cpp\nvoid Ship::Shoot() {\n     Projectile* projectile;\n     if( current_time - m_LastLaunchTime >= c_MinLaunchTime ) {\n         m_LastLaunchTime = current_time;\n         projectile = projectile_pool->GetFreeProjectile();\n         if( projectile != NULL ) {\n             projectile->Launch( m_Position, m_Direction );\n             player_laser_snd->Play();\n         }\n     }\n }\n```", "```cpp\n#include \"game.hpp\"\n\nAudio::Audio( char* file_name, bool priority_value ) {\n    strcpy( FileName, file_name );\n    priority = priority_value;\n\n    if( SDL_LoadWAV(FileName, &spec, &buf, &len) == NULL ) {\n        printf(\"Failed to load wave file: %s\\n\", SDL_GetError());\n    }\n}\n\nvoid Audio::Play() {\n    if( priority || SDL_GetQueuedAudioSize(device_id) > 2 ) {\n        SDL_ClearQueuedAudio(device_id);\n    }\n\n    int success = SDL_QueueAudio(device_id, buf, len);\n    if( success < 0 ) {\n        printf(\"SDL_QueueAudio %s failed: %s\\n\", FileName, SDL_GetError());\n    }\n}\n```", "```cpp\nif( priority || SDL_GetQueuedAudioSize(device_id) > 2 ) {\n    SDL_ClearQueuedAudio(device_id);\n}\n```", "```cpp\nint success = SDL_QueueAudio(device_id, buf, len);\nif( success < 0 ) {\n printf(\"SDL_QueueAudio %s failed: %s\\n\", FileName, SDL_GetError());\n}\n```", "```cpp\nem++ asteroid.cpp audio.cpp camera.cpp collider.cpp emitter.cpp enemy_ship.cpp finite_state_machine.cpp locator.cpp main.cpp particle.cpp player_ship.cpp projectile_pool.cpp projectile.cpp range.cpp render_manager.cpp shield.cpp ship.cpp star.cpp vector.cpp -o sound_fx.html --preload-file audio --preload-file sprites -std=c++17 -s USE_WEBGL2=1 -s USE_SDL=2 -s USE_SDL_IMAGE=2 -s SDL2_IMAGE_FORMATS=[\"png\"] -s USE_SDL_IMAGE=2 -s SDL2_IMAGE_FORMATS=[\"png\"] \n```"]