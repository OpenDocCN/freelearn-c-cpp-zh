["```cpp\nclass Dog\n{\n}\n```", "```cpp\nDog dog = new Dog();\n```", "```cpp\n// Within a class named Dog\npublic class Dog\n{\n\u00a0\u00a0// Constructor\n\u00a0\u00a0public Dog()\n\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\"A Dog object has been created\");\n\u00a0\u00a0}\n}\n```", "```cpp\npublic string Name = \"unnamed\";\n```", "```cpp\nDog sparky = new Dog();\nDog ricky = new Dog();\n```", "```cpp\nsparky.Name = \"Sparky\";\nricky.Name = \"Ricky\";\n```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0public class Book\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public string Title;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public string Author;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public string Publisher;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public int Pages;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public string Description;\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0public static class Solution\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public static void Main()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    Book book1 = new Book();\n    book1.Author = \"New Writer\";\n    book1.Title = \"First Book\";\n    book1.Publisher = \"Publisher 1\";\n    ```", "```cpp\n    Book book2 = new Book();\n    book2.Author = \"New Writer\";\n    book2.Title = \"Second Book\";\n    book2.Publisher = \"Publisher 2\";\n    book2.Description = \"Interesting read\";\n    ```", "```cpp\n    private static void Print(Book book)\n    {\n    \u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"Author: {book.Author}, \" +\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$\"Title: {book.Title}, \" +\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$\"Publisher: {book.Publisher}, \" +\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$\"Description: {book.Description}.\");\n    }\n    ```", "```cpp\n    Print(book1);\n    Print(book2);\n    ```", "```cpp\nAuthor: New Writer, Title: First Book, Publisher: Publisher 1, Description: .\nAuthor: New Writer, Title: Second Book, Publisher: Publisher 2, Description: Interesting read.\n```", "```cpp\nDog speedy;\n```", "```cpp\nprivate static void SetTo5(int number)\n{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0number = 5;\n}\n```", "```cpp\nint a = 2;\n// a is 2\nConsole.WriteLine(a);\nSetTo5(a);\n// a is still 2\nConsole.WriteLine(a);\n```", "```cpp\n2\n2 \n```", "```cpp\npublic class Dog\n{    public string Owner;\n}\n```", "```cpp\nprivate static void ResetOwner(Dog dog)\n{\n\u00a0\u00a0\u00a0\u00a0dog.Owner = \"None\";\n}\n```", "```cpp\nDog dog = new Dog(\"speedy\");\nConsole.WriteLine(dog.Owner);\nResetOwner(dog);\n// Owner is \"None\"- changes remain\nConsole.WriteLine(dog.Owner);\n```", "```cpp\nspeedy\nNone \n```", "```cpp\nprivate static void Recreate(Dog dog)\n{\n\u00a0\u00a0\u00a0\u00a0dog = new Dog(\"Recreated\");\n}\n```", "```cpp\npublic string GetName()\n{\n\u00a0\u00a0\u00a0\u00a0return Name;\n}\npublic string SetName (string name)\n{\n\u00a0\u00a0\u00a0\u00a0Name = name;\n}\n```", "```cpp\npublic string Name {get; set;}\n```", "```cpp\nprivate string _owner;\npublic string Owner\n{\n\u00a0\u00a0\u00a0\u00a0get\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return _owner;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0set\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_owner = value;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\npublic string Name {get; private set;}\n```", "```cpp\npublic string Name {get;} = \"unnamed\";\n```", "```cpp\nprivate readonly string _name;\npublic string get_Name()\n{\n\u00a0\u00a0\u00a0\u00a0return _name;\n}\n```", "```cpp\nprivate string _name;\n\npublic string Name\n{\n\u00a0\u00a0\u00a0\u00a0get\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"Dog's name is \" + _name;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\npublic string Name => \"Dog's name is \" + _name;\n```", "```cpp\npublic Dog(string name)\n{\n\u00a0\u00a0if(string.IsNullOrWhitespace(name))\n\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0throw new ArgumentNullException(\"name\")\n\u00a0\u00a0}\n\u00a0\u00a0Name = name;\n}\n```", "```cpp\nprivate readonly string name;\npublic Dog(string name)\n{\n\u00a0\u00a0this.name = name;\n}\n```", "```cpp\nDog ricky = new Dog(\"Ricky\");\nDog sparky = new Dog(\"Sparky\");\n```", "```cpp\nDog dog = new Dog(\"Ricky\");\ndog.Owner = \"Tobias\";\n```", "```cpp\nDog dog = new Dog(\"Ricky\")\n{\n\u00a0\u00a0Owner = \"Tobias\"\n};\n```", "```cpp\nDog ricky = new Dog(\"Ricky\");\nDog sparky = new Dog(\"Sparky\");\n```", "```cpp\nDog[] dogs = new Dog[2];\ndogs[0] = ricky;\ndogs[1] = sparky;\n```", "```cpp\nDog[] dogs = {ricky, sparky};\n```", "```cpp\nDog dog = new(\"Dog\");\n```", "```cpp\npublic void Sit()\n{\n\u00a0\u00a0\u00a0\u00a0// Implementation of how a dog sits\n}\npublic void Bark()\n{\n\u00a0\u00a0\u00a0\u00a0// Implementation of how a dog barks \n}\n```", "```cpp\nRicky.Sit();\nSparky.Bark();\n```", "```cpp\nclass Computer\n{\n\u00a0\u00a0\u00a0\u00a0private readonly Key[] keys;\n}\n```", "```cpp\nclass Computer\n{\n\u00a0\u00a0\u00a0\u00a0private readonly Keyboard keyboard;\n}\nclass Keyboard\n{\n\u00a0\u00a0\u00a0\u00a0private readonly Key[] keys;\n}\n```", "```cpp\n    public class Rectangle\n    {\n    \u00a0\u00a0\u00a0\u00a0private readonly double _width;\n    \u00a0\u00a0\u00a0\u00a0private readonly double _height;\n    \u00a0\u00a0\u00a0\u00a0public double Area\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0get\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return _width * _height;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0} \n\n    \u00a0\u00a0\u00a0\u00a0public Rectangle(double width, double height)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_width = width;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_height = height;\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cpp\n    public class Circle\n    {\n    \u00a0\u00a0\u00a0\u00a0private readonly double _radius;\n\n    \u00a0\u00a0\u00a0\u00a0public Circle(double radius)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_radius = radius;\n    \u00a0\u00a0\u00a0\u00a0}\n\n    \u00a0\u00a0\u00a0\u00a0public double Area\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0get { return Math.PI * _radius * _radius; }\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cpp\n    public static class Solution\n    {\n    \u00a0\u00a0\u00a0\u00a0public const string Equal = \"equal\";\n    \u00a0\u00a0\u00a0\u00a0public const string Rectangular = \"rectangular\";\n    \u00a0\u00a0\u00a0\u00a0public const string Circular = \"circular\";\n    \u00a0\u00a0\u00a0\u00a0public static string Solve(Rectangle[] rectangularSection, Circle[] circularSection)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var totalAreaOfRectangles = CalculateTotalAreaOfRectangles(rectangularSection);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var totalAreaOfCircles = CalculateTotalAreaOfCircles(circularSection);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return GetBigger(totalAreaOfRectangles, totalAreaOfCircles);\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cpp\n    private static double CalculateTotalAreaOfRectangles(Rectangle[] rectangularSection)\n    {\n    \u00a0\u00a0\u00a0\u00a0double totalAreaOfRectangles = 0;\n    \u00a0\u00a0\u00a0\u00a0foreach (var rectangle in rectangularSection)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0totalAreaOfRectangles += rectangle.Area;\n    \u00a0\u00a0\u00a0\u00a0}\n\n    \u00a0\u00a0\u00a0\u00a0return totalAreaOfRectangles;\n    }\n    ```", "```cpp\n    private static double CalculateTotalAreaOfCircles(Circle[] circularSection)\n    {\n    \u00a0\u00a0\u00a0\u00a0double totalAreaOfCircles = 0;\n    \u00a0\u00a0\u00a0\u00a0foreach (var circle in circularSection)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0totalAreaOfCircles += circle.Area;\n    \u00a0\u00a0\u00a0\u00a0}\n\n    \u00a0\u00a0\u00a0\u00a0return totalAreaOfCircles;\n    }\n    ```", "```cpp\n    private static string GetBigger(double totalAreaOfRectangles, double totalAreaOfCircles)\n    {\n    \u00a0\u00a0\u00a0\u00a0const double margin = 0.01;\n    \u00a0\u00a0\u00a0\u00a0bool areAlmostEqual = Math.Abs(totalAreaOfRectangles - totalAreaOfCircles) <= margin;\n    \u00a0\u00a0\u00a0\u00a0if (areAlmostEqual)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return Equal;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0else if (totalAreaOfRectangles > totalAreaOfCircles)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return Rectangular;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return Circular;\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cpp\n    public static void Main()\n    { \n    \u00a0\u00a0\u00a0\u00a0string compare1 = Solve(new Rectangle[0], new Circle[0]);\n    \u00a0\u00a0\u00a0\u00a0string compare2 = Solve(new[] { new Rectangle(1, 5)}, new Circle[0]);\n    \u00a0\u00a0\u00a0\u00a0string compare3 = Solve(new Rectangle[0], new[] { new Circle(1) });\n    \u00a0\u00a0\u00a0\u00a0string compare4 = Solve(new []\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new Rectangle(5.0, 2.1), \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new Rectangle(3, 3), \n    \u00a0\u00a0\u00a0\u00a0}, new[]\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new Circle(1),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new Circle(10), \n    \u00a0\u00a0\u00a0\u00a0});\n\n    \u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"compare1 is {compare1}, \" +\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$\"compare2 is {compare2}, \" +\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$\"compare3 is {compare3}, \" +\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$\"compare4 is {compare4}.\");\n    }\n    ```", "```cpp\n    compare1 is equal, compare2 is rectangular, compare3 is circular, compare4 is circular.\n    ```", "```cpp\npublic class LoginService\n{\n\u00a0\u00a0\u00a0\u00a0// Could be a dictionary, but we will use a simplified example.\n\u00a0\u00a0\u00a0\u00a0private string[] _usernames;\n\u00a0\u00a0\u00a0\u00a0private string[] _passwords;\n\n\u00a0\u00a0\u00a0\u00a0public bool Login(string username, string password)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Do a password lookup based on username\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bool isLoggedIn = true;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return isLoggedIn;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\n    public class Human\n    {\n    \u00a0\u00a0\u00a0\u00a0public string Name { get; }\n    \u00a0\u00a0\u00a0\u00a0public int Age { get; }\n    \u00a0\u00a0\u00a0\u00a0public float Weight { get; }\n    \u00a0\u00a0\u00a0\u00a0public float Height { get; }\n\n    \u00a0\u00a0\u00a0\u00a0public Human(string name, int age, float weight, float height)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Name = name;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Age = age;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Weight = weight;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Height = height;\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cpp\n    public class Mailman : Human\n    {\n    \u00a0\u00a0\u00a0\u00a0public Mailman(string name, int age, float weight, float height) : base(name, age, weight, height)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0}\n\n    \u00a0\u00a0\u00a0\u00a0public void DeliverMail(Mail mail)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Delivering Mail...\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cpp\n    public class Mail\n    {\n    \u00a0\u00a0\u00a0public string Message { get; }\n    \u00a0\u00a0\u00a0public string Address { get; }\n\n    \u00a0\u00a0\u00a0public Mail(string message, string address)\n    \u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Message = message;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Address = address;\n    \u00a0\u00a0\u00a0}\n    }\n    ```", "```cpp\n    var mailman = new Mailman(\"Thomas\", 29, 78.5f, 190.11f);\n    var mail = new Mail(\"Hello\", \"Somewhere far far way\");\n    mailman.DeliverMail(mail);\n    ```", "```cpp\nPublic class A\n{\n}\nPublic class B : A\n{\n}\n```", "```cpp\nclass Tile\n{\n}\nclass MovingTile : Tile\n{\n\u00a0\u00a0\u00a0\u00a0public void Move() {}\n}\nclass TrapTile : Tile\n{\n\u00a0\u00a0\u00a0\u00a0public void Damage() {}\n}\n//class MovingTrapTile : ?\n```", "```cpp\nclass Tile\n{\n}\n```", "```cpp\nclass Motor\n{\n\u00a0\u00a0\u00a0\u00a0public void Move() { }\n}\nclass Trap\n{\n\u00a0\u00a0\u00a0\u00a0public void Damage() { }\n}\n```", "```cpp\nclass MovingTile : Tile\n{\n\u00a0\u00a0\u00a0\u00a0private readonly Motor _motor;\n\n\u00a0\u00a0\u00a0\u00a0public MovingTile(Motor motor)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_motor = motor;\n\u00a0\u00a0\u00a0\u00a0} \n\n\u00a0\u00a0\u00a0\u00a0public void Move()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_motor.Move();\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\nclass TrapTile : Tile\n{\n\u00a0\u00a0\u00a0\u00a0private readonly Trap _trap;\n\n\u00a0\u00a0\u00a0\u00a0public TrapTile(Trap trap)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_trap = trap;\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0public void Damage()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_trap.Damage();\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\nclass MovingTrapTile : Tile\n{\n\u00a0\u00a0\u00a0\u00a0private readonly Motor _motor;\n\u00a0\u00a0\u00a0\u00a0private readonly Trap _trap;\n\n\u00a0\u00a0\u00a0\u00a0public MovingTrapTile(Motor motor, Trap trap)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_motor = motor;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_trap = trap;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public void Move()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_motor.Move();\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public void Damage()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_trap.Damage();\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\npublic abstract class Human\n{\n\u00a0\u00a0\u00a0\u00a0public string Name { get; }\n\n\u00a0\u00a0\u00a0\u00a0protected Human(string name)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Name = name;\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0public abstract void Work();\n}\n```", "```cpp\npublic override void Work()\n{\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\"A mailman is delivering mails.\");\n}\n```", "```cpp\npublic class Teacher : Human\n{\n\u00a0\u00a0\u00a0\u00a0public Teacher(string name, int age, float weight, float height) : base(name, age, weight, height)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0public override void Work()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\"A teacher is teaching.\");\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\npublic class Person\n{\n\u00a0\u00a0\u00a0\u00a0public void Say()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\"Hello\");\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0public void Say(string words)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(words);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\nMailman mailman = new Mailman(\"Thomas\", 29, 78.5f, 190.11f);\nTeacher teacher = new Teacher(\"Gareth\", 35, 100.5f, 186.49f);\n// Specialized types can be stored as their generalized forms.\nHuman[] humans = {mailman, teacher};\n// Interacting with different human types\n// as if they were the same type- polymorphism.\nforeach (var human in humans)\n{\n\u00a0\u00a0\u00a0\u00a0human.Work();\n}\n```", "```cpp\nA mailman is delivering mails.\nA teacher is teaching.\n```", "```cpp\nforeach (var human in humans)\n{\n\u00a0\u00a0\u00a0\u00a0Type humanType = human.GetType();\n\u00a0\u00a0\u00a0\u00a0if (humanType == typeof(Mailman))\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\"Mailman is working...\");\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0else\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\"Teaching\");\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\nHuman[] humans = {mailman, teacher};\nforeach (var human in humans)\n{\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine(human);\n}\n```", "```cpp\nChapter02.Examples.Professions.Mailman\nChapter02.Examples.Professions.Teacher\n```", "```cpp\npublic override string ToString()\n{\n\u00a0\u00a0\u00a0\u00a0return $\"{nameof(Name)}: {Name},\" +\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 $\"{nameof(Age)}: {Age},\" +\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 $\"{nameof(Weight)}: {Weight},\" +\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 $\"{nameof(Height)}: {Height}\";\n}\n```", "```cpp\nName: Thomas,Age: 29,Weight: 78.5,Height: 190.11\nName: Gareth,Age: 35,Weight: 100.5,Height: 186.49\n```", "```cpp\npublic class ProgressBar\n{\n\u00a0\u00a0\u00a0\u00a0public float Current { get; set; }\n\u00a0\u00a0\u00a0\u00a0public float Max { get; }\n\n\u00a0\u00a0\u00a0\u00a0public ProgressBar(float current, float max)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Max = max;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Current = current;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\nvar bar = new ProgressBar(0, 100);\nvar newProgress = 120;\nif (newProgress > bar.Max)\n{\n\u00a0\u00a0\u00a0\u00a0bar.Current = bar.Max;\n}\nelse\n{\n\u00a0\u00a0\u00a0\u00a0bar.Current = newProgress;\n}\n\nconst double tolerance = 0.0001;\nvar isComplete = Math.Abs(bar.Max - bar.Current) < tolerance;\n```", "```cpp\npublic class ProgressBar\n{\n\u00a0\u00a0\u00a0\u00a0private const float Tolerance = 0.001f;\n\n\u00a0\u00a0\u00a0\u00a0private float _current;\n\u00a0\u00a0\u00a0\u00a0public float Current\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0get => _current;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0set\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (value >= Max)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_current = Max;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (value < 0)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_current = 0;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_current = value;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n```", "```cpp\nvar bar = new ProgressBar(0, 100);\nbar.Current = 120;\nbool isComplete = bar.IsComplete;\n```", "```cpp\npublic interface IWorker\n{\n\u00a0\u00a0\u00a0\u00a0void Work();\n}\n```", "```cpp\npublic class Ant : IWorker\n{\n\u00a0\u00a0\u00a0\u00a0public void Work()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\"Ant is working hard.\");\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\npublic class Robot : IWorker\n{\n\u00a0\u00a0\u00a0\u00a0public void Work()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\"Beep boop- I am working.\");\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\npublic class Mailman : Human\n{\n\u00a0\u00a0\u00a0\u00a0public Mailman(string name, int age, float weight, float height) : base(name, age, weight, height)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0public void DeliverMail(Mail mail)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Delivering Mail...\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0public override void Work()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\"Mailman is working...\");\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\nIWorker human = new Mailman(\"Thomas\", 29, 78.5f, 190.11f);\nIWorker ant = new Ant();\nIWorker robot = new Robot();\n\nIWorker[] workers = {human, ant, robot};\nforeach (var worker in workers)\n{\n\u00a0\u00a0\u00a0\u00a0worker.Work();\n}\n```", "```cpp\nMailman is working...\nAnt is working hard.\nBeep boop- I am working.\n```", "```cpp\npublic interface IFlyer\n{\n\u00a0\u00a0\u00a0\u00a0void Fly();\n}\n```", "```cpp\npublic class Drone : IFlyer, IWorker\n{\n\u00a0\u00a0\u00a0\u00a0public void Fly()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\"Flying\");\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0public void Work()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\"Working\");\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\npublic interface IDrone : IWorker, IFlyer\n{\n}\n```", "```cpp\npublic class FlyingAnt : Ant, IFlyer\n{\n\u00a0\u00a0\u00a0\u00a0public void Fly()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\"Flying\");\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\npublic interface IIdentifiable\n{\n\u00a0\u00a0\u00a0\u00a0long Id { get; }\n}\npublic interface IDrone : IWorker, IFlyer \n{\n}\n```", "```cpp\n    public interface IShape\n    {\n    \u00a0\u00a0\u00a0\u00a0double Area { get; }\n    }\n    ```", "```cpp\n    Rectangle.cs\n    public class Rectangle : IShape\n    {\n    \u00a0\u00a0\u00a0\u00a0private readonly double _width;\n    \u00a0\u00a0\u00a0\u00a0private readonly double _height;\n\n    \u00a0\u00a0\u00a0\u00a0public double Area\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0get\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return _width * _height;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0} \n\n    \u00a0\u00a0\u00a0\u00a0public Rectangle(double width, double height)\n    \u00a0\u00a0\u00a0\u00a0{\n    ```", "```cpp\nYou can find the complete code here: https://packt.link/zSquP.\n```", "```cpp\n    public class Circle : IShape\n    {\n    \u00a0\u00a0\u00a0\u00a0Private readonly double _radius;\n\n    \u00a0\u00a0\u00a0\u00a0public Circle(double radius)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_radius = radius;\n    \u00a0\u00a0\u00a0\u00a0}\n\n    \u00a0\u00a0\u00a0\u00a0public double Area\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0get { return Math.PI * _radius * _radius; }\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cpp\n    public static class Solution\n    {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public static bool IsEnough(double mosaicArea, IShape[] tiles)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0}\n    }\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0double totalArea = 0;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0foreach (var tile in tiles)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0totalArea += tile.Area;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const double tolerance = 0.0001;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return totalArea - mosaicArea >= -tolerance;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }\n    ```", "```cpp\n    public static void Main()\n    {\n    \u00a0\u00a0\u00a0\u00a0var isEnough1 = IsEnough(0, new IShape[0]);\n    \u00a0\u00a0\u00a0\u00a0var isEnough2 = IsEnough(1, new[] { new Rectangle(1, 1) });\n    \u00a0\u00a0\u00a0\u00a0var isEnough3 = IsEnough(100, new IShape[] { new Circle(5) });\n    \u00a0\u00a0\u00a0\u00a0var isEnough4 = IsEnough(5, new IShape[]\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new Rectangle(1, 1), new Circle(1), new Rectangle(1.4,1)\n    \u00a0\u00a0\u00a0\u00a0});\n\n    \u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"IsEnough1 = {isEnough1}, \" +\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$\"IsEnough2 = {isEnough2}, \" +\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$\"IsEnough3 = {isEnough3}, \" +\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$\"IsEnough4 = {isEnough4}.\");\n    }\n    ```", "```cpp\n    IsEnough1 = True, IsEnough2 = True, IsEnough3 = False, IsEnough4 = False.\n    ```", "```cpp\npublic class File\n{\n\u00a0\u00a0\u00a0\u00a0public string Read(string filePath)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// implementation how to read file contents\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// complex logic\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"\";\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0public void Write(string filePath, string content)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// implementation how to append content to an existing file\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// complex logic\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\npublic class Reader\n{\n\u00a0\u00a0\u00a0\u00a0public string Read(string filePath)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// implementation how to read file contents\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// complex logic\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"\";\n\u00a0\u00a0\u00a0\u00a0}\n}\npublic class Writer\n{\n\u00a0\u00a0\u00a0\u00a0public void Write(string filePath, string content)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// implementation how to append content to an existing file\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// complex logic\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\npublic class File\n{\n\u00a0\u00a0\u00a0\u00a0private readonly Reader _reader;\n\u00a0\u00a0\u00a0\u00a0private readonly Writer _writer;\n\n\u00a0\u00a0\u00a0\u00a0public File()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_reader = new Reader();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_writer = new Writer();\n\u00a0\u00a0\u00a0\u00a0}  \n\n\u00a0\u00a0\u00a0\u00a0public string Read(string filePath) => _reader.Read(filePath);\n\u00a0\u00a0\u00a0\u00a0public void Write(string filePath, string content) => _writer.Write(filePath, content);\n}\n```", "```cpp\npublic class Merchandise\n{\n\u00a0\u00a0\u00a0\u00a0public string Name { get; set; }\n\u00a0\u00a0\u00a0\u00a0public decimal Price { get; set; }\n\u00a0\u00a0\u00a0\u00a0// VAT on top in %\n\u00a0\u00a0\u00a0\u00a0public decimal Vat { get; set; }\n}\n```", "```cpp\npublic static class TaxCalculator\n{\n\u00a0\u00a0\u00a0\u00a0public static decimal CalculateNextPrice(decimal price, decimal vat)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return price * (1 + vat / 100);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\npublic class Merchandise\n{\n\u00a0\u00a0\u00a0\u00a0public string Name { get; set; }\n\u00a0\u00a0\u00a0\u00a0public decimal Price { get; set; }\n\u00a0\u00a0\u00a0\u00a0// VAT on top in %\n\u00a0\u00a0\u00a0\u00a0public decimal Vat { get; set; }\n\u00a0\u00a0\u00a0\u00a0public decimal NetPrice => Price * (1 + Vat / 100);\n}\n```", "```cpp\npublic virtual string Read(string filePath)\npublic virtual void Write(string filePath, string content)\n```", "```cpp\npublic File(Reader reader, Writer writer)\n{\n\u00a0\u00a0\u00a0\u00a0_reader = reader;\n\u00a0\u00a0\u00a0\u00a0_writer = writer;\n}\n```", "```cpp\nclass Car\n{\n\u00a0\u00a0\u00a0\u00a0public object Body { get; set; }\n\u00a0\u00a0\u00a0\u00a0public virtual void Move()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Moving\n\u00a0\u00a0\u00a0\u00a0}\n}\nclass CarWreck : Car\n{\n\u00a0\u00a0\u00a0\u00a0public override void Move()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw new NotSupportedException(\"A broken car cannot start.\");\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\nclass CarWreck\n{\n\u00a0\u00a0\u00a0\u00a0public object Body { get; set; }\n}\n```", "```cpp\ninterface IMovableDamageable\n{\n\u00a0\u00a0\u00a0\u00a0void Move(Location location);\n\u00a0\u00a0\u00a0\u00a0float Hp{get;set;}\n}\n```", "```cpp\nclass ScoreText : IMovableDamageable\n{\n\u00a0\u00a0\u00a0\u00a0public float Hp \n\u00a0\u00a0\u00a0\u00a0{ \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0get => throw new NotSupportedException(); \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0set => throw new NotSupportedException(); \n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0public void Move(Location location)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"Moving to {location}\");\n\u00a0\u00a0\u00a0\u00a0}\n}\n\npublic class Location\n{\n}\n```", "```cpp\nclass House : IMovableDamageable\n{\n\u00a0\u00a0\u00a0\u00a0public float Hp { get; set; }\n\n\u00a0\u00a0\u00a0\u00a0public void Move(Location location)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw new NotSupportedException();\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\ninterface IMoveable\n{\n\u00a0\u00a0\u00a0\u00a0void Move(Location location);\n}\ninterface IDamageable\n{\n\u00a0\u00a0\u00a0\u00a0float Hp{get;set;}\n}\n```", "```cpp\nclass House : IDamageable\n{\n\u00a0\u00a0\u00a0\u00a0public float Hp { get; set; }\n}\n\nclass ScoreText : IMovable\n{\n\u00a0\u00a0\u00a0\u00a0public void Move(Location location)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"Moving to {location}\");\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\nclass Bar\n{\n\u00a0\u00a0\u00a0\u00a0private readonly IBartender _bartender;\n\n\u00a0\u00a0\u00a0\u00a0public Bar(IBartender bartender)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_bartender = bartender;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\nvar bar = new Bar(new Bartender());\n```", "```cpp\nclass Bar\n{\n\u00a0\u00a0\u00a0\u00a0public void ServeDrinks(IBartender bartender)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// serve drinks using bartender\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\nvar bar = new Bar();\nbar.ServeDrinks(new Bartender());\n```", "```cpp\nclass Bar\n{\n\u00a0\u00a0\u00a0\u00a0public IBartender Bartender { get; set; }\n}\n```", "```cpp\nvar bar = new Bar();\nbar.Bartender = new Bartender();\n```", "```cpp\npublic class Reader : IReader\npublic class Writer: IWriter\n```", "```cpp\nprivate readonly IReader _reader;\nprivate readonly IWriter _writer;\n\npublic File(IReader reader, IWriter writer)\n{\n\u00a0\u00a0\u00a0\u00a0_reader = reader;\n\u00a0\u00a0\u00a0\u00a0_writer = writer;\n}\n```", "```cpp\npublic class DogsGenerator\n{\n\u00a0\u00a0\u00a0\u00a0public static int Counter { get; private set; }\n\u00a0\u00a0\u00a0\u00a0static DogsGenerator()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Counter will be 0 anyways if not explicitly provided,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// this just illustrates the use of a static constructor.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Counter = 0;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public static Dog GenerateDog()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Counter++;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return new Dog(\"Dog\" + Counter);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\nusing static Math;\npublic static class Demo\n{\n\u00a0\u00a0\u00a0\u00a0public static void Run()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0//No need Math.PI\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(PI);\n\u00a0\u00a0\u00a0\u00a0} \n}\n```", "```cpp\npublic class Human\n{\n\u00a0\u00a0\u00a0\u00a0public virtual void SayHi()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\"Hello!\");\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\npublic class Frenchman : Human\n{\n\u00a0\u00a0\u00a0\u00a0public override void SayHi()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\"Bonjour!\");\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\nint[] numbers = null;\nnumbers.length;\n```", "```cpp\nif (dog.Owner != null)\n{\n\u00a0\u00a0\u00a0\u00a0bool ownerNameStartsWithA = dog.Owner.StartsWith('A');\n}\n```", "```cpp\ndog.Owner?.StartsWith('A');\n```", "```cpp\nif (dog1.Owner == null)\n{\n\u00a0\u00a0\u00a0\u00a0description = dog1.Name;\n}\nelse\n{\n\u00a0\u00a0\u00a0\u00a0description = $\"{dog1.Name}, dog of {dog1.Owner}\";\n}\n```", "```cpp\ndescription = dog1.Owner == null\n\u00a0\u00a0\u00a0\u00a0? dog1.Name\n\u00a0\u00a0\u00a0\u00a0: $\"{dog1.Name}, dog of {dog1.Owner}\";\n```", "```cpp\nif (dog1.Owner != null)\n{\n\u00a0\u00a0\u00a0\u00a0dog2.Owner = dog1.Owner;\n}\n```", "```cpp\ndog1.Owner = dog1.Owner ?? dog2.Owner;\n```", "```cpp\ndog1.Owner ??= dog2.Owner;\n```", "```cpp\npublic ComponentB(ComponentA componentA)\n{\n\u00a0\u00a0\u00a0\u00a0if (componentA == null)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw new ArgumentException(nameof(componentA));\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0else\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_componentA = componentA;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\n_componentA = componentA ?? throw new ArgumentNullException(nameof(componentA));\n```", "```cpp\npublic class BankAccount\n{\n\u00a0\u00a0\u00a0\u00a0private decimal _balance;\n\n\u00a0\u00a0\u00a0\u00a0public BankAccount(decimal balance)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_balance = balance;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\npublic static bool operator >(BankAccount account1, BankAccount account2)\n\u00a0\u00a0\u00a0\u00a0=> account1?._balance > account2?._balance;\n```", "```cpp\npublic static bool operator <(BankAccount account1, BankAccount account2)\n\u00a0\u00a0\u00a0\u00a0=> account1?._balance < account2?._balance;\n```", "```cpp\npublic static bool operator ==(BankAccount account1, BankAccount account2)\n\u00a0\u00a0\u00a0\u00a0=> account1?._balance == account2?._balance; \npublic static bool operator !=(BankAccount account1, BankAccount account2)\n\u00a0\u00a0\u00a0\u00a0=> !(account1 == account2);\n```", "```cpp\nvar account1 = new BankAccount(-1.01m);\nvar account2 = new BankAccount(1.01m);\nvar account3 = new BankAccount(1001.99m);\nvar account4 = new BankAccount(1001.99m);\n```", "```cpp\nConsole.WriteLine(account1 == account2);\nConsole.WriteLine(account1 != account2);\nConsole.WriteLine(account2 > account1);\nConsole.WriteLine(account1 < account2);\nConsole.WriteLine(account3 == account4);\nConsole.WriteLine(account3 != account4);\n```", "```cpp\nFalse\nTrue\nTrue\nTrue\nTrue\nFalse\n```", "```cpp\nint? a = null;\n```", "```cpp\na = 1;\n```", "```cpp\nint b = a.Value;\n```", "```cpp\npublic static void Print(int element)\n{\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine(element);\n}\nIf you need to print a float, you could add another overload:\npublic static void Print(float element)\n{\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine(element);\n}\n```", "```cpp\npublic static void Print(string element)\n{\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine(element);\n}\n```", "```cpp\npublic static void Print(object element)\n{\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine(element);\n}\n```", "```cpp\npublic static void Print<T>(T element)\n{\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine(element);\n}\n```", "```cpp\npublic static void Print<T>(T[] elements)\n{\n\u00a0\u00a0\u00a0\u00a0foreach (var element in elements)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(element);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\npublic static bool IsFirstBigger1(IComparable first, IComparable second)\n{\n\u00a0\u00a0\u00a0\u00a0return first.CompareTo(second) > 0;\n}\n```", "```cpp\npublic static bool IsFirstBigger2<T>(T first, T second)\n\u00a0\u00a0\u00a0\u00a0where T : IComparable\n{\n\u00a0\u00a0\u00a0\u00a0return first.CompareTo(second) > 0;\n}\n```", "```cpp\npublic static IComparable Max1(IComparable first, IComparable second)\n{\n\u00a0\u00a0\u00a0\u00a0return first.CompareTo(second) > 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0? first\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: second;\n}\n```", "```cpp\npublic static T Max2<T>(T first, T second)\n\u00a0\u00a0\u00a0\u00a0where T : IComparable\n{\n\u00a0\u00a0\u00a0\u00a0return first.CompareTo(second) > 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0? first\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: second;\n}\n```", "```cpp\nint max1 = (int)Comparator.Max1(3, -4);\n```", "```cpp\nint max2 = Comparator.Max2(3, -4);\n```", "```cpp\npublic enum Gender\n{\n\u00a0\u00a0\u00a0\u00a0Male,\n\u00a0\u00a0\u00a0\u00a0Female,\n\u00a0\u00a0\u00a0\u00a0Other\n}\n```", "```cpp\npublic static class StringExtensions\n{\n\u00a0\u00a0\u00a0\u00a0public static void Print(this string text)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(text);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\n\"Hey\".Print();\n```", "```cpp\nHey\n```", "```cpp\npublic struct Point\n{\n\u00a0\u00a0\u00a0\u00a0public readonly int X;\n\u00a0\u00a0\u00a0\u00a0public readonly int Y;\n\n\u00a0\u00a0\u00a0\u00a0public Point(int x, int y)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0X = x;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Y = y;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\npublic readonly struct Point\n{\n\u00a0\u00a0\u00a0\u00a0public int X { get; }\n\u00a0\u00a0\u00a0\u00a0public int Y { get; }\n\n\u00a0\u00a0\u00a0\u00a0public Point(int x, int y)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0X = x;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Y = y;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\npublic static double DistanceBetween(Point p1, Point p2)\n{\n\u00a0\u00a0\u00a0\u00a0return Math.Sqrt((p1.X - p2.X) * (p1.X - p2.X) + (p1.Y - p2.Y) * (p1.Y - p2.Y));\n}\n```", "```cpp\npublic double DistanceTo(Point p)\n{\n\u00a0\u00a0\u00a0\u00a0return DistanceBetween(this, p);\n}\n```", "```cpp\nvar p1 = new Point(3,1);\nvar p2 = new Point(3,4);\n```", "```cpp\nvar distance1 = p1.DistanceTo(p2);\n```", "```cpp\nvar distance2 = Point.DistanceBetween(p1, p2);\n```", "```cpp\n\u2013 3.\n```", "```cpp\npublic record MovieRecordV1\n{\n\u00a0\u00a0\u00a0\u00a0public string Title { get; }\n\u00a0\u00a0\u00a0\u00a0public string Director { get; }\n\u00a0\u00a0\u00a0\u00a0public string Producer { get; } \n\u00a0\u00a0\u00a0\u00a0public string Description { get; set; }\n\u00a0\u00a0\u00a0\u00a0public DateTime ReleaseDate { get; }\n\n\u00a0\u00a0\u00a0\u00a0public MovieRecordV1(string title, string director, string producer, DateTime releaseDate)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Title = title;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Director = director;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Producer = producer;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ReleaseDate = releaseDate;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\nprivate static void DemoRecord()\n{\n\u00a0\u00a0\u00a0\u00a0var movie1 = new MovieRecordV1(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Star Wars: Episode I \u2013 The Phantom Menace\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"George Lucas\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Rick McCallum\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new DateTime(1999, 5, 15));\n\n\u00a0\u00a0\u00a0\u00a0var movie2 = new MovieRecordV1(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Star Wars: Episode I \u2013 The Phantom Menace\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"George Lucas\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Rick McCallum\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new DateTime(1999, 5, 15));\n}\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine(movie1);\n```", "```cpp\nMovieRecordV1 { Title = Star Wars: Episode I - The Phantom Menace, Director = George Lucas, Producer\n= Rick McCallum, Description = , ReleaseDate = 5/15/1999 12:00:00 AM }\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine(movie1.Equals(movie2));\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine(movie1 == movie2);\n```", "```cpp\npublic record MovieRecord(string Title, string Director, string Producer, string Description, DateTime ReleaseDate);\n```", "```cpp\npublic record MovieRecord(string Title, string Director, string Producer, DateTime ReleaseDate)\n{\n\u00a0\u00a0\u00a0\u00a0public string Description { get; set; }\n}\n```", "```cpp\nvar movie3 = movie2 with { Description = \"Records can do that?\" };\nmovie2.Description = \"Changing original\";\nConsole.WriteLine(movie3);\n```", "```cpp\nMovieRecord { Title = Star Wars: Episode I - The Phantom Menace, Director = George Lucas, Producer\n= Rick McCallum, ReleaseDate = 5/15/1999 12:00:00 AM, Description = Records can do that? }\n```", "```cpp\npublic class House\n{\n\u00a0\u00a0\u00a0\u00a0public string Address { get; init; }\n\u00a0\u00a0\u00a0\u00a0public string Owner { get; init; }\n\u00a0\u00a0\u00a0\u00a0public DateTime? Built { get; init; }\n}\n```", "```cpp\nvar house2 = new House();\n```", "```cpp\nvar house1 = new House\n{\n\u00a0\u00a0\u00a0\u00a0Address = \"Kings street 4\",\n\u00a0\u00a0\u00a0\u00a0Owner = \"King\",\n\u00a0\u00a0\u00a0\u00a0Built = DateTime.Now\n};\n```", "```cpp\nvar text = \"123\";\nvar isNumber = int.TryParse(text, out var number);\n```", "```cpp\nvar values1 = new ValueTuple<Dog, Human, bool>(dog, human, isDogKnown);\n```", "```cpp\nvar values2 = (dog, human, isDogKnown);\n```", "```cpp\npublic (Dog, Human, bool) GetDogHumanAndBool()\n{\n\u00a0\u00a0\u00a0\u00a0var dog = new Dog(\"Sparky\");\n\u00a0\u00a0\u00a0\u00a0var human = new Human(\"Thomas\");\n\u00a0\u00a0\u00a0\u00a0bool isDogKnown = false;\n\n\u00a0\u00a0\u00a0\u00a0return (dog, human, isDogKnown);\n}\n```", "```cpp\nvar dogHumanAndBool = GetDogHumanAndBool();\nvar dog = dogHumanAndBool.Item1;\nvar human = dogHumanAndBool.Item2;\nvar boo = dogHumanAndBool.Item3;\n```", "```cpp\nvar (dog, human, boo) = GetDogHumanAndBool(); \n```", "```cpp\n    public enum TemperatureUnit\n    {\n    \u00a0\u00a0\u00a0\u00a0C,\n    \u00a0\u00a0\u00a0\u00a0F,\n    \u00a0\u00a0\u00a0\u00a0K\n    }\n    ```", "```cpp\n    public record Temperature(double Degrees, TemperatureUnit Unit);\n    ```", "```cpp\n    public interface ITemperatureConverter\n    {\n    \u00a0\u00a0\u00a0\u00a0public TemperatureUnit Unit { get; }\n    \u00a0\u00a0\u00a0\u00a0public Temperature ToC(Temperature temperature);\n    \u00a0\u00a0\u00a0\u00a0public Temperature FromC(Temperature temperature);\n    }\n    ```", "```cpp\n    public class ComposableTemperatureConverter\n    {\n    \u00a0\u00a0\u00a0\u00a0private readonly ITemperatureConverter[] _converters;\n    ```", "```cpp\n    public class InvalidTemperatureConverterException : Exception\n    {\n    \u00a0\u00a0\u00a0\u00a0public InvalidTemperatureConverterException(TemperatureUnit unit) : base($\"Duplicate converter for {unit}.\")\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0}\n\n    \u00a0\u00a0\u00a0\u00a0public InvalidTemperatureConverterException(string message) : base(message)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cpp\n    private static void RequireNotEmpty(ITemperatureConverter[] converters)\n    {\n    \u00a0\u00a0\u00a0\u00a0if (converters?.Length > 0 == false)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw new InvalidTemperatureConverterException(\"At least one temperature conversion must be supported\");\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cpp\n    private static void RequireNoDuplicate(ITemperatureConverter[] converters)\n    {\n    \u00a0\u00a0\u00a0\u00a0for (var index1 = 0; index1 < converters.Length - 1; index1++)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var first = converters[index1];\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (int index2 = index1 + 1; index2 < converters.Length; index2++)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var second = converters[index2];\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (first.Unit == second.Unit)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw new InvalidTemperatureConverterException(first.Unit);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cpp\n    public ComposableTemperatureConverter(ITemperatureConverter[] converters)\n    {\n    \u00a0\u00a0\u00a0\u00a0RequireNotEmpty(converters);\n    \u00a0\u00a0\u00a0\u00a0RequireNoDuplicate(converters);\n    \u00a0\u00a0\u00a0\u00a0_converters = converters;\n    }\n    ```", "```cpp\n    private ITemperatureConverter FindConverter(TemperatureUnit unit)\n    {\n    \u00a0\u00a0\u00a0\u00a0foreach (var converter in _converters)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (converter.Unit == unit)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return converter;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n\n    \u00a0\u00a0\u00a0\u00a0throw new InvalidTemperatureConversionException(unit);\n    }\n    ```", "```cpp\n    private Temperature ToCelsius(Temperature temperatureFrom)\n    {\n    \u00a0\u00a0\u00a0\u00a0var converterFrom = FindConverter(temperatureFrom.Unit);\n    \u00a0\u00a0\u00a0\u00a0return converterFrom.ToC(temperatureFrom);\n    }\n    ```", "```cpp\n    private Temperature CelsiusToOther(Temperature celsius, TemperatureUnit unitTo)\n    {\n    \u00a0\u00a0\u00a0\u00a0var converterTo = FindConverter(unitTo);\n    \u00a0\u00a0\u00a0\u00a0return converterTo.FromC(celsius);\n    }\n    ```", "```cpp\n    public Temperature Convert(Temperature temperatureFrom, TemperatureUnit unitTo)\n    {\n    \u00a0\u00a0\u00a0\u00a0var celsius = ToCelsius(temperatureFrom);\n    \u00a0\u00a0\u00a0\u00a0return CelsiusToOther(celsius, unitTo);\n    }\n    ```", "```cpp\n    public class KelvinConverter : ITemperatureConverter\n    {\n    \u00a0\u00a0\u00a0\u00a0public const double AbsoluteZero = -273.15;\n\n    \u00a0\u00a0\u00a0\u00a0public TemperatureUnit Unit => TemperatureUnit.K;\n\n    \u00a0\u00a0\u00a0\u00a0public Temperature ToC(Temperature temperature)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return new(temperature.Degrees + AbsoluteZero, TemperatureUnit.C);\n    \u00a0\u00a0\u00a0\u00a0}\n\n    \u00a0\u00a0\u00a0\u00a0public Temperature FromC(Temperature temperature)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return new(temperature.Degrees - AbsoluteZero, Unit);\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cpp\n    public class FahrenheitConverter : ITemperatureConverter\n    {\n    \u00a0\u00a0\u00a0\u00a0public TemperatureUnit Unit => TemperatureUnit.F;\n\n    \u00a0\u00a0\u00a0\u00a0public Temperature ToC(Temperature temperature)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return new(5.0/9 * (temperature.Degrees - 32), TemperatureUnit.C);\n    \u00a0\u00a0\u00a0\u00a0}\n\n    \u00a0\u00a0\u00a0\u00a0public Temperature FromC(Temperature temperature)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return new(9.0 / 5 * temperature.Degrees + 32, Unit);\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0public class CelsiusConverter : ITemperatureConverter\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public TemperatureUnit Unit => TemperatureUnit.C;\n\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public Temperature ToC(Temperature temperature)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return temperature;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public Temperature FromC(Temperature temperature)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return temperature;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    Solution.cs\n    public static class Solution\n    {\n    \u00a0\u00a0\u00a0\u00a0public static void Main()\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ITemperatureConverter[] converters = {new FahrenheitConverter(), new KelvinConverter(), new CelsiusConverter()};\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var composableConverter = new ComposableTemperatureConverter(converters);\n\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var celsius = new Temperature(20.00001, TemperatureUnit.C);\n\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var celsius1 = composableConverter.Convert(celsius, TemperatureUnit.C);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var fahrenheit = composableConverter.Convert(celsius1, TemperatureUnit.F);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var kelvin = composableConverter.Convert(fahrenheit, TemperatureUnit.K);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var celsiusBack = composableConverter.Convert(kelvin, TemperatureUnit.C);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"{celsius} = {fahrenheit}\");\n    ```", "```cpp\nYou can find the complete code here: https://packt.link/ruBph.\n```", "```cpp\n    Temperature { Degrees = 20.00001, Unit = C } = Temperature { Degrees = 68.000018, Unit = F }\n    Temperature { Degrees = 68.000018, Unit = F } = Temperature { Degrees = -253.14998999999997, Unit = K }\n    Temperature { Degrees = -253.14998999999997, Unit = K } = Temperature { Degrees = 20.000010000000003, Unit = C }\n    ```", "```cpp\n    Adding circles of radius of 3 and 3 results in a new circle with a radius 4.242640687119285\n    ```"]