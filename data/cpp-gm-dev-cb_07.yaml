- en: Chapter 7. Organizing and Backing Up
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。组织和备份
- en: 'In this chapter, the following recipes will be covered:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，将涵盖以下内容：
- en: Versions of source control
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本控制
- en: Installing a versioning client
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装一个版本控制客户端
- en: Selecting a host to save your data
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择一个主机来保存您的数据
- en: Adding source control to your code – committing and updating your code
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为您的代码添加源代码控制-提交和更新您的代码
- en: Resolving conflicts
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决冲突
- en: Creating a branch
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个分支
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Let us consider that we need to work on a project that has many developers.
    If every developer is working on different source files, one (rather horrible)
    way to work is to get the newly updated source file in an e-mail or an FTP client
    and replace it in your project. Now what if the developers, including yourself,
    are working on the same source file. We can still follow this horrible way and
    add the parts that we have worked on to the file we received via FTP, but very
    soon this is going to become very cumbersome and make it almost impossible to
    work. So we have a system of saving the files to some central repository or distributed
    repository, and then have the means to update and send the code so that every
    developer is working with the latest copy. There are various ways to perform this
    and it is commonly referred to as versioning the code.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们需要在一个有很多开发人员的项目上工作。如果每个开发人员都在不同的源文件上工作，一种（相当可怕的）工作方式是通过电子邮件或FTP客户端获取新更新的源文件，并将其替换到您的项目中。现在如果开发人员，包括您自己，都在同一个源文件上工作。我们仍然可以遵循这种可怕的方式，并将我们已经工作过的部分添加到我们通过FTP收到的文件中，但很快这将变得非常繁琐，几乎不可能工作。因此，我们有一个将文件保存到某个中央仓库或分布式仓库的系统，然后有手段更新和发送代码，以便每个开发人员都使用最新的副本。有各种各样的方法来执行这个操作，通常被称为对代码进行版本控制。
- en: Versions of source control
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 版本控制
- en: Revision control is a very effective way to share files across developers. There
    are various version control systems and each has its own merits and drawbacks.
    We will be looking at the three most popular version control systems out there.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 修订控制是跨开发人员共享文件的一种非常有效的方式。有各种版本控制系统，每种系统都有其优点和缺点。我们将看看目前最流行的三种版本控制系统。
- en: Getting ready
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To work through this recipe, you will need a machine running Windows. No other
    prerequisites are required.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个教程，您需要一台运行Windows的计算机。不需要其他先决条件。
- en: How to do it...
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In this recipe, we will see the different types of source control available
    to us:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将看到可用于我们的不同类型的源代码控制：
- en: 'Go to this link and download for an SVN client: [http://tortoisesvn.net/downloads.html](http://tortoisesvn.net/downloads.html)'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到此链接并下载一个SVN客户端：[http://tortoisesvn.net/downloads.html](http://tortoisesvn.net/downloads.html)
- en: 'Go to this link and download for a GIT client: [https://desktop.github.com](https://desktop.github.com)'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到此链接并下载GIT客户端：[https://desktop.github.com](https://desktop.github.com)
- en: 'Go to this link and download for a Mercurial client: [http://tortoisehg.bitbucket.org/download/index.html](http://tortoisehg.bitbucket.org/download/index.html)'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到此链接并下载一个Mercurial客户端：[http://tortoisehg.bitbucket.org/download/index.html](http://tortoisehg.bitbucket.org/download/index.html)
- en: How it works...
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: There are various types of SVN clients available to us. Each has its own merits
    and drawbacks.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 有各种类型的SVN客户端可供我们使用。每种都有其优点和缺点。
- en: SVN has a lot of features that fix issues relating to atomic operations and
    source corruption. It is free and open source. It has lots of plugins for different
    IDEs. However, one of the major drawbacks of this tool is that is comparatively
    very slow in its operations.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: SVN具有许多功能，可以解决与原子操作和源文件损坏相关的问题。它是免费和开源的。它有许多不同IDE的插件。然而，这个工具的一个主要缺点是它在操作中相对非常慢。
- en: GIT was made primarily for Linux but it improves the operation speed a lot.
    It does work on UNIX systems as well. It has cheap branch operations but it is
    not totally optimized for a single developer and its Windows support is limited
    compared to Linux. However, GIT is extremely popular and many prefer GIT over
    SVN.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: GIT主要是为Linux而设计的，但它大大提高了操作速度。它也可以在UNIX系统上运行。它具有廉价的分支操作，但与Linux相比，它对单个开发人员的Windows支持有限。然而，GIT非常受欢迎，许多人更喜欢GIT而不是SVN。
- en: Installing a versioning client
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装一个版本控制客户端
- en: There are plenty of versioning clients. However, we are going to look at an
    SVN client. **Tortoise SVN** is by far the most popular among SVN users. Although
    GIT is another system that is immensely popular, we will look at Tortoise SVN
    for this recipe. Tortoise SVN provides a very friendly and intuitive interface,
    so it is very easy for beginners to grasp as well. Within a few hours, a total
    newbie can understand the basics of using Tortoise SVN.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多版本控制客户端。然而，我们将看看一个SVN客户端。Tortoise SVN是迄今为止最受SVN用户欢迎的。尽管GIT是另一个非常受欢迎的系统，但我们将在这个教程中看看Tortoise
    SVN。Tortoise SVN提供了一个非常友好和直观的界面，因此即使是初学者也很容易掌握。在几个小时内，一个完全的新手就可以理解使用Tortoise SVN的基础知识。
- en: Getting ready
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You need a Windows machine. No other prerequisite is needed.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要一台Windows机器。不需要其他先决条件。
- en: How to do it...
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In this recipe, we will find out how easy it is to install and use Tortoise
    SVN:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将发现安装和使用Tortoise SVN有多么容易：
- en: 'Go to this link: [http://tortoisesvn.net/downloads.html](http://tortoisesvn.net/downloads.html)'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到此链接：[http://tortoisesvn.net/downloads.html](http://tortoisesvn.net/downloads.html)
- en: Download and install the correct version, based on whether you are using a 32-bit
    or a 64-bit Windows machine.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据您使用的是32位还是64位Windows机器，下载并安装正确的版本。
- en: Create a new folder on your computer.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的计算机上创建一个新文件夹。
- en: Right-click on the folder.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击文件夹。
- en: Check that a new command called **SVN Checkout…** is now available for use.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查一个名为**SVN Checkout…**的新命令现在可以使用。
- en: How it works...
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: After we go the download site and install the package, it gets installed on
    the system and also lots of shell and kernel commands are added. So when we right-click
    on the folder, the **SVN Checkout…** command is now added as a property for any
    new folder. There is also another command called **Tortoise SVN** available to
    us, which has even more commands. After we check out a project, the **SVN Checkout…**
    gets replaced with **SVN Update** or **SVN Commit**. We just need to make sure
    that we have added the correct installer to the machine, based on the OS version
    we are using.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们转到下载站点并安装软件包后，它将安装在系统上，并添加了许多shell和内核命令。因此，当我们右键单击文件夹时，“**SVN Checkout…**”命令现在被添加为任何新文件夹的属性。还有另一个名为**Tortoise
    SVN**的命令可供我们使用，它还有更多命令。在我们检出项目后，“**SVN Checkout…**”将被替换为**SVN Update**或**SVN Commit**。我们只需要确保根据我们使用的操作系统版本向计算机添加了正确的安装程序。
- en: Selecting a host to save your data
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择托管数据的主机
- en: Before we can start versioning our code, we need to decide where we need to
    save our code files to. There are quite a few ways to do this, but we will discuss
    the two most popular ways. The first way is to save the files locally and treat
    your personal computer as a server to host data. The second method is to use a
    cloud service to host the data files for us.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始对我们的代码进行版本控制之前，我们需要决定将代码文件保存到哪里。有很多种方法可以做到这一点，但我们将讨论两种最流行的方法。第一种方法是将文件保存在本地，并将个人计算机视为托管数据的服务器。第二种方法是使用云服务来为我们托管数据文件。
- en: Getting ready
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You need to have a working Windows machine.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要一个可用的Windows计算机。
- en: How to do it...
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: In this recipe, we will find out how easy it is to host the files locally or
    on the cloud.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将了解如何轻松地在本地或云端托管文件。
- en: 'For the files saved on the cloud follow these steps:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 对于保存在云端的文件，请按照以下步骤操作：
- en: 'Go to the following link: [https://xp-dev.com](https://xp-dev.com).'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到以下链接：[https://xp-dev.com](https://xp-dev.com)。
- en: Go to **Plans** and select a plan most suitable to your needs. There is also
    a free plan for 10 MB.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**计划**并选择最适合您需求的计划。还有一个免费的10MB计划。
- en: After selecting a plan, you will be redirected to create a name for the current
    project.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择计划后，您将被重定向以为当前项目创建名称。
- en: The new project will now show up on the dashboard. You can create multiple projects
    based on your plan.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 新项目现在将显示在仪表板上。您可以根据您的计划创建多个项目。
- en: 'Click on a project. This should open up more tabs. The most important ones
    currently are:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击一个项目。这应该打开更多选项卡。目前最重要的是：
- en: '**Repository**'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储库**'
- en: '**Project Tracking**'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目跟踪**'
- en: '**Activity**'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**活动**'
- en: '**Settings**'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设置**'
- en: Click on **Repository** to create a new repository.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**存储库**以创建一个新的存储库。
- en: The link generated can now be used to version our files in the project.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成的链接现在可以用于对项目中的文件进行版本控制。
- en: To add users to the project, click on **Settings** and invite users to the project.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要向项目添加用户，请单击**设置**并邀请用户加入项目。
- en: 'For the files saved on the local server:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 对于保存在本地服务器上的文件：
- en: Save the new project or an empty project on your computer.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新项目或空项目保存在您的计算机上。
- en: 'Download **Visual SVN Server** from here: [https://www.visualsvn.com/server/](https://www.visualsvn.com/server/).'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从这里下载**Visual SVN Server**：[https://www.visualsvn.com/server/](https://www.visualsvn.com/server/)。
- en: Install the software.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装软件。
- en: Then create a project from the existing project.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后从现有项目创建一个项目。
- en: Your project is now ready to be version controlled.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的项目现在已准备好进行版本控制。
- en: To add users, click on **Users** and add a username and password.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要添加用户，请单击**用户**并添加用户名和密码。
- en: How it works...
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When we create a project on `xp-dev`, what actually happens is that `xp-dev`
    creates a cloud space for us on their server, based on whatever plan we have chosen.
    After that, for each iteration of the file, it saves a copy on the server. On
    the dashboard, once we create one repository, we can create a new repository and
    the URL generated will now be the URL of the project. In that way, we can revert
    back to any iteration or restore a file if we mistakenly delete it. When we commit
    a file, a new copy of the file is now saved on the server. When we update the
    project, the latest version on the server is now pushed to your local machine.
    In this way, `xp-dev` saves the entire history of activities for all updates and
    commits. The drawback of the system is that if the `xp-dev` client is down, then
    all the cloud services will also be down. Hence, the project will suffer due to
    you not being able to do any updates or commits.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在`xp-dev`上创建项目时，实际上是`xp-dev`根据我们选择的计划在其服务器上为我们创建了一个云空间。之后，对于文件的每次迭代，它都会在服务器上保存一个副本。在仪表板上，一旦我们创建一个存储库，我们就可以创建一个新的存储库，生成的URL现在将是项目的URL。通过这种方式，我们可以恢复到任何迭代或恢复文件，如果我们误删了它。当我们提交文件时，文件的新副本现在保存在服务器上。当我们更新项目时，服务器上的最新版本现在被推送到您的本地计算机。通过这种方式，`xp-dev`保存了所有更新和提交的整个活动历史。系统的缺点是，如果`xp-dev`客户端关闭，那么所有云服务也将关闭。因此，由于您无法进行任何更新或提交，项目将会受到影响。
- en: The other way to host is to use your own local machine. Visual SVN Server basically
    turns your computer into a server. After that, the process is pretty similar to
    how `xp-dev` handles all updates and commits.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 托管的另一种方法是使用您自己的本地计算机。Visual SVN Server基本上将您的计算机变成了服务器。之后，该过程与`xp-dev`处理所有更新和提交的方式非常相似。
- en: What we could also do is take some space from Amazon or Azure and use that space
    as a server. In that case, the steps are pretty similar to the second method (local
    server). After logging in to Amazon space or Azure space, treat that as your machine
    and then repeat the steps for the local server.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以从亚马逊或Azure那里获取一些空间，并将该空间用作服务器。在这种情况下，步骤与第二种方法（本地服务器）非常相似。登录到亚马逊空间或Azure空间后，将其视为您的计算机，然后重复本地服务器的步骤。
- en: Adding source control – committing and updating your code
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加源代码控制-提交和更新您的代码。
- en: One of the most important things that you can do to files when working on a
    collaborative project or individually is to add source control. The biggest advantage
    of doing so is that the files are always backed up and versioned. Let's say that
    you made some local changes and there are lots of crashes. As a result of those
    crashes, what will you do? One option is to retrace your steps and change them
    back to what they were before. This is a time-wasting process and there is also
    risk involved. If your files are backed up, all you need to do is a revert operation
    to a particular revision and the code is restored to that point. Similarly, if
    we delete a file by mistake, we can always update the project and it will pull
    the most current file from the server.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在协作项目或个人工作时，您可以对文件执行的最重要的操作之一是添加源代码控制。这样做的最大优势是文件始终有备份和版本控制。假设您进行了一些本地更改，并且发生了许多崩溃。由于这些崩溃，您将怎么做？一种选择是追溯您的步骤并将它们改回以前的状态。这是一个浪费时间的过程，也存在风险。如果您的文件有备份，您只需要对特定的修订执行还原操作，代码就会恢复到那一点。同样，如果我们错误地删除了一个文件，我们总是可以更新项目，它将从服务器中拉取最新的文件。
- en: Getting ready
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, you will need a Windows machine and an installed version of
    an SVN client. A data hosting service should already be integrated by now and
    you should have a URL. No other prerequisites are required.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个教程，您将需要一台Windows机器和安装了SVN客户端的版本。数据托管服务现在应该已经集成，并且您应该有一个URL。不需要其他先决条件。
- en: How to do it...
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In this recipe, we will find out how easy it is to add source control:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将找出添加源代码控制有多么容易：
- en: Create a new folder on the machine.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在机器上创建一个新文件夹。
- en: Rename it to whatever you want to call it.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其重命名为您想要的任何名称。
- en: Right-click and check whether the SVN command is showing up as one of the options.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击并检查SVN命令是否显示为其中一个选项。
- en: Click on **SVN Checkout**. Use the URL you received from `xp-dev` or your local
    server or cloud server.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**SVN Checkout**。使用您从`xp-dev`或您的本地服务器或云服务器收到的URL。
- en: Add a file into the new folder. It can be in any format.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件添加到新文件夹中。它可以是任何格式。
- en: Right-click on the file and select **Tortoise SVN** |**Add**.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击文件，然后选择**Tortoise SVN** | **添加**。
- en: Go to the root folder and select **SVN** | **Commit**.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到根文件夹，然后选择**SVN** | **提交**。
- en: Delete the file.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除文件。
- en: Go to **SVN** | **Update**.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**SVN** | **更新**。
- en: Make some changes to the file.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对文件进行一些更改。
- en: Select **SVN** | **Commit**.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**SVN** | **提交**。
- en: Then select **Tortoise SVN** and then **Revert to this revision** (revision
    `1`).
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后选择**Tortoise SVN**，然后**还原到此修订版**（修订版`1`）。
- en: How it works...
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: After the SVN checkout is successful, the project is either copied from the
    local machine to the server or copied from the server to the local machine, based
    on which is the most up to date. Once we add the file into the folder, we have
    to remember that the file is still local. Only we can see it and have access to
    it. Others who are working on that project will have no idea about it. Now, one
    of the common mistakes that a new programmer may make at this stage is to forget
    to add the file to the SVN. When you commit the project, that file will not show
    up. There is a checkbox in the commit section for **Show unversioned files**.
    However, I will not recommend that approach, as all temporary files will also
    be shown in this case. A better approach is to right-click on the file and go
    to **Tortoise SVN** | **Add**. This will add the file for revisioning. Now we
    can do an SVN commit and the file will be stored on the server.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: SVN检出成功后，项目要么从本地机器复制到服务器，要么从服务器复制到本地机器，具体取决于哪个是最新的。一旦我们将文件添加到文件夹中，我们必须记住文件仍然是本地的。只有我们可以看到它并访问它。正在处理该项目的其他人将对此一无所知。现在，一个新程序员在这个阶段可能犯的一个常见错误是忘记将文件添加到SVN。当您提交项目时，该文件将不会显示。在提交部分有一个**显示未版本化文件**的复选框。但是，我不建议这种方法，因为在这种情况下，所有临时文件也将显示出来。一个更好的方法是右键单击文件，然后转到**Tortoise
    SVN** | **添加**。这将为修订添加文件。现在我们可以进行SVN提交，文件将存储在服务器上。
- en: When we delete the file, we again have to remember that we have just deleted
    the file locally. The instance of it still exists on the server. So when we perform
    an SVN update, the file will again be restored. We have to be careful not to do
    a **Tortoise SVN** | **Delete and Commit**. This will remove it from the server
    for that revision. Now if we make some changes to the file, we can **SVN Commit**
    it. We no longer need to select **Tortoise SVN** | **Add**. This creates a new
    version of the file on the server. Both versions of the file are now present.
    We can have as many versions as we need. To access any revision, we need to select
    either the root folder or any particular file and perform a **Revert to this revision**
    `(number)`. The server then looks up the version that we requested and pushes
    the correct copy to us.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们删除文件时，我们必须记住我们只是在本地删除了文件。它仍然存在于服务器上。因此，当我们执行SVN更新时，文件将再次被恢复。我们必须小心不要执行**Tortoise
    SVN** | **删除和提交**。这将从服务器中删除该修订版的文件。现在，如果我们对文件进行一些更改，我们可以**SVN提交**它。我们不再需要选择**Tortoise
    SVN** | **添加**。这将在服务器上创建文件的新版本。现在两个版本的文件都存在。我们可以拥有任意数量的版本。要访问任何修订版，我们需要选择根文件夹或任何特定文件，然后执行**还原到此修订版**（编号）。服务器然后查找我们请求的版本，并将正确的副本推送给我们。
- en: Resolving conflicts
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决冲突
- en: Let us consider a single source file that has been worked on by multiple programmers.
    You might have some local changes. When you try to update, it may happen that
    the SVN client is smart enough to merge the files together. However, in most cases
    it will not be able to merge properly and we need to resolve conflicts effectively.
    The SVN client, however, will show the files that are in conflict.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个由多个程序员共同处理的单个源文件。您可能有一些本地更改。当您尝试更新时，可能会发生SVN客户端足够智能地将文件合并在一起。但是，在大多数情况下，它将无法正确合并，我们需要有效地解决冲突。但是，SVN客户端将显示冲突的文件。
- en: Getting ready
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, you will need a Windows machine and an installed version of
    an SVN client. A versioned project is also necessary.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个教程，您需要一台Windows机器和安装了SVN客户端的版本。还需要一个版本化的项目。
- en: How to do it...
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In this recipe, we will find out how easy it is to resolve conflicts:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将发现解决冲突有多容易：
- en: Take a project that is already versioned and committed to SVN.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拿一个已经版本化并提交到SVN的项目。
- en: Open a file in an editor and make changes to the file.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑器中打开文件并对文件进行更改。
- en: Perform the **SVN Update** operation.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行**SVN更新**操作。
- en: The files now show a conflict.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文件现在显示冲突。
- en: See the differences between the two files using the **Diff tool** or **Win Merge**
    (you may need to install Win Merge separately).
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**Diff工具**或**Win Merge**查看两个文件之间的差异（您可能需要单独安装Win Merge）。
- en: Generally, the left-hand side will be the local revision and the right-hand
    side will be the version on the server. However, these could be swapped as well.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通常，左侧将是本地修订版本，右侧将是服务器上的版本。但是，这些也可以互换。
- en: 'After looking at the differences, you may resolve the conflicts in two ways:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看差异后，您可以以两种方式解决冲突：
- en: Select the portions that you want from the server and the portions that you
    want from the local changes.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择你想要从服务器和本地更改中选择的部分。
- en: Select **Resolve conflict using "mine"** or select **Resolve conflict using
    "theirs"**.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择**使用“我的”解决冲突**或选择**使用“他们的”解决冲突**。
- en: How it works...
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: What happens in a conflict is that the client on its own cannot make a decision
    on whether the local copy or the server copy should be treated as the correct
    working version. Most good clients will show this as an error once we do an update.
    Other clients will insert both sections in the code, generally with an `r>>>>>`
    or an `m>>>>` notation, to denote which section is the server and which section
    is ours. On the Tortoise SVN, if we choose to ignore conflicts, then these notations
    may be displayed as separate files or included in the file. A better approach
    is to always resolve conflicts. If we use a tool such as Win Merge, it will show
    us the two revisions side by side and we can compare and choose the sections we
    need, or the whole file. After that, once we have taken the changes and committed
    them, that file will become the updated version on the server. So others updating
    their code will also get the changes we made.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 冲突发生时，客户端无法决定本地副本还是服务器副本应该被视为正确的工作版本。大多数良好的客户端在更新后会显示这个错误。其他客户端会在代码中插入两个部分，通常用`r>>>>>`或`m>>>>`标记，表示哪一部分是服务器的，哪一部分是我们的。在Tortoise
    SVN上，如果我们选择忽略冲突，那么这些标记可能会显示为单独的文件或包含在文件中。更好的方法是始终解决冲突。如果我们使用诸如Win Merge之类的工具，它会将两个修订版本并排显示，我们可以比较并选择我们需要的部分，或整个文件。之后，一旦我们接受了更改并提交了它们，该文件将成为服务器上的更新版本。因此，更新他们的代码的其他人也会得到我们所做的更改。
- en: Creating a branch
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个分支
- en: Let us consider that we are making a game which is due for release at the end
    of the year. However, we also need to showcase a polished version of the game
    for GDC or E3\. At that point, the producer might ask us to make a build specific
    to E3 or GDC. This GDC or E3 build can be polished and made stable, whereas the
    main build may continue to be experimented with by adding new features.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们假设我们正在制作一款游戏，该游戏计划在年底发布。然而，我们还需要展示一个经过精心打磨的版本供GDC或E3展示。此时，制作人可能会要求我们制作一个特定于E3或GDC的版本。这个GDC或E3版本可以被打磨并稳定下来，而主要版本可能会继续通过添加新功能进行实验。
- en: Getting ready
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To work through this recipe, you will need a machine running Windows with an
    installed version of an SVN client. A versioned project is also required. No other
    prerequisites are needed.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本教程，您需要一台运行Windows的机器，并安装了SVN客户端的版本。还需要一个版本化的项目。不需要其他先决条件。
- en: How to do it...
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In this recipe, we will find out how easy it is to create a branch:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将发现创建一个分支有多容易：
- en: Right-click on the versioned project.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击版本化项目。
- en: Go to the repo browser.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到仓库浏览器。
- en: Select the root folder from which you want to create the branch.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择要创建分支的根文件夹。
- en: Select the destination.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择目的地。
- en: A branch is now created.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在创建了一个分支。
- en: Check out the created branch onto the machine by using the URL.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用URL在机器上检出创建的分支。
- en: How it works...
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When we create a branch from a root folder, a mirror copy of that folder and
    consequent subfolders is created. From then on, the two can work independently.
    The main root has a URL, and the branch also has its own URL. We can update and
    commit to the branch as we would for the root folder. Also, all other functionalities
    are available for the branch as usual. Sometimes, after we make changes to the
    branch, we might need to push them back to the root. Although the SVN client,
    Tortoise SVN, provides us with a tool to merge the branches, it is rarely successful
    and more often than not we need to do the merge manually.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们从根文件夹创建一个分支时，会创建该文件夹及其后续子文件夹的镜像副本。从那时起，这两者可以独立工作。主根有一个URL，分支也有自己的URL。我们可以像为根文件夹一样更新和提交到分支。此外，所有其他功能对分支也是可用的。有时，在我们对分支进行更改后，我们可能需要将它们推回到根目录。虽然SVN客户端Tortoise
    SVN为我们提供了一个合并分支的工具，但它很少成功，往往我们需要手动进行合并。
