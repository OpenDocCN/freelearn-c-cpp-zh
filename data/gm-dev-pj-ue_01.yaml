- en: 1\. Unreal Engine Introduction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.虚幻引擎介绍
- en: Overview
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 概述
- en: This chapter will be an introduction to the Unreal Engine editor. You will get
    to know about the editor's interface; how to add, remove, and manipulate objects
    in a level; how to use Unreal Engine's Blueprint visual scripting language; and
    how to use materials in combination with meshes.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将是对虚幻引擎编辑器的介绍。您将了解编辑器的界面；如何在关卡中添加、移除和操作对象；如何使用虚幻引擎的蓝图可视化脚本语言；以及如何将材质与网格结合使用。
- en: By the end of this chapter, you will be able to navigate the Unreal Engine editor,
    create your own Actors, manipulate them inside the level, and create materials.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将能够浏览虚幻引擎编辑器，创建自己的角色，操纵它们在关卡中，并创建材质。
- en: Introduction
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Welcome to *Game Development Projects with Unreal Engine*. If this is the first
    time you're using **Unreal Engine 4** (**UE4**), this book will support you in
    getting started with one of the most in-demand game engines on the market. You
    will discover how to build up your game development skills and how to express
    yourself through the creation of your own video games. If you've already tried
    using UE4, this book will help you further develop your knowledge and skills,
    so you can build games more easily and effectively.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到*使用虚幻引擎进行游戏开发项目*。如果这是您第一次使用**虚幻引擎4**（**UE4**），本书将帮助您开始使用市场上最受欢迎的游戏引擎之一。您将了解如何建立您的游戏开发技能，以及如何通过创建自己的视频游戏来表达自己。如果您已经尝试过使用UE4，本书将帮助您进一步发展您的知识和技能，以便更轻松、更有效地制作游戏。
- en: A game engine is a software application that allows you to produce video games
    from the ground up. Their feature sets vary significantly but usually allow you
    to import multimedia files, such as 3D models, images, audio, and video, and manipulate
    those files through the use of programming, where you can use programming languages
    such as C++, Python, and Lua, among others.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏引擎是一种软件应用程序，允许您从头开始制作视频游戏。它们的功能集有很大的差异，但通常允许您导入多媒体文件，如3D模型、图像、音频和视频，并通过编程来操作这些文件，您可以使用C++、Python、Lua等编程语言。
- en: Unreal Engine 4 uses two main programming languages, C++ and Blueprint, the
    latter being a visual scripting language that allows you to do most of what C++
    also allows. Although we will be teaching a bit of Blueprint in this book, we
    will be focusing mostly on C++, and hence expect you to have a basic understanding
    of the language, including topics such as *Variables*, *Functions*, *Classes*,
    *Inheritance*, and *Polymorphism*. We will remind you about these topics throughout
    the book where appropriate.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 虚幻引擎4使用两种主要的编程语言，C++和蓝图，后者是一种可视化脚本语言，允许您做大部分C++也可以做的事情。虽然本书将教授一些蓝图知识，但我们将主要关注C++，因此希望您对这种语言有基本的了解，包括*变量*、*函数*、*类*、*继承*和*多态*等主题。我们会在适当的时候在本书中提醒您这些主题。
- en: 'Examples of popular video games made with Unreal Engine 4 include *Fortnite*,
    *Final Fantasy VII Remake*, *Borderlands 3*, *Star Wars: Jedi Fallen Order*, *Gears
    5*, and *Sea of Thieves*, among many others. All of these have a very high level
    of visual fidelity, are well-known, and have or had millions of players.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 使用虚幻引擎4制作的热门视频游戏示例包括*堡垒之夜*、*最终幻想7重制版*、*无主之地3*、*星球大战：绝地陨落*、*战争机器5*和*海盗之海*，还有许多其他游戏。所有这些游戏都具有非常高的视觉保真度，广为人知，并且拥有或曾经拥有数百万玩家。
- en: 'At the following link, you''ll be able to see some of the great games made
    with Unreal Engine 4: [https://www.youtube.com/watch?v=lrPc2L0rfN4](https://www.youtube.com/watch?v=lrPc2L0rfN4).
    This showcase will show you the variety of games that Unreal Engine 4 allows you
    to make, both in visual and gameplay style.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下链接中，您可以看到一些使用虚幻引擎4制作的优秀游戏：[https://www.youtube.com/watch?v=lrPc2L0rfN4](https://www.youtube.com/watch?v=lrPc2L0rfN4)。这个展示将向您展示虚幻引擎4允许您制作的游戏的多样性，无论是在视觉还是游戏风格上。
- en: If you'd like to one day make games such as the ones shown in the video, or
    contribute to them in any way, you've taken the first step in that direction.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望有朝一日制作像视频中展示的游戏，或以任何方式为其做出贡献，您已迈出了那个方向的第一步。
- en: We'll now begin with this first step, where we will start learning about the
    Unreal Engine editor. We will learn about its interface, how to manipulate objects
    inside a level, how to create our own objects, how to use the Blueprint scripting
    language, and what the main game events do, as well as how to create materials
    for meshes.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将开始这第一步，我们将开始学习虚幻引擎编辑器。我们将了解其界面，如何在关卡中操纵对象，如何创建我们自己的对象，如何使用蓝图脚本语言，以及主要游戏事件的作用，以及如何为网格创建材质。
- en: Let's start this chapter by learning how to create a new Unreal Engine 4 project
    in this first exercise.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从学习如何在这个第一个练习中创建一个新的虚幻引擎4项目开始这一章。
- en: Note
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Before you continue this chapter, make sure you have installed all the necessary
    software mentioned in the *Preface*.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续本章之前，请确保您已安装了*前言*中提到的所有必要软件。
- en: 'Exercise 1.01: Creating an Unreal Engine 4 Project'
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习1.01：创建一个虚幻引擎4项目
- en: In this first exercise, we will learn how to create a new Unreal Engine 4 project.
    UE4 has predefined project templates which allow you to implement a basic setup
    for your project. We'll be using the `Third Person` template project in this exercise.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个第一个练习中，我们将学习如何创建一个新的虚幻引擎4项目。UE4有预定义的项目模板，允许您为项目实现基本设置。在这个练习中，我们将使用`第三人称`模板项目。
- en: 'The following steps will help you complete this exercise:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助您完成这个练习：
- en: After installing Unreal Engine version 4.24, launch the editor by clicking the
    `Launch` button of the version icon.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装虚幻引擎4.24版本后，通过点击版本图标的`启动`按钮来启动编辑器。
- en: After you've done so, you'll be greeted with the engine's projects window, which
    will show you the existing projects that you can open and work on and also give
    you the option to create a new project. Because we have no projects yet, the `Recent
    Projects` section will be empty. To create a new project, you'll first have to
    choose `Project Category`, which in our case will be `Games`.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成以上步骤后，您将会看到引擎的项目窗口，其中将显示您可以打开和处理的现有项目，并且还可以选择创建新项目。因为我们还没有项目，所以“最近的项目”部分将是空的。要创建新项目，您首先必须选择“项目类别”，在我们的情况下将是“游戏”。
- en: After you've selected that option, click the `Next` button. After that, you'll
    see the project templates window. This window will show all the available project
    templates in the Unreal Engine. When creating a new project, instead of having
    that project start off empty, you have the option to add some assets and code
    out of the box, which you can then modify to your liking. There are several project
    templates available for different types of games, but we'll want to go with the
    `Third Person` project template in this case.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择了该选项后，点击“下一步”按钮。之后，您将看到项目模板窗口。该窗口将显示Unreal Engine中所有可用的项目模板。在创建新项目时，您可以选择添加一些资产和代码，而不是让项目从空白开始，然后您可以根据自己的喜好进行修改。有几种不同类型游戏的项目模板可供选择，但在这种情况下，我们将选择“第三人称”项目模板。
- en: Select that template and click the `Next` button, which should take you to the
    `Project Settings` window.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择该模板并点击“下一步”按钮，这将带您到“项目设置”窗口。
- en: 'In this window, you''ll be able to choose a few options related to your project:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在此窗口中，您可以选择与项目相关的一些选项：
- en: '`Blueprint or C++`: Choose whether you want to be able to add C++ classes.
    The default option may be `Blueprint`, but in our case, we''ll want to select
    the `C++` option.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “蓝图或C++”：选择是否要能够添加C++类。默认选项可能是“蓝图”，但在我们的情况下，我们将选择“C++”选项。
- en: '`Quality`: Choose whether you want your project to have high-quality graphics
    or high performance. You can set this option to `Maximum Quality`.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “质量”：选择您希望项目具有高质量图形还是高性能。您可以将此选项设置为“最高质量”。
- en: '`Raytracing`: Choose whether you want Raytracing enabled or disabled. Raytracing
    is a novel graphics rendering technique which allows you to render objects by
    simulating the path of light (using light rays) over a digital environment. Although
    this technique is rather costly in terms of performance, it also provides much
    more realistic graphics, especially when it comes to lighting. You can set it
    to `disabled`.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “光线追踪”：选择是否启用光线追踪。光线追踪是一种新颖的图形渲染技术，它允许您通过模拟光线在数字环境中的路径（使用光线）来渲染物体。尽管这种技术在性能方面相当昂贵，但在照明方面尤其提供了更加逼真的图形。您可以将其设置为“禁用”。
- en: '`Target Platforms`: Choose the main platforms you''ll want this project to
    run on. Set this option to `Desktop/Console`.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “目标平台”：选择您希望该项目运行的主要平台。将此选项设置为“桌面/游戏机”。
- en: '`Starter Content`: Choose whether you want this project to come with an additional
    set of basic assets. Set this option to `With Starter Content`.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “入门内容”：选择是否希望该项目附带一组基本资产。将此选项设置为“带入门内容”。
- en: '`Location and Name`: At the bottom of the window, you''ll be able to choose
    the location where your project will be stored on your computer and its name.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “位置和名称”：在窗口底部，您可以选择项目在计算机上存储的位置和名称。
- en: After you've made sure that all the options are set to their intended values,
    click the `Create Project` button. This will cause your project to be created
    according to the parameters you set and may take a few minutes until it's ready.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保所有选项都设置为预期值后，点击“创建项目”按钮。这将根据您设置的参数创建项目，并可能需要几分钟才能准备好。
- en: Let's now start learning about Unreal Engine 4 by performing the steps in the
    next section, where we'll learn some of the basics of using the editor.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们通过执行下一节中的步骤来开始学习Unreal Engine 4的基础知识，我们将学习如何使用编辑器的一些基础知识。
- en: Getting to Know Unreal
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解Unreal
- en: You will now be introduced to the Unreal Engine editor, which is a fundamental
    topic to get familiar with Unreal Engine 4.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您将被介绍Unreal Engine编辑器，这是一个非常重要的主题，让您熟悉Unreal Engine 4。
- en: When your project has finished generating, you should see the Unreal Engine
    editor open automatically. This screen is likely the one that you will see the
    most when working with Unreal Engine, so it is important that you get accustomed
    to it.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当您的项目生成完成后，您应该会看到Unreal Engine编辑器会自动打开。这个屏幕可能是您在使用Unreal Engine时最常见的屏幕，因此熟悉它非常重要。
- en: 'Let''s break down what we see in the editor window:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来分解一下编辑器窗口中所看到的内容：
- en: '![Figure 1.1: The Unreal Engine editor divided in its six main windows'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.1：Unreal Engine编辑器分为六个主要窗口'
- en: '](img/B16183_01_01.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_01.jpg)'
- en: 'Figure 1.1: The Unreal Engine editor divided in its six main windows'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1：Unreal Engine编辑器分为六个主要窗口
- en: '`Content Browser`: The window that occupies the majority of the bottom of the
    screen is the `Content Browser`. This window will let you browse and manipulate
    all the files and assets located inside your project''s folder. As was mentioned
    at the start of the chapter, Unreal Engine will allow you to import several types
    of multimedia files, and `Content Browser` is the window that will allow you to
    browse and edit them in their respective sub-editors. Whenever you create an Unreal
    Engine project, it will always generate a `Content` folder. This folder will be
    the `Content Browser`, meaning you can only browse files inside that folder. You
    can see the directory you''re currently browsing inside `Content Browser` by looking
    at the top of it, which, in our case, is `Content -> ThirdPersonCPP`.'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`内容浏览器`：占据屏幕底部大部分的窗口是`内容浏览器`。此窗口将让您浏览和操作项目文件夹中的所有文件和资产。正如在本章开头提到的，虚幻引擎将允许您导入多种多媒体文件类型，而`内容浏览器`是将允许您在其各自的子编辑器中浏览和编辑它们的窗口。每当您创建一个虚幻引擎项目时，它都会生成一个`内容`文件夹。这个文件夹将是`内容浏览器`，这意味着您只能浏览该文件夹中的文件。您可以通过查看其顶部来查看您当前在`内容浏览器`中浏览的目录，而在我们的情况下，它是`内容
    -> ThirdPersonCPP`。'
- en: 'If you click the icon to the left of the `Filters` button, at the very left
    of `Content Browser`, you will be able to see the directory hierarchy of the `Content`
    folder. This directory view allows you to select, expand, and collapse individual
    directories in the `Content` folder of your project:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您单击`内容浏览器`最左侧的`过滤器`按钮左侧的图标，您将能够看到`内容`文件夹的目录层次结构。此目录视图允许您选择、展开和折叠项目的`内容`文件夹中的单个目录：
- en: '![Figure 1.2: Content Browser''s directory view'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.2：内容浏览器的目录视图'
- en: '](img/B16183_01_02.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_02.jpg)'
- en: 'Figure 1.2: Content Browser''s directory view'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2：内容浏览器的目录视图
- en: '`Viewport`: At the very center of the screen, you''ll be able to see the `Viewport`
    window. This will show you the content of the current level and will allow you
    to navigate through your level as well as adding, moving, removing, and editing
    objects inside it. It also contains several different parameters regarding visual
    filters, object filters (which objects you can see), and the lighting in your
    level.'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`视口`：在屏幕的正中央，您将能够看到`视口`窗口。这将显示当前级别的内容，并允许您浏览级别以及在其中添加、移动、删除和编辑对象。它还包含有关视觉过滤器、对象过滤器（您可以看到哪些对象）和级别中的照明的几个不同参数。'
- en: '`World Outliner`: At the top-right corner of the screen, you''ll see `World
    Outliner`. This will allow you to quickly list and manipulate the objects that
    are at your level. `Viewport` and `World Outliner` work hand in hand in allowing
    you to manage your level, where the former will show you what it looks like and
    the latter will help you manage and organize it. Similar to `Content Browser`,
    `World Outliner` allows you to organize the objects in your level in directories,
    with the difference being that `Content Browser` shows the *assets* in your project
    and `World Outliner` shows you the *objects* in your level.'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`世界大纲`：在屏幕的右上角，您将看到`世界大纲`。这将允许您快速列出和操作在您的级别中的对象。`视口`和`世界大纲`共同努力，让您能够管理您的级别，前者将向您展示它的外观，而后者将帮助您管理和组织它。与`内容浏览器`类似，`世界大纲`允许您在目录中组织级别中的对象，不同之处在于`内容浏览器`显示项目中的*资产*，而`世界大纲`显示级别中的*对象*。'
- en: 'The `Details` panel and `World Settings`: At the far right of the screen, below
    `World Outliner`, you''ll be able to see two windows – the `Details` panel and
    the `World Settings` window. The `Details` window allows you to edit the properties
    of an object that you selected in your level. As there are no objects selected
    in the screenshot, it is empty. However, if you select any object in your level
    by *left-clicking* on it, its properties should appear in this window, as shown
    in the following screenshot:![Figure 1.3: The Details tab'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Details`面板和`世界设置`：在屏幕的最右侧，在`世界大纲`下方，您将能够看到两个窗口 - `Details`面板和`世界设置`窗口。`Details`窗口允许您编辑您在级别中选择的对象的属性。由于截图中没有选择任何对象，因此它是空的。但是，如果您通过*左键单击*选择级别中的任何对象，其属性应该会显示在此窗口中，如下面的截图所示：![图1.3：详细信息选项卡'
- en: '](img/B16183_01_03.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_03.jpg)'
- en: 'Figure 1.3: The Details tab'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.3：详细信息选项卡
- en: 'The `World Settings` window allows you to set the overall settings of your
    level, instead of those of individual objects. Here, you''ll be able to change
    things such as the Kill Z (the height at which you want your objects to be destroyed)
    and the desired lighting settings, among others:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`世界设置`窗口允许您设置级别的整体设置，而不是单个对象的设置。在这里，您可以更改诸如Kill Z（您希望对象被销毁的高度）和所需的照明设置等内容：'
- en: '![Figure 1.4: The World Settings window'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.4：世界设置窗口'
- en: '](img/B16183_01_04.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_04.jpg)'
- en: 'Figure 1.4: The World Settings window'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.4：世界设置窗口
- en: '`Toolbar`: At the top of the screen you''ll see the editor `Toolbar`, where
    you''ll be able to save your current level, access the project and editor settings,
    and play your level, among other things.'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`工具栏`：在屏幕顶部，您将看到编辑器`工具栏`，在那里您将能够保存当前级别、访问项目和编辑器设置，并播放您的级别，等等。'
- en: Note
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We will only be using some of the buttons from these toolbars, namely, the `Save
    Current`, `Settings`, `Blueprints`, `Build`, and `Play` buttons.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将只使用这些工具栏中的一些按钮，即`保存当前`、`设置`、`蓝图`、`构建`和`播放`按钮。
- en: '`Modes`: At the very left of the screen, you''ll see the `Modes` window. It
    will allow you to drag objects to your levels, such as cubes and spheres, light
    sources, and other types of objects designed for a wide variety of purposes.'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`模式`：在屏幕的最左侧，您将看到`模式`窗口。它将允许您将对象拖到您的级别中，例如立方体和球体、光源以及设计用于各种目的的其他类型的对象。'
- en: Now that we have learned about the main windows of the Unreal Engine editor,
    let's take a look at how to manage those windows.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了虚幻引擎编辑器的主要窗口，让我们来看看如何管理这些窗口。
- en: Editor Windows
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑器窗口
- en: 'As we''ve seen, the Unreal Engine editor is comprised of many windows, all
    of which are resizable, movable, and have a corresponding tab on top of them.
    You can *click and hold* a window''s tab and drag it in order to move it somewhere
    else. You can hide tab labels by *right-clicking* them and selecting the `Hide`
    option:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，虚幻引擎编辑器由许多窗口组成，所有这些窗口都是可调整大小、可移动的，并且都有相应的标签在顶部。您可以*点击并按住*窗口的标签并拖动它以将其移动到其他位置。您可以通过*右键单击*它们并选择`隐藏`选项来隐藏标签标签：
- en: '![Figure 1.5: How to hide a tab'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.5：如何隐藏标签'
- en: '](img/B16183_01_05.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_05.jpg)'
- en: 'Figure 1.5: How to hide a tab'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.5：如何隐藏标签
- en: 'If the tab labels have been hidden, you can get them to reappear by clicking
    the *yellow triangle* at the top-left corner of that window, as shown in the following
    figure:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果标签标签已被隐藏，您可以通过单击该窗口左上角的*黄色三角形*使其重新出现，如下图所示：
- en: '![Figure 1.6: The yellow triangle that allows you to show a window''s tab'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.6：允许显示窗口标签的黄色三角形'
- en: '](img/B16183_01_06.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_06.jpg)'
- en: 'Figure 1.6: The yellow triangle that allows you to show a window''s tab'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.6：允许显示窗口标签的黄色三角形
- en: Keep in mind that you can browse and open all the windows available in the editor,
    including the ones that were just mentioned, by clicking the `Window` button in
    the top-left corner of the editor.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，您可以通过单击编辑器左上角的`窗口`按钮来浏览和打开编辑器中的所有可用窗口，包括刚提到的窗口。
- en: Another very important thing you should know is how to play your level from
    inside the editor (also known as `Toolbar`, you'll see the `Play` button. If you
    click it, you'll start playing the currently open level inside the editor.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 您还应该知道的另一件非常重要的事情是如何在编辑器内播放您的关卡（也称为`工具栏`，您将看到`播放`按钮。如果您点击它，您将开始在编辑器内播放当前打开的关卡。
- en: 'Once you hit `Play`, you''ll be able to control the player character in the
    level by using the *W*, *A*, *S*, and *D* keys to move the player character, the
    spacebar to jump, and move the `Mouse` to rotate the camera:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您点击`播放`，您将能够通过使用*W*、*A*、*S*和*D*键来控制关卡中的玩家角色，使用空格键跳跃，并移动`鼠标`来旋转相机：
- en: '![Figure 1.7: The level being played inside the editor'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.7：在编辑器内播放的关卡'
- en: '](img/B16183_01_07.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_07.jpg)'
- en: 'Figure 1.7: The level being played inside the editor'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.7：在编辑器内播放的关卡
- en: You can then press the *Esc* key (Escape) in order to stop playing the level.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以按*Esc*键（Escape）以停止播放关卡。
- en: Now that we've gotten accustomed to some of the editor's windows, let's take
    a deeper look at the `Viewport` window.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经习惯了一些编辑器的窗口，让我们更深入地了解`视口`窗口。
- en: Viewport Navigation
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 视口导航
- en: We mentioned in the previous section that the `Viewport` window will allow you
    to visualize your level, as well as manipulating the objects inside it. Because
    this is a very important window for you to use and has a lot of functionality,
    we're going to learn more about it in this section.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前一节中提到，`视口`窗口将允许您可视化您的级别，并操纵其中的对象。因为这是您要使用的非常重要的窗口，并且具有许多功能，所以我们将在本节中更多地了解它。
- en: Before we start learning about the `Viewport` window, let's quickly get to know
    about `Viewport` window will always show you the contents of the currently selected
    level, which in this case was already made and was generated alongside the `Third
    Person` template project. In this level, you'll be able to see four wall objects,
    one ground object, a set of stairs, and some other elevated objects, as well as
    the player character represented by the UE4 mannequin. You can create multiple
    levels and switch between them by opening them from `Content Browser`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始学习`视口`窗口之前，让我们快速了解一下`视口`窗口，它将始终显示当前选定级别的内容，本例中已经创建并与`第三人称`模板项目一起生成。在此级别中，您将能够看到四个墙体对象，一个地面对象，一组楼梯和一些其他高架对象，以及由UE4模特代表的玩家角色。您可以创建多个级别并通过从`内容浏览器`中打开它们来在它们之间切换。
- en: In order to manipulate and navigate through the currently selected level, you'll
    have to use the `Viewport` window. If you press and hold the *left mouse button*
    inside the window, you'll be able to rotate the camera horizontally by moving
    the mouse *left* and *right*, and move the camera forward and backward by moving
    the mouse *forward* and *backward*. You can achieve similar results by holding
    the *right mouse button*, except the camera will rotate vertically when moving
    the mouse *forward* and *backward*, which allows you to rotate the camera both
    horizontally and vertically.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为了操纵和浏览当前选定的级别，您必须使用`视口`窗口。如果您在窗口内按住*左鼠标按钮*，您将能够通过将鼠标*左*和*右*移动来水平旋转相机，并通过将鼠标*向前*和*向后*移动来前后移动相机。您也可以通过按住*右鼠标按钮*来实现类似的结果，除了在将鼠标*向前*和*向后*移动时相机将垂直旋转，这样您就可以水平和垂直旋转相机。
- en: Additionally, you can also move around the level by clicking and holding the
    `Viewport` window with the *right mouse button* (the *left mouse button* works
    too, but using it for movement is not as useful due to there not being as much
    freedom when rotating the camera) and using the *W* and *S* keys to move forward
    and backward, the *A* and *D* keys to move sideways, and the *E* and *Q* keys
    to move up and down.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还可以通过点击并按住`视口`窗口的*右鼠标按钮*（*左鼠标按钮*也可以，但由于在旋转相机时没有太多自由度，因此使用它进行移动不太有用）并使用*W*和*S*键向前和向后移动，*A*和*D*键向侧面移动，*E*和*Q*键向上和向下移动。
- en: If you look at the top-right corner of the `Viewport` window, you will see a
    small camera icon with a number next to it, which will allow you to change the
    speed at which the camera moves in the `Viewport` window.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您查看`视口`窗口的右上角，您将看到一个带有数字的小摄像机图标，它将允许您更改相机在`视口`窗口中移动的速度。
- en: Another thing you can do in the `Viewport` window is to change its visualization
    settings. You can change the type of visualization in the `Viewport` window by
    clicking the button that currently says `Lit`, which will show you all the options
    available for different lighting and other types of visualization filters.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Viewport`窗口中可以做的另一件事是更改其可视化设置。您可以通过单击当前显示为`Lit`的按钮来更改`Viewport`窗口中的可视化类型，这将显示所有可用于不同照明和其他类型可视化滤镜的选项。
- en: If you click the `Perspective` button, you'll have the option to switch between
    seeing your level from a perspective view, as well as from an orthographic view,
    the latter of which may help you build your levels faster.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果单击`Perspective`按钮，您将有选择在透视视图和正交视图之间切换，后者可能会帮助您更快地构建级别。
- en: Let's now move on to the topic of manipulating objects, also known as Actors,
    in your level.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们转到操纵对象的主题，也称为Actor，在您的级别中。
- en: Manipulating Actors
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操纵Actor
- en: In Unreal Engine, all the objects that can be placed in a level are referred
    to as Actors. In a movie, an actor would be a human playing a character, but in
    UE4, every single object you see in your level, including walls, floors, weapons,
    and characters, is an Actor.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在虚幻引擎中，可以放置在级别中的所有对象都称为Actor。在电影中，演员将是扮演角色的人，但在UE4中，您在级别中看到的每个对象，包括墙壁、地板、武器和角色，都是一个Actor。
- en: 'Every Actor must have what''s called a `Transform` property, which is a collection
    of three things:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Actor必须有所谓的`Transform`属性，这是三个东西的集合：
- en: '`Vector` property signifying the position of that Actor in the level in the
    *X*, *Y,* and *Z* axis. A vector is simply a tuple with three floating point numbers,
    one for the location of the point in each axis.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Vector`属性表示该Actor在*X*、*Y*和*Z*轴上的位置。矢量只是一个包含三个浮点数的元组，每个轴上的点的位置都有一个。'
- en: '`Rotator` property signifying the rotation of that Actor along the *X*, *Y,*
    and *Z* axis. A rotator is also a tuple with three floating point numbers, one
    for the angle of rotation in each axis.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Rotator`属性表示该Actor沿*X*、*Y*和*Z*轴的旋转。旋转器也是一个包含三个浮点数的元组，每个轴上的旋转角度都有一个。'
- en: '`Vector` property signifying the scale (meaning size) of that Actor in the
    level in the *X*, *Y,* and *Z* axis. This is also a collection of three floating
    point numbers, one for the scale value in each axis.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Vector`属性表示该Actor在级别中的比例（大小）在*X*、*Y*和*Z*轴上。这也是三个浮点数的集合，每个轴上都有一个比例值。'
- en: 'Actors can be moved, rotated, and scaled in a level, which will modify their
    `Transform` property accordingly. In order to do this, select any object in your
    level by *left-clicking* on it. You should see the **Move** tool appear:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Actor可以在级别中移动、旋转和缩放，这将相应地修改它们的`Transform`属性。为了做到这一点，通过*左键单击*选择级别中的任何对象。您应该看到**Move**工具出现：
- en: '![Figure 1.8: The Move tool, which allows you to move an Actor in the level'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.8：移动工具，允许您在级别中移动Actor'
- en: '](img/B16183_01_08.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_08.jpg)'
- en: 'Figure 1.8: The Move tool, which allows you to move an Actor in the level'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.8：移动工具，允许您在级别中移动Actor
- en: 'The Move tool is a three-axis gizmo that allows you to move an object in any
    of the axes simultaneously. The red arrow of the Move tool (pointing to the left
    in the preceding image) represents the *X* axis, the green arrow (pointing to
    the right in the preceding image) represents the *Y* axis, and the blue arrow
    (pointing up in the preceding image) represents the *Z* axis. If you *click and
    hold* either of these arrows and then drag them around the level, you will move
    your Actor along that axis in the level. If you click the handles that connect
    two arrows together, you will move the Actor along both those axes simultaneously,
    and if you click the white sphere at the intersection of all the arrows, you will
    move the Actor freely along all three axes:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 移动工具是一个三轴标尺，允许您同时在任何轴上移动对象。移动工具的红色箭头（在前面的图像中指向左侧）表示*X*轴，绿色箭头（在前面的图像中指向右侧）表示*Y*轴，蓝色箭头（在前面的图像中向上指）表示*Z*轴。如果您*单击并按住*这些箭头中的任何一个，然后将它们拖动到级别中，您将在级别中沿该轴移动您的Actor。如果单击连接两个箭头的手柄，您将同时沿着这两个轴移动Actor，如果单击所有箭头交汇处的白色球体，您将自由移动Actor沿着所有三个轴：
- en: '![Figure 1.9: An actor being moved on the Z axis using the Move tool'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.9：使用移动工具在Z轴上移动的Actor'
- en: '](img/B16183_01_09.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_09.jpg)'
- en: 'Figure 1.9: An actor being moved on the Z axis using the Move tool'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.9：使用移动工具在Z轴上移动的Actor
- en: 'The Move tool will allow you to move an Actor around the level, but if you
    want to rotate or scale an Actor, you''ll need to use the Rotate and Scale tools,
    respectively. You can switch between the Move, Rotate, and Scale tools by pressing
    the *W*, *E*, and *R* keys, respectively. Press *E* in order to switch to the
    Rotate tool:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 移动工具将允许您在级别中移动Actor，但如果您想旋转或缩放Actor，您需要分别使用旋转和缩放工具。您可以通过按*W*、*E*和*R*键在移动、旋转和缩放工具之间切换。按*E*以切换到旋转工具：
- en: '![Figure 1.10: The Rotate tool, which allows you to rotate an Actor'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.10：旋转工具，允许您旋转Actor'
- en: '](img/B16183_01_10.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_10.jpg)'
- en: 'Figure 1.10: The Rotate tool, which allows you to rotate an Actor'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.10：旋转工具，允许您旋转Actor
- en: 'The Rotate tool will, as expected, allow you to rotate an Actor in your level.
    You can *click and hold* any of the arcs in order to rotate the Actor around its
    associated axis. The red arc (upper left in the previous image) will rotate the
    Actor around the *X* axis, the green arc (upper right in the previous image) will
    rotate the Actor around the *Y* axis, and the blue arc (lower center in the previous
    image) will rotate the Actor around the *Z* axis:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 旋转工具将如预期般允许您在级别中旋转Actor。您可以*单击并按住*任何弧线以围绕其关联轴旋转Actor。红色弧线（前图中左上方）将围绕*X*轴旋转Actor，绿色弧线（前图中右上方）将围绕*Y*轴旋转Actor，蓝色弧线（前图中下方中心）将围绕*Z*轴旋转Actor：
- en: '![Figure 1.11: A cube before and after being rotated 30 degrees around the
    X axis'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.11：一个立方体在绕X轴旋转30度之前和之后'
- en: '](img/B16183_01_11.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_11.jpg)'
- en: 'Figure 1.11: A cube before and after being rotated 30 degrees around the X
    axis'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.11：在X轴周围旋转30度之前和之后的立方体
- en: Keep in mind that an object's rotation around the *X* axis is usually designated
    as **Roll**, its rotation around the *Y* axis is usually designated as **Pitch**,
    and its rotation around the *Z* axis is usually designated as **Yaw**.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，物体围绕*X*轴的旋转通常被指定为**横滚**，它围绕*Y*轴的旋转通常被指定为**俯仰**，它围绕*Z*轴的旋转通常被指定为**偏航**。
- en: 'Lastly, we have the Scale tool. Press *R* in order to switch to it:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有比例工具。按*R*以切换到它：
- en: '![Figure 1.12: The Scale tool'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.12：比例工具'
- en: '](img/B16183_01_12.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_12.jpg)'
- en: 'Figure 1.12: The Scale tool'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.12：比例工具
- en: 'The Scale tool will allow you to increase and decrease the scale (size) of
    an Actor in the *X*, *Y*, and *Z* axes, where the red handle (left in the previous
    image) will scale the Actor on the *X* axis, the green handle (right in the previous
    image) will scale the Actor on the *Y* axis, and the blue handle (upper in the
    previous image) will scale the Actor on the *Z* axis:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 比例工具将允许您增加和减少角色在*X*、*Y*和*Z*轴上的比例（大小），红色手柄（上图左侧）将在*X*轴上缩放角色，绿色手柄（上图右侧）将在*Y*轴上缩放角色，蓝色手柄（上图上方）将在*Z*轴上缩放角色：
- en: '![Figure 1.13: A character Actor before and after being scaled on all three
    axes'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.13：在所有三个轴上缩放前后的角色角色'
- en: '](img/B16183_01_13.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_13.jpg)'
- en: 'Figure 1.13: A character Actor before and after being scaled on all three axes'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.13：在所有三个轴上缩放前后的角色角色
- en: 'You can also toggle between the Move, Rotate, and Scale tools by clicking the
    following icons at the top of the `Viewport` window:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过单击“视口”窗口顶部的以下图标在移动、旋转和缩放工具之间切换：
- en: '![Figure 1.14: The Move, Rotate, and Scale tool icons'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.14：移动、旋转和缩放工具图标'
- en: '](img/B16183_01_14.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_14.jpg)'
- en: 'Figure 1.14: The Move, Rotate, and Scale tool icons'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.14：移动、旋转和缩放工具图标
- en: 'Additionally, you can change the increments with which you move, rotate, and
    scale your objects through the grid snapping options to the right of the Move,
    Rotate, and Scale tool icons. By pressing the buttons currently in orange, you''ll
    be able to disable snapping altogether, and by pressing the buttons showing the
    current snapping increments, you''ll be able to change those increments:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您可以通过在移动、旋转和缩放工具图标右侧的网格捕捉选项更改移动、旋转和缩放对象的增量。通过按下当前为橙色的按钮，您将能够完全禁用捕捉，通过按下显示当前捕捉增量的按钮，您将能够更改这些增量：
- en: '![Figure 1.15: The grid snapping icons for moving, rotating, and scaling'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.15：用于移动、旋转和缩放的网格捕捉图标'
- en: '](img/B16183_01_15.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_15.jpg)'
- en: 'Figure 1.15: The grid snapping icons for moving, rotating, and scaling'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.15：用于移动、旋转和缩放的网格捕捉图标
- en: Now that you know how to manipulate Actors already present in your level, let's
    learn how to add and remove Actors to and from our level in the next exercise.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经知道如何操作您级别中已经存在的角色，让我们在下一个练习中学习如何向我们的级别添加和删除角色。
- en: 'Exercise 1.02: Adding and Removing Actors'
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习1.02：添加和删除角色
- en: In this exercise, we will be adding and removing Actors from our level.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将向我们的级别添加和删除角色。
- en: 'When it comes to adding Actors to your level, there are two main ways in which
    you can do so: by dragging assets from `Content Browser`, or by dragging the default
    assets from the `Modes` window''s Place Mode.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在向您的级别添加角色时，有两种主要方法可以这样做：通过从`内容浏览器`拖动资产，或者通过从`模式`窗口的放置模式中拖动默认资产。
- en: 'The following steps will help you complete this exercise:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助您完成此练习：
- en: 'If you go to the `ThirdPersonCPP -> Blueprints` directory inside `Content Browser`,
    you will see the `ThirdPersonCharacter` Actor. If you drag that asset to your
    level using the *left mouse button*, you will be able to add an instance of that
    Actor to it, and it will be placed wherever you let go of the *left mouse button*:![Figure
    1.16: Dragging an instance of the ThirdPersonCharacter Actor to our level'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您进入`ThirdPersonCPP -> Blueprints`目录，您将在`内容浏览器`中看到`ThirdPersonCharacter`角色。如果您使用*左键*将该资产拖到您的级别中，您将能够向其中添加该角色的一个实例，并且它将放置在您放开*左键*的地方：![图1.16：将ThirdPersonCharacter角色的一个实例拖到我们的级别中
- en: '](img/B16183_01_16.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_16.jpg)'
- en: 'Figure 1.16: Dragging an instance of the ThirdPersonCharacter Actor to our
    level'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.16：将ThirdPersonCharacter角色的一个实例拖到我们的级别中
- en: 'You can similarly drag an Actor from the `Modes` window to your level as well:![Figure
    1.17: Dragging a Cylinder Actor to our level'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您也可以从`模式`窗口将一个角色拖到您的级别中：![图1.17：将圆柱体角色拖到我们的级别中
- en: '](img/B16183_01_17.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_17.jpg)'
- en: 'Figure 1.17: Dragging a Cylinder Actor to our level'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.17：将圆柱体角色拖到我们的级别中
- en: In order to delete an Actor, you can simply select the Actor and press the *Delete*
    key. You can also *right-click* on an Actor to take a look at the many other options
    available to you regarding that Actor.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要删除一个角色，您可以简单地选择该角色并按下*删除*键。您还可以*右键单击*一个角色，查看有关该角色的许多其他可用选项。
- en: Note
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Although we won''t be covering this topic in this book, one of the ways in
    which developers can populate their levels with simple boxes and geometry, for
    prototyping purposes, is BSP Brushes. These can be quickly molded into your desired
    shape as you build your levels. To find more information on BSP Brushes, go to
    this page: [https://docs.unrealengine.com/en-US/Engine/Actors/Brushes](https://docs.unrealengine.com/en-US/Engine/Actors/Brushes).'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们不会在本书中涵盖这个主题，但开发人员可以用简单的框和几何图形填充他们的级别，用于原型制作的一种方式是BSP刷。这些可以在构建级别时快速塑造成您想要的形状。要了解有关BSP刷的更多信息，请访问此页面：[https://docs.unrealengine.com/en-US/Engine/Actors/Brushes](https://docs.unrealengine.com/en-US/Engine/Actors/Brushes)。
- en: And with this, we conclude this exercise and have learned how to add and remove
    Actors to and from our level.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，我们结束了这个练习，并学会了如何向我们的级别添加和删除角色。
- en: Now that we know how to navigate the `Viewport` window, let's learn about Blueprint
    Actors.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何浏览`视口`窗口，让我们了解蓝图角色。
- en: Blueprint Actors
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 蓝图角色
- en: 'In UE4, the word Blueprint can be used to refer to two different things: UE4''s
    visual scripting language or a specific type of asset, also referred to as a Blueprint
    class or Blueprint asset.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在UE4中，“蓝图”一词可用于指代两种不同的东西：UE4的可视化脚本语言或特定类型的资产，也称为蓝图类或蓝图资产。
- en: 'As we''ve mentioned before, an Actor is an object that can be placed in a level.
    This object can either be an instance of a C++ class or an instance of a Blueprint
    class, both of which must inherit from the Actor class (either directly or indirectly).
    So, what is the difference between a C++ class and a Blueprint class, you may
    ask? There are a few:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，角色是可以放置在关卡中的对象。这个对象可以是C++类的实例，也可以是蓝图类的实例，两者都必须从角色类（直接或间接地）继承。那么，C++类和蓝图类之间有什么区别呢？有一些：
- en: If you add programming logic to your C++ class, you'll have access to more advanced
    engine functionality than you would if you were to create a Blueprint class.
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您向C++类添加编程逻辑，您将可以访问比创建蓝图类时更高级的引擎功能。
- en: In a Blueprint class, you can easily view and edit visual components of that
    class, such as a 3D mesh or a Trigger Box Collision, as well as modifying properties
    defined in the C++ class that is exposed to the editor, which makes managing those
    properties much easier.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在蓝图类中，您可以轻松查看和编辑该类的可视组件，例如3D网格或触发框碰撞，以及修改在C++类中定义的属性，这些属性暴露给编辑器，使得管理这些属性更加容易。
- en: In a Blueprint class, you can easily reference other assets in your project,
    whereas in C++, you can also do so but less simply and less flexibly.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在蓝图类中，您可以轻松引用项目中的其他资产，而在C++中，您也可以这样做，但不那么简单，也不那么灵活。
- en: Programming logic that runs on Blueprint visual scripting is slower in terms
    of performance than that of a C++ class.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在蓝图可视化脚本上运行的编程逻辑在性能方面比C++类慢。
- en: It's simple to have more than one person work on a C++ class simultaneously
    without conflicts in a source version platform, whereas with a Blueprint class,
    which is interpreted as a binary file instead of a text file, this will cause
    conflicts in your source version platform if two different people edit the same
    Blueprint class.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在C++类中，可以简单地让多个人同时工作而不会在源版本平台上发生冲突，而在蓝图类中，这将导致冲突，因为它被解释为二进制文件而不是文本文件，如果两个不同的人编辑相同的蓝图类，这将导致源版本平台上的冲突。
- en: Note
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In case you don't know what a source version platform is, this is how several
    developers can work on the same project and have it updated with the work done
    by other developers. In these platforms, different people can usually edit the
    same file simultaneously, as long as they edit different parts of that file, and
    still receive updates that other programmers did without them affecting your work
    on that same file. One of the most popular source version platforms is GitHub.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不知道什么是源版本平台，这是几个开发人员可以在同一项目上工作并且可以更新其他开发人员完成的工作的方式。在这些平台上，通常可以同时编辑同一文件的不同部分，只要它们编辑的是文件的不同部分，并且仍然可以接收其他程序员完成的更新，而不会影响您对同一文件的工作。最流行的源版本平台之一是GitHub。
- en: Keep in mind that Blueprint classes can inherit either from a C++ class or from
    another Blueprint class.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，蓝图类可以继承自C++类或另一个蓝图类。
- en: Lastly, before we move on to creating our first Blueprint Class, another important
    thing you should know is that you can write programming logic in a C++ class and
    then create a Blueprint class that inherits from that class, but can also access
    its properties and methods if you specify that in the C++ class. You can have
    a Blueprint class edit properties defined in the C++ class as well as calling
    and overriding functions, using the Blueprint scripting language. We will be doing
    some of these things in this book.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在我们继续创建我们的第一个蓝图类之前，您应该知道的另一件重要的事情是，您可以在C++类中编写编程逻辑，然后创建一个从该类继承的蓝图类，但如果您在C++类中指定了这一点，它也可以访问其属性和方法。您可以让蓝图类编辑在C++类中定义的属性，以及调用和覆盖函数，使用蓝图脚本语言。我们将在本书中做一些这样的事情。
- en: Now that you know a bit more about Blueprint classes, let's create our own in
    this next exercise.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您对蓝图类有了一些了解，让我们在下一个练习中创建自己的蓝图类。
- en: 'Exercise 1.03: Creating Blueprint Actors'
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习1.03：创建蓝图角色
- en: In this short exercise, we will learn how to create a new Blueprint Actor.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个简短的练习中，我们将学习如何创建一个新的蓝图角色。
- en: 'The following steps will help you complete this exercise:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助您完成此练习：
- en: 'Go to the `ThirdPersonCPP -> Blueprints` directory inside `Content Browser`
    and *right-click* inside it. The following window should pop up:![Figure 1.18:
    The options window that appears when you right-click inside content browser'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入“ThirdPersonCPP -> Blueprints”目录，位于“内容浏览器”内，并在其中*右键单击*。 应该弹出以下窗口：![图1.18：在内容浏览器内右键单击时出现的选项窗口
- en: '](img/B16183_01_18.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_18.jpg)'
- en: 'Figure 1.18: The options window that appears when you right-click inside content
    browser'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.18：在内容浏览器内右键单击时出现的选项窗口
- en: This options menu contains the types of assets that you can create in UE4 (Blueprints
    are simply a type of asset, along with other types of assets, such as `Level`,
    `Material`, and `Sound`).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 此选项菜单包含您可以在UE4中创建的资产类型（蓝图只是一种资产类型，以及其他类型的资产，如“关卡”、“材质”和“声音”）。
- en: 'Click the `Blueprint Class` icon to create a new Blueprint class. When you
    do, you will be given the option to choose the C++ or Blueprint class that you
    want to inherit from:![Figure 1.19: The Pick Parent Class window that pops up
    when you'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“蓝图类”图标以创建一个新的蓝图类。这样做时，您将有选择要继承的C++或蓝图类的选项：![图1.19：创建新蓝图类时弹出的选择父类窗口
- en: create a new Blueprint class
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的蓝图类
- en: '](img/B16183_01_19.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_19.jpg)'
- en: 'Figure 1.19: The Pick Parent Class window that pops up when you create a new
    Blueprint class'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.19：创建新蓝图类时弹出的选择父类窗口
- en: Select the first class from this window, the `Actor` class. After this, you
    will automatically select the text of the new Blueprint class to easily name it
    what you want. Name this Blueprint class `TestActor` and press the `Enter` key
    to accept this name.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从这个窗口中选择第一个类，`Actor`类。之后，你将自动选择新蓝图类的文本，以便轻松地为它命名。将这个蓝图类命名为`TestActor`，然后按`Enter`键接受这个名字。
- en: After following these steps, you will have created your Blueprint class and
    so have completed this exercise. After you've created this asset, double-click
    on it with the *left mouse button* to open the Blueprint editor.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 按照这些步骤，你将创建你的蓝图类，完成这个练习。创建完这个资源后，用左键双击它以打开蓝图编辑器。
- en: The Blueprint Editor
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 蓝图编辑器
- en: The Blueprint editor is a sub-editor within the Unreal Engine editor specifically
    for Blueprint classes. Here, you'll be able to edit the properties and logic for
    your Blueprint classes, or those of their parent class, as well as their visual
    appearance.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝图编辑器是虚幻引擎编辑器中专门用于蓝图类的子编辑器。在这里，你可以编辑你的蓝图类的属性和逻辑，或者它们的父类，以及它们的视觉外观。
- en: 'When you open an Actor Blueprint class, you should see the Blueprint editor.
    This is the window that will allow you to edit your Blueprint classes in UE4\.
    Let''s learn about the windows that you''re currently seeing:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个Actor Blueprint类时，你应该会看到蓝图编辑器。这是一个窗口，允许你在UE4中编辑蓝图类。让我们了解一下你当前看到的窗口：
- en: '![Figure 1.20: The Blueprint editor window is broken down into five parts'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.20：蓝图编辑器窗口分为五个部分'
- en: '](img/B16183_01_20.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: （img/B16183_01_20.jpg）
- en: 'Figure 1.20: The Blueprint editor window is broken down into five parts'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.20：蓝图编辑器窗口分为五个部分
- en: '`Viewport`: Front and center in the editor you have the `Viewport` window.
    This window, similar to the `Level Viewport` window that we already learned about,
    will allow you to visualize your Actor and edit its components. Every actor can
    have several Actor Components, some of which have a visual representation, such
    as Mesh Components and Collision Components. We''ll be talking about Actor Components
    in more depth in later chapters.'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`视口`：在编辑器的正中央，你有`视口`窗口。这个窗口，类似于我们已经了解的`级别视口`窗口，将允许你可视化你的角色并编辑它的组件。每个角色可以有多个角色组件，其中一些有视觉表示，比如网格组件和碰撞组件。我们将在后面的章节更深入地讨论角色组件。'
- en: Technically, this center window contains three tabs, only one of which is the
    `Viewport` window, but we'll be talking about the other important tab, the `Event
    Graph` after we tackle this editor's interface. The third tab is the `Construction
    Script` window, which we will not be covering in this book.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术上讲，这个中心窗口包含三个选项卡，其中只有一个是`视口`窗口，但我们将在讨论这个编辑器的界面后谈论另一个重要的选项卡，即`事件图`。第三个选项卡是`构造脚本`窗口，我们在本书中不会涉及。
- en: '`Components`: At the top left of the editor, you have the `Components` window.
    As mentioned in the previous description, Actors can have several Actor Components,
    and this window is the one that will allow you to add and remove those Actor Components
    in your Blueprint class, as well as to access Actor Components defined in the
    C++ classes it inherits from.'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`组件`：在编辑器的左上方，你有`组件`窗口。如前面所述，角色可以有多个角色组件，这个窗口将允许你在你的蓝图类中添加和移除这些角色组件，并访问它继承的C++类中定义的角色组件。'
- en: '`My Blueprint`: At the bottom left of the editor, you have the `My Blueprint`
    window. This will allow you to browse, add, and remove variables and functions
    defined in both this Blueprint class and the C++ class it inherits from. Keep
    in mind that Blueprints have a special kind of function, called an `BeginPlay`,
    `ActorBeginOverlap`, and `Tick`. We''ll be talking about these in a few paragraphs.'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`我的蓝图`：在编辑器的左下方，你有`我的蓝图`窗口。这将允许你浏览、添加和移除在这个蓝图类和它继承的C++类中定义的变量和函数。请记住，蓝图有一种特殊类型的函数，称为`BeginPlay`、`ActorBeginOverlap`和`Tick`。我们将在几段落后讨论这些。'
- en: '`Details`: At the right of the editor, you have the `Details` window. Similar
    to the editor''s `Details` window, this window will show you the properties of
    the currently selected Actor Component, function, variable, event, or any other
    individual element of this Blueprint class. If you currently have no elements
    selected, this window will be empty.'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`详情`：在编辑器的右侧，你有`详情`窗口。类似于编辑器的`详情`窗口，这个窗口将显示当前选定的角色组件、函数、变量、事件或者这个蓝图类的任何其他单独元素的属性。如果你当前没有选定任何元素，这个窗口将是空的。'
- en: '`Toolbar`: At the top center of the editor you have the `Toolbar` window. This
    window will allow you to compile the code you wrote in this Blueprint class, save
    it, locate it in `Content Browser`, and access this class''s settings, among other things.'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`工具栏`：在编辑器的正上方，你有`工具栏`窗口。这个窗口将允许你编译你在这个蓝图类中编写的代码，保存它，定位它在`内容浏览器`中，并访问这个类的设置，以及其他事项。'
- en: You can see the parent class of a Blueprint class by looking at the top-right
    corner of the Blueprint editor. If you click the name of the parent class, you'll
    be taken to either the corresponding Blueprint class, through the Unreal Engine
    editor, or the C++ class, through Visual Studio.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过查看蓝图编辑器右上角的父类来看到蓝图类的父类。如果你点击父类的名称，你将通过虚幻引擎编辑器或者Visual Studio被带到相应的蓝图类或C++类。
- en: Additionally, you can change a Blueprint class's parent class by clicking on
    the `File` tab at the top left of the Blueprint editor and selecting the `Reparent
    Blueprint` option, which will allow you to specify the new parent class of this
    Blueprint class.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你可以通过点击蓝图编辑器左上角的`文件`选项卡，并选择`重新指定蓝图`选项来更改蓝图类的父类，这将允许你指定这个蓝图类的新父类。
- en: Now that we've learned about the basics of the Blueprint editor, let's take
    a look at its Event Graph.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了蓝图编辑器的基础知识，让我们来看看它的事件图。
- en: Event Graph
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件图
- en: The `Event Graph` window is where you'll be writing all of your Blueprint visual
    scripting code, creating your variables and functions, and accessing other variables
    and functions declared in this class's parent class.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '`事件图`窗口是你将编写所有蓝图可视化脚本代码、创建变量和函数以及访问在该类的父类中声明的其他变量和函数的地方。'
- en: 'If you select the `Event Graph` tab, which you should be able to see to the
    right of the `Viewport` tab, you will be shown the `Event Graph` window instead
    of the `Viewport` window. On clicking the `Event Graph` tab, you will have the
    following window:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择`事件图`选项卡，你应该能够在`视口`选项卡的右侧看到，你将会看到`事件图`窗口而不是`视口`窗口。点击`事件图`选项卡后，你将看到以下窗口：
- en: '![Figure 1.21: The Event Graph window, showing three disabled events'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.21：事件图窗口，显示三个禁用的事件'
- en: '](img/B16183_01_21.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_21.jpg)'
- en: 'Figure 1.21: The Event Graph window, showing three disabled events'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.21：事件图窗口，显示三个禁用的事件
- en: You can navigate the `Event Graph` by holding the *right mouse button* and dragging
    inside the graph, you can zoom in and out by scrolling the *mouse wheel*, and
    you can select nodes from the graph by either clicking with the *left mouse button*
    or by pressing and holding to select an area of nodes.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过按住*鼠标右键*在`事件图`中拖动来导航，通过滚动*鼠标滚轮*来放大和缩小，通过单击*鼠标左键*或按住并选择节点区域来选择图中的节点。
- en: You can also *right-click* inside the `Event Graph` window to access the Blueprint's
    Actions menu, which allows you to access the actions you can do in the `Event
    Graph`, including getting and setting variables, calling functions or events,
    and many others.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在`事件图`窗口内*右键单击*来访问蓝图的操作菜单，该菜单允许你访问在`事件图`中可以执行的操作，包括获取和设置变量，调用函数或事件，以及其他许多操作。
- en: 'The way scripting works in Blueprint is by connecting nodes using pins. There
    are several types of nodes, such as variables, functions, and events. You can
    connect these nodes through pins, of which there are two types:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝图中脚本的工作方式是通过连接节点使用针。有几种类型的节点，如变量、函数和事件。你可以通过针连接这些节点，其中有两种类型的针：
- en: '**Execution pins**: These will dictate the order in which the nodes will be
    executed. If you want node 1 to be executed and then node 2 to be executed, you
    link the output execution pin of node 1 to the input execution pin of node 2,
    as shown in the following screenshot:![Figure 1.22: The output execution pin of
    the Event OnReset node being connected'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**执行针**: 这些将决定节点执行的顺序。如果你想要执行节点1然后执行节点2，你需要将节点1的输出执行针连接到节点2的输入执行针，如下面的截图所示：![图1.22：连接事件OnReset节点的输出执行针'
- en: to the input execution pin of the setter node for MyVar
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到MyVar的setter节点的输入执行针
- en: '](img/B16183_01_22.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_22.jpg)'
- en: 'Figure 1.22: The output execution pin of the Event OnReset node being connected
    to the input execution pin of the setter node for MyVar'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.22：连接事件OnReset节点的输出执行针到MyVar的setter节点的输入执行针
- en: '**Variable pins**: These work as parameters (also known as input pins), at
    the left of the node, and return values (also known as output pins), at the right
    side of the node, representing a value of a certain type (integer, float, Boolean,
    and others):![Figure 1.23: The Get Scalar Parameter Value function call node,
    which has two input variable pins and one output variable pin'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**变量针**：这些作为参数（也称为输入针），在节点的左侧，并返回值（也称为输出针），在节点的右侧，表示特定类型的值（整数、浮点数、布尔值等）：![图1.23：调用Get
    Scalar Parameter Value函数的节点，它有两个输入变量针和一个输出变量针'
- en: '](img/B16183_01_23.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_23.jpg)'
- en: 'Figure 1.23: The Get Scalar Parameter Value function call node, which has two
    input variable pins and one output variable pin'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.23：调用Get Scalar Parameter Value函数的节点，它有两个输入变量针和一个输出变量针
- en: Let's understand this better through the next exercise.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过下一个练习更好地理解这个。
- en: 'Exercise 1.04: Creating Blueprint Variables'
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习1.04：创建蓝图变量
- en: In this exercise, we will see how to create Blueprint variables by creating
    a new variable of the `Boolean` type.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将看到如何通过创建一个`Boolean`类型的新变量来创建蓝图变量。
- en: In Blueprint, variables work similarly to the ones you would use in C++. You
    can create them, get their value, and set them.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在蓝图中，变量的工作方式类似于你在C++中使用的变量。你可以创建它们，获取它们的值，并设置它们。
- en: 'The following steps will help you complete this exercise:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助你完成这个练习：
- en: 'To create a new Blueprint variable, head to the `My Blueprint` window and click
    the `+ Variable` button:![Figure 1.24: The + Variable button being highlighted
    in the My Blueprint window, which allows you to create a new Blueprint variable'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建一个新的蓝图变量，前往`我的蓝图`窗口并点击`+ 变量`按钮：![图1.24：在我的蓝图窗口中突出显示的+ 变量按钮，允许你创建一个新的蓝图变量
- en: '](img/B16183_01_24.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_24.jpg)'
- en: 'Figure 1.24: The + Variable button being highlighted in the My Blueprint window,
    which allows you to create a new Blueprint variable'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.24：在我的蓝图窗口中突出显示的+ 变量按钮，允许你创建一个新的蓝图变量
- en: 'After that, you''ll automatically be allowed to name your new variable. Name
    this new variable `MyVar`:![Figure 1.25: Naming the new variable MyVar'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，你将自动被允许命名你的新变量。将这个新变量命名为`MyVar`：![图1.25：命名新变量MyVar
- en: '](img/B16183_01_25.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_25.jpg)'
- en: 'Figure 1.25: Naming the new variable MyVar'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.25：命名新变量MyVar
- en: 'Compile your Blueprint by clicking the `Compile` button on the left side of
    the `Toolbar` window. If you now take a look at the `Details` window, you should
    see the following:![Figure 1.26: The MyVar variable settings in the Details window'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击`工具栏`窗口左侧的`编译`按钮来编译你的蓝图。如果你现在查看`详细信息`窗口，你应该会看到以下内容：![图1.26：详细信息窗口中的MyVar变量设置
- en: '](img/B16183_01_26.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_26.jpg)'
- en: 'Figure 1.26: The MyVar variable settings in the Details window'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.26：详细信息窗口中的MyVar变量设置
- en: 'Here, you''ll be able to edit all the settings related to this variable, the
    most important ones being `Variable Name`, `Variable Type`, and its `Default Value`
    at the end of the settings. Boolean variables can have their value changed by
    clicking the gray box to their right:![Figure 1.27: The variable types available
    from the Variable Type drop-down menu'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，您将能够编辑与此变量相关的所有设置，最重要的设置是`变量名称`，`变量类型`和设置末尾的`默认值`。布尔变量的值可以通过单击其右侧的灰色框来更改：![图1.27：从变量类型下拉菜单中可用的变量类型
- en: '](img/B16183_01_27.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_27.jpg)'
- en: 'Figure 1.27: The variable types available from the Variable Type drop-down
    menu'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.27：从变量类型下拉菜单中可用的变量类型
- en: 'You can also drag a getter or setter for a variable inside the `My Blueprint`
    tab into the `Event Graph` window:![Figure 1.28: Dragging the MyVar into the Event
    Graph window and choosing'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以将变量的getter或setter拖到`My Blueprint`选项卡中，然后放入`事件图`窗口中：![图1.28：将MyVar拖入事件图窗口并选择
- en: whether to add a getter or setter
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 是否添加getter或setter
- en: '](img/B16183_01_28.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_28.jpg)'
- en: 'Figure 1.28: Dragging the MyVar into the Event Graph window and choosing whether
    to add a getter or setter'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.28：将MyVar拖入事件图窗口并选择是否添加getter或setter
- en: Getters are nodes that contain the current value of a variable while setters
    are nodes that allow you to change the value of a variable.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: Getter是包含变量当前值的节点，而setter是允许您更改变量值的节点。
- en: 'To allow a variable to be editable in each of the instances of this Blueprint
    class, you can click the eye icon to the right of that variable inside the `My
    Blueprint` window:![Figure 1.29: Clicking the eye icon to expose a variable and
    allow it to be instance-editable'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要允许变量在此蓝图类的每个实例中可编辑，您可以单击“My Blueprint”窗口中该变量右侧的眼睛图标：![图1.29：单击眼睛图标以显示变量并允许其可实例编辑
- en: '](img/B16183_01_29.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_29.jpg)'
- en: 'Figure 1.29: Clicking the eye icon to expose a variable and allow it to be
    instance-editable'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.29：单击眼睛图标以显示变量并允许其可实例编辑
- en: 'You can then drag an instance of this class to your level, select that instance,
    and see the option to change that variable''s value in the `Details` window of
    the editor:![Figure 1.30: The exposed MyVar variable that can be edited through
    the'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，您可以将此类的实例拖到您的级别中，选择该实例，并在编辑器的`详细`窗口中看到更改该变量值的选项：![图1.30：可以通过
- en: Details panel of that object
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 该对象的详细面板
- en: '](img/B16183_01_30.jpg)'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_30.jpg)'
- en: 'Figure 1.30: The exposed MyVar variable that can be edited through the Details
    panel of that object'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.30：可以通过该对象的详细面板编辑的MyVar变量
- en: And with that, we conclude this exercise and now know how to create our own
    Blueprint variables. Let's now take a look at how to create Blueprint Functions
    in the next exercise.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们完成了这个练习，现在知道如何创建我们自己的蓝图变量。现在让我们看看如何在下一个练习中创建蓝图函数。
- en: 'Exercise 1.05: Creating Blueprint Functions'
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习1.05：创建蓝图函数
- en: 'In this exercise, we will create our first Blueprint Function. In Blueprint,
    functions and events are relatively similar, the only difference being that an
    event will only have an output pin, usually because it gets called from outside
    of the Blueprint class:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将创建我们的第一个蓝图函数。在蓝图中，函数和事件是相对类似的，唯一的区别是事件只会有一个输出引脚，通常是因为它是从蓝图类的外部调用的：
- en: '![Figure 1.31: An event (left), a pure function call that doesn''t need execution
    pins (middle), and a normal function call (right)'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.31：事件（左），不需要执行引脚的纯函数调用（中），和正常函数调用（右）'
- en: '](img/B16183_01_31.jpg)'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_31.jpg)'
- en: 'Figure 1.31: An event (left), a pure function call that doesn''t need execution
    pins (middle), and a normal function call (right)'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.31：事件（左），不需要执行引脚的纯函数调用（中），和正常函数调用（右）
- en: 'The following steps will help you complete this exercise:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助您完成此练习：
- en: 'Click the `+ Function` button inside the `My Blueprint` window:![Figure 1.32:
    The + Function button being hovered over, which will create a new function'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击`My Blueprint`窗口内的`+函数`按钮：![图1.32：悬停在+函数按钮上，这将创建一个新函数
- en: '](img/B16183_01_32.jpg)'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_32.jpg)'
- en: 'Figure 1.32: The + Function button being hovered over, which will create a
    new function'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.32：悬停在+函数按钮上，这将创建一个新函数
- en: Name the new function `MyFunc`.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新函数命名为`MyFunc`。
- en: 'Compile your Blueprint by clicking the `Compile` button in the `Toolbar` window:![Figure
    1.33: The Compile button'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过单击`工具栏`窗口中的`编译`按钮来编译您的蓝图：![图1.33：编译按钮
- en: '](img/B16183_01_33.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_33.jpg)'
- en: 'Figure 1.33: The Compile button'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.33：编译按钮
- en: 'If you now take a look at the `Details` window, you should see the following:![Figure
    1.34: The Details panel after selecting the MyFunc function and adding'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您现在查看`详细`窗口，您应该会看到以下内容：![图1.34：选择MyFunc函数并添加
- en: an input and output pin
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 一个输入和输出引脚
- en: '](img/B16183_01_34.jpg)'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_34.jpg)'
- en: 'Figure 1.34: The Details panel after selecting the MyFunc function and adding
    an input and output pin'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.34：选择MyFunc函数并添加输入和输出引脚后的详细面板
- en: Here, you'll be able to edit all the settings related to this function, the
    most important ones being `Inputs` and `Outputs` at the end of the settings. These
    will allow you to specify the variables that this function must receive and will return.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您将能够编辑与此函数相关的所有设置，最重要的设置是`输入`和`输出`在设置末尾。这将允许您指定此函数必须接收和返回的变量。
- en: 'Lastly, you can edit what this function does by *clicking* it from the `My
    Blueprint` window. This will open a new tab in the center window that will allow
    you to specify what this function will do. In this case, this function will simply
    return `false` every time it is called:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您可以通过*从“My Blueprint”窗口单击*来编辑此函数的功能。这将在中心窗口中打开一个新选项卡，允许您指定此函数将执行的操作。在这种情况下，此函数每次被调用时将简单地返回`false`：
- en: '![Figure 1.35: The contents of the MyFunc function, receiving a Boolean parameter,'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.35：MyFunc函数的内容，接收布尔参数，'
- en: and returning a Boolean type
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 并返回布尔类型
- en: '](img/B16183_01_35.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_35.jpg)'
- en: 'Figure 1.35: The contents of the MyFunc function, receiving a Boolean parameter,
    and returning a Boolean type'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.35：MyFunc函数的内容，接收一个布尔参数，并返回一个布尔类型
- en: To save the modifications we made to this Blueprint class, click the `Save`
    button next to the `Compile` button on the toolbar. Alternatively, you can have
    it so that the Blueprint automatically saves every time you compile it successfully
    by selecting that option.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要保存对此蓝图类所做的修改，请单击工具栏上`Compile`按钮旁边的`Save`按钮。或者，您可以选择使蓝图在成功编译时自动保存。
- en: After following these steps, you now know how to create your own Blueprint Functions.
    Let's now take a look at a Blueprint node we'll be making use of later in this
    chapter.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 按照这些步骤，您现在知道如何创建自己的蓝图函数。现在让我们来看一下本章后面将要使用的蓝图节点。
- en: The Float Multiplication Node
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浮点数乘法节点
- en: 'Blueprint contains many more nodes that are not related to variables or functions.
    One such example is arithmetic nodes (that is adding, subtracting, multiplying,
    and so on.). If you search for `float * float` on the Blueprint Actions menu,
    you''ll find the *Float Multiplication* node:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝图包含许多与变量或函数无关的节点。其中一个例子是算术节点（即加法、减法、乘法等）。如果在蓝图操作菜单中搜索`float * float`，您将找到*浮点数乘法*节点。
- en: '![Figure 1.36: The Float Multiplication node'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.36：浮点数乘法节点'
- en: '](img/B16183_01_36.jpg)'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_36.jpg)'
- en: 'Figure 1.36: The Float Multiplication node'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.36：浮点数乘法节点
- en: This node allows you to input two or more float parameters (you can add more
    by clicking the `+` icon to the right of the `Add pin` text) and output the result
    of the multiplication of all of them. We will be using this node later, in this
    chapter's activity.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 此节点允许您输入两个或多个浮点参数（您可以通过单击`Add pin`文本右侧的`+`图标添加更多参数），并输出所有参数的乘积结果。我们将在本章的后面使用此节点。
- en: BeginPlay and Tick
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: BeginPlay和Tick
- en: 'Let''s now take a look at two of the most important events in UE4: `BeginPlay`
    and `Tick`.'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看一下UE4中两个最重要的事件：`BeginPlay`和`Tick`。
- en: As mentioned previously, events will usually be called from outside the Blueprint
    class. In the case of the `BeginPlay` event, this event gets called either when
    an instance of this Blueprint class is placed in the level and the level starts
    being played, or when an instance of this Blueprint class is spawned dynamically
    while the game is being played. You can think of the `BeginPlay` event as the
    first event that will be called on an instance of this Blueprint, which you can
    use for initialization.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，事件通常会从蓝图类外部调用。在`BeginPlay`事件的情况下，当蓝图类的实例被放置在关卡中并且关卡开始播放时，或者在游戏进行中动态生成蓝图类的实例时，将调用此事件。您可以将`BeginPlay`事件视为在蓝图类的实例上调用的第一个事件，您可以用它进行初始化。
- en: 'The other important event to know about in UE4 is the `Tick` event. As you
    may know, games run at a certain frame rate, the most frequent being either 30
    FPS (frames per second) or 60 FPS: this means that the game will render an updated
    image of the game 30 or 60 times every second. The `Tick` event will get called
    every time the game does this, which means that if the game is running at 30 FPS,
    the `Tick` event will get called 30 times every second.'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在UE4中了解的另一个重要事件是`Tick`事件。如您所知，游戏以一定的帧率运行，最常见的是30 FPS（每秒帧数）或60 FPS：这意味着游戏将每秒渲染30次或60次更新的游戏图像。`Tick`事件将在游戏执行此操作时被调用，这意味着如果游戏以30
    FPS运行，则`Tick`事件将每秒被调用30次。
- en: 'Go to your Blueprint class''s `Event Graph` window and delete the three grayed-out
    events by selecting all of them and clicking the `Delete` key, which should cause
    the `Event Graph` window to become empty. After that, *right-click* inside the
    `Event Graph` window, type in `BeginPlay`, and select the `Event BeginPlay` node
    by either clicking the `Enter` key or by clicking on that option in the Blueprint
    Actions menu. This should cause that event to be added to the `Event Graph` window:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 转到蓝图类的`事件图`窗口，并通过选择它们所有并单击`Delete`键来删除三个灰色事件，这将导致`事件图`窗口变为空白。之后，在`事件图`窗口内部*右键单击*，输入`BeginPlay`，并选择`Event
    BeginPlay`节点，然后单击`Enter`键或在蓝图操作菜单中选择该选项。这将导致该事件被添加到`事件图`窗口中：
- en: '![Figure 1.37: The BeginPlay event being added to the Event Graph window through
    the Blueprint Actions menu'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.37：通过蓝图操作菜单将BeginPlay事件添加到事件图窗口中'
- en: '](img/B16183_01_37.jpg)'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_37.jpg)'
- en: 'Figure 1.37: The BeginPlay event being added to the Event Graph window through
    the Blueprint Actions menu'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.37：通过蓝图操作菜单将BeginPlay事件添加到事件图窗口中
- en: '*Right-click* inside the `Event Graph` window, type in `Tick`, and select the
    `Event Tick` node. This should cause that event to be added to the `Event Graph`
    window:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '*右键单击*事件图窗口内部，输入`Tick`，并选择`Event Tick`节点。这将导致该事件被添加到事件图窗口中：'
- en: '![Figure 1.38: The Tick event'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.38：Tick事件'
- en: '](img/B16183_01_38.jpg)'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_38.jpg)'
- en: 'Figure 1.38: The Tick event'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.38：Tick事件
- en: Unlike the `BeginPlay` event, the `Tick` event will be called with a parameter,
    `DeltaTime`. This parameter is a float that indicates the amount of time that
    passed since the last frame was rendered. If your game is running at 30 FPS, this
    means that the interval between each of the frames being rendered (the delta time)
    is going to be, on average, 1/30 seconds, which is around 0.033 seconds (33.33
    milliseconds). If frame 1 is rendered and then frame 2 is rendered 0.2 seconds
    after that, then frame 2's delta time will be 0.2 seconds. If frame 3 gets rendered
    0.1 seconds after frame 2, frame 3's delta time will be 0.1 seconds, and so forth.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 与`BeginPlay`事件不同，`Tick`事件将带有一个参数`DeltaTime`。此参数是一个浮点数，表示自上一帧渲染以来经过的时间。如果您的游戏以30
    FPS运行，则每个帧之间的间隔（增量时间）平均为1/30秒，约为0.033秒（33.33毫秒）。如果渲染帧1，然后0.2秒后渲染帧2，则帧2的增量时间将为0.2秒。如果帧3在帧2之后0.1秒渲染，则帧3的增量时间将为0.1秒，依此类推。
- en: 'But why is the `DeltaTime` parameter so important? Let''s take a look at the
    following scenario: you have a Blueprint class that increases its position on
    the *Z* axis by 1 unit every time a frame is rendered using the `Tick` event.
    However, you are faced with a problem: there''s the possibility that players will
    run your game at different frame rates, such as 30 FPS and 60 FPS. The player
    who''s running the game at 60 FPS will cause the `Tick` event to be called twice
    as much as the player who''s running the game at 30 FPS, and the Blueprint class
    will end up moving twice as fast because of that. This is where the delta time
    comes into play: because the game that''s running at 60 FPS will have the `Tick`
    event called with a lower delta time value (the interval between the frames being
    rendered is much smaller), you can use that value to change the position on the
    *Z* axis. Although the `Tick` event is being called twice as much on the game
    running at 60 FPS, its delta time is half the value, so it all balances out. This
    will cause two players playing the game with different frame rates to have the
    same result.'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 但是为什么“DeltaTime”参数如此重要？让我们看看以下情景：您有一个蓝图类，它使用“Tick”事件在每次渲染帧时在Z轴上增加1个单位的位置。然而，您面临一个问题：玩家可能以不同的帧率运行游戏，比如30
    FPS和60 FPS。以60 FPS运行游戏的玩家将导致“Tick”事件被调用的次数是以30 FPS运行游戏的玩家的两倍，并且蓝图类将因此移动速度加快两倍。这就是增量时间的作用所在：因为以60
    FPS运行游戏的“Tick”事件被调用的增量时间值较低（渲染帧之间的间隔更小），您可以使用该值来改变Z轴上的位置。尽管以60 FPS运行游戏的“Tick”事件被调用的次数是30
    FPS运行游戏的两倍，但其增量时间是一半，因此一切都平衡了。这将导致以不同帧率玩游戏的两个玩家获得相同的结果。
- en: Note
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you want a Blueprint that is using the delta time to move, you can make it
    move faster or slower by multiplying the delta time by the number of units you
    want it to move per second (for example, if you want a Blueprint to move 3 units
    per second on the *Z* axis, you can tell it to move `3 * DeltaTime` units every
    frame).
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望一个使用增量时间移动的蓝图移动得更快或更慢，可以将增量时间乘以您希望它每秒移动的单位数（例如，如果您希望一个蓝图在Z轴上每秒移动3个单位，您可以告诉它每帧移动`3
    * DeltaTime`个单位）。
- en: Let's now try another exercise, which will consist of working with Blueprint
    nodes and pins.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们尝试另一个练习，这将涉及使用蓝图节点和引脚。
- en: 'Exercise 1.06: Offsetting the TestActor Class on the Z Axis'
  id: totrans-273
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习1.06：在Z轴上偏移TestActor类
- en: In this exercise, you'll be using the `BeginPlay` event to offset (move) the
    `TestActor` on the *Z* axis when the game starts being played.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您将使用“BeginPlay”事件在游戏开始播放时偏移（移动）“TestActor”在Z轴上的位置。
- en: 'The following steps will help you complete this exercise:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助您完成此练习：
- en: Open the `TestActor` Blueprint class.
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开“TestActor”蓝图类。
- en: Using the `Blueprint Actions` menu, add the `Event BeginPlay` node to the graph,
    if it's not already there.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用“蓝图操作”菜单，将“事件BeginPlay”节点添加到图表中，如果尚未添加。
- en: 'Add the `AddActorWorldOffset` function and connect the `BeginPlay` event''s
    output execution pin to this function''s input execution pin. This function is
    responsible for moving an Actor in the intended axes (*X*, *Y*, and *Z*) and it
    receives the following parameters:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加“AddActorWorldOffset”函数，并将“BeginPlay”事件的输出执行引脚连接到此函数的输入执行引脚。此函数负责在预期轴（*X*、*Y*和*Z*）上移动Actor，并接收以下参数：
- en: '`Target`: The Actor that this function should be called on, which will be the
    Actor calling this function. The default behavior is to call this function on
    the Actor calling this function, which is exactly what we want and is shown using
    the `self` property.'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “Target”：应调用此函数的Actor，这将是调用此函数的Actor。默认行为是在调用此函数的Actor上调用此函数，这正是我们想要的，并且使用“self”属性显示。
- en: '`DeltaLocation`: The amount that we want to offset this Actor by in each of
    the three axes: X, Y, and Z.'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “DeltaLocation”：我们希望在三个轴上偏移此Actor的量：X、Y和Z。
- en: 'We won''t be getting into the other two parameters, `Sweep` and `Teleport`,
    so you can leave them as is. They are both Boolean types and should be left as `false`:![Figure
    1.39: The BeginPlay event calling the AddActorWorldOffset function'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不会涉及另外两个参数“Sweep”和“Teleport”，所以您可以将它们保持不变。它们都是布尔类型，应该保持为`false`：![图1.39：BeginPlay事件调用AddActorWorldOffset函数
- en: '](img/B16183_01_39.jpg)'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_39.jpg)'
- en: 'Figure 1.39: The BeginPlay event calling the AddActorWorldOffset function'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.39：BeginPlay事件调用AddActorWorldOffset函数
- en: 'Split the `Delta Location` input pin, which will cause this `Vector` property
    to be split into three float properties. You can do this to any variable type
    that is comprised of one or more subtypes (you wouldn''t be able to do this to
    the float type because it''s not comprised of any variable subtypes) by *right-clicking*
    on them and selecting `Split Struct Pin`:![Figure 1.40: The Delta Location parameter
    being split from a vector into three floats'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拆分“Delta Location”输入引脚，这将导致将此“Vector”属性拆分为三个浮点属性。您可以通过*右键单击*它们并选择“拆分结构引脚”来对由一个或多个子类型组成的任何变量类型执行此操作（您无法对浮点类型执行此操作，因为它不包含任何变量子类型）：![图1.40：将Delta位置参数从矢量拆分为三个浮点数
- en: '](img/B16183_01_40.jpg)'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_40.jpg)'
- en: 'Figure 1.40: The Delta Location parameter being split from a vector into three
    floats'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.40：将Delta位置参数从矢量拆分为三个浮点数
- en: Set the `Z` property of `Delta Location` to `100` units by clicking with the
    *left mouse button*, typing that number, and then pressing the *Enter* key. This
    will cause our `TestActor` to move up on the *Z* axis by `100` units when the
    game starts.
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过单击*鼠标左键*，输入该数字，然后按*Enter*键，将“Delta Location”的“Z”属性设置为100个单位。这将导致我们的“TestActor”在游戏开始时在Z轴上向上移动100个单位。
- en: 'Add a cube shape to your `TestActor`, using the `Components` window, so that
    we can see our Actor. You can do this by clicking the `+ Add Component` button,
    typing `Cube`, and then selecting the first option under the `Basic Shapes` section:![Figure
    1.41: Adding a cube shape'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用“组件”窗口向您的“TestActor”添加一个立方体形状，以便我们可以看到我们的角色。您可以通过单击“+添加组件”按钮，输入“Cube”，然后选择“基本形状”部分下的第一个选项来执行此操作：![图1.41：添加一个立方体形状
- en: '](img/B16183_01_41.jpg)'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_41.jpg)'
- en: 'Figure 1.41: Adding a cube shape'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.41：添加一个立方体形状
- en: Compile and save your Blueprint class by clicking the `Compile` button.
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过单击“编译”按钮来编译和保存您的蓝图类。
- en: 'Go back to the level''s `Viewport` window and place an instance of your `TestActor`
    Blueprint class inside the level, if you haven''t done so already:![Figure 1.42:
    Adding an instance of TestActor to the level'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到级别的“视口”窗口，并在级别中放置一个您的“TestActor”蓝图类的实例，如果您还没有这样做的话：![图1.42：将TestActor的实例添加到级别
- en: '](img/B16183_01_42.jpg)'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_42.jpg)'
- en: 'Figure 1.42: Adding an instance of TestActor to the level'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.42：将TestActor的实例添加到级别
- en: 'When you play the level, you should notice that the `TestActor` we added to
    the level is in a more elevated position:![Figure 1.43: The TestActor increasing
    its position on the Z axis when the game starts'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您播放级别时，您应该注意到我们添加到级别中的“TestActor”处于更高的位置：![图1.43：游戏开始时TestActor在Z轴上增加其位置
- en: '](img/B16183_01_43.jpg)'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_43.jpg)'
- en: 'Figure 1.43: The TestActor increasing its position on the Z axis when the game
    starts'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.43：游戏开始时TestActor在Z轴上增加其位置
- en: After making these modifications, save the changes made to our level by either
    pressing *Ctrl + S* or by clicking the `Save Current` button on the editor `Toolbar`.
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在进行这些修改后，通过按下*Ctrl + S*或单击编辑器“工具栏”上的“保存当前”按钮来保存我们对级别所做的更改。
- en: In this exercise, you've learned how to create your first Actor Blueprint class
    with your own Blueprint scripting logic.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您已经学会了如何创建您自己的蓝图脚本逻辑的第一个角色蓝图类。
- en: Note
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Both the `TestActor` blueprint asset and the `Map` asset with the final result
    of this exercise can be found here: [https://packt.live/3lfYOa9](https://packt.live/3lfYOa9).'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: “TestActor”蓝图资产和此练习的最终结果的“地图”资产都可以在这里找到：[https://packt.live/3lfYOa9](https://packt.live/3lfYOa9)。
- en: Now that we've done this, let's learn a bit more about the `ThirdPersonCharacter`
    Blueprint class.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经做到了这一点，让我们更多地了解“ThirdPersonCharacter”蓝图类。
- en: ThirdPersonCharacter Blueprint Class
  id: totrans-303
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三人称角色蓝图类
- en: Let's take a look at the `ThirdPersonCharacter` Blueprint class, which is the
    Blueprint representing the character that the player controls, and take a look
    at the Actor Components that it contains.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看“ThirdPersonCharacter”蓝图类，这是代表玩家控制的角色的蓝图，并看看它包含的角色组件。
- en: 'Go to the `ThirdPersonCPP -> Blueprints` directory inside `Content Browser`
    and open the `ThirdPersonCharacter` asset:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 转到“内容浏览器”中的“ThirdPersonCPP->蓝图”目录，并打开“ThirdPersonCharacter”资产：
- en: '![Figure 1.44: The ThirdPersonCharacter Blueprint class'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.44：ThirdPersonCharacter蓝图类'
- en: '](img/B16183_01_44.jpg)'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_44.jpg)'
- en: 'Figure 1.44: The ThirdPersonCharacter Blueprint class'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.44：ThirdPersonCharacter蓝图类
- en: In a previous section, where we introduced the `Components` window inside the
    Blueprint editor, we mentioned **Actor Components**.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的部分中，我们介绍了蓝图编辑器中的“组件”窗口，我们提到了**角色组件**。
- en: 'Actor Components are entities that must live inside an Actor and allow you
    to spread the logic of your Actor into several different Actor Components. In
    this Blueprint, we can see that there are four visually represented Actor Components:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 角色组件是必须存在于角色内部的实体，并允许您将角色的逻辑分散到几个不同的角色组件中。在这个蓝图中，我们可以看到有四个可视表示的角色组件：
- en: A Skeletal Mesh Component, which shows the UE4 mannequin
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示UE4模特的骨骼网格组件
- en: A Camera Component, which shows where the player will be able to see the game
    from
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个摄像头组件，显示玩家将能够从哪里看到游戏
- en: An Arrow Component, which allows us to see where the character is facing (this
    is mainly used for development purposes, not while the game is being played)
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个箭头组件，允许我们看到角色面对的方向（这主要用于开发目的，而不是在游戏进行时）
- en: A Capsule Component, which specifies the collision range of this character
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指定此角色的碰撞范围的胶囊组件
- en: If you look at the `Components` window, you'll see a few more Actor Components
    than the ones we see in the `Viewport` window. This is because some Actor Components
    don't have a visual representation and are purely made up of C++ or Blueprint
    code. We'll be going into more depth on Actor Components in the next chapter and
    *Chapter 9*, *Audio-Visual Elements*.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您查看“组件”窗口，您会看到一些比我们在“视口”窗口中看到的更多的角色组件。这是因为一些角色组件没有视觉表示，纯粹由C++或蓝图代码组成。我们将在下一章和第9章“音频-视觉元素”中更深入地了解角色组件。
- en: If you take a look at this Blueprint class's `Event Graph` window, you'll see
    that it's essentially empty, like the one we saw with our `TestActor` Blueprint
    class, despite it having a bit of logic associated with it. That is because that
    logic is defined in the C++ class and not in this Blueprint class. We'll be taking
    a look at how to do this in the next chapter.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看一下这个蓝图类的“事件图”窗口，你会发现它基本上是空的，就像我们在“TestActor”蓝图类中看到的那样，尽管它有一些与之相关的逻辑。这是因为该逻辑是在C++类中定义的，而不是在这个蓝图类中。我们将在下一章中看看如何做到这一点。
- en: In order to explain this Blueprint class's Skeletal Mesh Component, we should
    first talk about meshes and materials.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解释这个蓝图类的骨骼网格组件，我们应该先讨论网格和材料。
- en: Meshes and Materials
  id: totrans-318
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网格和材料
- en: 'For a computer to visually represent a 3D object, it needs two things: a 3D
    mesh and a material.'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 要使计算机可视化表示3D对象，需要两样东西：3D网格和材料。
- en: Meshes
  id: totrans-320
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网格
- en: '3D meshes allow you to specify the size and shape of an object, like this mesh
    representing a monkey''s head:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 3D网格允许您指定对象的大小和形状，就像这个代表猴子头部的网格：
- en: '![Figure 1.45: A 3D mesh of a monkey''s head'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.45：猴子头部的3D网格'
- en: '](img/B16183_01_45.jpg)'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_45.jpg)'
- en: 'Figure 1.45: A 3D mesh of a monkey''s head'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.45：猴子头部的3D网格
- en: Meshes are comprised of several vertices, edges, and faces. Vertices are simply
    a 3D coordinate with an *X*, *Y,* and *Z* position; an edge is a connection (that
    is, a line) between two vertices; and a face is a connection of three or more
    edges. You can see in the previous figure the individual vertices, edges, and
    faces of the mesh, where each face is colored between white and black, depending
    on how much light is reflecting off the face. Nowadays, video games can render
    meshes with thousands of vertices in such a way that you can't tell the individual
    vertices apart because there are so many of them so close together.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 网格由多个顶点、边和面组成。顶点只是具有*X*、*Y*和*Z*位置的3D坐标；边是两个顶点之间的连接（即一条线）；面是三个或更多边的连接。您可以在前面的图中看到网格的各个顶点、边和面，其中每个面的颜色在白色和黑色之间变化，取决于面上反射的光线量。如今，视频游戏可以以这样的方式渲染网格，其中有成千上万的顶点，以至于您无法分辨出单个顶点，因为它们太靠在一起了。
- en: Materials
  id: totrans-326
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 材质
- en: Materials, on the other hand, allow you to specify how a mesh is going to be
    represented. They allow you to specify a mesh's color, draw a texture on its surface,
    or even manipulate its individual vertices.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，材质允许您指定网格的表示方式。它们允许您指定网格的颜色，在其表面绘制纹理，甚至操纵其各个顶点。
- en: Creating meshes is something that, as of the time of writing this book, is not
    properly supported inside UE4 and should be done in another piece of software,
    such as Blender or Autodesk Maya, so we won't be going into this in great detail
    here. We will, however, learn how to create materials for existing meshes.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 创建网格是一件事，在撰写本书时，UE4尚未得到适当支持，应在另一款软件（例如Blender或Autodesk Maya）中完成，因此我们不会在这里详细介绍这一点。但是，我们将学习如何为现有网格创建材质。
- en: In UE4, you can add meshes through Mesh Components, which inherit from the Actor
    Component class. There are several types of Mesh Components, but the two most
    important ones are Static Mesh Components, for meshes that don't have animations
    (for example, cubes, static level geometry), and Skeletal Mesh Components, for
    meshes that have animations (for example, character meshes that play movement
    animations). As we saw earlier, the `ThirdPersonCharacter` Blueprint class contains
    a Skeletal Mesh Component because it's used to represent a character mesh that
    plays movement animations. In the next chapter, we'll be learning how to import
    assets such as meshes into our UE4 project.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 在UE4中，您可以通过网格组件添加网格，这些网格继承自Actor组件类。有几种类型的网格组件，但最重要的两种是静态网格组件，用于没有动画的网格（例如，立方体，静态级别几何体），以及骨骼网格组件，用于具有动画的网格（例如，播放移动动画的角色网格）。正如我们之前所看到的，“ThirdPersonCharacter”蓝图类包含骨骼网格组件，因为它用于表示播放移动动画的角色网格。在下一章中，我们将学习如何将资产（例如网格）导入到我们的UE4项目中。
- en: Let's now take a look at materials in UE4 in the next exercise.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在下一个练习中看一下UE4中的材质。
- en: Manipulating Materials in UE4
  id: totrans-331
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在UE4中操作材质
- en: In this section, we'll be taking a look at how materials work in UE4\.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看一看材质在UE4中的工作原理。
- en: 'Go back to your `Level Viewport` window and select this `Cube` object:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到您的“级别视口”窗口，并选择此“立方体”对象：
- en: '![Figure 1.46: The Cube object, next to the text saying Third Person on the
    floor'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.46：立方体对象，旁边的文字写着地板上的第三人称'
- en: '](img/B16183_01_46.jpg)'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_46.jpg)'
- en: 'Figure 1.46: The Cube object, next to the text saying Third Person on the floor'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.46：立方体对象，旁边的文字写着地板上的第三人称
- en: 'Take a look at the `Details` window, where you''ll be able to see both the
    mesh and material associated with this object''s `Static Mesh` component:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 查看“详细信息”窗口，您将能够看到与此对象的“静态网格”组件关联的网格和材质：
- en: '![Figure 1.47: The Static Mesh and Materials (Element 0) properties of the
    Cube'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.47：立方体的静态网格和材质（元素0）属性'
- en: object's Static Mesh component
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 对象的静态网格组件
- en: '](img/B16183_01_47.jpg)'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_47.jpg)'
- en: 'Figure 1.47: The Static Mesh and Materials (Element 0) properties of the Cube
    object''s Static Mesh component'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.47：立方体对象的静态网格组件的材质（元素0）属性
- en: Note
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Keep in mind that meshes can have more than one material, but must have at least
    one.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，网格可以有多个材质，但必须至少有一个。
- en: 'Click the *looking glass* icon next to the `Material` property to be taken
    to that material''s location in `Content Browser`. This icon works with any reference
    to any asset inside the editor, so you can do the same thing with the asset referenced
    as the cube object''s `Static Mesh`:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 单击“材质”属性旁边的*放大镜*图标，以转到“内容浏览器”中该材质的位置。该图标适用于编辑器中对任何资产的任何引用，因此您也可以对立方体对象的“静态网格”引用执行相同操作：
- en: '![Figure 1.48: The looking glass icon (left), which takes you to that'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.48：放大镜图标（左），可带您到该资产在“内容浏览器”中的位置（右）'
- en: asset's location in Content Browser (right)
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 资产在内容浏览器中的位置（右）
- en: '](img/B16183_01_48.jpg)'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_48.jpg)'
- en: 'Figure 1.48: The looking glass icon (left), which takes you to that asset''s
    location in Content Browser (right)'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.48：放大镜图标（左），可带您到该资产在内容浏览器中的位置（右）
- en: '*Double-click* that asset with the left mouse button to open that asset in
    the `Material` editor. Let''s break down the windows present in `Material editor`:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '*双击*使用鼠标左键打开“材质”编辑器中的资产。让我们来分解“材质编辑器”中的窗口：'
- en: '![Figure 1.49: The Material editor window broken down into five parts'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.49：将材质编辑器窗口分解为五个部分'
- en: '](img/B16183_01_49.jpg)'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_49.jpg)'
- en: 'Figure 1.49: The Material editor window broken down into five parts'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.49：将材质编辑器窗口分解为五个部分
- en: '`Graph`: Front and center in the editor, you have the `Graph` window. Similar
    to the Blueprint editor''s `Event Graph` window, the `Material` editor''s graph
    is also node-based, where you''ll also find nodes connected by pins, although
    here you won''t find execution pins, only input and output pins.'
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`图表`：在编辑器的正中央，您将看到`图表`窗口。类似于蓝图编辑器的`事件图表`窗口，材质编辑器的图表也是基于节点的，您将在此找到通过引脚连接的节点，尽管这里不会找到执行引脚，只有输入和输出引脚。'
- en: '`Palette`: At the right edge of the screen, you''ll see the `Palette` window,
    where you''ll be able to search all the nodes that you can add to the `Graph`
    window. You can also do this the same way as in the Blueprint editor''s `Event
    Graph` window by *right-clicking* inside the `Graph` window and typing the node
    you wish to add.'
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Palette`：在屏幕的右边缘，你会看到`Palette`窗口，你可以在这里搜索所有可以添加到`Graph`窗口的节点。你也可以像在蓝图编辑器的`事件图`窗口中一样，通过在`Graph`窗口内*右键单击*并输入你想要添加的节点来实现。'
- en: '`Viewport`: At the top-left corner of the screen, you''ll see the `Viewport`
    window. Here, you''ll be able to preview the result of your material and how it
    will appear on some basic shapes such as spheres, cubes, and planes.'
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Viewport`：在屏幕的左上角，你会看到`Viewport`窗口。在这里，你可以预览你的材质的结果，以及它在一些基本形状上的外观，比如球体、立方体和平面。'
- en: '`Details`: At the bottom-left corner of the screen, you''ll see the `Details`
    window where, similar to the Blueprint editor, you''ll be able to see the details
    of either this `Material` asset or those of the currently selected node in the
    `Graph` window.'
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Details`：在屏幕的左下角，你会看到`Details`窗口，类似于蓝图编辑器，你可以查看`材质`资产的细节，或者查看`Graph`窗口中当前选定节点的细节。'
- en: '`Toolbar`: At the top edge of the screen, you''ll see the `Toolbar` window,
    where you''ll be able to apply and save the changes made to your material, as
    well as to perform several actions related to the `Graph` window.'
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Toolbar`：在屏幕的顶部边缘，你会看到`Toolbar`窗口，你可以在这里应用和保存对材质的更改，以及执行与`Graph`窗口相关的几个操作。'
- en: In every single Material editor inside UE4, you'll find a node with the name
    of that `Material` asset, where you'll be able to specify several parameters related
    to it by plugging that node's pins to other nodes.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 在UE4的每个材质编辑器中，你都会找到一个名为`Material`的节点，通过将该节点的引脚连接到其他节点，你可以指定与之相关的几个参数。
- en: In this case, you can see that there's a node called `0.7` being plugged into
    the `Roughness` pin. This node is a `Constant` node, which allows you to specify
    a number associated with it – in this case, `0.7`. You can create constant nodes
    of a single number, a 2 vector (for example, `(1, 0.5)`), a 3 vector (for example,
    `(1, 0.5, 4)`), and a 4 vector (for example, `(1,0.5, 4, 0)`). To create these
    nodes, you can press the `Graph` window with the *left mouse button* while holding
    the `1`, `2`, `3`, or `4` number keys, respectively.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，你可以看到有一个名为`0.7`的节点被插入到`Roughness`引脚中。这个节点是一个`Constant`节点，允许你指定与之关联的数字
    - 在这种情况下是`0.7`。你可以创建单个数字、2个向量（例如，`(1, 0.5)`）、3个向量（例如，`(1, 0.5, 4)`）和4个向量（例如，`(1,0.5,
    4, 0)`）的常数节点。要创建这些节点，你可以按住`1`、`2`、`3`或`4`数字键，同时在`Graph`窗口上按下*鼠标左键*。
- en: 'Materials have several input parameters, so let''s go through some of the most
    important ones:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 材质有几个输入参数，让我们来看一些最重要的参数：
- en: '`BaseColor`: This parameter is simply the color of the material. Generally,
    constants or texture samples are used to connect to this pin, to either have an
    object be a certain color or to map to a certain texture.'
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BaseColor`：这个参数就是材质的颜色。通常，常数或纹理样本被用来连接到这个引脚，要么让一个物体成为特定颜色，要么映射到特定纹理。'
- en: '`Metallic`: This parameter will dictate how much your object will look like
    a metal surface. You can do this by connecting a constant single number node that
    ranges from 0 (not metallic) to 1 (very metallic).'
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Metallic`：这个参数将决定你的物体看起来有多像金属表面。你可以通过连接一个范围从0（非金属）到1（非常金属）的常数单个数字节点来实现这一点。'
- en: '`Specular`: This parameter will dictate how much your object will reflect light.
    You can do this by connecting a constant single number node that ranges from 0
    (doesn''t reflect any light) to 1 (reflects all the light). If your object is
    already very metallic, you will see little to no difference.'
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Specular`：这个参数将决定你的物体将反射多少光。你可以通过连接一个范围从0（不反射任何光）到1（反射所有光）的常数单个数字节点来实现这一点。如果你的物体已经非常金属，你将看不到任何或很少的差异。'
- en: '`Roughness`: This parameter will dictate how much the light that your object
    reflects will be scattered (the more the light scatters, the less clear this object
    will reflect what''s around it). You can do this by connecting a constant single
    number node that ranges from 0 (the object essentially becomes a mirror) to 1
    (the reflection on this object is blurry and unclear).'
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Roughness`：这个参数将决定你的物体反射的光有多少会被散射（光散射得越多，这个物体反射周围的东西就越不清晰）。你可以通过连接一个范围从0（物体基本上变成镜子）到1（这个物体上的反射是模糊不清）的常数单个数字节点来实现这一点。'
- en: Note
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To learn more about `material` inputs like the ones above, go to [https://docs.unrealengine.com/en-US/Engine/Rendering/Materials/MaterialInputs](https://docs.unrealengine.com/en-US/Engine/Rendering/Materials/MaterialInputs).
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于上述`材质`输入的信息，请访问[https://docs.unrealengine.com/en-US/Engine/Rendering/Materials/MaterialInputs](https://docs.unrealengine.com/en-US/Engine/Rendering/Materials/MaterialInputs)。
- en: 'UE4 also allows you to import images (`.jpeg`, `.png`) as `Texture` assets,
    which can then be referenced in a material using `Texture Sample` nodes:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: UE4还允许你导入图像（`.jpeg`、`.png`）作为`纹理`资产，然后可以在材质中使用`纹理样本`节点引用：
- en: '![Figure 1.50: The Texture Sample node, which allows you to specify a texture
    and use'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.50：纹理样本节点，允许你指定一个纹理并使用'
- en: it or its individual color channels as pins
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 它或其个别颜色通道作为引脚
- en: '](img/B16183_01_50.jpg)'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_50.jpg)'
- en: 'Figure 1.50: The Texture Sample node, which allows you to specify a texture
    and use it or its individual color channels as pins'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.50：纹理样本节点，允许你指定一个纹理并将其用作引脚的颜色通道
- en: Note
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We will be taking a look at how to import files into UE4 in the next chapter.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一章中看一下如何将文件导入到UE4中。
- en: In order to create a new `Material` asset, you can do so by *right-clicking*
    on the directory inside `Content Browser` where you want to create the new asset,
    which will allow you to choose which asset to create, and then select `Material`.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的`材质`资产，你可以在`Content Browser`内*右键单击*要创建新资产的目录，这将允许你选择要创建的资产，然后选择`Material`。
- en: Now you know how to create and manipulate materials in UE4.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您知道如何在UE4中创建和操作材质了。
- en: Let's now jump into this chapter's activity, which will be the first activity
    of this book.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们开始本章的活动，这将是本书的第一个活动。
- en: 'Activity 1.01: Propelling TestActor on the Z Axis Indefinitely'
  id: totrans-377
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动1.01：在Z轴上无限推进TestActor
- en: In this activity, you will use the `Tick` event of `TestActor` to move it on
    the *Z* axis indefinitely, instead of doing this only once when the game starts.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个活动中，您将使用`TestActor`的`Tick`事件来使其在*Z*轴上无限移动，而不仅仅在游戏开始时执行一次。
- en: 'The following steps will help you complete this activity:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助您完成此活动：
- en: Open the `TestActor` Blueprint class.
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`TestActor`蓝图类。
- en: Add the `Event Tick` node to the Blueprint's `Event Graph` window.
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`事件 Tick`节点添加到蓝图的`事件图`窗口中。
- en: Add the `AddActorWorldOffset` function, split its `DeltaLocation` pin, and connect
    the `Tick` event's output execution pin to this function's input execution pin,
    similar to what we did in *Exercise 1.01*, *Creating an Unreal Engine 4 Project*.
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`AddActorWorldOffset`函数，拆分其`DeltaLocation`引脚，并将`Tick`事件的输出执行引脚连接到此函数的输入执行引脚，类似于我们在*练习1.01*，*创建虚幻引擎4项目*中所做的。
- en: Add a *Float Multiplication* node to `Event Graph` window.
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`事件图`窗口中添加一个*Float Multiplication*节点。
- en: Connect the `Tick` event's `Delta Seconds` output pin to the first input pin
    of the *Float Multiplication* node.
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Tick`事件的`Delta Seconds`输出引脚连接到*Float Multiplication*节点的第一个输入引脚。
- en: Create a new variable of the `float` type, call it `VerticalSpeed,` and set
    its default value to `25`.
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`float`类型的新变量，称为`VerticalSpeed`，并将其默认值设置为`25`。
- en: Add a getter to the `VerticalSpeed` variable to the `Event Graph` window and
    connect its pin to the second input pin of the *Float Multiplication* node. After
    that, connect the *Float Multiplication* node's output pin to the `Delta Location
    Z` pin of the `AddActorWorldOffset` function.
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`事件图`窗口中为`VerticalSpeed`变量添加一个getter，并将其引脚连接到*Float Multiplication*节点的第二个输入引脚。之后，将*Float
    Multiplication*节点的输出引脚连接到`AddActorWorldOffset`函数的`Delta Location Z`引脚。
- en: Delete the `BeginPlay` event and the `AddActorWorldOffset` function connected
    to it, both of which we created in *Exercise 1.01*, *Creating an Unreal Engine
    4 Project*.
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除我们在*练习1.01*，*创建虚幻引擎4项目*中创建的`BeginPlay`事件和连接到它的`AddActorWorldOffset`函数。
- en: 'Play the level and notice our `TestActor` rising from the ground and up into
    the air over time:![Figure 1.51: The TestActor propelling itself vertically'
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 播放关卡，注意我们的`TestActor`随着时间从地面上升到空中：![图1.51：TestActor在垂直方向上推进
- en: '](img/B16183_01_51.jpg)'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16183_01_51.jpg)'
- en: 'Figure 1.51: The TestActor propelling itself vertically'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.51：TestActor在垂直方向上推进
- en: And with those steps completed, we conclude this activity – the first of many
    in this book. We've now consolidated adding and removing nodes to and from the
    Blueprint editor's `Event Graph` window, as well as using the `Tick` event and
    its `DeltaSeconds` property to create game logic that maintains consistency across
    different frame rates.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些步骤后，我们结束了这个活动——本书中的第一个活动。我们现在已经巩固了向蓝图编辑器的`事件图`窗口添加和删除节点，以及使用`Tick`事件及其`DeltaSeconds`属性来创建跨不同帧率保持一致性的游戏逻辑。
- en: Note
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The solution to this activity can be found at: [https://packt.live/338jEBx](https://packt.live/338jEBx).'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的解决方案可以在此处找到：[https://packt.live/338jEBx](https://packt.live/338jEBx)。
- en: 'The `TestActor` blueprint asset can be found here: [https://packt.live/2U8pAVZ](https://packt.live/2U8pAVZ).'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '`TestActor`蓝图资产可以在这里找到：[https://packt.live/2U8pAVZ](https://packt.live/2U8pAVZ)。'
- en: Summary
  id: totrans-395
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: By completing this chapter, you have taken the first step in your game development
    journey by learning about Unreal Engine 4\. You now know how to navigate the Unreal
    Engine editor, manipulate the Actors inside a level, create your own Actors, use
    the Blueprint scripting language, and how 3D objects are represented in Unreal
    Engine 4.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 通过完成本章，您已经迈出了游戏开发之旅的第一步，了解了虚幻引擎4。您现在知道如何浏览虚幻引擎编辑器，操作关卡内的角色，创建自己的角色，使用蓝图脚本语言，以及在虚幻引擎4中如何表示3D对象。
- en: Hopefully, you realize that there's a whole world of possibilities ahead of
    you and that the sky is the limit in terms of the things you can create using
    this game development tool.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 希望您意识到在您面前有一个充满可能性的世界，并且在使用这个游戏开发工具创建各种东西方面，天空是极限。
- en: In the next chapter, you will recreate the project template that was automatically
    generated in this chapter from scratch. You will learn how to create your own
    C++ classes and then create Blueprint classes that can manipulate properties declared
    in their parent class and how to import character meshes and animations into Unreal
    Engine 4, as well as becoming familiar with other animation-related assets such
    as *Animation Blueprints*.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将从头开始重新创建本章自动生成的项目模板。您将学习如何创建自己的C++类，然后创建可以操作其父类声明的属性的蓝图类，以及如何将角色网格和动画导入到虚幻引擎4中，以及熟悉其他与动画相关的资产，如*动画蓝图*。
