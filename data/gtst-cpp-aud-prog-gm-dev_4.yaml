- en: Chapter 4. 3D Audio
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。3D音频
- en: 'Our perception of sound varies depending on where we are located in relation
    to its source, and on several characteristics of the environment. We have already
    discussed that sound is a mechanical wave, which has an origin, and needs to travel
    all the way to our ears before we can hear it. Along the way, those sound waves
    interact with the environment, such as walls, objects, or the air itself, and
    begin to change. Many of the changes provide valuable cues for our brain to determine
    the location of the sound or the nature of the environment. The following is a
    list of some of the most important factors that have an impact on sound:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对声音的感知取决于我们相对于其来源的位置以及环境的几个特征。我们已经讨论过声音是一种机械波，它有一个起源，并且需要在我们听到它之前一直传播到我们的耳朵。在传播过程中，这些声波与环境（如墙壁、物体或空气本身）相互作用，并开始改变。许多这些变化为我们的大脑提供了有价值的线索，以确定声音的位置或环境的性质。以下是一些对声音产生重要影响的因素的列表：
- en: '**Distance**: The distance between the source of the sound and our ears has
    a significant effect on its intensity, because air and other mediums attenuate
    sound as it passes by.'
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**距离**：声音源和我们的耳朵之间的距离对其强度有显著影响，因为空气和其他介质会在声音经过时减弱声音。'
- en: '**Direction**: Our ears can identify the direction a sound is coming from thanks
    to minor time and intensity variations between the sounds captured by each ear.'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**方向**：由于每只耳朵捕捉到的声音之间的微小时间和强度变化，我们的耳朵可以确定声音来自的方向。'
- en: '**Movement**: The relative speed between the sound source and our ears can
    make it appear to have a different pitch, because of a phenomenon known as the
    *Doppler effect*.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运动**：声源和我们的耳朵之间的相对速度可能会使其听起来具有不同的音调，这是由于一种称为多普勒效应的现象。'
- en: '**Room**: The size and shape of the room we are in can cause multiple echoes
    to accumulate, producing a reverberation effect, where sound seems to persist
    temporarily even after the original sound has stopped.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**房间**：我们所处的房间的大小和形状可能会导致多重回声积累，产生混响效果，声音似乎在原始声音停止后仍然暂时存在。'
- en: '**Obstacles**: Obstacles between the sound source and our ears tend to attenuate
    and muffle the sound. This is particularly true in the case of large obstacles
    such as walls.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**障碍物**：声源和我们的耳朵之间的障碍物倾向于减弱和消音声音。这在大型障碍物（如墙壁）的情况下尤为明显。'
- en: In this chapter, we will explore the basics of 3D audio, which is the field
    of audio programming that tries to take some (or all) of these factors into consideration
    in order to produce a realistic audio simulation. This is one of the areas where
    using an audio engine such as FMOD really pays off, as it would be extremely difficult
    to implement some of these features ourselves.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨3D音频的基础知识，这是音频编程领域试图考虑这些因素中的一些（或全部）以产生逼真音频模拟的领域。这是使用FMOD等音频引擎的领域之一，因为要自己实现这些功能将会非常困难。
- en: Positional audio
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定位音频
- en: The first aspect of 3D audio that we are going to work with (and perhaps the
    most important) is positional audio. **Positional audio** deals primarily with
    the location of each object that produces sound (which we will refer to as **audio
    sources**) in relation to or our ears (which we will refer to as the **audio listener**).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要处理的3D音频的第一个方面（也许是最重要的）是定位音频。**定位音频**主要涉及产生声音的每个对象（我们将其称为**音频源**）相对于我们的耳朵（我们将其称为**音频听者**）的位置。
- en: 'The first step required to create a 3D audio simulation is to describe every
    audio source and listener in the environment. Note that there is typically only
    one audio listener in a scene, unless we are creating a multiplayer split-screen
    type of game. The following figure shows an example of a scene with multiple audio
    sources and one audio listener in the middle:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 创建3D音频模拟所需的第一步是描述环境中的每个音频源和听者。请注意，场景中通常只有一个音频听者，除非我们正在创建多人分屏类型的游戏。以下图显示了一个场景的示例，其中有多个音频源和一个音频听者在中间：
- en: '![Positional audio](img/9099OT_04_01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![定位音频](img/9099OT_04_01.jpg)'
- en: 'For each audio source and listener in the scene, we store information such
    as position, orientation, and velocity. Using this information, the audio engine
    produces a 3D audio simulation by modifying all the sounds in real time in several
    ways:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于场景中的每个音频源和听者，我们存储位置、方向和速度等信息。使用这些信息，音频引擎通过多种方式实时修改所有声音来产生3D音频模拟：
- en: '**Position**: The volume of a source decreases and becomes muffled (by filtering
    the sound to attenuate some of the higher frequencies) as the distance to the
    listener increases. The formula used to calculate the volume of the sound given
    a distance is usually controllable by selecting a minimum and maximum distance,
    and a roll-off model.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**位置**：声源的音量会随着到听者的距离增加而减小并变得沉闷（通过过滤声音以减弱一些较高频率）。用于计算给定距离下声音音量的公式通常可通过选择最小和最大距离以及衰减模型来控制。'
- en: '**Orientation**: Depending on the orientation of the listener in relation to
    each source, the audio engine simulates sound direction and position using speaker
    placement (for surround sound systems such as 5.1) or panning (for stereo sound
    systems). Audio sources can also be oriented, usually by defining a sound projection
    cone, with direction and angle information. Sound is then attenuated for listeners
    standing outside the range of the cone.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**方向**：根据听者相对于每个声源的方向，音频引擎使用扬声器布置（例如5.1环绕声系统）或声像定位（立体声系统）来模拟声音方向和位置。音频源也可以被定向，通常通过定义声音投影锥，包括方向和角度信息。然后，对于站在锥体范围之外的听者，声音会被衰减。'
- en: '**Velocity**: If the audio source is moving in relation to the listener, the
    pitch of the sound changes (increasing as the entities move closer and decreasing
    as the entities move apart) because of the Doppler effect. You can hear this effect
    in the real world, for example, when an ambulance passes next to you with its
    siren turned as soon as the ambulance moves past your location, there is a sudden
    drop in the pitch of the siren.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**速度**：如果音频源相对于听者移动，声音的音调会发生变化（随着实体靠近而增加，随着实体远离而减少），这是多普勒效应的结果。你可以在现实世界中听到这种效果，例如，当救护车经过你身边时，它的警报器打开，当救护车经过你的位置时，警报器的音调会突然下降。'
- en: Positional audio in FMOD
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FMOD中的定位音频
- en: Using positional audio in FMOD is not too different from what we have done so
    far. In fact, we have already used all the classes required for positional audio
    on the previous chapters; the `FMOD::Channel` class already works as an audio
    source, while the `FMOD::System` class controls all the audio listeners in the
    scene. Let us break down the entire process into steps.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在FMOD中使用定位音频与我们迄今为止所做的并没有太大不同。事实上，我们已经在前几章中使用了所有需要定位音频的类；`FMOD::Channel`类已经作为音频源工作，而`FMOD::System`类控制场景中的所有音频听者。让我们将整个过程分解为步骤。
- en: Creating an audio source
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建音频源
- en: 'The first point that we have to remember is to create our sounds using the
    `FMOD_3D` flag; otherwise, the 3D audio engine will not process them:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须记住的第一点是要使用`FMOD_3D`标志来创建我们的声音；否则，3D音频引擎将不会处理它们：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Then we simply need to play the sounds as usual, storing a reference to the
    channel handle so that we can modify the 3D properties of the sound.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们只需要像往常一样播放声音，存储通道句柄的引用，以便我们可以修改声音的3D属性。
- en: Setting the audio source's position and velocity
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置音频源的位置和速度
- en: 'Once we play the sound and get back a channel handle, we can use it to set
    the position and velocity of the audio source with the `set3DAttributes` method:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 播放声音并获得通道句柄后，我们可以使用`set3DAttributes`方法设置音频源的位置和速度：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We will typically set these values once when creating the audio source and update
    them every frame, or every time the game object associated with the audio source
    changes its position or velocity.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 通常在创建音频源时设置这些值，并在每帧或每次与音频源相关的游戏对象改变其位置或速度时更新它们。
- en: By default, the position is defined in meters, and the velocity is defined in
    meters per second (as we would typically see on a physics engine). We can change
    this scale by setting a different `distancefactor` parameter in the `System::set3DSettings`
    method.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，位置以米为单位，速度以每秒米为单位（通常在物理引擎中看到）。我们可以通过在`System::set3DSettings`方法中设置不同的`distancefactor`参数来改变这个比例。
- en: 'Note that simply subtracting an object''s position by its position on the previous
    frame does not yield a velocity in meters per second, as required. If we need
    to use this method, for example, because we do not know the actual velocity of
    the object, we have to multiply this delta by the time elapsed since the previous
    frame first (in seconds):'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，简单地将对象的位置减去其在上一帧的位置并不会产生以米每秒为单位的速度，这是必需的。如果我们需要使用这种方法，例如因为我们不知道对象的实际速度，我们必须首先将这个增量乘以自上一帧以来经过的时间（以秒为单位）：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Setting the audio source's direction
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置音频源的方向
- en: 'By default, every sound source is omnidirectional which means that the sound
    is emitted equally in every direction. We can give a sound source a direction,
    by defining a projection cone, using the `set3DConeOrientation` and `set3DConeSettings`
    methods:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，每个声音源都是全向的，这意味着声音在每个方向上都是均匀发射的。我们可以通过定义一个投影锥来给声音源一个方向，使用`set3DConeOrientation`和`set3DConeSettings`方法：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `set3DConeOrientation` method takes a vector defining the main direction
    of the sound cone. The `set3DConeSettings` method takes three parameters, containing
    the inner angle, the outer angle, and the outer volume of the sound cone. The
    sound source is at full volume when the listener is within the inner angle, and
    attenuates towards the outer volume as the listener moves outside that angle.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`set3DConeOrientation`方法接受一个定义声音锥主方向的向量。`set3DConeSettings`方法接受三个参数，包含声音锥的内角、外角和外音量。当听者在内角范围内时，声音源以全音量播放，并且随着听者移出该角度而朝向外音量衰减。'
- en: Setting the audio source's range
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置音频源的范围
- en: 'We can control the overall distance where a sound is still audible with the
    `set3DMinMaxDistance` method:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`set3DMinMaxDistance`方法控制声音仍然可听到的整体距离：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We specify the range of the sound as a pair of values: the minimum distance
    and maximum distance. The minimum distance is the point at which the sound starts
    attenuating. If the listener is any closer to the source than the minimum distance,
    the sound will play at full volume. The maximum distance is the point at which
    the sound stops attenuating and its volume remains constant (a volume which is
    not necessarily zero).'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将声音的范围指定为一对值：最小距离和最大距离。最小距离是声音开始衰减的点。如果听者比最小距离更靠近源，声音将以全音量播放。最大距离是声音停止衰减并保持恒定音量的点（不一定是零音量）。
- en: 'The way volume varies between the minimum and maximum distance is known as
    the **rolloff model**. By default, FMOD uses a **logarithmic rolloff** that attenuates
    volume as a proportion of the minimum distance:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在最小和最大距离之间音量变化的方式被称为**衰减模型**。默认情况下，FMOD使用**对数衰减**，随着最小距离的比例而衰减音量：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: By changing the minimum distance, we can control the overall size of the sound
    (for example, we could set a value of 0.1 for the sound of a fly, or a value of
    500 for the sound of an explosion). When using this model, the maximum distance
    should have a large value, in order to give the sound enough distance to attenuate
    to silence. We can make the sound attenuate slower or faster by changing the `rolloffscale`
    parameter in the `System::set3DSettings` method.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 通过改变最小距离，我们可以控制声音的整体大小（例如，我们可以为苍蝇的声音设置0.1的值，或者为爆炸的声音设置500的值）。在使用这个模型时，最大距离应该有一个较大的值，以便让声音有足够的距离衰减到静音。我们可以通过改变`rolloffscale`参数在`System::set3DSettings`方法中使声音衰减得更慢或更快。
- en: 'The logarithmic model is realistic, but has the disadvantage of making it harder
    to calculate the full range of the sound, that is, the distance to silence. For
    this reason there are other models available that are easier to use, such as the
    `linear` rolloff model, which maps the minimum distance to full volume, the maximum
    distance to silence, and interpolates linearly in between. We can select the `linear`
    rolloff model when creating the sound by adding the `FMOD_3D_LINEARROLLOFF` flag.
    In this model, the system rolloff scale does nothing:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 对数模型是现实的，但缺点是使得计算声音的完整范围（即静音的距离）更加困难。因此，还有其他可用的模型，比如`linear`衰减模型，它将最小距离映射到全音量，最大距离映射到静音，并在两者之间进行线性插值。我们可以在创建声音时选择`linear`衰减模型，通过添加`FMOD_3D_LINEARROLLOFF`标志。在这个模型中，系统衰减比例不起作用：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Setting the audio listener's properties
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置音频监听器的属性
- en: 'Finally, we must set the position, velocity, and orientation of the audio listener,
    using the `set3DListenerAttributes` method of the `system` object:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们必须使用`system`对象的`set3DListenerAttributes`方法设置音频监听器的位置、速度和方向：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This is very similar to setting up the attributes for an audio source, except
    for the added orientation. The orientation is specified as a pair of normalized,
    perpendicular vectors, pointing in the up and forward directions of the listener
    (which you will typically get from your camera object or from the view transformation
    matrix).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这与设置音频源的属性非常相似，除了增加了方向。方向被指定为一对归一化的垂直向量，指向监听器的上方和前方（通常可以从摄像机对象或视图变换矩阵中获取）。
- en: The first parameter is an index that identifies the audio listener. By default,
    there is only one audio listener in the scene, so we use the value of `0`. If
    we need more than one audio listener, we can use the `set3DNumListeners` method
    of the `system` object to increase that number.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是一个索引，用于标识音频监听器。默认情况下，场景中只有一个音频监听器，所以我们使用值`0`。如果我们需要多个音频监听器，可以使用`system`对象的`set3DNumListeners`方法来增加该数量。
- en: Integration with a game
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与游戏的整合
- en: There are several ways to approach this problem, depending on the architecture
    used by the game engine, but in general, the process is to assign an audio source
    to each game object that can emit a sound, and assign an audio listener to the
    camera object. Then, in the update phase of our game loop, every time we change
    the position, velocity, or orientation of a game object or camera, we must follow
    it up with an update to the corresponding audio structures. Finally, at the end
    of the update phase, we update the audio system, which processes all the changes
    made to the sources and listeners and updates the simulation accordingly.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题有几种方法，取决于游戏引擎使用的架构，但通常的过程是为每个可以发出声音的游戏对象分配一个音频源，并为摄像机对象分配一个音频监听器。然后，在游戏循环的更新阶段，每当我们改变游戏对象或摄像机的位置、速度或方向时，我们必须跟随相应的音频结构进行更新。最后，在更新阶段结束时，我们更新音频系统，处理对源和监听器所做的所有更改，并相应地更新模拟。
- en: Reverb
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 混响
- en: Positional audio (with its attenuation, speaker placement, and Doppler effect)
    comprises the most fundamental level of 3D audio. Now we will cover some advanced
    techniques that we can use on top of positional audio to provide a more complete
    simulation of how sounds interact with the environment. One of those techniques
    is called **reverberation**, or **reverb**.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 定位音频（包括衰减、扬声器放置和多普勒效应）构成了3D音频的最基本层次。现在我们将介绍一些高级技术，可以在定位音频的基础上提供更完整的模拟声音与环境互动的方法之一就是**混响**。
- en: Reverb is the capability of sound to persist in a particular space for some
    time after the original sound has stopped. We can think of reverb as a succession
    of echoes with very little time in between them.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 混响是声音在原始声音停止后在特定空间内持续存在一段时间的能力。我们可以将混响看作是一系列回声，它们之间的时间非常短。
- en: Reverb occurs because most audio sources project sound in several directions
    at once. Some of those sound waves reach our ears directly, in the shortest path
    possible. Others, however, head in different directions, and reflect off various
    surfaces, such as walls, before finally reaching our ears. These reflected sound
    waves take longer to reach our ears than the direct sound waves, and become quieter
    with every bounce they make. The combination of all the reflected sound waves
    creates the effect of reverb.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 混响发生是因为大多数音频源同时在多个方向投射声音。其中一些声波直接到达我们的耳朵，走最短的路径。然而，其他声波朝着不同的方向传播，并在到达我们的耳朵之前反射在各种表面上，比如墙壁。这些反射的声波需要更长的时间才能到达我们的耳朵，而且每次反射都会变得更加安静。所有反射声波的组合产生了混响的效果。
- en: '![Reverb](img/9099OT_04_02.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![混响](img/9099OT_04_02.jpg)'
- en: Simulating reverb in a game can enhance the realism of a scene because it provides
    strong cues about the size and nature of the environment. For example, an empty
    cathedral with large, reflective walls will usually result in a lot of reverb.
    On the other hand, an outdoor location with no walls will have virtually no reverb.
    We can also infer the size of a room from the duration of the reverb, since sound
    waves have to travel longer in a large room than in a small room.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在游戏中模拟混响可以增强场景的真实感，因为它提供了关于环境的大小和性质的强烈线索。例如，一个空荡荡的大教堂，有着大面积的反射墙，通常会产生大量的混响。另一方面，一个没有墙壁的室外位置几乎没有混响。我们还可以通过混响的持续时间推断房间的大小，因为声波在大房间中需要比在小房间中更长的时间传播。
- en: Reverb in FMOD
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FMOD中的混响
- en: If we are already using positional audio in our scene, adding reverb in FMOD
    requires only a few extra lines of code.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们已经在场景中使用了定位音频，那么在FMOD中添加混响只需要几行额外的代码。
- en: Creating a reverb object
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建混响对象
- en: 'First, we need to create an `FMOD::Reverb` object using the `createReverb`
    method:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要使用`createReverb`方法创建一个`FMOD::Reverb`对象：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This creates a reverb zone that automatically applies reverb to every sound
    that a listener can hear when standing inside that zone. You can safely create
    more than one reverb zone simultaneously, as FMOD automatically combines their
    effects.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个混响区域，自动对站在该区域内的听者可以听到的每个声音应用混响。可以同时安全地创建多个混响区域，因为FMOD会自动合并它们的效果。
- en: 'To disable a reverb zone, you can use the `setActive` method. Alternatively,
    if you do not need that zone any more, you can destroy it permanently with the
    `release` method:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要禁用混响区域，可以使用`setActive`方法。或者，如果不再需要该区域，可以使用`release`方法永久销毁它：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Setting reverb properties
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置混响属性
- en: 'A reverb has many properties to customize its behavior. These properties are
    defined inside the `FMOD_REVERB_PROPERTIES` structure, and can be applied to the
    reverb object using the `setProperties` method. Fortunately, FMOD also provides
    a set of presets that you can use directly, such as `FMOD_PRESET_CONCERTHALL`:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 混响有许多属性可以自定义其行为。这些属性定义在`FMOD_REVERB_PROPERTIES`结构中，并可以使用`setProperties`方法应用于混响对象。幸运的是，FMOD还提供了一组预设，例如`FMOD_PRESET_CONCERTHALL`，可以直接使用：
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Setting reverb position and radius
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置混响位置和半径
- en: We can specify the position and range of the reverb using the `set3DAttributes`
    method. The range of the reverb is specified with a minimum radius (reverb is
    at full volume within that radius) and a maximum radius (reverb is disabled outside
    that radius).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`set3DAttributes`方法指定混响的位置和范围。混响的范围由最小半径（在该半径内混响以全音量播放）和最大半径（在该半径外混响被禁用）来指定。
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Setting the default ambient reverb
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置默认环境混响
- en: We can also set which reverb properties to use when the listener is not inside
    any reverb zone, using the `setReverbAmbientProperties` method of the `system`
    object.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`system`对象的`setReverbAmbientProperties`方法设置当听者不在任何混响区域内时使用哪些混响属性。
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Obstruction and occlusion
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 遮挡和遮蔽
- en: 'Obstacles in the environment, such as large objects, or walls, also alter the
    way we perceive sound. We can often hear a person speaking in an adjacent room,
    but the sound is not as clear as if they were standing next to us. The reason
    for this is that although sound can pass through several types of materials, it
    loses energy and several of its higher frequencies during the process. This results
    in a quieter, muffled sound. There are two techniques used to simulate obstacles
    in 3D audio: **obstruction** and **occlusion**.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 环境中的障碍物，如大型物体或墙壁，也会改变我们对声音的感知方式。我们经常可以听到在相邻房间说话的人，但声音不如站在我们旁边时清晰。原因是尽管声音可以穿过几种材料，但在这个过程中会失去能量和一些更高的频率。这导致声音变得更安静、沉闷。用于模拟3D音频中障碍物的两种技术是**遮挡**和**遮蔽**。
- en: Obstruction occurs when the source and the listener are in the same environment,
    and there is an obstacle in the way, but there is still enough space around the
    obstacle for the sound waves to flow. In this situation, sound waves passing directly
    through the obstacle are attenuated and filtered, but reflected sound waves are
    not affected.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当源和听者在同一环境中，并且有障碍物挡住了去路，但障碍物周围仍有足够的空间让声波流动时，就会发生遮挡。在这种情况下，直接穿过障碍物的声波会被衰减和过滤，但反射的声波不受影响。
- en: Occlusion occurs when the source and listener are in different environments,
    and all the sound needs to go through an obstacle, such as a wall, before reaching
    the listener. In this situation, both direct and reflected sound waves are attenuated
    and filtered.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当源和听者处于不同的环境，并且所有声音需要通过障碍物（如墙壁）才能到达听者时，就会发生遮挡。在这种情况下，直接和反射的声波都会被衰减和过滤。
- en: The filter applied to the obstructed or occluded sound waves is usually a low
    pass filter, which attenuates the higher frequencies, resulting in a muffled sound.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 应用于遮挡或遮蔽声波的滤波器通常是低通滤波器，它会衰减更高的频率，导致声音变得沉闷。
- en: '![Obstruction and occlusion](img/9099OT_04_03.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![遮挡和遮蔽](img/9099OT_04_03.jpg)'
- en: Obstruction and occlusion in FMOD
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: FMOD中的遮挡和遮蔽
- en: We can simulate obstruction and occlusion in FMOD using the built-in geometry
    engine. This only works if we already have our audio sources and listeners set
    up. Afterwards, we need to create geometry objects to represent the obstacles
    in our environment.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用内置的几何引擎在FMOD中模拟遮挡和遮蔽。这仅在我们已经设置好音频源和听者时才有效。之后，我们需要创建几何对象来表示环境中的障碍物。
- en: 'The easiest way to create these objects is to start from a 3D triangle mesh
    representation of our obstacle. Then we create an instance of `FMOD::Geometry`
    with enough space to store all of our triangles and vertices, using the `createGeometry`
    method:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 创建这些对象的最简单方法是从障碍物的3D三角网格表示开始。然后，使用`createGeometry`方法创建一个`FMOD::Geometry`实例，足够大以存储所有的三角形和顶点：
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Next, for each triangle in our mesh, we add a new polygon to the geometry object
    using the `addPolygon` method. The first two parameters control the amount of
    obstruction and occlusion to perform. The third parameter decides if the polygon
    should be double sided. The fourth parameter is the number of vertices in the
    polygon, and the fifth parameter is the polygon data itself. The sixth parameter
    returns an index which can be used to perform further operations on the polygon.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，对于我们网格中的每个三角形，我们使用`addPolygon`方法向几何对象添加一个新的多边形。前两个参数控制执行的遮挡和遮挡量。第三个参数决定多边形是否应为双面的。第四个参数是多边形中的顶点数，第五个参数是多边形数据本身。第六个参数返回一个索引，可以用来对多边形执行进一步的操作。
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We should create the polygon using vertices in object space, not in world space.
    Then, in order to position the geometry the world, we can use a combination of
    the `setPosition`, `setRotation`, and `setScale` methods.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该使用对象空间中的顶点创建多边形，而不是世界空间中的顶点。然后，为了将几何体定位到世界中，我们可以使用`setPosition`，`setRotation`和`setScale`方法的组合。
- en: Effects
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 效果
- en: 'Besides all of the 3D audio simulations described earlier, there is another
    subject that we should cover: DSP effects. A **DSP** effect (which stands for
    **digital signal processing**) is an algorithm that takes sound data as input,
    modifies it in some way, and returns a new set of data as output. Most effects
    either manipulate the amplitudes or frequencies of the sound data, or add multiple
    sounds together (frequently that sound is a delayed and attenuated version of
    itself). The following is a list of some common types of DSP effects:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 除了之前描述的所有3D音频模拟，还有另一个主题我们应该涵盖：DSP效果。**DSP**效果（代表**数字信号处理**）是一种算法，它以声音数据作为输入，以某种方式修改它，并返回一组新的数据作为输出。大多数效果要么操纵声音数据的振幅或频率，要么将多个声音叠加在一起（通常是其自身的延迟和衰减版本）。以下是一些常见类型的DSP效果的列表：
- en: '**Normalize**: This effect scales the volume of the sound so that the peak
    amplitude is at the maximum volume level.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**归一化**：此效果缩放声音的音量，使峰值幅度达到最大音量水平。'
- en: '**Compressor**: This effect makes the loud sections of the sound quieter, then
    brings the entire volume up to compensate, reducing the dynamic range of the sound'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**压缩器**：此效果使声音的响亮部分变得更安静，然后将整个音量提高以补偿，减少声音的动态范围'
- en: '**Distortion**: This effect distorts the sound, making it sound harsher'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**失真**：此效果扭曲声音，使其听起来更刺耳'
- en: '**Low-pass filter**: This effect attenuates all frequencies in the sound above
    a certain range, making the sound muffled'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**低通滤波器**：此效果削弱了声音中所有超过一定范围的频率，使声音变得沉闷'
- en: '**High-pass filter**: This effect attenuates all frequencies in the sound below
    a certain range, making the sound thinner'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高通滤波器**：此效果削弱了声音中所有低于一定范围的频率，使声音变得更薄。'
- en: '**Parametric EQ**: This effect provides complex volume control over all different
    ranges of frequencies in the sound'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**参数均衡器**：此效果在声音的所有不同频率范围上提供复杂的音量控制'
- en: '**Delay**: In this effect the sound plays once, and keeps repeating after a
    certain amount of time, until it runs out of energy'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**延迟**：在此效果中，声音播放一次，并在一定时间后重复播放，直到能量耗尽'
- en: '**Echo**: In this effect a delay with a duration that is long enough for us
    to perceive as separate sounds'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**回声**：在此效果中，延迟的持续时间足够长，我们可以将其感知为单独的声音'
- en: '**Flanger**: This effect doubles the sound with a very small delay between
    each instance, and varies this delay over time'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**镶边**：此效果在每个实例之间增加了非常小的延迟的声音，并随时间变化这个延迟'
- en: '**Chorus**: This effect plays multiple instances of the sound together, with
    small pitch and time variations between them'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**合唱**：此效果将声音的多个实例一起播放，它们之间有小的音高和时间变化'
- en: '**Pitch shift**: This effect changes the pitch of a sound without altering
    its playback speed'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**音调转换**：此效果改变声音的音调，而不改变其播放速度'
- en: '**Noise removal**: This effect silences every value below a certain volume
    threshold'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**去噪**：此效果将低于一定音量阈值的每个值静音'
- en: Effects in FMOD
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: FMOD中的效果
- en: Once again, we will only cover the very basics here. The easiest way to create
    a DSP effect in FMOD is to use the `createDSPByType` method, with one of the available
    DSP types as a parameter (check the FMOD documentation for the complete list of
    types).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们只会在这里涵盖最基本的内容。在FMOD中创建DSP效果的最简单方法是使用`createDSPByType`方法，其中一个可用的DSP类型作为参数（检查FMOD文档以获取完整的类型列表）。
- en: '[PRE15]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This returns an `FMOD::DSP` object that you can apply to any channel, channel
    group, or the `system` object itself, using the `addDSP` method of the corresponding
    object. You can also add more than one DSP effect to the same object, which chains
    them together automatically:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回一个`FMOD::DSP`对象，您可以使用相应对象的`addDSP`方法将其应用于任何通道、通道组或`system`对象本身。您还可以将多个DSP效果添加到同一对象中，这将自动将它们链接在一起：
- en: '[PRE16]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The second parameter allows more control over the DSP connection, but we will
    ignore it for our simple examples.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个参数允许更多地控制DSP连接，但我们将在我们的简单示例中忽略它。
- en: 'Finally, most DSP effects have a set of parameters that you can control using
    the `setParameter` method (once again, check the documentation for a list of all
    the available parameters):'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，大多数DSP效果都有一组参数，您可以使用`setParameter`方法来控制（再次，检查文档以获取所有可用参数的列表）：
- en: '[PRE17]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Example 1 – time stretching
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例1 - 时间拉伸
- en: As our first application of DSP effects, here is an example that shows how to
    change the playback speed of a sound without affecting its pitch. To do this,
    we need to combine a regular frequency change, which modifies both the pitch and
    the speed of the sound, with a pitch shift DSP effect, in order to return the
    pitch back to normal.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 作为DSP效果的第一个应用，这里有一个示例，显示了如何改变声音的播放速度而不影响其音调。为此，我们需要将常规频率变化与音调转换DSP效果相结合，以将音调恢复正常。
- en: '[PRE18]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Example 2 – simple radio effect
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例2 - 简单的无线电效果
- en: You can also combine multiple effects to achieve behaviors that are more complicated.
    For example, here is a rudimentary radio effect simulation, which works by applying
    a distortion and a high pass filter to the sound.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以结合多种效果来实现更复杂的行为。例如，这里有一个简单的收音机效果模拟，它通过对声音应用失真和高通滤波器来实现。
- en: '[PRE19]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The distortion simulates the loss of information that often occurs when transmitting
    analog signals and the high pass filter makes the sound thinner by getting rid
    of the lower frequencies.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 失真模拟了模拟模拟信号传输时经常发生的信息丢失，而高通滤波器通过去除较低频率使声音变得更薄。
- en: Summary
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have seen how to simulate sound coming from specific locations
    in the environment, how to simulate reverb from reflected sound waves, how to
    simulate obstruction and occlusion from obstacles, and finally how to apply DSP
    effects to sounds.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经看到了如何模拟声音来自环境中特定位置，如何模拟反射声波产生的混响，如何模拟障碍物的阻挡和遮挡，最后如何对声音应用数字信号处理效果。
