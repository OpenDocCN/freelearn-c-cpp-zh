- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: First Look at the Arduino IoT Cloud
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初识Arduino IoT Cloud
- en: Every developer/programmer/cloud engineer, when they start their coding/cloud
    journey, is very curious to get started with the platform immediately. Well, guys,
    your wait is over, and we welcome you to this chapter with a *Hello World* greeting.
    This chapter not only provides you with a *Hello World* example but also comes
    with many important core concepts of how the **Arduino IoT Cloud** works. This
    is the most important chapter for all readers, as this chapter will give you an
    overview of how to get started with the Arduino IoT Cloud, as the Arduino IoT
    Cloud platform has significant differences compared to other platforms. This chapter
    is divided into two parts; in the first part, you will learn how to use the **Arduino
    MKR Wi-Fi 1010** board to interact with the Arduino IoT Cloud platform, and in
    the second part, you will learn how to use an **API** with **Node-RED** for communication
    with the cloud platform.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 每个开发者/程序员/云工程师，当他们开始他们的编码/云之旅时，都非常渴望立即开始使用这个平台。好吧，伙计们，你们的等待结束了，我们以一个*Hello World*问候语欢迎你们进入这一章。这一章不仅提供了一个*Hello
    World*示例，还包含了**Arduino IoT Cloud**如何工作的许多重要核心概念。这是对所有读者来说最重要的章节，因为这一章将为您概述如何开始使用Arduino
    IoT Cloud，因为Arduino IoT Cloud平台与其他平台相比有显著的不同。这一章分为两部分；在第一部分，您将学习如何使用**Arduino
    MKR Wi-Fi 1010**板与Arduino IoT Cloud平台交互，在第二部分，您将学习如何使用**Node-RED**的**API**与云平台进行通信。
- en: Along with these examples, you will learn the difference between a **Thing**
    and a **device**, what a **variable** is, and different properties of Thing. You
    will also get a taste of the **Arduino Web Editor**, which is an awesome feature
    with interesting stuff. After that, we will move on to the dashboard, which helps
    a user control a Thing and visualize sensor data. So, guys, buckle up for this
    interesting journey.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些示例，您还将了解**实体**和**设备**之间的区别，什么是**变量**，以及实体的不同属性。您还将体验**Arduino Web Editor**，这是一个具有有趣功能的出色特性。之后，我们将转向仪表板，它帮助用户控制实体并可视化传感器数据。所以，伙计们，准备好开始这段有趣的旅程吧。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Understanding how the Arduino IoT Cloud works
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Arduino IoT Cloud的工作原理
- en: The Arduino IoT Cloud and an MKR1010 Hello World example
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino IoT Cloud和MKR1010的Hello World示例
- en: An introduction to Node-RED
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node-RED简介
- en: The Arduino IoT Cloud and a Node-RED Hello World example
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino IoT Cloud和Node-RED的Hello World示例
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Before we start, we first need to set up an Arduino IoT Cloud-compatible board.
    I recommend the Arduino MKR Wi-Fi 1010, but there is a complete list of compatible
    boards at [https://docs.arduino.cc/arduino-cloud/getting-started/technical-reference#compatible-hardware](https://docs.arduino.cc/arduino-cloud/getting-started/technical-reference#compatible-hardware),
    which you can choose according to your requirements.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，我们首先需要设置一个与Arduino IoT Cloud兼容的板子。我推荐Arduino MKR Wi-Fi 1010，但您可以在[https://docs.arduino.cc/arduino-cloud/getting-started/technical-reference#compatible-hardware](https://docs.arduino.cc/arduino-cloud/getting-started/technical-reference#compatible-hardware)找到完整的兼容板子列表，您可以根据您的需求进行选择。
- en: Second, you should have an Arduino IoT Cloud account. If you don’t, then sign
    up at [https://cloud.arduino.cc/](https://cloud.arduino.cc/) and select a plan
    according to your requirements.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 第二，您应该有一个Arduino IoT Cloud账户。如果没有，请在[https://cloud.arduino.cc/](https://cloud.arduino.cc/)注册并根据自己的需求选择一个计划。
- en: Third, we need to download and install the **Arduino Create Agent**. Arduino
    has created a beautiful web-based guide for installation at [https://create.arduino.cc/getting-started/plugin/welcome](https://create.arduino.cc/getting-started/plugin/welcome).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 第三，我们需要下载并安装**Arduino Create Agent**。Arduino为安装创建了一个美丽的基于Web的指南，您可以在[https://create.arduino.cc/getting-started/plugin/welcome](https://create.arduino.cc/getting-started/plugin/welcome)找到。
- en: The second part of the chapter is related to Node-RED, which will be used for
    devices that are not officially supported by the Arduino IoT Cloud such as Raspberry
    Pi and older versions of Arduino development boards. Download and install Node-RED
    according to your operating system from [https://nodered.org/docs/getting-started/local](https://nodered.org/docs/getting-started/local).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的第二部分与Node-RED相关，它将用于那些未由Arduino IoT Cloud官方支持的设备，例如Raspberry Pi和较老的Arduino开发板版本。请根据您的操作系统从[https://nodered.org/docs/getting-started/local](https://nodered.org/docs/getting-started/local)下载并安装Node-RED。
- en: Important note
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'All the Arduino IoT Cloud plans are available on the Arduino IoT Cloud website.
    You can visit the following link for updated plans, pricing, and features: [https://cloud.arduino.cc/plans/](https://cloud.arduino.cc/plans/).
    If you are from an educational institute, then there are plenty of good plans
    for students and faculties. Arduino also offers customized plans to business organizations
    according to their requirements.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 所有Arduino IoT Cloud计划都在Arduino IoT Cloud网站上提供。你可以访问以下链接获取最新的计划、定价和功能：[https://cloud.arduino.cc/plans/](https://cloud.arduino.cc/plans/)。如果你来自教育机构，那么有大量的学生和教师计划。Arduino还根据其需求为商业组织提供定制计划。
- en: Understanding how the Arduino IoT Cloud works
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Arduino IoT Cloud的工作原理
- en: 'So, before we start our Arduino IoT Cloud journey, we need to understand how
    it operates because it’s a little bit different from traditional IoT cloud platforms.
    As a result, the Arduino IoT Cloud is a more flexible, secure, and industry-deployment-ready
    IoT solution. Firstly, we will understand the design of the Arduino IoT Cloud
    with the following diagram, which will help you to understand the key pillars
    of the Arduino IoT Cloud:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在我们开始Arduino IoT Cloud之旅之前，我们需要了解它是如何运作的，因为它与传统物联网云平台略有不同。结果，Arduino IoT
    Cloud是一个更灵活、更安全、更适合行业部署的物联网解决方案。首先，我们将通过以下图表了解Arduino IoT Cloud的设计，这将帮助你理解Arduino
    IoT Cloud的关键支柱：
- en: "![Figure 2.1 – \uFEFFThe \uFEFFArduino IoT Cloud architecture](img/B19752_02_01.jpg)"
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图2.1 – Arduino IoT Cloud架构](img/B19752_02_01.jpg)'
- en: Figure 2.1 – The Arduino IoT Cloud architecture
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.1 – Arduino IoT Cloud架构
- en: Most cloud platforms work with the concept of devices and sensors, but in the
    Arduino IoT Cloud, we have the concept of the Thing, which includes devices and
    variables known as **sensors**/**actuators**. You may be thinking that a *Thing*
    and a *Device* are both the same; actually, they’re not. It’s important to make
    this distinction because if we do not understand it, then it will create more
    complications going forward.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数云平台与设备和传感器的概念一起工作，但在Arduino IoT Cloud中，我们有“物”的概念，它包括设备和称为**传感器**/**执行器**的变量。你可能认为“物”和“设备”是相同的；实际上，它们并不相同。做出这种区分很重要，因为如果我们不理解它，那么在未来的发展中将会产生更多的复杂性。
- en: To understand the difference between a Thing and a device, I am going to take
    an example from real life. Let’s say we have an empty box. If we put some stuff
    in that box, it will be a filled box. However, what if we put the shipping label
    on that box? Will it still be a box? No, now it’s a parcel. So, we can understand
    that a parcel is just a logical container that consists of the box, the stuff
    in the box, and the shipping label.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解“物”和设备之间的区别，我将从现实生活中举一个例子。假设我们有一个空盒子。如果我们把一些东西放进这个盒子，它就会变成一个装满东西的盒子。然而，如果我们在这个盒子上贴上运输标签呢？它还是盒子吗？不，现在它成了一件包裹。因此，我们可以理解包裹只是一个逻辑容器，它由盒子、盒子里的东西以及运输标签组成。
- en: Like the preceding example, a Thing is a logical container that consists of
    a development board, variables that act as a bridge between the cloud and sensors/actuators
    for read/write operations, and network connectivity that makes the Thing live
    in an ecosystem (which is like the shipping label in the box analogy).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 就像前面的例子一样，一个“物”是一个逻辑容器，它由一个开发板、作为云与传感器/执行器之间桥梁的变量以及使“物”在生态系统中活跃的网络连接组成（这就像盒子中的运输标签类比）。
- en: Next, we need to understand how device configuration works in relation to the
    Arduino IoT Cloud. Here, we are not talking about **network connectivity** but
    **device configuration**. Some cloud platforms provide **Arduino IDE** libraries
    or **Software Development Kits** (**SDKs**) for device configuration, but Arduino
    has a different, more restrictive system. Firstly, the Arduino IoT Cloud has two
    ways for device configuration; the first one uses compatible boards via the Arduino
    Create Agent (in the upcoming section, you will dive deep into the Arduino Create
    Agent) and the second way is through an API, which is used for non-compatible
    devices.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要了解设备配置在Arduino IoT Cloud中的工作方式。在这里，我们讨论的不是**网络连接**，而是**设备配置**。一些云平台为设备配置提供**Arduino
    IDE**库或**软件开发工具包**（**SDKs**），但Arduino有一个不同且更为严格的系统。首先，Arduino IoT Cloud有两种设备配置方式；第一种是通过Arduino
    Create Agent使用兼容的板（在下一节中，你将深入了解Arduino Create Agent），第二种是通过API，用于非兼容设备。
- en: So, why does Arduino have this restriction for device connectivity? Arduino
    cares about security for IoT devices, and security is as vital in an IoT infrastructure
    as water is for living beings. Also, not all the official Arduino development
    boards are compatible with the Arduino IoT Cloud. You can find the complete list
    of Arduino IoT Cloud-compatible devices at [https://docs.arduino.cc/arduino-cloud/getting-started/technical-reference#compatible-hardware](https://docs.arduino.cc/arduino-cloud/getting-started/technical-reference#compatible-hardware).
    The Arduino IoT Cloud directly supports some famous boards besides the Arduino
    official compatible boards, which include **ESP8266 Series**, **ESP32 Series**,
    and **LoRaWAN Nodes**. An API is available for other development boards, which
    can be used via any programming language. Later on in this chapter, we will explain
    how to use APIs with Node-RED to communicate with the Arduino IoT Cloud.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，为什么Arduino对设备连接有这种限制呢？Arduino关心物联网设备的安全性，安全性与水对生物的重要性一样重要。此外，并非所有官方Arduino开发板都与Arduino
    IoT Cloud兼容。你可以在[https://docs.arduino.cc/arduino-cloud/getting-started/technical-reference#compatible-hardware](https://docs.arduino.cc/arduino-cloud/getting-started/technical-reference#compatible-hardware)找到Arduino
    IoT Cloud兼容设备的完整列表。Arduino IoT Cloud除了直接支持Arduino官方兼容板之外，还支持一些著名的板，包括**ESP8266系列**、**ESP32系列**和**LoRaWAN节点**。对于其他开发板，提供了一个API，可以通过任何编程语言使用。在本章的后面部分，我们将解释如何使用API与Node-RED通信Arduino
    IoT Cloud。
- en: Finally, which options are available for **data visualization** and **data extraction**?
    The Arduino IoT Cloud platform provides a variety of options. For data visualization,
    the platform provides a flexible dashboard option for both web and mobile, with
    huge widget features as well as sharing features. For third-party application
    integrations, a **Representational State Transfer** (**REST**) **API** and **w****ebhooks**
    are available. For custom application development or custom integrations, Arduino
    provides **JavaScript** and **Python SDKs**, which enrich the platform’s extensibility.
    An organization can create custom dashboard visualization and control panels by
    using these SDKs.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，对于**数据可视化**和**数据提取**有哪些选项可用？Arduino IoT Cloud平台提供了各种选项。对于数据可视化，平台为网页和移动设备提供了灵活的仪表板选项，以及大量的小部件功能和共享功能。对于第三方应用程序集成，提供了**表示状态转移**（**REST**）**API**和**webhooks**。对于自定义应用程序开发或自定义集成，Arduino提供了**JavaScript**和**Python
    SDKs**，这些SDK丰富了平台的可扩展性。组织可以通过使用这些SDK创建自定义仪表板可视化控件面板。
- en: We have discussed the Arduino IoT Cloud’s main pillars; now it’s time to explore
    the Arduino IoT Cloud by implementing basic examples, which will get you started
    with the Arduino MKR Wi-Fi 1010 development board and the Arduino IoT Cloud.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了Arduino IoT Cloud的主要支柱；现在是时候通过实现基本示例来探索Arduino IoT Cloud了，这些示例将帮助你开始使用Arduino
    MKR Wi-Fi 1010开发板和Arduino IoT Cloud。
- en: The Arduino IoT Cloud and the MKR1010 Hello World example
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Arduino IoT Cloud和MKR1010 Hello World示例
- en: A **Hello World program** is the first program that every programmer uses when
    they start learning any programming technology to get a taste for a platform.
    However, when it comes to the IoT side, things are different; you will be working
    with hardware and software, which means the *Hello World* example will be different
    from its traditional onscreen appearance. In this section, we will demonstrate
    how to turn on/off a built-in LED of an Arduino MKR Wi-Fi 1010 development board
    using the Arduino IoT Cloud dashboard, which is a *Hello World* example for the
    Arduino IoT Cloud.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**Hello World程序**是每个程序员在学习任何编程技术时第一次使用的程序，以了解平台。然而，当涉及到物联网方面时，情况就不同了；你将处理硬件和软件，这意味着*Hello
    World*示例将与传统的屏幕外观不同。在本节中，我们将演示如何使用Arduino IoT Cloud仪表板打开/关闭Arduino MKR Wi-Fi 1010开发板上的内置LED，这是一个Arduino
    IoT Cloud的*Hello World*示例。'
- en: In a series of steps, you will learn how to work with Arduino IoT Cloud-compatible
    boards. This part is very important to understand how a Thing works on the Arduino
    IoT Cloud platform. First, you need to get the required hardware, software, and
    accounts, as mentioned in the *Technical* *requirements* section.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 通过一系列步骤，你将学习如何使用与Arduino IoT Cloud兼容的板。这部分对于理解事物如何在Arduino IoT Cloud平台上工作非常重要。首先，你需要获取所需的硬件、软件和账户，如*技术要求*部分所述。
- en: So, in this section, we are going to start the *Hello World* project for the
    Arduino IoT Cloud using MKR Wi-Fi 1010\. In the next sub-section, we will cover
    the Arduino Create Agent. Next, we will create a Thing and cloud variables, associate
    the MKR Wi-Fi 1010 device with the Thing, and provide the network configuration
    for the Thing. Later, we will discuss the sketch/coding for the development board.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在本节中，我们将使用MKR Wi-Fi 1010开始Arduino IoT Cloud的*Hello World*项目。在下一小节中，我们将介绍Arduino
    Create Agent。接下来，我们将创建一个设备和一个云变量，将MKR Wi-Fi 1010设备与设备关联起来，并为设备提供网络配置。稍后，我们将讨论开发板的草图/编码。
- en: What is the Arduino Create Agent?
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是Arduino Create Agent？
- en: The Arduino IoT Cloud provides a different way to connect a device to its cloud.
    Arduino does not publicly reveal its cloud connectivity technique for security
    reasons. That’s why we only have two options to connect devices with the Arduino
    IoT Cloud – using the Arduino Cloud IDE or the API. Also, for the Arduino Cloud
    IDE, it’s mandatory to have the Arduino Create Agent on your machine. *Figure
    2**.2* shows the complete process of how the Create Agent helps devices to interact
    with the Arduino Web Editor.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino IoT Cloud提供了一种不同的方式将设备连接到其云。出于安全原因，Arduino没有公开其云连接技术。这就是为什么我们只有两种方式将设备与Arduino
    IoT Cloud连接 – 使用Arduino Cloud IDE或API。此外，对于Arduino Cloud IDE，必须在您的机器上安装Arduino
    Create Agent。*图2.2*展示了Create Agent帮助设备与Arduino Web Editor交互的完整过程。
- en: '![Figure 2.2 – The Arduino Create Agent process flow](img/B19752_02_02.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图2.2 – Arduino Create Agent流程](img/B19752_02_02.jpg)'
- en: Figure 2.2 – The Arduino Create Agent process flow
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.2 – Arduino Create Agent流程
- en: As the Arduino Web Editor is a web-based tool, there is no way to talk to development
    boards via a browser. That’s why the Arduino team developed software for all major
    operating systems, including Windows, Linux, and macOS, called the Arduino Create
    Agent. The Create Agent acts like a bridge between a device and the Arduino Web
    Editor. The preceding diagram explains the process in detail.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Arduino Web Editor是一个基于Web的工具，无法通过浏览器与开发板进行通信。这就是为什么Arduino团队为包括Windows、Linux和macOS在内的所有主要操作系统开发了软件，称为Arduino
    Create Agent。Create Agent充当设备与Arduino Web Editor之间的桥梁。前面的图示详细解释了该过程。
- en: 'To get the Create Agent on your machine, visit [https://create.arduino.cc/getting-started/plugin/welcome](https://create.arduino.cc/getting-started/plugin/welcome)
    and follow the steps. After installation, start the Create Agent, as just installing
    it is not enough for connectivity. The Create Agent will run as a background process
    to provide continuous integration between a device and a browser. The following
    is a figure that describes all the options of the Arduino Create Agent:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要在您的机器上获取Create Agent，请访问[https://create.arduino.cc/getting-started/plugin/welcome](https://create.arduino.cc/getting-started/plugin/welcome)并按照步骤操作。安装后，启动Create
    Agent，因为仅仅安装它并不足以实现连接。Create Agent将作为一个后台进程运行，以提供设备与浏览器之间的持续集成。以下是一个描述Arduino
    Create Agent所有选项的图示：
- en: '![Figure 2.3 – The Arduino Create Agent menu](img/B19752_02_03.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图2.3 – Arduino Create Agent菜单](img/B19752_02_03.jpg)'
- en: Figure 2.3 – The Arduino Create Agent menu
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.3 – Arduino Create Agent菜单
- en: When we click on the Create Agent icon, it shows the Create Agent version, a
    **Go to Arduino Create** option, and an **Open Debug Console** option, which is
    like a serial monitor, where you can execute different commands to get the status
    and information about the current process, devices, and ports. Also from this
    menu, you can pause/resume the Create Agent, or if you want to close it down properly,
    then click on **Quit Agent**.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们点击Create Agent图标时，它会显示Create Agent版本、一个**转到Arduino Create**选项和一个**打开调试控制台**选项，这就像一个串行监视器，您可以在其中执行不同的命令以获取当前过程、设备和端口的状况和信息。此外，从这个菜单中，您可以暂停/恢复Create
    Agent，或者如果您想正常关闭它，则点击**退出代理**。
- en: Setting up the Thing, device, and variable
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置设备、变量
- en: In this section, we will create a Thing and name it. We will also learn how
    to add a device, along with network configuration and cloud variables.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建一个设备并为其命名。我们还将学习如何添加设备，包括网络配置和云变量。
- en: Creating a Thing
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建设备
- en: When you first open the dashboard in the Arduino IoT Cloud (*Figure 2**.4*),
    you will see menu links such as **Things**, **Dashboards**, **Devices**, **Integrations**,
    and **Templates**, and the **Create your first Thing** message. Just click on
    the **CREATE THING** button and your journey will start.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当您首次打开 Arduino IoT 云平台的仪表板（*图 2.4*）时，您将看到**事物**、**仪表板**、**设备**、**集成**和**模板**等菜单链接，以及**创建您的第一个事物**的消息。只需点击**创建事物**按钮，您的旅程就开始了。
- en: '![Figure 2.4 – The Thing dashboard](img/B19752_02_04.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.4 – 事物仪表板](img/B19752_02_04.jpg)'
- en: Figure 2.4 – The Thing dashboard
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.4 – 事物仪表板
- en: 'Adding a Thing is totally different compared to other IoT cloud platforms,
    as the Thing is a combination of multiple ingredients. The following figure describes
    all the ingredients of the Thing, such as the name, cloud variables, device, network
    settings, code, and Thing metadata:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 添加事物与其他物联网云平台相比完全不同，因为事物是多个成分的组合。以下图示描述了事物的所有成分，例如名称、云变量、设备、网络设置、代码和事物元数据：
- en: '![Figure 2.5 – Thing creation](img/B19752_02_05.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.5 – 事物创建](img/B19752_02_05.jpg)'
- en: Figure 2.5 – Thing creation
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.5 – 事物创建
- en: 'All the aspects indicated in the preceding screenshot are explained, step by
    step, as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 上一张截图中的所有方面将按以下步骤逐一解释：
- en: Assign a name to the Thing; the name should relate to the location and functionality
    of the device, which will help you to find the Thing easily in the following wizards.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为事物分配一个名称；名称应与设备的位置和功能相关，这将帮助您在以下向导中轻松找到事物。
- en: Clicking on **Select Device** will show you a popup, where you can select the
    old device or set up a new device, as discussed in detail in a moment.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**选择设备**将显示一个弹出窗口，您可以在其中选择旧设备或设置新设备，如稍后详细讨论的那样。
- en: After attaching the device, we need to make the device network-ready by providing
    a Wi-Fi SSID and a password. Just click on the **Configure** button and you will
    see the popup for network settings.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在连接设备后，我们需要通过提供 Wi-Fi SSID 和密码使设备网络就绪。只需点击**配置**按钮，您将看到网络设置的弹出窗口。
- en: Finally, we need to add a variable for the sensors/actuators to perform read/write
    operations. The Arduino IoT Cloud provides different types of variables, like
    the Arduino IDE; the only difference is that in the Arduino IDE, we declare the
    variables, whereas here, we need to create variables via the interface.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要为传感器/执行器添加一个变量以执行读写操作。Arduino IoT 云平台提供了不同类型的变量，就像 Arduino IDE 一样；唯一的区别在于在
    Arduino IDE 中，我们声明变量，而在这里，我们需要通过界面创建变量。
- en: In this section, we have created the Thing and named it. Three further steps
    are required adding a device, network configuration, and adding cloud variables.
    We are going to cover the remaining steps in the following subsections.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们已经创建了事物并为其命名。还需要三个进一步步骤：添加设备、网络配置和添加云变量。我们将在以下子节中介绍剩余的步骤。
- en: Adding a device
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加设备
- en: 'After assigning a name to the Thing, we need to attach a device to it. When
    you click on the **Select Device** button, you will see a popup that shows you
    an available device and the option to add a new device. If there is no device,
    then you will see the following figure to set up a new device:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在为事物分配名称后，我们需要将其与设备关联。当您点击**选择设备**按钮时，您将看到一个弹出窗口，显示可用的设备以及添加新设备的选项。如果没有设备，您将看到以下图示以设置新设备：
- en: '![Figure 2.6 – Associating a device](img/B19752_02_06.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.6 – 关联设备](img/B19752_02_06.jpg)'
- en: Figure 2.6 – Associating a device
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.6 – 关联设备
- en: In our case, we don’t have any device in the portal, so we will just click on
    **SET UP NEW DEVICE** to configure a new device in the account.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们在门户中没有任何设备，因此我们将点击**设置新设备**以在帐户中配置新设备。
- en: 'Next, you will see the two options in the popup. The first option is **Arduino
    board**, and the second option is **Third party device**. Here, you will see an
    icon in front of both names, which means you need to use compatible devices with
    the Arduino IoT Cloud. Next, you will see two options: one for the Arduino official
    development boards and a second option for the third-party development boards.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将在弹出窗口中看到两个选项。第一个选项是**Arduino 板**，第二个选项是**第三方设备**。在这里，您将在两个名称前面看到一个图标，这意味着您需要使用与
    Arduino IoT 云平台兼容的设备。接下来，您将看到两个选项：一个是 Arduino 官方开发板，另一个是第三方开发板。
- en: '![Figure 2.7 – Choosing a development device](img/B19752_02_07.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.7 – 选择开发设备](img/B19752_02_07.jpg)'
- en: Figure 2.7 – Choosing a development device
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.7 – 选择开发设备
- en: Select one option from the popup according to the available device. For this
    chapter, we will click on **Arduino board**, as in this chapter, we will use the
    MKR Wi-Fi 1010 board. Before adding the device, make sure that the Arduino Create
    Agent is running on your machine.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 根据可用的设备选择一个选项。在本章中，我们将点击**Arduino板**，因为在本章中，我们将使用MKR Wi-Fi 1010板。在添加设备之前，请确保Arduino
    Create Agent在你的机器上运行。
- en: Important note
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: You can find the Arduino IoT Cloud-compatible boards at [https://store-usa.arduino.cc/pages/cloud-compatible-boards](https://store-usa.arduino.cc/pages/cloud-compatible-boards),
    and for third-party devices, we have three options, which are **ESP8266**, **ESP32**,
    and **LoRaWAN** devices. For some devices, we have API access, which will be discussed
    in the second part of this chapter.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://store-usa.arduino.cc/pages/cloud-compatible-boards](https://store-usa.arduino.cc/pages/cloud-compatible-boards)找到Arduino
    IoT Cloud兼容的板，对于第三方设备，我们有三种选项，分别是**ESP8266**、**ESP32**和**LoRaWAN**设备。对于某些设备，我们有API访问权限，这将在本章的第二部分讨论。
- en: 'Next, you will see the **Setup Device** popup, which will start searching for
    your device. So, make sure the device is properly connected to your machine. When
    the Arduino Create Agent detects the compatible development board device, the
    following popup will be shown:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将看到**设置设备**弹出窗口，它将开始搜索你的设备。所以，确保设备已经正确连接到你的机器。当Arduino Create Agent检测到兼容的开发板设备时，将显示以下弹出窗口：
- en: '![Figure 2.8 – Setup Device](img/B19752_02_08.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图2.8 – 设置设备](img/B19752_02_08.jpg)'
- en: Figure 2.8 – Setup Device
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.8 – 设置设备
- en: 'The wizard will find and list all the connected boards with their name and
    port details. Click on the **CONFIGURE** button to move forward. If the wizard
    doesn’t show the device after searching, try to plug in a different port and click
    on the **refresh** link, located at the bottom. After development board configuration
    has been taken care of by the Arduino IoT Cloud, you will see a popup where you
    need to provide the name of your device:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 向导将找到并列出所有连接的板及其名称和端口详情。点击**配置**按钮继续。如果向导在搜索后没有显示设备，尝试插入不同的端口并点击底部位置的**刷新**链接。在Arduino
    IoT Cloud处理开发板配置后，你将看到一个弹出窗口，需要提供你的设备名称：
- en: In the next configuration wizard, provide the device’s name (note that spaces
    and special characters are not allowed in the device name) and then click on the
    **NEXT** button.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个配置向导中，提供设备的名称（注意设备名称中不允许有空格和特殊字符），然后点击**下一步**按钮。
- en: '![Figure 2.9 – The device configuration name](img/B19752_02_09.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图2.9 – 设备配置名称](img/B19752_02_09.jpg)'
- en: Figure 2.9 – The device configuration name
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.9 – 设备配置名称
- en: After that, the wizard will start the device configuration process, which will
    take up to five minutes. But in most cases, it only takes one minute to configure
    the device.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，向导将开始设备配置过程，这个过程可能需要五分钟。但在大多数情况下，配置设备只需要一分钟。
- en: Eventually, you will see a popup with a **Congratulations! You are all set**
    message. Click on the **Done** button, and the device will be attached to your
    Thing.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，你将看到一个弹出窗口，显示**恭喜！你已经设置好了**的消息。点击**完成**按钮，设备将被连接到你的“物”。
- en: 'On the Thing page, you will see the device details, which are marked in the
    red box in the following figure:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在“物”页面上，你会看到设备详情，如下图中红色方框所示：
- en: '![Figure 2.10 – The device attached to the Thing](img/B19752_02_10.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图2.10 – 连接到“物”的设备](img/B19752_02_10.jpg)'
- en: Figure 2.10 – The device attached to the Thing
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.10 – 连接到“物”的设备
- en: 'The page shows the device name, the device ID, its type, its status (which
    is either **Online** or **Offline**), and two buttons, **Change** and **Detach**:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 页面显示了设备名称、设备ID、其类型、其状态（可以是**在线**或**离线**），以及两个按钮，**更改**和**断开连接**：
- en: '**Change** is used to switch between devices – for example, if you have chosen
    the wrong device, then you can select a different one via this option.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更改**用于在设备之间切换 – 例如，如果你选择了错误的设备，那么你可以通过此选项选择不同的设备。'
- en: '**Detach** means removing the device from the Thing. Why might we need to detach?
    For example, you may have created a Thing and associated the device with it, but
    you are now not using that Thing. If you want to set up a new Thing with that
    device, the platform will not allow you to do so if it’s already associated with
    the old Thing.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**断开连接**意味着将设备从“物”中移除。为什么我们可能需要断开连接？例如，你可能已经创建了一个“物”并将设备与之关联，但现在你不再使用那个“物”。如果你想用那个设备设置一个新的“物”，如果它已经与旧“物”关联，平台将不允许你这样做。'
- en: Important note
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The device and the Thing have a one-to-one relationship. If you want to use
    a device with a new Thing, then make sure it’s not associated with another one.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 设备和“设备”之间存在一对一的关系。如果您想使用一个新“设备”的设备，请确保它没有与另一个设备关联。
- en: As we have added the device, let us move toward network configuration.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经添加了设备，让我们转向网络配置。
- en: Configuring the network
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置网络
- en: 'After attaching the device to the Thing, we can see that the device is offline.
    To bring it online, we need to provide Wi-Fi details. The following figure represents
    the network configuration popup, which only consists of two fields:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 将设备连接到“设备”后，我们可以看到设备处于离线状态。要将其上线，我们需要提供 Wi-Fi 详细信息。以下图表示网络配置弹出窗口，它仅包含两个字段：
- en: '![Figure 2.11 – Network configuration](img/B19752_02_11.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.11 – 网络配置](img/B19752_02_11.jpg)'
- en: Figure 2.11 – Network configuration
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.11 – 网络配置
- en: On the Thing page shown in *Figure 2**.5*, under the **Network** tab, click
    on the **CONFIGURE** button, which will take you to the **Configure network**
    popup with two fields, **Wi-Fi Name** and **Password**. Type the Wi-Fi SSID and
    password, and then click on the **SAVE** button.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *图 2**.5* 所示的“设备”页面中，在 **网络** 选项卡下，点击 **配置** 按钮，这将带您进入包含两个字段 **Wi-Fi 名称**
    和 **密码** 的 **配置网络** 弹出窗口。输入 Wi-Fi SSID 和密码，然后点击 **保存** 按钮。
- en: In this section, we have configured the network for our device, which is MKR
    Wi-Fi 1010, and in the next sub section, we will create the cloud variable.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们已经为我们的设备配置了网络，该设备是 MKR Wi-Fi 1010，在下一小节中，我们将创建云变量。
- en: Adding a cloud variable
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加云变量
- en: The final part is adding a cloud variable. Before adding a variable, you have
    to have an idea of what type of variables you need for your project, including
    the **variable type**, the **variable permission**, and the **variable** **update
    policy**.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的部分是添加云变量。在添加变量之前，您必须对您项目所需的变量类型有一个概念，包括 **变量类型**、**变量权限** 和 **变量更新策略**。
- en: 'For the current example, we need one variable to control the built-in LED,
    so the variable type will be **Boolean** (either on/off):'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 对于当前示例，我们需要一个变量来控制内置 LED，因此变量类型将是 **布尔**（开/关）：
- en: '![Figure 2.12 – Adding a variable](img/B19752_02_12.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.12 – 添加变量](img/B19752_02_12.jpg)'
- en: Figure 2.12 – Adding a variable
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.12 – 添加变量
- en: 'This way, we will control the LED via the dashboard:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们将通过仪表板控制 LED：
- en: Assign a meaningful name to the variable, related to the sensor/actuator type.
    Remember that spaces and special characters are not allowed in the name.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为变量分配一个有意义的名称，与传感器/执行器类型相关。请记住，名称中不允许使用空格和特殊字符。
- en: If you want to sync the variable with other Things’ variables, then click on
    the **Sync with other Things option**. The sync option is very beneficial if you
    want to share data across other Things. Sync will be explained in later chapters
    alongside a practical demonstration.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您想将变量与其他设备的变量同步，请点击 **与其他设备同步选项**。如果您想在其他设备之间共享数据，同步选项非常有用。同步将在后续章节中与实际演示一起解释。
- en: Select the variable type from the dropdown; the platform provides dozens of
    variable types. For this example, we need a **Boolean** variable type for LED
    control.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉菜单中选择变量类型；平台提供了数十种变量类型。对于本例，我们需要一个 **布尔** 类型的变量来控制 LED。
- en: After selecting the variable type, you will see the variable `LED`, but the
    system has converted the first letter to lowercase and the rest of the characters
    are left as is, making the name **lED**. This declaration part is very important;
    you can change the declaration according to your requirements, but keep the declaration
    in mind, as it will be used in coding.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择变量类型后，您将看到变量 `LED`，但系统已将第一个字母转换为小写，其余字符保持不变，使名称变为 **lED**。这部分声明非常重要；您可以根据您的需求更改声明，但请记住声明，因为它将在编码中使用。
- en: The variable permission provides two options, **Read & Write** and **Read Only**.
    The permission provides an extra layer of security for the Thing’s control. If
    a sensor only senses data such as temperature/humidity, then choose the **Read
    Only** option. If you want to control actuators such as the relay and the LED,
    then choose the **Read & Write** option. For our example, we need to write data
    to the variable to control the LED, so we will simply choose **Read &** **Write**.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 变量权限提供了两个选项，**读写**和**只读**。权限为设备的控制提供了额外的安全层。如果传感器仅感应数据，如温度/湿度，则选择**只读**选项。如果您想控制继电器和LED等执行器，则选择**读写**选项。对于我们的示例，我们需要将数据写入变量以控制LED，因此我们将简单地选择**读**和**写**。
- en: Finally, we need to choose an update policy according to our requirements. One
    option is event-driven (shown onscreen as **On change**), which only works when
    there is a change. It works when prompted by commands such as turning on/off a
    relay or LED. The second option is **Periodically**, which means taking data from
    a variable, such as temperature, humidity, air pressure, or a **Light Dependent
    Resistor** (**LDR**) value after a specific time. When you change the option to
    **Periodically**, it will ask you for a time measured in seconds, whereas for
    **On change**, there is a threshold option.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要根据我们的需求选择一个更新策略。一个选项是事件驱动（在屏幕上显示为**更改时**），它仅在发生变化时才工作。当接收到如开启/关闭继电器或LED的命令时，它才会工作。第二个选项是**周期性**，这意味着在特定时间后从变量（如温度、湿度、空气压力或**光敏电阻**（**LDR**）值）中获取数据。当您将选项更改为**周期性**时，它将要求您输入以秒为单位的时间，而对于**更改时**，有一个阈值选项。
- en: 'After adding the variable, our Thing now has all the mandatory ingredients.
    The following figure describes all the settings and configurations when we are
    done with the cloud variable, device, and network settings. Next, we need to jump
    to the **Sketch** tab for coding:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 添加变量后，我们的设备现在拥有了所有必需的成分。以下图示描述了完成云变量、设备和网络设置后所有的设置和配置。接下来，我们需要跳转到**草图**选项卡进行编码：
- en: '![Figure 2.13 – The Thing after configuration](img/B19752_02_13.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图2.13 – 配置后的设备](img/B19752_02_13.jpg)'
- en: Figure 2.13 – The Thing after configuration
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.13 – 配置后的设备
- en: The preceding screenshot illustrates the device association, network configuration,
    and variable settings, which are essential components of the Thing. Next, click
    the **Sketch** tab, where you will open the Arduino Web Editor for coding. Here,
    we will add the code that will be associated with the LED variable. In this section,
    we have completed all the tasks via drag and drop, but now it’s time to do some
    work by putting some coding into our development board. In the next section, we
    will explore sketches.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 上述截图说明了设备关联、网络配置和变量设置，这些都是设备的基本组件。接下来，点击**草图**选项卡，您将打开Arduino Web Editor进行编码。在这里，我们将添加与LED变量关联的代码。在本节中，我们已通过拖放完成了所有任务，但现在我们需要通过在开发板上编写一些代码来做一些工作。在下一节中，我们将探讨草图。
- en: Writing a sketch
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写草图
- en: Most Things are set up in the cloud via a **graphical user interface** (**GUI**),
    but we still need to do some coding. The following figure describes all the options
    of the mini web editor, such as verifying and uploading the code, selecting the
    development board on specific ports, and the code area for writing and editing.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数设备都是通过**图形用户界面**（**GUI**）在云中设置的，但我们仍然需要进行一些编码。以下图示描述了小型网页编辑器的所有选项，例如验证和上传代码、在特定端口选择开发板，以及编写和编辑代码的区域。
- en: '![Figure 2.14 – Mini web editor](img/B19752_02_14.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图2.14 – 小型网页编辑器](img/B19752_02_14.jpg)'
- en: Figure 2.14 – Mini web editor
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.14 – 小型网页编辑器
- en: 'The code will associate a variable with physical sensors/actuators to make
    it work properly. Please see the following steps:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 代码将关联一个变量与物理传感器/执行器，以使其正常工作。请参阅以下步骤：
- en: Here, you will see two buttons, like with the Arduino IDE. The tick button is
    used to verify code, while the arrow icon button is used to upload the code to
    the development board.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，您将看到两个按钮，就像在Arduino IDE中一样。勾选按钮用于验证代码，而箭头图标按钮用于将代码上传到开发板。
- en: This part shows whether your device is connected to your machine or not. If
    the development board is connected, then it will show the device name with the
    port.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这一部分显示了您的设备是否连接到您的机器。如果开发板已连接，则将显示带有端口的设备名称。
- en: The Arduino Cloud Editor has two variants – one is basic and the other is full.
    In the **Thing** tab shown in *Figure 2**.14*, we can see the mini version of
    the editor, but if you want to move to the full editor for the installation of
    libraries or other stuff, then click on the **</>** button.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Arduino云编辑器有两种版本——一个是基础版，另一个是完整版。在*图2.14*中显示的**“事物”**标签页中，我们可以看到编辑器的迷你版，但如果你想要移动到完整版以安装库或其他内容，那么请点击**</>**按钮。
- en: Scroll down the editor, and at the bottom, you will see the `OnLEDChange()`
    function, which is associated with the **LED** variable. In this function, we
    need to write the code that will provide connectivity to the sensor/physical pins
    of the development board.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动编辑器，在底部，你会看到与**LED**变量关联的`OnLEDChange()`函数。在这个函数中，我们需要编写代码以提供与开发板传感器/物理引脚的连接。
- en: 'According to our current example project, we just want a turned-on/turned-off,
    built-in LED for the development board. The following is the code that will be
    used in the function:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们当前的示例项目，我们只需要一个开/关的内置LED用于开发板。以下是在函数中使用的代码：
- en: '[PRE0]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: First, let’s recall the declaration used during variable creation, which is
    shown in *Figure 2**.12*. What the code does is turn the built-in LED on if the
    `lED` variable contains a true value; otherwise, it turns the built-in LED off.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们回顾一下在变量创建期间使用的声明，如图*图2.12*所示。代码的作用是，如果`LED`变量包含一个true值，则打开内置LED；否则，关闭内置LED。
- en: 'To write Boolean values on development board pins, we have a method called
    `digitalWrite`, which takes two parameters. The first parameter is a pin number
    and in the second parameter we will place `true`/`false` or `1`/`0`, while we
    are using `LED_BUILTIN`, which is a constant and contains *PIN #13*. The second
    parameter is a value, which is either `1` or `0`. This parameter changes according
    to the `lED` variable state. Here we are done with our coding exercise. Now it’s
    time to create a graphical user interface from where we turn on/off the LED. In
    the following section, we will set up the dashboard to control the LED.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '要在开发板的引脚上写入布尔值，我们有一个名为`digitalWrite`的方法，它接受两个参数。第一个参数是引脚号，在第二个参数中我们将放置`true`/`false`或`1`/`0`，而当我们使用`LED_BUILTIN`时，它是一个常量，包含*PIN
    #13*。第二个参数是值，可以是`1`或`0`。此参数根据`LED`变量的状态而变化。现在我们已经完成了我们的编码练习。现在是时候创建一个图形用户界面，从那里我们可以打开/关闭LED。在下一节中，我们将设置仪表盘以控制LED。'
- en: Creating a dashboard for web and mobile with an interactive widget
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建带有交互式小部件的Web和移动仪表盘
- en: After setting up a complete Thing, we are done with device setup, network settings,
    the variable, and coding the variable. The next question is, how can we turn the
    LED on/off? For that, we need to create a dashboard. *Figure 2**.15* illustrates
    a dashboard. Click on the **Dashboards** link in the top menu. After loading the
    dashboard page for the first time, you will see an empty page with one green button
    at the bottom of the page – **Build Dashboard**.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置好一个完整的“事物”之后，我们就完成了设备设置、网络设置、变量和变量编码。接下来要问的问题是，我们如何打开/关闭LED？为此，我们需要创建一个仪表盘。*图2.15*展示了仪表盘。点击顶部菜单中的**仪表盘**链接。首次加载仪表盘页面时，你将看到一个底部有一个绿色按钮的空白页面——**构建仪表盘**。
- en: '![Figure 2.15 – The Things dashboard](img/B19752_02_15.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![图2.15 – Things仪表盘](img/B19752_02_15.jpg)'
- en: Figure 2.15 – The Things dashboard
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.15 – Things仪表盘
- en: 'Click on the button, and you will be taken to the dashboard builder page to
    create a new stunning dashboard for your device control, as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 点击按钮，你将被带到仪表盘构建页面，以创建一个用于设备控制的新颖仪表盘，如下所示：
- en: The dashboard has two modes, view and editing. By default, it’s on editing mode,
    which is denoted by an edit icon, and we can switch to view mode by clicking on
    the eye icon. In view mode, we can’t modify the widget’s settings and alignment.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仪表盘有两种模式，查看和编辑。默认情况下，它是编辑模式，这由一个编辑图标表示，我们可以通过点击眼睛图标切换到查看模式。在查看模式下，我们无法修改小部件的设置和对齐。
- en: To add controls on the dashboard, click on the green **ADD** button, and a drop-down
    menu will appear with a variety of widgets. Here, you can select a widget by scrolling
    or searching.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在仪表盘上添加控件，请点击绿色**添加**按钮，将出现一个下拉菜单，其中包含各种小部件。在这里，你可以通过滚动或搜索来选择一个小部件。
- en: This button is used to arrange the widgets. During editing, you are not able
    to navigate, resize, or move the widget controls.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此按钮用于排列小部件。在编辑过程中，你无法导航、调整大小或移动小部件控件。
- en: As mobile icon is representing it’s working from its icon, this means by click
    on this icon you can adjust your dashboard for mobile devices. Arduino provides
    both views of the dashboard for desktop and mobile. You can switch between them
    by clicking on the mobile/desktop icon.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如移动图标所示，它通过其图标表示其工作状态，这意味着通过点击此图标，你可以调整移动设备的仪表盘。Arduino为桌面和移动设备提供了仪表盘的两种视图。你可以通过点击移动/桌面图标在它们之间切换。
- en: In the textbox, type the dashboard name.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本框中输入仪表盘名称。
- en: 'Now that we have created the dashboard, it’s time to put a widget on it. Widgets
    will help us to control/view the sensors/actuators. When you click on the **Add**
    button, you will see the list of widgets. Here you can select a widget by scrolling
    through the list or by searching the widgets via the search bar, as shown in the
    following figure:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了仪表盘，是时候在上面放置一个小部件了。小部件将帮助我们控制/查看传感器/执行器。当你点击**添加**按钮时，你会看到小部件列表。在这里，你可以通过滚动列表或通过搜索栏搜索小部件来选择小部件，如下所示：
- en: '![Figure 2.16 – The widgets list](img/B19752_02_16.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图2.16 – 小部件列表](img/B19752_02_16.jpg)'
- en: Figure 2.16 – The widgets list
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.16 – 小部件列表
- en: Select the **Switch** widget control for the current example project. After
    selecting the widget control, a popup will appear, where we need to link the Thing
    variable with the widget control to read/write the data to the device sensors.
    This is because the variable is the bridge between the dashboard widget controls
    and the Thing sensors to read and write data.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 为当前示例项目选择**开关**小部件控制。选择小部件控制后，将出现一个弹出窗口，我们需要将事物变量与小部件控制链接起来以读取/写入设备传感器的数据。这是因为变量是仪表盘小部件控制与事物传感器之间读取和写入数据的桥梁。
- en: 'In the widget popup, we have different settings, as shown in the following
    figure:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在小部件弹出窗口中，我们有不同的设置，如下所示：
- en: '![Figure 2.17 – Widget settings](img/B19752_02_17.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图2.17 – 小部件设置](img/B19752_02_17.jpg)'
- en: Figure 2.17 – Widget settings
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.17 – 小部件设置
- en: 'The widget settings are detailed as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 小部件设置如下详细说明：
- en: Firstly, we need to assign a name to our widget. Make sure to give it a proper
    name that represents the sensor’s name. Here, I used the name **LED-Switch**.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要为我们的小部件分配一个名称。确保给它一个合适的名称，以表示传感器的名称。在这里，我使用了名称**LED-Switch**。
- en: Hide or show the widget frame content, which is at the top and bottom of the
    widget.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 隐藏或显示小部件框架内容，该内容位于小部件的顶部和底部。
- en: Click on **Link Variable** to attach the Thing variable to the widget control,
    which will be explained in the next figure.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**链接变量**将事物变量附加到小部件控制，这将在下一图中解释。
- en: Hide/show the widget label to hide the text that overlays the widget control.
    In the preceding figure, it switches the **ON**/**OFF** button text.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 隐藏/显示小部件标签以隐藏覆盖小部件控制的文本。在先前的图中，它切换了**开**/**关**按钮文本。
- en: 'It’s time to attach the widget control to the variables. Note that we can add
    multiple controls on the same dashboard that are linked to different Things’ variables,
    which shows the versatility of Arduino IoT Cloud dashboards, as shown in the following
    figure:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候将小部件控制附加到变量上了。请注意，我们可以在同一仪表盘上添加多个控制，这些控制与不同事物的变量链接，这显示了Arduino IoT Cloud仪表盘的通用性，如下所示：
- en: '![Figure 2.18 – Linking a Thing variable with a widget control](img/B19752_02_18.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![图2.18 – 将事物变量链接到小部件控制](img/B19752_02_18.jpg)'
- en: Figure 2.18 – Linking a Thing variable with a widget control
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.18 – 将事物变量链接到小部件控制
- en: 'As shown in *Figure 2**.18*, we have the following steps to assign the cloud
    variable to the widget control:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如*图2.18*所示，我们将以下步骤分配给小部件控制以将云变量分配给小部件控制：
- en: Select a Thing from the **Things** list. After selecting the Thing, it will
    show you the variables that are associated with that Thing.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**事物**列表中选择一个事物。选择事物后，它将显示与该事物关联的变量。
- en: Select a variable from the **Variables** list.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**变量**列表中选择一个变量。
- en: Here, you will see all the details of the variables, such as the Thing name,
    **Type**, **Last value**, **Permission**, **Update policy**, and **Last update**.
    The purpose of this detailed summary is to make sure to verify that you have attached
    the right variable to the widget control.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，你可以看到变量的所有详细信息，例如事物名称、**类型**、**最后值**、**权限**、**更新策略**和**最后更新**。此详细摘要的目的是确保验证你是否已将正确的变量附加到小部件控制。
- en: After selecting the variable from the specific Thing, click on the **LINK VARIABLE**
    button, and you will see the variable details in the widget control popup. From
    there, you can change or detach the variable. Finally, click on the **DONE** button;
    now, our dashboard is ready, with a widget control to send commands to the Thing.
    Just click on the eye icon on the dashboard to make it operational. After that,
    start testing the dashboard controls.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在从特定设备中选择变量后，点击**链接变量**按钮，你将在小部件控制弹出窗口中看到变量详情。从那里，你可以更改或断开变量。最后，点击**完成**按钮；现在，我们的仪表板已经准备好了，有一个小部件控制可以发送命令到设备。只需点击仪表板上的眼睛图标使其可用。之后，开始测试仪表板控制。
- en: Here we are done with our first example project with Arduino MKR1010 and the
    Arduino IoT Cloud. Next, you need to solve *Assignment 1* of this section. After
    that, you will jump into the second section of this chapter, where you will learn
    how to use the Arduino IoT Cloud with non-compatible devices, such as Arduino
    Uno, Raspberry Pi, and so on via Node-RED.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们完成了使用Arduino MKR1010和Arduino IoT Cloud的第一个示例项目。接下来，你需要解决本节中的*作业1*。之后，你将进入本章的第二部分，在那里你将学习如何通过Node-RED使用与Arduino
    IoT Cloud不兼容的设备，例如Arduino Uno、Raspberry Pi等。
- en: Assignment 1
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 作业1
- en: 'Congratulations! You have completed the first part of this chapter successfully,
    and I hope you enjoyed that journey. Now, it’s time to verify what you have learned
    so far by giving you a small assignment:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经成功完成了本章的第一部分，希望你喜欢这段旅程。现在，是时候通过给你一个小作业来验证你所学的内容了：
- en: Attach three differently colored LEDs of any color (preferably, red, yellow,
    and green) to the Arduino MKR1010 development board on pin numbers 1, 2, and 3,
    respectively.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将三种不同颜色的LED灯（最好是红色、黄色和绿色）分别连接到Arduino MKR1010开发板的1号、2号和3号引脚。
- en: Set up a new Thing with the name `IoT-Based Traffic` `Lights Control`.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置一个名为`基于物联网的交通灯` `控制`的新设备。
- en: Associate the device, configure its network settings, and create variables according
    to the number of LEDs. Variable names should be based on LED colors such as `LED_Red`.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将设备关联起来，配置其网络设置，并根据LED灯的数量创建变量。变量名称应基于LED颜色，例如`LED_Red`。
- en: Write the code that will turn the LED on/off according to the variable value.
    After writing the code for each LED, verify and upload the code to the development
    board.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写代码，根据变量值来开关LED灯。在为每个LED编写代码后，验证并上传代码到开发板。
- en: Finally, set up the dashboard with the name `Traffic Light` `Control Dashboard`.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，设置名为`交通灯` `控制仪表板`的仪表板。
- en: Add the **Switch** buttons according to the number of LEDs, and link them with
    their associated variables.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据LED灯的数量添加**开关**按钮，并将它们与相应的变量链接。
- en: Test the LEDs by switching them on/off via a dashboard.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过仪表盘开关来测试LED灯。
- en: Important note
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Try the **Push Button** widget control along with the **Switch** button widget
    control. Verify whether one variable allows you to connect with more than one
    widget. Also, verify the behavior of the **Push Button** widget control by turning
    the **Switch** button on/off.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试使用**按钮**小部件控制和**开关**按钮小部件控制。验证一个变量是否允许你连接到多个小部件。此外，通过开关**开关**按钮来验证**按钮**小部件控制的行为。
- en: Our world is full of different types of technologies. Whenever a new innovation
    comes on the market, it always provides compatibility with older devices. In the
    Arduino IoT Cloud, we have a list of devices that are currently supported, but
    there are millions of devices that are not compatible with the Arduino IoT Cloud.
    So, while in the previous section of the chapter, we practiced an example with
    Arduino IoT Cloud-compatible development boards, next, we are going to look at
    how we can connect/use non-compatible devices with the Arduino IoT Cloud, such
    as Arduino UNO, Raspberry Pi, BeagleBone, and so on.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的世界充满了各种类型的技术。每当市场上出现一项新的创新时，它总是与旧设备保持兼容。在Arduino IoT Cloud中，我们有一个当前支持的设备列表，但还有数百万个设备与Arduino
    IoT Cloud不兼容。因此，在上一章节的上一部分，我们使用与Arduino IoT Cloud兼容的开发板进行了示例练习，接下来，我们将探讨如何将非兼容设备连接/使用到Arduino
    IoT Cloud中，例如Arduino UNO、Raspberry Pi、BeagleBone等。
- en: Introducing Node-RED
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Node-RED
- en: Node-RED is a free, open source visual programming tool for IoT and other applications.
    It was developed by IBM Emerging Technology and was first released in 2013\. Node-RED
    provides a web-based interface to wire together hardware devices, APIs, and online
    services in new and interesting ways. The tool uses a **graphical flow-based programming
    language**, making it easy for users with little or no programming experience
    to build complex IoT systems. Node-RED has become popular in the IoT and smart
    home communities for its ease of use and ability to integrate with a wide range
    of devices and services.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: Node-RED是一个免费的开源物联网和其他应用的视觉编程工具。它由IBM新兴技术部门开发，并于2013年首次发布。Node-RED提供了一个基于网页的界面，以新颖有趣的方式连接硬件设备、API和在线服务。该工具使用基于**图形流程**的编程语言，使得编程经验很少或没有的用户也能轻松构建复杂的物联网系统。Node-RED因其易用性和能够与广泛设备和服务集成而受到物联网和智能家居社区的欢迎。
- en: Node-RED is a flow-based development tool for IoT and other applications. It
    provides a visual, drag-and-drop interface to connect different devices, APIs,
    and online services. With Node-RED, users can wire together inputs, outputs, and
    functions to create sophisticated IoT solutions. As well as being open source
    and free to use, Node-RED has a large user community and a library of pre-built
    components.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Node-RED是一个基于流程的物联网和其他应用的开发工具。它提供了一个视觉拖放界面，用于连接不同的设备、API和在线服务。使用Node-RED，用户可以将输入、输出和功能连接起来，以创建复杂的物联网解决方案。除了开源和免费使用外，Node-RED还拥有庞大的用户社区和预构建组件库。
- en: 'With all Node-RED’s aforementioned benefits, the following question arises:
    why do we need to use the Arduino IoT Cloud? At the start of the chapter, I mentioned
    that the Arduino IoT Cloud only supports a few development boards natively. Even
    Arduino doesn’t support all of their development boards, especially Arduino UNO,
    Arduino Mega, and Raspberry Pi from the Raspberry Pi Foundation, which are very
    famous among makers and hobbyists and used by industry. The solution to this is
    Node-RED, which is compatible with most development boards and has an Arduino
    IoT Cloud module, making it easier for developers to integrate non-compatible
    devices with the Arduino IoT Cloud.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有Node-RED的上述优点的基础上，以下问题随之而来：为什么我们需要使用Arduino IoT Cloud？在章节的开头，我提到Arduino IoT
    Cloud仅原生支持少数几款开发板。即使是Arduino，也不支持它们所有的开发板，尤其是Arduino UNO、Arduino Mega以及来自树莓派基金会的树莓派，这些在创客和爱好者中非常著名，并被工业界所使用。Node-RED就是解决这个问题的方案，它与大多数开发板兼容，并拥有Arduino
    IoT Cloud模块，这使得开发者更容易将不兼容的设备集成到Arduino IoT Cloud中。
- en: 'Node-RED can be used with the Arduino IoT Cloud with several benefits:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: Node-RED与Arduino IoT Cloud结合使用，具有以下好处：
- en: '**Ease of development**: Node-RED’s visual, drag-and-drop interface makes it
    easy for users to connect Arduino boards to the cloud and build IoT applications
    quickly'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发简便**：Node-RED的视觉拖放界面使得用户能够轻松地将Arduino板连接到云端并快速构建物联网应用。'
- en: '**Integration with the Arduino IoT Cloud**: Node-RED has built-in support for
    the Arduino IoT Cloud, allowing users to easily connect their Arduino boards,
    as well as other development boards, and send data to the cloud'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与Arduino IoT Cloud集成**：Node-RED内置了对Arduino IoT Cloud的支持，使用户能够轻松地将他们的Arduino板以及其他开发板连接起来，并将数据发送到云端。'
- en: '**Flexibility**: The flow-based programming model of Node-RED makes it easy
    to build and modify complex systems'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活性**：Node-RED的基于流程的编程模型使得构建和修改复杂系统变得容易。'
- en: '**Flow-based programming**: Node-RED’s flow-based programming model is well
    suited to building IoT applications, as it allows users to quickly connect inputs,
    outputs, and functions to create sophisticated systems'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于流程的编程**：Node-RED的基于流程的编程模型非常适合构建物联网应用，因为它允许用户快速连接输入、输出和功能，以创建复杂的系统。'
- en: '**Open source**: Node-RED is open source, allowing users to access the source
    code and make modifications if necessary'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开源**：Node-RED是开源的，允许用户访问源代码并在必要时进行修改。'
- en: '**Large user community**: Node-RED has a large and active user community, providing
    access to a wealth of information and pre-built components'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**庞大的用户社区**：Node-RED拥有庞大且活跃的用户社区，提供丰富的信息和预构建组件。'
- en: These benefits make Node-RED a good choice for developing Arduino-based IoT
    applications and connecting them to the cloud. By using Node-RED, users can leverage
    the power of the cloud to store, analyze, and visualize data from their IoT systems.
    In this section, we have discussed the features and benefits of Node-RED. Now
    it’s time to take a practical look by implementing the example project. The following
    sections will take you through the implementation of the project step by step.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这些优势使Node-RED成为开发基于Arduino的物联网应用并将其连接到云端的良好选择。通过使用Node-RED，用户可以利用云的力量来存储、分析和可视化其物联网系统中的数据。在本节中，我们讨论了Node-RED的功能和优势。现在，是时候通过实现示例项目来实际看看了。接下来的几节将逐步引导您完成项目的实现。
- en: The Arduino IoT Cloud and a Node-RED Hello World example
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Arduino IoT Cloud和Node-RED Hello World示例
- en: In this section, we will build on our project by adding some extra functionality
    to our system via Node-RED. This will help you to understand how you can use Node-RED
    to integrate non-compatible devices with the Arduino IoT Cloud.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将通过Node-RED向我们的系统添加一些额外的功能，以扩展我们的项目。这将帮助您了解如何使用Node-RED将不兼容的设备与Arduino
    IoT Cloud集成。
- en: Node-RED will monitor the LED status based on a value that is either `LEDStatus`,
    which will be linked to the **Status** widget, which shows the LED as being either
    on or off. Using this example, you will learn how to read data from a Thing property/variable
    and how to write data to a Thing property/variable.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: Node-RED将根据一个值监控LED状态，该值可以是`LEDStatus`，它将链接到**状态**小部件，显示LED是开启还是关闭。通过这个示例，您将学习如何从设备属性/变量中读取数据以及如何将数据写入设备属性/变量。
- en: Node-RED has a module that was officially developed by Arduino for connectivity
    with the Arduino IoT Cloud. It provides five nodes to carry out different types
    of operations. For further details, visit [https://flows.nodered.org/node/@arduino/node-red-contrib-arduino-iot-cloud](https://flows.nodered.org/node/@arduino/node-red-contrib-arduino-iot-cloud).
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: Node-RED有一个由Arduino官方开发的模块，用于与Arduino IoT Cloud连接。它提供了五个节点来执行不同类型的操作。有关更多详细信息，请访问[https://flows.nodered.org/node/@arduino/node-red-contrib-arduino-iot-cloud](https://flows.nodered.org/node/@arduino/node-red-contrib-arduino-iot-cloud)。
- en: A tour of the Node-RED editor
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Node-RED编辑器的游览
- en: Before moving on, I want to first remind you that you need to set up Node-RED
    on your machine. If you already have, that’s great; otherwise, you need to set
    up on a local machine by going to [https://nodered.org/docs/getting-started/local](https://nodered.org/docs/getting-started/local).
    If you are looking for more cloud/development board options, then go to [https://nodered.org/docs/getting-started/](https://nodered.org/docs/getting-started/).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，我想首先提醒您，您需要在您的机器上设置Node-RED。如果您已经设置好了，那太好了；否则，您需要通过访问[https://nodered.org/docs/getting-started/local](https://nodered.org/docs/getting-started/local)在本地机器上设置。如果您正在寻找更多云/开发板选项，请访问[https://nodered.org/docs/getting-started/](https://nodered.org/docs/getting-started/)。
- en: 'After installation, start Node-RED and type `127.0.0.1:1880` or `localhost:1880`
    in your browser URL bar. After that, you will see an interface, with a white space
    area and several different colored boxes on the left sidebar; here I have marked
    the following figure with different numbered boxes, which are explained in detail
    after the figure:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，启动Node-RED，并在浏览器地址栏中输入`127.0.0.1:1880`或`localhost:1880`。之后，您将看到一个界面，其中包含一个空白区域和左侧边栏上的几个不同颜色的盒子；在这里，我已经用不同的编号标记了以下图中的盒子，这些盒子将在图后详细解释：
- en: '![ Figure 2.19 – A Node-RED interface overview](img/B19752_02_19.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![图2.19 – Node-RED界面概览](img/B19752_02_19.jpg)'
- en: Figure 2.19 – A Node-RED interface overview
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.19 – Node-RED界面概览
- en: 'The various parts of the preceding figure are explained as follows:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 前图的各种部分解释如下：
- en: These colorful boxes are called **nodes**. Node-RED divides different types
    of nodes into different groups, such as **common** and **function**.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这些彩色盒子被称为**节点**。Node-RED将不同类型的节点分为不同的组，例如**常用**和**函数**。
- en: This is the working area, or canvas area, where you will drag and place the
    nodes.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是工作区域，或画布区域，您将在这里拖放和放置节点。
- en: The **debug** area is used to debug the output and input of different operations
    to verify that everything is working fine.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**调试**区域用于调试不同操作的输出和输入，以验证一切是否运行正常。'
- en: Just like in other development environments, we can execute/run a program using
    the **Deploy** option. **Deploy** has different options; if you click on the small
    downward arrow icon, you will get a list of options, such as **Full**, **Modified
    Flows**, **Modified Nodes**, and **Restart Flows**.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就像在其他开发环境中一样，我们可以使用 **部署** 选项执行/运行程序。**部署** 有不同的选项；如果您点击小向下箭头图标，您将获得一个选项列表，例如
    **全部**、**修改的流程**、**修改的节点** 和 **重启流程**。
- en: The hamburger icon at the top right is the main navigation button, where you
    can find all the options to control the Node-RED configuration, especially for
    the installation of modules. In our case, we will install the Arduino IoT Cloud
    module.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 顶部右边的汉堡图标是主要导航按钮，在这里你可以找到所有控制 Node-RED 配置的选项，特别是模块的安装选项。在我们的例子中，我们将安装 Arduino
    IoT Cloud 模块。
- en: Here we have discussed the interface of Node-RED with all the main options.
    In the following section, we will look at how to install the Arduino IoT Cloud
    module for Node-RED, and in the subsequent sections, we will see its implementation.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们已经讨论了 Node-RED 与所有主要选项的接口。在下一节中，我们将探讨如何安装 Node-RED 的 Arduino IoT Cloud
    模块，在随后的章节中，我们将看到其实现。
- en: Installing the Arduino IoT Cloud module for Node-RED
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Node-RED 的 Arduino IoT Cloud 模块
- en: For Node-RED to communicate with the Arduino IoT Cloud, we need to install the
    Arduino IoT Cloud module, which was officially developed by the Arduino team.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让 Node-RED 与 Arduino IoT Cloud 通信，我们需要安装由 Arduino 团队官方开发的 Arduino IoT Cloud
    模块。
- en: 'Click on the navigation icon in the top-right corner of the app and then click
    on **Manage palette**. After that, you will see a popup like the one in the following
    figure:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 点击应用右上角的导航图标，然后点击 **管理调色板**。之后，您将看到一个类似于以下图的弹出窗口：
- en: '![Figure 2.20 – Arduino IoT Cloud module installation](img/B19752_02_20.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.20 – Arduino IoT Cloud 模块安装](img/B19752_02_20.jpg)'
- en: Figure 2.20 – Arduino IoT Cloud module installation
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.20 – Arduino IoT Cloud 模块安装
- en: 'From that popup, we will install a module:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 从那个弹出窗口中，我们将安装一个模块：
- en: To install a module, click on **Palette**.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装一个模块，请点击 **调色板**。
- en: Next, select the **Install** tab.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择 **安装** 选项卡。
- en: Initially, you will see a blank area. Type `Arduino` in the search bar, which
    will display different modules.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始时，您将看到一个空白区域。在搜索栏中输入 `Arduino`，这将显示不同的模块。
- en: Find the **@arduino/node-red-contrib-arduinio-iot-cloud** module and click on
    **install**. In the previous figure, you can see that I already have that module.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到 **@arduino/node-red-contrib-arduinio-iot-cloud** 模块，并点击 **安装**。在之前的图中，你可以看到我已经安装了该模块。
- en: 'Now that we have installed the module, it’s time to have a look at what type
    of nodes are available in the Arduino IoT Cloud module. Close the installation
    palette, scroll down through the nodes to the bottom, and you will arrive at the
    **Arduino IoT Cloud** section, as shown in the following figure:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了模块，是时候看看 Arduino IoT Cloud 模块中可用的节点类型了。关闭安装调色板，滚动节点到底部，您将到达 **Arduino
    IoT Cloud** 部分，如图所示：
- en: '![Figure 2.21 – Arduino IoT Cloud nodes](img/B19752_02_21.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.21 – Arduino IoT Cloud 节点](img/B19752_02_21.jpg)'
- en: Figure 2.21 – Arduino IoT Cloud nodes
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.21 – Arduino IoT Cloud 节点
- en: 'Here is a breakdown of the nodes shown in *Figure 2**.21*:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是 *图 2**.21* 中显示的节点的分解：
- en: The first one is an *IN* node (in Node-RED, we have nodes; that’s why I used
    the word node instead of property to get the value from the Thing property/variable).
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一个是一个 *IN* 节点（在 Node-RED 中，我们有节点；这就是我为什么用 node 而不是 property 来从 Thing 属性/变量中获取值的原因）。
- en: The second is an *OUT* node, used to write the value to the Thing property/variable.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二个是一个 *OUT* 节点，用于将值写入 Thing 属性/变量。
- en: The third is the **historic** node, which is used to get data from a specific
    property until a specific time. This node is useful when you want to get the set
    of values for a specific sensor, such as temperature/humidity.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第三个是 **历史** 节点，用于从特定属性获取数据直到特定时间。当您想要获取特定传感器的值集，例如温度/湿度时，此节点非常有用。
- en: The fourth is **periodic** and is useful when you want to get the value of a
    specific property after a specific period of time, such as getting the value of
    soil moisture after a specific time interval.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第四个是 **周期性** 的，当您想要在特定时间段后获取特定属性的值时非常有用，例如在特定时间间隔后获取土壤湿度的值。
- en: The fifth, which is our last node, is **inject**. This is used to add value
    to the flow of the Arduino IoT Cloud variables after receiving some sort of input.
    *OUT* is different, as it only sends out data, but this node will inject the value
    into the Arduino IoT Cloud variable.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第五个，也就是我们的最后一个节点，是**注入**。这个节点用于在接收到某种输入后向Arduino IoT Cloud变量的流程中添加值。"OUT"不同，因为它只发送数据，但这个节点将值注入到Arduino
    IoT Cloud变量中。
- en: In this section, we have discussed the nodes to work with the Arduino IoT Cloud,
    that are available to developers from the Arduino IoT Cloud module. Next, we will
    set up the API, cloud variables, and dashboard to proceed further.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了与Arduino IoT Cloud一起工作的节点，这些节点可供开发者在Arduino IoT Cloud模块中使用。接下来，我们将设置API、云变量和仪表板，以便进一步操作。
- en: Setting up an API, variable, and dashboard widget
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置 API、变量和仪表板小部件
- en: After installing the Arduino IoT Cloud module, it’s time to set up an API in
    the Arduino IoT Cloud. In the Arduino IoT Cloud’s older interface, there were
    API options under the **Integrations** tab, but now, the Arduino team has moved
    the API option to the Arduino IoT Cloud, which is available at [https://cloud.arduino.cc/home/](https://cloud.arduino.cc/home/).
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Arduino IoT Cloud模块后，是时候在Arduino IoT Cloud中设置API了。在Arduino IoT Cloud的旧界面中，在**集成**选项卡下有API选项，但现在，Arduino团队已将API选项移动到Arduino
    IoT Cloud，可在[https://cloud.arduino.cc/home/](https://cloud.arduino.cc/home/)找到。
- en: 'Click on **API Keys**. After that, you will be taken to the API page; click
    on **CREATE API KEY**. A popup will appear; type the name for API and click on
    the **CONTINUE** button. The following wizard will take some seconds to generate
    the keys, and then a new popup will appear displaying them:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**API密钥**。之后，您将被带到API页面；点击**创建API密钥**。将出现一个弹出窗口；输入API名称并点击**继续**按钮。以下向导将花费几秒钟生成密钥，然后会出现一个新的弹出窗口显示它们：
- en: '![](img/B19752_02_22.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19752_02_22.jpg)'
- en: Figure 2.22 – The API keys
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.22 – API密钥
- en: Copy the client ID and client secret by clicking on the copy icons; never try
    to copy the secret name by selecting it, as it is too long. Save both the client
    ID and client secret to secure the location, and after that, click on the checkbox
    beside **I saved my Client ID and Secret** to confirm that you have saved your
    keys. Finally, click on the **DONE** button, and you will see your API key in
    the panel, ready for use.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击复制图标复制客户端ID和客户端密钥；永远不要尝试通过选择它来复制密钥名称，因为它太长了。将客户端ID和客户端密钥保存在安全的位置，然后点击**我已经保存我的客户端ID和密钥**旁边的复选框以确认您已保存您的密钥。最后，点击**完成**按钮，您将在面板中看到您的API密钥，准备使用。
- en: Important note
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: One API key has access to all the Things and their variables. So, it’s good
    to use one API key to gain access to all Things instead of creating separate API
    keys for each one. On the other hand, take care of your keys, as losing them can
    be a big security risk.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 一个API密钥可以访问所有设备和它们的变量。因此，使用一个API密钥来访问所有设备而不是为每个设备创建单独的API密钥是很好的。另一方面，请注意您的密钥，因为丢失它们可能是一个很大的安全风险。
- en: After API key generation, we need to set up an extra variable that will receive
    the value from Node-RED, and a **Status** widget that will act according to the
    variable value.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成API密钥后，我们需要设置一个额外的变量，该变量将接收Node-RED的值，以及一个根据变量值进行操作的**状态**小部件。
- en: For variable creation, go back to the IoT Cloud dashboard shown in *Figure 2**.12*,
    select the desired Thing, create a new variable named `LEDStatus`, and choose
    the Boolean type that we previously created for the LED. Then, navigate back to
    the dashboard and select the dashboard that we developed for the previous exercise.
    Click on the `LEDStatus` variable with the **Status** widget.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 对于变量创建，返回到*图2.12*所示的IoT Cloud仪表板。选择所需的设备，创建一个名为`LEDStatus`的新变量，并选择我们之前为LED创建的布尔类型。然后，返回到仪表板并选择我们为之前练习开发的仪表板。点击带有**状态**小部件的`LEDStatus`变量。
- en: Here we have created the API keys in the Arduino IoT Cloud for Node-RED, as
    well as a new Thing with cloud variables and a dashboard. Next, we are going to
    configure the API keys in Node-RED for proper communication with the Arduino IoT
    Cloud.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们已经在Arduino IoT Cloud中为Node-RED创建了API密钥，以及一个新的带有云变量和仪表板的新设备。接下来，我们将配置Node-RED中的API密钥，以便与Arduino
    IoT Cloud进行适当的通信。
- en: Creating a first project with Node-RED
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Node-RED创建第一个项目
- en: We have done all the mandatory stuff that is required in our journey so far.
    Return to the Node-RED dashboard shown in *Figure 2**.19*, scroll down the left
    side, and move your node to the Arduino IoT Cloud.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了迄今为止旅程中所需的所有强制性内容。返回到*图2.19*中显示的Node-RED仪表板，向下滚动左侧，并将您的节点移动到Arduino IoT
    Cloud。
- en: 'Click on the first node, which is *IN*, and drag it to the flow area. Double-click
    on the node, and you will see the following popup for node configuration:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 点击第一个节点，即*IN*节点，将其拖动到流程区域。双击节点，您将看到以下节点配置的弹出窗口：
- en: '![Figure 2.23 – Arduino IN node configuration](img/B19752_02_23.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![*图2.23* – Arduino IN节点配置](img/B19752_02_23.jpg)'
- en: Figure 2.23 – Arduino IN node configuration
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2.23* – Arduino IN节点配置'
- en: 'To edit the property node, follow these steps:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 要编辑属性节点，请按照以下步骤操作：
- en: Select the Arduino connection from the dropdown (the dropdown is only there
    if you have multiple Arduino IoT Cloud connections).
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉菜单中选择Arduino连接（如果您的Arduino IoT Cloud连接有多个，下拉菜单才会出现）。
- en: If you don’t have a connection, click on the pencil icon, and it will take you
    to a new popup where you will need to provide the name of the connection, along
    with the client ID and client secret that were generated in the previous section
    in *Figure 2**.22*. When you save the connection, it will appear under the **Connection**
    dropdown.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您没有连接，点击铅笔图标，它将带您到一个新的弹出窗口，在那里您需要提供连接的名称，以及在前一节*图2.22*中生成的客户端ID和客户端密钥。当您保存连接时，它将出现在**连接**下拉菜单下。
- en: After successfully creating and selecting a connection, a list of Things that
    are associated with that connection will appear. From the **Thing** dropdown,
    select the target Thing that you will use in your flow. If you do not see anything
    in the dropdown, it means there is an issue with the connection.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在成功创建并选择连接后，将出现与该连接关联的物件的列表。从**物件**下拉菜单中选择您将在流程中使用的目标物件。如果您在下拉菜单中没有看到任何内容，这意味着连接存在问题。
- en: After the selection of Thing, the **Property** dropdown will list all the variables
    that are associated with the selected Thing. Select one variable that you want
    to sense; in our exercise, I chose the **LED** variable to get its status.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择物件后，**属性**下拉菜单将列出与所选物件关联的所有变量。选择一个您想要感知的变量；在我们的练习中，我选择了**LED**变量以获取其状态。
- en: Assign a name to the node, click on the **Done** button, and then you are done
    with the configuration.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为节点分配一个名称，点击**完成**按钮，然后您就完成了配置。
- en: 'The following is a complete flow of nodes. It shows the entire workflow, from
    getting variable values to the final node, which sends a value to the cloud based
    on input:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个完整的节点流程。它显示了整个工作流程，从获取变量值到最后一个节点，该节点根据输入将值发送到云中：
- en: '![Figure 2.24 – A complete flow of the Node-RED project](img/B19752_02_24.jpg)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![*图2.24* – Node-RED项目的完整流程](img/B19752_02_24.jpg)'
- en: Figure 2.24 – A complete flow of the Node-RED project
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2.24* – Node-RED项目的完整流程'
- en: 'The node workflow is broken down as follows:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 节点工作流程分解如下：
- en: The first node is the *IN* node. Select the variable that you want to read;
    I selected the **LED** variable.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一个节点是*IN*节点。选择您想要读取的变量；我选择了**LED**变量。
- en: Add the *switch* node (node `Functions`tab on the left sidebar of the page.
    This node is responsible for taking the value from node **1** and selecting the
    specific node from **3** or **4**, according to the value. Link the Arduino *IN*
    node to the *switch* node. After linking, double-click on the *switch* node, where
    we need to specify the switch cases.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加*switch*节点（页面左侧侧边栏的**函数**选项卡上的节点。此节点负责从节点**1**获取值，并根据该值选择**3**或**4**中的特定节点。将Arduino
    *IN*节点链接到*switch*节点。链接后，双击*switch*节点，我们需要指定开关情况。
- en: '![Figure 2.25 – Switch node options](img/B19752_02_25.jpg)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![*图2.25* – Switch节点选项](img/B19752_02_25.jpg)'
- en: Figure 2.25 – Switch node options
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2.25* – Switch节点选项'
- en: 'To edit the *switch* node, follow these steps:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 要编辑*switch*节点，请按照以下步骤操作：
- en: Firstly, assign a name to the node and then add the switch cases.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，为节点分配一个名称，然后添加开关情况。
- en: 'In our current exercise, we have two switch statements: the LED is either *true*
    or *false*, which means on or off. By default, there is only one option – click
    on the small `1` and `0`, and we will then have two flows.'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们当前的练习中，我们有两个switch语句：LED是*true*或*false*，这意味着开或关。默认情况下，只有一个选项 – 点击小的`1`和`0`，然后我们将有两个流程。
- en: The *change* nodes (`True`/`1`/`On` value. Double-click on this node. Now, click
    on the drop-down icon, which is marked by a red box in the following figure, select
    the **Boolean** type, and then select **true**.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '*更改*节点（`True`/`1`/`On`值。双击此节点。现在，点击下拉图标，如图中红色方框所示，选择**布尔**类型，然后选择**true**。'
- en: '![Figure 2.26 – Changing the node configuration](img/B19752_02_26.jpg)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![图2.26 – 更改节点配置](img/B19752_02_26.jpg)'
- en: Figure 2.26 – Changing the node configuration
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.26 – 更改节点配置
- en: 'To edit the change node, follow these steps:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 要编辑更改节点，请按照以下步骤操作：
- en: Again, insert the *change* node and link it with the *switch* node (node `False`/`0`/`Off`
    value. Double-click the *change* node, select the Boolean data type, and select
    the **false** value.
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次，插入*更改*节点并将其与*开关*节点（节点`False`/`0`/`Off`值）连接。双击*更改*节点，选择布尔数据类型，并选择**false**值。
- en: Everything is ready now. We just need to add a node that will send data to a
    specific Arduino IoT Cloud Thing variable. To send the data, we need the Arduino
    *OUT* node, which is the second node under the Arduino IoT Cloud tab shown in
    *Figure 2**.21*. Drag this node, and connect both *change* nodes (`LEDStatus`
    variable.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在一切准备就绪。我们只需要添加一个节点，该节点将数据发送到特定的Arduino IoT Cloud事物变量。要发送数据，我们需要Arduino *OUT*节点，这是在*图2**.21*中Arduino
    IoT Cloud标签下的第二个节点。拖动此节点，并将其连接到两个*更改*节点（`LEDStatus`变量）。
- en: Finally, we are done with all the node configurations and linkage. Click on
    the `LEDStatus` Arduino IoT Cloud variable according to the Node-RED **LED** variable,
    and the status widget will be changed accordingly.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们完成了所有节点配置和链接。根据Node-RED的**LED**变量，点击`LEDStatus` Arduino IoT Cloud变量，状态小部件将相应地更改。
- en: In the second part of the chapter, we have explored how to connect non-compatible
    IoT development boards with the Arduino IoT Cloud using Node-RED. Next up is *Assignment
    2*, which is specially designed for you to practice with different experiments.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的第二部分，我们探讨了如何使用Node-RED和Arduino API接口将不兼容的物联网开发板与Arduino IoT Cloud连接。接下来是*练习2*，这个练习专门为你设计，以便进行不同的实验。
- en: Assignment 2
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习2
- en: 'Continue the previous assignment, where you connected three LEDs to MKR Wi-Fi
    1010 and the Arduino IoT Cloud setup:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 继续上一个练习，其中你将三个LED连接到MKR Wi-Fi 1010和Arduino IoT Cloud设置：
- en: Create three status variables in the Thing, according to the LED name such as
    Red, Yellow and Green, to the previously-set-up Thing.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在事物中创建三个状态变量，根据LED名称（如红色、黄色和绿色）到之前设置的Thing。
- en: Add three status widgets to the previously-set-up dashboard and attach newly
    created status variables to them.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在之前设置的仪表板上添加三个状态小部件，并将新创建的状态变量附加到它们上。
- en: Set up three different flows for each LED and deploy the flows.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为每个LED设置三个不同的流程并部署这些流程。
- en: Verify the status widgets by turning the LEDs on/off with the **Switch** button
    widget.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用**开关**按钮小部件打开/关闭LED来验证状态小部件。
- en: Summary
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter is the first chapter where we explored how to connect devices with
    the Arduino IoT Cloud using a basic LED on/off example. In the first part, we
    used an Arduino IoT Cloud-compatible development board, which was the MKR Wi-Fi
    1010 board, where we learned how to create Things and cloud variables, how to
    associate devices, how to configure networks, and how to create sketches. At the
    end of that section, there was an assignment for you to practice on.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是第一章节，我们通过一个基本的LED开关示例探讨了如何使用Arduino IoT Cloud连接设备。在第一部分，我们使用了一个与Arduino IoT
    Cloud兼容的开发板，即MKR Wi-Fi 1010板，在那里我们学习了如何创建事物和云变量，如何关联设备，如何配置网络，以及如何创建草图。在该部分的结尾，有一个练习任务供你实践。
- en: In the second part of this chapter, we explored how to connect non-compatible
    development boards, such as Arduino UNO, Arduino Mega, and Raspberry Pi, with
    the Arduino IoT Cloud, using Node-RED and the Arduino API interface. Here we have
    explored Node-RED, the Node-RED module for the Arduino IoT Cloud, and generating
    API keys in the cloud. This part of the chapter helped teach you how to use non-compatible
    existing technologies with the Arduino IoT Cloud.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的第二部分，我们探讨了如何使用Node-RED和Arduino API接口将不兼容的开发板，如Arduino UNO、Arduino Mega和Raspberry
    Pi，与Arduino IoT Cloud连接。在这里，我们探讨了Node-RED、Arduino IoT Cloud的Node-RED模块以及如何在云中生成API密钥。这一章节的部分内容帮助你学习如何使用不兼容的现有技术与Arduino
    IoT Cloud。
- en: Arduino has a lot of options in the Arduino IoT Cloud, such as Things, devices,
    dashboards, and a lot of widgets for dashboards and the Arduino Web Editor. So,
    in the next chapter, we will explore all those options in detail before moving
    on. [*Chapter 3*](B19752_03.xhtml#_idTextAnchor056) is very important for you
    to better understand all of the Arduino IoT Cloud options.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino 在 Arduino IoT Cloud 中提供了许多选项，例如事物、设备、仪表盘以及大量用于仪表盘和 Arduino Web 编辑器的部件。因此，在下一章中，我们将在继续前进之前详细探讨所有这些选项。[*第
    3 章*](B19752_03.xhtml#_idTextAnchor056) 对于您更好地理解所有 Arduino IoT Cloud 选项非常重要。
