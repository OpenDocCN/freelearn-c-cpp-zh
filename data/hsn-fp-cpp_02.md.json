["```cpp\nlearn square {\n    repeat 4 {forward 50 turnright 90}\n}\n```", "```cpp\nint add(const int base, const int exponent){\n   return pow(base, exponent);\n}\n```", "```cpp\nstd::vector aCollection{5, 4, 3, 2, 1};\nsort (aCollection.begin(), aCollection.end());\n```", "```cpp\nusing namespace std;\n\n// Parts of code omitted for clarity\nstruct Name{\n     string firstName;\n     string lastName;\n};\n```", "```cpp\nbool compareByFirstName(const Name& first, const Name& second){\n     return first.firstName < second.firstName;\n}\n```", "```cpp\nint main(){\n    vector<Name> names = {Name(\"John\", \"Smith\"), Name(\"Alex\",\n    \"Bolboaca\")};\n\n    sort(names.begin(), names.end(), compareByFirstName);\n}\n// The names vector now contains \"Alex Bolboaca\", \"John Smith\"\n```", "```cpp\nfor(int i = 0; i< 10; ++i){\n    cout << i << endl;\n}\n```", "```cpp\nfor (list<int>::iterator it = aList.begin(); it != aList.end(); ++it)\n      cout << *it << endl;\n```", "```cpp\nint sumWithUsualLoop(const vector<int>& numbers){\n    int sum = 0;\n    for(auto iterator = numbers.begin(); iterator < numbers.end(); \n    ++iterator){\n        sum += *iterator;\n    }\n    return sum;\n}\n```", "```cpp\nint sumOfEvenNumbersWithUsualLoop(const vector<int>& numbers){\n    int sum = 0;\n    for(auto iterator = numbers.begin(); iterator<numbers.end(); \n    ++iterator){\n        int number = *iterator;\n        if (number % 2 == 0) sum+= number;\n    }\n    return sum;\n}\n```", "```cpp\nstruct Sums{\n    Sums(): evenSum(0),  oddSum(0), total(0){}\n    int evenSum;\n    int oddSum;\n    int total;\n};\n\nconst Sums sums(const vector<int>& numbers){\n    Sums theTotals;\n    for(auto iterator = numbers.begin(); iterator<numbers.end(); \n    ++iterator){\n        int number = *iterator;\n        if(number % 2 == 0) theTotals.evenSum += number;\n        if(number %2 != 0) theTotals.oddSum += number;\n        theTotals.total += number;\n    }\n    return theTotals;\n}\n```", "```cpp\ndef isEven(value){return value %2 == 0}\ndef isOdd(value){return value %2 == 1}\ndef sums(numbers){\n   return [\n      evenSum: numbers.filter(isEven).sum(),\n      oddSum: numbers.filter(isOdd).sum(),\n      total: numbers.sum()\n   ]\n}\n```", "```cpp\nconst Sums sumsWithFunctionalLoops(const vector<int>& numbers){\n    Sums theTotals;\n    vector<int> evenNumbers;\n    copy_if(numbers.begin(), numbers.end(), \n    back_inserter(evenNumbers), isEven);\n    theTotals.evenSum = accumulate(evenNumbers.begin(), \n    evenNumbers.end(), 0);\n\n    vector<int> oddNumbers;\n    copy_if(numbers.begin(), numbers.end(), back_inserter(oddNumbers), \n    isOdd);\n    theTotals.oddSum= accumulate(oddNumbers.begin(), oddNumbers.end(), \n    0);\n\n    theTotals.total = accumulate(numbers.begin(), numbers.end(), 0);\n\n    return theTotals;\n}\n```", "```cpp\ntemplate<class UnaryPredicate>\nconst vector<int> filter(const vector<int>& input, UnaryPredicate filterFunction){\n    vector<int> filtered;\n    copy_if(input.begin(), input.end(), back_inserter(filtered), \n    filterFunction);\n    return filtered;\n}\n\nconst int sum(const vector<int>& input){\n    return accumulate(input.begin(), input.end(), 0);\n}\n\nconst Sums sumsWithFunctionalLoopsSimplified(const vector<int>& numbers){\n    Sums theTotals(\n        sum(filter(numbers, isEven)),\n        sum(filter(numbers, isOdd)),\n        sum(numbers)\n    ); \n    return theTotals;\n}\n```", "```cpp\nclass ...{\n    int add(const int& first, const int& second) const{\n        return first + second;\n    }\n}\n```", "```cpp\nint uglyAdd(int& first, int& second){\n    first = first + second;\n    aMember = 40;\n    return first;\n}\n```", "```cpp\nconst Sums sumsWithFunctionalLoopsSimplified(const vector<int>& numbers){\n    Sums theTotals(\n        sum(filter(numbers, isEven)),\n        sum(filter(numbers, isOdd)),\n        sum(numbers)\n    );\n    return theTotals;\n }\n```", "```cpp\nconst Sums sumsWithFunctionalLoops(const vector<int>& numbers){\n    Sums theTotals;\n    vector<int> evenNumbers;\n    copy_if(numbers.begin(), numbers.end(), back_inserter(evenNumbers), \n    isEven);\n    theTotals.evenSum = accumulate(evenNumbers.begin(), \n    evenNumbers.end(), 0);\n\n    vector<int> oddNumbers;\n    copy_if(numbers.begin(), numbers.end(), back_inserter(oddNumbers), \n    isOdd);\n    theTotals.oddSum= accumulate(oddNumbers.begin(), oddNumbers.end(), \n    0);\n\n    theTotals.total = accumulate(numbers.begin(), numbers.end(), 0);\n\n    return theTotals;\n}\n```", "```cpp\ntemplate<class UnaryPredicate>\nconst vector<int> filter(const vector<int>& input, UnaryPredicate filterFunction){\n    vector<int> filtered;\n    copy_if(input.begin(), input.end(), back_inserter(filtered), \n    filterFunction);\n    return filtered;\n}\n\nconst int sum(const vector<int>& input){\n    return accumulate(input.begin(), input.end(), 0);\n}\n\nconst Sums sumsWithFunctionalLoopsSimplified(const vector<int>& numbers){\n    Sums theTotals(\n        sum(filter(numbers, isEven)),\n        sum(filter(numbers, isOdd)),\n        sum(numbers)\n    );\n\n    return theTotals;\n}\n```", "```cpp\ntemplate<class CollectionType, class UnaryPredicate>\nconst CollectionType filter(const CollectionType& input, UnaryPredicate filterFunction){\n    CollectionType filtered;\n    copy_if(input.begin(), input.end(), back_inserter(filtered), \n    filterFunction);\n    return filtered;\n}\ntemplate<typename T, template<class> class CollectionType>\nconst T sum(const CollectionType<T>& input, const T& init = 0){\n    return accumulate(input.begin(), input.end(), init);\n} \n```"]