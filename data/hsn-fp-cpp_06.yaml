- en: Partial Application and Currying
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部分应用和柯里化
- en: We've already gone far in our quest to understand functional programming! We
    learned about pure functions and lambdas and dived into lambda calculus with the
    help of functional composition. We now know how to create functions from other
    functions.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在探索函数式编程的过程中走得很远！我们学习了纯函数和lambda，并借助函数组合深入了解了lambda演算。我们现在知道如何从其他函数创建函数。
- en: There's still one more thing to learn about the basis of lambda calculus. Besides
    functional composition, we can also create functions from other functions through
    two operations—currying and partial application. This will complete our discussion
    on functional building blocks and allow you to move forward towards designing
    with functions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 关于lambda演算基础的还有一件事要学习。除了函数组合，我们还可以通过两种操作——柯里化和部分应用——从其他函数创建函数。这将完成我们对函数式构建块的讨论，并让你向前迈进，朝着使用函数进行设计。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: What is partial application?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是部分应用？
- en: How to use partial application in C++
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在C++中使用部分应用
- en: What is currying?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是柯里化？
- en: How to curry functions in C++
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在C++中柯里化函数
- en: The relationship between currying and partial application
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 柯里化和部分应用之间的关系
- en: How to combine currying with functional composition
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将柯里化与函数组合结合
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You will need a compiler that supports C++ 17\. I used GCC 7.3.0.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要一个支持C++ 17的编译器。我使用的是GCC 7.3.0。
- en: 'The code is on GitHub at [https://github.com/PacktPublishing/Hands-On-Functional-Programming-with-Cpp](https://github.com/PacktPublishing/Hands-On-Functional-Programming-with-Cpp)
    in the `Chapter05` folder. It includes and uses `doctest`, which is a single header
    open source unit testing library. You can find it on its GitHub repository here:
    [https://github.com/onqtam/doctest](https://github.com/onqtam/doctest).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 代码在GitHub上的[https://github.com/PacktPublishing/Hands-On-Functional-Programming-with-Cpp](https://github.com/PacktPublishing/Hands-On-Functional-Programming-with-Cpp)的`Chapter05`文件夹中。它包括并使用`doctest`，这是一个单头开源单元测试库。你可以在它的GitHub仓库中找到它：[https://github.com/onqtam/doctest](https://github.com/onqtam/doctest)。
- en: Partial application and currying
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部分应用和柯里化
- en: 'If you think about lambdas and what operations we could do on them to obtain
    other lambdas, two things spring to mind:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你考虑lambda以及我们可以对它们进行的操作来获得其他lambda，会想到两件事：
- en: Something about combining two lambdas, which we've seen in functional composition
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于组合两个lambda的事情，我们在函数组合中已经见过
- en: Something about the parameters of a lambda, which we'll visit next
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于lambda的参数，我们将在下一节讨论
- en: 'What could we do with a lambda''s parameters? There are two things:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用lambda的参数做什么？有两件事：
- en: Decompose a lambda with multiple arguments into more lambdas with one argument,
    an operation called **currying**
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将具有多个参数的lambda分解为具有一个参数的更多lambda，这个操作称为**柯里化**
- en: Obtain a lambda with *N-1* arguments by binding an argument of a lambda with
    *N* arguments to a value, an operation called **partial application**
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过将具有*N*个参数的lambda的一个参数绑定到一个值来获得具有*N-1*个参数的lambda，这个操作称为**部分应用**
- en: For reasons that will soon become apparent, the two operations are connected,
    so we'll discuss them together.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 由于很快就会变得明显的原因，这两个操作是相关的，所以我们将一起讨论它们。
- en: Partial application
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部分应用
- en: 'If you have a lambda with *N* arguments, partial application means obtaining
    another lambda by binding one argument to a value, hence obtaining a new lambda
    with *N-1* arguments. We could, for example, take an `add` function and do a partial
    application to bind one of its parameters to the value `1`, resulting in an `increment` function. In
    pseudo C++, it would look something like this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个带有*N*个参数的lambda，部分应用意味着通过将一个参数绑定到一个值来获得另一个lambda，从而获得一个带有*N-1*个参数的新lambda。例如，我们可以对`add`函数进行部分应用，将其中一个参数绑定到值`1`，从而得到一个`increment`函数。在伪C++中，它看起来像这样：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: That's it! The idea of partial application is fairly simple. Let's look at the
    syntax in C++.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！部分应用的想法相当简单。让我们看看C++中的语法。
- en: Partial application in C++
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C++中的部分应用
- en: 'A basic implementation of partial application can be done manually. We can
    simply create a lambda called `increment` that calls the general `add` function, passing
    `1` as the second parameter:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 部分应用的基本实现可以手动完成。我们可以简单地创建一个名为`increment`的lambda，调用通用的`add`函数，将`1`作为第二个参数传递：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is not the neat operation we're looking for, but it can be useful when
    you can't use the generic method for some reason.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是我们正在寻找的简洁操作，但在某些情况下可能很有用，你无法使用通用方法时。
- en: 'Fortunately, STL offers a better alternative in our friendly header file, `functional`—the
    `bind` function. It takes as parameters the function, the values you want to bind,
    and placeholder arguments that just forward the arguments. To obtain the `increment`
    function with a call to `bind`, we pass in the general `add` lambda; the argument
    value, `1`, for the first argument; and a placeholder that specifies an unbound
    parameter:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，STL在我们友好的头文件`functional`中提供了一个更好的选择——`bind`函数。它的参数是函数、你想要绑定的值和占位符参数，它只是转发参数。通过调用`bind`获得`increment`函数，我们传入通用的`add`
    lambda；第一个参数的参数值`1`；以及指定未绑定参数的占位符：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: While convenient, you should be aware that `bind` has a high compile-time overhead.
    When this is a problem, you can always revert to the previous option—calling the
    more general lambda directly from another manually written lambda.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然方便，但你应该意识到`bind`具有很高的编译时开销。当这是一个问题时，你总是可以回到之前的选项——从另一个手动编写的lambda直接调用更通用的lambda。
- en: 'Of course, nothing stops us from binding both parameters. Since programmers
    like the number `42`, I will bind both parameters of the `add` lambda to the values, `1`
    and `41`, in order to obtain another lambda, `number42`:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们可以绑定两个参数。由于程序员喜欢数字`42`，我将`add` lambda的两个参数都绑定到值`1`和`41`，以获得另一个lambda，`number42`：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `bind` syntax can be a bit tricky sometimes, so let's look at it in more
    detail. The key is to understand that the *parameter placeholder refers to the
    parameters of the resulting lambda and not of the initial lambda*.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`bind`语法有时可能有点棘手，所以让我们更详细地看一下。关键是要理解*参数占位符指的是结果lambda的参数，而不是初始lambda的参数*。'
- en: 'To make this clearer, let''s look at an example of a lambda that adds its three
    arguments:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更清楚地说明这一点，让我们看一个添加其三个参数的lambda的示例：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If we want to obtain another lambda, `addTwoNumbersTo10`, from our `addThree`
    lambda, by binding its first parameter to the value `10`, what is the syntax of
    `bind`? Well, our resulting lambda, `addTwoNumbersTo10`, will receive two parameters.
    Their placeholders will be denoted with `_1` and `_2`. So, we need to tell bind
    that the first argument to our initial lambda, `addThree`, is `10`. The second
    argument will be forwarded from `addTwoNumbersTo10`, so it''s `_1`. The third
    argument is forwarded as well, from the second argument of `addNumbersTo10`, so
    it''s `_2`. We end up with this code:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想通过将其第一个参数绑定到值`10`，从我们的`addThree` lambda中获得另一个lambda `addTwoNumbersTo10`，`bind`的语法是什么？嗯，我们的结果lambda
    `addTwoNumbersTo10` 将接收两个参数。它们的占位符将用 `_1` 和 `_2` 表示。因此，我们需要告诉`bind`我们初始lambda
    `addThree`的第一个参数是`10`。第二个参数将从`addTwoNumbersTo10`中转发，所以是`_1`。第三个参数也将从`addNumbersTo10`的第二个参数中转发，所以是`_2`。我们最终得到这段代码：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let''s go forward. We want to obtain another lambda, `addTo10Plus20`, from
    our initial `addThree` lambda by using partial application. The resulting function
    will have only one argument, `_1`. The other arguments to bind will be the values, `10`
    and `20`. We end up with the following code:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续。我们希望通过部分应用从我们最初的`addThree` lambda中获得另一个lambda，`addTo10Plus20`。结果函数将只有一个参数，`_1`。要绑定的其他参数将是值`10`和`20`。我们最终得到以下代码：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'What if we wanted to bind the first and the third argument? It should be clear
    now that the parameters are exactly the same, but their order changes in the `bind`
    call:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要绑定第一个和第三个参数呢？现在应该很清楚，参数是完全相同的，但它们在`bind`调用中的顺序发生了变化：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'What if we want to bind the second and third arguments instead? Well, the placeholder
    moves, but it''s still the only argument of the resulting function, so `_1`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要绑定第二和第三个参数呢？嗯，占位符会移动，但它仍然是结果函数的唯一参数，所以 `_1`。
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: What if we want to do partial application on a class method?
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想对类方法进行部分应用呢？
- en: Partial application on class methods
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类方法的部分应用
- en: 'The `bind` function allows us to do partial application on a class method,
    but there''s a catch—the first argument has to be the instance of the class. For
    this example, we''ll use an `AddOperation` class that implements simple addition
    between two numbers:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`bind`函数允许我们对类方法进行部分应用，但有一个问题——第一个参数必须是类的实例。例如，我们将使用一个实现两个数字之间简单相加的`AddOperation`类来进行示例：'
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can create a new function, `add`, by binding an instance of the `AddOperation`
    class to the function:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过将`AddOperation`类的实例绑定到函数来创建一个新函数`add`：
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'More interestingly, and closer to the concept of partial application, we can
    forward the instance parameter from the caller:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 更有趣的是，更接近部分应用的概念，我们可以从调用者那里转发实例参数：
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The binding is possible as well if the method receives arguments. For example,
    let''s say we have another class implementing `AddToOperation`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果方法接收参数，那么绑定也是可能的。例如，假设我们有另一个实现`AddToOperation`的类：
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We can do a partial application of `addTo` with just an instance of the class,
    as shown in the following code:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用类的实例对`addTo`进行部分应用，如下面的代码所示：
- en: '[PRE13]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The partial application of the class methods shows that it's quite easy to move
    between the functional and the OOP world. We'll see in the next chapters how we
    can take advantage of this. Until then, let's rejoice in the fact that we now
    know what partial application is and how to use it in C++. It's time to talk about
    its close cousin, currying.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 类方法的部分应用表明，在函数式和面向对象编程之间进行转换是相当容易的。我们将在接下来的章节中看到如何利用这一点。在那之前，让我们为我们现在知道的部分应用和如何在C++中使用它而感到高兴。现在是时候谈谈它的近亲柯里化了。
- en: Currying
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 柯里化
- en: Let's try for a moment to name a few famous people from software development,
    without searching the internet. There's Alan Turing, Ada Lovelace (she has a fascinating
    story), Grace Hopper, Donald Knuth, Bjarne Stroustroup, Grady Booch, and probably
    many others. How many of them have given their name to not one, but two things
    that you hear about constantly in the industry? That's true for Alan Turing, definitely,
    with the Turing machine and the Turing test, but not so for many others.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试着想一想软件开发中的一些著名人物，不要在互联网上搜索。有Alan Turing，Ada Lovelace（她有一个迷人的故事），Grace Hopper，Donald
    Knuth，Bjarne Stroustroup，Grady Booch，可能还有其他许多人。他们中有多少人的名字不仅出现在行业中，而且还出现在两个你经常听到的事物中？对于Alan
    Turing来说，这是肯定的，他有图灵机和图灵测试，但对于其他许多人来说并非如此。
- en: It's therefore surprising to learn that both the name of the Haskell programming
    language and the name of the currying operation come from the same person—Haskell
    Curry. Haskell Curry was an American mathematician and logician. He worked on
    something called **combinatory logic**, which is the basis of part of functional
    programming.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，令人惊讶的是，Haskell编程语言的名称和柯里化操作的名称都来自同一个人——Haskell Curry。Haskell Curry是一位美国数学家和逻辑学家。他研究了一种叫做**组合逻辑**的东西，这是函数式编程的一部分基础。
- en: But what is currying? And how does it connect to partial application?
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 但是什么是柯里化？它与部分应用有什么关系？
- en: What is currying?
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是柯里化？
- en: '**Currying** is a process of decomposing functions with *N* arguments into
    *N* functions with one argument. We can do this through variable capture or through
    partial application.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**柯里化**是将具有*N*个参数的函数分解为具有一个参数的*N*个函数的过程。我们可以通过变量捕获或部分应用来实现这一点。'
- en: 'Let''s take our `add` lambda again:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次看看我们的`add` lambda：
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'How can we decompose it? The key is that a lambda is just a normal value, which
    means we can return it from a function. We can therefore pass in the first parameter
    and return a lambda that captures the first parameter and uses both first and
    second arguments. It''s easier to understand in code than in words, so here it
    is:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何分解它？关键在于lambda只是一个普通值，这意味着我们可以从函数中返回它。因此，我们可以传入第一个参数并返回一个捕获第一个参数并使用第一个和第二个参数的lambda。在代码中比在文字中更容易理解，所以这里是：
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Let''s unpack what happens:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来解开发生了什么：
- en: Our `curryAdd` lambda returns a lambda.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的`curryAdd` lambda返回一个lambda。
- en: The returned lambda captures the first parameter, takes a second argument, and
    returns their sum.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回的lambda捕获第一个参数，接受第二个参数，并返回它们的和。
- en: That's why, when calling it, we need to use double parentheses.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么在调用它时，我们需要使用双括号。
- en: But this looks familiar, as if it has something to do with partial application.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 但这看起来很熟悉，好像与偏函数应用有关。
- en: Currying and partial application
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 柯里化和偏函数应用
- en: 'Let''s look again at how we did partial application previously. We created
    an `increment` function through partial application of the `add` function:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次看看我们之前是如何进行偏函数应用的。我们通过对`add`函数进行偏函数应用创建了一个`increment`函数：
- en: '[PRE16]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'However, let''s curry our `add` function:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，让我们对我们的`add`函数进行柯里化：
- en: '[PRE17]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Then, `increment` is very easy to write. Can you see how?
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，`increment`非常容易编写。你能看到吗？
- en: 'The `increment` lambda is just `curryAdd(1)`, as shown in the following code:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`increment` lambda只是`curryAdd(1)`，如下面的代码所示：'
- en: '[PRE18]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This shows us a trick that''s commonly used by functional programming languages—the
    functions can be curried by default. In such a language, writing the following
    means that we apply the `add` function first to the `first` argument, and then
    the resulting function to the `second` argument:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这向我们展示了函数式编程语言常用的一个技巧——函数可以默认进行柯里化。在这样的语言中，编写以下内容意味着我们首先将`add`函数应用于`first`参数，然后将结果函数应用于`second`参数：
- en: '[PRE19]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'It looks as if we are calling the function with a parameter list; in reality,
    it''s a partially applied curried function. In such a language, the `increment`
    function can be derived from `add` simply by writing the following:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来好像我们正在使用参数列表调用函数；实际上，这是一个部分应用的柯里化函数。在这样的语言中，`increment`函数可以通过简单地编写以下内容从`add`函数派生出来：
- en: '[PRE20]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The reverse is also true. Since C++ doesn''t do currying by default, but offers
    an easy method for partial application, we can implement currying through partial
    application. Instead of returning the complex lambda with value capture, just
    bind to the single value and forward the single parameter of the resulting function:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 反之亦然。由于C++默认情况下不进行柯里化，但提供了一种简单的偏函数应用方法，我们可以通过偏函数应用来实现柯里化。不要返回带有值捕获的复杂lambda，只需绑定到单个值并转发结果函数的单个参数：
- en: '[PRE21]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: But how far can we take this? Is it easy to curry functions with multiple arguments?
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们能走多远呢？对带有多个参数的函数进行柯里化容易吗？
- en: Currying functions with multiple arguments
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对具有多个参数的函数进行柯里化
- en: 'We have seen, in the previous section, how to curry functions with two arguments.
    When we move to three arguments, the curried function grows as well. We now need
    to return a lambda that returns a lambda. Once again, the code is easier to understand
    than any explanation, so let''s see it:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我们已经看到了如何对带有两个参数的函数进行柯里化。当我们转向三个参数时，柯里化函数也会增长。现在我们需要返回一个返回lambda的lambda。再次，代码比任何解释都更容易理解，所以让我们来看看：
- en: '[PRE22]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: There seems to be a recursive structure going on there. Maybe by using `bind`
    we can make sense of it?
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 似乎有一个递归结构在那里。也许通过使用`bind`我们可以理解它？
- en: 'It turns out it''s not that simple, but it is possible. What I would like to
    write is something like this:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 原因是它并不那么简单，但是确实是可能的。我想写的是这样的：
- en: '[PRE23]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'However, `addThree` has three arguments, so we''d need to bind them to something.
    The next `bind` results in a function with two arguments, and again, we need to
    bind them to something. So, it would actually look like this:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，`addThree`有三个参数，所以我们需要将它们绑定到某些东西。下一个`bind`会导致一个具有两个参数的函数，再次，我们需要将它们绑定到某些东西。因此，实际上看起来是这样的：
- en: '[PRE24]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The question marks should be replaced with the previously bound values, but
    that doesn't work with our current syntax.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 问号应该被之前绑定的值替换，但这在我们当前的语法中不起作用。
- en: 'However, there''s a workaround. Let''s implement multiple `simpleCurryN` functions
    that use `bind` on functions with *N* arguments and reduce them to *N-1*. For
    a function with one argument, the result is simply the following function:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有一个变通方法。让我们实现多个使用`bind`在具有*N*个参数的函数上的`simpleCurryN`函数，并将它们减少到*N-1*。对于一个参数的函数，结果就是以下函数：
- en: '[PRE25]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'For two arguments, we bind the first and forward the next:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 对于两个参数，我们绑定第一个参数并转发下一个：
- en: '[PRE26]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Similar operations apply for three and four arguments:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 类似的操作也适用于三个和四个参数：
- en: '[PRE27]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This set of `simpleCurryN` functions allow us to write our `curryN` functions
    that take one function with *N* arguments and return its curried form:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这组`simpleCurryN`函数允许我们编写我们的`curryN`函数，它接受一个具有*N*个参数的函数并返回其柯里化形式：
- en: '[PRE28]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Let''s test them on `add` lambdas with two, three, and four arguments, as shown
    in the following code:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在具有两个、三个和四个参数的`add` lambda上进行测试，如下面的代码所示：
- en: '[PRE29]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: It's likely that we can rewrite these functions with some imaginative use of
    templates. I will leave this exercise to the reader.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 很可能我们可以通过巧妙地使用模板来重写这些函数。我将把这个练习留给读者。
- en: For now, it's important to see how partial application connects with currying.
    In programming languages that curry functions by default, partial application
    is very easy—just call the function with fewer arguments. For other programming
    languages, we can implement currying through partial application.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，重要的是要看到偏函数应用如何与柯里化相连接。在默认情况下对函数进行柯里化的编程语言中，偏函数应用非常容易——只需使用更少的参数调用函数。对于其他编程语言，我们可以通过偏函数应用来实现柯里化。
- en: These concepts are very interesting, but you're probably wondering if they are
    useful in practice. Let's have a look at how to remove duplication using these
    techniques.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这些概念非常有趣，但你可能想知道它们在实践中是否有用。让我们看看如何使用这些技术来消除重复。
- en: Removing duplication using partial application and currying
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用部分应用和柯里化来消除重复
- en: Programmers have long looked for solutions to write less code that does more
    things. Functional programming proposes one solution—build functions by deriving
    from other functions.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员长期以来一直在寻找写更少的代码做更多事情的解决方案。函数式编程提出了一个解决方案——通过从其他函数派生函数来构建函数。
- en: 'We''ve already seen this in action in the previous examples. Since `increment`
    is a particular case of addition, we can derive it from our addition function:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在之前的例子中看到了这一点。由于`increment`是加法的一个特殊情况，我们可以从我们的加法函数中派生它：
- en: '[PRE30]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: How does this help us? Well, imagine your customer comes in one day and tells
    you *we want to use another type of addition.* Imagine having to search for `+`
    and `++` everywhere in your code and figuring out ways to implement the new behavior.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这对我们有什么帮助？嗯，想象一下，你的客户某天走进来告诉你*我们想使用另一种加法类型*。想象一下，你不得不在你的代码中到处搜索`+`和`++`，并找出实现新行为的方法。
- en: 'Instead, with our `add` and `increment` functions, and a bit of template magic,
    this is what we can do:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，使用我们的`add`和`increment`函数，再加上一点模板魔法，我们可以做到这一点：
- en: '[PRE31]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Our `add` method doesn't care what type it gets, as long as it has a plus operator.
    Our `increment` function doesn't care what type it uses and how `add` works, just
    that you provide a value for one. And we've done this within three lines of code.
    I rarely say this about code, but isn't it beautiful?
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`add`方法不关心它得到什么类型，只要它有一个加法运算符。我们的`increment`函数不关心它使用什么类型和`add`是如何工作的，只要你为其中一个提供一个值。而我们只用了三行代码就实现了这一点。我很少这样说代码，但这不是很美吗？
- en: 'Sure, you might say, but our clients don''t really want to change the way we
    add things. You would be surprised how much you can do with a few simple operators.
    Let me give you just a simple example. Implement a game in which a character moves
    on a line that wraps, as shown in the following screenshot:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可能会说，但我们的客户并不真的想改变我们添加事物的方式。你会惊讶于用一些简单的运算符可以做多少事情。让我给你举一个简单的例子。实现一个角色在一个循环移动的线上的游戏，如下面的截图所示：
- en: '![](img/8e9654cf-b698-47a3-a965-8bc798779a06.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8e9654cf-b698-47a3-a965-8bc798779a06.png)'
- en: 'Isn''t this just a modified version of addition? Let''s have a look:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这不就是加法的修改版本吗？让我们来看看：
- en: '[PRE32]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Hmm, this code looks very similar with `add`. Maybe we can use partial application?
    Let''s see how:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，这段代码看起来与`add`非常相似。也许我们可以使用部分应用？让我们看看：
- en: '[PRE33]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Our `increment` function is exactly the same as before, while our `add` function
    has become a partial application of `addWrapped`. It's worth noting that, to make
    the code cleaner, I would still change the function names to make it very clear
    what the functions are doing. However, the main point is that partial application
    and currying help us to remove certain types of duplication from our code, empowering
    us to open the code to implementations we didn't necessarily know about when designing
    the initial solution. And while we can do this with OOP or templates, the functional
    solution limits complexity by removing side effects and requires just a few lines
    of code. That makes it a worthy choice when designing a program.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`increment`函数与以前完全相同，而我们的`add`函数已经成为了`addWrapped`的部分应用。值得注意的是，为了使代码更清晰，我仍然会更改函数名称，以便非常清楚地了解函数的功能。然而，主要的观点是，部分应用和柯里化帮助我们从代码中删除某些类型的重复，使我们能够打开代码以实现我们在设计初始解决方案时并不一定知道的实现。虽然我们也可以使用面向对象编程或模板来实现这一点，但函数式解决方案通过消除副作用来限制复杂性，只需要几行代码。这使得在设计程序时成为一个值得选择。
- en: Summary
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Look how far we've gone in our understanding of functional programming! We learned
    about all of the building blocks—pure functions and lambdas—and about the operations
    we can use on them—currying, partial application, and functional composition.
    We also saw how the operations relate to one another and how we can use currying
    to implement partial application and vice versa. We also saw ways to implement
    currying in C++.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 看看我们在理解函数式编程方面取得了多大的进步！我们学习了所有的构建模块——纯函数和lambda——以及我们可以在它们上面使用的操作——柯里化、部分应用和函数组合。我们还看到了这些操作是如何相互关联的，以及我们如何使用柯里化来实现部分应用，反之亦然。我们还看到了在C++中实现柯里化的方法。
- en: But our quest is just beginning. The next stop is—starting to use these constructs
    in more interesting contexts. It's time to tackle the difficult question—how exactly
    do we design with functions?
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们的探索才刚刚开始。下一站是——开始在更有趣的上下文中使用这些构造。现在是时候解决一个困难的问题了——我们到底如何使用函数进行设计？
- en: Questions
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is a partial function application?
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是部分函数应用？
- en: What is currying?
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是柯里化？
- en: How does currying help us to implement partial application?
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 柯里化如何帮助我们实现部分应用？
- en: How can we implement partial application in C++?
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何在C++中实现部分应用？
