- en: Chapter 2. App Development with Code::Blocks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。使用Code::Blocks进行应用程序开发
- en: In this chapter, we'll learn C++ app development with Code::Blocks. We'll begin
    with a simple Hello World app. Subsequently concept of project and workspace will
    be introduced.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习使用Code::Blocks进行C++应用程序开发。我们将从一个简单的Hello World应用程序开始。随后将介绍项目和工作空间的概念。
- en: Creating your first app with Code::Blocks
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Code::Blocks创建你的第一个应用程序
- en: 'Let''s write a simple Hello World app, which essentially prints out "Hello
    World" to console. Launch Code::Blocks to begin and as shown in the following
    screenshot click on the new button in main toolbar and then click on the **File**
    menu option. The following screenshot represents the same:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写一个简单的Hello World应用程序，它基本上会在控制台上打印出“Hello World”。启动Code::Blocks并如下屏幕截图所示，单击主工具栏中的新按钮，然后单击**文件**菜单选项。以下屏幕截图表示相同的内容：
- en: '![Creating your first app with Code::Blocks](img/3415_02_01.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![使用Code::Blocks创建你的第一个应用程序](img/3415_02_01.jpg)'
- en: Click on the **C/C++ source** option in the next window and then on the **Go**
    button. A wizard will be presented. Click on the **Next** button on the first
    page of the wizard. Choose the **C++** option and click on the **Next** button.
    Choose file path and name in the next window and click on the **Finish** button
    to complete wizard.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个窗口中单击**C/C++源文件**选项，然后单击**Go**按钮。将会出现一个向导。在向导的第一页上单击**下一步**按钮。在下一个窗口中选择**C++**选项，然后单击**下一步**按钮。在下一个窗口中选择文件路径和名称，然后单击**完成**按钮以完成向导。
- en: 'Then type the following code in the editor:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在编辑器中输入以下代码：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Code::Blocks will automatically add an empty line at the end of the file if
    there isn't any, this is a Code::Blocks feature. GCC expects an empty line at
    the end of source code, and it will throw warning if an empty line is missing.
    Thus you may notice an empty line is being added automatically by Code::Blocks.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文件末尾没有空行，Code::Blocks会自动添加一个空行，这是Code::Blocks的特性。GCC期望源代码末尾有一个空行，如果缺少空行，它会发出警告。因此，你可能会注意到Code::Blocks会自动添加一个空行。
- en: After the code is typed in the editor window Code::Blocks will look similar
    to the following screenshot.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在编辑器窗口中输入代码后，Code::Blocks将看起来类似于以下屏幕截图。
- en: '![Creating your first app with Code::Blocks](img/3415_02_02.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![使用Code::Blocks创建你的第一个应用程序](img/3415_02_02.jpg)'
- en: Now click on the save button in main toolbar to save this file (navigate to
    **File** | **Save** from the dropdown menu bar). Alternatively *Ctrl* + *S* key
    combination can be used to save a file. We can see that Code::Blocks has applied
    syntax highlighting to the code and it has made the code more readable.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在单击主工具栏中的保存按钮以保存此文件（转到**文件** | **保存**）。或者可以使用*Ctrl* + *S*组合键来保存文件。我们可以看到Code::Blocks已经对代码应用了语法高亮，并且使代码更易读。
- en: 'Now click on the build button in the Compiler toolbar or hit *Ctrl* + *F9*
    key combination to compile it. If everything goes well Code::Blocks will look
    similar to the previous screenshot. Now click on the run button in Compiler toolbar.
    Code::Blocks will now run the program. As seen in the following screenshot our
    first program has run successfully:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在单击编译器工具栏中的构建按钮，或者按下*Ctrl* + *F9*组合键进行编译。如果一切顺利，Code::Blocks将看起来类似于之前的屏幕截图。现在单击编译器工具栏中的运行按钮。Code::Blocks现在将运行程序。如下屏幕截图所示，我们的第一个程序已经成功运行：
- en: '![Creating your first app with Code::Blocks](img/3415_02_03.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![使用Code::Blocks创建你的第一个应用程序](img/3415_02_03.jpg)'
- en: The previous screenshot shows that the program execution has been completed
    and it is waiting for user input to close the window. This is a Code::Blocks feature
    which stops after the execution is completed in order to allow the users to study
    program output.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个屏幕截图显示程序执行已经完成，并且正在等待用户输入以关闭窗口。这是Code::Blocks的一个特性，它在执行完成后停止，以允许用户研究程序输出。
- en: Our first assignment is successful. However, this approach has several drawbacks.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个任务已经成功。然而，这种方法有几个缺点。
- en: Code::Blocks applies global compiler/linker flags during compilation of individual
    files
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在编译单个文件时，Code::Blocks会应用全局编译器/链接器标志。
- en: Code::Blocks behaves purely as a text editor (imagine Notepad) and most features
    can't be used to compile individual files.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Code::Blocks纯粹作为文本编辑器（想象记事本）使用，大多数功能无法用于编译单个文件。
- en: Also management of large projects comprising of individual files is cumbersome.
    So the concept of **Project** has evolved. In the next section we'll learn more
    about projects in Code::Blocks.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，管理由单独文件组成的大型项目是繁琐的。因此，**项目**的概念已经发展。在下一节中，我们将更多地了解Code::Blocks中的项目。
- en: Project in Code::Blocks
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Code::Blocks中的项目
- en: The project is an important concept in Code::Blocks. A project can be described
    as a collection of source files and build targets.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 项目是Code::Blocks中的一个重要概念。项目可以被描述为一组源文件和构建目标。
- en: '![Project in Code::Blocks](img/3415_02_27.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![Code::Blocks中的项目](img/3415_02_27.jpg)'
- en: A build target can be defined as a label or a tag for each source file, which
    contains separate set of build (compiler, linker and resource compiler) options.
    Each build target contains a set of build options and during compilation of a
    project Code::Blocks selects currently active target. All files of that target
    is then compiled using that build target's build options.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 构建目标可以被定义为每个源文件的标签或标记，其中包含单独的构建（编译器、链接器和资源编译器）选项。每个构建目标包含一组构建选项，在项目编译时，Code::Blocks会选择当前活动的目标。然后使用该构建目标的构建选项编译该目标的所有文件。
- en: '![Project in Code::Blocks](img/3415_02_28.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![Code::Blocks中的项目](img/3415_02_28.jpg)'
- en: A project requires a minimum of one target and one source file to compile. A
    source file may be part of all or none of the targets. Build targets can be dependent
    upon other targets, which in turn helps to maintain a relationship between different
    source files. We'll explain a bit more on importance of build targets in the next
    section.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一个项目需要至少一个目标和一个源文件来进行编译。源文件可以是所有目标的一部分，也可以是没有目标的一部分。构建目标可以依赖于其他目标，这有助于维护不同源文件之间的关系。我们将在下一节中更详细地解释构建目标的重要性。
- en: 'But before doing that let''s create a project and develop an app. Perform the
    following steps for the same:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 但在此之前，让我们创建一个项目并开发一个应用程序。执行以下步骤：
- en: Click on the new button in the main toolbar, then click on the **Project** menu
    option. A wizard will be presented, as shown in the following screenshot. Now
    select **Console application** and click on the **Go** button:![Project in Code::Blocks](img/3415_02_04.jpg)
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击主工具栏上的新按钮，然后单击**项目**菜单选项。将显示向导，如下截图所示。现在选择**控制台应用程序**，然后单击**Go**按钮：![Code::Blocks中的项目](img/3415_02_04.jpg)
- en: Click on the **Next** button on the first page of the wizard. Then choose **C++**
    and click on the **Next** button as shown in the following screenshot:![Project
    in Code::Blocks](img/3415_02_05.jpg)
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在向导的第一页上单击**下一步**按钮。然后选择**C++**，并单击**下一步**按钮，如下截图所示：![Code::Blocks中的项目](img/3415_02_05.jpg)
- en: As shown in the following screenshot enter **Project title** (app name) as `App1`
    and choose a folder to create `App1` project. Now, click on the **Next** button
    to continue.![Project in Code::Blocks](img/3415_02_06.jpg)
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如下截图所示，输入**项目标题**（应用程序名称）为`App1`，并选择一个文件夹来创建`App1`项目。现在，单击**下一步**按钮继续。![Code::Blocks中的项目](img/3415_02_06.jpg)
- en: Click on the **Finish** button in the **Console application** window as shown
    in the following screenshot and the project will be generated with a default code:![Project
    in Code::Blocks](img/3415_02_07.jpg)
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**完成**按钮，如下截图所示，**控制台应用程序**窗口将生成默认代码：![Code::Blocks中的项目](img/3415_02_07.jpg)
- en: The following screenshot shows the **Management** window that has been populated
    with the newly created project files. Double-click on the `main.cpp` item on the
    tree to open the Code::Blocks editor.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了已填充新创建项目文件的**管理**窗口。双击树上的`main.cpp`项目以打开Code::Blocks编辑器。
- en: '![Project in Code::Blocks](img/3415_02_08.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![Code::Blocks中的项目](img/3415_02_08.jpg)'
- en: 'Let''s replace the default code with the following code:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用以下代码替换默认代码：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We have replaced earlier `HelloWorld` code with a code using **Object Oriented
    Programming** (**OOP**) concepts of C++. We have used C++ classes to achieve the
    same goal of printing "Hello World!" text.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用C++类替换了之前的`HelloWorld`代码，以实现打印“Hello World!”文本的相同目标。
- en: C++ classes are specific data types that can be defined as a collection of data
    structure and member functions that operate on these data structures. All member
    functions and base classes are `private` by default. Classes can contain overloaded
    operator which allows customized operations associated with a particular class.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: C++类是特定的数据类型，可以定义为一组数据结构和操作这些数据结构的成员函数的集合。所有成员函数和基类默认为`private`。类可以包含重载运算符，允许与特定类相关的自定义操作。
- en: Classes can also be defined with a `struct` keyword. However, all members, that
    is, functions and base classes are `public` by default if a class is defined with
    a `struct` keyword.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 类也可以使用`struct`关键字定义。但是，如果使用`struct`关键字定义类，则所有成员，即函数和基类，默认为`public`。
- en: Let's analyze our code. We have defined a class named `HelloWorld`. We have
    also defined a `constructor` function `HelloWorld()` and a `destructor` function
    `~HelloWorld()`. We have a publicly accessible function named `Print()` to print
    out `"Hello World!"` text. In the `main()` function we created an object named
    `hello` of class `HelloWorld` and then we have used it to call `Print()` function.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析我们的代码。我们定义了一个名为`HelloWorld`的类。我们还定义了一个`构造函数`函数`HelloWorld()`和一个`析构函数`函数`~HelloWorld()`。我们有一个名为`Print()`的公共可访问函数，用于打印出“Hello
    World!”文本。在`main()`函数中，我们创建了一个名为`hello`的`HelloWorld`类的对象，然后我们用它来调用`Print()`函数。
- en: Hit *F9* key to build and then run this project. A console window will pop up
    displaying "Hello World!" text.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 按下*F9*键构建并运行此项目。一个控制台窗口将弹出显示“Hello World!”文本。
- en: Project with multiple files
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多文件项目
- en: In this section we'll learn about C++ app development comprising of multiple
    files. We'll develop a class, called `Vector`, which implements a dynamic array.
    This class is similar to the `std::vector` class offered by **Standard Template
    Library** (**STL**) and has a very limited set of features compared to STL class.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习由多个文件组成的C++应用程序开发。我们将开发一个名为`Vector`的类，它实现了一个动态数组。这个类类似于**标准模板库**（**STL**）提供的`std::vector`类，并且与STL类相比具有非常有限的功能集。
- en: 'Create a new project and name it `App2`. Navigate to **File** | **New** | **File…**
    menu option and then choose **C/C++ header** option and follow the wizard to add
    a new file to `App2` project. Add the following code in a new file under `App2`
    and name it `vector.h` file:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新项目并命名为`App2`。转到**文件** | **新建** | **文件…**菜单选项，然后选择**C/C++头文件**选项，并按照向导将新文件添加到`App2`项目中。在`App2`下的新文件中添加以下代码，并将其命名为`vector.h`文件：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Header file `vector.h` declares the `Vector` class structure. We have a pre-processor
    macro `DATA_TYPE` that defines the data type that this class holds. We have a
    constructor (with a default parameter) and a destructor function. These functions
    will allocate and de-allocate a pointer `m_data` that holds array of elements.
    A member variable `m_size` will be used to hold size of array that will assist
    us in bound-checking.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 头文件`vector.h`声明了`Vector`类结构。我们有一个预处理器宏`DATA_TYPE`，定义了这个类所持有的数据类型。我们有一个构造函数（带有默认参数）和一个析构函数。这些函数将分配和释放一个指向元素数组的指针`m_data`。一个成员变量`m_size`将用于保存数组的大小，这将帮助我们进行边界检查。
- en: There are several member functions that operate on the member variables. The
    `GetCount()` function returns number array size, `Set()` function assigns a value
    to an element in array. An operator `[]` has been overloaded to access array data.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个成员函数操作成员变量。`GetCount()`函数返回数组大小，`Set()`函数为数组中的元素赋值。运算符`[]`已被重载以访问数组数据。
- en: 'The `Vector` class has been implemented in the `vector.cpp` file. Create and
    add this new file to `App2` project and then copy the following code to it:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`Vector`类已在`vector.cpp`文件中实现。创建并将此新文件添加到`App2`项目中，然后将以下代码复制到其中：'
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Tip
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[http://www.packtpub.com](http://www.packtpub.com)的帐户中下载您购买的所有Packt图书的示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，直接将文件发送到您的邮箱。
- en: The line `m_size(size)` defines an initializer list. where member variables
    are initialized as per the order they have been declared. We have used new operator
    to allocate an array of size given by user. The `memset()` function initializes
    that array with zeroes. In destructor internal array is checked for null pointer
    and then de-allocated with `delete []` keyword and assigned a null pointer.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`m_size(size)`这一行定义了一个初始化列表，其中成员变量按照它们被声明的顺序进行初始化。我们使用new运算符来分配一个由用户给定大小的数组。`memset()`函数用零初始化该数组。在析构函数中，内部数组被检查是否为空指针，然后用`delete
    []`关键字进行解除分配，并分配一个空指针。'
- en: Note
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Null pointers have a value (typically `0`) that is reserved to indicate that
    it doesn't point to any valid object. Any operation on null pointers will lead
    to a segmentation fault or access violation. In such a case, app will die instantly.
    C++ 11 defines a separate `nullptr` constant to define a null pointer.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 空指针具有一个值（通常为`0`），用于指示它不指向任何有效对象。对空指针的任何操作都将导致分段错误或访问违例。在这种情况下，应用程序将立即崩溃。C++
    11定义了一个单独的`nullptr`常量来定义空指针。
- en: There are two member functions, `Set()` and `GetCount()` that operate on the
    internal array.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个成员函数`Set()`和`GetCount()`，它们操作内部数组。
- en: 'Finally, replace code inside the `main.cpp` file with the following code. It
    creates an object of `Vector` class and subsequently uses it:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，用以下代码替换`main.cpp`文件中的代码。它创建了一个`Vector`类的对象，并随后使用它：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, the **Management** window will look similar to the following screenshot:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，**管理**窗口将类似于以下截图：
- en: '![Project with multiple files](img/3415_02_09.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![具有多个文件的项目](img/3415_02_09.jpg)'
- en: 'We''ll define a pre-processor define to ensure that the **Vector** class is
    compiled as an array of integers. Navigate to **Project** | **Build options…**
    menu option and the **Project build options** window will be presented:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将定义一个预处理器定义，以确保**Vector**类被编译为整数数组。导航到**项目** | **构建选项...**菜单选项，将呈现**项目构建选项**窗口：
- en: '![Project with multiple files](img/3415_02_10.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![具有多个文件的项目](img/3415_02_10.jpg)'
- en: 'As we intend to apply the settings throughout the project click on the root
    of the project tree in that window. Now, click on the **Compiler settings** |
    **#defines** tab and add the line as per the preceding screenshot. Further, click
    on the **OK** button to close that dialog box. Now compile and run this project.
    This will produce result as per the following screenshot:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们打算在整个项目中应用这些设置，因此在该窗口中单击项目树的根。现在，单击**编译器设置** | **#defines**选项卡，并根据前面的截图添加该行。然后，单击**确定**按钮关闭该对话框。现在编译并运行此项目。这将产生以下截图中的结果：
- en: '![Project with multiple files](img/3415_02_11.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![具有多个文件的项目](img/3415_02_11.jpg)'
- en: In our code we have a pre-processor macro `DATA_TYPE` that defines the data
    type that this class holds. If we intend to use it as an array of `double` we
    have to recompile this app.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的代码中，我们有一个预处理宏`DATA_TYPE`，它定义了这个类所持有的数据类型。如果我们打算将其用作`double`数组，我们必须重新编译此应用程序。
- en: Do note that pre-processor macros work by simple text substitution and no type
    checking is performed on them during substitution. This can introduce other bugs
    in the program if it is used incorrectly.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，预处理宏通过简单的文本替换工作，替换过程中不执行任何类型检查。如果使用不正确，这可能会在程序中引入其他错误。
- en: In this section we learned about app development with multiple files, tweaking
    of compiler options.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了使用多个文件进行应用程序开发，调整编译器选项。
- en: Debug versus release target
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试与发布目标
- en: We noticed that in `App1` and `App2`, there are two build targets in each project—namely
    **debug** and **release**. In this section we'll learn more about it.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们注意到在`App1`和`App2`中，每个项目中有两个构建目标，即**debug**和**release**。在本节中，我们将更多地了解它。
- en: Code::Blocks defines two default build targets—debug and release at the time
    of a project creation.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Code::Blocks在项目创建时定义了两个默认构建目标——调试和发布。
- en: As the name suggests a debug target is suitable for app debugging. Appropriate
    compiler options are added to generate debugging symbols in the compiled app.
    It also disables all program optimizations.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 正如其名称所示，调试目标适用于应用程序调试。适当的编译器选项被添加以在编译后生成调试符号。它还禁用了所有程序优化。
- en: 'We can find in the following screenshot (navigate to **Project** | **Build
    options…** menu option) a **Debug** target has a compiler option **Produce debugging
    symbols**. This instructs compiler to generate debugging symbols, which allows
    app debugging:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在以下截图中找到（导航到**项目** | **构建选项...**菜单选项）**Debug**目标具有一个编译器选项**生成调试符号**。这指示编译器生成调试符号，从而允许应用程序调试：
- en: '![Debug versus release target](img/3415_02_13.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![调试与发布目标](img/3415_02_13.jpg)'
- en: A **Release** target disables generation of debugging symbols. It also defines
    appropriate compiler options to optimize the program. Thus this is suitable for
    code to be used in production. The following screenshot shows typical compiler
    flags in a release target.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 一个**发布**目标禁用了调试符号的生成。它还定义了适当的编译器选项来优化程序。因此，这适用于用于生产的代码。以下截图显示了发布目标中的典型编译器标志。
- en: '![Debug versus release target](img/3415_02_14.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![调试与发布目标](img/3415_02_14.jpg)'
- en: These two targets are quite important as it is difficult to debug a program
    that has been compiled with compiler optimization flags enabled. It is highly
    recommended that the program is compiled without optimization in debug target.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个目标非常重要，因为使用启用了编译器优化标志的程序进行调试是困难的。强烈建议在调试目标中编译程序时禁用所有优化。
- en: 'To understand this problem we''ll use the following code snippet, then compile
    and debug it. Note that we will use command-line tools to avoid abstraction of
    any error message by Code::Blocks UI:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解这个问题，我们将使用以下代码片段，然后编译和调试它。请注意，我们将使用命令行工具来避免Code::Blocks UI对任何错误消息的抽象：
- en: '[PRE5]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let''s now compile it in debug mode:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在以调试模式编译它：
- en: '[PRE6]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We''ll use GNU debugger `gdb` to debug and understand the flow of execution.
    Launch `gdb` and follow the steps:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用GNU调试器`gdb`来调试和理解执行流程。启动`gdb`并按照以下步骤操作：
- en: '[PRE7]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We asked `gdb` to load `app4.exe` in memory. Then we asked `gdb` to set two
    **breakpoints** by issuing command `b` and specifying the line number. We asked
    `gdb` to run the program. As instructed by breakpoints the execution is paused
    at each breakpoint. Subsequently the program completes without any error.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要求`gdb`将`app4.exe`加载到内存中。然后我们要求`gdb`设置两个**断点**，通过发出命令`b`并指定行号。我们要求`gdb`运行程序。根据断点的指示，执行在每个断点处暂停。随后，程序在没有任何错误的情况下完成。
- en: 'Let''s see what happens when we turn optimizations on. We''ll compile it as:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看在打开优化时会发生什么。我们将编译它为：
- en: '[PRE8]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now debug this app again following earlier steps:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在再次按照之前的步骤调试此应用程序：
- en: '[PRE9]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: It is evident from the preceding output that compiler has optimized our source
    code and made a number of changes to the code. The function `add()` seems to have
    been expanded inline. As a result breakpoint on line `return (a + b)` of `main.cpp`
    file is never hit during execution.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的输出可以看出，编译器优化了我们的源代码，并对代码进行了许多更改。函数`add()`似乎已经被内联扩展了。结果是，在执行过程中，`main.cpp`文件的`return
    (a + b)`行上的断点永远不会被触发。
- en: This is one of the side effects of optimization on debugging process. Code::Blocks
    creates two default targets to avoid similar situation. It is highly recommended
    that this is followed in project development.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这是优化对调试过程的一个副作用。Code::Blocks创建了两个默认目标，以避免类似情况。强烈建议在项目开发中遵循这一点。
- en: Project with external library
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带有外部库的项目
- en: In this section we'll develop an app with an external library. External libraries
    are used in almost every project written in any language. They allow code reuse
    resulting faster project cycle. We'll learn how to configure an external library
    with a Code::Blocks project.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将开发一个使用外部库的应用程序。外部库几乎在任何语言编写的项目中都会被使用。它们允许代码重用，从而加快项目周期。我们将学习如何在Code::Blocks项目中配置外部库。
- en: 'We have printed `Hello World!` text to console. How about printing text in
    color? We can use a library called `conio2` ([http://conio.sourceforge.net/](http://conio.sourceforge.net/))
    to print text in color and do other text manipulations. A compiled copy of `conio2`
    library is provided together with the book. Consider the following example code:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经将`Hello World!`文本打印到控制台。如何在彩色打印文本？我们可以使用一个名为`conio2`的库（[http://conio.sourceforge.net/](http://conio.sourceforge.net/)）来打印彩色文本并进行其他文本操作。书中提供了`conio2`库的编译副本。考虑以下示例代码：
- en: '[PRE10]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In this example we have included `conio2.h` file in second line. This will expose
    pre-defined functions in `conio2` library to our app. We have defined couple of
    variables namely `screenWidth`, `msg`, and `textInfo` inside `main()` function.
    We have then retrieved current console text settings using `gettextinfo()` function.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们在第二行包含了`conio2.h`文件。这将向我们的应用程序公开`conio2`库中的预定义函数。我们在`main()`函数内定义了几个变量，即`screenWidth`、`msg`和`textInfo`。然后，我们使用`gettextinfo()`函数检索了当前控制台文本设置。
- en: In the next line we have saved current screen width to `screenWidth` variable.
    Subsequently we have assigned `YELLOW` foreground color and `RED` background color.
    We have used the `cputsxy()` function to print desired text. We have then restored
    text colors in the subsequent two lines.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一行中，我们将当前屏幕宽度保存到`screenWidth`变量中。随后，我们分配了`YELLOW`前景色和`RED`背景色。我们使用`cputsxy()`函数打印所需的文本。然后我们在随后的两行中恢复了文本颜色。
- en: 'In order to set up external library navigate to **Projects** | **Build options…**
    menu option and click on the **Search directories** tab as shown in the following
    screenshot:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 为了设置外部库，导航到**项目** | **构建选项...**菜单选项，并点击**搜索目录**选项卡，如下面的屏幕截图所示：
- en: '![Project with external library](img/3415_02_23.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![带有外部库的项目](img/3415_02_23.jpg)'
- en: Add `conio2\include` path (relative to project path) as shown in the preceding
    screenshot. We can also use full path if `conio2` library is installed in another
    location. This will instruct compiler to also search this directory for any header
    files referred in the code.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 将`conio2\include`路径（相对于项目路径）添加到上一个屏幕截图中显示的位置。如果`conio2`库安装在其他位置，也可以使用完整路径。这将指示编译器在代码中引用的任何头文件中也搜索此目录。
- en: Next click on the **Linker** tab as shown in the following screenshot and add
    the `conio2\lib` relative path as per the following screenshot. This will instruct
    linker to also search static library in this path.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，点击**链接器**选项卡，如下面的屏幕截图所示，添加`conio2\lib`相对路径，如下面的屏幕截图所示。这将指示链接器在此路径中搜索静态库。
- en: '![Project with external library](img/3415_02_24.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![带有外部库的项目](img/3415_02_24.jpg)'
- en: 'Click on the **Linker settings** tab and add `libconio.a` as per the following
    screenshot:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**链接器设置**选项卡，并按照下面的屏幕截图添加`libconio.a`：
- en: '![Project with external library](img/3415_02_25.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![带有外部库的项目](img/3415_02_25.jpg)'
- en: 'After this step is completed our app is ready for compilation. Now compile
    and run it. We''ll see the following output:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这一步后，我们的应用程序已准备好进行编译。现在编译并运行它。我们将看到以下输出：
- en: '![Project with external library](img/3415_02_26.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![带有外部库的项目](img/3415_02_26.jpg)'
- en: Our app is now using an external C/C++ library. We can use other external libraries
    in a similar manner for our app development.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序现在正在使用外部C/C++库。我们可以以类似的方式使用其他外部库来开发我们的应用程序。
- en: Workspace
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作区
- en: Workspace in Code::Blocks is a collection of projects. Workspace acts as a container
    of projects and also maintains project dependencies. So if project 2 is dependent
    upon project 1, then project 2 will be compiled before compilation of project
    1.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在Code::Blocks中，工作区是项目的集合。工作区充当项目的容器，并且还维护项目之间的依赖关系。因此，如果项目2依赖于项目1，那么在编译项目1之前将编译项目2。
- en: Consider the following snippets. Create a static library project named `libcalc`
    by navigating to **File** | **New** | **Project…** and select **Static library**
    wizard.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下片段。通过导航到**文件** | **新建** | **项目...**并选择**静态库**向导来创建一个名为`libcalc`的静态库项目。
- en: 'Then replace code of project''s `main.c` file with the following code:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 然后用以下代码替换项目的`main.c`文件的代码：
- en: '[PRE11]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next create a console project named `App6` and then replace its `main.cpp`
    file with the following code:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来创建一个名为`App6`的控制台项目，然后用以下代码替换其`main.cpp`文件：
- en: '[PRE12]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The **Management** window now shows two projects in one workspace. Workspace
    has been renamed to `App6` in the following screenshot:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**管理**窗口现在显示了一个工作区中的两个项目。工作区在以下截图中已重命名为`App6`：'
- en: '![Workspace](img/3415_02_21.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![工作区](img/3415_02_21.jpg)'
- en: 'This workspace can be saved by navigating to **File** | **Save workspace as…**
    menu option. Right-click on the **App6** project in project tree and click on
    the Screenshot menu option. Next click on the **Project''s dependencies** button.
    The following window will be presented:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 通过导航到**文件** | **另存工作区为...**菜单选项来保存此工作区。右键单击项目树中的**App6**项目，然后单击屏幕截图菜单选项。接下来单击**项目的依赖项**按钮。将呈现以下窗口：
- en: '![Workspace](img/3415_02_22.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![工作区](img/3415_02_22.jpg)'
- en: Click on the **Close** button to close this window and then the **OK** button
    to close **Project/target options** window. Now `App6` is dependent upon `libcalc`
    project.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 单击**关闭**按钮关闭此窗口，然后单击**确定**按钮关闭**项目/目标选项**窗口。现在`App6`依赖于`libcalc`项目。
- en: Now navigate to **Project** | **Build options…** menu option and add `..\libcalc\libcalc.a`
    to **Link libraries** in **Linker settings** tab.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在导航到**项目** | **构建选项...**菜单选项，并在**链接器设置**选项卡的**链接库**中添加`..\libcalc\libcalc.a`。
- en: To compile these two projects navigate to the **Build** | **Build workspace**
    menu option. Code::Blocks will now build `App6` taking care of its dependent project.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要编译这两个项目，请导航到**构建** | **构建工作区**菜单选项。Code::Blocks现在将构建`App6`，并处理其依赖项目。
- en: It is now quite clear that we can use workspace to manage sub-projects in a
    large project.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在很明显，我们可以使用工作区来管理大型项目中的子项目。
- en: Summary
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we have learned to create project in Code::Blocks. We understood
    the importance of build targets. We also learned to use external libraries in
    our project. Finally, we learned to create and use a workspace.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学会了在Code::Blocks中创建项目。我们了解了构建目标的重要性。我们还学会了在我们的项目中使用外部库。最后，我们学会了创建和使用工作区。
- en: With this we conclude our introduction to projects in Code::Blocks. We'll discuss
    debugging in the next chapter.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个，我们结束了对Code::Blocks中项目的介绍。我们将在下一章讨论调试。
