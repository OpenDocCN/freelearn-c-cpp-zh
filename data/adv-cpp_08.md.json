["```cpp\n    #include<iostream>\n    #include<cassert>\n    #include<cstring>\n    using std::cout;\n    using std::endl;\n    ```", "```cpp\n    bool checkValidIp(const char * ip){\n    \u00a0\u00a0\u00a0\u00a0assert(ip != NULL);\n    \u00a0\u00a0\u00a0\u00a0assert(strlen(ip) < 16);\n    \u00a0\u00a0\u00a0\u00a0cout << \"strlen: \" << strlen(ip) << endl;\n    \u00a0\u00a0\u00a0\u00a0return true;\n    }\n    ```", "```cpp\n    int main(){\n    \u00a0\u00a0\u00a0\u00a0const char * ip;\n    \u00a0\u00a0\u00a0\u00a0ip = NULL;\n    \u00a0\u00a0\u00a0\u00a0bool check = checkValidIp(ip);\n    \u00a0\u00a0\u00a0\u00a0cout << \" IP address is validated as :\" << (check ? \"true\" : \"false\") << endl;\n    \u00a0\u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```cpp\n    g++ AssertSample.cpp\n    ```", "```cpp\n    ./a.out\n    ```", "```cpp\n    ip = \"111.111.111.11111\";\n    ```", "```cpp\n    ip = \"111.111.111.111\"; \n    ```", "```cpp\n    ip = \"111.111.111.11111\";\n    ```", "```cpp\n    g++ -DNDEBUG AssertSample.cpp\n    ```", "```cpp\n    rm PersonLibrary.h \n    ln -s PersonLibrary_ver2.h PersonLibrary.h\n    g++ StaticAssertionSample.cpp\n    ```", "```cpp\n    #include<iostream>\n    #include<cstring>\n    using std::cout;\n    using std::endl; \n    ```", "```cpp\n    bool checkValidIp(const char * ip){\n    \u00a0\u00a0\u00a0\u00a0try{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(ip == NULL)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw (\"ip is NULL\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(strlen(ip) > 15)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw int(strlen(ip));\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0catch(const char * str){\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \"Error in checkValidIp :\"<< str << endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return false;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0catch(int len){\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \"Error in checkValidIp, ip len:\" << len <<\" greater than 15 characters, condition fail\" << endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return false;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0cout << \"strlen: \" << strlen(ip) << endl;\n    \u00a0\u00a0\u00a0\u00a0return true;\n    }\n    ```", "```cpp\n    int main(){\n    \u00a0\u00a0\u00a0\u00a0const char * ip;\n    \u00a0\u00a0\u00a0\u00a0ip = NULL;\n    \u00a0\u00a0\u00a0\u00a0if (checkValidIp(ip)) \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \"IP address is correctly validated\" << endl;\n    \u00a0\u00a0\u00a0\u00a0else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/// work on error condition \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// if needed exit program gracefully.\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return -1;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```cpp\n    ip = \"111.111.111.11111\";\n    ```", "```cpp\n    ip = \"111.111.111.111\";\n    ```", "```cpp\n    #include \"CheckIp.h\"\n    #include<string>\n    #include<sstream>\n    bool checkValidIp(const char * ip){\n    \u00a0\u00a0\u00a0\u00a0if(ip == NULL){\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \"Error : IP passes is NULL \" << endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return false;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0if(strlen(ip) > 15){\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \"Error: IP size is greater than 15\" << endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return false;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0cout << \"strlen: \" << strlen(ip) << endl;\n    \u00a0\u00a0\u00a0\u00a0return true;\n    } \n    ```", "```cpp\n    #include\"CheckIp.h\"\n    int main(){\n    \u00a0\u00a0\u00a0\u00a0const char * ip;\n    \u00a0\u00a0\u00a0\u00a0//ip = \"111.111.111.111\";\n    \u00a0\u00a0\u00a0\u00a0ip = \"111.111.111.11111\";\n    \u00a0\u00a0\u00a0\u00a0if (checkValidIp(ip)) \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \"IP address is correctly validated\" << endl;\n    \u00a0\u00a0\u00a0\u00a0else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/// work on error condition \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// if needed exit program gracefully.\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \" Got error in valid ip \" << endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return -1;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0return 0;\n    } \n    ```", "```cpp\n    #include\"CheckIp.h\"\n    #include<gtest/gtest.h>\n    using namespace std;\n    const char * testIp;\n    TEST(CheckIp, testNull){\n    \u00a0\u00a0\u00a0\u00a0testIp=NULL;\n    \u00a0\u00a0\u00a0\u00a0ASSERT_FALSE(checkValidIp(testIp));\n    }\n    TEST(CheckIp, BadLength){\n    \u00a0\u00a0\u00a0\u00a0testIp = \"232.13.1231.1321.123\";\n    \u00a0\u00a0\u00a0\u00a0ASSERT_FALSE(checkValidIp(testIp));\n    }\n    ```", "```cpp\n    g++ -c CheckIp.cpp\n    ```", "```cpp\n    g++ CheckIp.o TestCases.cpp -lgtest -lgtest_main -pthread -o TestRun \n    ```", "```cpp\n    ./TestRun\n    ```", "```cpp\n    if(ip[strlen(ip)-1] == '.'){\n    \u00a0\u00a0\u00a0\u00a0cout<<\"ERROR : Incorrect token at end\"<<endl;\n    \u00a0\u00a0\u00a0\u00a0return false;\n    }\n    isstringstream istrstr(ip);\n    vector<string> tokens;\n    string token;\n    regex expression(\"[^0-9]\");\n    smatch m;\n    while(getline(istrstr, token, '.')){\n    \u00a0\u00a0\u00a0\u00a0if(token.empty()){\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout<<\"ERROR : Got empty token\"<<endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return false;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0if(token.find(' ') != string::npos){\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout<<\"ERROR : Space character in token\"<<endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return false;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0if(regex_search(token,m,expression)){\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout<<\"ERROR : NonDigit character in token\"<<endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return false;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0int val = atoi(token.c_str());\n    \u00a0\u00a0\u00a0\u00a0if(val<0 || val>255){\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout<<\"ERROR : Invalid digit in token\"<<endl;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return false;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0tokens.push_back(token);\n    }\n    if(tokens.size()!=4){\n    \u00a0\u00a0\u00a0\u00a0cout<<\"ERROR : Incorrect IP tokens used\"<<endl;\n    \u00a0\u00a0\u00a0\u00a0return false;\n    }\n    cout<<\"strlen: \"<<strlen(ip)<<endl;\n    return true;\n    }\n    ```", "```cpp\n    ./TestRun\n    ```", "```cpp\n    #include<iostream>\n    #include<string>\n    #include<sstream>\n    #include<vector>\n    #include<iterator>\n    #include<regex>\n    using namespace std;\n    ```", "```cpp\n    class ConnectDatabase{\n    \u00a0\u00a0\u00a0\u00a0string DBname;\n    \u00a0\u00a0\u00a0\u00a0string user;\n    \u00a0\u00a0\u00a0\u00a0string passwd;\n    \u00a0\u00a0\u00a0\u00a0public:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ConnectDatabase() {} \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ConnectDatabase(string _dbname, string _uname, string _passwd) :\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DBname(_dbname), user(_uname), passwd(_passwd) { }\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0virtual ~ConnectDatabase() {} \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0virtual string getResult(string query);\n    };\n    ```", "```cpp\n    class WebServerConnect{\n    \u00a0\u00a0\u00a0\u00a0string Webserver;\n    \u00a0\u00a0\u00a0\u00a0string uname;\n    \u00a0\u00a0\u00a0\u00a0string passwd;\n    \u00a0\u00a0\u00a0\u00a0public :\n    \u00a0\u00a0\u00a0\u00a0WebServerConnect(string _sname, string _uname, string _passwd) :\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Webserver(_sname), uname(_uname), passwd(_passwd) { }\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0virtual ~WebServerConnect() {}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0virtual string getRequest(string req);\n    };\n    ```", "```cpp\n    class App {\n    \u00a0\u00a0\u00a0\u00a0ConnectDatabase *DB;\n    \u00a0\u00a0\u00a0\u00a0WebServerConnect *WB;\n    \u00a0\u00a0\u00a0\u00a0public : \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0App():DB(NULL), WB(NULL) {} \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0~App() { \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if ( DB )\u00a0\u00a0delete DB;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if ( WB )\u00a0\u00a0delete WB;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bool checkValidIp(string ip);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0string getDBResult(string query);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0string getWebResult(string query);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0void connectDB(string, string, string);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0void connectDB(ConnectDatabase *db);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0void connectWeb(string, string, string);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0void run();\n    };\n    ```", "```cpp\n    g++ Misc.cpp RunApp.cpp -o RunApp\n    ```", "```cpp\n    ./RunApp\n    ```", "```cpp\n    #include\"MockMisc.h\"\n    using ::testing::_;\n    using ::testing::Return;\n    class TestApp : public ::testing::Test {\n    \u00a0\u00a0\u00a0\u00a0protected : \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0App testApp;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0MockDB *mdb;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0void SetUp(){\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mdb = new MockDB();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0testApp.connectDB(mdb);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0void TearDown(){\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    };\n    TEST_F(TestApp, NullIP){\n    \u00a0\u00a0\u00a0\u00a0EXPECT_CALL(*mdb, getResult(_)).\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WillOnce(Return(\"\"));\n    \u00a0\u00a0\u00a0\u00a0ASSERT_FALSE(testApp.checkValidIp(testApp.getDBResult(\"\")));\n    }\n    TEST_F(TestApp, SpaceTokenIP){\n    \u00a0\u00a0\u00a0\u00a0EXPECT_CALL(*mdb, getResult(_)).\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WillOnce(Return(\"13\\. 21.31.68\"));\n    \u00a0\u00a0\u00a0\u00a0ASSERT_FALSE(testApp.checkValidIp(testApp.getDBResult(\"\")));\n    }\n    TEST_F(TestApp, NonValidDigitIP){\n    \u00a0\u00a0\u00a0\u00a0EXPECT_CALL(*mdb, getResult(_)).\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WillOnce(Return(\"13.521.31.68\"));\n    \u00a0\u00a0\u00a0\u00a0ASSERT_FALSE(testApp.checkValidIp(testApp.getDBResult(\"\")));\n    }\n    TEST_F(TestApp, CorrectIP){\n    \u00a0\u00a0\u00a0\u00a0EXPECT_CALL(*mdb, getResult(_)).\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WillOnce(Return(\"212.121.21.45\"));\n    \u00a0\u00a0\u00a0\u00a0ASSERT_TRUE(testApp.checkValidIp(testApp.getDBResult(\"\")));\n    }\n    ```", "```cpp\n    g++ Misc.cpp TestApp.cpp -lgtest -lgmock -lgtest_main -pthread -o TestApp\n    ```", "```cpp\n    ./TestApp\n    ```", "```cpp\n#ifndef STACK_H__\n#define STACK_H__\n#include<iostream>\nusing namespace std;\n```", "```cpp\ntemplate<typename T>\nstruct Node{\n\u00a0\u00a0\u00a0\u00a0T element;\n\u00a0\u00a0\u00a0\u00a0Node<T> *next;\n};\ntemplate<typename T>\nclass Stack{\n\u00a0\u00a0\u00a0\u00a0Node<T> *head;\n\u00a0\u00a0\u00a0\u00a0int sz;\n\u00a0\u00a0\u00a0\u00a0public :\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Stack():head(nullptr), sz(0){}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0~Stack();\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bool is_empty();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int size();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0T top();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0void pop();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0void push(T);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0void clean();\n};\ntemplate<typename T>\nStack<T>::~Stack(){\n\u00a0\u00a0\u00a0\u00a0if ( head ) clean();\n}\ntemplate<typename T>\nvoid Stack<T>::clean(){\n\u00a0\u00a0\u00a0\u00a0Node<T> *tmp;\n\u00a0\u00a0\u00a0\u00a0while( head ){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tmp = head;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0head = head -> next;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0delete tmp;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sz--;\n\u00a0\u00a0\u00a0\u00a0}\n}\ntemplate<typename T>\nint Stack<T>::size(){\n\u00a0\u00a0\u00a0\u00a0return sz;\n}\ntemplate<typename T>\nbool Stack<T>::is_empty(){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return (head == nullptr) ? true : false;\n}\ntemplate<typename T>\nT Stack<T>::top(){\n\u00a0\u00a0\u00a0\u00a0if ( head == nullptr){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// throw error ...\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw(string(\"Cannot see top of empty stack\"));\n\u00a0\u00a0\u00a0\u00a0}else {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return head -> element;\n\u00a0\u00a0\u00a0\u00a0}\n}\ntemplate<typename T>\nvoid Stack<T>::pop(){\n\u00a0\u00a0\u00a0\u00a0if ( head == nullptr ){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// throw error\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw(string(\"Cannot pop empty stack\"));\n\u00a0\u00a0\u00a0\u00a0}else {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Node<T> *tmp = head ;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0head = head -> next;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0delete tmp;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sz--;\n\u00a0\u00a0\u00a0\u00a0}\n}\ntemplate<typename T>\nvoid Stack<T>::push(T val){\n\u00a0\u00a0\u00a0\u00a0Node<T> *tmp = new Node<T>();\n\u00a0\u00a0\u00a0\u00a0tmp -> element = val;\n\u00a0\u00a0\u00a0\u00a0tmp -> next = head;\n\u00a0\u00a0\u00a0\u00a0head = tmp;\n\u00a0\u00a0\u00a0\u00a0sz++;\n}\n// Miscellaneous functions for stack.. \ntemplate<typename T>\nvoid displayStackStats(Stack<T> &st){\n\u00a0\u00a0\u00a0\u00a0cout << endl << \"------------------------------\" << endl;\n\u00a0\u00a0\u00a0\u00a0cout << \"Showing Stack basic Stats ...\u00a0\u00a0\" << endl;\n\u00a0\u00a0\u00a0\u00a0cout << \"Stack is empty : \" << (st.is_empty() ? \"true\" : \"false\") << endl;\n\u00a0\u00a0\u00a0\u00a0cout << \"Stack size :\" << st.size() << endl;\n\u00a0\u00a0\u00a0\u00a0cout << \"--------------------------------\" << endl << endl;\n}\n#endif \n```", "```cpp\n#include\"Stack.h\"\nint main(){\n\u00a0\u00a0\u00a0\u00a0try {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Stack<int> si;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0displayStackStats<int>(si);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0si.push(22);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0si.push(426);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \"Top of stack contains \" << si.top() << endl;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0si.push(57);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0displayStackStats<int>(si);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \"Top of stack contains \" << si.top() << endl;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0si.pop();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \"Top of stack contains \" << si.top() << endl;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0si.pop();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0displayStackStats<int>(si);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Stack<char> sc;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sc.push('d');\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sc.push('l');\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0displayStackStats<char>(sc);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \"Top of char stack contains:\" << sc.top() << endl;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0catch(string str){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \"Error : \" << str << endl;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0catch(...){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \"Error : Unexpected exception caught \" << endl;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```cpp\ng++ -g Main.cpp -o Main\n```", "```cpp\n./Main\n```", "```cpp\ngdb ./Main \n```", "```cpp\ntemplate<typename T>\nvoid displayStackStats(Stack<T> &st){\n\u00a0\u00a0\u00a0\u00a0cout << endl << \"------------------------------\" << endl;\n\u00a0\u00a0\u00a0\u00a0cout << \"Showing Stack basic Stats ...\u00a0\u00a0\" << endl;\n\u00a0\u00a0\u00a0\u00a0cout << \"Stack is empty : \" << (st.is_empty() ? \"true\" : \"false\") << endl;\n\u00a0\u00a0\u00a0\u00a0cout << \"Stack size :\" << st.size() << endl;\n\u00a0\u00a0\u00a0\u00a0cout << \"--------------------------------\" << endl << endl;\n}\n```", "```cpp\n./Main\n```"]