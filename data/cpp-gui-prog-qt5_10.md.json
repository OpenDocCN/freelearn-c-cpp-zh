["```cpp\nQT += core network \nQt -= gui \n```", "```cpp\n#ifndef SERVER_H \n#define SERVER_H \n\n#include <QObject> \n#include <QTcpServer> \n#include <QTcpSocket> \n#include <QDebug> \n#include <QVector> \n\nprivate: \n   QTcpServer* chatServer; \n   QVector<QTcpSocket*>* allClients; \n\npublic:\n   explicit server(QObject *parent = nullptr);\n void startServer();\n   void sendMessageToClients(QString message); public slots: void newClientConnection();\n  void socketDisconnected();\n  void socketReadyRead();\n  void socketStateChanged(QAbstractSocket::SocketState state);\n```", "```cpp\nvoid server::startServer() \n{ \n   allClients = new QVector<QTcpSocket*>; \n\n   chatServer = new QTcpServer(); \n   chatServer->setMaxPendingConnections(10); \n   connect(chatServer, SIGNAL(newConnection()), this, \n   SLOT(newClientConnection())); \n\n   if (chatServer->listen(QHostAddress::Any, 8001)) \n   { \n         qDebug() << \"Server has started. Listening to port 8001.\"; \n   } \n   else \n   { \n         qDebug() << \"Server failed to start. Error: \" + chatServer-\n         >errorString(); \n   } \n} \n```", "```cpp\nvoid server::newClientConnection() \n{ \n   QTcpSocket* client = chatServer->nextPendingConnection(); \n   QString ipAddress = client->peerAddress().toString(); \n   int port = client->peerPort(); \n\n   connect(client, &QTcpSocket::disconnected, this, &server::socketDisconnected); \n   connect(client, &QTcpSocket::readyRead, this, &server::socketReadyRead); \n   connect(client, &QTcpSocket::stateChanged, this, &server::socketStateChanged); \n\n   allClients->push_back(client); \n\n   qDebug() << \"Socket connected from \" + ipAddress + \":\" + QString::number(port); \n} \n```", "```cpp\nvoid server::socketDisconnected() \n{ \n   QTcpSocket* client = qobject_cast<QTcpSocket*>(QObject::sender()); \n   QString socketIpAddress = client->peerAddress().toString(); \n   int port = client->peerPort(); \n\n   qDebug() << \"Socket disconnected from \" + socketIpAddress + \":\" + \n   QString::number(port); \n} \n```", "```cpp\nvoid server::socketReadyRead() \n{ \n   QTcpSocket* client = qobject_cast<QTcpSocket*>(QObject::sender()); \n   QString socketIpAddress = client->peerAddress().toString(); \n   int port = client->peerPort(); \n\n   QString data = QString(client->readAll()); \n\n   qDebug() << \"Message: \" + data + \" (\" + socketIpAddress + \":\" + \n   QString::number(port) + \")\"; \n\n   sendMessageToClients(data); \n} \n```", "```cpp\nvoid server::socketStateChanged(QAbstractSocket::SocketState state) \n{ \n   QTcpSocket* client = qobject_cast<QTcpSocket*>(QObject::sender()); \n   QString socketIpAddress = client->peerAddress().toString(); \n   int port = client->peerPort(); \n\n   QString desc; \n\n   if (state == QAbstractSocket::UnconnectedState) \n         desc = \"The socket is not connected.\"; \n   else if (state == QAbstractSocket::HostLookupState) \n         desc = \"The socket is performing a host name lookup.\"; \n   else if (state == QAbstractSocket::ConnectingState) \n         desc = \"The socket has started establishing a connection.\"; \n   else if (state == QAbstractSocket::ConnectedState) \n         desc = \"A connection is established.\"; \n   else if (state == QAbstractSocket::BoundState) \n         desc = \"The socket is bound to an address and port.\"; \n   else if (state == QAbstractSocket::ClosingState) \n         desc = \"The socket is about to close (data may still be \n         waiting to be written).\"; \n   else if (state == QAbstractSocket::ListeningState) \n         desc = \"For internal use only.\"; \n\n   qDebug() << \"Socket state changed (\" + socketIpAddress + \":\" + \n   QString::number(port) + \"): \" + desc; \n} \n```", "```cpp\nvoid server::sendMessageToClients(QString message) \n{ \n   if (allClients->size() > 0) \n   { \n         for (int i = 0; i < allClients->size(); i++) \n         { \n               if (allClients->at(i)->isOpen() && allClients->at(i)-\n               >isWritable()) \n               { \n                     allClients->at(i)->write(message.toUtf8()); \n               } \n         } \n   } \n} \n```", "```cpp\n#include <QCoreApplication> \n#include \"server.h\" \n\nint main(int argc, char *argv[]) \n{ \n   QCoreApplication a(argc, argv); \n\n   server* myServer = new server(); \n   myServer->startServer(); \n\n   return a.exec(); \n} \n```", "```cpp\nQT += core gui network \n```", "```cpp\n#ifndef MAINWINDOW_H \n#define MAINWINDOW_H \n\n#include <QMainWindow> \n#include <QDebug> \n#include <QTcpSocket> \n\nprivate: \n   Ui::MainWindow *ui; \n   bool connectedToHost; \n   QTcpSocket* socket; \n```", "```cpp\nMainWindow::MainWindow(QWidget *parent) : \n   QMainWindow(parent), \n   ui(new Ui::MainWindow) \n{ \n   ui->setupUi(this); \n   connectedToHost = false; \n} \n```", "```cpp\nvoid MainWindow::on_connectButton_clicked() \n{ \n   if (!connectedToHost) \n   { \n         socket = new QTcpSocket(); \n\n         connect(socket, SIGNAL(connected()), this, \n         SLOT(socketConnected())); \n         connect(socket, SIGNAL(disconnected()), this, \n         SLOT(socketDisconnected())); \n         connect(socket, SIGNAL(readyRead()), this, \n         SLOT(socketReadyRead())); \n\n         socket->connectToHost(\"127.0.0.1\", 8001); \n   } \n   else \n   { \n         QString name = ui->nameInput->text(); \n         socket->write(\"<font color=\"Orange\">\" + name.toUtf8() + \" has \n         left the chat room.</font>\"); \n\n         socket->disconnectFromHost(); \n   } \n} \n```", "```cpp\nvoid MainWindow::socketConnected() \n{ \n   qDebug() << \"Connected to server.\"; \n\n   printMessage(\"<font color=\"Green\">Connected to server.</font>\"); \n\n   QString name = ui->nameInput->text(); \n   socket->write(\"<font color=\"Purple\">\" + name.toUtf8() + \" has joined \n   the chat room.</font>\"); \n\n   ui->connectButton->setText(\"Disconnect\"); \n   connectedToHost = true; \n} \n```", "```cpp\nvoid MainWindow::socketDisconnected() \n{ \n   qDebug() << \"Disconnected from server.\"; \n\n   printMessage(\"<font color=\"Red\">Disconnected from server.</font>\"); \n\n   ui->connectButton->setText(\"Connect\"); \n   connectedToHost = false; \n} \n```", "```cpp\nvoid MainWindow::socketReadyRead() \n{ \n   ui->chatDisplay->append(socket->readAll()); \n} \n```", "```cpp\nvoid MainWindow::printMessage(QString message) \n{ \n   ui->chatDisplay->append(message); \n} \n```", "```cpp\nvoid MainWindow::on_sendButton_clicked() \n{ \n   QString name = ui->nameInput->text(); \n   QString message = ui->messageInput->text(); \n   socket->write(\"<font color=\"Blue\">\" + name.toUtf8() + \"</font>: \" + \n   message.toUtf8()); \n\n   ui->messageInput->clear(); \n} \n```"]