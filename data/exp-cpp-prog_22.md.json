["```cpp\n      #include <iostream>\n      #include <vector>\n      #include <algorithm>\n```", "```cpp\n      using namespace std;\n```", "```cpp\n      int main()\n      {\n          vector<int> v {1, 2, 3, 2, 5, 2, 6, 2, 4, 8};\n```", "```cpp\n          const auto new_end (remove(begin(v), end(v), 2));\n```", "```cpp\n          v.erase(new_end, end(v));\n```", "```cpp\n          for (auto i : v) {\n              cout << i << \", \";\n          }\n          cout << 'n';\n```", "```cpp\n          const auto odd ([](int i) { return i % 2 != 0; });\n```", "```cpp\n          v.erase(remove_if(begin(v), end(v), odd), end(v));\n```", "```cpp\n          v.shrink_to_fit();\n```", "```cpp\n          for (auto i : v) {\n              cout << i << \", \";\n          }\n          cout << 'n';\n      }\n```", "```cpp\n      $ ./main \n      1, 3, 5, 6, 4, 8, \n      6, 4, 8,\n```", "```cpp\nconst auto new_end (remove(begin(v), end(v), 2));\nv.erase(new_end, end(v));\n```", "```cpp\n      #include <iostream>\n      #include <vector>\n      #include <algorithm>\n```", "```cpp\n      int main()\n      {\n          std::vector<int> v {123, 456, 789, 100, 200};\n```", "```cpp\n          quick_remove_at(v, 2);\n\n          for (int i : v) {\n              std::cout << i << \", \";\n          }                                           \n          std::cout << 'n';\n```", "```cpp\n          quick_remove_at(v, std::find(std::begin(v), std::end(v), 123));\n\n          for (int i : v) {\n              std::cout << i << \", \";\n          }\n          std::cout << 'n';\n      }\n```", "```cpp\n      template <typename T>\n      void quick_remove_at(std::vector<T> &v, std::size_t idx)\n      {\n```", "```cpp\n          if (idx < v.size()) {\n              v[idx] = std::move(v.back());\n              v.pop_back();\n          }\n      }\n```", "```cpp\n      template <typename T>\n      void quick_remove_at(std::vector<T> &v, \n                           typename std::vector<T>::iterator it)\n      {\n\n```", "```cpp\n          if (it != std::end(v)) {\n```", "```cpp\n              *it = std::move(v.back());\n              v.pop_back();\n          }\n      }\n```", "```cpp\n      $ ./main \n      123, 456, 200, 100,                           \n      100, 456, 200,\n```", "```cpp\nv.at(idx) = std::move(v.back());\nv.pop_back();\n```", "```cpp\n*it = std::move(v.back());\nv.pop_back();\n```", "```cpp\n      #include <iostream>\n      #include <vector>\n\n      using namespace std;\n\n      int main()\n      {\n          const size_t container_size {1000};\n          vector<int> v (container_size, 123);\n```", "```cpp\n         cout << \"Out of range element value: \" \n              << v[container_size + 10] << 'n';\n```", "```cpp\n          cout << \"Out of range element value: \" \n               << v.at(container_size + 10) << 'n';\n      }\n```", "```cpp\n      Out of range element value: -726629391\n      terminate called after throwing an instance of 'std::out_of_range'\n        what():  array::at: __n (which is 1010) >= _Nm (which is 1000)\n      Aborted (core dumped)\n```", "```cpp\ntry {\n    std::cout << \"Out of range element value: \" \n              << v.at(container_size + 10) << 'n';\n} catch (const std::out_of_range &e) {\n     std::cout << \"Ooops, out of range access detected: \" \n               << e.what() << 'n';\n}\n```", "```cpp\n      #include <iostream>\n      #include <vector>\n      #include <string>\n      #include <algorithm>\n      #include <iterator> \n      #include <cassert>\n```", "```cpp\n      using namespace std;\n```", "```cpp\n      int main()\n      {\n          vector<string> v {\"some\", \"random\", \"words\", \n                            \"without\", \"order\", \"aaa\", \n                            \"yyy\"};\n```", "```cpp\n          assert(false == is_sorted(begin(v), end(v)));\n          sort(begin(v), end(v));\n          assert(true == is_sorted(begin(v), end(v)));\n```", "```cpp\n          insert_sorted(v, \"foobar\");\n          insert_sorted(v, \"zzz\");\n```", "```cpp\n      void insert_sorted(vector<string> &v, const string &word)\n      {\n          const auto insert_pos (lower_bound(begin(v), end(v), word));\n          v.insert(insert_pos, word);\n      }\n```", "```cpp\n          for (const auto &w : v) { \n              cout << w << \" \";\n          }\n          cout << 'n';\n      }\n```", "```cpp\n      aaa foobar order random some without words yyy zzz\n```", "```cpp\ntemplate <typename C, typename T>\nvoid insert_sorted(C &v, const T &item)\n{\n    const auto insert_pos (lower_bound(begin(v), end(v), item));\n    v.insert(insert_pos, item);\n}\n```", "```cpp\n      #include <iostream>\n      #include <functional>\n      #include <list>\n      #include <map>\n\n      using namespace std;\n```", "```cpp\n      struct billionaire {\n          string name;\n          double dollars;\n          string country;\n      };\n```", "```cpp\n      int main()\n      {\n          list<billionaire> billionaires {\n              {\"Bill Gates\", 86.0, \"USA\"},\n              {\"Warren Buffet\", 75.6, \"USA\"},\n              {\"Jeff Bezos\", 72.8, \"USA\"},\n              {\"Amancio Ortega\", 71.3, \"Spain\"},\n              {\"Mark Zuckerberg\", 56.0, \"USA\"},\n              {\"Carlos Slim\", 54.5, \"Mexico\"},\n              // ...\n              {\"Bernard Arnault\", 41.5, \"France\"},\n              // ...\n              {\"Liliane Bettencourt\", 39.5, \"France\"},\n              // ...\n              {\"Wang Jianlin\", 31.3, \"China\"},\n              {\"Li Ka-shing\", 31.2, \"Hong Kong\"}\n              // ...\n          };\n```", "```cpp\n          map<string, pair<const billionaire, size_t>> m;\n```", "```cpp\n          for (const auto &b : billionaires) {\n              auto [iterator, success] = m.try_emplace(b.country, b, 1);\n```", "```cpp\n              if (!success) {\n                  iterator->second.second += 1;\n              }\n          }\n```", "```cpp\n          for (const auto & [key, value] : m) {\n              const auto &[b, count] = value;\n\n              cout << b.country << \" : \" << count \n                   << \" billionaires. Richest is \"\n                   << b.name << \" with \" << b.dollars \n                   << \" B$n\";\n          }\n      }\n```", "```cpp\n      $ ./efficient_insert_or_modify\n      China : 1 billionaires. Richest is Wang Jianlin with 31.3 B$\n      France : 2 billionaires. Richest is Bernard Arnault with 41.5 B$\n      Hong Kong : 1 billionaires. Richest is Li Ka-shing with 31.2 B$\n      Mexico : 1 billionaires. Richest is Carlos Slim with 54.5 B$\n      Spain : 1 billionaires. Richest is Amancio Ortega with 71.3 B$\n      USA : 4 billionaires. Richest is Bill Gates with 86 B$\n```", "```cpp\nstd::pair<iterator, bool> try_emplace(const key_type& k, Args&&... args);\n```", "```cpp\nif (!success) {\n    iterator->second.second += 1;\n}\n```", "```cpp\n      #include <iostream>\n      #include <map>\n      #include <string>\n```", "```cpp\n      int main()\n      {\n          std::map<std::string, size_t> m {{\"b\", 1}, {\"c\", 2}, {\"d\", 3}};\n```", "```cpp\n          auto insert_it (std::end(m));\n```", "```cpp\n          for (const auto &s : {\"z\", \"y\", \"x\", \"w\"}) {\n              insert_it = m.insert(insert_it, {s, 1});\n          }\n```", "```cpp\n          m.insert(std::end(m), {\"a\", 1});\n```", "```cpp\n          for (const auto & [key, value] : m) {\n              std::cout << \"\"\" << key << \"\": \" << value << \", \";\n          }\n          std::cout << 'n';\n      }\n```", "```cpp\n      \"a\": 1, \"b\": 1, \"c\": 2, \"d\": 3, \"w\": 1, \"x\": 1, \"y\": 1, \"z\": 1,\n```", "```cpp\n      #include <iostream>\n      #include <map>      \n\n      using namespace std;\n```", "```cpp\n      template <typename M>\n      void print(const M &m)\n      {\n          cout << \"Race placement:n\";\n          for (const auto &[placement, driver] : m) {\n              cout << placement << \": \" << driver << 'n';\n          }\n      }\n```", "```cpp\n      int main()\n      {\n          map<int, string> race_placement {\n              {1, \"Mario\"}, {2, \"Luigi\"}, {3, \"Bowser\"},\n              {4, \"Peach\"}, {5, \"Yoshi\"}, {6, \"Koopa\"},\n              {7, \"Toad\"}, {8, \"Donkey Kong Jr.\"}\n          };\n\n          print(race_placement);\n```", "```cpp\n          {\n              auto a (race_placement.extract(3));\n              auto b (race_placement.extract(8));\n```", "```cpp\n              swap(a.key(), b.key());\n```", "```cpp\n              race_placement.insert(move(a));\n              race_placement.insert(move(b));\n          }\n```", "```cpp\n          print(race_placement);\n      }\n```", "```cpp\n      $ ./mapnode_key_modification \n      Race placement:\n      1: Mario\n      2: Luigi\n      3: Bowser\n      4: Peach\n      5: Yoshi\n      6: Koopa\n      7: Toad\n      8: Donkey Kong Jr.\n      Race placement:\n      1: Mario\n      2: Luigi\n      3: Donkey Kong Jr.\n      4: Peach\n      5: Yoshi\n      6: Koopa\n      7: Toad\n      8: Bowser\n```", "```cpp\nnode_type extract(const_iterator position);\nnode_type extract(const key_type& x);\n```", "```cpp\n      #include <iostream>\n      #include <unordered_map>\n```", "```cpp\n      struct coord {\n          int x;\n          int y;\n      };\n```", "```cpp\n      bool operator==(const coord &l, const coord &r)\n      {\n          return l.x == r.x && l.y == r.y;\n      }\n```", "```cpp\n      namespace std\n      {\n\n      template <>\n      struct hash<coord>\n      {\n          using argument_type = coord;\n          using result_type   = size_t;\n```", "```cpp\n          result_type operator()(const argument_type &c) const\n          {\n              return static_cast<result_type>(c.x) \n                   + static_cast<result_type>(c.y);\n          }\n      };\n\n      }\n```", "```cpp\n      int main()\n      {\n\n          std::unordered_map<coord, int> m {{{0, 0}, 1}, {{0, 1}, 2}, \n                                            {{2, 1}, 3}};\n\n          for (const auto & [key, value] : m) {\n              std::cout << \"{(\" << key.x << \", \" << key.y \n                        << \"): \" << value << \"} \";\n          }\n          std::cout << 'n';\n      }\n```", "```cpp\n      $ ./custom_type_unordered_map\n      {(2, 1): 3} {(0, 1): 2} {(0, 0): 1}\n```", "```cpp\nstd::unordered_map<key_type, value_type> my_unordered_map;\n```", "```cpp\ntemplate<\n    class Key,\n    class T,\n    class Hash      = std::hash<Key>,\n    class KeyEqual  = std::equal_to<Key>,\n    class Allocator = std::allocator< std::pair<const Key, T> >\n> class unordered_map;\n```", "```cpp\nstd::unordered_map<coord, value_type, my_hash_type> my_unordered_map;\n```", "```cpp\n      #include <iostream>\n      #include <set>\n      #include <string>\n      #include <iterator>\n```", "```cpp\n      using namespace std;\n```", "```cpp\n      int main()\n      {\n          set<string> s;\n```", "```cpp\n          istream_iterator<string> it {cin};\n          istream_iterator<string> end;\n```", "```cpp\n          copy(it, end, inserter(s, s.end()));\n```", "```cpp\n          for (const auto word : s) {\n              cout << word << \", \";\n          }\n          cout << 'n';\n      }\n```", "```cpp\n      $ echo \"a a a b c foo bar foobar foo bar bar\" | ./program\n      a, b, bar, c, foo, foobar,\n```", "```cpp\nistream_iterator<string> it {cin};\n```", "```cpp\nistream_iterator<string> end;\n```", "```cpp\nauto insert_it = inserter(s, s.end());\n```", "```cpp\ncopy(input_iterator_begin, input_iterator_end, insert_iterator);\n```", "```cpp\n      #include <iostream>\n      #include <stack>\n      #include <iterator>\n      #include <map>\n      #include <sstream>\n      #include <cassert>\n      #include <vector>\n      #include <stdexcept>\n      #include <cmath>\n```", "```cpp\n      using namespace std;\n```", "```cpp\n      template <typename IT>\n      double evaluate_rpn(IT it, IT end)\n      {\n```", "```cpp\n          stack<double> val_stack;\n```", "```cpp\n          auto pop_stack ([&](){ \n              auto r (val_stack.top()); \n              val_stack.pop(); \n              return r; \n          });\n```", "```cpp\n          map<string, double (*)(double, double)> ops {\n              {\"+\", [](double a, double b) { return a + b; }},\n              {\"-\", [](double a, double b) { return a - b; }},\n              {\"*\", [](double a, double b) { return a * b; }},\n              {\"/\", [](double a, double b) { return a / b; }},\n              {\"^\", [](double a, double b) { return pow(a, b); }},\n              {\"%\", [](double a, double b) { return fmod(a, b); }},\n          };\n```", "```cpp\n          for (; it != end; ++it) {\n              stringstream ss {*it};\n```", "```cpp\n              if (double val; ss >> val) {\n                  val_stack.push(val);\n              }\n```", "```cpp\n              else {\n                  const auto r {pop_stack()};\n                  const auto l {pop_stack()};\n```", "```cpp\n                  try {\n                      const auto & op     (ops.at(*it));\n                      const double result {op(l, r)};\n                      val_stack.push(result);\n                  }\n```", "```cpp\n                  catch (const out_of_range &) {\n                      throw invalid_argument(*it);\n                  }\n```", "```cpp\n              }\n          }\n\n          return val_stack.top();\n      }\n```", "```cpp\n      int main()\n      {\n          try {\n              cout << evaluate_rpn(istream_iterator<string>{cin}, {}) \n                   << 'n';\n          }\n```", "```cpp\n          catch (const invalid_argument &e) {\n              cout << \"Invalid operator: \" << e.what() << 'n';\n          }\n      }\n```", "```cpp\n      $ echo \"3 1 2 + * 2 /\" | ./rpn_calculator\n      4.5\n```", "```cpp\nval_stack.push(val);\n```", "```cpp\nauto pop_stack ([&](){\n    auto r (val_stack.top()); // Get top value copy\n    val_stack.pop();          // Throw away top value\n    return r;                 // Return copy\n});\n```", "```cpp\ndouble top_value {pop_stack()};\n```", "```cpp\nstringstream ss {*it};\nif (double val; ss >> val) {\n    // It's a number!\n} else {\n    // It's something else than a number - an operation!\n}\n```", "```cpp\nmap<string, double (*)(double, double)> ops { ... };\n```", "```cpp\nconst auto & op     (ops.at(*it));\nconst double result {op(l, r)};\n```", "```cpp\nint main()\n{\n    stringstream s {\"3 2 1 + * 2 /\"};\n    cout << evaluate_rpn(istream_iterator<string>{s}, {}) << 'n';\n\n    vector<string> v {\"3\", \"2\", \"1\", \"+\", \"*\", \"2\", \"/\"};\n    cout << evaluate_rpn(begin(v), end(v)) << 'n';\n}\n```", "```cpp\n      #include <iostream>\n      #include <map> \n      #include <vector> \n      #include <algorithm> \n      #include <iomanip>\n```", "```cpp\n      using namespace std;\n```", "```cpp\n      string filter_punctuation(const string &s)\n      {\n          const char *forbidden {\".,:; \"};\n          const auto  idx_start (s.find_first_not_of(forbidden));\n          const auto  idx_end   (s.find_last_not_of(forbidden));\n\n          return s.substr(idx_start, idx_end - idx_start + 1);\n      }\n```", "```cpp\n      int main()\n      {\n          map<string, size_t> words;\n          int max_word_len {0};\n```", "```cpp\n          string s;\n          while (cin >> s) {\n```", "```cpp\n              auto filtered (filter_punctuation(s));\n```", "```cpp\n              max_word_len = max<int>(max_word_len, filtered.length());\n```", "```cpp\n              ++words[filtered];\n          }\n```", "```cpp\n          vector<pair<string, size_t>> word_counts;\n          word_counts.reserve(words.size());\n          move(begin(words), end(words), back_inserter(word_counts));\n```", "```cpp\n          sort(begin(word_counts), end(word_counts),\n              [](const auto &a, const auto &b) { \n                  return a.second > b.second; \n              });\n```", "```cpp\n          cout << \"# \" << setw(max_word_len) << \"<WORD>\" << \" #<COUNT>n\";\n          for (const auto & [word, count] : word_counts) {\n              cout << setw(max_word_len + 2) << word << \" #\" \n                   << count << 'n';\n          }\n      }\n```", "```cpp\n      $ cat lorem_ipsum.txt | ./word_frequency_counter\n      #       <WORD> #<COUNT>\n                  et #574\n               dolor #302\n                 sed #273\n                diam #273\n                 sit #259\n               ipsum #259\n      ...\n```", "```cpp\na -> 2\nb -> 4\nc -> 3\nd -> 1\n```", "```cpp\nvector<pair<string, size_t>> word_counts;\n```", "```cpp\nmove(begin(words), end(words), back_inserter(word_counts));\n```", "```cpp\nsort(begin(word_counts), end(word_counts),\n        [](const auto &a, const auto &b) { return a.second > b.second; });\n```", "```cpp\n      #include <iostream>\n      #include <iterator>\n      #include <map>\n      #include <algorithm>\n```", "```cpp\n      using namespace std;\n```", "```cpp\n      string filter_ws(const string &s)\n      {\n          const char *ws {\" rnt\"};\n          const auto a (s.find_first_not_of(ws));\n          const auto b (s.find_last_not_of(ws));\n          if (a == string::npos) {\n              return {};\n          }\n          return s.substr(a, b);\n      }\n```", "```cpp\n      multimap<size_t, string> get_sentence_stats(const string &content)\n      {\n```", "```cpp\n          multimap<size_t, string> ret;\n\n          const auto end_it (end(content));\n          auto it1 (begin(content));\n          auto it2 (find(it1, end_it, '.'));\n```", "```cpp\n          while (it1 != end_it && distance(it1, it2) > 0) {\n```", "```cpp\n              string s {filter_ws({it1, it2})};\n```", "```cpp\n              if (s.length() > 0) {\n                  const auto words (count(begin(s), end(s), ' ') + 1);\n                  ret.emplace(make_pair(words, move(s)));\n              }\n```", "```cpp\n              it1 = next(it2, 1);\n              it2 = find(it1, end_it, '.');\n          }\n```", "```cpp\n          return ret;\n      }\n```", "```cpp\n      int main()\n      {\n          cin.unsetf(ios::skipws);\n          string content {istream_iterator<char>{cin}, {}};\n```", "```cpp\n          for (const auto & [word_count, sentence] \n                   : get_sentence_stats(content)) {\n              cout << word_count << \" words: \" << sentence << \".n\";\n          }\n      }\n```", "```cpp\n      $ cat lorem_ipsum.txt | ./sentence_length\n      ...\n      10 words: Nam quam nunc, blandit vel, luctus pulvinar, \n      hendrerit id, lorem.\n      10 words: Sed consequat, leo eget bibendum sodales, \n      augue velit cursus nunc,.\n      12 words: Cum sociis natoque penatibus et magnis dis \n      parturient montes, nascetur ridiculus mus.\n      17 words: Maecenas tempus, tellus eget condimentum rhoncus, \n      sem quam semper libero, sit amet adipiscing sem neque sed ipsum.\n```", "```cpp\nconst auto end_it (end(content));\nauto it1 (begin(content));         // (1) Beginning of string\nauto it2 (find(it1, end_it, '.')); // (1) First '.' dot\n\nwhile (it1 != end_it && std::distance(it1, it2) > 0) {\n    string sentence {it1, it2};\n\n    // Do something with the sentence string...\n\n    it1 = std::next(it2, 1);      // One character past current '.' dot\n    it2 = find(it1, end_it, '.'); // Next dot, or end of string\n}\n```", "```cpp\n      #include <iostream>\n      #include <queue>\n      #include <tuple>\n      #include <string>\n```", "```cpp\n      int main()\n      {\n          using item_type = std::pair<int, std::string>;\n```", "```cpp\n          std::priority_queue<item_type> q;\n```", "```cpp\n          std::initializer_list<item_type> il {\n              {1, \"dishes\"},\n              {0, \"watch tv\"},\n              {2, \"do homework\"},\n              {0, \"read comics\"},\n          };\n```", "```cpp\n          for (const auto &p : il) {\n              q.push(p);\n          }\n```", "```cpp\n          while(!q.empty()) {\n              std::cout << q.top().first << \": \" << q.top().second << 'n';\n              q.pop();\n          }\n          std::cout << 'n';\n      }\n```", "```cpp\n      $ ./main\n      2: do homework\n      1: dishes\n      0: watch tv\n      0: read comics\n```"]