- en: Graphs and Charts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图表和图形
- en: In the previous chapter, we learned how to retrieve data from a database using
    Qt's `sql` module. There are many ways to present this data to the users, such
    as displaying it in the form of tables or diagrams. In this chapter, we will learn
    how to do the latter—presenting data with different types of graphs and charts
    using Qt's charts module.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何使用Qt的`sql`模块从数据库中检索数据。有许多方法可以向用户呈现这些数据，例如以表格或图表的形式显示。在本章中，我们将学习如何进行后者——使用Qt的图表模块以不同类型的图表和图形呈现数据。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Types of charts and graphs in Qt
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Qt中的图表和图形类型
- en: Charts and graphs implementation
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图表和图形实现
- en: Creating the dashboard page
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建仪表板页面
- en: Since Qt 5.7, several modules that were only available for commercial users
    before have become free for all the open source package users, which includes
    the Qt Charts module. Therefore, it is considered a very new module for most Qt
    users who don't own the commercial license.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 自Qt 5.7以来，以前只有商业用户才能使用的几个模块已经免费提供给所有开源软件包用户，其中包括Qt Charts模块。因此，对于那些没有商业许可证的大多数Qt用户来说，这被认为是一个非常新的模块。
- en: Do note that, unlike most of the Qt modules that are available under an LGPLv3
    license, the Qt Chart module is offered under an GPLv3 license. Unlike LGPLv3,
    a GPLv3 license requires you to release the source code of your application, while
    your application must also be licensed under GPLv3\. This means that you are not
    allowed to static-link Qt Chart with your application. It also prevents the module
    from being used in proprietary software.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，与大多数可在LGPLv3许可下使用的Qt模块不同，Qt Chart模块是根据GPLv3许可提供的。与LGPLv3不同，GPLv3许可要求您发布应用程序的源代码，同时您的应用程序也必须在GPLv3下获得许可。这意味着您不允许将Qt
    Chart与您的应用程序进行静态链接。它还阻止了该模块在专有软件中的使用。
- en: To learn more about the GNU licenses, please head over to the following link: [https://www.gnu.org/licenses/gpl-faq.html.](https://www.gnu.org/licenses/gpl-faq.html)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解有关GNU许可的更多信息，请访问以下链接：[https://www.gnu.org/licenses/gpl-faq.html.](https://www.gnu.org/licenses/gpl-faq.html)
- en: Let's get started!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: Types of charts and graphs in Qt
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Qt中的图表和图形类型
- en: 'Qt supports most commonly used diagrams, and even allows the developer to customize
    the look and feel of them so that they can be used for many different purposes.
    The Qt Charts module provides the following chart types:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Qt支持最常用的图表，并且甚至允许开发人员自定义它们的外观和感觉，以便可以用于许多不同的目的。Qt Charts模块提供以下图表类型：
- en: Line and spline charts
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线性和样条线图
- en: Bar charts
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 条形图
- en: Pie charts
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 饼图
- en: Polar charts
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 极坐标图
- en: Area and scatter charts
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区域和散点图
- en: Box-and-whiskers charts
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 箱形图
- en: Candlestick charts
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 蜡烛图
- en: Line and spline charts
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 线性和样条线图
- en: 'The first type of chart is the **line and spline chart**. These charts are
    typically presented as a series of points/markers that are connected by lines.
    In a line chart, the points are connected by straight lines to show the changes
    of the variables over a period of time. On the other hand, spline charts are very
    similar to line charts except the points are connected by a spline/curve line
    instead of straight lines:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种类型的图表是**线性和样条线图**。这些图表通常呈现为一系列通过线连接的点/标记。在线图中，点通过直线连接以显示变量随时间变化的情况。另一方面，样条线图与线图非常相似，只是点是通过样条线/曲线连接而不是直线：
- en: '![](img/629caf81-65dc-4ade-bca7-c83446b9563a.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/629caf81-65dc-4ade-bca7-c83446b9563a.png)'
- en: Bar charts
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 条形图
- en: '**Bar charts** are one of the most commonly used diagrams beside line charts
    and pie charts. A bar chart is quite similar to a line chart, except it doesn''t
    connect the data along an axis. Instead, a bar chart displays its data using individual
    rectangular shapes, where its height is determined by the value of the data. This
    means that the higher the value, the taller the rectangular shape will become:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**条形图**是除线图和饼图之外最常用的图表之一。条形图与线图非常相似，只是它不沿轴连接数据。相反，条形图使用单独的矩形形状来显示其数据，其中其高度由数据的值决定。这意味着数值越高，矩形形状就会变得越高：'
- en: '![](img/da0e850e-1370-4f92-9b2f-59d6ff87010f.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/da0e850e-1370-4f92-9b2f-59d6ff87010f.png)'
- en: Pie charts
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 饼图
- en: 'A **pie chart**, as its name implies, is a type of chart that looks like a
    pie. A pie chart presents its data in the form of pie slices. The size of each
    slice of pie will be determined by the overall percentage of its value compared
    to the rest of the data. Therefore, pie charts are normally used to display fraction,
    ratio, percentage, or a share of a set of data:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**饼图**，顾名思义，是一种看起来像饼的图表类型。饼图以饼片的形式呈现数据。每个饼片的大小将由其值的整体百分比决定，与其余数据相比。因此，饼图通常用于显示分数、比率、百分比或一组数据的份额：'
- en: '![](img/bef47cfa-ec84-4d74-9a31-7fccac977da3.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bef47cfa-ec84-4d74-9a31-7fccac977da3.jpg)'
- en: 'Sometimes, a pie chart can also be displayed in a donut shape (also known as
    donut chart):'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，饼图也可以以甜甜圈形式显示（也称为甜甜圈图）：
- en: '![](img/21decb70-9994-4aa5-9201-0d617a5577f0.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/21decb70-9994-4aa5-9201-0d617a5577f0.png)'
- en: Polar charts
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 极坐标图
- en: '**Polar charts** present data in a circular graph, where the placement of the
    data is based on both the angle and the distance from the center of the graph,
    which means the higher the value of the data, the further away the point is from
    the center of the chart. You can display multiple types of graphs within the polar
    chart, such as line, spline, area, and scatter to visualize the data:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**极坐标图**以圆形图表的形式呈现数据，其中数据的放置基于角度和距离中心的距离，这意味着数据值越高，点距离图表中心就越远。您可以在极坐标图中显示多种类型的图表，如线性、样条线、区域和散点图来可视化数据：'
- en: '![](img/12341292-4158-439e-a319-746511e60aab.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/12341292-4158-439e-a319-746511e60aab.png)'
- en: 'If you are a gamer, you should have noticed this type of graph being used in
    some video games to display the in-game character''s attributes:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是游戏玩家，您应该已经注意到在一些视频游戏中使用了这种类型的图表来显示游戏角色的属性：
- en: '![](img/388b962c-afac-421e-afe0-076d47706e35.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/388b962c-afac-421e-afe0-076d47706e35.png)'
- en: Area and scatter charts
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 区域和散点图
- en: An **area chart **displays its data as an area or shape to indicate volume.
    It's usually used to compare the differences between two or more datasets.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**面积图**将数据显示为面积或形状，以指示体积。通常用于比较两个或多个数据集之间的差异。'
- en: '![](img/fb091f5c-a7aa-4329-9faf-40f1f7e1ead0.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fb091f5c-a7aa-4329-9faf-40f1f7e1ead0.png)'
- en: '**Scatter charts**, on the other hand, are used to display a collection of
    data points, and for showing the non-linear relationship between two or more datasets.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**散点图**，另一方面，用于显示一组数据点，并显示两个或多个数据集之间的非线性关系。'
- en: '![](img/e2ce41e1-47a7-4fdf-832a-df1bc9b62b47.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e2ce41e1-47a7-4fdf-832a-df1bc9b62b47.png)'
- en: Box-and-whiskers charts
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 箱线图
- en: '**Box-and-whiskers charts** present data as quartiles extended with whiskers
    that show the variability of the values. The boxes may have lines extending vertically
    called *whiskers*. These lines indicate variability outside the upper and lower
    quartiles, and any point outside those lines or whiskers is considered an outlier.
    Box-and-whisker charts are most commonly used in statistical analysis, such as
    stock market analysis:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**箱线图**将数据呈现为四分位数，并延伸出显示值的变异性的须。箱子可能有垂直延伸的线，称为*须*。这些线表示四分位数之外的变异性，任何超出这些线或须的点都被视为异常值。箱线图最常用于统计分析，比如股票市场分析：'
- en: '![](img/bd88e23e-128d-4f49-828e-6e548e6f83ce.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bd88e23e-128d-4f49-828e-6e548e6f83ce.png)'
- en: Candlestick charts
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 蜡烛图
- en: '**Candlestick charts** are visually quite similar to the box-and-whiskers charts,
    except they are used to represent the difference between the opening and closing
    value, while showing the direction of the value (whether increasing or decreasing)
    through different colors. If the value of a particular piece of data stays the
    same, the rectangular shape will not be shown at all:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**蜡烛图**在视觉上与箱线图非常相似，只是用于表示开盘和收盘价之间的差异，同时通过不同的颜色显示值的方向（增加或减少）。如果特定数据的值保持不变，矩形形状将根本不会显示：'
- en: '![](img/1b4c98ab-bbee-4f7f-8168-c054e28be15d.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1b4c98ab-bbee-4f7f-8168-c054e28be15d.png)'
- en: For more information regarding the different types of charts supported by Qt,
    please head over to the following link: [https://doc.qt.io/qt-5/qtcharts-overview.html.](https://doc.qt.io/qt-5/qtcharts-overview.html)
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Qt支持的不同类型图表的更多信息，请访问以下链接：[https://doc.qt.io/qt-5/qtcharts-overview.html.](https://doc.qt.io/qt-5/qtcharts-overview.html)
- en: Qt supports most of the diagram types you need for your project. It is also
    extremely easy to implement these diagrams in Qt. Let's see how we can do it!
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Qt支持大多数你项目中需要的图表类型。在Qt中实现这些图表也非常容易。让我们看看如何做到！
- en: Implementing charts and graphs
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现图表和图形
- en: Qt makes drawing different types of diagrams easy by putting the complex drawing
    algorithms behind different abstraction layers, and providing us with a set of
    classes and functions that can be used to easily create these diagrams without
    knowing how the drawing algorithm works behind the scenes. These classes and functions
    are all included in the chart module that comes together with Qt.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Qt通过将复杂的绘图算法放在不同的抽象层后面，使得绘制不同类型的图表变得容易，并为我们提供了一组类和函数，可以用来轻松创建这些图表，而不需要知道绘图算法在幕后是如何工作的。这些类和函数都包含在Qt的图表模块中。
- en: Let's create a new Qt Widgets Application project and try to create our first
    chart in Qt.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个新的Qt Widgets应用程序项目，并尝试在Qt中创建我们的第一个图表。
- en: 'After you have created the new project, open up the project file (`.pro`) and
    add the `charts` module to your project, like so:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新项目后，打开项目文件（.pro）并将`charts`模块添加到项目中，如下所示：
- en: '[PRE0]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, open up `mainwindow.h` and add the following to include the header files
    that are required for using the `charts` module:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，打开`mainwindow.h`并添加以下内容以包含使用`charts`模块所需的头文件：
- en: '[PRE1]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `QtCharts` and `QtChartView` headers are both essential for Qt's `charts`
    module. You must include both of them for any type of chart to work at all. The
    other two headers, namely `QBarSet`and `QBarSeries`, are used here because we're
    going to create a bar chart. The headers that get included in your project will
    be different depending on the type of chart you want to create.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`QtCharts`和`QtChartView`头文件对于Qt的`charts`模块都是必不可少的。你必须包含它们两个才能让任何类型的图表正常工作。另外两个头文件，即`QBarSet`和`QBarSeries`，在这里被使用是因为我们将创建一个条形图。根据你想创建的图表类型不同，项目中包含的头文件也会有所不同。'
- en: 'Next, open `mainwindow.ui` and drag either Vertical Layout or Horizontal Layout
    to the central widget. Then, select the central widget and click either Layout
    Horizontally or Layout Vertically. The layout direction is not particularly important,
    as we will only create a single chart here:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开`mainwindow.ui`并将垂直布局或水平布局拖到中央窗口部件。然后，选择中央窗口部件，点击水平布局或垂直布局。布局方向并不是特别重要，因为我们这里只会创建一个图表：
- en: '![](img/4e4f032b-86fb-4548-a497-f60076f9a6d3.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4e4f032b-86fb-4548-a497-f60076f9a6d3.png)'
- en: 'After that, right-click on the layout widget you just dragged to the central
    widget, and select Morph into | QFrame. This will change the layout widget into
    a QFrame widget while still maintaining its layout properties. If you create a
    QFrame from Widget Box, it won''t have the layout properties that we need. This
    step is important so that we can set it as the parent of our chart later:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，右键单击刚刚拖到中央窗口部件的布局部件，选择转换为 | QFrame。这将把布局部件更改为QFrame部件，同时保持其布局属性。如果从Widget
    Box创建QFrame，它将没有我们需要的布局属性。这一步很重要，这样我们才能将其设置为稍后图表的父级：
- en: '![](img/9ef83d89-2839-43c4-9537-cb34557dddec.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9ef83d89-2839-43c4-9537-cb34557dddec.png)'
- en: 'Now open up `mainwindow.cpp` and add the following code:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在打开`mainwindow.cpp`并添加以下代码：
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The code above initializes all the categories that will be displayed in the
    bar chart. Then, we also added six different items of data to each category, which
    will later be represented in the form of bars/rectangular shapes.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码初始化了将显示在条形图中的所有类别。然后，我们还为每个类别添加了六个不同的数据项，这些数据项稍后将以条形/矩形形式表示。
- en: The `QBarSet` class represents a set of bars in the bar chart. It groups several
    bars into a bar set, which can then be labeled. QBarSeries, on the other hand,
    represents a series of bars grouped by category. In other words, bars that have
    the same color belong to the same series.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`QBarSet`类表示条形图中的一组条形。它将几个条形组合成一个条形集，然后可以加标签。另一方面，`QBarSeries`表示按类别分组的一系列条形。换句话说，颜色相同的条形属于同一系列。'
- en: 'Next, initiate the `QChart` object and add the series to it. We also set the
    chart''s title and enable animation:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，初始化`QChart`对象并将系列添加到其中。我们还设置了图表的标题并启用了动画：
- en: '[PRE3]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'After that, we create a bar chart category axis and apply it to the bar chart''s
    *x *axis. We used a `QStringList` variable, which is similar to an array, but
    explicitly for storing strings. The `QBarCategoryAxis` will then take the string
    list and populate it over the *x* axis:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们创建了一个条形图类别轴，并将其应用于条形图的*x*轴。我们使用了一个`QStringList`变量，类似于数组，但专门用于存储字符串。然后，`QBarCategoryAxis`将获取字符串列表并填充到*x*轴上：
- en: '[PRE4]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, we create a chart view for Qt to render the bar chart and set it as a
    child of the frame widget in the main window; otherwise, it won''t be rendered
    on the main window:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们为Qt创建一个图表视图来渲染条形图，并将其设置为主窗口中框架小部件的子级；否则，它将无法在主窗口上渲染：
- en: '[PRE5]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Click the Run button in Qt Creator, and you should see something like this:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在Qt Creator中点击运行按钮，你应该会看到类似这样的东西：
- en: '![](img/ca8c434b-348e-442c-83fc-d763be3e71c3.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ca8c434b-348e-442c-83fc-d763be3e71c3.png)'
- en: 'Next, let''s do a pie chart; it''s really easy. First, instead of `QBarSet` and
    `QBarSeries`, we include `QPieSeries` and `QPieSlice`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们做一个饼图；这真的很容易。首先，我们包括`QPieSeries`和`QPieSlice`，而不是`QBarSet`和`QBarSeries`：
- en: '[PRE6]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Then, create a `QPieSeries` object and set up the name and value of each data.
    After that, set one of the slices to a different visual style and make it pop
    out from the rest. Then, create a `QChart` object and link it with the `QPieSeries`object
    that we have created:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，创建一个`QPieSeries`对象，并设置每个数据的名称和值。之后，将其中一个切片设置为不同的视觉样式，并使其脱颖而出。然后，创建一个`QChart`对象，并将其与我们创建的`QPieSeries`对象链接起来：
- en: '[PRE7]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Last, but not least, create the `QChartView` object and link it with the `QChart`
    object we just created. Then, set it as a child of the frame widget, and we're
    good to go!
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，创建`QChartView`对象，并将其与我们刚刚创建的`QChart`对象链接起来。然后，将其设置为框架小部件的子级，我们就可以开始了！
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Press the Run button now, and you should be able to see something like this:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在按下运行按钮，你应该能看到类似这样的东西：
- en: '![](img/a5355056-5e99-4777-804c-117005d6848d.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a5355056-5e99-4777-804c-117005d6848d.png)'
- en: For more examples of how to create different charts in Qt, please check out
    their sample code at the following link: [https://doc.qt.io/qt-5/qtcharts-examples.html](https://doc.qt.io/qt-5/qtcharts-examples.html).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何在Qt中创建不同图表的更多示例，请查看以下链接的示例代码：[https://doc.qt.io/qt-5/qtcharts-examples.html](https://doc.qt.io/qt-5/qtcharts-examples.html)。
- en: Now that we've seen that it is easy to create graphs and charts with Qt, let's
    expand the project we started in the previous chapters and create a dashboard
    for it!
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到使用Qt创建图表和图形是很容易的，让我们扩展前几章开始的项目，并为其创建一个仪表板！
- en: Creating the dashboard page
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建仪表板页面
- en: In the previous chapter, we created a functional login page that allows the
    user to sign in using their username and password. What we need to do next is
    to create the dashboard page, which the user will automatically get directed to
    upon successful login.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们创建了一个功能性的登录页面，允许用户使用他们的用户名和密码登录。接下来我们需要做的是创建仪表板页面，用户成功登录后将自动跳转到该页面。
- en: 'The dashboard page usually serves as a quick overview for the user about the
    status of their company, business, project, assets, and/or other statistics. The
    following image shows an example of what a dashboard page could look like:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 仪表板页面通常用作用户快速了解其公司、业务、项目、资产和/或其他统计数据的概览。以下图片展示了仪表板页面可能的外观：
- en: '![](img/00d8ae97-eb16-42e8-87b2-e6fc98288a8a.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00d8ae97-eb16-42e8-87b2-e6fc98288a8a.jpg)'
- en: As you can see, there are quite a number of charts and graphs that are being
    used on the dashboard page because it is the best way for displaying a huge number
    of data without making the users feel overwhelmed. Moreover, graphs and charts
    can let the users understand the overall situation easily without digging too
    much into the details.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，仪表板页面使用了相当多的图表和图形，因为这是在不让用户感到不知所措的情况下显示大量数据的最佳方式。此外，图表和图形可以让用户轻松了解整体情况，而无需深入细节。
- en: 'Let''s open up our previous project and open the `mainwindow.ui` file. The
    user interface should look something like this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们打开之前的项目并打开`mainwindow.ui`文件。用户界面应该看起来像这样：
- en: '![](img/d94821f7-5f65-4794-824b-f819318c9b22.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d94821f7-5f65-4794-824b-f819318c9b22.png)'
- en: As you can see, we already have the login page now, but we need to add in another
    page for the dashboard as well. For multiple pages to co-exist in the same program
    and to be able to switch between different pages at any time, Qt provides us with
    something called **QStackedWidget**.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们现在已经有了登录页面，但我们还需要添加另一个页面作为仪表板。为了让多个页面在同一个程序中共存，并能够随时在不同页面之间切换，Qt为我们提供了一种叫做**QStackedWidget**的东西。
- en: A stacked widget is just like a book that you can add more and more pages to,
    but it shows only one page at a time. Each page is a completely different GUI,
    so it won't interfere with other pages in the stacked widget.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 堆叠窗口就像一本书，你可以不断添加更多页面，但一次只显示一页。每一页都是完全不同的GUI，因此不会干扰堆叠窗口中的其他页面。
- en: 'Since the previous login page was not made with a stacked widget in mind, we
    have to make some adjustments to it. First, drag and drop a stacked widget from
    the Widget Box to the central widget of your application, and then, we need to
    move everything previously under the central widget into the first page of the
    stacked widget, which we renamed loginPage:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 由于之前的登录页面并不是为堆叠窗口而设计的，我们需要对其进行一些调整。首先，从小部件框中将堆叠窗口拖放到应用程序的中央小部件下，然后，我们需要将之前在中央小部件下的所有内容移动到堆叠窗口的第一页中，我们将其重命名为loginPage：
- en: '![](img/4e44e2d8-9594-4cea-88c6-970b2e7fb0b7.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4e44e2d8-9594-4cea-88c6-970b2e7fb0b7.png)'
- en: 'Next, set all the layout settings of the central widget to `0`, so that it
    contains no margin at all, like so:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将中央窗口部件的所有布局设置为`0`，这样它就完全没有边距，就像这样：
- en: '![](img/4870550e-3423-44cc-9e59-782f31959dd6.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4870550e-3423-44cc-9e59-782f31959dd6.png)'
- en: After that, we must cut away the code in the style sheet property of the central
    widget, and paste it to the login page's style sheet property. In other words,
    the background image, button style, and other visual settings are now only applied
    to the login page.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在那之后，我们必须将中央窗口部件的样式表属性中的代码剪切，并粘贴到登录页面的样式表属性中。换句话说，背景图片、按钮样式和其他视觉设置现在只应用于登录页面。
- en: 'Once you''re done, you should be getting two completely different GUIs (the
    dashboard page is empty for now) when switching between pages on the stacked widget:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，切换页面时，你应该会得到两个完全不同的GUI（仪表板页面目前为空）：
- en: '![](img/8c047da2-209c-4102-94c5-ac0e8ec76c60.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8c047da2-209c-4102-94c5-ac0e8ec76c60.png)'
- en: 'Next, drag and drop a grid layout to the dashboard page, and apply Layout Vertically
    to the dashboard page:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将网格布局拖放到仪表板页面，并将布局垂直应用到仪表板页面：
- en: '![](img/ed2ed650-4139-46e9-99f8-f2375414f6f1.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ed2ed650-4139-46e9-99f8-f2375414f6f1.png)'
- en: 'After that, drag and drop six Vertical Layout into the Grid Layout, like so:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在那之后，将六个垂直布局拖放到网格布局中，就像这样：
- en: '![](img/cc848c1e-1aa3-4a26-a6e1-966834507a66.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cc848c1e-1aa3-4a26-a6e1-966834507a66.png)'
- en: 'Then, select each of the vertical layouts we just added to the grid layout,
    and turn it into QFrame:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，选择我们刚刚添加到网格布局中的每个垂直布局，并将其转换为QFrame：
- en: '![](img/d5761610-be0c-4854-a859-603a27326ffc.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d5761610-be0c-4854-a859-603a27326ffc.png)'
- en: Just as we did in the charts implementation examples, we must turn the layout
    into a `QFrame` (or `QWidget`) so that we can attach the chart on it as a child
    object. If you directly drag a `QFrame` from the widget box and don't use morphing,
    the `QFrame` objects do not have the layout properties, and hence the charts may
    not be resizing themselves to fit the `QFrame`'s geometry. Also, name those `QFrame`
    objects as `chart1` to `chart6` as we're going to need them in the following steps.
    Once you're done with that, let's proceed to the code.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们在图表实现示例中所做的那样，我们必须将布局转换为`QFrame`（或`QWidget`），以便我们可以将图表附加到它作为子对象。如果你直接从部件框中拖动`QFrame`并且不使用变形，那么`QFrame`对象就没有布局属性，因此图表可能无法调整大小以适应`QFrame`的几何形状。此外，将这些`QFrame`对象命名为`chart1`到`chart6`，因为我们将在接下来的步骤中需要它们。完成后，让我们继续编写代码。
- en: 'First, open your project (`.pro`) file and add the `charts` module, just as
    we did in the earlier example in this chapter. Then, open up `mainwindow.h` and
    include all the headers required. This time around, we also include the `QLineSeries`
    header for creating the line chart:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，打开你的项目（`.pro`）文件，并添加`charts`模块，就像我们在本章的早期示例中所做的那样。然后，打开`mainwindow.h`并包含所有所需的头文件。这一次，我们还包括了用于创建折线图的`QLineSeries`头文件：
- en: '[PRE9]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'After that, declare the pointers for the charts, like so:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在那之后，声明图表的指针，就像这样：
- en: '[PRE10]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then, we''ll add the code for creating a bar chart. This is the same bar chart
    we created earlier in the chart implementation example, except it''s now attached
    to the `QFrame` object called `chart1`, and is set to enable *anti-aliasing* when
    rendering. The anti-aliasing feature removes the jagged edges of all charts and
    thus makes the rendering appear smoother:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将添加创建柱状图的代码。这是我们之前在图表实现示例中创建的相同的柱状图，只是现在它附加到名为`chart1`的`QFrame`对象上，并在渲染时设置为启用*抗锯齿*。抗锯齿功能可以消除所有图表的锯齿状边缘，从而使渲染看起来更加平滑：
- en: '[PRE11]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next, we also add the code for the pie chart. Again, this is the same pie chart
    from the previous example:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们还要添加饼图的代码。同样，这是来自先前示例的相同饼图：
- en: '[PRE12]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Finally, we also add a line graph to the dashboard, which is something new.
    The code is very simple and very similar to the pie chart:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们还向仪表板添加了一个折线图，这是新的内容。代码非常简单，非常类似于饼图：
- en: '[PRE13]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Once you''re done with that, we must add a resize-event slot to the main window
    class, and make the charts follow the size of their respective parent when the
    main window is being resized. This can be done by first going to the `mainwindow.h`
    and adding in the event-handler declaration:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，我们必须为主窗口类添加一个resize-event槽，并在主窗口调整大小时使图表跟随其各自父级的大小。首先，进入`mainwindow.h`并添加事件处理程序声明：
- en: '[PRE14]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then, open up `mainwindow.cpp` and add the following code:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，打开`mainwindow.cpp`并添加以下代码：
- en: '[PRE15]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Do note that the `QMainWindow::resizeEvent(event)` must be called first so that
    the default behavior will be triggered before you call your custom methods below
    it. `resizeEvent()` is one of the many event handlers provided by Qt for reacting
    to its events, such as mouse events, window events, paint events, and so on. Unlike
    the signal-and-slots mechanism, you need to replace the virtual function of the
    event handler to make it do what you want it to do when the event is being called.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，必须首先调用`QMainWindow::resizeEvent(event)`，以便在调用自定义方法之前触发默认行为。`resizeEvent()`是Qt提供的许多事件处理程序之一，用于对其事件做出反应，例如鼠标事件、窗口事件、绘制事件等。与信号和槽机制不同，你需要替换事件处理程序的虚函数，以使其在调用事件时执行你想要的操作。
- en: 'If we build and run the project now, we should be getting something like this:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在构建并运行项目，应该会得到类似这样的东西：
- en: '![](img/2a440a24-0d6a-4d47-b54b-a50aee5eaffc.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2a440a24-0d6a-4d47-b54b-a50aee5eaffc.png)'
- en: Looks pretty neat, doesn't it! However, for the sake of simplicity and so as
    not to confuse the readers, the charts are all hard-coded and are not using any
    data from the database. If you intend to use data from the database, don't make
    any SQL query during program startup, as this will make your program freeze if
    the data you're loading is very large, or your server is very slow.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来相当整洁，不是吗！然而，为了简单起见，也为了不让读者感到困惑，图表都是硬编码的，并且没有使用来自数据库的任何数据。如果你打算使用来自数据库的数据，在程序启动时不要进行任何SQL查询，因为如果你加载的数据非常大，或者你的服务器非常慢，这将使你的程序冻结。
- en: The best way to do it is to load the data only when you're switching from the
    login page to the dashboard page (or upon switching to any other pages) so that
    the loading time is less obvious to the user. To do this, right-click on the stacked
    widget and select Go to slot. Then, select currentChanged(int) and click OK.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 最好的方法是只在从登录页面切换到仪表板页面（或切换到任何其他页面时）加载数据，以便加载时间对用户不太明显。要做到这一点，右键单击堆叠窗口，然后选择转到槽。然后，选择currentChanged(int)并单击确定。
- en: '![](img/531baa65-d083-4a70-a57c-aeff6def670a.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/531baa65-d083-4a70-a57c-aeff6def670a.png)'
- en: After that, a new slot function will be created automatically by Qt. This function
    will be called automatically when the stacked widget is switching between pages.
    You can check which page it is currently switching over to by checking the `arg1`
    variable. The `arg1` value will be `0` if the target page is the first page within
    stacked widget, or `1` if the target is the second page, and so on.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，Qt会自动创建一个新的槽函数。当堆叠窗口在页面之间切换时，此函数将自动调用。您可以通过检查`arg1`变量来查看它当前切换到的页面。如果目标页面是堆叠窗口中的第一页，则`arg1`的值将为`0`，如果目标是第二页，则为`1`，依此类推。
- en: 'You can submit the SQL query only when the stacked widget is showing the dashboard
    page, which is the second page (`arg1`equals to `1`):'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在堆叠窗口显示仪表板页面时，才能提交SQL查询，这是第二页（`arg1`等于`1`）：
- en: '[PRE16]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Phew! That's a lot to digest for this chapter! Hopefully, this chapter will
    help you understand how to create a beautiful and informative page for your project.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀！这一章内容真是太多了！希望这一章能帮助您了解如何为您的项目创建一个美丽而丰富的页面。
- en: Summary
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The chart module in Qt is the combination of feature and visual aesthetic. Not
    only is it easy to implement without the need to write a very long code just to
    display the chart, but it is also customizable to suit your visual requirements.
    We really need to be thankful to Qt developers for opening up this module and
    allowing non-commercial users to use it for free!
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Qt中的图表模块是功能和视觉美学的结合。它不仅易于实现，而且无需编写非常长的代码来显示图表，而且还可以根据您的视觉要求进行定制。我们真的需要感谢Qt开发人员开放了这个模块，并允许非商业用户免费使用它！
- en: In this chapter, we have learned how to create a really nice-looking dashboard,
    and display different types of charts on it using the Qt Chart module. In the
    coming chapter, we will learn how to use view widget, dialog boxes, and file-selection
    dialogs.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用Qt图表模块创建一个真正漂亮的仪表板，并在其上显示不同类型的图表。在接下来的章节中，我们将学习如何使用视图部件、对话框和文件选择对话框。
