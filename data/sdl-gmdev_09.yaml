- en: Chapter 9. Creating Conan the Caveman
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章 创建康纳洞穴人
- en: In the previous chapter, the creation of Alien Attack demonstrated that the
    framework is now at a point where it can be used to quickly create a 2D side scrolling
    shooter. Other genres are also simple to make with most of the changes once again
    being contained within the object classes.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，外星人攻击的创建演示了框架现在已达到可以快速创建2D横版射击游戏的程度。其他类型也简单易制作，大多数更改仍然包含在对象类中。
- en: 'In this chapter, we will cover:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍：
- en: Adapting the previous code base for a new game
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为新游戏调整之前的代码库
- en: More precise tile-collision detection
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更精确的瓦片碰撞检测
- en: Handling jumping
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理跳跃
- en: Possible additions to the framework
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 框架可能的添加
- en: 'This chapter will use the framework to create a platform game, Conan the Caveman.
    Here is a screenshot of the finished game level:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将使用框架创建一个平台游戏，康纳洞穴人。以下是完成的游戏关卡截图：
- en: '![Creating Conan the Caveman](img/6821OT_09_01.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![创建康纳洞穴人](img/6821OT_09_01.jpg)'
- en: 'Here''s another screenshot with more enemies:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个带有更多敌人的截图：
- en: '![Creating Conan the Caveman](img/6821OT_09_02.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![创建康纳洞穴人](img/6821OT_09_02.jpg)'
- en: As with the previous chapter, this chapter is not a step-by-step guide to creating
    Conan the Caveman, rather it is an overview of the most important aspects of the
    game. The project for the game is available in the source code downloads.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 与上一章一样，本章不是创建康纳洞穴人的逐步指南，而是对游戏最重要的方面的概述。游戏的项目可以在源代码下载中找到。
- en: Setting up the basic game objects
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置基本游戏对象
- en: 'In some ways this game is more complicated than Alien Attack, whereas in other
    ways it is simpler. This section will cover the changes that were made to the
    Alien Attack source code: what was altered, what was removed, and what was added.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些方面，这个游戏比外星人攻击更复杂，而在其他方面则更简单。本节将介绍对外星人攻击源代码所做的更改：什么被修改了，什么被移除了，什么被添加了。
- en: No more bullets or bullet collisions
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 没有更多子弹或子弹碰撞
- en: 'Conan the Caveman does not use projectile weapons, and therefore, there is
    no longer a `Bullet` class and the `CollisonManager` class no longer needs to
    have a function that checks for collisions between them; it only checks for the
    `Player` and `Enemy` collisions:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 康纳洞穴人没有使用投射武器，因此不再有`Bullet`类，`CollisonManager`类也不再需要检查它们之间的碰撞功能；它只检查`Player`和`Enemy`的碰撞：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Game objects and map collisions
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 游戏对象和地图碰撞
- en: 'Almost all objects will need to collide with the tile map and react accordingly.
    The `GameObject` class now has a private member that is a pointer to the collision
    layers; previously only the `Player` class had this variable:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有对象都需要与瓦片地图发生碰撞并相应地反应。`GameObject`类现在有一个私有成员，是一个指向碰撞层的指针；之前只有`Player`类有这个变量：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`GameObject` also now has a function to set this variable:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`GameObject`现在也有一个设置此变量的函数：'
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `Player` class would previously have this set at the end of the `LevelParser::parseLevel`
    function, as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`Player`类之前会在`LevelParser::parseLevel`函数的末尾设置这个值，如下所示：'
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This is no longer needed, as each `GameObject` gets their `m_pCollisionLayers`
    variables set on creation in the object-layer parsing:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这不再需要，因为每个`GameObject`在对象层解析时都会在创建时设置其`m_pCollisionLayers`变量：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: ShooterObject is now PlatformerObject
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ShooterObject现在是PlatformerObject
- en: 'The shooter-specific code from Alien Attack has been stripped out of `ShooterObject`
    and the class is renamed to `PlatformerObject`. Anything that all game objects
    for this game will make use of is within this class:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 外星人攻击的特定代码已被从`ShooterObject`中移除，并将类重命名为`PlatformerObject`。任何这个游戏的所有游戏对象都将使用的内容都包含在这个类中：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'There are some variables and functions from Alien Attack that are still useful,
    plus a few new functions. One of the most important additions is the `checkCollideTile`
    function, which takes `Vector2D` as a parameter and checks whether it causes a
    collision:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然有一些来自外星人攻击的有用变量和函数，还有一些新函数。其中最重要的新增功能是`checkCollideTile`函数，它接受`Vector2D`作为参数，并检查它是否会导致碰撞：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This is quite a large function, but it is essentially the same as how Alien
    Attack checked for tile collisions. One difference is the y position check:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个相当大的函数，但本质上与外星人攻击检查瓦片碰撞的方式相同。一个区别是y位置的检查：
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This is used to ensure that we can fall off the map (or fall into a hole) without
    the function trying to access tiles that are not there. For example, if the object''s
    position is outside the map, the following code would try to access tiles that
    do not exist and would therefore fail:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这是为了确保我们可以在地图边缘掉落（或掉入坑中）而不会尝试访问不存在的瓦片。例如，如果对象的位置在地图之外，以下代码将尝试访问不存在的瓦片，因此会失败：
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The y value check prevents this.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: y值检查可以防止这种情况发生。
- en: The Camera class
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相机类
- en: In a game such as Alien Attack, precise map-collision detection is not terribly
    important; it is a lot more important to have precise bullet, player, and enemy
    collisions. A platform game, however, needs very precise map collision requiring
    the need for a slightly different way of moving the map, so that no precision
    is lost when scrolling.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在像《外星攻击》这样的游戏中，精确的地图碰撞检测并不是特别重要；更重要的是有精确的子弹、玩家和敌人碰撞。然而，平台游戏需要非常精确的地图碰撞，这要求以稍微不同的方式移动地图，以便在滚动时不会丢失精度。
- en: 'In Alien Attack, the map did not actually move; some variables were used to
    determine which point of the map to draw and this gave the illusion of the map
    scrolling. In Conan the Caveman, the map will move so that any collision detection
    routines are relative to the actual position of the map. For this a `Camera` class
    was created:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在《外星攻击》中，地图实际上并没有移动；一些变量被用来确定绘制地图的哪个点，这产生了地图滚动的错觉。在《康纳原始人》中，地图将移动，以便任何碰撞检测例程都与地图的实际位置相关。为此，创建了一个`Camera`类：
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This class is very simple, as it merely holds a location and updates it using
    the position of a target, referred to the pointer as `m_pTarget`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类非常简单，因为它仅仅保存一个位置，并使用目标的位置更新它，该目标被称为指针`m_pTarget`：
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This could also be updated to include the y value as well, but because this
    is a horizontal-scrolling game, it is not needed here and so the y is returned
    as `0`. This camera position is used to move the map and decide which tiles to
    draw.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这也可以更新以包括y值，但由于这是一个水平滚动游戏，这里不需要，因此y值返回为`0`。这个相机位置用于移动地图并决定绘制哪些瓦片。
- en: Camera-controlled map
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相机控制的地图
- en: 'The `TileLayer` class now needs to know the complete size of the map rather
    than just one section of it; this is passed in through the constructor:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`TileLayer`类现在需要知道地图的完整大小，而不仅仅是其中的一部分；这是通过构造函数传入的：'
- en: '[PRE11]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`LevelParser` passes the height and width in as it creates each `TileLayer`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`LevelParser`在创建每个`TileLayer`时传入高度和宽度：'
- en: '[PRE12]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `TileLayer` class uses these values to set its row and column variables:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`TileLayer`类使用这些值来设置其行和列变量：'
- en: '[PRE13]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'With these changes, the tile map now moves according to the position of the
    camera and skips any tiles that are outside the viewable area:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些更改，瓦片地图现在根据相机的位置移动，并跳过任何在可视区域之外的瓦片：
- en: '[PRE14]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The Player class
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 玩家类
- en: 'The `Player` class now has to contend with jumping as well as moving, all while
    checking for map collisions. The `Player::update` function has undergone quite
    a change:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`Player`类现在必须应对跳跃以及移动，同时检查地图碰撞。`Player::update`函数已经发生了相当大的变化：'
- en: '[PRE15]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'As movement is such an important part of this class, there is a function that
    is dedicated to handling it:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 由于移动是这个类中如此重要的部分，因此有一个专门处理它的函数：
- en: '[PRE16]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Tip
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Notice that x and y checking has been split into two different parts; this is
    extremely important to make sure that an x collision doesn't stop y movement and
    vice versa.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到x和y检查已经被分成两个不同的部分；这对于确保x碰撞不会停止y移动，反之亦然，非常重要。
- en: 'The `m_lastSafePos` variable is used to put the player back into a safe spot
    after they are respawned. For example, if the player was to fall off the edge
    of the platform in the following screenshot and therefore land on the spikes below,
    he would be respawned at pretty much the same place as in the screenshot:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`m_lastSafePos`变量用于在玩家重生后将玩家放回一个安全的位置。例如，如果玩家在以下截图中的平台边缘掉落，并因此落在下面的尖刺上，他将在与截图几乎相同的位置重生：'
- en: '![The Player class](img/6821OT_09_03.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![玩家类](img/6821OT_09_03.jpg)'
- en: 'Finally, the handle input function now sets Boolean variables for moving to
    the right-hand side and left-hand side or jumping:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，处理输入函数现在为向右移动、向左移动或跳跃设置了布尔变量：
- en: '[PRE17]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This is all fairly self-explanatory apart from the jumping. When the player
    jumps, it sets the `m_bCanJump` variable to `false`, so that on the next loop
    the jump will not be called again, due to the fact that jump can only happen when
    the `m_bCanJump` variable is `true`; (landing after the jump sets this variable
    back to `true`).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都很直观，除了跳跃。当玩家跳跃时，它会将`m_bCanJump`变量设置为`false`，因此在下一个循环中，由于跳跃只能在`m_bCanJump`变量为`true`时发生，所以不会再次调用跳跃；（跳跃后落地会将此变量重新设置为`true`）。
- en: Possible additions
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可能的添加
- en: It wouldn't be hard to improve on Conan the Caveman's gameplay; increasing enemy
    and trap numbers would make the game significantly more exciting to play. The
    game could also benefit from some height to the levels so that players could really
    explore the map (Metroid style). Other gameplay improvements could include moving
    platforms, ladders, and bosses.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 改进康纳洞穴人的游戏玩法并不难；增加敌人和陷阱的数量会使游戏玩起来更加刺激。游戏还可以通过增加关卡的高度来受益，这样玩家就可以真正地探索地图（类似《银河战士》风格）。其他游戏玩法改进可能包括移动平台、梯子和Boss。
- en: Summary
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Our reusable framework has proved its worth; two games have been created with
    minimal code duplication.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的可重复使用框架已经证明了自己的价值；通过最小化代码重复，已经创建了两个游戏。
- en: This chapter looked at scrolling a tile map using the position of the player
    along with collision detection. Tile-map collision was also covered, along with
    the important point of splitting x and y movement for effective movement in a
    platform game. Conan the Caveman is a great starting point for any other 2D game
    such as a scrolling beat-em-up or even a merging of this chapter and the last
    to create a platform shooter.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 本章探讨了使用玩家的位置进行滚动地图以及碰撞检测。还涵盖了瓦片地图碰撞，以及将x和y移动分开以在平台游戏中有效移动的重要点。康纳洞穴人是一个很好的起点，对于任何其他2D游戏，如滚动打斗游戏，甚至可以将本章和上一章结合来创建平台射击游戏。
- en: I hope that by now you have a good understanding of how to use SDL2.0 along
    with C++ to create games and how to effectively break game code apart to create
    a reusable framework. This is only the start and there are many more game-programming
    adventures ahead. Good luck!
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望到现在为止，你已经很好地理解了如何使用SDL2.0和C++来创建游戏，以及如何有效地拆分游戏代码以创建可重复使用的框架。这只是一个开始，还有更多游戏编程的冒险等着你。祝你好运！
