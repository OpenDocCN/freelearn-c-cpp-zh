["```cpp\n#include <QMainWindow> \n#include <QPainter> \n```", "```cpp\npublic:\n    explicit MainWindow(QWidget *parent = 0);\n    ~MainWindow();\n    virtual void paintEvent(QPaintEvent *event); \n```", "```cpp\nvoid MainWindow::paintEvent(QPaintEvent *event) \n{ \n   QPainter painter; \n   painter.begin(this); \n\n   // Draw Line \n   painter.drawLine(QPoint(50, 60), QPoint(100, 100)); \n\n   // Draw Rectangle \n   painter.setBrush(Qt::BDiagPattern); \n   painter.drawRect(QRect(40, 120, 80, 30)); \n\n   // Draw Ellipse \n   QPen ellipsePen; \n   ellipsePen.setColor(Qt::red); \n   ellipsePen.setStyle(Qt::DashDotLine); \n   painter.setPen(ellipsePen); \n   painter.drawEllipse(QPoint(80, 200), 50, 20); \n\n   // Draw Rectangle \n   QPainterPath rectPath; \n   rectPath.addRect(QRect(150, 20, 100, 50)); \n   painter.setPen(QPen(Qt::red, 1, Qt::DashDotLine, Qt::FlatCap, \n   Qt::MiterJoin)); \n   painter.setBrush(Qt::yellow); \n   painter.drawPath(rectPath); \n\n   // Draw Ellipse \n   QPainterPath ellipsePath; \n   ellipsePath.addEllipse(QPoint(200, 120), 50, 20); \n   painter.setPen(QPen(QColor(79, 106, 25), 5, Qt::SolidLine, \n   Qt::FlatCap, Qt::MiterJoin)); \n   painter.setBrush(QColor(122, 163, 39)); \n   painter.drawPath(ellipsePath); \n\n   painter.end(); \n} \n```", "```cpp\nQPainter painter; \npainter.begin(this); \n\n// Draw Text \npainter.setFont(QFont(\"Times\", 14, QFont::Bold)); \npainter.drawText(QPoint(20, 30), \"Testing\"); \n\n// Draw Line \npainter.drawLine(QPoint(50, 60), QPoint(100, 100)) \n```", "```cpp\nQT += core gui svg \n```", "```cpp\n#include <QtSvg/QSvgGenerator> \n#include <QFileDialog> \n```", "```cpp\nvoid MainWindow::on_actionSave_as_SVG_triggered() \n{ \n    QString filePath = QFileDialog::getSaveFileName(this, \"Save SVG\", \"\", \"SVG files (*.svg)\"); \n\n    if (filePath == \"\") \n        return; \n\n    QSvgGenerator generator; \n    generator.setFileName(filePath); \n    generator.setSize(QSize(this->width(), this->height())); \n    generator.setViewBox(QRect(0, 0, this->width(), this->height())); \n    generator.setTitle(\"SVG Example\"); \n    generator.setDescription(\"This SVG file is generated by Qt.\"); \n\n    paintAll(&generator); \n} \n```", "```cpp\nvoid MainWindow::paintAll(QSvgGenerator *generator) \n{ \n    QPainter painter; \n\n    if (generator) \n        painter.begin(generator); \n    else \n        painter.begin(this); \n\n   // Draw Text \n    painter.setFont(QFont(\"Times\", 14, QFont::Bold)); \n   painter.drawText(QPoint(20, 30), \"Hello World!\"); \n```", "```cpp\nvoid MainWindow::paintEvent(QPaintEvent *event) \n{ \n   paintAll(); \n} \n```", "```cpp\n#include <QMainWindow> \n#include <QPainter> \n#include <QMouseEvent> \n#include <QFileDialog> \n```", "```cpp\npublic:\n    explicit MainWindow(QWidget *parent = 0);\n    ~MainWindow();\n    virtual void mousePressEvent(QMouseEvent *event); \n    virtual void mouseMoveEvent(QMouseEvent *event); \n    virtual void mouseReleaseEvent(QMouseEvent *event); \n    virtual void paintEvent(QPaintEvent *event); \n    virtual void resizeEvent(QResizeEvent *event); \n```", "```cpp\nprivate: \n    Ui::MainWindow *ui; \n QImage image; \n    bool drawing; \n    QPoint lastPoint; \n    int brushSize; \n    QColor brushColor; \n```", "```cpp\nMainWindow::MainWindow(QWidget *parent) : \n    QMainWindow(parent), \n    ui(new Ui::MainWindow) \n{ \n    ui->setupUi(this); \n\n image = QImage(this->size(), QImage::Format_RGB32); \n    image.fill(Qt::white); \n\n    drawing = false; \n    brushColor = Qt::black; \n    brushSize = 2; \n} \n```", "```cpp\nvoid MainWindow::paintEvent(QPaintEvent *event)\n{\n    QPainter canvasPainter(this);\n    canvasPainter.drawImage(this->rect(), image, image.rect());\n}\n```", "```cpp\nvoid MainWindow::resizeEvent(QResizeEvent *event) \n{ \n    QImage newImage(event->size(), QImage::Format_RGB32); \n    newImage.fill(qRgb(255, 255, 255)); \n\n    QPainter painter(&newImage); \n    painter.drawImage(QPoint(0, 0), image); \n    image = newImage; \n} \n```", "```cpp\nvoid MainWindow::mousePressEvent(QMouseEvent *event) \n{ \n    if (event->button() == Qt::LeftButton) \n    { \n        drawing = true; \n        lastPoint = event->pos(); \n    } \n} \n```", "```cpp\nvoid MainWindow::mouseMoveEvent(QMouseEvent *event) \n{ \n    if ((event->buttons() & Qt::LeftButton) && drawing) \n    { \n        QPainter painter(&image); \n        painter.setPen(QPen(brushColor, brushSize, Qt::SolidLine, \n        Qt::RoundCap, Qt::RoundJoin)); \n        painter.drawLine(lastPoint, event->pos()); \n\n        lastPoint = event->pos(); \n        this->update(); \n    } \n} \n```", "```cpp\nvoid MainWindow::mouseReleaseEvent(QMouseEvent *event) \n{ \n    if (event->button() == Qt::LeftButton) \n    { \n        drawing = false; \n    } \n} \n```", "```cpp\nvoid MainWindow::on_action2px_triggered() \n{ \n    brushSize = 2; \n} \n\nvoid MainWindow::on_action5px_triggered() \n{ \n    brushSize = 5; \n} \n\nvoid MainWindow::on_action10px_triggered() \n{ \n    brushSize = 10; \n} \n```", "```cpp\nvoid MainWindow::on_actionBlack_triggered() \n{ \n    brushColor = Qt::black; \n} \n\nvoid MainWindow::on_actionWhite_triggered() \n{ \n    brushColor = Qt::white; \n} \n\nvoid MainWindow::on_actionRed_triggered() \n{ \n    brushColor = Qt::red; \n} \n\nvoid MainWindow::on_actionGreen_triggered() \n{ \n    brushColor = Qt::green; \n} \n\nvoid MainWindow::on_actionBlue_triggered() \n{ \n    brushColor = Qt::blue; \n} \n```", "```cpp\nMainWindow::MainWindow(QWidget *parent) : \n    QMainWindow(parent), \n    ui(new Ui::MainWindow) \n{ \n    ui->setupUi(this); \n\n    image = QImage(this->size(), QImage::Format_RGB32); \n    image.fill(Qt::white); \n\n    QImage tux; \n    tux.load(qApp->applicationDirPath() + \"/tux.png\"); \n    QPainter painter(&image); \n    painter.drawImage(QPoint(100, 100), tux); \n\n    drawing = false; \n    brushColor = Qt::black; \n    brushSize = 2; \n} \n```", "```cpp\nvoid MainWindow::on_actionClear_triggered() \n{ \n    image.fill(Qt::white); \n    this->update(); \n} \n```", "```cpp\nvoid MainWindow::on_actionSave_triggered() \n{ \n    QString filePath = QFileDialog::getSaveFileName(this, \"Save Image\", \"\", \"PNG (*.png);;JPEG (*.jpg *.jpeg);;All files (*.*)\"); \n\n    if (filePath == \"\") \n        return; \n\n    image.save(filePath); \n} \n```"]