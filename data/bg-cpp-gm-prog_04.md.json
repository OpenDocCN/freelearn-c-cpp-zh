["```cpp\nwhile (window.isOpen()) \n{      \n\n} \n\n```", "```cpp\nint numberOfZombies = 100; \n\nwhile(numberOfZombies > 0) \n{ \n   // Player kills a zombie \n   numberOfZombies--; \n\n   // numberOfZombies decreases each pass through the loop \n} \n\n// numberOfZOmbies is no longer greater than 0 \n\n```", "```cpp\nint availableCoins = 10; \n\nwhile(availableCoins > 10) \n{ \n   // more code here. \n   // Won't run unless availableCoins is greater than 10 \n} \n\n```", "```cpp\nint playerLives = 3; \nint alienShips = 10; \n\nwhile(playerLives !=0 && alienShips !=0 ) \n{ \n   // Handle input \n   // Update the scene \n   // Draw the scene \n} \n\n// continue here when either playerLives or alienShips equals 0 \n\n```", "```cpp\nint x = 1; \n\nwhile(x > 0) \n{ \n   x--; \n   // x is now 0 so the condition is false \n   // But this line still runs \n   // and this one \n   // and me! \n} \n\n// Now I'm done! \n\n```", "```cpp\nint y = 0; \n\nwhile(true) \n{ \n   y++; // Bigger... Bigger... \n} \n\n```", "```cpp\nint z = 0; \n\nwhile(true) \n{ \n   z++; // Bigger... Bigger... \n break; // No you're not \n\n   // Code doesn't reach here \n} \n\n```", "```cpp\nint x = 0; \nint max = 10; \n\nwhile(true) \n{ \n   x++; // Bigger... Bigger... \n\n if(x == max)\n   {     \n     break;   \n   } // No you're not \n\n   // code reaches here only until x = 10 \n} \n\n```", "```cpp\nfor(int x = 0; x < 100; x ++) \n{ \n   // Something that needs to happen 100 times goes here \n} \n\n```", "```cpp\nfor(int i = 10; i > 0; i--) \n{ \n   // countdown \n} \n\n// blast off \n\n```", "```cpp\nint someInts[10]; \n\n```", "```cpp\nsomeInts[0] = 99; \n\n```", "```cpp\nsomeInts[1] = 999; \n\n```", "```cpp\nsomeInts[9] = 3; \n\n```", "```cpp\nsomeInts[2] = someInts[0] + someInts[1]; \n\n```", "```cpp\nint a = 9999; \nsomeInts[4] = a; \n\n```", "```cpp\nfloat myFloatingPointArray[3] {3.14f, 1.63f, 99.0f}; \n\n```", "```cpp\nfor(int i = 0; i < 10; i++) \n{ \n   uselessArray[i] = i; \n} \n\n```", "```cpp\n// someArray[] is declared and initialized with 9999 values\n\nfor(int i = 0; i < 9999; i++) \n{ \n   // Do something with each entry in the array \n} \n\n```", "```cpp\nZombie horde [5] {zombie1, zombie2, zombie3}; // etc... \n\n```", "```cpp\nswitch(expression) \n{ \n\n   // More code here \n} \n\n```", "```cpp\ncase x: \n    //code to for x \n    break; \n\ncase y: \n    //code for y \n    break; \n\n```", "```cpp\ndefault: // Look no value \n    // Do something here if no other case statements are true \n    break; \n\n```", "```cpp\n// get input from user in a char called command \n\nswitch(command){ \n\n   case 'n': \n      // Handle move here \n      break; \n\n   case 'e': \n      // Handle move here \n      break; \n\n   case 's': \n      // Handle move here \n      break; \n\n   case 'w': \n      // Handle move here \n      break;    \n\n   // more possible cases \n\n   default: \n      // Ask the player to try again \n      break; \n\n} \n\n```", "```cpp\nenum class zombieTypes {REGULAR, RUNNER, CRAWLER, SPITTER, BLOATER }; \n\n```", "```cpp\nzombieType dave = zombieTypes::CRAWLER; \nzombieType angela = zombieTypes::SPITTER \nzombieType jose = zombieTypes::BLOATER \n\n/* \n   Zombies are fictional creatures and any resemblance \n   to real people is entirely coincidental \n*/ \n\n```", "```cpp\nenum class side { LEFT, RIGHT, NONE }; \n\n```", "```cpp\n// The player starts on the left \nside playerSide = side::LEFT; \n\n```", "```cpp\nbranchPositions[3] = side::NONE; \n\n```", "```cpp\nif(branchPositions[5] == playerSide) \n{ \n   // The lowest branch is the same side as the player \n   // SQUISHED!! \n} \n\n```", "```cpp\npublic void bombPlayer(int power, int direction) \n\n```", "```cpp\nvoid shootLazers(int power, int direction) \n{ \n    // ZAPP! \n} \n\n```", "```cpp\n// Attack the player \nbombPlayer(50, 180) // Run the code in the function \n//  I'm back again - code continues here after the function ends \n\n```", "```cpp\nint addAToB(int a, int b) \n{ \n   int answer = a + b; \n   return answer; \n} \n\n```", "```cpp\nint myAnswer = addAToB(2, 4); \n\n```", "```cpp\nreturn type | name of function | (parameters)\n```", "```cpp\nint addAToB(int a, int b)\n{\n    int answer = a + b; \n    return answer; \n} \n\n```", "```cpp\nvoid doWhatever()\n{ \n\n    // our code \n    // I'm done going back to calling code here \n    // no return is necessary \n\n} \n\n```", "```cpp\nvoid doSomethigCool()\n{ \n\n   // our code \n\n   // I can do this as long as I don't try and add a value \n   return; \n} \n\n```", "```cpp\nvoid doYetAnotherThing()\n{ \n   // some code \n\n   if(someCondition)\n   { \n\n      // if someCondition is true returning to calling code \n      // before the end of the function body \n      return; \n   } \n\n   // More code that might or might not get executed \n\n   return; \n\n   // As I'm at the bottom of the function body \n   // and the return type is void, I'm \n   // really not necessary but I suppose I make it \n   // clear that the function is over. \n } \n\nbool detectCollision(Ship a, Ship b)\n{ \n\n   // Detect if collision has occurred \n   if(collision) \n   { \n      // Bam!!! \n      return true; \n   } \n   else \n   { \n      // Missed \n      return false; \n   } \n\n} \n\n```", "```cpp\n// OK time to call some functions \ndoWhatever(); \ndoSomethingCool(); \ndoYetAnotherThing(); \n\nif (detectCollision(milleniumFalcon, lukesXWing)) \n{ \n   // The jedi are doomed! \n   // But there is always Leia. \n   // Unless she was on the Falcon? \n} \nelse \n{ \n   // Live to fight another day \n} \n\n//continue with code from here \n\n```", "```cpp\nvoid functionaroonieboonie(int blibbityblob, float floppyfloatything) \n{ \n   //code here \n} \n\n```", "```cpp\nvoid doSomeVerySpecificTask() \n{ \n   //code here \n} \n\nvoid getMySpaceShipHealth() \n{ \n   //code here \n} \n\nvoid startNewGame() \n{ \n   //code here \n} \n\n```", "```cpp\nint addAToB(int a, int b) \n{ \n\n   int answer = a + b; \n   return answer; \n\n} \n\n```", "```cpp\n// code here \n// some code \n\n```", "```cpp\n// The prototype \n// Notice the semicolon \nint addAToB(int a, int b); \n\nint main() \n{ \n\n   // Call the function \n   // Store the result in answer \n   int answer = addAToB(2,2); \n\n   // Called before the definition \n   // but that's OK because of the prototype \n\n   // Exit main \n   return 0; \n\n}// End of main \n\n// The function definition \nint addAToB(int a, int b) \n{ \n    return a + b; \n} \n\n```", "```cpp\nspriteBee.setPosition... \nwindow.draw... \n// etc \n\n```", "```cpp\n#include \"stdafx.h\" \n#include <sstream> \n#include <SFML/Graphics.hpp> \n\nusing namespace sf; \n\n// Function declaration\nvoid updateBranches(int seed);\n\nconst int NUM_BRANCHES = 6;\nSprite branches[NUM_BRANCHES];\n\n// Where is the player/branch?\n// Left or Right\nenum class side { LEFT, RIGHT, NONE };\nside branchPositions[NUM_BRANCHES]; \n\nint main() \n{ \n\n```", "```cpp\n// Position the text \nFloatRect textRect = messageText.getLocalBounds(); \nmessageText.setOrigin(textRect.left + \n   textRect.width / 2.0f, \n   textRect.top + \n   textRect.height / 2.0f); \n\nmessageText.setPosition(1920 / 2.0f, 1080 / 2.0f); \n\nscoreText.setPosition(20, 20); \n\n// Prepare 6 branches\nTexture textureBranch;\ntextureBranch.loadFromFile(\"graphics/branch.png\");\n\n// Set the texture for each branch sprite\nfor (int i = 0; i < NUM_BRANCHES; i++) \n{   \n  branches[i].setTexture(textureBranch);   \n  branches[i].setPosition(-2000, -2000);   \n  // Set the sprite's origin to dead center   \n  // We can then spin it round without changing its position \n  branches[i].setOrigin(220, 20);\n} \n\nwhile (window.isOpen()) \n{ \n\n```", "```cpp\n   // Update the score text \n   std::stringstream ss; \n   ss << \"Score: \" << score; \n   scoreText.setString(ss.str()); \n\n // update the branch sprites   \n   for (int i = 0; i < NUM_BRANCHES; i++)   \n   {     \n     float height = i * 150;     \n     if (branchPositions[i] == side::LEFT)     \n     {        \n       // Move the sprite to the left side        \n       branches[i].setPosition(610, height);\n\n       // Flip the sprite round the other way        \n       branches[i].setRotation(180);     \n     }\n\n     else if (branchPositions[i] == side::RIGHT)     \n     {        \n       // Move the sprite to the right side        \n       branches[i].setPosition(1330, height);    \n\n       // Set the sprite rotation to normal        \n       branches[i].setRotation(0);     \n     }     \n     else     \n     {        \n       // Hide the branch        \n       branches[i].setPosition(3000, height);     \n     }   \n   } \n} // End if(!paused) \n\n/* \n**************************************** \nDraw the scene \n**************************************** \n\n```", "```cpp\nif() \n{ \n} \nelse if() \n{ \n} \nelse \n{ \n} \n\n```", "```cpp\n// Draw the clouds \nwindow.draw(spriteCloud1); \nwindow.draw(spriteCloud2); \nwindow.draw(spriteCloud3); \n\n// Draw the branches\nfor (int i = 0; i < NUM_BRANCHES; i++) \n{   \n  window.draw(branches[i]);\n} \n\n// Draw the tree \nwindow.draw(spriteTree); \n\n```", "```cpp\n// Function definition \nvoid updateBranches(int seed) \n{ \n   // Move all the branches down one place \n   for (int j = NUM_BRANCHES-1; j > 0; j--) \n   {    \n      branchPositions[j] = branchPositions[j - 1]; \n   } \n} \n\n```", "```cpp\n// Function definition \nvoid updateBranches(int seed) \n{ \n   // Move all the branches down one place \n   for (int j = NUM_BRANCHES-1; j > 0; j--) \n   {    \n      branchPositions[j] = branchPositions[j - 1]; \n   } \n\n // Spawn a new branch at position 0   \n   // LEFT, RIGHT or NONE   \n   srand((int)time(0)+seed);   \n   int r = (rand() % 5);   \n   switch (r) \n   {   \n   case 0:     \n     branchPositions[0] = side::LEFT;     \n     break;   \n\n   case 1:     \n     branchPositions[0] = side::RIGHT;     \n     break;   \n\n   default:     \n     branchPositions[0] = side::NONE;     \n     break;  \n    } \n} \n\n```", "```cpp\nupdateBranches(1);\nupdateBranches(2);\nupdateBranches(3);\nupdateBranches(4);\nupdateBranches(5); \n\nwhile (window.isOpen()) \n{ \n\n```"]