- en: Getting Started with C++17
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用C++17
- en: 'Academics often describe programming concepts in theory but like to leave implementation
    to someone else, preferably someone from the industry. In this book, we cover
    it all: we will describe the theory behind C++ concepts and implement our own
    game as well. If you''re a first-time programmer, you have a lot to learn!'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 学术界经常在理论上描述编程概念，但喜欢把实现留给别人，最好是来自行业的人。在这本书中，我们将涵盖所有内容：我们将描述C++概念的理论，并实现我们自己的游戏。如果您是第一次编程，您有很多东西要学习！
- en: The first thing I will recommend is that you do the exercises. You cannot learn
    to program simply by reading. You must apply the theory in the exercises to absorb
    it and be able to use it in the future.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我首先建议您做练习。仅仅通过阅读是学不会编程的。您必须在练习中应用理论，才能吸收并将来能够使用它。
- en: We are going to get started by programming very simple programs in C++. I know
    that you want to start playing your finished game right now. However, you have
    to start at the beginning to get to that end (if you really want to, skip over
    to [Chapter 13](f01eeded-ad93-4d9f-af89-8eb96b6cd66d.xhtml)*,* *Spell Book*, or
    open some of the samples to get a feel for where we are going).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从编写非常简单的C++程序开始。我知道您现在想要开始玩您完成的游戏。但是，您必须从头开始才能达到目标（如果您真的想要，可以跳到[第13章](f01eeded-ad93-4d9f-af89-8eb96b6cd66d.xhtml)*，*
    *咒语书*，或打开一些示例来感受我们的方向）。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Setting up a new project (in Visual Studio or Xcode)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置一个新项目（在Visual Studio或Xcode中）
- en: Your first C++ project
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的第一个C++项目
- en: How to handle errors
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何处理错误
- en: What are building and compiling?
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是构建和编译？
- en: Setting up our project
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置我们的项目
- en: Our first C++ program will be written outside of UE4\. To start with, I will
    provide steps for both Xcode and Visual Studio 2017, but after this chapter, I
    will try to talk about just the C++ code without reference to whether you're using
    Microsoft Windows or macOS.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个C++程序将在UE4之外编写。首先，我将为Xcode和Visual Studio 2017提供步骤，但在本章之后，我将尝试只讨论C++代码，而不涉及您是使用Microsoft
    Windows还是macOS。
- en: Using Microsoft Visual Studio on Windows
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows上使用Microsoft Visual Studio
- en: In this section, we will install an **integrated development environment** (**IDE**)
    that will allow you to edit code for Windows, Microsoft's Visual Studio. Please
    skip to the next section if you are using a Mac.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将安装一个允许您编辑Windows代码的**集成开发环境**（**IDE**），即微软的Visual Studio。如果您使用的是Mac，请跳到下一节。
- en: Downloading and Installing Visual Studio
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载和安装Visual Studio
- en: To start, download and install Microsoft Visual Studio Community 2017.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，下载并安装Microsoft Visual Studio Community 2017。
- en: The Community edition of Visual Studio is the free version of Visual Studio
    that Microsoft provides on their website. Go to [https://www.visualstudio.com/downloads/](http://www.visualstudio.com/en-us/products/visual-studio-express-vs.aspx)
    to download and then start the installation process.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio的Community版本是微软在其网站上提供的免费版本。前往[https://www.visualstudio.com/downloads/](http://www.visualstudio.com/en-us/products/visual-studio-express-vs.aspx)进行下载，然后开始安装过程。
- en: 'You can find complete installation instructions here: [https://docs.microsoft.com/en-us/visualstudio/install/install-visual-studio?view=vs-2017](https://docs.microsoft.com/en-us/visualstudio/install/install-visual-studio?view=vs-2017).
    When you get to the section on workloads, you will want to choose Desktop Development
    with C++.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在这里找到完整的安装说明：[https://docs.microsoft.com/en-us/visualstudio/install/install-visual-studio?view=vs-2017](https://docs.microsoft.com/en-us/visualstudio/install/install-visual-studio?view=vs-2017)。当您到达“工作负载”部分时，您将需要选择“使用C++进行桌面开发”。
- en: 'Once you have Visual Studio Community 2017, open it. This is how the icon for
    the software looks:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了Visual Studio Community 2017后，打开它。软件的图标如下所示：
- en: '![](img/265876f5-f04d-466c-95f3-f8a59af9665b.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/265876f5-f04d-466c-95f3-f8a59af9665b.png)'
- en: Starting a New Project in Visual Studio
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Visual Studio中开始一个新项目
- en: 'Work through the following steps to get to a point where you can actually type
    in the code:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤进行，直到您能够实际输入代码：
- en: 'From the File menu, select New | Project..., as shown in the following screenshot:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从“文件”菜单中，选择“新建 | 项目...”，如下截图所示：
- en: '![](img/669cecd1-75e3-4245-8948-c4b972d1887e.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/669cecd1-75e3-4245-8948-c4b972d1887e.png)'
- en: 'You will get the following dialog:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将会得到以下对话框：
- en: '![](img/c3b51d0a-eedc-44d2-95c5-322e25267b91.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c3b51d0a-eedc-44d2-95c5-322e25267b91.png)'
- en: Note that there is a small box at the bottom with the text Solution name. In
    general, Visual Studio Solutions might contain many projects. However, this book
    only works with a single project, but at times you might find it useful to integrate
    many projects into the same solution.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意底部有一个带有“解决方案名称”文本的小框。一般来说，Visual Studio解决方案可能包含许多项目。但是，本书只使用单个项目，但有时您可能会发现将许多项目集成到同一个解决方案中很有用。
- en: 'There are five things to take care of now, as follows:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在有五件事情要处理，如下所示：
- en: Select Online | Templates | Visual C++ from the left-hand side panel
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧面板选择“在线 | 模板 | Visual C++”
- en: Select Console App (Universal) Project Templates from the right-hand side panel
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从右侧面板选择“控制台应用程序（通用）项目模板”
- en: Name your app (I used `MyFirstApp`)
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 命名您的应用（我使用了`MyFirstApp`）
- en: Select a folder to save your code
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个文件夹保存您的代码
- en: Click on the OK button
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“确定”按钮
- en: 'If you have never used this template before, it will open the VSIX Installer
    and show this dialog:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您以前从未使用过此模板，它将打开VSIX安装程序并显示此对话框：
- en: '![](img/0b03f1e7-944b-4a00-ba2f-f5116cbb77dc.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0b03f1e7-944b-4a00-ba2f-f5116cbb77dc.png)'
- en: 'Click Modify. It will install and close down Visual Studio. You might need
    to click End Tasks if you get this dialog:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“修改”。它将安装并关闭Visual Studio。如果您看到此对话框，您可能需要点击“结束任务”：
- en: '![](img/e023a532-033d-4c40-bd80-49bb437d461c.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e023a532-033d-4c40-bd80-49bb437d461c.png)'
- en: Then, it will install the project templates for you. It will take a long time,
    but you should only need to do this once. When it's done, click Close and restart
    Visual Studio.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，它将为您安装项目模板。这将需要很长时间，但您只需要做一次。完成后，点击“关闭”并重新启动Visual Studio。
- en: 'You need to start over with the previous steps from File | New | Project....
    This time, Visual C++ will show up under Installed:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要从文件|新建|项目...重新开始之前的步骤。这次，在已安装的项目下，Visual C++将显示出来：
- en: '![](img/54cb942c-bc59-40da-85f6-81f31104ea0a.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/54cb942c-bc59-40da-85f6-81f31104ea0a.png)'
- en: Choose Empty Project and you can change the name from Project1 to whatever you
    want to name it, in my case MyFirstApp.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择空项目，您可以将名称从Project1更改为您想要的任何名称，在我的案例中是MyFirstApp。
- en: Now, you are in the Visual Studio 2017 environment. This is the place where
    you will do all your work and code.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经进入了Visual Studio 2017环境。这是您将进行所有工作和编码的地方。
- en: 'However, we need a file to write our code into. So, we will add a C++ code
    file to our project by right-clicking on the project name in the Solution Explorer
    and choosing Add | **New Item**, as shown in the following screenshot:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们需要一个文件来写入我们的代码。因此，我们将通过在“解决方案资源管理器”中右键单击项目名称并选择添加|**新项目**来向我们的项目添加一个C++代码文件，如下截图所示：
- en: '![](img/92b4196f-85b6-4a5f-baa0-5786a1603754.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/92b4196f-85b6-4a5f-baa0-5786a1603754.png)'
- en: 'Add your new C++ (`.cpp`) source code file as shown in the following screenshot:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下截图所示，添加您的新的C++（`.cpp`）源代码文件：
- en: '![](img/526bf3b2-f0ca-4ac1-a65f-66e8ab1f2fe3.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/526bf3b2-f0ca-4ac1-a65f-66e8ab1f2fe3.png)'
- en: '`Source.cpp` is now open and ready for you to add your code. Skip to the *Creating
    your first C++ program* section and get started.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`Source.cpp`现在已经打开并准备好让您添加代码。跳转到*创建您的第一个C++程序*部分并开始。'
- en: Using Xcode on a Mac
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Mac上使用Xcode
- en: In this section, we will talk about how to install Xcode on a Mac. Please skip
    to the next section if you are using Windows.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将讨论如何在Mac上安装Xcode。如果您使用Windows，请跳转到下一节。
- en: Downloading and installing Xcode
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载和安装Xcode
- en: Xcode is available (for free!) on all Mac computers from the Apple App Store.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode可以在Apple应用商店上的所有Mac电脑上免费获取。
- en: You should get the latest version, if possible. As of this writing it is Xcode
    10, but it requires at least macOS Sierra or (preferably) High Sierra. If your
    Mac is older and running an older operating system, you can download the OS update
    for free, as long as you're using a machine recent enough to support it.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果可能的话，您应该获取最新版本。截至目前为止，它是Xcode 10，但至少需要macOS Sierra或（最好是）High Sierra。如果您的Mac较旧并且运行较旧的操作系统，您可以免费下载操作系统更新，只要您使用的机器足够新来支持它。
- en: 'Just search for Xcode on the Apple App Store, as shown here:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 只需在Apple应用商店上搜索Xcode，如图所示：
- en: '![](img/bd16b214-46c1-44d2-9d00-c308094aa746.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bd16b214-46c1-44d2-9d00-c308094aa746.png)'
- en: Just click the Get button and wait for it to download and install.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 只需点击获取按钮，等待下载和安装。
- en: Starting a new project in Xcode
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Xcode中开始一个新项目
- en: 'Once you have Xcode installed, open it. Then, either choose Create a new Xcode
    project from the opening splash screen or navigate to File | New | Project...
    from the system''s menu bar at the top of your screen, as shown in the following
    screenshot:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完Xcode后，打开它。然后，要么选择在打开的启动画面上创建一个新的Xcode项目，要么从屏幕顶部的系统菜单栏中导航到文件|新建|项目...，如下截图所示：
- en: '![](img/b711f1db-82e5-4bad-9263-468d15c9d89d.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b711f1db-82e5-4bad-9263-468d15c9d89d.png)'
- en: 'In the New Project dialog, in the Application section under macOS at the top
    of the screen, select Command Line Tool. Then, click on Next:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新项目对话框中，在屏幕顶部的macOS下的应用程序部分中，选择命令行工具。然后，点击下一步：
- en: '![](img/6719fad2-0b15-4df3-9733-92d228725f81.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6719fad2-0b15-4df3-9733-92d228725f81.png)'
- en: 'In the next dialog, name your project. Be sure to fill in all the fields or
    Xcode won''t let you proceed. Make sure that the project''s Type is set to C++
    and then click on the Next button, as shown here:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个对话框中，命名您的项目。确保填写所有字段，否则Xcode将不允许您继续。确保项目的类型设置为C++，然后点击下一步按钮，如图所示：
- en: '![](img/96c9388b-1d41-450e-a571-77acbf282617.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/96c9388b-1d41-450e-a571-77acbf282617.png)'
- en: 'The next popup will ask you to choose a location in order to save your project.
    Pick a spot on your hard drive and save it there. Xcode, by default, creates a
    Git repository for every project you create. You can uncheck Create git repository
    as we won''t cover Git in this chapter, as shown in the following screenshot:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来的弹出窗口将要求您选择一个位置以保存您的项目。在硬盘上选择一个位置并将其保存在那里。Xcode默认情况下为您创建每个项目的Git存储库。您可以取消选中创建git存储库，因为我们在本章中不涉及Git，如下截图所示：
- en: '![](img/99a90ba0-9ea9-4dd6-a96b-d250c142808d.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/99a90ba0-9ea9-4dd6-a96b-d250c142808d.png)'
- en: Git is a **version control system**. This basically means that Git takes and
    keeps snapshots of all the code in your project every so often (every time you
    *commit* to the repository). Other popular **source control management** (**SCM**)
    tools are Mercurial, Perforce, and Subversion. When multiple people are collaborating
    on the same project, the scm tool has the ability to automatically merge and copy
    other people's changes from the repository to your local code base.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Git是一个**版本控制系统**。这基本上意味着Git会定期（每次*提交*到存储库时）获取并保留项目中所有代码的快照。其他流行的**源代码控制管理**（**SCM**）工具包括Mercurial、Perforce和Subversion。当多人在同一个项目上合作时，SCM工具具有自动合并和复制其他人对存储库的更改到您的本地代码库的能力。
- en: 'Okay! You are all set up. Click on the `main.cpp` file in the left-hand side
    panel of Xcode. If the file doesn''t appear, ensure that the folder icon at the
    top of the left-hand side panel is selected first, as shown in the following screenshot:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 好了！您已经准备好了。在Xcode的左侧面板中点击`main.cpp`文件。如果文件没有出现，请确保首先选择左侧面板顶部的文件夹图标，如下截图所示：
- en: '![](img/2d168111-aab2-4b3b-a1c9-61328c4b675f.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2d168111-aab2-4b3b-a1c9-61328c4b675f.png)'
- en: Creating your first C++ program
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建您的第一个C++程序
- en: 'We are now going to write some C++ source code. There is a very good reason
    why we are calling it the source code: it is the source from which the binary
    executable code is built. The same C++ source code can be built on different platforms
    such as Mac, Windows, and mobile platforms, and in theory executable code doing
    the exact same things on each respective platform should result.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在要编写一些C++源代码。我们称之为源代码有一个非常重要的原因：它是构建二进制可执行代码的源头。相同的C++源代码可以在Mac、Windows和移动平台等不同平台上构建，并且理论上在每个相应的平台上执行相同操作的可执行代码应该是一样的。
- en: In the not-so-distant past, before the introduction of C and C++, programmers
    wrote code for each specific machine they were targeting individually. They wrote
    code in a language called assembly language. But now, with C and C++ available,
    a programmer only has to write code once, and it can be deployed to a number of
    different machines simply by using different compilers to build the same source
    code.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在不太久远的过去，在引入C和C++之前，程序员为他们单独针对的每台特定机器编写代码。他们用一种称为汇编语言的语言编写代码。但现在，有了C和C++，程序员只需编写一次代码，就可以通过使用不同的编译器构建相同的源代码，将其部署到许多不同的机器上。
- en: In practice, there are some differences between Visual Studio's flavor of C++
    and Xcode's flavor of C++, but these differences mostly appear when working with
    advanced C++ concepts, such as templates. UE4 is very helpful when working with
    multiple platforms.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，Visual Studio的C++版本和Xcode的C++版本之间存在一些差异，但这些差异主要出现在处理高级C++概念（如模板）时。在处理多个平台时，UE4非常有帮助。
- en: Epic Games put in a lot of work in order to get the same code to work on both
    Windows and Mac, along with many other platforms such as mobile and game consoles.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Epic Games付出了大量的工作，以使相同的代码在Windows和Mac上以及许多其他平台（如移动平台和游戏机）上运行。
- en: A real-world tip
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现实世界的提示
- en: It is important for the code to run in the same way on all machines, especially
    for networked games or games that allow things such as shareable replays. This
    can be achieved using standards. For example, the IEEE floating-point standard
    is used to implement decimal math on all C++ compilers. This means that the result
    of computations such as 200 * 3.14159 should be the same on all machines. Without
    standards, different compilers might (for example) round numbers differently,
    and where there are many calculations and the code needs to be precise, this could
    cause unacceptable differences.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 使代码在所有机器上以相同的方式运行非常重要，特别是对于联网游戏或允许诸如可共享的重放之类的游戏。这可以通过标准来实现。例如，IEEE浮点标准用于在所有C++编译器上实现十进制数学。这意味着诸如200
    * 3.14159之类的计算结果应该在所有机器上相同。没有标准，不同的编译器可能（例如）以不同的方式四舍五入数字，而在有许多计算且代码需要精确时，这可能会导致不可接受的差异。
- en: 'Write the following code in Microsoft Visual Studio or in Xcode:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在Microsoft Visual Studio或Xcode中编写以下代码：
- en: '[PRE0]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: To explain what's going on, here is the same code but with comments added (anything
    after `//` on the same line will be ignored by the compiler, but can help explain
    what is going on).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解释发生了什么，这里是相同的代码，但添加了注释（在`//`之后的任何内容都将被编译器忽略，但可以帮助解释发生了什么）。
- en: '[PRE1]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Press *Ctrl* + *F5* (or use the Debug | Start Without Debugging menu) to run
    the preceding code in Visual Studio, or press *Command* + *R* (Product | Run)
    to run in Xcode. The first time you press *Ctrl* + *F5* in Visual Studio, you
    will see this dialog:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 按*Ctrl* + *F5*（或使用Debug | Start Without Debugging菜单）在Visual Studio中运行上述代码，或按*Command*
    + *R*（Product | Run）在Xcode中运行。在Visual Studio中第一次按*Ctrl* + *F5*时，您会看到此对话框：
- en: '![](img/fa80783c-d71f-4fb8-8804-cf43911cff55.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fa80783c-d71f-4fb8-8804-cf43911cff55.png)'
- en: Select Yes and Do not show this dialog again if you don't want to see this every
    time you run the program.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想每次运行程序时都看到这个对话框，请选择是并且不再显示此对话框。
- en: 'Here is what you should see in Windows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在Windows上应该看到的内容：
- en: '![](img/0c3809e7-173f-4e56-b212-7e3688928c01.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0c3809e7-173f-4e56-b212-7e3688928c01.png)'
- en: 'and here it is on Mac:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在Mac上的情况：
- en: '![](img/1442d579-e93d-420a-80a0-be030bfef8ad.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1442d579-e93d-420a-80a0-be030bfef8ad.png)'
- en: 'If you''re on Windows, you will probably notice that the window closes automatically
    when you run it so you can''t see the results. There are various ways around this,
    including changing the settings to pause and make you press a key to continue.
    You can get more information here: [https://stackoverflow.com/questions/454681/how-to-keep-the-console-window-open-in-visual-c/1152873#1152873](https://stackoverflow.com/questions/454681/how-to-keep-the-console-window-open-in-visual-c/1152873#1152873)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在Windows上，您可能会注意到当您运行它时窗口会自动关闭，因此您无法看到结果。有各种方法可以解决这个问题，包括更改设置以暂停并让您按键继续。您可以在这里获取更多信息：[https://stackoverflow.com/questions/454681/how-to-keep-the-console-window-open-in-visual-c/1152873#1152873](https://stackoverflow.com/questions/454681/how-to-keep-the-console-window-open-in-visual-c/1152873#1152873)
- en: The first thing that might come to your mind is *"my! A whole lot of gibberish!"*
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能首先想到的是“哎呀！一大堆胡言乱语！”
- en: Indeed, you rarely see the use of the hash (#) symbol (unless you use Twitter)
    and curly brace pairs `{``}` in normal English text. However, in C++ code, these
    strange symbols abound. You just have to get used to them.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，您很少看到井号（#）符号的使用（除非您使用Twitter）和花括号对`{``}`在正常的英文文本中。但是，在C++代码中，这些奇怪的符号随处可见。您只需习惯它们。
- en: So, let's interpret this program, starting from the first line.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们解释一下这个程序，从第一行开始。
- en: 'This is the first line of the program:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这是程序的第一行：
- en: '[PRE2]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This line has two important points to be noted:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这行有两个重要的要点需要注意：
- en: The first thing we see is an `#include` statement. We are asking C++ to copy
    and paste the contents of another C++ source file, called `<iostream>`, directly
    into our code file. `<iostream>` is a standard C++ library that handles all the
    code that lets us print text to the screen.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们看到的第一件事是一个`#include`语句。我们要求C++将另一个C++源文件的内容，称为`<iostream>`，直接复制粘贴到我们的代码文件中。`<iostream>`是一个标准的C++库，处理所有让我们将文本打印到屏幕上的代码。
- en: The second thing we notice is a `//` comment. As mentioned earlier, C++ ignores
    any text after a double slash (`//`) until the end of that line. Comments are
    very useful to add in plain text explanations of what some code does. You might
    also see `/* */` multiline C-style comments in the source. Surrounding any text
    (even over multiple lines) in C or C++ with slash-star `/*` and star-slash `*/`
    gives an instruction to have that code removed by the compiler.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们注意到的第二件事是一个`//`注释。如前所述，C++会忽略双斜杠（`//`）之后的任何文本，直到该行结束。注释非常有用，可以添加纯文本解释一些代码的功能。你可能还会在源代码中看到`/*
    */`多行C风格的注释。用斜杠星`/*`和星斜杠`*/`将任何文本（甚至跨多行）包围在C或C++中，指示编译器删除该代码。
- en: 'This is the next line of code:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这是下一行代码：
- en: '[PRE3]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The comments beside this line explain what the `using` statement does: it just
    lets you use a shorthand (for example, `cout`) instead of the fully qualified
    name (which, in this case, would be `std::cout`) for a lot of our C++ code commands.
    Some people don''t like a `using namespace std;` statement; they prefer to write
    the `std::cout` longhand every time they want to use `cout`. You can get into
    long arguments over things like this. In this section of the text, we prefer the
    brevity that we get with the `using namespace` `std;` statement.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行旁边的注释解释了`using`语句的作用：它只是让你使用一个简写（例如，`cout`）而不是完全限定的名称（在这种情况下将是`std::cout`）来执行我们的许多C++代码命令。有些人不喜欢`using
    namespace std;`语句；他们更喜欢每次使用`cout`时写`std::cout`的长格式。你可以就这样的事情进行长时间的争论。在本节文本中，我们更喜欢`using
    namespace std;`语句带来的简洁性。
- en: Also, note the comments on the second line of this section are lined up with
    the ones on the previous line. This is good programming practice because it shows
    visually that it is a continuation of the previous comment.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，请注意本节第二行的注释与上一行的注释对齐。这是很好的编程实践，因为它在视觉上显示它是上一个注释的延续。
- en: 'This is the next line:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这是下一行：
- en: '[PRE4]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is the application's starting point. You can think of `main` as the start
    line in a race. The `int main()` statement is how your C++ program knows where
    to start.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这是应用程序的起点。你可以把`main`想象成比赛的起跑线。`int main()`语句是你的C++程序知道从哪里开始的方式。
- en: If you don't have an `int main()` program marker or if `main` is spelled incorrectly,
    then your program just won't work because the program won't know where to start.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有一个`int main()`程序标记，或者`main`拼写错误，那么你的程序就不会工作，因为程序不知道从哪里开始。
- en: 'The next line is a character you don''t see often:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 下一行是一个你不经常看到的字符：
- en: '[PRE5]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This `{` character is not a sideways mustache. It is called a curly brace, and
    it denotes the starting point of your program.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`{`字符不是一个侧面的胡须。它被称为花括号，表示程序的起点。
- en: 'The next two lines print text to the screen:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的两行将文本打印到屏幕上：
- en: '[PRE6]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `cout` statement stands for console output. Text between double quotes will
    get an output to the console exactly as it appears between the quotes. You can
    write anything you want between double quotes, except a double quote, and it will
    still be valid code. Also, note that `endl` tells `cout` to add an end line (carriage
    return) character, which is very useful for formatting.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`cout`语句代表控制台输出。双引号之间的文本将以与引号之间的内容完全相同的方式输出到控制台。你可以在双引号之间写任何你想写的东西，除了双引号，它仍然是有效的代码。另外，请注意`endl`告诉`cout`添加一个换行（回车）字符，这对于格式化非常有用。'
- en: 'To enter a double quote between double quotes, you need to stick a backslash
    () in front of the double quote character that you want inside the string, as
    shown here:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 要在双引号之间输入双引号，你需要在你想要放在字符串中的双引号字符前面加上一个反斜杠（\），如下所示：
- en: '[PRE7]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `\"` symbol is an example of an escape sequence. There are other escape
    sequences that you can use; the most common escape sequence you will find is `\n`,
    which is used to jump the text output to the next line.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`\"`符号是转义序列的一个例子。还有其他转义序列可以使用；你会发现最常见的转义序列是`\n`，它用于将文本输出跳转到下一行。'
- en: 'The last line of the program is the `return` statement:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 程序的最后一行是`return`语句：
- en: '[PRE8]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This line of code indicates that the C++ program is quitting. You can think
    of the `return` statement as returning to the operating system.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码表示C++程序正在退出。你可以把`return`语句看作是返回到操作系统。
- en: 'Finally, the end of your program is denoted by the closing curly brace, which
    is an opposite-facing sideways mustache:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你的程序的结束由闭合的花括号表示，这是一个相反的侧面胡须：
- en: '[PRE9]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Semicolons
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分号
- en: Semicolons (;) are important in C++ programming. Notice in the preceding code
    example that most lines of code end in a semicolon. If you don't end each line
    with a semicolon, your code will not compile, and if that happens, your employer
    won't be very happy (of course, once you've been doing this for a while you'll
    find and fix these issues well before they even find out about it).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 分号（;）在C++编程中很重要。请注意在前面的代码示例中，大多数代码行都以分号结束。如果你不在每行末尾加上分号，你的代码将无法编译，如果发生这种情况，你的雇主将不会很高兴（当然，一旦你做了一段时间，你会在他们发现之前找到并修复这些问题）。
- en: Handling errors
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理错误
- en: If you make a mistake while entering code, then you will have a syntax error.
    In the face of syntax errors, C++ will scream bloody murder and your program will
    not even compile; also, it will not run.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在输入代码时犯了一个错误，那么你将会有一个语法错误。面对语法错误，C++会大声尖叫，你的程序甚至不会编译；而且，它也不会运行。
- en: 'Let''s try to insert a couple of errors into our C++ code from earlier:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试着在之前的C++代码中插入一些错误：
- en: '![](img/3fca0dff-5690-4455-8896-87da9e078a6e.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3fca0dff-5690-4455-8896-87da9e078a6e.png)'
- en: Warning! This code listing contains errors. It is a good exercise to find all
    the errors and fix them!
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 警告！这段代码清单包含错误。找到并修复所有错误是一个很好的练习！
- en: As an exercise, try to find and fix all the errors in this program.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 作为练习，试着找到并修复这个程序中的所有错误。
- en: Note that if you are extremely new to C++, this might be a hard exercise. However,
    this will show you how careful you need to be when writing C++ code.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果你对C++非常陌生，这可能是一个很难的练习。然而，这将向你展示在编写C++代码时需要多么小心。
- en: 'Fixing compilation errors can be a nasty business. However, if you input the
    text of this program into your code editor and try to compile it, it will cause
    the compiler to report all the errors to you. Fix the errors, one at a time, and
    then try to recompile (start with the first one on the list, because it could
    be causing some of the later errors). A new error will pop up or the program will
    just work, as shown in the following screenshot:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 修复编译错误可能是一件麻烦的事情。然而，如果你将这个程序的文本输入到你的代码编辑器中并尝试编译它，它将导致编译器向你报告所有的错误。逐个修复错误，然后尝试重新编译（从列表中的第一个开始，因为它可能导致后面的一些错误）。一个新的错误将弹出，或者程序将正常工作，如下面的屏幕截图所示：
- en: '![](img/5e745745-442b-422b-8382-56d4f5f364e3.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5e745745-442b-422b-8382-56d4f5f364e3.png)'
- en: Your compiler shows you the errors in your code when you try to compile it (although
    if you're using Visual Studio, it will ask if you want to run the previous successful
    build first).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 当你尝试编译代码时，你的编译器会显示代码中的错误（尽管如果你使用Visual Studio，它会询问你是否要先运行之前成功的构建）。
- en: 'The reason I am showing you this sample program is to encourage the following
    workflow as long as you are new to C++:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我展示这个示例程序的原因是鼓励以下工作流程，只要你是C++的新手：
- en: Always start with a working C++ code example. You can fork off a bunch of new
    C++ programs from the *Creating* *your first C++ program* section.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 始终从一个可工作的C++代码示例开始。你可以从*创建* *你的第一个C++程序*部分分叉出一堆新的C++程序。
- en: Make your code modifications in small steps. When you are new, compile after
    writing each new line of code. Do not code for one to two hours and then compile
    all that new code at once.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在小步骤中进行代码修改。当你是新手时，每写一行新代码后进行编译。不要一两个小时编码，然后一次性编译所有新代码。
- en: You can expect it to be a couple of months before you can write code that performs
    as expected the first time you write it. Don't get discouraged. Learning to code
    is fun.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可能需要几个月的时间才能写出第一次就能正常运行的代码。不要灰心。学习编码是有趣的。
- en: Warnings in C++
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C++中的警告
- en: The compiler will flag things that it thinks might be mistakes. These are another
    class of compiler notices known as warnings. Warnings are problems in your code
    that you do not have to fix for your code to run but are simply recommended to
    be fixed by the compiler. Warnings are often indications of code that is not quite
    perfect, and fixing warnings in code is generally considered good practice.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器会标记它认为可能是错误的东西。这些是另一类编译器通知，称为警告。警告是你代码中的问题，你不必修复它们才能运行你的代码，但编译器建议修复。警告通常是代码不够完美的指示，修复代码中的警告通常被认为是良好的做法。
- en: However, not all warnings are going to cause problems in your code. Some programmers
    prefer to disable the warnings that they do not consider to be an issue (for example,
    warning 4018 warns against asigned/unsigned mismatch, which you will most likely
    see later).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，并非所有的警告都会在你的代码中引起问题。一些程序员喜欢禁用他们认为不是问题的警告（例如，警告4018警告有符号/无符号不匹配，你很可能以后会看到）。
- en: What is building and compiling?
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是构建和编译？
- en: You might have heard of a computer process term called compiling. Compiling
    is the process of converting your C++ program into code that can run on a CPU.
    Building your source code means the same thing as compiling it.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能听说过一个计算机进程术语叫做编译。编译是将你的C++程序转换为可以在CPU上运行的代码的过程。构建你的源代码意味着与编译相同的事情。
- en: See, your source `code.cpp` file will not actually run on a computer. It has
    to be compiled first for it to run.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 看，你的源代码`code.cpp`文件实际上不会在计算机上运行。它必须首先进行编译才能运行。
- en: This is the whole point of using Microsoft Visual Studio Community or Xcode.
    Visual Studio and Xcode are both compilers. You can write C++ source code in any
    text editing program—even in Notepad. But you need a compiler to run it on your
    machine.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是使用Microsoft Visual Studio Community或Xcode的全部意义。Visual Studio和Xcode都是编译器。你可以在任何文本编辑程序中编写C++源代码，甚至在记事本中。但是你需要一个编译器在你的机器上运行它。
- en: Every operating system typically has one or more C++ compilers that can compile
    C++ code to run on that platform. On Windows, you have Visual Studio and Intel
    C++ Studio compiler. On Mac, there is Xcode, and on all of Windows, Mac, and Linux,
    there is the **GNU Compiler Collection** (**GCC**).
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 每个操作系统通常都有一个或多个可以在该平台上运行的C++编译器。在Windows上，你有Visual Studio和Intel C++ Studio编译器。在Mac上，有Xcode，在Windows、Mac和Linux上都有**GNU编译器集合**（**GCC**）。
- en: The same C++ code that we write (source) can be compiled using different compilers
    for different operating systems, and in theory they should produce the same result.
    The ability to compile the same code on different platforms is called portability.
    In general, portability is a good thing.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编写的相同的C++代码（源代码）可以使用不同的编译器在不同的操作系统上编译，并且理论上它们应该产生相同的结果。在不同平台上编译相同的代码的能力称为可移植性。一般来说，可移植性是一件好事。
- en: Example output
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例输出
- en: 'Here is the screenshot is of your first C++ program:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你的第一个C++程序的屏幕截图：
- en: '![](img/65ae7f80-3457-4436-acbc-94b35c03c77f.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/65ae7f80-3457-4436-acbc-94b35c03c77f.png)'
- en: 'And the following screenshot is of its output, your first victory:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图是它的输出，你的第一个胜利：
- en: '![](img/921550c8-8ed5-4817-a15b-fbe91ac1bd6e.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/921550c8-8ed5-4817-a15b-fbe91ac1bd6e.png)'
- en: There is another class of programming languages called scripting languages.
    These include languages such as PHP, Python, and `ActionScript.` Scripted languages
    are not compiled; for JavaScript, PHP, and ActionScript, there is no compilation
    step. Rather, they are interpreted from the source as the program is run. The
    good thing about scripting languages is that they are usually platform-independent
    from the word go, because interpreters are very carefully designed to be platform-independent.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一类编程语言叫做脚本语言。这些包括诸如PHP、Python和`ActionScript`的语言。脚本语言不需要编译；对于JavaScript、PHP和ActionScript，没有编译步骤。相反，它们在程序运行时从源代码中进行解释。脚本语言的好处是它们通常是平台无关的，因为解释器被设计得非常仔细以实现平台无关性。
- en: Exercise - ASCII art
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习 - ASCII艺术
- en: 'Game programmers love ASCII art. You can draw a picture using only characters.
    Here''s an example of an ASCII art maze:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏程序员喜欢ASCII艺术。你可以只用字符绘制一幅图片。这里有一个ASCII艺术迷宫的例子：
- en: '[PRE10]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Construct your own maze in C++ code or draw a picture using characters.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 用C++代码构建自己的迷宫，或者用字符绘制一幅图片。
- en: Summary
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: To sum up, we learned how to write our first program in the C++ programming
    language in our integrated development environment (IDE, Visual Studio, or Xcode).
    This was a simple program, but you should count getting your first program to
    compile and run as your first victory. In the upcoming chapters, we'll put together
    more complex programs and start using Unreal Engine for our games.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，我们学会了如何在集成开发环境（IDE，Visual Studio或Xcode）中用C++编程语言编写我们的第一个程序。这是一个简单的程序，但是你应该把编译和运行你的第一个程序视为你的第一次胜利。在接下来的章节中，我们将组合更复杂的程序，并开始在我们的游戏中使用虚幻引擎。
