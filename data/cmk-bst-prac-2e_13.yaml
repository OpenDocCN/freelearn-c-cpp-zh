- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Creating Software for Apple Systems
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为 Apple 系统创建软件
- en: In the world of software development, building applications for Apple platforms—macOS,
    iOS, watchOS, and tvOS—comes with its unique set of requirements and best practices.
    Because of the closed ecosystem, Apple platforms have some unique build characteristics,
    especially for applications with a graphical user interface and more complex library
    frameworks. For those cases, Apple uses specific formats called app bundles and
    frameworks. This chapter delves into the intricacies of using CMake, a powerful
    cross-platform build system, to target Apple’s ecosystem effectively. Whether
    you are a seasoned developer looking to streamline your workflow or a newcomer
    eager to explore Apple-specific development, this chapter will equip you with
    the knowledge and tools to master the process.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件开发领域，为 Apple 平台——macOS、iOS、watchOS 和 tvOS——构建应用程序具有一套独特的要求和最佳实践。由于封闭的生态系统，Apple
    平台有一些独特的构建特点，尤其是对于具有图形用户界面和更复杂库框架的应用程序。针对这些情况，Apple 使用了名为应用程序包（app bundle）和框架（framework）的特定格式。本章深入探讨了如何有效地使用
    CMake 这一强大的跨平台构建系统，针对 Apple 生态系统进行开发。无论你是希望简化工作流程的资深开发者，还是渴望探索 Apple 特定开发的新人，本章将为你提供掌握这一过程所需的知识和工具。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要内容：
- en: Using XCode as a CMake generator
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 XCode 作为 CMake 生成器
- en: Creating an application bundle
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建应用程序包
- en: Creating an Apple library framework
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 Apple 库框架
- en: Signing software to use it in the Apple store
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 Apple Store 使用的软件进行签名
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'As with the previous chapters, the examples are tested with CMake 3.24 on macOS
    Sonoma 14.2 and run on either of the following compilers:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面章节相同，示例在 macOS Sonoma 14.2 上使用 CMake 3.24 进行了测试，并可在以下编译器中运行：
- en: Apple Clang 15 or newer
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apple Clang 15 或更新版本
- en: Xcode 15.4
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Xcode 15.4
- en: Some of the examples require you to have set up code signing for Xcode, which
    requires an Apple ID that is enrolled in the developer program.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 有些示例要求你已为 Xcode 设置了代码签名，这需要一个已加入开发者计划的 Apple ID。
- en: All examples and source code are available in the GitHub repository of this
    book at [https://github.com/PacktPublishing/CMake-Best-Practices---2nd-Edition](https://github.com/PacktPublishing/CMake-Best-Practices---2nd-Edition).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 所有示例和源代码可以在本书的 GitHub 仓库中找到：[https://github.com/PacktPublishing/CMake-Best-Practices---2nd-Edition](https://github.com/PacktPublishing/CMake-Best-Practices---2nd-Edition)。
- en: If any of the software is missing, the corresponding examples will be excluded
    from the build.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果缺少任何软件，相应的示例将从构建中排除。
- en: Developing on Apple with CMake
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Apple 上使用 CMake 开发
- en: When developing on macOS, it’s important to understand Apple’s ecosystem and
    development expectations. Apple strongly encourages developers to use Xcode as
    their primary development environment, and CMake can generate build instructions
    for it. Xcode is a comprehensive suite of tools that includes a code editor, debugger,
    and other utilities designed specifically for macOS and iOS development. Apple
    frequently updates Xcode to include the latest features, bug fixes, and performance
    improvements. Therefore, developers are expected to upgrade to the latest version
    of Xcode regularly to ensure compatibility and take advantage of new capabilities.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在 macOS 上开发时，理解 Apple 的生态系统和开发期望非常重要。Apple 强烈鼓励开发者使用 Xcode 作为主要开发环境，CMake 可以为其生成构建指令。Xcode
    是一个包含代码编辑器、调试器以及其他专为 macOS 和 iOS 开发设计的工具的综合工具套件。Apple 会频繁更新 Xcode，新增功能、修复 bug
    以及提升性能。因此，开发者需要定期升级到最新版本的 Xcode，以确保兼容性并充分利用新功能。
- en: 'The following command generates build instructions for Xcode:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令为 Xcode 生成构建指令：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After running the preceding command, CMake will generate an Xcode project file
    with the `.xcodeproj` extension in the build directory. This project can be opened
    directly in Xcode, or the project can be built through CMake by calling the following:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行前述命令后，CMake 将在构建目录中生成一个以 `.xcodeproj` 后缀的 Xcode 项目文件。该项目可以直接在 Xcode 中打开，或者通过调用以下命令，使用
    CMake 构建项目：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If the project is updated by CMake, Xcode will detect changes and reload the
    project.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果项目已由 CMake 更新，Xcode 将检测到更改并重新加载项目。
- en: While Xcode is the preferred IDE, it is not the only option available. **Visual
    Studio Code** (**VS Code**), for instance, is a popular alternative that many
    developers use for its versatility and extensive extensions ecosystem.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Xcode是首选的IDE，但并非唯一的选择。例如，**Visual Studio Code**（**VS Code**）是一个广受欢迎的替代方案，许多开发者使用它，因为它的多功能性和丰富的扩展生态系统。
- en: While Xcode is the recommended generator for macOS, other generators such as
    Ninja or Makefiles are also available. While they lack some specifics of the Apple
    integration, they are lightweight and can also be used to build simple applications
    and libraries.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Xcode是推荐的macOS生成器，但也可以选择其他生成器，如Ninja或Makefile。尽管它们缺乏一些Apple集成的特性，但它们轻量且也可以用于构建简单的应用程序和库。
- en: The Xcode generator in CMake creates project files that can be opened and managed
    directly in Xcode. This ensures that the build process leverages Xcode’s capabilities,
    such as optimized build settings, resource management, and seamless integration
    with macOS features.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: CMake中的Xcode生成器会创建可以直接在Xcode中打开和管理的项目文件。这确保了构建过程能够利用Xcode的功能，如优化的构建设置、资源管理以及与macOS特性的无缝集成。
- en: 'Xcode supports a large variety of build settings, which can be configured through
    CMake by using the `XCODE_ATTRIBUTE_<SETTING>` property. To obtain a list of all
    possible settings, either consult the developer documentation from Apple or run
    the following build directory call:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode支持各种构建设置，这些设置可以通过CMake使用`XCODE_ATTRIBUTE_<SETTING>`属性进行配置。要获取所有可能设置的列表，可以参考Apple的开发者文档，或者运行以下构建目录调用：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Xcode attributes can either be set globally or per target, as the following
    example illustrates:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode属性可以全局设置，也可以针对每个目标进行设置，如下例所示：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As the example shows, Xcode attributes can also be set only for a particular
    build variant with the `[variant=ConfigName]` postfix, where the configurations
    are the usual CMake build variants such as `Debug` and `Release`. If a project
    is built with another generator than Xcode, the attributes have no effect. To
    create simple applications, choosing the Xcode generator and setting the appropriate
    attributes is sufficient. However, to build and distribute more complex software
    for Apple, there is no way around looking into application bundles and Apple frameworks.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如示例所示，Xcode属性也可以仅为特定的构建变体设置，通过在`[variant=ConfigName]`后缀中指定，其中配置是常见的CMake构建变体，如`Debug`和`Release`。如果使用不同于Xcode的生成器来构建项目，这些属性将无效。要创建简单的应用程序，选择Xcode生成器并设置适当的属性就足够了。然而，要为Apple构建和分发更复杂的软件，就必须深入研究应用程序包和Apple框架。
- en: Apple application bundles
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Apple应用程序包
- en: 'An Apple application bundle is a directory structure used on macOS and iOS
    to package and organize all files required by an application. This includes the
    executable binary, resources such as images and sounds, metadata such as the app’s
    `Info.plist` file, and more. Application bundles make it easy to distribute and
    manage applications because they encapsulate all necessary components in a single
    directory that the user can move, copy, or delete as a unit. Application bundles
    appear as single files in the Finder, but they are directories with a specific
    structure like this:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Apple应用程序包是macOS和iOS中用于打包和组织应用程序所需所有文件的目录结构。这些文件包括可执行二进制文件、资源文件（如图片和声音）、元数据（如应用程序的`Info.plist`文件）等。应用程序包使得分发和管理应用程序变得更加容易，因为它们将所有必要的组件封装在一个单独的目录中，用户可以像处理单个文件一样移动、复制或删除该目录。应用程序包在Finder中显示为单个文件，但实际上它们是具有特定结构的目录，如下所示：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Notably, this structure is flattened for iOS, tvOs, and watchOS targets, which
    is handled by CMake itself. To mark an executable as a bundle, the `MACOSX_BUNDLE`
    keyword is added to the target like this:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，这个结构被扁平化处理，适用于iOS、tvOS和watchOS目标平台，这由CMake本身处理。要将可执行文件标记为一个应用包，需要将`MACOSX_BUNDLE`关键字添加到目标中，如下所示：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Setting the keyword tells CMake to create the directory structure for the app
    bundle and to generate an `Info.plist` file. The `Info.plist` file is a critical
    file for the app bundle as it contains essential configuration for the package.
    CMake will generate a default `Info.plist` file, which works well in a lot of
    cases. However, you can use a custom `Info.plist` template by specifying the path
    to the template file using the `MACOSX_BUNDLE_INFO_PLIST` property on a target
    like this:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 设置关键字会告诉 CMake 创建应用程序包的目录结构并生成一个`Info.plist`文件。`Info.plist`文件是应用程序包中的关键文件，因为它包含了该包的必要配置。CMake
    会生成一个默认的`Info.plist`文件，在许多情况下它已经很好用了。然而，你可以通过指定模板文件的路径来使用自定义的`Info.plist`模板，方法是使用`MACOSX_BUNDLE_INFO_PLIST`属性，像这样在目标上指定：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The template file uses the same syntax as `configure_file` as described in
    [*Chapter 8*](B30947_08.xhtml#_idTextAnchor132), *Executing Custom Tasks with
    CMake*. Some of the identifiers are set automatically from CMake. Here’s an example
    of a custom `Info.plist.in` template:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 模板文件使用与`configure_file`相同的语法，如[*第 8 章*](B30947_08.xhtml#_idTextAnchor132)所述，*使用
    CMake 执行自定义任务*。一些标识符会从 CMake 自动设置。下面是一个自定义`Info.plist.in`模板的示例：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: With this, a basic app bundle can be defined and built. While this works best
    with the Xcode generator, creating the file structure and the `Info.plist` file
    also works with other generators such as Ninja or Makefiles. However, if an application
    contains interface builder files or storyboards, Xcode is the only way to go.
    Let’s have a look at how resource files are included.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，一个基本的应用程序包就可以定义并构建了。虽然这在 Xcode 生成器下效果最好，但创建文件结构和`Info.plist`文件在其他生成器如 Ninja
    或 Makefile 中也能工作。然而，如果应用程序包含界面构建器文件或故事板，Xcode 是唯一的选择。接下来我们来看看如何包含资源文件。
- en: Resource files for Apple application bundles
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Apple 应用程序包的资源文件
- en: Apple comes with its own SDK for building applications, which supports storyboard
    or interface builder files to define user interfaces. To create bundles, these
    files are compiled into an Apple-specific resource format and placed in the appropriate
    location in the bundle. Only the Xcode generator supports the automatic handling
    of these files, so at that point, there is little use in sticking to any other
    generator.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Apple 提供了自己的 SDK 来构建应用程序，它支持故事板或界面构建器文件来定义用户界面。为了创建包，这些文件会被编译成 Apple 特有的资源格式，并放置在包中的适当位置。只有
    Xcode 生成器支持自动处理这些文件，因此在这时，使用其他生成器几乎没有什么用处。
- en: 'Storyboard and interface builder sources must be included as sources in the
    `add_executable()` or `target_sources()` commands. To ensure they are automatically
    compiled and copied to the correct location within the bundle, these sources should
    have the `MACOSX_PACKAGE_LOCATION` file property set. To avoid having to retype
    all the filenames, putting them into a variable can be handy:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 故事板和界面构建器源文件必须作为源文件包含在`add_executable()`或`target_sources()`命令中。为了确保它们被自动编译并复制到包内的正确位置，这些源文件应该设置`MACOSX_PACKAGE_LOCATION`文件属性。为了避免重新输入所有文件名，将它们放入变量中会很方便：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: With that, you should be set up to create Apple application bundles to create
    executables. If you want to build complex libraries for Apple that are easily
    redistributable, the way to go is to use frameworks.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，你应该已经设置好创建 Apple 应用程序包来生成可执行文件了。如果你想为 Apple 构建易于重新分发的复杂库，那么使用框架是最佳选择。
- en: Apple frameworks
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Apple 框架
- en: macOS frameworks are collections of reusable classes, functions, and resources
    designed to simplify the development of macOS applications. They provide a structured
    way to access system functionality and integrate seamlessly with macOS.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: macOS 框架是用于简化 macOS 应用程序开发的可重用类、函数和资源的集合。它们提供了一种结构化的方式来访问系统功能，并与 macOS 无缝集成。
- en: 'Linking against frameworks is very similar to linking normal libraries. First,
    they are located with `find_package` or `find_library` and then used with `target_link_libraries`,
    with a slightly different syntax. The following example links the `Cocoa` framework
    to the `ch11_hello_world_apple` target:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 链接框架与链接普通库非常相似。首先，使用`find_package`或`find_library`找到它们，然后使用`target_link_libraries`，只是语法稍有不同。以下示例将`Cocoa`框架链接到`ch11_hello_world_apple`目标：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Not that the `–framework` keyword is necessary and that the name should be quoted.
    If multiple frameworks are linked, all of them need to be quoted individually.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`–framework`关键字是必要的，而且框架的名称应该加引号。如果链接多个框架，它们都需要分别加引号。
- en: 'Now that we can use frameworks, let’s look into creating our own. Frameworks
    are quite similar to app bundles, with a few differences. Notably, it is possible
    to install multiple versions of the same framework on macOS. In addition to the
    resources, frameworks also contain the header and libraries needed to use it.
    Let’s have a look at the file structure of a framework to understand how frameworks
    allow for multiple versions and to populate the headers:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们可以使用框架，接下来让我们来看看如何创建自己的框架。框架与应用程序包非常相似，但有一些区别。特别是，在 macOS 上可以安装同一框架的多个版本。除了资源之外，框架还包含使用它所需的头文件和库。让我们来看看框架的文件结构，以便理解框架如何支持多个版本，并填充头文件：
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The top level of the framework must end with `.framework`, and typically, all
    the top-level files except the `Versions` folder are symlinks pointing to folders
    or files in the `Versions` folder.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 框架的顶层必须以 `.framework` 结尾，通常，除了 `Versions` 文件夹外，所有顶层文件都是指向 `Versions` 文件夹中文件或文件夹的符号链接。
- en: The `Versions` folder contains the different versions of the libraries. The
    names of the directories can be arbitrary, but usually, they are either named
    `A`, `B`, `C`, and so on or use numeric versions.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`Versions` 文件夹包含不同版本的库。目录的名称可以是任意的，但通常，它们会被命名为 `A`、`B`、`C` 等，或者使用数字版本。'
- en: Regardless of the convention used, a symlink called `Current` needs to be there
    and is expected to point to the latest version. Each version must have a `Resources`
    subfolder that contains the `Info.plist` file as described in the section about
    application bundles.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 无论使用哪种约定，都需要有一个名为 `Current` 的符号链接，并且该链接应该指向最新版本。每个版本必须有一个名为 `Resources` 的子文件夹，该文件夹包含如在应用程序包部分所述的
    `Info.plist` 文件。
- en: 'CMake supports the creation of macOS frameworks out of the box by setting the
    `FRAMEWORK` and `FRAMEWORK_VERSION` properties of a target:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: CMake 支持通过设置目标的 `FRAMEWORK` 和 `FRAMEWORK_VERSION` 属性来创建 macOS 框架：
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As frameworks often contain header files, they can be specified with the `PUBLIC_HEADER`
    and `PRIVATE_HEADER` properties so that they are copied to the correct places.
    Custom `Info.plist` files for frameworks can be set using the `MACOSX_FRAMEWORK_INFO_PLIST`
    property. If no custom `Info.plist` file is provided, CMake will generate a default
    one, which in most cases is sufficient.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 由于框架通常包含头文件，因此可以使用 `PUBLIC_HEADER` 和 `PRIVATE_HEADER` 属性来指定它们，以便将它们复制到正确的位置。可以使用
    `MACOSX_FRAMEWORK_INFO_PLIST` 属性为框架设置自定义的 `Info.plist` 文件。如果没有提供自定义的 `Info.plist`
    文件，CMake 将生成一个默认文件，在大多数情况下这是足够的。
- en: With that, we covered the basics of building software for macOS, but one thing
    that is missing is signing the code for releasing it on Mac.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经介绍了构建 macOS 软件的基础知识，但有一点是缺失的，那就是对代码进行签名，以便将其发布到 Mac 上。
- en: Code signing for macOS
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: macOS 的代码签名
- en: For a lot of use cases, creating unsigned apps or frameworks might be enough;
    however, if applications are to be distributed through the official channels for
    macOS, signing is a must. Signing works through Xcode itself; however, it is also
    possible to use CMake for signing.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许多使用场景，创建未签名的应用或框架可能已经足够；然而，如果应用程序需要通过 macOS 的官方渠道进行分发，则必须进行签名。签名可以通过 Xcode
    本身进行；但是，也可以使用 CMake 来进行签名。
- en: 'To sign, there are three pieces of information needed: the *ID of the bundle
    or framework*, the *development team ID*, and the *code signing entity*. Values
    can be set with the `XCODE_ATTRIBUTE_DEVELOPMENT_TEAM` and `XCODE_ATTRIBUTE_CODE_SIGN_ENTITY`
    Xcode attributes. Typically, these are set on a project level and not for individual
    targets:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要进行签名，需要三个信息：*包或框架的 ID*、*开发团队 ID* 和 *代码签名实体*。可以使用 `XCODE_ATTRIBUTE_DEVELOPMENT_TEAM`
    和 `XCODE_ATTRIBUTE_CODE_SIGN_ENTITY` Xcode 属性来设置这些值。通常，这些设置是在项目级别进行，而不是针对单独的目标：
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The signing identity denotes the certificate provider and can usually be left
    as `"Apple Development"`, which causes Xcode to select the appropriate signing
    identity. Before Xcode version 11, the signing identity had to be set to `"Mac
    Developer"` for macOS or `"iPhone Developer"` for iOS, tvOS, or watchOS applications.
    The team ID is a 10-digit code that is assigned to the Apple developer account,
    which can be created on Apple’s developer portal ([https://developer.apple.com](https://developer.apple.com)).
    Certificates for signing can be downloaded through Xcode.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 签名身份表示证书提供者，通常可以保持为 `"Apple Development"`，这将使 Xcode 选择适当的签名身份。在 Xcode 11 之前，签名身份必须设置为
    `"Mac Developer"`（用于 macOS）或 `"iPhone Developer"`（用于 iOS、tvOS 或 watchOS 应用程序）。团队
    ID 是一个 10 位的代码，分配给 Apple 开发者帐户，可以在 Apple 的开发者门户网站上创建 ([https://developer.apple.com](https://developer.apple.com))。可以通过
    Xcode 下载签名证书。
- en: Summary
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: The Apple ecosystem is somewhat special in handling because of its closed design
    in comparison to Linux or even Windows, but especially in the mobile market, there
    is often no way around building for Apple if one does not want to leave a significant
    market out. With the information in this chapter, such as creating app bundles
    and frameworks and signing your software, you should be set up to start deploying
    to Apple. While building for Apple needs you to use Xcode and possibly even means
    that you need to own Apple hardware, this is not the case for all other platforms.
    CMake excels at being platform-independent and at building software across different
    platforms, which is what we will be looking at in the next chapter.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果生态系统在处理上有些特殊，因为其封闭的设计与Linux甚至Windows相比有很大不同，但尤其是在移动市场，如果不想失去一个重要市场，通常无法避免为Apple构建应用。通过本章中的信息，如创建应用程序包和框架以及签署软件，你应该能够开始为Apple部署应用程序。虽然为Apple构建应用需要使用Xcode，并且可能还需要拥有Apple硬件，但这并不是所有其他平台的情况。CMake擅长于平台独立性并能够跨不同平台构建软件，这正是我们将在下一章讨论的内容。
- en: Questions
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which is the best-suited generator for building software for Apple?
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪种生成器最适合为Apple构建软件？
- en: How are Xcode attributes set?
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何设置Xcode属性？
- en: What is the difference between application bundles and frameworks regarding
    different versions?
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关于不同版本，应用程序包和框架之间有什么区别？
- en: What is needed to sign an application bundle or framework?
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 签署应用程序包或框架需要什么？
- en: Answers
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 答案
- en: While different generators work for Apple, it is recommended to use Xcode.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尽管不同的生成器可以用于Apple，推荐使用Xcode。
- en: By setting either the `CMAKE_XCODE_ATTRIBUTE_<ATTRIBUTE>` variable or the `XCODE_ATTRIBUTE_<ATTRIBUTE>`
    property.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过设置`CMAKE_XCODE_ATTRIBUTE_<ATTRIBUTE>`变量或`XCODE_ATTRIBUTE_<ATTRIBUTE>`属性来实现。
- en: Only one version of an application bundle can be installed at one time, while
    there can be multiple versions of frameworks installed at the same time.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每次只能安装一个版本的应用程序包，而可以同时安装多个版本的框架。
- en: To sign software for Apple, you need an Apple ID that is enrolled in the developer
    program and Xcode.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要为Apple签署软件，你需要一个已注册开发者计划的Apple ID和Xcode。
