- en: '*Chapter 6*: Implementing Hierarchies with Single Inheritance'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第6章*：使用单继承实现层次结构'
- en: This chapter will extend our pursuit of object-oriented programming in C++.
    We will begin by introducing additional OO concepts, such as **generalization**
    and **specialization**, and then understand how these concepts are implemented
    in C++ through *direct language support*. We will begin building hierarchies of
    related classes, and understand how each class can become an easier to maintain,
    potentially reusable building block in our applications. We will understand how
    the new OO concepts presented in this chapter will support well-planned designs,
    and we will have a clear understanding of how to implement these designs with
    robust code in C++.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将扩展我们在C++中面向对象编程的追求。我们将首先介绍额外的面向对象概念，如**泛化**和**特化**，然后理解这些概念如何通过*直接语言支持*在C++中实现。我们将开始构建相关类的层次结构，并理解每个类如何成为我们应用程序中更易于维护、可重复使用的构建模块。我们将理解本章介绍的新的面向对象概念将支持精心规划的设计，并清楚地了解如何在C++中使用健壮的代码来实现这些设计。
- en: 'In this chapter, we will cover the following main topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Object-oriented concepts of generalization and specialization, and Is-A relationships
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面向对象的泛化和特化概念，以及Is-A关系
- en: Single inheritance basics – defining derived classes, accessing inherited members,
    understanding inherited access labels and regions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单继承基础-定义派生类，访问继承成员，理解继承访问标签和区域
- en: Construction and destruction sequences in a single inheritance hierarchy; selecting
    base class constructors with the member initialization list
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单继承层次结构中的构造和销毁顺序；使用成员初始化列表选择基类构造函数
- en: Modifying access labels in the base class list – public versus private and protected
    base classes – to change the OO purpose of inheritance to Implementation Inheritance
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改基类列表中的访问标签-公共与私有和受保护的基类-以改变继承的OO目的为实现继承
- en: By the end of this chapter, you will understand the object-oriented concepts
    of generalization and specialization, and will know how to use inheritance in
    C++ as a mechanism to realize these ideals. You will understand terms such as
    base and derived classes, as well as OO motivations for building hierarchies,
    such as supporting Is-A relationships or supporting implementation inheritance.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章结束时，您将了解泛化和特化的面向对象概念，并将知道如何在C++中使用继承作为实现这些理想的机制。您将了解基类和派生类等术语，以及构建层次结构的面向对象动机，例如支持Is-A关系或支持实现继承。
- en: Specifically, you will understand how to grow inheritance hierarchies using
    single inheritance, and how to access inherited data members and member functions.
    You will also understand which inherited members you may directly access, based
    upon their defined access regions.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，您将了解如何使用单继承来扩展继承层次结构，以及如何访问继承的数据成员和成员函数。您还将了解根据其定义的访问区域，您可以直接访问哪些继承成员。
- en: You will understand the order of constructor and destructor invocations when
    instances of derived class types are instantiated and destroyed. You will know
    how to make use of the member initialization list to select which, from a potential
    group, of inherited constructors a derived class object may need to utilize as
    part of its own construction.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 您将了解当实例化和销毁派生类类型的实例时，构造函数和析构函数的调用顺序。您将知道如何利用成员初始化列表来选择派生类对象可能需要利用作为其自身构造的一部分的潜在组中的继承构造函数。
- en: You will also understand how changing access labels in a base class list changes
    the OO meaning for the type of inheritance hierarchy you are growing. By examining
    public versus private and protected base classes, you will understand different
    types of hierarchies, such as those built to support Is-A relationships, versus
    those built to support implementation inheritance.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您还将了解如何更改基类列表中的访问标签会改变您正在扩展的继承层次结构的OO含义。通过检查公共与私有和受保护的基类，您将了解不同类型的层次结构，例如那些用于支持Is-A关系的层次结构，与那些用于支持实现继承的层次结构。
- en: By understanding the direct language support of single inheritance in C++, you
    will be able to implement the OO concepts of generalization and specialization.
    Each class within your hierarchy will be a more easily maintained component, and
    can serve as a potential building block for creating new, more specialized components.
    Let's further our understanding of C++ as an OOP language by detailing single
    inheritance.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 通过理解C++中单继承的直接语言支持，您将能够实现泛化和特化的面向对象概念。您的层次结构中的每个类将成为更易于维护的组件，并且可以作为创建新的、更专业化组件的潜在构建模块。让我们通过详细介绍单继承来进一步了解C++作为面向对象编程语言。
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Online code for full program examples can be found at the following GitHub
    URL: [https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter06](https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter06).
    Each full program example can be found in the GitHub repository under the appropriate
    chapter heading (subdirectory) in a file that corresponds with the chapter number,
    followed by a dash, followed by the example number in the chapter at hand. For
    example, the first full program in this chapter can be found in the subdirectory
    `Chapter06` in a file named `Chp6-Ex1.cpp` under the aforementioned GitHub directory.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 完整程序示例的在线代码可在以下GitHub URL找到：[https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter06](https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter06)。每个完整程序示例都可以在GitHub存储库中的适当章节标题（子目录）下找到，文件名与所在章节编号相对应，后跟破折号，再跟上该章节中的示例编号。例如，本章的第一个完整程序可以在名为`Chp6-Ex1.cpp`的文件中的子目录`Chapter06`中找到。
- en: 'The CiA video for this chapter can be viewed at: [https://bit.ly/3tJJJBK](https://bit.ly/3tJJJBK).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的CiA视频可在以下链接观看：[https://bit.ly/3tJJJBK](https://bit.ly/3tJJJBK)。
- en: Expanding object-oriented concepts and terminology
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展面向对象的概念和术语
- en: In this section, we will introduce essential object-oriented concepts, as well
    as applicable terminology that will accompany these key ideas.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍基本的面向对象概念，以及将伴随这些关键思想的适用术语。
- en: From [*Chapter 5*](B15702_05_Final_NM_ePub.xhtml#_idTextAnchor199), *Exploring
    Classes in Detail*, you now understand the key OO ideas of encapsulation and information
    hiding, and how C++ supports these ideals through the C++ class. Now, we will
    look at how we can grow a hierarchy of related classes, using a very general class
    as a building block, and then extending that class by creating a more specific
    class. Through growing a hierarchy of related classes in this repeated fashion,
    OO systems provide building blocks of potential reuse. Each class within the hierarchy
    is encapsulated, so maintenance and upgrades to a specific class can be done more
    easily and without impacts on the entire system. By incrementally refining each
    class with a more specific and more detailed class to build a hierarchy of related
    classes, specific maintenance for each component is in a focused area for maintenance
    and changes.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 从[*第5章*](B15702_05_Final_NM_ePub.xhtml#_idTextAnchor199) *详细探讨类*，你现在了解了封装和信息隐藏的关键面向对象思想，以及C++如何通过C++类支持这些理念。现在，我们将看看如何通过使用一个非常通用的类作为基础模块来构建一系列相关类的层次结构，然后通过创建更具体的类来扩展该类。通过以这种重复的方式构建一系列相关类的层次结构，面向对象系统提供了潜在的重复使用的基础模块。层次结构中的每个类都是封装的，因此可以更轻松地对特定类进行维护和升级，而不会影响整个系统。通过逐步将每个类与更具体和更详细的类相结合，构建一系列相关类的层次结构，可以在一个专注的维护和更改领域内进行每个组件的具体维护。
- en: Let's start by extending our basic OO terminology.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从扩展我们的基本面向对象术语开始。
- en: Deciphering generalization and specialization
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解泛化和特化
- en: The main object-oriented concepts extending through this chapter are *generalization*
    and *specialization*. Incorporating these principles into your design will provide
    the basis for writing more easily modifiable and maintainable code, and for code
    that could potentially be reused in related applications.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 本章延伸的主要面向对象概念是*泛化*和*特化*。将这些原则纳入设计中将为编写更易于修改和可维护的代码提供基础，并且可能在相关应用中重复使用代码。
- en: '**Generalization** describes the process of abstracting commonalities from
    a grouping of classes and creating a more generalized class for that grouping
    to house the common properties and behaviors. The more generalized class can be
    known as a **base** (or **parent**) class. Generalization can also be used to
    collect more general properties and behaviors of a single class into a base class
    with the expectation that the new, generalized class can later serve as a building
    block or basis for additional, more specific (derived) classes.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**泛化**描述了从一组类中抽象出共同点并创建一个更通用的类来容纳这些共同的属性和行为的过程。更通用的类可以被称为**基类**（或**父类**）。泛化也可以用于将单个类的更一般的属性和行为收集到一个基类中，期望新的通用类以后可以作为附加的、更具体（派生）的类的基础或基础。'
- en: '**Specialization** describes the process of deriving a new class from an existing,
    generalized base class, for the purpose of adding specific, distinguishable properties
    and behaviors to adequately represent the new class. The specialized class can
    also be referred to as a **derived** (or **child**) class. A hierarchy of classes
    can incrementally refine their respective properties and behaviors through specialization.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**特化**描述了从现有的通用基类派生出一个新类的过程，目的是添加特定的、可区分的属性和行为，以充分代表新类。特化类也可以称为**派生**（或**子类**）类。通过特化，类的层次结构可以逐步完善其各自的属性和行为。'
- en: Though reuse is difficult to achieve, the OOP concepts such as generalization
    and specialization make reuse more easily obtainable. Reuse can potentially be
    realized in applications that are similar in nature or in the same project domain,
    in continuations of existing projects, or potentially in related domains where
    minimally the most generalized classes and associated components can be reused.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管重复使用很难实现，但面向对象的概念，如泛化和特化，使得重复使用更容易实现。重复使用可以在性质相似的应用程序中实现，或者在同一项目领域中，或者在现有项目的延续中，或者在相关领域中实现，至少可以最大程度地重复使用最通用的类和相关组件。
- en: Building a hierarchy is a fundamental language feature of C++. Let's move forward
    by exploring single inheritance to put this idea into action.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 构建层次结构是C++的基本语言特性。让我们通过探索单继承来将这个想法付诸实践。
- en: Understanding single inheritance basics
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解单继承的基本知识
- en: '**Inheritance** is the C++ language mechanism that allows the concepts of generalization
    and specialization to be realized. **Single inheritance** is when a given class
    has exactly one immediate base class. Both single inheritance and multiple inheritance
    are supported in C++, however, we will focus on single inheritance in this chapter
    and will cover multiple inheritance in a later chapter.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**继承**是C++语言机制，允许实现泛化和特化的概念。**单继承**是指给定类只有一个直接的基类。C++支持单继承和多继承，但在本章中我们将专注于单继承，并将在后面的章节中介绍多继承。'
- en: Inheritance hierarchies can be built using both classes and structures in C++.
    Classes, however, are most often utilized rather than structures to support inheritance
    and OOP.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在C++中可以使用类和结构来构建继承层次结构。然而，通常使用类而不是结构来支持继承和面向对象编程。
- en: Growing an inheritance hierarchy for the purpose of generalization and specialization
    supports an `Person` and a derived class of `Student`, we can say *a Student Is-A
    Person*. That is, a `Student` is a specialization of a `Person`, adding additional
    data members and member functions above and beyond those provided by its base
    class, `Person`. Specifying an Is-A relationship through generalization and specialization
    is the most typical reason inheritance is used to create base and derived classes.
    Later in this chapter, we will look at another reason to utilize inheritance.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了支持泛化和特化的目的而扩展继承层次结构，我们可以说*一个学生是一个人*。也就是说，`Student`是`Person`的特化，添加了基类`Person`提供的额外数据成员和成员函数。通过泛化和特化指定Is-A关系是使用继承创建基类和派生类的最典型原因。在本章的后面，我们将看到另一个使用继承的原因。
- en: Let's get started by looking at the language mechanics in C++ to specify base
    and derived classes and to define an inheritance hierarchy.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始看一下C++中指定基类和派生类以及定义继承层次结构的语言机制。
- en: Defining base and derived classes, and accessing inherited members
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义基类和派生类，并访问继承的成员
- en: With single inheritance, the derived class specifies who its immediate ancestor
    or base class is. The base class does not specify that it has any derived classes.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在单一继承中，派生类指定了它的直接祖先或基类是谁。基类不指定它有任何派生类。
- en: The derived class simply creates a base class list by adding a `:` after its
    class name, followed by the keyword `public` (for now), and then the specific
    base class name. Whenever you see a `public` keyword in the base class list, it
    means that we are using inheritance to specify an Is-A relationship.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 派生类只需通过在其类名后添加`:`，然后是关键字`public`（暂时），然后是特定的基类名，来创建一个基类列表。每当你在基类列表中看到一个`public`关键字，这意味着我们正在使用继承来指定Is-A关系。
- en: 'Here is a simple example to illustrate the basic syntax:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个简单的例子来说明基本语法：
- en: '`Student` Is A derived class of `Person`:'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Student`是`Person`的派生类：'
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Simple access of inherited members can be seen using the aforementioned classes
    as follows:'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用上述类来简单访问继承的成员，如下所示：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the previous code fragment, the derived class instance of `Student`, pointed
    to by `s1`, can access both base and derived class members, such as `Person::GetTitle()`
    and `Student::GetGpa()`. The base class instance of `Person`, `p1`, can only access
    its own members, such as `Person::GetTitle()`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，由`s1`指向的派生类实例`Student`可以访问基类和派生类成员，比如`Person::GetTitle()`和`Student::GetGpa()`。基类实例`Person`，`p1`，只能访问自己的成员，比如`Person::GetTitle()`。
- en: 'Looking at a memory model for the above example, we have:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 查看上面示例的内存模型，我们有：
- en: '![Figure 6.1 – Memory model for current example](img/Figure_6.1_B15702.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图6.1 - 当前示例的内存模型](img/Figure_6.1_B15702.jpg)'
- en: Figure 6.1 – Memory model for current example
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1 - 当前示例的内存模型
- en: Notice that in the preceding memory model, a `Student` instance is comprised
    of a `Person` sub-object. That is, at the memory address indicating the beginning
    of `*s1`, a `Student`, we first see the memory layout of its `Person` data members.
    Then, we see the memory layout of its additional `Student` data members. Of course,
    `p1`, which is a `Person`, only contains `Person` data members.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的内存模型中，`Student`实例由`Person`子对象组成。也就是说，在指示`*s1`的内存地址上，一个`Student`，我们首先看到它的`Person`数据成员的内存布局。然后，我们看到它额外的`Student`数据成员的内存布局。当然，`p1`，它是一个`Person`，只包含`Person`数据成员。
- en: Access of base and derived class members will be subject to the access regions
    specified by each class. Let's take a look to see how inherited access regions
    work.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 基类和派生类成员的访问将受到每个类指定的访问区域的限制。让我们看看继承的访问区域是如何工作的。
- en: Examining inherited access regions
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查继承的访问区域
- en: Access regions, including inherited access regions, define from which scope
    members, including inherited members, are directly accessible.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 访问区域，包括继承的访问区域，定义了从哪个范围直接访问成员，包括继承的成员。
- en: The derived class inherits all members specified in its base class. However,
    direct access to those members is subject to the access regions specified in the
    base class.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 派生类继承了其基类中指定的所有成员。然而，对这些成员的直接访问受到基类指定的访问区域的限制。
- en: 'Members (both data and function) inherited from the *base class* are accessible
    to the *derived class* as specified by the access regions that are imposed by
    the base class. The inherited access regions and how they relate to derived class
    access are:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 从*基类*继承的成员（包括数据和函数）按照基类强加的访问区域对*派生类*是可访问的。继承的访问区域及其与派生类访问的关系如下：
- en: '**private** members defined in the base class are inaccessible outside the
    scope of the base class. The scope of a class includes member functions of that
    class.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在基类中定义的**private**成员在基类的范围之外是不可访问的。类的范围包括该类的成员函数。
- en: '**protected** members defined in the base class are accessible in the scope
    of the base class and within the scope of the derived class, or its descendants.
    This means member functions of these classes.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在基类中定义的**protected**成员在基类的范围内和派生类或其后代的范围内是可访问的。这意味着这些类的成员函数。
- en: '**public** members defined in the base class are accessible from any scope,
    including the scope of the derived class.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在基类中定义的**public**成员可以从任何范围访问，包括派生类的范围。
- en: In the previous, simple example, we noticed that both a `Person` and a `Student`
    instance accessed `public` member function `Person::GetTitle()` from the scope
    of `main()`. Also, we noticed that the `Student` instance accessed its `public`
    member `Student::GetGpa()` from `main()`. Generally, outside the scope of a given
    class, the only members that are accessible are those that are in the public interface,
    such as in this example.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的简单示例中，我们注意到`Person`和`Student`实例都从`main()`的范围内访问了`public`成员函数`Person::GetTitle()`。此外，我们注意到`Student`实例从`main()`访问了它的`public`成员`Student::GetGpa()`。通常，在给定类的范围之外，只有公共接口中的成员是可访问的，就像在这个例子中一样。
- en: We will soon see a larger, full program example in this chapter showcasing the
    `protected` access region. But first, let's review inherited constructors and
    destructors so that our full program example can provide greater overall utility.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将很快看到一个更大的完整程序示例，展示`protected`访问区域。但首先，让我们回顾一下继承的构造函数和析构函数，以便我们的完整程序示例可以提供更大的整体效用。
- en: Understanding inherited constructors and destructors
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解继承的构造函数和析构函数
- en: Through single inheritance, we can build a hierarchy of related classes. We
    have seen that when we instantiate a derived class object, memory for its base
    class data members is then followed by the additional memory required for the
    additional derived class data members. Each of these sub-objects will need to
    be constructed. Luckily, each class will have defined a suite of constructors
    for just that purpose. We then need to understand how the language can be utilized
    to allow us to specify the appropriate base class constructor for the base class
    sub-object when instantiating and constructing a derived class object.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 通过单一继承，我们可以构建一组相关的类。我们已经看到，当我们实例化派生类对象时，其基类数据成员的内存将被额外需要的派生类数据成员的内存所跟随。每个子对象都需要被构造。幸运的是，每个类都将为此目的定义一套构造函数。然后我们需要理解语言如何被利用来允许我们在实例化和构造派生类对象时指定适当的基类构造函数。
- en: Similarly, when an object of a derived class type is no longer needed and will
    be destructed, it is important to note that a destructor for each sub-object comprising
    the derived class instance will be implicitly called on our behalf.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，当不再需要派生类类型的对象并且将被销毁时，重要的是要注意，将为组成派生类实例的每个子对象隐式调用析构函数。
- en: Let's take a look at the constructor and destructor sequence in a single inheritance
    hierarchy, and how we can make choices when more than one constructor is available
    for a base class sub-object found in a derived class instance.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下单一继承层次结构中的构造函数和析构函数顺序，以及当一个基类子对象在派生类实例中找到多个构造函数可用时，我们如何做出选择。
- en: Implicit constructor and destructor invocations
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 隐式构造函数和析构函数调用
- en: Constructors and destructors are two types of member functions that are not
    explicitly inherited by the derived class. This means that the signature of a
    base class constructor may not be used to instantiate a derived class object.
    However, we will see that when a derived class object is instantiated, the memory
    for both the base and derived class portions of the overall object will be separately
    initialized using each class' respective constructors.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数和析构函数是两种不被派生类显式继承的成员函数。这意味着基类构造函数的签名不能用来实例化派生类对象。然而，我们将看到，当实例化派生类对象时，整体对象的基类和派生类部分的内存将分别使用各自的构造函数进行初始化。
- en: When an object of a derived class type is instantiated, not only will one of
    its constructors be invoked, but so will one in each of its preceding base classes.
    The most generalized base class constructor will first be executed, followed by
    the constructors all the way down the hierarchy until we arrive at the derived
    class constructor that is the same type as the instance at hand.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当实例化派生类类型的对象时，不仅将调用其构造函数，还将调用其每个前面基类的构造函数。最一般的基类构造函数将首先被执行，然后一直沿着层次结构调用构造函数，直到达到与手头实例相同类型的派生类构造函数。
- en: Similarly, when a derived class instance goes out of scope (or is explicitly
    deallocated for pointers to instances), all the relevant destructors will be invoked,
    but in the opposite order of construction. First, the derived class destructor
    will be executed, then all the destructors in an upward fashion for each preceding
    base class will be invoked and executed until we reach the most generalized base
    class.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，当派生类实例超出范围（或对实例的指针进行显式释放）时，所有相关的析构函数将被调用，但顺序与构造相反。首先，派生类析构函数将被执行，然后将依次调用和执行每个前面基类的析构函数，直到达到最一般的基类。
- en: You may now ask, how may I choose from a set of potential base class constructors
    for my base class sub-object when instantiating a derived class? Let's take a
    more detailed look at the member initialization list to discover the solution.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可能会问，当我实例化一个派生类时，我如何从一组潜在的基类构造函数中选择适合我的基类子对象？让我们更详细地看一下成员初始化列表，找到解决方案。
- en: Usage of the member initialization list to select a base class constructor
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用成员初始化列表来选择基类构造函数
- en: The member initialization list may be used to specify which base class constructor
    should be invoked when instantiating a derived class object. Each derived class
    constructor may specify that a different base class constructor is used to initialize
    the given base class portion of the derived class object.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 成员初始化列表可以用来指定在实例化派生类对象时应调用哪个基类构造函数。每个派生类构造函数可以指定使用不同的基类构造函数来初始化派生类对象的给定基类部分。
- en: If the derived class constructor's member initialization list does not specify
    which base class constructor should be utilized, the default base class constructor
    will be invoked.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果派生类构造函数的成员初始化列表没有指定应使用哪个基类构造函数，则将调用默认的基类构造函数。
- en: The member initialization list is specified using a `:` after the parameter
    list in the derived class constructor. To specify which base class constructor
    should be used, the name of the base class constructor, followed by parentheses
    including any values to be passed to that base class constructor, can be indicated.
    Based upon the signature of the parameters in the base class list following the
    base class name, the appropriate base class constructor will be selected to initialize
    the base class portion of the derived class object.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 成员初始化列表在派生类构造函数的参数列表后使用`:`来指定。为了指定应该使用哪个基类构造函数，可以指定基类构造函数的名称，后跟括号，包括要传递给该基类构造函数的任何值。根据在基类名称后的基类列表中参数的签名，将选择适当的基类构造函数来初始化派生类对象的基类部分。
- en: 'Here is a simple example to illustrate the basic syntax for base class constructor
    selection:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的示例，用来说明基类构造函数选择的基本语法：
- en: 'Let''s start with the basic class definitions (note that many member functions
    are omitted):'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让我们从基本的类定义开始（请注意，许多成员函数被省略）：
- en: '[PRE2]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The constructors for the previous class definitions would be as follows (notice
    two of the derived class constructors use the member initialization list):'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 之前的类定义的构造函数如下（请注意，两个派生类构造函数使用了成员初始化列表）：
- en: '[PRE3]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now that we understand how to utilize the member initialization list to specify
    a base class constructor, let's move forward with a complete program example.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何利用成员初始化列表来指定基类构造函数，让我们继续进行一个完整的程序示例。
- en: Putting all the pieces together
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将所有部分组合在一起
- en: So far, in this chapter, we have seen many pieces contributing to a full program
    example. It is important to see our code in action, with all its various components.
    We need to see the basic mechanics of inheritance, how the member initialization
    list is used to specify which base class constructor should implicitly be invoked,
    and the significance of the `protected` access region.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本章中，我们已经看到了许多部分构成了一个完整的程序示例。重要的是要看到我们的代码在运行中，以及它的各个组件。我们需要看到继承的基本机制，成员初始化列表是如何用来指定应该隐式调用哪个基类构造函数的，以及`protected`访问区域的重要性。
- en: 'Let''s take a look at a more complex, full program example to fully illustrate
    single inheritance. This example will be broken into segments; the full program
    can be found in the following GitHub location:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个更复杂的完整程序示例，以充分说明单一继承。这个示例将被分成几个部分；完整的程序可以在以下GitHub位置找到：
- en: '[https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter06/Chp6-Ex1.cpp](https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter06/Chp6-Ex1.cpp)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter06/Chp6-Ex1.cpp](https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter06/Chp6-Ex1.cpp)'
- en: '[PRE4]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the previous class definition, we now have a fully-fledged class definition
    for `Person`, with many more details than our simple syntax examples formerly
    used in this section. Notice that we have introduced a `protected` access region
    and placed the member function `void ModifyTitle(const char *);` in this access
    region.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的类定义中，我们现在有了一个完整的`Person`类定义，比我们在本节中以前使用的简单语法示例要详细得多。请注意，我们引入了一个`protected`访问区域，并将成员函数`void
    ModifyTitle(const char *);`放在这个访问区域中。
- en: 'Moving onward, let''s examine the non-line member function definitions for
    `Person`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 继续前进，让我们来看一下`Person`的非内联成员函数定义：
- en: '[PRE5]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The implementation for the aforesaid `Person` member functions is as expected.
    Now, let''s add the class definition for the derived class, `Student`, along with
    its inline function definitions:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 上述`Person`成员函数的实现如预期的那样。现在，让我们添加派生类`Student`的类定义，以及它的内联函数定义：
- en: '[PRE6]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the preceding definition of `Student`, `class Student` is derived from `Person`
    using `public` inheritance (that is, a public base class), which supports an Is-A
    relationship. Notice the `public` access label after the base class list following
    the `:` in the derived class definition (that is, `class Student: public Person`).
    Notice that our `Student` class has added data members and member functions above
    and beyond those that it automatically inherits from `Person`.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '在之前的`Student`定义中，`class Student`是通过`public`继承（即公共基类）从`Person`派生的，支持Is-A关系。请注意，在派生类定义中的基类列表后面的`:`之后有一个`public`访问标签（即`class
    Student: public Person`）。请注意，我们的`Student`类添加了数据成员和成员函数，超出了它从`Person`自动继承的那些。'
- en: 'Next, adding in the non-inline `Student` member functions, we continue growing
    our code:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，添加非内联的`Student`成员函数，我们继续完善我们的代码：
- en: '[PRE7]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the aforementioned segment of code, we define the non-inline member functions
    of `Student`. Notice that the default constructor merely uses the member initialization
    list to initialize a data member, as we did in the last chapter. Since no `Person`
    constructor has been specified in the member initialization list of the default
    `Student` constructor, the default `Person` constructor will be used to initialize
    the `Person` sub-object when instantiating a `Student` with its default constructor.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码段中，我们定义了`Student`的非内联成员函数。请注意，默认构造函数仅使用成员初始化列表来初始化数据成员，就像我们在上一章中所做的那样。由于在默认`Student`构造函数的成员初始化列表中没有指定`Person`构造函数，所以在实例化具有默认构造函数的`Student`时，将使用默认的`Person`构造函数来初始化`Person`子对象。
- en: Next, the alternate constructor for `Student` uses the member initialization
    list to specify that the alternate constructor of `Person` should be utilized
    to construct the `Person` sub-object contained within a given `Student` instance.
    Notice that the selected constructor will match the signature `Person::Person(char
    *, char *, char, char *)`, and that selected input parameters from the `Student`
    constructor (namely `fn`, `ln`, `mi`, and `t`) will be passed as parameters to
    the `Person` alternate constructor.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，`Student`的替代构造函数使用成员初始化列表来指定应该使用`Person`的替代构造函数来构造给定`Student`实例中包含的`Person`子对象。请注意，所选的构造函数将匹配签名`Person::Person(char
    *, char *, char, char *)`，并且将从`Student`构造函数中选择的输入参数（即`fn`，`ln`，`mi`和`t`）作为参数传递给`Person`的替代构造函数。
- en: In the copy constructor for `Student`, the member initialization list is used
    to specify that the `Person` copy constructor should be called to initialize the
    `Person` sub-object of the `Student` instance that is being constructed. The `Student
    &` will be implicitly up-cast to a `Person &` as the `Person` copy constructor
    is called. Recall, the top part of a `Student` object *Is-A* `Person`, so this
    is fine. Next, in the body of the copy constructor for `Student`, we initialize
    any remaining data members the `Student` class has defined.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Student`的复制构造函数中，使用成员初始化列表指定应调用`Person`的复制构造函数来初始化正在构造的`Student`实例中包含的`Person`子对象。`Student
    &`将被隐式向上转型为`Person &`，因为调用了`Person`的复制构造函数。请记住，`Student`对象的顶部部分*Is-A*`Person`，所以这是可以的。接下来，在`Student`的复制构造函数的主体中，我们初始化了`Student`类定义的任何剩余数据成员。
- en: Moving onward, we see the `Student` destructor. Implicitly, as the *last* line
    of code in this method, a call to the `Person` destructor is patched in for us
    by the compiler. This is how the destructor sequence is automated for us. Consequently,
    the most specialized portion of the object, the `Student` pieces, will first be
    destructed, followed by the implicit call to the `Person` destructor to destruct
    the base class sub-object.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 继续向前，我们看到了`Student`的析构函数。隐式地，作为这个方法中的*最后*一行代码，编译器为我们补充了对`Person`析构函数的调用。这就是析构函数序列是如何自动化的。因此，对象的最专业化部分，即`Student`部分，将首先被销毁，然后隐式调用`Person`析构函数来销毁基类子对象。
- en: Next, in the `Print()` method for `Student`, notice that we would like to print
    out various data members that are inherited from `Person`. Alas, these data members
    are `private`. We may not access them outside the scope of the `Person` class.
    Nevertheless, the `Person` class has left us with a public interface, such as
    `Person::GetTitle()` and `Person::GetFirstName()` so that we may access these
    data members from any scope of our application, including from `Student::Print()`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`Student`的`Print()`方法中，请注意我们想要打印出从`Person`继承的各种数据成员。遗憾的是，这些数据成员是`private`的。我们不能在`Person`类的范围之外访问它们。然而，`Person`类留下了一个公共接口，比如`Person::GetTitle()`和`Person::GetFirstName()`，这样我们就可以从我们应用程序的任何范围访问这些数据成员，包括从`Student::Print()`中。
- en: Finally, we come to the `Student::EarnPhD()` method. Notice that all this method
    does is invoke the `protected` member function `Person::ModifyTitle("Dr.");`.
    Recall, `protected` members defined by the base class are accessible within the
    scope of the derived class. `Student::EarnPhD()` is a member function of the derived
    class. `EarnPhD()` provides a public interface to modify the title of a `Person`,
    perhaps after checking if the student has met graduation requirements. Because
    `Person::ModifyTitle()` is not `public`, instances of `Person` or `Student` must
    go through a controlled `public` interface to change their respective titles.
    Such interfaces might include methods such as `Student::EarnPhD()` or `Person::GetMarried()`,
    and so on.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们来到`Student::EarnPhD()`方法。请注意，这个方法所做的就是调用`protected`成员函数`Person::ModifyTitle("Dr.");`。请记住，基类定义的`protected`成员在派生类的范围内是可访问的。`Student::EarnPhD()`是派生类的成员函数。`EarnPhD()`提供了一个公共接口来修改`Person`的头衔，也许在检查学生是否达到毕业要求之后。因为`Person::ModifyTitle()`不是`public`，`Person`或`Student`的实例必须通过受控的`public`接口来更改它们各自的头衔。这样的接口可能包括诸如`Student::EarnPhD()`或`Person::GetMarried()`等方法。
- en: 'Nonetheless, let''s complete our full program example by examining `main()`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，让我们通过检查`main()`来完成我们的完整程序示例：
- en: '[PRE8]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the last segment of this program, in `main()`, we simply instantiate a `Student`,
    namely `s1`. The `Student` utilizes `Student::Print()` to print its current data.
    The `Student` then sets her current course set to `"Doctoral Thesis"` and then
    invokes `Student::EarnPhD();`. Note that any `public` members of `Student` or
    `Person` are available for `s1` to utilize outside the scope of their class, such
    as in `main()`. To complete the example, `s1` reprints her details using `Student::Print()`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在程序的最后一部分，在`main()`中，我们只是实例化了一个`Student`，即`s1`。`Student`利用`Student::Print()`来打印其当前数据。然后，`Student`将她当前的课程设置为“博士论文”，然后调用`Student::EarnPhD();`。请注意，`Student`或`Person`的任何`public`成员都可以在类的范围之外被`s1`使用，比如在`main()`中。为了完成示例，`s1`使用`Student::Print()`重新打印她的详细信息。
- en: 'Here is the output for the full program example:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是完整程序示例的输出：
- en: '[PRE9]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now that we have competency with the basic mechanics of single inheritance,
    and have used single inheritance to model an Is-A relationship, let's move onward
    to see how inheritance can be used to model a different concept by exploring protected
    and private base classes.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经掌握了单继承的基本机制，并且已经使用单继承来模拟Is-A关系，让我们继续看看继承如何用于模拟不同的概念，通过探索受保护和私有基类。
- en: Implementation inheritance – changing the purpose of inheritance
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现继承-改变继承的目的
- en: So far, we have demonstrated using a public base class, known also as *public
    inheritance*. Public base classes are used to model Is-A relationships and provide
    the primary motivation behind building an inheritance hierarchy. This usage supports
    the concepts of generalization and specialization.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经演示了使用公共基类，也称为*公共继承*。公共基类用于建模Is-A关系，并为构建继承层次结构提供了主要动机。这种用法支持泛化和特化的概念。
- en: Occasionally, inheritance may use used as a tool to implement one class in terms
    of another, that is, by one class using another as its underlying implementation.
    This is known as **implementation inheritance** and it does not support the ideals
    of generalization and specialization. Yet, implementation inheritance can provide
    a quick and easily reusable way to implement one class based upon another. It
    is fast and relatively error-free. Many class libraries use this tool without
    the knowledge of their class users. It is important to distinguish implementation
    inheritance from traditional hierarchy building for the motivation of specifying
    Is-A relationships.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 偶尔，继承可能被用作一种工具，以另一个类的术语来实现一个类，也就是说，一个类使用另一个类作为其基础实现。这被称为**实现继承**，它不支持概括和特化的理想。然而，实现继承可以提供一种快速和易于重用的实现一个类的方式。它快速且相对无误。许多类库在不知晓其类用户的情况下使用这个工具。重要的是要区分实现继承和传统层次结构构建的动机，以指定Is-A关系。
- en: Implementation inheritance, supported in C++ with private and protected bases
    classes, is exclusive to C++. Other OOP languages choose to only embrace inheritance
    for the purpose of modeling Is-A relationships, which is supported in C++ through
    public base classes. An OO purist would endeavor to use inheritance only to support
    generalization and specialization (*Is-A*). However, using C++, we will understand
    appropriate uses of implementation inheritance so that we may use this language
    feature wisely.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在C++中支持使用私有和受保护的基类来实现实现继承，这是C++独有的。其他面向对象的语言选择只支持用于建模Is-A关系的继承，而C++通过公共基类支持这一点。面向对象的纯粹主义者会努力只使用继承来支持概括和特化（*Is-A*）。然而，使用C++，我们将理解实现继承的适当用法，以便明智地使用这种语言特性。
- en: Let's move onward to understand how and why we might utilize this type of inheritance.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续了解我们可能如何以及为什么使用这种类型的继承。
- en: Modifying access labels in the base class list by using protected or private
    base classes
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过使用受保护或私有基类修改基类列表中的访问标签
- en: To reiterate, the usual type of inheritance is `public` inheritance. The `public`
    label is used in the base class list for a given derived class. However, in the
    base class list, the keywords `protected` and `private` are also options.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 重申一下，通常的继承类型是`public`继承。在给定派生类的基类列表中使用`public`标签。然而，在基类列表中，关键字`protected`和`private`也是可选项。
- en: That is, in addition to labeling access regions within a class or structure
    definition, an access label can be used in the base class list of a derived class
    definition to designate how members defined in a base class are inherited by derived
    classes.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，除了在类或结构定义中标记访问区域之外，访问标签还可以在派生类定义的基类列表中使用，以指定基类中定义的成员如何被派生类继承。
- en: Inherited members can only be made more restrictive than they were designated
    to be in the base class. When the derived class specifies that inherited members
    should be treated in a more restrictive fashion, any descendants of that derived
    class will also be subject to these specifications.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 继承成员只能比在基类中指定的更加严格。当派生类指定继承成员应以更加严格的方式对待时，该派生类的任何后代也将受到这些规定的约束。
- en: 'Let''s see a quick example of the *base class list*:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个*基类列表*的快速示例：
- en: Recall, most often, a `public` access label will be specified in the base class
    list.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请记住，基类列表中通常会指定`public`访问标签。
- en: 'In this example, a `public` access label is used to specify that a `Person`
    is a `public` base class of `Student`. That is, a `Student` *Is-A* `Person`:'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这个例子中，使用`public`访问标签来指定`Person`是`Student`的`public`基类。也就是说，`Student` *Is-A*
    `Person`：
- en: '[PRE10]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Access labels specified in the *base class list* modify inherited access regions
    as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在*基类列表*中指定的访问标签会修改继承的访问区域，如下所示：
- en: '**public**: Public members in the base class are accessible from any scope;
    protected members in the base class are accessible from the scope of the base
    and derived classes. We are familiar with using a public base class.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**public**：基类中的公共成员可以从任何范围访问；基类中的受保护成员可以从基类和派生类的范围访问。我们熟悉使用公共基类。'
- en: '**protected**: Public and protected members in the base class act as though
    they are defined as protected by the derived class (that is, accessible from the
    scope of the base and derived classes, and any descendants of the derived class).'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**protected**：基类中的公共和受保护成员在派生类中的作用就像它们被派生类定义为受保护的一样（即可以从基类和派生类的范围以及派生类的任何后代中访问）。'
- en: '**private**: Public and protected members in the base class act as though they
    are defined as private by the derived class, allowing these members to be accessible
    within the scope of the derived class, but not within the scope of any of the
    derived class descendants.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**private**：基类中的公共和受保护成员在派生类中的作用就像它们被定义为私有的一样，允许这些成员在派生类的范围内访问，但不允许在任何派生类的后代范围内访问。'
- en: Note
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In all cases, class members labeled as private within a class definition, are
    accessible only within the scope of the defining class. Modifying the access labels
    in the base class list can only treat inherited members more restrictively, never
    less restrictively.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有情况下，在类定义中标记为私有的类成员只能在定义类的范围内访问。修改基类列表中的访问标签只能更加严格地处理继承成员，而不能更加宽松地处理。
- en: In the absence of an access label specified in conjunction with the base class,
    `private` will be assumed if the user defined type is a `class`, and `public`
    will be the default if the user defined type is a `struct`. A good rule of thumb
    is to always include the access label in the base class list for a derived class
    (or structure) definition.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在与基类一起指定的访问标签缺失时，如果用户定义的类型是`class`，则假定为`private`，如果用户定义的类型是`struct`，则默认为`public`。一个好的经验法则是在派生类（或结构）定义的基类列表中始终包括访问标签。
- en: Creating a base class to illustrate implementation inheritance
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个基类来说明实现继承
- en: 'To understand implementation inheritance, let''s review a base class that may
    serve as a basis to implement other classes. We will examine a typical pair of
    classes to implement an encapsulated `LinkList`. Though this example will be broken
    into several segments, the full example will be shown, and can also be found in
    GitHub:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解实现继承，让我们回顾一个可能作为实现其他类基础的基类。我们将检查一对典型的类，以实现封装的`LinkList`。尽管这个例子将被分成几个部分，但完整的例子将被展示，并且也可以在GitHub上找到：
- en: '[https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter06/Chp6-Ex2.cpp](https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter06/Chp6-Ex2.cpp)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter06/Chp6-Ex2.cpp](https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter06/Chp6-Ex2.cpp)'
- en: '[PRE11]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We begin the previous segment of code with class definitions for both `LinkListElement`
    and `LinkList`. The `LinkList` class will contain data members that are pointers
    to the `head`, `tail`, and `current` element in `LinkList`. Each of these pointers
    is of type `LinkListElement`. A variety of typical `LinkList` processing methods
    are included, such as `InsertAtFront()`, `RemoveAtFront()`, `DeleteAtFront()`,
    `IsEmpty()`, and `Print()`. Let''s take a quick peek at the implementation of
    these methods with the next segment of code:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从上一段代码开始，定义了`LinkListElement`和`LinkList`的类定义。`LinkList`类将包含指向`LinkList`中`head`，`tail`和`current`元素的指针的数据成员。这些指针都是`LinkListElement`类型。包括各种典型的`LinkList`处理方法，如`InsertAtFront()`，`RemoveAtFront()`，`DeleteAtFront()`，`IsEmpty()`和`Print()`。让我们快速查看这些方法的实现，下一段代码中会有。
- en: '[PRE12]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the previously mentioned member function definitions, we note that a `LinkList`
    can be constructed either empty or with one element (note the two available constructors).
    `LinkList::InsertAtFront()` adds an item to the front of the list for efficiency.
    `LinkList::RemoveAtFront()` removes an item and returns it to the user, whereas
    `LinkList::DeleteAtFront()` removes and deletes the front item. The `LinkList::Print()`
    function allows us to view the `LinkList` whenever necessary.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面提到的成员函数定义中，我们注意到`LinkList`可以为空或带有一个元素构造（注意两个可用的构造函数）。`LinkList::InsertAtFront()`在列表的前面添加一个项目以提高效率。`LinkList::RemoveAtFront()`删除一个项目并将其返回给用户，而`LinkList::DeleteAtFront()`删除前面的项目。`LinkList::Print()`函数允许我们在必要时查看`LinkList`。
- en: 'Next, let''s see a typical `main()` function to illustrate how a `LinkList`
    can be instantiated and manipulated:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看一个典型的`main()`函数，以说明如何实例化和操作`LinkList`。
- en: '[PRE13]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In `main()`, we create a few items, of type `Item`, which will later be data
    for `LinkListElement`. We then instantiate a `LinkListElement`, namely `element1`,
    and add it to a newly constructed `LinkList`, using `LinkList list1(element1);`.
    We then add several items to the list using `LinkList::InsertAtFront()`, and call
    `LinkList::Print()` to print out `list1` for a baseline. Next, we delete elements
    from `list1`, one by one, printing as we go, using `LinkList::DeleteAtFront()`
    and `LinkList::Print()`, respectively.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在`main()`中，我们创建了几个项目，类型为`Item`，这些项目稍后将成为`LinkListElement`的数据。然后，我们实例化了一个`LinkListElement`，即`element1`，并将其添加到新构造的`LinkList`中，使用`LinkList
    list1(element1);`。然后，我们使用`LinkList::InsertAtFront()`向列表中添加了几个项目，并调用`LinkList::Print()`来打印出`list1`作为基线。接下来，我们逐个从`list1`中删除元素，打印删除的元素，使用`LinkList::DeleteAtFront()`和`LinkList::Print()`。
- en: Now, we instantiate a second `LinkList`, namely `list2`, which starts out empty.
    We gradually insert several items using `LinkList::InsertAtFront()`, then print
    the list, and then delete each element, one by one, using `LinkList::DeleteAtFront()`,
    printing the revised list with each step.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们实例化了第二个`LinkList`，即`list2`，它开始为空。我们逐渐使用`LinkList::InsertAtFront()`插入几个项目，然后打印列表，然后使用`LinkList::DeleteAtFront()`逐个删除每个元素，打印每个步骤后的修订列表。
- en: The point of this example is not to exhaustively review the inner workings of
    this code. You are undoubtedly familiar with the concept of a `LinkList`. More
    so, the point is to establish this set of classes, `LinkListElement` and `LinkList`,
    as a set of building blocks in which several Abstract Data Types can be built.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子的重点不是详尽地审查这段代码的内部工作原理。毫无疑问，您对`LinkList`的概念非常熟悉。更重要的是，要将`LinkListElement`和`LinkList`这组类作为一组构建块，可以构建多个抽象数据类型。
- en: 'Nonetheless, the output for the preceding example is:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，上述示例的输出是：
- en: '[PRE14]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Next, let's see how `LinkList` can be used as a private base class.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看`LinkList`如何作为私有基类使用。
- en: Using a private base class to implement one class in terms of another
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用私有基类来实现一个类以另一个类为基础
- en: We have just created a `LinkList` class to support the basic handling of an
    encapsulated linked list data structure. Now, let's imagine that we would like
    to implement an `Push()`, `Pop()`, `IsEmpty()`, and perhaps `Print()`.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚创建了一个`LinkList`类，以支持封装的链表数据结构的基本处理。现在，让我们想象一下，我们想要实现`Push()`，`Pop()`，`IsEmpty()`，也许还有`Print()`。
- en: You may ask how a stack is implemented. The answer is that the implementation
    does not matter, so long as it supports the expected interface of the ADT being
    modeled. Perhaps a stack is implemented using an array, or perhaps it is implemented
    in a file. Perhaps it is implemented using a `LinkedList`. Each implementation
    has pros and cons. In fact, the underlying implementation of the ADT might change,
    yet users of the ADT should not be affected by such a change. This is the basis
    of *implementation inheritance*. A derived class is implemented in terms of a
    base class, yet the underlying details of the base class from which the new class
    is derived are effectively hidden. These details cannot be directly used by instances
    of the derived class (in this case, the ADT). Nonetheless, the base class silently
    provides the implementation for the derived class.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会问栈是如何实现的。答案是实现并不重要，只要它支持被建模的ADT的预期接口。也许栈是使用数组实现的，或者它是在文件中实现的。也许它是使用`LinkedList`实现的。每种实现都有优缺点。事实上，ADT的底层实现可能会改变，但ADT的用户不应受到这种变化的影响。这就是*实现继承*的基础。派生类是基类的实现，但派生类的底层细节是有效隐藏的。这些细节不能直接被派生类的实例（在这种情况下是ADT）使用。尽管如此，基类默默地为派生类提供实现。
- en: We will use this approach to implement a `Stack` using a `LinkedList` as its
    underlying implementation. To do this, we will have `class Stack` extend `LinkedList`
    using a `private` base class. `Stack` will define a public interface for its users
    to establish the interface for this ADT, such as `Push()`, `Pop()`, `IsEmpty()`,
    and `Print()`. The implementation of these member functions will make use of selected
    `LinkedList` member functions, but `Stack` users will not see this, nor will `Stack`
    instances be able to use any `LinkList` members directly themselves.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用这种方法来使用`LinkedList`作为其底层实现来实现一个`Stack`。为此，我们将让`class Stack`扩展`LinkedList`，使用一个`private`基类。`Stack`将为其用户定义一个公共接口，以建立这个ADT的接口，比如`Push()`、`Pop()`、`IsEmpty()`和`Print()`。这些成员函数的实现将使用选定的`LinkedList`成员函数，但`Stack`的用户将看不到这一点，`Stack`的实例也不能直接使用任何`LinkList`成员。
- en: Here, we are not saying a `Stack` *Is-A* `LinkList`, but rather, a `Stack` is
    implemented in terms of a `LinkedList` at the moment—and that underlying implementation
    could change!
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们并不是说`Stack`*是一个*`LinkList`，而是说，一个`Stack`是目前以`LinkedList`为基础实现的——而这个底层实现可能会改变！
- en: 'The code to implement `Stack` is simple. Assume we are using the `LinkList`
    and `LinkListElement` classes from the previous example. Let''s add the `Stack`
    class here. The full program example can be found in our GitHub:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`Stack`的代码很简单。假设我们使用了前面例子中的`LinkList`和`LinkListElement`类。让我们在这里添加`Stack`类。完整的程序示例可以在我们的GitHub上找到：
- en: '[https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter06/Chp6-Ex3.cpp](https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter06/Chp6-Ex3.cpp)'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter06/Chp6-Ex3.cpp](https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter06/Chp6-Ex3.cpp)'
- en: '[PRE15]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Notice how compact the aforementioned code is for our `Stack` class! We begin
    by specifying that `Stack` has a `private` base class of `LinkList`. Recall, a
    `private` base class means that the `protected` and `public` members inherited
    from `LinkList` act as though they were defined by `Stack` as `private` (and are
    only accessible within the scope of `Stack`, that is, member functions of `Stack`).
    This means that instances of `Stack` may not use the *former* public interface
    of `LinkList`. This also means that the underlying implementation of `Stack` as
    a `LinkList` is effectively hidden. Of course, `LinkList` instances are not affected
    in any way and may use their `public` interface as usual.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们的`Stack`类的上述代码是多么紧凑！我们首先指定`Stack`有一个`private`的基类`LinkList`。回想一下，一个`private`的基类意味着从`LinkList`继承的`protected`和`public`成员就好像是由`Stack`定义为`private`一样（只能在`Stack`的范围内访问，也就是`Stack`的成员函数）。这意味着`Stack`的实例可能不能使用`LinkList`的*原来的*公共接口。这也意味着`Stack`作为`LinkList`的底层实现是有效隐藏的。当然，`LinkList`的实例不受任何影响，可以像往常一样使用它们的`public`接口。
- en: We easily define `Stack::Push()` to simply call `LinkList::InsertAtFront()`,
    just as `Stack::Pop()` does little more than call `LinkList::RemoveAtFront()`.
    Even though `Stack` would love to simply use the inherited implementations of
    `LinkList::IsEmpty()` and `LinkList::Print()`, due to `LinkList` being a `private`
    base class, these functions are not part of the public interface of `Stack`. Accordingly,
    `Stack` adds an `IsEmpty()` method, which simply calls `LinkList::IsEmpty();`.
    Notice the use of the scope resolution operator to specify the `LinkList::IsEmpty()`
    method; without the base class qualification, we would be adding a recursive function
    call! This call to the base class method is allowed because `Stack` member functions
    can call the *once public* methods of `LinkList` (they are now treated as `private`
    within `Stack`). Similarly, `Stack::Print()` merely calls `LinkList::Print()`.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们很容易定义`Stack::Push()`来简单调用`LinkList::InsertAtFront()`，就像`Stack::Pop()`做的不仅仅是调用`LinkList::RemoveAtFront()`。尽管`Stack`很想简单地使用`LinkList::IsEmpty()`和`LinkList::Print()`的继承实现，但由于`LinkList`是一个`private`基类，这些函数不是`Stack`的公共接口的一部分。因此，`Stack`添加了一个`IsEmpty()`方法，它只是调用`LinkList::IsEmpty()`。注意使用作用域解析运算符来指定`LinkList::IsEmpty()`方法；没有基类限定，我们将添加一个递归函数调用！这个对基类方法的调用是允许的，因为`Stack`成员函数可以调用`LinkList`的*曾经的*方法（它们现在在`Stack`内部被视为`private`）。同样，`Stack::Print()`只是调用`LinkList::Print()`。
- en: In the scope of `main()`, we instantiate a `Stack`, namely `stack1`. Using the
    public interface of `Stack`, we easily manipulate `stack1` using `Stack::Push()`,
    `Stack::Pop()`, `Stack::IsEmpty()`, and `Stack::Print()`.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在`main()`的范围内，我们实例化了一个`Stack`，即`stack1`。使用`Stack`的公共接口，我们可以很容易地使用`Stack::Push()`、`Stack::Pop()`、`Stack::IsEmpty()`和`Stack::Print()`来操作`stack1`。
- en: 'The output for this example is:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子的输出是：
- en: '[PRE16]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: It is important to note that a pointer to a `Stack` instance cannot be up-cast
    to be stored as a pointer to a `LinkList`. Up-casting is not allowed across a
    `private` base class boundary. This would allow a `Stack` to reveal its underlying
    implementation; C++ does not allow this to happen. Here, we see that a `Stack`
    is merely implemented in terms of a `LinkList`; we are not saying that a `Stack`
    *Is-A* `LinkedList`. This is the concept of implementation inheritance in its
    best light; this example illustrates implementation inheritance favorably.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，`Stack`实例的指针不能向上转型为`LinkList`的指针进行存储。在`private`基类边界上不允许向上转型。这将允许`Stack`揭示其底层实现；C++不允许这种情况发生。在这里，我们只是说`Stack`仅仅是以`LinkList`的方式实现；我们并没有说`Stack`
    *Is-A* `LinkedList`。这是实现继承的最佳例子；这个例子有利地说明了实现继承。
- en: Next, let's move forward to see how we can use a `protected` base class, and
    how that differs from a `private` base class using implementation inheritance.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们继续看看如何使用`protected`基类，以及这与使用实现继承的`private`基类有何不同。
- en: Using a protected base class to implement one class in terms of another
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用protected基类来实现一个类以另一个类为基础
- en: We have just implemented a `Stack` in terms of a `LinkList` using a `private`
    base class. Now, let's implement a `Queue` and a `PriorityQueue`. We will implement
    a `Queue` using `LinkList` as a `protected` base class, and a `PriorityQueue`
    using `Queue` as a `public` base class.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚使用`private`基类以`LinkList`的方式实现了`Stack`。现在，让我们实现一个`Queue`和一个`PriorityQueue`。我们将使用`LinkList`作为`protected`基类来实现`Queue`，并使用`Queue`作为`public`基类来实现`PriorityQueue`。
- en: Again, `Queue` and `PriorityQueue` are ADTs. It is (relatively) unimportant
    how a `Queue` is implemented. The underlying implementation may change. Implementation
    inheritance allows us to implement our `Queue` using a `LinkedList` without revealing
    the underlying implementation to users of the `Queue` class.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，`Queue`和`PriorityQueue`都是ADT。`Queue`的实现方式（相对）不重要。底层实现可能会改变。实现继承允许我们使用`LinkedList`来实现我们的`Queue`，而不会向`Queue`类的用户透露底层实现。
- en: Now, our class `Queue` will use `LinkedList` as a `protected` base class. `Queue`
    will define a public interface for its users to establish the expected interface
    for this ADT, such as `Enqueue()`, `Dequeue()`, `IsEmpty()`, and `Print()`. The
    implementation of these member functions will make use of selected `LinkedList`
    member functions, but `Queue` users will not see this, nor will `Queue` instances
    be able to use any `LinkList` members directly themselves.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的`Queue`类将使用`LinkedList`作为`protected`基类。`Queue`将为其用户定义一个公共接口，以建立该ADT的预期接口，如`Enqueue()`、`Dequeue()`、`IsEmpty()`和`Print()`。这些成员函数的实现将使用选定的`LinkedList`成员函数，但`Queue`用户将看不到这一点，`Queue`实例也无法直接使用任何`LinkList`成员。
- en: Furthermore, our class `PriorityQueue` will extend `Queue` using `public` inheritance.
    That's right, we're back to Is-A. We are saying that a `PriorityQueue` *Is-A*
    `Queue`, and a `Queue` is implemented using a `LinkedList`.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们的`PriorityQueue`类将使用`public`继承来扩展`Queue`。没错，我们又回到了Is-A。我们在说`PriorityQueue`
    *Is-A* `Queue`，而`Queue`是使用`LinkedList`实现的。
- en: We will just add a priority enqueuing method to our `PriorityQueue` class; this
    class will be glad to inherit the `public` interface from `Queue` (but obviously
    not from `LinkList`, which luckily is hidden behind a `protected` base class at
    its parent's level).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在我们的`PriorityQueue`类中添加一个优先级入队方法；这个类将很乐意从`Queue`继承`public`接口（但显然不会从`LinkList`继承，幸运的是，它被隐藏在其父级的`protected`基类后面）。
- en: 'The code to implement `Queue` and `PriorityQueue` is again straightforward.
    The `LinkList` base class needs to be augmented to be more fully functional in
    order to proceed. The `LinkListElement` class can remain the same. We will show
    the basics of the revised `LinkList` class with only its class definition. The
    full code for both `Queue` and `PriorityQueue` will be shown in a separate segment.
    The full program example can be found in our GitHub:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`Queue`和`PriorityQueue`的代码再次很简单。需要扩展`LinkList`基类以使其更加完整功能才能继续。`LinkListElement`类可以保持不变。我们将展示经过修订的`LinkList`类的基本定义。`Queue`和`PriorityQueue`的完整代码将在单独的段落中显示。完整的程序示例可以在我们的GitHub上找到：
- en: '[https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter06/Chp6-Ex4.cpp](https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter06/Chp6-Ex4.cpp)'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter06/Chp6-Ex4.cpp](https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter06/Chp6-Ex4.cpp)'
- en: '[PRE17]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Notice that `LinkList` has been expanded to have a fuller set of features, such
    as being able to add, remove, and delete elements at various positions within
    the `LinkList`. To save example space, we will not show the implementation of
    these methods.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`LinkList`已经扩展为具有更完整的功能集，例如能够在`LinkList`内的各个位置添加、删除和删除元素。为了节省示例空间，我们将不展示这些方法的实现。
- en: 'Now, let''s add the class definitions for `Queue` and `PriorityQueue` in the
    next code segment:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在下一个代码段中添加`Queue`和`PriorityQueue`的类定义：
- en: '[PRE18]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In the previous segment of code, we define the `Queue` and `PriorityQueue` classes.
    Notice that `Queue` has a `protected` base class of `LinkList`. With a `protected`
    base class, the `protected` and `public` members inherited from `LinkList` act
    as though they are defined by `Queue` as `protected`, which means that these inherited
    members are not only accessible within the scope of `Queue`, but also within any
    potential descendants of `Queue`. As before, these restrictions only apply to
    the `Queue` class, its descendants, and their instances; the `LinkList` class
    and its instances are unaffected.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的代码段中，我们定义了`Queue`和`PriorityQueue`类。请注意，`Queue`具有`LinkList`的`protected`基类。使用`protected`基类时，从`LinkList`继承的`protected`和`public`成员就好像是由`Queue`定义为`protected`一样，这意味着这些继承的成员不仅可以在`Queue`的范围内访问，还可以在`Queue`的任何潜在后代内访问。与之前一样，这些限制仅适用于`Queue`类、它的后代和它们的实例；`LinkList`类及其实例不受影响。
- en: In the `Queue` class, no new data members are necessary. The internal implementation
    is handled by `LinkList`. With a `protected` base class, we are saying that the
    `Queue` is implemented using a `LinkList`. Nonetheless, we must provide the `public`
    interface for `Queue` and we do so by adding methods such as `Queue::Enqueue()`,
    `Queue::Dequeue()`, `Queue::IsEmpty()`, and `Queue::Print()`. Notice that in their
    implementations, these methods merely call `LinkList` methods to perform the necessary
    operations. Users of `Queue` must use the `Queue` public interface; the *once
    public* `LinkList` interface is hidden to `Queue` instances.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Queue`类中，不需要新的数据成员。内部实现由`LinkList`处理。通过`protected`基类，我们表明`Queue`是使用`LinkList`实现的。尽管如此，我们必须为`Queue`提供`public`接口，我们通过添加诸如`Queue::Enqueue()`、`Queue::Dequeue()`、`Queue::IsEmpty()`和`Queue::Print()`等方法来实现。请注意，在它们的实现中，这些方法仅调用`LinkList`方法来执行必要的操作。`Queue`的用户必须使用`Queue`的公共接口；*曾经公共的*`LinkList`接口对于`Queue`实例是隐藏的。
- en: Next, we define `PriorityQueue`, another ADT. Notice that `PriorityQueue` defines
    `Queue` as a `public` base class. We are back to inheritance to support an Is-A
    relationship. A `PriorityQueue` *Is-A* `Queue` and can do everything a `Queue`
    can do, and just a little more. As such, `PriorityQueue` inherits as usual from
    `Queue`, including the `Queue` public interface. `PriorityQueue` needs only add
    an additional method for priority enqueuing, namely `PriorityQueue::PriorityEnqueue()`.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们定义了`PriorityQueue`，另一个ADT。请注意，`PriorityQueue`将`Queue`定义为`public`基类。我们又回到了继承，以支持Is-A关系。`PriorityQueue`
    *Is-A* `Queue`，可以做任何`Queue`能做的事情，而且还多一点。因此，`PriorityQueue`通常从`Queue`继承，包括`Queue`的公共接口。`PriorityQueue`只需要添加一个额外的方法来进行优先级入队，即`PriorityQueue::PriorityEnqueue()`。
- en: Since `Queue` has a protected base class of `LinkList`, the `public` interface
    from `LinkList` is considered `protected` to `Queue` and its descendants, including
    `PriorityQueue`, so that `LinkList`'s *once public* methods are considered `protected`
    to both `Queue` and `PriorityQueue`. Notice that `PriorityQueue::PriorityEnqueue()`
    makes use of `LinkList::InsertBeforeItem()`. This would not be possible if `LinkList`
    were a `private`, versus a `protected`, base class of `Queue`.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`Queue`有一个`LinkList`的受保护基类，因此`LinkList`的`public`接口被视为对`Queue`及其后代（包括`PriorityQueue`）是`protected`的，以便`LinkList`的*曾经公共*方法对于`Queue`和`PriorityQueue`都是`protected`的。请注意，`PriorityQueue::PriorityEnqueue()`使用了`LinkList::InsertBeforeItem()`。如果`LinkList`是`Queue`的`private`基类而不是`protected`，这是不可能的。
- en: 'With the class definitions and implementation in place, let''s continue with
    our `main()` function:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 有了类定义和实现，让我们继续我们的`main()`函数：
- en: '[PRE19]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Now, in `main()`, we instantiate a `Queue`, namely `q1`, which utilizes the
    public interface of `Queue`. Note that `q1` may not use the *once public* interface
    of `LinkList`. The `Queue` may only behave like a `Queue`, not a `LinkList`. The
    ADT of `Queue` is preserved.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`main()`中，我们实例化了一个`Queue`，即`q1`，它使用了`Queue`的公共接口。请注意，`q1`可能不使用`LinkList`的*曾经公共*接口。`Queue`只能像`Queue`一样行为，而不是像`LinkList`一样行为。`Queue`的ADT被保留了。
- en: Finally, we instantiate a `PriorityQueue`, namely `q2`, which utilizes the public
    interface of both `Queue` and `PriorityQueue`, such as `Queue::Enqueue()`, and
    `PriorityQueue::PriorityEnqueue()`. Because a `Queue` *Is-A* `PriorityQueue` (`Queue`
    is the `public` base class), the typical mechanics of inheritance are in place,
    allowing `PriorityQueue` to utilize the public interface of its ancestors.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们实例化了一个`PriorityQueue`，即`q2`，它使用了`Queue`和`PriorityQueue`的公共接口，比如`Queue::Enqueue()`和`PriorityQueue::PriorityEnqueue()`。因为`Queue`
    *Is-A* `PriorityQueue`（`Queue`是`public`基类），继承的典型机制已经就位，允许`PriorityQueue`利用其祖先的公共接口。
- en: 'The output for this example is:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子的输出是：
- en: '[PRE20]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Finally, we have seen two examples of using implementation inheritance; it is
    not an often-used feature of C++. However, you now understand `protected` or `private`
    base classes should you run across them in library code, application code that
    you are maintaining, or the rare opportunity in which this technique may prove
    useful for a programming task you may encounter.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们看到了使用实现继承的两个例子；这并不是C++经常使用的特性。然而，现在你了解了`protected`或`private`基类，如果在库代码、你正在维护的应用程序代码中遇到它们，或者在你可能遇到的编程任务中，这种技术可能会有用。
- en: We have now covered the basic features of single inheritance in C++. Let's quickly
    review what we've covered before moving to the next chapter.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经介绍了C++中单一继承的基本特性。在转到下一章之前，让我们快速回顾一下我们之前讨论过的内容。
- en: Summary
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have moved further along our journey with object-oriented
    programming. We have added additional OO concepts and terms, and have seen how
    C++ has direct language support for these concepts. We have seen how inheritance
    in C++ supports generalization and specialization. We have seen how to incrementally
    build a hierarchy of related classes.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经进一步深入了解面向对象编程。我们添加了额外的OO概念和术语，并看到C++对这些概念有直接的语言支持。我们已经看到C++中的继承支持泛化和特化。我们已经看到如何逐步构建一组相关类的层次结构。
- en: We have seen how to grow inheritance hierarchies using single inheritance, and
    how to access inherited data members and member functions. We have reviewed access
    regions to understand which inherited members may directly accessed, based upon
    the access regions in which the members are defined in the base class. We know
    that having a `public` base class equates to defining an Is-A relationship, which
    supports the ideals of generalization and specialization, which is the most commonly
    used reason for inheritance.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何使用单一继承来扩展继承层次结构，以及如何访问继承的数据成员和成员函数。我们已经回顾了访问区域，以了解基类中定义的成员可以直接访问的继承成员，基于这些成员在基类中定义的访问区域。我们知道拥有一个`public`基类等同于定义一个Is-A关系，支持泛化和特化的理想，这是继承最常用的原因。
- en: We have detailed the order of constructor and destructor invocations when instances
    of derived class types are instantiated and destroyed. We have seen the member
    initialization list to select which inherited constructor a derived class object
    may choose to utilize as part of its own construction (for its base class sub-object).
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经详细说明了当派生类类型的实例被实例化和销毁时构造函数和析构函数的调用顺序。我们已经看到了成员初始化列表，以选择派生类对象可能选择利用作为其自身构造的一部分的继承构造函数。
- en: We have seen how changing access labels in a base class list changes the OO
    meaning for the type of inheritance being used. By comparing `public` versus `private`
    and `protected` base classes, we now understand different types of hierarchies,
    such as those built to support Is-A relationships, versus those built to support
    implementation inheritance.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到，在基类列表中更改访问标签会改变所使用的继承类型的面向对象意义。通过比较`public`与`private`和`protected`基类，我们现在了解了不同类型的层次结构，例如那些用于支持Is-A关系的层次结构，与那些用于支持实现继承的层次结构。
- en: We have seen that base classes in our hierarchies may serve as potential building
    blocks for more specialized components, leading to potential reuse. Any potential
    reuse of existing code saves development time and cuts down on the maintenance
    of otherwise duplicated code.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了我们层次结构中的基类可能作为更专业组件的潜在构建块，从而导致潜在的重用。任何现有代码的潜在重用都可以节省开发时间，并减少重复代码的维护。
- en: Through extending our OOP knowledge, we gained a preliminary set of skills relating
    to inheritance and hierarchy building in C++. With the basic mechanics of single
    inheritance under our belts, we can now move forward to learn many more interesting
    object-oriented concepts and details relating to inheritance. Continuing to [*Chapter
    7*](B15702_07_Final_NM_ePub.xhtml#_idTextAnchor298), *Utilizing Dynamic Binding
    through Polymorphism*, we will next learn how to dynamically bind methods to their
    respective operations in a hierarchy of related classes.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 通过扩展我们的面向对象编程知识，我们获得了一组与C++中的继承和层次结构构建相关的初步技能。通过掌握单一继承的基本机制，我们现在可以继续学习更多有趣的面向对象的概念和与继承相关的细节。继续到[*第7章*](B15702_07_Final_NM_ePub.xhtml#_idTextAnchor298)，*通过多态性利用动态绑定*，我们将学习如何将方法动态绑定到相关类的层次结构中的操作。
- en: Questions
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Using your [*Chapter 5*](B15702_05_Final_NM_ePub.xhtml#_idTextAnchor199) solution,
    create a C++ program to build an inheritance hierarchy, generalizing `Person`
    as a base class from the derived class of `Student`.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你的[*第5章*](B15702_05_Final_NM_ePub.xhtml#_idTextAnchor199)解决方案，创建一个C++程序来构建一个继承层次结构，将`Person`泛化为`Student`的派生类。
- en: a. Decide which data members and member functions of your `Student` class are
    more generic and would be better positioned in a `Person` class. Build your `Person`
    class with these members, including appropriate constructors (default, alternate,
    and copy), a destructor, access member functions, and a suitable public interface.
    Be sure to place your data members in the private access region.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: a. 决定`Student`类的哪些数据成员和成员函数更通用，应该更好地放置在`Person`类中。使用这些成员构建你的`Person`类，包括适当的构造函数（默认，替代和复制），析构函数，访问成员函数和合适的公共接口。确保将数据成员放在私有访问区域。
- en: b. Using a `public` base class, derive `Student` from `Person`. Remove members
    from `Student` that are now represented in `Person`. Adjust constructors and the
    destructor accordingly. Use the member initialization list to specify base class
    constructors as needed.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: b. 使用一个`public`基类，从`Person`派生`Student`。从`Student`中删除现在在`Person`中表示的成员。相应地调整构造函数和析构函数。使用成员初始化列表根据需要指定基类构造函数。
- en: c. Instantiate both `Student` and `Person` several times and utilize the appropriate
    `public` interfaces on each. Be sure to dynamically allocate several instances.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: c. 实例化`Student`和`Person`多次，并利用每个适当的`public`接口。确保动态分配多个实例。
- en: d. Add a message using `cout` as the first line in each of your constructors
    and as the first line in your destructors so that you can see the construction
    and destruction order of each instance.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: d. 在每个构造函数的第一行和析构函数的第一行使用`cout`添加一条消息，以便您可以看到每个实例的构造和销毁顺序。
- en: (Optional) Complete the class hierarchy that includes `LinkList`, `Queue`, and
    `PriorityQueue`, using the online code as a basis. Complete the remaining operations
    in the `LinkList` class, and call them as appropriate in the public interface
    of `Queue` and `PriorityQueue`.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: （可选）完成包括`LinkList`，`Queue`和`PriorityQueue`的类层次结构，使用在线代码作为基础。完成`LinkList`类中的其余操作，并根据需要在`Queue`和`PriorityQueue`的公共接口中调用它们。
- en: a. Be sure to add copy constructors for each class (or prototype them in the
    private access region or use `= delete` in the prototype to suppress copying).
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: a. 确保为每个类添加复制构造函数（或在私有访问区域原型它们，或使用`= delete`在原型中抑制复制）。
- en: b. Instantiate `LinkList` using either constructor, then demonstrate how each
    of your operations works. Be sure to invoke `Print()` after adding or deleting
    an element.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: b. 使用任一构造函数实例化`LinkList`，然后演示每个操作的工作方式。确保在添加或删除元素后调用`Print()`。
- en: c. Instantiate `Queue` and `PriorityQueue`, and demonstrate that each of the
    operations in their `public` interfaces works correctly. Remember to demonstrate
    the inherited operations in the `public` interface of `Queue` for instances of
    `PriorityQueue`.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: c. 实例化`Queue`和`PriorityQueue`，并演示它们的`public`接口中的每个操作是否正常工作。记住要演示`Queue`的`public`接口中继承的操作，适用于`PriorityQueue`的实例。
