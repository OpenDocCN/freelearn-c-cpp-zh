["```cpp\n    template <typename T1, typename T2> \n    struct pair \n    { \n        T1 first; \n        T2 second; \n        // other members \n    };\n```", "```cpp\n    auto name_age = make_pair(\"Richard\", 52);\n```", "```cpp\n    pair <int, int> a(1, 1); \n    pair <int, int> a(1, 2); \n    cout << boolalpha; \n    cout << a << \" < \" << b << \" \" << (a < b) << endl;\n```", "```cpp\n    int i1 = 0, i2 = 0; \n    pair<int&, int&> p(i1, i2); \n    ++p.first; // changes i1\n```", "```cpp\n    auto p2 = make_pair(ref(i1), ref(i2)); \n    ++p2.first; // changes i1\n```", "```cpp\n    auto p = minmax(20,10);  \n    cout << \"{\" << p.first << \",\" << p.second << \"}\" << endl;\n```", "```cpp\n    tuple<int, int, int> t3 { 1,2,3 }; \n    cout << \"{\" \n        << get<0>(t3) << \",\" << get<1>(t3) << \",\" << get<2>(t3)  \n        << \"}\" << endl; // {1,2,3}\n```", "```cpp\n    int& tmp = get<0>(t3); \n    tmp = 42; \n    get<1>(t3) = 99;\n```", "```cpp\n    int i1, i2, i3; \n    tie(i1, i2, i3) = t3; \n    cout << i1 << \",\" << i2 << \",\" << i3 << endl;\n```", "```cpp\n    tuple<int&, int&, int&> tr3 = tie(i1, i2, i3); \n    tr3 = t3;\n```", "```cpp\n    vector<int> primes{1, 3, 5, 7, 11, 13}; \n    for (size_t idx = 0; idx < primes.size(); ++idx)  \n    { \n        cout << primes[idx] << \" \"; \n    } \n    cout << endl;\n```", "```cpp\n    template<typename container> void print(container& items) \n    { \n        for (container::iterator it = items.begin();  \n        it != items.end(); ++it) \n        { \n            cout << *it << \" \"; \n        } \n        cout << endl; \n    }\n```", "```cpp\n    list<int> primes{ 3,5,7 }; \n    primes.push_back(11); \n    primes.push_back(13); \n    primes.push_front(2); \n    primes.push_front(1);\n```", "```cpp\n    int last = primes.back(); // get the last item \n    primes.pop_back();        // remove it\n```", "```cpp\n    auto start = primes.begin(); // 1 \n    start++;                     // 2 \n    auto last = start;           // 2 \n    last++;                      // 3 \n    last++;                      // 5 \n    primes.erase(start, last);   // remove 2 and 3\n```", "```cpp\n    list<int> planck{ 6,6,2,6,0,7,0,0,4,0 }; \n    planck.remove(6);            // {2,0,7,0,0,4,0}\n```", "```cpp\n    list<int> planck{ 6,6,2,6,0,7,0,0,4,0 }; \n    auto it = planck.begin(); \n    ++it; \n    ++it; \n    planck.insert(it, -1); // {6,6,-1,2,6,0,7,0,0,4,0}\n```", "```cpp\n    struct point \n    { \n        double x = 0, y = 0; \n        point(double _x, double _y) : x(_x), y(_y) {} \n    }; \n\n    list<point> points; \n    point p(1.0, 1.0); \n    points.push_back(p); \n    points.emplace_back(2.0, 2.0);\n```", "```cpp\n    list<int> num1 { 2,7,1,8,2,8 }; // digits of Euler's number \n    list<int> num2 { 3,1,4,5,6,8 }; // digits of pi \n    num1.swap(num2);\n```", "```cpp\n    list<int> num1 { 2,7,1,8,2,8 }; // digits of Euler's number \n    list<int> num2 { 3,1,4,5,6,8 }; // digits of pi \n    num1.sort();                    // {1,2,2,7,8,8} \n    num2.sort();                    // {1,3,4,5,6,8} \n    num1.merge(num2);               // {1,1,2,2,3,4,5,6,7,8,8,8}\n```", "```cpp\n    num1.unique(); // {1,2,3,4,5,6,7,8}\n```", "```cpp\n    forward_list<int> euler { 2,7,1,8,2,8 }; \n    euler.push_front(-1);       // { -1,2,7,1,8,2,8 } \n    auto it = euler.begin();    // iterator points to -1 \n    euler.insert_after(it, -2); // { -1,-2,2,7,1,8,2,8 } \n    euler.pop_front();          // { -2,2,7,1,8,2,8 } \n    euler.remove_if([](int i){return i < 0;}); \n                                // { 2,7,1,8,2,8 }\n```", "```cpp\n   vector<int> distrib(10); // ten intervals \n   for (int count = 0; count < 1000; ++count) \n   { \n      int val = rand() % 10; \n      ++distrib[val]; \n   } \n   for (int i : distrib) cout << i << endl;\n```", "```cpp\n    map<string, int> people; \n    people.emplace(\"Washington\", 1789); \n    people.emplace(\"Adams\", 1797); \n    people.emplace(\"Jefferson\", 1801); \n    people.emplace(\"Madison\", 1809); \n    people.emplace(\"Monroe\", 1817); \n\n    auto it = people.begin(); \n    pair<string, int> first_item = *it; \n    cout << first_item.first << \" \" << first_item.second << endl;\n```", "```cpp\n    pair<iterator, bool>\n```", "```cpp\n    auto result = people.emplace(\"Adams\", 1825); \n    if (!result.second) \n       cout << (*result.first).first << \" already in map\" << endl;\n```", "```cpp\n    auto result = people.emplace(\"Monroe\", 1817); \n    people.emplace_hint(result.first, \"Polk\", 1845);\n```", "```cpp\n    for (pair<string, int> p : people) \n    { \n        cout << p.first << \" \" << p.second << endl; \n    }\n```", "```cpp\n    people[\"Adams\"] = 1825; \n    people[\"Jackson\"] = 1829;\n```", "```cpp\n    set<string> people{ \n       \"Washington\",\"Adams\", \"Jefferson\",\"Madison\",\"Monroe\",  \n       \"Adams\", \"Van Buren\",\"Harrison\",\"Tyler\",\"Polk\"}; \n    for (string s : people) cout << s << endl;\n```", "```cpp\n    queue<int> primes; \n    primes.push(1); \n    primes.push(2); \n    primes.push(3); \n    primes.push(5); \n    primes.push(7); \n    primes.push(11); \n    while (primes.size() > 0) \n    { \n        cout << primes.front() << \",\"; \n        primes.pop(); \n    } \n    cout << endl; // prints 1,2,3,5,7,11\n```", "```cpp\n    struct task \n    { \n    string name; \n    int priority; \n    task(const string& n, int p) : name(n), priority(p) {} \n    bool operator <(const task& rhs) const { \n        return this->priority < rhs.priority; \n        } \n    };\n```", "```cpp\n    priority_queue<task> to_do; \n    to_do.push(task(\"tidy desk\", 1)); \n    to_do.push(task(\"check in code\", 10)); \n    to_do.push(task(\"write spec\", 8)); \n    to_do.push(task(\"strategy meeting\", 8)); \n\n    while (to_do.size() > 0) \n    { \n        cout << to_do.top().name << \" \" << to_do.top().priority << endl; \n        to_do.pop(); \n    }\n```", "```cpp\n    check in code 10\nwrite spec 8\nstrategy meeting 8\ntidy desk 1\n```", "```cpp\n    vector<int> primes { 1,2,3,5,7,11,13 }; \n    const auto it = primes.begin(); // const has no effect \n    *it = 42; \n    auto cit = primes.cbegin(); \n    *cit = 1;                       // will not compile\n```", "```cpp\n    vector<int> primes { 1,2,3,5,7,11,13 }; \n    auto it = primes.rbegin(); \n    while (it != primes.rend()) \n    { \n        cout << *it++ << \" \"; \n    } \n    cout << endl; // prints 13,11,7,5,4,3,2,1\n```", "```cpp\n    vector<int> primes { 1,2,3,5,7,11,13 }; \n    vector<int>::iterator it = primes.begin();\n```", "```cpp\n    vector<int> data { 1,2,3,4,5 }; \n    vector<int> results; \n    results.resize(data.size()); \n    transform( \n       data.begin(), data.end(),  \n       results.begin(), \n       [](int x){ return x*x; } );\n```", "```cpp\n    vector<int> vec{ 1,2,3,4,5 }; \n    vec.resize(vec.size() * 2); \n    transform(vec.begin(), vec.begin() + 5, \n       vec.begin() + 5, [](int i) { return i*i; });\n```", "```cpp\n    vector<int> data { 1,2,3,4,5 }; \n    vector<int> results; \n    transform( \n       data.begin(), data.end(),  \n       back_inserter(results), \n       [](int x){ return x*x; } ); // 1,4,9,16,25\n```", "```cpp\n    vector<int> data { 1,2,3,4,5 }; \n    vector<int> results; \n    transform( \n data.rbegin(), data.rend(), \n       back_inserter(results), \n       [](int x){ return x*x; } ); // 25,16,9,4,1\n```", "```cpp\n    vector<int> data { 1,2,3,4,5 }; \n    for (int i : data) cout << i << \" \"; \n    cout << endl;\n```", "```cpp\n    vector<int> data { 1,2,3,4,5 }; \n    ostream_iterator<int> my_out(cout, \" \"); \n    copy(data.cbegin(), data.cend(), my_out); \n    cout << endl;\n```", "```cpp\n    vector<int> data; \n    copy( \n       istream_iterator<int>(cin), istream_iterator<int>(), \n       back_inserter(data)); \n\n    ostream_iterator<int> my_out(cout, \" \"); \n    copy(data.cbegin(), data.cend(), my_out); \n    cout << endl;\n```", "```cpp\n    vector<int> data {  \n       istream_iterator<int>(cin), istream_iterator<int>() };\n```", "```cpp\n    string data { \n            istream_iterator<char>(cin), istream_iterator<char>() };\n```", "```cpp\n    string data { \n        istreambuf_iterator<char>(cin), istreambuf_iterator<char>() };\n```", "```cpp\n    list<int> data; \n    // do some calculations and fill the list \n    vector<int> temp(data.begin(), data.end()); \n    size_t size = temp.size(); // can pass size to a C function \n    int *p = &temp[0];         // can pass p to a C function\n```", "```cpp\n    vector<int> vec; \n    vec.resize(5); \n    fill(vec.begin(), vec.end(), 42);\n```", "```cpp\n    vector<int> vec(5); \n    generate(vec.begin(), vec.end(),  \n        []() {static int i; return ++i; });\n```", "```cpp\n    vector<int> vec { 1,4,9,16,25 }; \n    for_each(vec.begin(), vec.end(),  \n         [](int i) { cout << i << \" \"; }); \n    cout << endl;\n```", "```cpp\n    vector<int> vec { 1,2,3,4,5 }; \n    for_each(vec.begin(), vec.end(),  \n         [](int& i) { i *= i; });\n```", "```cpp\n    vector<int> vec { 1,2,3,4,5 }; \n    vector<int> results; \n    for_each(vec.begin(), vec.end(),  \n         [&results](int i) { results.push_back(i*i); });\n```", "```cpp\n    vector<int> vec1 { 1,2,3,4,5 }; \n    vector<int> vec2 { 5,4,3,2,1 }; \n    vector<int> results; \n    transform(vec1.begin(), vec1.end(), vec2.begin(), \n       back_inserter(results), [](int i, int j) { return i*j; });\n```", "```cpp\n    vector<int> planck{ 6,6,2,6,0,7,0,0,4,0 }; \n    auto number = count(planck.begin(), planck.end(), 6);\n```", "```cpp\n    vector<int> v1 { 1,2,3,4 }; \n    vector<int> v2 { 1,2 }; \n    vector<int> v3 { 5,6,7 }; \n    cout << boolalpha; \n    cout << (v1 > v2) << endl; // true \n    cout << (v1 > v3) << endl; // false\n```", "```cpp\n        vector<int> planck{ 6,6,2,6,0,7,0,0,4,0 }; \n        vector<int> result(4);          // we want 4 items \n        auto it1 = planck.begin();      // get the first position \n        it1 += 2;                       // move forward 2 places \n        auto it2 = it1 + 4;             // move 4 items \n        move(it1, it2, result.begin()); // {2,6,0,7}\n```", "```cpp\n        vector<int> planck{ 6,6,2,6,0,7,0,0,4,0 }; \n        vector<int> result; \n        remove_copy(planck.begin(), planck.end(),  \n            back_inserter(result), 6);\n```", "```cpp\n        vector<int> planck { 6,6,2,6,0,7,0,0,4,0 }; \n        auto new_end = remove(planck.begin(), planck.end(), 6); \n                                             // {2,0,7,0,0,4,0,0,4,0} \n        planck.erase(new_end, planck.end()); // {2,0,7,0,0,4,0}\n```", "```cpp\n        vector<int> planck{ 6,6,2,6,0,7,0,0,4,0 }; \n        auto it = planck.begin(); \n        it += 4; \n        rotate(planck.begin(), it, planck.end());\n```", "```cpp\n        vector<int> planck{ 6,6,2,6,0,7,0,0,4,0 }; \n        vector<int> temp; \n        unique_copy(planck.begin(), planck.end(), back_inserter(temp)); \n        planck.assign(temp.begin(), temp.end());\n```", "```cpp\n        vector<int> planck{ 6,6,2,6,0,7,0,0,4,0 }; \n        auto imin = min_element(planck.begin(), planck.end()); \n        auto imax = max_element(planck.begin(), planck.end()); \n        cout << \"values between \" << *imin << \" and \"<< *imax << endl;\n```", "```cpp\n        vector<int> vec{0,1,2,3,4,4,5,6,7,7,7,8,9}; \n        vector<int>::iterator it = vec.begin(); \n\n        do \n        { \n            it = adjacent_find(it, vec.end()); \n            if (it != vec.end()) \n            {  \n                cout << \"duplicate \" << *it << endl; \n                ++it; \n            } \n        } while (it != vec.end());\n```", "```cpp\n    vector<int> vec{45,23,67,6,29,44,90,3,64,18}; \n    auto middle = vec.begin() + 5; \n    partial_sort(vec.begin(), middle, vec.end()); \n    cout << \"smallest items\" << endl; \n    for_each(vec.begin(), middle, [](int i) {cout << i << \" \"; }); \n    cout << endl; // 3 6 18 23 29 \n    cout << \"biggest items\" << endl; \n    for_each(middle, vec.end(), [](int i) {cout << i << \" \"; }); \n    cout << endl; // 67 90 45 64 44\n```", "```cpp\n    vector<int> vec; \n    for (int i = 0; i < 10; ++i) vec.push_back(i); \n    random_device rd; \n    shuffle(vec.begin(), vec.end(), rd);\n```", "```cpp\n    ratio<15, 20> ratio; \n    cout << ratio.num << \"/\" << ratio.den << endl;\n```", "```cpp\n    ratio_add<ratio<27, 11>, ratio<5, 17>> ratio; \n    cout << ratio.num << \"/\" << ratio.den << endl;\n```", "```cpp\n    typedef ratio_add<ratio<27, 11>, ratio<5, 17>> sum; \n    cout << sum::num << \"/\" << sum::den << endl;\n```", "```cpp\n    bool result = ratio_greater<sum, ratio<25, 19> >::value; \n    cout << boolalpha << result << endl;\n```", "```cpp\n    typedef ratio<1, 0> invalid; \n    cout << invalid::num << \"/\" << invalid::den << endl;\n```", "```cpp\n    double radius_nm = 10.0; \n    double volume_nm = pow(radius_nm, 3) * 3.1415 * 4.0 / 3.0; \n    cout << \"for \" << radius_nm << \"nm \" \n        \"the volume is \" << volume_nm << \"nm3\" << endl; \n    double factor = ((double)nano::num / nano::den); \n    double vol_factor = pow(factor, 3); \n    cout << \"for \" << radius_nm * factor << \"m \" \n        \"the volume is \" << volume_nm * vol_factor << \"m3\" << endl;\n```", "```cpp\n    template<typename units> \n    class dist_units \n    { \n        double data; \n        public: \n            dist_units(double d) : data(d) {} \n\n        template <class other> \n        dist_units(const dist_units<other>& len) : data(len.value() *  \n         ratio_divide<units, other>::type::den / \n         ratio_divide<units, other>::type::num) {} \n\n        double value() const { return data; } \n    };\n```", "```cpp\n    dist_units<kilo> earth_diameter_km(12742); \n    cout << earth_diameter_km.value() << \"km\" << endl; \n    dist_units<ratio<1>> in_meters(earth_diameter_km); \n    cout << in_meters.value()<< \"m\" << endl; \n    dist_units<ratio<1609344, 1000>> in_miles(earth_diameter_km); \n    cout << in_miles.value()<< \"miles\" << endl;\n```", "```cpp\n    complex<double> a(1.0, 1.0); \n    complex<double> b(-0.5, 0.5); \n    complex<double> c = a + b; \n    cout << a << \" + \" << b << \" = \" << c << endl; \n    complex<double> d = polar(1.41421, -3.14152 / 4); \n    cout << d << endl;\n```", "```cpp\n    (1,1) + (-0.5,0.5) = (0.5,1.5)\n(1.00002,-0.999979)\n```", "```cpp\n    #include <iostream> \n    #include <fstream> \n\n    using namespace std;\n```", "```cpp\n    void usage() \n    { \n        cout << \"usage: csv_parser file\" << endl; \n        cout << \"where file is the path to a csv file\" << endl; \n    } \n\n    int main(int argc, const char* argv[]) \n    { \n        if (argc <= 1) \n        { \n            usage(); \n            return 1; \n        } \n        return 0; \n    }\n```", "```cpp\n    using namespace std; \n    using vec_str = vector<string>;\n```", "```cpp\n    ifstream stm; \n    stm.open(argv[1], ios_base::in); \n    if (!stm.is_open()) \n    { \n        usage(); \n        cout << \"cannot open \" << argv[1] << endl; \n        return 1; \n    } \n\n    vec_str lines; \n    for (string line; getline(stm, line); ) \n    { \n        if (line.empty()) continue; \n        lines.push_back(move(line)); \n    } \n    stm.close();\n```", "```cpp\n    George Washington,1789,1797 \n    \"John Adams, Federalist\",1797,1801 \n    \"Thomas Jefferson, Democratic Republican\",1801,1809 \n    \"James Madison, Democratic Republican\",1809,1817 \n    \"James Monroe, Democratic Republican\",1817,1825 \n    \"John Quincy Adams, Democratic Republican\",1825,1829 \n    \"Andrew Jackson, Democratic\",1829,1837 \n    \"Martin Van Buren, Democratic\",1837,1841 \n    \"William Henry Harrison, Whig\",1841,1841 \n    \"John Tyler, Whig\",1841,1841 \n    John Tyler,1841,1845\n```", "```cpp\n    using namespace std; \n    using vec_str = vector<string>; \n    using list_str = list<string>;using vec_list = vector<list_str>;\n```", "```cpp\n    vec_list parsed; \n    for (string& line : lines) \n    { \n        parsed.push_back(parse_line(line)); \n    }\n```", "```cpp\n    list_str parse_line(const string& line) \n    { \n        list_str data; \n        string::const_iterator it = line.begin(); \n\n        return data; \n    }\n```", "```cpp\n    list_str data; \n    string::const_iterator it = line.begin(); \n    string item; bool bQuote = false; bool bDQuote = false; do{++it; } while (it != line.end()); data.push_back(move(item)); \n    return data;\n```", "```cpp\n    do \n    { \n        switch (*it) { case ''': break; case '\"': break; case ',': break; default: item.push_back(*it); }; \n        ++it; \n    } while (it != line.end());\n```", "```cpp\n    case ''': \n    if (bDQuote) item.push_back(*it); else { bQuote = !bQuote; if (bQuote) item.clear(); } \n    break;\n```", "```cpp\n    if (bDQuote) item.push_back(*it); \n    else \n    { \n        if ((it + 1) != line.end() && *(it + 1) == ''') { item.push_back(*it); ++it; } else \n        { \n            bQuote = !bQuote; \n            if (bQuote) item.clear(); \n        } \n    }\n```", "```cpp\n    case '\"': \n    if (bQuote) item.push_back(*it); else { if ((it + 1) != line.end() && *(it + 1) == '\"') { item.push_back(*it); ++it; } else { bDQuote = !bDQuote; if (bDQuote) item.clear(); } } \n    break;\n```", "```cpp\n    case ',': \n    if (bQuote || bDQuote)  item.push_back(*it); else                    data.push_back(move(item)); \n    break;\n```", "```cpp\n    int count = 0; \n    for (list_str row : parsed) \n    { \n        cout << ++count << \"> \"; \n        for (string field : row) \n        { \n            cout << field << \" \"; \n        } \n        cout << endl; \n    }\n```"]