- en: Chapter 5. Physics Damping, Friction, and Physics Bodies
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章 物理阻尼、摩擦和物理体
- en: 'In this chapter, we will take a deeper look at **Physics Bodies** in Unreal
    Engine 4 and analyze how the engine uses physics properties, such as **Angular
    Damping** and **Linear Friction** to simulate real-world physics in our game.
    To start with, we will examine what **Physics Bodies** are. We will also look
    at some of the detailed properties available to these assets. In addition, we
    will discuss the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将更深入地探讨Unreal Engine 4中的**物理体**，并分析引擎如何使用物理属性，如**角阻尼**和**线性摩擦**来模拟游戏中的真实世界物理。首先，我们将检查**物理体**是什么。我们还将查看这些资产可用的某些详细属性。此外，我们将讨论以下主题：
- en: Angular and linear friction
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 角向和线性摩擦
- en: Physical materials – an overview
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 物理材料 - 概述
- en: Physics damping
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 物理阻尼
- en: For the purposes of this chapter, we will continue to work with Unreal Engine
    4 and the **Unreal_PhyProject** that we created in [Chapter 1](part0014.xhtml#aid-DB7S1
    "Chapter 1. Math and Physics Primer"), *Math and Physics Primer* in Unreal Engine.
    Let's begin by discussing **Physics Bodies** in Unreal Engine 4.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 为了本章的目的，我们将继续使用Unreal Engine 4和我们在[第1章](part0014.xhtml#aid-DB7S1 "第1章 数学与物理基础")中创建的**Unreal_PhyProject**，即Unreal
    Engine中的*数学与物理基础*。让我们首先讨论Unreal Engine 4中的**物理体**。
- en: Physics Bodies – an overview
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 物理体 - 概述
- en: 'When it comes to creating **Physics Bodies**, there are multiple ways to go
    about it (most of which we have covered up to this point), so we will not go into
    much detail about the creation of **Physics Bodies**. We can have **Static Meshes**
    react as **Physics Bodies** by checking the **Simulate Physics** property of the
    asset when it is placed in our level:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建**物理体**时，有多种方法可以采取（其中大部分我们在此之前的点已经介绍过），因此我们不会深入讨论**物理体**的创建。我们可以通过在放置到我们的级别时检查资产的**模拟物理**属性，使**静态网格**作为**物理体**反应：
- en: '![Physics Bodies – an overview](img/image00294.jpeg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![物理体 - 概览](img/image00294.jpeg)'
- en: We can also create **Physics Bodies** by creating **Physics Assets** and **Skeletal
    Meshes**, which automatically have the properties of physics by default. Lastly,
    **Shape Components** in blueprints, such as spheres, boxes, and capsules will
    automatically gain the properties of a Physics Body if they are set for any sort
    of collision, overlap, or other physics simulation events. As always, remember
    to ensure that our asset has a collision applied to it before attempting to simulate
    physics or establish **Physics Bodies**, otherwise the simulation will not work.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以通过创建**物理资产**和**骨骼网格**来创建**物理体**，它们默认具有物理属性。最后，在蓝图中的**形状组件**，如球体、盒子和胶囊，如果设置了任何类型的碰撞、重叠或其他物理模拟事件，将自动获得物理体的属性。一如既往，记得在尝试模拟物理或建立**物理体**之前，确保我们的资产已经应用了碰撞，否则模拟将无法工作。
- en: When you work with the properties of **Physics** on **Static Meshes** or any
    other assets that we will attempt to simulate physics with, we will see a handful
    of different parameters that we can change in order to produce the desired effect
    under the **Details** panel.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当你与**静态网格**或任何其他我们将尝试模拟物理的资产的物理属性工作时，我们将在**详细信息**面板中看到一些不同的参数，我们可以更改这些参数以产生所需的效果。
- en: '![Physics Bodies – an overview](img/image00295.jpeg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![物理体 - 概览](img/image00295.jpeg)'
- en: 'Let''s break down these properties:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解这些属性：
- en: '**Simulate Physics**: This parameter allows you to enable or simulate physics
    with the asset you have selected. When this option is unchecked, the asset will
    remain static, and once enabled, we can edit the **Physics Body** properties for
    additional customization.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模拟物理**：此参数允许你启用或模拟所选资产的物理。当此选项未选中时，资产将保持静止，一旦启用，我们可以编辑**物理体**属性以进行额外定制。'
- en: '**Auto Weld**: When this property is set to `True`, and when the asset is attached
    to a parent object, such as in a blueprint, the two bodies are merged into a single
    rigid body. **Physics** settings, such as collision profiles and body settings,
    are determined by **Root Component**.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动焊接**：当此属性设置为`True`，并且资产附加到父对象（如蓝图）时，两个体将合并为一个单一刚体。**物理**设置，如碰撞配置文件和体设置，由**根组件**确定。'
- en: '**Start Awake**: This parameter determines whether the selected asset will
    **Simulate Physics** at the start once it is spawned or whether it will **Simulate
    Physics** at a later time. We can change this parameter with the level and actor
    blueprints.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开始清醒**：此参数确定所选资产在生成后是否立即**模拟物理**，或者它将在稍后时间**模拟物理**。我们可以通过级别和演员蓝图更改此参数。'
- en: '**Override Mass**: When this property is checked and set to `True`, we can
    then freely change the **Mass** of our asset using **kilograms** (**kg**). Otherwise,
    the **Mass in Kg** parameter will be set to a default value that is based on a
    computation between the physical material applied and the mass scale value.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**覆盖质量**：当此属性被勾选并设置为`True`时，我们可以使用**千克**（**kg**）自由更改我们的资产的质量。否则，**千克质量**参数将设置为默认值，该值基于应用于物理材料的计算和质量缩放值。'
- en: '**Mass in Kg**: This parameter determines the **Mass** of the selected asset
    using kilograms. This is important when you work with different sized physics
    objects and want them to react to forces appropriately.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**千克质量**：此参数确定所选资产的质量，使用千克为单位。当您处理不同尺寸的物理对象并希望它们适当地对力做出反应时，这一点很重要。'
- en: '**Locked Axis**: This parameter allows you to lock the physical movement of
    our object along a specified axis. We have the choice to lock the default axes
    as specified in **Project Settings**. We also have the choice to lock physical
    movement along the individual *X*, *Y*, and *Z* axes. We can have none of the
    axes either locked in translation or rotation, or we can customize each axis individually
    with the **Custom** option.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**锁定轴**：此参数允许您锁定对象沿指定轴的物理移动。我们可以选择锁定在**项目设置**中指定的默认轴。我们还可以选择锁定沿单独的*X*、*Y*和*Z*轴的物理移动。我们也可以选择不锁定任何轴的平移或旋转，或者使用**自定义**选项分别定制每个轴。'
- en: '**Enable Gravity**: This parameter determines whether the object should have
    the force of gravity applied to it. The force of gravity can be altered in the
    **World Settings** properties of the level or in the **Physics** section of the
    **Engine** properties in **Project Settings**.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启用重力**：此参数确定对象是否应该受到重力作用。重力可以在级别的**世界设置**属性中或**项目设置**中**引擎**属性的**物理**部分中更改。'
- en: '**Use Async Scene**: This property allows you to enable the use of **Asynchronous
    Physics** for the specified object. By default, we cannot edit this property.
    In order to do so, we must navigate to **Project Settings** and then to the **Physics**
    section. Under the advanced **Simulation** tab, we will find the **Enable Async
    Scene** parameter. In an asynchronous scene, objects (such as **Destructible**
    actors) are simulated, and a **Synchronous** scene is where classic physics tasks,
    such as a falling crate, take place.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用异步场景**：此属性允许您为指定的对象启用**异步物理**。默认情况下，我们无法编辑此属性。为了做到这一点，我们必须导航到**项目设置**，然后进入**物理**部分。在高级**模拟**选项卡下，我们将找到**启用异步场景**参数。在异步场景中，对象（如**可破坏**演员）被模拟，而**同步**场景是经典物理任务（如掉落的箱子）发生的地方。'
- en: '**Override Walkable Slope on Instance**: This parameter determines whether
    or not we can customize an object''s walkable slope. In general, we would use
    this parameter for our player character, but this property enables the customization
    of how steep a slope is that an object can walk on. This can be controlled specifically
    by the **Walkable Slope Angle** parameter and the **Walkable Slope Behavior**
    parameter.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**覆盖实例上的可通行斜坡**：此参数确定我们是否可以自定义对象的可通行斜坡。通常，我们会使用此参数为我们的玩家角色，但此属性允许我们定制对象可以行走的斜坡的陡峭程度。这可以通过**可通行斜坡角度**参数和**可通行斜坡行为**参数进行具体控制。'
- en: '**Override Max Depenetration Velocity**: This parameter allows you to customize
    **Max Depenetration Velocity** of the selected physics body.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**覆盖最大穿透速度**：此参数允许您自定义所选物理体的**最大穿透速度**。'
- en: '**Center of Mass Offset**: This property allows you to specify a specific vector
    offset for the selected objects'' center of mass from the calculated location.
    Being able to know and even modify the center of the mass for our objects can
    be very useful when you work with sensitive physics simulations (such as flight).'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**质心偏移**：此属性允许您指定所选对象质心相对于计算位置的特定矢量偏移。在处理敏感的物理模拟（如飞行）时，能够知道甚至修改对象的质心位置可能非常有用。'
- en: '**Sleep Family**: This parameter allows you to control the set of functions
    that the physics object uses when in a sleep mode or when the object is moving
    and slowly coming to a stop. The **SF Sensitive** option contains values with
    a lower sleep threshold. This is best used for objects that can move very slowly
    or for improved physics simulations (such as billiards). The **SF Normal** option
    contains values with a higher sleep threshold, and objects will come to a stop
    in a more abrupt manner once in motion as compared to the **SF Sensitive** option.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**睡眠家族**: 此参数允许您控制物理对象在睡眠模式或物体移动并缓慢停止时使用的函数集。**SF敏感**选项包含具有较低睡眠阈值的值。这最适合用于可以非常缓慢移动的物体或改进的物理模拟（如台球）。**SF正常**选项包含具有较高睡眠阈值的值，与**SF敏感**选项相比，一旦运动，物体将以更突然的方式停止。'
- en: '**Mass Scale**: This parameter allows you to scale the mass of our object by
    multiplying a scalar value. The lower the number, the lower the mass of the object
    will become, whereas the larger the number, the larger the mass of the object
    will become. This property can be used in conjunction with the **Mass in Kg**
    parameter to add more customization to the mass of the object.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**质量比例**: 此参数允许您通过乘以一个标量值来缩放我们的物体质量。数字越低，物体的质量就越低，而数字越高，物体的质量就越高。此属性可以与**质量（千克）**参数结合使用，以增加对物体质量的更多定制。'
- en: '**Angular Damping**: This property is a modifier of the drag force that is
    applied to the object in order to reduce angular movement, which means to reduce
    the rotation of the object. We will go into more detail regarding **Angular Damping**
    later in this chapter.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**角阻尼**: 此属性是应用于物体的阻力修改器，以减少角运动，即减少物体的旋转。我们将在本章后面更详细地介绍**角阻尼**。'
- en: '**Linear Damping**: This property is used to simulate the different types of
    friction that can assist in the game world. This modifier adds a drag force to
    reduce linear movement, reducing the translation of the object. We will go into
    more detail regarding **Linear Damping** later in this chapter.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**线性阻尼**: 此属性用于模拟游戏世界中可能帮助的多种摩擦类型。此修改器添加一个阻力，以减少线性运动，减少物体的平移。我们将在本章后面更详细地介绍**线性阻尼**。'
- en: '**Max Angular Velocity**: This parameter limits **Max Angular Velocity** of
    the selected object in order to prevent the object from rotating at high rates.
    By increasing this value, the object will spin at very high speeds once it is
    impacted by an outside force that is strong enough to reach the **Max Angular
    Velocity** value. By decreasing this value, the object will not rotate as fast,
    and it will come to a halt much faster depending on the angular damping applied.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最大角速度**: 此参数限制所选对象的最大角速度，以防止物体以高速度旋转。通过增加此值，一旦物体受到足够强大的外力影响，使其达到**最大角速度**值，物体将高速旋转。通过减少此值，物体的旋转速度将减慢，并且根据所应用的角阻尼，物体将更快地停止。'
- en: '**Position Solver Iteration Count**: This parameter reflects the physics body''s
    solver iteration count for its position; the solver iteration count is responsible
    for periodically checking the physics body''s position. Increasing this value
    will be more CPU intensive, but better stabilized.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**位置求解器迭代次数**: 此参数反映了物理体的位置求解器迭代次数；求解器迭代次数负责定期检查物理体的位置。增加此值将更加占用CPU资源，但稳定性更好。'
- en: '**Velocity Solver Iteration Count**: This parameter reflects the physics body''s
    solver iteration count for its velocity; the solver iteration count is responsible
    for periodically checking the physics body''s velocity. Increasing this value
    will be more CPU intensive, but better stabilized.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**速度求解器迭代次数**: 此参数反映了物理体的速度求解器迭代次数；求解器迭代次数负责定期检查物理体的速度。增加此值将更加占用CPU资源，但稳定性更好。'
- en: Now that we have discussed all the different parameters available to **Physics
    Bodies** in Unreal Engine 4, feel free to play around with these values in order
    to obtain a stronger grasp of what each property controls and how it affects the
    physical properties of the object. As there are a handful of properties, we will
    not go into detailed examples of each, but the best way to learn more is to experiment
    with these values. However, we will work with how to create various examples of
    physics bodies in order to explore **Physics Damping** and **Friction** later
    in this chapter.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经讨论了虚幻引擎4中**物理体**可用的所有不同参数，你可以自由地调整这些值，以便更好地理解每个属性控制的内容及其如何影响对象的物理特性。由于属性众多，我们不会详细讲解每个属性的示例，但学习更多最佳方式是通过实验这些值。然而，我们将探讨如何创建各种物理体示例，以便在本章后面探索**阻尼**和**摩擦**。
- en: Physics Bodies – a section review
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 物理体 – 章节回顾
- en: In this section, we discussed what **Physics Bodies** are and how to create
    them by using static meshes, skeletal meshes, shape components in blueprints,
    and physics assets. Additionally, you learned about all the different parameters
    that exist for **Physics Bodies** in Unreal Engine 4\. We also looked at each
    property and how it affects the physics on the specified object. Now that we have
    a stronger grasp of what **Physics Bodies** are, let's move on and discuss **Angular**
    and **Linear Damping**.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了什么是**物理体**以及如何通过使用静态网格、骨骼网格、蓝图中的形状组件和物理资产来创建它们。此外，你还了解了在虚幻引擎4中**物理体**所存在的所有不同参数。我们还查看每个属性及其如何影响指定对象的物理特性。现在，我们已经对**物理体**有了更深入的了解，让我们继续讨论**角阻尼**和**线性阻尼**。
- en: Angular and Linear Damping
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 角阻尼和线性阻尼
- en: In this section, we will discuss **Angular** and **Linear Damping** in more
    detail, focusing on the friction properties of physics bodies. Further more, we
    will discuss physics damping and how this can be used when setting up the constraints
    for our blueprints. Let's begin by briefly discussing **Angular Damping** and
    **Angular Velocity/Momentum**.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将更详细地讨论**角阻尼**和**线性阻尼**，重点关注物理体的摩擦特性。此外，我们将讨论物理阻尼及其在设置蓝图约束时的应用。让我们先简要讨论**角阻尼**和**角速度/动量**。
- en: In the realm of physics, **Angular Velocity** is defined as the rate of change
    of angular displacement, also known as a vector quantity, which specifies the
    angular speed or the rotational speed of an object and the axis in which the object
    is rotating.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在物理学领域，**角速度**被定义为角位移的变化率，也称为矢量量，它指定了物体的角速度或旋转速度以及物体旋转的轴。
- en: '![Angular and Linear Damping](img/image00296.jpeg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![角阻尼和线性阻尼](img/image00296.jpeg)'
- en: In the preceding diagram, we can see that **w,** or the angular speed, is equal
    to the velocity divided by the radius of the object that is rotating.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图中，我们可以看到**w**，即角速度，等于旋转物体的速度除以半径。
- en: '**Linear Angular Momentum** is proportional to **Moment of Inertia** (*I*)
    and **Angular Speed** (*w*), so the basic formula is *L = Iw*. We now know that
    *w* is equal to the velocity and radius of the object, so we can now write the
    expression as *L = I (v/r)*. Lastly, **Moment of Inertia** is equal to the radius
    of the object squared, multiplied by the object''s mass, or *I = r^2 * (m)*. With
    this in mind, we can now rewrite the **Linear Angular Momentum** expression as
    *L = (r^2 * m) * (v/r)*, or more simply, we can write the expression as *L = rmv*,
    so the **Linear Angular Momentum** of an object is equal to the radius of the
    object multiplied by its mass and the velocity that is applied to it.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**线性角动量**与**转动惯量**（*I*）和**角速度**（*w*）成正比，所以基本公式是*L = Iw*。我们现在知道*w*等于物体的速度和半径，因此我们可以将表达式写为*L
    = I (v/r)*。最后，**转动惯量**等于物体的半径平方乘以物体的质量，即*I = r^2 * (m)*。考虑到这一点，我们现在可以重新写出**线性角动量**的表达式为*L
    = (r^2 * m) * (v/r)*，或者更简单地，我们可以将表达式写为*L = rmv*，因此物体的**线性角动量**等于物体的半径乘以其质量以及施加给它的速度。'
- en: Now that we have a stronger understanding of **Angular Velocity** and **Angular
    Momentum**, let's apply this knowledge to the physics body with the **Unreal_PhyProject**
    game project that we created in the first chapter. By default, there are a bunch
    of physics body cubes placed throughout the **FirstPersonExampleMap** level that
    we can alter properties to in order to explore **Angular Damping** and **Angular
    Velocity**.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对**角速度**和**角动量**有了更深入的了解，让我们将这一知识应用到我们在第一章中创建的**Unreal_PhyProject**游戏项目中。默认情况下，在**FirstPersonExampleMap**级别中放置了许多物理体立方体，我们可以更改它们的属性来探索**角阻尼**和**角速度**。
- en: Let's start by selecting a random cube from **FirstPersonExampleMap** and viewing
    its **Physics** properties in **Details** panel, on the left-hand side. For the
    sake of an example, let's left-click on the down directional arrow in the **Physics**
    section to expand the advanced properties. The first property we will see is **Enable
    Gravity**, and by default, it is set to `True`; let's set this property to `False`
    so that the selected physics body doesn't have the force of gravity applied to
    it. With this change in place, we can now move the physics body upwards in the
    *Z* direction so that it floats in the level in mid-air. Now, if we play the game,
    the physics body will not move unless it is shot at by the player with the **FirstPersonProjectile**
    blueprint. Once shot, the physics body will start spinning and moving in the appropriate
    direction based on where it's shot and the impulse that is applied to it by the
    projectile blueprint.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从选择**FirstPersonExampleMap**中的一个随机立方体开始，在左侧的**详细信息**面板中查看其**物理**属性。为了举例，让我们在**物理**部分向下方向箭头处左键单击以展开高级属性。我们将看到的第一个属性是**启用重力**，默认设置为`True`；让我们将此属性设置为`False`，这样选定的物理体就不会受到重力作用。有了这个变化，我们现在可以将物理体向上移动到*Z*方向，使其在空中漂浮。现在，如果我们玩游戏，物理体除非被玩家用**第一人称投射物**蓝图射击，否则不会移动。一旦被射击，物理体将开始旋转并沿适当的方向移动，这取决于它被射击的位置以及投射物蓝图施加的冲量。
- en: Back in the **Details** panel of **Physics Body**, we can now explore the **Angular
    Damping** property, which is set to `0` by default, meaning that the object has
    no additional drag force applied to it to reduce angular velocity. By increasing
    this value, we can see that when we shoot the object in the game, the angular
    velocity slows down in a stronger exponential value compared to how it behaved
    when the **Angular Damping** value was set to `0`. We can also set the limit on
    how fast the physics object can rotate when a force is applied to it by altering
    the value of the **Max Angular Velocity** parameter; the higher the value, the
    faster the object is able to rotate if enough force is applied to it.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到**物理体**的**详细信息**面板，我们现在可以探索**角阻尼**属性，它默认设置为`0`，这意味着对象没有额外的阻力作用在其上以减少角速度。通过增加这个值，我们可以看到，当我们向游戏中的对象射击时，角速度以更强的指数值减慢，与**角阻尼**值设置为`0`时的行为相比。我们还可以通过改变**最大角速度**参数的值来设置物理对象在受到力作用时可以旋转的速度限制；值越高，如果施加足够的力，对象旋转的速度就越快。
- en: 'For this example, let''s set the **Angular Damping** value to `.01` and, the
    **Max Angular Velocity** parameter to `800`. We will override the **Mass in Kg**
    parameter and set a custom mass of `10.0`. We should now have the following properties
    in place for our physics body object:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个例子，让我们将**角阻尼**的值设置为`.01`，并将**最大角速度**参数设置为`800`。我们将覆盖**千克质量**参数，并设置一个自定义质量为`10.0`。现在，我们应该为我们的物理体对象设置以下属性：
- en: '![Angular and Linear Damping](img/image00297.jpeg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![角和线性阻尼](img/image00297.jpeg)'
- en: Now, if we play the game and shoot at our **Physics Body** object, we will see
    that the object can rotate at a very quick rate when shot at by the player. To
    find out what else can affect the **Angular Velocity** and **Angular Damping**
    of an object, we can increase or decrease the values for the **Mass in Kg**, **Angular
    Damping**, and **Max Angular Velocity** parameters. With the knowledge of **Angular
    Damping** and **Angular Physics** under our belt, let's now discuss **Linear Damping**
    and **Linear Physics** in Unreal Engine 4.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们玩游戏并射击我们的**物理体**对象，我们会看到当被玩家射击时，对象可以以非常快的速度旋转。为了找出什么还能影响对象的**角速度**和**角阻尼**，我们可以增加或减少**千克质量**、**角阻尼**和**最大角速度**参数的值。在掌握了**角阻尼**和**角物理**的知识后，我们现在来讨论Unreal
    Engine 4中的**线性阻尼**和**线性物理**。
- en: In physics, **Linear Velocity** is defined as the rate of the change of linear
    displacement of time, also known as a vector quantity, which specifies the linear
    speed of an object and the direction in which the object is moving in.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在物理学中，**线性速度**被定义为线性位移随时间的变化率，也称为矢量量，它指定了物体的线性速度和物体移动的方向。
- en: '![Angular and Linear Damping](img/image00298.jpeg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![角度和线性阻尼](img/image00298.jpeg)'
- en: The formula for basic **Linear Velocity** is *V = S/t*, or velocity equals the
    change in displacement of the object divided by the time the object takes to move
    this change in displacement. The concept of **Linear Damping** is the reduction
    of movement over time in order to have an object come to a complete stop once
    a force is applied to it that would cause displacement, also known as **Friction**.
    When it comes to **Linear Momentum**, the formula is *p = mv*, where *p* is the
    value of **Momentum**, *m* is the value of the object's mass, and *v* is the velocity
    of the object.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 基本**线性速度**的公式是 *V = S/t*，或者说速度等于物体的位移变化除以物体移动这个位移变化所需的时间。**线性阻尼**的概念是随着时间的推移减少运动，以便在施加一个会导致位移的力后，使物体完全停止，这也被称为**摩擦**。当涉及到**线性动量**时，公式是
    *p = mv*，其中 *p* 是**动量**的值，*m* 是物体的质量值，*v* 是物体的速度。
- en: 'In Unreal Engine 4, we can damper the linear velocity of our physics body in
    two ways: by creating a **Physical Material** to apply to our physics body or
    by changing the **Linear Damping** property in the **Physics** section of the
    **Details** panel of our physics body. For the purposes of this section, we will
    only discuss how to change the **Linear Damping** property and we will go into
    more detail on how to create **Physical Material** later in this chapter. Working
    with **FirstPersonExampleMap** in **Unreal_PhyProject**, let''s go ahead and create
    a working example of how to properly utilize the **Linear Damping** property for
    our physics bodies in order to recreate **Friction**. For this example, we can
    use the same physics body that we used to demonstrate angular velocity and angular
    damping, but we do want to make sure that we check the **Enable Gravity** parameter
    and set the rest of the parameters to their default values so that we can start
    this example from scratch.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在虚幻引擎4中，我们可以通过两种方式来阻尼物理体的线性速度：通过创建一个应用于物理体的**物理材质**，或者通过更改物理体**详情**面板中的**物理**部分的**线性阻尼**属性。为了本节的目的，我们只将讨论如何更改**线性阻尼**属性，我们将在本章的后面更详细地介绍如何创建**物理材质**。在**Unreal_PhyProject**中的**FirstPersonExampleMap**工作，让我们继续创建一个如何正确利用**线性阻尼**属性为我们的物理体重现**摩擦**的工作示例。对于这个例子，我们可以使用我们用来演示角速度和角阻尼相同的物理体，但我们确实想确保我们检查了**启用重力**参数，并将其余参数设置为默认值，这样我们就可以从这个示例从头开始。
- en: By increasing the value of the **Linear Damping** property to a value such as
    `100` and playing the game, we will see that when we shoot the physics body, it
    does not translate as much as it would if the **Linear Damping** property was
    set to its default value of `.01`. With the value of `100`, the **Linear Damping**
    property causes the physics body to almost stay where it is, but the rotation
    of the object changes as normal because we did not change the properties involving
    angular damping. The use of **Linear Damping** is very straightforward, and there
    is not much customization passed (as discussed in the context of physics bodies
    in their **Physics** properties), but we can add additional properties using **Physics
    Materials**.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将**线性阻尼**属性的值增加到例如`100`并玩游戏，我们会发现当我们射击物理体时，它不会像将**线性阻尼**属性设置为默认值`.01`时那样移动得那么多。当值为`100`时，**线性阻尼**属性使得物理体几乎保持在原地，但物体的旋转仍然按正常方式改变，因为我们没有改变涉及角阻尼的属性。**线性阻尼**的使用非常直接，并且没有太多的定制（如物理体在其**物理**属性中的上下文中讨论的那样），但我们可以使用**物理材质**添加额外的属性。
- en: Angular and Linear Damping – a section review
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 角度和线性阻尼 - 章节回顾
- en: In this section, we discussed the concepts of **Angular** and **Linear Damping**
    and **Angular** and **Linear Velocities** in the context of real-world physics
    in detail. Once we were able to grasp these concepts, we then applied what you
    learned about using physics bodies in Unreal Engine 4 and the **Physics** properties
    of these objects in order to explore how they affect the physics bodies in the
    game. Now that we have examined angular and linear damping, we can move on to
    briefly discuss what **Physics Materials** are and how to apply them to our physics
    bodies.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们详细讨论了在现实物理背景下**角阻尼**和**线性阻尼**以及**角速度**和**线性速度**的概念。一旦我们掌握了这些概念，我们就将你在使用虚幻引擎4中的物理体以及这些对象的**物理属性**方面所学到的知识应用到实践中，以探索它们如何影响游戏中的物理体。现在我们已经检查了角阻尼和线性阻尼，我们可以继续简要讨论**物理材料**是什么以及如何将它们应用到我们的物理体上。
- en: Physical Materials – an overview
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 物理材料 - 概述
- en: '**Physical** **Materials** are assets that are used to define the response
    of a physics body when you dynamically interact with the game world. When you
    first create **Physical Material**, you are presented with a set of default values
    that are identical to the default **Physical Material** that is applied to all
    physics objects.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**物理材料**是用于定义物理体在动态与游戏世界交互时响应的资产。当你第一次创建**物理材料**时，你会看到一个默认值集，这些值与应用于所有物理对象的默认**物理材料**相同。'
- en: To create **Physical Material**, let's navigate to **Content Browser** and select
    the **Content** folder so that it is highlighted. From here, we can right-click
    on the **Content** folder and select the **New Folder** option to create a new
    folder for our **Physical Material**; name this new folder `PhysicalMaterials`.
    Now, in the `PhysicalMaterials` folder, right-click on the empty area of **Content
    Browser** and navigate to the **Physics** section and select **Physical Material**.
    Make sure to name this new asset `PM_Test`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建**物理材料**，让我们导航到**内容浏览器**并选择**内容**文件夹，使其高亮显示。从这里，我们可以右键单击**内容**文件夹并选择**新建文件夹**选项来为我们的**物理材料**创建一个新文件夹；将这个新文件夹命名为`PhysicalMaterials`。现在，在`PhysicalMaterials`文件夹中，右键单击**内容浏览器**的空白区域并导航到**物理**部分，选择**物理材料**。确保将这个新资产命名为`PM_Test`。
- en: '![Physical Materials – an overview](img/image00299.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![物理材料 - 概述](img/image00299.jpeg)'
- en: 'Double-click on the new **Physical Material** asset to open **Generic Asset
    Editor** and we should see the following values that we can edit in order to make
    our physics objects behave in certain ways:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 双击新的**物理材料**资产以打开**通用资产编辑器**，我们应该看到以下可以编辑的值，以便使我们的物理对象以特定方式行为：
- en: '![Physical Materials – an overview](img/image00300.jpeg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![物理材料 - 概述](img/image00300.jpeg)'
- en: 'Let''s take a few minutes to break down each of these properties:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们花几分钟时间逐一分析这些属性：
- en: '**Friction**: This parameter controls how easily objects can slide on this
    surface. The lower the friction value, the more slippery the surface. The higher
    the friction value, the less slippery the surface. For example, ice would have
    a **Friction** surface value of `.05`, whereas a **Friction** surface value of
    `1` would cause the object not to slip as much once moved.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**摩擦**：此参数控制物体在这个表面上滑动的容易程度。摩擦值越低，表面越滑。摩擦值越高，表面越不滑。例如，冰的**摩擦**表面值会是`.05`，而**摩擦**表面值为`1`会导致物体移动后不太容易滑动。'
- en: '**Friction Combine Mode**: This parameter controls how friction is computed
    for multiple materials. This property is important when it comes to interactions
    between multiple physical materials and how we want these calculations to be made.
    Our choices are **Average**, **Minimum**, **Maximum**, and **Multiply**.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**摩擦组合模式**：此参数控制多个材料计算摩擦的方式。当涉及到多个物理材料之间的交互以及我们希望如何进行这些计算时，此属性非常重要。我们的选择是**平均**、**最小**、**最大**和**乘法**。'
- en: '**Override Friction Combine Mode**: This parameter allows you to set the **Friction**
    **Combine Mode** parameter instead of using **Friction Combine Mode**, found in
    the **Project Settings** | **Engine** | **Physics** section.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**覆盖摩擦组合模式**：此参数允许您设置**摩擦****组合模式**参数，而不是使用在**项目设置** | **引擎** | **物理**部分找到的**摩擦组合模式**。'
- en: '**Restitution**: This parameter controls how bouncy the surface is. The higher
    the value, the more bouncy the surface will become.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**恢复系数**：此参数控制表面有多弹。值越高，表面越弹。'
- en: '**Density**: This parameter is used in conjunction with the shape of the object
    to calculate its mass properties. The higher the number, the heavier the object
    becomes (in grams per cubic centimeter).'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**密度**：此参数与物体的形状结合使用，以计算其质量属性。数值越高，物体越重（以每立方厘米克计）。'
- en: '**Raise Mass to Power**: This parameter is used to adjust the way in which
    the mass increases as the object gets larger. This is applied to the mass that
    is calculated based on a solid object. In actuality, larger objects do not tend
    to be solid and become more like shells (such as a vehicle). The values are clamped
    to `1` or less.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提升质量到幂**：此参数用于调整随着物体变大质量增加的方式。这应用于基于固体物体计算的质量。实际上，较大的物体往往不是实心的，而更像壳体（如车辆）。这些值被限制在`1`或以下。'
- en: '**Destructible Damage Threshold Scale**: This parameter is used to scale the
    damage threshold for the destructible objects that this physical material is applied
    to.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可破坏损坏阈值缩放比例**：此参数用于缩放应用到此物理材质的可破坏对象的损坏阈值。'
- en: '**Surface Type**: This parameter is used to describe what type of real-world
    surface we are trying to imitate for our project. We can edit these values by
    navigating to the **Project Settings** | **Physics** | **Physical Surface** section.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**表面类型**：此参数用于描述我们试图在我们的项目中模仿的哪种真实世界表面。我们可以通过导航到**项目设置** | **物理** | **物理表面**部分来编辑这些值。'
- en: '**Tire Friction Scale**: This parameter is used as the overall tire friction
    scalar for every type of tire and is multiplied by the parent values of the tire.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**轮胎摩擦缩放比例**：此参数用作每种类型轮胎的整体轮胎摩擦标量，并乘以轮胎的父值。'
- en: '**Tire Friction Scales**: This parameter is almost identical to the **Tire
    Friction Scale** parameter, but it looks for a **Tire Type** data asset to associate
    it to. **Tire Types** can be created through the use of **Data Assets** by right-clicking
    on the **Content Browser** | **Miscellaneous** | **Data Asset** | **Tire Type**
    section.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**轮胎摩擦缩放比例**：此参数几乎与**轮胎摩擦缩放比例**参数相同，但它寻找一个**轮胎类型**数据资产来关联它。**轮胎类型**可以通过在**内容浏览器**
    | **杂项** | **数据资产** | **轮胎类型**部分右键单击来创建。'
- en: Now that we have briefly discussed how to create **Physical Materials** and
    what their properties are, let's take a look at how to apply **Physical Materials**
    to our physics bodies. In **FirstPersonExampleMap**, we can select any of the
    physics body cubes throughout the level and in the **Details** panel under **Collision**,
    we will find the **Phys Material Override** parameter. It is here that we can
    apply our **Physical Material** to the cube and view how it reacts to our game
    world.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经简要讨论了如何创建**物理材质**以及它们的属性，接下来让我们看看如何将**物理材质**应用到我们的物理体上。在**FirstPersonExampleMap**中，我们可以选择整个关卡中的任何物理体立方体，并在**碰撞**下的**详细信息**面板中，我们会找到**物理材质覆盖**参数。正是在这里，我们可以将我们的**物理材质**应用到立方体上，并查看它如何对我们的游戏世界做出反应。
- en: For the sake of an example, let's return to the **Physical Material**, `PM_Test`,
    that we created earlier, change the **Friction** property from `0.7` to `0.2`,
    and save it. With this change in place, let's select a physics body cube in **FirstPersonExampleMap**
    and apply the **Physical Material**, `PM_Test`, to the **Phys Material Override**
    parameter of the object. Now, if we play the game, we will see that the cube we
    applied the **Physical Material**, `PM_Test`, to will start to slide more once
    shot by the player than it did when it had a **Friction** value of `0.7`. We can
    also apply this **Physical Material** to the floor mesh in **FirstPersonExampleMap**
    to see how it affects the other physics bodies in our game world. From here, feel
    free to play around with the **Physical Material** parameters to see how we can
    affect the physics bodies in our game world.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为了举例说明，让我们回到我们之前创建的**物理材质**，`PM_Test`，将**摩擦**属性从`0.7`更改为`0.2`，并保存。在这个更改到位后，让我们在**FirstPersonExampleMap**中选择一个物理体立方体，并将**物理材质**，`PM_Test`，应用到对象的**物理材质覆盖**参数中。现在，如果我们玩游戏，我们会看到我们应用了**物理材质**，`PM_Test`的立方体在被玩家射击后会开始滑动，比它有**摩擦**值`0.7`时更频繁。我们还可以将此**物理材质**应用到**FirstPersonExampleMap**中的地板网格上，以查看它如何影响我们游戏世界中的其他物理体。从这里开始，您可以随意调整**物理材质**参数，看看我们如何影响我们游戏世界中的物理体。
- en: Lastly, let's briefly discuss how to apply **Physical Materials** to normal
    **Materials**, **Material Instances**, and **Skeletal Meshes**.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们简要讨论如何将**物理材质**应用到常规**材质**、**材质实例**和**骨骼网格**上。
- en: 'To apply **Physical Material** to a normal material, we first need to either
    create or open an already created material in **Content Browser**. To create a
    material, just right-click on an empty area of **Content** **Browser** and select
    **Material** from the drop-down menu.Double-click on **Material** to open **Material
    Editor**, and we will see the parameter for **Phys Material** under the **Physical
    Material** section of **Details** panel in the bottom-left of **Material Editor**:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要将**物理材质**应用到普通材质，我们首先需要在**内容浏览器**中创建或打开一个已经创建的材质。要创建材质，只需在**内容浏览器**的空白区域右键单击并从下拉菜单中选择**材质**。双击**材质**以打开**材质编辑器**，我们将在**材质编辑器**底部左角的**详细信息**面板的**物理材质**部分看到**Phys
    Material**参数：
- en: '![Physical Materials – an overview](img/image00301.jpeg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![物理材质 – 概览](img/image00301.jpeg)'
- en: 'To apply **Physical Material** to **Material Instance**, we first need to create
    **Material Instance** by navigating to **Content Browser** and right-clicking
    on an empty area to bring up the context drop-down menu. Under the **Materials
    & Textures** section, we will find an option for **Material Instance**. Double-click
    on this option to open **Material Instance Editor**. Under the **Details** panel
    in the top-left corner of this editor, we will find an option to apply **Phys
    Material** under the **General** section:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要将**物理材质**应用到**材质实例**，我们首先需要通过导航到**内容浏览器**并在空白区域右键单击来创建**材质实例**。在**材质与纹理**部分，我们将找到一个**材质实例**的选项。双击此选项以打开**材质实例编辑器**。在此编辑器顶部左角的**详细信息**面板中，我们将找到在**常规**部分下应用**Phys
    Material**的选项：
- en: '![Physical Materials – an overview](img/image00302.jpeg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![物理材质 – 概览](img/image00302.jpeg)'
- en: Lastly, to apply **Physical Material** to **Skeletal Mesh**, we need to either
    create or open an already created **Physics Asset** that contains **Skeletal Mesh**.
    In the **First Person Shooter Project** template, we can find **TutorialTPP_PhysicsAsset**
    under the **Engine Content** folder. If the **Engine Content** folder is not visible
    by default in **Content Browser**, we need to simply navigate to **View Options**
    in the bottom-right corner of **Content Browser** and check the **Show Engine
    Content** parameter. Under the **Engine Content** folder, we can navigate to the
    **Tutorial** folder and then to the **TutorialAssets** folder to find the **TutorialTPP_PhysicsAsset**
    asset. Double-click on this asset to open **Physical Asset Tool**. Now, we can
    click on any of the body parts found on **Skeletal Mesh** to highlight it. Once
    this is highlighted, we can view the option for **Simple Collision Physical Material**
    in the **Details** panel under the **Physics** section. Here, we can apply any
    of our **Physical Materials** to this body part.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，要将**物理材质**应用到**骨骼网格**上，我们需要创建或打开一个已经创建的包含**骨骼网格**的**物理资产**。在**第一人称射击项目**模板中，我们可以在**Engine
    Content**文件夹下找到**TutorialTPP_PhysicsAsset**。如果**Engine Content**文件夹在**内容浏览器**中默认不可见，我们需要简单地导航到**内容浏览器**右下角的**视图选项**，并勾选**显示引擎内容**参数。在**Engine
    Content**文件夹下，我们可以导航到**Tutorial**文件夹，然后到**TutorialAssets**文件夹以找到**TutorialTPP_PhysicsAsset**资产。双击此资产以打开**物理资产工具**。现在，我们可以点击**骨骼网格**上找到的任何身体部分以突出显示它。一旦突出显示，我们可以在**物理**部分下的**详细信息**面板中查看**简单碰撞物理材质**的选项。在这里，我们可以将任何我们的**物理材质**应用到这个身体部分。
- en: '![Physical Materials – an overview](img/image00303.jpeg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![物理材质 – 概览](img/image00303.jpeg)'
- en: Physical Materials – a section review
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 物理材质 – 章节回顾
- en: In this section, we discussed in detail what **Physical Materials** are and
    what their parameters mean when applying them to a physics body. Additionally,
    we explored how to apply **Physical Materials** to physics bodies, **Materials**,
    **Material Instances**, and **Skeletal Meshes** in **Physical Asset Tool**. Now
    that we have a better understanding of **Physical Materials**, we can now conclude
    this chapter by working with **Constraints** in blueprints to better understand
    **Physics Damping**.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们详细讨论了**物理材质**是什么以及它们在应用到物理体时的参数含义。此外，我们还探讨了如何在**物理资产工具**中应用**物理材质**到物理体、**材质**、**材质实例**和**骨骼网格**。现在，我们对**物理材质**有了更好的理解，我们可以通过在蓝图中使用**约束**来更好地理解**物理阻尼**来结束这一章。
- en: Physics Damping
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 物理阻尼
- en: In order to gain a stronger grasp of **Physics Damping** in Unreal Engine 4,
    we will create a simple working example of **Constraints** with blueprints. To
    start with, let's continue our work in the **Unreal_PhyProject** project, navigate
    to **Content Browser** and then to the **Blueprints** folder, and right-click
    on it to create a new **Actor** blueprint. Let's name this blueprint `BP_Constraint`
    and double-click on it to open **Blueprint Editor**.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地掌握虚幻引擎 4 中的**物理阻尼**，我们将创建一个简单的带有蓝图的工作示例来展示**约束**。首先，让我们继续在**Unreal_PhyProject**项目中工作，导航到**内容浏览器**然后到**蓝图**文件夹，右键单击以创建一个新的**Actor**蓝图。让我们将这个蓝图命名为`BP_Constraint`并双击它以打开**蓝图编辑器**。
- en: To begin this blueprint, let's navigate to the **Viewport** tab and then add
    **Scene Component** to the **Components** tab using the **Add Component** context
    sensitive drop-down menu. Name this component `ROOT`. Next, we will add two cube
    meshes from the **Basic Shapes** section to the **Add Components** menu. Name
    one `Stable Mesh` and the other `Constrained Mesh`. Lastly, let's add a **Physics
    Constraint** component from the **Physics** section and name it `Physics Constraint`.
    Now, we need to position these components in a manner that will better showcase
    how to use physics damping in Unreal Engine 4.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始这个蓝图，让我们导航到**视口**选项卡，然后使用**添加组件**的上下文相关下拉菜单将**场景组件**添加到**组件**选项卡。将此组件命名为`ROOT`。接下来，我们将从**基本形状**部分添加两个立方网格到**添加组件**菜单。将一个命名为`Stable
    Mesh`，另一个命名为`Constrained Mesh`。最后，让我们从**物理**部分添加一个**物理约束**组件并将其命名为`Physics Constraint`。现在，我们需要以更好地展示如何在虚幻引擎
    4 中使用物理阻尼的方式定位这些组件。
- en: 'Set the position of our assets in the **Viewport** tab of our blueprint as
    follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的蓝图**视口**选项卡中设置我们资产的位置如下：
- en: '**Stable Mesh**: `X – 0.0`, `Y – 0.0`, and `Z – 350.0`'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**稳定网格**: `X – 0.0`, `Y – 0.0`, 和 `Z – 350.0`'
- en: '**Constrained Mesh**: `X – 120.0`, `Y – 0.0`, `Z – 0.0`'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**约束网格**: `X – 120.0`, `Y – 0.0`, `Z – 0.0`'
- en: '**Physics Constraint**: `X – 0.0`, `Y – 0.0`, `Z – 340.0`'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**物理约束**: `X – 0.0`, `Y – 0.0`, `Z – 340.0`'
- en: 'Now, we will need to set the default parameters to our **Physics Constraint**
    asset so that it recognizes the mesh that is the anchor. The other mesh is the
    free-hanging pendulum attached to it. To accomplish this, let''s select the **Physics
    Constraint** component. Then, in its **Details** panel, we will find the parameters
    for **Component Name 1** and **Component Name 2** under the **Constraint** section.
    For these parameters, we will need to apply the names of the two meshes that we
    will use for our constraint: `Stable Mesh` and `Constrained Mesh`. Set these parameters
    as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要设置我们的**物理约束**资产默认参数，以便它能够识别作为锚点的网格。另一个网格是附着在其上的自由悬挂的摆。为了完成这个任务，让我们选择**物理约束**组件。然后，在其**详细信息**面板中，我们将在**约束**部分下找到**组件名称
    1**和**组件名称 2**的参数。对于这些参数，我们需要应用我们将用于约束的两个网格的名称：`Stable Mesh`和`Constrained Mesh`。将这些参数设置如下：
- en: '**Component Name 1**: `Stable Mesh`'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组件名称 1**: `稳定网格`'
- en: '**Component Name 2**: `Constrained Mesh`![Physics Damping](img/image00304.jpeg)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组件名称 2**: `约束网格`![物理阻尼](img/image00304.jpeg)'
- en: 'With these parameters in place, we can now place our **BP_Constraint** in **FirstPersonExampleMap**
    to see the constraint in action. First, make sure to compile and save the blueprint
    before placing this blueprint in our level. Once this is placed in our level,
    make sure to lift the blueprint well off the ground so that there won''t be any
    collision or clipping between the constrained assets and our game world, and when
    we can play the game to see how the constraint works, we will see the following
    result:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些参数设置完成后，我们现在可以将我们的**BP_Constraint**放置到**FirstPersonExampleMap**中，以查看约束的实际效果。首先，确保在将此蓝图放置到我们的关卡中之前编译并保存蓝图。一旦放置到我们的关卡中，确保将蓝图从地面上抬起，这样就不会有任何约束资产与我们的游戏世界之间的碰撞或裁剪，当我们玩游戏以查看约束如何工作时，我们将看到以下结果：
- en: '![Physics Damping](img/image00305.jpeg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![物理阻尼](img/image00305.jpeg)'
- en: 'We will see that the swinging cube will continue to swing back and forth for
    eternity without any sign of damping or friction to slow it down. Let''s change
    this. Then, navigate back to the **BP_Constraint** blueprint and select the **Physics
    Constraint** component. In the **Details** panel, we will see a handful of parameters
    that we can change to the constraint in order to affect its behavior. Let''s briefly
    define each parameter found in the **Details** panel of the **Physics Constraint
    component**:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到，摆动的立方体会继续无休止地来回摆动，没有任何阻尼或摩擦的迹象来减缓它。让我们改变这一点。然后，返回到**BP_Constraint**蓝图，并选择**物理约束**组件。在**详细信息**面板中，我们将看到一些可以更改以影响其行为的约束参数。让我们简要定义在**物理约束组件**的**详细信息**面板中找到的每个参数：
- en: '**Component Name 1**: This parameter requires the name of the first component
    property to constrain. If this is left empty, the name parameter will search in
    its **Owner** for a parameter name. If **Owner** returns null, this parameter
    will use the **Root Component** of **Actor 1**.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组件名称 1**: 此参数需要约束的第一个组件属性的名称。如果此参数为空，则名称参数将在其**所有者**中搜索参数名称。如果**所有者**返回null，则此参数将使用**演员
    1**的**根组件**。'
- en: '**Component Name 2**: This parameter requires the name of the second component
    property to constrain. If this is left empty, the name parameter will search in
    its **Owner** for a parameter name. If **Owner** returns null, this parameter
    will use the **Root Component** of **Actor 2**.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组件名称 2**: 此参数需要约束的第二个组件属性的名称。如果此参数为空，则名称参数将在其**所有者**中搜索参数名称。如果**所有者**返回null，则此参数将使用**演员
    2**的**根组件**。'
- en: '**Joint Name**: This parameter is used when you work with **Skeletal Meshes**
    and requires the name of **Bone** that **Joint** is attached to.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**联合名称**: 当您与**骨骼网格**一起工作时，此参数被使用，并需要**关节**所连接的**骨骼**名称。'
- en: '**Constraint Bone 1**: This parameter requires the name of the first bone (body)
    that this constraint is connecting to and would be the child bone in **Physics
    Asset**.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**约束骨骼 1**: 此参数需要连接到此约束的第一个骨骼（身体）的名称，它将是**物理资产**中的子骨骼。'
- en: '**Constraint Bone 2**: This parameter requires the name of the second bone
    (body) that this constraint is connecting to and would be the parent bone in **Physics
    Asset**.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**约束骨骼 2**: 此参数需要连接到此约束的第二个骨骼（身体）的名称，它将是**物理资产**中的父骨骼。'
- en: '**Disable Collision**: This parameter disables the collision between the bodies
    joined by this constraint.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**禁用碰撞**: 此参数禁用通过此约束连接的身体的碰撞。'
- en: '**Enable Projection**: This parameter ensures that all the bodies are projected
    so that both these bodies still appear attached to each other if a high enough
    linear or angular velocity is applied to each element. For example, a tether ball
    spinning too fast would cause the elements to look detached, but this parameter
    stops this from happening. If the distance error between the two bodies exceeds
    0.1 units, or if the rotation error exceeds 10 degrees, the projection will correct
    this.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启用投影**: 此参数确保所有身体都被投影，以便在将足够高的线性或角速度应用于每个元素时，这两个身体仍然看起来是连接在一起的。例如，旋转过快的系绳球会导致元素看起来分离，但此参数阻止这种情况发生。如果两个身体之间的距离误差超过0.1单位，或者旋转误差超过10度，则投影将纠正这一点。'
- en: '**Projection Linear Tolerance**: This parameter represents **Linear Tolerance**
    in world units, and if the distance error exceeds this tolerance limit, the body
    will be projected.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**投影线性容差**: 此参数表示以世界单位表示的**线性容差**，如果距离误差超过此容差限制，则将投影身体。'
- en: '**Projection Angular Tolerance**: This parameter represents **Angular Tolerance**
    in world units, and if the angular distance error exceeds this tolerance limit,
    the body will be projected.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**投影角容差**: 此参数表示以世界单位表示的**角容差**，如果角距离误差超过此容差限制，则将投影身体。'
- en: '**Linear X Motion**: This parameter indicates whether or not the linear motion
    along the **X** axis is allowed, blocked, or limited. If this is limited, the
    **Linear Limit** property will be used to determine whether a motion is allowed.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**线性 X 运动**: 此参数指示是否允许沿**X**轴的线性运动，阻止或限制。如果此参数被限制，则将使用**线性限制**属性来确定是否允许运动。'
- en: '**Linear Y Motion**: This parameter indicates whether or not the linear motion
    along the **Y** axis is allowed, blocked, or limited. If this is limited, the
    **Linear Limit** property will be used to determine whether a motion is allowed.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**线性 Y 运动**: 此参数指示是否允许沿**Y**轴的线性运动，阻止或限制。如果此参数被限制，则将使用**线性限制**属性来确定是否允许运动。'
- en: '**Linear Z Motion**: This parameter indicates whether or not the linear motion
    along the **Z** axis is allowed, blocked, or limited. If this is limited, the
    **Linear Limit** property will be used to determine whether a motion is allowed.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**线性Z轴运动**：此参数指示是否允许沿**Z**轴的线性运动，是否阻止或限制。如果此运动被限制，则将使用**线性限制**属性来确定是否允许运动。'
- en: '**Linear Breakable**: This parameter defines whether or not the joint in the
    constraint is breakable based on the **Linear Break Threshold** property.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**线性可断裂**：此参数定义了约束中的关节是否基于**线性断裂阈值**属性可断裂。'
- en: '**Linear Break Threshold**: This parameter defines the force threshold required
    to break this joint.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**线性断裂阈值**：此参数定义了打破此关节所需的力阈值。'
- en: '**Angular Swing 1 Motion**: This parameter indicates whether or not the rotation
    around the **Z** axis is allowed, blocked, or limited. If this is limited, the
    **Angular Limit** property will be used to determine the range of motion.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**角摆动1运动**：此参数指示是否允许围绕**Z**轴的旋转，是否阻止或限制。如果此运动被限制，则将使用**角限制**属性来确定运动范围。'
- en: '**Angular Twist Motion**: This parameter indicates whether or not the rotation
    around the **X** axis is allowed, blocked, or limited. If this is limited, the
    **Angular Limit** property will be used to determine the range of motion.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**角扭转运动**：此参数指示是否允许围绕**X**轴的旋转，是否阻止或限制。如果此运动被限制，则将使用**角限制**属性来确定运动范围。'
- en: '**Angular Swing 2 Motion**: This parameter indicates whether or not the rotation
    around the **Y** axis is allowed, blocked, or limited. If this is limited, the
    **Angular Limit** property will be used to determine the range of motion.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**角摆动2运动**：此参数指示是否允许围绕**Y**轴的旋转，是否阻止或限制。如果此运动被限制，则将使用**角限制**属性来确定运动范围。'
- en: '**Angular Breakable**: This parameter determines whether or not it is possible
    to break the joint with angular force.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**角可断裂**：此参数确定是否可以用角力打破关节。'
- en: '**Angular Break Threshold**: This parameter dictates the angular force necessary
    to break the joint.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**角断裂阈值**：此参数规定了打破关节所需的角力。'
- en: '**Linear Position Drive**: This parameter enables/disables the linear position
    drive. Here, we can set the **Linear X**, **Y**, and **Z** axes and **Linear Position
    Target**.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**线性位置驱动**：此参数启用/禁用线性位置驱动。在此，我们可以设置**线性X**、**Y**、**Z**轴和**线性位置目标**。'
- en: '**Linear Velocity Drive**: This parameter enables/disables the linear velocity
    drive, where we can set the **X**, **Y**, and **Z** linear velocity targets for
    the constraint.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**线性速度驱动**：此参数启用/禁用线性速度驱动，在此我们可以设置约束的**X**、**Y**和**Z**线性速度目标。'
- en: '**Linear** **Position Strength**: This parameter dictates the spring force
    applied to the linear drive.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**线性位置强度**：此参数规定了应用于线性驱动的弹簧力。'
- en: '**Linear** **Velocity Strength**: This parameter determines the damping force
    applied to the linear drive.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**线性速度强度**：此参数确定应用于线性驱动的阻尼力。'
- en: '**Linear** **Drive Force Limit**: This parameter limits the force that can
    be applied to the linear drive.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**线性驱动力限制**：此参数限制了可以应用于线性驱动的力。'
- en: '**Angular** **Orientation Drive**: This parameter enables the angular drive
    towards a target orientation along the **X**, **Y**, or **Z** axes.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**角方向驱动**：此参数使沿**X**、**Y**或**Z**轴的角驱动朝向目标方向。'
- en: '**Angular** **Velocity Drive**: This parameter enables the angular drive towards
    a target velocity along the **X**, **Y**, and **Z** axes.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**角速度驱动**：此参数使沿**X**、**Y**和**Z**轴的角驱动朝向目标速度。'
- en: '**Angular** **Drive Force Limit**: This parameter limits the force that the
    angular drive can apply.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**角驱动力限制**：此参数限制了角驱动可以施加的力。'
- en: '**Angular Position Strength**: This parameter applies a spring force value
    to the angular drive.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**角位置强度**：此参数对角驱动应用弹簧力值。'
- en: '**Angular** **Velocity Strength**: This parameter applies a damping value to
    the angular drive.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**角速度强度**：此参数对角驱动应用阻尼值。'
- en: '**Angular Drive Mode**: This parameter determines the way the angular paths
    are estimated; we can either select **SLERP (Spherical Linear Interpolation)**
    or decompose it into **Twist and Swing**.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**角驱动模式**：此参数确定估计角路径的方式；我们可以选择**SLERP（球面线性插值）**或将其分解为**扭转和摆动**。'
- en: Now that we have briefly discussed the parameters available in the **Physics
    Constraint** component, let's apply angular damping to our constraint so that
    it can be slowed down and brought to a complete halt. In order to make this happen,
    we will need to apply **Angular Velocity Drive** and set **Angular Velocity Strength**
    to a value of `15.0`. Next, we will need to set **Angular Drive Mode** to **Twist
    and Swing**; the remaining parameters can be set to their default values. Once
    applied, let's compile, save, and jump back to **FirstPersonExampleMap**. We will
    see that over a short period of time, **Constrained Mesh** will slowly come to
    a halt. This is due to the high value of the **Angular Velocity Strength** parameter;
    the higher the value, the quicker **Constrained Mesh** will come to a halt. The
    lower the number, the longer it would take for **Constrained Mesh** to come to
    a halt all the way to the point where the mesh will not stop swinging.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经简要讨论了**物理约束**组件中可用的参数，让我们将角阻尼应用到我们的约束上，以便它可以减速并完全停止。为了实现这一点，我们需要应用**角速度驱动**并将**角速度强度**设置为`15.0`。接下来，我们需要将**角驱动模式**设置为**扭转和摆动**；其余参数可以设置为它们的默认值。一旦应用，让我们编译、保存并跳回到**FirstPersonExampleMap**。我们会看到，在短时间内，**约束网格**会逐渐停止。这是由于**角速度强度**参数的高值；值越高，**约束网格**停止的速度越快。数值越低，**约束网格**停止所需的时间越长，甚至可能到网格不会停止摆动。
- en: What we can do now to conclude this chapter is set an angular force break so
    that if the constrained mesh moves with enough force, it will break from the constraint
    entirely and become its own unique physics body. To accomplish this, let's return
    to the **BP_Constraint** blueprint and select the **Physics Constraint** component
    from the **Components** tab. Now, in the **Details** panel under the **Angular
    Limits** section, we can set **Angular Swing 1 Motion**, **Angular Twist Motion**,
    and **Angular Swing 2 Motion** to **Limited** and leave their **Angle** values
    as their defaults. Lastly, make sure that the **Angular Breakable** parameter
    is checked and **Angular Break Threshold** is set to a value of `50`. If we compile
    and save the blueprint and jump back to the **FirstPersonExampleMap** level, we
    will see that when we shoot the constrained mesh enough times to cause its angular
    velocity to increase, once it reaches the threshold that we set, the mesh will
    separate entirely from the constraint. From here, we can interact with the separated
    mesh as its own physics body. This scenario is useful if you want to simulate
    physics for a tire swing, or for any type of a pendulum object that we wish to
    provide this behavior to. Feel free to experiment with the **Physics Constraint**
    values to see how else we can affect the behaviors of the constraint.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 为了总结本章，我们可以设置一个角力断裂，这样如果约束网格移动的力量足够大，它将完全从约束中断裂并成为其独特的物理体。为了完成这个任务，让我们回到**BP_Constraint**蓝图并从**组件**选项卡中选择**物理约束**组件。现在，在**角限制**部分下的**细节**面板中，我们可以将**角摆动1运动**、**角扭转运动**和**角摆动2运动**设置为**限制**，并保留它们的**角度**值作为默认值。最后，确保**角可断裂**参数被勾选，并将**角断裂阈值**设置为`50`。如果我们编译并保存蓝图并跳回到**FirstPersonExampleMap**级别，我们会看到当我们射击约束网格足够多次以增加其角速度时，一旦达到我们设置的阈值，网格将完全从约束中分离。从这里，我们可以将其作为独立的物理体与之交互。这种场景在你想模拟轮胎秋千的物理效果，或者为任何我们希望提供这种行为的摆锤对象时很有用。请随意实验**物理约束**的值，看看我们还能如何影响约束的行为。
- en: '![Physics Damping](img/image00306.jpeg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![物理阻尼](img/image00306.jpeg)'
- en: Physics Damping – a section review
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 物理阻尼 – 小节回顾
- en: In this section, we looked at how to explore **Physics Damping** using blueprints
    and the **Physics Constraint** component. By setting values in **Physics Constraint**,
    we are able to simulate a pendulum in our game world that would swing forever
    until we apply angular damping with the **Angular Velocity Strength** parameter.
    Lastly, we applied an angular threshold that would cause our constrained mesh
    to break from the joint and become its own separate physics body.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了如何使用蓝图和**物理约束**组件来探索**物理阻尼**。通过在**物理约束**中设置值，我们能够在游戏世界中模拟一个摆动永不停歇的摆锤，直到我们使用**角速度强度**参数应用角阻尼。最后，我们应用了一个角阈值，这将导致我们的约束网格从关节处断裂并成为其独立的物理体。
- en: Summary
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed what **Physics Bodies** are and how they function
    in Unreal Engine 4\. Moreover, we looked at the properties that are involved in
    **Physics Bodies** and how these properties can affect the behavior of these bodies
    in the game.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了什么是**物理体**以及它们在虚幻引擎4中的工作方式。此外，我们还探讨了与**物理体**相关的属性以及这些属性如何影响这些体在游戏中的行为。
- en: Next, we explored what **Angular** and **Linear Damping** are and how they can
    affect our **Physics Bodies**. We also discussed real-world physics when it comes
    to linear and angular momentum, apart from linear and angular velocities.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们探讨了**角阻尼**和**线阻尼**是什么，以及它们如何影响我们的**物理体**。我们还讨论了现实世界中的物理，包括线性和角动量，以及线速度和角速度。
- en: Additionally, we briefly discussed **Physical Materials**, how to create them,
    and what their properties entail when it comes to affecting its behavior in the
    game. We then reviewed how to apply **Physical Materials** to static meshes, materials,
    material instances, and skeletal meshes.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们简要讨论了**物理材料**，如何创建它们，以及当它们影响游戏中的行为时，它们的属性包含什么。然后，我们回顾了如何将**物理材料**应用于静态网格、材质、材质实例和骨骼网格。
- en: Lastly, we applied **Physics Damping** to **Physics Constraint** by creating
    a working blueprint example, where we constrained two cube meshes together and
    created a pendulum. Moreover, we applied angular damping and angular threshold
    breaks to slowly bring the constrained cube mesh to a halt. We also implemented
    the ability for the constrained mesh to break from the joint to become its own
    physics body.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们通过创建一个工作蓝图示例，将**物理阻尼**应用于**物理约束**，其中我们将两个立方网格约束在一起并创建了一个摆锤。此外，我们还应用了角阻尼和角阈值断开，以逐渐使约束的立方网格停止。我们还实现了约束网格从关节处断裂，成为其自身的物理体的能力。
- en: Now that we have a stronger understanding of how **Physics Bodies** work in
    the context of angular and linear velocities, momentum, and the application of
    damping, we can move on and explore in detail how **Physical Materials** work
    and how they are implemented.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对**物理体**在角速度和线速度、动量以及阻尼应用方面的作用有了更深入的了解，我们可以继续深入探讨**物理材料**的工作原理以及它们的实现方式。
