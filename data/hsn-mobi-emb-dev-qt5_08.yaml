- en: Connectivity with Qt Bluetooth LE
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Qt蓝牙LE进行连接
- en: You will learn about using Qt Bluetooth **Low Energy** (**LE**) to build connectivity
    to devices that have LE Bluetooth radios. Bluetooth is more than mice, keyboards,
    and audio. Device discovery, data exchange, and other tasks involving Bluetooth
    Low Energy will be examined. We will use the `QBluetoothUuid`, `QBluetoothCharacteristic`,
    `QLowEnergyController`, and `QLowEnergyService` classes.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 您将学习如何使用Qt蓝牙**低功耗**（**LE**）来建立与具有LE蓝牙无线电的设备的连接。蓝牙不仅仅是鼠标、键盘和音频。设备发现、数据交换以及涉及蓝牙低功耗的其他任务将被检查。我们将使用`QBluetoothUuid`、`QBluetoothCharacteristic`、`QLowEnergyController`和`QLowEnergyService`类。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: What is Bluetooth Low Energy
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是蓝牙低功耗
- en: Discovering and connecting with devices
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发现和连接设备
- en: Advertising services
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 广播服务
- en: Retrieving sensor data from remote device
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从远程设备检索传感器数据
- en: What is Bluetooth Low Energy?
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是低功耗蓝牙？
- en: '**Bluetooth Low Energy** (**BLE**), or Bluetooth Smart as it is also called,
    was originally developed by Nokia under the name Wibree and was originally released
    in 2006\. It was integrated into the Bluetooth 4.0 specification and released
    in 2010.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**蓝牙低功耗**（**BLE**），也称为蓝牙智能，最初由诺基亚在Wibree的名称下开发，并于2006年首次发布。它集成到蓝牙4.0规范中，并于2010年发布。'
- en: Bluetooth is a wireless connection technology that operates in the 2,400-2,483.5
    MHz range of the 2.4 GHz frequency band. There are 79 data channels it can choose
    for transmitting packets. BLE limits the data channels to 40.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝牙是一种无线连接技术，它工作在2.4 GHz频段的2,400-2,483.5 MHz范围内。它可以选择79个数据通道来传输数据包。BLE将数据通道限制为40个。
- en: BLE is targeted at mobile and embedded devices that require lower power consumption.
    Unlike Bluetooth, BLE is designed for devices that exchange small amounts of data
    periodically, as opposed to regular Bluetooth that was designed for continuous
    data streams. Most importantly, BLE has a sleep mode that it uses to conserve
    power.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: BLE针对的是需要低功耗的移动和嵌入式设备。与蓝牙不同，BLE是为定期交换少量数据的设备设计的，而常规蓝牙是为连续数据流设计的。最重要的是，BLE有一个睡眠模式，用于节省电力。
- en: 'Qt has support for BLE in the Qt Connectivity module alongside **Near-field
    Communication** (NFC). BLE has a number of profiles and services:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Qt在Qt Connectivity模块中支持BLE，同时还有**近场通信**（NFC）。BLE有许多配置文件和服务：
- en: Alerts
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提醒
- en: Battery
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电池
- en: Fitness
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 健身
- en: Health
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 健康
- en: HID
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HID
- en: Internet
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 互联网
- en: Mesh
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网状网络
- en: Sensors
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传感器
- en: '**Generic Attribute** (**GATT**) is used to store profiles, services, characteristics,
    and other data. Each entry is a unique 16-bit ID. The BLE connection is exclusive
    in that it can only connect to one computer at a time. The BLE peripheral device
    is known as the GATT server, and the computer it connects to is the GATT client.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**通用属性**（**GATT**）用于存储配置文件、服务、特性和其他数据。每个条目都有一个唯一的16位ID。BLE连接是专一的，它一次只能连接到一台计算机。BLE外围设备被称为GATT服务器，与之连接的计算机是GATT客户端。'
- en: Each profile can have a number of services. Each service can have a number of
    characteristics. A profile is just the collection of pre-defined services in the
    specification.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 每个配置文件可以有多个服务。每个服务可以有多个特性。配置文件只是规范中预定义服务的集合。
- en: A service is just a group of characteristics defined by a unique 16 or 128-bit
    ID. A characteristic is a single data point, which may contain an array of data,
    such as with an accelerometer.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 服务是一组由唯一的16或128位ID定义的特性。特性是一个单一的数据点，可能包含一个数据数组，例如加速度计。
- en: Now that you know a little bit of the background, let's get started.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了一些背景知识，让我们开始吧。
- en: Implementing a BLE GATT server
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现BLE GATT服务器
- en: I guess we really need a BLE server now.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我想我们真的需要一个BLE服务器了。
- en: 'Let''s say you have an embedded device that has a few environmental sensors
    attached, such as humidity and temperature. You need to send this data over Bluetooth
    to another handheld device once in a while. On the embedded sensor device, you
    need to setup the device. The basic procedure to set up the BLE server is as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您有一个带有几个环境传感器（如湿度和温度）的嵌入式设备。您需要偶尔通过蓝牙将此数据发送到另一台手持设备。在嵌入式传感器设备上，您需要设置设备。设置BLE服务器的基本步骤如下：
- en: Supply advertisement data (`QLowEnergyAdvertisingData`)
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供广告数据（`QLowEnergyAdvertisingData`）
- en: Supply characteristic data (`QLowEnergyCharacteristicData`)
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供特性数据（`QLowEnergyCharacteristicData`）
- en: Set up the service data (`QLowEnergyServiceData`)
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置服务数据（`QLowEnergyServiceData`）
- en: Start advertising and listening for connections
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始广告并监听连接
- en: QLowEnergyAdvertisingData
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QLowEnergyAdvertisingData
- en: '`QLowEnergyAdvertisingData` is the class you use to tell the server what and
    how the data is going to be presented.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`QLowEnergyAdvertisingData`是用于告诉服务器数据和数据如何呈现的类。'
- en: Here's how we would use `QLowEnergyAdvertisingData.`
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们如何使用`QLowEnergyAdvertisingData`的方式。
- en: 'Construct a `QLowEnergyAdvertisingData` object:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个`QLowEnergyAdvertisingData`对象：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Set `Discoverability` options:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '设置`Discoverability`选项:'
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Set a `Name` for our service:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '为我们的服务设置一个`Name`:'
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Add a list of services we are interested it:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 添加我们感兴趣的服务的列表：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The source code can be found on the Git repository under the `Chapter06-1` directory,
    in the `cp6` branch.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码可以在Git仓库的`Chapter06-1`目录下的`cp6`分支中找到。
- en: We need to create some characteristic data now. Let's create a `Characteristic`
    that handles temperature, so we set its `uuid` to `TemperatureMearurement`. We
    need to also let it be configurable for notifications.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要创建一些特征数据。让我们创建一个处理温度的`Characteristic`，因此我们将它的`uuid`设置为`TemperatureMearurement`。我们还需要让它能够配置通知。
- en: QLowEnergyCharacteristicData
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QLowEnergyCharacteristicData
- en: '`QLowEnergyCharacteristicData` represents a **Generic Attribute Profile** (**GATT**)
    characteristic, which defines a single data point in the Bluetooth transfer. You
    use it to set up service data:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`QLowEnergyCharacteristicData`代表一个**通用属性配置文件**（**GATT**）特征，它定义了蓝牙传输中的单个数据点。你用它来设置服务数据：'
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: QLowEnergyServiceData
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QLowEnergyServiceData
- en: 'Here, we set up the `Temperature` service data as a `Primary` service, and
    add `Characteristic` to `service`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将`Temperature`服务数据设置为`Primary`服务，并将`Characteristic`添加到`service`中：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, let''s supply the temperature data. We construct `QLowEnergyCharacteristic`
    with the `TemperatureMeasurement` type, and supply to it some data. The first
    bit specifies that we are supplying the `temperature` unit in Celsius:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们提供温度数据。我们使用`TemperatureMeasurement`类型构造`QLowEnergyCharacteristic`，并向它提供一些数据。第一个位指定我们提供的是摄氏度的`temperature`单位：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We are all set up now, and all we need is to start `Advertising` to listen
    for connections:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经设置好了，现在我们只需要开始`Advertising`来监听连接：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Discovery and Pair-ity – search and connect for BLE devices
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发现和配对性 - 搜索和连接BLE设备
- en: The first thing you need to do is search for devices, which is called discovery.
    It entails putting the Bluetooth device into search, or discovery mode. You then
    receive a list of devices address with which you can connect or pair to be able
    to access and share data.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要做的第一件事是搜索设备，这被称为发现。它包括将蓝牙设备置于搜索或发现模式。然后你会收到一个设备地址列表，你可以通过连接或配对来访问和共享数据。
- en: Let's look at how that is done in Qt using `QBluetoothDeviceDiscoveryAgent`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看在Qt中使用`QBluetoothDeviceDiscoveryAgent`是如何实现的。
- en: QBluetoothDeviceDiscoveryAgent
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QBluetoothDeviceDiscoveryAgent
- en: 'The `QBluetoothDeviceDiscoveryAgent` class is responsible for the device discovery
    search. It will emit the `deviceDiscovered` signal when any Bluetooth is found:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`QBluetoothDeviceDiscoveryAgent`类负责设备发现搜索。当找到任何蓝牙设备时，它将发出`deviceDiscovered`信号：'
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The source code can be found on the Git repository under the `Chapter06-1a` directory,
    in the `cp6` branch.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码可以在Git仓库的`Chapter06-1a`目录下的`cp6`分支中找到。
- en: The call to `start()` will initiate the discovery process. The `QBluetoothDeviceDiscoveryAgent::LowEnergyMethod` argument will
    set a filter to only discover `LowEnergy` devices. Once you find the device you
    want, you can call `stop()` to stop the device search.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`start()`将启动发现过程。`QBluetoothDeviceDiscoveryAgent::LowEnergyMethod`参数将设置一个过滤器，仅发现`LowEnergy`设备。一旦找到你想要的设备，你可以调用`stop()`来停止设备搜索。
- en: You can wait for errors by connecting to the error (`QBluetoothDeviceDiscoveryAgent::Error
    error`) signal.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过连接到错误信号（`QBluetoothDeviceDiscoveryAgent::Error error`）来等待错误。
- en: 'The `error` signal in the `QBluetoothDeviceDiscoveryAgent` class is overloaded,
    so special care needs to happen in order to connect to the signal. Qt provides `QOverload` and
    can be implemented like this:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`QBluetoothDeviceDiscoveryAgent`类中的`error`信号是重载的，因此需要特别注意才能连接到该信号。Qt提供了`QOverload`，可以像这样实现：'
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If you would rather get a list of devices all at one time, connect to the `Finished`
    signal and use the `discoveryDevices()` call, which returns `QList <QBluetoothDeviceInfo>`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '如果你希望一次性获取所有设备的列表，请连接到`Finished`信号并使用`discoveryDevices()`调用，该调用返回`QList <QBluetoothDeviceInfo>`:'
- en: '![](img/fa9c6ddf-5c99-47b2-a1af-e024d5852294.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fa9c6ddf-5c99-47b2-a1af-e024d5852294.png)'
- en: You might want to check for the remote devices pairing status, so call `pairingStatus`
    of `QLocalBluetoothDevice`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想要检查远程设备的配对状态，因此调用`QLocalBluetoothDevice`的`pairingStatus`。
- en: 'You can pair with a device by then calling the `requestPairing` function of `QBluetoothLocalDevice`,
    with `QBluetoothAddress` of the remote Bluetooth device:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过调用`QBluetoothLocalDevice`的`requestPairing`函数，并传入远程蓝牙设备的`QBluetoothAddress`来与设备配对：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Our example app asks to pair the device before we execute the `requestPairing`
    procedure:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的示例应用在执行`requestPairing`过程之前要求配对设备：
- en: '![](img/02444217-bc7a-4b09-84bd-a389e3f211f8.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/02444217-bc7a-4b09-84bd-a389e3f211f8.png)'
- en: You can then call `requestPairing` on `QBluetoothLocalDevice` with the `QBluetoothAddress`
    of the device you wish to pair with. Let's take a look at `QBluetoothLocalDevice`
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以调用`QBluetoothLocalDevice`上的`requestPairing`，并传入你想要配对的设备的`QBluetoothAddress`。让我们看看`QBluetoothLocalDevice`。
- en: QBluetoothLocalDevice
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QBluetoothLocalDevice
- en: '`QBluetoothLocalDevice` represents the Bluetooth on your device. You use this
    class to initiate pairing to another device, but also to handle pairing requests
    from remote Bluetooth devices. It has a few signals to help with that:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`QBluetoothLocalDevice`代表设备上的蓝牙。你使用这个类来启动与其他设备的配对，同时也用于处理来自远程蓝牙设备的配对请求。它有几个信号来帮助完成这些操作：'
- en: '`pairingDisplayConfirmation`: This is a signal the remote device requests to
    show user a PIN and ask whether it is the same on both devices. You must call
    `pairingConfirmation` with `true` or `false` on `QBluetoothLocalDevice`.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pairingDisplayConfirmation`：这是一个远程设备请求显示PIN并询问两个设备上是否相同的信号。你必须在使用`QBluetoothLocalDevice`时调用`pairingConfirmation`并传入`true`或`false`。'
- en: '`pairingDisplayPinCode`: This is a request to enter a PIB.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pairingDisplayPinCode`：这是一个请求输入PIB。'
- en: '`pairingFinished`: Pairing is completed successfully.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pairingFinished`：配对成功完成。'
- en: 'We then connect to these signals, if the user allows it when they click on
    the OK button:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们然后连接到这些信号，如果用户在点击OK按钮时允许这样做：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'When the remote device only needs a PIN confirmation, the `pairingDisplayConfirmation`
    signal is called:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当远程设备只需要PIN确认时，会调用`pairingDisplayConfirmation`信号：
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'When the remote device needs user to enter a PIN, the `pairingDisplayPinCode`
    signal is called with a PIN to be displayed and entered on the remote device:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当远程设备需要用户输入PIN时，会调用`pairingDisplayPinCode`信号，并带上要在远程设备上显示和输入的PIN：
- en: '[PRE13]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'On the other side, to receive pairing, you need to put `QBluetoothLocalDevice`
    into the `Discoverable` mode:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一边，为了接收配对，你需要将`QBluetoothLocalDevice`置于`Discoverable`模式：
- en: '[PRE14]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The device can then be seen by other devices that are in the Bluetooth `Discovery`
    mode.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 设备可以被处于蓝牙`Discovery`模式的其他设备看到。
- en: Specifying and getting client data
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 指定和获取客户端数据
- en: Once you have connected to a BLE device peripheral, you need to discover its
    characteristics to be able to read and write them. You do that by using `QLowEnergyController`.
    Let's take a look at what `QLowEnergyController` is.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你连接到BLE设备的外围设备，你需要发现其特性才能读取和写入它们。你可以通过使用`QLowEnergyController`来完成这个操作。让我们看看`QLowEnergyController`是什么。
- en: QLowEnergyController
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QLowEnergyController
- en: '`QLowEnergyController` is the central place to access BLE devices both local
    and remote.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`QLowEnergyController`是访问本地和远程BLE设备的中心位置。'
- en: The local `QLowEnergyController` can be created by using the static `QLowEnergyController::createPeripheral(QObject
    *parent)` function.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过使用静态函数`QLowEnergyController::createPeripheral(QObject *parent)`来创建本地的`QLowEnergyController`。
- en: Creating a `QLowEnergyController` object that represents the remote device is
    done by calling the static class `QLowEnergyController::createCentral` using the `QBluetoothDeviceInfo` object
    that you receive when you discover remote devices.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用静态类`QLowEnergyController::createCentral`并使用你在发现远程设备时收到的`QBluetoothDeviceInfo`对象来创建表示远程设备的`QLowEnergyController`对象：
- en: 'The `QLowEnergyController` object has several signals:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`QLowEnergyController`对象有几个信号：'
- en: '`discoveryFinished`'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`discoveryFinished`'
- en: '`serviceDiscovered`'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`serviceDiscovered`'
- en: '`connected`'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connected`'
- en: '`disconnected`'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`disconnected`'
- en: 'Connect to the `connected` signal and start connecting by calling `connectToDevice()`:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到`connected`信号，并通过调用`connectToDevice()`开始连接：
- en: '[PRE15]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Once the device is connected, it's time to discover its services, so we connect
    to the `serviceDiscovered` signal and initiate the service discovery by calling `discoverServices()`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦设备连接成功，就是时候发现它的服务了，因此我们连接到`serviceDiscovered`信号，并通过调用`discoverServices()`来启动服务发现。
- en: QLowEnergyService
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QLowEnergyService
- en: 'You can also connect to the `discoveryFinished()` signal, which returns a list
    of discovered services by calling `services()`. With either of these, you will
    get the `QBluetoothUuid` that belongs to that service, with which you can then
    create a `QLowEnergyService` object:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以连接到 `discoveryFinished()` 信号，该信号通过调用 `services()` 返回发现的服务的列表。使用这两种方法中的任何一种，您都将获得属于该服务的
    `QBluetoothUuid`，然后您可以使用它创建一个 `QLowEnergyService` 对象：
- en: '[PRE16]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We now have a `QLowEnergyService` object, which gives us details about it.
    We can only read its service details when its state becomes `ServiceDiscovered`,
    so now call the `discoverDetails()` function of the service to start the discovery
    process:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有一个 `QLowEnergyService` 对象，它提供了关于它的详细信息。我们只能在它的状态变为 `ServiceDiscovered`
    时读取其服务详情，因此现在调用服务的 `discoverDetails()` 函数以启动发现过程：
- en: '[PRE17]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Let's have a look at `QLowEnergyCharacteristic`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 `QLowEnergyCharacteristic`。
- en: QLowEnergyCharacteristic
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QLowEnergyCharacteristic
- en: 'Once the service details or `characteristics` are discovered, we can perform
    actions with `QLowEnergyCharacteristic`, such as enabling notifications:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦发现服务详情或 `characteristics`，我们就可以使用 `QLowEnergyCharacteristic` 来执行操作，例如启用通知：
- en: '[PRE18]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Using `QLowEnergyCharacteristic`, we can get a `QLowEnergyDescriptor` that we
    use to enable or disable notifications.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `QLowEnergyCharacteristic`，我们可以获取一个 `QLowEnergyDescriptor`，我们用它来启用或禁用通知。
- en: 'Sometimes, a `characteristic` on the remote device needs to be written to as
    well, such as enabling a specific sensor. In this case, you need to use the `writeCharacteristic`
    function of the service with `characteristic` as the first argument and the value
    to be written as the second:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，远程设备上的 `characteristic` 也需要被写入，例如启用特定的传感器。在这种情况下，您需要使用服务的 `writeCharacteristic`
    函数，其中 `characteristic` 作为第一个参数，要写入的值作为第二个参数：
- en: '[PRE19]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Writing to `QLowEnergyDescriptor` is just as easy; let's take a look.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 写入 `QLowEnergyDescriptor` 与此类似；让我们看看。
- en: QLowEnergyDescriptor
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QLowEnergyDescriptor
- en: From the Bluetooth specifications, a descriptor is defined as attributes that
    describe a characteristic value. It contains additional information about a characteristic.
    `QLowEnergyDescriptor` encapsulates a GATT descriptor. Descriptors and characteristics
    can have notifications when changes happen.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 根据蓝牙规范，描述符被定义为描述特征值的属性。它包含有关特征的一些附加信息。`QLowEnergyDescriptor` 封装了一个 GATT 描述符。当发生变化时，描述符和特征可以具有通知。
- en: 'To enable notifications, we might need to write a value to the descriptor.
    Here are some possible values:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用通知，我们可能需要向描述符写入一个值。这里有一些可能的值：
- en: '| **GATT term** | **Description** | **Value** | **Qt constant** |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| **GATT 术语** | **描述** | **值** | **Qt 常量** |'
- en: '| Broadcast | Permits broadcast | `0x01`  | `QLowEnergyCharacteristic::Broadcasting`
    |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| 广播 | 允许广播 | `0x01` | `QLowEnergyCharacteristic::Broadcasting` |'
- en: '| Read | Permits reading  | `0x02`  | `QLowEnergyCharacteristic::Read` |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| 读取 | 允许读取 | `0x02` | `QLowEnergyCharacteristic::Read` |'
- en: '| Write without response | Permits writing with any response  | `0x04` | `QLowEnergyCharacteristic::WriteNoResponse`
    |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| 无响应写入 | 允许带任何响应的写入 | `0x04` | `QLowEnergyCharacteristic::WriteNoResponse`
    |'
- en: '| Write | Permits writing with a response  | `0x08` | `QLowEnergyCharacteristic::Write`
    |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| 写入 | 允许带响应的写入 | `0x08` | `QLowEnergyCharacteristic::Write` |'
- en: '| Notify | Permits notifications  | `0x10` | `QLowEnergyCharacteristic::Notify`
    |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| 通知 | 允许通知 | `0x10` | `QLowEnergyCharacteristic::Notify` |'
- en: '| Indicate | Permits notification with client confirmation required | `0x20`
    | `QLowEnergyCharacteristic::Indicate` |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| 指示 | 允许带客户端确认的通知 | `0x20` | `QLowEnergyCharacteristic::Indicate` |'
- en: '| Authenticated signed writes | Permits signed writes  | `0x40` | `QLowEnergyCharacteristic::WriteSigned`
    |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| 认证签名写入 | 允许签名写入 | `0x40` | `QLowEnergyCharacteristic::WriteSigned` |'
- en: '| Extended properties | Queued writes and writable auxiliaries  | `0x80` |
    `QLowEnergyCharacteristic::ExtendedProperty` |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| 扩展属性 | 排队写入和可写辅助设备 | `0x80` | `QLowEnergyCharacteristic::ExtendedProperty`
    |'
- en: The difference between notifications and indications is that, with indications,
    the server requires the client to confirm that it has received the message, whereas
    with a notification, the server doesn't care whether the client receives it.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 通知和指示之间的区别在于，使用指示时，服务器要求客户端确认它已收到消息，而使用通知时，服务器不关心客户端是否收到。
- en: Qt does not currently have support to use authenticated signed writes (`0x40`) with
    Qt, nor does it have support to use indications (`0x20`).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Qt 目前不支持使用带认证的签名写入 (`0x40`) 与 Qt 一起使用，也不支持使用指示 (`0x20`)。
- en: 'We want to be notified when the characteristic values change. To enable this,
    we need to write a value of `0x10` or `QLowEnergyCharacteristic::Notify` to `descriptor`:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望在特征值改变时得到通知。为了启用此功能，我们需要将 `0x10` 或 `QLowEnergyCharacteristic::Notify` 的值写入
    `descriptor`：
- en: '[PRE20]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Or we can use the predefined `QLowEnergyCharacteristic::Notify`, like so:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 或者我们可以使用预定义的 `QLowEnergyCharacteristic::Notify`，如下所示：
- en: '[PRE21]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, we can finally get values out of our Bluetooth LE device:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们终于可以从我们的蓝牙低功耗设备中获取值了：
- en: '[PRE22]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Bluetooth QML
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Bluetooth QML
- en: There are Bluetooth QML components you can use as a client to scan and connect
    to Bluetooth devices as well. They are simple but functional.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些蓝牙 QML 组件可以作为客户端使用，用于扫描和连接到蓝牙设备。它们简单但功能性强。
- en: The source code can be found on the Git repository under the `Chapter06-2` directory,
    in the `cp6` branch.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码可以在 Git 仓库的 `Chapter06-2` 目录下的 `cp6` 分支中找到。
- en: 'Add the `bluetooth` module to your `pro` file:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `bluetooth` 模块添加到你的 `pro` 文件中：
- en: '[PRE23]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In your `qml` file, use the `QtBluetooth` import:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的 `qml` 文件中，使用 `QtBluetooth` 导入：
- en: '[PRE24]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The most important element is `BluetoothDiscoveryModel`.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的元素是 `BluetoothDiscoveryModel`。
- en: BluetoothDiscoveryModel
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: BluetoothDiscoveryModel
- en: '`BluetoothDiscoveryModel` provides a data model of available Bluetooth devices
    nearby. You can use it in various model-based Qt Quick components, such as `GridView`,
    `ListView`, and `PathView`. Setting the `discoveryMode` property tells the local
    Bluetooth device the level of service discovery, which is one of the following:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`BluetoothDiscoveryModel` 提供了附近可用蓝牙设备的数据模型。您可以在各种基于模型的 Qt Quick 组件中使用它，例如 `GridView`、`ListView`
    和 `PathView`。设置 `discoveryMode` 属性告诉本地蓝牙设备服务发现的级别，这以下是以下之一：'
- en: '`FullServiceDiscovery`: Discovers all services of all devices'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FullServiceDiscovery`: 发现所有设备的所有服务'
- en: '`MinimalServiceDiscovery`: Minimal discovery only includes device and UUID
    information'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MinimalServiceDiscovery`: 最小发现仅包括设备和 UUID 信息'
- en: '`DeviceDiscovery`: Discovers only devices and no services'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DeviceDiscovery`: 仅发现设备，不发现服务'
- en: 'The discovery process will take various amounts of time according to the number
    of services that need to be discovered. To speed up the discovery of a specific
    device, you can set the `discoveryMode` property to `BluetoothDiscoveryModel.DeviceDiscovery`,
    which will allow you to discover the target device address. In the following example,
    I have commented out the device''s target Bluetooth address so it will at least
    show some devices when you run it:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 根据需要发现的服务的数量，发现过程将需要各种不同的时间。为了加快特定设备的发现速度，你可以将 `discoveryMode` 属性设置为 `BluetoothDiscoveryModel.DeviceDiscovery`，这将允许你发现目标设备地址。在下面的示例中，我已经注释掉了设备的蓝牙地址，这样当你运行它时至少会显示一些设备：
- en: '[PRE25]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: To discover all services of all nearby devices, set `discoveryMode` to `BluetoothDiscoveryModel.FullServiceDiscovery`.
    If you set the `remoteAddress` property with a device address, you can target
    that one specific device. You will then have to toggle the `running` property
    off and then on to start a new scan.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 要发现所有附近设备的所有服务，将 `discoveryMode` 设置为 `BluetoothDiscoveryModel.FullServiceDiscovery`。如果你使用设备地址设置了
    `remoteAddress` 属性，你可以针对该特定设备。然后你必须切换 `running` 属性从关闭到打开以启动新的扫描。
- en: 'We have a basic data model, but we need somewhere to display it. Qt Quick has
    a few options for viewing model data:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个基本的数据模型，但我们需要一个地方来显示它。Qt Quick 有几个选项用于查看模型数据：
- en: '`GridView`'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GridView`'
- en: '`ListView`'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ListView`'
- en: '`PathView`'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PathView`'
- en: '`PathView` is best written with Qt Creator QML designer, as you can visually
    adjust its path.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`PathView` 最好使用 Qt Creator QML 设计器编写，因为你可以直观地调整其路径。'
- en: 'Let''s choose a `ListView` for simplicity although I really wanted to use `PathView`:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简单起见，我们选择 `ListView`，尽管我真的很想使用 `PathView`：
- en: '[PRE26]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'It''s not going to show anything without defining `delegate`:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有定义 `delegate`，它将不会显示任何内容：
- en: '[PRE27]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Scanning for devices can take a while to complete sometimes, so I want to add
    a busy indicator. Qt Quick Control 2 has `BusyIndicator`:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描设备有时可能需要一段时间才能完成，所以我想要添加一个忙碌指示器。Qt Quick Control 2 有 `BusyIndicator`：
- en: '[PRE28]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: When you discover remote services, you will get a `BluetoothService` object.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 当你发现远程服务时，你会得到一个 `BluetoothService` 对象。
- en: BluetoothService
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: BluetoothService
- en: When you specify `BluetoothDiscoveryModel.FullServiceDiscovery` for a discovery
    scan and when `BluetoothDiscoveryModel` locates a new service, the `serviceDiscovered`
    signal will be emitted. When we connect to that signal, we will receive the `BluetoothService`
    object in the slot.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 当你指定 `BluetoothDiscoveryModel.FullServiceDiscovery` 作为发现扫描，并且当 `BluetoothDiscoveryModel`
    定位到一个新服务时，`serviceDiscovered` 信号将被发出。当我们连接到该信号时，我们将在槽中接收到 `BluetoothService` 对象。
- en: We can the get the **universal unique identifier** (**uuid**), device and service
    name, service description, and other details. You can use this `BluetoothService`
    to connect to `BluetoothSocket`.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以获取 **通用唯一标识符**（**uuid**）、设备和服务名称、服务描述以及其他详细信息。您可以使用此 `BluetoothService`
    连接到 `BluetoothSocket`。
- en: BluetoothSocket
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: BluetoothSocket
- en: The `BluetoothSocket` component can be used to send and receive `String` messages.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`BluetoothSocket` 组件可用于发送和接收 `String` 消息。'
- en: 'To implement this component, at it''s simplest would be the following:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现此组件，最简单的方法如下：
- en: '[PRE29]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '`BluetoothSocket` does not handle binary data. For that, you will have to use
    the C++ `QBluetoothSocket` class.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`BluetoothSocket` 不处理二进制数据。为此，您将不得不使用 C++ 的 `QBluetoothSocket` 类。'
- en: 'In `BluetoothDiscoveryModel`, handle the `serviceDiscovered` signal. You will
    get a `BluetoothService` object named `service`. You can then set `Socket` to
    use the service with the `setService` method:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `BluetoothDiscoveryModel` 中处理 `serviceDiscovered` 信号。您将获得一个名为 `service` 的
    `BluetoothService` 对象。然后您可以使用 `setService` 方法设置 `Socket` 以使用该服务：
- en: '[PRE30]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'First, you might want to handle the `stateChanged` signals:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您可能想要处理 `stateChanged` 信号：
- en: '[PRE31]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'To connect to the service, write `true` to the `connected` property:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 要连接到服务，将 `true` 写入 `connected` 属性：
- en: '[PRE32]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Once the `socketState` property is `Connected`, you can transmit a message
    or string data using the `stringData` property:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 `socketState` 属性为 `Connected`，您可以使用 `stringData` 属性发送消息或字符串数据：
- en: '[PRE33]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Qt Quick offers a simple way to send string messages over Bluetooth.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Quick 提供了一种简单的方法来通过蓝牙发送字符串消息。
- en: Summary
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: Bluetooth Low Energy is meant to have lower energy requirements for mobile and
    embedded devices. Qt offers both C++ and QML classes and components to use it.
    You should now be able to discover and connect to a Bluetooth Low Energy device.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 低功耗蓝牙旨在为移动和嵌入式设备降低能耗。Qt 提供了 C++ 和 QML 类和组件来使用它。现在您应该能够发现并连接到蓝牙低能耗设备。
- en: Advertising GATT services so users and clients can receive and send data was
    also covered.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 广告 GATT 服务，以便用户和客户端可以接收和发送数据，也已被涵盖。
- en: In the next chapter, we will go over some of the main components for the **Internet
    of Things** (**IoT**), such as sensors and automation communication protocols.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍物联网（**IoT**）的一些主要组件，例如传感器和自动化通信协议。
