["```cpp\n#include <iostream>\n#include <chrono>\n\nusing namespace std::chrono_literals;\n\nint main() {\n  auto a = std::chrono::system_clock::now();\n  auto b = a + 1s;\n  auto c = a + 200ms;\n\n  std::cout << \"a < b ? \" << (a < b ? \"yes\" : \"no\") << std::endl;\n  std::cout << \"a < c ? \" << (a < c ? \"yes\" : \"no\") << std::endl;\n  std::cout << \"b < c ? \" << (b < c ? \"yes\" : \"no\") << std::endl;\n\n  return 0;\n}\n```", "```cpp\ncmake_minimum_required(VERSION 3.5.1)\nproject(chrono)\nadd_executable(chrono chrono.cpp)\n\nset(CMAKE_SYSTEM_NAME Linux)\nset(CMAKE_SYSTEM_PROCESSOR arm)\n\nSET(CMAKE_CXX_FLAGS \"--std=c++14\")\nset(CMAKE_CXX_COMPILER /usr/bin/arm-linux-gnueabi-g++)\n```", "```cpp\nauto a = std::chrono::system_clock::now();\n```", "```cpp\nauto b = a + 1s;\nauto c = a + 200ms;\n```", "```cpp\nusing namespace std::chrono_literals;\n```", "```cpp\nstd::cout << \"a < b ? \" << (a < b ? \"yes\" : \"no\") << std::endl;\nstd::cout << \"a < c ? \" << (a < c ? \"yes\" : \"no\") << std::endl;\nstd::cout << \"b < c ? \" << (b < c ? \"yes\" : \"no\") << std::endl;\n```", "```cpp\n#include <iostream>\n#include <chrono>\n\nint main() {\n  std::chrono::duration<double, std::micro> prev;\n  for (int i = 0; i < 10; i++) {\n    auto start = std::chrono::steady_clock::now();\n    std::cout << i << \": \";\n    auto end = std::chrono::steady_clock::now();\n    std::chrono::duration<double, std::micro> delta = end - start;\n    std::cout << \"output duration is \" << delta.count() <<\" us\";\n    if (i) {\n      auto diff = (delta - prev).count();\n      if (diff >= 0) {\n        std::cout << \", \" << diff << \" us slower\";\n      } else {\n        std::cout << \", \" << -diff << \" us faster\";\n      }\n    }\n    std::cout << std::endl;\n    prev = delta;\n  }\n  return 0;\n}\n```", "```cpp\ncmake_minimum_required(VERSION 3.5.1)\nproject(interval)\nadd_executable(interval interval.cpp)\n\nset(CMAKE_SYSTEM_NAME Linux)\nset(CMAKE_SYSTEM_PROCESSOR arm)\n\nSET(CMAKE_CXX_FLAGS \"--std=c++11\")\nset(CMAKE_CXX_COMPILER /usr/bin/arm-linux-gnueabi-g++)\n```", "```cpp\n auto start = std::chrono::steady_clock::now();\n    std::cout << i << \": \";\n auto end = std::chrono::steady_clock::now();\n```", "```cpp\n std::chrono::duration<double, std::micro> delta = end - start;\n```", "```cpp\n    auto diff = (delta - prev).count();\n```", "```cpp\n#include <iostream>\n#include <chrono>\n#include <thread>\n\nusing namespace std::chrono_literals;\n\nvoid sleep_for(int count, auto delay) {\n  for (int i = 0; i < count; i++) {\n    auto start = std::chrono::system_clock::now();\n    std::this_thread::sleep_for(delay);\n    auto end = std::chrono::system_clock::now();\n    std::chrono::duration<double, std::milli> delta = end - start;\n    std::cout << \"Sleep for: \" << delta.count() << std::endl;\n  }\n}\n```", "```cpp\nvoid sleep_until(int count, \n                 std::chrono::milliseconds delay) {\n  auto wake_up = std::chrono::system_clock::now();\n  for (int i = 0; i < 10; i++) {\n    wake_up += delay;\n    auto start = std::chrono::system_clock::now();\n    std::this_thread::sleep_until(wake_up);\n    auto end = std::chrono::system_clock::now();\n    std::chrono::duration<double, std::milli> delta = end - start;\n    std::cout << \"Sleep until: \" << delta.count() << std::endl;\n  }\n}\n```", "```cpp\nint main() {\n  sleep_for(10, 100ms);\n  sleep_until(10, 100ms);\n  return 0;\n}\n```", "```cpp\ncmake_minimum_required(VERSION 3.5.1)\nproject(delays)\nadd_executable(delays delays.cpp)\n\nset(CMAKE_SYSTEM_NAME Linux)\nset(CMAKE_SYSTEM_PROCESSOR arm)\n\nSET(CMAKE_CXX_FLAGS \"--std=c++14\")\nset(CMAKE_CXX_COMPILER /usr/bin/arm-linux-gnueabi-g++)\n```", "```cpp\n  for (int i = 0; i < count; i++) {\n```", "```cpp\n    auto start = std::chrono::system_clock::now();\n    std::this_thread::sleep_for(delay);\n    auto end = std::chrono::system_clock::now();\n```", "```cpp\nstd::chrono::duration<double, std::milli> delta = end - start;\n```", "```cpp\nauto wake_up = std::chrono::system_clock::now();\n```", "```cpp\nwake_up += delay;\n```", "```cpp\nstd::this_thread::sleep_until(wake_up);\n```", "```cpp\nsleep_for(10, 100ms);\nsleep_until(10, 100ms);\n```", "```cpp\nusing namespace std::chrono_literals;\n```", "```cpp\n#include <iostream>\n#include <chrono>\n#include <atomic>\n#include <mutex>\n#include <thread>\n\nauto touched = std::chrono::steady_clock::now();\nstd::mutex m;\nstd::atomic_bool ready{ false };\n```", "```cpp\nvoid Worker() {\n  for (int i = 0; i < 10; i++) {\n    std::this_thread::sleep_for(\n         std::chrono::milliseconds(100 + (i % 4) * 10));\n    std::cout << \"Step \" << i << std::endl;\n    {\n      std::lock_guard<std::mutex> l(m);\n      touched = std::chrono::steady_clock::now();\n    }\n  }\n  ready = true;\n}\n```", "```cpp\nint main() {\n  std::thread t(Worker);\n  std::chrono::milliseconds threshold(120);\n  while(!ready) {\n    auto now = std::chrono::steady_clock::now();\n    std::chrono::milliseconds delta;\n    {\n      std::lock_guard<std::mutex> l(m);\n      auto delta = now - touched;\n      if (delta > threshold) {\n        std::cout << \"Execution threshold exceeded\" << std::endl;\n      }\n    }\n    std::this_thread::sleep_for(std::chrono::milliseconds(10));\n\n  }\n  t.join();\n  return 0;\n}\n```", "```cpp\ncmake_minimum_required(VERSION 3.5.1)\nproject(monotonic)\nadd_executable(monotonic monotonic.cpp)\ntarget_link_libraries(monotonic pthread)\n\nset(CMAKE_SYSTEM_NAME Linux)\nset(CMAKE_SYSTEM_PROCESSOR arm)\n\nSET(CMAKE_CXX_FLAGS \"--std=c++11\")\nset(CMAKE_CXX_COMPILER /usr/bin/arm-linux-gnueabi-g++)\n\n```", "```cpp\nstd::this_thread::sleep_for(\n         std::chrono::milliseconds(100 + (i % 4) * 10));\n```", "```cpp\n    {\n      std::lock_guard<std::mutex> l(m);\n      touched = std::chrono::steady_clock::now();\n    }\n```", "```cpp\n      std::lock_guard<std::mutex> l(m);\n      auto delta = now - touched;\n```", "```cpp\n      if (delta > threshold) {\n        std::cout << \"Execution threshold exceeded\" << std::endl;\n      }\n```", "```cpp\n    std::this_thread::sleep_for(std::chrono::milliseconds(10));\n```", "```cpp\n#include <iostream>\n#include <chrono>\n\nint main() {\n  auto now = std::chrono::system_clock::now();\n\n  std::time_t ts = std::chrono::system_clock::to_time_t(now);\n  std::cout << \"POSIX timestamp: \" << ts << std::endl;\n\n  auto restored = std::chrono::system_clock::from_time_t(ts);\n\n  std::chrono::duration<double, std::milli> delta = now - restored;\n  std::cout << \"Recovered time delta \" << delta.count() << std::endl;\n  return 0;\n}\n```", "```cpp\ncmake_minimum_required(VERSION 3.5.1)\nproject(timestamps)\nadd_executable(timestamps timestamps.cpp)\n\nset(CMAKE_SYSTEM_NAME Linux)\nset(CMAKE_SYSTEM_PROCESSOR arm)\n\nSET(CMAKE_CXX_FLAGS \"--std=c++11\")\nset(CMAKE_CXX_COMPILER /usr/bin/arm-linux-gnueabi-g++)\n```", "```cpp\nauto now = std::chrono::system_clock::now();\n```", "```cpp\nstd::time_t ts = std::chrono::system_clock::to_time_t(now);\n```", "```cpp\nstd::cout << \"POSIX timestamp: \" << ts << std::endl;\n```", "```cpp\nauto restored = std::chrono::system_clock::from_time_t(ts);\n```", "```cpp\nstd::chrono::duration<double, std::milli> delta = now - restored;\nstd::cout << \"Recovered time delta \" << delta.count() << std::endl;\n```"]