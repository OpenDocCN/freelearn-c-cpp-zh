- en: Chapter 6. XML Parsing Made Easy
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。XML解析变得容易
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Processing XML data using stream reader
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用流读取器处理XML数据
- en: Writing XML data using stream writer
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用流写入器写入XML数据
- en: Processing XML data using the QDomDocument class
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用QDomDocument类处理XML数据
- en: Writing XML data using the QDomDocument class
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用QDomDocument类写入XML数据
- en: Using Google's Geocoding API
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Google的地理编码API
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: XML is the file extension of a type of file format called **Extensible Markup
    Language**, which is used to store information in a structured format. The XML
    format is used extensively for the Web, as well as other applications. HTML, for
    instance, is the file format used for creating web pages and is based upon the
    XML format. Starting from Microsoft Office 2007, Microsoft Office uses the XML-based
    file formats, such as `.docx`, `.xlsx`, `.pptx`, and so on.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: XML是一种名为**可扩展标记语言**的文件格式的文件扩展名，用于以结构化格式存储信息。XML格式广泛用于Web以及其他应用程序。例如，HTML是用于创建网页的文件格式，基于XML格式。从Microsoft
    Office 2007开始，Microsoft Office使用基于XML的文件格式，如`.docx`、`.xlsx`、`.pptx`等。
- en: Processing XML data using stream reader
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用流读取器处理XML数据
- en: In this section, we will learn how to process data taken from an XML file and
    extract it using the stream reader.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何处理从XML文件中提取的数据，并使用流读取器进行提取。
- en: How to do it…
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作方法…
- en: 'Let''s create a simple program that reads and processes XML files by following
    these steps:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下步骤创建一个简单的程序，通过读取和处理XML文件：
- en: As usual, create a new **Qt Widgets Application** project at your desired location.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 像往常一样，在你想要的位置创建一个新的**Qt Widgets应用程序**项目。
- en: 'Next, open up any text editor and create an XML file that looks like the following,
    then save it as `scene.xml`:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开任何文本编辑器，创建一个看起来像下面这样的XML文件，然后将其保存为`scene.xml`：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, go back to Qt Creator and open up `mainwindow.h`. Add the following headers
    at the top of the script, right after `#include <QMainWindow>`:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，返回到Qt Creator并打开`mainwindow.h`。在脚本顶部添加以下头文件，就在`#include <QMainWindow>`之后：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Then, open up `mainwindow.ui` and drag a **Push Button** from the widget box
    on the left-hand side to the UI editor. Change the object name of the button to
    `loadXmlButton` and its display text to **Load XML**:![How to do it…](img/B02820_06_01.jpg)
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，打开`mainwindow.ui`，从左侧的小部件框中拖动一个**Push Button**到UI编辑器中。将按钮的对象名称更改为`loadXmlButton`，显示文本更改为**加载XML**：![操作方法…](img/B02820_06_01.jpg)
- en: After that, right-click on the button and select **Go to slot…**. A window will
    pop up with a list of signals available for selection.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，右键单击按钮，选择**转到槽…**。一个窗口将弹出，显示可供选择的信号列表。
- en: Choose the default `clicked()` option and press the **OK** button. Qt will now
    insert a slot function in your header and source files called `on_loadXmlButton_clicked()`.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择默认的`clicked()`选项，然后按**确定**按钮。Qt现在会在你的头文件和源文件中插入一个名为`on_loadXmlButton_clicked()`的槽函数。
- en: Now, add the following code to the `on_loadXmlButton_clicked()` function:![How
    to do it…](img/B02820_06_02.jpg)
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将以下代码添加到`on_loadXmlButton_clicked()`函数中：![操作方法…](img/B02820_06_02.jpg)
- en: Build and run the project now and you see a window popping up that looks like
    the one you made in Step 4:![How to do it…](img/B02820_06_03.jpg)
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在构建并运行项目，你会看到一个弹出的窗口，看起来就像你在第4步中制作的窗口：![操作方法…](img/B02820_06_03.jpg)
- en: Click on the **Load XML** button and you should see the file selector window
    popping up on screen. Select the XML file you just created in Step 2 and press
    the **Select** button. After that, you should see the following debug text appear
    on the application output window in Qt Creator, which indicates the program has
    successfully loaded the data from the XML file you just selected:![How to do it…](img/B02820_06_04.jpg)
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**加载XML**按钮，你会看到文件选择窗口弹出在屏幕上。选择在第2步中创建的XML文件，然后按**选择**按钮。之后，你应该在Qt Creator的应用程序输出窗口中看到以下调试文本，这表明程序已成功从你刚刚选择的XML文件中加载了数据：![操作方法…](img/B02820_06_04.jpg)
- en: How it works…
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: What we're trying to do in this example is to extract and process data from
    an XML file using the `QXmlStreamReader` class. Imagine you're making a computer
    game and you're using XML files to store the attributes of all the objects in
    your game scene. In this case, the XML format plays an important role in storing
    the data in a structured way, which allows for easy extraction.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们要做的是使用`QXmlStreamReader`类从XML文件中提取和处理数据。想象一下，你正在制作一个电脑游戏，你正在使用XML文件来存储游戏场景中所有对象的属性。在这种情况下，XML格式在以结构化方式存储数据方面发挥着重要作用，这使得数据的提取变得容易。
- en: To begin with, we need to add the header of the class related to XML to our
    source file, which in this case is the `QXmlStreamReader` class. `QXmlStreamReader`
    is built into Qt's core library, so there is no need to include any additional
    modules with it, which also means that it's the recommended class to use for processing
    XML data in Qt.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要在源文件中添加与XML相关的类的头文件，这种情况下是`QXmlStreamReader`类。`QXmlStreamReader`内置在Qt的核心库中，因此不需要使用任何附加模块，这也意味着它是在Qt中处理XML数据的推荐类。
- en: Once we clicked on the **Load XML** button, the `on_loadXmlButton_clicked()`
    slot will be called; this is where we write the code for processing the XML data.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们点击了**加载XML**按钮，`on_loadXmlButton_clicked()`槽将被调用；这是我们编写处理XML数据的代码的地方。
- en: First, we use a file dialog for selecting the XML file we want to process. Then,
    send the selected file's filename, together with its path, to the `QFile` class
    to open and read the text data of the XML file. After that, the file's data is
    sent to the `QXmlStreamReader` class for processing.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用文件对话框来选择要处理的XML文件。然后，将所选文件的文件名和路径发送到`QFile`类中，以打开和读取XML文件的文本数据。之后，文件的数据被发送到`QXmlStreamReader`类进行处理。
- en: We use a while-loop to read through the entire XML file and check every element
    processed by the stream reader. We determine whether the element is a start element
    or an end element. If it's a start element, we will then check the name of the
    element to determine whether the element should contain any data that we need.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用while循环来读取整个XML文件，并检查流读取器处理的每个元素。我们确定元素是开始元素还是结束元素。如果是开始元素，我们将检查元素的名称，以确定元素是否应包含我们需要的任何数据。
- en: Then, we will extract the data, either in the form of an attribute or text.
    An element may have more than one attribute, which is why we must loop through
    all the attributes and extract them one by one.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将提取数据，可以是属性或文本的形式。一个元素可能有多个属性，这就是为什么我们必须循环遍历所有属性并逐个提取它们。
- en: There's more…
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: Besides the web browser, many commercial game engines and interactive applications
    also use the XML format to store information for in-game scenes, meshes, and other
    forms of asset used in their product. This is because the XML format provides
    many benefits over other file formats, such as a compact file size, high flexibility
    and extendibility, easy file recovery, and a relational tree structure that allows
    it to be used for highly efficient and performance-critical applications such
    as search engines, intelligent data mining servers, scientific simulations, and
    so on.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 除了Web浏览器之外，许多商业游戏引擎和交互应用程序也使用XML格式来存储游戏场景、网格和产品中使用的其他形式的资产信息。这是因为XML格式相对于其他文件格式提供了许多优势，如紧凑的文件大小、高灵活性和可扩展性、易于文件恢复，以及允许用于高效和性能关键应用程序的关系树结构，如搜索引擎、智能数据挖掘服务器、科学模拟等。
- en: 'Let''s learn a little bit about the format of an XML file. We will use `scene.xml`,
    which we used in the previous example and looks like this:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简单了解一下XML文件的格式。我们将使用前面示例中使用的`scene.xml`，它看起来像这样：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In XML, a tag is a line of markup text that starts with a `<` symbol and ends
    with a `>` symbol. For example, `<scene>` is a tag called `scene`, `<object>`
    is a tag called `object` and so on. Tags come in three flavors:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在XML中，标签是以`<`符号开始，以`>`符号结束的一行标记文本。例如，`<scene>`是一个名为`scene`的标签，`<object>`是一个名为`object`的标签，依此类推。标签有三种类型：
- en: Start tag, for example `<scene>`
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始标签，例如`<scene>`
- en: End tag, for example `</scene>`
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结束标签，例如`</scene>`
- en: Empty-element tag, for example `<scene />`
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空元素标签，例如`<scene />`
- en: Whenever you write a start tag, it must end with an end tag, otherwise your
    XML data will be invalid. An empty-element tag, however, is a standalone tag and
    does not need an end tag behind it.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 每当你写一个开始标签时，它必须以一个结束标签结束，否则你的XML数据将无效。然而，空元素标签是一个独立的标签，不需要在其后面加上结束标签。
- en: At the top of `scene.xml`, you will see a tag called `xml` which stores the
    version of the XML format and the encoding type, which in this case is XML version
    1.0 and UTF-8 (8-bit Unicode) encoding. This line is called XML declaration and
    it must exist in any of your XML files to validate its format.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在`scene.xml`的顶部，你会看到一个名为`xml`的标签，其中存储了XML格式的版本和编码类型，本例中为XML版本1.0和UTF-8（8位Unicode）编码。这一行称为XML声明，它必须存在于你的任何XML文件中以验证其格式。
- en: After that, you will see tags that have attributes stored in them, for example
    `<object tag="building">`. This means that the `object` tag contains an attribute
    called `tag`, which contains a value, `building`. You can put as many attributes
    as you like in a tag, for example `<object tag="building" color="red" name="LA
    Community Hospital" coordinate="34.0191757,-118.2567239">`. Each of these attributes
    stores distinctive data that can be retrieved easily using Qt.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，你会看到带有属性的标签，例如`<object tag="building">`。这意味着`object`标签包含一个名为`tag`的属性，其中包含一个值`building`。你可以在一个标签中放置尽可能多的属性，例如`<object
    tag="building" color="red" name="LA Community Hospital" coordinate="34.0191757,-118.2567239">`。这些属性中的每一个都存储着可以使用Qt轻松检索的独特数据。
- en: Other than that, you can also store data between the start tag and the end tag,
    for example `<name>Town Hall</name>`. This method, however, is not relevant to
    the empty-element tag, since it is a standalone tag and isn't followed by a close
    tag. Therefore, you can only store attributes in an empty-element tag.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，你还可以在开始标签和结束标签之间存储数据，例如`<name>Town Hall</name>`。然而，这种方法与空元素标签无关，因为它是一个独立的标签，不需要跟随一个关闭标签。因此，你只能在空元素标签中存储属性。
- en: Note
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To learn more about the XML format, visit [http://www.w3schools.com/xml](http://www.w3schools.com/xml).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于XML格式的信息，请访问[http://www.w3schools.com/xml](http://www.w3schools.com/xml)。
- en: Writing XML data using Stream Writer
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用流写入器写入XML数据
- en: Since we have learned how to process data obtained from an XML file in the previous
    recipe, we will move on to learning how to save data to an XML file. We will continue
    with the previous example and add to it.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经学会了如何处理从XML文件中获取的数据，在前面的示例中，我们将继续学习如何将数据保存到XML文件中。我们将继续使用前面的示例并对其进行扩展。
- en: How to do it…
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'We will learn how to save data into an XML file through the following steps:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过以下步骤学习如何将数据保存到XML文件中：
- en: First, add another button to `mainwindow.ui` and set its object name as `saveXmlButton`
    and its label as **Save XML**:![How to do it…](img/B02820_06_05.jpg)
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在`mainwindow.ui`中添加另一个按钮，并将其对象名称设置为`saveXmlButton`，标签设置为**保存XML**：![如何做…](img/B02820_06_05.jpg)
- en: Next, right-click on the button and select **Go to slot…**. A window will pop
    up with a list of signals available for selection. Select the `clicked()` option
    and click **OK**. A signal function called `on_saveXmlButton_clicked()` will now
    be automatically added to both your `mainwindow.h` and `mainwindow.cpp` file by
    Qt:![How to do it…](img/B02820_06_06.jpg)
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，右键单击按钮，选择**转到槽…**。一个窗口将弹出，显示可供选择的信号列表。选择`clicked()`选项，然后单击**确定**。一个名为`on_saveXmlButton_clicked()`的信号函数将被Qt自动添加到你的`mainwindow.h`和`mainwindow.cpp`文件中：![如何做…](img/B02820_06_06.jpg)
- en: 'After that, add the following code to the `on_saveXmlButton_clicked()` function:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`on_saveXmlButton_clicked()`函数中添加以下代码：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Build and run the program and you should see an additional button on the program
    UI:![How to do it…](img/B02820_06_07.jpg)
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建并运行程序，你应该会在程序界面上看到一个额外的按钮：![操作步骤…](img/B02820_06_07.jpg)
- en: Click on the **Save XML** button and a save file dialog will appear on the screen.
    Type the filename you desire and click the **Save** button.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**保存XML**按钮，屏幕上会出现一个保存文件对话框。输入你想要的文件名，然后单击**保存**按钮。
- en: 'Open up the XML file you just saved with any text editor. The content of the
    file should look like this:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用任何文本编辑器打开你刚保存的XML文件。文件的内容应该是这样的：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How it works…
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: The saving process is more or less similar to loading an XML file in the previous
    example. The only difference is instead of using the `QXmlStreamReader` class,
    we switched to using the `QXmlStreamWriter` class instead.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 保存过程与前面示例中加载XML文件的过程基本相似。唯一的区别是，我们不再使用`QXmlStreamReader`类，而是改用`QXmlStreamWriter`类。
- en: We are still using the file dialog and the `QFile` class to save the XML file.
    This time, we have to change the open mode from `QFile::ReadOnly` to `QFile::WriteOnly`
    before passing the `QFile` class to the stream writer.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然使用文件对话框和`QFile`类来保存XML文件。这次，我们必须在将`QFile`类传递给流写入器之前，将打开模式从`QFile::ReadOnly`更改为`QFile::WriteOnly`。
- en: Before we start writing any data to the new XML file, we must set auto formatting
    to `true`, otherwise there will be no spacing; it also adds new lines and indentation
    to the XML file to make it look tidy and easier to read. However, if that is your
    intention (making it harder to read and edit by the user), then you can just ignore
    the `setAutoFormatting()` function.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始向新的XML文件写入任何数据之前，我们必须将自动格式设置为`true`，否则将不会有间距；它还会向XML文件添加新行和缩进，使其看起来整洁且易于阅读。但是，如果这是你的意图（使用户难以阅读和编辑），那么你可以忽略`setAutoFormatting()`函数。
- en: Next, start writing the XML file by calling `writeStartDocument()`, followed
    by all the elements you want to save to the file, and at the end we call the `writeEndDocument()`
    function to stop writing.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过调用`writeStartDocument()`开始编写XML文件，然后写入要保存到文件中的所有元素，最后调用`writeEndDocument()`函数停止写入。
- en: Each element must have a start and end tag in order for the reading process
    to work properly. The attributes of an element will be stored in the start tag,
    while the text data will be stored between the start and end tags.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使读取过程正常工作，每个元素都必须有开始和结束标记。元素的属性将存储在开始标记中，而文本数据将存储在开始和结束标记之间。
- en: If we're writing an element that contains a group of child elements, then we
    must call `writeStartElement()` before writing the child elements. Then, call
    `writeEndElement()` after saving all its child elements to close the group with
    an end tag. The `writetextElement()` function, however, will automatically add
    the end tag for you so you don't have to worry about that one.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们要写入一个包含一组子元素的元素，那么在写入子元素之前必须调用`writeStartElement()`。然后，在保存所有子元素后，调用`writeEndElement()`来关闭该组并添加结束标记。`writetextElement()`函数会自动为您添加结束标记，因此您不必担心这个。
- en: You can call the `writeAttribute()` function to add an attribute to an element.
    There is no limit on how many attributes you can add to a particular element.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以调用`writeAttribute()`函数向元素添加属性。对于特定元素，您可以添加任意数量的属性。
- en: Processing XML data using the QDomDocument class
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`QDomDocument`类处理XML数据
- en: Qt allows multiple ways to parse XML data, including the common method that
    we have covered in the previous examples. This time around, we're going to learn
    how to read data from an XML file using another class, called `QDomDocument`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Qt允许多种方式解析XML数据，包括我们在前面示例中介绍的常见方法。这一次，我们将学习如何使用另一个名为`QDomDocument`的类从XML文件中读取数据。
- en: How to do it…
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤…
- en: 'Processing XML data using the `QDomDocument` class is really simple:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`QDomDocument`类处理XML数据非常简单：
- en: 'First of all, we need to add the XML module to our project by opening the project
    (`.pro`) file and add the text `xml` at the back of `core` and `gui`, like so:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要通过打开项目（`.pro`）文件并在`core`和`gui`后面添加文本`xml`来将XML模块添加到我们的项目中，如下所示：
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Then, just like what we did in the first example in this chapter, create a user
    interface that carries a button that says **Load XML**:![How to do it…](img/B02820_06_08.jpg)
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，就像我们在本章的第一个示例中所做的那样，创建一个用户界面，上面有一个按钮，上面写着**加载XML**：![操作步骤…](img/B02820_06_08.jpg)
- en: After that, right-click on the button, choose **Go to slot…**, and select the
    `clicked()` option. Press the **OK** button and Qt will add a slot function to
    your source code.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，右键单击按钮，选择**转到槽…**，然后选择`clicked()`选项。按下**确定**按钮，Qt将在您的源代码中添加一个槽函数。
- en: 'Go to `mainwindow.h` and add the following headers so that we can make use
    of these classes:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`mainwindow.h`并添加以下头文件，以便我们可以使用这些类：
- en: '[PRE6]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Next, go to `mainwindow.cpp` and insert the following code to the button's `clicked()`
    slot function:![How to do it…](img/B02820_06_09.jpg)
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，转到`mainwindow.cpp`并插入以下代码到按钮的`clicked()`槽函数中：![操作步骤…](img/B02820_06_09.jpg)
- en: Compile and run the program now. Click on the **Load XML** button and select
    the XML file used in the first example. You should see the following output:![How
    to do it…](img/B02820_06_10.jpg)
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在编译并运行程序。单击**加载XML**按钮，然后选择第一个示例中使用的XML文件。你应该会看到以下输出：![操作步骤…](img/B02820_06_10.jpg)
- en: How it works…
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: Compared to `QXmlStreamReader`, the `QDomDocument` class is less straightforward
    when comes to loading or saving XML data. However, `QDomDocument` does it in a
    strict way by making sure each element is linked to its respective parent element
    recursively, like in a tree structure. Unlike `QXmlStreamReader`, `QDomDocument`
    allows us to save data to an element created earlier, in a later timeframe.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 与`QXmlStreamReader`相比，`QDomDocument`类在加载或保存XML数据时不太直接。然而，`QDomDocument`通过确保每个元素都递归地链接到其相应的父元素，就像树结构一样，以严格的方式来完成。与`QXmlStreamReader`不同，`QDomDocument`允许我们在稍后的时间保存数据到之前创建的元素中。
- en: Since `QDomDocument` is not part of the Qt core library, we must add the XML
    module to our project manually. Otherwise, we will not be able to access `QDomDocument`
    and other classes related to it.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`QDomDocument`不是Qt核心库的一部分，我们必须手动将XML模块添加到我们的项目中。否则，我们将无法访问`QDomDocument`和与之相关的其他类。
- en: First, we load the XML file and extract its content to the `QDomDocument` class.
    Then, we get its document element, which acts as the root document, and obtain
    its direct children. We then convert each of the child nodes to `QDomElement`
    and obtain their tag names.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们加载XML文件并提取其内容到`QDomDocument`类。然后，我们获取其文档元素，它充当根文档，并获取其直接子元素。然后，我们将每个子节点转换为`QDomElement`并获取它们的标签名称。
- en: By checking tag names, we are able to determine the type of data we're expecting
    from each element. Since this is the first layer of elements with the tag name
    `object`, we don't expect any data from them; we repeat Step 3 again but this
    time around, we're going to do it on the element with the tag name `object` and
    obtain all its direct children, which means the grandchildren of the document
    element.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 通过检查标签名称，我们能够确定我们从每个元素中期望的数据类型。由于这是具有标签名称“object”的第一层元素，我们不期望从中获取任何数据；我们再次重复第3步，但这一次，我们将在具有标签名称“object”的元素上执行此操作，并获取其所有直接子元素，这意味着文档元素的孙元素。
- en: Again, by checking the tag name, we're able to know what data we're expecting
    from its children elements. If the tag name matches the ones we're expecting (in
    this case, `name`, `position`, `rotation`, `scale`) then we can obtain its data
    by calling `QDomElement::text()`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，通过检查标签名称，我们能够知道我们从其子元素中期望什么数据。如果标签名称与我们期望的匹配（在本例中为`name`、`position`、`rotation`、`scale`），那么我们可以通过调用`QDomElement::text()`获取其数据。
- en: Writing XML data using the QDomDocument class
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`QDomDocument`类编写XML数据
- en: In this example, we will learn how to write data to an XML file using the `QDomDocument`
    class. We will continue from the previous example and just add stuff to it.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将学习如何使用`QDomDocument`类将数据写入XML文件。我们将继续上一个例子，并添加一些内容。
- en: How to do it…
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'To learn how to save data into an XML file using the `QDomDocument` class,
    let''s do the following:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要学习如何使用`QDomDocument`类将数据保存到XML文件中，请执行以下操作：
- en: First of all, add the second button to the UI, called **Save XML**:![How to
    do it…](img/B02820_06_11.jpg)
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，将第二个按钮添加到UI中，名为**保存XML**：![如何做…](img/B02820_06_11.jpg)
- en: Right-click on the **Save XML** button and select **Go to slot…**. Then, pick
    the **clicked()** option and click **OK**. A new `clicked()` slot function will
    now be added to your source files.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击**保存XML**按钮，然后选择**转到槽…**。然后，选择**clicked()**选项并单击**确定**。现在将在源文件中添加一个新的`clicked()`槽函数。
- en: After that, write the following code within the button's `clicked()` slot function:![How
    to do it…](img/B02820_06_12.jpg)![How to do it…](img/B02820_06_15.jpg)
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，在按钮的`clicked()`槽函数中编写以下代码：![如何做…](img/B02820_06_12.jpg)![如何做…](img/B02820_06_15.jpg)
- en: Compile and run the program now and click on the **Save XML** button. Enter
    your desired filename in the save file dialog and click **Save**.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在编译并运行程序，然后单击**保存XML**按钮。在保存文件对话框中输入所需的文件名，然后单击**保存**。
- en: 'Open up the XML file you just saved in Step 4 with any text editor and you
    should see something like this:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用任何文本编辑器打开您在第4步中保存的XML文件，您应该会看到类似于以下内容：
- en: '[PRE7]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works…
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Similar to the previous example, we first initiate the file dialog and declare
    a `QDomDocument` object.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 与上一个例子类似，我们首先初始化文件对话框并声明一个`QDomDocument`对象。
- en: Then, we create the root element by calling `QDomDocument::createElement()`.
    Any element created from the `QDomDocument` will NOT automatically become its
    direct child unless we append the newly created element as its child.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过调用`QDomDocument::createElement()`创建根元素。从`QDomDocument`创建的任何元素都不会自动成为其直接子元素，除非我们将新创建的元素附加为其子元素。
- en: To create the grandchildren of `QDomDocument`, simply append the newly created
    elements to the root element instead. By utilizing the `append()` function, we
    can easily arrange the XML data in a tree structure without wrapping our head
    around it. This, in my opinion, is the advantage of using `QDomDocument` instead
    of `QXmlStreamReader`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建`QDomDocument`的孙元素，只需将新创建的元素附加到根元素即可。通过使用`append()`函数，我们可以轻松地将XML数据排列成树形结构，而无需费心思考。在我看来，这就是使用`QDomDocument`而不是`QXmlStreamReader`的优势。
- en: We can then add attributes to an element by calling `QDomElement::setAttribute()`.
    We can also create a text node by calling `QDomDocument::createTextNode()` and
    appending it to any of the elements in the XML structure.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以通过调用`QDomElement::setAttribute()`为元素添加属性。我们还可以通过调用`QDomDocument::createTextNode()`创建文本节点，并将其附加到XML结构中的任何元素。
- en: After we are done structuring the XML data, we can then output all the data
    in the form of text to the `QTextStream` class and allow it to save the data into
    a file.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们完成构造XML数据之后，我们可以将所有数据以文本形式输出到`QTextStream`类，并允许其将数据保存到文件中。
- en: Using Google's Geocoding API
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用谷歌的地理编码API
- en: In this example, we will learn how to obtain the full address of a specific
    location by using Google's Geocoding API.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将学习如何使用谷歌的地理编码API获取特定位置的完整地址。
- en: How to do it…
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Let''s create a program that utilizes the Geocoding API by following these
    steps:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个程序，通过以下步骤利用地理编码API：
- en: First, create a new **Qt Widgets Application** project.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，创建一个新的**Qt小部件应用程序**项目。
- en: Next, open up `mainwindow.ui` and add a couple of text labels, input fields,
    and a button to make your UI to look similar to this:![How to do it…](img/B02820_06_13.jpg)
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开`mainwindow.ui`并添加一些文本标签、输入字段和一个按钮，使您的UI看起来类似于这样：![如何做…](img/B02820_06_13.jpg)
- en: 'After that, open up your project (`.pro`) file and add the network module to
    your project. You can do that by simply adding the `network` text after `core`
    and `gui`, like so:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，打开您的项目（`.pro`）文件，并将网络模块添加到您的项目中。您只需在`core`和`gui`之后添加`network`文本即可完成此操作，如下所示：
- en: '[PRE8]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then, open up `mainwindow.h` and add the following headers to the source code,
    right after the line `#include <QMainWindow>`:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，打开`mainwindow.h`并在`#include <QMainWindow>`之后的源代码中添加以下头文件：
- en: '[PRE9]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, declare a slot function manually and call it `getAddressFinished()`:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，手动声明一个槽函数并将其命名为`getAddressFinished()`：
- en: '[PRE10]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Right after that, declare a `private` variable called `addressRequest`:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在那之后，声明一个名为`addressRequest`的`private`变量：
- en: '[PRE11]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Once you are done with that, open up `mainwindow.ui` again, right-click on the
    **Get Address** button, and select **Go to slot…**. Then choose the **clicked()**
    option and press **OK**. A slot function will now be added to both the `mainwindow.h`
    and `mainwindow.cpp` source files.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，再次打开`mainwindow.ui`，右键单击**获取地址**按钮，然后选择**转到槽…**。然后选择**clicked()**选项并按**确定**。槽函数现在将添加到`mainwindow.h`和`mainwindow.cpp`源文件中。
- en: 'Now, open up `mainwindow.cpp` and add the following code to the class constructor:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开`mainwindow.cpp`并将以下代码添加到类构造函数中：
- en: '[PRE12]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then, we will add the following code to the `getAddressFinished()` slot function
    we declared manually just now:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将以下代码添加到我们刚刚手动声明的`getAddressFinished()`槽函数中：
- en: '[PRE13]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Finally, add the following code to the `clicked()` slot function created by
    Qt:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将以下代码添加到Qt创建的`clicked()`槽函数中：
- en: '[PRE14]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Build and run the program now and you should be able to obtain the address by
    inserting the longitude and latitude values and clicking the **Get Address** button:![How
    to do it…](img/B02820_06_14.jpg)
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在构建并运行程序，您应该能够通过插入经度和纬度值并单击**获取地址**按钮来获取地址：![如何做…](img/B02820_06_14.jpg)
- en: 'Let''s try with longitude `-73.9780838` and latitude `40.6712957`. Click the
    **Get Address** button and you will see the following result in the application
    output window:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们尝试使用经度`-73.9780838`和纬度`40.6712957`。单击**获取地址**按钮，您将在应用程序输出窗口中看到以下结果：
- en: '[PRE15]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How it works…
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: I won't be able to tell you exactly how Google obtains the address from its
    backend system, but I can teach you how to request the data from Google by using
    `QNetworkRequest`. Basically, all you need to do is to set the URL of the network
    request to the URL I used in the previous source code and append both the latitude
    and longitude information to the URL. After that, all we can do is wait for the
    response from the Google API server.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我无法告诉您谷歌如何从其后端系统获取地址，但我可以教您如何使用`QNetworkRequest`从谷歌请求数据。基本上，您只需要将网络请求的URL设置为我在先前源代码中使用的URL，并将纬度和经度信息附加到URL。之后，我们只能等待来自谷歌API服务器的响应。
- en: 'Do notice that we need to specify XML as the desired format when sending the
    request to Google; otherwise, it may return the results in JSON format instead.
    This can be done by adding the `xml` keyword within the network request URL, as
    highlighted here:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当向谷歌发送请求时，我们需要指定XML作为期望的格式；否则，它可能会返回JSON格式的结果。这可以通过在网络请求URL中添加`xml`关键字来实现，如下所示：
- en: '[PRE16]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: When the program the received the response from Google, the `getAddressFinished()`
    slot function will be called and we will be able to obtain the data sent by Google
    through `QNetworkReply`.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序从谷歌接收到响应时，将调用`getAddressFinished()`槽函数，我们将能够通过`QNetworkReply`获取谷歌发送的数据。
- en: Google usually replies with a long text in XML format, which contains a ton
    of data we don't need. We used `QXmlStreamReader` to parse the data because in
    this case we don't have to care about the parent-child relationship of the XML
    structure.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌通常会以XML格式回复一个长文本，其中包含大量我们不需要的数据。我们使用`QXmlStreamReader`来解析数据，因为在这种情况下，我们不必关心XML结构的父子关系。
- en: All we need is the text stored in the `formatted_address` element in the XML
    data. Since there is more than one element by the name of `formatted_address`,
    we just need to find the first one and ignore the rest.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要在XML数据中存储的`formatted_address`元素中的文本。由于有多个名为`formatted_address`的元素，我们只需要找到第一个并忽略其余的。
- en: You can also do the reverse by providing an address to Google and obtain the
    location's coordinate from its network response.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过向谷歌提供地址并从其网络响应中获取位置坐标来进行反向操作。
- en: There's more…
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: Google's Geocoding API is part of the Google Maps APIs Web Services, which provides
    geographical data for your map applications. Besides the Geocoding API, you can
    also use their Location API, Geolocation API, Time Zone API, and so on to achieve
    your desired results.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌的地理编码API是谷歌地图API Web服务的一部分，为您的地图应用程序提供地理数据。除了地理编码API，您还可以使用他们的位置API、地理位置API、时区API等来实现您想要的结果。
- en: Note
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more information regarding the Google Maps APIs Web Services, visit this
    link: [https://developers.google.com/maps/web-services](https://developers.google.com/maps/web-services)'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 有关谷歌地图API Web服务的更多信息，请访问此链接：[https://developers.google.com/maps/web-services](https://developers.google.com/maps/web-services)
