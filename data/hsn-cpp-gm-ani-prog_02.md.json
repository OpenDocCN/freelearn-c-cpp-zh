["```cpp\n#ifndef _H_VEC3_\n#define _H_VEC3_\nstruct vec3 {\n\u00a0\u00a0\u00a0\u00a0union {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0float x;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0float y;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0float z;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0float v[3];\n\u00a0\u00a0\u00a0\u00a0};\n\u00a0\u00a0\u00a0\u00a0inline vec3() : x(0.0f), y(0.0f), z(0.0f) { }\n\u00a0\u00a0\u00a0\u00a0inline vec3(float _x, float _y, float _z) :\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0x(_x), y(_y), z(_z) { }\n\u00a0\u00a0\u00a0\u00a0inline vec3(float *fv) :\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0x(fv[0]), y(fv[1]), z(fv[2]) { }\n};\n#endif \n```", "```cpp\n#define VEC3_EPSILON 0.000001f\n```", "```cpp\nvec3 operator+(const vec3 &l, const vec3 &r) {\n\u00a0\u00a0\u00a0\u00a0return vec3(l.x + r.x, l.y + r.y, l.z + r.z);\n}\n```", "```cpp\nvec3 operator-(const vec3 &l, const vec3 &r) {\n\u00a0\u00a0\u00a0\u00a0return vec3(l.x - r.x, l.y - r.y, l.z - r.z);\n}\n```", "```cpp\nvec3 operator*(const vec3 &v, float f) {\n\u00a0\u00a0\u00a0\u00a0return vec3(v.x * f, v.y * f, v.z * f);\n}\n```", "```cpp\nvec3 operator*(const vec3 &l, const vec3 &r) {\n\u00a0\u00a0\u00a0\u00a0return vec3(l.x * r.x, l.y * r.y, l.z * r.z);\n}\n```", "```cpp\nfloat dot(const vec3 &l, const vec3 &r) {\n\u00a0\u00a0\u00a0\u00a0return l.x * r.x + l.y * r.y + l.z * r.z;\n}\n```", "```cpp\n    float lenSq(const vec3& v) {\n    \u00a0\u00a0\u00a0\u00a0return v.x * v.x + v.y * v.y + v.z * v.z;\n    }\n    ```", "```cpp\n    float len(const vec3 &v) {\n    \u00a0\u00a0\u00a0\u00a0float lenSq = v.x * v.x + v.y * v.y + v.z * v.z;\n    \u00a0\u00a0\u00a0\u00a0if (lenSq < VEC3_EPSILON) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 0.0f;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0return sqrtf(lenSq);\n    }\n    ```", "```cpp\n    void normalize(vec3 &v) {\n    \u00a0\u00a0\u00a0\u00a0float lenSq = v.x * v.x + v.y * v.y + v.z * v.z;\n    \u00a0\u00a0\u00a0\u00a0if (lenSq < VEC3_EPSILON) { return; }\n    \u00a0\u00a0\u00a0\u00a0float invLen = 1.0f / sqrtf(lenSq);\u00a0\u00a0\u00a0\u00a0\n    \u00a0\u00a0\u00a0\u00a0v.x *= invLen;\n    \u00a0\u00a0\u00a0\u00a0v.y *= invLen;\n    \u00a0\u00a0\u00a0\u00a0v.z *= invLen;\n    }\n    ```", "```cpp\n    vec3 normalized(const vec3 &v) {\n    \u00a0\u00a0\u00a0\u00a0float lenSq = v.x * v.x + v.y * v.y + v.z * v.z;\n    \u00a0\u00a0\u00a0\u00a0if (lenSq < VEC3_EPSILON) { return v; }\n    \u00a0\u00a0\u00a0\u00a0float invLen = 1.0f / sqrtf(lenSq);\n    \u00a0\u00a0\u00a0\u00a0return vec3(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0v.x * invLen,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0v.y * invLen,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0v.z * invLen\n    \u00a0\u00a0\u00a0\u00a0);\n    }\n    ```", "```cpp\nfloat angle(const vec3 &l, const vec3 &r) {\n\u00a0\u00a0\u00a0\u00a0float sqMagL = l.x * l.x + l.y * l.y + l.z * l.z;\n\u00a0\u00a0\u00a0\u00a0float sqMagR = r.x * r.x + r.y * r.y + r.z * r.z;\n\u00a0\u00a0\u00a0\u00a0if (sqMagL<VEC3_EPSILON || sqMagR<VEC3_EPSILON) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 0.0f;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0float dot = l.x * r.x + l.y * r.y + l.z * r.z;\n\u00a0\u00a0\u00a0\u00a0float len = sqrtf(sqMagL) * sqrtf(sqMagR);\n\u00a0\u00a0\u00a0\u00a0return acosf(dot / len);\n}\n```", "```cpp\n    vec3 project(const vec3 &a, const vec3 &b) {\n    \u00a0\u00a0\u00a0\u00a0float magBSq = len(b);\n    \u00a0\u00a0\u00a0\u00a0if (magBSq < VEC3_EPSILON) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return vec3();\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0float scale = dot(a, b) / magBSq;\n    \u00a0\u00a0\u00a0\u00a0return b * scale;\n    }\n    ```", "```cpp\n    vec3 reject(const vec3 &a, const vec3 &b) {\n    \u00a0\u00a0\u00a0\u00a0vec3 projection = project(a, b);\n    \u00a0\u00a0\u00a0\u00a0return a - projection;\n    }\n    ```", "```cpp\nvec3 reflect(const vec3 &a, const vec3 &b) {\n\u00a0\u00a0\u00a0\u00a0float magBSq = len(b);\n\u00a0\u00a0\u00a0\u00a0if (magBSq < VEC3_EPSILON) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return vec3();\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0float scale = dot(a, b) / magBSq;\n\u00a0\u00a0\u00a0\u00a0vec3 proj2 = b * (scale * 2);\n\u00a0\u00a0\u00a0\u00a0return a - proj2;\n}\n```", "```cpp\nvec3 cross(const vec3 &l, const vec3 &r) {\n\u00a0\u00a0\u00a0\u00a0return vec3(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0l.y * r.z - l.z * r.y,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0l.z * r.x - l.x * r.z,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0l.x * r.y - l.y * r.x\n\u00a0\u00a0\u00a0\u00a0);\n}\n```", "```cpp\nvec3 lerp(const vec3 &s, const vec3 &e, float t) {\n\u00a0\u00a0\u00a0\u00a0return vec3(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0s.x + (e.x - s.x) * t,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0s.y + (e.y - s.y) * t,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0s.z + (e.z - s.z) * t\n\u00a0\u00a0\u00a0\u00a0);\n}\n```", "```cpp\nvec3 slerp(const vec3 &s, const vec3 &e, float t) {\n\u00a0\u00a0\u00a0\u00a0if (t < 0.01f) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return lerp(s, e, t);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0vec3 from = normalized(s);\n\u00a0\u00a0\u00a0\u00a0vec3 to = normalized(e);\n\u00a0\u00a0\u00a0\u00a0float theta = angle(from, to);\n\u00a0\u00a0\u00a0\u00a0float sin_theta = sinf(theta);\n\u00a0\u00a0\u00a0\u00a0float a = sinf((1.0f - t) * theta) / sin_theta;\n\u00a0\u00a0\u00a0\u00a0float b = sinf(t * theta) / sin_theta;\n\u00a0\u00a0\u00a0\u00a0return from * a + to * b;\n}\n```", "```cpp\nvec3 nlerp(const vec3 &s, const vec3 &e, float t) {\n\u00a0\u00a0\u00a0\u00a0vec3 linear(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0s.x + (e.x - s.x) * t,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0s.y + (e.y - s.y) * t,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0s.z + (e.z - s.z) * t\n\u00a0\u00a0\u00a0\u00a0);\n\u00a0\u00a0\u00a0\u00a0return normalized(linear);\n}\n```", "```cpp\nbool operator==(const vec3 &l, const vec3 &r) {\n\u00a0\u00a0\u00a0\u00a0vec3 diff(l - r);\n\u00a0\u00a0\u00a0\u00a0return lenSq(diff) < VEC3_EPSILON;\n}\nbool operator!=(const vec3 &l, const vec3 &r) {\n\u00a0\u00a0\u00a0\u00a0return !(l == r);\n}\n```", "```cpp\n    template<typename T>\n    struct TVec2 {\n    \u00a0\u00a0\u00a0\u00a0union {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0T x;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0T y;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0T v[2];\n    \u00a0\u00a0\u00a0\u00a0};\n    \u00a0\u00a0\u00a0\u00a0inline TVec2() : x(T(0)), y(T(0)) { }\n    \u00a0\u00a0\u00a0\u00a0inline TVec2(T _x, T _y) :\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0x(_x), y(_y) { }\n    \u00a0\u00a0\u00a0\u00a0inline TVec2(T* fv) :\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0x(fv[0]), y(fv[1]) { }\n    };\n    typedef TVec2<float> vec2;\n    typedef TVec2<int> ivec2;\n    ```", "```cpp\n    template<typename T>\n    struct TVec4 {\n    \u00a0\u00a0\u00a0\u00a0union {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0T x;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0T y;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0T z;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0T w;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0T v[4];\n    \u00a0\u00a0\u00a0\u00a0};\n    \u00a0\u00a0\u00a0\u00a0inline TVec4<T>(): x((T)0),y((T)0),z((T)0),w((T)0){}\n    \u00a0\u00a0\u00a0\u00a0inline TVec4<T>(T _x, T _y, T _z, T _w) :\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0x(_x), y(_y), z(_z), w(_w) { }\n    \u00a0\u00a0\u00a0\u00a0inline TVec4<T>(T* fv) :\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0x(fv[0]), y(fv[ ]), z(fv[2]), w(fv[3]) { }\n    };\n    typedef TVec4<float> vec4;\n    typedef TVec4<int> ivec4;\n    typedef TVec4<unsigned int> uivec4;\n    ```"]