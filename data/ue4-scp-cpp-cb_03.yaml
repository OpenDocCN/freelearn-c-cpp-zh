- en: Chapter 3. Memory Management and Smart Pointers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。内存管理和智能指针
- en: 'In this chapter, we are going to cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Unmanaged memory – using `malloc()`/`free()`
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未管理内存-使用`malloc()`/`free()`
- en: Unmanaged memory – using `new`/`delete`
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未管理内存-使用`new`/`delete`
- en: Managed memory – using `NewObject< >` and `ConstructObject< >`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理内存-使用`NewObject< >`和`ConstructObject< >`
- en: Managed memory – deallocating memory
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理内存-释放内存
- en: Managed memory – smart pointers (`TSharedPtr`, `TWeakPtr`, `TAutoPtr`) to track
    an object
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理内存-智能指针（`TSharedPtr`，`TWeakPtr`，`TAutoPtr`）来跟踪对象
- en: Using `TScopedPointer` to track an object
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`TScopedPointer`来跟踪对象
- en: Unreal's garbage collection system and `UPROPERTY()`
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚幻引擎的垃圾收集系统和`UPROPERTY()`
- en: Forcing garbage collection
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强制垃圾收集
- en: Breakpoints and stepping through code
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 断点和逐步执行代码
- en: Finding bugs and using call stacks
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找错误并使用调用堆栈
- en: Using the Profiler to identify hot spots
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用分析器识别热点
- en: Introduction
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Memory management is always one of the most important things to get right in
    your computer program to ensure stability and good, bug-free operation of your
    code. A dangling pointer (pointer referring to something that has been removed
    from memory) is an example of a bug that is hard to track if it occurs.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 内存管理始终是计算机程序中最重要的事情之一，以确保代码的稳定性和良好的无错误运行。悬空指针（指向已从内存中删除的内容的指针）是一个很难跟踪的错误示例。
- en: '![Introduction](img/00064.jpeg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![介绍](img/00064.jpeg)'
- en: In any computer program, memory management is extremely important. UE4's `UObject`
    reference counting system is the default way that memory is managed for Actors
    and `UObject` derivatives. This is the default way that your memory will be managed
    within your UE4 program.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何计算机程序中，内存管理都非常重要。UE4的`UObject`引用计数系统是Actor和`UObject`衍生类的默认内存管理方式。这是在UE4程序中管理内存的默认方式。
- en: If you write custom C++ classes of your own, which do not derive from `UObject`,
    you may find the `TSharedPtr` / `TWeakPtr` reference counted classes useful. These
    classes provide reference counting and automatic deletion for 0 reference objects.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您编写自己的自定义C++类，这些类不是从`UObject`派生的，您可能会发现`TSharedPtr`/`TWeakPtr`引用计数类很有用。这些类为0引用对象提供引用计数和自动删除。
- en: This chapter provides recipes for memory management within UE4.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本章提供了UE4内存管理的示例。
- en: Unmanaged memory – using malloc( )/free( )
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 未管理内存-使用malloc()/free()
- en: The basic way to allocate memory for your computer program in C (and C++) is
    by using `malloc()`. `malloc()` designates a block of the computer system's memory
    for your program's use. Once your program is using a segment of memory, no other
    program can use or access that segment of memory. An attempt to access a segment
    of memory not allocated to your program will generate a "segmentation fault",
    and represents an illegal operation on most systems.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在C（和C++）中为计算机程序分配内存的基本方法是使用`malloc()`。`malloc()`为程序的使用指定了计算机系统的内存块。一旦程序使用了一段内存，其他程序就无法使用或访问该段内存。尝试访问未分配给程序的内存段将生成“分段错误”，并在大多数系统上表示非法操作。
- en: How to do it...
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s look at an example code that allocates a pointer variable `i`, then
    assigns memory to it using `malloc()`. We allocate a single integer behind an
    `int*` pointer. After allocation, we store a value inside `int`, using the dereferencing
    operator `*`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个示例代码，它分配了一个指针变量`i`，然后使用`malloc()`为其分配内存。我们在`int`后面的`int*`指针后面分配了一个整数。分配后，我们使用解引用运算符`*`在`int`内存中存储一个值：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How it works…
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The preceding code does what is shown in the diagram that follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码执行了后面图中所示的操作：
- en: The first line creates an `int*` pointer variable `i`, which starts as a dangling
    pointer referring to a segment of memory that probably won't be valid for your
    program to reference.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一行创建了一个`int*`指针变量`i`，它起初是一个悬空指针，指向一个内存段，这个内存段可能对程序来说是无效的。
- en: In the second diagram, we use a `malloc()` call to initialize the variable `i`
    to point to a segment of memory precisely the size of an `int` variable, which
    will be valid for your program to refer to.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第二个图中，我们使用`malloc()`调用来初始化变量`i`，使其指向一个大小恰好为`int`变量的内存段，这对于程序来说是有效的。
- en: We then initialize the contents of that memory segment to the value `0` using
    the command `*i = 0;`.![How it works…](img/00065.jpeg)
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们使用命令`*i = 0;`初始化该内存段的内容为值`0`。![它是如何工作的...](img/00065.jpeg)
- en: Tip
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note the difference between assignment to a pointer variable (`i =`), which
    tells the pointer what memory address to refer to, and assignment to what is inside
    the memory address that the pointer variable refers to (`*i =`).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 注意指针变量的赋值（`i =`）与赋值到指针变量引用的内存地址中的内容（`*i =`）之间的区别。
- en: When the memory in the variable `i` needs to be released back to the system,
    we do so using a `free()` deallocation call, as shown in the following diagram.
    `i` is then assigned to point to memory address `0`, (diagrammed by the **electrical
    grounding** symbol reference ![How it works…](img/00066.jpeg)).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当变量`i`中的内存需要释放回系统时，我们使用`free()`释放调用，如下图所示。然后将`i`分配为指向内存地址`0`（由**电气接地**符号引用![它是如何工作的...](img/00066.jpeg)）。
- en: '![How it works…](img/00067.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/00067.jpeg)'
- en: The reason we set the variable `i` to point to the `NULL` reference is to make
    it clear that the variable `i` does not refer to a valid segment of memory.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将变量`i`设置为指向`NULL`引用的原因是为了明确表明变量`i`不引用有效的内存段。
- en: Unmanaged memory – using new/delete
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 未管理内存-使用new/delete
- en: The `new` operator is almost the same as a `malloc` call, except that it invokes
    a constructor call on the object created immediately after the memory is allocated.
    Objects allocated with the operator `new` should be deallocated with the operator
    `delete` (and not `free()`).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`new`运算符几乎与`malloc`调用相同，只是它在分配内存后立即调用对象的构造函数。使用`new`分配的对象应该使用`delete`运算符（而不是`free()`）进行释放。'
- en: Getting ready
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In C++, use of `malloc()` was replaced, as best practice, by use of the operator
    `new`. The main difference between the functionality of `malloc()` and the operator
    `new` is that `new` will call the constructor on object types after memory allocation.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在C++中，使用`malloc()`被最佳实践替换为使用`new`运算符。`malloc()`和`new`运算符功能的主要区别在于，`new`在内存分配后会调用对象类型的构造函数。
- en: '| `malloc` | `new` |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `malloc` | `new` |'
- en: '| --- | --- |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Allocates a zone of contiguous space for use. | Allocates a zone of contiguous
    space for use.Calls constructor as object type used as an argument to the operator
    `new`. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 为使用分配一块连续空间。 | 为使用分配一块连续空间。调用构造函数作为`new`运算符的参数使用的对象类型。 |'
- en: How to do it...
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In the following code, we declare a simple `Object` class, then construct an
    instance of it using the operator `new`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，我们声明了一个简单的`Object`类，然后使用`new`运算符构造了一个实例：
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works…
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The operator `new` works by allocating space just as `malloc()` does. If the
    type used with the operator `new` is an object type, the constructor is invoked
    automatically with the use of the keyword `new`, whereas the constructor is never
    invoked with the use of `malloc()`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`new`运算符的工作方式与`malloc()`一样，都是分配空间。如果与`new`运算符一起使用的类型是对象类型，则构造函数会自动使用关键字`new`调用，而使用`malloc()`则永远不会调用构造函数。'
- en: There's more…
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: You should avoid using naked heap allocations with the keyword `new` (or `malloc`
    for that matter). Managed memory is preferred within the engine so that all memory
    use is tracked and clean. If you allocate a `UObject` derivative, you definitely
    need to use `NewObject< >` or `ConstructObject< >` (outlined in subsequent recipes).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 应该避免使用关键字`new`（或`malloc`）进行裸堆分配。引擎内部首选使用托管内存，以便跟踪和清理所有内存使用。如果分配了`UObject`派生类，绝对需要使用`NewObject<
    >`或`ConstructObject< >`（在后续的示例中有详细介绍）。
- en: Managed memory – using NewObject< > and ConstructObject< >
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 托管内存-使用NewObject< >和ConstructObject< >
- en: 'Managed memory refers to memory that is allocated and deallocated by some programmed
    subsystem above the `new`, `delete`, `malloc,` and `free` calls in C++. These
    subsystems are commonly created so that the programmer does not forget to release
    memory after allocating it. Unreleased, occupied, but unused memory chunks are
    called memory leaks. For example:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 托管内存是指由C++中的`new`、`delete`、`malloc`和`free`调用之上的某个编程子系统分配和释放的内存。通常创建这些子系统是为了程序员在分配内存后不会忘记释放内存。未释放的、占用但未使用的内存块称为内存泄漏。例如：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the preceding example, the memory allocated is not referenceable by any variable!
    So you can neither use the allocated memory after the `for` loop, nor can you
    free it. If your program allocates all available system memory, then what will
    happen is that your system will run out of memory entirely, and your OS will flag
    your program and close it for using up too much memory.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，分配的内存没有被任何变量引用！因此，您既不能在`for`循环之后使用分配的内存，也不能释放它。如果您的程序分配了所有可用的系统内存，那么会发生的是您的系统将完全耗尽内存，您的操作系统将标记您的程序并关闭它，因为它使用了太多内存。
- en: Memory management prevents forgetting to release memory. In memory-managed programs,
    it is commonly remembered by objects that are dynamically allocated the number
    of pointers referencing the object. When there are zero pointers referencing the
    object, it is either automatically deleted immediately, or flagged for deletion
    on the next run of the **garbage collector**.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 内存管理可以防止忘记释放内存。在内存管理程序中，通常由动态分配的对象记住引用该对象的指针数量。当引用该对象的指针数量为零时，它要么立即被自动删除，要么在下一次运行**垃圾回收器**时被标记为删除。
- en: Use of managed memory is automatic within UE4\. Any allocation of an object
    to be used within the engine must be done using `NewObject< >()` or `SpawnActor<
    >()`. The release of objects is done by removing the reference to the object,
    then occasionally calling the garbage cleanup routine (listed further in this
    chapter).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在UE4中，使用托管内存是自动的。必须使用`NewObject< >()`或`SpawnActor< >()`来分配引擎内部使用的对象。释放对象是通过删除对对象的引用，然后偶尔调用垃圾清理例程（在本章后面列出）来完成的。
- en: Getting ready
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: When you need to construct any `UObject` derivative that is not a derivative
    of the `Actor` class, you should always use `NewObject< >`. `SpawnActor< >` should
    be used only when the object is an `Actor` or its derivative.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当您需要构造任何不是`Actor`类的`UObject`派生类时，您应该始终使用`NewObject< >`。只有当对象是`Actor`或其派生类时，才应该使用`SpawnActor<
    >`。
- en: How to do it...
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Say we are trying to construct an object of type `UAction`, which itself derives
    from `UObject`. For example, the following class:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们要构造一个类型为`UAction`的对象，它本身是从`UObject`派生的。例如，以下类：
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To construct an instance of the `UAction` class, we''d do the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要构造`UAction`类的实例，我们可以这样做：
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How it works…
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Here, `UAction::StaticClass()` gets you a base `UClass*` for the `UAction` object.
    The first argument to `NewObject< >` is `GetTransientPackage()`, which simply
    retrieves the transient package for the game. A package (`UPackage`) in UE4 is
    just a data conglomerate. Here we use the **Transient Package** to store our heap-allocated
    data. You could also use `UPROPERTY() TSubclassOf<AActor>` from Blueprints to
    select a `UClass` instance.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`UAction::StaticClass()`可以获取`UAction`对象的基本`UClass*`。`NewObject< >`的第一个参数是`GetTransientPackage()`，它只是为游戏检索瞬态包。在UE4中，包（`UPackage`）只是一个数据集合。在这里，我们使用**瞬态包**来存储我们的堆分配数据。您还可以使用蓝图中的`UPROPERTY()
    TSubclassOf<AActor>`来选择`UClass`实例。
- en: The third argument (optional) is a combination of parameters that indicate how
    `UObject` is treated by the memory management system.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个参数（可选）是一组参数的组合，指示内存管理系统如何处理`UObject`。
- en: There's more…
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There is another function very similar to `NewObject< >` called `ConstructObject<
    >`. `ConstructObject< >` provides more parameters in construction, and you may
    find it useful if you need to specify these parameters. Otherwise, `NewObject`
    works just fine.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个与`NewObject<>`非常相似的函数叫做`ConstructObject<>`。`ConstructObject<>`在构造时提供了更多的参数，如果您需要指定这些参数，您可能会发现它很有用。否则，`NewObject`也可以正常工作。
- en: See also
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: You may also want to see the documentation for `RF_*` flags at [https://docs.unrealengine.com/latest/INT/Programming/UnrealArchitecture/Objects/Creation/index.html#objectflags](https://docs.unrealengine.com/latest/INT/Programming/UnrealArchitecture/Objects/Creation/index.html#objectflags)
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可能还想查看`RF_*`标志的文档，网址为[https://docs.unrealengine.com/latest/INT/Programming/UnrealArchitecture/Objects/Creation/index.html#objectflags](https://docs.unrealengine.com/latest/INT/Programming/UnrealArchitecture/Objects/Creation/index.html#objectflags)
- en: Managed memory – deallocating memory
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 托管内存-释放内存
- en: '`UObject`s are reference-counted and garbage-collected when there are no more
    references to the `UObject` instance. Memory allocated on a `UObject` class derivative
    using `ConstructObject<>` or `NewObject< >` can also be deallocated manually (before
    the reference count drops to 0) by calling the `UObject::ConditionalBeginDestroy()`
    member function.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当没有对`UObject`实例的引用时，`UObject`是引用计数和垃圾回收的。使用`ConstructObject<>`或`NewObject<>`在`UObject`类派生类上分配的内存也可以通过调用`UObject::ConditionalBeginDestroy()`成员函数手动释放（在引用计数降至0之前）。
- en: Getting ready
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You'd only do this if you were sure you no longer wanted `UObject` or the `UObject`
    class derivative instance in memory. Use the `ConditionalBeginDestroy()` function
    to release memory.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在您确定不再需要`UObject`或`UObject`类派生实例时才会这样做。使用`ConditionalBeginDestroy()`函数释放内存。
- en: How to do it...
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'The following code demonstrates the deallocation of a `UObject class`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码演示了`UObject类`的释放：
- en: '[PRE5]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works…
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The command `ConditionalBeginDestroy()` begins the deallocation process, calling
    the `BeginDestroy()` and `FinishDestroy()` overrideable functions.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 命令`ConditionalBeginDestroy()`开始了释放过程，调用了`BeginDestroy()`和`FinishDestroy()`可重写函数。
- en: There's more…
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: Be careful not to call `UObject::ConditionalBeginDestroy()` on any object still
    being referenced in memory by other objects' pointers.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 注意不要在其他对象的指针仍在内存中引用的对象上调用`UObject::ConditionalBeginDestroy()`。
- en: Managed memory – smart pointers (TSharedPtr, TWeakPtr, TAutoPtr) to track an
    object
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 托管内存-智能指针（TSharedPtr、TWeakPtr、TAutoPtr）跟踪对象
- en: When people are afraid that they'll forget the `delete` call for standard C++
    objects they create, they often use smart pointers to prevent memory leaks. `TSharedPtr`
    is a very useful C++ class that will make any custom C++ object reference-counted—with
    the exception of `UObject` derivatives, which are already reference-counted. An
    alternate class `TWeakPtr` is also provided for pointing to a reference-counted
    object with the strange property of being unable to prevent deletion (hence, "weak").
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当人们担心会忘记为他们创建的标准C++对象调用`delete`时，他们经常使用智能指针来防止内存泄漏。`TSharedPtr`是一个非常有用的C++类，它将使任何自定义C++对象引用计数——除了`UObject`派生类，它们已经是引用计数的。还提供了一个名为`TWeakPtr`的替代类，用于指向引用计数对象，具有无法阻止删除的奇怪属性（因此称为“弱”）。
- en: '![Managed memory – smart pointers (TSharedPtr, TWeakPtr, TAutoPtr) to track
    an object](img/00068.jpeg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![托管内存-智能指针（TSharedPtr、TWeakPtr、TAutoPtr）跟踪对象](img/00068.jpeg)'
- en: Tip
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '`UObject` and it''s derivative classes (anything created with `NewObject` or
    `ConstructObject`) cannot use `TSharedPtr`!'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`UObject`及其派生类（使用`NewObject`或`ConstructObject`创建的任何内容）不能使用`TSharedPtr`！'
- en: Getting ready
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'If you don''t want to use raw pointers and manually track deletes into your
    C++ code that does not use `UObject` derivatives, then that code is a good candidate
    for using smart pointers such as `TSharedPtr`, `TSharedRef`,and the like. When
    you use a dynamically allocated object (created using the keyword `new`), you
    can wrap it up in a reference-counted pointer so that deallocation happens automatically.
    The different types of smart pointers determine the smart pointer behavior and
    deletion call time. They are as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想在不使用`UObject`派生类的C++代码中使用原始指针并手动跟踪删除，那么该代码是使用智能指针（如`TSharedPtr`、`TSharedRef`等）的良好选择。当您使用动态分配的对象（使用关键字`new`创建）时，您可以将其包装在一个引用计数指针中，以便自动发生释放。不同类型的智能指针确定智能指针的行为和删除调用时间。它们如下：
- en: '`TSharedPtr`: A thread-safe (provided you supplied `ESPMode::ThreadSafe` as
    the second argument to the template) reference-counted pointer type that indicates
    a shared object. The shared object will be deallocated when there are no more
    references to it.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TSharedPtr`：线程安全（如果您将`ESPMode::ThreadSafe`作为模板的第二个参数）的引用计数指针类型，表示一个共享对象。当没有对它的更多引用时，共享对象将被释放。'
- en: '`TAutoPtr`: Non-thread-safe shared pointer.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TAutoPtr`：非线程安全的共享指针。'
- en: How to do it...
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: We can demonstrate use of the four types of smart pointers referred to previously
    using a short code segment. In all of this code, the starting pointer can either
    be a raw pointer, or a copy of another smart pointer. All you have to do is take
    the C++ raw pointer and wrap it in a constructor call to any of `TSharedPtr`,
    `TSharedRef`, `TWeakPtr,` or `TAutoPtr`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用一个简短的代码段来演示先前提到的四种智能指针的使用。在所有这些代码中，起始指针可以是原始指针，也可以是另一个智能指针的副本。您只需将C++原始指针包装在`TSharedPtr`、`TSharedRef`、`TWeakPtr`或`TAutoPtr`的任何构造函数调用中。
- en: 'For example:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE6]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works…
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: There are some differences between weak pointers and shared pointers. Weak pointers
    do not have the capability to keep the object in memory when the reference count
    drops to 0.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 弱指针和共享指针之间存在一些差异。弱指针在引用计数降至0时无法保持对象在内存中。
- en: 'The advantage of using a weak pointer (over a raw pointer) is that when the
    object underneath the weak pointer is manually deleted (using `ConditionalBeginDestroy()`),
    the weak pointer''s reference becomes a `NULL` reference. This enables you to
    check if the resource underneath the pointer is still allocated properly by checking
    a statement of the form:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 使用弱指针（而不是原始指针）的优势在于，当弱指针下面的对象被手动删除（使用`ConditionalBeginDestroy()`），弱指针的引用将变为`NULL`引用。这使你可以通过检查形式为的语句来检查指针下面的资源是否仍然正确分配：
- en: '[PRE7]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: There's more…
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: Shared pointers are thread-safe. This means that the underlying object can safely
    be manipulated on separate threads. Always remember that you cannot use `TSharedRef`
    with `UObject`s or `UObject` derivatives—only on your custom C++ classes, or on
    your `FStructures` can you use any of the `TSharedPtr`, `TSharedRef`, `TWeakPtr`
    classes to wrap up a raw pointer. You must use `TWeakObjectPointer` or `UPROPERTY()`
    as a starting point to point to an object using a smart pointer.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 共享指针是线程安全的。这意味着底层对象可以在单独的线程上安全地进行操作。请记住，你不能在`UObject`或`UObject`派生类上使用`TSharedRef`，只能在自定义的C++类上使用`TSharedPtr`、`TSharedRef`、`TWeakPtr`类，或者在你的`FStructures`上使用任何`TSharedPtr`、`TSharedRef`、`TWeakPtr`类来封装原始指针。你必须使用`TWeakObjectPointer`或`UPROPERTY()`作为指向对象的智能指针的起点。
- en: You can use `TAutoPtr` if you do not need the thread-safety guarantee of `TSharedPtr`.
    `TAutoPtr` will automatically delete an object when the number of references to
    it drops to 0.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不需要`TSharedPtr`的线程安全保证，可以使用`TAutoPtr`。当对该对象的引用数量降至0时，`TAutoPtr`将自动删除该对象。
- en: Using TScopedPointer to track an object
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用TScopedPointer跟踪对象
- en: A scoped pointer is a pointer that is auto-deleted at the end of the block in
    which it was declared. Recall that a scope is just a section of code during which
    a variable is "alive". A scope will last until the first closing brace, `}`, that
    occurs.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 作用域指针是在声明它的块结束时自动删除的指针。请记住，作用域只是变量“存活”的代码段。作用域将持续到第一个出现的闭括号`}`。
- en: 'For example, in the following block, we have two scopes. The outer scope declares
    an integer variable `x` (valid for the entire outer block), while the inner scope
    declares an integer variable `y` (valid for the inner block, after the line on
    which it is declared):'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在以下代码块中，我们有两个作用域。外部作用域声明一个整数变量`x`（在整个外部块中有效），而内部作用域声明一个整数变量`y`（在声明它的行之后的内部块中有效）：
- en: '[PRE8]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Getting ready
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Scoped pointers are useful when it is important that a reference-counted object
    (which is in danger of going out of scope) is retained for the duration of usage.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当重要的引用计数对象（可能会超出范围）需要在使用期间保留时，作用域指针非常有用。
- en: How to do it...
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'To declare a scoped pointer, we simply use the following syntax:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要声明一个作用域指针，我们只需使用以下语法：
- en: '[PRE9]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This declares a scoped pointer referencing an object of the type declared within
    the angle brackets: `< AWarrior >`.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这声明了一个指向在尖括号内声明的类型对象的作用域指针：`<AWarrior>`。
- en: How it works…
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The `TScopedPointer` variable type automatically adds a reference count to the
    variable pointed to. This prevents deallocation of the underlying object for at
    least the life of the scoped pointer.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`TScopedPointer`变量类型会自动为指向的变量添加引用计数。这可以防止在作用域指针的生命周期内至少释放底层对象。'
- en: Unreal's garbage collection system and UPROPERTY( )
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unreal的垃圾回收系统和UPROPERTY()
- en: When you have an object (such as `TArray< >`) as a `UPROPERTY()` member of `UCLASS()`,
    you need to declare that member as `UPROPERTY()` (even if you won't edit it in
    blueprints), otherwise `TArray` will not stay allocated properly.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当你有一个对象（比如`TArray< >`）作为`UCLASS()`的`UPROPERTY()`成员时，你需要将该成员声明为`UPROPERTY()`（即使你不会在蓝图中编辑它），否则`TArray`将无法正确分配内存。
- en: How to do it...
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Say we have a `UCLASS()` macro as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有以下的`UCLASS()`宏：
- en: '[PRE10]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You'd have to list the `TArray` member as `UPROPERTY()` for it to be properly
    reference counted. If you don't do so, you'll get an unexpected memory error type
    bug sitting about in the code.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须将`TArray`成员列为`UPROPERTY()`，以便它能够正确地进行引用计数。如果不这样做，你将在代码中遇到意外的内存错误类型bug。
- en: How it works…
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The `UPROPERTY()` declaration tells UE4 that `TArray` must be properly memory
    managed. Without the `UPROPERTY()` declaration, your `TArray` won't work properly.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`UPROPERTY()`声明告诉UE4，`TArray`必须得到适当的内存管理。没有`UPROPERTY()`声明，你的`TArray`将无法正常工作。'
- en: Forcing garbage collection
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 强制进行垃圾回收
- en: When memory fills up, and you want to free some of it, garbage collection can
    be forced. You seldom need to do this, but you can do it in the case of having
    a very large texture (or set of textures) that are reference-counted that you
    need to clear.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 当内存填满时，你想要释放一些内存时，可以强制进行垃圾回收。你很少需要这样做，但在有一个非常大的纹理（或一组纹理）需要清除的情况下，你可以这样做。
- en: Getting ready
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Simply call `ConditionalBeginDestroy()` on all `UObject`s that you want deallocated
    from memory, or set their reference counts to 0.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 只需在所有想要从内存中释放的`UObject`上调用`ConditionalBeginDestroy()`，或将它们的引用计数设置为0。
- en: How to do it...
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Garbage collection is performed by calling the following:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用以下方式执行垃圾回收：
- en: '[PRE11]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Breakpoints and stepping through code
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 断点和逐步执行代码
- en: Breakpoints are how you pause your C++ program to temporarily stop the code
    from running, and have a chance to analyze and inspect your program's operation.
    You can peer at variables, step through code, and change variable values.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 断点是用来暂停C++程序，暂时停止代码运行，并有机会分析和检查程序操作的方式。你可以查看变量，逐步执行代码，并更改变量值。
- en: Getting ready
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Breakpoints are easy to set in Visual Studio. All you have to do is press *F9*
    on the line of code that you want operation to pause at, or click in the grey
    margin to the left of the line of code that you want to pause operation at. The
    code will pause when operation reaches the line indicated.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在Visual Studio中设置断点很容易。你只需在想要暂停操作的代码行上按下*F9*，或者单击代码行左侧的灰色边距。当操作到达指定行时，代码将暂停。
- en: How to do it...
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: Press *F9* on the line you want execution to pause at. This will add a breakpoint
    to the code, indicated by a red dot, as shown in the screenshot below. Clicking
    on the red dot toggles it.![How to do it...](img/00069.jpeg)
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下*F9*，在您希望执行暂停的行上添加断点。这将在代码中添加一个断点，如下面的屏幕截图所示，用红点表示。单击红点可切换它。![如何做…](img/00069.jpeg)
- en: Set **Build Configuration** to any of the configurations with **Debug** in the
    title (**DebugGame** Editor or simply **DebugGame** if you will launch without
    the editor).
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**生成配置**设置为标题中带有**调试**的任何配置（**DebugGame**编辑器或者如果您将在没有编辑器的情况下启动，则简单地选择**DebugGame**）。
- en: Launch your code by pressing *F5* (without holding *Ctrl*), or select the **Debug**
    | **Start Debugging** menu option.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按下*F5*（不按住*Ctrl*），或选择**调试** | **开始调试**菜单选项来启动您的代码。
- en: When the code reaches the red dot, the code's execution will pause.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当代码到达红点时，代码的执行将暂停。
- en: The paused view will take you to the code editor in **Debug mode**. In this
    mode, the windows may appear rearranged, with **Solution Explorer** possibly moved
    to the right, and new windows appearing at the bottom, including **Locals**, **Watch
    1**, and **Call Stack**. If these windows do not appear, find them under the **Debug**
    | **Windows** submenu.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 暂停的视图将带您进入**调试模式**的代码编辑器。在此模式下，窗口可能会重新排列，**解决方案资源管理器**可能会移动到右侧，并且新窗口会出现在底部，包括**本地变量**、**监视1**和**调用堆栈**。如果这些窗口没有出现，请在**调试**
    | **窗口**子菜单下找到它们。
- en: Check out your variables under the **Locals** window (**Debug** | **Windows**
    | **Locals**).
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**本地变量**窗口（**调试** | **窗口** | **本地变量**）下检查您的变量。
- en: Press *F10* to step over a line of code.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下*F10*跨过一行代码。
- en: Press *F11* to step into a line of code.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下*F11*以进入一行代码。
- en: How it works…
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: Debuggers are powerful tools that allow you to see everything about your code
    as it is running, including variable states.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 调试器是强大的工具，允许您在代码运行时查看关于代码的一切，包括变量状态。
- en: 'Stepping over a line of code (*F10*) executes the line of code in its entirety,
    and then pauses the program again, immediately, at the next line. If the line
    of code is a function call, then the function is executed without pausing at the
    first line of code of the function call. For example:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码行上方跨过一行（*F10*）会执行整行代码，然后立即在下一行再次暂停程序。如果代码行是一个函数调用，那么函数将在不暂停在函数调用的第一行的情况下执行。例如：
- en: '[PRE12]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Stepping into a line of code (*F11*) will pause execution at the very next line
    of code run.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 进入一行代码（*F11*）将在接下来要运行的代码的下一行暂停执行。
- en: Finding bugs and using call stacks
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找错误并使用调用堆栈
- en: When you have a bug in your code, Visual Studio halts and allows you to inspect
    the code. The place at which Visual Studio halts won't always be the exact location
    of the bug, but it can be close. It will at least be at a line of code that doesn't
    execute properly.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 当您的代码中有错误时，Visual Studio会停止并允许您检查代码。Visual Studio停止的位置不一定总是错误的确切位置，但可能会接近。它至少会在不能正确执行的代码行处。
- en: Getting ready
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: In this recipe, we'll describe **Call Stack,** and how to trace where you think
    an error may come from. Try adding a bug to your code, or add a breakpoint somewhere
    interesting that you'd like to pause for inspection.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将描述**调用堆栈**，以及如何追踪您认为错误可能来自的位置。尝试向您的代码中添加一个错误，或者在您想要暂停进行检查的有趣位置添加一个断点。
- en: How to do it...
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Run the code to a point where a bug occurs by pressing *F5,* or selecting the
    **Debug** | **Start Debugging** menu option. For example, add these lines of code:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按下*F5*或选择**调试** | **开始调试**菜单选项，运行代码直到出现错误的地方。例如，添加以下代码行：
- en: '[PRE13]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The code will pause at the second line (`o->GetName()`).
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码将在第二行（`o->GetName()`）暂停。
- en: When the code pauses, navigate to the **Call Stack** window (**Debug** | **Windows**
    | **Call Stack**).
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当代码暂停时，转到**调用堆栈**窗口（**调试** | **窗口** | **调用堆栈**）。
- en: How it works…
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: The **Call Stack** is a list of function calls that were executed. When a bug
    occurs, the line on which it occurred is listed at the top of the **Call Stack**.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '**调用堆栈**是已执行的函数调用列表。发生错误时，发生错误的行将列在**调用堆栈**的顶部。'
- en: '![How it works…](img/00070.jpeg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理…](img/00070.jpeg)'
- en: Using the Profiler to identify hot spots
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用性能分析器识别热点
- en: The C++ Profiler is extremely useful for finding sections of code that require
    a high amount of processing time. Using the Profiler can help you find sections
    of code to focus on during optimization. If you suspect that a region of code
    runs slowly, then you can actually confirm that it isn't slow if it doesn't appear
    highlighted in the Profiler.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: C++性能分析器非常有用，可以找到需要大量处理时间的代码部分。使用性能分析器可以帮助您找到在优化期间需要关注的代码部分。如果您怀疑某个代码区域运行缓慢，那么如果在性能分析器中没有突出显示，您实际上可以确认它不会运行缓慢。
- en: How to do it...
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: Go to **Debug** | **Start Diagnostic Tools Without Debugging…**![How to do it...](img/00071.jpeg)
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**调试** | **启动诊断工具（无调试）…**![如何做…](img/00071.jpeg)
- en: In the dialog shown in the preceding screenshot, select the type of analysis
    you'd like displayed. You can choose to analyze **CPU Usage**, **GPU Usage**,
    **Memory Usage**, or step through a **Performance Wizard** to assist you in selecting
    what you want to see.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中显示的对话框中，选择您希望显示的分析类型。您可以选择分析**CPU使用情况**、**GPU使用情况**、**内存使用情况**，或者通过**性能向导**逐步选择您想要看到的内容。
- en: Click on the **Start** button at the bottom of the dialog.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击对话框底部的**开始**按钮。
- en: Stop the code after a brief time (less than a minute or two) to halt sample
    collection.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在短时间内（不到一两分钟）停止代码以停止采样。
- en: Tip
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Do not collect too many samples or the Profiler will take a really long time
    to start up.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 不要收集太多样本，否则性能分析器将需要很长时间才能启动。
- en: Inspect the results that appear in the `.diagsession` file. Be sure to browse
    all available tabs that open up. Available tabs will vary depending on the type
    of analysis performed.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查出现在`.diagsession`文件中的结果。一定要浏览所有可用的选项卡。可用的选项卡将根据执行的分析类型而变化。
- en: How it works…
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: The C++ Profiler samples and analyzes the running code, and presents to you
    a series of diagrams and figures about how the code performed.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: C++性能分析器对运行的代码进行采样和分析，并向您呈现一系列关于代码执行情况的图表和数据。
