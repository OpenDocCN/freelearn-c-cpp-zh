["```cpp\n    // The sound the dodgeball will make when it bounces off of a   surface\n    UPROPERTY(EditAnywhere, Category = Sound)\n    class USoundBase* BounceSound;\n    ```", "```cpp\n    #include \"Kismet/GameplayStatics.h\"\n    ```", "```cpp\n        if (BounceSound != nullptr && NormalImpulse.Size() > 600.0f)\n        {\n        \u00a0\u00a0UGameplayStatics::PlaySoundAtLocation(this, BounceSound,   GetActorLocation(), 1.0f, FMath::RandRange(0.7f, 1.3f));\n        }\n        ```", "```cpp\n    // The sound attenuation of the previous sound\n    UPROPERTY(EditAnywhere, Category = Sound)\n    class USoundAttenuation* BounceSoundAttenuation;\n    ```", "```cpp\n        UGameplayStatics::PlaySoundAtLocation(this, BounceSound,   GetActorLocation(), 1.0f, 1.0f, 0.0f,   BounceSoundAttenuation);\n        ```", "```cpp\n    UPROPERTY(VisibleAnywhere, BlueprintReadOnly)\n    class UAudioComponent* AudioComponent;\n    ```", "```cpp\n    #include \"Components/AudioComponent.h\"\n    ```", "```cpp\n    PrimaryActorTick.bCanEverTick = false;\n    ```", "```cpp\n    AudioComponent =   CreateDefaultSubobject<UAudioComponent>(TEXT(\"Music   Component\"));\n    ```", "```cpp\n    // The particle system the dodgeball will spawn when it hits   the player\n    UPROPERTY(EditAnywhere, Category = Particles)\n    class UParticleSystem* HitParticles;\n    ```", "```cpp\n        if (HitParticles != nullptr)\n        {\n        \u00a0\u00a0UGameplayStatics::SpawnEmitterAtLocation(GetWorld(),   HitParticles, GetActorTransform());\n        }\n        ```"]