["```cpp\nclass Player \n{ \n  string name; \n  int hp; \npublic: \n  Player(){ cout << \"Player born\" << endl; } \n  ~Player(){ cout << \"Player died\" << endl; } \n}; \n```", "```cpp\nint main() \n{ \n  Player player; // \"Player born\" \n}                // \"Player died\" - player object destroyed here \n```", "```cpp\nPlayer born \nPlayer died \n```", "```cpp\nint main() \n{ \n  // \"dynamic allocation\" - using keyword new! \n  // this style of allocation means that the player object will \n  // NOT be deleted automatically at the end of the block where \n  // it was declared! Note: new always returns a pointer\nPlayer *player = new Player(); \n} // NO automatic deletion! \n```", "```cpp\nPlayer born \n```", "```cpp\nint main() \n{ \n  // \"dynamic allocation\" - using keyword new! \n  Player *player = new Player(); \n  delete player; // deletion invokes dtor \n} \n```", "```cpp\nPlayer born \nPlayer died \n```", "```cpp\n#include <iostream> \n#include <string> \nusing namespace std; \nclass Player \n{ \n  string name; \n  int hp; \npublic: \n  Player(){ cout << \"Player born\" << endl; } \n  ~Player(){ cout << \"Player died\" << endl; } \n}; \n\nint main() \n{ \n  while( true ) // keep going forever, \n  { \n    // alloc.. \n    Player *player = new Player(); \n    // without delete == Memory Leak! \n  } \n} \n```", "```cpp\n#include <iostream> \nusing namespace std; \nint main() \n{ \n  int array[ 5 ];  // declare an \"array\" of 5 integers \n                   // fill slots 0-4 with values \narray[ 0 ] = 1; \narray[ 1 ] = 2; \narray[ 2 ] = 3; \narray[ 3 ] = 4; \narray[ 4 ] = 5; \n  // print out the contents \n  for( int index = 0; index < 5; index++ ) \n    cout << array[ index ] << endl; \n} \n```", "```cpp\nint array[ ] = {6, 0, 5, 19};\n```", "```cpp\narray[ 0 ] = 10; \n```", "```cpp\narray[ slotNumber ] = value to put into array; \n```", "```cpp\n#include <iostream> \n#include <string> \nusing namespace std; \nint main() \n{ \n  string array[ 5 ];  // declare an \"array\" of 5 strings \n                      // fill slots 0-4 with values \narray[ 0 ] = \"Mariam McGonical\"; \narray[ 1 ] = \"Wesley Snice\"; \narray[ 2 ] = \"Kate Winslett\"; \narray[ 3 ] = \"Erika Badu\"; \narray[ 4 ] = \"Mohammad\"; \n  // print out the contents \n  for( int index = 0; index < 5; index++ ) \n    cout << array[ index ] << endl; \n} \n```", "```cpp\ndouble temps[ 3 ]; \n// fill slots 0-2 with values \ntemps[ 0 ] = 0; \ntemps[ 1 ] = 4.5; \ntemps[ 2 ] = 11; \n```", "```cpp\n#include <iostream> \nusing namespace std; \nint main() \n{ \n  cout << \"How big?\" << endl; \n  int size;       // try and use a variable for size.. \n  cin >> size;    // get size from user \n  int array[ size ];  // get error\n} \n```", "```cpp\n#include <iostream> \nusing namespace std; \nint main() \n{ \n  cout << \"How big?\" << endl; \n  int size;       // try and use a variable for size.. \n  cin >> size; \n  int *array = new int[ size ];  // this works \n  // fill the array and print \nfor( int index = 0; index < size; index++ ) \n{ \n  array[ index ] = index * 2; \n  cout << array[ index ] << endl; \n} \ndelete[] array; // must call delete[] on array allocated with  \n                // new[]! \n} \n```", "```cpp\n#include <iostream> \nusing namespace std; \nint main() \n{ \n  cout << \"How big?\" << endl; \n  int size;       // try and use a variable for size.. \n  cin >> size; \n  // the next line will look weird.. \n  int *array = (int*)malloc( size*sizeof(int) ); // C-style \n  // fill the array and print \nfor( int index = 0; index < size; index++ ) \n  { \n    //At this point the syntax is the same as with regular arrays.\n    array[ index ] = index * 2; \n    cout << array[ index ] << endl; \n  } \nfree( array ); // must call free() on array allocated with  \n               // malloc() (not delete[]!) \n} \n```", "```cpp\nvector<string> names; // make sure to add #include <vector> at the top\n```", "```cpp\nnames.push_back(\"John Smith\");\n```", "```cpp\n//Make it unsigned int to avoid a signed/unsigned mismatch error\nfor (unsigned int i = 0; i < names.size(); i++)\n{\n    //If you get an error about << add #include <string> at the top\n    cout << names[i] << endl; //endl tells it to go to the next line\n}\n```"]