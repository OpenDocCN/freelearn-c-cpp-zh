- en: Chapter 9. Developing a Web Application Using Qt Web Engine
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。使用Qt Web引擎开发Web应用程序
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Introduction to Qt WebEngine
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍Qt WebEngine
- en: WebView and web settings
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WebView和Web设置
- en: Embedding Google Maps in your project
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在项目中嵌入Google地图
- en: Calling C++ functions from JavaScript
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从JavaScript调用C++函数
- en: Calling JavaScript functions from C++
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从C++调用JavaScript函数
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Qt includes a module called **Qt WebEngine** that allows us to embed a web browser
    widget into our program and use it to display web pages or local HTML contents.
    Prior to version 5.6, Qt used another similar module called **Qt WebKit**, which
    is now deprecated and has since been replaced by the Chromium-based **web engine**
    module. Qt also allows communication between JavaScript and C++ code through the
    "web channel", which enables us to make use of this module in a much more effective
    fashion.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Qt包括一个名为**Qt WebEngine**的模块，允许我们将Web浏览器小部件嵌入到我们的程序中，并用它来显示网页或本地HTML内容。在5.6版本之前，Qt使用另一个类似的模块称为**Qt
    WebKit**，现在已经被弃用，并且已经被基于Chromium的**Web引擎**模块所取代。Qt还允许JavaScript和C++代码之间的通信通过“Web通道”，这使我们能够更有效地使用这个模块。
- en: Introduction to Qt WebEngine
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Qt WebEngine
- en: In this example project, we will explore the basic features of the web engine
    module in Qt and try building a simple working web browser. Since Qt 5.6, Qt's
    WebKit module has been deprecated and replaced by the WebEngine module, which
    is based on Google's Chromium engine. Note that when this chapter was written,
    WebEngine was still heavily under development and may be subject to changes in
    the near future.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例项目中，我们将探索Qt中Web引擎模块的基本功能，并尝试构建一个简单的工作Web浏览器。自Qt 5.6以来，Qt的WebKit模块已被弃用，并由基于Google的Chromium引擎的WebEngine模块所取代。请注意，当撰写本章时，WebEngine仍在积极开发中，可能会在不久的将来发生变化。
- en: How to do it…
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作方法…
- en: 'First, let''s set up our web engine project:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们设置我们的Web引擎项目：
- en: 'First, you are required to download and install Microsoft Visual Studio if
    you do not have it installed on your computer. This is because at the moment,
    Qt''s WebEngine module only works with the Visual C++ compiler and not others,
    such as MinGW or Clang. This might change in the future, but it all depends on
    whether Google wants to make their Chromium engine support other compilers or
    not. Meanwhile, you can download the latest Visual Studio from here: [https://www.visualstudio.com](https://www.visualstudio.com).'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，如果您的计算机上没有安装Microsoft Visual Studio，则需要下载并安装它。这是因为目前，Qt的WebEngine模块只能与Visual
    C++编译器一起使用，而不能与其他编译器（如MinGW或Clang）一起使用。这可能会在将来发生变化，但这一切取决于Google是否愿意让他们的Chromium引擎支持其他编译器。与此同时，您可以从这里下载最新的Visual
    Studio：[https://www.visualstudio.com](https://www.visualstudio.com)。
- en: At the same time, you may also need to make sure that the Qt you installed on
    your computer supports the Visual C++ compiler. You can add the **mvc2015** component
    to your Qt installation using Qt's maintenance tool. Also, make sure that you
    have installed the **Qt WebEngine** component in your Qt as well:![How to do it…](img/B02820_09_01.jpg)
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同时，您可能还需要确保您计算机上安装的Qt支持Visual C++编译器。您可以使用Qt的维护工具向Qt安装**mvc2015**组件。还要确保您在Qt中也安装了**Qt
    WebEngine**组件：![操作方法…](img/B02820_09_01.jpg)
- en: Once you are done with that, open up Qt Creator and create a new **Qt Widgets
    Application** project. This time, you must select a kit that uses the Visual C++
    compiler:![How to do it…](img/B02820_09_02.jpg)
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，打开Qt Creator并创建一个新的**Qt Widgets应用程序**项目。这次，您必须选择使用Visual C++编译器的工具包：![操作方法…](img/B02820_09_02.jpg)
- en: 'After that, open up your project file (`.pro`) and add the following modules
    to your project:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，打开项目文件（.pro）并将以下模块添加到您的项目中：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Open up `mainwindow.ui` and remove the `menuBar`, `mainToolBar`, and `statusBar`
    objects, as we don't need those in this project:![How to do it…](img/B02820_09_03.jpg)
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`mainwindow.ui`并删除`menuBar`，`mainToolBar`和`statusBar`对象，因为在这个项目中我们不需要它们：![操作方法…](img/B02820_09_03.jpg)
- en: Place two horizontal layouts on the canvas, then place a line edit widget and
    a push button for the layout at the top:![How to do it…](img/B02820_09_04.jpg)
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在画布上放置两个水平布局，然后在顶部的布局中放置一个行编辑小部件和一个按钮：![操作方法…](img/B02820_09_04.jpg)
- en: After that, select the canvas and click on the **Lay Out Vertically** button
    located at the top of the editor:![How to do it…](img/B02820_09_05.jpg)
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，选择画布并单击编辑器顶部的**垂直布局**按钮：![操作方法…](img/B02820_09_05.jpg)
- en: Once you have clicked on the **Lay Out Vertically** button, the layouts will
    expand and follow the size of the main window. The line edit will also expand
    horizontally based on the width of the horizontal layout:![How to do it…](img/B02820_09_06.jpg)
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**垂直布局**按钮后，布局将扩展并遵循主窗口的大小。行编辑也将根据水平布局的宽度水平扩展：![操作方法…](img/B02820_09_06.jpg)
- en: Next, add two buttons to the left side of the line edit. We'll use these two
    buttons to move back and forward between page histories. Then, add a Progress
    bar widget at the bottom of the main window so that we can find out whether the
    page has finished loading, or loading is still in progress. We don't have to worry
    about the horizontal layout in the middle at this point, as we'll be adding the
    web view to it later using C++ code, and the space will then be occupied:![How
    to do it…](img/B02820_09_08.jpg)
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在行编辑的左侧添加两个按钮。我们将使用这两个按钮在页面历史记录之间进行后退和前进。然后，在主窗口底部添加一个进度条小部件，以便我们可以了解页面是否已经加载完成，或者加载仍在进行中。此时我们不必担心中间的水平布局，因为我们将在稍后使用C++代码将Web视图添加到其中，然后该空间将被占用：![操作方法…](img/B02820_09_08.jpg)
- en: Right-click on one of the buttons and select **Go to slot…**, then select **clicked()**
    and click **OK**. A slot function will be automatically created for you in `mainwindow.h`
    and `mainwindow.cpp`. Repeat this step for all the other buttons as well.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击其中一个按钮，选择**转到槽…**，然后选择**clicked()**并单击**确定**。槽函数将自动在`mainwindow.h`和`mainwindow.cpp`中为您创建。对所有其他按钮也重复此步骤。
- en: After that, right-click on the line edit and select **Go to slot…**, then select
    **returnPressed()** and click **OK**. Another slot function will now be automatically
    created for you in `mainwindow.h` and `mainwindow.cpp`.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，右键单击行编辑并选择**转到槽…**，然后选择**returnPressed()**并单击**确定**。现在`mainwindow.h`和`mainwindow.cpp`中将自动为您创建另一个槽函数。
- en: 'Now that we are done with our UI design, let''s hop over to `mainwindow.h`.
    The first thing we need to do is to add the following header to `mainwindow.h`:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们完成了UI设计，让我们转到`mainwindow.h`。我们需要做的第一件事是在`mainwindow.h`中添加以下头文件：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, declare `loadUrl()` function under the class destructor:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在类析构函数下声明`loadUrl()`函数：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'After that, add a custom slot function called `loading()` to `mainwindow.h`
    as we''ll be using it pretty soon:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，在`mainwindow.h`中添加一个名为`loading()`的自定义槽函数，因为我们很快就会用到它：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Lastly, declare a `QWebEngineView` object and call it `webview`:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，声明一个`QWebEngineView`对象并将其命名为`webview`：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Once you''re done with that, open up `mainwindow.cpp` and initiate the web
    engine view. Then, add it to the second horizontal layout and connect its `loadProgress()`
    signal to the `loading()` slot function we just added to `mainwindow.h`:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，打开`mainwindow.cpp`并初始化web引擎视图。然后，将其添加到第二个水平布局中，并将其`loadProgress()`信号连接到我们刚刚添加到`mainwindow.h`的`loading()`槽函数：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After that, we declare what will happen when the `loadUrl()` function is called:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，声明`loadUrl()`函数被调用时会发生什么：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, call the `loadUrl()` function when the **Go** button is clicked or when
    the `Return/Enter` key is clicked:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，当单击**Go**按钮或单击`Return/Enter`键时，调用`loadUrl()`函数：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'As for the other two buttons, we''ll ask the web view to load the previous
    page or the next page if it is available in the history stack:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 至于另外两个按钮，如果在历史堆栈中可用，我们将要求web视图加载上一页或下一页：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Lastly, change the value of the `progressBar` when the web page is being loaded:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在加载网页时更改`progressBar`的值：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Build and run the program now and you will get a very basic but functional web
    browser!![How to do it…](img/B02820_09_09.jpg)
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在构建并运行程序，您将获得一个非常基本但功能齐全的网页浏览器！![如何做…](img/B02820_09_09.jpg)
- en: How it works…
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: The old web view system was based on Apple's WebKit engine and only available
    in Qt 5.5 and its predecessor. Since 5.6, WebKit has been completely abandoned
    by Qt and replaced with Google's Chromium engine. The API has been completely
    changed and therefore all the code related to Qt WebKit will not work correctly
    once migrated to 5.6\. If you're new to Qt, it's recommended to skip WebKit and
    learn the WebEngine API since it is becoming the new standard in Qt. If you have
    used Qt's WebKit in the past, this web page teaches you how to port your old code
    over to WebEngine, [https://wiki.qt.io/Porting_from_QtWebKit_to_QtWebEngine](https://wiki.qt.io/Porting_from_QtWebKit_to_QtWebEngine).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 旧的web视图系统基于苹果的WebKit引擎，仅在Qt 5.5及其前身中可用。自5.6以来，Qt完全放弃了WebKit，并用Google的Chromium引擎替换。API已完全更改，因此一旦迁移到5.6，与Qt
    WebKit相关的所有代码都将无法正常工作。如果您是Qt的新手，建议跳过WebKit并学习WebEngine API，因为它正在成为Qt的新标准。如果您以前使用过Qt的WebKit，本网页将教您如何将旧代码迁移到WebEngine，[https://wiki.qt.io/Porting_from_QtWebKit_to_QtWebEngine](https://wiki.qt.io/Porting_from_QtWebKit_to_QtWebEngine)。
- en: In Step 16, we connected the `loadProgress()` signal that belongs to the web
    view widget to the `loading()` slot function. The signal will be called automatically
    when the web view is loading the web page you requested by calling `QWebEnginePage::load()`
    in Step 17\. You can also connect the `loadStarted()` and `loadFinished()` signals
    as well if you need to.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在第16步，我们将属于web视图小部件的`loadProgress()`信号连接到`loading()`槽函数。当在第17步通过调用`QWebEnginePage::load()`请求加载网页时，信号将自动调用。如果需要，您还可以连接`loadStarted()`和`loadFinished()`信号。
- en: In Step 17, we used the `QUrl` class to convert the text obtained from the line
    edit to URL format. By default, the address we inserted will lead to the local
    path if we do not specify the URL scheme (`http`, `https`, `ftp`, and so on).
    We may not be able to load the page if, say, we gave it `packtpub.com` instead
    of `http://packtpub.com`. Therefore, we manually specify a URL scheme for it by
    calling `QUrl::setScheme()`. This will ensure the address is properly formatted
    before passing it to the web view.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在第17步，我们使用`QUrl`类将从行编辑中获取的文本转换为URL格式。默认情况下，如果不指定URL方案（`http`，`https`，`ftp`等），我们插入的地址将导致本地路径。如果我们给出`packtpub.com`而不是`http://packtpub.com`，则可能无法加载页面。因此，我们通过调用`QUrl::setScheme()`手动为其指定URL方案。这将确保在将其传递给web视图之前，地址格式正确。
- en: There's more…
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'If you''re running Qt 5.6 or above and for some reason you need the WebKit
    module for your project (usually for maintaining an old project), you can obtain
    the module code from GitHub and build it by yourself:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在运行Qt 5.6或更高版本，并且出于某种原因需要Webkit模块用于您的项目（通常用于维护旧项目），您可以从GitHub获取模块代码并自行构建：
- en: '[https://github.com/qt/qtwebkit](https://github.com/qt/qtwebkit)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/qt/qtwebkit](https://github.com/qt/qtwebkit)'
- en: WebView and web settings
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WebView和web设置
- en: In this section, we will dive deeper into the features available in Qt's WebEngine
    and explore the settings that we can use to customize our WebView. We will use
    the source files from the previous example and add more code to it.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将深入探讨Qt的WebEngine中可用的功能，并探索我们可以使用的设置来自定义我们的WebView。我们将使用上一个示例的源文件，并向其添加更多代码。
- en: How to do it…
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Let''s explore some of the basic features of the Qt WebEngine:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索一些Qt WebEngine的基本功能：
- en: 'First of all, open up `mainwindow.ui` and add a vertical layout under the progress
    bar. Then, add a **Plain Text Edit** widget (under the input widget category)
    and a Push button to the vertical layout. Change the display of the Push button
    to **Load HTML** and set the `plaintext` property of the plain text edit widget
    to the following:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，打开`mainwindow.ui`并在进度条下添加一个垂直布局。然后，在垂直布局中添加一个**纯文本编辑**小部件（在输入小部件类别下），以及一个推送按钮。将推送按钮的显示更改为**加载HTML**，并将纯文本编辑小部件的`plaintext`属性设置为以下内容：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![How to do it…](img/B02820_09_07.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![如何做…](img/B02820_09_07.jpg)'
- en: Next, go to **File** | **New File or Project**. A window will then pop up and
    ask you to choose a file template. Select **Qt Resource File** under the **Qt**
    category and click on the **Choose…** button. Type in your desired filename and
    click **Next** followed by **Finish**.![How to do it…](img/B02820_09_10.jpg)
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，转到**文件** | **新建文件或项目**。然后会弹出一个窗口，要求你选择一个文件模板。在**Qt**类别下选择**Qt资源文件**，然后点击**选择...**按钮。输入你想要的文件名，然后点击**下一步**，接着点击**完成**。![操作步骤...](img/B02820_09_10.jpg)
- en: After that, open up the resource file we just created by right-clicking on it
    in the **Projects** pane and selecting the **Open in Editor** option. Once the
    file is opened by the editor, click on the **Add** button, followed by **Add Prefix**.
    Then, set the prefix as **/** and click **Add**, followed by **Add Files**. This
    time, the file browser window will appear and we will select the **tux.png** image
    file and click **Open**. We have now added the image file to our project, where
    it will be embedded into the executable file (`.exe`) once it's compiled:![How
    to do it…](img/B02820_09_11.jpg)
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，通过在**项目**窗格中右键单击刚刚创建的资源文件并选择**在编辑器中打开**选项来打开资源文件。一旦文件被编辑器打开，点击**添加**按钮，然后点击**添加前缀**。然后，将前缀设置为**/**，点击**添加**，接着点击**添加文件**。这时，文件浏览器窗口会出现，我们会选择**tux.png**图像文件并点击**打开**。现在我们已经将图像文件添加到我们的项目中，它将被嵌入到可执行文件（`.exe`）中一起编译：![操作步骤...](img/B02820_09_11.jpg)
- en: 'Next, open up `mainwindow.h` and add the following headers to it:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开`mainwindow.h`并添加以下头文件：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then, make sure the following functions and pointers have been declared in
    `mainwindow.h`:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，确保以下函数和指针已在`mainwindow.h`中声明：
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Once you''re done with that, open up `mainwindow.cpp` and add the following
    code to the class constructor:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，打开`mainwindow.cpp`并将以下代码添加到类构造函数中：
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `MainWindow::loadUrl()` function still remains the same as the previous
    example, which sets the URL scheme to `http` before loading the page:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`MainWindow::loadUrl()`函数仍然与之前的例子相同，它在加载页面之前将URL方案设置为`http`：'
- en: '[PRE14]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The same goes for the following functions, which also remain the same:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于以下函数，情况也是一样的：
- en: '[PRE15]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In the previous example, we only had `MainWindow::loading()`, which sets the
    value of the progress bar when the web page is being loaded. This time, we also
    added both the `MainWindow::startLoading()` and `MainWindow::loaded()` slot functions,
    which will be called by the `loadStarted()` and `loadFinished()` signals. What
    these two functions do is basically show the progress bar when a page is starting
    to load, and hide the progress bar when the page has finished loading:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在之前的例子中，我们只有`MainWindow::loading()`，它在网页加载时设置进度条的值。这次，我们还添加了`MainWindow::startLoading()`和`MainWindow::loaded()`槽函数，它们将被`loadStarted()`和`loadFinished()`信号调用。这两个函数的作用基本上是在页面开始加载时显示进度条，在页面加载完成时隐藏进度条：
- en: '[PRE16]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Lastly, we call `webview->loadHtml()` to convert the plain text to HTML content
    when the **Load HTML** button is clicked:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，当点击**加载HTML**按钮时，我们调用`webview->loadHtml()`将纯文本转换为HTML内容：
- en: '[PRE17]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Build and run the program now and you should see something like this:![How to
    do it…](img/B02820_09_12.jpg)
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在构建并运行程序，你应该会看到类似这样的东西：![操作步骤...](img/B02820_09_12.jpg)
- en: How it works…
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In this example, we used C++ to load an image file and set it as the WebView's
    default content (instead of a blank page). We could achieve the same result by
    loading a default HTML file with an image at startup.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用C++加载图像文件，并将其设置为WebView的默认内容（而不是空白页面）。我们可以通过在启动时加载默认HTML文件和图像来实现相同的结果。
- en: Some of the code in the class constructor has been commented out. You can remove
    the double slashes `//` and see the difference it makes—the JavaScript alert will
    no longer appear (since JavaScript is being disabled) and any images will no longer
    appear in your web view.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 类构造函数中的一些代码已被注释掉。你可以删除双斜杠`//`，看看它的不同之处——JavaScript警报将不再出现（因为JavaScript被禁用），任何图像也将不再出现在你的Web视图中。
- en: 'Another thing you can try is to change the font family from `QWebEngineSettings::SansSerifFont`
    to `QWebEngineSettings::SerifFont`. You will notice a slight difference in the
    font as it appears in the web view:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以尝试将字体系列从`QWebEngineSettings::SansSerifFont`改为`QWebEngineSettings::SerifFont`。你会注意到字体在Web视图中的显示略有不同：
- en: '![How it works…](img/B02820_09_13.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/B02820_09_13.jpg)'
- en: By clicking the **Load HTML** button, we ask the WebView to treat the content
    of the plain text edit widget as HTML code and load it as an HTML page. You can
    use this to make a simple HTML editor powered by Qt!
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击**加载HTML**按钮，我们要求WebView将纯文本编辑小部件的内容视为HTML代码并将其加载为HTML页面。你可以使用这个方法来制作一个由Qt驱动的简单HTML编辑器！
- en: Embedding Google Maps in your project
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在项目中嵌入谷歌地图
- en: In this example, we will learn how to embed Google Maps in our project through
    Qt's WebEngine module. This example doesn't focus much on Qt and C++, but rather
    on the Google Maps API in HTML code.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将学习如何通过Qt的WebEngine模块在我们的项目中嵌入谷歌地图。这个例子并不太关注Qt和C++，而是关注HTML代码中的谷歌地图API。
- en: How to do it…
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'Let''s create a program that displays Google Maps by following these steps:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下步骤创建一个显示谷歌地图的程序：
- en: First, create a new **Qt Widgets Application** project and remove the status
    bar, menu bar, and tool bar.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，创建一个新的**Qt Widgets应用程序**项目，并移除状态栏、菜单栏和工具栏。
- en: 'Then, open up your project file (`.pro`) and add the following modules to your
    project:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，打开项目文件（`.pro`）并将以下模块添加到你的项目中：
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Next, open up `mainwindow.ui` and add a vertical layout to the canvas. Then,
    select the canvas and click the **Lay Out Vertically** button on top of the canvas.
    You will get something like this:![How to do it…](img/B02820_09_14.jpg)
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，打开`mainwindow.ui`并为画布添加一个垂直布局。然后，选择画布并点击画布顶部的**垂直布局**按钮。你会得到类似这样的东西：![操作步骤...](img/B02820_09_14.jpg)
- en: 'Then, open up `mainwindow.cpp` and add the following headers to the top of
    the source code:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，打开`mainwindow.cpp`并在源代码顶部添加以下头文件：
- en: '[PRE19]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'After that, add the following code to the `MainWindow` constructor:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，将以下代码添加到`MainWindow`构造函数中：
- en: '[PRE20]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Then, go to **File** | **New File or Project** and create a Qt resource file
    (`.qrc`). We will add an HTML file to our project called `map.html`:![How to do
    it…](img/B02820_09_15.jpg)
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，转到**文件** | **新建文件或项目**并创建一个Qt资源文件（.qrc）。我们将在项目中添加一个名为`map.html`的HTML文件：![如何操作...](img/B02820_09_15.jpg)
- en: Once you're done with that, open up `map.html` with your favorite text editor.
    It's not recommended to open an HTML file using Qt Creator, as it does not provide
    any color coding for HTML syntax.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，用您喜欢的文本编辑器打开`map.html`。不建议使用Qt Creator打开HTML文件，因为它不提供HTML语法的颜色编码。
- en: 'After that, we will start writing the HTML code by declaring the important
    tags, such as `<html>`, `<head>`, and `<body>`, like so:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们将开始编写HTML代码，声明重要的标签，如`<html>`、`<head>`和`<body>`，如下所示：
- en: '[PRE21]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Then, add a `<div>` tag to the body and set its ID as `map-canvas`:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在body中添加一个`<div>`标签，并将其ID设置为`map-canvas`：
- en: '[PRE22]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'After that, add the following code to the head of the HTML document:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，将以下代码添加到HTML文档的头部：
- en: '[PRE23]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Then, add the following code, also to the head of the HTML document, right
    at the bottom of the code we inserted in the previous step:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将以下代码添加到HTML文档的头部，就在我们在上一步中插入的代码的底部：
- en: '[PRE24]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Once you're done with that, compile and run the project. You should see something
    similar to this:![How to do it…](img/B02820_09_16.jpg)
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，编译并运行项目。您应该看到类似于这样的东西：![如何操作...](img/B02820_09_16.jpg)
- en: How it works…
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Google allows you to embed Google Maps in a web page by using their JavaScript
    library called the Google Maps API. Through Qt's WebEngine module, we can embed
    Google Maps in our C++ project by loading a HTML file to our web view widget,
    which uses the Google Maps API. The only downside of this method is that we cannot
    load the map when there is no Internet connection.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌允许您通过使用他们的JavaScript库谷歌地图API在网页中嵌入谷歌地图。通过Qt的WebEngine模块，我们可以通过将HTML文件加载到我们的Web视图小部件中来在我们的C++项目中嵌入谷歌地图，该小部件使用谷歌地图API。这种方法的唯一缺点是在没有互联网连接时无法加载地图。
- en: Google allows your website to call any Google API, many thousands of times per
    day. If you plan for heavier traffic, you should get a free API key from Google.
    Go to [https://console.developers.google.com](https://console.developers.google.com)
    to get a free key and replace the word `YOUR_KEY_HERE` in the JavaScript source
    path with the API key you obtained from Google.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌允许您的网站每天多次调用任何谷歌API。如果您计划有更多的流量，您应该从谷歌获取一个免费的API密钥。转到[https://console.developers.google.com](https://console.developers.google.com)获取一个免费的密钥，并用从谷歌获得的API密钥替换JavaScript源路径中的`YOUR_KEY_HERE`一词。
- en: We must define a `<div>` object, which serves as a container for the map. Then,
    when we initialize the map, we specify the ID of the `<div>` object so that the
    Google Maps API knows which HTML element to look for when embedding the map.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须定义一个`<div>`对象，它作为地图的容器。然后，当我们初始化地图时，我们指定`<div>`对象的ID，以便Google Maps API知道在嵌入地图时要查找哪个HTML元素。
- en: By default, we set the center of the map to the coordinates of New York and
    set the default zoom level to `6`. Then, we added an event listener that gets
    triggered when the zoom level of the map changes. Remove the double slashes `//`
    from the code to see it in action.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，我们将地图的中心设置为纽约的坐标，并将默认缩放级别设置为`6`。然后，我们添加了一个事件侦听器，当地图的缩放级别发生变化时触发。删除代码中的双斜杠`//`以查看其运行情况。
- en: After that, we also added a marker to the map through JavaScript. The marker
    also has an event listener attached to it, which will trigger the `panTo()` function
    when the marker is clicked. What it does is basically pan the map view to the
    marker that has been clicked.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们还通过JavaScript向地图添加了一个标记。标记也附加了一个事件侦听器，当单击标记时将触发`panTo()`函数。它的作用基本上是将地图视图移动到已单击的标记。
- en: Although we have added the drawing manager to the map (the icon buttons beside
    the **Map** and **Satellite** buttons), which allows users to draw any type of
    shape on top of the map, it's also possible to add the shapes manually using JavaScript,
    similar to how we added the marker in the previous step.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们已经将绘图管理器添加到地图中（**地图**和**卫星**按钮旁边的图标按钮），允许用户在地图上绘制任何类型的形状，但也可以使用JavaScript手动添加形状，类似于我们在上一步中添加标记的方式。
- en: Lastly, you may have noticed that the headers are added to `mainwindow.cpp`
    instead of `mainwindow.h`. This is totally fine unless you are declaring class
    pointers in `mainwindow.h`; then you have to include those headers in it.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您可能已经注意到标题被添加到`mainwindow.cpp`而不是`mainwindow.h`。这完全没问题，除非您在`mainwindow.h`中声明类指针；那么您必须在其中包含这些标题。
- en: Calling C++ functions from JavaScript
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从JavaScript调用C++函数
- en: In this recipe, we will learn how put our knowledge to use and create a functional
    login screen using Qt and MySQL.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将学习如何运用我们的知识，使用Qt和MySQL创建一个功能性的登录界面。
- en: How to do it…
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'Learn how to call C++ functions from JavaScript through the following steps:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以下步骤学习如何从JavaScript调用C++函数：
- en: 'First, create a **Qt Widgets Application** project and, once you''re done,
    open up the project file (`.pro`) and add the following modules to the project:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，创建一个**Qt Widgets应用程序**项目，完成后，打开项目文件（.pro）并将以下模块添加到项目中：
- en: '[PRE25]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Then, open up `mainwindow.ui` and delete the tool bar, menu bar, and status
    bar, as we don't need any of these in this example program.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，打开`mainwindow.ui`并删除工具栏、菜单栏和状态栏，因为在这个示例程序中我们不需要这些。
- en: 'After that, add a vertical layout to the canvas, and then select the canvas
    and click on the **Lay Out Vertically** button on top of the canvas. Then, add
    a text label to the top of the vertical layout and set its text to **Hello!**.
    Also, make its font bigger by setting its `stylesheet` property:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，向画布添加一个垂直布局，然后选择画布并单击画布顶部的**垂直布局**按钮。然后，在垂直布局的顶部添加一个文本标签，并将其文本设置为**Hello!**。还可以通过设置其`stylesheet`属性使其字体变大：
- en: '[PRE26]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '![How to do it…](img/B02820_09_17.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/B02820_09_17.jpg)'
- en: Next, go to **File** | **New File or Project** and create a resource file. Then,
    add an empty HTML file and all the JavaScript files, CSS files, font files, and
    so on belonging to jQuery, Boostrap, and Font Awesome to your project resources:![How
    to do it…](img/B02820_09_18.jpg)
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，转到**文件** | **新建文件或项目**并创建一个资源文件。然后，将一个空的HTML文件和所有JavaScript文件、CSS文件、字体文件等添加到jQuery、Boostrap和Font
    Awesome的项目资源中：![操作步骤…](img/B02820_09_18.jpg)
- en: 'After that, open up your HTML file, which in this case is called `test.html`.
    First, link all the necessary JavaScript and CSS files to the HTML source code,
    between the `<head>` tags:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，打开HTML文件，这里称为`test.html`。首先，将所有必要的JavaScript和CSS文件链接到HTML源代码中，放在`<head>`标签之间：
- en: '[PRE27]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Then, add the following JavaScript to the `<head>` element, wrapped between
    the `<script>` tags:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将以下JavaScript添加到`<head>`元素中，放在`<script>`标签之间：
- en: '[PRE28]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Then, add the following code to the `<body>` element:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将以下代码添加到`<body>`元素中：
- en: '[PRE29]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Once you are done with that, let''s open up `mainwindow.h` and add the following
    public functions to the `MainWindow` class:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，让我们打开`mainwindow.h`并向`MainWindow`类添加以下公共函数：
- en: '[PRE30]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'After that, open up `mainwindow.cpp` and add the following headers to the top
    of the source code:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，打开`mainwindow.cpp`并将以下头文件添加到源代码顶部：
- en: '[PRE31]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Then, add the following code to the `MainWindow` constructor:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将以下代码添加到`MainWindow`构造函数中：
- en: '[PRE32]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'After that, we will declare what happens when `changeQtText()` and `showLoginInfo()`
    are called:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们将声明`changeQtText()`和`showLoginInfo()`被调用时发生的事情：
- en: '[PRE33]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Let's compile and run the program now; you should see something similar to the
    following screenshot. If you click on the **Change Cpp Text** button, the word
    **Hello!** at the top will change to **Goodbye!** If you click on the **Login**
    button, a message box will appear and show you exactly what you typed in the **Username**
    and **Password** input fields:![How to do it…](img/B02820_09_19.jpg)
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们编译并运行程序；您应该会看到类似以下截图的内容。如果单击**Change Cpp Text**按钮，顶部的**Hello!**将变为**Goodbye!**如果单击**Login**按钮，将会出现一个消息框，显示您在**Username**和**Password**输入字段中输入的内容：![操作步骤…](img/B02820_09_19.jpg)
- en: How it works…
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: In this example, we used two JavaScript libraries, jQuery and Boostrap. We also
    used an iconic font package called **Font Awesome**. These third-party add-ons
    were used to make the HTML user interface more interesting and responsive to different
    screen resolutions. We also used jQuery to detect the document's ready status,
    as well as to obtain the values of the input fields. You can download jQuery from
    [https://jquery.com/download](https://jquery.com/download), Bootstrap from [http://getbootstrap.com/getting-started/#download](http://getbootstrap.com/getting-started/#download),
    and Font Awesome from [http://fontawesome.io](http://fontawesome.io).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用了两个JavaScript库，jQuery和Boostrap。我们还使用了一个叫做**Font Awesome**的图标字体包。这些第三方附加组件被用来使HTML用户界面更有趣，并对不同的屏幕分辨率做出响应。我们还使用了jQuery来检测文档的就绪状态，以及获取输入字段的值。您可以从[https://jquery.com/download](https://jquery.com/download)下载jQuery，从[http://getbootstrap.com/getting-started/#download](http://getbootstrap.com/getting-started/#download)下载Bootstrap，从[http://fontawesome.io](http://fontawesome.io)下载Font
    Awesome。
- en: 'Qt''s WebEngine uses a mechanism called **Web Channel** that enables peer-to-peer
    communication between the C++ program and the HTML page. The WebEngine module
    provides a JavaScript library that makes the integration a lot easier. The JavaScript
    is embedded in your project''s resource by default, so you don''t need to import
    it into your project manually. You just have to include it in your HTML page by
    calling the following:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Qt的WebEngine使用一种称为**Web Channel**的机制，它使C++程序和HTML页面之间能够进行点对点通信。WebEngine模块提供了一个JavaScript库，使集成变得更加容易。JavaScript默认嵌入在您的项目资源中，因此您不需要手动将其导入到项目中。您只需要通过调用以下内容将其包含在HTML页面中：
- en: '[PRE34]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Once you have included `qwebchannel.js`, you can initialize the `QWebChannel`
    class and assign the Qt object we registered earlier in C++ to a JavaScript variable.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您包含了`qwebchannel.js`，您就可以初始化`QWebChannel`类，并将我们之前在C++中注册的Qt对象分配给JavaScript变量。
- en: 'In C++, it as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在C++中，如下所示：
- en: '[PRE35]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Then in JavaScript, it is as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在JavaScript中，如下所示：
- en: '[PRE36]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'You may be wondering what this line means:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能想知道这行是什么意思：
- en: '[PRE37]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Qt''s web engine uses the remote debugging method to check for JavaScript errors
    and other problems. The number `1234` defines the port number you want to use
    for remote debugging. Once you have enabled remote debugging, you can access the
    debugging page by opening up a Chromium-based web browser, such as Google Chrome
    (this will not work in Firefox and other browsers) and typing in `http://127.0.0.1:1234`.
    You will then see a page that look like this:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: Qt的Web引擎使用远程调试方法来检查JavaScript错误和其他问题。数字`1234`定义了您想要用于远程调试的端口号。一旦启用了远程调试，您可以通过打开基于Chromium的Web浏览器，如Google
    Chrome（这在Firefox和其他浏览器中不起作用），并输入`http://127.0.0.1:1234`来访问调试页面。然后您将看到一个类似于这样的页面：
- en: '![How it works…](img/B02820_09_20.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理…](img/B02820_09_20.jpg)'
- en: The first page will display all the HTML pages that are currently running in
    your program, which in this case is `test.html`. Click on the page link and it
    will take you to another page for inspection. You can use this to check for CSS
    errors, JavaScript errors, missing files, and so on. Note that you should disable
    remote debugging once your program is bug-free and ready for deployment. This
    is because remote debugging takes time to initiate and it will increase your program's
    startup time.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个页面将显示当前在您的程序中运行的所有HTML页面，这里是`test.html`。单击页面链接，它将带您到另一个用于检查的页面。您可以使用此功能来检查CSS错误、JavaScript错误、丢失的文件等。请注意，一旦您的程序没有错误并且准备部署，应该禁用远程调试。这是因为远程调试需要时间来启动，并且会增加程序的启动时间。
- en: 'If you want to call a C++ function from JavaScript, you must place the `Q_INVOKABLE`
    macro in front the function''s declaration; otherwise, it will not work:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要从JavaScript调用C++函数，您必须在函数声明前放置`Q_INVOKABLE`宏；否则，它将无法工作：
- en: '[PRE38]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Calling JavaScript functions from C++
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从C++调用JavaScript函数
- en: 'In the previous example, we have learned how to call C++ functions from JavaScript
    through Qt''s Web Channel system. In this example, we will try to do the reverse:
    call JavaScript functions from C++ code.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在先前的示例中，我们已经学习了如何通过Qt的Web Channel系统从JavaScript调用C++函数。在这个示例中，我们将尝试做相反的事情：从C++代码调用JavaScript函数。
- en: How to do it…
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤…
- en: 'We can call JavaScript functions from C++ through the following steps:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下步骤从C++中调用JavaScript函数：
- en: As usual, create a new **Qt Widgets Application** project and add the `webengine`
    and `webenginewidgets` modules to your project.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 像往常一样，创建一个新的**Qt Widgets Application**项目，并将`webengine`和`webenginewidgets`模块添加到你的项目中。
- en: Then, open up `mainwindow.ui` and remove the tool bar, menu bar, and status
    bar.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，打开`mainwindow.ui`并移除工具栏、菜单栏和状态栏。
- en: After that, add a vertical layout and a horizontal layout to the canvas. Then,
    select the canvas and click **Lay Out Vertically**. Make sure the horizontal layout
    is located at the bottom of the vertical layout.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此之后，将垂直布局和水平布局添加到画布中。然后，选择画布并单击**垂直布局**。确保水平布局位于垂直布局的底部。
- en: Add two push buttons to the horizontal layout; one is called **Change HTML Text**
    and the other one is called **Play UI Animation**. Right-click on one of the buttons
    and click **Go to slot…**. A window will now pop up and ask you to pick a signal.
    Select the **clicked()** option and click **OK**. Qt will automatically add a
    slot function to your source code. Repeat this step for the other button as well:![How
    to do it…](img/B02820_09_21.jpg)
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两个按钮添加到水平布局中；一个叫做**更改HTML文本**，另一个叫做**播放UI动画**。右键单击其中一个按钮，然后单击**转到槽…**。现在会弹出一个窗口，要求你选择一个信号。选择**clicked()**选项，然后单击**确定**。Qt将自动向你的源代码中添加一个槽函数。对另一个按钮也重复此步骤：![操作步骤…](img/B02820_09_21.jpg)
- en: 'Now, open up `mainwindow.h` and add the following headers to it:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开`mainwindow.h`并向其中添加以下头文件：
- en: '[PRE39]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Then, declare the class pointer of a `QWebEngineView` object called `webview`:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，声明一个名为`webview`的`QWebEngineView`对象的类指针：
- en: '[PRE40]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'After that, open up `mainwindow.cpp` and add the following code to the `MainWindow`
    constructor:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此之后，打开`mainwindow.cpp`并将以下代码添加到`MainWindow`构造函数中：
- en: '[PRE41]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Then, define what will happen when the `changeHtmlText` button and the `playUIAnimation`
    button are clicked:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，定义当单击`changeHtmlText`按钮和`playUIAnimation`按钮时会发生什么：
- en: '[PRE42]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Once you're done with that, let's create a resource file for our project by
    going to **File** | **New File or Project**. Then, select **Qt Resource File**
    under the **Qt** category and click **Choose**. Then, insert your desired file
    name and click **Next**, followed by **Finish**.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，让我们通过转到**文件** | **新建文件或项目**来为我们的项目创建一个资源文件。然后，在**Qt**类别下选择**Qt资源文件**，并单击**选择**。然后，插入你想要的文件名，然后单击**下一步**，接着单击**完成**。
- en: Then, add an empty HTML file and all the required add-ons (jQuery, Bootstrap,
    and Font Awesome) to our project resources. Also, add the `tux.png` image file
    to the resources file as well, as we'll be using it in a short while.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将一个空的HTML文件和所有必需的附加组件（jQuery、Bootstrap和Font Awesome）添加到我们的项目资源中。同时，也将`tux.png`图像文件添加到资源文件中，因为我们将在短时间内使用它。
- en: 'After that, open up the HTML file we just created and add it to the project
    resources, in our case, it''s called `test.html`. Then, add the following HTML
    code to the file:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此之后，打开我们刚创建的HTML文件并将其添加到项目资源中，在我们的例子中，它叫做`test.html`。然后，将以下HTML代码添加到文件中：
- en: '[PRE43]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Add the following JavaScript code, which is wrapped within the `<script>` tags,
    to the `<head>` element of our HTML file:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下JavaScript代码添加到我们的HTML文件的`<head>`元素中，该代码被包裹在`<script>`标签中：
- en: '[PRE44]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Lastly, add the following code to the `<body>` element of our HTML file:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将以下代码添加到我们的HTML文件的`<body>`元素中：
- en: '[PRE45]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Build and run the program now; you should get a similar result to that shown
    in the following screenshot. When you click on the **Change HTML Text** button,
    the information text is located within the top panel. If you click on the **Play
    UI Animation** button, the penguin image alongside the two sets of widgets will
    appear one after the other, with different animations:![How to do it…](img/B02820_09_22.jpg)
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在构建并运行程序；你应该会得到与以下截图中显示的类似的结果。当你单击**更改HTML文本**按钮时，信息文本位于顶部面板中。如果你单击**播放UI动画**按钮，企鹅图像以及两组小部件将依次出现，具有不同的动画效果：![操作步骤…](img/B02820_09_22.jpg)
- en: How it works…
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: This example is similar to the previous one. Once we have included the Web Channel
    JavaScript library and initiated the `QWebChannel` class, we can call any of the
    JavaScript functions from C++ by calling `webview->page()->runJavascript("jsFunctionNameHere();")`.
    Don't forget to apply the web channel created in C++ to the WebView's page as
    well; otherwise, it will not be able to communicate with the `QWebChannel` class
    in your HTML file.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例与之前的示例类似。一旦我们包含了Web Channel JavaScript库并初始化了`QWebChannel`类，我们就可以通过调用`webview->page()->runJavascript("jsFunctionNameHere();")`从C++中调用任何JavaScript函数。不要忘记将在C++中创建的web
    channel也应用到WebView的页面上；否则，它将无法与HTML文件中的`QWebChannel`类进行通信。
- en: By default, we change the CSS properties of the penguin image and set its opacity
    to `0`, width to `0%`, and height to `0%`. We also hide the two list groups by
    calling the jQuery function `hide()`. When the **Play UI Animation** button is
    clicked, we repeat the same steps again just in case the animations have been
    played before (the same button has been clicked before), then we hide them again
    in order for the animations to be replayed.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，我们更改企鹅图像的CSS属性，并将其不透明度设置为`0`，宽度设置为`0%`，高度设置为`0%`。我们还通过调用jQuery函数`hide()`来隐藏两个列表组。当单击**播放UI动画**按钮时，我们再次重复相同的步骤，以防动画之前已经播放过（之前单击过相同的按钮），然后再次隐藏它们，以便重新播放动画。
- en: One powerful feature of jQuery is that you can define what happens after an
    animation is done, which allows us to play the animations in sequence. In this
    example, we started with the penguin image and interpolated its CSS properties
    to a targeted setting within a second (`1000` milliseconds). Once that's done,
    we start another animation, which makes the first list group slide from top to
    bottom in 1 second. After that, we run the third animation, which makes the second
    list group fade in from nowhere within 1.5 seconds.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery的一个强大特性是你可以定义动画完成后发生的事情，这使我们能够按顺序播放动画。在这个例子中，我们从企鹅图片开始，并在1秒内插值其CSS属性到目标设置（`1000`毫秒）。一旦完成，我们开始另一个动画，使第一个列表组在1秒内从顶部滑动到底部。之后，我们运行第三个动画，使第二个列表组在1.5秒内从无处淡入。
- en: To replace the information text located in the top panel, we created a JavaScript
    function called `changeHtmlText()` and within the function itself, we got the
    HTML element by referring to its ID and calling `html()` to change its contents.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 为了替换顶部面板中的信息文本，我们创建了一个名为`changeHtmlText()`的JavaScript函数，在函数内部，我们通过引用其ID并调用`html()`来获取HTML元素以更改其内容。
