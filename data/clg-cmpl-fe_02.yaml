- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Environment Setup
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 环境设置
- en: 'In this chapter, we will discuss the basic steps of setting up the environment
    for future experiments with Clang . The setup is appropriate for Unix-based systems
    such as Linux and Mac OS (Darwin). In addition, you will get important information
    on how to download, configure, and build the LLVM source code. We will continue
    with a short session that explains how to build and use the **LLVM debugger (LLDB**
    ), which will be used as the primary tool for code investigation throughout the
    book. Finally, we will finish with a simple Clang tool that can check C/C++ files
    for compilation errors. We will use LLDB for a simple debug session for the created
    tool and clang internal. We will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论为未来使用Clang进行实验而设置环境的基本步骤。该设置适用于基于Unix的系统，如Linux和Mac OS（Darwin）。此外，你将获得有关如何下载、配置和构建LLVM源代码的重要信息。我们将继续一个简短的会话，解释如何构建和使用**LLVM调试器（LLDB**），它将作为本书中代码调查的主要工具。最后，我们将完成一个简单的Clang工具，可以检查C/C++文件的编译错误。我们将使用LLDB为创建的工具和clang内部进行简单的调试会话。我们将涵盖以下主题：
- en: Prerequisites
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 先决条件
- en: Getting to know LLVM
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解LLVM
- en: Source code compilation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源代码编译
- en: How to create a custom Clang tool
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建自定义Clang工具
- en: 1.1 Technical requirements
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1 技术要求
- en: 'Downloading and building LLVM code is very easy and does not require any paid
    tools. You will require the following:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 下载和构建LLVM代码非常简单，不需要任何付费工具。你需要以下内容：
- en: Unix-based OS (Linux, Darwin)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于Unix的操作系统（Linux，Darwin）
- en: Command line git
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令行git
- en: 'Build tools: CMake and Ninja'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建工具：CMake和Ninja
- en: 'We will use the debugger as the source investigation tool. LLVM has its own
    debugger, LLDB. We will build it as our first tool from LLVM monorepo: [https://github.com/llvm/llvm-project.git](https://github.com/llvm/llvm-project.git).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用调试器作为源代码调查工具。LLVM有自己的调试器，LLDB。我们将从LLVM monorepo构建它作为我们的第一个工具：[https://github.com/llvm/llvm-project.git](https://github.com/llvm/llvm-project.git)。
- en: 'Any build process consists of two steps. The first one is the project configuration
    and the last one is the build itself. LLVM uses CMake as a project configuration
    tool. It also can use a wide range of build tools, such as Unix Makefiles, and
    Ninja. It can also generate project files for popular IDEs such as Visual Studio
    and XCode. We are going to use Ninja as the build tool because it speeds up the
    build process, and most LLVM developers use it. You can find additional information
    about the tools here: [https://llvm.org/docs/GettingStarted.html](https://llvm.org/docs/GettingStarted.html).'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 任何构建过程都包括两个步骤。第一个是项目配置，最后一个步骤是构建本身。LLVM使用CMake作为项目配置工具。它还可以使用广泛的构建工具，如Unix Makefiles和Ninja。它还可以为流行的IDE生成项目文件，如Visual
    Studio和XCode。我们将使用Ninja作为构建工具，因为它可以加快构建过程，并且大多数LLVM开发者都在使用它。你可以在这里找到有关这些工具的更多信息：[https://llvm.org/docs/GettingStarted.html](https://llvm.org/docs/GettingStarted.html)。
- en: 'The source code for this chapter is located in the `chapter1` folder of the
    book’s GitHub repository: [https://github.com/PacktPublishing/Clang-Compiler-Frontend-Packt/tree/main/chapter1](https://github.com/PacktPublishing/Clang-Compiler-Frontend-Packt/tree/main/chapter1)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码位于本书GitHub仓库的`chapter1`文件夹中：[https://github.com/PacktPublishing/Clang-Compiler-Frontend-Packt/tree/main/chapter1](https://github.com/PacktPublishing/Clang-Compiler-Frontend-Packt/tree/main/chapter1)
- en: 1.1.1 CMake as project configuration tool
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1.1.1 CMake作为项目配置工具
- en: CMake is an source, cross-platform build system generator. It has been used
    as the primary build system for LLVM since version 3.3, which was released in
    2013.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: CMake是一个源代码、跨平台的构建系统生成器。自2013年发布的3.3版本以来，它一直被用作LLVM的主要构建系统。
- en: Before LLVM began using CMake, it used autoconf, a tool that generates a configure
    script that can be used to build and install software on a wide range of Unix-like
    systems. However, autoconf has several limitations, such as being difficult to
    use and maintain and having poor support for cross-platform builds. CMake was
    chosen as an alternative to autoconf because it addresses these limitations and
    is easier to use and maintain.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在LLVM开始使用CMake之前，它使用autoconf，这是一个生成配置脚本的工具，可以在广泛的类Unix系统上用于构建和安装软件。然而，autoconf有几个限制，例如难以使用和维护，以及对跨平台构建的支持不佳。CMake被选为autoconf的替代品，因为它解决了这些限制，并且更容易使用和维护。
- en: In addition to being used as the build system for LLVM, CMake is also used for
    many other software projects, including Qt, OpenCV, and Google Test.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 除了用作LLVM的构建系统之外，CMake还被用于许多其他软件项目，包括Qt、OpenCV和Google Test。
- en: 1.1.2 Ninja as build tool
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1.1.2 Ninja作为构建工具
- en: Ninja is a small build system with a focus on speed. It is designed to be used
    in conjunction with a build generator, such as CMake, which generates a build
    file that describes the build rules for a project.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Ninja 是一个专注于速度的小型构建系统。它被设计成与构建生成器（如 CMake）一起使用，CMake 会生成一个描述项目构建规则的构建文件。
- en: One of the main advantages of Ninja is its speed. It is able to execute builds
    much faster than other build systems, such as Unix Makefiles, by only rebuilding
    the minimum set of files necessary to complete the build. This is because it keeps
    track of the dependencies between build targets and only rebuilds targets that
    are out of date.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Ninja 的主要优势之一是其速度。它通过仅重建完成构建所需的最小文件集，能够比其他构建系统（如 Unix Makefiles）更快地执行构建。这是因为它跟踪构建目标之间的依赖关系，并且只重建过时的目标。
- en: Additionally, Ninja is simple and easy to use. It has a small and straightforward
    command-line interface, and the build files it uses are simple text files that
    are easy to read and understand.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Ninja 简单易用。它拥有一个小巧且直观的命令行界面，并且它使用的构建文件是简单的文本文件，易于阅读和理解。
- en: Overall, Ninja is a good choice for build systems when speed is a concern, and
    when a simple and easy-to-use tool is desired.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，当速度是关键因素，并且需要简单易用的工具时，Ninja 是构建系统的良好选择。
- en: One of the most useful Ninja option is `-j` . This option allows you to specify
    the number of threads to be run in parallel. You may want to specify the number
    depending on the hardware you are using.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 最有用的 Ninja 选项之一是 `-j`。此选项允许您指定要并行运行的线程数。您可能需要根据所使用的硬件来指定该数值。
- en: Our next goal is to download the LLVM code and investigate the project structure.
    We also need to set up the necessary utilities for the build process and establish
    the environment for our future experiments with LLVM code. This will ensure that
    we have the tools and dependencies in place to proceed with our work efficiently.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们下一个目标是下载 LLVM 代码并调查项目结构。我们还需要设置构建过程所需的必要工具，并为未来使用 LLVM 代码的实验建立环境。这将确保我们拥有进行工作的工具和依赖项，以便高效地继续工作。
- en: 1.2 Getting to know LLVM
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2 了解 LLVM
- en: Let’s begin by covering some foundational information about LLVM, including
    the project history as well as its structure.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从介绍一些关于 LLVM 的基础知识开始，包括项目历史以及其结构。
- en: 1.2.1 Short LLVM history
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1.2.1 简短的 LLVM 历史
- en: The Clang compiler is a part of the LLVM project. The project was started in
    2000 by Chris Lattner and Vikram Adve as their project at the University of Illinois
    at Urbana–Champaign [[26](B19722_Bib.xhtml#XLLVM_CGO04)].
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Clang 编译器是 LLVM 项目的一部分。该项目始于 2000 年，由 Chris Lattner 和 Vikram Adve 在伊利诺伊大学厄巴纳-香槟分校作为他们的项目启动
    [[26](B19722_Bib.xhtml#XLLVM_CGO04)]。
- en: LLVM was originally designed to be a next-generation code generation infrastructure
    that could be used to build optimizing compilers for many programming languages.
    However, it has since evolved into a full-featured platform that can be used to
    build a wide variety of tools, including debuggers, profilers, and static analysis
    tools.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: LLVM 最初被设计为一个下一代代码生成基础设施，可用于构建多种编程语言的优化编译器。然而，它已经发展成为一个功能齐全的平台，可用于构建各种工具，包括调试器、性能分析器和静态分析工具。
- en: LLVM has been widely adopted in the software industry and is used by many companies
    and organizations to build a variety of tools and applications. It is also used
    in academic research and teaching and has inspired the development of similar
    projects in other fields.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: LLVM 已在软件行业中得到广泛应用，并被许多公司和组织用于构建各种工具和应用。它也被用于学术研究和教学，并激发了其他领域类似项目的开发。
- en: The project received an additional boost when Apple hired Chris Lattner in 2005
    and formed a team to work on LLVM. LLVM became an integral part of the development
    tools created by Apple (XCode).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当苹果公司在 2005 年聘请了 Chris Lattner 并组建了一支团队来开发 LLVM 时，项目得到了额外的推动。LLVM 成为了苹果公司（XCode）开发工具的一个组成部分。
- en: Initially, **GNU Compile Collection (GCC)** was used as the C/C++ frontend for
    LLVM. But that had some problems. One of them was related to GNU **General Public
    License (GPL**) that prevented the frontend usage at some proprietary projects.
    Another disadvantage was the limited support for Objective-C in GCC at the time,
    which was important for Apple. The Clang project was started by Chris Lattner
    in 2006 to address the issues.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，**GNU编译器集合（GCC**）被用作LLVM的C/C++前端。但这也存在一些问题。其中之一与GNU **通用公共许可证（GPL**）有关，这阻止了在某些专有项目中的前端使用。另一个缺点是当时GCC对Objective-C的支持有限，这对苹果公司来说很重要。Clang项目由Chris
    Lattner于2006年启动，旨在解决这些问题。
- en: Clang was originally designed as a unified parser for the C family of languages,
    including C, Objective-C, C++, and Objective-C++. This unification was intended
    to simplify maintenance by using a single frontend implementation for multiple
    languages, rather than maintaining multiple implementations for each language.
    The project became successful very quickly. One of the primary reasons for the
    success of Clang and LLVM was their modularity. Everything in LLVM is a library,
    including Clang . It opened the opportunity to create a lot of amazing tools based
    on Clang and LLVM, such as clang-tidy and clangd, which will be covered later
    in the book ([*Chapter** 5*](B19722_05.xhtml#x1-990005)*, Clang-Tidy Linter Framework*
    and [*Chapter** 8*](B19722_08.xhtml#x1-1520008)*, IDE* *Support and Clangd*).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Clang最初被设计为C语言家族（包括C、Objective-C、C++和Objective-C++）的统一解析器。这种统一旨在通过使用单个前端实现来简化维护，而不是为每种语言维护多个实现。该项目很快就取得了成功。Clang和LLVM成功的一个主要原因是它们的模块化。LLVM中的所有内容都是一个库，包括Clang。这为基于Clang和LLVM创建大量惊人的工具打开了机会，例如clang-tidy和clangd，这些将在本书的后续章节中介绍（[第**5**章](B19722_05.xhtml#x1-990005)*，Clang-Tidy
    Linter Framework* 和 [第**8**章](B19722_08.xhtml#x1-1520008)*，IDE支持与Clangd*）。
- en: LLVM and Clang have a very clear architecture and are written in C++. That makes
    it possible to be investigated and used by any C++ developer. We can see the huge
    community created around LLVM and the extremely fast growth of its usage.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: LLVM和Clang具有非常清晰的架构，并且是用C++编写的。这使得任何C++开发者都可以对其进行研究和使用。我们可以看到围绕LLVM形成的巨大社区以及其使用量的极快增长。
- en: 1.2.2 OS support
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1.2.2 操作系统支持
- en: We are planning to focus on OS for personal computers here, such as Linux, Darwin,
    and Windows. On the other hand, Clang is not limited by personal computers but
    can also be used to compile code for mobile platforms such as iOS and different
    embedded systems.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们计划在这里专注于个人电脑的操作系统，例如Linux、Darwin和Windows。另一方面，Clang不仅限于个人电脑，还可以用于编译iOS和不同嵌入式系统等移动平台的代码。
- en: Linux
  id: totrans-38
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Linux
- en: The GCC is the default set of dev tools on Linux, especially `gcc` (for C programs)
    and `g++` (for C++ programs) being the default compilers. Clang can also be used
    to compile source code on Linux. Moreover, it mimics to `gcc` and supports most
    of its options. LLVM support might be limited for some GNU tools, however; for
    instance, GNU Emacs does not support LLDB as a debugger. But despite this, Linux
    is the most suitable OS for LLVM development and investigation, thus we will mainly
    use this OS (Fedora 39) for future examples.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: GCC是Linux上的默认开发工具集，特别是`gcc`（用于C程序）和`g++`（用于C++程序）是默认的编译器。Clang也可以用于在Linux上编译源代码。此外，它模仿`gcc`并支持其大多数选项。然而，LLVM对某些GNU工具的支持可能有限；例如，GNU
    Emacs不支持LLDB作为调试器。但尽管如此，Linux是最适合LLVM开发和研究的操作系统，因此我们将主要使用这个操作系统（Fedora 39）进行未来的示例。
- en: Darwin (macOS)
  id: totrans-40
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Darwin（macOS）
- en: Clang is considered the main build tool for Darwin. The entire build infrastructure
    is based on LLVM, and Clang is the default C/C++ compiler. The developer tools,
    such as the debugger (LLDB ), also come from LLVM. You can get the primary developer
    utilities from XCode, which are based on LLVM. However, you may need to install
    additional command-line tools, such as CMake and Ninja, either as separate packages
    or through package systems such as MacPorts or Homebrew.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Clang被认为是Darwin的主要构建工具。整个构建基础设施基于LLVM，Clang是默认的C/C++编译器。开发工具，如调试器（LLDB），也来自LLVM。您可以从XCode获取主要开发工具，它们基于LLVM。然而，您可能需要安装额外的命令行工具，例如CMake和Ninja，无论是作为单独的包还是通过MacPorts或Homebrew等包系统。
- en: 'For example, you can get CMake using Homebrew as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以使用Homebrew获取CMake，如下所示：
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'or for MacPorts:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 或者对于MacPorts：
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Windows
  id: totrans-46
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Windows
- en: On Windows, Clang can be used as a command-line compiler or as part of a larger
    development environment such as Visual Studio. Clang on Windows includes support
    for the **Microsoft Visual C++ (MSVC)** ABI, so you can use Clang to compile programs
    that use the **Microsoft C runtime** **library (CRT)** and the C++ **Standard
    Template Library (STL)**. Clang also supports many of the same language features
    as GCC, so it can be used as a drop-in replacement for GCC on Windows in many
    cases.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，Clang可以用作命令行编译器，也可以作为更大开发环境（如Visual Studio）的一部分。Windows上的Clang包括对**Microsoft
    Visual C++ (MSVC)** ABI的支持，因此您可以使用Clang编译使用**Microsoft C运行时库**（CRT）和C++ **标准模板库**（STL）的程序。Clang还支持许多与GCC相同的语言特性，因此在许多情况下，它可以用作Windows上GCC的替代品。
- en: It’s worth mentioning `clang-cl` [[9](B19722_Bib.xhtml#Xllvm_clangcl)]. It is
    a command-line compiler driver for Clang that is designed to be used as a drop-in
    replacement for the MSVC compiler, `cl.exe` . It was introduced as part of the
    Clang compiler, and is created to be used with the LLVM toolchain.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是`clang-cl` [[9](B19722_Bib.xhtml#Xllvm_clangcl)]。它是一个用于Clang的命令行编译器驱动程序，旨在作为MSVC编译器`cl.exe`的替代品。它是作为Clang编译器的一部分引入的，并创建用于与LLVM工具链一起使用。
- en: Like `cl.exe` , `clang-cl` is designed to be used as part of the build process
    for Windows programs, and it supports many of the same command-line options as
    the MSVC compiler. It can be used to compile C, C++, and Objective-C code on Windows,
    and it can also be used to link object files and libraries to create executable
    programs or **dynamic link libraries** **(DLLs)**.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 与`cl.exe`类似，`clang-cl`被设计为Windows程序构建过程的一部分，它支持与MSVC编译器相同的许多命令行选项。它可以在Windows上编译C、C++和Objective-C代码，并且也可以用于链接目标文件和库以创建可执行程序或**动态链接库**（DLLs）。
- en: The development process for Windows is different from that of Unix-like systems,
    which require additional specifics that might make the book material quite complicated.
    To avoid this complexity, our primary goal is to focus on Unix-based systems,
    such as Linux and Darwin, and we will omit Windows-specific examples in this book.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Windows的开发过程与类Unix系统不同，这需要额外的具体说明，可能会使本书的材料相当复杂。为了避免这种复杂性，我们的主要目标是专注于基于Unix的系统，如Linux和Darwin，本书将省略Windows特定的示例。
- en: 1.2.3 LLVM/Clang project structure
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1.2.3 LLVM/Clang项目结构
- en: 'The Clang source is a part of the LLVM **monolithic repository** **(monorepo)**.
    LLVM started to use the monorepo in 2019 as a part of its transition to Git [[4](B19722_Bib.xhtml#Xllvm_llvm2git)].
    The decision was driven by several factors, such as better code reuse, improved
    efficiency, and collaboration. Thus you can find all the LLVM projects in one
    place. As mentioned in the [Preface](B19722_Preface.xhtml#x1-5000doc), we will
    be using LLVM version 18.x in this book. The following command will allow you
    to download it:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Clang源代码是LLVM **单一仓库**（monorepo）的一部分。LLVM从2019年开始使用monorepo作为其向Git过渡的一部分 [[4](B19722_Bib.xhtml#Xllvm_llvm2git)]。这一决定是由几个因素驱动的，例如更好的代码重用、提高效率和协作。因此，您可以在一个地方找到所有LLVM项目。正如[前言](B19722_Preface.xhtml#x1-5000doc)中提到的，本书将使用LLVM版本18.x。以下命令将允许您下载它：
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Figure 1.1**: Getting the LLVM code base'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**图1.1**：获取LLVM代码库'
- en: Important note
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The release 18 is the latest version of LLVM, expected to be released in March
    2024\. This book is based on the version from January 23, 2024, when the release
    branch was created.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 18版本是LLVM的最新版本，预计将于2024年3月发布。本书基于2024年1月23日的版本，当时创建了发布分支。
- en: The most important parts of the **llvm-project** that will be used in the book
    are shown in [Figure 1.2](#x1-25007r2).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将使用**llvm-project**的最重要的部分，如图[图1.2](#x1-25007r2)所示。
- en: '![Figure 1.2: LLVM project tree ](img/Figure1.2_B19722.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图1.2：LLVM项目树](img/Figure1.2_B19722.png)'
- en: '**Figure 1.2**: LLVM project tree'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**图1.2**：LLVM项目树'
- en: 'There are:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 有：
- en: '`lld` : The LLVM linker tool. You may want to use it as a replacement for standard
    linker tools, such as GNU `ld`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lld` : LLVM链接器工具。您可能希望将其用作标准链接器工具（如GNU `ld`）的替代品。'
- en: '`llvm` : Common libraries for LLVM projects'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`llvm` : LLVM项目的通用库'
- en: '`clang` : The clang driver and frontend'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clang` : Clang驱动程序和前端'
- en: '`clang-tools-extra` : These are different clang tools that will be covered
    in the second part of the book'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clang-tools-extra` : 这些是本书第二部分将涵盖的不同Clang工具'
- en: Most projects have the structure shown in [Figure 1.3](#x1-25011r3).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数项目都具有[图1.3](#x1-25011r3)中所示的结构。
- en: '![Figure 1.3: Typical LLVM project structure ](img/Figure1.3_B19722.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图1.3：典型的LLVM项目结构](img/Figure1.3_B19722.png)'
- en: '**Figure 1.3**: Typical LLVM project structure'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**图1.3**：典型的 LLVM 项目结构'
- en: 'LLVM projects, such as `clang` or `llvm` , typically contain two primary folders:
    `include` and `lib` . The `include` folder contains the project interfaces (header
    files), while the `lib` folder contains the implementation. Each LLVM project
    has a variety of different tests, which can be divided into two primary groups:
    unit tests located in the `unittests` folder and implemented using the Google
    Test framework, and end-to-end tests implemented using the **LLVM Integrated Tester
    (LIT** **)** framework. You can get more info about LLVM/Clang testing in [*Section** 4.5.2*](B19722_04.xhtml#x1-830002)*,
    LLVM test* *framework*.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: LLVM 项目，如`clang`或`llvm`，通常包含两个主要文件夹：`include`和`lib`。`include`文件夹包含项目接口（头文件），而`lib`文件夹包含实现。每个
    LLVM 项目都有各种不同的测试，可以分为两个主要组：位于`unittests`文件夹中的单元测试，使用 Google Test 框架实现，以及使用**LLVM
    集成测试器 (LIT**)框架实现的端到端测试。您可以在[*第4.5.2节*](B19722_04.xhtml#x1-830002)*中获取更多关于 LLVM/Clang
    测试的信息，*LLVM 测试框架*。
- en: The most important projects for us are `clang` and `clang-tools-extra` . The
    `clang` folder contains the frontend and driver.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 对我们来说，最重要的项目是`clang`和`clang-tools-extra`。`clang`文件夹包含前端和驱动。
- en: Important note
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The compiler driver is used to run different stages of compilation (parsing,
    optimization, link, and so on.). You can get more info about it at [*Section** 2.3*](B19722_02.xhtml#x1-410003)*,
    Clang driver overview*.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器驱动用于运行编译的不同阶段（解析、优化、链接等）。您可以在[*第2.3节*](B19722_02.xhtml#x1-410003)*中获取更多关于它的信息，*Clang
    驱动概述*。
- en: For instance, the lexer implementation is located in the `clang/lib/Lex` folder.
    You can also see the `clang/test` folder, which contains end-to-end tests, and
    the `clang/unittest` folder, which contains unit tests for the frontend and the
    driver.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，词法分析器的实现位于`clang/lib/Lex`文件夹中。您还可以看到包含端到端测试的`clang/test`文件夹，以及包含前端和驱动单元测试的`clang/unittest`文件夹。
- en: 'Another important folder is `clang-tools-extra` . It contains some tools based
    on different Clang libraries. They are as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要的文件夹是`clang-tools-extra`。它包含基于不同 Clang 库的一些工具。具体如下：
- en: '`clang-tools-extra/clangd` : A language server that provides navigation info
    for IDEs such as VSCode'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clang-tools-extra/clangd`：一个语言服务器，为 VSCode 等IDE提供导航信息'
- en: '`clang-tools-extra/clang-tidy` : A powerful lint framework with several hundred
    different checks'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clang-tools-extra/clang-tidy`：一个功能强大的 lint 框架，具有数百种不同的检查'
- en: '`clang-tools-extra/clang-format` : A code formatting tool'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clang-tools-extra/clang-format`：一个代码格式化工具'
- en: After obtaining the source code and setting up build tools, we are ready to
    compile the LLVM source code.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在获取源代码并设置构建工具后，我们就可以编译 LLVM 源代码了。
- en: 1.3 Source code compilation
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3 源代码编译
- en: We are compiling our source code in debug mode to make it suitable for future
    investigations with a debugger. We are using LLDB as the debugger. We will start
    with an overview of the build process and finish building the LLDB as a concrete
    example.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以调试模式编译源代码，使其适合未来的调试器调查。我们使用 LLDB 作为调试器。我们将从构建过程概述开始，并以构建 LLDB 作为具体示例。
- en: 1.3.1 Configuration with CMake
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1.3.1 使用 CMake 进行配置
- en: 'Create a build folder where the compiler and related tools will be built:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个构建文件夹，编译器和相关工具将在其中构建：
- en: '[PRE3]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The minimal configuration command looks like this:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 最小配置命令看起来像这样：
- en: '[PRE4]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The command requires the build type to be specified (e.g. `Debug` in our case)
    as well as the primary argument that points to a folder with the build configuration
    file. The configuration file is stored as `CMakeLists.txt` and is located in the
    `llvm` folder, which explains the `../llvm` argument usage. The command generates
    `Makefile` located in the build folder, thus you can use the simple `make` command
    to start the build process.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 命令需要指定构建类型（例如，在我们的例子中是`Debug`）以及指向包含构建配置文件的文件夹的主要参数。配置文件存储为`CMakeLists.txt`，位于`llvm`文件夹中，这解释了`../llvm`参数的使用。该命令在构建文件夹中生成`Makefile`，因此您可以使用简单的`make`命令来启动构建过程。
- en: 'We will use more advanced configuration commands in the book. One of the commands
    looks like this:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本书中使用更高级的配置命令。其中一个命令看起来像这样：
- en: '[PRE5]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Figure 1.4**: Basic CMake configuration'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**图1.4**：基本的 CMake 配置'
- en: 'The are several LLVM/cmake options specified:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 指定了几个 LLVM/cmake 选项：
- en: '`-G Ninja` specifies Ninja as the build generator, otherwise it will use make
    (which is slow).'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-G Ninja`指定 Ninja 作为构建生成器，否则它将使用 make（这很慢）。'
- en: '`-DCMAKE``_BUILD``_TYPE=Debug` sets the build mode. The build with debug info
    will be created. There is a primary build configuration for Clang internals investigations.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-DCMAKE_BUILD_TYPE=Debug` 设置构建模式。将创建带有调试信息的构建。Clang内部调查有一个主要构建配置。'
- en: '`-DCMAKE``_INSTALL``_PREFIX=../install` specifies the installation folder.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-DCMAKE_INSTALL_PREFIX=../install` 指定安装文件夹。'
- en: '`-DLLVM``_TARGETS``_TO``_BUILD="X86"` sets exact targets to be build. It will
    avoid building unnecessary targets.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-DLLVM_TARGETS_TO_BUILD="X86"` 设置要构建的确切目标。这将避免构建不必要的目标。'
- en: '`-DLLVM``_ENABLE``_PROJECTS="lldb;clang;clang-tools-extra"` specifies the LLVM
    projects we want to build.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-DLLVM_ENABLE_PROJECTS="lldb;clang;clang-tools-extra"` 指定我们想要构建的LLVM项目。'
- en: '`-DLLVM``_USE``_SPLIT``_DWARF=ON` splits debug information into separate files.
    This option saves disk space as well as memory consumption during the LLVM build.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-DLLVM_USE_SPLIT_DWARF=ON` 将调试信息分割成单独的文件。此选项在LLVM构建过程中可以节省磁盘空间以及内存消耗。'
- en: 'We used `-DLLVM``_USE``_SPLIT``_DWARF=ON` to save some space on the disk. For
    instance, the Clang build (`ninja clang` build command) with the option enabled
    takes up 20 GB, but it takes up 27 GB space with the option disabled. Note that
    the option requires a compiler used for the build to support it. You might also
    notice that we create the build for one specific architecture: `X86` . This option
    also saved some space for us because otherwise, all supported architecture will
    be built and the required space will also increase from 20 GB to 27 GB.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`-DLLVM_USE_SPLIT_DWARF=ON`来在磁盘上节省一些空间。例如，启用选项的Clang构建（`ninja clang`构建命令）占用20
    GB，但禁用选项时将占用27 GB空间。请注意，此选项要求用于构建的编译器支持它。您也可能注意到我们为特定架构创建构建：`X86`。此选项也为我们节省了一些空间，因为否则，所有支持的架构都将被构建，所需空间也将从20
    GB增加到27 GB。
- en: Important note
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'You might want to avoid using the `-DLLVM``_TARGETS``_TO``_BUILD="X86"` setting
    if your host platform is different from X86, for instance, ARM. For ARM, you can
    use the following configuration: `-DLLVM``_TARGETS``_TO``_BUILD="ARM;X86;AArch64"`
    [[15](B19722_Bib.xhtml#Xllvm_arm_build)]. The full list of supported platforms
    can be found in [[7](B19722_Bib.xhtml#Xllvm_build)] and includes (as of March
    2023) 19 different targets.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的宿主平台不是X86，例如ARM，您可能希望避免使用`-DLLVM_TARGETS_TO_BUILD="X86"`设置。对于ARM，您可以使用以下配置：`-DLLVM_TARGETS_TO_BUILD="ARM;X86;AArch64"`
    [[15](B19722_Bib.xhtml#Xllvm_arm_build)]。支持的完整平台列表可以在[[7](B19722_Bib.xhtml#Xllvm_build)]中找到，截至2023年3月，包括19个不同的目标。
- en: You can also use the default settings and not specify the `LLVM``_TARGETS``_TO``_BUILD`
    configuration setting. Be prepared for both an increase in build time and the
    amount of space used.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以使用默认设置，不指定`LLVM_TARGETS_TO_BUILD`配置设置。请准备好构建时间和使用空间都会增加。
- en: 'You can save more space if you use dynamic libraries instead of static ones.
    The configuration setting `-DBUILD``_SHARED``_LIBS=ON` will build each LLVM component
    as a shared library. The space used will be 14 GB, and the overall config command
    will look like this:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用动态库而不是静态库，可以节省更多空间。配置设置`-DBUILD_SHARED_LIBS=ON`将构建每个LLVM组件为共享库。使用的空间将是14
    GB，整体配置命令将如下所示：
- en: '[PRE6]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Figure 1.5**: CMake configuration that enables shared libraries instead of
    static ones'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**图1.5**：启用共享库而不是静态库的CMake配置'
- en: 'For performance purposes, on Linux, you might want to use the `gold` linker
    instead of the default one. The `gold` linker is an alternative to the GNU Linker,
    which was developed as part of the GNU Binary Utilities (binutils) package. It
    is designed to be faster and more efficient than the GNU Linker, especially when
    linking large projects. One way it achieves this is by using a more efficient
    algorithm for symbol resolution and a more compact file format for the resulting
    executable. It can be enabled with the `-DLLVM``_USE``_LINKER=gold` option. The
    result configuration command will look like this:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 为了性能考虑，在Linux上，您可能希望使用`gold`链接器而不是默认链接器。`gold`链接器是GNU链接器的替代品，它是GNU二进制实用工具（binutils）包的一部分开发的。它旨在比GNU链接器更快、更高效，尤其是在链接大型项目时。它实现这一目标的一种方式是使用更有效的符号解析算法和更紧凑的文件格式来生成可执行文件。可以通过`-DLLVM_USE_LINKER=gold`选项启用它。结果配置命令将如下所示：
- en: '[PRE7]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Figure 1.6**: CMake configuration that uses gold linker'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**图1.6**：使用gold链接器的CMake配置'
- en: 'The debug build can be very slow, so you may want to consider an alternative.
    A good compromise between debuggability and performance is the release build with
    debug information. To obtain this build, you can change the `CMAKE``_BUILD``_TYPE`
    flag to `RelWithDebInfo` in your overall configuration command. The command will
    then look like this:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 调试构建可能会非常慢，因此您可能想考虑一个替代方案。在可调试性和性能之间取得良好平衡的是带有调试信息的发布构建。要获得此构建，您可以在整体配置命令中将
    `CMAKE``_BUILD``_TYPE` 标志更改为 `RelWithDebInfo`。命令将如下所示：
- en: '[PRE8]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Figure 1.7**: CMake configuration that uses RelWithDebInfo build type'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**图1.7**: 使用 RelWithDebInfo 构建类型的 CMake 配置'
- en: The following table keeps the list of some popular options ( [https://llvm.org/docs/CMake.html](https://llvm.org/docs/CMake.html)).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了一些流行的选项（[https://llvm.org/docs/CMake.html](https://llvm.org/docs/CMake.html)）。
- en: '|'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '* * *'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '|'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '* * *'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '|'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Option | Description |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 描述 |'
- en: '|'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '* * *'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '|'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '* * *'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '|'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `CMAKE``_BUILD``_TYPE` | Specifies the build configuration. |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| `CMAKE``_BUILD``_TYPE` | 指定构建配置。 |'
- en: '|  | Possible values are `Release&#124;Debug&#124;RelWithDebInfo&#124;MinSizeRel`
    . |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '|  | 可能的值有 `Release&#124;Debug&#124;RelWithDebInfo&#124;MinSizeRel` . |'
- en: '|  | `Release` and `RelWithDebInfo` are optimized for performance, while |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '|  | `Release` 和 `RelWithDebInfo` 优化了性能，而 |'
- en: '|  | `MinSizeRel` is optimized for size. |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '|  | `MinSizeRel` 优化了大小。 |'
- en: '|'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '* * *'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '|'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '* * *'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '|'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `CMAKE``_INSTALL``_PREFIX` | Installation prefix |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| `CMAKE``_INSTALL``_PREFIX` | 安装前缀 |'
- en: '|'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '* * *'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '|'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '* * *'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '|'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `CMAKE``_C,CXX``_FLAGS` | Extra C/C++ flags be used for compilation |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| `CMAKE``_C,CXX``_FLAGS` | 用于编译的额外 C/C++ 标志 |'
- en: '|'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '* * *'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '|'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '* * *'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '|'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `CMAKE``_C,CXX``_COMPILER` | C/C++ compiler be used for compilation. |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| `CMAKE``_C,CXX``_COMPILER` | 用于编译的 C/C++ 编译器。 |'
- en: '|  | You might want to specify a non-default compiler to use some |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '|  | 您可能想指定一个非默认编译器来使用一些 |'
- en: '|  | options that are not available or not supported by the default compiler.
    |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '|  | 选项，这些选项不可用或不支持默认编译器。 |'
- en: '|'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '* * *'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '|'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '* * *'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '|'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `LLVM``_ENABLE``_PROJECTS` | The projects to be enabled. We will use `clang;clang-tools-extra`
    . |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| `LLVM``_ENABLE``_PROJECTS` | 要启用的项目。我们将使用 `clang;clang-tools-extra` . |'
- en: '|'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '* * *'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '|'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '* * *'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '|'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `LLVM``_USE``_LINKER` | Specifies the linker to be used. |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| `LLVM``_USE``_LINKER` | 指定要使用的链接器。 |'
- en: '|  | There are several options, including `gold` and `lld` . |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '|  | 有几个选项，包括 `gold` 和 `lld` 。 |'
- en: '|'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '* * *'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '|'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '* * *'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '|'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|  |  |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '|  |  |'
- en: '**Table 1.1:** Configuration options'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '**表1.1**: 配置选项'
- en: 1.3.2 Build
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1.3.2 构建
- en: 'We need to call Ninja to build the projects. If you want to build all specified
    projects, you can run Ninja without arguments:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要调用 Ninja 来构建项目。如果您想构建所有指定的项目，可以在没有参数的情况下运行 Ninja：
- en: '[PRE9]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The command for the Clang build will look like this:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: Clang 构建命令将如下所示：
- en: '[PRE10]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You can also run unit and end-to-end tests for the compiler with the following:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用以下命令为编译器运行单元和端到端测试：
- en: '[PRE11]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The compiler binary is `bin/clang` and can be found in the `build` folder.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器二进制文件是 `bin/clang`，可以在 `build` 文件夹中找到。
- en: 'You can also install the binaries into the folder specified in the `-DCMAKE``_INSTALL``_PREFIX`
    option. It can be done as follows:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以将二进制文件安装到 `-DCMAKE``_INSTALL``_PREFIX` 选项指定的文件夹中。可以按照以下方式完成：
- en: '[PRE12]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `../install` folder (specified as the installation folder in [Figure 1.4](#x1-27004r4))
    will have the following structure:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`../install` 文件夹（在[图1.4](#x1-27004r4)中指定为安装文件夹）将具有以下结构：'
- en: '[PRE13]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 1.3.3 The LLVM debugger, its build, and usage
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1.3.3 LLVM 调试器，其构建和使用
- en: The LLVM debugger, LLDB , has been created with a look at the GNU debugger (GDB
    ). Some of its commands repeat the counterparts from GDB . You may ask ”Why do
    we need a new debugger if we have a good one?” The answer can be found in the
    different architecture solutions used by GCC and LLVM. LLVM uses a modular architecture,
    and different parts of the compiler can be reused. For example, the Clang frontend
    can be reused in the debugger, resulting in support for modern C/C++ features.
    For example, the print command in `lldb` can specify any valid language constructions,
    and you can use some modern C++ features with the `lldb` print command.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: LLVM 调试器 LLDB 是在观察 GNU 调试器 (GDB) 的基础上创建的。其中一些命令与 GDB 的对应命令相同。您可能会问：“如果我们已经有了好的调试器，为什么还需要一个新的调试器？”
    答案可以在 GCC 和 LLVM 使用的不同架构解决方案中找到。LLVM 使用模块化架构，编译器的不同部分可以被重用。例如，Clang 前端可以在调试器中重用，从而支持现代
    C/C++ 特性。例如，`lldb` 中的打印命令可以指定任何有效的语言结构，您可以使用 `lldb` 打印命令使用一些现代 C++ 特性。
- en: In contrast, GCC uses a monolithic architecture, and it’s hard to separate the
    C/C++ frontend from other parts. Therefore, GDB has to implement language features
    separately, which may take some time before modern language features implemented
    in GCC become available in GDB .
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，GCC 使用单一架构，很难将 C/C++ 前端与其他部分分离。因此，GDB 必须单独实现语言特性，这可能需要一些时间，才能在现代 GCC 中实现的语言特性在
    GDB 中可用。
- en: 'You may find some info about LLDB build and a typical usage scenario in the
    following example. We are going to create a separate folder for the release build:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下示例中找到有关 LLDB 构建和一些典型使用场景的信息。我们将为发布构建创建一个单独的文件夹：
- en: '[PRE14]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '**Figure 1.8**: Release build for LLVM'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 1.8**: LLVM 的发布构建'
- en: 'We configure our project in release mode and specify the `lldb` and `clang`
    projects only:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以发布模式配置我们的项目，并仅指定 `lldb` 和 `clang` 项目：
- en: '[PRE15]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '**Figure 1.9**: CMake configuration that uses Release build type'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 1.9**: 使用发布构建类型的 CMake 配置'
- en: 'We are going to build both Clang and LLDB using the maximum threads available
    in the system:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用系统可用的最大线程来构建 Clang 和 LLDB：
- en: '[PRE16]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You can install the created executables with the following command:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下命令安装创建的执行文件：
- en: '[PRE17]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The binary will be installed into the folder specified via the `-DCMAKE``_INSTALL``_PREFIX`
    config command argument.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制文件将通过 `-DCMAKE_INSTALL_PREFIX` 配置命令参数指定的文件夹安装。
- en: 'We will use the following simple C++ program for the example debugger session:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下简单的 C++ 程序作为示例调试会话：
- en: '[PRE18]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '**Figure 1.10**: Test C++ program: main.cpp'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 1.10**: 测试 C++ 程序：main.cpp'
- en: 'The program can be compiled using the following command (`<...>` was used to
    refer the folder where llvm-project was cloned):'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下命令编译程序（`<...>` 用于引用克隆 llvm-project 的文件夹）：
- en: '[PRE19]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: As you may have noticed, we don’t use optimization (the `-O0` option) and store
    debug info in the binary (with the `-g` option).
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所注意到的，我们没有使用优化（`-O0` 选项）并将调试信息存储在二进制文件中（使用 `-g` 选项）。
- en: A typical debug session for the created executable is shown in [Figure 1.11](#listing-7).
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 创建的执行文件的典型调试会话如图[图 1.11](#listing-7)所示。
- en: '[PRE20]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '**Figure 1.11**: LLDB session example'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 1.11**: LLDB 会话示例'
- en: 'Several actions are taken:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 需要采取以下几项行动：
- en: Run the debug session with `<...>/llvm-project/install/bin/lldb` `main` , where
    `main` is the executable we want to debug. See [Figure 1.11](#listing-7), *Line
    1*.
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `<...>/llvm-project/install/bin/lldb` `main` 运行调试会话，其中 `main` 是我们想要调试的可执行文件。参见[图 1.11](#listing-7)，*第
    1 行*。
- en: We set a breakpoint in the `main` function. See [Figure 1.11](#listing-7), *Line
    4*.
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们在 `main` 函数中设置了一个断点。参见[图 1.11](#listing-7)，*第 4 行*。
- en: Run the session with `"r"` command. See [Figure 1.11](#listing-7), *Line 6*.
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `"r"` 命令运行会话。参见[图 1.11](#listing-7)，*第 6 行*。
- en: We can see that the process is interrupted at the breakpoint. See [Figure 1.11](#listing-7),
    *Lines 8, 12*.
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以看到，进程在断点处被中断。参见[图 1.11](#listing-7)，*第 8 行、第 12 行*。
- en: We finish the session with the `"q"` command. See [Figure 1.11](#listing-7),
    *Line 14*.
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用 `"q"` 命令结束会话。参见[图 1.11](#listing-7)，*第 14 行*。
- en: We are going to use LLDB as one of our tools for the Clang internal investigation.
    We will use the same sequence of commands that is shown in [Figure 1.11](#listing-7).
    You can also use another debugger, such as GDB , that has a similar set of commands
    as LLDB .
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 LLDB 作为我们 Clang 内部调查的工具之一。我们将使用[图 1.11](#listing-7)中显示的相同命令序列。您也可以使用具有与
    LLDB 相似命令集的其他调试器，如 GDB。
- en: 1.4 Test project – syntax check with a Clang tool
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.4 测试项目 – 使用 Clang 工具进行语法检查
- en: For our first test project, we will create a simple Clang tool that runs the
    compiler and checks the syntax for the provided source file. We will create a
    so-called out-of-tree LLVM project, that is, a project that will use LLVM but
    will be located outside the main LLVM source tree.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的第一个测试项目，我们将创建一个简单的 Clang 工具，该工具运行编译器并检查提供的源文件的语法。我们将创建一个所谓的树外 LLVM 项目，即一个将使用
    LLVM 但位于主 LLVM 源树之外的项目。
- en: 'Several actions are required to create the project:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 创建项目需要采取以下几项行动：
- en: The required LLVM libraries and headers have to be built and installed
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须构建和安装所需的 LLVM 库和头文件。
- en: We have to create a build configuration file for our test project
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们必须为我们的测试项目创建一个构建配置文件。
- en: The source code that uses LLVM has to be created
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 LLVM 的源代码必须被创建。
- en: 'We will start with the first step and install the Clang support libraries and
    headers. We will use the following configuration command for CMake:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先安装 Clang 支持库和头文件。我们将使用以下 CMake 配置命令：
- en: '[PRE21]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '**Figure 1.12**: LLVM CMake configuration for a simple syntax checking Clang
    tool'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 1.12**：简单语法检查 Clang 工具的 LLVM CMake 配置'
- en: 'As you may have noticed, we enabled only one project: `clang`. All other options
    are standard for our debug build. The command has to be run from a created `build`
    folder inside the LLVM source tree, as was suggested in [*Section** 1.3.1*](#x1-270001)*,*
    *Configuration with CMake*.'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所注意到的，我们只启用了一个项目：`clang`。所有其他选项都是我们调试构建的标准选项。必须从 LLVM 源树中创建的 `build` 文件夹中运行该命令，正如在
    [*第 1.3.1 节*](#x1-270001)*，* *使用 CMake 进行配置* 中所建议的。
- en: Important note
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The configuration specified in [Figure 1.12](#x1-30003r12) will be the default
    build configuration used throughout the book.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 1.12](#x1-30003r12) 中指定的配置将是本书中使用的默认构建配置。'
- en: The configuration with shared libraries, in addition to the reduced size, has
    the advantage of simplifying the specification of dependencies. You only need
    to specify the shared libraries that your project directly depends on, and the
    dynamic linker takes care of the rest.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 与共享库的配置相比，除了减小大小外，还有简化依赖项指定的优势。您只需指定项目直接依赖的共享库，动态链接器会处理其余部分。
- en: 'The required libraries and headers can be installed with the following command:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下命令安装所需的库和头文件：
- en: '[PRE22]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The libraries and headers will be installed into `install` folder, as was specified
    by the `CMAKE_INSTALL_PREFIX` option.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 库和头文件将安装到 `install` 文件夹中，正如 `CMAKE_INSTALL_PREFIX` 选项所指定的。
- en: 'We have to create two files for our project:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须为我们的项目创建两个文件：
- en: '`CMakeLists.txt`: The project configuration file'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CMakeLists.txt`：项目配置文件'
- en: '`TestProject.cpp`: The project source code'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TestProject.cpp`：项目源代码'
- en: 'The project configuration file, `CMakeLists.txt` , will accept a path to the
    LLVM install folder via the `LLVM_HOME` environment variable. The file is as follows:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 项目配置文件 `CMakeLists.txt` 将通过 `LLVM_HOME` 环境变量接受 LLVM 安装文件夹的路径。文件如下：
- en: '[PRE23]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '**Figure 1.13**: CMake file for simple syntax check Clang Tool'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 1.13**：简单语法检查 Clang 工具的 CMake 文件'
- en: 'The most important parts of the file are as follows:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 文件最重要的部分如下：
- en: '*Line 2*: We specify the project name (syntax-check). That is also the name
    of our executable.'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第 2 行*：我们指定项目名称（syntax-check）。这也是我们可执行文件的名字。'
- en: '*Lines 4-7*: Test for the `LLVM_HOME` environment variable.'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第 4-7 行*：测试 `LLVM_HOME` 环境变量。'
- en: '*Line 10*: We set a path to the LLVM CMake helpers.'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第 10 行*：我们设置 LLVM CMake 辅助工具的路径。'
- en: '*Line 11*: We load the LLVM CMake package from the paths specified on *Line
    10*.'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第 11 行*：我们从 *第 10 行* 指定的路径加载 LLVM CMake 包。'
- en: '*Line 14*: We specify our source file that should be compiled.'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第 14 行*：我们指定应编译的源文件。'
- en: '*Line 16*: We set up an additional flag for compilation: `-fno-rtti`. The flag
    is required as soon as LLVM is built without RTTI. This is done in an effort to
    reduce code and executable size [[11](B19722_Bib.xhtml#Xllvm_coding_standards)].'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第 16 行*：我们设置了一个额外的编译标志：`-fno-rtti`。当 LLVM 没有启用 RTTI 构建时，该标志是必需的。这是为了减少代码和可执行文件的大小
    [[11](B19722_Bib.xhtml#Xllvm_coding_standards)]。'
- en: '*Lines 18-22* We specify the required libraries to be linked to our program.'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第 18-22 行*：我们指定要链接到我们的程序所需的库。'
- en: 'The source code for our tool is as follows:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们工具的源代码如下：
- en: '[PRE25]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '**Figure 1.14**: SyntaxCheck.cpp'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 1.14**：SyntaxCheck.cpp'
- en: 'The most important part of the file are as follows:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 文件最重要的部分如下：
- en: '*Lines 7-9*: The majority of compiler tools have the same set of command line
    arguments. The LLVM command-line library [[12](B19722_Bib.xhtml#Xllvm_commandline_library)]
    provides some APIs to process compiler command options. We set up the library
    on *Line 7*. We also set up additional help messages on lines 8-10.'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第 7-9 行*：大多数编译器工具都有相同的命令行参数集。LLVM 命令行库 [[12](B19722_Bib.xhtml#Xllvm_commandline_library)]
    提供了一些 API 来处理编译器命令选项。我们在 *第 7 行* 上设置了库。我们还在第 8-10 行设置了额外的帮助信息。'
- en: '*Lines 13-18*: We parse command-line arguments.'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第 13-18 行*：我们解析命令行参数。'
- en: '*Lines 19-24*: We create and run our Clang tool.'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第 19-24 行*：我们创建并运行我们的 Clang 工具。'
- en: '*Lines 22-23*: We use the `clang::SyntaxOnlyAction` frontend action, which
    will run syntax and semantic checks on the input file. You can get more info about
    frontend actions in [*Section** 2.4.1*](B19722_02.xhtml#x1-480001)*, Frontend
    action*.'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第 22-23 行*：我们使用 `clang::SyntaxOnlyAction` 前端动作，该动作将在输入文件上运行语法和语义检查。您可以在 [*第
    2.4.1 节*](B19722_02.xhtml#x1-480001)*前端动作* 中获取更多关于前端动作的信息。'
- en: 'We have to specify a path to the LLVM `install` folder to build our tool. As
    was mentioned earlier, the path has to be specified via the `LLVM_HOME` environment
    variable. Our configuration command (see [Figure 1.12](#x1-30003r12)) specifies
    the path as the `install` folder inside the LLVM project source tree. Thus we
    can build our tool as follows:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须指定LLVM `install`文件夹的路径来构建我们的工具。如前所述，路径必须通过`LLVM_HOME`环境变量指定。我们的配置命令（见[图1.12](#x1-30003r12)）指定了LLVM项目源树中的`install`文件夹的路径。因此，我们可以按以下方式构建我们的工具：
- en: '[PRE26]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '**Figure 1.15**: The syntax-check build commands'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '**图1.15**：语法检查的构建命令'
- en: 'We can run the tool as follows:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按以下方式运行工具：
- en: '[PRE27]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '**Figure 1.16**: The syntax-check –help output'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '**图1.16**：语法检查 –help 输出'
- en: 'The program will successively terminate if we run it on a valid C++ source
    file, but it will produce an error message if it’s run on a broken C++ file:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在有效的C++源文件上运行程序，程序将依次终止，但如果在损坏的C++文件上运行，它将产生错误信息：
- en: '[PRE28]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '**Figure 1.17**: The syntax-check run on a file with a syntax error'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '**图1.17**：对存在语法错误的文件进行的语法检查'
- en: We used ’- -’ to pass additional arguments to the compiler in [Figure 1.17](#x1-30067r17),
    specifically indicating that we want to use C++17 with the option ’-std=c++17’.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图1.17](#x1-30067r17)中，我们使用`- -`向编译器传递额外的参数，具体表示我们想使用C++17，选项为`-std=c++17`。
- en: 'We can also run our tool with the LLDB debugger:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用LLDB调试器运行我们的工具：
- en: '[PRE29]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '**Figure 1.18**: The syntax-check run under debugger'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '**图1.18**：在调试器下运行的语法检查'
- en: We run `syntax-check` as the primary binary and set `main.cpp` source file as
    an argument for the tool ([Figure 1.18](#x1-30069r18)). We also pass additional
    compilation flags (-std=c++17) to the syntax-check executable.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`syntax-check`作为主二进制文件运行，并将`main.cpp`源文件作为工具的参数（[图1.18](#x1-30069r18)）。我们还向语法检查的可执行文件传递了额外的编译标志（-std=c++17）。
- en: 'We can set a breakpoint and run the program as follows:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以设置断点并按以下方式运行程序：
- en: '[PRE30]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '**Figure 1.19**: LLDB session for Clang Tool test project'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '**图1.19**：Clang工具测试项目的LLDB会话'
- en: We set a breakpoint in the `clang``::``ParseAST` function ([Figure 1.19](#x1-30091r19),
    line 1). The function is the primary entry point for source code parsing. We run
    the program on *Line 3* and continue the execution after the breakpoint on *Line*
    *16*.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`clang::ParseAST`函数中设置了一个断点（[图1.19](#x1-30091r19)，第1行）。该函数是源代码解析的主要入口点。我们在第3行运行程序，并在第16行的断点后继续执行。
- en: We will use the same debugging techniques later in the book when we investigate
    Clang’s source code.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在书中调查Clang的源代码时，我们将使用相同的调试技术。
- en: 1.5 Summary
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.5 摘要
- en: In this chapter, we covered the history of the LLVM project, obtained the source
    code for LLVM, and explored its internal structure. We learned about the tools
    used to build LLVM, such as CMake and Ninja. We studied the various configuration
    options for building LLVM and how they can be used to optimize resources, including
    disk space. We built Clang and LLDB in debug and release modes and used the resulting
    tools to compile a basic program and run it with the debugger. We also created
    a simple Clang tool and ran it with the LLDB debugger.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了LLVM项目的历史，获取了LLVM的源代码，并探讨了其内部结构。我们了解了用于构建LLVM的工具，例如CMake和Ninja。我们研究了构建LLVM的各种配置选项以及如何使用它们来优化资源，包括磁盘空间。我们在调试和发布模式下构建了Clang和LLDB，并使用生成的工具编译了一个基本程序，并用调试器运行它。我们还创建了一个简单的Clang工具，并用LLDB调试器运行它。
- en: The next chapter will introduce you to the compiler design architecture and
    explain how it appears in the context of Clang . We will primarily focus on the
    Clang frontend, but we will also cover the important concept of the Clang driver
    – the backbone that manages all stages of the compilation process, from parsing
    to linking.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将向您介绍编译器设计架构，并解释它在Clang的上下文中的表现。我们将主要关注Clang前端，但也会涵盖Clang驱动程序的重要概念——它是管理编译过程所有阶段的骨干，从解析到链接。
- en: 1.6 Further reading
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.6 进一步阅读
- en: 'Getting Started with the LLVM System: [https://llvm.org/docs/GettingStarted.html](https://llvm.org/docs/GettingStarted.html)'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用LLVM系统：[https://llvm.org/docs/GettingStarted.html](https://llvm.org/docs/GettingStarted.html)
- en: 'Building LLVM with CMake: [https://llvm.org/docs/CMake.html](https://llvm.org/docs/CMake.html)'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用CMake构建LLVM：[https://llvm.org/docs/CMake.html](https://llvm.org/docs/CMake.html)
- en: 'Clang Compiler User’s Manual: [https://clang.llvm.org/docs/UsersManual.html](https://clang.llvm.org/docs/UsersManual.html)'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Clang编译器用户手册：[https://clang.llvm.org/docs/UsersManual.html](https://clang.llvm.org/docs/UsersManual.html)
