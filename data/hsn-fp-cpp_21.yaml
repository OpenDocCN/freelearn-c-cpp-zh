- en: Assessments
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估
- en: Chapter 1
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章
- en: '**What is an immutable function?**'
  id: totrans-2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是不可变函数？
- en: An immutable function is a function that doesn't change its argument values
    or the state of the program.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 不可变函数是一个不改变其参数值或程序状态的函数。
- en: '**How do you write an immutable function?**'
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何编写一个不可变函数？
- en: If you want the compiler to help you, make the arguments `const`.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望编译器帮助你，将参数设为`const`。
- en: '**How do immutable functions support code simplicity?**'
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不可变函数如何支持代码简洁性？
- en: Since they don't change their arguments, they remove any potential complexity
    from the code, thus allowing programmers to understand it better.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 因为它们不改变它们的参数，所以它们从代码中消除了任何潜在的复杂性，从而使程序员更好地理解它。
- en: '**How do immutable functions support a simple design?**'
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不可变函数如何支持简单设计？
- en: Immutable functions are boring because they only do computation. Therefore,
    they facilitate maintenance over long periods of time.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 不可变函数很无聊，因为它们只做计算。因此，它们有助于长时间的维护。
- en: '**What is a high-level function?**'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是高级函数？
- en: A high-level function is a function that receives another function as a parameter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 高级函数是一个接收另一个函数作为参数的函数。
- en: '**What examples of high-level functions can you give from STL?**'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: STL中可以给出哪些高级函数的例子？
- en: There are many examples of high-level functions in STL, particularly in the
    algorithms. `sort` is the example that we used in this chapter; however, if you
    look in the `<algorithm>` header, you will find many others, including `find`,
    `find_if`, `count`, `search`, and more.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: STL中有许多高级函数的例子，特别是在算法中。`sort`是我们在本章中使用的例子；然而，如果你查看`<algorithm>`头文件，你会发现许多其他例子，包括`find`、`find_if`、`count`、`search`等等。
- en: '**What are the advantages of functional loops over structured loops? What are
    their potential disadvantages?**'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 函数式循环相对于结构化循环的优势是什么？它们的潜在缺点是什么？
- en: Functional loops avoid off-by-one errors and express the intent of the code
    more clearly. They are also composable, thus allowing complex operations by chaining
    multiple loops. However, when composed, they require multiple passes through the
    collection, which could otherwise be avoided by using simple loops.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 函数式循环避免了一次循环错误，并更清晰地表达了代码的意图。它们也是可组合的，因此可以通过链接多个循环来进行复杂的操作。然而，当组合时，它们需要多次通过集合，而这可以通过使用简单循环来避免。
- en: '**What is OOP from the perspective of Alan Kay? How does it relate to functional
    programming?**'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Alan Kay的角度看OOP是什么？它如何与函数式编程相关？
- en: Alan Kay saw OOP as a way to structure code on the principles of cellular organisms.
    Cells are separate entities that communicate through chemical signals. Therefore,
    communication between small objects is the most important part of OOP.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Alan Kay将OOP视为按细胞有机体原则构建代码的一种方式。细胞是通过化学信号进行通信的独立实体。因此，小对象之间的通信是OOP最重要的部分。
- en: This means that we can use functional algorithms on data structures that are
    represented as objects without any conflict.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们可以在表示为对象的数据结构上使用函数算法而不会产生任何冲突。
- en: Chapter 2
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章
- en: '**What is a pure function?**'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是纯函数？
- en: 'A pure function is a function that has two constraints, as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 纯函数有两个约束条件，如下所示：
- en: It always returns the same output values for the same argument values.
  id: totrans-22
  prefs:
  - PREF_OL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它总是对相同的参数值返回相同的输出值。
- en: It doesn't have side effects.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它没有副作用。
- en: '**How is immutability related to pure functions?**'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不可变性与纯函数有什么关系？
- en: Pure functions are immutable because they don't change anything in the program
    state.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 纯函数是不可变的，因为它们不会改变程序状态中的任何内容。
- en: '**How can you tell the compiler to prevent changes to a variable that''s passed
    by value?**'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何告诉编译器防止传递的变量发生变化？
- en: 'Simply define the parameter as `const`, as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 只需将参数定义为`const`，如下所示：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**How can you tell the compiler to prevent changes to a variable that''s passed
    by reference?**'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何告诉编译器防止通过引用传递的变量发生变化？
- en: 'Simply define the parameter as `const&`, as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 只需将参数定义为`const&`，如下所示：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**How can you tell the compiler to prevent changes to a pointer address that''s
    passed by reference?**'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何告诉编译器防止通过引用传递的指针地址发生变化？
- en: 'If the pointer is passed by value, nothing is needed since all the changes
    will be local to the function:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果通过值传递指针，不需要任何操作，因为所有的更改都将局限于函数内部：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If the pointer is passed by reference, we need to tell the compiler that the
    address cannot change:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果通过引用传递指针，我们需要告诉编译器地址不能改变：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**How can you tell the compiler to prevent changes to the value that''s pointed
    by a pointer?**'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何告诉编译器防止指针指向的值发生变化？
- en: 'If the pointer is passed by value, we apply the same rule as for simple values
    that are passed by value:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果通过值传递指针，我们将应用与通过值传递的简单值相同的规则：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To prevent changes to both the value and the address when passing the pointer
    by reference, more use of the `const` keyword is required:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止通过引用传递指针时对值和地址的更改，需要更多地使用`const`关键字：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Chapter 3
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章
- en: '**What is the simplest lambda you can write?**'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以写一个最简单的lambda吗？
- en: 'The simplest lambda receives no parameters and returns a constant; it can be
    something like the following:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的lambda不接收参数并返回一个常量；可以是以下内容：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**How can you write a lambda that concatenates two string values passed as
    parameters?**'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何编写一个连接作为参数传递的两个字符串值的lambda？
- en: 'There are a few variations to this answer, depending on your preferred way
    of concatenating strings. The simplest way using STL is as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您喜欢的字符串连接方式，这个答案有几种变化。使用STL的最简单方法如下：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**What if one of the values is a variable that''s captured by value?**'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果其中一个值是按值捕获的变量怎么办？
- en: 'The answer is similar to the preceding solution, but using the value from context:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 答案类似于前面的解决方案，但使用上下文中的值：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Of course, we can also use the default capture by value notation, as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们也可以使用默认的按值捕获符号，如下所示：
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**What if one of the values is a variable that''s captured by reference?**'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果其中一个值是通过引用捕获的变量怎么办？
- en: 'There''s very little change from the previous solution, as shown in the following
    code, except if you want to protect against value changes:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 与前一个解决方案相比，除非您想要防止值的更改，否则几乎没有变化，如下所示：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If you want to protect against a value change, we need to cast to `const`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要防止值的更改，我们需要转换为`const`：
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**What if one of the values is a pointer that''s captured by value?**'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果其中一个值是以值方式捕获的指针会怎样？
- en: 'We could ignore the immutability, as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以忽略不可变性，如下所示：
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Alternatively, we could use a pointer to a `const` type:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以使用指向`const`类型的指针：
- en: '[PRE13]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Or, we could just use the value, as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以直接使用该值，如下所示：
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '**What if one of the values is a pointer that''s captured by reference?**'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果其中一个值是以引用方式捕获的指针会怎样？
- en: This allows us to change both the value pointed to and the pointer address inside
    the lambda.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们可以在lambda内部更改指向的值和指针地址。
- en: 'The simplest way is to ignore immutability, as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的方法是忽略不可变性，如下所示：
- en: '[PRE15]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If we want to constrain immutability, we could use the cast to `const`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要限制不可变性，我们可以使用转换为`const`：
- en: '[PRE16]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'However, it''s usually best to simply use the value instead, as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，通常最好的方法是直接使用该值，如下所示：
- en: '[PRE17]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '**What if both values are captured by value using the default capture specifier?**'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果两个值都使用默认捕获说明符以值方式捕获，会怎么样？
- en: 'This solution requires no arguments, just two values captured from the context:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这个解决方案不需要参数，只需要从上下文中捕获两个值：
- en: '[PRE18]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '**What if both values are captured by reference using the default capture specifier?**'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果两个值都使用默认捕获说明符以引用方式捕获，会怎么样？
- en: 'If we don''t care about mutating the values, we can do the following:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不关心值的变化，我们可以这样做：
- en: '[PRE19]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'To preserve immutability, we need to do the cast to `const`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持不可变性，我们需要将其转换为`const`：
- en: '[PRE20]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: There's no way to ensure immutability using just the default capture by reference
    specifier. Use capture by value instead.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 只使用默认的引用捕获说明符无法确保不可变性。请改用值方式捕获。
- en: '**How can you write the same lambda as a data member in a class that has the
    two string values as data members?**'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在具有两个字符串值作为数据成员的类中将相同的lambda写为数据成员？
- en: In a class, we need to specify the type of the lambda variable and whether we
    capture either the two data members or this.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在类中，我们需要指定lambda变量的类型以及是否捕获两个数据成员或this。
- en: 'The following code shows how to capture values by copy with the `[=]` syntax:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码显示了如何使用`[=]`语法以复制方式捕获值：
- en: '[PRE21]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The following code shows how to capture `this` instead:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码显示了如何捕获`this`：
- en: '[PRE22]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '**How can you write the same lambda as a static variable in the same class?**'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在同一类中将相同的lambda写为静态变量？
- en: 'We need to receive the data members as parameters, as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将数据成员作为参数接收，如下所示：
- en: '[PRE23]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We've seen that this is better than passing as parameter a whole instance of
    `AClass` because it reduces the coupling area between the function and the class.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到，这比传递整个`AClass`实例作为参数更好，因为它减少了函数和类之间的耦合区域。
- en: Chapter 4
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章
- en: '**What is functional composition?**'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是函数组合？
- en: Functional composition is an operation on functions. It takes two functions,
    *f* and *g*, and creates a third function, *C*, with the following property for
    any argument: *x*, *C(x) = f(g(x))*.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 函数组合是函数的操作。它接受两个函数*f*和*g*，并创建第三个函数*C*，对于任何参数*x*，*C(x) = f(g(x))*。
- en: '**Functional composition has a property that is usually associated with mathematical
    operations. What is it?**'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 函数组合具有通常与数学操作相关联的属性。它是什么？
- en: Functional composition is not commutative. For example, squaring the increment
    of a number is not the same as incrementing the square of a number.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 函数组合不是可交换的。例如，对一个数字的增量进行平方不同于对一个数字的平方进行增量。
- en: '**How can you turn an add function with two parameters into two functions with
    one parameter?**'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何将带有两个参数的加法函数转换为带有一个参数的两个函数？
- en: 'Consider the following function:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下函数：
- en: '[PRE24]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We can turn the preceding function into the following:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将前面的函数转换为以下形式：
- en: '[PRE25]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '**How can you write a C++ function that comprises two single parameter functions?**'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何编写一个包含两个单参数函数的C++函数？
- en: 'In the chapter, we saw that it''s very easy to do so with the help of templates
    and the magic of `auto` types:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到借助模板和`auto`类型的魔力，这是非常容易做到的：
- en: '[PRE26]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '**What are the advantages of functional composition?**'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 函数组合的优势是什么？
- en: Functional composition allows us to create complex behaviors by composing very
    simple functions. Additionally, it allows us to remove certain types of duplication.
    It also raises the probability of reuse by allowing small functions to be recomposed
    in infinite ways.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 函数组合允许我们通过组合非常简单的函数来创建复杂的行为。此外，它允许我们消除某些类型的重复。它还通过允许以无限方式重新组合小函数来提高重用的可能性。
- en: '**What are the potential disadvantages of implementing operations on functions?**'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现函数操作的潜在缺点是什么？
- en: The operations on functions can have very complex implementations and can become
    very difficult to understand. Abstractions come with a cost, and the programmer
    must always balance the benefits of composability and small code with the costs
    of using abstract operations.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的操作可以有非常复杂的实现，并且可能变得非常难以理解。抽象是有代价的，程序员必须始终平衡可组合性和小代码的好处与使用抽象操作的成本。
- en: Chapter 5
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章
- en: '**What is partial function application?**'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是部分函数应用？
- en: Partial function application is the operation of obtaining a new function that
    takes *N-1* parameters from a function, which in turn takes *N* parameters by
    binding one of the parameters to a value.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 部分函数应用是从一个接受*N*个参数的函数中获取一个新函数的操作，该函数通过将其中一个参数绑定到一个值来接受*N-1*个参数。
- en: '**What is currying?**'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是柯里化？
- en: Currying is the operation of splitting a function that takes *N* parameters
    into *N* function, with each taking one parameter.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 柯里化是将接受*N*个参数的函数拆分为*N*个函数的操作，每个函数接受一个参数。
- en: '**How does currying help to implement partial application?**'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 柯里化如何帮助实现部分应用？
- en: Given the curried function *f(x)(y)*, the partial application of *f* on *x =
    value* can be obtained by simply calling *f* with the value like this: *g = f(value)*.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 给定柯里化函数*f(x)(y)*，对*x = value*的*f*的部分应用可以通过简单地像这样调用*f*来获得：*g = f(value)*。
- en: '**How can we implement partial application in C++?**'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**我们如何在C++中实现部分应用？**'
- en: Partial application can be implemented manually in C++, but it's easier to implement
    it using the `bind` function from the `functional` header.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 部分应用可以在C++中手动实现，但使用`functional`头文件中的`bind`函数来实现会更容易。
