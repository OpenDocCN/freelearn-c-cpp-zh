- en: Best Practices
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最佳实践
- en: As with most things, it's best to avoid making mistakes rather than correcting
    them afterwards. This chapter looks at a number of common mistakes and design
    issues with multithreaded applications, and shows ways to avoid the common - and
    less common - issues.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 和大多数事情一样，最好是避免犯错，而不是事后纠正。本章将介绍多线程应用程序中的一些常见错误和设计问题，并展示避免常见和不太常见问题的方法。
- en: 'Topics in this chapter include:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主题包括：
- en: Common multithreading issues, such as deadlocks and data races.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常见的多线程问题，如死锁和数据竞争。
- en: The proper use of mutexes, locks, and pitfalls.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 互斥锁、锁的正确使用和陷阱。
- en: Potential issues when using static initialization.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态初始化时可能出现的潜在问题。
- en: Proper multithreading
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 正确的多线程
- en: In the preceding chapters, we have seen a variety of potential issues which
    can occur when writing multithreaded code. These range from the obvious ones,
    such as two threads not being able to write to the same location at the same time,
    to the more subtle, such as incorrect usage of a mutex.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们已经看到了编写多线程代码时可能出现的各种潜在问题。这些问题从明显的问题，比如两个线程无法同时写入同一位置，到更微妙的问题，比如互斥锁的不正确使用。
- en: There are also many issues with elements which aren't directly part of multithreaded
    code, yet which can nevertheless cause seemingly random crashes and other frustrating
    issues. One example of this is static initialization of variables. In the following
    sections, we'll be looking at all of these issues and many more, as well as ways
    to prevent ever having to deal with them.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多与多线程代码直接相关的问题，但它们仍然可能导致看似随机的崩溃和其他令人沮丧的问题。其中一个例子是变量的静态初始化。在接下来的章节中，我们将看到所有这些问题以及更多问题，并介绍避免不得不处理这些问题的方法。
- en: As with many things in life, they are interesting experiences, but you generally
    do not care to repeat them.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 和生活中的许多事情一样，它们是有趣的经历，但通常你不想重复它们。
- en: Wrongful expectations - deadlocks
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误的期望 - 死锁
- en: A deadlock is described pretty succinctly by its name already. It occurs when
    two or more processes attempt to gain access to a resource which the other is
    holding, while that other thread is simultaneously waiting to gain access to a
    resource which it is holding.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 死锁的描述已经相当简洁了。当两个或更多进程试图访问另一个进程持有的资源，而另一个线程同时正在等待访问它持有的资源时，就会发生死锁。
- en: 'For example:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: Thread 1 gains access to resource A
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 线程1获得对资源A的访问
- en: Thread 1 and 2 both want to gain access to resource B
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 线程1和2都想获得对资源B的访问
- en: Thread 2 wins and now owns B, with thread 1 still waiting on B
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 线程2获胜，现在拥有B，而线程1仍在等待B
- en: Thread 2 wants to use A now, and waits for access
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 线程2现在想要使用A，并等待访问。
- en: Both thread 1 and 2 wait forever for a resource
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 线程1和2都永远等待资源
- en: In this situation, we assume that the thread will be able to gain access to
    each resource at some point, while the opposite is true, thanks to each thread
    holding on to the resource which the other thread needs.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们假设线程最终能够访问每个资源，而事实上却相反，因为每个线程都持有另一个线程需要的资源。
- en: 'Visualized, this deadlock process would look like this:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化，这个死锁过程会像这样：
- en: '![](img/6bda8592-427c-467e-bfc6-e9a87991853a.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6bda8592-427c-467e-bfc6-e9a87991853a.png)'
- en: 'This makes it clear that two basic rules when it comes to preventing deadlocks
    are:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这清楚地表明了在防止死锁时的两个基本规则：
- en: Try to never hold more than one lock at any time.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽量不要同时持有多个锁。
- en: Release any held locks as soon as you can.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽快释放任何持有的锁。
- en: 'We saw a real-life example of this in [Chapter 11](3569125d-7316-4147-ba03-9c65cfd755d7.xhtml),
    *Thread Synchronization and Communication*, when we looked at the dispatcher demonstration
    code. This code involves two mutexes, to safe-guard access to two data structures:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第11章](3569125d-7316-4147-ba03-9c65cfd755d7.xhtml)中看到了一个现实生活中的例子，*线程同步和通信*，当我们查看调度程序演示代码时。这段代码涉及两个互斥锁，以保护对两个数据结构的访问：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The mutexes here are the `workersMutex` and `requestsMutex` variables. We can
    clearly see how at no point do we hold onto a mutex before trying to obtain access
    to the other one. We explicitly lock the `workersMutex` at the beginning of the
    method, so that we can safely check whether the workers data structure is empty
    or not.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的互斥锁是`workersMutex`和`requestsMutex`变量。我们可以清楚地看到，在任何时候我们都没有在尝试获取另一个互斥锁之前持有一个互斥锁。我们明确地在方法的开始处锁定`workersMutex`，这样我们就可以安全地检查工作数据结构是否为空。
- en: If it's not empty, we hand the new request to a worker. Then, as we are done
    with the workers, data structure, we release the mutex. At this point, we retain
    zero mutexes. Nothing too complex here, as we just use a single mutex.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不为空，我们将新请求交给一个工作线程。然后，当我们完成了对工作数据结构的操作后，我们释放互斥锁。此时，我们不再持有任何互斥锁。这里没有太复杂的东西，因为我们只使用了一个互斥锁。
- en: 'The interesting thing is in the else statement, for when there is no waiting
    worker and we need to obtain the second mutex. As we enter this scope, we retain
    one mutex. We could just attempt to obtain the `requestsMutex` and assume that
    it will work, yet this may deadlock, for this simple reason:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是在else语句中，当没有等待的工作线程并且我们需要获取第二个互斥锁时。当我们进入这个范围时，我们保留一个互斥锁。我们可以尝试获取`requestsMutex`并假设它会起作用，但这可能会导致死锁，原因很简单：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The accompanying function to the earlier preceding function we see also uses
    these two mutexes. Worse, this function runs in a separate thread. As a result,
    when the first function holds the `workersMutex` as it tries to obtain the `requestsMutex`,
    with this second function simultaneously holding the latter, while trying to obtain
    the former, we hit a deadlock.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面的函数相配套的函数也使用了这两个互斥锁。更糟糕的是，这个函数在一个单独的线程中运行。结果，当第一个函数持有`workersMutex`并尝试获取`requestsMutex`时，第二个函数同时持有后者，并尝试获取前者时，我们就陷入了死锁。
- en: In the functions, as we see them here, however, both rules have been implemented
    successfully; we never hold more than one lock at a time, and we release any locks
    we hold as soon as we can. This can be seen in both else cases, where as we enter
    them, we first release any locks we do not need any more.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在这里我们看到的函数中，这两条规则都已成功实施；我们从不同时持有多个锁，并且尽快释放我们持有的任何锁。这可以在两个else情况中看到，当我们进入它们时，我们首先释放不再需要的任何锁。
- en: 'As in either case, we do not need to check respectively, the workers or requests
    data structures any more; we can release the relevant lock before we do anything
    else. This results in the following visualization:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在任一情况下，我们都不需要再分别检查工作线程或请求数据结构；在做其他事情之前，我们可以释放相关的锁。这导致以下可视化效果：
- en: '![](img/75aa2220-ea54-4fa5-bf1f-bc61cf4d3a68.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/75aa2220-ea54-4fa5-bf1f-bc61cf4d3a68.png)'
- en: It is of course possible that we may need to use data contained in two or more
    data structures or variables; data which is used by other threads simultaneously.
    It may be difficult to ensure that there is no chance of a deadlock in the resulting
    code.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们可能需要使用两个或更多数据结构或变量中包含的数据；这些数据同时被其他线程使用。很难确保在生成的代码中没有死锁的可能性。
- en: Here, one may want to consider using temporary variables or similar. By locking
    the mutex, copying the relevant data, and immediately releasing the lock, there
    is no chance of deadlock with that mutex. Even if one has to write back results
    to the data structure, this can be done in a separate action.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，人们可能希望考虑使用临时变量或类似方法。通过锁定互斥量，复制相关数据，并立即释放锁，就不会出现死锁的可能性。即使必须将结果写回数据结构，也可以在单独的操作中完成。
- en: 'This adds two more rules in preventing deadlocks:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这增加了防止死锁的两条规则：
- en: Try to never hold more than one lock at a time.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽量不要同时持有多个锁。
- en: Release any held locks as soon as you can.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽快释放任何持有的锁。
- en: Never hold a lock any longer than is absolutely necessary.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永远不要持有锁的时间超过绝对必要的时间。
- en: When holding multiple locks, mind their order.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持有多个锁时，要注意它们的顺序。
- en: Being careless - data races
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 粗心大意 - 数据竞争
- en: A data race, also known as a race condition, occurs when two or more threads
    attempt to write to the same shared memory simultaneously. As a result, the state
    of the shared memory during and at the end of the sequence of instructions executed
    by each thread is by definition, non-deterministic.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 数据竞争，也称为竞争条件，发生在两个或更多线程同时尝试写入同一共享内存时。因此，每个线程执行的指令序列期间和结束时的共享内存状态在定义上是不确定的。
- en: 'As we saw in [Chapter 13](79530317-b310-4ba5-ad29-4f26d1a857aa.xhtml), *Debugging
    Multithreaded Code*, data races are reported quite often by tools used to debug
    multi-threaded applications. For example:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第13章](79530317-b310-4ba5-ad29-4f26d1a857aa.xhtml)中看到的，“调试多线程代码”，调试多线程应用程序的工具经常报告数据竞争。例如：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The code which generated the preceding warning was the following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 生成上述警告的代码如下：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Consider this code in the `Worker` instance:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑在`Worker`实例中的这段代码：
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We also have:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here, `running` is a Boolean variable that is being set to `false` (writing
    to it from one thread), signaling the worker thread that it should terminate its
    waiting loop, where reading the Boolean variable is done from a different process,
    the main thread versus the worker thread:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`running`是一个布尔变量，被设置为`false`（从一个线程写入），表示工作线程应该终止其等待循环，而读取布尔变量是从不同的进程进行的，主线程与工作线程：
- en: '![](img/c5cacd65-8eda-4ec0-b186-915b29ab3acc.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c5cacd65-8eda-4ec0-b186-915b29ab3acc.png)'
- en: This particular example's warning was due to a Boolean variable being simultaneously
    written and read. Naturally, the reason why this specific situation is safe has
    to do with atomics, as explained in detail in Chapter 8, *Atomic Operations -
    Working with the Hardware*.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这个特定示例的警告是由于一个布尔变量同时被写入和读取。当然，这种特定情况之所以安全，与原子操作有关，详细解释在第8章“原子操作 - 与硬件交互”中。
- en: 'The reason why even an operation like this is potentially risky is because
    the reading operation may occur while the variable is still in the process of
    being updated. In the case of, for example, a 32-bit integer, depending on the
    hardware architecture, updating this variable might be done in one operation,
    or multiple. In the latter case, the reading operation might read an intermediate
    value with unpredictable results:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 即使像这样的操作潜在风险很大的原因是，读取操作可能发生在变量仍在更新过程中。例如，对于32位整数，根据硬件架构，更新此变量可能是一次完成，或者多次完成。在后一种情况下，读取操作可能读取一个中间值，导致结果不确定：
- en: '![](img/1ce79d19-50bf-4450-b4b5-0299d486910a.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1ce79d19-50bf-4450-b4b5-0299d486910a.png)'
- en: 'A more comical situation occurs when multiple threads write to a standard with
    out using, for example, `cout`. As this stream is not thread-safe, the resulting
    output stream will contain bits and pieces of the input streams, from whenever
    either of the threads got a chance to write:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 更有趣的情况是，当多个线程写入一个标准输出时，例如，不使用`cout`。由于这个流不是线程安全的，结果输出流将包含输入流的片段，每当任一线程有机会写入时：
- en: '![](img/4bc9344c-37a8-4666-998a-ed75bac419fb.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4bc9344c-37a8-4666-998a-ed75bac419fb.png)'
- en: 'The basic rules to prevent data races thus are:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，防止数据竞争的基本规则是：
- en: Never write to an unlocked, non-atomic, shared resource
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永远不要向未锁定的、非原子的共享资源中写入
- en: Never read from an unlocked, non-atomic, shared resource
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永远不要从未锁定的、非原子的共享资源中读取
- en: This essentially means that any write or read has to be thread-safe. If one
    writes to shared memory, no other thread should be able to write to it at the
    same time. Similarly, when we read from a shared resource, we need to ensure that,
    at most, only other threads are also reading the shared resource.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上意味着任何写入或读取都必须是线程安全的。如果一个线程写入共享内存，那么其他线程就不应该能够同时写入它。同样，当我们从共享资源中读取时，我们需要确保最多只有其他线程也在读取共享资源。
- en: This level of mutual exclusion is naturally accomplished by mutexes as we have
    seen in the preceding chapters, with a refinement offered in read-write locks,
    which allows for simultaneous readers while having writes as fully mutually exclusive
    events.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这种级别的互斥自然是由互斥锁实现的，正如我们在前面的章节中所看到的，读写锁提供了一种改进，允许同时进行读取，同时将写入作为完全互斥的事件。
- en: Of course, there are also gotchas with mutexes, as we will see in the following
    section.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，互斥锁也有一些陷阱，我们将在下一节中看到。
- en: Mutexes aren't magic
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 互斥锁并不是魔术
- en: Mutexes form the basis of practically all forms of mutual exclusion APIs. At
    their core, they seem extremely simple, only one thread can own a mutex, with
    other threads neatly waiting in a queue until they can obtain the lock on the
    mutex.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 互斥锁构成了几乎所有形式的互斥API的基础。在它们的核心，它们似乎非常简单，只有一个线程可以拥有一个互斥锁，其他线程则整齐地等待在队列中，直到它们可以获得互斥锁上的锁。
- en: 'One might even picture this process as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至可以将这个过程想象成如下：
- en: '![](img/697b3b4a-2072-498c-a97c-64ab09b5f9a5.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/697b3b4a-2072-498c-a97c-64ab09b5f9a5.png)'
- en: The reality is of course less pretty, mostly owing to the practical limitations
    imposed on us by the hardware. One obvious limitation is that synchronization
    primitives aren't free. Even though they are implemented in the hardware, it takes
    multiple calls to make them work.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现实当然没有那么美好，主要是由于硬件对我们施加的实际限制。一个明显的限制是同步原语并不是免费的。即使它们是在硬件中实现的，也需要多次调用才能使它们工作。
- en: The two most common ways to implement mutexes in the hardware is to use either
    the **test-and-set** (**TAS**) or **compare-and-swap** (**CAS**) CPU features.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在硬件中实现互斥锁的两种最常见的方法是使用**测试和设置**（TAS）或**比较和交换**（CAS）CPU特性。
- en: Test-and-set is usually implemented as two assembly-level instructions, which
    are executed autonomously, meaning that they cannot be interrupted. The first
    instruction tests whether a certain memory area is set to a 1 or zero. The second
    instruction is executed only when the value is a zero (`false`). This means that
    the mutex was not locked yet. The second instruction thus sets the memory area
    to a 1, locking the mutex.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 测试和设置通常被实现为两个汇编级指令，这些指令是自主执行的，意味着它们不能被中断。第一条指令测试某个内存区域是否设置为1或零。第二条指令只有在值为零（`false`）时才执行。这意味着互斥锁尚未被锁定。因此，第二条指令将内存区域设置为1，锁定互斥锁。
- en: 'In pseudo-code, this would look like this:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在伪代码中，这将如下所示：
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Compare-and-swap is a lesser used variation on this, which performs a comparison
    operation on a memory location and a given value, only replacing the contents
    of that memory location if the first two match:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 比较和交换是一个较少使用的变体，它对内存位置和给定值执行比较操作，只有在前两者匹配时才替换该内存位置的内容：
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In either case, one would have to actively repeat either function until a positive
    value is returned:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何一种情况下，都需要积极重复任一函数，直到返回一个正值：
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here, a simple while loop is used to constantly poll the memory area (marked
    as volatile to prevent possibly problematic compiler optimizations). Generally,
    an algorithm is used for this which slowly reduces the rate at which it is being
    polled. This is to reduce the amount of pressure on the processor and memory systems.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，使用一个简单的while循环来不断轮询内存区域（标记为volatile以防止可能有问题的编译器优化）。通常，使用一个算法来慢慢减少轮询的频率。这是为了减少对处理器和内存系统的压力。
- en: 'This makes it clear that the use of a mutex is not free, but that each thread
    which waits for a mutex lock actively uses resources. As a result, the general
    rules here are:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这清楚地表明使用互斥锁并不是免费的，而每个等待互斥锁的线程都会积极地使用资源。因此，这里的一般规则是：
- en: Ensure that threads wait for mutexes and similar locks as briefly as possible.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保线程尽可能短暂地等待互斥锁和类似的锁。
- en: Use condition variables or timers for longer waiting periods.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于较长的等待期间，使用条件变量或定时器。
- en: Locks are fancy mutexes
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 锁是一种高级的互斥锁
- en: As we saw earlier in the section on mutexes, there are some issues to keep in
    mind when using mutexes. Naturally these also apply when using locks and other
    mechanisms based on mutexes, even if some of these issues are smoothed over by
    these APIs.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在互斥锁部分中所看到的，使用互斥锁时需要牢记一些问题。当然，当使用基于互斥锁的锁和其他机制时，这些问题也同样适用，即使其中一些问题被这些API平滑地解决了。
- en: One of the things one may get confused about when first using multithreading
    APIs is what the actual difference is between the different synchronization types.
    As we covered earlier in this chapter, mutexes underlie virtually all synchronization
    mechanisms, merely differing in the way that they use mutexes to implement the
    provided functionality.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当首次使用多线程API时，人们可能会对不同的同步类型之间的实际区别感到困惑。正如我们在本章前面所介绍的，互斥锁是几乎所有同步机制的基础，只是在它们使用互斥锁来实现所提供的功能的方式上有所不同。
- en: The important thing here is that they are not distinct synchronization mechanisms,
    but merely specializations of the basic mutex type. Whether one would use a regular
    mutex, a read/write lock, a semaphore - or even something as esoteric as a reentrant
    (recursive) mutex or lock - depends fully on the particular problem which one
    is trying to solve.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的重要一点是它们不是不同的同步机制，而只是基本互斥类型的特殊化。无论是使用常规互斥锁、读/写锁、信号量，甚至像可重入（递归）互斥锁或锁这样奇特的东西，完全取决于试图解决的特定问题。
- en: For the scheduler, we first encountered in [Chapter 11](3569125d-7316-4147-ba03-9c65cfd755d7.xhtml),
    *Thread Synchronization and Communication*, we used regular mutexes to protect
    the data structures containing the queued worker threads and requests. Since any
    access of either data structure would likely not only involve reading actions,
    but also the manipulation of the structure, it would not make sense there to use
    read/write locks. Similarly, recursive locks would not serve any purpose over
    the humble mutex.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 对于调度器，我们首先在[第11章](3569125d-7316-4147-ba03-9c65cfd755d7.xhtml)中遇到，*线程同步和通信*，我们使用常规互斥锁来保护包含排队工作线程和请求的数据结构。由于任何对任一数据结构的访问可能不仅涉及读取操作，还可能涉及结构的操作，因此在那里使用读/写锁是没有意义的。同样，递归锁也不会对谦虚的互斥锁有任何作用。
- en: 'For each synchronization problem, one therefore has to ask the following questions:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个同步问题，因此必须问以下问题：
- en: Which requirements do I have?
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我有哪些要求？
- en: Which synchronization mechanism best fits these requirements?
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哪种同步机制最适合这些要求？
- en: It's therefore attractive to go for a complex type, but generally it's best
    to stick with the simpler type which fulfills all the requirements. When it comes
    to debugging one's implementation, precious time can be saved over a fancier implementation.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，选择复杂类型是有吸引力的，但通常最好坚持满足所有要求的更简单的类型。当涉及调试自己的实现时，与使用更直接和低级的API相比，可以节省宝贵的时间。
- en: Threads versus the future
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 线程与未来
- en: Recently it has become popular to advise against the use of threads, instead
    advocating the use of other asynchronous processing mechanisms, such as `promise`.
    The reasons behind this are that the use of threads and the synchronization involved
    is complex and error-prone. Often one just wants to run a task in parallel and
    not concern oneself with how the result is obtained.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，有人开始建议不要使用线程，而是倡导使用其他异步处理机制，比如`promise`。背后的原因是使用线程和涉及的同步是复杂且容易出错的。通常，人们只想并行运行一个任务，而不用担心结果是如何获得的。
- en: For simple tasks which would run only briefly, this can certainly make sense.
    The main advantage of a thread-based implementation will always be that one can
    fully customize its behavior. With a `promise`, one sends in a task to run and
    at the end, one gets the result out of a `future` instance. This is convenient
    for simple tasks, but obviously does not cover a lot of situations.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 对于只运行短暂的简单任务，这当然是有意义的。基于线程的实现的主要优势始终是可以完全定制其行为。使用`promise`，可以发送一个要运行的任务，并在最后，从`future`实例中获取结果。这对于简单的任务很方便，但显然并不涵盖很多情况。
- en: The best approach here is to first learn threads and synchronization mechanisms
    well, along with their limitations. Only after that does it really make sense
    to consider whether one wishes to use a promise, `packaged_task`, or a full-blown
    thread.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里最好的方法是首先充分了解线程和同步机制，以及它们的限制。只有在那之后才真正有意义地考虑是否希望使用`promise`、`packaged_task`或完整的线程。
- en: Another major consideration with these fancier, future-based APIs is that they
    are heavily template-based, which can make the debugging and troubleshooting of
    any issues which may occur significantly less easy than when using the more straightforward
    and low-level APIs.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要考虑因素是，这些更复杂的、基于未来的API通常是基于模板的，这可能会使调试和解决可能发生的任何问题变得更加困难，而不像使用更直接和低级的API那样容易。
- en: Static order of initialization
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 静态初始化顺序
- en: 'Static variables are variables which are declared only once, essentially existing
    in a global scope, though potentially only shared between instances of a particular
    class. It''s also possible to have classes which are completely static:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 静态变量是只声明一次的变量，基本上存在于全局范围内，尽管可能只在特定类的实例之间共享。也可能有完全静态的类：
- en: '[PRE9]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As we can see here, static variables along with static functions seem like a
    very simple, yet powerful concept. While at its core this is true, there's a major
    issue which will catch the unwary when it comes to static variables and the initialization
    of classes. This is in the form of initialization order.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在这里所看到的，静态变量和静态函数似乎是一个非常简单但强大的概念。虽然从本质上讲这是正确的，但在静态变量和类的初始化方面存在一个主要问题，这将会让不注意的人掉入陷阱。这个问题就是初始化顺序。
- en: 'Imagine what happens if we wish to use the preceding class from another class''
    static initialization, like this:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，如果我们希望在另一个类的静态初始化中使用前面的类，就像这样：
- en: '[PRE10]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: While this may seem like it would work fine, adding the first string to the
    class' map structure with the integer as key means there is a very good chance
    that this code will crash. The reason for this is simple, there is no guarantee
    that `Foo::string` is initialized at the point when we call `Foo::init()`. Trying
    to use an uninitialized map structure will thus lead to an exception.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这似乎会很好地工作，将第一个字符串添加到类的映射结构中，整数作为键，但这段代码很有可能会崩溃。原因很简单，没有保证在调用`Foo::init()`时`Foo::string`已经初始化。因此，尝试使用未初始化的映射结构将导致异常。
- en: In short, the initialization order of static variables is basically random,
    leading to non-deterministic behavior if this is not taken into account.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，静态变量的初始化顺序基本上是随机的，如果不考虑这一点，就会导致非确定性行为。
- en: 'The solution to this problem is fairly simple. Basically, the goal is to make
    the initialization of more complex static variables explicit instead of implicit
    like in the preceding example. For this we modify the Foo class:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题的解决方案非常简单。基本上，目标是使更复杂的静态变量的初始化显式，而不是像前面的例子中那样隐式。为此，我们修改了Foo类：
- en: '[PRE11]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Starting at the top, we see that we no longer define the static map directly.
    Instead, we have a private function with the same name. This function's implementation
    is found at the bottom of this sample code. In it, we have a static pointer to
    a map structure with the familiar map definition.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 从顶部开始，我们看到我们不再直接定义静态映射。相反，我们有一个同名的私有函数。这个函数的实现在这个示例代码的底部找到。在其中，我们有一个指向具有熟悉映射定义的静态指针。
- en: When this function is called, a new map is created when there's no instance
    yet, due to it being a static variable. In the modified `init()` function, we
    see that we call the `strings()` function to obtain a reference to this instance.
    This is the explicit initialization part, as calling the function will always
    ensure that the map structure is initialized before we use it, solving the earlier
    problem we had.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用此函数时，如果尚未存在实例，则会创建一个新的映射，因为它是一个静态变量。在修改后的`init()`函数中，我们看到我们调用`strings()`函数来获取对此实例的引用。这是显式初始化的部分，因为调用该函数将始终确保在使用之前初始化映射结构，解决了我们先前遇到的问题。
- en: 'We also see a small optimization here: the `stringsStatic` variable we create
    is also static, meaning that we will only ever call the `strings()` function once.
    This makes repeated function calls unnecessary and regains the speed we would
    have had with the previous simple--but unstable--implementation.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以看到一个小优化：我们创建的`stringsStatic`变量也是静态的，这意味着我们只会调用`strings()`函数一次。这样就不需要重复调用函数，恢复了我们在先前简单但不稳定的实现中所具有的速度。
- en: The essential rule with static variable initialization is thus, always use explicit
    initialization for non-trivial static variables.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 静态变量初始化的基本规则是，对于非平凡的静态变量，始终使用显式初始化。
- en: Summary
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked at a number of good practices and rules to keep in
    mind when writing multithreaded code, along with some general advice. At this
    point, one should be able to avoid some of the bigger pitfalls and major sources
    of confusion when writing such code.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了一些编写多线程代码时需要牢记的良好实践和规则，以及一些建议。到这一点，人们应该能够避免一些编写此类代码时的较大陷阱和主要混淆源。
- en: In the next chapter, we will be looking at how to use the underlying hardware
    to our advantage with atomic operations, along with the `<atomics>` header that
    was also introduced with C++11.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看看如何利用底层硬件来实现原子操作，以及在C++11中引入的`<atomics>`头文件。
