["```cpp\n> sudo apt-get install build-essential git cmake valgrind \n```", "```cpp\n> sudo apt-get install build-essential git cmake\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter10\n```", "```cpp\n> cmake .\n> make recipe01_examples\n```", "```cpp\n> ./recipe01_example01\n\n> ./recipe01_example02\nfree(): double free detected in tcache 2\nAborted (core dumped)\n\n> ./recipe01_example03\n\n> ./recipe01_example04\n\n> ./recipe01_example05\n\n> ./recipe01_example06\ncount: 42\n\n> ./recipe01_example07\ncount: 33320633\n\n> ./recipe01_example08\ncount: 42\n```", "```cpp\nint main(void)\n{\n    auto ptr = new int;\n    *ptr = 42;\n}\n```", "```cpp\nint main(void)\n{\n    auto p = new int;\n    delete p;\n\n    delete p;\n}\n```", "```cpp\nint main(void)\n{\n    auto p = new int;\n    delete p;\n\n    *p = 42;\n}\n```", "```cpp\n#include <memory>\n\nint main(void)\n{\n    auto ptr = std::make_unique<int>();\n    *ptr = 42;\n}\n```", "```cpp\n#include <memory>\n#include <iostream>\n\nint main(void)\n{\n    auto ptr = std::make_unique<int[]>(100);\n    ptr[0] = 42;\n}\n```", "```cpp\nstd::atomic<int> count;\n\nvoid inc(int *val)\n{\n    count += *val;\n}\n```", "```cpp\nvoid inc(int *val)\n{\n    if (val != nullptr) {\n        count += *val;\n    }\n    else {\n        std::terminate();\n    }\n}\n```", "```cpp\nvoid inc(gsl::not_null<int *> val)\n{\n    count += *val;\n}\n```", "```cpp\nvoid inc(int *val)\n{\n    expects(val);\n    count += *val;\n}\n```", "```cpp\nvoid inc(int *val) [[expects: val]]\n{\n    count += *val;\n}\n```", "```cpp\nint main(void)\n{\n    auto ptr = std::make_unique<int>(1);\n    std::array<std::thread, 42> threads;\n\n    for (auto &thread : threads) {\n        thread = std::thread{inc, ptr.get()};\n    }\n\n    for (auto &thread : threads) {\n        thread.join();\n    }\n\n    std::cout << \"count: \" << count << '\\n';\n\n    return 0;\n}\n```", "```cpp\nstd::atomic<int> count;\n\nvoid inc(int *val)\n{\n    count += *val;\n}\n```", "```cpp\nint main(void)\n{\n    std::array<std::thread, 42> threads;\n\n    {\n        auto ptr = std::make_unique<int>(1);\n\n        for (auto &thread : threads) {\n            thread = std::thread{inc, ptr.get()};\n        }\n    }\n\n    for (auto &thread : threads) {\n        thread.join();\n    }\n\n    std::cout << \"count: \" << count << '\\n';\n\n    return 0;\n}\n```", "```cpp\nstd::atomic<int> count;\n\nvoid inc(std::shared_ptr<int> val)\n{\n    count += *val;\n}\n```", "```cpp\nint main(void)\n{\n    std::array<std::thread, 42> threads;\n\n    {\n        auto ptr = std::make_shared<int>(1);\n\n        for (auto &thread : threads) {\n            thread = std::thread{inc, ptr};\n        }\n    }\n\n    for (auto &thread : threads) {\n        thread.join();\n    }\n\n    std::cout << \"count: \" << count << '\\n';\n\n    return 0;\n}\n```", "```cpp\n> sudo apt-get install build-essential git cmake\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter10\n```", "```cpp\n> cmake .\n> make recipe02_examples\n```", "```cpp\n> ./recipe02_example01 \ncount: 42\n```", "```cpp\nvoid execute_threads(int *ptr);\n```", "```cpp\nvoid execute_threads(std::unique_ptr<int> ptr);\n```", "```cpp\nvoid execute_threads(std::shared_ptr<int> ptr);\n```", "```cpp\nstd::atomic<int> count;\n\nvoid\ninc(std::shared_ptr<int> val)\n{\n    count += *val;\n}\n```", "```cpp\nvoid\nexecute_threads(std::unique_ptr<int> ptr)\n{\n    std::array<std::thread, 42> threads;\n    auto shared = std::shared_ptr<int>(std::move(ptr));\n\n    for (auto &thread : threads) {\n        thread = std::thread{inc, shared};\n    }\n\n    for (auto &thread : threads) {\n        thread.join();\n    }\n}\n```", "```cpp\nint main(void)\n{\n    execute_threads(std::make_unique<int>(1));\n    std::cout << \"count: \" << count << '\\n';\n\n    return 0;\n}\n```", "```cpp\n> sudo apt-get install build-essential git cmake valgrind \n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter10\n```", "```cpp\n> cmake .\n> make recipe03_examples\n```", "```cpp\n> valgrind ./recipe03_example01\n...\n==7960== HEAP SUMMARY:\n==7960== in use at exit: 64 bytes in 2 blocks\n==7960== total heap usage: 3 allocs, 1 frees, 72,768 bytes allocated\n...\n\n> valgrind ./recipe03_example02\n...\n==7966== HEAP SUMMARY:\n==7966== in use at exit: 64 bytes in 2 blocks\n==7966== total heap usage: 4 allocs, 2 frees, 73,792 bytes allocated\n...\n\n> valgrind ./recipe03_example03\n...\n==7972== HEAP SUMMARY:\n==7972== in use at exit: 0 bytes in 0 blocks\n==7972== total heap usage: 4 allocs, 4 frees, 73,792 bytes allocated\n...\n\n> valgrind ./recipe03_example04\n...\n==7978== HEAP SUMMARY:\n==7978== in use at exit: 0 bytes in 0 blocks\n==7978== total heap usage: 4 allocs, 4 frees, 73,792 bytes allocated\n...\n```", "```cpp\nclass car;\nclass engine;\n```", "```cpp\nclass car\n{\n    friend void build_car();\n    std::shared_ptr<engine> m_engine;\n\npublic:\n    car() = default;\n};\n```", "```cpp\nclass engine\n{\n    friend void build_car();\n    std::shared_ptr<car> m_car;\n\npublic:\n    engine() = default;\n};\n```", "```cpp\nvoid build_car()\n{\n    auto c = std::make_shared<car>();\n    auto e = std::make_shared<engine>();\n\n    c->m_engine = e;\n    e->m_car = c;\n}\n```", "```cpp\nint main(void)\n{\n    build_car();\n    return 0;\n}\n```", "```cpp\nvoid build_car()\n{\n    auto c = std::make_shared<car>();\n    auto e = std::make_shared<engine>();\n\n    c->m_engine = e;\n    e->m_car = c;\n\n    std::cout << c.use_count() << '\\n';\n    std::cout << e.use_count() << '\\n';\n}\n```", "```cpp\n    auto c = std::make_shared<car>();\n    auto e = std::make_shared<engine>();\n```", "```cpp\n    c->m_engine = e;\n```", "```cpp\n    auto e = std::make_shared<engine>();\n```", "```cpp\n    auto c = std::make_shared<car>();\n```", "```cpp\nclass car\n{\n    friend void build_car();\n    std::shared_ptr<engine> m_engine;\n\npublic:\n    car() = default;\n};\n```", "```cpp\nclass engine\n{\n    friend void build_car();\n    std::weak_ptr<car> m_car;\n\npublic:\n    engine() = default;\n};\n```", "```cpp\nvoid build_car()\n{\n    auto c = std::make_shared<car>();\n    auto e = std::make_shared<engine>();\n\n    c->m_engine = e;\n    e->m_car = c;\n\n    std::cout << c.use_count() << '\\n';\n    std::cout << e.use_count() << '\\n';\n}\n```", "```cpp\nclass engine\n{\n    friend void build_car();\n    std::weak_ptr<car> m_car;\n\npublic:\n    engine() = default;\n\n    void test()\n    {\n        if (m_car.expired()) {\n            std::cout << \"car deleted\\n\";\n        }\n    }\n};\n```", "```cpp\nvoid build_car()\n{\n auto e = std::make_shared<engine>();\n\n {\n auto c = std::make_shared<car>();\n\n c->m_engine = e;\n e->m_car = c;\n }\n\n e->test();\n}\n```", "```cpp\n> sudo apt-get install build-essential git cmake\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter10\n```", "```cpp\n> cmake .\n> make recipe04_examples\n```", "```cpp\n> ./recipe04_example01\ndowncast successful!!\n\n> ./recipe04_example02\ndowncast successful!!\n```", "```cpp\nclass base\n{\npublic:\n    base() = default;\n    virtual ~base() = default;\n};\n```", "```cpp\nclass subclass : public base\n{\npublic:\n    subclass() = default;\n    ~subclass() override = default;\n};\n```", "```cpp\nint main(void)\n{\n    auto ptr = std::make_unique<subclass>();\n    foo(ptr.get());\n\n    return 0;\n}\n```", "```cpp\nvoid foo(base *b)\n{\n    if (dynamic_cast<subclass *>(b)) {\n        std::cout << \"downcast successful!!\\n\";\n    }\n}\n```", "```cpp\nclass base\n{\npublic:\n    base() = default;\n    virtual ~base() = default;\n};\n\nclass subclass : public base\n{\npublic:\n    subclass() = default;\n    ~subclass() override = default;\n};\n```", "```cpp\nvoid foo(std::shared_ptr<base> b)\n{\n    if (std::dynamic_pointer_cast<subclass>(b)) {\n        std::cout << \"downcast successful!!\\n\";\n    }\n}\n```", "```cpp\nint main(void)\n{\n    auto ptr = std::make_shared<subclass>();\n    foo(ptr);\n\n    return 0;\n}\n```", "```cpp\n> sudo apt-get install build-essential git cmake\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter10\n```", "```cpp\n> cmake .\n> make recipe05_examples\n```", "```cpp\n> ./recipe05_example01\n```", "```cpp\nint main(void)\n{\n    auto ptr = std::make_unique<int>();\n}\n```", "```cpp\nnamespace std\n{\n    template<typename T, typename... ARGS>\n    auto make_unique(ARGS... args)\n    {\n        return std::unique_ptr(new T(std::forward<ARGS>(args)...));\n    }\n}\n```", "```cpp\nint main(void)\n{\n    auto ptr = new int;\n}\n```", "```cpp\nvoid* operator new(size_t size)\n{\n    if (auto ptr = malloc(size)) {\n        return ptr;\n    }\n\n    throw std::bad_alloc();\n}\n```"]