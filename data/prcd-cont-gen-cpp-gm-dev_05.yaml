- en: Chapter 5. Creating Unique and Randomized Game Objects
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。创建独特和随机的游戏对象
- en: In this chapter, we're going to make our classes more random. We touched on
    a similar subject matter in [Chapter 3](ch03.html "Chapter 3. Using RNG with C++
    Data Types"), *Using RNG with C++ Data Types*, by giving the player random stats,
    so we'll continue further down that path and build bigger, more versatile procedural
    classes.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使我们的类更加随机。在[第3章](ch03.html“第3章。使用C++数据类型进行RNG”)中，我们涉及了类似的主题，通过给玩家随机的统计数据，所以我们将继续沿着这条路走下去，构建更大、更多功能的程序类。
- en: Having game items generated randomly is a great way to bring versatility and
    replayability to a game. For example, all the weapons in Borderlands are generated
    randomly; each chest and loot drop will contain a unique item. It brings an element
    of unknown to the game, and each time you find an item there's no knowing what
    it could be.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 随机生成游戏物品是为游戏带来多样性和可重玩性的好方法。例如，《无主之地》中的所有武器都是随机生成的；每个箱子和战利品掉落都会包含一个独特的物品。这给游戏带来了一种未知的元素，每次找到一个物品时都不知道它可能是什么。
- en: 'In this chapter, we''ll cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Giving objects random sprites
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给对象随机精灵
- en: Generating random traits for our player
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为我们的玩家生成随机特质
- en: Assigning stats randomly
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随机分配统计数据
- en: Procedurally generating a range of game items
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 程序生成一系列游戏物品
- en: Creating a random player character
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个随机的玩家角色
- en: In [Chapter 3](ch03.html "Chapter 3. Using RNG with C++ Data Types"), *Using
    RNG with C++ Data Types*, we gave our player random stats. Let's continue and
    develop the `player` object further. We'll give our `player` a random class, and
    use this to set an appropriate sprite and stats. We'll also give the player random
    traits that will buff certain stats.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](ch03.html“第3章。使用C++数据类型进行RNG”)，“使用C++数据类型进行RNG”，我们给了我们的玩家随机的统计数据。让我们继续进一步发展“player”对象。我们将给我们的“player”一个随机的职业，并使用这个来设置一个合适的精灵和统计数据。我们还将给玩家随机的特质，这将增强某些统计数据。
- en: Choosing a player class
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择玩家职业
- en: 'Let''s start by assigning the player a random class. The first step is to define
    an enumerator that will define the possible classes. We''ll place this with the
    rest of the enumerators in `Util.h`:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先为玩家分配一个随机的职业。第一步是定义一个枚举器，它将定义可能的职业。我们将把这个放在“Util.h”中的其他枚举器中：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now, in the constructor of the `player` class, we'll select one of these classes
    at random. To do this, we need to generate a number from 0 to 3, and use it as
    an index in the enumerator. We'll also create a variable to hold the selection
    in case we wish to use it later.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在“player”类的构造函数中，我们将随机选择其中一个类。为此，我们需要生成一个从0到3的数字，并将其用作枚举器中的索引。我们还将创建一个变量来保存选择，以防以后使用。
- en: 'We''ll start by declaring the variable in `Player.h`, as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从“Player.h”中声明变量，如下所示：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: We couldn't call this variable just 'class', as it's a keyword in C++. Keep
    keywords in mind when naming variables to avoid such clashes
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不能将这个变量称为“class”，因为它是C++中的关键字。在命名变量时要牢记关键字，以避免这种冲突
- en: 'In the constructor, let''s generate the random index and set the class as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在构造函数中，让我们生成随机索引并设置类如下：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: It's as simple as that. Every time a player is now created, a random class will
    be selected, which can be used to implement different behavior and looks.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这么简单。现在每次创建玩家时，都会选择一个随机的职业，这可以用来实现不同的行为和外观。
- en: An overview of sprites and textures
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 精灵和纹理概述
- en: Before we start working with objects' sprites, let's just take a moment to look
    at how sprites and textures are handled in our game. As you may already know,
    to draw objects in SFML we need a sprite and a texture resource. When we want
    to change the sprite, we actually just need to change the `sf::Texture` object
    to which `sf::sprite` is holding a reference. Given this, sprites are stored in
    the object that they belong to, and textures are stored in a single, `static texture
    manager class`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始处理对象的精灵之前，让我们花点时间看看我们的游戏是如何处理精灵和纹理的。您可能已经知道，要在SFML中绘制对象，我们需要一个精灵和一个纹理资源。当我们想要改变精灵时，我们实际上只需要改变“sf::sprite”持有引用的“sf::Texture”对象。鉴于此，精灵存储在它们所属的对象中，而纹理存储在单个“静态纹理管理器类”中。
- en: '`Textures` are an expensive and heavy resource, so keeping them in all in a
    single object, and interacting with them only via references, is ideal. It means
    that we don''t have to worry about moving them or them making objects heavy. The
    `TextureManager` class is used in the following way:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: “纹理”是一种昂贵且沉重的资源，因此将它们全部放在一个对象中，并仅通过引用与它们交互，是理想的。这意味着我们不必担心它们的移动或使对象变得沉重。 “TextureManager”类的使用方式如下：
- en: To add a `texture` to a game, we statically call `TextureManager::AddTexture`
    and pass the path to the sprite that we want to load, and the function returns
    the index of the texture in the manager class.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要向游戏添加“纹理”，我们静态调用“TextureManager::AddTexture”，并传递我们想要加载的精灵的路径，该函数返回管理器类中纹理的索引。
- en: To get a `texture` out of the `manager`, we statically call `TextureManager::GetTexture`,
    passing the `ID` of the `texture` that we want as the only parameter. In return,
    we get a reference to the `texture` if it exists.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要从“manager”中获取“纹理”，我们静态调用“TextureManager::GetTexture”，将我们想要的“纹理”的“ID”作为唯一参数传递。作为回报，如果存在，我们将得到对“纹理”的引用。
- en: What this all means for our game is that instead of storing `textures` in objects,
    we instead store their texture manager IDs. Whenever we want the actual `texture`,
    we just call the `TextureManager::GetTexture` function, as previously described.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这对我们的游戏意味着，我们不再将“纹理”存储在对象中，而是存储它们的纹理管理器ID。每当我们想要实际的“纹理”时，我们只需调用先前描述的“TextureManager::GetTexture”函数。
- en: Tip
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The `texture resource manager` class does some other clever stuff such as avoiding
    the loading of the same textures twice. I advise you to take a look at the class
    and employ the same approach in your own games to ensure resources are handled
    correctly.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: “纹理资源管理器”类还做了一些其他聪明的事情，比如避免两次加载相同的纹理。我建议您查看该类，并在自己的游戏中采用相同的方法，以确保资源得到正确处理。
- en: Setting an appropriate sprite
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置适当的精灵
- en: Now that the `player` class has a random class generated, let's update the sprite
    to reflect this. The player is animated, and therefore has a collection of eight
    texture IDs that are defined in an array.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`player`类已经生成了一个随机类，让我们更新精灵以反映这一点。玩家是有动画的，因此有一个包含在数组中定义的八个纹理ID的集合。
- en: 'As it currently stands, the player loads the same fixed set of textures:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，玩家加载相同的固定纹理集：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Let's update this so that if we generate a warrior we will load the warrior
    textures, and if we load a mage we'll load the mage textures, and so on. This
    could be achieved by simply using the player's class in a switch statement to
    load the appropriate textures.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新这样，如果我们生成一个战士，我们将加载战士纹理，如果我们加载一个法师，我们将加载法师纹理，依此类推。这可以通过简单地使用玩家的类在`switch`语句中加载适当的纹理来实现。
- en: 'However, this will create lots of duplicate code:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这将创建大量重复的代码：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: For each class type we would have the same code repeated, with the only change
    being the name of the class in the resource. Taking this into consideration, we
    can approach this from a better angle and generate resource paths during the runtime.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每种类别，我们将重复相同的代码，唯一的变化是资源中类别的名称。考虑到这一点，我们可以从更好的角度来处理这个问题，并在运行时生成资源路径。
- en: Tip
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Try implementing this yourself before reading the following code. If you get
    stuck, the code is always here, and you may even come up with your own approach!
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在阅读以下代码之前，请尝试自己实现这个。如果遇到困难，代码总是在这里，你甚至可以想出自己的方法！
- en: 'We''ll declare a string variable that can hold the name of the class, and set
    this by performing a `switch` statement on the player''s class once it is set.
    We can then load textures using this variable instead of a fixed class name:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将声明一个字符串变量，可以保存类的名称，并通过对玩家的类执行`switch`语句来设置这个变量。然后我们可以使用这个变量来加载纹理，而不是固定的类名：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, every time we load the game, the player will be a random class and have
    a matching sprite to show that, as shown in the following screenshot.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每次加载游戏时，玩家将是一个随机类，并且有一个匹配的精灵来显示，如下截图所示。
- en: '![Setting an appropriate sprite](img/B04920_05_01.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![设置适当的精灵](img/B04920_05_01.jpg)'
- en: 'Now that the player class is set, we can update the UI and player projectile
    to reflect it. To do so, we''ll need to get the player class from the player.
    So, let''s first add a simple getter function to the player class. Don''t forget
    the declaration:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在玩家类已经设置，我们可以更新UI和玩家投射物以反映它。为此，我们需要从玩家那里获取玩家类。因此，让我们首先向玩家类添加一个简单的getter函数。不要忘记声明：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'These are simple changes; instead of having fixed code, we can switch the player''s
    class and load the correct sprites in each case. Let''s start with the projectile.
    The sprite for this is set in `Game::Initialize`, and all that we have to do now
    is choose the right sprite for the class:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是简单的改变；我们可以切换玩家的类，并在每种情况下加载正确的精灵，而不是固定的代码。让我们从投射物开始。这个精灵设置在`Game::Initialize`中，现在我们所要做的就是为类选择正确的精灵：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now, let's move on to the player UI. At the top-left of the screen we have the
    player's stats, and one of these sprites shows the player. Since the class is
    dynamic, we need to update this sprite accordingly. This sprite is set in `Game::LoadUI`,
    and it will be set in a way that is similar to how we set the projectile. We'll
    leave this as an exercise for you to complete on your own.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续进行玩家UI。在屏幕左上角，我们有玩家的统计数据，其中一个精灵显示了玩家。由于类是动态的，我们需要相应地更新这个精灵。这个精灵设置在`Game::LoadUI`中，并且它将以与我们设置投射物的方式相似的方式设置。我们将把这留给你自己完成。
- en: Buffing the player stats
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 增强玩家统计数据
- en: Now that the player has a class, another thing that we can do is to buff stats
    accordingly. We'll do this by giving certain values an initial value before we
    distribute the player's stat points as usual.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在玩家有了一个类，我们可以做的另一件事是相应地增强统计数据。我们将在分配玩家的统计点之前给某些值一个初始值。
- en: 'We already have a `switch` statement that we''re using to load the appropriate
    textures, so we can add the code to this. As usual, we won''t hard-code this value,
    but we will leave it to the RNG gods, as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经有一个`switch`语句，我们用它来加载适当的纹理，所以我们可以添加代码到这里。像往常一样，我们不会硬编码这个值，而是留给随机数神，如下所示：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: With this we can make certain classes more likely to have higher stat points
    in a given skill, and by using a random number we can induce yet more randomness
    and variance in the `player` objects that we can create.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们可以使某些类更有可能在给定技能中具有更高的统计点，并且通过使用随机数，我们可以在我们可以创建的`player`对象中引入更多的随机性和差异。
- en: Random character traits
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 随机角色特征
- en: We have five stats in the game, namely `Attack`, `Defense`, `Strength`, `Dexterity`,
    and `Stamina`. Let's create traits that affect each of these so that each character
    will be predisposed to certain stats and therefore certain play styles! This will
    mean that players have to change their gameplay to suit every character that they
    generate.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏中有五个统计数据，即`Attack`，`Defense`，`Strength`，`Dexterity`和`Stamina`。让我们创建影响每个统计数据的特征，以便每个角色都倾向于某些统计数据，因此也倾向于某些游戏风格！这意味着玩家必须改变他们的游戏方式来适应他们生成的每个角色。
- en: 'We need to start by defining these traits, so let''s create an enumerator to
    do so. We''ll declare the following in `Util.h`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要首先定义这些特征，所以让我们创建一个枚举器来做到这一点。我们将在`Util.h`中声明以下内容：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now we need to create a variable in the `player` class that will store the
    currently active traits. We''ll give the player two traits, so will declare an
    array of that size. However, instead of hard-coding the value, we''ll create a
    static `const` to define the trait count, as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要在`player`类中创建一个变量来存储当前活动的特征。我们将给玩家两个特征，因此将声明一个具有该大小的数组。但是，我们将创建一个静态`const`来定义特征计数，而不是硬编码该值，如下所示：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Tip
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: We always want to make code as flexible as possible. Therefore, working with
    a static `const` with an appropriate name is preferred over a hard-coded value
    in this case.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们总是希望尽可能地使代码灵活。因此，在这种情况下，使用具有适当名称的静态`const`比硬编码的值更可取。
- en: 'Feel free to give the player more traits; simply create a larger array and
    amend the code as required as we move forward. Now, let''s define the variable
    that will hold the traits:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 随时可以给玩家更多特征；只需创建一个更大的数组，并根据需要修改代码，我们继续前进。现在，让我们定义将保存特征的变量：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: To assign traits randomly to a player, we now need to generate two random numbers
    and use them as indices from the `PLAYER_TRAIT` enumerator. We'll encapsulate
    this behavior in its own function. That way, we can change the player's traits
    at will while the game is running.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要将特征随机分配给玩家，现在我们需要生成两个随机数，并将它们用作`PLAYER_TRAIT`枚举类型的索引。我们将把这种行为封装在自己的函数中。这样，我们可以在游戏运行时随意改变玩家的特征。
- en: 'Let''s declare the following function in the `Player` class:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`Player`类中声明以下函数：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We need this function to generate two indices and then use them in a switch
    statement to increase the appropriate stat, much like what we did when determining
    the `player` class. Let''s get this added, as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要这个函数来生成两个索引，然后在switch语句中使用它们来增加适当的状态，就像我们确定`player`类时所做的那样。让我们添加这个，如下所示：
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: While this approach succeeds in generating random traits, it has a big flaw;
    there is no check to ensure that two unique traits are generated. We could give
    a player five traits, and though it's quite unlikely, we could give them the same
    one five times. One of the exercises at the end of the chapter is to amend this,
    ensuring that only unique trait indices are generated. I highly suggest giving
    it a go.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这种方法成功地生成了随机特征，但它有一个很大的缺陷；没有检查以确保生成了两个唯一的特征。我们可以给玩家五个特征，虽然这很不太可能，但我们可以给他们五次相同的特征。本章末尾的一个练习是修改这一点，确保只生成唯一的特征索引。我强烈建议尝试一下。
- en: 'With this function written, we now just need to make a call to it in the constructor
    of our player:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个函数的编写，现在我们只需要在玩家的构造函数中调用它：
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Every time a player is now created, they will have two randomly selected traits.
    The final step is to draw the player traits in the UI. For that, we're going to
    need to get the traits from the player and modify the stat sprites.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在每次创建玩家时，他们将随机选择两个特征。最后一步是在UI中绘制玩家的特征。为此，我们需要从玩家那里获取特征并修改状态精灵。
- en: Returning the player traits array
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 返回玩家特征数组
- en: The traits are stored in an array, and C++ does not allow us to return an entire
    array from a function. To get around this, we need to do some funky stuff. So,
    let's quickly branch off and take a look at how we can tackle this problem.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 特征存储在数组中，C++不允许我们从函数中返回整个数组。为了解决这个问题，我们需要做一些花哨的事情。因此，让我们快速分支出去，看看我们如何解决这个问题。
- en: 'To start, the following function needs to be declared in `Player.h`, as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在`Player.h`中需要声明以下函数，如下所示：
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We''ll give it the following definition:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将给出以下定义：
- en: '[PRE16]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Tip
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Be aware that this function means that the player trait variables can be altered.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这个函数意味着玩家特征变量可以被改变。
- en: 'An array is simply a collection of values that are stored sequentially in the
    memory. The following diagram shows how this looks:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 数组只是顺序存储在内存中的值的集合。以下图表显示了它的外观：
- en: '![Returning the player traits array](img/B04920_05_02.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![返回玩家特征数组](img/B04920_05_02.jpg)'
- en: 'Taking this into consideration, if we return the address of the first element,
    we can then find the rest of the value by reading the following memory sequentially.
    To demonstrate this, have a look at the following two lines, which work in the
    same way:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一点，如果我们返回第一个元素的地址，然后可以通过顺序读取以下内存来找到其余的值。为了证明这一点，看一下以下两行，它们的工作方式相同：
- en: '[PRE17]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: So, while we don't return the full array, we do return the first element, and
    that's all we need. We can now access the array in the same way as we normally
    would.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，虽然我们不返回完整的数组，但我们返回第一个元素，这就是我们所需要的。现在我们可以以与通常相同的方式访问数组。
- en: Setting trait sprites
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置特征精灵
- en: All that's left now is to draw the traits in the main `Game` class. We have
    already drawn the player's stats at the bottom of the window. So, to indicate
    the one that has been buffed by a trait, we can make the sprite bigger and switch
    to its alternate texture. Stat sprites are loaded and initialized in the `Game::LoadUI`
    function.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在剩下的就是在主`Game`类中绘制特征。我们已经在窗口底部绘制了玩家的状态。因此，为了指示被特征增强的状态，我们可以使精灵变大，并切换到其备用纹理。状态精灵在`Game::LoadUI`函数中加载和初始化。
- en: 'Before we start, we need to know how many traits the player has. So, let''s
    add a quick `GetTraitCount()` function in the `player` object to give us this
    information; don''t forget to add the declaration to Player.h also:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，我们需要知道玩家有多少特征。因此，让我们在`player`对象中添加一个快速的`GetTraitCount()`函数来给我们这个信息；不要忘记在Player.h中添加声明：
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now, in `Game::LoadUI`, once we have loaded the stat sprites, we can make a
    call to this function and construct a loop to iterate that number of times, as
    follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`Game::LoadUI`中，一旦我们加载了状态精灵，我们就可以调用这个函数，并构建一个循环来迭代这个次数，如下所示：
- en: '[PRE19]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, we need to check each trait, and set its sprite scale to `1.2f` to make
    it slightly bigger than its neighbors. We''ll also switch to its alternate texture
    with a white background. This has already been set up in the project, so all that
    we need to do is make the switch in the following way:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要检查每个特征，并将其精灵比例设置为`1.2f`，使其比邻近的精灵稍大。我们还将切换到其备用纹理，带有白色背景。这已经在项目中设置好了，所以我们需要做的就是以以下方式进行切换：
- en: '[PRE20]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now if we run the game, we can clearly see which sprites are currently been
    buffed by traits, as shown in the following screenshot. We hooked up their behavior
    earlier. So we know that these icons are having an effect on the character''s
    stats:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们运行游戏，我们可以清楚地看到哪些精灵当前被特征增强，如下截图所示。我们之前已经连接了它们的行为。因此，我们知道这些图标对角色的状态产生了影响。
- en: '![Setting trait sprites](img/B04920_05_03.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![设置特征精灵](img/B04920_05_03.jpg)'
- en: Procedurally generating an enemy class
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过程生成敌人类
- en: Now that the player is well and truly generated procedurally, let's apply some
    of this to the enemies. We currently have two main enemy classes, namely `Slime`
    and `Humanoid`. `Slime` is a simple slime enemy, but our `humanoid` class is here
    for us to expand upon. Currently, the class loads the sprites of a skeleton, but
    let's make it so that it can be a number of humanoid-like enemies; in our case,
    it will be either a goblin or a skeleton.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在玩家已经完全生成，让我们将一些应用到敌人身上。我们目前有两个主要的敌人类，即“史莱姆”和“人形”。 “史莱姆”是一个简单的史莱姆敌人，但我们的“人形”类是为了扩展而存在的。目前，该类加载骷髅的精灵，但让它可以成为多种人形敌人；在我们的情况下，它可以是哥布林或骷髅。
- en: We could have made individual classes for these enemies, but since most of their
    code will be the same, it doesn't make sense. Instead, we have this ambiguous
    `humanoid` class that can take the form of a humanoid enemy. All that we need
    to do is change the sprite, and the way we distribute stats if we want them to
    play differently. From this we can create a great number of different enemies
    from a `single` class. We'll use this same approach on potions soon!
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们本可以为这些敌人制作单独的类，但由于它们的大部分代码都是相同的，这是没有意义的。相反，我们有这个模糊的“人形”类，可以成为人形敌人的形式。我们所需要做的就是改变精灵，以及如果我们希望它们有不同的玩法，我们分配统计数据的方式。从这里我们可以从“单一”类中创建许多不同的敌人。我们很快也会在药水上使用相同的方法！
- en: 'For now, we''ll start by defining an enumerator in `Util.h` to denote the different
    types of humanoid enemies:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将从“Util.h”中定义一个枚举器，表示不同类型的人形敌人：
- en: '[PRE21]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Now, if we cast our minds back to the `player` constructor, we generated a class
    and performed a switch on that variable to perform class-dependent behavior. We'll
    use the exact same approach here. We'll generate a random enemy type from the
    enumerator that we just defined, and then set the sprites and stats accordingly.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们回想一下“player”构造函数，我们生成了一个类，并对该变量执行了一个开关，以执行依赖于类的行为。我们将在这里使用完全相同的方法。我们将从我们刚刚定义的枚举器中生成一个随机敌人类型，然后相应地设置精灵和统计数据。
- en: 'In `Humanoid::Humanoid`, let''s select a random humanoid type and create a
    string to hold the name of the enemy, as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在“Humanoid::Humanoid”中，让我们选择一个随机的人形类型，并创建一个字符串来保存敌人的名称，如下所示：
- en: '[PRE22]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'With this done, if you run the game now, you will see that there are both goblin
    and skeleton enemies that are spawning from a `single` class, as shown in the
    following screenshot:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些后，如果现在运行游戏，您将看到有哥布林和骷髅敌人从“单一”类中生成，如下截图所示：
- en: '![Procedurally generating an enemy class](img/B04920_05_04.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![过程生成敌人类](img/B04920_05_04.jpg)'
- en: Procedural items
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 程序化物品
- en: Now that the player and enemies have been taken care of, let's turn our attention
    to items. We have a number of classes that can have their member variables assigned
    randomly. We'll set up the `potion` class the way we set up the `humanoid` class,
    where we created a number of distinct objects from a `single` class.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在玩家和敌人都已经处理好了，让我们把注意力转向物品。我们有许多类可以随机分配其成员变量。我们将设置“药水”类的方式与我们设置“人形”类的方式相同，从“单一”类中创建多个不同的对象。
- en: Random Gem and Heart classes
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 随机宝石和心类
- en: We'll start with the smallest classes, namely `Heart` and `Gem`. These are very
    simple classes that have a single variable that is currently hard-coded. Let's
    update this so that their values are randomly generated every time they are created.
    Since we want this to happen each time an object is created, we'll place it in
    the items' constructors.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从最小的类开始，即“心”和“宝石”。这些都是非常简单的类，目前只有一个硬编码的变量。让我们更新一下，使它们的值在创建时随机生成。由于我们希望每次创建对象时都发生这种情况，我们将把它放在物品的构造函数中。
- en: 'In `Gem::Gem`, we''ll make the following change:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在“Gem::Gem”中，我们将进行以下更改：
- en: '[PRE23]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In `Heart::Heart`, we''ll make the following change:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在“Heart::Heart”中，我们将进行以下更改：
- en: '[PRE24]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: If we run the game now, and have a quick look around, you will see that these
    items provide different score and health values. Perfect!
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果现在运行游戏，并快速查看一下，您将看到这些物品提供不同的分数和生命值。完美！
- en: '![Random Gem and Heart classes](img/B04920_05_05.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![随机宝石和心类](img/B04920_05_05.jpg)'
- en: Random gold class
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 随机金类
- en: With the last two items, we simply generated a random value. With the gold item,
    we're going to take this a little further. We will use this random value to determine
    the sprite that the object should have.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 对于最后两个物品，我们只是生成了一个随机值。对于金物品，我们将进一步进行。我们将使用这个随机值来确定对象应该具有的精灵。
- en: 'To do so, we will split the total gold value range into three bands. We will
    define a lower range, an upper range, and that leaves everything else for the
    middle range. For example, if we were to generate a gold value between 0 and 10,
    we could have the following:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们将把总金值范围分为三个段。我们将定义一个较低范围，一个较高范围，剩下的就是中间范围。例如，如果我们要生成0到10之间的金值，我们可以有以下情况：
- en: Anything less than 3 is small
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小于3的都是小的
- en: Anything over 7 is large
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大于7的都是大的
- en: Anything else is medium
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他任何都是中等
- en: 'By doing this, we can set a sprite that matches the gold value. We''ll put
    this code in the constructor, because it''s code that should be called every time
    we create a gold object, and we''ll never need to call its behavior manually:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，我们可以设置与金值匹配的精灵。我们将把这段代码放在构造函数中，因为这是应该在每次创建金对象时调用的代码，我们永远不需要手动调用它的行为：
- en: '[PRE25]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You can see that we generate a random gold value, then simply use a couple
    of `if` statements to define our ranges. Let''s run the game again and check out
    the gold objects. You will see that their sprites vary, and with that, so does
    the amount of gold that they are worth when picked up:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到我们生成了一个随机金值，然后简单地使用了几个“if”语句来定义我们的范围。让我们再次运行游戏，看看金对象。您将看到它们的精灵变化，因此被拾取时的金值也会有所不同：
- en: '![Random gold class](img/B04920_05_06.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![随机金类](img/B04920_05_06.jpg)'
- en: The random potion class
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 随机药水类
- en: For the biggest class update, we'll turn our attention to the `potion` class.
    This class currently has a fixed sprite and doesn't give the player anything.
    With the `humanoid` class, we can generate a random type and essentially create
    two different enemies from a `single` class. We're going to use this same approach
    for the potions.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 对于最大的类更新，我们将把注意力转向`potion`类。这个类目前有一个固定的精灵，并且不给玩家任何东西。通过`humanoid`类，我们可以生成一个随机类型，并从`单一`类中实质上创建两个不同的敌人。我们将使用相同的方法来处理药水。
- en: Creating a random potion
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个随机药水
- en: 'To start, let''s define an enumerator in `Util.h` that denotes all potion types.
    We''ll create one for each stat, as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们在`Util.h`中定义一个枚举器，表示所有的药水类型。我们将为每个统计数据创建一个：
- en: '[PRE26]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: To save a lot of typing, the potion class already has the member variables and
    the `getter` functions for each possible stat, we just need to use them. One thing
    that we will add is a variable to hold the potion type, and a function to return
    it. We'll need this information when picking the object up!
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 为了节省大量的输入，药水类已经有了每种可能统计数据的成员变量和`getter`函数，我们只需要使用它们。我们将添加的一个是用来保存药水类型的变量，以及一个返回它的函数。当捡起物品时，我们需要这些信息！
- en: 'Let''s declare the following in `Potion.h`:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`Potion.h`中声明以下内容：
- en: '[PRE27]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '`GetPotionType` is a simple `getter` function, so before moving forward let''s
    quickly give it a body:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`GetPotionType`是一个简单的`getter`函数，所以在继续之前让我们快速给它一个主体：'
- en: '[PRE28]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: If we look at the initializer list for Potion, you'll notice it sets all of
    the stat variables to 0\. From this point we can select a random type and set
    its sprite and corresponding stat, leaving the rest at their default value of
    0 as we won't use them.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看Potion的初始化列表，你会注意到它将所有的统计变量都设置为0。从这一点开始，我们可以选择一个随机类型，并设置它的精灵和相应的统计数据，将其余部分保持在它们的默认值0，因为我们不会使用它们。
- en: 'To start we''ll generate a random value to denote its type, and create a variable
    that we''ll use to store the sprite path. The following code needs to go in `Potion::Potion`:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将生成一个随机值来表示其类型，并创建一个变量来存储精灵路径。以下代码需要放在`Potion::Potion`中：
- en: '[PRE29]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'With a type selected, we can switch this value, set the appropriate stat, and
    give `spriteFilePath` the appropriate resource path, as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 有了选定的类型，我们可以切换这个值，设置适当的统计数据，并给`spriteFilePath`设置适当的资源路径，如下所示：
- en: '[PRE30]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Finally, we just need to set the item sprite and type in the following way,
    and we''re done. Note that this type is different from the potion type:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们只需要以以下方式设置物品精灵和类型，然后就完成了。请注意，这种类型与药水类型不同：
- en: '[PRE31]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'If we run our game now, and kill a couple of enemies until we get a potion
    drop, we should see that the potion type changes. From a single class we''ve created
    5 potions, created at runtime, that give buffs also generated at runtime:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在运行游戏，并杀死一些敌人，直到我们得到一个药水掉落，我们应该看到药水类型发生变化。从一个单一类中，我们创建了5种药水，运行时创建，提供了增益，也是在运行时生成的。
- en: '![Creating a random potion](img/B04920_05_07.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个随机药水](img/B04920_05_07.jpg)'
- en: Determining potion pickups
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 确定药水捡起
- en: Now that we have a `single` class that has five different potential buffs, we
    need to determine the potion that we're picking up. This is where the `Potion::GetType`
    function comes in handy. When we come in contact with a `potion` object, we can
    check what type of `potion` it is and use that to determine which stats getter
    function that we will call.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个`单一`类，有五种不同的潜在增益，我们需要确定我们正在捡起的药水。这就是`Potion::GetType`函数派上用场的地方。当我们接触到`药水`对象时，我们可以检查`药水`的类型，并使用它来确定我们将调用哪个统计数据获取函数。
- en: For example, if we pick up a `potion` and its type is `POTION::ATTACK`, then
    we know that we need to call the `Potion::GetAttack` function. The item pickup
    code lies in the `Game::UpdateItems` function. In this function, we check for
    collisions with the object and check what type of item it is.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们捡起一个`药水`，它的类型是`POTION::ATTACK`，那么我们知道我们需要调用`Potion::GetAttack`函数。物品捡起代码位于`Game::UpdateItems`函数中。在这个函数中，我们检查与对象的碰撞，并检查它是什么类型的物品。
- en: 'When we have determined that we have picked up a potion, we need to call the
    `Potion::GetPotionType` function, but we have a problem. Since we are utilizing
    polymorphism to store all the items in a single collection, the type of the potion
    item at this point is `Item`. To get access to the `Potion::GetPotionType` function,
    we need to cast the item using `dynamic_cast`:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们确定我们捡起了一个药水时，我们需要调用`Potion::GetPotionType`函数，但是我们有一个问题。由于我们利用多态性将所有物品存储在单个集合中，此时药水物品的类型是`Item`。为了访问`Potion::GetPotionType`函数，我们需要使用`dynamic_cast`进行转换：
- en: Tip
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you are unsure about why we're using `dynamic_cast` here and `static_cast`
    elsewhere, read up on the different types of casts.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不确定为什么我们在这里使用`dynamic_cast`而在其他地方使用`static_cast`，请阅读不同类型的转换。
- en: 'Let''s get this case added to the pickup code in `Game::UpdateItems`:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这种情况添加到`Game::UpdateItems`中的捡起代码中：
- en: '[PRE32]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We''ve now identified that we''ve picked up a `potion` and `cast` that item
    to a `potion` object. Next, we can check the type of the potion and call the appropriate
    `getter` function to get the `potion` value. Finally, we''ll update the corresponding
    stat in the player, as follows:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在确定了我们捡起了一个`药水`并将该物品转换为`药水`对象。接下来，我们可以检查药水的类型，并调用适当的`getter`函数来获取`药水`值。最后，我们将更新玩家的相应统计数据，如下所示：
- en: '[PRE33]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: With this the potion system is complete. From a `single` class we've created
    five distinct potions, and all the values have been generated randomly.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个药水系统就完成了。从一个`单一`类中，我们创建了五种不同的药水，所有值都是随机生成的。
- en: Exercises
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: 'To help you test your knowledge of this chapter''s content, the following are
    a few exercises that you should work on. They are not imperative to the rest of
    the book, but working on them will help you assess your strengths and weaknesses
    in the material covered:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助你测试本章内容的知识，以下是一些练习题，你应该完成。它们对于本书的其余部分并不是必要的，但是完成它们将帮助你评估所涵盖材料的优势和劣势：
- en: Add your own trait to the `player` class. There is a spare trait resource included
    in the project that you can use.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给`player`类添加你自己的特性。项目中包含了一个备用的特性资源，你可以使用。
- en: When generating `player` traits, we identified that it was possible to give
    the player the same trait multiple times. Improve the `Player::SetRandomTraits`
    function so that that's no longer possible.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在生成`player`特性时，我们发现可能会多次给玩家相同的特性。改进`Player::SetRandomTraits`函数，使这种情况不再可能。
- en: The stats that we have given to the player and enemies aren't hooked up to how
    much damage they deal or take. Hook these stats up so that they affect the player
    and enemy to a greater extent.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们给玩家和敌人的属性并没有与他们造成或承受多少伤害挂钩。将这些属性挂钩起来，使它们对玩家和敌人产生更大的影响。
- en: Summary
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at how to make game objects unique and random, giving
    them random properties, sprites, and variations. With this approach, the range
    of possible items that a game can generate is almost endless. When we have multiple
    classes that differ only slightly, we can design ambiguous classes that are highly
    flexible and greatly increase variety.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了如何使游戏对象独特和随机化，赋予它们随机属性、精灵和变化。通过这种方法，游戏可以生成的物品种类几乎是无限的。当我们有多个类只有轻微不同时，我们可以设计模糊的类，这些类非常灵活，大大增加了多样性。
- en: In the next chapter, we're going to step up our procedural efforts. We'll move
    away from the simple setting of member variables randomly, and we'll experiment
    with the creation of procedural art and graphics. We'll create textures procedurally
    for enemies, and alter the level sprites to give a unique feel to each floor of
    the dungeon.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将加强我们的程序化工作。我们将摆脱简单地随机设置成员变量的方式，尝试创建程序化艺术和图形。我们将为敌人程序化地创建纹理，并改变关卡精灵，为地牢的每一层赋予独特的感觉。
