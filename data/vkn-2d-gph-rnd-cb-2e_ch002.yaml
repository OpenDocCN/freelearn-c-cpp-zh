- en: 1 Establishing a Build Environment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1 建立构建环境
- en: Join our book community on Discord
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加入我们的 Discord 书籍社区
- en: '![](img/file40.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/file40.png)'
- en: '[https://packt.link/unitydev](https://packt.link/unitydev)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/unitydev](https://packt.link/unitydev)'
- en: 'In this chapter, you will learn how to set up a 3D graphics development environment
    on your computer for Windows and Linux operating systems. You will learn which
    software tools are needed to run the demos from this book’s source code bundle:
    [https://github.com/PacktPublishing/3D-Graphics-Rendering-Cookbook-Second-Edition](https://github.com/PacktPublishing/3D-Graphics-Rendering-Cookbook-Second-Edition).
    We will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何在 Windows 和 Linux 操作系统上设置 3D 图形开发环境。您将了解运行本书源代码包中的演示所需的软件工具：[https://github.com/PacktPublishing/3D-Graphics-Rendering-Cookbook-Second-Edition](https://github.com/PacktPublishing/3D-Graphics-Rendering-Cookbook-Second-Edition)。我们将涵盖以下主题：
- en: Setting up our development environment on Microsoft Windows
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Microsoft Windows 上设置我们的开发环境
- en: Setting up our development environment on Linux
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Linux 上设置我们的开发环境
- en: Installing the Vulkan SDK for Microsoft Windows and Linux
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 Microsoft Windows 和 Linux 安装 Vulkan SDK
- en: Managing dependencies
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理依赖项
- en: Getting the demo data
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取演示数据
- en: Creating utilities for CMake projects
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 CMake 项目创建实用工具
- en: Using the GLFW library
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 GLFW 库
- en: Multithreading with Taskflow
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Taskflow 进行多线程
- en: Setting up our development environment on Microsoft Windows
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Microsoft Windows 上设置我们的开发环境
- en: In this recipe, we will get started by setting up our development environment
    on Windows. We will go through the installation of each of the required tools
    individually and in detail.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将从在 Windows 上设置我们的开发环境开始。我们将逐个详细安装每个必需的工具。
- en: Getting ready
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 准备工作
- en: In order to start working with the examples from this book in a Microsoft Windows
    environment, you will need some essential tools to be installed in your system.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在 Microsoft Windows 环境中开始使用本书的示例，您需要在系统中安装一些基本工具。
- en: The most important one is Microsoft Visual Studio 2022\. Additional tools include
    the **Git** version control system, the **CMake** build tool, and the **Python**
    programming language. Throughout this book, we use these tools on the command
    line only, so no GUI add-ons will be required.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 其中最重要的是 Microsoft Visual Studio 2022。其他工具包括 **Git** 版本控制系统、**CMake** 构建工具和 **Python**
    编程语言。在整个本书中，我们仅在命令行上使用这些工具，因此不需要任何 GUI 扩展。
- en: How to do it...
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Let’s install each of the required tools individually.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐个安装所需的每个工具。
- en: Microsoft Visual Studio 2022
  id: totrans-20
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Microsoft Visual Studio 2022
- en: 'Follow the given steps to install Microsoft Visual Studio 2022:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤安装 Microsoft Visual Studio 2022：
- en: Open [https://visualstudio.microsoft.com](https://visualstudio.microsoft.com)
    and download the Visual Studio 2022 Community Edition installer.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 [https://visualstudio.microsoft.com](https://visualstudio.microsoft.com)
    并下载 Visual Studio 2022 社区版安装程序。
- en: Start the installer and follow the on-screen instructions. For the purposes
    of this book, you need to have a native C++ compiler for the 64-bit Intel platform.
    Other components of the Visual Studio development environment are not required
    to run this book’s bundled sample code.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动安装程序并按照屏幕上的说明操作。为了本书的目的，您需要一个适用于 64 位 Intel 平台的本地 C++ 编译器。Visual Studio 开发环境的其他组件不需要运行本书的捆绑示例代码。
- en: Git
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Git
- en: 'Follow the given steps to install Git:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤安装 Git：
- en: Download the latest Git installer from [https://git-scm.com/downloads](https://git-scm.com/downloads),
    run it, and follow the on-screen instructions.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://git-scm.com/downloads](https://git-scm.com/downloads) 下载最新的 Git 安装程序，运行它，并按照屏幕上的说明操作。
- en: 'We assume that Git is added to the system `PATH` variable. Enable the option
    shown in the following image during installation:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们假设 Git 已添加到系统 `PATH` 变量中。在安装过程中启用以下图像中显示的选项：
- en: '![Figure 1.1 – Git from the command line and also from third-party software](img/file1.png)'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Figure 1.1 – Git from the command line and also from third-party software](img/file1.png)'
- en: Figure 1.1 – Git from the command line and also from third-party software
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 1.1 – 从命令行和第三方软件中运行 Git
- en: Select **Use Windows’ default console window**, as shown in the next screenshot.
    This option will allow you to build the scripts in this book from any directory
    on your computer.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **使用 Windows 的默认控制台窗口**，如图下一张截图所示。此选项将允许您从计算机上的任何目录构建本书中的脚本。
- en: '![Figure 1.2 – Use Windows’ default console window](img/file2.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![Figure 1.2 – Use Windows’ default console window](img/file2.png)'
- en: Figure 1.2 – Use Windows’ default console window
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2 – 使用 Windows 的默认控制台窗口
- en: 'Git is complex software and a huge topic in itself. We recommend the book *Mastering
    Git* written by Jakub Narębski and published by Packt Publishing, [https://www.packtpub.com/application-development/mastering-git](https://www.packtpub.com/application-development/mastering-git),
    along with *Git Essentials: Developer’s Guide to Git* by François Dupire and the
    downloadable ebook *ProGit*, Second Edition, by Scott Chacon and Ben Straub, [https://git-scm.com/book/en/v2](https://git-scm.com/book/en/v2).'
  id: totrans-33
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Git 是一种复杂的软件，本身就是一个巨大的主题。我们推荐 Jakub Narębski 编写的《精通 Git》一书，由 Packt Publishing
    出版，[https://www.packtpub.com/application-development/mastering-git](https://www.packtpub.com/application-development/mastering-git)，以及
    François Dupire 编写的《Git 基础：Git 开发者指南》和可下载的电子书《ProGit》，第二版，由 Scott Chacon 和 Ben
    Straub 编写，[https://git-scm.com/book/en/v2](https://git-scm.com/book/en/v2)。
- en: CMake
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: CMake
- en: 'To install CMake, please follow the given steps:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 CMake，请按照以下步骤操作：
- en: Download the latest 64-bit CMake installer from [https://cmake.org/download/](https://cmake.org/download/).
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://cmake.org/download/](https://cmake.org/download/) 下载最新的 64 位 CMake
    安装程序。
- en: Run it and follow the on-screen instructions. If you already have an earlier
    version of CMake installed, it is recommended to uninstall it first.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行它并遵循屏幕上的说明。如果您已经安装了 CMake 的早期版本，建议首先卸载它。
- en: 'Select the **Add CMake to the system PATH for all users** option, as shown
    here:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**将 CMake 添加到系统 PATH 以供所有用户使用**选项，如图所示：
- en: '![Figure 1.3: Add CMake to the system PATH for all users](img/file3.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.3：将 CMake 添加到系统 PATH 以供所有用户使用](img/file3.png)'
- en: 'Figure 1.3: Add CMake to the system PATH for all users'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3：将 CMake 添加到系统 PATH 以供所有用户使用
- en: Python
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Python
- en: 'To install Python, please follow the given steps:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 Python，请按照以下步骤操作：
- en: Download the latest Python 3 installer for 64-bit systems from [https://www.python.org/downloads/](https://www.python.org/downloads/).
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://www.python.org/downloads/](https://www.python.org/downloads/) 下载适用于
    64 位系统的最新 Python 3 安装程序。
- en: Run it and follow the on-screen instructions.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行它并遵循屏幕上的说明。
- en: 'During the installation, you also need to install the `pip` feature. Choose
    **Custom Installation** and make sure that the **pip** checkbox is checked, as
    shown:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在安装过程中，您还需要安装 `pip` 功能。选择**自定义安装**并确保**pip**复选框被勾选，如图所示：
- en: '![Figure 1.4 – Custom installation](img/file4.png)'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 1.4 – 自定义安装](img/file4.png)'
- en: Figure 1.4 – Custom installation
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 1.4 – 自定义安装
- en: Once the installation has completed, make sure to add the folder containing
    `python.exe` to the PATH environment variable.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，请确保将包含 `python.exe` 的文件夹添加到 PATH 环境变量中。
- en: There’s more...
  id: totrans-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更多...
- en: Besides Git, there are other popular version control systems, like SVN and Mercurial.
    While developing large software systems, you will inevitably face the need to
    download some libraries from a non-Git repository. We recommend getting familiar
    with Mercurial.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 Git，还有其他流行的版本控制系统，如 SVN 和 Mercurial。在开发大型软件系统时，您不可避免地需要从非 Git 仓库下载一些库。我们建议熟悉
    Mercurial。
- en: While working in the command-line environment, it is useful to have some tools
    from the Unix environment, like `wget`, `grep`, `find`, etc. The **GnuWin32**
    project provides precompiled binaries of these tools, which can be downloaded
    from [http://gnuwin32.sourceforge.net](http://gnuwin32.sourceforge.net).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令行环境中工作时，拥有一些来自 Unix 环境的工具很有用，如 `wget`、`grep`、`find` 等。**GnuWin32** 项目提供了这些工具的预编译二进制文件，可以从
    [http://gnuwin32.sourceforge.net](http://gnuwin32.sourceforge.net) 下载。
- en: 'Furthermore, in the Windows environment, orthodox file managers make file manipulation
    a lot easier. We definitely recommend giving the open-source Far Manager a try.
    You can download it from [https://farmanager.com](https://farmanager.com). It
    looks like this:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在 Windows 环境中，传统的文件管理器使文件操作变得容易得多。我们强烈建议尝试开源的 Far Manager。您可以从 [https://farmanager.com](https://farmanager.com)
    下载它。它看起来像这样：
- en: '![Figure 1.5 – The look and feel of Far Manager](img/file5.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.5 – Far Manager 的外观和感觉](img/file5.png)'
- en: Figure 1.5 – The look and feel of Far Manager
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5 – Far Manager 的外观和感觉
- en: Setting up our development environment on Linux
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Linux 上设置我们的开发环境
- en: Linux is becoming more and more attractive for 3D graphics development, including
    gaming technology. Let’s go through a list of tools necessary to start working
    with this book on Linux.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 正在变得越来越吸引人，尤其是在 3D 图形开发领域，包括游戏技术。让我们来了解一下在 Linux 上开始使用本书所需的一系列活动工具。
- en: Getting ready
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 准备工作
- en: We assume you have a desktop computer with a Debian-based GNU/Linux operating
    system installed. We also assume you are familiar with the `apt` package manager.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设您已安装了基于 Debian 的 GNU/Linux 操作系统的台式电脑。我们还假设您熟悉 `apt` 软件包管理器。
- en: To start developing modern graphics programs on Linux, you need to have up-to-date
    video card drivers installed that support Vulkan 1.3\. To build examples from
    this book, a C++ compiler with C++20 support is required. We tested our code with
    Clang and the GNU Compiler Collection.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始在 Linux 上开发现代图形程序，您需要安装支持 Vulkan 1.3 的最新视频卡驱动程序。要构建本书中的示例，需要一个支持 C++20 的
    C++ 编译器。我们使用 Clang 和 GNU 编译器集合测试了我们的代码。
- en: How to do it...
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'On a Debian-based system, the installation process is straightforward; however,
    before installing any of the required packages, we recommend running the following
    command to ensure your system is up to date:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于 Debian 的系统上，安装过程很简单；然而，在安装任何必需的软件包之前，我们建议运行以下命令以确保您的系统是最新的：
- en: '[PRE0]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Let us go through the list of essential software and install whatever is missing.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一检查必需的软件列表并安装任何缺失的软件。
- en: GCC Compiler
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: GCC 编译器
- en: 'Assuming you have a properly configured `apt` package manager, run the following
    command to install the GCC compiler and related tools. We tested GCC 12:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您已正确配置了 `apt` 软件包管理器，请运行以下命令来安装 GCC 编译器和相关工具。我们测试了 GCC 12：
- en: '[PRE1]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: CMake
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CMake
- en: 'The CMake build tool is also available in the standard repositories. To install
    CMake, type the following command:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: CMake 构建工具也存在于标准仓库中。要安装 CMake，请输入以下命令：
- en: '[PRE2]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: CMake 3.19 or above is sufficient for the code samples in this book.
  id: totrans-70
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 本书中的代码示例需要 CMake 3.19 或更高版本。
- en: Git
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Git
- en: 'To install the Git version control system, run the following command:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 Git 版本控制系统，请运行以下命令：
- en: '[PRE3]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Python 3
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python 3
- en: 'To install the Python 3 package, run the following command:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 Python 3 包，请运行以下命令：
- en: '[PRE4]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The exact version of Python may vary between Linux distributions. Any version
    of Python 3 will suffice for the scripts in this book.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的确切版本可能因 Linux 发行版而异。本书中的脚本任何版本的 Python 3 都足够使用。
- en: Now we are done with the basic packages and can install graphics-related software.
    Let us move on to the next recipe to learn how to set up the Vulkan SDK.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了基本软件包的安装，可以安装与图形相关的软件了。让我们继续到下一个菜谱，学习如何设置 Vulkan SDK。
- en: Installing the Vulkan SDK for Windows and Linux
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Windows 和 Linux 的 Vulkan SDK
- en: In this recipe, we will learn how to get started with the Vulkan SDK. We will
    describe the requirements and procedure for installing the LunarG Vulkan SDK for
    Windows and Linux.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将学习如何开始使用 Vulkan SDK。我们将描述安装 Windows 和 Linux 的 LunarG Vulkan SDK 的要求和步骤。
- en: 'In principle, it is possible to write Vulkan applications without the Vulkan
    SDK, using only C/C++ header files provided by Khronos. You can get these header
    files by cloning the Git repository: [https://github.com/KhronosGroup/Vulkan-Headers](https://github.com/KhronosGroup/Vulkan-Headers).
    However, it is advised to install the complete Vulkan SDK to be able to use Vulkan
    validation layers and a standalone GLSL compiler.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在原则上，可以在没有 Vulkan SDK 的情况下编写 Vulkan 应用程序，只需使用 Khronos 提供的 C/C++ 头文件。您可以通过克隆
    Git 仓库来获取这些头文件：[https://github.com/KhronosGroup/Vulkan-Headers](https://github.com/KhronosGroup/Vulkan-Headers)。然而，建议安装完整的
    Vulkan SDK，以便能够使用 Vulkan 验证层和独立的 GLSL 编译器。
- en: Getting ready
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Make sure you have the latest up-to-date video card drivers for your operating
    system. On Windows, you can download video drivers from your GPU vendor’s website.
    For Ubuntu, refer to the documentation: [https://ubuntu.com/server/docs/nvidia-drivers-installation](https://ubuntu.com/server/docs/nvidia-drivers-installation).'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您的操作系统有最新的视频卡驱动程序。在 Windows 上，您可以从 GPU 供应商的网站上下载视频驱动程序。对于 Ubuntu，请参阅文档：[https://ubuntu.com/server/docs/nvidia-drivers-installation](https://ubuntu.com/server/docs/nvidia-drivers-installation)。
- en: How to do it...
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To install Vulkan 1.3 on Linux, follow these steps:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Linux 上安装 Vulkan 1.3，请按照以下步骤操作：
- en: Open the [https://www.lunarg.com/vulkan-sdk/](https://www.lunarg.com/vulkan-sdk/)
    page in a browser and download the latest Vulkan SDK for Windows or Linux.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开 [https://www.lunarg.com/vulkan-sdk/](https://www.lunarg.com/vulkan-sdk/)
    页面并下载适用于 Windows 或 Linux 的最新 Vulkan SDK。
- en: 'After the download has finished, run the Windows installer file and follow
    the on-screen instructions. If you have Ubuntu 22.04 installed, use the following
    commands provided on LunarG’s website:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载完成后，运行 Windows 安装程序文件并按照屏幕上的说明操作。如果您已安装 Ubuntu 22.04，请使用 LunarG 网站上提供的以下命令：
- en: '[PRE5]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'For other Linux distributions, you may need to download the `.tar.gz` SDK archive
    from [https://vulkan.lunarg.com/sdk/home#linux](https://vulkan.lunarg.com/sdk/home#linux)
    and unpack it manually. You need to set environment variables to locate the Vulkan
    SDK components. Use the `source` command to run a config script that will do it
    for you:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于其他Linux发行版，您可能需要从[https://vulkan.lunarg.com/sdk/home#linux](https://vulkan.lunarg.com/sdk/home#linux)下载`.tar.gz`
    SDK存档并手动解包。您需要设置环境变量以定位Vulkan SDK组件。使用`source`命令运行一个配置脚本，它会为您完成这项工作：
- en: '[PRE6]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: There’s more...
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 还有更多...
- en: When developing cross-platform applications, it is good to use similar tools
    for each platform. Since Linux supports GCC and Clang compilers, using GCC or
    Clang on Windows ensures that you avoid the most common portability issues. A
    complete package of C and C++ compilers can be downloaded from [http://www.equation.com/servlet/equation.cmd?fa=fortran](http://www.equation.com/servlet/equation.cmd?fa=fortran).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发跨平台应用程序时，使用每个平台上的类似工具是很好的。由于Linux支持GCC和Clang编译器，因此在Windows上使用GCC或Clang可以确保您避免最常见的可移植性问题。C和C++编译器的完整包可以从[http://www.equation.com/servlet/equation.cmd?fa=fortran](http://www.equation.com/servlet/equation.cmd?fa=fortran)下载。
- en: An alternative way to use GCC on Windows is to install the MSYS2 environment
    from [https://www.msys2.org](https://www.msys2.org). It features the package management
    system used in Arch Linux, **Pacman**.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上使用GCC的另一种方法是安装来自[https://www.msys2.org](https://www.msys2.org)的MSYS2环境。它具有在Arch
    Linux中使用的包管理系统，**Pacman**。
- en: Managing dependencies
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理依赖项
- en: This book’s examples use multiple open-source libraries. To manage these dependencies,
    we use a free and open-source tool called **Bootstrap**. The tool is similar to
    Google’s repo tool and works on both Windows and Linux, as well as on macOS for
    that matter.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的示例使用了多个开源库。为了管理这些依赖项，我们使用了一个名为**Bootstrap**的免费和开源工具。该工具类似于Google的repo工具，并且可以在Windows、Linux以及macOS上使用。
- en: In this recipe, we will learn how to use Bootstrap to download libraries using
    the Vulkan Headers repository as an example.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将学习如何使用Bootstrap下载库，以Vulkan Headers仓库为例。
- en: Getting ready
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Make sure you have Git and Python installed as described in the previous recipes.
    After that, clone the Bootstrap repository from GitHub:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您已按照前面的食谱安装了Git和Python。之后，从GitHub克隆Bootstrap仓库：
- en: '[PRE7]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How to do it...
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let’s look into the source code bundle and run the `bootstrap.py` script:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们查看源代码包并运行`bootstrap.py`脚本：
- en: '[PRE8]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The script will start downloading all the third-party libraries required to
    compile and run the source code bundle for this book. On Windows, the tail of
    the output should look as follows.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本将开始下载编译和运行本书源代码包所需的全部第三方库。在Windows上，输出尾部的样子应该如下所示。
- en: '[PRE9]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Once the download process is complete, we are ready to build the project.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 下载过程完成后，我们就可以开始构建项目了。
- en: How it works...
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '**Bootstrap** takes a JSON file as input, opening `bootstrap.json` from the
    current directory by default. It contains metadata of libraries we want to download;
    for example, their names, where to retrieve them from, a specific version to download,
    and so on. Besides that, each used library can have some additional instructions
    on how to build it. Those can be patches applied to the original library, unpacking
    instructions, SHA hashes to check archive integrity, and many others.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bootstrap** 以JSON文件作为输入，默认情况下从当前目录打开`bootstrap.json`。它包含我们想要下载的库的元数据；例如，它们的名称、从哪里获取它们、要下载的特定版本，等等。除此之外，每个使用的库还可以有一些关于如何构建它的附加说明。这些可以是应用于原始库的补丁、解包说明、用于检查存档完整性的SHA散列，以及许多其他内容。'
- en: The source code for each library can be represented by either a URL of a version
    control system repository or by an archive file with the library source files.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 每个库的源代码可以表示为版本控制系统仓库的URL或包含库源文件的存档文件。
- en: 'A typical JSON file entry corresponding to one library looks like this snippet:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 与一个库对应的典型JSON文件条目看起来像以下片段：
- en: '[PRE10]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The field `type` can have one of these values: `archive`, `git`, `hg`, or `svn`.
    The first value corresponds to an archive file, such as `.zip`, `.tar.gz`, or
    `.tar.bz2`, while the last three types describe different version control system
    repositories. The `url` field contains a URL of the archive file to be downloaded
    or a URL of the repository. The `revision` field can specify a particular revision,
    tag, or branch to check out.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 字段 `type` 可以有以下这些值：`archive`、`git`、`hg` 或 `svn`。第一个值对应于存档文件，例如 `.zip`、`.tar.gz`
    或 `.tar.bz2`，而最后三种类型描述了不同的版本控制系统存储库。`url` 字段包含要下载的存档文件的 URL 或存储库的 URL。`revision`
    字段可以指定要检查出的特定修订版、标签或分支。
- en: The complete JSON file is a comma-separated list of such entries. For this recipe,
    we have only one library to download. We will add more libraries in the next chapters.
    The accompanying source code bundle contains a JSON file with all the libraries
    used in this book.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的 JSON 文件是此类条目的逗号分隔列表。对于这个配方，我们只下载一个库。我们将在下一章中添加更多库。附带的源代码包包含一个包含本书中使用的所有库的
    JSON 文件。
- en: There’s more...
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多...
- en: There is comprehensive documentation for this tool that describes other command-line
    options and JSON fields in great detail. It can be downloaded from [https://github.com/corporateshark/bootstrapping](https://github.com/corporateshark/bootstrapping).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 该工具有详细的文档，详细描述了其他命令行选项和 JSON 字段。可以从 [https://github.com/corporateshark/bootstrapping](https://github.com/corporateshark/bootstrapping)
    下载。
- en: The Bootstrap tool does not differentiate between source code and binary assets.
    All the textures, 3D models, and other resources for your application can also
    be downloaded and kept up to date and organized in an automated way.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 工具不会区分源代码和二进制资源。所有用于您应用程序的纹理、3D 模型和其他资源也可以自动下载、更新和组织。
- en: Getting the demo data
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取演示数据
- en: This book makes use of free 3D graphics datasets as much as possible. The comprehensive
    list of large 3D datasets is maintained by Morgan McGuire – Computer Graphics
    Archive, July 2017 ([https://casual-effects.com/data](https://casual-effects.com/data)).
    We will use some large 3D models from his archive for demonstration purposes in
    this book. Let us download and patch one of them.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 本书尽可能地使用免费的 3D 图形数据集。大型 3D 数据集的完整列表由 Morgan McGuire 维护 – 计算机图形档案，2017 年 7 月
    ([https://casual-effects.com/data](https://casual-effects.com/data))。我们将从他的存档中下载一些大型
    3D 模型，在本书中用于演示目的。让我们下载并修补其中一个。
- en: How to do it…
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The bundled source code contains a Python script, `deploy_deps.py`, which will
    download all the required 3D models automatically. To download the entire Bistro
    dataset manually, follow these simple steps:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 打包的源代码包含一个 Python 脚本 `deploy_deps.py`，它将自动下载所有必需的 3D 模型。要手动下载整个 Bistro 数据集，请按照以下简单步骤操作：
- en: Open the [https://casual-effects.com/data/](https://casual-effects.com/data/)
    page in a browser and find the **Amazon Lumberyard Bistro** dataset.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开 [https://casual-effects.com/data/](https://casual-effects.com/data/)
    页面，并找到 **Amazon Lumberyard Bistro** 数据集。
- en: Click on the **Download** link and allow the browser to download all the data
    files. Below is a screenshot of Morgan McGuire’s site with the download link.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **下载** 链接，并允许浏览器下载所有数据文件。下面是 Morgan McGuire 网站上的下载链接截图。
- en: '![Figure 1.6 – Amazon Lumberyard Bistro as pictured on casualeffects.com as
    a 2.4 GB download](img/file6.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.6 – Amazon Lumberyard Bistro，如图所示在 casualeffects.com 上以 2.4 GB 的下载量](img/file6.png)'
- en: Figure 1.6 – Amazon Lumberyard Bistro as pictured on casualeffects.com as a
    2.4 GB download
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.6 – Amazon Lumberyard Bistro，如图所示在 casualeffects.com 上以 2.4 GB 的下载量
- en: Create utilities for CMake projects
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为 CMake 项目创建实用工具
- en: In this recipe, we will see how CMake is used to configure all the code examples
    in this book and learn some small tricks along the way.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将看到如何使用 CMake 配置本书中的所有代码示例，并在过程中学习一些小技巧。
- en: For those who are just starting with CMake, we recommend reading the books *CMake
    Cookbook* (Radovan Bast and Roberto Di Remigio) by Packt Publishing and *Mastering
    CMake* (Ken Martin and Bill Hoffman) by Kitware.
  id: totrans-126
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 对于刚开始使用 CMake 的人来说，我们建议阅读 Packt Publishing 出版的 *CMake Cookbook*（作者：Radovan Bast
    和 Roberto Di Remigio）以及 Kitware 出版的 *Mastering CMake*（作者：Ken Martin 和 Bill Hoffman）。
- en: Getting ready
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For a start, let’s create a minimalistic C++ application with a trivial `main()`
    function and build it using CMake:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们创建一个具有平凡 `main()` 函数的最小化 C++ 应用程序，并使用 CMake 构建：
- en: '[PRE11]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How to do it...
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Let’s introduce two helper macros for CMake. You can find them in the `CMake/CommonMacros.txt`
    file of our source code bundle at [https://github.com/PacktPublishing/3D-Graphics-Rendering-Cookbook-Second-Edition](https://github.com/PacktPublishing/3D-Graphics-Rendering-Cookbook-Second-Edition).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们介绍两个用于 CMake 的辅助宏。您可以在我们的源代码包的 `CMake/CommonMacros.txt` 文件中找到它们，源代码包位于 [https://github.com/PacktPublishing/3D-Graphics-Rendering-Cookbook-Second-Edition](https://github.com/PacktPublishing/3D-Graphics-Rendering-Cookbook-Second-Edition)。
- en: The `SETUP_GROUPS` macro iterates over a space-delimited list of C and C++ files,
    whether it is a header or a source file, and assigns each of them to a separate
    group. The group name is constructed based on the path of each individual file.
    This way, we end up with a nice structure similar to a filesystem within a directory
    in the Visual Studio Solution Explorer window, as we can see on the right in the
    following figure.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`SETUP_GROUPS` 宏遍历一个由空格分隔的 C 和 C++ 文件列表，无论是头文件还是源文件，并将它们各自分配到不同的组中。组名是根据每个单独文件的路径构建的。这样，我们在
    Visual Studio 解决方案资源管理器窗口中的目录内得到了一个类似文件系统的良好结构，如图中右侧所示。'
- en: '![Figure 1.7 – Without groups (left) and with groups (right)](img/file7.png)'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 1.7 – 没有分组（左）和有分组（右）](img/file7.png)'
- en: Figure 1.7 – Without groups (left) and with groups (right)
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 1.7 – 没有分组（左）和有分组（右）
- en: 'The macro starts by iterating over a list of files passed in the `src_files`
    parameter:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 宏首先遍历通过 `src_files` 参数传入的文件列表：
- en: '[PRE12]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We store the parent directory name as a default group name. For any OS, replace
    all the backslash characters with forward slashes:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将父目录名作为默认的组名。对于任何操作系统，将所有反斜杠字符替换为正斜杠：
- en: '[PRE13]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Then, we can tell CMake to assign the current file to a source group with this
    name.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以告诉 CMake 将当前文件分配到具有此名称的源组。
- en: '[PRE14]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The second macro, `SETUP_APP`, is used as a shortcut to create a new CMake project
    with all the standard properties we want it to have. It is very convenient when
    having to deal with a number of very similar subprojects, for example, like in
    this book.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二个宏 `SETUP_APP` 被用作创建具有所有我们希望拥有的标准属性的 CMake 项目的快捷方式。当需要处理许多非常相似的子项目时，这非常方便，例如，就像在这本书中一样。
- en: '[PRE15]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: After setting the project name, this macro uses the `GLOB_RECURSE` function
    to collect all source and header files into the `SRC_FILES` and `HEADER_FILES`
    variables.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设置项目名称后，这个宏使用 `GLOB_RECURSE` 函数将所有源文件和头文件收集到 `SRC_FILES` 和 `HEADER_FILES` 变量中。
- en: '[PRE16]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In all our code samples, we use the directory `src` containing the source files
    as an `include` directory, too.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们所有的代码示例中，我们将包含源文件的 `src` 目录也用作 `include` 目录。
- en: '[PRE17]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: All enumerated source and header files are added to an executable inside the
    current project.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有枚举的源文件和头文件都被添加到当前项目中的一个可执行文件中。
- en: '[PRE18]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We use the `SETUP_GROUP` macro from *Step 1* to place each source and header
    file into an appropriate group inside the project.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用 *步骤 1* 中的 `SETUP_GROUP` 宏将每个源文件和头文件放置到项目内部适当的位置。
- en: '[PRE19]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The next three properties set different executable file names for each supported
    build configuration. These lines are optional, yet they are really useful when
    using CMake with the Visual Studio IDE. The reason is that Visual Studio can change
    build configurations (or “build types”, as they are called in CMake) dynamically
    directly from the IDE, and each build configuration can have its own output file
    name. We add suffixes to these file names so that they can co-exist in a single
    output folder.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来的三个属性为每个支持的构建配置设置了不同的可执行文件名。这些行是可选的，但在使用 Visual Studio IDE 与 CMake 一起使用时非常有用。原因是
    Visual Studio 可以直接从 IDE 动态更改构建配置（或称为 CMake 中的“构建类型”），每个构建配置都可以有自己的输出文件名。我们给这些文件名添加后缀，以便它们可以在单个输出文件夹中共存。
- en: '[PRE20]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Since we use C++20 throughout this book, we require CMake to enable it.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们在这本书中使用了 C++20，因此我们要求 CMake 启用它。
- en: '[PRE21]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: To ease the debugging with Visual Studio, we enable console output by changing
    the application type to `Console`. We also set the local debugger working directory
    to `CMAKE_SOURCE_DIR`, which will make finding assets a lot more straightforward
    and consistent. There are some Apple-specific properties to allow building the
    source code on Mac machines.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了便于使用 Visual Studio 进行调试，我们通过将应用程序类型更改为 `Console` 来启用控制台输出。我们还设置本地调试器的工作目录为
    `CMAKE_SOURCE_DIR`，这将使查找资源变得更加直接和一致。还有一些针对 Apple 特定的属性，允许在 Mac 机器上构建源代码。
- en: '[PRE22]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Finally, the top-level `CMakeLists.txt` file of our first project will look
    like this:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们第一个项目的顶级 `CMakeLists.txt` 文件将看起来像这样：
- en: '[PRE23]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: You may notice that the line `project(Chapter01)` above is overridden by a call
    to `project()` inside the `SETUP_APP` macro. This is due to the following CMake
    warning, which will be emitted if we do not declare a new project right from the
    get-go.
  id: totrans-159
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 您可能会注意到上面的行`project(Chapter01)`被`SETUP_APP`宏内部的`project()`调用覆盖。这是由于以下CMake警告，如果不从一开始就声明一个新的项目，将会发出此警告。
- en: '[PRE24]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'To build and test the executable, create the `build` subfolder, change the
    working directory to `build`, and run CMake as follows:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要构建和测试可执行文件，创建`build`子文件夹，将工作目录更改为`build`，然后按以下方式运行CMake：
- en: For Windows and Visual Studio 2022, run the following command to configure our
    project for the 64-bit target platform architecture.
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于Windows和Visual Studio 2022，运行以下命令以配置我们的项目为64位目标平台架构。
- en: '[PRE25]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: For Linux, we can use the `Unix Makefiles` CMake generator as follows.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于Linux，我们可以使用以下方式的`Unix Makefiles` CMake生成器。
- en: '[PRE26]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: To build an executable for the `release` build type, you can use the following
    command on any platform. To build a debug version, use `--config Debug` or skip
    that parameter entirely.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要构建`release`构建类型的可执行文件，您可以在任何平台上使用以下命令。要构建调试版本，请使用`--config Debug`或完全跳过该参数。
- en: '[PRE27]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: All the demo applications from the source code bundle should be run from the
    folder where the `data/` subfolder is located.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 所有源代码包中的演示应用程序都应该在`data/`子文件夹所在的文件夹中运行。
- en: There’s more...
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Alternatively, you can use the cross-platform build system Ninja along with
    CMake. It is possible to do so simply by changing the CMake project generator
    name.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以使用跨平台的构建系统Ninja以及CMake。只需更改CMake项目生成器名称即可实现。
- en: '[PRE28]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Invoke Ninja from the command line to compile the project.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 从命令行调用Ninja来编译项目。
- en: '[PRE29]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Notice how fast everything gets built now, compared to the classic `cmake --build`
    command. See [https://ninja-build.org](https://ninja-build.org) for more details.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 注意现在构建速度有多快，与经典的`cmake --build`命令相比。有关更多详细信息，请参阅[https://ninja-build.org](https://ninja-build.org)。
- en: Now let’s take a look at how to work with some basic open source libraries.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何与一些基本的开源库一起工作。
- en: Using the GLFW library
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用GLFW库
- en: The GLFW library hides all the complexity of creating windows, graphics contexts,
    and surfaces and getting input events from the operating system. In this recipe,
    we build a minimalistic application with GLFW and Vulkan to get some basic 3D
    graphics onto the screen.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: GLFW库隐藏了创建窗口、图形上下文和表面以及从操作系统获取输入事件的全部复杂性。在本食谱中，我们使用GLFW和Vulkan构建了一个最小化的应用程序，以便在屏幕上显示一些基本的3D图形。
- en: Getting ready
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We build our examples with GLFW 3.4\. Here is a JSON snippet for the Bootstrap
    script so that you can download the proper library version:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用GLFW 3.4构建我们的示例。以下是Bootstrap脚本的JSON片段，以便您可以下载正确的库版本：
- en: '[PRE30]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The complete source code for this recipe can be found in the source code bundle
    under the name of `Chapter01/02_GLFW`.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱的完整源代码可以在源代码包中找到，名称为`Chapter01/02_GLFW`。
- en: How to do it...
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Let’s write a minimalistic application that creates a window and waits for
    an `exit` command from the user – pressing the Esc key. This functionality will
    be used in all of our subsequent demos, so we have wrapped it into a helper function
    `initWindow()` declared in `shared/HelpersGLFW.h`. Let’s take a look at how to
    use it to create an empty GLFW window:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写一个最小化的应用程序，该应用程序创建一个窗口并等待用户的`exit`命令——按Esc键。此功能将用于我们所有的后续演示，因此我们将其封装到在`shared/HelpersGLFW.h`中声明的辅助函数`initWindow()`中。让我们看看如何使用它来创建一个空白的GLFW窗口：
- en: 'Include all necessary headers and decide on the initial window dimensions:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含所有必要的头文件并确定初始窗口尺寸：
- en: '[PRE31]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Invoke the `initWindow()` function to create a window. The `width` and `height`
    parameters are passed by reference and, after the call, will contain the actual
    working area of the created window. If we pass the initial values of `0`, the
    window will be created to span the entire desktop working area without an overlapping
    taskbar.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`initWindow()`函数以创建窗口。`width`和`height`参数是通过引用传递的，调用之后将包含创建的窗口的实际工作区域。如果我们传递初始值`0`，则窗口将创建为占据整个桌面工作区域，没有重叠的任务栏。
- en: '[PRE32]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'For this application, the main loop and cleanup are trivial:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于此应用程序，主循环和清理是微不足道的：
- en: '[PRE33]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Now we will take a look at the internals of `initWindow()` for some interesting
    details.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将查看`initWindow()`的内部结构，以了解一些有趣的细节。
- en: How it works...
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Let’s use this library to create an application that opens an empty window:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用这个库来创建一个打开空窗口的应用程序：
- en: 'First, we set the GLFW error callback via a lambda to catch potential errors
    and then initialize GLFW:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们通过lambda设置GLFW错误回调以捕获潜在的错误，然后初始化GLFW：
- en: '[PRE34]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Let’s decide if we want to make a desktop full-screen window. Set the resizable
    flag for windows that aren’t full-screen and retrieve the desired window dimensions.
    We are going to initialize Vulkan manually, so no graphics API initialization
    is required to be done by GLFW. The flag `wantsWholeArea` determines if we want
    a true full-screen window or a window that does not overlap the system taskbar.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们决定是否要创建一个全屏桌面窗口。为非全屏窗口设置可调整大小的标志并检索所需的窗口尺寸。我们将手动初始化Vulkan，因此不需要通过GLFW进行图形API初始化。标志`wantsWholeArea`确定我们是否想要一个真正的全屏窗口或一个不与系统任务栏重叠的窗口。
- en: '[PRE35]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Create a window and retrieve the actual window dimensions:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个窗口并检索实际的窗口尺寸：
- en: '[PRE36]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Set a default keyboard callback to handle the Esc key. A simple lambda will
    do this job for us.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置默认的键盘回调以处理Esc键。一个简单的lambda可以为我们完成这项工作。
- en: '[PRE37]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'If you run this tiny application, it will create an empty window, as in the
    following screenshot:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行这个小程序，它将创建一个空窗口，如下面的截图所示：
- en: '![Figure 1.8 – Our first application](img/file8.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![图1.8 – 我们的第一个应用](img/file8.png)'
- en: Figure 1.8 – Our first application
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.8 – 我们的第一个应用
- en: There’s more...
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多内容...
- en: Further details about how to use GLFW can be found at [https://www.glfw.org/documentation.xhtml](https://www.glfw.org/documentation.xhtml).
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 关于如何使用GLFW的更多详细信息可以在[https://www.glfw.org/documentation.xhtml](https://www.glfw.org/documentation.xhtml)找到。
- en: Multithreading with Taskflow
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Taskflow进行多线程
- en: Modern graphical applications require us to harness the power of multiple CPUs
    to be performant. **Taskflow** is a fast C++ header-only library that can help
    you write parallel programs with complex task dependencies quickly. This library
    is extremely useful as it allows you to jump into the development of multithreaded
    graphical applications that make use of advanced rendering concepts, such as frame
    graphs and multithreaded command buffer generation.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 现代图形应用程序要求我们利用多个CPU的强大功能以实现高性能。**Taskflow**是一个快速、仅包含头文件的C++库，可以帮助您快速编写具有复杂任务依赖关系的并行程序。这个库非常有用，因为它允许您快速进入开发使用高级渲染概念（如帧图和多线程命令缓冲区生成）的多线程图形应用程序。
- en: Getting ready
  id: totrans-208
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Here, we use Taskflow version 3.7.0\. You can download it using the following
    Bootstrap snippet:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用Taskflow版本3.7.0。您可以使用以下Bootstrap片段下载它：
- en: '[PRE38]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: To debug dependency graphs produced by Taskflow, it is recommended that you
    install the **GraphViz** tool from [https://www.graphviz.org](https://www.graphviz.org).
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 为了调试Taskflow生成的依赖图，建议您从[https://www.graphviz.org](https://www.graphviz.org)安装**GraphViz**工具。
- en: The complete source code for this recipe can be found in `Chapter01/03_Taskflow`.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 本菜谱的完整源代码可以在`Chapter01/03_Taskflow`中找到。
- en: How to do it...
  id: totrans-213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Let’s create and run a set of concurrent dependent tasks via the `for_each_index()`
    algorithm. Each task will print a single value from an array in a concurrent fashion.
    The processing order can vary between different runs of the program:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过`for_each_index()`算法创建并运行一组并发依赖任务。每个任务将以并发方式从数组中打印单个值。处理顺序可能在不同程序的运行之间有所不同：
- en: Include the `taskflow.hpp` header file. The `tf::Taskflow` class is the main
    place to create a task dependency graph. Declare an instance and a data vector
    to process.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含`taskflow.hpp`头文件。`tf::Taskflow`类是创建任务依赖图的主要地方。声明一个实例和数据向量以进行处理。
- en: '[PRE39]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The `for_each_index()` member function returns a task that implements a parallel
    for loop algorithm. We specify the range `0..items.size()` and the step `1`. The
    returned `task` can be used for synchronization purposes:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`for_each_index()`成员函数返回一个实现并行for循环算法的任务。我们指定范围`0..items.size()`和步长`1`。返回的`task`可用于同步目的：'
- en: '[PRE40]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Let’s attach some work before and after the parallel for task so that we can
    view `Start` and `End` messages in the output. Let’s call the new `S` and `T`
    tasks accordingly:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在并行任务前后添加一些工作，以便我们可以在输出中查看`开始`和`结束`消息。让我们相应地称新的`S`和`T`任务：
- en: '[PRE41]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Save the generated tasks dependency graph in `.dot` format so that we can process
    it later with the GraphViz `dot` tool:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将生成的任务依赖图保存为`.dot`格式，以便我们稍后可以使用GraphViz的`dot`工具进行处理：
- en: '[PRE42]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Now we can create a `tf::executor` object and run the constructed Taskflow
    graph:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以创建一个`tf::executor`对象并运行构建的Taskflow图：
- en: '[PRE43]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: One important part to mention here is that the dependency graph can only be
    constructed once. Then, it can be reused in every frame to run concurrent tasks
    efficiently.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 这里要提到的一个重要部分是，依赖图只能构建一次。然后，它可以在每一帧中重复使用，以有效地运行并发任务。
- en: 'The output from the preceding program should look similar to the following
    listing:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个程序输出的内容应类似于以下列表：
- en: '[PRE44]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Here, we can see our `S` and `T` tasks. Between them, there are multiple threads
    with different IDs processing different elements of the `items[]` vector in parallel.
    Your output may vary due to concurrency.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到我们的 `S` 和 `T` 任务。它们之间有多个线程，具有不同的 ID，并行处理 `items[]` 向量的不同元素。由于并发性，你的输出可能会有所不同。
- en: There’s more...
  id: totrans-229
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The application saved the dependency graph inside the `taskflow.dot` file.
    It can be converted into a visual representation by GraphViz, [https://graphviz.org](https://graphviz.org),
    using the following command:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序将依赖图保存在 `taskflow.dot` 文件中。它可以通过 GraphViz，[https://graphviz.org](https://graphviz.org)，使用以下命令转换为可视表示：
- en: '[PRE45]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The resulting `.png` image should look similar to the following screenshot:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的 `.png` 图片应类似于以下截图：
- en: '![Figure 1.9 – The Taskflow dependency graph for for_each_index()](img/file9.png)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.9 – for_each_index() 的 Taskflow 依赖图](img/file9.png)'
- en: Figure 1.9 – The Taskflow dependency graph for for_each_index()
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.9 – for_each_index() 的 Taskflow 依赖图
- en: This functionality is extremely useful when you are debugging complex dependency
    graphs (and producing complex-looking images for your books and papers).
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 当你调试复杂的依赖图（并为你的书籍和论文生成复杂外观的图片）时，此功能非常有用。
- en: The Taskflow library functionality is vast and provides implementations for
    numerous parallel algorithms and profiling capabilities. Please refer to the official
    documentation for in-depth coverage at [https://taskflow.github.io/taskflow/index.xhtml](https://taskflow.github.io/taskflow/index.xhtml).
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: Taskflow 库的功能非常丰富，提供了众多并行算法和性能分析功能的实现。请参阅官方文档以获取深入覆盖，链接为 [https://taskflow.github.io/taskflow/index.xhtml](https://taskflow.github.io/taskflow/index.xhtml)。
- en: Let’s move on to the next chapter and learn how to start working with Vulkan.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续进入下一章，学习如何开始使用 Vulkan。
