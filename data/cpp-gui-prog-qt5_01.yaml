- en: Introduction to Qt
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Qt
- en: Qt (pronounced *cute*) has been used by software engineers and developers for
    more than two decades to create cross-platform applications since its first release.
    After several changes of ownership and numerous major code overhauls, Qt has become
    even more feature rich and supports even more platforms than it used to. Qt not
    only excels in desktop application development, but is also excellent for both
    mobile and embedded systems development.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Qt（发音为可爱）自从首次发布以来，已经被软件工程师和开发人员使用了二十多年，用于创建跨平台应用程序。经过多次所有权变更和大量的重大代码改进，Qt变得更加功能丰富，支持的平台也比以前更多。Qt不仅在桌面应用程序开发方面表现出色，而且在移动和嵌入式系统开发方面也非常出色。
- en: 'In this chapter, we will cover the following topics :'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: What is Qt?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是Qt？
- en: Why use Qt?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么使用Qt？
- en: Using tools in Qt
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Qt中使用工具
- en: Downloading and installing Qt
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载和安装Qt
- en: Setting up a working environment
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建立工作环境
- en: Running our first `Hello World` Qt program
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行我们的第一个“Hello World”Qt程序
- en: Throughout this chapter, we will learn more about the history of Qt. Then, we'll
    proceed to build our first example program using the latest version of Qt, which
    is Qt version 5\. For the convenience of our readers, we will simply refer to
    it as Qt throughout the book.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将更多地了解Qt的历史。然后，我们将继续使用Qt的最新版本构建我们的第一个示例程序，该版本是Qt 5版。为了方便我们的读者，我们将在整本书中简称为Qt。
- en: What is Qt?
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Qt？
- en: Currently, the latest version of Qt (as this book is being written) is version
    5.10\. This version incorporated a lot of new features as well as thousands of
    bug fixes, which makes Qt a really powerful and stable development kit for software
    developers and system engineers alike. Qt has a huge package of SDK (software
    development kit) that contains a wide range of tools and libraries for helping
    developers get their job done without worrying too much about technical issues
    related to a specific platform. Qt handles all the messy integration and compatibility
    issues for you behind the curtain so you don't have to deal with them. This will
    not only improve efficiency but also reduces development costs, especially when
    you're trying to develop cross-platform applications that cater to a wider range
    of users.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，Qt的最新版本（本书撰写时）是版本5.10。这个版本包含了许多新功能以及成千上万的错误修复，使Qt成为软件开发人员和系统工程师的强大稳定的开发工具包。Qt有一个庞大的SDK（软件开发工具包），包含了各种工具和库，帮助开发人员完成工作，而不用太担心特定平台的技术问题。Qt在幕后处理所有混乱的集成和兼容性问题，这样你就不必处理它们。这不仅提高了效率，还降低了开发成本，特别是当您尝试开发迎合更广泛用户群的跨平台应用程序时。
- en: 'There are two types of license for Qt:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Qt有两种许可证：
- en: The first type is the Open Source License, which is free of charge, but only
    if your project/product fits their terms and conditions. For example, if you made
    any changes to the Qt's source code, it is an obligation for you to submit back
    those changes to Qt developers. Failure to do so could result in serious legal
    issues, and therefore, you might want to pick the second option instead.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一种是开源许可证，免费，但只有在您的项目/产品符合其条款和条件时才免费。例如，如果您对Qt的源代码进行了任何更改，您有义务将这些更改提交给Qt开发人员。不这样做可能会导致严重的法律问题，因此您可能希望选择第二个选项。
- en: The second type of license is the Commercial License, which gives you full rights
    to proprietary Qt source code modifications and keeps your application private.
    But of course, these privileges come with a set of fees.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二种许可证是商业许可证，它给予您对专有Qt源代码修改的全部权利，并保持您的应用程序私有。但当然，这些特权是需要付费的。
- en: If you're just starting to learn Qt, don't get pushed back by these terms, as
    you're certainly not going to modify the source code of Qt libraries or recompile
    it from source anyway, at least not now.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你刚开始学习Qt，不要被这些术语吓倒，因为你肯定不会修改Qt库的源代码，也不会重新编译它，至少现在不会。
- en: For more information regarding Qt's licensing, please visit [https://www.qt.io/licensing-comparison.](https://www.qt.io/licensing-comparison)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Qt许可的更多信息，请访问[https://www.qt.io/licensing-comparison.](https://www.qt.io/licensing-comparison)
- en: Why use Qt?
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么使用Qt？
- en: It's not hard to see why Qt stands a chance of winning against all other existing
    SDKs out there in the market; first of all, cross-platform compatibility. You
    can hardly find any other development kits that support so many platforms without
    writing different sets of code for each platform. By eliminating these extra steps,
    programmers can just focus on developing their applications without the need to
    worry about the implementation of each and every platform-specific feature. Furthermore,
    your code will look clean without all the `#ifdef` macros and having to load different
    dependencies for different platforms.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 不难看出为什么Qt有机会在市场上击败所有其他现有的SDK；首先是跨平台兼容性。几乎找不到其他开发工具包支持这么多平台而不需要为每个平台编写不同的代码。通过消除这些额外的步骤，程序员可以专注于开发他们的应用程序，而不需要担心每个平台特定功能的实现。此外，您的代码将看起来干净，没有所有的“#ifdef”宏和需要为不同平台加载不同的依赖项。
- en: Qt generally uses C++, which is a compiled language that generates small and
    efficient code. It is also well documented and follows a very consistent set of
    naming conventions, which reduces the learning curve for the developer.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Qt通常使用C++，这是一种生成小型高效代码的编译语言。它也有很好的文档，并遵循一套非常一致的命名约定，这减少了开发人员的学习曲线。
- en: Do be aware that Qt does include a small amount of features that only work on
    specific platforms. However, these are minimal and often for special use cases,
    such as Qt Sensors, which only work on mobile platforms; Qt Web Engine, which
    only works on desktops; Qt NFC, only for Android and Linux; and so on. Those are
    some very specific functionalities that only exist on certain platforms that support
    them. Other than that, common features are usually supported on all platforms.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Qt确实包含一小部分仅适用于特定平台的功能。但是，这些功能很少，通常用于特殊用例，例如仅在移动平台上工作的Qt传感器，仅在桌面上工作的Qt Web
    Engine，仅适用于Android和Linux的Qt NFC等。这些都是一些非常特定的功能，只存在于支持它们的特定平台上。除此之外，通常所有平台都支持常见功能。
- en: Qt Designer
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Qt Designer
- en: Qt Designer is normally used by developers to design GUIs for desktop applications,
    while Qt Quick Designer is usually used for mobile and embedded platforms. With
    that being said, both formats run just fine on both desktop and mobile formats,
    the only difference is the look and feel, and the types of languages used.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Designer通常由开发人员用于设计桌面应用程序的GUI，而Qt Quick Designer通常用于移动和嵌入式平台。话虽如此，两种格式在桌面和移动格式上都可以正常运行，唯一的区别是外观和所使用的语言类型。
- en: The GUI file saved by Qt Designer carries the `.ui` extension, which is saved
    in XML format. The file stores the attributes of each and every widget placed
    by the GUI designer, such as position, size, margin, tooltip, layout direction,
    and so on. It also saves the signal-and-slot event names within itself for easily
    connecting with the code in the later stages. This format does not support coding
    and only works for Qt C++ projects, namely widget-based application projects.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Designer保存的GUI文件具有`.ui`扩展名，保存为XML格式。该文件存储了GUI设计人员放置的每个小部件的属性，例如位置、大小、边距、工具提示、布局方向等。它还在文件内部保存了信号和槽事件名称，以便在后期轻松连接代码。该格式不支持编码，仅适用于Qt
    C++项目，即基于小部件的应用程序项目。
- en: Qt Quick Designer
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Qt Quick Designer
- en: On the other hand, Qt Quick Designer saves GUI files in both `.ui.qml` and `.qml`
    formats. Qt Quick is a very different type of GUI system in terms of technological
    concept and development approach, which we will cover in [Chapter 14](f8abebf4-f2be-457b-802a-4744ddba7eac.xhtml),
    *Qt Quick and QML*. Instead of XML format, Qt Quick Designer saves its data in
    a declarative language similar to JavaScript called **QML**. QML not only allows
    the designer to customize their GUI in a CSS-like (Cascading Style Sheets) fashion,
    it also allows the programmer to write functional JavaScript within the QML file.
    As we mentioned earlier, `.ui.qml` is the file format used for visual decoration
    only while `.qml` contains application logic.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，Qt Quick Designer以`.ui.qml`和`.qml`格式保存GUI文件。从技术概念和开发方法来看，Qt Quick是一种非常不同的GUI系统，我们将在第14章《Qt
    Quick和QML》中进行介绍。Qt Quick Designer保存其数据的格式不是XML，而是一种类似JavaScript的声明性语言称为**QML**。QML不仅允许设计人员以类似于CSS（层叠样式表）的方式自定义他们的GUI，还允许程序员在QML文件中编写功能性JavaScript。正如我们之前提到的，`.ui.qml`是仅用于视觉装饰的文件格式，而`.qml`包含应用程序逻辑。
- en: If you're doing a simple program using Qt Quick, you don't have to touch any
    C++ coding at all. That's especially welcoming for web developers because they
    can immediately pick up Qt Quick and develop their own application without a steep
    learning curve; everything is just so familiar to them. For much more complex
    software, you can even link C++ functions from QML, and vice versa. Again, if
    you're interested in learning more about Qt Quick and QML, please head over to
    [Chapter 14](f8abebf4-f2be-457b-802a-4744ddba7eac.xhtml),* QtQuick and QML*.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用Qt Quick编写简单的程序，您根本不需要接触任何C++编码。这对Web开发人员来说尤其受欢迎，因为他们可以立即开始使用Qt Quick开发自己的应用程序，无需经历陡峭的学习曲线；一切对他们来说都是如此熟悉。对于更复杂的软件，您甚至可以在QML中链接C++函数，反之亦然。同样，如果您对Qt
    Quick和QML想了解更多信息，请转到第14章《QtQuick和QML》。
- en: Since Qt Creator is also written in Qt libraries itself, it is also totally
    cross-platform. Hence, you can use the same set of tools across different development
    environments and develop a unified workflow for your team, resulting in better
    efficiency and cost-effectiveness.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Qt Creator本身也是用Qt库编写的，因此它也是完全跨平台的。因此，您可以在不同的开发环境中使用相同的一组工具，并为您的团队开发统一的工作流程，从而提高效率和节约成本。
- en: Other than that, Qt comes with many different modules and plugins, which cover
    a wide range of functionality you need for your projects. There is often no need
    for you to look for other external libraries or dependencies and try and implement
    them yourself. The abstraction layer of Qt makes the backend implementation invisible
    to the users and results in a unified coding style and syntax. If you try to put
    together a bunch of external dependencies yourself, what you'll find is each library
    has its own distinctive coding style. It's quite a mess when mixing up all the
    different coding styles in the same project, unless you make your own abstraction
    layer, which is a very time-consuming task. Since Qt already includes most, if
    not all the modules that you need to create feature-rich applications, there is
    no need for you to implement your own.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，Qt还配备了许多不同的模块和插件，涵盖了您项目所需的各种功能。通常情况下，您无需寻找其他外部库或依赖项并尝试自行实现它们。Qt的抽象层使后端实现对用户不可见，并导致统一的编码风格和语法。如果您尝试自行组合一堆外部依赖项，您会发现每个库都有其独特的编码风格。在同一项目中混合所有不同的编码风格会非常混乱，除非您制作自己的抽象层，这是一项非常耗时的任务。由于Qt已经包含了大多数（如果不是全部）您需要创建功能丰富的应用程序的模块，因此您无需自行实现。
- en: For more information regarding the modules that come with Qt, please visit: [http://doc.qt.io/qt-5/qtmodules.html](http://doc.qt.io/qt-5/qtmodules.html).
    [](http://doc.qt.io/qt-5/qtmodules.html)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Qt附带的模块的更多信息，请访问：[http://doc.qt.io/qt-5/qtmodules.html](http://doc.qt.io/qt-5/qtmodules.html)。
- en: That being said, there are also many third libraries out there that extend Qt
    for features that Qt itself does not support, such as libraries that focus on
    game development or any other features that are designed for the specific user
    group.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，还有许多第三方库可以扩展Qt，以实现Qt本身不支持的功能，例如专注于游戏开发或为特定用户群设计的其他功能的库。
- en: Downloading and installing Qt
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载和安装Qt
- en: Without wasting any time, let's begin with our installation! To get the free
    installer for Open Source Qt, first go to their website at [https://www.qt.io](https://www.qt.io/).
    There, look for the button that says Download Qt (the website might look different
    if they have updated it). Do note that you might be downloading the free trial
    version for the Commercial Qt, which you cannot use after 30 days. Make sure that
    you are downloading the open source version of Qt instead. Also, you may want
    to pick the right installer for your platform, since there are many different
    installers of Qt for different operating systemsWindows, macOS, and Linux.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 不浪费任何时间，让我们开始安装吧！要获取开源Qt的免费安装程序，首先转到他们的网站[https://www.qt.io](https://www.qt.io)。在那里，寻找一个名为Download
    Qt的按钮（如果他们已经更新了网站，网站可能看起来不同）。请注意，您可能正在下载商业Qt的免费试用版，在30天后将无法使用。确保您下载的是开源版本的Qt。此外，您可能需要为您的平台选择正确的安装程序，因为Qt有许多不同的安装程序，适用于不同的操作系统Windows、macOS和Linux。
- en: 'You might wonder why the installer is so small in size—it is only around 19
    MB. This is because the unified online installer doesn''t actually contain any
    of the Qt packages, but is rather a downloader client which helps you to download
    all the relevant files and install them to your computer once the download has
    completed. Once you have downloaded the online installer, double-click on it and
    you will be presented with an interface like this (the following example is running
    on a Windows system):'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会想知道为什么安装程序的大小如此之小-只有大约19 MB。这是因为统一的在线安装程序实际上不包含任何Qt软件包，而是一个下载客户端，它可以帮助您下载所有相关文件，并在下载完成后将它们安装到您的计算机上。一旦您下载了在线安装程序，请双击它，您将看到一个类似于这样的界面（以下示例在Windows系统上运行）：
- en: '![](img/2887b5c2-45ea-457d-94bf-1dcd96367148.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2887b5c2-45ea-457d-94bf-1dcd96367148.png)'
- en: 'Click the Next button, and a **DRM** (**Digital Rights Management**) page will
    appear and ask you to log in with your Qt account. If you don''t have one, you
    can also create your account on the same page:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 单击“下一步”按钮，将出现一个DRM（数字版权管理）页面，并要求您使用Qt帐户登录。如果您没有帐户，您也可以在同一页面上创建您的帐户：
- en: '![](img/8da1ff97-e940-4f55-9e78-b9c1c17dfcce.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8da1ff97-e940-4f55-9e78-b9c1c17dfcce.png)'
- en: Once you have logged in, you will see a message that says No valid commercial
    license available in your Qt Account for this host platform. Don't worry about
    that, just click the Next button to proceed.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您登录，您将看到一条消息，上面写着您的Qt帐户在此主机平台上没有有效的商业许可证。不用担心，只需单击“下一步”按钮即可继续。
- en: Next, you will be asked to specify the installation path. The default path is
    usually just fine, but you can change it to any other path as you please. Also,
    you can either leave the Associate this common file types with Qt Creator option
    checked, or uncheck it manually if otherwise.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将被要求指定安装路径。默认路径通常就可以了，但您可以根据需要将其更改为任何其他路径。此外，您可以选择保留与Qt Creator关联这些常见文件类型的选项，或者如果不需要，也可以手动取消选中。
- en: 'After that, you will be presented with a series of checkboxes with which you
    can select the version(s) of Qt you need to install to your computer. Typically,
    for new users, the default options are sufficient. If you don''t need some of
    the options, such as support for Qt on Android, you can unselect them here to
    reduce the size of the download. You can always go back and add or remove Qt components
    later if needed, using the Maintenance Tool:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，您将看到一系列复选框，您可以使用这些复选框选择要安装到计算机上的Qt版本。通常，对于新用户，默认选项就足够了。如果您不需要某些选项，例如对Android上的Qt的支持，您可以在此处取消选择它们，以减小下载的大小。如果需要，您随时可以使用维护工具返回并添加或删除Qt组件：
- en: '![](img/02db9bda-c373-4b0e-957c-9dc316133d55.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/02db9bda-c373-4b0e-957c-9dc316133d55.png)'
- en: Next, you will be presented with the license agreement. Check the first option,
    which says I have read and agree to the terms contained in the license agreements,
    and click the Next button. Make sure you do read the terms and conditions stated
    in the license agreement!
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将看到许可协议。勾选第一个选项，即我已阅读并同意许可协议中包含的条款，然后单击“下一步”按钮。确保您确实阅读了许可协议中规定的条款和条件！
- en: Finally, the installer will ask you to enter a name to create a start menu shortcut
    for Qt. Once you're done, just click Next and then click Install. The download
    process will take a couple of minutes to a couple of hours, depending on your
    internet speed. Once all the files have been downloaded, the installer will automatically
    proceed to install the files to the installation path that you have just set in
    one of the previous steps.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，安装程序将要求您输入一个名称，以创建Qt的开始菜单快捷方式。完成后，只需单击“下一步”，然后单击“安装”。下载过程将根据您的互联网速度花费几分钟到几个小时不等。一旦所有文件都已下载，安装程序将自动继续将文件安装到您刚刚在之前的步骤中设置的安装路径。
- en: Setting up the working environment
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置工作环境
- en: Since you have installed the latest version of Qt, let's fire up Qt Creator
    and start messing around by creating our first project! You should be able to
    find Qt Creator's shortcut icon either on your desktop or somewhere within your
    start menu.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 既然您已经安装了最新版本的Qt，让我们启动Qt Creator，并开始通过创建我们的第一个项目来进行实验！您应该能够在桌面上或开始菜单的某个位置找到Qt
    Creator的快捷方式图标。
- en: 'Let''s look at the steps to set up our environment:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看设置环境的步骤：
- en: 'When you first start Qt Creator, you should see the following interface:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您首次启动Qt Creator时，您应该会看到以下界面：
- en: '![](img/78301c1b-8a25-4575-a4ea-b46880946909.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/78301c1b-8a25-4575-a4ea-b46880946909.png)'
- en: 'Before you start creating your first project, there are several settings that
    you might want to tweak. Go to the top menu and select Tools | Options. A window
    that looks something like this will pop up on the screen:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在开始创建第一个项目之前，您可能需要调整一些设置。转到顶部菜单，选择“工具”|“选项”。屏幕上将弹出一个类似于此的窗口：
- en: '![](img/6a5dc3a3-954d-439e-8d96-c396f90317b6.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6a5dc3a3-954d-439e-8d96-c396f90317b6.png)'
- en: There are quite a number of different categories available on the left of the
    window. Each category represents a set of options you can set to customize how
    Qt Creator will look and operate. You may not want to touch the settings at all,
    but it's good to learn about them first. One of the first settings you might want
    to change is the Language option, which is available in the Environment category.
    Qt Creator provides us with an option to switch between different languages. Although
    it doesn't support all languages, most of the popular ones are available, such
    as English, French, German, Japanese, Chinese, Russian, and so on. Once you have
    selected your desired language, click Apply and restart Qt Creator. You must restart
    Qt Creator in order to see the changes.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 窗口左侧有许多不同的类别可供选择。每个类别代表一组选项，您可以设置以自定义Qt Creator的外观和操作方式。您可能不想触碰设置，但最好先了解它们。您可能想要更改的第一个设置之一是语言选项，该选项位于环境类别中。Qt
    Creator为我们提供了在不同语言之间切换的选项。虽然它不支持所有语言，但大多数流行的语言都可用，例如英语、法语、德语、日语、中文、俄语等。选择所需的语言后，单击应用并重新启动Qt
    Creator。您必须重新启动Qt Creator才能看到更改。
- en: The next setting you probably need is the setting for indentation. By default,
    Qt uses space indentation, in which four spaces will be added to your script whenever
    you press the *Tab* key on your keyboard. Some people, like me, prefer tab indentation
    instead. You can change the indentation setting at C++ category.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可能需要的下一个设置是缩进设置。默认情况下，Qt使用空格缩进，每当您在键盘上按“Tab”键时，将向您的脚本添加四个空格。像我这样的一些人更喜欢制表符缩进。您可以在C++类别中更改缩进设置。
- en: Do note that if you are contributing to Qt project's source code, it's required
    that you use space indentation instead of tabs, which is the coding standard and
    style of the Qt project.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果您要为Qt项目的源代码做出贡献，则需要使用空格缩进，而不是制表符，这是Qt项目的编码标准和样式。
- en: Under the C++ category, you can find a Copy button located beside the Edit button,
    somewhere in the top right position. Click it and a new window will pop up.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在C++类别下，您可以找到一个名为“复制”的按钮，位于右上方的“编辑”按钮旁边。单击它，将弹出一个新窗口。
- en: 'Insert a code style name of your own, as you can''t edit the default built-in
    coding style. After you have created your own settings, click the Edit button.
    You can now see the actual Tabs And Indentation settings under the General tab:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入您自己的代码样式名称，因为您无法编辑默认的内置编码样式。创建自己的设置后，单击“编辑”按钮。现在您可以在“常规”选项卡下看到实际的“制表符和缩进”设置：
- en: '![](img/86b23382-3d24-4f3a-8b10-e8642f5a3a21.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/86b23382-3d24-4f3a-8b10-e8642f5a3a21.png)'
- en: Do note that even though there is a Tabs And Indentation setting located at
    the Text Editor category, I believe it's an old setting that no longer has any
    effect in Qt Creator. There is also a note written on the UI that says Code indentation
    is configured in C++ and Qt Quick settings. A possible reason for this is that
    since Qt Creator now supports both C++ project and QML projects, Qt developers
    probably felt there was a need to separate the settings into two, so therefore
    the old setting is no longer valid. I'm pretty sure this section on Text Editor
    will be deprecated in the near future.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，即使在“文本编辑器”类别中有一个名为“制表符和缩进”的设置，我认为这是一个旧设置，在Qt Creator中已不再起作用。界面上还有一条注释，写着代码缩进是在C++和Qt
    Quick设置中配置的。这可能的原因是，由于Qt Creator现在同时支持C++项目和QML项目，Qt开发人员可能觉得有必要将设置分开，因此旧设置不再有效。我相当肯定，文本编辑器中的这一部分将在不久的将来被弃用。
- en: Next, under the Build and Run category, you'll see a tab labeled Kits.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在“构建和运行”类别下，您将看到一个名为“工具包”的选项卡。
- en: 'This is where you can set the compile settings for each platform. As you can
    see from the next screenshot, my Qt does not support desktop build under MSVC
    (Microsoft Visual Studio Compiler) because I never installed Visual Studio on
    my computer. Instead, my Qt only supports desktop build under the MinGW (Minimal
    GNU for Windows) compiler. From this window, you can check and see if your Qt
    supports the platform and compiler you wanted for your project and make changes
    to it if necessary. But for now, we''ll just leave it as it is. To learn more
    about what is a *kit* is and how to configure the build settings, please head
    over to [Chapter 15](dfd404c4-78cc-459f-8a4c-34a4972f072f.xhtml), *Cross-Platform
    Development*:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '这是您可以为每个平台设置编译设置的地方。从下一个截图中可以看出，我的Qt不支持在MSVC（Microsoft Visual Studio Compiler）下进行桌面构建，因为我从未在计算机上安装Visual
    Studio。相反，我的Qt只支持在MinGW（Minimal GNU for Windows）编译器下进行桌面构建。从此窗口，您可以检查并查看您的Qt是否支持您项目所需的平台和编译器，并在必要时进行更改。但是现在，我们将保持不变。要了解有关*工具包*是什么以及如何配置构建设置的更多信息，请转到[第15章](dfd404c4-78cc-459f-8a4c-34a4972f072f.xhtml)，*跨平台开发*： '
- en: '![](img/96a3210e-7871-4d1e-bbe1-f31ed021db05.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/96a3210e-7871-4d1e-bbe1-f31ed021db05.png)'
- en: Finally, we can link our project to our version control server at the Version
    Control category.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以将我们的项目链接到版本控制类别中的版本控制服务器。
- en: 'Version control allows you or your team to submit code changes to a centralized
    system so that each and every team member can obtain the same code without passing
    files around manually. When you''re working in a big team, it''s very difficult
    to manually keep track of the code changes, and even more so to merge the code
    done by different programmers. Version control systems are designed to solve these
    issues. Qt supports different types of version control systems, such as Git, SVN,
    Mercurial, Perforce, and so on. Although this is a very useful feature, especially
    if you''re working in a team, we don''t need to configure it for now:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 版本控制允许您或您的团队将代码更改提交到集中系统，以便每个团队成员都可以获取相同的代码，而无需手动传递文件。当您在一个大团队中工作时，手动跟踪代码更改非常困难，甚至更难合并不同程序员完成的代码。版本控制系统旨在解决这些问题。Qt支持不同类型的版本控制系统，如Git、SVN、Mercurial、Perforce等。尽管这是一个非常有用的功能，特别是在团队中工作时，但我们现在不需要为其进行配置：
- en: '![](img/8faf6c93-fcab-4c20-b1e6-b9c70cba4b3e.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8faf6c93-fcab-4c20-b1e6-b9c70cba4b3e.png)'
- en: Running our first Hello World Qt program
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行我们的第一个Hello World Qt程序
- en: A Hello World program is a very simple program that does nothing more than display
    an output that says `Hello, World!` (or any other thing, not necessarily this)
    to show that the SDK is working properly. We don't need to write very long code
    to produce a `Hello World` program, we can do it using only the very minimum and
    the most basic code. In fact, we don't have to write any code in Qt, as it will
    generate the code when you first create your project!
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Hello World程序是一个非常简单的程序，它只是显示一个输出，上面写着“Hello, World!”（或者其他内容，不一定是这个），以显示SDK正常工作。我们不需要编写很长的代码来生成“Hello
    World”程序，我们可以只使用最少和最基本的代码来完成。实际上，在Qt中我们不需要编写任何代码，因为它会在您第一次创建项目时生成代码！
- en: 'Let''s begin our project by following these steps:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下步骤开始我们的项目：
- en: To create a new project in Qt, click the New Project button located at the welcome
    screen on your Qt Creator. Alternatively, you can also go to the top menu and
    select File | New File or Project.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在Qt中创建新项目，请单击Qt Creator欢迎屏幕上的“新项目”按钮。或者，您也可以转到顶部菜单，选择“文件”|“新文件或项目”。
- en: 'After that, you will be presented with a window which lets you select a template
    for your project or file. For this demonstration, we will pick Qt Widgets Application:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，您将看到一个窗口，让您为项目或文件选择模板。在这个演示中，我们将选择Qt Widgets Application：
- en: '![](img/61467706-8fad-4cfb-be1b-a27dce3aae57.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/61467706-8fad-4cfb-be1b-a27dce3aae57.png)'
- en: After that, set your project name and project directory. You can also check
    the checkbox that says Use as default project location so that you can automatically
    get the same path when you create a new project in Qt next time.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，设置您的项目名称和项目目录。您还可以勾选“用作默认项目位置”，这样下次在Qt中创建新项目时就可以自动获得相同的路径。
- en: 'Next, Qt Creator will ask you to select one or more kits for your project.
    For this demonstration, we''ll pick Desktop Qt with the MinGW compiler. Don''t
    worry, as you are allowed to add or remove kits from your project later on during
    development:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，Qt Creator将要求您为项目选择一个或多个工具包。在这个演示中，我们将选择使用MinGW编译器的桌面Qt。不用担心，因为您可以在开发过程中随时添加或删除项目中的工具包：
- en: '![](img/f117e1ba-50ee-481b-ab1b-52bdb4a9f7d1.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f117e1ba-50ee-481b-ab1b-52bdb4a9f7d1.png)'
- en: 'After that, you will be presented with a page that says Class Information.
    This is basically where you set the class name for your base window, but we''re
    not going to change anything, so just click the Next button to proceed:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，您将看到一个页面，上面写着“类信息”。这基本上是您为基本窗口设置类名的地方，但我们不打算更改任何内容，所以只需点击“下一步”按钮继续：
- en: '![](img/4955e578-162a-477d-9739-1e799f4c42bd.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4955e578-162a-477d-9739-1e799f4c42bd.png)'
- en: Finally, it will ask you to link your project to your version control server.
    If you have not added any to Qt before, you can click the Configure button, which
    will bring you to the settings dialog that I showed you in the previous section
    of this chapter.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，它会要求您将项目链接到您的版本控制服务器。如果您以前没有在Qt中添加过任何内容，可以单击“Configure”按钮，它将带您进入我在本章前一节中向您展示的设置对话框。
- en: 'For this demonstration, however, we''ll keep the settings as <None> and press
    the Finish button. Qt Creator will then proceed to generate the necessary files
    for your project. After a second or two, Qt Creator will automatically switch
    to Edit mode and you should be able to see the files it created for you under
    the Project panel. You can open up any of the files by double-clicking on them
    in Qt Creator and they will be shown in the editor located on the right-hand side:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 但是，在这个演示中，我们将保持设置为<None>并按下“Finish”按钮。然后，Qt Creator将继续生成项目所需的文件。一两秒后，Qt Creator将自动切换到编辑模式，您应该能够在项目面板下看到它为您创建的文件。您可以通过在Qt
    Creator中双击它们来打开任何文件，并且它们将显示在右侧的编辑器中：
- en: '![](img/cb27c62e-5ab5-4690-b775-70a353b84b85.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cb27c62e-5ab5-4690-b775-70a353b84b85.png)'
- en: 'Before we start compiling the project, let''s open up the `mainwindow.ui` file
    under the `Forms` directory in your project panel. Don''t worry too much about
    the user interface as we will cover it in the following chapter. What we need
    to do is to click and drag the Label icon under the Display Widgets category to
    the center of the window on the right, as shown in the following screenshot:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在开始编译项目之前，让我们在项目面板的“Forms”目录下打开`mainwindow.ui`文件。不要太担心用户界面，因为我们将在下一章中介绍它。我们需要做的是在右侧窗口的中心点击并拖动“Display
    Widgets”类别下的“Label”图标，如下面的屏幕截图所示：
- en: '![](img/60c3a7ec-dbe6-4832-a1b5-0b36788c4e76.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/60c3a7ec-dbe6-4832-a1b5-0b36788c4e76.png)'
- en: 'After that, double-click on the `Text Label` widget and change the text to
    `Hello World!`. Once you''re done, hit the *Enter* button on your keyboard:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，双击“Text Label”小部件并将文本更改为“Hello World!”。完成后，按下键盘上的*Enter*按钮：
- en: '![](img/6d7f068a-eca4-4c99-9253-8f31e8ccfed0.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6d7f068a-eca4-4c99-9253-8f31e8ccfed0.png)'
- en: 'The final step is to press the Run button located at the bottom left corner
    that looks like this:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步是按下位于左下角的运行按钮，看起来像这样：
- en: '![](img/a071be71-b7fd-4cf3-92b0-ee7e0fd16d28.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a071be71-b7fd-4cf3-92b0-ee7e0fd16d28.png)'
- en: 'We would normally build the program first and then run the program, but Qt
    Creator is smart enough to figure out that it needs to build it. However, it is
    still a good habit to build and run your application separately. After a few seconds
    of compiling, ... voila! You have created your first `Hello World` program using
    Qt!:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通常情况下，我们会先构建程序，然后运行程序，但是Qt Creator足够聪明，可以自行构建它。然而，构建和运行应用程序分开仍然是一个好习惯。经过几秒钟的编译，...哇！你已经使用Qt创建了你的第一个“Hello
    World”程序！
- en: '![](img/6823e337-e451-4170-898a-cd7ef9504c04.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6823e337-e451-4170-898a-cd7ef9504c04.png)'
- en: Summary
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The existence of tools such as Qt Creator has made designing applications' user
    interfaces an easy and fun job for the developers. We no longer need to write
    a bunch of code just to create a single button, or change a bunch just to adjust
    the position of a text label, since Qt Designer will generate that code for us
    when we design our GUI. Qt has applied the **WYSIWYG** (**what you see is what
    you get**) philosophy into the working pipeline and it provides us with all the
    convenience and efficiency we need to get our jobs done.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 诸如Qt Creator之类的工具的存在使得为开发人员设计应用程序的用户界面成为一项简单而有趣的工作。我们不再需要编写大量的代码来创建单个按钮，或者更改一大堆代码来调整文本标签的位置，因为当我们设计我们的GUI时，Qt
    Designer会为我们生成那些代码。Qt已经将所见即所得的哲学应用到了工作流程中，并为我们提供了完成工作所需的所有便利和效率。
- en: In the next chapter, we will learn the ins and outs of Qt Creator and start
    designing our first GUI with Qt!
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习Qt Creator的方方面面，并开始使用Qt设计我们的第一个GUI！
