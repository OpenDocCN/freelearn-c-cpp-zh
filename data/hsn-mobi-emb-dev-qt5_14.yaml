- en: Enabling In-App Purchases with Qt Purchasing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Qt 购买启用应用内购买
- en: In-app purchasing on mobile phones is essential to generate more income. Qt
    utilizes system APIs to bring in-app purchases to Qt apps. Android and iOS both
    have their own app stores, and each store has its own methods for registering
    products for sale. This is where Qt Purchasing comes in!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在手机上应用内购买对于生成更多收入至关重要。Qt 利用系统 API 将应用内购买引入 Qt 应用。Android 和 iOS 都有自己的应用商店，每个商店都有自己的产品注册方法。这就是
    Qt 购买发挥作用的地方！
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Registering in Android and iOS stores
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Android 和 iOS 商店注册
- en: Creating an in-app product
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建应用内产品
- en: Restoring purchases
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 恢复购买
- en: Registering on Android Google Play
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Android Google Play 上注册
- en: Selling mobile applications is often hit-and-miss; only a few apps that are
    available to buy actually make money. One of the best ways to make money at the
    moment is to make your application free to download, but to include in-app purchases.
    That way, people get to try out your app but also have the opportunity to make
    purchases if they want enhanced play. This section presumes you have already registered
    your app to the relevant mobile store. To activate in-app purchases, you first
    need to register the things you intend to sell. This has its own benefits, as
    it allows testers to *buy* and install things you intend to sell.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 销售移动应用程序往往是不稳定的；只有少数可供购买的应用程序实际上能赚钱。目前赚钱的最好方法之一是让您的应用程序免费下载，但包含应用内购买。这样，人们可以尝试您的应用程序，同时也有机会在需要增强体验时进行购买。本节假设您已经将应用程序注册到相关的移动商店。要激活应用内购买，您首先需要注册您打算出售的商品。这有其自身的优势，因为它允许测试人员
    *购买* 并安装您打算出售的商品。
- en: 'Let''s take a look at how to do this on Android devices first:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看如何在 Android 设备上完成这项操作：
- en: You will first need to register for a Google Developers account in order to
    create an application that will be available in Google Play Store, [https://developer.android.com](https://developer.android.com).
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您首先需要注册一个 Google 开发者账户，以便创建可在 Google Play 商店中使用的应用程序，[https://developer.android.com](https://developer.android.com)。
- en: You will also need to add and edit the `AndroidManifest.xml` file.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还需要添加和编辑 `AndroidManifest.xml` 文件。
- en: 'In Qt Creator, navigate to:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Qt Creator 中，导航到：
- en: Projects | Build | Build Settings | Build Android APK | Create Templates. Here,
    you will need to edit the Package name, ideally using the convention, `com.<company>.<application
    name>`. Other naming conventions are of course available, as you can name it anything
    you want.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 项目 | 构建 | 构建设置 | 构建 Android APK | 创建模板。在这里，您需要编辑包名，理想情况下使用约定，`com.<公司>.<应用程序名称>`。当然，还有其他命名约定可供选择，您可以将其命名为任何您想要的名称。
- en: The version number must be incremented when you update your package in the Google
    Play Store. The easiest way to do this is to tick the box labeled Include default
    permissions for Qt Modules. If not, you need to be sure to add the `uses-permission
    android:name="com.android.vending.BILLING"` permission.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您在 Google Play 商店更新您的包时，版本号必须递增。最简单的方法是勾选名为“包含 Qt 模块默认权限”的复选框。如果不勾选，您需要确保添加
    `uses-permission android:name="com.android.vending.BILLING"` 权限。
- en: You will also need to sign this package with your certificates, so create a
    keystore if you haven't already done this.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还需要使用您的证书签名此包，因此如果您还没有这样做，请创建一个密钥库。
- en: In-app purchasing in Google is named **Google Play Billing**, while **Google
    Play Console** is the name of the website you go through to publish apps to the
    Google Play Store. You need to register as a developer and pay a registration
    fee. (For me, it was 25 AUD.) Once the fee is paid, you can set up a merchant
    account.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Google 的应用内购买被称为 **Google Play Billing**，而 **Google Play Console** 是您发布应用到
    Google Play 商店时访问的网站名称。您需要注册为开发者并支付注册费。（对我来说，是 25 澳元。）一旦支付了费用，您就可以设置一个商户账户。
- en: After that, it's time to supply information about your application and upload
    store graphics such as screenshots and promotional videos. This is where you also
    need to supply contact details for your customers.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，是时候提供有关您应用程序的信息并上传商店图形，如截图和宣传视频。这也是您需要提供客户联系详情的地方。
- en: You can develop in-app purchasing by making an internal test available only
    to developers in your organization. Once you have the kinks worked out, and your
    app enters the alpha stage, you can broaden your test and make a closed test.
    After that, during beta development, you can have an open test.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过仅向组织内的开发者提供内部测试来开发应用内购买。一旦解决了问题，并且您的应用进入alpha阶段，您可以扩大测试并执行封闭测试。之后，在beta开发期间，您可以进行公开测试。
- en: On the Google Play Console website, click on your application and navigate to
    Store presence | In-app products | Managed Products.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Google Play Console网站上，点击您的应用并导航到商店展示 | 应用内产品 | 管理产品。
- en: 'Then, click on the blue button labelled **CREATE MANAGED PRODUCT**, as shown
    in the following screenshot:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击蓝色按钮**创建管理产品**，如下截图所示：
- en: '![](img/198f86cb-a3ed-407a-9aef-a3186c37c014.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/198f86cb-a3ed-407a-9aef-a3186c37c014.png)'
- en: 'That will open a new form titled **New managed product**, as shown in the following
    screenshot:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开一个名为**新管理产品**的新表单，如下截图所示：
- en: '![](img/e0331322-e604-4c12-9950-800fa479731e.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/e0331322-e604-4c12-9950-800fa479731e.png)'
- en: 'On this form, complete the following fields:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此表单中，完成以下字段：
- en: Product ID: This will be used in the Qt app identifier
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品ID：这将用于Qt应用程序标识符
- en: Title
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标题
- en: Description
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述
- en: Status: ACTIVE or INACTIVE
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态：活动或非活动
- en: Pricing: This is limited to be between $0.99 and $550.00
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 价格：此价格限制在$0.99和$550.00之间
- en: Then, click Save. You will be registered on Google Play.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击保存。您将在Google Play上注册。
- en: If you use the same Product ID for both Android and iOS, it will make the process
    of developing in-app purchases easier.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您为Android和iOS使用相同的产品ID，将使开发应用内购买的过程更容易。
- en: Registering on iOS App Store
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注册iOS应用商店
- en: You should already be enrolled on the Apple Developer Program and to have accepted
    all of the necessary agreements relating to tax, banking, and other data.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该已经注册在Apple开发者计划中，并已接受所有与税务、银行和其他数据相关的必要协议。
- en: 'This section assumes you have already registered an app ID, have signed the
    relevant agreements, and so on. Registering an in-app purchase on iOS is fairly
    straightforward:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 本节假设您已经注册了应用ID，已签署相关协议等。在iOS上注册应用内购买相对简单：
- en: Navigate to your Apple App Store Connect account and sign in. Click on **Apps**,
    as we will be registering an application's in-app products.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您的Apple App Store Connect账户并登录。点击**应用**，因为我们将要注册应用的内置产品。
- en: 'Click on your app and then select Features. At the top of the page, click on
    the blue circle that contains a plus sign that is labelled **In-App Purchases
    (0)**, as shown in the following screenshot:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击您的应用，然后选择功能。在页面顶部，点击包含加号标记的蓝色圆圈，标记为**应用内购买（0）**，如下截图所示：
- en: '![](img/8915d530-a536-4bf3-a013-f9364bdeaffd.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/8915d530-a536-4bf3-a013-f9364bdeaffd.png)'
- en: 'You can choose from the following options:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从以下选项中选择：
- en: '| Consumable | Items that are used once by the app and need to be re-purchased
    |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 可消耗 | 应用一次使用后需要重新购买的项目 |'
- en: '| Non-Consumable | Items that do not expire but are purchased once |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 非消耗性 | 一次性购买但不失效的项目 |'
- en: '| Auto-Renewing Subscription | Subscription content that is automatically renewed
    |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 自动续订订阅 | 自动续订的订阅内容 |'
- en: '| Non-Renewing Subscription | Subscription content that is not renewed |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 非续订订阅 | 不再续订的订阅内容 |'
- en: 'You will have to fill in a form for this part of the process, so decide beforehand
    on the values for the following labelled items:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将需要填写此过程的部分表格，因此事先决定以下标记项的值：
- en: Reference name
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考名称
- en: Product ID
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品ID
- en: Price
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 价格
- en: Tiered prices (start at $1.49)
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分级价格（起价$1.49）
- en: Start Date
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始日期
- en: End Date
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结束日期
- en: Display Name
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示名称
- en: Description
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述
- en: Screenshot
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 截图
- en: Review Notes
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 审查备注
- en: Once you have the product ID, take note of this information for later. You will
    need it once you create your in-app purchase product with Qt Creator.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您有了产品ID，请记住此信息以备后用。您在Qt Creator创建应用内购买产品时将需要它。
- en: Creating an in-app product
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建应用内产品
- en: Now, the real fun begins! Suppose you have designed a treasure-hunting game
    where users move around a map and look for treasure. In this scenario, you may
    want to offer accelerated gameplay, where users can purchase hints to help them
    to find the game's hidden treasure.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，真正的乐趣开始了！假设您设计了一个寻宝游戏，用户在地图上移动并寻找宝藏。在这种情况下，您可能希望提供加速游戏玩法，用户可以购买提示来帮助他们找到游戏的隐藏宝藏。
- en: In our example, we will be selling colors. Colors are really great, as they
    are collectable and can be sold and traded by users with each other.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们将出售颜色。颜色真的很好，因为它们是可收集的，并且用户可以相互之间出售和交易。
- en: When you have developed and registered your app as was mentioned in the last
    sections on *Registering on iOS App Store* and *Registering on Android Google
    Play*, you can now develop and test Qt Purchasing. We will start by using QML.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当你根据上一节中提到的在*iOS App Store*和*Android Google Play*上注册的说明开发并注册了你的应用后，你现在可以开发并测试Qt购买。我们将从使用QML开始。
- en: 'The import line in your QML app to use Qt Purchasing is as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的QML应用中使用Qt购买时的导入行如下所示：
- en: '[PRE0]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add the following line to the profile:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下行添加到配置文件中：
- en: '[PRE1]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, decide what your in-app purchase is going to be. Note that Qt Purchasing
    has the following two product types:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，决定你的应用内购买将是什么。请注意，Qt购买有以下两种产品类型：
- en: Consumable
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消耗品
- en: Unlockable
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可解锁
- en: Consumable purchases are things such as game tokens that are used once and can
    be purchased more than once. One example of this is game currency.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 消耗品购买是一些一次性使用且可以多次购买的东西，例如游戏代币。一个例子是游戏货币。
- en: Unlockable purchases are features such as additional characters, advertisement
    removal, and level unlocking that can be re-downloaded, restored, or even transferred.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 可解锁购买是诸如额外角色、广告移除和关卡解锁等特性，这些特性可以被重新下载、恢复，甚至转移。
- en: Our color product is a consumable purchase, enabling users to buy as many colors
    as they want.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的颜色产品是一种消耗品购买，使用户能够购买他们想要的任意数量的颜色。
- en: 'In QtPurchasing, there are the following three QML components:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在QtPurchasing中，有以下三个QML组件：
- en: '`Product`'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`产品`'
- en: '`Store`'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`存储`'
- en: '`Transaction`'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`交易`'
- en: Store
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存储
- en: The `Store` component represents the platform's default marketplace; on Android,
    it is the Google Play Store, and on iOS, it's the Apple App Store. A `Store` element
    has one method, `restorePurchases()`, which is used a user wants to restore their
    purchases.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`存储`组件代表平台默认的市场；在Android上，它是Google Play商店，而在iOS上则是Apple App Store。一个`存储`元素有一个方法，`restorePurchases()`，当用户想要恢复他们的购买时使用。'
- en: You can either make `Product` a child of `Store`, or standalone, where the `Store`
    object is specified by an ID.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将`产品`作为`存储`的子组件，或者作为独立组件，其中`存储`对象由ID指定。
- en: Product
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 产品
- en: The `Product` component represents an in-app purchase product. The `identifier`
    property corresponds to the product ID you used in the relevant stores when registering
    your in-app purchase products.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`产品`组件代表应用内购买产品。`identifier`属性对应于你在相关商店注册应用内购买产品时使用的产品ID。'
- en: 'There are a few things to keep in mind about the `Product` component:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`产品`组件，有以下几点需要注意：
- en: '`Product` can either be a child of `Store`, or it can be referred to by using
    the `id` property of `Store`'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`产品`可以是`存储`的子组件，或者可以使用`存储`的`id`属性来引用'
- en: '`Product` can have one of two types: `Product.Consumable` or `Product.Unlockable`'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`产品`可以有两种类型之一：`Product.Consumable`或`Product.Unlockable`'
- en: A `Product.Consumable` product can be purchased more than once, provided that
    the purchase has been finalized
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`Product.Consumable`产品可以购买多次，前提是购买已经完成
- en: A `Product.Unlockable` product is purchased once and can be restored
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`Product.Unlockable`产品一旦购买就可以恢复
- en: 'The following code demonstrates a `Product` component that has the type of
    `Product.Consumable`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码演示了一个具有`Product.Consumable`类型的`产品`组件：
- en: '[PRE2]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, it''s time to move on to our purchase options. Take at look at the following
    screenshot:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候继续我们的购买选项了。看看下面的截图：
- en: '![](img/2279ba26-a26f-4ae8-8c84-99ec66b8908b.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2279ba26-a26f-4ae8-8c84-99ec66b8908b.png)'
- en: 'To start the purchase procedure, use the `purchase()` method, which the OK
    button calls to bring up the following dialog from Google Play Store:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始购买流程，请使用`purchase()`方法，OK按钮调用该方法以从Google Play商店弹出以下对话框：
- en: '![](img/721ccae4-182d-470a-b472-e595b6359b94.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/721ccae4-182d-470a-b472-e595b6359b94.png)'
- en: Notice that the payment made in the preceding screenshot is not a real one,
    but is instead made with the Google test card. No money was exchanged.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到前面截图中的付款不是真实的，而是使用Google测试卡进行的。没有进行货币交换。
- en: 'You will now want to handle the `onPurchaseSucceeded` and `onPurchaseFailed` signals.
    If you have products that can be restored, do so in the `onPurchaseRestored` signal,
    as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在将想要处理`onPurchaseSucceeded`和`onPurchaseFailed`信号。如果你有可恢复的产品，请在`onPurchaseRestored`信号中恢复，如下所示：
- en: '[PRE3]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You should also save the transaction. When the app starts up, it queries the
    Store of any purchases. If the user has purchased products, the `onPurchaseSucceeded` signal
    will get called with the transition ID for each purchase, so the app knows what
    purchases have already been made and can act accordingly.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 您还应该保存交易。当应用启动时，它会查询商店中的任何购买。如果用户已购买产品，`onPurchaseSucceeded` 信号将被调用，并带有每个购买的过渡
    ID，这样应用就知道已经完成了哪些购买，并可以相应地采取行动。
- en: 'The following screenshot illustrates a successful purchase on Google Play Store:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图说明了 Google Play 商店上的成功购买：
- en: '![](img/91ef0de1-ad7d-4f0a-9609-aab7f3ca4925.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/91ef0de1-ad7d-4f0a-9609-aab7f3ca4925.png)'
- en: 'If the purchase fails for whatever reason, `onPurchaseFailed` will be called,
    as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果购买因任何原因失败，将调用 `onPurchaseFailed`，如下所示：
- en: '[PRE4]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You may want to provide a user notification for either of the events we've looked
    at here, simply to provide clarity and avoid confusion for the user.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能希望为这里查看的任何事件提供用户通知，仅为了提供清晰并避免用户混淆。
- en: Transaction
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交易
- en: '`Transaction` represents the purchased product in the market store and contains
    properties regarding the purchase, including `status`, `orderId`, and a string
    describing any error that may have occurred. The following table explains these
    properties:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`Transaction` 代表市场商店中购买的产品，并包含有关购买的信息，包括 `status`、`orderId` 以及描述可能发生的任何错误的字符串。以下表格解释了这些属性：'
- en: '| `errorString` | A platform-specific string that describes an error |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| `errorString` | 描述错误的特定平台字符串 |'
- en: '| `failureReason` | Can be either `NoFailure`, `CanceledByUser`, or `ErrorOccurred`
    |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| `failureReason` | 可以是 `NoFailure`、`CanceledByUser` 或 `ErrorOccurred` |'
- en: '| `orderId` | A unique ID issued by the platform store |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| `orderId` | 由平台商店发出的唯一 ID |'
- en: '| `product` | The `product` object |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| `product` | `product` 对象 |'
- en: '| `status` | Can be either `PurchaseApproved`, `PurchaseFailed`, or `PurchaseRestored`
    |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| `status` | 可以是 `PurchaseApproved`、`PurchaseFailed` 或 `PurchaseRestored` |'
- en: '| `timestamp` | The time a transaction occurred |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| `timestamp` | 交易发生的时间 |'
- en: '`Transaction` has one method: `finalize()`. All transactions need to be finalized
    whether they succeed or fail.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`Transaction` 有一个方法：`finalize()`。所有交易无论成功与否都需要最终化。'
- en: 'Once a user has successfully purchased a color, they should see something like
    the following screenshot:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦用户成功购买了一种颜色，他们应该会看到如下截图所示的内容：
- en: '![](img/c61ef7ce-92ee-45ba-be11-9b64e00b26b3.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c61ef7ce-92ee-45ba-be11-9b64e00b26b3.png)'
- en: Note that unlockable products can be restored. Let's move on and take a look
    at how that can be handled.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 注意可解锁产品可以恢复。让我们继续前进，看看如何处理这一点。
- en: Restoring purchases
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 恢复购买
- en: A user may want to restore purchases for a number of reasons. Perhaps they have
    re-installed the app, switched to a new phone, or even reset their existing phone.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可能出于多种原因想要恢复购买。也许他们重新安装了应用，切换到了新手机，或者甚至重置了现有的手机。
- en: Only unlockable products can be restored.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 只有可解锁产品才能恢复。
- en: 'Restoring purchases are initialized via the `restorePurchases()` method, which
    will then call the `onPurchaseRestored` signal for each purchase that gets restored,
    as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 恢复购买通过 `restorePurchases()` 方法初始化，然后将为每个恢复的购买调用 `onPurchaseRestored` 信号，如下所示：
- en: '[PRE5]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the `product` component, it appears as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `product` 组件中，它看起来如下所示：
- en: '[PRE6]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As you can see, QML makes it super simple to add in-app purchases and even to
    restore them if and when the need arises.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，QML 使得添加内购以及必要时恢复它们变得非常简单。
- en: Summary
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Qt makes it fairly simple to implement in-app purchases. Most of the work will
    involve getting your app together, and registering in-app products in your platform's
    store.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Qt 使得实现内购相当简单。大部分工作将涉及整理您的应用，并在您平台的应用商店中注册内购产品。
- en: You should now be able to register an in-app purchase product with the relevant
    app stores. You should also know how to use QML to implement the in-app purchase
    product and make a store transition. We also explored how to restore any unlockable
    product purchases.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在应该能够将内购产品注册到相关的应用商店。您还应该知道如何使用 QML 实现内购产品并执行商店转换。我们还探讨了如何恢复任何可解锁产品的购买。
- en: This chapter was all about mobile phone applications and purchases. In the next
    chapter, we will look at various cross-compiling methods and at how to debug remotely
    with an embedded device.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这章全部关于手机应用和购买。在下一章中，我们将探讨各种交叉编译方法以及如何使用嵌入式设备进行远程调试。
