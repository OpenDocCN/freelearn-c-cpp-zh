- en: Date and Time
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日期和时间
- en: Problems
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Here are the problem-solving sections for this chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的问题解决部分如下。
- en: 39\. Measuring function execution time
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 39.测量函数执行时间
- en: Write a function that can measure the execution time of a function (with any
    number of arguments) in any required duration (such as seconds, milliseconds,
    microseconds, and so on).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个函数，可以测量函数（带任意数量的参数）在任何所需持续时间（如秒、毫秒、微秒等）内的执行时间。
- en: 40\. Number of days between two dates
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 40.两个日期之间的天数
- en: Write a function that, given two dates, returns the number of days between the
    two dates. The function should work regardless of the order of the input dates.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个函数，给定两个日期，返回两个日期之间的天数。该函数应该能够在输入日期的顺序不同的情况下工作。
- en: 41\. Day of the week
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 41.星期几
- en: Write a function that, given a date, determines the day of the week. This function
    should return a value between 1 (for Monday) and 7 (for Sunday).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个函数，给定一个日期，确定星期几。此函数应返回1（星期一）到7（星期日）之间的值。
- en: 42\. Day and week of the year
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 42.年的日子和星期
- en: Write a function that, given a date, returns the day of the year (from 1 to
    365 or 366 for leap years) and another function that, for the same input, returns
    the calendar week of the year.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个函数，给定一个日期，返回一年中的日子（从1到365或闰年的366），并且另一个函数，对于相同的输入，返回一年中的日历周。
- en: 43\. Meeting time for multiple time zones
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 43.多个时区的会议时间
- en: Write a function that, given a list of meeting participants and their time zones,
    displays the local meeting time for each participant.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个函数，给定会议参与者和他们的时区列表，显示每个参与者的本地会议时间。
- en: 44\. Monthly calendar
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 44.每月日历
- en: 'Write a function that, given a year and month, prints to the console the month
    calendar. The expected output format is as follows (the example is for December
    2017):'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个函数，给定一年和一个月，将月历打印到控制台。预期的输出格式如下（示例是2017年12月）：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Solutions
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案
- en: Here are the solutions for the above problem-solving sections.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是上述问题解决部分的解决方案。
- en: 39\. Measuring function execution time
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 39.测量函数执行时间
- en: 'To measure the execution time of a function, you should retrieve the current
    time before the function execution, execute the function, then retrieve the current
    time again and determine how much time passed between the two time points. For
    convenience, this can all be put in a `variadic` function template that takes
    as arguments the function to execute and its arguments, and:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要测量函数的执行时间，您应该在函数执行之前检索当前时间，执行函数，然后再次检索当前时间，并确定两个时间点之间经过了多少时间。为了方便起见，所有这些都可以放在一个“可变参数”函数模板中，该模板将函数执行及其参数作为参数，并且：
- en: Uses `std::high_resolution_clock` by default to determine the current time.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认使用`std::high_resolution_clock`来确定当前时间。
- en: Uses `std::invoke()` to execute the function to measure, with its specified
    arguments.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`std::invoke()`来执行要测量的函数及其指定的参数。
- en: 'Returns a duration and not a number of ticks for a particular duration. This
    is important so that you don''t lose resolution. It enables you to add execution
    time duration of various resolutions, such as seconds and milliseconds, which
    would not be possible by returning a tick count:'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回一个持续时间而不是特定持续时间的滴答数。这很重要，这样您就不会丢失分辨率。它使您能够添加各种分辨率的执行时间持续时间，例如秒和毫秒，这是通过返回滴答数是不可能的：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This function template can be used as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数模板可以按照以下方式使用：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 40\. Number of days between two dates
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 40.两个日期之间的天数
- en: As of C++17, the `chrono` standard library does not have support for working
    with dates, weeks, calendars, time zones, and other useful related features. This
    will change in C++20, as time zones and calendar support have been added to the
    standard at the Jacksonville meeting, in March 2018\. The new additions are based
    on an open source library called `date`, built on top of `chrono`, developed by
    Howard Hinnant and available on GitHub at [https://github.com/HowardHinnant/date](https://github.com/HowardHinnant/date).
    We will use this library to solve several of the problems in this chapter. Although
    in this implementation the namespace is `date`, in C++20 it will be part of `std::chrono`.
    However, you should be able to simply replace the namespace without any further
    code changes.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 截至C++17，`chrono`标准库不支持处理日期、周、日历、时区和其他有用的相关功能。这将在C++20中改变，因为时区和日历支持已经在2018年3月的杰克逊维尔会议上被添加到了标准中。新的添加是基于一个名为`date`的开源库，它是在`chrono`之上构建的，由Howard
    Hinnant开发，并在GitHub上可用[https://github.com/HowardHinnant/date](https://github.com/HowardHinnant/date)。我们将使用这个库来解决本章的几个问题。尽管在这个实现中命名空间是`date`，但在C++20中它将成为`std::chrono`的一部分。但是，您应该能够简单地替换命名空间而不需要进行任何其他代码更改。
- en: 'To solve this task, you could use the `date::sys_days` class, available in
    the `date.h `header. It represents a count of days since the `std::system_clock` epoch.
    This is a `time_point` with a resolution of a day and is implicitly convertible
    to `std::system_clock::time_point`. Basically, you have to construct two objects
    of this type and subtract them. The result is exactly the number of days between
    the two dates. The following is a simple implementation of such a function:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要解决这个任务，您可以使用`date.h`头文件中提供的`date::sys_days`类。它表示自`std::system_clock`纪元以来的天数。这是一个具有一天分辨率的`time_point`，可以隐式转换为`std::system_clock::time_point`。基本上，您必须构造两个这种类型的对象并对它们进行减法。结果恰好是两个日期之间的天数。以下是这样一个函数的简单实现：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here are a couple of examples of how these overloaded functions could be used:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是这些重载函数如何使用的一些示例：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 41\. Day of the week
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 41.星期几
- en: 'Solving this problem is again relatively straightforward if you use the `date`
    library. However, this time, you have to use the following types:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用`date`库，解决这个问题也是相对简单的。但是，这一次，您必须使用以下类型：
- en: '`date::year_month_day`, a structure that represents a day with fields for year,
    month (1 to 12), and day (1 to 31).'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`date::year_month_day`，一个表示具有年、月（1到12）和日（1到31）字段的日期的结构。'
- en: '`date::iso_week::year_weeknum_weekday`, from the `iso_week.h `header, is a
    structure that has fields for year, number of weeks in a year, and number of days
    in a week (1 to 7). This class is implicitly convertible to and from `date::sys_days`,
    which makes it explicitly convertible to any other calendar system that is implicitly
    convertible to and from `date::sys_days`, such as `date::year_month_day`.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`date::iso_week::year_weeknum_weekday`，来自`iso_week.h`头文件，是一个结构，它有年份、一年中的周数和一周中的天数（1到7）的字段。这个类可以隐式转换为`date::sys_days`，这使得它可以显式转换为任何其他日历系统，只要它可以隐式转换为`date::sys_days`，比如`date::year_month_day`。'
- en: 'With that being said, the problem resolves to creating a `year_month_day` object
    to represent the desired date and then a `year_weeknum_weekday` object from it,
    and retrieving the day of the week with `weekday()`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 说到这里，问题就变成了创建一个`year_month_day`对象来表示所需的日期，然后从中创建一个`year_weeknum_weekday`对象，并用`weekday()`检索星期几：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 42\. Day and week of the year
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 42\. 一年中的日和周
- en: 'The solution to this two-part problem should be straightforward from the previous
    two:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这个两部分问题的解决方案应该是基于前两部分的。
- en: To compute the day of the year, you subtract two `date::sys_days` objects, one
    representing the given day and the other January 0 of the same year. Alternatively,
    you could start from January 1 and add 1 to the result.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要计算一年中的天数，您需要减去两个`date::sys_days`对象，一个代表给定的日期，另一个代表同一年的1月0日。或者，您可以从1月1日开始，然后将结果加1。
- en: 'To determine the week number of the year, construct a `year_weeknum_weekday`
    object, like in the previous problem, and retrieve the `weeknum()` value:'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要确定一年中的周数，构造一个`year_weeknum_weekday`对象，就像在前面的问题中一样，并检索`weeknum()`的值：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'These functions can be used as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数可以如下使用：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 43\. Meeting time for multiple time zones
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 43\. 多个时区的会议时间
- en: To work with time zones, you must use the `tz.h` header of the `date` library.
    However, this needs the *IANA Time Zone Database* to be downloaded and uncompressed
    on your machine.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用时区，您必须使用`date`库的`tz.h`头文件。然而，这需要在您的机器上下载并解压*IANA时区数据库*。
- en: 'This is how to prepare the time zone database for the date library:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这是如何为日期库准备时区数据库的：
- en: Download the latest version of the database from [https://www.iana.org/time-zones](https://www.iana.org/time-zones).
    Currently, the latest version is called `tzdata2017c.tar.gz`.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从[https://www.iana.org/time-zones](https://www.iana.org/time-zones)下载数据库的最新版本。目前，最新版本被称为`tzdata2017c.tar.gz`。
- en: Uncompress this to any location on your machine, in a subdirectory called `tzdata`.
    Let's suppose the parent directory is `c:\work\challenges\libs\date` (on a Windows
    machine); this will have a subdirectory called `tzdata`.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将其解压缩到机器上的任何位置，在一个名为`tzdata`的子目录中。假设父目录是`c:\work\challenges\libs\date`（在Windows机器上）；这将有一个名为`tzdata`的子目录。
- en: For Windows, you need to download a file called `windowsZones.xml`, containing
    mappings of Windows time zones to IANA time zones. This is available at [https://unicode.org/repos/cldr/trunk/common/supplemental/windowsZones.xml](https://unicode.org/repos/cldr/trunk/common/supplemental/windowsZones.xml).
    The file must be stored in the same `tzdata` subdirectory created earlier.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Windows，您需要下载一个名为`windowsZones.xml`的文件，其中包含Windows时区到IANA时区的映射。这可以在[https://unicode.org/repos/cldr/trunk/common/supplemental/windowsZones.xml](https://unicode.org/repos/cldr/trunk/common/supplemental/windowsZones.xml)找到。该文件必须存储在之前创建的`tzdata`子目录中。
- en: In your project settings, define a preprocessor macro called `INSTALL` that
    indicates the parent directory for the `tzdata` subdirectory. For the example
    given here, you should have `INSTALL=c:\\work\\challenges\\libs\\date`. (Note
    that the double backslash is necessary because the macro is used to create a file
    path using stringification and concatenation, and would otherwise result in an
    incorrect path.)
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在项目设置中，定义一个名为`INSTALL`的预处理器宏，指示`tzdata`子目录的父目录。对于这里给出的示例，您应该有`INSTALL=c:\\work\\challenges\\libs\\date`。（请注意，双反斜杠是必需的，因为该宏用于使用字符串化和连接创建文件路径，否则会导致不正确的路径。）
- en: 'To solve this problem, we will consider a user structure with minimal information,
    such as name and time zone. The time zone is created using the `date::locate_zone()` function:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们将考虑一个具有最少信息的用户结构，比如姓名和时区。时区是使用`date::locate_zone()`函数创建的：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'A function that displays a list of users and their local time for the start
    of a meeting should transform the given time from a reference zone to the time
    in their own zone. To do that, we can use a conversion constructor of the `date::zoned_time`
    class:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 一个显示用户列表和他们当地时间的函数应该将给定的时间从一个参考时区转换为他们自己时区的时间。为了做到这一点，我们可以使用`date::zoned_time`类的转换构造函数：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This function can be used as follows, where the given time (hour and minute)
    is represented in the current time zone:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数可以如下使用，给定的时间（小时和分钟）在当前时区中表示：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 44\. Monthly calendar
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 44\. 月度日历
- en: 'Solving this task is actually partially based on the previous tasks. In order
    to print the days of the month as indicated in the problem, you should know:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个任务实际上部分地基于前面的任务。为了按照问题中指示的方式打印月份的天数，您应该知道：
- en: What weekday is the first day of the month. This can be determined using the
    `week_day()` function created for a previous problem.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 月初的第一天是星期几。这可以使用为前一个问题创建的`week_day()`函数来确定。
- en: The number of days in the month. This can be determined using the `date::year_month_day_last`
    structure and retrieving the value of `day()`.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 月份中的天数。这可以使用`date::year_month_day_last`结构来确定，并检索`day()`的值。
- en: 'With this information determined first, you should:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些信息确定后，您应该：
- en: Print empty values for the first week before the first weekday
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第一个工作日之前的第一周打印空值
- en: Print the day number with the proper formatting from 1 to the last day of the
    month
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以从1到月底的适当格式打印日期
- en: Break on a new line after every seven days (counting from day 1 of the first
    week, even though that could belong to the previous month)
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在每七天后换行（从第一周的第一天开始计算，即使它可能属于上个月）
- en: 'The implementation of all this is shown here:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些的实现如下所示：
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
