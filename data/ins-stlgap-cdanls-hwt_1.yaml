- en: Chapter 1. Instant StyleCop Code Analysis How-to
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 章. 立即使用 StyleCop 代码分析教程
- en: Welcome to *Instant StyleCop Code Analysis How-to*. If we look at how we begin
    development of medium and big projects, one of the first things we do is to edict
    base principles and among them, we define coding conventions. These rules, stating
    how our code must look like, are here in order to improve readability and maintainability
    for all developers of the team. The choices made there are fairly arbitrary and
    depends on the background and the likes and dislikes of the person (or the development
    team) who laid them down. After the project begins, it however takes a lot of
    time and code reviews to follow them.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎使用 *Instant StyleCop 代码分析教程*。如果我们看看我们是如何开始开发中型和大项目的，我们首先做的事情之一就是颁布基本原则，其中之一就是定义编码规范。这些规则，说明我们的代码必须是什么样子，是为了提高所有团队成员的可读性和可维护性。那里的选择相当随意，取决于制定它们的人（或开发团队）的背景以及他们的喜好和厌恶。项目开始后，然而，需要花费大量时间和代码审查来遵循它们。
- en: This is where **StyleCop** comes in. In this book we will take a look at some
    recipes that range from a simple to advanced level, which will tell you all about
    StyleCop and how it is used to analyze code.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 **StyleCop** 发挥作用的地方。在这本书中，我们将查看一些从简单到高级水平的食谱，这些食谱将告诉您所有关于 StyleCop 以及它是如何用于分析代码的。
- en: Installing StyleCop with Visual Studio (Simple)
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Visual Studio 安装 StyleCop（简单）
- en: In this recipe, we will describe the installation process of StyleCop, learn
    how to configure the rules to be executed on a project, and how to launch an analysis
    from Visual Studio.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将描述 StyleCop 的安装过程，学习如何配置要在项目中执行的规定，以及如何从 Visual Studio 中启动分析。
- en: Getting ready
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In order to follow this recipe, you will need to have at least one of the following
    Visual Studio programs installed:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为了遵循这个食谱，您至少需要安装以下 Visual Studio 程序之一：
- en: Visual Studio 2008 Professional
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio 2008 专业版
- en: Visual Studio 2010 Professional
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio 2010 专业版
- en: Visual Studio 2012 Professional
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio 2012 专业版
- en: How to do it...
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: Download StyleCop from its website ([http://stylecop.codeplex.com](http://stylecop.codeplex.com)).
    At the time of writing, the current version of StyleCop is 4.7 released on January
    5, 2012.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从其网站下载 StyleCop ([http://stylecop.codeplex.com](http://stylecop.codeplex.com))。在撰写本文时，StyleCop
    的当前版本是 4.7，发布于 2012 年 1 月 5 日。
- en: Once downloaded, verify your Visual Studio is closed and launch the setup. The
    procedure is relatively straightforward. The only tricky part is to choose the
    correct components for your installation according to your use.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载完成后，请确保您的 Visual Studio 已关闭，然后启动安装程序。该过程相对简单。唯一棘手的部分是根据您的使用选择正确的安装组件。
- en: 'The wizard shows an MSBuild integration step during installation as shown in
    the following screenshot. Here are two pieces of advice on the installation process:'
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 安装向导在安装过程中会显示 MSBuild 集成步骤，如下面的截图所示。以下是关于安装过程的两点建议：
- en: For a developer using only Visual Studio on his computer, staying with only
    the Visual Studio integration is fine
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于仅在计算机上使用 Visual Studio 的开发者来说，只保留 Visual Studio 集成是完全可以的
- en: However, if you need to use another IDE such as **SharpDevelop** or need StyleCop
    to be used in your CI, the best approach is to add the MSBuild integration as
    it might be required
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然而，如果您需要使用其他 IDE，例如 **SharpDevelop**，或者需要 StyleCop 在您的 CI 中使用，最佳方法是添加 MSBuild
    集成，因为它可能需要。
- en: '![How to do it...](img/9543_1_1.jpg)'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做…](img/9543_1_1.jpg)'
- en: Once the installation process is finished, let's see what has been added to
    your Visual Studio.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装过程完成后，让我们看看您的 Visual Studio 中添加了什么。
- en: Open a project in your Visual Studio.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的 Visual Studio 中打开一个项目。
- en: Right-click on the project file in the explorer solution panel, and then click
    on **StyleCop Settings...** to open the configuration window as shown in the following
    screenshot:![How to do it...](img/9543_1_2.jpg)
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在资源管理器解决方案面板中右键单击项目文件，然后单击 **StyleCop 设置…** 以打开配置窗口，如下面的截图所示：![如何做…](img/9543_1_2.jpg)
- en: Once you have finished selecting the rules you need, you can launch your first
    analysis of code.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您完成了所需规则的选取，您就可以启动您的首次代码分析。
- en: 'In the Explorer solution, right-click on the project file to open the context
    menu, and then click on **Run StyleCop…** to launch your analysis. You can perform
    analysis on different scope by launching StyleCop in different ways:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在资源管理器解决方案中，右键单击项目文件以打开上下文菜单，然后单击 **运行 StyleCop…** 以启动分析。您可以通过不同的方式启动 StyleCop
    来执行不同范围的分析：
- en: From the **Tools** menu, you can perform a scan for the current C# document,
    or a full scan of your solution
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 **工具** 菜单，你可以对当前 C# 文档执行扫描，或者对整个解决方案进行完整扫描
- en: In the Explorer solution, from the context menu, where you can restrict the
    scope of your analysis to the node you have currently selected
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在资源管理器解决方案中，从上下文菜单，你可以将分析范围限制为你当前选择的节点。
- en: And from the coding panel, where you can analyze the code you're currently modifying.
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并且从编码面板，你可以分析你目前正在修改的代码。
- en: How it works...
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: StyleCop configuration is made on a project basis, not solution. This means
    you will have to specify for each project what rules and other configuration data
    you will use.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: StyleCop 配置是基于项目的，而不是解决方案。这意味着你必须为每个项目指定你将使用哪些规则和其他配置数据。
- en: When opening a Visual Studio solution, you can access the StyleCop configuration
    from the context menu of each project in the explorer panel. You can also find
    configurations made this way in the `Settings.Stylecop` file of the project folder.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当打开 Visual Studio 解决方案时，你可以从资源管理器面板中每个项目的上下文菜单访问 StyleCop 配置。你还可以在项目文件夹的 `Settings.Stylecop`
    文件中找到这种方式创建的配置。
- en: You can also use some "master" configuration files if you want to propagate
    the same settings in multiple projects.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望在不同项目中传播相同的设置，你也可以使用一些“主”配置文件。
- en: There's more...
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Now let's talk about some useful options that are available in the settings
    and how to have StyleCop violations displayed in your favorite IDE if it's not
    Visual Studio.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来谈谈设置中的一些有用选项，以及如何在不是 Visual Studio 的情况下在你的 favorite IDE 中显示 StyleCop 违规。
- en: Rules activation
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 规则激活
- en: Each section of rules may contain some additional configuration elements (they
    will be displayed in the **Detailed settings** region of the **Rules** tab.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 每个规则部分可能包含一些额外的配置元素（它们将在 **规则** 选项卡的 **详细设置** 区域中显示。
- en: 'At the moment you have additional configuration elements for the following
    lines:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 目前你还有以下行的附加配置元素：
- en: '**C#**: The detailed settings of this section are certainly the most important
    as they allow you to exclude generated and designer files from further analysis
    by StyleCop. This is helpful as designer files do not generally follow these rules
    and generates many issues.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**C#**：这个部分的详细设置当然是最重要的，因为它们允许你排除由 StyleCop 进一步分析生成的和设计器文件。这很有帮助，因为设计器文件通常不遵循这些规则，并生成许多问题。'
- en: '**Documentation rules**: In this section, you can change the check scope of
    the documentation. This means you can remove the rule checking for private and
    internal code and you can exclude fields from it.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文档规则**：在这个部分，你可以更改文档的检查范围。这意味着你可以移除对私有和内部代码的规则检查，并且你可以从其中排除字段。'
- en: '**Ordering rules**: The detailed section lets you exclude the generated code
    from the checks.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**排序规则**：详细部分让你可以排除生成的代码进行检查。'
- en: Merging StyleCop settings
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 合并 StyleCop 设置
- en: 'Earlier in this chapter, I explained that StyleCop configuration was set up
    on a project basis. While this is true for the standard behavior, the **Setting
    Files** tab allows you to change the default behavior and specify a setting file
    to merge with your current project settings as shown in the following screenshot:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章前面，我解释了 StyleCop 配置是基于项目的。虽然这是标准行为，但 **设置文件** 选项卡允许你更改默认行为并指定一个设置文件与你的当前项目设置合并，如下面的截图所示：
- en: '![Merging StyleCop settings](img/9543_1_3.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![合并 StyleCop 设置](img/9543_1_3.jpg)'
- en: Doing so allows you to have a global configuration file and depend on it for
    rule exclusion. If you modify any settings, they will appear in bold in the **Rules**
    tabs to show they have been overwritten.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做允许你拥有一个全局配置文件，并依赖于它进行规则排除。如果你修改了任何设置，它们将在 **规则** 选项卡中以粗体显示，以表明它们已被覆盖。
- en: Using StyleCop with Express editions of Visual Studio and SharpDevelop
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 Visual Studio Express 和 SharpDevelop 的 Express 版本中使用 StyleCop
- en: In order to use StyleCop with Visual Studio Express or SharpDevelop, we have
    to enable MSBuild integration. For SharpDevelop, that is all that's required.
    SharpDevelop will then take care of missing lines in your project files.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用 StyleCop 与 Visual Studio Express 或 SharpDevelop，我们必须启用 MSBuild 集成。对于 SharpDevelop，这就足够了。然后
    SharpDevelop 将负责处理项目文件中缺失的行。
- en: However, for Visual Studio Express, you need to manually add StyleCop analysis
    in your project files. See the *Automating StyleCop using MSBuild (Simple)* recipe
    to know how to do this.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对于 Visual Studio Express，你需要手动在你的项目文件中添加 StyleCop 分析。请参阅 *使用 MSBuild 自动化
    StyleCop（简单）* 菜谱了解如何操作。
- en: Once you have set up StyleCop analysis in the projects files of your solution,
    StyleCop violations will be displayed as warnings or errors at compile time.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你在解决方案的项目文件中设置了StyleCop分析，StyleCop违规将被显示为编译时的警告或错误。
- en: Tip
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Is there a way to do automate StyleCop integration for all my project files?**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**有没有一种方法可以自动化所有项目文件的StyleCop集成？**'
- en: Since framework 4.0 it is also possible to include the `Stylecop.targets` file
    in `C:\Program Files\MSBuild\4.0\Microsoft.CSharp.targets\ImportAfter\`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 自从4.0框架以来，也可以在`C:\Program Files\MSBuild\4.0\Microsoft.CSharp.targets\ImportAfter\`中包含`Stylecop.targets`文件。
- en: This will allow the integration of `Stylecop.targets` by default in all the
    project builds. If the directory doesn't exist, you will have to create it.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许默认在所有项目构建中集成`Stylecop.targets`。如果目录不存在，你必须创建它。
- en: 'To be sure of version of the framework MSBuild uses, you can run the following
    command in your visual studio command line:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保MSBuild使用的框架版本，你可以在你的Visual Studio命令行中运行以下命令：
- en: '[PRE0]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Understanding the Resharper add-in (Simple)
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Resharper插件（简单）
- en: In this recipe, we will discover the StyleCop add-in for Resharper. We will
    see its real-time analysis and how to easily fix most of the StyleCop violations.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将发现Resharper的StyleCop插件。我们将看到其实时分析和如何轻松修复大多数的StyleCop违规。
- en: Getting ready
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For this recipe, you will need to have:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个食谱，你需要准备以下内容：
- en: StyleCop 4.7 installed.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已安装StyleCop 4.7。
- en: Resharper 7.1 installed. Evaluation version available at [http://devnet.jetbrains.com/docs/DOC-280](http://devnet.jetbrains.com/docs/DOC-280).
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已安装Resharper 7.1。评估版本可在[http://devnet.jetbrains.com/docs/DOC-280](http://devnet.jetbrains.com/docs/DOC-280)获取。
- en: Visual Studio Professional (2008, 2010, or 2012).
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio专业版（2008、2010或2012）。
- en: A sample C# project to modify.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个需要修改的C#项目样本。
- en: How to do it...
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Note
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Before starting to see the benefit of Resharper with StyleCop, I have to say
    that the installation is not an easy one. First, each version of StyleCop seems
    to be tightly built on a specific version of Resharper. At the time of writing,
    StyleCop Version 4.7 is compatible with Resharper v7.1.1000.900\. You can find
    the compatibility matrix at [http://stylecop.codeplex.com/](http://stylecop.codeplex.com/).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始看到Resharper与StyleCop结合使用的益处之前，我必须说安装并不容易。首先，每个版本的StyleCop似乎都紧密依赖于Resharper的特定版本。在撰写本文时，StyleCop版本4.7与Resharper
    v7.1.1000.900兼容。你可以在[http://stylecop.codeplex.com/](http://stylecop.codeplex.com/)找到兼容性矩阵。
- en: Then you need to install them in a specific order to be able to use them. The
    exact order to install them is to begin with Resharper, and installing StyleCop
    after. If you didn't do it this way, you will have to remove both products and
    reinstall them in the right order.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你需要按照特定的顺序安装它们，以便能够使用它们。安装它们的正确顺序是从Resharper开始，然后安装StyleCop。如果你没有这样做，你必须删除这两个产品，并按正确的顺序重新安装。
- en: When you open Visual Studio for the first time after having installed Resharper,
    you will be asked if you want to reset the default settings of Resharper to comply
    with StyleCop rules. Click on **Yes** to do so.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你第一次打开安装了Resharper的Visual Studio时，你会被询问是否想要将Resharper的默认设置重置为符合StyleCop规则。点击**是**来执行此操作。
- en: Now let's open our sample project. The first thing visible is a new column at
    the right-hand side of the code screen as shown in the following screenshot:![How
    to do it...](img/9543_2_1.jpg)
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们打开我们的样本项目。首先可见的是代码屏幕右侧的新列，如下面的截图所示：![如何操作...](img/9543_2_1.jpg)
- en: This column updates in real time and gives you all the errors or warnings you
    have in your document. If you go over one of the warnings displayed in the file,
    you will be able to see a description of the warning.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这一列会实时更新，并显示你文档中所有的错误或警告。如果你浏览了文件中显示的任何警告，你将能够看到警告的描述。
- en: 'If you click on it, a light bulb icon will appear on the left-hand side of
    your code and provide you options for dealing with the error. Generally the options
    are of three kinds for each error:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你点击它，一个灯泡图标将出现在你的代码左侧，并提供处理错误的选项。通常每个错误有三个选项：
- en: You can either autofix the rule, which is also marked by a light bulb icon
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以选择自动修复规则，这同样被标记为一个灯泡图标
- en: You can explicitly suppress the error by automatically adding a suppress message
    in your code. This is marked by a hammer icon
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以通过在代码中自动添加抑制消息来显式抑制错误。这被标记为一个锤子图标
- en: And you can change the level of this kind of error for Resharper. This is marked
    as a barred light bulb
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以更改这种错误级别在Resharper中的设置。这被标记为一个禁止的灯泡图标
- en: 'The following screenshot shows you the options available for dealing with the
    StyleCop violation:'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图显示了处理 StyleCop 违规的选项：
- en: '![How to do it...](img/9543_2_2.jpg)'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![How to do it...](img/9543_2_2.jpg)'
- en: 'As this is quite a long task, we can fix in one go most of the violations.
    To do so, use the **Clean up** command. This command is accessible in three places:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于这是一个相当长的任务，我们可以一次修复大多数违规。要这样做，请使用 **清理** 命令。此命令可在三个地方访问：
- en: From the **Resharper** | **Tools** menu.
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 **Resharper** | **工具** 菜单。
- en: In the Explorer solution, from the context menu.
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在资源管理器解决方案中，从上下文菜单。
- en: And from the coding panel's context menu.
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并且从编码面板的上下文菜单。
- en: How it works...
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Whereas the auto clean up feature of Resharper helps to quickly fix a lot of
    violations, it won't fix all of them, and you will have to check the remaining
    violations manually or with the help of the fixing feature of Resharper.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Resharper 的自动清理功能可以帮助快速修复大量违规，但它不会修复所有违规，你将不得不手动检查剩余的违规，或者借助 Resharper 的修复功能。
- en: 'If you want to know what the autofixing capabilities of the Resharper add-in
    are, you can refer to the following link:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解 Resharper 插件的自动修复功能，可以参考以下链接：
- en: '[http://stylecop.codeplex.com/wikipage?title=ReSharper%20Fixes&referringTitle=Documentation](http://stylecop.codeplex.com/wikipage?title=ReSharper%20Fixes&referringTitle=Documentation)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://stylecop.codeplex.com/wikipage?title=ReSharper%20Fixes&referringTitle=Documentation](http://stylecop.codeplex.com/wikipage?title=ReSharper%20Fixes&referringTitle=Documentation)'
- en: You can manage the behavior of the Resharper addin in the **Resharper** | **Option…**
    menu. You have two menus that address StyleCop. The first is the **Code Inspection**
    | **Inspection Severity** menu, which allows you to change the way each StyleCop
    violation is displayed in Resharper.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 **Resharper** | **选项…** 菜单中管理 Resharper 插件的行为。你有两个菜单针对 StyleCop。第一个是 **代码检查**
    | **检查严重性** 菜单，它允许你更改 StyleCop 违规在 Resharper 中的显示方式。
- en: 'The second one allows you to manage how StyleCop is running under Resharper,
    as shown in the following screenshot:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个允许你管理 StyleCop 在 Resharper 下的运行方式，如下截图所示：
- en: '![How it works...](img/9543_2_3.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![How it works...](img/9543_2_3.jpg)'
- en: The most important part in this screen is the **Analysis Performance** as it
    allows you to control the resources allocated to the StyleCop analysis.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在此屏幕上最重要的部分是 **分析性能**，因为它允许你控制分配给 StyleCop 分析的资源。
- en: There's more...
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Though Resharper is certainly the most complete tool to autofix your violations
    and has the advantage of being directly supported by the StyleCop team, it's not
    the only program that is able to automatically correct violations. Other tools
    exist, and can help with StyleCop violation fixing.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Resharper 当然是自动修复违规最完整的工具，并且有直接由 StyleCop 团队支持的优点，但它并不是唯一能够自动纠正违规的程序。其他工具也存在，并且可以帮助修复
    StyleCop 违规。
- en: Dev Express – Code Rush
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Dev Express – Code Rush
- en: This is a direct competitor of Resharper. Through plugins, it can also have
    some StyleCop compliant violation fixing features. However, at the time of writing,
    they seem to cover only a small part of StyleCop violations.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Resharper 的直接竞争对手。通过插件，它也可以拥有一些符合 StyleCop 的违规修复功能。然而，在撰写本文时，它们似乎只覆盖了 StyleCop
    违规的一小部分。
- en: 'You can download Code Rush at the following address:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下地址下载 Code Rush：
- en: '[http://www.devexpress.com/Products/Visual_Studio_Add-in/Coding_Assistance/index.xml](http://www.devexpress.com/Products/Visual_Studio_Add-in/Coding_Assistance/index.xml)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.devexpress.com/Products/Visual_Studio_Add-in/Coding_Assistance/index.xml](http://www.devexpress.com/Products/Visual_Studio_Add-in/Coding_Assistance/index.xml)'
- en: 'The plugin used to include StyleCop violation fixing is **CR_StyleNinja** and
    is available at the following site:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 用于包含 StyleCop 违规修复的插件是 **CR_StyleNinja**，可在以下网站找到：
- en: '[http://code.google.com/p/dxcorecommunityplugins/wiki/CR_StyleNinja](http://code.google.com/p/dxcorecommunityplugins/wiki/CR_StyleNinja)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://code.google.com/p/dxcorecommunityplugins/wiki/CR_StyleNinja](http://code.google.com/p/dxcorecommunityplugins/wiki/CR_StyleNinja)'
- en: Code Maid
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Code Maid
- en: '**Code Maid** is a free Visual Studio add-in allowing you to reformat your
    code. While it doesn''t have a plugin for StyleCop, it allows you to reformat
    your code in order to remove layout and ordering violations.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**Code Maid** 是一个免费的 Visual Studio 插件，允许你重新格式化你的代码。虽然它没有 StyleCop 插件，但它允许你重新格式化代码以移除布局和排序违规。'
- en: 'You can find the tool at the following address:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下地址找到该工具：
- en: '[http://www.codemaid.net/](http://www.codemaid.net/)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.codemaid.net/](http://www.codemaid.net/)'
- en: NArrange
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NArrange
- en: '**Narrange** is another code beautifier, but unlike Code Maid, it''s not a
    Visual Studio add-in. All configurations are made in an XML file and you can set
    up NArrange launch from the Visual Studio external tools menu. The configuration
    has a tool to simplify its edition.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**Narrange** 是另一个代码美化工具，但与 Code Maid 不同，它不是一个 Visual Studio 插件。所有配置都在一个 XML
    文件中完成，并且你可以从 Visual Studio 的外部工具菜单中设置 NArrange 的启动。配置有一个工具可以简化其编辑。'
- en: One of the advantages of this tool is the fact it is not dependant on Visual
    Studio. You can integrate it with other developing tools such as SharpDevelop
    or MonoDevelop.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这个工具的一个优点是它不依赖于 Visual Studio。你可以将其与其他开发工具（如 SharpDevelop 或 MonoDevelop）集成。
- en: 'You can download it at the following site:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下网站下载它：
- en: '[http://www.narrange.net/](http://www.narrange.net/)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.narrange.net/](http://www.narrange.net/)'
- en: Automating StyleCop using MSBuild (Simple)
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 MSBuild 自动化 StyleCop（简单）
- en: In this recipe, we will see how to automate our build process using MSBuild.
    We will describe which lines need to be added to the MSBuild project in order
    to enable StyleCop analysis and how to cap the number of violations encountered
    before the build breaks.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将看到如何使用 MSBuild 自动化我们的构建过程。我们将描述需要添加到 MSBuild 项目的哪些行以启用 StyleCop 分析，以及如何在构建中断之前限制遇到的违规数量。
- en: Getting ready
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For this recipe, you will need to have:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，你需要具备：
- en: StyleCop 4.7 installed with the option MSBuild integration checked
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装了 StyleCop 4.7 并勾选了 MSBuild 集成选项
- en: A sample C# project to modify
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于修改的 C# 项目示例
- en: How to do it...
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Open your project file with the text editor, and locate the following line:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用文本编辑器打开你的项目文件，并找到以下行：
- en: '[PRE1]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After this, add the following line:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，添加以下行：
- en: '[PRE2]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This enables StyleCop analysis on the project.
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这使得 StyleCop 分析在项目中生效。
- en: 'Now let''s modify the behavior of the StyleCop task to brake after 100 violations
    are encountered. Locate the first `PropertyGroup` section within the project file,
    and then add a new XML element `StyleCopMaxViolationCount` with a value of `100`.
    For example:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们来修改 StyleCop 任务的行为了，当遇到 100 个违规时停止。在项目文件中找到第一个 `PropertyGroup` 部分，然后添加一个新的
    XML 元素 `StyleCopMaxViolationCount` 并将其值设为 `100`。例如：
- en: '[PRE3]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works...
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The first element we added imports the StyleCop task in the project. That's
    all that is really required to enable StyleCop analysis via MSBuild. The element
    is located just under the project root node. It can be placed anywhere as long
    as it's a direct child of the root node. As you can see, the path used to locate
    the `StyleCop.Targets` file is dependant of the version you installed on your
    computer.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加的第一个元素是在项目中导入 StyleCop 任务。这实际上就是通过 MSBuild 启用 StyleCop 分析所必需的全部内容。该元素位于项目根节点之下。只要它是根节点的直接子节点，就可以放置在任意位置。正如你所见，用于定位
    `StyleCop.Targets` 文件的路径取决于你在电脑上安装的版本。
- en: In the second part, I showed you how to modify the behavior of StyleCop by adding
    properties in the project.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二部分，我向你展示了如何通过在项目中添加属性来修改 StyleCop 的行为。
- en: 'There are 10 properties that can be modified that way; I will present the three
    most important to me:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 有 10 个属性可以通过这种方式进行修改；我将展示对我来说最重要的三个：
- en: '`StyleCopAdditionalAddinPaths`: This allows you to specify other paths for
    your custom rules'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`StyleCopAdditionalAddinPaths`：这允许你指定自定义规则的其它路径'
- en: '`StyleCopTreatErrorsAsWarnings`: This allow you to turn your StyleCop violations
    into build errors'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`StyleCopTreatErrorsAsWarnings`：这允许你将 StyleCop 违规转换为构建错误'
- en: '`StyleCopMaxViolationCount`: This allows you to specify the maximum number
    of violations we accept in the project before breaking the build'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`StyleCopMaxViolationCount`：这允许你指定在构建中断之前我们接受的项目中违规的最大数量'
- en: There's more...
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Here is some other information that might come in handy in certain scenarios.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些可能在某些场景下有用的其他信息。
- en: Setting up properties of the task in a more global way
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 以更全局的方式设置任务的属性
- en: In this recipe, we have seen how to modify the StyleCop task behavior on a project
    basis. However, we can set the behavior properties as environment variables on
    the machine, or within the build environment command window. Setting the properties
    in this way will cause StyleCop to behave in the same way for all projects where
    StyleCop build integration is enabled.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们看到了如何在项目基础上修改 StyleCop 任务的行为了。然而，我们可以在机器上或构建环境命令窗口中将行为属性设置为环境变量。以这种方式设置属性将导致
    StyleCop 在所有启用 StyleCop 构建集成的项目中以相同的方式表现。
- en: Excluding files from StyleCop analysis
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 排除 StyleCop 分析的文件
- en: 'Excluding files from analysis can be helpful in certain scenarios (such as
    in legacy projects, or when you add third-party `Mono.Options` files, for example).
    To do such a thing, you need to open your project file and change the compile
    node of the file:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些场景下（例如在遗留项目中，或者当您添加第三方 `Mono.Options` 文件时），排除分析文件可能会有所帮助。要这样做，您需要打开您的项目文件并更改文件的编译节点：
- en: '[PRE4]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Should become:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 应该变成：
- en: '[PRE5]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Automating StyleCop using a command-line batch (Simple)
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用命令行批处理自动化 StyleCop（简单）
- en: In this recipe, I will show you how to analyze your projects with StyleCop from
    the command line. For this, I will use a tool named **StyleCopCmd**, and prepare
    it to be able to launch the last version of StyleCop.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在这道菜谱中，我将向您展示如何从命令行使用 StyleCop 分析您的项目。为此，我将使用一个名为 **StyleCopCmd** 的工具，并准备它以能够启动最新版本的
    StyleCop。
- en: Getting ready
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For this recipe, you need to have the following elements:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这道菜谱，您需要以下元素：
- en: StyleCop 4.7 with MSBuild integration
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有 MSBuild 集成的 StyleCop 4.7
- en: StyleCopCmd 0.2.10 (Sources); they can be downloaded from [http://sourceforge.net/projects/stylecopcmd/files/stylecopcmd/stylecopcmd-0.2.1/StyleCopCmd-src-0.2.1.0.zip/download](http://sourceforge.net/projects/stylecopcmd/files/stylecopcmd/stylecopcmd-0.2.1/StyleCopCmd-src-0.2.1.0.zip/download)
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: StyleCopCmd 0.2.10（源代码）；它们可以从[http://sourceforge.net/projects/stylecopcmd/files/stylecopcmd/stylecopcmd-0.2.1/StyleCopCmd-src-0.2.1.0.zip/download](http://sourceforge.net/projects/stylecopcmd/files/stylecopcmd/stylecopcmd-0.2.1/StyleCopCmd-src-0.2.1.0.zip/download)下载
- en: A sample C# project to analyze
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于分析的示例 C# 项目
- en: How to do it...
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Note
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As indicated in the previous recipe, StyleCopCmd is not maintained anymore.
    However, the tool works correctly and need just a little tweaking to be run with
    the last version of StyleCop. That's what we will do in this recipe.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一道菜谱中所示，StyleCopCmd 已不再维护。然而，该工具运行正确，只需稍作调整即可与最新版本的 StyleCop 一起运行。这就是我们将在这道菜谱中要做的。
- en: Open the Visual Studio project of StyleCopCmd.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 StyleCopCmd 的 Visual Studio 项目。
- en: 'First, we have to change the references of StyleCop libraries from 4.3 to 4.7\.
    This is done quite easily in the all projects by removing the references to:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们必须将 StyleCop 库的引用从 4.3 更改为 4.7。这可以通过在所有项目中删除对以下内容的引用来完成：
- en: '`Stylecop`'
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Stylecop`'
- en: '`Stylecop.CSharp`'
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Stylecop.CSharp`'
- en: '`Stylecop.CSharp.Rules`'
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Stylecop.CSharp.Rules`'
- en: Use Visual Studio to replace all `Microsoft.Stylecop` occurrences by StyleCop.
    When the project was put on CodePlex, one of the first things undertaken was the
    removal of Microsoft references.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Visual Studio 将所有 `Microsoft.Stylecop` 出现的实例替换为 StyleCop。当项目被放在 CodePlex
    上时，首先要做的一件事就是移除 Microsoft 引用。
- en: Finally, in the file `ReportBuilder.cs` of the StyleCopCmd project, remove the
    call to the dispose method in the method created at line 437.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在 StyleCopCmd 项目的 `ReportBuilder.cs` 文件中，删除第 437 行创建的方法中对 dispose 方法的调用。
- en: Verify you are able to generate your binaries (right-click on **Net.SF.StyleCopCmd.Console**
    and click on **Build**)![How to do it...](img/9543_4_1.jpg)
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证您能否生成您的二进制文件（右键点击**Net.SF.StyleCopCmd.Console**并点击**构建**）![如何操作...](img/9543_4_1.jpg)
- en: 'Now that we have our up-to-date binaries we can use them to launch StyleCop
    directly from the command line. To do so, open a command console, and then go
    to your StyleCopCmd directory and type the following command:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们有了最新的二进制文件，我们可以直接从命令行使用它们来启动 StyleCop。要这样做，打开一个命令提示符，然后转到 StyleCopCmd 目录，并输入以下命令：
- en: '[PRE6]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'On the screen, the only information that appears is the total number of violations
    and the list of files scanned:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在屏幕上，唯一出现的信息是违规总数和扫描的文件列表：
- en: '[PRE7]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If we look at what has been generated, you will find two files in your directory:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们查看生成的文件，您将在您的目录中找到两个文件：
- en: '`stylecop-report.xml`'
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stylecop-report.xml`'
- en: '`stylecop-report.violations.xml`'
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stylecop-report.violations.xml`'
- en: Both displays the list of violations generated by StyleCop; the only difference
    is the XML structure of the files. The first one follows StyleCopCmd internal
    schema and transformation files whereas the second is a bare output of StyleCop.
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 两者都显示由 StyleCop 生成的违规列表；唯一的区别是文件的 XML 结构。第一个遵循 StyleCopCmd 内部架构和转换文件，而第二个是 StyleCop
    的裸输出。
- en: How it works...
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: StyleCopCmd comes with a lot of options out of the box.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: StyleCopCmd 默认附带许多选项。
- en: 'In the previous example, I made you give a solution file. However, StyleCop
    allows four kinds of entry point:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我让您提供了一个解决方案文件。然而，StyleCop 允许四种类型的入口点：
- en: The solution files with `–sf` parameter
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `–sf` 参数的解决方案文件
- en: The project files with `–pf` parameter
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `–pf` 参数的项目文件
- en: Directory with `–d` parameter, an optional `–r` option allows you to force recursion
    on the given directory
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `-d` 参数的目录，可选的 `-r` 选项允许您在给定目录上强制递归
- en: And files with `–f` parameter
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以及使用 `-f` 参数的文件
- en: The `ipf` parameter allows you to remove some of the files from StyleCop scan
    by providing a regular expression matching their filename.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`ipf` 参数允许您通过提供匹配文件名的正则表达式来从 StyleCop 扫描中删除一些文件。'
- en: Finally, the `-of` option permits you to specify the name of the output file.
    This is used with `–tf`, which is used to transform the output with the help of
    an XSLT file. It can give you any kind of human readable report.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`-of` 选项允许您指定输出文件的名称。这用于与 `–tf` 一起使用，后者用于通过 XSLT 文件转换输出。它可以提供任何类型的人类可读报告。
- en: 'To get help, launch StyleCopCmd with the `-?` option; this will display the
    available options as shown in the following screenshot:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取帮助，请使用 `-?` 选项启动 StyleCopCmd；这将显示以下截图所示的可用的选项：
- en: '![How it works...](img/9543_4_2.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/9543_4_2.jpg)'
- en: I will let you explore the remaining possibilities.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我将让您探索剩余的可能性。
- en: There's more...
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: StyleCopCmd is not the only tool available to do StyleCop analysis from the
    command line. As we will see later, the **API** of StyleCop is quite easy to understand
    and though they don't give a command line directly, lots of projects have been
    made to support this functionality.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: StyleCopCmd 不是唯一可用于从命令行进行 StyleCop 分析的工具。正如我们稍后将要看到的，StyleCop 的 **API** 非常易于理解，尽管它们没有直接提供命令行，但已经有许多项目被制作出来以支持此功能。
- en: StyleCopCmd for Mono and Linux systems
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: StyleCopCmd for Mono 和 Linux 系统
- en: StyleCopCmd has been made available on Mono and Linux systems thanks to the
    work of Ian Norton ([https://github.com/inorton/StyleCopCmd](https://github.com/inorton/StyleCopCmd)).
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: Ian Norton ([https://github.com/inorton/StyleCopCmd](https://github.com/inorton/StyleCopCmd))
    的努力使得 StyleCopCmd 可在 Mono 和 Linux 系统上使用。
- en: The original version of StyleCopCmd is still linked to StyleCop 4.3, and you
    will have to upgrade the project to StyleCop 4.7 if you want to use the latest
    functionality of StyleCop.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: StyleCopCmd 的原始版本仍然链接到 StyleCop 4.3，如果您想使用 StyleCop 的最新功能，您必须将项目升级到 StyleCop
    4.7。
- en: Some problems are known and well documented. For me, the major problem I encountered
    was the registry key used by StyleCop. It forces the user to execute StyleCop
    commands with root privilege on the first start.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 一些问题已知且文档齐全。对我来说，我遇到的主要问题是 StyleCop 使用的注册表键。它强制用户在第一次启动时以 root 权限执行 StyleCop
    命令。
- en: StyleCop CLI
  id: totrans-175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: StyleCop CLI
- en: '**StyleCop CLI** has the same objective as StyleCopCmd. It permits an integration
    of StyleCop from the command line in a wider automation system.'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '**StyleCop CLI** 与 StyleCopCmd 具有相同的宗旨。它允许在更广泛的自动化系统中从命令行集成 StyleCop。'
- en: 'Compared to StyleCopCmd, this project has less functionality; one of the most
    important missing functionality is the ability to transform the output of StyleCop
    violations. However, the tool doesn''t need any tweaking to be compatible with
    StyleCop 4.7 as it already embeds it. The tool is available at the following site:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 与 StyleCopCmd 相比，此项目功能较少；最重要的缺失功能之一是转换 StyleCop 违规输出的能力。然而，该工具无需任何调整即可与 StyleCop
    4.7 兼容，因为它已经内置了它。该工具可在以下网站获取：
- en: '[http://sourceforge.net/projects/stylecopcli/](http://sourceforge.net/projects/stylecopcli/)'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://sourceforge.net/projects/stylecopcli/](http://sourceforge.net/projects/stylecopcli/)'
- en: Building your own
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建自己的
- en: 'As I said earlier, lots of people have already started this task for you. However,
    if you''re not satisfied with the existing tools or if you just want to look at
    how to make one, a good start is the tutorial made by the team of **StyleCop+,**
    which gives you advice on how to start building such a tool. The tutorial is available
    at the following site:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如我之前所说，很多人已经为您开始了这项任务。然而，如果您对现有工具不满意，或者您只是想看看如何制作一个，一个好的开始是 StyleCop+ 团队制作的教程，它为您提供了如何开始构建此类工具的建议。教程可在以下网站获取：
- en: '[http://stylecopplus.codeplex.com/wikipage?title=Running%20StyleCop%20from%20Your%20Code](http://stylecopplus.codeplex.com/wikipage?title=Running%20StyleCop%20from%20Your%20Code)'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '[从您的代码中运行 StyleCop](http://stylecopplus.codeplex.com/wikipage?title=Running%20StyleCop%20from%20Your%20Code)'
- en: Automating StyleCop using NAnt (Intermediate)
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 NAnt 自动化 StyleCop（中级）
- en: In this recipe, we will see how to use StyleCopCmd to automate our process using
    NAnt.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将看到如何使用 StyleCopCmd 通过 NAnt 自动化我们的过程。
- en: Getting ready
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For this recipe, you will need to have:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，您需要具备：
- en: StyleCop 4.7 installed
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: StyleCop 4.7 已安装
- en: NAnt Version 0.89 or higher
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NAnt 版本 0.89 或更高
- en: The sample C# project used in the previous recipe
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在上一个食谱中使用的示例 C# 项目
- en: I will assume you have already used NAnt, and I will concentrate on describing
    the two methods to achieve integration of StyleCop task in to your NAnt script.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我将假设您已经使用过 NAnt，我将专注于描述两种方法，以将 StyleCop 任务集成到您的 NAnt 脚本中。
- en: How to do it...
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: Note
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: StyleCopCmd comes with its own NAnt task. It is contained in the `Net.SF.StyleCopCmd.Core.dll`
    file.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: StyleCopCmd 自带其自己的 NAnt 任务。它包含在`Net.SF.StyleCopCmd.Core.dll`文件中。
- en: 'To include it in your NAnt script you will need to add a reference to this
    dll and add the following XML element in your project or target element:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将其包含在您的 NAnt 脚本中，您需要添加对该 dll 的引用，并在您的项目或目标元素中添加以下 XML 元素：
- en: '[PRE8]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Once our build file is ready, we can execute it in a console, and we obtain
    the following output:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们的构建文件准备就绪，我们就可以在控制台中执行它，并获得以下输出：
- en: '[PRE9]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As with the command-line version, we obtain two files in the directory that
    can be exploited in a CI to show the violations results:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与命令行版本一样，我们在目录中获得两个文件，可以在 CI 中利用这些文件来显示违规结果：
- en: '`stylecop-report.xml`'
  id: totrans-198
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stylecop-report.xml`'
- en: '`stylecop-report.violations.xml`'
  id: totrans-199
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stylecop-report.violations.xml`'
- en: How it works...
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In the previous sample, I tried to give you the full NAnt command. In the `StyleCopCmd`
    element we can configure six attributes:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个示例中，我试图向您提供完整的 NAnt 命令。在`StyleCopCmd`元素中，我们可以配置六个属性：
- en: '`outputXmlFile`: This attribute is used to specify the result file we want.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`outputXmlFile`: 此属性用于指定我们想要的结果文件。'
- en: '`transformFile`: This attribute is used to specify the transformation (XSLT)
    file we want to apply to the result file.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transformFile`: 此属性用于指定我们想要应用于结果文件的转换（XSLT）文件。'
- en: '`recursionEnabled`: This attribute is used to enable recursion in the directories
    to check.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`recursionEnabled`: 此属性用于在要检查的目录中启用递归。'
- en: '`ignorePatterns`: This attribute contains a regular expression pattern to exclude
    filenames from scanning; in the sample I removed the `AssemblyInfo.cs` file from
    the scan.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ignorePatterns`: 此属性包含一个正则表达式模式，用于排除扫描中的文件名；在示例中，我从扫描中移除了`AssemblyInfo.cs`文件。'
- en: '`processorSymbols`: This attribute is used to specify a list of processor symbols
    (for example: `DEBUG`, `CODE_ANALYSIS`) to be used by StyleCop. Generally, it
    is not used in most scenarios.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`processorSymbols`: 此属性用于指定 StyleCop 将使用的处理器符号列表（例如：`DEBUG`、`CODE_ANALYSIS`）。通常，在大多数场景中不使用。'
- en: '`styleCopSettingsFile`: This attribute is used to specify a common settings
    file for all the files being scanned. If no common settings files exist, then
    it should be removed from the task.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`styleCopSettingsFile`: 此属性用于指定所有被扫描文件的通用设置文件。如果不存在通用设置文件，则应从任务中删除。'
- en: The elements `solutionFiles`, `projectFiles`, `directories`, and `files` are
    used to specify the different kinds of element to analyze.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 元素`solutionFiles`、`projectFiles`、`directories`和`files`用于指定要分析的不同类型的元素。
- en: There's more...
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: 'The explained method is not the only one usable to launch StyleCopCmd task.
    Another way to do it is to rely to the `exec` element of the NAnt framework. It
    allows you to use the command line executable of StyleCopCmd (or your own if you
    made it). The tool can be found at the following site:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 所解释的方法并非唯一可用于启动 StyleCopCmd 任务的。另一种方法是依赖于 NAnt 框架的`exec`元素。它允许您使用 StyleCopCmd
    的命令行可执行文件（或如果您已创建，则使用您自己的）。该工具可在以下网站找到：
- en: '[http://nant.sourceforge.net/release/0.92/help/tasks/exec.html](http://nant.sourceforge.net/release/0.92/help/tasks/exec.html)'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://nant.sourceforge.net/release/0.92/help/tasks/exec.html](http://nant.sourceforge.net/release/0.92/help/tasks/exec.html)'
- en: Integrating StyleCop analysis results in Jenkins/Hudson (Intermediate)
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Jenkins/Hudson 中集成 StyleCop 分析结果（中级）
- en: In this recipe we will see how to build and display StyleCop errors in Jenkins/Hudson
    jobs. To do so, we will need to see how to configure the Jenkins job with a full
    analysis of the C# files in order to display the technical debt of the project.
    As we want it to diminish, we will also set in the job an automatic recording
    of the last number of violations. Finally, we will return an error if we add any
    violations when compared to the previous build.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将了解如何在 Jenkins/Hudson 作业中构建和显示 StyleCop 错误。为此，我们需要了解如何配置 Jenkins 作业，以对
    C# 文件进行全面分析，以便显示项目的技术债务。由于我们希望它减少，我们还将设置作业自动记录上一次违规数量的功能。最后，如果与上一次构建相比添加了任何违规，我们将返回一个错误。
- en: Getting ready
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For this recipe, you will need to have:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个食谱，您需要具备：
- en: StyleCop 4.7 installed with the option MSBuild integration checked
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已安装 StyleCop 4.7，并选中 MSBuild 集成选项
- en: A Subversion server
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Subversion 服务器
- en: 'A working Jenkins server including:'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个包含以下内容的运行中的 Jenkins 服务器：
- en: The MSBuild plug in for Jenkins
  id: totrans-219
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins 的 MSBuild 插件
- en: The Violation plug in for Jenkins
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins 的违规插件
- en: A C# project followed in a subversion repository.
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个位于子版本仓库中的 C# 项目。
- en: How to do it...
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'The first step is to build a working build script for your project. All solutions
    have their advantages and drawbacks. I will use MSBuild in this recipe. The only
    difference here will be that I won''t separate files on a project basis but take
    the "whole" solution:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是为您的项目构建一个有效的构建脚本。所有解决方案都有其优点和缺点。在这个配方中，我将使用 MSBuild。这里唯一的区别是我不会基于项目分离文件，而是采用“整个”解决方案：
- en: '[PRE10]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: After that, we prepare the files that will be scanned by the StyleCop engine
    and we launch the StyleCop task on it. We redirect the current number of violations
    to the `StyleCopViolationCount` property.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们准备将被 StyleCop 引擎扫描的文件，并在其上启动 StyleCop 任务。我们将当前违规数重定向到 `StyleCopViolationCount`
    属性。
- en: Finally, we write the result in the `violationsCount.txt` file to find out the
    level of technical debt remaining. This is done with the `WriteLinesToFile` element.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将结果写入 `violationsCount.txt` 文件以找出剩余的技术债务水平。这是通过 `WriteLinesToFile` 元素完成的。
- en: Now that we have our build script for our job, let's see how to use it with
    Jenkins. First, we have to create the Jenkins job itself. We will create a **Build
    a free-style software** project. After that, we have to set how the subversion
    repository will be accessed, as shown in the following screenshot:![How to do
    it...](img/9543_6_1.jpg)
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经有了我们的作业构建脚本，让我们看看如何使用 Jenkins。首先，我们必须创建 Jenkins 作业本身。我们将创建一个 **构建自由软件**
    项目。之后，我们必须设置如何访问子版本仓库，如下面的屏幕截图所示：![如何做…](img/9543_6_1.jpg)
- en: We also set it to check for changes on the subversion repository every 15 minutes.
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们还将其设置为每 15 分钟检查子版本仓库中的更改。
- en: 'Then, we have to launch our MSBuild script using the MSBuild task. The task
    is quite simple to configure and lets you fill in three fields:'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后，我们必须使用 MSBuild 任务启动我们的 MSBuild 脚本。该任务配置起来相当简单，并允许您填写三个字段：
- en: '**MSBuild Version**: You need to select one of the MSBuild versions you configured
    in Jenkins (**Jenkins** | **Manage Jenkins** | **Configure System**)'
  id: totrans-230
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MSBuild 版本**：您需要从 Jenkins 中配置的 MSBuild 版本中选择一个（**Jenkins** | **管理 Jenkins**
    | **配置系统**）'
- en: '**MSBuild Build File**: Here we will provide the `Stylecop.proj` file we previously
    made'
  id: totrans-231
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MSBuild 构建文件**：在这里我们将提供我们之前制作的 `Stylecop.proj` 文件'
- en: '**Command Line Arguments**: In our case, we don''t have any to provide, but
    it might be useful when you have multiple targets in your MSBuild file'
  id: totrans-232
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命令行参数**：在我们的情况下，我们没有提供任何内容，但在您 MSBuild 文件中有多个目标时可能很有用'
- en: Finally we have to configure the display of StyleCop errors. This were we will
    use the violation plugin of Jenkins. It permits the display of multiple quality
    tools' results on the same graphic. In order to make it work, you have to provide
    an XML file containing the violations.![How to do it...](img/9543_6_2.jpg)
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们必须配置 StyleCop 错误的显示。在这里我们将使用 Jenkins 的违规插件。它允许在同一图形上显示多个质量工具的结果。为了使其工作，您必须提供一个包含违规的
    XML 文件。![如何做…](img/9543_6_2.jpg)
- en: As you can see in the preceding screenshot, Jenkins is again quite simple to
    configure. After providing the XML filename for StyleCop, you have to fix thresholds
    to build health and the maximum number of violations you want to display in the
    detail screen of each file in violation.
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 正如您在前面的屏幕截图中看到的，Jenkins 的配置相当简单。在提供 StyleCop 的 XML 文件名后，您必须设置构建健康阈值和您想在每个违规文件的详细屏幕中显示的最大违规数。
- en: How it works...
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'In the first part of the *How to do it…* section, we presented a build script.
    Let''s explain what it does:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *如何做…* 部分的第一个部分，我们展示了一个构建脚本。让我们解释一下它做了什么：
- en: First, as we don't use the premade MSBuild integration, we have to declare in
    which assembly the StyleCop task is defined and how we will call it. This is achieved
    through the use of the `UsingTask` element.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，因为我们不使用预制的 MSBuild 集成，我们必须声明 StyleCop 任务定义在哪个程序集以及我们将如何调用它。这是通过使用 `UsingTask`
    元素来实现的。
- en: Then we try to retrieve the previous count of violations and set the maximum
    number of violations that are acceptable at this stage of our project. This is
    the role of the `ReadLinesFromFile` element, which reads the content of a file.
    As we added a condition to ascertain the existence of the `violationsCount.txt`
    file, it will only be executed if the file exists. We redirect the output to the
    property `StyleCopMaxViolationCount`.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们尝试检索之前的违规数量并设置在项目当前阶段可接受的违规最大数量。这是 `ReadLinesFromFile` 元素的作用，它读取文件的内容。由于我们添加了一个条件来确认
    `violationsCount.txt` 文件的存在，它只有在文件存在时才会执行。我们将输出重定向到属性 `StyleCopMaxViolationCount`。
- en: After that we have configured the Jenkins job to follow our project with StyleCop.
    We have configured some strict rules to ensure nobody will add new violations
    over time, and with the violation plugin and the way we addressed StyleCop, we
    are able to follow the technical debt of the project regarding StyleCop violations
    in the **Violations** page.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们已配置 Jenkins 作业以使用 StyleCop 跟踪我们的项目。我们已配置了一些严格的规则以确保随着时间的推移没有人会添加新的违规，通过违规插件和我们对
    StyleCop 的处理方式，我们能够在**违规**页面跟踪项目的 StyleCop 违规的技术债务。
- en: '![How it works...](img/9543_6_3.jpg)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/9543_6_3.jpg)'
- en: A summary of each file is also present and if we click on one of them, we will
    be able to follow the violations of the file.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 每个文件的摘要也在这里，如果我们点击其中一个，我们将能够跟踪该文件的违规。
- en: Tip
  id: totrans-242
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**How to address multiple projects with their own StyleCop settings**'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '**如何处理具有自己 StyleCop 设置的多个项目**'
- en: As far as I know, this is the limit of the MSBuild StyleCop task. When I need
    to address multiple projects with their own settings, I generally switch to StyleCopCmd
    using NAnt or a simple batch script and process the `stylecop-report.violations.xml`
    file with an XSLT to get the number of violations.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 就我所知，这是 MSBuild StyleCop 任务的限制。当我需要处理具有自己设置的多个项目时，我通常切换到使用 NAnt 或简单的批处理脚本和 StyleCopCmd，并通过
    XSLT 处理 `stylecop-report.violations.xml` 文件以获取违规数量。
- en: Customizing file headers (Simple)
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义文件头部（简单）
- en: In this recipe, we will see how to customize file headers to avoid StyleCop
    violations, and how we can use Visual Studio templates and snippets to make our
    life easier while developing.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将看到如何自定义文件头部以避免 StyleCop 违规，以及我们如何使用 Visual Studio 模板和代码片段来使我们的开发生活更轻松。
- en: Getting ready
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For this recipe, you will need to have:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，您需要具备：
- en: StyleCop 4.7 installed
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已安装 StyleCop 4.7
- en: Visual Studio 2008 or higher
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio 2008 或更高版本
- en: How to do it...
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Note
  id: totrans-252
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'StyleCop doesn''t use a lot of rules for headers. Basically, it requires the
    following things: the file name, a copyright, a company name, and a summary.'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: StyleCop 对头部的规则使用不多。基本上，它需要以下内容：文件名、版权信息、公司名称和摘要。
- en: Let's try to make a LGPL header compliant with StyleCop. As there's no advice
    on how to integrate the Version 3.0, we will stick with the header proposed in
    Version 2.1 and which can be viewed at [http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html](http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html).
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试制作一个符合 StyleCop 的 LGPL 头部。由于没有关于如何集成 3.0 版本的建议，我们将坚持使用 2.1 版本提出的头部，该头部可以在
    [http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html](http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html)
    上查看。
- en: 'The only requirements of the LGPL license header is to give one line to describe
    the project, the year of the project, and the author that wrote it (I will use
    the company name as the author). So the file header should look something like
    the following:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: LGPL 许可证头部的唯一要求是给项目描述一行，项目的年份以及编写它的作者（我将使用公司名称作为作者）。因此，文件头部应该看起来像以下这样：
- en: '[PRE11]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note
  id: totrans-257
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As you can see, I have separated the summary of the project from the main license
    part. I also enclosed in brackets the variables part of the license. Some people
    also like to add some contact information. To do so, I would add an author element
    at the end of the file.
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如您所见，我已经将项目的摘要与主要许可部分分开。我还将许可中的变量部分放在了括号中。有些人也喜欢添加一些联系信息。为此，我会在文件末尾添加一个作者元素。
- en: 'Having this license is great in itself; however it will be quite boring to
    add it manually in each file we create. In order to automate it, we will create
    a Visual Studio template. This will help you to have consistent file headers during
    your project at a minimal cost. To begin with, we will create a new library project,
    and modify `Class1.cs` by adding the previous LGPL header we made. Now, we have
    to modify the line of the summary section to comply with our project description;
    then we will modify the first copyright lines to enable visual studio to change
    text automatically. The first two lines of the copyright section have to be changed
    like this:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拥有这个许可本身就很不错；然而，在创建的每个文件中手动添加它将会相当无聊。为了自动化这个过程，我们将创建一个Visual Studio模板。这将帮助您在项目期间以最小的成本保持文件标题的一致性。首先，我们将创建一个新的库项目，并通过添加之前制作的LGPL标题来修改`Class1.cs`。现在，我们必须修改摘要部分的行以符合我们的项目描述；然后我们将修改第一行的版权信息，以便Visual
    Studio可以自动更改文本。版权部分的头两行需要按以下方式更改：
- en: '[PRE12]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In this code, we just introduce some Visual Studio template parameters:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此代码中，我们仅介绍了一些Visual Studio模板参数：
- en: '`safeitemname`: This is the name you provide when you add a new item to your
    project.'
  id: totrans-262
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`safeitemname`：这是您在向项目添加新项目时提供的名称。'
- en: '`year`: This is the year you added the file.'
  id: totrans-263
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`year`：这是您添加文件的那一年。'
- en: '`registeredorganization`: This is the name of the company you provided during
    your Windows installation. It can be found in the registry under the `HKLM\Software\Microsoft\Windows
    NT\CurrentVersion\RegisteredOrganization` key.'
  id: totrans-264
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`registeredorganization`：这是你在Windows安装过程中提供的公司名称。您可以在注册表中的`HKLM\Software\Microsoft\Windows
    NT\CurrentVersion\RegisteredOrganization`键下找到它。'
- en: Now that we have our model for the template ready, we have to export it.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经准备好了模板的模型，我们必须导出它。
- en: Click on the **File** menu and select **Export Template**.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**文件**菜单并选择**导出模板**。
- en: Select the `Class1.cs` item, and then click on `Next`.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`Class1.cs`项目，然后点击**下一步**。
- en: Add the default assemblies you want to include in the template, and then click
    on **Next**.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加您想要包含在模板中的默认程序集，然后点击**下一步**。
- en: Modify the template name and template description to suit your taste and click
    on **Finish**.![How to do it...](img/9543_7_2.jpg)
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改模板名称和模板描述以符合您的口味，然后点击**完成**。![如何做...](img/9543_7_2.jpg)
- en: The template is now available in the **My templates** section when you create
    a new file.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 当您创建新文件时，模板现在可在**我的模板**部分中找到。
- en: How it works...
  id: totrans-271
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we see a way to include your own licensing section in headers.
    If your needs are not so specific that they include a particular license, you
    can have a look at this site [http://vstemplates.codeplex.com/](http://vstemplates.codeplex.com/),
    which provides some basic templates for visual studio compatible with StyleCop.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们看到如何在标题中包含您自己的许可部分。如果您的需求不是那么具体，以至于包括特定的许可，您可以查看这个网站 [http://vstemplates.codeplex.com/](http://vstemplates.codeplex.com/)，它提供了一些与StyleCop兼容的Visual
    Studio基本模板。
- en: There's more...
  id: totrans-273
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In the following paragraph we will see two others topics meant to help you manage
    the headers of your code files.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的段落中，我们将看到两个其他主题，旨在帮助您管理代码文件的标题。
- en: Other ways to handle the headers
  id: totrans-275
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理标题的其他方法
- en: While templates are ideal for new files, you might need to apply your templates
    to old work. Visual Studio provides numerous ways to do so. You can at least rely
    on snippets or macro.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然模板对新文件来说很理想，但您可能需要将模板应用到旧的工作中。Visual Studio提供了多种方法来实现这一点。您至少可以依赖代码片段或宏。
- en: '**Snippets** are quite easy to create. They are in fact a simple XML file with
    a piece of code containing parameters. Let''s create it for the LGPL license:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码片段**创建起来相当简单。实际上，它是一个包含参数的简单XML文件，包含一段代码。让我们为LGPL许可创建一个：'
- en: '[PRE13]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The first part of the snippet named `Header` describes what will be displayed
    in the snippet menu; I added a `Shortcut` element to be able to use it by typing
    copyright followed by two tabulations. The two really important sections are the
    `Declarations` section and the `Code` section. As you can see the `Code` section
    is simply the code of the LGPL we created in the first part. We just replaced
    each variable name with a parameter name surrounded by `$`. The `Declarations`
    section contains a definition of all the parameters you use in your snippet code.
    Each `Literal` element contains an `Editable` attribute specifying that you can
    edit the parameter, an `ID` element that is the variable name surrounded by `$`
    in the code and a default value.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 摘要中名为 `Header` 的第一部分描述了将在摘要菜单中显示的内容；我添加了一个 `Shortcut` 元素，以便可以通过输入版权后跟两个制表符来使用它。两个非常重要的部分是
    `Declarations` 部分和 `Code` 部分。如你所见，`Code` 部分只是我们在第一部分创建的 LGPL 代码。我们只是将每个变量名替换为用
    `$` 包围的参数名。`Declarations` 部分包含你在摘要代码中使用的所有参数的定义。每个 `Literal` 元素包含一个指定你可以编辑参数的
    `Editable` 属性，一个 `ID` 元素，它是代码中用 `$` 包围的变量名，以及一个默认值。
- en: Your snippets usable in C# are generally located in `Documents\Visual Studio
    2008\Code Snippets\Visual C#\My Code Snippets`.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 你在 C# 中可用的摘要通常位于 `Documents\Visual Studio 2008\Code Snippets\Visual C#\My Code
    Snippets`。
- en: Note
  id: totrans-281
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To edit snippets more easily, you can use **Snippet Editor**. It can be downloaded
    at [http://snippeteditor.codeplex.com/](http://snippeteditor.codeplex.com/).
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更容易地编辑摘要，你可以使用**摘要编辑器**。它可以在 [http://snippeteditor.codeplex.com/](http://snippeteditor.codeplex.com/)
    下载。
- en: Company configuration
  id: totrans-283
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 公司配置
- en: StyleCop can enforce a specific company name and a copyright text in the copyright
    section. This might be useful if you want to be sure all the files of your project
    have the same copyright information. To do so, you need to go in the StyleCop
    settings in the **Company Information** tab.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: StyleCop 可以在版权部分强制执行特定的公司名称和版权文本。如果你想要确保你的项目中的所有文件都有相同的版权信息，这可能很有用。为此，你需要进入
    StyleCop 设置中的**公司信息**选项卡。
- en: '![Company configuration](img/9543_7_1.jpg)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
  zh: '![公司配置](img/9543_7_1.jpg)'
- en: The **Company Name** field corresponds to the `company` attribute of your `copyright`
    tag, whereas the **Copyright** field refers to the content of the `copyright`
    tag.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '**公司名称**字段对应于你的`版权`标签的`company`属性，而**版权**字段则指的是`版权`标签的内容。'
- en: Creating custom rules (Intermediate)
  id: totrans-287
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义规则（中级）
- en: In this recipe, we will see how to create our own custom rules for the StyleCop
    engine. We will also see how to add parameters to this rule.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将看到如何为 StyleCop 引擎创建我们自己的自定义规则。我们还将看到如何向此规则添加参数。
- en: Getting ready
  id: totrans-289
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For this recipe, you will need to have:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，你需要有以下条件：
- en: StyleCop 4.7 installed
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已安装 StyleCop 4.7
- en: Visual Studio 2008
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio 2008
- en: How to do it...
  id: totrans-293
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: In the early days of StyleCop, lots of the rules chosen by Microsoft were criticized.
    One of them was the fact that the developer couldn't add an underscore at the
    beginning of their private instance fields. In this recipe, we will take this
    rule as an example and try to implement it at the beginning of non public instance
    fields.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 在 StyleCop 的早期阶段，微软选择的大量规则受到了批评。其中之一是开发者不能在私有实例字段的开头添加下划线。在这个菜谱中，我们将以此规则为例，尝试在非公共实例字段的开头实现它。
- en: Note
  id: totrans-295
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'This rule directly conflicts with the following StyleCop rules:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 此规则直接与以下 StyleCop 规则冲突：
- en: '**SA1306**: Variable names and private field names must start with a lower-case
    letter'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '**SA1306**: 变量名称和私有字段名称必须以小写字母开头'
- en: '**SA1309**: Field names must not start with an underscore.'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '**SA1309**: 字段名称不能以下划线开头。'
- en: You will have to disable them, if you want to use the rule.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要使用此规则，你必须禁用它们。
- en: 'To create our custom rule, the first thing we must do is create a new Class
    Library project in Visual Studio. Then, we need to add the following reference
    to our project:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建我们的自定义规则，我们首先必须做的是在 Visual Studio 中创建一个新的类库项目。然后，我们需要将以下引用添加到我们的项目中：
- en: '`Stylecop`'
  id: totrans-301
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Stylecop`'
- en: '`Stylecop.CSharp`'
  id: totrans-302
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Stylecop.CSharp`'
- en: Both libraries are located in the installation directory of StyleCop.
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这两个库都位于 StyleCop 的安装目录中。
- en: 'The rules need to be implemented in a code analyzer. Each analyzer is composed
    of two files:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 规则需要在代码分析器中实现。每个分析器由两个文件组成：
- en: A file containing the class that will discover your rules violations
  id: totrans-305
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含将发现你的规则违规的类的文件
- en: An XML file containing the rules description
  id: totrans-306
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含规则描述的 XML 文件
- en: 'Let''s begin with the XML file. This file should have the same name as your
    analyzer class. Its purpose is to describe the analyzer category, describe the
    rules it contains, and prepare the parameters you might need in your rules. Let''s
    have look at the file contained in our custom rule:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从XML文件开始。这个文件应该与您的分析器类同名。其目的是描述分析器类别，描述它包含的规则，并准备您在规则中可能需要的参数。让我们看看我们自定义规则中包含的文件：
- en: '[PRE14]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The file is composed of three important elements:'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该文件由三个重要元素组成：
- en: The `Description` element is used to define the description that will be displayed
    to the user for the category.
  id: totrans-310
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`描述`元素用于定义将显示给用户的类别描述。'
- en: 'The `Properties` section is optional, and allows you to define parameters you
    want to use in the different rules that your analyzer manages. There are four
    available kinds of properties: `BooleanProperty`, `StringProperty`, `IntegerProperty`,
    and `CollectionProperty`. They can be accessed in your code by the analyzer function
    `GetSetting(Settings, String)`.'
  id: totrans-311
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`属性`部分是可选的，允许您定义您想在分析器管理的不同规则中使用的参数。有四种可用的属性类型：`BooleanProperty`、`StringProperty`、`IntegerProperty`和`CollectionProperty`。您可以通过分析器的`GetSetting(Settings,
    String)`函数在代码中访问它们。'
- en: The `Rules` section is used to describe all the rules your analyzer will manage.
  id: totrans-312
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`规则`部分用于描述您的分析器将管理的所有规则。'
- en: 'Next we need to create our analyzer class, which inherits `SourceAnalyzer`
    and defines `SourceAnalizerAttribute,` specifying which parser this analyzer is
    for:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建我们的分析器类，该类继承自`SourceAnalyzer`并定义了`SourceAnalizerAttribute`，指定了该分析器适用于哪种解析器：
- en: '[PRE15]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How it works...
  id: totrans-315
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The main entry point is the `AnalyzeDocument` function; this is where the document
    will be analyzed to see if it contains any broken rules. We have two options.
    Either we use the visitor pattern provided by StyleCop, and in this case we have
    to define code walkers for the type of construction we want to check (there are
    four walkers available: `CodeWalkerElementVisitor`, `CodeWalkerStatementVisitor`,
    `CodeWalkerExpressionVisitor`, and `CodeWalkerQueryClauseVisitor`), or you can
    directly access the token list and check them directly. The second approach is
    a little trickier as upper constructions are made of one or more tokens. To use
    it in our example, we just have to replace the call to the visitor function by
    a **LINQ** request selecting the tokens in violation of your rule. For our sample,
    it will look as follows:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 主要入口点是`AnalyzeDocument`函数；这是文档将被分析以查看是否包含任何违规规则的地方。我们有两种选择。要么我们使用StyleCop提供的访问者模式，在这种情况下，我们必须为想要检查的构造类型定义代码遍历器（有四种遍历器可用：`CodeWalkerElementVisitor`、`CodeWalkerStatementVisitor`、`CodeWalkerExpressionVisitor`和`CodeWalkerQueryClauseVisitor`），或者您可以直接访问标记列表并直接检查它们。第二种方法稍微复杂一些，因为上层构造由一个或多个标记组成。为了在我们的示例中使用它，我们只需将访问者函数的调用替换为选择违反您规则的标记的**LINQ**请求。对于我们的示例，它将如下所示：
- en: '[PRE16]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As you can see, both ways of enforcing our rule look quite similar as we need
    the parent element of tokens to check easily if the token is a field and if it
    respects the rule. To exclude tokens of the element construct I had to add further
    restrictions based on the token class and token type.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，强制执行我们的规则两种方式看起来相当相似，因为我们需要检查标记的父元素以轻松地确定标记是否是字段以及它是否遵守规则。为了排除元素构造中的标记，我不得不根据标记类和标记类型添加进一步的限制。
- en: When you report your violations you have to be careful of the name of the violation
    as any reference to an unknown rule in the XML file will just discard the violation.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 当您报告违规时，您必须注意违规的名称，因为XML文件中对未知规则的任何引用都将简单地丢弃违规。
- en: In this recipe, we have seen how to implement a rule. However, you have to keep
    in mind that the analyzer is designed to allow you to create a set of rules, not
    just one. We have also seen that the central method of the analyzer is the `AnalyzeDocument`
    function; this is where you have to analyze the rule violations and report them.
    We also quickly see how to set some properties and use them.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们看到了如何实现一个规则。然而，您必须记住，分析器被设计成允许您创建一组规则，而不仅仅是单个规则。我们还看到了分析器的核心方法是`AnalyzeDocument`函数；这就是您必须分析规则违规并报告它们的地方。我们还快速了解了如何设置一些属性并使用它们。
- en: There's more...
  id: totrans-321
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: However, custom tasks is a huge topic. In addition, you can customize the StyleCop
    setting, unit test your rules, and much more.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，自定义任务是一个很大的主题。此外，您还可以自定义StyleCop设置，对规则进行单元测试，等等。
- en: Customize your StyleCop settings dialog
  id: totrans-323
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自定义StyleCop设置对话框
- en: 'Defining your properties in the XML file of the analyzer doesn''t display them
    in the StyleCop settings UI. Only `BooleanProperty` can be shown directly using
    the `DisplaySettings` element as shown in the following screenshot:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 在分析器的XML文件中定义你的属性不会在StyleCop设置UI中显示它们。只有`BooleanProperty`可以通过`DisplaySettings`元素直接显示，如下面的截图所示：
- en: '![Customize your StyleCop settings dialog](img/9543_8_1.jpg)'
  id: totrans-325
  prefs: []
  type: TYPE_IMG
  zh: '![自定义StyleCop设置对话框](img/9543_8_1.jpg)'
- en: All other properties require a custom UI. This is achieved by providing `UserControl`
    implementing `Stylecop.IPropertyControlPage`.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 所有其他属性都需要自定义UI。这是通过提供实现`Stylecop.IPropertyControlPage`的`UserControl`来实现的。
- en: A really great tutorial is provided in the *Adding a Custom StyleCop Settings
    Page* section of the StyleCop SDK.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: StyleCop SDK中*添加自定义StyleCop设置页面*部分提供了一个非常好的教程。
- en: Unit testing your rules
  id: totrans-328
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单元测试你的规则
- en: Unit testing your rules is really important and can be achieved quite easily.
    To do so, we have to rely to the integration API provided by the StyleCop team.
    In this recipe code, I have made a project to unit test my rule using NUnit 2.6.2.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试你的规则非常重要，并且可以相当容易地实现。为了这样做，我们必须依赖StyleCop团队提供的集成API。在这个食谱代码中，我创建了一个项目，使用NUnit
    2.6.2来单元测试我的规则。
- en: As it was only one rule, I didn't abstract the StyleCop integration in a base
    class, but this should be done as all your rules will depend on the same code
    implementation.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 由于只有一个规则，我没有在基类中抽象StyleCop集成，但应该这样做，因为所有规则都将依赖于相同的代码实现。
- en: I also use test files that I placed in the `TestFiles` directory.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 我还使用了放置在`TestFiles`目录中的测试文件。
- en: Integrating StyleCop in your own tool (Advanced)
  id: totrans-332
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在你的工具中集成StyleCop（高级）
- en: In this recipe, we will see how to embed StyleCop with your own tools. As an
    example, we will create a *real-time* analysis add-in for MonoDevelop/Xamarin
    Studio.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将看到如何将StyleCop嵌入到你的工具中。作为一个例子，我们将为MonoDevelop/Xamarin Studio创建一个*实时*分析插件。
- en: Getting ready
  id: totrans-334
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For this recipe, you will need to have:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个食谱，你需要有：
- en: StyleCop 4.7 installed
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已安装StyleCop 4.7
- en: Xamarin Studio 4.0 or MonoDevelop 4.0
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Xamarin Studio 4.0或MonoDevelop 4.0
- en: How to do it...
  id: totrans-338
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Note
  id: totrans-339
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'MonoDevelop add-ins are library projects composed of two mandatory components:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: MonoDevelop插件是由两个强制性组件组成的库项目：
- en: An `addin.xml` file describing the add-in, its dependencies, and the dll files
    to load at runtime and the code of your add-in.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 一个描述插件、其依赖项以及运行时需要加载的dll文件的`addin.xml`文件，以及你的插件代码。
- en: We will create an add-in with an executable command in the tool menu to activate
    or deactivate the real-time analysis.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个工具菜单中的可执行命令的插件，用于激活或停用实时分析。
- en: 'Let''s go to the part related to the StyleCop analysis itself; for this I will
    heavily rely on the code provided with this recipe:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们转到与StyleCop分析本身相关的部分；为此，我将大量依赖这个食谱中提供的代码：
- en: 'We first initialize a StyleCop console in our command handler constructor (`RealTimeEgine.cs`
    line 85-87):'
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先在命令处理程序构造函数中初始化一个StyleCop控制台（`RealTimeEgine.cs`行85-87）：
- en: '[PRE17]'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `StyleCopConsole` class is the main entry point of the StyleCop analysis
    system, and it is able to run the analysis and report the violations found.
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`StyleCopConsole`类是StyleCop分析系统的主入口点，它能够运行分析并报告发现的违规。'
- en: We currently use default settings, but the arguments passed to the engine are
    really important if you want to embed specific settings or rule analyses.
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们目前使用默认设置，但如果你想要嵌入特定的设置或规则分析，传递给引擎的参数非常重要。
- en: 'The five constructor parameters are:'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 五个构造函数参数是：
- en: The first argument is the path to the settings you want to load. If it is set
    to null value, then it uses the default project settings files.
  id: totrans-349
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个参数是你想要加载的设置路径。如果设置为null值，则使用默认项目设置文件。
- en: The second argument indicates whether we want to write results cache files or
    not.
  id: totrans-350
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个参数表示我们是否想要写入结果缓存文件。
- en: The third argument is the path of the output file we want to write in.
  id: totrans-351
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个参数是我们想要写入的输出文件路径。
- en: The fourth argument is a list of paths to search for parser and analyzer add-ins.
    It can be set to null if no add-ins are provided.
  id: totrans-352
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第四个参数是搜索解析器和分析器插件的路径列表。如果没有提供插件，则可以设置为null。
- en: The last argument indicates whether we want to load add-ins from the default
    path where the core binary is located.
  id: totrans-353
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后一个参数表示我们是否想要从核心二进制文件所在的位置的默认路径加载插件。
- en: After the initialization of our console, we indicate callbacks for its output
    and the violations encountered.
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们控制台初始化之后，我们指定了其输出和遇到的违规的回调函数。
- en: 'Now let''s see the execution code itself (`RealTimeEgine.cs` line 166-180):'
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们看看执行代码本身（`RealTimeEgine.cs`第166-180行）：
- en: '[PRE18]'
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: How it works...
  id: totrans-357
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: To execute the analysis, we have to define a `Configuration` object, this is
    used to allow StyleCop to analyze preprocessor regions (for example, if you want
    to analyze regions marked by a `#if DEBUG`, you should add the `DEBUG` string
    in this object).
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行分析，我们必须定义一个`Configuration`对象，这个对象用于允许StyleCop分析预处理器区域（例如，如果您想分析由`#if DEBUG`标记的区域，您应该将`DEBUG`字符串添加到这个对象中）。
- en: After that, we configure our project itself; it's the common unit under which
    we analyze a subset of files. It takes an ID, a base path, and a configuration.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们配置我们的项目本身；它是我们分析文件子集的通用单元。它需要一个ID、一个基本路径和一个配置。
- en: Then we add each source file related to the project, in our case it is a temporary
    file made of the content of the file currently being edited.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们添加与项目相关的每个源文件，在我们的例子中，它是由当前正在编辑的文件内容组成的临时文件。
- en: Finally, we start the console process. The callbacks we set up at the beginning
    will transmit the violations and the process message to the host.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们启动控制台进程。我们在开始时设置回调将违规和进程消息传输到主机。
- en: 'The add-in is plugged to two events of the MonoDevelop apps:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 插件连接到MonoDevelop应用的两个事件：
- en: '`ActiveDocumentChanged`: This event is called when the active document is "replaced"
    by another one.'
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ActiveDocumentChanged`：当活动文档被另一个文档“替换”时，会调用此事件。'
- en: '`DocumentParsed`: This event is called once the document has been correctly
    parsed by MonoDevelop. It is run after almost every modification in the text editor.'
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DocumentParsed`：当文档被MonoDevelop正确解析后，会调用此事件。它几乎在文本编辑器的每次修改后都会运行。'
- en: 'Following is the sequence diagram of the add-in:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是该插件的序列图：
- en: '![How it works...](img/9543_9_1.jpg)'
  id: totrans-366
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/9543_9_1.jpg)'
- en: You should have a look at the full source code to understand how the add-in
    really works.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该查看完整的源代码，以了解插件是如何真正工作的。
- en: There's more...
  id: totrans-368
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The current add-in is just the beginning. It currently contains some drawbacks
    (first launch of StyleCop) and can be improved in many ways. Here some of them:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 当前的插件只是开始。它目前存在一些缺点（StyleCop的首次启动）并且可以从许多方面进行改进。以下是一些改进方法：
- en: Add a configuration screen
  id: totrans-370
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加一个配置屏幕
- en: The add-in is currently not configurable. While this is not really important
    if you use the default parameters of StyleCop and don't have any custom rules,
    it will be mandatory for a finished product. It could at least define a way to
    add StyleCop settings and a path to check for custom rules.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 当前插件不可配置。虽然如果您使用StyleCop的默认参数且没有自定义规则，这并不是很重要，但对于成品来说将是强制性的。它至少可以定义添加StyleCop设置和检查自定义规则路径的方法。
- en: Do the work in a background thread
  id: totrans-372
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在后台线程中执行工作
- en: One of the most significant drawback of the current implementation is that the
    UI freezes for one to two seconds during the first launch of the StyleCop analysis.
    To prevent this, we should put the StyleCop analysis in a separate thread to let
    the user interact with the interface during the analysis.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 当前实现的一个最显著的缺点是，在StyleCop分析首次启动时，UI会冻结一到两秒。为了防止这种情况，我们应该将StyleCop分析放在一个单独的线程中，以便在分析期间用户可以与界面交互。
- en: Change the display of violations
  id: totrans-374
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 改变违规的显示
- en: I used the error pad in this example, but Xamarin Studio is similar to Resharper
    when it reports violations. So we should reposition the reporting of violations
    to the bar at the right of the text editor.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我使用了错误垫，但Xamarin Studio在报告违规时与Resharper类似。因此，我们应该将违规报告的位置重新定位到文本编辑器右侧的栏中。
