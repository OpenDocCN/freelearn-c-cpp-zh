["```cpp\ntype-specifier var;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// 1\\. Default-initialized variable\ntype-specifier var = init-value;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// 2\\. Assignment initialized variable\ntype-specifier var{init-value};\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// 3\\. Brace-initialize variable\n```", "```cpp\nint value = 42;\u00a0\u00a0\u00a0\u00a0\u00a0// declare value to be an integer and initialize to 42\nshort a_value{64};\u00a0\u00a0// declare a_value to be a short integer and initialize\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0\u00a0\u00a0\u00a0to 64\nint bad_idea;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// declare bad_idea to be an integer and DO NOT \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// initialize it. Use of this variable before setting\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// it is UNDEFINED BEHAVIOUR.\nfloat pi = 3.1415F; // declare pi to be a single precision floating point\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// number and initialize it to pi.\ndouble e{2.71828};\u00a0\u00a0// declare e to be a double precision floating point\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// number and initialize it to natural number e.\nauto title = \"Sir Robin of Loxley\"; // Let the compiler determine the type\n```", "```cpp\ntype-specifier ary[count];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// 1\\. Default-initialized \ntype-specifier ary[count] = {comma-separated list}; // 2\\. Assignment initialized \ntype-specifier ary[count]{comma-separated list};\u00a0\u00a0\u00a0\u00a0// 3\\. Brace-initialized\n```", "```cpp\ntype-specifier ary2d[countX][countY]; \ntype-specifier ary3d[countX][countY][countZ];\n// etc...\n```", "```cpp\n    int main(int argc, char**argv)\n    {\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"\\n\\n------ Exercise 1 ------\\n\";\n    \u00a0\u00a0\u00a0\u00a0int value = 42;\u00a0\u00a0\u00a0\u00a0\u00a0// declare value to be an integer & initialize to 42\n    \u00a0\u00a0\u00a0\u00a0short a_value{64};\u00a0\u00a0// declare a_value to be a short integer & \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// initialize to 64\n    \u00a0\u00a0\u00a0\u00a0int bad_idea;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// declare bad_idea to be an integer and DO NOT \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// initialize it. Use of this variable before \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// setting it is UNDEFINED BEHAVIOUR.\n    \u00a0\u00a0\u00a0\u00a0float pi = 3.1415F; // declare pi to be a single precision floating \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// point number and initialize it to pi.\n\n    \u00a0\u00a0\u00a0\u00a0double e{2.71828};\u00a0\u00a0// declare e to be a double precision floating point\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// number and initialize it to natural number e.\n    \u00a0\u00a0\u00a0\u00a0auto title = \"Sir Robin of Loxley\"; \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Let the compiler determine the type\n    \u00a0\u00a0\u00a0\u00a0int ary[15]{};\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// array of 15 integers - zero initialized\n    \u00a0\u00a0\u00a0\u00a0// double pi = 3.14159;\u00a0\u00a0// step 24 - remove comment at front\n    \u00a0\u00a0\u00a0\u00a0// auto speed;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// step 25 - remove comment at front\n    \u00a0\u00a0\u00a0\u00a0// value = \"Hello world\";// step 26 - remove comment at front\n    \u00a0\u00a0\u00a0\u00a0// title = 123456789;\u00a0\u00a0\u00a0\u00a0// step 27 - remove comment at front\n    \u00a0\u00a0\u00a0\u00a0// short sh_int{32768};\u00a0\u00a0// step 28 - remove comment at front\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"sizeof(int) = \" << sizeof(int) << \"\\n\";\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"sizeof(short) = \" << sizeof(short) << \"\\n\";\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"sizeof(float) = \" << sizeof(float) << \"\\n\";\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"sizeof(double) = \" << sizeof(double) << \"\\n\";\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"sizeof(title) = \" << sizeof(title) << \"\\n\";\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"sizeof(ary) = \" << sizeof(ary)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< \" = \" << sizeof(ary)/sizeof(ary[0]) \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< \" * \" << sizeof(ary[0]) << \"\\n\";\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"Complete.\\n\";\n    \u00a0\u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```cpp\n    double pi = 3.14159;\u00a0\u00a0// step 24 - remove comment at front\u00a0\u00a0\u00a0\u00a0\n    // auto speed;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// step 25 - remove comment at front\n    // value = \"Hello world\";// step 26 - remove comment at front\n    // title = 123456789;\u00a0\u00a0\u00a0\u00a0// step 27 - remove comment at front\n    // short sh_int{32768};\u00a0\u00a0// step 28 - remove comment at front\n    ```", "```cpp\n    // double pi = 3.14159;\u00a0\u00a0// step 24 - remove comment at front\u00a0\u00a0\u00a0\u00a0\n    auto speed;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// step 25 - remove comment at front\n    // value = \"Hello world\";// step 26 - remove comment at front\n    // title = 123456789;\u00a0\u00a0\u00a0\u00a0// step 27 - remove comment at front\n    // short sh_int{32768};\u00a0\u00a0// step 28 - remove comment at front\n    ```", "```cpp\n    // double pi = 3.14159;\u00a0\u00a0// step 24 - remove comment at front\u00a0\u00a0\u00a0\u00a0\n    // auto speed;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// step 25 - remove comment at front\n    value = \"Hello world\";// step 26 - remove comment at front\n    // title = 123456789;\u00a0\u00a0\u00a0\u00a0// step 27 - remove comment at front\n    // short sh_int{32768};\u00a0\u00a0// step 28 - remove comment at front\n    ```", "```cpp\n    // double pi = 3.14159;\u00a0\u00a0// step 24 - remove comment at front\u00a0\u00a0\u00a0\u00a0\n    // auto speed;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// step 25 - remove comment at front\n    // value = \"Hello world\";// step 26 - remove comment at front\n    title = 123456789;\u00a0\u00a0\u00a0\u00a0// step 27 - remove comment at front\n    // short sh_int{32768};\u00a0\u00a0// step 28 - remove comment at front\n    ```", "```cpp\n    // double pi = 3.14159;\u00a0\u00a0// step 24 - remove comment at front\u00a0\u00a0\u00a0\u00a0\n    // auto speed;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// step 25 - remove comment at front\n    // value = \"Hello world\";// step 26 - remove comment at front\n    // title = 123456789;\u00a0\u00a0\u00a0\u00a0// step 27 - remove comment at front\n    short sh_int{32768};\u00a0\u00a0// step 28 - remove comment at front\n    ```", "```cpp\n#include <iostream>\nvoid hello_world()\n{\n\u00a0\u00a0std::cout << \"Hello world\\n\"; \n}\nint main(int argc, char** argv)\n{\n\u00a0\u00a0std::cout << \"Starting program\\n\";\n\u00a0\u00a0hello_world();\n\u00a0\u00a0std::cout << \"Exiting program\\n\";\n\u00a0\u00a0return 0;\n}\n```", "```cpp\nvoid hello_world();\n```", "```cpp\nint main(int, char**);\n```", "```cpp\n    int main(int argc, char**argv)\n    {\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"\\n\\n------ Exercise 2 ------\\n\";\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"The greatest common divisor of 44 and 121 is \" << gcd(44, 121) << \"\\n\";\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"Complete.\\n\";\n    \u00a0\u00a0\u00a0\u00a0return 0;\n    }\n    int gcd(int x, int y)\n    {\n    \u00a0\u00a0\u00a0\u00a0while(y!=0)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0auto c{x%y};\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0x = y;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0y = c;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0return x;\n    }\n    ```", "```cpp\n    int gcd(int x, int y);\n    ```", "```cpp\ntype-specifier* pvar = &var;\n```", "```cpp\nint five = 5;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// declare five and initialize it\nint *pvalue = &five;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// declare pvalue as pointer to int and have it\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// point to the location of five\n*pvalue = 6;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Assign 6 into the location five.\n```", "```cpp\nvoid swap(int* data1, int* data2)\n{\n\u00a0\u00a0\u00a0\u00a0int temp{*data1};\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Initialize temp from value pointed to by data1\n\u00a0\u00a0\u00a0\u00a0*data1 = *data2;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Copy data pointed to by data2 into location \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// pointed to by data1\n\u00a0\u00a0\u00a0\u00a0*data2 = temp;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Store the temporarily cached value from temp\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// into the location pointed to by data2\n}\n```", "```cpp\nchar* name = new char[20];\u00a0\u00a0\u00a0\u00a0// Allocate 20 chars worth of memory and assign it\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// to name.\n\u00a0\u00a0Do something with name\ndelete [] name;\n```", "```cpp\nMyClass* object = new MyClass;\n```", "```cpp\nMyClass* objects = new MyClass[12];\n```", "```cpp\nvoid printMyClasses(MyClass* objects, size_t number)\n{\n\u00a0\u00a0for( auto i{0U} ; i<number ; i++ ) { \n\u00a0\u00a0\u00a0\u00a0std::cout << objects[i] << \"\\n\";\n\u00a0\u00a0}\n}\nvoid process()\n{\n\u00a0\u00a0\u00a0\u00a0MyClass objects[12];\n\n\u00a0\u00a0\u00a0\u00a0// Do something with objects\n\u00a0\u00a0\u00a0\u00a0printMyClasses(objects, sizeof(objects)/sizeof(MyClass));\n}\n```", "```cpp\nvoid printMyClasses(MyClass objects[12], size_t number)\n```", "```cpp\n    int ary[15]{};\n    ```", "```cpp\n    void print_array_size2(int* ary)\n    ```", "```cpp\n    p = title; \n    ```", "```cpp\n    title = p;\n    ```", "```cpp\nint check_file(const char* name)\n{\n\u00a0\u00a0FILE* fptr{fopen(name,\"r\")};\n\u00a0\u00a0if ( fptr == nullptr)\n\u00a0\u00a0\u00a0\u00a0return -1;\n\u00a0\u00a0char buffer[120];\n\u00a0\u00a0auto numberRead = fread(buffer, 1, 30, fptr);\n\u00a0\u00a0fclose(fptr);\n\u00a0\u00a0if (numberRead != 30)\n\u00a0\u00a0\u00a0\u00a0return -2;\n\u00a0\u00a0if(is_valid(buffer))\n\u00a0\u00a0\u00a0\u00a0return -3;\n\u00a0\u00a0return 0;\n}\n```", "```cpp\nFileCheckStatus check_file(const char* name)\n{\n\u00a0\u00a0FILE* fptr{fopen(name,\"r\")};\n\u00a0\u00a0if ( fptr == nullptr)\n\u00a0\u00a0\u00a0\u00a0return FileCheckStatus::NotFound;\n\u00a0\u00a0char buffer[30];\n\u00a0\u00a0auto numberRead = fread(buffer, 1, 30, fptr);\n\u00a0\u00a0fclose(fptr);\n\u00a0\u00a0if (numberRead != 30)\n\u00a0\u00a0\u00a0\u00a0return FileCheckStatus::IncorrectSize;\n\u00a0\u00a0if(is_valid(buffer))\n\u00a0\u00a0\u00a0\u00a0return FileCheckStatus::InvalidContents;\n\u00a0\u00a0return FileCheckStatus::Good;\n}\n```", "```cpp\nenum FileCheckStatus\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Old-style enum declaration\n{\n\u00a0\u00a0Good,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// = 0 - Value defaults to 0\n\u00a0\u00a0NotFound,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// = 1 - Value set to one more than previous\n\u00a0\u00a0IncorrectSize,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// = 2 - Value set to one more than previous\n\u00a0\u00a0InvalidContents,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// = 3 - Value set to one more than previous\n};\n```", "```cpp\nenum FileCheckStatus\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Old-style enum declaration\n{\n\u00a0\u00a0Good = 0, \n\u00a0\u00a0NotFound = -1,\n\u00a0\u00a0IncorrectSize = -2,\n\u00a0\u00a0InvalidContents = -3,\n};\n```", "```cpp\nenum FileCheckStatus\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Old-style enum declaration\n{\n\u00a0\u00a0InvalidContents = -3,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Force to -3\n\u00a0\u00a0IncorrectSize,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// set to -2(=-3+1)\n\u00a0\u00a0NotFound,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Set to -1(=-2+1)\n\u00a0\u00a0Good,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Set to\u00a0\u00a00(=-1+1)\n};\n```", "```cpp\nFileCheckStatus check_file(const char* name)\n{\n\u00a0\u00a0FILE* fptr{fopen(name,\"r\")};\n\u00a0\u00a0if ( fptr == nullptr)\n\u00a0\u00a0\u00a0\u00a0return NotFound;\n\u00a0\u00a0char buffer[30];\n\u00a0\u00a0auto numberRead = fread(buffer, 1, 30, fptr);\n\u00a0\u00a0fclose(fptr);\n\u00a0\u00a0if (numberRead != 30)\n\u00a0\u00a0\u00a0\u00a0return IncorrectSize;\n\u00a0\u00a0if(is_valid(buffer))\n\u00a0\u00a0\u00a0\u00a0return InvalidContents;\n\u00a0\u00a0return Good;\n}\n```", "```cpp\nenum Result \n{\n\u00a0\u00a0\u00a0\u00a0Pass,\n\u00a0\u00a0\u00a0\u00a0Fail,\n\u00a0\u00a0\u00a0\u00a0Unknown,\n};\nenum Option\n{\n\u00a0\u00a0\u00a0\u00a0Keep,\n\u00a0\u00a0\u00a0\u00a0Discard,\n\u00a0\u00a0\u00a0\u00a0Pass,\n\u00a0\u00a0\u00a0\u00a0Play\n};\n```", "```cpp\nOption option{Keep};\nResult result{Unknown};\nif (option == result)\n{\n\u00a0\u00a0\u00a0\u00a0// Do something\n}\n```", "```cpp\nenum class Result \n{\n\u00a0\u00a0\u00a0\u00a0Pass,\n\u00a0\u00a0\u00a0\u00a0Fail,\n\u00a0\u00a0\u00a0\u00a0Unknown,\n};\nenum class Option\n{\n\u00a0\u00a0\u00a0\u00a0Keep,\n\u00a0\u00a0\u00a0\u00a0Discard,\n\u00a0\u00a0\u00a0\u00a0Pass,\n\u00a0\u00a0\u00a0\u00a0Play\n};\n```", "```cpp\nOption option{Keep};\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// error: must use scope specifier Option::Keep\nResult result{Unknown};\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// error: must use scope specifier Result::Unknown\nif (option == result)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// error: can no longer compare the different types\n{\n\u00a0\u00a0\u00a0\u00a0// Do something\n}\n```", "```cpp\nint value = static_cast<int>(Option::Play);\n```", "```cpp\n    void printOrange(Orange orange)\n    ```", "```cpp\n    printOrange(orange);\n    printOrange(apple);\n    ```", "```cpp\n    enum class Orange;\n    ```", "```cpp\n    Orange orange{Orange::Hamlin};\n    ```", "```cpp\n    std::cout << \"orange = \" << static_cast<int>(orange) << \"\\n\";\n    ```", "```cpp\nMatrix a;\nMatrix b;\n// Code to initialize the matrices\nauto c = a * b;\n```", "```cpp\nclass Fraction\n{\n};\n```", "```cpp\nclass Fraction\n{\n\u00a0\u00a0int m_numerator;\n\u00a0\u00a0int m_denominator;\n};\n```", "```cpp\nclass Fraction\n{\npublic:\n\u00a0\u00a0int m_numerator;\n\u00a0\u00a0int m_denominator;\n};\n```", "```cpp\nexplicit Fraction(int numerator, int denominator = 1);\n```", "```cpp\nclass Fraction\n{\npublic:\n\u00a0\u00a0Fraction();\nprivate:\n\u00a0\u00a0Fraction(const Fraction&);\n\u00a0\u00a0Fraction& operator=(const Fraction&);\n};\n```", "```cpp\nFraction(const Fraction&) = delete;\n```", "```cpp\nFraction(const Fraction&) = default;\n```", "```cpp\nFraction::Fraction()\n{\n\u00a0\u00a0this->m_numerator = 0;\n\u00a0\u00a0this->m_denominator = 1;\n}\nFraction::Fraction(int numerator, int denominator)\n{\n\u00a0\u00a0m_numerator = numerator;\n\u00a0\u00a0m_denominator = denominator;\n}\n```", "```cpp\nFraction::Fraction() : m_numerator(0), m_denominator(1)\n{\n}\nFraction::Fraction(int numerator, int denominator) :\n\u00a0\u00a0m_numerator(numerator), m_denominator(denominator)\n{\n}\n```", "```cpp\nclass Fraction\n{\npublic:\n\u00a0\u00a0int m_numerator = 0;\u00a0\u00a0\u00a0\u00a0\u00a0// equals initializer\n\u00a0\u00a0int m_denominator{1};\u00a0\u00a0\u00a0\u00a0// brace initializer\n};\n```", "```cpp\nFraction::Fraction(int numerator) : m_numerator(numerator), m_denominator(1)\n{\n}\nFraction::Fraction(int numerator, int denominator) : Fraction(numerator)\n{\n\u00a0\u00a0auto factor = std::gcd(numerator, denominator);\n\u00a0\u00a0m_numerator /= factor;\n\u00a0\u00a0m_denominator = denominator / factor;\n}\n```", "```cpp\n    Fraction() : m_numerator{0}, m_denominator{1}\n    {\n    }\n    ```", "```cpp\n    Fraction(int numerator) : m_numerator(numerator), m_denominator(1)\n    {\n    }\n    Fraction(int numerator, int denominator) : Fraction(numerator)\n    {\n    \u00a0\u00a0auto factor = std::gcd(numerator, denominator);\n    \u00a0\u00a0m_numerator /= factor;\n    \u00a0\u00a0m_denominator = denominator / factor;\n    }\n    ```", "```cpp\n    Fraction fraction{3,2};\n    ```", "```cpp\nclass Matrix10x10\n{\nprivate:\n\u00a0\u00a0double m_data[10][10];\n};\n```", "```cpp\nMatrix10x10 invert(Matrix10x10 lhs);\nMatrix10x10 mat;\n// set up mat\nMatrix10x10 inv = invert(mat);\n```", "```cpp\nvoid invert(Matrix10x10* src, Matrix10x10* inv);\nMatrix10x10 mat;\nMatrix10x10 inv;\n// set up mat\ninvert(&mat, &inv);\n```", "```cpp\nvoid invert(Matrix10x10& src, Matrix10x10& inv);\nMatrix10x10 mat;\nMatrix10x10 inv;\n// set up mat\ninvert(mat, inv);\n```", "```cpp\nvoid invert(const Matrix10x10& src, Matrix10x10& inv);\n```", "```cpp\n*title = 's';\n```", "```cpp\ntitle = \"Maid Marian\";\n```", "```cpp\n    void swap(const int& lhs, const int& rhs)\n    ```", "```cpp\na = a + b;\na += b;\n```", "```cpp\n// member function declarations\nFraction& operator+=(const Fraction& rhs);\nFraction operator+(const Fraction& rhs) const;\n// normal function declaration of operator+\nFraction operator+(const Fraction& lhs, const Fraction& rhs);\n```", "```cpp\nstd::cout << \"fraction = \" << fraction.getNumerator() << \"/\" \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< fraction.getDenominator() << \"\\n\";\n```", "```cpp\nstd::cout << \"fraction = \" << fraction << \"\\n\";\n```", "```cpp\ninline std::ostream& operator<< (std::ostream &out, const Fraction &rhs)\n{\n\u00a0\u00a0\u00a0\u00a0out << rhs.getNumerator() << \" / \" << rhs.getDenominator();\n\u00a0\u00a0\u00a0\u00a0return out;\n}\n```", "```cpp\n    Fraction& Fraction::operator*=(const Fraction& rhs)\n    {\n    \u00a0\u00a0Fraction tmp(m_numerator*rhs.m_numerator, m_denominator*rhs.m_denominator);\n    \u00a0\u00a0*this = tmp;\n    \u00a0\u00a0return *this;\n    }\n    ```", "```cpp\n    #define EXERCISE7_STEP\u00a0\u00a011\n    ```", "```cpp\n    #define EXERCISE7_STEP\u00a0\u00a015\n    ```", "```cpp\n    #define EXERCISE7_STEP\u00a0\u00a019\n    ```", "```cpp\n    #define EXERCISE7_STEP\u00a0\u00a023\n    ```", "```cpp\nstd::ostream& print(std::ostream& os, int value) {\n\u00a0\u00a0\u00a0os << value << \" is an int\\n\";\n\u00a0\u00a0\u00a0return os;\n}\nstd::ostream& print(std::ostream& os, float value) {\n\u00a0\u00a0\u00a0os << value << \" is a single precision float\\n\";\n\u00a0\u00a0\u00a0return os;\n}\nstd::ostream& print(std::ostream& os, double value) {\n\u00a0\u00a0\u00a0os << value << \" is a double precision float \\n\";\n\u00a0\u00a0\u00a0return os;\n}\n// The next function causes the compiler to generate an error\n// as it only differs by return type.\nvoid print(std::ostream& os, double value) {\n\u00a0\u00a0\u00a0os << value << \" is a double precision float!\\n\";\n}\n```", "```cpp\nint main(int argc, char** argv) {\n\u00a0\u00a0\u00a0print(42);\n}\n```", "```cpp\nclass Fraction\n{\n\u00a0\u00a0Fraction() {};\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// All of these are private\n\u00a0\u00a0int m_numerator;\n\u00a0\u00a0int m_denominator;\n};\n```", "```cpp\nstruct Fraction\n{\n\u00a0\u00a0Fraction() {};\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// All of these are public\n\u00a0\u00a0int m_numerator;\n\u00a0\u00a0int m_denominator;\n};\n```", "```cpp\nunion variant\n{\n\u00a0\u00a0int m_ivalue;\n\u00a0\u00a0float m_fvalue;\n\u00a0\u00a0double m_dvalue;\n};\n```"]