["```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n    struct name_greeter {\n        std::string name;\n\n        void operator()() {\n            std::cout << \"Hello, \" << name << 'n'; \n        }\n    };\n\n    name_greeter greet_john_doe {\"John Doe\"};\n    greet_john_doe();\n}\n```", "```cpp\n#include <iostream>\n\nint main() {\n    auto greet_john_doe ([] {\n        std::cout << \"Hello, John Doen\"; \n    });\n\n    greet_john_doe();\n}\n```", "```cpp\n      #include <iostream>\n      #include <string>\n```", "```cpp\n      int main()\n      {\n          auto just_one ( [](){ return 1; } );\n          auto just_two ( []  { return 2; } );\n```", "```cpp\n          std::cout << just_one() << \", \" << just_two() << 'n';\n```", "```cpp\n          auto plus ( [](auto l, auto r) { return l + r; } );\n```", "```cpp\n          std::cout << plus(1, 2) << 'n';\n          std::cout << plus(std::string{\"a\"}, \"b\") << 'n';\n```", "```cpp\n          std::cout \n            << [](auto l, auto r){ return l + r; }(1, 2) \n            << 'n';\n```", "```cpp\n          auto counter (\n              [count = 0] () mutable { return ++count; }\n          );\n```", "```cpp\n          for (size_t i {0}; i < 5; ++i) {\n              std::cout << counter() << \", \";\n          }\n          std::cout << 'n';\n```", "```cpp\n          int a {0};\n          auto incrementer ( [&a] { ++a; } );\n```", "```cpp\n          incrementer();\n          incrementer();\n          incrementer();\n\n          std::cout \n            << \"Value of 'a' after 3 incrementer() calls: \" \n            << a << 'n';\n```", "```cpp\n          auto plus_ten ( [=] (int x) { return plus(10, x); } );\n          std::cout << plus_ten(5) << 'n';\n      }\n```", "```cpp\n      1, 2\n      3\n      ab\n      3\n      1, 2, 3, 4, 5, \n      Value of a after 3 incrementer() calls: 3\n      15\n```", "```cpp\n      #include <iostream>\n      #include <deque>\n      #include <list>\n      #include <vector>\n      #include <functional>\n```", "```cpp\n      static auto consumer (auto &container){\n          return [&] (auto value) {\n              container.push_back(value);\n          };\n      }\n```", "```cpp\n      static void print (const auto &c)\n      {\n          for (auto i : c) {\n              std::cout << i << \", \";\n          }\n          std::cout << 'n';\n      }\n```", "```cpp\n      int main()\n      {\n          std::deque<int>  d;\n          std::list<int>   l;\n          std::vector<int> v;\n```", "```cpp\n          const std::vector<std::function<void(int)>> consumers \n              {consumer(d), consumer(l), consumer(v)};\n```", "```cpp\n          for (size_t i {0}; i < 10; ++i) {\n              for (auto &&consume : consumers) {\n                  consume(i);\n              }\n          }\n```", "```cpp\n          print(d);\n          print(l);\n          print(v);\n      }\n```", "```cpp\n      $ ./std_function\n      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, \n      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, \n      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, \n```", "```cpp\nconst std::vector<std::function<void(int)>> consumers \n        {consumer(d), consumer(l), consumer(v)};\n```", "```cpp\nstd::function<void(int)> f (\n    [&vector](int x) { vector.push_back(x); });\n```", "```cpp\n      #include <iostream>\n      #include <functional>\n```", "```cpp\n      template <typename T, typename ...Ts>\n      auto concat(T t, Ts ...ts)\n      {\n```", "```cpp\n          if constexpr (sizeof...(ts) > 0) {\n              return [=](auto ...parameters) { \n                  return t(concat(ts...)(parameters...)); \n              };\n          }\n```", "```cpp\n          else {\n              return t;\n          }\n      }\n```", "```cpp\n      int main()\n      {\n          auto twice  ([] (int i) { return i * 2; });\n          auto thrice ([] (int i) { return i * 3; });\n```", "```cpp\n          auto combined (\n              concat(twice, thrice, std::plus<int>{})\n          );\n```", "```cpp\n          std::cout << combined(2, 3) << 'n';\n      }\n```", "```cpp\n      $ ./concatenation\n      30\n```", "```cpp\ntemplate <typename T, typename ...Ts>\nauto concat(T t, Ts ...ts)\n{\n    if constexpr (sizeof...(ts) > 0) { \n        return [=](auto ...parameters) { \n            return t(concat(ts...)(parameters...)); \n        }; \n    } else {\n        return [=](auto ...parameters) { \n            return t(parameters...); \n        };\n    }\n}\n```", "```cpp\ntemplate <typename F, typename G, typename H>\nauto concat(F f, G g, H h)\n{\n    return [=](auto ... params) {\n        return f( g( h( params... ) ) ); \n    };\n}\n```", "```cpp\n      #include <iostream>\n      #include <functional>\n      #include <string>\n      #include <iterator>\n      #include <algorithm>\n```", "```cpp\n      static bool begins_with_a (const std::string &s)\n      {\n          return s.find(\"a\") == 0;\n      }\n\n      static bool ends_with_b (const std::string &s)\n      {\n          return s.rfind(\"b\") == s.length() - 1;\n      }\n```", "```cpp\n      template <typename A, typename B, typename F>\n      auto combine(F binary_func, A a, B b)\n      {\n```", "```cpp\n          return [=](auto param) {\n              return binary_func(a(param), b(param));\n          };\n      }\n```", "```cpp\n      using namespace std;\n```", "```cpp\n      int main()\n      {\n          auto a_xxx_b (combine(\n              logical_and<>{}, \n              begins_with_a, ends_with_b));\n```", "```cpp\n          copy_if(istream_iterator<string>{cin}, {},\n                  ostream_iterator<string>{cout, \", \"},\n                  a_xxx_b);\n          cout << 'n';\n      }\n```", "```cpp\n      $ echo \"ac cb ab axxxb\" | ./combine\n      ab, axxxb, \n```", "```cpp\n      #include <iostream>\n```", "```cpp\n      static auto multicall (auto ...functions)\n      {\n          return [=](auto x) {\n              (void)std::initializer_list<int>{\n                  ((void)functions(x), 0)...\n              };\n          };\n      }\n```", "```cpp\n      static auto for_each (auto f, auto ...xs) {\n          (void)std::initializer_list<int>{\n              ((void)f(xs), 0)...\n          };\n      }\n```", "```cpp\n      static auto brace_print (char a, char b) {\n          return [=] (auto x) {\n              std::cout << a << x << b << \", \";\n          };\n      }\n```", "```cpp\n      int main()\n      {\n          auto f  (brace_print('(', ')'));\n          auto g  (brace_print('[', ']'));\n          auto h  (brace_print('{', '}'));\n          auto nl ([](auto) { std::cout << 'n'; });\n```", "```cpp\n          auto call_fgh (multicall(f, g, h, nl));\n```", "```cpp\n          for_each(call_fgh, 1, 2, 3, 4, 5);\n      }\n```", "```cpp\n      $ ./multicaller\n      (1), [1], {1}, \n      (2), [2], {2}, \n      (3), [3], {3}, \n      (4), [4], {4}, \n      (5), [5], {5}, \n```", "```cpp\nauto for_each ([](auto f, auto ...xs) {\n    (void)std::initializer_list<int>{\n        ((void)f(xs), 0)...\n    };\n});\n```", "```cpp\nauto for_each ([](auto f, auto ...xs) {\n    return std::initializer_list<int>{f(xs)...};\n});\n```", "```cpp\n      #include <iostream>\n      #include <iterator>\n      #include <numeric>\n```", "```cpp\n      template <typename T>\n      auto map(T fn)\n      {\n```", "```cpp\n          return [=] (auto reduce_fn) {\n              return [=] (auto accum, auto input) {\n                  return reduce_fn(accum, fn(input));\n              };\n          };\n      }\n```", "```cpp\n      template <typename T>\n      auto filter(T predicate)\n      {\n```", "```cpp\n          return [=] (auto reduce_fn) {\n              return [=] (auto accum, auto input) {\n                  if (predicate(input)) {\n                      return reduce_fn(accum, input);\n                  } else {\n                      return accum;\n                  }\n              };\n          };\n      }\n```", "```cpp\n      int main()\n      {\n          std::istream_iterator<int> it {std::cin};\n          std::istream_iterator<int> end_it;\n```", "```cpp\n          auto even  ([](int i) { return i % 2 == 0; });\n          auto twice ([](int i) { return i * 2; });\n```", "```cpp\n          auto copy_and_advance ([](auto it, auto input) {\n              *it = input;\n              return ++it;\n          });\n```", "```cpp\n          std::accumulate(it, end_it,\n              std::ostream_iterator<int>{std::cout, \", \"},\n              filter(even)(\n                  map(twice)(\n                      copy_and_advance\n                  )\n              ));\n          std::cout << 'n';\n      }\n```", "```cpp\n      $ echo \"1 2 3 4 5 6\" | ./transform_if\n      4, 8, 12, \n```", "```cpp\ntemplate <typename T, typename F>\nT accumulate(InputIterator first, InputIterator last, T init, F f)\n{\n    for (; first != last; ++first) {\n        init = f(init, *first);\n    }\n    return init;\n}\n```", "```cpp\ntemplate <typename InputIterator, typename OutputIterator, \n          typename P, typename Transform>\nOutputIterator transform_if(InputIterator first, InputIterator last,\n                            OutputIterator out,\n                            P predicate, Transform trans)\n{\n    for (; first != last; ++first) {\n        if (predicate(*first)) {\n            *out = trans(*first);\n            ++out;\n        }\n    }\n    return out;\n}\n```", "```cpp\nauto copy_and_advance ([](auto it, auto input) {\n    *it = input;\n    return ++it;\n});\n```", "```cpp\ntemplate <typename T>\nauto filter(T predicate)\n{\n    return [=] (auto reduce_fn) {\n        return [=] (auto accum, auto input) {\n            if (predicate(input)) {\n                return reduce_fn(accum, input);\n            } else {\n                return accum;\n            }\n        };\n    };\n}\n```", "```cpp\ntemplate <typename T>\nauto map(T fn)\n{\n    return [=] (auto reduce_fn) {\n        return [=] (auto accum, auto input) {\n            return reduce_fn(accum, fn(input));\n        };\n    };\n}\n```", "```cpp\nfilter(even)(\n    map(twice)(\n        copy_and_advance\n    )\n)\n```", "```cpp\n      #include <iostream>\n```", "```cpp\n      static void print(int x, int y)\n      {\n          std::cout << \"(\" << x << \", \" << y << \")n\";\n      }\n\n      int main()\n      {\n```", "```cpp\n          constexpr auto call_cart (\n              [=](auto f, auto x, auto ...rest) constexpr {\n                  (void)std::initializer_list<int>{\n                      (((x < rest)\n                          ? (void)f(x, rest)\n                          : (void)0)\n                      ,0)...\n                  };\n              });\n```", "```cpp\n          constexpr auto cartesian ([=](auto ...xs) constexpr {\n              return [=] (auto f) constexpr {\n                  (void)std::initializer_list<int>{\n                      ((void)call_cart(f, xs, xs...), 0)...\n                  };\n              };\n          });\n```", "```cpp\n          constexpr auto print_cart (cartesian(1, 2, 3));\n\n          print_cart(print);\n      }\n```", "```cpp\n      $ ./cartesian_product\n      (1, 2)\n      (1, 3)\n      (2, 3)\n```", "```cpp\n constexpr auto cartesian ([=](auto ...xs) constexpr {\n     return [=](auto f) constexpr {\n         (void)std::initializer_list<int>{\n             ((void)call_cart(f, xs, xs...), 0)...\n         };\n     };\n });\n```", "```cpp\nauto call_cart ([](auto f, auto x, auto ...rest) constexpr {\n    (void)std::initializer_list<int>{\n        (((x < rest)\n            ? (void)f(x, rest)\n            : (void)0)\n        ,0)...\n    };\n});\n```"]