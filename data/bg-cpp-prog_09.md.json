["```cpp\n    typedef basic_string<char,\n       char_traits<char>, allocator<char> > string; \n    typedef basic_string<wchar_t,\n       char_traits<wchar_t>, allocator<wchar_t> > wstring; \n    typedef basic_string<char16_t,\n       char_traits<char16_t>, allocator<char16_t> > u16string; \n    typedef basic_string<char32_t,\n       char_traits<char32_t>, allocator<char32_t> > u32string;\n```", "```cpp\n    string s = \"hellon\"; \n    copy(s.begin(), s.end(), ostream_iterator<char>(cout));\n```", "```cpp\nvector<char> v(s.begin(), s.end()); \ncopy(v.begin(), v.end(), ostream_iterator<char>(cout));\n```", "```cpp\n    string str = \"hello\"; \n    cout << str << \"n\"; // hello \n    str.push_back('!'); \n    cout << str << \"n\"; // hello! \n    str.erase(0, 1); \n    cout << str << \"n\"; // ello!\n```", "```cpp\n    string str = \"hello\"; \n    cout << str << \"n\";  // hello \n    str.append(4, '!'); \n    cout << str << \"n\";  // hello!!!! \n    str += \" there\"; \n    cout << str << \"n\";  // hello!!!! there\n```", "```cpp\n    string str = \"hello\"; \n    cout << str << \"n\";    // hello \n    str.replace(1, 1, \"a\"); \n    cout << str << \"n\";    // hallo\n```", "```cpp\n    string str = \"one two three\"; \n    string str1 = str.substr(0, 3);  \n    cout << str1 << \"n\";          // one \n    string str2 = str.substr(8); \n    cout << str2 << \"n\";          // three\n```", "```cpp\n    string str = \"012the678the234the890\"; \n    string::size_type pos = 0; \n    while(true) \n    { \n        pos++; \n        pos = str.find(\"the\",pos); \n        if (pos == string::npos) break; \n        cout << pos << \" \" << str.substr(pos) << \"n\"; \n    } \n    // 3 the678the234the890 \n    // 9 the234the890 \n    // 15 the890\n```", "```cpp\n    string str = \"012the678the234the890\"; \n    string::size_type pos = string::npos; \n    while(true) \n    { \n        pos--; pos = str.rfind(\"the\",pos); \n        if (pos == string::npos) break; \n        cout << pos << \" \" << str.substr(pos) << \"n\"; \n    } \n    // 15 the890 \n    // 9 the234the890 \n    // 3 the678the234the890\n```", "```cpp\n    string str = \"012the678the234the890\"; \n    string::size_type pos = str.find_first_of(\"eh\"); \n    if (pos != string::npos) \n    { \n        cout << \"found \" << str[pos] << \" at position \"; \n        cout << pos << \" \" << str.substr(pos) << \"n\"; \n    } \n    // found h at position 4 he678the234the890\n```", "```cpp\n    string str = \"012the678the234the890\"; \n    string::size_type pos = str.find_first_not_of(\"0123456789\"); \n    cout << \"found \" << str[pos] << \" at position \"; \n    cout << pos << \" \" << str.substr(pos) << \"n\"; \n    // found t at position 3 the678the234the890\n```", "```cpp\n    string str = \"  hello  \"; \n    cout << \"|\" << str << \"|n\";  // |  hello  | \n    string str1 = str.substr(str.find_first_not_of(\" trn\")); \n    cout << \"|\" << str1 << \"|n\"; // |hello  | \n    string str2 = str.substr(0, str.find_last_not_of(\" trn\") + 1); \n    cout << \"|\" << str2 << \"|n\"; // |  hello|\n```", "```cpp\n    locale loc(\"french\"); \n    const time_put<char>& fac = use_facet<time_put<char>>(loc);\n```", "```cpp\n    time_t t = time(nullptr); \n    tm *td = gmtime(&t); \n    ostreambuf_iterator<char> it(cout); \n    fac.put(it, cout, ' ', td, 'x', '#'); \n    cout << \"n\";\n```", "```cpp\n    samedi 28 janvier 2017\n```", "```cpp\n    Samstag, 28\\. January 2017\n```", "```cpp\n    28 Ocak 2017 Cumartesi\n```", "```cpp\n    Saturday, January 28, 2017\n28 January 2017\n```", "```cpp\n    cout.imbue(locale(\"american\")); \n    cout << 1.1 << \"n\"; \n    cout.imbue(locale(\"french\")); \n    cout << 1.1 << \"n\"; \n    cout.imbue(locale::classic());\n```", "```cpp\n    int compare( \n       const string& lhs, const string& rhs, const locale& loc) \n    { \n        const collate<char>& fac = use_facet<collate<char>>(loc); \n        return fac.compare( \n            &lhs[0], &lhs[0] + lhs.size(), &rhs[0], &rhs[0] + rhs.size()); \n    }\n```", "```cpp\n    double d = stod(\"10.5\"); \n    d *= 4; \n    cout << d << \"n\"; // 42\n```", "```cpp\n    string str = \"49.5 red balloons\"; \n    size_t idx = 0; \n    double d = stod(str, &idx); \n    d *= 2; \n    string rest = str.substr(idx); \n    cout << d << rest << \"n\"; // 99 red balloons\n```", "```cpp\n    double d = 123456789.987654321; \n    cout << d << \"n\"; \n    cout << fixed; \n    cout << d << \"n\"; \n    cout.precision(9); \n    cout << d << \"n\"; \n    cout << scientific; \n    cout << d << \"n\";\n```", "```cpp\n 1.23457e+08\n 123456789.987654\n 123456789.987654328\n 1.234567900e+08\n```", "```cpp\n    double d = 12.345678; \n    cout << fixed; \n    cout << setfill('#'); \n    cout << setw(15) << d << \"n\";\n```", "```cpp\n    ######12.345678\n```", "```cpp\n    double d = 12.345678; \n    cout << fixed; \n    cout << showpos << internal; \n    cout << setfill('#'); \n    cout << setw(15) << d << \"n\";\n```", "```cpp\n    +#####12.345678\n```", "```cpp\n    vector<pair<string, double>> table \n    { { \"one\",0 },{ \"two\",0 },{ \"three\",0 },{ \"four\",0 } }; \n\n    double d = 0.1; \n    for (pair<string,double>& p : table) \n    { \n        p.second = d / 17.0; \n        d += 0.1; \n    } \n\n    cout << fixed << setprecision(6); \n\n    for (pair<string, double> p : table) \n    { \n        cout << setw(6)  << p.first << setw(10) << p.second << \"n\"; \n    }\n```", "```cpp\n one  0.005882\n two  0.011765\n three  0.017647\n four  0.023529\n```", "```cpp\n    cout << fixed << setprecision(6) << left;\n```", "```cpp\n one   0.005882\n two   0.011765\n three 0.017647\n four  0.023529\n```", "```cpp\n    for (pair<string, double> p : table) \n    { \n        cout << setw(6) << left << p.first  \n            << setw(10) << right << p.second << \"n\"; \n    }\n```", "```cpp\n one     0.005882\n two     0.011765\n three   0.017647\n four    0.023529\n```", "```cpp\n    time_t t = time(nullptr); \n    tm *pt = localtime(&t); \n    cout << put_time(pt, \"time = %X date = %x\") << \"n\";\n```", "```cpp\n    time = 20:08:04 date = 01/02/17\n```", "```cpp\n    time_t t = time(nullptr); \n    tm *pt = localtime(&t); \n    cout << put_time(pt, \"month = %B day = %A\") << \"n\"; \n    cout.imbue(locale(\"french\")); \n    cout << put_time(pt, \"month = %B day = %A\") << \"n\";\n```", "```cpp\n month = March day = Thursday\n month = mars day = jeudi\n```", "```cpp\n    Cout << showbase; \n    cout.imbue(locale(\"German\")); \n    cout << \"German\" << \"n\"; \n    cout << put_money(109900, false) << \"n\"; \n    cout << put_money(\"1099\", true) << \"n\"; \n    cout.imbue(locale(\"American\")); \n    cout << \"American\" << \"n\"; \n    cout << put_money(109900, false) << \"n\"; \n    cout << put_money(\"1099\", true) << \"n\";\n```", "```cpp\n German\n 1.099,00 euros\n EUR10,99\n American\n $1,099.00\n USD10.99\n```", "```cpp\n    struct point \n    { \n        double x = 0.0, y = 0.0; \n        point(){} \n        point(double _x, double _y) : x(_x), y(_y) {} \n    }; \n\n    ostream& operator<<(ostream& out, const point& p) \n    { \n        out << \"(\" << p.x << \",\" << p.y << \")\"; \n        return out; \n    }\n```", "```cpp\n    point p(10.0, -5.0); \n    cout << p << \"n\";         // (10,-5)\n```", "```cpp\n    stringbuf buffer;  \n    ostream out(&buffer); \n    out << p; \n    string str = buffer.str(); // contains (10,-5)\n```", "```cpp\n    ostringstream os; \n    os << hex; \n    os << 42; \n    cout << \"The value is: \" << os.str() << \"n\";\n```", "```cpp\n    istringstream ss(\"-1.0e-6\"); \n    double d; \n    ss >> d;\n```", "```cpp\n    istringstream ss(\"-1.0e-6\"); \n    int i; \n    ss >> i; \n    string str; \n    ss >> str; \n    cout << \"extracted \" << i << \" remainder \" << str << \"n\";\n```", "```cpp\n    extracted -1 remainder .0e-6\n```", "```cpp\n    istringstream ss(\"0xff\"); \n    int i; \n    ss >> hex; \n    ss >> i;\n```", "```cpp\n    istringstream ss(\"Paul was born in 1942\"); \n    int year; \n    ss >> year; \n    if (ss.fail()) cout << \"failed to read number\" << \"n\";\n```", "```cpp\n    istringstream ss(\"Paul was born in 1942\"); \n    string str; \n    ss >> str >> str >> str >> str; \n    int year; \n    ss >> year;\n```", "```cpp\n    istringstream ss(\"Paul was born in 1942\"); \n    string str;    \n    while (ss.eof() && !(isdigit(ss.peek()))) ss.get(); \n    int year; \n    ss >> year; \n    if (!ss.fail()) cout << \"the year was \" << year << \"n\";\n```", "```cpp\n    string str = \"  hello  \"; \n    cout << \"|\" << str1 << \"|n\"; // |  hello  | \n    istringstream ss(str); \n    ss >> ws; \n    string str1; \n    ss >> str1; \n    ut << \"|\" << str1 << \"|n\";   // |hello|\n```", "```cpp\n    tm indpday = {}; \n    string str = \"4/7/17\"; \n    istringstream ss(str); \n    ss.imbue(locale(\"french\")); \n    ss >> get_time(&indpday, \"%x\"); \n    if (!ss.fail())  \n    { \n       cout.imbue(locale(\"american\")); \n       cout << put_time(&indpday, \"%x\") << \"n\";  \n    }\n```", "```cpp\n    7/4/2017\n```", "```cpp\n    ([A-Za-z]+) +1\n```", "```cpp\n    regex rx(\"([A-Za-z]+) +1\");\n```", "```cpp\n    regex rx(R\"(([A-Za-z]+) +1)\");\n```", "```cpp\n    regex rx(\"[at]\"); // search for either a or t \n    cout << boolalpha; \n    cout << regex_match(\"a\", rx) << \"n\";  // true \n    cout << regex_match(\"a\", rx) << \"n\";  // true \n    cout << regex_match(\"at\", rx) << \"n\"; // false\n```", "```cpp\n    string str(\"trumpet\"); \n    regex rx(\"(trump)(.*)\"); \n    match_results<string::const_iterator> sm; \n    if (regex_match(str, sm, rx)) \n    { \n        cout << \"the matches were: \"; \n        for (unsigned i = 0; i < sm.size(); ++i)  \n        { \n            cout << \"[\" << sm[i] << \",\" << sm.position(i) << \"] \"; \n        } \n        cout << \"n\"; \n    } // the matches were: [trumpet,0] [trump,0] [et,5]\n```", "```cpp\n    regex rx(\"bd{2}b\"); \n    smatch mr; \n    string str = \"1 4 10 42 100 999\"; \n    string::const_iterator cit = str.begin(); \n    while (regex_search(cit, str.cend(), mr, rx)) \n    { \n        cout << mr[0] << \"n\"; \n        cit += mr.position() + mr.length(); \n    }\n```", "```cpp\n    string str(\"trumpet\"); \n    regex rx(\"(trump)(.*)\"); \n    match_results<string::const_iterator> sm; \n    if (regex_match(str, sm, rx)) \n    { \n        string fmt = \"Results: [$1] [$2]\"; \n        cout << sm.format(fmt) << \"n\"; \n    } // Results: [trump] [et]\n```", "```cpp\n    string str = \"the cat sat on the mat in the bathroom\"; \n    regex rx(\"(b(.at)([^ ]*)\"); \n    regex_iterator<string::iterator> next(str.begin(), str.end(), rx); \n    regex_iterator<string::iterator> end; \n\n    for (; next != end; ++next) \n    { \n        cout << next->position() << \" \" << next->str() << \", \"; \n    } \n    cout << \"n\"; \n    // 4 cat, 8 sat, 19 mat, 30 bathroom\n```", "```cpp\n    4 cat, 8 sat, 19 mat, 30 bat\n```", "```cpp\n    using iter = regex_token_iterator<string::iterator>; \n    string str = \"the cat sat on the mat in the bathroom\"; \n    regex rx(\"b(.at)([^ ]*)\");  \n    iter next, end; \n\n    // get the text between the matches \n    next = iter(str.begin(), str.end(), rx, -1); \n    for (; next != end; ++next) cout << next->str() << \", \"; \n    cout << \"n\"; \n    // the ,  ,  on the ,  in the , \n\n    // get the complete match \n    next = iter(str.begin(), str.end(), rx, 0); \n    for (; next != end; ++next) cout << next->str() << \", \"; \n    cout << \"n\"; \n    // cat, sat, mat, bathroom, \n\n    // get the sub match 1 \n    next = iter(str.begin(), str.end(), rx, 1); \n    for (; next != end; ++next) cout << next->str() << \", \"; \n    cout << \"n\"; \n    // cat, sat, mat, bat, \n\n    // get the sub match 2 \n    next = iter(str.begin(), str.end(), rx, 2); \n    for (; next != end; ++next) cout << next->str() << \", \"; \n    cout << \"n\"; \n    // , , , hroom,\n```", "```cpp\n    string str = \"use the list<int> class in the example\"; \n    regex rx(\"b(list)(<w*> )\"); \n    string result = regex_replace(str, rx, \"vector$2\"); \n    cout << result << \"n\"; // use the vector<int> class in the example\n```", "```cpp\n    #include <iostream> \n    #include <fstream> \n    #include <string> \n\n    using namespace std; \n\n    void usage() \n    { \n        cout << \"usage: email_parser file\" << \"n\"; \n        cout << \"where file is the path to a file\" << \"n\"; \n    } \n\n    int main(int argc, char *argv[]) \n    { \n        if (argc <= 1) \n        { \n            usage(); \n            return 1; \n        } \n\n        ifstream stm; \n        stm.open(argv[1], ios_base::in); \n        if (!stm.is_open()) \n        { \n            usage(); \n            cout << \"cannot open \" << argv[1] << \"n\"; \n            return 1; \n        } \n\n        return 0; \n    }\n```", "```cpp\n    class header_body \n    { \n        string body; \n    public: \n        header_body() = default; \n        header_body(const string& b) : body(b) {} \n        string get_body() const { return body; } \n    };\n```", "```cpp\n    class email \n    { \n        using iter = vector<pair<string, header_body>>::iterator; \n        vector<pair<string, header_body>> headers; \n        string body; \n\n    public: \n        email() : body(\"\") {} \n\n        // accessors \n        string get_body() const { return body; } \n        string get_headers() const; \n        iter begin() { return headers.begin(); } \n        iter end() { return headers.end(); } \n\n        // two stage construction \n        void parse(istream& fin); \n    private: \n        void process_headers(const vector<string>& lines); \n    };\n```", "```cpp\n    string get_headers() const \n    { \n        string all = \"\"; \n        for (auto a : headers) \n        { \n            all += a.first + \": \" + a.second.get_body(); \n            all += \"n\"; \n        } \n        return all; \n    }\n```", "```cpp\n email eml; eml.parse(stm); cout << eml.get_headers(); cout << \"n\"; cout << eml.get_body() << \"n\"; \n\n        return 0; \n    }\n```", "```cpp\n    void email::parse(istream& fin) \n    { \n        string line; \n        vector<string> headerLines; \n        while (getline(fin, line)) \n        { \n            if (line.empty()) \n            { \n                // end of headers \n                break; \n            } \n            headerLines.push_back(line); \n        } \n\n        process_headers(headerLines); \n\n        while (getline(fin, line)) \n        { \n            if (line.empty()) body.append(\"n\"); \n            else body.append(line); \n        } \n    }\n```", "```cpp\n    void email::process_headers(const vector<string>& lines) \n    { \n        string header = \"\"; \n        string body = \"\"; \n        for (string line : lines) \n        { \n            if (isspace(line[0])) body.append(line); \n            else \n            { \n                if (!header.empty()) \n                { \n                    headers.push_back(make_pair(header, body)); \n                    header.clear(); \n                    body.clear(); \n                } \n\n                size_t pos = line.find(':'); \n                header = line.substr(0, pos); \n                pos++; \n                while (isspace(line[pos])) pos++; \n                body = line.substr(pos); \n            } \n        } \n\n        if (!header.empty()) \n        { \n            headers.push_back(make_pair(header, body)); \n        } \n    }\n```", "```cpp\n    Received: from x.y.test\n by example.net\n via TCP\n with ESMTP\n id ABC12345\n for <mary@example.net>;  21 Nov 1997 10:05:43 -0600\nReceived: from node.example by x.y.test; 21 Nov 1997 10:01:22 -0600\nFrom: John Doe <jdoe@node.example>\nTo: Mary Smith <mary@example.net>\nSubject: Saying Hello\nDate: Fri, 21 Nov 1997 09:55:06 -0600\nMessage-ID: <1234@local.node.example>\n\nThis is a message just to say hello.\nSo, \"Hello\".\n```", "```cpp\n    public: \n        header_body() = default; \n        header_body(const string& b) : body(b) {} \n        string get_body() const { return body; } \n        vector<pair<string, string>> subitems(); \n    };\n```", "```cpp\n    email eml; \n    eml.parse(stm); \n    for (auto header : eml) { cout << header.first << \" : \"; vector<pair<string, string>> subItems = header.second.subitems(); if (subItems.size() == 0) { cout << header.second.get_body() << \"n\"; } else { cout << \"n\"; for (auto sub : subItems) { cout << \"   \" << sub.first; if (!sub.second.empty()) \n                cout << \" = \" << sub.second;         \n                cout << \"n\"; } } } \n    cout << \"n\"; \n    cout << eml.get_body() << endl;\n```", "```cpp\n    vector<pair<string, string>> header_body::subitems() \n    { \n        vector<pair<string, string>> subitems; \n        if (body.find(';') == body.npos) return subitems; \n\n        return subitems; \n    }\n```", "```cpp\n    vector<pair<string, string>> subitems; \n    if (body.find(';') == body.npos) return subitems; \n    size_t start = 0;\n size_t end = start; while (end != body.npos){}\n```", "```cpp\n    while (start != body.length() && isspace(body[start])) \n    { \n        start++; \n    } \n    if (start == body.length()) break;\n```", "```cpp\n    string name = \"\"; \n    string value = \"\"; \n    size_t eq = body.find('=', start); \n    end = body.find(';', start); \n\n    if (eq == body.npos) \n    { \n        if (end == body.npos) name = body.substr(start); \n        else name = body.substr(start, end - start); \n    } \n    else \n    {\n    } \n    subitems.push_back(make_pair(name, value)); \n    start = end + 1;\n```", "```cpp\n    if (eq == body.npos) \n    { \n        if (end == body.npos) name = body.substr(start); \n        else name = body.substr(start, end - start); \n    } \n    else \n    { \n if (end == body.npos) { name = body.substr(start, eq - start); value = body.substr(eq + 1); } else { if (eq < end) { name = body.substr(start, eq - start); value = body.substr(eq + 1, end - eq - 1); } else { name = body.substr(start, end - start); } } \n    }\n```"]