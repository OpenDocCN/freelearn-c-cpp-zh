["```cpp\nstd::array<int, 10> arr;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// array of int of size 10\narr[0] = 1;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Sets the first element as 1\nstd::cout << \"First element: \" << arr[0] << std::endl;\nstd::array<int, 4> arr2 = {1, 2, 3, 4};\nstd::cout << \"Elements in second array: \";\n  for(int i = 0; i < arr.size(); i++)\n\u00a0\u00a0\u00a0\u00a0std::cout << arr2[i] << \" \";\n```", "```cpp\nFirst element: 1\nElements in second array: 1 2 3 4 \n```", "```cpp\ntry\n{\n\u00a0\u00a0\u00a0\u00a0std::cout << arr.at(4);\u00a0\u00a0\u00a0\u00a0// No error\n\u00a0\u00a0\u00a0\u00a0std::cout << arr.at(5);\u00a0\u00a0\u00a0\u00a0// Throws exception std::out_of_range\n}\ncatch (const std::out_of_range& ex)\n{\n\u00a0\u00a0\u00a0\u00a0std::cerr << ex.what();\n}\n```", "```cpp\nvoid print(std::array<int, 5> arr)\n{\n\u00a0\u00a0\u00a0\u00a0for(auto ele: arr)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << ele << \", \";\n\u00a0\u00a0\u00a0\u00a0}\n}\nstd::array<int, 5> arr = {1, 2, 3, 4, 5};\nprint(arr);\n```", "```cpp\n1, 2, 3, 4, 5\n```", "```cpp\ntemplate <size_t N>\nvoid print(const std::array<int, N>& arr)\n```", "```cpp\nstd::array<int, 5> arr = {1, 2, 3, 4, 5};\nfor(auto element: arr)\n{\n\u00a0\u00a0\u00a0\u00a0std::cout << element << ' ';\n}\n```", "```cpp\n1 2 3 4 5 \n```", "```cpp\nfor(auto it = arr.begin(); it != arr.end(); it++)\n{\n\u00a0\u00a0\u00a0\u00a0auto element = (*it);\n\u00a0\u00a0\u00a0\u00a0std::cout << element << ' ';\n}\n```", "```cpp\nstd::array<int, 5> arr = {1, 2, 3, 4, 5};\nstd::cout << arr.front() << std::endl;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Prints 1\nstd::cout << arr.back() << std::endl;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Prints 5\nstd::cout << *(arr.data() + 1) << std::endl;\u00a0// Prints 2\n```", "```cpp\n    #include <iostream>\n    #include <sstream>\n    #include <algorithm>\n    ```", "```cpp\n    template <typename T>\n    class dynamic_array\n    {\n    \u00a0\u00a0\u00a0\u00a0T* data;\n    \u00a0\u00a0\u00a0\u00a0size_t n;\n    ```", "```cpp\n    public:\n    dynamic_array(int n)\n    {\n    \u00a0\u00a0\u00a0\u00a0this->n = n;\n    \u00a0\u00a0\u00a0\u00a0data = new T[n];\n    }\n    \u00a0\u00a0\u00a0\u00a0dynamic_array(const dynamic_array<T>& other)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0n = other.n;\n    \u00a0\u00a0\u00a0\u00a0data = new T[n];\n    \u00a0\u00a0\u00a0\u00a0for(int i = 0; i < n; i++)\n    \u00a0\u00a0\u00a0\u00a0data[i] = other[i];\n    \u00a0\u00a0}\n    ```", "```cpp\n    T& operator[](int index)\n    {\n    \u00a0\u00a0\u00a0\u00a0return data[index];\n    }\n    const T& operator[](int index) const\n    {\n    \u00a0\u00a0\u00a0\u00a0return data[index];\n    }\n    T& at(int index)\n    {\n    \u00a0\u00a0\u00a0\u00a0if(index < n)\n    \u00a0\u00a0\u00a0\u00a0return data[index];\n    \u00a0\u00a0\u00a0\u00a0throw \"Index out of range\";\n    }\n    ```", "```cpp\n    size_t size() const\n    {\n    \u00a0\u00a0\u00a0\u00a0return n;\n    }\n    ~dynamic_array()\n    {\n    \u00a0\u00a0\u00a0\u00a0delete[] data;\u00a0\u00a0 // A destructor to prevent memory leak\n    }\n    ```", "```cpp\n    T* begin()\n    {\n    \u00a0\u00a0\u00a0\u00a0return data;\n    }\n    const T* begin() const\n    {\n    \u00a0\u00a0\u00a0\u00a0return data;\n    }\n    T* end()\n    {\n    \u00a0\u00a0\u00a0\u00a0return data + n;\n    }\n    const T* end() const\n    {\n    \u00a0\u00a0\u00a0\u00a0return data + n;\n    }\n    ```", "```cpp\n    friend dynamic_array<T> operator+(const dynamic_array<T>& arr1, dynamic_array<T>& arr2)\n    {\n    \u00a0\u00a0\u00a0\u00a0dynamic_array<T> result(arr1.size() + arr2.size());\n    \u00a0\u00a0\u00a0\u00a0std::copy(arr1.begin(), arr1.end(), result.begin());\n    \u00a0\u00a0\u00a0\u00a0std::copy(arr2.begin(), arr2.end(), result.begin() + arr1.size());\n    \u00a0\u00a0\u00a0\u00a0return result;\n    }\n    ```", "```cpp\n    std::string to_string(const std::string& sep = \", \")\n    {\n    \u00a0\u00a0if(n == 0)\n    \u00a0\u00a0\u00a0\u00a0return \"\";\n    \u00a0\u00a0std::ostringstream os;\n    \u00a0\u00a0os << data[0];\n    \u00a0\u00a0for(int i = 1; i < n; i++)\n    \u00a0\u00a0\u00a0\u00a0os << sep << data[i];\n    \u00a0\u00a0return os.str();\n    }\n    };\n    ```", "```cpp\n    struct student\n    {\n    \u00a0\u00a0\u00a0\u00a0std::string name;\n    \u00a0\u00a0\u00a0\u00a0int standard;\n    };\n    std::ostream& operator<<(std::ostream& os, const student& s)\n    {\n    \u00a0\u00a0\u00a0\u00a0return (os << \"[Name: \" << s.name << \", Standard: \" << s.standard << \"]\");\n    }\n    ```", "```cpp\n    int main()\n    {\n    \u00a0\u00a0\u00a0\u00a0int nStudents;\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"Enter number of students in class 1: \";\n    \u00a0\u00a0\u00a0\u00a0std::cin >> nStudents;\n    dynamic_array<student> class1(nStudents);\n    for(int i = 0; i < nStudents; i++)\n    {\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"Enter name and class of student \" << i + 1 << \": \";\n    \u00a0\u00a0\u00a0\u00a0std::string name;\n    \u00a0\u00a0\u00a0\u00a0int standard;\n    \u00a0\u00a0\u00a0\u00a0std::cin >> name >> standard;\n    \u00a0\u00a0\u00a0\u00a0class1[i] = student{name, standard};\n    }\n    // Now, let's try to access the student out of range in the array\n    try\n    {\n    \u00a0\u00a0\u00a0\u00a0class1[nStudents] = student{\"John\", 8};\u00a0\u00a0// No exception, undefined behavior\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"class1 student set out of range without exception\" << std::endl;\n    \u00a0\u00a0\u00a0\u00a0class1.at(nStudents) = student{\"John\", 8};\u00a0\u00a0// Will throw exception\n    }\n    catch(...)\n    {\n    std::cout << \"Exception caught\" << std::endl;\n    }\n    auto class2 = class1;\u00a0\u00a0// Deep copy\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"Second class after initialized using first array: \" << class2.to_string() << std::endl;\n    \u00a0\u00a0\u00a0\u00a0auto class3 = class1 + class2;\n    \u00a0\u00a0\u00a0\u00a0// Combines both classes and creates a bigger one\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"Combined class: \";\n    \u00a0\u00a0\u00a0\u00a0std::cout << class3.to_string() << std::endl;\n    \u00a0\u00a0\u00a0\u00a0return 0;\n    }\n    ```", "```cpp\n    Enter number of students in class 1 : 3\n    Enter name and class of student 1: Raj 8\n    Enter name and class of student 2: Rahul 10\n    Enter name and class of student 3: Viraj 6\n    class1 student set out of range without exception\n    Exception caught\n    Second class after initialized using first array : [Name: Raj, Standard: 8], [Name: Rahul, Standard: 10], [Name: Viraj, Standard: 6]\n    Combined class : [Name: Raj, Standard: 8], [Name: Rahul, Standard: 10], [Name: Viraj, Standard: 6], [Name: Raj, Standard: 8], [Name: Rahul, Standard: 10], [Name: Viraj, Standard: 6]\n    ```", "```cpp\n    #include <iostream>\n    #include <array>\n    #include <type_traits>\n    ```", "```cpp\n    template<typename ... Args>\n    std::array<?,?> build_array(Args&&... args)\n    ```", "```cpp\n    template<typename ... Args>\n    auto build_array(Args&&... args) -> std::array<typename std::common_type<Args...>::type, ?>\n    {\n    \u00a0\u00a0\u00a0\u00a0using commonType = typename std::common_type<Args...>::type;\n    \u00a0\u00a0\u00a0\u00a0// Create array\n    }\n    ```", "```cpp\n    template< typename ... Args>\n    auto build_array(Args&&... args) -> std::array<typename std::common_type<Args...>::type, sizeof...(args)>\n    {\n    \u00a0\u00a0\u00a0\u00a0using commonType = typename std::common_type<Args...>::type;\n    \u00a0\u00a0\u00a0\u00a0return {std::forward<commonType>(args)...};\n    }\n    ```", "```cpp\n    int main()\n    {\n    \u00a0\u00a0\u00a0\u00a0auto data = build_array(1, 0u, 'a', 3.2f, false);\n    \u00a0\u00a0\u00a0\u00a0for(auto i: data)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << i << \" \";\n    \u00a0\u00a0\u00a0\u00a0std::cout << std::endl;\n    }\n    ```", "```cpp\n    1 0 97 3.2 0\n    ```", "```cpp\n    auto data2 = build_array(1, \"Packt\", 2.0);\n    ```", "```cpp\nstd::vector<int> vec;\n// Declares vector of size 0\nstd::vector<int> vec = {1, 2, 3, 4, 5};\n// Declares vector of size 5 with provided elements\nstd::vector<int> vec(10);\n// Declares vector of size 10\nstd::vector<int> vec(10, 5);\n// Declares vector of size 10 with each element's value = 5\n```", "```cpp\npush_back(val):\n\u00a0\u00a0\u00a0\u00a0if size < capacity\n\u00a0\u00a0\u00a0\u00a0// If vector has enough space to accommodate this element\n\u00a0\u00a0\u00a0\u00a0- Set element after the current last element = val\n\u00a0\u00a0\u00a0\u00a0- Increment size\n\u00a0\u00a0\u00a0\u00a0- return; \n\u00a0\u00a0\u00a0\u00a0if vector is already full\n\u00a0\u00a0\u00a0\u00a0- Allocate memory of size 2*size\n\u00a0\u00a0\u00a0\u00a0- Copy/Move elements to newly allocated memory\n\u00a0\u00a0\u00a0\u00a0- Make original data point to new memory\n\u00a0\u00a0\u00a0\u00a0- Insert the element at the end\n```", "```cpp\nstd::vector<int> vec = {1, 2, 3, 4, 5};\n```", "```cpp\nvec.insert(int.begin(), 0);\n```", "```cpp\nstd::vector<int> vec;\n// Empty vector {}\nvec.push_back(1);\n// Vector has one element {1}\nvec.push_back(2);\n// Vector has 2 elements {1, 2}\nvec.insert(vec.begin(), 0);\n// Vector has 3 elements {0, 1, 2}\nvec.insert(find(vec.begin(), vec.end(), 1), 4);\n// Vector has 4 elements {0, 4, 1, 2}\n```", "```cpp\nvec.pop_back();\n// Vector has now 9 elements {0, 1, 2, 3, 4, 5, 6, 7, 8}\nvec.erase(vec.begin());\n// vector has now 7 elements {1, 2, 3, 4, 5, 6, 7, 8}\nvec.erase(vec.begin() + 1, vec.begin() + 4);\n// Now, vector has 4 elements {1, 5, 6, 7, 8}\n```", "```cpp\nstd::forward_list<int> fwd_list = {1, 2, 3};\nfwd_list.push_front(0);\n// list becomes {0, 1, 2, 3}\nauto it = fwd_list.begin();\nfwd_list.insert_after(it, 5);\n// list becomes {0, 5, 1, 2, 3}\nfwd_list.insert_after(it, 6);\n// list becomes {0, 6, 5, 1, 2, 3}\n```", "```cpp\nstd::forward_list<int> fwd_list = {1, 2, 3, 4, 5};\nfwd_list.pop_front();\n// list becomes {2, 3, 4, 5}\nauto it = fwd_list.begin();\nfwd_list.erase_after(it);\n// list becomes {2, 4, 5}\nfwd_list.erase_after(it, fwd_list.end());\n// list becomes {2}\n```", "```cpp\n    #include <iostream>\n    #include <forward_list>\n    struct citizen\n    {\n    \u00a0\u00a0\u00a0\u00a0std::string name;\n    \u00a0\u00a0\u00a0\u00a0int age;\n    };\n    std::ostream& operator<<(std::ostream& os, const citizen& c)\n    {\n    \u00a0\u00a0\u00a0\u00a0return (os << \"[Name: \" << c.name << \", Age: \" << c.age << \"]\");\n    }\n    ```", "```cpp\n    int main()\n    {\n    \u00a0\u00a0std::forward_list<citizen> citizens = {{\"Raj\", 22}, {\"Rohit\", 25}, {\"Rohan\", 17}, {\"Sachin\", 16}};\n    \u00a0\u00a0auto citizens_copy = citizens;\n    \u00a0\u00a0std::cout << \"All the citizens: \";\n    \u00a0\u00a0for (const auto &c : citizens)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << c << \" \";\n    \u00a0\u00a0std::cout << std::endl;\n    ```", "```cpp\n    citizens.remove_if(\n    \u00a0\u00a0\u00a0\u00a0[](const citizen& c)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return (c.age < 18);\n    \u00a0\u00a0\u00a0\u00a0});\n    std::cout << \"Eligible citizens for voting: \";\n    for(const auto& c: citizens)\n    \u00a0\u00a0\u00a0\u00a0std::cout << c << \" \";\n    std::cout << std::endl;\n    ```", "```cpp\n    citizens_copy.remove_if(\n    \u00a0\u00a0\u00a0\u00a0[](const citizen& c)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0// Returns true if age is less than 18\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return (c.age != 17);\n    \u00a0\u00a0\u00a0\u00a0});\n    std::cout << \"Citizens that will be eligible for voting next year: \";\n    for(const auto& c: citizens_copy)\n    \u00a0\u00a0\u00a0\u00a0std::cout << c << \" \";\n    std::cout << std::endl;\n    }\n    ```", "```cpp\n    All the citizens: [Name: Raj, Age: 22] [Name: Rohit, Age: 25] [Name: Rohan, Age: 17] [Name: Sachin, Age: 16] \n    Eligible citizens for voting: [Name: Raj, Age: 22] [Name: Rohit, Age: 25] \n    Citizens that will be eligible for voting next year: [Name: Rohan, Age: 17] \n    ```", "```cpp\nstd::forward_list<int> list1 = {23, 0, 1, -3, 34, 32};\nlist1.sort();\n// list becomes {-3, 0, 1, 23, 32, 34}\nlist1.sort(std::greater<int>());\n// list becomes {34, 32, 23, 1, 0, -3}\n```", "```cpp\nstd::forward_list<int> list1 = {2, 53, 1, 0, 4, 10};\nlist1.reverse();\n// list becomes {2, 53, 1, 0, 4, 10}\nlist1 = {0, 1, 0, 1, -1, 10, 5, 10, 5, 0};\nlist1.sort();\n// list becomes {-1, 0, 0, 0, 1, 1, 5, 5, 10, 10}\nlist1.unique();\n// list becomes {-1, 0, 1, 5, 10}\nlist1 = {0, 1, 0, 1, -1, 10, 5, 10, 5, 0};\nlist1.sort();\n// list becomes {-1, 0, 0, 0, 1, 1, 5, 5, 10, 10}\n```", "```cpp\nlist1.unique([](int a, int b) { return (b - a) < 2; });\n// list becomes {-1, 1, 5, 10}\n```", "```cpp\n    #include <iostream>\n    #include <forward_list>\n    #include <vector>\n    int main()\n    {\n    ```", "```cpp\n    std::vector<std::string> vec = {\"Lewis Hamilton\", \"Lewis Hamilton\", \"Nico Roseberg\", \"Sebastian Vettel\", \"Lewis Hamilton\", \"Sebastian Vettel\", \"Sebastian Vettel\", \"Sebastian Vettel\", \"Fernando Alonso\"};\n    auto it = vec.begin();\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Constant time\n    std::cout << \"Latest winner is: \" << *it << std::endl;\n    it += 8;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Constant time\n    std::cout << \"Winner before 8 years was: \" << *it << std::endl;\n    advance(it, -3);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Constant time\n    std::cout << \"Winner before 3 years of that was: \" << *it << std::endl;\n    ```", "```cpp\n    std::forward_list<std::string> fwd(vec.begin(), vec.end());\n    auto it1 = fwd.begin();\n    std::cout << \"Latest winner is: \" << *it << std::endl;\n    advance(it1, 5);\u00a0\u00a0\u00a0// Time taken is proportional to the number of elements\n    std::cout << \"Winner before 5 years was: \" << *it << std::endl;\n    // Going back will result in compile time error as forward_list only allows us to move towards the end.\n    // advance(it1, -2);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Compiler error\n    }\n    ```", "```cpp\n    Latest winner is : Lewis Hamilton\n    Winner before 8 years was : Fernando Alonso\n    Winner before 3 years of that was : Sebastian Vettel\n    Latest winner is : Sebastian Vettel\n    Winner before 5 years was : Sebastian Vettel\n    ```", "```cpp\n    it1 += 2;\n    ```", "```cpp\n    no match for 'operator+=' (operand types are std::_Fwd_list_iterator<int>' and 'int')\n    ```", "```cpp\n    #include <iostream>\n    #include <algorithm>\n    struct singly_ll_node\n    {\n    \u00a0\u00a0\u00a0\u00a0int data;\n    \u00a0\u00a0\u00a0\u00a0singly_ll_node* next;\n    };\n    ```", "```cpp\n    class singly_ll\n    {\n    public:\n    \u00a0\u00a0\u00a0\u00a0using node = singly_ll_node;\n    \u00a0\u00a0\u00a0\u00a0using node_ptr = node*;\n    private:\n    \u00a0\u00a0\u00a0\u00a0node_ptr head;\n    ```", "```cpp\n    public:\n    void push_front(int val)\n    {\n    \u00a0\u00a0\u00a0\u00a0auto new_node = new node{val, NULL};\n    \u00a0\u00a0\u00a0\u00a0if(head != NULL)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new_node->next = head;\n    \u00a0\u00a0\u00a0\u00a0head = new_node;\n    }\n    void pop_front()\n    {\n    \u00a0\u00a0\u00a0\u00a0auto first = head;\n    \u00a0\u00a0\u00a0\u00a0if(head)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0head = head->next;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0delete first;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw \"Empty \";\n    }\n    ```", "```cpp\n    struct singly_ll_iterator\n    {\n    private:\n    \u00a0\u00a0\u00a0\u00a0node_ptr ptr;\n    public:\n    \u00a0\u00a0\u00a0\u00a0singly_ll_iterator(node_ptr p) : ptr(p)\n    \u00a0\u00a0\u00a0\u00a0{\n    }\n    int& operator*()\n    {\n    \u00a0\u00a0\u00a0\u00a0return ptr->data;\n    }\n    node_ptr get()\n    {\n    \u00a0\u00a0\u00a0\u00a0return ptr;\n    }\n    ```", "```cpp\n    singly_ll_iterator& operator++()\u00a0\u00a0\u00a0\u00a0\u00a0// pre-increment\n    {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ptr = ptr->next;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return *this;\n    }\n    singly_ll_iterator operator++(int)\u00a0\u00a0\u00a0\u00a0// post-increment\n    {\n    \u00a0\u00a0\u00a0\u00a0singly_ll_iterator result = *this;\n    ++(*this);\n    return result;\n    }\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0friend bool operator==(const singly_ll_iterator& left, const singly_ll_iterator& right)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return left.ptr == right.ptr;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0friend bool operator!=(const singly_ll_iterator& left, const singly_ll_iterator& right)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return left.ptr != right.ptr;\n    \u00a0\u00a0\u00a0\u00a0}\n    };\n    ```", "```cpp\n    singly_ll_iterator begin()\n    {\n    \u00a0\u00a0\u00a0\u00a0return singly_ll_iterator(head);\n    }\n    singly_ll_iterator end()\n    {\n    \u00a0\u00a0\u00a0\u00a0return singly_ll_iterator(NULL);\n    }\n    singly_ll_iterator begin() const\n    {\n    \u00a0\u00a0\u00a0\u00a0return singly_ll_iterator(head);\n    }\n    singly_ll_iterator end() const\n    {\n    \u00a0\u00a0\u00a0\u00a0return singly_ll_iterator(NULL);\n    }\n    ```", "```cpp\n    singly_ll() = default;\n    singly_ll(const singly_ll& other) : head(NULL)\n    {\n    \u00a0\u00a0\u00a0\u00a0if(other.head)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0head = new node;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0auto cur = head;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0auto it = other.begin();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while(true)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cur->data = *it;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0auto tmp = it;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0++tmp;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(tmp == other.end())\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cur->next = new node;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cur = cur->next;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0it = tmp;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    }\n    singly_ll(const std::initializer_list<int>& ilist) : head(NULL)\n    {\n    \u00a0\u00a0\u00a0\u00a0for(auto it = std::rbegin(ilist); it != std::rend(ilist); it++)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0push_front(*it);\n    }\n    };\n    ```", "```cpp\n    int main()\n    {\n    \u00a0\u00a0\u00a0\u00a0singly_ll sll = {1, 2, 3};\n    \u00a0\u00a0\u00a0\u00a0sll.push_front(0);\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"First list: \";\n    \u00a0\u00a0\u00a0\u00a0for(auto i: sll)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << i << \" \";\n    \u00a0\u00a0\u00a0\u00a0std::cout << std::endl;\n\n    \u00a0\u00a0\u00a0\u00a0auto sll2 = sll;\n    \u00a0\u00a0\u00a0\u00a0sll2.push_front(-1);\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"Second list after copying from first list and inserting -1 in front: \";\n    \u00a0\u00a0\u00a0\u00a0for(auto i: sll2)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << i << ' ';\u00a0\u00a0// Prints -1 0 1 2 3\n    \u00a0\u00a0\u00a0\u00a0std::cout << std::endl;\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"First list after copying - deep copy: \";\n    for(auto i: sll)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << i << ' ';\u00a0\u00a0// Prints 0 1 2 3\n    \u00a0\u00a0\u00a0\u00a0std::cout << std::endl;\n    }\n    ```", "```cpp\n    First list: 0 1 2 3\n    Second list after copying from first list and inserting -1 in front: -1 0 1 2 3 \n    First list after copying - deep copy: 0 1 2 3\n    ```", "```cpp\nstruct doubly_linked_list\n{\n\u00a0\u00a0\u00a0\u00a0int data;\n\u00a0\u00a0\u00a0\u00a0doubly_linked_list *next, *prev;\n};\n```", "```cpp\n    #include <iostream>\n    #include <list>\n    int main()\n    {\n    ```", "```cpp\n    std::list<int> list1 = {1, 2, 3, 4, 5};\n    list1.push_back(6);\n    // list becomes {1, 2, 3, 4, 5, 6}\n    list1.insert(next(list1.begin()), 0);\n    // list becomes {1, 0, 2, 3, 4, 5, 6}\n    list1.insert(list1.end(), 7);\n    // list becomes {1, 0, 2, 3, 4, 5, 6, 7}\n    ```", "```cpp\n    list1.pop_back();\n    // list becomes {1, 0, 2, 3, 4, 5, 6}\n    std::cout << \"List after insertion & deletion functions: \";\n    for(auto i: list1)\n    \u00a0\u00a0\u00a0\u00a0std::cout << i << \" \";\n    }\n    ```", "```cpp\n    List after insertion & deletion functions: 1 0 2 3 4 5 6\n    ```", "```cpp\nstd::vector<int> vec = {1, 2, 3, 4, 5};\nauto it4 = vec.begin() + 4;\n// it4 now points to vec[4]\nvec.insert(vec.begin() + 2, 0);\n// vec becomes {1, 2, 0, 3, 4, 5}\n```", "```cpp\nstd::list<int> lst = {1, 2, 3, 4, 5};\nauto l_it4 = next(lst.begin(), 4);\nlst.insert(next(lst.begin(), 2), 0);\n// l_it4 remains valid\n```", "```cpp\nstd::deque<int> deq = {1, 2, 3, 4, 5};\ndeq.push_front(0);\n// deque becomes {0, 1, 2, 3, 4, 5}\ndeq.push_back(6);\n// deque becomes {0, 1, 2, 3, 4, 5, 6}\ndeq.insert(deq.begin() + 2, 10);\n// deque becomes {0, 1, 10, 2, 3, 4, 5, 6}\ndeq.pop_back();\n// deque becomes {0, 1, 10, 2, 3, 4, 5}\ndeq.pop_front();\n// deque becomes {1, 10, 2, 3, 4, 5}\ndeq.erase(deq.begin() + 1);\n// deque becomes {1, 2, 3, 4, 5}\ndeq.erase(deq.begin() + 3, deq.end());\n// deque becomes {1, 2, 3}\n```", "```cpp\nstd::deque<int> stk;\nstk.push_back(1);\u00a0\u00a0// Pushes 1 on the stack = {1}\nstk.push_back(2);\u00a0\u00a0// Pushes 2 on the stack = {1, 2}\nstk.pop_back();\u00a0\u00a0\u00a0\u00a0// Pops the top element off the stack = {1}\nstk.push_front(0);\u00a0// This operation should not be allowed for a stack\nstd::stack<int> stk;\nstk.push(1);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Pushes 1 on the stack = {1}\nstk.push(2);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Pushes 2 on the stack = {1, 2}\nstk.pop();\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Pops the top element off the stack = {1}\nstk.push_front(0);\u00a0// Compilation error\n```", "```cpp\nstd::stack<int, std::vector<int>> stk;\nstd::stack<int, std::list<int>> stk;\n```", "```cpp\nstd::queue<int> q;\nq.push(1);\u00a0\u00a0// queue becomes {1}\nq.push(2);\u00a0\u00a0// queue becomes {1, 2}\nq.push(3);\u00a0\u00a0// queue becomes {1, 2, 3}\nq.pop();\u00a0\u00a0\u00a0\u00a0// queue becomes {2, 3}\nq.push(4);\u00a0\u00a0// queue becomes {2, 3, 4}\n```"]