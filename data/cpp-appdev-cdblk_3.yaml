- en: Chapter 3. App Debugging with Code::Blocks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章 Code::Blocks 应用程序调试
- en: Debugging is an essential step in any app development. It is also an essential
    part of an IDE and Code::Blocks is no exception. It offers a vast set of features
    to make app debugging easier.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 调试是应用程序开发中的一个重要步骤。它也是 IDE 的一个重要部分，Code::Blocks 也不例外。它提供了一系列功能，使应用程序调试变得更加容易。
- en: In this chapter, we will learn about app debugging with Code::Blocks. We'll
    begin with a simple app to show various features of Code::Blocks.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习使用 Code::Blocks 进行应用程序调试。我们将从一个简单的应用程序开始，展示 Code::Blocks 的各种功能。
- en: Introduction to debugging in Code::Blocks
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Code::Blocks 中的调试简介
- en: 'Code::Blocks supports two debuggers:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Code::Blocks 支持两种调试器：
- en: '**GNU Debugger** or, as it is popularly known as **GDB**'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GNU 调试器**，通常称为 **GDB**'
- en: Microsoft **Console Debugger** or **CDB**
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微软 **控制台调试器** 或 **CDB**
- en: Code::Blocks installer bundles GDB together with GCC compiler. CDB can be downloaded
    and installed together with installation of Windows **Software Development Kit**
    (**SDK**) for Windows.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Code::Blocks 安装程序将 GDB 与 GCC 编译器捆绑在一起。CDB 可以与 Windows **软件开发工具包**（**SDK**）的安装一起下载和安装。
- en: Note
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Windows SDK is a collection of tools offered by Microsoft for Microsoft Windows
    platform. It consists of compiler, headers, libraries, debugger, samples, documentation,
    and tools required to develop applications for .NET Framework.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Windows SDK 是微软为 Windows 平台提供的一套工具集。它包括编译器、头文件、库、调试器、示例、文档和开发 .NET Framework
    应用程序所需的工具。
- en: 'CDB can be downloaded and installed from the following link:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: CDB 可以从以下链接下载和安装：
- en: '[http://msdn.microsoft.com/en-us/library/windows/hardware/gg463009.aspx](http://msdn.microsoft.com/en-us/library/windows/hardware/gg463009.aspx)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://msdn.microsoft.com/en-us/library/windows/hardware/gg463009.aspx](http://msdn.microsoft.com/en-us/library/windows/hardware/gg463009.aspx)'
- en: Our focus will be on GDB throughout this chapter. Debugger related functions
    are available via the **Debug** menu in Code::Blocks as shown in the following
    screenshot. A debugger toolbar is also provided for quicker access to commonly
    used functions.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将重点介绍 GDB。在 Code::Blocks 中，调试器相关功能可通过**调试**菜单进行访问，如下面的屏幕截图所示。调试器工具栏也提供了常用功能的快速访问。
- en: '![Introduction to debugging in Code::Blocks](img/3415_03_01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![Code::Blocks 中的调试简介](img/3415_03_01.jpg)'
- en: We can access several debugger related windows by navigating to **Debug** |
    **Debugging windows** menu options. The following screenshot shows available menu
    options.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过导航到**调试** | **调试窗口**菜单选项来访问几个与调试器相关的窗口。下面的屏幕截图显示了可用的菜单选项。
- en: '![Introduction to debugging in Code::Blocks](img/3415_03_02.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![Code::Blocks 中的调试简介](img/3415_03_02.jpg)'
- en: 'We can get more information about running process from **Debug** | **Information**
    and then clicking on appropriate menu option. The following screenshot shows available
    menu options:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从**调试** | **信息**中获取有关运行进程的更多信息，然后点击适当的菜单选项。下面的屏幕截图显示了可用的菜单选项：
- en: '![Introduction to debugging in Code::Blocks](img/3415_03_03.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![Code::Blocks 中的调试简介](img/3415_03_03.jpg)'
- en: 'Debugger settings can be accessed by navigating to **Settings** | **Debugger**
    menu option. The following screenshot shows the debugger settings dialog:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过导航到**设置** | **调试器**菜单选项来访问调试器设置。下面的屏幕截图显示了调试器设置对话框：
- en: '![Introduction to debugging in Code::Blocks](img/3415_03_04.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![Code::Blocks 中的调试简介](img/3415_03_04.jpg)'
- en: 'Select **Default** in the tree on the left-hand side and more debugger related
    options will be available as shown in the following screenshot:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧的树中选择**默认**，将会显示更多与调试器相关的选项，如下面的屏幕截图所示：
- en: '![Introduction to debugging in Code::Blocks](img/3415_03_05.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![Code::Blocks 中的调试简介](img/3415_03_05.jpg)'
- en: Select the **Evaluate expressions under cursor** option shown in the previous
    screenshot. This option will provide a tooltip containing details whenever cursor
    is moved over a variable.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 选择前面屏幕截图中显示的**评估光标下的表达式**选项。该选项将在光标移动到变量上时提供包含详细信息的工具提示。
- en: First app debugging
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 首次应用程序调试
- en: 'Let us create a new console project `App7` and replace code inside `main.cpp`
    file with following code:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个名为 `App7` 的新控制台项目，并将`main.cpp`文件中的代码替换为以下代码：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Ensure that **Debug** target is selected in compiler toolbar and then compile
    it by clicking compile button. `App7` will be compiled for debugging.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在编译工具栏中选择了**调试**目标，然后点击编译按钮进行编译。`App7` 将被编译以进行调试。
- en: Before we ask GDB to debug we have to create breakpoints for it. After the code
    is typed in editor window Code::Blocks will look similar to the following screenshot.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们要求 GDB 进行调试之前，我们必须为其创建断点。在编辑器窗口中输入代码后，Code::Blocks 将看起来类似于下面的屏幕截图。
- en: '![First app debugging](img/3415_03_06.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![首次应用程序调试](img/3415_03_06.jpg)'
- en: To set a breakpoint move cursor to the left side of editor window next to the
    indicated line numbers. Now the cursor will change to a right-tilted cursor. Pause
    mouse and left-click. A breakpoint will be set there and will be indicated by
    a red circle. The following screenshot shows that a breakpoint has been set at
    line number `4`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置断点，将光标移动到编辑器窗口左侧，靠近指示的行号。现在光标将变成右倾斜的光标。暂停鼠标并左键单击。断点将被设置在那里，并将以红色圆圈表示。下面的屏幕截图显示了在行号
    `4` 处设置了一个断点。
- en: '![First app debugging](img/3415_03_07.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![首次应用程序调试](img/3415_03_07.jpg)'
- en: 'Next follow same method and create breakpoints at line numbers 5, 6 and 9\.
    Editor window will now look similar to the following screenshot:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '接下来按照相同的方法，在行号 5、6 和 9 处创建断点。编辑器窗口现在看起来类似于下面的屏幕截图： '
- en: '![First app debugging](img/3415_03_08.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![首次应用程序调试](img/3415_03_08.jpg)'
- en: All breakpoints are now visually indicated in the editor window.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 所有断点现在都在编辑器窗口中以可视方式指示。
- en: 'We can now start debugging by clicking on the **Debug/Continue** button in
    debugger toolbar. Alternatively the *F8* key may be used to start debugging. The
    following window may appear:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以通过点击调试器工具栏中的**调试/继续**按钮来开始调试。也可以使用 *F8* 键开始调试。可能会出现下面的窗口：
- en: '![First app debugging](img/3415_03_10.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![首次应用程序调试](img/3415_03_10.jpg)'
- en: This highlights that default layout of Code::Blocks has changed as the **Debugger
    log** window has received focus (refer to the preceding screenshot). Select the
    **Don't annoy me again!** checkbox and then click on **No** button to stop it.
    It won't appear again. Let's look at the entire IDE now.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这突显了Code::Blocks的默认布局已经改变，因为**调试器日志**窗口已经获得了焦点（参考前面的截图）。选择“**不再打扰我**”复选框，然后单击“**否**”按钮停止它。它不会再出现。现在让我们来看看整个IDE。
- en: In the following screenshot execution has stopped at line number `4` and the
    cursor has changed to a yellow colored triangle. This indicates that debugger
    has stopped execution at that position. Debugger log window will also be updated
    when we continue debugging.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下截图中，执行已经在第`4`行停止，光标已经变成了黄色的三角形。这表示调试器已经在那个位置停止执行。当我们继续调试时，调试器日志窗口也将被更新。
- en: '![First app debugging](img/3415_03_11.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![第一个应用程序调试](img/3415_03_11.jpg)'
- en: Before continuing with debugging we take a look at debugger related features
    of Code::Blocks. **CPU Registers** can be examined by navigating to the **Debug**
    | **Debugging windows** | **CPU Registers** menu option. A register is a tiny
    but a high speed buffer embedded within the processor hardware.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续调试之前，我们先看一下Code::Blocks的调试器相关功能。可以通过导航到**调试** | **调试窗口** | **CPU寄存器**菜单选项来检查**CPU寄存器**。寄存器是嵌入在处理器硬件中的一个小型但高速的缓冲区。
- en: '![First app debugging](img/3415_03_12.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![第一个应用程序调试](img/3415_03_12.jpg)'
- en: 'Now navigate to the **Debug** | **Debugging windows** | **Disassembly** menu
    option; this can be used to display assembly language representation of current
    C++ code. The following screenshot shows the **Disassembly** window and also indicates
    the position where execution has stopped. Clicking on the **Mixed Mode** checkbox
    will superimpose C++ code and corresponding assembly language code:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在导航到**调试** | **调试窗口** | **反汇编**菜单选项；这可以用来显示当前C++代码的汇编语言表示。以下截图显示了**反汇编**窗口，并指示了执行停止的位置。单击“**混合模式**”复选框将叠加C++代码和相应的汇编语言代码：
- en: '![First app debugging](img/3415_03_13.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![第一个应用程序调试](img/3415_03_13.jpg)'
- en: This style of assembly language is known as **AT&T** style. We can switch to
    **Intel** style assembly language in the disassembly dialog by navigating to the
    **Settings** | **Debugger** | **GDB/Debugger** | **Default** menu option and selecting
    the **Intel** option in **Choose disassembly flavor** (GDB only) combo box. Now
    close the previously opened disassembly dialog and reopen it. It will now show
    disassembly in Intel flavor as shown in the following screenshot. Please note
    that the choice of AT&T or Intel style is up to the preference of a developer.
    It has no effect on the debugging process.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这种汇编语言风格被称为**AT&T**风格。我们可以通过导航到**设置** | **调试器** | **GDB/调试器** | **默认**菜单选项，并在**选择反汇编风格**（仅限GDB）组合框中选择**Intel**选项，来切换到**Intel**风格的汇编语言。现在关闭先前打开的反汇编对话框，然后重新打开它。它现在将以Intel风格显示反汇编，如下面的截图所示。请注意，AT&T或Intel风格的选择取决于开发人员的偏好。它对调试过程没有影响。
- en: '![First app debugging](img/3415_03_14.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![第一个应用程序调试](img/3415_03_14.jpg)'
- en: 'Currently running threads can be examined by navigating to **Debug** | **Debugging
    windows** | **Running threads** menu option. This app is single threaded and thus
    in the following screenshot we find that only one thread is running:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过导航到**调试** | **调试窗口** | **运行线程**菜单选项来检查当前运行的线程。这个应用程序是单线程的，因此在以下截图中我们发现只有一个线程在运行：
- en: '![First app debugging](img/3415_03_15.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![第一个应用程序调试](img/3415_03_15.jpg)'
- en: 'Stack frame can be examined by navigating to **Debug** | **Information** |
    **Current stack frame** menu option. Call stack is a data structure that stores
    information about current running function. The following screenshot shows the
    stack frame information of current process:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过导航到**调试** | **信息** | **当前堆栈帧**菜单选项来检查堆栈帧。调用堆栈是一个存储有关当前运行函数的信息的数据结构。以下截图显示了当前进程的堆栈帧信息：
- en: '![First app debugging](img/3415_03_16.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![第一个应用程序调试](img/3415_03_16.jpg)'
- en: Note
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Call stack is a data structure that works on the principle of (**Last In First
    Out**) and stores information about active subroutines or program. Stack frame
    is part of call stack that stores information (local variables, return address
    and function parameters) of a single subroutine or function.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 调用堆栈是一个根据（**后进先出**）原则工作的数据结构，用于存储有关活动子例程或程序的信息。堆栈帧是调用堆栈的一部分，用于存储单个子例程或函数的信息（局部变量、返回地址和函数参数）。
- en: Whenever an app is run on Windows platform several **Dynamic Link Libraries**
    (**DLL**) or dynamic libraries are loaded in memory. DLL provide functions that
    are accessible by other apps without including a copy of function code inside
    the apps using it. Loaded libraries can be examined by navigating to **Debug**
    | **Information** | **Loaded libraries** menu option.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows平台上运行应用程序时，会加载几个**动态链接库**（**DLL**）或动态库到内存中。DLL提供的函数可以被其他应用程序访问，而不需要在使用它的应用程序中包含函数代码的副本。加载的库可以通过导航到**调试**
    | **信息** | **加载的库**菜单选项来检查。
- en: 'The following screenshot shows the loaded libraries for our app:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了我们应用程序的加载库：
- en: '![First app debugging](img/3415_03_17.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![第一个应用程序调试](img/3415_03_17.jpg)'
- en: The asterisk next to the DLL name indicates whether their source can be debugged.
    We find that none of them allows debugging.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: DLL名称旁边的星号表示它们的源代码是否可以进行调试。我们发现它们都不允许调试。
- en: Now we'll continue with debugging after our introduction to several debugger
    related windows. We'll also learn to set watch on a variable. Click on the **Continue**
    button and debugger will stop at line number `5`. Right-click on `radius` variable
    in editor window and then choose watch 'radius' menu option.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们介绍了几个与调试器相关的窗口之后，我们将继续进行调试。我们还将学习如何在变量上设置监视。单击“**继续**”按钮，调试器将在第`5`行停止。在编辑器窗口中右键单击`radius`变量，然后选择“监视'radius'”菜单选项。
- en: '![First app debugging](img/3415_03_18.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![第一个应用程序调试](img/3415_03_18.jpg)'
- en: 'This will create a watch on the variable `radius`. A watch can be defined as
    an instruction to the debugger to track a variable during execution of an app.
    A separate window with the variable under watch will now be opened as shown in
    the following screenshot. Watch window can also be opened via **Debug** | **Debugging
    Windows** | **Watches** menu option:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在变量`radius`上创建一个监视。监视可以定义为调试器在应用程序执行期间跟踪变量的指令。现在将打开一个带有被监视变量的单独窗口，如下面的屏幕截图所示。观察窗口也可以通过**调试**
    | **调试窗口** | **监视**菜单选项打开：
- en: '![First app debugging](img/3415_03_19.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![第一个应用程序调试](img/3415_03_19.jpg)'
- en: 'If we click on the **Continue** button again then execution of app will advance
    to next line. This will update content of the `radius` variable in our app. Watch
    window will also update its content showing current value of the radius variable
    as shown in the following screenshot:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们再次点击**继续**按钮，应用程序的执行将前进到下一行。这将更新我们应用程序中`radius`变量的内容。观察窗口也将更新其内容，显示`radius`变量的当前值，如下面的屏幕截图所示：
- en: '![First app debugging](img/3415_03_20.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![第一个应用程序调试](img/3415_03_20.jpg)'
- en: 'At this step we''ll learn about another type of breakpoint known as **data
    breakpoint**. Right-click on the `radius` variable in line number `5` in editor
    window shown in the following screenshot and then click on the **Add data breakpoint
    for ''radius''** menu option:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一步，我们将学习另一种称为**数据断点**的断点类型。在编辑器窗口中右键单击第`5`行的`radius`变量，然后单击**为'radius'添加数据断点**菜单选项：
- en: '![First app debugging](img/3415_03_21.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![第一个应用程序调试](img/3415_03_21.jpg)'
- en: Select **Break on read or write** option as in the following screenshot and
    click on the **OK** button. By doing this we are instructing GDB to pause execution
    whenever the `radius` variable is read or written.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 选择如下屏幕截图中的**读取或写入时中断**选项，然后单击**确定**按钮。通过这样做，我们指示GDB在每次读取或写入`radius`变量时暂停执行。
- en: '![First app debugging](img/3415_03_22.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![第一个应用程序调试](img/3415_03_22.jpg)'
- en: A data breakpoint will now be created. However data breakpoint is not shown
    visually in editor window. It can be verified from **Breakpoints** window by navigating
    to the **Debug** | **Debugging windows** | **Breakpoints** menu option. Last line
    in the following screenshot shows that a data breakpoint has been set.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将创建一个数据断点。但是数据断点在编辑器窗口中不会以可视方式显示。可以通过导航到**调试** | **调试窗口** | **断点**菜单选项，从**断点**窗口验证。下面屏幕截图中的最后一行显示已设置了数据断点。
- en: '![First app debugging](img/3415_03_23.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![第一个应用程序调试](img/3415_03_23.jpg)'
- en: Click on the **Continue** button in debugger toolbar or press the *F8* key and
    execution will continue. It will now stop at line `7` due to the data breakpoint
    we have set in previous step. Variable `radius` is being read at this line and
    `gdb` has stopped execution as data breakpoint condition has been met.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 单击调试工具栏中的**继续**按钮，或按*F8*键，执行将继续。由于我们在上一步中设置的数据断点，它现在将在第`7`行停止。在这一行读取变量`radius`，`gdb`已经停止执行，因为数据断点条件已经满足。
- en: '![First app debugging](img/3415_03_24.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![第一个应用程序调试](img/3415_03_24.jpg)'
- en: Click on the **Continue** button to continue execution of app and subsequently
    it will stop at line number `9`. If we continue clicking on the **Continue** button
    app, execution will stop several times due to the data breakpoint we have set
    earlier. This is normal and in order to stop execution immediately click on the
    **Stop** button in debugger toolbar or press *Shift* + *F8* key to stop execution.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 单击**继续**按钮以继续应用程序的执行，随后它将停在第`9`行。如果我们继续点击**继续**按钮，应用程序的执行将由于我们之前设置的数据断点而多次停止。这是正常的，为了立即停止执行，单击调试工具栏中的**停止**按钮，或按*Shift*
    + *F8*键停止执行。
- en: This completes our introduction to app debugging with Code::Blocks.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了我们对使用Code::Blocks进行应用程序调试的介绍。
- en: Multiple app debugging
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多个应用程序调试
- en: Real life projects are large in size and may consist of several sub-projects.
    It is essential that an IDE allows debugging of large apps spanning across several
    projects. With Code::Blocks we can do it easily.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现实生活中的项目规模庞大，可能包含多个子项目。IDE允许跨多个项目调试大型应用程序是至关重要的。使用Code::Blocks，我们可以轻松实现这一点。
- en: To learn multiple app debugging we'll create two projects—first project a DLL
    project and second one is a console project that depends upon first DLL project.
    Then save both projects under same workspace named `App8`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 为了学习多个应用程序的调试，我们将创建两个项目——第一个项目是一个DLL项目，第二个项目是一个依赖于第一个DLL项目的控制台项目。然后将这两个项目保存在名为`App8`的同一工作区下。
- en: 'Go to **File** | **New** | **Project** | **Dynamic Link Library** menu option
    to create a DLL project. Name this project `libobject`. Now rename the `libobject`
    project files. We''ll rename `main.h` file to `dllmain.h` and `main.cpp` to `dllmain.cpp`
    file. To do this, close all open editor files and right-click on the file name
    in the project tree as shown in the following screenshot:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 转到**文件** | **新建** | **项目** | **动态链接库**菜单选项以创建一个DLL项目。将此项目命名为`libobject`。现在重命名`libobject`项目文件。我们将`main.h`文件重命名为`dllmain.h`，将`main.cpp`文件重命名为`dllmain.cpp`文件。要执行此操作，请关闭所有打开的编辑器文件，然后在项目树中右键单击文件名，如下面的屏幕截图所示：
- en: '![Multiple app debugging](img/3415_03_26.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![多个应用程序调试](img/3415_03_26.jpg)'
- en: 'Enter new file name in the dialog box shown in following screenshot:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的屏幕截图中的对话框中输入新的文件名：
- en: '![Multiple app debugging](img/3415_03_27.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![多个应用程序调试](img/3415_03_27.jpg)'
- en: This will avoid ambiguities in file names. Now replace code inside `dllmain.h`
    file with the following code.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这将避免文件名的歧义。现在用以下代码替换`dllmain.h`文件中的代码。
- en: '[PRE1]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: A DLL on Windows require special decoration in order to export it from a dynamic
    link library. This decoration statement changes while it is exported and at the
    time it is imported. Decoration `__declspec(dllexport)` is used to export functions
    from a DLL and `__declspec(dllimport)` is used to import function from another
    DLL. Decorations instruct linker to export or import a variable/function/object
    name with or without name mangling. A preprocessor define `DLL_IMP_EXPORT` is
    used to indicate compiler whether a function or a class is being exported or imported.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，DLL需要特殊的修饰才能从动态链接库中导出。这个修饰语句在导出时会发生变化，并且在导入时也会发生变化。修饰`__declspec(dllexport)`用于从DLL中导出函数，`__declspec(dllimport)`用于从另一个DLL中导入函数。修饰指示链接器导出或导入一个带有或不带有名称修饰的变量/函数/对象名称。预处理器定义`DLL_IMP_EXPORT`用于指示编译器函数或类是被导出还是被导入。
- en: C++ allows function/method overloading. It is achieved by introducing name mangling
    in the generated code. Name mangling is a process in which a function name is
    converted to a unique name based on function parameters, return type, and other
    parameters. Name mangling is compiler dependent and as a result any DLL written
    is C++ can't be used directly with another compiler.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: C++允许函数/方法重载。这是通过在生成的代码中引入名称修饰来实现的。名称修饰是一个过程，其中函数名根据函数参数、返回类型和其他参数转换为唯一的名称。名称修饰是与编译器相关的，因此任何用C++编写的DLL都不能直接与另一个编译器一起使用。
- en: C++ introduces name mangling by default for all functions. We can stop name
    mangling using `extern "C"` keyword and are using it to stop name mangling for
    the exported `SayHello()` function. By stopping name mangling we can use a DLL
    written in C++ and compiled with one compiler to be used with another compiler.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: C++默认引入了所有函数的名称修饰。我们可以使用`extern "C"`关键字来停止名称修饰，并且正在使用它来停止导出的`SayHello()`函数的名称修饰。通过停止名称修饰，我们可以使用在一个编译器中编写并编译的DLL与另一个编译器一起使用。
- en: We have defined a class `base` and this `base` class has a member function `Set()`
    and it sets two internal variables. There is a pure virtual function named `Area()`
    that must be redefined derived classes. A **pure virtual function** is a function
    that has not been implemented in the base class. If a pure virtual function is
    called in any app it may result in a crash.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了一个名为`base`的类，这个`base`类有一个成员函数`Set()`，它设置了两个内部变量。还有一个名为`Area()`的纯虚函数，必须在派生类中重新定义。**纯虚函数**是在基类中没有被实现的函数。如果在任何应用程序中调用了纯虚函数，可能会导致崩溃。
- en: However, this `base` class is not decorated with `DLL_IMP_EXPORT`. This means
    it will not be exported in DLL and no outside app can use this class.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个`base`类没有用`DLL_IMP_EXPORT`修饰。这意味着它不会被导出到DLL中，也没有外部应用程序可以使用这个类。
- en: In order to use feature of the `base` class we'll create two derived classes.
    Class `Rectangle` and `Triangle`, these are derived publicly from the `base` class.
    We have used inheritance of classes here. These classes are declared with decoration
    `DLL_IMP_EXPORT`. Thus these two classes will be exported in the resulting DLL.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用`base`类的特性，我们将创建两个派生类。类`Rectangle`和`Triangle`，它们都是从`base`类公开派生的。我们在这里使用了类的继承。这些类被声明为`DLL_IMP_EXPORT`。因此，这两个类将被导出到生成的DLL中。
- en: 'Now replace code inside the `dllmain.cpp` file of the `libobject` project with
    the following code:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在用以下代码替换`libobject`项目的`dllmain.cpp`文件中的代码：
- en: '[PRE2]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Code in the `dllmain.cpp` file mainly defines all the code of publicly exported
    function. There is a `DllMain()` function. It may be used to do any initialization
    or de-initialization for the DLL.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`dllmain.cpp`文件中的代码主要定义了所有公开导出函数的代码。有一个`DllMain()`函数。它可以用于对DLL进行任何初始化或去初始化。'
- en: 'Next create a console app named `App8`. Now rename workspace as `App8` and
    save workspace as `App8`. This console app will use functions defined in `libobject.dll`.
    Replace code inside the `main.cpp` file of `App8` with the following code:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来创建一个名为`App8`的控制台应用程序。现在将工作区重命名为`App8`，并将工作区保存为`App8`。这个控制台应用程序将使用`libobject.dll`中定义的函数。用以下代码替换`App8`的`main.cpp`文件中的代码：
- en: '[PRE3]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, we have to prepare our `App8` project to use this DLL. To do so go to
    **Project** | **Build options** menu option. Select `App8` in the project tree
    and then click on **Search directories** tab. Then add `..\libobject` directory
    to the list in the **Compiler** tab. This instructs compiler to search for header
    files in that directory:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要准备我们的`App8`项目来使用这个DLL。为此，转到**项目** | **构建选项**菜单选项。在项目树中选择`App8`，然后点击**搜索目录**选项卡。然后在**编译器**选项卡中添加`..\libobject`目录到列表中。这指示编译器在该目录中搜索头文件：
- en: '![Multiple app debugging](img/3415_03_28.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![多应用程序调试](img/3415_03_28.jpg)'
- en: 'We also need to point linker to the directory where we have kept import library
    of `libobject.dll` file. To do so select the **Debug** target and click on the
    **Search directories** tab. Then click on the **Linker** tab and add `..\libobject\bin\Debug`
    folder to the list:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要指向链接器所在的目录，该目录存放了`libobject.dll`文件的导入库。为此，选择**调试**目标，点击**搜索目录**选项卡。然后点击**链接器**选项卡，将`..\libobject\bin\Debug`文件夹添加到列表中：
- en: '![Multiple app debugging](img/3415_03_29.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![多应用程序调试](img/3415_03_29.jpg)'
- en: We have to instruct linker to find references of symbols found in `libobject.dll`
    file. To do so click on the **Linker settings** tab and add `libobject.a` to the
    **Link libraries** list.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须指示链接器查找`libobject.dll`文件中找到的符号引用。为此，点击**链接器设置**选项卡，并将`libobject.a`添加到**链接库**列表中。
- en: '![Multiple app debugging](img/3415_03_30.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![多应用程序调试](img/3415_03_30.jpg)'
- en: We'll set up project dependencies in this step. Go to **Project** | **Properties…**
    menu option and then click on the **Project dependencies…** button. Click on the
    `libobject` and then click on the **Close** button. Finally click **OK** button
    to close the **Project/targets** options window. This completes preparation of
    the `App8` console app.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在这一步设置项目依赖关系。转到**项目** | **属性...**菜单选项，然后点击**项目依赖关系...**按钮。点击`libobject`，然后点击**关闭**按钮。最后点击**确定**按钮关闭**项目/目标**选项窗口。这完成了`App8`控制台应用程序的准备工作。
- en: '![Multiple app debugging](img/3415_03_31.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![多应用程序调试](img/3415_03_31.jpg)'
- en: Now go to **Build** | **Build workspace** menu option. This will build the `libobject`
    project first and subsequently `App8` will be compiled.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在转到**构建** | **构建工作区**菜单选项。这将首先构建`libobject`项目，然后编译`App8`。
- en: 'In order to learn debugging multiple projects we''ll set breakpoints at the
    following line number:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 为了学习调试多个项目，我们将在以下行号设置断点：
- en: Line number 11, 15, 19 in the `dllmain.cpp` file, `libobject` project
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dllmain.cpp`文件中的第11、15、19行，`libobject`项目'
- en: Line number 7, 9, 10, 12 in the `main.cpp` file, `App8` project
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`main.cpp`文件中的第7、9、10、12行，`App8`项目'
- en: 'Breakpoints can be verified from **Breakpoints** window shown in the following
    screenshot:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 断点可以从以下截图中显示的**断点**窗口中进行验证：
- en: '![Multiple app debugging](img/3415_03_32.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![多应用程序调试](img/3415_03_32.jpg)'
- en: Note that DLLs can't run as a standalone process and require a host application
    to load them into memory. In order to debug a DLL we have to debug the host application
    that loads and runs it. Alternatively we can specify a host application (in our
    case `App8.exe`) for debugging by navigating to **Project** | **Set programs'
    arguments…** menu option.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，DLL 不能作为独立进程运行，需要主机应用程序将其加载到内存中。为了调试 DLL，我们必须调试加载和运行它的主机应用程序。或者，我们可以通过导航到**项目**
    | **设置程序参数...**菜单选项来指定一个主机应用程序（在我们的例子中是`App8.exe`）进行调试。
- en: 'We''ll use first approach and let our host app to load `libobject.dll`, then
    use it to debug both `libobject.dll` and `App8.exe` file. Ensure that `App8` project
    is activated in the project tree and then click on the debug/continue button in
    debugger toolbar:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用第一种方法，让我们的主机应用程序加载`libobject.dll`，然后使用它来调试`libobject.dll`和`App8.exe`文件。确保在项目树中激活了`App8`项目，然后在调试器工具栏中点击调试/继续按钮：
- en: '![Multiple app debugging](img/3415_03_34.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![多应用程序调试](img/3415_03_34.jpg)'
- en: In the preceding screenshot execution has stopped at line number `19` of the
    `dllmain.cpp` file. Whenever `DllMain()` is exported it becomes the first function
    to be called during the loading/unloading of any DLL. As a result execution stops
    there.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述截图中，执行已经停在`dllmain.cpp`文件的第19行。每当`DllMain()`被导出时，它都成为任何 DLL 加载/卸载过程中被调用的第一个函数。因此，执行会在那里停止。
- en: 'Loaded libraries window in the following screenshot confirms that `libobject.dll`
    has been loaded in memory and this library can be debugged:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图中的加载的库窗口确认了`libobject.dll`已经加载到内存中，并且这个库可以进行调试：
- en: '![Multiple app debugging](img/3415_03_33.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![多应用程序调试](img/3415_03_33.jpg)'
- en: Click on the **Continue** button to continue. Execution will now pause at line
    number `7` of the `main.cpp` file.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**继续**按钮继续。执行现在将在`main.cpp`文件的第`7`行暂停。
- en: '![Multiple app debugging](img/3415_03_35.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![多应用程序调试](img/3415_03_35.jpg)'
- en: 'Click on the **Continue** button twice. Execution will stop at line number
    `10` of the `main.cpp` file as shown in the following screenshot:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 再次点击**继续**按钮两次。执行将停在`main.cpp`文件的第`10`行，如下截图所示：
- en: '![Multiple app debugging](img/3415_03_36.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![多应用程序调试](img/3415_03_36.jpg)'
- en: Click on the **Continue** button again and execution will stop at line number
    `11` of `dllmain.cpp` file.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 再次点击**继续**按钮，执行将停在`dllmain.cpp`文件的第`11`行。
- en: Debugger is now debugging `libobject` project's source file, which is a separate
    project. If cursor is hovered `m_height` variable debugger will evaluate this
    variable and show its value.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 调试器现在正在调试`libobject`项目的源文件，这是一个独立的项目。如果光标悬停在`m_height`变量上，调试器将评估这个变量并显示它的值。
- en: '![Multiple app debugging](img/3415_03_37.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![多应用程序调试](img/3415_03_37.jpg)'
- en: It is evident that we can debug both DLL project and console app project at
    the same time. Larger projects can be debugged using a similar method. With this
    example we conclude our multiple app debugging session. Click on the **Stop**
    button to stop debugging.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 很明显，我们可以同时调试 DLL 项目和控制台应用程序项目。较大的项目可以使用类似的方法进行调试。通过这个例子，我们结束了多应用程序调试会话。点击**停止**按钮停止调试。
- en: Summary
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter we learned app debugging with Code::Blocks using GNU GDB debugger.
    We learned various debugging related tools provided by Code::Blocks. Subsequently
    we learned debugging single and multiple apps.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了使用GNU GDB调试器在Code::Blocks中进行应用程序调试。我们学习了Code::Blocks提供的各种与调试相关的工具。随后，我们学习了调试单个和多个应用程序。
- en: In the next chapter we'll discuss app development for Windows.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论Windows的应用程序开发。
