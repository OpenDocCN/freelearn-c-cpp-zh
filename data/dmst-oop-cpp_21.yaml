- en: '*Chapter 17*: Applying the Factory Pattern'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第17章*：应用工厂模式'
- en: This chapter will continue our pursuit to expand your C++ programming repertoire
    beyond core OOP concepts, with the goal of enabling you to solve recurring types
    of coding problems utilizing common design patterns. We know that incorporating
    design patterns can enhance code maintenance and provide avenues for potential
    code reuse.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将继续扩展您的C++编程技能，超越核心面向对象编程概念，目标是使您能够利用常见的设计模式解决重复出现的编码问题。我们知道，应用设计模式可以增强代码维护性，并为潜在的代码重用提供途径。
- en: Continuing to demonstrate and explain popular design patterns and idioms and
    learning how to implement them effectively in C++, we continue our quest with
    the Factory pattern, more precisely known as the **Factory Method pattern**.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 继续演示和解释流行的设计模式和习语，并学习如何在C++中有效实现它们，我们将继续我们的探索，工厂模式，更准确地说是**工厂方法模式**。
- en: 'In this chapter, we will cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Understanding the Factory Method pattern and how it contributes to OOP
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解工厂方法模式及其对面向对象编程的贡献
- en: Understanding how to implement the Factory Method pattern with and without an
    Object Factory; comparing an Object Factory to an Abstract Factory
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解如何使用对象工厂和不使用对象工厂来实现工厂方法模式；比较对象工厂和抽象工厂
- en: By the end of this chapter, you will understand the popular Factory Method pattern.
    We will see two example implementations of this pattern in C++. Adding additional
    core design patterns to your programming repertoire will enable you to become
    a more sophisticated and valuable programmer.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将理解流行的工厂方法模式。我们将在C++中看到这种模式的两个示例实现。将额外的核心设计模式添加到您的编程技能中，将使您成为一个更复杂和有价值的程序员。
- en: Let's increase our programming skills set by examining this common design pattern,
    the Factory Method pattern.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过研究这种常见的设计模式，工厂方法模式，来增加我们的编程技能。
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The full code for the example programs in this chapter can be found at the
    following GitHub URL: [https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter17](https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter17).
    Each full example program can be found in the GitHub repository under the appropriate
    chapter heading (subdirectory) in a file that corresponds to the chapter number,
    followed by a dash, followed by the example number in the chapter at hand. For
    example, the first full program in this chapter can be found in the subdirectory
    `Chapter17` in a file named `Chp17-Ex1.cpp` under the aforementioned GitHub directory.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章示例程序的完整代码可在以下GitHub链接找到：[https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter17](https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter17)。每个完整的示例程序都可以在GitHub存储库中的适当章节标题（子目录）下找到，文件名与所在章节的章节号对应，后跟破折号，再跟上所在章节中的示例编号。例如，本章的第一个完整程序可以在子目录`Chapter17`中的名为`Chp17-Ex1.cpp`的文件中找到，位于上述GitHub目录下。
- en: 'The CiA video for this chapter can be viewed at: [https://bit.ly/2PdlSLB](https://bit.ly/2PdlSLB).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的CiA视频可在以下链接观看：[https://bit.ly/2PdlSLB](https://bit.ly/2PdlSLB)。
- en: Understanding the Factory Method pattern
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解工厂方法模式
- en: The **Factory pattern**, or **Factory Method pattern**, is a creational design
    pattern that allows the creation of objects without needing to specify the exact
    (derived) class that will be instantiated. A Factory Method pattern provides an
    interface for creating an object, yet allows details within the creation method
    to decide which (derived) class to instantiate.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**工厂模式**或**工厂方法模式**是一种创建型设计模式，允许创建对象而无需指定将实例化的确切（派生）类。工厂方法模式提供了一个创建对象的接口，但允许创建方法内的细节决定实例化哪个（派生）类。'
- en: A Factory Method pattern is also known as a **virtual constructor**. Much as
    a virtual destructor has a specific destructor (which is the entry point of the
    destruction sequence) determined at runtime through dynamic binding, the concept
    of a virtual constructor is such that the desired object to instantiate is uniformly
    determined at runtime.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 工厂方法模式也被称为**虚拟构造函数**。就像虚拟析构函数具有特定的析构函数（这是销毁序列的入口点）在运行时通过动态绑定确定一样，虚拟构造函数的概念是所需的对象在运行时统一确定。
- en: With a Factory Method pattern, we will specify an abstract class (or interface)
    for collecting and specifying the general behaviors of derived classes we wish
    to create. The abstract class or interface in this pattern is known as a **Product**.
    We then create the derived classes that we may want to instantiate, overriding
    any necessary abstract methods. The various concrete derived classes are known
    as **Concrete Products**.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 使用工厂方法模式，我们将指定一个抽象类（或接口）来收集和指定我们希望创建的派生类的一般行为。在这种模式中，抽象类或接口被称为**产品**。然后我们创建我们可能想要实例化的派生类，覆盖任何必要的抽象方法。各种具体的派生类被称为**具体产品**。
- en: We then specify a Factory Method whose purpose is to host an interface for uniformly
    creating instances of Concrete Products. The Factory Method can either be placed
    in the abstract Product class or in a separate Object Factory class; an **Object
    Factory** represents a class with the task of creating concrete Products. This
    Factory (creation) Method will be static if placed within the abstract Product
    class and optionally static if instead placed within an Object Factory class.
    The Factory Method will decide which specific Concrete Product to manufacture,
    based on a consistent list of input parameters. The Factory Method will return
    a generalized Product pointer to the Concrete Product. Polymorphic methods can
    be applied to the newly created object to elicit its specific behavior.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们指定一个工厂方法，其目的是为了统一创建具体产品的实例。工厂方法可以放在抽象产品类中，也可以放在单独的对象工厂类中；对象工厂代表一个负责创建具体产品的类。如果将工厂方法放在抽象产品类中，那么这个工厂（创建）方法将是静态的，如果放在对象工厂类中，那么它可以选择是静态的。工厂方法将根据一致的输入参数列表决定要制造哪个具体产品，然后返回一个通用的产品指针给具体产品。多态方法可以应用于新创建的对象，以引出其特定的行为。
- en: 'The Factory Method pattern will include the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 工厂方法模式将包括以下内容：
- en: An abstract **Product** class (or interface).
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个抽象产品类（或接口）。
- en: Multiple **Concrete Product** derived classes.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多个具体产品派生类。
- en: A **Factory Method** in either the abstract Product class or in a separate **Object
    Factory** class. The Factory Method will have a uniform interface to create an
    instance of any of the Concrete Product types.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在抽象产品类或单独的对象工厂类中的工厂方法。工厂方法将具有一个统一的接口来创建任何具体产品类型的实例。
- en: Concrete Products will be returned by the Factory Method as generalized Product
    instances.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具体产品将由工厂方法作为通用产品实例返回。
- en: Keep in mind, a Factory Method (regardless of whether it is in an Object Factory)
    produces Products. A Factory Method provides a uniform manner for producing many
    related Product types.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，工厂方法（无论是在对象工厂中）都会生产产品。工厂方法提供了一种统一的方式来生产许多相关的产品类型。
- en: Let's move forward to see two sample implementations of the Factory Method pattern.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续看两个工厂方法模式的示例实现。
- en: Implementing the Factory Method pattern
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现工厂方法模式
- en: We will explore two common implementations of the Factory Method pattern. Each
    will have design trade-offs, certainly worthy of discussion!
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将探讨工厂方法模式的两种常见实现。每种实现都有设计权衡，值得讨论！
- en: Let's start with the technique in which the Factory Method is placed in the
    abstract Product class.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从将工厂方法放在抽象产品类中的技术开始。
- en: Including the Factory Method in the Product class
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 包括工厂方法在产品类中
- en: To implement the Factory Method pattern, we will first need to create our abstract
    Product class as well as our concrete Product classes. These class definitions
    will lay the foundation on which we will build our pattern.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现工厂方法模式，我们首先需要创建我们的抽象产品类以及我们的具体产品类。这些类定义将为我们构建模式奠定基础。
- en: In our example, we will create our Product using a class we are accustomed to
    seeing – `Student`. We will then create concrete Product classes, namely `GradStudent`,
    `UnderGradStudent`, and `NonDegreeStudent`. We will include a Factory Method in
    our Product (`Student`) class with a consistent interface to create any of the
    derived Product types.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们将使用一个我们习惯看到的类`Student`来创建我们的产品。然后我们将创建具体的产品类，即`GradStudent`，`UnderGradStudent`和`NonDegreeStudent`。我们将在我们的产品（`Student`）类中包含一个工厂方法，以创建任何派生产品类型的统一接口。
- en: The components we will model will complement our framework for our existing
    `Student` application by adding classes to differentiate students based on their
    educational degree goals. The new components provide the basis for a university
    matriculation (new student admission) system.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过添加类来区分学生的教育学位目标，为我们现有的`Student`应用程序补充我们的框架。新的组件为大学入学（新生入学）系统提供了基础。
- en: Let's assume that rather than instantiating a `Student`, our application will
    instantiate various types of `Student` – `GradStudent`, `UnderGradStudent`, or
    `NonDegreeStudent` – based on their learning goals. The `Student` class will include
    an abstract polymorphic `Graduate()` operation; each derived class will override
    this method with varying implementations. For example, a `GradStudent` seeking
    a PhD may have more degree-related criteria to satisfy in the `GradStudent::Graduate()`
    method than other specializations of `Student`. They may require credit hours
    to be verified, a passing grade point average to be verified, and verification
    that their dissertation has been accepted. In contrast, an `UnderGradStudent`
    might only have their credit hours and overall grade point average to be corroborated.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们的应用程序不是实例化一个`Student`，而是实例化各种类型的`Student` - `GradStudent`，`UnderGradStudent`或`NonDegreeStudent`
    - 基于他们的学习目标。`Student`类将包括一个抽象的多态`Graduate()`操作；每个派生类将使用不同的实现重写这个方法。例如，寻求博士学位的`GradStudent`可能在`GradStudent::Graduate()`方法中有更多与学位相关的标准要满足，而其他`Student`的专业化可能不需要。他们可能需要验证学分小时数，验证通过的平均成绩，以及验证他们的论文是否被接受。相比之下，`UnderGradStudent`可能只需要验证他们的学分小时数和总体平均成绩。
- en: The abstract Product class will include a static method, `MatriculateStudent()`,
    as the Factory Method to create various types of students (the concrete Product
    types).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 抽象产品类将包括一个静态方法`MatriculateStudent()`，作为创建各种类型学生（具体产品类型）的工厂方法。
- en: Defining the abstract Product class
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义抽象产品类
- en: 'Let''s first take a look at the mechanics for the implementation of our Factory
    Method, beginning by examining the definition for our abstract Product class,
    `Student`. This example can be found as a complete program in our GitHub repository:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先看一下我们的工厂方法实现的机制，从检查我们的抽象产品类`Student`的定义开始。这个例子可以在我们的GitHub存储库中找到一个完整的程序：
- en: '[https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter17/Chp17-Ex1.cpp](https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter17/Chp17-Ex1.cpp)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter17/Chp17-Ex1.cpp](https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter17/Chp17-Ex1.cpp)'
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the previous class definition, we introduce our abstract `Student` class,
    which is derived from `Person` (a concrete, and hence instantiable, class). This
    has been accomplished by the introduction of the abstract method, `virtual void
    Graduate() = 0;`. In our student matriculation example, we will be following the
    design decision that only specific types of students should be instantiated; that
    is, the derived class types of `GradStudent`, `UnderGradStudent`, and `NonDegreeStudent`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的类定义中，我们介绍了抽象的`Student`类，它是从`Person`（一个具体的、因此可实例化的类）派生出来的。这是通过引入抽象方法`virtual
    void Graduate() = 0;`来实现的。在我们的学生入学示例中，我们将遵循一个设计决策，即只有特定类型的学生应该被实例化；也就是说，`GradStudent`、`UnderGradStudent`和`NonDegreeStudent`的派生类类型。
- en: In the preceding class definition, notice our Factory Method with the `static
    Student *MatriculateStudent();` prototype. This method will use a uniform interface
    and will provide the means for the creation of various derived class types of
    `Student`. We will examine this method in detail once we have seen the class definitions
    for the derived classes.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的类定义中，注意我们的工厂方法，具有`static Student *MatriculateStudent();`原型。这个方法将使用统一的接口，并提供了创建各种`Student`派生类类型的手段。一旦我们看到了派生类的类定义，我们将详细研究这个方法。
- en: Defining the concrete Product classes
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义具体产品类
- en: 'Now, let''s take a look at our concrete Product classes, starting with `GradStudent`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看我们的具体产品类，从`GradStudent`开始：
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the aforementioned `GradStudent` class definition, we add a `degree` data
    member to indicate a degree of `"PhD"`, `"MS``"`, or `"MA"`, and adjust the constructors
    and destructor as necessary. We have moved `EarnPhD()` to `GradStudent`, as this
    method is not applicable to all `Student` instances. Instead, `EarnPhD()` is applicable
    to a subset of `GradStudent` instances; we will award the title of `"Dr."` only
    to the PhD candidates.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述的`GradStudent`类定义中，我们添加了一个`degree`数据成员，用于指示“PhD”、“MS”或“MA”学位，并根据需要调整构造函数和析构函数。我们已经将`EarnPhD()`移到`GradStudent`，因为这个方法并不适用于所有的`Student`实例。相反，`EarnPhD()`适用于`GradStudent`实例的一个子集；我们只会授予“Dr.”头衔给博士候选人。
- en: In this class, we have overridden `IsA()` to return `"GradStudent"`. We have
    also overridden `Graduate()` to go through the graduation checklist that is applicable
    for graduate students, calling `EarnPhD()` if those checklist items have been
    met.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个类中，我们重写了`IsA()`，返回“GradStudent”。我们还重写了`Graduate()`，以便进行适用于研究生的毕业清单，如果满足了这些清单项目，就调用`EarnPhD()`。
- en: 'Now, let''s take a look at our next concrete Product class, `UnderGradStudent`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看我们的下一个具体产品类，`UnderGradStudent`：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Quickly taking a look at the previously defined `UnderGradStudent` class, we
    notice that it is very similar to `GradStudent`. This class even includes a `degree`
    data member. Keep in mind that not all `Student` instances will receive degrees,
    so we don't want to generalize this attribute by defining it in `Student`. Though
    we could have introduced a shared base class of `DegreeSeekingStudent` for `UnderGradStudent`
    and `GradStudent` to collect this commonality, that fine level of granularization
    would add an additional layer almost unnecessarily. The duplication here is a
    design trade-off.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 快速看一下之前定义的`UnderGradStudent`类，我们注意到它与`GradStudent`非常相似。这个类甚至包括一个`degree`数据成员。请记住，并非所有的`Student`实例都会获得学位，所以我们不希望通过在`Student`中定义它来概括这个属性。虽然我们可以引入一个共享的基类`DegreeSeekingStudent`，用于收集`UnderGradStudent`和`GradStudent`的共同点，但这种细粒度的层次几乎是不必要的。这里的重复是一个设计权衡。
- en: The key difference between these two sibling classes is the overridden `Graduate()`
    method. We can imagine that the checklist for an undergraduate student for graduation
    may be quite different than that of a graduate student. For this reason, we can
    reasonably differentiate the two classes. Otherwise, they are very much the same.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个兄弟类之间的关键区别是重写的`Graduate()`方法。我们可以想象，本科生毕业的清单可能与研究生不同。因此，我们可以合理地区分这两个类。否则，它们基本上是一样的。
- en: 'Now, let''s take a look at our next concrete Product class, `NonDegreeStudent`:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看我们的下一个具体产品类，`NonDegreeStudent`：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Taking a comparably quick look at the aforementioned `NonDegreeStudent` class,
    we notice that this concrete Product is similar to its sibling classes. However,
    there is no degree data member within this class. Also, the overridden `Graduate()`
    method has less verification to undertake than in the overridden versions of this
    method for either the `GradStudent` or `UnderGradStudent` classes.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 快速看一下上述的`NonDegreeStudent`类，我们注意到这个具体产品与它的兄弟类相似。然而，在这个类中没有学位数据成员。此外，重写的`Graduate()`方法需要进行的验证比`GradStudent`或`UnderGradStudent`类中的重写版本少。
- en: Examining the Factory Method definition
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查工厂方法定义
- en: 'Next, let''s take a look at our Factory Method, a static method in our Product
    (`Student`) class:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们来看看我们的工厂方法，即我们产品（`Student`）类中的静态方法：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The aforementioned static method of `Student`, `MatriculateStudent()`, represents
    the Factory Method to create various Products (concrete `Student` instances).
    Here, based on the degree type that the `Student` seeks, one of `GradStudent`,
    `UnderGradStudent`, or `NonDegreeStudent` will be instantiated. Notice that the
    signature of `MatriculateStudent()` can handle the parameter requirements for
    any of the derived class constructors. Also notice that any of these specialized
    instance types will be returned as a base class pointer of the abstract Product
    type (`Student`).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 前面提到的`Student`的静态方法`MatriculateStudent()`代表了工厂方法，用于创建各种产品（具体`Student`实例）。在这里，根据`Student`所寻求的学位类型，将实例化`GradStudent`，`UnderGradStudent`或`NonDegreeStudent`中的一个。请注意，`MatriculateStudent()`的签名可以处理任何派生类构造函数的参数要求。还要注意，任何这些专门的实例类型都将作为抽象产品类型（`Student`）的基类指针返回。
- en: An interesting option within the Factory Method, `MatriculateStudent()`, is
    that this method is not obligated to instantiate a new derived class instance.
    Instead, it may recycle a previous instance that may still be available. For example,
    imagine a `Student` is temporarily unregistered in the university (due to late
    payment of fees), yet has been kept available on a list of *pending students*.
    The `MatriculateStudent()` method may instead choose to return a pointer to such
    an existing `Student`. *Recycling* is an alternative within a Factory Method!
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 工厂方法`MatriculateStudent()`中的一个有趣选项是，这个方法并不一定要实例化一个新的派生类实例。相反，它可以重用之前可能仍然可用的实例。例如，想象一下，一个`Student`暂时未在大学注册（因为费用支付迟到），但仍然被保留在*待定学生*名单上。`MatriculateStudent()`方法可以选择返回指向这样一个现有`Student`的指针。*回收*是工厂方法中的一种替代方法！
- en: Bringing the pattern components together
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将模式组件整合在一起
- en: 'Finally, let''s now bring all of our various components together by taking
    a look at our `main()` function to see how our Factory Method pattern is orchestrated:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们通过查看我们的`main()`函数来将所有不同的组件整合在一起，看看我们的工厂方法模式是如何被编排的：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Reviewing our aforementioned `main()` function, we first create an array of
    pointers for potential specialized `Student` instances in their generalized `Student`
    form. Next, we invoke the static Factory Method, `Student::MatriculateStudent()`,
    within the abstract Product class to create the appropriate concrete Product (derived
    `Student` class type). We create one of each of the derived `Student` types –
    `GradStudent`, `UnderGradStudent`, and `NonDegreeStudent`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾我们前面提到的`main()`函数，我们首先创建一个指向潜在专业化`Student`实例的指针数组，以它们的一般化`Student`形式。接下来，我们在抽象产品类中调用静态工厂方法`Student::MatriculateStudent()`来创建适当的具体产品（派生`Student`类类型）。我们创建每个派生`Student`类型
    - `GradStudent`，`UnderGradStudent`和`NonDegreeStudent`各一个。
- en: We then loop through our generalized collection, calling `Graduate()` and then
    `Print()` for each instance. For students earning a PhD (`GradStudent` instances),
    their title will be changed to `"Dr."` by the `GradStudent::Graduate()` method.
    Finally, we iterate through another loop to deallocate each instance's memory.
    Thankfully, `Student` has included a virtual destructor so that the destruction
    sequence starts at the proper level.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们通过我们的一般化集合循环，为每个实例调用`Graduate()`，然后调用`Print()`。对于获得博士学位的学生（`GradStudent`实例），他们的头衔将被`GradStudent::Graduate()`方法更改为`"Dr."`。最后，我们通过另一个循环来释放每个实例的内存。幸运的是，`Student`已经包含了一个虚析构函数，以便销毁顺序从适当的级别开始。
- en: 'Let''s take a look at the output for this program:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看这个程序的输出：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: An advantage of the preceding implementation is that it is very straightforward.
    However, we can see a close coupling exists between the abstract Product containing
    the Factory Method (which constructs the derived class types), and the derived
    concrete Products. Yet in OOP, a base class will typically have no knowledge of
    any descendent types.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 前面实现的一个优点是它非常直接。然而，我们可以看到抽象产品类包含工厂方法（用于构造派生类类型）和派生具体产品之间存在着紧密的耦合。然而，在面向对象编程中，基类通常不会了解任何派生类型。
- en: A disadvantage of this closely coupled implementation is that the abstract Product
    class must include a means for instantiation for each of its descendants in its
    static creation method, `MatriculateStudent()`. Adding new derived classes now
    affects the abstract base class definition – it needs to be recompiled. What if
    we don't have access to the source code for this base class? Is there a way to
    decouple the dependencies that exist between the Factory Method and the Products
    that the Factory Method will create? Yes, there is an alternative implementation.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这种紧密耦合实现的一个缺点是，抽象产品类必须在其静态创建方法`MatriculateStudent()`中包含每个后代的实例化手段。添加新的派生类现在会影响抽象基类的定义
    - 需要重新编译。如果我们没有访问这个基类的源代码怎么办？有没有一种方法来解耦工厂方法和工厂方法将创建的产品之间存在的依赖关系？是的，有一种替代实现。
- en: Let's now take a look at an alternative implementation of the Factory Method
    pattern. We will instead use an Object Factory class to encapsulate our Factory
    Method of `MatriculateStudent()`, rather than including this method in the abstract
    Product class.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在来看一下工厂方法模式的另一种实现。我们将使用一个对象工厂类来封装我们的`MatriculateStudent()`工厂方法，而不是将这个方法包含在抽象产品类中。
- en: Creating an Object Factory class to encapsulate the Factory Method
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个对象工厂类来封装工厂方法
- en: For our alternative implementation of the Factory Method pattern, we will create
    our abstract Product class with a slight deviation from its previous definition.
    We will, however, create our concrete Product classes as before. These class definitions,
    collectively, will again begin the framework to base our pattern.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 对于工厂方法模式的另一种实现，我们将对抽象产品类进行轻微偏离其先前的定义。然而，我们将像以前一样创建我们的具体产品类。这些类定义将再次开始构建我们模式的框架。
- en: In our revised example, we will define our Product again as the `Student` class.
    We will also again derive the concrete Product classes of `GradStudent`, `UnderGradStudent`,
    and `NonDegreeStudent`. This time, however, we will not include a Factory Method
    in our Product (`Student`) class. Instead, we will create a separate Object Factory
    class that will include the Factory Method. As before, the Factory Method will
    have a uniform interface to create any of the derived Product types. The Factory
    Method need not be static, as it was in our last implementation.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们修改后的示例中，我们将再次将我们的产品定义为`Student`类。我们还将再次派生具体的产品类`GradStudent`，`UnderGradStudent`和`NonDegreeStudent`。然而，这一次，我们不会在我们的产品（`Student`）类中包含工厂方法。相反，我们将创建一个单独的对象工厂类，其中将包括工厂方法。与之前一样，工厂方法将具有统一的接口来创建任何派生产品类型。工厂方法不需要是静态的，就像在我们上一次的实现中一样。
- en: Our Object Factory class will include `MatriculateStudent()` as the Factory
    Method to create various types of `Student` instances (the concrete Product types).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的对象工厂类将包括`MatriculateStudent()`作为工厂方法来创建各种`Student`实例（具体产品类型）。
- en: Defining the abstract Product class without the Factory Method
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义不包含工厂方法的抽象产品类
- en: 'Let''s take a look at the mechanics for our alternative implementation of the
    Factory Method pattern, beginning by examining the definition for our abstract
    Product class, `Student`. This example can be found as a complete program in our
    GitHub repository:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看我们对工厂方法模式的替代实现的机制，首先检查我们的抽象产品类`Student`的定义。这个例子可以在我们的GitHub存储库中找到一个完整的程序：
- en: '[https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter17/Chp17-Ex2.cpp](https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter17/Chp17-Ex2.cpp)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter17/Chp17-Ex2.cpp](https://github.com/PacktPublishing/Demystified-Object-Oriented-Programming-with-CPP/blob/master/Chapter17/Chp17-Ex2.cpp)'
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In our aforementioned class definition for `Student`, the key difference from
    our prior implementation is that this class no longer contains a static `MatriculateStudent()`
    method to serve as the Factory Method. `Student` is merely an abstract base class.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们上述的`Student`类定义中，与我们之前的实现的关键区别是，这个类不再包含一个静态的`MatriculateStudent()`方法作为工厂方法。`Student`只是一个抽象基类。
- en: Defining the concrete Product classes
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义具体产品类
- en: 'With that in mind, let''s take a look at the derived (concrete Product) classes:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个想法，让我们来看看派生（具体产品）类：
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In our previously listed class definitions, we can see that our concrete derived
    Product classes are identical to our implementation of these classes in our first
    example.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前列出的类定义中，我们可以看到我们的具体派生产品类与我们在第一个示例中实现这些类的方式是相同的。
- en: Adding the Object Factory class to the Factory Method
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将对象工厂类添加到工厂方法
- en: 'Next, let''s introduce an Object Factory class, which includes our Factory
    Method:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们介绍一个包括我们工厂方法的对象工厂类：
- en: '[PRE9]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the aforementioned Object Factory class definition (the `StudentFactory`
    class), we minimally include the Factory Method specification, namely, `MatriculateStudent()`.
    The method is very similar to that in our prior example. However, by capturing
    the creation of concrete Products in an Object Factory, we have decoupled the
    relationship between the abstract Product and the Factory Method.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述的对象工厂类定义（`StudentFactory`类）中，我们最少包括工厂方法规范，即`MatriculateStudent()`。该方法与我们之前的示例中的方法非常相似。然而，通过在对象工厂中捕获具体产品的创建，我们已经解耦了抽象产品和工厂方法之间的关系。
- en: Bringing the pattern components together
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将模式组件结合在一起
- en: 'Next, let''s compare our `main()` function to that of our original example
    to visualize how our revised components implement the Factory Method pattern:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们将我们的`main()`函数与我们原始示例的函数进行比较，以可视化我们修改后的组件如何实现工厂方法模式：
- en: '[PRE10]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Considering our previously listed `main()` function, we see that we have again
    created an array of pointers to the abstract Product type (`Student`). We have
    then instantiated an Object Factory that can create various `Student` instances
    of concrete Product types with `StudentFactory *UofD = new StudentFactory();`.
    As with the previous example, one instance of each derived type of `GradStudent`,
    `UnderGradStudent`, and `NonDegreeStudent` is created by the Object Factory based
    upon the degree type sought by each student. The remainder of the code in `main()`
    is as found in our prior example.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到我们之前列出的`main()`函数，我们可以看到我们再次创建了指向抽象产品类型（`Student`）的指针数组。然后，我们实例化了一个可以创建各种具体产品类型的`Student`实例的对象工厂，即`StudentFactory
    *UofD = new StudentFactory();`。与之前的示例一样，对象工厂根据每个学生所寻求的学位类型创建了每个派生类型的`GradStudent`，`UnderGradStudent`和`NonDegreeStudent`的一个实例。`main()`中的其余代码与我们之前的示例中一样。
- en: Our output will be the same as our last example.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的输出将与我们上一个示例相同。
- en: The advantage of the Object Factory class, over our prior means of implementation,
    is that we have removed the dependency of object creation from our abstract Product
    class (in the Factory Method) with knowledge of what the derived class types are.
    That is, should we expand our hierarchy to include new concrete Product types,
    we do not have to modify the abstract Product class. Of course, we will need to
    have access to modify our Object Factory class, `StudentFactory`, to augment our
    `MatriculateStudent()` Factory Method.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 对象工厂类的优势在于，我们已经从抽象产品类（在工厂方法中）中移除了对象创建的依赖，并知道派生类类型是什么。也就是说，如果我们扩展层次结构以包括新的具体产品类型，我们不必修改抽象产品类。当然，我们需要访问修改我们的对象工厂类`StudentFactory`，以增强我们的`MatriculateStudent()`工厂方法。
- en: A pattern related to this implementation, the **Abstract Factory**, is an additional
    pattern that allows individual factories with a similar purpose to be grouped
    together. An Abstract Factory can be specified to provide a means to unify similar
    Object Factories; it is a factory that will create factories, adding yet another
    level of abstraction to our original pattern.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 与这种实现相关的一种模式，**抽象工厂**，是另一种模式，它允许具有类似目的的单个工厂被分组在一起。抽象工厂可以被指定为提供统一类似对象工厂的方法；它是一个将创建工厂的工厂，为我们原始模式添加了另一层抽象。
- en: We have now seen two implementations of the Factory Method pattern. We have
    folded the concepts of Product and Factory Method into the framework of classes
    we are accustomed to seeing, namely `Student`, and descendants of `Student`. Let's
    now briefly recap what we have learned relating to patterns before moving forward
    to our next chapter.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经看到了工厂方法模式的两种实现。我们已经将产品和工厂方法的概念融入了我们习惯看到的类框架中，即`Student`和`Student`的派生类。在继续前往下一章之前，让我们简要地回顾一下我们在模式方面学到的东西。
- en: Summary
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have continued our pursuit to become better C++ programmers
    by expanding our knowledge of design patterns. In particular, we have explored
    the Factory Method pattern, both conceptually and with two common implementations.
    Our first implementation included placing the Factory Method in our abstract Product
    class. Our second implementation removed the dependency between our Abstract Product
    and our Factory Method by instead adding an Object Factory class to contain our
    Factory Method. We also very briefly discussed the notion of an Abstract Factory.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们继续努力成为更好的C++程序员，扩展我们对设计模式的知识。特别是，我们从概念上和通过两种常见的实现探讨了工厂方法模式。我们的第一个实现包括将工厂方法放在我们的抽象产品类中。我们的第二个实现通过添加一个对象工厂类来包含我们的工厂方法，消除了我们的抽象产品和工厂方法之间的依赖关系。我们还非常简要地讨论了抽象工厂的概念。
- en: Utilizing common design patterns, such as the Factory Method pattern, will help
    you more easily solve recurring types of programming problems in a manner understood
    by other programmers. By utilizing core design patterns, you will be contributing
    to well-understood and reusable solutions employing more sophisticated programming
    techniques.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 利用常见的设计模式，比如工厂方法模式，将帮助您更轻松地解决其他程序员理解的重复类型的编程问题。通过利用核心设计模式，您将为使用更复杂的编程技术提供了被理解和可重用的解决方案。
- en: We are now ready to continue forward to our next design pattern in [*Chapter
    18*](B15702_18_Final_NM_ePub.xhtml#_idTextAnchor682), *Implementing the Adapter
    Pattern*. Adding more patterns to our collection of skills makes us more versatile
    and valued programmers. Let's continue onward!
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备继续前进到我们的下一个设计模式[*第18章*](B15702_18_Final_NM_ePub.xhtml#_idTextAnchor682)，*实现适配器模式*。向我们的技能集合中添加更多的模式使我们成为更多才多艺和有价值的程序员。让我们继续前进吧！
- en: Questions
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Using the solution from the previous exercise in *Question 1*, [*Chapter 8*](B15702_08_Final_NM_ePub.xhtml#_idTextAnchor335),
    *Mastering Abstract Classes*:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用*问题1*中的解决方案，[*第8章*](B15702_08_Final_NM_ePub.xhtml#_idTextAnchor335)，*掌握抽象类*：
- en: a. Implement the Factory Method pattern to create various shapes. You will have
    already created an abstract base class of Shape, and derived classes such as Rectangle,
    Circle, Triangle, and possibly Square.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: a. 实现工厂方法模式来创建各种形状。您已经创建了一个名为Shape的抽象基类，以及派生类，比如Rectangle、Circle、Triangle，可能还有Square。
- en: b. Choose whether to implement your Factory Method as a static method in `Shape`
    or as a method in a `ShapeFactory` class (introducing the latter class if necessary).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: b. 选择在`Shape`中将工厂方法实现为静态方法，或者作为`ShapeFactory`类中的方法（如果需要的话引入后者类）。
- en: What other examples can you imagine that might easily incorporate the Factory
    Method pattern?
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您能想象其他哪些例子可能很容易地融入工厂方法模式？
