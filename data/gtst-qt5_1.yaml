- en: Introducing Qt 5
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 Qt 5
- en: 'Qt gives developers a great toolbox with which to create fantastic and practical
    applications with minimal stress, as you will soon discover. In this chapter,
    we will introduce Qt and describe how to set it up on a machine. By the end of
    the chapter, you should be able to do the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Qt 为开发者提供了一个出色的工具箱，可以轻松地创建令人惊叹且实用的应用程序，而无需承受太多压力，您很快就会发现这一点。在本章中，我们将介绍 Qt 并描述如何在机器上设置它。到本章结束时，您应该能够做到以下内容：
- en: Install Qt
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Qt
- en: Write a simple program in Qt
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Qt 编写一个简单的程序
- en: Compile and run a Qt program
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译并运行一个 Qt 程序
- en: The objectives have been kept simple and straightforward. So let's get started!
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 目标保持简单直接。那么，让我们开始吧！
- en: Installing Qt on Linux
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Linux 上安装 Qt
- en: 'The Ubuntu operating system makes it reasonably easy to install Qt 5\. Issue
    the following commands to set up your box:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Ubuntu 操作系统使安装 Qt 5 变得相对容易。输入以下命令来设置您的环境：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After the installation, Qt programs will be compiled and run from the command
    line. In [Chapter 6](bfdfd852-205f-4c4b-bb41-d798fdc865f7.xhtml), *Connecting
    Qt with Databases*, we will illustrate how to connect to the database using Qt.
    Issue the following command to ensure that the relevant libraries are installed
    for Qt to work with. The database that will''ll connect to is MySQL:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，Qt 程序将从命令行编译和运行。在 [第 6 章](bfdfd852-205f-4c4b-bb41-d798fdc865f7.xhtml) “连接
    Qt 与数据库”中，我们将展示如何使用 Qt 连接到数据库。输入以下命令以确保安装了 Qt 运行所需的库。我们将连接到的是 MySQL 数据库：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Installing Qt on macOS
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 macOS 上安装 Qt
- en: 'There are a variety of ways to get Qt installed on a Mac. To begin the process
    of installing Qt 5 on your Mac, you need to get Xcode installed on your machine.
    Issue the following commands on the Terminal:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Mac 上安装 Qt 有多种方法。要开始安装 Qt 5 到您的 Mac，您需要在您的机器上安装 Xcode。在终端中输入以下命令：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you get the following output, then you are ready for the next series of
    steps:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您得到以下输出，那么您就可以进行下一步了：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*HomeBrew* is a package management software tool that allows you to easily
    install Unix tools that don''t come shipped with the macOS.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*HomeBrew* 是一种软件包管理工具，它允许您轻松安装随 macOS 不附带安装的 Unix 工具。'
- en: 'If you don''t already have it on your machine, you can install it by issuing
    the following command in a Terminal:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的机器上还没有安装，您可以在终端中输入以下命令进行安装：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'After that, you should issue yet another set of commands to get Qt installed
    via the Terminal:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，您应该在终端中输入另一组命令来安装 Qt：
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In a few chapters'' time, we will be working with the MySql database. To configure
    Qt 5 with MySql, issue the following command:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几章中，我们将使用 MySql 数据库。要配置 Qt 5 与 MySql，请输入以下命令：
- en: '[PRE6]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This command should take a while to complete and, assuming nothing goes wrong,
    you are ready to write Qt programs.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令可能需要一段时间才能完成，如果一切顺利，您就可以编写 Qt 程序了。
- en: Installation on Windows
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows 上的安装
- en: For readers using Windows, installation remains simple, albeit a little less
    straightforward. We can start by heading over to [http://download.qt.io](http://download.qt.io).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用 Windows 的读者，安装过程仍然简单，尽管稍微不那么直接。我们可以先访问 [http://download.qt.io](http://download.qt.io)。
- en: Select `official_releases/`, then `online_installers/`, and opt to download
    `qt-unified-windows-x86-online.exe`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 选择 `official_releases/`，然后 `online_installers/`，并选择下载 `qt-unified-windows-x86-online.exe`。
- en: Run the program and opt to create an account. Click through to select the installation
    folder and don't forget to select the MinGW 5.3.0 32 bit option as the compiler
    when selecting the components that need to be installed.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 运行程序并选择创建账户。点击通过选择安装文件夹，并且不要忘记在选择需要安装的组件时选择 MinGW 5.3.0 32 位选项作为编译器。
- en: Most of the commands in this book should run in this IDE.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的大多数命令都应该在这个 IDE 中运行。
- en: What is Qt?
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 Qt？
- en: Now that we have set up our boxes to start development, let's put together a
    hello world example. First, however, let's take a brief detour.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了开发环境，让我们来构建一个“Hello World”示例。然而，首先让我们先简要地了解一下。
- en: Qt is a toolkit for creating **Graphical User Interfaces** (**GUI**), as well
    as cross-platform applications. GUI applications are programs that employ the
    use of the mouse to issue commands to the computer for execution. Though Qt can,
    in some cases, be used without necessarily making use of this, therein lies its
    utility.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Qt 是一个用于创建 **图形用户界面**（**GUI**）以及跨平台应用程序的工具包。GUI 应用程序是使用鼠标向计算机发出命令以执行程序的应用程序。虽然
    Qt 在某些情况下可以不使用鼠标操作，但这正是其用途所在。
- en: The difficulty in trying to produce the same look, feel, and functionality across
    multiple operating systems is one big hurdle you have to deal with when writing
    GUI applications. Qt completely does away with this impediment by providing a
    means to write code only once and ensuring that it runs on most operating systems
    without requiring much or any change.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写GUI应用程序时，试图在多个操作系统上实现相同的外观、感觉和功能是一项很大的挑战。Qt通过提供一种只需编写一次代码并确保它在大多数操作系统上运行而无需进行太多或任何更改的方法，完全消除了这一障碍。
- en: 'Qt makes use of some modules. These modules group related functionalities together.
    The following lists some modules and what they do:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Qt使用了一些模块。这些模块将相关的功能组合在一起。以下列出了一些模块及其功能：
- en: '`QtCore`: As the name implies, these modules contains core and important classes
    for the Qt framework. These include containers, events, and thread management,
    among others.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore`：正如其名所示，这些模块包含Qt框架的核心和重要类。这包括容器、事件和线程管理等功能。'
- en: '`QtWidgets` and `QtGui`: This module contains classes for calling widgets.
    Widgets are the components that make up the majority of a graphical interface.
    These include buttons, textboxes, and labels.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets`和`QtGui`：此模块包含用于调用控件的类。控件是构成图形界面大部分组件的元素。这包括按钮、文本框和标签。'
- en: '`QtWebkit`: This module makes it possible to use web pages and apps within
    a Qt application.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWebkit`：此模块使得在Qt应用程序中使用网页和应用成为可能。'
- en: '`QtNetwork`: This module provides classes to connect to and communicate with
    network resources.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtNetwork`：此模块提供连接到并通信网络资源的类。'
- en: '`QtXML`: For parsing XML documents, this module contains useful classes.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtXML`：为了解析XML文档，此模块包含有用的类。'
- en: '`QtSQL`: This module is feature-rich with classes and drivers that allow for
    connecting to databases, including My SQL, PostgreSQL, and SQLite.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtSQL`：此模块具有丰富的类和驱动程序，允许连接到数据库，包括MySQL、PostgreSQL和SQLite。'
- en: Hello world in Qt
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Qt中的“Hello World”
- en: 'In this section, we will put together a very simple hello world program. The
    program will show a simple button within a window. Create a file called `hello.cpp`
    in a newly created folder called `hello_world`. Open the file and insert the code:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将组合一个非常简单的“Hello World”程序。程序将在窗口中显示一个简单的按钮。在新建的名为`hello_world`的文件夹中创建一个名为`hello.cpp`的文件。打开文件并插入以下代码：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This looks like a regular C++ program, with the exception of unfamiliar classes
    being used.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来像是一个普通的C++程序，除了使用了不熟悉的类。
- en: Like any regular program, the `int main()` function is the entry point of our
    application.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 就像任何常规程序一样，`int main()`函数是应用程序的入口点。
- en: An instance of the `QApplication` class is created, called `app`, and the arguments
    passed to the `main()` function. The `app` object is required because it sets
    off the `Event` loop that continues to run until we close the application. Without
    the `QApplication` object, you cannot really create a Qt GUI application.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了一个`QApplication`类的实例，名为`app`，并将传递给`main()`函数的参数。`app`对象是必需的，因为它触发了`事件循环`，该循环会一直运行，直到我们关闭应用程序。没有`QApplication`对象，实际上无法创建Qt
    GUI应用程序。
- en: However, it is possible to use certain aspects of Qt without the need to create
    an instance of `QApplication`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，可以在不创建`QApplication`实例的情况下使用Qt的某些功能。
- en: Also, the constructor for `QApplication` requires that we pass the `argc` and
    `argv` to it.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`QApplication`的构造函数要求我们向其传递`argc`和`argv`。
- en: We instantiate an object of the `QLabel` class, `label`. We pass the `"Hello
    World!"` string to its constructor. A `QLabel` represents what we call a widget,
    which is a term used to describe visual elements on the screen. Labels are used
    to hold text for display.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实例化了一个`QLabel`类的对象，名为`label`。我们将`"Hello World!"`字符串传递给其构造函数。`QLabel`代表我们所说的控件，这是一个用来描述屏幕上视觉元素的术语。标签用于显示文本。
- en: By default, created widgets are hidden. To display them, a call to the `show()`
    function has to be made.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，创建的控件是隐藏的。要显示它们，必须调用`show()`函数。
- en: To start the `Event` loop, the `app.exec()` line is executed. This passes control
    of the application to Qt.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动`事件循环`，需要执行`app.exec()`这一行代码。这会将应用程序的控制权交给Qt。
- en: The `return` keyword will pass an integer back to the operating system, indicating
    the state of the application when it was closed or exited.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`return`关键字将一个整数返回给操作系统，表示应用程序关闭或退出时的状态。'
- en: 'To compile and run our program, navigate to the folder where `hello.cpp` is
    stored. Type the following command in the Terminal:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要编译和运行我们的程序，导航到存储`hello.cpp`的文件夹。在终端中输入以下命令：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This will create the `hello_world.pro` file. The name `hello_world` is the name
    of the folder where `hello.cpp` is located. The generated file should change,
    depending on the location you stored the `hello.cpp` file.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建`hello_world.pro`文件。`hello_world`这个名字是`hello.cpp`所在的文件夹的名字。生成的文件将根据你存储`hello.cpp`文件的路径而变化。
- en: 'Open the `hello_world.pro` file with any text editor of your choice. The following
    lines deserve some explanation:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 使用你选择的任何文本编辑器打开`hello_world.pro`文件。以下几行需要一些解释：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The value, `app`, here means that the final output of the project will be an
    application. Alternatively, it could be a library or sub-directory:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`app`的值意味着项目的最终输出将是一个应用程序。或者，它可能是一个库或子目录：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The name, `hello_world`, here is the name of the application or (library) that
    will be executed:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`hello_world`的名字是应用程序或（库）的名称，它将被执行：
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Since `hello.cpp` is the only source file in our project, it is added to the
    `SOURCES` variable.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`hello.cpp`是我们项目中的唯一源文件，它被添加到`SOURCES`变量中。
- en: We need to generate a `Makefile` that will detail the steps needed to compile
    our hello world program. The benefit of this autogenerated `Makefile` is that
    it takes away the need for us to know the various nuances involved in compiling
    the program on the different operating systems.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要生成一个`Makefile`，它将详细说明编译我们的hello world程序所需的步骤。这个自动生成的`Makefile`的好处是它消除了我们了解在不同操作系统上编译程序的各种细微差别所需的必要性。
- en: 'While in the same project directory, issue the following command:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一项目目录下，执行以下命令：
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This generates a `Makefile` in the directory.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在目录中生成一个`Makefile`。
- en: 'Now, issue the following command to compile the program:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，执行以下命令来编译程序：
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The following error will be produced (along with further information) as the
    output from running the `make` command:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行`make`命令时，会产生以下错误（以及更多信息）作为输出：
- en: '[PRE14]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Earlier on, we mentioned that various components and classes are packaged into
    modules. The `QApplication` is being utilized in our application, but the correct
    module has not been included. During compilation, this omission results in an
    error.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 之前我们提到，各种组件和类被打包到模块中。`QApplication`正在我们的应用程序中使用，但正确的模块尚未包含。在编译过程中，这种遗漏会导致错误。
- en: 'To fix this issue, open the `hello_world.pro` file and insert the following
    lines after the line:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，打开`hello_world.pro`文件，并在该行之后插入以下几行：
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This will add the `QtWidget` module, along with the `QtCore` modules, to the
    compiled program. With the correct module added, run the `make` command again
    on the command line:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这将添加`QtWidget`模块，以及`QtCore`模块，到编译程序中。添加了正确的模块后，再次在命令行上运行`make`命令：
- en: '[PRE16]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'A `hello_world` file will be generated in the same folder. Run this file from
    the command line as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一文件夹中会生成一个`hello_world`文件。按照以下方式从命令行运行此文件：
- en: '[PRE17]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'On a macOS, the full path to the executable will be specified with the following
    path from the command line:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在macOS上，可执行文件的完整路径将从以下命令行路径指定：
- en: '[PRE18]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This should produce the following output:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会产生以下输出：
- en: '![](img/2c834541-f8a2-4f5c-b1e7-2c8f97c37a3e.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c834541-f8a2-4f5c-b1e7-2c8f97c37a3e.png)'
- en: Well, there is our first GUI program. It displays the Hello world ! in a label.
    To close the application, click on the Close button of the window.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这就是我们的第一个GUI程序。它在一个标签中显示Hello world !。要关闭应用程序，请点击窗口的关闭按钮。
- en: Let's add a dash of **Qt Style Sheet** (**QSS**) to give our label a little
    effect!
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一些**Qt样式表**（**QSS**）来给我们的标签添加一点效果！
- en: 'Modify the `hello.cpp` file as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下方式修改`hello.cpp`文件：
- en: '[PRE19]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The only change here is `label.setStyleSheet("QLabel:hover { color: rgb(60,
    179, 113)}");`.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '这里的唯一变化是`label.setStyleSheet("QLabel:hover { color: rgb(60, 179, 113)}");`。'
- en: A QSS rule is passed as an argument to the `setStyleSheet` method on the `label`
    object. The rule sets every label within our application to show the color green
    when the cursor hovers over it.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 一个QSS规则作为参数传递给`label`对象的`setStyleSheet`方法。该规则设置我们应用程序中的每个标签，当光标悬停在其上时显示绿色。
- en: 'Run the following commands to recompile the application and run it:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令重新编译应用程序并运行它：
- en: '[PRE20]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The program should appear as in the following screenshot. The label turns green
    when the mouse is placed over it:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 程序应该看起来像以下截图。当鼠标放在标签上时，标签变为绿色：
- en: '![](img/e2178602-669c-4509-90db-06cb03263baa.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e2178602-669c-4509-90db-06cb03263baa.png)'
- en: Summary
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter laid the foundation for getting to know Qt and what it can be used
    for. Installing of Qt on macOS and Linux was outlined. A small hello world application
    was written and compiled, all from the command line, without any need for an IDE.
    This meant that we were also introduced to the various steps that lead to the
    final program.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 本章为了解 Qt 及其用途奠定了基础。概述了在 macOS 和 Linux 上安装 Qt 的步骤。编写并编译了一个简单的“Hello World”应用程序，所有操作均通过命令行完成，无需任何集成开发环境（IDE）。这意味着我们还了解了导致最终程序的各种步骤。
- en: Finally, the hello world application was modified to employ QSS in a bid to
    show what other things can be done to a widget.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将“Hello World”应用程序修改为使用 QSS，以展示可以对小部件进行哪些其他操作。
- en: In [Chapter 2](a0d84833-24c7-4f5d-933b-c4d99fe82034.xhtml), *Creating Widgets
    and Layouts*, we will explore more widgets in Qt and how to organize and group
    them.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 2 章](a0d84833-24c7-4f5d-933b-c4d99fe82034.xhtml)“创建小部件和布局”中，我们将探索 Qt 中的更多小部件以及如何组织和分组它们。
