- en: '*Chapter 7*: Exploring the glTF File Format'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第7章*：探索glTF文件格式'
- en: In this chapter, we will explore glTF, a file format that contains everything
    you need to display animated models. It's a standard format that most three-dimensional
    content creation applications can export to and allows you to load any arbitrary
    model.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探索glTF，这是一个包含显示动画模型所需的一切的文件格式。这是大多数三维内容创建应用程序可以导出的标准格式，并允许您加载任意模型。
- en: This chapter focuses on the file format itself. Later chapters will focus on
    implementing loading parts of glTF files as they become relevant. By the end of
    this chapter, you should have a solid understanding of the glTF file format.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍文件格式本身。后续章节将重点介绍实现加载glTF文件部分，以使其变得相关。通过本章结束时，您应该对glTF文件格式有扎实的理解。
- en: 'This chapter will focus on building the following skills:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将专注于构建以下技能：
- en: Understanding what data is inside of a glTF file
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解glTF文件中的数据
- en: Implementing a glTF loading using cgltf
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用cgltf实现glTF加载
- en: Learning how to export glTF files from Blender
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何从Blender导出glTF文件
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter will cover every concept of glTF files that you will need to load
    and display animated models. The chapter, however, is not a complete guide to
    the file format. Before reading this chapter, take a few minutes to familiarize
    yourself with the glTF format by reading the reference guide at [https://www.khronos.org/files/gltf20-reference-guide.pdf](https://www.khronos.org/files/gltf20-reference-guide.pdf).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖您需要加载和显示动画模型的glTF文件的每个概念。然而，本章不是文件格式的完整指南。在阅读本章之前，请花几分钟时间通过阅读[https://www.khronos.org/files/gltf20-reference-guide.pdf](https://www.khronos.org/files/gltf20-reference-guide.pdf)上的参考指南来熟悉glTF格式。
- en: You will be using cgltf ([https://github.com/jkuhlmann/cgltf](https://github.com/jkuhlmann/cgltf))
    to parse glTF files. If a glTF file isn't displaying properly, it might be a bad
    file. If you suspect a file might be bad, check it against the glTF reference
    viewer at [https://gltf-viewer.donmccurdy.com/](https://gltf-viewer.donmccurdy.com/).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 您将使用cgltf ([https://github.com/jkuhlmann/cgltf](https://github.com/jkuhlmann/cgltf))来解析glTF文件。如果glTF文件显示不正常，可能是一个坏文件。如果您怀疑文件可能有问题，请在[https://gltf-viewer.donmccurdy.com/](https://gltf-viewer.donmccurdy.com/)上检查glTF参考查看器。
- en: Exploring how glTF files are stored
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索glTF文件的存储方式
- en: glTF files are stored as either plain text JSON files or in a more compact binary
    representation. The plain text variant commonly has a `.gltf` extension, while
    the binary variant commonly has a `.glb` extension.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: glTF文件存储为纯文本JSON文件或更紧凑的二进制表示。纯文本变体通常具有`.gltf`扩展名，而二进制变体通常具有`.glb`扩展名。
- en: 'There might be multiple files. A glTF file can choose to embed large chunks
    of binary data—even textures—or it can choose to store them in external files.
    This is reflected in the following screenshot of Blender3D''s glTF export options:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会有多个文件。glTF文件可以选择嵌入大块的二进制数据，甚至纹理，或者可以选择将它们存储在外部文件中。这在下面的Blender3D的glTF导出选项的截图中反映出来：
- en: '![Figure 7.1: Blender3D’s glTF export options'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.1：Blender3D的glTF导出选项'
- en: '](img/Figure_7.1_B16191.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.1_B16191.jpg)'
- en: 'Figure 7.1: Blender3D''s glTF export options'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.1：Blender3D的glTF导出选项
- en: Sample files provided with the downloadable content for this book are stored
    as glTF embedded files (`.gltf`). This is the plain text variant of glTF that
    can be inspected with any text editor. More importantly, it's a single file to
    keep track of. Even though the files provided with this book are in the glTF embedded
    format, the final code will support loading the binary format and separate files
    (`.bin`) as well.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本书提供的可下载内容的示例文件存储为glTF嵌入文件（`.gltf`）。这是可以用任何文本编辑器检查的纯文本变体。更重要的是，它是一个要跟踪的单个文件。尽管本书提供的文件是以glTF嵌入格式提供的，但最终的代码将支持加载二进制格式和单独的文件（`.bin`）。
- en: Now that you've explored the different ways a glTF file can be stored, let's
    get ready to learn what's stored inside glTF files. The glTF file was intended
    to store an entire scene, not just a single model. In the next section, you will
    explore the intended use of glTF files.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经探索了glTF文件存储的不同方式，让我们准备好学习glTF文件内部存储的内容。glTF文件旨在存储整个场景，而不仅仅是单个模型。在下一节中，您将探索glTF文件的预期用途。
- en: glTF files store a scene, not a model
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: glTF文件存储场景，而不是模型
- en: It's important to know that glTF files are meant to represent an entire three-dimensional
    scene, not just a single animated model. As such, glTF has support for features
    you won't need to use for animation, such as cameras and PBR materials. For animation,
    we only care about using a small subset of the supported features. Let's outline
    what they are.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要知道，glTF文件旨在表示整个三维场景，而不仅仅是单个动画模型。因此，glTF支持您不需要用于动画的功能，例如相机和PBR材质。对于动画，我们只关心使用受支持功能的一个小子集。让我们概述一下它们是什么。
- en: A glTF file can contain different types of meshes. It contains static meshes,
    such as props. These meshes are only moved by the animation of the node they are
    attached to; it can contain morph targets. Morph animation can be used for things
    such as facial expressions.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: glTF文件可以包含不同类型的网格。它包含静态网格，例如道具。这些网格只能通过它们附加到的节点的动画来移动；它可以包含变形目标。变形动画可以用于诸如面部表情之类的事物。
- en: A glTF file can also contain skinned meshes. These are the meshes you will use
    to animate characters. Skinned meshes describe how the vertices of a model are
    affected by the transform hierarchy (or skeleton) of the model. With a skinned
    mesh, each vertex of a mesh can be bound to a joint in the hierarchy. As the hierarchy
    animates, the mesh is deformed.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: glTF文件也可以包含蒙皮网格。这些是您将用来为角色设置动画的网格。蒙皮网格描述了模型的顶点如何受到模型的变换层次结构（或骨骼）的影响。使用蒙皮网格，网格的每个顶点可以绑定到层次结构中的一个关节。随着层次结构的动画，网格会被变形。
- en: The fact that glTF is intended to describe a scene, not a single model, is going
    to make some of the loading code a bit tricky. In the next section, you will start
    to explore what the actual content of a glTF file is from a high-level perspective.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: glTF旨在描述一个场景，而不是单个模型，这将使一些加载代码变得有些棘手。在下一节中，您将开始从高层次的角度探索glTF文件的实际内容。
- en: Exploring the glTF format
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索glTF格式
- en: The root of a glTF file is the scene. A glTF file can contain one or more scenes.
    A scene contains one or more nodes. A node can have a skin, a mesh, an animation,
    a camera, a light, or blend weights attached to it. Meshes, skins, and animations
    each store large chunks of information in buffers. To access a buffer, they contain
    an accessor that contains a buffer view, which in turn contains the buffer.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: glTF文件的根是场景。一个glTF文件可以包含一个或多个场景。一个场景包含一个或多个节点。一个节点可以附加皮肤、网格、动画、相机、光线或混合权重。网格、皮肤和动画在缓冲区中存储大量信息。要访问缓冲区，它们包含一个包含缓冲区的缓冲区视图，缓冲区视图又包含缓冲区。
- en: 'A description provided through text can be very hard to follow. The following
    diagram illustrates the file layout described. Since glTF is a scene description
    format, there are a decent number of data types that we don''t have to care about.
    The next section explores these:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 通过文本提供的描述可能很难理解。以下图表说明了所描述的文件布局。由于glTF是一种场景描述格式，有许多数据类型我们不必关心。下一节将探讨这些内容：
- en: '![Figure 7.2: The contents of a glTF file'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.2：glTF文件的内容'
- en: '](img/Figure_7.2_B16191.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.2_B16191.jpg)'
- en: 'Figure 7.2: The contents of a glTF file'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.2：glTF文件的内容
- en: Now that you have an idea of what is stored in a glTF file, the following section
    will explore the parts of the file format needed for skinned animation.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了glTF文件中存储的内容，接下来的部分将探讨蒙皮动画所需的文件格式部分。
- en: The parts you need for animation
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 需要用于动画的部分
- en: 'When using glTF files to load animated models, the required components of the
    file are the scene, nodes, meshes, and skins. This is a small subset to work with;
    these bits and their relationships are highlighted in the following diagram. The
    relationship between these data types can be depicted as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用glTF文件加载动画模型时，文件的必需组件是场景、节点、网格和皮肤。这是一个要处理的小子集；以下图表突出显示了这些部分及其关系。这些数据类型之间的关系可以描述如下：
- en: '![Figure 7.3: Parts of a glTF file used for skinned animation'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.3：用于蒙皮动画的glTF文件的部分'
- en: '](img/Figure_7.3_B16191.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.3_B16191.jpg)'
- en: 'Figure 7.3: Parts of a glTF file used for skinned animation'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.3：用于蒙皮动画的glTF文件的部分
- en: The preceding diagram omits much of the data that is in each data structure,
    instead focusing only on what you will need to implement skinned animation. In
    the next section, we will explore what parts of a glTF file are not required for
    skinned animation.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图省略了每个数据结构中的大部分数据，而是只关注您需要实现蒙皮动画的内容。在下一节中，我们将探讨glTF文件中不需要用于蒙皮动画的部分。
- en: The parts you don't need for animation
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不需要用于动画的部分
- en: To implement skinned animations, you won't need lights, cameras, materials,
    textures, images, and samplers. In the following section, you will explore how
    to actually read data from glTF files.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现蒙皮动画，您不需要灯光、相机、材质、纹理、图像和采样器。在下一节中，您将探索如何从glTF文件中实际读取数据。
- en: Accessing data
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问数据
- en: 'Accessing data gets a little tricky, but it''s not too difficult. Mesh, skin,
    and animation objects all contain a glTF accessor. This **accessor** references
    a **buffer view** and the buffer view references a **buffer**. The following diagram
    demonstrates this relationship:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 访问数据有点棘手，但并不太困难。网格、皮肤和动画对象都包含一个glTF访问器。这个**访问器**引用一个**缓冲区视图**，而缓冲区视图引用一个**缓冲区**。以下图表展示了这种关系：
- en: '![Figure 7.4: Accessing data in a glTF file'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.4：访问glTF文件中的数据'
- en: '](img/Figure_7.4_B16191.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.4_B16191.jpg)'
- en: 'Figure 7.4: Accessing data in a glTF file'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.4：访问glTF文件中的数据
- en: Given these three separate steps, how can you access the buffer data? In the
    next section, you will learn how data is interpreted from buffers using buffer
    views and finally, accessors.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这三个单独的步骤中，如何访问缓冲区数据？在下一节中，您将学习如何使用缓冲区视图和最终访问器从缓冲区中解释数据。
- en: Buffer
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缓冲区
- en: 'Think of a buffer as an OpenGL buffer. It''s just a large, linear array of
    values. This is analogous to the `Attributes` class you built in [*Chapter 6*](B16191_06_Final_JC_ePub.xhtml#_idTextAnchor104),
    *Building An Abstract Renderer*. The `Set` function of the `Attributes` class
    calls `glBufferData`, which has the following signature:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 将缓冲区视为OpenGL缓冲区。它只是一个大的、线性的值数组。这类似于您在第6章《构建抽象渲染器》中构建的`Attributes`类。`Attributes`类的`Set`函数调用`glBufferData`，其签名如下：
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: A buffer in glTF contains all the information needed to call the `glBufferData`
    function. It contains a size, a void pointer, and optional offsets, which only
    modify the source pointer and the size. Think of a glTF buffer as everything needed
    to fill an OpenGL buffer with data.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: glTF中的缓冲区包含调用`glBufferData`函数所需的所有信息。它包含大小、void指针和可选的偏移量，这些偏移量只修改源指针和大小。将glTF缓冲区视为填充OpenGL缓冲区所需的所有内容。
- en: In the next section, you will learn how buffer views are used in conjunction
    with buffers.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，您将学习如何将缓冲区视图与缓冲区一起使用。
- en: Buffer view
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缓冲区视图
- en: 'A buffer is just some large chunk of data. There is no context for what is
    stored inside the buffer. This is where the buffer view comes in. The buffer view
    describes what is in a buffer. If a buffer contains the information for `glBufferData`,
    then a buffer view contains some of the parameters to call `glVertexAttribPointer`.
    The `glVertexAttribPointer` function has the following signature:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 缓冲区只是一些大块的数据。没有上下文来描述缓冲区内存储的内容。这就是缓冲区视图的作用。缓冲区视图描述了缓冲区中的内容。如果缓冲区包含`glBufferData`的信息，那么缓冲区视图包含调用`glVertexAttribPointer`的一些参数。`glVertexAttribPointer`函数的签名如下：
- en: '[PRE1]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The buffer view contains `type`, which determines whether the view is a vertex
    buffer or an index buffer. This is important since a vertex buffer is bound to
    `GL_ARRAY_BUFFER`, but an index buffer is bound to `GL_ELEMENT_ARRAY_BUFFER`.
    In [*Chapter 6*](B16191_06_Final_JC_ePub.xhtml#_idTextAnchor104), *Building An
    Abstract Renderer*, we built two different classes for these different buffer
    types.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 缓冲区视图包含`type`，它确定视图是顶点缓冲区还是索引缓冲区。这很重要，因为顶点缓冲区绑定到`GL_ARRAY_BUFFER`，而索引缓冲区绑定到`GL_ELEMENT_ARRAY_BUFFER`。在[*第6章*](B16191_06_Final_JC_ePub.xhtml#_idTextAnchor104)，*构建抽象渲染器*中，我们为这些不同的缓冲区类型构建了两个不同的类。
- en: Like the buffer, the buffer view also contains some optional offsets that further
    modify the location of the source pointer and its size. In the following section,
    you will explore how to use accessors, which describe the contents of the buffer
    view.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 与缓冲区一样，缓冲区视图还包含一些可选的偏移量，进一步修改源指针的位置和大小。在接下来的部分中，您将探讨如何使用描述缓冲区视图内容的accessor。
- en: Accessor
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: accessor
- en: An accessor stores higher-level information. Most importantly, the accessor
    describes the type of data you are dealing with, such as `scalar`, `vec2`, `vec3`,
    or `vec4`. The `size` argument of `glVertexAttribPointer` is determined using
    this data.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: accessor存储更高级别的信息。最重要的是，accessor描述了您正在处理的数据类型，比如`scalar`、`vec2`、`vec3`或`vec4`。使用这些数据来确定`glVertexAttribPointer`的`size`参数。
- en: The accessor answers questions such as whether the data is normalized and what
    the storage mode of the data is. The accessor also contains additional offset,
    size, and stride information on top of what the buffer and buffer view already
    contain.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: accessor回答了诸如数据是否规范化以及数据的存储模式是什么等问题。accessor还包含了关于缓冲区和缓冲区视图已经包含的附加偏移量、大小和步幅信息。
- en: The next section will demonstrate how data can be loaded into a linear scalar
    array from a glTF file.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将演示如何从glTF文件中将数据加载到线性标量数组中。
- en: Example
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 例子
- en: 'Even with the relationship of the accessor, buffer view, and buffer laid out,
    parsing data might still be a bit confusing. To try to clear it up a bit, let''s
    explore how you could convert an accessor to a flat list of floating-point values.
    The following code is intended to be a sample; it will not be used in the rest
    of this book:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 即使accessor、buffer view和buffer的关系已经确定，解析数据可能仍然有点混乱。为了尝试澄清一下，让我们探讨一下如何将accessor转换为浮点值的平面列表。以下代码旨在作为示例；它将不会在本书的其余部分中使用：
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The code for parsing glTF files can get verbose; in the previous code sample,
    the glTF file was already parsed. Most of the work in loading glTF files is actually
    in parsing the binary or JSON data. In the next section, we will explore how the
    cgltf library can be used to parse glTF files.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 解析glTF文件的代码可能会变得冗长；在前面的代码示例中，glTF文件已经被解析。加载glTF文件的大部分工作实际上是解析二进制或JSON数据。在下一节中，我们将探讨如何使用cgltf库来解析glTF文件。
- en: Exploring cgltf
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索cgltf
- en: In the last section, we explored what it would take to convert a glTF accessor
    into a linear array of floating-point numbers. The code omitted some of the more
    complicated tasks, such as normalizing the data or dealing with different storage
    types.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们探讨了将glTF accessor转换为浮点数的线性数组需要做些什么。代码省略了一些更复杂的任务，比如规范化数据或处理不同的存储类型。
- en: The sample code provided also assumed that the data would have already been
    parsed out of the JSON (or binary) format. Writing a JSON parser is out of the
    scope of this book but dealing with glTF files is not.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 提供的示例代码还假定数据已经从JSON（或二进制）格式中解析出来。编写JSON解析器不在本书的范围内，但处理glTF文件是在范围内的。
- en: To help manage some of the complexity of loading glTF files, as well as to avoid
    having to write a JSON parser from scratch, the next section will teach you how
    to use cgltf to load JSON files. Cgltf is a single header glTF loading library;
    you can find it on GitHub at [https://github.com/jkuhlmann/cgltf](https://github.com/jkuhlmann/cgltf).
    In the next section, we will start to integrate cgltf into our project.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助管理加载glTF文件的一些复杂性，以及避免从头开始编写JSON解析器，下一节将教您如何使用cgltf加载JSON文件。Cgltf是一个单头文件的glTF加载库；您可以在GitHub上找到它[https://github.com/jkuhlmann/cgltf](https://github.com/jkuhlmann/cgltf)。在下一节中，我们将开始将cgltf集成到我们的项目中。
- en: Integrating cgltf
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集成cgltf
- en: 'To integrate cgltf into a project, download the header file from GitHub at
    [https://github.com/jkuhlmann/cgltf/blob/master/cgltf.h](https://github.com/jkuhlmann/cgltf/blob/master/cgltf.h).
    Then, add this header file to the project. Next, add a new `.c` file to the project
    and name it `cgltf.c`. This file should contain the following code:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要将cgltf集成到项目中，从GitHub上下载头文件[https://github.com/jkuhlmann/cgltf/blob/master/cgltf.h](https://github.com/jkuhlmann/cgltf/blob/master/cgltf.h)。然后，将此头文件添加到项目中。接下来，向项目添加一个新的`.c`文件，并将其命名为`cgltf.c`。该文件应包含以下代码：
- en: '[PRE3]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: CGLTF is now integrated into the project. In this chapter, you will implement
    code that parses a glTF file. How to load the contents of the glTF file into runtime
    data will be covered in later chapters as the code for that runtime data is written.
    In the following section, we will learn how to implement the glTF parsing code.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: CGLTF现在已经集成到项目中。在本章中，您将实现解析glTF文件的代码。如何将glTF文件的内容加载到运行时数据将在以后的章节中进行覆盖，因为那时的运行时数据的代码已经编写好了。在接下来的部分，我们将学习如何实现glTF解析代码。
- en: Creating a glTF loader
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个glTF加载器
- en: In this section, we will explore how to load a glTF file using cgltf. The code
    to load the file into a runtime data structure, `cgltf_data`, is simple. In future
    chapters, you will learn how to parse the contents of this `cgltf_data` struct.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨如何使用cgltf加载glTF文件。将文件加载到运行时数据结构`cgltf_data`中的代码很简单。在以后的章节中，您将学习如何解析这个`cgltf_data`结构的内容。
- en: 'To load a file, you need to create an instance of `cgltf_options`. You won''t
    need to set any option flags; just instantiate the `cgltf_options` struct with
    `0` for all member values. Next, declare a `cgltf_data` pointer. The address this
    pointer will be passed to is `cgltf_parse_file`. After `cgltf_parse_file` has
    filled in the `cgltf_data` structure, you are ready to parse the contents of the
    file. To free the `cgltf_data` structure later, call `cgltf_free`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要加载一个文件，你需要创建一个`cgltf_options`的实例。你不需要设置任何选项标志；只需用`0`实例化`cgltf_options`结构的所有成员值。接下来，声明一个`cgltf_data`指针。这个指针的地址将被传递给`cgltf_parse_file`。在`cgltf_parse_file`填充了`cgltf_data`结构之后，你就可以解析文件的内容了。要稍后释放`cgltf_data`结构，调用`cgltf_free`：
- en: 'Create a new file, `GLTFLoader.h` that includes `cgltf.h`. Add function declarations
    for the `LoadGLTFFile` and `FreeGLTFFile` functions:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新文件`GLTFLoader.h`，其中包括`cgltf.h`。为`LoadGLTFFile`和`FreeGLTFFile`函数添加函数声明：
- en: '[PRE4]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create a new file, `GLTFLoader.cpp`. This function takes a path and returns
    a `cgltf_data` pointer. Internally, the function calls `cgltf_parse_file` to load
    the glTF data from the file. `cgltf_load_buffers` is used to load any external
    buffer data. Finally, `cgltf_validate` makes sure that the glTF file that was
    just loaded was valid:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新文件`GLTFLoader.cpp`。这个函数接受一个路径并返回一个`cgltf_data`指针。在内部，该函数调用`cgltf_parse_file`从文件中加载glTF数据。`cgltf_load_buffers`用于加载任何外部缓冲区数据。最后，`cgltf_validate`确保刚刚加载的glTF文件是有效的：
- en: '[PRE5]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Implement the `FreeGLTFFile` function in `GLTFLoader.cpp` as well. This function
    is simple; it needs to call `cgltf_free` if the input pointer wasn''t `null`:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`GLTFLoader.cpp`中实现`FreeGLTFFile`函数。这个函数很简单；如果输入指针不是`null`，它需要调用`cgltf_free`：
- en: '[PRE6]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In later chapters, you will expand on the glTF `Loader` functions by introducing
    functions to load meshes, poses, and animations. In the next section, you will
    explore how glTF files can be exported from Blender3D.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在后面的章节中，你将通过引入加载网格、姿势和动画的函数来扩展glTF `Loader`函数。在下一节中，你将探索如何从Blender3D导出glTF文件。
- en: Exploring the sample assets
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索示例资产
- en: The sample files you will be using throughout this book are CC0, public-domain-licensed
    assets from Quaternius. You can find additional assets in a similar style at [http://quaternius.com/assets.html](http://quaternius.com/assets.html).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在本书中使用的示例文件是来自Quaternius的CC0、公共领域许可的资产。你可以在[http://quaternius.com/assets.html](http://quaternius.com/assets.html)找到类似风格的其他资产。
- en: Additionally, later chapters also include screenshots of the open, three-dimensional
    Mannequin from GDQuest, available under an MIT license at [https://github.com/GDQuest/godot-3d-mannequin](https://github.com/GDQuest/godot-3d-mannequin).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，后面的章节还包括了GDQuest的开放式三维Mannequin的屏幕截图，这些屏幕截图在[https://github.com/GDQuest/godot-3d-mannequin](https://github.com/GDQuest/godot-3d-mannequin)以MIT许可证的形式提供。
- en: Some assets already come in a glTF format, but some might be in `.blend`, `.fbx`,
    or some other format. When this happens, it's easy to import the model into Blender
    and export a glTF file. The next section will guide you through exporting glTF
    files from Blender.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 一些资产已经以glTF格式提供，但有些可能是`.blend`、`.fbx`或其他格式。当发生这种情况时，很容易将模型导入Blender并导出glTF文件。下一节将指导你如何从Blender导出glTF文件。
- en: Exporting from Blender
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从Blender导出
- en: Blender is a free, three-dimensional content creation tool. You can download
    Blender from [https://www.blender.org/](https://www.blender.org/). The following
    instructions are written for Blender 2.8 but they should work the same in newer
    versions as well.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Blender是一个免费的三维内容创作工具。你可以从[https://www.blender.org/](https://www.blender.org/)下载Blender。以下说明是针对Blender
    2.8编写的，但在更新的版本中也应该可以使用。
- en: If the model you are importing is already a `.blend` file, just double-click
    it and it should load up in Blender.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你要导入的模型已经是`.blend`文件，只需双击它，它就会在Blender中加载。
- en: 'If the model is in a different format, such as `.DAE` or `.FBX`, you will need
    to import it. To do so, open Blender and you should see the default scene load
    up. This default scene has a cube, a light, and a camera:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果模型是以不同的格式，比如`.DAE`或`.FBX`，你需要导入它。要这样做，打开Blender，你应该看到默认场景加载。这个默认场景有一个立方体、一个灯光和一个摄像头：
- en: '![Figure 7.5: A default Blender3D scene'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.5：默认的Blender3D场景'
- en: '](img/Figure_7.5_B16191.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.5_B16191.jpg)'
- en: 'Figure 7.5: A default Blender3D scene'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.5：默认的Blender3D场景
- en: Select the cube by left-clicking on it, then hover over the three-dimensional
    viewport and hit the *Delete* key to delete the cube. Left-click on the camera
    to select it and delete it by hitting the *Delete* key. Do the same for the light.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 通过左键单击选择立方体，然后悬停在三维视口上，按下*删除*键删除立方体。左键单击选择摄像头，然后按下*删除*键删除摄像头。对于灯光也是一样。
- en: You should now have an empty scene. From the **File** menu, select **File**|**Import**
    and select the appropriate model format to import. Find your file and double-click
    it to import it. Once a model is imported, select **File**|**Export glTF 2.0**.
    Set the export format to either glTF (text file) or glb (binary file).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该有一个空场景。从**文件**菜单中，选择**文件**|**导入**，然后选择适当的模型格式进行导入。找到你的文件，双击导入它。一旦模型被导入，选择**文件**|**导出
    glTF 2.0**。将导出格式设置为glTF（文本文件）或glb（二进制文件）。
- en: Summary
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned what glTF files are, what parts of the glTF format
    are useful for skinned animation, and how to use cglTF to load a glTF file. Don't
    worry if the format is still a bit confusing; it will make more sense as you start
    to parse various bits of data from cgltf files. Using cgltf will let you focus
    on converting glTF data into useful runtime structures without having to worry
    about manually parsing JSON files. In the next chapter, you will start implementing
    the building blocks of animation by implementing curves, frames, and tracks.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解了什么是glTF文件，glTF格式的哪些部分对于蒙皮动画是有用的，以及如何使用cglTF来加载glTF文件。如果这个格式还有点令人困惑，不要担心；当你开始解析cgltf文件中的各种数据时，它会变得更加清晰。使用cgltf将让你专注于将glTF数据转换为有用的运行时结构，而不必担心手动解析JSON文件。在下一章中，你将开始实现动画的构建块，包括曲线、帧和轨道。
