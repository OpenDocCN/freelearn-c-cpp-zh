- en: '13'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '13'
- en: Generating Documentation
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成文档
- en: High-quality code is not only well written, working, and tested—it is also thoroughly
    documented. Documentation allows us to share information that might otherwise
    get lost, draw a bigger picture, give context, reveal intent, and—finally—educate
    both external users and maintainers.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 高质量的代码不仅仅是编写得好、运行正常并经过测试——它还需要有完善的文档。文档能够帮助我们分享可能会丢失的信息，描绘更大的图景，提供上下文，揭示意图，最终——教育外部用户和维护者。
- en: Do you remember the last time you joined a new project and got lost for hours
    in a maze of directories and files? This can be avoided. Truly excellent documentation
    leads a complete newcomer to the exact line of code they’re looking for in seconds.
    Sadly, the issue of missing documentation is often overlooked. No wonder—it takes
    considerable skill, and many of us aren’t very good at it. Furthermore, documentation
    and code can quickly become outdated. Unless a strict update and review process
    is implemented, it’s easy to forget that documentation needs attention too.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你还记得上次加入一个新项目时，迷失在一堆目录和文件中几个小时吗？这一问题是可以避免的。真正优秀的文档可以让一个完全陌生的人在几秒钟内找到他们需要的代码行。可惜，缺乏文档的问题经常被忽视。难怪如此——编写文档需要相当的技能，而我们中的许多人并不擅长这一点。此外，文档和代码很容易变得过时。除非实施严格的更新和审查流程，否则很容易忘记文档也需要关注。
- en: 'Some teams (in the interest of time or because they are encouraged to do so
    by managers) follow a practice of writing *self-documenting code*. By choosing
    meaningful, readable identifiers for filenames, functions, variables, and so on,
    they hope to avoid the chore of documenting. Even the best function signatures
    don’t ensure that all necessary information is conveyed—for example, `int removeDuplicates();`
    is descriptive, but it doesn’t reveal what is returned. It could be the number
    of duplicates found, the number of items remaining, or something else—it’s unclear.
    While the habit of good naming is absolutely correct, it cannot replace the act
    of conscientious documentation. Remember: there’s no such thing as a free lunch.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 一些团队（为了节省时间或因为管理层的鼓励）采用了编写*自文档化代码*的做法。通过为文件名、函数、变量等选择有意义且易读的标识符，他们希望避免编写文档的麻烦。即使是最好的函数签名，也不能确保传达所有必要的信息——例如，`int
    removeDuplicates();`很有描述性，但它并没有说明返回的是什么。它可能是发现的重复项数量，剩余项的数量，或其他什么——这并不明确。虽然良好的命名习惯是绝对正确的，但它不能替代用心的文档编写。记住：没有免费的午餐。
- en: To make things easier, professionals use automatic documentation generators
    that analyze code and comments in source files to produce comprehensive documentation
    in various formats. Adding such generators to a CMake project is very simple—let’s
    see how!
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化工作，专业人员使用自动文档生成器，这些生成器会分析代码和源文件中的注释，生成各种格式的全面文档。将此类生成器添加到 CMake 项目中非常简单——让我们来看看如何做！
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下主要内容：
- en: Adding Doxygen to your project
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Doxygen 添加到你的项目中
- en: Generating documentation with a modern look
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用现代化外观生成文档
- en: Enhancing output with custom HTML
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自定义 HTML 增强输出
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You can find the code files that are present in this chapter on GitHub at [https://github.com/PacktPublishing/Modern-CMake-for-Cpp-2E/tree/main/examples/ch13](https://github.com/PacktPublishing/Modern-CMake-for-Cpp-2E/tree/main/examples/ch13).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 GitHub 上找到本章中出现的代码文件，地址是：[https://github.com/PacktPublishing/Modern-CMake-for-Cpp-2E/tree/main/examples/ch13](https://github.com/PacktPublishing/Modern-CMake-for-Cpp-2E/tree/main/examples/ch13)。
- en: 'To build the examples provided in this book, always use the recommended commands:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建本书中提供的示例，请始终使用推荐的命令：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Be sure to replace the placeholders `<build tree>` and `<source tree>` with
    appropriate paths. As a reminder: **build tree** is the path to the target/output
    directory, and **source tree** is the path at which your source code is located.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一定要将占位符`<build tree>`和`<source tree>`替换为适当的路径。提醒一下：**build tree**是目标/输出目录的路径，**source
    tree**是源代码所在的路径。
- en: Adding Doxygen to your project
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Doxygen 添加到你的项目中
- en: 'One of the most established and popular tools for generating documentation
    from C++ sources is Doxygen. And when I say “established,” I mean it: the first
    version was released by Dimitri van Heesch in October 1997\. Since then, it has
    grown immensely and is actively supported by almost 250 contributors to its repository
    ([https://github.com/doxygen/doxygen](https://github.com/doxygen/doxygen)).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 用于从 C++ 源代码生成文档的最成熟和最流行的工具之一就是 Doxygen。当我说“成熟”时，我是认真的：第一个版本是由 Dimitri van Heesch
    于 1997 年 10 月发布的。此后，它得到了巨大的发展，并得到了几乎 250 位贡献者的积极支持（[https://github.com/doxygen/doxygen](https://github.com/doxygen/doxygen)）。
- en: You might be concerned about the challenge of incorporating Doxygen into larger
    projects that haven’t used documentation generation from the start. Indeed, the
    task of annotating every function can appear overwhelming. However, I encourage
    you to start small. Focus on documenting elements you’ve recently worked on in
    your latest commits. Remember, even partially complete documentation is a step
    forward compared to none at all, and it gradually helps in building a more comprehensive
    understanding of your project.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会担心将 Doxygen 纳入没有从一开始就使用文档生成的大型项目中的挑战。的确，注释每个函数的任务可能看起来非常繁重。然而，我鼓励你从小处开始。专注于记录你最近在最新提交中工作的元素。记住，即使是部分完成的文档也比完全没有要好，而且它逐渐有助于建立你项目的更全面的理解。
- en: 'Doxygen can produce documentation in the following formats:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Doxygen 可以生成以下格式的文档：
- en: '**HyperText Markup Language** (**HTML**)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**超文本标记语言** (**HTML**)'
- en: '**Rich Text Format** (**RTF**)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**富文本格式** (**RTF**)'
- en: '**Portable Document Format** (**PDF**)'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可移植文档格式** (**PDF**)'
- en: '**Lamport TeX** (**LaTeX**)'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Lamport TeX** (**LaTeX**)'
- en: '**PostScript** (**PS**)'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PostScript** (**PS**)'
- en: Unix manual (man pages)
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unix 手册（man 页面）
- en: '**Microsoft Compiled HTML** Help (.CHM)'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**微软编译的 HTML** 帮助 (.CHM)'
- en: If you annotate your code with comments providing additional information in
    the format specified by Doxygen, it will parse them to enrich the output file.
    Moreover, the code structure will be analyzed to produce helpful charts and diagrams.
    The latter is optional, as it requires the external Graphviz tool ([https://graphviz.org/](https://graphviz.org/)).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在代码中使用注释按照 Doxygen 指定的格式提供额外信息，它会解析这些注释以丰富输出文件。此外，代码结构还将被分析以生成有用的图表和图示。后者是可选的，因为它需要外部的
    Graphviz 工具（[https://graphviz.org/](https://graphviz.org/)）。
- en: 'The developer should first consider the following question: *Will the users
    of the project only receive the documentation, or will they generate it themselves
    (perhaps when building from source)*? The first option implies that documentation
    is distributed with the binaries, available online, or (less elegantly) checked
    in with the source code into the repository.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者应该首先考虑以下问题：*项目的用户只会接收文档，还是他们会自己生成文档（例如在从源代码构建时）*？第一个选项意味着文档会与二进制文件一起分发，或者在线提供，或者（不那么优雅地）与源代码一起提交到代码库中。
- en: 'This consideration matters because if you want users to generate documentation
    during the build, they will need the dependencies present in their system. This
    isn’t a significant problem since Doxygen and Graphviz are available through most
    package managers, and all that’s required is a simple command, such as this one
    for Debian:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这个考虑非常重要，因为如果你希望用户在构建过程中生成文档，他们的系统中必须存在这些依赖项。这并不是一个大问题，因为 Doxygen 和 Graphviz
    可以通过大多数包管理器获得，所需要的只是一个简单的命令，比如针对 Debian 系统的命令：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Binaries are also available for Windows (check the project’s website in the
    *Further reading* section).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 版本的二进制文件也可以使用（请查看项目网站的*进一步阅读*部分）。
- en: However, some users might not be comfortable installing this tooling. We must
    decide whether to generate documentation for users or have them add the dependencies
    if needed. The project could automatically add them for users as well, as described
    in *Chapter 9*, *Managing Dependencies in CMake*. Note that Doxygen is built with
    CMake, so you already know how to compile it from sources if needed.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，一些用户可能不愿意安装这些工具。我们必须决定是为用户生成文档，还是让他们在需要时添加依赖项。项目也可以像*第 9 章*中描述的那样，自动为用户添加这些依赖项，*管理
    CMake 中的依赖项*。请注意，Doxygen 是使用 CMake 构建的，因此如果需要，你已经知道如何从源代码编译它。
- en: When Doxygen and Graphviz are installed in the system, we can add the generation
    to our project. Contrary to what some online sources suggest, this isn’t as difficult
    or involved as it might seem. We don’t need to create external configuration files,
    provide paths to the Doxygen executable, or add custom targets. Since CMake 3.9,
    we can use the `doxygen_add_docs()` function from the `FindDoxygen` find-module,
    which sets up the documentation target.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当系统中安装了 Doxygen 和 Graphviz 时，我们可以将文档生成功能添加到项目中。与一些在线资料所建议的相反，这并不像看起来那么困难或复杂。我们无需创建外部配置文件，提供
    Doxygen 可执行文件的路径，或添加自定义目标。自 CMake 3.9 起，我们可以使用来自 `FindDoxygen` 查找模块的 `doxygen_add_docs()`
    函数，它会设置文档目标。
- en: 'The signature looks like this:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 函数签名如下：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The first argument specifies the target name, which we need to build explicitly
    with the `-t` argument to `cmake` (after generating a build tree), as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数指定目标名称，我们需要在 `cmake` 的 `-t` 参数中显式构建该目标（生成构建树之后），如下所示：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Or, we can ensure that the documentation is always built by adding the `ALL`
    argument, although this is usually not necessary. The `WORKING_DIRECTORY` option
    is straightforward; it specifies the directory where the command should be run.
    The value set by the `COMMENT` option is displayed before the documentation generation
    starts, providing useful information or instructions.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以通过添加 `ALL` 参数来确保始终构建文档，尽管通常不需要这样做。`WORKING_DIRECTORY` 选项非常简单；它指定了命令应在其中执行的目录。由
    `COMMENT` 选项设置的值会在文档生成开始前显示，提供有用的信息或说明。
- en: 'We’ll follow the practice from previous chapters and create a utility module
    with a helper function (so it can be reused in other projects), as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将遵循前几章的做法，创建一个包含辅助函数的工具模块（以便在其他项目中重用），如下所示：
- en: '**ch13/01-doxygen/cmake/Doxygen.cmake**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**ch13/01-doxygen/cmake/Doxygen.cmake**'
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The function accepts two arguments—`input` and `output` directories—and creates
    a custom `doxygen` target. Here’s what happens:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数接受两个参数——`input` 和 `output` 目录——并创建一个自定义的 `doxygen` 目标。以下是发生的过程：
- en: First, we use CMake’s built-in Doxygen find-module to determine whether Doxygen
    is available in the system.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们使用 CMake 内建的 Doxygen 查找模块来确定系统中是否安装了 Doxygen。
- en: If it isn’t available, we create a dummy `doxygen` target that informs the user
    and runs a `false` command, which (on Unix-like systems) returns `1`, causing
    the build to fail. We terminate the function at that point with `return()`.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 Doxygen 不可用，我们会创建一个虚拟的 `doxygen` 目标，向用户提示并运行 `false` 命令，（在类 Unix 系统中）返回 `1`，导致构建失败。此时，我们会用
    `return()` 终止该函数。
- en: If Doxygen is available, we configure it to generate HTML output in the provided
    `output` directory. Doxygen is extremely configurable (find out more in the official
    documentation). To set any option, simply follow the example by calling `set()`
    and prepend its name with `DOXYGEN_`.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 Doxygen 可用，我们将其配置为在提供的 `output` 目录中生成 HTML 输出。Doxygen 是极其可配置的（更多信息请参阅官方文档）。要设置任何选项，只需按照示例调用
    `set()` 并在选项名前加上 `DOXYGEN_` 前缀。
- en: Set up the actual `doxygen` target. All the `DOXYGEN_` variables will be forwarded
    to Doxygen’s configuration file, and documentation will be generated from the
    provided `input` directory in the source tree.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置实际的 `doxygen` 目标。所有 `DOXYGEN_` 变量将被转发到 Doxygen 的配置文件中，并从提供的源树中的 `input` 目录生成文档。
- en: If your documentation is to be generated by users, *step 2* should probably
    involve installing Doxygen instead.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的文档需要由用户生成，*步骤 2* 可能应该涉及安装 Doxygen。
- en: 'To use this function, we can incorporate it into the main listfile of our project
    as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用这个函数，我们可以将其集成到项目的主列表文件中，如下所示：
- en: '**ch13/01-doxygen/CMakeLists.txt**'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**ch13/01-doxygen/CMakeLists.txt**'
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Not difficult at all! Building the `doxygen` target generates HTML documentation
    that looks like this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一点也不难！构建 `doxygen` 目标会生成类似这样的 HTML 文档：
- en: '![](img/B19844_13_01.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19844_13_01.png)'
- en: 'Figure 13.1: Class reference generated with Doxygen'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.1：使用 Doxygen 生成的类参考
- en: 'To add important details in **Member Function Documentation**, we can precede
    the C++ method declaration with an appropriate comment in the header file, like
    so:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在**成员函数文档**中添加重要细节，我们可以在头文件中用适当的注释将 C++ 方法声明之前，像这样：
- en: '**ch13/01-doxygen/src/calc.h (fragment)**'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**ch13/01-doxygen/src/calc.h（片段）**'
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This format is known as Javadoc. It is important to begin the comment block
    with double asterisks: `/**`. More information can be found in the description
    of Doxygen’s docblocks (see the link in the *Further reading* section). The `Multiply`
    function with such annotations will be rendered as shown in the following figure:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这种格式被称为 Javadoc。重要的是，注释块应该以双星号开始：`/**`。更多信息可以在 Doxygen 的 docblocks 描述中找到（参见
    *Further reading* 部分的链接）。带有这种注释的 `Multiply` 函数将如下面的图所示呈现：
- en: '![](img/B19844_13_02.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19844_13_02.png)'
- en: 'Figure 13.2: Annotations of the parameters and result'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.2：参数和结果的注释
- en: 'As mentioned earlier, if Graphviz is installed, Doxygen will detect it and
    generate dependency diagrams, as illustrated here:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，如果安装了 Graphviz，Doxygen 会自动检测并生成依赖图，正如下图所示：
- en: '![](img/B19844_13_03.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19844_13_03.png)'
- en: 'Figure 13.3: Inheritance and collaboration diagrams generated by Doxygen'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.3：由 Doxygen 生成的继承和协作图
- en: By generating documentation directly from the source code, we establish a process
    that enables quick updates in tandem with any code changes during the development
    cycle. Also, any overlooked updates in the comments are likely to be noticed during
    code review.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 通过直接从源代码生成文档，我们建立了一种在开发周期中随代码更改迅速更新的流程。此外，在代码审查过程中，任何被忽视的注释更新也很容易被发现。
- en: Many developers express concerns that the design provided by Doxygen appears
    dated, making them hesitant to showcase the generated documentation to their clients.
    However, there is a simple solution to this issue.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 许多开发者表达了对 Doxygen 提供的设计显得过时的担忧，这让他们不愿意将生成的文档展示给客户。然而，这个问题有一个简单的解决方案。
- en: Generating documentation with a modern look
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成现代化外观的文档
- en: Having your project documented with a clean, fresh design is important. After
    all, if we put all this work into writing high-quality documentation for our cutting-edge
    project, it is imperative that the user perceives it as such. Although Doxygen
    is feature-rich, it isn’t renowned for adhering to the latest visual trends. However,
    revamping its appearance doesn’t require substantial effort.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 使用干净、清新的设计对项目进行文档化非常重要。毕竟，如果我们为我们的前沿项目投入了这么多精力编写高质量的文档，用户必须意识到这一点。尽管 Doxygen
    功能丰富，但它并不以遵循最新视觉趋势而著称。然而，重新设计其外观并不需要大量的努力。
- en: 'Luckily, a developer named `jothepro` created a theme called `doxygen-awesome-css`,
    which offers a modern, customizable design. This theme is presented in the following
    screenshot:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，一位名为 `jothepro` 的开发者创建了一个名为 `doxygen-awesome-css` 的主题，它提供了一个现代化且可定制的设计。这个主题在下面的截图中展示：
- en: '![](img/B19844_13_04.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19844_13_04.png)'
- en: 'Figure 13.4: HTML documentation in doxygen-awesome-css theme'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.4：doxygen-awesome-css 主题下的 HTML 文档
- en: The theme doesn’t require any additional dependencies and can be easily fetched
    from its GitHub page at [https://github.com/jothepro/doxygen-awesome-css](https://github.com/jothepro/doxygen-awesome-css).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 该主题不需要任何额外的依赖项，可以通过其 GitHub 页面轻松获取：[https://github.com/jothepro/doxygen-awesome-css](https://github.com/jothepro/doxygen-awesome-css)。
- en: While some online sources recommend using a combination of applications, like
    transforming Doxygen’s output with Sphinx via Breathe and Exhale extensions, this
    method can be complex and dependency-heavy (requiring Python, for example). A
    simpler approach is usually more practical, particularly for teams where not all
    members are deeply familiar with CMake.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管一些在线资源推荐使用多种应用程序的组合，比如通过 Breathe 和 Exhale 扩展将 Doxygen 的输出与 Sphinx 配合使用，但这种方法可能会很复杂且依赖较多（例如需要
    Python）。通常来说，更简洁的方法更为实际，尤其是对于那些并非每个成员都深度了解 CMake 的团队来说。
- en: 'We can efficiently implement this theme with an automated process. Let’s see
    how we can extend our `Doxygen.cmake` file to use it by adding a new macro:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过自动化流程高效实现这一主题。让我们看看如何通过添加一个新宏来扩展我们的 `Doxygen.cmake` 文件以使用它：
- en: '**ch13/02-doxygen-nice/cmake/Doxygen.cmake (fragment)**'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**ch13/02-doxygen-nice/cmake/Doxygen.cmake（片段）**'
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We already know all of these commands from previous chapters of the book, but
    let’s reiterate what happens for perfect clarity:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经从书中的前几章了解了所有这些命令，但为了确保完全清晰，让我们再重复一遍发生了什么：
- en: Fetching `doxygen-awesome-css` from Git using the `FetchContent` module
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `FetchContent` 模块从 Git 获取 `doxygen-awesome-css`
- en: Configuring extra options for Doxygen (these are specifically recommended by
    the theme’s `README` file)
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置 Doxygen 的额外选项（这些是主题的 `README` 文件中专门推荐的）
- en: Copying the theme’s `css` file to Doxygen’s output directory
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将主题的 `css` 文件复制到 Doxygen 的输出目录
- en: 'As you can imagine, it’s best to call this macro in the `Doxygen` function
    right before `doxygen_add_docs()`, like this:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所想，最好在`Doxygen`函数中调用这个宏，并在`doxygen_add_docs()`之前，如下所示：
- en: '**ch13/02-doxygen-nice/cmake/Doxygen.cmake (fragment)**'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**ch13/02-doxygen-nice/cmake/Doxygen.cmake（片段）**'
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Remember, all variables in macros are set in the scope of the calling function.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，宏中的所有变量都在调用函数的作用域内设置。
- en: We can now enjoy a modern style in our generated HTML documentation and share
    it proudly with the world. However, our theme offers some JavaScript modules to
    enhance the experience. How do we include them?
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以在生成的HTML文档中享受现代风格，并骄傲地与世界分享它。然而，我们的主题提供了一些JavaScript模块来增强体验。我们该如何包含它们呢？
- en: Enhancing output with custom HTML
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用自定义HTML增强输出
- en: Doxygen Awesome offers a few additional features that can be enabled by including
    a few JavaScript snippets in the documentation header, within the HTML `<head>`
    tags. They can be quite useful, as they allow switching between light and dark
    mode, adding a **Copy** button for code snippets, paragraph-header permalinks,
    and an interactive table of contents.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Doxygen Awesome提供了一些附加功能，可以通过在文档头部的HTML `<head>` 标签内包含一些JavaScript片段来启用。它们非常有用，因为它们允许在亮色模式和暗色模式之间切换，添加代码片段的**复制**按钮，段落标题的永久链接，以及互动目录。
- en: However, implementing these features requires copying additional code to the
    output directory and including it in the generated HTML files.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，实现这些功能需要将额外的代码复制到输出目录，并将其包含在生成的HTML文件中。
- en: 'Here is the JavaScript code to be included just before the `</head>` tag:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这是需要在`</head>`标签之前包含的JavaScript代码：
- en: '**ch13/cmake/extra_headers**'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**ch13/cmake/extra_headers**'
- en: '[PRE9]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you can see, this code will first include a few JavaScript files and then
    initialize different extensions. Unfortunately, this code cannot be simply added
    to a variable somewhere. Instead, we’ll need to override the default header with
    a custom file. Such an override can be done by providing a path to this file in
    the Doxygen’s `HTML_HEADER` configuration variable.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这段代码首先会包含一些JavaScript文件，然后初始化不同的扩展。不幸的是，这段代码不能简单地添加到某个变量中。相反，我们需要用自定义文件覆盖默认的头文件。这个覆盖可以通过在Doxygen的`HTML_HEADER`配置变量中提供文件路径来完成。
- en: 'To create a custom header without hardcoding the entire content, you can use
    Doxygen’s command-line tool to generate a default header file and edit it before
    generating the documentation:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 若要创建一个自定义头文件而不硬编码整个内容，可以使用Doxygen的命令行工具生成默认的头文件，并在生成文档之前编辑它：
- en: '[PRE10]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Although we won’t be using or changing the `footer.html` or `style.css`, they
    are required arguments, so we need to create them anyway.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们不会使用或修改`footer.html`或`style.css`，但它们是必需的参数，因此我们仍然需要创建它们。
- en: 'Finally, we need to automatically prepend the `</head>` tag with the contents
    of the `ch13/cmake/extra_headers` file to include the required JavaScript. This
    can be done with the Unix command-line tool `sed`, which will edit the `header.html`
    file in place:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要自动将`</head>`标签与`ch13/cmake/extra_headers`文件的内容进行连接，以包含所需的JavaScript。这可以通过Unix命令行工具`sed`来完成，它将原地编辑`header.html`文件：
- en: '[PRE11]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now we need to codify those steps in CMake language. Here’s the macro that
    achieves that:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要用CMake语言将这些步骤编码。以下是实现这一目标的宏：
- en: '**ch13/02-doxygen-nice/cmake/Doxygen.cmake (fragment)**'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**ch13/02-doxygen-nice/cmake/Doxygen.cmake（片段）**'
- en: '[PRE12]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This code looks complex, but after a close inspection, you’ll find it’s actually
    quite straightforward. Here’s what it does:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码看起来很复杂，但仔细检查后，你会发现它其实非常直接。它的功能如下：
- en: Copies the four JavaScript files to the output directory
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将四个JavaScript文件复制到输出目录
- en: Executes the `doxygen` command to generate the default HTML files
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`doxygen`命令以生成默认的HTML文件
- en: Executes the `sed` command to inject the required JavaScript into the header
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`sed`命令以将所需的JavaScript注入头文件
- en: Overrides the default header with the custom version
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用自定义版本覆盖默认头文件
- en: 'To complete the integration, call this macro right after enabling the basic
    stylesheet:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成集成，在启用基本样式表之后，调用这个宏：
- en: '**ch13/02-doxygen-nice/cmake/Doxygen.cmake (fragment)**'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**ch13/02-doxygen-nice/cmake/Doxygen.cmake（片段）**'
- en: '[PRE13]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The complete code for this example, along with practical examples, is available
    in the online repository for the book. As always, I recommend reviewing and exploring
    these examples in a practical environment.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 该示例的完整代码以及实际示例可以在本书的在线仓库中找到。像往常一样，我建议在实际环境中查看和探索这些示例。
- en: '**Other documentation generation utilities**'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**其他文档生成工具**'
- en: 'There are dozens of other tools that are not covered in this book, as we’re
    focusing on projects supported by CMake. Nevertheless, some of them may be more
    appropriate for your use case. If you’re feeling adventurous, visit the websites
    of two projects I found interesting:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 本书没有涉及其他许多工具，因为我们专注于 CMake 支持的项目。不过，其中一些工具可能更适合你的使用场景。如果你感兴趣，可以访问我发现的两个有趣项目的官方网站：
- en: 'Adobe’s Hyde ([https://github.com/adobe/hyde](https://github.com/adobe/hyde)):
    Aimed at the Clang compiler, Hyde produces Markdown files that can be consumed
    by tools such as Jekyll ([https://jekyllrb.com/](https://jekyllrb.com/)), a static
    page generator supported by GitHub'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Adobe 的 Hyde ([https://github.com/adobe/hyde](https://github.com/adobe/hyde))：Hyde
    针对 Clang 编译器，生成的 Markdown 文件可以被 Jekyll ([https://jekyllrb.com/](https://jekyllrb.com/))
    等工具使用，Jekyll 是一个由 GitHub 支持的静态页面生成器。
- en: 'Standardese ([https://github.com/standardese/standardese](https://github.com/standardese/standardese)):
    This uses libclang to compile your code and provides output in HTML, Markdown,
    LaTex, and man pages. It aims (quite boldly) to be the next Doxygen.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Standardese ([https://github.com/standardese/standardese](https://github.com/standardese/standardese))：这个工具使用
    libclang 来编译代码，并提供 HTML、Markdown、LaTex 和 man 页的输出。它的目标（相当大胆）是成为下一个 Doxygen。
- en: Summary
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we delved into the practicalities of adding Doxygen, a powerful
    documentation generation tool, to your CMake project and enhancing its appeal.
    This task, though seemingly daunting, is quite manageable and significantly enhances
    the flow and clarity of information within your solution. As you’ll find, the
    time invested in adding and maintaining documentation is a worthwhile effort,
    especially when you or your teammates grapple with understanding complex relationships
    in the application.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们深入探讨了如何将强大的文档生成工具 Doxygen 添加到你的 CMake 项目中，并提升其吸引力。尽管这项任务看起来可能令人生畏，但实际上相当可控，并且显著提升了你解决方案中的信息流动和清晰度。如你所见，花时间添加和维护文档是值得的，尤其是当你或你的团队成员在理解应用中的复杂关系时。
- en: After exploring how to use CMake’s built-in Doxygen support to generate documentation
    in practice, we took a slight turn, to ensure not only the readability of the
    documentation but also its legibility.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在探索如何使用 CMake 内置的 Doxygen 支持来生成实际文档之后，我们稍微转了个方向，确保文档不仅具有可读性，还具有可理解性。
- en: Since dated design can be difficult on the eye, we explored alternative looks
    of the produced HTML. This was done using the Doxygen Awesome extension. To enable
    enhancements it comes with, we customized the standard header by adding the necessary
    javascript.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 由于过时的设计可能让眼睛感到不适，我们探讨了生成的 HTML 的替代外观。这是通过使用 Doxygen Awesome 扩展来完成的。为了启用其附带的增强功能，我们通过添加必要的
    JavaScript 自定义了标准头部。
- en: By generating documentation, you ensure its proximity to the actual code, making
    it easier to maintain written explanations in sync with the logic, especially
    if they’re both in the same file. Also, as a programmer, you’re likely juggling
    numerous tasks and details. Documentation acts as a memory aid, helping you retain
    and recall project intricacies. Keep in mind that even “the shortest pencil is
    longer than the longest memory.” Do yourself a favor—write long things down, and
    prosper.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 通过生成文档，你可以确保它与实际代码的接近度，使得在逻辑同步的情况下，维护书面解释变得更加容易，尤其是当它们都在同一个文件中时。此外，作为程序员，你可能需要同时处理大量任务和细节。文档作为记忆辅助工具，帮助你保持和回忆项目的复杂性。记住，“即使是最短的铅笔也比最强的记忆要长。”做个对自己有益的事——把长的事情写下来，成功就会跟随而来。
- en: Wrapping up, this chapter emphasizes the value of Doxygen in your project management
    toolkit, aiding both understanding and communication within your team.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，本章强调了 Doxygen 在你的项目管理工具包中的价值，帮助团队内部的理解和沟通。
- en: In the next chapter, I’ll take you through automating packaging and the installation
    of projects with CMake, further enhancing your project management skills.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我将带你了解如何通过 CMake 自动化打包和安装项目，进一步提升你的项目管理技能。
- en: Further reading
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Official website of Doxygen: [https://www.doxygen.nl/](https://www.doxygen.nl/)'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Doxygen 官方网站：[https://www.doxygen.nl/](https://www.doxygen.nl/)
- en: '`FindDoxygen` find-module documentation: [https://cmake.org/cmake/help/latest/module/FindDoxygen.html](https://cmake.org/cmake/help/latest/module/FindDoxygen.html)'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FindDoxygen` find-module 文档：[https://cmake.org/cmake/help/latest/module/FindDoxygen.html](https://cmake.org/cmake/help/latest/module/FindDoxygen.html)'
- en: 'Doxygen’s docblocks: [https://www.doxygen.nl/manual/docblocks.html#specialblock](https://www.doxygen.nl/manual/docblocks.html#specialblock)'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Doxygen 的 docblocks：[https://www.doxygen.nl/manual/docblocks.html#specialblock](https://www.doxygen.nl/manual/docblocks.html#specialblock)
- en: Join our community on Discord
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们社区的Discord
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们社区的Discord空间，与作者和其他读者进行讨论：
- en: '[https://discord.com/invite/vXN53A7ZcA](https://discord.com/invite/vXN53A7ZcA)'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://discord.com/invite/vXN53A7ZcA](https://discord.com/invite/vXN53A7ZcA)'
- en: '![](img/QR_Code94081075213645359.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code94081075213645359.png)'
