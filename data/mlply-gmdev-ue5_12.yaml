- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Managing Multiplayer Sessions
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理多人会话
- en: As you already know from previous chapters, a game session is represented by
    a server with multiple players all connected to it.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从之前的章节中已经了解到的，游戏会话由一个服务器表示，多个玩家都连接到这个服务器上。
- en: Unreal Engine provides a solid framework for creating, destroying, and handling
    game sessions. By having a strong grip on how to handle a multiplayer session,
    programmers can ensure their games will provide a nice and flawless experience
    to all players involved.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 虚幻引擎提供了一个强大的框架来创建、销毁和处理游戏会话。通过掌握如何处理多人会话，程序员可以确保他们的游戏将为所有玩家提供愉快且无瑕疵的体验。
- en: In this chapter, you will be presented with the main concepts needed to manage
    a game session, starting from the basic setup to creating one. Then, you’ll learn
    how to let clients search for available sessions and how to join them. By the
    end of this chapter, you will have built a user interface that will be used later
    to handle the Unreal Engine multiplayer session system.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将了解到管理游戏会话所需的主要概念，从基本设置到创建会话。然后，您将学习如何让客户端搜索可用的会话以及如何加入它们。到本章结束时，您将构建一个用户界面，该界面将用于后续处理虚幻引擎的多玩家会话系统。
- en: 'Through the next few sections, I will present the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几节中，我将介绍以下主题：
- en: Understanding game sessions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解游戏会话
- en: Preparing a project game session
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备项目游戏会话
- en: Creating a session
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建会话
- en: Joining a session
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加入会话
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To follow the topics presented in this chapter, you should have completed [*Chapter
    11*](B18203_11.xhtml#_idTextAnchor215), *Debugging a Multiplayer Game*, and understood
    its content.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟进本章介绍的主题，您应该已经完成了[*第11章*](B18203_11.xhtml#_idTextAnchor215)，*调试多人游戏*，并理解其内容。
- en: 'Additionally, if you would prefer to begin with code from the companion repository
    for this book, you can download the `.zip` project files provided in this book’s
    companion project repository: [https://github.com/PacktPublishing/Multiplayer-Game-Development-with-Unreal-Engine-5](https://github.com/PacktPublishing/Multiplayer-Game-Development-with-Unreal-Engine-5).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果您希望从本书的配套仓库开始编写代码，您可以下载本书配套项目仓库中提供的`.zip`项目文件：[https://github.com/PacktPublishing/Multiplayer-Game-Development-with-Unreal-Engine-5](https://github.com/PacktPublishing/Multiplayer-Game-Development-with-Unreal-Engine-5)。
- en: You can download the files that are up to date with the end of the previous
    chapter by clicking the `Unreal Shadows –` [*Chapter 11*](B18203_11.xhtml#_idTextAnchor215)`End`
    link.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过点击`Unreal Shadows –` [*第11章*](B18203_11.xhtml#_idTextAnchor215)`结束`链接下载与上一章结尾同步的文件。
- en: Understanding game sessions
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解游戏会话
- en: During a **game session**, players can participate in online games by connecting
    to remote servers or even using their computers as dedicated servers. The Unreal
    Engine game session system offers a wide range of impressive online capabilities,
    such as a server browser, player limits, server search over the network, and much
    more. It’s easy to use and only requires a few commands to activate. Whether running
    on a player’s machine or a dedicated server, game sessions provide a way for players
    to connect and immerse themselves in the virtual world of the game. In this chapter,
    we will focus on setting up a local network environment, leaving the dedicated
    server setup to the next chapter.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在**游戏会话**期间，玩家可以通过连接到远程服务器或甚至使用他们的计算机作为专用服务器来参与在线游戏。虚幻引擎的游戏会话系统提供了一系列令人印象深刻的在线功能，如服务器浏览器、玩家限制、网络上的服务器搜索等。它易于使用，只需几个命令即可激活。无论运行在玩家的机器上还是专用服务器上，游戏会话都为玩家提供了连接并沉浸于游戏虚拟世界的方式。在本章中，我们将专注于设置本地网络环境，将专用服务器的设置留到下一章。
- en: However, before we begin working on sessions, I need to introduce you to the
    Online Subsystem and its unique characteristics.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在我们开始处理会话之前，我需要向您介绍在线子系统和其独特的特性。
- en: Introducing the Online Subsystem
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍在线子系统
- en: In Unreal Engine, the **Online Subsystem** is a system that offers a standard
    method of accessing the features of online services such as Epic Online Services,
    Steam, Xbox Live, and others. This is especially useful in game development scenarios
    where multiple platforms or online services are supported. In such cases, the
    Online Subsystem eliminates the need for developers to make code changes by enabling
    the use of configuration adjustments for each supported service. This ensures
    that the coding process and development efforts are streamlined, efficient, and
    consistent across all supported platforms and services.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在虚幻引擎中，**在线子系统**是一个提供访问在线服务（如Epic在线服务、Steam、Xbox Live等）功能的标准方法的系统。这在支持多个平台或在线服务的游戏开发场景中特别有用。在这种情况下，在线子系统通过为每个支持的服务启用配置调整来消除开发者进行代码更改的需求。这确保了编码过程和开发努力在整个支持的平台和服务中都是简化的、高效的和一致的。
- en: The core purpose of the Online Subsystem is to manage asynchronous communication
    with a diverse range of online platforms. As network speeds, server delays, and
    backend service runtimes are typically unknown to local machines, interactions
    with such systems are highly unpredictable in terms of duration. To address this
    issue, the Online Subsystem leverages delegates for all remote operations, ensuring
    that they are always executed when any supported asynchronous feature is utilized.
    Delegates serve a dual purpose by enabling the system to respond to requests as
    they complete, as well as allowing developers to query runtime requests. By providing
    a single code path to follow, delegates negate the need for developers to write
    custom code to handle various success or failure conditions.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在线子系统的核心目的是管理与各种在线平台的异步通信。由于网络速度、服务器延迟和后端服务运行时间通常对本地机器来说是未知的，因此与这些系统的交互在持续时间方面高度不可预测。为了解决这个问题，在线子系统利用委托来处理所有远程操作，确保它们在利用任何支持异步功能时总是执行。委托通过允许系统在请求完成时响应，以及允许开发者查询运行时请求，发挥着双重作用。通过提供一个单一的代码路径来遵循，委托消除了开发者编写自定义代码来处理各种成功或失败条件的需要。
- en: Supported features are grouped into service-specific, modular interfaces. For
    instance, the **Leaderboard** interface encompasses all aspects related to leaderboard
    access – such as the ability to register personal scores or times, as well as
    check the leaderboards for scores from players across the globe or within your
    friends’ lists – while the **Purchase** interface covers the process of making
    in-game purchases and handling past purchases history. Each feature set on every
    supported online service has an associated interface, allowing developers to write
    code that is agnostic to the online service being employed, promoting consistency
    across services.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 支持的功能被分组到特定于服务的模块化接口中。例如，**排行榜**接口涵盖了与排行榜访问相关的所有方面——例如注册个人分数或时间，以及检查来自全球玩家或你朋友列表中的排行榜分数——而**购买**接口涵盖了游戏内购买和处理过去购买历史的过程。每个支持在线服务的功能集都有一个相关的接口，允许开发者编写与所使用的在线服务无关的代码，从而在服务之间促进一致性。
- en: 'Epic Games provides a list of plugins that allow developers to work on the
    Online Subsystem, including dedicated plugins for the most common and used platforms.
    *Figure 12**.1* shows a portion of the many elements available in Unreal Engine’s
    **Plugins** | **Online** **Platform** section:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Epic Games提供了一系列插件，允许开发者在线子系统上工作，包括针对最常见和常用平台的专用插件。*图12*.*1*显示了虚幻引擎的**插件** |
    **在线** **平台**部分中可用的许多元素的一部分：
- en: '![Figure 12.1 – Some of the available Online Subsystem plugins](img/Figure_12_01_B18203.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图12.1 – 可用的某些在线子系统插件](img/Figure_12_01_B18203.jpg)'
- en: Figure 12.1 – Some of the available Online Subsystem plugins
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.1 – 可用的某些在线子系统插件
- en: In this chapter, we will use the default Online Subsystem, which offers the
    most basic operations to handle a session, including its creation, destruction,
    and joining. In [*Chapter 15*](B18203_15.xhtml#_idTextAnchor288), *Adding Epic
    Online Services (EOS)*, we’ll dive into more detail regarding more advanced Online
    Subsystem features. Let’s start by learning how to manage the most basic session
    operations.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用默认的在线子系统，它提供了处理会话的最基本操作，包括其创建、销毁和加入。在[*第15章*](B18203_15.xhtml#_idTextAnchor288)“添加Epic在线服务（EOS）”，我们将深入了解更高级的在线子系统功能。让我们先学习如何管理最基本的会话操作。
- en: Understanding session commands
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解会话命令
- en: 'So, how can a multiplayer session be managed and operated? There are four main
    operations you can use to handle a session:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如何管理和操作多人会话呢？您可以使用以下四种主要操作来处理会话：
- en: '**Create Session**'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建会话**'
- en: '**Destroy Session**'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**销毁会话**'
- en: '**Find Session**'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**查找会话**'
- en: '**Join Session**'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加入会话**'
- en: Let’s take a closer look at each of them and analyze them in detail.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一深入了解它们，并详细分析。
- en: Create Session
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建会话
- en: The **Create Session** command constitutes the starting point of the session
    process. Once a session is created successfully, it becomes discoverable by other
    instances of the game, which can subsequently join it. The **Create Session**
    command allows you to specify key aspects, such as the number of players allowed
    in the session itself and LAN mode, which lets you manage an internet-based game
    or a LAN game.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**创建会话**命令构成了会话过程的起点。一旦会话创建成功，它就会对游戏的其他实例可见，这些实例随后可以加入。**创建会话**命令允许您指定关键方面，例如会话中允许的玩家数量和局域网模式，这可以让您管理基于互联网的游戏或局域网游戏。'
- en: Destroy Session
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 销毁会话
- en: If you are hosting a session (that is, you created a session), **Destroy Session**
    will close it so that it is no longer available for discovery and joining. Connected
    clients will be immediately disconnected from the session. If you are a client
    who’s connected to a session, calling this command is the way to go to leave the
    session and, consequently, the game.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在托管会话（即您创建了会话），**销毁会话**将关闭它，使其不再可用于发现和加入。连接的客户端将立即从会话中断开连接。如果您是连接到会话的客户端，调用此命令是离开会话和游戏的方法。
- en: Find Session
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查找会话
- en: By using the **Find Session** command, you can retrieve a comprehensive list
    of currently created and accessible game sessions. Upon a successful call of this
    method, the returned objects can be queried to obtain important information such
    as the server’s name, ping, and player count. As for the **Create Session** command,
    you can opt for an internet-based game or a LAN-based one.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用**查找会话**命令，您可以检索当前创建和可访问的游戏会话的完整列表。在成功调用此方法后，返回的对象可以查询以获取重要信息，例如服务器的名称、ping和玩家数量。至于**创建会话**命令，您可以选择基于互联网的游戏或基于局域网的。
- en: Join Session
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加入会话
- en: After identifying the desired session, you can initiate a **Join Session** call
    to join the game. Upon successful connection to the server, the game will automatically
    transition to the server’s map and allow you to participate in the ongoing gameplay.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在确定所需的会话后，您可以发起一个**加入会话**调用以加入游戏。在成功连接到服务器后，游戏将自动切换到服务器的地图，并允许您参与正在进行的游戏。
- en: Understanding connection errors
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解连接错误
- en: As you already know, network operations always pose the risk of encountering
    errors, and it’s critical for games to handle them appropriately. Instances such
    as the host leaving the session (or crashing), temporary internet connection issues,
    or other unforeseen problems are common examples.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所知，网络操作总是存在遇到错误的风险，对于游戏来说，妥善处理这些错误至关重要。例如，主机离开会话（或崩溃）、临时互联网连接问题或其他不可预见的问题都是常见例子。
- en: Any failures associated with the aforementioned session functions will be communicated
    through appropriate events or, in the case of Blueprints, dedicated execution
    pins, allowing the developer to configure the game response accordingly. This
    will guarantee a positive experience for the players, even during critical situations.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 与上述会话功能相关的任何失败都将通过适当的事件进行通信，或者在蓝图的情况下，通过专门的执行引脚，以便开发者相应地配置游戏响应。这将确保即使在关键时刻，玩家也能获得良好的体验。
- en: Now that you have a grasp of how to make and oversee multiplayer game sessions,
    let’s head back into Unreal Engine and apply this knowledge to our project! In
    the next few sections, you will create a user interface that lets you host a session
    and expose it to the network or join one.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经掌握了如何创建和监督多人游戏会话，让我们回到虚幻引擎中，将这一知识应用到我们的项目中！在接下来的几节中，您将创建一个用户界面，让您能够托管会话并将其暴露给网络或加入一个会话。
- en: Preparing a project game session
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备项目游戏会话
- en: In this chapter and the next, we will create a new level that will serve as
    a starting point for your game and will let players host a session or join one.
    As mentioned previously, in this chapter, we will focus on creating a LAN-hosted
    game – this means that all players will be connected to the same local network
    – leaving the trickier details of hosting a game over the internet to the next
    chapter.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章和下一章中，我们将创建一个新的级别，它将作为你游戏的起点，并允许玩家托管会话或加入会话。如前所述，在本章中，我们将专注于创建局域网托管的游戏——这意味着所有玩家都将连接到同一个本地网络——将托管互联网游戏的更复杂细节留到下一章。
- en: 'The level will be pretty simple and will contain the following elements:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 级别将非常简单，并将包含以下元素：
- en: 'A user interface widget that will do the following:'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用户界面小部件，它将执行以下操作：
- en: Let the player create and host a session
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许玩家创建和托管会话
- en: Let the player find and join hosted sessions
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许玩家查找并加入托管会话
- en: A 3D model of the character that the player will use to change skin colors
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 玩家将使用的角色3D模型，用于更改皮肤颜色
- en: In this chapter, we will focus on creating the user interface – including all
    the needed widgets – leaving the level creation and the skin handling to the next
    one.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专注于创建用户界面——包括所有必需的 widgets——将级别创建和皮肤处理留给下一章。
- en: This interface will concentrate on the primary session functions and not on
    its visual aspect. However, you can decide on the style and look based on your
    personal preference – just let your creativity run free!
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 此界面将专注于主要会话功能，而不是其视觉外观。然而，你可以根据自己的个人喜好来决定风格和外观——只需让你的创造力自由发挥！
- en: To create our user interface, we will use UMG again – you used it in [*Chapter
    6*](B18203_06.xhtml#_idTextAnchor125), *Replicating Properties* *O**ver the Network*.
    One of the main advantages of using the UMG system is that you can create a custom
    widget and use it to compose the full interface. This will let you separate elements
    into logical blocks and keep the overall system clean and reusable.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建我们的用户界面，我们再次使用UMG——你在[*第6章*](B18203_06.xhtml#_idTextAnchor125)，*在网络中复制属性*
    *O**ver the Network*中使用了它。使用UMG系统的优点之一是你可以创建一个自定义小部件，并使用它来组合完整的界面。这将让你将元素分离成逻辑块，并保持整体系统的整洁和可重用性。
- en: We will start by creating the needed elements for creating and joining a session.
    By the end of this chapter, we will put everything together in a main menu interface.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先创建创建和加入会话所需的所有元素。在本章结束时，我们将把所有内容整合到主菜单界面中。
- en: 'To get started, we will need four main components:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，我们需要四个主要组件：
- en: A **Create Session** widget, which will help us in handling the session creation
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个**创建会话**小部件，它将帮助我们处理会话创建
- en: A **Find Sessions** widget, which will let us look for available sessions and
    list them in the user interface
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个**查找会话**小部件，它将允许我们在用户界面中查找并列出可用会话
- en: A **Session Item Renderer** widget, which will be used to show each session’s
    information and will let us join a session
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个**会话项渲染器**小部件，它将用于显示每个会话的信息，并允许我们加入会话
- en: A **Main Menu** widget, which will let us display the previous widgets on the
    screen
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个**主菜单**小部件，它将允许我们在屏幕上显示之前的 widgets
- en: Let’s start creating these widgets by opening the Unreal project and navigating
    to the `Content` | `Blueprints` folder. The first widget we will be adding is
    **Create Session**.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过打开虚幻项目并导航到`内容` | `蓝图`文件夹来开始创建这些小部件。我们将添加的第一个小部件是**创建会话**。
- en: Creating a session
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建会话
- en: 'In this section, you will be creating a user interface widget that will let
    you manage session creation. In particular, the **Create Session** widget will
    do the following:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将创建一个用户界面小部件，它将允许你管理会话创建。特别是，**创建会话**小部件将执行以下操作：
- en: Let the player select how many players are allowed to connect in a single session
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许玩家选择单个会话中允许连接的玩家数量
- en: Create the session with the click of a button
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过点击按钮创建会话
- en: Open the game level and start the game
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开游戏级别并开始游戏
- en: 'The first thing we must do is create the actual widget so, in the `Blueprints`
    folder of the Content Browser, do the following:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须做的第一件事是创建实际的界面小部件，因此，在内容浏览器的`蓝图`文件夹中，执行以下操作：
- en: 'Right-click and select **User Interface** | **Widget Blueprint**. In the pop-up
    window that appears, select **User Widget**, as shown in *Figure 12**.2*:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击并选择**用户界面** | **小部件蓝图**。在出现的弹出窗口中，选择**用户小部件**，如图*图12**.2*所示：
- en: '![Figure 12.2 – The user widget creation window](img/Figure_12_02_B18203.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图12.2 – 用户小部件创建窗口](img/Figure_12_02_B18203.jpg)'
- en: Figure 12.2 – The user widget creation window
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.2 – 用户小部件创建窗口
- en: Name the newly created widget `WB_CreateSession` and double-click on it to open
    it.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新创建的小部件命名为 `WB_CreateSession` 并双击它以打开它。
- en: Now, we will add the visual elements.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将添加视觉元素。
- en: Adding the visual elements
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加视觉元素
- en: 'Once the editor is open, select the **Designer** view and do the following:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦编辑器打开，选择 **设计** 视图并执行以下操作：
- en: From the `CreateSessionPanel`.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `CreateSessionPanel`.
- en: From the `Background`.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `Background`.
- en: Set its `(0, 0,` `0, 0.4)`.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置其 `(0, 0,` `0, 0.4)`.
- en: 'While holding the *Ctrl* and *Shift* keys, click the **Anchors** drop-down
    menu and select the bottom-right button to make the background stretch over the
    entirety of the **Canvas** panel. The selection button is shown in *Figure 12.3*:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按住 *Ctrl* 和 *Shift* 键，点击 **锚点** 下拉菜单并选择右下角的按钮，使背景扩展到 **画布** 面板的整个区域。选择按钮在 *图
    12.3* 中显示：
- en: '![Figure 12.3 – The background anchors selection](img/Figure_12_03_B18203.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.3 – 背景锚点选择](img/Figure_12_03_B18203.jpg)'
- en: Figure 12.3 – The background anchors selection
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.3 – 背景锚点选择
- en: From the `Container`
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `Container`
- en: While holding the *Ctrl* and *Shift* keys, click the **Anchors** drop-down menu
    and select the bottom-right button to make the background stretch over the entirety
    of the **Canvas** panel
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按住 *Ctrl* 和 *Shift* 键，点击 **锚点** 下拉菜单并选择右下角的按钮，使背景扩展到 **画布** 面板的整个区域
- en: 'At this point, you have created the container for the widget – nothing fancy,
    but it’s fully functional. The widget hierarchy can be seen in *Figure 12**.4*:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，您已创建了小部件的容器 – 没有什么花哨的，但它完全功能正常。小部件层次结构可以在 *图 12**.4* 中看到：
- en: '![Figure 12.4 – The partial CreateSession widget hierarchy](img/Figure_12_04_B18203.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.4 – CreateSession 小部件的部分层次结构](img/Figure_12_04_B18203.jpg)'
- en: Figure 12.4 – The partial CreateSession widget hierarchy
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.4 – CreateSession 小部件的部分层次结构
- en: 'We are now going to add the working elements that will allow the player to
    create the session. To do so, follow these steps:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将添加允许玩家创建会话的工作元素。为此，请按照以下步骤操作：
- en: From the `TitleLabel`
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `TitleLabel`
- en: Set its `5.0`
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置其 `5.0`
- en: Set the **Text** property to **Create Session**
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**文本**属性设置为**创建会话**
- en: From the `Separator`
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `Separator`
- en: Set its `10.0`
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置其 `10.0`
- en: From the `MaxPlayersLabel`
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `MaxPlayersLabel`
- en: Set its `5.0`
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置其 `5.0`
- en: Set the **Text** property to **Max Players**
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**文本**属性设置为**最大玩家数**
- en: From the `MaxPlayersSpinBox`
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `MaxPlayersSpinBox`
- en: Set its `10.0`
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置其 `10.0`
- en: Enable the `1`
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用 `1`
- en: Enable the `5`
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用 `5`
- en: Set both `0`
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置两个 `0`
- en: Double-check that the **Is Variable** checkbox is selected
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认已选中 **是变量** 复选框
- en: From the `CreateSessionBtn`
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `CreateSessionBtn`
- en: Set its `5.0`
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置其 `5.0`
- en: Double-check that the **Is Variable** checkbox is selected
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认已选中 **是变量** 复选框
- en: From the `CreateSessionLabel`
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `CreateSessionLabel`
- en: Set its **Text** property to **Create**
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其**文本**属性设置为**创建**
- en: Set its **Justification** property to **Align** **Text Center**
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其 **对齐** 属性设置为 **文本居中**
- en: 'The final structure of the widget is shown in *Figure 12**.5*:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 小部件的最终结构在 *图 12**.5* 中显示：
- en: '![Figure 12.5 – The final CreateSession widget hierarchy](img/Figure_12_05_B18203.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.5 – 最终 CreateSession 小部件层次结构](img/Figure_12_05_B18203.jpg)'
- en: Figure 12.5 – The final CreateSession widget hierarchy
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.5 – 最终 CreateSession 小部件层次结构
- en: 'The **Designer** view for the widget is shown in *Figure 12**.6*:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 小部件的 **设计** 视图在 *图 12**.6* 中显示：
- en: '![Figure 12.6 – The Designer view of the CreateSession widget](img/Figure_12_06_B18203.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.6 – CreateSession 小部件的设计视图](img/Figure_12_06_B18203.jpg)'
- en: Figure 12.6 – The Designer view of the CreateSession widget
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.6 – CreateSession 小部件的设计视图
- en: With this layout, the player will be able to select the maximum number of players
    hosted in a session and start the session itself.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此布局，玩家将能够选择会话中托管的最大玩家数并启动会话本身。
- en: Implementing the Visual Scripting logic
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现视觉脚本逻辑
- en: 'Now that the visual part of the widget is finished, you can start adding the
    Visual Scripting logic. Open the **Graph** panel by clicking the **Graph** button
    and, in the **Variables** panel, you should already have two variables – **CreateSessionBtn**
    and **MaxPlayersSpinBox**. Then, complete the following steps:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在视觉部分的小部件已完成，您可以开始添加视觉脚本逻辑。通过点击 **图形** 按钮打开 **图形** 面板，在 **变量** 面板中，您应该已经有两个变量
    – **CreateSessionBtn** 和 **MaxPlayersSpinBox**。然后，完成以下步骤：
- en: Add a new variable of the `MaxPlayers`.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为 `MaxPlayers` 的新变量。
- en: Select the **MaxPlayersSpinBox** variable and, in the **Events** panel, click
    on the **On Value Changed +** button to create an event.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**MaxPlayersSpinBox**变量，在**Events**面板中点击**On Value Changed +**按钮以创建一个事件。
- en: Select the **CreateSessionBtn** variable and, in the **Events** panel, click
    on the **On Clicked +** button to create an event.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**CreateSessionBtn**变量，在**Events**面板中点击**On Clicked +**按钮以创建一个事件。
- en: 'The previous steps will create two events that will handle the corresponding
    user interactions, as shown in *Figure 12**.7*:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的步骤将创建两个事件来处理相应的用户交互，如图*12.7*所示：
- en: '![Figure 12.7 – The CreateSession graph events](img/Figure_12_07_B18203.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图12.7 – CreateSession图事件](img/Figure_12_07_B18203.jpg)'
- en: Figure 12.7 – The CreateSession graph events
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.7 – CreateSession图事件
- en: 'We will start by handling the spin box change event, which will simply have
    to assign its value to the **MaxConnections** variable. To do so, follow these
    steps:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先处理旋转框更改事件，这只需要将其值分配给**MaxConnections**变量。为此，请按照以下步骤操作：
- en: From the **Variables** panel, drag a **Set Max** **Players** node.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**Variables**面板中拖动一个**Set Max Players**节点。
- en: Connect the outgoing execution pin of the **On Value Changed (MaxPlayersSpinBox)**
    event to the incoming execution pin of the **Set Max** **Players** node.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**On Value Changed (MaxPlayersSpinBox)**事件的输出执行引脚连接到**Set Max Players**节点的输入执行引脚。
- en: Connect the **In Value** pin of the event node to the **Max Players** pin of
    the **Set** node. This will automatically create a **Truncate** node to convert
    the spin box float value into an integer.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将事件节点的**In Value**引脚连接到**Set**节点的**Max Players**引脚。这将自动创建一个**Truncate**节点，将旋转框的浮点值转换为整数。
- en: 'The final result of this part of the graph is shown in *Figure 12**.8*:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图的这部分最终结果如图*12.8*所示：
- en: '![Figure 12.8 – The spin box Event Graph](img/Figure_12_08_B18203.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图12.8 – 旋转框事件图](img/Figure_12_08_B18203.jpg)'
- en: Figure 12.8 – The spin box Event Graph
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.8 – 旋转框事件图
- en: We can now start working on the session creation part of the graph, which will
    be fired whenever the **CreateSessionBtn** button is clicked.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以开始处理图中的会话创建部分，它将在**CreateSessionBtn**按钮被点击时触发。
- en: Add a **Create Session** node and a **Get Player Controller** node to the graph.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在图中添加一个**Create Session**节点和一个**Get Player Controller**节点。
- en: From the **Variables** panel, drag a **Get Max** **Players** node.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**Variables**面板中拖动一个**Get Max Players**节点。
- en: Connect the outgoing execution pin of the **On Clicked (CreateSessionBtn)**
    event to the incoming execution pin of the **Create** **Session** node.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**On Clicked (CreateSessionBtn)**事件的输出执行引脚连接到**Create Session**节点的输入执行引脚。
- en: Connect the **Return Value** pin of the **Get Player Controller** node to the
    **Player Controller** pin of the **Create** **Session** node.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**Get Player Controller**节点的**Return Value**引脚连接到**Create Session**节点的**Player
    Controller**引脚。
- en: Connect the outgoing pin of the **Max Players** node to the **Public Connections**
    pin of the **Create** **Session** node.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**Max Players**节点的输出引脚连接到**Create Session**节点的**Public Connections**引脚。
- en: Enable the **Use LAN** checkbox of the **Create** **Session** node.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用**Create Session**节点的**Use LAN**复选框。
- en: Add an `Level_01` to the `listen` to the **Options** input field to open the
    level as a listen server
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Level_01`添加到`listen`到**Options**输入字段，以将级别作为监听服务器打开。
- en: Connect the **On Success** execution pin of the **Create Session** node to the
    incoming execution pin of the **Open Level (by** **Name)** node.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**Create Session**节点的**On Success**执行引脚连接到**Open Level (by Name)**节点的输入执行引脚。
- en: Optionally, connect the **On Failure** execution pin of the **Create Session**
    node to a **Print String** node; this will show an error message. This will trace
    any failure that may pop up during the creation of a session in the **Output**
    **Log** window.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，将**Create Session**节点的**On Failure**执行引脚连接到一个**Print String**节点；这将显示错误消息。这将跟踪在**Output
    Log**窗口中创建会话期间可能出现的任何失败。
- en: 'The final graph is shown in *Figure 12**.9*:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的图如图*12.9*所示：
- en: '![Figure 12.9 – The Create Session Event Graph](img/Figure_12_09_B18203.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![图12.9 – Create Session事件图](img/Figure_12_09_B18203.jpg)'
- en: Figure 12.9 – The Create Session Event Graph
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.9 – Create Session事件图
- en: The graph you have just created is simple but does a lot of things, including
    creating a session on a LAN, setting a maximum of players per session, and opening
    the game level to start the actual multiplayer session.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚刚创建的图简单但功能强大，包括在局域网中创建会话、设置每场会话的最大玩家数以及打开游戏级别以开始实际的多玩家会话。
- en: In the next section, we will work on an interface that will let the player search
    for and join existing sessions.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将处理一个界面，该界面将允许玩家搜索并加入现有的会话。
- en: Joining a session
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入会话
- en: 'In this section, we will work on a couple of widgets that will display a list
    of sessions available in the network and let the players join them. We will need
    two widgets: **Session Item Renderer** and **Find Session**. The first one will
    be used to display a single session’s information, while the second one will be
    responsible for using the first one as a list of available sessions.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将处理几个小部件，这些小部件将显示网络中可用的会话列表并允许玩家加入它们。我们需要两个小部件：**Session Item Renderer**
    和 **Find Session**。第一个将用于显示单个会话的信息，而第二个将负责将第一个作为可用会话的列表使用。
- en: Creating the SessionItemRenderer widget
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 SessionItemRenderer 小部件
- en: 'The widget you will create will have the following features:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 您将创建的小部件将具有以下功能：
- en: Displays the available server name
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示可用的服务器名称
- en: Displays the maximum number of available connections, along with the number
    of connected players
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示可用的最大连接数，以及已连接玩家的数量
- en: Provides a join button to let the player enter the session
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供一个加入按钮，让玩家能够进入会话
- en: 'The first thing we must do is create the widget. So, in the Content Browser
    area, follow these steps:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须做的第一件事是创建小部件。因此，在内容浏览器区域，按照以下步骤操作：
- en: Right-click and select **User Interface** | **Widget Blueprint**. In the pop-up
    window that appears, select **User Widget**.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击并选择 **用户界面** | **小部件蓝图**。在出现的弹出窗口中，选择 **用户小部件**。
- en: Name the newly created widget `WB_SessionItemRenderer` and double-click on it
    to open it.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新创建的小部件命名为 `WB_SessionItemRenderer` 并双击它以打开它。
- en: Once again, we will start by adding the user interface elements.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们将从添加用户界面元素开始。
- en: Adding the visual elements
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加视觉元素
- en: 'Once the editor is open, select the **Designer** panel and do the following:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦编辑器打开，选择 **Designer** 面板并执行以下操作：
- en: From the `Container`.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `Container`。
- en: From the `ServerNameLabel` and tick the `Fill` and the `5.0`
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `ServerNameLabel` 并勾选 `Fill` 和 `5.0`
- en: Set the `Server Name`
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置 `服务器名称`
- en: From the `NumPlayersLabel` and tick the `5.0`
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `NumPlayersLabel` 并勾选 `5.0`
- en: Set the `0/0`
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置 `0/0`
- en: From the `JoinBtn` and double-check that the `5.0`
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `JoinBtn` 并双检查 `5.0`
- en: From the `JoinLabel`
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `JoinLabel`
- en: Set the `Join Session`
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置 `加入会话`
- en: 'The final structure of the widget is shown in *Figure 12**.10*:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 小部件的最终结构显示在 *图 12*。10*：
- en: '![Figure 12.10 – The hierarchy view of the SessionItemRenderer widget](img/Figure_12_10_B18203.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.10 – SessionItemRenderer 小部件的层次结构视图](img/Figure_12_10_B18203.jpg)'
- en: Figure 12.10 – The hierarchy view of the SessionItemRenderer widget
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.10 – SessionItemRenderer 小部件的层次结构视图
- en: 'The **Designer** view for the widget is shown in *Figure 12**.11*:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 小部件的 **Designer** 视图显示在 *图 12*。11*：
- en: '![Figure 12.11 – The Designer view of the SessionItemRenderer widget](img/Figure_12_11_B18203.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.11 – SessionItemRenderer 小部件的 Designer 视图](img/Figure_12_11_B18203.jpg)'
- en: Figure 12.11 – The Designer view of the SessionItemRenderer widget
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.11 – SessionItemRenderer 小部件的 Designer 视图
- en: With this layout, the player will be able to see the information for each available
    session and the join button.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此布局，玩家将能够看到每个可用会话的信息以及加入按钮。
- en: Now that the visual part of the widget is finished, you can start adding the
    Visual Scripting logic.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 现在部件的视觉部分已完成，您可以从添加 Visual Scripting 逻辑开始。
- en: Implementing the Visual Scripting logic
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实现Visual Scripting逻辑
- en: 'Open the **Graph** panel by clicking the **Graph** button and do the following:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 通过单击 **Graph** 按钮打开 **Graph** 面板并执行以下操作：
- en: In the **Variables** panel, you should already have three variables – **JoinBtn**,
    **NumPlayersLabel**, and **ServerNameLabel**. In the Designer graph, all of them
    have been marked as **Is Variable**.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **变量** 面板中，您应该已经有了三个变量 – **JoinBtn**、**NumPlayersLabel** 和 **ServerNameLabel**。在
    Designer 图中，它们都已被标记为 **Is Variable**。
- en: Add a new variable of the `SearchResult`
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个新的 `SearchResult` 变量
- en: In its **Details** panel, enable the **Instance Editable** and **Expose on Spawn**
    properties to make this property accessible from other Blueprints
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在其 **详细信息** 面板中，启用 **实例可编辑** 和 **在生成时暴露** 属性，以便从其他蓝图访问此属性
- en: You should be already familiar with the **Instance Editable** property, but
    **Expose on Spawn** may be new to you. Enabling it will show a pin for this property
    when spawning this Blueprint – this will help us later on in initializing the
    data when we add this renderer to the list of available sessions.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该已经熟悉**实例可编辑**属性，但**在生成时暴露**可能对你来说是新的。启用它将在生成此蓝图时显示该属性的引脚，这将在我们稍后添加此渲染器到可用会话列表时初始化数据时有所帮助。
- en: 'Now that the variables have been set up, it’s time to add some Visual Scripting.
    We will start by implementing the **Join Session** logic. To do so, follow these
    steps:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 现在变量已经设置好了，是时候添加一些视觉脚本了。我们将从实现**加入会话**逻辑开始。为此，请按照以下步骤操作：
- en: With the **JoinBtn** variable selected, add an **On Clicked (JoinBtn)** event
    by clicking on the **On Clicked +** button in the **Events** panel.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**JoinBtn**变量后，在**事件**面板中点击**On Clicked +**按钮添加一个**On Clicked (JoinBtn)**事件。
- en: Add a **Join Session** node to the graph and connect its incoming execution
    pin to the outgoing execution pin of the **On Clicked (****JoinBtn)** event.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在图表中添加一个**Join Session**节点，并将其输入执行引脚连接到**On Clicked (JoinBtn)**事件的输出执行引脚。
- en: Add a **Get Player Controller** node to the graph and connect its **Return Value**
    pin to the **Player Controller** pin of **Join** **Session Node**.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在图表中添加一个**获取玩家控制器**节点，并将其**返回值**引脚连接到**Join**会话节点的**Player Controller**引脚。
- en: From the **Variables** panel, drag a **Get Search Result** node into the graph
    and connect its pin to the **Search Result** node of the **Join** **Session**
    node.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**变量**面板中，将一个**获取搜索结果**节点拖动到图表中，并将其引脚连接到**Join**会话节点的**Search Result**节点。
- en: 'The final result for this part of the graph is shown in *Figure 12**.12*:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图表这一部分的最终结果如图*图12*所示。12*：
- en: '![Figure 12.12 – The Join Session graph](img/Figure_12_12_B18203.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![图12.12 – 加入会话图表](img/Figure_12_12_B18203.jpg)'
- en: Figure 12.12 – The Join Session graph
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.12 – 加入会话图表
- en: As you can see, joining a session is quite straightforward once you have the
    session data (that is, the search result); this data will be obtained during the
    **Find Session** procedure we’ll add later.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，一旦你有了会话数据（即搜索结果），加入会话就相当直接；这些数据将在我们稍后添加的**查找会话**过程中获得。
- en: Please notice that we don’t need to open any level after joining a session as
    we did for the **Create Session** widget; this will happen automatically once
    we are connected to the host.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，加入一个会话后我们不需要像为**创建会话**小部件那样打开任何级别；一旦我们连接到主机，这将会自动发生。
- en: 'To complete this widget, we need to show the search result data in the labels
    we have previously created and, as we have previously exposed this data on spawn,
    we will have it already available at construction time. Let’s complete the widget’s
    Visual Scripting by looking for the **Event Construct** event node in the graph
    – it should already be available by default. Then, perform the following steps:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成这个小部件，我们需要在之前创建的标签中显示搜索结果数据，因为我们之前已经暴露了这些数据，所以在构造时它们已经可用。让我们通过在图表中查找**事件构造**事件节点来完成小部件的视觉脚本——它应该默认可用。然后，执行以下步骤：
- en: To keep things clean, add a **Sequence** node with two outgoing pins (the default
    setup) and connect its incoming execution pin to the outgoing execution pin of
    the event node.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了保持整洁，添加一个具有两个输出引脚的**Sequence**节点（默认设置），并将其输入执行引脚连接到事件节点的输出执行引脚。
- en: From the **Variables** panel, drag a **Get Server Name Label** node and a **Get
    Search** **Result** node.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**变量**面板中，拖动一个**获取服务器名称标签**节点和一个**获取搜索结果**节点。
- en: From the **Server Name Label** outgoing pin, click and drag to create a **SetText
    (****Text)** node.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**服务器名称标签**输出引脚，点击并拖动以创建一个**setText (Text)**节点。
- en: Connect the **SetText (Text)** incoming execution pin to the **Then 0** execution
    pin of the **Sequence** node.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**setText (Text)**节点的输入执行引脚连接到**Sequence**节点的**Then 0**执行引脚。
- en: From the **Search Result** outgoing pin, click and drag to add a **Get Server**
    **Name** node.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**搜索结果**输出引脚，点击并拖动以添加一个**获取服务器名称**节点。
- en: Connect the **Get Server Name** outgoing pin to the **In Text** pin of the **SetText
    (Text)** node. This will automatically create a **To Text (String)** node that
    will convert the text into the correct type.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**获取服务器名称**输出的引脚连接到**setText (Text)**节点的**In Text**引脚。这将自动创建一个**To Text (String)**节点，它将文本转换为正确的类型。
- en: 'So far, the graph should be like *Figure 12**.13*:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，图表应该如图*图12*所示。13*：
- en: '![Figure 12.13 – The first part of the Event Construct event node](img/Figure_12_13_B18203.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![图12.13 – 事件构造事件节点的第一部分](img/Figure_12_13_B18203.jpg)'
- en: Figure 12.13 – The first part of the Event Construct event node
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.13 – 事件构造事件节点的第一部分
- en: The previous graph simply gets the available server’s name from the search result
    data and displays it in the corresponding label. We are going to do something
    similar with the number of connected players. To do so, keep on working on the
    same graph and continue with these steps.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的图表只是从搜索结果数据中获取可用的服务器名称，并在相应的标签中显示它。我们将对连接的玩家数量做类似处理。为此，继续在同一图表上工作，并继续以下步骤。
- en: From the **Variables** panel, drag a **Get Num Players Label** node and a **Get
    Search** **Result** node.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**变量**面板，拖动一个**Get Num Players Label**节点和一个**Get Search** **Result**节点。
- en: From the **Num Players Label** outgoing pin, click and drag to create a **SetText
    (****Text)** node.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**Num Players Label**的输出引脚，点击并拖动以创建一个**SetText (****Text)**节点。
- en: Connect the **SetText (Text)** incoming execution pin to the **Then 1** execution
    pin of the **Sequence** node.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**SetText (Text)**节点的输入执行引脚连接到**Sequence**节点的**Then 1**执行引脚。
- en: From the **Search Result** outgoing pin, click and drag to add a **Get Current
    Players** node. Repeat this step, but this time, add a **Get Max** **Players**
    node.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**Search Result**的输出引脚，点击并拖动以添加一个**Get Current Players**节点。重复此步骤，但这次添加一个**Get
    Max** **Players**节点。
- en: Add an `/` character into the input field for the **B** pin.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**B**引脚的输入字段中添加一个`/`字符。
- en: Connect the incoming **C** pin to **Return Value** of the **Get Max Players**
    node. This will automatically add a node converted for the type.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将输入引脚**C**连接到**Get Max Players**节点的**Return Value**。这将自动添加一个转换后的节点。
- en: Connect the **Append** node’s outgoing pin to the **In Text** pin of the **SetText
    (Text)** node. This will automatically create a **To Text (String)** node that
    will convert the text into the correct type.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**Append**节点的输出引脚连接到**SetText (Text)**节点的**In Text**引脚。这将自动创建一个**To Text (String)**节点，该节点会将文本转换为正确的类型。
- en: 'This portion of the graph will look like *Figure 12**.14*:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 此部分图表将看起来像*图12**.14*：
- en: '![Figure 12.14 – The second part of the Event Construct event node](img/Figure_12_14_B18203.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![图12.14 – 事件构造事件节点的第二部分](img/Figure_12_14_B18203.jpg)'
- en: Figure 12.14 – The second part of the Event Construct event node
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.14 – 事件构造事件节点的第二部分
- en: This widget is now complete and contains all the logic to show a session’s information
    and join it.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 此小部件现在已完成，并包含显示会话信息和加入会话的所有逻辑。
- en: We are now going to create the third widget, which will allow us to search the
    network for available sessions.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将创建第三个小部件，它将允许我们在网络上搜索可用的会话。
- en: Creating the FindSessions widget
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建**FindSessions**小部件
- en: 'The **FindSessions** widget will have the following features:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '**FindSessions**小部件将具有以下功能：'
- en: Let the player find available sessions through the click of a button
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让玩家通过点击按钮来查找可用的会话
- en: Show a list of the available sessions
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示可用会话的列表
- en: If required, display information messages
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如有需要，显示信息消息
- en: 'The first thing we must do is create the actual widget. So, in the Content
    Browser area, do the following:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须做的第一件事是创建实际的小部件。因此，在内容浏览器区域，执行以下操作：
- en: Right-click and select **User Interface** | **Widget Blueprint**. In the pop-up
    window that appears, select **User Widget**.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击并选择**用户界面** | **Widget Blueprint**。在出现的弹出窗口中，选择**User Widget**。
- en: Name the newly created widget `WB_FindSessions` and double-click on it to open
    it.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新创建的小部件命名为`WB_FindSessions`，双击它以打开。
- en: As usual, you will start by adding the visual elements to the widget.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 如同往常，你将首先向小部件添加视觉元素。
- en: Adding the visual elements
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加视觉元素
- en: 'Once the editor is open, select the **Designer** panel and follow these steps:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦编辑器打开，选择**Designer**面板并按照以下步骤操作：
- en: From the `FindSessionsPanel`.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`FindSessionsPanel`。
- en: From the `Background`
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**Background**
- en: Set its `(0, 0,` `0, 0.4)`
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置其`(0, 0,` `0, 0.4)`
- en: While holding the *Ctrl* and *Shift* keys, click the **Anchors** drop-down menu
    and select the bottom-right button to make the background stretch over the entirety
    of the **Canvas** panel
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在按住*Ctrl*和*Shift*键的同时，点击**Anchors**下拉菜单并选择右下角的按钮，使背景扩展到**Canvas**面板的整个区域。
- en: From the `Container`
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**Container**
- en: While holding the *Ctrl* and *Shift* keys pressed, click the **Anchors** drop-down
    menu, and select the bottom-right button to make the background stretch over the
    entirety of the **Canvas** panel
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在按住*Ctrl*和*Shift*键的同时，点击**Anchors**下拉菜单，并选择右下角的按钮，使背景扩展到**Canvas**面板的整个区域。
- en: 'At this point, you will have created the container for the widget – nothing
    fancy, but fully functional. The widget hierarchy can be seen in *Figure 12**.15*:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您已经创建了小部件的容器 – 没有什么花哨的，但完全功能。小部件层次结构可以在*图12*。15*中看到：
- en: '![Figure 12.15 – The partial FindSessions widget hierarchy](img/Figure_12_15_B18203.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![图12.15 – 部分FindSessions小部件层次结构](img/Figure_12_15_B18203.jpg)'
- en: Figure 12.15 – The partial FindSessions widget hierarchy
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.15 – 部分FindSessions小部件层次结构
- en: Now, we are going to add the working elements that will allow the player to
    find the network sessions.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将添加允许玩家查找网络会话的工作元素。
- en: From the `FindSessionsBtn`
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`FindSessionsBtn`
- en: Set its `10.0`
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置其`10.0`
- en: Double-check that the **Is Variable** checkbox is selected
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认**是变量**复选框被选中
- en: From the `FindSessionsLabel`
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`FindSessionsLabel`
- en: Set the `Find Sessions`
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置`查找会话`
- en: From the `Separator`
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`Separator`
- en: Set its `10.0`
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置其`10.0`
- en: From the `SessionsScrollBox`
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`SessionsScrollBox`
- en: Set its `10.0`
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置其`10.0`
- en: Set its **Size** property to **Fill**
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置其**大小**属性为**填充**
- en: Double-check that the **Is Variable** checkbox is selected
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认**是变量**复选框被选中
- en: From the `SessionMessage` and tick the `10.0`
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`SessionMessage`中勾选`10.0`
- en: Set the **Text** property to **No** **Session Available**
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**文本**属性设置为**无****会话可用**
- en: 'The final structure of the widget is shown in *Figure 12**.16*:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 小部件的最终结构显示在*图12*。16*中：
- en: '![Figure 12.16 – The final FindSessions widget hierarchy](img/Figure_12_16_B18203.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![图12.16 – 最终FindSessions小部件层次结构](img/Figure_12_16_B18203.jpg)'
- en: Figure 12.16 – The final FindSessions widget hierarchy
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.16 – 最终FindSessions小部件层次结构
- en: 'The **Designer** view for the widget is shown in *Figure 12**.17*:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 小部件的**设计**视图显示在*图12*。17*中：
- en: '![Figure 12.17 – The final FindSessions widget Designer view](img/Figure_12_17_B18203.jpg)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![图12.17 – 最终FindSessions小部件设计视图](img/Figure_12_17_B18203.jpg)'
- en: Figure 12.17 – The final FindSessions widget Designer view
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.17 – 最终FindSessions小部件设计视图
- en: With this layout, the player will be able to click the **Find Sessions** button
    to search the network for available sessions and display them in a selectable
    list. You now need to open the **Graph** panel and add some Visual Scripting logic.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种布局，玩家将能够点击**查找会话**按钮来搜索网络中的可用会话，并在可选择的列表中显示它们。您现在需要打开**图**面板并添加一些可视化脚本逻辑。
- en: Implementing the Visual Scripting logic
  id: totrans-252
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实现可视化脚本逻辑
- en: 'This part will be a bit more complex than the rest as there will be a lot going
    on; in particular, the code logic will have to do the following:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 这部分将比其他部分复杂一些，因为会有很多事情发生；特别是，代码逻辑必须执行以下操作：
- en: Search for available networks over the LAN
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在局域网中搜索可用网络
- en: Display a list of available sessions through the **SessionItemRenderer** widget
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过**SessionItemRenderer**小部件显示可用会话的列表
- en: Display error messages
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示错误消息
- en: Enable and disable the search button, depending on the circumstances
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据情况启用和禁用搜索按钮
- en: 'As a first step, I need you to check that, in the **Variables** panel, there
    are three references to the items you will be using: **FindSessionBtn**, **SessionMessage**,
    and **SessionScrollBox**. Then, follow these steps:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 作为第一步，我需要您检查在**变量**面板中，有三个引用您将使用的项目：**FindSessionBtn**、**SessionMessage**和**SessionScrollBox**。然后，按照以下步骤操作：
- en: Add a new variable called `SessionResults` of the **Blueprint Session Result**
    type and make it an **Array** – this will contain a list of the sessions that
    have been found in the network.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`SessionResults`的新变量，类型为**蓝图会话结果**，并将其设置为**数组** – 这将包含在网络上找到的会话列表。
- en: Select **FindSessionBtn** and, in the **Events** panel, add an **On Clicked**
    event by clicking the **+** button next to the corresponding element.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**FindSessionBtn**，在**事件**面板中，通过点击对应元素旁边的**+**按钮添加一个**On Clicked**事件。
- en: Connect the outgoing execution pin of **On Clicked (FindSessionBtn)** to a **Sequence**
    node with two execution pins (that is, the default ones).
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**On Clicked (FindSessionBtn)**的输出执行引脚连接到一个具有两个执行引脚的**序列**节点（即默认的）。
- en: 'Now, to keep things clean, you’ll be creating some functions that will do some
    of the minor operations:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了保持整洁，您将创建一些函数来执行一些小操作：
- en: '**AddItemRenderer** to add a session item to the list'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AddItemRenderer**向列表中添加会话项'
- en: '**EnableSearchButton/DisableSearchButton** to make the search button interactable
    or not, depending on the situation'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**EnableSearchButton/DisableSearchButton**根据情况使搜索按钮可交互或不交互'
- en: '**GetSessionResultMessage** to compose the resulting message of a search'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GetSessionResultMessage**来组成搜索的结果消息'
- en: Let’s create these now.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在创建这些。
- en: Creating the AddItemRenderer function
  id: totrans-267
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建 AddItemRenderer 函数
- en: 'We’ll start from the first function by clicking on the **+** button in the
    **Functions** section of the **My Blueprint** window. Follow these steps:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从第一个函数开始，通过在 **My Blueprint** 窗口的 **函数** 部分的 **+** 按钮上点击。按照以下步骤操作：
- en: Name the function `AddItemRenderer` and, in the `SearchResult`
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将函数命名为 `AddItemRenderer`，在 `SearchResult`
- en: With the function node selected, look for the **Graph** section of the **My
    Blueprint** window and set **Access Specifier** to **Protected**
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在函数节点被选中时，查找 **My Blueprint** 窗口的 **图** 部分并将 **访问修饰符** 设置为 **受保护的**
- en: Add a **Get Player Controller** node to the graph.
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在图中添加一个 **获取玩家控制器** 节点。
- en: 'Add a **Create Widget** node to the graph and do the following:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在图中添加一个 **创建小部件** 节点，并执行以下操作：
- en: Connect its incoming execution pin to the outgoing execution pin of the **Add
    Item Renderer** function node
  id: totrans-273
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将其传入执行插针连接到 **Add Item Renderer** 函数节点的传出执行插针
- en: From the drop-down menu of the **Class** pin, select **WB_SessionItemRenderer**
  id: totrans-274
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 **类** 插针的下拉菜单中选择 **WB_SessionItemRenderer**
- en: Connect the **Owning Player** pin to **Return Value** of the **Get Player**
    **Controller** node
  id: totrans-275
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 **拥有玩家** 插针连接到 **Get Player** **Controller** 节点的 **返回值**
- en: Connect the **Search Result** pin to the **Search Result** pin of the **Add
    Item Renderer** function node
  id: totrans-276
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 **搜索结果** 插针连接到 **Add Item Renderer** 函数节点的 **搜索结果** 插针
- en: Drag a **Get Session Scroll Box** node from the **Variables** panel onto the
    graph.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **变量** 面板将 **Get Session Scroll Box** 节点拖动到图中。
- en: 'Add an **Add Child** node to the graph and do the following:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在图中添加一个 **添加子节点** 节点，并执行以下操作：
- en: Connect its incoming execution pin to the outgoing execution pin of the **Create**
    **Widget** node
  id: totrans-279
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将其传入执行插针连接到 **创建** **小部件** 节点的传出执行插针
- en: Connect the **Content** pin to the **Return Value** pin of the **Create** **Widget**
    node
  id: totrans-280
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 **内容** 插针连接到 **创建** **小部件** 节点的 **返回值** 插针
- en: Connect the **Target** pin to the **Session Scroll Box** getter node
  id: totrans-281
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 **目标** 插针连接到 **Session Scroll Box** 获取器节点
- en: 'The final graph for the **AddItemRenderer** function is shown in *Figure 12**.18*:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '**AddItemRenderer** 函数的最终图示如 *图 12*.18* 所示：'
- en: '![Figure 12.18 – The AddItemRenderer function](img/Figure_12_18_B18203.jpg)'
  id: totrans-283
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.18 – AddItemRenderer 函数](img/Figure_12_18_B18203.jpg)'
- en: Figure 12.18 – The AddItemRenderer function
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.18 – AddItemRenderer 函数
- en: We can now start creating the function that will enable the search button when
    requested.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以开始创建一个函数，当请求时启用搜索按钮。
- en: Creating the EnableSearchButton function
  id: totrans-286
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建 EnableSearchButton 函数
- en: 'Let’s start by creating the function by clicking on the **+** button in the
    **Functions** section of the **My Blueprint** window. Follow these steps:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从在 **My Blueprint** 窗口的 **函数** 部分的 **+** 按钮创建函数开始。按照以下步骤操作：
- en: Name the function `EnableSearchButton` and, with the function node selected,
    look for the **Graph** section of the **My Blueprint** window and set **Access
    Specifier** to **Protected**.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将函数命名为 `EnableSearchButton`，在函数节点被选中时，查找 **My Blueprint** 窗口的 **图** 部分并将 **访问修饰符**
    设置为 **受保护的**。
- en: From the **Variables** panel, drag a **FindSessionsBtn** node.
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **变量** 面板拖动一个 **FindSessionsBtn** 节点。
- en: 'Add a **Set Is Enabled** node to the graph and do the following:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在图中添加一个 **设置启用状态** 节点，并执行以下操作：
- en: Connect its incoming execution pin to the outgoing execution pin of the **Enable
    Search Button** function node
  id: totrans-291
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将其传入执行插针连接到 **启用搜索按钮** 函数节点的传出执行插针
- en: Connect the **Target** pin to the **Find Session** **Btn** getter
  id: totrans-292
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 **目标** 插针连接到 **Find Session** **Btn** 获取器
- en: Tick the **In Is** **Enabled** checkbox
  id: totrans-293
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开 **启用** **状态** 复选框
- en: 'The final graph for this function is shown in *Figure 12**.19*:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数的最终图示如 *图 12*.19* 所示：
- en: '![Figure 12.19 – The EnableSearchButton function](img/Figure_12_19_B18203.jpg)'
  id: totrans-295
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.19 – EnableSearchButton 函数](img/Figure_12_19_B18203.jpg)'
- en: Figure 12.19 – The EnableSearchButton function
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.19 – EnableSearchButton 函数
- en: The function that will disable the button is almost identical to the previous
    one, so let’s create it.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 将要禁用按钮的函数几乎与上一个函数相同，所以让我们创建它。
- en: Creating the DisableSearchButton function
  id: totrans-298
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建 DisableSearchButton 函数
- en: 'Let’s start by creating the function by clicking on the **+** button in the
    **Functions** section of the **My Blueprint** window. Follow these steps:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从在 **My Blueprint** 窗口的 **函数** 部分的 **+** 按钮创建函数开始。按照以下步骤操作：
- en: With the function node selected, look for the **Graph** section of the **My
    Blueprint** window and set **Access Specifier** to **Protected**.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在函数节点被选中时，查找 **My Blueprint** 窗口的 **图** 部分并将 **访问修饰符** 设置为 **受保护的**。
- en: From the **Variables** panel, drag a **FindSessionsBtn** node.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**变量**面板中，拖动一个**FindSessionsBtn**节点。
- en: 'Add a **Set Is Enabled** node to the graph and do the following:'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在图中添加一个**设置启用**节点，并执行以下操作：
- en: Connect its incoming execution pin to the outgoing execution pin of the **Enable
    Search Button** function node
  id: totrans-303
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将其输入执行引脚连接到**启用搜索按钮**函数节点的输出执行引脚
- en: Connect the **Target** pin to the **Find Session** **Btn** getter
  id: totrans-304
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**目标**引脚连接到**查找会话****按钮**获取器
- en: Leave the **In Is Enabled** checkbox unticked
  id: totrans-305
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持**是否启用**复选框未勾选
- en: 'The final graph for this function is shown in *Figure 12**.20*:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数的最终图示如*图12.20*所示：
- en: '![Figure 12.20 – The DisableSearchButton function](img/Figure_12_20_B18203.jpg)'
  id: totrans-307
  prefs: []
  type: TYPE_IMG
  zh: '![图12.20 – 禁用搜索按钮函数](img/Figure_12_20_B18203.jpg)'
- en: Figure 12.20 – The DisableSearchButton function
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.20 – 禁用搜索按钮函数
- en: We need just one last function – the one that will compose the sessions message.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要一个最后的函数——一个将组成会话消息的函数。
- en: Creating the GetSessionResultMessage function
  id: totrans-310
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建GetSessionResultMessage函数
- en: 'Let’s start by creating the function by clicking on the **+** button in the
    **Functions** section of the **My Blueprint** window. Follow these steps:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，通过点击**我的蓝图**窗口中**函数**部分的**+**按钮来创建函数。按照以下步骤操作：
- en: 'Name the function `GetSessionsResultMessage` and do the following:'
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将函数命名为`GetSessionsResultMessage`并执行以下操作：
- en: With the function node selected, look for the `ReturnValue`; this will add **Return
    Node** to the graph.
  id: totrans-313
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在选择函数节点后，查找`ReturnValue`；这将向图中添加**返回节点**。
- en: From the **Variables** panel, drag a **Get Session** **Results** node.
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**变量**面板中，拖动一个**获取会话****结果**节点。
- en: From the outgoing pin of the **Session Results** getter, click and drag to add
    a **Length** node.
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**会话结果**获取器的输出引脚，点击并拖动以添加一个**长度**节点。
- en: Add an `Found:`
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`Found:`
- en: Connect the `sessions`
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接`sessions`
- en: Connect the outgoing pin of the **Append** node to **Return Value** of **Return
    Node**; this will automatically create a **To Text (String)** converter node in
    between.
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**追加**节点的输出引脚连接到**返回节点**的**返回值**；这将自动在之间创建一个**转换为文本（字符串）**转换器节点。
- en: 'The final graph for this function is shown in *Figure 12**.21*:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数的最终图示如*图12.21*所示：
- en: '![Figure 12.21 – The GetSessionsResultMessage function](img/Figure_12_21_B18203.jpg)'
  id: totrans-320
  prefs: []
  type: TYPE_IMG
  zh: '![图12.21 – 获取会话结果消息函数](img/Figure_12_21_B18203.jpg)'
- en: Figure 12.21 – The GetSessionsResultMessage function
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.21 – 获取会话结果消息函数
- en: The last function has been created, so it’s time to get back to the main Event
    Graph and create the search and result logic.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个函数已经创建完成，现在是时候回到主事件图并创建搜索和结果逻辑。
- en: Implementing the Event Graph
  id: totrans-323
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 实现事件图
- en: 'The main graph will need to look for the available sessions in the network
    and expose them in the widget list. To start with this Visual Scripting logic,
    follow these steps:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 主图需要在网络中查找可用的会话并在小部件列表中暴露它们。要开始这个视觉脚本逻辑，请按照以下步骤操作：
- en: Locate the **On Clicked (FindSessionBtn)** event and add a **Sequence** node
    to the outgoing execution pin.
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位到**点击（FindSessionBtn）**事件，并将一个**序列**节点添加到输出的执行引脚上。
- en: From the **Variables** panel, drag a **SessionsScrollBox** node and, from its
    outgoing pin, click and drag to add a **Clear** **Children** node.
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**变量**面板中，拖动一个**SessionsScrollBox**节点，并从其输出引脚，点击并拖动以添加一个**清除****子节点**。
- en: Connect the **Clear Children** incoming execution pin to the **Then 0** outgoing
    execution pin of the **Sequence** node.
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**清除子节点**的输入执行引脚连接到**序列**节点的**然后0**的输出执行引脚。
- en: From the **Functions** panel, drag a **Disable Search Button** function and
    connect its incoming execution pin to the outgoing execution pin of the **Clear**
    **Children** node.
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**函数**面板中，拖动一个**禁用搜索按钮**函数，并将其输入执行引脚连接到**清除****子节点**的输出执行引脚。
- en: From the **Variables** panel, drag a **Session Message** node and, from its
    outgoing pin, click and drag to add a **Set Text** node (from the **Content**
    category).
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**变量**面板中，拖动一个**Session Message**节点，并从其输出引脚，点击并拖动以添加一个**设置文本**节点（从**内容**类别）。
- en: Connect the incoming execution pin of the **Set Text** node to the outgoing
    pin of **Disable** **Search Button**.
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**设置文本**节点的输入执行引脚连接到**禁用****搜索按钮**的输出引脚。
- en: Insert **Search Session...** into the **Text** field of the **Set** **Text**
    node.
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**搜索会话...**插入到**设置文本**节点的**文本**字段中。
- en: 'This first part of the graph essentially cleans the sessions list from previous
    search results, disables the search button to avoid multiple clicks, and displays
    a message. This is shown in *Figure 12**.22*:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 这第一部分的图表基本上从之前的搜索结果中清理会话列表，禁用搜索按钮以避免多次点击，并显示消息。这如图 *图 12.22* 所示：
- en: '![Figure 12.22 – The first part of the FindSessions graph](img/Figure_12_22_B18203.jpg)'
  id: totrans-333
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.22 – FindSessions 图的第一部分](img/Figure_12_22_B18203.jpg)'
- en: Figure 12.22 – The first part of the FindSessions graph
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.22 – FindSessions 图的第一部分
- en: The second part of the graph will be responsible for searching the network sessions
    and showing the actual results.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 图表的第二部分将负责搜索网络会话并显示实际结果。
- en: Add a **Get Player Controller** node to the graph.
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个 **获取玩家控制器** 节点添加到图表中。
- en: Add a `10`
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个 `10`
- en: Tick the **Use LAN** checkbox to enable it
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 **使用 LAN** 复选框以启用它
- en: From the **Variables** panel, drag a **Set Session Results** node and connect
    its incoming execution pin to the **On Success** execution pin of the **Find**
    **Sessions** node.
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **变量** 面板中，拖动一个 **设置会话结果** 节点，并将其输入执行引脚连接到 **Find** **会话** 节点的 **On Success**
    执行引脚。
- en: From the **Functions** panel, drag a **Get Sessions Result** **Message** node.
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **函数** 面板中，拖动一个 **Get Sessions Result** **消息** 节点。
- en: 'From the **Variables** panel, drag a **Session Message** getter node and do
    the following:'
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **变量** 面板中，拖动一个 **会话消息** 获取节点，并执行以下操作：
- en: From its outgoing pin, click and drag to add a **Set Text** node (from the **Content**
    category)
  id: totrans-342
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从其输出引脚，点击并拖动以添加一个 **设置文本** 节点（来自 **内容** 类别）
- en: Connect its **Text** pin to the **Return Value** pin of the **Get Sessions Result**
    **Message** node
  id: totrans-343
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将其 **文本** 引脚连接到 **Get Sessions Result** **消息** 节点的 **返回值** 引脚
- en: Connect its incoming execution pin to the outgoing execution pin of the **Set
    Session** **Results** node
  id: totrans-344
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将其输入执行引脚连接到 **设置会话** **结果** 节点的输出执行引脚
- en: From the **Variables** panel, drag a **Get Session Results** node. From its
    outgoing pin, click and drag to add a **For Each Loop** node. Connect the incoming
    **Exec** pin of the **For Each Loop** node to the outgoing pin of the **Set**
    **Text** node.
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **变量** 面板中，拖动一个 **获取会话结果** 节点。从其输出引脚，点击并拖动以添加一个 **For Each Loop** 节点。将 **For
    Each Loop** 节点的输入 **Exec** 引脚连接到 **Set Text** 节点的输出引脚。
- en: 'From the **Functions** panel, drag an **Add Item Renderer** node to the graph
    and do the following:'
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **函数** 面板中，将一个 **添加项目渲染器** 节点拖动到图表中，并执行以下操作：
- en: Connect its incoming execution pin to the **Loop Body** execution pin of the
    **For Each** **Loop** node
  id: totrans-347
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将其输入执行引脚连接到 **For Each** **循环** 节点的 **Loop Body** 执行引脚
- en: Connect its **Search Result** pin to the **Array Element** pin of the **For
    Each** **Loop** node
  id: totrans-348
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将其 **搜索结果** 引脚连接到 **For Each** **循环** 节点的 **数组元素** 引脚
- en: From the **Functions** panel, drag an **Enable Search Button** node onto the
    graph and connect its incoming execution pin to the **Completed** execution pin
    of the **For Each** **Loop** node.
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **函数** 面板中，将一个 **启用搜索按钮** 节点拖动到图表中，并将其输入执行引脚连接到 **For Each** **循环** 节点的 **Completed**
    执行引脚。
- en: 'This second part of the graph looks for a list of available sessions in the
    network, displays a result message, and adds the results to the session list.
    The graph is shown in *Figure 12**.23*:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 这第二部分的图表在网络上查找可用会话列表，显示结果消息，并将结果添加到会话列表中。图表在 *图 12.23* 中展示：
- en: '![Figure 12.23 – The second part of the FindSessions graph](img/Figure_12_23_B18203.jpg)'
  id: totrans-351
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.23 – FindSessions 图的第二部分](img/Figure_12_23_B18203.jpg)'
- en: Figure 12.23 – The second part of the FindSessions graph
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.23 – FindSessions 图的第二部分
- en: The last part of the graph will just show an error message if the search results
    with a failure.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 图表的最后一部分将在搜索结果失败时仅显示错误消息。
- en: From the **Variables** panel, drag a **Session Message** getter node and, from
    its outgoing pin, click and drag to add a **Set Text** node (from the **Content**
    category).
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **变量** 面板中，拖动一个 **会话消息** 获取节点，并从其输出引脚，点击并拖动以添加一个 **设置文本** 节点（来自 **内容** 类别）。
- en: In the `Error searching for` `available sessions`.
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Error searching for` `available sessions`。
- en: Connect its incoming execution pin to the **On Failure** outgoing execution
    pin of the **Find** **Sessions** node.
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其输入执行引脚连接到 **Find** **会话** 节点的 **On Failure** 输出执行引脚。
- en: Connect its outgoing execution pin to an **Enable Search Button** node to make
    the button clickable again.
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其输出执行引脚连接到一个 **启用搜索按钮** 节点，使按钮可点击。
- en: 'This part of the graph is self-explanatory and is depicted in *Figure 12**.24*:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分的图表是自我解释的，并在 *图 12.24* 中展示：
- en: '![Figure 12.24 – The third part of the FindSessions graph](img/Figure_12_24_B18203.jpg)'
  id: totrans-359
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.24 – 查找会话图的第三部分](img/Figure_12_24_B18203.jpg)'
- en: Figure 12.24 – The third part of the FindSessions graph
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.24 – 查找会话图的第三部分
- en: We have finally completed this widget and we are now ready to put things together
    in the **Main** **Menu** widget.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 我们终于完成了这个小部件，现在我们准备在 **主** **菜单** 小部件中组合这些内容。
- en: Creating the Main Menu widget
  id: totrans-362
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建主菜单小部件
- en: 'The **Main Menu** widget – the fourth and last one – simply acts as a container
    for the **Create Session** and **Find Sessions** ones. To create it, follow these
    steps:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '**主菜单** 小部件 – 第四个也是最后一个 – 简单地充当 **创建会话** 和 **查找会话** 的容器。要创建它，请按照以下步骤操作：'
- en: Right-click inside the Content Browser area and select **User Interface** |
    **Widget Blueprint**. In the pop-up window that appears, select **User Widget**.
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在内容浏览器区域内右键单击，然后选择 **用户界面** | **部件蓝图**。在出现的弹出窗口中，选择 **用户部件**。
- en: Name the newly created widget `WB_MainMenu` and double-click on it to open it.
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新创建的小部件命名为 `WB_MainMenu` 并双击它以打开。
- en: From the **Palette** window, drag a **Canvas Panel** item into the **Designer**
    view.
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **调色板** 窗口中，将一个 **画布面板** 项拖入 **设计器** 视图。
- en: From the **Palette** menu, drag a **WB Create Session** item onto the **Canvas**
    panel and place it somewhere you think is appropriate.
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **调色板** 菜单中，将一个 **WB 创建会话** 项拖到 **画布** 面板上，并将其放置在你认为合适的位置。
- en: From the **Palette** menu, drag a **WB Find Sessions** item onto the **Canvas**
    panel and place it somewhere you think is appropriate.
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **调色板** 菜单中，将一个 **WB 查找会话** 项拖到 **画布** 面板上，并将其放置在你认为合适的位置。
- en: 'The **Designer** view for this widget should look similar to the one shown
    in *Figure 12**.25*:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 此小部件的 **设计器** 视图应类似于 *图 12.25* 中所示：
- en: '![Figure 12.25 – The MainMenu widget](img/Figure_12_25_B18203.jpg)'
  id: totrans-370
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.25 – 主菜单小部件](img/Figure_12_25_B18203.jpg)'
- en: Figure 12.25 – The MainMenu widget
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.25 – 主菜单小部件
- en: In this section, you created the user interface for the main menu level, which
    is composed of reusable widgets. Each widget contains dedicated logic for creating
    sessions and joining them.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您创建了主菜单级别的用户界面，它由可重复使用的部件组成。每个部件都包含用于创建会话和加入会话的专用逻辑。
- en: Summary
  id: totrans-373
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter introduced you to the primary session commands within Unreal Engine’s
    Online Subsystem, providing you with the tools necessary to create, join, and
    manage multiplayer game sessions with ease. Armed with this knowledge, you have
    created a user interface that harnesses these features and puts them to practical
    use.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 本章向您介绍了 Unreal Engine 的在线子系统中的主要会话命令，为您提供了轻松创建、加入和管理多人游戏会话所需的工具。有了这些知识，您已经创建了一个利用这些功能并将其付诸实际应用的用户界面。
- en: If you want to take your multiplayer game from being just a basic prototype
    to a fully functional and complete gaming experience, then you must learn how
    to use these features. Trust me – having this knowledge under your belt will make
    all the difference and help you create some truly awesome multiplayer games!
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想将你的多人游戏从只是一个基本的原型变成一个功能齐全且完整的游戏体验，那么你必须学习如何使用这些功能。相信我 – 拥有这些知识将大有裨益，并帮助你创建一些真正出色的多人游戏！
- en: In the next chapter, we’ll take these helpful widgets and use them to create
    the main menu for the game. We’ll also create the needed Gameplay Framework classes,
    as well as a cool system for customizing the character’s appearance!
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用这些有用的部件来创建游戏的主菜单。我们还将创建所需的 Gameplay Framework 类，以及一个用于自定义角色外观的酷炫系统！
