- en: Developing Embedded Systems with Qt
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Qt开发嵌入式系统
- en: Qt (pronounced *cute*) is an advanced C++-based framework that covers a wide
    range of APIs, allowing you to implement networking, graphical user interfaces,
    parsing of data formats, the playing back and recording of audio, and much more.
    This chapter primarily covers the graphical aspect of Qt, and how to create advanced
    GUIs for embedded devices to provide an attractive and functional UI to users.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Qt（发音为cute）是一个基于先进的C++框架，涵盖了各种API，允许您实现网络、图形用户界面、数据格式的解析、音频的播放和录制等。本章主要涵盖了Qt的图形方面，以及如何为嵌入式设备创建高级GUI，为用户提供吸引人和功能齐全的UI。
- en: 'The topics covered in this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题如下：
- en: Creating advanced GUIs with Qt for embedded systems
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Qt为嵌入式系统创建高级GUI
- en: Using Qt's 3D designer to create an infotainment UI
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Qt的3D设计师创建信息娱乐UI
- en: Extending an existing embedded system with a GUI
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过GUI扩展现有的嵌入式系统
- en: The power of the right framework
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 正确框架的力量
- en: A **framework** is essentially a collection of code aimed at easing the development
    of software for a specific application. It provides the developer with a range
    of classes—or the language equivalent—to allow you to implement the application
    logic without having to worry about interfacing with the underlying hardware,
    or using the OS's APIs.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 框架本质上是一组旨在简化特定应用程序开发的代码集合。它为开发人员提供了一系列类或语言等效物，允许您实现应用程序逻辑，而无需担心与底层硬件的接口，或使用操作系统的API。
- en: In previous chapters, we used a number of frameworks to make our development
    efforts easier, from the No date Framework ([Chapter 4](bb67db6a-7c71-4519-80c3-7cd571cddfc0.xhtml),
    *Resource-Restricted Embedded Systems*) and CMSIS to Arduino for **microcontrollers**
    (**MCUs**), and from the low-level POCO framework for cross-platform development
    to the higher-level Qt framework.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们使用了许多框架来简化开发工作，从No date框架（[第4章](bb67db6a-7c71-4519-80c3-7cd571cddfc0.xhtml)，*资源受限的嵌入式系统*）和CMSIS到Arduino用于微控制器（MCUs），以及从低级POCO框架用于跨平台开发到更高级别的Qt框架。
- en: Each of these frameworks has a specific type of system that they are intended
    for. For No date, CMSIS, and Arduino, the target is MCUs, ranging from 8-bit AVR
    MCUs to 32-bit ARM MCUs. These target the bare-metal systems, without any intermediate
    **operating system** (**OS**) or similar. Above those in terms of complexity,
    we find **real-time OS frameworks** (**RTOS**), which include a full OS in the
    framework.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 每个框架都有特定类型的系统作为目标。对于No date、CMSIS和Arduino，目标是从8位AVR MCU到32位ARM MCU的MCUs。它们针对裸机系统，没有任何中间操作系统或类似的东西。在复杂性方面，我们还有包括完整操作系统的实时OS框架。
- en: Frameworks such as POCO and Qt target OSes in general, from desktop and server
    platforms to SoC platforms. Here they function primarily as an abstraction layer
    between the OS-specific APIs, while providing additional functionality alongside
    this abstraction. This allows you to quickly build up a full-featured application,
    without having to spend much time on each feature.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 诸如POCO和Qt之类的框架通常针对各种操作系统，从桌面和服务器平台到SoC平台。在这里，它们主要作为操作系统特定API之间的抽象层，同时在这个抽象层之外提供额外的功能。这使您能够快速构建一个功能齐全的应用程序，而无需在每个功能上花费太多时间。
- en: This is particularly important for networking functionality, where you do not
    want to write a TCP sockets-based server from scratch, but ideally just want to
    instantiate a ready-made class and use it. In the case of Qt, it also provides
    graphical user interface-related APIs to make the development of cross-platform
    GUIs easier. Other frameworks that also provide this kind of functionality include
    GTK+ and WxWidgets. In this chapter, however, we'll just be looking at developing
    with Qt.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于网络功能特别重要，您不希望从头开始编写基于TCP套接字的服务器，而理想情况下只是想实例化一个现成的类并使用它。在Qt的情况下，它还提供了与图形用户界面相关的API，以使跨平台GUI的开发更容易。其他提供这种功能的框架还包括GTK+和WxWidgets。然而，在本章中，我们将只关注使用Qt进行开发。
- en: In [Chapter 8](4416b2de-d86a-4001-863d-b167635a0e10.xhtml), *Example - Linux-Based
    Infotainment System*, we got a good look at how to develop with the Qt framework.
    There, we mostly ignored the **graphical user interface** (**GUI**) part, even
    though this is probably the most interesting part of Qt relative to other OS-based
    frameworks. Being able to use the same GUI across multiple OSes can be incredibly
    useful and convenient.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第8章](4416b2de-d86a-4001-863d-b167635a0e10.xhtml)，*示例-基于Linux的信息娱乐系统*中，我们深入了解了如何使用Qt框架进行开发。在那里，我们大多忽略了图形用户界面（GUI）部分，尽管这可能是相对于其他基于操作系统的框架最有趣的部分。能够在多个操作系统上使用相同的GUI可能非常有用和方便。
- en: This is mostly the case for desktop-based applications, where the GUI is a crucial
    part of the application, and thus not having to spend the time and trouble of
    porting it between OSes is a major time saver. For embedded platforms, this is
    also true, though here you have the option of integrating even deeper into the
    system than on a desktop system, as we will see in a moment.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这在大多数基于桌面的应用程序中都是如此，其中GUI是应用程序的关键部分，因此不必花费时间和精力在不同操作系统之间进行移植是一个重要的时间节省者。对于嵌入式平台，这也是真的，尽管在这里，您可以选择将其集成得比在桌面系统上更深入，正如我们将在下一刻看到的。
- en: We'll also look at the various types of Qt applications that you can develop,
    starting with a simple **command-line interface** (**CLI**) application.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将看一下您可以开发的各种类型的Qt应用程序，从简单的命令行界面（CLI）应用程序开始。
- en: Qt for command-line use
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于命令行的Qt
- en: 'Even though the graphical user interface is a big selling point of the Qt framework,
    it is also possible to use it to develop command-line-only applications. For this,
    we just use the `QCoreApplication` class to create an input and an event loop
    handler, as in this example:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Qt框架的图形用户界面是一个重要的卖点，但也可以用它来开发仅限于命令行的应用程序。为此，我们只需使用`QCoreApplication`类来创建输入和事件循环处理程序，就像这个例子中一样：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, our code is implemented in a class called `Core`. In the main function,
    we create a `QCoreApplication` instance, which receives the command-line parameters.
    We then instantiate an instance of our class.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们的代码是在一个名为`Core`的类中实现的。在主函数中，我们创建了一个`QCoreApplication`实例，该实例接收命令行参数。然后我们实例化了我们类的一个实例。
- en: We connect a signal from our class to the `QCoreApplication` instance, so that
    if we signal that we have finished, it will trigger a slot on the latter to clean
    up and terminate the application.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将我们类的信号连接到`QCoreApplication`实例，这样如果我们发出完成的信号，它将触发后者上的槽来清理和终止应用程序。
- en: After this, we call the method on our class to start its functionality and finally
    start the event loop by calling `exec()` on the `QCoreApplication` instance. At
    this point, we can use signals.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们调用我们类的方法来启动其功能，并最终通过在`QCoreApplication`实例上调用`exec()`来启动事件循环。在这一点上，我们可以使用信号。
- en: 'Note here that it is also possible to use Qt4-style connection syntax, instead
    of the earlier Qt5-style:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这里也可以使用Qt4风格的连接语法，而不是之前的Qt5风格：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Functionally, this makes no difference, and using either is fine for most situations.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 从功能上讲，这没有任何区别，对于大多数情况来说，使用任何一种都可以。
- en: 'Our class appears as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的类如下所示：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Every class in a Qt-based application that wants to make use of the signal-slot
    architecture of Qt is required to derive from the `QObject` class, and to include
    the `Q_OBJECT` macro within the class declaration. This is needed for Qt's `qmake
    preprocessor` tool to know which classes to process before the application code
    is compiled by the toolchain.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在Qt-based应用程序中，想要使用Qt的信号槽架构的每个类都需要派生自`QObject`类，并在类声明中包含`Q_OBJECT`宏。这对于Qt的`qmake预处理器`工具在应用程序代码被工具链编译之前知道要处理哪些类是必需的。
- en: 'Here is the implementation:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这是实现：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Of note is the fact that we can let the constructor of any QObject-derived class
    know what the encapsulating parent class is, allowing said parent to own these
    child classes and invoke their destructor when it itself is destroyed.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，我们可以让任何QObject派生类的构造函数知道封装父类是什么，从而允许父类拥有这些子类，并在自身被销毁时调用它们的析构函数。
- en: GUI-based Qt applications
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于GUI的Qt应用程序
- en: 'Returning to the Qt-based example project from [Chapter 8](4416b2de-d86a-4001-863d-b167635a0e10.xhtml),
    *Example - Linux-Based Infotainment System*, we can now compare its main function
    to the preceding command-line-only version to see what changes once we add a GUI
    to the project:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 回到[第8章](4416b2de-d86a-4001-863d-b167635a0e10.xhtml)中基于Qt的示例项目，*示例-Linux基础信息娱乐系统*，我们现在可以比较其主函数和之前的仅限命令行版本，看看在向项目添加GUI后会发生什么变化：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The most obvious change here is that we use `QApplication` instead of `QCoreApplication`.
    The other big change is that we do not use a completely custom class, but one
    that derives from `QMainWindow`:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这里最明显的变化是我们使用了`QApplication`而不是`QCoreApplication`。另一个重大变化是我们不再使用完全自定义的类，而是从`QMainWindow`派生的类：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here, we can see that the `MainWindow` class indeed derives from `QMainWindow`,
    which also gives it its `show()` method. Of note is the `MainWindow` instance
    being declared in the UI namespace. This is connected to the auto-generated code
    that is created when we run the qmake tool on the UI file, as we will see in a
    moment. Next is the constructor:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到`MainWindow`类确实是从`QMainWindow`派生出来的，这也赋予了它`show()`方法。值得注意的是`MainWindow`实例在UI命名空间中声明。这与我们在运行qmake工具时生成的自动生成的代码相关联，我们马上就会看到。接下来是构造函数：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The first thing of note here is how we inflate the GUI from the UI description
    file. This file is usually created by visually laying out the GUI with the Qt
    Designer tool, which is part of the Qt Creator IDE. This UI file contains a description
    of each widget's properties, along with the layout applied to them, and so on.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要注意的第一件事是我们如何从UI描述文件中填充GUI。这个文件通常是通过使用Qt Creator IDE中的Qt Designer工具直观地布局GUI而创建的。这个UI文件包含了每个小部件的属性描述，以及应用于它们的布局等等。
- en: 'It''s also possible to programmatically create these widgets and add them to
    layouts, of course. This gets quite tedious for larger layouts, however. Generally,
    you create a single UI file for the main window, and an additional one for each
    sub window and dialog. These can then be inflated into a window or dialog in a
    similar fashion:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，也可以以编程方式创建这些小部件并将它们添加到布局中。然而，对于更大的布局来说，这变得相当乏味。通常，您为主窗口创建一个单独的UI文件，并为每个子窗口和对话框创建一个额外的UI文件。然后可以以类似的方式将它们填充到窗口或对话框中。
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Menu actions in the GUI are connected to internal slots by specifying the specific
    signal on the menu action (`QAction` instance). We can see here that they are
    in the `ui` object, which is found in the auto-generated source code for the UI
    file, as we mentioned earlier:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: GUI中的菜单操作通过指定菜单操作（`QAction`实例）上的特定信号与内部槽相连接。我们可以在这里看到它们在`ui`对象中，这个对象在UI文件的自动生成源代码中可以找到，正如我们之前提到的：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Button widgets in the GUI are connected in a similar manner, though they of
    course emit a different signal on account of them being a different type of widget:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: GUI中的按钮小部件以类似的方式连接，尽管它们当然会因为它们是不同类型的小部件而发出不同的信号：
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We''re free to do anything we would do in any other constructor, including
    setting defaults and creating instances of classes we will need later on:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在这里做任何其他构造函数中会做的事情，包括设置默认值和创建我们以后需要的类的实例：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'One crucial thing to remember here is that this class runs on the UI thread,
    meaning that we should not do anything intensive in here. That''s why we move
    such class instances off to their own thread, as shown here:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要记住的一件关键的事情是这个类在UI线程上运行，这意味着我们不应该在这里做任何繁重的工作。这就是为什么我们将这样的类实例移到它们自己的线程中，就像这样：
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the constructor, we delete the UI and all associated elements.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在构造函数中，我们删除UI和所有相关元素。
- en: Embedded Qt
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌入式Qt
- en: A major target of the Qt framework next to desktop systems are **embedded systems**,
    specifically **Embedded Linux**, where there are a few different ways to use Q.
    The main point of embedded Qt is to optimize the software stock by allowing you
    to boot straight into a Qt-optimized environment, and by allowing for a variety
    of ways to render to the display.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Qt框架的一个主要目标是桌面系统之外的**嵌入式系统**，特别是**嵌入式Linux**，在那里有几种不同的使用Q的方式。嵌入式Qt的主要目的是通过允许您直接启动到优化的Qt环境中来优化软件库，并允许多种方式渲染到显示器。
- en: 'Qt for Embedded Linux supports the following platform plugins for rendering:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Qt for Embedded Linux支持以下用于渲染的平台插件：
- en: '| **Plugin** | **Description** |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| **插件** | **描述** |'
- en: '| EGLFS | Provides an interface to OpenGL ES or similar 3D rendering API. Usually,
    the default configuration for Embedded Linux. More details about EGL can be found
    at the following address: [https://www.khronos.org/egl](https://www.khronos.org/egl).
    |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| EGLFS | 提供对OpenGL ES或类似的3D渲染API的接口。通常是嵌入式Linux的默认配置。有关EGL的更多详细信息，请访问以下网址：[https://www.khronos.org/egl](https://www.khronos.org/egl).
    |'
- en: '| LinuxFB | Writes directly to the framebuffer via Linux''s fbdev subsystem.
    Only software-rendered content is supported. As a result, on some setups the display
    performance is likely to be limited. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| LinuxFB | 通过Linux的fbdev子系统直接写入帧缓冲。仅支持软件渲染内容。因此，在某些设置上，显示性能可能会受到限制。 |'
- en: '| DirectFB | Directly writes to the graphic card''s framebuffer using the DirectFB
    library. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| DirectFB | 使用DirectFB库直接写入图形卡的帧缓冲。 |'
- en: '| Wayland | Uses the Wayland windowing system. This allows for multiple concurrent
    windows, but is of course more demanding on the hardware. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| Wayland | 使用Wayland窗口系统。这允许多个并发窗口，但当然对硬件要求更高。 |'
- en: In addition to this, Qt for Embedded Linux comes with a variety of APIs for
    handling touch and pen input, and so on. To optimize the system for a Qt-based
    application, any unrelated services, processes, and libraries are generally removed,
    resulting in a system that boots within a matter of seconds into the embedded
    application.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，Qt for Embedded Linux还配备了各种API，用于处理触摸和笔输入等。为了优化基于Qt的应用程序的系统，通常会删除任何不相关的服务、进程和库，从而使系统在几秒钟内启动到嵌入式应用程序中。
- en: Custom GUIs with stylesheets
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用样式表的自定义GUI
- en: The standard widget-based GUIs that desktop systems tend to use do not lend
    themselves that readily to customization. As a result, you are generally faced
    with having to either override the painting function in a `QWidget` instance and
    handle every single pixel of the widget drawing, or to use stylesheet-based customization.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 桌面系统通常使用的标准基于小部件的GUI不太容易定制。因此，通常要么需要覆盖`QWidget`实例中的绘图函数并处理小部件绘制的每个像素，要么使用基于样式表的定制。
- en: Qt stylesheets allow you to tweak the look and feel of individual widgets, even
    dynamically. They are essentially written using **Cascading Style Sheet** (**CSS**)
    syntax as used with HTML pages. They allow you to change elements of a widget,
    such as the borders, rounding corners, or the thickness and color of the elements.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Qt样式表允许您动态地调整单个小部件的外观和感觉。它们基本上是使用与HTML页面一样的**层叠样式表**（**CSS**）语法编写的。它们允许您更改小部件的元素，如边框、圆角、或元素的厚度和颜色。
- en: QML
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QML
- en: '**Qt Modeling Language** (**QML**) is a user interface markup language. It
    is strongly based on JavaScript and even uses inline JavaScript. It can be used
    to create dynamic and completely custom user interfaces, and is usually used together
    with the Qt Quick module.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**Qt建模语言**（**QML**）是一种用户界面标记语言。它基于JavaScript，并且甚至使用内联JavaScript。它可以用于创建动态和完全定制的用户界面，并通常与Qt
    Quick模块一起使用。'
- en: Later in this chapter, we will take an in-depth look at how a dynamic GUI is
    created.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的后面，我们将深入研究如何创建动态GUI。
- en: 3D designer
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3D设计师
- en: With Qt 5, the Qt 3D module was introduced, which streamlined access to the
    OpenGL rendering API. This new module was used as the foundation for the Qt 3D
    Designer editor and the accompanying runtime. It can be used to create highly
    dynamic GUIs, featuring a combination of 2D and 3D elements.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Qt 5引入了Qt 3D模块，它简化了对OpenGL渲染API的访问。这个新模块被用作Qt 3D Designer编辑器和相关运行时的基础。它可以用于创建高度动态的GUI，具有2D和3D元素的组合。
- en: It is quite similar to hand-crafted QML-based GUIs, but provides a more streamlined
    workflow, ease of adding animations, and previewing the project. It's similar
    to the Qt Designer Studio, which focuses more on 2D GUIs, but this one is not
    available for free, instead requiring you to purchase a license.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 它与手工制作的基于QML的GUI非常相似，但提供了更简化的工作流程，易于添加动画，并预览项目。它类似于Qt Designer Studio，后者更专注于2D
    GUI，但需要购买许可证，不免费提供。
- en: An example of adding a GUI to the infotainment system
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向信息娱乐系统添加GUI的示例
- en: In this example, we will be using C++, Qt, and QML to create a graphical user
    interface that is capable of showing the current track that is playing, performing
    an audio visualization, indicating the playback progress, and allowing you to
    toggle different input modes using onscreen buttons.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用C++、Qt和QML来创建一个图形用户界面，能够显示当前播放的音轨，执行音频可视化，指示播放进度，并允许您使用屏幕按钮切换不同的输入模式。
- en: 'This example is based on the *Audio Visualizer* example from the Qt documentation.
    This can be found in the Qt installation folder (if examples got installed), as
    well as on the Qt site: [https://doc.qt.io/qt-5/qt3d-audio-visualizer-qml-example.html.](https://doc.qt.io/qt-5/qt3d-audio-visualizer-qml-example.html.)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子是基于Qt文档中的*音频可视化器*示例。它可以在Qt安装文件夹中找到（如果安装了示例），也可以在Qt网站上找到：[https://doc.qt.io/qt-5/qt3d-audio-visualizer-qml-example.html.](https://doc.qt.io/qt-5/qt3d-audio-visualizer-qml-example.html.)
- en: The main difference between this code and the official example is that the `QMediaPlayer`
    media player was moved into the C++ code, along with a number of other functions.
    Instead, a number of signals and slots between the QML UI and C++ backend are
    used in the new `QmlInterface` class for button presses, updating the UI, and
    interaction with the media player.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码与官方示例的主要区别在于，`QMediaPlayer`媒体播放器被移入了C++代码中，还有其他一些函数。而在新的`QmlInterface`类中，QML
    UI和C++后端之间使用了一些信号和槽来处理按钮按下、更新UI和与媒体播放器的交互。
- en: A GUI such as this could be wired into the existing infotainment project code
    to control its functionality, using the GUI in addition to the voice-driven interface.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的GUI可以连接到现有的信息娱乐项目代码中，以控制其功能，使用GUI以及语音驱动界面。
- en: 'The GUI we''re putting together in this example looks like this in action:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们组合的GUI在操作时看起来是这样的：
- en: '![](img/abcd27b7-3f26-455b-8fa1-3e70263869cf.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/abcd27b7-3f26-455b-8fa1-3e70263869cf.png)'
- en: Main
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主要
- en: 'The main source file appears as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 主要源文件如下所示：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Our custom class is added to the QML viewer (`QQuickView`) as a context class.
    This serves as the proxy between the QML UI and our C++ code, as we will see in
    a moment. The viewer itself uses an OpenGL surface to render the UI on.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的自定义类被添加到QML查看器（`QQuickView`）作为上下文类。这充当了QML UI和我们的C++代码之间的代理，我们马上就会看到。查看器本身使用OpenGL表面来渲染UI。
- en: QmlInterface
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QmlInterface
- en: 'The header of our custom class features a number of additions to make properties
    and methods visible to the QML code:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们自定义类的头部包含了许多添加，以使属性和方法对QML代码可见：
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `Q_PROPERTY` tag tells the qmake parser that this class contains a property
    (variable) that should be made visible to the QML code, with the parameters specifying
    the name of the variable, the methods used for reading and writing the variable
    (if desired), and finally the signal that is emitted whenever the property has
    changed.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`Q_PROPERTY`标签告诉qmake解析器，这个类包含一个属性（变量），应该对QML代码可见，参数指定变量的名称，用于读取和写入变量的方法（如果需要），最后是每当属性发生变化时发出的信号。'
- en: 'This allows for an automatic update feature to be set up to keep this property
    synchronized between the C++ code and the QML side:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许设置自动更新功能，以保持此属性在C++代码和QML端之间同步：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Similarly, the `Q_INVOKABLE` tag ensures that these methods are made visible
    to the QML side and can be called from there.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，`Q_INVOKABLE`标签确保这些方法对QML端可见，并且可以从那里调用。
- en: 'Here is the implementation:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这是实现：
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The constructor got changed considerably from the original example project,
    with the media player instance being created here, along with its connections.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数与原始示例项目有很大不同，这里创建了媒体播放器实例及其连接。
- en: 'We load the same music file here as was used with the original project. When
    integrating the code into the infotainment project or a similar project, you would
    make this dynamic. Similarly, the file that we are also loading here to get the
    amplitude for the music file with the visualization would likely be omitted in
    a full integration, instead opting to generate the amplitude values dynamically:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里加载了与原始项目中使用的相同音乐文件。将代码集成到信息娱乐项目或类似项目中时，您可以使其动态化。同样，我们在这里加载的用于获取音乐文件振幅的文件在完全集成时可能会被省略，而选择动态生成振幅值：
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This was the only method that previously existed in the QML context class.
    It''s used to detect whether the code runs on a mobile device with a touch screen:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这是以前存在于QML上下文类中的唯一方法。它用于检测代码是否在具有触摸屏的移动设备上运行：
- en: '[PRE17]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We got a number of control methods that connect to the buttons in the UI to
    allow for control of the media player instance:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有许多控制方法，连接到UI中的按钮，以允许控制媒体播放器实例：
- en: '[PRE18]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This slot method is used to detect when the media player has reached the end
    of the active track, so that the UI can be signaled that it should update to indicate
    this:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这个槽方法用于检测媒体播放器是否已经到达了活动曲目的结尾，以便UI可以被通知应该更新以指示这一点：
- en: '[PRE19]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: These two slot methods are connected to the media player instance. The duration
    slot is required because the length (duration) of a newly loaded track will not
    be immediately available. Instead, it's an asynchronously updated property.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个槽方法连接到媒体播放器实例。持续时间槽是必需的，因为新加载的曲目的长度（持续时间）不会立即可用。相反，它是一个异步更新的属性。
- en: As a result, we have to wait until the media player has finished with this and
    emits the signal that it has completed this process.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们必须等到媒体播放器完成并发出信号，表明它已经完成了这个过程。
- en: Next, to allow us to update the time remaining on the current track, we also
    get constant updates on the current position from the media player so that we
    can update the UI with the new value.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，为了让我们能够更新当前曲目的剩余时间，我们还会不断地从媒体播放器获取当前位置的更新，这样我们就可以用新值更新UI。
- en: Both the duration and position properties are updated in the UI using the linkage
    method we saw in the description of the header file for this class.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 持续时间和位置属性都使用了我们在这个类的头文件描述中看到的链接方法在UI中进行更新。
- en: 'Finally, we emit a `start()` signal, which is linked into a slot in the QML
    code that will start the visualization process, as we will see later on in the
    QML code:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们发出一个`start()`信号，它与QML代码中的一个槽连接，将启动可视化过程，我们稍后会在QML代码中看到：
- en: '[PRE20]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The duration property is also used by the visualization code. Here, we allow
    it to be obtained directly. Similarly, we make the position property available
    as well with a direct call:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 持续时间属性也被可视化代码使用。在这里，我们允许直接获取它。同样，我们也使位置属性可用，可以直接调用：
- en: '[PRE21]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This method was ported from the JavaScript code in the original project, performing
    the same task of determining the audio level based on the amplitude data we read
    in previously from the file:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法是从原始项目的JavaScript代码移植过来的，执行的是根据之前从文件中读取的振幅数据来确定音频级别的相同任务：
- en: '[PRE22]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Similarly, this method was also ported from the original project's JavaScript
    code, since we moved the code that relies on it into the C++ code. It takes in
    the millisecond count for the track duration or position and converts it into
    a string containing the minutes and seconds, matching the original value.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，这个方法也是从原始项目的JavaScript代码移植过来的，因为我们将依赖于它的代码移入了C++代码中。它接受曲目持续时间或位置的毫秒计数，并将其转换为包含分钟和秒的字符串，与原始值匹配。
- en: QML
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QML
- en: Moving on, we are done with the C++ side of things and can now look at the QML
    UI.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们已经完成了C++端的工作，现在可以看一下QML UI了。
- en: 'First, here is the main QML file:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，这是主要的QML文件：
- en: '[PRE23]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The QML file consists out of a hierarchy of elements. Here, we define the top
    element, giving it its dimensions and name:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: QML文件由一系列元素组成。在这里，我们定义了顶层元素，给它指定了尺寸和名称：
- en: '[PRE24]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'A number of states for the UI are defined, along with the changes that should
    be triggered if the state should change to it:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 定义了UI的一些状态，以及应该触发的变化：
- en: '[PRE25]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: These are the connections that link the signals from the C++ side to a local
    handler. We target our custom class as the source of these signals, then define
    the handler for each signal we wish to handle by prefixing it and adding the code
    that should be executed.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是将C++端的信号链接到本地处理程序的连接。我们将我们的自定义类作为这些信号的源，然后为我们希望处理的每个信号定义处理程序，通过为其添加前缀并添加应该执行的代码。
- en: 'Here, we see that the start signal is linked to a handler that triggers the
    function in the visualization module that starts that module:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们看到启动信号与一个处理程序链接，触发可视化模块中启动该模块的函数：
- en: '[PRE26]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This `Image` element defines the background image, which we load from the resources
    that were added to the executable when the project was built:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这个“Image”元素定义了背景图像，我们从构建项目时添加到可执行文件中的资源中加载：
- en: '[PRE27]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The 3D scene that will be filled with the visualizer''s content is defined:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 3D场景将填充可视化器的内容：
- en: '[PRE28]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'These two text elements are linked with the property in our custom C++ class,
    as we saw earlier. These values will be kept updated with the value in the C++
    class instance as it changes:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个文本元素与我们自定义的C++类中的属性相关联，就像我们之前看到的那样。这些值将随着C++类实例中的值的变化而保持更新：
- en: '[PRE29]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The rest of the source serves to set up the individual buttons for controlling
    the playback, with play, stop, and pause buttons, which get swapped over as needed.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码的其余部分用于设置用于控制播放的各个按钮，包括播放、停止和暂停按钮，根据需要进行切换。
- en: 'Next, we will look at the amplitude bar file:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看一下振幅条文件：
- en: '[PRE30]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'A number of properties are defined before we dive into the animation state
    change handler:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入到动画状态变化处理程序之前，定义了一些属性：
- en: '[PRE31]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Every time the audio playback is stopped, paused, or started, the animation
    has to be updated to match this state change:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 每当音频播放停止、暂停或开始时，动画都必须更新以匹配这种状态变化：
- en: '[PRE32]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'This defines the look of the amplitude bars, using Phong shading:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这定义了振幅条的外观，使用Phong着色：
- en: '[PRE33]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: As the amplitude bars move across the screen, they change relative to the camera,
    so we need to keep calculating the new angle and display height.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 当振幅条在屏幕上移动时，它们相对于摄像机的位置会发生变化，因此我们需要不断计算新的角度和显示高度。
- en: 'In this section, we also replaced the original call to the audio level method
    with a call to the new method in our C++ class:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们还用我们的C++类中的新方法调用替换了原始的音频级别方法的调用：
- en: '[PRE34]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The rest of the file contains a few more animation transforms.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 文件的其余部分包含了一些动画变换。
- en: 'Finally, here is the visualization module:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这是可视化模块：
- en: '[PRE35]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'This section got changed from interacting with the local media player instance
    to the new one in the C++ code. Beyond that, we left it unchanged. This is the
    main handler for when anything changes in the scene due to user interaction, or
    a track starting or ending:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分从与本地媒体播放器实例的交互改为与C++代码中的新实例交互。除此之外，我们没有做任何改动。这是主要的处理程序，用于处理由用户交互引起的场景变化，或者曲目的开始或结束：
- en: '[PRE36]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'A number of property changes and transitions are defined for the track title
    object:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 为曲目标题对象定义了一些属性变化和转换：
- en: '[PRE37]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'This function is what starts the entire visualization sequence. It uses the
    track duration, as obtained via our C++ class instance, to determine the dimensions
    of the progress bar for the track playback animation before starting the visualization
    animation:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数是启动整个可视化序列的方法。它使用我们的C++类实例获取的曲目持续时间来确定曲目播放动画的进度条尺寸，然后开始可视化动画：
- en: '[PRE38]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'A camera is defined for the 3D scene:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 为3D场景定义了一个摄像机：
- en: '[PRE39]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'A renderer and light for the scene are created:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 为场景创建了渲染器和光源：
- en: '[PRE40]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'A mesh is created for the amplitude bars:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 为振幅条创建了一个网格：
- en: '[PRE41]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The number of bars, along with other properties, is defined:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 定义了条的数量以及其他属性：
- en: '[PRE42]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'This plane contains the title object whenever there''s no track playing:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这个平面包含了没有曲目播放时的标题对象：
- en: '[PRE43]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'This plane contains the song title whenever a track is active:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这个平面包含了曲目激活时的歌曲标题：
- en: '[PRE44]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'To transform the planes between playing and non-playing transitions, this transform
    is used:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在播放和非播放转换之间转换平面，使用了这个变换：
- en: '[PRE45]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'A circle mesh that provides a reflection effect is added:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了一个提供反射效果的圆形网格：
- en: '[PRE46]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Finally, this mesh creates the progress bar, which moves from the left to the
    right to indicate playback progress.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这个网格创建了进度条，它从左到右移动以指示播放进度。
- en: The entire project is compiled by running qmake followed by make, or by opening
    the project in Qt Creator and building it from there. When run, it will automatically
    start playing the included song and show the amplitude visualization, while being
    controllable via the buttons in the UI.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 整个项目通过运行qmake然后make来编译，或者通过在Qt Creator中打开项目并从那里构建来编译。运行时，它将自动开始播放包含的歌曲并显示振幅可视化，同时可以通过UI中的按钮进行控制。
- en: Summary
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at the myriad ways in which the Qt framework can
    be used to develop for embedded systems. We briefly looked at how it compares
    with other frameworks and how Qt is optimized for these embedded platforms, before
    working through an example of a QML-based GUI that could be added to the infotainment
    system we previously created.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了Qt框架在开发嵌入式系统方面的多种用途。我们简要地比较了它与其他框架的区别，以及Qt如何针对这些嵌入式平台进行优化，然后通过一个基于QML的GUI示例来演示如何将其添加到我们之前创建的信息娱乐系统中。
- en: You should now be able to create basic Qt applications, both purely command
    line-based and with a GUI. You should also have a clear idea of which options
    Qt offers to develop GUIs with.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在应该能够创建基本的Qt应用程序，包括纯粹基于命令行的应用程序和带有图形用户界面的应用程序。您还应该清楚地了解Qt提供的开发GUI的各种选项。
- en: In the next chapter, we will be taking a look at the next evolution of embedded
    platforms, using **field-programmable gate arrays** (**FPGAs**) to add custom,
    hardware-based functionality to speed up embedded platforms.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看看嵌入式平台的下一个演进，使用可编程门阵列（FPGAs）来为嵌入式平台加入定制的基于硬件的功能，以加快其速度。
