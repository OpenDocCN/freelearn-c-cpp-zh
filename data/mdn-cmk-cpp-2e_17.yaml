- en: Appendix
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录
- en: Miscellaneous commands
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 杂项命令
- en: Every language includes utility commands useful for various tasks, and CMake
    is no exception. It offers tools for arithmetic, bitwise operations, string manipulations,
    and list and file operations. Although the need for these commands has diminished
    due to enhancements and the development of numerous modules, they can still be
    essential in highly automated projects. Nowadays, you might find them more useful
    in CMake scripts invoked with `cmake -P <filename>`.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 每种语言都包括一些用于各种任务的实用命令，CMake也不例外。它提供了用于算术运算、按位操作、字符串操作以及列表和文件操作的工具。尽管由于功能增强和多个模块的发展，这些命令的需求有所减少，但在高度自动化的项目中，它们仍然是必不可少的。如今，您可能会发现它们在使用`cmake
    -P <filename>`调用的CMake脚本中更为有用。
- en: Hence, this appendix, which is a summary of miscellaneous CMake commands and
    their various modes, acts as a convenient offline reference or a simplified version
    of the official documentation. For more detailed information, you should consult
    the provided links.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，本附录总结了CMake命令和其多种模式，作为方便的离线参考或官方文档的简化版。要获取更详细的信息，请查阅提供的链接。
- en: This reference is valid for CMake 3.26.6.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 此参考适用于CMake 3.26.6。
- en: 'In this *Appendix*, we’re going to cover the following main topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本*附录*中，我们将涵盖以下主要内容：
- en: The `string()` command
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string()`命令'
- en: The `list()` command
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list()`命令'
- en: The `file()` command
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file()`命令'
- en: The `math()` command
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`math()`命令'
- en: The string() command
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`string()`命令'
- en: 'The `string()` command is used to manipulate strings. It comes with a variety
    of modes that perform different actions on the string: search and replace, manipulation,
    comparison, hashing, generation, and JSON operations (the last one available since
    CMake 3.19).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`string()`命令用于操作字符串。它提供了多种模式，执行不同的操作：搜索和替换、操作、比较、哈希、生成和JSON操作（自CMake 3.19版本起提供最后一个）。'
- en: 'Full details can be found in the online documentation: [https://cmake.org/cmake/help/latest/command/string.html](https://cmake.org/cmake/help/latest/command/string.html).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的详细信息可以在在线文档中找到：[https://cmake.org/cmake/help/latest/command/string.html](https://cmake.org/cmake/help/latest/command/string.html)。
- en: 'Note that `string()` modes that accept the `<input>` argument will accept multiple
    `<input>` values and concatenate them before the execution of the command, so:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，接受`string()`模式的`<input>`参数将接受多个`<input>`值，并在执行命令之前将它们连接起来，因此：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'is the equivalent of the following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于以下内容：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Available `string()` modes are search and replace, manipulation, comparison,
    hashing, generation, and JSON.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的`string()`模式包括搜索和替换、操作、比较、哈希、生成和JSON。
- en: Search and replace
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 搜索和替换
- en: 'The following modes are available:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下模式可用：
- en: '`string(FIND <haystack> <pattern> <out> [REVERSE])` searches for `<pattern>`
    in the `<haystack>` string and writes the position found as an integer to the
    `<out>` variable. If the `REVERSE` flag was used, it searches from the end of
    the string to the beginning. This works only for ASCII strings (multibyte support
    isn’t provided).'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(FIND <haystack> <pattern> <out> [REVERSE])`在`<haystack>`字符串中搜索`<pattern>`并将找到的位置以整数形式写入`<out>`变量。如果使用了`REVERSE`标志，它将从字符串的末尾向前搜索。此操作仅适用于ASCII字符串（不支持多字节字符）。'
- en: '`string(REPLACE <pattern> <replace> <out> <input>)` replaces all occurrences
    of `<pattern>` in `<input>` with `<replace>` and stores them in the `<out>` variable.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(REPLACE <pattern> <replace> <out> <input>)`将`<input>`中的所有`<pattern>`替换为`<replace>`，并将结果存储在`<out>`变量中。'
- en: '`string(REGEX MATCH <pattern> <out> <input>)` regex-matches the first occurrence
    of `<pattern>` in `<input>` with `<replace>` and stores it in the `<out>` variable.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(REGEX MATCH <pattern> <out> <input>)`使用正则表达式匹配`<input>`中第一次出现的`<pattern>`，并将其存储在`<out>`变量中。'
- en: '`string(REGEX MATCHALL <pattern> <out> <input>)` regex-matches all occurrences
    of `<pattern>` in `<input>` with `<replace>` and stores them in the `<out>` variable
    as a comma-separated list.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(REGEX MATCHALL <pattern> <out> <input>)`使用正则表达式匹配`<input>`中所有出现的`<pattern>`并将其存储在`<out>`变量中，格式为逗号分隔的列表。'
- en: '`string(REGEX REPLACE <pattern> <replace> <out> <input>)` regex-replaces all
    occurrences of `<pattern>` in `<input>` with the `<replace>` expression and stores
    them in the `<out>` variable.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(REGEX REPLACE <pattern> <replace> <out> <input>)`正则替换`<input>`中的所有`<pattern>`出现，并使用`<replace>`表达式将它们替换，并将结果存储在`<out>`变量中。'
- en: 'Regular expression operations follow C++ syntax, as defined in the standard
    library in the `<regex>` header. You can use capturing groups to add matches to
    the `<replace>` expression with numeric placeholders: `\\1`, `\\2`... (double
    backslashes are required so arguments are parsed correctly).'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式操作遵循 C++ 语法，如 `<regex>` 头文件中定义的标准库所示。你可以使用捕获组将匹配项添加到 `<replace>` 表达式中，并使用数字占位符：`\\1`、`\\2`...（需要使用双反斜杠，以确保参数被正确解析）。
- en: Manipulation
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作
- en: 'The following modes are available:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下模式是可用的：
- en: '`string(APPEND <out> <input>)` mutates strings stored in `<out>` by appending
    the `<input>` string.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(APPEND <out> <input>)` 通过附加 `<input>` 字符串来修改存储在 `<out>` 中的字符串。'
- en: '`string(PREPEND <out> <input>)` mutates strings stored in `<out>` by prepending
    the `<input>` string.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(PREPEND <out> <input>)` 通过在字符串前添加 `<input>` 字符串来修改存储在 `<out>` 中的字符串。'
- en: '`string(CONCAT <out> <input>)` concatenates all provided `<input>` strings
    and stores them in the `<out>` variable.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(CONCAT <out> <input>)` 将所有提供的 `<input>` 字符串连接在一起，并将其存储在 `<out>` 变量中。'
- en: '`string(JOIN <glue> <out> <input>)` interleaves all provided `<input>` strings
    with a `<glue>` value and stores them as a concatenated string in the `<out>`
    variable (don’t use this mode for list variables).'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(JOIN <glue> <out> <input>)` 使用 `<glue>` 值将所有提供的 `<input>` 字符串交织在一起，并将其作为连接的字符串存储在
    `<out>` 变量中（不要在列表变量中使用此模式）。'
- en: '`string(TOLOWER <string> <out>)` converts `<string>` to lowercase and stores
    it in the `<out>` variable.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(TOLOWER <string> <out>)` 将 `<string>` 转换为小写并将其存储在 `<out>` 变量中。'
- en: '`string(TOUPPER <string> <out>)` converts `<string>` to uppercase and stores
    it in the `<out>` variable.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(TOUPPER <string> <out>)` 将 `<string>` 转换为大写并将其存储在 `<out>` 变量中。'
- en: '`string(LENGTH <string> <out>)` counts the bytes of `<string>` and stores the
    result in the `<out>` variable.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(LENGTH <string> <out>)` 计算 `<string>` 的字节数，并将结果存储在 `<out>` 变量中。'
- en: '`string(SUBSTRING <string> <begin> <length> <out>)` extracts a substring of
    `<string>` of `<length>` bytes starting at the `<begin>` byte, and stores it in
    the `<out>` variable. Providing `-1` as the length is understood as “till the
    end of the string.”'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(SUBSTRING <string> <begin> <length> <out>)` 从 `<string>` 中提取一个子字符串，长度为
    `<length>` 字节，起始位置为 `<begin>` 字节，并将其存储在 `<out>` 变量中。提供 `-1` 作为长度表示“直到字符串的末尾”。'
- en: '`string(STRIP <string> <out>)` removes trailing and leading whitespace from
    `<string>` and stores the result in the `<out>` variable.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(STRIP <string> <out>)` 移除 `<string>` 的前导和尾随空白字符，并将结果存储在 `<out>` 变量中。'
- en: '`string(GENEX_STRIP <string> <out>)` removes all generator expressions used
    in `<string>` and stores the result in the `<out>` variable.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(GENEX_STRIP <string> <out>)` 移除 `<string>` 中所有使用的生成器表达式，并将结果存储在 `<out>`
    变量中。'
- en: '`string(REPEAT <string> <count> <out>)` generates a string containing `<count>`
    repetitions of `<string>` and stores it in the `<out>` variable.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(REPEAT <string> <count> <out>)` 生成一个包含 `<count>` 次重复的 `<string>` 的字符串，并将其存储在
    `<out>` 变量中。'
- en: Comparison
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比较
- en: 'A comparison of strings takes the following form:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串比较采用以下形式：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `<operation>` argument is one of the following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`<operation>` 参数是以下之一：'
- en: '`LESS`'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LESS`'
- en: '`GREATER`'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GREATER`'
- en: '`EQUAL`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EQUAL`'
- en: '`NOTEQUAL`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NOTEQUAL`'
- en: '`LESS_EQUAL`'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LESS_EQUAL`'
- en: '`GREATER_EQUAL`'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GREATER_EQUAL`'
- en: It will be used to compare `<stringA>` with `<stringB>` and the result (`true`
    or `false`) will be stored in the `<out>` variable.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 它将用于比较 `<stringA>` 和 `<stringB>`，并将结果（`true` 或 `false`）存储在 `<out>` 变量中。
- en: Hashing
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 哈希
- en: 'The hashing mode has the following signature:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希模式具有以下签名：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'It hashes `<string>` with `<hashing-algorithm>` and stores the result in the
    `<out>` variable. The following algorithms are supported:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 它使用 `<hashing-algorithm>` 对 `<string>` 进行哈希，并将结果存储在 `<out>` 变量中。支持以下算法：
- en: '`MD5`: Message-Digest Algorithm 5, RFC 1321'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MD5`: 消息摘要算法 5，RFC 1321'
- en: '`SHA1`: US Secure Hash Algorithm 1, RFC 3174'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SHA1`: 美国安全哈希算法 1，RFC 3174'
- en: '`SHA224`: US Secure Hash Algorithms, RFC 4634'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SHA224`: 美国安全哈希算法，RFC 4634'
- en: '`SHA256`: US Secure Hash Algorithms, RFC 4634'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SHA256`: 美国安全哈希算法，RFC 4634'
- en: '`SHA384`: US Secure Hash Algorithms, RFC 4634'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SHA384`: 美国安全哈希算法，RFC 4634'
- en: '`SHA512`: US Secure Hash Algorithms, RFC 4634'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SHA512`: 美国安全哈希算法，RFC 4634'
- en: '`SHA3_224`: Keccak SHA-3'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SHA3_224`: Keccak SHA-3'
- en: '`SHA3_256`: Keccak SHA-3'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SHA3_256`: Keccak SHA-3'
- en: '`SHA3_384`: Keccak SHA-3'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SHA3_384`: Keccak SHA-3'
- en: '`SHA3_512`: Keccak SHA-3'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SHA3_512`: Keccak SHA-3'
- en: Generation
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成
- en: 'The following modes are available:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 以下模式是可用的：
- en: '`string(ASCII <number>... <out>)` stores ASCII characters of given `<number>`
    in the `<out>` variable.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(ASCII <number>... <out>)` 将给定的 `<number>` 的 ASCII 字符存储在 `<out>` 变量中。'
- en: '`string(HEX <string> <out>)` converts `<string>` to its hexadecimal representation
    and stores it in the `<out>` variable (since CMake 3.18).'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(HEX <string> <out>)` 将 `<string>` 转换为其十六进制表示并将其存储在 `<out>` 变量中（从 CMake
    3.18 起）。'
- en: '`string(CONFIGURE <string> <out> [@ONLY] [ESCAPE_QUOTES])` works exactly like
    `configure_file()` but for strings. The result is stored in the `<out>` variable.
    As a reminder, using the `@ONLY` keyword restricts replacements to variables in
    the form of `@VARIABLE@`.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(CONFIGURE <string> <out> [@ONLY] [ESCAPE_QUOTES])` 作用与 `configure_file()`
    完全相同，但用于字符串。结果存储在 `<out>` 变量中。提醒一下，使用 `@ONLY` 关键字将替换限制为 `@VARIABLE@` 形式的变量。'
- en: '`string(MAKE_C_IDENTIFIER <string> <out>)` converts non-alphanumeric characters
    in `<string>` to underscores and stores the result in the `<out>` variable.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(MAKE_C_IDENTIFIER <string> <out>)` 将 `<string>` 中的非字母数字字符转换为下划线，并将结果存储在
    `<out>` 变量中。'
- en: '`string(RANDOM [LENGTH <len>] [ALPHABET <alphabet>] [RANDOM_SEED <seed>] <out>)`generates
    a random string of `<len>` characters (default `5`) using the optional `<alphabet>`
    from the random seed, `<seed>`, and stores the result in the `<out>` variable.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(RANDOM [LENGTH <len>] [ALPHABET <alphabet>] [RANDOM_SEED <seed>] <out>)`
    生成一个由 `<len>` 个字符（默认为 `5`）组成的随机字符串，使用来自随机种子 `<seed>` 的可选 `<alphabet>`，并将结果存储在
    `<out>` 变量中。'
- en: '`string(TIMESTAMP <out> [<format>] [UTC])` generates a string representing
    the current date and time and stores it in the `<out>` variable.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(TIMESTAMP <out> [<format>] [UTC])` 生成一个表示当前日期和时间的字符串，并将其存储在 `<out>`
    变量中。'
- en: '`string(UUID <out> NAMESPACE <ns> NAME <name> TYPE <type>)` generates a universally
    unique identifier. Application of this mode is a bit complex to use; you need
    to provide a namespace (which has to be a UUID), a name (for example, a domain
    name), and a type (either `MD5` or `SHA1`).'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(UUID <out> NAMESPACE <ns> NAME <name> TYPE <type>)` 生成一个全局唯一标识符。使用此模式稍微复杂一些；你需要提供一个命名空间（必须是
    UUID）、一个名称（例如，域名）和一个类型（可以是 `MD5` 或 `SHA1`）。'
- en: JSON
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JSON
- en: 'Operations on JSON-formatted strings use the following signature:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 对 JSON 格式字符串的操作使用以下签名：
- en: '[PRE4]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Several operations are available. They all store their results in the `<out>`
    variable, and errors in the `<error>` variable. Operations and their arguments
    are as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种操作可以使用。它们都将结果存储在 `<out>` 变量中，错误存储在 `<error>` 变量中。操作及其参数如下：
- en: '`GET <json> <member|index>...` returns the value of one or more elements from
    a `<json>` string using the `<member>` path or `<index>`.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GET <json> <member|index>...` 返回通过 `<member>` 路径或 `<index>` 对 `<json>` 字符串中的一个或多个元素提取值的结果。'
- en: '`TYPE <json> <member|index>...` returns the type of one or more elements from
    a `<json>` string using the `<member>` path or `<index>`.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TYPE <json> <member|index>...` 返回通过 `<member>` 路径或 `<index>` 对 `<json>` 字符串中的一个或多个元素的类型。'
- en: '`MEMBER <json> <member|index>... <array-index>` returns the member name of
    one or more array-typed elements on the `<array-index>` position from the `<json>`
    string using the `<member>` path or `<index>`.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MEMBER <json> <member|index>... <array-index>` 返回通过 `<member>` 路径或 `<index>`
    对 `<json>` 字符串中的一个或多个数组类型元素在 `<array-index>` 位置提取的成员名称。'
- en: '`LENGTH <json> <member|index>...` returns the element count of one or more
    array-typed elements from the `<json>` string using the `<member>` path or `<index>`.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LENGTH <json> <member|index>...` 返回通过 `<member>` 路径或 `<index>` 对 `<json>`
    字符串中的一个或多个数组类型元素的元素数量。'
- en: '`REMOVE <json> <member|index>...` returns the result of removal of one or more
    elements from the `<json>` string using the `<member>` path or `<index>`.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`REMOVE <json> <member|index>...` 返回通过 `<member>` 路径或 `<index>` 对 `<json>`
    字符串中的一个或多个元素进行移除操作的结果。'
- en: '`SET <json> <member|index>... <value>` returns the result of upsertion of `<value>`
    to one or more elements from a `<json>` string using the `<member>` path or `<index>`.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SET <json> <member|index>... <value>` 返回通过 `<member>` 路径或 `<index>` 对 `<json>`
    字符串中的一个或多个元素进行上插入操作的结果，将 `<value>` 插入其中。'
- en: '`EQUAL <jsonA> <jsonB>` evaluates whether `<jsonA>` and `<jsonB>` are equal.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EQUAL <jsonA> <jsonB>` 判断 `<jsonA>` 和 `<jsonB>` 是否相等。'
- en: The list() command
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: list() 命令
- en: 'This command provides basic operations on lists: reading, searching, modification,
    and ordering. Some modes will change list (mutate the original value). Be sure
    to copy the original value if you’ll need it later.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令提供基本的列表操作：读取、查找、修改和排序。一些模式会改变列表（修改原始值）。如果之后还需要使用原始值，请确保复制它。
- en: 'Full details can be found in the online documentation:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的详细信息可以在在线文档中找到：
- en: '[https://cmake.org/cmake/help/latest/command/list.html](https://cmake.org/cmake/help/latest/command/list.html)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://cmake.org/cmake/help/latest/command/list.html](https://cmake.org/cmake/help/latest/command/list.html)'
- en: The categories for the available `list()` modes are reading, searching, modification,
    and ordering.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的 `list()` 模式类别包括读取、搜索、修改和排序。
- en: Reading
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 读取
- en: 'The following modes are available:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 以下模式可用：
- en: '`list(LENGTH <list> <out>)` counts the elements in the `<list>` variable and
    stores the result in the `<out>` variable.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list(LENGTH <list> <out>)` 计算 `<list>` 变量中的元素数量，并将结果存储在 `<out>` 变量中。'
- en: '`list(GET <list> <index>... <out>)` copies the `<list>` elements specified
    with the list of `<index>` indexes to the `<out>` variable.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list(GET <list> <index>... <out>)` 将 `<list>` 中通过 `<index>` 索引指定的元素复制到 `<out>`
    变量中。'
- en: '`list(JOIN <list> <glue> <out>)` interleaves `<list>` elements with the `<glue>`
    delimiter and stores the resulting string in the `<out>` variable.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list(JOIN <list> <glue> <out>)` 将 `<list>` 元素与 `<glue>` 分隔符交错连接，并将结果字符串存储在
    `<out>` 变量中。'
- en: '`list(SUBLIST <list> <begin> <length> <out>)` works like the `GET` mode but
    operates on range instead of explicit indexes. If `<length>` is `-1`, elements
    from the `<begin>` index to the end of the list provided in the `<list>` variable
    will be returned.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list(SUBLIST <list> <begin> <length> <out>)` 的作用类似于 `GET` 模式，但操作的是范围而非显式索引。如果
    `<length>` 为 `-1`，则返回从 `<begin>` 索引到 `<list>` 变量中提供的列表末尾的所有元素。'
- en: Searching
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 搜索
- en: 'This mode simply finds the index of the `<needle>` element in the `<list>`
    variable and stores the result in the `<out>` variable (or `-1` if the element
    wasn’t found):'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 此模式简单地查找 `<needle>` 元素在 `<list>` 变量中的索引，并将结果存储在 `<out>` 变量中（如果元素未找到，则返回 `-1`）：
- en: '[PRE5]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Modification
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改
- en: 'The following modes are available:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 以下模式可用：
- en: '`list(APPEND <list> <element>...)` adds one or more `<element>` values to the
    end of the `<list>` variable.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list(APPEND <list> <element>...)` 将一个或多个 `<element>` 值添加到 `<list>` 变量的末尾。'
- en: '`list(PREPEND <list> [<element>...])` works like `APPEND` but adds elements
    to the beginning of the `<list>` variable.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list(PREPEND <list> [<element>...])` 的作用类似于 `APPEND`，但将元素添加到 `<list>` 变量的开头。'
- en: '`list(FILTER <list> {INCLUDE | EXCLUDE} REGEX <pattern>)` filters the `<list>`
    variable to `INCLUDE` or `EXCLUDE` the elements matching the `<pattern>` value.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list(FILTER <list> {INCLUDE | EXCLUDE} REGEX <pattern>)` 根据 `<pattern>` 值筛选
    `<list>` 变量中的元素，选择 `INCLUDE` 或 `EXCLUDE` 匹配的元素。'
- en: '`list(INSERT <list> <index> [<element>...])` adds one or more `<element>` values
    to the `<list>` variable at the given `<index>`.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list(INSERT <list> <index> [<element>...])` 将一个或多个 `<element>` 值添加到 `<list>`
    变量的指定 `<index>` 位置。'
- en: '`list(POP_BACK <list> [<out>...])` removes an element from the end of the `<list>`
    variable and stores it in the optional `<out>` variable. If multiple `<out>` variables
    were provided, more elements would be removed to fill them.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list(POP_BACK <list> [<out>...])` 从 `<list>` 变量的末尾移除一个元素，并将其存储在可选的 `<out>`
    变量中。如果提供了多个 `<out>` 变量，将移除更多的元素以填充它们。'
- en: '`list(POP_FRONT <list> [<out>...])` works like `POP_BACK` but removes an element
    from the beginning of the `<list>` variable.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list(POP_FRONT <list> [<out>...])` 与 `POP_BACK` 类似，但从 `<list>` 变量的开头移除一个元素。'
- en: '`list(REMOVE_ITEM <list> <value>...)` is shorthand for `FILTER EXCLUDE` but
    without the support of regular expressions.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list(REMOVE_ITEM <list> <value>...)` 是 `FILTER EXCLUDE` 的简写，但不支持正则表达式。'
- en: '`list(REMOVE_AT <list> <index>...)` removes elements from `<list>` at a specific
    `<index>`.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list(REMOVE_AT <list> <index>...)` 从 `<list>` 中指定的 `<index>` 位置移除元素。'
- en: '`list(REMOVE_DUPLICATES <list>)` removes duplicates from `<list>`.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list(REMOVE_DUPLICATES <list>)` 移除 `<list>` 中的重复元素。'
- en: '`list(TRANSFORM <list> <action> [<selector>] [OUTPUT_VARIABLE <out>])` applies
    a specific transformation to the `<list>` elements. By default, the action is
    applied to all elements, but we may limit the effect by adding a `<selector>`.
    The provided list will be mutated (changed in place) unless the `OUTPUT_VARIABLE`
    keyword is provided, in which case, the result is stored in the `<out>` variable.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list(TRANSFORM <list> <action> [<selector>] [OUTPUT_VARIABLE <out>])` 对 `<list>`
    中的元素应用特定的变换。默认情况下，操作应用于所有元素，但我们可以通过添加 `<selector>` 来限制影响范围。如果没有提供 `OUTPUT_VARIABLE`
    关键字，则提供的列表将被修改（就地改变）；如果提供了该关键字，结果将存储在 `<out>` 变量中。'
- en: 'The following selectors are available: `AT <index>`, `FOR <start> <stop> [<step>]`,
    and `REGEX <pattern>`.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 以下选择器可用：`AT <index>`，`FOR <start> <stop> [<step>]` 和 `REGEX <pattern>`。
- en: Actions include `APPEND <string>`, `PREPEND <string>`, `TOLOWER`, `TOUPPER`,
    `STRIP`, `GENEX_STRIP`, and `REPLACE <pattern> <expression>`. They work exactly
    like the `string()` modes with the same name.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 操作包括 `APPEND <string>`、`PREPEND <string>`、`TOLOWER`、`TOUPPER`、`STRIP`、`GENEX_STRIP`
    和 `REPLACE <pattern> <expression>`。它们的功能与同名的 `string()` 模式完全相同。
- en: Ordering
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 排序
- en: 'The following modes are available:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 以下模式可用：
- en: '`list(REVERSE <list>)` simply reverses the order of `<list>`.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list(REVERSE <list>)` 简单地反转 `<list>` 的顺序。'
- en: '`list(SORT <list>)` sorts the list alphabetically.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list(SORT <list>)` 按字母顺序对列表进行排序。'
- en: Refer to the online manual for more advanced options.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考在线手册以获取更多高级选项。
- en: The file() command
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: file()命令
- en: 'This command provides all kinds of operations related to files: reading, transferring,
    locking, and archiving. It also provides modes to inspect the filesystem and operations
    on strings representing paths.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令提供与文件相关的各种操作：读取、传输、锁定和归档。它还提供检查文件系统和操作表示路径的字符串的模式。
- en: 'Full details can be found in the online documentation:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的详细信息可以在在线文档中找到：
- en: '[https://cmake.org/cmake/help/latest/command/file.html](https://cmake.org/cmake/help/latest/command/file.html)'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://cmake.org/cmake/help/latest/command/file.html](https://cmake.org/cmake/help/latest/command/file.html)'
- en: The categories for available `file()` modes are reading, writing, filesystem,
    path conversion, transfer, locking, and archiving.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的`file()`模式类别包括读取、写入、文件系统、路径转换、传输、锁定和归档。
- en: Reading
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 阅读
- en: 'The following modes are available:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的模式如下：
- en: '`file(READ <filename> <out> [OFFSET <o>] [LIMIT <max>] [HEX])` reads the file
    from `<filename>` to the `<out>` variable. The read optionally starts at offset
    `<o>` and follows the optional limit of `<max>` bytes. The `HEX flag` specifies
    that output should be converted to hexadecimal representation.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file(READ <filename> <out> [OFFSET <o>] [LIMIT <max>] [HEX])` 从`<filename>`读取文件到`<out>`变量中。读取操作可选择从偏移量`<o>`开始，并遵循可选的`<max>`字节限制。`HEX
    flag`指定输出应转换为十六进制表示。'
- en: '`file(STRINGS <filename> <out>)` reads strings from the file at `<filename>`
    to the `<out>` variable.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file(STRINGS <filename> <out>)` 从`<filename>`文件读取字符串并将其存储到`<out>`变量中。'
- en: '`file(<hashing-algorithm> <filename> <out>)` computes the `<hashing-algorithm>`
    hash from the file at `<filename>` and stores the result in the `<out>` variable.
    Available algorithms are the same as for the `string()` hashing function.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file(<hashing-algorithm> <filename> <out>)` 计算来自`<filename>`文件的`<hashing-algorithm>`哈希值，并将结果存储到`<out>`变量中。可用的算法与`string()`哈希函数相同。'
- en: '`file(TIMESTAMP <filename> <out> [<format>])` generates a string representation
    of a timestamp of the file at `<filename>` and stores it in the `<out>` variable.
    It optionally accepts a `<format>` string.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file(TIMESTAMP <filename> <out> [<format>])` 生成`<filename>`文件的时间戳字符串表示，并将其存储到`<out>`变量中。可选接受一个`<format>`字符串。'
- en: '`file(GET_RUNTIME_DEPENDENCIES [...])` gets runtime dependencies for specified
    files. This is an advanced command to be used only in `install(CODE)` or `install(SCRIPT)`
    scenarios. Available since CMake 3.21.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file(GET_RUNTIME_DEPENDENCIES [...])` 获取指定文件的运行时依赖项。这是一个高级命令，仅在`install(CODE)`或`install(SCRIPT)`场景中使用。从CMake
    3.21版本开始可用。'
- en: Writing
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 写入
- en: 'The following modes are available:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的模式如下：
- en: '`file({WRITE | APPEND} <filename> <content>...)` writes or appends all `<content>`
    arguments to the file at `<filename>`. If the provided system path doesn’t exist,
    it will be recursively created.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file({WRITE | APPEND} <filename> <content>...)` 将所有`<content>`参数写入或追加到`<filename>`文件中。如果提供的系统路径不存在，它将被递归创建。'
- en: '`file({TOUCH | TOUCH_NOCREATE} [<filename>...])` updates the timestamp of the
    `<filename>`. If the file doesn’t exist, it will only be created in the `TOUCH`
    mode.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file({TOUCH | TOUCH_NOCREATE} [<filename>...])` 更新`<filename>`的时间戳。如果文件不存在，则仅在`TOUCH`模式下创建该文件。'
- en: '`file(GENERATE OUTPUT <output-file> [...])` is an advanced mode that generates
    an output file for each build configuration of the current CMake generator.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file(GENERATE OUTPUT <output-file> [...])` 是一个高级模式，它为当前CMake生成器的每个构建配置生成一个输出文件。'
- en: '`file(CONFIGURE OUTPUT <output-file> CONTENT <content> [...])` works like `GENERATE_OUTPUT`
    but also configures the generated files by substituting variable placeholders
    with values.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file(CONFIGURE OUTPUT <output-file> CONTENT <content> [...])` 与`GENERATE_OUTPUT`类似，但还会通过将变量占位符替换为值来配置生成的文件。'
- en: Filesystem
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件系统
- en: 'The following modes are available:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的模式如下：
- en: '`file({GLOB | GLOB_RECURSE} <out> [...] [<globbing-expression>...])` generates
    a list of files matching `<globbing-expression>` and stores it in the `<out>`
    variable. `GLOB_RECURSE` mode will also scan nested directories.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file({GLOB | GLOB_RECURSE} <out> [...] [<globbing-expression>...])` 生成与`<globbing-expression>`匹配的文件列表，并将其存储在`<out>`变量中。`GLOB_RECURSE`模式还会扫描嵌套目录。'
- en: '`file(RENAME <oldname> <newname>)` moves a file from `<oldname>` to `<newname>`.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file(RENAME <oldname> <newname>)` 将文件从`<oldname>`移动到`<newname>`。'
- en: '`file({REMOVE | REMOVE_RECURSE } [<files>...])` deletes `<files>`. `REMOVE_RECURSE`
    will also remove directories.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file({REMOVE | REMOVE_RECURSE } [<files>...])` 删除`<files>`。`REMOVE_RECURSE`模式还会删除目录。'
- en: '`file(MAKE_DIRECTORY [<dir>...])` creates a directory.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file(MAKE_DIRECTORY [<dir>...])` 创建一个目录。'
- en: '`file(COPY <file>... DESTINATION <dir> [...])` copies files to the `<dir>`
    destination. It offers options for filtering, setting permissions, symlink chain
    following, and more.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file(COPY <file>... DESTINATION <dir> [...])`将文件复制到`<dir>`目标路径。它提供了过滤、设置权限、符号链接链跟踪等选项。'
- en: '`file(COPY_FILE <file> <destination> [...])` copies a single file to the `<destination>`
    path. Available since CMake 3.21.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file(COPY_FILE <file> <destination> [...])`将单个文件复制到`<destination>`路径。从CMake
    3.21版本开始提供。'
- en: '`file(SIZE <filename> <out>)` reads the size of `<filename>` in bytes and stores
    it in the `<out>` variable.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file(SIZE <filename> <out>)`读取`<filename>`的字节大小，并将其存储在`<out>`变量中。'
- en: '`file(READ_SYMLINK <linkname> <out>)` reads the destination path of the `<linkname>`
    symlink and stores it in the `<out>` variable.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file(READ_SYMLINK <linkname> <out>)`读取`<linkname>`符号链接的目标路径，并将其存储在`<out>`变量中。'
- en: '`file(CREATE_LINK <original> <linkname> [...])` creates a symlink to `<original>`
    at `<linkname>`.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file(CREATE_LINK <original> <linkname> [...])`在`<linkname>`处创建指向`<original>`的符号链接。'
- en: '`file({CHMOD|CHMOD_RECURSE} <files>... <directories>... PERMISSIONS <permissions>...
    [...])` sets permissions on files and directories.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file({CHMOD|CHMOD_RECURSE} <files>... <directories>... PERMISSIONS <permissions>...
    [...])`设置文件和目录的权限。'
- en: '`file(GET_RUNTIME_DEPENDENCIES [...])` collects the runtime dependencies for
    various types of files: executables, libraries, and modules. Use with `install(RUNTIME_DEPENDENCY_SET)`.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file(GET_RUNTIME_DEPENDENCIES [...])`收集各种文件类型的运行时依赖项：可执行文件、库文件和模块。与`install(RUNTIME_DEPENDENCY_SET)`一起使用。'
- en: Path conversion
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 路径转换
- en: 'The following modes are available:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 以下模式可用：
- en: '`file(REAL_PATH <path> <out> [BASE_DIRECTORY <dir>])` computes the absolute
    path from the relative path and stores it in the `<out>` variable. It optionally
    accepts the `<dir>` base directory. Available since CMake 3.19.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file(REAL_PATH <path> <out> [BASE_DIRECTORY <dir>])`计算从相对路径到绝对路径，并将其存储在`<out>`变量中。它可以选择性地接受`<dir>`作为基础目录。从CMake
    3.19版本开始提供。'
- en: '`file(RELATIVE_PATH <out> <directory> <file>)` computes the `<file>` path relative
    to `<directory>` and stores it in the `<out>` variable.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file(RELATIVE_PATH <out> <directory> <file>)`计算`<file>`相对于`<directory>`的路径，并将其存储在`<out>`变量中。'
- en: '`file({TO_CMAKE_PATH | TO_NATIVE_PATH} <path> <out>)` converts `<path>` to
    a CMake path (directories separated with a forward slash) to the native path of
    the platform and back. The result is stored in the `<out>` variable.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file({TO_CMAKE_PATH | TO_NATIVE_PATH} <path> <out>)`将`<path>`转换为CMake路径（目录以正斜杠分隔），转换为平台的本地路径，并反向转换。结果存储在`<out>`变量中。'
- en: Transfer
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 传输
- en: 'The following modes are available:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 以下模式可用：
- en: '`file(DOWNLOAD <url> [<path>] [...])` downloads a file from `<url>` and stores
    it in `<path>`.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file(DOWNLOAD <url> [<path>] [...])`从`<url>`下载文件并将其存储在`<path>`中。'
- en: '`file(UPLOAD <file> <url> [...])` uploads `<file>` to a URL.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file(UPLOAD <file> <url> [...])`将`<file>`上传到URL。'
- en: Locking
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 锁定
- en: 'Locking mode places an advisory lock on the `<path>` resource:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 锁定模式对`<path>`资源加上建议性锁：
- en: '[PRE6]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This lock can be optionally scoped to `FUNCTION`, `FILE`, or `PROCESS` and limited
    with a timeout of `<seconds>`. To release the lock, provide the `RELEASE` keyword.
    The result will be stored in the `<out>` variable.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 此锁可以选择性地限定为`FUNCTION`、`FILE`或`PROCESS`，并限制超时时间为`<seconds>`。要释放锁，请提供`RELEASE`关键字。结果将存储在`<out>`变量中。
- en: Archiving
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 归档
- en: 'The creation of archives is provided with the following signature:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 创建归档提供了以下签名：
- en: '[PRE7]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'It creates an archive at the `<destination>` path comprising `<source>` files
    in one of the supported formats: `7zip`, `gnutar`, `pax`, `paxr`, `raw`, or `zip`
    (`paxr` is the default). If the chosen format supports the compression level,
    it can be provided as a single-digit integer `0-9`, with `0` being the default.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 它将在`<destination>`路径创建一个包含`<source>`文件的归档，格式为支持的格式之一：`7zip`、`gnutar`、`pax`、`paxr`、`raw`或`zip`（默认格式为`paxr`）。如果所选格式支持压缩级别，则可以提供一个单数字符号`0-9`，其中`0`为默认值。
- en: 'The extraction mode has the following signature:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 提取模式具有以下签名：
- en: '[PRE8]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: It extracts files matching optional `<patterns>` values from `<archive>` to
    the destination `<dir>`. If the `LIST_ONLY` keyword is provided, files won’t be
    extracted but will only be listed instead.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 它从`<archive>`中提取与可选的`<patterns>`值匹配的文件到目标`<dir>`。如果提供了`LIST_ONLY`关键字，则不会提取文件，而是仅列出文件。
- en: The math() command
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: math()命令
- en: 'CMake also supports some simple arithmetical operations. See the online documentation
    for full details:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: CMake 还支持一些简单的算术运算。详细信息请参阅在线文档：
- en: '[https://cmake.org/cmake/help/latest/command/math.html](https://cmake.org/cmake/help/latest/command/math.html)'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://cmake.org/cmake/help/latest/command/math.html](https://cmake.org/cmake/help/latest/command/math.html)'
- en: 'To evaluate a mathematical expression and store it in the `<out>` variable
    as the string in an optional `<format>` (`HEXADECIMAL` or `DECIMAL`), use the
    following signature:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 要评估一个数学表达式并将其作为字符串存储在 `<out>` 变量中，可以选择 `<format>`（`HEXADECIMAL` 或 `DECIMAL`），使用以下签名：
- en: '[PRE9]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `<expression>` value is a string that supports operators present in C code
    (they have the same meaning here):'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`<expression>` 值是一个字符串，支持 C 代码中存在的运算符（它们在这里具有相同的含义）：'
- en: 'Arithmetical: `+`, `-`, `*`, `/`, and `%` modulo division'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 算术运算：`+`，`-`，`*`，`/`，和 `%` 取模除法
- en: 'Bitwise: `|` or, `&` and, `^` xor, `~` not, `<<` shift left, and `>>` shift
    right'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 位运算：`|` 或，`&` 与，`^` 异或，`~` 非，`<<` 左移，`>>` 右移
- en: Parenthesis (...)
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 括号 (...)
- en: Constant values can be provided in decimal or hexadecimal format.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 常量值可以以十进制或十六进制格式提供。
