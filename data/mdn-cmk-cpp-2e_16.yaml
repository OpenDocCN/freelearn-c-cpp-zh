- en: '16'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '16'
- en: Writing CMake Presets
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写 CMake 预设
- en: Presets were added to CMake in version 3.19 to make it easier to manage project
    settings. Before presets, users had to memorize lengthy command-line configurations
    or set overrides directly in the project files, which could become complicated
    and prone to mistakes. Presets let users handle settings such as the generator
    used for configuring the project, the number of concurrent build tasks, and the
    project components to build or test in a more straightforward manner. With presets,
    CMake becomes simpler to use. Users can set up presets once and use them whenever
    needed, making each CMake execution more consistent and easier to understand.
    They also help standardize settings across different users and computers, simplifying
    collaborative project work.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 预设是在 CMake 3.19 版本中加入的，旨在简化项目设置的管理。在有了预设之前，用户必须记住冗长的命令行配置，或者直接在项目文件中设置覆盖项，这样的做法容易出错并且变得复杂。使用预设后，用户可以更加简便地处理项目配置时所使用的生成器、并行构建任务的数量，以及需要构建或测试的项目组件等设置。使用预设后，CMake
    变得更加易用。用户只需配置一次预设，之后可以随时使用它们，这使得每次执行 CMake 时更加一致，且更容易理解。预设还帮助标准化不同用户和计算机之间的设置，简化了协作项目的工作。
- en: 'Presets are compatible with four primary modes of CMake: configuring the buildsystem,
    building, running tests, and packaging. They allow users to link these parts together
    in workflows, making the whole process more automatic and organized. Additionally,
    presets offer features like conditions and macro expressions (or simply macros),
    granting users greater control.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 预设与 CMake 的四种主要模式兼容：配置构建系统、构建、运行测试和打包。它们允许用户将这些部分连接在一起，形成工作流，使整个过程更加自动化和有序。此外，预设还提供了条件和宏表达式（或简单地称为宏）等功能，赋予用户更大的控制力。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主要内容：
- en: Using presets defined in a project
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在项目中使用定义的预设
- en: Writing a preset file
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写预设文件
- en: Defining stage-specific presets
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义特定阶段的预设
- en: Defining workflow presets
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义工作流预设
- en: Adding conditions and macros
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加条件和宏
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You can find the code files that are present in this chapter on GitHub at [https://github.com/PacktPublishing/Modern-CMake-for-Cpp-2E/tree/main/examples/ch16](https://github.com/PacktPublishing/Modern-CMake-for-Cpp-2E/tree/main/examples/ch16).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 GitHub 上找到本章中出现的代码文件，地址为[https://github.com/PacktPublishing/Modern-CMake-for-Cpp-2E/tree/main/examples/ch16](https://github.com/PacktPublishing/Modern-CMake-for-Cpp-2E/tree/main/examples/ch16)。
- en: The commands needed to execute the examples in this chapter will be provided
    in each section.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中执行示例所需的命令将在每个部分中提供。
- en: Using presets defined in a project
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在项目中使用定义的预设
- en: The configuration of projects can become a complex task when we need to be specific
    about elements such as cache variables, chosen generators, and more—especially
    when there are multiple ways to build our project. This is where presets come
    in handy. Instead of memorizing command-line arguments or writing shell scripts
    to execute `cmake` with different arguments, we can create a preset file and store
    the required configuration in the project itself.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要具体指定诸如缓存变量、选择的生成器等元素时，项目配置可能变得非常复杂，尤其是在有多种方式可以构建项目时。这时预设就显得非常有用。我们可以通过创建一个预设文件，并将所需的配置存储在项目中，避免记住命令行参数或编写
    shell 脚本以不同的参数执行`cmake`。
- en: 'CMake utilizes two optional files to store project presets:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: CMake 使用两个可选文件来存储项目预设：
- en: '`CMakePresets.json`: Official presets delivered by project authors.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CMakePresets.json`：由项目作者提供的官方预设。'
- en: '`CMakeUserPresets.json`: Dedicated to users who wish to add custom presets
    to the project. Projects should add this file to the VCS ignore list to ensure
    that custom settings don’t inadvertently get shared in the repository.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CMakeUserPresets.json`：专为希望向项目添加自定义预设的用户设计。项目应将此文件添加到版本控制忽略列表，以确保自定义设置不会无意间共享到仓库中。'
- en: 'Preset files must be placed in the top directory of the project for CMake to
    recognize them. Each preset file can define multiple presets for each stage: configure,
    build, test, package, and workflow presets that encompass multiple stages. Users
    can then select a preset to execute through the IDE, GUI, or command line.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 预设文件必须放在项目的顶级目录中，CMake 才能识别它们。每个预设文件可以为每个阶段（配置、构建、测试、打包以及涵盖多个阶段的工作流预设）定义多个预设。用户随后可以通过
    IDE、GUI 或命令行选择一个预设进行执行。
- en: 'Presets can be listed by adding the `--list-presets` argument to the command
    line, specific to the stage we’re listing for. For example, build presets can
    be listed with:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在命令行中添加`--list-presets`参数，可以列出预设，具体取决于我们要列出的阶段。例如，可以使用以下命令列出构建预设：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Test presets can be listed with:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 测试预设可以通过以下命令列出：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: To use a preset, we need to follow the same pattern, and provide the preset
    name after the `--preset` argument.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用预设，我们需要遵循相同的模式，并在`--preset`参数后提供预设名称。
- en: 'Additionally, you can’t list package presets with the `cmake` command; you
    need to use `cpack`. Here’s a command line for the package preset:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，无法使用`cmake`命令列出包预设；需要使用`cpack`。以下是包预设的命令行：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: After picking the preset, you can, of course, add stage-specific command-line
    arguments, for example, to specify your build tree or installation path. Added
    arguments override whatever is set in the preset.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 选择预设后，当然可以添加阶段特定的命令行参数，例如，指定构建树或安装路径。添加的参数将覆盖预设中设置的任何内容。
- en: 'There’s a special case for workflow presets, which can be listed and applied
    if the additional `--workflow` argument is present when running the `cmake` command:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流预设有一个特殊情况，如果在运行`cmake`命令时附加了`--workflow`参数，则可以列出并应用它们：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: That’s how you can apply and review available presets in a project. Now, let’s
    explore how the preset file is structured.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是如何在项目中应用和查看可用预设。现在，让我们来探索预设文件的结构。
- en: Writing a preset file
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写预设文件
- en: 'CMake searches for `CMakePresets.json` and `CMakeUserPresets.json` in the top-level
    directory. Both files use the same JSON structure to define presets, hence there
    isn’t much difference between them to discuss. The format is a JSON object with
    the following keys:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: CMake会在顶层目录中查找`CMakePresets.json`和`CMakeUserPresets.json`文件。这两个文件使用相同的JSON结构来定义预设，因此它们之间没有太大的区别可以讨论。该格式是一个包含以下键的JSON对象：
- en: '`version`: This is a required integer that specifies the version of the preset
    JSON schema'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`version`：这是一个必需的整数，指定预设JSON架构的版本。'
- en: '`cmakeMinimumRequired`: This is an object that specifies the required CMake
    version'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cmakeMinimumRequired`：这是一个对象，指定了所需的CMake版本。'
- en: '`include`: This is an array of strings that includes external presets from
    file paths provided in the array (since schema version 4)'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`include`：这是一个字符串数组，包含从数组中提供的文件路径加载的外部预设（自 schema 版本 4 起）。'
- en: '`configurePresets`: This is an array of objects that defines the configuration
    stage presets'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`configurePresets`：这是一个对象数组，用于定义配置阶段的预设。'
- en: '`buildPresets`: This is an array of objects that defines the build stage presets'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`buildPresets`：这是一个对象数组，用于定义构建阶段的预设。'
- en: '`testPresets`: This is an array of objects that are specific to the test stage
    presets'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`testPresets`：这是一个对象数组，特定于测试阶段的预设。'
- en: '`packagePresets`: This is an array of objects that are specific to the package
    stage presets'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`packagePresets`：这是一个对象数组，特定于包阶段的预设。'
- en: '`workflowPresets`: This is an array of objects that are specific to the workflow
    mode presets'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`workflowPresets`：这是一个对象数组，特定于工作流模式的预设。'
- en: '`vendor`: This is an object that contains custom settings defined by IDEs and
    other vendors; CMake does not process this field'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vendor`：这是一个包含由IDE和其他供应商定义的自定义设置的对象；CMake不会处理此字段。'
- en: 'When writing a preset, CMake requires the `version` entry to be present; other
    values are optional. Here’s an example preset file (actual presets will be added
    in subsequent sections):'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写预设时，CMake要求`version`条目必须存在；其他值是可选的。这里有一个预设文件示例（实际的预设将在后续章节中添加）：
- en: '**ch16/01-presets/CMakePresets.json**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**ch16/01-presets/CMakePresets.json**'
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: There’s no requirement to add empty arrays like in the preceding example; entries
    other than `version` are optional. Speaking of which, the appropriate schema version
    for CMake 3.26 is `6`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 不需要像前面的示例那样添加空数组；除了`version`之外的条目是可选的。说到这，CMake 3.26的适用架构版本是`6`。
- en: Now that we understand the structure of the preset file, let’s actually learn
    how to define the presets themselves.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了预设文件的结构，让我们来实际学习如何定义这些预设。
- en: Defining stage-specific presets
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义阶段特定的预设
- en: 'Stage-specific presets are simply presets that configure individual CMake stages:
    configure, build, test, package, and install. They allow for a granular and structured
    approach to defining build configurations. Here’s an overview of the common features
    shared across all preset stages, followed by an introduction to defining presets
    for individual stages.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 特定于阶段的预设只是配置单独 CMake 阶段的预设：配置、构建、测试、打包和安装。它们允许以精细且结构化的方式定义构建配置。以下是所有预设阶段共享的常见特性概述，之后将介绍如何为单独的阶段定义预设。
- en: Common features across presets
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预设的共同特性
- en: There are three features that are used to configure presets regardless of the
    CMake stage. Namely, these are unique name fields, optional fields, and associations
    with configuration presets. The following sections will cover each, respectively.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 有三个特性用于配置预设，无论是哪个 CMake 阶段。即，这些是唯一名称字段、可选字段以及与配置预设的关联。以下各节将分别介绍这些内容。
- en: Unique name fields
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 唯一名称字段
- en: Every preset must have a unique name field within its stage. Given that `CMakeUserPresets.json`
    (if it exists) implicitly includes `CMakePresets.json` (if it exists), both files
    share the namespace, preventing duplicate names across them. For example, you
    can’t have two package-stage presets with the name `myPreset` in both files.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 每个预设在其阶段内必须具有唯一的名称字段。鉴于 `CMakeUserPresets.json`（如果存在）隐式包含了 `CMakePresets.json`（如果存在），这两个文件共享命名空间，防止它们之间出现重复名称。例如，你不能在这两个文件中都有名为
    `myPreset` 的打包阶段预设。
- en: 'A minimal preset file might look like this:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一个最小的预设文件可能如下所示：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Optional fields
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可选字段
- en: 'Every stage-specific preset can use the same optional fields:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 每个特定于阶段的预设都可以使用相同的可选字段：
- en: '`displayName`: This is a string that provides a user-friendly name for the
    preset'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`displayName`：这是一个字符串，提供预设的用户友好名称。'
- en: '`description`: This is a string that offers an explanation of what the preset
    does'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`description`：这是一个字符串，提供预设功能的说明。'
- en: '`inherits`: This is a string, or an array of strings, that effectively copies
    the configuration of presets named in this field as a base, to be further extended
    or modified'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`inherits`：这是一个字符串，或一个字符串数组，它有效地复制此字段中命名的预设的配置作为基础，进一步扩展或修改。'
- en: '`hidden`: This is a Boolean that hides the preset from the listings; such hidden
    presets can only be used through inheritance'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden`：这是一个布尔值，用于将预设从列表中隐藏；这些隐藏的预设只能通过继承使用。'
- en: '`environment`: This is an object that overrides `ENV` variables for this stage;
    each key identifies an individual variable, and values can be strings or `null`;
    it supports macros'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`environment`：这是一个对象，用于覆盖此阶段的 `ENV` 变量；每个键标识一个单独的变量，值可以是字符串或 `null`；它支持宏。'
- en: '`condition`: This is an object that enables or disables this preset (more on
    this later)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`condition`：这是一个对象，用于启用或禁用此预设（稍后我们会详细讲解）。'
- en: '`vendor`: This is a custom object that contains vendor-specific values and
    follows the same convention as a root-level `vendor` field'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vendor`：这是一个自定义对象，包含供应商特定的值，并遵循与根级别 `vendor` 字段相同的约定。'
- en: Presets can form a graph-like inheritance structure, provided there are no cyclic
    dependencies. `CMakeUserPresets.json` can inherit from project-level presets but
    not the other way around.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 预设可以形成类似图形的继承结构，只要没有循环依赖。`CMakeUserPresets.json` 可以从项目级别的预设继承，但反过来则不行。
- en: Association with configuration-stage presets
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 与配置阶段预设的关联
- en: All stage-specific presets must be associated with a configuration preset, as
    they must know the location of the build tree. While the `configure` preset is
    inherently associated with itself, build, test, and package presets need to explicitly
    define this association via the `configurePreset` field.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 所有特定于阶段的预设都必须与配置预设相关联，因为它们必须知道构建树的位置。虽然 `configure` 预设本身默认与自身相关联，但构建、测试和打包预设需要通过
    `configurePreset` 字段显式定义这种关联。
- en: Contrary to what you might think, this association doesn’t mean CMake will automatically
    execute the configuration preset when you decide to run any of the subsequent
    presets. You still need to execute each preset manually, or use a workflow preset
    (we’ll get to that in a bit).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 与你可能想到的不同，这种关联并不意味着 CMake 会在你决定运行任何后续预设时自动执行配置预设。你仍然需要手动执行每个预设，或者使用工作流预设（稍后我们会讨论这个）。
- en: With these foundational concepts in place, we can continue into the specifics
    of presets for individual stages, starting with the configuration stage. As we
    progress, we’ll explore how these presets interact and how they can be used to
    streamline the project configuration and building process in CMake.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在掌握了这些基础概念后，我们可以继续进入单个阶段的预设细节，首先是配置阶段。随着进展，我们将探索这些预设如何相互作用，以及它们如何帮助简化CMake中的项目配置和构建过程。
- en: Defining configuration-stage presets
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义配置阶段预设
- en: 'As previously indicated, configuration presets reside within the `configurePresets`
    array. They can be listed by adding the `--list-presets` argument to the command
    line, specific to the configuration stage:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，配置预设位于`configurePresets`数组中。通过在命令行中添加`--list-presets`参数，可以列出它们，特定于配置阶段：
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To configure a project with a chosen preset, specify its name after the `--preset`
    argument, like so:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用选择的预设配置项目，请在`--preset`参数后指定其名称，如下所示：
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The configuration preset has some general fields like `name` and `description`,
    but it also has its own unique set of optional fields. Here are the simplified
    descriptions of the most important ones:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 配置预设有一些通用字段，如`name`和`description`，但它还有自己的一套可选字段。以下是最重要字段的简化描述：
- en: '`generator`: A string that specifies a generator to use for the preset; required
    for schema version < `3`'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`generator`：一个字符串，指定用于预设的生成器；对于 schema 版本 < `3` 是必需的'
- en: '`architecture` and `toolset`: A string that configures generators supporting
    these options'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`architecture`和`toolset`：一个字符串，配置支持这些选项的生成器'
- en: '`binaryDir`: A string that provides a relative or absolute path to the build
    tree; required for schema version < `3`; supports macros'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`binaryDir`：一个字符串，提供构建树的相对或绝对路径；对于 schema 版本 < `3` 是必需的；支持宏'
- en: '`installDir`: A string that provides a relative or absolute path to the installation
    directory; it is required for schema version < `3` and it supports macros'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`installDir`：一个字符串，提供安装目录的相对或绝对路径；对于 schema 版本 < `3` 是必需的，并且支持宏'
- en: '`cacheVariables`: A map that defines cache variables; values support macros'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cacheVariables`：定义缓存变量的映射；值支持宏'
- en: When defining the `cacheVariables` map, remember the order in which variables
    are resolved in the project. As you can see in *Figure 16.1*, any cache variables
    defined through the command line will override preset variables. Any cache or
    environment preset variables will override those coming from the cache file or
    the host environment.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义`cacheVariables`映射时，请记住项目中变量解析的顺序。如*图16.1*所示，任何通过命令行定义的缓存变量将覆盖预设变量。任何缓存或环境预设变量将覆盖来自缓存文件或主机环境的变量。
- en: '![](img/B19844_16_01.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19844_16_01.png)'
- en: 'Figure 16.1: How presets override CMakeCache.txt and the system environment
    variables'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.1：预设如何覆盖CMakeCache.txt和系统环境变量
- en: 'Let’s declare a simple `myConfigure` configuration preset that specifies the
    generator, build tree, and installation path:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们声明一个简单的`myConfigure`配置预设，指定生成器、构建树和安装路径：
- en: '**ch16/01-presets/CMakePresets.json (continued)**'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**ch16/01-presets/CMakePresets.json（续）**'
- en: '[PRE8]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Our introduction to `configure` presets is complete, which brings us to build-stage
    presets.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了对`configure`预设的介绍，这也带我们进入构建阶段预设。
- en: Defining build-stage presets
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义构建阶段预设
- en: 'You won’t be surprised to learn that build presets reside within the `buildPresets`
    array. They can be listed by adding the `--list-presets` argument to the command
    line, specific to the build stage:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你不会惊讶地发现，构建预设位于`buildPresets`数组中。通过在命令行中添加`--list-presets`参数，可以列出它们，特定于构建阶段：
- en: '[PRE9]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To build a project with a chosen preset, specify its name after the `--preset`
    argument, like so:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用选择的预设构建项目，请在`--preset`参数后指定其名称，如下所示：
- en: '[PRE10]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The build preset also has some general fields like `name` and `description`,
    and it has its unique set of optional fields. The simplified descriptions of the
    most important ones are:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 构建预设也有一些通用字段，如`name`和`description`，并且它有自己的一套可选字段。最重要字段的简化描述如下：
- en: '`jobs`: An integer that sets the number of parallel jobs used to build the
    project'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jobs`：一个整数，设置用于构建项目的并行作业数'
- en: '`targets`: A string or string array that sets targets to build and supports
    macros'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`targets`：一个字符串或字符串数组，设置要构建的目标，并支持宏'
- en: '`configuration`: A string that determines the build type for multi-configuration
    generators (`Debug`, `Release`, etc.)'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`configuration`：一个字符串，确定多配置生成器的构建类型（`Debug`、`Release`等）'
- en: '`cleanFirst`: A Boolean that ensures that the project is always cleaned before
    the build'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cleanFirst`: 一个布尔值，确保在构建之前始终清理项目'
- en: 'That’s it. Now, we can write a build preset like so:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样。现在，我们可以像这样编写构建预设：
- en: '**ch16/01-presets/CMakePresets.json (continued)**'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**ch16/01-presets/CMakePresets.json（续）**'
- en: '[PRE11]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You’ll notice that the required `configurePreset` field is set to point to the
    `myConfigure` preset we defined in the previous section. Now, we’re able to move
    on to the test presets.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到，所需的`configurePreset`字段已设置为指向我们在前一部分定义的`myConfigure`预设。现在，我们可以继续进行测试预设。
- en: Defining test-stage presets
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义测试阶段预设
- en: 'Test presets live within the `testPresets` array. They can be displayed by
    adding the `--list-presets` argument to the command line, specific to the test
    stage:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 测试预设位于`testPresets`数组中。可以通过在命令行中添加`--list-presets`参数显示它们，特定于测试阶段：
- en: '[PRE12]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To test a project using a preset, specify its name after the `--preset` argument,
    like so:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用预设测试项目，请在`--preset`参数后指定其名称，如下所示：
- en: '[PRE13]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The test preset also has its own unique set of optional fields. The simplified
    descriptions of the most important ones are:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 测试预设也有一组独特的可选字段。以下是最重要字段的简化描述：
- en: '`configuration`: A string that determines the build type for multi-configuration
    generators (`Debug`, `Release`, etc.)'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`configuration`: 一个字符串，决定多配置生成器的构建类型（如`Debug`、`Release`等）'
- en: '`output`: An object that configures the output'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output`: 一个对象，配置输出'
- en: '`filter`: An object that specifies which tests to run'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter`: 一个对象，指定要运行的测试'
- en: '`execution`: An object that configures the execution of tests'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`execution`: 一个对象，配置测试的执行'
- en: Each object maps the appropriate command-line options to configuration values.
    We’ll highlight a few essential options, but this isn’t an exhaustive list. Refer
    to the *Further reading* section for a full reference.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 每个对象将适当的命令行选项映射到配置值。我们将突出显示一些重要选项，但这并不是详尽无遗的列表。完整参考请查阅*进一步阅读*部分。
- en: 'Optional entries for the `output` object include:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`output`对象的可选条目包括：'
- en: '`shortProgress`: Boolean; progress will be reported within a single line'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shortProgress`: 布尔值；进度将在一行内报告'
- en: '`verbosity`: A string that sets the output verbosity to one of the following
    levels: default, verbose, or extra'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`verbosity`: 一个字符串，将输出详细程度设置为以下级别之一：默认、详细或额外'
- en: '`outputOnFailure`: A Boolean that prints the program output upon test failure'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`outputOnFailure`: 一个布尔值，在测试失败时打印程序输出'
- en: '`quiet`: Boolean; suppress all output'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quiet`: 布尔值；抑制所有输出'
- en: 'For exclude, some of the accepted entries are:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 对于exclude，一些接受的条目包括：
- en: '`name`: A string that excludes tests with names matching a regex pattern and
    supports macros'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`: 一个字符串，用于排除名称匹配正则表达式模式的测试，并支持宏'
- en: '`label`: A string that excludes tests with labels matching a regex pattern
    and supports macros'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`label`: 一个字符串，用于排除标签匹配正则表达式模式的测试，并支持宏'
- en: '`fixtures`: An object that determines which fixtures to exclude from the test
    (see official documentation for more details)'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fixtures`: 一个对象，决定从测试中排除哪些固定装置（更多详情请参阅官方文档）'
- en: 'Finally, the execution object accepts the following optional entry:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，执行对象接受以下可选条目：
- en: '`outputLogFile`: A string that specifies the output logfile path and supports
    macros'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`outputLogFile`: 一个字符串，指定输出日志文件路径，并支持宏'
- en: 'The `filter` object accepts `include` and `exclude` keys to configure the filtering
    of test cases; here’s a partially filled structure to illustrate this:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`filter`对象接受`include`和`exclude`键来配置测试用例的过滤；以下是一个部分填充的结构来说明这一点：'
- en: '[PRE14]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Each key defines its own object of options:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 每个键定义了它自己的选项对象：
- en: 'For `include`, entries include:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`include`，条目包括：
- en: '`name`: A string that includes tests with names matching a regex pattern and
    supports macros'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`: 一个字符串，用于包含名称匹配正则表达式模式的测试，并支持宏'
- en: '`label`: A string that includes tests with labels matching a regex pattern
    and supports macros'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`label`: 一个字符串，用于包含标签匹配正则表达式模式的测试，并支持宏'
- en: '`index`: An object that selects tests to run with accepting `start`, `end`,
    and `stride` integers, and a `specificTests` array of integers; it supports macros'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index`: 一个对象，选择要运行的测试，并接受`start`、`end`和`stride`整数，以及一个`specificTests`整数数组；它支持宏'
- en: '`useUnion`: A Boolean that enables the usage of a union of tests determined
    by `index` and `name`, rather than the intersection'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`useUnion`: 一个布尔值，启用使用由`index`和`name`确定的测试的并集，而不是交集'
- en: 'For `exclude`, entries include:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`exclude`，条目包括：
- en: '`name`: A string that excludes tests with names matching a regex pattern and
    supports macros'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`: 一个字符串，用于排除名称匹配正则表达式模式的测试，并支持宏'
- en: '`label`: A string that excludes tests with labels matching a regex pattern
    and supports macros'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`label`: 一个字符串，排除与正则表达式匹配的标签的测试，并支持宏'
- en: '`fixtures`: An object that determines which fixtures to exclude from the test
    (see official documentation for more details)'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fixtures`: 一个对象，确定要从测试中排除的固定项（更多详细信息请参见官方文档）'
- en: 'Finally, the `execution` object can be added right here:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`execution`对象可以添加到此处：
- en: '[PRE15]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'It accepts the following optional entries:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 它接受以下可选条目：
- en: '`stopOnFailure`: A Boolean that enables halting the tests if any fail'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stopOnFailure`: 一个布尔值，启用在任何测试失败时停止测试'
- en: '`enableFailover`: A Boolean that resumes previously interrupted tests'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enableFailover`: 一个布尔值，表示是否恢复先前中断的测试'
- en: '`jobs`: An integer that runs a number of multiple tests in parallel'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jobs`: 一个整数，表示并行运行多个测试的数量'
- en: '`repeat`: An object that determines how to repeat tests; the object must have
    the following fields:'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`repeat`: 一个对象，用于确定如何重复测试；该对象必须包含以下字段：'
- en: '`mode` – A string with one of the following values: `until-fail`, `until-pass`,
    `after-timeout`'
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mode` – 一个字符串，具有以下之一的值：`until-fail`、`until-pass`、`after-timeout`'
- en: '`count` – An integer that determines the number of repeats'
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`count` – 一个整数，确定重复的次数'
- en: '`scheduleRandom`: A Boolean that enables a random order of test execution'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scheduleRandom`: 一个布尔值，启用随机顺序执行测试'
- en: '`timeout`: An integer that sets a limit (in seconds) on the total execution
    time for all tests'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timeout`: 一个整数，设置所有测试总执行时间的限制（以秒为单位）'
- en: '`noTestsAction`: A string that defines the action if no tests are found, with
    options like `default`, `error`, and `ignore`'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`noTestsAction`: 一个定义如果未找到测试时采取的行动的字符串，选项包括`default`、`error`和`ignore`。'
- en: 'While there are many configuration options, simple presets are also viable:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然有许多配置选项，但简单的预设也是可行的：
- en: '**ch16/01-presets/CMakePresets.json (continued)**'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**ch16/01-presets/CMakePresets.json（续）**'
- en: '[PRE16]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As with the build preset, we also set the required `configurePreset` field for
    the new test preset to neatly tie things together. Let’s take a look at the last
    stage-specific preset type, the package preset.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 与构建预设一样，我们还需要为新的测试预设设置必需的`configurePreset`字段，以便将所有内容整齐地连接在一起。让我们来看看最后一种特定于阶段的预设类型——包预设。
- en: Defining package-stage presets
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义包阶段预设
- en: 'Package presets were introduced in schema version `6`, meaning you’ll need
    at least CMake 3.25 to utilize them. These presets should be included in the `packagePresets`
    array. They can also be displayed by appending the `--list-presets` argument to
    the command line, specific to the test stage:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 包预设在模式版本`6`中被引入，这意味着你需要至少CMake 3.25版本才能使用它们。这些预设应包含在`packagePresets`数组中。你也可以通过在命令行中添加`--list-presets`参数来显示它们，这对于特定的测试阶段有效：
- en: '[PRE17]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'To create a project package using a preset, specify its name after the `--preset`
    argument, like so:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用预设创建项目包，指定其名称，方法是在`--preset`参数后面添加预设名称，如下所示：
- en: '[PRE18]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'A package preset leverages the same shared fields as other presets while introducing
    some optional fields specific to itself:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 包预设利用与其他预设相同的共享字段，同时引入一些特定于它自己的可选字段：
- en: '`generators`: An array of strings that sets the package generators to use (`ZIP`,
    `7Z`, `DEB`, etc.)'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`generators`: 一个字符串数组，设置用于创建包的生成器（`ZIP`、`7Z`、`DEB`等）'
- en: '`configuration`: An array of strings that determines the list of build types
    for CPack to package (`Debug`, `Release`, etc.)'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`configuration`: 一个字符串数组，确定CMake打包时所使用的构建类型列表（`Debug`、`Release`等）'
- en: '`filter`: An object that specifies which tests to run'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter`: 一个对象，指定要运行的测试'
- en: '`packageName`, `packageVersion`, `packageDirectory`, and `vendorName`: Strings
    thatspecify the metadata for the created package'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`packageName`、`packageVersion`、`packageDirectory`和`vendorName`: 字符串，指定已创建包的元数据'
- en: 'Let’s extend our preset file with a concise package preset as well:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也用一个简洁的包预设来扩展我们的预设文件：
- en: '**ch16/01-presets/CMakePresets.json (continued)**'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**ch16/01-presets/CMakePresets.json（续）**'
- en: '[PRE19]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Such a configuration will allow us to streamline the creation of project packages,
    but we’re still missing one key ingredient: project installation. Let’s find out
    how we can make it work.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这种配置将使我们能够简化项目包的创建，但我们仍然缺少一个关键部分：项目安装。让我们看看如何使它正常工作。
- en: Adding the installation preset
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加安装预设
- en: You might’ve noticed that the `CMakePresets.json` object doesn’t support defining
    `"``installPresets"`. There’s no explicit way to install your project through
    a preset, which seems odd since the configure preset provides an `installDir`
    field! So, do we have to resort to manual installation commands?
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能注意到，`CMakePresets.json` 对象不支持定义 `"installPresets"`。通过预设没有明确的方式来安装你的项目，这似乎很奇怪，因为配置预设提供了
    `installDir` 字段！那么，我们是否必须依赖手动安装命令呢？
- en: 'Fortunately, no. There’s a workaround that enables us to use the build preset
    to achieve our goal. Take a look:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，不需要。我们有一个变通方法，可以通过使用构建预设来实现我们的目标。请看下面：
- en: '**ch16/01-presets/CMakePresets.json (continued)**'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '**ch16/01-presets/CMakePresets.json（续）**'
- en: '[PRE20]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We can create a build preset with a `targets` field set to `install`. The `install`
    target is implicitly defined by the project when we configure the installation
    correctly. Building with this preset will execute the necessary steps to install
    the project to `installDir` specified in the associated configure preset (if the
    `installDir` field is empty, the default location will be used):'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以创建一个构建预设，将 `targets` 字段设置为 `install`。当我们正确配置安装时，`install` 目标由项目隐式定义。使用此预设进行构建将执行必要的步骤，将项目安装到关联配置预设中指定的
    `installDir`（如果 `installDir` 字段为空，将使用默认位置）：
- en: '[PRE21]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This neat trick can help us save a few cycles. It would be even better if we
    could provide a single command for our end users that takes care of everything,
    from configuration to installation. Well, we can, with workflow presets. Let’s
    take a look.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这个巧妙的技巧可以帮助我们节省一些资源。如果我们能为最终用户提供一个单一命令，处理从配置到安装的所有操作，那将更好。好吧，我们可以，使用工作流预设。让我们看一下。
- en: Defining workflow presets
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义工作流预设
- en: Workflow presets are the ultimate automation solution for our project. They
    allow us to automatically execute multiple stage-specific presets in the predetermined
    order. That way, we can practically perform an end-to-end build in a single step.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流预设是我们项目的终极自动化解决方案。它们允许我们按预定顺序自动执行多个阶段特定的预设。这样，我们几乎可以在一步操作中完成端到端的构建。
- en: 'To discover available workflows for a project, we can execute the following
    command:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 要发现项目的可用工作流，我们可以执行以下命令：
- en: '[PRE22]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'To select and apply a preset, use the following command:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 要选择并应用预设，请使用以下命令：
- en: '[PRE23]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Additionally, with the `--fresh` flag, we can wipe the build tree and clear
    the cache.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，通过 `--fresh` 标志，我们可以清除构建树并清除缓存。
- en: 'Defining workflow presets is quite simple; we need to define a name and we
    can optionally provide `displayName` and `description`, just like for stage-specific
    presets. After that, we must enumerate all the stage-specific presets the workflow
    should execute. This is done by providing a `steps` array containing objects with
    `type` and `name` properties, as illustrated here:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 定义工作流预设非常简单；我们需要定义一个名称，且可以选择性地提供 `displayName` 和 `description`，就像为阶段特定预设定义一样。之后，我们必须列出工作流应该执行的所有阶段特定预设。这是通过提供一个包含
    `type` 和 `name` 属性的对象数组 `steps` 来完成的，如下所示：
- en: '**ch16/01-presets/CMakePresets.json (continued)**'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '**ch16/01-presets/CMakePresets.json（续）**'
- en: '[PRE24]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Each object in the `steps` array references a preset we defined earlier in
    this chapter, indicating its type (`configure`, `build`, `test`, or `package`)
    and a name. These presets collectively execute all necessary steps to fully build
    and install a project from scratch with a single command:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`steps` 数组中的每个对象都引用了我们在本章前面定义的预设，指明其类型（`configure`、`build`、`test` 或 `package`）以及名称。这些预设共同执行所有必要的步骤，通过一个命令从零开始完全构建和安装项目：'
- en: '[PRE25]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Workflow presets are the ultimate solution for automating C++ building, testing,
    packaging, and installing. Next, let’s explore how to manage some edge cases with
    conditions and macros.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流预设是自动化 C++ 构建、测试、打包和安装的终极解决方案。接下来，让我们探索如何通过条件和宏来管理一些边缘情况。
- en: Adding conditions and macros
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加条件和宏
- en: When we discussed the general fields for each stage-specific preset, we mentioned
    the `condition` field. It’s time to return to that subject. The **condition**
    field enables or disables a preset, revealing its true potential when integrated
    with workflows. Essentially, it allows us to bypass presets that aren’t suitable
    under certain conditions and create alternative presets that are.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们讨论每个阶段特定预设的通用字段时，我们提到了 `condition` 字段。现在是时候回到这个话题了。**condition** 字段启用或禁用预设，并在与工作流集成时展现其真正的潜力。本质上，它允许我们绕过在某些条件下不适用的预设，并创建适用的替代预设。
- en: Conditions require preset schema version 3 or above (introduced in CMake 3.22)
    and are JSON objects that codify a few simple logical operations that can determine
    whether circumstances, like used OS, environment variables, or even chosen generators,
    fit the scenario of a preset. CMake provides this data through macros, which are
    essentially a limited set of read-only variables usable in the preset file.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 条件要求预设架构版本为 3 或更高版本（在 CMake 3.22 中引入），并且是 JSON 对象，用于编码一些简单的逻辑操作，以判断诸如操作系统、环境变量，甚至所选生成器等情况是否符合预设的场景。CMake
    通过宏提供这些数据，宏本质上是一组有限的只读变量，可在预设文件中使用。
- en: 'The structure of a condition object varies based on the check type. Each condition
    must include a `type` field and additional fields as defined by the type. Recognized
    basic types include:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 条件对象的结构根据检查类型有所不同。每个条件必须包含一个 `type` 字段，并根据类型定义其他字段。已识别的基本类型包括：
- en: '`const`: This checks whether the value provided in the `value` field is Boolean
    `true`'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`const`：这检查 `value` 字段中提供的值是否为布尔值 `true`'
- en: '`equals`, `notEquals`: This compares the `lhs` field value to the value in
    the `rhs` field'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`equals`，`notEquals`：这些用于将 `lhs` 字段的值与 `rhs` 字段中的值进行比较'
- en: '`inList` and `notInList`: These check for the presence of the value provided
    in the `string` field within the array in the `list` field'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`inList` 和 `notInList`：这些用于检查 `string` 字段中的值是否出现在 `list` 字段中的数组中'
- en: '`matches` and `notMatches`: These evaluate whether the `string` field’s value
    aligns with the pattern defined in the `regex` field'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`matches` 和 `notMatches`：这些用于评估 `string` 字段的值是否与 `regex` 字段中定义的模式一致'
- en: 'An example condition looks like this:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 一个条件示例如下所示：
- en: '[PRE26]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The `const` condition’s practical use is primarily for disabling a preset without
    removing it from the JSON file. Apart from `const`, all basic conditions permit
    the use of macros in the fields they introduce: `lhs`, `rhs`, `string`, `list`,
    and `regex`.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`const` 条件的实际用途主要是用于禁用预设，而不将其从 JSON 文件中移除。除了 `const` 外，所有基本条件都允许在它们引入的字段中使用宏：`lhs`、`rhs`、`string`、`list`
    和 `regex`。'
- en: 'Advanced condition types, which function like “not”, “and”, and “or” operations,
    utilize other conditions as arguments:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 高级条件类型，类似于“not”、“and”和“or”操作，使用其他条件作为参数：
- en: '`not`: A Boolean inversion of the condition provided in the `condition` field'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`not`：对 `condition` 字段中提供的条件进行布尔反转'
- en: '`anyOf` and `allOf`: These check whether any or all conditions in the `conditions`
    array are `true`'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`anyOf` 和 `allOf`：这些用于检查 `conditions` 数组中的任意或所有条件是否为 `true`'
- en: 'For instance:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE27]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This condition evaluates as `true` if the system is either Linux or Windows.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 如果系统是 Linux 或 Windows，则此条件评估为 `true`。
- en: 'Through these examples, we’ve introduced our first macro: `${hostSystemName}`.
    Macros follow a simple syntax and are limited to specific instances, like:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些示例，我们介绍了我们的第一个宏：`${hostSystemName}`。宏遵循简单的语法，并且限于特定实例，如：
- en: '`${sourceDir}`: This is the path of the source tree'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`${sourceDir}`：这是源树的路径'
- en: '`${sourceParentDir}`: This is the path of the source tree’s parent directory'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`${sourceParentDir}`：这是源树父目录的路径'
- en: '`${sourceDirName}`: This is the project’s directory name'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`${sourceDirName}`：这是项目的目录名称'
- en: '`${presetName}`: This is the name of the preset'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`${presetName}`：这是预设的名称'
- en: '`${generator}`: This is the generator used to create the buildsystem'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`${generator}`：这是用于创建构建系统的生成器'
- en: '`${hostSystemName}`: This is the system name: `Linux`, `Windows`, or `Darwin`
    on macOS'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`${hostSystemName}`：这是系统名称：在 Linux 上为 `Linux`，在 Windows 上为 `Windows`，在 macOS
    上为 `Darwin`'
- en: '`${fileDir}`: This is the name of the file containing the current preset (applicable
    when an `include` array is used to import external presets)'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`${fileDir}`：这是包含当前预设的文件名（适用于使用 `include` 数组导入外部预设的情况）'
- en: '`${dollar}`: This is the escaped dollar sign (`$`)'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`${dollar}`：这是转义的美元符号（`$`）'
- en: '`${pathListSep}`: This is the environment-specific path separator'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`${pathListSep}`：这是环境特定的路径分隔符'
- en: '`$env{<variable-name>}`: This returns the environment variable if specified
    by the preset (case-sensitive), or the parent environment value'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$env{<variable-name>}`：如果预设中指定了环境变量（区分大小写），则返回该环境变量的值，或返回父环境的值'
- en: '`$penv{<variable-name>}`: This returns the environment variable from the parent
    environment'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$penv{<variable-name>}`：这是从父环境中返回的环境变量'
- en: '`$vendor{<macro-name>}`: This allows IDE vendors to introduce their own macros'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$vendor{<macro-name>}`：这允许 IDE 供应商引入他们自己的宏'
- en: These macros provide sufficient flexibility for use in presets and their conditions,
    enabling the effective toggling of workflow steps as needed.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 这些宏提供了足够的灵活性，以便在预设及其条件中使用，支持在需要时有效地切换工作流步骤。
- en: Summary
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We have just completed a comprehensive overview of CMake presets, introduced
    in CMake 3.19, to streamline project management. Presets allow product authors
    to provide a neatly prepared experience for their users by configuring all the
    stages of the project build and delivery. Presets not only simplify the usage
    of CMake but also enhance consistency and allow environment-aware setups.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚完成了对 CMake 预设的全面概述，这些预设是在 CMake 3.19 中引入的，旨在简化项目管理。预设允许产品作者通过配置项目构建和交付的所有阶段，为用户提供一个精心准备的体验。预设不仅简化了
    CMake 的使用，还增强了一致性，并支持环境感知的设置。
- en: 'We explained the structure and usage of the `CMakePresets.json` and `CMakeUserPresets.json`
    files, providing insights into defining various types of presets, such as configure
    presets, build presets, test presets, package presets, and workflow presets. Each
    type is described in detail: we learned about common fields, how to structure
    presets internally, establish inheritance between them, and the specific configuration
    options available for the end user.'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 我们解释了 `CMakePresets.json` 和 `CMakeUserPresets.json` 文件的结构和使用，提供了定义各种预设类型的见解，比如配置预设、构建预设、测试预设、打包预设和工作流预设。每种类型都有详细描述：我们了解了常见字段，如何在内部组织预设，如何在它们之间建立继承关系，以及最终用户可用的具体配置选项。
- en: For the *configure preset*, we covered important topics like selecting the generator,
    build, and installation directory, and linking presets together with the `configurePreset`
    field. We now know how to handle *build presets* and set the build job count,
    targets, and cleaning options. Then, we learned how the *test preset* assists
    with test selection through extensive filtering and ordering options, output formatting,
    and execution parameters such as timeouts and fault tolerance. We understand how
    to manage *package presets* by specifying package generators, filtering, and package
    metadata. We even introduced a workaround to execute the installation stage through
    a specialized build preset application.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 对于*配置预设*，我们讨论了选择生成器、构建目录和安装目录的重要话题，以及如何通过 `configurePreset` 字段将预设连接在一起。现在我们知道如何处理*构建预设*，设置构建作业数量、目标和清理选项。接下来，我们学习了*测试预设*如何通过广泛的过滤和排序选项、输出格式和执行参数（如超时和容错）来协助测试选择。我们理解了如何通过指定包生成器、过滤器和包元数据来管理*打包预设*。我们甚至介绍了一种通过专门的构建预设应用执行安装阶段的解决方法。
- en: Next, we discovered how workflow presets allow the grouping of multiple stage-specific
    presets. Finally, we discussed conditions and macro expressions, providing project
    authors with greater control over the behavior of individual presets and their
    integration into a workflow.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们发现工作流预设如何允许将多个阶段特定的预设进行分组。最后，我们讨论了条件和宏表达式，为项目作者提供了更大的控制力，可以更好地控制各个预设的行为及其在工作流中的集成。
- en: Our CMake journey is complete! Congratulations – you now possess all the tools
    necessary to develop, test, and package high-quality C++ software. The best way
    forward is to apply what you’ve learned and create excellent software for your
    users. Good luck!
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 CMake 之旅已圆满完成！恭喜你——现在你拥有了开发、测试和打包高质量 C++ 软件所需的所有工具。接下来的最佳方式是应用你所学的知识，创建出色的软件供用户使用。祝你好运！
- en: Further reading
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入阅读
- en: 'For more information, you can refer to the following resource:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 如需更多信息，您可以参考以下资源：
- en: Official documentation for presets:[https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html](https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html)
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预设的官方文档：[https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html](https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html)
- en: Join our community on Discord
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的社区 Discord
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们社区的 Discord 空间，与作者和其他读者进行讨论：
- en: '[https://discord.com/invite/vXN53A7ZcA](https://discord.com/invite/vXN53A7ZcA)'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://discord.com/invite/vXN53A7ZcA](https://discord.com/invite/vXN53A7ZcA)'
- en: '![](img/QR_Code94081075213645359.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code94081075213645359.png)'
