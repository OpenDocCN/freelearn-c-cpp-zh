["```cpp\n#include \"stdafx.h\" \n#include <sstream> \n#include <fstream> \n#include <SFML/Graphics.hpp> \n#include \"ZombieArena.h\" \n#include \"Player.h\" \n#include \"TextureHolder.h\" \n#include \"Bullet.h\" \n#include \"Pickup.h\" \n\nusing namespace sf; \n\n```", "```cpp\n// Score \nText scoreText; \nscoreText.setFont(font); \nscoreText.setCharacterSize(55); \nscoreText.setFillColor(Color::White); \nscoreText.setPosition(20, 0); \n\n// Load the high-score from a text file\nstd::ifstream inputFile(\"gamedata/scores.txt\");\nif (inputFile.is_open())\n{\n   inputFile >> hiScore;\n   inputFile.close();\n} \n\n// Hi Score \nText hiScoreText; \nhiScoreText.setFont(font); \nhiScoreText.setCharacterSize(55); \nhiScoreText.setFillColor(Color::White); \nhiScoreText.setPosition(1400, 0); \nstd::stringstream s; \ns << \"Hi Score:\" << hiScore; \nhiScoreText.setString(s.str()); \n\n```", "```cpp\n// Have any zombies touched the player        \nfor (int i = 0; i < numZombies; i++) \n{ \n   if (player.getPosition().intersects \n      (zombies[i].getPosition()) && zombies[i].isAlive()) \n   { \n\n      if (player.hit(gameTimeTotal)) \n      { \n         // More here later \n      } \n\n      if (player.getHealth() <= 0) \n      { \n        state = State::GAME_OVER; \n\n std::ofstream outputFile(\"gamedata/scores.txt\");\n        outputFile << hiScore;\n        outputFile.close(); \n\n      } \n   } \n}// End player touched \n\n```", "```cpp\n#include \"stdafx.h\" \n#include <sstream> \n#include <fstream> \n#include <SFML/Graphics.hpp> \n#include <SFML/Audio.hpp> \n#include \"ZombieArena.h\" \n#include \"Player.h\" \n#include \"TextureHolder.h\" \n#include \"Bullet.h\" \n#include \"Pickup.h\" \n\n```", "```cpp\n// When did we last update the HUD? \nint framesSinceLastHUDUpdate = 0; \n// What time was the last update \nTime timeSinceLastUpdate; \n// How often (in frames) should we update the HUD \nint fpsMeasurementFrameInterval = 1000; \n\n// Prepare the hit sound\nSoundBuffer hitBuffer;\nhitBuffer.loadFromFile(\"sound/hit.wav\");\nSound hit;\nhit.setBuffer(hitBuffer);\n\n// Prepare the splat sound\nSoundBuffer splatBuffer;\nsplatBuffer.loadFromFile(\"sound/splat.wav\");\nsf::Sound splat;\nsplat.setBuffer(splatBuffer);\n\n// Prepare the shoot soundSoundBuffer shootBuffer;shootBuffer.loadFromFile(\"sound/shoot.wav\");\nSound shoot;shoot.setBuffer(shootBuffer);\n\n// Prepare the reload sound\nSoundBuffer reloadBuffer;\nreloadBuffer.loadFromFile(\"sound/reload.wav\");\nSound reload;\nreload.setBuffer(reloadBuffer);\n\n// Prepare the failed sound\nSoundBuffer reloadFailedBuffer;\nreloadFailedBuffer.loadFromFile(\"sound/reload_failed.wav\");\nSound reloadFailed;\nreloadFailed.setBuffer(reloadFailedBuffer);\n\n// Prepare the powerup sound\nSoundBuffer powerupBuffer;\npowerupBuffer.loadFromFile(\"sound/powerup.wav\");\nSound powerup;\npowerup.setBuffer(powerupBuffer);\n\n// Prepare the pickup sound\nSoundBuffer pickupBuffer;\npickupBuffer.loadFromFile(\"sound/pickup.wav\");\nSound pickup;\npickup.setBuffer(pickupBuffer); \n\n// The main game loop \nwhile (window.isOpen()) \n\n```", "```cpp\n// Handle the LEVELING up state \nif (state == State::LEVELING_UP) \n{ \n   // Handle the player LEVELING up \n   if (event.key.code == Keyboard::Num1) \n   { \n // Increase fire rate\n     fireRate++; \n     state = State::PLAYING; \n   } \n\n   if (event.key.code == Keyboard::Num2) \n   { \n // Increase clip size\n     clipSize += clipSize; \n     state = State::PLAYING; \n   } \n\n   if (event.key.code == Keyboard::Num3) \n   { \n // Increase health\n     player.upgradeHealth(); \n     state = State::PLAYING; \n   } \n\n   if (event.key.code == Keyboard::Num4) \n   { \n // Increase speed\n     player.upgradeSpeed(); \n     state = State::PLAYING; \n   } \n\n   if (event.key.code == Keyboard::Num5) \n   { \n // Upgrade pickup\n     healthPickup.upgrade(); \n     state = State::PLAYING; \n   } \n\n   if (event.key.code == Keyboard::Num6) \n   { \n // Upgrade pickup\n     ammoPickup.upgrade(); \n     state = State::PLAYING; \n   } \n\n   if (state == State::PLAYING) \n   { \n\n```", "```cpp\n   if (event.key.code == Keyboard::Num6) \n   { \n      ammoPickup.upgrade(); \n      state = State::PLAYING; \n   } \n\n   if (state == State::PLAYING) \n   { \n // Increase the wave number\n     wave++; \n\n     // Prepare thelevel \n     // We will modify the next two lines later \n arena.width = 500 * wave;\n     arena.height = 500 * wave; \n     arena.left = 0; \n     arena.top = 0; \n\n     // Pass the vertex array by reference  \n     // to the createBackground function \n     int tileSize = createBackground(background, arena); \n\n     // Spawn the player in the middle of the arena \n     player.spawn(arena, resolution, tileSize); \n\n     // Configure the pickups \n     healthPickup.setArena(arena); \n     ammoPickup.setArena(arena); \n\n     // Create a horde of zombies \n numZombies = 5 * wave; \n\n     // Delete the previously allocated memory (if it exists) \n     delete[] zombies; \n     zombies = createHorde(numZombies, arena); \n     numZombiesAlive = numZombies; \n\n // Play the powerup sound\n     powerup.play(); \n\n     // Reset the clock so there isn't a frame jump \n     clock.restart(); \n   } \n}// End LEVELING up \n\n```", "```cpp\n// Start a new game while in GAME_OVER state \nelse if (event.key.code == Keyboard::Return && \n   state == State::GAME_OVER) \n{ \n   state = State::LEVELING_UP; \n wave = 0;\n   score = 0;\n\n   // Prepare the gun and ammo for next game\n   currentBullet = 0;\n   bulletsSpare = 24;\n   bulletsInClip = 6;\n   clipSize = 6;\n   fireRate = 1;\n\n   // Reset the player's stats\n   player.resetPlayerStats(); \n} \n\n```", "```cpp\nif (state == State::PLAYING) \n{ \n   // Reloading \n   if (event.key.code == Keyboard::R) \n   { \n      if (bulletsSpare >= clipSize) \n      { \n         // Plenty of bullets. Reload. \n         bulletsInClip = clipSize; \n         bulletsSpare -= clipSize;      \n reload.play(); \n      } \n      else if (bulletsSpare > 0) \n      { \n         // Only few bullets left \n         bulletsInClip = bulletsSpare; \n         bulletsSpare = 0;           \n reload.play(); \n      } \n      else \n      { \n         // More here soon?! \n reloadFailed.play(); \n      } \n   } \n} \n\n```", "```cpp\n// Fire a bullet \nif (sf::Mouse::isButtonPressed(sf::Mouse::Left)) \n{ \n\n   if (gameTimeTotal.asMilliseconds() \n      - lastPressed.asMilliseconds() \n      > 1000 / fireRate && bulletsInClip > 0) \n   { \n\n      // Pass the centre of the player and crosshair \n      // to the shoot function \n      bullets[currentBullet].shoot( \n         player.getCenter().x, player.getCenter().y, \n         mouseWorldPosition.x, mouseWorldPosition.y); \n\n      currentBullet++; \n      if (currentBullet > 99) \n      { \n         currentBullet = 0; \n      } \n      lastPressed = gameTimeTotal; \n\n shoot.play(); \n\n      bulletsInClip--; \n   } \n\n}// End fire a bullet \n\n```", "```cpp\n// Have any zombies touched the player        \nfor (int i = 0; i < numZombies; i++) \n{ \n   if (player.getPosition().intersects \n      (zombies[i].getPosition()) && zombies[i].isAlive()) \n   { \n\n      if (player.hit(gameTimeTotal)) \n      { \n         // More here later \n hit.play(); \n      } \n\n      if (player.getHealth() <= 0) \n      { \n         state = State::GAME_OVER; \n\n         std::ofstream OutputFile(\"gamedata/scores.txt\"); \n         OutputFile << hiScore; \n         OutputFile.close(); \n\n      } \n   } \n}// End player touched \n\n```", "```cpp\n// Has the player touched health pickup \nif (player.getPosition().intersects \n   (healthPickup.getPosition()) && healthPickup.isSpawned()) \n{ \n   player.increaseHealthLevel(healthPickup.gotIt()); \n // Play a sound\n   pickup.play(); \n\n} \n\n// Has the player touched ammo pickup \nif (player.getPosition().intersects \n   (ammoPickup.getPosition()) && ammoPickup.isSpawned()) \n{ \n   bulletsSpare += ammoPickup.gotIt(); \n // Play a sound\n   reload.play(); \n\n} \n\n```", "```cpp\n// Have any zombies been shot? \nfor (int i = 0; i < 100; i++) \n{ \n   for (int j = 0; j < numZombies; j++) \n   { \n      if (bullets[i].isInFlight() &&  \n         zombies[j].isAlive()) \n      { \n         if (bullets[i].getPosition().intersects \n            (zombies[j].getPosition())) \n         { \n            // Stop the bullet \n            bullets[i].stop(); \n\n            // Register the hit and see if it was a kill \n            if (zombies[j].hit()) { \n               // Not just a hit but a kill too \n               score += 10; \n               if (score >= hiScore) \n               { \n                  hiScore = score; \n               } \n\n               numZombiesAlive--; \n\n               // When all the zombies are dead (again) \n               if (numZombiesAlive == 0) { \n                  state = State::LEVELING_UP; \n               } \n            }   \n\n // Make a splat sound\n           splat.play(); \n\n         } \n      } \n\n   } \n}// End zombie being shot \n\n```"]