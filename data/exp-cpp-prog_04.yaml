- en: Smart Pointers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 智能指针
- en: 'In the previous chapter, you learned about template programming and the benefits
    of generic programming. In this chapter, you will learn about the following smart
    pointer topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，您了解了模板编程和通用编程的好处。在本章中，您将学习以下智能指针主题：
- en: Memory management
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存管理
- en: Issues with raw pointers
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原始指针的问题
- en: Cyclic dependency
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 循环依赖
- en: 'Smart pointers:'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 智能指针：
- en: '`auto_ptr`'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`auto_ptr`'
- en: '`unique_ptr`'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unique_ptr`'
- en: '`shared_ptr`'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shared_ptr`'
- en: '`weak_ptr`'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`weak_ptr`'
- en: Let's explore the memory management facilities offered by C++.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索C++提供的内存管理设施。
- en: Memory management
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内存管理
- en: In C++, memory management is generally a responsibility of the software developers.
    This is because C++ standard does not enforce garbage collection support in C++
    compiler; hence, it is left to the compiler vendor's choice. Exceptionally, the
    Sun C++ compiler comes with a garbage collection library named `libgc`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在C++中，内存管理通常是软件开发人员的责任。这是因为C++标准不强制在C++编译器中支持垃圾回收；因此，这取决于编译器供应商的选择。特别地，Sun C++编译器附带了一个名为`libgc`的垃圾回收库。
- en: C++ language has many powerful features. Of these, needless to say, pointers
    is one of the most powerful and useful features. Having said pointers are very
    useful, they do come with their own weird issues, hence they must be used responsibly.
    When memory management is not taken seriously or not done quite right, it leads
    to many issues, including application crashes, core dumps, segmentation faults,
    intermittent difficulties to debug issues, performance issues, and so on. Dangling
    pointers or rogue pointers sometimes mess with other unrelated applications while
    the culprit application executes silently; in fact, the victim application might
    be blamed many times. The worst part about memory leaks is that at certain times
    it gets really tricky and even experienced developers end up debugging the victim
    code for countless hours while the culprit code is left untouched. Effective memory
    management helps avoid memory leaks and lets you develop high-performance applications
    that are memory efficient.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: C++语言具有许多强大的功能。其中，指针无疑是最强大和最有用的功能之一。指针虽然非常有用，但它们也有自己的奇怪问题，因此必须负责任地使用。当内存管理没有得到认真对待或者没有做得很好时，会导致许多问题，包括应用程序崩溃、核心转储、分段错误、间歇性的调试困难、性能问题等等。悬空指针或流氓指针有时会干扰其他无关的应用程序，而罪魁祸首应用程序却悄无声息地执行；事实上，受害应用程序可能会被多次指责。内存泄漏最糟糕的部分是，在某些时候它变得非常棘手，即使有经验的开发人员也会花费数小时来调试受害代码，而罪魁祸首代码却毫发未动。有效的内存管理有助于避免内存泄漏，并让您开发出内存高效的高性能应用程序。
- en: As the memory model of every operating system varies, every OS may behave differently
    at a different point in time for the same memory leak issue. Memory management
    is a big topic, and C++ offers many ways to do it well. We'll discuss some of
    the useful techniques in the following sections.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 由于每个操作系统的内存模型都不同，每个操作系统在同一内存泄漏问题的不同时间点可能会有不同的行为。内存管理是一个大课题，C++提供了许多有效的方法。我们将在以下部分讨论一些有用的技术。
- en: Issues with raw pointers
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 原始指针的问题
- en: 'The majority of the C++ developers have something in common: all of us love
    to code complex stuff. You ask a developer, "Hey dude, would you like to reuse
    code that already exists and works or would you like to develop one yourself?"
    Though diplomatically, most developers will say to reuse what is already there
    when possible, their heart will say, "I wish I could design and develop it myself."
    Complex data structure and algorithms tend to call for pointers. Raw pointers
    are really cool to work with until you get into trouble.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数C++开发人员有一个共同点：我们都喜欢编写复杂的东西。你问一个开发人员，“嘿，伙计，你想重用已经存在并且有效的代码，还是想自己开发一个？”虽然大多数开发人员会委婉地说在可能的情况下重用已有的代码，但他们的内心会说，“我希望我能自己设计和开发它。”复杂的数据结构和算法往往需要指针。原始指针在遇到麻烦之前确实很酷。
- en: Raw pointers must be allocated with memory before use and require deallocation
    once done; it is that simple. However, things get complicated in a product where
    pointer allocation may happen in one place and deallocation might happen in yet
    another place. If memory management decisions aren't made correctly, people may
    assume it is either the caller or callee's responsibility to free up memory, and
    at times, the memory may not be freed up from either place. In yet another possibility,
    chances are that the same pointer is deleted multiples times from different places,
    which could lead to application crashes. If this happens in a Windows device driver,
    it will most likely end up in a blue screen of death.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 原始指针在使用前必须分配内存，并且在完成后需要释放内存；就是这么简单。然而，在一个产品中，指针分配可能发生在一个地方，而释放可能发生在另一个地方，事情就会变得复杂起来。如果内存管理决策没有做出正确的选择，人们可能会认为释放内存是调用者或被调用者的责任，有时内存可能在任何地方都没有被释放。另一种可能性是，同一个指针可能会在不同的地方被多次删除，这可能导致应用程序崩溃。如果这种情况发生在Windows设备驱动程序中，很可能会导致蓝屏死机。
- en: 'Just imagine, what if there were an application exception and the function
    that threw the exception had a bunch of pointers that were allocated with memory
    before the exception occurred? It is anybody''s guess: there will be memory leaks.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，如果应用程序出现异常，并且抛出异常的函数在异常发生之前分配了一堆内存的指针，那会怎么样？任何人都可以猜到：会有内存泄漏。
- en: 'Let''s take a simple example that makes use of a raw pointer:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个使用原始指针的简单例子：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, run the following command:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行以下命令：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Check out the output of this program:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 查看此程序的输出：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, run the following command:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行以下命令：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: C++ compiler is really cool. Look at the warning message, it bangs on in regard
    to pointing out the issue. I love the Linux operating system. Linux is quite smart
    in finding rogue applications that misbehave, and it knocks them off right on
    time before they cause any damage to the rest of the applications or the OS. A
    core dump is actually good, while it is cursed instead of celebrating the Linux
    approach. Guess what, Microsoft's Windows operating systems are equally smarter.
    They do bug check when they find some applications doing fishy memory accesses
    and Windows OS as well supports mini-dumps and full dumps which are equivalent
    to core dumps in Linux OS.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: C++编译器真的很酷。看看警告消息，它指出了问题。我喜欢Linux操作系统。Linux非常聪明，能够找到行为不端的恶意应用程序，并及时将其关闭，以免对其他应用程序或操作系统造成任何损害。核心转储实际上是好事，尽管它被诅咒，而不是庆祝Linux的方法。猜猜，微软的Windows操作系统同样聪明。当发现某些应用程序进行可疑的内存访问时，它们会进行错误检查，而且Windows操作系统也支持迷你转储和完整转储，这相当于Linux操作系统中的核心转储。
- en: 'Let''s take a look at the Valgrind tool output to check the memory leak issue:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下Valgrind工具的输出，检查内存泄漏问题：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In this output, if you pay attention to the **bold** portion of the text, you
    will notice the Valgrind tool did point out the source code line number that caused
    this core dump. Line number 12 from the `main.cpp` file is as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个输出中，如果你注意**粗体**部分的文本，你会注意到Valgrind工具指出了导致核心转储的源代码行号。`main.cpp`文件的第12行如下：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The moment the exception occurs at line number 12 in the `main.cpp` file, the
    code that appears below the exception will never get executed. At line number
    13 in the `main.cpp` file, there appears a `delete` statement that will never
    get executed due to the exception:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦在`main.cpp`文件的第12行发生异常，出现在异常下方的代码将永远不会被执行。在`main.cpp`文件的第13行，出现了一个`delete`语句，由于异常而永远不会被执行：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The memory allocated to the preceding raw pointer isn't released as the memory
    pointed by pointers is not freed up during the stack unwinding process. Whenever
    an exception is thrown by a function and the exception isn't handled by the same
    function, stack unwinding is guaranteed. However, only the automatic local variables
    will be cleaned up during the stack unwinding process, not the memory pointed
    by the pointers. This results in memory leaks.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 由于指针指向的内存在堆栈展开过程中没有被释放，因此分配给前述原始指针的内存没有被释放。每当函数抛出异常并且异常没有被同一函数处理时，堆栈展开是有保证的。然而，在堆栈展开过程中只有自动本地变量会被清理，而不是指针指向的内存。这导致内存泄漏。
- en: This is one of the weird issues invited by the use of raw pointers; there are
    many other similar scenarios. Hopefully you are convinced now that the thrill
    of using raw pointers does come at a cost. But the penalty paid isn't really worth
    it as there are good alternatives available in C++ to deal with this issue. You
    are right, using a smart pointer is the solution that offers the benefits of using
    pointers without paying the cost attached to raw pointers.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用原始指针引发的奇怪问题之一；还有许多类似的情况。希望你现在已经相信，使用原始指针的乐趣确实是要付出代价的。但所付出的代价并不值得，因为在C++中有很好的替代方案来解决这个问题。你是对的，使用智能指针是解决方案，它提供了使用指针的好处，而不需要付出原始指针所附带的代价。
- en: Hence, smart pointers are the way to use pointers safely in C++.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，智能指针是在C++中安全使用指针的方法。
- en: Smart pointers
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 智能指针
- en: In C++, smart pointers let you focus on the problem at hand by freeing you from
    the worries of dealing with custom garbage collection techniques. Smart pointers
    let you use raw pointers safely. They take the responsibility of cleaning up the
    memory used by raw pointers.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在C++中，智能指针让你专注于手头的问题，摆脱了处理自定义垃圾回收技术的烦恼。智能指针让你安全地使用原始指针。它们负责清理原始指针使用的内存。
- en: 'C++ supports many types of smart pointers that can be used in different scenarios:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: C++支持许多类型的智能指针，可以在不同的场景中使用：
- en: '`auto_ptr`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`auto_ptr`'
- en: '`unique_ptr`'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unique_ptr`'
- en: '`shared_ptr`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shared_ptr`'
- en: '`weak_ptr`'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`weak_ptr`'
- en: The `auto_ptr` smart pointer was introduced in C++11\. An `auto_ptr` smart pointer
    helps release the heap memory automatically when it goes out of scope. However,
    due to the way `auto_ptr` transfers ownership from one `auto_ptr` instance to
    another, it was deprecated and `unique_ptr` was introduced as its replacement.
    The `shared_ptr` smart pointer helps multiple shared smart pointers reference
    the same object and takes care of the memory management burden. The `weak_ptr` smart
    pointer helps resolve memory leak issues that arise due to the use of `shared_ptr`
    when there is a cyclic dependency issue in the application design.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`auto_ptr`智能指针是在C++11中引入的。`auto_ptr`智能指针在其作用域结束时自动释放堆内存。然而，由于`auto_ptr`从一个`auto_ptr`实例转移所有权的方式，它已被弃用，并且`unique_ptr`被引入作为其替代品。`shared_ptr`智能指针帮助多个共享智能指针引用同一个对象，并负责内存管理负担。`weak_ptr`智能指针帮助解决由于应用程序设计中存在循环依赖问题而导致的`shared_ptr`使用时的内存泄漏问题。'
- en: 'There are other types of smart pointers and related stuff that are not so commonly
    used, and they are listed in the following bullet list. However, I would highly
    recommend that you explore them on your own as you never know when you will find
    them useful:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他类型的智能指针和相关内容，它们并不常用，并列在下面的项目列表中。然而，我强烈建议你自己探索它们，因为你永远不知道什么时候会发现它们有用：
- en: '`owner_less`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`owner_less`'
- en: '`enable_shared_from_this`'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enable_shared_from_this`'
- en: '`bad_weak_ptr`'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bad_weak_ptr`'
- en: '`default_delete`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default_delete`'
- en: The `owner_less` smart pointer helps compare two or more smart pointers if they
    share the same raw pointed object. The `enable_shared_from_this` smart pointer
    helps get a smart pointer of the `this` pointer. The `bad_weak_ptr` smart pointer
    is an exception class that implies that `shared_ptr` was created using an invalid
    smart pointer. The `default_delete` smart pointer refers to the default destruction
    policy used by `unique_ptr`, which invokes the `delete` statement, while partial
    specialization for array types that use `delete[]` is also supported.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`owner_less`智能指针帮助比较两个或多个智能指针是否共享相同的原始指向对象。`enable_shared_from_this`智能指针帮助获取`this`指针的智能指针。`bad_weak_ptr`智能指针是一个异常类，意味着使用无效智能指针创建了`shared_ptr`。`default_delete`智能指针是`unique_ptr`使用的默认销毁策略，它调用`delete`语句，同时也支持用于数组类型的部分特化，使用`delete[]`。'
- en: In this chapter, we will explore `auto_ptr`, `shared_ptr`, `weak_ptr`, and `unique-ptr` one
    by one.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将逐一探讨`auto_ptr`、`shared_ptr`、`weak_ptr`和`unique-ptr`。
- en: auto_ptr
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: auto_ptr
- en: The `auto_ptr` smart pointer takes a raw pointer, wraps it, and ensures the
    memory pointed by the raw pointer is released back whenever the `auto_ptr` object
    goes out of scope. At any time, only one `auto_ptr` smart pointer can point to
    an object. Hence, whenever one `auto_ptr` pointer is assigned to another `auto_ptr` pointer,
    the ownership gets transferred to the `auto_ptr` instance that has received the
    assignment; the same happens when an `auto_ptr` smart pointer is copied.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`auto_ptr`智能指针接受一个原始指针，包装它，并确保在`auto_ptr`对象超出范围时释放原始指针指向的内存。任何时候，只有一个`auto_ptr`智能指针可以指向一个对象。因此，当一个`auto_ptr`指针被赋值给另一个`auto_ptr`指针时，所有权被转移到接收赋值的`auto_ptr`实例；当复制`auto_ptr`智能指针时也是如此。'
- en: 'It would be interesting to observe the stuff in action with a simple example,
    as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 通过一个简单的例子观察这些功能将会很有趣，如下所示：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The compilation output of the preceding program is as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 前面程序的编译输出如下：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As you can see, the C++ compiler warns us as the use of `auto_ptr` is deprecated.
    Hence, I don't recommend the use of the `auto_ptr` smart pointer anymore; it is
    replaced by `unique_ptr`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，C++编译器警告我们使用`auto_ptr`已经被弃用。因此，我不建议再使用`auto_ptr`智能指针；它已被`unique_ptr`取代。
- en: 'For now, we can ignore the warnings and move on, as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们可以忽略警告并继续，如下所示：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you can see in the preceding program output, both `Object1` and `Object2`,
    allocated in a heap, got deleted automatically. And the credit goes to the `auto_ptr`
    smart pointer.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在前面程序输出中看到的，分配在堆中的`Object1`和`Object2`都被自动删除了。这要归功于`auto_ptr`智能指针。
- en: Code walkthrough - Part 1
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码演示 - 第1部分
- en: 'As you may have understood from the `MyClass` definition, it has defined the default
    `constructor`, `copy` constructor and destructor, an `assignment` operator, and
    `sayHello()` methods, as shown here:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 从`MyClass`的定义中你可能已经了解到，它定义了默认`构造函数`、`复制`构造函数和析构函数，一个`赋值`运算符和`sayHello()`方法，如下所示：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The methods of `MyClass` have nothing more than a print statement that indicates
    the methods got invoked; they were purely meant for demonstration purposes.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`MyClass`的方法只是打印声明表明方法已被调用；它们纯粹是为了演示目的而设计的。'
- en: 'The `main()` function creates two `auto_ptr` smart pointers that point to two
    different `MyClass` objects, as shown here:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`main()`函数创建了两个指向堆中两个不同`MyClass`对象的`auto_ptr`智能指针，如下所示：'
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As you can understand, `auto_ptr` is a local object that wraps a raw pointer,
    not a pointer. When the control hits the `return` statement, the stack unwinding
    process gets initiated, and as part of this, the stack objects, that is, `ptr1`
    and `ptr2`, get destroyed. This, in turn, invokes the destructor of `auto_ptr`
    that ends up deleting the `MyClass` objects pointed by the stack objects `ptr1`
    and `ptr2`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所理解的，`auto_ptr`是一个包装原始指针而不是指针的本地对象。当控制流达到`return`语句时，堆栈展开过程开始，作为这一过程的一部分，堆栈对象`ptr1`和`ptr2`被销毁。这反过来调用了`auto_ptr`的析构函数，最终删除了由堆栈对象`ptr1`和`ptr2`指向的`MyClass`对象。
- en: 'We are not quite done yet. Let''s explore more useful functionalities of `auto_ptr`,
    as shown in the following `main` function:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有完成。让我们探索`auto_ptr`的更多有用功能，如下所示的`main`函数：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Code walkthrough - Part 2
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码演示 - 第2部分
- en: 'The `main()` function code we just saw demonstrates many useful techniques
    and some controversial behaviors of the `auto_ptr` smart pointer. The following
    code creates two instances of `auto_ptr`, namely `ptr1` and `ptr2`, that wrap
    two objects of `MyClass` created in a heap:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚看到的`main()`函数代码演示了许多有用的技术和一些`auto_ptr`智能指针的争议行为。以下代码创建了两个`auto_ptr`实例，即`ptr1`和`ptr2`，它们包装了堆中创建的两个`MyClass`对象：
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, the following code demonstrates how the methods supported by `MyClass`
    can be invoked using `auto_ptr`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，以下代码演示了如何使用`auto_ptr`调用`MyClass`支持的方法：
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Hope you observed the `ptr1->sayHello()` statement. It will make you believe
    that the `auto_ptr` `ptr1` object is a pointer, but in reality, `ptr1` and `ptr2`
    are just `auto_ptr` objects created in the stack as local variables. As the `auto_ptr`
    class has overloaded the `->` pointer operator and the `*` dereferencing operator,
    it appears like a pointer. As a matter of fact, all the methods exposed by `MyClass`
    can only be accessed using the `->` pointer operator, while all the `auto_ptr`
    methods can be accessed as you would regularly access a stack object.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你注意到了`ptr1->sayHello()`语句。它会让你相信`auto_ptr` `ptr1`对象是一个指针，但实际上，`ptr1`和`ptr2`只是作为本地变量在堆栈中创建的`auto_ptr`对象。由于`auto_ptr`类已经重载了`->`指针运算符和`*`解引用运算符，它看起来像一个指针。事实上，`MyClass`暴露的所有方法只能使用`->`指针运算符访问，而所有`auto_ptr`方法可以像访问堆栈对象一样访问。
- en: 'The following code demonstrates the internal behavior of the `auto_ptr` smart
    pointer, so pay close attention; this is going to be really interesting:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码演示了`auto_ptr`智能指针的内部行为，所以请密切关注；这将会非常有趣：
- en: '[PRE15]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'It appears as though the preceding code is a simple `assignment` statement,
    but it triggers many activities within `auto_ptr`. The following activities happen
    due to the preceding `assignment` statement:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来前面的代码只是一个简单的`赋值`语句，但它会触发`auto_ptr`中的许多活动。由于前面的`赋值`语句，发生了以下活动：
- en: The `ptr2` smart pointer will give up the ownership of `MyClass` object 2.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ptr2`智能指针将放弃对`MyClass`对象2的所有权。'
- en: '`MyClass` object 2 will be destructed as `ptr2` has given up its ownership
    of `object 2`.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MyClass`对象2将被销毁，因为`ptr2`已经放弃了对`object 2`的所有权。'
- en: The ownership of `object 1` will be transferred to `ptr2`.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`object 1`的所有权将被转移给`ptr2`。'
- en: At this point, `ptr1` is neither pointing to `object 1`, nor it is responsible
    for managing the memory used by `object 1`.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此时，`ptr1`既不指向`object 1`，也不负责管理`object 1`使用的内存。
- en: 'The following commented line has got some facts to tell you:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 以下注释行有一些事实要告诉你：
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As the `ptr1` smart pointer has released its ownership of `object 1`, it is
    illegal to attempt accessing the `sayHello()` method. This is because `ptr1`,
    in reality, isn't pointing to `object 1` anymore, and `object 1` is owned by `ptr2`.
    It is the responsibility of the `ptr2` smart pointer to release the memory utilized
    by `object 1` when `ptr2` goes out of scope. If the preceding code is uncommented,
    it would lead to a core dump.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`ptr1`智能指针已经释放了对`object 1`的所有权，因此尝试访问`sayHello()`方法是非法的。这是因为`ptr1`实际上不再指向`object
    1`，而`object 1`由`ptr2`拥有。当`ptr2`超出范围时，释放`object 1`使用的内存是`ptr2`智能指针的责任。如果取消注释前面的代码，将导致核心转储。
- en: 'Finally, the following code lets us invoke the `sayHello()` method on `object
    1` using the `ptr2` smart pointer:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，以下代码让我们使用`ptr2`智能指针在`object 1`上调用`sayHello()`方法：
- en: '[PRE17]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `return` statement we just saw will initiate the stack unwinding process
    in the `main()` function. This will end up invoking the destructor of `ptr2`,
    which in turn will deallocate the memory utilized by `object 1`. The beauty is
    all this happens automatically. The `auto_ptr` smart pointer works hard for us
    behind the scenes while we are focusing on the problem at hand.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚看到的`return`语句将在`main()`函数中启动堆栈展开过程。这将最终调用`ptr2`的析构函数，从而释放`object 1`使用的内存。美妙的是，所有这些都是自动发生的。`auto_ptr`智能指针在我们专注于手头的问题时在幕后为我们努力工作。
- en: 'However, due to the following reasons, `auto_ptr` is deprecated in `C++11`
    onward:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，由于以下原因，从`C++11`开始`auto_ptr`被弃用：
- en: An `auto_ptr` object can't be stored in an STL container
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`auto_ptr`对象不能存储在STL容器中'
- en: The `auto_ptr` copy constructor will remove the ownership from the original
    source, that is, ``auto_ptr``
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`auto_ptr`的复制构造函数将从原始来源，也就是`auto_ptr`中移除所有权。'
- en: The `auto_ptr` copy `assignment` operator will remove the ownership from the
    original source, which is, `auto_ptr`
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`auto_ptr`复制`赋值`运算符将从原始来源，也就是`auto_ptr`中移除所有权。'
- en: The original intention of copy constructor and `assignment` operators are violated
    by `auto_ptr` as the `auto_ptr`  copy constructor and `assignment` operators will
    remove the ownership of the source object from the right-hand side object and
    assign the ownership to the left-hand side object
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`auto_ptr`的复制构造函数和`赋值`运算符违反了原始意图，因为`auto_ptr`的复制构造函数和`赋值`运算符将从右侧对象中移除源对象的所有权，并将所有权分配给左侧对象'
- en: unique_ptr
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: unique_ptr
- en: The `unique_ptr` smart pointer works in exactly the same way as `auto_ptr`,
    except that `unique_ptr` addresses the issues introduced by `auto_ptr`. Hence,
    `unique_ptr` is a replacement of `auto_ptr`, starting from `C++11`. The `unique_ptr` smart
    pointer allows only one smart pointer to exclusively own a heap-allocated object.
    The ownership transfer from one `unique_ptr` instance to another can be done only
    via the `std::move()` function.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`unique_ptr`智能指针的工作方式与`auto_ptr`完全相同，只是`unique_ptr`解决了`auto_ptr`引入的问题。因此，`unique_ptr`是从`C++11`开始取代`auto_ptr`的。`unique_ptr`智能指针只允许一个智能指针独占一个堆分配的对象。从一个`unique_ptr`实例到另一个实例的所有权转移只能通过`std::move()`函数来完成。'
- en: Hence, let's refactor our previous example to make use of `unique_ptr` in place
    of `auto_ptr`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们重构我们之前的示例，使用`unique_ptr`来替代`auto_ptr`。
- en: 'The refactored code sample is as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 重构后的代码示例如下：
- en: '[PRE18]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The output of the preceding program is as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 前面程序的输出如下：
- en: '[PRE19]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In the preceding output, you can notice the compiler doesn't report any warning
    and the output of the program is the same as that of `auto_ptr`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的输出中，您可以注意到编译器没有报告任何警告，并且程序的输出与`auto_ptr`的输出相同。
- en: Code walkthrough
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码演示
- en: 'It is important to note the differences in the `main()` function, between `auto_ptr`
    and `unique_ptr`. Let''s check out the `main()` function, as illustrated in the
    following code. This code creates two instances of `unique_ptr`, namely `ptr1`
    and `ptr2`, that wrap two objects of `MyClass` created in the heap:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意`main()`函数中`auto_ptr`和`unique_ptr`之间的区别。让我们来看看以下代码中`main()`函数。该代码在堆中创建了两个`MyClass`对象的实例，分别是`ptr1`和`ptr2`的两个实例：
- en: '[PRE20]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Next, the following code demonstrates how the methods supported by `MyClass`
    can be invoked using `unique_ptr`:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的代码演示了如何使用`unique_ptr`调用`MyClass`支持的方法：
- en: '[PRE21]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Just like `auto_ptr`, the `unique_ptr` smart pointers `ptr1` object has overloaded
    the `->` pointer operator and the `*` dereferencing operator; hence, it appears
    like a pointer.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 就像`auto_ptr`一样，`unique_ptr`智能指针`ptr1`对象已经重载了`->`指针运算符和`*`解引用运算符；因此，它看起来像一个指针。
- en: 'The following code demonstrates `unique_ptr` doesn''t support the assignment
    of one `unique_ptr` instance to another, and ownership transfer can only be achieved
    with the `std::move()` function:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码演示了`unique_ptr`不支持将一个`unique_ptr`实例分配给另一个实例，所有权转移只能通过`std::move()`函数实现：
- en: '[PRE22]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The `move` function triggers the following activities:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`move`函数触发了以下活动：'
- en: The `ptr2` smart pointer gives up the ownership of the `MyClass` object 2
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ptr2`智能指针放弃了对`MyClass`对象2的所有权'
- en: '`MyClass` object 2 is destructed as `ptr2` gives up its ownership of `object
    2`'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MyClass`对象2将被销毁，因为`ptr2`放弃了对`object 2`的所有权。'
- en: The ownership of `object 1` is transferred to `ptr2`
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`object 1`的所有权已转移到`ptr2`'
- en: At this point, `ptr1` is neither pointing to `object 1`, nor it is responsible
    for managing the memory used by `object 1`
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此时，`ptr1`既不指向`object 1`，也不负责管理`object 1`使用的内存
- en: 'The following code, if uncommented, will lead to a core dump:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果取消注释以下代码，将导致核心转储：
- en: '[PRE23]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Finally, the following code lets us invoke the `sayHello()` method on `object
    1` using the `ptr2` smart pointer:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，以下代码让我们使用`ptr2`智能指针调用`object 1`的`sayHello()`方法：
- en: '[PRE24]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `return` statement we just saw will initiate the stack unwinding process
    in the `main()` function. This will end up invoking the destructor of `ptr2`,
    which in turn will deallocate the memory utilized by `object 1`. Note that `unique_ptr` objects
    could be stored in STL containers, unlike `auto_ptr` objects.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚看到的`return`语句将在`main()`函数中启动堆栈展开过程。这将最终调用`ptr2`的析构函数，从而释放`object 1`使用的内存。请注意，与`auto_ptr`对象不同，`unique_ptr`对象可以存储在STL容器中。
- en: shared_ptr
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: shared_ptr
- en: The `shared_ptr` smart pointer is used when a group of `shared_ptr` objects
    shares the ownership of a heap-allocated object. The `shared_ptr` pointer releases
    the shared object when all the `shared_ptr` instances are done with the use of
    the shared object. The `shared_ptr` pointer uses the reference counting mechanism
    to check the total references to the shared object; whenever the reference count
    becomes zero, the last `shared_ptr` instance deletes the shared object.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当一组`shared_ptr`对象共享对堆分配对象的所有权时，使用`shared_ptr`智能指针。当所有`shared_ptr`实例完成对共享对象的使用时，`shared_ptr`指针释放共享对象。`shared_ptr`指针使用引用计数机制来检查对共享对象的总引用；每当引用计数变为零时，最后一个`shared_ptr`实例将删除共享对象。
- en: 'Let''s check out the use of `shared_ptr` through an example, as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个示例来检查`shared_ptr`的使用，如下所示：
- en: '[PRE25]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The output of the preceding program is as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 前面程序的输出如下：
- en: '[PRE26]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Code walkthrough
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码演示
- en: 'The following code creates an instance of the `shared_ptr` object that points
    to the `MyClass` heap-allocated object. Just like other smart pointers, `shared_ptr`
    also has the overloaded `->` and `*` operators. Hence, all the `MyClass` object
    methods can be invoked as though you are using a raw pointer. The `use_count()`
    method tells the number of smart pointers that refer to the shared object:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码创建了一个指向`MyClass`堆分配对象的`shared_ptr`对象实例。就像其他智能指针一样，`shared_ptr`也有重载的`->`和`*`运算符。因此，可以调用所有`MyClass`对象方法，就像使用原始指针一样。`use_count()`方法告诉指向共享对象的智能指针数量：
- en: '[PRE27]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In the following code, the scope of the smart pointer `ptr2` is wrapped within
    the block enclosed by flower brackets. Hence, `ptr2` will get destroyed at the
    end of the following code block. The expected `use_count` function within the
    code block is 2:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，智能指针`ptr2`的作用域被花括号包围的块内部。因此，`ptr2`将在以下代码块的末尾被销毁。代码块内预期的`use_count`函数为2：
- en: '[PRE28]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In the following code, the expected `use_count` value is 1 as `ptr2` would
    have been deleted, which would reduce the reference count by 1:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，预期的`use_count`值为1，因为`ptr2`已被删除，这将减少引用计数1：
- en: '[PRE29]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The following code will print a Hello message, followed by `use_count` as 2\.
    This is due to the fact that `ptr1` and `ptr3` are now referring to the `MyClass`
    shared object in the heap:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将打印一个Hello消息，然后`use_count`为2。这是因为`ptr1`和`ptr3`现在引用堆中的`MyClass`共享对象：
- en: '[PRE30]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The `return 0;` statement at the end of the `main` function will destroy `ptr1`
    and `ptr3`, reducing the reference count to zero. Hence, we can observe the `MyClass`
    destructor print the statement at the end of the output.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在`main`函数末尾的`return 0;`语句将销毁`ptr1`和`ptr3`，将引用计数减少到零。因此，我们可以观察到`MyClass`析构函数在输出末尾打印语句。
- en: weak_ptr
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: weak_ptr
- en: So far, we have discussed the positive side of `shared_ptr` with examples. However,
    `shared_ptr` fails to clean up the memory when there is a circular dependency
    in the application design. Either the application design must be refactored to
    avoid cyclic dependency, or we can make use of `weak_ptr` to resolve the cyclic
    dependency issue.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经讨论了`shared_ptr`的正面作用，并举例说明。然而，当应用程序设计中存在循环依赖时，`shared_ptr`无法清理内存。要么必须重构应用程序设计以避免循环依赖，要么可以使用`weak_ptr`来解决循环依赖问题。
- en: You can check out my YouTube channel to understand the `shared_ptr` issue and
    how it can be resolved with `weak_ptr`: [https://www.youtube.com/watch?v=SVTLTK5gbDc](https://www.youtube.com/watch?v=SVTLTK5gbDc).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以查看我的YouTube频道，了解`shared_ptr`问题以及如何使用`weak_ptr`解决：[https://www.youtube.com/watch?v=SVTLTK5gbDc](https://www.youtube.com/watch?v=SVTLTK5gbDc)。
- en: 'Consider there are three classes: A, B, and C. Class A and B have an instance
    of C, while C has an instance of A and B. There is a design issue here. A depends
    on C and C depends on A too. Similarly, B depends on C and C depends on B as well.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 假设有三个类：A、B和C。类A和B有一个C的实例，而C有A和B的实例。这里存在一个设计问题。A依赖于C，C也依赖于A。同样，B依赖于C，C也依赖于B。
- en: 'Consider the following code:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下代码：
- en: '[PRE31]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The output of the preceding program is as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 前面程序的输出如下：
- en: '[PRE32]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: In the preceding output, you can observe that even though we used `shared_ptr`,
    the memory utilized by objects A, B, and C were never deallocated. This is because
    we didn't see the destructor of the respective classes being invoked. The reason
    for this is that `shared_ptr` internally makes use of the reference counting algorithm
    to decide whether the shared object has to be destructed. However, it fails here
    because object A can't be deleted unless object C is deleted. Object C can't be
    deleted unless object A is deleted. Also, object C can't be deleted unless objects
    A and B are deleted. Similarly, object A can't be deleted unless object C is deleted
    and object B can't be deleted unless object C is deleted.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的输出中，您可以观察到，即使我们使用了`shared_ptr`，对象A、B和C使用的内存也从未被释放。这是因为我们没有看到各自类的析构函数被调用。原因是`shared_ptr`在内部使用引用计数算法来决定是否共享对象必须被销毁。然而，在这里它失败了，因为除非对象C被删除，否则无法删除对象A。除非删除对象A，否则无法删除对象C。同样，除非删除对象A和B，否则无法删除对象C。同样，除非删除对象C，否则无法删除对象A，除非删除对象C，否则无法删除对象B。
- en: The bottom line is that this is a circular dependency design issue. In order
    to fix this issue, starting from C++11, C++ introduced `weak_ptr`. The `weak_ptr` smart
    pointer is not a strong reference. Hence, the object referred to could be deleted
    at any point of time, unlike `shared_ptr`.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 底线是这是一个循环依赖设计问题。为了解决这个问题，从C++11开始，C++引入了`weak_ptr`。`weak_ptr`智能指针不是强引用。因此，所引用的对象可以在任何时候被删除，不像`shared_ptr`。
- en: Circular dependency
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 循环依赖
- en: 'Circular dependency is an issue that occurs if object A depends on B, and object
    B depends on A. Now let''s see how this issue could be fixed with a combination
    of `shared_ptr` and `weak_ptr`, eventually breaking the circular dependency, as
    follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 循环依赖是一个问题，如果对象A依赖于B，而对象B又依赖于A。现在让我们看看如何通过`shared_ptr`和`weak_ptr`的组合来解决这个问题，最终打破循环依赖，如下所示：
- en: '[PRE33]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The output of the preceding refactored code is as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 前面重构代码的输出如下：
- en: '[PRE34]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Summary
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了
- en: Memory leak issues that arise due to raw pointers
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于原始指针而引起的内存泄漏问题
- en: The issues of `auto_ptr` with respect to assignment and copy constructor
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于`auto_ptr`在赋值和复制构造函数方面的问题
- en: '`unique_ptr` and it''s advantage'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unique_ptr`及其优势'
- en: Role of `shared_ptr` in memory management and its limitation related to cyclic
    dependency.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shared_ptr`在内存管理中的作用及其与循环依赖相关的限制。'
- en: You also resolving cyclic dependency issues with `weak_ptr`
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您还将使用`weak_ptr`解决循环依赖问题
- en: In the next chapter, you will learn about developing GUI applications in C++.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何在C++中开发GUI应用程序。
