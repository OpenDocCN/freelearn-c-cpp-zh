["```cpp\nauto allLines = [](const auto& board) {\n...\n};\n\nauto allColumns = [](const auto& board) {\n...\n};\n\nauto mainDiagonal = [](const auto& board){\n...\n};\n\nauto secondaryDiagonal = [](const auto& board){\n ...\n};\n\nauto allDiagonals = [](const auto& board) -> Lines {\n...\n};\n\nauto allLinesColumnsAndDiagonals = [](const auto& board) {\n ...\n};\n```", "```cpp\n    Board board {\n        {'X', 'X', 'X'},\n        {' ', 'O', ' '},\n        {' ', ' ', 'O'}\n    };\n```", "```cpp\nauto bindAllToBoard = [](const auto& board){\n    return map<string, function<Lines  ()>>{\n        {\"allLinesColumnsAndDiagonals\",   \n            bind(allLinesColumnsAndDiagonals, board)},\n    };\n};\n```", "```cpp\nTEST_CASE(\"all lines, columns and diagonals with class-like structure\"){\n    Board board{\n        {'X', 'X', 'X'},\n        {' ', 'O', ' '},\n        {' ', ' ', 'O'}\n    };\n\n    Lines expected{\n        {'X', 'X', 'X'},\n        {' ', 'O', ' '},\n        {' ', ' ', 'O'},\n        {'X', ' ', ' '},\n        {'X', 'O', ' '},\n        {'X', ' ', 'O'},\n        {'X', 'O', 'O'},\n        {'X', 'O', ' '}\n    };\n\n    auto boardObject = bindAllToBoard(board);\n    auto all = boardObject[\"allLinesColumnsAndDiagonals\"]();\n    CHECK_EQ(expected, all);\n}\n```", "```cpp\nclass BoardResult{\n    private:\n        const vector<Line> board;\n\n    public:\n        BoardResult(const vector<Line>& board) : board(board){\n        };\n\n         Lines allLinesColumnsAndDiagonals() const {\n             return concatenate3(allLines(board), allColumns(board),  \n                 allDiagonals(board));\n        }\n};\n\nTEST_CASE(\"all lines, columns and diagonals\"){\n BoardResult boardResult{{\n {'X', 'X', 'X'},\n {' ', 'O', ' '},\n {' ', ' ', 'O'}\n }};\n\n Lines expected {\n {'X', 'X', 'X'},\n {' ', 'O', ' '},\n {' ', ' ', 'O'},\n {'X', ' ', ' '},\n {'X', 'O', ' '},\n {'X', ' ', 'O'},\n {'X', 'O', 'O'},\n {'X', 'O', ' '}\n };\n\n auto all = boardResult.allLinesColumnsAndDiagonals();\n CHECK_EQ(expected, all);\n}\n```", "```cpp\nusing Coordinate = pair<int, int>;\n\nauto accessAtCoordinates = [](const auto& board, const Coordinate& coordinate)\nauto mainDiagonalCoordinates = [](const auto& board)\nauto secondaryDiagonalCoordinates = [](const auto& board)\nauto columnCoordinates = [](const auto& board, const auto& columnIndex)\nauto lineCoordinates = [](const auto& board, const auto& lineIndex)\nauto projectCoordinates = [](const auto& board, const auto& coordinates)\n```", "```cpp\nclass Calculator{\n    private:\n        int first;\n        int second;\n\n    public:\n        Calculator(int first, int second): first(first), second(second){}\n\n        int add() const {\n            return first + second;\n        }\n\n        int multiply() const {\n            return first * second;\n        }\n\n        int mod() const {\n            return first % second;\n        }\n\n};\n\nTEST_CASE(\"Adds\"){\n    Calculator calculator(1, 2);\n\n    int result = calculator.add();\n\n    CHECK_EQ(result, 3);\n}\n\nTEST_CASE(\"Multiplies\"){\n    Calculator calculator(3, 2);\n\n    int result = calculator.multiply();\n\n    CHECK_EQ(result, 6);\n}\n\nTEST_CASE(\"Modulo\"){\n    Calculator calculator(3, 2);\n\n    int result = calculator.mod();\n\n    CHECK_EQ(result, 1);\n}\n```", "```cpp\nclass Calculator{\n...\n    int negateInt() const {\n        return -first;\n    }\n...\n}\n\nTEST_CASE(\"Revert\"){\n    Calculator calculator(3, 2);\n\n    int result = calculator.negateInt();\n\n    CHECK_EQ(result, -3);\n}\n```", "```cpp\nauto add = [](const auto first, const auto second){\n    return first + second;\n};\n\nauto multiply = [](const auto first, const auto second){\n    return first * second;\n};\n\nauto mod = [](const auto first, const auto second){\n    return first % second;\n};\n\nauto negateInt = [](const auto value){\n    return -value;\n};\n```", "```cpp\nauto initialize = [] (const auto first, const auto second) -> map<string, function<int()>>{\n    return  {\n        {\"add\", bind(add, first, second)},\n        {\"multiply\", bind(multiply, first, second)},\n        {\"mod\", bind(mod, first, second)},\n        {\"revert\", bind(revert, first)}\n    };\n};\n```", "```cpp\nTEST_CASE(\"Adds\"){\n    auto calculator = initialize(1, 2);\n\n    int result = calculator[\"add\"]();\n\n    CHECK_EQ(result, 3);\n}\n\nTEST_CASE(\"Multiplies\"){\n    auto calculator = initialize(3, 2);\n\n    int result = calculator[\"multiply\"]();\n\n    CHECK_EQ(result, 6);\n}\n\nTEST_CASE(\"Modulo\"){\n    auto calculator = initialize(3, 2);\n\n    int result = calculator[\"mod\"]();\n\n    CHECK_EQ(result, 1);\n}\n\nTEST_CASE(\"Revert\"){\n    auto calculator = initialize(3, 2);\n\n    int result = calculator[\"revert\"]();\n\n    CHECK_EQ(result, -3);\n}\n\n```"]