["```cpp\nvoid glBufferData(GLenum target, GLsizeiptr size, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0void * data, GLenum usage);\n```", "```cpp\nvoid glVertexAttribPointer(GLuint index, GLint size, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 GLenum type, GLboolean normalized,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 GLsizei stride, void * pointer);\n```", "```cpp\nvector<float> GetPositions(const GLTFAccessor& accessor) {\n\u00a0\u00a0\u00a0\u00a0// Accessors and sanity checks\n\u00a0\u00a0\u00a0\u00a0assert(!accessor.isSparse);\n\u00a0\u00a0\u00a0\u00a0const GLTFBufferView& bufferView = accessor.bufferView;\n\u00a0\u00a0\u00a0\u00a0const GLTFBuffer& buffer = bufferView.buffer;\n\u00a0\u00a0\u00a0\u00a0// Resize result\n\u00a0\u00a0\u00a0\u00a0// GetNumComponents Would return 3 for a vec3, etc.\n\u00a0\u00a0\u00a0\u00a0uint numComponents = GetNumComponents(accessor); \n\u00a0\u00a0\u00a0\u00a0vector<float> result;\n\u00a0\u00a0\u00a0\u00a0result.resize(accessor.count * numComponents);\n\u00a0\u00a0\u00a0\u00a0// Loop trough every element in the accessor\n\u00a0\u00a0\u00a0\u00a0for (uint i = 0; i < accessor.count; ++i) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Find where in the buffer the data actually starts\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0uint offset = accessor.offset + bufferView.offset;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0uint8* data = buffer.data;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data += offset + accessor.stride * i;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Loop trough every component of current element\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0float* target = result[i] * componentCount;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (uint j = 0; j < numComponents; ++j) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Omitting normalization \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Omitting different storage types\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0target[j] = data + componentCount * j;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} // End loop of every component of current element\n\u00a0\u00a0\u00a0\u00a0} // End loop of every accessor element\n\u00a0\u00a0\u00a0\u00a0return result;\n}\n```", "```cpp\n#pragma warning(disable : 26451)\n#define _CRT_SECURE_NO_WARNINGS\n#define CGLTF_IMPLEMENTATION\n#include \"cgltf.h\"\n```", "```cpp\n    #ifndef _H_GLTFLOADER_\n    #define _H_GLTFLOADER_\n    #include \"cgltf.h\"\n    cgltf_data* LoadGLTFFile(const char* path);\n    void FreeGLTFFile(cgltf_data* handle);\n    #endif\n    ```", "```cpp\n    cgltf_data* LoadGLTFFile(const char* path) {\n    \u00a0\u00a0\u00a0\u00a0cgltf_options options;\n    \u00a0\u00a0\u00a0\u00a0memset(&options, 0, sizeof(cgltf_options));\n    \u00a0\u00a0\u00a0\u00a0cgltf_data* data = NULL;\n    \u00a0\u00a0\u00a0\u00a0cgltf_result result = cgltf_parse_file(&options, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0path, &data);\n    \u00a0\u00a0\u00a0\u00a0if (result != cgltf_result_success) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \"Could not load: \" << path << \"\\n\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 0;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0result = cgltf_load_buffers(&options, data, path);\n    \u00a0\u00a0\u00a0\u00a0if (result != cgltf_result_success) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cgltf_free(data);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \"Could not load: \" << path << \"\\n\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 0;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0result = cgltf_validate(data);\n    \u00a0\u00a0\u00a0\u00a0if (result != cgltf_result_success) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cgltf_free(data);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \"Invalid file: \" << path << \"\\n\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 0;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0return data;\n    }\n    ```", "```cpp\n    void FreeGLTFFile(cgltf_data* data) {\n    \u00a0\u00a0\u00a0\u00a0if (data == 0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \"WARNING: Can't free null data\\n\";\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cgltf_free(data);\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```"]