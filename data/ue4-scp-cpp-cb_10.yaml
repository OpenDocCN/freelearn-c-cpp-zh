- en: Chapter 10. AI for Controlling NPCs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。控制NPC的AI
- en: 'The role of **Artificial Intelligence** (**AI**) in your game is quite important.
    In this chapter, we''ll cover the following recipes for controlling your **NPC**
    characters with a bit of AI:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在游戏中，"人工智能"（AI）的角色非常重要。在本章中，我们将介绍以下用于控制NPC角色的AI的配方：
- en: Laying down a Navigation Mesh
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 放置导航网格
- en: Following behavior
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遵循行为
- en: Connecting a Behavior Tree to a Character
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将行为树连接到角色
- en: Constructing Task nodes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建任务节点
- en: Using Decorators for conditions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用装饰器进行条件判断
- en: Using periodic services
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用周期性服务
- en: Using Composite nodes – Selectors, Sequences, and Simple Parallel
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用复合节点-选择器、序列和简单并行
- en: AI for a Melee Attacker
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 近战攻击者的AI
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: AI includes many aspects of a game's NPC as well as player behavior. The general
    topic of AI includes pathfinding and NPC behavior. Generally, we term the selection
    of what the NPC does for a period of time within the game as behavior.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: AI包括游戏的NPC以及玩家行为的许多方面。AI的一般主题包括寻路和NPC行为。通常，我们将NPC在游戏中的一段时间内所做的选择称为行为。
- en: AI in UE4 is well supported. A number of constructs exist to allow basic AI
    programming from within the editor. If the AI provided inside the engine doesn't
    suit your needs, custom AI programming from C++ can also be used.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: UE4中的AI得到了很好的支持。编辑器内部提供了许多构造，允许进行基本的AI编程。如果引擎内提供的AI不符合您的需求，还可以使用C++进行自定义AI编程。
- en: Laying down a Navigation Mesh
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 放置导航网格
- en: A Navigation Mesh (also known as a **Nav Mesh**) is basically a definition of
    areas that an AI-controlled unit considers passable (that is, areas which the
    "AI-controlled" unit is allowed to move into or across). A Nav Mesh does not include
    geometry that would block the player if the player tried to move through it.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 导航网格（也称为"Nav Mesh"）基本上是AI控制单位认为可通过的区域的定义（即，"AI控制"单位被允许进入或穿越的区域）。导航网格不包括如果玩家试图穿过它移动的几何体。
- en: Getting ready
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Constructing a Nav Mesh based on your scene's geometry is fairly easy in UE4\.
    Start with a project that has some obstacles around it, or one that uses a terrain.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 根据场景的几何形状构建导航网格在UE4中相当简单。从一些障碍物周围开始，或者使用一个地形。
- en: How to do it...
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'To construct your Nav Mesh, simply perform the following steps:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建导航网格，只需执行以下步骤：
- en: Go to **Modes** | **Volumes**.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到"模式" | "体积"。
- en: Drag **Nav Mesh Bounds Volume** onto your viewport.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将导航网格边界体拖放到视口中。
- en: Tip
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Press the *P* key to view your Nav Mesh.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 按下P键查看您的导航网格。
- en: Scale the Nav Mesh out to cover the area that the actors that use the Nav Mesh
    should be allowed to navigate and pathfind in.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将导航网格的范围扩大到允许使用导航网格的角色可以导航和路径规划的区域。
- en: How it works…
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: A Nav Mesh doesn't block the player pawn (or other entities) from stepping on
    certain geometry, but it serves to guide AI-controlled entities regarding where
    they can and cannot go.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 导航网格不会阻止玩家角色（或其他实体）踩在特定的几何体上，但它可以指导AI控制的实体在哪里可以去，哪里不能去。
- en: Following behavior
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 遵循行为
- en: The most basic AI-controlled follow behavior is available as a simple function
    node. All you have to do is perform the steps that follow to get one AI-controlled
    unit to follow a unit or object.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 最基本的AI控制跟随行为可以作为一个简单的函数节点使用。您只需要执行以下步骤，就可以让一个AI控制的单位跟随一个单位或对象。
- en: Getting ready
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Have a UE4 project ready with a simple landscape or set of geometry on the ground—
    ideally, with a *cul-de-sac* somewhere in the geometry for testing out AI movement
    functions. Create a Nav Mesh over this geometry so that the `AIMoveTo` function
    will work as described in the previous recipe.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 准备一个UE4项目，其中包含一个简单的地形或一组地形-理想情况下，地形中有一个"死胡同"，用于测试AI移动功能。在这个地形上创建一个导航网格，以便"AIMoveTo"函数可以按照前面的配方描述的方式工作。
- en: How to do it…
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Create a Nav Mesh for your level's geometry as described in the preceding recipe,
    *Laying down a Navigation Mesh*.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据前面的步骤，为您的关卡几何体创建一个导航网格，即"放置导航网格"中所述。
- en: Create a Blueprint class deriving from `Character` by finding the `Character`
    class in the **Class Viewer**, right-clicking on it, and selecting **Create Blueprint
    Class…**
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在"类查看器"中找到"Character"类，右键单击它，并选择"创建蓝图类..."，创建一个从"Character"派生的蓝图类。
- en: Name your Blueprint class `BP_Follower`.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的蓝图类命名为"BP_Follower"。
- en: Double-click on the `BP_Follower` class to edit its Blueprint.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击"BP_Follower"类以编辑其蓝图。
- en: In the `Tick` event, add an `AIMoveTo` node, which moves towards the player
    pawn (or any other unit) as follows:![How to do it…](img/00244.jpeg)
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在"Tick"事件中，添加一个"AIMoveTo"节点，该节点向玩家角色（或任何其他单位）移动，如下所示：![如何做到这一点...](img/00244.jpeg)
- en: How it works…
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `AIMoveTo` node will automatically use a Nav Mesh if one is available. If
    a Nav Mesh is not available, then the NPC unit won't move.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有可用的导航网格，"AIMoveTo"节点将自动使用导航网格。如果没有可用的导航网格，NPC单位将不会移动。
- en: There's more…
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: If you do not want the unit to move with pathfinding using the Nav Mesh, then
    simply use a **Move To Location or Actor** node.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不希望单位使用导航网格进行路径规划移动，只需使用"移动到位置或角色"节点即可。
- en: '![There''s more…](img/00245.jpeg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/00245.jpeg)'
- en: A **Move To Location or Actor** node works even without a Nav Mesh on the geometry.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在几何体上没有导航网格，"移动到位置或角色"节点也可以工作。
- en: Connecting a Behavior Tree to a Character
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将行为树连接到角色
- en: A `BehaviorTree` chooses a behavior to be exhibited by an AI-controlled unit
    at any given moment in time. Behavior Trees are relatively simple to construct,
    but there is a lot of setting up to do to get one running. You also have to be
    familiar with the components available for constructing your **Behavior Tree**
    to do so effectively.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何给定的时间点，"行为树"会选择一个AI控制单位要展示的行为。行为树相对简单，但需要进行大量的设置才能运行。您还必须熟悉用于构建"行为树"的组件，以便有效地进行设置。
- en: A Behavior Tree is extremely useful for defining NPC behavior that is more varied
    than simply moving towards an opponent (as shown in the previous recipe with `AIMoveTo`).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 行为树非常有用，可以定义NPC的行为，使其比仅仅向对手移动（如前面的`AIMoveTo`示例）更加多样化。
- en: Getting ready
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: The process of setting up a Behavior Tree to control a character is fairly complicated.
    The first thing we need is a Blueprint of a `Character` class derivative to control.
    We then need to create a custom AI Controller object that will run our Behavior
    Tree to control our Melee attacker character. The `AIController` class inside
    our Blueprint will run our Behavior Tree.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 设置控制角色的行为树的过程相当复杂。我们首先需要一个`Character`类派生类的蓝图来进行控制。然后，我们需要创建一个自定义的AI控制器对象，该对象将运行我们的行为树来控制我们的近战攻击者角色。我们的蓝图中的`AIController`类将运行我们的行为树。
- en: '![Getting ready](img/00246.jpeg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/00246.jpeg)'
- en: The Behavior Tree itself contains a very important data structure called a **Blackboard**.
    The Blackboard is like a chalkboard for containing variable values for the Behavior
    Tree.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 行为树本身包含一个非常重要的数据结构，称为**黑板**。黑板类似于一个黑板，用于存储行为树的变量值。
- en: 'A Behavior Tree hosts six different types of node, which are as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 行为树包含六种不同类型的节点，如下所示：
- en: '**Task**: Task nodes are the purple nodes in the Behavior Tree that contain
    Blueprint code to run. It''s something that the AI-controlled unit has to do (code-wise).
    Tasks must return either `true` or `false`, depending on whether the task succeeded
    or not (by providing a `FinishExecution()` node at the end).![Getting ready](img/00247.jpeg)'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**任务**：任务节点是行为树中的紫色节点，包含要运行的蓝图代码。这是AI控制的单位必须要做的事情（代码方面）。任务必须返回`true`或`false`，取决于任务是否成功（通过在末尾提供`FinishExecution()`节点）。![准备就绪](img/00247.jpeg)'
- en: '**Decorator**: A decorator is just a Boolean condition for the execution of
    a node. It checks a condition, and is typically used within a Selector or Sequence
    block.![Getting ready](img/00248.jpeg)'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**修饰器**：修饰器只是节点执行的布尔条件。它检查一个条件，通常在选择器或序列块中使用。![准备就绪](img/00248.jpeg)'
- en: '**Service**: Runs some Blueprint code when it ticks. The tick interval for
    these nodes is adjustable (can run slower than a per-frame tick, for example,
    every 10 seconds). You can use these to query the scene for updates, or a new
    opponent to chase, or things like that. The Blackboard can be used to store queried
    information. Service nodes do not have a `FinishExecute()` call at the end. There
    is an example Service node in the Sequence node in the preceding diagram.'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**服务**：在每次执行时运行一些蓝图代码。这些节点的执行间隔是可调节的（可以比每帧执行慢，例如每10秒执行一次）。您可以使用这些节点查询场景更新，或者追逐新的对手等等。黑板可以用来存储查询到的信息。服务节点在末尾没有`FinishExecute()`调用。在前面的图表中的序列节点中有一个示例服务节点。'
- en: '**Selector**: Runs all subtrees from left to right until it encounters a success.
    When it encounters a success, execution returns back up the tree.'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**选择器**：从左到右运行所有子树，直到遇到成功。遇到成功后，执行返回到树的上层。'
- en: '**Sequence**: Runs subtrees from left to right until it encounters a failure.
    When a failure is encountered, execution goes back up the tree.![Getting ready](img/00249.jpeg)'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**序列**：从左到右运行子树，直到遇到失败。遇到失败后，执行返回到树的上层。![准备就绪](img/00249.jpeg)'
- en: Note
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Selector nodes attempt to execute nodes until success (after which it returns),
    while Sequence nodes execute all until a failure is encountered (after which it
    returns).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 选择器节点尝试执行节点，直到成功（然后返回），而序列节点执行所有节点，直到遇到失败（然后返回）。
- en: Keep in mind that if your Tasks do not call `FinishExecute()`, neither Selectors
    nor Sequences will be able to run more than one of them in succession.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，如果您的任务没有调用`FinishExecute()`，选择器和序列将无法连续运行多个任务。
- en: '**Simple Parallel**: Runs a single task (purple) in parallel with a subtree
    (gray).![Getting ready](img/00250.jpeg)'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**简单并行**：在并行运行一个任务（紫色）和一个子树（灰色）。![准备就绪](img/00250.jpeg)'
- en: How to do it...
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Begin by creating a Blueprint for your Melee unit inside UE4\. You should do
    so by deriving a custom Blueprint from `Character`. To do so, go to the **Class
    Viewer**, type `Character`, and right-click. Select **Create Blueprint…** from
    the context menu that appears and name your Blueprint class `BP_MeleeCharacter`.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在UE4中为您的近战单位创建一个蓝图。您可以通过从`Character`派生一个自定义蓝图来实现。要这样做，请转到**类查看器**，输入`Character`，然后右键单击。从出现的上下文菜单中选择**创建蓝图...**，并将您的蓝图类命名为`BP_MeleeCharacter`。
- en: To use a Behavior Tree, we need to start by setting up a custom AI Controller
    for our `Character` class derivative. Go to **Content Browser** and derive a Blueprint
    from the `AIController` class—be sure to turn off **Filters** | **Actors only**
    first!
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用行为树，我们需要首先为我们的`Character`类派生类设置一个自定义AI控制器。转到**内容浏览器**，从`AIController`类派生一个蓝图，确保首先关闭**过滤器**
    | **仅限角色**！
- en: Note
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Non-actor class derivatives are not shown by default in the **Class Viewer**!
    To make the `AIController` class show, you need to go to the **Filters** menu
    and uncheck the **Actors only** menu option.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 非actor类的派生类默认情况下不显示在**类查看器**中！要显示`AIController`类，您需要转到**过滤器**菜单并取消选中**仅限角色**菜单选项。
- en: Create your Behavior Tree and Blackboard objects by right-clicking in **Content
    Browser** and selecting **Artificial Intelligence** | **Behavior Tree** and **Artificial
    Intelligence** | **Blackboard**.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在**内容浏览器**中右键单击并选择**人工智能** | **行为树**和**人工智能** | **黑板**来创建您的行为树和黑板对象。
- en: Open the **Behavior Tree** object, and under **Blackboard Asset** in the **Details**
    panel, select the Blackboard that you've created. Blackboards contain keys and
    values (named variables) for your Behavior Tree to use.![How to do it...](img/00251.jpeg)
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**行为树**对象，在**详细信息**面板的**黑板资产**下，选择您创建的黑板。黑板包含用于行为树的键和值（命名变量）。![如何操作...](img/00251.jpeg)
- en: Open your `BP_AIMeleeController` class derivative and go to the Event Graph.
    Under **Event BeginPlay**, select and add a **Run Behavior Tree** node to the
    graph. Under `BTAsset`, be sure to select your `BehaviorTree_FFA_MeleeAttacker`
    asset.![How to do it...](img/00252.jpeg)
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的`BP_AIMeleeController`类派生类并转到事件图。在**事件BeginPlay**下，选择并添加一个**运行行为树**节点到图表中。在`BTAsset`下，确保选择您的`BehaviorTree_FFA_MeleeAttacker`资源。![操作步骤...](img/00252.jpeg)
- en: How it works…
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: A Behavior Tree is connected to an AI Controller, which in turn is connected
    to a Blueprint of a Character. We will control the behavior of `Character` through
    the Behavior Tree by entering Task and Service nodes to the diagram.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 行为树连接到AI控制器，而AI控制器连接到角色的蓝图。我们将通过在图表中输入任务和服务节点来通过行为树控制`Character`的行为。
- en: Constructing Task nodes
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建任务节点
- en: Task nodes are like function blocks. Each Task node you construct will allow
    you to bundle up some Blueprint code for execution when certain conditions in
    your Behavior Tree are met.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 任务节点类似于函数块。您构建的每个任务节点都将允许您将一些蓝图代码捆绑在一起，以在行为树中满足某些条件时执行。
- en: 'Tasks have three distinct events: Receive Tick (with AI version), Receive Execute
    (AI), and Receive Abort (AI). You can respond to any of these three events in
    the Task''s Blueprint. Usually, you should respond to the Receive Execute (AI
    version) of the Task.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 任务有三个不同的事件：接收Tick（带有AI版本），接收执行（AI）和接收中止（AI）。您可以在任务的蓝图中响应这三个事件中的任何一个。通常，您应该响应任务的接收执行（AI版本）。
- en: Getting ready
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To create a Task node, you should already have a Behavior Tree ready and attached
    to an appropriate AI Controller and Blueprinted Character (see previous recipe).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个任务节点，您应该已经准备好一个行为树，并将其附加到适当的AI控制器和蓝图角色上（参见前面的示例）。
- en: How to do it…
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: To construct a Task node with an executable Blueprint code inside it, you must
    select **New Task** from the menu bar from our **Behavior Tree** Blueprint editor.
    From the drop-down menu that appears, select to base your **New Task** on `BTTask_BlueprintBase`.![How
    to do it…](img/00253.jpeg)
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在任务节点中构建可执行的蓝图代码，您必须从我们的行为树蓝图编辑器的菜单栏中选择**新任务**。从出现的下拉菜单中，选择以`BTTask_BlueprintBase`为基础的**新任务**。![操作步骤...](img/00253.jpeg)
- en: Tip
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Unlike Behavior Tree or Blackboard creation, there isn't a way to create a **New
    Task** directly from the **Content Browser**.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 与行为树或黑板创建不同，没有直接从**内容浏览器**创建**新任务**的方法。
- en: 'Double-click and open the Behavior Tree task that you''ve just created to edit
    it. Override any of the available events (listed in the **Functions** subheading
    under the **My Blueprint** tab):'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击打开刚刚创建的行为树任务以进行编辑。覆盖任何可用事件（在**我的蓝图**选项卡下的**函数**子标题中列出）：
- en: '**Receive Tick AI**: The AI version of the `Tick` event for the Behavior Tree
    Task. You should override this function when you need your task to `Tick` with
    the actor that contains it. Do not override this function if you only want your
    task to execute when it is called by the Behavior Tree (not when the game engine
    ticks).'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**接收Tick AI**：行为树任务的`Tick`事件的AI版本。当您需要任务与包含它的角色一起进行`Tick`时，应该覆盖此函数。如果您只希望任务在行为树调用它时执行（而不是在游戏引擎进行Tick时执行），请不要覆盖此函数。'
- en: '**Receive Execute AI**: The main function that you want to override. Receive
    Execute AI allows you to run some Blueprint code whenever the Task node is invoked
    from the Behavior Tree diagram.'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**接收执行AI**：您要覆盖的主要函数。接收执行AI允许您在从行为树图表中调用任务节点时运行一些蓝图代码。'
- en: '**Receive Abort AI**: An abortion on a Behavior Tree task is called when the
    task is being aborted (by a `FinishAbort()` node call from the Blueprints diagram).'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**接收中止AI**：当任务被中止时调用的行为树任务中止。当蓝图图表中的`FinishAbort()`节点调用时，应该覆盖此函数。'
- en: Tip
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'There are non-AI versions of the preceding functions, which have just differing
    arguments: In the `*AI` version, the owner object is cast as a `Pawn`, and there
    is an Owner Controller passed along to the event call.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的函数还有非AI版本，它们只是参数有所不同：在`*AI`版本中，所有者对象被强制转换为`Pawn`，并且有一个所有者控制器传递给事件调用。
- en: Using Decorators for conditions
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用装饰器进行条件判断
- en: '**Decorators** are nodes that allow you to enter a conditional expression on
    evaluation of another node. They are fairly oddly named, but they are called Decorators
    because they tend to *dress up* execution nodes with conditions for execution.
    For example, in the following diagram, the `MoveTo` function is only executed
    when the Decorators condition is met:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**装饰器**是一种允许您在评估另一个节点时输入条件表达式的节点。它们的命名相当奇怪，但它们被称为装饰器，因为它们倾向于为执行节点添加执行条件。例如，在下面的图表中，只有在满足装饰器条件时才会执行`MoveTo`函数：'
- en: '![Using Decorators for conditions](img/00254.jpeg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![使用装饰器进行条件判断](img/00254.jpeg)'
- en: There are several pre-packaged Decorators that come with UE4, including Blackboard
    (variable checks), **Compare Blackboard Entries**, **Cone Check**, **Cooldown**,
    **Does Path Exist**, and so on. In this recipe, we explore the use of some of
    these conditionals to control the execution of different branches of a Behavior
    Tree.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: UE4附带了几个预打包的装饰器，包括黑板（变量检查），**比较黑板条目**，**锥体检查**，**冷却时间**，**路径是否存在**等等。在本示例中，我们将探索使用其中一些条件来控制行为树的不同分支的执行。
- en: Getting ready
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The ability to create a Decorator is only available from the menu bar of an
    existing **Behavior Tree**.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在现有**行为树**的菜单栏中才能创建装饰器。
- en: '![Getting ready](img/00255.jpeg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/00255.jpeg)'
- en: Note
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The **New Decorator** button is in the Menu bar of an existing **Behavior Tree**,
    so to find it, you must have an existing **Behavior Tree** open.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**新装饰器**按钮位于现有**行为树**的菜单栏中，因此要找到它，您必须打开现有的**行为树**。'
- en: How to do it…
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: In the Menu bar of an existing **Behavior Tree**, select **New Decorator**.
    Base it on the existing Blueprint, `BTDecorator_BlueprintBase`.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在现有**行为树**的菜单栏中，选择**新装饰器**。以现有蓝图`BTDecorator_BlueprintBase`为基础。
- en: Assemble your Blueprints diagram determining whether or not the Decorator's
    condition is successful under the `PerformConditionCheck` function override.![How
    to do it…](img/00256.jpeg)
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 组装您的蓝图图表，确定装饰器的条件在`PerformConditionCheck`函数覆盖下是否成功。![如何操作...](img/00256.jpeg)
- en: Internals of a Decorator checking if the follow target from the Blackboard is
    inside a bounding sphere of certain radius. Return `true` if the Decorator's condition
    is met (and the block dependent on the Decorator executes), or return `false`
    if the Decorator's condition is not met (and the block dependent on the Decorator
    does not execute).
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 装饰器的内部检查是否跟随黑板中的目标是否在某个半径的边界球内。如果装饰器的条件满足（并且依赖于装饰器的块执行），则返回`true`，否则返回`false`（并且依赖于装饰器的块不执行）。
- en: How it works…
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Decorators are just like `if` statements; the only difference is that they place
    a condition to execute the node directly beneath them in a Behavior Tree.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 装饰器就像`if`语句一样；唯一的区别是它们在行为树中直接在它们下面放置一个条件来执行节点。
- en: Using periodic services
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用周期性服务
- en: '**Services** are nodes that contain Blueprint code to be executed periodically.
    Services are a lot like Tasks, but they do not have a `FinishExecute()` call at
    the end.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**服务**是包含要定期执行的蓝图代码的节点。服务与任务非常相似，但它们没有`FinishExecute()`的调用。'
- en: Getting ready
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Adding Services to your Behavior Tree is essential for periodic checks of things
    such as if there are any new enemy units within range, or if your current target
    left focus. You can create your own Services. In this recipe, we'll assemble a
    Service that will check if the opponent you are following is still the closest
    within a visibility cone. If not, then the opponent changes.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 将服务添加到行为树中对于周期性检查非常重要，例如检查是否有任何新的敌方单位在范围内，或者当前目标是否离开焦点。您可以创建自己的服务。在本教程中，我们将组装一个服务，该服务将检查您正在跟随的对手是否仍然是可见锥体内最近的对手。如果不是，则对手将更改。
- en: 'There are four main events for a Service node (other than Tick):'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 服务节点有四个主要事件（除了Tick）：
- en: '**Receive Activation AI**: Triggers when the Behavior Tree starts and the node
    is first activated.'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**接收激活AI**：当行为树启动并且节点首次激活时触发。'
- en: '**Receive Search Start AI**: Triggers when the Behavior Tree enters the underlying
    branch.'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**接收搜索开始AI**：当行为树进入底层分支时触发。'
- en: '**Receive Tick AI**: Triggers each frame where the Service is invoked. The
    bulk of the work is performed here.'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**接收Tick AI**：在调用服务的每一帧触发。大部分工作在这里完成。'
- en: '**Receive Deactivation AI**: Triggers when the Behavior Tree closes and the
    node is deactivated.'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**接收停用AI**：当行为树关闭并且节点停用时触发。'
- en: How to do it…
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: First, add a **New Service** to your **Behavior Tree** via the **New Service**
    button in the **Behavior Tree** Menu Bar:![How to do it…](img/00257.jpeg)
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，通过**行为树**菜单栏中的**新服务**按钮将**新服务**添加到**行为树**中：![如何操作...](img/00257.jpeg)
- en: Name your Service something that describes what it does, such as `BehaviorTree_Service_CheckTargetStillClosest`.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的服务命名为描述其功能的名称，例如`BehaviorTree_Service_CheckTargetStillClosest`。
- en: Double-click on your Service to begin editing its Blueprint.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击服务以开始编辑其蓝图。
- en: In the editor, add a Receive Tick AI node, and perform any updates to the Blackboard
    that you need.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑器中，添加一个接收Tick AI节点，并对您需要的黑板进行任何更新。
- en: How it works…
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Service nodes execute some Blueprint code at some regularly spaced time-intervals
    (with the option of deviation). Inside a Service node, you will usually update
    your Blackboard.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 服务节点在一些规律的时间间隔（可以有偏差选项）执行一些蓝图代码。在服务节点内部，通常会更新您的黑板。
- en: Using Composite nodes – Selectors, Sequences, and Simple Parallel
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用复合节点 - 选择器、序列和简单并行
- en: 'Composite nodes form tree nodes inside the Behavior Tree, and contain more
    than one thing to execute within them. There are three types of Composite nodes:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 复合节点形成行为树中的树节点，并包含多个要在其中执行的内容。有三种类型的复合节点：
- en: '**Selectors**: Go through children from left to right looking for a successful
    node. If a node fails, it tries the next one. When successful, the node is completed
    and we can go back up the tree.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选择器**：从左到右遍历子节点，寻找成功的节点。如果一个节点失败，它会尝试下一个节点。当成功时，节点完成，我们可以返回树。'
- en: '**Sequence**: Execute from left to right, until a node fails. If the node is
    successful, do the next one. If the node fails, go back up the tree.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**序列**：从左到右执行，直到节点失败。如果节点成功，则执行下一个节点。如果节点失败，则返回树。'
- en: '**Simple Parallel**: Single task (purple) in parallel with some subtree (gray).'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简单并行**：将单个任务（紫色）与某个子树（灰色）并行执行。'
- en: Getting ready
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Using composite nodes is fairly straightforward. You only need a Behavior Tree
    to get started with them.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 使用复合节点非常简单。您只需要一个行为树就可以开始使用它们。
- en: How to do it…
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Right-click anywhere on the blank space in your Behavior Tree diagram.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在行为树图中的空白处右键单击。
- en: Select **Composites** | **Selector or Composites** | **Sequence**.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**复合** | **选择器或复合** | **序列**。
- en: '**Selectors**: Will execute all tasks in series until one succeeds'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选择器**：按顺序执行所有任务，直到成功执行一个任务。'
- en: '**Sequence**: Will execute all tasks in series until one fails'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**序列**：按顺序执行所有任务，直到一个任务失败。'
- en: Append to the node a chain of Tasks or other Composite nodes, as desired.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据需要将一系列任务或其他复合节点附加到节点上。
- en: AI for a Melee Attacker
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 近战攻击者的AI
- en: 'We can use a Behavior Tree to construct an NPC with melee attack behavior.
    The Melee Attacker will have the following behavior:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用行为树构建具有近战攻击行为的NPC。近战攻击者将具有以下行为：
- en: Search for the best opponent to attack every 10 seconds. The best opponent to
    attack is going to be the closest opponent within a `SearchRadius`. We will achieve
    this using a Service. Chalk the opponent we are attacking into the Melee Attacker's
    Behavior Tree Blackboard.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每10秒搜索最佳对手进行攻击。最佳对手是范围内最近的对手。我们将使用一个服务来实现这一点。将我们正在攻击的对手记录在近战攻击者的行为树黑板中。
- en: Move towards the opponent we are attacking (indicated by the Blackboard).
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 朝着我们正在攻击的对手移动（由黑板指示）。
- en: If we are within `AttackRadius` units of the opponent, damage the opponent we
    are attacking every `AttackCooldown` seconds.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们与对手的距离小于`AttackRadius`单位，则每隔`AttackCooldown`秒对正在攻击的对手造成伤害。
- en: Tip
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: This is just one way to attack an opponent using a `BehaviorTree`. You will
    find you can also attack inside an attack animation for the Melee Attacker, in
    which case you could just indicate to Play Animation when within `AttackRadius`
    of the opponent.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是使用`BehaviorTree`攻击对手的一种方式。你会发现你也可以在近战攻击者的攻击动画中进行攻击，在这种情况下，你只需在接近对手的`AttackRadius`范围内指示播放动画。
- en: Getting ready
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Have a Blueprint of a Melee Attacker Character ready. I called mine `BP_Melee`.
    Prepare the `BP_Melee` Character's AI Controller to use a new Behavior Tree that
    we will create next.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 准备一个近战攻击者角色的蓝图。我称之为`BP_Melee`。准备`BP_Melee`角色的AI控制器，以使用我们接下来将创建的新行为树。
- en: How to do it...
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: From the root, we want a node that returns immediately if it fails. Create a
    new Sequence node with a Service called `BehaviorTree_Service_FindOpponent` inside
    it. Put the interval at 10 seconds for the node.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从根节点开始，如果失败则立即返回。在其中创建一个名为`BehaviorTree_Service_FindOpponent`的新序列节点。将节点的间隔设置为10秒。
- en: Build out the `BehaviorTree_Service_FindOpponent` node as follows:![How to do
    it...](img/00258.jpeg)
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下步骤构建`BehaviorTree_Service_FindOpponent`节点：![如何操作...](img/00258.jpeg)
- en: Inside another Behavior Tree node, indicate a per-frame motion towards the follow
    target:![How to do it...](img/00259.jpeg)
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在另一个行为树节点中，指示每帧朝着跟随目标移动：![如何操作...](img/00259.jpeg)
- en: Finally, we'd like to damage the opponent when in `AttackRadius` of him. When
    the player is within `AttackRadius`, you can begin playing the attack animation
    (which could kick off damage events to the opponent), run a Damage Service (every
    `AttackCooldown` seconds), or simply **Cooldown** and **Damage Opponent** as shown
    in the following screenshot:![How to do it...](img/00260.jpeg)
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，当玩家在对手的`AttackRadius`范围内时，我们希望对对手造成伤害。当玩家在`AttackRadius`范围内时，你可以开始播放攻击动画（这可能会触发对对手的伤害事件），运行一个伤害服务（每隔`AttackCooldown`秒），或者如下截图所示简单地进行**冷却**和**对对手造成伤害**：![如何操作...](img/00260.jpeg)
