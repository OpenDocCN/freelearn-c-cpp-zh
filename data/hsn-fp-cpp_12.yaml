- en: 'Section 3: Reaping the Benefits of Functional Programming'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3节：收获函数式编程的好处
- en: We have learned a lot about the building blocks of functional programming, how
    to write them in C++, and how to use them to build function-centric design. It's
    time to look at a few specialized topics strongly related to functional programming.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学到了很多关于函数式编程的构建模块，如何在C++中编写它们以及如何使用它们来构建以函数为中心的设计。现在是时候看一看与函数式编程密切相关的一些专门主题了。
- en: First, we'll dive into the huge topic of performance optimization. We'll learn
    a few optimization techniques that fit particularly well with pure functions (for
    example, memoization and tail recursion optimization). We will look at both memory
    footprint and execution time optimization, carry out many measurements, and compare
    approaches.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将深入探讨性能优化这一巨大的主题。我们将学习一些特别适合纯函数的优化技术（例如，记忆化和尾递归优化）。我们将同时关注内存占用和执行时间的优化，进行许多测量，并比较不同的方法。
- en: Then, we will look into how functional programming enables parallel and asynchronous
    execution. Immutability leads to the avoidance of shared state, therefore, to
    simpler patterns of parallel execution.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将研究函数式编程如何实现并行和异步执行。不变性导致了对共享状态的避免，因此，对并行执行模式的简化。
- en: But we can take advantage of more functional programming. Data generators and
    pure functions enable an automated testing paradigm called **property-based testing**,
    which allows us to check, with very little code, many possible scenarios. Then,
    if we need to refactor complex existing code, we will see that we can first refactor
    it to pure functions, quickly write tests for them, and then decide whether to
    redistribute them into classes or preserve them.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们可以利用更多的函数式编程。数据生成器和纯函数使得一种称为**基于属性的测试**的自动化测试范式成为可能，这使我们能够用很少的代码检查许多可能的场景。然后，如果我们需要重构复杂的现有代码，我们会发现我们可以首先将其重构为纯函数，快速为其编写测试，然后决定是否将其重新分发到类中或保留它们。
- en: 'Finally, we''ll go one level higher, to an architectural paradigm based on
    immutable state and, therefore, something that is closely connected to functional
    programming: event sourcing.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将提升到更高的层次，基于不可变状态的架构范式，因此，与函数式编程密切相关的东西：事件溯源。
- en: 'The following chapters will be covered in this section:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 以下章节将在本节中涵盖：
- en: '[Chapter 10](4612efcd-7520-4ae3-9813-0c42acee664a.xhtml), *Performance Optimization*'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第10章，性能优化
- en: '[Chapter 11](56c096aa-67a7-48ad-bf22-a78367941a26.xhtml), *Property-Based Testing*'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第11章，基于属性的测试
- en: '[Chapter 12](3b3ccc61-d5b6-4e3c-b142-cf32355f6229.xhtml), *Refactoring to and
    through Pure Functions*'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第12章，重构到和通过纯函数
- en: '[Chapter 13](03d5f0b0-bfc9-4526-992e-8e4f23cec30b.xhtml), *Immutability and
    Architecture - Event Sourcing*'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第13章，不变性和架构-事件溯源
