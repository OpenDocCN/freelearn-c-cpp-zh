- en: STL Support and Proposals
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: STL支持和提案
- en: The **Standard Template Library** (**STL**) has been a useful companion to C++
    programmers since the 90s. Starting from concepts such as generic programming
    and value semantics, it has grown to support many useful scenarios. In this chapter,
    we will look at how STL supports functional programming in C++ 17 and see what
    some of the new features that have been introduced in C++ 20 are.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 自从90年代以来，**标准模板库**（**STL**）一直是C++程序员的有用伴侣。从泛型编程和值语义等概念开始，它已经发展到支持许多有用的场景。在本章中，我们将看看STL如何支持C++
    17中的函数式编程，并了解一些在C++ 20中引入的新特性。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Using functional features from the `<functional>` header
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`<functional>`头文件中的函数式特性
- en: Using functional features from the `<numeric>` header
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`<numeric>`头文件中的函数式特性
- en: Using functional features from the `<algorithm>` header
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`<algorithm>`头文件中的函数式特性
- en: '`std::optional` and `std::variant`'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`std::optional`和`std::variant`'
- en: C++20 and the ranges library
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C++20和ranges库
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You will need a compiler that supports C++ 17\. I used GCC 7.4.0c.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要一个支持C++ 17的编译器。我使用的是GCC 7.4.0c。
- en: 'The code is on GitHub at [https:/​/​github.​com/​PacktPublishing/​Hands-​On-​Functional-Programming-​with-​Cpp](https://github.%E2%80%8Bcom/PacktPublishing/Hands-On-Functional-Programming-with-Cpp)
    in the `Chapter15` folder. It includes and uses `doctest`, which is a single-header
    open source unit testing library. You can find it on its GitHub repository here:
    [https:/​/github.​com/​onqtam/​doctest](https://github.%E2%80%8Bcom/onqtam/doctest).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 代码在GitHub上的[https:/​/​github.​com/​PacktPublishing/​Hands-​On-​Functional-Programming-​with-​Cpp](https://github.%E2%80%8Bcom/PacktPublishing/Hands-On-Functional-Programming-with-Cpp)的`Chapter15`文件夹中。它包括并使用了`doctest`，这是一个单头开源单元测试库。你可以在它的GitHub仓库中找到它：[https:/​/github.​com/​onqtam/​doctest](https://github.%E2%80%8Bcom/onqtam/doctest)。
- en: The <functional> header
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`<functional>`头文件'
- en: 'We need to start somewhere in our exploration of functional programming support
    in STL, and the header aptly named `<functional>` seems like a good start. This
    header defines the fundamental `function<>` type, which we can use for functions
    and have used a few times in this book for lambdas:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要从STL中的函数式编程支持中的某个地方开始，而名为`<functional>`的头文件似乎是一个不错的起点。这个头文件定义了基本的`function<>`类型，我们可以用它来表示函数，并且在本书中的几个地方已经使用过了lambda表达式：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We can use the `function<>` type to store any type of function, be it a free
    function, a member function, or a lambda. Let''s look at an example of a free
    function:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`function<>`类型来存储任何类型的函数，无论是自由函数、成员函数还是lambda。让我们看一个自由函数的例子：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here''s an example of a member function:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个成员函数的例子：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see, in order to call a member function through the `function<>`
    type, a valid reference to an object needs to be passed in. Think of it as the
    `*this` instance.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，为了通过`function<>`类型调用成员函数，需要传递一个有效的对象引用。可以把它看作是`*this`实例。
- en: 'In addition to this fundamental type, the `<functional>` header offers a few
    already-defined function objects that come in handy when using functional transformations
    on collections. Let''s look at a simple example of using the `sort` algorithm
    in combination with the defined `greater` function in order to sort a vector in
    descending order:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这种基本类型之外，`<functional>`头文件还提供了一些已定义的函数对象，当在集合上使用函数式转换时非常方便。让我们看一个简单的例子，使用`sort`算法与定义的`greater`函数结合，以便按降序对向量进行排序：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `<functional>` header defines the following useful function objects:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`<functional>`头文件定义了以下有用的函数对象：'
- en: '**Arithmetic operations**: `plus`, `minus`, `multiplies`, `divides`, `modulus`,
    and `negate`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**算术操作**：`plus`，`minus`，`multiplies`，`divides`，`modulus`和`negate`'
- en: '**Comparisons**: `equal_to`, `not_equal_to`, `greater`, `less`, `greater_equal`,
    and `less_equal`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**比较**：`equal_to`，`not_equal_to`，`greater`，`less`，`greater_equal`和`less_equal`'
- en: '**Logical operations**: `logical_and`, `logical_or`, and `logical_not`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**逻辑操作**：`logical_and`，`logical_or`和`logical_not`'
- en: '**Bit-wise operations**: `bit_and`, `bit_or`, and `bit_xor`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**位操作**：`bit_and`，`bit_or`和`bit_xor`'
- en: These function objects spare us the trouble of encapsulating common operations
    in functions when we need to use them with higher-order functions. While it's
    a great collection, I would dare to suggest that an identity function would be
    equally useful, as weird as that may sound. Fortunately, it's easy to implement
    one.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要将常见操作封装在函数中以便在高阶函数中使用时，这些函数对象可以帮助我们省去麻烦。虽然这是一个很好的集合，但我敢于建议一个恒等函数同样有用，尽管这听起来有些奇怪。幸运的是，实现一个恒等函数很容易。
- en: 'However, that''s not all the `<functional>` header has to offer. The `bind`
    function implements partial functional application. We''ve seen it in action multiple
    times in this book, and you can see its usage in detail in [Chapter 5](daf883d3-a1ab-4969-8c81-7d3f33ed1934.xhtml),
    *Partial Application and Currying*. Its basic function is to take a function,
    bind one or more parameters to values, and obtain a new function:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，`<functional>`头文件提供的不仅仅是这些。`bind`函数实现了部分函数应用。我们在本书中多次看到它的应用，你可以在[第5章](daf883d3-a1ab-4969-8c81-7d3f33ed1934.xhtml)中详细了解它的用法，*部分应用和柯里化*。它的基本功能是接受一个函数，绑定一个或多个参数到值，并获得一个新的函数：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: With the `function<>` type allowing us to write lambdas, the predefined function
    objects reducing duplication, and `bind` allowing partial application, we have
    the bases for structuring our code in a functional way. But we couldn't do so
    effectively without higher-order functions.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 有了`function<>`类型允许我们编写lambda表达式，预定义的函数对象减少了重复，以及`bind`允许部分应用，我们就有了以函数式方式构造代码的基础。但是如果没有高阶函数，我们就无法有效地这样做。
- en: The <algorithm> header
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <algorithm>头文件
- en: 'The `<algorithm>` header file contains algorithms, with some of them implemented
    as higher-order functions. In this book, we have seen examples of use for many
    of them. Here''s a list of useful algorithms:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`<algorithm>`头文件包含了一些算法，其中一些实现为高阶函数。在本书中，我们已经看到了许多它们的用法。以下是一些有用的算法列表：'
- en: '`all_of`, `any_of`, and `none_of`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`all_of`，`any_of`和`none_of`'
- en: '`find_if` and `find_if_not`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`find_if`和`find_if_not`'
- en: '`count_if`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`count_if`'
- en: '`copy_if`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`copy_if`'
- en: '`generate_n`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`generate_n`'
- en: '`sort`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sort`'
- en: We have seen how focusing on data and combining these higher-order functions
    to transform input data into the desired output is one of the ways in which you
    can think in small, composable, pure functions. We have also seen the drawbacks
    of this approach—the need to copy data, or make multiple passes through the same
    data—and we have seen how the new ranges library solves these issues in an elegant
    manner.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到，专注于数据并结合这些高阶函数将输入数据转换为所需的输出是你可以思考的一种方式，这是小型、可组合、纯函数的一种方式。我们也看到了这种方法的缺点——需要复制数据，或者对相同的数据进行多次遍历——以及新的ranges库如何以一种优雅的方式解决了这些问题。
- en: While all of these functions are extremely useful, there is one function from
    the `<algorithm>` namespace that deserves a special mention—the implementation
    of the functional `map` operation, `transform`. The `transform` function takes
    an input collection and applies a lambda to each element of the collection, returning
    a new collection with the same number of elements but with the transformed values
    stored in it. This opens infinite possibilities of adapting data structures to
    our needs. Let's look at a few examples.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然所有这些函数都非常有用，但有一个来自`<algorithm>`命名空间的函数值得特别提及——函数式`map`操作`transform`的实现。`transform`函数接受一个输入集合，并对集合的每个元素应用一个lambda，返回一个具有相同数量元素但其中存储了转换值的新集合。这为我们适应数据结构提供了无限的可能性。让我们看一些例子。
- en: Projecting one property of each object from a collection
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从集合中投影每个对象的一个属性
- en: 'We often need to get the value of a property from each element from a collection.
    In the following example, we use `transform` to get the list of all the names
    of people from a vector:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们经常需要从集合中获取每个元素的属性值。在下面的例子中，我们使用`transform`来获取一个向量中所有人的姓名列表：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Once again, we use a wrapper over `transform` and `transformAll` in order to
    avoid writing the boilerplate code:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 再次使用`transform`和`transformAll`的包装器，以避免编写样板代码：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Computing conditionals
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算条件
- en: 'Sometimes, we need to compute whether a condition applies or not for a collection
    of elements. In the following example, we will compute whether people are minors
    or not by comparing their age with `18`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们需要计算一组元素是否满足条件。在下面的例子中，我们将通过比较他们的年龄与`18`来计算人们是否未成年：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Converting everything into a displayable or serializable format
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将所有内容转换为可显示或可序列化格式
- en: 'We often need to save or display a list. To do so, we need to convert each
    element of the list into a displayable or serializable format. In the following
    example, we are computing the JSON representation of the `Person` objects from
    the list:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们经常需要保存或显示一个列表。为了做到这一点，我们需要将列表的每个元素转换为可显示或可序列化的格式。在下面的例子中，我们正在计算列表中的`Person`对象的JSON表示：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Even with the infinite possibilities that are opened by the `transform` function,
    it becomes even more powerful in combination with the `reduce` (`accumulate` in
    C++) higher-order function.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 即使`transform`函数打开了无限的可能性，但与`reduce`（在C++中为`accumulate`）高阶函数结合使用时，它变得更加强大。
- en: The <numeric> header – accumulate
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`<numeric>`头文件 - accumulate'
- en: 'It''s interesting to see that the two higher-order functions that form the
    `map`/`reduce` pattern, one of the most commonly known patterns in functional
    programming, ended up in two different header files in C++. The `transform`/`accumulate`
    combination, requiring both the `<algorithm>` and the `<numeric>` header files,
    allow us to solve many problems that have the following pattern:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，形成`map`/`reduce`模式的两个高阶函数之一，即函数式编程中最常见的模式之一，最终出现在C++的两个不同的头文件中。`transform`/`accumulate`组合需要`<algorithm>`和`<numeric>`头文件，可以解决许多具有以下模式的问题：
- en: A collection is provided.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供了一个集合。
- en: The collection needs to be transformed into something else.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集合需要转换为其他形式。
- en: An aggregated result needs to be computed.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要计算一个聚合结果。
- en: Let's look at a few examples.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一些例子。
- en: Computing the total price with tax for a shopping cart
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算购物车的含税总价
- en: 'Let''s say we have a `Product` structure, as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个`Product`结构，如下所示：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let''s also assume that we have different tax levels based on product categories:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们根据产品类别有不同的税率：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Say we were given a list of products, such as the following:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个产品列表，如下所示：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let''s compute the total price, with and without tax. We also have a helper
    wrapper, `accumulateAll`, at our disposal:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们计算含税和不含税的总价。我们还有一个辅助包装器`accumulateAll`可供使用：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To compute the price without tax, we just need to get all the product prices
    and add them up. It''s a typical `map`/`reduce` scenario:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要计算不含税的价格，我们只需要获取所有产品的价格并相加。这是一个典型的`map`/`reduce`场景：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: First, we `map` (`transform`) the list of `Products` into a list of prices,
    and then `reduce` (or `accumulate`) them into a single value—its total.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将`Products`列表转换为价格列表，然后将它们进行`reduce`（或`accumulate`）处理，得到一个单一的值——它的总价。
- en: 'A similar, albeit more complex, process applies when we need the total price
    with tax:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要含税的总价时，一个类似但更复杂的过程也适用：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: First, we `map` (`transform`) the list of `Products` with the list of prices
    with tax, then `reduce` (or `accumulate`) all the values into the total with tax.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将`Products`列表与含税价格列表进行`map`（`transform`）处理，然后将所有值进行`reduce`（或`accumulate`）处理，得到含税总价。
- en: In case you're wondering, the `doctest::Approx` function allows for a comparison
    between floating point numbers with a small rounding error.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想知道，`doctest::Approx`函数允许对浮点数进行小的舍入误差比较。
- en: Converting a list into JSON
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将列表转换为JSON
- en: 'In the previous section, we saw how to convert each item from a list into JSON
    through a `transform` call. It''s easy to turn it into a full JSON list with the
    help of `accumulate`:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我们看到如何通过`transform`调用将列表中的每个项目转换为JSON。通过`accumulate`的帮助，很容易将其转换为完整的JSON列表：
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We use `transform` to turn the list of people into a list of JSON representations
    for each object, and then we use `accumulate` to join them and use a few additional
    operations to add the front and back of the list representation in JSON.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`transform`将人员列表转换为每个对象的JSON表示的列表，然后我们使用`accumulate`将它们连接起来，并使用一些额外的操作来添加JSON中列表表示的前后部分。
- en: As you can see, the `transform`/`accumulate` (or `map`/`reduce`) combination
    serves a lot of different uses, depending on the functions we pass into it.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，`transform`/`accumulate`（或`map`/`reduce`）组合可以根据我们传递给它的函数执行许多不同的用途。
- en: Back to <algorithm> – find_if and copy_if
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回到<algorithm> – find_if和copy_if
- en: We can accomplish a lot of things with `transform`, `accumulate`, and `any_of`/`all_of`/`none_of`.
    Sometimes, however, we need to filter out some of the data from collections.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过`transform`、`accumulate`和`any_of`/`all_of`/`none_of`实现很多事情。然而，有时我们需要从集合中过滤掉一些数据。
- en: 'The usual style of doing this is with `find_if`. However, `find_if` is cumbersome
    if what we need is to find all the items from a collection that fit a specific
    condition. Therefore, the best option to solve this problem in a functional way
    using the C++ 17 standard is `copy_if`. The following example uses `copy_if` to
    find all the minors in a list of people:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 通常的做法是使用`find_if`。然而，如果我们需要找到集合中符合特定条件的所有项目，`find_if`就显得很麻烦了。因此，使用C++ 17标准以函数式方式解决这个问题的最佳选择是`copy_if`。以下示例使用`copy_if`在人员列表中找到所有未成年人：
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: <optional> and <variant>
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <optional>和<variant>
- en: We have discussed happy path cases a lot, which are when the data is valid for
    our data transformations. What do we do for edge cases and errors? Sure, in exceptional
    cases, we can throw exceptions or return error cases, but what about situations
    when we need to return an error message?
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了很多快乐路径的情况，即数据对我们的数据转换是有效的情况。那么对于边缘情况和错误情况，我们该怎么办呢？当然，在特殊情况下，我们可以抛出异常或返回错误情况，但是在我们需要返回错误消息的情况下呢？
- en: The functional way is to return data structures in these cases. After all, we
    need to return an output value even when the input isn't valid. But we hit a challenge—the
    type we need to return in the case of an error is an error type, while the type
    we need to return in the case of valid data is some more valid data.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些情况下，功能性的方式是返回数据结构。毕竟，即使输入无效，我们也需要返回一个输出值。但我们面临一个挑战——在错误情况下我们需要返回的类型是错误类型，而在有效数据情况下我们需要返回的类型是更多的有效数据。
- en: 'Fortunately, we have two structures that support us in these cases—`std::optional`
    and `std::variant`. Let''s take an example of a list of people, some of whom are
    valid and some of whom are invalid:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，我们有两种结构在这些情况下支持我们——`std::optional`和`std::variant`。让我们以一个人员列表为例，其中一些人是有效的，一些人是无效的：
- en: '[PRE17]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The last person has an invalid age. Let''s try to write, in a functional way,
    the code that will display the following string:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个人的年龄无效。让我们尝试以一种功能性的方式编写代码，以显示以下字符串：
- en: '[PRE18]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'To have a chain of transformations, we need to use the `optional` type, as
    follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 要有一系列的转换，我们需要使用`optional`类型，如下所示：
- en: '[PRE19]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'With this call, we obtain a list of pairs between the person and a value that
    is either `nullopt`, `minor`, or `major`. We can use this in the following `transform`
    call in order to obtain the list of strings according to the validity condition:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个调用，我们得到了一个人和一个值之间的配对列表，该值要么是`nullopt`，要么是`minor`，要么是`major`。我们可以在下面的`transform`调用中使用它，以根据有效条件获取字符串列表：
- en: '[PRE20]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Finally, the call to accumulate creates the expected output string:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，调用accumulate创建了预期的输出字符串：
- en: '[PRE21]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We can check this out with a test:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过测试来检查这一点：
- en: '[PRE22]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: An alternative method is possible with the use of `variant`, if we need to,
    for example, return an error code combined with the person.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，可以使用`variant`来实现另一种方法，例如，返回与人员组合的错误代码。
- en: C++ 20 and the ranges library
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C++ 20和范围库
- en: 'We discussed the ranges library at length in [Chapter 14](1edd5963-94e4-48dc-830f-8f201b3a39c7.xhtml),
    *Lazy Evaluation Using the Ranges Library*. If you can use it, either because
    you use C++ 20 or because you can use it as a third-party library, the previous
    function becomes extremely simple and much faster:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第14章](1edd5963-94e4-48dc-830f-8f201b3a39c7.xhtml)中详细讨论了范围库，*使用范围库进行惰性评估*。如果你可以使用它，要么是因为你使用C++
    20，要么是因为你可以将它作为第三方库使用，那么前面的函数就变得非常简单且更快：
- en: '[PRE23]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Similarly, finding the list of minors from a list of people is very easy with
    the ranges'' `view::filter`:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，从人员列表中找到未成年人的列表在范围的`view::filter`中非常容易：
- en: '[PRE24]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Once we have the `isMinor` predicate, we can pass it to `view::filter` to find
    the minors from the list of people.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了`isMinor`谓词，我们可以将它传递给`view::filter`来从人员列表中找到未成年人。
- en: Summary
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we went on a tour of the functional programming features that
    are available in the STL of C++ 17, and of the new features in C++ 20\. With functions,
    algorithms, the help provided by `variant` and `optional` in error or edge cases,
    and the simplified and optimized code that can be achieved using the ranges library,
    we have pretty good support for functional programming features.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们对C++ 17 STL中可用的函数式编程特性进行了介绍，以及C++ 20中的新特性。通过函数、算法、`variant`和`optional`在错误或边缘情况下提供的帮助，以及使用范围库可以实现的简化和优化代码，我们对函数式编程特性有了相当好的支持。
- en: Now, it's time to move on to the next chapter and look at the C++ 17 language
    support for functional programming, and at the interesting things that are coming
    for functional programming in C++20.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候进入下一章，看看C++ 17对函数式编程的语言支持，以及C++ 20中即将出现的有趣的事情了。
