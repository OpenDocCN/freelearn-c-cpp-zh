- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Using CMake in Popular IDEs
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在流行的IDE中使用CMake
- en: Programming is as much an art as it is a deeply technical process, and as we
    know all too well, it’s very difficult. Therefore, we should be looking to optimize
    this process as much as possible. There aren’t too many instances where we can
    just flip a switch and get better outcomes, but using **Integrated Development
    Environments** (**IDEs**) is definitely one of those rare cases.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 编程既是一门艺术，也是一项深具技术性的过程，正如我们都深知的，它是非常困难的。因此，我们应该尽可能优化这一过程。虽然我们很少能通过简单的开关来获得更好的结果，但使用**集成开发环境（IDE）**绝对是其中少数的例外之一。
- en: If you haven’t worked with a proper IDE before (or you believe that a text processor
    like Emacs or Vim is the best you can hope for), this chapter is for you. If you’re
    a seasoned professional and are already familiar with the subject, you can use
    this chapter as a quick overview of the current top choices and maybe consider
    a switch or, even better, get clear confirmation that your current tool is the
    best.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你以前没有使用过合适的IDE（或者你认为像Emacs或Vim这样的文本处理器已经是你能得到的最好工具），那么本章就是为你准备的。如果你是经验丰富的专业人士，已经熟悉这个话题，你可以将本章作为当前热门选择的快速概览，或者考虑换一个工具，甚至更好的是，确认你当前使用的工具就是最好的选择。
- en: With an emphasis on accessibility for those new to the field, this chapter provides
    a gentle introduction to the critical choice of an IDE. We will cover why you’d
    want one and how to pick one that best suits your needs. Sure, there are many
    choices out there, but as usual, some are just better than others. Unfortunately,
    this isn’t a universal, one-size-fits-all kind of deal. Many factors contribute
    toward the productivity levels that you might get if you choose right. We’ll discuss
    a few considerations that might be important if your work is in an organization
    of a certain size, ensuring that you grasp the nuances without becoming mired
    in complexity. This will be followed by a quick introduction to toolchains, where
    we’ll discuss available choices.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章以强调为新手提供可访问性的方式，轻松介绍了选择IDE这一关键问题。我们将讨论为什么你需要一个IDE以及如何选择最适合你需求的IDE。虽然市场上有许多选择，但像往常一样，有些选择显然比其他的更好。不幸的是，这并不是一个通用的、一刀切的解决方案。许多因素会影响你选择合适IDE后的生产力水平。我们将讨论一些在某些规模的组织中可能很重要的考虑因素，确保你能够掌握细微差别而不至于陷入复杂性。接下来，我们会快速介绍工具链，在那里我们将讨论可用的选择。
- en: We will then highlight the distinctive qualities of several popular IDEs, such
    as the sophisticated CLion, the adaptable nature of Visual Studio Code, and then
    the powerhouse that is the Visual Studio IDE. Each section is tailored to showcase
    the strengths and advanced features that these environments offer, providing you
    with the knowledge of how to take your initial steps with the IDE. Additionally,
    we highlight one advanced feature that was subjectively picked from many others,
    just to let you know what you might expect if you decide to use this suite.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将重点介绍几种流行IDE的独特特点，如复杂的CLion、灵活的Visual Studio Code，以及强大的Visual Studio IDE。每一节都将展示这些环境的优点和高级功能，帮助你了解如何迈出使用IDE的第一步。此外，我们还将介绍一个从众多功能中主观挑选出的高级功能，让你知道如果决定使用这套工具时，可能会遇到哪些亮点。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主要内容：
- en: Getting to know IDEs
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解集成开发环境（IDE）
- en: Starting with the CLion IDE
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从CLion IDE开始
- en: Starting with Visual Studio Code
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Visual Studio Code开始
- en: Starting with the Visual Studio IDE
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Visual Studio IDE开始
- en: Getting to know IDEs
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解集成开发环境（IDE）
- en: In this section, we will discuss IDEs and how they can significantly enhance
    development speed and code quality. Let’s begin by explaining what an IDE is for
    those new to this topic.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论IDE及其如何显著提高开发速度和代码质量。让我们先为那些对这个话题不熟悉的人解释一下什么是IDE。
- en: 'Why and how do you choose an IDE? An IDE, or integrated development environment,
    is a comprehensive tool that combines various specialized tools to simplify the
    software development process. The journey of creating a professional project involves
    numerous steps: designing, coding, building, testing, packaging, releasing, and
    maintaining. Each step comprises many smaller tasks, and the complexity can be
    overwhelming. IDEs offer a solution by providing a platform with a set of tools
    that are curated and configured by the IDE creators. This integration allows you
    to use these tools seamlessly without having to set them up individually for each
    project.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么以及如何选择一个 IDE？IDE（集成开发环境）是一种综合工具，它将各种专业工具结合起来，以简化软件开发过程。创建一个专业项目的过程包含多个步骤：设计、编码、构建、测试、打包、发布和维护。每个步骤都包含许多小任务，复杂性可能会让人感到压倒性。IDE
    提供了解决方案，通过提供一个由 IDE 创建者策划和配置的工具平台，使你能够无缝使用这些工具，而无需为每个项目单独设置它们。
- en: IDEs are mainly centered around the code editor, compiler, and debugger. They
    are designed to provide sufficient integration, enabling you to edit code, compile
    it immediately, and run it with a debugger attached. IDEs can include build toolchains
    or allow developers to choose their preferred compilers and debuggers. Editors
    are usually a core part of the software but can often be greatly extended with
    plugins, like code highlighting, formatting, and more.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: IDE 主要围绕代码编辑器、编译器和调试器设计。它们旨在提供足够的集成，使你能够编辑代码、立即编译并运行带有调试器的代码。IDE 可以包括构建工具链，或允许开发人员选择自己喜欢的编译器和调试器。编辑器通常是软件的核心部分，但通常可以通过插件大大扩展功能，例如代码高亮、格式化等。
- en: More advanced IDEs offer very sophisticated features like Hot Reload debugging
    (available in Visual Studio 2022; read on to learn more). This feature lets you
    run your code in a debugger, edit it, and continue execution without restarting
    the program. You will also find refactoring tools to rename symbols or extract
    code into a separate function, and static analysis to identify errors before compilation.
    Additionally, IDEs provide tools to work with Git and other version control systems,
    which are invaluable for resolving conflicts, among other benefits.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 更高级的 IDE 提供了非常复杂的功能，如热重载调试（在 Visual Studio 2022 中可用；继续阅读以了解更多）。这个功能允许你在调试器中运行代码，编辑它，并继续执行而无需重新启动程序。你还会发现重构工具，可以重命名符号或将代码提取到单独的函数中，以及静态分析工具，可以在编译之前识别错误。此外，IDE
    还提供了与 Git 和其他版本控制系统的工具，这些工具对于解决冲突等问题非常有价值。
- en: I’m sure you can see now how beneficial it can be to learn how to use an IDE
    early and standardize this usage in your organization. Let’s find out why choosing
    an IDE that is *right for you* is important.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信你现在可以看到，早期学习如何使用 IDE 并在组织中标准化这种使用方式是多么有益。接下来，让我们了解一下为什么选择一个*适合你的*IDE如此重要。
- en: Choosing an IDE
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择 IDE
- en: There are plenty of code editors that are on the verge of being recognized by
    the community as fully featured IDEs. It’s always recommended to research the
    space a bit before committing to a specific choice, especially because of the
    pace of current software release cycles and rapid changes in the space.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多代码编辑器正处于被社区认定为功能完整的 IDE 的边缘。在选择一个具体的 IDE 之前，建议你先做一些研究，特别是考虑到当前软件发布周期的节奏以及该领域的快速变化。
- en: In my few years of corporate experience, it’s quite uncommon for an IDE to offer
    a feature compelling enough to make someone switch from one IDE to another. Force
    of habit is really second nature to a developer, and it shouldn’t be ignored.
    Remember that as soon as you feel comfortable in an IDE, it’s likely going to
    be your tool of choice for the considerable future. This is why you still see
    developers using Vim (a console-based text editor released in 1991), extended
    with a bunch of plugins to make it as powerful as more modern, GUI-based IDEs.
    No pressure then.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在我几年的企业经验中，IDE 提供的功能足够吸引人，让人从一个 IDE 切换到另一个 IDE 的情况并不常见。开发人员的习惯几乎是第二天性，不能忽视。记住，一旦你在某个
    IDE 中感到舒适，它很可能会成为你未来相当长时间的首选工具。这就是为什么你仍然会看到开发者使用 Vim（一个 1991 年发布的基于控制台的文本编辑器），并通过一堆插件扩展它，使它与现代的、基于
    GUI 的 IDE 一样强大。所以不必感到压力。
- en: There are varied reasons why programmers choose one IDE over another; some of
    them are really important (speed, reliability, comprehensiveness, completeness),
    while others… not so much. I’d like to share my subjective perspective on this
    choice, which I hope you’ll find useful too.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员选择一个IDE而不是另一个IDE的原因各不相同；其中一些原因非常重要（速度、可靠性、全面性、完整性），而另一些则…没那么重要。我想分享一下我对这个选择的主观看法，希望你也能觉得有用。
- en: Choose a comprehensive IDE
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择一个全面的IDE
- en: If you’re just starting out, you might think about using a simple text editor
    and running a few commands to build your code. This approach is definitely workable,
    especially when you’re trying to understand the basics (I encourage you to use
    the actual commands to monitor your progress throughout this book). It also helps
    you grasp what a beginner might experience without an IDE.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你刚刚开始，你可能会考虑使用一个简单的文本编辑器并通过运行几个命令来构建代码。这种方法完全可行，尤其是在你尝试理解基础知识时（我鼓励你在本书中使用实际命令来跟踪你的进度）。它还帮助你理解没有IDE时初学者可能遇到的情况。
- en: On the other hand, IDEs are created for a purpose. They streamline numerous
    processes that developers handle during a project’s lifecycle, which can be extremely
    valuable. Although it might seem overwhelming initially, choose a comprehensive
    IDE that includes all the necessary features. Ensure it’s as complete as possible,
    but be mindful of the cost, as IDEs can be expensive for small businesses or individual
    developers. It’s a balance between the time spent on manual management and the
    cost of the features provided by the IDE.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，IDE是为了特定的目的而创建的。它们简化了开发人员在项目生命周期中处理的众多流程，这非常有价值。虽然最初可能会让人感到不知所措，但选择一个包括所有必要功能的综合IDE。确保它尽可能完整，但要留意成本，因为IDE对于小型企业或个人开发者来说可能非常昂贵。这是一个在手动管理花费的时间和IDE提供的功能成本之间的平衡。
- en: Regardless of the cost, always select an IDE with strong community support to
    assist you if you encounter issues. Explore community forums and popular Q&A sites
    like [StackOverflow.com](http://StackOverflow.com) to check if users get their
    questions answered. Additionally, choose an IDE that is actively developed by
    a reputable company. You don’t want to waste your time on something that hasn’t
    been updated in a while and might get deprecated or abandoned in the near future.
    For example, not so long ago, Atom, an editor created by GitHub, was sunset after
    7 years of releases.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 无论价格如何，总是选择一个有强大社区支持的IDE，以便在遇到问题时获得帮助。浏览社区论坛和像[StackOverflow.com](http://StackOverflow.com)这样的热门问答网站，看看用户是否能得到他们问题的答案。此外，选择一个由有声望的公司积极开发的IDE。你不想浪费时间在一个已经很久没有更新、可能会在不久的将来被弃用或停产的工具上。例如，不久前，GitHub创建的编辑器Atom，在发布7年后被停用。
- en: Choose an IDE that is widely supported in your organization
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择一个在你的组织中得到广泛支持的IDE
- en: Counterintuitively, this might not align with every developer’s preference.
    You may already be comfortable with a different tool from your university, previous
    job, or a personal project. Such a habit, as mentioned earlier, can tempt you
    to ignore your company’s recommendations and stick with what you know. Resist
    this. Such a choice becomes increasingly challenging over time. From my experiences
    at Ericsson, Amazon, and Cisco, only once did the effort to configure and maintain
    a non-standard IDE prove worthwhile. That was because I managed to get enough
    organizational support to address issues collectively.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 出乎意料的是，这可能并不符合每个开发者的偏好。你可能已经习惯了来自大学、之前工作或个人项目中的其他工具。正如前面提到的，这样的习惯可能会诱使你忽视公司的建议，固守自己熟悉的工具。抵制这种诱惑。随着时间的推移，这样的选择会变得越来越具有挑战性。根据我在爱立信、亚马逊和思科的经历，只有一次，我努力配置和维护一个非标准IDE是值得的。那是因为我成功获得了足够的组织支持，能够共同解决问题。
- en: Your primary goal should be writing code, not struggling with an unsupported
    IDE. Learning the recommended software may require effort, but it’s less than
    what’s needed to go against the norm (and yes, Vim lost this battle; it’s time
    to move on).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你的主要目标应该是编写代码，而不是在一个不受支持的IDE中挣扎。学习推荐的软件可能需要一些努力，但它所需的精力少于违背常规的做法（是的，Vim输了这一战；是时候继续前进了）。
- en: Don’t pick an IDE based on the target OS and platform
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 不要根据目标操作系统和平台选择IDE
- en: You might think that if you’re developing software for Linux, you need to use
    a Linux machine and a Linux-based IDE. However, C++ is a portable language, which
    means it should compile and run the same way on any platform, provided you’ve
    written it correctly. Of course, you might encounter issues with libraries, as
    not all of them are installed by default, and some may be specific to your platform.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能认为如果你在为 Linux 开发软件，你需要使用一台 Linux 机器和基于 Linux 的 IDE。然而，C++ 是一种可移植的语言，这意味着只要你编写正确，它应该能够在任何平台上以相同的方式编译和运行。当然，你可能会遇到库的问题，因为并不是所有的库都是默认安装的，有些可能是特定于你的平台的。
- en: Adhering strictly to the target platform isn’t always necessary and can sometimes
    be counterproductive. For instance, if you’re targeting an older or **Long-Term
    Support** (**LTS**) version of an OS, you might not be able to use the latest
    toolchain versions. If you wish to develop on a different platform than your target,
    you can.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 严格遵循目标平台并非总是必要的，有时甚至可能适得其反。例如，如果你要针对一个较旧或**长期支持**（**LTS**）版本的操作系统进行开发，你可能无法使用最新的工具链版本。如果你希望在不同于目标平台的环境下进行开发，是完全可以实现的。
- en: In that case, consider **cross-compilation** or **remote development**. Cross-compilation
    involves using a specialized toolchain that allows a compiler running on one platform
    (like Windows) to produce artifacts for another platform (like Linux). This approach
    is widely used in the industry and is supported by CMake. Alternatively, I recommend
    remote development, where you send your code to the target machine and build it
    there using the local toolchain. This method is supported by many IDEs and offers
    several benefits, which we’ll explore in the next section.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，可以考虑**交叉编译**或**远程开发**。交叉编译是指使用专门的工具链，使得在一个平台（如 Windows）上运行的编译器能够为另一个平台（如
    Linux）生成目标文件。这种方法在行业中广泛使用，并且得到 CMake 的支持。或者，我推荐远程开发，在这种情况下，你将代码发送到目标机器，并在那里使用本地工具链进行构建。这种方法得到了许多
    IDE 的支持，并且提供了几个好处，我们将在下一节中进行探讨。
- en: Pick an IDE with remote development support
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择一款支持远程开发的 IDE
- en: While it shouldn’t be your primary criterion, considering remote development
    support in an IDE is beneficial after meeting other requirements. Over time, even
    seasoned developers encounter projects requiring a different target platform than
    their usual OS due to changing teams, projects, or even companies.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这不应是你主要的选择标准，但在满足其他要求后，考虑 IDE 是否支持远程开发是很有帮助的。随着时间的推移，即便是经验丰富的开发者也会遇到需要不同目标平台的项目，这可能是由于团队、项目甚至公司发生变化。
- en: If your preferred IDE supports remote development, you can continue using it,
    leveraging the ability to compile and debug code on a different OS and view results
    in the IDE’s GUI. The main advantage of remote development over cross-compilation
    is its integrated debugger support, offering a cleaner process without needing
    CMake project-level configuration. Additionally, companies often provide powerful
    remote machines, allowing developers to use less expensive, lightweight local
    devices.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你首选的 IDE 支持远程开发，你可以继续使用它，利用在不同操作系统上编译和调试代码的能力，并在 IDE 的 GUI 中查看结果。远程开发相比交叉编译的主要优势是其集成的调试支持，提供了一个更加简洁的过程，而无需进行
    CMake 项目级别的配置。此外，公司通常会提供强大的远程机器，让开发者可以使用更便宜、轻量级的本地设备。
- en: Sure, there’s an argument to be made that cross-compilation offers greater control
    over the development environment, allowing temporary changes for testing. It doesn’t
    necessitate bandwidth for code transfers, supporting low-end internet connections,
    or offline work. However, considering most software development involves internet
    access for information, this might be a less critical advantage. Using virtualized
    environments like Docker enables running a local production copy and setting up
    remote development connections, offering security, customizability, and the ability
    to build and deploy containers.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，有人认为交叉编译提供了更大的开发环境控制，使得可以为测试做临时性更改。它不需要带宽进行代码传输，支持低端的互联网连接或离线工作。然而，考虑到大多数软件开发都需要上网获取信息，这可能就不是一个特别重要的优势。使用像
    Docker 这样的虚拟化环境可以运行本地生产副本并设置远程开发连接，提供安全性、可定制性，以及构建和部署容器的能力。
- en: The considerations mentioned here are slightly tilted toward working in big
    corporations, where things move slower, and it’s difficult to make highly impactful
    changes. These suggestions don’t negate the possibility of having a perfectly
    complete experience with CMake if you decide to prioritize other aspects of IDEs,
    as needed by your use case.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这里提到的考虑因素稍微倾向于在大型公司工作的情况，在这些公司中，事务进展较慢，且很难做出高影响力的改变。如果你决定根据你的使用场景优先考虑其他IDE的方面，这些建议并不否定使用CMake时能获得一个完全完整的体验的可能性。
- en: Installing toolchains
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装工具链
- en: As we discussed earlier, an IDE integrates all the necessary tools to streamline
    software development. A key part of this process is building binaries, sometimes
    in the background or on the fly, to provide additional information to developers.
    Toolchains are collections of tools like compilers, linkers, archivers, optimizers,
    debuggers, and implementations of the standard C++ library. They may also include
    other handy utilities like `bash`, `make`, `gawk`, `grep`, and so on, which are
    used to build programs.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前讨论的，IDE整合了所有必要的工具来简化软件开发。这个过程的一个关键部分是构建二进制文件，有时在后台或即时构建，以为开发人员提供附加信息。工具链是由编译器、链接器、归档工具、优化器、调试器和C++标准库实现等工具组成的集合。它们还可能包括其他实用的工具，如`bash`、`make`、`gawk`、`grep`等，这些工具用于构建程序。
- en: Some IDEs come with toolchains or toolchain downloaders, while others do not.
    It’s best to just run an installed IDE and check if you’re able to compile a basic
    test program. CMake typically does this by default during the configuration stage,
    which most IDEs execute as part of the initialization of new projects. If this
    process fails, you might be prompted by the IDE or the OS’s package manager to
    install the necessary tools. Just follow along, as this flow is usually well prepared.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一些IDE自带工具链或工具链下载器，而其他IDE则没有。最好直接运行已安装的IDE，并检查是否能够编译一个基础的测试程序。CMake通常会在配置阶段默认执行此操作，大多数IDE会在初始化新项目时作为一部分执行此过程。如果此过程失败，IDE或操作系统的包管理器可能会提示你安装所需的工具。只需按照提示操作，因为这个流程通常已经做好了充分准备。
- en: 'If you’re not prompted, or if you’d like to use a specific toolchain, here
    are some options based on your platform:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有提示，或者如果你想使用特定的工具链，这里有一些根据平台不同的选项：
- en: '**GNU GCC** ([https://gcc.gnu.org/](https://gcc.gnu.org/)) for Linux, Windows
    (via MinGW or Cygwin), macOS, and many others. GCC is one of the most popular
    and widely used C++ compilers, supporting a wide range of platforms and architectures.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GNU GCC** ([https://gcc.gnu.org/](https://gcc.gnu.org/)) 用于Linux、Windows（通过MinGW或Cygwin）、macOS及其他多个平台。GCC是最受欢迎且广泛使用的C++编译器之一，支持多种平台和架构。'
- en: '**Clang/LLVM** ([https://clang.llvm.org/](https://clang.llvm.org/)) for Linux,
    Windows, macOS, and many others. Clang is a compiler frontend for the C, C++,
    and Objective-C programming languages, utilizing LLVM as its backend.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Clang/LLVM** ([https://clang.llvm.org/](https://clang.llvm.org/)) 用于Linux、Windows、macOS等多个平台。Clang是C、C++和Objective-C编程语言的编译器前端，利用LLVM作为其后端。'
- en: '**Microsoft Visual Studio/MSVC** ([https://visualstudio.microsoft.com/](https://visualstudio.microsoft.com/))
    for Windows primarily, with cross-platform support via Visual Studio Code and
    CMake. MSVC is the C++ compiler provided by Microsoft, typically used within the
    Visual Studio IDE.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Microsoft Visual Studio/MSVC** ([https://visualstudio.microsoft.com/](https://visualstudio.microsoft.com/))
    主要用于Windows，同时通过Visual Studio Code和CMake提供跨平台支持。MSVC是由微软提供的C++编译器，通常在Visual Studio
    IDE中使用。'
- en: '**MinGW-w64** ([http://mingw-w64.org/](http://mingw-w64.org/)) for Windows.
    MinGW-w64 is an advancement of the original MinGW project, aimed at providing
    better support for 64-bit Windows and new APIs.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MinGW-w64** ([http://mingw-w64.org/](http://mingw-w64.org/)) 用于Windows。MinGW-w64是原MinGW项目的一个改进版，旨在提供对64位Windows和新API的更好支持。'
- en: '**Apple Clang** ([https://developer.apple.com/xcode/cpp/](https://developer.apple.com/xcode/cpp/))
    for macOS, iOS, iPadOS, watchOS, and tvOS. Apple’s version of Clang, optimized
    for Apple’s hardware and software ecosystem, is integrated with Xcode.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Apple Clang** ([https://developer.apple.com/xcode/cpp/](https://developer.apple.com/xcode/cpp/))
    用于macOS、iOS、iPadOS、watchOS和tvOS。Apple版Clang，经过针对Apple硬件和软件生态系统的优化，已集成在Xcode中。'
- en: '**Cygwin** ([https://www.cygwin.com/](https://www.cygwin.com/)) for Windows.
    Cygwin provides a POSIX-compatible environment on Windows, allowing the use of
    GCC and other GNU tools.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Cygwin** ([https://www.cygwin.com/](https://www.cygwin.com/)) 用于Windows。Cygwin为Windows提供了一个与POSIX兼容的环境，允许使用GCC和其他GNU工具。'
- en: 'If you’re looking to start quickly without delving deeply into the specifics
    of each toolchain, you can follow my personal preference: if there’s no toolchain
    provided by the IDE, go with MinGW on Windows, Clang/LLVM on Linux, and Apple
    Clang on macOS. Each of these is well suited to its primary platform and typically
    offers the best experience.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想快速开始，而不深入研究每个工具链的细节，你可以按照我的个人偏好：如果 IDE 没有提供工具链，可以选择在 Windows 上使用 MinGW，在
    Linux 上使用 Clang/LLVM，在 macOS 上使用 Apple Clang。每种工具链都非常适合其主要平台，并通常提供最佳体验。
- en: Using this book’s examples with IDEs
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用本书的示例与 IDE 配合
- en: 'This book comes with an extensive collection of examples of CMake projects,
    available in the official GitHub repository here: [https://github.com/PacktPublishing/Modern-CMake-for-Cpp-2E](https://github.com/PacktPublishing/Modern-CMake-for-Cpp-2E).'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 本书附带了一套丰富的 CMake 项目示例，已上传至官方 GitHub 仓库，链接如下：[https://github.com/PacktPublishing/Modern-CMake-for-Cpp-2E](https://github.com/PacktPublishing/Modern-CMake-for-Cpp-2E)。
- en: 'Naturally, as we explore the subject of IDEs, a question arises: how do we
    use this repository with all the IDEs presented here? Well, we need to recognize
    that the book teaching you how to create professional projects isn’t a professional
    project itself. It’s a collection of such projects with varied levels of completion,
    reasonably simplified where possible. Unfortunately (or, maybe fortunately?),
    IDEs aren’t built to load tens of projects and conveniently manage them. They
    generally focus their features on loading one actively edited project.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 自然地，当我们探索 IDE 的主题时，出现了一个问题：我们如何在这里介绍的所有 IDE 中使用这个仓库呢？嗯，我们需要认识到，这本教你如何创建专业项目的书本身并不是一个专业项目。它是一个由多个不同完成度的项目组成的集合，在可能的情况下做了适当的简化。不幸的是（或者说，或许幸运的是？），IDE
    并不是为加载成百上千的项目并方便管理它们而设计的。它们通常将功能集中于加载一个正在编辑的项目。
- en: 'This puts us in a somewhat awkward position: it’s really difficult to navigate
    the example set with IDEs. Upon using an IDE to load the example set, by selecting
    the example directory to open it, most IDEs will detect multiple `CMakeLists.txt`
    files and ask you to pick one. After doing so, the usual initialization process
    will occur, temporary files will be written, and essentially, the CMake configuration
    and generation stages will be run to get the project into a state where it can
    be built. As you might guess, this only works for the example whose `CMakeLists.txt`
    file was selected. Most IDEs do offer ways to switch between different directories
    (or projects) in the workspace, but it might not be as straightforward as we’d
    like it to be.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这让我们处于一个有些尴尬的境地：使用 IDE 来浏览示例集实际上很困难。当你使用 IDE 加载示例集时，通过选择示例目录来打开，绝大多数 IDE 会检测到多个
    `CMakeLists.txt` 文件，并要求你选择一个。选定后，通常会执行初始化过程，写入临时文件，基本上会运行 CMake 配置和生成阶段，以便让项目进入可以构建的状态。正如你可能猜到的那样，这只对选中的
    `CMakeLists.txt` 文件所在的示例有效。大多数 IDE 确实提供在工作区中切换不同目录（或项目）的方法，但这可能没有我们希望的那样简单直接。
- en: 'If you’re struggling with this, there are two options: either don’t use the
    IDE to build examples (and go with console commands instead) or load an example
    into a fresh project every time. I would recommend the first option if you’re
    keen on practicing the commands, as they may come in handy in the future and will
    give you a better understanding of what is going on behind the scenes. This is
    usually a good choice for build engineers, as this knowledge will be used often.
    On the other hand, if you’re working on a single project, mostly as a developer
    focusing on the business side of the code, perhaps going with the IDEs early on
    is the best. In any case, choosing one doesn’t prevent you from going with the
    other from time to time.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在这方面遇到困难，有两个选择：要么不使用 IDE 来构建示例（而是使用控制台命令），要么每次都将示例加载到一个新的项目中。如果你想练习命令，我推荐第一个选项，因为这些命令将来可能会派上用场，并且能帮助你更好地理解幕后发生了什么。这通常是构建工程师的一个不错选择，因为这些知识将被频繁使用。另一方面，如果你是在做单一项目，主要作为开发者关注代码的业务层面，或许尽早使用
    IDE 是最佳选择。无论如何，选择一个并不妨碍你偶尔使用另一个。
- en: With this out of the way, let’s focus on reviewing today’s top IDEs and seeing
    which one might be the best for you. All of them will serve you well, regardless
    of whether you work in a corporation or not.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 说完这些，让我们集中精力回顾今天的顶级 IDE，看看哪个最适合你。无论你是否在公司工作，它们都会为你提供很好的服务。
- en: Starting with the CLion IDE
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 CLion IDE 开始
- en: CLion is a paid, cross-platform IDE available for Windows, macOS, and Linux,
    developed by JetBrains. That’s right – this piece of software is subscription-based;
    starting from $99.00 (early 2024), you can get a one-year license for individual
    use. Bigger organizations pay more, and startups pay less. If you’re a student
    or release an open-source project, you can get a free license. On top of that,
    there’s a 30-day trial to test the software. This is the only IDE in this listing
    that doesn’t offer a “community” or stripped-down version available free of charge.
    Regardless, this is a solid piece of software that is developed by a reputable
    company, and it very well might be worth the cost.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: CLion 是一款付费的跨平台 IDE，适用于 Windows、macOS 和 Linux，由 JetBrains 开发。没错——这款软件是基于订阅的；从
    2024 年初开始，你可以以 $99.00 获得一年的个人使用许可。大型组织支付更多费用，初创公司支付较少。如果你是学生或发布开源项目，可以获得免费许可证。此外，还有
    30 天的试用期来测试软件。这是本列表中唯一不提供“社区版”或简化版免费版本的 IDE。尽管如此，这仍然是一款由知名公司开发的强大软件，可能非常值得这个价格。
- en: '*Figure 3.1* shows how the IDE looks in light mode (dark mode is the default
    option):'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3.1* 显示了 IDE 在浅色模式下的界面（深色模式是默认选项）：'
- en: '![](img/B19844_03_01.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19844_03_01.png)'
- en: 'Figure 3.1: The main window of the CLion IDE'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1：CLion IDE 的主窗口
- en: As you can see, this is a fully featured IDE, ready for anything and everything
    you might throw at it. Let’s talk about how it stands out.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，这是一款功能全面的 IDE，能够应对你可能遇到的任何需求。接下来我们来聊聊它的独特之处。
- en: Why you might like it
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你可能会喜欢它的原因
- en: 'Unlike the alternatives, C and C++ are the first and only languages supported
    by CLion. Many features of this IDE are specifically designed to support this
    environment and align with the C/C++ mindset. This is very visible when we compare
    features from other IDEs: code analysis, code navigation, integrated debugger,
    and refactoring tools can be found in competing software like the Visual Studio
    IDE. However, they are not as deeply and robustly oriented toward C/C++. This,
    of course, is a very difficult thing to measure objectively.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他选择不同，C 和 C++ 是 CLion 支持的第一个也是唯一的编程语言。这个 IDE 的许多功能专门设计用于支持这一环境，并符合 C/C++ 的思维模式。我们将其他
    IDE 的功能与 CLion 进行对比时，这一点尤为明显：代码分析、代码导航、集成调试器和重构工具在像 Visual Studio IDE 这样的竞争软件中都有。然而，它们并没有像
    CLion 一样深入且强大地面向 C/C++。当然，这一点很难客观衡量。
- en: Regardless, CMake is fully integrated into CLion out of the box and is the primary
    choice for the project format in this IDE. However, alternatives like Autotools
    and Makefile projects are in early support and can be used to eventually migrate
    toward CMake. It’s worth noting that CLion natively supports CMake’s CTest with
    many unit-testing frameworks and has dedicated flows to generate code, run tests,
    and collect and present results. You can use Google Test, Catch, Boost.Test, and
    doctest.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 不管怎样，CMake 已在 CLion 中完全集成，并且是该 IDE 中项目格式的首选。不过，像 Autotools 和 Makefile 项目这样的替代方案目前正处于早期支持阶段，可以用来最终迁移到
    CMake。值得注意的是，CLion 原生支持 CMake 的 CTest，并支持多种单元测试框架，并提供专门的流程来生成代码、运行测试、收集和展示结果。你可以使用
    Google Test、Catch、Boost.Test 和 doctest。
- en: A feature I especially like is the ability to work with Docker to develop C++
    programs in containers – more on that later. Meanwhile, let’s see how to start
    with CLion.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我特别喜欢的一个功能是能够与 Docker 配合使用，在容器中开发 C++ 程序——稍后会详细介绍。与此同时，让我们看看如何开始使用 CLion。
- en: Take your first steps
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 踏出你的第一步
- en: After downloading CLion from the official website ([https://www.jetbrains.com/clion](https://www.jetbrains.com/clion)),
    you can proceed with the usual installation process on the platform you’re using.
    CLion comes with an adequate visual installer on Windows (*Figure 3.2*) and macOS
    (*Figure 3.3*).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 从官方网站下载 CLion（[https://www.jetbrains.com/clion](https://www.jetbrains.com/clion)）后，你可以按照你所使用平台的常规安装流程进行安装。CLion
    在 Windows（*图 3.2*）和 macOS（*图 3.3*）上都提供了一个足够直观的可视化安装程序。
- en: '![](img/B19844_03_02.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19844_03_02.png)'
- en: 'Figure 3.2: CLion Setup for Windows'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.2：Windows 上的 CLion 安装设置
- en: '![](img/B19844_03_03.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19844_03_03.png)'
- en: 'Figure 3.3: CLion Setup for macOS'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.3：macOS 上的 CLion 安装设置
- en: 'On Linux, you’ll need to unpack the downloaded archive and run the installation
    script:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 上，你需要解压下载的档案并运行安装脚本：
- en: '[PRE0]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: These instructions may be outdated, so make sure to confirm with the CLion website.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这些说明可能已经过时，请确保通过 CLion 网站确认最新信息。
- en: On the first run, you’ll be asked to provide a license code or to start a 30-day
    free trial. Selecting the second option will allow you to experiment with the
    IDE and determine if it’s right for you. Next, you’ll be able to create a new
    project and select the targeted C++ version. Immediately after, CLion will detect
    the available compilers and CMake versions and attempt to build a test project
    to confirm everything is set up correctly. On some platforms (like macOS), you
    may get an automatic prompt to install developer tools as needed. On others, you
    may need to set them up yourself and ensure they’re available in the `PATH` environment
    variable.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一次运行时，你将被要求提供许可证代码或启动 30 天免费试用。选择第二个选项将允许你尝试该 IDE，并决定它是否适合你。接下来，你将能够创建一个新项目并选择目标
    C++ 版本。之后，CLion 将自动检测可用的编译器和 CMake 版本，并尝试构建一个测试项目，以确认所有设置正确。在某些平台（如 macOS）上，你可能会收到自动提示，要求根据需要安装开发者工具。在其他平台上，你可能需要自行设置并确保这些工具在
    `PATH` 环境变量中可用。
- en: Next, ensure your toolchain is configured according to your needs. Toolchains
    are configured per project, so go ahead and create a default CMake project. Then,
    navigate to your **Settings**/**Preferences** (*Ctrl*/*Command* + *Alt* + *S*)
    and select **Build, Execution, Deployment** > **CMake**. On this tab, you can
    configure the build profile (*Figure 3.3*). It may be useful to add a `Release`
    profile to build optimized artifacts without the debugging symbols. To add one,
    simply press the plus icon above the profile list. CLion will create a default
    `Release` profile for you. You can switch between profiles using the dropdown
    at the top of the main window.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，确保根据你的需求配置工具链。工具链是按项目配置的，所以请创建一个默认的 CMake 项目。然后，导航到 **设置**/**首选项** (*Ctrl*/*Command*
    + *Alt* + *S*)，选择 **构建、执行、部署** > **CMake**。在此标签页中，你可以配置构建配置文件（*图 3.3*）。如果需要，你可以添加一个
    `Release` 配置文件，以便在不带调试符号的情况下构建优化后的文件。要添加该配置文件，只需点击配置文件列表上方的加号图标。CLion 会为你创建一个默认的
    `Release` 配置文件。你可以通过主窗口顶部的下拉菜单在不同配置文件之间切换。
- en: 'Now, you can simply press *F9* to compile and run the program with the debugger
    attached. Follow up by reading the official documentation of CLion, as there are
    plenty of useful features to explore. I’d like to introduce you to one of my favorites:
    the debugger.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以简单地按 *F9* 编译并运行程序，同时附加调试器。之后，阅读 CLion 的官方文档，因为还有很多有用的功能值得探索。我想向你介绍我最喜欢的功能之一：调试器。
- en: 'Advanced feature: Debugger on steroids'
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高级功能：增强版调试器
- en: 'The debugging capabilities of CLion are truly cutting-edge and especially designed
    for C++. I was very pleased to discover one of the latest additions, CMake debugging,
    which includes many standard debugging features: stepping through code, breakpoints,
    watches, inlined value exploration, and more. The ability to explore variables
    in different scopes (cache, `ENV`, and the current scope) is extremely convenient
    when things don’t quite work as expected.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: CLion 的调试能力确实是前沿的，特别是为 C++ 设计的。我非常高兴发现了其中一个最新的功能——CMake 调试，它包括许多标准调试功能：代码逐步调试、断点、监视、内联值探索等。当某些事情无法按预期工作时，能够在不同作用域（缓存、`ENV`
    和当前作用域）中查看变量是极其方便的。
- en: 'For C++ debugging, you will get many standard features provided by the **GNU
    Project Debugger** (**GDB**), such as assembly view, breakpoints, step through,
    watchpoints, and so on, but there are also some major enhancements. In CLion,
    you’ll find a parallel stack view, which enables you to see all the threads in
    a graph-like diagram with all the current stack frames for each thread. There’s
    an advanced memory view feature to see the layout of the running program in RAM
    and modify the memory on the fly. CLion provides multiple other tools to help
    you understand what’s happening: register view, code disassembly, debugger console,
    core dump debugging, debugging of arbitrary executables, and many more.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 C++ 调试，你将获得由**GNU 项目调试器**（**GDB**）提供的许多标准功能，如汇编视图、断点、逐步调试、监视点等，但也有一些重要的增强功能。在
    CLion 中，你会发现一个并行堆栈视图，它可以让你以图形化的方式查看所有线程，并显示每个线程的当前堆栈帧。此外，还有一个高级内存视图功能，允许你查看正在运行的程序在
    RAM 中的布局，并即时修改内存。CLion 提供了多个其他工具，帮助你了解程序的运行情况：寄存器视图、代码反汇编、调试控制台、核心转储调试、任意可执行文件的调试等。
- en: To top it off, CLion has a very well-executed **Evaluate Expression** feature,
    which works wonders and even allows you to modify objects during program execution.
    Just right-click on a line of code and select this feature from the menu.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 作为补充，CLion拥有一项非常出色的**评估表达式**功能，它可以大显身手，甚至允许在程序执行过程中修改对象。只需右键点击一行代码，并从菜单中选择此功能。
- en: That’s all on CLion; it’s time to take a look at another IDE.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 关于CLion的介绍就到这里；现在是时候看看另一个IDE了。
- en: Starting with Visual Studio Code
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用Visual Studio Code
- en: '**Visual Studio Code** (**VS Code**) is a free, cross-platform IDE available
    for Windows, macOS, and Linux, developed by Microsoft. Don’t confuse it with another
    Microsoft product, the Visual Studio IDE (usually named after the year it was
    released, for example, Visual Studio 2022).'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**Visual Studio Code**（**VS Code**）是由Microsoft开发的一款免费的跨平台集成开发环境，适用于Windows、macOS和Linux。不要将它与另一款Microsoft产品——Visual
    Studio IDE混淆（通常以发布年份命名，例如Visual Studio 2022）。'
- en: VS Code is favored for its vast extension ecosystem and support for hundreds
    of programming languages (an estimated are over 220 different languages!). When
    GitHub was acquired by Microsoft, VS Code was introduced as something of a replacement
    for Atom.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: VS Code因其庞大的扩展生态系统和对数百种编程语言的支持而受到青睐（据估计，支持的语言超过220种！）。当GitHub被Microsoft收购时，VS
    Code被推出作为Atom的替代品。
- en: The overall design of the IDE is top-notch, as you can see in *Figure 3.4*.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 该IDE的整体设计非常出色，正如*图3.4*所示。
- en: '![](img/B19844_03_04.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19844_03_04.png)'
- en: 'Figure 3.4: The main window of VS Code'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.4：VS Code的主窗口
- en: Now, let’s find out what makes VS Code so special.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看是什么让VS Code如此特别。
- en: Why you might like it
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么你可能会喜欢它
- en: C++ isn’t the priority in terms of languages supported by VSC, but it’s quite
    close to the top, thanks to the many sophisticated language extensions available.
    This trade-off is rewarded with the ability to switch between many languages as
    needed while working in the same environment.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: C++虽然不是VSC支持的语言优先项，但由于有许多复杂的语言扩展，它离榜单前列很近。这个权衡带来了在同一环境下按需切换多种语言的能力。
- en: There’s a bit of a learning curve to this tool, as most extensions conform to
    the basic UI functionalities provided, rather than implementing advanced interfaces
    on their own. Many of the features will be available through the command palette
    (accessible by pressing *F1*), which requires you to type the name of the command
    instead of clicking an icon or a button. This is a reasonable sacrifice to keep
    VSC clean, fast, and free of charge. In fact, this IDE is so quick to load that
    I prefer to use it as a general-purpose text editor, even when I’m not working
    on a project.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个工具需要一些学习曲线，因为大多数扩展遵循基础UI功能，而不是实现独立的高级接口。许多功能可以通过命令面板访问（按*F1*键即可）。命令面板需要你输入命令名称，而不是点击图标或按钮。为了保持VSC简洁、快速且免费，这是一个合理的取舍。事实上，这款IDE加载速度非常快，即使在我不进行项目开发时，我也更愿意将它用作通用文本编辑器。
- en: That said, VS Code is truly powerful thanks to an enormous library of really
    good extensions, the vast majority of which are available for free. There are
    special extensions available for C++ and CMake, so let’s see how to configure
    them in the next section.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，VS Code凭借庞大的优秀扩展库而真正强大，其中绝大多数都是免费的。对于C++和CMake，特别提供了专用扩展，接下来我们将看看如何配置它们。
- en: Take your first steps
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始你的第一步
- en: 'VSC is available from the official website: [https://code.visualstudio.com/](https://code.visualstudio.com/).
    The website provide quite an extensive list of downloads for Windows and macOS,
    as well as for many Linux distributions: Debian, Ubuntu, Red Hat, Fedora, and
    SUSE. Follow the usual process on your platform to install the software. After
    that, you’ll want to install a bunch of extensions by going to the **Extensions
    Marketplace** (*Ctrl*/*Command + Shift + X*). The following are recommended to
    start with:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: VSC可以从官方网站获取：[https://code.visualstudio.com/](https://code.visualstudio.com/)。该网站提供了适用于Windows和macOS的下载链接，还涵盖了多个Linux发行版：Debian、Ubuntu、Red
    Hat、Fedora和SUSE。根据你平台的常规安装流程安装软件。之后，你可以通过访问**扩展市场**（*Ctrl*/*Command + Shift +
    X*）来安装一系列扩展。以下是推荐的初始扩展：
- en: C/C++ by Microsoft
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft的C/C++
- en: C/C++ Extension Pack by Microsoft
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft的C/C++扩展包
- en: CMake by twxs
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: twxs的CMake
- en: CMake Tools by Microsoft
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft的CMake工具
- en: They will provide the usual code highlighting and the ability to compile, run,
    and debug code straight from the IDE, but you might need to install the toolchain
    yourself. Usually, VS Code will suggest extensions to install in a pop - up window
    as you start opening relevant files, so you don’t necessarily need to go out on
    a hunt.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 它们将提供常规的代码高亮、编译、运行和调试代码的能力，但你可能需要自己安装工具链。通常，当你开始打开相关文件时，VS Code 会在弹出窗口中建议安装扩展，因此你不一定需要自己去找。
- en: I also suggest installing the **Remote – SSH by Microsoft** extension if you’re
    involved with remote projects, as this will make the experience much more coherent
    and comfortable; this extension not only takes care of file synchronization but
    will also enable you to remotely debug by attaching to the debugger on the remote
    machine.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你参与远程项目，我还建议安装 **Remote – SSH by Microsoft** 扩展，因为这将使体验更加连贯和舒适；该扩展不仅负责文件同步，还能通过附加到远程机器上的调试器来启用远程调试。
- en: However, there’s one more interesting extension that shifts the paradigm of
    working with projects; let’s see how.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，还有一个更有趣的扩展，它改变了处理项目的方式；让我们看看如何改变。
- en: 'Advanced feature: Dev Containers'
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高级功能：开发容器
- en: If you’re deploying your application to a production environment, whether you’re
    shipping the compiled artifact or running a build process, it’s crucial to ensure
    that all dependencies are present. Otherwise, you’ll get all sorts of problems.
    Even with all dependencies accounted for, different versions or configurations
    might cause your solution to behave differently from the development or staging
    environment. I’ve experienced such cases on numerous occasions. Before virtualization
    became prevalent, dealing with environmental issues was just a part of life.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将应用程序部署到生产环境中，无论是传输已编译的工件还是运行构建过程，确保所有依赖项都已存在至关重要。否则，你将遇到各种问题。即便所有依赖项都已考虑到，不同的版本或配置可能会导致你的解决方案在开发环境或预发布环境中表现不同。我在很多情况下都有过类似的经历。在虚拟化普及之前，处理环境问题就是生活的一部分。
- en: With the introduction of lightweight containers like Docker, things got much
    simpler. Suddenly, you were able to run a minified operating system with your
    service isolated to its own space. This isolation allowed all dependencies to
    be packaged with the container, freeing developers from a major headache.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 随着像 Docker 这样的轻量级容器的引入，一切变得更加简单。突然间，你能够运行一个精简的操作系统，并将服务隔离到自己的空间。这种隔离使得所有依赖项都可以与容器一起打包，从而解除了开发者的一大困扰。
- en: Until recently, developing inside a container involved manually building, running,
    and connecting to the container with a remote session from the IDE. This process
    wasn’t overly difficult, but it required manual steps that could be executed differently
    by various developers.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 直到最近，在容器中开发涉及手动构建、运行并通过 IDE 与远程会话连接到容器。这个过程并不难，但它需要手动操作，而这些操作可能会因不同开发者而有所不同。
- en: In recent years, Microsoft released an open standard called Dev Containers ([https://containers.dev/](https://containers.dev/))
    to help address this slight inconvenience. The specification mainly consists of
    a `devcontainer.json` file that you can place in your project repository, instructing
    IDEs on how to set up their development environment in a container.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，微软发布了一个开源标准——开发容器（[https://containers.dev/](https://containers.dev/)），以帮助解决这个小小的不便。该规范主要由一个`devcontainer.json`文件组成，你可以将其放入你的项目仓库，指示
    IDE 如何在容器中设置开发环境。
- en: 'To use this feature, simply install the **Dev Containers by Microsoft** extension
    and point it to a repository of an appropriately prepared project. If you’re undeterred
    by the challenges of switching the main `CMakeLists.txt`, feel free to try it
    with the book’s repository:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用此功能，只需安装 **Dev Containers by Microsoft** 扩展，并将其指向一个准备好的项目的仓库。如果你不介意修改主`CMakeLists.txt`，可以尝试使用本书的仓库：
- en: '[git@github.com:PacktPublishing/Modern-CMake-for-Cpp-2E.git](mailto:git@github.com:PacktPublishing/Modern-CMake-for-Cpp-2E.git
    )'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '[git@github.com:PacktPublishing/Modern-CMake-for-Cpp-2E.git](mailto:git@github.com:PacktPublishing/Modern-CMake-for-Cpp-2E.git)'
- en: I can confirm that other IDEs, like CLion, are adopting this standard, so it
    seems like a good practice to adopt if you’re facing the circumstances described.
    Time to move on to the next product from the Microsoft family.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以确认，其他 IDE，如 CLion，正在采用这一标准，所以如果你面临上述情况，采用这个标准似乎是一个不错的做法。接下来是微软家族的下一个产品。
- en: Starting with the Visual Studio IDE
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 Visual Studio IDE 开始
- en: The **Visual Studio** (**VS**) IDE is an IDE available for Windows developed
    by Microsoft. VS was available for macOS but is being deprecated in August 2024\.
    It’s important to distinguish it from VS Code, *the other IDE* by Microsoft.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**Visual Studio** (**VS**) 是一款由微软开发的适用于 Windows 的 IDE。曾经也有适用于 macOS 的版本，但将在
    2024 年 8 月停用。需要特别区分的是，它与微软的 *另一款 IDE* VS Code 是不同的。'
- en: 'VS comes in a few flavors: Community, Professional, and Enterprise. The Community
    version is free, allowing up to five users in a company. More mature companies
    will need to pay licensing fees, which start from $45 per user monthly. *Figure
    3.5* shows what VS Community looks like:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: VS 提供几种版本：社区版、专业版和企业版。社区版是免费的，适用于最多五个用户的公司。成熟的公司需要支付许可费用，费用从每个用户每月 $45 起。*图
    3.5* 显示了 VS 社区版的界面：
- en: '![](img/B19844_03_05.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19844_03_05.png)'
- en: 'Figure 3.5: The main window of VS 2022'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.5：VS 2022 的主窗口
- en: Like the other IDEs discussed in this chapter, you can enable dark mode if you
    prefer. Let’s move on to the noteworthy features of this IDE.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 像本章讨论的其他 IDE 一样，如果你更喜欢，可以启用暗黑模式。接下来，让我们看看这款 IDE 的一些值得注意的功能。
- en: Why you might like it
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你可能会喜欢它的原因
- en: This IDE shares many features with VS Code, offering an experience of a similar
    flavor but in a much more refined form. The suite is full of features, many of
    which utilize GUIs, wizards, and visual elements. Most of these features are available
    straight out of the box, rather than through extensions (although there is still
    a large and extensive package marketplace for additional functionality). In other
    words, it’s like VSC but much more advanced.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这款 IDE 与 VS Code 共享许多特性，提供了类似的体验，但在更精致的形式下。整个套件功能丰富，许多功能都利用了 GUI、向导和可视化元素。这些功能大多可以开箱即用，而不是通过扩展来实现（尽管仍然有一个庞大且丰富的包市场，供你获取额外功能）。换句话说，它就像
    VSC，但功能更为先进。
- en: 'Depending on the version, your testing tools will cover a wide range of tests:
    unit testing, performance testing, load testing, manual testing, Test Explorer,
    test coverage, IntelliTest, and code profiling. The profiler, in particular, is
    quite a valuable tool, and it’s available in the Community edition.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 根据版本的不同，你的测试工具将涵盖广泛的测试类型：单元测试、性能测试、负载测试、手动测试、测试资源管理器、测试覆盖率、IntelliTest 和代码分析工具。尤其是分析工具，它是一个非常有价值的工具，并且在社区版中也有提供。
- en: If you’re designing Windows desktop applications, VS provides visual editors
    and a large collection of components. There’s extensive support for the **Universal
    Windows Platform (UWP)**, which is the UI standard for Windows-based applications
    introduced in Windows 10\. This support allows for a sleek, modern design, heavily
    optimized for adaptive controls that scale well on different screens.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在设计 Windows 桌面应用程序，VS 提供了可视化编辑器和大量组件。对于 **通用 Windows 平台 (UWP)**，它有着广泛的支持，UWP
    是 Windows 10 中引入的 Windows 应用程序 UI 标准。该支持使得 UI 设计时尚现代，且对适应性控件进行了深度优化，可以很好地适配不同屏幕。
- en: Another thing worth mentioning is that even though VS is a Windows-only IDE,
    you can develop projects targeted for Linux and mobile platforms (Android and
    iOS). There’s also support for game developers using Windows-native libraries
    and Unreal Engine.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个值得一提的地方是，尽管 VS 是一款仅支持 Windows 的 IDE，但你仍然可以开发针对 Linux 和移动平台（Android 和 iOS）的项目。它还支持使用
    Windows 原生库和 Unreal Engine 的游戏开发者。
- en: Ready to see for yourself how it works? Here’s how to start.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 想亲自体验它是如何工作的吗？下面是开始使用的方法。
- en: Take your first steps
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始你的第一步
- en: 'This IDE is only available for Windows, and it follows a standard installation
    process. Start by downloading the installer from [https://visualstudio.microsoft.com/free-developer-offers/](https://visualstudio.microsoft.com/free-developer-offers/).
    After running the installer, you’ll be asked to pick the version (Community, Professional,
    or Enterprise) and select the workloads you want:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这款 IDE 仅适用于 Windows，并遵循标准的安装流程。首先从 [https://visualstudio.microsoft.com/free-developer-offers/](https://visualstudio.microsoft.com/free-developer-offers/)
    下载安装程序。运行安装程序后，你将被要求选择版本（社区版、专业版或企业版）并选择你需要的工作负载：
- en: '![](img/B19844_03_06.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19844_03_06.png)'
- en: 'Figure 3.6: Installer window for the VS IDE'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.6：VS IDE 安装器窗口
- en: 'Workloads are simply feature sets that allow VS to support the specific language,
    environment, or format of the program. Some workloads include Python, Node.js,
    or .NET. We’re of course interested in the ones related to C++ (*Figure 3.6*);
    there’s extensive support available for different use cases:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 工作负载实际上是一些功能集，它们允许 VS 支持特定语言、环境或程序格式。一些工作负载包括 Python、Node.js 或 .NET。当然，我们更关注与
    C++ 相关的工作负载（*图 3.6*）；针对不同使用场景，提供了广泛的支持：
- en: Desktop development with C++
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 C++ 进行桌面开发
- en: Universal Windows Platform development
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通用 Windows 平台开发
- en: Game development with C++
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 C++ 进行游戏开发
- en: Mobile development with C++
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 C++ 进行移动开发
- en: Linux development with C++
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 C++ 进行 Linux 开发
- en: Pick the ones that fit your desired application and press **Install**. Don’t
    worry about installing all options just in case – you can always modify your selection
    later by running the installer again. If you decide to configure the workload
    components more precisely, ensure to keep the **C++ CMake tools for Windows**
    or **C++ CMake tools for Linux** option enabled to get access to CMake support.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 选择适合你所需应用的选项并点击**安装**。不必担心是否安装了所有选项——你可以随时通过重新运行安装程序来修改选择。如果你决定更精确地配置工作负载组件，请确保保留**Windows
    的 C++ CMake 工具**或**Linux 的 C++ CMake 工具**选项，以便获得 CMake 支持。
- en: 'After installation, you can start the IDE and select **Create a new project**
    on the start window. You’ll be presented with multiple templates based on the
    workloads you installed previously. To work with CMake, choose the **CMake Project**
    template. Other options don’t necessarily use it. Upon creating your project,
    you can start it by pressing the green play button at the top of the window; the
    code will compile, and you’ll see the basic program executed with the following
    output:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，你可以启动 IDE 并在启动窗口中选择**创建新项目**。根据你之前安装的工作负载，系统会展示多个模板。如果要使用 CMake，选择**CMake
    项目**模板。其他选项不一定会使用它。在创建项目后，你可以通过点击窗口顶部的绿色播放按钮来启动它；代码会编译，并且你会看到基本程序执行后的输出：
- en: '[PRE1]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now, you’re ready to work with CMake in Visual Studio.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经准备好在 Visual Studio 中使用 CMake 了。
- en: 'Advanced feature: Hot Reload debugging'
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高级功能：Hot Reload 调试
- en: 'While running Visual Studio might be more resource-intensive and take more
    time to start, it offers numerous unmatched features. One significant game-changer
    is Hot Reload. Here’s how it works: open a C++ project, start it with a debugger
    attached, make a change in a code file, press the **Hot Reload** button (or *Alt
    + F10*), and your changes will immediately be reflected in the running application
    while maintaining the state.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管运行 Visual Studio 可能会消耗更多资源并且启动时间较长，但它提供了许多无可匹敌的功能。其中一个重大变化就是 Hot Reload。它的工作方式如下：打开一个
    C++ 项目，附加调试器启动，修改代码文件，点击**Hot Reload**按钮（或*Alt + F10*），你的更改会立即反映到正在运行的应用程序中，同时保持应用程序的状态。
- en: 'To ensure Hot Reload support is enabled, set these two options in the **Project
    > Properties > C/C++ > General** menu:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 为确保启用 Hot Reload 支持，请在**项目 > 属性 > C/C++ > 常规**菜单中设置以下两个选项：
- en: '**Debug Information Format** must be set to **Program Database for Edit and
    Continue /ZI**'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调试信息格式**必须设置为**程序数据库用于编辑和继续 /ZI**'
- en: '**Enable Incremental Linking** must be set to **Yes /INCREMENTAL**'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启用增量链接**必须设置为**是 /INCREMENTAL**'
- en: The behind-the-scenes mechanics of Hot Reload might seem like sorcery, but it’s
    an incredibly useful feature to have. There are some limitations, such as changes
    to global/static data, object layouts, or “time-traveling” changes (like altering
    the constructor of an already constructed object).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Hot Reload 的幕后机制可能看起来像是魔法，但它是一个非常实用的功能。虽然存在一些限制，比如全局/静态数据的更改、对象布局的调整，或是“时间旅行”式的更改（比如修改已经构造好的对象的构造函数）。
- en: 'You can find more about Hot Reload in the official documentation here: [https://learn.microsoft.com/en-us/visualstudio/debugger/hot-reload](https://learn.microsoft.com/en-us/visualstudio/debugger/hot-reload).'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在官方文档中找到更多关于 Hot Reload 的信息，链接地址：[https://learn.microsoft.com/en-us/visualstudio/debugger/hot-reload](https://learn.microsoft.com/en-us/visualstudio/debugger/hot-reload)。
- en: This concludes our discovery of the three main IDEs. The initial learning curve
    might look steep, but I promise that the effort put in to learn any of these platforms
    will pay off very quickly when you move on to more advanced tasks.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 本章节总结了三大主要的 IDE。虽然初学时可能会感到学习曲线陡峭，但我保证，当你进入更高级的任务时，投入的学习努力会很快得到回报。
- en: Summary
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter provides an in-depth look at using IDEs to optimize the programming
    process, particularly focusing on IDEs that deeply integrate with CMake. It offers
    a comprehensive guide for both beginners and experienced professionals, detailing
    the benefits of using an IDE and how to select one that best fits individual or
    organizational needs.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 本章深入探讨了如何使用 IDE 来优化编程过程，特别关注那些与 CMake 深度集成的 IDE。它为初学者和经验丰富的专业人士提供了全面的指南，详细说明了使用
    IDE 的好处以及如何选择最适合个人或组织需求的 IDE。
- en: We started with a discussion on the importance of IDEs in enhancing development
    speed and code quality, explaining what an IDE is and how it simplifies the various
    steps involved in software development by integrating tools like code editors,
    compilers, and debuggers. This was followed by a short reminder about toolchains,
    where we explained the necessity of their installation if they aren’t present
    in the system, and we presented a short list of the most common choices.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先讨论了 IDE 在提升开发速度和代码质量中的重要性，解释了什么是 IDE 以及它如何通过整合代码编辑器、编译器和调试器等工具，简化软件开发中的各个步骤。接下来，我们简要提醒了工具链的重要性，解释了如果系统中没有安装工具链则必须进行安装，并列出了最常见的选择。
- en: We discussed how to start with CLion and its unique features, and we took an
    advanced look at its debugging capabilities. VS Code, a free, cross-platform IDE
    by Microsoft, is recognized for its vast extension ecosystem and support for numerous
    programming languages. We guided you through the initial setup and its key extension
    installations, and we introduced an advanced feature called Dev Containers. The
    VS IDE, exclusive to Windows, provides a refined, feature-rich environment tailored
    to various user needs. The setup process, key features, and the advanced Hot Reload
    debugging feature were also covered.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了如何开始使用 CLion 及其独特功能，并深入了解了它的调试能力。VS Code 是微软推出的免费跨平台集成开发环境（IDE），因其庞大的扩展生态系统和对众多编程语言的支持而广受认可。我们引导您完成了初始设置及其关键扩展的安装，并介绍了一项名为
    Dev Containers 的高级功能。专为 Windows 设计的 VS IDE 提供了一个精致且功能丰富的环境，满足各种用户需求。我们还涵盖了设置过程、关键功能以及先进的
    Hot Reload 调试功能。
- en: Each IDE section provided insights into why you might choose a particular IDE,
    the steps to get started, and a look at an advanced feature that sets the IDE
    apart. We also emphasized the concept of remote development support, highlighting
    its growing importance in the industry.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 IDE 部分都提供了关于为什么选择特定 IDE 的见解，启动步骤，以及一个突显该 IDE 特点的高级功能。我们还强调了远程开发支持的概念，突出了它在行业中的日益重要性。
- en: In summary, this chapter serves as a foundational guide for programmers seeking
    to understand and choose an IDE, offering a clear overview of the top options,
    their unique benefits, and how to effectively use them in conjunction with CMake
    to enhance coding efficiency and project management. In the next chapter, we’ll
    learn the basics of project setup using CMake.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，本章作为程序员了解和选择 IDE 的基础指南，提供了主要选项的清晰概述，介绍了它们的独特优势，以及如何有效地与 CMake 配合使用，以提高编码效率和项目管理水平。在下一章中，我们将学习使用
    CMake 设置项目的基础知识。
- en: Further reading
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'For more information on the topics covered in this chapter, you can refer to
    the following:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 有关本章内容的更多信息，您可以参考以下资源：
- en: Qt Creator IDE, another CMake-supporting option to explore:[https://www.qt.io/product/development-tools](https://www.qt.io/product/development-tools)
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Qt Creator IDE，另一个支持 CMake 的选项：[https://www.qt.io/product/development-tools](https://www.qt.io/product/development-tools)
- en: Eclipse IDE for C/C++ developers, which supports CMake as well:[https://www.eclipse.org/downloads/packages/release/2023-12/r/eclipse-ide-cc-developers](https://www.eclipse.org/downloads/packages/release/2023-12/r/eclipse-ide-cc-developers)
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Eclipse IDE 适用于 C/C++ 开发者，也支持 CMake：[https://www.eclipse.org/downloads/packages/release/2023-12/r/eclipse-ide-cc-developers](https://www.eclipse.org/downloads/packages/release/2023-12/r/eclipse-ide-cc-developers)
- en: Xcode for macOS can also be used with CMake:[https://medium.com/practical-coding/migrating-to-cmake-in-c-and-getting-it-working-with-xcode-50b7bb80ae3d](https://medium.com/practical-coding/migrating-to-cmake-in-c-and-getting-it-working-with-xcode-50b7bb80ae3d)
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: macOS 的 Xcode 也可以与 CMake 一起使用：[https://medium.com/practical-coding/migrating-to-cmake-in-c-and-getting-it-working-with-xcode-50b7bb80ae3d](https://medium.com/practical-coding/migrating-to-cmake-in-c-and-getting-it-working-with-xcode-50b7bb80ae3d)
- en: CodeLite is another choice, thanks to the CMake plugin:[https://docs.codelite.org/plugins/cmake/](https://docs.codelite.org/plugins/cmake/)
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CodeLite 是另一个选择，感谢其 CMake 插件：[https://docs.codelite.org/plugins/cmake/](https://docs.codelite.org/plugins/cmake/)
- en: Join our community on Discord
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的 Discord 社区
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们社区的 Discord 频道，与作者及其他读者进行讨论：
- en: '[https://discord.com/invite/vXN53A7ZcA](https://discord.com/invite/vXN53A7ZcA)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://discord.com/invite/vXN53A7ZcA](https://discord.com/invite/vXN53A7ZcA)'
- en: '![](img/QR_Code94081075213645359.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code94081075213645359.png)'
