["```cpp\n#include \"TArraysGameMode.h\"\n#include \"Engine/Engine.h\"\n\nATArraysGameMode::ATArraysGameMode(const FObjectInitializer& ObjectInitializer) : Super(ObjectInitializer)\n{\n    if (GEngine)\n    {\n        GEngine->AddOnScreenDebugMessage(-1, 30.f, FColor::Red, \n        TEXT(\"Hello!\"));\n    }\n}\n```", "```cpp\ntemplate <class T>\nclass Number {\n    T value;\npublic:\n    Number(T val)\n    {\n        value = val;\n    }\n\n    T getSumWith(T val2);\n};\n\ntemplate <class T>\nT Number<T>::getSumWith(T val2)\n{\n    T retval;\n    retval = value + val2;\n    return retval;\n}\n```", "```cpp\nTArray<int> array; \n```", "```cpp\narray.Add( 1 ); \narray.Add( 10 ); \narray.Add( 5 ); \narray.Add( 20 ); \n```", "```cpp\narray.Insert( 9, 0 ); \n```", "```cpp\narray.Insert( 30, 2 ); \n```", "```cpp\nfor( int index = 0; index < array.Num(); index++ ) \n{ \n  // print the array element to the screen using debug message \n  GEngine->AddOnScreenDebugMessage( -1, 30.f, FColor::Red,  \n   FString::FromInt( array[ index ] ) ); \n} \n```", "```cpp\nfor (TArray<int>::TIterator it = array.CreateIterator(); it; ++it)\n{\n    GEngine->AddOnScreenDebugMessage(-1, 30.f, FColor::Green, FString::FromInt(*it));\n}\n```", "```cpp\nATArraysGameMode::ATArraysGameMode(const FObjectInitializer& ObjectInitializer) : Super(ObjectInitializer)\n{\n    if (GEngine)\n    {\n        TArray<int> array;\n        array.Add(1);\n        array.Add(10);\n        array.Add(5);\n        array.Add(20);\n        array.Insert(9, 0);// put a 9 in the front \n        array.Insert(30, 2);// put a 30 at index 2 \n        if (GEngine)\n        {\n            for (int index = 0; index < array.Num(); index++)\n            {\n                GEngine->AddOnScreenDebugMessage(index, 30.f, FColor::Red,\n                    FString::FromInt(array[index]));\n            }\n        }\n    }\n}\n```", "```cpp\nint index = array.Find( 10 ); // would be index 3 in image above \n```", "```cpp\nTSet<int> set; \nset.Add( 1 ); \nset.Add( 2 ); \nset.Add( 3 ); \nset.Add( 1 );// duplicate! won't be added \nset.Add( 1 );// duplicate! won't be added \n```", "```cpp\nfor( TSet<int>::TIterator it = set.CreateIterator(); it; ++it ) \n{ \n  GEngine->AddOnScreenDebugMessage( -1, 30.f, FColor::Red,  \n   FString::FromInt( *it ) ); \n} \n```", "```cpp\nTSet<int> X; \nX.Add( 1 ); \nX.Add( 2 ); \nX.Add( 3 ); \nTSet<int> Y; \nY.Add( 2 ); \nY.Add( 4 ); \nY.Add( 8 ); \nTSet<int> common = X.Intersect(Y); // 2 \n```", "```cpp\nTSet<int> uni = X.Union(Y); // 1, 2, 3, 4, 8 \n```", "```cpp\nTMap<FString, int> items; \nitems.Add( \"apples\", 4 ); \nitems.Add( \"donuts\", 12 ); \nitems.Add( \"swords\", 1 ); \nitems.Add( \"shields\", 2 ); \n```", "```cpp\nfor( TMap<FString, int>::TIterator it = items.CreateIterator(); it; ++it ) \n{ \n  GEngine->AddOnScreenDebugMessage( -1, 30.f, FColor::Red, \n  it->Key + FString(\": \") + FString::FromInt( it->Value ) ); \n} \n```", "```cpp\n#include <iostream> \n#include <set> \nusing namespace std; \n\nint main() \n{ \n  set<int> intSet; \n  intSet.insert( 7 ); \n  intSet.insert( 7 ); \n  intSet.insert( 8 ); \n  intSet.insert( 1 ); \n\n  for( set<int>::iterator it = intSet.begin(); it != intSet.end();  \n   ++it ) \n  { \n    cout << *it << endl; \n  } \n} \n```", "```cpp\n1 \n7 \n8 \n```", "```cpp\nset<int>::iterator it = intSet.find( 7 ); \nif( it != intSet.end() ) \n{ \n  //  7  was inside intSet, and *it has its value \n  cout << \"Found \" << *it << endl; \n} \n```", "```cpp\n#include <iostream> \n#include <string> \n#include <set> \nusing namespace std; \nint main() \n{ \n  set<string> names; \n  // so long as we don't have 3 names yet, keep looping, \n  while( names.size() < 3 ) \n  { \n    cout << names.size() << \" names so far. Enter a name\" << endl; \n    string name; \n    cin >> name; \n    names.insert( name ); // won't insert if already there, \n  } \n  // now print the names. the set will have kept order \n  for( set<string>::iterator it = names.begin(); it !=  \n   names.end(); ++it ) \n  { \n    cout << *it << endl; \n  } \n} \n```", "```cpp\n#include <iostream> \n#include <string> \n#include <map> \nusing namespace std; \nint main() \n{ \n  map<string, int> items; \n  items.insert( make_pair( \"apple\", 12 ) ); \n  items.insert( make_pair( \"orange\", 1 ) ); \n  items.insert( make_pair( \"banana\", 3 ) ); \n  // can also use square brackets to insert into an STL map \n  items[ \"kiwis\" ] = 44; \n\n  for( map<string, int>::iterator it = items.begin(); it !=  \n   items.end(); ++it ) \n  { \n    cout << \"items[ \" << it->first << \" ] = \" << it->second <<  \n     endl; \n  } \n} \n```", "```cpp\nitems[ apple ] = 12 \nitems[ banana ] = 3 \nitems[ kiwis ] = 44 \nitems[ orange ] = 1 \n```", "```cpp\n#include <iostream> \n#include <string> \n#include <map> \nusing namespace std; \nint main() \n{ \n  map<string, int> items; \n  cout << \"Enter 5 items, and their quantities\" << endl; \n  while( items.size() < 5 ) \n  { \n    cout << \"Enter item\" << endl; \n    string item; \n    cin >> item; \n    cout << \"Enter quantity\" << endl; \n    int qty; \n    cin >> qty; \n    items[ item ] = qty; // save in map, square brackets \n    // notation \n  } \n\n  for( map<string, int>::iterator it = items.begin(); it !=  \n   items.end(); ++it ) \n  { \n    cout << \"items[ \" << it->first << \" ] = \" << it->second <<  \n     endl; \n  } \n} \n```"]