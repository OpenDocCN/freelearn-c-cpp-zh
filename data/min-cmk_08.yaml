- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Installing Dependencies and ExternalProject_Add
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装依赖项和`ExternalProject_Add`
- en: In this chapter, we’re going to dive into `FetchContent` to download other libraries,
    they still ended up in the same build folder. Installing is a bit different. With
    installing, we keep the library entirely separate from the application when building
    it. There’s then a second step we take to install it in a location where our application
    can find it. Installing might sound mysterious, but it’s essentially just copying
    a collection of files from one location to another (albeit following an established
    convention).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入探讨`FetchContent`来下载其他库，它们最终还是会进入相同的构建文件夹。安装稍微不同。安装时，我们会在构建时将库与应用程序完全分离。然后，我们会采取第二步，将其安装到一个应用程序能够找到的位置。安装可能听起来神秘，但本质上只是将一组文件从一个位置复制到另一个位置（尽管需要遵循既定的约定）。
- en: Once we’re comfortable building and installing libraries manually, we’ll look
    at how to leverage `ExternalProject_Add` to significantly reduce the manual steps
    required when installing. This will allow us to integrate external libraries more
    cleanly with our ever-evolving application. Luckily, there aren’t too many new
    commands to learn, and when you’ve been through the process once, it’s easily
    transferable to other projects.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们熟悉了手动构建和安装库，我们将探讨如何利用`ExternalProject_Add`显著减少安装时所需的手动步骤。这将使我们能够更清洁地将外部库与我们不断发展的应用程序集成。幸运的是，学习的新命令不多，当你完成了一次过程后，它可以轻松地转移到其他项目中。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: What is installing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是安装
- en: Installing a library
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装一个库
- en: Using an installed library
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用已安装的库
- en: Using `ExternalProject_Add` to streamline installation
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`ExternalProject_Add`简化安装
- en: Handling multiple libraries with `ExternalProject_Add`
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`ExternalProject_Add`处理多个库
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow along, please ensure you have met the requirements outlined in [*Chapter
    1*](B21152_01.xhtml#_idTextAnchor019), *Getting Started*. These include the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟随本书内容，请确保你已满足[*第一章*](B21152_01.xhtml#_idTextAnchor019)《入门》一节中列出的要求。这些要求包括以下内容：
- en: A Windows, Mac, or Linux machine with an up-to-date **Operating** **System**
    (**OS**)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一台运行最新**操作** **系统**（**OS**）的Windows、Mac或Linux机器
- en: A working C/C++ compiler (a system default is recommended for each platform
    if you don’t already have this)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个可用的C/C++编译器（如果你没有，建议使用系统默认的编译器）
- en: 'The code examples in this chapter can be found by following this link: [https://github.com/PacktPublishing/Minimal-CMake](https://github.com/PacktPublishing/Minimal-CMake).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的代码示例可以通过以下链接找到：[https://github.com/PacktPublishing/Minimal-CMake](https://github.com/PacktPublishing/Minimal-CMake)。
- en: What is installing?
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是安装？
- en: Installing, at its core, is just copying files from one place to another. Once
    those files are copied to a particular location, applications (or other libraries)
    can search for them there when building.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 安装，本质上就是将文件从一个地方复制到另一个地方。一旦这些文件被复制到特定位置，应用程序（或其他库）在构建时就可以在那里查找它们。
- en: There are several reasons why installing is useful in practice. The first advantage
    is that you can build a library once, install only the necessary files to a known
    location, and then have multiple applications use it. This can save a lot of time
    and resources and let you avoid needlessly building the same code repeatedly.
    The other advantage is that only the required files are copied to the install
    location. When we build normally, the build folder gets filled up with a lot of
    intermediate files that the application, depending on our library, may not care
    about. When we install, we specify only the necessary files (usually the built
    library files such as `.lib`/`.a` or `.dll`/`.dylib`/`.so`, header files, and
    CMake configuration files). We also can more precisely control the interface of
    our library by only installing the header files that we want to make public in
    a layout that is simpler to use than the internal build structure.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 安装在实践中有几个优点。第一个优点是，你可以构建一次库，只将必要的文件安装到已知位置，然后让多个应用程序使用它。这可以节省大量时间和资源，避免不必要地重复构建相同的代码。另一个优点是，只有所需的文件才会被复制到安装位置。当我们正常构建时，构建文件夹会充满许多中间文件，这些文件应用程序可能不需要（取决于我们的库）。而当我们安装时，我们只会指定必要的文件（通常是构建后的库文件，如`.lib`/`.a`或`.dll`/`.dylib`/`.so`、头文件和CMake配置文件）。我们还可以通过只安装我们希望公开的头文件，并以比内部构建结构更简单的布局，来更精确地控制库的接口。
- en: By default, when we install a library, the files are copied to a predetermined
    system location. On macOS and Linux, this is usually `/usr/local/lib` for the
    libraries, `/``usr/local/include` for the header files, `/usr/local/bin` for executables,
    and `/usr/local/share` for any kind of documentation or license files. On Windows,
    this tends to be `C:/Program Files (x86)/<library-name>`, with the `lib`, `include`,
    `share`, and `bin` subfolders underneath the library name. When we get to the
    point of installing a library, we’ll review the folder structure in more detail
    and see which files are included.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，当我们安装一个库时，文件会被复制到预定的系统位置。在macOS和Linux上，这通常是`/usr/local/lib`（用于库文件）、`/usr/local/include`（用于头文件）、`/usr/local/bin`（用于可执行文件）和`/usr/local/share`（用于任何类型的文档或许可证文件）。在Windows上，这通常是`C:/Program
    Files (x86)/<library-name>`，库名称下会有`lib`、`include`、`share`和`bin`子文件夹。当我们进入安装库的阶段时，我们将更详细地回顾文件夹结构，并查看哪些文件被包含。
- en: To find an installed library, CMake needs to know where to look for it. The
    advantage of installing to one of the default locations mentioned earlier is that
    CMake already knows to search there, so we don’t need to provide any other information
    when configuring a project depending on that library. One of the downsides to
    this approach is that it changes the global host environment we’re running in,
    which might not always be what you want. This speaks to a lack of isolation that
    we’ll show you how to address later in *Installing a library*. Another issue to
    be aware of is that installing to a system location can often require elevated
    permissions that builders of the library may not have. For example, installing
    to `C:\Program Files\` on Windows requires administrator privileges.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到已安装的库，CMake需要知道在哪里查找。将库安装到前面提到的默认位置之一的好处是，CMake已经知道在哪里搜索，因此在配置依赖该库的项目时，我们不需要提供其他信息。此方法的一个缺点是它会改变我们运行的全局主机环境，这可能并非始终是你想要的。这涉及到缺乏隔离性，我们将在稍后的*安装库*部分中展示如何解决这个问题。另一个需要注意的问题是，安装到系统位置通常需要提升的权限，而库的构建者可能没有这些权限。例如，在Windows上将库安装到`C:\Program
    Files\`需要管理员权限。
- en: We’ll next look at the steps required to download and install a library.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将查看下载和安装库所需的步骤。
- en: Installing a library
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装库
- en: Before looking at using an installed library, let’s first install one ourselves
    using CMake. We’ll choose a library that we’re going to use for our *Game of Life*
    application to continue improving its functionality; the library we’re going to
    use is called **Simple Directmedia Layer** (**SDL**). SDL is a cross-platform
    windowing library that provides support for input, graphics, audio, and much more.
    SDL 2 is the latest stable release, though at the time of writing, SDL 3 is available
    in prerelease to try out. SDL 2 is distributed under the zlib license, which allows
    it to be used freely in any kind of software. To learn more about SDL, visit [https://www.libsdl.org/](https://www.libsdl.org/).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用已安装的库之前，我们先使用CMake安装一个库。我们将选择一个库，用于我们*生命游戏*应用程序，继续改进其功能；我们将使用的库叫做**Simple
    Directmedia Layer**（**SDL**）。SDL是一个跨平台的窗口库，支持输入、图形、音频等多种功能。SDL 2是最新的稳定版本，尽管在撰写本文时，SDL
    3已提供预发布版本供试用。SDL 2以zlib许可证发布，允许在任何类型的软件中自由使用。要了解更多关于SDL的信息，请访问[https://www.libsdl.org/](https://www.libsdl.org/)。
- en: SDL is an open source project and is conveniently hosted on GitHub; it can be
    accessed by visiting [https://github.com/libsdl-org/SDL](https://github.com/libsdl-org/SDL).
    From the SDL GitHub homepage, let’s start by copying the `.git` URL by clicking
    the `ch6/part-1/third-party` (as a reminder, the *Minimal CMake* accompanying
    examples can be found by going to [https://github.com/PacktPublishing/Minimal-CMake](https://github.com/PacktPublishing/Minimal-CMake)).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: SDL是一个开源项目，方便地托管在GitHub上；可以通过访问[https://github.com/libsdl-org/SDL](https://github.com/libsdl-org/SDL)来访问。从SDL的GitHub主页开始，通过点击`ch6/part-1/third-party`来复制`.git`
    URL（作为提醒，*Minimal CMake*的配套示例可以通过访问[https://github.com/PacktPublishing/Minimal-CMake](https://github.com/PacktPublishing/Minimal-CMake)找到）。
- en: 'Run the following command to clone the repo into `third-party/sdl`(there''s
    a `clone.sh/.bat` script you can use if you''d prefer to, along with some other
    convenience scripts containing the necessary commands to configure and build the
    library):'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令将仓库克隆到`third-party/sdl`（如果你更愿意的话，可以使用`clone.sh/.bat`脚本，还有一些其他便捷脚本包含了配置和构建库所需的命令）：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We’ve created the new `third-party` folder as a sibling of both `app` and `lib`
    to hold external dependencies. This is to keep code logically grouped within the
    current chapter, but in a real project, it could be moved to a top-level folder
    if that is more convenient. To avoid issues with the SDL repository being nested
    inside the `Minimal CMake` repository, the `third-party` folder has `sdl` added
    to its own `.gitignore` file. We could instead have used Git submodules and run
    `git submodule init` and `git submodule update`, but the idea here is to show
    each step of manually installing a library. Feel free to use Git submodules in
    your own projects if it simplifies configuration, but before doing so, ensure
    to read the later section, *Using ExternalProject_Add to streamline installation*,
    to see an alternative CMake provides.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了新的`third-party`文件夹，作为`app`和`lib`的同级目录，用来存放外部依赖项。这是为了将代码在当前章节中逻辑上分组，但在实际项目中，如果更方便的话，它可以被移动到顶层文件夹。为了避免SDL仓库被嵌套在`Minimal
    CMake`仓库中产生问题，`third-party`文件夹的`.gitignore`文件中已加入了`sdl`。我们本可以使用Git子模块并运行`git submodule
    init`和`git submodule update`，但这里的目的是展示手动安装库的每一步。如果在自己的项目中简化配置，您可以自由使用Git子模块，但在使用之前，请务必阅读后面的章节，*使用ExternalProject_Add简化安装*，以查看CMake提供的另一种替代方案。
- en: With the SDL repository cloned, before we build, we need to make sure that we’re
    using the right SDL release. The default branch (`main`) for SDL is now SDL 3,
    but as this is still in pre-release and under active development, we’ll use SDL
    2 for our *Game of Life* project. At the time of writing, the latest release is
    `2.30.2`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 克隆完SDL仓库后，在构建之前，我们需要确保使用正确的SDL版本。SDL的默认分支（`main`）现在是SDL 3，但由于此版本仍处于预发布阶段且在积极开发中，我们将使用SDL
    2进行我们的*生命游戏*项目。在写这篇文章时，最新版本是`2.30.2`。
- en: 'Change the directory to the `sdl` folder and check out the latest stable release
    (if you used the `clone.sh/.bat` script you''ll already be on the right branch):'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 将目录切换到`sdl`文件夹并检查最新的稳定版本（如果使用了`clone.sh/.bat`脚本，您已经在正确的分支上）：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: To find the latest release, from the SDL GitHub repository, click `release-2.XX.X`
    row (feel free to use `release-2.30.2`, which the examples were tested against).
    With the correct release selected, move back to the `third-party` directory (`cd
    ..`).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到最新的版本，您可以从SDL GitHub仓库中点击`release-2.XX.X`行（可以使用`release-2.30.2`，示例就是基于这个版本进行测试的）。选择正确的版本后，回到`third-party`目录（`cd
    ..`）。
- en: Cloning only what we need
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 仅克隆我们需要的内容
- en: To save having to clone the whole repo and perform the added step of checking
    out a specific tag, it’s possible to instead use the `git clone https://github.com/libsdl-org/SDL.git
    --branch release-2.30.2 --depth 1 sdl` command. This will only clone the branch
    we need and perform a shallow copy, omitting all but the most recent Git commit.
    This reduces the size of the repo from approximately 187 MB to 91 MB, roughly
    a 50% saving. The `clone.sh`/`bat` scripts use this approach and can be used instead
    of the preceding manual steps.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免克隆整个仓库并执行额外的检查特定标签的步骤，可以改用`git clone https://github.com/libsdl-org/SDL.git
    --branch release-2.30.2 --depth 1 sdl`命令。这样只会克隆我们需要的分支并执行浅克隆，省略除最新Git提交以外的所有内容。这样可以将仓库大小从大约187MB减少到91MB，节省了大约50%。`clone.sh`/`bat`脚本使用这种方法，可以替代前面的手动步骤。
- en: 'To keep the build folder outside of the SDL source tree, let’s run CMake from
    the `third-party` folder and pass the location of the source and build directory
    to CMake (called `sdl` and `build-sdl`, respectively):'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将构建文件夹放在SDL源代码树之外，让我们从`third-party`文件夹运行CMake，并将源代码和构建目录的位置传递给CMake（分别为`sdl`和`build-sdl`）：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Issuing this command will configure and generate build files for SDL, just like
    with our examples from earlier chapters. CMake will output a lot of diagnostic
    information from SDL to show what architecture it’s being built for, the compiler
    features it can find, and what standard library functions it has access to. This
    information is useful to understand what features SDL will use and can help diagnose
    problems if anything isn’t working correctly.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此命令将为SDL配置并生成构建文件，就像我们在前几章的示例中所做的那样。CMake将输出大量来自SDL的诊断信息，显示它为哪个架构构建，能够找到哪些编译器功能以及可以访问哪些标准库函数。这些信息对于了解SDL将使用哪些功能以及在出现问题时帮助诊断非常有用。
- en: 'After running the command, you should see this at the end of the output:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 运行命令后，您应该会在输出的末尾看到以下内容：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Before performing the build, there’s an important argument that we left out
    when first configuring. At the start of the chapter, we discussed how CMake will
    install to a default location if no override is specified. This is sometimes what
    you want, but a big downside is that by doing this, the build of your project
    is no longer self-contained. You are writing outside the confines of your project,
    which could cause unintentional changes to other applications on your system.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行构建之前，我们漏掉了一个重要的参数。当我们最初配置时，讨论了CMake如果没有指定覆盖位置，默认会安装到一个位置。这有时是你想要的，但一个很大的缺点是这样做会导致项目的构建不再是自包含的。你在项目的外部进行写操作，可能会对系统上的其他应用程序造成无意的更改。
- en: One solution to this is to opt for some kind of containerization or virtualization
    for the project (e.g., create a virtual machine specifically for *Minimal CMake*
    that can have all the required dependencies installed in the default system location).
    This will keep things isolated, but takes a bit more time and effort to set up.
    Fortunately, there is an alternative.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 解决此问题的一种方法是为项目选择某种容器化或虚拟化方案（例如，为*Minimal CMake*创建一个虚拟机，所有必需的依赖项可以安装在默认系统位置）。这样可以保持隔离，但需要更多的时间和精力来设置。幸运的是，还有一种替代方案。
- en: 'When configuring SDL, we can pass another command line argument called `CMAKE_INSTALL_PREFIX`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 配置SDL时，我们可以传递另一个命令行参数，称为`CMAKE_INSTALL_PREFIX`：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: └── third-party
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: └── 第三方
- en: ├── build-sdl
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: ├── build-sdl
- en: ├── install
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: ├── install
- en: └── sdl
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: └── sdl
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'cmake --build build-sdl --target install after the build command, we’re saying
    that we want to build the install target, which depends on the library to build.
    The library must therefore be built first, and then can be installed. The dependency
    graph looks like this:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: cmake --build build-sdl --target install 在构建命令之后，我们表示我们想要构建安装目标，该目标依赖于库的构建。因此，库必须首先构建，然后才能安装。其依赖图如下：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Remember that as we’re using a multi-config generator, doing this will, by
    default, build and install the `Debug` configuration. To build and install the
    `Release` version of the library, we need to specify the `Release` configuration
    explicitly:'
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 记住，由于我们使用的是多配置生成器，默认情况下，这将构建并安装`Debug`配置。要构建并安装库的`Release`版本，我们需要显式指定`Release`配置：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'It’s also possible to install the library using the separate CMake `install`
    command:'
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 也可以使用单独的CMake `install`命令安装库：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'For this command to work, you first need to have built the library, as running
    it after only configuring will generate the following error:'
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要使此命令正常工作，首先需要构建库，因为在仅配置后运行该命令会生成以下错误：
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Notice that by default, the `--install` command looks for the `Release` configuration
    rather than the `Debug` one. To have the install command perform as expected,
    first build the `Release` version of the library, then run the install command:'
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，默认情况下，`--install`命令会查找`Release`配置，而不是`Debug`配置。为了让安装命令按预期执行，首先构建库的`Release`版本，然后运行安装命令：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You can pass `--config` to the `--install` command as well to install the `Debug`
    or `RelWithDebInfo` version of the library if you’ve built those instead:'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你构建了`Debug`或`RelWithDebInfo`版本的库，也可以将`--config`传递给`--install`命令来安装这些版本：
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'cmake --install build-sdl CMAKE_DEBUG_POSTFIX variable. It’s often convenient
    to install the Debug and Release versions of a library to the same folder (as
    we’ve done with the install directory). If we built the Debug version of the library
    and installed it, and then built the Release version and installed it, the Debug
    library files would be overwritten. To avoid this, CMake can append a postfix
    to the Debug versions of the library (the convention is usually a single lowercase
    d). This means that in the install folder, we’ll see the following (on Windows
    the .dll files will be in the bin folder, with everything else in the lib folder):'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: cmake --install build-sdl CMAKE_DEBUG_POSTFIX变量。通常将调试版本和发布版本的库安装到同一文件夹中会很方便（就像我们在安装目录中所做的那样）。如果我们先构建了库的调试版本并安装它，然后构建了发布版本并安装它，调试库文件将被覆盖。为了避免这种情况，CMake可以将后缀添加到库的调试版本（通常约定使用小写字母d）。这意味着在安装文件夹中，我们会看到如下内容（在Windows上，.dll文件会在bin文件夹中，其他所有文件都会在lib文件夹中）：
- en: '[PRE12]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: git clone https://github.com/libsdl-org/SDL.git --branch release-2.30.2 --single-branch
    sdl --depth 1
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: git clone https://github.com/libsdl-org/SDL.git --branch release-2.30.2 --single-branch
    sdl --depth 1
- en: cmake -S sdl -B build-sdl -G "Ninja Multi-Config" -DCMAKE_INSTALL_PREFIX=install
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: cmake -S sdl -B build-sdl -G "Ninja Multi-Config" -DCMAKE_INSTALL_PREFIX=install
- en: cmake --build build-sdl --config Release
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: cmake --build build-sdl --config Release
- en: cmake --install build-sdl --config Release
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: cmake --install build-sdl --config Release
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: find_package(SDL2 CONFIG REQUIRED)
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: find_package(SDL2 CONFIG REQUIRED)
- en: '[PRE14]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: find_package(SDL2 CONFIG, we’re informing the find_package command to only look
    for config files, and not to fall back to Module mode if it can’t find the dependency
    that way. This helps ensure that we find the exact dependency we’re after. The
    third argument, REQUIRED, tells CMake to stop processing the CMakeLists.txt file
    if SDL2 cannot be found. This is mainly useful to ensure that we get clearer error
    messages and don’t continue configuration in an invalid state.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: find_package(SDL2 CONFIG，我们在这里告诉 find_package 命令只查找配置文件，如果找不到依赖项，它不会回退到模块模式。这有助于确保我们能找到我们所需的确切依赖项。第三个参数
    REQUIRED 告诉 CMake 如果找不到 SDL2，应该停止处理 CMakeLists.txt 文件。这主要有助于确保我们得到更清晰的错误信息，避免在无效状态下继续配置。
- en: 'The only other change we need to make to start using `SDL2` is to add a reference
    to it in our `target_link_libraries` command. The command now looks like this:'
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要开始使用 `SDL2`，我们唯一需要做的改动是将其添加到 `target_link_libraries` 命令中。现在的命令看起来像这样：
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: copy SDL2.dll to the same folder as the executable
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 SDL2.dll 复制到与可执行文件相同的文件夹中
- en: add_custom_command(
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: add_custom_command(
- en: TARGET ${PROJECT_NAME}
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: TARGET ${PROJECT_NAME}
- en: POST_BUILD
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: POST_BUILD
- en: COMMAND
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: COMMAND
- en: ${CMAKE_COMMAND} -E copy_if_different
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: ${CMAKE_COMMAND} -E copy_if_different
- en: $<TARGET_FILE:SDL2::SDL2>
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: $<TARGET_FILE:SDL2::SDL2>
- en: $<TARGET_FILE_DIR:${PROJECT_NAME}>
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: $<TARGET_FILE_DIR:${PROJECT_NAME}>
- en: VERBATIM)
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: VERBATIM)
- en: '[PRE16]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: cmake -B build
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: cmake -B build
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'CMake Error at CMakeLists.txt:4 (find_package):'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: CMake 错误位于 CMakeLists.txt 文件的第 4 行（find_package）：
- en: 'Could not find a package configuration file provided by "SDL2" with any of
    the following names:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 无法找到由 "SDL2" 提供的任何以下名称的包配置文件：
- en: SDL2Config.cmake
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: SDL2Config.cmake
- en: sdl2-config.cmake
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: sdl2-config.cmake
- en: Add the installation prefix of "SDL2" to CMAKE_PREFIX_PATH or set "SDL2_DIR"
    to a directory containing one of the above files. If "SDL2" provides a separate
    development package or SDK, be sure it has been installed.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 将 "SDL2" 的安装前缀添加到 CMAKE_PREFIX_PATH，或者将 "SDL2_DIR" 设置为包含上述文件之一的目录。如果 "SDL2"
    提供了一个单独的开发包或 SDK，请确保已安装。
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: find_package(
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: find_package(
- en: SDL2 CONFIG REQUIRED
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: SDL2 CONFIG REQUIRED
- en: NO_CMAKE_ENVIRONMENT_PATH
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: NO_CMAKE_ENVIRONMENT_PATH
- en: NO_CMAKE_SYSTEM_PACKAGE_REGISTRY
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: NO_CMAKE_SYSTEM_PACKAGE_REGISTRY
- en: NO_SYSTEM_ENVIRONMENT_PATH
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: NO_SYSTEM_ENVIRONMENT_PATH
- en: NO_CMAKE_PACKAGE_REGISTRY
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: NO_CMAKE_PACKAGE_REGISTRY
- en: SDL2_DIR), which will show the folder in which the dependency was found (for
    us, this should be /path/to/minimal-cmake/ch6/part-1/third-party/install/lib/cmake/SDL2).
    This can be checked by opening ch6/part-1/app/build/CMakeCache.txt and searching
    for SDL2_DIR (or more generally, <LIBRARY_NAME>_DIR), checking in the CMake GUI,
    or running cmake -L <build-folder> to quickly list all CMake cache variables (it’s
    also possible to use ccmake <build-folder> to view and edit cache variables from
    the terminal, though as mentioned in *Chapter 3*, *Using FetchContent with External
    Dependencies*, this is only available on macOS and Linux).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: SDL2_DIR），它会显示依赖项所在的文件夹（对于我们来说，应该是 /path/to/minimal-cmake/ch6/part-1/third-party/install/lib/cmake/SDL2）。可以通过打开
    ch6/part-1/app/build/CMakeCache.txt 文件并搜索 SDL2_DIR（或更一般地，<LIBRARY_NAME>_DIR），在
    CMake GUI 中检查，或运行 cmake -L <build-folder> 快速列出所有 CMake 缓存变量（也可以使用 ccmake <build-folder>
    从终端查看和编辑缓存变量，尽管如 *第 3 章* 所述，*使用 FetchContent 管理外部依赖*，这只适用于 macOS 和 Linux）。
- en: Providing the location of our library
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 提供库的位置
- en: 'When we configure the application, we need to tell CMake where to find our
    installed library. We can do this by setting `CMAKE_PREFIX_PATH` at the command
    line when running the configure step:'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当我们配置应用程序时，需要告诉 CMake 在哪里找到我们安装的库。我们可以通过在配置步骤中使用命令行设置 `CMAKE_PREFIX_PATH` 来实现：
- en: '[PRE19]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: CMake will now be able to find the library we installed in the earlier step.
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: CMake 现在能够找到我们在之前步骤中安装的库。
- en: 'In earlier versions of CMake, an absolute path needed to be provided to `CMAKE_PREFIX_PATH`.
    This could be worked around by using `$(pwd)` on macOS and Linux, or `%cd%` on
    Windows:'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在早期版本的 CMake 中，需要提供 `CMAKE_PREFIX_PATH` 的绝对路径。可以通过在 macOS 和 Linux 上使用 `$(pwd)`，或在
    Windows 上使用 `%cd%` 来解决这个问题：
- en: '[PRE20]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: cd ch6/part-1/third-party
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: cd ch6/part-1/third-party
- en: './everything.sh # (everything.bat on Windows)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: './everything.sh # （在 Windows 上是 everything.bat）'
- en: cd ../app
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: cd ../app
- en: cmake -B build -DCMAKE_PREFIX_PATH=../third-party/install
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: cmake -B build -DCMAKE_PREFIX_PATH=../third-party/install
- en: cmake --build build
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: cmake --build build
- en: '[PRE21]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: git clone https://github.com/libsdl-org/SDL.git --branch release-2.30.2 --depth
    1 sdl
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: git clone https://github.com/libsdl-org/SDL.git --branch release-2.30.2 --depth
    1 sdl
- en: cmake -S sdl -B build-sdl -G "Ninja Multi-Config" -DCMAKE_INSTALL_PREFIX=install
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: cmake -S sdl -B build-sdl -G "Ninja Multi-Config" -DCMAKE_INSTALL_PREFIX=install
- en: cmake --build build-sdl --config Release
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: cmake --build build-sdl --config Release
- en: cmake --install build-sdl --config Release
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: cmake --install build-sdl --config Release
- en: '[PRE22]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '...'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '"cacheVariables": {'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '"cacheVariables": {'
- en: '"CMAKE_PREFIX_PATH": "${sourceDir}/../third-party/install"'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '"CMAKE_PREFIX_PATH": "${sourceDir}/../third-party/install"'
- en: '}'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE23]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: cmake_minimum_required(VERSION 3.28)
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: cmake_minimum_required(VERSION 3.28)
- en: project(third-party)
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: project(third-party)
- en: include(ExternalProject)
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: include(ExternalProject)
- en: ExternalProject_Add(
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: ExternalProject_Add(
- en: SDL2
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: SDL2
- en: GIT_REPOSITORY https://github.com/libsdl-org/SDL.git
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: GIT_REPOSITORY https://github.com/libsdl-org/SDL.git
- en: GIT_TAG release-2.30.2
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: GIT_TAG release-2.30.2
- en: GIT_SHALLOW TRUE
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: GIT_SHALLOW TRUE
- en: CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>)
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>)
- en: '[PRE24]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: TMP_DIR      = <prefix>/tmp
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: TMP_DIR      = <prefix>/tmp
- en: STAMP_DIR    = <prefix>/src/<name>-stamp
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: STAMP_DIR    = <prefix>/src/<name>-stamp
- en: DOWNLOAD_DIR = <prefix>/src
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: DOWNLOAD_DIR = <prefix>/src
- en: SOURCE_DIR   = <prefix>/src/<name>
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: SOURCE_DIR   = <prefix>/src/<name>
- en: BINARY_DIR   = <prefix>/src/<name>-build
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: BINARY_DIR   = <prefix>/src/<name>-build
- en: INSTALL_DIR  = <prefix>
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: INSTALL_DIR  = <prefix>
- en: LOG_DIR      = <STAMP_DIR>
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: LOG_DIR      = <STAMP_DIR>
- en: '[PRE25]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: .
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: .
- en: └── build
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: └── build
- en: └── SDL2-prefix
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: └── SDL2-prefix
- en: ├── bin
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: ├── bin
- en: ├── include
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: ├── include
- en: │    └── SDL2
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: │    └── SDL2
- en: ├── lib
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: ├── lib
- en: │    ├── cmake
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: │    ├── cmake
- en: │    └── pkgconfig
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: │    └── pkgconfig
- en: ├── share
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: ├── share
- en: │    ├── aclocal
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: │    ├── aclocal
- en: │    └── licenses
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: │    └── licenses
- en: ├── src
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: ├── src
- en: │    ├── SDL2
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: │    ├── SDL2
- en: │    ├── SDL2-build
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: │    ├── SDL2-build
- en: │    └── SDL2-stamp
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: │    └── SDL2-stamp
- en: └── tmp
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: └── tmp
- en: '[PRE26]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '"cacheVariables": {'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '"cacheVariables": {'
- en: '"CMAKE_PREFIX_PATH": "${sourceDir}/../third-party/build/SDL2-prefix"'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '"CMAKE_PREFIX_PATH": "${sourceDir}/../third-party/build/SDL2-prefix"'
- en: '}'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE27]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '-- Install configuration: ""'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: -- 安装配置：""
- en: '[PRE28]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: get_property(isMultiConfig GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: get_property(isMultiConfig GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
- en: if(NOT isMultiConfig)
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: if(NOT isMultiConfig)
- en: if(NOT CMAKE_BUILD_TYPE)
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: if(NOT CMAKE_BUILD_TYPE)
- en: '# set Debug as default build type if one is not provided (match CMake default
    behavior)'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '# 如果没有提供构建类型，则默认为 Debug（匹配 CMake 默认行为）'
- en: set(CMAKE_BUILD_TYPE
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: set(CMAKE_BUILD_TYPE
- en: Debug
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: Debug
- en: CACHE STRING "" FORCE)
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: CACHE STRING "" FORCE)
- en: endif()
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: endif()
- en: '# give different build types their own folder with single config generators'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '# 为不同的构建类型分配自己的文件夹，适用于单配置生成器'
- en: set(build_type_dir ${CMAKE_BUILD_TYPE})
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: set(build_type_dir ${CMAKE_BUILD_TYPE})
- en: '# pass through build type arg to ExternalProject_Add command'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '# 将构建类型参数传递给ExternalProject_Add命令'
- en: set(build_type_arg -DCMAKE_BUILD_TYPE=$<CONFIG>)
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: set(build_type_arg -DCMAKE_BUILD_TYPE=$<CONFIG>)
- en: endif()
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: endif()
- en: '[PRE29]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: ExternalProject_Add(
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: ExternalProject_Add(
- en: '...'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/SDL2-prefix/src/SDL2-build/${build_type_dir}
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/SDL2-prefix/src/SDL2-build/${build_type_dir}
- en: INSTALL_DIR ${CMAKE_CURRENT_SOURCE_DIR}/install
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: INSTALL_DIR ${CMAKE_CURRENT_SOURCE_DIR}/install
- en: CMAKE_ARGSBINARY_DIR to point to a folder mapping to the current configuration
    (we’ll get the same layout as before with multi-config generators), and in CMAKE_ARGS,
    we pass through the build type (e.g., CMAKE_BUILD_TYPE=Debug) to use at configure
    time.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: CMAKE_ARGSBINARY_DIR 指向与当前配置相对应的文件夹（我们会得到与多配置生成器相同的布局），并在 CMAKE_ARGS 中传递构建类型（例如，CMAKE_BUILD_TYPE=Debug）以供配置时使用。
- en: 'If we test this with a single-config generator by running the below commands:'
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果我们通过运行以下命令使用单配置生成器进行测试：
- en: '[PRE30]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We’ll see this printed in the install output, instead of an empty string as
    before:'
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将在安装输出中看到这一点，而不是像之前那样的空字符串：
- en: '[PRE31]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We can specify a different configuration explicitly, such as the following:'
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以显式地指定不同的配置，例如以下内容：
- en: '[PRE32]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We’d then see the following in the install output:'
  id: totrans-185
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后我们将在安装输出中看到以下内容：
- en: '[PRE33]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: ExternalProject_Add(
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: ExternalProject_Add(
- en: bgfxt
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: bgfxt
- en: GIT_REPOSITORY https://github.com/bkaradzic/bgfx.cmake.git
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: GIT_REPOSITORY https://github.com/bkaradzic/bgfx.cmake.git
- en: GIT_TAG v1.127.8710-464
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: GIT_TAG v1.127.8710-464
- en: GIT_SHALLOW TRUE
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: GIT_SHALLOW TRUE
- en: BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/bgfxt-build/${build_type_dir}
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/bgfxt-build/${build_type_dir}
- en: INSTALL_DIR ${CMAKE_CURRENT_SOURCE_DIR}/install
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: INSTALL_DIR ${CMAKE_CURRENT_SOURCE_DIR}/install
- en: CMAKE_ARGS ${build_type_arg} -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: CMAKE_ARGS ${build_type_arg} -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>
- en: CMAKE_CACHE_ARGS -DCMAKE_DEBUG_POSTFIX:STRING=d)
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: CMAKE_CACHE_ARGS -DCMAKE_DEBUG_POSTFIX:STRING=d)
- en: ExternalProject_Add(
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: ExternalProject_Add(
- en: bgfx
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: bgfx
- en: GIT_REPOSITORY https://github.com/bkaradzic/bgfx.cmake.git
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: GIT_REPOSITORY https://github.com/bkaradzic/bgfx.cmake.git
- en: GIT_TAG v1.127.8710-464
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: GIT_TAG v1.127.8710-464
- en: GIT_SHALLOW TRUE
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: GIT_SHALLOW TRUE
- en: DEPENDS bgfxt
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: DEPENDS bgfxt
- en: BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/bgfx-build/${build_type_dir}
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/bgfx-build/${build_type_dir}
- en: INSTALL_DIR ${CMAKE_CURRENT_SOURCE_DIR}/install
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: INSTALL_DIR ${CMAKE_CURRENT_SOURCE_DIR}/install
- en: CMAKE_ARGS ${build_type_arg} -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: CMAKE_ARGS ${build_type_arg} -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>
- en: -DBGFX_LIBRARY_TYPE=SHARED -DBGFX_BUILD_TOOLS=OFF
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: -DBGFX_LIBRARY_TYPE=SHARED -DBGFX_BUILD_TOOLS=OFF
- en: -DBGFX_BUILD_EXAMPLES=OFF
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: -DBGFX_BUILD_EXAMPLES=OFF
- en: CMAKE_CACHE_ARGS -DCMAKE_DEBUG_POSTFIX:STRING=d)
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: CMAKE_CACHE_ARGS -DCMAKE_DEBUG_POSTFIX:STRING=d)
- en: '[PRE34]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: -DBGFX_LIBRARY_TYPE=SHARED -DBGFX_BUILD_TOOLS=OFF
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: -DBGFX_LIBRARY_TYPE=SHARED -DBGFX_BUILD_TOOLS=OFF
- en: -DBGFX_BUILD_EXAMPLES=OFF
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: -DBGFX_BUILD_EXAMPLES=OFF
- en: '[PRE35]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: ./build/shared-ninja/Debug/minimal-cmake_game-of-life_window
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: ./build/shared-ninja/Debug/minimal-cmake_game-of-life_window
- en: '[PRE36]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
