- en: Chapter 5. Delving into the Boost.Asio Library
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。深入了解Boost.Asio库
- en: 'Now that we are able to run the `io_service` object and give it some work to
    do, it is time for us to find out more about other objects in the `Boost.Asio`
    library in order to develop the network application. All works of the `io_service`
    object we used before are run asynchronously but not in a serialized order, which
    means we are not able to determine the order of the `io_service` object''s work
    that will be run. Also, we have to consider what we will do if our application
    encounters any errors at runtime and think about time interval in running any
    `io_service` object work. Therefore, in this chapter, we will discuss the following
    topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们能够运行`io_service`对象并给它一些工作要做，是时候了解更多关于`Boost.Asio`库中的其他对象，以开发网络应用程序。我们之前使用的`io_service`对象的所有工作都是异步运行的，但不是按顺序进行的，这意味着我们无法确定将运行`io_service`对象的工作的顺序。此外，我们还必须考虑如果我们的应用程序在运行时遇到任何错误会怎么做，并考虑运行任何`io_service`对象工作的时间间隔。因此，在本章中，我们将讨论以下主题：
- en: Serially executing the work of the `io_service` object
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 串行执行`io_service`对象的工作
- en: Catching the exception(s) and handling them properly
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 捕获异常并正确处理它们
- en: Executing the work in the desired amount of time
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在所需的时间内执行工作
- en: Serializing the I/O service work
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 串行化I/O服务工作
- en: Suppose we want to queue up the work to be done but the order is important.
    If we just apply the asynchronous method, we won't know the order of work we will
    get. We need to make sure that the order of work is the one we want and have designed
    it to be. For instance, if we post Work A, Work B, and Work C, in that order,
    we want to keep that order at runtime.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要排队要做的工作，但顺序很重要。如果我们只应用异步方法，我们就不知道我们将得到的工作顺序。我们需要确保工作的顺序是我们想要的，并且已经设计好了。例如，如果我们按顺序发布Work
    A，Work B和Work C，我们希望在运行时保持该顺序。
- en: Using the strand function
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用strand函数
- en: '**Strand** is a class in the `io_service` object that provides handler execution
    serialization. It can be used to ensure the work we have will be executed serially.
    Let us examine the following code to understand serializing by using the `strand`
    function. But first, we will start without using the `strand()` and `lock()` functions:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**Strand**是`io_service`对象中的一个类，它提供了处理程序执行的串行化。它可以用来确保我们的工作将被串行执行。让我们来看一下下面的代码，以了解如何使用`strand`函数进行串行化。但首先，我们将在不使用`strand()`和`lock()`函数的情况下开始：'
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Save the preceding code as `nonstrand.cpp` and compile it with the following
    command:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 将上述代码保存为`nonstrand.cpp`，并使用以下命令编译它：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, run it by typing `nonstrand` in the console window. We will get an output
    similar to the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在控制台窗口中输入`nonstrand`来运行它。我们将得到类似以下的输出：
- en: '![Using the strand function](img/00031.jpeg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![使用strand函数](img/00031.jpeg)'
- en: 'You may get a different output, and running the program several times does,
    in fact, yield different orders of the results. This is because, as we discussed
    in the previous chapter, without the `lock` object, the output will be unsynchronized,
    shown as follows. We can notice that the result looks disordered:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会得到不同的输出，事实上，多次运行程序会产生不同顺序的结果。这是因为，正如我们在上一章中讨论的，没有`lock`对象，输出将是不同步的，如下所示。我们可以注意到结果看起来是无序的：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, let us apply the `strand` function to synchronize the flow of the program.
    Type the following code and save it as `strand.cpp`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们应用`strand`函数来同步程序的流程。输入以下代码并将其保存为`strand.cpp`：
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Compile the preceding code by using the following command:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令编译上述代码：
- en: '[PRE6]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We make just a little modification from `nonstrand.cpp` to `strand.cpp`, but
    the impact is big. Before we run the program, let us distinguish the code between
    `nonstrand.cpp` and `strand.cpp`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只对`nonstrand.cpp`进行了一点修改，改为`strand.cpp`，但影响很大。在运行程序之前，让我们区分一下`nonstrand.cpp`和`strand.cpp`之间的代码：
- en: '[PRE7]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We use the `post()` function in the `io_service` object to give it work. But
    by using this method, the flow of the program is unpredictable because it is not
    synchronized:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`post()`函数在`io_service`对象中给它工作。但是通过使用这种方法，程序的流程是不可预测的，因为它不是同步的：
- en: '[PRE8]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then, we use the `strand` object to give the work to the `io_service` object.
    By using this method, we will ensure that the order of the work is exactly the
    same as what we have stated in the code. To prove it, let''s take a look at the
    following output:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用`strand`对象将工作交给`io_service`对象。通过使用这种方法，我们将确保工作的顺序与我们在代码中声明的顺序完全相同。为了证明这一点，让我们来看一下以下输出：
- en: '![Using the strand function](img/00032.jpeg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![使用strand函数](img/00032.jpeg)'
- en: 'The order of the work is the same as the sequence of the work in our code.
    We are shown the output of the work in numerical order, which is:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 工作的顺序与我们代码中的工作顺序相同。我们以数字顺序显示工作的输出，即：
- en: '[PRE9]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: And, if you remember, we continue to omit the `lock()` function from the `Print()`
    function and it still runs properly due to the `strand` object's usage. Now, no
    matter how many times we re-run the program, the results are always in ascending
    order.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 而且，如果你记得，我们继续从`Print()`函数中省略`lock()`函数，但由于`strand`对象的使用，它仍然可以正常运行。现在，无论我们重新运行程序多少次，结果总是按升序排列。
- en: Wrapping a handler through the strand object
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过strand对象包装处理程序
- en: 'There is a function in `boost::asio::strand` called the `wrap()` method. Based
    on the official Boost documentation, it creates a new handler function object
    that will automatically pass the wrapped handler to the `strand` object''s dispatch
    function when it is called. Let us look at the following code to explain it:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`boost::asio::strand`中有一个名为`wrap()`的函数。根据官方Boost文档，它创建一个新的处理程序函数对象，当调用时，它将自动将包装的处理程序传递给`strand`对象的调度函数。让我们看一下以下代码来解释它：'
- en: '[PRE10]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Give the preceding code the name `strandwrap.cpp,` then compile it by using
    the following command:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 给上述代码命名为`strandwrap.cpp`，然后使用以下命令编译它：
- en: '[PRE11]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, run the program and we will get the following output:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行程序，我们将得到以下输出：
- en: '![Wrapping a handler through the strand object](img/00033.jpeg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![通过strand对象包装处理程序](img/00033.jpeg)'
- en: 'However, if we run the program many times, it might produce a random output
    like the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们多次运行程序，可能会产生如下随机输出：
- en: '[PRE12]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Although the work is guaranteed to be executed serially, it is not guaranteed
    which work's order actually takes place as a result of the built-in handler wrapper.
    And if the order is really important, we have to look at the built-in handler
    wrapper itself when using the `strand` object.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然工作保证按顺序执行，但实际发生的工作顺序并不是保证的，这是由于内置的处理程序包装器。如果顺序真的很重要，我们必须在使用`strand`对象时查看内置的处理程序包装器本身。
- en: Handling exceptions and errors
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理异常和错误
- en: Sometimes, our code will throw an exception or error at runtime. As you may
    remember in our discussion of the `lexical.cpp` in [Chapter 3](part0025_split_000.html#page
    "Chapter 3. Introducing the Boost C++ Libraries"), *Introducing the Boost C++
    Libraries*, we must sometimes use exception handling in our code, and we will
    now dig it up to delve into exception and error handling.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们的代码会在运行时抛出异常或错误。正如你可能记得在我们讨论[第3章](part0025_split_000.html#page "第3章。介绍Boost
    C++库")中的`lexical.cpp`时，*介绍Boost C++库*，我们有时必须在代码中使用异常处理，现在我们将挖掘它来深入了解异常和错误处理。
- en: Handling an exception
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理异常
- en: An exception is a way of reacting to a situation in which the code has exceptional
    circumstances by transferring control to the handler. To handle the exception,
    we need to use the `try-catch` block in our code; then, if an exceptional circumstance
    arises, an exception will be thrown to the exception handler.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 异常是一种在代码出现异常情况时通过将控制权转移给处理程序来对情况做出反应的方式。为了处理异常，我们需要在代码中使用`try-catch`块；然后，如果出现异常情况，异常将被抛出到异常处理程序。
- en: 'Now, take a look at the following code to see how exception handling is used:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，看一下以下代码，看看异常处理是如何使用的：
- en: '[PRE13]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Save the preceding code as `exception.cpp` and run the following command to
    compile it:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 将前面的代码保存为`exception.cpp`，并运行以下命令编译它：
- en: '[PRE14]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then, run the program and you should get the following output:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，运行程序，你应该会得到以下输出：
- en: '![Handling an exception](img/00034.jpeg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![处理异常](img/00034.jpeg)'
- en: As we can see, we are not shown the line from `std::cout << "Thread " << counter
    << " End.\n";` because of the exception. When the work of the `io_service` object
    is run, it always throws an exception by using the `throw` keyword so that the
    exception will be caught by the `catch` block within the `WorkerThread` function,
    since the `iosvc->run()` function is inside the `try` block.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，由于异常，我们没有看到`std::cout << "Thread " << counter << " End.\n";`这一行。当`io_service`对象的工作运行时，它总是使用`throw`关键字抛出异常，以便异常将被`WorkerThread`函数内的`catch`块捕获，因为`iosvc->run()`函数在`try`块内。
- en: We can also see that although we post work for the `io_service` object five
    times, the exception handling only handle two exceptions because once the thread
    has finished, the `join_all()` function in the thread will finish the thread and
    exit the program. In other words, we can say that once the exception is handled,
    the thread exits to join the call. Additional code that might have thrown an exception
    will never be called.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以看到，尽管我们为`io_service`对象发布了五次工作，但异常处理只处理了两次异常，因为一旦线程完成，线程中的`join_all()`函数将完成线程并退出程序。换句话说，我们可以说一旦异常被处理，线程就退出以加入调用。可能会抛出异常的其他代码将永远不会被调用。
- en: 'How about if we put in the `io_service` object''s work invocation recursively?
    Will it lead to an infinitely running program? Let us try to throw the exception
    infinitely. The code will look like the following:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将`io_service`对象的工作调用递归放入呢？这会导致一个无限运行的程序吗？让我们尝试无限抛出异常。代码将如下所示：
- en: '[PRE15]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Save the preceding code as `exception2.cpp` and compile it by using the following
    command:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 将前面的代码保存为`exception2.cpp`，并使用以下命令编译它：
- en: '[PRE16]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, let us examine the code:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们检查代码：
- en: '[PRE17]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![Handling an exception](img/00035.jpeg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![处理异常](img/00035.jpeg)'
- en: Fortunately, the program was able to finish successfully. This happened because
    the exception propagated through the `run()` function and the worker threads exited.
    After that, all the threads finished and the `join_all()` function was called.
    That is why the program exits even though there is still work left in the `io_service`
    object.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，程序能够成功完成。这是因为异常通过`run()`函数传播，工作线程退出。之后，所有线程都完成了，并且调用了`join_all()`函数。这就是为什么程序退出，即使`io_service`对象中还有工作未完成。
- en: Handling an error
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理错误
- en: In our previous example, we used the `run()` function without any parameters,
    but in fact, the function has two overload methods, `std::size_t run()` and `std::size_t
    run(boost::system::error_code & ec)`. The latter method has an error code parameter
    that will be set if an error occurs.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的例子中，我们使用了`run()`函数而没有任何参数，但实际上，该函数有两个重载方法，`std::size_t run()`和`std::size_t
    run(boost::system::error_code & ec)`。后一个方法有一个错误代码参数，如果发生错误，它将被设置。
- en: 'Now, let us try to use an error code as an input parameter in the `run()` function.
    Take a look at the following code:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试在`run()`函数中使用错误代码作为输入参数。看一下以下代码：
- en: '[PRE19]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Save the preceding code as `errorcode.cpp` and use the following command to
    compile the code:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 将前面的代码保存为`errorcode.cpp`，并使用以下命令编译代码：
- en: '[PRE20]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, run the program by typing the `errorcode` command in the console. As a
    result of doing so, the program will crash. The following screenshot shows the
    output:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在控制台中输入`errorcode`命令运行程序。由于这样做，程序将崩溃。以下截图显示了输出：
- en: '![Handling an error](img/00036.jpeg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![处理错误](img/00036.jpeg)'
- en: 'We intend to retrieve the error code by using the following code:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们打算通过以下代码检索错误代码：
- en: '[PRE21]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'And we can catch the error by using the `if` block, as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`if`块来捕获错误，如下所示：
- en: '[PRE22]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: However, in error variable approach, user exceptions translate to `boost::asio`
    exceptions; thus, the error variable `ec` does not interpret the user exception
    as an error so the exception is not caught by the handler. If the `Boost.Asio`
    library needs to throw an error, it will become an exception if there is no error
    variable, or it will be converted into an error variable. It is better if we keep
    using the `try-catch` block to catch any exceptions or errors.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在错误变量方法中，用户异常会转换为`boost::asio`异常；因此，错误变量`ec`不会将用户异常解释为错误，因此处理程序不会捕获异常。如果`Boost.Asio`库需要抛出错误，如果没有错误变量，它将变为异常，或者将转换为错误变量。最好继续使用`try-catch`块来捕获任何异常或错误。
- en: 'Also, we have to examine the type of exception, which is either system failure
    or context failure. If it is system failure, then we have to invoke the `stop()`
    function in the `io_service` class to ensure the work object has been destroyed
    in order for the program to be able to exit. In contrast, if the exception is
    context failure, we need the worker thread to call the `run()` function once more
    in order to prevent the thread from dying. Now, take a look at the following code
    to understand the concept:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还需要检查异常的类型，即系统故障或上下文故障。如果是系统故障，我们必须调用`io_service`类中的`stop()`函数，以确保工作对象已被销毁，以便程序能够退出。相反，如果异常是上下文故障，我们需要工作线程再次调用`run()`函数，以防止线程死亡。现在，让我们看以下代码以理解这个概念：
- en: '[PRE23]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Save the preceding code as `errorcode2.cpp` and then compile it by executing
    the following command:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 将上述代码保存为`errorcode2.cpp`，然后通过执行以下命令进行编译：
- en: '[PRE24]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'If we run the program, we will see that it will not exit, and we have to press
    *Ctrl* + *C* to stop the program:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行程序，会发现它不会退出，我们必须按*Ctrl* + *C*来停止程序：
- en: '![Handling an error](img/00037.jpeg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![处理错误](img/00037.jpeg)'
- en: 'If we see the following code snippet:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们看到以下代码片段：
- en: '[PRE25]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The worker thread is looping. This is also the case when an exception occurs
    in the output result (indicated by the `Throw Exception` and the `Exception Message:
    The Exception!!!` output). Call the `run()` function again so it will post a new
    event to the queue. Of course, we don''t want this situation to occur in our application.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '工作线程正在循环。当输出结果中发生异常时（由`Throw Exception`和`Exception Message: The Exception!!!`输出表示），再次调用`run()`函数，这样它将向队列中发布一个新事件。当然，我们不希望这种情况发生在我们的应用程序中。'
- en: Timing the work execution using the timer class
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用定时器类来计时工作执行
- en: 'There is a class in the Boost C++ library that provides the ability to conduct
    a blocking or asynchronous wait for a timer until it expires, known as the **deadline
    timer**. A deadline timer indicates one of two states: expired or not expired.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Boost C++库中有一个类，它提供了对定时器进行阻塞或异步等待的能力，称为**截止定时器**。截止定时器表示两种状态之一：到期或未到期。
- en: An expiring timer
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个即将到期的定时器
- en: 'Here, we are going to create a timer that will expire in 10 seconds. Let us
    take a look at the following code:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将创建一个在10秒后到期的定时器。让我们看一下以下代码：
- en: '[PRE26]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Save the preceding code as `timer.cpp` and run the following command to compile
    it:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 将上述代码保存为`timer.cpp`，并运行以下命令进行编译：
- en: '[PRE27]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now, let us distinguish the code before we run it:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在运行之前区分一下代码：
- en: '[PRE28]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Before the program calls the `TimerHandler` function, it has to wait for 10
    seconds because we use the `expires_from_now` function from the `timer` object.
    The `async_wait()` function will wait until the timer has expired:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在程序调用`TimerHandler`函数之前，它必须等待10秒，因为我们使用了`timer`对象的`expires_from_now`函数。`async_wait()`函数将等待直到定时器到期：
- en: '[PRE29]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'After the timer has expired, the `TimerHandler` function will be invoked and
    since there is no error, the program will execute the code inside the `else` block.
    Let us run the program to see the complete output:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '定时器到期后，将调用`TimerHandler`函数，由于没有错误，程序将执行`else`块内的代码。让我们运行程序，看完整的输出： '
- en: '![An expiring timer](img/00038.jpeg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![一个即将到期的定时器](img/00038.jpeg)'
- en: And, since we used the `async_wait()` function, we can hit the *Enter* key to
    exit the program before we see the line, **Now press ENTER to exit**.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 并且，由于我们使用了`async_wait()`函数，我们可以在看到这行之前按下*Enter*键退出程序，**现在按Enter键退出**。
- en: Using the timer along with the boost::bind function
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用定时器和boost::bind函数
- en: 'Let us try to create a recurring timer. We have to initialize the global timer
    object in order for the object to become a shared object. To achieve this, we
    need help from the `shared_ptr` pointer and the `boost::bind` method to make and
    keep the thread safe since we will use a shared object:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试创建一个循环定时器。我们必须初始化全局定时器对象，以便该对象成为共享对象。为了实现这一点，我们需要`shared_ptr`指针和`boost::bind`方法的帮助，以使线程安全，因为我们将使用共享对象：
- en: '[PRE30]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Save the preceding code as `timer2.cpp` and run the following command to compile
    it:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 将上述代码保存为`timer2.cpp`，并运行以下命令进行编译：
- en: '[PRE31]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now, run the program. We will get a recurring output, which we can stop by
    hitting the *Enter* key, as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行程序。我们会得到一个重复的输出，可以通过按*Enter*键来停止：
- en: '![Using the timer along with the boost::bind function](img/00039.jpeg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![使用定时器和boost::bind函数](img/00039.jpeg)'
- en: 'We see from the output that the timer is ticked every three seconds and the
    work will be stopped after the user presses the *Enter* key. Now, let us see the
    following code snippet:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 从输出中我们可以看到，定时器每三秒触发一次，当用户按下*Enter*键后工作将停止。现在，让我们看以下代码片段：
- en: '[PRE32]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The `boost::bind` function helps us to use the global timer object. And if we
    look deeper, we can use the `_1` parameter for our `boost::bind` function. If
    we read the documentation of the `boost::bind` function, we will find that the
    `_1` parameter is a placeholder argument that will be substituted by the first
    input argument.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`boost::bind`函数帮助我们使用全局定时器对象。如果我们深入研究，我们可以使用`_1`参数来进行`boost::bind`函数。如果我们阅读`boost::bind`函数的文档，我们会发现`_1`参数是一个占位符参数，将被第一个输入参数替换。'
- en: Note
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information about binding with a placeholder, check out the official
    Boost documentation at [www.boost.org/doc/libs/1_58_0/libs/bind/doc/html/bind.html](http://www.boost.org/doc/libs/1_58_0/libs/bind/doc/html/bind.html).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 有关使用占位符绑定的更多信息，请查看官方Boost文档[www.boost.org/doc/libs/1_58_0/libs/bind/doc/html/bind.html](http://www.boost.org/doc/libs/1_58_0/libs/bind/doc/html/bind.html)。
- en: And for more information on placeholder arguments, see [en.cppreference.com/w/cpp/utility/functional/placeholders](http://en.cppreference.com/w/cpp/utility/functional/placeholders).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 关于占位参数的更多信息，请参见[en.cppreference.com/w/cpp/utility/functional/placeholders](http://en.cppreference.com/w/cpp/utility/functional/placeholders)。
- en: Using the timer along with the boost::strand function
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用定时器和boost::strand函数
- en: 'Since the timer is asynchronously executed, it is possible that the timer execution
    is not in a serialized process. The timer might be executed in one thread while
    another event is executed at the same time. As we have discussed previously, we
    can utilize the `strand` function to serialize the order of execution. Let us
    take a look at the following code snippet:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 由于定时器是异步执行的，可能定时器的执行不是一个序列化的过程。定时器可能在一个线程中执行，同时另一个事件也在执行。正如我们之前讨论过的，我们可以利用strand函数来序列化执行顺序。让我们来看下面的代码片段：
- en: '[PRE33]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Save the preceding code as `timer3.cpp` and compile it by running the following
    command:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 将上述代码保存为`timer3.cpp`，并通过运行以下命令进行编译：
- en: '[PRE34]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now, run the program by typing the `timer3` command in the console and we will
    get the following output:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在控制台中输入`timer3`命令运行程序，我们将得到以下输出：
- en: '![Using the timer along with the boost::strand function](img/00040.jpeg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![使用定时器和boost::strand函数](img/00040.jpeg)'
- en: From the output, we can see that the first five `work` objects are executed
    first because they have to be serially executed and afterwards, the `TimerHandler()`
    functions are executed. The `work` objects have to be completed first before the
    timer thread is executed. If we remove the `strand` wrap, the flow of the program
    will be messy because we do not lock the `std::cout` function inside the `Print()`
    function.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 从输出中，我们可以看到前五个work对象首先被执行，因为它们必须被串行执行，然后执行TimerHandler()函数。在定时器线程执行之前，必须先完成work对象。如果我们移除strand包装，程序的流程将变得混乱，因为我们没有在Print()函数内部锁定std::cout函数。
- en: Summary
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We have successfully serialized the `io_service` object's work by using the
    `strand` object, so we can ensure the order of work we have designed. We can also
    ensure our program will run smoothly without any crashes by using error and exception
    handling. Lastly, in this chapter, we discussed the waiting time, since this is
    important when creating a network application.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已成功通过使用strand对象对io_service对象的工作进行了序列化，因此我们可以确保我们设计的工作顺序。我们还可以通过使用错误和异常处理来确保我们的程序能够顺利运行而不会崩溃。最后，在本章中，我们讨论了等待时间，因为在创建网络应用程序时这一点非常重要。
- en: Now, let us move on to the next chapter to talk about creating a server-client
    application that will make communication possible between two parties, the server
    and the client.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续下一章，讨论创建一个服务器-客户端应用程序，使得服务器和客户端之间的通信成为可能。
