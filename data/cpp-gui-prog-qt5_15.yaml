- en: Cross-Platform Development
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跨平台开发
- en: Qt has been known for its cross-platform capability since its first release.
    It was also one of the main goals of the founders when they decided to create
    this framework, long before it was taken over by **Nokia**, and later **The Qt
    Company**.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 自从第一次发布以来，Qt就以其跨平台能力而闻名。这也是创始人在决定创建这个框架时的主要目标之一，早在它被**诺基亚**和后来的**Qt公司**接管之前。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Compilers
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译器
- en: Build settings
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建设置
- en: Deploying to PC platforms
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署到PC平台
- en: Deploying to mobile platforms
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署到移动平台
- en: Let's get started.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。
- en: Understanding compilers
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解编译器
- en: In this chapter, we will learn about the process of generating an executable
    file from a Qt project. This process is what we call **compile** or **build**.
    The tool that is used for this purpose is called a **compiler**. In the following
    section, we will learn what a compiler is and how to use it to generate an executable
    file for our Qt project.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习从Qt项目生成可执行文件的过程。这个过程就是我们所谓的**编译**或**构建**。用于此目的的工具称为**编译器**。在接下来的部分中，我们将学习编译器是什么，以及如何使用它为我们的Qt项目生成可执行文件。
- en: What is a compiler?
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是编译器？
- en: When we develop an application, either using Qt or any other software development
    kit, we often have to compile our project into an executable, but what is actually
    going on when we're compiling our project?
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们开发一个应用程序时，无论是使用Qt还是其他任何软件开发工具包，我们经常需要将项目编译成可执行文件，但实际上在我们编译项目时到底发生了什么呢？
- en: A **compiler** is a piece of software that transforms computer code written
    in a high-level programming language or computer instructions into a machine code
    or lower-level form that can be read and executed by a computer. This low-level
    machine code is very different depending on the operating system and computer
    processor you're running, but you don't have to worry about it as the compiler
    will convert it for you.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**编译器**是一种软件，它将用高级编程语言编写的计算机代码或计算机指令转换为计算机可以读取和执行的机器代码或较低级别形式。这种低级机器代码在操作系统和计算机处理器上都有很大的不同，但你不必担心，因为编译器会为你转换它。'
- en: That means all you need to worry about is writing your logic code in a human-readable
    programming language, and let the compiler do the job for you. By using different
    compilers, theoretically, you should be able to compile your code into executable
    programs that can be run on different operating systems and hardware. I'm using
    the word *theoretically* here because in practice it's actually much more difficult
    than just using different compilers, you may also need to implement libraries
    that support the target platform. However, Qt has already handled all this for
    you, so you don't have to do the extra work.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你只需要担心用人类可读的编程语言编写逻辑代码，让编译器为你完成工作。理论上，通过使用不同的编译器，你应该能够将代码编译成可在不同操作系统和硬件上运行的可执行程序。我在这里使用“理论上”这个词是因为实际上要比使用不同的编译器更困难，你可能还需要实现支持目标平台的库。然而，Qt已经为你处理了所有这些，所以你不必做额外的工作。
- en: 'In the current version, Qt supports the following compilers:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前版本中，Qt支持以下编译器：
- en: '**GNU Compiler Collection (GCC)**: GCC is a compiler for Linux and macOS'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GNU编译器集合（GCC）**：GCC是用于Linux和macOS的编译器'
- en: '**MinGW (Minimalist GNU for Windows)**: MinGW is a native software port of
    GCC and GNU Binutils (binary utilities) for developing applications on Windows'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MinGW（Windows的最小GNU）**：MinGW是GCC和GNU Binutils（二进制工具）的本地软件端口，用于在Windows上开发应用程序'
- en: '**Microsoft Visual C++ (MSVC)**: Qt supports MSVC 2013, 2015, and 2017 for
    building Windows applications'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Microsoft Visual C++（MSVC）**：Qt支持MSVC 2013、2015和2017用于构建Windows应用程序'
- en: '**XCode**: XCode is the primary compiler used by developers who develop applications
    for macOS and iOS'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XCode**：XCode是开发者为macOS和iOS开发应用程序时使用的主要编译器'
- en: '**Linux ICC (Intel C++ Compiler)**: Linux ICC is a set of compilers of C and
    C++ compilers developed by Intel for Linux application development'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Linux ICC（英特尔C++编译器）**：Linux ICC是英特尔为Linux应用程序开发开发的一组C和C++编译器'
- en: '**Clang**: Clang is a C, C++, Objective C, and Objective C++ frontend for the
    LLVM compiler for Windows, Linux, and macOS'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Clang**：Clang是LLVM编译器的C、C++、Objective C和Objective C++前端，适用于Windows、Linux和macOS'
- en: '**Nim**: Nim is the Nim compiler for Windows, Linux, and macOS'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Nim**：Nim是适用于Windows、Linux和macOS的Nim编译器'
- en: '**QCC**: QCC is the interface for compiling C++ applications for the QNX operating
    system'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**QCC**：QCC是用于在QNX操作系统上编译C++应用程序的接口'
- en: Build automation with Make
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Make进行构建自动化
- en: In software development, **Make **is a build automation tool that automatically
    builds executable programs and libraries from source code by reading configuration
    files called **Makefiles **that specify how to derive the target platform. In
    a nutshell, a Make program generates build configuration files and uses them to
    tell the compiler what to do before generating the final executable program.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件开发中，**Make**是一种构建自动化工具，它通过读取名为**Makefiles**的配置文件自动从源代码构建可执行程序和库，这些配置文件指定如何生成目标平台。简而言之，Make程序生成构建配置文件，并使用它们告诉编译器在生成最终可执行程序之前要做什么。
- en: 'Qt supports two types of Make programs:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Qt支持两种类型的Make程序：
- en: '**qmake**: It is the native Make program developed by the Qt team. It works
    best on Qt Creator, and I strongly recommend using it for all Qt projects.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**qmake**：它是Qt团队开发的本地Make程序。它在Qt Creator上效果最好，我强烈建议在所有Qt项目中使用它。'
- en: '**CMake**: On the other hand, although this is a very powerful build system,
    it doesn''t do all the things that qmake does specifically for a Qt project, such
    as:'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CMake**：另一方面，尽管这是一个非常强大的构建系统，但它并不像qmake那样专门为Qt项目做所有事情，比如：'
- en: Running the **Meta Object Compiler** (**MOC**)
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行**元对象编译器**（**MOC**）
- en: Telling the compiler where to look for Qt headers
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 告诉编译器在哪里查找Qt头文件
- en: Telling the linker where to look for Qt libraries
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 告诉链接器在哪里查找Qt库
- en: 'You have to do the preceding steps manually on CMake in order to successfully
    compile a Qt project. You should use CMake only if:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在CMake上手动执行上述步骤，以便成功编译Qt项目。只有在以下情况下才应使用CMake：
- en: You're working on a non-Qt project but wish to use Qt Creator for writing the
    code
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您正在处理一个非Qt项目，但希望使用Qt Creator编写代码
- en: You're dealing with a massive project that requires complex configurations,
    which qmake simply cannot handle
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您正在处理一个需要复杂配置的大型项目，而qmake无法处理
- en: You really love to use CMake and you know exactly what you're doing
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您真的很喜欢使用CMake，并且您确切地知道自己在做什么
- en: Qt is really flexible when it comes to choosing the right tools for your project.
    It doesn't stick to just its own build system and compiler. It gives the developers
    freedom to choose what suits best for their projects.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择适合项目的正确工具时，Qt真的非常灵活。它不仅限于自己的构建系统和编译器。它给开发人员自由选择最适合其项目的工具。
- en: Build settings
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建设置
- en: Before a project is compiled or built, the compiler needs to know several details
    before proceeding. These details are known as the **build settings**, which are
    a very important aspect of the compilation process. In the following section,
    we will learn what the build settings are and how we can configure them in an
    accurate manner.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目编译或构建之前，编译器需要在继续之前了解一些细节。这些细节被称为**构建设置**，是编译过程中非常重要的一个方面。在接下来的部分中，我们将学习构建设置是什么，以及如何以准确的方式配置它们。
- en: Qt Project (.pro) File
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Qt项目（.pro）文件
- en: 'I''m sure you already know about the **Qt Project File** since we have mentioned
    it countless times throughout the book. A `.pro` file is actually the project
    file used by *qmake* to build your application, library, or plugin. It contains
    all the information, such as links to the headers and source files, libraries
    required by the project, custom-build processes for different platforms/environments,
    and so on. A simple project file could look something like this:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信您已经了解**Qt项目文件**，因为我们在整本书中已经提到了无数次。`.pro`文件实际上是*qmake*用来构建应用程序、库或插件的项目文件。它包含了所有信息，例如链接到头文件和源文件，项目所需的库，不同平台/环境的自定义构建过程等。一个简单的项目文件可能如下所示：
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: It simply tells qmake which Qt modules should be included in the project, what
    the name of the executable program is, what's the type of the application, and
    finally the links to the header files, source files, form declaration files, and
    resource files that need to be included in the project. All of this information
    is crucial in order for qmake to generate the configuration files and successfully
    build the application. For a more complex project, you may want to configure your
    project differently for different operating systems. This can also be done easily
    in the Qt Project File.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 它只是告诉qmake应该在项目中包含哪些Qt模块，可执行程序的名称是什么，应用程序的类型是什么，最后是需要包含在项目中的头文件、源文件、表单声明文件和资源文件的链接。所有这些信息对于qmake生成配置文件并成功构建应用程序至关重要。对于更复杂的项目，您可能希望为不同的操作系统不同地配置项目。在Qt项目文件中也可以轻松实现这一点。
- en: 'To learn more about how you can configure your project differently for different
    operating systems, please refer to the following link: [http://doc.qt.io/qt-5/qmake-language.html#scopes-and-conditions.](http://doc.qt.io/qt-5/qmake-language.html#scopes-and-conditions)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何为不同的操作系统配置项目，请参阅以下链接：[http://doc.qt.io/qt-5/qmake-language.html#scopes-and-conditions.](http://doc.qt.io/qt-5/qmake-language.html#scopes-and-conditions)
- en: Comment
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评论
- en: 'You can add your own comments in the project file to remind yourself of the
    purpose of adding a specific line of configuration, so that you won''t forget
    why you added a line after not touching it for a while. A comment starts with
    the hash symbol (`#`) after which you can write anything since the build system
    will simply ignore the entire line of text. For example:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在项目文件中添加自己的注释，以提醒自己添加特定配置行的目的，这样您在一段时间不接触后就不会忘记为什么添加了一行。注释以井号（`#`）开头，之后您可以写任何内容，因为构建系统将简单地忽略整行文本。例如：
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can also add dash lines or use spaces to make your comment stand out from
    others:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以添加虚线或使用空格使您的评论脱颖而出：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Modules, configurations, and definitions
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块、配置和定义
- en: 'You can add different Qt modules, configuration options, and definitions to
    your project. Let''s take a look at how we can achieve these. To add additional
    modules, you simply add the `module` keyword behind `QT +=`, like so:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以向项目添加不同的Qt模块、配置选项和定义。让我们看看我们如何实现这些。要添加额外的模块，只需在`QT +=`后面添加`module`关键字，如下所示：
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Or you can also add in a condition in front to determine when to add a specific
    module to your project:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 或者您还可以在前面添加条件来确定何时向项目添加特定模块：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can also add configuration settings to your project. For example, we want
    to specifically ask the compiler to follow the 2011 version of the C++ specifications
    (known as C++11) when compiling our project, as well as making it a multithreaded
    application:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以向项目添加配置设置。例如，我们希望明确要求编译器在编译我们的项目时遵循C++规范的2011版本（称为C++11），并使其成为多线程应用程序：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You must use `+=`, not `=`, or qmake will not be able to use Qt's configuration
    to determine the settings needed for your project. Alternatively, you can also
    use `-=` to remove a module, configuration, and definition from your project.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须使用`+=`，而不是`=`，否则qmake将无法使用Qt的配置来确定项目所需的设置。或者，您也可以使用`-=`来从项目中删除模块、配置和定义。
- en: 'As for adding definitions (or variables) to our compiler, we use the `DEFINES`
    keyword, like so:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 至于向编译器添加定义（或变量），我们使用`DEFINES`关键字，如下所示：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Qmake adds the values of this variable as a compiler C preprocessor macro (`-D`
    option) before compiling your project. The earlier definition tells the Qt compiler
    to emit warnings if you have used any feature of Qt that has been marked as deprecated.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在编译项目之前，qmake将此变量的值作为编译器C预处理宏（`-D`选项）添加到项目中。前面的定义告诉Qt编译器，如果您使用了已标记为弃用的Qt功能，则会发出警告。
- en: Platform-specific settings
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特定于平台的设置
- en: 'You can set different configurations or settings for different platforms, since
    not every setting can fit all use cases. For example, if we want to include different
    header paths for different operating systems, we can do the following:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以为不同的平台设置不同的配置或设置，因为并非每个设置都适用于所有用例。例如，如果我们想为不同的操作系统包含不同的头文件路径，可以执行以下操作：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Alternatively, you can also put your settings in curly braces which behave
    like the `if` statements in a programming language:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您还可以将设置放在花括号中，这类似于编程语言中的`if`语句：
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can check out all the settings you can use in your project file by visiting
    the following link: [http://doc.qt.io/qt-5/qmake-variable-reference.html.](http://doc.qt.io/qt-5/qmake-variable-reference.html)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过访问以下链接查看项目文件中可以使用的所有设置：[http://doc.qt.io/qt-5/qmake-variable-reference.html.](http://doc.qt.io/qt-5/qmake-variable-reference.html)
- en: Deploying to PC platforms
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署到PC平台
- en: Let's move on to learn how to deploy our applications on platforms such as Windows,
    Linux, and macOS.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续学习如何在Windows、Linux和macOS等平台上部署我们的应用程序。
- en: Windows
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows
- en: In this section, we will learn how to deploy our application to different operating
    systems. Even though Qt supports all major platforms out of the box, there might
    be some configurations which you need to set in order to make your application
    easily deployable to all platforms.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何将我们的应用程序部署到不同的操作系统。尽管Qt默认支持所有主要平台，但可能需要设置一些配置，以便使您的应用程序能够轻松部署到所有平台。
- en: The first operating system we're going to cover is the most common one, **Microsoft
    Windows**.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要介绍的第一个操作系统是最常见的**Microsoft Windows**。
- en: Starting from Qt 5.6, **Windows XP** is no longer supported by Qt.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 从Qt 5.6开始，Qt不再支持**Windows XP**。
- en: There could be certain plugins that may not work properly on the Windows version
    you're trying to deploy, so do check out the documentation before you decide to
    work on your project. However, it's safe to say most of the features will work
    out of the box on Qt.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在您尝试部署的Windows版本上可能有某些插件无法正常工作，因此在决定处理项目之前，请查看文档。但可以肯定的是，大多数功能在Qt上都可以直接使用。
- en: By default, the **MinGW** 32-bit compiler comes together with Qt when you're
    installing it to your Windows PC. Unfortunately, it doesn't support 64-bit by
    default unless you compile Qt from source. If you need to build 64-bit applications,
    you can consider installing the MSVC version of Qt alongside the **Microsoft Visual
    Studio**. Microsoft Visual Studio can be obtained for free from the following
    link: [https://www.visualstudio.com/vs](https://www.visualstudio.com/vs).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，当您将Qt安装到Windows PC时，**MinGW** 32位编译器会一起安装。不幸的是，除非您从源代码编译Qt，否则默认情况下不支持64位。如果您需要构建64位应用程序，可以考虑在**Microsoft
    Visual Studio**旁边安装MSVC版本的Qt。可以从以下链接免费获取Microsoft Visual Studio：[https://www.visualstudio.com/vs](https://www.visualstudio.com/vs)。
- en: 'You can set up your compiler settings in Qt Creator by going to Tools | Options,
    then go to the Build & Run category and select the Kits tab:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过转到Tools | Options，然后转到Build & Run类别并选择Kits选项卡，在Qt Creator中设置编译器设置：
- en: '![](img/4061d513-9767-4724-9382-a1c09d727cc1.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4061d513-9767-4724-9382-a1c09d727cc1.png)'
- en: As you can see, there are multiple kits that run on different compilers, in
    which you can configure. By default, Qt already comes with five kits—one for Android,
    one for MinGW, and three for MSVC (version 2013, 2015, and 2017). Qt will automatically
    detect the existence of these compilers and configure these settings for you accordingly.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，有多个运行在不同编译器上的工具包，您可以进行配置。默认情况下，Qt已经配备了五个工具包——一个用于Android，一个用于MinGW，三个用于MSVC（版本2013、2015和2017）。Qt将自动检测这些编译器的存在，并相应地为您配置这些设置。
- en: If you have not installed **Visual Studio** or **Android SDK**, there will be
    a red icon with an exclamation mark appearing in front of the kit option. After
    you have installed the compiler you need, try restarting Qt Creator. It will now
    detect the newly installed compilers. You should have no problem compiling for
    the Windows platform as Qt will handle the rest for you. We will talk more about
    the Android platform in another section.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尚未安装**Visual Studio**或**Android SDK**，则在工具包选项前会出现带有感叹号的红色图标。安装所需的编译器后，请尝试重新启动Qt
    Creator。它现在将检测到新安装的编译器。您应该可以毫无问题地为Windows平台编译Qt将为您处理其余部分。我们将在另一节中更多地讨论Android平台。
- en: Once you have compiled your application, open up the folder in which you installed
    Qt. Copy the relevant DLL files to your application folder, and pack it together
    before distributing it to your users. Without these DLL files, your users may
    not be able to run the Qt application.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 编译应用程序后，打开安装Qt的文件夹。将相关的DLL文件复制到应用程序文件夹中，并在分发给用户之前将其打包在一起。没有这些DLL文件，用户可能无法运行Qt应用程序。
- en: For more information, please visit the following link: [http://doc.qt.io/qt-5/windows-deployment.html.](http://doc.qt.io/qt-5/windows-deployment.html)
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，请访问以下链接：[http://doc.qt.io/qt-5/windows-deployment.html.](http://doc.qt.io/qt-5/windows-deployment.html)
- en: 'As for setting a custom icon for your application, you must add the following
    code to your project (`.pro`) file:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要为应用程序设置自定义图标，必须将以下代码添加到项目（`.pro`）文件中：
- en: '[PRE9]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The preceding code only works on Windows platforms, which is why we have to
    add the `win32` keyword before it.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码仅适用于Windows平台，因此我们必须在其前面添加`win32`关键字。
- en: Linux
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux
- en: '**Linux **(or GNU/Linux) in general is considered a major operating system
    that dominates the cloud/server market. Since Linux is not a single operating
    system (Linux is offered by different vendors in the form of different Linux distributions
    that are not entirely compatible) like Windows or macOS, it is very hard for developers
    to build their applications and expect them to run flawlessly on different Linux
    distributions (**distros**). However, if you develop your Linux application on
    Qt, there is a high chance that it will work on most distributions, if not on
    all of the major distros out there, as long as the Qt library exists on the target
    system.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**Linux**（或GNU/Linux）通常被认为是主导云/服务器市场的主要操作系统。由于Linux不是单一操作系统（Linux以不完全兼容的不同Linux发行版的形式由不同供应商提供），就像Windows或macOS一样，开发人员很难构建他们的应用程序并期望它们在不同的Linux发行版（**distros**）上无缝运行。但是，如果您在Qt上开发Linux应用程序，只要目标系统上存在Qt库，它就有很高的机会在大多数发行版上运行，如果不是所有主要发行版。'
- en: 'The default kit selection on Linux is much simpler than Windows. Since a 64-bit
    application has been mainstream and standard on most Linux distros for some time
    now, we only need to include the **GCC** 64-bit compiler when installing Qt. There
    is also an option for Android, but we will talk more about it later:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux上的默认套件选择比Windows简单得多。由于64位应用程序已经成为大多数Linux发行版的主流和标准已经有一段时间了，我们在安装Qt时只需要包括**GCC**
    64位编译器。还有一个Android选项，但我们稍后会详细讨论：
- en: '![](img/39cbb752-788b-4f19-be8e-80a6fe79aecb.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/39cbb752-788b-4f19-be8e-80a6fe79aecb.png)'
- en: 'If you are compiling your Linux application on Qt Creator for the first time,
    I''m pretty sure you will get the following error:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是第一次在Qt Creator上编译Linux应用程序，我相当肯定您会收到以下错误：
- en: '![](img/8cb011d6-5884-41c7-9359-949a3da431c1.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8cb011d6-5884-41c7-9359-949a3da431c1.png)'
- en: This is because you have not installed the relevant tools required to build
    Linux applications, such as Make, GCC, and other programs.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为您尚未安装构建Linux应用程序所需的相关工具，例如Make、GCC和其他程序。
- en: 'Different Linux distros have a slightly different method to install programs,
    but I won''t be explaining every single one of them here. In my case, I''m using
    an Ubuntu distro, so I did was first opened up the terminal and typed the following
    command to install the `build-essential` package which includes Make and GCC:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的Linux发行版安装程序的方法略有不同，但我不会在这里解释每一个。在我的情况下，我使用的是Ubuntu发行版，所以我首先打开终端并键入以下命令来安装包含Make和GCC的`build-essential`软件包：
- en: '[PRE10]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The preceding command only works on distros that inherit from **Debian **and
    **Ubuntu**, and it may not work on other distributions such as **Fedora**, **Gentoo**,
    **Slackware**, and so on. You should search for the appropriate command used by
    your Linux distro to install these packages, as shown in the following screenshot:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令仅适用于继承自**Debian**和**Ubuntu**的发行版，可能不适用于其他发行版，如**Fedora**、**Gentoo**、**Slackware**等。您应该搜索您的Linux发行版使用的适当命令来安装这些软件包，如下图所示：
- en: '![](img/ca215015-a2a1-4372-bc16-b295382402fb.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ca215015-a2a1-4372-bc16-b295382402fb.png)'
- en: 'Once you have installed the appropriate packages, restart Qt Creator and go
    to Tools | Options. Then, go to the Build & Run category and open up the Kits
    tab. You should now be able to select the compilers for both C and C++ options
    for your Desktop kit:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了适当的软件包，请重新启动Qt Creator并转到工具|选项。然后，转到“构建和运行”类别，打开“套件”选项卡。现在，您应该能够为您的桌面套件选择C和C
    ++选项的编译器：
- en: '![](img/d8efa23d-958b-49c4-a0af-9d9ab6ef91b5.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d8efa23d-958b-49c4-a0af-9d9ab6ef91b5.png)'
- en: 'However, you might get another error that says cannot find -lGL when trying
    to compile again:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，当您再次尝试编译时，可能会遇到另一个错误，即找不到-lGL：
- en: '![](img/3fa99b4a-7ff3-4fbb-a194-4fadbb2b8cc1.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3fa99b4a-7ff3-4fbb-a194-4fadbb2b8cc1.png)'
- en: 'This is because Qt is trying to look for the `OpenGL` libraries, and it can''t
    find them on your system. This can be easily fixed by installing the `Mesa development`
    library package with the following command:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为Qt试图寻找`OpenGL`库，但在您的系统上找不到它们。通过使用以下命令安装`Mesa开发`库软件包，可以轻松解决这个问题：
- en: '[PRE11]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Again, the preceding command only works on Debian and Ubuntu variants. Please
    look for the appropriate command for your Linux distro if you''re not running
    one of the Debian or Ubuntu forks:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，前面的命令仅适用于Debian和Ubuntu变体。如果您没有运行Debian或Ubuntu分支之一，请寻找适合您的Linux发行版的命令：
- en: '![](img/469afd43-8058-490f-87dd-f89d97955bd7.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/469afd43-8058-490f-87dd-f89d97955bd7.png)'
- en: 'Once the package has been installed, you should be able to compile and run
    your Qt application without any problem:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了软件包后，您应该能够编译和运行Qt应用程序而无任何问题：
- en: '![](img/f90b95a8-a587-4cfd-8c60-c291a40177ae.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f90b95a8-a587-4cfd-8c60-c291a40177ae.png)'
- en: As for using one of the other compilers that are less popular, such as **Linux
    ICC**, **Nim**, or **QCC**, you must set it manually by clicking on the Add button
    located on the right-hand side of the Kits interface, then key in all the appropriate
    settings to get it to work. Most people do not use these compilers, so we'll just
    skip them for now.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 至于使用其他不太流行的编译器，如**Linux ICC**、**Nim**或**QCC**，您必须通过单击位于Kits界面右侧的“添加”按钮来手动设置，然后输入所有适当的设置以使其正常工作。大多数人不使用这些编译器，所以我们暂时跳过它们。
- en: When it comes to distributing Linux applications, it's a lot more complicated
    than Windows or macOS. This is owing to the fact that Linux is not a single operating
    system, but rather a bunch of different distros with their own dependencies and
    configurations, which makes distributing programs very difficult.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在分发Linux应用程序时，比Windows或macOS要复杂得多。这是因为Linux不是单一操作系统，而是一堆具有自己依赖项和配置的不同发行版，这使得分发程序非常困难。
- en: The safest way is to compile your program statically, which has its own pros
    and cons. Your program will become really huge in size, and that makes updating
    software a great burden to users who have slow internet connections. Other than
    that, the Qt license also forbids you from building statically if you're not doing
    an open source project and do not have a Qt commercial license. To learn more
    about Qt's licensing options, please visit the following link: [https://www1.qt.io/licensing-compariso.n.](https://www1.qt.io/licensing-comparison)
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 最安全的方法是静态编译程序，这有其优缺点。您的程序将变得非常庞大，这使得对于互联网连接速度较慢的用户来说，更新软件将成为一个巨大的负担。除此之外，如果您不是在进行开源项目并且没有Qt商业许可证，Qt许可证也禁止您进行静态构建。要了解有关Qt许可选项的更多信息，请访问以下链接：[https://www1.qt.io/licensing-comparison](https://www1.qt.io/licensing-comparison)
- en: Another method is to ask your users to install the right version of Qt before
    running your application, but that will yield a ton of problems on the user side
    since not every user is very tech savvy and has the patience to go through all
    those hassles to avoid the dependency hell.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是要求用户在运行应用程序之前安装正确版本的Qt，但这将在用户端产生大量问题，因为并非每个用户都非常精通技术，并且有耐心去避免依赖地狱。
- en: Therefore, the best way is to distribute the Qt library alongside your application,
    just like we did on the Windows platform. The library might not work on some of
    the Linux distros (rarely the case, but there is a slight possibility), but that
    can be easily overcome by creating a different installer for different distros,
    and everyone's happy now.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，最好的方法是将Qt库与应用程序一起分发，就像我们在Windows平台上所做的那样。该库可能在某些Linux发行版上无法工作（很少见，但有一点可能性），但可以通过为不同的发行版创建不同的安装程序来轻松克服这个问题，现在每个人都很满意。
- en: 'However, due to security reasons, a Linux application doesn''t usually look
    for its dependencies in its local directory by default. You must use the `$ORIGIN`
    keyword in the executable''s `rpath` setting in your qmake project (`.pro`) file:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，出于安全原因，Linux应用程序通常不会默认在其本地目录中查找其依赖项。您必须在您的qmake项目（.pro）文件中使用可执行文件的`rpath`设置中的`$ORIGIN`关键字：
- en: '[PRE12]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Setting the `QMAKE_RPATH` clears the default `rpath` setting for the Qt libraries.
    This allows for bundling the Qt libraries with the application. If you want the
    `rpath` to include the path to the Qt libraries, don't set `QMAKE_RPATH`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 设置`QMAKE_RPATH`会清除Qt库的默认`rpath`设置。这允许将Qt库与应用程序捆绑在一起。如果要将`rpath`包括在Qt库的路径中，就不要设置`QMAKE_RPATH`。
- en: After that, just copy all the library files from the Qt installation folder
    to your application's folder and remove its minor version numbers from the filename.
    For example, rename `libQtCore.so.5.8.1` to `libQtCore.so.5` and now it should
    be able to get detected by your Linux application.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，只需将Qt安装文件夹中的所有库文件复制到应用程序的文件夹中，并从文件名中删除其次版本号。例如，将`libQtCore.so.5.8.1`重命名为`libQtCore.so.5`，现在应该能够被您的Linux应用程序检测到。
- en: As for application icons, you can't apply any icon to Linux applications by
    default as it is not supported. Even though some desktop environments such as
    KDE and GNOME do support application icons, the icon has to be installed and configured
    manually, which is not very convenient to the users. It may not even work on some
    user's PC since every distro works a little bit differently than the others. The
    best way to set icons for your application is to create a desktop shortcut (symlink)
    during installation and apply the icon to the shortcut.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 至于应用程序图标，默认情况下无法为Linux应用程序应用任何图标，因为不受支持。尽管某些桌面环境（如KDE和GNOME）支持应用程序图标，但必须手动安装和配置图标，这对用户来说并不是很方便。它甚至可能在某些用户的PC上无法工作，因为每个发行版的工作方式都有些不同。为应用程序设置图标的最佳方法是在安装过程中创建桌面快捷方式（符号链接）并将图标应用于快捷方式。
- en: macOS
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: macOS
- en: In my opinion, **macOS **is the single most centralized operating system in
    the software world. Not only is it designed to run only on the Macintosh machines,
    you are also required to download or buy software only from the Apple App Store.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，**macOS**是软件世界中最集中的操作系统。它不仅设计为仅在Macintosh机器上运行，您还需要从Apple应用商店下载或购买软件。
- en: No doubt this has caused an uneasy feeling for some people who care about freedom
    of choice, but on the other hand it also means that developers have less problems
    to deal with when it comes to application building and distribution.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问，这对一些关心选择自由的人造成了不安，但另一方面，这也意味着开发人员在构建和分发应用程序时遇到的问题更少。
- en: Other than that, macOS applications behave pretty much similar to a ZIP archive,
    where each and every application has its own directory that carries the appropriate
    libraries with it. Therefore, there is no need for the users to install the Qt
    libraries on their operating system beforehand and everything just works out of
    the box.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，macOS应用程序的行为与ZIP存档非常相似，每个应用程序都有自己的目录，其中包含适当的库。因此，用户无需预先在其操作系统上安装Qt库，一切都可以直接使用。
- en: 'As for the Kit Selection, Qt for macOS supports kits for Android, clang 64-bit,
    iOS, and iOS Simulator:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 至于Kit Selection，Qt for macOS支持Android、clang 64位、iOS和iOS模拟器的工具包：
- en: '![](img/735061cd-1346-48d1-bc11-915a94b1f452.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/735061cd-1346-48d1-bc11-915a94b1f452.png)'
- en: As of Qt 5.10 and above, Qt no longer supports 32-bit builds for macOS. Also,
    Qt does not support OS X on PowerPC; and since Qt uses Cocoa internally, building
    for Carbon is also not possible, please be aware of that.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 从Qt 5.10及更高版本开始，Qt不再支持macOS的32位构建。此外，Qt不支持PowerPC上的OS X；由于Qt在内部使用Cocoa，因此也不可能构建Carbon，请注意这一点。
- en: 'Before compiling your macOS applications, please install Xcode from the App
    Store before proceeding. Xcode is an integrated development environment for macOS,
    containing a suite of software development tools developed by Apple for developing
    software for macOS and iOS. Once you have installed Xcode, Qt Creator will detect
    its existence and automatically set the compiler settings for you, which is great:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在编译您的macOS应用程序之前，请先从App Store安装Xcode。Xcode是macOS的集成开发环境，包含了由苹果开发的一套用于开发macOS和iOS软件的软件开发工具。一旦安装了Xcode，Qt
    Creator将检测到其存在，并自动为您设置编译器设置，这非常棒：
- en: '![](img/5998a25c-8025-4cab-a703-0ebc982da29c.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5998a25c-8025-4cab-a703-0ebc982da29c.png)'
- en: Once you have compiled your project, the resulting executable program is a single
    app bundle that can be easily distributed to your users. Since all the library
    files are packed within the application bundle, it should work out of the box
    on the user's PC.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 编译项目后，生成的可执行程序是一个单个的应用程序包，可以轻松地分发给用户。由于所有库文件都打包在应用程序包中，因此它应该可以在用户的PC上直接运行。
- en: 'Setting application icons for Mac is quite a simple task. Just add the following
    line of code to your project (`.pro`) file and we''re good to go:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 为Mac设置应用程序图标是一项非常简单的任务。只需将以下代码添加到您的项目（`.pro`）文件中，我们就可以开始了：
- en: '[PRE13]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Do note that the icon format is `.icns`, instead of `.ico`, which we usually
    use for Windows.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，图标格式为`.icns`，而不是我们通常用于Windows的`.ico`。
- en: Deploying to mobile platforms
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在移动平台上部署
- en: Apart from platforms such as Windows, Linux, and macOS, mobile platforms do
    hold equal importance. There are many developers who would like to deploy their
    applications to mobile platforms. Let's see how that's done. We will cover two
    major platforms, they are, iOS and Android.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 除了Windows、Linux和macOS等平台外，移动平台同样重要。许多开发人员希望将他们的应用程序部署到移动平台。让我们看看如何做到这一点。我们将涵盖两个主要平台，即iOS和Android。
- en: iOS
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: iOS
- en: 'Deploying Qt applications on iOS is really simple and easy. Just like we did
    previously for macOS, you need to first install Xcode on your development PC:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在iOS上部署Qt应用程序非常简单。就像我们之前为macOS所做的那样，您需要首先在开发PC上安装Xcode：
- en: '![](img/3be1b23b-4409-4291-8b3a-50b98101ecde.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3be1b23b-4409-4291-8b3a-50b98101ecde.png)'
- en: 'Then, restart Qt Creator. It should now detect the existence of Xcode, and
    it will then automatically set the compiler settings for you:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，重新启动Qt Creator。它现在应该能够检测到Xcode的存在，并且会自动为您设置编译器设置：
- en: '![](img/3a8e54b9-b260-4f38-8b25-33541d29e9a0.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3a8e54b9-b260-4f38-8b25-33541d29e9a0.png)'
- en: After that, just plug in your iPhone and hit the Run button!
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，只需将iPhone连接并点击运行按钮！
- en: Building iOS applications on Qt is really that easy. However, distributing them
    is not. This is because iOS is a very closed ecosystem, just like a walled garden.
    You are not only required to register as an app developer with Apple, you also
    need to code sign your iOS applications before you're able to distribute it to
    your users. There is no way you can avoid these steps if you want to build your
    apps for the iOS.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在Qt上构建iOS应用程序确实很容易。然而，分发它们并不容易。这是因为iOS就像一个有围墙的花园一样，是一个非常封闭的生态系统。您不仅需要在Apple注册为应用程序开发人员，还需要在能够将其分发给用户之前对iOS应用程序进行代码签名。如果您想为iOS构建应用程序，您无法避开这些步骤。
- en: You can learn more about these by visiting the following link: [https://developer.apple.com/app-store/submissions.](https://developer.apple.com/app-store/submissions)
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过访问以下链接了解更多信息：[https://developer.apple.com/app-store/submissions.](https://developer.apple.com/app-store/submissions)
- en: Android
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android
- en: 'Even though Android is a Linux-based operating system, it is very different
    when comparing it  to the Linux platforms that you run on your PC. To build Android
    applications on Qt, you must first install **Android SDK**, **Android NDK**, and
    **Apache ANT** to your development PC, regardless of whether you''re running Windows,
    Linux, or macOS:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Android是基于Linux的操作系统，但与您在PC上运行的Linux平台相比，它非常不同。要在Qt上构建Android应用程序，无论您是在Windows、Linux还是macOS上运行，都必须先将**Android
    SDK**、**Android NDK**和**Apache ANT**安装到开发PC上：
- en: '![](img/c84e6e83-7ac5-46fc-b538-4f7013df7fa0.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c84e6e83-7ac5-46fc-b538-4f7013df7fa0.png)'
- en: 'These three packages are essential when it comes to building Android applications
    on Qt. Once all of them have been installed, restart Qt Creator, and voilà, it
    should have now detected their existence and the build settings will now have
    been set automatically:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个软件包在构建Qt上的Android应用程序时至关重要。一旦它们都安装好了，重新启动Qt Creator，它应该已经检测到它们的存在，并且构建设置现在应该已经自动设置好了：
- en: '![](img/670eda7a-b1cb-49ef-80f4-e32d4bf20ced.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/670eda7a-b1cb-49ef-80f4-e32d4bf20ced.png)'
- en: 'Lastly, you can configure your Android app by opening the `AndroidManifect.xml`
    file with Qt Creator:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您可以通过使用Qt Creator打开`AndroidManifect.xml`文件来配置您的Android应用程序：
- en: '![](img/d5039d76-b634-4e6b-9116-3b4ef38c82c0.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d5039d76-b634-4e6b-9116-3b4ef38c82c0.png)'
- en: You can set everything here, such as the package name, version code, SDK version,
    application icon, permissions, and so on.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在这里设置一切，如包名称、版本代码、SDK版本、应用程序图标、权限等。
- en: Android is an open system compared to iOS, so there is no need for you to do
    anything before you're able to distribute your applications to your users. You
    can, however, choose to register as a Google Play developer if you want to distribute
    your apps on the Google Play Store.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 与iOS相比，Android是一个开放的系统，因此在将应用程序分发给用户之前，您无需做任何事情。但是，如果您希望在Google Play商店上分发您的应用程序，可以选择注册为Google
    Play开发人员。
- en: Summary
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have learned how to compile and distribute our Qt applications
    for different platforms, such as Windows, Linux, macOS, Android, and iOS. In the
    next chapter, we will learn different debugging methods that could save development
    time. Let's check it out!
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经学习了如何为不同平台（如Windows、Linux、macOS、Android和iOS）编译和分发我们的Qt应用程序。在下一章中，我们将学习不同的调试方法，这可以节省开发时间。让我们来看看吧！
