- en: Chapter 7. Procedurally Modifying Audio
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第七章。程序修改音频
- en: Now that our game art has received procedural treatment, let's turn our attention
    to its neighbor, sound. Great sound is imperative for a good game. Think about
    how iconic the sound of Super Mario's jump is, or the sound of chomping ghosts
    in Packman! A great soundtrack and accompanying game sounds help players immerse
    themselves in the worlds that we create as game developers. It's an area that
    needs to be done correctly, and there needs to be enough diversity here so that
    your players don't get sick of hearing the same sound effects over and over again.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的游戏艺术已经接受了程序处理，让我们把注意力转向它的邻居，声音。优秀的声音对于一个好游戏至关重要。想想超级马里奥跳跃的声音有多具有标志性，或者吃豆人中吃豆鬼的声音！出色的配乐和游戏音效帮助玩家沉浸在我们作为游戏开发者创造的世界中。这是一个需要正确完成的领域，这里需要足够的多样性，以便你的玩家不会厌倦一遍又一遍地听到相同的音效。
- en: We could manually create lots of variants of sound effects, but that's not the
    procedural way! Instead, we'll alter sounds randomly at runtime to create a slightly
    different sound each time it's played. Then, we'll utilize SFML's audio functions
    to create spatialized 3D sounds, thus adding more depth and immersion to the game.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以手动创建大量的声音效果变体，但这不是程序化的方式！相反，我们将在运行时随机修改声音，以便每次播放时都创建略有不同的声音。然后，我们将利用SFML的音频功能创建空间化的3D声音，从而为游戏增添更多的深度和沉浸感。
- en: Procedurally generating audio from scratch is a very complex task. Our work
    in this area will be somewhat brief, and really limited to procedurally modifying
    existing sounds as opposed to their outright creation. Still, this will serve
    as a good introduction to taking a procedural approach toward audio.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 从头开始程序生成音频是一个非常复杂的任务。我们在这个领域的工作将会相对简短，真正局限于对现有声音进行程序化修改，而不是完全创作它们。不过，这将作为一个向音频采用程序化方法的良好介绍。
- en: 'In this chapter, we''ll cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: SFML audio
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SFML音频
- en: The difference between `sf::sound` and `sf::music`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sf::sound` 和 `sf::music` 之间的区别'
- en: Altering existing sound effects
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改现有的音效
- en: Creating spatialized 3D sound
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建空间化的3D声音
- en: An introduction to SFML audio
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SFML音频简介
- en: 'SFML has its own module dedicated to audio, which provides a number of useful
    functions that we can use to modify sounds. There are two main sound types in
    SFML: `sf::Sound` and `sf::Music`. We''ll cover the difference between these two
    types in detail shortly. It also provides a number of functions to edit the properties
    of sounds, such as pitch and volume. We''ll use these to give our sound effects
    some variance.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: SFML有自己专门的音频模块，提供了许多有用的函数，我们可以用来修改声音。SFML中有两种主要的声音类型：`sf::Sound` 和 `sf::Music`。我们将很快详细介绍这两种类型之间的区别。它还提供了许多函数来编辑声音的属性，如音调和音量。我们将使用这些函数给我们的声音效果增加一些变化。
- en: sf::Sound versus sf::Music
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: sf::Sound 与 sf::Music
- en: 'Before we start working with audio, we need to look at the difference between
    `sf::Sound` and `sf::Music`:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始处理音频之前，我们需要看一下 `sf::Sound` 和 `sf::Music` 之间的区别：
- en: '`Sf::Sound` is intended for shorter sound clips such as picking up an object
    or footsteps. The sound is loaded in its entirety into the memory, and it is ready
    to be played with no latency.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Sf::Sound` 适用于像拾取物品或脚步声这样的短声音剪辑。声音会完整地加载到内存中，并且准备好播放，没有延迟。'
- en: '`Sf::Music` is intended for longer, bigger sound files and is not loaded into
    the memory; it is streamed as it is used.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Sf::Music` 用于更长、更大的声音文件，并不会加载到内存中；它在使用时会被流式传输。'
- en: This might seem like a slight difference, but it's very important to use the
    correct type. For example, if we were to load a game's music into an `sf::Sound`
    object, the game would use a lot of memory!
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来是一个细微的差别，但使用正确的类型非常重要。例如，如果我们将游戏的音乐加载到一个 `sf::Sound` 对象中，游戏会使用大量内存！
- en: sf::SoundBuffer
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: sf::SoundBuffer
- en: When creating a sprite in SFML, we create an `sf::Sprite` object, which contains
    information such as the scale and position. The texture itself is stored in an
    `sf::Texture` object to which the sprite object holds a reference. The `sf::Sound`
    class works in the same way, with an `sf::SoundBuffer` object holding the actual
    sound and `sf::Sound` simply holding a reference to it.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在SFML中创建精灵时，我们创建一个包含比例和位置等信息的 `sf::Sprite` 对象。纹理本身存储在一个 `sf::Texture` 对象中，精灵对象持有对它的引用。`sf::Sound`
    类的工作方式与此类似，一个 `sf::SoundBuffer` 对象持有实际的声音，而 `sf::Sound` 只是持有对它的引用。
- en: 'The following code shows how a sound is loaded:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码显示了如何加载声音：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `sf::SoundBuffer` object must remain active for the same amount of time
    as the `sf::Sound` object does. If `sf::SoundBuffer` goes out of scope before
    the `sf::Sound` object that holds a reference to it, we will get an error, as
    it will try to play a sound that no longer exists.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`sf::SoundBuffer` 对象必须保持活跃的时间与 `sf::Sound` 对象一样长。如果 `sf::SoundBuffer` 在持有对它引用的
    `sf::Sound` 对象之前就超出了作用域，我们将会收到一个错误，因为它会尝试播放一个不再存在的声音。'
- en: Also, since we only hold a reference to the sound buffer, it can be used in
    multiple sound objects. To play a sound, we just make a call to `sf::Sound::play`,
    and this runs the sound in a separate thread.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，由于我们只持有对声音缓冲区的引用，它可以在多个声音对象中使用。要播放声音，我们只需调用 `sf::Sound::play`，这将在单独的线程中运行声音。
- en: Selecting a random main track
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择一个随机的主音轨
- en: Currently, the game has no sounds or music. We have been running the game frequently
    throughout the course of the book, and hearing the same track over and over can
    get very tedious. So, we've waited until now to put it in. It's a very simple
    process to add sounds. So, we'll cover this process in its entirety.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，游戏没有声音或音乐。在整本书的过程中，我们一直在频繁地运行游戏，一遍又一遍地听着相同的音轨会变得非常乏味。因此，我们一直等到现在才把它放进去。添加声音是一个非常简单的过程。因此，我们将完整地介绍这个过程。
- en: To start, we'll add a main music track that will underpin the game. However,
    instead of having a fixed track, we will add multiple possibilities and randomly
    choose one during startup.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将添加一个主音乐轨，作为游戏的基础。但是，我们不会固定一条音轨，而是添加多种可能性，并在启动时随机选择一种。
- en: 'Let''s start by defining all the possibilities in an enumerator in the usual
    way. Add the following code to `Util.h`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先以通常的方式在枚举器中定义所有可能性。将以下代码添加到`Util.h`中：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As the `enum` shows, we're going to have four possible tracks. These are already
    included in the `/resources/music/` folder. So, all that we have to do is select
    one track at random and load it at the start of the game. Since we want this music
    to start straightaway, we will insert the code that accomplishes this in our `Game`
    classes constructor.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 根据`enum`显示，我们将有四个可能的音轨。这些已经包含在`/resources/music/`文件夹中。因此，我们所要做的就是随机选择一条音轨并在游戏开始时加载它。由于我们希望这首音乐立即开始，我们将在`Game`类的构造函数中插入实现这一点的代码。
- en: We've selected a random value from an enumerator a few times now, so it should
    be familiar. We'll generate a number between 1 and `MUSIC_TRACK_COUNT` (inclusive),
    however, instead of casting it to the enumerator type as we normally do, we're
    going to leave it as an integer. The reason behind this will soon become apparent.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经几次从枚举器中选择了一个随机值，所以应该很熟悉了。我们将生成一个1到`MUSIC_TRACK_COUNT`（包括）之间的数字，但是，与其像通常那样将其转换为枚举器类型，我们将把它留在整数形式。这背后的原因很快就会显而易见。
- en: 'For now, let''s add the following code to `Game::Game`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将以下代码添加到`Game::Game`中：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, the reason why we didn''t cast to the `enum` type is because we can be
    clever when it comes to how we load sounds. We have four music tracks to choose
    from, and they have the following names:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们之所以没有转换为`enum`类型，是因为在加载声音时我们可以很聪明。我们有四个音乐曲目可供选择，它们的名称如下：
- en: '`msc_main_track_1.wav`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`msc_main_track_1.wav`'
- en: '`msc_main_track_2.wav`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`msc_main_track_2.wav`'
- en: '`msc_main_track_3.wav`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`msc_main_track_3.wav`'
- en: '`msc_main_track_4.wav`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`msc_main_track_4.wav`'
- en: 'Note that the only thing that''s different in their names is their number.
    We''ve already generated a number between 1 to 4\. So, instead of creating a `switch`
    statement, we can simply use this index to load the correct track, as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，它们名称中唯一不同的是它们的编号。我们已经生成了1到4之间的一个数字。因此，我们可以简单地使用这个索引来加载正确的音轨，而不是创建一个`switch`语句，如下所示：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, when we call `m_music.play()`, the sound will be streamed. Let''s finish
    by calling this function:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们调用`m_music.play()`时，声音将被流式传输。最后，通过调用这个函数来完成：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If we run the game now, we will hear one of the four randomly selected tracks
    playing!
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在运行游戏，我们将听到四个随机选择的音轨中的一个正在播放！
- en: Adding sound effects
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加音效
- en: Now that we have the game's main music, let's add some sounds effects to the
    mix! We've covered `sf::Sound,sf::SoundBuffer`, and how to play sounds, so we're
    ready to jump right in.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经有了游戏的主要音乐，让我们把一些音效加入其中！我们已经介绍了`sf::Sound,sf::SoundBuffer`以及如何播放声音，所以我们已经准备好开始了。
- en: We're going to have a few sound effects in our game. One for the death of an
    enemy, one for us being hit, one for each pickup, and one for the sound of torches
    that we'll be playing with later.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的游戏中将会有一些音效。一个用于敌人的死亡，一个用于我们被击中，一个用于每个拾取，以及一个用于我们稍后将要播放的火炬的声音。
- en: 'We''ll start by defining the `sf::Sound` variables for each sound in `Game.h`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先在`Game.h`中为每个声音定义`sf::Sound`变量：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, let''s initialize these sounds in `Game::Initialize`, as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在`Game::Initialize`中初始化这些声音，如下所示：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'With the sounds initialized, we just call `sf::Sound::play` to play the sound
    when we need it. We handle item pickups in the `Game::UpdateItems` function. Therefore,
    we''ll put this code there:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 音效初始化后，我们只需在需要时调用`sf::Sound::play`来播放声音。我们在`Game::UpdateItems`函数中处理物品拾取。因此，我们将把这段代码放在那里：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This code covers just the gold and gem pickups. The same thing needs to be done
    for all the other pickups and cases where we need to play sounds, such as when
    an enemy dies and a player takes damage.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码只涵盖了金币和宝石的拾取。对于所有其他拾取和需要播放声音的情况，比如敌人死亡和玩家受到伤害时，需要做同样的事情。
- en: Editing sound effects
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑音效
- en: 'With the sound effects added, we can now alter them to create variety. SFML
    offers a number of ways in which we can manipulate sounds, which includes the
    following:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了音效后，我们现在可以对它们进行修改以创建多样性。SFML提供了许多我们可以操作声音的方式，其中包括以下内容：
- en: Pitch
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 音调
- en: Volume
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 音量
- en: Position
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 位置
- en: 'We''ll start with the simplest: the pitch. Then, we''ll cover both the volume
    and position by creating spatialized sounds. These values will be set randomly
    each time we play a sound effect. Before we get into it, let''s create a function
    to encapsulate the modification and playing of sounds. This will save us from
    having repeated code throughout the class.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从最简单的开始：音调。然后，我们将通过创建空间化声音来涵盖音量和位置。每次播放声音效果时，这些值将被随机设置。在我们深入研究之前，让我们创建一个函数来封装声音的修改和播放。这将使我们免于在整个类中重复代码。
- en: Playing a sound function
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 播放声音函数
- en: 'Collisions with enemies and items are processed in the main game class. So,
    it''s here that we will place the function to play sound effects. Add the following
    function declaration to `Game.h`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 与敌人和物品的碰撞在主游戏类中进行处理。因此，我们将在这里放置播放音效的函数。将以下函数声明添加到`Game.h`中：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This function takes two parameters: we take the sound that we want to play
    as a reference, to avoid an expensive copy, and we also include a parameter for
    the position where we want to play the sound. Note that we''ve given the position
    parameter a default value of `{ 0.f, 0.f }`. Therefore, it can be ignored should
    we wish to do so. We''ll cover exactly what this parameter does when we create
    spatialized sounds.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数接受两个参数：我们将要播放的声音作为引用传递，以避免昂贵的复制，我们还包括一个参数，用于指定我们想要播放声音的位置。请注意，我们给位置参数一个默认值`{
    0.f, 0.f }`。因此，如果我们希望这样做，它可以被忽略。当我们创建空间化声音时，我们将详细介绍这个参数的作用。
- en: 'Let''s give this class a basic body for now to simply play the sound passed
    via the parameter:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们暂时给这个类一个基本的主体，简单地播放通过参数传递的声音：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note that if the game was any bigger and we had a large range of many sounds,
    it would be worthwhile to encapsulate the behavior to play sounds in the same
    class in which we manage them. This would ensure that all the interactions with
    sounds happened through a common class and would keep our code organized.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果游戏规模更大，我们有许多声音，将值得将播放声音的行为封装在管理它们的同一类中。这将确保所有与声音的交互都通过一个公共类进行，并保持我们的代码有组织性。
- en: The audio listener
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 音频听众
- en: SFML comes with a static listener class. This class acts as the ear in the level
    and as such, there is only one listener in a scene. Since this is a static class,
    we never instantiate it, and we interact with it through its static functions
    such as `sf::Listener::setPosition`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: SFML带有一个静态听众类。这个类充当了关卡中的耳朵，因此在一个场景中只有一个听众。由于这是一个静态类，我们从不实例化它，并且通过它的静态函数与它交互，比如`sf::Listener::setPosition`。
- en: 'By "ear in the level", I mean that all the sounds in the level are heard at
    this location. This is how we create 3D sounds. For example, if the source of
    a sound was to the right of the listener, it would be heard more in the right
    speaker. Take a look at the following diagram:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我所说的“在关卡中的耳朵”，是指在这个位置听到关卡中的所有声音。这就是我们创建3D声音的方式。例如，如果声音的来源在听众的右侧，那么在右扬声器中会听到更多声音。看一下下面的图表：
- en: '![The audio listener](img/B04920_07_01.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![音频听众](img/B04920_07_01.jpg)'
- en: In this diagram the blue circle represents the position of the audio listener,
    and the red circle represents the position of the sound. You can see that since
    the source of the sound is to the right of the listener, we can use this to determine
    that the sound should be heard more from the right speaker as compared to the
    left one. This is how spatialized sound is created, and we'll look at this in
    detail later in the chapter.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个图表中，蓝色圆圈代表音频听众的位置，红色圆圈代表声音的位置。你可以看到，由于声音的来源在听众的右侧，我们可以利用这一点来确定声音应该从右扬声器中听到的比从左扬声器中听到的更多。这就是空间化声音的创建方式，我们将在本章后面详细讨论。
- en: For occasions where we don't want sound to be spatialized, SFML gives us the
    `sf::Sound::setRelativeToListener` function. This is a self-explanatory function;
    the position of the sound is relative to that of the listener as opposed to being
    absolute within the scene. We set this to `true` and give the sound a position
    of `{0.f, 0.f, 0.f}`, positioning it right on top of the listener.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们不希望声音被空间化的情况，SFML给了我们`sf::Sound::setRelativeToListener`函数。这是一个不言自明的函数；声音的位置是相对于听众的位置而不是在场景中的绝对位置。我们将其设置为`true`，并给声音一个位置`{0.f,
    0.f, 0.f}`，将其放在听众的正上方。
- en: With regards to the previous diagram, this means that the blue audio listener
    will be placed directly at the top of the red sound source, which means that it
    is not spatialized. This is the behavior that we want for the pickup sounds. For
    each sound, we need to make a call to this function, passing `true` as the parameter.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 关于前面的图表，这意味着蓝色的音频听众将直接放在红色的声源的正上方，这意味着它不是空间化的。这是我们希望捡起声音的行为。对于每个声音，我们需要调用这个函数，将`true`作为参数传递。
- en: 'Let''s update the code to change this:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新代码来改变这一点：
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Sounds that originate from the same location as the player require this. For
    example, an item is only picked up once the enemy occupies the same space. You
    will never pick up an item from a distance so the sound will never be spatialized.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 与玩家位置相同的位置产生的声音需要这个。例如，物品只有在敌人占据相同空间时才会被捡起。你永远不会从远处捡起物品，所以声音永远不会被空间化。
- en: Creating a fluctuation in a pitch
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建音调波动
- en: Pitch is the perceived frequency at which a sound is heard. SFML offers a way
    to increase or decrease the pitch of a sound, and it achieves this by increasing/decreasing
    its playback speed respectively. Play it back faster, and it'll sound higher.
    The default value of this is 1, so generating a number that's lesser or greater
    than 1 will give us a fluctuation in pitch.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 音调是听到声音的感知频率。SFML提供了一种增加或减少声音音调的方法，它通过增加/减少播放速度来实现。播放得更快，声音就会听起来更高。默认值为1，因此生成一个小于或大于1的数字将给我们带来音调的波动。
- en: 'We''ll add this behavior to our new `Game::PlaySound` function. To start, we''ll
    generate a number between 0.95 and 1.05, set the pitch, and play the sound, as
    follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把这个行为添加到我们的新的`Game::PlaySound`函数中。首先，我们将生成一个介于0.95和1.05之间的数字，设置音调，并播放声音，如下所示：
- en: '[PRE11]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, whenever we want a sound to have this fluctuation in pitch, we need to
    play it through this function as opposed to directly playing it. This applies
    to all the pickup sounds. So, let''s implement this change:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每当我们想要一个声音有这种音调波动时，我们需要通过这个函数播放它，而不是直接播放。这适用于所有的捡起声音。所以，让我们实现这个改变：
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If we now play the game and pick up some items, we can hear that the pickup
    sound is slightly different each time, bringing some variance to the sound effects.
    If you want the sounds that are played when a key is picked up, an enemy dies,
    and a player is hit, to have their pitch fluctuated too, ensure that they are
    also played via this function as opposed to them being directly played.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在玩游戏并捡起一些物品，我们会听到每次捡起声音都略有不同，给声音效果带来了一些变化。如果你希望在捡起钥匙、敌人死亡和玩家受到攻击时播放的声音也有音调波动，确保它们也通过这个函数播放，而不是直接播放。
- en: 3D sound – spatialization
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3D声音-空间化
- en: Now let's look at ways to create some 3D audio to bring depth to a game scene.
    When we walk past a torch, we want to hear it move past us, and we want to be
    able to hear our enemies coming at us from a direction. Spatialization allows
    us to do this, and SFML has great features to help us achieve that.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何创建一些3D音频来为游戏场景增加深度。当我们走过一个火炬时，我们希望听到它从我们身边经过，我们希望能够听到敌人从一个方向向我们走来。空间化允许我们做到这一点，SFML有很好的功能来帮助我们实现这一点。
- en: The audio listener
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 音频听众
- en: We've already defined what the audio listener is and how it is used to create
    spatialized audio. As the first step toward achieving this, we need to set the
    position of the listener after each update, ensuring that all the sounds in the
    level are heard from the player's perspective.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经定义了音频听者是什么以及它是如何用来创建空间化音频的。作为实现这一目标的第一步，我们需要在每次更新后设置听者的位置，确保关卡中的所有声音都是从玩家的视角听到的。
- en: At the start of each game's update, we recalculate the player's position. Right
    after this we can update the position of the listener class to this new location.
    Remember that `sf::Listener` is a static class and we don't instantiate it. All
    that we need to do is make a static call to `sf::Listener::setPosition`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个游戏更新的开始，我们重新计算玩家的位置。在这之后，我们可以将听者类的位置更新到这个新位置。记住`sf::Listener`是一个静态类，我们不需要实例化它。我们所需要做的就是静态调用`sf::Listener::setPosition`。
- en: 'Let''s append this to the `Game::Update` function, as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这个附加到`Game::Update`函数中，如下所示：
- en: '[PRE13]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Moving forward, we can now be sure that the listener is in the correct position
    in order for us to create a 3D sound.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 继续前进，我们现在可以确保听者处于正确的位置，以便我们创建3D声音。
- en: The minimum distance
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最小距离
- en: 'The minimum distance is the closest the player can be to the source of a sound
    before it''s heard at full volume. Imagine it as a circle surrounding the sound
    source. The radius of this circle is `MinDistance`, as shown in the following
    diagram:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 最小距离是玩家在听到声音的全音量之前可以接近声源的最近距离。想象它是围绕声源的一个圆圈。这个圆圈的半径是`MinDistance`，如下图所示：
- en: '![The minimum distance](img/B04920_07_02.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![最小距离](img/B04920_07_02.jpg)'
- en: In our case, the minimum distance of the sounds will not change throughout the
    course of the game, which means that we can set their values once in the `Game::Initialize`
    function when we load the sounds. The value that we use here is a matter of preference,
    but I found a minimum distance of `80.f` works well. Let's get these values set.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，声音的最小距离在游戏过程中不会改变，这意味着我们可以在加载声音时在`Game::Initialize`函数中设置它们的值一次。我们在这里使用的值是个人偏好的问题，但我发现最小距离为`80.f`效果很好。让我们设置这些值。
- en: 'Make the following modifications to the `Game::Initialize` function:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 对`Game::Initialize`函数进行以下修改：
- en: '[PRE14]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Attenuation
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 衰减
- en: Attenuation basically means "to lessen" or "to make something smaller". In the
    context of audio, it's the rate at which the sound gets quieter as we move away
    from the source. This comes into effect when we are outside the minimum distance
    and is used to calculate the volume of the sound.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 衰减基本上意味着“减少”或“使某物变小”。在音频的上下文中，它是声音随着我们远离声源而变得更安静的速率。当我们超出最小距离时，这就会生效，并用于计算声音的音量。
- en: 'In the following diagram, the gradient represents the volume of the sound.
    The image to the left shows a high attenuation and the sound drops off very fast,
    while the image to the right shows a low attenuation and the sound drops off more
    smoothly:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图中，渐变代表声音的音量。左边的图显示了高衰减，声音下降得非常快，而右边的图显示了低衰减，声音下降得更平稳：
- en: '![Attenuation](img/B04920_07_03.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![衰减](img/B04920_07_03.jpg)'
- en: Now, let's give our two sounds an attenuation value like we did with the minimum
    distance. Again, the value used here is up to you, but I found out that an attenuation
    value of `5.f`, which is just slightly above the default, created a nice fadeout.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们给我们的两个声音一个衰减值，就像我们在最小距离上做的那样。同样，这里使用的值取决于您，但我发现一个`5.f`的衰减值，略高于默认值，可以创建一个不错的淡出效果。
- en: 'Make the following modifications to the `Game::Initialize` function:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 对`Game::Initialize`函数进行以下修改：
- en: '[PRE15]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: If we run the game now, we will see that as we approach the torches, they get
    louder, and as we walk away, they get quieter. However, they aren't 3D. For that,
    we need to update the source of the sound!
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在运行游戏，我们会看到当我们靠近火炬时，它们会变得更响亮，当我们走开时，它们会变得更安静。然而，它们并不是3D的。为此，我们需要更新声音的源！
- en: The position of the sound
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 声音的位置
- en: The position of the sound is simply its position in the scene. It's this position,
    and the position of the listener, that are used to create the 3D effect and determine
    which speaker the sound should play out of.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 声音的位置就是它在场景中的位置。正是这个位置和听者的位置被用来创建3D效果，并确定声音应该从哪个扬声器播放出来。
- en: Tip
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: To use spatialization your sounds need to be **Mono** (have a single channel).
    The ones provided with this project are, but if you're adding your own, you need
    to keep this in mind! Sounds with more than one channel already explicitly decide
    how to use the speakers.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用空间定位，您的声音需要是**单声道**（只有一个声道）。这个项目提供的声音是这样的，但是如果您要添加自己的声音，您需要记住这一点！具有多个声道的声音已经明确决定如何使用扬声器。
- en: 'Now that we have the attenuation and minimum distance set, we can now set the
    correct position of the sound so that we can hear the 3D effects. We have two
    sounds in the game that are going to be 3D: the sound of the torches and the sound
    of enemies when they are killed. As we have multiple torches in the level we have
    a bit of work to do here. We''ll start with the simpler one of the two: the sound
    of the enemies when they''re killed.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了衰减和最小距离，我们现在可以设置声音的正确位置，这样我们就可以听到3D效果。游戏中有两种声音将会是3D的：火炬的声音和敌人被杀死时的声音。由于关卡中有多个火炬，我们在这里有一些工作要做。我们将从两者中较简单的一个开始：敌人被杀死时的声音。
- en: Fixed positions
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 固定位置
- en: First, we need to update the `Game::PlaySound` function. Currently, it only
    generates a random pitch, but we need it to set the position too. You may remember
    that we made the position parameter optional by giving it a default value of `{0.f,
    0.f }`. When we pass a position and override the default, it means that we want
    to utilize a 3D sound. When we leave it blank, it means that we don't want to
    do so and the sound will be relative to the listener. Therefore, `{0.f, 0.f, 0.f}`
    is just what we need.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要更新`Game::PlaySound`函数。目前它只生成一个随机音调，但我们需要它设置位置。您可能还记得，我们通过给位置参数一个默认值`{0.f,
    0.f }`来使其成为可选参数。当我们传递一个位置并覆盖默认值时，这意味着我们想要利用3D声音。当我们留空时，这意味着我们不想这样做，声音将相对于听者。因此，`{0.f,
    0.f, 0.f}`正是我们需要的。
- en: 'Let''s hook up the position parameter in `Game::PlaySound` and use it to set
    the position of the sound, as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们连接`Game::PlaySound`中的位置参数，并使用它来设置声音的位置，如下所示：
- en: '[PRE16]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The position of the sound operates in three dimensions, but since we''re working
    with 2D sounds we can leave the *Z* value as `0.f`. Now, when we identify that
    an enemy has been killed, we simply make a call to this function and pass the
    correct sound and location of the enemy, as that''s where the sound is coming
    from, as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 声音的位置在三维空间中运作，但由于我们正在处理二维声音，我们可以将*Z*值保留为`0.f`。现在，当我们确定敌人已被杀死时，我们只需调用此函数并传递正确的声音和敌人的位置，因为声音就是来自那里，如下所示：
- en: '[PRE17]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: It's time to run the game again and listen to our handiwork. As we kill the
    enemies, we can hear that the further away they are, the fainter the sound is.
    Also, if we kill an enemy to the right, we here it coming from that direction!
    To wrap up our work with sound, let's apply the same technique to the torches
    to really give the level some depth when it comes to its audio.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是再次运行游戏并听听我们的成果的时候了。当我们杀死敌人时，我们可以听到他们离得越远，声音就越微弱。此外，如果我们向右边杀死一个敌人，我们会听到声音来自那个方向！为了完成我们的声音工作，让我们将相同的技术应用到火炬上，真正为关卡的音频增加一些深度。
- en: Note
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The clarity of the 3D sound will depend on your setup. For example, while headphones
    will allow you to easily hear sounds that are created in different directions,
    laptop speakers might not be so clear.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 3D声音的清晰度将取决于您的设置。例如，耳机可以让您轻松地听到不同方向的声音，而笔记本电脑扬声器可能就不那么清晰了。
- en: Moving positions
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 移动位置
- en: The last area that we'll add a 3D sound to is the torches in the level. As we
    walk around the level, it would be great to hear torches faintly in the distance,
    or near us in our headphones as we walk past them. However, there's a slight problem.
    We know that the spatialization of sound is achieved when the sound and the listener
    are away from one another. But what if we have a sound that needs to come from
    multiple locations? We could have a sound for each torch, but that's a waste.
    Instead, we'll calculate which torch is closet to the player and use that as the
    source.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为最后一个区域添加3D声音的是关卡中的火炬。当我们在关卡中走动时，能够在远处微弱地听到火炬的声音，或者当我们走过时在耳机中近距离地听到。然而，存在一个小问题。我们知道声音的空间化是在声音和听者相距一定距离时实现的。但是如果我们有一个需要来自多个位置的声音怎么办？我们可以为每个火炬设置一个声音，但这样很浪费。相反，我们将计算哪个火炬离玩家最近，并将其用作声源。
- en: As part of our main update function, we need to look at all the torches and
    determine which one is the nearest to the player. As the player walks around the
    level, the source will switch, giving us the impression that each torch is giving
    off its own sound, while we have only a single source in reality.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 作为我们主要的更新函数的一部分，我们需要查看所有的火炬，并确定哪一个离玩家最近。当玩家在关卡中走动时，声源会切换，给我们一种每个火炬都发出自己的声音的印象，而实际上我们只有一个声源。
- en: 'We already have a function to find the distance between two objects, namely
    `Game::DistanceBetweenPoints`. Given this, we can iterate over all the torches
    and use this function to get the distance to the player. Let''s update the `Game::Update`
    function to include this calculation, as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经有一个函数来找到两个对象之间的距离，即`Game::DistanceBetweenPoints`。有了这个，我们可以遍历所有的火炬，并使用这个函数来获取到玩家的距离。让我们更新`Game::Update`函数以包括这个计算，如下所示：
- en: '[PRE18]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As you can see, for each torch in the level, we calculate how far away it is
    from the player. If it's closer than the last one that we checked, we mark it
    as the closest. When this code is finished, we end up with the nearest torch stored
    in the shared pointer named `nearestTorch`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，对于关卡中的每个火炬，我们都会计算它离玩家有多远。如果它比我们上次检查的火炬更近，我们就将其标记为最近的。当这段代码完成时，我们最终得到了存储在名为`nearestTorch`的共享指针中的最近的火炬。
- en: With the closest torch identified, we can use its position as the position of
    the fire's sound. Now, for the rest of the sounds, we've been using the new `Game::PlaySound`
    function, but that's not suitable here. Our fire sound is already looping, we
    don't need to restart it. We just need to set its position, so we'll do it directly.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 确定了最近的火炬后，我们可以使用它的位置作为火焰声音的位置。现在，对于其余的声音，我们一直在使用新的`Game::PlaySound`函数，但这里不适用。我们的火焰声音已经在循环播放，我们不需要重新开始它。我们只需要设置它的位置，所以我们会直接这样做。
- en: 'Let''s update that code once more:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次更新那段代码：
- en: '[PRE19]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Let's run the project for the last time! We should now hear a random music track,
    some of our sound effects will be played with a fluctuating pitch, and the sounds
    of the torches and the enemies dying will be spatialized.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们最后一次运行项目！现在我们应该听到一个随机的音乐曲目，一些我们的音效将以不断变化的音调播放，火炬和敌人死亡的声音将被空间化。
- en: Exercises
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: 'To help you test your understanding of this chapter''s content, here are a
    few exercises that you should work on. They are not imperative to the rest of
    the book, but working on them will help you assess your strengths and weaknesses
    in the material covered:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助您测试对本章内容的理解，这里有一些练习供您练习。它们对本书的其余部分并不是必不可少的，但是练习它们将有助于您评估所涵盖材料的优势和劣势：
- en: Add more tracks to the list of main tracks.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将更多的曲目添加到主曲目列表中。
- en: Add a sound that is spatialized for the door when it opens in the `level`. When
    a player collects the key for the `level`, hearing the door sliding open in the
    background will help them find it.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“关卡”中添加一个空间化的声音，当门打开时能听到。当玩家收集到“关卡”的钥匙时，能听到背景中门滑动打开的声音将帮助他们找到它。
- en: Add some atmospheric sound effects to the `level`; the sound effects should
    be spatialized and must play at random intervals. We have not covered anything
    like that so far so it should be a challenge.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“关卡”中添加一些大气的音效；这些音效应该是空间化的，并且必须在随机的时间间隔内播放。到目前为止我们还没有涉及到这样的内容，所以这可能是一个挑战。
- en: Summary
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we used SFML's built-in audio modifiers to make alterations
    to our sound effects. We also utilized the modifiers to create spatialized 3D
    sounds, bringing more depth to our game scene.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用了SFML内置的音频修改器来对我们的音效进行修改。我们还利用这些修改器来创建空间化的3D声音，为我们的游戏场景增添了更多的深度。
- en: In the next chapter, we're going to use everything that we learned so far to
    create complex procedural behavior and mechanics in the form of pathfinding and
    unique level goals. We'll give our enemies the intelligence to traverse levels
    and chase the player, and we'll create a unique level goal with unique rewards
    for the player.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将运用到目前为止学到的一切来创建复杂的程序行为和机制，包括寻路和独特的关卡目标。我们将赋予我们的敌人智能，让他们穿越关卡并追逐玩家，我们还将为玩家创建一个独特的关卡目标，并为其提供独特的奖励。
