- en: Chapter 4. Localizing Your Application with Qt Linguist
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。使用Qt Linguist本地化您的应用程序
- en: Localization is an important, yet commonly neglected part of software development
    today. Most authors of applications, whether those applications are commercial
    or open source, have hopes to capture a large number of users for their application.
    Increasingly, this means supporting multiple languages in multiple locales; often
    needing support for multiple languages in one locale (think of French and English
    co-existing in Canada).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本地化是当今软件开发中重要但常被忽视的部分。大多数应用程序的作者，无论这些应用程序是商业应用程序还是开源应用程序，都希望为其应用程序吸引大量用户。越来越多地意味着在多个语言和多个区域设置中支持多种语言；通常需要在一个区域设置中支持多种语言（想想加拿大同时存在法语和英语）。
- en: Qt has long had a framework for making applications easy to localize. With tools
    that help you avoid hardcoding strings in your application and a GUI named Qt
    Linguist to help manage translation, Qt eases the burden of localization throughout
    your application development cycle. In this chapter, we will look at Qt's strategy
    for localization, discussing the three tools (**lupdate**, **lrelease**, and **Qt
    Linguist**) Qt provides and how to use them, along with what you need to do as
    you write your application to take advantage of Qt's localization framework.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Qt长期以来一直有一个框架，用于使应用程序易于本地化。借助这些工具，您可以避免在应用程序中硬编码字符串，并使用名为Qt Linguist的GUI来帮助管理翻译，从而减轻Qt在整个应用程序开发周期中的本地化负担。在本章中，我们将研究Qt的本地化策略，讨论Qt提供的三种工具（**lupdate**、**lrelease**和**Qt
    Linguist**）以及如何使用它们，以及在编写应用程序时如何利用Qt的本地化框架。
- en: Understanding the task of localization
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解本地化任务
- en: 'Localizing your application has several phases, which typically overlap throughout
    a project. These phases are:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本地化您的应用程序有几个阶段，通常在整个项目中重叠。这些阶段包括：
- en: As you write your application, you place strings to localize your application
    in a specific way so that Qt can identify the strings as needing localization.
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编写应用程序时，您以特定方式放置字符串以本地化您的应用程序，以便Qt可以识别需要本地化的字符串。
- en: Periodically, you extract all the strings in your application and give them
    to translators to translate.
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定期提取应用程序中的所有字符串并交给翻译人员进行翻译。
- en: Translators provide translations for the strings in your application.
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 翻译人员为您的应用程序提供字符串的翻译。
- en: You compile translation files with the translated strings for each language
    you want to support.
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您使用翻译后的字符串编译翻译文件，以支持每种语言。
- en: 'Qt provides four tools to facilitate these phases:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Qt提供了四种工具来促进这些阶段：
- en: The `tr` and `qsTr` functions for C++ and QML let you identify the strings in
    your application that require localization
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C++和QML的`tr`和`qsTr`函数让您识别应用程序中需要本地化的字符串
- en: The `lupdate` command generates a list of the strings that need localization
    in your application
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lupdate`命令会生成需要在您的应用程序中本地化的字符串列表'
- en: Translators use Qt Linguist to provide translations of the strings in your application
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 翻译人员使用Qt Linguist为您的应用程序提供字符串的翻译
- en: The `lrelease` command takes the translated strings from Qt Creator and packages
    them in a format for your application to consume
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lrelease`命令会将Qt Creator中的翻译字符串打包成应用程序可使用的格式'
- en: 'The following figure shows how these phases interact:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了这些阶段是如何相互作用的：
- en: '![Understanding the task of localization](img/2319OS_04_01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![理解本地化任务](img/2319OS_04_01.jpg)'
- en: The lupdate/Linguist/lrelease cycle
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: lupdate/Linguist/lrelease循环
- en: Software development is iterative, and localization is no exception. Small projects
    may prefer to do the localization just once, or perhaps twice, waiting until the
    application is nearly done before submitting the application strings for localization.
    Larger applications, or larger companies with a dedicated staff of translators,
    may prefer a more iterative approach, going through the localization cycle several
    times throughout application development. Qt supports both the models.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发是迭代的，本地化也不例外。小型项目可能更喜欢只进行一次或两次本地化，等到应用程序几乎完成后再提交应用程序字符串进行本地化。较大的应用程序或拥有专门的翻译人员团队的较大公司可能更喜欢更迭代的方法，在应用程序开发过程中多次进行本地化循环。Qt支持这两种模式。
- en: Marking strings for localization
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标记字符串以进行本地化
- en: 'All the way back in [Chapter 1](ch01.html "Chapter 1. Getting Started with
    Qt Creator"), *Getting Started with Qt Creator*, I told you to always mark your
    strings for localization using the `tr` and `qsTr` functions: `tr` for C++ and
    `qsTr` for QML strings. Doing so has two key advantages for you. First, it enables
    Qt to find every string that needs localization. Second, if you install a Qt translator
    object in your application and provide a translation file, the strings you wrap
    with these functions are automatically replaced by their localized equivalent.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章。使用Qt Creator入门")*使用Qt Creator入门*中，我告诉您始终要使用`tr`和`qsTr`函数标记您的字符串以进行本地化：C++使用`tr`，QML字符串使用`qsTr`。这样做对您有两个关键优势。首先，它使Qt能够找到每个需要本地化的字符串。其次，如果您在应用程序中安装了Qt翻译器对象并提供了翻译文件，那么您使用这些函数包装的字符串将自动替换为其本地化等效字符串。
- en: 'Let''s examine the use of `tr` in more detail. All Qt objects that include
    the `Q_OBJECT` macro in their declaration include the `tr` function. You''ve seen
    it with one argument, as shown in the following line of code:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地研究`tr`的使用。在其声明中包含`Q_OBJECT`宏的所有Qt对象都包括`tr`函数。您已经看到它带有一个参数，如下面的代码行所示：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The leading `&` in the string isn't for the `tr` function, but for the keyboard
    accelerators; you can prefix a letter with `&` and it gets the default system
    (*Alt* for Windows, *command* for Apple, and *Control* for Linux). The `tr` function
    uses the string you pass as the string in the user interface if no translated
    version of the string appears in the application's current translation table,
    or uses the string in the current translation table if one exists.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串中的前导`&`不是给`tr`函数用的，而是给键盘加速器用的；您可以用`&`前缀一个字母，它就会得到默认的系统（Windows为*Alt*，Apple为*command*，Linux为*Control*）。如果在应用程序的当前翻译表中没有字符串的翻译版本，`tr`函数将使用您传递的字符串作为用户界面中的字符串，或者如果当前翻译表中存在该字符串，则使用当前翻译表中的字符串。
- en: 'The `tr` function can take a second argument, a disambiguation context that
    `tr` uses for the same string that may require different translations. It can
    also handle strings with plurals, as shown in the following line of code:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`tr`函数可以接受第二个参数，一个消歧义上下文，`tr`用于可能需要不同翻译的相同字符串。它还可以处理带有复数的字符串，如下面的代码行所示：'
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Depending on the value of count and the locale, a different string is returned.
    So, a native English translation might return "0 items replaced", "1 item replaced",
    "2 items replaced", and so on, while a French translation could return "0 item
    remplacé", "1 item remplacé", "2 items remplacés", and so on.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 根据计数和区域设置的值，返回不同的字符串。因此，本地化的英文翻译可能返回"0 items replaced"，"1 item replaced"，"2
    items replaced"等，而法语翻译可能返回"0 item remplacé"，"1 item remplacé"，"2 items remplacés"等。
- en: The `qsTr` function in QML works similarly, but it does not have the flexibility
    that the `tr` method has for disambiguation or handling plurals.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: QML中的`qsTr`函数工作原理类似，但它没有`tr`方法对于消除歧义或处理复数的灵活性。
- en: Localizing your application with Qt Linguist
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Qt Linguist本地化您的应用程序
- en: Once you've marked your strings using `tr` or `qsTr`, you need to generate a
    table of those strings for Qt Linguist to localize. You can do this using the
    `lupdate` command, which takes your `.pro` file and walks your sources looking
    for strings to localize, and creates an XML file for Qt Linguist of the strings
    you need to translate. You'll do this once for each language you want to support.
    When doing this, it's best to name the resulting files systematically; one way
    to do that is to use the name of the project file, followed by a dash, followed
    by the ISO-639-2 language code for the language.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您使用`tr`或`qsTr`标记了您的字符串，您需要为Qt Linguist生成这些字符串的表格以进行本地化。您可以使用`lupdate`命令来实现这一点，该命令会获取您的`.pro`文件并遍历您的源代码以查找需要本地化的字符串，并为Qt
    Linguist创建一个XML文件，其中包含您需要翻译的字符串。您需要为每种想要支持的语言执行此操作。在执行此操作时，最好以系统化的方式命名生成的文件；一种方法是使用项目文件的名称，后跟ISO-639-2语言代码。
- en: 'A concrete example is in order. This chapter has `QtLinguistExample`; I can
    run `lupdate` using a command like this to create a list of strings that I''ll
    translate to Esperanto (ISO-639-2 language code EPO):'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 需要举一个具体的例子。本章有一个`QtLinguistExample`；我可以使用如下命令运行`lupdate`来创建一个我将翻译成世界语（ISO-639-2语言代码EPO）的字符串列表：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Where the `–pro` file indicates the `.pro` file that contains the list of sources
    to scan for strings to translate, and the `–ts` argument indicates the name of
    the translation files to be written.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 其中`–pro`文件指示包含要扫描以进行翻译的源文件列表的`.pro`文件，`–ts`参数指示要写入的翻译文件的名称。
- en: Tip
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You'll need `lupdate` in your path, of course. How you set your path will depend
    on whether you're working on Windows, Mac OS X, or Linux, and where you've installed
    Qt. Some installations of Qt may update your path automatically, while others
    may not. On my Windows machine, for example, I find `lupdate` at `C:\qt\5.1.0\msvc2012_64\bin\lupdate.exe`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您需要在路径中添加`lupdate`。您如何设置路径将取决于您是在Windows、Mac OS X还是Linux上工作，以及您在哪里安装了Qt。有些Qt的安装可能会自动更新您的路径，而其他可能不会。例如，在我的Windows机器上，我发现`lupdate`在`C:\qt\5.1.0\msvc2012_64\bin\lupdate.exe`。
- en: The `.ts` file is an XML file with tags to indicate the strings to translate
    their context in your application's source code, and so forth. Qt Linguist will
    save the translations to the QM file as well, but don't worry, `lupdate` is smart
    enough not to overwrite existing translations if you run it again after providing
    some translations.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`.ts`文件是一个带有标签的XML文件，用于指示需要翻译的字符串、它们在应用程序源代码中的上下文等。Qt Linguist也会将翻译保存到QM文件中，但不用担心，`lupdate`足够智能，如果您在提供一些翻译后再次运行它，它不会覆盖现有的翻译。'
- en: 'Qt Linguist is a GUI application; when you start it you''ll see a screen very
    similar to the next screenshot:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Linguist是一个GUI应用程序；当您启动它时，您将看到一个与下一个截图非常相似的屏幕：
- en: '![Localizing your application with Qt Linguist](img/2319OS_04_02.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![使用Qt Linguist本地化您的应用程序](img/2319OS_04_02.jpg)'
- en: The Qt Linguist application editing a QM file
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Linguist应用程序编辑一个QM文件
- en: To begin, you need to open a `.ts` file you generated by navigating to **File**
    | **Open**, and choosing a translation file. You'll be prompted for the destination
    language, and then you're given a list of the strings it found. You—or your translators—need
    only to walk through each string and enter the corresponding string in the translated
    language. As you do so, you can see the context of the string in the source code
    in the right-most pane; the line of source from which the string was captured
    is highlighted.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要打开一个通过导航到**文件** | **打开**生成的`.ts`文件，并选择一个翻译文件。然后会提示您选择目标语言，然后会显示它找到的字符串列表。您或者您的翻译人员只需要逐个查看每个字符串，并输入相应的翻译语言的字符串。在这样做的同时，您可以在最右侧的窗格中看到字符串在源代码中的上下文；捕获该字符串的源代码行会被突出显示。
- en: 'Qt Linguist lets you track which strings you''ve translated and which still
    need translation. The icon to the left of each of the strings can be:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Linguist可以让您跟踪您已经翻译和仍需要翻译的字符串。每个字符串左侧的图标可以是：
- en: A black question mark indicating that a string has yet to be translated
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个黑色的问号表示一个字符串尚未被翻译
- en: A yellow question mark indicating that the string doesn't pass all of Qt Linguist's
    validation tests, but you're ignoring the failures
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个黄色的问号表示该字符串未通过Qt Linguist的所有验证测试，但您忽略了这些失败
- en: An exclamation point indicating that the string you've provided doesn't pass
    Qt Linguist's validation tests
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 感叹号表示您提供的字符串未通过Qt Linguist的验证测试
- en: A yellow checkbox indicating that you've provided a translation, but Qt Creator
    may have found a problem with it
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 黄色复选框表示您已提供翻译，但Qt Creator可能发现了问题
- en: A green checkbox indicating that the string has been translated and is ready
    to go
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绿色复选框表示该字符串已被翻译并准备就绪
- en: Qt Linguist provides some simple validation tests, such as ensuring that strings
    with arguments such as `printf` have the same number of arguments in each translation.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Linguist提供了一些简单的验证测试，例如确保带有`printf`等参数的字符串在每个翻译中具有相同数量的参数。
- en: Qt Linguist also supports phrase books; you may be able to download a phrase
    book with common strings already localized to the language you're targeting.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Linguist还支持短语书；您可以下载一个已经本地化为您目标语言的常见字符串的短语书。
- en: 'At any point, you can generate a translation file for inclusion in your application
    by running `lrelease`. For example, to create one for my Esperanto strings, I''d
    use `lrelease` as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何时候，您都可以通过运行`lrelease`为您的应用程序生成一个翻译文件以供包含。例如，要为我的世界语字符串创建一个翻译文件，我将使用以下方式使用`lrelease`：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This takes the incoming `.ts` file, and generates a `.qm` file with the strings.
    The `.qm` files are highly compressed binary files used by Qt directly in the
    process of rendering your application.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这将获取传入的`.ts`文件，并生成一个带有字符串的`.qm`文件。`.qm`文件是高度压缩的二进制文件，由Qt直接在渲染应用程序的过程中使用。
- en: Including localized strings in your application
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在应用程序中包含本地化字符串
- en: 'In order to supply translated strings to the `tr` and `qsTr` functions in your
    application, your application needs to include a `QTranslator` object to read
    the `.ts` files and replace the strings provided to `tr` and `qsTr` with their
    translated counterparts. We do this in your main entry point function, as shown
    in the following block of code:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 为了向应用程序的`tr`和`qsTr`函数提供翻译的字符串，您的应用程序需要包含一个`QTranslator`对象来读取`.ts`文件，并用其翻译后的字符串替换`tr`和`qsTr`提供的字符串。我们在您的主入口点函数中执行此操作，如下面的代码块所示：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This code allocates a `QTranslator` object, and loads the indicated translation
    file into the translator before installing it into `QApplication`. In this example,
    we're hardcoding the language to localize to Esperanto.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码分配了一个`QTranslator`对象，并在将其安装到`QApplication`之前将指定的翻译文件加载到翻译器中。在这个例子中，我们将语言硬编码为世界语。
- en: 'Note that if you want to support the locale as picked by the system, we might
    choose to do it this way:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果您希望支持系统选择的区域设置，我们可能会选择以这种方式执行：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This determines the system locale, and attempts to load the localized string
    file for the system's current locale.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这确定系统区域设置，并尝试加载系统当前区域设置的本地化字符串文件。
- en: For this to work, the `.qm` files for the application need to be locatable by
    the application. They should be in the output directory; one way to do this during
    development is to turn off shadow builds in Qt Creator, under **Build Settings**
    in the **Projects** pane. As you build your application's installer—a platform-specific
    task outside the scope of this book—you need to include your `.qm` files with
    the application binary.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这个工作，应用程序的`.qm`文件需要被应用程序找到。它们应该在输出目录中；在开发过程中执行此操作的一种方法是在Qt Creator的**项目**窗格中的**构建设置**下关闭阴影构建。当您构建应用程序的安装程序时——这是本书范围之外的特定于平台的任务——您需要将您的`.qm`文件与应用程序二进制文件一起包含。
- en: Localizing special things – currencies and dates with QLocale
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本地化特殊内容——使用`QLocale`本地化货币和日期
- en: A common thing you may need to do is localize currencies and dates. Qt makes
    this easy, although the solution isn't obvious until you've thought about it a
    bit.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能需要做的一件常见事情是本地化货币和日期。Qt使这变得容易，尽管在您仔细考虑之前解决方案并不明显。
- en: 'First, you should know about the `arg` method of `QString`. It replaces an
    escaped number with the formatted version of its argument; if we write:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您应该了解`QString`的`arg`方法。它将转义的数字替换为其参数的格式化版本；如果我们写：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Then `s` contains the string `a b`. Second, you should know about the `toString`
    method of `QLocale`, which formats its argument in a locale-specific way.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然后`s`包含字符串`a b`。其次，您应该了解`QLocale`的`toString`方法，它以特定于区域设置的方式格式化其参数。
- en: 'So, we could write:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以写：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This uses `tr` to localize the currency symbol, and the `QLocale` class's static
    method `toString` to convert the value to a string with the locale-specific decimal
    separator (period in the U.S. and Canada, comma in Europe).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这使用`tr`来本地化货币符号，并使用`QLocale`类的静态方法`toString`将值转换为带有特定区域设置的十进制分隔符的字符串（在美国和加拿大为句点，在欧洲为逗号）。
- en: 'Date formatting is similar: the `toString` method of `QLocale` has overloads
    for the `QDateTime`, `QDate`, and `QTime` arguments, so you can simply write:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 日期格式化类似：`QLocale`的`toString`方法有适用于`QDateTime`、`QDate`和`QTime`参数的重载，因此您可以简单地写：
- en: '[PRE8]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This gets the current date and time and stores it in `whenDateTime`, and then
    makes a string out of it using the locale''s default formatting. The `toString`
    method can take a second argument that determines the output format. It can be
    one of the following:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这将获取当前日期和时间并将其存储在`whenDateTime`中，然后使用区域设置的默认格式将其转换为字符串。`toString`方法可以接受第二个参数，用于确定输出格式。它可以是以下之一：
- en: '`QLocale::LongFormat`, which uses the long version of month and day names'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QLocale::LongFormat`，它使用月份和日期名称的长版本'
- en: '`QLocale::ShortFormat`, which uses the short version of day and month names'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QLocale::ShortFormat`，它使用日期和月份名称的短版本'
- en: '`QLocale::NarrowFormat`, which provides the narrowest form of formatting for
    the date and time'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QLocale::NarrowFormat`，它为日期和时间提供最窄的格式'
- en: Summary
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Localizing applications with Qt is easy using Qt Linguist and the localization
    framework in Qt. To use the framework, though, you must mark your strings to localize
    with `tr` or `qsTr` in your source code wherever they appear. Once you do so,
    you can create a source file of strings to translate with Qt Linguist using Qt's
    `lupdate` command, and then provide translations for each string. Once you've
    provided the translations, you compile them using `lrelease`, and then include
    them in your application by installing a `QTranslator` object in your application's
    `main` function and loading the translation table generated by `lrelease`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Qt本地化应用程序很容易，可以使用Qt Linguist和Qt中的本地化框架。但是，要使用该框架，您必须在源代码中使用`tr`或`qsTr`标记要本地化的字符串。一旦这样做，您就可以使用Qt的`lupdate`命令创建要翻译的字符串的源文件，并为每个字符串提供翻译。提供了翻译后，您可以使用`lrelease`编译它们，然后通过在应用程序的`main`函数中安装`QTranslator`对象并加载`lrelease`生成的翻译表来将它们包含在应用程序中。
- en: In the next chapter, we will look at another important aspect of software development
    Qt Creator supports, which is performance analysis with the QML Profiler and Valgrind.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到Qt Creator支持的软件开发的另一个重要方面，即使用QML Profiler和Valgrind进行性能分析。
