- en: Chapter 13. Tips and Tricks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第13章。技巧和窍门
- en: 'In this chapter, the following recipes will be covered:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，将涵盖以下步骤：
- en: Effectively commenting your code
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有效地注释你的代码
- en: Using bit fields in a struct
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在结构中使用位字段
- en: Writing a sound technical design document
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写健全的技术设计文档
- en: Using the const keyword to optimize your code
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用const关键字优化你的代码
- en: Using bit shift operators in an enum
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在枚举中使用位移运算符
- en: Using the new lambda feature in C++11
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在C++11中使用新的lambda特性
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: C++ is a vast ocean. There are many concepts and techniques that are required
    to master C++. On top of that, there are also a few little tricks that a programmer
    can learn from time to time to help develop better software. In this chapter,
    we will look at some of the techniques that a programmer can learn to write better
    code.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: C++是一个广阔的海洋。掌握C++需要许多概念和技巧。此外，程序员还可以不时学习一些小技巧，以帮助开发更好的软件。在本章中，我们将看一些程序员可以学习的技术。
- en: Effectively commenting your code
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有效地注释你的代码
- en: Very often, a programmer is so engrossed in solving a problem that they forget
    to comment their code. Although this may not be a problem when they are working
    on it, if there are other team members involved who have to utilize that same
    section of code, it may become very difficult to fathom. Therefore, it is essential
    to comment code from an early stage of development.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员往往在解决问题时如此专注，以至于忘记注释他们的代码。虽然当他们在工作时这可能不是问题，但如果有其他团队成员参与，他们必须使用相同的代码部分，那么理解起来可能会变得非常困难。因此，从开发的早期阶段就注释代码是至关重要的。
- en: Getting ready
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To work through this recipe, you will need a machine running Windows and Visual
    Studio. No other prerequisites are required.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个步骤，你需要一台运行Windows和Visual Studio的机器。不需要其他先决条件。
- en: How to do it…
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In this recipe, we will see how easy it is to comment code. Let''s add a source
    file called `Source.cpp`. Add the following code to the file:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个步骤中，我们将看到注释代码是多么容易。让我们添加一个名为`Source.cpp`的源文件。将以下代码添加到文件中：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How it works…
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Comments are supposed to be written on any section, to help fellow developers
    understand what is going on. To comment a code, we use the `//` double backslash
    symbols. Whatever we write within that will not be compiled and will be ignored
    by the compiler. As a result, we can use it to make notes on different aspects
    in the code. We can also use the `/*` and `*/` symbol to comment multiple lines.
    Anything that is within a pair of `/*` and `*/` symbols will be ignored by the
    compiler. This technique becomes useful if we need to debug an application. We
    first comment out a large section of the code that we think is the culprit. The
    code should now build. Then we start uncommenting the code till we reach a point
    where the code breaks again.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 注释应该写在任何部分，以帮助其他开发人员理解发生了什么。要注释代码，我们使用`//`双斜杠符号。我们在其中写的任何内容都不会被编译器编译，也会被忽略。因此，我们可以用它来备注代码中的不同方面。我们还可以使用`/*`和`*/`符号来注释多行。在`/*`和`*/`符号之间的任何内容都将被编译器忽略。如果我们需要调试应用程序，这种技术就会变得有用。我们首先注释掉我们认为是罪魁祸首的大部分代码。现在代码应该可以构建。然后我们开始取消注释代码，直到我们再次达到代码中断的地方。
- en: Sometimes programmers tend to over-comment. For example, there is no need to
    write `//Addition` on top of an addition function, as we can clearly see that
    two numbers are being added. Similarly, we should not under-comment. As there
    are no comments on top of the `Logic` function, we have no clue as to why we are
    using that function and what that function does. So we must remember to comment
    just enough. This will only happen with practice and by working in a team environment.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 有时程序员倾向于过度注释。例如，在加法函数的顶部写`//Addition`是没有必要的，因为我们可以清楚地看到正在添加两个数字。同样，我们也不应该少加注释。因为在`Logic`函数的顶部没有注释，我们不知道为什么要使用该函数以及该函数的作用。因此，我们必须记住适度添加注释。这只有通过实践和在团队环境中工作才能实现。
- en: Using bit fields in a struct
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在结构中使用位字段
- en: In structures, we can use bit fields to denote what size we want the structure
    to be. As well as this, it is also important to understand what size a struct
    actually takes.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在结构中，我们可以使用位字段来表示我们希望结构的大小是多少。除此之外，了解结构实际占用的大小也很重要。
- en: Getting ready
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You need a Windows machine and a working copy of Visual Studio. No other prerequisites
    are required.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要一台运行Windows的机器和一个可用的Visual Studio副本。不需要其他先决条件。
- en: How to do it…
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In this recipe, we will find out how easy it is to use bit fields to find the
    size of a struct. Add a source file called `Source.cpp`. Then add the following
    code to it:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个步骤中，我们将发现使用位字段来找到结构的大小是多么容易。添加一个名为`Source.cpp`的源文件。然后将以下代码添加到其中：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works…
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'As you can see, in the example we have assigned a struct of int, a char array,
    an undefined unsigned variable, and a float. When we execute the program, the
    output should be the size of both the structures in bytes. Assuming we are running
    this program on a 64-bit machine, int is 4 bytes, unsigned char array is 9 bytes,
    unsigned by default is 4 bytes, and float is 4 bytes. If we add them up, the total
    is 21 bytes. But if we print it out, we will notice that the output is 24 bytes.
    The reason for this is called *padding*. C++ always fetches data in chunks of
    4 bytes. Hence it will always pad with extra bytes till the size is a multiple
    of 4\. Because the size of the struct came out at 21, the nearest multiple of
    4 is 24, so we get that answer. Padding is not done to the structure as a whole,
    but per declaration, for example:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，在这个例子中，我们分配了一个int的结构体，一个char数组，一个未定义的无符号变量和一个浮点数。当我们执行程序时，输出应该是两个结构体的字节数。假设我们在64位机器上运行这个程序，int是4字节，无符号char数组是9字节，默认情况下无符号是4字节，浮点数是4字节。如果我们把它们加起来，总共是21字节。但如果我们打印出来，我们会注意到输出是24字节。这是由于*填充*。C++总是以4字节的块获取数据。因此，它会一直填充额外的字节，直到大小是4的倍数。因为结构的大小是21，最接近的4的倍数是24，所以我们得到了那个答案。填充不是针对整个结构的，而是针对每个声明，例如：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Looking at the second struct, what we have done is assigned a bit field. Although
    an int is 4 bytes, we can instruct it to just have 2 bytes. The syntax for doing
    it is adding a `:` symbol followed by the byte value. So for the second struct,
    if we find the value, it is going to output it as `4` instead of `8`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 看看第二个结构，我们所做的是分配了一个位字段。尽管int是4个字节，我们可以指示它只有2个字节。做法是在字节值后面加上一个`:`符号。因此，对于第二个结构，如果我们找到该值，它将输出为`4`而不是`8`。
- en: Writing a sound technical design document
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写完善的技术设计文档
- en: When we start a project, there are two documents that we generally rely on.
    The first document is a game design document, and the second is a technical design
    document. The technical design document should list the key features and high-level
    architecture of the key features. This system is changing rapidly though, with
    the advent of indie games. However, in a large-scale gaming studio, this process
    is still valid.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们启动一个项目时，通常会依赖两个文档。第一个文档是游戏设计文档，第二个是技术设计文档。技术设计文档应列出关键特性和关键特性的高级架构。然而，随着独立游戏的出现，这个系统正在迅速改变。但是，在大型游戏工作室中，这个流程仍然有效。
- en: Getting ready
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You need to have a working Windows machine.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要一个可用的Windows机器。
- en: How to do it…
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'In this recipe, we will see how easy it is to create a technical design document:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将看到创建技术设计文档有多么容易：
- en: Open an editor of your choice, preferably Microsoft Word.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您选择的编辑器，最好是Microsoft Word。
- en: List the key technical components of the game.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出游戏的关键技术组件。
- en: Create a data flow diagram to represent the flow of data between various components
    of the engine.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建数据流图来表示引擎各个组件之间的数据流。
- en: Create a flowchart to explain the logic of a certain complex section.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建流程图以解释某个复杂部分的逻辑。
- en: Write pseudocode for the sections that are key to the development of the game.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为游戏开发关键部分编写伪代码。
- en: How it works…
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Once the key components are listed, the project manager can automatically assess
    the risk and complexity of each task. The developer will also understand what
    the key components of the engine or game are. This will help the developer plan
    their actions as well. When the data flow diagram is made, it will be easy to
    understand which component is dependent on which other component. As a result,
    the developer will know they have to implement *A* before they start coding *B*.
    A flow chart is also a great way to understand the flow of logic and sometimes
    helps to solve ambiguity that could occur in the future. Finally, pseudocode is
    essential for explaining to the developer how they must implement the code, or
    rather what is an advisable approach. As pseudocode is language independent, the
    same pseudocode could be used to write a game even in other languages apart from
    C++.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦列出了关键组件，项目经理就可以自动评估每个任务的风险和复杂性。开发人员也将了解引擎或游戏的关键组件是什么。这也将帮助开发人员计划他们的行动。制作数据流图后，将很容易理解哪个组件依赖于哪个其他组件。因此，开发人员将知道他们必须在开始编码*B*之前实现*A*。流程图也是了解逻辑流程的好方法，有时有助于解决未来可能出现的歧义。最后，伪代码对于向开发人员解释他们必须如何实现代码或者说什么是一个可取的方法是至关重要的。由于伪代码与语言无关，因此即使在C++之外的其他语言中编写游戏，也可以使用相同的伪代码。
- en: Using the const keyword to optimize your code
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用const关键字优化您的代码
- en: We have already seen in previous recipes that a `const` keyword is used to make
    data or a pointer constant so that we cannot change the value or address, respectively.
    There is one more advantage of using the `const` keyword. This is particularly
    useful in the object-oriented paradigm.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在之前的示例中看到`const`关键字用于使数据或指针常量，以便我们无法更改值或地址。使用`const`关键字还有一个优点。这在面向对象的范式中特别有用。
- en: Getting ready
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, you will need a Windows machine and an installed version of
    Visual Studio.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，您将需要一个Windows机器和安装了Visual Studio的版本。
- en: How to do it…
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'In this recipe, we will find out how easy it is to use the `const` keyword
    effectively:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将发现如何有效地使用`const`关键字有多么容易：
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works…
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'In this example, we are writing a simple application to add two numbers. The
    first function is a public function. This mean that it is exposed to other classes.
    Whenever we write public functions, we must ensure that they are not harming any
    private data of that class. As an example, if the public function was to return
    the values of the member variables or change the values, then this public function
    is very risky. Therefore, we must ensure that the function cannot modify any member
    variables by adding the `const` keyword at the end of the function. This ensures
    that the function is not allowed to change any member variables. If we try to
    assign a different value to the member, we will get a compiler error:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们正在编写一个简单的应用程序来添加两个数字。第一个函数是一个公共函数。这意味着它对其他类是可见的。每当我们编写公共函数时，我们必须确保它们不会损害该类的任何私有数据。例如，如果公共函数要返回成员变量的值或更改值，那么这个公共函数就非常危险。因此，我们必须确保该函数不能通过在函数末尾添加`const`关键字来修改任何成员变量。这确保了该函数不允许更改任何成员变量。如果我们尝试为成员变量分配不同的值，我们将收到编译器错误：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: So this makes the code more secure. However, there is another problem. This
    public function internally calls another private function. What if this private
    function modifies the values of the member variables? Again, we will be at the
    same risk. As a result, C++ does not allow us to call that function unless it
    has the same signature of const at the end of the function. This is to ensure
    that the function cannot change the values of the member variables.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这使得代码更加安全。然而，还有另一个问题。这个公共函数内部调用另一个私有函数。如果这个私有函数修改了成员变量的值会怎么样？同样，我们将面临相同的风险。因此，C++不允许我们调用该函数，除非它在函数末尾具有相同的const签名。这是为了确保该函数不能更改成员变量的值。
- en: Using bit shift operators in an enum
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在枚举中使用位移操作符
- en: As we have seen before in previous recipes, an enum is used to represent a collection
    of states. All the states are given an integer value by default, starting at `0`.
    However, we could specify a different integer value as well. More interestingly,
    we could use bit shift operators to club some of the states, easily set them to
    be active or inactive, and do other tricks with them.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前在之前的示例中看到的，枚举用于表示一组状态。所有状态默认情况下都被赋予一个整数值，从`0`开始。但是，我们也可以指定不同的整数值。更有趣的是，我们可以使用位移操作符来组合一些状态，轻松地将它们设置为活动或非活动状态，并对它们进行其他操作。
- en: Getting ready
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To work through this recipe, you will need a machine running Windows with an
    installed Visual Studio.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个示例，您需要一台安装了Visual Studio的Windows机器。
- en: How to do it…
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'In this recipe, we will see how easy it is to write bit shift operators in
    an enum:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将看到在枚举中编写位移操作符是多么容易：
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works…
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In the above example, we have three flag states in the enum. They are represented
    by the bit shift operator. So in memory, the first state is represented as `0000`,
    the second as `0001`, and the third as `0010`. We can now combine the states by
    using the `OR` operator (`|`). We can have a state called `JUMP` and another state
    called `SHOOT`. If we want the character to now `JUMP` and `SHOOT` together, we
    can combine these states. We can use the `&` operator to check whether a state
    is active or not. Similarly, if we have to remove a state from a combination,
    we can use the `XOR` operator (`^`). We can disable a state by using the `~` operator.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，枚举中有三个标志状态。它们由位移操作符表示。因此，在内存中，第一个状态表示为`0000`，第二个状态表示为`0001`，第三个状态表示为`0010`。现在我们可以使用`OR`运算符（`|`）组合这些状态。我们可以有一个名为`JUMP`的状态和另一个名为`SHOOT`的状态。如果我们现在希望角色同时`JUMP`和`SHOOT`，我们可以组合这些状态。我们可以使用`&`运算符来检查状态是否处于活动状态。类似地，如果我们需要从组合中移除一个状态，我们可以使用`XOR`运算符（`^`）。我们可以使用`~`运算符来禁用一个状态。
- en: Using the new lambda function of C++ 11
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用C++ 11的新lambda函数
- en: Lambda functions are the new addition to the C++ family. They can be described
    as anonymous functions.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda函数是C++家族的新成员。它们可以被描述为匿名函数。
- en: Getting ready
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To work through this recipe, you will need a machine running Windows and Visual
    Studio.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个示例，您需要一台运行Windows和Visual Studio的机器。
- en: How to do it…
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'To understand a lambda function let''s have a look at the following code:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解lambda函数，让我们看一下下面的代码：
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works…
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'Lambda functions are a new addition to the C++11 family. They are anonymous
    functions and can be very handy. They are generally passed as arguments to a function.
    The syntax of a lambda function is as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda函数是C++11家族的新成员。它们是匿名函数，非常方便。它们通常作为参数传递给函数。lambda函数的语法如下：
- en: '`[ capture-list ] ( params ) mutable(optional) exception attribute -> ret {
    body }`'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[捕获列表]（参数）mutable（可选）异常属性-> ret {主体}`'
- en: 'The `mutable` keyword is optional and is used to modify the parameters and
    call their non-const functions. The attribute provides the specification of the
    closure type. The capture list is optional and has a list of allowed types:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`mutable`关键字是可选的，用于修改参数并调用它们的非const函数。属性提供了闭包类型的规范。捕获列表是可选的，并且有一个允许的类型列表：'
- en: '`[a,&b]`: Here `a` is captured by value and `b` is captured by reference'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[a，＆b]`：这里`a`按值捕获，`b`按引用捕获'
- en: '`[this]`: This captures the `this` pointer by value'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[this]`：这通过值捕获`this`指针'
- en: '`[&]`: This captures all automatic variables used in the body of the lambda
    by reference'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[＆]`：这通过引用捕获lambda主体中使用的所有自动变量'
- en: '`[=]`: This captures all automatic variables used in the body of the lambda
    by value'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[=]`：这通过值捕获lambda主体中使用的所有自动变量'
- en: '`[]`: This captures nothing'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[]`：这不捕获任何东西'
- en: Params are lists of parameters, as in named functions, except that default arguments
    are not allowed (up to C++14). If auto is used as a type of a parameter, the lambda
    is a generic lambda (since C++14). `ret` is the return type of the function. If
    no type is provided, then `ret` tries to auto-inject a return type or void if
    it is not returning anything. Finally, we have the body of the function, which
    is used to write the logic of the function.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Params是参数列表，就像命名函数一样，只是不允许默认参数（直到C++14）。如果auto被用作参数的类型，lambda就是一个通用lambda（自C++14以来）。`ret`是函数的返回类型。如果没有提供类型，那么`ret`会尝试自动注入返回类型，如果没有返回任何东西，则为void。最后，我们有函数的主体，用于编写函数的逻辑。
- en: In this example, we store a vector list of numbers. After that, we traverse
    the list and use a lambda function. The lambda function stores all the numbers
    that are greater than 10 and displays the number. Lambda functions can be difficult
    to start off with but, with practice, they are very easy to grasp.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们存储了一个数字列表的向量。之后，我们遍历列表并使用lambda函数。lambda函数存储所有大于10的数字并显示数字。lambda函数可能很难开始，但是练习后，它们很容易掌握。
