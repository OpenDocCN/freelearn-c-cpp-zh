["```cpp\nvoid test() {\n    printf(\"button test\\n\");\n}\n\nvoid int_test( int num ) {\n    printf(\"int test=%d\\n\", num);\n}\n\nvoid float_test( float num ) {\n    printf(\"float test=%f\\n\", num);\n}\n\nvoid string_test( char* str ) {\n    printf(\"string test=%s\\n\", str);\n}\n```", "```cpp\nEM_ASM( InitWrappers() );\nprintf(\"Initialization Complete\\n\");\n```", "```cpp\nint main() {\n    printf(\"main has run\\n\");\n}\n```", "```cpp\nvoid press_up() {\n    printf(\"PRESS UP\\n\");\n}\n\nvoid press_down() {\n    printf(\"PRESS DOWN\\n\");\n}\n\nvoid press_left() {\n    printf(\"PRESS LEFT\\n\");\n}\n\nvoid press_right() {\n    printf(\"PRESS RIGHT\\n\");\n}\n```", "```cpp\nvoid release_up() {\n    printf(\"RELEASE UP\\n\");\n}\n\nvoid release_down() {\n    printf(\"RELEASE DOWN\\n\");\n}\n\nvoid release_left() {\n    printf(\"RELEASE LEFT\\n\");\n}\n\nvoid release_right() {\n    printf(\"RELEASE RIGHT\\n\");\n}\n```", "```cpp\n<div class=\"input_box\">&nbsp;</div>\n<div class=\"input_box\">\n    <button id=\"click_me\" class=\"em_button\">Click Me!</button>\n</div>\n\n<div class=\"input_box\">\n    <input type=\"number\" id=\"int_num\" max=\"9999\" min=\"0\" step=\"1\" \n     value=\"1\" class=\"em_input\">\n    <button id=\"int_button\" class=\"em_button\">Int Click!</button>\n</div>\n\n<div class=\"input_box\">\n    <input type=\"number\" id=\"float_num\" max=\"99\" min=\"0\" step=\"0.01\" \n     value=\"0.0\" class=\"em_input\">\n    <button id=\"float_button\" class=\"em_button\">Float Click!</button>\n</div>\n\n<div class=\"input_box\">&nbsp;</div>\n```", "```cpp\n<div id=\"string_box\">\n    <button id=\"string_button\" class=\"em_button\">String Click!</button>\n    <input id=\"string_input\">\n</div>\n```", "```cpp\nvar left_key_press = false;\nvar right_key_press = false;\nvar up_key_press = false;\nvar down_key_press = false;\n```", "```cpp\nvar left_press_wrapper = null;\nvar left_release_wrapper = null;\n\nvar right_press_wrapper = null;\nvar right_release_wrapper = null;\n\nvar up_press_wrapper = null;\nvar up_release_wrapper = null;\n\nvar down_press_wrapper = null;\nvar down_release_wrapper = null;\n```", "```cpp\nfunction keyPress() {\n    event.preventDefault();\n    if( event.repeat === true ) {\n        return;\n    }\n\n    // PRESS UP ARROW\n    if (event.keyCode === 38) {\n        up_key_press = true;\n        if( up_press_wrapper != null ) up_press_wrapper();\n    }\n\n    // PRESS LEFT ARROW\n    if (event.keyCode === 37) {\n        left_key_press = true;\n        if( left_press_wrapper != null ) left_press_wrapper();\n    }\n\n    // PRESS RIGHT ARROW\n    if (event.keyCode === 39) {\n        right_key_press = true;\n        if( right_press_wrapper != null ) right_press_wrapper();\n    }\n\n    // PRESS DOWN ARROW\n    if (event.keyCode === 40) {\n        down_key_press = true;\n        if( down_press_wrapper != null ) down_press_wrapper();\n    }\n}\n```", "```cpp\nif( event.repeat === true ) {\n    return;\n}\n```", "```cpp\n// PRESS UP ARROW\nif (event.keyCode === 38) {\n    up_key_press = true;\n    if( up_press_wrapper != null ) up_press_wrapper();\n}\n```", "```cpp\n    // PRESS LEFT ARROW\n    if (event.keyCode === 37) {\n        left_key_press = true;\n        if( left_press_wrapper != null ) left_press_wrapper();\n    }\n\n    // PRESS RIGHT ARROW\n    if (event.keyCode === 39) {\n        right_key_press = true;\n        if( right_press_wrapper != null ) right_press_wrapper();\n    }\n\n    // PRESS DOWN ARROW\n    if (event.keyCode === 40) {\n        down_key_press = true;\n        if( down_press_wrapper != null ) down_press_wrapper();\n    }\n}\n```", "```cpp\nfunction keyRelease() {\n    event.preventDefault();\n\n    // PRESS UP ARROW\n    if (event.keyCode === 38) {\n        up_key_press = false;\n        if( up_release_wrapper != null ) up_release_wrapper();\n    }\n\n    // PRESS LEFT ARROW\n    if (event.keyCode === 37) {\n        left_key_press = false;\n        if( left_release_wrapper != null ) left_release_wrapper();\n    }\n\n    // PRESS RIGHT ARROW\n    if (event.keyCode === 39) {\n        right_key_press = false;\n        if( right_release_wrapper != null ) right_release_wrapper();\n    }\n\n    // PRESS DOWN ARROW\n    if (event.keyCode === 40) {\n        down_key_press = false;\n        if( down_release_wrapper != null ) down_release_wrapper();\n    }\n}\n```", "```cpp\ndocument.addEventListener('keydown', keyPress);\ndocument.addEventListener('keyup', keyRelease);\n```", "```cpp\nfunction InitWrappers() {\n    left_press_wrapper = Module.cwrap('press_left', 'undefined');\n    right_press_wrapper = Module.cwrap('press_right', 'undefined');\n    up_press_wrapper = Module.cwrap('press_up', 'undefined');\n    down_press_wrapper = Module.cwrap('press_down', 'undefined');\n\n    left_release_wrapper = Module.cwrap('release_left', 'undefined');\n    right_release_wrapper = Module.cwrap('release_right', 'undefined');\n    up_release_wrapper = Module.cwrap('release_up', 'undefined');\n    down_release_wrapper = Module.cwrap('release_down', 'undefined');\n}\n```", "```cpp\nfunction runbefore() {\n    console.log(\"before module load\");\n}\n\nfunction runafter() {\n    console.log(\"after module load\");\n}\n```", "```cpp\npreRun: [],\npostRun: [InitWrappers],\n```", "```cpp\nemcc jskey.c -o jskey.html  -s NO_EXIT_RUNTIME=1 --shell-file jskey_shell.html -s EXPORTED_FUNCTIONS=\"['_main', '_press_up', '_press_down', '_press_left', '_press_right', '_release_up', '_release_down', '_release_left', '_release_right']\" -s EXTRA_EXPORTED_RUNTIME_METHODS=\"['cwrap', 'ccall']\"\n```", "```cpp\n#include <SDL2/SDL.h>\n#include <emscripten.h>\n#include <stdio.h>\n#include <stdbool.h>\n```", "```cpp\nSDL_Window *window;\nSDL_Renderer *renderer;\nSDL_Event event;\n```", "```cpp\nbool left_key_press = false;\nbool right_key_press = false;\nbool up_key_press = false;\nbool down_key_press = false;\n```", "```cpp\nvoid key_press();\nvoid key_release();\n```", "```cpp\nvoid input_loop() {\n    if( SDL_PollEvent( &event ) ){\n        if( event.type == SDL_KEYDOWN ){\n            key_press();\n        }\n        else if( event.type == SDL_KEYUP ) {\n            key_release();\n        }\n    }\n}\n```", "```cpp\nvoid key_press() {\n    switch( event.key.keysym.sym ){\n        case SDLK_LEFT:\n            if( !left_key_press ) {\n                printf(\"left arrow key press\\n\");\n            }\n            left_key_press = true;\n            break;\n\n        case SDLK_RIGHT:\n            if( !right_key_press ) {\n                printf(\"right arrow key press\\n\");\n            }\n            right_key_press = true;\n            break;\n\n        case SDLK_UP:\n            if( !up_key_press ) {\n                printf(\"up arrow key press\\n\");\n            }\n            up_key_press = true;\n            break;\n\n        case SDLK_DOWN:\n            if( !down_key_press ) {\n                printf(\"down arrow key press\\n\");\n            }\n            down_key_press = true;\n            break;\n\n        default:\n            printf(\"unknown key press\\n\");\n            break;\n    }\n}\n```", "```cpp\ncase SDLK_LEFT:\n    if( !left_key_press ) {\n        printf(\"left arrow key press\\n\");\n    }\n    left_key_press = true;\n    break;\n```", "```cpp\nvoid key_release() {\n    switch( event.key.keysym.sym ){\n\n        case SDLK_LEFT:\n            if( left_key_press ) {\n                printf(\"left arrow key release\\n\");\n            }\n            left_key_press = false;\n            break;\n\n        case SDLK_RIGHT:\n            if( right_key_press ) {\n                printf(\"right arrow key release\\n\");\n            }\n            right_key_press = false;\n            break;\n\n        case SDLK_UP:\n            if( up_key_press ) {\n                printf(\"up arrow key release\\n\");\n            }\n            up_key_press = false;\n            break;\n\n        case SDLK_DOWN:\n            if( down_key_press ) {\n                printf(\"down arrow key release\\n\");\n            }\n            down_key_press = false;\n            break;\n\n        default:\n            printf(\"unknown key release\\n\");\n            break;\n    }\n}\n```", "```cpp\nint main() {\n    SDL_Init( SDL_INIT_VIDEO );\n\n    SDL_CreateWindowAndRenderer( 320, 200, 0, &window, &renderer );\n    SDL_SetRenderDrawColor( renderer, 0, 0, 0, 255 );\n\n    SDL_RenderClear( renderer );\n    SDL_RenderPresent( renderer );\n\n    emscripten_set_main_loop(input_loop, 0, 0);\n    return 1;\n}\n```", "```cpp\nemcc keyboard.c -o keyboard.html -s USE_SDL=2\n```", "```cpp\n#include <SDL2/SDL.h>\n#include <SDL2/SDL_image.h>\n#include <emscripten.h>\n#include <stdio.h>\n#include <stdbool.h>\n```", "```cpp\n#define SPRITE_FILE \"sprites/Franchise1.png\"\n#define ANIM_FILE \"sprites/Franchise%d.png\"\n#define FRAME_COUNT 4\n```", "```cpp\nint current_frame = 0;\n\nUint32 last_time;\nUint32 current_time;\nUint32 ms_per_frame = 100; // animate at 10 fps\n\nSDL_Window *window;\nSDL_Renderer *renderer;\nSDL_Rect dest = {.x = 160, .y = 100, .w = 0, .h = 0 };\n\nSDL_Texture *sprite_texture;\nSDL_Texture *temp_texture;\nSDL_Texture* anim[FRAME_COUNT];\n```", "```cpp\nSDL_Event event;\n\nbool left_key_press = false;\nbool right_key_press = false;\nbool up_key_press = false;\nbool down_key_press = false;\n```", "```cpp\nvoid key_press();\nvoid key_release();\n```", "```cpp\nvoid input_loop() {\n    if( SDL_PollEvent( &event ) ){\n        if( event.type == SDL_KEYDOWN ){\n            key_press();\n        }\n        else if( event.type == SDL_KEYUP ) {\n            key_release();\n        }\n    }\n}\n```", "```cpp\nvoid key_press() {\n    switch( event.key.keysym.sym ){\n\n        case SDLK_LEFT:\n            if( !left_key_press ) {\n                printf(\"left arrow key press\\n\");\n            }\n            left_key_press = true;\n            break;\n\n        case SDLK_RIGHT:\n            if( !right_key_press ) {\n                printf(\"right arrow key press\\n\");\n            }\n            right_key_press = true;\n            break;\n\n        case SDLK_UP:\n            if( !up_key_press ) {\n                printf(\"up arrow key press\\n\");\n            }\n            up_key_press = true;\n            break;\n\n        case SDLK_DOWN:\n            if( !down_key_press ) {\n                printf(\"down arrow key press\\n\");\n            }\n            down_key_press = true;\n            break;\n\n        default:\n            printf(\"unknown key press\\n\");\n            break;\n    }\n}\n\nvoid key_release() {\n    switch( event.key.keysym.sym ){\n\n        case SDLK_LEFT:\n            if( left_key_press ) {\n                printf(\"left arrow key release\\n\");\n            }\n            left_key_press = false;\n            break;\n\n        case SDLK_RIGHT:\n            if( right_key_press ) {\n                printf(\"right arrow key release\\n\");\n            }\n            right_key_press = false;\n            break;\n\n        case SDLK_UP:\n            if( up_key_press ) {\n                printf(\"up arrow key release\\n\");\n            }\n            up_key_press = false;\n            break;\n\n        case SDLK_DOWN:\n            if( down_key_press ) {\n                printf(\"down arrow key release\\n\");\n            }\n            down_key_press = false;\n            break;\n\n        default:\n            printf(\"unknown key release\\n\");\n            break;\n    }\n}\n```", "```cpp\nvoid show_animation() {\n    input_loop();\n\n    current_time = SDL_GetTicks();\n    int ms = current_time - last_time;\n\n    if( ms >= ms_per_frame) {\n        ++current_frame;\n        last_time = current_time;\n    }\n\n    if( current_frame >= FRAME_COUNT ) {\n        current_frame = 0;\n    }\n\n    SDL_RenderClear( renderer );\n    temp_texture = anim[current_frame];\n\n    if( up_key_press ) {\n        dest.y--;\n\n        if( dest.y < -16 ) {\n            dest.y = 200;\n        }\n    }\n\n    if( down_key_press ) {\n        dest.y++;\n\n        if( dest.y > 200 ) {\n            dest.y = -16;\n        }\n    }\n\n    if( left_key_press ) {\n        dest.x--;\n\n        if( dest.x < -16 ) {\n            dest.x = 320;\n        }\n    }\n\n    if( right_key_press ) {\n        dest.x++;\n\n        if( dest.x > 320 ) {\n            dest.x = -16;\n        }\n    }\n\n    SDL_RenderCopy( renderer, temp_texture, NULL, &dest );\n    SDL_RenderPresent( renderer );\n}\n```", "```cpp\ncurrent_time = SDL_GetTicks();\nint ms = current_time - last_time;\n\nif( ms >= ms_per_frame) {\n    ++current_frame;\n    last_time = current_time;\n}\n\nif( current_frame >= FRAME_COUNT ) {\n    current_frame = 0;\n}\n\nSDL_RenderClear( renderer );\ntemp_texture = anim[current_frame];\n```", "```cpp\ndest.y--;\n\nif( dest.y < -16 ) {\n    dest.y = 200;\n}\n```", "```cpp\nif( up_key_press ) {\n    dest.y--;\n\n    if( dest.y < -16 ) {\n        dest.y = 200;\n    }\n}\n```", "```cpp\nif( down_key_press ) {\n    dest.y++;\n\n    if( dest.y > 200 ) {\n        dest.y = -16;\n    }\n}\n\nif( left_key_press ) {\n    dest.x--;\n\n    if( dest.x < -16 ) {\n        dest.x = 320;\n    }\n}\n\nif( right_key_press ) {\n    dest.x++;\n\n    if( dest.x > 320 ) {\n        dest.x = -16;\n    }\n}\n```", "```cpp\nSDL_RenderCopy( renderer, temp_texture, NULL, &dest );\nSDL_RenderPresent( renderer );\n```", "```cpp\nint main() {\n    char explosion_file_string[40];\n\n    SDL_Init( SDL_INIT_VIDEO );\n    SDL_CreateWindowAndRenderer( 320, 200, 0, &window, &renderer );\n    SDL_SetRenderDrawColor( renderer, 0, 0, 0, 255 );\n    SDL_RenderClear( renderer );\n\n    SDL_Surface *temp_surface = IMG_Load( SPRITE_FILE );\n\n    if( !temp_surface ) {\n        printf(\"failed to load image: %s\\n\", IMG_GetError() );\n        return 0;\n    }\n\n    sprite_texture = SDL_CreateTextureFromSurface( renderer, temp_surface );\n\n    SDL_FreeSurface( temp_surface );\n\n    for( int i = 1; i <= FRAME_COUNT; i++ ) {\n        sprintf( explosion_file_string, ANIM_FILE, i );\n        SDL_Surface *temp_surface = IMG_Load( explosion_file_string );\n\n        if( !temp_surface ) {\n            printf(\"failed to load image: %s\\n\", IMG_GetError() );\n            return 0;\n        }\n\n        temp_texture = SDL_CreateTextureFromSurface( renderer, temp_surface );\n        anim[i-1] = temp_texture;\n        SDL_FreeSurface( temp_surface );\n    }\n\n    SDL_QueryTexture( sprite_texture,\n                        NULL, NULL,\n                        &dest.w, &dest.h ); // query the width and height\n\n    dest.x -= dest.w / 2;\n    dest.y -= dest.h / 2;\n\n    SDL_RenderCopy( renderer, sprite_texture, NULL, &dest );\n    SDL_RenderPresent( renderer );\n\n    last_time = SDL_GetTicks();\n    emscripten_set_main_loop(show_animation, 0, 0);\n    return 1;\n}\n```", "```cpp\nemcc keyboard_move.c -o keyboard_move.html --preload-file sprites -s USE_SDL=2 -s USE_SDL_IMAGE=2 -s SDL2_IMAGE_FORMATS=[\"png\"]\n```"]