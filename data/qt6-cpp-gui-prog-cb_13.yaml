- en: '13'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '13'
- en: Developing Web Applications Using Qt WebEngine
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Qt WebEngine 开发 Web 应用程序
- en: Qt includes a module called **Qt WebEngine** that allows us to embed a web browser
    widget into our program and use it to display web pages or local HTML content.
    Prior to version 5.6, Qt used another similar module called **Qt WebKit**, which
    is now deprecated and has since been replaced by the Chromium-based **WebEngine**
    module. Qt also allows communication between JavaScript and C++ code through **Qt
    WebChannel**, which enables us to make use of this module in a much more effective
    fashion.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Qt 包含一个名为 **Qt WebEngine** 的模块，它允许我们将网页浏览器小部件嵌入到我们的程序中，并使用它来显示网页或本地 HTML 内容。在版本
    5.6 之前，Qt 使用另一个类似的模块，名为 **Qt WebKit**，该模块现已弃用，并已被基于 Chromium 的 **WebEngine** 模块所取代。Qt
    还允许通过 **Qt WebChannel** 在 JavaScript 和 C++ 代码之间进行通信，这使得我们能够更有效地使用此模块。
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下食谱：
- en: Introducing **Qt WebEngine**
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍 **Qt WebEngine**
- en: Using `webview` and web settings
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `webview` 和网页设置
- en: Embedding Google maps in your project
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的项目中嵌入 Google 地图
- en: Calling C++ functions from JavaScript
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 JavaScript 调用 C++ 函数
- en: Calling JavaScript functions from C++
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 C++ 调用 JavaScript 函数
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The technical requirements for this chapter include Qt 6.6.1 MSVC 2019 64 bit,
    Qt Creator 12.0.2, and Microsoft Visual Studio. All the code used in this chapter
    can be downloaded from the following GitHub repository: [https://github.com/PacktPublishing/QT6-C-GUI-Programming-Cookbook---Third-Edition-/tree/main/Chapter13](https://github.com/PacktPublishing/QT6-C-GUI-Programming-Cookbook---Third-Edition-/tree/main/Chapter13).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的技术要求包括 Qt 6.6.1 MSVC 2019 64 位、Qt Creator 12.0.2 和 Microsoft Visual Studio。本章中使用的所有代码都可以从以下
    GitHub 仓库下载：[https://github.com/PacktPublishing/QT6-C-GUI-Programming-Cookbook---Third-Edition-/tree/main/Chapter13](https://github.com/PacktPublishing/QT6-C-GUI-Programming-Cookbook---Third-Edition-/tree/main/Chapter13)。
- en: Introducing Qt WebEngine
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 Qt WebEngine
- en: In this example project, we will explore the basic features of the **WebEngine**
    module in Qt and try building a simple working web browser. Since Qt 5.6, Qt’s
    **WebKit** module has been deprecated and replaced by the **WebEngine** module,
    which is based on Google’s Chromium engine.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例项目中，我们将探索 Qt 中 **WebEngine** 模块的基本功能，并尝试构建一个简单的可工作的网页浏览器。由于 Qt 5.6，Qt 的
    **WebKit** 模块已被弃用，并由基于 Google Chromium 引擎的 **WebEngine** 模块所取代。
- en: How to do it…
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'First, let’s set up our **WebEngine** project:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们设置我们的 **WebEngine** 项目：
- en: 'At the moment, Qt’s **WebEngine** module only works with the Visual C++ compiler
    and not others, such as **MinGW** or **Cygwin**. This might change in the future,
    but it all depends on whether Qt developers want to port it to other compilers
    or not. Make sure that the Qt version you installed on your computer supports
    the Visual C++ compiler. You can add the **MSVC 2019 64-bit** component to your
    Qt installation using Qt’s maintenance tool. Also, make sure that you have installed
    the **Qt WebEngine** component in your Qt version:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目前，Qt 的 **WebEngine** 模块仅与 Visual C++ 编译器兼容，而不与其他编译器兼容，例如 **MinGW** 或 **Cygwin**。这可能在将来改变，但这完全取决于
    Qt 开发者是否希望将其移植到其他编译器。确保你电脑上安装的 Qt 版本支持 Visual C++ 编译器。你可以使用 Qt 的维护工具将 **MSVC 2019
    64-bit** 组件添加到你的 Qt 安装中。此外，确保你在 Qt 版本中已安装 **Qt WebEngine** 组件：
- en: '![Figure 13.1 – Making sure MSVC 2019 and Qt WebEngine are installed](img/B20976_13_001.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.1 – 确保已安装 MSVC 2019 和 Qt WebEngine](img/B20976_13_001.jpg)'
- en: Figure 13.1 – Making sure MSVC 2019 and Qt WebEngine are installed
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.1 – 确保已安装 MSVC 2019 和 Qt WebEngine
- en: 'Open up Qt Creator and create a new **Qt Widgets Application** project. Select
    a kit that uses the Visual C++ compiler:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Qt Creator 并创建一个新的 **Qt Widgets 应用程序** 项目。选择使用 Visual C++ 编译器的工具包：
- en: '![Figure 13.2 – Only MSVC is officially supported by Qt WebEngine](img/B20976_13_002.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.2 – 只有 MSVC 被Qt WebEngine官方支持](img/B20976_13_002.jpg)'
- en: Figure 13.2 – Only MSVC is officially supported by Qt WebEngine
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.2 – 只有 MSVC 被Qt WebEngine官方支持
- en: 'Open up your project file (`.pro`) and add the following modules to your project.
    After that, you must run `qmake` to apply the changes:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的项目文件（`.pro`）并将以下模块添加到你的项目中。之后，你必须运行 `qmake` 以应用更改：
- en: '[PRE0]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Figure 13.3 – Removing the menu bar, main toolbar, and status bar](img/B20976_13_003.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.3 – 移除菜单栏、主工具栏和状态栏](img/B20976_13_003.jpg)'
- en: Figure 13.3 – Removing the menu bar, main toolbar, and status bar
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.3 – 移除菜单栏、主工具栏和状态栏
- en: 'Place two horizontal layouts on the canvas, then place a **Line Edit** widget
    and a push button for the layout at the top:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在画布上放置两个水平布局，然后在布局顶部放置一个 **Line Edit** 小部件和一个按钮：
- en: '![Figure 13.4 – Placing the line edit widget and push button in a layout](img/B20976_13_004.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图13.4 – 将行编辑小部件和按钮放置在布局中](img/B20976_13_004.jpg)'
- en: Figure 13.4 – Placing the line edit widget and push button in a layout
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.4 – 将行编辑小部件和按钮放置在布局中
- en: 'Select the canvas and click on the **Lay Out Vertically** button located at
    the top of the editor:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择画布并单击位于编辑器顶部的**垂直布局**按钮：
- en: '![Figure 13.5 – Clicking on the Lay Out Vertically button](img/B20976_13_005.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图13.5 – 点击“垂直布局”按钮](img/B20976_13_005.jpg)'
- en: Figure 13.5 – Clicking on the Lay Out Vertically button
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.5 – 点击“垂直布局”按钮
- en: 'The layouts will expand and follow the size of the main window. The line edit
    will also expand horizontally, based on the width of the horizontal layout:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 布局将扩展并跟随主窗口的大小。行编辑也会根据水平布局的宽度水平扩展：
- en: '![Figure 13.6 – The line edit is now expanding horizontally](img/B20976_13_006.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图13.6 – 行编辑现在正在水平扩展](img/B20976_13_006.jpg)'
- en: Figure 13.6 – The line edit is now expanding horizontally
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.6 – 行编辑现在正在水平扩展
- en: 'Add two buttons to the left side of the line edit. We’ll use these two buttons
    to move backward and forward between page histories. Add a `webview` to it later
    at *step 15* using C++ code, and the space will be occupied:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在行编辑的左侧添加两个按钮。我们将使用这两个按钮在页面历史记录之间移动。稍后使用C++代码将其添加到*步骤15*，并将占用空间：
- en: '![Figure 13.7 – Adding two more buttons and a progress bar to the UI](img/B20976_13_007.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图13.7 – 向UI添加两个按钮和一个进度条](img/B20976_13_007.jpg)'
- en: Figure 13.7 – Adding two more buttons and a progress bar to the UI
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.7 – 向UI添加两个按钮和一个进度条
- en: Right-click on one of the buttons and select `clicked()` and click `mainwindow.h`
    and `mainwindow.cpp`. Repeat this step for all the other buttons as well.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击其中一个按钮并选择`clicked()`，然后点击`mainwindow.h`和`mainwindow.cpp`。对其他所有按钮重复此步骤。
- en: Right-click on the line edit and select `returnPressed()` and click `mainwindow.h`
    and `mainwindow.cpp`.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击行编辑并选择`returnPressed()`，然后点击`mainwindow.h`和`mainwindow.cpp`。
- en: 'Let’s hop over to `mainwindow.h`. The first thing we need to do is to add the
    following header to `mainwindow.h`:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们跳转到`mainwindow.h`。我们需要做的第一件事是将以下头文件添加到`mainwindow.h`中：
- en: '[PRE1]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Declare a `loadUrl()` function under the class destructor:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在类析构函数下声明一个`loadUrl()`函数：
- en: '[PRE2]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'private slots:'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'private slots:'
- en: void on_goButton_clicked();
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: void on_goButton_clicked();
- en: void on_address_returnPressed();
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: void on_address_returnPressed();
- en: void on_backButton_clicked();
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: void on_backButton_clicked();
- en: void on_forwardButton_clicked();
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: void on_forwardButton_clicked();
- en: void loading(int progress);
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: void loading(int progress);
- en: '[PRE3]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Declare a `QWebEngineView` object and call it `webview`:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个`QWebEngineView`对象并命名为`webview`：
- en: '[PRE4]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Open the `mainwindow.cpp` file and initiate the `WebEngine` view. Add it to
    the second horizontal layout and connect its `loadProgress()` signal to the `loading()`
    slot function we just added to `mainwindow.h`:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`mainwindow.cpp`文件并初始化`WebEngine`视图。将其添加到第二个水平布局中，并将其`loadProgress()`信号连接到我们刚刚添加到`mainwindow.h`中的`loading()`槽函数：
- en: '[PRE5]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Declare what will happen when the `loadUrl()` function is called:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明当`loadUrl()`函数被调用时会发生什么：
- en: '[PRE6]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Call the `loadUrl()` function when the **Go** button is clicked or when the
    *Enter* key is pressed:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当**Go**按钮被点击或当**Enter**键被按下时调用`loadUrl()`函数：
- en: '[PRE7]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'As for the other two buttons, we’ll ask `webview` to load the previous page
    or the next page if it is available in the history stack:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 至于其他两个按钮，我们将要求`webview`加载历史记录堆栈中可用的上一页或下一页：
- en: '[PRE8]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Change the value of `progressBar` when the web page is being loaded:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在网页加载时更改`progressBar`的值：
- en: '[PRE9]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Build and run the program now, and you will get a very basic but functional
    web browser:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在构建并运行程序，你将得到一个非常基础但功能齐全的网页浏览器：
- en: '![Figure 13.8 – We have created a simple web browser from scratch!](img/B20976_13_008.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图13.8 – 我们从头开始创建了一个简单的网页浏览器！](img/B20976_13_008.jpg)'
- en: Figure 13.8 – We have created a simple web browser from scratch!
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.8 – 我们从头开始创建了一个简单的网页浏览器！](img/B20976_13_008.jpg)'
- en: How it works…
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The old `webview` system was based on Apple’s **WebKit** engine and is only
    available in Qt 5.5 and its predecessor. Since 5.6, **WebKit** has been completely
    abandoned by Qt and replaced with Google’s **Chromium** engine. The API has been
    completely changed, and therefore all the code related to **Qt WebKit** will not
    work correctly once migrated to 5.6\. If you’re new to Qt, it’s recommended you
    skip **WebKit** and learn the **WebEngine** API since it is becoming the new standard
    in Qt.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 旧的 `webview` 系统基于苹果的 **WebKit** 引擎，并且仅在 Qt 5.5 及其之前的版本中可用。从 5.6 版本开始，Qt 完全放弃了
    **WebKit**，并替换为谷歌的 **Chromium** 引擎。API 已经完全改变，因此一旦迁移到 5.6，所有与 **Qt WebKit** 相关的代码将无法正确工作。如果你是
    Qt 的新手，建议你跳过 **WebKit**，学习 **WebEngine** API，因为它正在成为 Qt 的新标准。
- en: Note
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you have used Qt’s **WebKit** in the past, this web page teaches you how
    to port your old code over to **WebEngine**: [https://wiki.qt.io/Porting_from_QtWebKit_to_QtWebEngine](https://wiki.qt.io/Porting_from_QtWebKit_to_QtWebEngine)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你以前使用过 Qt 的 **WebKit**，这个网页会教你如何将你的旧代码迁移到 **WebEngine**：[https://wiki.qt.io/Porting_from_QtWebKit_to_QtWebEngine](https://wiki.qt.io/Porting_from_QtWebKit_to_QtWebEngine)
- en: In *step 15* in the previous section, we connected the `loadProgress()` signal
    that belongs to the `webview` widget to the `loading()` slot function. The signal
    will be called automatically when `webview` is loading the web page you requested
    by calling `QWebEnginePage::load()` in *step 17*. You can also connect the `loadStarted()`
    and `loadFinished()` signals if you need to.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节的 *步骤 15* 中，我们将属于 `webview` 小部件的 `loadProgress()` 信号连接到了 `loading()` 插槽函数。当在
    *步骤 17* 中通过调用 `QWebEnginePage::load()` 加载你请求的网页时，信号将自动被调用。如果你需要，你也可以连接 `loadStarted()`
    和 `loadFinished()` 信号。
- en: In *step 17*, we used the `QUrl` class to convert the text obtained from the
    line edit to URL format. By default, the address we inserted will lead to the
    local path if we do not specify the URL scheme (HTTP, HTTPS, FTP, and so on).
    We may not be able to load the page if, say, we gave it `google.com` instead of
    `http://google.com`. Therefore, we manually specified a URL scheme for it by calling
    `QUrl::setScheme()`. This ensured the address is properly formatted before passing
    it to `webview`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 17* 中，我们使用了 `QUrl` 类将来自行编辑器的文本转换为 URL 格式。默认情况下，如果我们没有指定 URL 方案（HTTP、HTTPS、FTP
    等），我们插入的地址将指向本地路径。如果我们给出的是 `google.com` 而不是 `http://google.com`，我们可能无法加载页面。因此，我们通过调用
    `QUrl::setScheme()` 手动指定了一个 URL 方案，以确保在传递给 `webview` 之前地址格式正确。
- en: There’s more…
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'If for some reason you need the **WebKit** module for your project instead
    of **WebEngine**, you can obtain the module code from GitHub and build it by yourself:
    [https://github.com/qt/qtwebkit](https://github.com/qt/qtwebkit)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出于某种原因你需要你的项目中使用 **WebKit** 模块而不是 **WebEngine**，你可以从 GitHub 获取模块代码并自行构建：[https://github.com/qt/qtwebkit](https://github.com/qt/qtwebkit)
- en: Using webview and web settings
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 webview 和 web 设置
- en: In this recipe, we will dive deeper into the features available in Qt’s `webview`.
    We will use the source files from the previous example and add more code to it.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将更深入地探讨 Qt 的 `webview` 中可用的功能。我们将使用前一个示例中的源文件，并为其添加更多代码。
- en: How to do it…
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Let’s explore some of the basic features of the **Qt** **WebEngine** module:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索一下 **Qt** **WebEngine** 模块的一些基本功能：
- en: 'Open `mainwindow.ui` and add a vertical layout under the progress bar. Add
    a `plaintext` property of the **Plain Text Edit** widget to the following:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `mainwindow.ui` 并在进度条下方添加一个垂直布局。将 **纯文本编辑** 小部件的 `plaintext` 属性添加到以下内容：
- en: '[PRE10]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This is how it should look after you have added the code on top of the **Plain
    Text** **Edit** widget:'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是在你向 **纯文本** **编辑** 小部件上方添加代码后的样子：
- en: '![Figure 13.9 – Adding a Plain Text Edit widget and a push button to the bottom](img/B20976_13_009.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.9 – 向底部添加纯文本编辑小部件和按钮](img/B20976_13_009.jpg)'
- en: Figure 13.9 – Adding a Plain Text Edit widget and a push button to the bottom
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.9 – 向底部添加纯文本编辑小部件和按钮
- en: 'Go to **File** | **New File**. A window will pop up and ask you to choose a
    file template. Select **Qt Resource File** under the **Qt** category and click
    on the **Choose…** button. Type in your desired filename and click **Next**, followed
    by **Finish**:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 **文件** | **新建文件**。一个窗口将会弹出，并要求你选择一个文件模板。在 **Qt** 类别下选择 **Qt 资源文件**，然后点击 **选择…**
    按钮。输入你想要的文件名，点击 **下一步**，然后点击 **完成**：
- en: '![Figure 13.10 – Creating a Qt resource file](img/B20976_13_010.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.10 – 创建 Qt 资源文件](img/B20976_13_010.jpg)'
- en: Figure 13.10 – Creating a Qt resource file
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.10 – 创建 Qt 资源文件
- en: 'Open the resource file we just created by right-clicking on it in the `/` and
    click `tux.png` image file and click `.exe`) once it’s compiled:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在`/`上右键单击我们刚刚创建的资源文件并点击`.exe`图像文件来打开它（一旦编译完成）：
- en: '![Figure 13.11 – Adding the tux.png image file to our resource file](img/B20976_13_011.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图13.11 – 将tux.png图像文件添加到我们的资源文件中](img/B20976_13_011.jpg)'
- en: Figure 13.11 – Adding the tux.png image file to our resource file
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.11 – 将tux.png图像文件添加到我们的资源文件中]'
- en: 'Open `mainwindow.h` and add the following headers to it:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`mainwindow.h`并在其中添加以下头文件：
- en: '[PRE11]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'public:'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'public:'
- en: explicit MainWindow(QWidget *parent = 0);
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: explicit MainWindow(QWidget *parent = 0);
- en: ~MainWindow();
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ~MainWindow();
- en: void loadUrl();
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: void loadUrl();
- en: 'private slots:'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'private slots:'
- en: void on_goButton_clicked();
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: void on_goButton_clicked();
- en: void on_address_returnPressed();
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: void on_address_returnPressed();
- en: void on_backButton_clicked();
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: void on_backButton_clicked();
- en: void on_forwardButton_clicked();
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: void on_forwardButton_clicked();
- en: void startLoading();
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: void startLoading();
- en: void loading(int progress);
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: void loading(int progress);
- en: void loaded(bool ok);
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: void loaded(bool ok);
- en: void on_loadHtml_clicked();
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: void on_loadHtml_clicked();
- en: 'private:'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'private:'
- en: Ui::MainWindow *ui;
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Ui::MainWindow *ui;
- en: 'mainwindow.cpp and add the following code to the class constructor:'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在mainwindow.cpp中添加以下代码到类构造函数中：
- en: '[PRE12]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: QFile file("://tux.png");
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: QFile file("://tux.png");
- en: if (file.open(QFile::ReadOnly)) {
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: if (file.open(QFile::ReadOnly)) {
- en: QByteArray data = file.readAll();
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: QByteArray data = file.readAll();
- en: webview->page()->setContent(data, "image/png");
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: webview->page()->setContent(data, "image/png");
- en: '}'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: else {
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: else {
- en: qDebug() << "File cannot be opened.";
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: qDebug() << "文件无法打开。";
- en: '}'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: connect(webview, &QWebEngineView::loadStarted, this, &MainWindow::startLoading()));
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: connect(webview, &QWebEngineView::loadStarted, this, &MainWindow::startLoading()));
- en: connect(webview, &QWebEngineView::loadProgress, this, &MainWindow::loading(int)));
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: connect(webview, &QWebEngineView::loadProgress, this, &MainWindow::loading(int)));
- en: connect(webview, &QWebEngineView::loadFinished, this, &MainWindow::loaded(bool)));
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: connect(webview, &QWebEngineView::loadFinished, this, &MainWindow::loaded(bool)));
- en: '}'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE13]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `MainWindow::loadUrl()` function stays the same as in the previous example
    in the *Introducing Qt WebEngine* recipe, which sets the URL scheme to HTTP before
    loading the page:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在*Qt WebEngine入门*中的前一个示例中，`MainWindow::loadUrl()`函数保持不变，它在加载页面之前将URL方案设置为HTTP：
- en: '[PRE15]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The same goes for the following functions, which also remain the same as the
    previous example in the *Introducing Qt* *WebEngine* recipe:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下函数也是如此，它们与*Qt WebEngine入门*中的前一个示例保持一致：
- en: '[PRE16]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Add the `MainWindow::startLoading()` and `MainWindow::loaded()` slot functions,
    which will be called by the `loadStarted()` and `loadFinished()` signals. These
    two functions basically show a progress bar when a page is starting to load and
    hide the progress bar when the page has finished loading:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`MainWindow::startLoading()`和`MainWindow::loaded()`槽函数，这两个函数将由`loadStarted()`和`loadFinished()`信号调用。这两个函数基本上在页面开始加载时显示进度条，在页面加载完成后隐藏进度条：
- en: '[PRE17]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Call `webview->loadHtml()` to convert the plain text to HTML content when the
    **Load HTML** button is clicked:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当点击**加载HTML**按钮时，调用`webview->loadHtml()`将纯文本转换为HTML内容：
- en: '[PRE18]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Build and run the program, and you should see something like the following:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建并运行程序，你应该会看到以下内容：
- en: '![Figure 13.12 –webview will now display the result generated from your HTML
    code](img/B20976_13_012.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图13.12 – webview将显示由您的HTML代码生成的结果](img/B20976_13_012.jpg)'
- en: Figure 13.12 –webview will now display the result generated from your HTML code
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.12 – webview将显示由您的HTML代码生成的结果
- en: How it works…
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this example, we used C++ to load an image file and set it as `webview` default
    content (instead of a blank page). We could achieve the same result by loading
    a default HTML file with an image at startup.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用C++加载了一个图像文件并将其设置为`webview`的默认内容（而不是空白页面）。我们也可以通过在启动时加载包含图像的默认HTML文件来实现相同的结果。
- en: Some of the code in the class constructor has been commented out. You can remove
    the double slashes (`//`) and see the difference it makes – the JavaScript alert
    will no longer appear (since JavaScript is disabled) and images will no longer
    appear in your `webview`.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 类构造函数中的部分代码已被注释掉。你可以移除双斜杠(`//`)并查看它带来的差异 – JavaScript警告将不再出现（因为JavaScript已被禁用），图像将不再在`webview`中显示。
- en: 'Another thing you can try is to change the font family from `QWebEngineSettings::SansSerifFont`
    to `QWebEngineSettings::SerifFont`. You will notice a slight difference in the
    font as it appears in `webview`:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以尝试将字体家族从`QWebEngineSettings::SansSerifFont`更改为`QWebEngineSettings::SerifFont`。你将注意到`webview`中字体显示的细微差别：
- en: '![Figure 13.13 – Different types of font showing in webview](img/B20976_13_013.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![图13.13 – 在webview中显示的不同类型的字体](img/B20976_13_013.jpg)'
- en: Figure 13.13 – Different types of font showing in webview
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.13 – 在webview中显示不同类型的字体
- en: By clicking the `webview` to treat the content of the **Plain Text Edit** widget
    as HTML code and load it as an HTML page. You can use this to make a simple HTML
    editor powered by Qt!
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击`webview`将**纯文本编辑**小部件的内容视为HTML代码并加载为HTML页面。你可以使用这个功能创建一个由Qt驱动的简单HTML编辑器！
- en: Embedding Google maps in your project
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在你的项目中嵌入谷歌地图
- en: In this recipe, we will learn how to embed Google maps in our project through
    Qt’s **WebEngine** module. This example doesn’t focus much on Qt and C++, but
    rather on the **Google Maps** API in HTML code.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将学习如何通过Qt的**WebEngine**模块将谷歌地图嵌入到我们的项目中。这个示例并不侧重于Qt和C++，而是侧重于HTML代码中的**谷歌地图**API。
- en: How to do it…
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'Let’s create a program that displays Google maps by following these steps:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下步骤创建一个显示谷歌地图的程序：
- en: Create a new **Qt Widgets Application** project and remove the **statusBar**,
    **menuBar**, and **mainToolBar** objects.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的**Qt Widgets应用程序**项目，并移除**状态栏**、**菜单栏**和**主工具栏**对象。
- en: 'Open your project file (`.pro`) and add the following modules to your project:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的项目文件（`.pro`)并添加以下模块到你的项目中：
- en: '[PRE19]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Open `mainwindow.ui` and add a vertical layout to the canvas. Then, select
    the canvas and click the **Lay Out Vertically** button on top of the canvas. You
    will get the following:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`mainwindow.ui`并在画布上添加一个垂直布局。然后，选择画布并点击画布顶部的**垂直布局**按钮。你会得到以下内容：
- en: '![Figure 13.14 – Adding a vertical layout to the central widget](img/B20976_13_014.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![图13.14 – 向中央小部件添加垂直布局](img/B20976_13_014.jpg)'
- en: Figure 13.14 – Adding a vertical layout to the central widget
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.14 – 向中央小部件添加垂直布局
- en: 'Open `mainwindow.cpp` and add the following header to the top of the source
    code:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`mainwindow.cpp`并在源代码顶部添加以下头文件：
- en: '[PRE20]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Add the following code to the `MainWindow` constructor:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainWindow`构造函数中添加以下代码：
- en: '[PRE21]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Go to `.qrc`). We will add an HTML file to our project, called `map.html`:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往`.qrc`)。我们将向项目中添加一个HTML文件，命名为`map.html`：
- en: '![Figure 13.15 – Adding map.html to the resource file](img/B20976_13_015.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![图13.15 – 将map.html添加到资源文件](img/B20976_13_015.jpg)'
- en: Figure 13.15 – Adding map.html to the resource file
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.15 – 将map.html添加到资源文件
- en: Open `map.html` with your favorite text editor. It’s not recommended to open
    an HTML file using Qt Creator as it does not provide any color coding for HTML
    syntax.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你喜欢的文本编辑器打开`map.html`。不建议使用Qt Creator打开HTML文件，因为它不提供HTML语法的颜色编码。
- en: 'Start writing the HTML code by declaring important tags, such as `<html>`,
    `<head>`, and `<body>`:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始编写HTML代码，声明重要的标签，如`<html>`、`<head>`和`<body>`：
- en: '[PRE22]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Add a `<div>` tag to the body and set its ID as `map-canvas`:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<body>`中添加一个`<div>`标签并设置其ID为`map-canvas`：
- en: '[PRE23]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Add the following code to the head of the HTML document:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到HTML文档的头部：
- en: '[PRE24]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Add the following code, also to the head of the HTML document, beneath the
    code we inserted in the previous step:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码也添加到HTML文档的头部，在之前步骤中插入的代码下方：
- en: '[PRE25]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Create a marker and place it on the map:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个标记并将其放置在地图上：
- en: '[PRE26]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Add a polyline to the map:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向地图添加一条折线：
- en: '[PRE27]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Add a polygon shape:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个多边形形状：
- en: '[PRE28]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Create a drawing manager and apply it to the map:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个绘图管理器并将其应用到地图上：
- en: '[PRE29]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Compile and run the project. You should see the following:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译并运行项目。你应该看到以下内容：
- en: '![Figure 13.16 – You should see a marker, a polyline, and a triangle on the
    Google map](img/B20976_13_016.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![图13.16 – 你应该在谷歌地图上看到一个标记、一条折线和三角形](img/B20976_13_016.jpg)'
- en: Figure 13.16 – You should see a marker, a polyline, and a triangle on the Google
    map
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.16 – 你应该在谷歌地图上看到一个标记、一条折线和三角形
- en: How it works…
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Google allows you to embed Google maps in a web page using its JavaScript library,
    called the `webview` widget, which uses the **Google Maps** API. The only downside
    of this method is that we cannot load maps when there is no internet connection.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌允许你使用其JavaScript库（称为`webview`小部件）将谷歌地图嵌入到网页中，该小部件使用**谷歌地图**API。这种方法唯一的缺点是我们无法在没有互联网连接的情况下加载地图。
- en: The **Google Maps** API can be called by your website as Google allows it. Choose
    [the free API if your plan is for heav](https://console.developers.google.com)ier
    traffic.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '**谷歌地图**API可以通过你的网站调用，因为谷歌允许这样做。如果你的计划是处理大量流量，请选择[免费API](https://console.developers.google.com)。'
- en: Go to [https://console.developers.google.com](https://console.developers.google.com)
    to get a free key and replace `YOUR_KEY_HERE` in the JavaScript source path with
    the API key you obtained from Google.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 前往[https://console.developers.google.com](https://console.developers.google.com)获取一个免费密钥，并将JavaScript源路径中的`YOUR_KEY_HERE`替换为你从谷歌获得的API密钥。
- en: We must define a `<div>` object, which serves as a container for the map. Then,
    when we initialize the map, we specify the ID of the `<div>` object so that the
    **Google Maps** API knows which HTML element to look for when embedding the map.
    By default, we set the center of the map to the coordinates of New York and set
    the default zoom level to 6\. Then, we add an event listener that gets triggered
    when the zoom level of the map changes.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须定义一个`<div>`对象，它作为地图的容器。然后，当我们初始化地图时，我们指定`<div>`对象的ID，这样**Google Maps** API就知道在嵌入地图时查找哪个HTML元素。默认情况下，我们将地图中心设置为纽约的坐标，并将默认缩放级别设置为6。然后，我们添加一个事件监听器，当地图的缩放级别发生变化时，它会触发。
- en: Remove the double slashes (`//`) from the code to see it in action. After that,
    we add a marker to the map through JavaScript. The marker also has an event listener
    attached to it, which will trigger the `panTo()` function when the marker is clicked.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 从代码中移除双斜杠（`//`）以查看其效果。之后，我们通过JavaScript在地图上添加一个标记。该标记还附加了一个事件监听器，当标记被点击时，将触发`panTo()`函数。
- en: It basically pans the map view to the marker that has been clicked. Although
    we have added the drawing manager to the map (the icon buttons beside the **Map**
    and **Satellite** buttons), which allows users to draw any type of shape on top
    of the map, it’s also possible to add shapes manually using JavaScript, similar
    to how we added a marker in *step 12*, in the *How to do* *it...* section.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 它基本上将地图视图平移到被点击的标记。尽管我们已经将绘图管理器添加到地图中（位于**地图**和**卫星**按钮旁边的图标按钮），允许用户在地图上绘制任何类型的形状，但也可以使用JavaScript手动添加形状，类似于我们在**步骤12**中在**如何做**
    *it...* 部分添加标记的方式。
- en: Lastly, you may have noticed that headers are added to `mainwindow.cpp` instead
    of `mainwindow.h`. This is totally fine unless you are declaring class pointers
    in `mainwindow.h`—then, you have to include those headers in it.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可能已经注意到，头文件被添加到`mainwindow.cpp`而不是`mainwindow.h`。这完全没问题，除非你在`mainwindow.h`中声明类指针——那么，你必须将这些头文件包含在内。
- en: Calling C++ functions from JavaScript
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从JavaScript调用C++函数
- en: In this recipe, we will learn how to put our knowledge to use and create a functional
    login screen using Qt and SQLite.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将学习如何将我们的知识付诸实践，并使用Qt和SQLite创建一个功能性的登录屏幕。
- en: How to do it…
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Let’s learn how to call C++ functions from JavaScript using the following steps:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们学习如何使用以下步骤从JavaScript调用C++函数：
- en: 'Create a `.pro`) and add the following modules to the project:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`.pro`)并将以下模块添加到项目中：
- en: '[PRE30]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Add a vertical layout to the canvas, then select the canvas and click on the
    `Hello!`. Make its font bigger by setting its `styleSheet` property as follows:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将垂直布局添加到画布中，然后选择画布并点击`Hello!`。通过以下方式设置其`styleSheet`属性来使其字体更大：
- en: '[PRE31]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This is what it looks like after we applied the font properties to our style
    sheet:'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这就是我们应用了字体属性后的样子：
- en: '![Figure 13.17 – Applying the font property to the “Hello!” text](img/B20976_13_017.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![图13.17 – 将字体属性应用于“Hello!”文本](img/B20976_13_017.jpg)'
- en: Figure 13.17 – Applying the font property to the “Hello!” text
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.17 – 将字体属性应用于“Hello!”文本
- en: 'Go to **File** | **New File…** and create a resource file. Add an empty HTML
    file and all the JavaScript files, CSS files, font files, and so on that belong
    to **jQuery**, **Bootstrap**, and **Font Awesome** to your project resources:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往**文件** | **新建文件…**并创建一个资源文件。将属于**jQuery**、**Bootstrap**和**Font Awesome**的空HTML文件、所有JavaScript文件、CSS文件、字体文件等添加到项目资源中：
- en: '![Figure 13.18 – Adding all the files to the project’s resource](img/B20976_13_018.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![图13.18 – 将所有文件添加到项目的资源中](img/B20976_13_018.jpg)'
- en: Figure 13.18 – Adding all the files to the project’s resource
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.18 – 将所有文件添加到项目的资源中
- en: 'Open your HTML file, which in this case is called `test.html`. Link all the
    necessary JavaScript and CSS files to the HTML source code, between the `<``head>`
    tags:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的HTML文件，在这个例子中称为`test.html`。将所有必要的JavaScript和CSS文件链接到HTML源代码，位于`<head>`标签之间：
- en: '[PRE32]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Add the following JavaScript to the `<head>` element, wrapped between the `<``script>`
    tags:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下JavaScript添加到`<head>`元素中，位于`<script>`标签之间：
- en: '[PRE33]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Print **Good bye!** when clicking on the **changeText** button with the following
    code:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当点击**changeText**按钮并使用以下代码时，打印**再见**：
- en: '[PRE34]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Add the following code to the `<``body>` element:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`<body>`元素中：
- en: '[PRE35]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Continuing from the previous code, this time, we create input fields for username
    and password, with two buttons at the bottom called **Login** and **Change** **Cpp
    Text**:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从前面的代码继续，这次我们创建用户名和密码的输入字段，底部有两个按钮，分别称为**登录**和**更改** **Cpp 文本**：
- en: '[PRE36]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Open `mainwindow.h` and add the following public functions to the `MainWindow`
    class:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`mainwindow.h`文件，并将以下公共函数添加到`MainWindow`类中：
- en: '[PRE37]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '#include <QtWebEngineWidgets/QWebEngineView>'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 包含 `<QtWebEngineWidgets/QWebEngineView>`
- en: '#include <QtWebChannel/QWebChannel>'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 包含 `<QtWebChannel/QWebChannel>`
- en: '#include <QMessageBox>'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 包含 `<QMessageBox>`
- en: '[PRE38]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Add the following code to the `MainWindow` constructor:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`MainWindow`构造函数中：
- en: '[PRE39]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Declare what happens when `changeQtText()` and `showLoginInfo()` are called:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明当`changeQtText()`和`showLoginInfo()`被调用时会发生什么：
- en: '[PRE40]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Compile and run the program; you should see something similar to the following
    screenshot. If you click on the **Change Cpp Text** button, the word **Hello!**
    at the top will change to **Goodbye!** If you click on the **Login** button, a
    message box will appear and show you exactly what you typed in the **Username**
    and **Password** input fields:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译并运行程序；你应该会看到以下截图类似的内容。如果你点击**更改Cpp文本**按钮，顶部的单词**Hello!**将变为**Goodbye!**如果你点击**登录**按钮，将弹出一个消息框，显示你输入的**用户名**和**密码**输入字段中的确切内容：
- en: '![Figure 13.19 – Clicking on the buttons to call C++ functions](img/B20976_13_019.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![图13.19 – 点击按钮以调用C++函数](img/B20976_13_019.jpg)'
- en: Figure 13.19 – Clicking on the buttons to call C++ functions
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.19 – 点击按钮以调用C++函数
- en: How it works…
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In this example, we used two JavaScript libraries: **jQuery** and **Bootstrap**.
    We also used an iconic font package called **Font Awesome**. These third-party
    add-ons were used to make the HTML UI more interesting and responsive to different
    screen resolutions.'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用了两个JavaScript库：**jQuery**和**Bootstrap**。我们还使用了一个名为**Font Awesome**的图标字体包。这些第三方插件被用来使HTML用户界面更加有趣，并且能够对不同屏幕分辨率做出响应。
- en: We also used **jQuery** to detect the document’s ready status, as well as [to
    obtain the values of in](https://jquery.com/download)put fields.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用了**jQuery**来检测文档的就绪状态，以及[获取输入字段的值](https://jquery.com/download)。
- en: Note
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You can download **jQuery** from [https://jquery.com/download](https://jquery.com/download),
    **Bootstrap** from [http://getbootstrap.com/getting-started/#download](http://getbootstrap.com/getting-started/#download),
    and **Font Awesome** from [http://fontawesome.io](http://fontawesome.io).
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[https://jquery.com/download](https://jquery.com/download)下载**jQuery**，从[http://getbootstrap.com/getting-started/#download](http://getbootstrap.com/getting-started/#download)下载**Bootstrap**，以及从[http://fontawesome.io](http://fontawesome.io)下载**Font
    Awesome**。
- en: 'Qt’s **WebEngine** module uses a mechanism called **WebChannel**, which enables
    **peer-to-peer** (**P2P**) communication between the C++ program and the HTML
    page. The **WebEngine** module provides a JavaScript library that makes integration
    a lot easier. The JavaScript is embedded in your project’s resource by default,
    so you don’t need to import it into your project manually. You just have to include
    it in your HTML page by calling the following:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: Qt的**WebEngine**模块使用一种称为**WebChannel**的机制，它使得C++程序和HTML页面之间的**点对点**（**P2P**）通信成为可能。**WebEngine**模块提供了一个JavaScript库，使得集成变得更加容易。JavaScript默认嵌入到你的项目资源中，因此你不需要手动将其导入到你的项目中。你只需要通过调用以下代码将其包含在你的HTML页面中：
- en: '[PRE41]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Once you have included `qwebchannel.js`, you can initialize the `QWebChannel`
    class and assign the Qt object we registered earlier in C++ to a JavaScript variable.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你包含了`qwebchannel.js`，你可以初始化`QWebChannel`类，并将我们之前在C++中注册的Qt对象分配给一个JavaScript变量。
- en: 'In C++, this is done as follows:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在C++中，这样做如下：
- en: '[PRE42]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Then, in JavaScript, this is done as follows:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在JavaScript中，这样做如下：
- en: '[PRE43]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'You may be wondering what this line means:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想知道这一行代表什么：
- en: '[PRE44]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Qt’s `1234` defines the port number you want to use for remote debugging.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: Qt的`1234`定义了你想要用于远程调试的端口号。
- en: 'Once you have enabled remote debugging, you can access the debugging page by
    opening up a Chromium-based web browser, such as Google Chrome (this will not
    work in Firefox and other browsers), and typing in `http://127.0.0.1:1234`. You
    will then see a page that looks like this:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你启用了远程调试，你可以通过打开一个基于Chromium的网页浏览器，例如Google Chrome（这不会在Firefox和其他浏览器中工作），并输入`http://127.0.0.1:1234`来访问调试页面。你将看到一个看起来像这样的页面：
- en: '![Figure 13.20 – Inspectable pages allow you to debug more easily](img/B20976_13_020.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![图13.20 – 可检查的页面使调试更加容易](img/B20976_13_020.jpg)'
- en: Figure 13.20 – Inspectable pages allow you to debug more easily
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.20 – 可检查的页面使调试更加容易
- en: The first page will display all HTML pages that are currently running in your
    program, which in this case is `test.html`. Click on the page link, and it will
    take you to another page for inspection. You can use this to check for CSS errors,
    JavaScript errors, and missing files.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 第一页将显示您程序中当前运行的所有 HTML 页面，在本例中是 `test.html`。点击页面链接，它将带您到另一个页面进行检查。您可以使用此功能检查
    CSS 错误、JavaScript 错误和缺失的文件。
- en: Note that you should disable remote debugging once your program is bug-free
    and ready for deployment. This is because remote debugging takes time to initialize
    and will increase your program’s startup time.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，一旦您的程序无错误且准备部署，应禁用远程调试。这是因为远程调试需要时间来初始化，并将增加您程序的启动时间。
- en: 'If you want to call a C++ function from JavaScript, you must place the `Q_INVOKABLE`
    macro in front of the function’s declaration; otherwise, it will not work:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想从 JavaScript 调用一个 C++ 函数，必须在函数声明前放置 `Q_INVOKABLE` 宏；否则，它将不起作用：
- en: '[PRE45]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Calling Javascript functions from C++
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 C++ 调用 JavaScript 函数
- en: 'In the previous recipe, we learned how to call C++ functions from JavaScript
    through Qt’s **WebChannel** system. In this example, we will try to do the reverse:
    call JavaScript functions from C++ code.'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的配方中，我们学习了如何通过 Qt 的 **WebChannel** 系统从 JavaScript 调用 C++ 函数。在本例中，我们将尝试做相反的事情：从
    C++ 代码调用 JavaScript 函数。
- en: How to do it…
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'We can call JavaScript functions from C++ through the following steps:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下步骤从 C++ 调用 JavaScript 函数：
- en: Create a new `webenginewidgets` module to your project.
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为您的项目创建一个新的 `webenginewidgets` 模块。
- en: Open `mainwindow.ui` and remove the **mainToolBar**, **menuBar**, and **statusBar**
    objects.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `mainwindow.ui` 并删除 **mainToolBar**、**menuBar** 和 **statusBar** 对象。
- en: Add a vertical layout and a horizontal layout to the canvas. Select the canvas
    and click **Lay Out Vertically**. Make sure the horizontal layout is located at
    the bottom of the vertical layout.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个垂直布局和一个水平布局添加到画布上。选择画布并点击 **垂直布局**。确保水平布局位于垂直布局的底部。
- en: 'Add two push buttons to the horizontal layout; one is called `clicked()` option
    and click **OK**. Qt will automatically add a slot function to your source code.
    Repeat this step for the other button:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向水平布局添加两个按钮；一个称为 `clicked()` 选项并点击 **确定**。Qt 将自动将槽函数添加到您的源代码中。对另一个按钮重复此步骤：
- en: '![Figure 13.21 – Placing the buttons in the bottom layout](img/B20976_13_021.jpg)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.21 – 将按钮放置在底部布局中](img/B20976_13_021.jpg)'
- en: Figure 13.21 – Placing the buttons in the bottom layout
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.21 – 将按钮放置在底部布局中
- en: 'Open `mainwindow.h` and add the following headers to it:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `mainwindow.h` 并向其中添加以下头文件：
- en: '[PRE46]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Declare the class pointer of a `QWebEngineView` object called `webview`:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明 `QWebEngineView` 对象的类指针，称为 `webview`：
- en: '[PRE47]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'MainWindow::MainWindow(QWidget *parent) :'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'MainWindow::MainWindow(QWidget *parent) :'
- en: QMainWindow(parent),
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: QMainWindow(parent),
- en: ui(new Ui::MainWindow)
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ui(new Ui::MainWindow)
- en: '{'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{'
- en: //qputenv("QTWEBENGINE_REMOTE_DEBUGGING", "1234");
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: //qputenv("QTWEBENGINE_REMOTE_DEBUGGING", "1234");
- en: ui->setupUi(this);
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ui->setupUi(this);
- en: webview = new QWebEngineView();
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: webview = new QWebEngineView();
- en: ui->verticalLayout->addWidget(webview);
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ui->verticalLayout->addWidget(webview);
- en: QWebChannel* webChannel = new QWebChannel();
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: QWebChannel* webChannel = new QWebChannel();
- en: webChannel->registerObject("mainWindow", this);
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: webChannel->registerObject("mainWindow", this);
- en: webview->page()->setWebChannel(webChannel);
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: webview->page()->setWebChannel(webChannel);
- en: webview->page()->load(QUrl("qrc:///html/test.html"));
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: webview->page()->load(QUrl("qrc:///html/test.html"));
- en: '}'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE48]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Define what will happen when the `changeHtmlText` button and the `playUIAnimation`
    button are clicked:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义当点击 `changeHtmlText` 按钮和 `playUIAnimation` 按钮时会发生什么：
- en: '[PRE49]'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Let’s create a resource file for our project by going to **File** | **New File...**.
    Select **Qt Resource File** under the **Qt** category and click **Choose...**.
    Insert your desired filename and click **Next**, followed by **Finish**.
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过转到 **文件** | **新建文件...** 来为我们的项目创建一个资源文件。在 **Qt** 类别下选择 **Qt 资源文件** 并点击
    **选择...**。插入您想要的文件名并点击 **下一步**，然后点击 **完成**。
- en: Add an empty HTML file and all the required add-ons (`tux.png` image file to
    the resources file as well, as we’ll be using it in a short while in *step 14*.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个空的 HTML 文件以及所有必需的附加组件（`tux.png` 图像文件也添加到资源文件中，因为我们将在 *步骤 14* 中使用它）。
- en: 'Open the HTML file we just created and add it to the project resources; in
    our case, it’s called `test.html`. Add the following HTML code to the file:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开我们刚刚创建的 HTML 文件并将其添加到项目资源中；在我们的例子中，它被称为 `test.html`。向文件中添加以下 HTML 代码：
- en: '[PRE50]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Add the following JavaScript code, which is wrapped within the `<script>` tags,
    to the `<head>` element of our HTML file:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 JavaScript 代码（包含在 `<script>` 标签内）添加到我们 HTML 文件的 `<head>` 元素中：
- en: '[PRE51]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Define a `startAnim()` function:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个 `startAnim()` 函数：
- en: '[PRE52]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Add the following code to the `<body>` element of our HTML file:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到我们的 HTML 文件的 `<body>` 元素中：
- en: '[PRE53]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Continue writing the following code, to which we’ve added a list:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续编写以下代码，我们已添加了一个列表：
- en: '[PRE54]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The code continues as we add the remaining items to a second list:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码继续，当我们向第二个列表添加剩余的项目时：
- en: '[PRE55]'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Build and run the program; you should get a similar result to that in the following
    screenshot. When you click on the **Change HTML Text** button, the information
    text is located within the top panel. If you click on the **Play UI Animation**
    button, penguin images, alongside the two sets of widgets, will appear one after
    the other, with different animations:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译并运行程序；你应该会得到以下屏幕截图中的类似结果。当你点击 **更改 HTML 文本** 按钮时，信息文本位于顶部面板中。如果你点击 **播放 UI
    动画** 按钮，企鹅图像以及两组小部件将依次出现，并带有不同的动画：
- en: '![Figure 13.22 – Clicking on the buttons at the bottom to see the results](img/B20976_13_022.jpg)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.22 – 点击底部的按钮查看结果](img/B20976_13_022.jpg)'
- en: Figure 13.22 – Clicking on the buttons at the bottom to see the results
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.22 – 点击底部的按钮查看结果
- en: How it works…
  id: totrans-290
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: This example is similar to the previous one in the *Calling C++ functions from
    JavaScript* recipe. Once we have included the `QWebChannel` class, we can call
    any of the JavaScript functions from C++ by calling `webview->page()->runJavascript("jsFunctionNameHere();")`.
    Don’t forget to apply the web channel created in C++ to `webview` page as well;
    otherwise, it will not be able to communicate with the `QWebChannel` class in
    your HTML file.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例与 *从 JavaScript 调用 C++ 函数* 菜单中的上一个示例类似。一旦我们包含了 `QWebChannel` 类，我们就可以通过调用
    `webview->page()->runJavascript("jsFunctionNameHere();")` 来从 C++ 调用任何 JavaScript
    函数。别忘了将 C++ 中创建的 Web 频道应用到 `webview` 页面上；否则，它将无法与你的 HTML 文件中的 `QWebChannel` 类进行通信。
- en: By default, we change the CSS properties of the penguin image and set its opacity
    to 0, width to 0%, and height to 0%. We also hide the two list groups by calling
    the `hide()` **jQuery** function. When the **Play UI Animation** button is clicked,
    we repeat the steps just in case the animations have been played before (that
    is, the same button has been clicked before), and then we hide the list groups
    again in order for the animations to be replayed.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，我们更改企鹅图像的 CSS 属性，将其不透明度设置为 0，宽度设置为 0%，高度设置为 0%。我们还通过调用 `hide()` **jQuery**
    函数隐藏了两个列表组。当点击 **播放 UI 动画** 按钮时，我们重复这些步骤，以防动画已经播放过（即，之前已经点击过相同的按钮），然后再次隐藏列表组，以便重新播放动画。
- en: One powerful feature of **jQuery** is that you can define what happens after
    an animation finishes, which allows us to play animations in sequence. In this
    example, we started with the penguin image and interpolated its CSS properties
    to a targeted setting within a second (1,000 milliseconds). Once that was done,
    we started another animation, which made the first list group slide from top to
    bottom in 1 second. After that, we ran the third animation, which made the second
    list group fade in from nowhere within 1.5 seconds.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '**jQuery** 的一个强大功能是，你可以定义动画完成后发生的事情，这允许我们按顺序播放动画。在这个例子中，我们首先从企鹅图像开始，并在一秒（1,000
    毫秒）内将其 CSS 属性插值到目标设置。一旦完成，我们开始另一个动画，使第一个列表组在 1 秒内从顶部滑动到底部。之后，我们运行第三个动画，使第二个列表组在
    1.5 秒内从无到有淡入。'
- en: To replace the information text located in the top panel, we created a JavaScript
    function called `changeHtmlText()` within the function itself, and we got the
    HTML element by referring to its ID and calling `html()` to change its contents.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 为了替换顶部面板中的信息文本，我们在函数内部创建了一个名为 `changeHtmlText()` 的 JavaScript 函数，并通过引用其 ID 并调用
    `html()` 来更改其内容。
