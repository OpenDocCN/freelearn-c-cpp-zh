- en: Testing and Debugging
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试和调试
- en: We often see the word *debug* when reading tutorials or articles related to
    programming. But do you know what debugging means? A *bug* in programming terms
    means an error or defect within a computer program that prevents the software
    from operating correctly, which often leads to incorrect output or even a crash.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在阅读与编程相关的教程或文章时，我们经常看到*调试*这个词。但是您知道调试是什么意思吗？在编程术语中，*bug*表示计算机程序中的错误或缺陷，导致软件无法正常运行，通常会导致不正确的输出甚至崩溃。
- en: 'In this chapter, we will cover the following topics and learn how to debug
    our Qt project:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题，并学习如何调试我们的Qt项目：
- en: Debugging techniques
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试技术
- en: Debuggers supported by Qt
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Qt支持的调试器
- en: Unit testing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试
- en: Let's get started.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。
- en: Debugging techniques
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试技术
- en: Technical issues occur all the time during the development process. To tackle
    these problems, we need to find out all these issues and solve them before releasing
    our application to the users, so as not to affect the company/team's reputation.
    The method used to look for technical issues is called debugging. In this section,
    we will look at the common debugging techniques used by professionals to ensure
    their program is reliable and of a high quality.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发过程中经常会出现技术问题。为了解决这些问题，我们需要在将应用程序发布给用户之前找出所有这些问题并解决它们，以免影响公司/团队的声誉。用于查找技术问题的方法称为调试。在本节中，我们将介绍专业人士常用的常见调试技术，以确保他们的程序可靠且质量高。
- en: Identifying the problem
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 识别问题
- en: 'The most important thing when it comes to debugging your program, regardless
    of programming language or platform, is to know which part of your code is causing
    the problem. There are several ways you can identify your problematic code:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在调试程序时，无论编程语言或平台如何，最重要的是知道代码的哪一部分导致了问题。您可以通过几种方式来识别问题代码：
- en: Ask the user at which point the bug happened; for example, which button was
    pressed, what were the steps leading to the crash, and so on.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 询问用户出现错误的位置；例如，按下了哪个按钮，导致崩溃的步骤是什么，等等。
- en: Comment away part of your code, then build and run the program again to check
    whether the problem still occurs or not. If it still does, continue to comment
    out more code until you find the problematic line of code.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注释掉代码的一部分，然后重新构建和运行程序，以检查问题是否仍然存在。如果问题仍然存在，继续注释更多的代码，直到找到问题所在的代码行。
- en: Use the built-in debugger to check for the variable changes within your targeted
    function by setting a data breakpoint. You can easily spot if one of your variables
    has changed to an unexpected value or an object pointer has become an undefined
    pointer.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用内置调试器通过设置数据断点来检查目标函数中的变量更改。您可以轻松地发现您的变量是否已更改为意外值，或者对象指针是否已变为未定义指针。
- en: Make sure all the libraries that you included in the installer for your users
    have matching version numbers with the ones used in your project.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保您为用户安装程序中包含的所有库与项目中使用的库具有匹配的版本号。
- en: Print variables using QDebug
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用QDebug打印变量
- en: You can also print out the value of a variable to the application output window,
    using the `QDebug` class. `QDebug` is quite similar to `std::cout` in the standard
    library, but the advantage of using `QDebug` is that since it is part of Qt, it
    supports Qt classes out of the box, and it is able to output its value without
    the need for any conversion.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`QDebug`类将变量的值打印到应用程序输出窗口。`QDebug`与标准库中的`std::cout`非常相似，但使用`QDebug`的优势在于，由于它是Qt的一部分，它支持Qt类，而且能够在不需要任何转换的情况下输出其值。
- en: 'To enable `QDebug`, we must first include its header:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用`QDebug`，我们必须首先包含其头文件：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After that, we can call `qDebug()` to print out variables to the application
    output window:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们可以调用`qDebug()`将变量打印到应用程序输出窗口：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The result will look like this:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将如下所示：
- en: '![](img/085d30a2-eaa0-43d5-8887-4df07ebf0ed9.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/085d30a2-eaa0-43d5-8887-4df07ebf0ed9.png)'
- en: By using `QDebug`, we will be able to check if our function is running correctly.
    You can just comment out the particular line of code that contains `qDebug()`
    after you have finished checking for the problem.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`QDebug`，我们将能够检查我们的函数是否正常运行。在检查完问题后，您可以注释掉包含`qDebug()`的特定代码行。
- en: Setting breakpoints
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置断点
- en: 'Setting a breakpoint is another good way to debug your program. When you right-click
    on the line number of your script in Qt Creator, you will get a pop-up menu with
    three options, which you can see in the following screenshot:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 设置断点是调试程序的另一种好方法。当您在Qt Creator中右键单击脚本的行号时，将会弹出一个包含三个选项的菜单，您可以在下面的截图中看到：
- en: '![](img/6ee7547c-f999-4056-b55d-41a1ea786a99.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6ee7547c-f999-4056-b55d-41a1ea786a99.png)'
- en: 'The first option is called Set Breakpoint at Line..., which lets you set a
    breakpoint at a specific line on your script. A red dot icon will appear beside
    the line number once you have created a breakpoint:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个选项称为在行处设置断点...，允许您在脚本的特定行上设置断点。一旦创建了断点，该行号旁边将出现一个红色圆点图标：
- en: '![](img/59956e75-08f7-4699-8bd7-2d45b6d49ee0.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/59956e75-08f7-4699-8bd7-2d45b6d49ee0.png)'
- en: 'The second option is called Set Message Tracepoint at Line..., which prints
    a message when the program reaches this particular line of code. An eye icon will
    appear beside the line number once you have created a breakpoint:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个选项称为在行处设置消息跟踪点...，当程序到达特定代码行时打印消息。一旦创建了断点，该行号旁边将出现一个眼睛图标：
- en: '![](img/488f3bb1-e9de-42ac-8600-e4b592256270.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/488f3bb1-e9de-42ac-8600-e4b592256270.png)'
- en: 'The third option is Toggle Bookmark, which lets you set a bookmark for your
    own reference. Let''s create a function called `test()` to try out the breakpoint:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个选项是切换书签，允许您为自己设置书签。让我们创建一个名为`test()`的函数来尝试断点：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'After that, we call the `test()` function at the `MainWindow` constructor:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们在`MainWindow`构造函数中调用`test()`函数：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then, press the start debug button located at the bottom left of your Qt Creator
    window:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，按下位于Qt Creator窗口左下角的开始调试按钮：
- en: '![](img/dc999d58-3ca2-4a24-91b9-0474314d3908.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dc999d58-3ca2-4a24-91b9-0474314d3908.png)'
- en: 'You may get an error message that looks like this:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会收到类似于这样的错误消息：
- en: '![](img/d8c0529c-a614-491e-ac8f-0089a0b6a7c5.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d8c0529c-a614-491e-ac8f-0089a0b6a7c5.png)'
- en: In this case, make sure your project kit has a debugger linked to it. If this
    error still occurs, close your Qt Creator, go to your project folder and delete
    the `.pro.user` file. After that, open up your project with Qt Creator. Qt Creator
    will reconfigure your project again, and the debug mode should work by now.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，请确保您的项目工具包已连接到调试器。如果仍然出现此错误，请关闭Qt Creator，转到您的项目文件夹并删除“.pro.user”文件。然后，用Qt
    Creator打开您的项目。Qt Creator将重新配置您的项目，并且调试模式现在应该可以工作了。
- en: 'Let''s add two breakpoints to our code and run it. Once our program has been
    started, we will see a yellow arrow appearing on top of the first red dot:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们给我们的代码添加两个断点并运行它。一旦我们的程序启动，我们将看到一个黄色箭头出现在第一个红点的顶部：
- en: '![](img/d5b0fc54-92ce-48ef-a6e6-7ce0af651b97.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d5b0fc54-92ce-48ef-a6e6-7ce0af651b97.png)'
- en: 'This means that the debugger has stopped at the first breakpoint. The Locals
    and Expression window, which is located on the right-hand side of your Qt Creator,
    will now display the variable along with its value and type here:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着调试器已经停在了第一个断点处。现在，位于Qt Creator右侧的本地和表达式窗口将显示变量及其值和类型：
- en: '![](img/401c5d9f-2626-4871-ac40-f7bba1272cab.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/401c5d9f-2626-4871-ac40-f7bba1272cab.png)'
- en: 'In the preceding image, you can see the value is still at 100 because at this
    point the minus operation has not  yet been run. The next thing we need to do
    is to click on the Step Into button on top of the Stack window located at the
    bottom of your Qt Creator:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在上图中，您可以看到值仍然为100，因为此时减法操作尚未运行。接下来，我们需要做的是单击位于Qt Creator底部的堆栈窗口顶部的“步入”按钮：
- en: '![](img/fb1565d7-beb1-4642-ae50-737e7795057c.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fb1565d7-beb1-4642-ae50-737e7795057c.png)'
- en: 'After that, the debugger will move on to the next breakpoint, and here we can
    see the value has decreased to 90 as expected:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，调试器将移动到下一个断点，这里我们可以看到值已经减少到了90，正如预期的那样：
- en: '![](img/fca1e49a-7ed7-4b7b-b17e-56aed8a01921.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fca1e49a-7ed7-4b7b-b17e-56aed8a01921.png)'
- en: You can use this method to easily examine your application. To delete a breakpoint,
    you just have to click on the red dot icon again.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用这种方法轻松检查您的应用程序。要删除断点，只需再次单击红点图标。
- en: Do note that you must run this in the debug mode. This is because when compiling
    in debug mode, additional debugging symbols will be embedded into your application
    or library that allow your debugger to gain access to information from the source
    code of the binary, such as the name of identifiers, variables, and routines.
    This is also the reason why your application or library will be much bigger in
    file size if compiled in debug mode.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您必须在调试模式下运行此操作。这是因为在调试模式下编译时，将额外的调试符号嵌入到您的应用程序或库中，使您的调试器能够访问来自二进制源代码的信息，例如标识符、变量和例程的名称。这也是为什么在调试模式下编译的应用程序或库的文件大小会更大的原因。
- en: Debuggers supported by Qt
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Qt支持的调试器
- en: 'There are different types of debuggers that are supported by Qt. Depending
    on the platform and compiler you''re running for your project, the debugger used
    will also be different. The following is the list of debuggers commonly supported
    by Qt:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Qt支持不同类型的调试器。根据您的项目运行的平台和编译器，使用的调试器也会有所不同。以下是Qt通常支持的调试器列表：
- en: '**Windows (MinGW):** GDB (GNU Debugger)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows (MinGW):** GDB (GNU调试器)'
- en: '**Windows (MSVC):** CDB (Debugging Tools for Windows)'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows (MSVC):** CDB (Windows调试工具)'
- en: '**macOS**: LLDB (LLVM Debugger), FSF GDB (Experimental)'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**macOS**: LLDB (LLVM调试器), FSF GDB (实验性)'
- en: '**Linux**: GDB, LLDB (Experimental)'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Linux**: GDB, LLDB (实验性)'
- en: '**Unix** (FreeBSD, OpenBSD, etc.): GDB'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Unix** (FreeBSD, OpenBSD, 等): GDB'
- en: '**Android**: GDB'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Android**: GDB'
- en: '**iOS**: LLDB'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**iOS**: LLDB'
- en: Debugging for PC
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PC的调试
- en: With **GDB (GNU Debugger),** there is no need for any manual setup if you're
    using MinGW compiler on Windows, as it usually comes together with your Qt installation.
    If you're running other operating systems such as Linux, you may need to install
    it manually before linking it up with your Qt Creator. Qt Creator detects the
    existence of GDB and links it with your project automatically. If it doesn't,
    you can easily find the GDB executable located in your Qt directory and link it
    by yourself.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 对于**GDB (GNU调试器)**，如果您在Windows上使用MinGW编译器，则无需进行任何手动设置，因为它通常与您的Qt安装一起提供。如果您运行其他操作系统，如Linux，则可能需要在将其与Qt
    Creator链接之前手动安装它。Qt Creator会自动检测GDB的存在并将其与您的项目链接起来。如果没有，您可以轻松地在Qt目录中找到GDB可执行文件并自行链接。
- en: '**CDB (Debugging Tools for Windows)** on the other hand, needs to be installed
    manually on your Windows machine. Do note that Qt doesn''t support the built-in
    debugger of Visual Studio. Therefore, you need to install the CDB debugger separately
    by selecting an optional component called debugging tools for windows while installing
    the Windows SDK. Qt Creator also normally would recognize the existence of CDB
    and put it on the debugger list under the Debuggers Options page. You can go to Tools | Options | Build
    and Run | Debuggers to look for the settings as seen in the following screenshot:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，需要在Windows机器上手动安装**CDB (Windows调试工具)**。请注意，Qt不支持Visual Studio的内置调试器。因此，您需要通过在安装Windows
    SDK时选择一个名为“调试工具”的可选组件来单独安装CDB调试器。Qt Creator通常会识别CDB的存在，并将其放在调试器选项页面下的调试器列表中。您可以转到“工具”|“选项”|“构建和运行”|“调试器”查找设置，如下面的屏幕截图所示：
- en: '![](img/9b474cf0-8099-4386-860c-4ef15f5e5e40.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9b474cf0-8099-4386-860c-4ef15f5e5e40.png)'
- en: Debugging for Android devices
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 针对Android设备的调试
- en: Debugging for Android devices is slightly more complicated than for a PC. You
    must install all the necessary packages for Android development, such as JDK (version
    6 or later), Android SDK, and Android NDK. Then you also need the Android Debug
    Bridge (ADB)driver on the Windows platform to enable USB debugging, since the
    default USB driver on Windows does not allow for debugging.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 针对Android设备的调试比PC稍微复杂一些。您必须安装所有必要的Android开发包，如JDK（6或更高版本）、Android SDK和Android
    NDK。然后，您还需要在Windows平台上安装Android调试桥（ADB）驱动程序，以启用USB调试，因为Windows上的默认USB驱动程序不允许调试。
- en: Debugging for macOS and iOS
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: macOS和iOS的调试
- en: As for macOS and iOS, the debugger used is **LLDB (LLVM Debugger)**, which comes
    with Xcode by default. Qt Creator will also recognize its existence and link it
    with your project automatically.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 至于macOS和iOS，使用的调试器是**LLDB（LLVM调试器）**，它默认随Xcode一起提供。Qt Creator也会自动识别其存在并将其与您的项目链接起来。
- en: Every debugger is a little different from another and may behave differently
    on Qt Creator. You can also run the non-GDB debuggers on their respective IDE
    (Visual Studio, XCode, and so on), if you are familiar with those tools and know
    what you're doing.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 每个调试器都与另一个略有不同，并且在Qt Creator上可能表现不同。如果您熟悉这些工具并知道自己在做什么，还可以在其各自的IDE（Visual Studio、XCode等）上运行非GDB调试器。
- en: 'If you need to add other debuggers to your project, you can go over to Tools | Options | Build
    and Run | Kits and click Clone to copy an existing kit. Then, under the Debuggers tab,
    click on the Add button to add a new debugger selection:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要向项目添加其他调试器，可以转到“工具”|“选项”|“构建和运行”|“工具包”，然后单击“克隆”以复制现有工具包。然后，在“调试器”选项卡下，单击“添加”按钮以添加新的调试器选择：
- en: '![](img/471d3646-ff16-4764-a526-92ea5bf8f6b4.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/471d3646-ff16-4764-a526-92ea5bf8f6b4.png)'
- en: In the Name field, type in the descriptive name for the debugger so you can
    easily remember its purpose. Then, specify the path to the debugger binary in
    the Path field so that Qt Creator knows which executable to run when you start
    the debugging process. Other than that, the Type and Version fields are used by
    Qt Creator to identify the types of version of the debugger. In addition, Qt Creator
    shows the ABI version that will be used on embedded devices in the ABIs field.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在“名称”字段中，输入调试器的描述性名称，以便您可以轻松记住其目的。然后，在“路径”字段中指定调试器二进制文件的路径，以便Qt Creator知道在启动调试过程时要运行哪个可执行文件。除此之外，“类型”和“版本”字段由Qt
    Creator用于识别调试器的类型和版本。此外，Qt Creator还在“ABIs”字段中显示将在嵌入式设备上使用的ABI版本。
- en: 'To learn more about the in-depth information on how to set up different debuggers
    in Qt, please visit the following link:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何在Qt中设置不同调试器的详细信息，请访问以下链接：
- en: '[http://doc.qt.io/qtcreator/creator-debugger-engines.html.](http://doc.qt.io/qtcreator/creator-debugger-engines.html)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://doc.qt.io/qtcreator/creator-debugger-engines.html.](http://doc.qt.io/qtcreator/creator-debugger-engines.html)'
- en: Unit testing
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试
- en: Unit testing is an automated process for testing an individual module, class,
    or method in your application. Unit testing finds problems early in the development
    cycle. This includes both bugs in the programmer's implementation and flaws or
    missing parts of the specification for the unit.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试是一个自动化的过程，用于测试应用程序中的单个模块、类或方法。单元测试可以在开发周期的早期发现问题。这包括程序员实现中的错误和单元规范中的缺陷或缺失部分。
- en: Unit testing in Qt
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Qt中的单元测试
- en: 'Qt comes with a built-in unit testing module, which we can use by adding the
    `testlib` keyword to our project file (`.pro`):'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Qt带有一个内置的单元测试模块，我们可以通过在项目文件（.pro）中添加`testlib`关键字来使用它：
- en: '[PRE4]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'After that, add the following header to our source code:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，将以下标题添加到我们的源代码中：
- en: '[PRE5]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then, we can start testing our code. We must declare our test functions as
    private slots. Other than that, the class must also inherit from the `QOBject`
    class. For example, I created two text functions called `testString()` and `testGui()`,
    like so:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以开始测试我们的代码。我们必须将测试函数声明为私有槽。除此之外，该类还必须继承自`QOBject`类。例如，我创建了两个文本函数，分别称为`testString()`和`testGui()`，如下所示：
- en: '[PRE6]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The function definitions look something like this:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 函数定义看起来像这样：
- en: '[PRE7]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We used some of the macros provided by the `QTest` class, such as `QVERIFY`,
    `QCOMPARE`, and so on, to evaluate the expression passed as its argument. If the
    expression evaluates to `true`, the execution of the test function continues.
    Otherwise, a message describing the failure is appended to the test log, and the
    test function stops executing.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`QTest`类提供的一些宏，如`QVERIFY`、`QCOMPARE`等，来评估作为其参数传递的表达式。如果表达式求值为`true`，则测试函数的执行将继续。否则，将向测试日志附加描述失败的消息，并且测试函数停止执行。
- en: We also used `QTest::keyClicks()` to simulate mouse clicking in our application.
    In the earlier example, we simulate clicking on the line edit widget on our main
    window widget. Then, we input a line of text to the line edit and use `QCOMPARE`
    macro to test if the text has been correctly inserting into the line edit widget.
    If anything wrong happened, Qt will show us the problem in the application output
    window.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用了`QTest::keyClicks()`来模拟鼠标在我们的应用程序中的点击。在前面的示例中，我们模拟了在主窗口小部件上的行编辑小部件上的点击。然后，我们输入一行文本到行编辑中，并使用`QCOMPARE`宏来测试文本是否已正确插入到行编辑小部件中。如果出现任何问题，Qt将在应用程序输出窗口中显示问题。
- en: 'After that, comment out our `main()` function and use the `QTEST_MAIN()` function
    instead to start testing our `MainWindow` class:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，注释掉我们的`main()`函数，而是使用`QTEST_MAIN()`函数来开始测试我们的`MainWindow`类：
- en: '[PRE8]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If we build and run our project now, we should be getting similar results as
    follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在构建和运行我们的项目，我们应该会得到类似以下的结果：
- en: '[PRE9]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: There are many more macros that you can use to test your application.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多宏可以用来测试应用程序。
- en: 'For more information, please visit the following link:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，请访问以下链接：
- en: '[http://doc.qt.io/qt-5/qtest.html#macros](http://doc.qt.io/qt-5/qtest.html#macros)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://doc.qt.io/qt-5/qtest.html#macros](http://doc.qt.io/qt-5/qtest.html#macros)'
- en: Summary
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have learned how to identify technical issues in our Qt
    project by using multiple debugging techniques. Other than that, we have also
    learned about different debuggers that are supported by Qt on different operating
    systems. Finally, we also learned how to automate some of the debugging steps
    through unit testing.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们学习了如何使用多种调试技术来识别Qt项目中的技术问题。除此之外，我们还了解了Qt在不同操作系统上支持的不同调试器。最后，我们还学会了如何通过单元测试自动化一些调试步骤。
- en: That's it! We have reached the end of this book. Hopefully, you have found this
    book useful on learning how to build your own applications from scratch using
    Qt. You can look for all the source code on GitHub. I wish you all the best!
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！我们已经到达了本书的结尾。希望你在学习如何使用Qt从头开始构建自己的应用程序时找到了这本书的用处。你可以在GitHub上找到所有的源代码。祝你一切顺利！
