- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Next Steps and Additional Resources
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下一步和额外资源
- en: Congratulations! The projects you’ve built in this book have started you on
    the road to becoming a Godot expert. However, you’ve only just scratched the surface
    of what’s possible in Godot. As you become more proficient and the sizes of your
    projects grow, you’ll need to know how to find solutions to your problems, how
    to distribute your games so they can be played, and even how to extend the engine
    yourself.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你在本书中构建的项目已经让你走上了成为Godot专家的道路。然而，你只是刚刚触及了Godot可能性的表面。随着你技能的提高和项目规模的扩大，你需要知道如何找到解决问题的方法，如何分发你的游戏以便它们可以被玩，甚至如何自己扩展引擎。
- en: 'In this chapter, you’ll learn about the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习以下主题：
- en: How to effectively use Godot’s built-in documentation
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何有效地使用Godot的内置文档
- en: Using **Git** to back up and manage your project files
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**Git**备份和管理你的项目文件
- en: An overview of some of the vector math concepts you’ll encounter in most game
    projects
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 概述你在大多数游戏项目中会遇到的一些矢量数学概念
- en: Using **Blender**, an open source 3D modeling application, to make 3D objects
    you can use in Godot
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用开源的3D建模应用程序**Blender**来制作可以在Godot中使用的3D对象
- en: Exporting projects to run on other platforms
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将项目导出以在其他平台上运行
- en: An introduction to shaders
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 着色器简介
- en: Using other programming languages in Godot
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Godot中使用其他编程语言
- en: Community resources where you can get help
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在其中获得帮助的社区资源
- en: Becoming a Godot contributor
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成为Godot的贡献者
- en: This chapter will help you move on from the book’s projects and begin making
    your own games. You can use the information here to find additional resources
    and guidance, as well as some more advanced topics that didn’t fit in with the
    beginner projects covered earlier.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将帮助你从本书的项目中前进，并开始制作你自己的游戏。你可以使用这里的信息来查找额外的资源和指导，以及一些更高级的主题，这些主题不适合之前涵盖的初学者项目。
- en: Using Godot’s documentation
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Godot的文档
- en: 'Learning Godot’s API can seem overwhelming at first. How can you learn about
    all the different nodes and the properties and methods each one contains? Fortunately,
    Godot’s built-in documentation is there to help you. Develop the habit of using
    it often: it will help you find things when you’re learning, but it’s also a great
    way to quickly look up a method or property for reference once you know your way
    around.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 最初学习Godot的API可能会感到令人不知所措。你如何了解所有不同的节点以及每个节点包含的属性和方法？幸运的是，Godot的内置文档就在那里帮助你。养成经常使用它的习惯：它将帮助你学习时找到东西，但这也是在你熟悉了之后快速查找方法或属性进行参考的好方法。
- en: Leveling up your skills
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 提升你的技能水平
- en: Learning to effectively use API documentation is the number one thing you can
    do to dramatically boost your skill level. Keep a docs tab open in your web browser
    while you’re working and reference it often, looking up the nodes and/or functions
    you’re using.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 学习有效地使用API文档是你可以做的第一件事，以显著提高你的技能水平。在你工作时，保持网页浏览器中的文档标签页打开，并经常参考它，查找你正在使用的节点和/或函数。
- en: 'When you are in the **Script** tab of the editor, you’ll see the following
    buttons in the upper-right corner:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在编辑器的**脚本**标签页时，你会在右上角看到以下按钮：
- en: '![Figure 7.1: Documentation buttons](img/B19289_07_01.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图7.1：文档按钮](img/B19289_07_01.jpg)'
- en: 'Figure 7.1: Documentation buttons'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.1：文档按钮
- en: The `position`, you can take a look at the `Vector2` document and see all of
    the functions available for that data type.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`position`，你可以查看`Vector2`文档，看看该数据类型所有可用的函数。
- en: 'The other button allows you to view the documentation directly in the Godot
    editor. Clicking **Search Help** lets you search for any method or property name.
    The search is *smart*, meaning you can type part of a word and the results will
    be narrowed down as you type. Take a look at the following screenshot:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个按钮允许你直接在Godot编辑器中查看文档。点击**搜索帮助**可以让你搜索任何方法或属性名称。搜索是**智能的**，这意味着你可以输入单词的一部分，随着你输入，结果会缩小。看看下面的截图：
- en: '![Figure 7.2: Searching for help](img/B19289_07_02.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图7.2：搜索帮助](img/B19289_07_02.jpg)'
- en: 'Figure 7.2: Searching for help'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.2：搜索帮助
- en: When you find the property or method you’re looking for, click **Open** and
    the documentation reference for that node will appear.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当你找到你正在寻找的属性或方法时，点击**打开**，该节点的文档引用将出现。
- en: Reading the API documentation
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 阅读API文档
- en: 'When you’ve found the documentation for the node you want, you’ll see that
    it follows a common format, with the name of the node at the top followed by several
    subsections of information, as shown in the following screenshot:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当你找到了你想要的节点文档时，你会发现它遵循一个常见的格式，顶部是节点的名称，然后是几个信息子节，如下面的截图所示：
- en: '![Figure 7.3: API documentation](img/B19289_07_03.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图7.3：API文档](img/B19289_07_03.jpg)'
- en: 'Figure 7.3: API documentation'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.3：API文档
- en: 'At the top of the page is a list called `Object`, which is Godot’s base object
    class. For example, `Area2D` has the following inheritance chain:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 页面顶部有一个名为`Object`的列表，这是Godot的基本对象类。例如，`Area2D`有以下的继承链：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This lets you quickly see what other properties this type of object may have.
    For example, an `Area2D` node has a `position` property because that property
    is defined by `Node2D` – any node that inherits from `Node2D` will also have a
    position in 2D space. You can click on any of the node names to jump to that node’s
    documentation.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这让你可以快速查看此类对象可能具有的其他属性。例如，`Area2D`节点有一个`position`属性，因为该属性由`Node2D`定义——任何从`Node2D`继承的节点也将具有2D空间中的位置。你可以点击任何节点名称来跳转到该节点的文档。
- en: You can also see a list of what node types, if any, inherit from that particular
    node, as well as a general description of the node. Below that, you can see the
    member variables and methods of the node. The names of most methods and types
    are links, so you can click on any item to read more about it. Note that these
    names and descriptions are the same ones that show when you hover over a property
    in the Inspector.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以看到继承自该特定节点的节点类型列表（如果有的话），以及节点的一般描述。下面，你可以看到节点的成员变量和方法。大多数方法和类型名称是链接，因此你可以点击任何项目来了解更多信息。请注意，这些名称和描述与你在检查器上悬停时显示的相同。
- en: Develop the habit of consulting the API documentation regularly as you’re working.
    You’ll find that you will quickly begin to develop a stronger understanding of
    how everything works together.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在工作过程中养成定期查阅API文档的习惯。你会发现你将很快开始更深入地理解所有这些是如何协同工作的。
- en: Version control – using Git with Godot
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 版本控制——使用Git与Godot一起使用
- en: It happens to everyone – at a certain point, you’ll make a mistake. You’ll accidentally
    delete a file or just change some code in a way that breaks everything, but you
    can’t figure out how to get back to the working version.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这对每个人来说都是常态——在某个时刻，你会犯错误。你可能会不小心删除一个文件，或者以某种方式更改代码，导致一切崩溃，但你无法找出如何回到工作版本。
- en: The solution to this problem is **version control software** (**VCS**). The
    most popular VCS, used by developers all over the world, is Git. When you use
    Git with your projects, every change you make is tracked, allowing you to “rewind”
    time at any point and recover from unwanted changes.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题的解决方案是**版本控制软件**（**VCS**）。全球开发者普遍使用的最流行的VCS是Git。当你使用Git与你的项目一起工作时，你做的每一个更改都会被跟踪，这让你可以在任何时间点“倒退”时间并从不受欢迎的更改中恢复。
- en: Fortunately, Godot is very VCS-friendly. All the content of your game is kept
    in the project folder. Scenes, scripts, and resources are all saved in a human-readable
    text format that is easy for Git to track.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Godot非常友好地支持VCS。你的游戏内容全部保存在项目文件夹中。场景、脚本和资源都以人类可读的文本格式保存，这对于Git跟踪来说很容易。
- en: Git is typically used via a command-line interface, but there are graphical
    clients you can use as well. There is also a Git plugin available in Godot’s **AssetLib**
    that you can try.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Git通常通过命令行界面使用，但你也可以使用图形客户端。Godot的**AssetLib**中也有一个Git插件，你可以尝试使用。
- en: 'In any case, the basic workflow can be broken down into two steps:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，基本的工作流程可以分解为两个步骤：
- en: '**Add** the files you want to track.'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**添加**你想要跟踪的文件。'
- en: '**Commit** the changes you have made.'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**提交**你所做的更改。'
- en: 'In addition, you can use a website such as GitHub or GitLab to store and share
    your Git-based projects. This is a common way that developers collaborate on projects
    – indeed, the entire Godot source code is stored and managed on GitHub. If you’re
    doing this, you’ll have a third step: **pushing** your committed changes to the
    remote repository.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你还可以使用GitHub或GitLab等网站来存储和分享你的基于Git的项目。这是开发者协作项目的常见方式——实际上，Godot的整个源代码都存储和管理在GitHub上。如果你这样做，你将有一个第三步：**推送**你提交的更改到远程仓库。
- en: Most developers use the command-line version of Git, which you can install from
    your OS package manager or download directly from [https://git-scm.com/downloads](https://git-scm.com/downloads).
    There are also many GUI interfaces, such as Git Kraken or GitHub Desktop.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数开发者使用 Git 的命令行版本，你可以从你的操作系统包管理器安装或直接从 [https://git-scm.com/downloads](https://git-scm.com/downloads)
    下载。还有许多 GUI 界面，如 Git Kraken 或 GitHub Desktop。
- en: 'The details of using Git are beyond the scope of this book, but here is an
    example of the most basic usage: creating and updating a repository to save your
    changes. All of these steps will be done using your computer’s terminal or command-line
    interface:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Git 的使用细节超出了本书的范围，但这里有一个最基本使用的例子：创建和更新仓库以保存你的更改。所有这些步骤都将使用你的计算机终端或命令行界面完成：
- en: 'Create a new Git repository in your project folder. Navigate to the folder
    and type the following:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的项目文件夹中创建一个新的 Git 仓库。导航到该文件夹，并输入以下命令：
- en: '[PRE1]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After working on your project, add the new and/or updated files to the repository
    by typing the following:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在完成你的项目后，通过输入以下命令将新文件或更新后的文件添加到仓库中：
- en: '[PRE2]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Commit your changes, creating a “checkpoint” in time that you can rewind to
    if necessary:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交你的更改，创建一个“时间点”的“检查点”，如果需要，可以回滚到该点：
- en: '[PRE3]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Repeat steps 2 and 3 every time you add a new feature or make changes to your
    project.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 每次添加新功能或对项目进行更改时，都要重复步骤 2 和 3。
- en: Make sure to type something descriptive in the commit message. If you need to
    rewind to a certain point in your project’s history, it will help you identify
    the change you are looking for.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在提交信息中输入一些描述性的内容。如果你需要回滚到项目历史中的某个特定点，这将帮助你识别你正在寻找的更改。
- en: 'There’s a lot more to Git than just the above. You can create branches – multiple
    versions of your game’s code, collaborate with others making changes at the same
    time, and much more. Here are some suggestions of where you can learn more about
    how to use Git with your projects:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Git 的内容远不止上述内容。你可以创建分支——游戏代码的多个版本，与他人协作同时进行更改，等等。以下是一些关于如何使用 Git 与你的项目学习的建议：
- en: '[https://docs.github.com/en/get-started/quickstart/git-and-github-learning-resources](https://docs.github.com/en/get-started/quickstart/git-and-github-learning-resources)'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.github.com/en/get-started/quickstart/git-and-github-learning-resources](https://docs.github.com/en/get-started/quickstart/git-and-github-learning-resources)'
- en: '*Mastering Git* (book) by Jakub Narębski'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*掌握 Git*（书籍）作者：Jakub Narębski'
- en: It may seem hard at first – Git has a difficult learning curve – but it is a
    skill that will serve you well, and you’ll really appreciate it the first time
    it saves you from a disaster! You may even find that Git is helpful with your
    non-game projects as well.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 起初可能看起来很难——Git 有一个难以学习的曲线——但它是一项将为你服务的技能，你会在第一次从灾难中幸存时真正感激它！你甚至可能会发现 Git 对你的非游戏项目也有帮助。
- en: In the next section, you’ll see how to use the popular Blender modeling tool
    to create 3D objects and use them in Godot.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将了解如何使用流行的 Blender 建模工具创建 3D 对象，并在 Godot 中使用它们。
- en: Using Blender with Godot
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Blender 与 Godot
- en: Blender is a very popular open source 3D modeling and animation program (it
    does a lot of other things too). If you’re planning on making a 3D game and you
    need to make items, characters, and environments for your game, Blender is probably
    your best option for doing so.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Blender 是一个非常流行的开源 3D 建模和动画程序（它还能做很多其他事情）。如果你计划制作 3D 游戏，并且需要为你的游戏制作物品、角色和环境，Blender
    可能是你实现这一目标的最佳选择。
- en: The most common workflow is to export glTF files from Blender and import them
    into Godot. This is a stable and reliable workflow and will work well in most
    situations.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的流程是从 Blender 导出 glTF 文件并将其导入到 Godot 中。这是一个稳定且可靠的流程，在大多数情况下都能很好地工作。
- en: 'When you export a glTF file, you have two options: glTF binary (`.glb`) and
    glTF text (`.gltf`). The binary version is more compact and is therefore the preferred
    format, but either will work fine.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当你导出 glTF 文件时，你有两种选择：glTF 二进制格式（`.glb`）和 glTF 文本格式（`.gltf`）。二进制版本更紧凑，因此是首选格式，但任何一种格式都可以正常工作。
- en: Import hints
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导入提示
- en: 'It’s common to import meshes from Blender and then make modifications such
    as adding collisions or removing unneeded nodes. To simplify this, you can add
    suffixes to the names of your objects to give Godot a hint about how you want
    them to be processed on import. Here are some examples:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Blender 导入网格并进行修改，如添加碰撞或删除不必要的节点，这是很常见的。为了简化这个过程，你可以在对象的名称后添加后缀，以给 Godot 提供关于导入时如何处理对象的提示。以下是一些示例：
- en: '`-noimp` – These objects will be removed from the imported scene.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-noimp` – 这些对象将从导入的场景中移除。'
- en: '`-col`, `-convcol`, `-colonly` – These options tell Godot to make a collision
    shape from the named mesh. The first two options make a child triangle mesh or
    convex polygon shape, respectively. The `-colonly` option will remove the mesh
    entirely and replace it with a `StaticBody3D` collision.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-col`、`-convcol`、`-colonly` – 这些选项告诉 Godot 从命名的网格中创建一个碰撞形状。前两个选项分别创建一个子三角形网格或凸多边形形状。`-colonly`
    选项将完全删除网格，并用 `StaticBody3D` 碰撞体替换它。'
- en: '`-rigid` – This object will be imported as a `RigidBody3D`.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-rigid` – 此对象将以 `RigidBody3D` 的形式导入。'
- en: '`-loop` – Blender animations with this suffix will be imported with the loop
    option enabled.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-loop` – 使用此后缀的 Blender 动画将以启用循环选项的方式导入。'
- en: See the documentation for more details on all the possible import suffixes.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅文档以获取有关所有可能导入后缀的更多详细信息。
- en: Using blend files
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 blend 文件
- en: 'With Godot 4, you have an additional option: importing `.blend` files directly
    into your Godot project. In order to use this feature, you need to have Blender
    installed on the same computer you’re using for Godot.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Godot 4 中，你还有一个额外的选项：直接将 `.blend` 文件导入到你的 Godot 项目中。为了使用此功能，你需要在同一台安装 Godot
    的计算机上安装 Blender。
- en: To set it up, open **Editor Settings** and look under **FileSystem** | **Import**.
    Here, you can set the path where you’ve installed Blender.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置它，请打开 **编辑器设置** 并在 **文件系统** | **导入** 下查找。在这里，你可以设置 Blender 的安装路径。
- en: '![Figure 7.4: Setting up Blender support](img/B19289_07_04.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.4：设置 Blender 支持](img/B19289_07_04.jpg)'
- en: 'Figure 7.4: Setting up Blender support'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.4：设置 Blender 支持
- en: Click the folder icon to browse to your Blender location. Once you’ve set this
    value, you can drop your `.blend` files directly into your Godot project folder.
    This can make prototyping and iterating your designs much faster. You can open
    Blender, save a change to the design, and then when you tab back to Godot, you’ll
    instantly see it updated.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 点击文件夹图标浏览到你的 Blender 位置。一旦设置了这个值，你就可以直接将 `.blend` 文件拖放到你的 Godot 项目文件夹中。这可以使原型设计和迭代设计变得更快。你可以打开
    Blender，保存对设计的更改，然后当你切换回 Godot 时，你会立即看到它已更新。
- en: Blender is an important tool to learn if you plan on making 3D games. Because
    of its open source nature, it’s a great fit for working with Godot. While its
    learning curve can be challenging, investing time in learning it will give you
    a huge benefit when designing and building 3D games.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你计划制作 3D 游戏，学习 Blender 是一个重要的工具。由于其开源性质，它非常适合与 Godot 一起工作。虽然它的学习曲线可能具有挑战性，但投入时间学习它将在设计和构建
    3D 游戏时给你带来巨大的好处。
- en: Now that you’ve explored how to import external content into your game project,
    the next section will explain how you can export your game to run on other systems,
    such as mobile devices, PCs, or the web.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了如何将外部内容导入到你的游戏项目中，下一节将解释如何将你的游戏导出到其他系统运行，例如移动设备、PC 或网页。
- en: Exporting projects
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导出项目
- en: Eventually, your project will reach the stage where you want to share it with
    the world. Exporting your project means converting it into a package that can
    be run by someone who doesn’t have the Godot editor. You can export your project
    to a number of popular platforms.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，你的项目将达到你想要与世界分享的阶段。导出你的项目意味着将其转换为没有 Godot 编辑器的用户可以运行的包。你可以将你的项目导出到多个流行的平台。
- en: 'Godot supports the following target platforms:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Godot 支持以下目标平台：
- en: Android (mobile)
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android (移动设备)
- en: iOS (mobile)
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: iOS (移动设备)
- en: Linux
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux
- en: macOS
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: macOS
- en: HTML5 (web)
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML5 (网页)
- en: Windows Desktop
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 桌面
- en: UWP (Windows Universal)
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UWP (Windows 全平台)
- en: The requirements for exporting a project vary depending on the platform you
    are targeting. For example, to export to iOS, you must be running on a macOS computer
    with Xcode installed.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 导出项目的需求根据目标平台的不同而有所差异。例如，要导出到 iOS，你必须在一个安装了 Xcode 的 macOS 计算机上运行。
- en: Each platform is unique, and some features of your game may not work on some
    platforms because of hardware limitations, screen size, or other factors. As an
    example, if you wanted to export the *Coin Dash* game for an Android phone, your
    player wouldn’t be able to move because the user wouldn’t have a keyboard! For
    that platform, you would need to include touchscreen controls in your game’s code
    (more about this later).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 每个平台都是独特的，并且由于硬件限制、屏幕尺寸或其他因素，你的游戏的一些功能可能在某些平台上无法工作。例如，如果你想要将 *Coin Dash* 游戏导出到
    Android 手机上，你的玩家将无法移动，因为用户没有键盘！对于该平台，你需要在游戏代码中包含触摸屏控制（关于这一点稍后会有更多介绍）。
- en: Every platform is unique, and there are many factors to consider when configuring
    your project for export. Consult the official documentation for the latest instructions
    on exporting to your desired platform.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 每个平台都是独特的，在配置项目以进行导出时需要考虑许多因素。请参阅官方文档，获取有关导出到您希望的平台的最新说明。
- en: Exporting for consoles
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 导出至游戏机
- en: While it’s perfectly possible for Godot games to run on consoles such as Switch
    or Xbox, the process is more complex. Console companies such as Nintendo and Microsoft
    require the developer to sign a contract that includes a secrecy clause. That
    means that, while you can make your game run on the console, you can’t share the
    code you wrote to make it work publicly. If you do plan to release your game on
    a console platform, you’ll either need to do that work yourself or partner with
    a company that has already entered such an agreement.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Godot游戏在Switch或Xbox等游戏机上运行是完全可能的，但这个过程更复杂。任天堂和微软等游戏机公司要求开发者签署包含保密条款的合同。这意味着，虽然你可以让你的游戏在游戏机上运行，但你不能公开分享使它工作的代码。如果你计划在游戏机平台上发布你的游戏，你可能需要自己完成这项工作或与已经签订此类协议的公司合作。
- en: Getting the export templates
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取导出模板
- en: '**Export templates** are versions of Godot that are compiled for each target
    platform but don’t include the editor. Your project will be combined with the
    target platform’s template to create a standalone application.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**导出模板**是针对每个目标平台编译的 Godot 版本，但不包括编辑器。你的项目将与目标平台的模板结合，以创建一个独立的应用程序。'
- en: 'To begin, you must download the export templates. Select **Manage Export Templates**
    from the **Editor** menu:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你必须下载导出模板。从**编辑器**菜单中选择**管理导出模板**：
- en: '![Figure 7.5: Manage Export Templates](img/B19289_07_05.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.5：管理导出模板](img/B19289_07_05.jpg)'
- en: 'Figure 7.5: Manage Export Templates'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.5：管理导出模板
- en: In this window, you can click **Download and Install** to fetch the export templates
    matching the version of Godot you are using. If you’re running multiple versions
    of Godot for some reason, you’ll see the other versions listed in the window.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在此窗口中，你可以点击**下载并安装**以获取与您使用的 Godot 版本匹配的导出模板。如果你出于某种原因正在运行多个版本的 Godot，你将在窗口中看到其他版本。
- en: Export presets
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导出预设
- en: When you’re ready to export your project, click on **Project** | **Export**.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当你准备好导出你的项目时，点击**项目** | **导出**。
- en: '![Figure 7.6: Export settings](img/B19289_07_06.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.6：导出设置](img/B19289_07_06.jpg)'
- en: 'Figure 7.6: Export settings'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.6：导出设置
- en: In this window, you can create **presets** for each platform by clicking **Add…**
    and selecting the platform from the list. You can make as many presets for each
    platform as you wish. For example, you may want to create both “debug” and “release”
    versions of your projects.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在此窗口中，你可以通过点击**添加…**并从列表中选择平台来为每个平台创建**预设**。你可以为每个平台创建尽可能多的预设。例如，你可能想为你的项目创建“调试”和“发布”版本。
- en: Each platform has its own settings and options – too many to describe here.
    The default values are typically good, but you should test them thoroughly before
    distributing the project. Consult the official documentation at [https://docs.godotengine.org/](https://docs.godotengine.org/)
    for details.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 每个平台都有自己的设置和选项——太多无法在此描述。默认值通常很好，但在分发项目之前应该彻底测试它们。有关详细信息，请参阅官方文档[https://docs.godotengine.org/](https://docs.godotengine.org/)。
- en: Exporting
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导出
- en: There are two export buttons at the bottom of the export window. The first button,
    **Export PCK/ZIP…**, will only create a PCK, or packed, version of your project’s
    data. This doesn’t include an executable, so the game can’t be run on its own.
    This method is useful if you need to provide add-ons, updates, or **downloadable
    content** (**DLC**) for your game.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在导出窗口的底部有两个导出按钮。第一个按钮，**导出 PCK/ZIP…**，将仅创建你项目数据的 PCK 或打包版本。这不包括可执行文件，因此游戏不能独立运行。如果你需要为你的游戏提供附加组件、更新或**可下载内容（DLC**），这种方法很有用。
- en: The second button, `exe` for Windows or an .`apk` for Android.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个按钮，Windows上的`exe`或Android上的`.apk`。
- en: '![Figure 7.7: Export dialog](img/B19289_07_07.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.7：导出对话框](img/B19289_07_07.jpg)'
- en: 'Figure 7.7: Export dialog'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.7：导出对话框
- en: In the next dialog, you can choose where to save your exported project. Take
    note of the **Export with Debug** checkbox, which is checked by default. You’ll
    want to disable this when it is time to export the final, released version of
    your game.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个对话框中，你可以选择保存导出项目的位置。请注意，默认勾选的**导出时包含调试**复选框。当导出游戏的最终发布版本时，你将想要禁用此选项。
- en: Exporting for specific platforms
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为特定平台导出
- en: The exact steps and requirements for exporting vary depending on your target
    platform. For example, exporting to desktop platforms (Windows, MacOS, Linux)
    is very straightforward and will work without any additional configuration.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 导出的确切步骤和要求取决于你的目标平台。例如，导出到桌面平台（Windows、MacOS、Linux）非常直接，无需任何额外配置。
- en: 'Exporting on mobile platforms, however, can be more complex. To export for
    Android, for example, you’ll need to install Google’s Android Studio and configure
    it correctly. The detailed requirements can change regularly as mobile platforms
    update, so you should check the Godot documentation at this link for the most
    accurate information: [https://docs.godotengine.org/en/latest/tutorials/export/](https://docs.godotengine.org/en/latest/tutorials/export/)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在移动平台上导出可能更加复杂。例如，为了导出到Android，你需要安装Google的Android Studio并正确配置它。由于移动平台会定期更新，详细要求可能会发生变化，因此你应该在此链接查看Godot文档以获取最准确的信息：[https://docs.godotengine.org/en/latest/tutorials/export/](https://docs.godotengine.org/en/latest/tutorials/export/)
- en: 'Once you’ve configured the platforms you wish to export, the window will look
    like this:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你配置了你希望导出的平台，窗口将看起来像这样：
- en: '![Figure 7.8: Ready to export](img/B19289_07_08.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图7.8：准备导出](img/B19289_07_08.jpg)'
- en: 'Figure 7.8: Ready to export'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.8：准备导出
- en: Godot’s export system is comprehensive and robust. You can manage multiple versions,
    export different features for different platforms, and many other options. While
    it may seem complex at first, remember that the complexity mostly comes from the
    rules of a particular platform. It’s best if you practice with desktop platforms
    first before attempting to work with mobile.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Godot的导出系统全面且稳健。你可以管理多个版本，为不同平台导出不同的功能，以及许多其他选项。虽然一开始可能看起来很复杂，但记住，这种复杂性主要来自特定平台的规则。最好先在桌面平台上练习，然后再尝试与移动平台合作。
- en: In the next section, you’ll learn about how visual effects are implemented using
    a special type of program called a shader.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将了解如何使用一种称为着色器的特殊程序类型来实现视觉效果。
- en: Introduction to shaders
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 着色器简介
- en: A **shader** is a program that is designed to run on the GPU and alters the
    way that objects appear on the screen. Shaders are used extensively in both 2D
    and 3D development to create a variety of visual effects. They are called shaders
    because they were originally used for shading and lighting effects, but today
    they are used for a wide variety of visual effects. Because they run in the GPU
    in *parallel*, they are very fast but also come with some restrictions.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**着色器**是一个设计在GPU上运行的程序，它改变了物体在屏幕上的显示方式。着色器在2D和3D开发中被广泛使用，以创建各种视觉效果。它们被称为着色器，因为它们最初用于着色和光照效果，但今天它们被用于广泛的视觉效果。由于它们在GPU上**并行**运行，因此它们非常快，但也带来了一些限制。'
- en: Learning more
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 学习更多
- en: This section is a very brief introduction to the concept of shaders. For a more
    in-depth understanding, see [https://thebookofshaders.com/](https://thebookofshaders.com/)
    and Godot’s shader documentation at .
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 本节是对着色器概念的简要介绍。要深入了解，请参阅[https://thebookofshaders.com/](https://thebookofshaders.com/)和Godot的着色器文档。
- en: Earlier in this book, when you added a `StandardMaterial3D` to a mesh, you were
    actually adding a shader – one that’s pre-configured and built into Godot. It’s
    great for many common situations, but sometimes you need something more specific,
    and for that, you’ll need to write shader code.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的早期，当你向网格添加`StandardMaterial3D`时，你实际上是在添加一个着色器——一个预先配置并内置到Godot中的着色器。这对于许多常见情况来说很棒，但有时你需要更具体的东西，为此你需要编写着色器代码。
- en: In Godot, you’ll write shaders in a language very similar to GLSL ES 3.0\. If
    you are familiar with C-style languages, you’ll find the syntax very similar.
    If you are not, it may look strange to you at first. See the end of this section
    for links to further resources where you can learn more.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在Godot中，你将使用与GLSL ES 3.0非常相似的语言编写着色器。如果你熟悉C风格的语言，你会发现语法非常相似。如果不熟悉，一开始可能会觉得有些奇怪。请参阅本节末尾的链接，以获取更多学习资源。
- en: 'Shaders in Godot come in several types:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Godot中的着色器有几种类型：
- en: '**spatial** (for 3D rendering)'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**空间**（用于3D渲染）'
- en: '**canvas_item** (for 2D rendering)'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**canvas_item**（用于2D渲染）'
- en: '**particles** (for rendering particle effects)'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**粒子**（用于渲染粒子效果）'
- en: '**sky** (for rendering 3D sky materials)'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**天空**（用于渲染3D天空材质）'
- en: '**fog** (for rendering volumetric fog effects)'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**雾**（用于渲染体积雾效果）'
- en: The first line of your shader must declare which of these types you are writing.
    Typically, this will be automatically filled in for you when you add a shader
    to a particular type of node.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 你的着色器第一行必须声明你正在编写哪种类型。通常，当你将着色器添加到特定类型的节点时，这会自动为你填写。
- en: 'After determining the type of shader, you can then choose what phase(s) of
    the rendering process you want to affect:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 确定着色器类型后，你可以选择你想要影响的渲染过程的哪个阶段：
- en: '**Fragment** shaders are used to set the color of all affected pixels'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**片段**着色器用于设置所有受影响像素的颜色'
- en: '**Vertex** shaders can modify the vertices of a shape or mesh, changing its
    apparent shape'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**顶点**着色器可以修改形状或网格的顶点，改变其外观形状'
- en: '**Light** shaders are applied to alter the way light is processed for an object'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**光照**着色器用于改变对象处理光照的方式'
- en: For each of these three shader types, you will write code that will be run *simultaneously*
    on every affected item. This is where the real power of shaders comes from. For
    example, when using a fragment shader, the code is run on every pixel of the object
    at the same time. This is a very different process than what you might be used
    to using a traditional language, where you would loop over each pixel one at a
    time. That kind of sequential code just isn’t fast enough to handle the huge number
    of pixels modern games need to process.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这三种着色器类型中的每一种，你将编写将在每个受影响的项上**同时**运行的代码。这就是着色器的真正威力所在。例如，当使用片段着色器时，代码将在对象的每个像素上同时运行。这与使用传统语言时你可能习惯的过程非常不同，在传统语言中，你会逐个像素地循环。这种顺序代码的速度根本不够快，无法处理现代游戏需要处理的庞大像素数量。
- en: The importance of the GPU
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: GPU 的重要性
- en: 'Consider a game running at the relatively low resolution of 480 x 720 – a typical
    phone resolution. The total number of pixels on the screen is almost 350,000\.
    Any manipulation of those pixels in code must happen in less than 1/60 of a second
    to avoid lag – even less when you consider the rest of your code that also has
    to run on every frame: game logic, animation, networking, and everything else.
    This is why GPUs are so important, especially for high-end games that may be processing
    millions of pixels each and every frame.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个以相对较低的分辨率 480 x 720 运行的游戏——这是一个典型的手机分辨率。屏幕上的总像素数接近 350,000。任何在代码中对这些像素的操作都必须在不到
    1/60 秒内完成，以避免延迟——当你考虑到还需要在每一帧上运行的其余代码：游戏逻辑、动画、网络和所有其他内容时，这一点尤为重要。这就是为什么 GPU 如此重要的原因，尤其是对于可能每帧处理数百万像素的高端游戏。
- en: Creating a 2D shader
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 2D 着色器
- en: 'To demonstrate some shader effects, create a scene with a `Sprite2D` node and
    choose any texture you like. This demo will use the player image from *Coin Dash*:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示一些着色器效果，创建一个包含 `Sprite2D` 节点的场景，并选择你喜欢的任何纹理。这个演示将使用来自 *Coin Dash* 的玩家图像：
- en: '![Figure 7.9: Player sprite](img/B19289_07_09.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.9：玩家精灵](img/B19289_07_09.jpg)'
- en: 'Figure 7.9: Player sprite'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.9：玩家精灵
- en: A shader can be added to any `CanvasItem` derived node – in this case, `Sprite2D`,
    via its **Material** property. In this property, select **New ShaderMaterial**
    and click on the newly created resource.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 着色器可以添加到任何由 `CanvasItem` 派生的节点——在这个例子中，通过其 **材质** 属性添加到 `Sprite2D`。在这个属性中，选择
    **新着色器材质**，然后点击新创建的资源。
- en: '![Figure 7.10: Adding a shader material](img/B19289_07_10.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.10：添加着色器材质](img/B19289_07_10.jpg)'
- en: 'Figure 7.10: Adding a shader material'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.10：添加着色器材质
- en: The first property is **Shader**, where you can choose **New Shader**. When
    you do, a **Create Shader** panel appears.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个属性是**着色器**，在这里你可以选择**新着色器**。当你这样做时，会出现一个**创建着色器**面板。
- en: '![Figure 7.11: Create Shader options](img/B19289_07_11.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.11：创建着色器选项](img/B19289_07_11.jpg)'
- en: 'Figure 7.11: Create Shader options'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.11：创建着色器选项
- en: Note that `.gdshader`. Click **Create** and then you can click your new shader
    to edit it in the bottom panel.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 `.gdshader`。点击 **创建**，然后你可以点击你新创建的着色器，在底部面板中编辑它。
- en: 'Your new shader has the following code by default:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 你的新着色器默认有以下代码：
- en: '[PRE4]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Shader functions have a number of `TEXTURE` input built-in contains the pixel
    data of the object’s texture, while the `COLOR` output built-in is used to set
    the pixel color. Remember, the code in the fragment shader will affect the color
    of every processed pixel.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 着色器函数有几个内置的 `TEXTURE` 输入，包含对象的纹理像素数据，而 `COLOR` 输出内置用于设置像素颜色。记住，片段着色器中的代码将影响每个处理的像素的颜色。
- en: When working with shaders in the `TEXTURE` property, for example, coordinates
    are measured in a *normalized* (that is, ranging from 0 to 1) coordinate space.
    This coordinate space is called `UV` to distinguish it from the x/y coordinate
    space.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 当在`TEXTURE`属性中处理着色器时，例如，坐标是在一个*归一化*（即，范围从0到1）的坐标空间中测量的。这个坐标空间被称为`UV`，以区别于x/y坐标空间。
- en: '![Figure 7.12: UV coordinate space](img/B19289_07_12.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![图7.12：UV坐标空间](img/B19289_07_12.jpg)'
- en: 'Figure 7.12: UV coordinate space'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.12：UV坐标空间
- en: As a very small example, our first shader will change the color of each pixel
    in the image based on its `UV` position.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个非常小的例子，我们的第一个着色器将根据图像中每个像素的`UV`位置改变图像中每个像素的颜色。
- en: 'Type the following code into the **Shader** **Editor** panel:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在**着色器** **编辑器**面板中输入以下代码：
- en: '[PRE5]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![Figure 7.13: Color gradient](img/B19289_07_13.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图7.13：颜色渐变](img/B19289_07_13.jpg)'
- en: 'Figure 7.13: Color gradient'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.13：颜色渐变
- en: As soon as you do this, you’ll see the entire image change to a gradient of
    red and green. What happened? Look at the preceding UV image – as we move from
    left to right, the red value increases from 0 to 1, and the green does the same
    from bottom to top.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这样做，你就会看到整个图像变成红色和绿色的渐变。发生了什么？看看前面的UV图像——当我们从左到右移动时，红色值从0增加到1，绿色值从底部到顶部同样增加。
- en: Let’s try another example. This time, to allow you to choose the color, you
    can use a `uniform` variable.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再举一个例子。这次，为了让你可以选择颜色，你可以使用一个`uniform`变量。
- en: 'Uniforms allow you to pass data into the shader from outside. Declaring a `uniform`
    variable will cause it to appear in the Inspector (similar to the way `@export`
    works in GDScript) and also allows you to set it via code:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 常量允许你从外部将数据传递到着色器中。声明一个`uniform`变量将使其在检查器中显示（类似于GDScript中的`@export`的工作方式），并且还允许你通过代码设置它：
- en: '[PRE6]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You’ll see that **Fill Color** has appeared under **Shader Parameters** in the
    Inspector, and you can change its value.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到在检查器的**着色器参数**下出现了**填充颜色**，你可以更改其值。
- en: '![Figure 7.14: Shader Parameters](img/B19289_07_14.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![图7.14：着色器参数](img/B19289_07_14.jpg)'
- en: 'Figure 7.14: Shader Parameters'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.14：着色器参数
- en: 'Why did the entire rectangle of the image change color in these examples? Because
    the output `COLOR` is applied to every pixel. Our player image has transparent
    pixels surrounding it, so we can ignore those by not changing the pixel’s `a`
    value:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么在这些例子中整个图像的矩形都改变了颜色？因为输出的`COLOR`被应用到每个像素上。我们的玩家图像周围有透明的像素，所以我们可以通过不改变像素的`a`值来忽略它们：
- en: '[PRE7]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now we can change the color of the object. Let’s turn it into a “hit” effect
    so that we can make the object flash whenever it’s hit:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以改变物体的颜色。让我们将其变成一个“击中”效果，这样我们就可以在物体被击中时使其闪烁：
- en: '[PRE8]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note that now you can toggle the color on and off by clicking the `uniform`
    variables appear in the `AnimationPlayer` that animates these values for your
    visual effect.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 注意现在你可以通过点击在`AnimationPlayer`中出现的`uniform`变量来切换颜色开和关，这些变量为你的视觉效果动画这些值。
- en: 'Here’s another example. This time, we’ll create an outline around the image:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这里还有一个例子。这次，我们将围绕图像创建一个轮廓：
- en: '[PRE9]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In this shader, we have a lot more going on. We’re using the built-in `TEXTURE_PIXEL_SIZE`
    to get the normalized size of each pixel (its size compared to the size of the
    image). Then, we get a float value that “adds up” how transparent the pixels on
    all four sides of the image are. Finally, we use the `mix()` function to combine
    the original pixel’s color with the line color based on that outline value.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个着色器中，有很多事情在进行。我们使用内置的`TEXTURE_PIXEL_SIZE`来获取每个像素的归一化大小（其大小与图像大小的比较）。然后，我们得到一个浮点值，它“累加”图像所有四边像素的透明度。最后，我们使用`mix()`函数根据轮廓值将原始像素的颜色与线条颜色混合。
- en: '![Figure 7.15: Outline shader](img/B19289_07_15.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![图7.15：轮廓着色器](img/B19289_07_15.jpg)'
- en: 'Figure 7.15: Outline shader'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.15：轮廓着色器
- en: An important thing to note – did you notice that the outline did not go below
    the character’s feet? This is because an object’s shader can only affect the pixels
    of that image. Since the character’s feet in this image are on the edge, there
    are no pixels available below them that can be affected by the shader. It’s important
    to keep this in mind when working on 2D shader effects. If you’re creating 2D
    art, leave a border of a few pixels around the image to prevent clipping at the
    edges.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的一个重要事项——你注意到轮廓没有延伸到角色的脚下吗？这是因为一个对象的着色器只能影响该图像的像素。由于这个图像中角色的脚在边缘，下面没有像素可供着色器影响。在处理2D着色器效果时，这一点很重要。如果你正在创建2D艺术作品，请在图像周围留出几个像素的边框，以防止边缘裁剪。
- en: 3D shaders
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3D 着色器
- en: Let’s try one 3D shader so you can see how the vertex() shader works. In a new
    scene, add a `MeshInstance3D` with a `PlaneMesh` shape. So that you can see the
    vertices better, select **Display Wireframe** from the **Perspective** menu.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试一个 3D 着色器，这样你就可以看到 `vertex()` 着色器是如何工作的。在一个新的场景中，添加一个具有 `PlaneMesh` 形状的
    `MeshInstance3D`。为了更好地看到顶点，从 **Perspective** 菜单中选择 **Display Wireframe**。
- en: Click the **Mesh** resource to expand it and add a new shader in the **Material**
    property, just like you did previously.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **Mesh** 资源以展开它，并在 **Material** 属性中添加一个新的着色器，就像你之前做的那样。
- en: '![Figure 7.16: Adding a shader to the plane](img/B19289_07_16.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.16：向平面添加着色器](img/B19289_07_16.jpg)'
- en: 'Figure 7.16: Adding a shader to the plane'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.16：向平面添加着色器
- en: 'Since we’re using a plane shape, we have four vertices: the four corners of
    the shape. The `vertex()` function will apply an effect to each of these vertices.
    For example, adding to their `y` value would move them all upward.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用的是平面形状，所以我们有四个顶点：形状的四个角。`vertex()` 函数将对这些顶点中的每一个应用一个效果。例如，向它们的 `y` 值添加将会使它们都向上移动。
- en: 'Let’s start with this code:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从这段代码开始：
- en: '[PRE10]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note that we’re using a `spatial` type shader now, since our node is a `Node3D`.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们现在使用的是 `spatial` 类型的着色器，因为我们的节点是 `Node3D`。
- en: '![Figure 7.17: Shifting the vertices](img/B19289_07_17.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.17：移动顶点](img/B19289_07_17.jpg)'
- en: 'Figure 7.17: Shifting the vertices'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.17：移动顶点
- en: It doesn’t look like much changed – the two vertices in the +X direction moved
    down a little bit. But `UV.x` is only either `0` or `1`, so the `sin()` function
    doesn’t have much to do. To see more variation, we need to add more vertices.
    In the mesh properties, change both `32`.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来似乎没有太多变化——+X 方向的两个顶点稍微向下移动了一点。但是 `UV.x` 只能是 `0` 或 `1`，所以 `sin()` 函数没有太多作用。为了看到更多的变化，我们需要添加更多的顶点。在网格属性中，将两个
    `32` 都修改一下。
- en: '![Figure 7.18: Working with more vertices](img/B19289_07_18.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.18：处理更多顶点](img/B19289_07_18.jpg)'
- en: 'Figure 7.18: Working with more vertices'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.18：处理更多顶点
- en: Now we can see much more variation in the effect, as the different vertices
    along the *x* axis are moved up or down in a smooth sine wave.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以看到效果中出现了更多的变化，因为沿着 *x* 轴的不同顶点在平滑的正弦波中上下移动。
- en: 'For one more fun effect, let’s use the `TIME` built-in to animate the effect.
    Change the code to this:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 为了增加一个有趣的特效，让我们使用内置的 `TIME` 来动画化这个效果。将代码修改为如下：
- en: '[PRE11]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Take some time to experiment with this. Don’t be afraid to try things – experimentation
    is a great way to become more comfortable with how shaders work.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 花些时间来实验一下。不要害怕尝试新事物——实验是了解着色器工作原理的好方法。
- en: Learning more
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 学习更多
- en: 'Shaders are capable of an amazing range of effects. Experimenting with Godot’s
    shader language is a great way to learn the basics. The best place to start is
    with the shader section of Godot’s documentation:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 着色器能够实现令人惊叹的范围的效果。在 Godot 的着色器语言中进行实验是学习基础的好方法。开始的最佳地方是 Godot 文档中的着色器部分：
- en: '[https://docs.godotengine.org/en/latest/tutorials/shaders/](https://docs.godotengine.org/en/latest/tutorials/shaders/)'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.godotengine.org/en/latest/tutorials/shaders/](https://docs.godotengine.org/en/latest/tutorials/shaders/)'
- en: There is also a wealth of resources on the internet for learning more. When
    learning about shaders, you can use resources that aren’t specific to Godot, and
    you shouldn’t have much trouble getting them to work in Godot. The concept is
    the same across all types of graphics applications.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网上还有大量资源可以帮助你学习更多。在学习着色器时，你可以使用不特定于 Godot 的资源，并且你不太可能遇到在 Godot 中使用它们的问题。这个概念在所有类型的图形应用程序中都是相同的。
- en: In addition, Godot’s documentation includes a page on converting shaders from
    other popular sources into Godot’s version of GLSL.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Godot 的文档还包括一个页面，介绍如何将其他流行来源的着色器转换为 Godot 版本的 GLSL。
- en: To see some examples of just how powerful shaders can be, visit [https://www.shadertoy.com/](https://www.shadertoy.com/).
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解着色器可以多么强大，请访问 [https://www.shadertoy.com/](https://www.shadertoy.com/)。
- en: This section was only a brief introduction to the in-depth topic of shaders
    and shader effects. While it can be a very challenging subject to master, the
    power it gives you makes it well worth the effort.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 这一节只是对着色器和着色器效果的深入主题的简要介绍。虽然掌握它可能是一个非常具有挑战性的主题，但它赋予你的力量使得付出努力是值得的。
- en: In the next section, you’ll see how it’s possible to use other programming languages
    with Godot.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将看到如何使用其他编程语言与 Godot 一起使用。
- en: Using other programming languages in Godot
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Godot 中使用其他编程语言
- en: The projects in this book have all been written using GDScript. GDScript has
    a number of advantages that make it the best choice for building your games. It
    is very tightly integrated with Godot’s API, and its Python-style syntax makes
    it useful for rapid development while also being very beginner-friendly.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的项目都是使用 GDScript 编写的。GDScript 有许多优点，使其成为构建游戏的最佳选择。它与 Godot 的 API 集成非常紧密，其
    Python 风格的语法使其适用于快速开发，同时也非常适合初学者。
- en: It’s not the only option, however. Godot also supports two other “official”
    scripting languages and also provides tools for integrating code using a variety
    of other languages.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这并非唯一的选择。Godot 还支持两种其他“官方”脚本语言，并提供使用各种其他语言集成代码的工具。
- en: C#
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C#
- en: C# is very popular in game development, and the Godot version is based on the
    .NET 6.0 framework. Because of its wide use, there are many resources available
    for learning C# and a great deal of existing code in the language for accomplishing
    a variety of game-related functions.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: C# 在游戏开发中非常流行，Godot 版本基于 .NET 6.0 框架。由于其广泛的使用，有许多资源可用于学习 C#，以及大量用于实现各种游戏相关功能的现有代码。
- en: 'At the time of writing, Godot version 4.0 is still relatively new. Features
    are being added and bugs are being fixed continuously, so see the C# documentation
    at this link to get the latest information: [https://docs.godotengine.org/en/stable/tutorials/scripting/c_sharp/index.html](https://docs.godotengine.org/en/stable/tutorials/scripting/c_sharp/index.html)'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，Godot 版本 4.0 仍然相对较新。功能正在添加，错误正在不断修复，因此请参阅此链接的 C# 文档以获取最新信息：[https://docs.godotengine.org/en/stable/tutorials/scripting/c_sharp/index.html](https://docs.godotengine.org/en/stable/tutorials/scripting/c_sharp/index.html)
- en: If you want to try out the C# implementation, you’ll need to first make sure
    you have the .NET SDK installed, which you can get from [https://dotnet.microsoft.com/download](https://dotnet.microsoft.com/download).
    You must also download the Godot version that has C# support included, which you
    can find at [http://godotengine.org/download](http://godotengine.org/download),
    where it is labeled **Godot Engine - .****NET**.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要尝试 C# 实现，首先需要确保你已经安装了 .NET SDK，你可以从 [https://dotnet.microsoft.com/download](https://dotnet.microsoft.com/download)
    获取。你还需要下载包含 C# 支持的 Godot 版本，你可以在 [http://godotengine.org/download](http://godotengine.org/download)
    找到它，那里标记为 **Godot Engine - .****NET**。
- en: You’ll also need to use an external editor – such as Visual Studio Code or MonoDevelop
    – that provides more debugging and language functionality than Godot’s built-in
    editor. You can set this in **Editor Settings** under the **Dotnet** section.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要使用外部编辑器——例如 Visual Studio Code 或 MonoDevelop——它提供的调试和语言功能比 Godot 内置编辑器更丰富。你可以在
    **编辑器设置** 下的 **Dotnet** 部分中设置此选项。
- en: 'To attach a C# script to a node, select the language from the **Attach Node**
    **Script** dialog:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 C# 脚本附加到节点，请从 **附加节点** **脚本** 对话框中选择语言：
- en: '![Figure 7.19: Create script dialog](img/B19289_07_19.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.19：创建脚本对话框](img/B19289_07_19.jpg)'
- en: 'Figure 7.19: Create script dialog'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.19：创建脚本对话框
- en: In general, scripting in C# works very much the same as what you’ve already
    done in GDScript. The main difference is that the API functions are renamed in
    PascalCase to follow C# standards instead of the snake_case that’s standard for
    GDScript.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，C# 的脚本编写与你在 GDScript 中已经做过的非常相似。主要区别是 API 函数的命名改为 PascalCase 以遵循 C# 标准，而不是
    GDScript 标准的 snake_case。
- en: There are also a number of existing C# libraries that you may find useful in
    building your game. Things such as procedural generation, artificial intelligence,
    or other intensive topics may be easier to implement using available C# libraries.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有一些现有的 C# 库，你可能发现在构建游戏时它们很有用。例如，过程生成、人工智能或其他密集型主题可能更容易通过可用的 C# 库实现。
- en: 'Here’s an example of CharacterBody2D movement in C#. Compare this with the
    movement script in *Jungle Jump*:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个 C# 中 CharacterBody2D 移动的示例。将其与 *Jungle Jump* 中的移动脚本进行比较：
- en: '[PRE12]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: For more details about setting up and using C#, see the **Scripting** section
    of the documentation linked above.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 关于设置和使用 C# 的更多详细信息，请参阅上面链接的文档中的 **脚本** 部分。
- en: Other languages – GDExtension
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他语言 - GDExtension
- en: There are many programming languages to choose from. Each has its strengths
    and weaknesses, as well as its fans who prefer to use it over other options. While
    it doesn’t make sense to support every language directly in Godot, there are situations
    where GDScript is not sufficient to solve a particular problem. Perhaps you want
    to use an existing external library, or you’re doing something computationally
    intensive – such as AI or procedural world generation – that it doesn’t make sense
    to write in GDScript.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多编程语言可供选择。每种语言都有其优势和劣势，以及那些更喜欢使用它的粉丝。虽然直接在 Godot 中支持每种语言都没有意义，但有时 GDScript
    并不足以解决特定问题。也许您想使用现有的外部库，或者您正在进行一些计算密集型的工作，例如 AI 或程序化世界生成，这在 GDScript 中编写是不合理的。
- en: Because GDScript is an interpreted language, it trades performance for flexibility.
    This means that for some processor-intensive code, it can run unacceptably slow.
    In this case, the highest performance would be achieved by running native code
    written in a compiled language. In this situation, you can move that code to GDExtension.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 GDScript 是一种解释型语言，它以灵活性为代价换取性能。这意味着对于一些处理器密集型代码，它可能运行得非常慢，无法接受。在这种情况下，通过运行用编译语言编写的本地代码可以获得最高的性能。在这种情况下，您可以将该代码移动到
    GDExtension。
- en: '**GDExtension** is a technology that opens up the same API available to GDScript
    and C#, making it possible to write code in other languages that talks to Godot.
    By default, it works directly with C and C++, but by using **third-party bindings**,
    you can use it with many other languages.'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '**GDExtension** 是一种技术，它为 GDScript 和 C# 提供了相同的 API，使得使用其他语言编写与 Godot 通信的代码成为可能。默认情况下，它与
    C 和 C++ 直接工作，但通过使用 **第三方绑定**，您可以使用许多其他语言。'
- en: At the time of writing, several projects are available that use GDExtension
    to allow you to use other languages for scripting. These include C, C++, Rust,
    Python, Nim, and others. While these additional language bindings are still relatively
    new at the time of writing, they each have a dedicated group of developers working
    on them. If you’re interested in using a particular language with Godot, a Google
    search of “godot + <language name>” will help you find what’s available.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，有几个项目可以使用 GDExtension，允许您使用其他语言进行脚本编写。这些包括 C、C++、Rust、Python、Nim 以及其他语言。尽管这些额外的语言绑定在撰写本文时仍然相对较新，但每个语言都有专门的开发者团队在开发它们。如果您对在
    Godot 中使用特定语言感兴趣，使用“godot + <语言名称>”进行 Google 搜索将帮助您找到可用的资源。
- en: Working with other programming languages is certainly not required for just
    about any game project you may encounter, so don’t feel that it’s something you
    need to learn if it’s foreign to you. It’s presented here for those to whom it
    might be useful, and it’s something to keep in mind if you have a preferred language
    you’d like to work with.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他编程语言一起工作对于您可能遇到的任何游戏项目来说都不是必需的，所以如果您对它不熟悉，请不要觉得您需要学习它。这里提供它是为了那些可能有用的人，如果您有一个希望与之工作的首选语言，这也是您需要记住的事情。
- en: In the next section, you can explore the community resources that are available
    for you to learn more about how Godot works, find examples, and even get help
    with your own projects.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，您可以探索可用的社区资源，以了解更多关于 Godot 如何工作、查找示例以及甚至获得您自己项目的帮助。
- en: Getting help – community resources
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获得帮助 – 社区资源
- en: Godot’s online community is one of its strengths. Because of its open source
    nature, there is a wide variety of people working together to improve the engine,
    write documentation, and help each other with issues.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: Godot 的在线社区是其优势之一。由于其开源特性，有各种各样的人们在共同努力改进引擎、编写文档以及互相帮助解决问题。
- en: 'You can find a list of official community resources at [https://godotengine.org/community](https://godotengine.org/community).
    These links may change over time, but the following are the main community resources
    you should be aware of:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 [https://godotengine.org/community](https://godotengine.org/community)
    找到官方社区资源的列表。这些链接可能会随时间变化，但以下是一些您应该了解的主要社区资源：
- en: '**GitHub** – [https://github.com/godotengine/](https://github.com/godotengine/)'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GitHub** – [https://github.com/godotengine/](https://github.com/godotengine/)'
- en: The Godot GitHub repository is where Godot’s developers work. You can find Godot’s
    source code there if you find yourself needing to compile a custom version of
    the engine for your own use or if you’re just curious how things work under the
    hood.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: Godot 的 GitHub 仓库是 Godot 开发者工作的地方。如果您需要编译用于您自己使用的自定义版本或只是好奇底层是如何工作的，您可以在那里找到
    Godot 的源代码。
- en: If you find any kind of problem with the engine itself – something that doesn’t
    work, a typo in the documentation, and so on – this is the place where you should
    report it.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发现引擎本身有任何问题——比如某些功能不工作、文档中的错别字等等——这就是你应该报告问题的地点。
- en: '**Godot Q&A** – [https://godotengine.org/qa/](https://godotengine.org/qa/)'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Godot问答** – [https://godotengine.org/qa/](https://godotengine.org/qa/)'
- en: This is Godot’s official help site. You can post questions here for the community
    to answer, as well as searching the growing database of previously answered questions.
    If you happen to see a question you know the answer to, you can help out as well.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Godot的官方帮助网站。你可以在这里发布问题供社区回答，也可以搜索不断增长的先前回答的问题数据库。如果你恰好看到你知道答案的问题，你也可以提供帮助。
- en: '**Discord** – [https://discord.gg/zH7NUgz](https://discord.gg/zH7NUgz)'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Discord** – [https://discord.gg/zH7NUgz](https://discord.gg/zH7NUgz)'
- en: 'The Godot Engine Discord is a very active and welcoming community of Godot
    users where you can get help, find answers to questions, and discuss your project
    with others. You may even encounter the author of this book hanging out in the
    #beginner channel, answering questions!'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: Godot引擎的Discord是一个非常活跃且欢迎的社区，你可以在这里获得帮助，找到问题的答案，并与他人讨论你的项目。你甚至可能会在#beginner频道遇到本书的作者，他在那里回答问题！
- en: Godot Recipes
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Godot菜谱
- en: I have also created the **Godot Recipes** website at [https://godotrecipes.com/](https://godotrecipes.com/).
    This is a collection of solutions and examples to help you make any game system
    you might need. You can see how to make an FPS character, handle complex animation
    states, or add AI to your enemies.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我还创建了[https://godotrecipes.com/](https://godotrecipes.com/)上的**Godot菜谱**网站。这是一个收集解决方案和示例的集合，帮助你制作你可能需要的任何游戏系统。你可以看到如何制作FPS角色、处理复杂的动画状态，或者为你的敌人添加AI。
- en: There are also additional tutorials and examples of completed games that you
    can try out.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有额外的教程和已完成游戏的示例，你可以尝试使用。
- en: '![Figure 7.20: Godot Recipes website](img/B19289_07_20.jpg)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![图7.20：Godot菜谱网站](img/B19289_07_20.jpg)'
- en: 'Figure 7.20: Godot Recipes website'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.20：Godot菜谱网站
- en: As illustrated by this section, one of the great strengths of the Godot Engine
    is its community. The resources listed here, along with many others, are built
    by the community of Godot users who are passionate about the engine and about
    helping others. In the next section, you can find out how you can contribute to
    Godot as well.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 如本节所示，Godot引擎的一个巨大优势是其社区。这里列出的资源，以及许多其他资源，都是由对Godot引擎充满热情并乐于助人的Godot用户社区所构建。在下一节中，你可以了解如何为Godot做出贡献。
- en: Contributing to Godot
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Godot贡献力量
- en: Godot is an open source, community-driven project. All of the work that’s done
    to build, test, document, and otherwise support Godot is done primarily by passionate
    individuals contributing their time and skills. For the majority of contributors,
    it is a labor of love, and they take pride in helping to build something of quality
    that people enjoy using.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: Godot是一个开源、社区驱动的项目。构建、测试、编写文档以及支持Godot的所有工作主要是由充满热情的个人贡献他们的时间和技能完成的。对于大多数贡献者来说，这是一项充满爱心的劳动，他们为帮助构建人们喜欢使用的优质产品而感到自豪。
- en: In order for Godot to continue growing and improving, there is always a need
    for more members of the community to step up and contribute. There are many ways
    you can help out, regardless of your skill level or the amount of time you can
    commit.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让Godot持续成长和改进，总需要更多社区成员站出来贡献力量。无论你的技能水平如何，或者你能投入多少时间，都有很多方式你可以提供帮助。
- en: Contributing to the engine
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为引擎贡献力量
- en: 'There are two main ways you can directly contribute to Godot’s development.
    If you visit [https://github.com/godotengine/godot](https://github.com/godotengine/godot),
    you can see Godot’s source code, as well as finding out exactly what’s being worked
    on. Click the **Clone** or **Download** button, and you’ll have the up-to-the-minute
    source code and can test out the latest features. You’ll need to build the engine,
    but don’t be intimidated: Godot is one of the easiest open source projects to
    compile that you’ll find. See [https://docs.godotengine.org/en/latest/contributing/development/compiling/index.html](https://docs.godotengine.org/en/latest/contributing/development/compiling/index.html)
    for instructions.'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以直接以两种主要方式为Godot的开发做出贡献。如果你访问[https://github.com/godotengine/godot](https://github.com/godotengine/godot)，你可以看到Godot的源代码，以及了解正在进行的具体工作。点击**克隆**或**下载**按钮，你将获得最新的源代码，并可以测试最新的功能。你需要构建引擎，但不要感到害怕：Godot是你能找到的最容易编译的开源项目之一。有关说明，请参阅[https://docs.godotengine.org/en/latest/contributing/development/compiling/index.html](https://docs.godotengine.org/en/latest/contributing/development/compiling/index.html)。
- en: If you’re not able to actually contribute to the C++ code, go to the **Issues**
    tab, where you can report or read about bugs and suggestions for improvements.
    There is always a need for people to confirm bug reports, test fixes, and give
    their opinions on new features.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你无法实际贡献C++代码，请转到**问题**标签页，在那里你可以报告或阅读有关错误和建议改进的内容。总是需要有人确认错误报告、测试修复并就新功能提出意见。
- en: Writing documentation
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写文档
- en: Godot’s official documentation is only as good as its community’s contributions.
    From something as small as correcting a typo to writing an entire tutorial, all
    levels of help are very welcome. The home of the official documentation is [https://github.com/godotengine/godot-docs](https://github.com/godotengine/godot-docs).
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: Godot的官方文档的质量取决于其社区的贡献。从纠正一个错别字到编写整个教程，所有级别的帮助都非常受欢迎。官方文档的家园是[https://github.com/godotengine/godot-docs](https://github.com/godotengine/godot-docs)。
- en: Hopefully, by now, you’ve taken some time to browse through the official documentation
    and get an idea of what’s available. If you spot something wrong or something
    missing, open an issue at the aforementioned GitHub link. If you’re comfortable
    with using GitHub, you can even go ahead and submit a pull request yourself. Just
    make sure you read all the guidelines first so that your contribution will be
    accepted. You can find the guidelines at [https://docs.godotengine.org/en/latest/contributing/ways_to_contribute.html](https://docs.godotengine.org/en/latest/contributing/ways_to_contribute.html).
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 希望到现在为止，你已经花了一些时间浏览官方文档，并对可用的内容有了大致的了解。如果你发现有什么错误或遗漏，请在上文提到的GitHub链接处打开一个问题。如果你熟悉使用GitHub，甚至可以自己提交一个pull
    request。只是确保你首先阅读所有指南，以确保你的贡献会被接受。你可以在[https://docs.godotengine.org/en/latest/contributing/ways_to_contribute.html](https://docs.godotengine.org/en/latest/contributing/ways_to_contribute.html)找到指南。
- en: If you speak a language other than English, translations are also very much
    needed and will be greatly appreciated by Godot’s non-English-speaking users.
    See [https://docs.godotengine.org/en/latest/contributing/documentation/editor_and_docs_localization](https://docs.godotengine.org/en/latest/contributing/documentation/editor_and_docs_localization)
    for how to contribute in your language.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你说的不是英语，翻译也非常需要，并且会受到Godot的非英语用户的极大欢迎。有关如何在你的语言中做出贡献的说明，请参阅[https://docs.godotengine.org/en/latest/contributing/documentation/editor_and_docs_localization](https://docs.godotengine.org/en/latest/contributing/documentation/editor_and_docs_localization)。
- en: Donations
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 捐赠
- en: Godot is a not-for-profit project, and user donations go a long way to help
    pay for hosting costs and development resources, such as hardware. Financial contributions
    also allow the project to pay core developers, allowing them to dedicate themselves
    part- or full-time to working on the engine.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: Godot是一个非营利项目，用户的捐赠在很大程度上有助于支付托管费用和开发资源，例如硬件。财务捐助还允许项目支付核心开发者的工资，使他们能够全职或兼职致力于引擎的开发工作。
- en: The easiest way to contribute to Godot is via the donation page at [https://godotengine.org/donate](https://godotengine.org/donate).
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 为Godot做出贡献最简单的方式是通过[https://godotengine.org/donate](https://godotengine.org/donate)的捐赠页面。
- en: Summary
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about a few additional topics that will help you
    continue to level up your Godot skills. Godot has a great many features in addition
    to those explored in this book. You’ll need to know where to look and where to
    ask for help as you move on to working on projects of your own.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了一些额外的主题，这些主题将帮助您继续提升您的 Godot 技能。除了本书中探索的功能之外，Godot 还拥有许多其他功能。当您开始独立项目时，您需要知道该往哪里寻找信息，以及在哪里寻求帮助。
- en: You also learned about some more advanced topics, such as working with other
    programming languages and using shaders to enhance your game’s visual effects.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 您还了解了一些更高级的主题，例如与其他编程语言协同工作以及使用着色器来增强您游戏视觉效果。
- en: In addition, since Godot is built by its community, you learned how you could
    participate and become part of the team that is making it one of the fastest-growing
    projects of its kind.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，由于 Godot 是由其社区构建的，您还了解到您如何参与其中，并成为使其成为同类项目中最快速增长的团队之一的一部分。
- en: Final words
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最后一句话
- en: Thank you for taking the time to read this book. I hope you found it useful
    in starting your game development journey with Godot. The goal of this book was
    not to give you a “copy-and-paste” solution to making games but rather to help
    you develop an intuition for the process of game development. As you’ll see when
    you explore other resources, there are often many ways to solve a problem, and
    there may not be a single “right” answer. It’s up to you as a developer to evaluate
    and determine what works for you in your situation. I wish you luck in your future
    game projects, and I hope to play them sometime in the future!
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢您抽出时间阅读这本书。我希望您觉得它对您使用 Godot 开始游戏开发之旅有所帮助。本书的目标并不是为您提供制作游戏的“复制粘贴”解决方案，而是帮助您培养对游戏开发过程的直觉。正如您在探索其他资源时会看到的那样，解决问题往往有多种方法，可能没有唯一的“正确”答案。作为开发者，您需要评估并确定在您的情况下什么才是最适合您的。我祝愿您在未来的游戏项目中好运，并希望将来能有机会玩到它们！
