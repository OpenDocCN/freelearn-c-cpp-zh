- en: The Camera Module
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摄像头模块
- en: After working your way through so many chapters with increasing difficulty,
    let's try out something simpler and more fun for this chapter instead! We will
    learn how to access our camera through Qt's multimedia module and take photos
    using it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在通过许多难度逐渐增加的章节后，让我们尝试一些更简单和更有趣的东西！我们将学习如何通过Qt的多媒体模块访问我们的摄像头并使用它拍照。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: The Qt multimedia module
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Qt多媒体模块
- en: Connecting to the camera
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接到摄像头
- en: Capturing a camera image to file
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将摄像头图像捕获到文件
- en: Recording a camera video to file
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将摄像头视频录制到文件
- en: You can use this to create a video conference app, a security camera system,
    and more. Let's get started!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用这个功能创建视频会议应用程序、安全摄像头系统等。让我们开始吧！
- en: The Qt multimedia module
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Qt多媒体模块
- en: The multimedia module in Qt is the module that handles a platform's multimedia
    capabilities, such as media playback and the use of camera and radio devices.
    This module covers a wide range of topics, but we will just focus on the camera
    for this chapter.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Qt中的多媒体模块处理平台的多媒体功能，如媒体播放和摄像头和收音机设备的使用。这个模块涵盖了很多主题，但是在本章中我们只会专注于摄像头。
- en: Setting up a new project
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置一个新项目
- en: First, create a new Qt Widgets Application project.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个新的Qt Widgets应用程序项目。
- en: 'Then, the first thing we need to do is to open up the project file (`.pro`)
    and add two keywords—`multimedia` and `multimediawidgets`:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要打开项目文件（.pro）并添加两个关键字——`multimedia`和`multimediawidgets`：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'By detecting these keywords in the project file, Qt will include the multimedia
    module and all the widgets that are related to multimedia into your project when
    it compiles. The multimedia module includes four major components which are listed
    as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在项目文件中检测这些关键字，Qt在编译时将包含多媒体模块和所有与多媒体相关的部件到您的项目中。多媒体模块包括四个主要组件，列举如下：
- en: Audio
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 音频
- en: Video
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视频
- en: Camera
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 摄像头
- en: Radio
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收音机
- en: Each component includes a range of classes that provide respective functionality.
    By using this module, you no longer have to implement low-level, platform-specific
    code yourself. Let Qt do the job for you. It's really that easy.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 每个组件都包括一系列提供相应功能的类。通过使用这个模块，您不再需要自己实现低级别的平台特定代码。让Qt来为您完成这项工作。真的很简单。
- en: 'After you have finished adding the multimedia module, let''s open `mainwindow.ui`
    and drag and drop a Horizontal Layout on to the main window, shown as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加了多媒体模块后，让我们打开`mainwindow.ui`并将一个水平布局拖放到主窗口上，如下所示：
- en: '![](img/59be5c52-c020-4ae8-8db0-3485497ad386.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/59be5c52-c020-4ae8-8db0-3485497ad386.png)'
- en: Then, add a Label, Combo Box (name it `deviceSelection`), and a Push Button
    into the Horizontal Layout we just added in the previous step. After that, add
    a Horizontal Spacer between the combo box and a push button to push them apart
    from each other. Once you're done, select the central widget and click on the
    Layout Vertically button located above the workspace.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在我们刚刚添加的水平布局中添加一个标签、下拉框（命名为`deviceSelection`）和一个按钮。之后，在下拉框和按钮之间添加一个水平间隔。完成后，选择中央窗口部件并点击工作区上方的垂直布局按钮。
- en: 'Then, add another Horizontal Layout to the bottom of the previous horizontal
    layout and right-click on it and select Morph into | QFrame. After that, set its
    sizePolicy (Horizontal Policy and Vertical Policy) settings to Expanding. Refer
    the following screenshot:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在上一个水平布局的底部添加另一个水平布局，右键单击它并选择转换为 | QFrame。然后，将其sizePolicy（水平策略和垂直策略）设置为扩展。参考以下截图：
- en: '![](img/afc05a4b-5788-4b1d-ac84-33e5cd81fd92.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/afc05a4b-5788-4b1d-ac84-33e5cd81fd92.png)'
- en: 'Your program''s user interface should look something like this by now:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您的程序用户界面应该看起来像这样：
- en: '![](img/e31cada6-b831-4f34-bad4-3c3096644d80.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e31cada6-b831-4f34-bad4-3c3096644d80.png)'
- en: The reason we convert the layout to a frame is so that we can set the sizePolicy
    (both Horizontal policy and Vertical policy) to Expanding. However, if we just
    add a Frame widget (which is essentially a QFrame) from the widget box, we don't
    get the layout component on it which is needed for attaching the viewfinder later.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将布局转换为框架的原因是为了将sizePolicy（水平策略和垂直策略）设置为扩展。但是，如果我们只是从部件框中添加一个框架部件（本质上是QFrame），我们就无法得到所需的用于稍后附加取景器的布局组件。
- en: 'Next, right click on the QFrame again and select Change styleSheet. A window
    will pop up for setting the style sheet of that widget. Add the following style
    sheet code to make the background black:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，再次右键单击QFrame并选择更改样式表。将弹出一个窗口来设置该部件的样式表。添加以下样式表代码以使背景变为黑色：
- en: '![](img/64d7d9eb-31d7-463e-b806-0c13f4de32b4.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/64d7d9eb-31d7-463e-b806-0c13f4de32b4.png)'
- en: 'This step is optional; we made its background black just to indicate the viewfinder''s
    location. Once this is done, let''s put another Horizontal Layout above the QFrame,
    such as the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这一步是可选的；我们将其背景设置为黑色，只是为了指示取景器的位置。完成后，让我们在QFrame上方再添加一个水平布局，如下所示：
- en: '![](img/bb45ce27-fc97-4962-a84f-f3e7f3cac303.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bb45ce27-fc97-4962-a84f-f3e7f3cac303.png)'
- en: 'After that, add two Push Buttons to the Horizontal Layout and a Horizontal
    Spacer to keep them aligned to the right:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在水平布局中添加两个按钮和一个水平间隔以使它们右对齐：
- en: '![](img/cd4977c9-a179-4245-a431-8f3ef6622ba3.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cd4977c9-a179-4245-a431-8f3ef6622ba3.png)'
- en: That's it; we have finished setting up our project with the multimedia module
    and laid out the user interface nicely for our next sections.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止；我们已经完成了使用多媒体模块设置项目，并为下一节精心布置了用户界面。
- en: Connecting to the camera
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接到摄像头
- en: 'Here comes the most exciting part. We are going to learn how to access our
    camera(s) using Qt''s multimedia module! First, open `mainwindow.h` and add the
    following headers:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 最激动人心的部分来了。我们将学习如何使用Qt的多媒体模块访问我们的摄像头。首先，打开`mainwindow.h`并添加以下头文件：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, add the following variable, as shown here:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，添加以下变量，如下所示：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, open up `mainwindow.cpp` and add the following code to the class constructor
    to initiate the `QCamera` object. We then use the `QCameraInfo` class to retrieve
    a list of connected cameras and fill in that information in the combo box widget:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，打开`mainwindow.cpp`并将以下代码添加到类构造函数中以初始化`QCamera`对象。然后，我们使用`QCameraInfo`类检索连接摄像头的列表，并将该信息填充到组合框小部件中：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s build and run the project now. After that, check the debug output for
    any detected cameras on your computer. The cameras that have been detected should
    also be displayed in the drop-down box. If you are running on a laptop with a
    supported camera, you should see it listed. If you''re running a system with no
    built-in camera, then the debug output may not display anything and the drop-down
    box will remain empty as well. If that''s the case, try plugging in an inexpensive
    USB camera and run the program again:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在构建并运行项目。之后，检查调试输出以查看计算机上检测到的摄像头。检测到的摄像头也应显示在下拉框中。如果您在支持摄像头的笔记本电脑上运行，您应该能够看到它在列表中。如果您在没有内置摄像头的系统上运行，则调试输出可能不会显示任何内容，下拉框也将保持为空。如果是这种情况，请尝试插入一个廉价的USB摄像头并重新运行程序：
- en: '![](img/653beee6-57b1-4705-8987-5387abe142b4.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/653beee6-57b1-4705-8987-5387abe142b4.png)'
- en: 'After that, open up `mainwindow.ui` and right click on the Connect button,
    and select Go to slot.... Select the `clicked()` option and click OK. Qt Creator
    will automatically create a `slot` function for you; add the following code into
    the function, like so:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，打开`mainwindow.ui`，右键单击连接按钮，然后选择转到槽.... 选择`clicked()`选项，然后单击确定。Qt Creator将自动为您创建一个`slot`函数；将以下代码添加到函数中：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: When the Connect button is being clicked, we first check whether the `camera`
    is already connected by checking the `connect` variable. If it's not connected
    yet, we run the `connectCamera()` function which we will define in the next step.
    If the camera is already connected, we stop the `camera`, delete the `viewfinder`
    and set the Connect button's text to `Connect`. Finally, set the `connected` variable
    to `false`. Do note that we're using `deleteLater()` here instead of `delete()`,
    which is the recommended way to delete a memory pointer. `deleteLater()` is called
    on an object that lives in a thread with no running event loop, the object will
    be destroyed when the thread finishes.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当单击连接按钮时，我们首先检查`camera`是否已连接，方法是检查`connect`变量。如果尚未连接，我们运行`connectCamera()`函数，我们将在下一步中定义。如果摄像头已连接，我们停止摄像头，删除`viewfinder`并将连接按钮的文本设置为`Connect`。最后，将`connected`变量设置为`false`。请注意，这里我们使用`deleteLater()`而不是`delete()`，这是删除内存指针的推荐方法。如果在没有运行事件循环的线程中调用`deleteLater()`，则对象将在线程完成时被销毁。
- en: 'Next, we will add a new function in our `MainWindow` class called `connectCamera()`.
    The function looks like the following code block:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在`MainWindow`类中添加一个名为`connectCamera()`的新函数。该函数如下所示：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the `connectCamera()` function, we repeat what we did in the construction
    and get the current list of connected cameras. Then, we loop through the list
    and compare the name of the camera (stored in the `description` variable) with
    the currently selected device name on the combo box widget.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在`connectCamera()`函数中，我们重复了构造中的操作，并获取当前连接摄像头的列表。然后，我们循环遍历列表，并将摄像头的名称（存储在`description`变量中）与组合框小部件上当前选择的设备名称进行比较。
- en: If there's a matching name, it means the user is intending to connect to that
    particular camera, and thus we will proceed to connect to that camera by initializing
    a `QCamera` object and a new `QCameraViewFinder` object. We then link the `viewfinder`
    to the `camera` and add the `viewfinder` to the layout with the black color background.
    Then, we set the `connected` variable to `true` and set the Connect button's text
    to `Disconnect`. Finally, call the `start()` function to start running the camera.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有匹配的名称，这意味着用户打算连接到该特定摄像头，因此我们将通过初始化`QCamera`对象和新的`QCameraViewFinder`对象来连接到该摄像头。然后，我们将`viewfinder`链接到`camera`，并将`viewfinder`添加到具有黑色背景的布局中。然后，我们将`connected`变量设置为`true`，并将连接按钮的文本设置为`Disconnect`。最后，调用`start()`函数来启动摄像头运行。
- en: 'Build and run the project now. Select the camera you are intending to connect
    to and click the Connect button. You should be able to connect to your camera
    and see yourself in the program:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在构建并运行项目。选择要连接的摄像头，然后单击连接按钮。您应该能够连接到摄像头并在程序中看到自己：
- en: '![](img/c6d70bb6-30f2-426f-815c-a92e80f674e0.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c6d70bb6-30f2-426f-815c-a92e80f674e0.png)'
- en: 'If your camera is unable to connect, do the following steps to display any
    errors returned by the operating system. First, open up `mainwindow.h` and add
    in the following `slot` function:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的摄像头无法连接，请执行以下步骤以显示操作系统返回的任何错误。首先，打开`mainwindow.h`并添加以下`slot`函数：
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After that, open `mainwindow.cpp` and add the following code to `connectCamera()`
    function to connect the `error()` signal to the `cameraError()`, `slot` function:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，打开`mainwindow.cpp`并将以下代码添加到`connectCamera()`函数中，将`error()`信号连接到`cameraError()`槽函数：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `cameraError()` slot function looks like this:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`cameraError()`槽函数如下所示：'
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the preceding code, we display the error message and make sure the camera
    has completely stopped, just in case. By looking at the error message, you should
    be able to debug the problem more easily.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们显示错误消息，并确保摄像头已完全停止，以防万一。通过查看错误消息，您应该能够更轻松地调试问题。
- en: Capturing a camera image to file
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将摄像头图像捕获到文件
- en: We have learned how to connect to our camera using Qt's multimedia module in
    the previous section. Now, we will try and capture a still image from the camera
    and save it into a JPEG file. It's actually very very simple with Qt.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们已经学习了如何使用Qt的多媒体模块连接到摄像头。现在，我们将尝试从摄像头中捕获静态图像并将其保存为JPEG文件。使用Qt实际上非常简单。
- en: 'First, open `mainwindow.h` and add the following variable:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，打开`mainwindow.h`并添加以下变量：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then, right-click on the Capture button in `mainwindow.ui` and select Go to
    slot.... Then, select `clicked()` and press OK. Now, a new `slot` function will
    be created for you in `mainwindow.cpp`. Add the following code to capture an image
    from the camera:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`mainwindow.ui`中右键单击Capture按钮，选择转到槽...。然后，选择`clicked()`并按OK。现在，在`mainwindow.cpp`中为您创建了一个新的`slot`函数。添加以下代码以从摄像头捕获图像：
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: What we did in the preceding code is basically create a new `QCameraImageCapture`
    object and set its media object as the active camera. Then, set its capture mode
    as a still image. Before we ask the `QCameraImageCapture` object to capture an
    image, we must lock the camera so that the settings remain unchanged during the
    process of capturing the image. You may unlock it by calling `camera->unlock()`
    after you have successfully captured the image.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们基本上创建了一个新的`QCameraImageCapture`对象，并将其媒体对象设置为活动摄像头。然后，将其捕获模式设置为静态图像。在要求`QCameraImageCapture`对象捕获图像之前，我们必须锁定摄像头，以便在捕获图像过程中设置保持不变。成功捕获图像后，您可以通过调用`camera->unlock()`来解锁它。
- en: We used `qApp->applicationDirPath()` to get the application directory so that
    the image will be saved alongside the executable file. You can change this to
    whatever directory you want. You can also put your desired filename behind the
    directory path; otherwise, it will save the images sequentially using the default
    filename format starting with `IMG_00000001.jpg`, `IMG_00000002.jpg`, and so on.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了`qApp->applicationDirPath()`来获取应用程序目录，以便图像将保存在可执行文件旁边。您可以将其更改为任何您想要的目录。您还可以将所需的文件名放在目录路径后面；否则，它将使用默认文件名格式按顺序保存图像，从`IMG_00000001.jpg`开始，依此类推。
- en: Recording a camera video to file
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将摄像头视频录制到文件
- en: 'After we have learned how to capture a still image from our camera, let''s
    proceed to learn how to record videos as well. First, open `mainwindow.h` and
    add the following variables:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习了如何从我们的摄像头捕获静态图像之后，让我们继续学习如何录制视频。首先，打开`mainwindow.h`并添加以下变量：
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next, open `mainwindow.ui` again and right-click on the Record button. Choose
    Go to slot... from the menu and select the `clicked()` option, then, click the
    OK button. A `slot` function will be created for you; then proceed to add the
    following code into the `slot` function:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，再次打开`mainwindow.ui`，右键单击Record按钮。从菜单中选择转到槽...，然后选择`clicked()`选项，然后单击OK按钮。将为您创建一个`slot`函数；然后继续将以下代码添加到`slot`函数中：
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This time, we use a `QMediaRecorder` for recording video instead. We must also
    set the camera's capture mode to `QCamera::CaptureVideo` before calling `recorder->record()`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我们使用`QMediaRecorder`来录制视频。在调用`recorder->record()`之前，我们还必须将摄像头的捕获模式设置为`QCamera::CaptureVideo`。
- en: 'To check the error message produced by the media recorder during the recording
    stage, you may connect the `error()` signal of the media recorder to a `slot`
    function like this:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查媒体录制器在录制阶段产生的错误消息，您可以将媒体录制器的`error()`信号连接到`slot`函数，如下所示：
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then, simply display the error message in the `slot` function:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，只需在`slot`函数中显示错误消息：
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Do note that, at the time of writing this chapter, the `QMediaRecorder` class
    only supports video recording on macOS, Linux, mobile platforms and Windows XP.
    It doesn't work on Windows 8 and Windows 10 at the moment, but it will be ported
    over in one of the upcoming versions. The main reason is that Qt is using Microsoft's
    `DirectShow` API to record video on the Windows platform, but it has since been
    deprecated from the Windows operating system. Hopefully, by the time you're reading
    this book, this feature has been completely implemented in Qt for Windows 8 and
    10.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在撰写本章时，`QMediaRecorder`类仅支持macOS、Linux、移动平台和Windows XP上的视频录制。目前在Windows
    8和Windows 10上不起作用，但将在即将推出的版本之一中移植过去。主要原因是Qt在Windows平台上使用Microsoft的`DirectShow`
    API来录制视频，但自那时起已经从Windows操作系统中停用。希望在您阅读本书时，这个功能已经完全在Qt中为Windows 8和10实现。
- en: If it hasn't, you may use third-party plugins that use `OpenCV` API for recording
    video, such as the **Qt Media Encoding Library** (**QtMEL**) API, as a temporary
    solutions. Do note that the code used in QtMEL is completely different than the
    one we're showing here in this chapter.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有，您可以使用使用`OpenCV` API进行视频录制的第三方插件，例如**Qt媒体编码库**（**QtMEL**）API，作为临时解决方案。请注意，QtMEL中使用的代码与我们在本章中展示的代码完全不同。
- en: 'For more information about QtMEL, please check out the following link:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 有关QtMEL的更多信息，请查看以下链接：
- en: '[http://kibsoft.ru](http://kibsoft.ru).'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://kibsoft.ru](http://kibsoft.ru)。'
- en: Summary
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned how to connect to our camera using Qt. We have
    also learned how to capture an image or record a video from the camera. In the
    next chapter, we will learn about the networking module and try and make an instant
    messenger using Qt!
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用Qt连接到我们的摄像头。我们还学习了如何从摄像头捕获图像或录制视频。在下一章中，我们将学习有关网络模块，并尝试使用Qt制作即时通讯工具！
