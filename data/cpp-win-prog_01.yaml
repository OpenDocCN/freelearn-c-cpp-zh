- en: Chapter 1. Introduction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。简介
- en: The purpose of this book is to learn how to develop applications in Windows.
    In order to do so, I have developed Small Windows, which is a C++ object-oriented
    class library for graphical applications in Windows.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的目的在于学习如何在 Windows 中开发应用程序。为了做到这一点，我开发了 Small Windows，这是一个用于 Windows 图形应用程序的
    C++ 面向对象类库。
- en: The idea is to guide you into Windows programming by introducing increasingly
    more advanced applications written in C++ with Small Windows, thereby hiding the
    technical details of the **Windows 32-bit Applications Programming Interface**
    (**Win32 API**), which is the underlying library for Windows development. With
    this approach, we can focus on the business logic without struggling with the
    underlying technical details. If you are interested in knowing how the Win32 API
    works, the second part of this book gives a detailed description of how Small
    Windows is implemented.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 想法是通过介绍使用 Small Windows 编写的越来越高级的应用程序来引导你进入 Windows 编程，从而隐藏 **Windows 32 位应用程序编程接口**（**Win32
    API**）的技术细节，这是 Windows 开发的基础库。采用这种方法，我们可以专注于业务逻辑，而不必与底层的技术细节纠缠。如果你对了解 Win32 API
    的工作原理感兴趣，本书的第二部分详细描述了 Small Windows 的实现方式。
- en: 'This book is made up of two parts, where the first part describes the applications
    developed in C++ with Small Windows. While some books have many examples, this
    book only includes six examples, among which the last four are rather advanced:
    the Tetris game, a drawing program, a word processor, and a spreadsheet program.
    Note that this book is not only a tutorial about Windows programming, but also
    a tutorial about how to develop object-oriented graphical applications.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书由两部分组成，第一部分描述了使用 Small Windows 开发的应用程序。虽然有些书包含许多示例，但本书只包括六个示例，其中最后四个相对较复杂：俄罗斯方块游戏、绘图程序、文字处理程序和电子表格程序。请注意，本书不仅是一本关于
    Windows 编程的教程，也是一本关于如何开发面向对象的图形应用程序的教程。
- en: The second part holds a detailed description of the implementation of Small
    Windows in the Win32 API. Note that the Win32 API is not introduced until the
    second part. Some of you may be satisfied with the high level aspects of Small
    Windows and only want to study application-specific problems, while others may
    want to read the second part in order to understand how the classes, methods,
    and macros of Small Windows are implemented in the Win32 API.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 第二部分详细描述了 Small Windows 在 Win32 API 中的实现。请注意，Win32 API 直到第二部分才介绍。有些人可能对 Small
    Windows 的高级特性感到满意，只想研究特定应用程序的问题，而其他人可能想阅读第二部分，以了解 Small Windows 的类、方法和宏如何在 Win32
    API 中实现。
- en: Naturally, I am aware of the existence of modern object-oriented class libraries
    for Windows. However, the purpose of those libraries is to make it easier for
    the developer by hiding the details of the architecture, which also prevents the
    developer from using the Windows architecture to its full extent. Even though
    the Win32 API has been around for a while, I regard it as the best way to develop
    professional Windows applications and to understand the Windows architecture.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 自然，我意识到现代面向对象的类库也存在于 Windows 中。然而，那些库的目的是通过隐藏架构的细节来简化开发者的工作，这也阻止了开发者充分利用 Windows
    架构。尽管 Win32 API 已经存在了一段时间，但我认为它是开发专业 Windows 应用程序和了解 Windows 架构的最佳方式。
- en: All source code is given in this book; it is also available as a Visual Studio
    solution.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本书提供了所有源代码；它也可以作为 Visual Studio 解决方案提供。
- en: The library
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 库
- en: This section gives an introduction to Small Windows. The first part of a Small
    Windows application is the `MainWindow` function. It corresponds to `main` in
    regular C++. Its task is to set the name of the application and create the main
    window of the application.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本节介绍了 Small Windows。Small Windows 应用程序的第一部分是 `MainWindow` 函数。它对应于常规 C++ 中的 `main`
    函数。其任务是设置应用程序的名称并创建应用程序的主窗口。
- en: In this book we talk about **definitions** and **declarations**. A declaration
    is just a notification for the compiler, while a definition is what defines the
    feature. Below is the declaration of the `MainWindow` function. Its definition
    is left to the user of Small Windows.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们讨论了 **定义** 和 **声明**。声明只是对编译器的通知，而定义则是定义特性的内容。下面是 `MainWindow` 函数的声明。其定义留给
    Small Windows 的用户。
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Simply put, in Windows the application does not take any initiative; rather,
    it waits for messages and reacts when it receives them. Informally speaking, *you
    do not call Windows, Windows calls you*.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，在 Windows 中，应用程序不会采取任何主动行动；相反，它等待消息，并在收到它们时做出反应。非正式地说，*你不是调用 Windows，而是
    Windows 调用你*。
- en: The most central part of Small Windows is the `Application` class. In Windows,
    each event generates a message that is sent to the window that has input focus
    at the moment. The `Application` class implements the `RunMessageLoop` method,
    which makes sure that each message is sent to the correct window. It also closes
    the application when a special quit message is sent.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 小窗口的核心部分是 `Application` 类。在 Windows 中，每个事件都会生成一个消息，该消息发送到当前具有输入焦点的窗口。`Application`
    类实现了 `RunMessageLoop` 方法，确保每个消息都发送到正确的窗口。当发送特殊退出消息时，它还会关闭应用程序。
- en: 'The creation of a window takes place in two steps. In the first step, the `RegisterWindowClasses`
    method sets features such as style, color, and appearance. Note that Windows classes
    are not C++ classes:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 创建窗口分为两个步骤。在第一步中，`RegisterWindowClasses` 方法设置诸如样式、颜色和外观等特性。请注意，Windows 类不是 C++
    类：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The next step is to create an individual window, which is done by the `Window`
    class. All `virtual` methods are empty and are intended to be overridden by sub
    classes shown as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建一个单独的窗口，这是通过 `Window` 类完成的。所有 `virtual` 方法都是空的，并旨在由以下子类覆盖：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'A window can be visible or invisible, enabled or disabled. When a window is
    enabled, it accepts mouse, touch, and keyboard input:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 窗口可以是可见的或不可见的，可以是启用的或禁用的。当窗口被启用时，它接受鼠标、触摸和键盘输入：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `OnMove` and the `OnSize` methods are called when the window is moved or
    resized. The `OnHelp` method is called when the user presses the *F1* key or the
    **Help** button in a message box:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当窗口移动或调整大小时，会调用 `OnMove` 和 `OnSize` 方法。当用户按下 *F1* 键或消息框中的 **帮助** 按钮时，会调用 `OnHelp`
    方法：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The **client area** is the part of the window that it is possible to paint
    in. Informally, the client area is the window minus its frame. The contents of
    the client area can be zoomed. The default zoom factor is 1.0:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**客户端区域**是窗口中可以绘制的部分。非正式地说，客户端区域是窗口减去其框架。客户端区域的内容可以缩放。默认缩放因子是 1.0：'
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The **timer** can be set to an interval in milliseconds. The `OnTimer` method
    is called on every interval. It is possible to set up several timers, as long
    as they have different identity numbers:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**计时器**可以设置为毫秒间隔。每隔一段时间就会调用 `OnTimer` 方法。只要它们有不同的身份号码，就可以设置多个计时器：'
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `OnMouseDown`, `OnMouseUp`, and `OnDoubleClick` methods are called when
    the user presses, releases, or double-clicks on a mouse button. The `OnMouseMove`
    method is called when the user moves the mouse with at least one button pressed.
    The `OnMouseWheel` method is called when the user moves the mouse wheel with one
    click:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户按下、释放或双击鼠标按钮时，会调用 `OnMouseDown`、`OnMouseUp` 和 `OnDoubleClick` 方法。当用户至少按下鼠标按钮移动鼠标时，会调用
    `OnMouseMove` 方法。当用户滚动鼠标滚轮时，会调用 `OnMouseWheel` 方法：
- en: '[PRE7]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `OnTouchDown`, `OnTouchMove`, and `OnTouchDown` methods work in the same
    way as the mouse methods. However, as the user can touch several points at the
    same time, the methods takes lists of points rather than an individual point:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnTouchDown`、`OnTouchMove` 和 `OnTouchDown` 方法的工作方式与鼠标方法相同。然而，由于用户可以同时触摸多个点，因此方法接受点的列表而不是单个点：'
- en: '[PRE8]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `OnKeyDown` and `OnKeyUp` methods are called when the user presses or releases
    a key. If the user presses a graphical key (a key with an ASCII value between
    32 and 127, inclusive), the `OnChar` method is called in between:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户按下或释放一个键时，会调用 `OnKeyDown` 和 `OnKeyUp` 方法。如果用户按下图形键（ASCII 值在 32 到 127 之间的键），则在之间调用
    `OnChar` 方法：
- en: '[PRE9]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `Invalidate` method marks a part of the client area (or the whole client
    area) to be repainted; the area becomes **invalidated**. The area is cleared before
    the painting if `clear` is `true`. The `UpdateWindow` method forces a repainting
    of the invalidated area. It causes the `OnPaint` method to be called eventually:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`Invalidate` 方法标记客户端区域的一部分（或整个客户端区域）需要重绘；该区域变为**无效**。如果 `clear` 为 `true`，则在绘制之前清除该区域。`UpdateWindow`
    方法强制重绘无效区域。它最终会调用 `OnPaint` 方法：'
- en: '[PRE10]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `OnPaint` method is called when some part of the client area needs to be
    repainted and the `OnPrint` method is called when it is sent to a printer. Their
    default behavior is to call the `OnDraw` method with `Paint` or `Print` as the
    value of the `drawMode` parameter:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当客户端区域需要重新绘制时，会调用`OnPaint`方法，当它被发送到打印机时，会调用`OnPrint`方法。它们的默认行为是调用`OnDraw`方法，其中`drawMode`参数的值为`Paint`或`Print`：
- en: '[PRE11]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The `OnClose` method closes the window if `TryClose` returns `true`. The `OnDestroy`
    method is called when the window is being closed:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`TryClose`返回`true`，则`OnClose`方法会关闭窗口。当窗口正在关闭时，会调用`OnDestroy`方法：
- en: '[PRE12]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following methods inspect and modify the size and position of the window.
    Note that we cannot set the size of the client area; it can only be set indirectly
    by resizing the window:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下方法检查并修改窗口的大小和位置。请注意，我们无法直接设置客户端区域的大小；它只能通过调整窗口大小间接设置：
- en: '[PRE13]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the word processor and spreadsheet programs in this book, we handle text
    and need to calculate the size of individual characters. The following methods
    calculate the width of a character with a given font. They also calculate the
    height, ascent, and average character width of a font:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中的文字处理程序和电子表格程序中，我们处理文本并需要计算单个字符的大小。以下方法使用给定的字体计算字符的宽度。它们还计算字体的行高、上升和平均字符宽度：
- en: '[PRE14]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The ascent line separates the upper and lower part of a letter, shown as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 上升线分隔字母的上部和下部，如下所示：
- en: '![The library](img/B05475_01_01.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![该库](img/B05475_01_01.jpg)'
- en: 'Finally, the `MessageBox` method displays a simple message box in the window:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`MessageBox`方法在窗口中显示一个简单的消息框：
- en: '[PRE15]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `Window` class also uses the `Graphics` class responsible for drawing text
    and geometrical objects in the window. A reference to a `Graphics` object is sent
    to the `OnPaint`, `OnPrint`, and `OnDraw` methods in the `Window` class. It can
    be used to draw lines, rectangles, and ellipses and to write text:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`Window`类还使用负责在窗口中绘制文本和几何对象的`Graphics`类。`Graphics`对象的引用被发送到`Window`类中的`OnPaint`、`OnPrint`和`OnDraw`方法。它可以用来绘制线条、矩形和椭圆以及写入文本：'
- en: '[PRE16]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `Document` class extends the `Window` class with some functionality common
    to document-based applications. The scroll thumbs are automatically set to reflect
    the visible part of the document. The mouse wheel moves the vertical scroll bar
    one line-height for each click. The height of a line is set by the constructor.
    The code snippet for it is shown as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`Document`类通过一些功能扩展了`Window`类，这些功能对基于文档的应用程序来说是通用的。滚动滑块会自动设置为反映文档的可视部分。鼠标滚轮每次点击都会移动垂直滚动条一行的高度。行高由构造函数设置。它的代码片段如下所示：'
- en: '[PRE17]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The **dirty flag** is `true` when the user has made a change in the document
    and it needs to be saved. In `Document`, the dirty flag is set manually, but in
    the following `StandardDocument` subclass it is handled by the framework:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在文档中进行了更改且需要保存时，**脏标志**会被设置为`true`。在`Document`中，脏标志是手动设置的，但在下面的`StandardDocument`子类中，它是由框架处理的：
- en: '[PRE18]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The **caret** is the blinking marker that indicates to the user where they should
    input the next character. The keyboard can be set (with the Insert key) to insert
    or overwrite mode. The caret is often a thin vertical bar in insert mode and a
    block with the width of an average character in overwrite mode.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**光标**是闪烁的标记，指示用户应在何处输入下一个字符。键盘可以通过（使用插入键）设置为插入或覆盖模式。在插入模式下，光标通常是一个细长的垂直条，在覆盖模式下是一个宽度为平均字符宽度的块。'
- en: 'The caret can be set or cleared. For instance, in the word processor, the caret
    is visible when the user writes text and invisible when the user marks text. When
    the window gains focus, the caret becomes visible if it has earlier been set.
    When the window loses focus, the caret becomes invisible, regardless of whether
    it has earlier been set:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 光标可以被设置或清除。例如，在文字处理程序中，当用户写入文本时，光标是可见的，当用户标记文本时，光标是不可见的。当窗口获得焦点时，如果之前已经设置了光标，则光标变为可见。当窗口失去焦点时，无论之前是否已设置，光标都变为不可见：
- en: '[PRE19]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'A document may hold a menu bar, which is set by the `SetMenuBar` method:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 文档可能包含一个菜单栏，该菜单栏是通过`SetMenuBar`方法设置的：
- en: '[PRE20]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The `OnDropFiles` method is called when the user drops one or several files
    in the window. Their paths are stored in the path list:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在窗口中拖放一个或多个文件时，会调用`OnDropFiles`方法。它们的路径存储在路径列表中：
- en: '[PRE21]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The keyboard mode of a document can be set to **insert** or **overwrite** as
    follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将文档的键盘模式设置为**插入**或**覆盖**，如下所示：
- en: '[PRE22]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The `OnHorizontalScroll` and `OnVerticalScroll` methods are called when the
    user scrolls the bar by clicking on the scroll bar arrows or the scroll bar fields,
    or dragging the scroll thumbs. The code snippet for it is shown as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户通过点击滚动条箭头或滚动条字段，或拖动滚动滑块来滚动条时，会调用`OnHorizontalScroll`和`OnVerticalScroll`方法。相应的代码片段如下所示：
- en: '[PRE23]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'There is a large set of methods for inspecting or changing scroll bar settings.
    The size of a line or page is set by the constructor:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 存在大量用于检查或更改滚动条设置的方法。行或页的大小由构造函数设置：
- en: '[PRE24]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The `Menu` class handles the menu bar, a menu, a menu item, or a menu item
    separator (a horizontal bar) in the document. The `selection` listener is called
    when the user selects the menu item. The `enable`, `check`, and `radio` listeners
    are called (unless they are null) when the item is about to become visible. If
    they return `true`, the item is enabled or annotated with a check box or radio
    button:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`Menu`类处理文档中的菜单栏、菜单、菜单项或菜单项分隔符（水平条）。当用户选择菜单项时，会调用`selection`监听器。当项目即将可见时，会调用（除非它们为null）`enable`、`check`和`radio`监听器。如果它们返回`true`，则项目被启用或带有复选框或单选按钮的标注：'
- en: '[PRE25]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: An **accelerator** is a shortcut command. For instance, often, the **Open**
    item in the **File** menu is annotated with the text **Ctrl+O**. This means that
    you can obtain the same result by pressing the ***Ctrl*** key and the ***O***
    key at the same time, just as if you selected the **Open** menu item. In both
    cases, the Open dialog is displayed.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**加速器**是一个快捷命令。例如，通常**文件**菜单中的**打开**项被标注为文本**Ctrl+O**。这意味着您可以同时按下**Ctrl**键和**O**键来获得相同的结果，就像选择了**打开**菜单项一样。在这两种情况下，都会显示打开对话框。'
- en: 'The `Accelerator` class holds only the `TextToAccelerator` method. It interprets
    the menu item text and adds the accelerator, if present, to the accelerator set:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`Accelerator`类只包含`TextToAccelerator`方法。它解释菜单项文本，并将如果存在则添加加速器到加速器集合中：'
- en: '[PRE26]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The `StandardDocument` class extends the `Document` class and sets up a framework
    that takes care of all traditional tasks, such as load and save, and cut, copy,
    and paste, in a document-based application:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`StandardDocument`类扩展了`Document`类，并设置了一个框架，该框架负责处理所有传统任务，例如加载和保存，以及剪切、复制和粘贴，在基于文档的应用程序中：'
- en: '[PRE27]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The `StandardDocument` class comes equipped with the common **File**, **Edit**,
    and **Help** menus. The **File** menu can optionally (if the `print` parameter
    is `true`) be equipped with menu items for printing and print previewing:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`StandardDocument`类配备了常见的**文件**、**编辑**和**帮助**菜单。**文件**菜单可以可选地（如果`print`参数为`true`）配备打印和打印预览的菜单项：'
- en: '[PRE28]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The `ClearDocument` method is called when the user selects the **New** menu
    item; its task is to clear the document. The `WriteDocumentToStream` method is
    called when the user selects the **Save** or **Save As** menu item and the `ReadDocumentFromStream`
    method is called when the user selects the **Open** menu item:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户选择**新建**菜单项时，会调用`ClearDocument`方法；其任务是清除文档。当用户选择**保存**或**另存为**菜单项时，会调用`WriteDocumentToStream`方法；当用户选择**打开**菜单项时，会调用`ReadDocumentFromStream`方法：
- en: '[PRE29]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The `CopyAscii`, `CopyUnicode`, and `CopyGeneric` methods are called when the
    user selects the **Cut** or **Copy** menu item and the corresponding `ready` method
    returns `true`. The code snippet for it is shown as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户选择**剪切**或**复制**菜单项并且相应的`ready`方法返回`true`时，会调用`CopyAscii`、`CopyUnicode`和`CopyGeneric`方法。相应的代码片段如下所示：
- en: '[PRE30]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In the same way, the `PasteAscii`, `PasteUnicode`, and `PasteGeneric` methods
    are called when the user selects the **Paste** menu item and the corresponding
    `ready` method returns `true`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，当用户选择**粘贴**菜单项并且相应的`ready`方法返回`true`时，会调用`PasteAscii`、`PasteUnicode`和`PasteGeneric`方法：
- en: '[PRE31]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The `OnDropFile` method checks the path list and accepts the drop if exactly
    one file has the suffix of the document type of the application (set by the constructor):'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnDropFile` 方法检查路径列表，如果恰好有一个文件具有应用程序（由构造函数设置）的文档类型后缀，则接受拖放操作：'
- en: '[PRE32]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In Small Windows, we do not care about the pixel size. Instead, we use **logical
    units** that stay the same, regardless of the physical resolution of the screen.
    We can choose from the following three coordinate systems:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在小窗口中，我们不关心像素大小。相反，我们使用**逻辑单位**，这些单位保持不变，无论屏幕的物理分辨率如何。我们可以从以下三个坐标系中选择：
- en: '`LogicalWithScroll`: A logical unit is one hundredth of a millimeter, with
    the current scroll bar settings taken into account. The drawing program and word
    processor use this system.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LogicalWithScroll`：逻辑单位是毫米的一百分之一，同时考虑当前滚动条设置。绘图程序和文字处理程序使用这个系统。'
- en: '`LogicalWithoutScroll`: A logical unit is one hundredth of a millimeter also
    in this case, but the current scroll bar settings are ignored. The spreadsheet
    program uses this system.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LogicalWithoutScroll`：在这种情况下，逻辑单位也是毫米的一百分之一，但当前滚动条设置被忽略。电子表格程序使用这个系统。'
- en: '`PreviewCoordinate`: The client area of the window is set to a fixed logical
    size when the window is created. This means that the size of the logical units
    changes when the user changes the window size. The Tetris game and the `PreviewDocument`
    class uses this system.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PreviewCoordinate`：当窗口创建时，窗口的客户区域被设置为固定的逻辑大小。这意味着当用户改变窗口大小时，逻辑单位的大小也会改变。俄罗斯方块游戏和`PreviewDocument`类使用这个系统。'
- en: 'Besides the `StandardDocument` class, there is also the `PrintPreviewDocument`,
    which class that also extends the `Document` class. It displays one of the pages
    of a standard document. It is possible for the user to change the page by using
    the arrow keys and the ***Page Up*** and ***Page Down*** keys or by using the
    vertical scroll bar:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`StandardDocument`类之外，还有一个`PrintPreviewDocument`类，它也扩展了`Document`类。它显示标准文档的一页。用户可以通过使用箭头键和***向上翻页***和***向下翻页***键或使用垂直滚动条来更改页面：
- en: '[PRE33]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'There are also the simple auxiliary classes:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有一些简单的辅助类：
- en: '`Point`: It holds a two-dimensional point (x and y)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Point`：它包含一个二维点（x和y）'
- en: '`Size`: It holds two-dimensional width and height'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Size`：它包含二维的宽度和高度'
- en: '`Rect`: It holds the four corners of a rectangle'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Rect`：它包含矩形的四个角'
- en: '`DynamicList`: It holds a dynamic list'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DynamicList`：它包含一个动态列表'
- en: '`Tree`: It holds a tree structure'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Tree`：它包含一个树形结构'
- en: '`InfoList`: It holds a list of generic information that can be transformed
    into a memory block'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InfoList`：它包含一个可以转换成内存块的通用信息列表'
- en: The `Registry` class holds an interface to the **Windows Registry**, the database
    in the Windows system that we can use to store values in between the execution
    of our applications. The `Clipboard` class holds an interface to the **Windows
    Clipboard**, an area in Windows intended for short-term data storage that we can
    use to store information cut, copied, and pasted between applications.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`Registry`类包含对**Windows注册表**的接口，这是Windows系统中我们可以用来在应用程序执行之间存储值的数据库。`Clipboard`类包含对**Windows剪贴板**的接口，这是Windows中用于短期数据存储的区域，我们可以用它来在应用程序之间存储剪切、复制和粘贴的信息。'
- en: The `Dialog` class is designed for customized dialogs. The `Control` class is
    the root class for the controls of the dialog. The `CheckBox`, `RadioButton`,
    `PushButton`, `ListBox`, and `ComboBox` classes are classes for the specific controls.
    The `TextField` class holds a text field that can be translated to different types
    by the `Converter` class. Finally, the `PageSetupDialog` class extends the `Dialog`
    class and implements a dialog with controls and converters.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`Dialog`类是为自定义对话框设计的。`Control`类是对话框控制的根类。`CheckBox`、`RadioButton`、`PushButton`、`ListBox`和`ComboBox`类是特定控制的类。`TextField`类包含一个可以被`Converter`类转换成不同类型的文本字段。最后，`PageSetupDialog`类扩展了`Dialog`类，并实现了一个带有控制和转换器的对话框。'
- en: Summary
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter has given an introduction to Small Windows. In [Chapter 2](ch02.html
    "Chapter 2. Hello, Small World!"), *Hello, Small World*, we will start to develop
    applications with Small Windows.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了小型窗口。在[第2章](ch02.html "第2章。你好，小型世界！")“你好，小型世界”中，我们将开始使用小型窗口开发应用程序。
