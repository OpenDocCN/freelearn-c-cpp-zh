- en: Part One – OOP The Easy Way
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一部分 – 面向对象编程的简单方法
- en: '*What is object-oriented programming? My guess is that object-oriented programming
    will be in the 1980’s what structured programming was in the 1970’s. Everyone
    will be in favor of it. Every manufacturer will promote his products as supporting
    it. Every manager will pay lip service to it. Every programmer will practice it
    (differently). And no one will know just what it is.*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*什么是面向对象编程？我的猜测是，面向对象编程将在20世纪80年代成为像结构化编程在20世纪70年代一样。每个人都会支持它。每个制造商都会推广他的产品以支持它。每个经理都会口头上支持它。每个程序员都会实践它（不同）。但没有人会真正知道它是什么。*'
- en: '*Tim Rentsch,* **Object oriented programming**—[https://dl.acm.org/citation.cfm?id=947961](https://dl.acm.org/citation.cfm?id=947961'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*Tim Rentsch*，**面向对象编程**—[https://dl.acm.org/citation.cfm?id=947961](https://dl.acm.org/citation.cfm?id=947961)'
- en: )
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '**Object-Oriented Programming** (**OOP**) has its beginnings in the simulation-focused
    features of the Simula programming language but was famously developed and evangelized
    by the Smalltalk team at Xerox’s Palo Alto Research Center. They designed a computing
    system intended to be personal, with a programming environment accessible to children
    who could learn about the world and about the computer simultaneously by modeling
    real-world problems on their computer.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**面向对象编程**（**OOP**）起源于Simula编程语言的模拟功能，但由施乐帕洛阿尔托研究中心的Smalltalk团队著名地开发和推广。他们设计了一个旨在个人使用的计算系统，通过在计算机上模拟现实世界问题，使孩子们能够同时了解世界和计算机，从而拥有一个易于儿童使用的编程环境。'
- en: 'I recently researched the propagation and extension of OOP from PARC to the
    wider software engineering community, which formed the background to my dissertation
    *We Need to (Small)Talk: object-oriented programming with graphical code browsers*—[https://www.academia.edu/34882629/We_need_to_Small_talk_object-oriented_programming_with_graphical_code_browsers](https://www.academia.edu/34882629/We_need_to_Small_talk_object-oriented_programming_with_graphical_code_browsers).
    What I found confused me: how had this simple design language for children to
    construct computer programs become so complicated and troublesome that professional
    software engineers struggled to understand it before declaring it a failure and
    reaching for other paradigms?'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我最近研究了OOP从PARC传播到更广泛的软件工程社区的情况，这构成了我的论文《我们需要（小型）谈话：带有图形代码浏览器的面向对象编程》的背景——[https://www.academia.edu/34882629/We_need_to_Small_talk_object-oriented_programming_with_graphical_code_browsers](https://www.academia.edu/34882629/We_need_to_Small_talk_object-oriented_programming_with_graphical_code_browsers)。我发现的结果让我感到困惑：这种简单的儿童构建计算机程序的设计语言是如何变得如此复杂和麻烦，以至于专业软件工程师在将其宣布为失败并寻求其他范例之前，都难以理解它？
- en: 'A textbook on my shelf, “A Touch of Class,” by Bertrand Meyer, claims to be
    “a revolutionary introductory programming textbook that makes learning programming
    fun and rewarding.” At 876 pages, it makes it a good workout, too: not for the
    schoolchild, but for the “entering-computer-science student” at degree level.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我书架上的一本教科书，“A Touch of Class”，由Bertrand Meyer所著，声称是一本“革命性的入门级编程教科书，使学习编程变得有趣且有益。”876页的篇幅使其成为一项很好的锻炼：不是针对学校儿童，而是针对“进入计算机科学领域的学生”。
- en: 'Digging further showed that the field of object thinking, object technology,
    OOP, or whatever you would like to call it had been subject to two forces:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 深入挖掘表明，对象思维、对象技术、OOP或你愿意称之为什么的领域，已经受到两种力量的影响：
- en: '**Additive complexity**. Consultants, academics, and architects keen to make
    their mark on the world had extended basic underlying ideas to provide their own,
    unique, marketable contributions. While potentially valuable in isolation, the
    aggregation of these additions (and they were, as we shall see, deliberately aggregated
    in some cases) yields a rat’s nest of complexity.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加性复杂性**。顾问、学者和建筑师们渴望在世界上留下自己的印记，他们扩展了基本的基本思想，以提供他们自己独特、可销售的贡献。虽然这些贡献在孤立的情况下可能很有价值，但它们的累积（正如我们将看到的，在某些情况下是故意累积的）产生了一个复杂的迷宫。'
- en: '**Structured on-ramps**. To make OOP appear easier and more accessible, people
    developed “object-oriented” extensions to existing programming tools and processes.
    While this made it easy to access the *observable features* of OOP, it made it
    ironically more difficult to access the *mental shift* needed to take full advantage
    of what is fundamentally a thought process and problem-solving technique. By fitting
    the object model into existing systems, technologists doomed it to stay within
    existing mindsets.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**结构化入门**。为了使面向对象编程（OOP）看起来更容易、更易于访问，人们开发了针对现有编程工具和过程的“面向对象”扩展。虽然这使得访问OOP的*可观察特性*变得容易，但它讽刺地使得访问所需的*思维转变*更加困难，而这种转变本质上是一种思维过程和解决问题的技术。通过将对象模型纳入现有系统，技术人员注定使其停留在现有的思维模式中。'
- en: About the Example Code
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于示例代码
- en: 'In this part of the book, I have consciously chosen to use “mainstream,” popular
    programming languages wherever possible. I have not stuck to any one language,
    but have used things that most experienced programmers should be able to understand
    at a glance: Ruby, Python, and JavaScript will be common. Where I’ve used other
    languages, I’ve done so to express a particular historical context (Smalltalk,
    Erlang, and Eiffel will be prevalent here) or to show ideas from certain communities
    (Haskell or Lisp).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的这一部分，我故意选择尽可能使用“主流”的流行编程语言。我没有坚持使用任何一种语言，而是使用大多数经验丰富的程序员应该能够一眼看懂的语言：Ruby、Python和JavaScript将是常见的。当我使用其他语言时，我这样做是为了表达特定的历史背景（Smalltalk、Erlang和Eiffel将在这里普遍存在）或展示来自某些社区的思想（Haskell或Lisp）。
- en: One of the points of this part of the book is that as a cognitive tool, OOP
    is not specific to any programming language, and indeed many of the languages
    that are billed as object-oriented languages make what (or at least large parts
    of what) harder. Picking any one language for the sample code would then mean
    only presenting a subset of OOP.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本书这一部分的一个观点是，作为认知工具，面向对象编程（OOP）并不特定于任何编程语言，实际上，许多被标榜为面向对象语言的编程语言使得（至少是大部分）面向对象编程变得更难。因此，选择任何一种语言作为示例代码意味着只能展示面向对象编程的一个子集。
