["```cpp\nCreateUser name:alexboly -> userid 1\nCreateUser name: johndoe -> userid 2\nPostMessage userid: 1, message: 'Hello, world!' -> messageid 1\nPostMessage userid: 2, message: 'Hi @alexboly' -> messageid 2\nCreateNotification userid: 1, notification: \"Message from johndoe\"\nPostMessage userid: 1, message: 'Hi @johndoe' -> messageid 3\nCreateNotification userid: 2, notification: \"Message from alexboly\"\nLikeMessage userid: 2, messageid: 3\n...\n```", "```cpp\nCreateAuthor alexboly => authorid 1\nCreateAuthor johndoe => authorid 2\n...\nAddText index: 2400, authorid:1, text: \"something interesting here.\"\nAddText index: 2427, authorid:2, text: \"yes, that's interesting\" => \n    \"something interesting here. yes that's interesting\"\nDeleteText index: 2400, length: 10, authorid: 1 =>\"interesting here. \n    yes that's interesting\"\n...\n```", "```cpp\nCreateAuthor alexboly => authorid 1\nCreateAuthor johndoe => authorid 2\n...\nAddText index: 2400, authorid:1, text: \"something interesting here.\"\nAddText index: 2427, authorid:2, text: \"yes, that's interesting\" => \n    \"something interesting here. yes that's interesting\"\nDeleteText index: 2400, length: 10, authorid: 1 =>\"interesting here. \n    yes that's interesting\"\n...\n```", "```cpp\nTEST_CASE(\"Create User\"){\n    EventStore eventStore;\n    ...\n    auto alexId = createUser(\"alexboly\", eventStore);\n    ...\n    CHECK_EQ(lastEvent, expectedEvent);\n}\n```", "```cpp\nauto makeCreateUserEvent = [](const string& handle, const int id){\n    return map<string, string>{\n            {\"type\", \"CreateUser\"}, \n            {\"handle\", handle}, \n            {\"id\", to_string(id)}\n    };\n};\n```", "```cpp\ntypedef map<string, string> Event;\nauto makeCreateUserEvent = [](const string& handle, const int id){\n    return Event{\n            {\"type\", \"CreateUser\"}, \n            {\"handle\", handle}, \n            {\"id\", to_string(id)}\n    };\n};\n```", "```cpp\nclass EventStore : public list<Event>{\n    public:\n        EventStore() : list<Event>(){\n        };\n};\n```", "```cpp\nTEST_CASE(\"Create User\"){\n    auto handle = \"alexboly\";\n    EventStore eventStore;\n\n    auto alexId = createUser(handle, eventStore);\n\n    auto expectedEvent = makeCreateUserEvent(handle, alexId);\n    auto event = eventStore.back();\n    CHECK_EQ(event, expectedEvent);\n}\n```", "```cpp\nint id = 1;\nauto createUser = [](string handle, EventStore& eventStore){\n    eventStore.push_back(makeCreateUserEvent(handle, id));\n    return id;\n};\n```", "```cpp\nTEST_CASE(\"Post Message\"){\n    auto handle = \"alexboly\";\n    auto message = \"Hello, world!\";\n    EventStore eventStore;\n\n    auto alexId = createUser(handle, eventStore);\n    auto messageId = postMessage(alexId, message, eventStore);\n    auto expectedEvent = makePostMessageEvent(alexId, message, \n        messageId);\n    auto event = eventStore.back();\n    CHECK_EQ(event, expectedEvent);\n}\n```", "```cpp\nauto makePostMessageEvent = [](const int userId, const string& message, int id){\n    return Event{\n            {\"type\", \"PostMessage\"}, \n            {\"userId\", to_string(userId)}, \n            {\"message\", message},\n            {\"id\", to_string(id)}\n    };\n};\n```", "```cpp\nauto postMessage = [](const int userId, const string& message, \n    EventStore& eventStore){\n      eventStore.push_back(makePostMessageEvent(userId, message, id));\n      return id;\n};\n```", "```cpp\nTEST_CASE(\"Run events and get the user store\"){\n    auto handle = \"alexboly\";\n    EventStore eventStore;\n\n    auto alexId = createUser(handle, eventStore);\n    auto dataStore = eventStore.play();\n\n    CHECK_EQ(dataStore.users.back(), User(alexId, handle));\n}\n```", "```cpp\nclass User{\n    public:\n        int id;\n        string handle;\n        User(int id, string handle): id(id), handle(handle){};\n};\n```", "```cpp\nclass DataStore{\n    public:\n        list<User> users;\n};\n```", "```cpp\n  class EventStore : public list<Event>{\n    public:\n       DataStore play(){\n            DataStore dataStore;\n            for(Event event :  *this){\n                if(event[\"type\"] == \"CreateUser\"){\n                    dataStore.users.push_back(User(stoi(event[\"id\"]), \n                        event[\"handle\"]));\n                }\n            };\n            return dataStore;\n        };\n}\n```", "```cpp\nauto createUserEventToUser = [](Event event){\n    return User(stoi(event[\"id\"]), event[\"handle\"]);\n};\n```", "```cpp\nauto createUserEventToUser = [](Event event){\n    return User(stoi(event[\"id\"]), event[\"handle\"]);\n};\n```", "```cpp\ntemplate<typename Entity>\nauto playEvents = [](const auto& events, const auto& eventType, \n    auto playEvent){\n      list<Event> allEventsOfType;\n      auto filterEventByThisEventType = bind(filterEventByEventType, \n        _1, eventType);\n      copy_if(events.begin(),events.end(),back_insert_iterator\n        (allEventsOfType), filterEventByThisEventType);\n      list<Entity> entities(allEventsOfType.size());\n      transform(allEventsOfType.begin(), allEventsOfType.end(),    \n        entities.begin(), playEvent); \n      return entities;\n};\n```", "```cpp\nclass EventStore : public list<Event>{\n    public:\n        EventStore() : list<Event>(){\n        };\n        DataStore play(){\n            DataStore dataStore;\n            dataStore.users = playEvents<User>(*this, \"CreateUser\", \n                createUserEventToUser);\n            return dataStore;\n        };\n};\n```", "```cpp\nCreateUser handle:alexboly -> id 1\nDeleteUser id: 1\nPostMessage userId: 1, text: \"Hello, world!\" -> user with id 1 doesn't \n                                                exist anymore\n```"]