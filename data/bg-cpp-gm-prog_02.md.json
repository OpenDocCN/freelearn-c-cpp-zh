["```cpp\nconst float PI = 3.141f; \nconst int PLANETS_IN_SOLAR_SYSTEM = 8; \nconst int NUMBER_OF_ENEMIES = 2000; \n\n```", "```cpp\n// What is the player's score? \nint playerScore; \n\n// What is the players first initial \nchar playerInitial; \n\n// What is the value of pi \nfloat valuePi; \n\n// Is the player alive or dead? \nbool isAlive; \n\n```", "```cpp\nplayerScore = 0; \nplayerInitial = 'J'; \nvaluePi = 3.141f; \nisAlive = true; \n\n```", "```cpp\nint playerScore = 0; \nchar playerInitial = 'J'; \nfloat valuePi = 3.141f; \nbool isAlive = true; \n\n```", "```cpp\n// Create a video mode object \nVideoMode vm(1920, 1080); \n\n```", "```cpp\n// Create a texture to hold a graphic on the GPU \nTexture textureBackground; \n\n```", "```cpp\n// Player gets a new high score \nhiScore = score; \n\n```", "```cpp\n// Set the score to 100 \nscore = 100; \n\n```", "```cpp\n// Add to the score when an alien is shot \nscore = aliensShot + wavesCleared; \n\n```", "```cpp\n// Add 100 to whatever the score currently is \nscore = score + 100; \n\n```", "```cpp\n// Uh oh lost a life \nlives = lives - 1; \n\n```", "```cpp\n// How many aliens left at end of game \naliensRemaining = aliensTotal - aliensDestroyed; \n\n```", "```cpp\n// Make the remaining hit points lower based on swordLevel \nhitPoints = hitPoints / swordLevel; \n\n```", "```cpp\n// Give player something back for recycling a block \nrecycledValueOfBlock = originalValue / .9f; \n\n```", "```cpp\n// answer is equal to 100 - of course \nanswer = 10 * 10; \n\n```", "```cpp\n// biggerAnswer = 1000 - of course \nbiggerAnswer = 10 * 10 * 10; \n\n```", "```cpp\n// Add one to myVariable \nmyVariable = myVariable + 1; \n\n```", "```cpp\n// Much neater and quicker \nmyVariable ++; \n\n```", "```cpp\nplayerHealth = playerHealth -1; \n\n```", "```cpp\nplayerHealth --; \n\n```", "```cpp\nsomeVariable = 10; \n\n// Multiply the variable by 10 and put the answer back in variable \nsomeVariable *= 10; \n// someVariable now equals 100 \n\n// Divide someVariable by 5 put the answer back into the variable \nsomeVariable /= 5; \n// someVariable now equals 20 \n\n// Add 3 to someVariable and put the answer back into the variable \nsomeVariable += 3; \n// someVariable now equals 23 \n\n// Take 25 from someVariable and put the answer back into the variable \nsomeVariable -= 25; \n// someVariable now equals -2 \n\n```", "```cpp\nint main() \n{ \n\n   // Create a video mode object \n   VideoMode vm(1920, 1080); \n\n   // Create and open a window for the game \n   RenderWindow window(vm, \"Timber!!!\", Style::Fullscreen); \n\n   // Create a texture to hold a graphic on the GPU \n   Texture textureBackground; \n\n   // Load a graphic into the texture \n   textureBackground.loadFromFile(\"graphics/background.png\"); \n\n   // Create a sprite \n   Sprite spriteBackground; \n\n   // Attach the texture to the sprite \n   spriteBackground.setTexture(textureBackground); \n\n   // Set the spriteBackground to cover the screen \n   spriteBackground.setPosition(0, 0); \n\n // Make a tree sprite\n   Texture textureTree;\n   textureTree.loadFromFile(\"graphics/tree.png\");   \n   Sprite spriteTree;   \n   spriteTree.setTexture(textureTree);   \n   spriteTree.setPosition(810, 0);\n\n   while (window.isOpen()) \n   { \n\n```", "```cpp\n// Make a tree sprite \nTexture textureTree; \ntextureTree.loadFromFile(\"graphics/tree.png\"); \nSprite spriteTree; \nspriteTree.setTexture(textureTree); \nspriteTree.setPosition(810, 0); \n\n// Prepare the bee\nTexture textureBee;\ntextureBee.loadFromFile(\"graphics/bee.png\");\nSprite spriteBee;\nspriteBee.setTexture(textureBee);\nspriteBee.setPosition(0, 800);\n// Is the bee currently moving?\nbool beeActive = false;\n\n// How fast can the bee fly\nfloat beeSpeed = 0.0f; \n\nwhile (window.isOpen()) \n{ \n\n```", "```cpp\n// Prepare the bee \nTexture textureBee; \ntextureBee.loadFromFile(\"graphics/bee.png\"); \nSprite spriteBee; \nspriteBee.setTexture(textureBee); \nspriteBee.setPosition(0, 800); \n\n// Is the bee currently moving? \nbool beeActive = false; \n\n// How fast can the bee fly \nfloat beeSpeed = 0.0f; \n\n// make 3 cloud sprites from 1 texture\nTexture textureCloud;\n\n// Load 1 new texture\ntextureCloud.loadFromFile(\"graphics/cloud.png\");\n\n// 3 New sprites with the same texture\nSprite spriteCloud1;\nSprite spriteCloud2;\nSprite spriteCloud3;\nspriteCloud1.setTexture(textureCloud);\nspriteCloud2.setTexture(textureCloud);\nspriteCloud3.setTexture(textureCloud);\n\n// Position the clouds off screen\nspriteCloud1.setPosition(0, 0);\nspriteCloud2.setPosition(0, 250);\nspriteCloud3.setPosition(0, 500);\n\n// Are the clouds currently on screen?\nbool cloud1Active = false;\nbool cloud2Active = false;\nbool cloud3Active = false;\n\n// How fast is each cloud?\nfloat cloud1Speed = 0.0f;\nfloat cloud2Speed = 0.0f;\nfloat cloud3Speed = 0.0f; \n\nwhile (window.isOpen()) \n{ \n\n```", "```cpp\n/* \n**************************************** \nDraw the scene \n**************************************** \n*/ \n\n// Clear everything from the last run frame \nwindow.clear(); \n\n// Draw our game scene here \nwindow.draw(spriteBackground); \n\n// Draw the clouds\nwindow.draw(spriteCloud1);\nwindow.draw(spriteCloud2);\nwindow.draw(spriteCloud3);\n\n// Draw the tree\nwindow.draw(spriteTree);\n\n// Draw the insect\nwindow.draw(spriteBee); \n\n// Show everything we just drew \nwindow.display(); \n\n```", "```cpp\n// Seed the random number generator with the time \nsrand((int)time(0)); \n\n```", "```cpp\n// Get the random number & save it to a variable called number \nint number = (rand() % 100); \n\n```", "```cpp\nif (Keyboard::isKeyPressed(Keyboard::Escape)) \n{ \n   window.close(); \n} \n\n```", "```cpp\nif(isComingOverBridge) \n{ \n   // Shoot them \n} \n\n```", "```cpp\nif(isComingOverBridge) \n{ \n   // Shoot them \n} \n\nelse \n{ \n   // Hold position \n} \n\n```", "```cpp\nbool isComingOverBridge; \nint enemyTroops; \nint friendlyTroops; \n\n// Initialize the previous variables, one way or another \n\n// Now the if \nif(isComingOverBridge && friendlyTroops > enemyTroops) \n{ \n   // shoot them \n} \n\nelse if(isComingOverBridge && friendlyTroops < enemyTroops)  \n{ \n   // blow the bridge \n} \n\nelse \n{ \n   // Hold position \n} \n\n```", "```cpp\nif(isComingOverBridge && friendlyTroops > enemyTroops) \n\n```", "```cpp\nelse if(isComingOveBridge && friendlyTroops < enemyTroops) \n\n```", "```cpp\nif(isComingOverBridge && friendlyTroops >=  enemyTroops) \n\n```", "```cpp\nif (wavingWhiteFlag) \n{ \n   // Take prisoners \n} \n\n```", "```cpp\nif (!wavingWhiteFlag) \n{ \n   // not surrendering so check everything else  \n   if(isComingOverTheBridge && friendlyTroops >= enemyTroops) \n   { \n      // shoot them \n   } \n\n   else if(isComingOverTheBridge && friendlyTroops < enemyTroops)  \n   { \n      // blow the bridge \n   } \n\n} \n\nelse \n{   \n   // this is the else for our first if \n   // Take prisoners \n{ \n\n// Holding position \n\n```", "```cpp\nint currentPosition = spriteBee.getPosition().x; \n\n```", "```cpp\ncurrentPosition += 200/5000; \n\n```", "```cpp\n// How fast is each cloud? \nfloat cloud1Speed = 0; \nfloat cloud2Speed = 0; \nfloat cloud3Speed = 0; \n\n// Variables to control time itself\nClock clock; \n\nwhile (window.isOpen()) \n{ \n\n```", "```cpp\n/* \n**************************************** \nUpdate the scene \n**************************************** \n*/ \n\n// Measure time\nTime dt = clock.restart(); \n\n/* \n**************************************** \nDraw the scene \n**************************************** \n*/ \n\n```", "```cpp\n/* \n**************************************** \nUpdate the scene \n**************************************** \n*/ \n\n// Measure time \nTime dt = clock.restart(); \n\n// Setup the bee\nif (!beeActive)\n{   \n  // How fast is the bee\n  srand((int)time(0));   \n  beeSpeed = (rand() % 200) + 200;   \n\n  // How high is the bee   \n  srand((int)time(0) * 10);   \n  float height = (rand() % 500) + 500;   \n  spriteBee.setPosition(2000, height);   \n  beeActive = true;\n} \n\n/* \n**************************************** \nDraw the scene \n**************************************** \n*/ \n\n```", "```cpp\n// Set up the bee \nif (!beeActive) \n{ \n\n   // How fast is the bee \n   srand((int)time(0) ); \n   beeSpeed = (rand() % 200) + 200; \n\n   // How high is the bee \n   srand((int)time(0) * 10); \n   float height = (rand() % 1350) + 500; \n   spriteBee.setPosition(2000, height); \n   beeActive = true; \n\n} \nelse\n// Move the bee\n{   \n  spriteBee.setPosition(     \n    spriteBee.getPosition().x -      \n    (beeSpeed * dt.asSeconds()),     \n    spriteBee.getPosition().y);  \n\n  // Has the bee reached the right hand edge of the screen?   \n  if (spriteBee.getPosition().x < -100)   \n  {    \n    // Set it up ready to be a whole new cloud next frame     \n    beeActive = false;   \n  }\n} \n\n/* \n**************************************** \nDraw the scene \n**************************************** \n*/ \n\n```", "```cpp\n1000 - 0.0002 x 399\n```", "```cpp\n// Has the bee reached the right hand edge of the screen? \nif (spriteBee.getPosition().x < -100) \n{ \n   // Set it up ready to be a whole new cloud next frame \n   beeActive = false; \n} \n\n```", "```cpp\nelse \n// Move the bee \n{ \n\n   spriteBee.setPosition( \n      spriteBee.getPosition().x -  \n      (beeSpeed * dt.asSeconds()), \n      spriteBee.getPosition().y); \n\n   // Has the bee reached the right hand edge of the screen? \n   if (spriteBee.getPosition().x < -100) \n   { \n      // Set it up ready to be a whole new bee next frame \n      beeActive = false; \n   } \n} \n\n// Manage the clouds\n// Cloud 1\nif (!cloud1Active)\n{   \n  // How fast is the cloud   \n  srand((int)time(0) * 10);   \n  cloud1Speed = (rand() % 200);  \n\n  // How high is the cloud   \n  srand((int)time(0) * 10);   \n  float height = (rand() % 150);   \n  spriteCloud1.setPosition(-200, height);   \n  cloud1Active = true;\n} \n\n/* \n**************************************** \nDraw the scene \n**************************************** \n*/ \n\n```", "```cpp\n// Manage the clouds \nif (!cloud1Active) \n{ \n\n   // How fast is the cloud \n   srand((int)time(0) * 10); \n   cloud1Speed = (rand() % 200); \n\n   // How high is the cloud \n   srand((int)time(0) * 10); \n   float height = (rand() % 150); \n   spriteCloud1.setPosition(-200, height); \n   cloud1Active = true; \n\n} \nelse\n{   \n  spriteCloud1.setPosition(     \n    spriteCloud1.getPosition().x +      \n    (cloud1Speed * dt.asSeconds()),     \n    spriteCloud1.getPosition().y);   \n\n  // Has the cloud reached the right hand edge of the screen?   \n  if (spriteCloud1.getPosition().x > 1920)   \n  {     \n    // Set it up ready to be a whole new cloud next frame     \n    cloud1Active = false;   \n  }\n} \n\n/* \n**************************************** \nDraw the scene \n**************************************** \n*/ \n\n```", "```cpp\n... \n\n// Cloud 2\nif (!cloud2Active)\n{   \n  // How fast is the cloud   \n  srand((int)time(0) * 20);   \n  cloud2Speed = (rand() % 200);   \n  // How high is the cloud   \n  srand((int)time(0) * 20);   \n  float height = (rand() % 300) - 150;   \n  spriteCloud2.setPosition(-200, height);   \n  cloud2Active = true;\n}\nelse\n{   \n  spriteCloud2.setPosition(     \n    spriteCloud2.getPosition().x +      \n    (cloud2Speed * dt.asSeconds()),     \n    spriteCloud2.getPosition().y);   \n  // Has the cloud reached the right hand edge of the screen?   \n  if (spriteCloud2.getPosition().x > 1920)   \n  {     \n    // Set it up ready to be a whole new cloud next frame     \n    cloud2Active = false;   \n  }\n}\nif (!cloud3Active)\n{   \n  // How fast is the cloud   \n  srand((int)time(0) * 30);   \n  cloud3Speed = (rand() % 200);   \n  // How high is the cloud   \n  srand((int)time(0) * 30);   \n  float height = (rand() % 450) - 150;   \n  spriteCloud3.setPosition(-200, height);   \n  cloud3Active = true;\n}\nelse\n{   \n  spriteCloud3.setPosition(     \n    spriteCloud3.getPosition().x +      \n    (cloud3Speed * dt.asSeconds()),     \n    spriteCloud3.getPosition().y); \n\n  // Has the cloud reached the right hand edge of the screen?   \n  if (spriteCloud3.getPosition().x > 1920)   \n  {     \n    // Set it up ready to be a whole new cloud next frame     \n    cloud3Active = false;   \n  }\n} \n\n/* \n**************************************** \nDraw the scene \n**************************************** \n*/ \n\n```"]