- en: Optimizing Code with Metaprogramming
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用元编程优化代码
- en: 'We discussed the optimizing techniques using lazy evaluation in the previous
    chapter, and used the delaying process, caching technique, and memoization to
    make our code run fast. In this chapter, we will optimize the code using **metaprogramming**,
    where we will create a code that will create more code. The topics we will discuss
    in this chapter are as follows:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一章讨论了使用惰性评估的优化技术，并使用了延迟处理、缓存技术和记忆化来使我们的代码运行更快。在本章中，我们将使用**元编程**来优化代码，我们将创建一个将创建更多代码的代码。本章我们将讨论的主题如下：
- en: Introduction to metaprogramming
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元编程简介
- en: The part that builds the template metaprogramming
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建模板元编程的部分
- en: Refactoring flow control into template metaprogramming
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将流程控制重构为模板元编程
- en: Running the code in the compile-time execution
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在编译时执行代码
- en: The advantages and disadvantages of template metaprogramming
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板元编程的优缺点
- en: Introduction to metaprogramming
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 元编程简介
- en: The simplest way to say this is that metaprogramming is a technique that creates
    a code by using a code. Implementing metaprogramming, we write a computer program
    that manipulates the other programs and treats them as its data. In addition,
    templates are a compile-time mechanism in C++ that is **Turing-complete**, which
    means any computation expressible by a computer program can be computed, in some
    form, by a template metaprogram before runtime. It also uses recursion a lot and
    has immutable variables. So, in metaprogramming, we create code that will run
    when the code is compiled.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，元编程是一种通过使用代码来创建代码的技术。实现元编程时，我们编写一个计算机程序，操作其他程序并将它们视为数据。此外，模板是C++中的一种编译时机制，它是**图灵完备**的，这意味着任何可以由计算机程序表达的计算都可以在运行时之前以某种形式通过模板元编程来计算。它还大量使用递归，并具有不可变变量。因此，在元编程中，我们创建的代码将在编译代码时运行。
- en: Preprocessing the code using a macro
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用宏预处理代码
- en: 'To start our discussion on metaprogramming, let''s go back to the era when
    the ANSI C programming language was a popular language. For simplicity, we used
    the C preprocessor by creating a macro. The C parameterized macro is also known
    as **metafunctions**, and is one of the examples of metaprogramming. Consider
    the following parameterized macro:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始我们关于元编程的讨论，让我们回到ANSI C编程语言流行的时代。为了简单起见，我们使用了C预处理器创建了一个宏。C参数化宏也被称为**元函数**，是元编程的一个例子。考虑以下参数化宏：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Since the C++ programming language has a drawback compatibility to the C language,
    we can compile the preceding macro using our C++ compiler. Let''s create the code
    to consume the preceding macro, which will be as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 由于C++编程语言对C语言的兼容性有缺陷，我们可以使用C++编译器编译前面的宏。让我们创建代码来使用前面的宏，代码如下：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As we can see in the preceding `macro.cpp` code, we pass two arguments to the
    `MAX` macro since it is a parameterized macro, which means the parameter can be
    obtained from the users. If we run the preceding code, we should see the following
    output on the console:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的`macro.cpp`代码所示，我们将两个参数传递给`MAX`宏，因为它是一个参数化的宏，这意味着参数可以从用户那里获得。如果我们运行前面的代码，应该在控制台上看到以下输出：
- en: '![](img/c3415c09-ba2c-4b3c-9377-afd18f2d9d30.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c3415c09-ba2c-4b3c-9377-afd18f2d9d30.png)'
- en: 'As we discussed at the beginning of this chapter, metaprogramming is a code
    that will run in compile time. By using a macro in the preceding code, we can
    demonstrate there''s a new code generated from the `MAX` macro. The preprocessor
    will parse the macro in compile time and bring the new code. In compile time,
    the compiler modifies the code as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本章开头讨论的那样，元编程是在编译时运行的代码。通过在前面的代码中使用宏，我们可以展示从`MAX`宏生成的新代码。预处理器将在编译时解析宏并带来新的代码。在编译时，编译器将修改代码如下：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Besides a one line macro preprocessor, we can also generate a multiline macro
    metafunction. To achieve this, we can use the backslash character at the end of
    the line. Let''s suppose we need to swap the two values. We can create a parameterized
    macro named `SWAP` and consume it like the following code:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 除了单行宏预处理器之外，我们还可以生成多行宏元函数。为了实现这一点，我们可以在每行末尾使用反斜杠字符。假设我们需要交换两个值。我们可以创建一个名为`SWAP`的参数化宏，并像下面的代码一样使用它：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'As we can see in the preceding code, we will create a multiline preprocessor
    macro and use backslash characters at the end of each line. Each time we invoke
    the `SWAP` parameterized macro, it will then be replaced with the implementation
    of the macro. We will see the following output on the console if we run the preceding
    code:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的代码所示，我们将创建一个多行预处理器宏，并在每行末尾使用反斜杠字符。每次调用`SWAP`参数化宏时，它将被替换为宏的实现。如果我们运行前面的代码，将在控制台上看到以下输出：
- en: '![](img/502d5c3f-23b1-4998-b4c8-04ea9ef089bf.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/502d5c3f-23b1-4998-b4c8-04ea9ef089bf.png)'
- en: Now we have a basic understanding of the metaprogramming, especially in metafunction,
    we can move further in the next topics.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对元编程有了基本的了解，特别是在元函数中，我们可以在下一个主题中进一步学习。
- en: 'We use parenthesis for each variable in every implementation of the macro preprocessor
    because the preprocessor is simply replacing our code with the implementation
    of the macro. Let''s suppose we have the following macro:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个宏预处理器的实现中，我们为每个变量使用括号，因为预处理器只是用宏的实现替换我们的代码。假设我们有以下宏：
- en: '`MULTIPLY(a,b) (a * b)` It won''t be a problem if we pass the number as the
    parameters. However, if we pass an operation as the argument, a problem will occur.
    For instance, if we use the `MULTIPLY` macro as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`MULTIPLY(a,b) (a * b)` 如果我们将数字作为参数传递，那么这不会成为问题。然而，如果我们将一个操作作为参数传递，就会出现问题。例如，如果我们像下面这样使用`MULTIPLY`宏：'
- en: '`MULTIPLY(x+2,y+5);`'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`MULTIPLY(x+2,y+5);`'
- en: 'Then the compiler will replace it as `(x+2*y+5)`. This happens because the
    macro just replaces the `a` variable with the `x + 2` expression and the `b` variable
    with the `y + 5` expression, with any additional parentheses. And because the
    order of multiplication is higher than addition, we will have got the result as
    follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 然后编译器将其替换为`(x+2*y+5)`。这是因为宏只是用`x + 2`表达式替换`a`变量，用`y + 5`表达式替换`b`变量，而没有额外的括号。因为乘法的顺序高于加法，我们将得到以下结果：
- en: '`(x+2y+5)`'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`(x+2y+5)`'
- en: And that is not what we expect. As a result, the best approach is to use parenthesis
    in each variable of the parameter.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是我们期望的结果。因此，最好的方法是在参数的每个变量中使用括号。
- en: Dissecting template metaprogramming in the Standard Library
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解剖标准库中的模板元编程
- en: We discussed the Standard Library in [Chapter 1](58c8c3cc-432a-4664-be4d-a78917b16f15.xhtml),
    *Diving into Modern C++*, and dealt with it in the previous chapter too. The Standard
    Library provided in the C++ language is mostly a template that contains an incomplete
    function. However, it will be used to generate complete functions. The template
    metaprogramming is the C++ template to generate C++ types and code in compile
    time.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第1章](58c8c3cc-432a-4664-be4d-a78917b16f15.xhtml)中讨论了标准库，*深入现代C++*，并在上一章中也处理了它。C++语言中提供的标准库主要是一个包含不完整函数的模板。然而，它将用于生成完整的函数。模板元编程是C++模板，用于在编译时生成C++类型和代码。
- en: 'Let''s pick up one of the classes in the Standard Library--the `Array` class.
    In the `Array` class, we can define a data type for it. When we instance the array,
    the compiler actually generates the code for an array of the data type we define.
    Now, let''s try to build a simple `Array` template implementation as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们挑选标准库中的一个类--`Array`类。在`Array`类中，我们可以为其定义一个数据类型。当我们实例化数组时，编译器实际上会生成我们定义的数据类型的数组的代码。现在，让我们尝试构建一个简单的`Array`模板实现，如下所示：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, we instance the `char` and `int` arrays as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们实例化`char`和`int`数组如下：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'What the compiler does is it creates these two implementations of the template
    based on the data type we define. Although we won''t see this in the code, the
    compiler actually creates the following code:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器所做的是基于我们定义的数据类型创建这两个模板的实现。虽然我们在代码中看不到这一点，但编译器实际上创建了以下代码：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As we can see in the preceding code snippet, the template metaprogramming is
    a code that creates another code in compile time.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的代码片段中所看到的，模板元编程是在编译时创建另一个代码的代码。
- en: Building the template metaprogramming
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建模板元编程
- en: Before we go further in the template metaprogramming discussion, it's better
    if we discuss the skeleton that builds the template metaprogramming. There are
    four factors that form the template metaprogramming--**type**, **value**, **branch**,
    and **recursion**. In this topic, we will dig into the factors that form the template.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在进一步讨论模板元编程之前，最好讨论一下构建模板元编程的骨架。有四个因素构成模板元编程--**类型**，**值**，**分支**和**递归**。在这个话题中，我们将深入探讨构成模板的因素。
- en: Adding a value to the variable in the template
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在模板中添加一个值到变量
- en: 'At the beginning of this chapter, we discussed the concept of metafunction
    when we talked about the macro preprocessor. In the macro preprocessor, we explicitly
    manipulate the source code; in this case, the macro (metafunction) manipulates
    the source code. In contrast, we work with types in C++ template metaprogramming.
    This means the metafunction is a function that works with types. So, the better
    approach to use template metaprogramming is working with type parameters only
    when possible. When we are talking about the variables in template metaprogramming,
    it''s actually not a variable since the value on it cannot be modified. What we
    need from the variable is its name so we can access it. Because we will code with
    types, the named values are `typedef`, as we can see in the following code snippet:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的开头，我们讨论了元函数的概念，当我们谈到宏预处理器时。在宏预处理器中，我们明确地操纵源代码；在这种情况下，宏（元函数）操纵源代码。相反，在C++模板元编程中，我们使用类型。这意味着元函数是一个与类型一起工作的函数。因此，使用模板元编程的更好方法是尽可能只使用类型参数。当我们谈论模板元编程中的变量时，实际上它并不是一个变量，因为它上面的值是不能被修改的。我们需要的是变量的名称，这样我们才能访问它。因为我们将使用类型编码，命名的值是`typedef`，正如我们在以下代码片段中所看到的：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'By using the preceding code, we store the `int` type to the `valueDataType`
    alias name so we can access the data type using the `valueDataType` variable.
    If we need to store a value instead of the data type to the variable, we can use
    `enum` so it will be the data member of the `enum` itself. Let''s take a look
    at the following code snippet if we want to store the value:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用前面的代码，我们将`int`类型存储到`valueDataType`别名中，这样我们就可以使用`valueDataType`变量来访问数据类型。如果我们需要将值而不是数据类型存储到变量中，我们可以使用`enum`，这样它将成为`enum`本身的数据成员。如果我们想要存储值，让我们看一下以下代码片段：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Based on the preceding code snippet, we can now access the `value` variable
    to fetch its value.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 基于前面的代码片段，我们现在可以访问`value`变量以获取其值。
- en: Mapping a function to the input parameters
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将函数映射到输入参数
- en: 'We can add the variable to the template metaprogramming. Now, what we have
    to do next is retrieve the user parameters and map them to a function. Let''s
    suppose we want to develop a `Multiplexer` function that will multiply two values
    and we have to use the template metaprogramming. The following code snippet can
    be used to solve this problem:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将变量添加到模板元编程中。现在，我们接下来要做的是检索用户参数并将它们映射到一个函数。假设我们想要开发一个`Multiplexer`函数，它将两个值相乘，我们必须使用模板元编程。以下代码片段可用于解决这个问题：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As we can see in the preceding code snippet, the template requires two arguments,
    `A` and `B`, from the user, and it will use them to get the value of `result`
    variable by multiplying these two parameters. We can access the result variable
    using the following code:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的代码片段中所看到的，模板需要用户提供两个参数`A`和`B`，它将使用它们来通过将这两个参数相乘来获取`result`变量的值。我们可以使用以下代码访问结果变量：
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If we run the preceding code snippet, the `i` variable will store `6` since
    it will calculate `2` times `3`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行前面的代码片段，`i`变量将存储`6`，因为它将计算`2`乘以`3`。
- en: Choosing the correct process based on the condition
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 根据条件选择正确的过程
- en: 'When we have more than one function, we have to choose one over the others
    based on certain conditions. We can construct the conditional branch by providing
    two alternative specializations of the `template` class, as shown here:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们有多个函数时，我们必须根据某些条件选择其中一个。我们可以通过提供`template`类的两个替代特化来构建条件分支，如下所示：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'As we can see in the preceding `template` code, we have two templates that
    have `X` and `A`/`B` as their type. When the template has only a single type,
    that is, `typename X`, it means that the two types (`CheckingType <X, X>`) we
    compare are exactly the same. Otherwise, these two data types are different. The
    following code snippet can be used to consume the two preceding templates:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的`template`代码中所看到的，我们有两个模板，它们的类型分别为`X`和`A`/`B`。当模板只有一个类型，即`typename X`时，这意味着我们比较的两种类型（`CheckingType
    <X, X>`）完全相同。否则，这两种数据类型是不同的。以下代码片段可以用来使用前面的两个模板：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As we can see in the preceding code snippet, we try to compare the `UnknownType`
    data type with the `int` type. The `UnknownType` data type might be coming from
    the other process. Then, we can decide the next process we want to run by comparing
    these two types using templates.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的代码片段中所看到的，我们试图将`UnknownType`数据类型与`int`类型进行比较。`UnknownType`数据类型可能来自其他过程。然后，我们可以通过使用模板来比较这两种类型来决定我们想要运行的下一个过程。
- en: Up to here, you might wonder how template multiprogramming will help us make
    code optimization. Soon we will use the template metaprogramming to optimize code.
    However, we need to discuss other things that will solidify our knowledge in template
    multiprogramming. For now, please be patient and keep reading.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你可能会想知道模板多编程如何帮助我们进行代码优化。很快我们将使用模板元编程来优化代码。然而，我们需要讨论其他事情来巩固我们在模板多编程中的知识。现在，请耐心阅读。
- en: Repeating the process recursively
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 递归重复这个过程
- en: We have successfully added value and data type to the template, then created
    a branch to decide the next process based on the current condition. Another thing
    we have to consider in the basic template is repeating the process. However, since
    the variable in the template is immutable, we cannot iterate the sequence. Instead,
    we have to recur the process as we discussed in [Chapter 4](7c3fb034-5951-4003-905f-48dd745a1c6f.xhtml),
    *Repeating Method Invocation Using Recursive Algorithm*.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功地将值和数据类型添加到模板中，然后根据当前条件创建了一个分支来决定下一个过程。在基本模板中，我们还需要考虑重复这个过程。然而，由于模板中的变量是不可变的，我们无法迭代序列。相反，我们必须像我们在[第4章](7c3fb034-5951-4003-905f-48dd745a1c6f.xhtml)中讨论的那样，通过递归算法重复这个过程。
- en: 'Let''s suppose we are developing a template to calculate the factorial value.
    The first thing we have to do is develop a general template that passes the `I`
    value to the function as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们正在开发一个模板来计算阶乘值。我们首先要做的是开发一个将`I`值传递给函数的通用模板，如下所示：
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'As we can see in the preceding code, we can obtain the value of the factorial
    by running the following code:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的代码中所看到的，我们可以通过运行以下代码来获得阶乘的值：
- en: '[PRE14]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the preceding code, `I` is an integer number.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`I`是一个整数。
- en: 'Next, we have to develop a template to ensure that it doesn''t end up with
    an infinite loop. We can create the following template that passes zero (`0`)
    as a parameter to it:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们必须开发一个模板来确保它不会陷入无限循环。我们可以创建以下模板，将零（`0`）作为参数传递给它：
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now we have a pair of templates that will generate the value of the factorial
    in compile time. The following is a sample code to get the value of `Factorial(10)`
    in compile time:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一对模板，可以在编译时生成阶乘的值。以下是一个示例代码，用于在编译时获取`Factorial(10)`的值：
- en: '[PRE16]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: If we run the preceding code, we will get `3628800` as a result of the factorial
    of `10`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行前面的代码，我们将得到`10`的阶乘的结果`3628800`。
- en: Selecting a type in compile-time
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在编译时选择类型
- en: 'As we discussed in the preceding topic, `type` is a basic part of a template.
    However, we can select a certain type based on the input from the user. Let''s
    create a template that can decide what type should be used in the variable. The
    following `types.cpp` code will show the implementation of the template:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的主题中讨论的，`type`是模板的基本部分。然而，我们可以根据用户的输入选择特定的类型。让我们创建一个模板，可以决定变量中应该使用什么类型。以下的`types.cpp`代码将展示模板的实现：
- en: '[PRE17]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As we can see in the preceding code, we have a template named `datatype`. This
    template can be used to select the `type` we pass to it. We can use the `using`
    keyword to assign a variable to a `type`. From the preceding `types.cpp` code,
    we will assign a `t` variable to `type` from the `datatype` template. The `t`
    variable now will be `int` since we passed the `int` data type to the template.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的代码中所看到的，我们有一个名为`datatype`的模板。这个模板可以用来选择我们传递给它的`type`。我们可以使用`using`关键字将一个变量分配给`type`。从前面的`types.cpp`代码中，我们将把一个变量`t`分配给`datatype`模板中的`type`。现在，`t`变量将是`int`，因为我们将`int`数据类型传递给了模板。
- en: 'We can also create a code to select the correct data type based on the current
    condition. We will have an `IfElseDataType` template that takes three arguments
    which are `predicate`, the data type when the `predicate` parameter is true, and
    the data type when the `predicate` parameter is false. The code will look as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以创建一个代码来根据当前条件选择正确的数据类型。我们将有一个`IfElseDataType`模板，它接受三个参数，即`predicate`，当`predicate`参数为true时的数据类型，以及当`predicate`参数为false时的数据类型。代码将如下所示：
- en: '[PRE18]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now, by having the `IfElseDataType` template, we can select the correct type
    to the variable based on the condition we have. Let''s suppose we want to assign
    `2147483647` to a variable so we can check if it''s a short number. If so, `myVar`
    will be of type `short`, otherwise, it will be `int`. Moreover, since the maximum
    value of `short` type is `32767`, by giving the predicate as `SHRT_MAX == 2147483647`
    will be resulting `FALSE`. Therefore, the type of `myVar` will be an `int` type,
    as we can see in the following output that will appear on the console:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过`IfElseDataType`模板，我们可以根据我们的条件选择正确的类型给变量。假设我们想要将`2147483647`赋给一个变量，以便我们可以检查它是否是一个短数字。如果是，`myVar`将是`short`类型，否则将是`int`类型。此外，由于`short`类型的最大值是`32767`，通过给定谓词为`SHRT_MAX
    == 2147483647`将导致`FALSE`。因此，`myVar`的类型将是`int`类型，如我们将在控制台上看到的以下输出：
- en: '![](img/c9f65a57-9612-429f-82b7-55741f74cc50.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c9f65a57-9612-429f-82b7-55741f74cc50.png)'
- en: Flow control with template metaprogramming
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用模板元编程进行流程控制
- en: Code flow is an important aspect in coding a program. In many programming languages,
    they have an `if-else`, `switch`, and `do-while` statement to arrange the flow
    of the code. Now, let's refactor the usual flow of code to become a template-based
    flow. We will start by using the `if-else` statement, followed by the `switch`
    statement, and finally ending with the `do-while` statement, all in templates.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 代码流是编写程序的重要方面。在许多编程语言中，它们有`if-else`，`switch`和`do-while`语句来安排代码的流程。现在，让我们将通常的代码流重构为基于模板的流程。我们将首先使用`if-else`语句，然后是`switch`语句，最后以模板的形式结束`do-while`语句。
- en: Deciding the next process by the current condition
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 根据当前条件决定下一个过程
- en: 'Now it''s time to use the template as we discussed previously. Let''s suppose
    we have two functions that we have to choose by a certain condition. What we usually
    do is use the `if-else` statement as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候使用我们之前讨论过的模板了。假设我们有两个函数，我们必须根据某个条件进行选择。我们通常会使用`if-else`语句，如下所示：
- en: '[PRE19]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'As we can see in the preceding code, we have two functions--`TrueStatement()`
    and `FalseStatement()`. We also have a condition in the code--`2 + 3 == 5`. And
    since the condition is `TRUE`, then the `TrueStatement()` function will be run
    as we can see in the following screenshot:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的代码中所看到的，我们有两个函数--`TrueStatement()`和`FalseStatement()`。我们在代码中还有一个条件--`2
    + 3 == 5`。由于条件是`TRUE`，因此`TrueStatement()`函数将被运行，如我们在下面的截图中所看到的：
- en: '![](img/9e5c6760-bbad-42e6-9208-48d2213aca67.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9e5c6760-bbad-42e6-9208-48d2213aca67.png)'
- en: 'Now, let''s refactor the preceding `condition.cpp` code. We will create three
    templates here. First, the template initialization that inputs the condition as
    follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们重构前面的`condition.cpp`代码。我们将在这里创建三个模板。首先，输入条件的初始化模板如下：
- en: '[PRE20]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Then, we create two templates for each condition--`TRUE` or `FALSE`. The name
    will be as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们为每个条件创建两个模板--`TRUE`或`FALSE`。名称将如下：
- en: '[PRE21]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Each template in the preceding code snippet will run the functions we have
    created before--the `TrueStatement()` and `FalseStatement()` functions. And we
    will get the complete code as the following `conditionmeta.cpp` code:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 前面代码片段中的每个模板将运行我们之前创建的函数--`TrueStatement()`和`FalseStatement()`函数。我们将得到完整的代码，如下所示的`conditionmeta.cpp`代码：
- en: '[PRE22]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'As we can see, we put the condition on the bracket of the `IfElse` template,
    then call the `func()` method inside the template. If we run the `conditionmeta.cpp`
    code, we will get the exact same output such as the `condition.cpp` code, as shown
    here:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，我们将条件放在`IfElse`模板的括号中，然后在模板内调用`func()`方法。如果我们运行`conditionmeta.cpp`代码，我们将得到与`condition.cpp`代码完全相同的输出，如下所示：
- en: '![](img/52dfab6d-8e80-4036-9e19-95f40d013725.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52dfab6d-8e80-4036-9e19-95f40d013725.png)'
- en: We now have the `if-else` statement to flow our code in the template metaprogramming.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了`if-else`语句来流动我们的模板元编程代码。
- en: Selecting the correct statement
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择正确的语句
- en: 'In C++ programming, and other programming languages as well, we use the `switch`
    statement to select a certain process based on the value we give to the `switch`
    statement. If the value matches with the one of the switch case, it will run the
    process under that case. Let''s take a look at the following `switch.cpp` code
    that implements the `switch` statement:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在C++编程中，以及其他编程语言中，我们使用`switch`语句根据我们给`switch`语句的值来选择某个过程。如果值与switch case中的一个匹配，它将运行该case下的过程。让我们看一下下面的`switch.cpp`代码，它实现了`switch`语句：
- en: '[PRE23]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'As we can see in the preceding code, we have a function named `Square()` that
    takes an argument. The argument we pass to it is based on the value that we give
    to the switch statement. Since the value we pass to switch is `2`, the `Square(2)`
    method will be run. The following screenshot is what we will see on the console
    screen:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的代码中所看到的，我们有一个名为`Square()`的函数，它接受一个参数。我们传递给它的参数是基于我们给switch语句的值。由于我们传递给switch的值是`2`，`Square(2)`方法将被运行。下面的截图是我们将在控制台屏幕上看到的内容：
- en: '![](img/bb934a6e-293e-47b9-b771-cb7d9da4832f.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bb934a6e-293e-47b9-b771-cb7d9da4832f.png)'
- en: 'To refactor the `switch.cpp` code to template metaprogramming, we have to create
    three templates that consist of the function we plan to run. First, we will create
    the initialization template to retrieve the value from the user, as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要将`switch.cpp`代码重构为模板元编程，我们必须创建三个包含我们计划运行的函数的模板。首先，我们将创建初始化模板以从用户那里检索值，如下所示：
- en: '[PRE24]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The preceding initialization template will also be used for the default value.
    Next, we will add two templates for each possible value as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的初始化模板也将用于默认值。接下来，我们将为每个可能的值添加两个模板，如下所示：
- en: '[PRE25]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Each preceding template will run the `Square()` function and pass the argument
    based on the value of the template. The complete code is written as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 每个前面的模板将运行`Square()`函数并根据模板的值传递参数。完整的代码如下所示：
- en: '[PRE26]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'As we can see, we do the same as `conditionmeta.cpp`--we call the `func()`
    method inside the template to run the selected function. The value for this `switch-case`
    condition is the template we put in the angle bracket. If we run the preceding
    `switchmeta.cpp` code, we will see the following output on the console:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，我们与`conditionmeta.cpp`做的一样--我们调用模板内的`func()`方法来运行所选的函数。此`switch-case`条件的值是我们放在尖括号中的模板。如果我们运行前面的`switchmeta.cpp`代码，我们将在控制台上看到以下输出：
- en: '![](img/eeb896aa-2598-4995-b3b0-bbb61386f762.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eeb896aa-2598-4995-b3b0-bbb61386f762.png)'
- en: As we can see in the preceding screenshot, we've got the exact same output for
    `switchmeta.cpp` code as compared to the `switch.cpp` code. Thus, we have successfully
    refactored the `switch.cpp` code into the template metaprogramming.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的截图所示，与`switch.cpp`代码相比，我们对`switchmeta.cpp`代码得到了完全相同的输出。因此，我们已成功将`switch.cpp`代码重构为模板元编程。
- en: Looping the process
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 循环该过程
- en: 'We usually use the `do-while` loop when we iterate something. Let''s suppose
    we need to print certain numbers until it reaches zero (`0`). The code is as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们迭代某些内容时，通常使用`do-while`循环。假设我们需要打印某些数字，直到达到零（`0`）。代码如下所示：
- en: '[PRE27]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'As we can see in the preceding code, we will print the number `100`, decrease
    its value, and print again. It will always run until the number reaches zero (`0`).
    The output on the console should be as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的代码所示，我们将打印数字`100`，减少其值，并再次打印。它将一直运行，直到数字达到零（`0`）。控制台上的输出应该如下所示：
- en: '![](img/1a84c23b-dd08-4dfc-99a6-273c36918e06.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1a84c23b-dd08-4dfc-99a6-273c36918e06.png)'
- en: 'Now, let''s refactor it to the template metaprogramming. Here, we need only
    two templates to achieve the `do-while` loop in template metaprogramming. First,
    we will create the following template:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将其重构为模板元编程。在这里，我们只需要两个模板来实现模板元编程中的`do-while`循环。首先，我们将创建以下模板：
- en: '[PRE28]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The limit in the preceding code is the value that is passed to the `do-while`
    loop. And, to not make the loop become an infinite loop, we have to design the
    `DoWhile` template when it has reached zero (`0`), as shown here:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 前面代码中的限制是传递给`do-while`循环的值。为了不使循环变成无限循环，当它达到零（`0`）时，我们必须设计`DoWhile`模板，如下所示：
- en: '[PRE29]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The preceding template will do nothing since it''s used only to break the loop.
    The complete refactoring of the `do-while` loop is like the following `loopmeta.cpp`
    code:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的模板将什么也不做，因为它只用于中断循环。对`do-while`循环的完全重构如下`loopmeta.cpp`代码：
- en: '[PRE30]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We then call the `func()` method inside the template to run our desired function.
    And, if we run the code, we will see the following output on the screen:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们调用模板内的`func()`方法来运行我们想要的函数。如果我们运行代码，我们将在屏幕上看到以下输出：
- en: '![](img/b5fd496c-ddac-483e-b0db-523307b3c91e.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b5fd496c-ddac-483e-b0db-523307b3c91e.png)'
- en: Again, we have successfully refactored the `loop.cpp` code into `loopmeta.cpp`
    code since both have the exact same output.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们已成功将`loop.cpp`代码重构为`loopmeta.cpp`代码，因为两者的输出完全相同。
- en: Executing the code in compile-time
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在编译时执行代码
- en: As we discussed earlier, template metaprogramming will run the code in compile-time
    by creating a new code. Now, let's see how we can get the compile-time constant
    and generate a compile-time class in this section.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前讨论的，模板元编程将通过创建新代码在编译时运行代码。现在，让我们看看如何获取编译时常量并在本节生成编译时类。
- en: Getting a compile-time constant
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取编译时常量
- en: 'To retrieve a compile-time constant, let''s create a code that has the template
    for a Fibonacci algorithm in it. We will consume the template so the compiler
    will provide the value in compile time. The code should be as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检索编译时常量，让我们创建一个包含斐波那契算法模板的代码。我们将使用模板，这样编译器将在编译时提供值。代码应该如下所示：
- en: '[PRE31]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'As we can see in the preceding code, the value variable in the Fibonacci template
    will provide a compile-time constant. And if we run the preceding code, we will
    see the following output on the console screen:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的代码所示，斐波那契模板中的值变量将提供编译时常量。如果我们运行前面的代码，我们将在控制台屏幕上看到以下输出：
- en: '![](img/015e83df-4905-4a3c-aa49-c8f233a2282c.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/015e83df-4905-4a3c-aa49-c8f233a2282c.png)'
- en: Now, we have `75025` that is generated by the compiler as a compile-time constant.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有`75025`，这是由编译器生成的编译时常量。
- en: Generating the class using a compile-time class generation
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用编译时类生成生成类
- en: 'Besides the generation of a compile-time constant, we will also generate the
    class in compile time. Let''s suppose we have a template to find out the prime
    number in the range `0` to `X`. The following `isprimemeta.cpp` code will explain
    the implementation of the template metaprogramming to find the prime number:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 除了生成编译时常量之外，我们还将在编译时生成类。假设我们有一个模板来找出范围为`0`到`X`的质数。以下的`isprimemeta.cpp`代码将解释模板元编程的实现以找到质数：
- en: '[PRE32]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'There are two kinds of templates with different roles--the **prime checker**,
    that ensures the number that is passed is a prime number, and the **printer**,
    that displays the prime number to the console. The compiler then generates the
    class in compile-time when the code accesses `PrimeNumberPrinter<500> printer`
    and `printer.func()`. And when we run the preceding `isprimemeta.cpp` code, we
    will see the following output on the console screen:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种不同角色的模板--**质数检查器**，确保传递的数字是质数，以及**打印机**，将质数显示到控制台。当代码访问`PrimeNumberPrinter<500>
    printer`和`printer.func()`时，编译器将在编译时生成类。当我们运行前面的`isprimemeta.cpp`代码时，我们将在控制台屏幕上看到以下输出：
- en: '![](img/1377d14f-9287-4e54-93b8-39bf5906fe43.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1377d14f-9287-4e54-93b8-39bf5906fe43.png)'
- en: Since we pass `500` to the template, we will get the prime number from `0` to
    `500`. The preceding output has proven that the compiler has successfully generated
    a compile-time class so we can get the correct value.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将`500`传递给模板，我们将从`0`到`500`得到质数。前面的输出证明了编译器成功生成了一个编译时类，因此我们可以得到正确的值。
- en: Benefits and drawbacks of metaprogramming
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 元编程的利与弊
- en: 'After our discussion about template metaprogramming, the following are the
    advantages we derive:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们讨论完模板元编程之后，以下是我们得到的优点：
- en: Template metaprogramming has no side effect since it is immutable, so we cannot
    modify an existing type
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板元编程没有副作用，因为它是不可变的，所以我们不能修改现有类型
- en: There is better code readability compared to code that does not implement metaprogramming
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与不实现元编程的代码相比，代码可读性更好
- en: It reduces repetition of the code
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它减少了代码的重复
- en: 'Although we can gain benefits from template metaprogramming, there are several
    disadvantages, which are as follows:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们可以从模板元编程中获得好处，但也有一些缺点，如下所示：
- en: The syntax is quite complex.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语法相当复杂。
- en: The compilation time takes longer since we now execute code during compile-time.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译时间较长，因为现在我们在编译时执行代码。
- en: The compiler can optimize the generated code much better and perform inlining,
    for instance, the C `qsort()` function and the C++ `sort` template. In C, the
    `qsort()` function takes a pointer to a comparison function, so there will be
    one copy of the `qsort` code that is not inlined. It will make a call through
    the pointer to the comparison routine. In C++, `std::sort` is a template, and
    it can take a `functor` object as a comparator. There is a different copy of `std::sort`
    for each different type used as a comparator. If we use a `functor` class with
    an overloaded `operator()` function, the call to the comparator can easily be
    inlined into this copy of `std::sort`.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译器可以更好地优化生成的代码并执行内联，例如C中的`qsort()`函数和C++中的`sort`模板。在C中，`qsort()`函数接受一个指向比较函数的指针，因此将有一个未内联的`qsort`代码副本。它将通过指针调用比较例程。在C++中，`std::sort`是一个模板，它可以接受一个`functor`对象作为比较器。对于每种不同类型用作比较器，都有一个不同的`std::sort`副本。如果我们使用一个具有重载的`operator()`函数的`functor`类，比较器的调用可以轻松地内联到`std::sort`的这个副本中。
- en: Summary
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Metaprogramming, especially template metaprogramming, creates new code for us
    automatically so we don't need to write a lot of code in our source. By using
    template metaprogramming, we can refactor the flow control of our code as well
    as run the code in compile-time execution.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 元编程，特别是模板元编程，可以自动为我们创建新的代码，这样我们就不需要在源代码中编写大量的代码。通过使用模板元编程，我们可以重构代码的流程控制，并在编译时执行代码。
- en: In the next chapter, we will talk about concurrency techniques that will bring
    a responsive enhancement to the application that we build. We can run the processes
    in our code simultaneously using the parallelism technique.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论并发技术，这将为我们构建的应用程序带来响应性增强。我们可以使用并行技术同时运行代码中的进程。
