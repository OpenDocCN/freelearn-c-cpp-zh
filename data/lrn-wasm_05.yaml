- en: Creating and Loading a WebAssembly Module
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和加载WebAssembly模块
- en: The flags we passed to the `emcc` command in [Chapter 4](d03f5dbf-8b6e-49aa-96be-9bb64681be24.xhtml), *Installing
    the Required Dependencies*, produced a single `.wasm` file that could be loaded
    and instantiated in the browser using the native `WebAssembly` object. The C code
    was a very simple example intended to test the compiler without having to accommodate
    for included libraries or WebAssembly's limitations. We can overcome some of the
    limitations of WebAssembly in our C / C++ code with minimal performance loss by
    utilizing some of Emscripten's capabilities.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第4章](d03f5dbf-8b6e-49aa-96be-9bb64681be24.xhtml) *安装所需的依赖项*中向`emcc`命令传递的标志产生了一个单一的`.wasm`文件，可以使用本机的`WebAssembly`对象在浏览器中加载和实例化。C代码是一个非常简单的示例，旨在测试编译器，而无需考虑包含的库或WebAssembly的限制。通过利用Emscripten的一些功能，我们可以克服C/C++代码的一些WebAssembly的限制，而只有最小的性能损失。
- en: In this chapter, we'll cover the compilation and loading steps that correspond
    with the use of Emscripten's glue code. We'll also describe the process for compiling/outputting
    strictly `.wasm` files and loading them using the browser's `WebAssembly` object.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖与Emscripten的粘合代码使用对应的编译和加载步骤。我们还将描述使用浏览器的`WebAssembly`对象编译/输出严格的`.wasm`文件并加载它们的过程。
- en: 'Our goal for this chapter is to understand the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是理解以下内容：
- en: The compilation process for C code that utilizes Emscripten's JavaScript "glue"
    code
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用Emscripten的JavaScript“glue”代码编译C代码的过程
- en: How to load an Emscripten module in the browser
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在浏览器中加载Emscripten模块
- en: The compilation process for C code that outputs only `.wasm` files (no "glue"
    code)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只输出`.wasm`文件的C代码编译过程（没有“glue”代码）
- en: How to configure build tasks in VS Code
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在VS Code中配置构建任务
- en: How to compile and load a Wasm module in the browser using the global `WebAssembly`
    object
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用全局的`WebAssembly`对象在浏览器中编译和加载Wasm模块
- en: Compiling C with Emscripten glue code
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Emscripten粘合代码编译C
- en: In [Chapter 4](d03f5dbf-8b6e-49aa-96be-9bb64681be24.xhtml), *Installing the
    Required Dependencies*, you wrote and compiled a simple three-line program to
    ensure your Emscripten installation was valid. We passed several flags to the
    `emcc` command that were required to only output a single `.wasm` file. By passing
    other flags to the `emcc` command, we can output JavaScript glue code alongside
    the `.wasm` file as well as an HTML file to handle the loading process. In this
    section, we're going to write a more complex C program and compile it with the
    output options that Emscripten offers.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](d03f5dbf-8b6e-49aa-96be-9bb64681be24.xhtml) *安装所需的依赖项*中，您编写并编译了一个简单的三行程序，以确保您的Emscripten安装有效。我们向`emcc`命令传递了几个标志，这些标志要求只输出一个`.wasm`文件。通过向`emcc`命令传递其他标志，我们可以在`.wasm`文件旁边输出JavaScript粘合代码以及一个处理加载过程的HTML文件。在本节中，我们将编写一个更复杂的C程序，并使用Emscripten提供的输出选项进行编译。
- en: Writing the example C code
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写示例C代码
- en: We didn't include any header files or pass in any functions in the example we
    covered in [Chapter 4](d03f5dbf-8b6e-49aa-96be-9bb64681be24.xhtml), *Installing
    the Required Dependencies*. Since the intention of the code was solely to test
    if the compiler installation was valid, there wasn't much need. Emscripten offers
    a lot of extra functionality that enables us to interact with our C and C++ code
    with JavaScript and vice versa. Some of these capabilities are Emscripten-specific
    and don't correspond to the *Core Specification* or its APIs. In our first example,
    we'll take advantage of one of Emscripten's ported libraries and a function provided
    by Emscripten's API.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第4章](d03f5dbf-8b6e-49aa-96be-9bb64681be24.xhtml)中涵盖的示例中没有包含任何头文件或传递任何函数，*安装所需的依赖项*。由于代码的目的仅是测试编译器安装是否有效，因此并不需要太多。Emscripten提供了许多额外的功能，使我们能够与JavaScript以及反之互动我们的C和C++代码。其中一些功能是Emscripten特有的，不对应*核心规范*或其API。在我们的第一个示例中，我们将利用Emscripten的一个移植库和Emscripten的API提供的一个函数。
- en: The following program uses a **Simple DirectMedia Layer **(**SDL2**) to move
    a rectangle diagonally across a canvas in an infinite loop. It was taken from
    [https://github.com/timhutton/sdl-canvas-wasm](https://github.com/timhutton/sdl-canvas-wasm),
    but I converted it from C++ to C and modified the code slightly. The code for
    this section is located in the `/chapter-05-create-load-module` folder of the
    `learn-webassembly` repository. Follow the following instructions to compile C
    with Emscripten.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以下程序使用**Simple DirectMedia Layer**（**SDL2**）在画布上对角移动一个矩形的无限循环。它取自[https://github.com/timhutton/sdl-canvas-wasm](https://github.com/timhutton/sdl-canvas-wasm)，但我将其从C++转换为C并稍微修改了代码。本节的代码位于`learn-webassembly`存储库的`/chapter-05-create-load-module`文件夹中。按照以下说明使用Emscripten编译C。
- en: 'Create a folder in your `/book-examples` folder named `/chapter-05-create-load-module`.
    Create a new file in this folder named `with-glue.c` and populate it with the
    following contents:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的`/book-examples`文件夹中创建一个名为`/chapter-05-create-load-module`的文件夹。在此文件夹中创建一个名为`with-glue.c`的新文件，并填充以下内容：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `emscripten_set_main_loop_arg()` toward the end of the `main()` function
    is available because we included `emscripten.h` at the top of the file. The variables
    and functions prefixed with `SDL_` are available because of the `#include <SDL2/SDL.h>`
    at the top of the file. If you're seeing a squiggly red error line under the `<SDL2/SDL.h>`
    statement, you can disregard it. It's due to SDL's `include` path not being present
    in your `c_cpp_properties.json` file.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`main()`函数末尾的`emscripten_set_main_loop_arg()`是可用的，因为我们在文件顶部包含了`emscripten.h`。以`SDL_`为前缀的变量和函数是可用的，因为在文件顶部包含了`#include
    <SDL2/SDL.h>`。如果您在`<SDL2/SDL.h>`语句下看到了红色的波浪线错误，您可以忽略它。这是因为SDL的`include`路径不在您的`c_cpp_properties.json`文件中。'
- en: Compiling the example C code
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编译示例C代码
- en: 'Now that we have our C code written, we''ll need to compile it. One of the
    required flags you must pass to the `emcc` command is `-o <target>`, where `<target>`
    is the path to the desired output file. The extension of that file will do more
    than just output that file; it impacts some of the decisions the compiler makes.
    The following table, taken from Emscripten''s `emcc` documentation at [http://kripken.github.io/emscripten-site/docs/tools_reference/emcc.html#emcc-o-target](http://kripken.github.io/emscripten-site/docs/tools_reference/emcc.html#emcc-o-target),
    defines the generated output types based on the file extension specified:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经编写了我们的C代码，我们需要编译它。您必须传递给`emcc`命令的一个必需标志是`-o <target>`，其中`<target>`是所需输出文件的路径。该文件的扩展名不仅仅是输出该文件；它会影响编译器做出的一些决定。下表摘自Emscripten的`emcc`文档[http://kripken.github.io/emscripten-site/docs/tools_reference/emcc.html#emcc-o-target](http://kripken.github.io/emscripten-site/docs/tools_reference/emcc.html#emcc-o-target)，定义了根据指定的文件扩展名生成的输出类型：
- en: '| **Extension** | **Output** |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| **扩展名** | **输出** |'
- en: '| `<name>.js` | JavaScript glue code (and `.wasm` if the `s WASM=1` flag is
    specified). |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| `<name>.js` | JavaScript胶水代码（如果指定了`s WASM=1`标志，则还有`.wasm`）。 |'
- en: '| `<name>.html` | HTML and separate JavaScript file (`<name>.js`). Having the
    separate JavaScript file improves page load time. |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `<name>.html` | HTML和单独的JavaScript文件（`<name>.js`）。有单独的JavaScript文件可以提高页面加载时间。
    |'
- en: '| `<name>.bc` | LLVM bitcode (default). |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `<name>.bc` | LLVM位码（默认）。 |'
- en: '| `<name>.o` | LLVM bitcode (same as `.bc`). |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `<name>.o` | LLVM位码（与`.bc`相同）。 |'
- en: '| `<name>.wasm` | Wasm file only (with flags specified from [Chapter 4](d03f5dbf-8b6e-49aa-96be-9bb64681be24.xhtml),
    *Installing the Required Dependencies*). |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `<name>.wasm` | 仅Wasm文件（使用[第4章](d03f5dbf-8b6e-49aa-96be-9bb64681be24.xhtml)中指定的标志）。
    |'
- en: You can disregard the `.bc` and `.o` file extensions—we won't need to output
    LLVM bitcode. The `.wasm` extension isn't on the `emcc` *Tools Reference* page,
    but it is a valid option if you pass the correct compiler flags. These output
    options factor into the C/C++ code we write.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以忽略`.bc`和`.o`文件扩展名，我们不需要输出LLVM位码。`.wasm`扩展名不在`emcc` *工具参考*页面上，但如果您传递正确的编译器标志，它是一个有效的选项。这些输出选项影响我们编写的C/C++代码。
- en: Outputting HTML with glue code
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 输出带有胶水代码的HTML
- en: 'If you specify an HTML file extension (for example, `-o with-glue.html`) for
    the output, you''ll end up with a `with-glue.html`, `with-glue.js`, and `with-glue.wasm`
    file (assuming you also specified `-s WASM=1`). If you have a `main()` function
    in the source C/C++ file, it''ll execute that function as soon as the HTML loads.
    Let''s compile our example C code to see this in action. To compile it with the
    HTML file and JavaScript glue code, `cd` into the `/chapter-05-create-load-module` folder
    and run the following command:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您为输出文件指定HTML文件扩展名（例如，`-o with-glue.html`），您将得到一个`with-glue.html`、`with-glue.js`和`with-glue.wasm`文件（假设您还指定了`-s
    WASM=1`）。如果您在源C/C++文件中有一个`main()`函数，它将在HTML加载后立即执行该函数。让我们编译我们的示例C代码，看看它是如何运行的。要使用HTML文件和JavaScript胶水代码进行编译，`cd`到`/chapter-05-create-load-module`文件夹，并运行以下命令：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The first time you run this command, Emscripten is going to download and build
    the `SDL2` library. It could take several minutes to complete this, but you''ll
    only need to wait once. Emscripten caches the library so subsequent builds will
    be much faster. Once the build is complete, you''ll see three new files in the
    folder: `HTML`, `JavaScript`, and `Wasm` files. Run the following command to `serve`
    the file locally:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次运行此命令时，Emscripten将下载并构建`SDL2`库。这可能需要几分钟才能完成，但您只需要等待一次。Emscripten会缓存该库，因此后续构建速度会快得多。构建完成后，您将在文件夹中看到三个新文件：HTML、JavaScript和Wasm文件。运行以下命令在本地`serve`文件：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you open your browser up to `http://127.0.0.1:8080/with-glue.html`, you
    should see the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在浏览器中打开`http://127.0.0.1:8080/with-glue.html`，您应该会看到以下内容：
- en: '![](img/bb584a1f-c5eb-415f-b86a-5904f11404a5.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bb584a1f-c5eb-415f-b86a-5904f11404a5.png)'
- en: Emscripten loading code running in the browser
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中运行Emscripten加载代码
- en: The blue rectangle should be moving diagonally from the upper-left corner of
    the red rectangle to the lower-right. Since you specified a `main()` function
    in the C file, Emscripten knows it should execute it right away. If you open up
    the `with-glue.html` file in VS code and scroll to the bottom of the file, you
    will see the loading code. You won't see any references to the `WebAssembly` object;
    that's being handled in the JavaScript glue code file.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝色矩形应该从红色矩形的左上角对角线移动到右下角。由于您在C文件中指定了`main()`函数，Emscripten知道应该立即执行它。如果您在VS code中打开`with-glue.html`文件并滚动到文件底部，您将看到加载代码。您不会看到任何对`WebAssembly`对象的引用；这在JavaScript胶水代码文件中处理。
- en: Outputting glue code with no HTML
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 输出没有HTML的胶水代码
- en: The loading code that Emscripten generates in the HTML file contains error handling
    and other helpful functions to ensure the module is loading before executing the
    `main()` function. If you specify `.js` for the extension of the output file,
    you'll have to create an HTML file and write the loading code yourself. In the
    next section, we're going to dig into the loading code in more detail.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Emscripten在HTML文件中生成的加载代码包含错误处理和其他有用的功能，以确保模块在执行`main()`函数之前加载。如果您为输出文件的扩展名指定`.js`，则必须自己创建HTML文件并编写加载代码。在下一节中，我们将更详细地讨论加载代码。
- en: Loading the Emscripten module
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载Emscripten模块
- en: Loading and interacting with a module that utilizes Emscripten's glue code is
    considerably different from WebAssembly's JavaScript API. This is because Emscripten
    provides additional functionality for interacting with the JavaScript code. In
    this section, we're going to discuss the loading code that Emscripten provides
    when outputting an HTML file and review the process for loading an Emscripten
    module in the browser.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 加载和与使用Emscripten的胶水代码的模块进行交互与WebAssembly的JavaScript API有很大不同。这是因为Emscripten为与JavaScript代码交互提供了额外的功能。在本节中，我们将讨论Emscripten在输出HTML文件时提供的加载代码，并审查在浏览器中加载Emscripten模块的过程。
- en: Pre-generated loading code
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预生成的加载代码
- en: 'If you specify `-o <target>.html` when running the `emcc` command, Emscripten
    generates an HTML file and automatically adds code to load the module to the end
    of the file. Here''s what the loading code in the HTML file looks like with the
    contents of each `Module` function excluded:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在运行`emcc`命令时指定了`-o <target>.html`，Emscripten会生成一个HTML文件，并自动添加代码来加载模块到文件的末尾。以下是HTML文件中加载代码的样子，其中排除了每个`Module`函数的内容：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The functions within the `Module` object are present to detect and address
    errors, monitor the loading status of the `Module`, and optionally execute some
    functions before or after the `run()` method from the corresponding glue code
    file executes. The `canvas` function, shown in the following snippet, returns
    the `<canvas>` element from the DOM that was specified in the HTML file before
    the loading code:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`Module`对象内的函数用于检测和解决错误，监视`Module`的加载状态，并在对应的粘合代码文件执行`run()`方法之前或之后可选择执行一些函数。下面的代码片段中显示的`canvas`函数返回了在加载代码之前在HTML文件中指定的DOM中的`<canvas>`元素：'
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This code is convenient for detecting errors and ensuring the `Module` is loaded,
    but for our purposes, we won't need to be as verbose.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码方便检测错误并确保`Module`已加载，但对于我们的目的，我们不需要那么冗长。
- en: Writing custom loading code
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写自定义加载代码
- en: 'Emscripten''s generated loading code provides helpful error handling. If you''re
    using Emscripten''s output in production, I would recommend that you include it
    to ensure you''re handling errors correctly. However, we don''t actually need
    all the code to utilize our `Module`. Let''s write some much simpler code and
    test it out. First, let''s compile our C file down to glue code with no HTML output.
    To do that, run the following command:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Emscripten生成的加载代码提供了有用的错误处理。如果你在生产中使用Emscripten的输出，我建议你包含它以确保你正确处理错误。然而，我们实际上不需要所有的代码来使用我们的`Module`。让我们编写一些更简单的代码并测试一下。首先，让我们将我们的C文件编译成没有HTML输出的粘合代码。为此，运行以下命令：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `-s MODULARIZE=1` compiler flag allows us to use a Promise-like API to
    load our `Module`. Once the compilation is complete, create a file in the `/chapter-05-create-load-module`
    folder named `custom-loading.html` and populate it with the following contents:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`-s MODULARIZE=1`编译器标志允许我们使用类似Promise的API来加载我们的`Module`。编译完成后，在`/chapter-05-create-load-module`文件夹中创建一个名为`custom-loading.html`的文件，并填充以下内容：'
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The loading code is now using ES6''s arrow function syntax for the canvas loading
    function, which reduces the lines of code required. Start your local server by
    running the `serve` command within the `/chapter-05-create-load-module` folder:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在加载代码使用了ES6的箭头函数语法来加载画布函数，这减少了所需的代码行数。通过在`/chapter-05-create-load-module`文件夹中运行`serve`命令来启动本地服务器：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'When you navigate to `http://127.0.0.1:8080/custom-loading.html` in your browser,
    you should see this:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在浏览器中导航到`http://127.0.0.1:8080/custom-loading.html`时，你应该看到这个：
- en: '![](img/5089d0d0-ffc7-4874-8cdf-9e307b5c3a1a.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5089d0d0-ffc7-4874-8cdf-9e307b5c3a1a.png)'
- en: Custom loading code running in the browser
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中运行自定义加载代码
- en: Of course, the function we're running isn't very complex, but it demonstrates
    the bare-bones requirements for loading Emscripten's `Module`. We will examine
    the `Module` object in much greater detail in [Chapter 6](cdf64596-59dd-4805-8509-7315b7760b1e.xhtml), *Interacting
    with JavaScript and Debugging*, but for now just be aware that the loading process
    is different from WebAssembly, which we'll cover in the next section.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们运行的函数并不是非常复杂，但它演示了加载Emscripten的`Module`所需的基本要求。我们将在[第6章](cdf64596-59dd-4805-8509-7315b7760b1e.xhtml)中更详细地研究`Module`对象，*与JavaScript交互和调试*，但现在只需知道加载过程与WebAssembly不同，我们将在下一节中介绍。
- en: Compiling C without the glue code
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编译不带粘合代码的C代码
- en: If we want to use WebAssembly according to the official specification, without
    the extra features that Emscripten provides, we need to pass some flags to the
    `emcc` command and ensure we're writing code that can be used by WebAssembly with
    relative ease. In the *Writing the example C code* section, we wrote a program
    that rendered a blue rectangle that moved diagonally across a red canvas. It utilized
    one of Emscripten's ported libraries, SDL2\. In this section, we're going to write
    and compile some C code that doesn't rely on Emscripten's helper methods and ported
    libraries.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要按照官方规范使用WebAssembly，而不使用Emscripten提供的额外功能，我们需要向`emcc`命令传递一些标志，并确保编写的代码可以相对轻松地被WebAssembly使用。在*编写示例C代码*部分，我们编写了一个程序，它在红色画布上对角移动的蓝色矩形。它利用了Emscripten的一个移植库SDL2。在本节中，我们将编写和编译一些不依赖于Emscripten辅助方法和移植库的C代码。
- en: C code for WebAssembly
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于WebAssembly的C代码
- en: 'Before we get to the C code we''ll use for our WebAssembly module, let''s try
    an experiment. Open the CLI in the `/chapter-05-create-load-module` folder, and
    try running this command:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始编写用于WebAssembly模块的C代码之前，让我们进行一个实验。在`/chapter-05-create-load-module`文件夹中打开CLI，并尝试运行以下命令：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You should see a `try-with-glue.wasm` file appear in VS Code''s file explorer
    panel after the compilation is complete. Right-click on the file and select Show
    WebAssembly. The beginning of the corresponding Wat representation should resemble
    the following code:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在编译完成后，你应该在VS Code的文件资源管理器面板中看到一个`try-with-glue.wasm`文件。右键单击该文件，选择显示WebAssembly。相应的Wat表示的开头应该类似于以下代码：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If you wanted to load this in a browser and execute it, you'd have to pass in
    an `importObj` object to WebAssembly's `instantiate()` or `compile()` function
    with an `env` object containing each of those `import "env"` functions. Emscripten
    handles all of this for us behind the scenes with the glue code, which makes it
    an incredibly valuable tool. However, we can replace the SDL2 functionality by
    using the DOM while still tracking the rectangle's location in C.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在浏览器中加载并执行它，你需要向WebAssembly的`instantiate()`或`compile()`函数传递一个`importObj`对象，其中包含每个`import
    "env"`函数的`env`对象。Emscripten在幕后处理所有这些工作，使用粘合代码使其成为一个非常有价值的工具。然而，我们可以通过使用DOM替换SDL2功能，同时仍然在C中跟踪矩形的位置。
- en: 'We will write the C code differently to ensure we only have to pass a few functions
    into the `importObj.env` object to execute the code. Create a file named `without-glue.c`
    in the `/chapter-05-create-load-module` folder and populate it with the following
    contents:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将以不同的方式编写C代码，以确保我们只需要将一些函数传递到`importObj.env`对象中来执行代码。在`/chapter-05-create-load-module`文件夹中创建一个名为`without-glue.c`的文件，并填充以下内容：
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We will call the functions from the C code to determine the *x* and *y* coordinates.
    The `setIsRunning()` function can be used to pause the rectangle''s movement.
    Now that our C code is ready, let''s compile it. In the VS Code terminal, `cd`
    into the `/chapter-05-create-load-module` folder, and run the following command:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从C代码中调用这些函数来确定*x*和*y*坐标。`setIsRunning()`函数可用于暂停矩形的移动。现在我们的C代码已经准备好了，让我们来编译它。在VS
    Code终端中，`cd`进入`/chapter-05-create-load-module`文件夹，并运行以下命令：
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Once the compilation is complete, you can right-click on the resultant `without-glue.wasm`
    file and select Show WebAssembly to see the Wat representation. You should see
    the following at the top of the file for the `import "env"` items:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 编译完成后，你可以右键单击生成的`without-glue.wasm`文件，选择Show WebAssembly来查看Wat表示。你应该在文件顶部看到`import
    "env"`项的以下内容：
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We need to pass in the `_jsClearRect` and `_jsFillRect` functions within the
    `importObj` object. We'll cover how to do that in the section on the HTML file
    with JavaScript interaction code.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在`importObj`对象中传入`_jsClearRect`和`_jsFillRect`函数。我们将在HTML文件与JavaScript交互代码的部分介绍如何做到这一点。
- en: Compiling with a Build Task in VS Code
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在VS Code中使用构建任务进行编译
- en: 'The `emcc` command is a little verbose, and having to manually run this on
    the command line for different files can get cumbersome. To expedite the compilation
    process, we can use VS Code''s Tasks feature to create a build task for the files
    we''ll use. To create a build task, select Tasks | Configure Default Build Task…,
    select the Create tasks.json from template option, and select Others to generate
    a simple `tasks.json` file in the `.vscode` folder. Update the contents of the
    file to contain the following:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`emcc`命令有点冗长，手动为不同文件在命令行上运行这个命令可能会变得麻烦。为了加快编译过程，我们可以使用VS Code的Tasks功能为我们将要使用的文件创建一个构建任务。要创建一个构建任务，选择Tasks
    | Configure Default Build Task…，选择Create tasks.json from template选项，并选择Others来在`.vscode`文件夹中生成一个简单的`tasks.json`文件。更新文件的内容以包含以下内容：'
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `label` value is simply a name to refer to when running a task. The `type` and
    `command` values indicate that it should run the `emcc` command in a shell (terminal).
    The `args` value is an array of arguments to be passed to the `emcc` command (based
    on space separation). The `"${file}"` argument tells VS Code to compile the currently
    open file. The `"${fileDirname}/${fileBasenameNoExtension}.wasm"`  argument indicates
    that the `.wasm` output will have the same name as the currently open file (with
    a `.wasm` extension), and it should be placed in the active folder of the currently
    open file. If you don't specify `${fileDirname}`, the output file will be placed
    in the root folder (rather than `/chapter-05-create-load-module` in this case).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`label`值只是一个运行任务时的名称。`type`和`command`值表示它应该在shell（终端）中运行`emcc`命令。`args`值是要传递给`emcc`命令的参数数组（基于空格分隔）。`"${file}"`参数告诉VS
    Code编译当前打开的文件。`"${fileDirname}/${fileBasenameNoExtension}.wasm"`参数表示`.wasm`输出将与当前打开的文件具有相同的名称（带有`.wasm`扩展名），并且应放在当前打开文件的活动文件夹中。如果不指定`${fileDirname}`，输出文件将放在根文件夹中（而不是在本例中的`/chapter-05-create-load-module`中）。'
- en: The `group` object indicates that this task is the default build step, so if
    you use the keyboard shortcut *Cmd*/*Ctrl* + *Shift* + *B*, this is the task that
    will be run. The `presentation.panel` value of `"new"` tells VS Code to open up
    a new CLI instance when the build step runs. This is a personal preference and
    can be omitted.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`group`对象表示这个任务是默认的构建步骤，所以如果你使用键盘快捷键*Cmd*/*Ctrl* + *Shift* + *B*，这就是将要运行的任务。`presentation.panel`值为`"new"`告诉VS
    Code在运行构建步骤时打开一个新的CLI实例。这是个人偏好，可以省略。'
- en: You can save and close the `tasks.json` file once it's fully populated. To test
    it out, first delete the `without-glue.wasm` file that you generated with the
    `emcc` command in the previous section. Next, ensure you have `without-glue.c`
    open with the cursor in the file and run the build task by either selecting **Tasks**
    | Run Build Task… or using the keyboard shortcut *Cmd*/*Ctrl* + *Shift* + *B*.
    A new panel in the integrated terminal will perform the compilation and a `without-glue.wasm`
    file should appear after a second or two.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`tasks.json`文件完全填充，你可以保存并关闭它。要测试它，首先删除在上一节中使用`emcc`命令生成的`without-glue.wasm`文件。接下来，确保你打开了`without-glue.c`文件，并且光标在文件中，然后通过选择**Tasks**
    | Run Build Task…或使用键盘快捷键*Cmd*/*Ctrl* + *Shift* + *B*来运行构建任务。集成终端中的一个新面板将执行编译，一两秒后会出现一个`without-glue.wasm`文件。
- en: Fetching and instantiating a Wasm file
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取和实例化Wasm文件
- en: Now that we have a Wasm file, we'll need some JavaScript code to compile and
    execute it. There's a few steps we'll have to follow to ensure the code can be
    successfully utilized in the browser. In this section, we will write some common
    JavaScript loading code that we can reuse for other examples, create an HTML file
    that demonstrates the use of the Wasm module, and test the results in the browser.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个Wasm文件，我们需要一些JavaScript代码来编译和执行它。有一些步骤我们需要遵循，以确保代码可以成功地在浏览器中使用。在本节中，我们将编写一些常见的JavaScript加载代码，以便在其他示例中重用，创建一个演示Wasm模块使用的HTML文件，并在浏览器中测试结果。
- en: Common JavaScript loading code
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见的JavaScript加载代码
- en: 'We will fetch and instantiate a `.wasm` file in several of the examples, so
    it makes sense to move the JavaScript loading code to a common file. The actual
    fetch and instantiation code is only a few lines, but having to repeatedly redefine
    the `importObj` object that Emscripten expects is a waste of time. We''ll make
    this code available in a commonly accessible file to expedite the code-writing
    process. Create a new folder named `/common` in the `/book-examples` folder and
    add a file named `load-wasm.js` with the following contents:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在几个示例中获取和实例化一个`.wasm`文件，因此将JavaScript加载代码移到一个公共文件是有意义的。实际的获取和实例化代码只有几行，但是反复重新定义Emscripten期望的`importObj`对象是一种浪费时间。我们将使这段代码在一个通常可访问的文件中，以加快编写代码的过程。在`/book-examples`文件夹中创建一个名为`/common`的新文件夹，并添加一个名为`load-wasm.js`的文件，其中包含以下内容：
- en: '[PRE14]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `getDefaultEnv()` function provides the required `importObj.env` contents
    for Emscripten''s Wasm module. We want the ability to pass in any additional imports,
    which is why the `Object.assign()` statement is used. With the addition of any
    other imports the Wasm module expects, Emscripten''s Wasm output will always require
    these five import statements for the `"env"` object:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`getDefaultEnv()`函数为Emscripten的Wasm模块提供所需的`importObj.env`内容。我们希望能够传入任何其他的导入，这就是为什么使用`Object.assign()`语句的原因。除了Wasm模块期望的任何其他导入之外，Emscripten的Wasm输出将始终需要这五个`"env"`对象的导入语句：'
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We need to pass those into the `instantiate()` function to ensure the Wasm module
    loads successfully, otherwise the browser will throw an error. Now that we have
    our loading code ready, let's move on to the HTML and rectangle-rendering code.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将这些传递给`instantiate()`函数，以确保Wasm模块成功加载，否则浏览器将抛出错误。现在我们的加载代码准备好了，让我们继续进行HTML和矩形渲染代码。
- en: The HTML page
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML页面
- en: 'We''re going to need an HTML page with a `<canvas>` element and JavaScript
    code to interact with the Wasm module. Create a file named `without-glue.html`
    in the `/chapter-05-create-load-module` folder and populate it with the following
    contents:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个包含`<canvas>`元素和与Wasm模块交互的JavaScript代码的HTML页面。在`/chapter-05-create-load-module`文件夹中创建一个名为`without-glue.html`的文件，并填充以下内容：
- en: '[PRE16]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This code will replicate the SDL example we created in the previous sections
    with some added functionality. When the rectangle bumps into the lower-right hand
    corner, it changes direction. You're also able to pause and resume the rectangle's
    movement using a button under the `<canvas>` element. You can see how we passed
    the `_jsFillRect` and `_jsClearRect` functions into the `importObj.env` object
    so they can be referenced by the Wasm module.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将复制我们在前几节中创建的SDL示例，并添加一些功能。当矩形撞到右下角时，它会改变方向。您还可以使用`<canvas>`元素下的按钮暂停和恢复矩形的移动。您可以看到我们如何将`_jsFillRect`和`_jsClearRect`函数传递给`importObj.env`对象，以便Wasm模块可以引用它们。
- en: Serving it all up
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提供所有服务
- en: 'Let''s test our code out in the browser. From the VS Code terminal, make sure
    you''re in the `/book-examples` folder and run the command to start up a local
    server:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在浏览器中测试我们的代码。从VS Code终端，确保您在`/book-examples`文件夹中，并运行命令启动本地服务器：
- en: '[PRE17]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'It''s important that you''re in the `/book-examples` folder. If you try serving
    up the code in the `/chapter-05-create-load-module` folder only, you won''t be
    able to use the `loadWasm()` function. If you open up your browser to `http://127.0.0.1:8080/chapter-05-create-load-module/without-glue.html`,
    you should see this:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是您要在`/book-examples`文件夹中。如果您只尝试在`/chapter-05-create-load-module`文件夹中提供代码，您将无法使用`loadWasm()`函数。如果您在浏览器中打开`http://127.0.0.1:8080/chapter-05-create-load-module/without-glue.html`，您应该会看到这个：
- en: '![](img/76e4c6ba-e85a-448f-8418-7e71adddb265.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/76e4c6ba-e85a-448f-8418-7e71adddb265.png)'
- en: Without glue code example running in the browser
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中运行的无粘合代码示例
- en: Try pressing the Pause button; the caption should change to Start and the rectangle
    should stop moving. Clicking it again should cause the rectangle to start moving
    again.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试按下暂停按钮；标题应该更改为开始，矩形应该停止移动。再次点击它应该导致矩形重新开始移动。
- en: Summary
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered the compilation and loading processes for modules
    that utilize the Emscripten glue code alongside the Wasm modules. By utilizing
    some of Emscripten's built-in features, such as ported libraries and helper methods,
    we were able to demonstrate the advantages Emscripten offers. We discussed some
    of the compiler flags that you can pass to the `emcc` command and how that will
    affect your output. By utilizing VS Code's Tasks feature, we were able to set
    up a build command to expedite the build process going forward. We also reviewed
    the process for compiling and loading a Wasm module without the glue code. We
    wrote some reusable JavaScript code to load the module as well as code to interact
    with our compiled Wasm module.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了使用Emscripten粘合代码和Wasm模块的编译和加载过程。通过利用Emscripten的一些内置功能，如移植库和辅助方法，我们能够展示Emscripten提供的优势。我们讨论了一些可以传递给`emcc`命令的编译器标志，以及这将如何影响您的输出。通过利用VS
    Code的任务功能，我们能够设置一个构建命令，以加快未来的构建过程。我们还回顾了在没有粘合代码的情况下编译和加载Wasm模块的过程。我们编写了一些可重用的JavaScript代码来加载模块，以及与我们编译的Wasm模块交互的代码。
- en: In [Chapter 6](cdf64596-59dd-4805-8509-7315b7760b1e.xhtml),* Interacting with
    JavaScript and Debugging*, we're going to cover interacting with JavaScript and
    debugging techniques in the browser.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第6章](cdf64596-59dd-4805-8509-7315b7760b1e.xhtml)，*与JavaScript交互和调试*中，我们将介绍在浏览器中与JavaScript交互和调试技术。
- en: Questions
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What does SDL stand for?
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SDL代表什么？
- en: In addition to JavaScript, HTML, and Wasm, what other output type can you generate
    with the `-o` flag for the `emcc` command?
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除了JavaScript、HTML和Wasm，您还可以使用`emcc`命令的`-o`标志生成什么其他输出类型？
- en: What advantages does using Emscripten's pre-generated loading code offer?
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Emscripten的预生成加载代码有哪些优势？
- en: What must you name your function in the C/C++ file to ensure it automatically
    executes the compiled output in the browser?
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在C/C++文件中，您必须如何命名您的函数，以确保它会自动在浏览器中执行编译后的输出？
- en: Why can't we use just the Wasm file output without the "glue" code when using
    ported libraries?
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么在使用移植库时不能只使用Wasm文件输出而不使用“粘合”代码？
- en: What is the keyboard shortcut in VS Code for running your default build task?
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在VS Code中运行默认构建任务的键盘快捷键是什么？
- en: Why do we need the `getDefaultEnv()` method in the Wasm loading code?
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Wasm加载代码中，为什么我们需要`getDefaultEnv()`方法？
- en: Which five items are required for the `importObj.env` object passed into the
    Wasm instantiation code for a Wasm module created with Emscripten?
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于使用Emscripten创建的Wasm模块，传递给Wasm实例化代码的`importObj.env`对象需要哪五个项目？
- en: Further reading
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'About SDL: [https://www.libsdl.org/index.php](https://www.libsdl.org/index.php)'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于SDL：[https://www.libsdl.org/index.php](https://www.libsdl.org/index.php)
- en: '**Emscripten Compiler Frontend** (**emcc**): [http://kripken.github.io/emscripten-site/docs/tools_reference/emcc.html](http://kripken.github.io/emscripten-site/docs/tools_reference/emcc.html)'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Emscripten编译器前端**（**emcc**）：[http://kripken.github.io/emscripten-site/docs/tools_reference/emcc.html](http://kripken.github.io/emscripten-site/docs/tools_reference/emcc.html)'
- en: 'Integrate with External Tools via Tasks: [https://code.visualstudio.com/docs/editor/tasks](https://code.visualstudio.com/docs/editor/tasks)'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过任务与外部工具集成：[https://code.visualstudio.com/docs/editor/tasks](https://code.visualstudio.com/docs/editor/tasks)
- en: 'Loading and running WebAssembly code: [https://developer.mozilla.org/en-US/docs/WebAssembly/Loading_and_running](https://developer.mozilla.org/en-US/docs/WebAssembly/Loading_and_running)'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载和运行WebAssembly代码：[https://developer.mozilla.org/en-US/docs/WebAssembly/Loading_and_running](https://developer.mozilla.org/en-US/docs/WebAssembly/Loading_and_running)
