- en: Looping
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 循环
- en: In the previous chapter, we discussed the `if` statement. The `if` statement
    enables you to put a condition on the execution of a block of code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们讨论了`if`语句。`if`语句使您能够对一块代码的执行设置条件。
- en: In this chapter, we will explore loops, which are code structures that enable
    you to repeat a block of code under certain conditions. We stop repeating that
    block of code once the condition becomes false.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨循环，这些是代码结构，使您能够在某些条件下重复执行一块代码。一旦条件变为false，我们就停止重复执行该代码块。
- en: 'In this chapter, we will explore the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下主题：
- en: The while loop
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: while循环
- en: The do/while loop
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: do/while循环
- en: The for loop
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: for循环
- en: A simple example of a practical loop within Unreal Engine
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚幻引擎中实际循环的简单示例
- en: The while loop
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: while循环
- en: 'The `while` loop is used to run a section of the code repeatedly. This is useful
    if you have a set of actions that must be done repeatedly to accomplish some goal.
    For example, the `while` loop in the following code repeatedly prints the value
    of the variable `x` as it is incremented from `1` to 5:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`while`循环用于重复运行代码的一部分。如果您有一组必须重复执行以实现某个目标的操作，这将非常有用。例如，以下代码中的`while`循环重复打印变量`x`的值，从`1`递增到5：'
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This is the output of the preceding program:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这是上述程序的输出：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the first line of code, an integer variable `x` is created and set to `1`.
    Then, we go to the `while` condition. The `while` condition says that while `x`
    is less than or equal to `5`, you must stay in the block of code that follows.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码的第一行，创建了一个整数变量`x`并将其设置为`1`。然后，我们进入`while`条件。`while`条件表示，只要`x`小于或等于`5`，您必须留在后面的代码块中。
- en: Each iteration of the loop (an iteration means executing everything between
    `{` and `}` once) gets a little more done from the task (of printing the numbers
    `1` to `5`). We program the loop to exit automatically once the task is done (when
    `x <= 5` is no longer true).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 循环的每次迭代（迭代意味着执行`{`和`}`之间的所有内容一次）都会完成一些任务（打印数字`1`到`5`）。我们编程循环在任务完成后自动退出（当`x <=
    5`不再为真时）。
- en: 'Similar to the `if` statement of the previous chapter, entry into the following
    block by the `while` loop is only allowed if you meet the condition within the
    brackets of the `while` loop (in the preceding example, `x <= 5`). You can try
    mentally subbing an `if` loop in the place of the `while` loop, as shown in the
    following code:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 与上一章的`if`语句类似，只有在满足`while`循环括号内的条件时（在上面的例子中为`x <= 5`），才允许进入以下块。您可以尝试在以下代码中将`while`循环的位置替换为`if`循环，如下所示：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The preceding code sample will only print `x is 1`. So, a `while` loop is exactly
    like an `if` statement, only it has this special property of automatically repeating
    itself until the condition between the brackets of the `while` loop becomes false.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码示例将只打印`x is 1`。因此，`while`循环与`if`语句完全相同，只是它具有自动重复自身直到`while`循环括号内的条件变为false的特殊属性。
- en: I'd like to explain the repetition of the `while` loop using a video game. If
    you don't know Valve's *Portal*, you should play it, if only to understand loops.
    Check out [https://www.youtube.com/watch?v=TluRVBhmf8w](https://www.youtube.com/watch?v=TluRVBhmf8w)
    for a demo video.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我想用一个视频游戏来解释`while`循环的重复。如果您不了解Valve的*Portal*，您应该玩一下，即使只是为了理解循环。查看[https://www.youtube.com/watch?v=TluRVBhmf8w](https://www.youtube.com/watch?v=TluRVBhmf8w)以获取演示视频。
- en: 'The `while` loops have a kind of magic portal at the bottom, which causes the
    loop to repeat. The following screenshot illustrates what I mean:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`while`循环在底部有一种魔法传送门，导致循环重复。以下屏幕截图说明了我的意思：'
- en: '![](img/f688cd95-3a2c-4e18-91c1-a54c37fe99dd.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f688cd95-3a2c-4e18-91c1-a54c37fe99dd.png)'
- en: There is a portal at the end of the while loop that takes you back to the beginning
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在while循环的末尾有一个传送门，可以将您带回起点
- en: In the preceding screenshot, we loop back from the orange portal (marked `O`)
    to the blue portal (marked `B`). This is our first time of being able to go back
    in the code. It is like time travel, only for the code. How exciting!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的屏幕截图中，我们从橙色传送门（标记为`O`）回到蓝色传送门（标记为`B`）。这是我们第一次能够返回代码。这就像时间旅行，只不过是针对代码的。多么令人兴奋！
- en: The only way past a `while` loop block is to not meet the entry condition. In
    the preceding example, once the value of `x` becomes 6 (so `x <= 5` becomes false),
    we will not enter the `while` loop again. Since the orange portal is inside the
    loop, we'll be able to exit the loop once `x` becomes 6.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`while`循环块的唯一方法是不满足入口条件。在上面的例子中，一旦`x`的值变为6（因此`x <= 5`变为false），我们将不再进入`while`循环。由于橙色传送门在循环内部，一旦`x`变为6，我们就能够退出循环。
- en: Infinite loops
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无限循环
- en: 'You can get stuck inside the same loop forever. Consider the modified program
    in the following block of code (what do you think will be the output?):'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会永远被困在同一个循环中。考虑以下代码块中修改后的程序（您认为输出会是什么？）：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This is how the output will look:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The loop repeats forever because we removed the line of code that changed the
    value of `x`. If the value of `x` stays the same and is not allowed to increase,
    we will be stuck inside the body of the `while` loop. This is because the loop's
    exit condition (the value of `x` becomes 6) cannot be met if `x` does not change
    inside the loop body.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 循环会永远重复，因为我们删除了改变`x`值的代码行。如果`x`的值保持不变且不允许增加，我们将被困在`while`循环的主体内。这是因为如果`x`在循环主体内部不发生变化，则无法满足循环的退出条件（`x`的值变为6）。
- en: Just click the x button on the window to close the program.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 只需单击窗口上的x按钮即可关闭程序。
- en: The following exercises will use all the concepts from the previous chapters,
    such as the `+=` and decrement operations. If you've forgotten something, go back
    and reread the previous sections.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下练习将使用前几章中的所有概念，例如`+=`和递减操作。如果您忘记了某些内容，请返回并重新阅读前几节。
- en: Exercises
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: 'Let''s take a look at a few exercises here:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看几个练习：
- en: Write a `while` loop that will print the numbers from `1` to `10`
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个`while`循环，将打印数字`1`到`10`
- en: Write a `while` loop that will print the numbers from 10 to 1 (backward)
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个`while`循环，将倒序打印从10到1的数字
- en: Write a `while` loop that will print numbers 2 to 20, incrementing by 2 (for
    example 2, 4, 6, and 8)
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个`while`循环，将打印2到20的数字，每次增加2（例如2、4、6、8）
- en: Write a `while` loop that will print the numbers 1 to 16 and their squares beside
    them
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个`while`循环，将打印数字1到16及其平方
- en: 'The following is an example program output of Exercise 4:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是练习4的示例程序输出：
- en: '| `1` | `1` |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '`1` | `1`'
- en: '| `2` | `4` |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '`2` | `4`'
- en: '| `3` | `9` |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '`3` | `9`'
- en: '| `4` | `16` |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '`4` | `16`'
- en: '| `5` | `25` |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '`5` | `25`'
- en: Solutions
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'The code solutions of the preceding exercises are as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 前面练习的代码解决方案如下：
- en: 'The solution of the `while` loop that prints the numbers from `1` to `10` is
    as follows:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`while`循环打印从`1`到`10`的数字的解决方案如下：'
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The solution of the `while` loop that prints the numbers from `10` to `1` backward
    is as follows:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`while`循环的解决方案，倒序打印从`10`到`1`的数字如下：'
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The solution of the `while` loop that prints the numbers from `2` to `20` incrementing
    by `2` is as follows:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`while`循环打印从`2`到`20`的数字，每次增加`2`的解决方案如下：'
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The solution of the `while` loop that prints the numbers from `1` to `16` with
    their squares is as follows:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`while`循环的解决方案，打印从`1`到`16`的数字及其平方如下：'
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The do/while loop
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: do/while循环
- en: 'The `do`/`while` loop is almost identical to the `while` loop. Here''s an example
    of a `do`/`while` loop that is equivalent to the first `while` loop that we examined:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`do`/`while`循环与`while`循环几乎相同。以下是一个等效于我们检查的第一个`while`循环的`do`/`while`循环的示例：'
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The only difference here is that we don't have to check the `while` condition
    on our first entry into the loop. This means that the `do`/`while` loop's body
    is always executed at least once (where a `while` loop can be skipped entirely
    if the condition to enter the while `loop` is false when you hit it for the first
    time).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的区别在于，我们在第一次进入循环时不必检查`while`条件。这意味着`do`/`while`循环的体至少会执行一次（而`while`循环如果第一次进入时条件为false，则可以完全跳过）。
- en: 'Here''s an example:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个例子：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The for loop
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: for循环
- en: The `for` loop has a slightly different anatomy than the `while` loop, but both
    are very similar.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`for`循环的解剖略有不同于`while`循环，但两者都非常相似。'
- en: 'Let''s examine the anatomy of a `for` loop as compared to an equivalent `while`
    loop. Take an example of the following code snippets:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们比较`for`循环的解剖和等效的`while`循环。以以下代码片段为例：
- en: '| The `for` loop | An equivalent `while` loop |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `for`循环 | 等效的`while`循环 |'
- en: '| for( int x = 1; x <= 5; x++ ){      cout << x << endl;} | int x = 1;while(
    x <= 5 ){     cout << x << endl;     x++;} |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| for( int x = 1; x <= 5; x++ ){      cout << x << endl;} | int x = 1;while(
    x <= 5 ){     cout << x << endl;     x++;} |'
- en: The `for` loop has three statements inside its parentheses. Let's examine them
    in order.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`for`循环在其括号内有三个语句。让我们按顺序检查它们。'
- en: The first statement of the `for` loop (`int x = 1;`) only gets executed once,
    when we first enter the body of the `for` loop. It is typically used to initialize
    the value of the loop's counter variable (in this case, the variable `x`). The
    second statement inside the `for` loop (`x <= 5;`) is the loop's repeat condition.
    As long as `x <= 5`, we must continue to stay inside the body of the `for` loop.
    The last statement inside the brackets of the `for` loop (`x++;`) gets executed
    after we complete the body of the `for` loop each time.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`for`循环的第一个语句(`int x = 1;`)只在我们第一次进入`for`循环体时执行一次。它通常用于初始化循环的计数变量的值（在本例中是变量`x`）。`for`循环括号内的第二个语句(`x
    <= 5;`)是循环的重复条件。只要`x <= 5`，我们必须继续留在`for`循环的体内。`for`循环括号内的最后一个语句(`x++;`)在每次完成`for`循环体后执行。'
- en: 'The following sequence of diagrams explain the progression of the `for` loop:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下一系列图表解释了`for`循环的进展：
- en: '![](img/de84ff9a-68b1-49b7-b067-c112b9c42efd.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/de84ff9a-68b1-49b7-b067-c112b9c42efd.png)'
- en: Exercises
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: 'Let''s take a look at some exercises here:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一些练习：
- en: Write a `for` loop that will gather the sum of the numbers from `1` to `10`
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个`for`循环，将收集从`1`到`10`的数字的总和
- en: Write a `for` loop that will print the multiples of `6`, from `6` to `30` (6,
    12, 18, 24, and 30)
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个`for`循环，将打印`6`到`30`的`6`的倍数（6、12、18、24和30）
- en: Write a `for` loop that will print numbers 2 to 100 in multiples of `2` (for
    example, 2, 4, 6, 8, and so on)
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个`for`循环，将以`2`的倍数打印2到100的数字（例如，2、4、6、8等）
- en: Write a `for` loop that will print numbers `1` to `16` and their squares beside
    them
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个`for`循环，将打印数字`1`到`16`及其平方
- en: Solutions
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Here are the solutions for the preceding exercises:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前面练习的解决方案：
- en: 'The solution for the `for` loop for printing the sum of the numbers from `1`
    to `10` is as follows:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印从`1`到`10`的数字的总和的`for`循环的解决方案如下：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The solution for the `for` loop for printing multiples of `6` from `6` to `30`
    is as follows:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印从`6`到`30`的`6`的倍数的`for`循环的解决方案如下：
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The solution for the `for` loop for printing numbers from `2` to `100` in multiples
    of `2` is as follows:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印从`2`到`100`的数字的`2`的倍数的`for`循环的解决方案如下：
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The solution for the `for` loop that prints numbers from `1` to `16` and their
    squares is as follows:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印从`1`到`16`的数字及其平方的`for`循环的解决方案如下：
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Looping with Unreal Engine
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用虚幻引擎进行循环
- en: In your code editor, open your Unreal `Puzzle` project from [Chapter 3](ca7012d2-2573-4d10-a207-1c0d2470bc86.xhtml), *If,
    Else, and Switch*.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的代码编辑器中，从[第3章](ca7012d2-2573-4d10-a207-1c0d2470bc86.xhtml)打开您的虚幻`Puzzle`项目，*If,
    Else, and Switch*。
- en: 'There are several ways to open your Unreal project. On Windows, the simplest
    way is probably to navigate to the `Unreal Projects` folder (which is present
    in your user''s `Documents` folder by default) and double-click on the `.sln`
    file in Windows Explorer, as shown in the following screenshot:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以打开您的虚幻项目。在Windows上，最简单的方法可能是导航到`Unreal Projects`文件夹（默认情况下位于用户的`Documents`文件夹中），然后在Windows资源管理器中双击`.sln`文件，如下截图所示：
- en: '![](img/4f035cee-9c4b-43d3-806e-b5ea1e5394fa.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4f035cee-9c4b-43d3-806e-b5ea1e5394fa.png)'
- en: In Windows, open the `.sln` file to edit the project code. You can also just
    open Visual Studio and it will remember which projects you worked on recently
    and display them so you can click on it from there to open it. You will also need
    to open the project in the Unreal Editor from the Epic Games Launcher to test
    it.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows中，打开`.sln`文件以编辑项目代码。您也可以直接打开Visual Studio，它会记住您最近使用过的项目，并显示它们，这样您就可以从中点击打开。您还需要从Epic
    Games Launcher中打开Unreal Editor中的项目进行测试。
- en: 'Now, open the `PuzzleBlockGrid.cpp` file. Inside this file, scroll down to
    the section that begins with the following statement:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开`PuzzleBlockGrid.cpp`文件。在这个文件中，向下滚动到以下语句开头的部分：
- en: '[PRE15]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Notice that there is a `for` loop here to spawn the initial nine blocks, as
    shown in the following code:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这里有一个`for`循环来生成最初的九个方块，如下面的代码所示：
- en: '[PRE16]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Since `NumBlocks` (which is used to determine when to stop the loop) gets computed
    as `Size*Size`, we can easily change the number of blocks that get spawned by
    altering the value of the `Size` variable. Go to Line 24 of `PuzzleBlockGrid.cpp`
    and change the value of the `Size` variable to `4` or `5`. Then, run the code
    again (make sure you press the Compile button in the Unreal Editor to make it
    use the updated code).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`NumBlocks`（用于确定何时停止循环）计算为`Size*Size`，我们可以通过改变`Size`变量的值来轻松改变生成的方块数量。转到`PuzzleBlockGrid.cpp`的第24行，将`Size`变量的值更改为`4`或`5`。然后，再次运行代码（确保您在Unreal
    Editor中按下编译按钮以使用更新后的代码）。
- en: 'You should see the number of blocks on the screen increase (although you may
    need to scroll to see them all), as shown in the following screenshot:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到屏幕上的方块数量增加（尽管您可能需要滚动才能看到它们全部），如下截图所示：
- en: '![](img/9c230a33-a53b-4439-a60b-7f5fb96d89c2.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9c230a33-a53b-4439-a60b-7f5fb96d89c2.png)'
- en: Setting the size to `14` creates many more blocks.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 将大小设置为`14`会创建更多的方块。
- en: Summary
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to repeat lines of code by looping the code,
    which allowed you to run it multiple times. This can be used to use the same line
    of code repeatedly in order to achieve a task. Imagine printing the numbers from
    `1` to `10` (or 10,000!) without using a loop.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学会了如何通过循环代码来重复执行代码行，从而使您可以多次运行它。这可以用于重复使用相同的代码行以完成任务。想象一下，如果不使用循环，打印从`1`到`10`（或10,000！）的数字会是什么样子。
- en: In the next chapter, we will explore functions, which are the basic units of
    reusable code.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨函数，这是可重复使用代码的基本单元。
