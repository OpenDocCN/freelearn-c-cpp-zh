- en: '*Chapter 1*: First Steps with CMake'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第1章*：CMake的初步步骤'
- en: There is something magical about turning source code into a working application.
    It is not only the effect itself, that is, a working mechanism that we devise
    and bring to life, but the very process or act of exercising the idea into existence.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 将源代码转换成运行中的应用程序有一种神奇的感觉。这种神奇不仅仅在于效果本身，即我们设计并使其实际运行的机制，而且在于将想法付诸实践的过程或行为。
- en: 'As programmers, we work in the following loop: design, code, and test. We invent
    changes, we phrase them in a language that the compiler understands, and we check
    whether they work as intended. To create a proper, high-quality application from
    our source code, we need to meticulously execute repetitive, error-prone tasks:
    invoking the correct commands, checking the syntax, linking binary files, running
    tests, reporting issues, and more.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 作为程序员，我们按照以下循环工作：设计、编码和测试。我们发明变更，我们用编译器能理解的言语来阐述它们，然后我们检查它们是否如预期那样工作。为了从我们的源代码创建一个适当、高质量的程序，我们需要精心执行重复性、易出错的任务：调用正确的命令，检查语法，链接二进制文件，运行测试，报告问题，等等。
- en: It takes great effort to remember each step every single time. Instead, we want
    to stay focused on the actual coding and delegate everything else to automated
    tooling. Ideally, this process would start with a single button, right after we
    have changed our code. It would be smart, fast, extensible, and work in the same
    way across different OSs and environments. It would be supported by multiple **Integrated
    Development Environments** (**IDEs**) but also by **Continuous Integration** (**CI**)
    pipelines that test our software after a change is submitted to a shared repository.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 每次都记住每个步骤需要付出很大的努力。相反，我们希望专注于实际的编程，并将其他所有任务委派给自动化工具。理想情况下，这个过程将从我们更改代码后立即开始，只需按一个按钮。它会智能、快速、可扩展，并且在不同的操作系统和环境中以相同的方式工作。它会被多种**集成开发环境**（**IDEs**）支持，同时也会被**持续集成**（**CI**）管道支持，在我们向共享仓库提交更改后测试我们的软件。
- en: CMake is the answer to many such needs; however, it requires a bit of work to
    configure and use correctly. This is not because CMake is unnecessarily complex
    but because the subject that we're dealing with here is. Don't worry. We'll undergo
    this whole learning process very methodically; before you know it, you will have
    become a building guru.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: CMake是许多需求的答案；然而，要正确配置和使用它需要一些工作。这不是因为CMake不必要的复杂，而是因为我们这里处理的主题就是这样。不要担心。我们将非常有条理地进行整个学习过程；在您意识到之前，您将已经成为一个建筑大师。
- en: I know you're eager to rush off to start writing your own CMake projects, and
    I applaud your attitude. Since your projects will be primarily for users (yourself
    included), it's important for you to understand that perspective as well.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道您渴望开始编写自己的CMake项目，我赞赏您的热情。由于您的项目主要面向用户（包括您自己），您理解这一观点也很重要。
- en: 'So, let''s start with just that: becoming a CMake power user. We''ll go through
    a few basics: what this tool is, how it works in principle, and how to install
    it. Then, we''ll do a deep dive on the command line and modes of operation. Finally,
    we''ll wrap up with the purposes of different files in a project, and we''ll explain
    how to use CMake without creating a project at all.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们从这一点开始：成为CMake的高级用户。我们会先了解一些基础知识：这个工具是什么，它的工作原理是什么，以及如何安装它。然后，我们将深入探讨命令行和操作模式。最后，我们将总结项目中不同文件的目的，并解释如何在不下创建项目的情况下使用CMake。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Understanding the basics
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解基础知识
- en: Installing CMake on different platforms
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在不同平台上安装CMake
- en: Mastering the command line
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 掌握命令行
- en: Navigating the project files
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导航项目文件
- en: Discovering scripts and modules
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发现脚本和模块
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You can find the code files that are present in this chapter on GitHub at [https://github.com/PacktPublishing/Modern-CMake-for-Cpp/tree/main/examples/chapter01](https://github.com/PacktPublishing/Modern-CMake-for-Cpp/tree/main/examples/chapter01).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitHub上找到本章中存在的代码文件：[https://github.com/PacktPublishing/Modern-CMake-for-Cpp/tree/main/examples/chapter01](https://github.com/PacktPublishing/Modern-CMake-for-Cpp/tree/main/examples/chapter01)。
- en: 'To build examples provided in this book always use recommended commands:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构建本书中提供的示例，始终使用建议的命令：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Be sure to replace placeholders `<build tree>` and `<source tree>` with appropriate
    paths. As a reminder: **build tree** is the path to target/output directory, **source
    tree** is the path at which your source code is located.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保将占位符`<build tree>`和`<source tree>`替换为适当的路径。作为提醒：**build tree**是目标/输出目录的路径，**source
    tree**是源代码所在的位置。
- en: Understanding the basics
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解基础知识
- en: 'The compilation of C++ source code appears to be a fairly straightforward process.
    Let''s take a small program, such as a classic `hello.cpp` application, as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 编译C++源代码似乎是一个相当直接的过程。让我们以一个小型程序为例，比如经典的`hello.cpp`应用：
- en: chapter-01/01-hello/hello.cpp
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: chapter-01/01-hello/hello.cpp
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, all we need to do to get an executable is to run a single command. We
    call the compiler with the filename as an argument:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要获得可执行文件，我们只需要运行一个命令。我们通过将文件名作为参数传递给编译器来调用它：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Our code is correct, so the compiler will silently produce an executable binary
    file that our machine can understand. We can run it by calling its name:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的代码是正确的，所以编译器将默默生成一个可执行的二进制文件，我们的机器可以理解。我们可以通过调用它的名字来运行它：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: However, as our projects grow, you will quickly understand that keeping everything
    in a single file is simply not possible. Clean code practices recommend that files
    should be kept small and in well-organized structures. The manual compilation
    of every file can be a tiresome and fragile process. There must be a better way.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，随着我们的项目增长，你会很快理解将所有内容放在一个文件中 simply not possible。良好的代码实践建议文件应保持小且结构良好。手动编译每个文件可能是一个繁琐且脆弱的过程。一定有更好的方法。
- en: What is CMake?
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是CMake？
- en: Let's say we automate building by writing a script that goes through our project
    tree and compiles everything. To avoid any unnecessary compilations, our script
    will detect whether the source has been modified since the last time we ran it
    (the script). Now, we'd like a convenient way to manage arguments that are passed
    to the compiler for each file – preferably, we'd like to do that based on configurable
    criteria. Additionally, our script should know how to link all of the compiled
    files in a binary or, even better, build whole solutions that can be reused and
    incorporated as modules in bigger projects.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们通过编写一个脚本来自动化构建，该脚本遍历我们的项目树并编译所有内容。为了避免不必要的编译，我们的脚本将检测源代码是否自上次运行（脚本）以来已被修改。现在，我们想要一种方便地管理传递给每个文件编译器的参数的方法——最好是基于可配置标准来完成。此外，我们的脚本应知道如何链接所有编译文件到一个二进制文件中，或者更好，构建整个解决方案，可以被复用并作为更大项目的模块。
- en: 'The more features we will add the higher the chance that we will get to a full-fledged
    solution. Building software is a very versatile process and can span multiple
    different aspects:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加的功能越多，我们得到一个完整的解决方案的机会就越大。软件构建是一个非常多样化的过程，可以涵盖多个不同的方面：
- en: Compiling executables and libraries
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译可执行文件和库
- en: Managing dependencies
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理依赖项
- en: Testing
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试
- en: Installing
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装
- en: Packaging
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打包
- en: Producing documentation
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成文档
- en: Testing some more
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 再测试一下
- en: It would take a very long time to come up with a truly modular and powerful
    C++ building application that is fit for every purpose. And it did. Bill Hoffman
    at Kitware implemented the first versions of CMake over 20 years ago. As you might
    have already guessed, it was very successful. It now has a lot of features and
    support from the community. Today, CMake is being actively developed and has become
    the industry standard for C and C++ programmers.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个真正模块化且强大的C++构建应用程序需要很长时间，而且确实做到了。Bill Hoffman在Kitware实现了CMake的第一个版本，至今已有20多年。正如你可能已经猜到的，它非常成功。它现在有很多功能和社区支持。今天，CMake正在积极开发中，并已成为C和C++程序员的行业标准。
- en: 'The problem of building code in an automated way is much older than CMake,
    so naturally, there are plenty of options out there: Make, Autotools, SCons, Ninja,
    Premake, and more. But why does CMake have the upper hand?'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化构建代码的问题比CMake要早得多，所以自然而然，有很多选择：Make、Autotools、SCons、Ninja、Premake等等。但为什么CMake能占据上风呢？
- en: 'There are a couple of things about CMake that I find (granted, subjectively)
    important:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 关于CMake，有几件事情我觉得（主观地）很重要：
- en: It stays focused on supporting modern compilers and toolchains.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它专注于支持现代编译器和工具链。
- en: CMake is truly cross-platform – it supports building for Windows, Linux, macOS,
    and Cygwin.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CMake确实是跨平台的——它支持为Windows、Linux、macOS和Cygwin构建。
- en: 'It generates project files for popular IDEs: Microsoft Visual Studio, Xcode,
    and Eclipse CDT. Additionally, it is a project model for others such as CLion.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它为流行的IDE生成项目文件：Microsoft Visual Studio、Xcode和Eclipse CDT。此外，它还是其他项目的模型，如CLion。
- en: CMake operates on just the right level of abstraction – it allows you to group
    files in reusable targets and projects.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CMake在恰到好处的抽象级别上操作——它允许你将文件分组到可重用的目标和项目中。
- en: There are tons of projects that are built with CMake and offer an easy way to
    include them in your project.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有大量使用CMake构建的项目，它们提供了一种轻松将它们包含在你项目中的方法。
- en: CMake views testing, packaging, and installing as an inherent part of the build
    process.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CMake将测试、打包和安装视为构建过程的固有部分。
- en: Old, unused features get deprecated to keep CMake lean.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 旧的、未使用的特性会被弃用，以保持CMake的轻量级。
- en: CMake provides a unified, streamlined experience across the board. It doesn't
    matter if you're building your software in an IDE or directly from the command
    line; what's really important is it takes care of post-build stages as well. Your
    **Continous Integration/Continous Deployment** (**CI/CD**) pipeline can easily
    use the same CMake configuration and build projects using a single standard even
    if all of the preceding environments differ.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: CMake为整个平台提供了一致、简化的体验。无论你是使用IDE构建软件，还是直接从命令行构建，重要的是它还负责后构建阶段。你的**持续集成/持续部署**（**CI/CD**）流水线可以轻松使用相同的CMake配置和构建项目，即使所有前面的环境都不同。
- en: How does it work?
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的？
- en: You might be under the impression that CMake is a tool that reads source code
    on one end and produces binaries on the other – while that's true in principle,
    it's not the full picture.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还以为CMake是一个工具，在一端读取源代码，在另一端生成二进制文件——虽然从原则上讲这是正确的，但这并不是全部。
- en: 'CMake can''t build anything on its own – it relies on other tools in the system
    to perform the actual compilation, linking, and other tasks. You can think of
    it as the orchestrator of your building process: it knows what steps need to be
    done, what the end goal is, and how to find the right workers and materials for
    the job.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: CMake本身不能构建任何东西——它依赖于系统中的其他工具来执行实际的编译、链接等任务。你可以把它看作是你构建过程的协调者：它知道需要做哪些步骤，最终目标是什么，以及如何找到合适的工人和材料。
- en: 'This process has three stages:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程分为三个阶段：
- en: Configuration
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置阶段
- en: Generation
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成
- en: Building
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建
- en: The configuration stage
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置阶段
- en: This stage is about reading project details stored in a directory, called the
    **source tree**, and preparing an output directory or **build tree** for the generation
    stage.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这个阶段是关于读取存储在称为**源树**的目录中的项目详细信息，并为生成阶段准备输出目录或**构建树**。
- en: CMake starts by creating an empty build tree and collecting all of the details
    about the environment it is working in, for example, the architecture, the available
    compilers, the linkers, and the archivers. Additionally, it checks whether a simple
    test program can be compiled correctly.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: CMake首先创建一个空的构建树，并收集有关它正在工作的环境的详细信息，例如架构、可用的编译器、链接器和归档器。此外，它检查一个简单的测试程序是否可以正确编译。
- en: Next, the `CMakeLists.txt` project configuration file is parsed and executed
    (yes, CMake projects are configured with CMake's coding language). This file is
    the bare minimum of a CMake project (source files can be added later). It tells
    CMake about the project structure, its targets, and its dependencies (libraries
    and other CMake packages). During this process, CMake stores collected information
    in the build tree such as system details, project configurations, logs, and temp
    files, which are used for the next step. Specifically, a `CMakeCache.txt` file
    is created to store more stable variables (such as paths to compilers and other
    tools) and save time during the next configuration.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，解析并执行`CMakeLists.txt`项目配置文件（是的，CMake项目是用CMake的编程语言配置的）。这个文件是CMake项目的最小配置（源文件可以在以后添加）。它告诉CMake关于项目结构、目标和依赖项（库和其他CMake包）。在这个过程中，CMake将在构建树中存储收集的信息，如系统详细信息、项目配置、日志和临时文件，供下一步使用。特别是，创建了一个`CMakeCache.txt`文件来存储更稳定的变量（如编译器和其他工具的路径），以节省下一次配置的时间。
- en: The generation stage
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 生成阶段
- en: After reading the project configuration, CMake will generate a **buildsystem**
    for the exact environment it is working in. Buildsystems are simply cut-to-size
    configuration files for other build tools (for example, Makefiles for GNU Make
    or Ninja and IDE project files for Visual Studio). During this stage, CMake can
    still apply some final touches to the build configuration by evaluating **generator
    expressions**.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在阅读项目配置后，CMake将为它正在工作的确切环境生成一个**构建系统**。构建系统只是为其他构建工具（例如，为GNU Make的Makefile或为Ninja和Visual
    Studio的IDE项目文件）定制的配置文件。在这个阶段，CMake仍然可以通过评估**生成器表达式**来对构建配置进行一些最后的润色。
- en: Note
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The generation stage is executed automatically after the configuration stage.
    For this reason, this book and other resources often refer to both of these stages
    when mentioning "configuration" or "generation" of a buildsystem. To explicitly
    run just the configuration stage, you can use the `cmake-gui` utility.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 生成阶段在配置阶段自动执行后执行。因此，本书和其他资源在提到“配置”或“生成”构建系统时，通常会提到这两个阶段。要显式运行 just the 配置阶段，你可以使用`cmake-gui`工具。
- en: The building stage
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建阶段
- en: To produce the final artifacts specified in our project, we have to run the
    appropriate **build tool**. This can be invoked directly, through an IDE, or using
    the CMake command. In turn, these build tools will execute steps to produce **targets**
    with compilers, linkers, static and dynamic analysis tools, test frameworks, reporting
    tools, and anything else you can think of.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了生成我们项目中所指定的最终工件，我们必须运行适当的**构建工具**。这可以直接通过IDE调用，或者使用CMake命令。反过来，这些构建工具将执行步骤，使用编译器、链接器、静态和动态分析工具、测试框架、报告工具以及你能想到的任何其他工具来生成**目标**。
- en: 'The beauty of this solution lies in the ability to produce buildsystems on
    demand for every platform with a single configuration (that is, the same project
    files):'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这个解决方案的优点在于能够根据需要为每个平台生成构建系统，只需一个配置（即，相同的项目文件）：
- en: '![Figure 1.1 – The stages of CMake'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.1 – CMake的阶段](img/Figure_1.1_B17205.jpg)'
- en: '](img/Figure_1.1_B17205.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.1_B17205.jpg)'
- en: Figure 1.1 – The stages of CMake
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1 – CMake的阶段
- en: 'Do you remember our `hello.cpp` application from the *Understanding the basics*
    section? CMake makes it really easy for you to build it. All we need is the following
    `CMakeLists.txt` file next to our source and two simple commands, `cmake -B buildtree`
    and `cmake --build buildtree`, as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你们还记得我们在*理解基本内容*部分提到的`hello.cpp`应用程序吗？CMake让构建它变得非常简单。我们需要的只是一个位于源代码旁边的`CMakeLists.txt`文件和两个简单的命令`cmake
    -B buildtree`和`cmake --build buildtree`，如下所示：
- en: 'chapter01/01-hello/CMakeLists.txt: Hello world in the CMake language'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: chapter01/01-hello/CMakeLists.txt：用CMake语言编写的世界
- en: '[PRE4]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here is the output from the Dockerized Linux system (note that we''ll discuss
    Docker in the *Installing CMake on different platforms* section):'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这是来自Dockerized Linux系统的输出（请注意，我们将在*在不同的平台上安装CMake*部分讨论Docker）：
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'All that''s left is to run it:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在只剩下运行它了：
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, we have generated a buildsystem that is stored in the `buildtree` directory.
    Following this, we executed the build stage and produced a final binary that we
    were able to run.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们生成了一个存储在`buildtree`目录中的构建系统。接着，我们执行了构建阶段，生成了一个我们能够运行的最终二进制文件。
- en: 'Now you know what the end result looks like, I''m sure you will be full of
    questions: what are the prerequisites to this process? What do these commands
    mean? Why do we need two of them? How do I write my own project files? Do not
    worry – these questions will be answered in the following sections.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道最终结果长什么样了，我相信你会有很多问题：这个过程的前提条件是什么？这些命令意味着什么？为什么我们需要两个？我如何编写自己的项目文件？不要担心——这些问题将在接下来的章节中得到解答。
- en: Getting Help
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 获取帮助
- en: This book will provide you with the most important information that is relevant
    to the current version of CMake (at the time of writing, this is 3.20). To provide
    you with the best advice, I have explicitly avoided any deprecated and no longer
    recommended features. I highly recommend using, at the very least, version 3.15,
    which is considered "the Modern CMake." If you require more information, you can
    find the latest, complete documentation online at [https://cmake.org/cmake/help/](https://cmake.org/cmake/help/).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将为您提供与当前版本的CMake（撰写本书时为3.20版）最相关的最重要的信息。为了给您提供最好的建议，我明确避免使用任何已弃用和不推荐使用的功能。我强烈建议至少使用版本3.15，这个版本被认为是“现代CMake”。如果您需要更多信息，您可以在[https://cmake.org/cmake/help/](https://cmake.org/cmake/help/)找到最新的完整文档。
- en: Installing CMake on different platforms
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在不同的平台上安装CMake
- en: CMake is a cross-platform, open-source software written in C++. That means you
    can, of course, compile it yourself; however, the most likely scenario is that
    you won't have to. This is because precompiled binaries are available for you
    to download from the official web page at [https://cmake.org/download/](https://cmake.org/download/).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: CMake是一个用C++编写的跨平台、开源软件。这意味着你当然可以自己编译它；然而，最有可能的情况是，你不需要这么做。这是因为预编译的二进制文件可以在官方网页[https://cmake.org/download/](https://cmake.org/download/)上供你下载。
- en: Unix-based systems provide ready-to-install packages directly from the command
    line.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 基于Unix的系统可以直接从命令行提供准备安装的包。
- en: Note
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Remember that CMake doesn't come with compilers. If your system doesn't have
    them installed yet, you'll need to provide them before using CMake. Make sure
    to add the paths to their executables to the `PATH` environment variable so that
    CMake can find them.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，CMake不附带编译器。如果你的系统还没有安装它们，你需要在使用CMake之前提供它们。确保将它们的执行文件路径添加到`PATH`环境变量中，这样CMake才能找到它们。
- en: 'To avoid solving tooling and dependency problems while learning from this book,
    I recommend choosing the first installation method: Docker.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免在阅读本书时解决工具和依赖问题，我建议选择第一种安装方法：Docker。
- en: Let's go through different environments on which CMake can be used.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看可以在哪些环境中使用CMake。
- en: Docker
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker
- en: Docker ([https://www.docker.com/](https://www.docker.com/)) is a cross-platform
    tool that provides OS-level virtualization, allowing applications to be shipped
    in complete packages, called containers. These are self-sufficient bundles that
    contain a piece of software with all of its libraries, dependencies, and tools
    required to run it. Docker executes its containers in lightweight environments
    that are isolated one from another.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Docker ([https://www.docker.com/](https://www.docker.com/)) 是一个跨平台的工具，提供操作系统级别的虚拟化，允许应用程序以完整的包形式运输，这些包被称为容器。这些都是自给自足的捆绑包，包含了一个软件以及它所有的库、依赖项和运行它所需的工具。Docker在其轻量级环境中执行其容器，彼此之间是隔离的。
- en: This concept makes it extremely convenient to share whole toolchains, which
    are necessary for a given process, configured and ready to go. I can't stress
    enough how easy things become when you don't need to worry about minuscule environmental
    differences.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这个概念使得分享整个工具链变得极其方便，这对于给定的过程是必要的，已经配置好并准备好使用。我无法强调当你不需要担心微小的环境差异时事情变得有多简单。
- en: The Docker platform has a public repository of container images, [https://registry.hub.docker.com/](https://registry.hub.docker.com/),
    that provides millions of ready-to-use images.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Docker平台有一个公共容器镜像仓库，[https://registry.hub.docker.com/](https://registry.hub.docker.com/)，提供了数百万个准备使用的镜像。
- en: 'For your convenience, I have published two Docker repositories:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便起见，我发布了两个Docker仓库：
- en: '`swidzinski/cmake:toolchain`: This contains the curated tools and dependencies
    that are necessary to build with CMake.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`swidzinski/cmake:toolchain`：这个包含了构建CMake所需的精心挑选的工具和依赖项。'
- en: '`swidzinski/cmake:examples`: This contains the preceding toolchain and all
    of the projects and examples from this book.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`swidzinski/cmake:examples`：这个包含了前面的工具链以及本书中的所有项目和示例。'
- en: The first option is for readers who simply want a clean-slate image ready to
    build their own projects, and the second option is for hands-on practice with
    examples as we go through the chapters.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个选项是为那些只想使用一个空白镜像来构建自己项目的读者准备的，第二个选项是为在章节中进行实例实践准备的。
- en: 'You can install Docker by following the instructions from its official documentation
    (please refer to [docs.docker.com/get-docker](http://docs.docker.com/get-docker)).
    Then, execute the following commands in your Terminal to download the image and
    start the container:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过遵循Docker官方文档中的说明来安装Docker（请参考[docs.docker.com/get-docker](http://docs.docker.com/get-docker)）。然后，在你的终端中执行以下命令来下载镜像并启动容器：
- en: '[PRE7]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note that all of the examples are available in the directories matching this
    format:`/root/examples/``examples/chapter-<N>/<M>-<title>`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，所有示例都可以在匹配此格式的目录中找到：`/root/examples/``examples/chapter-<N>/<M>-<title>`。
- en: Windows
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Windows
- en: Installing in Windows is straightforward – simply download the version for 32
    or 64 bits. You can pick a portable ZIP or MSI package for Windows Installer.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上的安装很简单——只需下载32位或64位的版本。你可以选择一个便携式ZIP或MSI包用于Windows安装程序。
- en: 'With the ZIP package, you will have to add the CMake bin directory to the `PATH`
    environment variable so that you can use it in any directory without any such
    errors:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 使用ZIP包，你将不得不将CMake二进制目录添加到`PATH`环境变量中，这样你才能在任何目录中使用它，而不会出现错误：
- en: '[PRE8]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If you prefer convenience, simply use the MSI installer:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢方便，可以直接使用MSI安装程序：
- en: '![Figure 1.2 – The installation wizard can set up the PATH environment variable
    for you'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.2 – 安装向导可以为你设置PATH环境变量'
- en: '](img/Figure_1.2_B17205.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.2_B17205.jpg)'
- en: Figure 1.2 – The installation wizard can set up the PATH environment variable
    for you
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2 – 安装向导可以为你设置PATH环境变量
- en: As I mentioned earlier, this is open-source software, so it is possible to build
    CMake yourself. However, first, you will have to get a binary copy of CMake on
    your system. So, why use other build tools if you have your own, right? This scenario
    is used by CMake contributors to generate newer versions.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如我前面提到的，这是开源软件，所以自己构建CMake是可能的。然而，首先，你需要在你的系统上获取CMake的二进制副本。那么，如果你有自己的构建工具，为什么还要使用其他的呢？这种场景是CMake贡献者用来生成新版本的。
- en: 'On Windows, we also require a build tool that can finalize the build process
    started by CMake. A popular choice here is Visual Studio, for which the Community
    Edition is available for free from Microsoft''s website: [https://visualstudio.microsoft.com/downloads/](https://visualstudio.microsoft.com/downloads/).'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，我们还需要一个构建工具来完成由CMake启动的构建过程。这里的一个流行选择是Visual Studio，其社区版可从微软网站免费获得：[https://visualstudio.microsoft.com/downloads/](https://visualstudio.microsoft.com/downloads/)。
- en: Linux
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linux
- en: 'Getting CMake on Linux is the same as getting any other popular package. Simply
    use your package manager from the command line. Packages are usually kept up to
    date with fairly recent versions. However, if you are after the latest version,
    you can download the installation script from the website:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux上获取CMake与获取任何其他流行软件包相同。只需使用命令行的包管理器即可。软件包通常会保持更新，包含相对较新的版本。然而，如果你想要最新版本，你可以从网站上下载安装脚本：
- en: The script for Linux x86_64
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 适用于Linux x86_64的脚本
- en: '[PRE9]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The script for Linux aarch64
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 适用于Linux aarch64的脚本
- en: '[PRE10]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The package for Debian/Ubuntu
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 适用于Debian/Ubuntu的软件包
- en: '[PRE11]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The package for Red Hat
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 适用于Red Hat的软件包
- en: '[PRE12]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: macOS
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: macOS
- en: 'This platform is also strongly supported by CMake developers. The most popular
    choice of installation is through MacPorts:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这个平台也得到了CMake开发者的强烈支持。最流行的安装方式是通过MacPorts：
- en: '[PRE13]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Alternatively, you can use Homebrew:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，你可以使用Homebrew：
- en: '[PRE14]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Building from the source
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从源代码构建
- en: 'If all else fails – or if you''re on a special platform – download the source
    from the official website and compile it yourself:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果其他方法都失败了——或者如果你在一个特殊的平台上——从官方网站下载源代码并自己编译它：
- en: '[PRE15]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Building from source is relatively slow and requires more steps. However, by
    doing it this way, you''re guaranteed to use the latest version of CMake. This
    is especially apparent when compared to packages that are available for Linux:
    the older the version of the system, the fewer updates it gets.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 从源代码构建相对较慢，需要更多步骤。然而，通过这种方式，你可以保证使用最新版本的CMake。这在与Linux上可用的软件包相比较时尤为明显：系统版本越旧，更新越少。
- en: Now that we have our CMake readily installed, let's learn how to use it!
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经轻松安装了CMake，那就让我们学习如何使用它吧！
- en: Mastering the command line
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 精通命令行
- en: The majority of this book will teach you how to prepare CMake projects for your
    users. To cater to their needs, we need to thoroughly understand how users interact
    with CMake in different scenarios. This will allow you to test your project files
    and ensure they're working correctly.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的大部分内容将教你如何为你的用户准备CMake项目。为了满足他们的需求，我们需要彻底了解用户在不同场景中如何与CMake互动。这将允许你测试项目文件，并确保它们正确运行。
- en: 'CMake is a family of tools and consists of five executables:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: CMake是一组工具的家族，包括五个可执行文件：
- en: '`cmake`: This is the main executable that configures, generates, and builds
    projects.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cmake`：这是主要的可执行文件，用于配置、生成和构建项目。'
- en: '`ctest`: This is the test driver program used to run and report test results.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ctest`：这个程序用于运行和报告测试结果。'
- en: '`cpack`: This is the packaging program used to generate installers and source
    packages.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cpack`：这个程序用于生成安装程序和源代码包。'
- en: '`cmake-gui`: This is the graphical wrapper around `cmake`.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cmake-gui`：这是围绕`cmake`的图形界面。'
- en: '`ccmake`: This is the console-based GUI wrapper around `cmake`.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ccmake`：这是基于控制台的图形界面围绕`cmake`。'
- en: CMake
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CMake
- en: 'This binary provides a few modes of operation (also called actions):'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这个二进制文件提供了一些操作模式（也称为动作）：
- en: Generating a project buildsystem
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成项目构建系统
- en: Building a project
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建项目
- en: Installing a project
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装项目
- en: Running a script
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行脚本
- en: Running a command-line tool
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行命令行工具
- en: Getting help
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取帮助
- en: Generating a project buildsystem
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 生成项目构建系统
- en: 'This is the first step required to build our project. Here are a few options
    in terms of how the CMake build action can be executed:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 安装项目是我们构建项目所需的第一步。以下是执行CMake构建操作的几种方式：
- en: The syntax of the generation mode
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 生成模式的语法
- en: '[PRE16]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We''ll discuss these options in the upcoming sections. Right now, let''s focus
    on choosing the right form of command. One important feature of CMake is the support
    for out-of-source builds or the production of artifacts in a separate directory.
    In contrast to tools such as GNU Make, this ensures the source directory is kept
    clean from any build-related files and avoids polluting our `-S` option followed
    by path to the directory of the produced buildsystem specified with `-B`:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的部分讨论这些选项。现在，让我们专注于选择正确的命令形式。CMake的一个重要特性是支持离线构建或在单独的目录中生成工件。与GNU Make等工具相比，这确保了源代码目录中不会包含任何与构建相关的文件，并避免了使用`-S`选项后跟生成构建系统的目录路径的污染：
- en: '[PRE17]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The preceding command will generate a buildsystem in the `./build` directory
    (or create it if it's missing) from the source in the `./project` directory.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 前面命令将在`./build`目录中（如果缺失则创建）生成一个构建系统，该构建系统来源于`./project`目录中的源代码。
- en: We can skip one of the arguments and `cmake` will "guess" that we intended to
    use the current directory for it. However, watch out. Skipping both will get you
    an in-source build, and that is messy.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以省略一个参数，`cmake`会“猜测”我们打算使用当前目录。但是，要小心。省略两个参数将会得到一个源代码构建，这将非常混乱。
- en: Not Recommended
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 不推荐
- en: '[PRE18]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Examples
  id: totrans-154
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 示例
- en: 'Build in the current directory, but take the source from one directory up (note
    that `-S` is optional):'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前目录中构建，但源代码从上一级目录获取（注意`-S`是可选的）：
- en: '[PRE19]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Build in the `./build` directory, and use a source from the current directory:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在`./build`目录中构建，并使用当前目录中的源代码：
- en: '[PRE20]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Options for generators
  id: totrans-159
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 生成器的选项
- en: As discussed earlier, you can specify a few options during the generation stage.
    Selecting and configuring a generator decides which build tool from our system
    will be used for building, what build files will look like, and what the structure
    of the build tree will be.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，在生成阶段，你可以指定一些选项。选择和配置生成器决定了我们将使用我们系统中的哪个构建工具来构建，构建文件将呈现什么样子，以及构建树的结构将如何。
- en: 'So, should you care? Luckily, the answer is often "no." CMake does support
    multiple native buildsystems on many platforms; however, unless you have a few
    of them installed at the same time, CMake will correctly select it for you. This
    can be overridden by the `CMAKE_GENERATOR` environment variable or by specifying
    the generator directly on the command line, such as in the following:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，你应该关心吗？幸运的是，答案通常是“不”。CMake在许多平台上支持多种本地构建系统；然而，除非你同时安装了几个生成器，否则CMake会正确地为你选择一个。这可以通过设置`CMAKE_GENERATOR`环境变量或直接在命令行上指定生成器来覆盖，如下所示：
- en: '[PRE21]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Some generators (such as Visual Studio) support a more in-depth specification
    of a toolset (compiler) and platform (compiler or SDK). Additionally, these have
    respective environment variables that override the default values: `CMAKE_GENERATOR_TOOLSET`
    and `CMAKE_GENERATOR_PLATFORM`. We can specify them directly, as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 一些生成器（如Visual Studio）支持对工具集（编译器）和平面（编译器或SDK）进行更详细的指定。另外，这些生成器还有相应的环境变量，这些环境变量会覆盖默认值：`CMAKE_GENERATOR_TOOLSET`和`CMAKE_GENERATOR_PLATFORM`。我们可以像下面这样直接指定它们：
- en: '[PRE22]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Windows users usually want to generate a buildsystem for their favorite IDE.
    On Linux and macOS, it's very common to use Unix Makefiles or Ninja generators.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: Windows用户通常希望为他们的首选IDE生成一个构建系统。在Linux和macOS上，使用Unix Makefiles或Ninja生成器非常普遍。
- en: 'To check which generators are available on your system, use the following command:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检查你的系统上可用的生成器，请使用以下命令：
- en: '[PRE23]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'At the end of the `help` printout, you should observe a full list like this
    one:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在`help`打印输出结束时，你应该看到一个完整的列表，如下所示：
- en: There are plenty of generators available on Windows 10
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 10上有许多生成器可供选择：
- en: '[PRE24]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Options for caching
  id: totrans-171
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 缓存选项
- en: CMake queries the system for all kinds of information during the configuration
    stage. This information is cached in `CMakeCache.txt` in the build tree directory.
    There are a few options that allow you to manage that file more conveniently.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: CMake在配置阶段查询系统获取各种信息。这些信息存储在构建树目录中的`CMakeCache.txt`文件中。有一些选项可以让你更方便地管理该文件。
- en: 'The first thing that is at our disposal is the ability to *prepopulate cached
    information*:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先可以使用的功能是**预填充缓存信息**的能力：
- en: '[PRE25]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: We can provide a path to the CMake script, which (only) contains a list of `set()`
    commands to specify variables that will be used to initialize an empty build tree.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以提供CMake脚本的路径，该脚本（仅）包含一个`set()`命令列表，用于指定将用于初始化空构建树的变量。
- en: 'The **initialization and modification** of existing cache variables can be
    done in another way (for instance, when creating a file is a bit much to only
    set a few variables). You can simply set them in a command line, as follows:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '**现有缓存变量的初始化和修改**可以通过另一种方式完成（例如，仅设置几个变量而创建一个文件似乎有些过于繁琐）。你只需在命令行中简单地设置它们，如下所示：'
- en: '[PRE26]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The `:<type>` section is optional (it is used by GUIs); you can use `BOOL`,
    `FILEPATH`, `PATH`, `STRING`, or `INTERNAL`. If you omit the type, it will be
    set to the type of an already existing variable; otherwise, it will be set to
    `UNINITIALIZED`.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`:<type>`部分是可选的（GUIs使用它）；你可以使用`BOOL`、`FILEPATH`、`PATH`、`STRING`或`INTERNAL`。如果你省略了类型，它将设置为已有变量的类型；否则，它将设置为`UNINITIALIZED`。'
- en: 'One particularly important variable contains the type of the build: for example,
    debug and release. Many CMake projects will read it on numerous occasions to decide
    things such as the verbosity of messages, the presence of debugging information,
    and the level of optimization for created artifacts.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 一个特别重要的变量包含构建类型：例如，调试和发布。许多CMake项目会在多个场合读取它，以决定诸如消息的冗余度、调试信息的的存在以及创建的艺术品的优化级别等事情。
- en: 'For single-configuration generators (such as Make and Ninja), you''ll need
    to specify it during the configuration phase with the `CMAKE_BUILD_TYPE` variable
    and generate a separate build tree for each type of config: `Debug`, `Release`,
    `MinSizeRel`, or `RelWithDebInfo`.'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 对于单配置生成器（如Make和Ninja），你需要在配置阶段指定`CMAKE_BUILD_TYPE`变量，并为每种类型的配置生成一个单独的构建树：`Debug`、`Release`、`MinSizeRel`或`RelWithDebInfo`。
- en: 'Here''s an example:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例：
- en: '[PRE27]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Note that multi-configuration generators are configured during the build stage.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，多配置生成器在构建阶段进行配置。
- en: 'We can `-L` option:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`-L`选项：
- en: '[PRE28]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Such a list will contain cache variables that aren't marked as `ADVANCED`. We
    can change that by adding the `A` modifier. To print help messages with variables
    - add the `H` modifier.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的列表将包含未标记为`ADVANCED`的缓存变量。我们可以通过添加`A`修饰符来改变这一点。要打印带有变量的帮助信息 - 添加`H`修饰符。
- en: Surprisingly, custom variables that are added manually with the `-D` option
    won't be visible unless you specify one of the supported types.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 令人惊讶的是，使用`-D`选项手动添加的自定义变量如果不指定支持的一种类型，将不可见。
- en: 'The **removal** of one or more variables can be done with the following option:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '**删除**一个或多个变量的操作可以通过以下选项完成：'
- en: '[PRE29]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Here, the globbing expression supports the `*` wildcard and any `?` character
    symbols. Be careful when using these, as you might break things.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在此，通配符表达式支持`*`通配符和任何`?`字符符号。使用时要小心，以免破坏东西。
- en: Both of the `-U` and `-D` options can be repeated multiple times.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`-U`和`-D`选项都可以重复多次。'
- en: Options for debugging and tracing
  id: totrans-192
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 调试和跟踪选项
- en: 'CMake can be run with a multitude of options that allow you to peek under the
    hood. To get general information about variables, commands, macros, and other
    settings, run the following:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: CMake可以运行多种选项，让你窥视其内部。要获取有关变量、命令、宏和其他设置的一般信息，请运行以下操作：
- en: '[PRE30]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The optional file argument allows you to store the output in a file. Running
    it in the build tree directory will print additional information about the cache
    variables and build messages from the log files.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 可选的文件参数允许你将输出存储在文件中。在构建树目录中运行它将打印有关缓存变量和日志文件中的构建信息的额外信息。
- en: 'In our projects, we''ll be using `message()` commands to report details of
    the build process. CMake filters the log output of these based on the current
    log level (by default, this is `STATUS`). The following line specifies the log
    level that we''re interested in:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的项目中，我们将使用`message()`命令来报告构建过程的详细信息。CMake根据当前日志级别（默认情况下是`STATUS`）过滤这些日志输出。以下行指定了我们感兴趣的日志级别：
- en: '[PRE31]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Here, `level` can be any of the following: `ERROR`, `WARNING`, `NOTICE`, `STATUS`,
    `VERBOSE`, `DEBUG`, or `TRACE`. You can specify this setting permanently in the
    `CMAKE_MESSAGE_LOG_LEVEL` cache variable.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`level` 可以是以下任意一个：`ERROR`、`WARNING`、`NOTICE`、`STATUS`、`VERBOSE`、`DEBUG`
    或 `TRACE`。你可以在 `CMAKE_MESSAGE_LOG_LEVEL` 缓存变量中永久指定这个设置。
- en: 'Another interesting option allows you to `message()` call. To debug very complex
    projects, the `CMAKE_MESSAGE_CONTEXT` variable can be used like a stack. Whenever
    your code enters a specific context, you can add a descriptive name to the stack
    and remove it when leaving. By doing this, our messages will be decorated with
    the current `CMAKE_MESSAGE_CONTEXT` variable like so:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有趣的选项允许你使用`message()`调用。为了调试非常复杂的工程，`CMAKE_MESSAGE_CONTEXT`变量可以像栈一样使用。每当你代码进入一个特定的上下文时，你可以向栈中添加一个描述性的名称，并在离开时移除它。通过这样做，我们的消息将被当前`CMAKE_MESSAGE_CONTEXT`变量装饰如下：
- en: '[PRE32]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The option to enable this kind of log output is as follows:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 启用这种日志输出的选项如下：
- en: '[PRE33]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: We'll discuss logging in more detail in [*Chapter 2*](B17205_02_Final_JC_ePub.xhtml#_idTextAnchor051),
    *The CMake Language*.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第 2 章](B17205_02_Final_JC_ePub.xhtml#_idTextAnchor051) *CMake 语言* 中更详细地讨论日志记录。
- en: 'If all else fails – and we need to use the big guns – there is always **trace
    mode**. This will print every command with the filename and exact line number
    it is called from alongside its arguments. You can enable it as follows:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 如果其他方法都失败了——我们必须使用大杀器——总是有**跟踪模式**。这将打印出每个命令以及它来自的文件名和确切的行号及其参数。你可以按照如下方式启用它：
- en: '[PRE34]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Options for presets
  id: totrans-206
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 预设选项
- en: As you might have gathered, there are many, many options that users can specify
    to generate a build tree from your project. When dealing with the build tree path,
    generator, cache, and environmental variable, it's easy to get confused or miss
    something. Developers can simplify how users interact with their projects and
    provide a `CMakePresets.json` file that specifies some defaults. To learn more,
    please refer to the *Navigating the project files* section.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能已经猜到的，用户可以指定很多选项来从你的项目中生成一个构建树。当处理构建树路径、生成器、缓存和环境变量时，很容易感到困惑或遗漏某些内容。开发者可以简化用户与他们项目交互的方式，并提供一个指定一些默认值的`CMakePresets.json`文件。要了解更多，请参考*导航项目文件*部分。
- en: 'To list all of the available presets, execute the following:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出所有可用的预设，执行以下操作：
- en: '[PRE35]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'You can use one of the available presets as follows:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以按照如下方式使用其中一个预设：
- en: '[PRE36]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'These values override the system defaults and the environment. However, at
    the same time, they can be overridden with any arguments that are explicitly passed
    on the command line:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 这些值覆盖了系统默认值和环境。然而，同时，它们也可以被命令行上明确传递的任何参数覆盖：
- en: '![Figure 1.3 – How presets override CMakeCache.txt and the system environment
    variables'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.3 – 预设如何覆盖 CMakeCache.txt 和系统环境变量'
- en: '](img/Figure_1.3_B17205.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.3_B17205.jpg)'
- en: Figure 1.3 – How presets override CMakeCache.txt and the system environment
    variables
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3 – 预设如何覆盖 CMakeCache.txt 和系统环境变量
- en: Building a project
  id: totrans-216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建项目
- en: 'After generating our build tree, we''re ready for the next stage: *running
    the builder tool*. Not only does CMake know how to generate input files for many
    different builders, but it can also run them for you with arguments that are specific
    to our project.'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成我们的构建树之后，我们准备进入下一阶段：*运行构建工具*。CMake 不仅知道如何为许多不同的构建器生成输入文件，而且还知道如何为你提供特定于项目的参数来运行它们。
- en: Not Recommended
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 不推荐
- en: 'Many online sources recommend running GNU Make directly after the generation
    stage: `make`. This is a default generator for Linux and macOS, and it usually
    works. However, we prefer the method described in this section, as it is generator-independent
    and is supported across all platforms. As a result, we don''t need to worry about
    the exact environment of every user of our application.'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 许多在线资源建议在生成阶段之后直接运行 GNU Make：`make`。这是 Linux 和 macOS 的默认生成器，通常可以工作。然而，我们更喜欢本节描述的方法，因为它与生成器无关，并且支持所有平台。因此，我们不需要担心我们应用程序每个用户的准确环境。
- en: The syntax of the build mode
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 构建模式的语法
- en: '[PRE37]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'In the majority of these cases, it is enough to simply provide the bare minimum
    to get a successful build:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些大多数情况下，提供最少量的东西以获得成功的构建就足够了：
- en: '[PRE38]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: CMake needs to know where the build tree is that we generated. This is the same
    path that we passed with the `-B` argument in the generation stage.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: CMake 需要知道我们生成的构建树的位置。这是我们在生成阶段传递给 `-B` 参数的相同路径。
- en: 'By providing a few options, CMake allows you to specify key build parameters
    that work for every builder. If you need to provide special arguments to your
    chosen, native builder, pass them at the end of the command after the `--` token:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 通过提供一些选项，CMake允许您指定对每个构建器都有效的关键构建参数。如果您需要向您选择的本地构建器提供特殊参数，请在`--`标记之后，在命令的末尾传递它们：
- en: '[PRE39]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Options for parallel builds
  id: totrans-227
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 并行构建选项
- en: By default, many build tools will use multiple concurrent processes to leverage
    modern processors and compile your sources in parallel. Builders know the structure
    of project dependencies, so they can simultaneously process steps that have their
    dependencies met to save users' time.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，许多构建工具会使用多个并发进程来利用现代处理器并并行编译您的源代码。构建器知道项目依赖的结构，因此它们可以同时处理满足其依赖的步骤，以节省用户的时间。
- en: 'You might want to override that setting if you''re building on a powerful machine
    (or to force a single-threaded build for debugging). Simply specify the number
    of jobs with either of the following options:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在强大的机器上构建（或者为了调试而强制进行单线程构建），您可能想要覆盖那个设置。只需使用以下任一选项指定作业数量：
- en: '[PRE40]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The alternative is to set it with the `CMAKE_BUILD_PARALLEL_LEVEL` environment
    variable. As usual, we can always use the preceding option to override the variable.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是使用`CMAKE_BUILD_PARALLEL_LEVEL`环境变量来设置。像往常一样，我们总是可以使用前面的选项来覆盖变量。
- en: Options for target
  id: totrans-232
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 目标选项
- en: 'We''ll discuss targets in the second part of the book. For now, let''s just
    say that every project is made up of one or more parts, called targets. Usually,
    we''ll want to build all of them; however, on occasion, we might be interested
    in skipping some or explicitly building a target that was deliberately excluded
    from normal builds. We can do this as follows:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在书的第二部分讨论目标。现在，我们只需说每个项目都由一个或多个称为目标的部分组成。通常，我们想要构建它们所有；然而，在某些情况下，我们可能想要跳过一些或者显式构建被正常构建中故意排除的目标。我们可以这样做：
- en: '[PRE41]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: As you will observe, we can specify multiple targets by repeating the `-t` argument.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您将观察到的，我们可以通过重复`-t`参数来指定多个目标。
- en: 'One target that isn''t normally built is `clean`. This will remove all artifacts
    from the build directory. You can call it like this:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 通常不构建的一个目标是`clean`。这将从构建目录中删除所有工件。您可以这样调用它：
- en: '[PRE42]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Additionally, CMake offers a convenient alias if you''d like to clean first
    and then implement a normal build:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，CMake还提供了一个方便的别名，如果你想要先清理然后再进行正常构建的话：
- en: '[PRE43]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Options for multi-configuration generators
  id: totrans-240
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 多配置生成器的选项
- en: 'So, we already know a bit about generators: they come in different shapes and
    sizes. Some of them offer more features than others, and one of these features
    is the ability to build both `Debug` and `Release` build types in a single build
    tree.'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们已经对生成器有了一些了解：它们有不同的形状和大小。其中一些提供的功能比其他的多，而这些功能之一就是能够在单个构建树中构建`Debug`和`Release`构建类型。
- en: Generators that support this feature include Ninja Multi-Config, Xcode, and
    Visual Studio. Every other generator is a single-configuration generator, and
    they require a separate build tree for that purpose.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 支持此功能的生成器包括Ninja多配置、Xcode和Visual Studio。其余的生成器都是单配置生成器，为此目的需要一个独立的构建树。
- en: 'Select `Debug`, `Release`, `MinSizeRel`, or `RelWithDebInfo` and specify it
    as follows:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 选择`Debug`、`Release`、`MinSizeRel`或`RelWithDebInfo`，并按照以下方式指定：
- en: '[PRE44]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Otherwise, CMake will use `Debug` as the default.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，CMake将使用`Debug`作为默认值。
- en: Options for debugging
  id: totrans-246
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 调试选项
- en: 'When things go bad, the first thing we should do is check the output messages.
    However, veteran developers know that printing all the details all of the time
    is confusing, so they often hide them by default. When we need to peek under the
    hood, we can ask for far more detailed logs by telling CMake to be verbose:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 当事情出错时，我们首先应该做的是检查输出信息。然而，经验丰富的开发者知道，一直打印所有细节是令人困惑的，所以它们通常默认隐藏它们。当我们需要揭开盖子时，我们可以通过告诉CMake要详细输出日志来请求更详细的日志：
- en: '[PRE45]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The same effect can be achieved by setting the `CMAKE_VERBOSE_MAKEFILE` cached
    variable.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 通过设置`CMAKE_VERBOSE_MAKEFILE`缓存变量也可以达到同样的效果。
- en: Installing a project
  id: totrans-250
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装项目
- en: When artifacts are built, users can install them on the system. Usually, this
    means copying files into the correct directories, installing libraries, or running
    some custom installation logic from a CMake script.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 当构建工件时，用户可以将它们安装到系统中。通常，这意味着将文件复制到正确的目录中，安装库，或者从CMake脚本中运行一些自定义安装逻辑。
- en: The syntax of the installation mode
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 安装模式的语法
- en: '[PRE46]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'As with other modes of operation, CMake requires a path to a generated build
    tree:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他操作模式一样，CMake需要一个生成构建树的路径：
- en: '[PRE47]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Options for multi-configuration generators
  id: totrans-256
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 多配置生成器选项
- en: 'Just like in the build stage, we can specify which build type we want to use
    for our installation (for more details, please refer to the *Building a project*
    section). The available types include `Debug`, `Release`, `MinSizeRel`, and `RelWithDebInfo`.
    The signature is as follows:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 与构建阶段类似，我们可以指定我们想要用于安装的构建类型（有关详细信息，请参阅*构建项目*部分）。可用的类型包括`Debug`、`Release`、`MinSizeRel`和`RelWithDebInfo`。签名如下：
- en: '[PRE48]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Options for components
  id: totrans-259
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 组件选项
- en: As a developer, you might choose to split your project into components that
    can be installed independently. We'll discuss the concept of components in further
    detail in [*Chapter 11*](B17205_11_Final_JC_ePub.xhtml#_idTextAnchor217), *Installing
    and Packaging*. For now, let's just assume they represent different parts of the
    solution. This might be something like `application`, `docs`, and `extra-tools`.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发者，您可能会选择将项目拆分为可以独立安装的组件。我们将在[第11章](B17205_11_Final_JC_ePub.xhtml#_idTextAnchor217)进一步讨论组件的概念，*安装与打包*。现在，我们假设它们代表解决方案的不同部分。这可能类似于`application`、`docs`和`extra-tools`。
- en: 'To install a single component, use the following option:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装单个组件，请使用以下选项：
- en: '[PRE49]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Options for permissions
  id: totrans-263
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 权限选项
- en: 'If installation is carried on a Unix-like platform, you can specify default
    permissions for the installed directories, with the following option, using the
    format of `u=rwx,g=rx,o=rx`:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在类Unix平台上进行安装，您可以使用以下选项指定安装目录的默认权限，格式为`u=rwx,g=rx,o=rx`：
- en: '[PRE50]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Options for the installation directory
  id: totrans-266
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安装目录选项
- en: 'We can prepend the installation path specified in the project configuration
    with a prefix of our choice (for example, when we have limited write access to
    some directories). The `/usr/local` path that is prefixed with `/home/user` becomes
    `/home/user/usr/local`. The signature for this option is as follows:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以为项目配置中指定的安装路径添加一个自定义前缀（例如，当我们对某些目录的写入权限有限时）。原本的`/usr/local`路径通过添加`/home/user`前缀后变为`/home/user/usr/local`。此选项的签名如下：
- en: '[PRE51]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Note that this won't work on Windows, as paths on this platform usually start
    with the drive letter.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这在Windows上不起作用，因为该平台上的路径通常以驱动器字母开头。
- en: Options for debugging
  id: totrans-270
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 调试选项
- en: 'Similarly, to the build stage, we can also choose to view a detailed output
    of the installation stage. To do this, use any of the following:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，我们也可以选择在构建阶段查看安装阶段的详细输出。为此，可以使用以下任意一个选项：
- en: '[PRE52]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: The same effect can be achieved if the `VERBOSE` environment variable is set.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 如果设置了`VERBOSE`环境变量，也可以达到同样的效果。
- en: Running a script
  id: totrans-274
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行脚本
- en: CMake projects are configured using CMake's custom language. It's cross-platform,
    quite powerful, and already present. So, why not make it available for other tasks?
    Sure enough, you can write standalone scripts (we'll get to that at the end of
    this chapter).
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: CMake项目使用CMake的自定义语言进行配置。它是跨平台的，相当强大，并且已经存在。那么为什么不将其用于其他任务呢？确实，你可以编写独立的脚本（我们将在本章末尾讨论到这一点）。
- en: 'CMake can run these scripts like so:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: CMake可以像这样运行这些脚本：
- en: Syntax of the script mode
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本模式的语法
- en: '[PRE53]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Running such a script won''t run any configurations or generate stages. Additionally,
    it won''t affect the cache. There are two ways you can pass values to this script:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此类脚本不会运行任何配置或生成阶段。此外，它不会影响缓存。你可以通过以下两种方式将值传递给此脚本：
- en: Through variables defined with the `-D` option.
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用`-D`选项定义的变量。
- en: Through arguments that can be passed after a `--` token. CMake will create `CMAKE_ARGV<n>`
    variables for all arguments passed to the script (including the `--` token).
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在`--`标记后传递的参数。CMake将为传递给脚本的的所有参数（包括`--`标记）创建`CMAKE_ARGV<n>`变量。
- en: Running a command-line tool
  id: totrans-282
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行命令行工具
- en: On rare occasions, we might need to run a single command in a platform-independent
    way – perhaps copy a file or compute a checksum. Not all platforms were created
    equal, so not all commands are available in every system, or they have a different
    name.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在少数情况下，我们可能需要以平台无关的方式运行单个命令——可能是复制文件或计算校验和。并非所有的平台都是平等的，因此并非所有的命令在每一个系统中都是可用的，或者它们有不同的名称。
- en: 'CMake offers a mode in which to execute the most common ones in the same way
    across platforms:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: CMake提供了一种模式，可以在不同平台上一致地执行最常用的命令：
- en: The syntax of the command-line tool mode
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行工具模式的语法
- en: '[PRE54]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'As the use of this particular mode is fairly limited, we won''t cover it in
    depth. However, if you''re interested in the details, I recommend calling `cmake
    -E` to list all the available commands. To simply get a glimpse of what''s on
    offer, CMake 3.20 supports the following commands:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这种特定模式的使用相当有限，我们不会深入讨论。然而，如果你对细节感兴趣，我建议调用`cmake -E`来列出所有可用的命令。为了简单地了解提供的功能，CMake
    3.20支持以下命令：
- en: '`capabilities`, `cat`, `chdir`, `compare_files`, `copy`, `copy_directory`,
    `copy_if_different`, `echo`, `echo_append`, `env`, `environment`, `make_directory`,
    `md5sum`, `sha1sum`, `sha224sum`, `sha256sum`, `sha384sum`, `sha512sum`, `remove`,
    `remove_directory`, `rename`, `rm`, `server`, `sleep`, `tar`, `time`, `touch`,
    `touch_nocreate`, `create_symlink`, `create_hardlink`, `true`, and `false`.'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '`capabilities`, `cat`, `chdir`, `compare_files`, `copy`, `copy_directory`,
    `copy_if_different`, `echo`, `echo_append`, `env`, `environment`, `make_directory`,
    `md5sum`, `sha1sum`, `sha224sum`, `sha256sum`, `sha384sum`, `sha512sum`, `remove`,
    `remove_directory`, `rename`, `rm`, `server`, `sleep`, `tar`, `time`, `touch`,
    `touch_nocreate`, `create_symlink`, `create_hardlink`, `true`, 和 `false`。'
- en: If a command you'd like to use is missing, or you need a more complex behavior,
    consider wrapping it in a script and running it in `-P` mode.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要使用的命令缺失，或者你需要更复杂的行为，考虑将其封装在脚本中，并以`-P`模式运行它。
- en: Getting help
  id: totrans-290
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取帮助
- en: It comes without surprise that CMake offers extensive help that is accessible
    through its command line.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 毫不奇怪，CMake通过其命令行提供了广泛的帮助。
- en: The syntax of the help mode
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 帮助模式的语法
- en: '[PRE55]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: CTest
  id: totrans-294
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CTest
- en: Automated testing is very important in order to produce and maintain high-quality
    code. That's why we devoted an entire chapter to this subject (please refer to
    [*Chapter 8*](B17205_08_Final_JC_ePub.xhtml#_idTextAnchor179), *Testing Frameworks*),
    where we do a deep dive into the usage of CTest. It is one of the available command-line
    tools, so let's briefly introduce it now.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化测试对于生成和维护高质量代码非常重要。这就是为什么我们专门用了一整章来讨论这个主题（请参考[第8章](B17205_08_Final_JC_ePub.xhtml#_idTextAnchor179)，*测试框架*），其中我们深入探讨了CTest的使用。它是可用的命令行工具之一，所以我们现在简要介绍一下。
- en: CTest is about wrapping CMake in a higher layer of abstraction, where the building
    stage becomes just one of the stepping stones in the process of developing our
    software. Other tasks that CMake can do for us include updating, running all kinds
    of tests, reporting the state of the project to external dashboards, and running
    scripts written in the CMake language.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: CTest是在更高层次的抽象中封装CMake，其中构建阶段成为开发我们软件过程中的一个垫脚石。CMake还可以为我们执行其他任务，包括更新、运行各种测试、将项目状态报告给外部仪表板以及运行编写在CMake语言中的脚本。
- en: More importantly, CTest standardizes running tests and reporting for solutions
    built with CMake. This means that as a user, you don't need to know which testing
    framework the project is using or how to run it. CTest provides a convenient façade
    to list, filter, shuffle, retry, and timebox test runs. Additionally, it can call
    CMake for you if a build is required.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 更重要的是，CTest标准化了使用CMake构建的解决方案的测试运行和报告。这意味着作为用户，你不需要知道项目使用的是哪个测试框架或如何运行它。CTest提供了一个方便的界面来列出、筛选、洗牌、重试和计时测试运行。此外，如果需要构建，它还可以调用CMake。
- en: 'The simplest way to run tests for a built project is to call `ctest` in the
    generated build tree:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 运行构建项目测试的最简单方法是在生成的构建树中调用`ctest`：
- en: '[PRE56]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: CPack
  id: totrans-300
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CPack
- en: After we have built and tested our amazing software, we are ready to share it
    with the world. In a rare few instances, power users are completely fine with
    the source code, and that's what they want. However, the vast majority of the
    world is using precompiled binaries because of convenience and to save time.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们构建并测试了我们的神奇软件之后，我们准备与世界分享它。在少数情况下，高级用户完全可以使用源代码，这就是他们想要的。然而，世界上绝大多数人使用预编译的二进制文件，因为这样方便且能节省时间。
- en: 'CMake doesn''t leave you stranded here; it comes with batteries included. CPack
    is built for the exact purpose of creating packages for different platforms: compressed
    archives, executable installers, wizards, NuGet packages, macOS bundles, DMG packages,
    RPMs, and more.'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: CMake不会让你在这里陷入困境；它自带了电池。CPack正是为了创建不同平台的包而设计的：压缩归档、可执行安装程序、向导、NuGet包、macOS捆绑包、DMG包、RPMs等。
- en: 'CPack works in a very similar way to CMake: it is configured with the CMake
    language and has many package generators to pick from (just don''t confuse them
    with CMake buildsystem generators). We''ll go through all the specific details
    in [*Chapter 11*](B17205_11_Final_JC_ePub.xhtml#_idTextAnchor217), *Installing
    and Packaging*, as this is quite a hefty tool that is meant for the final stages
    of CMake projects.'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: CPack的工作方式与CMake非常相似：它使用CMake语言进行配置，并有许多可供选择的包生成器（只是不要将它们与CMake构建系统生成器混淆）。我们将在[第11章](B17205_11_Final_JC_ePub.xhtml#_idTextAnchor217)中详细介绍，该章节讨论安装和打包，因为这是一个用于CMake项目最后阶段的相当庞大的工具。
- en: The CMake GUI
  id: totrans-304
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CMake GUI
- en: CMake for Windows comes with a GUI version to configure the building process
    of previously prepared projects. For Unix-like platforms, there is a version built
    with QT libraries. Ubuntu offers it in the `cmake-qt-gui` package.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows，CMake附带一个GUI版本，用于配置先前准备好的项目的构建过程。对于Unix-like平台，有一个用QT库构建的版本。Ubuntu在`cmake-qt-gui`包中提供。
- en: 'To access the CMake GUI, run the `cmake-gui` executable:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问CMake GUI，运行`cmake-gui`可执行文件：
- en: '![Figure 1.4 – The CMake GUI – the configuring stage for a buildsystem using
    a generator for Visual Studio 2019'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.4 – CMake GUI –使用Visual Studio 2019的生成器配置构建系统的配置阶段'
- en: '](img/Figure_1.4_B17205.jpg)'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.4_B17205.jpg)'
- en: Figure 1.4 – The CMake GUI – the configuring stage for a buildsystem using a
    generator for Visual Studio 2019
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4 – CMake GUI –使用Visual Studio 2019的生成器配置构建系统的配置阶段
- en: The GUI application is a convenient tool for users of your application, as the
    options found there are rather limited. It can be useful for those who aren't
    familiar with the command line and would prefer a window-based interface.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 图形用户界面（GUI）应用程序是方便的工具，因为那里的选项相当有限。对于不熟悉命令行并且更喜欢基于窗口的界面的用户来说，这可能很有用。
- en: Not Recommended
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 不推荐
- en: I would definitely recommend GUI to end users craving convenience; however,
    as a programmer, I avoid introducing any manual, blocking steps that would require
    clicking on forms every time I build my programs. This is especially important
    for build automation in CI pipelines. These tools require headless applications
    so that the build can be fully executed without any user interaction.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 我肯定会推荐GUI给那些追求方便的最终用户；然而，作为一名程序员，我避免引入任何需要每次构建程序时点击表单的手动、阻塞步骤。这对于CI管道中的构建自动化尤为重要。这些工具需要无头应用程序，以便在没有用户交互的情况下完全执行构建。
- en: CCMake
  id: totrans-313
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CCMake
- en: The `ccmake` executable is the CMake `curses` interface for Unix-like platforms
    (it's unavailable for Windows). It's not available as part of the CMake package,
    so users have to install it separately.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '`ccmake`可执行文件是CMake的Unix-like平台的`curses`界面（Windows上不可用）。它不是CMake包的一部分，因此用户必须单独安装。'
- en: 'The command for Debian/Ubuntu systems is as follows:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: Debian/Ubuntu系统的命令如下：
- en: '[PRE57]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Note that the project configuration settings can be specified interactively
    through this GUI. Brief instructions are provided at the bottom of the Terminal
    when the program is running:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，可以通过这个GUI交互式地指定项目配置设置。程序运行时，终端底部会提供简短的说明：
- en: The syntax of the CCMake command
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: CCMake命令的语法
- en: '[PRE58]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'CCMake uses the same set of options as `cmake`:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: CCMake使用与`cmake`相同的选项集：
- en: '![Figure 1.5 – The configuring stage in ccmake'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.5 – ccmake中的配置阶段'
- en: '](img/Figure_1.5_B17205.jpg)'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.5_B17205.jpg)'
- en: Figure 1.5 – The configuring stage in ccmake
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5 – ccmake中的配置阶段
- en: As with **Graphical User Interfaces** (**GUIs**), this mode is fairly limited
    and is intended to be used by less experienced users. If you're using a Unix machine,
    I recommend that you take a quick look and move on even quicker.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 与图形用户界面（GUI）一样，这种模式相当有限，旨在供经验较少的用户使用。如果您在Unix机器上工作，我建议您快速查看并更快地继续。
- en: This concludes the basic introduction to command line of CMake. It's time to
    discover what is the structure of a typical CMake project.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 这结束了关于CMake命令行的基本介绍。是时候探索一下典型CMake项目的结构了。
- en: Navigating the project files
  id: totrans-326
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浏览项目文件
- en: CMake uses quite a few files to manage its projects. Let's attempt to get a
    general idea of what each file does before tinkering with the contents. It's important
    to realize, that even though a file contains CMake language commands, it's not
    certain that it's meant for developers to edit. Some files are generated to be
    used by subsequent tools, and any changes made to those files will be written
    over at some stage. Other files are meant for advanced users to adjust your project
    to their individual needs. Finally, there are some temporary files that provide
    valuable information in specific contexts. This section will also specify which
    of them should be in the *ignore file* of your version control system.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: CMake使用很多文件来管理其项目。在修改内容之前，让我们试图了解每个文件的作用。重要的是要意识到，尽管一个文件包含CMake语言命令，但这并不意味着它一定是为了让开发者编辑的。有些文件是为了被后续工具使用而生成的，对这些文件所做的任何更改都将在某个阶段被覆盖。其他文件是为了让高级用户根据个人需求调整项目。最后，还有一些在特定上下文中提供宝贵信息的临时文件。本节还将指定哪些应该放在您版本控制系统的*忽略文件*中。
- en: The source tree
  id: totrans-328
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 源代码树
- en: This is the directory where your project will live (it is also called the **project
    root**). It contains all of the C++ sources and CMake project files.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您的项目将所在的目录（也称为**项目根**）。它包含所有的C++源代码和CMake项目文件。
- en: 'Here are the key takeaways of this directory:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 此目录的关键收获如下：
- en: It is required that you provide a `CMakeLists.txt` configuration file in its
    top directory.
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您必须在它的顶部目录中提供一个`CMakeLists.txt`配置文件。
- en: It should be managed with a VCS such as `git`.
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它应该使用如`git`这样的VCS进行管理。
- en: The path to this directory is given by the user with a `-S` argument of the
    `cmake` command.
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此目录的路径由用户通过`cmake`命令的`-S`参数给出。
- en: Avoid hardcoding any absolute paths to the source tree in your CMake code –
    users of your software can store the project under a different path.
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免在您的CMake代码中硬编码任何绝对路径到源代码树——您的软件的用户可以将项目存储在不同的路径下。
- en: The build tree
  id: totrans-335
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建树
- en: 'CMake uses this directory to store everything that gets generated during the
    build: the artifacts of the project, the transient configuration, the cache, the
    build logs, and anything that your native build tool will create. Alternative
    names for this directory include **build root** and **binary tree**.'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: CMake使用此目录来存储构建过程中生成的所有内容：项目的工件、短暂配置、缓存、构建日志以及您的本地构建工具将创建的任何内容。这个目录的别名还包括**构建根**和**二进制树**。
- en: 'Here are the key takeaways of this directory:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 此目录的关键收获如下：
- en: Your binary files will be created here, such as executables and libraries, along
    with *object files* and archives used for final linking.
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的二进制文件将在此处创建，例如可执行文件和库文件，以及用于最终链接的*对象文件*和归档文件。
- en: Don't add this directory to your VCS – it's specific to your system. If you
    decide to put it inside the source tree, make sure to add it to the VCS ignore
    file.
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要将此目录添加到您的VCS中——它是特定于您的系统的。如果您决定将其放在源代码树内，请确保将其添加到VCS忽略文件中。
- en: CMake recommends **out-of-source builds** or builds that produce artifacts in
    a directory that is separate from all source files. This way, we can avoid polluting
    our project's source tree with temporary, system-specific files (or **in-source
    builds**).
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CMake建议进行**源外构建**，或生成工件的目录与所有源文件分离的构建。这样，我们可以避免用临时、系统特定的文件污染项目的源代码树（或者进行**源内构建**）。
- en: It is specified with `-B` or as a last argument to the `cmake` command if you
    have provided a path to the source, for example, `cmake -S ../project ./`.
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果提供了源代码的路径，例如`cmake -S ../project ./`，则使用`-B`或作为`cmake`命令的最后一个参数来指定此目录。
- en: It's recommended that your projects include an installation stage that allows
    you to put the final artifacts in the correct place in the system, so all temporary
    files used for building can be removed.
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建议您的项目包括一个安装阶段，允许您将最终工件放在系统中的正确位置，以便可以删除用于构建的所有临时文件。
- en: Listfiles
  id: totrans-343
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列表文件
- en: 'Files that contain the CMake language are called listfiles and can be included
    one in another, by calling `include()` and `find_package()`, or indirectly with
    `add_subdirectory()`:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 包含CMake语言的文件称为列表文件，可以通过调用`include()`和`find_package()`，或者间接地通过`add_subdirectory()`来相互包含：
- en: CMake doesn't enforce consistent naming for these files, but usually, they have
    a `.cmake` extension.
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CMake不强制这些文件的一致命名，但通常它们具有`.cmake`扩展名。
- en: A very important naming exception is a file called `CMakeLists.txt`, which is
    the first file to be executed in the configuration stage. It is required at the
    top of the source tree.
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个非常重要的命名异常是一个名为`CMakeLists.txt`的文件，这是在配置阶段第一个被执行的文件。它需要位于源树的顶部。
- en: 'As CMake walks the source tree and includes different listfiles, the following
    variables are set: `CMAKE_CURRENT_LIST_DIR`, `CMAKE_CURRENT_LIST_FILE`, `CMAKE_PARENT_LIST_FILE`,
    and `CMAKE_CURRENT_LIST_LINE`.'
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当CMake遍历源树并包含不同的列表文件时，以下变量将被设置：`CMAKE_CURRENT_LIST_DIR`，`CMAKE_CURRENT_LIST_FILE`，`CMAKE_PARENT_LIST_FILE`和`CMAKE_CURRENT_LIST_LINE`。
- en: CMakeLists.txt
  id: totrans-348
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`CMakeLists.txt`'
- en: 'CMake projects are configured with `CMakeLists.txt` listfiles. You are required
    to provide at least one in the root of the source tree. Such a top-level file
    is the first to be executed in the configuration stage, and it should contain
    at least two commands:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '`CMakeLists.txt`列表文件用于配置CMake项目。你必须在源树根目录中提供至少一个。这样的顶级文件在配置阶段是第一个被执行的，它至少应该包含两个命令：'
- en: '`cmake_minimum_required(VERSION <x.xx>)`: Sets an expected version of CMake
    (and implicitly tells CMake what policies to apply with regard to legacy behaviors).'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cmake_minimum_required(VERSION <x.xx>)`：设置CMake的预期版本（隐含地告诉CMake如何应用与遗留行为相关的策略）。'
- en: '`project(<name> <OPTIONS>)`: This is used to name the project (the provided
    name will be stored in the `PROJECT_NAME` variable) and specify the options to
    configure it (we''ll discuss this further in the [*Chapter 2*](B17205_02_Final_JC_ePub.xhtml#_idTextAnchor051),
    *The CMake Language*).'
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`project(<name> <OPTIONS>)`：用于命名项目（提供的名称将存储在`PROJECT_NAME`变量中）并指定配置选项（我们将在[第2章](B17205_02_Final_JC_ePub.xhtml#_idTextAnchor051)
    *CMake语言*中进一步讨论）。'
- en: 'As your software grows, you might want to partition it into smaller units that
    can be configured and reasoned about separately. CMake supports this through the
    notion of subdirectories and their own `CMakeLists.txt` files. Your project structure
    might look similar to the following example:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 随着你的软件的增长，你可能会希望将其划分为更小的单元，可以单独配置和推理。CMake通过子目录及其自己的`CMakeLists.txt`文件支持这一点。你的项目结构可能类似于以下示例：
- en: '[PRE59]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'A very simple `CMakeLists.txt` file can then be used to bring it all together:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 然后可以使用一个非常简单的`CMakeLists.txt`文件将其全部整合在一起：
- en: CMakeLists.txt
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '`CMakeLists.txt`'
- en: '[PRE60]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'The main aspects of the project are covered in the top-level file: managing
    the dependencies, stating the requirements, and detecting the environment. In
    this file, we also have an `add_subdirectory(api)` command to include another
    `CMakeListst.txt` file from the `api` directory to perform steps that are specific
    to the API part of our application.'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 项目的主要方面在顶级文件中涵盖：管理依赖项，声明要求，以及检测环境。在此文件中，我们还有一个`add_subdirectory(api)`命令，以从`api`目录中包含另一个`CMakeListst.txt`文件，执行与应用程序的API部分相关的特定步骤。
- en: CMakeCache.txt
  id: totrans-358
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`CMakeCache.txt`'
- en: 'Cache variables will be generated from `listfiles` and stored in `CMakeCache.txt`
    when the configure stage is run for the first time. This file resides in the root
    of the build tree and has a fairly simple format:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存变量将在第一次运行配置阶段时从`listfiles`生成，并存储在`CMakeCache.txt`中。此文件位于构建树的根目录中，格式相当简单：
- en: '[PRE61]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: As you can observe from comments in the heading, this format is pretty self-explanatory.
    Cache entries in the `EXTERNAL` section are meant for users to modify, while the
    `INTERNAL` section is managed by CMake. Note that it's not recommended that you
    change them manually.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在标题中的注释所观察到的，这个格式相当简单易懂。`EXTERNAL`部分中的缓存条目是为了让用户修改，而`INTERNAL`部分由CMake管理。请注意，不建议您手动更改它们。
- en: 'Here are several key takeaways to bear in mind:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些要点：
- en: You can manage this file manually, by calling `cmake` (please refer to *Options
    for caching* in the *Mastering the command line* section), or through `ccmake`/`cmake-gui`.
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以通过调用`cmake`手动管理此文件（请参阅*缓存选项*在*精通命令行*部分），或者通过`ccmake`/`cmake-gui`。
- en: You can reset the project to its default configuration by deleting this file;
    it will be regenerated from the listfiles.
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过删除此文件，你可以将项目重置为其默认配置；它将从列表文件中重新生成。
- en: Cache variables can be read and written from the listfiles. Sometimes, variable
    reference evaluation is a bit complicated; however, we will cover that in more
    detail in [*Chapter 2*](B17205_02_Final_JC_ePub.xhtml#_idTextAnchor051), *The
    CMake Language*.
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缓存变量可以从列表文件中读写。有时，变量引用评估有点复杂；然而，我们将在[第2章](B17205_02_Final_JC_ePub.xhtml#_idTextAnchor051)
    *CMake语言*中更详细地介绍。
- en: The Config-files for packages
  id: totrans-366
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 包的配置文件
- en: A big part of the CMake ecosystem includes the external packages that projects
    can depend on. They allow developers to use libraries and tools in a seamless,
    cross-platform way. Packages that support CMake should provide a configuration
    file so that CMake understands how to use them.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: CMake 生态系统的大部分包括项目可以依赖的外部包。它们允许开发人员以无缝、跨平台的方式使用库和工具。支持 CMake 的包应提供配置文件，以便 CMake
    了解如何使用它们。
- en: 'We''ll learn how to write those files in [*Chapter 11*](B17205_11_Final_JC_ePub.xhtml#_idTextAnchor217),
    *Installing and Packaging*. Meanwhile, here''s a few interesting details to bear
    in mind:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第 11 章](B17205_11_Final_JC_ePub.xhtml#_idTextAnchor217)中学习如何编写这些文件，*安装和打包*。同时，这里有一些有趣的细节要注意：
- en: '**Config-files** (original spelling) contain information regarding how to use
    the library binaries, headers, and helper tools. Sometimes, they expose CMake
    macros to use in your project.'
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置文件**（原名）包含有关如何使用库二进制文件、头文件和辅助工具的信息。有时，它们暴露出 CMake 宏，可以在您的项目中使用。'
- en: Use the `find_package()` command to include packages.
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `find_package()` 命令来包含包。
- en: CMake files describing packages are named `<PackageName>-config.cmake` and `<PackageName>Config.cmake`.
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述包的 CMake 文件名为 `<PackageName>-config.cmake` 和 `<PackageName>Config.cmake`。
- en: When using packages, you can specify which version of the package you need.
    CMake will check this in the associated `<Config>Version.cmake` file.
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用包时，您可以指定需要的包的哪个版本。CMake 会在关联的 `<Config>Version.cmake` 文件中检查这个版本。
- en: Config-files are provided by package vendors supporting the CMake ecosystem.
    If a vendor doesn't provide such a config-file, it can be replaced with a **Find-module**
    (original spelling).
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置文件由支持 CMake 生态系统的包供应商提供。如果一个供应商没有提供这样的配置文件，可以用 **Find-module**（原名）来替换。
- en: CMake provides a package registry to store packages system-wide and for each
    user.
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CMake 提供了一个包注册表，用于在系统范围内和每个用户处存储包。
- en: The cmake_install.cmake, CTestTestfile.cmake, and CPackConfig.cmake files
  id: totrans-375
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: cmake_install.cmake、CTestTestfile.cmake 和 CPackConfig.cmake 文件
- en: These files are generated in the build tree by the `cmake` executable in the
    generation stage. As such, they shouldn't be edited manually. CMake uses them
    as a configuration for the `cmake` install action, CTest, and CPack. If you're
    implementing an in-source build (not recommended), it's probably a good idea to
    add them to the VCS ignore file.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件由 `cmake` 可执行文件在生成阶段在构建树中生成。因此，不建议手动编辑它们。CMake 使用它们作为 `cmake` 安装操作、CTest
    和 CPack 的配置。如果您实现源代码构建（不建议），添加到 VCS 忽略文件中可能是个不错的主意。
- en: CMakePresets.json and CMakeUserPresets.json
  id: totrans-377
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CMakePresets.json 和 CMakeUserPresets.json
- en: The configuration of the projects can become a relatively busy task when we
    need to be specific about things such as cache variables, chosen generators, the
    path of the build tree, and more – especially when we have more than one way of
    building our project. This is where the presets come in.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要具体设置诸如缓存变量、选择生成器、构建树路径等事物时，项目的配置可能会变得相对繁琐——尤其是当我们有多种构建项目的方式时。这时预设就派上用场了。
- en: Users can choose presets through the GUI or use the command line to `--list-presets`
    and select a preset for the buildsystem with the `--preset=<preset>` option. You'll
    find more details in the *Mastering the command line* section of this chapter.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以通过 GUI 选择预设，或者使用命令行 `--list-presets` 并使用 `--preset=<preset>` 选项为构建系统选择一个预设。您可以在本章的
    *精通命令行* 部分找到更多详细信息。
- en: 'Presets are stored in the same JSON format in two files:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 预设以相同的 JSON 格式存储在两个文件中：
- en: '`CMakePresets.json`: This is meant for project authors to provide official
    presets.'
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CMakePresets.json`：这是为了让项目作者提供官方预设。'
- en: '`CMakeUserPresets.json`: This is dedicated to users who want to customize the
    project configuration to their liking (you can add it to your VCS ignore file).'
  id: totrans-382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CMakeUserPresets.json`：这是专为希望按自己的喜好自定义项目配置的用户准备的（您可以在 VCS 忽略文件中添加它）。'
- en: 'Presets are project files, so their explanation belongs here. However, they
    are not required in projects, and they only become useful when we have completed
    the initial setup. So, feel free to skip to the next section and return here later,
    if needed:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 预设是项目文件，所以它们的解释属于这里。然而，在项目中它们并非必需，只有在完成初始设置后它们才变得有用。所以，如果您愿意，可以跳到下一节，需要时再回来：
- en: chapter-01/02-presets/CMakePresets.json
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: chapter-01/02-presets/CMakePresets.json
- en: '[PRE62]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '`CMakePresets.json` specifies the following root fields:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: '`CMakePresets.json` 指定以下根字段：'
- en: '`Version`: This is required, and it is always `1`.'
  id: totrans-387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Version`：这是必须的，总是`1`。'
- en: '`cmakeMinimumRequired`: This is optional. It specifies the CMake version in
    form of a hash with three fields: `major`, `minor`, and `patch`.'
  id: totrans-388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cmakeMinimumRequired`：这是可选的。它以散列形式指定CMake版本，包含三个字段：`major`、`minor`和`patch`。'
- en: '`vendor`: An IDE can use this optional field to store its metadata. It''s a
    map keyed with a vendor domain and slash-separated path. CMake virtually ignores
    this field.'
  id: totrans-389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vendor`：IDE可以使用这个可选字段来存储其元数据。它是一个以供应商域和斜杠分隔的路径为键的映射。CMake实际上忽略这个字段。'
- en: '`configurePresets`: This is an optional array of available presets.'
  id: totrans-390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`configurePresets`：这是一个可选的可用预设数组。'
- en: 'Let''s add two presets to our `configurePresets` array:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们向我们的`configurePresets`数组中添加两个预设：
- en: 'chapter-01/02-presets/CMakePresets.json : my-preset'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: chapter-01/02-presets/CMakePresets.json：my-preset
- en: '[PRE63]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'This file supports a tree-like structure, where children presets inherit properties
    from multiple parent presets. This means that we can create a copy of the preceding
    preset and only override the fields we need. Here''s an example of what a child
    preset might look like:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件支持树状结构，其中子预设从多个父预设继承属性。这意味着我们可以创建先前预设的副本，并只覆盖我们需要的字段。以下是一个子预设可能的样子：
- en: 'chapter-01/02-presets/CMakePresets.json : my-preset-multi'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: chapter-01/02-presets/CMakePresets.json：my-preset-multi
- en: '[PRE64]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Note
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The CMake documentation only labels a few fields as explicitly required. However,
    there are some other fields that are labeled as optional, which must be provided
    either in the preset or inherited from its parent.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: CMake文档只将一些字段明确标记为必需的。然而，还有一些其他字段被标记为可选的，这些字段必须在预设中提供，或者从其父预设继承。
- en: 'Presets are defined as maps with the following fields:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 预设被定义为具有以下字段的映射：
- en: '`name`: This is a required string that identifies the preset. It has to be
    machine-friendly and unique across both files.'
  id: totrans-400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`：这是一个必需的字符串，用于标识预设。它必须对机器友好，并且在两个文件中唯一。'
- en: '`Hidden`: This is an optional Boolean hiding the preset from the GUI and command-line
    list. Such a preset can be a parent of another and isn''t required to provide
    anything but its name.'
  id: totrans-401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Hidden`：这是一个可选的布尔值，用于隐藏预设，使其不在GUI和命令行列表中显示。这样的预设可以是另一个预设的父预设，并且不需要提供除其名称以外的任何内容。'
- en: '`displayName`: This is an optional string with a human-friendly name.'
  id: totrans-402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`displayName`：这是一个可选的字符串，有一个人类可读的名字。'
- en: '`description`: This is an optional string describing the preset.'
  id: totrans-403
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`description`：这是一个可选的字符串，用于描述预设。'
- en: '`Inherits`: This is an optional string or array of preset names to inherit
    from. Values from earlier presets will be preferred in the case of conflicts,
    and every preset is free to override any inherited field. Additionally, `CMakeUserPresets.json`
    can inherit from project presets but not the other way around.'
  id: totrans-404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Inherits`：这是一个可选的字符串或预设名称数组，用于从其中继承。在冲突的情况下，早期预设的值将被优先考虑，每个预设都可以覆盖任何继承的字段。此外，`CMakeUserPresets.json`可以继承项目预设，但反之则不行。'
- en: '`Vendor`: This is an optional map of vendor-specific values. It follows the
    same convention as a root-level `vendor` field.'
  id: totrans-405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Vendor`：这是一个可选的供应商特定值的映射。它遵循与根级`vendor`字段相同的约定。'
- en: '`Generator`: This is a *required or inherited* string that specifies a generator
    to use for the preset.'
  id: totrans-406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Generator`：这是一个*必需或继承*的字符串，用于指定预设要使用的生成器。'
- en: '`architecture` and `toolset`: These are optional fields for configuring generators
    that support these options (mentioned in the *Generating a project buildsystem*
    section). Each field can simply be a string or a hash with `value` and `strategy`
    fields, where `strategy` is either `set` or `external`. The `strategy` field,
    configured to `set`, will set the value and produce an error if the generator
    doesn''t support this field. Configuring `external` means that the field value
    is set for an external IDE, and CMake should ignore it.'
  id: totrans-407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`architecture`和`toolset`：这些是用于配置支持这些选项的生成器的可选字段（在*生成项目构建系统*部分提到）。每个字段可以是一个简单的字符串，或者一个带有`value`和`strategy`字段的哈希表，其中`strategy`是`set`或`external`。当`strategy`字段配置为`set`时，将设置字段值，如果生成器不支持此字段，则会产生错误。配置为`external`意味着字段值是为外部IDE设置的，CMake应该忽略它。'
- en: '`binaryDir`: This is a *required or inherited* string that provides a path
    to the build tree directory (which is absolute or relative to the source tree).
    It supports macro expansion.'
  id: totrans-408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`binaryDir`：这是一个*必需或继承*的字符串，提供了构建树目录的路径（相对于源树是绝对路径或相对路径）。它支持宏扩展。'
- en: '`cacheVariables`: This is an optional map of cache variables where keys denote
    variable names. Accepted values include `null`, `"TRUE"`, `"FALSE"`, a string
    value, or a hash with an optional `type` field and a required `value` field. `value`
    can be a string value of either `"TRUE"` or `"FALSE"`. Cache variables are inherited
    with a union operation unless the value is specified as `null` – then, it remains
    unset. String values support macro expansion.'
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cacheVariables`：这是一个可选的缓存变量映射，其中键表示变量名。接受的值包括`null`、`"TRUE"`、`"FALSE"`、字符串值，或具有可选`type`字段和必需`value`字段的哈希。`value`可以是`"TRUE"`或`"FALSE"`的字符串值。除非明确指定为`null`，否则缓存变量会通过并集操作继承——在这种情况下，它将保持未设置。字符串值支持宏扩展。'
- en: '`Environment`: This is an optional map of environment variables where keys
    denote variable names. Accepted values include `null` or string values. Environment
    variables are inherited with a union operation unless the value is specified as
    `null` – then, it remains unset. String values support macro expansion, and variables
    might reference each other in any order, as long as there is no cyclic reference.'
  id: totrans-410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Environment`: 这是一个可选的环境变量映射，其中键表示变量名。接受的值包括`null`或字符串值。除非明确指定为`null`，否则环境变量会通过并集操作继承——在这种情况下，它将保持未设置。字符串值支持宏扩展，变量可以以任何顺序相互引用，只要没有循环引用即可。'
- en: 'The following macros are recognized and evaluated:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 以下宏将被识别和评估：
- en: '`${sourceDir}`: This is the path to the source tree.'
  id: totrans-412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`${sourceDir}`：这是源树的位置。'
- en: '`${sourceParentDir}`: This is the path to the source tree''s parent directory.'
  id: totrans-413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`${sourceParentDir}`：这是源树父目录的位置。'
- en: '`${sourceDirName}`: This is the last filename component of `${sourceDir}`.
    For example, for `/home/rafal/project`, it would be `project`.'
  id: totrans-414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`${sourceDirName}`: 这是`${sourceDir}`的最后一个文件名组件。例如，对于`/home/rafal/project`，它就是`project`。'
- en: '`${presetName}`: This is the value of the preset''s name field.'
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`${presetName}`: 这是预设的名称字段的值。'
- en: '`${generator}`: This is the value of the preset''s generator field.'
  id: totrans-416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`${generator}`：这是预设的生成器字段的值。'
- en: '`${dollar}`: This is a literal dollar sign ($).'
  id: totrans-417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`${dollar}`: 这是一个字面意义上的美元符号（$）。'
- en: '`$env{<variable-name>}`: This is an environment variable macro. It will return
    the value of the variable from the preset if defined; otherwise, it will return
    the value from the parent environment. Remember that variable names in presets
    are case-sensitive (unlike in Windows environments).'
  id: totrans-418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$env{<variable-name>}`：这是一个环境变量宏。如果预设中定义了该变量，它将返回预设中的变量值；否则，它将从父环境返回值。请注意，预设中的变量名是区分大小写的（与Windows环境不同）。'
- en: '`$penv{<variable-name>}`: This option is just like `$env` but always returns
    values from the parent environment. This allows you to resolve issues with circular
    references that are not allowed in the environment variables of the preset.'
  id: totrans-419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$penv{<variable-name>}`：这个选项与`$env`类似，但总是从父环境返回值。这允许您解决预设环境变量中不允许的循环引用问题。'
- en: '`$vendor{<macro-name>}`: This enables vendors to insert their own macros.'
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$vendor{<macro-name>}`：这使得供应商能够插入自己的宏。'
- en: Ignoring files in Git
  id: totrans-421
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Git中忽略文件
- en: 'There are many VCSs; one of the most popular types out there is Git. Whenever
    we start a new project, it is good to make sure that we only check in to the repository
    files that need to be there. Project hygiene is easier to maintain if we just
    add generated, user, or temporary files to the `.gitignore` file. In this way,
    Git knows to automatically skip them when building new commits. Here''s the file
    that I use in my projects:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多版本控制系统；其中最流行的一种是Git。每当我们开始一个新项目时，确保我们只将需要存在于仓库中的文件提交到仓库中是很重要的。如果我们只是将生成的、用户或临时文件添加到`.gitignore`文件中，项目卫生更容易维护。这样，Git就知道在构建新提交时自动跳过它们。这是我在我项目中使用的文件：
- en: chapter-01/01-hello/.gitignore
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: chapter-01/01-hello/.gitignore
- en: '[PRE65]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Using the preceding file in your projects will allow for more flexibility for
    you and other contributors and users.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的项目中使用前面的文件将为您和其他贡献者和用户带来更多的灵活性。
- en: The unknown territory of project files has now been charted. With this map,
    you'll soon be able to write your own listfiles, configure the cache, prepare
    presets, and more. Before you sail on the open sea of project writing, let's take
    a look at what other kinds of self-contained units you can create with CMake.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 项目文件的未知领域现在已经绘制成图。有了这张地图，你很快就能编写自己的列表文件，配置缓存，准备预设，等等。在你扬帆远航项目编写之前，让我们来看看您可以使用CMake创建的其他类型的自包含单元。
- en: Discovering scripts and modules
  id: totrans-427
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发现脚本和模块
- en: 'Work with CMake is primarily focused on projects that get built and the production
    of artifacts that get consumed by other systems, such as CI/CD pipelines and test
    platforms, or deployed to machines or artifact repositories. However, there are
    two other concepts of CMake that enable you to create with its language: scripts
    and modules. Let''s take a closer look.'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 与CMake一起工作的主要焦点是构建的项目以及生产供其他系统（如CI/CD管道和测试平台）消费的工件，或者部署到机器或工件仓库。然而，CMake还有两个其他概念可以用其语言创建：脚本和模块。让我们仔细看看。
- en: Scripts
  id: totrans-429
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 脚本
- en: To configure project building, CMake offers a platform-agnostic programming
    language. This comes with many useful commands. You can use this tool to write
    scripts that come with your project or are completely independent.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 为了配置项目构建，CMake提供了一种与平台无关的编程语言。这带有许多有用命令。你可以使用这个工具来编写随项目提供或完全独立的脚本。
- en: 'Think of it as a consistent way to do cross-platform work: instead of using
    bash scripts on Linux and batch or PowerShell scripts on Windows, you can have
    one version. Sure, you could bring in external tools such as Python, Perl, or
    Ruby scripts, but this is yet another dependency and will increase the complexity
    of your C/C++ projects. Yes, sometimes, this will be the only thing that can get
    the job done, but more often than not, we can get away with something far simpler.'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 把它当作一种一致的跨平台工作方式：不用在Linux上使用bash脚本，在Windows上使用批处理或PowerShell脚本，你可以有一个版本。当然，你可以引入外部工具，如Python、Perl或Ruby脚本，但这又是另一个依赖，将增加C/C++项目的复杂性。是的，有时这将是唯一能完成工作的事情，但更多的时候，我们可以用一些更简单的东西应付过去。
- en: 'We have already learned from the *Mastering the command line* section that
    we can execute scripts using the `-P` option: `cmake -P script.cmake`. But what
    are the actual requirements for the script file provided? Not that many: a script
    can be as complex as you like or an empty file. However, it is recommended that
    you call the `cmake_minimum_required()` command at the beginning of the script.
    This command tells CMake which policies should be applied to subsequent commands
    in this project (more details in [*Chapter 3*](B17205_03_Final_JC_ePub.xhtml#_idTextAnchor078),
    *Setting Up Your First CMake Project*).'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经从*掌握命令行*部分了解到，我们可以使用`-P`选项执行脚本：`cmake -P script.cmake`。但是提供的脚本文件的实际要求是什么？并不多：脚本可以像你喜欢的那么复杂，也可以是一个空文件。然而，建议你在脚本的开始处调用`cmake_minimum_required()`命令。这个命令告诉CMake应该对项目中的后续命令应用哪些策略（更多详情请参阅[第3章](B17205_03_Final_JC_ePub.xhtml#_idTextAnchor078)，*设置你的第一个CMake项目*）。
- en: chapter-01/03-script/script.cmake
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: chapter-01/03-script/script.cmake
- en: '[PRE66]'
  id: totrans-434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'When running scripts, CMake won''t execute any of the usual stages (such as
    configuration or generation), and it won''t use the cache. Since there is no concept
    of a source/build tree in scripts, variables that usually hold references to these
    paths will contain the current working directory instead: `CMAKE_BINARY_DIR`,
    `CMAKE_SOURCE_DIR`, `CMAKE_CURRENT_BINARY_DIR`, and `CMAKE_CURRENT_SOURCE_DIR`.'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行脚本时，CMake不会执行任何常规阶段（如配置或生成），也不会使用缓存。由于脚本中没有源/构建树的概念，通常持有这些路径引用的变量将包含当前工作目录：`CMAKE_BINARY_DIR`、`CMAKE_SOURCE_DIR`、`CMAKE_CURRENT_BINARY_DIR`和`CMAKE_CURRENT_SOURCE_DIR`。
- en: Happy scripting!
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 快乐脚本编程！
- en: Utility modules
  id: totrans-437
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实用模块
- en: CMake projects can use external modules to enhance their functionality. Modules
    are written in the CMake language and contain macro definitions, variables, and
    commands that perform all kinds of functions. They range from quite complex scripts
    (`CPack` and `CTest` also provide modules!) to fairly simple ones, such as `AddFileDependencies`
    or `TestBigEndian`.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: CMake项目可以利用外部模块来增强其功能。模块是用CMake语言编写的，包含宏定义、变量和执行各种功能的命令。它们从相当复杂的脚本（`CPack`和`CTest`也提供模块！）到相对简单的脚本，如`AddFileDependencies`或`TestBigEndian`。
- en: The CMake distribution comes packed with almost 90 different utility modules.
    If that's not enough, you can download more from the internet by browsing curated
    lists, such as the one found at [https://github.com/onqtam/awesome-cmake](https://github.com/onqtam/awesome-cmake),
    or write a module from scratch.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: CMake分发版包含了几乎90个不同的实用模块。如果这还不够，你可以在浏览精选列表，如在[https://github.com/onqtam/awesome-cmake](https://github.com/onqtam/awesome-cmake)找到的列表上互联网下载更多，或者从头开始编写一个模块。
- en: 'To use a utility module, we need to call an `include(<MODULE>)` command. Here''s
    a simple project showing this in action:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用一个实用模块，我们需要调用一个`include(<MODULE>)`命令。下面是一个简单项目展示了这个动作：
- en: chapter-01/04-module/CMakeLists.txt
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: chapter-01/04-module/CMakeLists.txt
- en: '[PRE67]'
  id: totrans-442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: We'll learn what modules are available as they become relevant to the subject
    at hand. If you're curious, a full list of bundled modules can be found at [https://cmake.org/cmake/help/latest/manual/cmake-modules.7.html](https://cmake.org/cmake/help/latest/manual/cmake-modules.7.html).
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在它们与主题相关时学习有哪些模块可供使用。如果你好奇，可以找到包含模块的完整列表在[https://cmake.org/cmake/help/latest/manual/cmake-modules.7.html](https://cmake.org/cmake/help/latest/manual/cmake-modules.7.html)。
- en: Find-modules
  id: totrans-444
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查找模块
- en: In the *The Config-files for packages* section, I mentioned that CMake has a
    mechanism that allows it to find files belonging to external dependencies that
    don't support CMake and don't provide a CMake config-file (or haven't). That's
    what find-modules are for. CMake provides over 150 modules that are able to locate
    different packages in the system. As was the case with utility modules, there
    are plenty more find-modules available online and another option is to write your
    own as a last resort.
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 在*包的配置文件*部分，我提到CMake有一个机制，允许它找到属于外部依赖项的文件，这些依赖项不支持CMake并且没有提供CMake配置文件（或者还没有）。查找模块就是为了这个目的。CMake提供了150多个模块，能够定位系统中的不同包。和实用模块一样，网络上还有更多的查找模块可供选择，另一种选择是编写自己的模块，作为最后的手段。
- en: You can use them by calling the `find_package()` command and providing the name
    of the package in question. Such a find-module will then play a little game of
    hide and seek and check all known locations of the software it is looking for.
    Following this, it defines variables (as specified in that module's manual) that
    allow you to build against that dependency.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过调用`find_package()`命令并提供相关包的名称来使用它们。这样的查找模块将然后玩一场捉迷藏游戏，并检查它所寻找的软件的所有已知位置。在此之后，它定义了变量（如该模块手册中所指定的）允许你针对该依赖项进行构建。
- en: 'For example, the `FindCURL` module searches for a popular *Client URL* library
    and defines the following variables: `CURL_FOUND`, `CURL_INCLUDE_DIRS`, `CURL_LIBRARIES`,
    and `CURL_VERSION_STRING`.'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`FindCURL`模块搜索一个流行的*客户端URL*库，并定义了以下变量：`CURL_FOUND`、`CURL_INCLUDE_DIRS`、`CURL_LIBRARIES`和`CURL_VERSION_STRING`。
- en: We will cover find-modules in more depth in [*Chapter 7*](B17205_07_Final_JC_ePub.xhtml#_idTextAnchor162),
    *Managing Dependencies with CMake*.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第7章](B17205_07_Final_JC_ePub.xhtml#_idTextAnchor162)更深入地讨论查找模块，*使用CMake管理依赖项*。
- en: Summary
  id: totrans-449
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'Now you understand what CMake is and how it works; you learned the key components
    of the CMake tool family and how to install them on a variety of systems. Like
    a true power user, you know all the ways in which to run CMake through the command
    line: buildsystem generation, building a project, installing, running scripts,
    command-line tools, and printing help. You are aware of the CTest, CPack, and
    GUI applications. This will help you to create projects, with the right perspective,
    for users and other developers. Additionally, you learned what makes up a project:
    directories, listfiles, configs, presets, and helper files, along with what to
    ignore in your VCS. Finally, you took a sneak peek at other non-project files:
    standalone scripts and modules.'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了CMake是什么以及它是如何工作的；你学习了CMake工具家族的关键组成部分以及如何在各种系统中安装它们。像真正的功率用户一样，你知道通过命令行运行CMake的所有方式：生成构建系统、构建项目、安装、运行脚本、命令行工具和打印帮助。你知道CTest、CPack和GUI应用程序。这将帮助你为用户和其他开发者创建项目，并从正确的角度出发。此外，你还学会了组成一个项目的内容：目录、列表文件、配置文件、预设和帮助文件，以及在VCS中应该忽略哪些内容。最后，你简要地查看了其他非项目文件：独立的脚本和模块。
- en: In the next chapter, we will take a deep dive into CMake's programming language.
    This will allow you to write your own listfiles and open the door to your first
    script, project, and module.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨CMake的编程语言。这将使你能够编写自己的列表文件并打开编写第一个脚本、项目和模块的大门。
- en: Further reading
  id: totrans-452
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'For more information, you can refer to the following resources:'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息，你可以参考以下资源：
- en: 'The official CMake web page and documentation: [https://cmake.org/](https://cmake.org/)'
  id: totrans-454
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 官方CMake网页和文档：[https://cmake.org/](https://cmake.org/)
- en: 'Single-configuration generators: [https://cgold.readthedocs.io/en/latest/glossary/single-config.html](https://cgold.readthedocs.io/en/latest/glossary/single-config.html)'
  id: totrans-455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单配置生成器：[https://cgold.readthedocs.io/en/latest/glossary/single-config.html](https://cgold.readthedocs.io/en/latest/glossary/single-config.html)
- en: 'The separation of stages in the CMake GUI: [https://stackoverflow.com/questions/39401003/why-there-are-two-buttons-in-gui-configure-and-generate-when-cli-does-all-in-one](https://stackoverflow.com/questions/39401003/why-there-are-two-buttons-in-gui-configure-and-generate-when-cli-does-all-in-one)'
  id: totrans-456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CMake GUI 中阶段的分离：[https://stackoverflow.com/questions/39401003/why-there-are-two-buttons-in-gui-configure-and-generate-when-cli-does-all-in-one](https://stackoverflow.com/questions/39401003/why-there-are-two-buttons-in-gui-configure-and-generate-when-cli-does-all-in-one)
