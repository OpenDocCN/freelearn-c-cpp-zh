- en: Chapter 3. C++ Strings, SFML Time, Player Input, and HUD
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。C++字符串，SFML时间，玩家输入和HUD
- en: In this chapter we will spend around half the time learning how to manipulate
    text and display it on the screen, and the other half looking at timing and how
    a visual time bar can create a sense of urgency in the game.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将花大约一半的时间学习如何操作文本并在屏幕上显示它，另一半时间将用于研究时间和视觉时间条如何在游戏中制造紧迫感。
- en: 'We will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: Pausing and restarting the game
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 暂停和重新开始游戏
- en: C++ strings
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C++字符串
- en: SFML Text and SFML font classes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SFML文本和SFML字体类
- en: Adding a HUD to Timber!!!
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Timber!!!添加HUD
- en: Adding a time bar to Timber!!!
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Timber!!!添加时间条
- en: Pausing and restarting the game
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 暂停和重新开始游戏
- en: As we progress with this game over the next three chapters, the code will obviously
    get longer and longer. So, now it seems like a good time to think ahead and add
    a little bit more structure into our code. We will add this structure to give
    us the ability to pause and restart the game.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 随着接下来三章的游戏进展，代码显然会变得越来越长。因此，现在似乎是一个很好的时机，考虑未来并在我们的代码中添加更多结构。我们将添加这种结构以使我们能够暂停和重新开始游戏。
- en: We will add code so that when the game is first run, it will be paused. The
    player will be able to press the ***Enter*** key to get the game started. Then
    the game will run until either the player gets squished or runs out of time. At
    this point the game will pause and wait for the player to press ***Enter*** key,
    to restart again.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加代码，以便在游戏首次运行时暂停。玩家将能够按下***Enter***键来启动游戏。然后游戏将运行，直到玩家被压扁或时间用尽。此时游戏将暂停并等待玩家按下***Enter***键，以重新开始。
- en: 'Let''s step through setting this up a bit at a time. First, declare a new `bool`
    variable called `paused`, outside the main game loop, and initialize it to `true`:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们一步一步地设置这个。首先，在主游戏循环之外声明一个新的名为`paused`的`bool`变量，并将其初始化为`true`：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now, whenever the game is run we have a variable, `paused`, that will be `true`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每当游戏运行时，我们都有一个名为`paused`的变量，它将是`true`。
- en: 'Next, we will add another `if` statement where the expression will check to
    see whether the ***Enter*** key is currently being pressed. If it is being pressed
    it sets `paused` to `false`. Add the highlighted code just after our other keyboard-handling
    code:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将添加另一个`if`语句，其中表达式将检查***Enter***键当前是否被按下。如果被按下，它将将`paused`设置为`false`。在我们其他处理键盘的代码之后添加突出显示的代码：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now we have a `bool` called `paused`, which starts off `true` but changes to
    `false` when the player presses the ***Enter*** key. At this point, we have to
    make our game loop respond appropriately, based on whatever the current value
    of `paused` might be.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个名为`paused`的`bool`，它起初是`true`，但当玩家按下***Enter***键时会变为`false`。此时，我们必须使我们的游戏循环根据`paused`的当前值做出适当的响应。
- en: This is how we will proceed. We will wrap the entire, update part of the code,
    including the code we wrote in the last chapter to move the bee and clouds, in
    an `if` statement.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们将要进行的步骤。我们将使用`if`语句包装整个更新部分的代码，包括我们在上一章中编写的用于移动蜜蜂和云的代码。
- en: Notice that, in the next code, the `if` block will only execute when `paused`
    is not equal to `true`. Or to put it another way, the game won't move/update when
    it is paused.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在下一段代码中，只有当`paused`不等于`true`时，`if`块才会执行。换句话说，游戏在暂停时不会移动/更新。
- en: This is exactly what we want. Look carefully at the exact place to add the new
    `if` statement and its corresponding opening and closing curly braces `{...}`.
    If they are put in the wrong place, things will not work as expected.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是我们想要的。仔细看看添加新的`if`语句以及相应的左花括号和右花括号`{...}`的确切位置。如果它们放错地方，事情将不会按预期工作。
- en: 'Add the highlighted code to wrap the update part of the code, paying close
    attention to the context shown next. I have added `...` on a few lines to represent
    hidden code. Obviously the `...` is not real code and should not be added to the
    game. You can identify where to place the new code (highlighted), at the start
    and the end, by the un-highlighted code surrounding it:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 添加突出显示的代码以包装代码的更新部分，密切关注下面显示的上下文。我在一些行上添加了`...`来表示隐藏的代码。显然，`...`不是真正的代码，不应该添加到游戏中。您可以通过周围未突出显示的代码来确定要放置新代码（突出显示）的位置，即开头和结尾：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Notice that, when you place the closing curly brace of the new `if` block, Visual
    Studio neatly adjusts all the indenting, to keep the code tidy.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当您放置新的`if`块的右花括号时，Visual Studio会自动调整所有缩进，以保持代码整洁。
- en: Now you can run the game and everything will be static until you press the ***Enter***
    key. It is now possible to go about adding features to our game and we just need
    to remember when the player dies or runs out of time, we need to set `paused`
    to `true`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以运行游戏，直到按下***Enter***键之前一切都是静态的。现在可以开始为我们的游戏添加功能，只需记住当玩家死亡或时间用尽时，我们需要将`paused`设置为`true`。
- en: In the previous chapter we had a first glimpse of C++ strings. We need to learn
    a bit more about them so we can implement the player's HUD.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们初步了解了C++字符串。我们需要更多地了解它们，以便实现玩家的HUD。
- en: C++ strings
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C++字符串
- en: In the previous chapter we briefly mentioned strings and we learned that a string
    can hold alphanumeric data in anything from a single character to a whole book.
    We didn't look at declaring, initializing, or manipulating strings. So let's do
    that now.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们简要提到了字符串，并且了解到字符串可以包含从单个字符到整本书的字母数字数据。我们没有研究声明、初始化或操作字符串。所以现在让我们来做。
- en: Declaring strings
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 声明字符串
- en: 'Declaring a string variable is simple. We state the type, followed by the name:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 声明字符串变量很简单。我们声明类型，然后是名称：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Once we have declared a string we can assign a value to it.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们声明了一个字符串，我们就可以为它赋值。
- en: Assigning a value to strings
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为字符串赋值
- en: 'To assign a value to a string, as with regular variables, we simply put the
    name, followed by the assignment operator, then the value:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 与常规变量一样，要为字符串赋值，我们只需放置名称，然后是赋值运算符，然后是值：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Note that the values need to be enclosed in quotation marks. As with regular
    variables we can also declare and assign values in a single line:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，值需要用引号括起来。与常规变量一样，我们也可以在一行中声明和赋值：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This is how we can change our string variables.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们如何改变我们的字符串变量。
- en: Manipulating strings
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作字符串
- en: 'We can use the `#include <sstream>` directive to give us some extra power with
    our strings. The `sstream` class enables us to add some strings together. When
    we do so it is called **concatenation**:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`#include <sstream>`指令为我们的字符串提供一些额外的功能。`sstream`类使我们能够将一些字符串连接在一起。当我们这样做时，它被称为**连接**：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In addition to using `sstream` objects, a string variable can even be concatenated
    with a variable of a different type. This next code starts to reveal how strings
    might be quite useful to us:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用`sstream`对象外，字符串变量甚至可以与不同类型的变量连接在一起。下面的代码开始揭示了字符串对我们可能非常有用：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Tip
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'The `<<` operator is a bitwise operator. C++ however, allows you to write your
    own classes and override what a specific operator does, within the context of
    your class. The `sstream` class has done this to make the `<<` operator work the
    way it does. The complexity is hidden in the class. We can use its functionality
    without worrying about how it works. If you are feeling adventurous you can read
    about operator overloading at: [http://www.tutorialspoint.com/cplusplus/cpp_overloading.htm](http://www.tutorialspoint.com/cplusplus/cpp_overloading.htm).
    You don''t need any more information in order to continue with the project.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`<<`运算符是一个位运算符。然而，C++允许您编写自己的类，并在类的上下文中重写特定运算符的功能。`sstream`类已经这样做了，使`<<`运算符按照它的方式工作。复杂性被隐藏在类中。我们可以使用它的功能而不必担心它是如何工作的。如果你感到有冒险精神，你可以阅读关于运算符重载的内容：[http://www.tutorialspoint.com/cplusplus/cpp_overloading.htm](http://www.tutorialspoint.com/cplusplus/cpp_overloading.htm)。为了继续项目，你不需要更多的信息。'
- en: Now we know the basics of C++ strings, and how we can use `sstream`, we can
    see how to use some SFML classes to display them on the screen.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了C++字符串的基础知识，以及我们如何使用`sstream`，我们可以看到如何使用一些SFML类来在屏幕上显示它们。
- en: SFML Text and Font
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SFML Text和Font
- en: Let's briefly discuss the `Text` and `Font` classes with some hypothetical code,
    before we actually go ahead and add code to our game.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们实际添加代码到我们的游戏之前，让我们简要讨论一下`Text`和`Font`类以及一些假设的代码。
- en: The first step to drawing text on the screen is to have a font. In the first
    chapter we added a font file to the project folder. Now we can load the font,
    ready for use, into an SFML `Font` object.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在屏幕上绘制文本的第一步是拥有一个字体。在第一章中，我们将一个字体文件添加到了项目文件夹中。现在我们可以将字体加载到SFML `Font`对象中，准备使用。
- en: 'The code to do so looks like this:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要这样做的代码看起来像这样：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the previous code we first declare the `Font` object and then load an actual
    font file. Note that `myfont.ttf` is a hypothetical font and we could use any
    font that is in the project folder.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们首先声明了`Font`对象，然后加载了一个实际的字体文件。请注意，`myfont.ttf`是一个假设的字体，我们可以使用项目文件夹中的任何字体。
- en: 'Once we have loaded a font we need an SFML `Text` object:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们加载了一个字体，我们就需要一个SFML `Text`对象：
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now we can configure our `Text` object. This includes the size, the color,
    the position on screen, the string that holds the message, and, of course, associating
    it with our `font` object:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以配置我们的`Text`对象。这包括大小、颜色、屏幕上的位置、包含消息的字符串，当然，将其与我们的`font`对象关联起来：
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Let's add a HUD to Timber!!!
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们给Timber添加一个HUD！！！
- en: Adding a score and a message
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加分数和消息
- en: Now we know enough about strings, SFML `Text`, and SFML `Font` to go about implementing
    the HUD.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了足够关于字符串、SFML `Text`和SFML `Font`，可以开始实现HUD了。
- en: The next thing we need to do is to add another `#include` directive to the top
    of the code file. As we have learned, the `sstream` class adds some really useful
    functionality for combining strings, and other variable types, together into a
    string.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的下一件事是在代码文件的顶部添加另一个`#include`指令。正如我们所学到的，`sstream`类为将字符串和其他变量类型组合成一个字符串提供了一些非常有用的功能。
- en: 'Add the following line of highlighted code:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 添加下面高亮代码的一行：
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Next we will set up our SFML `Text` objects. One will hold a message that we
    will vary to suit the state of the game, and the other will hold the score and
    needs to be regularly updated.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们将设置我们的SFML `Text`对象。一个将包含一条消息，我们将根据游戏状态进行变化，另一个将包含分数，并且需要定期更新。
- en: The next code that declares the `Text` and `Font` objects loads the font, assigns
    the font to the `Text` objects, and then adds the string messages, color, and
    size. This should look familiar from our discussion in the previous section. In
    addition, we add a new `int` variable called `score` which we can manipulate to
    hold the player's score.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 声明`Text`和`Font`对象的下一个代码加载字体，将字体分配给`Text`对象，然后添加字符串消息、颜色和大小。这应该从我们在上一节讨论中看起来很熟悉。此外，我们添加了一个名为`score`的新`int`变量，我们可以操纵它来保存玩家的分数。
- en: Tip
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'Remember that if you chose a different font from `KOMIKAP_.ttf`, back in [Chapter
    1](ch01.html "Chapter 1. C++, SFML, Visual Studio, and Starting the First Game"):
    C*++, SFML, Visual Studio, and Starting the First Game*, you will need to change
    that part of the code to match the `.ttf` file that you have in the `Visual Studio
    Stuff/Projects/Timber/Timber/fonts` folder.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，如果你在[第1章](ch01.html "第1章。C++，SFML，Visual Studio和开始第一个游戏")中选择了不同的字体，你需要更改代码的部分以匹配你在`Visual
    Studio Stuff/Projects/Timber/Timber/fonts`文件夹中拥有的`.ttf`文件。
- en: 'Add the highlighted code and we will be ready to move on to updating the HUD:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 添加高亮代码，我们就可以准备好继续更新HUD了：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The next code might look a little convoluted, even complex. It is, however,
    really straightforward when you break it down a bit. Examine and add the new code,
    then we will go through it:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码可能看起来有点复杂，甚至复杂。然而，当你稍微分解一下时，它实际上非常简单。检查并添加新代码，然后我们将一起讨论：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We have two objects of the type `Text` that we will display on the screen. We
    want to position `scoreText` on the top left with a little bit of padding. This
    is not a challenge; we simply use `scoreText.setPosition(20, 20)` and that positions
    it in the top left with 20 pixels of horizontal and vertical padding.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有两个`Text`类型的对象将显示在屏幕上。我们希望将`scoreText`定位在左上角并留有一点填充。这并不困难；我们只需使用`scoreText.setPosition(20,
    20)`，它就会在左上角定位，并留有20像素的水平和垂直填充。
- en: Positioning `messageText`, however, was not so easy. We want to position it
    in the exact center of the screen. Initially this might not seem like a problem,
    but then we remember that the origin of everything we draw is the top left-hand
    corner. So, if we simply divide the screen width and height by two and use the
    results in `mesageText.setPosition...`, then the top left of the text will be
    in the center of the screen and it will spread out untidily to the right.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，定位`messageText`并不那么容易。我们希望将其定位在屏幕的正中间。最初这可能看起来不是问题，但我们记得我们绘制的一切的原点都是左上角。因此，如果我们简单地将屏幕的宽度和高度除以二，并在`mesageText.setPosition...`中使用结果，那么文本的左上角将位于屏幕的中心，并且会不整齐地向右边展开。
- en: 'What we need is a way to be able to set the center of `messageText` to the
    center of the screen. The rather nasty looking bit of code that you just added
    repositions the origin of `messageText` to the center of itself. Here is the code
    under current discussion again for convenience:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一种方法来将`messageText`的中心设置为屏幕的中心。您刚刚添加的看起来相当恶劣的代码重新定位了`messageText`的原点到其自身的中心。为了方便起见，这里是当前讨论的代码：
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: First, in this code, we declare a new object of type `FloatRect`, called `textRect`.
    A `FloatRect` object, as the name suggests, holds a rectangle with floating point
    coordinates.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在这段代码中，我们声明了一个名为`textRect`的新的`FloatRect`类型的对象。正如其名称所示，`FloatRect`对象保存了一个带有浮点坐标的矩形。
- en: The code then uses the `messageText.getLocalBounds` function to initialize `textRect`
    with the coordinates of the rectangle that wraps `messageText`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，代码使用`messageText.getLocalBounds`函数来使用`messageText`包装的矩形的坐标来初始化`textRect`。
- en: 'The next line of code, spread over four lines as it is quite long, uses the
    `messageText.setOrigin` function to change the origin (the point at which we draw)
    to the center of `textRect`. Of course, `textRect` holds a rectangle, which exactly
    matches the coordinates that wrap `messageText`. Then, this next line of code
    executes:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的代码行，由于它相当长，分成了四行，使用`messageText.setOrigin`函数将原点（我们绘制的点）更改为`textRect`的中心。当然，`textRect`保存了一个矩形，它完全匹配包装`messageText`的坐标。然后，执行下一行代码：
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now, `messageText` will be neatly positioned in the exact center of the screen.
    We will use this exact same code each time we change the text of `messageText`,
    because changing the message changes the size of `messageText`, so its origin
    will need recalculating.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`messageText`将被整齐地定位在屏幕的正中间。每次更改`messageText`的文本时，我们将使用完全相同的代码，因为更改消息会改变`messageText`的大小，因此其原点需要重新计算。
- en: 'Next we declare an object of type `stringstream` called `ss`. Note that we
    use the full name including the namespace `std::stringstream`. We could avoid
    this syntax by adding `using namespace std` to the top of our code file. We don''t,
    however, because we use it infrequently. Take a look at the code and add it to
    the game, then we can go through it in more detail. As we only want this code
    to execute when the game is not paused, be sure to add it with the other code,
    inside the `if(!paused)` block, as shown:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们声明了一个名为`ss`的`stringstream`类型的对象。请注意，我们使用了完整的名称，包括命名空间`std::stringstream`。我们可以通过在代码文件顶部添加`using
    namespace std`来避免这种语法。然而，我们没有这样做，因为我们很少使用它。看一下代码，将其添加到游戏中，然后我们可以更详细地讨论一下。由于我们只希望在游戏暂停时执行此代码，请确保将其与其他代码一起添加到`if(!paused)`块中，如下所示：
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We use `ss` and the special functionality provided by the `<<` operator, which
    concatenates variables into a `stringstream`. So the code, `ss << "Score = " <<
    score`, has the effect of creating a string with `"Score = "` and whatever the
    value of `score` is, it is concatenated together. For example, when the game first
    starts, `score` is equal to zero, so `ss` will hold the value `"Score = 0"`. If
    `score` ever changes, `ss` will adapt each frame.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`ss`和`<<`运算符提供的特殊功能，它将变量连接到`stringstream`中。因此，代码`ss << "Score = " << score`的效果是创建一个包含`"Score
    = "`和`score`值的字符串，它们被连接在一起。例如，当游戏刚开始时，`score`等于零，所以`ss`将保存值`"Score = 0"`。如果`score`发生变化，`ss`将在每一帧适应。
- en: The next line of code simply displays/sets the string contained in `ss` to `scoreText`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的代码简单地显示/设置了`ss`中包含的字符串到`scoreText`。
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: It is now ready to be drawn onto the screen.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以绘制到屏幕上了。
- en: This next code draws both `Text` objects (`scoreText` and `messageText`), but
    notice that the code that draws `messageText` is wrapped in an `if` statement.
    This `if` statement causes `messageText` only to be drawn when the game is paused.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的代码绘制了两个`Text`对象（`scoreText`和`messageText`），但请注意，绘制`messageText`的代码包含在一个`if`语句中。这个`if`语句导致只有在游戏暂停时才绘制`messageText`。
- en: 'Add the highlighted code shown next:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 添加下面显示的突出代码：
- en: '[PRE18]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We can now run the game and see our HUD drawn on the screen. You will see the
    **SCORE = 0** and PRESS ENTER TO START! messages. The latter will disappear when
    you press ***Enter*** .
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以运行游戏，看到我们的HUD绘制在屏幕上。您将看到**SCORE = 0**和PRESS ENTER TO START!消息。当您按下***Enter***时，后者将消失。
- en: '![Adding a score and a message](img/image_03_001.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![添加得分和消息](img/image_03_001.jpg)'
- en: If you want to see the score updating, add a temporary line of code, `score
    ++;` anywhere in the `while(window.isOpen)` loop. If you add this temporary line
    you will see the score go up fast, very fast!
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要看到分数更新，请在`while(window.isOpen)`循环中的任何位置添加临时代码`score ++;`。如果您添加了这行临时代码，您将看到分数迅速上升，非常快！
- en: '![Adding a score and a message](img/image_03_002.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![添加得分和消息](img/image_03_002.jpg)'
- en: If you added the temporary code `score ++;`, be sure to delete it before continuing.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您添加了临时代码`score ++;`，请务必在继续之前将其删除。
- en: Adding a time bar
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加时间条
- en: As time is a crucial mechanic in the game, it is necessary to keep the player
    aware of it. He needs to know if his allotted six seconds are about to run out.
    It will give him a sense of urgency as the end of the game draws near, and a sense
    of accomplishment if he performs well enough to maintain or increase his remaining
    time.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 由于时间是游戏中的一个关键机制，必须让玩家意识到它。他需要知道自己被分配的六秒即将用完。这将在游戏接近结束时给他一种紧迫感，并且如果他表现得足够好以保持或增加剩余时间，他会有一种成就感。
- en: Drawing the number of seconds remaining on the screen is not easy to read (when
    concentrating on the branches) or a particularly interesting way to achieve the
    objective.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在屏幕上绘制剩余秒数并不容易阅读（当专注于分支时），也不是实现目标的特别有趣的方式。
- en: What we need is a time bar. Our time bar will be a simple red rectangle, prominently
    displayed on the screen. It will start off nice and wide, but rapidly shrink as
    time runs out. When the player's remaining time reaches zero, the time bar will
    be gone completely.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要的是一个时间条。我们的时间条将是一个简单的红色矩形，在屏幕上显眼地展示。它将从宽度开始，但随着时间的流逝迅速缩小。当玩家剩余时间达到零时，时间条将完全消失。
- en: At the same time as adding the time bar, we will add the necessary code to keep
    track of the player's remaining time, as well as to respond when he runs out.
    Let's go through it a step at a time.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 同时添加时间条的同时，我们将添加必要的代码来跟踪玩家剩余的时间，并在他用完时间时做出响应。让我们一步一步地进行。
- en: 'Find the `Clock clock;` declaration from earlier and add the highlighted code:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的`Clock clock;`声明中添加突出显示的代码：
- en: '[PRE19]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: First we declare an object of the type `RectangleShape` and call it `timeBar`.
    `RectangleShape` is an SFML class that is perfect for drawing simple rectangles.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们声明了一个`RectangleShape`类型的对象，并将其命名为`timeBar`。`RectangleShape`是一个适合绘制简单矩形的SFML类。
- en: Next we add a few `float` variables, `timeBarStartWidth` and `timeBarHeight`.
    We initialize them to `400` and `80` respectively. These variables will help us
    keep track of the size we need to draw the `timeBar` each frame.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们添加了一些`float`变量，`timeBarStartWidth`和`timeBarHeight`。我们分别将它们初始化为`400`和`80`。这些变量将帮助我们跟踪每一帧需要绘制`timeBar`的大小。
- en: Next we set the size of the `timeBar` using the `timeBar.setSize` function.
    We don't just pass in our two new `float` variables. First we create a new object
    of type `Vector2f`. What is different here, however, is that we don't give the
    new object a name. We simply initialize it with our two float variables and it
    is passed straight in to the `setSize` function.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用`timeBar.setSize`函数设置`timeBar`的大小。我们不只是传入我们的两个新的`float`变量。首先，我们创建一个`Vector2f`类型的新对象。然而，这里的不同之处在于，我们没有给新对象命名。我们只是用我们的两个浮点变量初始化它，并直接传递给`setSize`函数。
- en: Tip
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '`Vector2f` is a class which holds two `float` variables. It also has some other
    functionality that will be introduced throughout the book.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`Vector2f`是一个持有两个`float`变量的类。它还有一些其他功能，将在整本书中介绍。'
- en: After that we color the `timeBar` red by using the `setFillColor` function.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们使用`setFillColor`函数将`timeBar`颜色设置为红色。
- en: 'The last thing we do to the `timeBar,` in the previous code, is to set its
    position. The y coordinate is completely straightforward, but the way we set the
    x coordinate is slightly convoluted. Here is the calculation again:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前面的代码中对`timeBar`做的最后一件事是设置它的位置。y坐标非常直接，但我们设置x坐标的方式略微复杂。这里是计算：
- en: '[PRE20]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The code first divides `1920` by `2`. Then it divides `timeBarStartWidth` by
    `2`. Finally it subtracts the latter from the former.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 代码首先将`1920`除以`2`。然后将`timeBarStartWidth`除以`2`。最后从前者中减去后者。
- en: The result makes the `timeBar` sit nice and horizontally centered on the screen.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 结果使`timeBar`在屏幕上漂亮地水平居中。
- en: The final three lines of code that we are talking about declare a new `Time`
    object called `gameTimeTotal`, a new `float` called `timeRemaining` that is initialized
    to `6`, and a curious-sounding `float` named `timeBarWidthPerSecond` which we
    will discuss further.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要讨论的代码的最后三行声明了一个名为`gameTimeTotal`的新`Time`对象，一个名为`timeRemaining`的新`float`，它初始化为`6`，以及一个听起来奇怪的名为`timeBarWidthPerSecond`的`float`，我们将进一步讨论。
- en: The `timeBarWidthPerSecond` variable is initialized with `timeBarStartWidth`
    divided by `timeRemaining`. The result is exactly the amount of pixels that the
    `timeBar` needs to shrink by, each second of the game. This will be useful when
    we resize the `timeBar` in each frame.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`timeBarWidthPerSecond`变量是用`timeBarStartWidth`除以`timeRemaining`初始化的。结果恰好是`timeBar`每秒需要缩小的像素数量。这在我们每一帧调整`timeBar`的大小时会很有用。'
- en: 'Obviously we need to reset the time remaining each time the player starts a
    new game. The logical place to do this is the ***Enter*** key press. We can also
    set the `score` back to zero at the same time. Let''s do that now by adding this
    highlighted code:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，我们需要在玩家开始新游戏时重置剩余时间。这样做的逻辑位置是***Enter***键按下。我们也可以同时将`score`重置为零。现在让我们通过添加这些突出显示的代码来做到这一点：
- en: '[PRE21]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, each frame we must reduce the amount of time remaining and resize the
    `timeBar` accordingly. Add the following highlighted code in the update section
    as shown here:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每一帧我们都必须减少剩余时间的数量，并相应地调整`timeBar`的大小。在更新部分添加以下突出显示的代码，如下所示：
- en: '[PRE22]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'First we subtracted the amount of time the player has left by however long
    the previous frame took to execute with this code:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们用这段代码减去了玩家剩余的时间与上一帧执行所花费的时间：
- en: '[PRE23]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Then we adjusted the size of the `timeBar` with the following code:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们用以下代码调整了`timeBar`的大小：
- en: '[PRE24]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The x value of the `Vector2F` is initialized with `timebarWidthPerSecond` multiplied
    by `timeRemaining`. This produces exactly the correct width, relative to how long
    the player has left. The height remains the same and `timeBarHeight` is used without
    any manipulation.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`Vector2F`的x值是用`timebarWidthPerSecond`乘以`timeRemaining`初始化的。这产生了与玩家剩余时间相关的正确宽度。高度保持不变，`timeBarHeight`在没有任何操作的情况下使用。'
- en: 'And, of course, we must detect when time has run out. For now, we will simply
    detect that time has run out, pause the game, and change the text of the `messageText`.
    Later we will do more work here. Add the highlighted code right after the previous
    code we added, and we will look at it in more detail:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们必须检测时间是否已经用完。现在，我们将简单地检测时间是否已经用完，暂停游戏，并更改`messageText`的文本。稍后我们会在这里做更多的工作。在我们添加的先前代码之后添加突出显示的代码，我们将更详细地查看它：
- en: '[PRE25]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Stepping through the previous code:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 逐步执行先前的代码：
- en: First we test whether time has run out with `if(timeRemaining <= 0.0f)`
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，我们用`if(timeRemaining <= 0.0f)`测试时间是否已经用完
- en: Then we set `paused` to `true` so this will be the last time the update part
    of our code is executed (until the player presses ***Enter*** again).
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后我们将`paused`设置为`true`，这样我们的代码的更新部分将被执行的最后一次（直到玩家再次按***Enter***）。
- en: Then we change the message of `messageText`, calculate its new center to set
    it as its origin, and position it in the center of the screen.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后我们更改`messageText`的消息，计算其新的中心以设置为其原点，并将其定位在屏幕中心。
- en: 'Finally, for this part of the code, we need to draw the `timeBar`. There is
    nothing new in this code that we haven''t seen many times before. Just note that
    we draw the `timeBar` after the tree, so it is visible. Add the highlighted code
    to draw the time bar:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在代码的这一部分，我们需要绘制`timeBar`。在这段代码中，没有任何新的东西，我们以前见过很多次。只需注意我们在树之后绘制`timeBar`，这样它就可见。添加突出显示的代码来绘制时间条：
- en: '[PRE26]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Now you can run the game. Press ***Enter*** to start, and watch the time bar
    smoothly disappear down to nothing.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以运行游戏。按***Enter***开始，并观察时间条平稳地消失到无。
- en: '![Adding a time bar](img/image_03_003.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![添加时间条](img/image_03_003.jpg)'
- en: The game then pauses and the **OUT OF TIME!!** message will appear.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏暂停，**时间用完了！！**消息将出现。
- en: '![Adding a time bar](img/image_03_004.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![添加时间条](img/image_03_004.jpg)'
- en: You can, of course, press ***Enter*** again to start the whole thing running
    from the start.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您可以再次按***Enter***从头开始运行整个游戏。
- en: FAQ
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见问题解答
- en: Q) I can foresee that positioning sprites by their top left corner could sometimes
    be inconvenient.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: Q) 我可以预见，通过精灵的左上角定位有时可能会不方便。
- en: A) Fortunately, you can choose what point of a sprite is used as the positioning/origin
    pixel, just as we did with `messageText`, using the `setOrigin` function.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: A) 幸运的是，您可以选择使用精灵的哪个点作为定位/原点像素，就像我们使用`setOrigin`函数设置`messageText`一样。
- en: Q) The code is getting rather long and I am struggling to keep track of where
    everything is.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Q) 代码变得相当长，我很难跟踪一切的位置。
- en: A) Yes, I agree. In the next chapter we will look at the first of a few ways
    we can organize our code and make it more readable. We will see this when we learn
    about writing C++ functions. In addition, we will learn a new way for handling
    multiple objects/variables of the same type (such as the clouds), when we learn
    about C++ arrays.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: A) 是的，我同意。在下一章中，我们将看到我们可以组织我们的代码的第一种方式，使其更易读。当我们学习编写C++函数时，我们将看到这一点。此外，当我们学习关于C++数组时，我们将学习一种处理相同类型的多个对象/变量（如云）的新方法。
- en: Summary
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter we learnt about strings, SFML `Text`, and SFML `Font`. Between
    them they enabled us to draw text to the screen, which provided the player with
    a HUD. We also used `sstream,` which allows us to concatenate strings and other
    variables to display the score.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了关于字符串、SFML `Text`和SFML `Font`。它们使我们能够在屏幕上绘制文本，为玩家提供了HUD。我们还使用了`sstream`，它允许我们连接字符串和其他变量来显示分数。
- en: We explored the SFML `RectangleShape` class, which does exactly what its name
    suggests. We used an object of the type `RectangleShape,` and some carefully planned
    variables, to draw a time bar that visually displays how much time a player has
    left. Once we have implemented chopping, and moving branches that can squash the
    player, the time bar will create tension and urgency.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们探索了SFML `RectangleShape`类，它正是其名称所暗示的。我们使用了`RectangleShape`类型的对象和一些精心计划的变量来绘制一个时间条，直观地显示玩家剩余的时间。一旦我们实现了砍树和移动的树枝可以压扁玩家，时间条将产生紧张感和紧迫感。
- en: Next we are going to learn about a whole range of new C++ features, including
    loops, arrays, switching, enumerations, and functions. This will enable us to
    move the tree branches, keep track of their locations, and squash the player.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将学习一系列新的C++特性，包括循环、数组、切换、枚举和函数。这将使我们能够移动树枝，跟踪它们的位置，并压扁玩家。
