- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: This book is about learning C++ programming the fun way. Starting from zero
    experience, you will learn the basics of C++, such as variables and loops, through
    to advanced topics, such as inheritance and polymorphism. Everything you learn
    will be put into practice building three fully-playable games.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书是关于以有趣的方式学习C ++编程。从零开始，您将学习C ++的基础知识，如变量和循环，直到高级主题，如继承和多态。您学到的一切都将被应用到构建三个完全可玩的游戏中。
- en: These are our three projects for the book.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们这本书的三个项目。
- en: Timber!!!
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Timber!!!
- en: The first game is an addictive, fast-paced clone of the hugely successful Timberman, [http://store.steampowered.com/app/398710/](http://store.steampowered.com/app/398710/).
    Our game, Timber!!!, will allow us to be introduced to all the C++ basics at the
    same time as building a genuinely playable game.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个游戏是一个令人上瘾的，快节奏的模仿非常成功的伐木工的游戏，[http://store.steampowered.com/app/398710/](http://store.steampowered.com/app/398710/)。我们的游戏Timber!!!将让我们同时学习所有C
    ++的基础知识，同时构建一个真正可玩的游戏。
- en: Zombie Arena
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 僵尸竞技场
- en: Next we will build a frantic, zombie survival-shooter, not unlike the Steam
    hit, Over 9,000 Zombies, [http://store.steampowered.com/app/273500/](http://store.steampowered.com/app/273500/).
    The player will have a machine gun, and must fight off ever growing waves of zombies.
    All this will take place in a randomly generated, scrolling world. To achieve
    this, we will learn about object-oriented programming and how it enables us to
    have a large code base (lots of code) that is easy to write and maintain. Expect
    exciting features such as hundreds of enemies, rapid-fire weaponry, pick-ups and
    a character that can be "leveled-up" after each wave.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将构建一个疯狂的僵尸生存射击游戏，类似于Steam的热门游戏Over 9,000 Zombies，[http://store.steampowered.com/app/273500/](http://store.steampowered.com/app/273500/)。玩家将拥有一把机关枪，并必须抵御不断增长的僵尸浪潮。所有这些将发生在一个随机生成的滚动世界中。为了实现这一点，我们将学习面向对象编程以及它如何使我们能够拥有一个大量的易于编写和维护的代码库。期待令人兴奋的功能，如数百个敌人，快速射击武器，拾取物品以及每一波后都可以“升级”的角色。
- en: Thomas was Late
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Thomas was Late
- en: The third game will be a stylish and challenging, single player and co-op puzzle
    platformer. It is based on the very popular game, Thomas was Alone, [http://store.steampowered.com/app/220780/](http://store.steampowered.com/app/220780/).
    Expect to learn cool topics such as particle effects, OpenGL Shaders, and split-screen
    cooperative multiplayer.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个游戏将是一个时尚而具有挑战性的单人和合作解谜平台游戏。它基于非常受欢迎的游戏Thomas was Alone，[http://store.steampowered.com/app/220780/](http://store.steampowered.com/app/220780/)。期待学习一些酷炫的主题，如粒子效果，OpenGL着色器和分屏合作多人游戏。
- en: What this book covers
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书涵盖的内容
- en: '[Chapter 1](ch01.html "Chapter 1. C++, SFML, Visual Studio, and Starting the
    First Game"), *C++, SFML, Visual Studio, and Starting the First Game*, this is
    quite a hefty first chapter, but we will learn absolutely everything we need in
    order to have the first part of our first game up and running. Here is what we
    will do:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[第1章](ch01.html "第1章。C ++，SFML，Visual Studio和开始第一个游戏")，“C ++，SFML，Visual Studio和开始第一个游戏”，这是一个相当庞大的第一章，但我们将学到我们需要的一切，以便让我们的第一个游戏的第一部分运行起来。以下是我们将要做的事情：'
- en: Find out more about the games we will build
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解我们将要构建的游戏更多信息
- en: Learn a bit about C++
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习一些关于C ++的知识
- en: Explore SFML and its relationship with C++
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索SFML及其与C ++的关系
- en: Look at the software, Visual Studio, that we will use throughout the book
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看我们将在整本书中使用的软件Visual Studio
- en: Set up a game development environment
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置游戏开发环境
- en: Create a reusable project template, which will save a lot of time
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个可重复使用的项目模板，这将节省大量时间
- en: Plan and prepare for the first game project, Timber!!!
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计划并准备第一个游戏项目，伐木者！！！
- en: Write the first C++ code of the book and make a runnable game that draws a background
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写本书的第一个C ++代码，并制作一个可运行的游戏，绘制一个背景
- en: '[Chapter 2](ch02.html "Chapter 2. Variables, Operators, and Decisions – Animating
    Sprites"), *Variables, Operators, and Decisions – Animating Sprites*, in this
    chapter, we will do quite a bit more drawing on the screen, and to achieve this
    we will need to learn some of the basics of C++. Here is what is in store:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[第2章](ch02.html "第2章。变量，运算符和决策-动画精灵")，“变量，运算符和决策-动画精灵”，在本章中，我们将在屏幕上进行更多的绘制，并且为了实现这一点，我们需要学习一些C
    ++的基础知识。以下是我们将要做的事情：'
- en: Learn all about C++ variables
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习所有关于C ++变量的知识
- en: See how to manipulate the values stored in variables
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解如何操作存储在变量中的值
- en: Add a static tree, ready for the player to chop
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个静态树，准备让玩家砍伐
- en: Draw and animate a bee and three clouds
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘制和动画一个蜜蜂和三朵云
- en: '[Chapter 3](ch03.html "Chapter 3. C++ Strings, SFML Time, Player Input, and
    HUD"), *C++ Strings, SFML Time – Player Input, and HUD*, in this chapter, we will
    spend around half the time learning how to manipulate text and display it on the
    screen, and the other half looking at timing and how a visual time-bar can inform
    the player and create a sense of urgency in the game. We will cover:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[第3章](ch03.html "第3章。C++字符串，SFML时间，玩家输入和HUD")，“C++字符串，SFML时间-玩家输入和HUD”，在本章中，我们将花大约一半的时间学习如何操作文本并在屏幕上显示它，另一半时间看计时和视觉时间条如何通知玩家并在游戏中制造紧迫感。我们将涵盖：'
- en: Pausing and restarting the game
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 暂停和重新开始游戏
- en: C++ strings
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C ++字符串
- en: SFML text and SFML font classes
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SFML文本和SFML字体类
- en: Adding a HUD to Timber!!!
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Timber!!!添加HUD
- en: Adding a time-bar to Timber!!!
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Timber!!!添加一个时间条
- en: '[Chapter 4](ch04.html "Chapter 4.  Loops, Arrays, Switch, Enumerations, and
    Functions – Implementing Game Mechanics"), *Loops, Arrays, Switch, Enumerations,
    and Functions – Implementing Game Mechanics*, this chapter probably has more C++
    information than any other chapter in the book. It is packed with fundamental
    concepts that will move our understanding on enormously. It will also begin to
    shed light on some of the murky areas we have been skipping over a little bit
    like functions and the game loop. Once we have explored a whole list of C++ language
    necessities, we will then use everything we know to make the main game mechanic,
    the tree branches, move. By the end of this chapter, we will be ready for the
    final phase and the completion of Timber!!!. Get ready for the following topics:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[第4章](ch04.html "第4章 循环、数组、开关、枚举和函数-实现游戏机制")，*循环、数组、开关、枚举和函数-实现游戏机制*，这一章可能包含比书中其他任何章节都多的C++信息。它充满了基本概念，将极大地提高我们的理解。它还将开始阐明一些我们一直略过的模糊领域，比如函数和游戏循环。一旦我们探索了C++语言的一系列必需知识，我们将利用我们所知道的一切来使主要游戏机制——树枝移动。到本章结束时，我们将准备好进入最后阶段，完成Timber!!!。准备好接下来的主题：'
- en: Loops
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 循环
- en: Arrays
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组
- en: Making decisions with switch
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用开关进行决策
- en: Enumerations
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 枚举
- en: Getting started with functions
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用函数
- en: Creating and moving the tree branches
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和移动树枝
- en: '[Chapter 5](ch05.html "Chapter 5. Collisions, Sound, and End Conditions – Making
    the Game Playable"), *Collisions, Sound, and End Conditions – Making the Game
    Playable*, this is the final phase of the first project.  By the end of this chapter,
    you will have your first completed game. Once you have Timber!!! up and running,
    be sure to read the last section of this chapter as it will suggest ways to make
    the game better:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[第5章](ch05.html "第5章 碰撞、声音和结束条件-使游戏可玩")，*碰撞、声音和结束条件-使游戏可玩*，这是第一个项目的最后阶段。到本章结束时，你将拥有你的第一个完成的游戏。一旦你让Timber!!!运行起来，请务必阅读本章的最后一节，因为它将提出改进游戏的建议：'
- en: Adding the rest of the sprites
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加其余的精灵
- en: Handling the player input
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理玩家输入
- en: Animating the flying log
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动画飞行原木
- en: Handling death
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理死亡
- en: Adding sound effects
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加音效
- en: Adding features and improving Timber!!!
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加功能和改进Timber!!!
- en: '[Chapter 6](ch06.html "Chapter 6.  Object-Oriented Programming, Classes, and
    SFML Views"), *Object-Oriented Programming, Classes, and SFML Views*, this is
    the longest chapter of the book. There is a fair amount of theory, but the theory
    will give us the knowledge to start using OOP (object-oriented programming) to great
    effect. Furthermore, we will not waste any time in putting that theory to good
    use. Before we explore C++ OOP, we will find out about and plan our next game
    project. This is what we will do:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[第6章](ch06.html "第6章 面向对象编程、类和SFML视图")，*面向对象编程、类和SFML视图*，这是本书最长的一章。有相当多的理论，但这些理论将使我们有能力开始有效地使用面向对象编程。此外，我们将不会浪费任何时间来充分利用这些理论。在探索C++面向对象编程之前，我们将了解并计划我们的下一个游戏项目。我们将做以下事情：'
- en: Plan the Zombie Arena game
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计划僵尸竞技场游戏
- en: Learn about OOP and classes
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解面向对象编程和类
- en: Code the Player class
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写Player类
- en: Learn about the SFML View class
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解SFML View类
- en: Build the Zombie Arena game engine
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建僵尸竞技场游戏引擎
- en: Put the Player class to work
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让Player类投入使用
- en: '[Chapter 7](ch07.html "Chapter 7. C++ References, Sprite Sheets, and Vertex
    Arrays"), *C++ References, Sprite Sheets, and Vertex Arrays* [,](https://cdp.packtpub.com/beginningcppgameprogramming/wp-admin/post.php?post=152&action=edit) in
    this chapter, we will explore C++ references, which allow us to work on variables
    and objects that are otherwise out of scope. In addition, references will help
    us avoid having to pass large objects between functions, which is a slow process.
    It is a slow process because each time we do this, a copy of the variable or object
    must be made.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[第7章](ch07.html "第7章 C++引用、精灵表和顶点数组")，*C++引用、精灵表和顶点数组*，在本章中，我们将探索C++引用，它允许我们处理变量和对象，否则超出范围。此外，引用将帮助我们避免在函数之间传递大型对象，这是一个缓慢的过程。这是一个缓慢的过程，因为每次这样做时，都必须复制变量或对象。'
- en: Armed with this new knowledge about references, we will take a look at the SFML
    `VertexArray` class, which allows us to build up a large image that can be very
    quickly and efficiently drawn to the screen using multiple images from a single
    image file. By the end of the chapter, we will have a scaleable, random, scrolling
    background, using references and a `VertexArray` object.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 掌握了关于引用的新知识，我们将看看SFML `VertexArray`类，它允许我们构建一个大图像，可以使用单个图像文件中的多个图像非常快速和高效地绘制到屏幕上。到本章结束时，我们将拥有一个可扩展的、随机的、滚动的背景，使用引用和`VertexArray`对象。
- en: 'We will now talk about:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将讨论：
- en: C++ references
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C++引用
- en: SFML `VertexArrays`
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SFML `VertexArrays`
- en: Coding a random, scrolling background
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写随机滚动背景
- en: '[Chapter 8](ch08.html "Chapter 8. Pointers, the Standard Template Library,
    and Texture Management"), *Pointers, the Standard Template Library, and Texture
    Management*, we will learn a lot, as well as get plenty done to the game, in this
    chapter. We will first learn about the fundamental C++ topic of pointers. Pointers
    are variables that hold memory addresses. Typically, a pointer will hold the memory
    address of another variable. This sounds a bit like a reference, but we will see
    how they are much more powerful and we will use a pointer to handle an ever-expanding
    horde of zombies.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[第8章](ch08.html "第8章 指针、标准模板库和纹理管理")，*指针、标准模板库和纹理管理*，在本章中，我们将学到很多，同时也会为游戏做很多工作。我们将首先学习指针这一基本的C++主题。指针是保存内存地址的变量。通常，指针将保存另一个变量的内存地址。这听起来有点像引用，但我们将看到它们更加强大，我们将使用指针来处理不断增多的僵尸群。'
- en: We will also learn about the Standard Template Library (STL), which is a collection
    of classes that allow us to quickly and easily implement common data management
    techniques.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将学习标准模板库（STL），这是一组允许我们快速、轻松地实现常见数据管理技术的类。
- en: Once we understand the basics of the STL, we will be able to use that new knowledge
    to manage all the textures from the game, because if we have 1,000 zombies, we
    don't really want to load a copy of a zombie graphic into the GPU for each and
    every one.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们理解了STL的基础知识，我们就能够利用这些新知识来管理游戏中的所有纹理，因为如果我们有1000个僵尸，我们实际上不想为每一个加载一份僵尸图形到GPU中。
- en: We will also dig a little deeper into OOP and use a static function, which is
    a function of a class that can be called without an instance of the class. At
    the same time, we will see how we can design a class to ensure that only one instance
    can ever exist. This is ideal when we need to guarantee that different parts of
    our code will use the same data.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将深入了解面向对象编程，并使用静态函数，这是一个可以在没有类实例的情况下调用的类函数。同时，我们将看到如何设计一个类，以确保只能存在一个实例。当我们需要保证代码的不同部分将使用相同的数据时，这是理想的。
- en: 'In this chapter we will:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将：
- en: Learn about pointers
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习指针
- en: Learn about the STL
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习STL
- en: Implement the Texture Holder class using static functions and a singleton class
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用静态函数和单例类实现Texture Holder类
- en: Implement a pointer to a horde of zombies
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现一个指向一群僵尸的指针
- en: Edit some existing code to use the TextureHolder class for the player and background
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑一些现有的代码，使用TextureHolder类为玩家和背景
- en: '[Chapter 9](ch09.html "Chapter 9. Collision Detection, Pickups, and Bullets"),
    *Collision Detection, Pickups, and Bullets*, so far, we have implemented the main
    visual parts of our game. We have a controllable character running around in an
    arena full of zombies that chase him. The problem is that they don''t interact
    with each other. A zombie can wander right through the player without leaving
    a scratch. We need to detect collisions between the zombies and the player.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[第9章](ch09.html "第9章. 碰撞检测、拾取物品和子弹"), *碰撞检测、拾取物品和子弹*，到目前为止，我们已经实现了游戏的主要视觉部分。我们有一个可控制的角色在一个充满追逐他的僵尸的竞技场中奔跑。问题是它们彼此之间没有互动。僵尸可以毫无阻碍地穿过玩家。我们需要检测僵尸和玩家之间的碰撞。'
- en: If the zombies are going to be able to injure and eventually kill the player,
    it is only fair that we give the player some bullets for his gun. We will then
    need to make sure that the bullets can hit and kill the zombies.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果僵尸能够伤害并最终杀死玩家，那么给玩家一些子弹是公平的。然后我们需要确保子弹能够击中并杀死僵尸。
- en: At the same time, if we are writing collision detection code for bullets, zombies,
    and the player, it would be a good time to add a class for health and ammo pickups
    as well.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，如果我们为子弹、僵尸和玩家编写碰撞检测代码，那么现在是添加一个用于健康和弹药拾取物品的类的好时机。
- en: 'Here is what we will do and the order we will cover things:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们将要做的事情和我们将要涵盖的顺序：
- en: Shooting bullets
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 射击子弹
- en: Adding a crosshair and hiding the mouse pointer
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加准星并隐藏鼠标指针
- en: Spawning pickups
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成拾取物品
- en: Detecting collisions
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测碰撞
- en: '[Chapter 10](ch10.html "Chapter 10. Layering Views and Implementing the HUD"),
    *Layering Views and Implementing the HUD*, in this chapter, we will get to see
    the real value of SFML Views.  We will add a large array of SFML Text objects
    and manipulate them as we did before in the Timber!!! project. What is new is
    that we will draw the HUD using a second View instance. This way the HUD will
    stay neatly positioned over the top of the main game action, regardless of what
    the background, player, zombies, and other game objects are doing.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[第10章](ch10.html "第10章. 分层视图和实现HUD"), *分层视图和实现HUD*，在这一章中，我们将看到SFML视图的真正价值。我们将添加大量的SFML文本对象，并像之前在Timber!!!项目中那样操纵它们。新的是我们将使用第二个视图实例来绘制HUD。这样，HUD将始终整齐地定位在主游戏动作的顶部，而不管背景、玩家、僵尸和其他游戏对象在做什么。'
- en: 'Here is what we will do:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将做以下事情：
- en: Add text and a background to the home/game over screen
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在主页/游戏结束屏幕上添加文本和背景
- en: Add text to the level-up screen
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在升级屏幕上添加文本
- en: Create the second View
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建第二个视图
- en: Add a HUD
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加HUD
- en: '[Chapter 11](ch11.html "Chapter 11. Sound Effects, File I/O, and Finishing
    the Game"), *Sound Effects, File I/O, and Finishing the Game*, we are nearly there.
    This short chapter will demonstrate how we can easily manipulate files stored
    on the hard drive using the C++ standard library, and we will also add sound effects.
    Of course, we know how to add sound effects but we will discuss exactly where
    in the code the calls to `play` will go. We will also tie up a few loose ends
    to make the game complete. In this chapter we will do the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[第11章](ch11.html "第11章. 音效、文件I/O和完成游戏"), *音效、文件I/O和完成游戏*，我们快要完成了。这一小节将演示我们如何使用C++标准库轻松操作存储在硬盘上的文件，我们还将添加音效。当然，我们知道如何添加音效，但我们将讨论在代码中`play`的调用应该放在哪里。我们还将收尾一些松散的地方，使游戏完整。在这一章中，我们将做以下事情：'
- en: Saving and loading the highscore
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保存和加载最高分
- en: Adding sound effects
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加音效
- en: Allowing the player to levelup
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许玩家升级
- en: Creating, never-ending multiple waves
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建无尽的多波次
- en: '[Chapter 12](ch12.html "Chapter 12. Abstraction and Code Management – Making
    Better Use of OOP"), *Abstraction and Code Management – Making Better Use of OOP*,
    in this chapter, we will take a first look at the final project of the book. The
    project will have advanced features, such as directional sound that comes out
    of the speakers relative to the position of the player. It will also have split-screen
    co-operative gameplay. In addition, this project will introduce the concept of
    Shaders which are programs written in another language that run directly on the
    graphics card. By the end of [Chapter 16](ch16.html "Chapter 16.  Extending SFML
    Classes, Particle Systems, and Shaders"): *Extending SFML Classes, Particle Systems
    and Shaders*, you will have a fully functioning, multiplayer platform game built
    in the style of the hit classic Thomas Was Alone. This chapter''s main focus will
    be getting the project started, especially exploring how the code will be structured
    to make better use of OOP. Here are the details of this chapter.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[第12章](ch12.html "第12章 抽象和代码管理-更好地利用OOP") ，*抽象和代码管理-更好地利用OOP*，在本章中，我们将首次查看本书的最终项目。该项目将具有高级功能，例如与玩家位置相关的从扬声器发出的定向声音。它还将具有分屏合作游戏。此外，该项目将介绍着色器的概念，这是用另一种语言编写的直接在图形卡上运行的程序。到[第16章](ch16.html
    "第16章 扩展SFML类、粒子系统和着色器") 结束时，您将拥有一个完全功能的多人平台游戏，其风格类似于经典游戏Thomas Was Alone。本章的主要重点将是启动项目，特别是探索如何构造代码以更好地利用OOP。以下是本章的详细信息。'
- en: Introduce the final project, Thomas Was Late, including the gameplay features
    and project assets
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍最终项目Thomas Was Late，包括游戏功能和项目资产
- en: A detailed discussion of how we will improve the structure of the code compared
    to previous projects
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 详细讨论我们将如何改进代码结构，与之前的项目相比
- en: Coding the Thomas Was Late game engine
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写Thomas Was Late游戏引擎
- en: Implementing split-screen functionality
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现分屏功能
- en: '[Chapter 13](ch13.html "Chapter 13. Advanced OOP – Inheritance and Polymorphism"),
     *Advanced OOP – Inheritance and Polymorphism*, in this chapter, we will further
    extend our knowledge of OOP by looking at the slightly more advanced concepts
    of inheritance and polymorphism. We will then be able to use this new knowledge
    to implement the star characters of our game, Thomas and Bob. Here is what we
    will cover, in a little more detail:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '[第13章](ch13.html "第13章 高级OOP-继承和多态") ，*高级OOP-继承和多态*，在本章中，我们将通过查看继承和多态的略微更高级的概念，进一步扩展我们对OOP的知识。然后，我们将能够使用这些新知识来实现我们游戏的明星角色Thomas和Bob。以下是我们将更详细地涵盖的内容：'
- en: Learn how to extend and modify a class using inheritance
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何使用继承扩展和修改类
- en: Treat an object of a class as if it is more than one type of class by using
    polymorphism
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用多态将类的对象视为多种类型的类
- en: Learn about abstract classes and how designing classes that are never instantiated
    can actually be useful
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习抽象类以及设计从未实例化的类如何实际上是有用的
- en: Build an abstract `PlayableCharacter` class
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个抽象的`PlayableCharacter`类
- en: Put inheritance to work with the `Thomas` and `Bob` classes
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用继承与`Thomas`和`Bob`类
- en: Add Thomas and Bob to the game project
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Thomas和Bob添加到游戏项目
- en: '[Chapter 14](ch14.html "Chapter 14. Building Playable Levels and Collision
    Detection"),  *Building Playable Levels and Collision Detection*, this chapter
    will probably be one of the most satisfying of this project. The reason for this
    is that by the end of it we will have a playable game. Although there will be
    features still to implement (sound, particle effects, HUD, shader effects), Bob
    and Thomas will be able to run, jump, and explore the world. Furthermore, you
    will be able to create your very own level designs of almost any size or complexity,
    by simply making platforms and obstacles in a text file. We will achieve all this
    by covering these topics:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '[第14章](ch14.html "第14章 构建可玩关卡和碰撞检测") ，*构建可玩关卡和碰撞检测*，本章可能是本项目中最令人满意的章节之一。原因是到最后，我们将拥有一个可玩的游戏。尽管还有一些功能需要实现（声音、粒子效果、HUD、着色器效果），但Bob和Thomas将能够奔跑、跳跃和探索世界。此外，您将能够通过简单地在文本文件中创建平台和障碍物，轻松创建几乎任何大小或复杂度的自己的关卡设计。我们将通过以下主题实现所有这些：'
- en: Exploring how to design levels in a text file
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索如何在文本文件中设计关卡
- en: Building a `LevelManager` class that will load levels from a text file, convert
    them into data our game can use, and keep track of the level details such as spawn
    position, current level, and allowed time limit
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建`LevelManager`类，该类将从文本文件加载关卡，将其转换为我们的游戏可以使用的数据，并跟踪关卡细节，如生成位置、当前关卡和允许的时间限制
- en: Update the game engine to use `LevelManager`
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新游戏引擎以使用`LevelManager`
- en: Code a polymorphic function to handle the collision detection for both Bob and
    Thomas
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写一个多态函数来处理Bob和Thomas的碰撞检测
- en: '[Chapter 15](ch15.html "Chapter 15. Sound Spatialization and HUD"), [ ](https://cdp.packtpub.com/beginningcppgameprogramming/wp-admin/post.php?post=152&action=edit)
    *Sound Spatialization and HUD*, in this chapter we will be adding all the sound
    effects and the HUD. We have done this in both of the previous projects, but we
    will do things a bit differently this time. We will explore the concept of sound
    spatialization and how SFML makes this otherwise complicated concept nice and
    easy; in addition, we will build a HUD class to encapsulate our code draws information
    to the screen.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '[第15章](ch15.html "第15章 声音空间化和HUD") ，*声音空间化和HUD*，在本章中，我们将添加所有的音效和HUD。我们在之前的两个项目中都做过这个，但这次我们会有所不同。我们将探索声音空间化的概念，以及SFML如何使这个本来复杂的概念变得简单易行；此外，我们将构建一个HUD类来封装我们的代码，将信息绘制到屏幕上。'
- en: 'We will complete these tasks in this order:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将按照以下顺序完成这些任务：
- en: What is spatialization?
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是空间化？
- en: How SFML handles spatialization
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SFML如何处理空间化
- en: Building a `SoundManager` class
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个`SoundManager`类
- en: Deploying emitters
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署发射器
- en: Using the `SoundManager` class
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`SoundManager`类
- en: Building a `HUD` class
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建`HUD`类
- en: Using the `HUD` class
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `HUD` 类
- en: '[Chapter 16](ch16.html "Chapter 16.  Extending SFML Classes, Particle Systems,
    and Shaders"), *Extending SFML Classes, Particle Systems, and Shaders,  i*n this
    final chapter, we will explore the C++ concept of extending other people''s classes.
    More specifically, we will look at the SFML `Drawable` class and the benefits
    of using it as a base class for our own classes. We will also scratch the surface
    of the topic of OpenGL Shaders and see how writing code in another language (GLSL),
    which can be run directly on the graphics card, can lead to smooth graphical effects
    that might otherwise be impossible. As usual, we will also use our new skills
    and knowledge to enhance the current project.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '[第 16 章](ch16.html "第 16 章。扩展 SFML 类、粒子系统和着色器"), *扩展 SFML 类、粒子系统和着色器*，在这一章中，我们将探讨
    C++ 中扩展其他人类的概念。更具体地说，我们将研究 SFML `Drawable` 类以及将其用作我们自己类的基类的好处。我们还将浅尝 OpenGL 着色器的主题，并看看如何使用另一种语言（GLSL）编写代码，该代码可以直接在图形卡上运行，从而产生可能以其他方式不可能实现的平滑图形效果。像往常一样，我们还将使用我们的新技能和知识来增强当前项目。'
- en: 'Here is a list of the topics in the order we will cover them:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们将按顺序涵盖的主题列表：
- en: SFML Drawable
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SFML 可绘制
- en: Building a particle system
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建粒子系统
- en: OpenGl shaders and GLSL
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenGl 着色器和 GLSL
- en: Using shaders in the Thomas Was Late game
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在《Thomas Was Late》游戏中使用着色器
- en: '[Chapter 17](ch17.html "Chapter 17.  Before you go..."), *Before You Go...*, a
    quick discussion of what you might like to do next.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '[第 17 章](ch17.html "第 17 章。在你离开之前...")，“在你离开之前...”，快速讨论接下来可能要做的事情。'
- en: What you need for this book
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书所需的内容
- en: Windows 7 Service Pack 1, Windows 8 or Windows 10
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 7 Service Pack 1、Windows 8 或 Windows 10
- en: 1.6 GHz or faster processor
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1.6 GHz 或更快的处理器
- en: 1 GB of RAM (for x86) or 2 GB of RAM (for x64)
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1 GB 的 RAM（对于 x86）或 2 GB 的 RAM（对于 x64）
- en: 15 GB of available hard disk space
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15 GB 的可用硬盘空间
- en: 5400 RPM hard disk drive
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 5400 RPM 硬盘驱动器
- en: DirectX 9-capable video card that runs at 1024 x 768 or higher display resolution
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DirectX 9 兼容的视频卡，支持 1024 x 768 或更高的显示分辨率
- en: All the software used in this book is free. Obtaining and installing the software
    is covered step by step within the book. The book uses Visual Studio for Windows
    throughout, but experienced Linux users will probably have no trouble running
    the code and following the instructions using their favorite Linux programming
    environment.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中使用的所有软件都是免费的。在书中逐步介绍了获取和安装软件的步骤。本书始终在 Windows 上使用 Visual Studio，但有经验的 Linux
    用户可能不会在其喜爱的 Linux 编程环境中运行代码和按照说明出现问题。
- en: Who this book is for
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书适合对象
- en: 'This book is perfect for you if any of the following describes you: You have
    no C++ programming knowledge whatsoever or need a beginner level refresher course,
    if you want to learn to build games or just use games as an engaging way to learn
    C++, if you have aspirations to publish a game one day, perhaps on Steam, or if
    you just want to have loads of fun and impress friends with your creations.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果以下任何情况描述您，本书非常适合您：您完全不了解 C++ 编程，或需要初学者级别的复习课程；如果您想学习制作游戏或者只是想以一种引人入胜的方式学习
    C++；如果您有志于有朝一日发布游戏，也许是在 Steam 上；或者如果您只是想玩得开心，并以您的创作给朋友留下深刻印象。
- en: Conventions
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 约定
- en: In this book, you will find a number of text styles that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，您将找到一些区分不同信息种类的文本样式。以下是这些样式的一些示例及其含义的解释。
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    path names, dummy URLs, user input, and Twitter handles are shown as follows:
    "We can include other contexts through the use of the include directive."'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 文本中的代码词、数据库表名、文件夹名、文件名、文件扩展名、路径名、虚拟 URL、用户输入和 Twitter 句柄显示如下："我们可以通过使用 include
    指令包含其他上下文。"
- en: 'A block of code is set as follows:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块设置如下：
- en: '[PRE0]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们希望引起您对代码块的特定部分的注意时，相关行或项目将以粗体显示：
- en: '[PRE1]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Any command-line input or output is written as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 任何命令行输入或输出都将按如下方式书写：
- en: '[PRE2]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, for example, in menus or dialog boxes, appear in the text like
    this: "Clicking the **Next** button moves you to the next screen."'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '**新术语**和**重要单词**以粗体显示。您在屏幕上看到的单词，例如菜单或对话框中的单词，会以这种方式出现在文本中：“单击**下一步**按钮将您移至下一个屏幕。”'
- en: Note
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Warnings or important notes appear in a box like this.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 警告或重要提示将以如下方式显示在一个框中。
- en: Tip
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Tips and tricks appear like this.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 提示和技巧显示如下。
- en: Reader feedback
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读者反馈
- en: Feedback from our readers is always welcome. Let us know what you think about
    this book-what you liked or disliked. Reader feedback is important for us as it
    helps us develop titles that you will really get the most out of. To send us general
    feedback, simply e-mail feedback@packtpub.com, and mention the book's title in
    the subject of your message. If there is a topic that you have expertise in and
    you are interested in either writing or contributing to a book, see our author
    guide at [www.packtpub.com/authors](http://www.packtpub.com/authors).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们始终欢迎读者的反馈。请告诉我们您对本书的看法 - 您喜欢或不喜欢的地方。读者的反馈对我们很重要，因为它可以帮助我们开发您真正能够充分利用的标题。要向我们发送一般反馈，只需发送电子邮件至
    feedback@packtpub.com，并在消息主题中提及书名。如果您在某个专题上有专业知识，并且有兴趣撰写或为书籍做出贡献，请参阅我们的作者指南，网址为
    [www.packtpub.com/authors](http://www.packtpub.com/authors)。
- en: Customer support
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户支持
- en: Now that you are the proud owner of a Packt book, we have a number of things
    to help you to get the most from your purchase.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 既然您是 Packt 书的自豪所有者，我们有许多东西可以帮助您充分利用您的购买。
- en: Downloading the example code
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载示例代码
- en: You can download the example code files for this book from your account at [http://www.packtpub.com](http://www.packtpub.com).
    If you purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[http://www.packtpub.com](http://www.packtpub.com)的帐户中下载本书的示例代码文件。如果您在其他地方购买了本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便将文件直接发送到您的电子邮件。
- en: 'You can download the code files by following these steps:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以按照以下步骤下载代码文件：
- en: Log in or register to our website using your e-mail address and password.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的电子邮件地址和密码登录或注册到我们的网站。
- en: Hover the mouse pointer on the **SUPPORT** tab at the top.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将鼠标指针悬停在顶部的**支持**选项卡上。
- en: Click on **Code Downloads & Errata**.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**代码下载和勘误**。
- en: Enter the name of the book in the **Search** box.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**搜索**框中输入书名。
- en: Select the book for which you're looking to download the code files.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您要下载代码文件的书。
- en: Choose from the drop-down menu where you purchased this book from.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉菜单中选择您购买本书的地点。
- en: Click on **Code Download**.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**代码下载**。
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 下载了文件后，请确保使用最新版本的解压缩软件解压或提取文件夹：
- en: WinRAR / 7-Zip for Windows
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WinRAR / 7-Zip for Windows
- en: Zipeg / iZip / UnRarX for Mac
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Zipeg / iZip / UnRarX for Mac
- en: 7-Zip / PeaZip for Linux
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 7-Zip / PeaZip for Linux
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/Beginning-Cpp-Game-Programming](https://github.com/PacktPublishing/CHANGE
    THIS). We also have other code bundles from our rich catalog of books and videos
    available at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 该书的代码包也托管在GitHub上，网址为[https://github.com/PacktPublishing/Beginning-Cpp-Game-Programming](https://github.com/PacktPublishing/CHANGE
    THIS)。我们还有来自丰富书籍和视频目录的其他代码包，可在[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)上找到。快去看看吧！
- en: Downloading the color images of this book
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载本书的彩色图像
- en: We also provide you with a PDF file that has color images of the screenshots/diagrams
    used in this book. The color images will help you better understand the changes
    in the output. You can download this file from [http://www.packtpub.com/sites/default/files/downloads/BeginningCppGameProgramming_ColorImages.pdf](https://www.packtpub.com/sites/default/files/downloads/BeginningCppGameProgramming_ColoredImages.pdf).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还为您提供了一个PDF文件，其中包含本书中使用的屏幕截图/图表的彩色图像。彩色图像将帮助您更好地理解输出中的变化。您可以从[http://www.packtpub.com/sites/default/files/downloads/BeginningCppGameProgramming_ColorImages.pdf](https://www.packtpub.com/sites/default/files/downloads/BeginningCppGameProgramming_ColoredImages.pdf)下载此文件。
- en: Errata
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 勘误
- en: Although we have taken every care to ensure the accuracy of our content, mistakes
    do happen. If you find a mistake in one of our books-maybe a mistake in the text
    or the code-we would be grateful if you could report this to us. By doing so,
    you can save other readers from frustration and help us improve subsequent versions
    of this book. If you find any errata, please report them by visiting [http://www.packtpub.com/submit-errata](http://www.packtpub.com/submit-errata),
    selecting your book, clicking on the **Errata Submission Form** link, and entering
    the details of your errata. Once your errata are verified, your submission will
    be accepted and the errata will be uploaded to our website or added to any list
    of existing errata under the Errata section of that title.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们已经尽一切努力确保内容的准确性，但错误是难免的。如果您在我们的书中发现错误——可能是文本或代码中的错误——我们将不胜感激，如果您能向我们报告。通过这样做，您可以帮助其他读者免受挫折，并帮助我们改进本书的后续版本。如果您发现任何勘误，请访问[http://www.packtpub.com/submit-errata](http://www.packtpub.com/submit-errata)报告错误，选择您的书，点击**勘误提交表**链接，并输入您的勘误详情。一旦您的勘误被验证，您的提交将被接受，并且勘误将被上传到我们的网站或添加到该标题的勘误部分下的任何现有勘误列表中。
- en: To view the previously submitted errata, go to [https://www.packtpub.com/books/content/support](https://www.packtpub.com/books/content/support)
    and enter the name of the book in the search field. The required information will
    appear under the **Errata** section.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看先前提交的勘误，请转到[https://www.packtpub.com/books/content/support](https://www.packtpub.com/books/content/support)并在搜索字段中输入书名。所需信息将出现在**勘误**部分下。
- en: Piracy
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 盗版
- en: Piracy of copyrighted material on the Internet is an ongoing problem across
    all media. At Packt, we take the protection of our copyright and licenses very
    seriously. If you come across any illegal copies of our works in any form on the
    Internet, please provide us with the location address or website name immediately
    so that we can pursue a remedy.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网上的盗版行为是所有媒体的持续问题。在Packt，我们非常重视版权和许可的保护。如果您在互联网上发现我们作品的任何非法副本，请立即向我们提供位置地址或网站名称，以便我们采取补救措施。
- en: Please contact us at copyright@packtpub.com with a link to the suspected pirated
    material.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 请通过copyright@packtpub.com与我们联系，并提供涉嫌盗版材料的链接。
- en: We appreciate your help in protecting our authors and our ability to bring you
    valuable content.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢您帮助我们保护我们的作者和为您提供有价值的内容的能力。
- en: Questions
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: If you have a problem with any aspect of this book, you can contact us at questions@packtpub.com,
    and we will do our best to address the problem.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对本书的任何方面有问题，您可以通过questions@packtpub.com与我们联系，我们将尽力解决问题。
