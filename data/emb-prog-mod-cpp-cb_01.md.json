["```cpp\n#include <iostream>\nint main() {\n  union {\n    uint32_t i;\n    uint8_t c[4];\n  } data;\n  data.i = 0x01020304;\n  if (data.c[0] == 0x01) {\n    std::cout << \"Big-endian\" << std::endl;\n  } else {\n    std::cout << \"Little-endian\" << std::endl;\n  }\n}\n```", "```cpp\n struct {\n\n    uint8_t c;\n\n    uint32_t i;\n\n  } a = {1, 1};\n\n  std::cout << sizeof(a) << std::endl;\n```", "```cpp\nstruct {\n\n    uint8_t c;\n\n    uint8_t cc;\n\n    uint32_t i;\n\n  } a = {1, 1};\n\n  std::cout << sizeof(a) << std::endl;\n```", "```cpp\n#include <iostream>\n\nclass A {\n\npublic:\n\n  void print() {\n\n    std::cout << \"A\" << std::endl;\n\n  }\n\n};\n\nclass B: public A {\n\npublic:\n\n  void print() {\n\n    std::cout << \"B\" << std::endl;\n\n  }\n\n};\n\nint main() {\n\n  A* obj = new B;\n\n  obj->print();\n\n}\n```", "```cpp\n#include <iostream>\n\nclass A {\n\npublic:\n\n  virtual void print() {\n\n    std::cout << \"A\" << std::endl;\n\n  }\n\n};\n\nclass B: public A {\n\npublic:\n\n  void print() {\n\n    std::cout << \"B\" << std::endl;\n\n  }\n\n};\n\nint main() {\n\n  A* obj = new B;\n\n  obj->print();\n\n}\n```", "```cpp\n#include <stdio.h>\n\n#include <unistd.h>\n\n#include <fcntl.h>\n\n#include <string.h>\n\nint AppendString(const char* str) {\n\n  int fd = open(\"test.txt\", O_CREAT|O_RDWR|O_APPEND);\n\n if (fd < 0) {\n\n    printf(\"Can't open file\\n\");\n\n    return -1;\n\n  }\n\n  size_t len = strlen(str);\n\n  if (write(fd, str, len) < len) {\n\n    printf(\"Can't append a string to a file\\n\");\n\n    return -1;\n\n  }\n\n  close(fd);\n\n  return 0;\n\n}\n```", "```cpp\n#include <fstream>\n\nvoid AppendString(const std::string& str) {\n\n  std::ofstream output(\"test.txt\", std::ofstream::app);\n\n  if (!output.is_open()){\n\n    throw std::runtime_error(\"Can't open file\");\n\n  }\n\n  output << str;\n\n}\n```", "```cpp\n#include <stdio.h>\n\n #include <unistd.h>\n\n #include <fcntl.h>\n\n #include <iostream>\n\n #include <fstream>\n\n char read_last_byte(const char* filename) {\n\n         char result = 0;\n\n         int fd = open(filename, O_RDONLY);\n\n         if (fd < 0) {\n\n                printf(\"Can't open file\\n\");\n\n                return -1;\n\n       } \n\n         lseek(fd, -1, SEEK_END);\n\n         size_t s = read(fd, &result, sizeof(result));\n\n         if (s != sizeof(result)) {\n\n                 printf(\"Can't read from file: %lu\\n\", s);\n\n                 close(fd);\n\n                 return -1;\n\n        } \n\n         close(fd);\n\n         return result;\n\n }\n```", "```cpp\nint read_last_byte(const char* filename, char* result);\n```", "```cpp\nchar read_last_byte2(const char* filename) {\n\n         char result = 0;\n\n         std::fstream file;\n\n         file.exceptions (\n\n                 std::ifstream::failbit | std::ifstream::badbit );\n\n         file.open(filename);\n\n         file.seekg(-1, file.end);\n\n         file.read(&result, sizeof(result));\n\n         return result;\n\n }\n```"]