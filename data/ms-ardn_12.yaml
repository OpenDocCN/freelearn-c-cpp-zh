- en: Fun with Sound
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 声音的乐趣
- en: Adding sound to your robotic project can be the difference between a good robot
    and an awesome robot. Just think about how cute R2-D2, from the movie *Star Wars*,
    would have been if he did not make any sound. We can use sound for more than just
    robots. For example, we may want to add a loud alarm if a motion sensor detects
    motion or maybe we just want to play a melody when the temperature is just right
    outside.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 为你的机器人项目添加声音可能是好机器人与酷炫机器人之间的区别。想想看，如果电影《星球大战》中的R2-D2没有发出任何声音，它会有多可爱。我们可以使用声音不仅仅是机器人。例如，如果运动传感器检测到运动，我们可能想要添加一个响亮的警报，或者当外面的温度恰到好处时，我们可能只想播放一段旋律。
- en: 'In this chapter, you will learn:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习：
- en: How to connect a piezo buzzer to the Arduino
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将压电蜂鸣器连接到Arduino
- en: How to connect a speaker to the Arduino
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将扬声器连接到Arduino
- en: How to use the `tone()` function to generate a sound
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用`tone()`函数生成声音
- en: How to play music with the Arduino
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Arduino播放音乐
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In this chapter, we will be doing several projects that can use either a **piezo
    buzzer** or a small 8-ohm speaker. By using both the buzzer and the speaker, you
    will be able to hear the difference between the two to help determine which is
    right for our project.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将进行几个可以使用**压电蜂鸣器**或小型8欧姆扬声器的项目。通过使用蜂鸣器和扬声器，你将能够听到两者之间的区别，以帮助确定哪个适合我们的项目。
- en: A piezo buzzer is compact, reliable and very inexpensive. They are easier to
    mount and use than a normal speaker in most electronic projects. These buzzers
    can emit a wide range of sounds, from soft hums to loud alerts.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 压电蜂鸣器体积小、可靠且非常便宜。在大多数电子项目中，它们比普通扬声器更容易安装和使用。这些蜂鸣器可以发出从柔和的嗡嗡声到响亮警报的广泛声音。
- en: A piezo buzzer, sometimes known as a piezo speaker, creates sounds a little
    differently than a normal speaker. The working component of these buzzers is a
    thin disc of piezoelectric material usually bonded to a metal diaphragm. As the
    voltage is applied to the piezoelectric material, it deforms. This causes the
    metal diaphragm to bend forward or backward. This deformation happens very rapidly,
    causing the ceramic/metal bending element to vibrate at the frequency of the applied
    voltage, which produces the audible sound.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 压电蜂鸣器，有时也称为压电扬声器，其发声原理与普通扬声器略有不同。这些蜂鸣器的工作组件是一块薄的压电材料薄片，通常粘附在金属振膜上。当电压施加到压电材料上时，它会变形。这导致金属振膜向前或向后弯曲。这种变形发生得非常快，导致陶瓷/金属弯曲元件以施加电压的频率振动，从而产生可听的声音。
- en: 'The following photograph shows what a piezo buzzer looks like:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下照片显示了压电蜂鸣器的样子：
- en: '![](img/dbeb2ce2-5221-4c97-a829-662b7cd10b06.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/dbeb2ce2-5221-4c97-a829-662b7cd10b06.png)'
- en: The shorter pin should be connected to ground while the longer pin should be
    connected to power.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 较短的引脚应连接到地，而较长的引脚应连接到电源。
- en: The 8 ohm speaker is a typical speaker that contains an electromagnet, which
    is a metal coil that creates a magnetic field when electricity is applied. By
    reversing the direction of the coil, the poles of the magnet reverse. This electromagnet
    is placed in front of a normal magnet where the poles cannot be reversed. The
    current direction that is applied to the electromagnet is changed rapidly, causing
    the magnets to attract and repel each other creating sound from a cone that is
    connected to the electromagnet.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 8欧姆扬声器是一种典型的扬声器，它包含一个电磁铁，这是一个金属线圈，当通电时会产生磁场。通过反转线圈的方向，磁铁的极性会反转。这个电磁铁放置在一个普通磁铁的前面，磁铁的极性不能反转。施加到电磁铁上的电流方向会迅速改变，导致磁铁相互吸引和排斥，从而从连接到电磁铁的圆锥体产生声音。
- en: 'The following diagram shows what an 8 ohm speaker could look like:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了8欧姆扬声器的样子：
- en: '![](img/03dc3298-c9cf-4ef0-bf6f-7e48dc2926c4.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/03dc3298-c9cf-4ef0-bf6f-7e48dc2926c4.png)'
- en: Now let's look at the components needed for this project.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看这个项目所需的组件。
- en: Components needed
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 需要的组件
- en: 'We will need the following components for this chapter''s project:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将需要以下组件来完成本章的项目：
- en: One Arduino Uno or compatible board
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个Arduino Uno或兼容板
- en: One piezo buzzer
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个压电蜂鸣器
- en: One 8 ohm speaker
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个8欧姆扬声器
- en: Jumper wires
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳线
- en: One breadboard
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个面包板
- en: Circuit diagrams
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 电路图
- en: 'Here is the circuit diagram that we will use for all code samples in this chapter:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们将在本章的所有代码示例中使用的电路图：
- en: '![](img/fed1957f-9b99-4436-9a35-4edff0df9096.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fed1957f-9b99-4436-9a35-4edff0df9096.png)'
- en: This diagram shows that the ground pins on both the speaker and piezo buzzer
    are connected to the ground rail on the breadboard. The power pin on the piezo
    buzzer is connected to pin 8 on the Arduino, and the power wire on the speaker
    is connected to pin 7 on the Arduino.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 此图显示，扬声器上的接地引脚和压电蜂鸣器上的接地引脚都连接到面包板上的接地轨。压电蜂鸣器的电源引脚连接到Arduino的8号引脚，而扬声器的电源线连接到Arduino的7号引脚。
- en: Code
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码
- en: Let's start off by using the `tone()` function.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从使用`tone()`函数开始。
- en: Using the tone function
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`tone`函数
- en: 'For the first few examples in this chapter, we will be using the Arduino `tone()`
    function. This function comes in two varieties. The first variety takes two arguments,
    where the first is the pin number that the buzzer or speaker is connected to and
    the second is the frequency in hertz to play the sound at. The function looks
    like this:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的前几个示例中，我们将使用Arduino的`tone()`函数。此函数有两种形式。第一种形式接受两个参数，第一个参数是蜂鸣器或扬声器连接的引脚号，第二个参数是在该频率（赫兹）下播放声音。函数看起来是这样的：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When this function is used with only two parameters, the sound is played indefinitely.
    The following code shows how we could use this function to play a note using the
    previous circuit diagram:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当此函数仅使用两个参数时，声音将无限期播放。以下代码显示了如何使用此函数通过之前的电路图播放音符：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: With this code, the `tone()` function is used within the `setup()` function
    to play at 1000 Hz. We can set the sound pin to either the piezo buzzer or the
    speaker pin depending on which one you wish to play the sound. We would use this
    version of the `tone()` function if we wanted to play a sound continuously until
    some user interaction happens. An example of this would be playing an alert sound
    until the user acknowledged it.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此代码，`tone()`函数在`setup()`函数中使用，以1000赫兹播放。我们可以将声音引脚设置为压电蜂鸣器或扬声器引脚，具体取决于您想播放哪种声音。如果我们想播放一个直到用户确认才停止的连续声音，我们会使用此版本的`tone()`函数。
- en: 'The second variety of this function takes a third argument, which is the duration
    in milliseconds to play the sound. This function looks like this:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数的第二种形式接受第三个参数，即播放声音的持续时间（毫秒）。此函数看起来是这样的：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This version of the `tone()` function can be used like this:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 此版本的`tone()`函数可以这样使用：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This code is exactly like the previous code except the sound is only played
    for one second. We would use this version of the tone function if we wanted to
    play short notes with specific durations. An example of this would be playing
    a song, which we will see in the next example.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码与之前的代码完全相同，只是声音只播放一秒钟。如果我们想播放具有特定持续时间的短音符，我们会使用此版本的`tone`函数。例如，播放一首歌，我们将在下一个示例中看到。
- en: 'Before we can play a song with the Arduino, we need to define what frequency
    to play for different notes. The list of frequencies is quite large and can be
    downloaded with the downloadable code for this book. The file with the frequencies
    is called `pitches.h`, and the frequencies are defined like this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们能够使用Arduino播放歌曲之前，我们需要定义不同音符的频率。频率列表相当长，可以与本书的可下载代码一起下载。包含频率的文件名为`pitches.h`，频率定义如下：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now let''s look at how we can use these frequencies to play a song. The first
    thing we will need to do is to create a pitches header tab, named `pitches.h`,
    which will contain the frequencies and then include it in the main tab with the
    following line:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何使用这些频率来播放一首歌。首先，我们需要创建一个名为`pitches.h`的标题头文件，其中将包含频率，然后使用以下行将其包含在主标签中：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now we need to define the notes or melody that makes up the song. These notes
    will be stored in an array named `melody`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要定义组成歌曲的音符或旋律。这些音符将被存储在一个名为`melody`的数组中：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Each note in the song should play for a certain duration. We can create another
    array that contains the duration of each note, and we will call that array `tempo`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 歌曲中的每个音符都应该播放一定的时间。我们可以创建另一个包含每个音符持续时间的数组，我们将称之为`tempo`：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We will be using the `tone()` function to create the notes. With this function,
    we will not need to set up anything in the `setup()` function. The following code
    can be put in the `loop()` function to play the song defined by the `melody` and
    `tempo` arrays:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`tone()`函数来创建音符。使用此函数，我们不需要在`setup()`函数中设置任何内容。以下代码可以放入`loop()`函数中，以播放由`melody`和`tempo`数组定义的歌曲：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This code starts off by calculating the number of notes in the `melody` array
    by dividing the size of the `melody` array by the size of the first element in
    the array. We use this logic to calculate the number of elements in an array because
    the `sizeof(melody)` code returns the number of bytes occupied by the array and
    the `sizeof(melody[0])` returns the number of bytes occupied by the first element
    in the array. It takes two bytes to store a single integer, and there are 26 notes
    in the melody array. Therefore, the `size of (melody)` code will return `52`,
    and the `sizeof(melody[0])` code will return `2`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码首先通过将`melody`数组的大小除以数组中第一个元素的大小来计算`melody`数组中的音符数量。我们使用这种逻辑来计算数组中的元素数量，因为`sizeof(melody)`代码返回数组占用的字节数，而`sizeof(melody[0])`代码返回数组中第一个元素占用的字节数。存储单个整数需要两个字节，melody数组中有26个音符。因此，`sizeof(melody)`代码将返回`52`，而`sizeof(melody[0])`代码将返回`2`。
- en: A `for` loop is used to loop through the `melody` and `temp` arrays. Within
    the `for` loop, the note duration is calculated by taking one second and dividing
    it by the note type (the elements in the `tempo` array) where a quarter note is
    equal to 1000 divided by 4 and an eighth note is equal to 1000 divided by 8.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`for`循环遍历`melody`和`temp`数组。在`for`循环内，通过将一秒除以音符类型（`tempo`数组中的元素）来计算音符时长，其中四分音符等于1000除以4，八分音符等于1000除以8。
- en: The `tone` function is used to play the note from the `melody` array for the
    calculated duration. The `tone` function will not cause the application to pause
    while the note is playing. Therefore, we need to create our own pause. We will
    also want to pause slightly longer than the duration of the note to have a slight
    pause between the notes. For this, we multiply the note duration by 1.2 and then
    use the `delay()` function. After the `for` loop has completed, there is another
    delay for three seconds before starting over.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`tone`函数来播放`melody`数组中的音符，并持续计算出的时长。`tone`函数在播放音符时不会使应用程序暂停。因此，我们需要自己创建暂停。我们还想暂停的时间略长于音符的时长，以便在音符之间有轻微的停顿。为此，我们将音符时长乘以1.2，然后使用`delay()`函数。在`for`循环完成后，在重新开始之前会有一个三秒钟的延迟。
- en: This last example shows how we can play a song using the `tone()` function with
    two arrays, one for the notes and one for the tempo. Now let's look at how we
    can use a library that will enable us to play music that is in the **RTTTL** (**Ring
    Tone Text Transfer Language**) format. The RTTTL format was developed by Nokia
    to transfer ringtones to cellphones.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 最后这个例子展示了我们可以如何使用`tone()`函数和两个数组来播放一首歌，一个数组用于音符，另一个数组用于节奏。现在让我们看看如何使用一个库，它将使我们能够播放**RTTTL**（**铃声文本传输语言**）格式的音乐。RTTTL格式是由诺基亚开发的，用于将铃声传输到手机。
- en: Playing a ringtone in the RTTTL format
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在RTTTL格式中播放铃声
- en: 'The Arduino library manager does not have a library that we can download to
    play RTTTL files at this time. Therefore, we will need to download and manually
    install a library. We will be using Arduino-rtttl-player that can be downloaded
    here: [https://github.com/ponty/arduino-rtttl-player](https://github.com/ponty/arduino-rtttl-player).
    We will need to create a ZIP file of the library to load it into the IDE. If you
    do not have access to a utility that can zip up the files, the downloadable code
    for this book contains the library already zipped.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 目前Arduino库管理器没有我们可以下载来播放RTTTL文件的库。因此，我们需要下载并手动安装一个库。我们将使用Arduino-rtttl-player，可以从这里下载：[https://github.com/ponty/arduino-rtttl-player](https://github.com/ponty/arduino-rtttl-player)。我们需要创建一个库的ZIP文件以将其加载到IDE中。如果您没有访问可以压缩文件的实用程序，本书提供的可下载代码中已经包含了已压缩的库。
- en: When we create the ZIP file to load into the Arduino IDE, we do not want to
    zip up everything that is downloaded from the GitHub repository because the Arduino
    IDE will not recognize the ZIP file as a library file. We only want to zip up
    the directory that contains the code for the library, and in the case of the Arduino-rtttl-player
    library that would be the `rtttl` folder.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建ZIP文件以加载到Arduino IDE时，我们不想将GitHub存储库中下载的所有内容都压缩起来，因为Arduino IDE不会将ZIP文件识别为库文件。我们只想压缩包含库代码的目录，在Arduino-rtttl-player库的情况下，就是`rtttl`文件夹。
- en: 'After we download the library and create a ZIP file that contains the `rtttl`
    folder from the library, we will want to load the library into the Arduino IDE.
    To do this, we will want to select Sketch | Include Library | Add .ZIP Library...
    from the main menu as shown in the following screenshot:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们下载库并创建一个包含库中的`rtttl`文件夹的ZIP文件后，我们希望将库加载到Arduino IDE中。为此，我们需要从主菜单中选择Sketch
    | Include Library | Add .ZIP Library...，如下面的截图所示：
- en: '![](img/f6dd9a78-0b9c-4988-b77d-41675508590a.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![代码截图](img/f6dd9a78-0b9c-4988-b77d-41675508590a.png)'
- en: 'After you select the Add .ZIP Library option, you will be presented with a
    file picker where you can browse to the location of the ZIP file you created and
    select it. If the library was successfully imported, you will see a message in
    the message bar as shown in the following screenshot:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在你选择添加ZIP库选项后，你将看到一个文件选择器，你可以浏览到你创建的ZIP文件的位置并选择它。如果库成功导入，你将在消息栏中看到一条消息，如下面的截图所示：
- en: '![](img/8b417a3f-5d50-47be-8f1d-a96c837a8267.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/8b417a3f-5d50-47be-8f1d-a96c837a8267.png)'
- en: 'Now we are ready to play an RTTTL melody. The first thing we need to do is
    to include the library with the project by adding the following `include` statement
    to the sketch:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备播放一个RTTTL旋律。我们首先需要做的是通过在草图中加入以下`include`语句来将库包含到项目中：
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We will want to include both the piezo buzzer and the speaker as we did in
    the earlier projects with the following code:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将想要包含蜂鸣器和扬声器，就像我们在早期项目中做的那样，以下代码：
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We will need to define the song to play. There are plenty of RTTTL codes on
    the internet. To find some, do a search for `rtttl songs` and you should see plenty
    of RTTTL codes for a wide variety of songs. For this example, we will play the
    *Star Wars* theme. The following code contains the RTTTL code for this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要定义要播放的歌曲。互联网上有大量的RTTTL代码。要找到一些，搜索`rtttl songs`，你应该能看到大量各种歌曲的RTTTL代码。对于这个例子，我们将播放《星球大战》的主题。以下代码包含了这首歌曲的RTTTL代码：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To play this song, add the following code to the `setup()` function:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 要播放这首歌曲，请将以下代码添加到`setup()`函数中：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We use the `begin` function from the Arduino-rtttl-player library to initiate
    the library, and define what pin the speaker is connected to and then the `play`
    function to play the song. The second parameter in the `play` function is the
    octave. The higher the octave is set to the higher pitch the song will play at.
    I usually leave this at zero.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用Arduino-rtttl-player库中的`begin`函数来初始化库，并定义扬声器连接的引脚，然后使用`play`函数来播放歌曲。`play`函数的第二个参数是音阶。音阶设置得越高，歌曲播放的音调就越高。我通常将其设置为0。
- en: When this code is run, you should recognize the *Star Wars* theme.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当这段代码运行时，你应该能认出《星球大战》的主题。
- en: Challenge
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 挑战
- en: For the challenge, we will stay with the *Star Wars* theme. Let's say that we
    wanted to build a robot that looks like R2-D2 from *Star Wars*. One of the features
    that we would put in would be to have it sound like R2-D2\. How would you make
    the robot sound like R2-D2?
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个挑战，我们将继续使用《星球大战》的主题。假设我们想要制作一个看起来像《星球大战》中的R2-D2的机器人。我们可能会加入的一个特性是让它发出像R2-D2的声音。你将如何让这个机器人发出像R2-D2的声音呢？
- en: Summary
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we saw how to connect both a speaker and a piezo buzzer to
    an Arduino. We then learned how to use the `tone()` function to create sounds
    and also play a song. We also saw how we could install and use a third-party library
    so we could play RTTTL files.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何将扬声器和蜂鸣器连接到Arduino。然后我们学习了如何使用`tone()`函数来创建声音并播放歌曲。我们还看到了如何安装和使用第三方库来播放RTTTL文件。
- en: In the next chapter, we will look at how we can use LCD displays to display
    messages.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何使用LCD显示屏来显示消息。
