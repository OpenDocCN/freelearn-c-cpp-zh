["```cpp\n#include <stddef.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n#include <iostream>\n\nint main(void)\n{\n    pid_t child;\n    int status;\n    std::cout << \"I am the parent, my PID is \" << getpid()\n        << std::endl;\n    std::cout << \"My parent's PID is \" << getppid() << std::endl;\n    std::cout << \"I am going to create a new process...\"\n        << std::endl;\n    child = fork();\n    if (child == -1)\n    {\n```", "```cpp\n        // fork() returns -1 on failure\n        std::cout << \"fork() failed.\" << std::endl;\n        return (-1);\n    }\n    else if (child == 0)\n    {\n```", "```cpp\n      std::cout << \"I am the child, my PID is \" << std::endl;\n      std::cout << \"My parent's PID is \" << getppid() << std::endl;\n    }\n    else\n    {\n```", "```cpp\n        wait(&status); // wait for the child process to finish...\n        std::cout << \"I am the parent, my PID is still \"\n            << getpid() << std::endl;\n    }\n    return (0);\n}\n```", "```cpp\n#include <stddef.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n#include <iostream>\n\nint main(void)\n{\n    pxid_t child;\n    int status;\n    std::cout << \"I am the parent, my PID is \" \n              << getpid() << std::endl;\n    std::cout << \"My parent's PID is \" \n              << getppid() << std::endl;\n    std::cout << \"I am going to create a new process...\" \n              << std::endl;\n    child = fork();\n    if (child == -1)\n    {\n        // fork() returns -1 on failure\n        std::cout << \"fork() failed.\" << std::endl;\n        return 1;\n    }\n    else if (child == 0)\n    {\n```", "```cpp\n        if (execl(\"/usr/bin/ls\", \"ls\", \"-l\", NULL) < 0) \n        {\n            std::cout << \"execl failed!\" << std::endl;\n            return 2;\n        }\n        std::cout << \"I am the child, my PID is \" \n                  << getpid() << std::endl;\n        std::cout << \"My parent's PID is \" \n                  << getppid() << std::endl;\n    }\n    else\n    {\n        wait(&status); // wait for the child process to finish...\n    }\n    return (0);\n}\n```", "```cpp\n#include <stddef.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n#include <iostream>\n\nint main(void)\n{\n    std::cout << \"Running child ...\" << std::endl;\n    while (true)\n        ;\n}\n```", "```cpp\n#include <stddef.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n#include <iostream>\nint main(void)\n{\n    pid_t child;\n    int status;\n    std::cout << \"I am the parent, my PID is \" << getpid() \n              << std::endl;\n    child = fork();\n    std::cout << \"Forked a child process with PID = \" \n              << child << std::endl;\n    if (child == -1)\n    {\n        std::cout << \"fork() failed.\" << std::endl;\n        return 1;\n    }\n    else if (child == 0)\n    {\n```", "```cpp\n        std::cout << \"About to run the child process with PID = \" \n                  << child << std::endl;\n        if (execl(\"./child.out\", \"child.out\", NULL) < 0)\n        {\n            std::cout << \"error in executing child proceess \" \n                      << std::endl;\n            return 2;\n        }\n    }\n    else\n    {\n```", "```cpp\n        std::cout << \"killing the child process with PID = \" \n                  << child << std::endl;\n        int status = kill (child, 9);\n        if (status == 0)\n            std::cout << \"child process killed ....\" << std::endl;\n        else\n            std::cout << \"there was a problem killing\n                the process with PID = \" \n                      << child << std::endl;\n    }\n    return (0);\n}\n```", "```cpp\n#include <iostream>\n#include <thread>\n#include <vector>\n#include <algorithm>\n\nvoid threadFunction (std::vector<int> &speeds, int start, int\n    end, int& res);\n\nint main()\n{    \n    std::vector<int> speeds (100000);\n    std::generate(begin(speeds), end(speeds), [] () \n        { return rand() % 10 ; });\n\n```", "```cpp\n    int th1Result = 0;\n    std::thread t1 (threadFunction, std::ref(speeds), 0, 49999, \n        std::ref(th1Result));\n\n```", "```cpp\n    int th2Result = 0;    \n    std::thread t2 (threadFunction, std::ref(speeds), 50000, 99999, \n        std::ref(th2Result));\n\n```", "```cpp\n    t1.join();\n    t2.join();\n    std::cout << \"Result = \" << th1Result + th2Result\n        << std::endl;\n    return 0;\n}\n\nvoid threadFunction (std::vector<int> &speeds, int start, int \n    end, int& res)\n{\n    std::cout << \"starting thread ... \" << std::endl;\n    for (int i = start; i <= end; ++i)\n    res += speeds[i];\n    std::cout << \"end thread ... \" << std::endl;\n}\n```", "```cpp\n#include <unistd.h>\n#include <sys/stat.h>\n#include <iostream>\n\nint main(void)\n{\n    pid_t child;\n    int status;\n    std::cout << \"I am the parent, my PID is \" << getpid()\n        << std::endl;\n    std::cout << \"I am going to create a new daemon process...\"\n        << std::endl;\n\n    // 1\\. clear file creation mask\n    umask(0);\n\n```", "```cpp\n    child = fork();\n    if (child == -1)\n    {\n        std::cout << \"fork() failed.\" << std::endl;\n        return (-1);\n    }\n    else if (child == 0) // child (daemon) process\n    {\n\n```", "```cpp\n        setsid();\n\n```", "```cpp\n        if (chdir(\"/\") < 0)\n            std::cout << \"Couldn't change directly\" << std::endl;\n\n```", "```cpp\n        // Attach here the daemon specific long running\n        // tasks ... sleep for now.\n        sleep (10);\n    }\n\n```", "```cpp\n    return (0);\n}\n```"]