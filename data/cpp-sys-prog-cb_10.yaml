- en: Managing Signals
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理信号
- en: Signals are software interrupts. They provide a way of managing asynchronous
    events, for example, a user from the terminal typing the interrupt key or another
    process sending a signal that must be managed. Every signal has a name that starts
    with `SIG` (for example, `SIGABRT`). This chapter will teach you how to write
    code to properly manage software interrupts, what the default actions defined
    by Linux for each signal are, and how to override them.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 信号是软件中断。它们提供了一种管理异步事件的方式，例如，来自终端的用户键入中断键或另一个进程发送必须被管理的信号。每个信号都有一个以`SIG`开头的名称（例如，`SIGABRT`）。本章将教您如何编写代码来正确管理软件中断，Linux为每个信号定义的默认操作是什么，以及如何覆盖它们。
- en: 'This chapter will cover the following recipes:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下配方：
- en: Learning all of the signals and their default actions
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习所有信号及其默认操作
- en: Learning how to ignore a signal
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何忽略信号
- en: Learning how to trap a signal
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何捕获信号
- en: Learning how to send a signal to another process
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何向另一个进程发送信号
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In order to let you try the programs in this chapter immediately, we've set
    up a Docker image that has all the tools and libraries we'll need throughout the
    book, it is based on Ubuntu 19.04.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让您立即尝试本章中的程序，我们设置了一个Docker镜像，其中包含了本书中需要的所有工具和库，它基于Ubuntu 19.04。
- en: 'In order to set it up, follow these steps:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了设置它，请按照以下步骤进行操作：
- en: Download and install the Docker Engine from [www.docker.com](http://www.docker.com).
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[www.docker.com](http://www.docker.com)下载并安装Docker Engine。
- en: Pull the image from Docker Hub: `docker pull kasperondocker/system_programming_cookbook:latest`.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Docker Hub拉取镜像：`docker pull kasperondocker/system_programming_cookbook:latest`。
- en: The image should now be available. Type in the following command to view the
    image: `docker images`.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 镜像现在应该可用。输入以下命令查看镜像：`docker images`。
- en: You should have at least this image now: `kasperondocker/system_programming_cookbook`.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您应该至少有这个镜像：`kasperondocker/system_programming_cookbook`。
- en: Run the Docker image with an interactive shell with the help of the following
    command: `docker run -it --cap-add sys_ptrace kasperondocker/system_programming_cookbook:latest /bin/bash`.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行带有交互式shell的Docker镜像：`docker run -it --cap-add sys_ptrace kasperondocker/system_programming_cookbook:latest
    /bin/bash`。
- en: The shell on the running container is now available. Use `root@39a5a8934370/#
    cd /BOOK/` to get all the programs developed, by chapters.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正在运行的容器上的shell现在可用。使用`root@39a5a8934370/# cd /BOOK/`来获取按章节开发的所有程序。
- en: The `--cap-add sys_ptrace` argument is necessary to allow GDB in the Docker
    container to set breakpoints, which, by default, Docker does not allow.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`--cap-add sys_ptrace`参数是必要的，以允许Docker容器中的GDB设置断点，默认情况下Docker不允许。'
- en: Learning all of the signals and their default actions
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习所有信号及其默认操作
- en: This recipe will show you all the signals and related default actions supported
    by Linux. We'll also learn why signals are an important concept and what Linux
    does for a software interrupt.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方将向您展示Linux支持的所有信号及相关默认操作。我们还将了解为什么信号是一个重要的概念，以及Linux为软件中断做了什么。
- en: How to do it...
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: In this section, we'll list all the signals supported by our Linux distribution
    in order to be able to describe the most common ones in the *How it works...*
    section.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将列出我们的Linux发行版支持的所有信号，以便能够在*工作原理...*部分描述最常见的信号。
- en: 'On a shell, type the following command:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在shell上，输入以下命令：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you run this command on the Docker image of the book, which is based on
    the Ubuntu version 19.04 distribution, you''ll get this output:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在基于Ubuntu 19.04发行版的书籍的Docker镜像上运行此命令，您将获得以下输出：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the next section, we'll learn what the default actions of the most common
    signals a process can receive are, a description for each, and how Linux manages
    these software interrupts.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习进程可以接收的最常见信号的默认操作，以及每个信号的描述，以及Linux如何管理这些软件中断。
- en: How it works...
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'In *step 1,* we executed the `kill -l` command to get all the signals the current
    Linux distribution supports. The following table provides a list of the most common
    signals with the default action and description:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤1*中，我们执行了`kill -l`命令来获取当前Linux发行版支持的所有信号。以下表格提供了最常见信号的默认操作和描述：
- en: '| **Signal** | **Description** | **Default Action** |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| **信号** | **描述** | **默认操作** |'
- en: '| `SIGHUP` | The Terminal controlling the process was closed (for example,
    the user logged out?) | Terminate |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `SIGHUP` | 控制进程的终端被关闭（例如，用户注销？） | 终止 |'
- en: '| `SIGABRT` | Signal sent by `abort()`  | Terminate (with a core dump, if possible)
    |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `SIGABRT` | 由`abort()`发送的信号 | 终止（如果可能，带有核心转储） |'
- en: '| `SIGSEGV` | Invalid memory reference | Terminate (with a core dump, if possible)
    |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `SIGSEGV` | 无效的内存引用 | 终止（如果可能，带有核心转储） |'
- en: '| `SIGSYS` | Bad system call or process tried to execute an invalid system
    call. | Terminate (with a core dump, if possible) |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `SIGSYS` | 错误的系统调用或进程尝试执行无效的系统调用。 | 终止（如果可能，带有核心转储） |'
- en: '| `SIGINT` | Interrupt generated from the keyboard (for example *Ctrl* + *C*)
    | Terminate |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `SIGINT` | 从键盘生成的中断（例如*Ctrl* + *C*） | 终止 |'
- en: '| `SIGQUIT` | Quit generated from the keyboard (for example: *Ctrl* + */*)
    | Terminate (with a core dump, if possible) |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `SIGQUIT` | 从键盘生成的退出（例如：*Ctrl* + */*） | 终止（如果可能，带有核心转储） |'
- en: '| `SIGPIPE` | A process tried to write to a pipe but with no reader | Terminate
    |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `SIGPIPE` | 进程尝试向管道写入但没有读取器 | 终止 |'
- en: '| `SIGILL` | A process tried to execute an illegal instruction | Terminate
    (with a core dump, if possible) |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `SIGILL` | 进程尝试执行非法指令 | 终止（如果可能，带有核心转储） |'
- en: '| `SIGALRM` | Signal sent by `alarm()` | Terminate |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `SIGALRM` | 由`alarm()`发送的信号 | 终止 |'
- en: '| `SIGSTOP` | Stop a process | Stop the process |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `SIGSTOP` | 停止进程 | 停止进程 |'
- en: '| `SIGIO` | Async I/O event | Terminate |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `SIGIO` | 异步I/O事件 | 终止 |'
- en: '| `SIGTRAP` | Breakpoint trapped | Terminate |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `SIGTRAP` | 断点被捕获 | 终止 |'
- en: '| `SIGTERM` | Termination signal (catchable) | Terminate |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `SIGTERM` | 终止信号（可捕获） | 终止 |'
- en: '| `SIGKILL` | Process termination (un-catchable) | Terminate |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `SIGKILL` | 进程终止（无法捕获） | 终止 |'
- en: For each signal sent to a process, Linux applies its default action. The system
    developer can, of course, override this action by implementing the desired one
    on within the process, as we'll see in the *Learning how to trap a signal* recipe.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 对于发送到进程的每个信号，Linux都会应用其默认操作。系统开发人员当然可以通过在进程内实现所需的操作来覆盖此操作，正如我们将在*学习如何捕获信号*食谱中看到的那样。
- en: 'Signals are defined in the `<signal.h>` header file and are simply positive
    integers with a meaningful name always prefixed by the `SIG`word. What does Linux
    do when a signal (that is, a software interrupt) is raised? Simply put, it always
    applies the same sequential life cycle, which is as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 信号在`<signal.h>`头文件中定义，它们只是带有有意义名称的正整数，始终以`SIG`开头。当信号（即软件中断）被引发时，Linux会做什么？简单来说，它总是应用相同的顺序生命周期，如下所示：
- en: The signal is raised by a user of another process, or by Linux itself.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 信号是由另一个进程的用户或Linux本身发出的。
- en: The signal is stored until Linux is able to deliver it.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 信号被存储，直到Linux能够传递它。
- en: 'Once delivered, Linux performs one of these specific actions:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦传递，Linux将执行这些特定操作之一：
- en: 'Ignore the signal: we''ve seen that there are signals that cannot be ignored
    (for example, `SIGKILL`).'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 忽略信号：我们已经看到有些信号是不能被忽略的（例如`SIGKILL`）。
- en: 'Perform the default action: you can refer to column 3 of the preceding table.'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行默认操作：您可以参考前表的第3列。
- en: Handle the signal with the registered function (which the system developer implemented).
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 处理注册函数的信号（由系统开发人员实现）。
- en: There's more...
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: All the signals, described and defined in the `<signal.h>` header file are POSIX
    compliant. This means that each identifier, their names, and the default actions are
    defined by the POSIX.1-2003 standard, which Linux adheres to. This guarantees
    the portability of the `signals` implementation or support in the applications.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在`<signal.h>`头文件中描述和定义的所有信号都符合POSIX标准。这意味着每个标识符、它们的名称和默认操作都是由POSIX.1-2003标准定义的，Linux遵循这一标准。这保证了应用程序中`signals`实现或支持的可移植性。
- en: See also
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Learning how to trap a signal* recipe
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*学习如何捕获信号*食谱'
- en: The *Learning how to ignore a signal* recipe
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*学习如何忽略信号*食谱'
- en: The *Learning how to send a signal to another process* recipe
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*学习如何向另一个进程发送信号*食谱'
- en: '[Chapter 3](c27d5a31-a4f2-4925-b883-fa244edeb6ae.xhtml), *Dealing with Processes
    and Threads* for a refresh on processes and threads.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第3章](c27d5a31-a4f2-4925-b883-fa244edeb6ae.xhtml)，*处理进程和线程*，以便重新了解进程和线程。'
- en: Learning how to ignore a signal
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习如何忽略信号
- en: There might be cases where we just need to ignore a specific signal. However,
    rest assured, there are few signals that cannot be ignored, for example, `SIGKILL`
    (uncatchable). This recipe will teach you how to ignore a catchable signal.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会有一些情况，我们只需要忽略特定的信号。但请放心，有一些信号是不能被忽略的，例如`SIGKILL`（无法捕获）。这个食谱将教你如何忽略一个可捕获的信号。
- en: How to do it...
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'To ignore a catchable signal, follow these steps:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要忽略一个可捕获的信号，请按照以下步骤：
- en: 'On a shell, open a new source file called `signal_ignore.cpp` and start by
    adding the following code:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在shell上，打开一个名为`signal_ignore.cpp`的新源文件，并开始添加以下代码：
- en: '[PRE2]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In this second program (`signal_uncatchable.cpp`), we want to see that an *uncatchable*
    signal cannot be *ignored*. To do this, we''ll use the `SIGKILL` signal that we''ve
    seen in the *Learning all of the signals and their default actions* recipe, which
    is not catchable (that is, the program cannot ignore it):'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个第二个程序（`signal_uncatchable.cpp`）中，我们想要看到一个*无法捕获*的信号无法被*忽略*。为了做到这一点，我们将使用在*学习所有信号及其默认操作*食谱中看到的`SIGKILL`信号，这是不可捕获的（也就是说，程序无法忽略它）：
- en: '[PRE3]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The next section will explain the details of the preceding two programs.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将解释前两个程序的细节。
- en: How it works...
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '*Step 1* contains the program to ignore the `SIGTERM` signal. We do this by
    calling the `signal();` system call by passing the specific signal as the first
    parameter (`SIGTERM`) and the action to follow as the second parameter, which,
    in this case, is `SIG_IGN`, is to ignore.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤1*包含忽略`SIGTERM`信号的程序。我们通过调用`signal();`系统调用，将特定信号作为第一个参数（`SIGTERM`）传递，并将要执行的操作作为第二个参数，这种情况下是`SIG_IGN`，即忽略。'
- en: '*Step 2* has the same code as *step 1*. We just used the `signal();` method
    passing the `SIGKILL` parameter and `SIG_IGN`. In other words, we asked Linux
    to ignore the `SIGKILL` signal for this process (`signal_uncatchable.cpp` will
    become a process once built and executed). As we learned in the *Learning all
    of the signals and their default actions* recipe, `SIGKILL` is an uncatchable
    signal.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤2*与*步骤1*具有相同的代码。我们只是使用了`signal();`方法传递了`SIGKILL`参数和`SIG_IGN`。换句话说，我们要求Linux忽略此进程的`SIGKILL`信号（一旦构建和执行，`signal_uncatchable.cpp`将成为一个进程）。正如我们在*学习所有信号及其默认操作*食谱中学到的，`SIGKILL`是一个无法捕获的信号。'
- en: 'Let''s build and run the two programs now. What we expect to see is the `SIGTERM` signal
    ignored in the first program and `SIGKILL` signal, which cannot be ignored in
    the second one, respectively. The output of the first program is as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们构建和运行这两个程序。我们期望看到的是第一个程序中忽略的`SIGTERM`信号，以及第二个程序中无法忽略的`SIGKILL`信号。第一个程序的输出如下：
- en: '![](img/9d9e43c4-0a85-492b-ad1d-5bcd9eddc98d.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9d9e43c4-0a85-492b-ad1d-5bcd9eddc98d.png)'
- en: Here, we retrieved the `PID` of the process, using `ps aux`, and sent the `SIGTERM` signal
    by running the command: `kill -15 115` (where `15` represents `SIGKILL`). As you
    can see, the process keeps running by completely ignoring the signal to terminate
    it.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`ps aux`检索了进程的`PID`，并通过运行命令`kill -15 115`发送了`SIGTERM`信号（其中`15`代表`SIGKILL`）。正如你所看到的，该进程通过完全忽略终止信号而继续运行。
- en: 'The second program, `signal_uncatchable.cpp`, shows that even if we specified
    to catch the `SIGKILL` signal, Linux ignored this and killed our process anyway.
    We can see this in the following screenshot:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个程序`signal_uncatchable.cpp`显示，即使我们指定捕获`SIGKILL`信号，Linux也会忽略这一点并且无论如何杀死我们的进程。我们可以在以下截图中看到这一点：
- en: '![](img/2ff0fb88-d0b7-463d-a3b6-c1a69327f748.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ff0fb88-d0b7-463d-a3b6-c1a69327f748.png)'
- en: There's more...
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: To have a list of all the signals supported on a Linux machine, the `kill -l` command
    is of great help and `man signal` contains all the details you need to successfully
    integrate the signal in your program.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要获得Linux机器支持的所有信号的列表，`kill -l`命令非常有帮助，`man signal`包含了您成功将信号集成到程序中所需的所有细节。
- en: See also
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Learning the Linux fundamentals – shell* recipe in [Chapter 1](c3cda38c-220e-4aae-89c6-c381df46daec.xhtml), *Getting
    Started with System Programming*, for a refresh on how to run programs on the
    shell
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第1章](c3cda38c-220e-4aae-89c6-c381df46daec.xhtml)的*学习Linux基础知识- shell*食谱中，了解如何在shell上运行程序
- en: '*Learning how to trap a signal* recipe'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*学习如何捕获信号*食谱'
- en: '*Learning how to send a signal to another process* recipe'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*学习如何向另一个进程发送信号*食谱'
- en: '*Learning all of the signals and their default actions* recipe'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*学习所有信号及其默认操作*食谱'
- en: '[Chapter3](c27d5a31-a4f2-4925-b883-fa244edeb6ae.xhtml)*, Dealing with Processes
    and Threads,* for a refresh on processes and threads'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第3章](c27d5a31-a4f2-4925-b883-fa244edeb6ae.xhtml)*，处理进程和线程*，了解进程和线程的相关知识
- en: Learning how to trap a signal
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习如何捕获信号
- en: This recipe will teach you how to catch (or trap) a signal in a program. There
    might be a need to perform some actions for a specific signal. An example of this
    is when an application receives the signal to terminate (`SIGTERM`) but we are
    required to clean up some used resources before quitting.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱将教你如何在程序中捕获（或捕获）信号。可能需要执行一些特定信号的操作。例如，当应用程序接收到终止信号（`SIGTERM`）时，但我们需要在退出之前清理一些已使用的资源时。
- en: How to do it...
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s write an application where we''ll catch the `SIGTERM` signal, print
    a string, and terminate the application:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写一个应用程序，在其中我们将捕获`SIGTERM`信号，打印一个字符串，并终止应用程序：
- en: 'On a shell, create a new file called `signal_trap.cpp`. We need to include,
    among other headers, `<signal.h>` to be able to handle signals. We also have to
    add the prototype needed to manage the signal we want to trap. In the `main` method
    then, we call the `signal()` system call by passing `SIGTERM` that we want to
    catch and the method used to manage it:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在shell上，创建一个名为`signal_trap.cpp`的新文件。我们需要包括`<signal.h>`等其他头文件，以便能够处理信号。我们还必须添加所需的原型来管理我们想要捕获的信号。然后，在`main`方法中，我们通过传递我们想要捕获的`SIGTERM`和用于管理它的方法来调用`signal()`系统调用：
- en: '[PRE4]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We need to define the `handleSigTerm()` method (which can be named whatever
    we want):'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要定义`handleSigTerm()`方法（可以随意命名）：
- en: '[PRE5]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The next section will describe the program in detail.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将详细描述该程序。
- en: How it works...
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: '*Step 1* essentially defines the `main` method. First, we require the `<signal.h>`
    header. In the definition of the `main` method, the central part is the `signal()`
    system call where we pass the `SIGTERM` signal we want to trap and the method
    we want to get called by Linux. This is an important aspect worth highlighting.
    The `signal()` system call accepts (as a second parameter) a pointer to a function
    that the system developer has to define, as we did. In the kernel, when a software
    interrupt is raised, Linux sends it to the specific process and the method will
    be called (in the form of a callback). The prototype of the `signal()` method
    looks like this:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤1*基本上定义了`main`方法。首先，我们需要`<signal.h>`头文件。在`main`方法的定义中，`signal()`系统调用的核心部分是我们传递的`SIGTERM`信号和我们希望Linux调用的方法。这是一个值得强调的重要方面。`signal()`系统调用接受（作为第二个参数）一个指向系统开发人员必须定义的函数的指针，就像我们所做的那样。在内核中，当引发软件中断时，Linux将其发送到特定进程，并将调用该方法（以回调形式）。`signal()`方法的原型如下：'
- en: '[PRE6]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*Step 2* has the definition of the method that will manage the `SIGTERM` signal
    we want to trap. This method, in its simplicity, shows a couple of interesting
    things. First, this method is a callback invoked from the `signal()` system call.
    Second, we necessarily have to define its prototype as `void (*)(int) `, that
    is, return void and accept an integer in the input (it represents the signal that
    the application actually receives). Anything different from this prototype will
    result in a compilation error.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤2*中有定义将管理我们想要捕获的`SIGTERM`信号的方法。这种方法在其简单性中显示了一些有趣的事情。首先，这个方法是从`signal()`系统调用中调用的回调。其次，我们必须定义其原型为`void
    (*)(int)`，即返回void并接受输入中的整数（表示应用程序实际接收的信号）。与此原型不同的任何内容都将导致编译错误。'
- en: 'Let''s now build and execute the program we''ve developed in the previous section:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在构建并执行我们在上一节中开发的程序：
- en: '![](img/6f6b91f1-1a20-4bfb-b77b-33756494b1f5.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6f6b91f1-1a20-4bfb-b77b-33756494b1f5.png)'
- en: We built and linked the `signal_trap.cpp` program and generated the `a.out` executable.
    We run it; the PID associated with the process is `46`. On the right shell, we
    send the `SIGTERM` signal (with identifier = `15`) to the process with PID `46`.
    As you can see on the standard output (the shell on the left), the process caught
    the signal and called the method we defined `handleSigTerm()`. This method printed
    some logs in the standard output and called the `abort()` system call, which sends
    the `SIGABORT` signal to the running process. As you can see in the *Learning
    all of the signals and their default actions* recipe, the default action of `SIGABORT` is
    to terminate the process (and generate the core dump). You can, of course, play
    with it and terminate the process in another, more suitable, way, depending on
    the requirements you have (for example, `exit()`).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们构建并链接了`signal_trap.cpp`程序，并生成了`a.out`可执行文件。我们运行它；与该进程关联的PID为`46`。在右侧shell上，我们向PID为`46`的进程发送`SIGTERM`信号（带有标识符=`15`）。正如您在标准输出（左侧的shell）上看到的，该进程捕获了信号并调用了我们定义的方法`handleSigTerm()`。这种方法在标准输出中打印了一些日志，并调用了`abort()`系统调用，该系统调用向正在运行的进程发送`SIGABORT`信号。正如您在*学习所有信号及其默认操作*食谱中看到的，`SIGABORT`的默认操作是终止进程（并生成核心转储）。当然，您可以根据您的要求（例如`exit()`）以另一种更合适的方式玩耍并终止进程。
- en: There's more...
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'So, what does happen to signals when a process forks (or executes) another
    one? The following table will help you to understand how to deal with signals
    with a process-child relationship:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，当一个进程分叉（或执行）另一个进程时，信号会发生什么？以下表格将帮助您了解如何处理进程与子进程之间的信号关系：
- en: '| **Signal Behavior** | **Process Fork** | **Process Exec** |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| **信号行为** | **进程分叉** | **进程执行** |'
- en: '| Default | Inherited | Inherited |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| 默认 | 继承 | 继承 |'
- en: '| Ignored | Inherited | Inherited |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| 忽略 | 继承 | 继承 |'
- en: '| Handled | Inherited | Not inherited |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| 处理 | 继承 | 未继承 |'
- en: At this stage, you should not be surprised that, when a process forks another
    process, the child essentially inherits all the behaviors of the parent. When
    a process executes another task (with `exec`), it inherits the **default behavior** and
    the **ignored behavior**, but it does not inherit the handled method that is implemented.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，当一个进程分叉另一个进程时，当一个进程执行另一个任务（使用`exec`）时，它继承了父进程的所有行为。当一个进程执行另一个任务（使用`exec`）时，它继承了**默认行为**和**忽略行为**，但没有继承已实现的处理方法。
- en: See also
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Learning how to ignore a signal* recipe
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*学习如何忽略信号* 配方'
- en: The *Learning all of the signals and their default actions* recipe
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*学习所有信号及其默认操作* 配方'
- en: The *Learning how to send a signal to another process* recipe
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*学习如何向另一个进程发送信号* 配方'
- en: '[Chapter 3](c27d5a31-a4f2-4925-b883-fa244edeb6ae.xhtml), *Dealing with Processes
    and Threads,* for a refresh on processes and threads'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第3章](c27d5a31-a4f2-4925-b883-fa244edeb6ae.xhtml)，*处理进程和线程*，了解进程和线程的相关知识'
- en: Learning how to send a signal to another process
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习如何向另一个进程发送信号
- en: There could be scenarios where a process needs to send a signal to other processes.
    This recipe will teach you how to achieve that using a hands-on approach.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 可能存在情况，一个进程需要向其他进程发送信号。这个配方将教你如何使用实际操作来实现这一点。
- en: How to do it...
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We''ll write a program that will send the `SIGTERM` signal to a running process.
    We''ll see the process terminating as expected. On a shell, open a new source
    file called `signal_send.cpp`. We''ll be using the system call, `kill()`, which
    sends a signal `sig` to a process specified by `pid`. The program accepts an input
    parameter, which is `pid` of the program to terminate:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将编写一个程序，将`SIGTERM`信号发送给正在运行的进程。我们将看到进程按预期终止。在shell上，打开一个名为`signal_send.cpp`的新源文件。我们将使用系统调用`kill()`，它向由`pid`指定的进程发送信号`sig`。该程序接受一个输入参数，即要终止的程序的`pid`：
- en: '[PRE7]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We'll be using the `signal_trap.cpp` program developed in the *Learning how
    to trap a signal* recipe as the process to terminate. The next section will go
    deep in the detail of the code seen here.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用在*学习如何捕获信号* 配方中开发的`signal_trap.cpp`程序作为要终止的进程。下一节将深入介绍此处所见代码的细节。
- en: How it works...
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'In order to see the correct behavior, we need to run a process we intend to
    terminate. We''ll run the `signal_trap.cpp` program. Let''s build and run the `signal_send.cpp`
    program as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 为了看到正确的行为，我们需要运行一个我们打算终止的进程。我们将运行`signal_trap.cpp`程序。让我们构建并运行`signal_send.cpp`程序，如下所示：
- en: '![](img/90e6729d-3779-4be7-a592-193d458d00a3.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/90e6729d-3779-4be7-a592-193d458d00a3.png)'
- en: 'Here, we performed a couple of things, as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们执行了一些事情，如下所示：
- en: We've built the `signal_trap.cpp` program and generated the `a.out` executable.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经构建了`signal_trap.cpp`程序并生成了`a.out`可执行文件。
- en: Run `./a.out`.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`./a.out`。
- en: On the shell on the left, we took `pid` of the `a.out` process, which was `133`.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧的shell上，我们获取了`a.out`进程的`pid`，为`133`。
- en: We've built the `signal_send.cpp` program to the `terminate` executable.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经构建了`signal_send.cpp`程序到`terminate`可执行文件。
- en: 'We run `./terminate` with the `pid` variable of the process `a.out` we wanted
    to terminate: `./terminate 133`.'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用`./terminate 133`运行`./terminate`，其中`pid`变量是我们想要终止的`a.out`进程的`pid`。
- en: On the shell on the right, we could see the `a.out` process terminating correctly.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右侧的shell上，我们可以看到`a.out`进程正确终止。
- en: '*Step 1* has a couple of things we have to explain. First, we parsed the `pid` variable from
    the command-line parameter, converted to an integer, and then saved it into the
    `pid` variable. Second, we called the `kill()` system call by passing the `pid`
    variable and the `SIGTERM` signal we have to send to the running process.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤1*有一些事情需要解释。首先，我们从命令行参数中解析了`pid`变量，将其转换为整数，然后将其保存到`pid`变量中。其次，我们通过传递`pid`变量和我们要发送给运行中进程的`SIGTERM`信号来调用`kill()`系统调用。'
- en: '`man 2 kill`: `int kill(pid_t pid, int sig);`'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`man 2 kill`: `int kill(pid_t pid, int sig);`'
- en: The `kill()` function sends the signal specified by `sig` to `pid`.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`kill()`函数将指定的信号`sig`发送给`pid`。'
- en: For System V compatibility, if the PID is negative (but not `-1`), the signal
    is sent to all of the processes whose process group IDs are equal to the absolute
    value of the process number. However, if the `pid` is 0, `sig` is sent to every
    process in the **invoking process's** process group.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 为了与System V兼容，如果PID为负数（但不是`-1`），则信号将发送到其进程组ID等于进程编号绝对值的所有进程。但是，如果`pid`为0，则`sig`将发送到**调用进程**的进程组中的每个进程。
- en: There's more...
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In order to send a signal to another process (or processes), the sending process
    must have appropriate privileges. Put simply, a process can send signals to another
    process if the current user owns it.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 为了向另一个进程（或进程）发送信号，发送进程必须具有适当的特权。简而言之，如果当前用户拥有它，进程可以向另一个进程发送信号。
- en: 'There might be cases where a process has to send a signal to itself. In this
    case, the system call, `raise()`, does the job:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 可能存在情况，一个进程必须向自身发送信号。在这种情况下，系统调用`raise()`可以完成这项工作：
- en: '[PRE8]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Note one final, yet very important, thing: the handler code that manages the
    signal raised must be reentrant. The rationale behind that is that the process
    might be in the middle of any processing, so the handler must be very careful
    in modifying any static or global data. A function is **reentrant** if the data
    manipulated is allocated on the stack or passed in the input.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个非常重要的事情：处理引发的信号的处理程序代码必须是可重入的。其背后的原理是进程可能处于任何处理过程中，因此处理程序在修改任何静态或全局数据时必须非常小心。如果操作的数据分配在堆栈上或者作为输入传递，则函数是**可重入**的。
- en: See also
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Learning how to trap a signal* recipe
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*学习如何捕获信号*食谱'
- en: The *Learning how to ignore a signal* recipe
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*学习如何忽略信号*食谱'
- en: The *Learning all of the signals and their default actions* recipe
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*学习所有信号及其默认操作*食谱'
