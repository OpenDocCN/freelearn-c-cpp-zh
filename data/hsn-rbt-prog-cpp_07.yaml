- en: Controlling a Robot Using a Laptop
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用笔记本电脑控制机器人
- en: Controlling a robot with a computer is a fascinating thing. The computer becomes
    a remote controller, and the robot moves according to the commands provided by
    the keyboard. In this chapter, we will look at two techniques for controlling
    a robot wirelessly using your laptop.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使用计算机控制机器人是一件迷人的事情。计算机成为遥控器，机器人根据键盘提供的命令移动。在本章中，我们将介绍使用笔记本电脑无线控制机器人的两种技术。
- en: 'We will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: Installing the `ncurses` library
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装`ncurses`库
- en: Controlling LEDs and a buzzer using `ncurses`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`ncurses`控制LED和蜂鸣器
- en: Controlling a rover (RPi robot) using a laptop keyboard
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用笔记本电脑键盘控制一辆漫游车（RPi机器人）
- en: Installing and setting up QT5
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和设置QT5
- en: Controlling LEDs with GUI buttons
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用GUI按钮控制LED
- en: Controlling a rover using a laptop with QT5
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用QT5在笔记本电脑上控制漫游车
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The main hardware components that you need for this project are as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要此项目的主要硬件组件如下：
- en: Two LEDs
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个LED
- en: One buzzer
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个蜂鸣器
- en: A RPi robot
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个RPi机器人
- en: The code files for this chapter can be downloaded from [https://github.com/PacktPublishing/Hands-On-Robotics-Programming-with-Cpp/tree/master/Chapter05](https://github.com/PacktPublishing/Hands-On-Robotics-Programming-with-Cpp/tree/master/Chapter05)[.](https://github.com/PacktPublishing/Hands-On-Robotics-Programming-with-Cpp/tree/master/Chapter05)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以从[https://github.com/PacktPublishing/Hands-On-Robotics-Programming-with-Cpp/tree/master/Chapter05](https://github.com/PacktPublishing/Hands-On-Robotics-Programming-with-Cpp/tree/master/Chapter05)下载。
- en: Installing the ncurses library
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装`ncurses`库
- en: '**New curses** (**ncurses**) is a programming library that allows developers
    to create text-based user interfaces. It is generally used for creating GUI-based
    applications or software. One of the key features of the `ncurses` library is
    that we can use it for taking inputs from keyboard keys, and controlling hardware
    devices on the output side. We will use the `ncurses` library to write programs
    to detect keys to control our robot accordingly. For example, if we press the
    up arrow, we want our robot to move forward. If we press the left arrow, we want
    our robot to take a left turn.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**New curses**（**ncurses**）是一个编程库，允许开发人员创建基于文本的用户界面。它通常用于创建基于GUI的应用程序或软件。`ncurses`库的一个关键特性是我们可以用它来从键盘键获取输入，并在输出端控制硬件设备。我们将使用`ncurses`库编写程序来检测键以相应地控制我们的机器人。例如，如果我们按上箭头，我们希望我们的机器人向前移动。如果我们按左箭头，我们希望我们的机器人向左转。'
- en: 'To install the `ncurses` library, we first have to open the command window.
    To install `ncurses`, type in the following command and press *Enter*:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装`ncurses`库，我们首先必须打开命令窗口。要安装`ncurses`，请输入以下命令并按*Enter*：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Next, you will be asked whether you want to install the library. Type *Y* (for
    yes) and press *Enter*. It will take around three to five minutes for the `ncurses`
    library to download and install inside your RPi.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将被问及是否要安装该库。输入*Y*（表示是）并按*Enter*。`ncurses`库将需要大约三到五分钟的时间下载并安装到您的RPi中。
- en: Make sure that your RPi is near the Wi-Fi router, so that the library files
    can download quickly.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您的RPi靠近Wi-Fi路由器，以便库文件可以快速下载。
- en: ncurses functions
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ncurses函数
- en: 'After installing the `ncurses` library, let''s explore some of the important
    functions that are a part of this library:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 安装`ncurses`库后，让我们探索一些属于该库的重要函数：
- en: '`initscr()`: The `initscr()` function initializes the screen. It sets up the
    memory, and clears the command window screen.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initscr()`: `initscr()`函数初始化屏幕。它设置内存，并清除命令窗口屏幕。'
- en: '`refresh()`: The refresh function refreshes the screen.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`refresh()`: 刷新函数刷新屏幕。'
- en: '`getch()`: This function will detect the user''s touch, and will return the
    ASCII number for that particular key. The ASCII number is then stored in an integer
    variable, which is later used for comparison purposes.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getch()`: 此函数将检测用户的触摸，并返回该特定键的ASCII编号。然后将ASCII编号存储在整数变量中，以供后续比较使用。'
- en: '`printw()`: This function is used to print string values inside the command
    window.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`printw()`: 此函数用于在命令窗口中打印字符串值。'
- en: '`keypad()`: If the keypad function is set to true, we can also take the user''s
    input from the function keys, as well as the arrow keys.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`keypad()`: 如果键盘函数设置为true，则我们还可以从功能键和箭头键中获取用户的输入。'
- en: '`break`: This function is used to exit the program if the program is running
    in a loop.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`break`: 如果程序在循环中运行，则使用此函数退出程序。'
- en: '`endwin()`: The `endwin()` function frees the memory, and ends `ncurses`.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`endwin()`: `endwin()`函数释放内存，并结束`ncurses`。'
- en: 'The entire `ncurses` program must be written between the `initscr()` and `endwin()`
    functions:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 整个`ncurses`程序必须在`initscr()`和`endwin()`函数之间编写：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Writing a HelloWorld program with ncurses
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`ncurses`编写HelloWorld程序
- en: 'Let''s now write a simple `ncurses` program for printing `Hello World`. I have
    named this program `HelloWorld.cpp`. The `HelloWorld.cpp` program can be downloaded
    from the `Chapter05` folder of the GitHub repository:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们编写一个简单的`ncurses`程序来打印`Hello World`。我将这个程序命名为`HelloWorld.cpp`。`HelloWorld.cpp`程序可以从GitHub存储库的`Chapter05`文件夹中下载：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The program for compiling and running a C++ program using the `ncurses` library
    is different from other programs. First, we need to understand the program. After
    that, we will learn how to compile and run it.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ncurses`库编译和运行C++程序的程序与其他程序不同。首先，我们需要理解程序。之后，我们将学习如何编译和运行它。
- en: 'In the preceding code snippet, we first declare the `ncurses` library and the
    `wiringPi` library. Next, we carry out the following steps:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码片段中，我们首先声明了`ncurses`库和`wiringPi`库。接下来，我们执行以下步骤：
- en: Inside the `main` function, we declare the `initscr()` function to initialize
    and clear the screen.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main`函数中，我们声明`initscr()`函数来初始化和清除屏幕。
- en: Next, when the user presses a key, the `getch` function will be called, and
    the ASCII number of that key will be stored in the `keypressed` variable, which
    is of the `int` type.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，当用户按下一个键时，将调用`getch`函数，并将该键的ASCII数字存储在`keypressed`变量中，该变量是`int`类型。
- en: After that, using the `for` loop, we check whether the key that is pressed is
    `'h'` or (`||`) `'H'`. Make sure that you put the letter H in single quotes. When
    we put the letters in single quotes, we get the ASCII number of that character. `'h'`,
    for example, returns the ASCII number **104**, while `'H'` returns the ASCII number
    **72**. Instead of `'h'` or `'H'`, you can also write the ASCII numbers of the
    *h* and *H* key presses, which are 104 and 72 respectively. This would look as
    follows: `if(keypressed == 72 || keypressed == 104)`. The numbers should not be
    inside quotes.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，使用`for`循环，我们检查按下的键是否为`'h'`或(`||`)`'H'`。确保将字母H放在单引号中。当我们将字母放在单引号中时，我们会得到该字符的ASCII数字。例如，`'h'`返回ASCII数字**104**，而`'H'`返回ASCII数字**72**。您也可以写入*h*和*H*键按下的ASCII数字，分别为104和72。这将如下所示：`if(keypressed
    == 72 || keypressed == 104)`。数字不应该在引号内。
- en: 'Then, if you press the `''h''` or `''H''` key, `Hello World` will be printed
    inside the command window:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，如果您按下`'h'`或`'H'`键，`Hello World`将在命令窗口内打印出来：
- en: '![](img/a4913f2b-b2a2-4fcf-ab0c-8701cebc49c6.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a4913f2b-b2a2-4fcf-ab0c-8701cebc49c6.png)'
- en: If you want `Hello World` to be printed on the next line, you can simply put
    `\n` before the `Hello World` text. This would look as follows: `printw("\nHello
    World")`.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果要在下一行上打印`Hello World`，您可以在`Hello World`文本之前简单地放置`\n`。这将如下所示：`printw("\nHello
    World")`。
- en: After this, when you press a key, the `getch()` function below the `if` condition
    will be called, and the program will terminate.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，当您按下一个键时，在`if`条件下方的`getch()`函数将被调用，程序将终止。
- en: Compiling and running the program
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编译和运行程序
- en: 'For compiling and running the `HelloWorld.cpp` program, open the Terminal window.
    Inside the Terminal window, type `ls` and press *Enter.* You will now see a list
    of all the folder names present inside your RPi:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要编译和运行`HelloWorld.cpp`程序，请打开终端窗口。在终端窗口内，输入`ls`并按*Enter*。现在您将看到您的RPi内所有文件夹名称的列表：
- en: '![](img/40287ace-cd8f-4e7c-9cfa-89865bee5562.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/40287ace-cd8f-4e7c-9cfa-89865bee5562.png)'
- en: The `HelloWorld.cpp` is stored inside the `Cprograms` folder. To open the `Cprograms`
    folders, type `cd` (change directory) followed by the folder name, and press *Enter:*
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`HelloWorld.cpp`存储在`Cprograms`文件夹中。要打开`Cprograms`文件夹，输入`cd`（更改目录）后跟文件夹名称，然后按*Enter*：'
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The output of the previous command can be seen as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 可以看到上一个命令的输出如下：
- en: '![](img/f826375f-c450-4ede-ac0b-fe923c2b7265.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f826375f-c450-4ede-ac0b-fe923c2b7265.png)'
- en: 'Next, to view the content of the `Cprograms` folder, we will type `ls`again:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，要查看`Cprograms`文件夹的内容，我们将再次输入`ls`：
- en: '![](img/4482051d-cae1-4d55-8890-f2aefb226734.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4482051d-cae1-4d55-8890-f2aefb226734.png)'
- en: Inside the `Cprograms` folder, there is a `Data` folder and a couple of `.cpp`
    programs. The program in which we're interested is the `HelloWorld.cpp` program,
    as we want to compile and build this program. To do this, type the following command
    and press *Enter:*
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Cprograms`文件夹中，有一个`Data`文件夹和一些`.cpp`程序。我们感兴趣的程序是`HelloWorld.cpp`程序，因为我们想要编译和构建这个程序。要执行此操作，请输入以下命令并按*Enter*：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following screenshot shows that the compilation was done successfully:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示编译成功：
- en: '![](img/44a8ec5e-8b76-4f6a-bc71-b412c52c47c7.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/44a8ec5e-8b76-4f6a-bc71-b412c52c47c7.png)'
- en: 'For compiling any code that uses the `ncurses` library, the code is as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何使用`ncurses`库的代码进行编译，代码如下：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After this, type `./HelloWorld` and press *Enter* to run the code:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，输入`./HelloWorld`并按*Enter*运行代码：
- en: '![](img/9daaa933-e6d0-428d-be62-e2ad58585fec.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9daaa933-e6d0-428d-be62-e2ad58585fec.png)'
- en: 'After you press *Enter,* the entire Terminal window will be cleared:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 按下*Enter*后，整个终端窗口将被清除：
- en: '![](img/26346c31-ea94-4601-ae18-efe993190bf3.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/26346c31-ea94-4601-ae18-efe993190bf3.png)'
- en: 'Next, press the *h* or *H* key, and the `Hello World` text will be printed
    in the Terminal window. To exit the Terminal window, press any key:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，按下*h*或*H*键，`Hello World`文本将在终端窗口中打印出来。要退出终端窗口，请按任意键：
- en: '![](img/28a3046e-ebec-463d-bbb9-1ec982952e54.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/28a3046e-ebec-463d-bbb9-1ec982952e54.png)'
- en: Now that we've created a simple `HelloWorld` program, and tested that the `ncurses`
    libraries work inside the Terminal window, let's write a program to control the
    LEDs and the buzzer.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了一个简单的`HelloWorld`程序，并测试了`ncurses`库在终端窗口内的工作，让我们编写一个程序来控制LED和蜂鸣器。
- en: Controlling LEDs and a buzzer using ncurses
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ncurses控制LED和蜂鸣器
- en: After compiling and testing your first `ncurses` program, let's write a program
    to control hardware such as LEDs and a buzzer by providing input from the keyboard.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在编译和测试您的第一个`ncurses`程序之后，让我们编写一个程序，通过从键盘提供输入来控制LED和蜂鸣器。
- en: Wiring connections
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接线连接
- en: 'For this particular example, we will need two LEDs and one buzzer. The wiring
    connections of the LEDs and the buzzer to the RPi are as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个特定的例子，我们将需要两个LED和一个蜂鸣器。LED和蜂鸣器与RPi的接线连接如下：
- en: '![](img/2718087d-e112-481b-8b8f-daff5a4c96ea.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2718087d-e112-481b-8b8f-daff5a4c96ea.png)'
- en: 'We can see the following from the connection diagram:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从连接图中看到以下内容：
- en: The positive (anode) pin of the first LED is connected to the wiringPi pin number
    15, while the negative (cathode) pin is connected to the physical pin number 6
    (the ground pin).
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个LED的正极（阳极）引脚连接到wiringPi引脚号15，负极（阴极）引脚连接到物理引脚号6（地引脚）。
- en: The positive pin of the second LED is connected to the wiringPi pin number 4,
    while the negative pin is connected to the physical pin number 14 (the ground
    pin).
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个LED的正极引脚连接到wiringPi引脚号4，负极引脚连接到物理引脚号14（地引脚）。
- en: One pin of the buzzer is connected to the wiringPi pin number 27 and the other
    pin is connected to the physical pin number 34 (the ground pin).
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 蜂鸣器的一根引脚连接到wiringPi引脚号27，另一根引脚连接到物理引脚号34（地引脚）。
- en: Writing the LEDBuzzer.cpp program
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写LEDBuzzer.cpp程序
- en: 'The name of our program is `LEDBuzzer.cpp`. The `LEDBuzzer.cpp` program can
    be downloaded from the `Chapter05` folder of the GitHub repository. The `LEDBuzzer`
    program is as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的程序名为`LEDBuzzer.cpp`。`LEDBuzzer.cpp`程序可以从GitHub存储库的`Chapter05`文件夹中下载。`LEDBuzzer`程序如下：
- en: '[PRE6]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After writing the program, let''s look at how it works:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 编写程序后，让我们看看它是如何工作的：
- en: In the preceding program, we start by declaring the `ncurses` and `wiringPi`
    libraries, along with the `stdio` C library
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上述程序中，我们首先声明了`ncurses`和`wiringPi`库，以及`stdio` C库
- en: Next, pin numbers `15`, `4`, and `7` are declared as output pins
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，引脚编号`15`，`4`和`7`被声明为输出引脚
- en: Now, when the *L* or *l* keys are pressed, LED 1 will turn `HIGH` and `LOW`
    for one second each
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，当按下*L*或*l*键时，LED 1将分别在一秒钟内变为`HIGH`和`LOW`
- en: Similarly, when the *E* or *e* keys are pressed, LED 2 will turn `HIGH` and
    `LOW` for one second each
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样，当按下*E*或*e*键时，LED 2将分别在一秒钟内变为`HIGH`和`LOW`
- en: If *D* or *d* keys are pressed, LED 1 will turn `HIGH` and `LOW` for one second
    each, and then LED 2 will turn `HIGH` and `LOW` for one second each
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果按下*D*或*d*键，LED 1将分别在一秒钟内变为`HIGH`和`LOW`，然后LED 2将分别在一秒钟内变为`HIGH`和`LOW`
- en: If the *b* or *B* keys are pressed, the buzzer will beep two times
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果按下*b*或*B*键，蜂鸣器将响两次
- en: Finally, if you press the *x* or *X* key, the C++ program will be terminated
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，如果按下*x*或*X*键，C++程序将被终止
- en: 'While compiling the code, you must also include the name of the `wiringPi`
    library, which is `lwiringPi`. The final compilation command looks as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在编译代码时，您还必须包括`wiringPi`库的名称，即`lwiringPi`。最终的编译命令如下：
- en: '[PRE7]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](img/9f9c0804-0e67-4088-a696-2c9deff72ec4.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9f9c0804-0e67-4088-a696-2c9deff72ec4.png)'
- en: 'After compiling the code, type `./LEDBuzzer`to run it:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 编译代码后，键入`./LEDBuzzer`来运行它：
- en: '![](img/94b1a78f-987e-495a-a513-ec44922a540a.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/94b1a78f-987e-495a-a513-ec44922a540a.png)'
- en: Next, press the *L*, *E*, *D*, and *B* keys, and the LEDs and the buzzer will
    turn on and off accordingly.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，按下*L*，*E*，*D*和*B*键，LED和蜂鸣器将相应地打开和关闭。
- en: Controlling a rover using a laptop keyboard
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用笔记本键盘控制一辆漫游车
- en: 'After controlling the LEDs and the buzzer, let''s write a program for controlling
    our rover (the robot) from our laptop:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制LED和蜂鸣器之后，让我们编写一个程序，从笔记本控制我们的漫游车（机器人）：
- en: '![](img/840ae9c4-c3ec-4a37-82b9-34c8a7b78ec7.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/840ae9c4-c3ec-4a37-82b9-34c8a7b78ec7.png)'
- en: 'I have kept the wiring connections the same as they were in [Chapter 3](085b19da-5821-4c63-9a7a-3e63829059f5.xhtml),
    *Programming the Robot*:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我保持了与[第3章](085b19da-5821-4c63-9a7a-3e63829059f5.xhtml)中相同的接线连接，*编程机器人*：
- en: The wiringPi pin numbers 0 and 2 are connected to the **IN1** and **IN2** pins
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: wiringPi引脚编号0和2连接到电机驱动器的**IN1**和**IN2**引脚
- en: The wiringPi pin numbers 3 and 4 are connected to the **IN3** and **IN4** pins
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: wiringPi引脚编号3和4连接到**IN3**和**IN4**引脚
- en: The left motor pins are connected to the **OUT1** and **OUT2** pins of the motor
    driver
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 左电机引脚连接到电机驱动器的**OUT1**和**OUT2**引脚
- en: The right motor pins are connected to the **OUT3** and **OUT4** pins of the
    motor driver
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 右电机引脚连接到电机驱动器的**OUT3**和**OUT4**引脚
- en: Pin 6 of the Raspberry Pi is connected to the ground socket of the motor driver
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 树莓派的引脚6连接到电机驱动器的地线插座
- en: Building a laptop-controlled rover program
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建一个由笔记本控制的漫游车程序
- en: 'If you have understood the previous two programs, by now, you might have figured
    out the code for our laptop-controlled rover. In this program, we will move the
    robot in forward, backward, left, and right directions using the up, down, left,
    and right arrow keys, as well as the *A*, *S*, *X*, *W*, and *D* keys. In order
    to recognize the inputs from the arrow keys, we will need to include the `keypad()`
    function inside our program. The `Laptop_Controlled_Rover.cpp` program can be
    download from the `Chapter05` folder of the `GitHub` repository:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经理解了前两个程序，那么现在您可能已经找到了我们笔记本控制的漫游车代码。在这个程序中，我们将使用上、下、左和右箭头键以及*A*、*S*、*X*、*W*和*D*键将机器人向前、向后、向左和向右移动。为了识别来自箭头键的输入，我们需要在程序中包含`keypad()`函数。`Laptop_Controlled_Rover.cpp`程序可以从`GitHub`存储库的`Chapter05`文件夹中下载：
- en: '[PRE8]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The preceding program can be explained as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 上述程序可以解释如下：
- en: In the preceding program, if you press the up arrow key, this will be recognized
    by the `KEY_UP` code inside the first `if` condition. If the condition is `TRUE`,
    the robot will move forward, and the word `FORWARD` will be printed in the Terminal.
    Similarly, the robot will also move forward if you press the *W* or *w* keys.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上述程序中，如果按下上箭头键，这将被`if`条件内的`KEY_UP`代码识别。如果条件为`TRUE`，机器人将向前移动，并且终端中将打印`FORWARD`。类似地，如果按下*W*或*w*键，机器人也将向前移动。
- en: If you press the down arrow key (`KEY_DOWN`) or the *X* or *x* keys, the robot
    will move backward, and the word `BACKWARD` will be printed in the Terminal.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果按下下箭头键（`KEY_DOWN`）或*X*或*x*键，机器人将向后移动，并且终端中将打印`BACKWARD`。
- en: If you press the left arrow key (`KEY_LEFT`) or the *A* or *a* keys, the robot
    will turn left, and the words `LEFT TURN` will be printed in the Terminal.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果按下左箭头键（`KEY_LEFT`）或*A*或*a*键，机器人将向左转，终端中将打印`LEFT TURN`。
- en: If you press the right arrow key (`KEY_RIGHT`) or the *D* or *d* keys, the robot
    will turn right, and the words `RIGHT TURN` will be printed in the Terminal.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果按下右箭头键（`KEY_RIGHT`）或*D*或*d*键，机器人将向右转，终端中将打印`RIGHT TURN`。
- en: Finally, if you press the *S* or *s* keys, the robot will stop, and the word
    `STOP` will be printed in the Terminal.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，如果按下*S*或*s*键，机器人将停止，并且终端中将打印`STOP`。
- en: To terminate the code, we can press the *E* or *e* keys. Since we haven't provided
    any time delays, the robot will keep moving indefinitely, unless you stop the
    robot using the *S* or *s* keys.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要终止代码，我们可以按下*E*或*e*键。由于我们没有提供任何时间延迟，机器人将无限期地保持移动，除非您使用*S*或*s*键停止机器人。
- en: When testing the code, connect the Raspberry Pi to a power bank so that your
    robot is completely wireless, and it can move freely.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试代码时，将树莓派连接到移动电源，这样你的机器人就完全无线，可以自由移动。
- en: Tracing a square path
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 追踪一个正方形路径
- en: 'After moving the robot in different directions, let''s make the rover trace
    a square path. To do this, our robot will move as follows: forward -> right turn
    -> forward -> right turn -> forward -> right turn -> forward -> stop:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在将机器人移动到不同方向后，让我们让机器人追踪一个正方形路径。为此，我们的机器人将按以下方式移动：向前->右转->向前->右转->向前->右转->向前->停止：
- en: '![](img/957bbde9-fd66-4935-945e-48cfa850d3a7.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/957bbde9-fd66-4935-945e-48cfa850d3a7.png)'
- en: 'Inside the `LaptopControlRover` program, we will create another `if` condition.
    Inside this `if` condition, we will write a program to make the robot trace a
    square path. The `if` condition will look as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在`LaptopControlRover`程序中，我们将创建另一个`if`条件。在这个`if`条件内，我们将编写一个程序来使机器人追踪一个正方形路径。`if`条件将如下所示：
- en: '[PRE9]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: To trace the square path, the robot will move forward four times. It will take
    right turns three times, and, finally, it will stop. Outside the `main` function,
    we will need to create `forward()`, `rightturn()`, and `stop()` functions so that,
    instead of writing `digitalWrite` code multiple times inside the main function,
    we can simply call the necessary function.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 为了追踪正方形路径，机器人将向前移动四次。它将右转三次，最后停下来。在`main`函数之外，我们需要创建`forward()`，`rightturn()`和`stop()`函数，这样，我们可以简单地调用必要的函数，而不是在主函数中多次编写`digitalWrite`代码。
- en: '| **Forward condition** | **Right turn** | **Stop** |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| **向前条件** | **右转** | **停止** |'
- en: '|'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE10]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '|'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE11]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '|'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE12]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '|'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: This is how we can control the robot using a laptop, with the help of the keyboard
    keys. Next, let's take a look at the second technique, in which we will create
    GUI buttons using QT5\. When these buttons are pressed, the robot will move in
    different directions.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们如何使用笔记本电脑控制机器人，借助键盘按键的帮助。接下来，让我们看看第二种技术，我们将使用QT5创建GUI按钮。当按下这些按钮时，机器人将朝不同的方向移动。
- en: Installing and setting up QT5
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和设置QT5
- en: 'QT is a cross-platform application framework generally used for embedded graphical
    user interfaces. The latest version of QT is 5, so it is also referred to as QT5\.
    To install the QT5 software inside our RPi, open the Terminal window and type
    in the following command:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: QT是一个跨平台应用程序框架，通常用于嵌入式图形用户界面。QT的最新版本是5，因此也被称为QT5。要在我们的RPi内安装QT5软件，打开终端窗口并输入以下命令：
- en: '[PRE13]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output of the preceding command is shown in the following screenshot:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出如下截图所示：
- en: '![](img/ae4420cd-ba5f-4ff8-bf3e-641efe8b43e6.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae4420cd-ba5f-4ff8-bf3e-641efe8b43e6.png)'
- en: 'This command will download the necessary `qt5` files that run in the backend.
    Next, for downloading and installing the QT5 IDE, type in the following command:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将下载在后台运行的必要的`qt5`文件。接下来，要下载和安装QT5 IDE，输入以下命令：
- en: '[PRE14]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![](img/b0bb610a-68fa-40d3-b57f-c34c0a757f8e.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b0bb610a-68fa-40d3-b57f-c34c0a757f8e.png)'
- en: 'The installation of QT5 IDE will take around 10 to 15 minutes depending on
    your internet speed. If you face any problems while installing QT5, try updating
    and upgrading your RPi. To do this, type the following commands in your Terminal
    window:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: QT5 IDE的安装将需要大约10到15分钟，具体取决于您的互联网速度。如果在安装QT5时遇到任何问题，请尝试更新和升级您的RPi。要做到这一点，请在终端窗口中输入以下命令：
- en: '[PRE15]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Setting up QT5
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置QT5
- en: 'Before we write any programs inside QT5, we first need to set it up so that
    it can run C++ programs. To open QT5, click on the raspberry icon, go to Programming, then
    select the Qt Creator:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在QT5中编写任何程序之前，我们首先需要设置它，以便它可以运行C++程序。要打开QT5，点击树莓图标，转到“编程”，然后选择“Qt Creator”：
- en: '![](img/65b660f8-1756-4f5d-8626-ce083d488dbb.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/65b660f8-1756-4f5d-8626-ce083d488dbb.png)'
- en: 'QT5 runs a bit slower in RPi, so it will take some time for the IDE to open.
    Click on Tools and then select Options...:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: QT5在RPi上运行速度较慢，因此打开IDE需要一些时间。点击工具，然后选择“选项...”：
- en: '![](img/65e1375e-cead-40ae-83de-b2450a4ad34f.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/65e1375e-cead-40ae-83de-b2450a4ad34f.png)'
- en: 'Inside Options..., click on Devices and make sure the Type is set to Desktop.
    The name should be `Local PC`, which refers to the RPi:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在“选项...”中，点击设备，确保类型设置为桌面。名称应为“本地PC”，这是指RPi：
- en: '![](img/fef1ed68-6b3a-486e-a335-2d9516ff0eb0.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fef1ed68-6b3a-486e-a335-2d9516ff0eb0.png)'
- en: 'After that, click on the Build & Run option. Next, select the Kits tab and
    click on the Desktop (default) option:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，点击“构建和运行”选项。接下来，选择“工具包”选项卡，点击“桌面”（默认）选项：
- en: '![](img/02292176-eb69-4d2e-ab2b-9d2d2198a22d.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/02292176-eb69-4d2e-ab2b-9d2d2198a22d.png)'
- en: 'After selecting the Build & Run option, there are a couple of modifications
    that we have to make:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 选择“构建和运行”选项后，我们需要进行一些修改：
- en: '![](img/13a94678-1c8e-46f0-807c-96777225ad11.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/13a94678-1c8e-46f0-807c-96777225ad11.png)'
- en: 'Let''s see the modifications step by step:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步看修改：
- en: Keep the Name as `Desktop`.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持名称为“桌面”。
- en: Set the name of the filesystem to `RPi`.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件系统的名称设置为“RPi”。
- en: In Device type, select the Desktop option.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备类型中，选择桌面选项。
- en: 'The Sysroot (system root) will be set to `/home/pi` by default, which means
    that, when we create a new QT5 application, it will be created inside the `pi`
    folder. Now, instead of creating our QT projects in the `pi` folder, we will create
    a new folder inside the `pi` folder called `QTPrograms`. To change the folder
    directory, click on the Browse button. After that, click on the folder option.
    Call this folder `QTPrograms`, or any other name that you want. Select the `QTPrograms`
    folder and select the Choose button:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 系统根（系统根）默认设置为“/home/pi”，这意味着当我们创建新的QT5应用程序时，它将被创建在“pi”文件夹内。现在，我们将在“pi”文件夹内创建一个名为“QTPrograms”的新文件夹，而不是在“pi”文件夹中创建我们的QT项目。要更改文件夹目录，点击“浏览”按钮。之后，点击文件夹选项。将此文件夹命名为“QTPrograms”，或者您想要的任何其他名称。选择“QTPrograms”文件夹，然后选择“选择”按钮：
- en: '![](img/51cac37f-956e-4767-a91a-43c4b4af7c14.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/51cac37f-956e-4767-a91a-43c4b4af7c14.png)'
- en: 'Next, we have to set the Compilers to GCC. To do this, click on the Compilers tab.
    Inside this, click on the Add drop-down button. Go to GCC and select the C++option:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们必须将编译器设置为GCC。要做到这一点，点击编译器选项卡。在里面，点击“添加”下拉按钮。转到GCC并选择C++选项：
- en: '![](img/dd8bb18d-6801-416c-83b9-8403c1d48d81.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dd8bb18d-6801-416c-83b9-8403c1d48d81.png)'
- en: 'You will now see the GCC compilation option below the C++ option:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在C++选项下，您将看到GCC编译选项：
- en: '![](img/f8f1d059-82f7-4c5e-b53a-ea0bb10c1fad.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f8f1d059-82f7-4c5e-b53a-ea0bb10c1fad.png)'
- en: 'After this, click on the Apply button to apply the changes and then click on
    the OK button. Next, click on Tools again and open Options. Inside the Build and
    run option, select the Kits tab and, again, select the Desktop option. This time,
    next to the C++ option, you will see a drop-down option. Click on this, and select
    the GCC compiler:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，点击Apply按钮应用更改，然后点击OK按钮。接下来，再次点击Tools，打开Options。在Build and run选项内，选择Kits选项卡，再次选择Desktop选项。这次，在C++选项旁边，您将看到一个下拉选项。点击这个选项，选择GCC编译器：
- en: '![](img/18bf2737-2fa8-42f4-a46f-604d5c0249fc.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](img/18bf2737-2fa8-42f4-a46f-604d5c0249fc.png)'
- en: Next, check the Debugger option. It should be set to System GDB at /usr/bin/gdb.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，检查调试器选项。它应该设置为位于/usr/bin/gdb的System GDB。
- en: Finally, check the QT5 version. Currently, I'm using the latest version of QT,
    which is 5.7.1\. By the time you come across this chapter, the latest version
    is likely to have been updated.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，检查QT5版本。目前，我正在使用最新版本的QT，即5.7.1。当您阅读到这一章时，最新版本可能已经更新。
- en: After making these changes, press Apply and then OK. After setting up the QT5,
    let's write our first program to turn an LED on and off using the GUI buttons.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 进行这些更改后，点击Apply，然后点击OK。在设置QT5之后，让我们编写我们的第一个程序，使用GUI按钮来打开和关闭LED。
- en: Controlling LEDs with GUI buttons
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用GUI按钮控制LED
- en: 'In this section, we will create a simple QT5 program in which we will turn
    the LEDs on and off using the GUI buttons. For this project, you will need two
    LEDs:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建一个简单的QT5程序，通过GUI按钮来控制LED的开关。对于这个项目，您将需要两个LED：
- en: '![](img/25312b51-bdbe-4aa9-a586-5708f9bfdb24.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](img/25312b51-bdbe-4aa9-a586-5708f9bfdb24.png)'
- en: 'The wiring connections of the LEDs is exactly the same as that in the `LEDBuzzer` project:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: LED的接线与`LEDBuzzer`项目中的完全相同：
- en: The anode (positive) pin of the first LED is connected to the wiringPi pin number
    0 and the cathode (negative) pin is connected the physical pin number 9 (the ground
    pin)
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个LED的阳极（正极）引脚连接到wiringPi引脚号0，阴极（负极）引脚连接到物理引脚号9（地线引脚）
- en: The anode pin of the second LED is connected to the wiringPi pin number 2 and
    the cathode pin is connected to the physical pin number 14 (the ground pin)
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个LED的阳极引脚连接到wiringPi引脚号2，阴极引脚连接到物理引脚号14（地线引脚）
- en: Creating a QT project
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建QT项目
- en: The QT5 project for turning the LEDs on and off is called `LedOnOff`. You can
    download this project from the `Chapter05` folder of the GitHub repository. After
    downloading the `LedOnOff` project folder, open the `LedOnOff.pro` file to view
    the project inside the QT5 IDE.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 用于打开和关闭LED的QT5项目称为`LedOnOff`。您可以从GitHub存储库的`Chapter05`文件夹中下载此项目。下载`LedOnOff`项目文件夹后，打开`LedOnOff.pro`文件以在QT5
    IDE中查看项目。
- en: 'Follow these steps to create a project in the QT5 IDE:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤在QT5 IDE中创建项目：
- en: 'click on the File option and then click on New File or Project...:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击File选项，然后点击New File or Project...：
- en: '![](img/d51333f1-b159-4e77-b70a-4f3d9d17a3d8.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d51333f1-b159-4e77-b70a-4f3d9d17a3d8.png)'
- en: 'Next, select the QT Widgets Application option and click the Choose button:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择QT Widgets Application选项，然后点击Choose按钮：
- en: '![](img/64f1c143-97e0-4298-aab6-79708a8d26df.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](img/64f1c143-97e0-4298-aab6-79708a8d26df.png)'
- en: 'After that, give your project a name. I have named my project `LEDOnOff`. After
    this, change the directory to `QTPrograms` so that the project is created in this
    folder, then click Next:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，给您的项目命名。我将我的项目命名为`LEDOnOff`。之后，将目录更改为`QTPrograms`，以便在此文件夹中创建项目，然后点击Next：
- en: '![](img/8bd25d15-d135-466f-a2b2-327c457c4c28.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8bd25d15-d135-466f-a2b2-327c457c4c28.png)'
- en: 'Keep the Desktop option checked and then click Next:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持Desktop选项选中，然后点击Next：
- en: '![](img/cbbd4970-98a3-4ab3-9349-f3426ff913d2.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbbd4970-98a3-4ab3-9349-f3426ff913d2.png)'
- en: 'You should now see certain filenames, which are a part of this project. Keep
    the names as they are and click Next:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您应该看到某些文件名，这些是项目的一部分。保持名称不变，然后点击Next：
- en: '![](img/5d820970-15e4-48b1-893c-e14035aa8a87.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5d820970-15e4-48b1-893c-e14035aa8a87.png)'
- en: 'Finally, you will see a Summary window, which will show you a summary of all
    the files that will be created. We don''t have to make any changes in this window,
    so click on Finish to create the project:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，您将看到一个摘要窗口，其中将显示将要创建的所有文件的摘要。我们不需要在此窗口中进行任何更改，因此点击Finish创建项目：
- en: '![](img/af895aa2-69a6-4b85-8a0d-bdccc5ea4bc3.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](img/af895aa2-69a6-4b85-8a0d-bdccc5ea4bc3.png)'
- en: 'On the left side of the IDE, you will see the design, C++, and header files.
    First, we will open the `LEDOnOff.pro` file and add the path of the `wiringPi`
    library. At the bottom of this file, add the following code:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在IDE的左侧，您将看到设计、C++和头文件。首先，我们将打开`LEDOnOff.pro`文件并添加`wiringPi`库的路径。在文件底部，添加以下代码：
- en: '[PRE16]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![](img/d38aaebe-77ab-4dfd-a396-5587c5f7d909.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d38aaebe-77ab-4dfd-a396-5587c5f7d909.png)'
- en: 'Next, open the `mainwindow.ui` file, which is inside the `Forms` folder. The
    `mainwindow.ui` file is the designer file inside of which we will design our GUI
    buttons:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开`Forms`文件夹内的`mainwindow.ui`文件。`mainwindow.ui`文件是设计文件，我们将在其中设计GUI按钮：
- en: '![](img/8b17f97c-6da1-408f-aee6-dfdbf4aeebcb.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8b17f97c-6da1-408f-aee6-dfdbf4aeebcb.png)'
- en: 'The `mainwindow.ui` file will open in the Design tab. On the left side of the
    Design tab is the widget box, which contains widgets such as buttons, a list view,
    and layouts. In the middle is the design area, where we will drag the UI components.
    In the bottom-right, the properties of the selected UI components are displayed:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '`mainwindow.ui`文件将在Design选项卡中打开。在Design选项卡的左侧是小部件框，其中包含按钮、列表视图和布局等小部件。中间是设计区域，我们将在其中拖动UI组件。在右下角，显示所选UI组件的属性：'
- en: '![](img/054b1c4c-0498-4d73-8a89-73e00683ab2b.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](img/054b1c4c-0498-4d73-8a89-73e00683ab2b.png)'
- en: 'Next, to create the GUI button, drag the Push Button widget inside the design
    area. Double-click on the button, and change the text to `ON`. After that, with
    the Push Button selected, change the objectName (inside the properties window)
    to `on`:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，要创建GUI按钮，将Push Button小部件拖到设计区域内。双击按钮，将文本更改为`ON`。之后，选中Push Button，将objectName（在属性窗口内）更改为`on`：
- en: '![](img/c7cf40ee-026a-48fb-8763-eaaeaa566e95.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c7cf40ee-026a-48fb-8763-eaaeaa566e95.png)'
- en: 'After this, add two more buttons. Set the name of one button to `OFF` and the
    **objectName** to `off`. Set the name of another button to `ON / OFF` and the
    **objectName** to `onoff`:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，添加两个按钮。将一个按钮的名称设置为`OFF`，**objectName**设置为`off`。将另一个按钮的名称设置为`ON / OFF`，**objectName**设置为`onoff`：
- en: '![](img/d1127285-7189-4250-908a-20d153280eb3.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d1127285-7189-4250-908a-20d153280eb3.png)'
- en: 'There are two different types of button function that we can use for turning
    the LED on and off:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用两种不同类型的按钮函数来打开和关闭LED：
- en: '`clicked()`: The `clicked` button function will execute as soon as the button
    is clicked.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clicked()`: `clicked`按钮函数将在按钮被点击时立即执行。'
- en: '`pressed()` and `released()`: The `pressed` button function keeps executing
    as long as you hold or keep the button pressed. When we use the `pressed` function,
    we also have to use the `released()` function. The released function contains
    the code that indicates what should happen when the button is released.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pressed()`和`released()`: `pressed`按钮函数会在您按住或按住按钮时一直执行。当我们使用`pressed`函数时，我们还必须使用`released()`函数。释放的函数包含指示按钮释放时应发生的操作的代码。'
- en: 'We will link the `clicked()` function to the **ON** and **OFF** buttons and
    link the `pressed()` and `released()` functions to the **ON/OFF** button. Next,
    to link the `clicked()` function to the **ON** button, right-click on the **ON**
    button, select the Go to slot... option, and then select the `clicked()` function.
    After that, press OK:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把`clicked()`函数链接到**ON**和**OFF**按钮，并将`pressed()`和`released()`函数链接到**ON/OFF**按钮。接下来，要将`clicked()`函数链接到**ON**按钮，右键单击**ON**按钮，选择Go
    to slot...选项，然后选择`clicked()`函数。然后，按下OK：
- en: '![](img/162e949c-7d25-455a-818b-4bc20b19d29d.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![](img/162e949c-7d25-455a-818b-4bc20b19d29d.png)'
- en: 'Now, as soon as you select the `clicked()` function, a clicked function called
    `on_on_clicked()` (`on_buttonsobjectname_clicked`) will be created inside the
    `mainwindow.cpp` file (this file is inside the `Sources` folder). Inside this
    function, we will write the program to turn the LED on. Before that, however,
    we need to declare the `wiringPi` library and pins inside the `mainwindow.h` file.
    This file is inside the `Headers` folder:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，一旦您选择`clicked()`函数，`mainwindow.cpp`文件（此文件位于`Sources`文件夹中）中将创建一个名为`on_on_clicked()`（`on_buttonsobjectname_clicked`）的点击函数。在此函数中，我们将编写打开LED的程序。但在此之前，我们需要在`mainwindow.h`文件中声明`wiringPi`库和引脚。此文件位于`Headers`文件夹中：
- en: '![](img/60c03849-01f6-41e7-b983-65f4226b9434.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![](img/60c03849-01f6-41e7-b983-65f4226b9434.png)'
- en: 'We also need to declare the `QMainWindow` library, which will create a window
    that contains our buttons. Next, I have set the `led1` pin to pin `0` and the
    `led2` pin to pin `2`. After that, open the `mainwindow.cpp` file again. We will
    then do the following:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要声明`QMainWindow`库，它将创建一个包含我们按钮的窗口。接下来，我已将`led1`引脚设置为引脚`0`，将`led2`引脚设置为引脚`2`。之后，再次打开`mainwindow.cpp`文件。然后我们将执行以下操作：
- en: First, we will declare the `wiringPiSetup();` function
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将声明`wiringPiSetup();`函数
- en: Next, we will set `led1` and `led2` as the `OUTPUT` pins
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将把`led1`和`led2`设置为`OUTPUT`引脚
- en: 'Finally, inside the `on_on_clicked()` function, set the `led1` and `led2` pins
    to `HIGH`:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在`on_on_clicked()`函数中，将`led1`和`led2`引脚设置为`HIGH`：
- en: '![](img/53314662-d1ee-438e-ab16-19d75179a05c.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![](img/53314662-d1ee-438e-ab16-19d75179a05c.png)'
- en: Next, to turn the LEDs off, open the `mainwindow.ui` file again, right-click
    on the off button, select Go to slot..., and select the `clicked()` function again.
    Inside the `mainwindow.cpp` file, a new function called `on_off_clicked` will
    be created. Inside this function, we will write the program to turn off the LEDs.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，要关闭LED灯，再次打开`mainwindow.ui`文件，右键单击关闭按钮，选择Go to slot...，然后再次选择`clicked()`函数。在`mainwindow.cpp`文件中，将创建一个名为`on_off_clicked`的新函数。在此函数中，我们将编写关闭LED灯的程序。
- en: To program the ON/OFF button, right-click on it, select Go to slot..., and,
    this time, select the `pressed()` function. A new function name of `on_onoff_pressed()`
    will be created inside the `mainwindow.ui` file. Next, right-click on the **ON/OFF**
    button, select Go to slot..., and select the `released()` function. A new function
    called `on _onoff_released()` will now be created.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 要编程ON/OFF按钮，右键单击它，选择Go to slot...，然后选择`pressed()`函数。将在`mainwindow.ui`文件中创建一个名为`on_onoff_pressed()`的新函数。接下来，右键单击**ON/OFF**按钮，选择Go
    to slot...，然后选择`released()`函数。现在将创建一个名为`on _onoff_released()`的新函数。
- en: 'Inside the `on_onoff_pressed()` function, we will write a program to turn the
    LEDs on. Inside the `on_onoff_released()` function, we will write the program
    to turn the LEDs off:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在`on_onoff_pressed()`函数中，我们将编写一个程序来打开LED灯。在`on_onoff_released()`函数中，我们将编写一个程序来关闭LED灯：
- en: '![](img/1bc3b0ab-dfbc-4c41-a198-81693f52be8f.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1bc3b0ab-dfbc-4c41-a198-81693f52be8f.png)'
- en: 'Before running the code, click on File and then click Save All. Next, to build
    and run the code, click on Build and then click on the Run option. It will take
    around 30 to 40 seconds for the MainWindow to appear, and, in the main window,
    you will see the GUI buttons as follows:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行代码之前，单击文件，然后单击全部保存。接下来，要构建和运行代码，请单击构建，然后单击运行选项。MainWindow出现需要大约30到40秒，在主窗口中，您将看到以下GUI按钮：
- en: '![](img/bdea7634-eed9-4dc7-b75c-232e8333e4df.png)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bdea7634-eed9-4dc7-b75c-232e8333e4df.png)'
- en: Now, when you click the ON button, the LEDs will turn on. When you click the
    OFF button, the LEDs will turn off. Finally, when you hold the **ON / OFF** button,
    the LEDs will turn on until you let go, when they will turn off.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当您点击ON按钮时，LED将打开。当您点击OFF按钮时，LED将关闭。最后，当您按住**ON / OFF**按钮时，LED将一直打开，直到您松开为止，然后它们将关闭。
- en: Dealing with errors
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理错误
- en: 'In the console, you may see some minor errors. If the main window is open,
    you can ignore these errors:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制台中，您可能会看到一些次要错误。如果主窗口已打开，您可以忽略这些错误：
- en: '![](img/22178e23-8e5a-4181-b245-d89de8d0aeaf.png)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![](img/22178e23-8e5a-4181-b245-d89de8d0aeaf.png)'
- en: 'The GCC compiler might keep resetting when you open the Qt Creator IDE. Because
    of this, after running the project, you will get the following error:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 当您打开Qt Creator IDE时，GCC编译器可能会不断重置。因此，在运行项目后，您将收到以下错误：
- en: '[PRE17]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![](img/2fb0fe4e-152a-48a5-9b8b-65b14442f370.png)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2fb0fe4e-152a-48a5-9b8b-65b14442f370.png)'
- en: If you get this error, go to Tools, then Options, and set the C++ compiler to
    GCC, as indicated in *step 5* of the *Setting up QT5* section.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您遇到此错误，请转到工具，然后选项，并将C++编译器设置为GCC，如“设置QT5”部分的*步骤5*中所示。
- en: Controlling a rover using a laptop with QT5
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用QT5控制笔记本电脑的小车
- en: 'Now that we can control the LEDs, let''s look at how to control the rover using
    QT5\. Inside the Qt Creator IDE, create a new project and name it `QTRover`. You
    can download the `QTRover` project folder from the GitHub repository of this chapter.
    We can now create this `QTRover` project using the `clicked()` function and the
    `pressed()` and `released()` functions. To do so, we have the following options:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以控制LED灯，让我们看看如何使用QT5控制小车。在Qt Creator IDE中，创建一个新项目并命名为`QTRover`。您可以从本章的GitHub存储库中下载`QTRover`项目文件夹。我们现在可以使用`clicked()`函数和`pressed()`和`released()`函数来创建这个`QTRover`项目。为此，我们有以下选项：
- en: 'If we create this project using only the `clicked()` function, we would need
    to create five buttons: forward, backward, left, right, and stop. We would need
    to press the stop button each time to stop the robot.'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们只使用`clicked()`函数创建这个项目，我们需要创建五个按钮：前进、后退、左转、右转和停止。在这种情况下，我们需要每次按下停止按钮来停止机器人。
- en: 'If we create this project using only the `pressed()` and `released()` functions,
    we would only need to create four buttons: forward, backward, left, and right.
    We wouldn''t need a stop button in this case, as the rover would stop when the
    buttons are released.'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们只使用`pressed()`和`released()`函数创建这个项目，我们只需要创建四个按钮：前进、后退、左转和右转。在这种情况下，我们不需要停止按钮，因为当按钮释放时，小车会停止。
- en: Alternatively, we can also use a combination of the `clicked()`, `pressed()`,
    and `released()` functions in which the forward, backward, and stop buttons would
    be linked to the `clicked()` function, and the left and right buttons would be
    linked to the `pressed()` and `released()` functions.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 或者，我们也可以使用`clicked()`、`pressed()`和`released()`函数的组合，其中前进、后退和停止按钮将链接到`clicked()`函数，左右按钮将链接到`pressed()`和`released()`函数。
- en: In this project, we'll opt for the third option, the combination of the `clicked()`,
    `pressed()`, and `released()` functions. Before creating this project, we will
    close the `LEDOnOff` project, because if both the `LEDOnOff` and `QTRover` projects
    are kept open, there is a chance that, if you make UI changes in one project,
    the code might change in the other, thus affecting both of your project files.
    To close the `LEDOnOff` project, right-click on it and then select the Close Project
    "LEDOnOff" option.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将选择第三个选项，即`clicked()`、`pressed()`和`released()`函数的组合。在创建这个项目之前，我们将关闭`LEDOnOff`项目，因为如果`LEDOnOff`和`QTRover`项目都保持打开状态，有可能如果您在一个项目中进行UI更改，代码可能会在另一个项目中更改，从而影响到您的两个项目文件。要关闭`LEDOnOff`项目，请右键单击它，然后选择关闭项目“LEDOnOff”选项。
- en: 'Next, add the `wiringPi` library path inside the `QTRover.pro` file:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`QTRover.pro`文件中添加`wiringPi`库路径：
- en: '[PRE18]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'After that, open the `mainwindow.ui` file and create five push buttons. Label
    them `FORWARD`, `BACKWARD`, `LEFT`, `RIGHT`, and `STOP`:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，打开`mainwindow.ui`文件并创建五个按钮。将它们标记为`FORWARD`、`BACKWARD`、`LEFT`、`RIGHT`和`STOP`：
- en: '![](img/fcbea460-fcd5-467d-afdf-543c8e5ee98e.png)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fcbea460-fcd5-467d-afdf-543c8e5ee98e.png)'
- en: 'Set the name of the button objects as follows:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 将按钮对象的名称设置如下：
- en: Set the `FORWARD` button object name to forward
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`FORWARD`按钮对象名称设置为forward
- en: Set the `BACKWARD` button object name to backward
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`BACKWARD`按钮对象名称设置为backward
- en: Set the `LEFT` button object name to left
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`LEFT`按钮对象名称设置为left
- en: Set the `RIGHT` button object name to right
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`RIGHT`按钮对象名称设置为right
- en: Set the `STOP` button object name to stop
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`STOP`按钮对象名称设置为stop
- en: After this, right-click on the forward, backward, and stop buttons, and add
    the `clicked()` functions to those three buttons. Similarly, right-click on the
    left and right buttons, and add the `pressed()` and `released()` functions to
    these buttons.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，右键单击前进、后退和停止按钮，并将`clicked()`函数添加到这三个按钮。同样，右键单击左和右按钮，并将`pressed()`和`released()`函数添加到这些按钮。
- en: 'Next, open the `mainwindow.h` file and declare the `wiringPi` and `QMainWindow`
    libraries. Also, declare the four `wiringPi` pin numbers. In my case, I''m using
    the pin numbers `0`, `2`, `3`, and `4`:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开`mainwindow.h`文件并声明`wiringPi`和`QMainWindow`库。还要声明四个`wiringPi`引脚号。在我的情况下，我使用引脚号`0`、`2`、`3`和`4`：
- en: '![](img/5d9b41e5-a899-4f20-8e6d-9fc90ed55599.png)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5d9b41e5-a899-4f20-8e6d-9fc90ed55599.png)'
- en: Inside the `mainwindow.cpp` file, we will have three `on_click` functions to
    move forward (`on_forward_clicked`), backward (`on_backward_clicked`), and to
    stop (`on_stop_clicked`).
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在`mainwindow.cpp`文件内，我们将有三个`on_click`函数来向前移动（`on_forward_clicked`）、向后移动（`on_backward_clicked`）和停止（`on_stop_clicked`）。
- en: We also have two `on_pressed` and `on_released` functions for the left (`on_left_pressed` and
    `on_left_released`) and right (`on_right_pressed` and `on_right_released`) buttons.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有两个`on_pressed`和`on_released`函数用于左（`on_left_pressed`和`on_left_released`）和右（`on_right_pressed`和`on_right_released`）按钮。
- en: 'The following steps describe the steps required to move the robot in different
    directions:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤描述了移动机器人在不同方向上所需的步骤：
- en: 'Inside the `on_forward_clicked()` function, we will write the program to move
    the robot forward:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`on_forward_clicked()`函数内，我们将编写程序来使机器人向前移动：
- en: '[PRE19]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Next, inside the `on_backward_clicked()` function, we will write the program
    to move the robot backward:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在`on_backward_clicked()`函数内，我们将编写程序来使机器人向后移动：
- en: '[PRE20]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'After that, inside the `on_left_pressed()` function, we will write the program
    to make an axial left turn or radial left turn:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，在`on_left_pressed()`函数内，我们将编写程序来进行轴向左转或径向左转：
- en: '[PRE21]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Then, inside the `on_right_pressed()` function, we will write the program to
    make an axial right turn, or a radial right turn:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在`on_right_pressed()`函数内，我们将编写程序来进行轴向右转或径向右转：
- en: '[PRE22]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Inside the `on_stop_clicked()` functions, we will write the program to stop
    the robot:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`on_stop_clicked()`函数内，我们将编写程序来停止机器人：
- en: '[PRE23]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: After completing the code, save all the files. After that, run the program and
    test the final output. After running the code, you will see the main window with
    the forward, backward, left, right, and stop buttons. Press each GUI button to
    move the robot in the desired direction.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 完成代码后，保存所有文件。之后，运行程序并测试最终输出。运行代码后，您将看到带有向前、向后、向左、向右和停止按钮的主窗口。按下每个GUI按钮以使机器人朝所需方向移动。
- en: Summary
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at two different techniques for controlling the robot
    using a laptop. In the first technique, we used the `ncurses` library to take
    input from the keyboard to move the robot accordingly. In the second technique,
    we used the QT Creator IDE to create GUI buttons, and then used these to move
    the robot in different directions.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了两种不同的技术来使用笔记本电脑控制机器人。在第一种技术中，我们使用`ncurses`库从键盘接收输入，以相应地移动机器人。在第二种技术中，我们使用QT
    Creator IDE创建GUI按钮，然后使用这些按钮来使机器人朝不同方向移动。
- en: In the next chapter, we will install OpenCV software on our Raspberry Pi. After
    that, we will use the Raspberry Pi camera to record pictures and videos.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将在树莓派上安装OpenCV软件。之后，我们将使用树莓派摄像头记录图片和视频。
- en: Questions
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: The `ncurses` program should be written between which two functions?
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ncurses`程序应该在哪两个函数之间编写？'
- en: What is the purpose of the `initscr()` function?
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`initscr()`函数的目的是什么？'
- en: How do you compile a `ncurses` code inside the Terminal window?
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在终端窗口中编译`ncurses`代码？
- en: Which C++ compiler did we use in the QT Creator?
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在QT Creator中使用了哪个C++编译器？
- en: Which push-button function, or functions, will you use to move the robot forward
    as long as the button is pressed?
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会使用哪个按钮功能或功能来在按下按钮时使机器人向前移动？
