["```cpp\nxcode-select --install\n```", "```cpp\nbrew install cmake\n```", "```cpp\npython --version\n```", "```cpp\nbrew install pyenv\n```", "```cpp\npyenv install 2.7.15\n```", "```cpp\npyenv global 2.7.15\n```", "```cpp\npython --version\n```", "```cpp\npython --version\n```", "```cpp\ncurl --version\n```", "```cpp\nsudo apt-get install curl\n```", "```cpp\ncurl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash\n```", "```cpp\npyenv install 2.7.15\n```", "```cpp\npyenv global 2.7.15\n```", "```cpp\npython --version\n```", "```cpp\npython --version\n```", "```cpp\nchoco install python2 -y\n```", "```cpp\nSET PATH=C:\\Python27\\python.exe\n```", "```cpp\ngit clone https://github.com/juj/emsdk.git\n```", "```cpp\n# Change directory into the EMSDK installation folder\ncd emsdk\n\n# Fetch the latest registry of available tools\n./emsdk update\n\n# Download and install the latest SDK tools\n./emsdk install latest\n\n# Make the latest SDK active for the current user (writes ~/.emscripten file)\n./emsdk activate latest\n\n# Activate PATH and other environment variables in the current Terminal\nsource ./emsdk_env.sh\n```", "```cpp\nsource ~/Tooling/emsdk/emsdk_env.sh > /dev/null\n```", "```cpp\nemcc --version\n```", "```cpp\n# Change directory into the EMSDK installation folder\ncd emsdk\n\n# Fetch the latest registry of available tools\n.\\emsdk update\n\n# Download and install the latest SDK tools\n.\\emsdk install latest\n\n# Make the latest SDK active for the current user (writes ~/.emscripten file)\n.\\emsdk activate --global latest\n```", "```cpp\nemcc --version\n```", "```cpp\n{\n  \"name\": \"Linux\",\n  \"includePath\": [\n    \"/usr/include\",\n    \"/usr/local/include\",\n    \"${workspaceFolder}\",\n    \"${env:EMSCRIPTEN}/system/include\"\n  ],\n  \"defines\": [],\n  \"intelliSenseMode\": \"clang-x64\",\n  \"browse\": {\n    \"path\": [\n      \"/usr/include\",\n      \"/usr/local/include\",\n      \"${workspaceFolder}\"\n      ],\n    \"limitSymbolsToIncludedHeaders\": true,\n    \"databaseFilename\": \"\"\n  }\n}\n```", "```cpp\nint addTwoNumbers(int leftValue, int rightValue) {\n    return leftValue + rightValue;\n}\n```", "```cpp\nemcc <file.c> -Os -s WASM=1 -s SIDE_MODULE=1 -s BINARYEN_ASYNC_COMPILATION=0 -o <file.wasm>\n```", "```cpp\n# Ensure you're in the /chapter-04-installing-deps folder:\ncd chapter-04-installing-deps\n\n# Compile the main.c file to main.wasm:\nemcc main.c -Os -s WASM=1 -s SIDE_MODULE=1 -s BINARYEN_ASYNC_COMPILATION=0 -o main.wasm\n```", "```cpp\n(module\n  (type $t0 (func (param i32)))\n  (type $t1 (func (param i32 i32) (result i32)))\n  (type $t2 (func))\n  (type $t3 (func (result f64)))\n  (import \"env\" \"table\" (table $env.table 2 anyfunc))\n  (import \"env\" \"memoryBase\" (global $env.memoryBase i32))\n  (import \"env\" \"tableBase\" (global $env.tableBase i32))\n  (import \"env\" \"abort\" (func $env.abort (type $t0)))\n  (func $_addTwoNumbers (type $t1) (param $p0 i32) (param $p1 i32) (result i32)\n    get_local $p1\n    get_local $p0\n    i32.add)\n  (func $runPostSets (type $t2)\n    nop)\n  (func $__post_instantiate (type $t2)\n     get_global $env.memoryBase\n    set_global $g2\n    get_global $g2\n    i32.const 5242880\n    i32.add\n    set_global $g3)\n  (func $f4 (type $t3) (result f64)\n    i32.const 0\n    call $env.abort\n    f64.const 0x0p+0 (;=0;))\n  (global $g2 (mut i32) (i32.const 0))\n  (global $g3 (mut i32) (i32.const 0))\n  (global $fp$_addTwoNumbers i32 (i32.const 1))\n  (export \"__post_instantiate\" (func $__post_instantiate))\n  (export \"_addTwoNumbers\" (func $_addTwoNumbers))\n  (export \"runPostSets\" (func $runPostSets))\n  (export \"fp$_addTwoNumbers\" (global 4))\n  (elem (get_global $env.tableBase) $f4 $_addTwoNumbers))\n```"]