- en: '13'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '13'
- en: Reusing CMake Code
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重用 CMake 代码
- en: 'Writing build system code for a project is no easy task. Project maintainers
    and developers spend a lot of effort writing CMake code for configuring compiler
    flags, project build variants, third-party libraries, and tool integrations. Writing
    CMake code for project-agnostic details from scratch may start to incur a significant
    burden when dealing with multiple CMake projects. Most of the CMake code written
    for a project to configure these details could be reused between projects. With
    that in mind, it is for our benefit to develop a strategy to make our CMake code
    reuse-friendly. The straightforward way to approach this problem is to treat CMake
    code as regular code and apply some of the most basic coding principles: the **Don’t
    Repeat Yourself** (**DRY**) principle and the **single responsibility** **principle**
    (**SRP**).'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为项目编写构建系统代码并非易事。项目维护者和开发人员在编写 CMake 代码时会花费大量精力来配置编译器标志、项目构建变体、第三方库和工具集成。从头开始编写用于配置项目无关细节的
    CMake 代码，在处理多个 CMake 项目时可能会开始带来显著的负担。为项目编写的这些 CMake 代码中的大部分内容，都是可以在多个项目之间重用的。考虑到这一点，我们有必要制定一个策略，使我们的
    CMake 代码易于重用。解决这个问题的直接方法是将 CMake 代码视为常规代码，并应用一些最基本的编码原则：**不要重复自己**（**DRY**）原则和**单一责任**（**SRP**）原则。
- en: 'CMake code can be easily reused if structured with reusability in mind. Achieving
    essential reusability is pretty straightforward: separate CMake code into modules
    and functions. You may have realized that the way to make CMake code reusable
    is no different from making software code reusable. Remember – CMake itself is
    a scripting language, after all. So, it is natural to treat CMake code as regular
    code and apply software design principles while dealing with it. As with any functional
    scripting language, CMake has the following basic abilities for reusability:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果按照重用性的思路来结构化 CMake 代码，那么 CMake 代码是可以轻松重用的。实现基本的重用性非常简单：将 CMake 代码拆分成模块和函数。你可能已经意识到，使
    CMake 代码可重用的方法与使软件代码可重用的方法是一样的。记住——毕竟 CMake 本身就是一种脚本语言。所以，将 CMake 代码视为常规代码并应用软件设计原则是完全自然的。像任何功能性脚本语言一样，CMake
    拥有以下基本重用能力：
- en: Ability to include other CMake files
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够包含其他 CMake 文件
- en: Functions/macros
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数/宏
- en: Portability
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可移植性
- en: In this chapter, we will learn ways of writing CMake code for a project with
    reusability in mind and reusing CMake code in CMake projects. We will also discuss
    ways of versioning and sharing common CMake code between projects.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何编写具有重用性思想的 CMake 代码，并在 CMake 项目中重用 CMake 代码。我们还将讨论如何在项目之间进行版本管理和共享常用的
    CMake 代码。
- en: 'To understand the skills shared in this chapter, we’ll cover the following
    main topics:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解本章分享的技能，我们将涵盖以下主要主题：
- en: What is a CMake module?
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是 CMake 模块？
- en: Fundamental building blocks of modules – functions and macros
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块的基本构建块——函数和宏
- en: Writing your first very own CMake module
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写你的第一个 CMake 模块
- en: Let’s begin with technical requirements.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从技术要求开始。
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Before you dive further into this chapter, it is recommended to take a look
    at [*Chapter 1*](B30947_01.xhtml#_idTextAnchor015), *Kickstarting CMake*. This
    chapter follows the teaching-over-example approach, so it is recommended to obtain
    this chapter’s example content from here: [https://github.com/PacktPublishing/CMake-Best-Practices---2nd-Edition/tree/main/chapter13](https://github.com/PacktPublishing/CMake-Best-Practices---2nd-Edition/tree/main/chapter13).
    For all the examples, assume that you will be using the container provided by
    this project: [https://github.com/PacktPublishing/CMake-Best-Practices---2nd-Edition/](https://github.com/PacktPublishing/CMake-Best-Practices---2nd-Edition/).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入本章之前，建议先阅读 [*第 1 章*](B30947_01.xhtml#_idTextAnchor015)，*快速入门 CMake*。本章采用以示例教学的方法，因此建议从这里获取本章的示例内容：[https://github.com/PacktPublishing/CMake-Best-Practices---2nd-Edition/tree/main/chapter13](https://github.com/PacktPublishing/CMake-Best-Practices---2nd-Edition/tree/main/chapter13)。对于所有示例，假设你将使用该项目提供的容器：[https://github.com/PacktPublishing/CMake-Best-Practices---2nd-Edition/](https://github.com/PacktPublishing/CMake-Best-Practices---2nd-Edition/)。
- en: Let’s start by learning some basics about reusability in CMake.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先了解一些 CMake 中重用性的基本知识。
- en: What is a CMake module?
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 CMake 模块？
- en: 'A `Find*.cmake` modules). A list of the modules that CMake provides by default
    is available at [https://cmake.org/cmake/help/latest/manual/cmake-modules.7.html](https://cmake.org/cmake/help/latest/manual/cmake-modules.7.html).
    The official CMake documentation categorizes modules in the following two main
    categories:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`Find*.cmake`模块)。CMake默认提供的模块列表可以在[https://cmake.org/cmake/help/latest/manual/cmake-modules.7.html](https://cmake.org/cmake/help/latest/manual/cmake-modules.7.html)查看。官方的CMake文档将模块分为以下两大类：
- en: Utility modules
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具模块
- en: Find modules
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找模块
- en: As their name suggests, utility modules provide utility, whereas find modules
    are designed to search for third-party software in a system. As you will recall,
    we covered find modules thoroughly in [*Chapter 4*](B30947_04.xhtml#_idTextAnchor071),
    *Packaging, Deploying, and Installing a CMake Project*, and [*Chapter 5*](B30947_05.xhtml#_idTextAnchor084),
    *Integrating Third-Party Libraries* *and Dependency Management*. Therefore, we
    will exclusively focus on utility modules in this chapter. You will recall we
    have been using some CMake-provided utility modules in previous chapters. Some
    of the modules we used were `GNUInstallDirs`, `CPack`, `FetchContent`, and `ExternalProject`.
    These modules are located under the `CMake` installation folder.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 正如它们的名字所示，工具模块提供工具，而查找模块则旨在搜索系统中的第三方软件。如你所记得，我们在[*第4章*](B30947_04.xhtml#_idTextAnchor071)《*CMake项目的打包、部署与安装*》和[*第5章*](B30947_05.xhtml#_idTextAnchor084)《*集成第三方库*及依赖管理》中详细讨论了查找模块。因此，在本章中我们将专注于工具模块。你会记得，在前几章中我们使用了一些CMake提供的工具模块。我们使用的一些模块有`GNUInstallDirs`、`CPack`、`FetchContent`和`ExternalProject`。这些模块位于`CMake`安装目录下。
- en: 'To better understand the concept of a utility module, let’s start by investigating
    a simple utility module that CMake provides. For this purpose, we will look into
    the `ProcessorCount` utility module. You can find the source file for this module
    at [https://github.com/Kitware/CMake/blob/master/Modules/ProcessorCount.cmake](https://github.com/Kitware/CMake/blob/master/Modules/ProcessorCount.cmake).
    The `ProcessorCount` module is a module that allows retrieving the CPU core count
    of a system in CMake code. The `ProcessorCount.cmake` file defines a CMake function
    named `ProcessorCount`, which takes a single parameter named `var`. The implementation
    of the function is roughly as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解工具模块的概念，让我们从研究CMake提供的一个简单的工具模块开始。为此，我们将研究`ProcessorCount`工具模块。你可以在[https://github.com/Kitware/CMake/blob/master/Modules/ProcessorCount.cmake](https://github.com/Kitware/CMake/blob/master/Modules/ProcessorCount.cmake)找到该模块的源文件。`ProcessorCount`模块是一个允许在CMake代码中获取系统CPU核心数的模块。`ProcessorCount.cmake`文件定义了一个名为`ProcessorCount`的CMake函数，它接受一个名为`var`的参数。该函数的实现大致如下：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `ProcessorCount` function attempts several different approaches to retrieve
    the CPU core count of the host machine. The usage of the `ProcessorCount` module
    is simple, as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`ProcessorCount`函数尝试多种不同的方法来获取主机机器的CPU核心数。使用`ProcessorCount`模块非常简单，如下所示：'
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you can see in the preceding example, using a CMake module is as easy as
    including the module in the required CMake file. The `include()` function is transitive,
    so the code after the `include` line can consume all CMake definitions contained
    in the module.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在上面的示例中所看到的，使用CMake模块就像将模块包含到所需的CMake文件中一样简单。`include()`函数是递归的，因此`include`行之后的代码可以使用模块中包含的所有CMake定义。
- en: 'We now have a rough idea of what a utility module looks like. Let’s continue
    by learning more about the fundamental building blocks of a utility module: functions
    and macros.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在大致了解了一个工具模块的样子。接下来，继续学习更多关于工具模块的基本构建块：函数和宏。
- en: Fundamental building blocks of modules – functions and macros
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块的基本构建块——函数和宏
- en: It is clear that we need some basic building blocks to create utility modules.
    The most fundamental building blocks for utility modules are functions and macros,
    so it is essential to learn their working principles well. Let’s start by learning
    about functions.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 很明显，我们需要一些基本的构建块来创建工具模块。工具模块的最基本构建块是函数和宏，因此掌握它们的工作原理至关重要。让我们从学习函数开始。
- en: Functions
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数
- en: 'Let’s remember what we learned in [*Chapter 1*](B30947_01.xhtml#_idTextAnchor015),
    *Kickstarting CMake*, about functions. A `function(…)`, has a body that contains
    CMake commands, and ends with the `endfunction()` CMake command. The `function()`
    command needs a name as the first argument and optional function argument names,
    shown as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下在 [*第1章*](B30947_01.xhtml#_idTextAnchor015)《启动 CMake》中学到的关于函数的内容。`function(…)`
    拥有一个包含 CMake 命令的函数体，并以 `endfunction()` CMake 命令结束。`function()` 命令的第一个参数需要是函数名，其后可以有可选的函数参数名，如下所示：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: A function defines a new variable scope, so changes made on CMake variables
    are only visible in the function’s body. Separate scoping is the most crucial
    property of a function. Having a new scope means we can’t accidentally leak variables
    to the caller or modify the caller’s variables *unless we want to*. Most of the
    time, we will want to contain changes in the function’s scope and only reflect
    the function’s result to the caller. As CMake has no notion of return values,
    we will take the *defining a variable in the caller’s scope* approach to return
    function results to the caller.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 函数定义了一个新的变量作用域，因此对 CMake 变量的修改仅在函数体内可见。独立作用域是函数的最重要特性。拥有新的作用域意味着我们无法意外地泄露变量给调用者或修改调用者的变量，*除非我们愿意这么做*。大多数情况下，我们希望将修改限制在函数的作用域内，并仅将函数的结果反映给调用者。由于
    CMake 不支持返回值，我们将采取*在调用者作用域中定义变量*的方法来返回函数结果给调用者。
- en: 'To illustrate this approach, let’s define a simple function that retrieves
    the current Git branch name together:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这种方法，我们定义一个简单的函数来一起获取当前的 Git 分支名称：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `git_get_branch_name` function takes a single argument named `result_var_name`.
    This argument is the name of the variable that will be defined in the caller’s
    scope to return the Git branch name to the caller. Alternatively, we can use a
    constant variable name, such as `GIT_CURRENT_BRANCH_NAME`, and get rid of the
    `result_var_name` argument, but this may cause issues if the project already uses
    the `GIT_CURRENT_BRANCH_NAME` name.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`git_get_branch_name` 函数接受一个名为 `result_var_name` 的单一参数。该参数是将被定义在调用者作用域中的变量名，用于返回
    Git 分支名称给调用者。或者，我们可以使用一个常量变量名，比如 `GIT_CURRENT_BRANCH_NAME`，并去掉 `result_var_name`
    参数，但如果项目已经使用了 `GIT_CURRENT_BRANCH_NAME` 这个名字，这可能会导致问题。'
- en: The rule of thumb here is to leave the naming to the caller since it allows
    maximum flexibility and portability. To retrieve the current Git branch name,
    we have invoked the `git symbolic-ref -q --short HEAD` command with `execute_process()`.
    The result of the command is stored in the `git_current_branch_name` variable
    in the function’s scope. The variable being in the function’s scope means the
    caller cannot see the `git_current_branch_name` variable. Thus, we have used `set(${result_var_name}
    ${git_current_branch_name} PARENT_SCOPE)` to define a variable using the value
    of `result_var_name` in the caller’s scope with the value of the local `git_current_branch_name`
    variable.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的经验法则是将命名留给调用者，因为这可以提供最大的灵活性和可移植性。为了获取当前的 Git 分支名称，我们通过 `execute_process()`
    调用了 `git symbolic-ref -q --short HEAD` 命令。命令的结果存储在函数作用域内的 `git_current_branch_name`
    变量中。由于该变量处于函数作用域内，调用者无法看到 `git_current_branch_name` 变量。因此，我们使用 `set(${result_var_name}
    ${git_current_branch_name} PARENT_SCOPE)` 来在调用者的作用域内定义一个变量，使用的是本地 `git_current_branch_name`
    变量的值。
- en: 'The `PARENT_SCOPE` argument alters the scoping of the `set(…)` command, so
    it defines the variable in the caller’s scope instead of the function’s scope.
    The usage of the `git_get_branch_name` function is as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`PARENT_SCOPE` 参数改变了 `set(…)` 命令的作用域，使得它在调用者的作用域中定义变量，而不是在函数作用域中定义。`git_get_branch_name`
    函数的用法如下：'
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Let’s look at macros next.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们来看看宏。
- en: Macros
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 宏
- en: 'If the function’s scoping is a deal-breaker for your use case, you might consider
    using a macro instead. Macros start with `macro(…)` and end with `endmacro()`.
    Functions and macros behave similarly in every aspect but one: macros do not define
    a new variable scope. Returning to our Git branch example, considering `execute_process(…)`
    already has the `OUTPUT_VARIABLE` parameter, it is more convenient to define `git_get_branch_name`
    as a macro instead of a function to get rid of `set(… PARENT_SCOPE)` at the end:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果函数的作用域对你的使用场景是个难题，你可以考虑改用宏。宏以 `macro(…)` 开始，以 `endmacro()` 结束。函数和宏在各个方面表现得很相似，但有一个区别：宏不会定义新的变量作用域。回到我们的
    Git 分支示例，考虑到 `execute_process(…)` 已经有了 `OUTPUT_VARIABLE` 参数，定义 `git_get_branch_name`
    为宏而非函数会更方便，这样就可以避免在结尾使用 `set(… PARENT_SCOPE)`：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The usage of the `git_get_branch_name_m` macro is the same as the `git_get_branch_name()`
    function:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`git_get_branch_name_m`宏的使用与`git_get_branch_name()`函数相同：'
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We have learned how we can define a function or macro when needed. Up next,
    we will define our first CMake module together.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学习了如何在需要时定义函数或宏。接下来，我们将一起定义第一个CMake模块。
- en: Writing your first very own CMake module
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写你自己的第一个CMake模块
- en: In the previous section, we learned about how to use functions and macros to
    provide useful utility in CMake projects. Now, we can learn about how we can move
    these functions and macros to a separate CMake module.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们学习了如何使用函数和宏为CMake项目提供有用的工具。现在，我们将学习如何将这些函数和宏移到一个单独的CMake模块中。
- en: 'Creating and using a basic CMake module file is extremely simple:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 创建和使用一个基本的CMake模块文件非常简单：
- en: Create a `<module_name>.cmake` file under your project.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的项目中创建一个`<module_name>.cmake`文件。
- en: Define any macros/functions in the `<``module_name>.cmake` file.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<module_name>.cmake`文件中定义任何宏/函数。
- en: Include `<module_name>.cmake` in the desired file.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在需要的文件中包含`<module_name>.cmake`。
- en: 'Alright – let’s follow these steps and create a module together. As a follow-up
    to our previous Git branch name example, let’s extend the scope and write a CMake
    module that provides the ability to retrieve the branch name, head commit hash,
    current author name, and current author email information by using the `git` command.
    For this part, we will follow the `chapter13/ex01_git_utility` example. The example
    folder contains a `CMakeLists.txt` file and a `git.cmake` file under the `.cmake`
    folder. Let’s start by taking a look at the `.cmake/git.cmake` file. The contents
    of the file are as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 好的——让我们按照这些步骤一起创建一个模块。作为我们之前Git分支名称示例的后续，我们将扩大范围，编写一个CMake模块，提供通过`git`命令获取分支名称、头部提交哈希值、当前作者名称和当前作者电子邮件信息的能力。对于这一部分，我们将参考`chapter13/ex01_git_utility`的示例。示例文件夹包含一个`CMakeLists.txt`文件和一个位于`.cmake`文件夹下的`git.cmake`文件。让我们首先来看一下`.cmake/git.cmake`文件，文件内容如下：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `git.cmake` file is a CMake utility module file that contains three macros
    named `git_get_branch_name`, `git_get_head_commit_hash`, and `git_get_config_value`
    respectively. Additionally, there is an `include_guard(DIRECTORY)` line at the
    top of the file. This is analogous to the `#pragma once` preprocessor directive
    in C/C++ and prevents the file from being included more than once. The `DIRECTORY`
    parameter denotes that `include_guard` is defined at the directory scope, and
    this file can be included once at most within the current directory and below.
    Alternatively, the `GLOBAL` parameter can be specified instead of `DIRECTORY`
    to limit the inclusion of the file once, regardless of the scope.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`git.cmake`文件是一个CMake实用模块文件，其中包含三个宏，分别为`git_get_branch_name`、`git_get_head_commit_hash`和`git_get_config_value`。此外，文件顶部有一个`include_guard(DIRECTORY)`行。这类似于C/C++中的`#pragma
    once`预处理指令，防止该文件被多次包含。`DIRECTORY`参数表示`include_guard`在目录范围内定义，意味着该文件在当前目录及其下属目录中最多只能被包含一次。或者，也可以指定`GLOBAL`参数代替`DIRECTORY`，限制该文件无论作用域如何只被包含一次。'
- en: 'To see how we can use the `git.cmake` module file, let’s investigate the `CMakeLists.txt`
    file of `chapter13/ex01_git_utility` together:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解如何使用`git.cmake`模块文件，让我们一起查看`chapter13/ex01_git_utility`的`CMakeLists.txt`文件：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `CMakeLists.txt` file includes the `git.cmake` file by specifying the full
    relative path to the module file. The `git_get_branch_name`, `git_get_head_commit_hash`,
    and `git_get_config_value` macros provided by the module are used to retrieve
    the branch name, commit hash, author name, and email to the `current_branch_name`,
    `current_head`, `current_user_name`, and `current_user_email` variables respectively.
    Lastly, these variables are printed on the screen by the `message(…)` command.
    Let’s configure the example project to see whether the Git module we’ve just written
    works as expected:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`CMakeLists.txt`文件通过指定模块文件的完整相对路径来包含`git.cmake`文件。该模块提供的`git_get_branch_name`、`git_get_head_commit_hash`和`git_get_config_value`宏分别用于获取分支名称、提交哈希值、作者名称和电子邮件地址，并将其存储到`current_branch_name`、`current_head`、`current_user_name`和`current_user_email`变量中。最后，通过`message(…)`命令将这些变量打印到屏幕上。让我们配置示例项目，看看我们刚刚编写的Git模块是否按预期工作：'
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The output of the command should look similar to this:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 命令的输出应类似于以下内容：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As we can see, we have succeeded in retrieving the information from the `git`
    command. Our first CMake module works as expected.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，我们成功地从`git`命令中获取了信息。我们的第一个CMake模块按预期工作。
- en: Case study – dealing with project metadata files
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 案例研究——处理项目元数据文件
- en: 'Let’s continue with another example. Assume that we have an environment file
    that contains key-value pairs per line. It is not unusual to have external files
    in a project that contain some metadata about the project (for example, project
    version and dependencies). The file may be in different formats, such as JSON
    or newline-separated key-value pairs, as we have in this example. The task at
    hand is to create a utility module that reads the environment variable file and
    defines a CMake variable per key-value pair in the file. The contents of the file
    will look similar to this:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续另一个例子。假设我们有一个环境文件，其中每行包含一个键值对。在项目中包含外部文件以存储有关项目的一些元数据（例如项目版本和依赖关系）并不罕见。该文件可以有不同的格式，例如JSON格式或换行分隔的键值对，如我们在此示例中所见。当前任务是创建一个工具模块，读取环境变量文件并为文件中的每个键值对定义一个CMake变量。文件的内容将类似于以下内容：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'For this section, we will follow the `chapter13/ex02_envfile_utility` example.
    Let’s begin by examining the contents of `.cmake/envfile-utils.cmake`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本节，我们将参考`chapter13/ex02_envfile_utility`示例。让我们从检查`.cmake/envfile-utils.cmake`的内容开始：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `envfile-utils.cmake` utility module contains a single function, `read_environment_file`,
    which reads an environment file in the format of a list of key-value pairs. This
    function reads all the lines in the file to the `KVP_LIST` variable and then iterates
    through all lines. Each individual line is split by the (`=`) equals token, then
    the left side of the equals token is used as the variable name, whereas the right
    side is used as the variable value to define each key-value pair as a CMake variable.
    Empty lines and comments lines are skipped. As for the usage of the module, let’s
    have a look at the `chapter13/ex02_envfile_utility/CMakeLists.txt` file:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`envfile-utils.cmake`工具模块包含一个函数`read_environment_file`，该函数读取一个键值对列表格式的环境文件。该函数将文件中的所有行读取到`KVP_LIST`变量中，然后遍历所有行。每一行都通过（`=`）等号符号进行分割，等号左边的部分作为变量名，右边的部分作为变量值，将每个键值对定义为一个CMake变量。空行和注释行会被跳过。至于模块的使用情况，让我们看看`chapter13/ex02_envfile_utility/CMakeLists.txt`文件：'
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You may have noticed that the `.cmake` folder is added to the `CMAKE_MODULE_PATH`
    variable. The `CMAKE_MODULE_PATH` variable is the collection of paths that the
    `include(…)` directive will search in. By default, it is empty. This allows us
    to include the `envfile-utils` module directly by name in the current and the
    children `CMakeLists.txt` files. Lastly, let’s take a look at the `chapter13/ex02_envfile_utility/test-executable/CMakeLists.txt`
    file:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，`.cmake`文件夹被添加到了`CMAKE_MODULE_PATH`变量中。`CMAKE_MODULE_PATH`变量是`include(…)`指令将在其中搜索的路径集合。默认情况下，它是空的。这允许我们直接按名称在当前和子`CMakeLists.txt`文件中包含`envfile-utils`模块。最后，让我们看一下`chapter13/ex02_envfile_utility/test-executable/CMakeLists.txt`文件：
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'As you can see, the `envfile-utils` environment file reader module is included
    by name. This is because the folder that contains the `envfile-utils.cmake` file
    was appended to the `CMAKE_MODULE_PATH` variable before. The `read_environment_file()`
    function is called to read the `variables.env` file in the same folder. The `variables.env`
    file contains the following key-value pairs:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，`envfile-utils`环境文件读取模块按名称被包含。这是因为包含`envfile-utils.cmake`文件的文件夹之前已经添加到`CMAKE_MODULE_PATH`变量中。`read_environment_file()`函数被调用来读取同一文件夹中的`variables.env`文件。`variables.env`文件包含以下键值对：
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'So, after calling the `read_environment_file()` function, we expect the `TEST_PROJECT_VERSION`
    and `TEST_PROJECT_AUTHOR` variables to get defined in the current CMake scope,
    with their respective values specified in the file. To verify that, an executable
    target named `ch13_ex02_envfile_utility_test` is defined, and the `TEST_PROJECT_VERSION`
    and `TEST_PROJECT_AUTHOR` variables are passed into the target as macro definitions.
    Lastly, the target’s source file, `test.cpp`, prints the `TEST_PROJECT_VERSION`
    and `TEST_PROJECT_AUTHOR` macro definitions to the console:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在调用`read_environment_file()`函数之后，我们期望`TEST_PROJECT_VERSION`和`TEST_PROJECT_AUTHOR`变量在当前CMake作用域中定义，并且它们的相应值在文件中指定。为了验证这一点，定义了一个名为`ch13_ex02_envfile_utility_test`的可执行目标，并将`TEST_PROJECT_VERSION`和`TEST_PROJECT_AUTHOR`变量作为宏定义传递给该目标。最后，目标的源文件`test.cpp`将`TEST_PROJECT_VERSION`和`TEST_PROJECT_AUTHOR`宏定义打印到控制台：
- en: '[PRE16]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Alright – let’s compile and run the application to see whether this works or
    not:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 好的——让我们编译并运行应用程序，看看它是否有效：
- en: '[PRE17]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As we can see, we have successfully read a key-value pair formatted file from
    our source tree, defined each key-value pair as CMake variables, and then exposed
    these variables as macro definitions to our application.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，我们已成功地从源代码树中读取了一个键值对格式的文件，并将每个键值对定义为 CMake 变量，然后将这些变量作为宏定义暴露给我们的应用程序。
- en: 'Although writing CMake modules is very straightforward, there are a few extra
    recommendations to consider:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然编写 CMake 模块非常直接，但还是有一些额外的建议需要考虑：
- en: Always use unique names for your functions/macros
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 始终为函数/宏使用唯一的名称
- en: Use a common prefix for all module functions/macros
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为所有模块函数/宏使用一个共同的前缀
- en: Avoid using constant names for non-function scope variables
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免为非函数范围的变量使用常量名称
- en: Use `include_guard()` for your module
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `include_guard()` 来保护您的模块
- en: If your module prints messages, provide a quiet mode for your module
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您的模块输出消息，请为模块提供静默模式
- en: Do not expose your module’s internals
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要暴露模块的内部实现
- en: Use macros for simple command wrappers and functions for everything else
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于简单的命令包装器使用宏，对于其他情况使用函数
- en: With that said, we conclude this part of the chapter. Next, we will take a look
    at ways of sharing CMake modules between projects.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 说到这里，我们结束了本章这一部分的内容。接下来，我们将探讨如何在项目间共享 CMake 模块。
- en: Recommendations for sharing CMake modules between projects
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于项目间共享 CMake 模块的建议
- en: The recommended way of sharing CMake modules is by maintaining a separate project
    for CMake modules and then incorporating the project as an external resource,
    either directly by Git submodules/subtrees or CMake’s `FetchContent`, as described
    in [*Chapter 5*](B30947_05.xhtml#_idTextAnchor084), *Integrating Third-Party Libraries
    and Dependency Management*. When using `FetchContent`, external modules can be
    integrated easily by setting the `SOURCE_DIR` property and by setting the `CMAKE_MODULE_PATH`
    to the path specified. This way, all reusable CMake utilities can be maintained
    under a single project and can be propagated to all downstream projects. Putting
    CMake modules into a repository in an online Git hosting platform (such as GitHub
    or GitLab) will make using the module convenient for most people. Since CMake
    supports fetching content directly from Git, it will be straightforward to use
    the shared modules.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 共享 CMake 模块的推荐方式是维护一个独立的 CMake 模块项目，然后将该项目作为外部资源引入，可以通过 Git 子模块/子树或 CMake 的`FetchContent`进行，如在[*第5章*](B30947_05.xhtml#_idTextAnchor084)中所描述，*集成第三方库和依赖管理*。在使用
    `FetchContent` 时，可以通过设置 `SOURCE_DIR` 属性，并将 `CMAKE_MODULE_PATH` 设置为指定路径，轻松集成外部模块。这样，所有可重用的
    CMake 工具可以集中在一个项目中进行维护，并可以传播到所有下游项目。将 CMake 模块放入在线 Git 托管平台（如 GitHub 或 GitLab）中的仓库，将使大多数人方便使用该模块。由于
    CMake 支持直接从 Git 拉取内容，使用共享模块将变得非常简单。
- en: To demonstrate how we can use an external CMake module project, we will use
    an open source CMake utility module project named `hadouken` ([https://github.com/mustafakemalgilor/hadouken](https://github.com/mustafakemalgilor/hadouken)).
    This project contains CMake utility modules for tool integrations, target creation,
    and feature checks.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示如何使用外部 CMake 模块项目，我们将使用一个名为 `hadouken` 的开源 CMake 工具模块项目（[https://github.com/mustafakemalgilor/hadouken](https://github.com/mustafakemalgilor/hadouken)）。该项目包含用于工具集成、目标创建和特性检查的
    CMake 工具模块。
- en: 'For this part, we will follow the `chapter13/ex03_external_cmake_module` example.
    This example will fetch `hadouken`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这一部分，我们将按照`chapter13/ex03_external_cmake_module`示例进行操作。该示例将获取`hadouken`：
- en: '[PRE18]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In the preceding example, we used `FetchContent_Declare` and `FetchContent_MakeAvailable`
    to retrieve `hadouken` into our project and place it in the build directory in
    the `.hadouken` folder. Then, the `hadouken` project’s module directory was appended
    into `CMAKE_MODULE_PATH` to use the `hadouken` project’s CMake utility modules
    via the `include(…)` directive. With this, we can access the `make_target()` macro
    provided by the imported CMake module. We have reached another chapter’s end together.
    Up next, we’ll summarize what we have learned in this chapter and what we will
    learn in the upcoming chapter.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们使用了 `FetchContent_Declare` 和 `FetchContent_MakeAvailable` 将 `hadouken`
    拉取到我们的项目中，并将其放置在 `.hadouken` 文件夹中的构建目录里。然后，将 `hadouken` 项目的模块目录添加到 `CMAKE_MODULE_PATH`
    中，通过 `include(…)` 指令使用 `hadouken` 项目的 CMake 工具模块。这样，我们就能访问由导入的 CMake 模块提供的 `make_target()`
    宏。我们已经共同完成了这一章的内容。接下来，我们将总结本章所学的知识，并展望下一章的内容。
- en: Summary
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to structure a CMake project to support reusability.
    We learned how to implement CMake utility modules, how to share them, and how
    to use utility modules written by others. Having the ability to leverage CMake
    modules enables us to better organize our projects and better collaborate with
    our team members in unison. CMake projects will be much easier to maintain with
    this knowledge on hand. Common, reusable code between CMake projects will grow
    into an extensive collection of useful modules that make writing projects with
    CMake easier.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何构建CMake项目以支持可重用性。我们学习了如何实现CMake工具模块，如何共享它们，以及如何使用别人编写的工具模块。能够利用CMake模块使我们能够更好地组织项目，并更有效地与团队成员协作。掌握这些知识后，CMake项目将变得更易于维护。CMake项目中常用的可重用代码将发展成一个庞大的有用模块库，使得使用CMake编写项目变得更容易。
- en: I want to remind you that CMake is a scripting language and should be treated
    as such. Use software design principles and patterns to make CMake code more maintainable.
    Organize your CMake code into functions and modules. Reuse and share CMake code
    as much as possible. Please do not neglect your build system code, or you may
    have to write it from scratch.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我想提醒您，CMake是一种脚本语言，应该像对待脚本语言一样来使用。采用软件设计原则和模式，使CMake代码更具可维护性。将CMake代码组织成函数和模块。尽可能地重用和共享CMake代码。请不要忽视您的构建系统代码，否则您可能需要从头开始编写。
- en: In the next chapter, we will be learning about ways of optimizing and maintaining
    CMake projects.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何优化和维护CMake项目。
- en: See you soon in the next chapter!
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章见！
- en: Questions
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'After completing this chapter, you should be able to answer the following questions:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章后，您应该能够回答以下问题：
- en: What are the most fundamental building blocks of reusability in CMake?
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在CMake中，可重用性的最基本构建模块是什么？
- en: What is a CMake module?
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是CMake模块？
- en: How can a CMake module be used?
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何使用CMake模块？
- en: What is the `CMAKE_MODULE_PATH` variable used for?
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`CMAKE_MODULE_PATH`变量的用途是什么？'
- en: Name one way to share CMake modules between projects.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分享CMake模块给不同项目的一种方式是什么？
- en: What is the principal difference between a function and a macro in CMake?
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在CMake中，函数和宏的主要区别是什么？
- en: Answers
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 答案
- en: Functions and macros.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 函数和宏。
- en: A CMake module is a logical entity that contains CMake code, functions, and
    macros to serve a particular purpose.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CMake模块是一个逻辑实体，包含CMake代码、函数和宏，用于特定目的。
- en: By including it in the required scope.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将其包含在所需的作用域中。
- en: To add extra paths to the `include(…)` directive’s search path.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将额外的路径添加到`include(…)`指令的搜索路径中。
- en: By using Git submodules/subtrees or CMake’s `FetchContent`/`ExternalProject`
    modules.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用Git子模块/子树或CMake的`FetchContent`/`ExternalProject`模块。
- en: Functions define a new variable scope; macros do not.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 函数定义了一个新的变量作用域；宏则没有。
