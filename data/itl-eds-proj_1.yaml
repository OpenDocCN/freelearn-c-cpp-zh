- en: Setting up Intel Edison
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置英特尔Edison
- en: 'In every **Internet of Things** (**IoT**) or robotics project, we have a controller
    that is the brain of the entire system. Similarly, we have the Intel Edison. The
    Intel Edison computing module comes in two different packages: one is a mini-breakout
    board; the other is an Arduino-compatible board. One can use the board in its
    native state as well, but in that case the we have to fabricate our own expansion
    board. The Edison is basically the size of an SD card. Due to its tiny size, it''s
    perfect for wearable devices. However, it''s capabilities makes it suitable for
    IoT applications; and above all, the powerful processing capability, makes it
    suitable for robotics applications. However we don''t simply use the device in
    this state. We hook up the board with an expansion board. The expansion board
    provides the user with enough flexibility and compatibility for interfacing with
    other units. The Edison has an operating system that runs the entire system. It
    runs a Linux image. So, to set up your device, you initially need to configure
    your device both at the hardware and at the software level.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个**物联网**（**IoT**）或机器人项目中，我们都有一个控制器，它是整个系统的核心。同样，我们也有英特尔Edison。英特尔Edison计算模块有两种不同的包装：一个是迷你断开板；另一个是Arduino兼容板。您可以使用板的原生状态，但在这种情况下，我们必须自己制作扩展板。Edison基本上是SD卡的大小。由于其小巧的尺寸，它非常适合可穿戴设备。然而，它的功能使其适合物联网应用；更重要的是，强大的处理能力使其适合机器人应用。然而，我们并不简单地使用这种状态的设备。我们将板与扩展板连接起来。扩展板为用户提供足够的灵活性和兼容性，以便与其他单元接口。Edison有一个操作系统，它运行整个系统。它运行Linux镜像。因此，要设置您的设备，您最初需要在硬件和软件级别进行配置。
- en: 'In this chapter, we will be covering the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下主题：
- en: Setting up the Intel Edison
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置英特尔® Edison
- en: Setting up the developer environment
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置开发者环境
- en: Running sample programs on the board using Arduino IDE, Intel XDK, and others
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Arduino IDE、Intel XDK和其他工具在板上运行示例程序
- en: Interacting with the board by using our PC
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过我们的PC与主板交互
- en: Initial hardware setup
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始硬件设置
- en: 'We''ll concentrate on the Edison package that comes with an Arduino expansion
    board. Initially, you will get two different pieces:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将专注于随Arduino扩展板一起提供的Edison软件包。最初，您将获得两个不同的部件：
- en: The Intel® Edison board
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 英特尔® Edison主板
- en: The Arduino expansion board
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino扩展板
- en: 'The following figure shows the architecture of the device:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了设备的架构：
- en: '![](img/image_01_001.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_001.png)'
- en: 'Architecture of Intel Edison. Picture Credits: [http://www.software.intel.com](http://www.software.intel.com/)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 英特尔Edison的架构。图片来源：[http://www.software.intel.com](http://www.software.intel.com/)
- en: 'We need to hook these two pieces up in a single unit. Place the Edison board
    on top of the expansion board so that the GPIO interfaces meet at a single point.
    Gently push the Edison against the expansion board. You will hear a click. Use
    the screws that come with the package to tighten the setup. Once this is done,
    we''ll now set up the device both at hardware level and software level to be used
    further. The following are the steps we''ll cover in detail:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将这两部分连接成一个单元。将Edison主板放在扩展板上，以便GPIO接口在一点上相遇。轻轻推压Edison，您会听到一声点击。使用随包装提供的螺丝来紧固设置。一旦完成，我们现在将在硬件和软件级别设置设备以供进一步使用。以下是我们将详细介绍的步骤：
- en: Downloading the necessary software packages
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载必要的软件包
- en: Connecting your Intel® Edison to your PC
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的英特尔® Edison连接到您的PC
- en: Flashing your device with the Linux image
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Linux镜像刷写您的设备
- en: Connecting to a Wi-Fi network
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接到Wi-Fi网络
- en: SSH-ing your Intel® Edison device
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SSH您的英特尔® Edison设备
- en: Downloading the necessary software packages
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载必要的软件包
- en: 'To move forward with the development on this platform, we need to download
    and install a couple of software packages, which includes the drivers and the
    IDEs. The following is the list of the software along with the links that are
    required:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要在这个平台上进行开发，我们需要下载并安装一些软件包，包括驱动程序和IDE。以下是需要软件及其链接的列表：
- en: Intel® Platform Flash Tool Lite ([https://01.org/android-ia/downloads/intel-platform-flash-tool-lite](https://01.org/android-ia/downloads/intel-platform-flash-tool-lite))
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 英特尔®平台闪存工具Lite ([https://01.org/android-ia/downloads/intel-platform-flash-tool-lite](https://01.org/android-ia/downloads/intel-platform-flash-tool-lite))
- en: PuTTY ([http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html](http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html))
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PuTTY ([http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html](http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html))
- en: Intel XDK for IoT ([https://software.intel.com/en-us/intel-xdk](https://software.intel.com/en-us/intel-xdk))
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 英特尔XDK for IoT ([https://software.intel.com/en-us/intel-xdk](https://software.intel.com/en-us/intel-xdk))
- en: Arduino IDE ([https://www.arduino.cc/en/Main/Software](https://www.arduino.cc/en/Main/Software))
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino IDE ([https://www.arduino.cc/en/Main/Software](https://www.arduino.cc/en/Main/Software))
- en: FileZilla FTP client ([https://filezilla-project.org/download.php](https://filezilla-project.org/download.php))
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FileZilla FTP客户端 ([https://filezilla-project.org/download.php](https://filezilla-project.org/download.php))
- en: Notepad ++ or any other editor ([https://notepad-plus-plus.org/download/v7.3.html](https://notepad-plus-plus.org/download/v7.3.html))
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Notepad ++或其他任何编辑器 ([https://notepad-plus-plus.org/download/v7.3.html](https://notepad-plus-plus.org/download/v7.3.html))
- en: Drivers and miscellaneous downloads
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 驱动程序和其他下载
- en: 'Drivers and miscellaneous can be downloaded from:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 驱动程序和其他杂项可以从以下网址下载：
- en: Latest Yocto Poky image
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最新Yocto Poky镜像
- en: Windows standalone driver for the Intel Edison
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 英特尔爱迪生Windows独立驱动程序
- en: FTDI drivers ([http://www.ftdichip.com/Drivers/VCP.htm](http://www.ftdichip.com/Drivers/VCP.htm))
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FTDI驱动程序 ([http://www.ftdichip.com/Drivers/VCP.htm](http://www.ftdichip.com/Drivers/VCP.htm))
- en: The first and the second packages can be downloaded from [https://software.intel.com/en-us/iot/hardware/edison/downloads](https://software.intel.com/en-us/iot/hardware/edison/downloads).
    [](https://software.intel.com/en-us/iot/hardware/edison/downloads)
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 可以从[https://software.intel.com/en-us/iot/hardware/edison/downloads](https://software.intel.com/en-us/iot/hardware/edison/downloads)下载第一个和第二个软件包。
    [](https://software.intel.com/en-us/iot/hardware/edison/downloads)
- en: Plugging in your device
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插入您的设备
- en: 'After the software and drivers have all been installed, we''ll connect the
    device to a PC. You need two Micro-B USB cables(s) to connect your device to the
    PC. You can also use a 9V power adapter and a single Micro-B USB cable, but for
    now we won''t use the power adapter. The main use of the power adapter will come
    in a later section of this book, especially when we''ll be interfacing with other
    devices that require USB.The following figure shows different sections of an Arduino
    expansion board of the Intel Edison:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 软件和驱动程序安装完成后，我们将把设备连接到电脑。您需要两条Micro-B USB线来连接您的设备到电脑。您也可以使用9V电源适配器和一条Micro-B
    USB线，但现阶段我们不会使用电源适配器。电源适配器的主要用途将在本书的后续章节中介绍，特别是当我们需要与需要USB接口的其他设备交互时。以下图显示了英特尔爱迪生Arduino扩展板的各个部分：
- en: '![](img/image_01_002.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_002.png)'
- en: Different sections of an Arduino expansion board of Intel Edison
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 英特尔爱迪生Arduino扩展板的各个部分
- en: 'A small switch exists between the USB port and the OTG port. This switch must
    be towards the OTG port because we''re going to power the device from the OTG
    port and not through the DC power port. Once it is connected to your PC, open
    your device manager and expand the ports section. If all the installations of
    the drivers were successful, then you''ll see two ports:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在USB端口和OTG端口之间存在一个小开关。这个开关必须指向OTG端口，因为我们将从OTG端口为设备供电，而不是通过直流电源端口供电。一旦连接到您的电脑，打开设备管理器并展开端口部分。如果所有驱动程序的安装都成功了，您将看到两个端口：
- en: Intel Edison virtual com port
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 英特尔爱迪生虚拟串行端口
- en: USB serial port
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: USB串行端口
- en: Flashing your device
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 烧录您的设备
- en: 'Once your device is successfully detected and installed, you need to flash
    your device with the Linux image. For this we''ll use the flash tool provided
    by Intel:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的设备成功检测并安装，您需要使用Linux镜像对设备进行烧录。为此，我们将使用英特尔提供的闪存工具：
- en: 'Open the flash lite tool and connect your device to the PC:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开闪存轻量级工具并将您的设备连接到电脑：
- en: '![](img/image_01_003.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_003.png)'
- en: Intel phone flash lite tool
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 英特尔手机闪存轻量级工具
- en: Once the flash tool is opened, click on Browse... and browse to the `.zip` file
    of the Linux image you have downloaded.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开闪存工具后，点击“浏览...”并浏览到您下载的Linux镜像的`.zip`文件。
- en: After you click on OK, the tool will automatically unzip the file.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“确定”后，工具将自动解压文件。
- en: 'Next, click on Start to flash:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击“开始”以进行烧录：
- en: '![](img/image_01_004.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_004.png)'
- en: Intel® Phone flash lite tool — stage 1
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Intel® Phone flash lite tool — stage 1
- en: You will be asked to disconnect and reconnect your device. Do this, and the
    board should start flashing. It may take some time before the flashing is completed.
    Don't tamper with the device during this process.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将被要求断开并重新连接您的设备。这样做，板子应该开始烧录。烧录完成可能需要一些时间。在此过程中不要干扰设备。
- en: 'Once the flashing is completed, we can configure the device:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 烧录完成后，我们可以配置设备：
- en: '![](img/image_01_005.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_005.png)'
- en: Intel® Phone flash lite tool — complete
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Intel® Phone flash lite工具 — 完成
- en: Configuring the device
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置设备
- en: After flashing successfully, we'll now configure the device. We're going to
    use the PuTTY console for the configuration. PuTTY is an SSH and telnet client,
    developed originally by Simon Tatham for the Windows platform. We're going to
    use the Serial section here.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 焊接成功后，我们现在将配置设备。我们将使用PuTTY控制台进行配置。PuTTY最初由Simon Tatham为Windows平台开发的一个SSH和telnet客户端。我们将在这里使用串行部分。
- en: 'Before opening the PuTTY console, open up the Device manager and note the port
    number for the USB serial port. This will be used in your PuTTY console:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在打开PuTTY控制台之前，打开设备管理器并记下USB串行端口的端口号。这将在你的PuTTY控制台中使用：
- en: '![](img/image_01_006.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_006.png)'
- en: Ports for Intel® Edison in PuTTY
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Intel® Edison在PuTTY中的端口
- en: 'Next, select Serial on the PuTTY console and enter the port number. Use a baud
    rate of `115,200`. Press Open to open the window for communicating with the device:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在PuTTY控制台中选择串行，并输入端口号。使用波特率为`115,200`。按*Open*打开与设备通信的窗口：
- en: '![](img/image_01_007.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_007.png)'
- en: PuTTY console — login screen
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: PuTTY控制台 — 登录界面
- en: 'Once you are in the PuTTY console, you can execute commands to configure your
    Edison. The following is the set of tasks we''ll do in the console to configure
    the device:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你进入PuTTY控制台，你可以执行命令来配置你的Edison。以下是我们将在控制台中执行的任务集以配置设备：
- en: Provide a name for your device.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为你的设备提供一个名称。
- en: Provide a root password (SSH your device).
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供一个root密码（SSH你的设备）。
- en: Connect your device to Wi-Fi.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的设备连接到Wi-Fi。
- en: 'Initially, when in the console, you will be asked to log in. Type in `root`
    and press *Enter*. You will see root@edison, which means that you are in the `root`
    directory:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 初始时，在控制台中，你会被要求登录。输入`root`并按*Enter*键。你会看到root@edison，这意味着你已经在`root`目录下：
- en: '![](img/image_01_008.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_008.png)'
- en: PuTTY console — login success
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: PuTTY控制台 — 登录成功
- en: 'Now, we are in the Linux Terminal of the device. Firstly, we''ll enter the
    following command for the setup:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们进入了设备的Linux终端。首先，我们将输入以下命令进行设置：
- en: '[PRE0]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Press *Enter* after entering the command, and the entire configuration will
    be straightforward:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 输入命令后按*Enter*键，整个配置将非常直接：
- en: '![](img/image_01_009.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_009.png)'
- en: PuTTY console — set password
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: PuTTY控制台 — 设置密码
- en: 'Firstly, you will be asked to set a password. Type in a password and press
    *Enter*. You need to type in your password again for confirmation. Next, we''ll
    set up a name for the device:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你会被要求设置一个密码。输入一个密码并按*Enter*键。你需要再次输入你的密码以进行确认。接下来，我们将为设备设置一个名称：
- en: '![](img/image_01_010.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_010.png)'
- en: PuTTY console — set name
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: PuTTY控制台 — 设置名称
- en: 'Give a name for your device. Please note that this is not the login name for
    your device. It''s just an alias for your device. Also the name should be atleast
    five characters long. Once you''ve entered the name, it will ask for confirmation:
    press *y* to confirm. Then it will ask you to set up Wi-Fi. Again select *y* to
    continue. It''s not mandatory to set up Wi-Fi, but it''s recommended. We need
    the Wi-Fi for file transfer, downloading packages, and so on:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为你的设备提供一个名称。请注意，这并不是你的设备的登录名。它只是你的设备的别名。此外，名称至少应该有五个字符长。一旦你输入了名称，它会要求你确认：按*y*进行确认。然后它会要求你设置Wi-Fi。再次选择*y*继续。设置Wi-Fi不是强制性的，但建议这样做。我们需要Wi-Fi进行文件传输、下载软件包等：
- en: '![](img/image_01_011.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_011.png)'
- en: PuTTY console — set Wi-Fi
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: PuTTY控制台 — 设置Wi-Fi
- en: 'Once the scanning is completed, we''ll get a list of available networks. Select
    the number corresponding to your network and press *Enter*. In this case, it''s
    `5`, which corresponds to avirup171 which is my Wi-Fi. Enter the network credentials.
    After you do that, your device will be connected to Wi-Fi. You should get an IP
    address after your device is connected:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦扫描完成，我们会得到一个可用网络列表。选择与你的网络对应的数字并按*Enter*键。在这种情况下，是`5`，对应avirup171，这是我使用的Wi-Fi。输入网络凭据。完成这些操作后，你的设备将连接到Wi-Fi。设备连接后，你应该会得到一个IP地址：
- en: '![](img/image_01_012.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_012.png)'
- en: PuTTY console — set Wi-Fi -2
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: PuTTY控制台 — 设置Wi-Fi -2
- en: 'After successful connection, you should get this screen. Make sure your PC
    is connected to the same network. Open up the browser in your PC, and enter the
    IP address shown in the console. You should get a screen similar to this:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 连接成功后，你应该会看到这个屏幕。确保你的PC连接到相同的网络。在你的PC上打开浏览器，并输入控制台中显示的IP地址。你应该会看到一个类似的屏幕：
- en: '![](img/image_01_013.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_013.png)'
- en: Wi-Fi setup — completed
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Wi-Fi设置 — 完成
- en: Now, we've finished with the initial setup. However, the Wi-Fi setup normally
    doesn't happen in one go. Sometimes your device doesn't get connected to Wi-Fi
    and sometimes we cannot get the page shown previously. In those cases, you need
    to start `wpa_cli` to manually configure Wi-Fi.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经完成了初始设置。然而，Wi-Fi 设置通常不会一次性完成。有时您的设备无法连接到 Wi-Fi，有时我们无法获取之前显示的页面。在这些情况下，您需要启动
    `wpa_cli` 来手动配置 Wi-Fi。
- en: 'Refer to the following link for the details:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 有关详细信息，请参阅以下链接：
- en: '[http://www.intel.com/content/www/us/en/support/boards-and-kits/000006202.html](http://www.intel.com/content/www/us/en/support/boards-and-kits/000006202.html)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[英特尔支持](http://www.intel.com/content/www/us/en/support/boards-and-kits/000006202.html)'
- en: 'With Wi-Fi setup completed, we can move forward to set up our developer environment.
    We''ll cover the following programming languages and the respective IDEs:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Wi-Fi 设置完成后，我们可以继续设置我们的开发环境。我们将介绍以下编程语言及其相应的 IDE：
- en: Arduino processor language (C/C++)
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino 处理器语言（C/C++）
- en: Python
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python
- en: Node.js
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js
- en: Arduino IDE
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Arduino IDE
- en: 'The Arduino IDE is a famous, and widely used, integrated developer environment
    that not only covers Arduino boards but also many other boards of Intel including
    Galileo, Edison, Node MCU, and so on. The language is based on C/C++. Once you
    download the Arduino IDE from the link mentioned at the beginning of this chapter,
    you may not receive the Edison board package. We need to manually download the
    package from the IDE itself. To do that, open up your Arduino IDE, and then go
    to Tools | Board: "Arduino/Genuino Uno" | Board Manager...:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino IDE 是一个著名且广泛使用的集成开发环境，它不仅涵盖了 Arduino 板，还包括英特尔的其他许多板，如 Galileo、Edison、Node
    MCU 等。该语言基于 C/C++。一旦您从本章开头提到的链接下载了 Arduino IDE，您可能不会收到 Edison 板的软件包。我们需要从 IDE
    本身手动下载该软件包。为此，打开您的 Arduino IDE，然后转到工具 | 板： "Arduino/Genuino Uno" | 板管理器...：
- en: '![](img/image_01_014.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_01_014.png)'
- en: Arduino IDE
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino IDE
- en: 'You now need to click on Boards Manager and select Intel i686 Boards. Click
    on the version number and then click on Install. Boards Manager is an extremely
    important component of the IDE. We use the Boards Manager to add external Arduino-compatible
    boards:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在需要点击板管理器并选择英特尔 i686 板。点击版本号，然后点击安装。板管理器是 IDE 的一个极其重要的组件。我们使用板管理器来添加外部兼容 Arduino
    的板：
- en: '![](img/image_01_015.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_01_015.png)'
- en: Boards Manager
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 板管理器
- en: 'Once installed, you should see your board displayed under Tools Boards:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装，您应该会在工具 | 板下看到您的板：
- en: '![](img/image_01_016.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_01_016.png)'
- en: Board installation successful
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 板安装成功
- en: 'Once successfully installed, you will now be able to program the device using
    the IDE. Like every starter program, we''ll also be burning a simple program into
    the Intel Edison which will blink the on-board LED at certain intervals set by
    us. Through this, the basic structure of the program using the Arduino IDE will
    also be clear. When we initially open the IDE, we get two functions:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦成功安装，您现在将能够使用 IDE 编程设备。像每个入门程序一样，我们还将烧录一个简单的程序到英特尔 Edison，使其以我们设定的间隔闪烁板上的
    LED。通过这种方式，使用 Arduino IDE 的程序基本结构也将变得清晰。当我们最初打开 IDE 时，我们得到两个函数：
- en: '`void setup()`'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`void setup()`'
- en: '`void loop()`'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`void loop()`'
- en: 'The setup function is the place where we declare whether the pins are to be
    configured in output mode or input mode. We also start various other services,
    such as serial port communication, in the setup method. Depending on the usecase,
    the implementation changes. The loop method is that segment of the code that executes
    repeatedly in an infinite sequence. Our main logic goes in here. Now we need to
    blink an LED with an interval of 1 second:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 设置函数是我们声明引脚是否要配置为输出模式或输入模式的地方。我们还在设置方法中启动各种其他服务，例如串行端口通信。根据用例，实现方式会有所不同。循环方法是指代码在无限序列中重复执行的段。我们的主要逻辑在这里。现在我们需要以
    1 秒的间隔闪烁一个 LED：
- en: '[PRE1]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the preceding code, the line `#define LED_PIN 13` is a macro for defining
    the LED pin. In the Arduino expansion board, an LED and a resistor is already
    attached to `pin 13`, so we do not need to attach any additional LEDs for now.
    In the setup function, we have defined the configuration of the pin as output
    using the pinMode function with two parameters. In the loop function, we have
    initially set the pin to high by using the `digitalWrite` function with two parameters,
    and then we've defined a delay of 1,000 miliseconds which is equivalent of 1 second.
    After the delay, we set the pin to low and then again define a delay of 1 second.
    The preceding code explains the basic structure of the Arduino code written in
    the Arduino IDE.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，行`#define LED_PIN 13`是一个用于定义LED引脚的宏。在Arduino扩展板上，一个LED和一个电阻已经连接到`pin
    13`，因此我们现在不需要连接任何额外的LED。在`setup`函数中，我们使用`pinMode`函数和两个参数定义了引脚的配置为输出。在`loop`函数中，我们最初使用`digitalWrite`函数和两个参数将引脚设置为高，然后定义了一个1,000毫秒的延迟，相当于1秒。延迟后，我们将引脚设置为低，然后再次定义一个1秒的延迟。前面的代码解释了在Arduino
    IDE中编写的Arduino代码的基本结构。
- en: 'To burn this program to the Edison device, first compile the code using the
    compile button, then select the port number of your device, and finally click
    the Upload button to upload the code:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 要将此程序烧录到Edison设备上，首先使用编译按钮编译代码，然后选择设备的端口号，最后点击上传按钮上传代码：
- en: '![](img/image_01_017.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_01_017.png)'
- en: Arduino IDE — blink
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino IDE — 闪烁
- en: The port number can be selected under Tools | port.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 端口号可以在“工具 | 端口”下选择。
- en: Now that we know how to program using an Arduino, let's have a look at how it
    actually works or what's happening inside the Arduino IDE.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了如何使用Arduino编程，让我们看看它实际上是如何工作的，或者Arduino IDE内部发生了什么。
- en: 'A number of steps actually happen while uploading the code:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在上传代码的过程中，实际上会发生一系列步骤：
- en: First, the Arduino environment performs some small transformations to make sure
    that the code is correct C or C++ (two common programming languages).
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，Arduino环境执行一些小的转换，以确保代码是正确的C或C++（两种常见的编程语言）。
- en: It then gets passed to a compiler (`avr-gcc`), which turns the human readable
    code into machine readable instructions (or object files).
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接着，它被传递给一个编译器（`avr-gcc`），将可读性代码转换为机器可读指令（或目标文件）。
- en: Then, your code gets combined with (linked against), the standard Arduino libraries
    that provide basic functions such as `digitalWrite()` or `Serial.print()`. The
    result is a single Intel hex file, which contains the specific bytes that need
    to be written to the program memory of the chip on the Arduino board.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，你的代码将与标准Arduino库（链接到）结合，这些库提供了基本功能，例如`digitalWrite()`或`Serial.print()`。结果是单个Intel
    hex文件，其中包含需要写入Arduino板上芯片程序内存的特定字节。
- en: This file is then uploaded to the board, transmitted over the USB or serial
    connection via the bootloader already on the chip or with external programming
    hardware.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，该文件被上传到板子上，通过USB或串行连接通过芯片上已存在的引导加载程序或外部编程硬件进行传输。
- en: Python
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python
- en: Edison can also be programmed in Python. The code needs to be run on the device
    directly. We can either directly program the device, using any editor, such as
    the VI editor, or write the code in the PC first, and then transfer it using any
    FTP client, like FileZilla. Here we'll first write the code using Notepad++ and
    then transfer the script. Here also, we'll be executing a simple script which
    will blink the on-board LED. While dealing with Python and hardware, we need to
    use the MRAA library to interface with the GPIO pins. This is a low-level skeleton
    library for communication on GNU/Linux platforms. It supports almost all of the
    widely-used Linux-based boards. So, initially you need to install the library
    on the board.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Edison也可以用Python编程。代码需要在设备上直接运行。我们可以直接使用任何编辑器（如VI编辑器）编程设备，或者首先在PC上编写代码，然后使用任何FTP客户端（如FileZilla）传输。这里我们首先使用Notepad++编写代码，然后传输脚本。这里我们也将执行一个简单的脚本，该脚本将使板载LED闪烁。在处理Python和硬件时，我们需要使用MRAA库来与GPIO引脚接口。这是一个用于GNU/Linux平台通信的低级骨架库。它支持几乎所有广泛使用的基于Linux的板子。因此，最初您需要在板上安装这个库。
- en: Open up PuTTY and log in to your device. Once logged in, we'll add AlexT's unofficial
    `opkg` repository.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 打开PuTTY并登录到您的设备。登录后，我们将添加AlexT的非官方`opkg`仓库。
- en: 'To do that, add the following lines to `/etc/opkg/base-feeds.conf` using the
    VI editor:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，请使用VI编辑器将以下行添加到`/etc/opkg/base-feeds.conf`中：
- en: '[PRE2]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, `update` the package manager and `install git` by executing the following
    commands:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过执行以下命令更新包管理器并安装git：
- en: '[PRE3]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We''ll clone Edison-scripts from GitHub to simplify certain things:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从GitHub克隆Edison-scripts以简化某些事情：
- en: '[PRE4]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next we''ll add `~/edison-scripts` to the path:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将`~/edison-scripts`添加到路径中：
- en: '[PRE5]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We'll now run the following scripts to complete the process. Please note that
    the previous steps will not only configure the device for MRAA, but will also
    set up the environment for later projects in this book.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将运行以下脚本以完成此过程。请注意，前面的步骤不仅会为MRAA配置设备，还会为本书中的后续项目设置环境。
- en: 'Firstly, run the following script. Just type:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，运行以下脚本。只需输入：
- en: '[PRE6]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The previous package is the Python package manager. This will be used to install
    essential Python packages to be used in a later part of this book. Finally, we''ll
    install Mraa by executing the following command:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的包是Python包管理器。这将在本书的后续部分中用于安装必要的Python包。最后，我们将通过执行以下命令安装Mraa：
- en: '[PRE7]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: MRAA is a low-level skeleton library for communication on GNU/Linux platforms.
    `Libmraa` is a C/C++ library with bindings to Java, Python, and JavaScript to
    interface with the IO on Galileo, Edison, and other platforms. In simple words,
    it allows us to operate on the IO pins.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: MRAA是GNU/Linux平台上的低级骨架库，用于通信。`Libmraa`是一个C/C++库，具有与Java、Python和JavaScript的绑定，用于与Galileo、Edison和其他平台上的IO接口。简单来说，它允许我们在IO引脚上操作。
- en: 'Once the preceding steps have completed, we are good to go with the code for
    Python. For that, open up any code editor, such as Notepad++, and type in the
    following code:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 完成前面的步骤后，我们可以开始编写Python代码。为此，打开任何代码编辑器，例如Notepad++，并输入以下代码：
- en: '[PRE8]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Please save the preceding code as a `.py` extension such as `blink.py`, and
    now, we'll explain it line by line.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 请将前面的代码保存为`.py`扩展名，例如`blink.py`，现在，我们将逐行解释它。
- en: 'Initially, using the import statements, we import two libraries: MRAA and time.
    MRAA is required for interfacing with the GPIO pins:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 初始时，使用导入语句，我们导入两个库：MRAA和time。MRAA是用于与GPIO引脚接口的底层骨架库：
- en: '[PRE9]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here we initialize the LED pin and set it to the output mode:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们初始化LED引脚并将其设置为输出模式：
- en: '[PRE10]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the preceding block, we put our main logic in an infinite loop block. Now,
    we will transfer this to our device. To do that again, go to the PuTTY console
    and type `ifconfig`. Under the `wlan0` section, note down your IP address:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的块中，我们将我们的主要逻辑放在一个无限循环块中。现在，我们将将其传输到我们的设备。为此再次进入PuTTY控制台，并输入`ifconfig`。在`wlan0`部分下，记下你的IP地址：
- en: '![](img/image_01_018.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_018.jpg)'
- en: IP address to be used
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用的IP地址
- en: 'Now open up FileZilla and enter your credentials. Make sure your device and
    your PC are on the same network:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 现在打开FileZilla并输入你的凭据。确保你的设备和你的PC在同一个网络中：
- en: 'Host: The IP address you got according to the preceding screenshot: `192.168.0.101`'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机：根据前面的截图获取的IP地址：`192.168.0.101`
- en: 'Username: `root` because you will be logging in to the root directory'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户名：`root`，因为你将登录到根目录
- en: 'Password: Your Edison password'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密码：你的Edison密码
- en: 'Port: `22`'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端口：`22`
- en: Once entered, you will get the folder structure of the device. We'll now transfer
    the Python code from our PC to the device. To do that, just locate your `.py`
    file in Windows Explorer and drag and drop the file in the FileZilla console's
    Edison's folder. For now, just paste the file under `root`. Once you do that and
    if it's a success, the file should be visible in your Edison device by accessing
    the PuTTY console and executing the `ls` command.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 输入后，你将获得设备的文件夹结构。现在，我们将从我们的PC将Python代码传输到设备。为此，只需在Windows资源管理器中找到你的`.py`文件，并将其拖放到FileZilla控制台Edison文件夹中。目前，只需将文件粘贴到`root`目录下。一旦这样做并且成功，通过访问PuTTY控制台并执行`ls`命令，文件应该在你的Edison设备中可见。
- en: 'Another alternative is to locate your file on the left-hand side of FileZilla;
    once located, just right-click on the file and click Upload. The following is
    the typical screenshot of the FileZilla windows:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种选择是在FileZilla的左侧找到你的文件；一旦找到，只需右键单击文件并点击上传。以下是FileZilla窗口的典型截图：
- en: '![](img/image_01_019.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_019.png)'
- en: FileZilla application
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: FileZilla应用程序
- en: 'Once transferred and successfully listed using the `ls` command, we are going
    to run the script. To run the script, in the PuTTY console, go to your `root`
    directory and type in the following command:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦传输并成功使用`ls`命令列出，我们将运行脚本。要运行脚本，在PuTTY控制台中，转到你的`root`目录，并输入以下命令：
- en: '[PRE11]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If the file is present, then you should get the LED blinking on your device.
    Congrats! You have successfully written a Python script on your Edison board.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文件存在，那么您应该会在设备上看到LED闪烁。恭喜！您已经在Edison板上成功编写了Python脚本。
- en: Intel XDK for IoT (Node.js)
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Intel XDK for IoT (Node.js)
- en: 'Another IDE we will be covering is the powerful cross-platform development
    tool by Intel: Intel XDK. This will be used to run our Node.js scripts. Ideally
    we run our Node.js scripts from the XDK, but there is always an option to do the
    same by just transferring the `.js` file to your device using an FTP client such
    as FileZilla and use node `FileName.js` to run your script. From the list of downloaded
    software provided at the beginning of this chapter, download and install the XDK
    and open it. You may be required to sign in to the Intel developer zone. Once
    done, open your XDK. Then, under IoT embedded applications, select a Blank IoT
    Node.js Template:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将介绍另一个IDE，这是英特尔强大的跨平台开发工具：Intel XDK。这将用于运行我们的Node.js脚本。理想情况下，我们从XDK运行Node.js脚本，但始终有选项通过使用FTP客户端（如FileZilla）将`.js`文件传输到您的设备，并使用`node
    FileName.js`来运行您的脚本。从本章开头提供的下载软件列表中下载并安装XDK，然后打开它。您可能需要登录到英特尔开发者区。完成后，打开您的XDK。然后，在物联网嵌入式应用程序下，选择一个空白物联网Node.js模板：
- en: '![](img/image_01_020.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_020.jpg)'
- en: Screenshot for XDK
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: XDK截图
- en: 'Once opened, replace all the existing code with the following code:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦打开，将所有现有代码替换为以下代码：
- en: '[PRE12]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If you have a close look at the code, then you may notice that the structure
    of the code remains more or less similar as that of the other two platforms. We
    initially import the `MRAA` library:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您仔细查看代码，可能会注意到代码的结构与其他两个平台的大致相似。我们最初导入`MRAA`库：
- en: '[PRE13]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We also display the version of `MRAA` installed (you can skip this step). The
    next task is to initialize and configure the pin to be in output or input mode:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还显示安装的`MRAA`版本（您可以跳过此步骤）。下一个任务是初始化和配置引脚为输出或输入模式：
- en: '[PRE14]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We use `ledState` to get the present state of the LED. Next, we define the
    logic in a separate function for blinking:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`ledState`来获取LED的当前状态。接下来，我们定义一个单独的函数来闪烁逻辑：
- en: '[PRE15]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Finally, we call the function. On close inspection of the code, it's evident
    that the we have used only one delay in milliseconds as we are checking the present
    state using the tertiary operator. In order to execute the code on the device,
    we need to connect our device first.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们调用函数。仔细检查代码，很明显我们只使用了一个毫秒级的延迟，因为我们使用三元运算符检查当前状态。为了在设备上执行代码，我们首先需要连接我们的设备。
- en: 'To connect your device to the XDK, go to the IoT Device section, and click
    on the dropdown. You may see your device in the dropdown. If you see it, then
    click on Connect:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 要将您的设备连接到XDK，请转到物联网设备部分，然后点击下拉菜单。您可能会在下拉菜单中看到您的设备。如果您看到了，请点击连接：
- en: '![](img/image_01_021.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_021.jpg)'
- en: XDK screenshot — connection pane
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: XDK截图 — 连接面板
- en: 'If the device is not listed, then we need to add a manual connection. Click
    on Add Manual Connection, then add the credentials:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 如果设备未列出，则需要添加手动连接。点击添加手动连接，然后添加凭证：
- en: '![](img/image_01_022.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_022.png)'
- en: Screenshot for manual connection
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 手动连接截图
- en: 'In the address, put in the IP which was used in FileZilla. In the Username,
    insert `root`, and the password is the password that was set before. Click on
    Connect and your device should be connected. Click on Upload to upload the program
    and Run to run the program:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在地址中，输入FileZilla中使用的IP地址。在用户名中插入`root`，密码是之前设置的密码。点击连接，您的设备应该会连接。点击上传以上传程序，点击运行以运行程序：
- en: '![](img/image_01_023.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_01_023.jpg)'
- en: Screenshot for uploading and executing the code
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 上传和执行代码截图
- en: After uploading, the LED that is attached to pin `13` should blink. Normally,
    when dealing with complex projects, we go for blank templates so that it's easy
    to customize and do the stuff we need.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 上传后，连接到`13`引脚的LED应该闪烁。通常，在处理复杂项目时，我们选择空白模板，以便更容易自定义并完成所需的工作。
- en: For more examples and details on the XDK are available at: [https://software.intel.com/en-us/getting-started-with-xdk-and-iot](https://software.intel.com/en-us/getting-started-with-xdk-and-iot)
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 更多示例和XDK的详细信息可在：[https://software.intel.com/en-us/getting-started-with-xdk-and-iot](https://software.intel.com/en-us/getting-started-with-xdk-and-iot)
- en: Summary
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we've covered the initial setup of the Intel Edison and configuring
    it to the network. We have also looked at how to transfer files to and from the
    Edison, and set up the developer environment for Arduino, Python, and Node.js.
    We did some sample programming, blinking an LED, using all three platforms. Through
    this, we've gained a fair knowledge of operating the Edison and developing simple
    to complex projects.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了英特尔爱迪生的初始设置以及如何将其配置到网络中。我们还探讨了如何将文件传输到爱迪生以及从爱迪生传输文件，并设置了Arduino、Python和Node.js的开发环境。我们进行了一些示例编程，例如闪烁LED灯，使用了这三个平台。通过这个过程，我们对操作爱迪生和开发简单到复杂的项目有了相当的了解。
- en: In [Chapter 2](bada9944-ec60-4e8f-8d88-0085dd1c8210.xhtml), *Weather Station
    (IoT)*, we'll build a mini-weather station and will be able to deploy a project
    on the Intel Edison.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第二章](bada9944-ec60-4e8f-8d88-0085dd1c8210.xhtml)《气象站（物联网）》，我们将构建一个迷你气象站，并能够将项目部署在英特尔爱迪生（Intel
    Edison）上。
