- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: 'The art of high-performance programming is making a comeback. I started programming
    in the days when the programmer had to know where every bit of data went (sometimes
    quite literally – with switches on the front panel). Now, computers have more
    than enough power for everyday tasks. Sure, there have always been domains where
    there is never enough computing power. But most programmers could get away with
    writing inefficient code. This is not a bad thing, by the way: free from performance
    constraints, the programmer could focus on making the code better in other ways.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 高性能编程艺术正在复苏。我开始编程的时候，程序员必须知道每一位数据的去向（有时确实如此——通过前面板上的开关）。现在，计算机已经具有足够的能力来完成日常任务。当然，总是有一些领域永远不够计算能力。但大多数程序员可以写出效率低下的代码。顺便说一句，这并不是一件坏事：摆脱了性能约束，程序员可以专注于以其他方式改进代码。
- en: 'The very first thing this book explains, then, is why more and more programmers
    are forced to pay attention to performance and efficiency again. This will set
    the tone for the entire book because it defines the methodology we will be using
    in subsequent chapters: knowledge about performance must ultimately come from
    measurements, and every performance-related claim must be supported by data.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这本书首先解释的是为什么越来越多的程序员被迫再次关注性能和效率。这将为整本书设定基调，因为它定义了我们在后续章节中将使用的方法论：关于性能的知识最终必须来自测量，并且每个与性能相关的声明都必须有数据支持。
- en: 'There are five components, five elements that together determine the performance
    of a program. First, we delve into the details and explore the low-level foundation
    of all things performance: our computing hardware (no switches – promise, those
    days are gone). From the individual components – processors and memory – we work
    our way up to multiprocessor computing systems. Along the way, we learn about
    the memory model, the cost of data sharing, and even lock-free programming.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 有五个组成部分，五个元素共同决定了程序的性能。首先，我们深入探讨细节，探索一切性能的低级基础：我们的计算硬件（没有开关——承诺，那些日子已经过去了）。从个别组件——处理器和内存——我们逐步过渡到多处理器计算系统。在这一过程中，我们了解了内存模型、数据共享的成本，甚至无锁编程。
- en: The second component of high-performance programming is an efficient use of
    the programming language. It is at this point that the book becomes much more
    C++-specific (other languages have their own *favorite* inefficiencies). Following
    closely is the third element, the skill to help the compiler improve the performance
    of your programs.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 高性能编程的第二个组成部分是对编程语言的有效使用。在这一点上，本书变得更加具体于C++（其他语言有它们自己的*喜爱*的低效性）。紧随其后的是第三个元素，即帮助编译器改进程序性能的技能。
- en: 'The fourth component is the design. Arguably, it should be the first one: if
    the design is not done with performance as one of its explicit goals, it is almost
    impossible to add good performance later as an afterthought. We study designing
    for performance last, however, since this is a high-level concept and it brings
    together all the knowledge we will have acquired earlier.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 第四个组成部分是设计。可以说，这应该是第一个：如果设计没有将性能作为明确目标之一，几乎不可能事后再添加良好的性能。然而，我们最后学习设计性能，因为这是一个高层概念，它汇集了我们之前所学到的所有知识。
- en: The final, fifth element of high-performance programming is you, the reader.
    Your knowledge and skill will ultimately determine the result. To help you learn,
    the book includes many examples that can be used for hands-on exploration and
    self-study. The learning does not have to stop after you turn over the last page.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 高性能编程的最终第五要素是你，读者。你的知识和技能最终将决定结果。为了帮助你学习，本书包含许多示例，可用于实践探索和自学。学习在你翻过最后一页后并不需要停止。
- en: Who is this book for?
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这本书是为谁而写的？
- en: This book is for experienced developers and programmers who work on performance-critical
    projects and want to learn different techniques to improve the performance of
    their code. Programmers who belong to computer modeling, algorithmic trading,
    gaming, bioinformatics, physics-based simulations, computer-aided design, computational
    genomics, or computational fluid dynamics communities can learn various techniques
    from this book and apply them in their domain of work.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书适用于有经验的开发人员和程序员，他们在性能关键项目上工作，并希望学习改进其代码性能的不同技术。属于计算机建模、算法交易、游戏、生物信息学、基于物理的模拟、计算机辅助设计、计算基因组学或计算流体动力学社区的程序员可以从本书中学习各种技术，并将其应用于他们的工作领域。
- en: Although this book uses the C++ language, the concepts demonstrated in the book
    can be easily transferred or applied to other compiled languages such as C, C#,
    Java, Rust, Go, and more.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管本书使用C++语言，但书中演示的概念可以轻松转移或应用于其他编译语言，如C、C#、Java、Rust、Go等。
- en: What this book covers
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这本书涵盖了什么
- en: '[*Chapter 1*](B16229_01_Epub_AM.xhtml#_idTextAnchor014), *Introduction to Performance
    and Concurrency*, talks about the reasons we care about the performance of programs,
    specifically about the reasons why good performance doesn''t *just happen*. We
    learn why, in order to achieve the best performance, or, sometimes, even adequate
    performance, it is important to understand the different factors affecting performance
    and the reasons for a particular behavior of the program, be it fast or slow execution.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第一章*](B16229_01_Epub_AM.xhtml#_idTextAnchor014)，*性能和并发性简介*，讨论了我们关心程序性能的原因，特别是关于为什么良好性能不是*自然而然*发生的原因。我们了解到，为了实现最佳性能，甚至是足够的性能，重要的是了解影响性能的不同因素以及程序特定行为的原因，无论是快速还是慢速执行。'
- en: '[*Chapter 2*](B16229_02_Epub_AM.xhtml#_idTextAnchor026), *Performance Measurements*,
    is all about measurements. Performance is often non-intuitive, and all decisions
    involving efficiency, from design choices to optimizations, should be guided by
    reliable data. The chapter describes different types of performance measurements,
    explains how they differ and when they should be used, and teaches how to properly
    measure performance in different situations.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 第2章《性能测量》是关于测量的。性能通常是非直观的，所有涉及效率的决策，从设计选择到优化，都应该由可靠的数据来指导。本章描述了不同类型的性能测量，解释了它们的区别以及何时应该使用它们，并教授了如何在不同情况下正确地测量性能。
- en: '[*Chapter 3*](B16229_03_Epub_AM.xhtml#_idTextAnchor047), *CPU Architecture,
    Resources, and Performance Implications*, helps us begin the study of the hardware
    and how to use it efficiently in order to achieve optimum performance. This chapter
    is dedicated to learning about CPU resources and capabilities, the optimal ways
    to use them, the more common reasons for not making the best use of CPU resources,
    and how to resolve them.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 第3章《CPU架构、资源和性能影响》帮助我们开始研究硬件以及如何有效地使用它以实现最佳性能。本章致力于学习CPU资源和能力，以及最佳的使用方式，未能充分利用CPU资源的更常见原因，以及如何解决这些问题。
- en: '[*Chapter 4*](B16229_04_Epub_AM.xhtml#_idTextAnchor064), *Memory Architecture
    and Performance*, helps us learn about modern memory architectures, their inherent
    weaknesses, and the ways to counter or at least hide these weaknesses. For many
    programs, the performance is entirely dependent on whether the programmer takes
    advantage of the hardware features designed to improve memory performance, and
    this chapter teaches the necessary skills to do so.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 第4章《内存架构和性能》帮助我们了解现代内存架构，它们固有的弱点以及对抗或至少隐藏这些弱点的方法。对于许多程序来说，性能完全取决于程序员是否利用了旨在提高内存性能的硬件功能，本章教授了必要的技能来做到这一点。
- en: '[*Chapter 5*](B16229_05_Epub_AM.xhtml#_idTextAnchor084), *Threads, Memory,
    and Concurrency*, helps us continue our study of the memory system and its effects
    on performance, but now we extend our study to the domain of multi-core systems
    and multithreaded programs. It turns out that the memory, which was already the
    "long pole" of performance, is even more of a problem when we add concurrency.
    While the fundamental limits imposed by the hardware cannot be overcome, most
    programs aren''t performing even close to these limits, and there is a lot of
    room for a skillful programmer to improve the efficiency of their code; this chapter
    gives the reader the necessary knowledge and tools to do so.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 第5章《线程、内存和并发》帮助我们继续研究内存系统及其对性能的影响，但现在我们将研究扩展到多核系统和多线程程序的领域。事实证明，内存，已经是性能的“长杆”，在添加并发时会更加成为问题。虽然硬件施加的基本限制无法克服，但大多数程序甚至远未达到这些限制，熟练的程序员有很大的空间来提高他们代码的效率；本章为读者提供了必要的知识和工具来做到这一点。
- en: '[*Chapter 6*](B16229_06_Epub_AM.xhtml#_idTextAnchor103), *Concurrency and Performance*,
    helps you learn about developing high-performance concurrent algorithms and data
    structures for thread-safe programs. On the one hand, to take full advantage of
    concurrency, we must take a high-level view of the problem and the solution strategy:
    data organization, work partitioning, and sometimes even the definition of what
    constitutes a solution are the choices that critically affect the performance
    of the program. On the other hand, as we have seen in the last chapter, performance
    is greatly impacted by low-level factors such as the arrangement of the data in
    the cache, and even the best design can be ruined by poor implementation.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 第6章《并发和性能》帮助您了解开发高性能并发算法和数据结构以用于线程安全程序。一方面，为了充分利用并发，我们必须对问题和解决方案策略进行高层次的考虑：数据组织、工作分区，有时甚至解决方案的定义都会对程序的性能产生重大影响。另一方面，正如我们在上一章中所看到的，性能受到低级因素的极大影响，比如数据在缓存中的排列，甚至最佳设计也可能被糟糕的实现所破坏。
- en: '[*Chapter 7*](B16229_07_Epub_AM.xhtml#_idTextAnchor117), *Data Structures for
    Concurrency*, explains the nature of data structures in concurrent programs and
    how the familiar definitions of data structures such as "stack" and "queue" mean
    something else when the data structure is used in a multithreaded context.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 第7章《并发数据结构》解释了并发程序中数据结构的性质，以及当数据结构在多线程上下文中使用时，“栈”和“队列”等熟悉的数据结构的含义会有所不同。
- en: '[*Chapter 8*](B16229_08_Epub_AM.xhtml#_idTextAnchor138), *Concurrency in C++*,
    describes the features for concurrent programming that were added to the language
    recently in the C++17 and C++20 standards. While it is too early to talk about
    the best practices when using these features for optimum performance, we can describe
    what they do, as well as the current state of compiler support.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 第8章《C++中的并发》描述了最近在C++17和C++20标准中添加的并发编程功能。虽然现在谈论使用这些功能实现最佳性能的最佳实践还为时过早，但我们可以描述它们的功能，以及当前编译器支持的情况。
- en: '[*Chapter 9*](B16229_09_Epub_AM.xhtml#_idTextAnchor149), *High-Performance
    C++*, switches our focus from the optimal use of the hardware resources to the
    optimal application of a particular programming language. While everything we
    have learned so far can be applied, usually quite straightforwardly, to any program
    in any language, this chapter deals with C++ features and idiosyncrasies. The
    reader will learn which features of the C++ language are likely to cause performance
    problems and how to avoid them. The chapter will also cover the very important
    matter of compiler optimizations and how the programmer can help the compiler
    to generate more efficient code.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 第9章《高性能C++》将我们的注意力从硬件资源的最佳利用转移到了特定编程语言的最佳应用。虽然我们迄今为止学到的一切都可以应用于任何语言的任何程序，通常都很简单明了，但本章涉及了C++的特性和怪癖。读者将了解C++语言的哪些特性可能会导致性能问题，以及如何避免这些问题。本章还将涵盖非常重要的编译器优化问题，以及程序员如何帮助编译器生成更高效的代码。
- en: '[*Chapter 10*](B16229_10_Epub_AM.xhtml#_idTextAnchor167), *Compiler Optimizations
    in C++*, covers compiler optimizations and how the programmer can help the compiler
    to generate more efficient code.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 第10章《C++编译器优化》涵盖了编译器优化以及程序员如何帮助编译器生成更高效的代码。
- en: '[*Chapter 11*](B16229_11_Epub_AM.xhtml#_idTextAnchor176), *Undefined Behavior
    and Performance*, has a dual focus. On the one hand, it explains the dangers of
    the kinds of undefined behavior that programmers often ignore when attempting
    to squeeze the most performance from their code. On the other hand, it explains
    how we can take advantage of undefined behavior to improve performance and how
    to properly specify and document such situations. Overall, the chapter offers
    a somewhat usual but more relevant way to understand the issue of undefined behavior
    compared to the usual "anything can happen."'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 第11章《未定义行为和性能》有双重重点。一方面，它解释了程序员在试图从其代码中挤取最大性能时经常忽视的未定义行为的危险。另一方面，它解释了我们如何利用未定义行为来提高性能，以及如何正确指定和记录这种情况。总的来说，与通常的“任何事情都可能发生”相比，本章提供了一种更为常见但更相关的理解未定义行为的方式。
- en: '[*Chapter 12*](B16229_12_Epub_AM.xhtml#_idTextAnchor184), *Design for Performance*,
    reviews all the performance-related factors and features we have learned in this
    book and explores the subject of how the knowledge and understanding we have gained
    should influence the design decisions we make when developing a new software system
    or rearchitecting an existing one.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 第12章《性能设计》回顾了本书中学到的所有与性能相关的因素和特性，并探讨了我们所获得的知识和理解应该如何影响我们在开发新软件系统或重新架构现有系统时所做的设计决策。
- en: To get the most out of this book
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 要充分利用本书
- en: The book, except the chapters specific to C++ efficiency, does not rely on any
    esoteric C++ knowledge. All examples are in C++, but the lessons on hardware performance,
    efficient data structures, and design for performance apply to any programming
    language. To follow the examples, you will need at least an intermediate knowledge
    of C++.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 除了特定于C++效率的章节外，本书不依赖于任何神秘的C++知识。所有示例都是用C++编写的，但关于硬件性能、高效数据结构和性能设计的教训适用于任何编程语言。要跟随这些示例，您至少需要具备中级的C++知识。
- en: '![](img/B16229_Preface_Table.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16229_Preface_Table.jpg)'
- en: Each chapter mentions the additional software you need to compile and execute
    the examples, if any. For the most part, any modern C++ compiler can be used with
    the examples, except for [*Chapter 8*](B16229_08_Epub_AM.xhtml#_idTextAnchor138),
    *Concurrency in C++*, which requires the latest versions to work through the section
    on coroutines.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 每一章都提到了编译和执行示例所需的额外软件（如果有的话）。在大多数情况下，任何现代C++编译器都可以与这些示例一起使用，除了第8章《C++并发》，它需要最新版本才能通过协程部分工作。
- en: '**If you are using the digital version of this book, we advise you to type
    the code yourself or access the code from the book''s GitHub repository (a link
    is available in the next section). Doing so will help you avoid any potential
    errors related to the copying and pasting of code.**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果您使用的是本书的数字版本，我们建议您自己输入代码，或者从书的GitHub存储库中访问代码（下一节中提供了链接）。这样做将帮助您避免与复制和粘贴代码相关的任何潜在错误。**'
- en: Download the example code files
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载示例代码文件
- en: You can download the example code files for this book from GitHub at [https://github.com/PacktPublishing/The-Art-of-Writing-Efficient-Programs](https://github.com/PacktPublishing/The-Art-of-Writing-Efficient-Programs).
    If there's an update to the code, it will be updated in the GitHub repository.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从GitHub上下载本书的示例代码文件，链接为[https://github.com/PacktPublishing/The-Art-of-Writing-Efficient-Programs](https://github.com/PacktPublishing/The-Art-of-Writing-Efficient-Programs)。如果代码有更新，将在GitHub存储库中进行更新。
- en: We have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还提供了来自我们丰富书籍和视频目录的其他代码包，可在[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)上找到。快去看看吧！
- en: Download the color images
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载彩色图像
- en: 'We also provide a PDF file that has color images of the screenshots and diagrams
    used in this book. You can download it here: [https://static.packt-cdn.com/downloads/9781800208117_ColorImages.pdf](_ColorImages.pdf).'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还提供了一个PDF文件，其中包含本书中使用的屏幕截图和图表的彩色图像。您可以在这里下载：[https://static.packt-cdn.com/downloads/9781800208117_ColorImages.pdf](_ColorImages.pdf)。
- en: Conventions used
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用的约定
- en: There are a number of text conventions used throughout this book.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中使用了许多文本约定。
- en: '`Code in text`: Indicates code words in the text, database table names, folder
    names, filenames, file extensions, pathnames, dummy URLs, user input, and Twitter
    handles. Here is an example: "Of note is a new feature that allows to portably
    determine the cache line size for the L1 cache, `std::hardware_destructive_interference_size`
    and `std::hardware_constructive_interference_size`."'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`文本中的代码`：表示文本中的代码词、数据库表名、文件夹名、文件名、文件扩展名、路径名、虚拟URL、用户输入和Twitter用户名。例如："值得注意的是一个新功能，允许可移植地确定L1缓存的缓存行大小，`std::hardware_destructive_interference_size`
    和 `std::hardware_constructive_interference_size`。"'
- en: 'A block of code is set as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块设置如下：
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Any command-line input or output is written as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 任何命令行输入或输出都是这样写的：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For instance, words in menus or dialog boxes appear in **bold**. Here is an example:
    "When **CPU1** sees the result of the atomic write operation executed by **CPU0**
    with the release memory order, it is guaranteed that the state of the memory,
    as seen by **CPU1**, already reflects all operations executed by **CPU0** before
    this atomic operation."'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**粗体**：表示一个新术语、一个重要词或者屏幕上看到的词。例如，菜单或对话框中的词以**粗体**显示。例如："当**CPU1**看到由**CPU0**执行的带释放内存顺序的原子写操作的结果时，可以保证**CPU1**看到的内存状态已经反映了在这个原子操作之前由**CPU0**执行的所有操作。"'
- en: Tips or important notes
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 提示或重要说明
- en: Appear like this.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 像这样出现。
- en: Get in touch
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 联系我们
- en: Feedback from our readers is always welcome.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一直欢迎读者的反馈。
- en: '`customercare@packtpub.com` and mention the book title in the subject of your
    message.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`customercare@packtpub.com` 并在邮件主题中提到书名。'
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/support/errata](http://www.packtpub.com/support/errata)
    and fill in the form.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**勘误**：尽管我们已经非常注意确保内容的准确性，但错误还是会发生。如果你在这本书中发现了错误，我们将不胜感激地希望你能向我们报告。请访问[www.packtpub.com/support/errata](http://www.packtpub.com/support/errata)
    并填写表格。'
- en: '`copyright@packt.com` with a link to the material.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`copyright@packt.com` 并附上材料的链接。'
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com).'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果你有兴趣成为作者**：如果你在某个专业领域有专长，并且有兴趣撰写或为一本书做出贡献，请访问[authors.packtpub.com](http://authors.packtpub.com)。'
- en: Share Your Thoughts
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分享你的想法
- en: Once you've read *The Art of Writing Efficient Programs*, we'd love to hear
    your thoughts! Please click here to go straight to the Amazon review page for
    this book and share your feedback.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你读过《高效程序编写艺术》，我们很想听听你的想法！请点击这里直接进入亚马逊的书评页面，分享你的反馈。
- en: Your review is important to us and the tech community and will help us make
    sure we're delivering excellent quality content.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你的评论对我们和技术社区很重要，将帮助我们确保我们提供的是优质内容。
