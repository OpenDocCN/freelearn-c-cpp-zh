- en: '*Chapter 10*: Deploying Qt Applications'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第10章*：部署Qt应用程序'
- en: In earlier chapters, you learned how to develop and test an application using
    Qt 6\. Your application is ready and running on your desktop, but it is not standalone.
    You must follow certain steps to ship your application so that it can be used
    by end customers. This process is known as **deployment**. Generally, your end
    users want a single file that they can double-click to launch your software. Software
    deployment comprises different steps and activities that are required to make
    software available to its intended users who may not have any technical knowledge.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，您学习了如何使用Qt 6开发和测试应用程序。您的应用程序已经准备就绪并在您的桌面上运行，但它并不是独立的。您必须遵循一定的步骤来发布您的应用程序，以便最终用户可以使用。这个过程被称为**部署**。一般来说，最终用户希望有一个可以双击打开以运行您的软件的单个文件。软件部署包括使软件可用于其预期用户的不同步骤和活动，这些用户可能没有任何技术知识。
- en: In this chapter, you will learn to deploy a Qt project on different platforms.
    Throughout, you will learn about the available deployment tools and important
    points to consider when creating a deployment package.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何在不同平台上部署Qt项目。在整个过程中，您将了解可用的部署工具以及创建部署软件包时需要考虑的重要要点。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Deployment strategies
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署策略
- en: Static versus dynamic builds
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态与动态构建
- en: Deploying on desktop platforms
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在桌面平台上部署
- en: Qt Installer framework
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Qt安装程序框架
- en: Other installation tools
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他安装工具
- en: Deploying on Android
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Android上部署
- en: By the end of this chapter, you will be able to create a deployable package
    and share it with others.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章结束时，您将能够创建一个可部署的软件包并与他人共享。
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The technical requirements for this chapter include minimum versions of Qt 6.0.0
    and Qt Creator 4.14.0 installed on the latest desktop platform, such as Windows
    10 or Ubuntu 20.04 or macOS 10.14.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的技术要求包括Qt 6.0.0和Qt Creator 4.14.0的最低版本，安装在最新的桌面平台上，如Windows 10或Ubuntu 20.04或macOS
    10.14。
- en: 'All the code used in this chapter can be downloaded from the following GitHub
    link: [https://github.com/PacktPublishing/Cross-Platform-Development-with-Qt-6-and-Modern-Cpp/tree/master/Chapter10/HelloWorld](https://github.com/PacktPublishing/Cross-Platform-Development-with-Qt-6-and-Modern-Cpp/tree/master/Chapter10/HelloWorld).'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的所有代码都可以从以下GitHub链接下载：[https://github.com/PacktPublishing/Cross-Platform-Development-with-Qt-6-and-Modern-Cpp/tree/master/Chapter10/HelloWorld](https://github.com/PacktPublishing/Cross-Platform-Development-with-Qt-6-and-Modern-Cpp/tree/master/Chapter10/HelloWorld)。
- en: Important note
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: The screenshots used in this chapter are taken on the Windows platform. You
    will see similar screens based on the underlying platforms in your machine.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章使用的屏幕截图是在Windows平台上进行的。您将在您的设备上看到基于底层平台的类似屏幕。
- en: Understanding the need for deployment
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解部署的必要性
- en: The process of making software work on a target device, whether it's a test
    server, a production environment, a user's desktop, or mobile device, is known
    as **software deployment**. Typically, end users want a single file that they
    can open to access your application. The user will not want to go through several
    processes to obtain various alien files. Usually, users look for software that
    they can launch with a double click or tap. The user will not want to go through
    a series of steps to obtain a number of unknown files. In this chapter, we will
    discuss the steps and things to consider while deploying a Qt application. We
    will discuss deploying the application on Windows, Mac, Linux, and Android platforms.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使软件在目标设备上运行的过程，无论是测试服务器、生产环境、用户的桌面还是移动设备，都被称为**软件部署**。通常，最终用户希望有一个可以打开以访问您的应用程序的单个文件。用户不希望经历多个过程来获取各种外来文件。通常，用户寻找可以双击或轻点启动的软件。用户不希望经历一系列步骤来获取一些未知文件。在本章中，我们将讨论在部署Qt应用程序时需要考虑的步骤和事项。我们将讨论在Windows、Mac、Linux和Android平台上部署应用程序。
- en: We've just been running debug versions of the applications we've built so far.
    You should make release binaries for generating deployment packages. The difference
    between these two alternatives is that the debug version includes information
    about the code you write, making it much easier to debug if you encounter issues.
    However, you do not want to send multiple files to users because this is useless
    for them. Users just want to run your application. That is why you must provide
    them with your application's release version. So, to ship the app, we'll create
    it in release mode, which will give us a release binary that we can deliver to
    our users. Once you've got the binaries, you'll need to create separate packages
    depending on which platform you want to deploy your application. If you want to
    deploy on Windows, you're going to take a specific approach, and the same will
    apply to Linux, macOS, or Android.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在运行我们迄今为止构建的应用程序的调试版本。您应该生成发布二进制文件以生成部署软件包。这两种选择之间的区别在于调试版本包含有关您编写的代码的信息，如果遇到问题，这将使调试变得更加容易。但是，您不希望向用户发送多个文件，因为这对他们来说是没有用的。用户只想运行您的应用程序。这就是为什么您必须向他们提供您应用程序的发布版本。因此，为了发布应用程序，我们将以发布模式创建它，这将为我们提供一个发布二进制文件，我们可以交付给我们的用户。一旦您获得了二进制文件，您将需要根据您想要部署应用程序的平台创建单独的软件包。如果您想在Windows上部署，您将采取特定的方法，同样适用于Linux、macOS或Android。
- en: 'A standard Qt deployment package consists of a single executable file, but
    it requires the presence of additional files in order to run. Aside from the executable
    file, the following files will be required:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 标准的Qt部署包包括一个单独的可执行文件，但需要其他文件的存在才能运行。除了可执行文件，还需要以下文件：
- en: Dynamic libraries
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态库
- en: Third-party libraries
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三方库
- en: Add-on modules
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 附加模块
- en: Distributable files
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可分发文件
- en: Qt plugins
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Qt插件
- en: Translation files
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 翻译文件
- en: Help files
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 帮助文件
- en: Licenses
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许可证
- en: When we start a Qt project in Qt Creator, it is set to use dynamic linking by
    default. Therefore, our app will require the Qt dynamic link libraries. We will
    also require C++ runtime of your favorite compiler (MinGW/MSVC/Clang/GCC) and
    standard library implementations. These are usually available as `.dll` file on
    Windows, `.so` file on Linux and `.so`, or `.dylib` file on macOS. If your project
    is a large complex project, you may have multiple libraries. Your application
    package may also require third-party libraries such as opengl, libstdc++, libwinpthread,
    and openssl.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在Qt Creator中启动一个Qt项目时，默认情况下设置为使用动态链接。因此，我们的应用程序将需要Qt动态链接库。我们还需要您喜欢的编译器的C++运行时（MinGW/MSVC/Clang/GCC）和标准库实现。这些通常作为Windows上的`.dll`文件、Linux上的`.so`文件以及macOS上的`.so`或`.dylib`文件提供。如果您的项目是一个庞大复杂的项目，您可能有多个库。您的应用程序包还可能需要第三方库，如opengl、libstdc++、libwinpthread和openssl。
- en: If your application is based on Qt Quick, then you will also require standard
    modules such as QtQuick, QtQml, QtStateMachine, QtCharts, and Qt3D. They are supplied
    as dynamic libraries, with some extra files providing QML module metadata, or
    as pure QML files. Unfortunately, the dynamic libraries that implement Qt's C++
    and QML APIs are insufficient to allow our executable to run. Qt also uses plugins
    to enable extensions, as well as for fairly standard GUI capabilities such as
    image file loading and display. Similarly, some plugins encapsulate the platform
    on which Qt runs.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的应用程序基于Qt Quick，那么您还需要标准模块，如QtQuick、QtQml、QtStateMachine、QtCharts和Qt3D。它们以动态库的形式提供，还有一些额外的文件提供QML模块元数据，或者纯QML文件。不幸的是，实现Qt的C++和QML
    API的动态库是不足以让我们的可执行文件运行的。Qt还使用插件来启用扩展，以及用于相当标准的GUI功能，如图像文件加载和显示的插件。同样，一些插件封装了Qt运行的平台。
- en: If you are using Qt's translation support, then you will also require the translation
    files to be deployed. We will discuss translation more in [*Chapter 11*](B16231_11_Final_ASB_ePub.xhtml#_idTextAnchor256),
    *Internationalization*. You may also need to deploy the documentation files if
    you are using the Qt Help framework or even simple PDF manuals. You may also need
    to deploy some icons or script or license agreements for your application. You
    also have to ensure that the Qt libraries can locate the platform plugins, documentation,
    and translations, as well as the intended executable file, by themselves.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用Qt的翻译支持，那么您还需要部署翻译文件。我们将在第11章“国际化”中更多地讨论翻译。如果您正在使用Qt帮助框架甚至简单的PDF手册，您可能还需要部署文档文件。您还可能需要部署一些图标、脚本或许可协议供您的应用程序使用。您还必须确保Qt库可以自行定位平台插件、文档和翻译，以及预期的可执行文件。
- en: Choosing between static and dynamic libraries
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在静态和动态库之间进行选择
- en: You can build your Qt application using static linking or dynamic linking. When
    you build an application, the linker makes copies of all used library functions
    to the executable file using either of these two approaches. We assume that you
    are already aware of these two methods. In this section, we will discuss when
    to use static linking and when to use dynamic linking for your Qt application.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用静态链接或动态链接构建您的Qt应用程序。在构建应用程序时，链接器使用这两种方法之一将所有使用的库函数的副本复制到可执行文件中。我们假设您已经了解这两种方法。在本节中，我们将讨论何时使用静态链接和何时使用动态链接来构建您的Qt应用程序。
- en: '`.a` file extension in Linux and the `.lib` file extension in Windows.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux中是`.a`文件扩展名，在Windows中是`.lib`文件扩展名。
- en: '`.so` file extension in Linux and the `.dll` file extension in Windows.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux中是`.so`文件扩展名，在Windows中是`.dll`文件扩展名。
- en: A static build consists of a single executable file. But in a dynamic build,
    you must take care of the dynamic libraries. Static builds are simpler as they
    may already have the Qt plugins and QML imports in the executable. The static
    build also facilitates `-static` configuration option specified. This mode of
    Qt application deployment is available only with a commercial license. You should
    avoid linking your application statically if you are an open source developer.
    Since we are using an open source Qt version in this book, we won't go through
    static builds in any more detail. Instead, we'll stick to the regular dynamic
    builds and deployments.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 静态构建由单个可执行文件组成。但在动态构建中，您必须注意动态库。静态构建更简单，因为它们可能已经在可执行文件中包含了Qt插件和QML导入。静态构建还便于指定`-static`配置选项。这种Qt应用程序部署模式仅适用于商业许可。如果您是开源开发人员，应避免静态链接应用程序。由于本书中使用的是开源Qt版本，我们不会详细介绍静态构建。相反，我们将坚持使用常规的动态构建和部署。
- en: 'You can learn more about deploying a Qt application with the aforementioned
    approaches at the following link:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接了解有关使用上述方法部署Qt应用程序的更多信息：
- en: '[https://doc.qt.io/qt-6/deployment.html](https://doc.qt.io/qt-6/deployment.html).'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://doc.qt.io/qt-6/deployment.html](https://doc.qt.io/qt-6/deployment.html)。'
- en: In the following sections, we are going to be focusing on the leading desktop
    and mobile platforms. We're not going to discuss embedded platforms as this is
    beyond the scope of this book.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将专注于主要的桌面和移动平台。我们不会讨论嵌入式平台，因为这超出了本书的范围。
- en: Deploying on desktop platforms
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在桌面平台上部署
- en: You have seen that there's a lot to consider when deploying a Qt application.
    Fortunately, Qt provides a tool that can assist us in this process by scanning
    the generated application binary, identifying all dependencies, and copying them
    to the deployment directory. We will deploy our application on various platforms
    to achieve different objectives, but the concepts will remain the same. Once we
    have our binary built, the first thing we need to do is add the dependencies so
    that the user can execute the application without difficulties.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经看到，在部署Qt应用程序时有很多要考虑的事情。幸运的是，Qt提供了一个工具，可以通过扫描生成的应用程序二进制文件，识别所有依赖项，并将它们复制到部署目录中来协助我们进行这个过程。我们将在各种平台上部署我们的应用程序以实现不同的目标，但概念将保持不变。一旦我们构建好我们的二进制文件，我们需要做的第一件事就是添加依赖项，以便用户可以无困难地执行应用程序。
- en: There are two ways in which we may load the dependencies. We can do it manually
    or use certain tools that are provided by the Qt framework or by a third party.
    On Windows, we can use `windeployqt` to load our dependencies. On macOS, we can
    use `macdeployqt` to load our dependencies for our binary. There is also another
    tool called `linuxdeployqt` that you can use to add the dependencies to your binary.
    `linuxdeployqt` works well for our needs, and we're going to discuss it in this
    chapter. However, this Linux deploy utility tool is not official and is not supported
    by Qt. Once you have your binary generated, you need to find and add in the dependencies.
    You can do that manually or use one of these tools, depending on where you are,
    to deploy your application.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以以两种方式加载依赖项。我们可以手动操作，也可以使用Qt框架或第三方提供的某些工具。在Windows上，我们可以使用`windeployqt`来加载我们的依赖项。在macOS上，我们可以使用`macdeployqt`来为我们的二进制文件加载依赖项。还有另一个工具叫做`linuxdeployqt`，您可以使用它来为您的二进制文件添加依赖项。`linuxdeployqt`非常适合我们的需求，在本章中我们将讨论它。然而，这个Linux部署实用工具不是官方的，也不受Qt支持。一旦生成了您的二进制文件，您需要找到并添加依赖项。您可以手动操作，也可以根据您所在的位置使用这些工具之一来部署您的应用程序。
- en: In this chapter, we will use a simple *HelloWorld* example to discuss how to
    deploy applications on different platforms. We will find the dependencies and
    create a standalone package. Let's begin with Windows deployment.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用一个简单的*HelloWorld*示例来讨论如何在不同平台上部署应用程序。我们将找到依赖项并创建一个独立的包。让我们从Windows部署开始。
- en: Deploying on Windows
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Windows上部署
- en: Most of the desktop applications that are built for Windows are usually delivered
    in two approaches. First, the application comes as a standalone application without
    any need for installation. In this approach, the application usually come as an
    executable file (`.exe`) with all dependent libraries inside the same directory.
    This type of application is known as a `.exe` or `.msi` format. You will learn
    to create an installable `.exe` file. In this section, we will discuss how to
    create standalone deployment packages with both approaches.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数为Windows构建的桌面应用程序通常以两种方式交付。首先，应用程序作为一个独立的应用程序交付，无需安装。在这种方法中，应用程序通常作为一个带有所有依赖库的可执行文件（`.exe`）出现在同一目录中。这种类型的应用程序称为`.exe`或`.msi`格式。您将学习如何创建一个可安装的`.exe`文件。在本节中，我们将讨论如何使用这两种方法创建独立部署包。
- en: 'Follow these steps to create a portable application:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建一个便携式应用程序：
- en: First, create a simple Qt application. You can choose Qt Widget or a Qt Quick-based
    application. Here we will discuss the Qt Widget-based application. The procedure
    is the same for both types of applications.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先创建一个简单的Qt应用程序。您可以选择Qt Widget或Qt Quick-based应用程序。这里我们将讨论基于Qt Widget的应用程序。这两种类型的应用程序的过程是相同的。
- en: 'Once you created the sample application, you can optionally add your application
    name, version, organization name, and domain by adding the few lines of code inside
    your `main.cpp` file, as shown here:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建示例应用程序后，您可以选择通过在`main.cpp`文件中添加几行代码来添加应用程序名称、版本、组织名称和域，如下所示：
- en: '[PRE0]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Once you created the application, build it in **Release** mode. You can change
    the **Build** mode in the build settings. **Release** mode creates a smaller binary
    as it eliminates the debug symbols. You can quickly change the build mode from
    the kit selector section by clicking on it and then selecting the **Release**
    option, as shown in *Figure 10.1*:![Figure 10.1 – Release option in Qt Creator
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建应用程序后，以**发布**模式构建它。您可以在构建设置中更改**构建**模式。**发布**模式会创建一个较小的二进制文件，因为它会消除调试符号。您可以通过单击并选择**发布**选项来快速从套件选择器部分更改构建模式，如*图10.1*所示：![图10.1
    - Qt Creator中的发布选项
- en: '](img/Figure_10.1_B16231.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.1_B16231.jpg)'
- en: Figure 10.1 – Release option in Qt Creator
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.1 - Qt Creator中的发布选项
- en: You can see that the binaries are created inside the **Release** directory.
    In this example, we are using *shadow build*. You can also change the release
    directory from the **General** section under the **Build Settings** screen:![Figure
    10.2 – Directory with release binaries
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以看到二进制文件是在**发布**目录中创建的。在这个例子中，我们使用了*影子构建*。您还可以从**构建设置**屏幕下的**常规**部分更改发布目录：![图10.2
    - 具有发布二进制文件的目录
- en: '](img/Figure_10.2_B16231.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.2_B16231.jpg)'
- en: Figure 10.2 – Directory with release binaries
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.2 - 具有发布二进制文件的目录
- en: Now, create a deployment directory and copy the executable from the **Release**
    directory.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建一个部署目录，并从**发布**目录中复制可执行文件。
- en: Now, double-click on the executable file. You will notice that the application
    failed to launch and that several error dialogs appear. The error dialogs will
    mention which library is missing. If you don't see these errors, then you might
    have already added the library path in the system environment. You can try it
    on a clean system where Qt libraries are not installed:![Figure 10.3 – Error showing
    Qt library dependency
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，双击可执行文件。您会注意到应用程序无法启动，并出现了几个错误对话框。错误对话框会提到缺少哪个库。如果您没有看到这些错误，那么您可能已经在系统环境中添加了库路径。您可以在未安装Qt库的干净系统上尝试：![图10.3
    - 显示Qt库依赖的错误
- en: '](img/Figure_10.3_B16231.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.3_B16231.jpg)'
- en: Figure 10.3 – Error showing Qt library dependency
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.3 - 显示Qt库依赖的错误
- en: The next step is to find the missing Qt libraries that are required to run your
    application independently outside the IDE.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是找到在IDE之外独立运行应用程序所需的缺失的Qt库。
- en: Since we are using an open source version of Qt and the dynamic linking approach
    here, you will notice that the missing libraries will have a `.dll` extension.
    Here, we saw that the missing library is `Qt6Core.dll`.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们在这里使用的是Qt的开源版本和动态链接方法，您会注意到缺失的库将具有`.dll`扩展名。在这里，我们看到缺失的库是`Qt6Core.dll`。
- en: The number of errors will depend on the number of modules used in the program.
    You can find the Qt dependent libraries from the `QTDIR/6.x.x/<CompilerName>/bin`
    directory. Here, `QTDIR` is where Qt 6 is installed. In our example, we have used
    *Qt 6.1.0* as the version and *mingw81_64* as the compiler, hence the path is
    `D:/Qt/6.1.0/mingw81_64/bin`. This path can vary as per your Qt installation path,
    Qt version, and chosen compiler. The following screenshot shows the presence of
    the dynamic libraries under the `bin` directory:![Figure 10.4 – Required Qt libraries
    inside the bin directory
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 错误的数量将取决于程序中使用的模块数量。您可以从`QTDIR/6.x.x/<CompilerName>/bin`目录中找到Qt依赖库。在这里，`QTDIR`是Qt
    6安装的位置。在我们的示例中，我们使用了*Qt 6.1.0*作为版本，*mingw81_64*作为编译器，因此路径是`D:/Qt/6.1.0/mingw81_64/bin`。这个路径可能会根据您的Qt安装路径、Qt版本和选择的编译器而有所不同。以下截图显示了`bin`目录下动态库的存在：![图10.4
    – bin目录中所需的Qt库
- en: '](img/Figure_10.4_B16231.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.4_B16231.jpg)'
- en: Figure 10.4 – Required Qt libraries inside the bin directory
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.4 – bin目录中所需的Qt库
- en: As illustrated in *Figure 10.4*, copy the missing `.dll` files to the recently
    created deployment directory.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如*图10.4*所示，将缺失的`.dll`文件复制到最近创建的部署目录中。
- en: Repeat the process until you have copied all the missing libraries mentioned
    in the error messages to the deployment directory. You may also have to deploy
    compiler-specific libraries along with your application. You can also find the
    dependent libraries by using the **Dependency Walker** (**depends.exe**) tool.
    This tool is a free tool specific to Windows. It provides a list of dependent
    libraries. However, in recent versions, the tool has not been very useful and
    often fails to provide the required information. There are few more tools you
    can experiment with such as PeStudio, MiTeC EXE Explorer, and CFF Explorer. Please
    note that I haven't explored these tools.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复这个过程，直到您将错误消息中提到的所有丢失的库都复制到部署目录中。您可能还需要部署特定于编译器的库以及您的应用程序。您还可以使用**Dependency
    Walker**（**depends.exe**）工具找到依赖库。这个工具是一个专门针对Windows的免费工具。它提供了一个依赖库列表。然而，在最近的版本中，这个工具并不是很有用，经常无法提供所需的信息。您还可以尝试一些其他工具，比如PeStudio、MiTeC
    EXE Explorer和CFF Explorer。请注意，我没有探索过这些工具。
- en: Once you have copied all the missing libraries, try to run the application again.
    This time, you will notice that a new error pops up. On this occasion, the message
    relates to the platform plugin:![Figure 10.5 – Error dialog indicating a missing
    Qt platform plugin
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您复制了所有丢失的库，请尝试再次运行应用程序。这一次，您会注意到一个新的错误弹出。这次，消息与平台插件有关：![图10.5 – 错误对话框指示缺少Qt平台插件
- en: '](img/Figure_10.5_B16231.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.5_B16231.jpg)'
- en: Figure 10.5 – Error dialog indicating a missing Qt platform plugin
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.5 – 错误对话框指示缺少Qt平台插件
- en: Create a directory called `platforms` inside the deployment directory:![Figure
    10.6 – Directory showing the Qt windows platform plugin
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在部署目录中创建一个名为`platforms`的目录：![图10.6 – 显示Qt Windows平台插件的目录
- en: '](img/Figure_10.6_B16231.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.6_B16231.jpg)'
- en: Figure 10.6 – Directory showing the Qt windows platform plugin
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.6 – 显示Qt Windows平台插件的目录
- en: Then, copy the `qwindows.dll` file from `C:\Qt\6.x.x\<compiler_name>\plugins\platforms`
    to the new `platforms` subdirectory. *Figure 10.7* illustrates the organization
    of the files in the deployment directory:![Figure 10.7 – Copy platforms plugin
    inside the release directory
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将`qwindows.dll`文件从`C:\Qt\6.x.x\<compiler_name>\plugins\platforms`复制到新的`platforms`子目录中。*图10.7*说明了部署目录中文件的组织结构：![图10.7
    – 在发布目录中复制平台插件
- en: '](img/Figure_10.7_B16231.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.7_B16231.jpg)'
- en: Figure 10.7 – Copy platforms plugin inside the release directory
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.7 – 在发布目录中复制平台插件
- en: Now, double-click on the `HelloWorld.exe` file. You will observe that the **HelloWorld!**
    GUI appears in no time. Now, the Qt Widgets application can be launched on a Windows
    platform that doesn't have Qt 6 installed:![Figure 10.8 – Standalone application
    running with resolved dependencies
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，双击`HelloWorld.exe`文件。您会注意到**HelloWorld!** GUI立即出现。现在，Qt Widgets应用程序可以在没有安装Qt
    6的Windows平台上运行：![图10.8 – 运行已解决依赖关系的独立应用程序
- en: '](img/Figure_10.8_B16231.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.8_B16231.jpg)'
- en: Figure 10.8 – Standalone application running with resolved dependencies
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.8 – 运行已解决依赖关系的独立应用程序
- en: The next and final step is to zip the folder and share it with your friends.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步，也是最后一步，是将文件夹压缩并与您的朋友分享。
- en: Congratulations! You have successfully deployed your first standalone application.
    However, this approach doesn't work well for a large project where we have many
    dependent files. Qt provides several handy tools for dealing with such challenges
    and creating an installation package easily. In the next section, we will discuss
    the Windows deployment tool and how it can help us deal with these challenges.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您已成功部署了您的第一个独立应用程序。然而，这种方法对于一个有许多依赖文件的大型项目来说效果不佳。Qt提供了几个方便的工具来处理这些挑战，并轻松创建安装包。在下一节中，我们将讨论Windows部署工具以及它如何帮助我们处理这些挑战。
- en: Windows deployment tool
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Windows部署工具
- en: The Windows deployment tool comes with the Qt 6.x installation package. You
    can find it under `<QTDIR>/bin/` as `windeployqt.exe`. You can run this tool from
    the Qt command prompt and pass the executable file as the argument, or with a
    directory as the parameter. If you are building a Qt Quick application, you will
    have to additionally add the directory path of the `.qml` files.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Windows部署工具随Qt 6.x安装包一起提供。您可以在`<QTDIR>/bin/`下找到它，命名为`windeployqt.exe`。您可以从Qt命令提示符中运行这个工具，并将可执行文件作为参数传递，或者使用目录作为参数。如果您正在构建一个Qt
    Quick应用程序，您还需要额外添加`.qml`文件的目录路径。
- en: 'Let''s have a look at some of the important command-line options available
    in `windeployqt`. Explore some of the useful options in the following list:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看`windeployqt`中一些重要的命令行选项。在下面的列表中探索一些有用的选项：
- en: '`-?` or `-h` or `--help` displays help on command-line options.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-?`或`-h`或`--help`显示命令行选项的帮助信息。'
- en: '`--help-all` displays help including Qt-specific options.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--help-all`显示包括Qt特定选项在内的帮助信息。'
- en: '`--libdir <path>` copies dependent libraries to the path.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--libdir <path>`将依赖库复制到路径。'
- en: '`--plugindir <path>` copies dependent plugins to the path.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--plugindir <path>`将依赖插件复制到路径。'
- en: '`--no-patchqt` instructs not to patch the Qt6Core library.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--no-patchqt`指示不要修补Qt6Core库。'
- en: '`--no-plugins` instructs to skip plugin deployment.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--no-plugins`指示跳过插件部署。'
- en: '`--no-libraries` instructs to skip library deployment.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--no-libraries`指示跳过库部署。'
- en: '`--qmldir <directory>` scans the QML imports from the source directory.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--qmldir <directory>`从源目录扫描QML导入。'
- en: '`--qmlimport <directory>` adds the given path to the QML module search locations.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--qmlimport <directory>`将给定路径添加到QML模块搜索位置。'
- en: '`--no-quick-import` instructs to skip deployment of Qt Quick imports.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--no-quick-import`指示跳过Qt Quick导入的部署。'
- en: '`--no-system-d3d-compiler` instructs to skip deployment of the D3D compiler.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--no-system-d3d-compiler`指示跳过D3D编译器的部署。'
- en: '`--compiler-runtime` deploys the compiler runtime on the desktop.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--compiler-runtime`在桌面上部署编译器运行时。'
- en: '`--no-compiler-runtime` prevents deployment of the compiler runtime on the
    desktop.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--no-compiler-runtime`防止在桌面上部署编译器运行时。'
- en: '`--no-opengl-sw` prevents deployment of the software rasterizer library.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--no-opengl-sw`防止部署软件光栅化器库。'
- en: 'You can find the `windeployqt` tool inside the `bin` folder, as shown in the
    following screenshot:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`bin`文件夹中找到`windeployqt`工具，如下面的屏幕截图所示：
- en: '![Figure 10.9 – The windeployqt tool inside the bin directory'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.9 - bin目录中的windeployqt工具'
- en: '](img/Figure_10.9_B16231.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.9_B16231.jpg)'
- en: Figure 10.9 – The windeployqt tool inside the bin directory
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.9 - bin目录中的windeployqt工具
- en: 'The easiest way to use `windeployqt` is to add its path to the **Path** variable.
    To add it to **Path**, open **System Properties** on your Windows machine and
    then click on **Advance system settings**. You will find that the **System Properties**
    window appears. At the bottom of the **System Properties** window, you will see
    the **Environment Variables…** button. Click it and select the **Path** variable,
    as shown in the following screenshot. Then, click on the **Edit…** button. Add
    the path of the Qt bin directory and hit the **OK** button:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`windeployqt`的最简单方法是将其路径添加到**Path**变量中。要将其添加到**Path**，在Windows机器上打开**系统属性**，然后单击**高级系统设置**。您会发现**系统属性**窗口出现了。在**系统属性**窗口的底部，您会看到**环境变量…**按钮。单击它，然后选择**Path**变量，如下面的屏幕截图所示。然后，单击**编辑…**按钮。添加Qt
    bin目录的路径，然后单击**确定**按钮：
- en: '![Figure 10.10 – Adding the bin directory to the system environment path'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.10 - 将bin目录添加到系统环境路径'
- en: '](img/Figure_10.10_B16231.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.10_B16231.jpg)'
- en: Figure 10.10 – Adding the bin directory to the system environment path
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.10 - 将bin目录添加到系统环境路径
- en: 'Close the **System Properties** screen and launch the Qt command prompt. Then
    you can use the following syntax to create a deployment package for your Qt Widget-based
    application:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭**系统属性**屏幕并启动Qt命令提示符。然后，您可以使用以下语法为基于Qt Widget的应用程序创建部署包：
- en: '[PRE1]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you are using Qt Quick, follow the next syntax:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用Qt Quick，请按照下一个语法：
- en: '[PRE2]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Afterward, the tool will copy the identified dependencies to the deployment
    directory, ensuring that we have all of the required components in one location.
    It will also build the subdirectory structure for plugins and other Qt resources
    that you'd expect. If ICU and other files are not in the bin directory, they must
    be added to the **Path** variable before running the tool.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，该工具将复制识别出的依赖项到部署目录，确保我们将所有所需的组件放在一个位置。它还将构建插件和其他Qt资源的子目录结构，这是您所期望的。如果ICU和其他文件不在bin目录中，则必须在运行该工具之前将它们添加到**Path**变量中。
- en: 'Let''s begin with the same *HelloWorld* example. To create a deployment of
    the example using `windeployqt`, perform the following steps:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从相同的*HelloWorld*示例开始。要使用`windeployqt`创建示例的部署，请执行以下步骤：
- en: Create a deployment directory and copy the `HelloWorld.exe` file to the deployment
    directory.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个部署目录，并将`HelloWorld.exe`文件复制到部署目录。
- en: 'Now you can invoke the deployment tool, as shown here:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您可以调用部署工具，如下所示：
- en: '[PRE3]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Once you enter the command, the tool will start gathering information about
    the dependencies:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入命令后，工具将开始收集有关依赖项的信息：
- en: '[PRE4]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You will observe that the tool not only listed the dependencies but also copied
    the required files to the destination directory.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您会注意到该工具不仅列出了依赖项，还将所需的文件复制到目标目录。
- en: Open the deployment directory and you will find that multiple files and directories
    have been added:![Figure 10.11 – windeployqt copied all required files to the
    deployment directory
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开部署目录，您会发现已添加了多个文件和目录：![图10.11 - windeployqt复制了所有必需的文件到部署目录
- en: '](img/Figure_10.11_B16231.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.11_B16231.jpg)'
- en: Figure 10.11 – windeployqt copied all required files to the deployment directory
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.11 - windeployqt复制了所有必需的文件到部署目录
- en: In the previous section, we had to identify and copy all the dependencies ourselves,
    but that task is now delegated to the `windeployqt` tool.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前一节中，我们不得不自己识别和复制所有依赖项，但现在这项任务已委托给了`windeployqt`工具。
- en: 'If you are using a *Qt Quick application*, run the following command:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您正在使用*Qt Quick应用程序*，请运行以下命令：
- en: '[PRE5]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can see that the tool has gathered the dependencies and copied the required
    files to the deployment directory:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您会看到该工具已经收集了依赖项，并将所需的文件复制到部署目录：
- en: '[PRE6]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You can now double-click to launch your standalone application.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您可以双击启动独立应用程序。
- en: The next step is to zip the folder and share it with your friends.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是压缩文件夹并与朋友分享。
- en: 'The command-line options for the Windows deployment tool can be used to fine-tune
    the identification and copy process. The essential instructions may be found at
    the following links:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Windows部署工具的命令行选项可用于微调识别和复制过程。基本说明可以在以下链接中找到：
- en: '[https://doc.qt.io/qt-6/windows-deployment.html](https://doc.qt.io/qt-6/windows-deployment.html).'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://doc.qt.io/qt-6/windows-deployment.html](https://doc.qt.io/qt-6/windows-deployment.html)。'
- en: '[https://wiki.qt.io/Deploy_an_Application_on_Windows](https://wiki.qt.io/Deploy_an_Application_on_Windows).'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://wiki.qt.io/Deploy_an_Application_on_Windows](https://wiki.qt.io/Deploy_an_Application_on_Windows).'
- en: Cheers! You have learned to deploy a Qt application using the Windows deployment
    tool. However, there is still a lot of work to be done. The Qt Installer Framework
    provides several handy tools for dealing with such challenges and creating installable
    packages easily. In the next section, we will discuss the Linux deployment tool
    and how to use it to create a standalone application.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 干杯！您已经学会了使用 Windows 部署工具部署 Qt 应用程序。但是，还有很多工作要做。Qt 安装程序框架提供了几个方便的工具，用于处理这些挑战并轻松创建可安装的软件包。在下一节中，我们将讨论
    Linux 部署工具以及如何使用它创建独立应用程序。
- en: Deploying on Linux
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Linux 上部署
- en: In Linux distributions, we have multiple options to deploy our application.
    You can use an installer, but you can also have an option such as an app bundle.
    There is a technology called `apt` on Debian, Ubuntu, or Fedora and your application
    can be used through this approach. However, you can choose a much simpler approach,
    like the app image option, which is going to provide you with one file. You can
    give that file to your users and they can just double-click to run the application.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 发行版中，我们有多种选项来部署我们的应用程序。您可以使用安装程序，但也可以选择应用程序包的选项。在 Debian、Ubuntu 或 Fedora
    上有一种称为 `apt` 的技术，您的应用程序可以通过这种方式使用。但是，您也可以选择一个更简单的方法，比如 app image 选项，它将为您提供一个文件。您可以将该文件提供给用户，他们只需双击即可运行应用程序。
- en: 'Qt documentation provides certain instructions to deploy on Linux. You can
    have a look at the following link:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Qt 文档提供了在 Linux 上部署的特定说明。您可以在以下链接中查看：
- en: '[https://doc.qt.io/qt-6/linux-deployment.html](https://doc.qt.io/qt-6/linux-deployment.html).'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://doc.qt.io/qt-6/linux-deployment.html](https://doc.qt.io/qt-6/linux-deployment.html).'
- en: Qt doesn't provide any ready-made tool similar to `windeployqt` for Linux distributions.
    This may be due to a large number of Linux flavors. However, there is an unofficial
    open source Linux deployment tool named `linuxdeployqt`. This takes an application
    as input and turns it into a self-contained package by replicating the project's
    resources into a bundle. Users can get the generated bundle as an `AppDir` or
    an `AppImage`, or it may be included in cross-distribution packages. With systems
    such as CMake, qmake, and make, it may be used as part of the build process to
    deploy applications written in C, C++, and other compiled languages. It can package
    specific libraries and components required to run the Qt-based application.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Qt 并未为 Linux 发行版提供类似于 `windeployqt` 的现成工具。这可能是由于 Linux 发行版的数量众多。但是，有一个名为 `linuxdeployqt`
    的非官方开源 Linux 部署工具。它接受应用程序作为输入，并通过将项目资源复制到包中将其转换为自包含软件包。用户可以将生成的包作为 `AppDir` 或
    `AppImage` 获取，或者可以将其包含在跨发行版软件包中。使用诸如 CMake、qmake 和 make 等系统，它可以作为构建过程的一部分来部署用
    C、C++ 和其他编译语言编写的应用程序。它可以打包运行基于 Qt 的应用程序所需的特定库和组件。
- en: 'You can download `linuxdeployqt` from the following link:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从以下链接下载 `linuxdeployqt`：
- en: '[https://github.com/probonopd/linuxdeployqt/releases](https://github.com/probonopd/linuxdeployqt/releases).'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/probonopd/linuxdeployqt/releases](https://github.com/probonopd/linuxdeployqt/releases).'
- en: You will get `linuxdeployqt-x86_64.AppImage` after the download and do `chmod
    a+x` before running it.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 下载后，您将得到 `linuxdeployqt-x86_64.AppImage`，在运行之前执行 `chmod a+x`。
- en: You can read the complete documentation and find the source code at [https://github.com/probonopd/linuxdeployqt](https://github.com/probonopd/linuxdeployqt).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 [https://github.com/probonopd/linuxdeployqt](https://github.com/probonopd/linuxdeployqt)
    上阅读完整的文档并找到源代码。
- en: If you want a single application package easily, then run `linuxdeployqt` with
    the `-appimage` flag.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想轻松地获得单个应用程序包，那么请使用 `-appimage` 标志运行 `linuxdeployqt`。
- en: There are also few more deployment tools such as **Snap** and **Flatpak** to
    package an application and its dependencies runs across multiple Linux distributions
    without making any modification.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些其他部署工具，如 **Snap** 和 **Flatpak**，可以打包应用程序及其依赖项，使其在多个 Linux 发行版上运行而无需进行任何修改。
- en: 'You can read on how to create a snap in the following link: [https://snapcraft.io/docs/creating-a-snap](https://snapcraft.io/docs/creating-a-snap%20)'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接中了解如何创建一个 snap：[https://snapcraft.io/docs/creating-a-snap](https://snapcraft.io/docs/creating-a-snap%20)
- en: 'You can explore more about Flatpak by visiting the following link: [https://docs.flatpak.org/en/latest/qt.html](https://docs.flatpak.org/en/latest/qt.html%20)'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过访问以下链接了解更多关于 Flatpak 的信息：[https://docs.flatpak.org/en/latest/qt.html](https://docs.flatpak.org/en/latest/qt.html%20)
- en: In the next section, we will discuss the macOS deployment tool and how to use
    it to create a standalone application for your Mac users.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论 macOS 部署工具以及如何使用它为您的 Mac 用户创建独立应用程序。
- en: Deploying on macOS
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 macOS 上部署
- en: You can go through a similar process as discussed in previous sections to generate
    an installer file for the macOS. We will discuss the steps that you can follow
    to generate an app bundle. You can test the package on your macOS and send it
    to your Mac users. The process is pretty much the same as on Linux. After all,
    macOS is based on Unix. Therefore, you can create installers, which we call a
    bundle on the macOS.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以按照前几节讨论的类似过程来为 macOS 生成安装程序文件。我们将讨论您可以遵循的步骤来生成应用程序包。您可以在 macOS 上测试该软件包并将其发送给您的
    Mac 用户。该过程与在 Linux 上基本相同。毕竟，macOS 是基于 Unix 的。因此，您可以在 macOS 上创建我们称之为 bundle 的安装程序。
- en: You can find the macOS deployment tool inside `QTDIR/bin/macdeployqt`. It is
    designed to automate the process of creating a deployable application bundle that
    contains the Qt libraries as private frameworks. The Mac deployment tool also
    deploys the Qt plugins unless you specify the `-no-plugins` option. By default,
    Qt plugins such as platform, image format, print support, and accessibility are
    always deployed. SQL driver and SVG plugins are deployed only if it is used by
    the application. The designer plugins are not deployed. If you want to include
    a third-party library in the application bundle, you must manually copy the library
    into the bundle after it has been built.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`QTDIR/bin/macdeployqt`中找到macOS部署工具。它旨在自动化创建包含Qt库作为私有框架的可部署应用程序包的过程。Mac部署工具还部署Qt插件，除非您指定`-no-plugins`选项。默认情况下，Qt插件（如平台、图像格式、打印支持和辅助功能）始终被部署。只有在应用程序使用时，才会部署SQL驱动程序和SVG插件。设计师插件不会被部署。如果要在应用程序包中包含第三方库，必须在构建后手动将库复制到包中。
- en: A couple of years back, Apple launched a new filesystem called `.dmg` files.
    For compatibility with all versions of macOS currently supported by Qt, `macdeployqt`
    uses the older HFS+ filesystem by default. To choose a different filesystem, use
    the `-fs` option.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 几年前，苹果推出了一个名为`.dmg`的新文件系统。为了与Qt当前支持的所有macOS版本兼容，`macdeployqt`默认使用较旧的HFS+文件系统。要选择不同的文件系统，请使用`-fs`选项。
- en: 'You can find detailed instructions at the following link: [https://doc.qt.io/qt-6/macos-deployment.html](https://doc.qt.io/qt-6/macos-deployment.html).'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接找到详细的说明：[https://doc.qt.io/qt-6/macos-deployment.html](https://doc.qt.io/qt-6/macos-deployment.html)。
- en: In the next section, we will discuss the Qt Installer Framework and how to use
    it to create a complete installation package for your users.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论Qt Installer Framework以及如何使用它为用户创建完整的安装包。
- en: Using the Qt Installer Framework
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Qt Installer Framework
- en: The **Qt Installer Framework** (**QIFW**) is a collection of cross-platform
    tools and utilities for creating installers for the supported desktop Qt platforms,
    which include Linux, Windows, and macOS. It allows you to distribute your application
    across all supported desktop Qt platforms without having to rewrite the source
    code. The Qt Installer Framework tools create installers that include a collection
    of pages that help users through the installation, update, and removal processes.
    You provide the installable contents as well as information about it, such as
    the product name, the installer, and the legal agreement.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '**Qt Installer Framework**（**QIFW**）是一个跨平台工具和实用程序集合，用于为支持的桌面Qt平台创建安装程序，包括Linux、Windows和macOS。它允许您在所有支持的桌面Qt平台上分发应用程序，而无需重写源代码。Qt
    Installer Framework工具创建包含一系列页面的安装程序，帮助用户完成安装、更新和卸载过程。您提供可安装的内容以及有关其的信息，如产品名称、安装程序和法律协议。'
- en: You may personalize the installers by adding widgets to the pre-defined pages
    or adding entire pages to give consumers more options. You may add operations
    to the installer by writing scripts. Depending on your use cases, you can give
    end customers an offline or online installation, or both. It works well on Windows,
    Linux, and Mac. We will use it to create installers for our application and we're
    going to see how this works in detail on Windows. The process followed for Linux
    and macOS is similar to Windows. So, we will only discuss the Windows platform.
    You can try similar steps on your favorite platform.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过向预定义页面添加小部件或添加整个页面来个性化安装程序，以提供更多选项给消费者。您可以通过编写脚本向安装程序添加操作。根据您的用例，您可以为最终用户提供离线或在线安装，或两者兼有。它在Windows、Linux和Mac上都能很好地运行。我们将使用它为我们的应用程序创建安装程序，并且将详细讨论在Windows上的工作原理。Linux和macOS的过程与Windows类似。因此，我们只会讨论Windows平台。您可以在您喜欢的平台上尝试类似的步骤。
- en: 'You can learn more about the predefined pages at the following link: [https://doc.qt.io/qtinstallerframework/ifw-use-cases-install.html](https://doc.qt.io/qtinstallerframework/ifw-use-cases-install.html).'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接了解有关预定义页面的更多信息：[https://doc.qt.io/qtinstallerframework/ifw-use-cases-install.html](https://doc.qt.io/qtinstallerframework/ifw-use-cases-install.html)。
- en: 'Before starting the journey, confirm that Qt Installer Framework is installed
    on your machine. If it is not present, launch **Qt Maintenance Tool** and install
    it from the **Select Components** page, as shown in the following screenshot:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，请确认Qt Installer Framework已安装在您的计算机上。如果不存在，请启动**Qt维护工具**，并从**选择组件**页面安装，如下截图所示：
- en: '![Figure 10.12 – The Qt Installer Framework download option in the Qt maintenance
    tool'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.12 - Qt维护工具中的Qt Installer Framework下载选项'
- en: '](img/Figure_10.12_B16231.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.12_B16231.jpg)'
- en: Figure 10.12 – The Qt Installer Framework download option in the Qt maintenance
    tool
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.12 - Qt维护工具中的Qt Installer Framework下载选项
- en: 'Once you have installed the application successfully, you will find the installation
    files under `QTDIR\Tools\QtInstallerFramework\`:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 安装应用程序成功后，您将在`QTDIR\Tools\QtInstallerFramework\`下找到安装文件：
- en: '![Figure 10.13 – Tools inside the Qt Installer Framework directory on Windows'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.13 - Windows上Qt Installer Framework目录中的工具'
- en: '](img/Figure_10.13_B16231.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.13_B16231.jpg)'
- en: Figure 10.13 – Tools inside the Qt Installer Framework directory on Windows
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.13 - Windows上Qt Installer Framework目录中的工具
- en: 'You can see that there are five executables created inside the Qt Installer
    Framework directory:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到在Qt Installer Framework目录中创建了五个可执行文件：
- en: The `archivegen` tool is used to package files and directories into 7zip archives.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '- `archivegen`工具用于将文件和目录打包成7zip存档。'
- en: The `binarycreator` tool is used to create online and offline installers.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '- `binarycreator`工具用于创建在线和离线安装程序。'
- en: '`devtool` is used to update an existing installer with a new installer base.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '- `devtool`用于使用新的安装程序基础更新现有安装程序。'
- en: The `installerbase` tool is the core installer that packs all data and meta
    information.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '- `installerbase`工具是打包所有数据和元信息的核心安装程序。'
- en: The `repogen` tool is used to generate online repositories.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '- `repogen`工具用于生成在线存储库。'
- en: In this section, we will use the `binarycreator` tool to create the installer
    for our Qt application. This tool may be used to produce both offline and online
    installers. Some choices have default values, so you may leave them out.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用`binarycreator`工具为我们的Qt应用程序创建安装程序。此工具可用于生成离线和在线安装程序。某些选项具有默认值，因此您可以将它们省略。
- en: 'To create an offline installer on your Windows machine, you can enter the following
    command to your Qt command prompt:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Windows机器上创建离线安装程序，您可以在Qt命令提示符中输入以下命令：
- en: '[PRE7]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Similarly, to create an offline installer on your Linux or Mac machine, you
    can enter the following command to your Qt command prompt:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，在Linux或Mac机器上创建离线安装程序，您可以在Qt命令提示符中输入以下命令：
- en: '[PRE8]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'For example, to create an offline installer, execute the following command:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要创建离线安装程序，请执行以下命令：
- en: '[PRE9]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The preceding instruction will create an offline installer for the SDK, containing
    all dependencies.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 上述说明将创建一个包含所有依赖项的SDK的离线安装程序。
- en: 'To create an online-only installer, you may use `--online-only`, which defines
    all the packages to install from an online repository on a web server. For example,
    to create an online installer, execute the following command:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建仅在线安装程序，可以使用`--online-only`，它定义了从Web服务器上的在线存储库安装的所有软件包。例如，要创建在线安装程序，请执行以下命令：
- en: '[PRE10]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You can learn more about `binarycreator` and the different options at the following
    page: [https://doc.qt.io/qtinstallerframework/ifw-tools.html#binarycreator](https://doc.qt.io/qtinstallerframework/ifw-tools.html#binarycreator).'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下页面了解有关`binarycreator`和不同选项的更多信息：[https://doc.qt.io/qtinstallerframework/ifw-tools.html#binarycreator](https://doc.qt.io/qtinstallerframework/ifw-tools.html#binarycreator)。
- en: 'The easiest way to use `binarycreator` is to add its path to the `QIFW` bin
    directory and hit the **OK** button. The following screenshot illustrates how
    to do this:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`binarycreator`的最简单方法是将其路径添加到`QIFW` bin目录中，然后单击**OK**按钮。以下屏幕截图说明了如何执行此操作：
- en: '![Figure 10.14 – Adding the QIFW bin directory to the system environment path'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.14–将QIFW bin目录添加到系统环境路径'
- en: '](img/Figure_10.14_B16231.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.14_B16231.jpg)'
- en: Figure 10.14 – Adding the QIFW bin directory to the system environment path
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.14–将QIFW bin目录添加到系统环境路径
- en: Close the **System Properties** screen and launch the Qt command prompt.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭**系统属性**屏幕并启动Qt命令提示符。
- en: 'Let''s proceed to deploy our sample *HelloWorld* application. We''re going
    to create one installable package for our users so that they can double-click
    and install it:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续部署我们的示例* HelloWorld *应用程序。我们将为我们的用户创建一个可安装的软件包，这样他们就可以双击并安装它：
- en: Create a directory structure that matches the installer's design and allows
    it to be extended in the future. The `config` and `packages` subdirectories must
    be present in the directory. It doesn't matter where you put the directory for
    QIFW deployment; all that matters is that it has this structure.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个与安装程序设计相匹配并允许将来扩展的目录结构。目录中必须存在`config`和`packages`子目录。QIFW部署的目录放在哪里并不重要；重要的是它具有这种结构。
- en: 'Make a configuration file with instructions for building the installer binaries
    and online repositories. Create a file called `config.xml` in the config directory
    with the following content:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含构建安装程序二进制文件和在线存储库的说明的配置文件。在config目录中创建一个名为`config.xml`的文件，并添加以下内容：
- en: '[PRE11]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `Title` tag gives the name of the installer that appears in the title bar.
    The application name is added to the page name and introductory text using the
    `Name` tag. The software version number is specified by the `Version` tag. The
    `Publisher` tag defines the software's publisher. The name of the default program
    group for the product in the Windows Start menu is specified by the `StartMenuDir`
    tag. The default destination directory presented to users is `InstallationDirectory`
    in the current user's home directory, as specified by the `TargetDir` tag. You
    can read about more tags in the documentation.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '`Title`标签提供了安装程序在标题栏中显示的名称。应用程序名称使用`Name`标签添加到页面名称和介绍性文本中。软件版本号由`Version`标签指定。`Publisher`标签定义了软件的发布者。产品在Windows开始菜单中的默认程序组名称由`StartMenuDir`标签指定。向用户呈现的默认目标目录是当前用户主目录中的`InstallationDirectory`，由`TargetDir`标签指定。您可以在文档中了解更多标签。'
- en: You can also specify the app bundle icon in `config.xml`. On Windows, it is
    extended with `.ico` and can be used as the application icon for the `.exe` file.
    On Linux, you can specify the icon with a `.png` extension and this can be used
    as the window icon. On macOS, you can specify the icon with `.icns` and this can
    be used as the icon for the newly produced bundle.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在`config.xml`中指定应用程序包图标。在Windows上，它使用`.ico`进行扩展，并可用作`.exe`文件的应用程序图标。在Linux上，您可以使用`.png`扩展名指定图标，并将其用作窗口图标。在macOS上，您可以使用`.icns`指定图标，并将其用作新生成的包的图标。
- en: Now create a subdirectory inside the `packages` directory. This will be your
    `component` name. You can use your organization's name and application name or
    your organization domain as the `component` such as `CompanyName.ApplicationName`.
    The directory name functions as a domain-like identifier, identifying all components.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在在`packages`目录内创建一个子目录。这将是您的`component`名称。您可以使用您的组织名称和应用程序名称或您的组织域作为`component`，例如`CompanyName.ApplicationName`。目录名称充当类似域的标识符，用于标识所有组件。
- en: Make a package information file with details about the components that may be
    installed. In this simple example, the installer just has to deal with one component.
    Let’s create a package information file called `package.xml` inside the `packages\{component}\meta`
    directory.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含有关可能安装的组件的详细信息的软件包信息文件。在这个简单的例子中，安装程序只需处理一个组件。让我们在`packages\{component}\meta`目录中创建一个名为`package.xml`的软件包信息文件。
- en: Add the file in side the meta-directory with the following content to provide
    information about the component to the installater.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在meta目录中添加文件，其中包含有关组件的信息，以提供给安装程序。
- en: 'Let''s create `package.xml` and add the following content to it:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建`package.xml`并将以下内容添加到其中：
- en: '[PRE12]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The information from the following elements is displayed on the component selection
    page during installation:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 以下元素的信息将在安装过程中的组件选择页面上显示：
- en: The `DisplayName` tag specifies the name of the component in the list of components.
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “DisplayName”标签指定了组件在组件列表中的名称。
- en: The `Description` tag specifies the text that is displayed when the component
    is selected.
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “Description”标签指定了在选择组件时显示的文本。
- en: The `Version` tag enables you to promote updates to users when they become available.
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “Version”标签使您能够在更新可用时向用户推广更新。
- en: The `Default` tag specifies whether the component is selected by default. The
    value `true` sets the component as selected.
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “Default”标签指定组件是否默认选择。值“true”将组件设置为已选择。
- en: You can add licensing information to your installer. The name of the file that
    includes the text for the licensing agreement that is shown on the licensing check
    page is specified by the `License` tag.
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以向安装程序添加许可信息。指定了在许可检查页面上显示的许可协议文本的文件名由“License”标签指定。
- en: You can copy the required content inside the `data` subdirectory under the `package`
    directory. Copy all the files and directories to the `data` subdirectory, which
    were earlier created with `windeployqt`. The following screenshot shows the content
    copied inside the `data` subdirectory:![Figure 10.15 – Contents generated by windeployqt
    copied inside the data subdirectory
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以将所需内容复制到“package”目录下的“data”子目录中。将之前使用“windeployqt”创建的所有文件和目录复制到“data”子目录中。以下屏幕截图显示了复制到“data”子目录中的内容：![图10.15
    – windeployqt生成的内容复制到data子目录中
- en: '](img/Figure_10.15_B16231.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.15_B16231.jpg)'
- en: Figure 10.15 – Contents generated by windeployqt copied inside the data subdirectory
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.15 – windeployqt生成的内容复制到data子目录中
- en: 'The next step is to use the `binarycreator` tool to create the installer. Enter
    the following instruction to the Qt command prompt:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是使用“binarycreator”工具创建安装程序。在Qt命令提示符中输入以下指令：
- en: '[PRE13]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You can see that an installer file got generated inside our deployment directory:![Figure
    10.16 – Installer package created inside the deployment directory
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以看到在我们的部署目录中生成了一个安装程序文件：![图10.16 – 部署目录中创建的安装程序包
- en: '](img/Figure_10.16_B16231.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.16_B16231.jpg)'
- en: '[PRE14]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We have got the desired result. Now, let's run the installer to verify that
    the deployment package has been created properly.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们得到了期望的结果。现在，让我们运行安装程序，验证部署包是否已正确创建。
- en: Double-click on the installer file to begin the installation. You will see a
    nice setup wizard appear on screen:![Figure 10.17 – Setup wizard running a deployment
    example
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击安装程序文件开始安装。您将看到一个漂亮的安装向导出现在屏幕上：![图10.17 – 运行部署示例的安装向导
- en: '](img/Figure_10.17_B16231.jpg)'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.17_B16231.jpg)'
- en: Figure 10.17 – Setup wizard running a deployment example
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.17 – 安装向导运行部署示例
- en: Proceed through the pages to complete the installation. Exit the setup wizard.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照页面提示完成安装。退出安装向导。
- en: Now, launch the application from the Windows **Start** menu. You should see
    the **HelloWorld** user interface appear in no time.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，从Windows的**开始**菜单启动应用程序。您应该很快就会看到**HelloWorld**用户界面出现。
- en: You can also find the installed application in **Add/Remove Programs**:![Figure
    10.18 – Deployment example entry in the Windows program list
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以在**添加/删除程序**中找到已安装的应用程序：![图10.18 – Windows程序列表中的部署示例条目
- en: '](img/Figure_10.18_B16231.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.18_B16231.jpg)'
- en: Figure 10.18 – Deployment example entry in the Windows program list
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.18 – Windows程序列表中的部署示例条目
- en: 'You may use the maintenance tool installed along with the installation package
    to update, uninstall, and add components to the application. You can find the
    tool inside your installation directory, as shown in the following screenshot:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用与安装包一起安装的维护工具来更新、卸载和添加应用程序组件。您可以在安装目录中找到该工具，如下面的屏幕截图所示：
- en: '![Figure 10.19 – Maintenance tool in the installation directory'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.19 – 安装目录中的维护工具'
- en: '](img/Figure_10.19_B16231.jpg)'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.19_B16231.jpg)'
- en: Figure 10.19 – Maintenance tool in the installation directory
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.19 – 安装目录中的维护工具
- en: Congratulations! You have created an installer package for your sample application.
    Now you can ship your developed Qt application to your users and friends.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您已为示例应用程序创建了一个安装程序包。现在，您可以将开发的Qt应用程序发送给用户和朋友。
- en: 'You can also provide further customization with customized setup wizard pages.
    You can find the complete list of templates with installers that can be used with
    the QIFW at the following link:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过自定义设置向导页面进行进一步定制。您可以在以下链接找到可与QIFW一起使用的安装程序的完整模板列表：
- en: '[https://doc.qt.io/qtinstallerframework/ifw-customizing-installers.html](https://doc.qt.io/qtinstallerframework/ifw-customizing-installers.html)'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://doc.qt.io/qtinstallerframework/ifw-customizing-installers.html](https://doc.qt.io/qtinstallerframework/ifw-customizing-installers.html)'
- en: '[https://doc.qt.io/qtinstallerframework/qtifwexamples.html](https://doc.qt.io/qtinstallerframework/qtifwexamples.html).'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://doc.qt.io/qtinstallerframework/qtifwexamples.html](https://doc.qt.io/qtinstallerframework/qtifwexamples.html)。'
- en: 'You can explore more features of the framework here: [https://doc.qt.io/qtinstallerframework/ifw-overview.html](https://doc.qt.io/qtinstallerframework/ifw-overview.html).'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在这里探索框架的更多功能：[https://doc.qt.io/qtinstallerframework/ifw-overview.html](https://doc.qt.io/qtinstallerframework/ifw-overview.html)。
- en: In this section, we created an installable package to ship to our end users.
    In the next section, we will learn to deploy on the Android platform.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们创建了一个可安装的软件包，以供最终用户使用。在下一节中，我们将学习在Android平台上部署。
- en: Deploying on Android
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Android上部署
- en: In addition to desktop platforms such as Windows, Linux, and macOS, mobile platforms
    are equally important due to the massive number of users. Many developers want
    to make their applications available on mobile platforms. Let's have a look at
    how that's done. We will briefly discuss deployment considerations on Android.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 除了桌面平台如Windows、Linux和macOS之外，移动平台同样重要，因为用户数量庞大。许多开发人员希望将他们的应用程序提供给移动平台。让我们看看如何做到这一点。我们将简要讨论Android上的部署注意事项。
- en: 'In [*Chapter 5*](B16231_05_Final_ASB_ePub.xhtml#_idTextAnchor103), *Cross-Platform
    Development*, you have learned how to create an `.apk` file, which is the deployment
    package for the Android platform. So, we won''t be discussing the steps again.
    In this section, we will discuss a few necessary changes before uploading to the
    play store:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第5章*](B16231_05_Final_ASB_ePub.xhtml#_idTextAnchor103)，*跨平台开发*中，您已经学会了如何创建一个`.apk`文件，这是Android平台的部署包。因此，我们不会再讨论这些步骤。在本节中，我们将讨论上传到Play商店之前的一些必要更改：
- en: Create a simple *HelloWorld* application using the Android Kit from the kit
    selection screen.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用kit选择屏幕从Android Kit创建一个简单的*HelloWorld*应用程序。
- en: Change the build mode to **Release** mode.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将构建模式更改为**发布**模式。
- en: Open the build settings of your project. You will find several options on the
    screen:![Figure 10.20 – A screenshot showing the Android manifest option in build
    settings
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开项目的构建设置。您会在屏幕上看到几个选项：![图10.20 - 屏幕截图显示构建设置中的Android清单选项
- en: '](img/Figure_10.20_B16231.jpg)'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.20_B16231.jpg)'
- en: Figure 10.20 – A screenshot showing the Android manifest option in build settings
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.20 - 屏幕截图显示构建设置中的Android清单选项
- en: You can see the **Keystore** field under the **Application Signature** section.
    Click on the **Browse…** button to select your existing keystore file or use the
    **Create…** button to create a new keystore file. It can protect key material
    from unauthorized use. This is an optional step and only required for signing
    your deployment binary.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以在**应用程序签名**部分下看到**密钥库**字段。单击**浏览...**按钮选择现有的密钥库文件，或使用**创建...**按钮创建新的密钥库文件。它可以保护密钥材料免受未经授权的使用。这是一个可选步骤，只有在签署部署二进制文件时才需要。
- en: When you click the **Create…** button, then you will see a dialog with several
    fields. Fill in the related fields and click on the **Save** button. *Figure 10.21*
    shows the keystore creation dialog:![Figure 10.21 – A screenshot showing the keystore
    creation screen
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您单击**创建...**按钮时，您将看到一个对话框，其中有几个字段。填写相关字段，然后单击**保存**按钮。*图10.21*显示了密钥库创建对话框：![图10.21
    - 屏幕截图显示密钥库创建屏幕
- en: '](img/Figure_10.21_B16231.jpg)'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.21_B16231.jpg)'
- en: Figure 10.21 – A screenshot showing the keystore creation screen
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.21 - 屏幕截图显示密钥库创建屏幕
- en: Save the keystore file anywhere, making sure to end the filename with `.keystore`.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将密钥库文件保存在任何地方，确保文件名以`.keystore`结尾。
- en: The next step is to sign the application package. This is also an optional step
    and is only required for play store publication. You can learn more about application
    signing in the official documentation available at [https://developer.android.com/studio/publish/app-signing](https://developer.android.com/studio/publish/app-signing).
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是对应用程序包进行签名。这也是一个可选步骤，只有在发布到Play商店时才需要。您可以在官方文档中了解有关应用程序签名的更多信息，网址为[https://developer.android.com/studio/publish/app-signing](https://developer.android.com/studio/publish/app-signing)。
- en: You can select the target Android version and configure your Android app by
    creating the `AndroidManifect.xml` file with Qt Creator. To do that, click on
    the **Create** **Templates** button on the **Build Android APK** screen. You will
    see a dialog appear, as shown in the following screenshot:![Figure 10.22 – A screenshot
    showing the manifest file creation wizard
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以选择目标Android版本，并通过在Qt Creator中创建`AndroidManifect.xml`文件来配置您的Android应用程序。要做到这一点，单击**构建Android
    APK**屏幕上的**创建** **模板**按钮。您将看到一个对话框出现，如下图所示：![图10.22 - 屏幕截图显示清单文件创建向导
- en: '](img/Figure_10.22_B16231.jpg)'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.22_B16231.jpg)'
- en: Figure 10.22 – A screenshot showing the manifest file creation wizard
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.22 - 屏幕截图显示清单文件创建向导
- en: Open the manifest file. You will see several options for your Android application.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开清单文件。您将看到Android应用程序的几个选项。
- en: You can set the package name, version code, SDK version, application icon, permissions,
    and so on. If you add a unique icon, then the default Android icon for your app
    won't appear on the device. It will make your application unique and easily discoverable
    on screen.
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以设置包名称、版本代码、SDK版本、应用程序图标、权限等。如果添加一个独特的图标，那么您的应用程序在设备上不会显示默认的Android图标。这将使您的应用程序在屏幕上独特且易于发现。
- en: Let's add *HelloWorld* as the application name and add the Qt icon as our application
    icon, as shown in the following screenshot:![Figure 10.23 – Android manifest file
    showing different available options
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将*HelloWorld*作为应用程序名称，并将Qt图标作为我们的应用程序图标，如下图所示：![图10.23 - Android清单文件显示不同的可用选项
- en: '](img/Figure_10.23_B16231.jpg)'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.23_B16231.jpg)'
- en: Figure 10.23 – Android manifest file showing different available options
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.23 - Android清单文件显示不同的可用选项
- en: Add additional libraries if you are using any third-party libraries such as
    OpenSSL.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果使用任何第三方库，如OpenSSL，则添加额外的库。
- en: Click on the **Run** button in the bottom-left corner of Qt Creator to build
    and run the application on an Android device. You can also hit the **Deployment**
    button below the **Run** button to create the deployment binaries.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击Qt Creator左下角的**运行**按钮，在Android设备上构建和运行应用程序。您还可以单击**运行**按钮下方的**部署**按钮来创建部署二进制文件。
- en: You will see a new dialog appear on the screen. This dialog allows you to choose
    between your physical Android hardware or the software-emulated virtual device.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您会看到屏幕上出现一个新的对话框。此对话框允许您选择物理Android硬件或软件仿真虚拟设备。
- en: Connect your Android device and click on the **Refresh Device List** button.
    Don't forget to enable **Developer options** from your Android device settings.
    Allow **USB Debugging** when your Android device prompts you:![Figure 10.24 –
    Android device selection dialog
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接您的Android设备并单击**刷新设备列表**按钮。不要忘记从Android设备设置中启用**开发者选项**。当您的Android设备提示时，请允许**USB调试**：![图10.24
    – Android设备选择对话框
- en: '](img/Figure_10.24_B16231.jpg)'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.24_B16231.jpg)'
- en: Figure 10.24 – Android device selection dialog
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.24 – Android设备选择对话框
- en: If you want to use a virtual device, click on the **Create Android Virtual Device**
    button. You will see the following screen appear:![](img/Figure_10.25_B16231.jpg)
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您想使用虚拟设备，请单击**创建Android虚拟设备**按钮。您将看到以下屏幕出现：![](img/Figure_10.25_B16231.jpg)
- en: Figure 10.25 – Android virtual device creation screen
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.25 – Android虚拟设备创建屏幕
- en: 'If the screen warns you about a failure to create a new AVD, then update the
    Android platform tools and system images from the Android SDK manager. You can
    update these from the command line as follows:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果屏幕警告您无法创建新AVD，则请从Android SDK管理器中更新Android平台工具和系统映像。您可以按照以下命令行更新这些内容：
- en: '[PRE15]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then, run the following command to run `avdmanager`:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，运行以下命令来运行`avdmanager`：
- en: '[PRE16]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The final step is to click on the `.apk` extension inside the `build` folder:![Figure
    10.26 – Android installer file generated inside the build directory
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步是单击`build`文件夹中的`.apk`扩展名：![图10.26 – 生成在build目录中的Android安装程序文件
- en: '](img/Figure_10.26_B16231.jpg)'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.26_B16231.jpg)'
- en: Figure 10.26 – Android installer file generated inside the build directory
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.26 – 生成在build目录中的Android安装程序文件
- en: 'Internally, Qt runs the `androiddeployqt` utility. Sometimes, the tool may
    fail to create the package with the following error:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在内部，Qt运行`androiddeployqt`实用程序。有时，该工具可能无法创建包，并显示以下错误：
- en: '[PRE17]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In that case, put your application with a shorter file path and ensure that
    no directory in your file path has whitespaces. Then, build the application.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，请将您的应用程序放在较短的文件路径中，并确保您的文件路径中没有目录包含空格。然后，构建应用程序。
- en: You can distribute the `.apk` files to your friends or users. Users have to
    accept an option saying **Install from Unknown Sources** in their Android mobile
    or tablets. To avoid this, you should publish your application on the play store.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以将`.apk`文件分发给您的朋友或用户。用户必须在其Android手机或平板电脑上接受一个选项，即**从未知来源安装**。为了避免这种情况，您应该在Play商店上发布您的应用程序。
- en: However, if you want to distribute your apps on the Google Play Store, then
    you have to register as a Google Play developer and sign the package. Google charges
    a small one-off amount to allow developers to publish their applications.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 但是，如果您想在Google Play商店上分发您的应用程序，那么您必须注册为Google Play开发者并对软件包进行签名。Google会收取一笔小额费用，以允许开发者发布他们的应用程序。
- en: Please note that Qt considers Android apps as a closed source. So, you will
    require a commercial Qt license if you want to keep your Android app code private.
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，Qt将Android应用视为闭源。因此，如果您希望保持Android应用代码私有，您将需要商业Qt许可证。
- en: Congratulations! You have successfully generated a deployable Android application.
    Unlike iOS, Android is an open system. You can copy or distribute the `.apk` file
    into other Android devices running on the same Android version and install it.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您已成功生成了一个可部署的Android应用程序。与iOS不同，Android是一个开放系统。您可以将`.apk`文件复制或分发到运行相同Android版本的其他Android设备上并进行安装。
- en: In this section, we created an installable package for our Android device. In
    the next section, we will learn about a few more installation tools.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们为我们的Android设备创建了一个可安装的软件包。在下一节中，我们将学习更多安装工具。
- en: Other installation tools
  id: totrans-274
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他安装工具
- en: 'In this section, we will discuss some additional tools you can use to create
    an installer. Note that we won''t be discussing these tools in detail. I have
    not verified these installation frameworks with Qt 6\. You may visit the respective
    tool website and learn from their documentation. In addition to the installation
    framework and tools provided by Qt, you can use the following tools on your Windows
    machine:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论一些其他工具，您可以使用这些工具创建安装程序。请注意，我们不会详细讨论这些工具。我尚未验证这些安装框架是否与Qt 6兼容。您可以访问各自工具的网站并从其文档中了解更多信息。除了Qt提供的安装框架和工具之外，您还可以在Windows机器上使用以下工具：
- en: '**CQtDeployer** is an application to extract all the dependent libraries of
    executables and create a launch script for your application. The tool claims to
    deploy applications faster and provides flexible infrastructure. It supports both
    Windows and Linux platforms. You can learn more about this tool at the following
    link: [https://github.com/QuasarApp/CQtDeployer](https://github.com/QuasarApp/CQtDeployer).'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CQtDeployer**是一个应用程序，用于提取可执行文件的所有依赖库并为您的应用程序创建启动脚本。该工具声称可以更快地部署应用程序并提供灵活的基础设施。它支持Windows和Linux平台。您可以在以下链接了解更多关于该工具的信息：[https://github.com/QuasarApp/CQtDeployer](https://github.com/QuasarApp/CQtDeployer)。'
- en: '**Nullsoft Scriptable Install System** (**NSIS**) is a script-driven installation
    authoring tool from Nullsoft, the same company that created Winamp. It has become
    a popular alternative to proprietary commercial tools such as InstallShield. The
    current version of NSIS has a modern graphical user interface, LZMA compression,
    multilingual support, and a simple plugin system. You can explore more about the
    tool at [https://nsis.sourceforge.io/Main_Page](https://nsis.sourceforge.io/Main_Page).'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Nullsoft Scriptable Install System**（**NSIS**）是来自Nullsoft的基于脚本的安装工具，该公司也创建了Winamp。它已成为专有商业工具（如InstallShield）的流行替代品。NSIS的当前版本具有现代图形用户界面、LZMA压缩、多语言支持和简单的插件系统。您可以在[https://nsis.sourceforge.io/Main_Page](https://nsis.sourceforge.io/Main_Page)了解更多有关该工具的信息。'
- en: '**InstallShield** is a proprietary software application that allows you to
    create installers and software bundles. InstallShield is generally used to install
    the software on Windows Platform desktop and server systems, but it may also be
    used to manage software applications and packages on a wide range of portable
    and mobile devices. Have a look at its features and play with the trial version.
    You can download the trial and read more about it at [https://www.revenera.com/install/products/installshield.html](https://www.revenera.com/install/products/installshield.html).'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**InstallShield**是一款专有软件应用程序，允许您创建安装程序和软件捆绑包。InstallShield通常用于在Windows平台桌面和服务器系统上安装软件，但也可以用于管理各种便携式和移动设备上的软件应用程序和软件包。查看其功能并试用试用版。您可以在以下链接下载试用版并了解更多信息：[https://www.revenera.com/install/products/installshield.html](https://www.revenera.com/install/products/installshield.html)。'
- en: '**Inno Setup** is a free software script-driven installation system created
    in Delphi. It was first released in 1997, yet still competes with many commercial
    installers thanks to its excellent feature set and stability. Learn more about
    this installer at the following link: [https://jrsoftware.org/isinfo.php](https://jrsoftware.org/isinfo.php).'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Inno Setup**是一个由Delphi创建的免费软件脚本驱动安装系统。它于1997年首次发布，但仍然凭借其出色的功能集和稳定性与许多商业安装程序竞争。在以下链接了解更多关于此安装程序的信息：[https://jrsoftware.org/isinfo.php](https://jrsoftware.org/isinfo.php)。'
- en: You can select any of the installation frameworks and deploy your application.
    In the end, it should meet your installation goal.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以选择任何安装框架并部署您的应用程序。最终，它应该能够满足您的安装目标。
- en: In this section, we discussed a few more installation tools that may be beneficial
    for your needs. Let's now summarize our takeaways from this chapter.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了一些可能有益于您需求的安装工具。现在让我们总结一下本章的要点。
- en: Summary
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概要
- en: We began the chapter by discussing the application deployment problem and learning
    the difference between static and dynamic libraries. Then we discussed the different
    deployment tools in Qt and the specific case of Windows deployment and installation.
    Armed with this knowledge, we deployed a sample app on Windows and created an
    installer using the Qt Installer Framework. In addition, we discovered deploying
    applications on Linux and macOS and honed our skills for deploying applications
    on various platforms. Later, we explained some of the important points to be considered
    before publishing a Qt-based Android application to the play store.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先讨论了应用程序部署问题，并学习了静态库和动态库之间的区别。然后我们讨论了Qt中的不同部署工具，以及Windows部署和安装的特定情况。凭借这些知识，我们在Windows上部署了一个示例应用程序，并使用了Qt安装程序框架创建了一个安装程序。此外，我们还发现了在Linux和macOS上部署应用程序，并磨练了在各种平台上部署应用程序的技能。之后，我们解释了在将基于Qt的Android应用程序发布到Play商店之前需要考虑的一些重要问题。
- en: Finally, we looked at some third-party installer utilities. To summarize, you
    have learned to develop, test, and deploy a Qt application on various platforms.
    With this knowledge, you should be able to create your installation packages and
    share them with the world.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们看了一些第三方安装程序工具。总之，您已经学会了在各种平台上开发、测试和部署Qt应用程序。有了这些知识，您应该能够创建自己的安装包并与世界分享。
- en: In [*Chapter 11*](B16231_11_Final_ASB_ePub.xhtml#_idTextAnchor256), *Internationalization*,
    we will learn about developing a translation-aware Qt application.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第11章*](B16231_11_Final_ASB_ePub.xhtml#_idTextAnchor256)，*国际化*中，我们将学习开发一个支持翻译的Qt应用程序。
