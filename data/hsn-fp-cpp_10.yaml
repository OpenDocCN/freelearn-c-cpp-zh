- en: Improving Cohesion Using Classes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用类提高内聚性
- en: We've previously discussed how we can use functions and operations on functions
    to organize our code. We can't ignore, however, the prevalent paradigm for software
    design of the past few decades—**object-oriented programming** (**OOP**). Can
    OOP work with functional programming? Is there any compatibility between the two,
    or are they completely disjointed?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前讨论过如何使用函数和函数操作来组织我们的代码。然而，我们不能忽视过去几十年软件设计的主流范式——面向对象编程（OOP）。面向对象编程能够与函数式编程配合吗？它们之间是否存在任何兼容性，还是完全不相关？
- en: It turns out that we can easily convert between classes and functions. I learned
    through my friend and mentor, J.B. Rainsberger, that classes are nothing more
    than a set of partially applied, cohesive pure functions. In other words, we can
    use classes as a convenient location to group cohesive functions together. But,
    in order to do so, we need to understand the high cohesion principle and how to
    transform functions into classes and vice versa.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，我们可以很容易地在类和函数之间进行转换。我通过我的朋友和导师J.B. Rainsberger学到，类只不过是一组部分应用的、内聚的纯函数。换句话说，我们可以使用类作为一个方便的位置，将内聚的函数组合在一起。但是，为了做到这一点，我们需要理解高内聚原则以及如何将函数转换为类，反之亦然。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Understanding the connection between functional programming and OOP
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解函数式编程和面向对象编程之间的联系
- en: Understanding how classes are equivalent with sets of cohesive, partially-applied
    pure functions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解类如何等同于一组内聚的、部分应用的纯函数
- en: Understanding the need for high cohesion
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解高内聚性的必要性
- en: How to group pure functions into classes
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将纯函数分组到类中
- en: How to split a class into pure functions
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将一个类分解为纯函数
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You will need a compiler that supports C++ 17\. I used GCC 7.3.0.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您将需要一个支持C++ 17的编译器。我使用的是GCC 7.3.0。
- en: The code can be found on GitHub at [https:/​/​github.​com/​PacktPublishing/​Hands-​On-​Functional-Programming-​with-​Cpp](https://github.%E2%80%8Bcom/PacktPublishing/Hands-On-Functional-Programming-with-Cpp)
    in the `Chapter08` folder. It includes and uses `doctest`, which is a single-header
    open source unit testing library. You can find it in its GitHub repository at [https:/​/github.​com/​onqtam/​doctest](https://github.%E2%80%8Bcom/onqtam/doctest).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 代码可以在GitHub的[https:/​/​github.​com/​PacktPublishing/​Hands-​On-​Functional-Programming-​with-​Cpp](https://github.%E2%80%8Bcom/PacktPublishing/Hands-On-Functional-Programming-with-Cpp)的`Chapter08`文件夹中找到。它包括并使用了`doctest`，这是一个单头开源单元测试库。您可以在其GitHub存储库中找到它，网址为[https:/​/github.​com/​onqtam/​doctest](https://github.%E2%80%8Bcom/onqtam/doctest)。
- en: Improving cohesion using classes
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用类提高内聚性
- en: As a young software engineering student, I spent an inordinate amount of time
    reading about OOP. I was trying to understand how OOP works and why it's so important
    for modern software development. At that time, most books were mentioning that
    OOP is about organizing code into classes that have three important properties—encapsulation,
    inheritance, and polymorphism.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名年轻的软件工程学生，我花了大量时间阅读面向对象编程的相关内容。我试图理解面向对象编程的工作原理，以及为什么它对现代软件开发如此重要。那时，大多数书籍都提到面向对象编程是将代码组织成具有封装、继承和多态三个重要属性的类。
- en: Almost 20 years later, I realized that this vision of OOP was quite limited.
    OOP was largely developed at Xerox PARC, the laboratory known for generating an
    amazing number of high-quality ideas, such as graphical user interfaces, point
    and click, the mouse, and the spreadsheet, to mention just a few. Alan Kay, one
    of the OOP originators, drew from his knowledge as a biology major while facing
    the problem of organizing large code bases in ways that supported the new GUI
    paradigm. He came up with the idea of objects and classes, but he stated years
    later that the main idea of this style of code organization is messaging. His
    view on objects was that they should communicate in a similar way to cells, with
    a simulation of their chemical messages in code. That's why a method call in an
    OOP language, from his view, should instead be a message that's passed from a
    cell or object to another cell or object.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 近20年后，我意识到这种面向对象编程的观点相当有限。面向对象编程主要是在施乐帕克（Xerox PARC）开发的，这个实验室以产生大量高质量的想法而闻名，比如图形用户界面、点和点击、鼠标和电子表格等。艾伦·凯（Alan
    Kay）是面向对象编程的创始人之一，他在面对支持新的图形用户界面范式的大型代码库组织问题时，借鉴了自己作为生物学专业的知识。他提出了对象和类的概念，但多年后他表示，这种代码组织风格的主要思想是消息传递。他对对象的看法是，它们应该以与细胞类似的方式进行通信，在代码中模拟它们的化学信息传递。这就是为什么从他的观点来看，面向对象编程语言中的方法调用应该是一个从一个细胞或对象传递到另一个细胞或对象的消息。
- en: Once we forget about ideas of encapsulation, inheritance, and polymorphism,
    and place more importance on objects instead of classes, the friction between
    the functional paradigm and OOP disappears. Let's see where this fundamental view
    of OOP takes us.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们忘记了封装、继承和多态的概念，更加重视对象而不是类，函数式编程范式和面向对象编程之间的摩擦就消失了。让我们看看这种面向对象编程的基本观点会带我们去哪里。
- en: Classes from a functional perspective
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从功能角度看待类
- en: There are multiple ways to look at classes. In terms of knowledge management,
    I conceptualize a *class* as a classification—it's a way of grouping instances
    (or objects) that have similar properties. If we think about classes in this way,
    then inheritance comes as a natural property—there are classes of objects that
    have similar properties, but they also differ in various ways; saying that they
    inherit from one another is a quick way to explain them.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种方式来看待类。在知识管理方面，我将*类*概念化为分类——它是一种将具有相似属性的实例（或对象）分组的方式。如果我们以这种方式思考类，那么继承就是一种自然的属性——有一些对象类具有相似的属性，但它们在各种方面也有所不同；说它们继承自彼此是一种快速解释的方式。
- en: However, this conception of classes works in domains where our knowledge is
    quasi-complete. In the software development sphere, we often work with limited
    knowledge of the application domain, and the domain keeps expanding over time.
    Therefore, we need to focus on code structures that have weak links between concepts,
    allowing us to change or replace them as we learn more about the domain. What
    should we do about classes then?
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种类的概念适用于我们的知识是准完全的领域。在软件开发领域，我们经常在应用领域的知识有限的情况下工作，而且领域随着时间的推移而不断扩展。因此，我们需要专注于代码结构，这些结构在概念之间有着薄弱的联系，使我们能够在了解领域的更多内容时进行更改或替换。那么，我们应该怎么处理类呢？
- en: Even without their strong relationships, classes are a powerful construct in
    software design. They provide a neat way of grouping methods, and of combining
    methods with data. They can help us navigate larger domains better than functions,
    since we can end up with thousands of functions (if not more). So, how can we
    use classes with functional programming?
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 即使没有强大的关系，类在软件设计中也是一个强大的构造。它们提供了一种整洁的方法来分组方法，并将方法与数据结合在一起。与函数相比，它们可以帮助我们更好地导航更大的领域，因为我们最终可能会有成千上万个函数（如果不是更多）。那么，我们如何在函数式编程中使用类呢？
- en: First, as you may have noticed from our previous examples, functional programming
    places complexity inside data structures. Classes are often a neat way of defining
    the data structures that we need, especially in a language such as C++, which
    allows us to override common operators. Common examples include imaginary numbers,
    measurable units (temperature, length, velocity, and so on), and currency data
    structures. Each of them requires data to be grouped with specific operators and
    conversions.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，正如你可能从我们之前的例子中注意到的那样，函数式编程将复杂性放在数据结构中。类通常是定义我们需要的数据结构的一种整洁方式，特别是在像C++这样的语言中，它允许我们重写常见的运算符。常见的例子包括虚数、可测单位（温度、长度、速度等）和货币数据结构。每个例子都需要将数据与特定的运算符和转换进行分组。
- en: Second, the immutable functions we write tend to naturally group themselves
    into logical classifications. In our Tic-Tac-Toe example, we have a number of
    functions that work with a data structure that we call a **line**; our natural
    tendency is to group these functions together. While nothing stops us from grouping
    them in a header file, classes provide a natural place to combine functions so
    that we can find them later. This leads to another type of class—an immutable
    object that is initialized once, and whose every operation returns a value instead
    of mutating its state.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，我们编写的不可变函数往往自然地分组成逻辑分类。在我们的井字棋示例中，我们有许多函数与我们称之为**line**的数据结构一起工作；我们的自然倾向是将这些函数分组在一起。虽然没有什么能阻止我们将它们分组在头文件中，但类提供了一个自然的地方来组合函数，以便以后能够找到它们。这导致了另一种类型的类——一个初始化一次的不可变对象，其每个操作都返回一个值，而不是改变其状态。
- en: Let's look in more detail at the equivalence between an OOP design and a functional
    structure.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地看一下面向对象设计和函数结构之间的等价关系。
- en: The equivalence OOP – functional
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 面向对象设计和函数式的等价关系
- en: 'If we go back to our Tic-Tac-Toe result solution, you''ll notice that there
    are a number of functions that receive `board` as a parameter:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们回到我们的井字棋结果解决方案，你会注意到有许多函数将`board`作为参数接收：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We can define a board as follows, for example:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以定义一个棋盘如下：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, when we pass it into the functions, it''s like we''re binding the board
    to the parameter of the functions. Now, let''s do that for our `allLinesColumnsAndDiagonals`
    lambda:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，当我们将其传递给函数时，就好像我们将棋盘绑定到函数的参数上。现在，让我们为我们的`allLinesColumnsAndDiagonals` lambda做同样的事情：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The preceding lambda and many other examples we have looked at in earlier chapters
    call other lambdas, yet they don't capture them. For example, how does the `bindAllToBoard`
    lambda know about the `allLinesColumnsAndDiagonal` lambda? The only reason this
    works is because the lambdas are in a global scope. Moreover, with my compiler,
    when trying to capture `allLinesColumnsAndDiagonals`, I get the following error
    message: `<lambda>` *cannot be captured because it does not have automatic storage
    duration*, so it actually will not compile if I try to capture the lambda I use.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的lambda和我们在早期章节中看到的许多其他例子都调用了其他lambda，但它们没有捕获它们。例如，`bindAllToBoard` lambda如何知道`allLinesColumnsAndDiagonal`
    lambda？这能够工作的唯一原因是因为lambda在全局范围内。此外，使用我的编译器，当尝试捕获`allLinesColumnsAndDiagonals`时，我会得到以下错误消息：`<lambda>`
    *cannot be captured because it does not have automatic storage duration*，因此如果我尝试捕获我使用的lambda，它实际上不会编译。
- en: I hope what I am about to say is self-explanatory, but I will say it anyway—for
    production code, avoid having lambdas (and anything else, really) in the global
    scope. This will also force you to capture the variables, which is a good thing
    because it makes dependencies explicit.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望我即将说的是不言自明的，但我还是要说一下——对于生产代码，避免在全局范围内使用lambda（以及其他任何东西）是一个好习惯。这也会迫使你捕获变量，这是一件好事，因为它会使依赖关系变得明确。
- en: 'Now, let''s look at how we call it:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看我们如何调用它：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Does this remind you of something? Let''s look at how we would write this in
    a class. I will name it `BoardResult` for now, since I can''t come up with a better
    name:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这让你想起了什么吗？让我们看看我们如何在类中编写这个。我现在将其命名为`BoardResult`，因为我想不出更好的名字：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s recap what we did:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下我们做了什么：
- en: We saw more functions taking `board` as a parameter.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们看到更多的函数将`board`作为参数。
- en: We decided to bind the `board` parameter to a value using a separate function,
    thereby obtaining a map between a string denoting the function name and the lambda
    bound to the value.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们决定使用一个单独的函数将`board`参数绑定到一个值，从而获得一个字符串表示函数名和与该值绑定的lambda之间的映射。
- en: To call it, we needed to first call the initializing function and then we could
    call the partially-applied lambda.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要调用它，我们需要先调用初始化函数，然后才能调用部分应用的lambda。
- en: '*This looks extremely similar to a class*—use the constructor to pass in the
    value that''s shared between the class methods, and then call the methods without
    passing in the parameter.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*这看起来非常类似于一个类*——使用构造函数传递类方法之间共享的值，然后调用方法而不传递参数。'
- en: Therefore, *a class is just a set of partially applied lambdas*. But how do
    we group them?
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，*一个类只是一组部分应用的lambda*。但我们如何将它们分组呢？
- en: The principle of high cohesion
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高内聚原则
- en: In our previous example, we grouped the functions together in a class based
    on the fact that they took the same parameter, `board`. I have found this to be
    a good rule of thumb. However, we can encounter more complex situations.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的例子中，我们根据它们都需要相同的参数`board`将函数分组在一起。我发现这是一个很好的经验法则。然而，我们可能会遇到更复杂的情况。
- en: 'To understand why, let''s look into another set of functions (the implementation
    has been ignored for the purpose of this discussion):'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解为什么，让我们看另一组函数（为了讨论的目的，实现已被忽略）：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Should these functions be part of the `BoardResult` class defined previously?
    Or should they be part of another class, `Coordinate`? Or should we split them,
    with some of them going to the `BoardResult` class, and others going to the `Coordinate`
    class?
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数应该是之前定义的`BoardResult`类的一部分吗？还是应该是另一个类`Coordinate`的一部分？或者我们应该将它们拆分，其中一些归入`BoardResult`类，另一些归入`Coordinate`类？
- en: Our previous method doesn't work for all the functions. If we look solely at
    their parameters, all of the preceding functions take `board`. However, some of
    them also take `coordinate / coordinates` as a parameter. Should `projectCoordinates`
    be part of the `BoardResult` class, or part of the `Coordinate` class?
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以前的方法并不适用于所有的功能。如果我们仅仅看它们的参数，所有之前的函数都需要`board`。然而，其中一些还需要`coordinate / coordinates`作为参数。`projectCoordinates`应该是`BoardResult`类的一部分，还是`Coordinate`类的一部分？
- en: More importantly, what's the base principle we can follow to group these functions
    into classes?
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 更重要的是，我们可以遵循什么基本原则将这些功能分组到类中呢？
- en: 'Since there''s no clear answer regarding the static structure of the code,
    we need to think about the code evolution instead. The questions we need to ask
    are the following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 由于代码的静态结构没有明确的答案，我们需要考虑代码的演变。我们需要问的问题是：
- en: Which of the functions do we expect to change together? Which of the functions
    do we expect to change separately?
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们期望哪些函数一起改变？我们期望哪些函数分开改变？
- en: This line of reasoning leads us to the high cohesion principle. But, let's unpack
    it first. What do we mean by cohesion?
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这种推理方式引导我们到高内聚原则。但是，让我们先解开它。我们所说的内聚是什么意思？
- en: As an engineer and a science geek, I met cohesion in the physical world. When
    we talk about water, for example, the molecules composing the liquid tend to stick
    together. I also met cohesion as a social force. As a change agent working with
    customers who try to adopt modern software development practices, I've often had
    to deal with group cohesion—the tendency of people to cluster together around
    a point of view.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名工程师和科学迷，我在物理世界中遇到了内聚。例如，当我们谈论水时，构成液体的分子倾向于粘在一起。我也遇到了内聚作为一种社会力量。作为一个与试图采用现代软件开发实践的客户合作的变革者，我经常不得不处理群体凝聚力——人们围绕一种观点聚集在一起的倾向。
- en: When we talk about cohesion for functions, there is no physical force that pushes
    them together, and they definitely don't stick to points of view. So, what are
    we talking about? We're talking about a neurological force, so to speak.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈论函数的内聚性时，没有物理力量将它们推在一起，它们绝对不会固守观点。那么，我们在谈论什么呢？我们在谈论一种神经力量，可以这么说。
- en: The human brain has a huge capacity for finding patterns and grouping related
    items in categories, combined with an uncannily fast way of navigating them. The
    force that binds functions together is in our brains—it's the finding of a unifying
    purpose that emerges from the combination of seemingly unrelated functions.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 人脑有着发现模式和将相关物品分组到类别中的巨大能力，再加上一种神奇的快速导航方式。将函数绑在一起的力量在我们的大脑中——它是从看似无关的功能组合中出现的统一目的的发现。
- en: High cohesion is useful because it allows us to understand and navigate a few
    big concepts (such as board, line, and token) rather than tens or hundreds of
    small functions. Moreover, when (not if) we need to add a new behavior or change
    an existing one, high cohesion will allow us to find the place for a new behavior
    fast, and to add it with minimal changes to the remainder of the network.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 高内聚性很有用，因为它使我们能够理解和导航一些大概念（如棋盘、线和标记），而不是数十甚至数百个小函数。此外，当（而不是如果）我们需要添加新的行为或更改现有行为时，高内聚性将使我们能够快速找到新行为的位置，并且以最小的更改添加它到网络的其余部分。
- en: Cohesion is a metric of software design, introduced by Larry Constantine in
    the 1960s as part of his *Structured Design* approach. Through experience, we
    have noticed that high cohesion correlates with a low cost of change.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 内聚是软件设计的一个度量标准，由拉里·康斯坦丁在20世纪60年代作为他的*结构化设计*方法的一部分引入。通过经验，我们注意到高内聚性与低变更成本相关。
- en: Let's see how to apply this principle in order to group our functions in to
    classes.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何应用这个原则来将我们的函数分组到类中。
- en: Grouping cohesive functions into classes
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将内聚的函数分组到类中
- en: As previously discussed, we can look at cohesion in terms of a unifying purpose
    or concept of the class. However, I usually find it more thorough to look at the
    evolution of code and decide on the function groups based on what might change
    in the future, and what other changes it might trigger.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 正如之前讨论的，我们可以从一个类的统一目的或概念的角度来看内聚。然而，我通常发现更彻底的方法是根据代码的演变来决定函数组，以及未来可能发生的变化以及它可能触发的其他变化。
- en: 'You might not expect to learn many things from our Tic-Tac-Toe result problem.
    It is fairly simple, and seems quite contained. However, a quick search on the
    web leads us to a number of Tic-Tac-Toe variations, including the following:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能不会指望从我们的井字棋结果问题中学到很多东西。它相当简单，看起来相当容易控制。然而，网上的快速搜索会带我们找到一些井字棋的变体，包括以下内容：
- en: The *m x n* board, with the winner decided by *k* items in a row. An interesting
    variant is Gomoku, played on a *15 x 15* board, where the winner has to get 5
    in a row.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*m x n*棋盘，赢家由一排中的*k*个项目决定。一个有趣的变体是五子棋，在*15 x 15*的棋盘上进行，赢家必须连成5个。'
- en: A 3D version.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个3D版本。
- en: Using numbers as tokens, and the sum of the numbers as the win condition.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用数字作为标记，并以数字的总和作为获胜条件。
- en: Using words as tokens, and the winner has to place 3 words in a row with 1 common
    letter.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用单词作为标记，获胜者必须在一行中放置3个带有1个共同字母的单词。
- en: Using 9 boards of *3 x 3* to play, where the winner must win 3 boards in a row.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用*3 x 3*的9个棋盘进行游戏，获胜者必须连续获胜3个棋盘。
- en: These are not even the most weird variants, and, if you're interested, you can
    check the Wikipedia article on the topic at [https://en.wikipedia.org/wiki/Tic-tac-toe_variants](https://en.wikipedia.org/wiki/Tic-tac-toe_variants).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这些甚至不是最奇怪的变体，如果你感兴趣，可以查看维基百科上关于这个主题的文章[https://en.wikipedia.org/wiki/Tic-tac-toe_variants](https://en.wikipedia.org/wiki/Tic-tac-toe_variants)。
- en: 'So, what could change in our implementation? Here are a few suggestions:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，在我们的实现中可能会发生什么变化呢？以下是一些建议：
- en: Board size
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 棋盘大小
- en: Number of players
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 玩家数量
- en: Tokens
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标记
- en: Winning rules (still in a row, but with different conditions)
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获胜规则（仍然是一行，但条件不同）
- en: Board topology—rectangular, hexagonal, triangular, or 3D instead of square
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 棋盘拓扑——矩形、六边形、三角形或3D而不是正方形
- en: Fortunately, if we just change the board size, nothing should really change
    in our code. In fact, we can pass in a larger board and everything will still
    work. Very small changes are required for changing the number of players; we will
    assume they have different tokens and we just need to bind the `tokenWins` function
    to different token values.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，如果我们只是改变了棋盘的大小，我们的代码实际上不会有太大变化。事实上，我们可以传入一个更大的棋盘，一切仍然可以正常工作。改变玩家数量只需要做很小的改动；我们假设他们有不同的标记，我们只需要将`tokenWins`函数绑定到不同的标记值上。
- en: How about the winning rules? We will assume that the rules still take into account
    the lines, columns, and diagonals, since this is a basic requirement for Tic-Tac-Toe
    and all the variants use them. However, we might not take into account a full
    line, column, or diagonal; in Gomoku, for example, we need to look for 5 tokens
    in a row on a line, column, or diagonal that has the size 15\. Looking at our
    code, this is merely a matter of selecting other groups of coordinates; instead
    of searching for a full line to be filled with token `X`, we need to select all
    possible sets of five-in-a-row coordinates. This means a change in our functions
    related to coordinates—`lineCoordinates`, `mainDiagonalCoordinates`, `columnCoordinates`,
    and `secondaryDiagonalCoordinates`. They will return a vector of five-in-a-row
    coordinates, which will result in changes in `allLines`, `allColumns`, and `allDiagonals`,
    and in the way we concatenate them.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 那么获胜规则呢？我们假设规则仍然考虑了行、列和对角线，因为这是井字游戏的基本要求，所有变体都使用它们。然而，我们可能不考虑完整的行、列或对角线；例如，在五子棋中，我们需要在大小为15的行、列或对角线上寻找5个标记。从我们的代码来看，这只是选择其他坐标组的问题；我们不再需要寻找被标记`X`填满的完整行，而是需要选择所有可能的五连坐标集。这意味着我们的与坐标相关的函数需要改变——`lineCoordinates`、`mainDiagonalCoordinates`、`columnCoordinates`和`secondaryDiagonalCoordinates`。它们将返回一个五连坐标的向量，这将导致`allLines`、`allColumns`和`allDiagonals`的变化，以及我们连接它们的方式。
- en: What if the token is a word and the winning condition is about finding a common
    letter between the words? Well, the coordinates are the same, and the way we get
    the lines, columns, and diagonals stays the same. The only change is in the `fill`
    condition, so this is relatively easy to change.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果标记是一个单词，获胜条件是找到单词之间的共同字母呢？好吧，坐标是一样的，我们获取行、列和对角线的方式也是一样的。唯一的变化在于`fill`条件，所以这相对容易改变。
- en: This leads us to the final possible change—the board topology. Changing the
    board topology will require changing the board data structure, and all the coordinates
    and the corresponding functions. But will it require changes in the lines, columns,
    and diagonals rules? If we switch to 3D, then we have more lines, more columns,
    and a different way of addressing diagonals—all changes in coordinates. A rectangular
    board doesn't have a diagonal *per se*; we'll need to use partial diagonals such
    as in the Gomoku case. As for hexagonal or triangular boards, there is no clear
    variant, so we can ignore them for now.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这引出了最后一个可能的变化——棋盘拓扑。改变棋盘拓扑将需要改变棋盘数据结构，以及所有的坐标和相应的函数。但是这是否需要改变行、列和对角线的规则呢？如果我们切换到3D，那么我们将有更多的行、更多的列，以及一个不同的对角线寻址方式——所有坐标的变化。矩形棋盘本身并没有对角线；我们需要使用部分对角线，比如在五子棋的情况下。至于六边形或三角形的棋盘，目前还没有明确的变体，所以我们可以暂时忽略它们。
- en: 'This shows us that if we want to prepare for change, our functions should be
    grouped around the following lines:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉我们，如果我们想要为变化做好准备，我们的函数应该围绕以下几个方面进行分组：
- en: Rules (also known as the **fill condition**)
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规则（也称为**填充条件**）
- en: Coordinates and projections—and prepare the code for multiple sets of lines,
    columns, and diagonals
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 坐标和投影——并为多组行、列和对角线准备代码
- en: A basic board structure allowing access based on coordinates
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本的棋盘结构允许基于坐标进行访问
- en: That settles it—we need to separate the coordinates from the board itself. While
    the coordinate data type will change at the same time as the board data type,
    the functions providing the line, column, and diagonal coordinates might change
    due to the game rules. Thus, we need to separate the board from its topology.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这就解决了问题——我们需要将坐标与棋盘本身分开。虽然坐标数据类型将与棋盘数据类型同时改变，但由于游戏规则的原因，提供行、列和对角线坐标的函数可能会发生变化。因此，我们需要将棋盘与其拓扑分开。
- en: In terms of **object-oriented design** (**OOD**), we need to separate the responsibilities
    of the program between at least three cohesive classes—`Rules`, `Topology`, and
    `Board`. The `Rules` class contains the rules of the game—basically, how we compute
    the winning conditions, when we know it's a draw, or that the game has ended.
    The `Topology` class is about coordinates and the structure of the board. The
    `Board` class should be the structure we pass in to the algorithm.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在**面向对象设计**（**OOD**）方面，我们需要在至少三个内聚的类之间分离程序的责任——`Rules`，`Topology`和`Board`。`Rules`类包含游戏规则——基本上是我们如何计算获胜条件，当我们知道是平局时，或者游戏何时结束。`Topology`类涉及坐标和棋盘的结构。`Board`类应该是我们传递给算法的结构。
- en: 'So, how should our functions be structured? Let''s make a list:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们应该如何组织我们的函数？让我们列个清单：
- en: '**Rules**: `xWins`, `oWins`, `tokenWins`, `draw`, and `inProgress`'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**规则**：`xWins`，`oWins`，`tokenWins`，`draw`和`inProgress`'
- en: '**Topology**: `lineCoordinates`, `columnCoordinates`, `mainDiagonalCoordinates`,
    and `secondaryDiagonalCoordinates`'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Topology**：`lineCoordinates`，`columnCoordinates`，`mainDiagonalCoordinates`和`secondaryDiagonalCoordinates`'
- en: '**Board**: `accessAtCoordinates` and `allLinesColumnsAndDiagonals`'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Board**：`accessAtCoordinates`和`allLinesColumnsAndDiagonals`'
- en: '**Undecided**: `allLines`, `allColumns`, `allDiagonals`, `mainDiagonal`, and `secondaryDiagonal`'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**未决**：`allLines`，`allColumns`，`allDiagonals`，`mainDiagonal`和`secondaryDiagonal`'
- en: There's always a list of functions that could be part of more structures. In
    our case, should `allLines` be part of the `Topology` class or the `Board` class?
    I can find equally good arguments for both. Therefore, the solution is left to
    the intuition of the programmer who writes the code.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 总是有一系列函数可以成为更多结构的一部分。在我们的情况下，`allLines`应该是`Topology`类还是`Board`类的一部分？我可以为两者找到同样好的论点。因此，解决方案留给编写代码的程序员的直觉。
- en: This shows, however, the method you can use to group these functions into classes—think
    about what might change, and group them based on which functions will change together.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这显示了你可以用来将这些函数分组到类中的方法——考虑可能发生的变化，并根据哪些函数将一起变化来分组它们。
- en: There is, however, a caveat for practicing this method—avoid the trap of over-analysis.
    Code is relatively easy to change; when you have little information about what
    might change, make it work and wait until a new requirement comes up in the same
    area of the code. Then, you'll have a better idea of the relationships between
    functions. This analysis shouldn't take you longer than 15 minutes; anything extra
    is most likely over-engineering.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对于练习这种方法有一个警告——避免陷入过度分析的陷阱。代码相对容易更改；当你对可能发生变化的事情知之甚少时，让它工作并等待直到同一代码区域出现新的需求。然后，你会对函数之间的关系有更好的理解。这种分析不应该花费你超过15分钟；任何额外的时间很可能是过度工程。
- en: Splitting a class into pure functions
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将一个类分割成纯函数
- en: We have learned how to group functions into a class. But how do we transform
    the code from a class to pure functions? It transpires that this is fairly straightforward—we
    just need to make the functions pure, move them out of the class, and then add
    an initializer that binds them to the data they need.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学会了如何将函数分组到一个类中。但是我们如何将代码从一个类转换为纯函数？事实证明，这是相当简单的——我们只需要使函数成为纯函数，将它们移出类，然后添加一个初始化器，将它们绑定到它们需要的数据上。
- en: 'Let''s take another example, a class that performs mathematical operations
    with two integer operands:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们举另一个例子，一个执行两个整数操作数的数学运算的类：
- en: '[PRE6]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To make it more interesting, let''s add another function that reverts the first
    parameter:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使它更有趣，让我们添加另一个函数，用于反转第一个参数：
- en: '[PRE7]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'How can we split this class into functions? Fortunately, the functions are
    already pure. It''s obvious that we can extract the functions as lambdas:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何将这个类分割成函数？幸运的是，这些函数已经是纯函数。很明显，我们可以将函数提取为lambda：
- en: '[PRE8]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If you really need to, let''s add the initializer:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你真的需要，让我们添加初始化器：
- en: '[PRE9]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then, a check can be carried out to determine that everything works:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，可以进行检查以确定一切是否正常工作：
- en: '[PRE10]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This leaves us with only one open question—how can we turn impure functions
    into pure functions? We will discuss this question at length in [Chapter 12](3b3ccc61-d5b6-4e3c-b142-cf32355f6229.xhtml),
    *Refactoring to and through Pure Functions*. For now, let's remember the important
    conclusion of this chapter—*a class is nothing more than a set of cohesive, partially
    applied functions.*
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这让我们只剩下一个未决问题——如何将不纯的函数转变为纯函数？我们将在[第12章](3b3ccc61-d5b6-4e3c-b142-cf32355f6229.xhtml)中详细讨论这个问题，*重构为纯函数*。现在，让我们记住本章的重要结论——*一个类只不过是一组内聚的、部分应用的函数*。
- en: Summary
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We had such an interesting journey in this chapter! We managed to link two styles
    of design that seem disjointed—OOP and functional programming, in a very elegant
    manner. Pure functions can be grouped into classes based on the principle of cohesion.
    We just need to exercise our imagination and think of scenarios in which functions
    might change, and decide which functions to group together. Reversely, we can
    always move functions from a class into multiple lambdas by making them pure and
    reversing the partial application.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们有一个非常有趣的旅程！我们成功地以一种非常优雅的方式将两种看似不相关的设计风格——面向对象编程和函数式编程联系起来。纯函数可以根据内聚性原则分组到类中。我们只需要发挥想象力，想象一下函数可能发生变化的情景，并决定哪些函数应该分组在一起。反过来，我们总是可以通过使它们成为纯函数并反转部分应用，将函数从一个类移动到多个lambda中。
- en: There is no friction between OOP and functional programming; they are just two
    different ways of structuring the code that implements features.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象设计和函数式编程之间没有摩擦；它们只是实现功能的代码的两种不同结构方式。
- en: Our journey into software design using functions has not finished yet. In the
    next chapter, we will discuss how to design functions using **test-driven development**
    (**TDD**).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用函数进行软件设计的旅程还没有结束。在下一章中，我们将讨论如何使用**测试驱动开发**（**TDD**）设计函数。
