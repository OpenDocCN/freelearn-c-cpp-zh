- en: Chapter 1. Getting Started with Qt Creator
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。使用Qt Creator入门
- en: 'Qt Creator is the integrated software development environment that supports
    both traditional C++ application development, as well as development using the
    Qt project''s libraries (collectively called "Qt", pronounced "cute"). In this
    chapter, we will see everything we need to get started with Qt Creator:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Creator是集成的软件开发环境，支持传统的C++应用程序开发，以及使用Qt项目的库进行开发（统称为“Qt”，发音为“cute”）。在本章中，我们将看到开始使用Qt
    Creator所需的一切：
- en: Where to download Qt Creator for Linux, Mac OS X, or Windows
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在哪里下载Linux、Mac OS X或Windows的Qt Creator
- en: How to ensure that your basic configuration is running
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何确保您的基本配置正在运行
- en: A quick look at a simple Qt GUI application, as well as a Qt Quick application
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速查看简单的Qt GUI应用程序，以及Qt Quick应用程序
- en: Downloading Qt Creator
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载Qt Creator
- en: Qt, the cross-platform toolkit behind Qt Creator, has had a long and illustrious
    history. Presently, a project of Digia, it has its own URL at [qt-project.org](http://qt-project.org)
    and has both commercial and noncommercial licenses available.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Creator背后的跨平台工具包Qt有着悠久而辉煌的历史。目前，作为Digia的一个项目，它在[qt-project.org](http://qt-project.org)上有自己的URL，并提供商业和非商业许可证。
- en: 'To get started with the noncommercial version for free, head over to [http://bit.ly/13G4Jfr](http://bit.ly/13G4Jfr)
    to see something similar to the following screenshot:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要免费开始使用非商业版本，请访问[http://bit.ly/13G4Jfr](http://bit.ly/13G4Jfr)查看类似以下截图的内容：
- en: '![Downloading Qt Creator](img/2319OS_01_01.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![下载Qt Creator](img/2319OS_01_01.jpg)'
- en: Downloading Qt Creator
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 下载Qt Creator
- en: Tip
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: One of the most popular platforms for application development with Qt is Linux.
    On many Linux variants—notably Ubuntu, my personal favorite—you can get Qt Creator
    using the package manager. On my Ubuntu box, Qt Creator is just a `sudo apt-get
    install qtcreator` command away. You'll get a version of Qt matched with your
    flavor of Linux, although it might not be the latest and greatest build from Digia.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 用Qt进行应用程序开发的最受欢迎的平台之一是Linux。在许多Linux变体中，特别是Ubuntu，您可以使用软件包管理器获取Qt Creator。在我的Ubuntu系统上，只需执行`sudo
    apt-get install qtcreator`命令即可获得Qt Creator。您将获得与您的Linux版本匹配的Qt版本，尽管它可能不是Digia发布的最新版本。
- en: We can also download bits and pieces of Qt, such as just the runtime libraries,
    or build Qt Creator from source. This typically requires that you already have
    a compiler and basic development tools installed, and a basic understanding of
    `qmake` and Qt's build configuration management system.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以下载Qt的一部分，比如只有运行时库，或者从源代码构建Qt Creator。这通常需要您已经安装了编译器和基本的开发工具，并且对`qmake`和Qt的构建配置管理系统有基本的了解。
- en: Some downloads include the C++ compiler and linker you need for your development;
    others don't. For example, on Windows there's a variant that includes the MinGW
    tool chain, so you have everything you need to build applications. However, you
    can also download Qt Creator for Windows that uses the Microsoft Visual Studio
    compilers, so, if you prefer using Visual Studio for your compilation and Qt Creator
    as your IDE, that's also an option. On Mac OS X, you'll need to have Xcode and
    the command-line development tools installed first; you can download Xcode from
    the Mac OS X App Store, and then use Xcode to download the command-line development
    tools.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 有些下载包括您开发所需的C++编译器和链接器；有些则不包括。例如，在Windows上有一个包括MinGW工具链的变体，因此您拥有构建应用程序所需的一切。但是，您也可以下载使用Microsoft
    Visual Studio编译器的Windows版Qt Creator，因此，如果您更喜欢使用Visual Studio进行编译并将Qt Creator作为您的IDE，这也是一个选择。在Mac
    OS X上，您需要先安装Xcode和命令行开发工具；您可以从Mac OS X应用商店下载Xcode，然后使用Xcode下载命令行开发工具。
- en: Once the installer is downloaded, run it in the usual way. It'll launch an installation
    wizard for your platform, and typically the installation takes about three or
    four minutes. You'll want to have plenty of disk space. Qt Creator doesn't consume
    that much disk space, but software development typically does; figure at least
    500 megabytes for the tools and libraries, and budget a few gigabytes free on
    your main drive for your source code, intermediate object files, debug symbols,
    and of course, your compiled application. (This is especially important to plan
    for if you're running Qt Creator on a virtual machine; make sure that the virtual
    hard drive for your virtual machine image has plenty of disk space.) You should
    also ensure that your development box has plenty of RAM; the more, the better.
    Qt Creator runs happily in 2 GB of RAM, but the compiler and linker used by Qt
    Creator can run a lot faster if it has more RAM available.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 下载安装程序后，以通常的方式运行它。它将为您的平台启动一个安装向导，通常安装大约需要三到四分钟。您需要有足够的磁盘空间。Qt Creator并不占用太多磁盘空间，但软件开发通常会占用很多空间；至少为工具和库预留500兆字节，为源代码、中间目标文件、调试符号以及编译的应用程序在主驱动器上预留几个千兆字节的空间。
    （如果您在虚拟机上运行Qt Creator，特别需要计划这一点；确保虚拟机镜像的虚拟硬盘有足够的磁盘空间。）您还应确保您的开发机有足够的RAM；越多越好。Qt
    Creator在2GB的RAM中运行得很好，但Qt Creator使用的编译器和链接器如果有更多的可用RAM，将运行得更快。
- en: Finding your way around Qt Creator
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 熟悉Qt Creator
- en: 'The following screenshot shows what you see the first time you launch Qt Creator.
    Let''s take a closer look at each portion of the screen:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了您第一次启动Qt Creator时看到的内容。让我们仔细看看屏幕的每个部分：
- en: '![Finding your way around Qt Creator](img/2319OS_01_02.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![熟悉Qt Creator](img/2319OS_01_02.jpg)'
- en: The landing page of Qt Creator
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Creator的首页
- en: 'The main window, which currently shows the icons for **IDE Overview**, **User
    Interface**, **Building and Running an Example Application**, and **Start Developing**,
    is your workspace. Under normal conditions, this will be where you''ll see the
    source code for your application. Along the left-hand side are a series of icons
    that let you select various views into your application. They are:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 主窗口当前显示了**IDE概述**、**用户界面**、**构建和运行示例应用程序**和**开始开发**的图标，这是您的工作区。在正常情况下，这将是您看到应用程序源代码的地方。左侧是一系列图标，让您选择进入应用程序的各种视图。它们是：
- en: The **Welcome** view shows basic information about Qt Creator
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**欢迎**视图显示了关于Qt Creator的基本信息'
- en: The **Edit** view lets you edit the files that make up your application
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编辑**视图允许您编辑构成应用程序的文件'
- en: The **Design** view lets you use the Qt Designer to design the user interface
    for your application
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设计**视图允许您使用Qt Designer为应用程序设计用户界面'
- en: The **Debug** view lets you debug your application while it's running, including
    doing things like viewing memory and variables, setting breakpoints, and stepping
    through your application
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调试**视图允许您在应用程序运行时调试，包括查看内存和变量、设置断点和逐步执行应用程序等操作'
- en: The **Projects** view lets you adjust the build and link settings for your project
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目**视图允许您调整项目的构建和链接设置'
- en: The **Analyze** view lets you profile your application's runtime performance
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分析**视图允许您分析应用程序的运行时性能'
- en: The **Help** view provides documentation about Qt Creator and the Qt Framework
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**帮助**视图提供了关于Qt Creator和Qt Framework的文档'
- en: Below the **Help** view button in the previous screenshot you can see the active
    project; when I took this screenshot, I had already created our first application.
    Let's do that now.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一张截图中**帮助**视图按钮下方，您可以看到活动项目；当我拍摄这张截图时，我已经创建了我们的第一个应用程序。现在让我们来做吧。
- en: Your first application – Hello World
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你的第一个应用程序-你好世界
- en: 'In Qt Creator, choose **New File or Project…** from the **File** menu. Qt Creator
    will present you with the **New** project wizard, which lets you choose the kind
    of project you want to create, give it a name and so forth. To create our first
    application:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在Qt Creator中，从**文件**菜单中选择**新建文件或项目...**。Qt Creator将呈现给您**新建**项目向导，让您选择要创建的项目类型，给它命名等等。要创建我们的第一个应用程序：
- en: Choose **New File or Project…** if you haven't already.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您还没有选择，选择**新建文件或项目...**
- en: Qt Creator presents you with a dialog that has a dizzying array of project choices.
    Choose **Application**, then **Qt Console Application**, and click on **Choose…**.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Qt Creator会向您呈现一个对话框，其中有许多项目选择。选择**应用程序**，然后选择**Qt控制台应用程序**，然后点击**选择...**
- en: Qt Creator asks you for a name and a path to the directory where you want to
    store the files for the project. For the name, enter `HelloWorldConsole`, and
    choose a path that makes sense for you (or accept the default). Then, click on
    **Next**.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Qt Creator会要求您为项目文件存储的目录输入名称和路径。对于名称，输入`HelloWorldConsole`，选择一个对您来说有意义的路径（或接受默认值）。然后，点击**下一步**。
- en: Qt Creator can support various kits and libraries against which to build an
    application. Select the desktop Qt kit that should have been installed by default,
    leaving both the **Release** and **Debug** choices checked. Then, click on **Next**.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Qt Creator可以支持针对构建应用程序的各种工具包和库。选择默认安装的桌面Qt工具包，保持**发布**和**调试**选项都被选中。然后，点击**下一步**。
- en: In the next step, Qt Creator prompts you about version control for your project.
    Qt Creator can use your installed version control clients to perform change tracking
    for your project. For now, skip this and leave **Add to version control** set
    to **None** and click on **Finish**.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一步中，Qt Creator会提示您关于项目的版本控制。Qt Creator可以使用您安装的版本控制客户端来执行项目的更改跟踪。现在，跳过这一步，将**添加到版本控制**设置为**无**，然后点击**完成**。
- en: 'Qt Creator creates your project and switches to the **Edit** view. In the source
    code editor for the file `main.cpp`, enter the following code:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Creator创建您的项目并切换到**编辑**视图。在文件`main.cpp`的源代码编辑器中，输入以下代码：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `QCoreApplication` task handles the system startup for an application, and
    every Qt Console app needs to create one and call its `exec` method, as part of
    the `main` method. It sets up Qt's event handler and provides a bunch of porting
    helpers to determine things such as your application directory, library paths,
    and other details.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`QCoreApplication`任务处理应用程序的系统启动，并且每个Qt控制台应用程序都需要创建一个并调用其`exec`方法，作为`main`方法的一部分。它设置了Qt的事件处理程序，并提供了一堆移植助手，用于确定诸如应用程序目录、库路径和其他细节的事情。'
- en: 'For a console application, that''s all you need: you can freely mix and match
    Qt classes with the C++ standard library and **Standard Template Library** (although
    once you master Qt''s foundation classes, many STL constructs feel somewhat limiting).'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 对于控制台应用程序，这就是您所需要的：您可以自由地混合和匹配Qt类与C++标准库和**标准模板库**（尽管一旦掌握了Qt的基础类，许多STL构造会感觉有些限制）。
- en: 'Next, let''s compile and run the application. There are several ways you can
    do this. You can use any one of the following options:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们编译和运行应用程序。您可以使用以下任一选项：
- en: Hit *F5* to build and run your application in the debugger
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按下*F5*在调试器中构建和运行您的应用程序
- en: Choose **Start Debugging…** from the **Debug** menu
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从**调试**菜单中选择**开始调试...**
- en: Click on the green **Run** arrow below the **Help** view button on the left
    to run the application
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单击左侧**帮助**视图按钮下方的绿色**运行**箭头以运行应用程序
- en: Click on the green **Run** arrow with the bug over the arrow to debug the application
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单击带有错误标志的绿色**运行**箭头以调试应用程序
- en: Tip
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If all you want to do is build the application, you can click on the hammer
    icon below the **Run** and **Debug** icons.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您只想构建应用程序，可以单击**运行**和**调试**图标下方的锤子图标。
- en: When you choose one of these options, Qt Creator invokes the compiler and linker
    to build your application. If you chose a debug option, Qt Creator switches to
    the **Debug** view (which I will discuss in detail in the next chapter) as it
    starts your application.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当您选择这些选项之一时，Qt Creator会调用编译器和链接器来构建您的应用程序。如果您选择了调试选项，Qt Creator会切换到**调试**视图（我将在下一章中详细讨论），因为它启动您的应用程序。
- en: Once the application starts, you'll see the `Hello world!` message in the console
    view.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序启动后，您将在控制台视图中看到`Hello world!`消息。
- en: Tip
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[http://www.packtpub.com](http://www.packtpub.com)的帐户中下载您购买的所有Packt图书的示例代码文件。如果您在其他地方购买了本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便直接通过电子邮件接收文件。
- en: Hello World using the Qt GUI library
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Qt GUI库的Hello World
- en: 'One of Qt''s strengths is its rich collection of GUI elements you can use to
    create windowed applications. Making a GUI application is similar, in principle,
    to making a console application; instead of choosing **Qt Console Application**,
    choose **Qt Gui Application** from the **New** dialog presented when you choose
    **New File or Project…**. Try that now:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Qt的一个优势是其丰富的GUI元素集合，您可以使用它们来创建窗口应用程序。制作GUI应用程序在原则上与制作控制台应用程序类似；只需选择**Qt Gui应用程序**而不是**Qt控制台应用程序**，当您选择**新文件或项目…**时，从向导的**新**对话框中选择**Qt
    Gui应用程序**。现在试试看：
- en: First, close the current file and project by choosing **Close All Projects and
    Editors** from the **File** menu.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，通过选择**文件**菜单中的**关闭所有项目和编辑器**关闭当前文件和项目。
- en: Next, choose **New File or Project…** again, and choose **Qt Gui Application**
    from the first step of the wizard.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，再次选择**新文件或项目…**，并从向导的第一步中选择**Qt Gui应用程序**。
- en: Walk through the wizard again, naming your project `HelloWorldGui`.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次通过向导，命名您的项目为`HelloWorldGui`。
- en: 'The **New** project wizard will prompt you for the name of the class implementing
    your main window. Stick with the defaults given to you: leave the subclass as
    `QMainWindow`, and the name as `MainWindow`.'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**新**项目向导将提示您输入实现主窗口的类的名称。保持给定的默认值：将子类保留为`QMainWindow`，名称保留为`MainWindow`。'
- en: 'Qt Creator creates a default subclass of the class providing the platform''s
    basic window handling in the `mainform.h` and `mainform.cpp` files, and creates
    a form that will contain the widgets for your application''s window. If you run
    the application at this point, you''ll see an empty window. Instead, double-click
    on the **Forms** folder in the second pane of Qt Creator, and then double-click
    on the file `mainwindow.ui`. Qt Creator switches to the **Design** view, and you''ll
    see something similar to the following screenshot:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Creator在`mainform.h`和`mainform.cpp`文件中创建类的默认子类，提供平台的基本窗口处理，并创建一个将包含应用程序窗口小部件的表单。如果此时运行应用程序，您将看到一个空窗口。而是双击Qt
    Creator第二窗格中的**Forms**文件夹，然后双击文件`mainwindow.ui`。Qt Creator切换到**设计**视图，您将看到类似于以下屏幕截图的内容：
- en: '![Hello World using the Qt GUI library](img/2319OS_01_03.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![使用Qt GUI库的Hello World](img/2319OS_01_03.jpg)'
- en: Qt Creator's Design view
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Creator的设计视图
- en: To the left, is a list of layouts you can choose to organize widgets such as
    spacers, views, containers, buttons, and other widgets. In the middle, is a view
    of the layout of your application's main window, and to the right are panes with
    a hierarchy of the objects in your main window and the properties of any item
    you click in the main window.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧是您可以选择以组织小部件的布局列表，例如间隔器、视图、容器、按钮和其他小部件。中间是您的应用程序主窗口布局的视图，右侧是包含主窗口中对象层次结构和单击主窗口中任何项目的属性的窗格。
- en: 'While I explore Qt Designer more in [Chapter 3](ch03.html "Chapter 3. Designing
    Your Application with Qt Designer"), *Designing Your Application with Qt Designer*,
    you can get a feel for using it to build a simple UI:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我在[第3章](ch03.html "第3章。使用Qt Designer设计您的应用程序")中更多地探索Qt Designer，*使用Qt Designer设计您的应用程序*，您可以尝试使用它来构建一个简单的UI：
- en: Where it says **Type Here**, right-click and choose **Remove menu bar**.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Type Here**处右键单击并选择**删除菜单栏**。
- en: Drag a label (under **Display Widgets** in the left-hand pane) and drop it on
    the window preview in the center pane.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拖动标签（在左侧窗格中的**显示小部件**下）并将其放在中央窗格中的窗口预览上。
- en: Double-click on the label that appears and type, `Hello world!`.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击出现的标签，然后键入`Hello world!`。
- en: Grab a corner of the label and resize it, so the entire text is shown. You can
    also move it around in the window.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 抓住标签的一个角落并调整大小，以便显示整个文本。您也可以在窗口中移动它。
- en: Note that when you click on the label, the properties field in the lower right
    corner updates to show the properties of your new label.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，当您单击标签时，右下角的属性字段会更新，显示新标签的属性。
- en: Drag a button (under **Buttons** in the left-hand pane) and drop it on the window
    preview in the center pane.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧窗格中的**按钮**下拖动按钮，并将其放在中央窗格中的窗口预览上。
- en: Double-click on the button and change its text to `Exit`.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击按钮并将其文本更改为`Exit`。
- en: With the new button selected, change the **objectName** field in the property
    browser to `exitButton`.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择新按钮后，在属性浏览器中将**objectName**字段更改为`exitButton`。
- en: Right-click on the button and choose **Go to slot…**. A window appears with
    a list of slots (for now, you can think of a slot as something that is triggered
    on an action).
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击按钮并选择**转到槽…**。一个窗口将显示一个槽的列表（目前，您可以将槽视为在动作上触发的内容）。
- en: Choose **clicked()** from the list that appears.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从出现的列表中选择**clicked()**。
- en: 'Qt Creator returns to the **Edit** view for your `mainindow.cpp` file. Change
    it to read:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Qt Creator返回到`mainindow.cpp`文件的**编辑**视图。将其更改为：
- en: '[PRE1]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Before running your application, let's be sure we understand the implementation
    of the `MainWindow` class. The `MainWindow` class's constructor loads the description
    of the user interface for the main window and sets it up using the Qt Creator-generated
    class `Ui::MainWindow`. The destructor deletes the implementation of the code
    layout, and the `on_pushButton_clicked` method simply terminates the application
    by calling the static method `exit` implemented by the `QApplication` class.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行应用程序之前，让我们确保我们了解`MainWindow`类的实现。`MainWindow`类的构造函数加载了主窗口用户界面的描述，并使用Qt Creator生成的`Ui::MainWindow`类进行设置。析构函数删除了代码布局的实现，`on_pushButton_clicked`方法通过调用`QApplication`类实现的静态方法`exit`简单地终止了应用程序。
- en: 'Finally, we have to add the `on_pushButton_clicked` method declaration to `MainWindow.h`.
    Double-click on that file in the browser on the left and make sure it reads:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们必须将`on_pushButton_clicked`方法的声明添加到`MainWindow.h`中。在左侧的浏览器中双击该文件，并确保它读取为：
- en: '[PRE2]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The key lines you need to add are:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要添加的关键行是：
- en: '[PRE3]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We'll learn more about signals and slots in the next chapter; for now, it's
    enough to know that you're declaring a private function to be triggered when you
    click on the button.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一章更多地了解信号和槽；现在，知道当你点击按钮时，你正在声明一个私有函数来触发。
- en: Run the application. It should open a single window with the text **Hello World**;
    clicking on the **Exit** button in the window (or the close box on the upper-right
    corner) should close the application. At this point, if you think you want to
    learn more about Qt GUI widget applications, go ahead and try dragging other GUI
    items to the window, or explore the help for Qt GUI applications by switching
    to the **Help** view and choosing **Qt Gui** from the list of help items.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序。它应该打开一个带有文本**Hello World**的单个窗口；点击窗口中的**退出**按钮（或右上角的关闭框）应该关闭应用程序。此时，如果你想了解更多关于Qt
    GUI小部件应用程序的知识，可以尝试将其他GUI项目拖到窗口中，或者切换到**帮助**视图并从帮助项目列表中选择**Qt Gui**来探索Qt GUI应用程序的帮助。
- en: Hello World using Qt Quick
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Qt Quick的Hello World
- en: Qt Quick is Qt's newer declarative framework for the user interface, and with
    it it's incredibly easy to create fluid applications with animated transitions
    and flowing user interfaces. Using Qt Quick, you describe your user interface
    using QML, a JavaScript-like language that lets you declare the user interface
    elements and how they relate; the Qt Quick runtime does most of the heavy lifting
    in the implementation of your application.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Quick是Qt的较新的声明性用户界面框架，使用它可以非常容易地创建具有动画过渡和流畅用户界面的流畅应用程序。使用Qt Quick，你可以使用QML来描述用户界面，这是一种类似于JavaScript的语言，让你声明用户界面元素及其关系；Qt
    Quick运行时会在应用程序的实现中大部分繁重的工作。
- en: 'By now, you can guess how to create a Qt Quick project: choose **New File or
    Project…** from the **File** menu, and then click on **Qt Quick 2 Application
    (Built-in Types)** and follow the wizard.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你可以猜到如何创建一个Qt Quick项目：从**文件**菜单中选择**新建文件或项目...**，然后点击**Qt Quick 2应用程序（内置类型）**，并按照向导进行操作。
- en: 'The wizard will ask no additional questions, and if you just walk through the
    wizard, you end up with a simple application that actually displays `Hello World`
    in its own window. Here''s the code it supplies:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 向导不会询问任何额外的问题，如果你只是按照向导进行操作，最终会得到一个简单的应用程序，实际上在自己的窗口中显示了`Hello World`。以下是它提供的代码：
- en: '[PRE4]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If you know JavaScript, the syntax of this may look a little familiar, but it's
    still different. The first line is an import statement; it indicates to the QML
    runtime what classes should be available. At a minimum, all of your Qt Quick applications
    must import QtQuick Version 2.0, as this one does.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你了解JavaScript，这个语法可能看起来有点熟悉，但仍然有所不同。第一行是一个导入语句；它告诉QML运行时应该有哪些类可用。至少，你所有的Qt
    Quick应用程序都必须导入QtQuick版本2.0，就像这个例子一样。
- en: 'The QML itself follows. It declares a parent rectangle of 360 × 360 pixels—that
    determines the size of the application window. Inside the rectangle are two objects:
    **Text** and **MouseArea**. The **Text** object is just a label with the text
    `Hello World`, placed in the center of the rectangle. Note that the value of the
    text property is actually the result of a function call, a call to the function
    `qsTr`, Qt''s built-in localization function, which looks at application resources
    to return the localized version of `Hello World` if it''s been provided.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是QML本身。它声明了一个360×360像素的父矩形，确定了应用程序窗口的大小。矩形内有两个对象：**Text**和**MouseArea**。**Text**对象只是一个带有文本`Hello
    World`的标签，放置在矩形的中心。请注意，文本属性的值实际上是一个函数调用的结果，调用了函数`qsTr`，这是Qt内置的本地化函数，它查看应用程序资源以返回`Hello
    World`的本地化版本（如果已提供）。
- en: The **MouseArea** object takes user input and can execute functions based on
    that input; it's sized to fit the parent (`anchors.fill` is set to `parent`) and
    responds when clicked by executing the function assigned to the `onClicked` property.
    This `onClicked` function just exits the application by calling the Qt class's
    `quit` function.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**MouseArea**对象接受用户输入，并根据输入执行函数；它的大小适应父对象（`anchors.fill`设置为`parent`），并在点击时响应执行分配给`onClicked`属性的函数。这个`onClicked`函数只是通过调用Qt类的`quit`函数来退出应用程序。'
- en: At this point, you can run the application in the usual way, and you'll see
    a window with the text **Hello World** centered in it.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你可以以通常的方式运行应用程序，你会看到一个窗口，其中心是文本**Hello World**。
- en: 'While the principles are similar, the Qt Quick Designer is very different from
    the Qt GUI Designer; have a look at the following screenshot:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然原理类似，但Qt Quick设计师与Qt GUI设计师非常不同；看一下下面的截图：
- en: '![Hello World using Qt Quick](img/2319OS_01_04.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![使用Qt Quick的Hello World](img/2319OS_01_04.jpg)'
- en: The Qt Quick Designer
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Quick设计师
- en: There are some obvious similarities. Both designers show a list of things you
    can add to a view, along with a hierarchy of objects in the view and the properties
    of individual objects. However, there are far fewer Qt Quick widgets than Qt GUI
    widgets, and the widgets in Qt Quick don't match the look and feel of the native
    platform to nearly the same extent. By design, Qt GUI is meant for building conventional
    applications that match the native platform, while Qt Quick is used for creating
    device-independent applications with their own look and feel. For example, you'd
    probably write an enterprise data collection application using Qt GUI, while you'd
    create a media center application using Qt Quick.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些明显的相似之处。两个设计师都显示了可以添加到视图中的事物列表，以及视图中对象的层次结构和单个对象的属性。然而，Qt Quick小部件比Qt GUI小部件要少得多，而且Qt
    Quick中的小部件与本地平台的外观和感觉几乎没有匹配。按设计，Qt GUI用于构建与本地平台匹配的传统应用程序，而Qt Quick用于创建具有自己外观和感觉的与设备无关的应用程序。例如，您可能会使用Qt
    GUI编写企业数据收集应用程序，而使用Qt Quick创建媒体中心应用程序。
- en: 'Using the designer is the same in both cases, however. Let''s add another **MouseArea**
    to the main view, and give it something to do:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在这两种情况下，使用设计师是相同的。让我们在主视图中添加另一个**MouseArea**，并让它做一些事情：
- en: Select `main.qml` in the list of files in Qt Creator and click on **Design**
    to see the **Design** view.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Qt Creator的文件列表中选择`main.qml`，然后单击**设计**以查看**设计**视图。
- en: On the **Library** pane, select items and scroll down until you see **Rectangle**.
    Drag the rectangle to the center pane and drop it somewhere above the `Hello World`
    label. You may need to resize the rectangle so that the label is still visible.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**库**窗格上，选择项目并向下滚动，直到看到**矩形**。将矩形拖到中心窗格并将其放置在`Hello World`标签的上方某处。您可能需要调整矩形的大小，以便标签仍然可见。
- en: With the rectangle selected in the window pane, under **Colors**, enter a color
    for your rectangle.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在窗格中选择矩形，在**颜色**下，输入矩形的颜色。
- en: Now drag a **MouseArea** object out of the **Library** pane, and drop it on
    your new rectangle.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在从**库**窗格中拖出一个**MouseArea**对象，并将其放在新的矩形上。
- en: With the **MouseArea** selected, choose **Layout** and mouse over the layouts
    until you see **Fill to Parent**. Click on it.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**MouseArea**后，选择**布局**，并将鼠标悬停在布局上，直到看到**填充到父级**。然后单击它。
- en: 'Go back to the **Edit** view and modify `main.qml` to look like the following:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回**编辑**视图并修改`main.qml`，使其看起来像下面这样：
- en: '[PRE5]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You should see that most of the changes were made by the **Design** view; it
    added a rectangle inside the original **MouseArea** object, and another **MouseArea**
    inside that. You should need to add the line giving the `text` element an ID of
    text, and the `onClicked` handler to the new **MouseArea** object that you dragged
    out in the **Design** view. The `id` property lets other QML access the text field
    by name (in this case, its name is simply text), and the `onClicked` handler changes
    the contents of the text item's `text` property to the text `Hi there!`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到大部分更改是由**设计**视图进行的；它在原始**MouseArea**对象内添加了一个矩形，以及另一个**MouseArea**。您应该需要添加一行，将`text`元素的ID设置为text，并将`onClicked`处理程序添加到您在**设计**视图中拖出的新**MouseArea**对象。`id`属性允许其他QML通过名称访问文本字段（在本例中，它的名称只是text），而`onClicked`处理程序将文本项的`text`属性的内容更改为文本`Hi
    there!`。
- en: 'It''s worth making an observation about `qsTr` here: you don''t have to add
    any text to the application resources to get basic localization working. This
    is unlike most other platforms, where localization occurs by providing keys to
    values in local files for strings with a default value for the unlocalized strings.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这里值得观察一下`qsTr`：您不必向应用程序资源添加任何文本即可使基本本地化工作。这与大多数其他平台不同，其他平台的本地化是通过为具有未本地化字符串的默认值提供本地文件中的键值来实现的。
- en: Run the application. You'll see your rectangle above the text **Hello World**,
    and clicking on the rectangle changes the text to read **Hi there!**.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序。您将看到矩形在文本**Hello World**上方，单击矩形会将文本更改为**Hi there!**。
- en: Summary
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概要
- en: Getting Qt Creator is easy; it's just a web download away, or on most Linux
    platforms, it's an optional installation through the native package manager (although
    the versions delivered by a package manager may be slightly older than what you
    get from the Qt Project's website).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 获取Qt Creator很容易；它只是一个网页下载，或者在大多数Linux平台上，它是通过本机软件包管理器的可选安装（尽管软件包管理器提供的版本可能比您从Qt项目网站获得的版本稍微旧一些）。
- en: Qt Creator organizes its source code for you in projects; when you first launch
    it you can either create a default project, or create a new project to contain
    the source code and resources for your application. Inside Qt Creator are all
    the options you need to compile and debug your application. In addition, it supports
    designer tools for developing both Qt GUI and Qt Quick applications.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Creator为您在项目中组织源代码；当您首次启动它时，您可以创建一个默认项目，或者创建一个新项目来包含应用程序的源代码和资源。Qt Creator中包含了编译和调试应用程序所需的所有选项。此外，它支持用于开发Qt
    GUI和Qt Quick应用程序的设计工具。
- en: In the next, chapter we'll dig into the details of how to configure Qt Creator
    for compiling and editing your code, including how to add source files to your
    project, configure compiler and linker options, add dependencies to third-party
    libraries, and so on.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入了解如何配置Qt Creator以编译和编辑您的代码，包括如何向项目添加源文件，配置编译器和链接器选项，添加第三方库的依赖项等。
