- en: Chapter 10. Layering Views and Implementing the HUD
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。分层视图和实现HUD
- en: In this chapter, we will get to see the real value of SFML **Views**. We will
    add a large array of SFML `Text` objects and manipulate them as we did before
    in the **Timber!!!** project. What is new is that we will draw the HUD using a
    second view instance. This way, the HUD will stay neatly positioned over the top
    of the main game action, regardless of what the background, player, zombies, and
    other game objects are doing.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到SFML **Views**的真正价值。我们将添加大量的SFML `Text`对象，并像在**Timber!!!**项目中一样操纵它们。新的是，我们将使用第二个视图实例来绘制HUD。这样，HUD将始终整齐地定位在主游戏动作的顶部，而不管背景、玩家、僵尸和其他游戏对象在做什么。
- en: 'Here is what we will do:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们将要做的事情：
- en: Add text and a background to the home/game over screen
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在主页/游戏结束屏幕上添加文本和背景
- en: Add text to the level up screen
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在升级屏幕上添加文本
- en: Create the second view
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建第二个视图
- en: Add a HUD
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加HUD
- en: Adding all the Text and HUD objects
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加所有文本和HUD对象
- en: We will be manipulating a few Strings in this chapter. This is so we can format
    the HUD and the level up screen.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将操纵一些字符串。这样我们就可以格式化HUD和升级屏幕。
- en: 'Add the extra `include` directive highlighted next so we can make some `sstream`
    objects to achieve this:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 添加下一个高亮显示的`include`指令，以便我们可以创建一些`sstream`对象来实现这一点：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next add this rather lengthy but easily explained code. To help identify where
    you should add the code, the new code is highlighted and the existing code is
    not. You may need to vary the position/size of some text/elements to suit your
    screen:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来添加这段相当冗长但易于解释的代码。为了帮助确定应该添加代码的位置，新代码已经高亮显示，而现有代码没有。您可能需要调整一些文本/元素的位置/大小以适应您的屏幕：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The previous code is very simple and nothing new. It basically creates a whole
    bunch of SFML `Text` objects. It assigns their colors and sizes, then formats
    their positions, using functions we have seen before.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 先前的代码非常简单，没有什么新东西。它基本上创建了一堆SFML `Text`对象。它分配它们的颜色和大小，然后格式化它们的位置，使用我们之前见过的函数。
- en: The most important thing to note is that we create another `View` object called
    `hudView` and initialize it to fit the resolution of the screen.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是，我们创建了另一个名为`hudView`的`View`对象，并将其初始化为适应屏幕的分辨率。
- en: As we have seen, the main view object scrolls around as it follows the player.
    In contrast, we will never move `hudView`. The result of this is that as long
    as we switch to this view before we draw the elements of the HUD, we will create
    the effect of allowing the game world to scroll by underneath while the player's
    HUD remains stationary.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，主视图对象随着玩家的移动而滚动。相比之下，我们永远不会移动`hudView`。这样做的结果是，只要在绘制HUD元素之前切换到这个视图，我们就会产生这样的效果：游戏世界在下方滚动，而玩家的HUD保持静止。
- en: Tip
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: As an analogy, you can think of laying a transparent sheet of plastic, with
    some writing on it, over a TV screen. The TV will carry on as normal with moving
    pictures, the text on the plastic sheet will stay in the same place regardless
    of what goes on underneath it.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 类比一下，您可以想象在电视屏幕上放置一张带有一些文字的透明塑料片。电视将继续正常播放移动图片，而塑料片上的文字将保持在同一位置，不管下面发生了什么。
- en: The next thing to notice, however, is that the high score is not set in any
    meaningful way. We will need to wait until the next chapter, when we investigate
    file I/O to save and retrieve the high score.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，下一件要注意的事情是，高分并没有以任何有意义的方式设置。我们需要等到下一章，当我们调查文件I/O以保存和检索高分时。
- en: Another point worth noting is that we declare and initialize a `RectangleShape`
    called `healthBar` that will be a visual representation of the player's remaining
    health. This will work in almost exactly the same way that the time-bar worked
    in the last project, except of course, it will represent health instead of time.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的另一点是，我们声明并初始化了一个名为`healthBar`的`RectangleShape`，它将是玩家剩余生命的视觉表示。这将几乎与上一个项目中的时间条工作方式完全相同，当然，它代表的是生命而不是时间。
- en: In the previous code, there is a new sprite called `ammoIcon` that gives context
    to the bullet and clip statistics that we will draw next to it, in the bottom
    left of the screen.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在先前的代码中，有一个名为`ammoIcon`的新精灵，它为我们将在屏幕左下角旁边绘制的子弹和弹夹统计数据提供了上下文。
- en: Although there is nothing new or technical about the large amount of code that
    we just added, be sure to familiarize yourself with the details, especially the
    variable names, to make the rest of the chapter easier to follow.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们刚刚添加的大量代码没有什么新的或技术性的，但一定要熟悉细节，特别是变量名，以便更容易跟随本章的其余部分。
- en: Updating the HUD each frame
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 每帧更新HUD
- en: As you might expect, we will update the HUD variables in the update section
    of our code. We will not, however, do so every frame. The reason for this is that
    it is unnecessary and it also slows our game loop down.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所期望的，我们将在代码的更新部分更新HUD变量。然而，我们不会在每一帧都这样做。原因是这是不必要的，而且还会减慢我们的游戏循环速度。
- en: As an example, consider the scenario where the player kills a zombie and gets
    some more points. It doesn't matter whether the `Text` object that holds the score
    is updated in a thousandth, hundredth, or even tenth of a second. The player will
    discern no difference. This means there is no point rebuilding strings that we
    set to the `Text` objects every frame.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，考虑这样一种情况：玩家杀死了一个僵尸并获得了一些额外的分数。无论`Text`对象中的分数是在千分之一秒、百分之一秒，甚至十分之一秒内更新，玩家都不会察觉到任何区别。这意味着没有必要在每一帧重新构建我们设置给`Text`对象的字符串。
- en: 'So we can time when and how often we update the HUD, add the following variables:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以确定何时以及多久更新HUD，添加以下变量：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the previous code, we have variables to track how many frames it has been
    since the last time the HUD was updated and the interval, measured in frames,
    we would like to wait between HUD updates.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在先前的代码中，我们有变量来跟踪自上次更新HUD以来经过了多少帧，以及我们希望在HUD更新之间等待的帧数间隔。
- en: Now we can use these new variables and actually update the HUD each frame. We
    won't actually see all the HUD elements change, however, until we begin to manipulate
    the final variables, such as `wave`, in the next chapter.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用这些新变量并实际上每帧更新HUD。然而，直到我们开始操纵最终变量（例如`wave`）在下一章中，我们才会真正看到所有HUD元素的变化。
- en: 'Add the highlighted code in the update section of the game loop as shown:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下所示，在游戏循环的更新部分中添加突出显示的代码：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the new code, we update the size of the `healthBar` sprite, increment the
    `timeSinceLastUpdate` object, then increment the `framesSinceLastUpdate` variable.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在新代码中，我们更新了`healthBar`精灵的大小，增加了`timeSinceLastUpdate`对象，然后增加了`framesSinceLastUpdate`变量。
- en: Next, we start an `if` block that tests whether `framesSinceLastHUDUpdate` is
    greater than our preferred interval, which is stored in `fpsMeasurementFrameInterval`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们开始一个`if`块，测试`framesSinceLastHUDUpdate`是否大于我们存储在`fpsMeasurementFrameInterval`中的首选间隔。
- en: Inside this `if` block is where all the action takes place. First, we declare
    a string stream object for each string that we need to set to a `Text` object.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个`if`块中是所有操作发生的地方。首先，我们为需要设置为`Text`对象的每个字符串声明一个字符串流对象。
- en: Then we use each of those string stream objects in turn, and use the `setString`
    function to set the result to the appropriate `Text` object.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们依次使用这些字符串流对象，并使用`setString`函数将结果设置为适当的`Text`对象。
- en: Finally, before the `if` block is exited, the `framesSinceLastHUDUpdate` is
    set back to zero so that the count can begin again.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在退出`if`块之前，将`framesSinceLastHUDUpdate`设置回零，以便计数可以重新开始。
- en: Now, when we redraw the scene, the new values will appear in the player's HUD.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们重新绘制场景时，新值将出现在玩家的HUD中。
- en: Drawing the HUD, and the home and level up screens
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制HUD，主页和升级屏幕
- en: All the code from the next three code blocks goes in the drawing phase of our
    game loop. All we need to do is to draw the appropriate `Text` objects during
    the appropriate states in the draw section of the main game loop.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来三个代码块中的所有代码都在游戏循环的绘制阶段中。我们只需要在主游戏循环的绘制部分的适当状态下绘制适当的`Text`对象。
- en: 'In the `PLAYING` state, add the following highlighted code:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在`PLAYING`状态下，添加以下突出显示的代码：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The vital thing to notice in the previous block of code is that we switch views
    to the HUD view. This causes everything to be drawn at the precise screen positions
    we gave to each of the elements of the HUD. They will never move.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个代码块中需要注意的重要事情是，我们切换到了HUD视图。这会导致所有东西都以我们给HUD的每个元素的精确屏幕位置绘制。它们永远不会移动。
- en: 'In the `LEVELING_UP` state, add the following highlighted code:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在`LEVELING_UP`状态下，添加以下突出显示的代码：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the `PAUSED` state, add the following highlighted code:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在`PAUSED`状态下，添加以下突出显示的代码：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the `GAME_OVER` state, add the following highlighted code:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在`GAME_OVER`状态下，添加以下突出显示的代码：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now we can run the game and see our HUD update during gameplay.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以运行游戏，并在游戏过程中看到我们的HUD更新。
- en: '![Drawing the HUD, and the home and level up screens](img/image_10_001.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![绘制HUD，主页和升级屏幕](img/image_10_001.jpg)'
- en: 'This shows the **HI SCORE** and score on the home/game over screen:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了主页/游戏结束屏幕上的**HI SCORE**和得分：
- en: '![Drawing the HUD, and the home and level up screens](img/image_10_002.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![绘制HUD，主页和升级屏幕](img/image_10_002.jpg)'
- en: 'Next we see text to show what the player''s level up options are, although
    these options don''t do anything yet:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们看到文本显示玩家的升级选项，尽管这些选项目前还没有任何作用。
- en: '![Drawing the HUD, and the home and level up screens](img/image_10_003.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![绘制HUD，主页和升级屏幕](img/image_10_003.jpg)'
- en: 'And here we see a helpful message on the pause screen:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们在暂停屏幕上看到了一条有用的消息：
- en: '![Drawing the HUD, and the home and level up screens](img/image_10_004.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![绘制HUD，主页和升级屏幕](img/image_10_004.jpg)'
- en: Tip
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: SFML Views are more powerful than this simple HUD can demonstrate. For an insight
    into the potential of SFML Views and how easy to use they are, take a look at
    the SFML website's tutorial on `View` at [http://www.sfml-dev.org/tutorials/2.0/graphics-view.php](http://www.sfml-dev.org/tutorials/2.0/graphics-view.php).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: SFML Views比这个简单的HUD更强大。要了解SFML Views的潜力以及它们的易用性，可以查看SFML网站关于`View`的教程[http://www.sfml-dev.org/tutorials/2.0/graphics-view.php](http://www.sfml-dev.org/tutorials/2.0/graphics-view.php)。
- en: FAQ
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FAQ
- en: 'Here is a question that might be on your mind:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这里可能会有一个让您在意的问题：
- en: Q) Where can I see more of the power of the `View` class in action?
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Q）我在哪里可以看到`View`类的更多功能？
- en: A) Take a look at the enhanced edition of the **Zombie Arena** game in the download
    bundle. You can use the keyboard cursor keys to spin and zoom the action. Warning!
    Spinning the scene makes the controls awkward, but you get to see some of the
    things that can be done with the `View` class.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: A）查看下载包中**Zombie Arena**游戏的增强版。您可以使用键盘光标键旋转和缩放操作。警告！旋转场景会使控制变得笨拙，但您可以看到`View`类可以做的一些事情。
- en: '![FAQ](img/image_10_005.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![FAQ](img/image_10_005.jpg)'
- en: The zoom and rotate functionality was achieved with just a few lines of code
    in the input handling section of the main game loop. You can see the code in the
    `Zombie Arena Enhanced Version` folder of the download bundle or run the enhanced
    version from the `Runnable Games/Zombie Arena` folder.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 缩放和旋转功能是在主游戏循环的输入处理部分中只用了几行代码就实现的。您可以在下载包的`Zombie Arena Enhanced Version`文件夹中查看代码，或者从`Runnable
    Games/Zombie Arena`文件夹中运行增强版。
- en: Summary
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: That was a quick and simple chapter. We saw how to display the value, held by
    variables of different types using `sstream` and then draw them over the top of
    the main game action using a second SFML `View` object.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个快速简单的章节。我们看到了如何使用`sstream`显示不同类型的变量持有的值，然后使用第二个SFML`View`对象在主游戏动作的顶部绘制它们。
- en: We are nearly done with Zombie Arena now. All the screenshots show a small arena
    that doesn't take advantage of the full monitor. In the final chapter for this
    project, we will put in some finishing touches such as levelingup, sound effects,
    and saving the high-score . The arena can then grow to the same size as the monitor
    and far beyond.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在几乎完成了僵尸竞技场。所有的截图都显示了一个小竞技场，没有充分利用整个显示器。在这个项目的最后阶段，我们将加入一些最后的修饰，比如升级、音效和保存最高分。竞技场可以随后扩大到与显示器相同的大小甚至更大。
