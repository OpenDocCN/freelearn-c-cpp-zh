["```cpp\n\u251c\u2500\u2500 /lib\n\u2502    \u2514\u2500\u2500 main.c\n\u251c\u2500\u2500 /src\n|    \u251c\u2500\u2500 Transaction.js\n|    \u251c\u2500\u2500 /assets\n|    \u2502   \u251c\u2500\u2500 db.json\n|    \u2502   \u251c\u2500\u2500 main.wasm\n|    \u2502   \u2514\u2500\u2500 memory.wasm\n|    \u251c\u2500\u2500 assign-routes.js\n|    \u251c\u2500\u2500 index.js\n|    \u2514\u2500\u2500 load-assets.js\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 package-lock.json\n\u2514\u2500\u2500 requests.js\n```", "```cpp\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst loadAssets = require('./load-assets');\nconst assignRoutes = require('./assign-routes');\n\n// If you preface the npm start command with PORT=[Your Port] on\n// macOS/Ubuntu or set PORT=[Your Port] on Windows, it will change the port\n// that the server is running on, so PORT=3001 will run the app on\n// port 3001:\nconst PORT = process.env.PORT || 3000;\n\nconst startApp = async () => {\n  const app = express();\n\n  // Use body-parser for parsing JSON in the body of a request:\n  app.use(bodyParser.urlencoded({ extended: true }));\n  app.use(bodyParser.json());\n\n  // Instantiate the Wasm module and local database:\n  const assets = await loadAssets();\n\n  // Setup routes that can interact with Wasm and the database:\n  assignRoutes(app, assets);\n\n  // Start the server with the specified port:\n  app.listen(PORT, (err) => {\n    if (err) return Promise.reject(err);\n    return Promise.resolve();\n  });\n};\n\nstartApp()\n  .then(() => console.log(`Server is running on port ${PORT}`))\n  .catch(err => console.error(`An error occurred: ${err}`));\n```", "```cpp\nconst fs = require('fs');\nconst path = require('path');\n\nconst assetsPath = path.resolve(__dirname, 'assets');\n\nconst getBufferSource = fileName => {\n  const filePath = path.resolve(assetsPath, fileName);\n  return fs.readFileSync(filePath); // <- Replaces the fetch() and .arrayBuffer()\n};\n\n// We're using async/await because it simplifies the Promise syntax\nconst loadWasm = async () => {\n  const wasmMemory = new WebAssembly.Memory({ initial: 1024 });\n  const memoryBuffer = getBufferSource('memory.wasm');\n  const memoryInstance = await WebAssembly.instantiate(memoryBuffer, {\n    env: {\n      memory: wasmMemory\n    }\n  });\n  ...\n```", "```cpp\nfetch('main.wasm')\n  .then(response => {\n    if (response.ok) return response.arrayBuffer();\n    throw new Error('Unable to fetch WebAssembly file');\n  })\n  .then(bytes => WebAssembly.instantiate(bytes, importObj));\n```", "```cpp\nconst loadDb = () => {\n  const dbPath = path.resolve(assetsPath, 'db.json');\n  const adapter = new FileSync(dbPath);\n  return low(adapter);\n};\n```", "```cpp\nmodule.exports = async function loadAssets() {\n  const db = loadDb();\n  const wasmInstance = await loadWasm();\n  return {\n    db,\n    wasmInstance\n  };\n};\n```", "```cpp\ngetValidAmount(transaction) {\n  const { amount, type } = transaction;\n  return type === 'Withdrawal' ? -Math.abs(amount) : amount;\n}\n\nedit(transactionId, contents) {\n  const updatedTransaction = this.db.get('transactions')\n    .find({ id: transactionId })\n    .assign(contents)\n    .write();\n\n  const { categoryId, ...transaction } = updatedTransaction;\n  const amount = this.getValidAmount(transaction);\n  this.wasmInstance._editTransaction(transactionId, categoryId, amount);\n\n  return updatedTransaction;\n}\n```", "```cpp\nmodule.exports = function assignRoutes(app, assets) {\n  const { db, wasmInstance } = assets;\n  const transaction = new Transaction(db, wasmInstance);\n  const transactionsRouter = express.Router();\n\n  transactionsRouter\n    .route('/')\n    .get((req, res) => {\n      const transactions = transaction.findAll();\n      res.status(200).send(transactions);\n    })\n    .post((req, res) => {\n      const { body } = req;\n      if (!body) {\n        return res.status(400).send('Body of request is empty');\n      }\n      const newRecord = transaction.add(body);\n      res.status(200).send(newRecord);\n    });\n\n  ...\n\n  // Set the base path for all routes on transactionsRouter:\n  app.use('/api/transactions', transactionsRouter);\n}\n```", "```cpp\nnpm install\n```", "```cpp\n\"scripts\": {\n  \"prebuild\": \"rimraf src/assets/main.wasm\",\n  \"build\": \"emcc lib/main.c -Os -s WASM=1 -s SIDE_MODULE=1\n           -s BINARYEN_ASYNC_COMPILATION=0 -s ALLOW_MEMORY_GROWTH=1\n           -o src/assets/main.wasm\",\n  \"start\": \"node src/index.js\",\n  \"watch\": \"nodemon src/* --exec 'npm start'\"\n},\n```", "```cpp\nnpm run build\n```", "```cpp\nnpm start\n```", "```cpp\nnode ./requests.js 1\n```", "```cpp\nnode ./requests.js 5\n```", "```cpp\nnode ./requests.js 5 3\n```", "```cpp\n\u251c\u2500\u2500 /src\n\u2502    \u251c\u2500\u2500 /assets\n\u2502    \u2502    \u251c\u2500\u2500 background.jpg\n\u2502    \u2502    \u2514\u2500\u2500 spaceship.svg\n\u2502    \u251c\u2500\u2500 App.js\n\u2502    \u251c\u2500\u2500 index.html\n\u2502    \u251c\u2500\u2500 index.js\n\u2502    \u251c\u2500\u2500 main.c\n\u2502    \u2514\u2500\u2500 styles.css\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 package-lock.json\n\u2514\u2500\u2500 webpack.config.js\n```", "```cpp\nnpm install \n```", "```cpp\n...\n\"devDependencies\": {\n  \"@babel/core\": \"^7.0.0-rc.1\",\n  \"@babel/preset-env\": \"^7.0.0-rc.1\",\n  \"babel-loader\": \"^8.0.0-beta.4\",\n  \"cpp-wasm-loader\": \"0.7.7\",\n  \"css-loader\": \"1.0.0\",\n  \"file-loader\": \"1.1.11\",\n  \"html-loader\": \"0.5.5\",\n  \"html-webpack-plugin\": \"3.2.0\",\n  \"mini-css-extract-plugin\": \"0.4.1\",\n  \"rimraf\": \"2.6.2\",\n  \"webpack\": \"4.16.5\",\n  \"webpack-cli\": \"3.1.0\",\n  \"webpack-dev-server\": \"3.1.5\"\n},\n...\n```", "```cpp\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        use: {\n          loader: 'babel-loader',\n          options: {\n            // We need this to use async/await:\n            presets: [\n              [\n                '@babel/preset-env', {\n                  targets: { node: '10' }\n                }\n              ]\n            ]\n          }\n        }\n      },\n      {\n        test: /\\.html$/,\n        use: {\n          loader: 'html-loader',\n          options: { minimize: true }\n        }\n      },\n      {\n        test: /\\.css$/,\n        use: [MiniCssExtractPlugin.loader, 'css-loader']\n      },\n      {\n        test: /\\.(c|cpp)$/,\n        use: {\n          loader: 'cpp-wasm-loader',\n          options: {\n            emitWasm: true\n          }\n        }\n      },\n      {\n        test: /\\.(png|jpg|gif|svg)$/,\n        use: {\n          loader: 'file-loader',\n          options: {\n            name: 'assets/[name].[ext]'\n          }\n        }\n      }\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './src/index.html',\n      filename: './index.html'\n    }),\n    // This is used for bundling (building for production):\n    new MiniCssExtractPlugin({\n      filename: '[name].css',\n      chunkFilename: '[id].css'\n    })\n  ]\n};\n```", "```cpp\ntypedef struct Bounds {\n  int width;\n  int height;\n} Bounds;\n\n// We're using the term \"Rect\" to represent the rectangle the\n// image occupies:\ntypedef struct Rect {\n  int x;\n  int y;\n  int width;\n  int height;\n  // Horizontal direction of travel (L/R):\n  char horizDir;\n  // Vertical direction of travel (U/D):\n  char vertDir;\n} Rect;\n\nstruct Bounds bounds;\nstruct Rect rect;\n```", "```cpp\nEMSCRIPTEN_KEEPALIVE\nvoid start(int boundsWidth, int boundsHeight, int rectWidth,\n           int rectHeight) {\n    rect.x = 0;\n    rect.y = 0;\n    rect.horizDir = 'R';\n    rect.vertDir = 'D';\n    rect.width = rectWidth;\n    rect.height = rectHeight;\n    bounds.width = boundsWidth;\n    bounds.height = boundsHeight;\n    setIsRunning(true);\n}\n```", "```cpp\n/**\n * Updates the rectangle location by +/- 1px in the x or y based on\n * the current location.\n */\nvoid updateRectLocation() {\n    // Determine if the bounding rectangle has \"bumped\" into either\n    // the left/right side or top/bottom side. Depending on which side,\n    // flip the direction:\n    int xBouncePoint = bounds.width - rect.width;\n    if (rect.x == xBouncePoint) rect.horizDir = 'L';\n    if (rect.x == 0) rect.horizDir = 'R';\n\n    int yBouncePoint = bounds.height - rect.height;\n    if (rect.y == yBouncePoint) rect.vertDir = 'U';\n    if (rect.y == 0) rect.vertDir = 'D';\n\n    // If the direction has changed based on the x and y\n    // coordinates, ensure the x and y points update\n    // accordingly:\n    int horizIncrement = 1;\n    if (rect.horizDir == 'L') horizIncrement = -1;\n    rect.x = rect.x + horizIncrement;\n\n    int vertIncrement = 1;\n    if (rect.vertDir == 'U') vertIncrement = -1;\n    rect.y = rect.y + vertIncrement;\n}\n```", "```cpp\n// This is loaded using the css-loader dependency:\nimport './styles.css';\n\n// This is loaded using the cpp-wasm-loader dependency:\nimport wasm from './main.c';\n\n// These are loaded using the file-loader dependency:\nimport backgroundImage from './assets/background.jpg';\nimport spaceshipImage from './assets/spaceship.svg';\n```", "```cpp\nexport default {\n  data() {\n    return {\n      instance: null,\n      bounds: { width: 800, height: 592 },\n      rect: { width: 200, height: 120 },\n      speed: 5\n    };\n  },\n  ...\n```", "```cpp\nmethods: {\n  // Create a new Image instance to pass into the drawImage function\n  // for the <canvas> element's context:\n  loadImage(imageSrc) {\n    const loadedImage = new Image();\n    loadedImage.src = imageSrc;\n    return new Promise((resolve, reject) => {\n      loadedImage.onload = () => resolve(loadedImage);\n      loadedImage.onerror = () => reject();\n    });\n  },\n\n  // Compile/load the contents of main.c and assign the resulting\n  // Wasm module instance to the components this.instance property:\n  async initializeWasm() {\n    const ctx = this.$refs.canvas.getContext('2d');\n\n    // Create Image instances of the background and spaceship.\n    // These are required to pass into the ctx.drawImage() function:\n    const [bouncer, background] = await Promise.all([\n      this.loadImage(spaceshipImage),\n      this.loadImage(backgroundImage)\n    ]);\n\n    // Compile the C code to Wasm and assign the resulting\n    // module.exports to this.instance:\n    const { width, height } = this.bounds;\n    return wasm\n      .init(imports => ({\n        ...imports,\n        _jsFillRect(x, y, w, h) {\n          ctx.drawImage(bouncer, x, y, w, h);\n        },\n        _jsClearRect() {\n          ctx.drawImage(background, 0, 0, width, height);\n        }\n      }))\n        .then(module => {\n          this.instance = module.exports;\n          return Promise.resolve();\n        });\n  },\n  ...\n```", "```cpp\n  ...\n  // Looping function to move the spaceship across the canvas.\n  loopRectMotion() {\n    setTimeout(() => {\n      this.instance.moveRect();\n      if (this.instance.getIsRunning()) this.loopRectMotion();\n    }, 15 - this.speed);\n  },\n  // Pauses/resumes the spaceship's movement when the button is\n  // clicked:\n  onActionClick(event) {\n    const newIsRunning = !this.instance.getIsRunning();\n    this.instance.setIsRunning(newIsRunning);\n    event.target.innerHTML = newIsRunning ? 'Pause' : 'Resume';\n    if (newIsRunning) this.loopRectMotion();\n  }\n},\nmounted() {\n  this.initializeWasm().then(() => {\n    this.instance.start(\n      this.bounds.width,\n      this.bounds.height,\n      this.rect.width,\n      this.rect.height\n    );\n    this.loopRectMotion();\n  });\n},\n```", "```cpp\ntemplate: `\n  <div class=\"flex column\">\n   <h1>SPACE WASM!</h1>\n    <canvas\n      ref=\"canvas\"\n      :height=\"bounds.height\"\n      :width=\"bounds.width\">\n    </canvas>\n    <div class=\"flex controls\">\n      <div>\n        <button class=\"defaultText\" @click=\"onActionClick\">\n          Pause\n        </button>\n      </div>\n    <div class=\"flex column\">\n      <label class=\"defaultText\" for=\"speed\">Speed: {{speed}}</label>\n      <input\n        v-model=\"speed\"\n        id=\"speed\"\n        type=\"range\"\n        min=\"1\"\n        max=\"10\"\n        step=\"1\">\n    </div>\n  </div>\n</div>\n\n```", "```cpp\nnpm run build\n```", "```cpp\n\u251c\u2500\u2500 /assets\n\u2502    \u251c\u2500\u2500 background.jpg\n\u2502    \u2514\u2500\u2500 spaceship.svg\n\u251c\u2500\u2500 index.html\n\u251c\u2500\u2500 main.css\n\u251c\u2500\u2500 main.js\n\u2514\u2500\u2500 main.wasm\n```", "```cpp\nserve -l 8080 dist\n```", "```cpp\nnpm start\n```", "```cpp\nEMSCRIPTEN_KEEPALIVE\nvoid setIsRunning(bool newIsRunning) {\n    // isRunning = newIsRunning;\n\n    // Set the value to always false:\n    isRunning = false;\n}\n```", "```cpp\n\u251c\u2500\u2500 /src\n|    \u251c\u2500\u2500 /__tests__\n|    \u2502    \u2514\u2500\u2500 main.test.js\n|    \u2514\u2500\u2500 main.c\n\u251c\u2500\u2500 package.json\n\u2514\u2500\u2500 package-lock.json\n```", "```cpp\nint addTwoNumbers(int leftValue, int rightValue) {\n    return leftValue + rightValue;\n}\n\nfloat divideTwoNumbers(float leftValue, float rightValue) {\n    return leftValue / rightValue;\n}\n\ndouble findFactorial(float value) {\n    int i;\n    double factorial = 1;\n\n    for (i = 1; i <= value; i++) {\n        factorial = factorial * i;\n    }\n    return factorial;\n}\n```", "```cpp\nnpm run build\n```", "```cpp\nnpm install\n```", "```cpp\nconst fs = require('fs');\nconst path = require('path');\n\ndescribe('main.wasm Tests', () => {\n  let wasmInstance;\n\n  beforeAll(async () => {\n    const wasmPath = path.resolve(__dirname, '..', 'main.wasm');\n    const buffer = fs.readFileSync(wasmPath);\n    const results = await WebAssembly.instantiate(buffer, {\n      env: {\n        memoryBase: 0,\n        tableBase: 0,\n        memory: new WebAssembly.Memory({ initial: 1024 }),\n        table: new WebAssembly.Table({ initial: 16, element: 'anyfunc' }),\n        abort: console.log\n      }\n    });\n    wasmInstance = results.instance.exports;\n  });\n ...\n```", "```cpp\nconst add = (a, b) => a + b;\n\ndescribe('the add function', () => {\n  test('returns 6 when 4 and 2 are passed in', () => {\n    const result = add(4, 2);\n    expect(result).toEqual(6);\n  });\n\n  test('returns 20 when 12 and 8 are passed in', () => {\n    const result = add(12, 8);\n    expect(result).toEqual(20);\n  });\n});\n```", "```cpp\n...\n  describe('the _addTwoNumbers function', () => {\n    test('returns 300 when 100 and 200 are passed in', () => {\n      const result = wasmInstance._addTwoNumbers(100, 200);\n      expect(result).toEqual(300);\n    });\n\n    test('returns -20 when -10 and -10 are passed in', () => {\n      const result = wasmInstance._addTwoNumbers(-10, -10);\n      expect(result).toEqual(-20);\n    });\n  });\n\n  describe('the _divideTwoNumbers function', () => {\n    test.each([\n      [10, 100, 10],\n      [-2, -10, 5],\n    ])('returns %f when %f and %f are passed in', (expected, a, b) => {\n      const result = wasmInstance._divideTwoNumbers(a, b);\n      expect(result).toEqual(expected);\n    });\n\n    test('returns ~3.77 when 20.75 and 5.5 are passed in', () => {\n      const result = wasmInstance._divideTwoNumbers(20.75, 5.5);\n      expect(result).toBeCloseTo(3.77, 2);\n    });\n  });\n\n  describe('the _findFactorial function', () => {\n    test.each([\n      [120, 5],\n      [362880, 9.2],\n    ])('returns %p when %p is passed in', (expected, input) => {\n      const result = wasmInstance._findFactorial(input);\n      expect(result).toEqual(expected);\n    });\n  });\n});\n```", "```cpp\nnpm test\n```", "```cpp\nmain.wasm Tests\n  the _addTwoNumbers function\n    \u2713 returns 300 when 100 and 200 are passed in (4ms)\n    \u2713 returns -20 when -10 and -10 are passed in\n  the _divideTwoNumbers function\n    \u2713 returns 10 when 100 and 10 are passed in\n    \u2713 returns -2 when -10 and 5 are passed in (1ms)\n    \u2713 returns ~3.77 when 20.75 and 5.5 are passed in\n  the _findFactorial function\n    \u2713 returns 120 when 5 is passed in (1ms)\n    \u2713 returns 362880 when 9.2 is passed in\n\nTest Suites: 1 passed, 1 total\nTests: 7 passed, 7 total\nSnapshots: 0 total\nTime: 1.008s\nRan all test suites.\n```", "```cpp\nnpm test -- --bail\n```"]