["```cpp\n#define STAR_MASS 9999999\n```", "```cpp\nclass Collider {\n    public:\n        bool m_Active;\n        float* m_ParentRotation;\n        float* m_ParentX;\n        float* m_ParentY;\n        Vector2D m_TempPoint;\n\n        bool CCHitTest( Collider* collider );\n\n void ElasticCollision( Collider* collider );\n float m_Mass;\n Vector2D m_Direction;\n Vector2D m_Velocity;\n Vector2D m_Position;\n\n        float m_Radius;\n        float m_SteeringRadius;\n        float m_SteeringRadiusSQ;\n        void SetParentInformation( float* rotation, float* x, float* y );\n\n        Collider(float radius);\n        bool HitTest( Collider *collider );\n        bool SteeringLineTest( Vector2D &p1, Vector2D &p2 );\n        bool SteeringRectTest( Vector2D &start_point, Vector2D \n                               &end_point );\n        void WrapPosition();\n};\n```", "```cpp\nvoid ElasticCollision( Collider* collider );\nfloat m_Mass;\nVector2D m_Direction;\nVector2D m_Velocity;\n```", "```cpp\nVector2D m_Direction;\nVector2D m_Velocity;\n```", "```cpp\nclass Asteroid : public Collider {\n    public:\n        SDL_Texture *m_SpriteTexture;\n        SDL_Rect m_src = {.x = 0, .y = 0, .w = 16, .h = 16 };\n        SDL_Rect m_dest = {.x = 0, .y = 0, .w = 0, .h = 0 };\n\n        Uint32 m_CurrentFrame = 0;\n        int m_NextFrameTime;\n        float m_Rotation;\n\n        Emitter* m_Explode;\n        Emitter* m_Chunks;\n\n        Asteroid( float x, float y,\n                  float velocity,\n                  float rotation );\n\n        void Move();\n        void Render();\n        void Explode();\n};\n```", "```cpp\nclass Ship : public Collider {\n    public:\n        const float c_Acceleration = 10.0f;\n        const float c_MaxVelocity = 100.0f;\n        const int c_AliveTime = 2000;\n        const Uint32 c_MinLaunchTime = 300;\n\n        bool m_Accelerating = false;\n        Uint32 m_LastLaunchTime;\n        const int c_Width = 32;\n        const int c_Height = 32;\n        SDL_Texture *m_SpriteTexture;\n        SDL_Rect src = {.x = 0, .y = 0, .w = 32, .h = 32 };\n\n        Emitter* m_Explode;\n        Emitter* m_Exhaust;\n        Shield* m_Shield;\n        std::vector<Collider*> m_Colliders;\n\n        Uint32 m_CurrentFrame = 0;\n        int m_NextFrameTime;\n        float m_Rotation;\n\n        void RotateLeft();\n        void RotateRight();\n        void Accelerate();\n        void Decelerate();\n        void CapVelocity();\n        void Shoot();\n        virtual void Move() = 0;\n        Ship();\n        void Render();\n        bool CompoundHitTest( Collider* collider );\n};\n```", "```cpp\nclass Projectile: public Collider {\n    public:\n        const char* c_SpriteFile = \"sprites/ProjectileExp.png\";\n        const int c_Width = 16;\n        const int c_Height = 16;\n        SDL_Texture *m_SpriteTexture;\n        SDL_Rect src = {.x = 0, .y = 0, .w = 16, .h = 16 };\n\n        Uint32 m_CurrentFrame = 0;\n        int m_NextFrameTime;\n        const float c_Velocity = 300.0;\n        const float c_AliveTime = 2000;\n        float m_TTL;\n\n        Projectile();\n        void Move();\n        void Render();\n        void Launch(Vector2D &position, Vector2D &direction);\n};\n```", "```cpp\nclass Star : public Collider {\n    public:\n        const float c_MaxGravityDistSQ = 250000.0; // 300 squared\n\n        SDL_Texture *m_SpriteTexture;\n        SDL_Rect m_src = {.x = 0, .y = 0, .w = 64, .h = 64 };\n        SDL_Rect m_dest = {.x = 0, .y = 0, .w = 64, .h = 64 };\n\n        std::vector<Emitter*> m_FlareList;\n\n        Uint32 m_CurrentFrame = 0;\n        int m_NextFrameTime;\n\n        Star();\n\n        void Move();\n        void Render();\n\n        void ShipGravity( Ship* s );\n};\n```", "```cpp\nvoid Collider::ElasticCollision( Collider* collider ) {\n    if( collider->m_Mass == STAR_MASS || m_Mass == STAR_MASS ) {\n        return;\n    }\n\n    Vector2D separation_vec = collider->m_Position - m_Position;\n\n    separation_vec.Normalize();\n    separation_vec *= collider->m_Radius + m_Radius;\n\n    collider->m_Position = m_Position + separation_vec;\n\n    Vector2D old_v1 = m_Velocity;\n    Vector2D old_v2 = collider->m_Velocity;\n\n    m_Velocity = old_v1 * ((m_Mass - collider->m_Mass)/(m_Mass + \n    collider->m_Mass)) +\n    old_v2 * ((2 * collider->m_Mass) / (m_Mass + collider->m_Mass));\n\n    collider->m_Velocity = old_v1 * ((2 * collider->m_Mass)/(m_Mass + \n    collider->m_Mass)) +\n    old_v2 * ((collider->m_Mass - m_Mass)/(m_Mass + collider->m_Mass));\n}\n```", "```cpp\nif( collider->m_Mass == STAR_MASS || m_Mass == STAR_MASS ) {\n    return;\n}\n```", "```cpp\nseparation_vec.Normalize();\nseparation_vec *= collider->m_Radius + m_Radius;\n\ncollider->m_Position = m_Position + separation_vec;\n```", "```cpp\nVector2D old_v1 = m_Velocity;\nVector2D old_v2 = collider->m_Velocity;\n\nm_Velocity = old_v1 * ((m_Mass - collider->m_Mass)/(m_Mass + collider->m_Mass)) +\nold_v2 * ((2 * collider->m_Mass) / (m_Mass + collider->m_Mass));\n\ncollider->m_Velocity = old_v1 * ((2 * collider->m_Mass)/(m_Mass + collider->m_Mass)) +\nold_v2 * ((collider->m_Mass - m_Mass)/(m_Mass + collider->m_Mass));\n```", "```cpp\nm_Mass = STAR_MASS;\n```", "```cpp\nvoid Star::ShipGravity( Ship* s ) {\n    Vector2D dist_vec = m_Position - s->m_Position;\n    float dist_sq = dist_vec.MagSQ();\n\n    if( dist_sq < c_MaxGravityDistSQ ) {\n        float force = (c_MaxGravityDistSQ / dist_sq) * delta_time;\n        dist_vec.Normalize();\n        dist_vec *= force;\n        s->m_Velocity += dist_vec;\n    }\n}\n```", "```cpp\nif( dist_sq < c_MaxGravityDistSQ ) {\n    float force = (c_MaxGravityDistSQ / dist_sq) * delta_time;\n    dist_vec.Normalize();\n    dist_vec *= force;\n    s->m_Velocity += dist_vec;\n}\n```", "```cpp\ndist_vec.Normalize();\ndist_vec *= force;\n```", "```cpp\ns->m_Velocity += dist_vec;\n```", "```cpp\nvoid Star::Move() {\n    m_NextFrameTime -= diff_time;\n\n    if( m_NextFrameTime <= 0 ) {\n        ++m_CurrentFrame;\n        m_NextFrameTime = ms_per_frame;\n        if( m_CurrentFrame >= 8 ) {\n            m_CurrentFrame = 0;\n        }\n    }\n\n ShipGravity( player );\n ShipGravity( enemy );\n}\n```", "```cpp\nShipGravity( player );\nShipGravity( enemy );\n```", "```cpp\nvoid collisions() {\n Asteroid* asteroid;\n std::vector<Asteroid*>::iterator ita;\n    if( player->m_CurrentFrame == 0 && player->CompoundHitTest( star ) ) {\n        player->m_CurrentFrame = 1;\n        player->m_NextFrameTime = ms_per_frame;\n        player->m_Explode->Run();\n        large_explosion_snd->Play();\n    }\n    if( enemy->m_CurrentFrame == 0 && enemy->CompoundHitTest( star ) ) {\n        enemy->m_CurrentFrame = 1;\n        enemy->m_NextFrameTime = ms_per_frame;\n        enemy->m_Explode->Run();\n        large_explosion_snd->Play();\n    }\n    Projectile* projectile;\n    std::vector<Projectile*>::iterator it;\n    for(it=projectile_pool->m_ProjectileList.begin(); \n    it!=projectile_pool->m_ProjectileList.end();\n    it++) {\n        projectile = *it;\n        if( projectile->m_CurrentFrame == 0 && projectile->m_Active ) {\n            for( ita = asteroid_list.begin(); ita != asteroid_list.end(); \n                 ita++ \n            ) {\n                asteroid = *ita;\n                if( asteroid->m_Active ) {\n                    if( asteroid->HitTest( projectile ) ) {\n asteroid->ElasticCollision( projectile );\n                        projectile->m_CurrentFrame = 1;\n                        projectile->m_NextFrameTime = ms_per_frame;\n                        small_explosion_snd->Play();\n                    }\n                }\n            }\n            if( projectile->HitTest( star ) ){\n                projectile->m_CurrentFrame = 1;\n                projectile->m_NextFrameTime = ms_per_frame;\n                small_explosion_snd->Play();\n            }\n            else if( player->m_CurrentFrame == 0 && ( projectile->HitTest( \n            player ) ||\n                      player->CompoundHitTest( projectile ) ) ) {\n                if( player->m_Shield->m_Active == false ) {\n                    player->m_CurrentFrame = 1;\n                    player->m_NextFrameTime = ms_per_frame;\n                    player->m_Explode->Run();\n                    large_explosion_snd->Play();\n                }\n                else {\n                    hit_snd->Play();\n player->ElasticCollision( projectile );\n                }\n                projectile->m_CurrentFrame = 1;\n                projectile->m_NextFrameTime = ms_per_frame;\n            }\n            else if( enemy->m_CurrentFrame == 0 && ( projectile-\n            >HitTest( enemy ) || enemy->CompoundHitTest( projectile ) ) \n             ) {\n                if( enemy->m_Shield->m_Active == false ) {\n                    enemy->m_CurrentFrame = 1;\n                    enemy->m_NextFrameTime = ms_per_frame;\n                    enemy->m_Explode->Run();\n                    large_explosion_snd->Play();\n                }\n                else {\n                    enemy->ElasticCollision( projectile );\n                    hit_snd->Play();\n                }\n                projectile->m_CurrentFrame = 1;\n                projectile->m_NextFrameTime = ms_per_frame;\n            }\n        }\n    }\n    for( ita = asteroid_list.begin(); ita != asteroid_list.end(); ita++ ) {\n        asteroid = *ita;\n        if( asteroid->m_Active ) {\n            if( asteroid->HitTest( star ) ) {\n                asteroid->Explode();\n                small_explosion_snd->Play();\n            }\n        }\n        else { continue; }\n        if( player->m_CurrentFrame == 0 && asteroid->m_Active &&\n            ( asteroid->HitTest( player ) || player->CompoundHitTest( \n            asteroid ) ) ) {\n            if( player->m_Shield->m_Active == false ) {\n                player->m_CurrentFrame = 1;\n                player->m_NextFrameTime = ms_per_frame;\n                player->m_Explode->Run();\n                large_explosion_snd->Play();\n            }\n            else {\n player->ElasticCollision( asteroid );\n                small_explosion_snd->Play();\n            }\n        }\n        if( enemy->m_CurrentFrame == 0 && asteroid->m_Active &&\n            ( asteroid->HitTest( enemy ) || enemy->CompoundHitTest( \n            asteroid ) ) ) {\n            if( enemy->m_Shield->m_Active == false ) {\n                enemy->m_CurrentFrame = 1;\n                enemy->m_NextFrameTime = ms_per_frame;\n                enemy->m_Explode->Run();\n                large_explosion_snd->Play();\n            }\n            else {\n enemy->ElasticCollision( asteroid );\n                small_explosion_snd->Play();\n            }\n        }\n    }\n    Asteroid* asteroid_1;\n    Asteroid* asteroid_2;\n    std::vector<Asteroid*>::iterator ita_1;\n    std::vector<Asteroid*>::iterator ita_2;\n    for( ita_1 = asteroid_list.begin(); ita_1 != asteroid_list.end(); \n         ita_1++ ) {\n        asteroid_1 = *ita_1;\n        if( !asteroid_1->m_Active ) { continue; }\n        for( ita_2 = ita_1+1; ita_2 != asteroid_list.end(); ita_2++ ) {\n            asteroid_2 = *ita_2;\n            if( !asteroid_2->m_Active ) { continue; }\n            if( asteroid_1->HitTest( asteroid_2 ) ) {\n asteroid_1->ElasticCollision( asteroid_2 );\n            }\n        }\n    }\n}\n```", "```cpp\nfor( it = projectile_pool->m_ProjectileList.begin(); it != projectile_pool->m_ProjectileList.end(); it++ ) {\n    projectile = *it;\n    if( projectile->m_CurrentFrame == 0 && projectile->m_Active ) {\n        for( ita = asteroid_list.begin(); ita != asteroid_list.end(); \n        ita++ ) {\n            asteroid = *ita;\n            if( asteroid->m_Active ) {\n                if( asteroid->HitTest( projectile ) ) {\n asteroid->ElasticCollision( projectile );\n                    projectile->m_CurrentFrame = 1;\n                    projectile->m_NextFrameTime = ms_per_frame;\n                    small_explosion_snd->Play();\n                }\n            }\n        }\n        if( projectile->HitTest( star ) ){\n            projectile->m_CurrentFrame = 1;\n            projectile->m_NextFrameTime = ms_per_frame;\n            small_explosion_snd->Play();\n        }\n        else if( player->m_CurrentFrame == 0 &&\n                ( projectile->HitTest( player ) ||\n                  player->CompoundHitTest( projectile ) ) ) {\n            if( player->m_Shield->m_Active == false ) {\n                player->m_CurrentFrame = 1;\n                player->m_NextFrameTime = ms_per_frame;\n\n                player->m_Explode->Run();\n                large_explosion_snd->Play();\n            }\n            else {\n                hit_snd->Play();\n player->ElasticCollision( projectile );\n            }\n            projectile->m_CurrentFrame = 1;\n            projectile->m_NextFrameTime = ms_per_frame;\n        }\n        else if( enemy->m_CurrentFrame == 0 &&\n                ( projectile->HitTest( enemy ) ||\n                  enemy->CompoundHitTest( projectile ) ) ) {\n            if( enemy->m_Shield->m_Active == false ) {\n                enemy->m_CurrentFrame = 1;\n                enemy->m_NextFrameTime = ms_per_frame;\n                enemy->m_Explode->Run();\n                large_explosion_snd->Play();\n            }\n            else {\n enemy->ElasticCollision( projectile );\n                hit_snd->Play();\n            }\n            projectile->m_CurrentFrame = 1;\n            projectile->m_NextFrameTime = ms_per_frame;\n        }\n    }\n}\n```", "```cpp\nfor( ita = asteroid_list.begin(); ita != asteroid_list.end(); ita++ ) {\n    asteroid = *ita;\n    if( asteroid->m_Active ) {\n        if( asteroid->HitTest( projectile ) ) {\n asteroid->ElasticCollision( projectile );\n            projectile->m_CurrentFrame = 1;\n            projectile->m_NextFrameTime = ms_per_frame;\n            small_explosion_snd->Play();\n        }\n    }\n```", "```cpp\nasteroid->ElasticCollision( projectile );\n```", "```cpp\nelse if( player->m_CurrentFrame == 0 &&\n        ( projectile->HitTest( player ) ||\n          player->CompoundHitTest( projectile ) ) ) {\n    if( player->m_Shield->m_Active == false ) {\n        player->m_CurrentFrame = 1;\n        player->m_NextFrameTime = ms_per_frame;\n        player->m_Explode->Run();\n        large_explosion_snd->Play();\n    }\n    else {\n        hit_snd->Play();\n player->ElasticCollision( projectile );\n    }\n    projectile->m_CurrentFrame = 1;\n    projectile->m_NextFrameTime = ms_per_frame;\n}\n```", "```cpp\n    else if( enemy->m_CurrentFrame == 0 &&\n            ( projectile->HitTest( enemy ) ||\n              enemy->CompoundHitTest( projectile ) ) ) {\n        if( enemy->m_Shield->m_Active == false ) {\n            enemy->m_CurrentFrame = 1;\n            enemy->m_NextFrameTime = ms_per_frame;\n            enemy->m_Explode->Run();\n            large_explosion_snd->Play();\n        }\n        else {\n enemy->ElasticCollision( projectile );\n            hit_snd->Play();\n        }\n        projectile->m_CurrentFrame = 1;\n        projectile->m_NextFrameTime = ms_per_frame;\n    }\n}\n```", "```cpp\nfor( ita = asteroid_list.begin(); ita != asteroid_list.end(); ita++ ) {\n    asteroid = *ita;\n    if( asteroid->m_Active ) {\n        if( asteroid->HitTest( star ) ) {\n            asteroid->Explode();\n            small_explosion_snd->Play();\n        }\n    }\n    else {\n        continue;\n    }\n\n    if( player->m_CurrentFrame == 0 &&\n        asteroid->m_Active &&\n        ( asteroid->HitTest( player ) ||\n          player->CompoundHitTest( asteroid ) ) ) {\n        if( player->m_Shield->m_Active == false ) {\n            player->m_CurrentFrame = 1;\n            player->m_NextFrameTime = ms_per_frame;\n\n            player->m_Explode->Run();\n            large_explosion_snd->Play();\n        }\n        else {\n player->ElasticCollision( asteroid );\n            small_explosion_snd->Play();\n        }\n    }\n    if( enemy->m_CurrentFrame == 0 &&\n        asteroid->m_Active &&\n        ( asteroid->HitTest( enemy ) ||\n          enemy->CompoundHitTest( asteroid ) ) ) {\n        if( enemy->m_Shield->m_Active == false ) {\n            enemy->m_CurrentFrame = 1;\n            enemy->m_NextFrameTime = ms_per_frame;\n\n            enemy->m_Explode->Run();\n            large_explosion_snd->Play();\n        }\n        else {\n            enemy->ElasticCollision( asteroid );\n            small_explosion_snd->Play();\n        }\n    }\n}\n```", "```cpp\nAsteroid* asteroid_1;\nAsteroid* asteroid_2;\n\nstd::vector<Asteroid*>::iterator ita_1;\nstd::vector<Asteroid*>::iterator ita_2;\n\nfor( ita_1 = asteroid_list.begin(); ita_1 != asteroid_list.end(); ita_1++ ) {\n    asteroid_1 = *ita_1;\n    if( !asteroid_1->m_Active ) {\n        continue;\n    }\n\n    for( ita_2 = ita_1+1; ita_2 != asteroid_list.end(); ita_2++ ) {\n        asteroid_2 = *ita_2;\n        if( !asteroid_2->m_Active ) {\n            continue;\n        }\n\n        if( asteroid_1->HitTest( asteroid_2 ) ) {\n asteroid_1->ElasticCollision( asteroid_2 );\n        }\n    }\n}\n```", "```cpp\nProjectile::Projectile(): Collider(4.0) {\n    m_Active = false;\n\n    SDL_Surface *temp_surface = IMG_Load( c_SpriteFile );\n\n    if( !temp_surface ) {\n        printf(\"failed to load image: %s\\n\", IMG_GetError() );\n        return;\n    }\n\n    m_SpriteTexture = SDL_CreateTextureFromSurface( renderer, temp_surface \n    );\n\n    if( !m_SpriteTexture ) {\n        printf(\"failed to create texture: %s\\n\", IMG_GetError() );\n        return;\n    }\n\n    SDL_FreeSurface( temp_surface );\n\n m_Mass = 1.0;\n}\n```", "```cpp\nm_Mass = 1.0;\n```", "```cpp\nAsteroid::Asteroid( float x, float y, float velocity, float rotation ): Collider(8.0) {\n    SDL_Surface *temp_surface = IMG_Load( ADSTEROID_SPRITE_FILE );\n    if( !temp_surface ) {\n        printf(\"failed to load image: %s\\n\", IMG_GetError() );\n        return;\n    }\n    else { printf(\"success creating asteroid surface\\n\"); }\n    m_SpriteTexture = SDL_CreateTextureFromSurface( renderer, temp_surface \n    );\n    if( !m_SpriteTexture ) {\n        printf(\"failed to create texture: %s\\n\", IMG_GetError() );\n        return;\n    }\n    else { printf(\"success creating asteroid texture\\n\"); }\n    SDL_FreeSurface( temp_surface );\n    m_Explode = new Emitter((char*)\"/sprites/Explode.png\", 100, 0, 360, \n    1000, 0.3, false, 20.0, 40.0, 10, 0, 0, 5, 1.0, 2.0, 1.0, 2.0,\n    0xffffff, 0xffffff, 0.01, 10, false, false, 800, 8 ); \n    m_Explode->m_parent_rotation_ptr = &m_Rotation;\n    m_Explode->m_parent_x_ptr = &(m_Position.x);\n    m_Explode->m_parent_y_ptr = &(m_Position.y);\n    m_Explode->m_Active = false;\n    m_Chunks = new Emitter((char*)\"/sprites/small-asteroid.png\",40,0,360, \n    1000, 0.05, false, 80.0, 150.0, 5,0,0,10,2.0,2.0,0.25, 0.5, 0xffffff, \n    0xffffff, 0.1, 10, false, true, 1000, 8 ); \n    m_Chunks->m_parent_rotation_ptr = &m_Rotation;\n    m_Chunks->m_parent_x_ptr = &m_Position.x;\n    m_Chunks->m_parent_y_ptr = &m_Position.y;\n    m_Chunks->m_Active = false;\n    m_Position.x = x;\n    m_Position.y = y;\n    Vector2D direction;\n    direction.x = 1;\n    direction.Rotate( rotation );\n    m_Direction = direction;\n    m_Velocity = m_Direction * velocity;\n    m_dest.h = m_src.h = m_dest.w = m_src.w = 16;\n    m_Rotation = rotation;\n    m_Active = true;\n    m_CurrentFrame = 0;\n    m_NextFrameTime = ms_per_frame;\n\n    m_Mass = 100.0;\n}\n```", "```cpp\nm_Mass = 100.0;\n```", "```cpp\nShip::Ship() : Collider(8.0) {\n    m_Rotation = PI;\n\n    m_LastLaunchTime = current_time;\n\n    m_Accelerating = false;\n\n    m_Exhaust = new Emitter((char*)\"/sprites/ProjectileExpOrange.png\", 200,\n                             -10, 10,\n                             400, 1.0, true,\n                             0.1, 0.1,\n                             30, 0, 12, 0.5,\n                             0.5, 1.0,\n                             0.5, 1.0,\n                             0xffffff, 0xffffff,\n                             0.7, 10,\n                             true, true,\n                             1000, 6 );\n\n    m_Exhaust->m_parent_rotation_ptr = &m_Rotation;\n    m_Exhaust->m_parent_x_ptr = &(m_Position.x);\n    m_Exhaust->m_parent_y_ptr = &(m_Position.y);\n    m_Exhaust->m_x_adjustment = 10;\n    m_Exhaust->m_y_adjustment = 10;\n    m_Exhaust->m_Active = false;\n\n    m_Explode = new Emitter((char*)\"/sprites/Explode.png\", 100,\n                             0, 360,\n                             1000, 0.3, false,\n                             20.0, 40.0,\n                             10, 0, 0, 5,\n                             1.0, 2.0,\n                             1.0, 2.0,\n                             0xffffff, 0xffffff,\n                             0.0, 10,\n                             false, false,\n                             800, 8 );\n\n    m_Explode->m_parent_rotation_ptr = &m_Rotation;\n    m_Explode->m_parent_x_ptr = &(m_Position.x);\n    m_Explode->m_parent_y_ptr = &(m_Position.y);\n    m_Explode->m_Active = false;\n\n    m_Direction.y = 1.0;\n\n    m_Active = true;\n m_Mass = 50.0;\n}\n```", "```cpp\nm_Mass = 50.0;\n```", "```cpp\nvoid Ship::Shoot() {\n    Projectile* projectile;\n    if( current_time - m_LastLaunchTime >= c_MinLaunchTime ) {\n        m_LastLaunchTime = current_time;\n        projectile = projectile_pool->GetFreeProjectile();\n        if( projectile != NULL ) {\n            projectile->Launch( m_Position, m_Direction );\n            player_laser_snd->Play();\n            m_Velocity -= m_Direction * (projectile->c_Velocity * projectile->m_Mass / \n                                                                              m_Mass);\n            CapVelocity();\n        }\n    }\n}\n```", "```cpp\nm_Velocity -= m_Direction * (projectile->c_Velocity * projectile->m_Mass / m_Mass);\nCapVelocity();\n```", "```cpp\nem++ asteroid.cpp audio.cpp camera.cpp collider.cpp emitter.cpp enemy_ship.cpp finite_state_machine.cpp locator.cpp main.cpp particle.cpp player_ship.cpp projectile_pool.cpp projectile.cpp range.cpp render_manager.cpp shield.cpp ship.cpp star.cpp vector.cpp -o physics.html --preload-file audio --preload-file sprites -std=c++17 -s USE_WEBGL2=1 -s USE_SDL=2 -s USE_SDL_IMAGE=2 -s SDL2_IMAGE_FORMATS=[\"png\"] -s USE_SDL_IMAGE=2 -s SDL2_IMAGE_FORMATS=[\"png\"] \n```"]