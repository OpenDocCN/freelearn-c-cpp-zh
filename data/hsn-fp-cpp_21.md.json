["```cpp\nint square(const int value)\n```", "```cpp\nint square(const int& value)\n```", "```cpp\nint square(int* value)\n```", "```cpp\nint square(int*& const value)\n```", "```cpp\nint square(const int* value)\n```", "```cpp\nint square(const int&* const value)\n```", "```cpp\nauto zero = [](){return 0;};\n```", "```cpp\nauto concatenate = [](string first, string second){return first + second;};\n```", "```cpp\nauto concatenate = [first](string second){return first + second;};\n```", "```cpp\nauto concatenate = [=](string second){return first + second;};\n```", "```cpp\nauto concatenate = [&first](string second){return first + second;};\n```", "```cpp\nauto concatenate = [&firstValue = as_const(first)](string second){return firstValue + second;};\n```", "```cpp\nauto concatenate = [=](string second){return *pFirst + second;};\n```", "```cpp\nconst string* pFirst = new string(\"Alex\");\nauto concatenate = [=](string second){return *pFirst + second;};\n```", "```cpp\nstring* pFirst = new string(\"Alex\");\nfirst = *pFirst;\nauto concatenate = [=](string second){return first + second;}\n```", "```cpp\nauto concatenate = [&](string second){return *pFirst + second;};\n```", "```cpp\nauto concatenate = [&first = as_const(pFirst)](string second){return *first + second;};\n```", "```cpp\nstring first = *pFirst;\nauto concatenate = [=](string second){return first + second;};\n```", "```cpp\nauto concatenate = [=](){return first + second;};\n```", "```cpp\nauto concatenate = [&](){return first + second;};\n```", "```cpp\nauto concatenate = [&firstValue = as_const(first), &secondValue = as_const(second)](){return firstValue + secondValue;}\n```", "```cpp\nfunction<string()> concatenate = [=](){return first + second;};\n```", "```cpp\nfunction<string()> concatenate = [this](){return first + second;};\n```", "```cpp\nstatic function<string()> concatenate;\n...\nfunction<string()> AClass::concatenate = [](string first, string second){return first + second;};\n```", "```cpp\nauto add = [](const int first, const int second){ return first + second; };\n```", "```cpp\nauto add = [](const int first){ \n    return [first](const int second){\n        return first + second;\n    };\n};\n```", "```cpp\ntemplate <class F, class G>\nauto compose(F f, G g){\n  return [=](auto value){return f(g(value));};\n}\n```"]