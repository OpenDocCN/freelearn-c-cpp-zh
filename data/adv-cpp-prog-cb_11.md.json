["```cpp\n> sudo apt-get install build-essential git cmake \n```", "```cpp\n> sudo apt-get install build-essential git cmake\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter11\n```", "```cpp\n> cmake .\n> make recipe01_examples\n```", "```cpp\n> ./recipe01_example01\n\n> ./recipe01_example02\n\n> ./recipe01_example03\ncorrect answer: The answer is: 42\n\n> ./recipe01_example04\nwrong answer: Not sure\n\n> ./recipe01_example05\ncorrect answer: The answer is: 42\n```", "```cpp\nclass know_it_all\n{\npublic:\n    auto ask_question(const char *question)\n    {\n        (void) question;\n        return answer(\"The answer is: 42\");\n    }\n};\n```", "```cpp\nclass answer\n{\n    std::string m_answer;\n\npublic:\n    answer(std::string str) :\n        m_answer{std::move(str)}\n    { }\n};\n```", "```cpp\nint main(void)\n{\n    know_it_all universe;\n    auto ___ = universe.ask_question(\"What is the meaning of life?\");\n}\n```", "```cpp\nclass answer\n{\n    std::string m_answer;\n\npublic:\n    answer(std::string str) :\n        m_answer{std::move(str)}\n    { }\n\n    static inline auto make_answer(std::string str)\n    { return answer(str); }\n};\n```", "```cpp\ntemplate<factory_t factory = answer::make_answer>\nclass know_it_all\n{\npublic:\n    auto ask_question(const char *question)\n    {\n        (void) question;\n        return factory(\"The answer is: 42\");\n    }\n};\n```", "```cpp\nusing factory_t = answer(*)(std::string str);\n```", "```cpp\nint main(void)\n{\n    know_it_all universe;\n    auto ___ = universe.ask_question(\"What is the meaning of life?\");\n}\n```", "```cpp\nclass expected_answer : public answer\n{\npublic:\n    expected_answer(std::string str) :\n        answer{str}\n    {\n        if (str != \"The answer is: 42\") {\n            std::cerr << \"wrong answer: \" << str << '\\n';\n            exit(1);\n        }\n\n        std::cout << \"correct answer: \" << str << '\\n';\n    }\n\n    static inline answer make_answer(std::string str)\n    { return expected_answer(str); }\n};\n```", "```cpp\nint main(void)\n{\n    know_it_all<expected_answer::make_answer> universe;\n    auto ___ = universe.ask_question(\"What is the meaning of life?\");\n}\n```", "```cpp\ntemplate<factory_t factory = answer::make_answer>\nclass know_it_all\n{\npublic:\n    auto ask_question(const char *question)\n    {\n        (void) question;\n        return factory(\"Not sure\");\n    }\n};\n```", "```cpp\nint main(void)\n{\n    know_it_all<expected_answer::make_answer> universe;\n    auto ___ = universe.ask_question(\"What is the meaning of life?\");\n}\n```", "```cpp\nclass know_it_all\n{\n    std::function<answer(std::string str)> m_factory;\n\npublic:\n    know_it_all(answer(*f)(std::string str) = answer::make_answer) :\n        m_factory{f}\n    { }\n\n    auto ask_question(const char *question)\n    {\n        (void) question;\n        return m_factory(\"The answer is: 42\");\n    }\n};\n```", "```cpp\nint main(void)\n{\n    know_it_all universe(expected_answer::make_answer);\n    auto ___ = universe.ask_question(\"What is the meaning of life?\");\n}\n```", "```cpp\n> sudo apt-get install build-essential git cmake\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter11\n```", "```cpp\n> cmake .\n> make recipe01_examples\n```", "```cpp\n> ./recipe02_example01\nmemory: 0x4041a0\ni1: 0x4041a0\ni2: 0x4041a4\ni3: 0x4041a8\ni4: 0x4041ac\n\n> ./recipe02_example02\nmemory: 0x4041a0\ni1: 0x4041a0\ni2: 0x4041a4\ni3: 0x4041a0\ni4: 0x4041a4\n\n> ./recipe02_example03\nmemory: 0x4041a0\ni1: 0x4041a0\ni2: 0x4041a4\ni3: 0x4041a8\ni4: 0x4041ac\n\n> ./recipe02_example04\nmemory: 0x4041a0\ni1: 0x4041a0\ni2: 0x4041a4\ni3: 0x4041a8\ni4: 0x4041ac\n```", "```cpp\nuint8_t memory[0x1000] = {};\n```", "```cpp\nclass mm\n{\n    uint8_t *cursor{memory};\n\npublic:\n    template<typename T>\n    T *allocate()\n    {\n        if (cursor + sizeof(T) > memory + 0x1000) {\n            throw std::bad_alloc();\n        }\n\n        auto ptr = new (cursor) T;\n        cursor += sizeof(T);\n\n        return ptr;\n    }\n};\n```", "```cpp\nmm g_mm;\n```", "```cpp\nint main(void)\n{\n    auto i1 = g_mm.allocate<int>();\n    auto i2 = g_mm.allocate<int>();\n    auto i3 = g_mm.allocate<int>();\n    auto i4 = g_mm.allocate<int>();\n\n    std::cout << \"memory: \" << (void *)memory << '\\n';\n    std::cout << \"i1: \" << (void *)i1 << '\\n';\n    std::cout << \"i2: \" << (void *)i2 << '\\n';\n    std::cout << \"i3: \" << (void *)i3 << '\\n';\n    std::cout << \"i4: \" << (void *)i4 << '\\n';\n}\n```", "```cpp\nmm g_mm1;\nmm g_mm2;\n```", "```cpp\nint main(void)\n{\n    auto i1 = g_mm1.allocate<int>();\n    auto i2 = g_mm1.allocate<int>();\n    auto i3 = g_mm2.allocate<int>();\n    auto i4 = g_mm2.allocate<int>();\n\n    std::cout << \"memory: \" << (void *)memory << '\\n';\n    std::cout << \"i1: \" << (void *)i1 << '\\n';\n    std::cout << \"i2: \" << (void *)i2 << '\\n';\n    std::cout << \"i3: \" << (void *)i3 << '\\n';\n    std::cout << \"i4: \" << (void *)i4 << '\\n';\n}\n```", "```cpp\nclass mm\n{\n    uint8_t *cursor{memory};\n    mm() = default;\n```", "```cpp\n    static auto &instance()\n    {\n        static mm s_mm;\n        return s_mm;\n    }\n```", "```cpp\n    mm(const mm &) = delete;\n    mm &operator=(const mm &) = delete;\n    mm(mm &&) = delete;\n    mm &operator=(mm &&) = delete;\n```", "```cpp\nint main(void)\n{\n    auto i1 = mm::instance().allocate<int>();\n    auto i2 = mm::instance().allocate<int>();\n    auto i3 = mm::instance().allocate<int>();\n    auto i4 = mm::instance().allocate<int>();\n\n    std::cout << \"memory: \" << (void *)memory << '\\n';\n    std::cout << \"i1: \" << (void *)i1 << '\\n';\n    std::cout << \"i2: \" << (void *)i2 << '\\n';\n    std::cout << \"i3: \" << (void *)i3 << '\\n';\n    std::cout << \"i4: \" << (void *)i4 << '\\n';\n}\n```", "```cpp\n/home/user/book/chapter11/recipe02.cpp:166:4: error: \u2018constexpr mm::mm()\u2019 is private within this context\n  166 | mm g_mm;\n```", "```cpp\ntemplate<typename T>\nconstexpr T *allocate()\n{\n    return mm::instance().allocate<T>();\n}\n```", "```cpp\nint main(void)\n{\n    auto i1 = allocate<int>();\n    auto i2 = allocate<int>();\n    auto i3 = allocate<int>();\n    auto i4 = allocate<int>();\n\n    std::cout << \"memory: \" << (void *)memory << '\\n';\n    std::cout << \"i1: \" << (void *)i1 << '\\n';\n    std::cout << \"i2: \" << (void *)i2 << '\\n';\n    std::cout << \"i3: \" << (void *)i3 << '\\n';\n    std::cout << \"i4: \" << (void *)i4 << '\\n';\n}\n```", "```cpp\n> sudo apt-get install build-essential git cmake\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter11\n```", "```cpp\n> cmake .\n> make recipe03_examples\n```", "```cpp\n> ./recipe03_example01\nbutton width: 42\n\n> ./recipe03_example02\nbutton1 width: 10\nbutton2 width: 42\n\n> ./recipe03_example03\nbutton width: 74\n\n> ./recipe03_example04\nbutton width: 42\nbutton content width: 4\n```", "```cpp\nclass margin\n{\npublic:\n    int width()\n    {\n        return 32;\n    }\n};\n```", "```cpp\nclass button : public margin\n{\npublic:\n    int width()\n    {\n        return margin::width() + 10;\n    }\n};\n```", "```cpp\nint main()\n{\n    auto b = new button();\n    std::cout << \"button width: \" << b->width() << '\\n';\n}\n```", "```cpp\nclass base\n{\npublic:\n    virtual int width() = 0;\n};\n```", "```cpp\nclass button : public base\n{\npublic:\n    int width() override\n    {\n        return 10;\n    }\n};\n```", "```cpp\nclass decorator : public base\n{\n    std::unique_ptr<base> m_base;\n\npublic:\n    decorator(std::unique_ptr<base> b) :\n        m_base{std::move(b)}\n    { }\n\n    int width()\n    {\n        return m_base->width();\n    }\n};\n```", "```cpp\nclass margin : public decorator\n{\npublic:\n    margin(std::unique_ptr<base> b) :\n        decorator{std::move(b)}\n    { }\n\n    int width()\n    {\n        return decorator::width() + 32;\n    }\n};\n```", "```cpp\nint main()\n{\n    auto button1 = std::make_unique<button>();\n    auto button2 = std::make_unique<margin>(std::make_unique<button>());\n\n    std::cout << \"button1 width: \" << button1->width() << '\\n';\n    std::cout << \"button2 width: \" << button2->width() << '\\n';\n}\n```", "```cpp\nint main()\n{\n    auto b =\n        std::make_unique<margin>(\n            std::make_unique<margin>(\n                std::make_unique<button>()\n            )\n        );\n\n    std::cout << \"button width: \" << b->width() << '\\n';\n}\n```", "```cpp\nclass base\n{\npublic:\n    virtual int width() = 0;\n    virtual int content_width() = 0;\n};\n```", "```cpp\nclass button : public base\n{\npublic:\n    int width() override\n    {\n        return 10;\n    }\n\n    int content_width() override\n    {\n        return width() - 1;\n    }\n};\n```", "```cpp\nclass decorator : public base\n{\n    std::unique_ptr<base> m_base;\n\npublic:\n    decorator(std::unique_ptr<base> b) :\n        m_base{std::move(b)}\n    { }\n\n    int width() override\n    {\n        return m_base->width();\n    }\n\n    int content_width() override\n    {\n        return m_base->content_width();\n    }\n};\n```", "```cpp\nclass margin : public decorator\n{\npublic:\n    margin(std::unique_ptr<base> b) :\n        decorator{std::move(b)}\n    { }\n\n    int width() override\n    {\n        return decorator::width() + 32;\n    }\n\n    int content_width() override\n    {\n        return decorator::content_width();\n    }\n};\n```", "```cpp\nclass padding : public decorator\n{\npublic:\n    padding(std::unique_ptr<base> b) :\n        decorator{std::move(b)}\n    { }\n\n    int width() override\n    {\n        return decorator::width();\n    }\n\n    int content_width() override\n    {\n        return decorator::content_width() - 5;\n    }\n};\n```", "```cpp\nint main()\n{\n    auto b =\n        std::make_unique<margin>(\n            std::make_unique<padding>(\n                std::make_unique<button>()\n            )\n        );\n\n    std::cout << \"button width: \" << b->width() << '\\n';\n    std::cout << \"button content width: \" << b->content_width() << '\\n';\n}\n```", "```cpp\n> sudo apt-get install build-essential git cmake\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter11\n```", "```cpp\n> cmake .\n> make recipe04_examples\n```", "```cpp\n> ./recipe04_example01 \nmom's phone received alarm notification\ndad's phone received alarm notification\n```", "```cpp\nclass observer\n{\npublic:\n    virtual void trigger() = 0;\n};\n```", "```cpp\nclass moms_phone : public observer\n{\npublic:\n    void trigger() override\n    {\n        std::cout << \"mom's phone received alarm notification\\n\";\n    }\n};\n\nclass dads_phone : public observer\n{\npublic:\n    void trigger() override\n    {\n        std::cout << \"dad's phone received alarm notification\\n\";\n    }\n};\n```", "```cpp\nclass alarm\n{\n    std::vector<observer *> m_observers;\n\npublic:\n    void trigger()\n    {\n        for (const auto &o : m_observers) {\n            o->trigger();\n        }\n    }\n\n    void add_phone(observer *o)\n    {\n        m_observers.push_back(o);\n    }\n};\n```", "```cpp\nint main(void)\n{\n    alarm a;\n    moms_phone mp;\n    dads_phone dp;\n\n    a.add_phone(&mp);\n    a.add_phone(&dp);\n\n    a.trigger();\n}\n```", "```cpp\n> sudo apt-get install build-essential git cmake\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter11\n```", "```cpp\n> cmake .\n> make recipe05_examples\n```", "```cpp\n> ./recipe05_example01\nsubclass1 specific\ncommon\nsubclass2 specific\ncommon\n> ./recipe05_example02\nsubclass1 specific\ncommon\nsubclass2 specific\ncommon\n```", "```cpp\nclass base\n{\npublic:\n    virtual void foo() = 0;\n\n    void common()\n    {\n        std::cout << \"common\\n\";\n    }\n};\n```", "```cpp\nclass subclass1 : public base\n{\npublic:\n    void foo() override\n    {\n        std::cout << \"subclass1 specific\\n\";\n    }\n};\n\nclass subclass2 : public base\n{\npublic:\n    void foo() override\n    {\n        std::cout << \"subclass2 specific\\n\";\n    }\n};\n```", "```cpp\nint main(void)\n{\n    subclass1 s1;\n    subclass2 s2;\n\n    base *b1 = &s1;\n    base *b2 = &s2;\n\n    b1->foo();\n    b1->common();\n\n    b2->foo();\n    b2->common();\n}\n```", "```cpp\ntemplate<typename T>\nclass base\n{\npublic:\n    void foo()\n    { static_cast<T *>(this)->foo(); }\n\n    void common()\n    {\n        std::cout << \"common\\n\";\n    }\n};\n```", "```cpp\nclass subclass1 : public base<subclass1>\n{\npublic:\n    void foo()\n    {\n        std::cout << \"subclass1 specific\\n\";\n    }\n};\n\nclass subclass2 : public base<subclass2>\n{\npublic:\n    void foo()\n    {\n        std::cout << \"subclass2 specific\\n\";\n    }\n};\n```", "```cpp\ntemplate<typename T>\nvoid test(base<T> b)\n{\n    b.foo();\n    b.common();\n}\n```", "```cpp\nint main(void)\n{\n    subclass1 c1;\n    subclass2 c2;\n\n    test(c1);\n    test(c2);\n}\n```"]