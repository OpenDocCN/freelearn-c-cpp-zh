["```cpp\n#include <iostream>\nusing namespace std;\n\nclass MyClass {\n      public:\n           void someMethod() {\n\n                int *ptr = new int();\n                *ptr = 100;\n                int result = *ptr / 0;  //division by zero error expected\n                delete ptr;\n\n           }\n};\n\nint main ( ) {\n\n    MyClass objMyClass;\n    objMyClass.someMethod();\n\n    return 0;\n\n}\n```", "```cpp\ng++ main.cpp -g -std=c++17\n```", "```cpp\nmain.cpp: In member function \u2018void MyClass::someMethod()\u2019:\nmain.cpp:12:21: warning: division by zero [-Wdiv-by-zero]\n int result = *ptr / 0;\n```", "```cpp\n./a.out\n[1] 31674 floating point exception (core dumped) ./a.out\n```", "```cpp\nvalgrind --leak-check=full --show-leak-kinds=all ./a.out\n\n==32857== Memcheck, a memory error detector\n==32857== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\n==32857== Using Valgrind-3.12.0 and LibVEX; rerun with -h for copyright info\n==32857== Command: ./a.out\n==32857== \n==32857== \n==32857== Process terminating with default action of signal 8 (SIGFPE)\n==32857== Integer divide by zero at address 0x802D82B86\n==32857== at 0x10896A: MyClass::someMethod() (main.cpp:12)\n==32857== by 0x1088C2: main (main.cpp:24)\n==32857== \n==32857== HEAP SUMMARY:\n==32857== in use at exit: 4 bytes in 1 blocks\n==32857== total heap usage: 2 allocs, 1 frees, 72,708 bytes allocated\n==32857== \n==32857== 4 bytes in 1 blocks are still reachable in loss record 1 of 1\n==32857== at 0x4C2E19F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\n==32857== by 0x108951: MyClass::someMethod() (main.cpp:8)\n==32857== by 0x1088C2: main (main.cpp:24)\n==32857== \n==32857== LEAK SUMMARY:\n==32857== definitely lost: 0 bytes in 0 blocks\n==32857== indirectly lost: 0 bytes in 0 blocks\n==32857== possibly lost: 0 bytes in 0 blocks\n==32857== still reachable: 4 bytes in 1 blocks\n==32857== suppressed: 0 bytes in 0 blocks\n==32857== \n==32857== For counts of detected and suppressed errors, rerun with: -v\n==32857== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n[1] 32857 floating point exception (core dumped) valgrind --leak-check=full --show-leak-kinds=all ./a.out\n```", "```cpp\n int result = *ptr / 0; //division by zero error expected \n```", "```cpp\n delete ptr;\n```", "```cpp\n#include <iostream>\n#include <string>\n#include <memory>\n#include <sstream>\nusing namespace std;\n\nclass MyClass {\n      private:\n           static int count;\n           string name;\n      public:\n           MyClass() {\n                 ostringstream stringStream(ostringstream::ate);\n                 stringStream << \"Object\";\n                 stringStream << ++count;\n                 name = stringStream.str();\n                 cout << \"nMyClass Default constructor - \" << name << endl;\n           }\n           ~MyClass() {\n                 cout << \"nMyClass destructor - \" << name << endl;\n           }\n\n           MyClass ( const MyClass &objectBeingCopied ) {\n                 cout << \"nMyClass copy constructor\" << endl;\n           }\n\n           MyClass& operator = ( const MyClass &objectBeingAssigned ) {\n                 cout << \"nMyClass assignment operator\" << endl;\n           }\n\n           void sayHello( ) {\n                cout << \"Hello from MyClass \" << name << endl;\n           }\n};\n\nint MyClass::count = 0;\n\nint main ( ) {\n\n   auto_ptr<MyClass> ptr1( new MyClass() );\n   auto_ptr<MyClass> ptr2( new MyClass() );\n\n   return 0;\n\n}\n```", "```cpp\ng++ main.cpp -std=c++17\n\nmain.cpp: In function \u2018int main()\u2019:\nmain.cpp:40:2: warning: \u2018template<class> class std::auto_ptr\u2019 is deprecated [-Wdeprecated-declarations]\n auto_ptr<MyClass> ptr1( new MyClass() );\n\nIn file included from /usr/include/c++/6/memory:81:0,\n from main.cpp:3:\n/usr/include/c++/6/bits/unique_ptr.h:49:28: note: declared here\n template<typename> class auto_ptr;\n\nmain.cpp:41:2: warning: \u2018template<class> class std::auto_ptr\u2019 is deprecated [-Wdeprecated-declarations]\n auto_ptr<MyClass> ptr2( new MyClass() );\n\nIn file included from /usr/include/c++/6/memory:81:0,\n from main.cpp:3:\n/usr/include/c++/6/bits/unique_ptr.h:49:28: note: declared here\n template<typename> class auto_ptr;\n```", "```cpp\ng++ main.cpp -Wno-deprecated\n\n./a.out\n\nMyClass Default constructor - Object1\n\nMyClass Default constructor - Object2\n\nMyClass destructor - Object2\n\nMyClass destructor - Object1 \n```", "```cpp\n//Definitions removed here to keep it simple \nclass MyClass {\npublic:\n      MyClass() { }  //Default constructor\n      ~MyClass() { } //Destructor \n      MyClass ( const MyClass &objectBeingCopied ) {} //Copy Constructor \n      MyClass& operator = ( const MyClass &objectBeingAssigned ) { } //Assignment operator\n      void sayHello();\n}; \n```", "```cpp\nint main ( ) {\n\n   auto_ptr<MyClass> ptr1( new MyClass() );\n   auto_ptr<MyClass> ptr2( new MyClass() );\n\n   return 0;\n\n}\n```", "```cpp\nint main ( ) {\n\n    auto_ptr<MyClass> ptr1( new MyClass() );\n    auto_ptr<MyClass> ptr2( new MyClass() );\n\n    ptr1->sayHello();\n    ptr2->sayHello();\n\n    //At this point the below stuffs happen\n    //1\\. ptr2 smart pointer has given up ownership of MyClass Object 2\n    //2\\. MyClass Object 2 will be destructed as ptr2 has given up its \n    //   ownership on Object 2\n    //3\\. Ownership of Object 1 will be transferred to ptr2\n    ptr2 = ptr1;\n\n    //The line below if uncommented will result in core dump as ptr1 \n    //has given up its ownership on Object 1 and the ownership of \n    //Object 1 is transferred to ptr2.\n    // ptr1->sayHello();\n\n    ptr2->sayHello();\n\n    return 0;\n\n}\n```", "```cpp\n auto_ptr<MyClass> ptr1( new MyClass() );\n auto_ptr<MyClass> ptr2( new MyClass() );\n```", "```cpp\n ptr1->sayHello();\n ptr2->sayHello();\n```", "```cpp\nptr2 = ptr1;\n```", "```cpp\n// ptr1->sayHello();\n```", "```cpp\nptr2->sayHello();\nreturn 0;\n```", "```cpp\n#include <iostream>\n#include <string>\n#include <memory>\n#include <sstream>\nusing namespace std;\n\nclass MyClass {\n      private:\n          static int count;\n          string name;\n\n      public:\n          MyClass() {\n                ostringstream stringStream(ostringstream::ate);\n                stringStream << \"Object\";\n                stringStream << ++count;\n                name = stringStream.str();\n                cout << \"nMyClass Default constructor - \" << name << endl;\n          }\n\n          ~MyClass() {\n                cout << \"nMyClass destructor - \" << name << endl;\n          }\n\n          MyClass ( const MyClass &objectBeingCopied ) {\n                cout << \"nMyClass copy constructor\" << endl;\n          }\n\n          MyClass& operator = ( const MyClass &objectBeingAssigned ) {\n                cout << \"nMyClass assignment operator\" << endl;\n          }\n\n          void sayHello( ) {\n                cout << \"nHello from MyClass\" << endl;\n          }\n\n};\n\nint MyClass::count = 0;\n\nint main ( ) {\n\n unique_ptr<MyClass> ptr1( new MyClass() );\n unique_ptr<MyClass> ptr2( new MyClass() );\n\n ptr1->sayHello();\n ptr2->sayHello();\n\n //At this point the below stuffs happen\n //1\\. ptr2 smart pointer has given up ownership of MyClass Object 2\n //2\\. MyClass Object 2 will be destructed as ptr2 has given up its \n // ownership on Object 2\n //3\\. Ownership of Object 1 will be transferred to ptr2\n ptr2 = move( ptr1 );\n\n //The line below if uncommented will result in core dump as ptr1 \n //has given up its ownership on Object 1 and the ownership of \n //Object 1 is transferred to ptr2.\n // ptr1->sayHello();\n\n ptr2->sayHello();\n\n return 0;\n}\n```", "```cpp\ng++ main.cpp -std=c++17\n\n./a.out\n\nMyClass Default constructor - Object1\n\nMyClass Default constructor - Object2\n\nMyClass destructor - Object2\n\nMyClass destructor - Object1 \n```", "```cpp\n unique_ptr<MyClass> ptr1( new MyClass() );\n unique_ptr<MyClass> ptr2( new MyClass() );\n```", "```cpp\n ptr1->sayHello();\n ptr2->sayHello();\n```", "```cpp\nptr2 = std::move(ptr1);\n```", "```cpp\n// ptr1->sayHello();\n```", "```cpp\nptr2->sayHello();\nreturn 0;\n```", "```cpp\n#include <iostream>\n#include <string>\n#include <memory>\n#include <sstream>\nusing namespace std;\n\nclass MyClass {\n  private:\n    static int count;\n    string name;\n  public:\n    MyClass() {\n      ostringstream stringStream(ostringstream::ate);\n      stringStream << \"Object\";\n      stringStream << ++count;\n\n      name = stringStream.str();\n\n      cout << \"nMyClass Default constructor - \" << name << endl;\n    }\n\n    ~MyClass() {\n      cout << \"nMyClass destructor - \" << name << endl;\n    }\n\n    MyClass ( const MyClass &objectBeingCopied ) {\n      cout << \"nMyClass copy constructor\" << endl;\n    }\n\n    MyClass& operator = ( const MyClass &objectBeingAssigned ) {\n      cout << \"nMyClass assignment operator\" << endl;\n    }\n\n    void sayHello() {\n      cout << \"Hello from MyClass \" << name << endl;\n    }\n\n};\n\nint MyClass::count = 0;\n\nint main ( ) {\n\n  shared_ptr<MyClass> ptr1( new MyClass() );\n  ptr1->sayHello();\n  cout << \"nUse count is \" << ptr1.use_count() << endl;\n\n  {\n      shared_ptr<MyClass> ptr2( ptr1 );\n      ptr2->sayHello();\n      cout << \"nUse count is \" << ptr2.use_count() << endl;\n  }\n\n  shared_ptr<MyClass> ptr3 = ptr1;\n  ptr3->sayHello();\n  cout << \"nUse count is \" << ptr3.use_count() << endl;\n\n  return 0;\n}\n```", "```cpp\nMyClass Default constructor - Object1\nHello from MyClass Object1\nUse count is 1\n\nHello from MyClass Object1\nUse count is 2\n\nNumber of smart pointers referring to MyClass object after ptr2 is destroyed is 1\n\nHello from MyClass Object1\nUse count is 2\n\nMyClass destructor - Object1\n```", "```cpp\n shared_ptr<MyClass> ptr1( new MyClass() );\n ptr1->sayHello();\n cout << \"nNumber of smart pointers referring to MyClass object is \"\n      << ptr1->use_count() << endl;\n```", "```cpp\n { \n      shared_ptr<MyClass> ptr2( ptr1 );\n      ptr2->sayHello();\n      cout << \"nNumber of smart pointers referring to MyClass object is \"\n           << ptr2->use_count() << endl;\n }\n```", "```cpp\n cout << \"nNumber of smart pointers referring to MyClass object after ptr2 is destroyed is \"\n << ptr1->use_count() << endl; \n```", "```cpp\nshared_ptr<MyClass> ptr3 = ptr2;\nptr3->sayHello();\ncout << \"nNumber of smart pointers referring to MyClass object is \"\n     << ptr2->use_count() << endl;\n```", "```cpp\n#include <iostream>\n#include <string>\n#include <memory>\n#include <sstream>\nusing namespace std;\n\nclass C;\n\nclass A {\n      private:\n           shared_ptr<C> ptr;\n      public:\n           A() {\n                 cout << \"nA constructor\" << endl;\n           }\n\n           ~A() {\n                 cout << \"nA destructor\" << endl;\n           }\n\n           void setObject ( shared_ptr<C> ptr ) {\n                this->ptr = ptr;\n           }\n};\n\nclass B {\n      private:\n           shared_ptr<C> ptr;\n      public:\n           B() {\n                 cout << \"nB constructor\" << endl;\n           }\n\n           ~B() {\n                 cout << \"nB destructor\" << endl;\n           }\n\n           void setObject ( shared_ptr<C> ptr ) {\n                this->ptr = ptr;\n           }\n};\n\nclass C {\n      private:\n           shared_ptr<A> ptr1;\n           shared_ptr<B> ptr2;\n      public:\n           C(shared_ptr<A> ptr1, shared_ptr<B> ptr2) {\n                   cout << \"nC constructor\" << endl;\n                   this->ptr1 = ptr1;\n                   this->ptr2 = ptr2;\n           }\n\n           ~C() {\n                   cout << \"nC destructor\" << endl;\n           }\n};\n\nint main ( ) {\n                shared_ptr<A> a( new A() );\n                shared_ptr<B> b( new B() );\n                shared_ptr<C> c( new C( a, b ) );\n\n                a->setObject ( shared_ptr<C>( c ) );\n                b->setObject ( shared_ptr<C>( c ) );\n\n                return 0;\n}\n```", "```cpp\ng++ problem.cpp -std=c++17\n\n./a.out\n\nA constructor\n\nB constructor\n\nC constructor\n```", "```cpp\n#include <iostream>\n#include <string>\n#include <memory>\n#include <sstream>\nusing namespace std;\n\nclass C;\n\nclass A {\n      private:\n weak_ptr<C> ptr;\n      public:\n           A() {\n                  cout << \"nA constructor\" << endl;\n           }\n\n           ~A() {\n                  cout << \"nA destructor\" << endl;\n           }\n\n           void setObject ( weak_ptr<C> ptr ) {\n                  this->ptr = ptr;\n           }\n};\n\nclass B {\n      private:\n weak_ptr<C> ptr;\n      public:\n           B() {\n               cout << \"nB constructor\" << endl;\n           }\n\n           ~B() {\n               cout << \"nB destructor\" << endl;\n           }\n\n           void setObject ( weak_ptr<C> ptr ) {\n                this->ptr = ptr;\n           }\n};\n\nclass C {\n      private:\n           shared_ptr<A> ptr1;\n           shared_ptr<B> ptr2;\n      public:\n           C(shared_ptr<A> ptr1, shared_ptr<B> ptr2) {\n                   cout << \"nC constructor\" << endl;\n                   this->ptr1 = ptr1;\n                   this->ptr2 = ptr2;\n           }\n\n           ~C() {\n                   cout << \"nC destructor\" << endl;\n           }\n};\n\nint main ( ) {\n         shared_ptr<A> a( new A() );\n         shared_ptr<B> b( new B() );\n         shared_ptr<C> c( new C( a, b ) );\n\n         a->setObject ( weak_ptr<C>( c ) );\n         b->setObject ( weak_ptr<C>( c ) );\n\n         return 0;\n}\n```", "```cpp\ng++ solution.cpp -std=c++17\n\n./a.out\n\nA constructor\n\nB constructor\n\nC constructor\n\nC destructor\n\nB destructor\n\nA destructor\n```"]