- en: Chapter 2. States and Animations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。状态和动画
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Property animation in Qt
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Qt中的属性动画
- en: Using easing curves to control property animation
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用缓动曲线控制属性动画
- en: Creating the animation group
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建动画组
- en: Creating the nested animation group
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建嵌套动画组
- en: State machine in Qt
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Qt中的状态机
- en: States, transitions, and animations in QML
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: QML中的状态、转换和动画
- en: Animation widget properties using animators
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用动画器动画小部件属性
- en: Sprite animation
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 精灵动画
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Qt provides an easy way to animate widgets or any other objects that inherit
    the `QObject` class, through its powerful animation framework. The animation can
    be used either on its own or used together with the state machine framework, which
    allows different animations to be played based on the current active state of
    the widget. Qt's animation framework also supports grouped animation, which allows
    you to move more than one graphics item simultaneously, or move them in sequence
    one after the other.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Qt提供了一种简单的方法来为继承`QObject`类的小部件或其他对象进行动画处理，通过其强大的动画框架。动画可以单独使用，也可以与状态机框架一起使用，该框架允许根据小部件的当前活动状态播放不同的动画。Qt的动画框架还支持分组动画，允许您同时移动多个图形项，或者按顺序移动它们。
- en: Property animation in Qt
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Qt中的属性动画
- en: In this example, we will learn how to animate our **Graphical User Interface**
    (**GUI**) elements using Qt's property animation class, part of its powerful animation
    framework, which allows us to create fluid looking animation with minimal effort.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将学习如何使用Qt的属性动画类来为我们的**图形用户界面**（**GUI**）元素添加动画效果，这是其强大的动画框架的一部分，它允许我们以最小的努力创建流畅的动画效果。
- en: How to do it…
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到…
- en: First, let's create a new Qt Widgets Application project. After that, open up
    `mainwindow.ui` with Qt Designer and place a button on the main window, as shown
    here:![How to do it…](img/B02820_02_01.jpg)
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们创建一个新的Qt小部件应用程序项目。之后，用Qt Designer打开`mainwindow.ui`并在主窗口上放置一个按钮，如下所示：![如何做到…](img/B02820_02_01.jpg)
- en: 'Next, open up `mainwindow.cpp` and add the following line of code at the beginning
    of the source code:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开`mainwindow.cpp`并在源代码开头添加以下行代码：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After that, open up `mainwindow.cpp` and add the following code to the constructor:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，打开`mainwindow.cpp`并在构造函数中添加以下代码：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works...
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: One of the more common methods to animate a GUI element is through the property
    animation class provided by Qt, known as the `QPropertyAnimation` class. This
    class is part of the animation framework and it makes use of the timer system
    in Qt to change the properties of a GUI element over a given duration.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 通过Qt提供的属性动画类`QPropertyAnimation`类是通过Qt提供的一种常见方法来为GUI元素添加动画效果。这个类是动画框架的一部分，它利用Qt的定时器系统在给定的持续时间内更改GUI元素的属性。
- en: What we are trying to accomplish here is to animate the button from one position
    to another, while at the same time we also enlarge the button size along the way.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里要做的是将按钮从一个位置动画到另一个位置，同时也随着动画过程放大按钮的大小。
- en: By including the `QPropertyAnimation` header in our source code in Step 2, we
    will be able to access the `QPropertyAnimation` class provided by Qt and make
    use of its functionalities.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在步骤2中在源代码中包含`QPropertyAnimation`头文件，我们将能够访问Qt提供的`QPropertyAnimation`类并利用其功能。
- en: The code in Step 3 basically creates a new property animation and applies it
    to the push button we just created in Qt Designer. We specifically request the
    property animation class changes the `geometry` properties of the push button
    and sets its duration to 3,000 milliseconds (3 seconds).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤3中的代码基本上创建了一个新的属性动画，并将其应用于我们刚刚在Qt Designer中创建的按钮。我们明确要求属性动画类更改按钮的`geometry`属性，并将其持续时间设置为3,000毫秒（3秒）。
- en: 'Then, the start value of the animation is set to the initial geometry of the
    push button, because obviously we want it to start from where we initially place
    the button in Qt Designer. The end value is then set to what we want it to become;
    in this case we will move the button to a new position at x: `200`, y: `200` while
    changing its size to width: `100`, height: `50` along the way.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，动画的起始值设置为按钮的初始几何形状，因为显然我们希望它从我们最初在Qt Designer中放置按钮的位置开始。然后，结束值设置为我们希望它变成的值；在这种情况下，我们将按钮移动到x:`200`，y:`200`的新位置，同时沿途改变其大小为宽度:`100`，高度:`50`。
- en: After that, `call animation->start()` to start the animation.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，调用`animation->start()`来启动动画。
- en: Compile and run the project and now you should see the button start to move
    slowly across the main window while expanding in size a bit at a time, until it
    reaches its destination. You can change the animation duration and the target
    position and scale by altering the values in the preceding code. It's really that
    simple to animate a GUI element using Qt's property animation system!
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 编译并运行项目，现在您应该看到按钮开始在主窗口上缓慢移动，同时逐渐扩大大小，直到达到目的地。您可以通过修改前面代码中的值来更改动画持续时间和目标位置和比例。使用Qt的属性动画系统来为GUI元素添加动画效果真的是如此简单！
- en: There's more…
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Qt provides us with several different sub-systems to create animations for
    our GUI, including timer, timeline, animation framework, state machine framework,
    and graphics view framework:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Qt为我们提供了几种不同的子系统来为我们的GUI创建动画，包括定时器、时间轴、动画框架、状态机框架和图形视图框架：
- en: '**Timer**: Qt provides us with repetitive and single-shot timers. When the
    timeout value is reached, an event callback function will be triggered through
    Qt''s signal-and-slot mechanism. You can make use of a timer to change the properties
    (color, position, scale, and so on) of your GUI element within a given interval,
    in order to create an animation.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定时器**：Qt为我们提供了重复和单次定时器。当达到超时值时，将通过Qt的信号和槽机制触发事件回调函数。您可以利用定时器在给定的时间间隔内更改GUI元素的属性（颜色、位置、比例等），以创建动画效果。'
- en: '**Timeline**: Timeline calls a slot periodically to animate a GUI element.
    It is quite similar to a repetitive timer, but instead of doing the same thing
    all the time when the slot is triggered, timeline provides a value to the slot
    to indicate its current frame index, so that you can do different things (such
    as offset to a different space of the sprite sheet) based on the given value.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**时间轴**：时间轴定期调用插槽以对GUI元素进行动画处理。它与重复定时器非常相似，但是当触发插槽时，时间轴会向插槽提供一个值来指示当前帧索引，以便您可以根据给定的值执行不同的操作（例如偏移到精灵表的不同位置）。'
- en: '**Animation framework**: The animation framework makes animating a GUI element
    easy by allowing its properties to be animated. The animations are controlled
    by using easing curves. Easing curves describe a function that controls what the
    speed of the animation should be, resulting in different acceleration and deceleration
    patterns. The types of easing curve supported by Qt include: linear, quadratic,
    cubic, quartic, sine, exponential, circular, and elastic.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动画框架**：动画框架通过允许对GUI元素的属性进行动画处理，使动画变得简单。动画是通过使用缓动曲线来控制的。缓动曲线描述了控制动画速度的函数，从而产生不同的加速和减速模式。Qt支持的缓动曲线类型包括：线性、二次、三次、四次、正弦、指数、圆形和弹性。'
- en: '**State machine framework**: Qt provides us with classes for creating and executing
    state graphs, which allow each GUI element to move from one state to another when
    triggered by signals. The state graph in the state machine framework is hierarchical,
    which means every state can also be nested inside of other states.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**状态机框架**：Qt为我们提供了用于创建和执行状态图的类，允许每个GUI元素在触发信号时从一个状态移动到另一个状态。状态机框架中的状态图是分层的，这意味着每个状态也可以嵌套在其他状态内部。'
- en: '**Graphics view framework**: The graphics view framework is a powerful graphics
    engine for visualizing and interacting with a large number of custom-made 2D graphical
    items. You can use the graphics view framework to draw your GUI and have them
    animated in a totally manual way if you are an experienced programmer.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**图形视图框架**：图形视图框架是一个强大的图形引擎，用于可视化和与大量自定义的2D图形项进行交互。如果您是一名经验丰富的程序员，您可以使用图形视图框架手动绘制GUI，并对其进行动画处理。'
- en: By making use of all the powerful features mentioned here, we're able to create
    an intuitive and modern GUI with ease. In this chapter, we will look into the
    practical approaches to animating GUI elements using Qt.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用这里提到的所有强大功能，我们能够轻松创建直观现代的GUI。在本章中，我们将探讨使用Qt对GUI元素进行动画处理的实际方法。
- en: Using easing curves to control property animation
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用缓动曲线控制属性动画
- en: In this example, we will learn how to make our animation more interesting by
    utilizing easing curves. We will still use the previous source code, which uses
    the property animation to animate a push button.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将学习如何通过利用缓动曲线使我们的动画更加有趣。我们仍然会使用先前的源代码，该源代码使用属性动画来对推按钮进行动画处理。
- en: How to do it…
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Define an easing curve and add it to the property animation before calling
    the `start()` function:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在调用`start()`函数之前，定义一个缓动曲线并将其添加到属性动画中：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Call the `setLoopCount()` function to set how many loops you want it to repeat
    for:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`setLoopCount()`函数来设置要重复多少次循环：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Call `setAmplitude()`, `setOvershoot()`, and `setPeriod()` before applying
    the easing curve to the animation:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用缓动曲线到动画之前，调用`setAmplitude()`、`setOvershoot()`和`setPeriod()`：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How it works...
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In order to let an easing curve control the animation, all you need to do is
    to define an easing curve and add it to the property animation before calling
    the `start()` function. You can also try several other types of easing curve and
    see which one suits you best. Here is an example:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让缓动曲线控制动画，您只需要在调用`start()`函数之前定义一个缓动曲线并将其添加到属性动画中。您还可以尝试几种其他类型的缓动曲线，看看哪一种最适合您。以下是一个示例：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If you want the animation to loop after it has finished playing, you can call
    the `setLoopCount()` function to set how many loops you want it to repeat for,
    or set the value to `-1` for an infinite loop:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望动画在播放完成后循环播放，可以调用`setLoopCount()`函数来设置要重复多少次循环，或者将值设置为`-1`以进行无限循环：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'There are several parameters that you can set to refine the easing curve before
    applying it to the property animation. These parameters include amplitude, overshoot,
    and period:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在将缓动曲线应用到属性动画之前，您可以设置几个参数来完善缓动曲线。这些参数包括振幅、超调和周期：
- en: '**Amplitude**: The higher the amplitude, the higher the bounce or elastic spring
    effect that will be applied to the animation.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**振幅**：振幅越高，动画的弹跳或弹簧效果就越强。'
- en: '**Overshoot**: Some curve functions will produce an overshoot (exceeding its
    final value) curve due to damping effect. By adjusting the overshoot value, we
    are able to increase or decrease this effect.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**超调**：由于阻尼效应，某些曲线函数将产生超调（超过其最终值）曲线。通过调整超调值，我们能够增加或减少这种效果。'
- en: '**Period**: Setting a small period value will give a high frequency to the
    curve. A large period will give it a small frequency.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**周期**：设置较小的周期值将使曲线具有较高的频率。较大的周期将使其具有较低的频率。'
- en: These parameters, however, are not applicable to all curve types. Please refer
    to the Qt documentation to see which parameter is applicable to which curve type.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这些参数并不适用于所有曲线类型。请参考Qt文档，了解哪个参数适用于哪种曲线类型。
- en: There's more…
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'While the property animation works perfectly fine, sometimes it feels a little
    boring to look at a GUI element animated at a constant speed. We can make the
    animation look more interesting by adding an easing curve to control the motion.
    There are many types of easing curve that you can use in Qt, and here are some
    of them:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然属性动画运行良好，但有时看到GUI元素以恒定速度进行动画处理会感到有些无聊。我们可以通过添加缓动曲线来控制运动使动画看起来更有趣。在Qt中有许多类型的缓动曲线可供使用，以下是其中一些：
- en: '![There''s more…](img/B02820_02_02.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/B02820_02_02.jpg)'
- en: As you can see from the preceding diagram, each easing curve produces a different
    ease-in and ease-out effect.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您从上图中看到的，每个缓动曲线产生不同的缓入和缓出效果。
- en: Note
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For the full list of easing curves available in Qt, please refer to the Qt documentation
    at [http://doc.qt.io/qt-5/qeasingcurve.html#Type-enum](http://doc.qt.io/qt-5/qeasingcurve.html#Type-enum).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Qt中可用的缓动曲线的完整列表，请参阅Qt文档[http://doc.qt.io/qt-5/qeasingcurve.html#Type-enum](http://doc.qt.io/qt-5/qeasingcurve.html#Type-enum)。
- en: Creating an animation group
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建动画组
- en: In this example, we will learn how to use an animation group to manage the states
    of the animations contained in the group.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将学习如何使用动画组来管理组中包含的动画的状态。
- en: How to do it…
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作方法...
- en: We will use the previous example, but this time, we add two more push buttons
    to the main window, like so:![How to do it…](img/B02820_02_03.jpg)
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用之前的例子，但这次，我们将在主窗口中添加两个更多的按钮，如下所示：![操作方法...](img/B02820_02_03.jpg)
- en: 'Next, define the animation for each of the push buttons in the main window''s
    constructor:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在主窗口的构造函数中为每个按钮定义动画：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'After that, create an easing curve and apply the same curve to all three animations:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，创建一个缓动曲线并将相同的曲线应用于所有三个动画：
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Once you have applied the easing curve to all three animations, we will then
    create an animation group and add all three animations to the group:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您将缓动曲线应用于所有三个动画，我们将创建一个动画组并将所有三个动画添加到组中：
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Call the `start()` function from the animation group we just created:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从刚刚创建的动画组中调用`start()`函数：
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How it works...
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Since we are using an animation group now, we no longer call the `start()` function
    from the individual animation, but instead we will be calling the `start()` function
    from the animation group we just created.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们现在使用动画组，我们不再从单独的动画中调用`start()`函数，而是从刚刚创建的动画组中调用`start()`函数。
- en: 'If you compile and run the example now, you will see all three buttons being
    played at the same time. This is because we are using the parallel animation group.
    You can replace it with a sequential animation group and run the example again:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果现在编译并运行示例，您将看到所有三个按钮同时播放。这是因为我们使用了并行动画组。您可以将其替换为顺序动画组并再次运行示例：
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This time, only a single button will play its animation at a time, while the
    other buttons will wait patiently for their turn to come.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，一次只有一个按钮会播放其动画，而其他按钮将耐心等待他们的轮到。
- en: 'The priority is set based on which animation is added to the animation group
    first. You can change the animation sequence by simply rearranging the sequence
    of an animation being added to the group. For example, if we want button 3 to
    start the animation first, followed by button 2, and then button 1, the code will
    look like this:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 优先级是根据首先添加到动画组中的动画来设置的。您可以通过简单地重新排列添加到组中的动画的顺序来更改动画顺序。例如，如果我们希望按钮3首先开始动画，然后是按钮2，然后是按钮1，代码将如下所示：
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Since property animations and animation groups are both inherited from the `QAbstractAnimator`
    class, it means that you can also add an animation group to another animation
    group to form a more complex, nested animation group.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 由于属性动画和动画组都是从`QAbstractAnimator`类继承的，这意味着您也可以将一个动画组添加到另一个动画组中，以形成一个更复杂的嵌套动画组。
- en: There's more…
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Qt allows us to create multiple animations and group them into an animation
    group. A group is usually responsible for managing the state of its animations
    (that is, it decides when to start, stop, resume, and pause them). Currently,
    Qt provides two types of class for animation groups, `QParallelAnimationGroup`
    and `QSequentialAnimationGroup`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Qt允许我们创建多个动画并将它们分组成一个动画组。一个组通常负责管理其动画的状态（即，它决定何时开始、停止、恢复和暂停它们）。目前，Qt提供了两种动画组类，`QParallelAnimationGroup`和`QSequentialAnimationGroup`：
- en: '`QParallelAnimationGroup`: As its name implies, a parallel animation group
    runs all the animations in its group at the same time. The group is deemed finished
    when the longest-lasting animation has finished running.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QParallelAnimationGroup`：顾名思义，并行动画组同时运行其组中的所有动画。当最持久的动画完成运行时，组被视为已完成。'
- en: '`QSequentialAnimationGroup`: A sequential animation group runs its animations
    in sequence, meaning it will only run a single animation at a time, and only play
    the next animation when the current one has finished.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QSequentialAnimationGroup`：顺序动画组按顺序运行其动画，这意味着一次只运行一个动画，并且只有当前动画完成后才会播放下一个动画。'
- en: Creating a nested animation group
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建嵌套动画组
- en: One good example of using a nested animation group is when you have several
    parallel animation groups and you want to play the groups in a sequential order.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 使用嵌套动画组的一个很好的例子是当您有几个并行动画组并且希望按顺序播放这些组时。
- en: How to do it…
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作方法...
- en: We will use the UI from the previous example and add a few more buttons to the
    main window, like so:![How to do it…](img/B02820_02_04.jpg)
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用之前的示例中的UI，并在主窗口中添加几个更多的按钮，如下所示：![操作方法...](img/B02820_02_04.jpg)
- en: 'First, create all the animations for the buttons, then create an easing curve
    and apply it to all the animations:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，为所有按钮创建动画，然后创建一个缓动曲线并将其应用于所有动画：
- en: '[PRE13]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create two animation groups, one for the buttons in the upper column and another
    one for the lower column:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建两个动画组，一个用于上列按钮，另一个用于下列按钮：
- en: '[PRE14]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We will create yet another animation group, which will be used to store the
    two animation groups we created previously:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将创建另一个动画组，用于存储我们之前创建的两个动画组：
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How it works...
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: What we're trying to do here is to play the animation of the buttons in the
    upper column first, followed by the buttons in the lower column.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里要做的是先播放上列按钮的动画，然后是下列按钮的动画。
- en: Since both of the animation groups are parallel animation groups, the buttons
    belonging to the respective groups will be animated at the same time when the
    `start()` function is called.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 由于两个动画组都是并行动画组，当调用`start()`函数时，属于各自组的按钮将同时进行动画。
- en: This time, however, the group is a sequential animation group, which means only
    a single parallel animation group will be played at a time, followed by the other
    when the first one is finished.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，然而，这个组是一个顺序动画组，这意味着一次只有一个并行动画组会被播放，当第一个完成时，另一个会接着播放。
- en: Animation groups are a very handy system that allows us to create very complex
    GUI animations with simple coding. Qt will handle the difficult part for us so
    we don't have to.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 动画组是一个非常方便的系统，它允许我们用简单的编码创建非常复杂的GUI动画。Qt会为我们处理困难的部分，所以我们不必自己处理。
- en: State machines in Qt
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Qt中的状态机
- en: State machines can be used for many purposes, but in this chapter we will only
    cover topics related to animation.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 状态机可以用于许多目的，但在本章中，我们只会涵盖与动画相关的主题。
- en: How to do it…
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: First, we will set up a new user interface for our example program, which looks
    like this:![How to do it…](img/B02820_02_06.jpg)
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将为我们的示例程序设置一个新的用户界面，它看起来像这样：![如何做...](img/B02820_02_06.jpg)
- en: 'Next, we will include some headers in our source code:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将在源代码中包含一些头文件：
- en: '[PRE16]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'After that, in our main window''s constructor, add the following code to create
    a new state machine and two states, which we will be using later:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的主窗口构造函数中，添加以下代码来创建一个新的状态机和两个状态，我们稍后会使用它们：
- en: '[PRE17]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then, we will define what we should do within each state, which in this case
    will be to change the label''s text, as well as the button''s position and size:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将定义在每个状态中应该做什么，这种情况下将是更改标签的文本，以及按钮的位置和大小：
- en: '[PRE18]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Once you are done with that, let''s proceed by adding event transition classes
    to our source code:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，让我们通过向源代码添加事件转换类来继续：
- en: '[PRE19]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Next, add all the states we have just created to the state machine and define
    state 1 as the initial state. Then, call `machine->start()` to start running the
    state machine:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将我们刚刚创建的所有状态添加到状态机中，并将状态1定义为初始状态。然后，调用`machine->start()`来启动状态机运行：
- en: '[PRE20]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: If you run the example program now, you will notice everything works fine, except
    the button is not going through a smooth transition and it simply jumps instantly
    to the position and size we set previously. This is because we have not used a
    property animation to create a smooth transition.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你现在运行示例程序，你会注意到一切都运行正常，除了按钮没有经历平滑的过渡，它只是立即跳到我们之前设置的位置和大小。这是因为我们没有使用属性动画来创建平滑的过渡。
- en: 'Go back to the event transition step and add the following lines of code:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到事件转换步骤，添加以下代码行：
- en: '[PRE21]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'You can also add an easing curve to the animation to make it look more interesting:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以为动画添加一个缓动曲线，使其看起来更有趣：
- en: '[PRE22]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: How it works...
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: There are two push buttons and a label on the main window layout. The button
    at the top-left corner will trigger the state change when pressed, while the label
    at the top-right corner will change its text to show which state we are currently
    in, and the button below will animate according to the current state.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 主窗口布局上有两个按钮和一个标签。左上角的按钮在按下时将触发状态更改，而右上角的标签将更改其文本以显示我们当前处于哪个状态，并且下面的按钮将根据当前状态进行动画。
- en: The `QEventTransition` classes define what will trigger the transition between
    one state and another.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`QEventTransition`类定义了触发一个状态到另一个状态的转换。'
- en: In our case, we want the state to change from state 1 to state 2 when the `ui->changeState`
    button (the one at the upper left) is clicked. After that, we also want to change
    from state 2 back to state 1 when the same button is pressed again. This can be
    achieved by creating another event transition class and setting the target state
    back to state 1\. Then, add these transitions to their respective states.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，当点击`ui->changeState`按钮（左上角的按钮）时，我们希望状态从状态1变为状态2。之后，当再次按下相同的按钮时，我们还希望从状态2变回状态1。这可以通过创建另一个事件转换类并将目标状态设置回状态1来实现。然后，将这些转换添加到它们各自的状态中。
- en: Instead of just assigning the properties directly to the widgets, we tell Qt
    to use the property animation class to smoothly interpolate the properties toward
    the target values. It is that simple!
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们告诉Qt使用属性动画类来平滑地插值属性到目标值，而不是直接将属性直接分配给小部件。就是这么简单！
- en: There is no need to set the start value and end value, because we have already
    called the `assignProperty()` function, which has automatically assigned the end
    value.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 不需要设置起始值和结束值，因为我们已经调用了`assignProperty()`函数，它已经自动分配了结束值。
- en: There's more…
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The state machine framework in Qt provides classes for creating and executing
    state graphs. Qt's event system is used to drive the state machines, where transitions
    between states can be triggered by using signals, then the slots on the other
    end will be invoked by the signals to perform an action, such as playing an animation.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Qt中的状态机框架提供了用于创建和执行状态图的类。Qt的事件系统用于驱动状态机，状态之间的转换可以通过使用信号来触发，然后在另一端的槽将被信号调用来执行一个动作，比如播放一个动画。
- en: 'Once you understand the basics of state machines, you can use them to do other
    things as well. The state graph in the state machine framework is hierarchical.
    Just like the animation group in the previous section, states can also be nested
    inside of other states:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你理解了状态机的基础知识，你也可以用它们来做其他事情。状态机框架中的状态图是分层的。就像前一节中的动画组一样，状态也可以嵌套在其他状态中：
- en: '![There''s more…](img/B02820_02_05.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/B02820_02_05.jpg)'
- en: States, transitions, and animations in QML
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QML中的状态、转换和动画
- en: If you prefer to work with QML instead of C++, Qt also provides similar features
    in Qt Quick that allow you to easily animate a GUI element with the minimum lines
    of code. In this example, we will learn how to achieve this with QML.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你更喜欢使用QML而不是C++，Qt还提供了类似的功能在Qt Quick中，允许你用最少的代码轻松地为GUI元素添加动画。在这个例子中，我们将学习如何用QML实现这一点。
- en: How to do it…
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: First we will create a new **Qt Quick Application** project and set up our user
    interface like so:![How to do it…](img/B02820_02_07.jpg)
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个新的**Qt Quick Application**项目，并设置我们的用户界面如下：![如何做…](img/B02820_02_07.jpg)
- en: 'Here is what my `main.qml` file looks like:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是我的`main.qml`文件的样子：
- en: '[PRE23]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Add the color animation to the `Rectangle` object:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将颜色动画添加到`Rectangle`对象中：
- en: '[PRE24]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Then, add a number animation to the text object:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将数字动画添加到文本对象中：
- en: '[PRE25]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Next, add another number animation to it:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，为其添加另一个数字动画：
- en: '[PRE26]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Define two states, one called the `PRESSED` state and another called the `RELEASED`
    state. Then, set the default state to `RELEASED`:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义两种状态，一种称为`PRESSED`状态，另一种称为`RELEASED`状态。然后，将默认状态设置为`RELEASED`：
- en: '[PRE27]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'After that, create a mouse area within the `Rectangle` object so that we can
    click on it:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，在`Rectangle`对象内创建一个鼠标区域，以便我们可以单击它：
- en: '[PRE28]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Add some transitions to the `Rectangle` object:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给`Rectangle`对象添加一些过渡效果：
- en: '[PRE29]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: How it works...
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The main window consists of a blue rectangle and static text that says `Hello
    World`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 主窗口由一个蓝色矩形和静态文本组成，上面写着“Hello World”。
- en: We want the background color to change from blue to yellow, then to red, and
    back to blue in a loop. This can be easily achieved using the color animation
    type in QML.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望背景颜色在循环中从蓝色变为黄色，然后变为红色，最后再变回蓝色。这可以通过在QML中使用颜色动画类型轻松实现。
- en: What we're doing at Step 3 is basically creating a sequential animation group
    within the `Rectangle` object, then creating three different color animations
    within the group, which will change the color of the object every 1,000 milliseconds
    (1 second). We also set the animations to loop infinitely.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤3中，我们基本上是在`Rectangle`对象内创建了一个顺序动画组，然后在组内创建了三个不同的颜色动画，这些动画将每1000毫秒（1秒）改变对象的颜色。我们还将动画设置为无限循环。
- en: In Step 4, we want to use the number animation to animate the alpha value of
    the static text. We created another sequential animation group within the `Text`
    object and created two number animations to animate the alpha value from 0 to
    1 and back. Then, we set the animations to loop infinitely.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤4中，我们希望使用数字动画来动画化静态文本的alpha值。我们在`Text`对象内创建了另一个顺序动画组，并创建了两个数字动画，以将alpha值从0动画到1，然后再返回。然后，我们将动画设置为无限循环。
- en: Then in Step 5, we rotate the `Hello World` text by adding another number animation
    to it.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在第5步中，我们通过向其添加另一个数字动画来旋转`Hello World`文本。
- en: In Step 6, we wanted to make the `Rectangle` object change from one color to
    another when we click on it. When the mouse is released, the `Rectangle` object
    will change back to its initial color. To achieve that, first we need to define
    the two states, one called the `PRESSED` state and another called the `RELEASED`
    state. Then, we set the default state to `RELEASED`.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在第6步中，我们希望在单击时使`Rectangle`对象从一种颜色变为另一种颜色。当鼠标释放时，`Rectangle`对象将恢复到其初始颜色。为了实现这一点，首先我们需要定义两种状态，一种称为`PRESSED`状态，另一种称为`RELEASED`状态。然后，我们将默认状态设置为`RELEASED`。
- en: Now, when you compile and run the example, the background will instantly change
    color to blue when pressed and change back to red when the mouse is released.
    That works great and we can further enhance it by giving it a little transition
    when switching color. This can be easily achieved by adding transitions to the
    `Rectangle` object.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当您编译并运行示例时，背景在按下时会立即变为蓝色，当释放鼠标时会变回红色。这很好用，我们可以通过给颜色切换时添加一些过渡效果来进一步增强它。这可以通过向`Rectangle`对象添加过渡效果轻松实现。
- en: There's more…
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'In QML, there are eight different types of property animation you can use:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在QML中，有八种不同类型的属性动画可供使用：
- en: '**Anchor animation**: Animates changes in anchor values'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**锚点动画**：动画化锚点值的变化'
- en: '**Color animation**: Animates changes in color values'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**颜色动画**：动画化颜色值的变化'
- en: '**Number animation**: Animates changes in qreal-type values'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数字动画**：动画化qreal类型值的变化'
- en: '**Parent animation**: Animates changes in parent values'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**父动画**：动画化父级值的变化'
- en: '**Path animation**: Animates an item along a path'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径动画**：沿路径动画化项目'
- en: '**Property animation**: Animates changes in property values'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**属性动画**：动画化属性值的变化'
- en: '**Rotation animation**: Animates changes in rotation values'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**旋转动画**：动画化旋转值的变化'
- en: '**Vector3d animation**: Animates changes in QVector3d values'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Vector3d动画**：动画化QVector3d值的变化'
- en: Just like the C++ version, these animations can also be grouped together in
    an animation group to play the animations in sequence or in parallel. You can
    also control the animations using easing curves and determine when to play these
    animations using state machines, just like what we have done in the previous section.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 就像C++版本一样，这些动画也可以在动画组中组合在一起，以便按顺序或并行播放动画。您还可以使用缓动曲线来控制动画，并使用状态机确定何时播放这些动画，就像我们在上一节中所做的那样。
- en: Animating widget properties using animators
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用动画器动画化小部件属性
- en: In this recipe, we will learn how to animate the properties of our GUI widgets
    using the animator feature provided by QML.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将学习如何使用QML提供的动画器功能来动画化GUI小部件的属性。
- en: How to do it…
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Create a rectangle object and add a scale animator to it:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个矩形对象，并为其添加一个比例动画器：
- en: '[PRE30]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Add a rotation animator and set the running value in the parallel animation
    group, but not in any of the individual animators:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个旋转动画器，并将运行值设置为并行动画组中，但不是任何单独的动画器中。
- en: '[PRE31]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Add an easing curve to the scale animator:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为比例动画器添加一个缓动曲线：
- en: '[PRE32]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: How it works...
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The animator type can be used just like any other animation type. We want to
    scale a rectangle from a size of `5` to a size of `1` within 2,000 milliseconds
    (2 seconds).
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 动画器类型可以像任何其他动画类型一样使用。我们希望在2000毫秒（2秒）内将矩形从大小`5`缩放到大小`1`。
- en: We created a blue `Rectangle` object and added a scale animator to it. We set
    the initial value to `5` and the final value to `1`. Then, we set the animation
    duration to `2000` and set the running value to `true` so that it will be played
    when the program starts.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个蓝色的`Rectangle`对象，并为其添加了一个比例动画器。我们将初始值设置为`5`，最终值设置为`1`。然后，我们将动画持续时间设置为`2000`，并将运行值设置为`true`，这样程序启动时就会播放它。
- en: Just like the animation types, animators can also be put into groups (that is,
    parallel animation groups or sequential animation groups). An animation group
    will also be treated as an animator by QtQuick and be run on the scene graph's
    rendering thread whenever possible.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 就像动画类型一样，动画器也可以放入组中（即并行动画组或顺序动画组）。动画组也将被QtQuick视为动画器，并在可能的情况下在场景图的渲染线程上运行。
- en: In Step 2, we want to group two different animators into a parallel animation
    group so that they run together at the same time.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在第2步中，我们想将两个不同的动画器分组到一个并行动画组中，以便它们同时运行。
- en: We will keep the scale animator we have created previously and add another rotation
    animator to rotate the `Rectangle` object. This time, set the running value in
    the parallel animation group, but not in any of the individual animators.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将保留之前创建的缩放动画器，并向`Rectangle`对象添加另一个旋转动画器。这次，在并行动画组中设置运行值，而不是在任何单独的动画器中设置。
- en: Just like the C++ version, QML also supports easing curves and they can be easily
    applied to any of the animations or animator types.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 就像C++版本一样，QML也支持缓动曲线，它们可以轻松应用于任何动画或动画器类型。
- en: There is something called animator in QML, which is similar but different from
    the ordinary animation type. Animator types are a special type of animation that
    operate directly on Qt Quick's scene graph, rather than the QML objects and their
    properties like regular animation types do.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: QML中有一种叫做动画器的东西，它与普通动画类型类似但又不同。动画器类型是一种特殊类型的动画，它直接在Qt Quick的场景图上运行，而不是像常规动画类型那样在QML对象和它们的属性上运行。
- en: The value of the QML property will be updated after the animation has finished.
    However, the property is not updated while the animation is running. The benefits
    of using the animator type is that the performance is slightly better because
    it doesn't run on the UI thread, but operates directly on the scene graph's rendering
    thread.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: QML属性的值将在动画完成后更新。然而，在动画运行时，属性不会被更新。使用动画器类型的好处是性能稍微更好，因为它不在UI线程上运行，而是直接在场景图的渲染线程上运行。
- en: Sprite animation
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 精灵动画
- en: In this example, we will learn how to create sprite animation in QML.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将学习如何在QML中创建精灵动画。
- en: How to do it…
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: First of all, we'll need to add our sprite sheet to Qt's resource system so
    that it can be used in the program. Open up `qml.qrc` and click the **Add** |
    **Add Files** buttons. Select your sprite sheet image and save the resource file
    by pressing *Ctrl* + *S*.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要将精灵表添加到Qt的资源系统中，以便在程序中使用。打开`qml.qrc`，点击**添加** | **添加文件**按钮。选择精灵表图像并按下*Ctrl*
    + *S*保存资源文件。
- en: 'After that, create a new empty window in `main.qml`:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，在`main.qml`中创建一个新的空窗口：
- en: '[PRE33]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Once you''re done with that, we will start creating an `AnimatedSprite` object
    in QML:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，我们将在QML中开始创建一个`AnimatedSprite`对象：
- en: '[PRE34]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Add a mouse area to the window and check for the `onClicked` event:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在窗口中添加一个鼠标区域并检查`onClicked`事件：
- en: '[PRE35]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: If you compile and run the example program now, you will see a little pony running
    in the middle of the window. How fun!![How to do it…](img/B02820_02_08.jpg)
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果现在编译和运行示例程序，你会看到一个小马在窗口中间奔跑。多有趣啊！[如何做…](img/B02820_02_08.jpg)
- en: Next, we want to try and do something cool. We will make the horse run across
    the window and loop infinitely while playing its running animation!
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们想尝试做一些酷炫的事情。我们将让马在窗口中奔跑，并在播放奔跑动画的同时无限循环！
- en: 'First, we need to remove the `anchors.centerIn:` parent from QML and replace
    it with `x` and `y` values:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要从QML中删除`anchors.centerIn:` parent，并用`x`和`y`值替换它：
- en: '[PRE36]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'After that, add a number animation to the sprite object and set its properties
    like this:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，向精灵对象添加一个数字动画，并设置其属性如下：
- en: '[PRE37]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Compile and run the example program now and you will see the pony go crazy and
    start running across the window!
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在编译和运行示例程序，你会看到小马疯狂地在窗口中奔跑！
- en: How it works...
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: In this recipe, we placed the animated sprite object in the middle of the window
    and set its image source to the sprite sheet that we had just added to the project
    resource.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将动画精灵对象放在窗口中间，并将其图像源设置为刚刚添加到项目资源中的精灵表。
- en: Then, we counted how many frames there are in the sprite sheet that belong to
    the running animation, which in this case was 11 frames. We also told Qt about
    the dimension of each frame of the animation, which in this case was 128 x 128\.
    After that, we set the frame rate to `25` to get a decent speed and then set it
    to loop infinitely. We then set the running value to `true` so that the animation
    will be played by default when the program starts running.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们数了一下属于奔跑动画的精灵表中有多少帧，这里是11帧。我们还告诉Qt每一帧动画的尺寸，这里是128 x 128。之后，我们将帧速率设置为`25`以获得合理的速度，然后将其设置为无限循环。然后我们将奔跑值设置为`true`，这样动画在程序开始运行时将默认播放。
- en: Then in Step 4, we wanted to be able to pause the animation and resume it by
    clicking on the window. We simply check whether the sprite is current paused when
    clicking on the mouse area. If the sprite animation has been paused, then resume
    the animation; otherwise, pause the animation.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在第4步，我们希望能够通过点击窗口来暂停动画并恢复它。当点击鼠标区域时，我们只需检查精灵当前是否暂停。如果精灵动画已经暂停，那么恢复动画；否则，暂停动画。
- en: In Step 6, we replaced `anchors.centerIn` with `x` and `y` values so that the
    animated sprite object is not anchored to the center of the window, which would
    have made it impossible to move around.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在第6步，我们用`x`和`y`值替换了`anchors.centerIn`，这样动画精灵对象就不会锚定在窗口中心，这样就可以移动了。
- en: Then, we created a number animation within the animated sprite to animate its
    `x` property. We set the start value to somewhere outside the window on the left
    side, and set the end value to somewhere outside the window on the right side.
    After that, we set the duration to 3,000 milliseconds (3 seconds) and made it
    loop infinitely.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们在动画精灵中创建了一个数字动画，以动画化其`x`属性。我们将起始值设置为窗口左侧的某个位置，将结束值设置为窗口右侧的某个位置。之后，我们将持续时间设置为3,000毫秒（3秒），并使其无限循环。
- en: Lastly, we also set the running value to `true` so that it will play the animation
    by default when the program starts running.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们还将运行值设置为`true`，这样当程序开始运行时，它将默认播放动画。
- en: There's more…
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Sprite animation is used extensively, especially in game development. Sprites
    are used for character animation, particle animation, and even GUI animation.
    A sprite sheet consists of many images combined into one, which can then be chopped
    down and displayed on the screen one at a time. The transitions between different
    images (or sprites) from the sprite sheet creates the illusion of animation, which
    we usually refer to as sprite animation. Sprite animation can be easily achieved
    in QML using the `AnimatedSprite` type.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 精灵动画被广泛应用，尤其在游戏开发中。精灵用于角色动画、粒子动画，甚至GUI动画。精灵表包含许多图像组合成一个，然后可以被切割并逐一显示在屏幕上。从精灵表中不同图像（或精灵）之间的过渡创造了动画的错觉，我们通常称之为精灵动画。在QML中，可以很容易地使用`AnimatedSprite`类型实现精灵动画。
- en: Note
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In this example program, I'm using a free and open source image created by bluecarrot16
    under the CC-BY 3.0 / GPL 3.0 / GPL 2.0 / OGA-BY 3.0 license. The image can be
    obtained legally at [http://opengameart.org/content/lpc-horse](http://opengameart.org/content/lpc-horse).
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例程序中，我使用了由bluecarrot16在CC-BY 3.0 / GPL 3.0 / GPL 2.0 / OGA-BY 3.0许可下创建的免费开源图像。该图像可以在[http://opengameart.org/content/lpc-horse](http://opengameart.org/content/lpc-horse)上合法获取。
