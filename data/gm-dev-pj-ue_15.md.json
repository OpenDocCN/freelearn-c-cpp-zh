["```cpp\n    <UE4 Install Folder>\\Engine\\Binaries\\Win64\\UE4Editor.exe   <UProject Location> <Map Name> -server -game -log\n    ```", "```cpp\n    C:\\Program Files\\Epic   Games\\UE_4.24\\Engine\\Binaries\\Win64\\UE4Editor.exe   D:\\TestProject\\TestProject.uproject TestMap -server -game -log\n    ```", "```cpp\n    <UE4 Install Folder>\\Engine\\Binaries\\Win64\\UE4Editor.exe   <UProject Location> <Map Name>?Listen -game\n    ```", "```cpp\n    C:\\Program Files\\Epic   Games\\UE_4.24\\Engine\\Binaries\\Win64\\UE4Editor.exe   D:\\TestProject\\TestProject.uproject TestMap?Listen -game\n    ```", "```cpp\n    <Project Name>.exe <Map Name>?Listen -game\n    ```", "```cpp\n    D:\\Packaged\\TestProject\\TestProject.exe TestMap?Listen \u2013game\n    ```", "```cpp\n    Open <Server IP Address>\n    ```", "```cpp\n    Open 194.56.23.4\n    ```", "```cpp\n    PlayerController->ConsoleCommand(\"Open <Server IP Address>\");\n    ```", "```cpp\n    PlayerController->ConsoleCommand(\"Open 194.56.23.4\");\n    ```", "```cpp\n    <UE4 Install Folder>\\Engine\\Binaries\\Win64\\UE4Editor.exe   <UProject Location> <Server IP Address> -game\n    ```", "```cpp\n    <Project Name>.exe  <Server IP Address>\n    ```", "```cpp\n    \"<Path>\\WindowsNoEditor\\TestMultiplayer.exe\"   ThirdPersonExampleMap?Listen -server\n    ```", "```cpp\nclass UNetConnection* APawn::GetNetConnection() const\n{\n\u00a0\u00a0// if have a controller, it has the net connection\n\u00a0\u00a0if ( Controller )\n\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0return Controller->GetNetConnection();\n\u00a0\u00a0}\n\u00a0\u00a0return Super::GetNetConnection();\n}\n```", "```cpp\nUNetConnection* AActor::GetNetConnection() const\n{\n\u00a0\u00a0return Owner ? Owner->GetNetConnection() : nullptr;\n}\n```", "```cpp\nENetRole MyLocalRole = GetLocalRole();\nENetRole MyRemoteRole = GetRemoteRole();\nFString String;\nif(MyLocalRole == ROLE_Authority)\n{\n\u00a0\u00a0if(MyRemoteRole == ROLE_AutonomousProxy)\n\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0String = \u00abThis version of the actor is the authority and\n\u00a0\u00a0\u00a0\u00a0it\u203as being controlled by a player on its client\u00bb;\n\u00a0\u00a0}\n\u00a0\u00a0else if(MyRemoteRole == ROLE_SimulatedProxy)\n\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0String = \u00abThis version of the actor is the authority but \n\u00a0\u00a0\u00a0\u00a0it\u203as not being controlled by a player on its client\u00bb;\n\u00a0\u00a0}\n}\nelse String = \"This version of the actor isn't the authority\";\nGEngine->AddOnScreenDebugMessage(-1, 0.0f, FColor::Red, String);\n```", "```cpp\n    #define ROLE_TO_STRING(Value) FindObject<UEnum>(ANY_PACKAGE,   TEXT(\"ENetRole\"), true)->GetNameStringByIndex((int32)Value)\n    ```", "```cpp\n    UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category =   \"Ownership Test Actor\")\n    UStaticMeshComponent* Mesh;\n    UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = \"Ownership   Test Actor\")\n    float OwnershipRadius = 400.0f;\n    ```", "```cpp\n    #include \"DrawDebugHelpers.h\"\n    #include \"OwnershipRoles.h\"\n    #include \"OwnershipRolesCharacter.h\"\n    #include \"Components/StaticMeshComponent.h\"\n    #include \"Kismet/GameplayStatics.h\"\n    ```", "```cpp\n    Mesh = CreateDefaultSubobject<UStaticMeshComponent>(\"Mesh\");\n    RootComponent = Mesh;\n    ```", "```cpp\n    bReplicates = true;\n    ```", "```cpp\n    DrawDebugSphere(GetWorld(), GetActorLocation(), OwnershipRadius,   32, FColor::Yellow);\n    ```", "```cpp\n    if (HasAuthority())\n    {\n    \u00a0\u00a0AActor* NextOwner = nullptr;\n    \u00a0\u00a0float MinDistance = OwnershipRadius;\n    \u00a0\u00a0TArray<AActor*> Actors;\n    \u00a0\u00a0UGameplayStatics::GetAllActorsOfClass(this,    AOwnershipRolesCharacter::StaticClass(), Actors);\n    \u00a0\u00a0for (AActor* Actor : Actors)\n    \u00a0\u00a0{\n    const float Distance = GetDistanceTo(Actor);\n    \u00a0\u00a0\u00a0\u00a0if (Distance <= MinDistance)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0MinDistance = Distance;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0NextOwner = Actor;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}\n    \u00a0\u00a0if (GetOwner() != NextOwner)\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0SetOwner(NextOwner);\n    \u00a0\u00a0}\n    }\n    ```", "```cpp\n    const FString LocalRoleString = ROLE_TO_STRING(GetLocalRole());\n    const FString RemoteRoleString = ROLE_TO_STRING(GetRemoteRole());\n    const FString OwnerString = GetOwner() != nullptr ? GetOwner()-  >GetName() : TEXT(\"No Owner\");\n    const FString ConnectionString = GetNetConnection() != nullptr ?   TEXT(\"Valid Connection\") : TEXT(\"Invalid Connection\");\n    ```", "```cpp\n    const FString Values = FString::Printf(TEXT(\"LocalRole =   %s\\nRemoteRole = %s\\nOwner = %s\\nConnection = %s\"),   *LocalRoleString, *RemoteRoleString, *OwnerString,   *ConnectionString);\n    DrawDebugString(GetWorld(), GetActorLocation(), Values, nullptr,   FColor::White, 0.0f, true);\n    ```", "```cpp\n    virtual void Tick(float DeltaTime) override;\n    ```", "```cpp\n    #include \"DrawDebugHelpers.h\"\n    #include \"OwnershipRoles.h\"\n    ```", "```cpp\n    void AOwnershipRolesCharacter::Tick(float DeltaTime)\n    {\n      Super::Tick(DeltaTime);\n    }\n    ```", "```cpp\n    const FString LocalRoleString = ROLE_TO_STRING(GetLocalRole());\n    const FString RemoteRoleString = ROLE_TO_STRING(GetRemoteRole());\n    const FString OwnerString = GetOwner() != nullptr ? GetOwner()-  >GetName() : TEXT(\"No Owner\");\n    const FString ConnectionString = GetNetConnection() != nullptr ?   TEXT(\"Valid Connection\") : TEXT(\"Invalid Connection\");\n    ```", "```cpp\n    const FString Values = FString::Printf(TEXT(\"LocalRole =   %s\\nRemoteRole = %s\\nOwner = %s\\nConnection = %s\"), *LocalRoleString, *RemoteRoleString, *OwnerString,   *ConnectionString);\n    DrawDebugString(GetWorld(), GetActorLocation(), Values, nullptr,   FColor::White, 0.0f, true);\n    ```", "```cpp\nUPROPERTY(Replicated) \nfloat Health = 100.0f; \n```", "```cpp\nUPROPERTY(ReplicatedUsing=OnRep_Health) \nfloat Health = 100.0f;\nUFUNCTION() \nvoid OnRep_Health()\n{\n\u00a0\u00a0UpdateHUD(); \n}\n```", "```cpp\nDOREPLIFETIME(<Class Name>, <Replicated Variable Name>); \n```", "```cpp\nvoid AVariableReplicationActor::GetLifetimeReplicatedProps(TArray<   FLifetimeProperty >& OutLifetimeProps) const\n{\n\u00a0\u00a0Super::GetLifetimeReplicatedProps(OutLifetimeProps);\n\u00a0\u00a0DOREPLIFETIME(AVariableReplicationActor, Health);\n}\n```", "```cpp\nDOREPLIFETIME_CONDITION(<Class Name>, <Replicated Variable Name>,   <Condition>); \n```", "```cpp\nvoid AVariableReplicationActor::GetLifetimeReplicatedProps(TArray<   FLifetimeProperty >& OutLifetimeProps) const\n{\n\u00a0\u00a0Super::GetLifetimeReplicatedProps(OutLifetimeProps);\n\u00a0\u00a0DOREPLIFETIME_CONDITION(AVariableReplicationActor, Health,     COND_OwnerOnly);\n}\n```", "```cpp\n    #include \"Net/UnrealNetwork.h\"\n    ```", "```cpp\n    UPROPERTY(Replicated) \n    float A = 100.0f; \n    UPROPERTY(ReplicatedUsing = OnRepNotify_B) \n    int32 B; \n    ```", "```cpp\n    virtual void Tick(float DeltaTime) override;\n    ```", "```cpp\n    UFUNCTION() \n    void OnRepNotify_B(); \n    ```", "```cpp\n    #include \"Engine/Engine.h\"\n    #include \"DrawDebugHelpers.h\"\n    ```", "```cpp\n    void AVariableReplicationCharacter::GetLifetimeReplicatedProps(TArray<   FLifetimeProperty >& OutLifetimeProps) const \n    {\n    \u00a0\u00a0Super::GetLifetimeReplicatedProps(OutLifetimeProps);\n    }\n    ```", "```cpp\n    DOREPLIFETIME(AVariableReplicationCharacter, A);\n    ```", "```cpp\n    DOREPLIFETIME_CONDITION(AVariableReplicationCharacter, B,   COND_OwnerOnly);\n    ```", "```cpp\n    void AVariableReplicationCharacter::Tick(float DeltaTime) \n    {\n    \u00a0\u00a0Super::Tick(DeltaTime);\n    }\n    ```", "```cpp\n    if (HasAuthority()) \n    { \n    \u00a0\u00a0A++; \n    \u00a0\u00a0B++; \n    } \n    ```", "```cpp\n    const FString Values = FString::Printf(TEXT(\"A = %.2f    B =   %d\"), A, B); \n    DrawDebugString(GetWorld(), GetActorLocation(), Values, nullptr,   FColor::White, 0.0f, true);\n    ```", "```cpp\n    void AVariableReplicationCharacter::OnRepNotify_B() \n    {\n    \u00a0\u00a0const FString String = FString::Printf(TEXT(\"B was changed by     the server and is now %d!\"), B); \n    \u00a0\u00a0GEngine->AddOnScreenDebugMessage(-1, 0.0f, FColor::Red,String); \n    }\n    ```"]