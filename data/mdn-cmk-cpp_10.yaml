- en: '*Chapter 10*: Generating Documentation'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**第10章**：生成文档'
- en: High-quality code is not only well written, working, and tested—it is also thoroughly
    documented. Documentation allows us to share information that could otherwise
    get lost, draw a bigger picture, give context, reveal intent, and—finally—educate
    both external users and maintainers.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 高质量代码不仅编写得很好、运行正常且经过测试，而且还彻底进行了文档化。文档使我们能够分享否则可能丢失的信息，绘制更广阔的图景，提供上下文，揭示意图，最终——教育外部用户和维护者。
- en: Do you remember the last time you joined a new project and got lost for hours
    in a maze of directories and files? This can be avoided. Truly excellent documentation
    will lead a complete newcomer to the exact line of code they're looking for in
    seconds. Sadly, the subject of missing documentation is often swept under the
    rug. No wonder—it takes a lot of skill and many of us aren't very good at it.
    On top of that, documentation and code can really part ways very quickly. Unless
    a strict update and review process is put in place, it's easy to forget that documentation
    needs work too.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你还记得上次加入新项目时，在目录和文件迷宫中迷失了几个小时吗？这种情况是可以避免的。优秀的文档确实能引导一个完全的新手在几秒钟内找到他们想要查看的代码行。遗憾的是，缺失文档的问题常常被一笔勾销。难怪——这需要很多技巧，而且我们中的许多人并不擅长。此外，文档和代码真的可以很快分道扬镳。除非实施严格的更新和审查流程，否则很容易忘记文档也需要维护。
- en: 'Some teams (in the interest of time or encouraged by managers) follow a practice
    of writing "self-documenting code". By picking meaningful, readable identifiers
    for filenames, functions, variables, and whatnot, they hope to avoid the chore
    of documenting. While the habit of good naming is absolutely correct, it won''t
    replace documentation. Even the best function signatures don''t guarantee that
    all necessary information is conveyed—for example, `int removeDuplicates();` is
    quite descriptive, but it doesn''t reveal what is returned! It may be the number
    of duplicates found, the number of items left, or something else—it''s not certain.
    Remember: there''s no such thing as a free lunch.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一些团队（出于时间考虑或受到经理的鼓励）遵循编写“自文档化代码”的做法。通过为文件名、函数、变量等选择有意义的、可读的标识符，他们希望避免文档化的繁琐工作。虽然良好的命名习惯绝对是正确的，但它不能取代文档。即使是最出色的函数签名也不能保证传达所有必要的信息——例如，`int
    removeDuplicates();`非常具有描述性，但它没有揭示返回值是什么！它可能是找到的重复项数量、剩余项的数量，或其他内容——是不确定的。记住：没有免费的午餐这种事。
- en: To make things easier, professionals use automatic documentation generators
    that can analyze the code and comments in source files to produce comprehensive
    documentation in multiple different formats. Adding such generators to a CMake
    project is very simple—let's see how!
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化事情，专业人士使用自动文档生成器，这些生成器可以分析源文件中的代码和注释，以生成多种不同格式的全面文档。将此类生成器添加到CMake项目中非常简单——让我们来看看如何操作！
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Adding Doxygen to your project
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向您的项目添加Doxygen
- en: Generating documentation with a modern look
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用现代外观生成文档
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You can find the code files present in this chapter on GitHub at the following
    link:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitHub上找到本章中出现的代码文件，链接如下：
- en: '[https://github.com/PacktPublishing/Modern-CMake-for-Cpp/tree/main/examples/chapter10](https://github.com/PacktPublishing/Modern-CMake-for-Cpp/tree/main/examples/chapter10)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Modern-CMake-for-Cpp/tree/main/examples/chapter10](https://github.com/PacktPublishing/Modern-CMake-for-Cpp/tree/main/examples/chapter10)'
- en: 'To build examples provided in this book always use recommended commands:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建本书中提供的示例，请始终使用建议的命令：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Be sure to replace placeholders `<build tree>` and `<source tree>` with appropriate
    paths. As a reminder: **build tree** is the path to target/output directory, **source
    tree** is the path at which your source code is located.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保将占位符`<build tree>`和`<source tree>`替换为适当的路径。作为提醒：**构建树**是目标/输出目录的路径，**源树**是您的源代码所在的路径。
- en: Adding Doxygen to your project
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向您的项目添加Doxygen
- en: 'One of the most established and popular tools that can generate documentation
    from C++ sources is Doxygen. And when I say "established", I mean it: the first
    version was released by Dimitri van Heesch in October 1997\. Since then, it has
    grown immensely, and it is actively supported by over 180 contributors to its
    repository ([https://github.com/doxygen/doxygen](https://github.com/doxygen/doxygen)).'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 能够从C++源代码生成文档的最著名且最受欢迎的工具之一是Doxygen。当我提到“著名”时，我的意思是：第一个版本是由Dimitri van Heesch在1997年10月发布的。从那时起，它得到了极大的发展，并且由其仓库的180多个贡献者积极参与支持（[https://github.com/doxygen/doxygen](https://github.com/doxygen/doxygen)）。
- en: 'Doxygen can produce documentation in the following formats:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Doxygen可以生成以下格式的文档：
- en: '**HyperText Markup Language** (**HTML**)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**超文本标记语言**（**HTML**）'
- en: '**Rich Text Format** (**RTF**)'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**富文本格式**（**RTF**）'
- en: '**Portable Document Format** (**PDF**)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**便携式文档格式**（**PDF**）'
- en: '**Lamport''s TeX** (**LaTeX**)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Lamport的TeX**（**LaTeX**）'
- en: '**PostScript** (**PS**)'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PostScript**（**PS**）'
- en: '**Unix manual** (**man pages**)'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Unix手册**（**手册页**）'
- en: '**Microsoft Compiled HTML Help** (**CHM**)'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**微软编译的HTML帮助文件**（**CHM**）'
- en: If you decorate your code with comments providing additional information in
    the format specified by Doxygen, it will be parsed to enrich the output file.
    What's more, the code structure will be analyzed to produce helpful charts and
    diagrams. The latter is optional, as it requires an external Graphviz tool ([https://graphviz.org/](https://graphviz.org/)).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你用Doxygen指定的格式为代码添加注释，提供额外信息，它将被解析以丰富输出文件。更重要的是，将分析代码结构以生成有益的图表和图表。后者是可选的，因为它需要一个外部的Graphviz工具（[https://graphviz.org/](https://graphviz.org/)）。
- en: 'The developer should first answer the following question: *Do users of the
    project just get the documentation or will they generate it themselves (perhaps
    when they build from source)?* The first option implies that documentation is
    shipped with the binaries, available online, or (less elegantly) checked in with
    the source code into the repository.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者首先应该回答以下问题：*项目的用户只是获得文档，还是他们自己生成文档（也许是在从源代码构建时）？*第一个选项意味着文档与二进制文件一起提供，可供在线获取，或者（不那么优雅地）与源代码一起提交到仓库中。
- en: 'The answer matters, because if we want users to generate documentation during
    the build, they will need the dependencies present in their system. This isn''t
    too large a problem since Doxygen is available through most package managers (as
    well as Graphviz), and all that''s needed is a simple command, such as this one
    for Debian:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 答案很重要，因为如果我们希望用户在构建过程中生成文档，他们需要在他们的系统中拥有这些依赖项。由于Doxygen可以通过大多数包管理器（以及Graphviz）获得，所需的就是一个简单的命令，比如针对Debian的这样一个命令：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: There are also binaries available for Windows (check the project's website).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 针对Windows也有可用的二进制文件（请查看项目的网站）。
- en: 'To summarize: generate documentation for users or handle adding the dependencies
    if needed. This is covered in [*Chapter 7*](B17205_07_Final_JC_ePub.xhtml#_idTextAnchor162),
    *Managing Dependencies with CMake*, so we won''t repeat the steps here. Note that
    Doxygen is built with CMake, so you can easily compile it from source as well.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 总结：为用户生成文档或处理需要时的依赖项添加。这在本章[*第7章*](B17205_07_Final_JC_ePub.xhtml#_idTextAnchor162)，*使用CMake管理依赖项*中有所涵盖，所以我们在这里不会重复这些步骤。请注意，Doxygen是使用CMake构建的，因此你也可以轻松地从源代码编译它。
- en: When Doxygen and Graphviz are installed in the system, we can add the generation
    to our project. Unlike as suggested by online sources, this isn't as hard or involved
    as we might think. We don't need to create external configuration files, provide
    paths to the `doxygen` executable, or add custom targets. Since CMake 3.9, we
    can use the `doxygen_add_docs()` function from `FindDoxygen` find-module, which
    sets the documentation target up.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当Doxygen和Graphviz安装在系统中时，我们可以将生成功能添加到我们的项目中。与在线资料所建议的不同，这并不像我们想象的那么困难或复杂。我们不需要创建外部配置文件，提供`doxygen`可执行文件的路径，或者添加自定义目标。自从CMake
    3.9以来，我们可以使用`FindDoxygen`模块中的`doxygen_add_docs()`函数来设置文档目标。
- en: 'The signature looks like this:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 签名看起来像这样：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The first argument specifies the target name, which we''ll need to build explicitly
    with the `-t` argument to `cmake` (after generating a build tree), as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数指定了目标名称，我们需要使用`cmake`的`-t`参数（在生成构建树之后）显式构建它，如下所示：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Or, we can always have it be built by adding the `ALL` argument (usually not
    necessary). Other options are pretty self-explanatory, except maybe `USE_STAMP_FILE`.
    This allows CMake to skip regeneration of documentation if none of the source
    files have changed (but requires `sourceFilesOrDirs` to only contain files).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们总是可以通过添加 `ALL` 参数（通常不必要）来构建它。其他选项相当直观，除了可能 `USE_STAMP_FILE`。这允许 CMake 在源文件没有更改的情况下跳过文档的重新生成（但要求
    `sourceFilesOrDirs` 只包含文件）。
- en: 'We''ll follow the practice from previous chapters and create a utility module
    with a helper function (so that it can be reused in other projects), as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将遵循前几章的做法，创建一个带有辅助函数的工具模块（以便在其他项目中重复使用），如下所示：
- en: chapter-10/01-doxygen/cmake/Doxygen.cmake
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: chapter-10/01-doxygen/cmake/Doxygen.cmake
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The function accepts two arguments—`input` and `output` directories—and will
    create a custom `doxygen` target. Here''s what happens:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数接受两个参数——`input` 和 `output` 目录，并将创建一个自定义 `doxygen` 目标。这里发生了什么：
- en: First, we'll use CMake's built-in Doxygen find-module to figure out if Doxygen
    is available in the system.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将使用 CMake 内置的 Doxygen 查找模块来确定系统中是否可用 Doxygen。
- en: If it isn't available, we'll create a dummy `doxygen` target that will inform
    the user and run a `false` command, which (on Unix-like systems) returns `1`,
    causing the build to fail. We terminate the function at that time with `return()`.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果不可用，我们将创建一个虚拟 `doxygen` 目标，该目标将通知用户并运行一个 `false` 命令，该命令（在 Unix-like 系统上）返回
    `1`，导致构建失败。我们在此时终止函数并用 `return()`。
- en: If Doxygen is available, we'll configure it to generate HTML output in the provided
    `output` directory. Doxygen is extremely configurable (find out more in the official
    documentation). To set any option, just follow the example by calling `set()`
    and prepend its name with `DOXYGEN_`.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果系统中可用 Doxygen，我们将配置它以在提供的 `output` 目录中生成 HTML 输出。Doxygen 非常可配置（更多信息请参阅官方文档）。要设置任何选项，只需按照示例通过调用
    `set()` 并将其名称前缀为 `DOXYGEN_`。
- en: 'Set up the actual `doxygen` target: all the `DOXYGEN_` variables will be forwarded
    to Doxygen''s configuration file, and documentation will be generated from the
    provided `input` directory in the source tree.'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置实际的 `doxygen` 目标：所有 `DOXYGEN_` 变量都将转发到 Doxygen 的配置文件中，并且将从源树中的提供的 `input`
    目录生成文档。
- en: If your documentation is to be generated by users, *Step 2* should probably
    involve installing the necessary dependencies instead.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你documentation 要由用户生成，*步骤 2* 可能应该涉及安装必要的依赖项。
- en: 'To use this function, we can add it to the main listfile of our project, as
    follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用这个函数，我们可以在我们项目的 main listfile 中添加它，如下所示：
- en: chapter-10/01-doxygen/CMakeLists.txt
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: chapter-10/01-doxygen/CMakeLists.txt
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Not difficult at all. Building the `doxygen` target generates HTML documentation
    that looks like this:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一点也不难。构建 `doxygen` 目标会生成如下所示的 HTML 文档：
- en: '![Figure 10.1 – Class reference generated with Doxygen'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.1 – 使用 Doxygen 生成的类参考](img/Figure_10.1_B17205.jpg)'
- en: '](img/Figure_10.1_B17205.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.1_B17205.jpg)'
- en: Figure 10.1 – Class reference generated with Doxygen
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.1 – 使用 Doxygen 生成的类参考
- en: 'The additional description you can see in **Member Function Documentation**
    is added by prepending the method with an appropriate comment in the header file,
    as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在**成员函数文档**中看到的额外描述是通过在头文件中添加适当注释来实现的：
- en: chapter-10/01-doxygen/src/calc.h (fragment)
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: chapter-10/01-doxygen/src/calc.h（片段）
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This format is known as Javadoc. It is important to open the comment block
    with double asterisks: `/**`. More information can be found in the description
    of Doxygen''s docblocks (see the link in the *Further reading* section).'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这种格式被称为 Javadoc。用双星号 `/**` 打开注释块是非常重要的。可以在 Doxygen 的 docblocks 描述中找到更多信息（请参阅
    *进一步阅读* 部分中的链接）。
- en: 'As mentioned earlier, if Graphviz is installed, Doxygen will detect it and
    generate dependency diagrams, as illustrated here:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，如果安装了 Graphviz，Doxygen 将检测到它并生成依赖关系图，如下所示：
- en: '![Figure 10.2 – Inheritance and collaboration diagrams generated by Doxygen'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.2 – 使用 Doxygen 生成的继承和协作图](img/Figure_10.2_B17205.jpg)'
- en: '](img/Figure_10.2_B17205.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.2_B17205.jpg)'
- en: Figure 10.2 – Inheritance and collaboration diagrams generated by Doxygen
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.2 – 使用 Doxygen 生成的继承和协作图
- en: By generating documentation straight from the source, we create a mechanism
    to quickly update it with any code changes happening throughout the development
    cycle. Also, any missed updates in the comments have a chance of being spotted
    during the code review.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 直接从源代码生成文档，我们创建了一个机制，可以快速更新它，以反映在整个开发周期中发生的任何代码更改。此外，注释中任何遗漏的更新都有可能在代码审查期间被发现。
- en: Many developers will complain that the design offered by Doxygen is dated, which
    makes them hesitant to present generated documentation to their customers. Don't
    worry—there's an easy solution to this problem.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 许多开发者会抱怨Doxygen提供的设计过时，这让他们犹豫是否向客户展示生成的文档。别担心——有一个简单的解决方案可以解决这个问题。
- en: Generating documentation with a modern look
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用现代风格生成文档
- en: Having your project documented with a clean, fresh design is also important.
    After all, if we put all this work into writing high-quality documentation for
    our cutting-edge project, it is imperative that the user perceives it as such.
    Doxygen has all the bells and whistles, but it isn't known for following the latest
    visual trends. That doesn't mean we'll need a lot of effort to change this, however.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有项目文档并以干净、清新的设计也是非常重要的。毕竟，如果我们为我们的前沿项目编写高质量文档付出这么多努力，用户必然会这样认为。Doxygen拥有所有的功能，但它并不以遵循最新的视觉趋势而闻名。然而，这并不意味着我们需要付出很多努力来改变这一点。
- en: 'Luckily, a developer known as *jothepro* created a theme called `doxygen-awesome-css`
    that offers a modern, customizable design. It even comes with a dark mode! You
    can see this in the following screenshot:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，一个名为*jothepro*的开发者创建了一个名为`doxygen-awesome-css`的主题，它提供了一个现代、可自定义的设计。它甚至还有夜间模式！您可以在以下屏幕快照中看到此内容：
- en: '![Figure 10.3 – HTML documentation in doxygen-awesome-css theme'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: ！[图10.3 – 使用doxygen-awesome-css主题的HTML文档
- en: '](img/Figure_10.3_B17205.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: （img/Figure_10.3_B17205.jpg）
- en: Figure 10.3 – HTML documentation in doxygen-awesome-css theme
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.3 – 使用doxygen-awesome-css主题的HTML文档
- en: The theme doesn't require any additional dependencies and can be easily fetched
    from its GitHub page at [https://github.com/jothepro/doxygen-awesome-css](https://github.com/jothepro/doxygen-awesome-css).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 该主题不需要任何额外的依赖项，可以很容易地从其GitHub页面[https://github.com/jothepro/doxygen-awesome-css](https://github.com/jothepro/doxygen-awesome-css)获取。
- en: Note
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Online sources suggest using multiple applications executed in series to upgrade
    the experience. One popular approach proposes transforming Doxygen's output with
    Sphinx using Breathe and Exhale extensions. This process seems a little busy and
    will pull in a lot of other dependencies (such as Python). I recommend keeping
    tooling simple where possible. Chances are that not every developer on your project
    will understand CMake very well, and such a complex process will give them a hard
    time.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在线资源建议使用多个依次执行的应用程序来升级体验。一种流行的方法是使用Breathe和Exhale扩展与Sphinx一起转换Doxygen的输出。这个过程看起来有点复杂，并且会引入很多其他依赖项（如Python）。我建议在可能的情况下保持工具简单。很可能会发现项目中的每个开发者并不都非常了解CMake，这样的复杂过程会给他们带来困难。
- en: 'We''ll go straight to the automated adoption of this theme. Let''s see how
    we can extend our `Doxygen.cmake` file to use it by adding a new macro, as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将直接进入这个主题的自动化采用。让我们看看如何通过添加一个新的宏来扩展我们的`Doxygen.cmake`文件以使用它，如下所示：
- en: chapter-10/02-doxygen-nice/cmake/Doxygen.cmake (fragment)
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: chapter-10/02-doxygen-nice/cmake/Doxygen.cmake (片段)
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We already know all of these commands from previous chapters of the book, but
    let''s reiterate what happens for perfect clarity, as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在书的 previous chapters 中了解到了所有这些命令，但为了完全清晰，让我们重申一下发生了什么，如下所示：
- en: '`doxygen-awesome-css` is pulled from Git and made available to the project
    with the `FetchContent` module.'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`doxygen-awesome-css`通过`FetchContent`模块从Git中提取，并作为项目的一部分提供。'
- en: Extra options for Doxygen are configured, as recommended in the theme's `README`
    file.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为Doxygen配置了额外的选项，如主题的`README`文件中所建议。
- en: '`DOXYGEN_HTML_EXTRA_STYLESHEET` configures the path to the theme''s `.css`
    file. It will be copied to the output directory.'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`DOXYGEN_HTML_EXTRA_STYLESHEET`配置了主题的`.css`文件的路径。它将被复制到输出目录。'
- en: 'As you can imagine, it''s best to call this macro in the `Doxygen` function
    right before `doxygen_add_docs()`, like this:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所想象的，最好在`Doxygen`函数中调用这个宏，在`doxygen_add_docs()`之前，像这样：
- en: chapter-10/02-doxygen-nice/cmake/Doxygen.cmake
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: chapter-10/02-doxygen-nice/cmake/Doxygen.cmake
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As a reminder, all variables in macros are set in the scope of the calling function.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 作为提醒，宏中的所有变量都在调用函数的作用域中设置。
- en: We can now enjoy modern style in our generated HTML documentation and share
    it proudly with the world.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以享受我们生成的HTML文档中的现代风格，并自豪地与世界分享。
- en: Summary
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this short chapter, we covered adding Doxygen, the documentation generation
    tool, to a CMake project, and making it elegant. This process isn't too involved
    and will greatly improve the flow of information in your solution. Time spent
    on adding documentation will be a worthwhile investment, especially if you find
    that you or your teammates have trouble in understanding complex relations in
    the application.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了如何将Doxygen，这个文档生成工具，添加到CMake项目中，并使其变得优雅。这个过程并不复杂，将大大改善您解决方案中的信息流。花在添加文档上的时间是值得的，特别是如果您发现您或您的团队成员在理解应用程序中的复杂关系时遇到困难。
- en: 'You may worry that it will be hard to add Doxygen to a bigger project that
    didn''t use documentation generation from the start. The sheer amount of work
    required to add comments to every function can be overwhelming for developers.
    Don''t strive for immediate completeness: start small, by only filling in a description
    of elements you touched in your latest commit. Even largely incomplete documentation
    is better than no documentation at all.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能担心将Doxygen添加到没有从开始就使用文档生成的较大项目中会很困难。要求开发者在每个函数中添加注释的工作量可能让开发者感到不堪重负。不要追求立即完整：从小处着手，只需填写您在最新提交中触摸的元素的描述。即使文档不完整，也比完全没有文档好。
- en: 'Keep in mind that by generating documentation, you''ll enforce its proximity
    to the actual code: it''s way easier to maintain written explanations in sync
    with the logic if they''re both in the same file. Also, realize that as with most
    programmers, you''re probably a very busy person and you will eventually forget
    some of the small details of your project. Remember: the shortest pencil is longer
    than the longest memory. Do yourself a favor—write things down and prosper.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，通过生成文档，您将确保其与实际代码的接近性：如果它们都在同一个文件中，同步维护编写解释和逻辑要容易得多。另外，要意识到像大多数程序员一样，您可能是一个非常忙碌的人，并且最终会忘记您项目中的某些小细节。记住：最短的铅笔也比最长的记忆长。对自己好一点——把事情写下来，繁荣昌盛。
- en: In the next chapter, we'll learn how to automate the packaging and installation
    of our projects with CMake.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用CMake自动打包和安装我们的项目。
- en: Further reading
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Official website of Doxygen: [https://www.doxygen.nl/](https://www.doxygen.nl/)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Doxygen的官方网站：[https://www.doxygen.nl/](https://www.doxygen.nl/)
- en: FindDoxygen find-module documentation:[https://cmake.org/cmake/help/latest/module/FindDoxygen.html](https://cmake.org/cmake/help/latest/module/FindDoxygen.html)
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FindDoxygen find-module文档：[https://cmake.org/cmake/help/latest/module/FindDoxygen.html](https://cmake.org/cmake/help/latest/module/FindDoxygen.html)
- en: Doxygen's docblocks:[https://www.doxygen.nl/manual/docblocks.html#specialblock](https://www.doxygen.nl/manual/docblocks.html#specialblock)
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Doxygen的docblocks：[https://www.doxygen.nl/manual/docblocks.html#specialblock](https://www.doxygen.nl/manual/docblocks.html#specialblock)
- en: Other documentation generation utilities
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他文档生成工具
- en: 'There are dozens of other tools that are not covered in this book, as we''re
    focusing on projects supported by CMake. Nevertheless, some of them may be more
    appropriate for your use case. If you''re feeling adventurous, visit the websites
    of two projects I found interesting that are listed here:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 还有数十种其他工具未在此书中涉及，因为我们专注于由CMake支持的项目。然而，其中一些可能更适合您的用例。如果您想冒险，可以访问我在这里列出的两个我觉得有趣的项目的网站：
- en: Adobe's Hyde ([https://github.com/adobe/hyde](https://github.com/adobe/hyde))
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Adobe的Hyde：[https://github.com/adobe/hyde](https://github.com/adobe/hyde)
- en: Aimed at the Clang compiler, Hyde produces Markdown files that can be consumed
    by tools such as Jekyll ([https://jekyllrb.com/](https://jekyllrb.com/)), a static
    page generator supported by GitHub.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 针对Clang编译器，Hyde生成Markdown文件，这些文件可以被如Jekyll([https://jekyllrb.com/](https://jekyllrb.com/))等工具消费，Jekyll是一个由GitHub支持的静态页面生成器。
- en: Standardese ([https://github.com/standardese/standardese](https://github.com/standardese/standardese))
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Standardese：[https://github.com/standardese/standardese](https://github.com/standardese/standardese)
- en: This uses `libclang` to compile your code and provides output in HTML, Markdown,
    LaTex, and man pages. It aims (quite boldly) to be the next Doxygen.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 该工具使用`libclang`编译您的代码，并提供HTML、Markdown、LaTex和man页面的输出。它大胆地目标是成为下一个Doxygen。
