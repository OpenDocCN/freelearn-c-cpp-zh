- en: Chapter 6. Creating a Client-server Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。创建一个客户端-服务器应用程序
- en: In the previous chapter, we delved into the `Boost.Asio` libraries, which are
    important in order to develop a network application. And now, we will move to
    a deeper discussion about a **client-server** application that can communicate
    with each other over a computer network between two or more computers. One of
    them is called **client** and the other one is the **server**.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们深入研究了`Boost.Asio`库，这对于开发网络应用程序非常重要。现在，我们将深入讨论一个**客户端-服务器**应用程序，它可以在两台或多台计算机之间的计算机网络上相互通信。其中一个称为**客户端**，另一个称为**服务器**。
- en: 'We are going to discuss the development of the server, which is able to send
    and receive data traffic from the client and also create a client-side program
    to receive data traffic. In this chapter, we will discuss the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论服务器的开发，它能够从客户端发送和接收数据流量，并创建一个客户端程序来接收数据流量。在本章中，我们将讨论以下主题：
- en: Establishing a connection between the client and server
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在客户端和服务器之间建立连接
- en: Sending and receiving data between the client and server
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在客户端和服务器之间发送和接收数据
- en: Wrapping the most frequently used code to simplify the programming process by
    avoiding code reuse
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过包装最常用的代码来简化编程过程，避免代码重用
- en: Establishing a connection
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 建立连接
- en: We talked about two types of Internet Protocol (IP) in [Chapter 2](part0020_split_000.html#page
    "Chapter 2. Understanding the Networking Concepts"), *Understanding the Networking
    Concepts*. These are Transmission Control Protocol (TCP) and User Datagram Protocol
    (UDP). TCP is connection-oriented, which means data can be sent just after the
    connection has been established. In contrast, UDP is connectionless Internet protocol,
    which means the protocol just sends the data directly to the destination device.
    In this chapter, we will only talk about TCP; therefore, we have to establish
    the connection first. Connection can only be established if the two parties, in
    this case, the client and server, accept the connection. Here, we will try to
    establish a connection synchronously and asynchronously.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第2章](part0020_split_000.html#page "Chapter 2. Understanding the Networking
    Concepts")中讨论了两种类型的Internet协议（IP），即传输控制协议（TCP）和用户数据报协议（UDP）。TCP是面向连接的，这意味着在建立连接后可以发送数据。相反，UDP是无连接的Internet协议，这意味着协议直接将数据发送到目标设备。在本章中，我们只讨论TCP；因此，我们必须首先建立连接。只有在两方，即客户端和服务器，在本例中接受连接时，连接才能建立。在这里，我们将尝试同步和异步地建立连接。
- en: A synchronous client
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个同步客户端
- en: 'We start with establishing the synchronous connection to a remote host. It
    is acting as a client, which will open a connection to the Packt Publishing website
    ([www.packtpub.com](http://www.packtpub.com)). We will use TCP protocol, as we
    discussed earlier in [Chapter 2](part0020_split_000.html#page "Chapter 2. Understanding
    the Networking Concepts"), *Understanding the Networking Concepts*. Here is the
    code:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先要建立与远程主机的同步连接。它充当客户端，将打开到Packt Publishing网站（[www.packtpub.com](http://www.packtpub.com)）的连接。我们将使用TCP协议，正如我们在[第2章](part0020_split_000.html#page
    "Chapter 2. Understanding the Networking Concepts")中讨论的那样，*理解网络概念*。以下是代码：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Save the preceding code as `connectsync.cpp` and run the following command
    to compile the code:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 将上述代码保存为`connectsync.cpp`，并运行以下命令来编译代码：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Run the program by typing `connectsync` in the console, and we should get the
    following output:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制台中输入`connectsync`来运行程序，我们应该会得到以下输出：
- en: '![A synchronous client](img/00041.jpeg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![同步客户端](img/00041.jpeg)'
- en: The program will exit as soon as we press the *Enter* key.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们按下*Enter*键，程序将退出。
- en: 'Now, let us analyze the code. As we can see in the preceding code, we use our
    previous sample code and insert a line of code in order to make it able to establish
    a connection. Let''s draw our attention to the line we have inserted:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们分析代码。正如我们在前面的代码中所看到的，我们使用了之前的示例代码并插入了一行代码，以便能够建立连接。让我们注意我们插入的那一行：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We now have a global variable, which is `socket`. This variable will be used
    to provide socket functionality. It comes from the namespace `boost::asio::ip::tcp`
    because we use TCP as our protocol:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个全局变量，即`socket`。这个变量将用于提供套接字功能。它来自命名空间`boost::asio::ip::tcp`，因为我们使用TCP作为我们的协议：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We also use the namespace `boost::asio::ip::tcp::resolver`. It is used to get
    the address of the remote host we that want to connect with. With the `query()`
    class, we pass the Internet address and port as a parameter. But because we use
    an integer type for a port number, we have to convert it to a string by using
    `lexical_cast`. The query class is used to describe the query that can be passed
    to a resolver. Then, by using the `iterator` class, we will define iterators from
    the results returned by a resolver:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用了命名空间`boost::asio::ip::tcp::resolver`。它用于获取我们想要连接的远程主机的地址。使用`query()`类，我们将Internet地址和端口作为参数传递。但是因为我们使用整数类型作为端口号，所以我们必须使用`lexical_cast`将其转换为字符串。查询类用于描述可以传递给解析器的查询。然后，通过使用`iterator`类，我们将从解析器返回的结果中定义迭代器：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'After the iterator is successfully created, we give it to the `endpoint` type
    variable. The endpoint will store the list of `ip` addresses that are generated
    by the `resolver`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 成功创建迭代器后，我们将其提供给`endpoint`类型变量。端点将存储由`resolver`生成的`ip`地址列表：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then, the `connect()` member function will connect the socket to the endpoint,
    which we specified before. If everything runs properly and no error or exception
    is thrown, the connection is now established:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，`connect()`成员函数将套接字连接到我们之前指定的端点。如果一切正常，没有错误或异常抛出，连接现在已经建立：
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: To release the connection, we have to disable the sending and receiving data
    process on the socket first by using the `shutdown()` member function; then, we
    invoke the `close()` member function to close the socket.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了释放连接，我们必须首先使用`shutdown()`成员函数在套接字上禁用发送和接收数据过程；然后，我们调用`close()`成员函数关闭套接字。
- en: 'When we run the program and get output like the preceding image, it will inform
    us that the connection has been established. We can change the port number, for
    example, to `110`, which is Remote TELNET Service protocol, in the `query()` class
    like the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行程序并得到类似上图的输出时，它会通知我们连接已建立。我们可以更改端口号，例如在`query()`类中将端口号更改为`110`，即远程TELNET服务协议。
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, the program will throw an exception, and the output will be as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，程序将抛出异常，输出如下：
- en: '![A synchronous client](img/00042.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![一个同步客户端](img/00042.jpeg)'
- en: From the output, we can conclude that the connection has been refused by the
    target machine because the port we plan to connect to is closed. This means that
    by using port `80`, which is **Hypertext Transfer Protocol** (**HTTP**), we can
    make a connection with the Packt Publishing website.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 从输出中，我们可以得出结论，连接被目标机器拒绝，因为我们计划连接的端口是关闭的。这意味着通过使用端口`80`，即**超文本传输协议**（**HTTP**），我们可以与Packt
    Publishing网站建立连接。
- en: An asynchronous client
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个异步客户端
- en: 'We have already been able to establish a connection synchronously. But how
    about if we need to connect asynchronously to the target so that the program will
    not freeze while trying to make a connection? Let us take a look at the following
    code to find the answer:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经能够同步建立连接。但是，如果我们需要异步连接到目标，以便程序在尝试建立连接时不会冻结，该怎么办呢？让我们看一下以下代码，找到答案：
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then, save the preceding code as `connectasync.cpp` and run the following command
    to compile the code:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将上述代码保存为`connectasync.cpp`，并运行以下命令来编译代码：
- en: '[PRE9]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Try to run the program, and you should get the following output:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试运行程序，你应该会得到以下输出：
- en: '![An asynchronous client](img/00043.jpeg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![一个异步客户端](img/00043.jpeg)'
- en: As we can see in the preceding code, we add the `OnConnect()` function. Because
    the `socket` object is noncopyable, and we need to ensure that it is still valid
    while the handler is waiting to be called, we have to use the `boost::shared_ptr`
    namespace. We also use the `boost::bind` namespace to invoke the handler, that
    is, the `OnConnect()` function.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上述代码中所看到的，我们添加了`OnConnect()`函数。因为`socket`对象是不可复制的，我们需要确保在处理程序等待调用时它仍然有效，所以我们必须使用`boost::shared_ptr`命名空间。我们还使用`boost::bind`命名空间来调用处理程序，也就是`OnConnect()`函数。
- en: An asynchronous server
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个异步服务器
- en: 'We already know how to connect to a remote host synchronously and asynchronously.
    Now, we are going to create the server program to talk with the client-side program
    that we created before. Because we will deal with the asynchronous program in
    the `boost::asio` namespace, we will discuss the client-side program in an asynchronous
    server only. Let us take a look at the following code:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经知道如何同步和异步连接到远程主机。现在，我们将创建服务器程序，与之前创建的客户端程序进行通信。因为我们将处理`boost::asio`命名空间中的异步程序，我们只会讨论异步服务器中的客户端程序。让我们看一下以下代码：
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Save the preceding code as `serverasync.cpp` and run the following command
    to compile the code:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 将上述代码保存为`serverasync.cpp`，并运行以下命令来编译代码：
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Before we run the program, let us distinguish the code. We now have a new object,
    which is `tcp::acceptor`. This object is used for accepting new socket connections.
    Due to the use of the `accept()` function, we need to add the `mswsock` library
    to our compilation process:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行程序之前，让我们区分一下代码。我们现在有一个新对象，即`tcp::acceptor`。这个对象用于接受新的套接字连接。由于使用了`accept()`函数，我们需要在编译过程中添加`mswsock`库：
- en: '[PRE12]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, it is time to run the program. We need to open two command consoles here.
    The first console is for the program itself and the second is for calling `telnet`
    command to make a connection to the server. We only need to run the command `telnet
    127.0.0.1 4444` just after we run the `serverasync` program (we can refer to [Chapter
    2](part0020_split_000.html#page "Chapter 2. Understanding the Networking Concepts"),
    *Understanding the Networking Concepts*, to call the `telnet` command in the command
    prompt). The output should be like the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候运行程序了。我们需要在这里打开两个命令控制台。第一个控制台是用于程序本身的，第二个是用于调用`telnet`命令连接到服务器的。我们只需要在运行`serverasync`程序后立即运行命令`telnet
    127.0.0.1 4444`（我们可以参考[第2章](part0020_split_000.html#page "第2章。理解网络概念")中的*理解网络概念*，在命令提示符中调用`telnet`命令）。输出应该如下所示：
- en: '![An asynchronous server](img/00044.jpeg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![一个异步服务器](img/00044.jpeg)'
- en: From the preceding image, we can see that the program is listening to port `4444`
    when it starts, and after we call the `telnet` command to start a connection to
    port `4444`, the program accepts the connection. However, because we only have
    one socket object and invoke the `async_accept()` function just once, the program
    will accept one connection only.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 从上图中，我们可以看到程序在启动时监听端口`4444`，并且在我们调用`telnet`命令连接到端口`4444`时，程序接受了连接。然而，因为我们只有一个套接字对象，并且只调用了一次`async_accept()`函数，程序只会接受一个连接。
- en: Reading and writing to the socket
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取和写入套接字
- en: We are officially able to make a client-server connection. Now, we are going
    to write and read the socket to make the connection more useful. We will modify
    our previous code, `serverasync.cpp`, and add the `basic_stream_socket` object,
    which provides stream-oriented socket functionality.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在正式能够建立客户端-服务器连接。现在，我们将写入和读取套接字，使连接更有用。我们将修改之前的代码`serverasync.cpp`，并添加`basic_stream_socket`对象，提供面向流的套接字功能。
- en: Note
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To get more detailed information about the `basic_stream_socket` object, you
    can visit [www.boost.org/doc/libs/1_58_0/doc/html/boost_asio/reference/basic_stream_socket.html](http://www.boost.org/doc/libs/1_58_0/doc/html/boost_asio/reference/basic_stream_socket.html).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取有关`basic_stream_socket`对象的更详细信息，可以访问[www.boost.org/doc/libs/1_58_0/doc/html/boost_asio/reference/basic_stream_socket.html](http://www.boost.org/doc/libs/1_58_0/doc/html/boost_asio/reference/basic_stream_socket.html)。
- en: 'Now, take a look at the following code containing the read and write socket
    process:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看一下包含读取和写入套接字过程的以下代码：
- en: '[PRE14]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Save the preceding code as `readwritesocket.cpp` and compile the code using
    the following command:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 将上述代码保存为`readwritesocket.cpp`，并使用以下命令编译代码：
- en: '[PRE15]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If we compare the code of the `readwritesocket.cpp` file with the `serverasync.cpp`
    file, we will find that we add a new class called `ClientContext`. It contains
    five member functions: `Send()`, `OnSend()`, `Recv()`, `OnRecv()`, and `Close()`.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将`readwritesocket.cpp`文件的代码与`serverasync.cpp`文件进行比较，我们会发现我们添加了一个名为`ClientContext`的新类。它包含五个成员函数：`Send()`、`OnSend()`、`Recv()`、`OnRecv()`和`Close()`。
- en: The Send() and OnSend() functions
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Send()和OnSend()函数
- en: In the `Send()` function, we input an array of characters and their length.
    Before the function sends the array of characters, it has to check whether or
    not the `m_send_buffer` parameter is empty. The sending process can only occur
    if the buffer is not empty.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Send()`函数中，我们输入一个字符数组和它们的长度。在函数发送字符数组之前，它必须检查`m_send_buffer`参数是否为空。只有在缓冲区不为空时，发送过程才能发生。
- en: The `boost::asio::async_write` namespace writes the socket and invokes the `OnSend()`
    function handler. Then, it erases the buffer and sends the next pending data if
    there is any. Now, every time we press any key in the `telnet` window, it will
    display what we have typed because the `readwritesocket` project sends back what
    we type to the `telnet` window.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`boost::asio::async_write`命名空间写入套接字并调用`OnSend()`函数处理程序。然后，它擦除缓冲区并发送下一个待处理的数据（如果有的话）。现在，每当我们在`telnet`窗口中按下任何键时，它都会显示我们输入的内容，因为`readwritesocket`项目会将我们输入的内容发送回`telnet`窗口。'
- en: The Recv() and OnRecv() functions
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Recv()和OnRecv()函数
- en: In contrast to the `Send()` function, the `Recv()` function will call the `async_read_some()`
    function to receive the set of data, and the `OnRecv()` function handler will
    format the received data to hexadecimal formatting.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 与`Send()`函数相比，`Recv()`函数将调用`async_read_some()`函数来接收数据集，并且`OnRecv()`函数处理程序将对接收到的数据进行十六进制格式化。
- en: Wrapping the network code
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 包装网络代码
- en: For our convenience, let us create a wrapper for a networking application. In
    using this wrapper, we do not need to reuse our code over and over again; thus,
    making our programming process simpler and more efficient. For now, just create
    two files called `wrapper.h` and `wrapper.cpp`, and we will include them in the
    compilation process in our next code. Because the source codes are quite long
    in length and will not be convenient to print in this book, I have made them into
    downloadable files that you can access in this book's repository at [www.packtpub.com/networking-and-servers/boostasio-c-network-programming-second-edition](http://www.packtpub.com/networking-and-servers/boostasio-c-network-programming-second-edition).
    Go to the **Code Files** section.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便起见，让我们为网络应用程序创建一个包装器。使用这个包装器，我们不需要一遍又一遍地重用我们的代码；因此，使我们的编程过程更简单、更高效。现在，只需创建两个文件，名为`wrapper.h`和`wrapper.cpp`，我们将在下一个代码中包含它们在编译过程中。因为源代码长度较长，不方便在本书中打印，我已将它们制作成可下载的文件，您可以在本书的存储库中访问，网址为[www.packtpub.com/networking-and-servers/boostasio-c-network-programming-second-edition](http://www.packtpub.com/networking-and-servers/boostasio-c-network-programming-second-edition)。转到**代码文件**部分。
- en: Developing a client and server program
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发客户端和服务器程序
- en: We have already had the network wrapper code simplify our programming process
    in developing a network application by using the `Boost.Asio` library. Now, let
    us create a client and server program by using our wrapper code.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用`Boost.Asio`库的网络包装器代码简化了开发网络应用程序的编程过程。现在，让我们使用我们的包装器代码创建一个客户端和服务器程序。
- en: Creating a simple echo server
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个简单的回显服务器
- en: 'We are going to create a server program that will echo out all traffic it retrieves
    from the client. In this case, we will use the `telnet` as the client, as we''ve
    done previously. The file has to be saved as `echoserver.cpp`, and the content
    will look like the following:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个服务器程序，它将回显从客户端接收到的所有流量。在这种情况下，我们将使用`telnet`作为客户端，就像以前做过的那样。文件必须保存为`echoserver.cpp`，内容如下：
- en: '[PRE16]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then, compile the preceding code using the following command. Here, we can
    see that we include `wrapper.cpp` in the compilation process to take advantage
    of our wrapper code:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用以下命令编译上述代码。在这里，我们可以看到在编译过程中包含了`wrapper.cpp`，以利用我们的包装器代码：
- en: '[PRE17]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We can try the preceding program by typing `echoserver` in the console window;
    after which, we should get output like the following:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在控制台窗口中输入`echoserver`来尝试上述程序；之后，我们应该会得到以下输出：
- en: '![Creating a simple echo server](img/00045.jpeg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个简单的回显服务器](img/00045.jpeg)'
- en: The first time we run the program, it will listen to port `4444` in `localhost`.
    We can see in the `main` block that the program calls the `poll()` function in
    the `Hive` class if there is no keyboard hit. This means that the program will
    close if any key is pressed because it will invoke the `Stop()` function in the
    `Hive` class, which will stop the `io_service` object. Every 1000 milliseconds,
    the timer will tick because the constructor of the `Acceptor` class initiates
    the interval of the timer for 1000 milliseconds.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次运行程序时，它将在`localhost`的端口`4444`上监听。我们可以在`main`块中看到，如果没有键盘输入，程序会调用`Hive`类中的`poll()`函数。这意味着如果按下任何键，程序将关闭，因为它将调用`Hive`类中的`Stop()`函数，这将停止`io_service`对象。每1000毫秒，定时器将会触发，因为`Acceptor`类的构造函数初始化了1000毫秒的定时器间隔。
- en: 'Now, open another console window and type the command `telnet 127.0.0.1 4444`
    to make `telnet` our client. After the `echoserver` accepts the connection, every
    time we press the alphanumeric option on the keyboard, the `echoserver` will send
    the character back to `telnet`. The following image describes the acceptance connection
    between the `echoserver` and the `telnet` server:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开另一个控制台窗口，并输入命令`telnet 127.0.0.1 4444`，将`telnet`作为我们的客户端。在`echoserver`接受连接之后，每当我们在键盘上按下字母数字选项时，`echoserver`都会将字符发送回`telnet`。以下图片描述了`echoserver`和`telnet`服务器之间的连接接受情况：
- en: '![Creating a simple echo server](img/00046.jpeg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个简单的回显服务器](img/00046.jpeg)'
- en: When the server accepts the connection from the client, the `OnAccept()` function
    handler will be invoked immediately. I pressed the *A*, *B*, and *C* keys respectively
    in the `telnet` window, and then `echoserver` received the characters and sent
    them back to the client. The `telnet` window also displays `A`, `B`, and `C`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务器接受来自客户端的连接时，将立即调用`OnAccept()`函数处理程序。我在`telnet`窗口中分别按下了*A*、*B*和*C*键，然后`echoserver`接收到字符并将它们发送回客户端。`telnet`窗口还显示了`A`、`B`和`C`。
- en: Creating a simple client program
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个简单的客户端程序
- en: 'We have successfully created a server-side program. Now, we will move on to
    develop the client-side program. It will receive the content of the Packt Publishing
    website through the `HTTP GET` command, and the code will be like the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功创建了一个服务器端程序。现在，我们将继续开发客户端程序。它将通过`HTTP GET`命令接收Packt Publishing网站的内容，代码将如下所示：
- en: '[PRE18]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Save the preceding code as `clienthttpget.cpp`, and compile the code using
    the following command:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 将上述代码保存为`clienthttpget.cpp`，并使用以下命令编译代码：
- en: '[PRE19]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'When we run the program, the following output will be displayed:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行程序时，将显示以下输出：
- en: '![Creating a simple client program](img/00047.jpeg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个简单的客户端程序](img/00047.jpeg)'
- en: 'Just after the connection is established, the program sends an `HTTP GET` command
    to port `80` of [www.packtpub.com](http://www.packtpub.com) using the following
    code snippet:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 连接建立后，程序将使用以下代码片段向[www.packtpub.com](http://www.packtpub.com)的端口`80`发送`HTTP
    GET`命令。
- en: '[PRE20]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: As we can see, we use the `strand` object in order to allow all events to be
    serially run. In addition, because of the `strand` object, we do not have to use
    the `lock` object every time the event occurs.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，我们使用`strand`对象来允许所有事件按顺序运行。此外，由于`strand`对象的存在，每次事件发生时我们都不必使用`lock`对象。
- en: 'After the request is sent, the program will pool the incoming data using the
    following code snippet:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 请求发送后，程序将使用以下代码片段轮询传入的数据：
- en: '[PRE23]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Then, once the data is coming, it will be displayed in the console by the `OnRecv()`
    function handler, as we can see in the preceding image.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，一旦数据到来，它将通过`OnRecv()`函数处理程序在控制台中显示，就像我们在上面的图像中看到的那样。
- en: Summary
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: There are three basic steps when it comes to developing a network application.
    The first step includes establishing a connection between the source and target,
    which means the client and server. We can configure the `socket` object along
    with the `acceptor` object to establish the connection.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发网络应用程序时，有三个基本步骤。第一步包括建立源和目标之间的连接，也就是客户端和服务器。我们可以配置`socket`对象以及`acceptor`对象来建立连接。
- en: Secondly, we exchange data by reading and writing to the socket. For this purpose,
    we can use the `basic_stream_socket` functions collection. In our previous example,
    we used the `boost::asio::async_write()` method to send the data and the `boost::asio::async_read()`
    method to receive the data. Finally, the last step is releasing the connection.
    By using the `shutdown()` method in the `ip::tcp::socket` object, we can disable
    the sending and receiving of data on the socket. Then, invoking the `close()`
    method after the `shutdown()` function will close the socket and free up the handler.
    We also have already created a wrapper for all functions, which is most frequently
    used in network application programming by accessing the `Boost.Asio` library.
    This means we can develop a network application simply and efficiently since we
    do not need to reuse code over and over again.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，我们通过读写套接字来交换数据。为此，我们可以使用`basic_stream_socket`函数集合。在我们之前的示例中，我们使用了`boost::asio::async_write()`方法来发送数据，使用了`boost::asio::async_read()`方法来接收数据。最后，最后一步是释放连接。通过在`ip::tcp::socket`对象中使用`shutdown()`方法，我们可以禁用套接字上的数据发送和接收。然后，在`shutdown()`函数之后调用`close()`方法将关闭套接字并释放处理程序。我们还已经为所有函数创建了一个包装器，通过访问`Boost.Asio`库在网络应用程序编程中最常用。这意味着我们可以简单高效地开发网络应用程序，因为我们不需要一遍又一遍地重用代码。
