- en: '*Chapter 2*: Introduction to Qt Creator'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第2章*：Qt Creator简介'
- en: '**Qt Creator** is Qt''s own **Integrated Development Environment** (**IDE**)
    for cross-platform application development. In this chapter, you will learn the
    basics of the Qt Creator IDE as well as covering the **user interface** (**UI**)
    of the IDE. We will also look at how to create and manage projects in Qt Creator.
    This module of Qt covers developing a simple Qt application using Qt Creator,
    shortcuts, and practical tips for developers.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**Qt Creator**是Qt自己的**集成开发环境**（**IDE**），用于跨平台应用程序开发。在本章中，您将学习Qt Creator IDE的基础知识，以及IDE的**用户界面**（**UI**）。我们还将看看如何在Qt
    Creator中创建和管理项目。Qt的这个模块涵盖了使用Qt Creator开发简单Qt应用程序的内容，包括开发人员的快捷方式和实用技巧。'
- en: 'More specifically, we''re going to cover the following main topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 更具体地说，我们将涵盖以下主要主题：
- en: Basics of Qt Creator
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Qt Creator基础知识
- en: Configuring the IDE and managing projects
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置IDE和管理项目
- en: User interfaces
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户界面
- en: Writing a sample application
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写一个示例应用程序
- en: Advanced options
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级选项
- en: Qt Creator can make your Qt learning easier with many useful tools and examples.
    You will need minimal IDE knowledge to get started. By the end of this chapter,
    you will be familiar with the use of Qt Creator. You will also be able to build
    and run your first Qt application on your favorite desktop platform, as well as
    being aware of the advanced options available in the IDE, which you will be able
    to customize in line with your preferences.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Creator可以通过许多有用的工具和示例使您更轻松地学习Qt。您只需要最少的IDE知识即可开始。在本章结束时，您将熟悉Qt Creator的使用。您还将能够在您喜爱的桌面平台上构建和运行您的第一个Qt应用程序，并了解IDE中可用的高级选项，您将能够根据自己的喜好进行自定义。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The technical requirements for this chapter are the same as [*Chapter 1*](B16231_01_Final_ASB_ePub.xhtml#_idTextAnchor014)*,
    Introduction to Qt 6*. You will need the latest Qt version, namely Qt 6.0.0 MinGW
    64-bit, Qt Creator 4.13.0 or higher, and Windows 10, Ubuntu 20.04 LTS, or the
    latest version of macOS (higher than macOS 10.13 at a minimum) such as macOS Catalina.
    Qt supports earlier versions of operating systems such as Windows 8.1 or Ubuntu
    18.04\. However, we recommend you upgrade to the latest version of your preferred
    operating system to ensure smooth functioning. In this chapter, we have used screenshots
    from the Windows 10 platform.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的技术要求与[*第1章*](B16231_01_Final_ASB_ePub.xhtml#_idTextAnchor014)*，Qt 6简介*相同。您将需要最新的Qt版本，即Qt
    6.0.0 MinGW 64位，Qt Creator 4.13.0或更高版本，以及Windows 10、Ubuntu 20.04 LTS或最新版本的macOS（至少高于macOS
    10.13），如macOS Catalina。Qt支持较早版本的操作系统，如Windows 8.1或Ubuntu 18.04。但是，我们建议您升级到首选操作系统的最新版本，以确保顺畅运行。在本章中，我们使用了来自Windows
    10平台的屏幕截图。
- en: Exploring the Qt Creator UI
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索Qt Creator UI
- en: Qt Creator is an IDE produced by the Qt Company. It integrates multiple tools
    including a code editor, a **Graphical UI** (**GUI**) designer, a compiler, a
    debugger, Qt Designer, Qt Quick Designer, and Qt Assistant, among others.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Creator是由Qt公司生产的IDE。它集成了多个工具，包括代码编辑器、**图形用户界面**（**GUI**）设计器、编译器、调试器、Qt Designer、Qt
    Quick Designer和Qt Assistant等。
- en: Qt Designer helps in designing widget-based GUIs whereas Qt Quick Designer provides
    a UI to create and edit QML-based GUIs in Design Mode. Qt Assistant is an integrated
    documentation viewer that opens contents related to a given Qt class or function
    with the press of the *F1* key.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Designer帮助设计基于小部件的GUI，而Qt Quick Designer提供了一个UI，可以在设计模式下创建和编辑基于QML的GUI。Qt
    Assistant是一个集成的文档查看器，可以通过按下*F1*键打开与给定Qt类或函数相关的内容。
- en: 'Let''s begin by launching Qt Creator. The binary can be found inside `Qt\Tools\QtCreator\bin`.
    You will see a screen like that shown in *Figure 2.1*:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始启动Qt Creator。二进制文件可以在`Qt\Tools\QtCreator\bin`中找到。您将看到一个类似于*图2.1*所示的屏幕：
- en: '![Figure 2.1 – Qt Creator interface'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.1 – Qt Creator界面'
- en: '](img/Figure_2.1_B16231.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.1_B16231.jpg)'
- en: Figure 2.1 – Qt Creator interface
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.1 – Qt Creator界面
- en: 'You can see the following GUI sections in the UI:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在UI中看到以下GUI部分：
- en: '**IDE menu bar**: This provides the user with a standard place in the window
    to find the majority of application-specific functions. These functions include
    creating a project, opening and closing files, development tools, analysis options,
    help contents, and a way to exit the program.'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**IDE菜单栏**：为用户提供了一个标准的窗口位置，以找到大多数应用程序特定功能。这些功能包括创建项目、打开和关闭文件、开发工具、分析选项、帮助内容以及退出程序的方法。'
- en: '**Mode selector**: This section provides different modes depending on the active
    task. The **Welcome** button gives options to open examples, tutorials, recent
    sessions, and projects. The **Edit** button opens the code window and helps in
    navigating the project. The **Design** button opens Qt Designer or Qt Quick Designer
    based on the type of UI file. **Debug** provides options to analyze your application.
    The **Projects** button helps in managing project settings, and the **Help** button
    is for browsing help contents.'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**模式选择器**：此部分根据活动任务提供不同的模式。**欢迎**按钮提供打开示例、教程、最近的会话和项目的选项。**编辑**按钮打开代码窗口，并帮助导航项目。**设计**按钮根据UI文件的类型打开Qt
    Designer或Qt Quick Designer。**调试**提供分析应用程序的选项。**项目**按钮帮助管理项目设置，**帮助**按钮用于浏览帮助内容。'
- en: '**Kit selector**: This helps in selecting the active project configuration
    and changing the kit settings.'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**套件选择器**：这有助于选择活动项目配置并更改套件设置。'
- en: '**Run button**: This button runs the active project after building it.'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行按钮：构建完成后，此按钮运行活动项目。
- en: '**Debug button**: This helps in debugging the active project using a debugger.'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**调试按钮**：这有助于使用调试器调试活动项目。'
- en: '**Build button**: This button is for building the active project.'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建按钮：用于构建活动项目。
- en: '**Locator**: This is used to open a file from any open project.'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**定位器**：用于从任何打开的项目中打开文件。'
- en: '**Output pane**: This includes several windows to display project information
    such as compilation and application output. It also shows build issues, console
    messages, and test and search results.'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**输出窗格**：包括几个窗口，用于显示项目信息，如编译和应用程序输出。它还显示构建问题、控制台消息以及测试和搜索结果。'
- en: '**Progress indicator**: This control shows the progress related to running
    tasks.'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**进度指示器**：此控件显示与运行任务相关的进度。'
- en: 'You can also benefit from an interactive UI tour when you launch Qt Creator
    for the first time. You can also launch it from the **Help** | **UI Tour** option
    from the menu bar as shown in *Figure 2.2*:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当您第一次启动Qt Creator时，您还可以从菜单栏中的**帮助** | **UI Tour**选项启动交互式UI导览，如*图2.2*所示：
- en: '![Figure 2.2 – Qt Creator UI Tour menu choice'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.2 – Qt Creator UI导览菜单选择'
- en: '](img/Figure_2.2_B16231.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.2_B16231.jpg)'
- en: Figure 2.2 – Qt Creator UI Tour menu choice
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.2 – Qt Creator UI导览菜单选择
- en: Note
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you press the *Alt* key, then you will see the underlined mnemonic letter
    in the menu title. Press the corresponding key to open the respective context
    menu.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果按下*Alt*键，您将看到菜单标题中的下划线助记符字母。按下相应的键打开相应的上下文菜单。
- en: In this section, we learned about various sections in the IDE. In the next section,
    we will build a simple Qt application using the Qt Creator IDE.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了IDE中的各个部分。在下一节中，我们将使用Qt Creator IDE构建一个简单的Qt应用程序。
- en: Building a simple Qt application
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建一个简单的Qt应用程序
- en: Let's start with a simple *Hello World* project. A *Hello World* program is
    a very simple program that displays **Hello World!** and checks that the SDK configuration
    is free from errors. These projects use the most basic, very minimal code. For
    this project, we will use a project skeleton created by Qt Creator.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个简单的*Hello World*项目开始。*Hello World*程序是一个非常简单的程序，显示**Hello World!**并检查SDK配置是否没有错误。这些项目使用最基本、非常简洁的代码。对于这个项目，我们将使用Qt
    Creator创建的项目骨架。
- en: 'Follow these steps to build your first Qt application:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤构建您的第一个Qt应用程序：
- en: To create a new project in Qt, click on the **File** menu option on the menu
    bar or hit *Ctrl* + *N*. Alternatively, you can also click on the **+ New** button
    located at the welcome screen to create a new project, as shown in *Figure 2.3*:![Figure
    2.3 – New project interface
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在Qt中创建一个新项目，请单击菜单栏上的**文件**菜单选项，或按下*Ctrl* + *N*。或者，您也可以单击欢迎屏幕上的**+ 新建**按钮来创建一个新项目，如*图2.3*所示：![图2.3
    – 新项目界面
- en: '](img/Figure_2.3_B16231.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.3_B16231.jpg)'
- en: Figure 2.3 – New project interface
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.3 – 新项目界面
- en: Next, you can select a template for the project. You can create different types
    of applications, including a console application or GUI application. You can also
    create non-Qt projects as well as library projects. In the upper-right section,
    you will see a dropdown to filter templates specific to the desired target platform.
    Select the **Qt Widgets Application** template and then click on the **Choose...**
    button:![Figure 2.4 – The project template interface
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您可以选择项目的模板。您可以创建不同类型的应用程序，包括控制台应用程序或GUI应用程序。您还可以创建非Qt项目以及库项目。在右上角的部分，您将看到一个下拉菜单，用于过滤特定于所需目标平台的模板。选择**Qt
    Widgets应用程序**模板，然后单击**选择...**按钮：![图2.4 – 项目模板界面
- en: '](img/Figure_2.4_B16231.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.4_B16231.jpg)'
- en: Figure 2.4 – The project template interface
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.4 – 项目模板界面
- en: In the next step, you will be asked to choose the project name and project location.
    You can navigate to the desired project location by clicking the **Browse…** button.
    Then click on the **Next** button to proceed to the next screen:![Figure 2.5 –
    New project location screen
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一步中，您将被要求选择项目名称和项目位置。您可以通过单击**浏览...**按钮导航到所需的项目位置。然后单击**下一步**按钮，进入下一个屏幕：![图2.5
    – 新项目位置屏幕
- en: '](img/Figure_2.5_B16231.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.5_B16231.jpg)'
- en: Figure 2.5 – New project location screen
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.5 – 新项目位置屏幕
- en: You can now select the build system. By default, Qt's own build system **qmake**
    will be selected. We will discuss qmake more later in [*Chapter 6*](B16231_06_Final_ASB_ePub.xhtml#_idTextAnchor123),
    *Signals and Slots*. Click on the **Next** button to proceed to the next screen:![Figure
    2.6 – Build system selection screen
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在可以选择构建系统。默认情况下，将选择Qt自己的构建系统**qmake**。我们将在[*第6章*](B16231_06_Final_ASB_ePub.xhtml#_idTextAnchor123)中更多地讨论qmake，*信号和槽*。点击**下一步**按钮，进入下一个屏幕：![图2.6
    – 构建系统选择屏幕
- en: '](img/Figure_2.6_B16231.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.6_B16231.jpg)'
- en: Figure 2.6 – Build system selection screen
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.6 – 构建系统选择屏幕
- en: Next, you can specify the class information and the base class to be used to
    automatically generate the project skeleton. If you need a desktop application
    with features of `MainWindow` such as `menubar`, `toolbar`, and `statusbar`, then
    select `QMainWindow` in [*Chapter 3*](B16231_03_Final_ASB_ePub.xhtml#_idTextAnchor052)*,*
    *GUI Design Using Qt Widgets*. Click on the **Next** button to proceed to the
    next screen:![Figure 2.7 – Source code skeleton generation screen
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您可以指定类信息和要自动生成项目骨架的基类。如果您需要一个带有`MainWindow`功能的桌面应用程序，比如`menubar`、`toolbar`和`statusbar`，那么在[*第3章*](B16231_03_Final_ASB_ePub.xhtml#_idTextAnchor052)*,*
    *使用Qt Widgets进行GUI设计*中选择`QMainWindow`。点击**下一步**按钮，进入下一个屏幕：![图2.7 – 源代码骨架生成屏幕
- en: '](img/Figure_2.7_B16231.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.7_B16231.jpg)'
- en: Figure 2.7 – Source code skeleton generation screen
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.7 – 源代码骨架生成屏幕
- en: In this next step, you can specify the language for translation. Qt Creator
    comes with the *Qt Linguist* tool, which allows you to translate your application
    into different languages. You may skip this step for now. We will discuss **Internationalization**
    (**i18n**) in [*Chapter 11*](B16231_11_Final_ASB_ePub.xhtml#_idTextAnchor256),
    *Internationalization*. Click on the **Next** button to proceed to the next screen:![Figure
    2.8 – Translation File creation screen
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一步中，您可以指定翻译的语言。Qt Creator带有*Qt Linguist*工具，允许您将应用程序翻译成不同的语言。您现在可以跳过这一步。我们将在[*第11章*](B16231_11_Final_ASB_ePub.xhtml#_idTextAnchor256)中讨论**国际化**（**i18n**），*国际化*。点击**下一步**按钮，进入下一个屏幕：![图2.8
    – 翻译文件创建屏幕
- en: '](img/Figure_2.8_B16231.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.8_B16231.jpg)'
- en: Figure 2.8 – Translation File creation screen
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.8 - 创建翻译文件屏幕
- en: In the next step, you can select a kit to build and run your project. To build
    and run the project, at least one kit must be active and selectable. If your desired
    kit is shown as grayed out, then you may have some kit configuration issues. When
    you install Qt for a target platform, the build and run settings for the development
    targets usually get configured automatically. Click on the checkbox to select
    one of the desktop kits such as **Desktop Qt 6.0.0 MinGW 64-bit**. Click on the
    **Next** button to proceed to the next screen:![Figure 2.9 – Kit Selection screen
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一步中，您可以选择一个套件来构建和运行您的项目。要构建和运行项目，至少必须激活并可选择一个套件。如果您期望的套件显示为灰色，则可能存在一些套件配置问题。当您为目标平台安装Qt时，通常会自动配置开发目标的构建和运行设置。单击复选框以选择其中一个桌面套件，例如**Desktop
    Qt 6.0.0 MinGW 64位**。单击**下一步**按钮以继续到下一个屏幕：![图2.9 - 套件选择屏幕
- en: '](img/Figure_2.9_B16231.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.9_B16231.jpg)'
- en: Figure 2.9 – Kit Selection screen
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.9 - 套件选择屏幕
- en: Version control allows you or your team to submit code changes to a centralized
    system so that each and every team member can obtain the same code without passing
    files around manually. You can add your project into the installed version control
    system on your machine. Qt has support for several version control systems within
    the Qt Creator IDE. You may skip version control for this project by selecting
    **<None>**. Click on the **Finish** button to complete the project creation:![Figure
    2.10 – Project management screen
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 版本控制允许您或您的团队将代码更改提交到集中系统，以便每个团队成员都可以获取相同的代码，而无需手动传递文件。您可以将项目添加到安装在您的计算机上的版本控制系统中。Qt在Qt
    Creator IDE中支持多个版本控制系统。您可以通过选择**<None>**来跳过此项目的版本控制。单击**完成**按钮以完成项目创建：![图2.10
    - 项目管理屏幕
- en: '](img/Figure_2.10_B16231.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.10_B16231.jpg)'
- en: Figure 2.10 – Project management screen
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.10 - 项目管理屏幕
- en: Now you will see the generated files on the left side of the editor window.
    Click on any file to open it in the coding window, the most used component of
    the Qt Creator. The code editor is used in **Edit** mode. You can write, edit,
    refactor, and beautify your code in this window. You can also modify the fonts,
    font size, colors, and indentation. We will learn more about these in the *Understanding*
    *advanced options* section later in this chapter:![Figure 2.11 – Generated files
    and the code editor window
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您将在编辑器窗口的左侧看到生成的文件。单击任何文件以在编码窗口中打开它，这是Qt Creator中最常用的组件。代码编辑器用于**编辑**模式。您可以在此窗口中编写、编辑、重构和美化代码。您还可以修改字体、字体大小、颜色和缩进。我们将在本章后面的*理解*
    *高级选项*部分中了解更多信息：![图2.11 - 生成的文件和代码编辑器窗口
- en: '](img/Figure_2.11_B16231.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.11_B16231.jpg)'
- en: Figure 2.11 – Generated files and the code editor window
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.11 - 生成的文件和代码编辑器窗口
- en: You can now see a `.pro` file inside your project folder. In the current project,
    the `HelloWorld.pro` file is the project file. This contains all the information
    required by qmake to build the application. This file is autogenerated during
    the project creation and contains the relevant details in a structured fashion.
    You can specify files, resources, and target platforms in this file. You need
    to run qmake again if you make any modifications to the `.pro` file contents,
    as shown in *Figure 2.12*. Let's skip modifying the contents for this project:![Figure
    2.12 – The contents of the project file
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您可以在项目文件夹中看到一个`.pro`文件。在当前项目中，`HelloWorld.pro`文件是项目文件。这包含了qmake构建应用程序所需的所有信息。此文件在项目创建期间自动生成，并以结构化方式包含相关详细信息。您可以在此文件中指定文件、资源和目标平台。如果对`.pro`文件内容进行任何修改，则需要再次运行qmake，如*图2.12*所示。让我们跳过修改此项目的内容：![图2.12
    - 项目文件的内容
- en: '](img/Figure_2.12_B16231.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.12_B16231.jpg)'
- en: Figure 2.12 – The contents of the project file
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.12 - 项目文件的内容
- en: 'You can find a form file with the `.ui` extension in the left side of the editor
    window. Let''s open the `mainwindow.ui` file by double-clicking it. Here, you
    can see the file opens under a different interface: Qt Designer. You can see that
    the mode selection panel has switched to **Design** mode. We will discuss Qt Designer
    more in the next chapter.'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以在编辑器窗口的左侧找到一个带有`.ui`扩展名的表单文件。双击打开`mainwindow.ui`文件。在这里，您可以看到文件在不同的界面下打开：Qt
    Designer。您可以看到模式选择面板已切换到**设计**模式。我们将在下一章中更多地讨论Qt Designer。
- en: Now drag the **Label** control listed under the **Display Widgets** category
    to the center of the form on the right side, as shown in *Figure 2.13*.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将**Label**控件从**显示小部件**类别下拖动到右侧表单的中心，如*图2.13*所示。
- en: Next, double-click on the item you dragged in, and type `Hello World!`. Hit
    the *Enter* key on your keyboard or click with the mouse anywhere outside the
    control to save the text:![Figure 2.13 – The designer screen
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，双击您拖动的项目，并键入“Hello World!”。按下键盘上的*Enter*键或单击控件外的任何位置以保存文本：![图2.13 - 设计师屏幕
- en: '](img/Figure_2.13_B16231.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.13_B16231.jpg)'
- en: Figure 2.13 – The designer screen
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.13 - 设计师屏幕
- en: 'The final step is to press the **Run** button present below the kit selector
    button. The project will build automatically once the reader hits the **Run**
    button. Qt Creator is intelligent enough to figure out that the project needs
    to be built first. You can build and run the application separately. After a few
    seconds of compiling, you will see a window with text reading **Hello World!**:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步是按下套件选择按钮下方的**运行**按钮。读者点击**运行**按钮后，项目将自动构建。Qt Creator足够智能，可以确定需要先构建项目。您可以分别构建和运行应用程序。编译几秒钟后，您将看到一个带有文本“Hello
    World!”的窗口：
- en: '![Figure 2.14 – The display output of the sample GUI application'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.14 - 示例GUI应用程序的显示输出'
- en: '](img/Figure_2.14_B16231.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.14_B16231.jpg)'
- en: Figure 2.14 – The display output of the sample GUI application
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.14 - 示例GUI应用程序的显示输出
- en: Congratulations, you have created your first Qt-based GUI application! Now let's
    explore the different advanced options available in Qt Creator.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜，您已经创建了您的第一个基于Qt的GUI应用程序！现在让我们探索Qt Creator中提供的不同高级选项。
- en: Understanding advanced options
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解高级选项
- en: When you install Qt Creator, it gets installed with the default configuration.
    You can customize the IDE and configure its look and feel or set your favorite
    coding style.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Qt Creator时，它会以默认配置安装。您可以自定义IDE并配置其外观或设置您喜欢的编码风格。
- en: Go to the top menu bar and click on the **Tools** option, then select **Options…**.
    You will see a list of categories available on the left sidebar. Each category
    provides a set of options to customize Qt Creator. As a beginner, you may not
    need to change the settings at all, but let's get familiar with the different
    options available. We will start by looking at managing kits.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 转到顶部菜单栏，单击**工具**选项，然后选择**选项...**。您将看到左侧边栏上可用类别的列表。每个类别都提供一组选项来自定义Qt Creator。作为初学者，您可能根本不需要更改设置，但让我们熟悉一下可用的不同选项。我们将从管理工具包开始。
- en: Managing kits
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理工具包
- en: Qt Creator can automatically detect the installed Qt versions and available
    compilers. It groups the configurations used for building and running projects
    to make them cross-platform compatible. This set of configurations are stored
    as a kit. Each kit contains a set of parameters that describe the environment,
    such as the target platform, compiler, and Qt version.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Creator可以自动检测已安装的Qt版本和可用的编译器。它将用于构建和运行项目的配置分组，以使它们跨平台兼容。这组配置被存储为一个工具包。每个工具包包含一组描述环境的参数，例如目标平台、编译器和Qt版本。
- en: 'Start by clicking on the **Kits** option in the left sidebar. This will autodetect
    and list the available kits as shown in *Figure 2.15*. If any kit is shown with
    a yellow or red warning mark, then it signifies a fault in the configuration.
    In that case, you may have to select the right compiler and Qt version. You can
    also create a customized kit by clicking on the **Add** button. If you want to
    use a new kit, then don''t forget to click on the **Apply** button. We will proceed
    with the default desktop configuration shown as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 首先点击左侧边栏中的**Kits**选项。这将自动检测并列出可用的工具包，如*图2.15*所示。如果任何工具包显示为黄色或红色警告标记，则表示配置中存在故障。在这种情况下，您可能需要选择正确的编译器和Qt版本。您还可以通过单击**添加**按钮来创建自定义工具包。如果要使用新工具包，则不要忘记单击**应用**按钮。我们将继续使用默认的桌面配置，如下所示：
- en: '![Figure 2.15 – The Kits configuration screen'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.15 - Kits配置屏幕'
- en: '](img/Figure_2.15_B16231.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.15_B16231.jpg)'
- en: Figure 2.15 – The Kits configuration screen
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.15 - Kits配置屏幕
- en: Now let's proceed to the **Qt Versions** tab under the **Kits** section.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们继续到**Kits**部分下的**Qt版本**选项卡。
- en: Qt Versions
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Qt版本
- en: 'In this tab, you can see the Qt versions available on your system. Ideally,
    the version gets detected automatically. If it is not detected, then click on
    the **Add…** button and browse to the path of qmake to add the desired Qt version.
    Qt uses a defined numbering scheme for its releases. For example, Qt 6.0.0 signifies
    the first patch release of Qt 6.0 and 6 as the major Qt version. Each release
    has limitations on the acceptable amount of changes to ensure a stable API. Qt
    tries to maintain compatibility between versions. However, this is not always
    possible due to code clean-ups and architectural changes in major versions:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在此选项卡中，您可以看到系统上可用的Qt版本。理想情况下，版本会自动检测到。如果没有检测到，然后单击**添加...**按钮并浏览到qmake的路径以添加所需的Qt版本。Qt使用其发布的定义编号方案。例如，Qt
    6.0.0表示Qt 6.0的第一个补丁版本，6表示主要Qt版本。每个版本都对可接受的更改量有限制，以确保稳定的API。Qt试图在版本之间保持兼容性。但是，由于主要版本中的代码清理和架构更改，这并不总是可能：
- en: '![Figure 2.16 – Available Qt versions'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.16 - 可用的Qt版本'
- en: '](img/Figure_2.16_B16231.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.16_B16231.jpg)'
- en: Figure 2.16 – Available Qt versions
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.16 - 可用的Qt版本
- en: Important note
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Qt software versions use the versioning format of `Major.Minor.Patch`. Major
    releases may break backward compatibility for both the binary and source, although
    source compatibility may be maintained. Minor releases have binary and source
    backward compatibility. Patch releases have both backward and forward compatibility
    for the binary and the source.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Qt软件版本使用`主要.次要.补丁`的版本格式。主要版本可能会破坏二进制和源代码的向后兼容性，尽管可能会保持源代码兼容性。次要版本具有二进制和源代码的向后兼容性。补丁版本对二进制和源代码都具有向后和向前兼容性。
- en: We won't be discussing all of the tabs under the **Kits** section as the other
    tabs require knowledge about compilers, debuggers, and build systems. If you are
    an experienced developer, you may explore the tabs and make changes as required.
    Let's proceed to the **Environment** category in the left sidebar.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会讨论**Kits**部分下的所有选项卡，因为其他选项卡需要对编译器、调试器和构建系统有所了解。如果您是一名经验丰富的开发人员，可以探索选项卡并根据需要进行更改。让我们继续到左侧边栏中的**环境**类别。
- en: Environment
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 环境
- en: 'This option allows the user to choose their preferred language and theme. By
    default, Qt Creator uses the system language. It doesn''t support many languages,
    but most of the popular languages are available. If you change to a different
    language, then click on the **Apply** button and restart Qt Creator to see the
    changes. Please note that these **Environment** options are different from the
    build environment. You will see an interface similar to *Figure 2.17* shown as
    follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 此选项允许用户选择他们喜欢的语言和主题。默认情况下，Qt Creator使用系统语言。它不支持许多语言，但大多数流行的语言都可用。如果您切换到不同的语言，然后单击**应用**按钮并重新启动Qt
    Creator以查看更改。请注意，这些**环境**选项与构建环境不同。您将看到一个类似于*图2.17*的界面，如下所示：
- en: '![Figure 2.17 – Options for the Environment settings'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.17 - 环境设置选项'
- en: '](img/Figure_2.17_B16231.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.17_B16231.jpg)'
- en: Figure 2.17 – Options for the Environment settings
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.17 - 环境设置选项
- en: 'You will also see a checkbox saying **Enable high DPI scaling**. Qt Creator
    handles high **Dots-Per-Inch** (**DPI**) scaling differently on different operating
    systems, as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你还会看到一个复选框，上面写着**启用高DPI缩放**。Qt Creator在不同的操作系统上处理高**每英寸点数**（**DPI**）缩放的方式不同，具体如下：
- en: On Windows, Qt Creator detects the default scaling factor and uses it accordingly.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows上，Qt Creator会检测默认的缩放因子并相应地使用它。
- en: On Linux, Qt Creator leaves the decision of whether or not to enable high DPI
    scaling up to the user. This is done because there are many Linux flavors and
    windowing systems.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Linux上，Qt Creator将是否启用高DPI缩放的决定留给用户。这是因为有许多Linux发行版和窗口系统。
- en: On macOS, Qt Creator forces Qt to use the system scaling factor for the Qt Creator
    scaling factor.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在macOS上，Qt Creator强制Qt使用系统缩放因子进行Qt Creator缩放。
- en: To override the default approach, you may toggle the checkbox option and click
    the **Apply** button. The changes will be reflected after you restart the IDE.
    Now let's have a look at the **Keyboard** tab.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要覆盖默认方法，你可以切换复选框选项并点击**应用**按钮。更改将在重新启动IDE后生效。现在让我们来看看**键盘**选项卡。
- en: Keyboard shortcuts
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 键盘快捷键
- en: The **Keyboard** section allows users to explore existing keyboard shortcuts
    and create new ones. Qt Creator has many built-in keyboard shortcuts, which are
    very useful for developers. You can also create your own shortcuts if your favorite
    shortcut is missing. You can additionally specify your own keyboard shortcuts
    for the functions that do not appear in the list, such as, for example, selecting
    words or lines in a text editor.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**键盘**部分允许用户探索现有的键盘快捷键并创建新的快捷键。Qt Creator有许多内置的键盘快捷键，对开发人员非常有用。如果你喜欢的快捷键缺失，你也可以创建自己的快捷键。你还可以为在列表中不出现的功能指定自己的键盘快捷键，比如在文本编辑器中选择单词或行。'
- en: 'Some of the commonly used shortcuts for everyday development are listed as
    follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 一些日常开发中常用的快捷键列举如下：
- en: '![Figure 2.18 – Some of the commonly used keyboard shortcuts'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.18 - 一些常用的键盘快捷键'
- en: '](img/Figure_2.18_B16231.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.18_B16231.jpg)'
- en: Figure 2.18 – Some of the commonly used keyboard shortcuts
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.18 - 一些常用的键盘快捷键
- en: 'The shortcuts are grouped by category. To find a keyboard shortcut in the list,
    enter a function name or shortcut in the `new`:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 快捷键按类别分组。要在列表中找到一个键盘快捷键，输入一个函数名或快捷键在`new`中：
- en: '![Figure 2.19 – Keyboard shortcut options'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.19 - 键盘快捷选项
- en: '](img/Figure_2.19_B16231.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.19_B16231.jpg)'
- en: Figure 2.19 – Keyboard shortcut options
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.19 - 键盘快捷选项
- en: The preceding screenshot shows a list of available shortcuts for the keyword
    `new`. You can see *Ctrl* + *N* is used for creating a new file or project. You
    can also import or export keyboard mapping schemes files in `.kms` format.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的屏幕截图显示了关键字`new`的可用快捷键列表。你可以看到*Ctrl* + *N*用于创建新文件或项目。你也可以导入或导出`.kms`格式的键盘映射方案文件。
- en: Important note
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'There are many more in-built Qt shortcuts than we discussed here. You can read
    more about shortcuts in the following articles:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 内置的Qt快捷键比我们在这里讨论的要多得多。你可以在以下文章中了解更多关于快捷键的信息：
- en: '[https://doc.qt.io/qtcreator/creator-keyboard-shortcuts.html](https://doc.qt.io/qtcreator/creator-keyboard-shortcuts.html)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://doc.qt.io/qtcreator/creator-keyboard-shortcuts.html](https://doc.qt.io/qtcreator/creator-keyboard-shortcuts.html)'
- en: '[https://wiki.qt.io/Qt_Creator_Keyboard_Shortcuts](https://wiki.qt.io/Qt_Creator_Keyboard_Shortcuts)'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://wiki.qt.io/Qt_Creator_Keyboard_Shortcuts](https://wiki.qt.io/Qt_Creator_Keyboard_Shortcuts)'
- en: '[https://shortcutworld.com/Qt-Creator/win/Qt-Creator_Shortcuts](https://shortcutworld.com/Qt-Creator/win/Qt-Creator_Shortcuts)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://shortcutworld.com/Qt-Creator/win/Qt-Creator_Shortcuts](https://shortcutworld.com/Qt-Creator/win/Qt-Creator_Shortcuts)'
- en: There is a possibility of conflict between a Qt Creator keyboard shortcut and
    a window manager shortcut. In this case, the window manager shortcut will override
    the Qt Creator shortcut. You can also configure the keyboard shortcuts in the
    window manager. If this is restricted, then you can change the Qt Creator shortcuts
    instead. Now, let's proceed to the next sidebar category.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Creator的键盘快捷键和窗口管理器快捷键之间可能会发生冲突。在这种情况下，窗口管理器快捷键将覆盖Qt Creator快捷键。你也可以在窗口管理器中配置键盘快捷键。如果这受到限制，那么你可以改变Qt
    Creator的快捷键。现在，让我们继续下一个侧边栏类别。
- en: Text Editor
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文本编辑器
- en: 'The next category in the left sidebar is **Text Editor**. Here, you can choose
    the color scheme, font, and font size in the first tab. The next tab lists different
    behavior in **Text Editor**. As you can see in *Figure 2.20*, Qt uses space indentation
    for the *Tab* key on the keyboard:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧边栏中的下一个类别是**文本编辑器**。在这里，你可以在第一个选项卡中选择颜色方案、字体和字体大小。下一个选项卡列出了**文本编辑器**中的不同行为。正如你在*图2.20*中所看到的，Qt在键盘上使用空格缩进来代替*Tab*键：
- en: '![Figure 2.20 – Text Editor Behavior tab'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.20 - 文本编辑器行为选项卡
- en: '](img/Figure_2.20_B16231.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.20_B16231.jpg)'
- en: Figure 2.20 – Text Editor Behavior tab
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.20 - 文本编辑器行为选项卡
- en: Some developers prefer tab indentation over space indentation. You can change
    the indentation behavior in the **C++** and **Qt Quick** settings. Since there
    are dedicated settings as a different sidebar category, this section in **Text
    Editor** may be deprecated in future releases.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 一些开发人员更喜欢制表符缩进而不是空格缩进。你可以在**C++**和**Qt Quick**设置中更改缩进行为。由于有专门的设置作为不同的侧边栏类别，所以**文本编辑器**中的这一部分在未来的版本中可能会被弃用。
- en: You can find the file encoding of the current file in the **File Encodings**
    group. To modify the file encoding, select **New Encoding** from the dropdown.
    To view the file with the new encoding, click on the **Apply** button.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在**文件编码**组中找到当前文件的文件编码。要修改文件编码，从下拉菜单中选择**新编码**。要用新编码查看文件，点击**应用**按钮。
- en: We won't be discussing all of the sidebar categories as those are very advanced
    options. You can explore them later once you learn the basics. In the next section,
    we will discuss managing the coding window.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会讨论所有侧边栏类别，因为那些都是非常高级的选项。一旦你学会了基础知识，你可以在以后探索它们。在下一节中，我们将讨论管理编码窗口。
- en: Splitting the coding window
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分割编码窗口
- en: 'You can split the coding window and view multiple files on the same screen
    or on an external screen. You can view multiple files simultaneously in a selection
    of different ways (the options are available under the **Window** option in the
    menu bar):'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将编码窗口拆分并在同一屏幕或外部屏幕上查看多个文件。您可以以多种不同的方式同时查看多个文件（这些选项在菜单栏的**窗口**选项下可用）：
- en: '![Figure 2.21– A screenshot showing the spilt screen options'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.21– 展示拆分屏幕选项的截图'
- en: '](img/Figure_2.21_B16231.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.21_B16231.jpg)'
- en: Figure 2.21– A screenshot showing the spilt screen options
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.21– 展示拆分屏幕选项的截图
- en: 'Now let''s discuss various ways to split a coding window and remove a split
    window:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们讨论拆分编码窗口和删除拆分窗口的各种方法：
- en: To split the coding window into top and bottom views, press *Ctrl* + *E* and
    then *2*, or select the **Window** option in the menu bar and then click on the
    **Split** option. This will create an additional coding window below the currently
    active window.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要将编码窗口分割为上下视图，请按*Ctrl* + *E*，然后按*2*，或在菜单栏中选择**窗口**选项，然后单击**拆分**选项。这将在当前活动窗口下方创建一个额外的编码窗口。
- en: To split the coding window into adjacent views, select **Split Side by Side**
    or press *Ctrl* + *E* and then *3*. A side-by-side split creates views to the
    right of the currently active coding window.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要将编码窗口分割为相邻视图，请选择**并排拆分**或按*Ctrl* + *E*，然后按*3*。并排拆分会在当前活动编码窗口的右侧创建视图。
- en: To open the coding window in a detached window, press *Ctrl* + *E*, and *4*,
    or select **Open in New Window**. You can drag the window to an external monitor
    for convenience.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要在独立窗口中打开编码窗口，请按*Ctrl* + *E*，然后按*4*，或选择**在新窗口中打开**。您可以将窗口拖到外部监视器上以方便使用。
- en: To move between split views and detached editor windows, select **Next Split**
    or press *Ctrl* + *E*, and then *O*.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要在拆分视图和独立编辑器窗口之间移动，请选择**下一个拆分**或按*Ctrl* + *E*，然后按*O*。
- en: To remove a split view, click on the window you want to remove and select **Remove
    Current Split**, or press *Ctrl* + *E*, and then *0*.
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要删除拆分视图，请单击要删除的窗口，然后选择**删除当前拆分**，或按*Ctrl* + *E*，然后按*0*。
- en: To remove all split coding windows, select **Remove All Splits** or press *Ctrl*
    + *E*, and then *1*.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要删除所有拆分编码窗口，请选择**删除所有拆分**或按*Ctrl* + *E*，然后按*1*。
- en: In this section, you learned about splitting the coding editor window. This
    helps when referring to multiple code files at once while coding. In the next
    section, we will discuss the **Build** menu present in the IDE's menu bar.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您了解了如何拆分编码编辑器窗口。这在编码时同时引用多个代码文件时非常有用。在下一节中，我们将讨论IDE菜单栏中的**构建**菜单。
- en: Build options
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建选项
- en: 'In the menu bar, you can see the **Build** option. If you click that, then
    you will see various build options as shown in *Figure 2.22*. Here, you can build,
    rebuild, or clean your projects. In complex projects, you may have more than one
    subproject. You can build subprojects individually to reduce total build time:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在菜单栏中，您可以看到**构建**选项。如果单击该选项，那么您将看到各种构建选项，如*图2.22*所示。在这里，您可以构建、重新构建或清理您的项目。在复杂的项目中，您可能有多个子项目。您可以单独构建子项目以减少总体构建时间：
- en: '![Figure 2.22 – Build menu options'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.22 – 构建菜单选项'
- en: '](img/Figure_2.22_B16231.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.22_B16231.jpg)'
- en: Figure 2.22 – Build menu options
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.22 – 构建菜单选项
- en: 'Qt Creator project wizards allow you to choose the build system, including
    qmake, CMake, and Qbs, while creating a new project. It gives developers the freedom
    to use Qt Creator as a code editor and to have control of the steps or commands
    used in building a project. By default, qmake is installed and configured for
    your new project. You can learn more about using other build systems at the following
    link: [https://doc.qt.io/qtcreator/creator-project-other.html](https://doc.qt.io/qtcreator/creator-project-other.html).'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Creator项目向导允许您在创建新项目时选择构建系统，包括qmake、CMake和Qbs。它使开发人员可以自由地将Qt Creator用作代码编辑器，并控制构建项目时使用的步骤或命令。默认情况下，qmake已安装并配置为您的新项目。您可以在以下链接了解有关使用其他构建系统的更多信息：[https://doc.qt.io/qtcreator/creator-project-other.html](https://doc.qt.io/qtcreator/creator-project-other.html)。
- en: Now let's discuss where and how to look for the framework's documentation.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们讨论在哪里以及如何查找框架的文档。
- en: Qt Assistant
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Qt Assistant
- en: 'Qt Creator also includes a built-in documentation viewer called Qt Assistant.
    This is really handy since you can look for an explanation of a certain Qt class
    or function by simply hovering the mouse cursor over the class name in your source
    code and pressing the *F1* key. Qt Assistant will then be opened and will show
    you the documentation related to that Qt class or function:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Creator还包括一个名为Qt Assistant的内置文档查看器。这真的很方便，因为你可以通过简单地将鼠标悬停在源代码中的类名上并按下*F1*键来查找某个Qt类或函数的解释。然后Qt
    Assistant将被打开，并显示与该Qt类或函数相关的文档。
- en: '![Figure 2.23 – Integrated help interface'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.23 – 集成帮助界面'
- en: '](img/Figure_2.23_B16231.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.23_B16231.jpg)'
- en: Figure 2.23 – Integrated help interface
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.23 – 集成帮助界面
- en: Qt Assistant also provides support for interactive help and enables you to create
    help documentation for your Qt application.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Assistant还支持交互式帮助，并使您能够为Qt应用程序创建帮助文档。
- en: Note
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: On the Windows platform, Qt Assistant is available as a menu option on the Qt
    Creator menu bar. On Linux distributions, you can open Terminal, type `assistant`,
    and press *Enter*. On macOS, it is installed in the `/Developer/Applications/Qt`
    directory.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows平台上，Qt Assistant作为Qt Creator菜单栏上的一个菜单选项。在Linux发行版上，您可以打开终端，输入`assistant`，然后按*Enter*。在macOS上，它安装在`/Developer/Applications/Qt`目录中。
- en: In this section, we learned about Qt Assistant and the help documentation. Now,
    let's summarize our takeaways from this chapter.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们了解了Qt Assistant和帮助文档。现在，让我们总结一下本章的要点。
- en: Summary
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter explained the fundamentals of the Qt Creator IDE and what it can
    be used for. Qt Creator is an IDE with a great set of tools. It helps you to easily
    create great GUI applications for multiple platforms. Developers don't need to
    write lengthy code just to create a simple button or change a lot of code just
    to align a text label – Qt Designer automatically generates code for us when we
    design our GUI. We created a GUI application with just a few clicks, and we also
    learned about the various advanced options available in the IDE, including how
    to manage kits and shortcuts. The built-in Qt Assistant provides great help with
    useful examples and can help us with our own documentation.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了Qt Creator IDE的基本原理以及它可以用于什么。Qt Creator是一个带有一套强大工具的集成开发环境。它帮助您轻松地为多个平台创建出色的GUI应用程序。开发人员不需要编写冗长的代码来创建一个简单的按钮，也不需要改变大量的代码来对齐文本标签
    - 当我们设计GUI时，Qt Designer会自动生成代码。我们只需点击几下就创建了一个GUI应用程序，并且还学习了IDE中各种高级选项，包括如何管理工具包和快捷键。内置的Qt助手提供了有用的示例，并可以帮助我们编写自己的文档。
- en: In the next chapter, we will discuss GUI design using Qt Widgets. Here, you
    will learn about different widgets, how to create your own GUI element, and how
    to create a custom GUI application.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论使用Qt小部件进行GUI设计。在这里，您将学习不同的小部件，如何创建自己的GUI元素，以及如何创建自定义的GUI应用程序。
