["```cpp\n    git clone https://github.com/TrainingByPackt/Advanced-CPlusPlus/tree/master/Lesson1/Exercise01/project\n    ```", "```cpp\n    cd CxxTemplate\n    ```", "```cpp\n    find .\n    ```", "```cpp\n    cmake -Bbuild -H. -GNinja\n    ```", "```cpp\n    ls\n    ls build\n    ```", "```cpp\n    cd build\n    ninja\n    ```", "```cpp\n    ls\n    ```", "```cpp\n    ./CxxTemplate\n    ```", "```cpp\nstd::cout << \"Hello CMake.\" << std::endl;\n```", "```cpp\n    #include \"ANewClass.h\"\n    #include <iostream>\n    void ANewClass::run() {\n    \u00a0\u00a0\u00a0\u00a0std::cout << \"Hello from ANewClass.\" << std::endl;\n    }\n    ```", "```cpp\n    public:\n    \u00a0\u00a0\u00a0\u00a0void run(); // we added this line\n    \u00a0\u00a0\u00a0\u00a0ANewClass();\n    ```", "```cpp\n    #include \"CxxTemplate.h\"\n    #include \"ANewClass.h\"\n    #include <string>\n    ...\n    CxxApplication::CxxApplication( int argc, char *argv[] ) {\n    \u00a0\u00a0std::cout << \"Hello CMake.\" << std::endl;\n    \u00a0\u00a0::ANewClass anew;\n    \u00a0\u00a0anew.run();\n    }\n    ```", "```cpp\n    add_executable(CxxTemplate\n    \u00a0\u00a0src/CxxTemplate.cpp\u00a0\u00a0\n    \u00a0\u00a0src/ANewClass.cpp\n    )\n    ```", "```cpp\n    find_package(GTest)\n    if(GTEST_FOUND)\n    set(Gtest_FOUND TRUE)\n    endif()\n    if(GTest_FOUND)\n    include(GoogleTest)\n    endif()\n    # add these two lines below\n    enable_testing()\n    add_subdirectory(tests)\n    ```", "```cpp\n    include(GoogleTest)\n    add_executable(tests CanTest.cpp)\n    target_link_libraries(tests GTest::GTest)\n    gtest_discover_tests(tests)\n    ```", "```cpp\n    #include \"gtest/gtest.h\"\n    namespace {\n    class CanTest: public ::testing::Test {};\n    TEST_F(CanTest, CanReallyTest) {\n    \u00a0\u00a0EXPECT_EQ(0, 0);\n    }\n    }\u00a0\u00a0\n    int main(int argc, char **argv) {\n    \u00a0\u00a0::testing::InitGoogleTest(&argc, argv);\n    \u00a0\u00a0return RUN_ALL_TESTS();\n    }\n    ```", "```cpp\n    ./build/Debug/tests/tests\n    ```", "```cpp\n    cd build/Debug/tests\n    ctest\n    cd ../../..\n    ```", "```cpp\n    #ifndef SRC_SUMFUNC_H_\n    #define SRC_SUMFUNC_H_\n    int sum(int a, int b);\n    #endif /* SRC_SUMFUNC_H_ */\n    ```", "```cpp\n    #include \"SumFunc.h\"\n    #include <iostream>\n    int sum(int a, int b) {\n    \u00a0\u00a0return a + b;\n    }\n    ```", "```cpp\n    add_executable(CxxTemplate\n    \u00a0\u00a0src/CxxTemplate.cpp\u00a0\u00a0\n    \u00a0\u00a0src/ANewClass.cpp\n    \u00a0\u00a0src/SumFunc.cpp\n    )\n    ```", "```cpp\n#include \"gtest/gtest.h\"\nnamespace {\nclass CanTest: public ::testing::Test {};\nTEST_F(CanTest, CanReallyTest) {\n\u00a0\u00a0EXPECT_EQ(0, 0);\n}\n}\u00a0\u00a0\nint main(int argc, char **argv) {\n\u00a0\u00a0::testing::InitGoogleTest(&argc, argv);\n\u00a0\u00a0return RUN_ALL_TESTS();\n}\n```", "```cpp\n    #include \"gtest/gtest.h\"\n    #include \"../src/SumFunc.h\"\n    namespace {\n    \u00a0\u00a0class SumFuncTest: public ::testing::Test {};\n    \u00a0\u00a0TEST_F(SumFuncTest, CanSumCorrectly) {\n    \u00a0\u00a0\u00a0\u00a0EXPECT_EQ(7, sum(3, 4));\n    \u00a0\u00a0}\n    }\n    ```", "```cpp\n    include(GoogleTest)\n    add_executable(tests CanTest.cpp SumFuncTest.cpp ../src/SumFunc.cpp) # added files here\n    target_link_libraries(tests GTest::GTest)\n    gtest_discover_tests(tests)\n    ```", "```cpp\n    TEST_F(SumFuncTest, CanSumCorrectly) {\n    \u00a0\u00a0EXPECT_EQ(7, sum(3, 4));\n    }\n    // add this test\n    TEST_F(SumFuncTest, CanSumAbsoluteValues) {\n    \u00a0\u00a0EXPECT_EQ(6, sum(3, -3));\n    }\n    ```", "```cpp\n    TEST_F(SumFuncTest, CanSumCorrectly) {\n    \u00a0\u00a0EXPECT_EQ(7, sum(3, 4));\n    }\n    // change this part\n    TEST_F(SumFuncTest, CanUseNegativeValues) {\n    \u00a0\u00a0EXPECT_EQ(0, sum(3, -3));\n    }\n    ```", "```cpp\n    cd build/Debug\n    ```", "```cpp\n    make clean \n    make VERBOSE=1 all\n    ```", "```cpp\n    /usr/bin/c++\u00a0\u00a0\u00a0\u00a0-g\u00a0\u00a0\u00a0-pthread -std=gnu++1z -o CMakeFiles/CxxTemplate.dir/src/CxxTemplate.cpp.o -c /home/username/Packt/Cpp2019/CxxTemplate/src/CxxTemplate.cpp\n    /usr/bin/c++\u00a0\u00a0\u00a0\u00a0-g\u00a0\u00a0\u00a0-pthread -std=gnu++1z -o CMakeFiles/CxxTemplate.dir/src/ANewClass.cpp.o -c /home/username/Packt/Cpp2019/CxxTemplate/src/ANewClass.cpp\n    /usr/bin/c++\u00a0\u00a0\u00a0\u00a0-g\u00a0\u00a0\u00a0-pthread -std=gnu++1z -o CMakeFiles/CxxTemplate.dir/src/SumFunc.cpp.o -c /home/username/Packt/Cpp2019/CxxTemplate/src/SumFunc.cpp\n    /usr/bin/c++\u00a0\u00a0\u00a0\u00a0-g\u00a0\u00a0\u00a0-pthread -std=gnu++1z -o CMakeFiles/CxxTemplate.dir/src/LinearMotion1D.cpp.o -c /home/username/Packt/Cpp2019/CxxTemplate/src/LinearMotion1D.cpp\n    /usr/bin/c++\u00a0\u00a0-g\u00a0\u00a0\u00a0CMakeFiles/CxxTemplate.dir/src/CxxTemplate.cpp.o CMakeFiles/CxxTemplate.dir/src/ANewClass.cpp.o CMakeFiles/CxxTemplate.dir/src/SumFunc.cpp.o CMakeFiles/CxxTemplate.dir/src/LinearMotion1D.cpp.o\u00a0\u00a0-o CxxTemplate -pthread \n    ```", "```cpp\n    namei /usr/bin/c++\n    ```", "```cpp\n    cd ~/CxxTemplate\n    mkdir mybuild\n    ```", "```cpp\n    /usr/bin/c++ src/CxxTemplate.cpp -o mybuild/CxxTemplate.o -c \n    /usr/bin/c++ src/ANewClass.cpp -o mybuild/ANewClass.o -c \n    /usr/bin/c++ src/SumFunc.cpp -o mybuild/SumFunc.o -c \n    /usr/bin/c++ src/LinearMotion1D.cpp -o mybuild/LinearMotion1D.o -c \n    ```", "```cpp\n    cd mybuild\n    ls \n    ```", "```cpp\n    /usr/bin/c++\u00a0\u00a0CxxTemplate.o ANewClass.o SumFunc.o LinearMotion1D.o\u00a0\u00a0-o CxxTemplate \n    ```", "```cpp\n    ls \n    ```", "```cpp\n    ./CxxTemplate\n    ```", "```cpp\n    class MyClass {\n    private:\n    \u00a0\u00a0\u00a0\u00a0int a = 5;\n    \u00a0\u00a0\u00a0\u00a0int myPrivateFunc(int i) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a = 4;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return i + a;\n    \u00a0\u00a0\u00a0\u00a0}\n    public:\n    \u00a0\u00a0\u00a0\u00a0int b = 6;\n    \u00a0\u00a0\u00a0\u00a0int myFunc(){ \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return sum(1, myPrivateFunc(b));\n    \u00a0\u00a0\u00a0\u00a0}\n    };\n    MyClass myObject;\n    int main() {\n    \u00a0\u00a0\u00a0\u00a0myObject.myFunc();\n    }\n    ```", "```cpp\n    int i = 1, t = 0;\n    do {\n    \u00a0\u00a0t += i++;\n    } while (i <= 3);\n    std::cout << t << std::endl;\n    ```", "```cpp\n// Block 1\nif (result == 2) \nfirstFunction();\nsecondFunction();\n// Block 2\nif (result == 2) \n\u00a0\u00a0firstFunction();\nsecondFunction();\n```", "```cpp\nif (result == 2) \n\u00a0\u00a0firstFunction();\n\u00a0\u00a0secondFunction();\n```", "```cpp\nstudentsFile File = runFileCheck(\"students.dat\");\nbool flag = File.check();\nif (flag) {\n\u00a0\u00a0\u00a0\u00a0int Count_Names = 0;\n\u00a0\u00a0\u00a0\u00a0while (File.CheckNextElement() == true) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Count_Names += 1;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0std::cout << Count_Names << std::endl;\n}\n```", "```cpp\nint *input = getInputArray();\nint length = getInputArrayLength();\nint sum = 0;\nint minVal = 0;\nfor (int i = 0; i < length; ++i) {\n\u00a0\u00a0sum += input[i];\n\u00a0\u00a0if (i == 0 || minVal > input[i]) {\n\u00a0\u00a0\u00a0\u00a0minVal = input[i];\n\u00a0\u00a0}\n\u00a0\u00a0if (input[i] < 0) {\n\u00a0\u00a0\u00a0\u00a0input[i] *= -1;\n\u00a0\u00a0}\n}\n```", "```cpp\nint *input = getInputArray();\nint length = getInputArrayLength();\nint sum = 0;\nfor (int i = 0; i < length; ++i) {\n\u00a0\u00a0sum += input[i];\n}\nint minVal = 0;\nfor (int i = 0; i < length; ++i) {\n\u00a0\u00a0if (i == 0 || minVal > input[i]) {\n\u00a0\u00a0\u00a0\u00a0minVal = input[i];\n\u00a0\u00a0}\n}\nfor (int i = 0; i < length; ++i) {\n\u00a0\u00a0if (input[i] < 0) {\n\u00a0\u00a0\u00a0\u00a0input[i] *= -1;\n\u00a0\u00a0}\n}\n```", "```cpp\n//a is the input array and Len is its length\nvoid arrayPlay(int *a, int Len) { \n\u00a0\u00a0\u00a0\u00a0int S = 0;\n\u00a0\u00a0\u00a0\u00a0int M = 0;\n\u00a0\u00a0\u00a0\u00a0int Lim_value = 100;\n\u00a0\u00a0\u00a0\u00a0bool flag = true;\n\u00a0\u00a0\u00a0\u00a0for (int i = 0; i < Len; ++i) {\n\u00a0\u00a0\u00a0\u00a0S += a[i];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (i == 0 || M > a[i]) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0M = a[i];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (a[i] >= Lim_value) {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0flag = true;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (a[i] < 0) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a[i] *= 2;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\n    void arrayPlay(int *input, int inputLength) {\n    \u00a0\u00a0\u00a0\u00a0int S = 0;\n    \u00a0\u00a0\u00a0\u00a0int M = 0;\n    \u00a0\u00a0\u00a0\u00a0int Lim_value = 100;\n    \u00a0\u00a0\u00a0\u00a0bool flag = true;\n    \u00a0\u00a0\u00a0\u00a0for (int i = 0; i < inputLength; ++i) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0S += input[i];\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (i == 0 || M > input[i]) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0M = input[i];\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (input[i] >= Lim_value) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0flag = true;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (input[i] < 0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0input[i] *= 2;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cpp\n    void arrayPlay(int *input, int inputLength) {\n    \u00a0\u00a0\u00a0\u00a0int sum = 0;\n    \u00a0\u00a0\u00a0\u00a0int smallest = 0;\n    \u00a0\u00a0\u00a0\u00a0int topThreshold = 100;\n    \u00a0\u00a0\u00a0\u00a0bool isTopThresholdCrossed = true;\n    \u00a0\u00a0\u00a0\u00a0for (int i = 0; i < inputLength; ++i) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sum += input[i];\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (i == 0 || smallest > input[i]) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0smallest = input[i];\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (input[i] >= topThreshold) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0isTopThresholdCrossed = true;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (input[i] < 0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0input[i] *= 2;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cpp\n    void arrayPlay(int *input, int inputLength) {\n    \u00a0\u00a0\u00a0\u00a0// find the sum of the input\n    \u00a0\u00a0\u00a0\u00a0int sum = 0;\n    \u00a0\u00a0\u00a0\u00a0for (int i = 0; i < inputLength; ++i) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sum += input[i];\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0// find the smallest element\n    \u00a0\u00a0\u00a0\u00a0int smallest = 0;\n    \u00a0\u00a0\u00a0\u00a0for (int i = 0; i < inputLength; ++i) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (i == 0 || smallest > input[i]) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0smallest = input[i];\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0// determine whether top threshold is crossed\n    \u00a0\u00a0\u00a0\u00a0int topThreshold = 100;\n    \u00a0\u00a0\u00a0\u00a0bool isTopThresholdCrossed = true;\n    \u00a0\u00a0\u00a0\u00a0for (int i = 0; i < inputLength; ++i) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (input[i] >= topThreshold) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0isTopThresholdCrossed = true;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0// multiply each element by 2\n    \u00a0\u00a0\u00a0\u00a0for (int i = 0; i < inputLength; ++i) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (input[i] < 0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0input[i] *= 2;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cpp\n// SpeedCalculator.h\n#ifndef SRC_SPEEDCALCULATOR_H_\n#define SRC_SPEEDCALCULATOR_H_\nclass SpeedCalculator {\nprivate:\n\u00a0\u00a0\u00a0\u00a0int numEntries;\n\u00a0\u00a0\u00a0\u00a0double *positions;\n\u00a0\u00a0\u00a0\u00a0double *timesInSeconds;\n\u00a0\u00a0\u00a0\u00a0double *speeds;\npublic:\n\u00a0\u00a0\u00a0\u00a0void initializeData(int numEntries);\n\u00a0\u00a0\u00a0\u00a0void calculateAndPrintSpeedData();\n};\n#endif /* SRC_SPEEDCALCULATOR_H_ */\n\n//SpeedCalculator.cpp\n#include \"SpeedCalculator.h\"\n#include <cstdlib>\n#include <ctime>\n#include <iostream>\n#include <cassert>\nvoid SpeedCalculator::initializeData(int numEntries) {\n\u00a0\u00a0\u00a0\u00a0this->numEntries = numEntries;\n\u00a0\u00a0\u00a0\u00a0positions = new double[numEntries];\n\u00a0\u00a0\u00a0\u00a0timesInSeconds = new double[numEntries];\n\u00a0\u00a0\u00a0\u00a0srand(time(NULL));\n\u00a0\u00a0\u00a0\u00a0timesInSeconds[0] = 0.0;\n\u00a0\u00a0\u00a0\u00a0positions[0] = 0.0;\n\u00a0\u00a0\u00a0\u00a0for (int i = 0; i < numEntries; ++i) {\n\u00a0\u00a0\u00a0\u00a0positions[i] = positions[i-1] + (rand()%500);\n\u00a0\u00a0\u00a0\u00a0timesInSeconds[i] = timesInSeconds[i-1] + ((rand()%10) + 1);\n\u00a0\u00a0\u00a0\u00a0}\n}\nvoid SpeedCalculator::calculateAndPrintSpeedData() {\n\u00a0\u00a0\u00a0\u00a0double maxSpeed = 0;\n\u00a0\u00a0\u00a0\u00a0double minSpeed = 0;\n\u00a0\u00a0\u00a0\u00a0double speedLimit = 100;\n\u00a0\u00a0\u00a0\u00a0double limitCrossDuration = 0;\n\u00a0\u00a0\u00a0\u00a0for (int i = 0; i < numEntries; ++i) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0double dt = timesInSeconds[i+1] - timesInSeconds[i];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0assert (dt > 0);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0double speed = (positions[i+1] - positions[i]) / dt;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (maxSpeed < speed) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0maxSpeed = speed;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (minSpeed > speed) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0minSpeed = speed;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (speed > speedLimit) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0limitCrossDuration += dt;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0speeds[i] = speed;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0std::cout << \"Max speed: \" << maxSpeed << std::endl;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Min speed: \" << minSpeed << std::endl;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::cout << \"Total duration: \" << \ntimesInSeconds[numEntries - 1] - timesInSeconds[0] << \" seconds\" << std::endl;\n\u00a0\u00a0\u00a0\u00a0std::cout << \"Crossed the speed limit for \" << limitCrossDuration << \" seconds\"<< std::endl;\n\u00a0\u00a0\u00a0\u00a0delete[] speeds;\n}\n```"]