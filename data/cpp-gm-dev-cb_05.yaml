- en: Chapter 5. Event-Driven Programming – Making Your First 2D Game
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。事件驱动编程-制作你的第一个2D游戏
- en: 'In this chapter, the following recipes will be covered:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，将涵盖以下食谱：
- en: Starting to make a Windows game
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始制作Windows游戏
- en: Using Windows classes and handles
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Windows类和句柄
- en: Creating your first window
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建你的第一个窗口
- en: Adding keyboard and mouse controls with text output
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加键盘和鼠标控制以及文本输出
- en: Using Windows resources with GDI
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用GDI与Windows资源
- en: Using dialogs and controls
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用对话框和控件
- en: Using sprites
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用精灵
- en: Using animated sprites
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用动画精灵
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Windows programming is the start of creating proper applications. We need to
    know how to package our game into one executable file so that all our resources,
    such as images, models, and sounds, are encrypted properly and packaged into one
    file. By doing this, we make sure that the files are safe and cannot be illegally
    copied on distribution. The application, however, still makes use of these files
    at runtime.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Windows编程是创建适当应用程序的开始。我们需要知道如何将我们的游戏打包成一个可执行文件，以便我们的所有资源，如图像、模型和声音，都能得到适当的加密并打包成一个文件。通过这样做，我们确保文件是安全的，并且在分发时不能被非法复制。然而，应用程序仍然在运行时使用这些文件。
- en: Windows programming also marks the start of understanding the Windows Message
    Pump. This system is very important to understand, as all major programming paradigms
    depend on this principle, especially when we are doing event-driven programming.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Windows编程也标志着开始理解Windows消息泵。这个系统非常重要，因为所有主要的编程范式都依赖于这个原则，特别是当我们进行事件驱动的编程时。
- en: The main principle of event driven programming is that, based on events, we
    should process something. The concept to be understood here is how often we check
    for events and how often we should process them.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 事件驱动编程的主要原则是，基于事件，我们应该处理一些东西。这里需要理解的概念是我们多久检查一次事件以及我们应该多久处理它们。
- en: Starting to make a Windows game
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始制作Windows游戏
- en: The first thing to understand before we start making a Windows game is how a
    window or a message box is drawn. We need to be aware of the numerous inbuilt
    functions that Windows provides us with and the different callback functions that
    we can use.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始制作Windows游戏之前，首先要了解的是窗口或消息框是如何绘制的。我们需要了解Windows提供给我们的众多内置函数以及我们可以使用的不同回调函数。
- en: Getting ready
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To work through this recipe, you will need a machine running Windows. You also
    need to have a working copy of Visual Studio installed on your Windows machine.
    There are no other prerequisites.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个食谱，你需要一台运行Windows的机器。你还需要在Windows机器上安装一个可用的Visual Studio副本。没有其他先决条件。
- en: How to do it…
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In this recipe, we will see how easy it is to create a message box in Windows.
    There are different types of message box we can create, and it is only a matter
    of a few lines of code. Follow these steps:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将看到在Windows中创建消息框是多么容易。我们可以创建不同类型的消息框，只需要几行代码。按照以下步骤进行：
- en: Open Visual Studio.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio。
- en: Create a new C++ project.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的C++项目。
- en: Select a Win32 Windows application.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个Win32 Windows应用程序。
- en: Add a source file called `Source.cpp`.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`Source.cpp`的源文件。
- en: 'Add the following lines of code to `Source.cpp`:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`Source.cpp`中：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How it works…
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '`WINMAIN()` is the entry point of a Windows program. In this example, we have
    used the inbuilt function to create a message box. `windows.h` contains all the
    necessary files that we need to call the inbuilt functions present in the Windows
    API. A message box is typically used to display something. We can also associate
    message boxes with default Windows sounds. The display of the message box can
    also be controlled to a great extent. We need to use the right type of parameter
    to achieve this.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`WINMAIN()`是Windows程序的入口点。在这个例子中，我们使用了内置函数来创建一个消息框。`windows.h`包含了我们需要调用Windows
    API中的内置函数的所有必要文件。消息框通常用于显示一些内容。我们还可以将消息框与默认的Windows声音关联起来。消息框的显示也可以在很大程度上进行控制。我们需要使用正确类型的参数来实现这一点。'
- en: 'There are other types of message box that we can use as well:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用其他类型的消息框：
- en: '**MB_OK**: One button, with the **OK** message'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MB_OK**：一个按钮，带有**OK**消息'
- en: '**MB_OKCANCEL**: Two buttons, with the **OK**, **Cancel** message'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MB_OKCANCEL**：两个按钮，带有**OK**，**Cancel**消息'
- en: '**MB_RETRYCANCEL**: Two buttons, with the **Retry**, **Cancel** message'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MB_RETRYCANCEL**：两个按钮，带有**Retry**，**Cancel**消息'
- en: '**MB_YESNO**: Two buttons, with the **Yes**, **No** message'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MB_YESNO**：两个按钮，带有**Yes**，**No**消息'
- en: '**MB_YESNOCANCEL**: Three buttons, with the **Yes**, **No**, **Cancel** message'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MB_YESNOCANCEL**：三个按钮，带有**Yes**，**No**，**Cancel**消息'
- en: '**MB_ABORTRETRYIGNORE**: Three buttons, with the **Abort**, **Retry**, **Ignore**
    message'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MB_ABORTRETRYIGNORE**：三个按钮，带有**Abort**，**Retry**，**Ignore**消息'
- en: '**MB_ICONEXCLAIMATION**: An exclamation point icon appears'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MB_ICONEXCLAIMATION**：出现一个感叹号图标'
- en: '**MB_ICONINFORMATION**: An information icon appears'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MB_ICONINFORMATION**：出现一个信息图标'
- en: '**MB_ICONQUESTION**: A question mark icon appears'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MB_ICONQUESTION**：出现一个问号图标'
- en: '**MB_ICONSTOP**: A stop sign icon appears'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MB_ICONSTOP**：出现一个停止标志图标'
- en: Like all good Win32 or Win64 API functions, `MessageBox` returns a value to
    let us know what happened.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 像所有良好的Win32或Win64 API函数一样，`MessageBox`返回一个值，让我们知道发生了什么。
- en: Using Windows classes and handles
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Windows类和句柄
- en: To write games, we do not need to know a lot about Windows programming. What
    we need to know is how to open a window, how to process messages, and how to call
    the main game loop. The first task of a Windows application is to create a window.
    After the windows is created, we can do various other things, such as processing
    events and handling callbacks. These events are finally used by the game framework
    to display sprites on the screen and make them movable and interactive so that
    we can play a game.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了编写游戏，我们不需要对Windows编程了解很多。我们需要知道的是如何打开一个窗口，如何处理消息，以及如何调用主游戏循环。Windows应用程序的第一个任务是创建一个窗口。在窗口创建后，我们可以做各种其他事情，比如处理事件和处理回调。这些事件最终被游戏框架用来在屏幕上显示精灵，并使它们可移动和交互，以便我们可以玩游戏。
- en: Getting ready
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You need to have a working copy of Visual Studio installed on your Windows machine.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在Windows机器上安装一个可用的Visual Studio副本。
- en: How to do it…
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: In this recipe, we will find out how easy it is to use Windows classes and handles.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将发现使用Windows类和句柄有多么容易。
- en: Open Visual Studio.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio。
- en: Create a new C++ project.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的C++项目。
- en: Select a Win32 Windows application.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个Win32 Windows应用程序。
- en: Add a source file called `Source.cpp`.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`Source.cpp`的源文件。
- en: 'Add the following lines of code to it:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向其中添加以下代码行：
- en: '[PRE1]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works…
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'The entire `typedef` struct `_WNDCLASSEX` is defined as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 整个`typedef`结构`_WNDCLASSEX`的定义如下：
- en: '[PRE2]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The Windows API provides us with multiple API callbacks. We need to decide which
    message to intercept and what information to process in that message pump. For
    example, `WM_CREATE` is a Windows create function. We should perform most of our
    initializations here. Similarly, `WM_DESTROY` is where we need to destroy our
    created objects. We need to use GDI objects to paint boxes and other things on
    the window. We can also display our own cursors and icons on the window.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Windows API为我们提供了多个API回调。我们需要决定拦截哪个消息以及在该消息泵中处理哪些信息。例如，`WM_CREATE`是一个Windows创建函数。我们应该在这里执行大部分初始化。同样，`WM_DESTROY`是我们需要销毁已创建对象的地方。我们需要使用GDI对象在窗口上绘制框和其他东西。我们还可以在窗口上显示自己的光标和图标。
- en: Creating your first window
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建您的第一个窗口
- en: Creating a window is the first step in Windows programming. All our sprites
    and other objects will be drawn on top of this window. There is a standard way
    of drawing a window. So this part of the code will be repeated in all programs
    that use Windows programming to draw something.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个窗口是Windows编程的第一步。所有我们的精灵和其他对象都将绘制在这个窗口的顶部。有一个标准的绘制窗口的方法。因此，这部分代码将在所有使用Windows编程绘制东西的程序中重复。
- en: Getting ready
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You need to have a working copy of Visual Studio installed on your Windows machine.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在Windows机器上安装一个可用的Visual Studio副本。
- en: How to do it…
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'In this recipe, we will find out how easy it is to create a window:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将发现创建一个窗口有多么容易：
- en: Open Visual Studio.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio。
- en: Create a new C++ project.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的C++项目。
- en: Select a Win32 Windows application.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个Win32 Windows应用程序。
- en: Add a source file called `Source.cpp`.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`Source.cpp`的源文件。
- en: 'Add the following lines of code to it:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向其中添加以下代码行：
- en: '[PRE3]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works…
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In this example, we have used the standard Windows API callback. We query on
    the message parameter that is passed and, based on that, we intercept and perform
    suitable actions. We have used the `WM_PAINT` message to paint the window for
    us and the `WM_DESTROY` message to destroy the current window. To paint the window,
    we need a handle to the device context and then we can use `BeginPaint` and `EndPaint`
    appropriately. In the main structure, we need to fill up the Windows structures
    and specify the current cursor and icons that need to be loaded. Here, we can
    specify what color brush we are going to use to paint the window. Finally, the
    size of the window is specified and registered. After that, we need to continuously
    peek messages, translate them, and finally dispatch them to the Windows procedure.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用了标准的Windows API回调。我们查询传递的消息参数，并根据此拦截并执行适当的操作。我们使用`WM_PAINT`消息为我们绘制窗口，使用`WM_DESTROY`消息销毁当前窗口。要绘制窗口，我们需要一个设备上下文的句柄，然后我们可以适当地使用`BeginPaint`和`EndPaint`。在主结构中，我们需要填充Windows结构并指定需要加载的当前光标和图标。在这里，我们可以指定我们将使用什么颜色刷来绘制窗口。最后，指定窗口的大小并注册。之后，我们需要不断地查看消息，将其翻译，并最终将其分派到Windows过程中。
- en: Adding keyboard and mouse controls with text output
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加键盘和鼠标控制以及文本输出
- en: One of the most important things that we require in a video game is a human
    interface to interact with. The most common interface devices are the keyboard
    and the mouse. Therefore, it is very important to understand how they work and
    how we can detect key presses and movements. It is equally important to know how
    to display specific text on the screen; this can be really useful for debugging
    and for HUD implementation.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在视频游戏中，我们最需要的一个重要的东西是与之交互的人机界面。最常见的界面设备是键盘和鼠标。因此，了解它们的工作原理以及如何检测按键和移动是非常重要的。同样重要的是要知道如何在屏幕上显示特定的文本；这对于调试和HUD实现非常有用。
- en: Getting ready
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, you will need a Windows machine with a working copy of Visual
    Studio.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个教程，您需要一个带有可用的Visual Studio副本的Windows机器。
- en: How to do it…
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'In this recipe, we will find out how easy it is to detect keyboard and mouse
    events:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将发现检测键盘和鼠标事件有多么容易：
- en: Open Visual Studio.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio。
- en: Create a new C++ project.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的C++项目。
- en: Select a Win32 Windows application.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个Win32 Windows应用程序。
- en: Add a source file called `Source.cpp`.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`Source.cpp`的源文件。
- en: 'Add the following lines of code to it:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向其中添加以下代码行：
- en: '[PRE4]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How it works…
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The main window is created and registered. In the callback function, we use
    a function called `GetAsyncKeyState(VK_KEYNAME)` to detect which key was pressed.
    After that, we perform a bitwise `AND` operation to check whether the last key
    press was also the same key and whether it has actually been pressed. We then
    have different Boolean parameters to detect the state of the key press and store
    them. The code could be structured in a better way, but this is the easiest way
    to understand how to detect key presses. To detect the mouse movement coordinates,
    we use a function called `GetCursorPos` inside `WM_MOUSEMOVE` and accordingly
    get the *x* and *y* coordinates on screen. Finally, we need to display all this
    information on the screen. To do this, we create a rectangle on screen. In that
    rectangle, we need to use a function called `TextOut` to display that information.
    The `TextOut` function uses the handle to the device context, the *x* and *y*
    coordinates, and the message to be displayed.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 创建并注册主窗口。在回调函数中，我们使用一个名为`GetAsyncKeyState(VK_KEYNAME)`的函数来检测按下了哪个键。之后，我们执行按位`AND`操作来检查最后一次按键是否也是相同的键，并且它是否实际被按下。然后，我们有不同的布尔参数来检测按键按下的状态并存储它们。代码可能以更好的方式结构化，但这是理解如何检测按键按下的最简单方式。为了检测鼠标移动坐标，我们在`WM_MOUSEMOVE`中使用一个名为`GetCursorPos`的函数，并相应地获取屏幕上的*x*和*y*坐标。最后，我们需要在屏幕上显示所有这些信息。为此，我们在屏幕上创建一个矩形。在那个矩形中，我们需要使用一个名为`TextOut`的函数来显示该信息。`TextOut`函数使用设备上下文的句柄、*x*和*y*坐标以及要显示的消息。
- en: Using Windows resources with GDI
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Windows资源与GDI
- en: '**Graphics** **Device Interface** (**GDI**) allows us to do interesting things
    using bitmaps, icons cursors, and so on. GDI is used as a rendering alternative
    if we are not implementing any other rendering alternatives such as OpenGL or
    DirectX.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**图形** **设备接口**（**GDI**）允许我们使用位图、图标、光标等进行有趣的事情。如果我们没有实现其他渲染替代方案，如OpenGL或DirectX，GDI将用作渲染替代方案。'
- en: Getting ready
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, you will need a Windows machine with a working copy of Visual
    Studio.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个教程，您需要一台运行Windows的计算机，并安装了可用的Visual Studio副本。
- en: How to do it…
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'In this recipe, we will find out how easy it is to load resources using the
    Windows GDI:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将发现使用Windows GDI加载资源有多么容易：
- en: Open Visual Studio.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio。
- en: Create a new C++ project.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的C++项目。
- en: Select a Win32 Windows application.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个Win32 Windows应用程序。
- en: Right-click on **Resource files** and add a new cursor from the **Add Resource**
    subsection.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击**资源文件**，并从**添加资源**子部分添加一个新的光标。
- en: A `resource.h` file will automatically be created for you.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将自动为您创建一个`resource.h`文件。
- en: 'Add a source file called `Source.cpp` and add the following code to it:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`Source.cpp`的源文件，并向其中添加以下代码：
- en: '[PRE5]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works…
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'Loading up the new cursor is the easiest task to achieve. We need to modify
    the following line:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 加载新的光标是最容易实现的任务。我们需要修改以下行：
- en: '[PRE6]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If we specify null here, the default windows cursor will be loaded. Instead,
    we can load the cursor that we just created. Make sure the reference name of the
    cursor in `resource.h` is specified as `IDC_CURSOR2`. We can name it anything
    we want, but we need to call the appropriate reference from the `LoadCursor` function.
    `MAKEINTRESOURCE` enables us to relate to the resource file from the source code.
    Similarly, we can load multiple cursors and switch them at runtime if we so desire.
    The same process is used for loading other resources, such as icons and other
    bitmaps. When we modify a resource file, the corresponding `resource.h` file must
    be closed or it will not allow us to edit it. Similarly, if we want to manually
    edit the `source.h` file, we need to close the corresponding `.rc` or resource
    file.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在这里指定null，将加载默认的Windows光标。相反，我们可以加载刚刚创建的光标。确保在`resource.h`中指定光标的引用名称为`IDC_CURSOR2`。我们可以随意命名它，但是我们需要从`LoadCursor`函数中调用适当的引用。`MAKEINTRESOURCE`使我们能够从源代码中关联到资源文件。同样，如果需要，我们可以加载多个光标并在运行时切换它们。加载其他资源，如图标和其他位图时，也使用相同的过程。当我们修改资源文件时，相应的`resource.h`文件必须关闭，否则将无法编辑它。同样，如果我们想手动编辑`source.h`文件，我们需要关闭相应的`.rc`或资源文件。
- en: Using dialogs and controls
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用对话框和控件
- en: 'Dialogs are one of the mandatory features of Windows programming. If we are
    creating a complete application, there will be a stage when we will require dialogs
    in some form. Dialogs could be in the form of edit boxes, radio buttons, check
    boxes, and so on. Dialogs come in two forms: modal and modeless. Modal dialog
    boxes require an immediate response, whereas modeless dialog boxes are more like
    floating boxes and do not require an immediate response.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 对话框是Windows编程的强制特性之一。如果我们正在创建一个完整的应用程序，总会有一个阶段需要以某种形式使用对话框。对话框可以是编辑框、单选按钮、复选框等形式。对话框有两种形式：模态和非模态。模态对话框需要立即响应，而非模态对话框更像是浮动框，不需要立即响应。
- en: Getting ready
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To work through this recipe, you will need a machine running Windows. You also
    need to have a working copy of Visual Studio installed on your Windows machine.
    No other prerequisites are required.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个教程，您需要一台运行Windows的计算机。您还需要在Windows计算机上安装一个可用的Visual Studio副本。不需要其他先决条件。
- en: How to do it…
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: In this recipe, we will find out how easy it is to create dialog boxes.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将发现创建对话框有多么容易。
- en: Open Visual Studio.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio。
- en: Create a new C++ project.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的C++项目。
- en: Select a Win32 windows application.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个Win32窗口应用程序。
- en: Create a new resource file.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的资源文件。
- en: Select dialog as the type of resource.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择对话框作为资源的类型。
- en: Edit the box in whatever way you desire.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以您想要的任何方式编辑框。
- en: A corresponding `resource.h` file will be created.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将创建一个相应的`resource.h`文件。
- en: 'Add the following code to `Source.cpp` file:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`Source.cpp`文件中：
- en: '[PRE7]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works…
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'After the `resource.h` file is automatically created for us, we can manually
    edit it to name the dialog appropriately. After the main window is created, we
    need to get a handle to the window and then call the dialog box function like
    this:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在`resource.h`文件自动为我们创建之后，我们可以手动编辑它以适当地命名对话框。创建主窗口后，我们需要获取窗口句柄，然后调用对话框框函数，如下所示：
- en: '[PRE8]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Very much like the main window callback, the dialog box has its own callback.
    We need to intercept the messages accordingly and perform our actions. `BOOL CALLBACK
    AboutDlgProc` is the callback that we have at our disposal. We have a similar
    initialize message. For our dialog boxes, most of the intercepts will take place
    in `WM_COMMAND`. Based on the `wparam` parameter, we need to switch, so that know
    whether we have clicked the **OK** button or the **CANCEL** button and can take
    the appropriate steps.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 与主窗口回调非常相似，对话框框也有自己的回调。我们需要相应地拦截消息并执行我们的操作。`BOOL CALLBACK AboutDlgProc`是我们可以使用的回调。我们有一个类似的初始化消息。对于我们的对话框，大多数拦截将发生在`WM_COMMAND`中。根据`wparam`参数，我们需要进行切换，以便知道我们是否点击了**OK**按钮还是**CANCEL**按钮，并采取适当的步骤。
- en: Using sprites
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用精灵
- en: To develop any 2D game, we need sprites. Sprites are elements of computer graphics
    that can stay on screen, be manipulated, and be animated. GDI allows us to use
    sprites to create our game. Probably all the assets in the game will be sprites,
    from the UI to the main characters, and so on.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 要开发任何2D游戏，我们都需要精灵。精灵是计算机图形的元素，可以保持在屏幕上，被操纵和被动画化。GDI允许我们使用精灵来创建我们的游戏。可能游戏中的所有资源都将是精灵，从UI到主要角色等等。
- en: Getting ready
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: For this recipe, you will need a Windows machine with a working copy of Visual
    Studio.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，您需要一台运行Windows的机器，并且安装了Visual Studio的工作副本。
- en: How to do it…
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In this recipe, we will find out how to use sprites in our game:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将了解如何在游戏中使用精灵：
- en: Open Visual Studio.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio。
- en: Create a new C++ project.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的C++项目。
- en: Create a new resource type.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的资源类型。
- en: Select the **Sprite** option as the new resource type.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Sprite**选项作为新的资源类型。
- en: 'Add the following source files: `backbuffer.h/cpp`, `Clock.h/cpp`, `Game.h/.cpp`,
    `sprite.h/cpp`, and `Utilities.h`.'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下源文件：`backbuffer.h/cpp`，`Clock.h/cpp`，`Game.h/.cpp`，`sprite.h/cpp`和`Utilities.h`。
- en: 'Add the following lines of code to `backbuffer.h`:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`backbuffer.h`中：
- en: '[PRE9]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Add the following lines of code to `backbuffer.cpp`:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`backbuffer.cpp`中：
- en: '[PRE10]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Add the following lines of code to `Clock.h`:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`Clock.h`中：
- en: '[PRE11]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Add the following lines of code to `Clock.cpp`:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`Clock.cpp`中：
- en: '[PRE12]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Add the following lines of code to `Game.h`:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`Game.h`中：
- en: '[PRE13]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Add the following lines of code to `Game.cpp`:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`Game.cpp`中：
- en: '[PRE14]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Add the following lines of code to `sprite.h`:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`sprite.h`中：
- en: '[PRE15]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Add the following lines of code to `sprite.cpp`:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`sprite.cpp`中：
- en: '[PRE16]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Add the following lines of code to `Utilities.h`:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`Utilities.h`中：
- en: '[PRE17]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: How it works…
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As we know, the backbuffer is used to draw the image first and then we swap
    the buffer to present it to the screen. This process is also called *presenting*.
    We create a generic `backbuffer` class that helps us to swap the buffer. The `sprite`
    class is used to load the sprites and push them on to the back buffer, where they
    can be processed and finally drawn on the screen. The sprite class is also provided
    with some basic utility functions that help us to get the width and height of
    the sprite. Most of the functions are just a wrapper on top of Windows' own API
    functions and callbacks. We have also created a `clock` class, which helps us
    to keep track of time, as each time point should be implemented as a function
    of delta time. If we do not do this, then the game might run with fluctuating
    behavior, based on the machine that is executing it. The `game` class is used
    to put all of it together. It has an instance of `backbuffer`, which is a singleton
    class and handles the context of the window and other resources.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所知，后备缓冲用于首先绘制图像，然后我们交换缓冲区以将其呈现到屏幕上。这个过程也被称为*呈现*。我们创建了一个通用的`backbuffer`类，它帮助我们交换缓冲区。`sprite`类用于加载精灵并将它们推送到后备缓冲区，然后可以对它们进行处理并最终绘制到屏幕上。精灵类还提供了一些基本的实用函数，帮助我们获取精灵的宽度和高度。大多数函数只是在Windows自己的API函数和回调的顶部包装。我们还创建了一个`clock`类，它帮助我们跟踪时间，因为每个时间点都应该实现为时间增量的函数。如果我们不这样做，那么游戏可能会根据执行它的机器而出现波动的行为。`game`类用于将所有内容放在一起。它有一个`backbuffer`的实例，这是一个单例类，处理窗口和其他资源的上下文。
- en: Using animated sprites
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用动画精灵
- en: Using animated sprites is an important part of games programming. Unless some
    kind of animation is applied to the sprites, it will not appear realistic enough
    and the whole mood of immersion in the game will be lost. Although animations
    can be achieved in a variety of ways, we will only look at sprite strip animation,
    as it is the most commonly used form of animation for 2D games.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 使用动画精灵是游戏编程的重要部分。除非对精灵应用某种形式的动画，否则它看起来不够真实，整个游戏沉浸感将会丧失。虽然动画可以通过多种方式实现，但我们只会看到精灵带动画的条带动画，因为这是2D游戏中最常用的动画形式。
- en: Getting ready
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: To work through this recipe, you will need a machine running Windows. You also
    need to have a working copy of Visual Studio installed on your Windows machine.
    No other prerequisites are required.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个示例，您需要一台运行Windows的机器。您还需要在Windows机器上安装Visual Studio的工作副本。不需要其他先决条件。
- en: How to do it…
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: In this recipe, we will find out how easy it is to create dialog boxes.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将发现创建对话框有多么容易。
- en: Open Visual Studio.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio。
- en: Create a new C++ project.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的C++项目。
- en: Select a Win32 Windows application.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择Win32 Windows应用程序。
- en: Add a `AnimatedSprite.cpp` file.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`AnimatedSprite.cpp`文件。
- en: 'Add the following lines of code to `Source.cpp`:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`Source.cpp`中：
- en: '[PRE18]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: How it works…
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: For the animation to work, we need to load in a sequence of images as sprite
    strips. The higher the number of images, the smoother the animation will be. For
    the equivalent number of sprites, we need to load in their masks as well, so that
    they can be blitted together. We need to store all the images in a vector list.
    For the animation to work properly, all the images must be equally spaced out.
    After we have stored them correctly, we can run the animations as rapidly or slowly
    as we want, by controlling how many frames/sprites we want to draw in a certain
    amount of time. The remaining process of drawing the sprite on the screen remains
    the same.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使动画正常工作，我们需要加载一系列图像作为精灵条。图像数量越多，动画就会更流畅。对于相应数量的精灵，我们还需要加载它们的蒙版，以便它们可以一起贴图。我们需要将所有图像存储在一个向量列表中。为了使动画正常工作，所有图像必须等间距分布。在正确存储它们之后，我们可以通过控制在一定时间内要绘制多少帧/精灵来以我们想要的速度快速或缓慢地运行动画。在屏幕上绘制精灵的剩余过程保持不变。
