- en: Remote Databases with Qt SQL
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Qt SQL 的远程数据库
- en: Qt SQL is not dependent on any particular database driver. The same API can
    be used with various popular database backends. Databases can get huge storage,
    whereas mobile and embedded devices have limited amounts of storage, more so with
    embedded devices than mobile phones. You will learn about using Qt to access databases
    remotely over the network.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Qt SQL 不依赖于任何特定的数据库驱动程序。相同的 API 可以与各种流行的数据库后端一起使用。数据库可以拥有巨大的存储空间，而移动和嵌入式设备存储量有限，嵌入式设备比手机更有限。您将学习如何使用
    Qt 通过网络远程访问数据库。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中介绍以下主题：
- en: Drivers
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 驱动程序
- en: Connecting to database
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接到数据库
- en: Creating a database
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建数据库
- en: Adding to a database
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向数据库添加
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You can grab this chapter's source code in the `cp10` branch at `git clone -b
    cp10 https://github.com/PacktPublishing/Hands-On-Mobile-and-Embedded-Development-with-Qt-5`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 `cp10` 分支中获取本章的源代码，地址为 `git clone -b cp10 https://github.com/PacktPublishing/Hands-On-Mobile-and-Embedded-Development-with-Qt-5`。
- en: You should also have installed the `sqlite` or `mysql` package for your system.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 您还应该为您的系统安装了 `sqlite` 或 `mysql` 软件包。
- en: Drivers are database backends
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 驱动程序是数据库后端
- en: 'Qt supports a variety of database drivers or backends to the databases. The
    backends wrap the various system databases and allow Qt to have a unified API
    frontend. Qt supports the following database types:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Qt 支持各种数据库驱动程序或后端，这些后端封装了各种系统数据库，并允许 Qt 拥有一个统一的 API 前端。Qt 支持以下数据库类型：
- en: '| Database types | Software |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| 数据库类型 | 软件 |'
- en: '| QDB2 | IBM Db2 |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| QDB2 | IBM Db2 |'
- en: '| QIBASE | Borland InterBase |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| QIBASE | Borland InterBase |'
- en: '| QMYSQL | MySQL |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| QMYSQL | MySQL |'
- en: '| QOCI | Oracle Call Interface |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| QOCI | Oracle Call Interface |'
- en: '| QODBC | ODBC |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| QODBC | ODBC |'
- en: '| QPSQL | PostgreSQL |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| QPSQL | PostgreSQL |'
- en: '| QSQLITE | SQLite version 3 or above |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| QSQLITE | SQLite 版本 3 或以上 |'
- en: '| QSQLITE2 | SQLite version 2 |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| QSQLITE2 | SQLite 版本 2 |'
- en: '| QTDS | Sybase Adaptive Server |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| QTDS | Sybase Adaptive Server |'
- en: We will be looking into QMYSQL type, since it supports remote access. MySQL
    can be installed on Raspberry Pi. QSQLITE3 can be shared on a network resource
    and made to support remote access, and iOS and Android have support for SQLite.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将探讨 QMYSQL 类型，因为它支持远程访问。MySQL 可以安装在树莓派上。 QSQLITE3 可以在网络资源上共享并支持远程访问，iOS 和
    Android 也支持 SQLite。
- en: Setup
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置
- en: 'The MySQL database will need to be configured to let you have remote access
    to it. Let''s look at how we can do this:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 数据库需要配置以允许您远程访问它。让我们看看我们如何做到这一点：
- en: You will need to have the server and/or client installed.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要安装服务器和/或客户端。
- en: Then, we'll create the database and make it accessible from the network, if
    needed. This will be done using the command line and a Terminal application.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将创建数据库并在需要时使其可通过网络访问。这将通过命令行和终端应用程序来完成。
- en: The MySQL server
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MySQL 服务器
- en: I am using Ubuntu, so these commands will be mostly specific to a Debian-based
    Linux. If you are using a different Linux distribution, only the installation
    command would be different. You should install the MySQL server and client according
    to your distribution. The commands to create the database would be the same.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用的是 Ubuntu，因此这些命令将主要针对基于 Debian 的 Linux。如果您使用的是不同的 Linux 发行版，只有安装命令会有所不同。您应根据您的发行版安装
    MySQL 服务器和客户端。创建数据库的命令将是相同的。
- en: 'Here''s how we will set up the server:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们将如何设置服务器的方式：
- en: 'You will need the MySQL server and client installed:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要安装 MySQL 服务器和客户端：
- en: '`sudo apt-get install mysql-server mysql-client`'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`sudo apt-get install mysql-server mysql-client`'
- en: 'Run `sudo mysql_secure_installation`, which will allow you to set up the root
    account. Then, log in to the `mysql` root account:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `sudo mysql_secure_installation`，这将允许您设置 root 账户。然后，登录到 `mysql` root 账户：
- en: '`sudo mysql -u root -p`'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`sudo mysql -u root -p`'
- en: Create a new database `username` and `password`: `GRANT ALL PRIVILEGES ON *.*
    TO 'username'@'localhost' IDENTIFIED BY 'password';`. Change `username` to your
    database user, and `password` to a password you want to use to access this database.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建新的数据库 `username` 和 `password`： `GRANT ALL PRIVILEGES ON *.* TO 'username'@'localhost'
    IDENTIFIED BY 'password';`。将 `username` 替换为您的数据库用户，将 `password` 替换为您想要用于访问此数据库的密码。
- en: To make the server accessible from a host other than localhost, edit `/etc/mysql/mysql.conf.d/mysqld.cnf`.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使服务器可以从除了 localhost 之外的主机访问，请编辑 `/etc/mysql/mysql.conf.d/mysqld.cnf`。
- en: 'Change the `bind-address = localhost to bind-address = <your ip>` line, `<your
    ip>` being the IP address of the machine that the database is on. Then, restart
    the `mysql` server:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`bind-address = localhost`行更改为`bind-address = <your ip>`，其中`<your ip>`是数据库所在机器的IP地址。然后，重启`mysql`服务器：
- en: '`sudo  service mysql restart`'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`sudo service mysql restart`'
- en: 'Back in your MySQL console, let a remote user access the database:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的MySQL控制台中，允许远程用户访问数据库：
- en: '`GRANT ALL ON *.* TO ''username''@''<your ip>'' IDENTIFIED BY ''password'';`'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`GRANT ALL ON *.* TO ''username''@''<your ip>'' IDENTIFIED BY ''password'';`'
- en: Change `<your ip>` to the IP address or hostname of the client device, `username`
    to the username you used on the MySQL server, and `password` to the password they
    will use.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 将`<your ip>`更改为客户端设备的IP地址或主机名，`username`更改为你在MySQL服务器上使用的用户名，`password`更改为他们将要使用的密码。
- en: SQLite
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQLite
- en: SQLite is a file-based database and, as such, there is no such thing as a server.
    We can still connect to it remotely via a network filesystem, such as Windows
    file sharing/Samba, **Network File System** (NFS), or the **Secure Shell File
    System** (**SSHFS**) on Linux. SSHFS allows you to mount and access a remote filesystem
    like it is a local filesystem.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite是一个基于文件的数据库，因此没有服务器这样的东西。我们仍然可以通过网络文件系统远程连接到它，例如Windows文件共享/Samba、**网络文件系统**（NFS）或Linux上的**安全外壳文件系统**（SSHFS）。SSHFS允许你像本地文件系统一样挂载和访问远程文件系统。
- en: There's no need to create a database manually using arcane commands unless you
    need to, as we will create it using Qt!
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 除非你需要，否则没有必要手动使用晦涩的命令来创建数据库，因为我们将会使用Qt来创建它！
- en: On Android, there are Samba clients, which will mount a Windows network share
    so we can use that. If you are using a Raspberry Pi or some other development
    board, you might be able to use SSHFS to mount a remote directory over SSH.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android上，有Samba客户端，可以将Windows网络共享挂载，这样我们就可以使用它。如果你使用Raspberry Pi或其他开发板，你可能能够使用SSHFS通过SSH挂载远程目录。
- en: Connecting to a local or remote database
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接到本地或远程数据库
- en: Once we have the database configured and running, we can now connect to it using
    the same functions regardless of whether it is local or a remote database. Now,
    let's take a look at writing code to connect to a database, whether local or remote.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们配置并启动了数据库，现在我们可以使用相同的函数连接到它，无论它是本地数据库还是远程数据库。现在，让我们看看如何编写代码来连接到数据库，无论是本地还是远程。
- en: Databases are either locally available, which usually means on the same machine,
    or accessed remotely over a network. Connecting to these different databases using
    Qt is essentially the same. Not all databases support remote access.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库要么是本地可用的，这通常意味着在同一台机器上，要么通过网络远程访问。使用Qt连接到这些不同的数据库基本上是相同的。并非所有数据库都支持远程访问。
- en: Let's begin by using a local database.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们使用本地数据库。
- en: 'To use the `sql` module, we need to add `sql` to the profile:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`sql`模块，我们需要将`sql`添加到配置文件中：
- en: '`QT += sql`'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`QT += sql`'
- en: To connect to a database in Qt, we need to use the `QSqlDatabase` class.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Qt中连接到数据库，我们需要使用`QSqlDatabase`类。
- en: QSqlDatabase
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QSqlDatabase
- en: Despite the name, `QSqlDatabase` represents a connection to a database, not
    the database itself.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管名字叫`QSqlDatabase`，但它代表的是对数据库的连接，而不是数据库本身。
- en: To create a connection to a database, you first need to specify which database
    type you are using. It is referenced as a string representation of the supported
    database. Let's first choose the MySQL `QMYSQL` database.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建数据库连接，你首先需要指定你正在使用的数据库类型。它以支持数据库的字符串表示形式引用。让我们首先选择MySQL的`QMYSQL`数据库。
- en: The source code can be found on the Git repository under the `Chapter10-1` directory,
    in the `cp10` branch.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码可以在Git仓库的`Chapter10-1`目录下的`cp10`分支中找到。
- en: To use `QSqlDatabase`, we first need to add the database to create its instance.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`QSqlDatabase`，我们首先需要添加数据库以创建其实例。
- en: The static `QSqlDatbase::addDatabase` function takes one parameter, that of
    a database type, and adds the instance of the database to the list of database
    connections.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 静态的`QSqlDatbase::addDatabase`函数接受一个参数，即数据库类型，并将数据库实例添加到数据库连接列表中。
- en: 'Here, we add a MySQL database, so use the `QMYSQL` type:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们添加一个MySQL数据库，所以使用`QMYSQL`类型：
- en: '[PRE0]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you are connecting to a SQLite database, use the `MSQLITE` database type:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在连接到SQLite数据库，请使用`MSQLITE`数据库类型：
- en: '[PRE1]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Most databases require a username and password. To set the `username` and `password`,
    use the following:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数数据库都需要用户名和密码。要设置`username`和`password`，请使用以下命令：
- en: '[PRE2]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Since we are connecting to a remote MySQL database, we need to specify the
    hostname as well. It can also be an IP address:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在连接到远程MySQL数据库，因此我们需要指定主机名。它也可以是一个IP地址：
- en: '[PRE3]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To start the connection, call the `open()` function:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始连接，请调用 `open()` 函数：
- en: '[PRE4]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`open` returns a `bool`, which is `true` if it was successful, or `false` if
    it failed, in which case we can check the error:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`open` 返回一个 `bool`，如果成功则为 `true`，如果失败则为 `false`，在这种情况下我们可以检查错误：'
- en: '[PRE5]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If this opens successfully, we are connected to the database.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这成功打开，我们就连接到了数据库。
- en: Let's actually create the remote database, since we have the needed permissions.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们实际上创建远程数据库，因为我们有需要的权限。
- en: Creating and opening a database
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和打开数据库
- en: 'For the SQLite database, once we open it, it creates the database on the filesystem.
    For MySQL, we have to send MySQL commands to create the database. We construct
    the SQL query using `QSqlQuery` do this in MySQL. `QSqlQuery` takes the database
    object as an argument:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 SQLite 数据库，一旦我们打开它，它就会在文件系统中创建数据库。对于 MySQL，我们必须发送 MySQL 命令来创建数据库。我们使用 `QSqlQuery`
    构建SQL查询来完成这一点。`QSqlQuery` 将数据库对象作为参数：
- en: '[PRE6]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To send a query, we call the `exec()` function on the `QSqlQuery` object. It
    takes a `String` as a typical `query` syntax:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要发送查询，我们在 `QSqlQuery` 对象上调用 `exec()` 函数。它需要一个 `String` 作为典型的 `query` 语法：
- en: '[PRE7]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`dbname` here is any `String` we want the database name to be; I am using `MAEPQT
    db`.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`dbname` 这里是任何我们希望数据库名称为 `String`；我正在使用 `MAEPQT db`。'
- en: 'If this command fails, we issue a warning message. If it succeeds, then we
    go on and issue the command to `USE` it, so we call another `query` command:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个命令失败，我们发出警告消息。如果成功，我们就继续发出命令来 `USE` 它，所以我们调用另一个 `query` 命令：
- en: '[PRE8]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: From here, we need to create some tables. I will keep it simple and fill it
    with some data.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里开始，我们需要创建一些表格。我会让它保持简单，并填充一些数据。
- en: 'We start another query, but with an empty command, and the `db` object as the
    second argument, which will create the `QSqlQuery` object on the specified database,
    but does not execute any commands until we are ready:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们开始另一个查询，但使用空命令，并将 `db` 对象作为第二个参数，这将创建指定数据库上的 `QSqlQuery` 对象，但在我们准备好之前不会执行任何命令：
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The database is prepared, so now we can add some data.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库已准备就绪，因此现在我们可以添加一些数据。
- en: Adding data to the database
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向数据库添加数据
- en: The Qt documents state that it is not a best practice to keep the `QSqlDatabase`
    object around.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Qt 文档指出，保留 `QSqlDatabase` 对象不是一个最佳实践。
- en: 'Here are a few different ways we could go about this:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些不同的方法我们可以这样做：
- en: 'We could use `QSqlDatabase::database` to grab an instance of the opened database:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用 `QSqlDatabase::database` 来获取已打开数据库的实例：
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We can also use another function of `QSqlQuery` , named `prepare()`, which prepares
    the query string for execution using a proxy variable.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以使用 `QSqlQuery` 的另一个函数，名为 `prepare()`，它使用代理变量准备查询字符串以执行。
- en: 'Then, we can use `bindValue` to bind the value to its identifier:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用 `bindValue` 将值绑定到其标识符：
- en: '[PRE11]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'As an alternative, you can call `bindValue` with the first argument being the
    index of the position of the identifier, starting at the number 0 and working
    upward through the values:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为一种替代方案，你可以使用 `bindValue` 函数，并将第一个参数设置为标识符的位置索引，从数字 0 开始，向上通过值进行操作：
- en: '[PRE12]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You can also use `bindValue` in the order of values:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以按值的顺序使用 `bindValue`：
- en: '[PRE13]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Next, let's look at retrieving data from the database.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看如何从数据库中检索数据。
- en: Executing queries
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行查询
- en: So far, we have been running queries, but not getting any data in return. One
    of the points of a database is to query for data, not just to enter it. What fun
    would it be if we could only input data? The Qt API has a way to accommodate the
    different syntax and millions of ways a query can be made. Most of the time, it
    is specific to the type of data you need to be returned, but also specific to
    the database data itself. Luckily, `QSqlQuery` is general enough that the query
    parameter is a string.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在运行查询，但没有返回任何数据。数据库的一个要点是查询数据，而不仅仅是输入数据。如果我们只能输入数据，那会有什么乐趣呢？Qt API
    有一种方法来适应不同的语法和查询的数百万种方式。大多数情况下，它特定于需要返回的数据类型，但也特定于数据库数据本身。幸运的是，`QSqlQuery` 足够通用，查询参数是一个字符串。
- en: QSqlQuery
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QSqlQuery
- en: 'To retrieve data, execute a query using `QsqlQuery` and then operate on the
    records using the following functions:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要检索数据，请使用 `QsqlQuery` 执行查询，然后使用以下函数对记录进行操作：
- en: '`first()`'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`first()`'
- en: '`last()`'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`last()`'
- en: '`next()`'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`next()`'
- en: '`previous()`'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`previous()`'
- en: '`seek(int)`'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`seek(int)`'
- en: The `first()` and `last()` functions will retrieve the first and last records
    respectively. To iterate backward through the records, use `previous()`. The `seek
    (int)` function takes on integer as an argument to determine which record to retrieve.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`first()` 和 `last()` 函数分别用于检索第一条和最后一条记录。要反向遍历记录，请使用 `previous()`。`seek (int)`
    函数接受一个整数作为参数，以确定要检索的记录。'
- en: 'We will use `next()`, which will iterate forward through the records found
    in the query:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `next()`，它将遍历查询中找到的记录：
- en: '[PRE14]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We also use `value` to retrieve each field's data, which takes an `int` that
    indicates the position of the record starting at 0.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用 `value` 来检索每个字段的数据，它需要一个 `int`，表示从 0 开始的记录位置。
- en: 'You can also use `QSqlRecord` and `QSqlField` to do the same thing, but with
    more clarity as to what is actually going on:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用 `QSqlRecord` 和 `QSqlField` 来做同样的事情，但可以更清晰地了解实际发生的情况：
- en: '[PRE15]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: To get the record data, use `value()`, which will return a `QVariant` that represents
    the data for that record field.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取记录数据，请使用 `value()`，它将返回一个 `QVariant`，表示该记录字段的值。
- en: We could have used a model-based widget and then used `QsqlQueryModel` to execute
    the query.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们本可以使用基于模型的控件，然后使用 `QsqlQueryModel` 来执行查询。
- en: QSqlQueryModel
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QSqlQueryModel
- en: '`QSqlQueryModel` inherits from `QSqlQuery`, and returns a model object that
    can be used with model-based widgets and other classes. If we change our `QTableWidget`
    to `QTableView`, we can use `QSqlQueryModel` to be its data model:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`QSqlQueryModel` 继承自 `QSqlQuery`，并返回一个可以用于基于模型的控件和其他类的模型对象。如果我们将我们的 `QTableWidget`
    改为 `QTableView`，我们可以使用 `QSqlQueryModel` 作为其数据模型：'
- en: '[PRE16]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Here is my Raspberry Pi (with a Lego stand!) running the database example using
    the MySQL plugin remotely:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我的运行数据库示例的 Raspberry Pi（带有乐高支架！）使用 MySQL 插件远程运行：
- en: '![](img/0e6010a7-476f-4740-bd4c-a405253bbfda.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0e6010a7-476f-4740-bd4c-a405253bbfda.jpg)'
- en: Summary
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned that `QSqlDatabase` represents a connection to any
    supported database. You can use this to log in to remote MySQL databases or a
    SQLite database on a network share. To perform data retrieval, use `QSqlQuery`.
    You use the same class to set data and tables and other database commands. You
    can use `QSqlDatabaseModel` if you are using a model-view application.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解到 `QSqlDatabase` 代表了对任何受支持的数据库的连接。您可以使用它来登录远程 MySQL 数据库或网络共享上的 SQLite
    数据库。要执行数据检索，请使用 `QSqlQuery`。您使用相同的类来设置数据、表和其他数据库命令。如果您正在使用模型-视图应用程序，则可以使用 `QSqlDatabaseModel`。
- en: In the next chapter, we will explore in-app purchasing using the Qt Purchasing
    module.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨使用 Qt Purchasing 模块进行应用内购买。
