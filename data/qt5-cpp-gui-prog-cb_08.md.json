["```cpp\n    $cfg['Servers'][$i]['auth_type'] = 'config';\n    $cfg['Servers'][$i]['auth_type'] = 'cookie';\n    ```", "```cpp\n    QT += core gui sql\n    ```", "```cpp\n    #include <QMainWindow>\n    #include <QtSql>\n    #include <QSqlDatabase>\n    #include <QSqlQuery>\n    #include <QDebug>\n\n    ```", "```cpp\n    MainWindow::MainWindow(QWidget *parent) :\n      QMainWindow(parent), ui(new Ui::MainWindow)\n    {\n      ui->setupUi(this);\n\n     QSqlDatabase db = QSqlDatabase::addDatabase(\"QMYSQL\");\n     db.setHostName(\"127.0.0.1\");\n     db.setUserName(\"yourusername\");\n     db.setPassword(\"yourpassword\");\n     db.setDatabaseName(\"databasename\");\n\n     if (db.open())\n     {\n     QSqlQuery query;\n     if (query.exec(\"SELECT name, age, gender, married FROM employee\"))\n     {\n     while (query.next())\n     {\n     qDebug() << query.value(0) << query.value(1) << query.value(2) << query.value(3);\n\n     ui->name->setText(query.value(0).toString());\n     ui->age->setText(query.value(1).toString());\n     ui->gender->setCurrentIndex(query.value(2).toInt());\n     ui->married->setChecked(query.value(3).toBool());\n     }\n     }\n     else\n     {\n     qDebug() << query.lastError().text();\n     }\n\n     db.close();\n     }\n     else\n     {\n     qDebug() << \"Failed to connect to database.\";\n     }\n    }\n    ```", "```cpp\n    private:\n      Ui::MainWindow *ui;\n     QSqlDatabase db;\n     bool connected;\n     int currentID;\n\n    ```", "```cpp\n    MainWindow::MainWindow(QWidget *parent) :\n      QMainWindow(parent), ui(new Ui::MainWindow)\n    {\n      ui->setupUi(this);\n\n      db = QSqlDatabase::addDatabase(\"QMYSQL\");\n      db.setHostName(\"127.0.0.1\");\n      db.setUserName(\"yourusername\");\n      db.setPassword(\"yourpassword\");\n      db.setDatabaseName(\"databasename\");\n\n      connected = db.open();\n\n      if (connected)\n      {\n        QSqlQuery query;\n        if (query.exec(\"SELECT id, name, age, gender, married FROM employee\"))\n        {\n          while (query.next())\n          {\n            currentID = query.value(0).toInt();\n            ui->name->setText(query.value(1).toString());\n            ui->age->setText(query.value(2).toString());\n            ui->gender->setCurrentIndex(query.value(3).toInt());\n            ui->married->setChecked(query.value(4).toBool());\n          }\n        }\n        else\n        {\n          qDebug() << query.lastError().text();\n        }\n      }\n      else\n      {\n        qDebug() << \"Failed to connect to database.\";\n      }\n    }\n    ```", "```cpp\n    private slots:\n      void on_updateButton_clicked();\n      void on_insertButton_clicked();\n      void on_deleteButton_clicked();\n    ```", "```cpp\n    void MainWindow::on_updateButton_clicked()\n    {\n      if (connected)\n      {\n        if (currentID == 0)\n        {\n          qDebug() << \"Nothing to update.\";\n        }\n        else\n        {\n          QString id = QString::number(currentID);\n          QString name = ui->name->text();\n          QString age = ui->age->text();\n          QString gender = QString::number(ui->gender->currentIndex());\n          QString married = QString::number(ui->married->isChecked());\n\n          qDebug() << \"UPDATE employee SET name = '\" + name + \"', age = '\" + age + \"', gender = \" + gender + \", married = \" + married + \" WHERE id = \" + id;\n\n          QSqlQuery query;\n          if (query.exec(\"UPDATE employee SET name = '\" + name + \"', age = '\" + age + \"', gender = \" + gender + \", married = \" + married + \" WHERE id = \" + id))\n          {\n            qDebug() << \"Update success.\";\n          }\n          else\n          {\n            qDebug() << query.lastError().text();\n          }\n        }\n      }\n      else\n      {\n        qDebug() << \"Failed to connect to database.\";\n      }\n    }\n    ```", "```cpp\n    void MainWindow::on_insertButton_clicked()\n    {\n      if (connected)\n      {\n        QString name = ui->name->text();\n        QString age = ui->age->text();\n        QString gender = QString::number(ui->gender->currentIndex());\n        QString married = QString::number(ui->married->isChecked());\n\n        qDebug() << \"INSERT INTO employee (name, age, gender, married) VALUES ('\" + name + \"','\" + age + \"',\" + gender + \",\" + married + \")\";\n\n        QSqlQuery query;\n        if (query.exec(\"INSERT INTO employee (name, age, gender, married) VALUES ('\" + name + \"','\" + age + \"',\" + gender + \",\" + married + \")\"))\n        {\n          currentID = query.lastInsertId().toInt();\n          qDebug() << \"Insert success.\";\n        }\n        else\n        {\n          qDebug() << query.lastError().text();\n        }\n      }\n      else\n      {\n        qDebug() << \"Failed to connect to database.\";\n      }\n    }\n    ```", "```cpp\n    void MainWindow::on_deleteButton_clicked()\n    {\n      if (connected)\n      {\n        if (currentID == 0)\n        {\n          qDebug() << \"Nothing to delete.\";\n        }\n        else\n        {\n          QString id = QString::number(currentID);\n          qDebug() << \"DELETE FROM employee WHERE id = \" + id;\n          QSqlQuery query;\n          if (query.exec(\"DELETE FROM employee WHERE id = \" + id))\n          {\n            currentID = 0;\n            qDebug() << \"Delete success.\";\n          }\n          else\n          {\n            qDebug() << query.lastError().text();\n          }\n        }\n      }\n      else\n      {\n        qDebug() << \"Failed to connect to database.\";\n      }\n    }\n    ```", "```cpp\n    MainWindow::~MainWindow()\n    {\n     db.close();\n      delete ui;\n    }\n    ```", "```cpp\n    #include <QMainWindow>\n    #include <QtSql>\n    #include <QSqlDatabase>\n    #include <QSqlQuery>\n    #include <QMessageBox>\n    #include <QDebug>\n\n    ```", "```cpp\n    private:\n      Ui::MainWindow *ui;\n     QSqlDatabase db;\n\n    ```", "```cpp\n    MainWindow::MainWindow(QWidget *parent) :\n      QMainWindow(parent),\n      ui(new Ui::MainWindow)\n    {\n      ui->setupUi(this);\n     ui->stackedWidget->setCurrentIndex(0);\n     db = QSqlDatabase::addDatabase(\"QMYSQL\");\n     db.setHostName(\"127.0.0.1\");\n     db.setUserName(\"yourusername\");\n     db.setPassword(\"yourpassword\");\n     db.setDatabaseName(\"databasename\");\n\n     if (!db.open())\n     {\n     qDebug() << \"Failed to connect to database.\";\n     }\n    }\n    ```", "```cpp\n    void MainWindow::on_loginButton_clicked()\n    {\n      QString username = ui->username->text();\n      QString password = ui->password->text();\n\n      QSqlQuery query;\n      if (query.exec(\"SELECT employeeID from user WHERE username = '\" + username + \"' AND password = '\" + password + \"'\"))\n      {\n        if (query.size() > 0)\n        {\n          while (query.next())\n          {\n            QString employeeID = query.value(0).toString();\n            QSqlQuery query2;\n            if (query2.exec(\"SELECT name, age, gender, married FROM employee WHERE id = \" + employeeID))\n            {\n              while (query2.next())\n              {\n                QString name = query2.value(0).toString();\n                QString age = query2.value(1).toString();\n                int gender = query2.value(2).toInt();\n                bool married = query2.value(3).toBool();\n                ui->name->setText(name);\n                ui->age->setText(age);\n\n                if (gender == 0)\n                  ui->gender->setText(\"Male\");\n                else\n                  ui->gender->setText(\"Female\");\n\n                if (married)\n                  ui->married->setText(\"Yes\");\n                else\n                  ui->married->setText(\"No\");\n\n                ui->stackedWidget->setCurrentIndex(1);\n              }\n            }\n          }\n        }\n        else\n        {\n          QMessageBox::warning(this, \"Login failed\", \"Invalid username or password.\");\n        }\n      }\n      else\n      {\n        qDebug() << query.lastError().text();\n      }\n    }\n    ```", "```cpp\n    void MainWindow::on_logoutButton_clicked()\n    {\n      ui->stackedWidget->setCurrentIndex(0);\n    }\n    ```", "```cpp\n    MainWindow::~MainWindow()\n    {\n      db.close();\n\n      delete ui;\n    }\n    ```", "```cpp\n    private:\n      Ui::MainWindow *ui;\n     bool hasInit;\n     QSqlDatabase db;\n\n    ```", "```cpp\n    #include <QtSql>\n    #include <QSqlDatabase>\n    #include <QSqlQuery>\n    #include <QMessageBox>\n    #include <QDebug>\n    #include <QTableWidgetItem>\n    ```", "```cpp\n    MainWindow::MainWindow(QWidget *parent) :\n      QMainWindow(parent),\n      ui(new Ui::MainWindow)\n    {\n      hasInit = false;\n\n      ui->setupUi(this);\n\n      db = QSqlDatabase::addDatabase(\"QMYSQL\");\n      db.setHostName(\"127.0.0.1\");\n      db.setUserName(\"yourusername\");\n      db.setPassword(\"yourpassword\");\n      db.setDatabaseName(\"databasename\");\n\n      ui->tableWidget->setColumnHidden(0, true);\n\n      if (db.open())\n      {\n        QSqlQuery query;\n        if (query.exec(\"SELECT id, name, age, gender, married FROM employee\"))\n        {\n          while (query.next())\n          {\n            qDebug() << query.value(0) << query.value(1) << query.value(2) << query.value(3) << query.value(4);\n\n            QString id = query.value(0).toString();\n            QString name = query.value(1).toString();\n            QString age = query.value(2).toString();\n            int gender = query.value(3).toInt();\n            bool married = query.value(4).toBool();\n\n            ui->tableWidget->setRowCount(ui->tableWidget->rowCount() + 1);\n\n            QTableWidgetItem* idItem = new QTableWidgetItem(id);\n            QTableWidgetItem* nameItem = new QTableWidgetItem(name);\n            QTableWidgetItem* ageItem = new QTableWidgetItem(age);\n            QTableWidgetItem* genderItem = new QTableWidgetItem();\n\n            if (gender == 0)\n              genderItem->setData(0, \"Male\");\n            else\n              genderItem->setData(0, \"Female\");\n\n            QTableWidgetItem* marriedItem = new QTableWidgetItem();\n\n            if (married)\n              marriedItem->setData(0, \"Yes\");\n            else\n              marriedItem->setData(0, \"No\");\n\n            ui->tableWidget->setItem(ui->tableWidget->rowCount() - 1, 0, idItem);\n            ui->tableWidget->setItem(ui->tableWidget->rowCount() - 1, 1, nameItem);\n            ui->tableWidget->setItem(ui->tableWidget->rowCount() - 1, 2, ageItem);\n            ui->tableWidget->setItem(ui->tableWidget->rowCount() - 1, 3, genderItem);\n            ui->tableWidget->setItem(ui->tableWidget->rowCount() - 1, 4, marriedItem);\n          }\n\n          hasInit = true;\n        }\n        else\n        {\n          qDebug() << query.lastError().text();\n        }\n      }\n      else\n      {\n        qDebug() << \"Failed to connect to database.\";\n      }\n    }\n    ```", "```cpp\n    void MainWindow::on_tableWidget_itemChanged(QTableWidgetItem *item)\n    {\n      if (hasInit)\n      {\n        QString id = ui->tableWidget->item(item->row(), 0)->data(0).toString();\n        QString name = ui->tableWidget->item(item->row(), 1)->data(0).toString();\n        QString age = QString::number(ui->tableWidget->item(item->row(), 2)->data(0).toInt());\n        ui->tableWidget->item(item->row(), 2)->setData(0, age);\n\n        QString gender;\n        if (ui->tableWidget->item(item->row(), 3)->data(0).toString() == \"Male\")\n        {\n          gender = \"0\";\n        }\n        else\n        {\n          ui->tableWidget->item(item->row(), 3)->setData(0, \"Female\");\n          gender = \"1\";\n        }\n\n        QString married;\n        if (ui->tableWidget->item(item->row(), 4)->data(0).toString() == \"No\")\n        {\n          married = \"0\";\n        }\n        else\n        {\n          ui->tableWidget->item(item->row(), 4)->setData(0, \"Yes\");\n          married = \"1\";\n        }\n\n        qDebug() << id << name << age << gender << married;\n        QSqlQuery query;\n        if (query.exec(\"UPDATE employee SET name = '\" + name + \"', age = '\" + age + \"', gender = '\" + gender + \"', married = '\" + married + \"' WHERE id = \" + id))\n        {\n          QMessageBox::information(this, \"Update Success\", \"Data updated to database.\");\n        }\n        else\n        {\n          qDebug() << query.lastError().text();\n        }\n      }\n    }\n    ```", "```cpp\n    MainWindow::~MainWindow()\n    {\n     db.close();\n      delete ui;\n    }\n    ```", "```cpp\n    QT += core sql\n    QT -= gui\n    ```", "```cpp\n    #include <QSqlDatabase>\n    #include <QSqlQuery>\n    #include <QSqlError>\n    #include <QDate>\n    #include <QDebug>\n    ```", "```cpp\n    void filterAge()\n    {\n      qDebug() << \"== Employees above 30 year old =============\";\n      QSqlQuery query;\n      if (query.exec(\"SELECT name, age FROM employee WHERE age > 30\"))\n      {\n        while (query.next())\n        {\n          qDebug() << query.value(0).toString() << query.value(1).toString();\n        }\n      }\n      else\n      {\n        qDebug() << query.lastError().text();\n      }\n\n      qDebug() << \"\\n\";\n    }\n    ```", "```cpp\n    void getDepartmentAndBranch()\n    {\n      qDebug() << \"== Get employees' department and branch =============\";\n\n      QSqlQuery query;\n      if (query.exec(\"SELECT myEmployee.name, department.name, branch.name FROM (SELECT name, departmentID FROM employee) AS myEmployee INNER JOIN department ON department.id = myEmployee.departmentID INNER JOIN branch ON branch.id = department.branchID\"))\n      {\n        while (query.next())\n        {\n          qDebug() << query.value(0).toString() << query.value(1).toString() << query.value(2).toString();\n        }\n      }\n      else\n      {\n        qDebug() << query.lastError().text();\n      }\n\n      qDebug() << \"\\n\";\n    }\n    ```", "```cpp\n    void filterBranchAndAge()\n    {\n      qDebug() << \"== Employees from New York and age below 30 =============\";\n\n      QSqlQuery query;\n      if (query.exec(\"SELECT myEmployee.name, myEmployee.age, department.name, branch.name FROM (SELECT name, age, departmentID FROM employee) AS myEmployee INNER JOIN department ON department.id = myEmployee.departmentID INNER JOIN branch ON branch.id = department.branchID WHERE branch.name = 'New York' AND age < 30\"))\n      {\n        while (query.next())\n        {\n          qDebug() << query.value(0).toString() << query.value(1).toString() << query.value(2).toString() << query.value(3).toString();\n        }\n      }\n      else\n      {\n        qDebug() << query.lastError().text();\n      }\n\n      qDebug() << \"\\n\";\n    }\n    ```", "```cpp\n    void countFemale()\n    {\n      qDebug() << \"== Count female employees =============\";\n\n      QSqlQuery query;\n      if (query.exec(\"SELECT COUNT(gender) FROM employee WHERE gender = 1\"))\n      {\n        while (query.next())\n        {\n          qDebug() << query.value(0).toString();\n        }\n      }\n      else\n      {\n        qDebug() << query.lastError().text();\n      }\n\n      qDebug() << \"\\n\";\n    }\n    ```", "```cpp\n    void filterName()\n    {\n      qDebug() << \"== Employees name start with 'Ja' =============\";\n\n      QSqlQuery query;\n      if (query.exec(\"SELECT name FROM employee WHERE name LIKE '%Ja%'\"))\n      {\n        while (query.next())\n        {\n          qDebug() << query.value(0).toString();\n        }\n      }\n      else\n      {\n        qDebug() << query.lastError().text();\n      }\n\n      qDebug() << \"\\n\";\n    }\n    ```", "```cpp\n    void filterBirthday()\n    {\n      qDebug() << \"== Employees birthday in August =============\";\n\n      QSqlQuery query;\n      if (query.exec(\"SELECT name, birthday FROM employee WHERE MONTH(birthday) = 8\"))\n      {\n        while (query.next())\n        {\n          qDebug() << query.value(0).toString() << query.value(1).toDate().toString(\"d-MMMM-yyyy\");\n        }\n      }\n      else\n      {\n        qDebug() << query.lastError().text();\n      }\n\n      qDebug() << \"\\n\";\n    }\n    ```", "```cpp\n    void checkLog()\n    {\n      qDebug() << \"== Employees who logged in on 27 April 2016 =============\";\n\n      QSqlQuery query;\n      if (query.exec(\"SELECT DISTINCT myEmployee.name, FROM (SELECT id, name FROM employee) AS myEmployee INNER JOIN user ON user.employeeID = myEmployee.id INNER JOIN log ON log.userID = user.id WHERE DATE(log.loginTime) = '2016-04-27'\"))\n      {\n        while (query.next())\n        {\n          qDebug() << query.value(0).toString();\n        }\n      }\n      else\n      {\n        qDebug() << query.lastError().text();\n      }\n\n      qDebug() << \"\\n\";\n    }\n    ```", "```cpp\n    int main(int argc, char *argv[])\n    {\n      QCoreApplication a(argc, argv);\n\n      QSqlDatabase db = QSqlDatabase::addDatabase(\"QMYSQL\");\n      db.setHostName(\"127.0.0.1\");\n      db.setUserName(\"reonyx\");\n      db.setPassword(\"reonyx\");\n      db.setDatabaseName(\"testing\");\n\n      if (db.open())\n      {\n        filterAge();\n        getDepartmentAndBranch();\n        filterBranchAndAge();\n        countFemale();\n        filterName();\n        filterBirthday();\n        checkLog();\n\n        db.close();\n      }\n      else\n      {\n        qDebug() << \"Failed to connect to database.\";\n      }\n\n      return a.exec();\n    }\n    ```"]