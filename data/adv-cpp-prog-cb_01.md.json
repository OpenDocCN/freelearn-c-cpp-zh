["```cpp\n> sudo apt-get install build-essential git cmake\n```", "```cpp\n> sudo apt-get install build-essential git cmake\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter01\n```", "```cpp\n> mkdir build && cd build\n> cmake ..\n> make recipe01_examples\n```", "```cpp\n> ./recipe01_example01\nThe answer is: 42\n\n> ./recipe01_example02\nThe answer is: 42\n\n> ./recipe01_example03\nThe answer is: 42\n\n> ./recipe01_example04\nThe answer is: 42\nThe answer is: 42\n\n> ./recipe01_example05\nThe answer is: 42\nThe answer is: 42\n\n> ./recipe01_example06\nThe answer is: 42\nThe answer is: 42\n\n> ./recipe01_example07\nThe answer is: 42\n\n> ./recipe01_example08\nThe answer is: 42\n\n> ./recipe01_example09\nThe answer is: 42\n```", "```cpp\n#include <iostream>\n\nint sub(int a, int b)\n{ return a + b; }\n\nint main(void)\n{\n    std::cout << \"The answer is: \" << sub(41, 1) << '\\n';\n    return 0;\n}\n```", "```cpp\n#include <iostream>\n\nvoid add(int a, int &b)\n{ b += a; }\n\nint main(void)\n{\n    int a = 41, b = 1;\n    add(a, b);\n\n    std::cout << \"The answer is: \" << b << '\\n';\n    return 0;\n}\n```", "```cpp\nb += a;\n```", "```cpp\n#include <iostream>\n\nint add(int a, int b)\n{ return a + b; }\n\nint main(void)\n{\n    std::cout << \"The answer is: \" << add(41, 1) << '\\n';\n    return 0;\n}\n```", "```cpp\n#include <stdio.h>\n#include <iostream>\n\nint main(void)\n{\n    printf(\"The answer is: %d\\n\", 42);\n    std::cout << \"The answer is: \" << 42 << '\\n';\n    return 0;\n}\n```", "```cpp\n#include <iostream>\n\nint main(void)\n{\n    auto answer = 41;\n\n    std::cout << \"The answer is: \" << ++answer << '\\n';\n    std::cout << \"The answer is: \" << answer++ << '\\n';\n\n    return 0;\n}\n```", "```cpp\n#include <iostream>\n\nint add(int a, int b)\n{ return a + b; }\n\nint Sub(int a, int b)\n{ return a - b; }\n\nint main(void)\n{\n    std::cout << \"The answer is: \" << add(41, 1) << '\\n';\n    std::cout << \"The answer is: \" << Sub(43, 1) << '\\n';\n\n    return 0;\n}\n```", "```cpp\n#include <queue>\n#include <iostream>\n\nint main(void)\n{\n    std::queue<int> my_queue;\n\n    my_queue.emplace(42);\n    std::cout << \"The answer is: \" << my_queue.front() << '\\n';\n    my_queue.pop();\n\n    return 0;\n}\n```", "```cpp\n#include <iostream>\n\nauto add(int a, int b)\n{ return a + b; }\n\nint main(void)\n{\n    std::cout << \"The answer is: \" << add(41, 1) << '\\n';\n    return 0;\n}\n```", "```cpp\n#include <iostream>\n\ntemplate <typename T>\nT add(T a, T b)\n{ return a + b; }\n\nint main(void)\n{\n    std::cout << \"The answer is: \" << add(41, 1) << '\\n';\n    return 0;\n}\n```", "```cpp\n> sudo apt-get install build-essential git cmake\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter01\n```", "```cpp\n> mkdir build && cd build\n> cmake ..\n> make recipe02_examples\n```", "```cpp\n> ./recipe02_example01\nThe answer is: 42\n\n> ./recipe02_example02\nThe answer is: 42\n```", "```cpp\n// Contents of library.h\n\nnamespace library_name\n{\n    int my_api() { return 42; }\n    // ...\n}\n\n// Contents of main.cpp\n\n#include <iostream>\n\nint main(void)\n{\n    using namespace library_name;\n\n    std::cout << \"The answer is: \" << my_api() << '\\n';\n    return 0;\n}\n```", "```cpp\n// Contents of library.h\n\nnamespace library_name\n{\n    namespace details { inline int answer = 42; }\n\n    int my_api() { return details::answer; }\n    // ...\n}\n\n// Contents of main.cpp\n\n#include <iostream>\n\nint main(void)\n{\n    using namespace library_name;\n\n    std::cout << \"The answer is: \" << my_api() << '\\n';\n    return 0;\n}\n```", "```cpp\n> sudo apt-get install build-essential git cmake\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter01\n```", "```cpp\n> mkdir build && cd build\n> cmake ..\n> make recipe03_examples\n```", "```cpp\n> ./recipe03_example01\nThe answer is: 42\n\n> ./recipe03_example02\nThe answer is: 42\n\n> ./recipe03_example03\nThe answer is: 42\n\n> ./recipe03_example04\nThe answer is: 42\nThe answer is: 2a\n\n> ./recipe03_example05\n\n> ./recipe03_example06\nThe answer is: 42\n\n> ./recipe03_example07\nThe answer is: 42\n```", "```cpp\n#ifndef MY_LIBRARY\n#define MY_LIBRARY\n\nnamespace library_name\n{\n    int my_api() { return 42; }\n}\n\n#endif\n```", "```cpp\n#include \"my_library.h\"\n#include <iostream>\n\nint main(void)\n{\n    using namespace library_name;\n\n    std::cout << \"The answer is: \" << my_api() << '\\n';\n    return 0;\n}\n```", "```cpp\n#ifndef MY_LIBRARY\n#define MY_LIBRARY\n\nnamespace library_name\n{\n    void my_api()\n    {\n        std::cout << \"The answer is: 42\" << '\\n';\n    }\n}\n\n#endif\n```", "```cpp\n#include <iostream>\n#include \"my_library.h\"\n\nint main(void)\n{\n    library_name::my_api();\n    return 0;\n}\n```", "```cpp\n#ifndef MY_LIBRARY\n#define MY_LIBRARY\n\n#include <iostream>\n#include <iomanip>\n\nnamespace library_name\n{\n    void my_api(bool show_hex = false)\n    {\n        if (show_hex) {\n            std::cout << std::hex << \"The answer is: \" << 42 << '\\n';\n        }\n        else {\n            std::cout << std::dec << \"The answer is: \" << 42 << '\\n';\n        }\n    }\n}\n\n#endif\n```", "```cpp\n#ifndef MY_LIBRARY\n#define MY_LIBRARY\n\n#include <iostream>\n#include <iomanip>\n\nnamespace library_name\n{\n    namespace config\n    {\n        inline bool show_hex = false;\n    }\n\n    void my_api()\n    {\n        if (config::show_hex) {\n            std::cout << std::hex << \"The answer is: \" << 42 << '\\n';\n        }\n        else {\n            std::cout << std::dec << \"The answer is: \" << 42 << '\\n';\n        }\n    }\n}\n\n#endif\n```", "```cpp\n#include \"my_library.h\"\n#include <iostream>\n\nint main(void)\n{\n    library_name::my_api();\n    library_name::config::show_hex = true;\n    library_name::my_api();\n\n    return 0;\n}\n```", "```cpp\n#ifndef MY_LIBRARY\n#define MY_LIBRARY\n\n#include <cassert>\n\nnamespace library_name\n{\n    #define CHECK(a) assert(a == 42)\n\n    void my_api(int val)\n    {\n        CHECK(val);\n    }\n}\n\n#endif\n```", "```cpp\n#define LIBRARY_NAME__CHECK(a) assert(a == 42)\n```", "```cpp\n#include \"config.h\"\n\nnamespace library_name\n{\n    void my_api()\n    {\n        if (config::show_hex) {\n            std::cout << std::hex << \"The answer is: \" << 42 << '\\n';\n        }\n        else {\n            std::cout << std::dec << \"The answer is: \" << 42 << '\\n';\n        }\n    }\n}\n```", "```cpp\nnamespace library_name\n{\n    namespace config\n    {\n        inline bool show_hex = false;\n    }\n}\n```", "```cpp\n#include \"apis.h\"\n\nint main(void)\n{\n    library_name::my_api();\n    return 0;\n}\n```", "```cpp\nfile(STRINGS \"config.h\" CONFIG_H)\nfile(STRINGS \"apis.h\" APIS_H)\n\nlist(APPEND MY_LIBRARY_SINGLE\n    \"${CONFIG_H}\"\n    \"\"\n    \"${APIS_H}\"\n)\n\nfile(REMOVE \"my_library_single.h\")\nforeach(LINE IN LISTS MY_LIBRARY_SINGLE)\n    if(LINE MATCHES \"#include \\\"\")\n        file(APPEND \"my_library_single.h\" \"// ${LINE}\\n\")\n    else()\n        file(APPEND \"my_library_single.h\" \"${LINE}\\n\")\n    endif()\nendforeach()\n```", "```cpp\n#include \"my_library_single.h\"\n\nint main(void)\n{\n    library_name::my_api();\n    return 0;\n}\n```", "```cpp\n> sudo apt-get install build-essential git cmake clang-tidy valgrind\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter01\n```", "```cpp\n> mkdir build && cd build\n> cmake ..\n> make recipe04_examples\n```", "```cpp\n> ./recipe04_example01 \n21862\n```", "```cpp\n-Wall -Wextra -pedantic -Werror\n```", "```cpp\n-Wall -Wcast-align -Wconversion -Wctor-dtor-privacy -Werror -Wextra -Wpedantic -Wshadow -Wsign-conversion\n```", "```cpp\n#include <iostream>\n\nint universe()\n{\n    auto i = new int;\n    int the_answer;\n    return the_answer;\n}\n\nint main()\n{\n    std::cout << universe() << '\\n';\n    return 0;\n}\n```", "```cpp\nset(CMAKE_CXX_CLANG_TIDY clang-tidy)\n```", "```cpp\n> sudo apt-get install build-essential git cmake libboost-all-dev\n```", "```cpp\n> cd ~/\n> git clone https://github.com/PacktPublishing/Advanced-CPP-CookBook.git\n> cd Advanced-CPP-CookBook/chapter01\n```", "```cpp\n> mkdir build && cd build\n> cmake ..\n> make recipe05_examples\n```", "```cpp\n> ./recipe05_example01\nDate/Time: 1553894555446451393 nanoseconds since Jan 1, 1970\n> ./recipe05_example02\n[2019-03-29 15:22:36.756819] [0x00007f5ee158b740] [debug] debug message\n[2019-03-29 15:22:36.756846] [0x00007f5ee158b740] [info] info message\n```", "```cpp\n#include <iostream>\n#include <boost/chrono.hpp>\n\nint main(void)\n{\n    using namespace boost::chrono;\n\n    std::cout << \"Date/Time: \" << system_clock::now() << '\\n';\n    return 0;\n}\n```", "```cpp\n-lboost_chrono -lboost_system -lpthread\n```", "```cpp\n#include <boost/log/trivial.hpp>\n\nint main(void)\n{\n    BOOST_LOG_TRIVIAL(debug) << \"debug message\";\n    BOOST_LOG_TRIVIAL(info) << \"info message\";\n    return 0;\n}\n```", "```cpp\n-DBOOST_LOG_DYN_LINK -lboost_log -lboost_system -lpthread\n```"]