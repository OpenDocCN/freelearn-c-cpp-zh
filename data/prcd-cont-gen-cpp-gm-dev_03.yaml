- en: Chapter 3. Using RNG with C++ Data Types
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。使用C++数据类型进行RNG
- en: In [Chapter 1](ch01.html "Chapter 1. An Introduction to Procedural Generation"),
    *An Introduction to Procedural Generation*, we learned the fact that pseudorandom
    number generation is at the heart of random procedural generation. Remember, a
    procedural system is not random by nature, we need to induce randomness. To start
    our journey, we're going to look at a range of different C++ data types, and use
    Random Number Generator (RNG) to give them random values at runtime. This ability
    to use core C++ data types in a random, yet still controlled, way will be the
    basis for all our future systems.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章。程序化生成简介")中，*程序化生成简介*，我们了解到伪随机数生成是随机程序生成的核心。请记住，程序化系统本质上不是随机的，我们需要引入随机性。为了开始我们的旅程，我们将研究一系列不同的C++数据类型，并使用随机数生成器（RNG）在运行时为它们赋予随机值。在随机但仍受控的方式下使用核心C++数据类型的能力将成为我们未来所有系统的基础。
- en: 'In this chapter we''ll cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Setting the game seed
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置游戏种子
- en: Enumerators
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 枚举器
- en: Setting Boolean values randomly
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随机设置布尔值
- en: Accessing random elements in an array
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问数组中的随机元素
- en: Generating random strings
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成随机字符串
- en: Random number distribution
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随机数分布
- en: Setting the game seed
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置游戏种子
- en: Before we do anything we're going to need to set the game seed. Without it we'll
    get the same results each time our game is run. As we've learned, this simply
    requires us to make a call to the `std::srand()` function passing a random parameter
    to be used as the seed. We'll use the current system time as our seed, it's random
    enough for our purposes.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在做任何事情之前，我们需要设置游戏种子。如果没有种子，我们每次运行游戏时都会得到相同的结果。正如我们所学的，这只需要我们调用`std::srand()`函数并传递一个随机参数作为种子。我们将使用当前系统时间作为我们的种子，对我们的目的来说已经足够随机了。
- en: Where we make the call to the `std::srand()` function is arbitrary so long as
    it's called before any call to the `std::rand()` function. The file `main.cpp`
    contains the function `main()`, the entry point of the application. It's here
    that our game object is created and the main game loop entered, so we'll make
    our call to the `std::srand()` function here.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对`std::srand()`函数的调用是任意的，只要在对`std::rand()`函数的任何调用之前调用它即可。文件`main.cpp`包含了函数`main()`，这是应用程序的入口点。我们将在这里调用`std::srand()`函数。
- en: 'Our updated `main()` function should now look like this:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们更新后的`main()`函数现在应该是这样的：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Each time we run the game now we will have a random seed set, so our calls to
    the `std::rand()` yield unique results.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在每次运行游戏时，我们都会设置一个随机种子，因此我们对`std::rand()`的调用会产生唯一的结果。
- en: Tip
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you want your game to be consistent between runs you can use a hard-coded
    value as the seed. Just don't forget to change it back or you'll wonder why things
    aren't random later down the line!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望游戏在运行之间保持一致，可以使用硬编码的值作为种子。只是不要忘记改回来，否则以后会想为什么事情不随机！
- en: Setting Boolean values randomly
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 随机设置布尔值
- en: 'Perhaps the simplest of all data types is the humble bool. With only two states,
    true and false, it shouldn''t be too hard to set randomly! When represented as
    integers, the two states have the following properties:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 也许最简单的数据类型是谦卑的布尔值。只有两种状态，true和false，应该不难随机设置！当表示为整数时，这两种状态具有以下属性：
- en: False = 0 or lower
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: False = 0或更低
- en: True = 1 or higher
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: True = 1或更高
- en: Given this, to randomly assign a bool we simply need to generate either the
    number 0 or 1.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '因此，要随机分配一个布尔值，我们只需要生成数字0或1。 '
- en: Generating a number between 0 and 1
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成0到1之间的数字
- en: 'In [Chapter 1](ch01.html "Chapter 1. An Introduction to Procedural Generation"),
    *An Introduction to Procedural Generation*, we covered the generation of random
    numbers within a specific range. Well we''re now going to put that to use. Using
    the `std::rand()` function we will generate a number between 0 and 1:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章。程序化生成简介")中，*程序化生成简介*，我们介绍了在特定范围内生成随机数。现在我们将把它用起来。使用`std::rand()`函数，我们将生成一个介于0和1之间的数字：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Remember, `std::rand()` generates a number between `0` and `RAND_MAX` function.
    We then calculate the remainder of that result divided by 2\. This leaves just
    the range 0 and 1.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，`std::rand()`生成一个介于`0`和`RAND_MAX`之间的数字。然后我们计算该结果除以2的余数。这样就只剩下了0和1的范围。
- en: 'A `bool` does not have to be set with the `true` or `false` keyword. You can
    assign an integer to a `bool` and its state will be determined by the integer''s
    value using the rule stated previously. Any number less than 1 is false, and any
    number above 0 is true. That means we can feed our result straight into a bool:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`bool`不一定要用`true`或`false`关键字设置。您可以将整数赋给`bool`，其状态将由整数的值决定，使用前面规定的规则。小于1的任何数字都是false，大于0的任何数字都是true。这意味着我们可以直接将结果传递给bool：'
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Putting this together, we can create a simple console application that outputs
    either true or false randomly each time the user presses *Enter*.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 将这些放在一起，我们可以创建一个简单的控制台应用程序，每次用户按下*Enter*键时都会随机输出true或false。
- en: 'You can download the code for this program from the Packt Publishing website.
    It will be in the `Examples` folder, and the project name is `random_boolean`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从Packt Publishing网站下载此程序的代码。它将在`Examples`文件夹中，项目名称为`random_boolean`：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This code results in the following output:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的输出结果如下：
- en: '![Generating a number between 0 and 1](img/B04920_03_01.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![生成0到1之间的数字](img/B04920_03_01.jpg)'
- en: Each time we hit *Enter* we get a random Boolean value. Even this simple case
    of random generation can enable us to start building our procedural roguelike
    game. Let's apply it straight away to the creation of items when the room is created.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 每次我们按下*Enter*键，我们都会得到一个随机的布尔值。即使是这种简单的随机生成也可以让我们开始构建我们的程序化地牢游戏。让我们立即将其应用到房间创建时物品的生成上。
- en: Tip
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Remember, nowhere in this small example application do we set the seed randomly.
    As a result, this program will generate the same sequence of values each time
    it is run.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，在这个小例子应用程序中，我们没有随机设置种子。因此，每次运行程序时，该程序将生成相同的值序列。
- en: Choosing if an item spawns
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择物品是否生成
- en: Currently, when we start the game a gem and gold item are always spawned. Let's
    use this random bool assignment to decide whether or not the two objects are created.
    To accomplish this we'll encapsulate their spawn code inside an `if` statement,
    the parameter to which will be the result of our random Boolean assignment.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当前，当我们启动游戏时，宝石和黄金物品总是会生成。让我们使用这个随机布尔赋值来决定是否创建这两个物品。为了实现这一点，我们将封装它们的生成代码在一个`if`语句中，其参数将是我们随机布尔赋值的结果。
- en: 'The `Game::PopulateLevel` method is where out items are spawned. We''ll replace
    the current code with the following:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`Game::PopulateLevel`方法是我们生成物品的地方。我们将用以下代码替换当前的代码：'
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now, each time we run the game, it's random whether or not the gem and gold
    are spawned.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每次我们运行游戏，宝石和黄金是否生成都是随机的。
- en: '![Choosing if an item spawns](img/B04920_03_02.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![选择物品是否生成](img/B04920_03_02.jpg)'
- en: A simple change, but the first step in creating a procedurally generated game.
    There is no single algorithm or function that makes a game procedural. It's a
    collection of small techniques such as this that make systems non-predictable
    and determined at runtime.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的改变，但是创建程序生成游戏的第一步。没有单一的算法或函数可以使游戏程序化。这是一系列小技巧的集合，比如这样的技巧可以使系统在运行时不可预测和确定。
- en: Random number distribution
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 随机数分配
- en: Let's build upon what we know about random number generation to distribute numbers
    randomly. We'll achieve this by first generating `n` numbers between 0 and 100\.
    If we add these together we get a random total where each of our individual numbers
    represents a percentage of that. We can then take that percentage of our goal
    number to get a random portion. The following code demonstrates this and will
    make it clearer.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在随机数生成的基础上分配随机数字。我们首先生成0到100之间的`n`个数字。如果我们把它们加在一起，我们就得到一个随机总数，其中我们的每个单独的数字代表了一个百分比。然后我们可以取得我们目标数字的百分比来得到一个随机部分。以下代码演示了这一点，并会让它更清晰。
- en: 'You can download the code for this program from the Packt website. It will
    be in the `Examples` folder, and the project name is `random_distribution`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从Packt网站下载此程序的代码。它将在`Examples`文件夹中，项目名称为`random_distribution`：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This method ensures that each segment of the number is completely random. There
    is a slight rounding error to be taken into account, but that's not a problem
    for our application.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法确保了数字的每个部分都是完全随机的。需要考虑一个轻微的舍入误差，但这对我们的应用程序不是问题。
- en: '![Random number distribution](img/B04920_03_03.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![随机数分配](img/B04920_03_03.jpg)'
- en: Let's waste no time and apply this new skill to the game!
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们不浪费时间，将这项新技能应用到游戏中！
- en: Giving the player random stats
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 给玩家随机属性
- en: A classic way in which this random distribution of numbers can be used is to
    give a player random stats. Traditionally, a character in a game is given `n`
    stat points, and it's up to the player to distribute them. Since we're making
    a procedural game, we'll instead distribute them randomly to create procedurally
    generated character stats.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这种随机分配数字的经典方式是给玩家随机属性。传统上，游戏中的角色会获得`n`个属性点，由玩家来分配。由于我们正在制作一个程序生成游戏，我们将随机分配它们，以创建程序生成的角色属性。
- en: 'To do this we need to hook up the previous code with the assignment of our
    player''s stat variables. Our player stats are currently fixed, and assigned in
    the following way:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们需要将以前的代码与玩家属性变量的赋值连接起来。我们的玩家属性目前是固定的，并且是以下方式分配的：
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Let's replace that with the following to randomly distribute the stats. We'll
    also add a variable to the player so we can change how many `stat` points the
    player has to distribute.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用以下代码替换它来随机分配属性。我们还会给玩家添加一个变量，这样我们就可以改变玩家有多少`stat`点可以分配。
- en: 'To start, add the following variable to the player, and don''t forget to add
    it to our initializer list:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将以下变量添加到玩家中，并不要忘记将其添加到我们的初始化列表中：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now let''s use this to give our player random stats:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用这个来给我们的玩家随机属性：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Each time we now load the game our player has their stat points allocated randomly.
    This approach of randomly distributing of a set amount could be used in many other
    ways, such as sharing loot between players and allocating damage between multiple
    entities.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 每次我们加载游戏时，我们的玩家的属性点都是随机分配的。这种随机分配一定数量的方法可以用在很多其他地方，比如在玩家之间分享战利品，或者在多个实体之间分配伤害。
- en: '![Giving the player random stats](img/B04920_03_04.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![给玩家随机属性](img/B04920_03_04.jpg)'
- en: Accessing random elements of a collection
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问集合中的随机元素
- en: When we have collections of similar objects, they are often stored in structures
    such as arrays and vectors. Usually when working with these structures we access
    specific elements, and it's their uniformness and order that make them useful.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们有类似对象的集合时，它们通常存储在数组和向量等结构中。通常在处理这些结构时，我们访问特定的元素，它们的统一性和顺序使它们有用。
- en: To access a specific element we simply supply its index in the collection. Therefore,
    to access a random element of the array we just supply a random index, which is
    a simple case of generating a random number.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问特定的元素，我们只需提供它在集合中的索引。因此，要访问数组的一个随机元素，我们只需提供一个随机索引，这只是生成一个随机数的简单情况。
- en: Let's have a look at an example of this. In the following example we create
    a vector of strings which we populate with animal names. Each time we press enter
    we access a random element of the vector by generating a number between 0 and
    the vectors size.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子。在下面的例子中，我们创建了一个字符串向量，其中我们填充了动物的名字。每次我们按回车键，我们通过生成一个0到向量大小之间的数字来访问向量的一个随机元素。
- en: 'You can download the code for this program from the Packt website. It will
    be in the `Examples` folder, and the project name is `random_element`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从Packt网站下载此程序的代码。它将在`Examples`文件夹中，项目名称为`random_element`：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The output of is as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Accessing random elements of a collection](img/B04920_03_05.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![访问集合中的随机元素](img/B04920_03_05.jpg)'
- en: Accessing random elements of a collection is a great tool for creating procedural
    systems. Anywhere in your game where there is a single object, you can create
    an array or vector of alternates, and choose one at random at runtime. With this
    alone you could create a highly randomized game where each run is unique.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 访问集合的随机元素是创建程序系统的一个很好的工具。在游戏中的任何地方，只要有一个对象，您都可以创建一个备用的数组或向量，并在运行时随机选择一个。仅凭这一点，您就可以创建一个高度随机化的游戏，每次运行都是独一无二的。
- en: Spawning a random item
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成随机物品
- en: Currently, when we load our game, set items are spawned. We need to add an element
    of randomness to do this, and something as simple as a `switch` statement is all
    that's needed. Where we can, we always want to add options to create random and
    procedurally generated content.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，当我们加载游戏时，设置物品会被生成。我们需要添加一些随机性，一个简单的`switch`语句就足够了。在可能的情况下，我们总是希望添加选项来创建随机和程序生成的内容。
- en: To randomly spawn our items, we need to generate a random number between `0`
    and the number of items we have, and then use that in a `switch` statement. As
    stated previously, there isn't one approach to procedural generation, so there
    will be other methods to doing this.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要随机生成我们的物品，我们需要生成一个介于`0`和我们拥有的物品数量之间的随机数，然后在`switch`语句中使用它。如前所述，没有一种方法可以进行程序生成，因此还有其他方法可以实现这一点。
- en: 'Let''s add in the number generation and `switch` statements to choose which
    item to spawn. The updated `Game::PopulateLevel` function should look as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加数字生成和`switch`语句来选择要生成的物品。更新后的`Game::PopulateLevel`函数应该如下所示：
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now we can see that when we run the game, if an object can be spawned it will
    be either the gold item or the gem. We have a bunch of items in the game, and
    in the next chapter we''ll be extending this system to include them all, populating
    our entire level from a single function:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以看到，当我们运行游戏时，如果可以生成一个物品，它将是金色物品或宝石。我们在游戏中有很多物品，在下一章中，我们将扩展此系统以包括它们所有，从一个函数中填充整个级别：
- en: '![Spawning a random item](img/B04920_03_07.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![生成随机物品](img/B04920_03_07.jpg)'
- en: Generating random characters
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成随机字符
- en: Since we've covered generating random strings from a set wordlist, let's look
    at generating random characters. The `char` data type is a single, one byte character.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经介绍了从固定词汇表生成随机字符串，让我们看看如何生成随机字符。`char`数据类型是一个单个的，一个字节的字符。
- en: 'A `string` is actually just a null-terminated sequence of characters, so the
    following lines of code produce the exact same result:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串实际上只是一个以空字符结尾的字符序列，所以下面的代码行产生了完全相同的结果：
- en: '[PRE11]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Likewise, the following code is semantically correct:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，以下代码在语义上是正确的：
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Since a `char` is one byte, it has the possible integer representations of
    0 to 255\. Each of these decimal values represents a different character. A lookup
    table can found in the ASCII table. For example, the character *a* has the decimal
    value `97`. We can use these integers when assigning a `char`, as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`char`是一个字节，它具有0到255的可能整数表示。每个这些十进制值代表一个不同的字符。在ASCII表中可以找到查找表。例如，字符*a*的十进制值为`97`。我们可以在分配`char`时使用这些整数，如下所示：
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Tip
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: In C++ the maximum decimal value of a `char` is 255\. If you go over this it
    will overflow and loop back through the table. For example, setting a char value
    equal to 353 will result in the character *a*. An ASCII table can be found at
    [http://www.asciitable.com/](http://www.asciitable.com/).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在C++中，`char`的最大十进制值是255。如果超过这个值，它将溢出并通过表格循环。例如，将char值设置为353将导致字符*a*。 ASCII表可以在[http://www.asciitable.com/](http://www.asciitable.com/)找到。
- en: To generate a random char we therefore need to generate a number between 0 and
    255, something we're very familiar with now.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，要生成一个随机字符，我们需要生成一个介于0和255之间的数字，这是我们现在非常熟悉的。
- en: 'You can download the code for this program from the Packt website. It will
    be in the `Examples` folder, and the project name is `random_character`:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从Packt网站下载此程序的代码。它将在`Examples`文件夹中，项目名称为`random_character`：
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: With this code we're generating a random character from the entire ASCII table.
    To generate characters within a more specific range, we simply need to cap the
    number range we generate with.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这段代码，我们从整个ASCII表中生成一个随机字符。要在更具体的范围内生成字符，我们只需要限制我们生成的数字范围。
- en: 'For example, looking at the ASCII table shows us that the lowercase alphabet
    starts at 97 and runs until 122\. Let''s adjust the random number generator to
    generate values within this range only:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，查看ASCII表可以看到小写字母表从97开始，直到122。让我们调整随机数生成器，只生成这个范围内的值：
- en: '[PRE15]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now we can see that the outputs are letters from the lowercase alphabet only,
    as shown in the following screenshot:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以看到输出只是小写字母表中的字母，如下面的屏幕截图所示：
- en: '![Generating random characters](img/B04920_03_08.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![生成随机字符](img/B04920_03_08.jpg)'
- en: Repeating loops
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重复循环
- en: Another use of generating random numbers is to loop over certain code an undetermined
    number of times. For example, when we spawn our items we make individual calls
    to the spawn code. This is fine if we just want to spawn one item every time,
    but what about when we want to spawn a random number of items.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 生成随机数的另一个用途是循环执行一定次数的代码。例如，当我们生成物品时，我们对生成代码进行单独调用。如果我们只想每次生成一个物品，这是可以的，但是当我们想生成随机数量的物品时怎么办。
- en: We need to make a random amount of calls to our code, which we'll later wrap
    in its own function, and this can be achieved using `for` loops. In a `for` loop
    we specify how many times we want the loop to iterate, so instead of using a fixed
    value as we normally would, we can generate a random number to use instead. Each
    time the code is run, a new random number will be generated, and the loop will
    be a different size each time.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要随机调用我们的代码，稍后我们将把它封装在自己的函数中，这可以通过`for`循环实现。在`for`循环中，我们指定循环迭代的次数，所以我们可以生成一个随机数来代替使用固定值。每次运行代码时，都会生成一个新的随机数，循环每次的大小都会不同。
- en: 'You can download the code for this program from [http://www.packtpub.com/support](http://www.packtpub.com/support).
    It will be in folder `Chapter 3`, and is called `random_loops.cpp`:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[http://www.packtpub.com/support](http://www.packtpub.com/support)下载此程序的代码。它将在`Chapter
    3`文件夹中，名为`random_loops.cpp`：
- en: '[PRE16]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The output is shown in the following screenshot:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示在以下截图中：
- en: '![Repeating loops](img/B04920_03_09.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![重复循环](img/B04920_03_09.jpg)'
- en: Spawning a random number of items
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成随机数量的物品
- en: With our items being spawned in our `Game::PopulateLevel` function, and the
    ability to call a function a random number of times, let's update the code so
    we spawn a random number of items when we start the game.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`Game::PopulateLevel`函数中生成物品，并且能够随机调用函数的次数，让我们更新代码，以便在游戏开始时生成随机数量的物品。
- en: 'To achieve this, all we need to do is create the same loop as in the previous
    exercise, and encapsulate our spawn code within it. Let''s update `Game::PopulateLevel`
    with the following:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们只需要像在上一个练习中一样创建相同的循环，并将我们的生成代码封装在其中。让我们用以下代码更新`Game::PopulateLevel`：
- en: '[PRE17]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now when we run the code, we have a bunch of items that are spawned. They are
    currently spawning on-top of one-another, but don't worry, we're fixing that in
    the next chapter!
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当我们运行代码时，会生成一堆物品。它们目前是在彼此之上生成的，但不用担心，我们将在下一章中解决这个问题！
- en: '![Spawning a random number of items](img/B04920_03_10.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![生成随机数量的物品](img/B04920_03_10.jpg)'
- en: Exercises
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: To enable you to test your knowledge of this chapter's content, here are a few
    exercises that you should work through. They are not imperative to the rest of
    the book, but working through them will help you assess your strengths and weaknesses
    on the material covered.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让您测试本章内容的知识，这里有一些练习题，您应该完成。它们对本书的其余部分并不是必不可少的，但通过完成它们，您可以评估自己在所涵盖材料上的优势和劣势。
- en: Add more options to the random string generator. Try to create a generator that
    uses two random words.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为随机字符串生成器添加更多选项。尝试创建一个使用两个随机单词的生成器。
- en: Amend the random character generation program so we generate the characters
    A-Z uppercase, and a-z lowercase.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改随机字符生成程序，以便生成大写字母A-Z和小写字母a-z的字符。
- en: The player is currently spawned at a fixed location in the level. Create a set
    of possible spawn coordinates, and choose randomly between them at run-time so
    the spawn location varies.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 玩家目前是在水平中的固定位置生成的。创建一组可能的生成坐标，并在运行时随机选择它们，以便生成位置有所变化。
- en: Summary
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter we've taken a look at a range of C++ data types, and incorporated
    RNG with their use. The ability to use these data types in a random, but controlled
    way, is key in implementing random procedural systems. Remember, procedural generation
    is just the creation of content as the result of a calculation. This is not random
    by nature, we have to induce randomness as we have in this chapter. The additions
    we have made to the game are small, but are the first steps in creating a procedurally
    generated game. Already when we run our game it will be a little different each
    time.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经了解了一系列C++数据类型，并将RNG与它们的使用结合起来。以随机但受控的方式使用这些数据类型的能力是实现随机程序系统的关键。记住，程序生成只是根据计算结果创建内容。这并不是自然而然的随机，我们必须像本章中所做的那样引入随机性。我们对游戏所做的增加很小，但是是创建程序生成游戏的第一步。当我们运行游戏时，每次都会有一点不同。
- en: In the next chapter we're going to develop our level further by spawning our
    items and enemies in random locations around the map. Procedurally generated environments
    are a staple in procedurally generated games, and spawning our game objects in
    random locations is a big step towards achieving this.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过在地图周围的随机位置生成物品和敌人来进一步开发我们的水平。程序生成的环境是程序生成游戏中的一个重要部分，将游戏对象生成在随机位置是实现这一目标的重要一步。
