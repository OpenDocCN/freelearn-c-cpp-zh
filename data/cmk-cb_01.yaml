- en: Setting up Your System
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置您的系统
- en: 'Before diving into CMake and the recipes in this book, you will need to set
    your system up to successfully run all of the examples. In this section, we will
    discuss the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入了解CMake和本书中的食谱之前，您需要设置您的系统以成功运行所有示例。在本节中，我们将讨论以下主题：
- en: How to obtain the code for the recipes
  id: totrans-2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何获取食谱的代码
- en: How to install all of the tools required to run the code samples on GNU/Linux,
    macOS, and Windows
  id: totrans-3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在GNU/Linux、macOS和Windows上安装运行代码示例所需的所有工具
- en: How the automated testing for the repository works
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仓库的自动化测试是如何工作的
- en: How to report problems with the recipes and suggest improvements
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何报告食谱中的问题并提出改进建议
- en: We have strived to make our discussions of the topics in this book as accessible
    to novices as possible. However, this book does not start from absolute scratch.
    We assume that you have basic knowledge of the native tools for building software
    that are available on your platform of choice. It is also helpful (but not required)
    to have basic experience with version control using Git, to interact with the
    repository holding the recipe sources.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们努力使本书中主题的讨论尽可能对初学者友好。然而，本书并不是从零开始的。我们假设您对所选平台上的原生软件构建工具有基本的了解。拥有使用Git进行版本控制的基本经验也是有帮助的（但不是必需的），以便与保存食谱源代码的仓库进行交互。
- en: Obtaining the code
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取代码
- en: 'The source code for the recipes in this book is available on GitHub, at [https://github.com/dev-cafe/cmake-cookbook](https://github.com/dev-cafe/cmake-cookbook).
    The code is licensed under the standard open source MIT license: this is a permissive
    software license, and you can reuse and remix the code in whatever way you see
    fit, as long as the original copyright and license notice are included in any
    copies of the software/source. The full text of the license is available at [https://opensource.org/licenses/MIT](https://opensource.org/licenses/MIT).'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中食谱的源代码可在GitHub上找到，地址为[https://github.com/dev-cafe/cmake-cookbook](https://github.com/dev-cafe/cmake-cookbook)。代码采用标准的开源MIT许可证：这是一种宽容的软件许可证，您可以以任何您认为合适的方式重用和混编代码，只要在软件/源代码的任何副本中包含原始版权和许可证通知即可。许可证的全文可在[https://opensource.org/licenses/MIT](https://opensource.org/licenses/MIT)查看。
- en: 'In order to test the recipes by yourself, you will need a working installation
    of Git, obtained as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了自己测试食谱，您需要安装Git，安装方法如下：
- en: All major GNU/Linux distributions offer Git prepackaged, *via* their package
    managers. If that is not your case, a binary distribution can be downloaded from
    the Git project website at [https://git-scm.com](https://git-scm.com).
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有主要的GNU/Linux发行版都提供了预打包的Git，*通过*它们的包管理器。如果不是您的情况，可以从Git项目网站[https://git-scm.com](https://git-scm.com)下载二进制分发版。
- en: On macOS, it is possible to use Homebrew or MacPorts to install Git.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在macOS上，可以使用Homebrew或MacPorts来安装Git。
- en: On Windows, you can download the Git executable from the Git project website
    at [https://git-scm.com](https://git-scm.com).
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows上，您可以从Git项目网站[https://git-scm.com](https://git-scm.com)下载Git可执行文件。
- en: Alternatively, you can access the examples with the GitHub desktop client at [https://desktop.github.com](https://desktop.github.com).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以通过GitHub桌面客户端访问示例，地址为[https://desktop.github.com](https://desktop.github.com)。
- en: Yet another alternative is to download and extract the ZIP file from [https://github.com/dev-cafe/cmake-cookbook](https://github.com/dev-cafe/cmake-cookbook).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种选择是从[https://github.com/dev-cafe/cmake-cookbook](https://github.com/dev-cafe/cmake-cookbook)下载并提取ZIP文件。
- en: 'Once you have Git installed, you can clone the repository to your local machine,
    as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Git后，您可以将其克隆到本地机器上，如下所示：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will create a folder named `cmake-cookbook`. The book and the repository
    are organized in chapters and recipes. The numbering of chapters and the order
    of recipes in the repository reflect the order in the text. Each recipe is further
    organized into example folders. Some of the recipes have more than one example,
    usually when similar CMake concepts are illustrated in different programming languages.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个名为`cmake-cookbook`的文件夹。本书和仓库按章节和食谱组织。章节编号和仓库中食谱的顺序反映了文本中的顺序。每个食谱进一步组织成示例文件夹。有些食谱有多个示例，通常是在不同的编程语言中说明类似的CMake概念时。
- en: The recipes are tested on GNU/Linux, macOS, and Windows, using state-of-the-art
    continuous integration services. We will discuss the testing set up shortly.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 食谱在GNU/Linux、macOS和Windows上使用最先进的持续集成服务进行测试。我们将在稍后讨论测试设置。
- en: 'We have tagged the precise versions that correspond to the examples printed
    in this book with the tag `v1.0`. For maximum overlap with the book text, you
    can fetch this particular version as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经为本书中示例对应的精确版本打上了标签`v1.0`。为了与书中的文本最大限度地重叠，你可以按照以下方式获取这个特定版本：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We expect to receive bug fixes and the GitHub repository to evolve. To get the
    latest updates, you may prefer to follow the `master` branch of the repository,
    instead.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们预计会收到错误修复，并且GitHub仓库会不断发展。为了获取最新更新，你可能更愿意关注仓库的`master`分支。
- en: Docker image
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker镜像
- en: You will likely find that the easiest approach to testing the book's recipes
    in a software environment (which contains all of the dependencies preinstalled)
    is to use a Docker image that we have set up, based on Ubuntu 18.04. You can install
    Docker on your favorite operating system, following the official documentation
    at [https://docs.docker.com](https://docs.docker.com).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会发现，在软件环境中测试本书的配方（该环境包含所有预装的依赖项）最简单的方法是使用我们基于Ubuntu 18.04设置的Docker镜像。你可以在你喜欢的操作系统上安装Docker，按照官方文档的指导进行操作，网址为[https://docs.docker.com](https://docs.docker.com)。
- en: 'Once Docker is installed, you can run our image and test the recipes with the
    full software environment in place, as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Docker后，你可以运行我们的镜像，并在完整的软件环境中测试配方，如下所示：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Installing prerequisite software
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装预置软件
- en: 'An alternative to running the book recipes in a container is to install the
    dependencies directly on the host operating system. For this, we have assembled
    a minimal toolstack that can be used as a basic starting point for all of our
    recipes. You will have to install the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在容器中运行本书配方的替代方法是直接在主机操作系统上安装依赖项。为此，我们组装了一个最小工具栈，可以作为我们所有配方的基本起点。你需要安装以下内容：
- en: CMake
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CMake
- en: Language-specific tools, that is, the compilers
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 特定语言的工具，即编译器
- en: Build automation tools
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建自动化工具
- en: Python
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python
- en: We will also detail how to install the additional dependencies required by some
    of the recipes.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将详细说明如何安装一些配方所需的额外依赖项。
- en: Getting CMake
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取CMake
- en: 'CMake 3.5 is the minimum required version of CMake for this book. Only a few,
    specific recipes and examples that demonstrate useful features that were introduced
    after version 3.5 will require a more recent version of CMake. The introduction
    to every recipe features an info box, pointing out where the code is available,
    which examples are given, and the minimum version of CMake required. The info
    boxes will look like the following box:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 本书所需的CMake最低版本为3.5。只有少数特定配方和示例会展示在3.5版本之后引入的有用功能，这些将需要更新的CMake版本。每个配方的介绍中都有一个信息框，指出代码的可用位置、给出的示例以及所需的最低CMake版本。信息框将如下所示：
- en: The code for this recipe is available at [https://github.com/dev-cafe/cmake-cookbook/tree/v1.0/chapter-03/recipe-10](https://github.com/dev-cafe/cmake-cookbook/tree/v1.0/chapter-03/recipe-10),
    and includes a C example. The recipe is valid with CMake version 3.5 (and higher)
    and has been tested on GNU/Linux, macOS, and Windows.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方的代码可在[https://github.com/dev-cafe/cmake-cookbook/tree/v1.0/chapter-03/recipe-10](https://github.com/dev-cafe/cmake-cookbook/tree/v1.0/chapter-03/recipe-10)找到，并包含一个C语言示例。该配方适用于CMake版本3.5（及以上），并在GNU/Linux、macOS和Windows上进行了测试。
- en: Some, if not most, of the recipes will still be valid with older versions of
    CMake. However, we have made no attempts to test this assumption, since we consider
    CMake 3.5 to be the default on most systems and distributions. We also consider
    upgrading to later versions of CMake to be a straightforward step.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管大多数配方仍然适用于较旧版本的CMake，但我们没有尝试测试这一假设，因为我们认为CMake 3.5是大多数系统和发行版上的默认版本。我们也认为升级到较新版本的CMake是一个简单的步骤。
- en: CMake can be installed in a number of different ways. Downloading and extracting
    the binary distribution maintained by Kitware will work across all platforms.
    The download page is at [https://cmake.org/download/](https://cmake.org/download/).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: CMake可以通过多种方式安装。下载并提取Kitware维护的二进制分发版将在所有平台上工作。下载页面位于[https://cmake.org/download/](https://cmake.org/download/)。
- en: 'Most GNU/Linux distributions have CMake available in their package managers.
    However, on some distributions, the packaged version can be rather old, so downloading
    the binary maintained by Kitware is still the preferred option. The following
    commands will download and install CMake 3.5.2 under `$HOME/Deps/cmake` (adjust
    this path to your preference), from the version packaged by CMake:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数GNU/Linux发行版在其包管理器中都有CMake可用。然而，在某些发行版上，打包的版本可能相当陈旧，因此下载由Kitware维护的二进制文件仍然是首选选项。以下命令将从CMake打包的版本下载并安装CMake
    3.5.2到`$HOME/Deps/cmake`（根据您的喜好调整此路径）：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Homebrew for macOS reliably ships the latest version of CMake:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Homebrew for macOS可靠地提供最新版本的CMake：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: On Windows, you can use Visual Studio 2017, which provides CMake support. The
    installation of Visual Studio 2017 is documented in [Chapter 13](ea785243-b9e8-4993-ac0d-1038f181b496.xhtml),
    *Alternative Generators and Cross-compilation*, Recipe 1, *Building a CMake project
    using Visual Studio 2017*.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，您可以使用提供CMake支持的Visual Studio 2017。Visual Studio 2017的安装在[第13章](ea785243-b9e8-4993-ac0d-1038f181b496.xhtml)，*替代生成器和交叉编译*，食谱1，*使用Visual
    Studio 2017构建CMake项目*中有详细记录。
- en: 'Alternatively, you can download the MSYS2 installer from [https://www.msys2.org](https://www.msys2.org) ,
    follow the instructions given therein to update the list of packages, and then
    install CMake using the package manager, `pacman`. The following code assumes
    that we are building the 64-bit version:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以从[https://www.msys2.org](https://www.msys2.org)下载MSYS2安装程序，按照其中的说明更新包列表，然后使用包管理器`pacman`安装CMake。以下代码假设我们正在构建64位版本：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'For the 32-bit version, use the following (though we will only refer to 64-bit
    versions in future, for the sake of brevity):'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 对于32位版本，请使用以下命令（尽管为了简洁起见，我们将来只会提及64位版本）：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Another nice feature of MSYS2 is that it provides a terminal on Windows that
    feels and behaves like a terminal on a Unix-like operating system, providing a
    useful development environment.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: MSYS2的另一个不错的特点是，它为Windows提供了一个终端，感觉和行为类似于Unix类操作系统上的终端，提供了一个有用的开发环境。
- en: Compilers
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编译器
- en: 'We will need compilers for C++, C, and Fortran. These should be fairly recent,
    as we require support for recent language standards in most of the recipes. CMake
    offers very good support for many compilers, from both commercial and non-commercial
    vendors. To keep the recipes consistently cross-platform and as operating system
    independent as possible, we have worked with open source compilers:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将需要C++、C和Fortran的编译器。这些应该相当新，因为我们在大多数食谱中需要对最新语言标准的支持。CMake对许多编译器提供了非常好的支持，无论是商业的还是非商业的供应商。为了使食谱保持跨平台一致性，并尽可能操作系统独立，我们使用了开源编译器：
- en: 'On GNU/Linux, the GNU Compiler Collection (GCC) is the obvious choice. It is
    free and available for all distributions. For example, on Ubuntu, you can install
    the compilers as follows:'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在GNU/Linux上，GNU编译器集合（GCC）是显而易见的选择。它是免费的，适用于所有发行版。例如，在Ubuntu上，您可以按照以下方式安装编译器：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Clang, in the LLVM family, is also a good choice for C++ and C:'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Clang，属于LLVM家族，也是C++和C的一个好选择：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'On macOS, the LLVM compilers shipped with XCode will work for C++ and C. We
    have used the Fortran compiler from GCC in our macOS testing. This has to be installed
    separately, using the package manager. For example, the command for Homebrew is
    as follows:'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在macOS上，随XCode一起提供的LLVM编译器适用于C++和C。在我们的macOS测试中，我们使用了GCC的Fortran编译器。这需要单独安装，使用包管理器。例如，Homebrew的命令如下：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'On Windows, you can use Visual Studio for the C++ and C recipes. Alternatively,
    you can use the MSYS2 installer and install the entire toolchain, including a
    C++, C, and Fortran compiler, with the following single command in an MSYS2 environment
    (for the 64-bit version):'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows上，您可以使用Visual Studio进行C++和C食谱。或者，您可以使用MSYS2安装程序并安装整个工具链，包括C++、C和Fortran编译器，使用以下单个命令在MSYS2环境中（对于64位版本）：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Build-automation tools
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建自动化工具
- en: 'These build-automation tools will provide the infrastructure for building and
    linking the projects presented in the recipes. What you will end up installing
    and using strongly depends on your operating system and your taste:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这些构建自动化工具将为构建和链接本食谱中介绍的项目提供基础设施。您最终安装和使用的工具很大程度上取决于您的操作系统和个人喜好：
- en: On GNU/Linux, GNU Make will most likely be installed automatically, when installing
    the compilers.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在GNU/Linux上，安装编译器时，GNU Make很可能会自动安装。
- en: On macOS, XCode will provide GNU Make.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在macOS上，XCode将提供GNU Make。
- en: On Windows, Visual Studio will provide you with the complete infrastructure.
    In the MSYS2 environment, GNU Make is installed as a part of the `mingw64/mingw-w64-x86_64-toolchain`
    package, which we installed previously.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows上，Visual Studio将为你提供完整的基础设施。在MSYS2环境中，GNU Make作为`mingw64/mingw-w64-x86_64-toolchain`包的一部分安装，这是我们之前安装的。
- en: For maximum portability, we have made the recipes as agnostic about these system-dependent
    details as possible. A clear advantage of this approach is that configuring, building,
    and linking are native to each platform and each set of compilers.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 为了最大程度的可移植性，我们尽可能地使配方对这些系统依赖细节保持中立。这种方法的一个明显优势是，配置、构建和链接对于每个平台和每组编译器都是本地的。
- en: The Ninja program is a different build-automation tool that works on GNU/Linux,
    macOS, and Windows. Ninja is a new build tool, with a focus on speed, especially
    for incremental rebuilds. Prepackaged binaries for GNU/Linux, macOS, and Windows
    can be found on the project's GitHub repository at [https://github.com/ninja-build/ninja/releases](https://github.com/ninja-build/ninja/releases).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Ninja程序是一个不同的构建自动化工具，适用于GNU/Linux、macOS和Windows。Ninja是一个新的构建工具，专注于速度，特别是增量重建。预打包的二进制文件可以在项目的GitHub仓库中找到，网址为[https://github.com/ninja-build/ninja/releases](https://github.com/ninja-build/ninja/releases)。
- en: Using CMake and Ninja with Fortran projects requires some care. CMake 3.7.2
    or later is required, along with the version of Ninja maintained by Kitware, available
    at [https://github.com/Kitware/ninja/releases](https://github.com/Kitware/ninja/releases).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 使用CMake和Ninja与Fortran项目需要一些注意。需要CMake 3.7.2或更高版本，以及Kitware维护的Ninja版本，可在[https://github.com/Kitware/ninja/releases](https://github.com/Kitware/ninja/releases)找到。
- en: 'On GNU/Linux, you can install Ninja with the following series of commands:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在GNU/Linux上，你可以通过以下一系列命令安装Ninja：
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'On Windows, using the MSYS2 environment (assuming the 64-bit version), executing
    the command:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，使用MSYS2环境（假设是64位版本），执行以下命令：
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We recommend reading the essay at [http://www.aosabook.org/en/posa/ninja.html](http://www.aosabook.org/en/posa/ninja.html)
    for an enlightening discussion of Ninja's history and design choices.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议阅读[http://www.aosabook.org/en/posa/ninja.html](http://www.aosabook.org/en/posa/ninja.html)上的文章，以获得关于Ninja的历史和设计选择的启发性讨论。
- en: Python
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python
- en: 'This book is about CMake, but some of the recipes, along with the whole infrastructure
    powering testing, need Python. Thus, first and foremost, you will need a working
    installation of Python: the interpreter, header files, and libraries. The end
    of life for Python 2.7 was announced for 2020, and we will thus use Python 3.5.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 本书是关于CMake的，但其中一些配方，以及整个用于测试的基础设施，需要Python。因此，首先，你需要一个可用的Python安装：解释器、头文件和库。Python
    2.7的生命周期已于2020年结束，因此我们将使用Python 3.5。
- en: 'On Ubuntu 14.04 LTS (this is the environment used by Travis CI which we will
    discuss later on), Python 3.5 can be installed as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ubuntu 14.04 LTS上（这是Travis CI使用的环境，我们将在后面讨论），可以按如下方式安装Python 3.5：
- en: '[PRE13]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'On Windows, using the MSYS2 environment, the Python environment can be installed
    as follows (assuming the 64-bit version):'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，使用MSYS2环境，可以按如下方式安装Python环境（假设是64位版本）：
- en: '[PRE14]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Specific Python modules are also required, in order to run the testing machinery
    that we have put in place. These can be installed system-wide by using your favorite
    package manager, or in an isolated environment. The latter approach is highly
    recommended, as it offers the following advantages:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要特定的Python模块，以便运行我们设置的测试机制。这些可以通过使用你喜欢的包管理器全局安装，或者在隔离环境中安装。后者方法强烈推荐，因为它提供了以下优势：
- en: You can install packages and clean up installations without affecting the system
    environment.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以安装包并清理安装，而不会影响系统环境。
- en: Packages can be installed without administrator privileges.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无需管理员权限即可安装包。
- en: You lower the risk of version and dependency clashes.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你降低了版本和依赖冲突的风险。
- en: You gain much better control over package dependencies, for reproducibility.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以更好地控制包依赖关系，以实现可重复性。
- en: 'We have prepared a `Pipfile` for this purpose. In combination with its `Pipfile.lock`,
    you can use Pipenv ([http://pipenv.readthedocs.io](http://pipenv.readthedocs.io))
    to generate an isolated environment, with all packages installed. To create this
    environment for the recipe example repository, run the following commands in the
    top-level directory of the repository:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经为此准备了一个`Pipfile`。结合其`Pipfile.lock`，您可以使用Pipenv（[http://pipenv.readthedocs.io](http://pipenv.readthedocs.io)）来生成一个隔离环境，其中安装了所有软件包。要在配方示例仓库中创建此环境，请在仓库的顶级目录中运行以下命令：
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The **`pipenv shell`** command will drop you into a command-line environment
    with the specific version of Python and all of the packages available. Executing
    `exit` will bring you back to a clean environment. You can also use `pipenv run`
    to directly execute a command within the isolated environment.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**`pipenv shell`**命令将使您进入一个命令行环境，其中包含特定版本的Python和所有可用的软件包。执行`exit`将带您回到一个干净的环境。您也可以使用`pipenv
    run`直接在隔离环境中执行命令。'
- en: 'Alternatively, the `requirements.txt` file in the repository can be used, in
    combination with Virtualenv ([http://docs.python-guide.org/en/latest/dev/virtualenvs/](http://docs.python-guide.org/en/latest/dev/virtualenvs/))
    and `pip`, to achieve the same effect:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，可以使用仓库中的`requirements.txt`文件，结合Virtualenv（[http://docs.python-guide.org/en/latest/dev/virtualenvs/](http://docs.python-guide.org/en/latest/dev/virtualenvs/)）和`pip`，来达到同样的效果：
- en: '[PRE16]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The virtual environment can be exited by using the `deactivate` command.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过使用`deactivate`命令退出虚拟环境。
- en: 'Yet another alternative is to use Conda environments. To do so, we suggest
    installing Miniconda. The following instructions will install the latest Miniconda
    to the directory `$HOME/Deps/conda`, for GNU/Linux (download from [https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh](https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh))
    or macOS (download from [https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh](https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh)):'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种选择是使用Conda环境。为此，我们建议安装Miniconda。以下指令将安装最新的Miniconda到目录`$HOME/Deps/conda`，适用于GNU/Linux（从[https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh](https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh)下载）或macOS（从[https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh](https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh)下载）：
- en: '[PRE17]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'On Windows, you can download the latest Miniconda from [https://repo.continuum.io/miniconda/Miniconda3-latest-Windows-x86_64.exe](https://repo.continuum.io/miniconda/Miniconda3-latest-Windows-x86_64.exe).
    The package can be installed using PowerShell, as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，您可以从[https://repo.continuum.io/miniconda/Miniconda3-latest-Windows-x86_64.exe](https://repo.continuum.io/miniconda/Miniconda3-latest-Windows-x86_64.exe)下载最新的Miniconda。可以使用PowerShell按照以下方式安装软件包：
- en: '[PRE18]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Once Conda is installed, the Python modules can be installed as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Conda后，可以按照以下方式安装Python模块：
- en: '[PRE19]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Executing `conda deactivate` will drop you outside of the isolated environment.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 执行`conda deactivate`将使您退出隔离环境。
- en: Additional software
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 额外软件
- en: Some recipes will require additional software, which will be covered in the
    following sections.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 一些配方将需要额外的软件，这些将在以下部分中介绍。
- en: BLAS and LAPACK
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: BLAS和LAPACK
- en: 'Most Linux distributions provide packages for BLAS and LAPACK. For example,
    on Ubuntu 14.04 LTS, you can run the following:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Linux发行版都提供了BLAS和LAPACK的软件包。例如，在Ubuntu 14.04 LTS上，您可以运行以下命令：
- en: '[PRE20]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: On macOS, the Accelerate libraries, shipped with XCode, are enough for our purposes.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在macOS上，随XCode一起提供的Accelerate库足以满足我们的需求。
- en: 'On Windows, using the MSYS2 environment, these libraries can be installed as
    follows (assuming the 64-bit version):'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，使用MSYS2环境，可以按照以下方式安装这些库（假设是64位版本）：
- en: '[PRE21]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Alternatively, you can download the reference implementation of BLAS and LAPACK
    from GitHub ([https://github.com/Reference-LAPACK/lapack](https://github.com/Reference-LAPACK/lapack))
    and compile the libraries from sources. Commercial vendors might offer packages
    for their own implementations of the BLAS and LAPACK APIs, available as installers
    for your platform.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以从GitHub下载BLAS和LAPACK的参考实现（[https://github.com/Reference-LAPACK/lapack](https://github.com/Reference-LAPACK/lapack)），并从源代码编译这些库。商业供应商可能会为其BLAS和LAPACK
    API的实现提供软件包，这些软件包作为适用于您平台的安装程序提供。
- en: Message passing interface (MPI)
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消息传递接口（MPI）
- en: 'There are many commercial and non-commercial implementations of MPI. For our
    introductory purposes, it is enough to install any of the freely available non-commercial
    implementations. On Ubuntu 14.04 LTS, we recommend OpenMPI. It can be installed
    with the following command:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多商业和非商业的MPI实现。对于我们的入门目的，安装任何免费提供的非商业实现就足够了。在Ubuntu 14.04 LTS上，我们推荐OpenMPI。可以使用以下命令安装它：
- en: '[PRE22]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'For macOS, Homebrew distributes MPICH:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 对于macOS，Homebrew分发MPICH：
- en: '[PRE23]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: It is also possible to compile OpenMPI from the sources publicly available at
    [https://www.open-mpi.org/software/](https://www.open-mpi.org/software/).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以从[https://www.open-mpi.org/software/](https://www.open-mpi.org/software/)公开的源代码编译OpenMPI。
- en: For Windows, the Microsoft MPI implementation can be installed *via *[https://msdn.microsoft.com/en-us/library/bb524831(v=vs.85).aspx](https://msdn.microsoft.com/en-us/library/bb524831(v=vs.85).aspx).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows，Microsoft MPI实现可以通过[https://msdn.microsoft.com/en-us/library/bb524831(v=vs.85).aspx](https://msdn.microsoft.com/en-us/library/bb524831(v=vs.85).aspx)安装。
- en: The Eigen linear algebra template library
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Eigen线性代数模板库
- en: 'Some recipes will need the Eigen linear algebra template library, version 3.3
    or later. If your package manager does not provide Eigen, you can install it from
    the online source archive ([http://eigen.tuxfamily.org](http://eigen.tuxfamily.org)).
    For example, on GNU/Linux and macOS, you can install Eigen to the directory `$HOME/Deps/eigen`,
    as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 有些配方需要Eigen线性代数模板库，版本3.3或更高。如果您的包管理器不提供Eigen，您可以从在线源代码存档([http://eigen.tuxfamily.org](http://eigen.tuxfamily.org))安装它。例如，在GNU/Linux和macOS上，您可以将Eigen安装到目录`$HOME/Deps/eigen`，如下所示：
- en: '[PRE24]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The Boost libraries
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Boost库
- en: 'Boost packages are available for every operating system; most Linux distributions
    have packages available through their package managers. On Ubuntu 14.04 LTS, for
    instance, the Boost Filesystem, Boost Python, and Boost Test libraries can be
    installed with the following command:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Boost包适用于每个操作系统；大多数Linux发行版都通过其包管理器提供包。例如，在Ubuntu 14.04 LTS上，可以使用以下命令安装Boost
    Filesystem、Boost Python和Boost Test库：
- en: '[PRE25]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'For macOS, both MacPorts and Homebrew provide packages for recent versions
    of Boost. Our testing setup on macOS installs Boost as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 对于macOS，MacPorts和Homebrew都为较新版本的Boost提供了包。我们在macOS上的测试设置按如下方式安装Boost：
- en: '[PRE26]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Prebuilt binary distributions for Windows are also available for download from
    the Boost website at [http://www.boost.org](http://www.boost.org). Alternatively,
    you can download the sources from [https://www.boost.org](https://www.boost.org)
    and compile the libraries yourself.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 预构建的Windows二进制分发版也可以从Boost网站[http://www.boost.org](http://www.boost.org)下载。或者，您可以从[https://www.boost.org](https://www.boost.org)下载源代码并自行编译库。
- en: Cross-compilers
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交叉编译器
- en: 'On Debian/Ubuntu-like systems, cross-compilers can be installed with the following
    command:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在Debian/Ubuntu类系统上，可以使用以下命令安装交叉编译器：
- en: '[PRE27]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'On macOS, using Brew, the cross-compilers can be installed as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在macOS上，使用Brew，交叉编译器可以按如下方式安装：
- en: '[PRE28]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Other package managers offer corresponding packages.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 其他包管理器提供相应的包。
- en: An alternative to using packaged cross-compilers is to build them from sources,
    using the M cross environment ([https://mxe.cc](https://mxe.cc)).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 使用打包的交叉编译器的替代方案是使用M交叉环境([https://mxe.cc](https://mxe.cc))从源代码构建它们。
- en: ZeroMQ, pkg-config, UUID, and Doxygen
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ZeroMQ、pkg-config、UUID和Doxygen
- en: 'On Ubuntu 14.04 LTS, these packages can be installed as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ubuntu 14.04 LTS上，这些包可以按如下方式安装：
- en: '[PRE29]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'On macOS, we recommend installing with Brew:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在macOS上，我们建议使用Brew安装：
- en: '[PRE30]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The `pkg-config` program and UUID library are only available on Unix-like systems.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`pkg-config`程序和UUID库仅在类Unix系统上可用。'
- en: 'On Windows, using the MSYS2 environment, these dependencies can be installed
    as follows (assuming the 64-bit version):'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，使用MSYS2环境，这些依赖项可以按如下方式安装（假设是64位版本）：
- en: '[PRE31]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Conda build and deployment tools
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Conda构建和部署工具
- en: 'The recipes exploring packaging with Conda will need Miniconda and the Conda
    build and deployment tools installed on the system. The instructions for the installation
    of Miniconda were given previously. To install Conda build and deployment tools
    on GNU/Linux and macOS, run the following commands:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 探索使用Conda打包的配方将需要系统上安装了Miniconda和Conda构建和部署工具。之前给出了安装Miniconda的说明。要在GNU/Linux和macOS上安装Conda构建和部署工具，请运行以下命令：
- en: '[PRE32]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'These tools can be installed on Windows as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工具可以按如下方式在Windows上安装：
- en: '[PRE33]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Testing the recipes
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试配方
- en: 'The recipes are tested on state-of-the-art continuous integration (CI) services:
    Travis ([https://travis-ci.org](https://travis-ci.org)) for GNU/Linux and macOS,
    Appveyor ([https://www.appveyor.com](https://www.appveyor.com)) for Windows, and
    CircleCI ([https://circleci.com](https://circleci.com)) for additional GNU/Linux
    testing with commercial compilers. The configuration files for the CI services
    can be found in the repository ([https://github.com/dev-cafe/cmake-cookbook/](https://github.com/dev-cafe/cmake-cookbook/)):
    `.travis.yml` for Travis, `.appveyor.yml` for Appveyor, and `.circleci/config.yml`
    for CircleCI. Additional installation scripts for Travis and Appveyor can be found
    in the folder `testing/dependencies`.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这些配方在先进的持续集成（CI）服务上进行了测试：Travis（[https://travis-ci.org](https://travis-ci.org)）用于GNU/Linux和macOS，Appveyor（[https://www.appveyor.com](https://www.appveyor.com)）用于Windows，以及CircleCI（[https://circleci.com](https://circleci.com)）用于使用商业编译器的额外GNU/Linux测试。CI服务的配置文件可以在仓库中找到（[https://github.com/dev-cafe/cmake-cookbook/](https://github.com/dev-cafe/cmake-cookbook/)）：`.travis.yml`
    用于Travis，`.appveyor.yml` 用于Appveyor，以及 `.circleci/config.yml` 用于CircleCI。Travis和Appveyor的额外安装脚本可以在
    `testing/dependencies` 文件夹中找到。
- en: We test the recipes with CMake 3.5.2 and CMake 3.12.1 on the Travis GNU/Linux
    infrastructure. CMake 3.12.1 is used on the Travis macOS infrastructure. On Appveyor,
    testing uses CMake 3.11.3\. On Circle, CMake 3.12.1 is used.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在Travis GNU/Linux基础设施上使用CMake 3.5.2和CMake 3.12.1测试这些配方。在Travis macOS基础设施上使用CMake
    3.12.1。在Appveyor上，测试使用CMake 3.11.3。在CircleCI上，使用CMake 3.12.1。
- en: 'The testing machinery is a set of Python scripts that are also contained in
    the `testing` folder. The script `collect_tests.py` will run tests and report
    their statuses. Recipes can be tested in isolation, or in batches; `collect_tests.py`
    accepts a regular expression as command-line input, for example:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 测试机制是一套包含在 `testing` 文件夹中的Python脚本。脚本 `collect_tests.py` 将运行测试并报告它们的状态。可以单独测试配方，也可以批量测试；`collect_tests.py`
    接受一个正则表达式作为命令行输入，例如：
- en: '[PRE34]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'This command will run tests for Recipes 1, 2, and 5, in Chapters 1 and 7\.
    A sample of the output looks as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将运行第1章和第7章中第1、2和5个配方的测试。输出示例如下：
- en: '![](img/6ab8549e-aed8-4858-be83-758264c930bf.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6ab8549e-aed8-4858-be83-758264c930bf.png)'
- en: 'To get more verbose output, set `VERBOSE_OUTPUT=ON`:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取更详细的输出，请设置`VERBOSE_OUTPUT=ON`：
- en: '[PRE35]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Reporting problems and suggesting improvements
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 报告问题和提出改进建议
- en: Please report issues at [https://github.com/dev-cafe/cmake-cookbook/issues](https://github.com/dev-cafe/cmake-cookbook/issues).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 请在[https://github.com/dev-cafe/cmake-cookbook/issues](https://github.com/dev-cafe/cmake-cookbook/issues)报告问题。
- en: To contribute changes,we recommend forking the repository [https://github.com/dev-cafe/cmake-cookbook](https://github.com/dev-cafe/cmake-cookbook) and
    submitting changes using pull requests, following [https://help.github.com/articles/creating-a-pull-request-from-a-fork/](https://help.github.com/articles/creating-a-pull-request-from-a-fork/)[.](https://github.com/dev-cafe/cmake-cookbook)
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 为了贡献更改，我们建议分叉仓库[https://github.com/dev-cafe/cmake-cookbook](https://github.com/dev-cafe/cmake-cookbook)并使用拉取请求提交更改，遵循[https://help.github.com/articles/creating-a-pull-request-from-a-fork/](https://help.github.com/articles/creating-a-pull-request-from-a-fork/)。
- en: For non-trivial changes, we recommend to first describe and discuss the proposed
    change by opening an issue on [https://github.com/dev-cafe/cmake-cookbook/issues](https://github.com/dev-cafe/cmake-cookbook/issues) before
    sending a pull request.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 对于非简单的更改，我们建议首先在[https://github.com/dev-cafe/cmake-cookbook/issues](https://github.com/dev-cafe/cmake-cookbook/issues)上打开一个问题来描述和讨论提议的更改，然后再发送拉取请求。
