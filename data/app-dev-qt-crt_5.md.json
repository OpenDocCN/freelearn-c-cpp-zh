["```cpp\nimport QtQuick 2.0\n\nRectangle {\n    id: button\n\n    width: 128\n    height: 64\n\n    property alias label: buttonText.text\n    property int delay: 0\n\n    color: \"green\"\n\n    Rectangle {\n        id: shade\n        anchors.fill: button;\n        color: \"black\"; opacity: 0\n    }\n\n    Text {\n        id: buttonText\n        anchors.centerIn: parent;\n        color: \"white\"\n        font.pointSize: 16\n    }\n\n    MouseArea {\n        id: mouseArea\n        anchors.fill: parent\n        onClicked: {\n            for(var i = 0; i < button.delay; i++);\n        }\n    }\n\n    states: [\n        State {\n            name: \"pressed\"; when: mouseArea.pressed == true\n            PropertyChanges { target: shade; opacity: .4 }\n        }\n    ]\n}\n```", "```cpp\nimport QtQuick 2.0\n\nRectangle {\n    width: 180\n    height: 360\n\n    Column\n    {\n        spacing: 20\n        Button\n        {\n            delay: 10000;\n            label: \"fast\";\n        }\n        Button\n        {\n            delay: 100000;\n            label: \"medium\";\n        }\n        Button\n        {\n            delay: 300000;\n            label: \"slow\";\n        }\n    }\n}\n```", "```cpp\nsudo apt-get install valgrind\n\n```", "```cpp\n// mainwindow.h\n#ifndef MAINWINDOW_H\n#define MAINWINDOW_H\n\n#include <QMainWindow>\n\nnamespace Ui {\n    class MainWindow;\n}\n\nclass MainWindow : public QMainWindow\n{\n    Q_OBJECT\n\npublic:\n    explicit MainWindow(QWidget *parent = 0);\n    ~MainWindow();\n\npublic slots:\n    void leakPressed();\n\nprivate:\n    Ui::MainWindow *ui;\n    int m_count;\n};\n\n#endif // MAINWINDOW_H\n\n// mainwindow.cpp\n\n#include \"mainwindow.h\"\n#include \"ui_mainwindow.h\"\n\nMainWindow::MainWindow(QWidget *parent) :\n    QMainWindow(parent),\n    ui(new Ui::MainWindow),\n    m_count(0)\n{\n    ui->setupUi(this);\n    connect(ui->leakButton, SIGNAL(clicked()),\n            this, SLOT(leakPressed()));\n}\n\nMainWindow::~MainWindow()\n{\n    delete ui;\n}\n\nvoid MainWindow::leakPressed()\n{\n    void *p = new char[512 * 1024];\n    m_count++;\n    ui->leakCount->setText(QString::number(m_count));\n}\n```", "```cpp\n    -q --tool=memcheck --leak-check=full --leak-resolution=low ./<your-app-target-name>\n\n    ```", "```cpp\nX bytes in 1 blocks are definitely lost in loss record n of m\n at 0x........: function_name (filename:line number)\n\n```", "```cpp\n-q --tool=memcheck --leak-check=full --leak-resolution=low --suppressions=suppresion.txt ./[your-app-target-name]\n\n```"]