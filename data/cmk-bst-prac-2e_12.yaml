- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Handling Distributed Repositories and Dependencies in a Super-Build
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在超级构建中处理分布式仓库和依赖项
- en: As we should have learned by now, every big project comes with its own set of
    dependencies. The easiest way of dealing with these dependencies is by using a
    package manager, such as **Conan** or **vcpkg**. But using a package manager might
    not always be possible or feasible, due to company policies, project requirements,
    or lack of resources. Thus, the project authors might consult traditional, old-style
    ways of dealing with dependencies. The usual way of dealing with these dependencies
    may include shipping all dependencies embedded into the repository’s build code.
    Alternatively, project authors may decide to let the end user deal with the dependencies
    from scratch. Neither of these ways is clean and has its own drawbacks. What if
    I told you there is a middle ground? Welcome to the *super-build* approach.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们现在应该已经了解的，每个大项目都有自己的依赖项。处理这些依赖项最简单的方法是使用包管理器，如**Conan**或**vcpkg**。但是，使用包管理器并不总是可行的，可能是由于公司政策、项目需求或资源不足。因此，项目作者可能会考虑使用传统的老式方式来处理依赖项。处理这些依赖项的常见方式可能包括将所有依赖项嵌入到仓库的构建代码中。或者，项目作者可能决定让最终用户从头开始处理依赖项。这两种方式都不太清晰，各有缺点。如果我告诉你有一个折衷方案呢？欢迎使用*超级构建*方法。
- en: A super-build is a method that can be used to decouple the logic required for
    satisfying dependencies from project code, like how package managers work. In
    fact, we can call this method *the poor man’s package manager*. Separating the
    dependency logic from the project code allows us to have a more flexible and maintainable
    project structure. In this chapter, we will learn how to achieve this in detail.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 超级构建是一种可以用于将满足依赖关系所需的逻辑与项目代码解耦的方法，就像包管理器的工作原理一样。事实上，我们可以把这种方法称为*穷人的包管理器*。将依赖逻辑与项目代码分离，使我们能够拥有更灵活、更易于维护的项目结构。在本章中，我们将详细学习如何实现这一点。
- en: 'To understand the skills shared in this chapter, we’ll cover the following
    main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解本章分享的技巧，我们将涵盖以下主要内容：
- en: The requirements and prerequisites for a super-build
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超级构建的要求和前提条件
- en: Building across multiple code repositories
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨多个代码仓库构建
- en: Ensuring version consistency in a super-build
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保超级构建中的版本一致性
- en: Let’s begin with the technical requirements.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从技术要求开始。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Before you dive further into this chapter, you should have a good grasp of the
    content covered in [*Chapter 5*](B30947_05.xhtml#_idTextAnchor084), *Integrating
    Third-Party Libraries* *and Dependency Management*. This chapter will follow the
    teaching-by-example approach. Thus, it is recommended to obtain this chapter’s
    example content from [https://github.com/PacktPublishing/CMake-Best-Practices---2nd-Edition/tree/main/chapter10](https://github.com/PacktPublishing/CMake-Best-Practices---2nd-Edition/tree/main/chapter10).
    All of the examples assume that you will be using the container provided by the
    project at [https://github.com/PacktPublishing/CMake-Best-Practices---2nd-Edition](https://github.com/PacktPublishing/CMake-Best-Practices---2nd-Edition).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入本章之前，你应该已经掌握了[*第5章*](B30947_05.xhtml#_idTextAnchor084)的内容，*整合第三方库* *和依赖管理*。本章将采用以实例教学的方式，因此建议从[https://github.com/PacktPublishing/CMake-Best-Practices---2nd-Edition/tree/main/chapter10](https://github.com/PacktPublishing/CMake-Best-Practices---2nd-Edition/tree/main/chapter10)获取本章的示例内容。所有示例都假设你将使用项目中提供的容器，项目地址为[https://github.com/PacktPublishing/CMake-Best-Practices---2nd-Edition](https://github.com/PacktPublishing/CMake-Best-Practices---2nd-Edition)。
- en: Let’s begin learning about super-builds by inspecting the prerequisites and
    requirements.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从检查超级构建的前提和要求开始学习。
- en: The requirements and prerequisites for a super-build
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 超级构建的要求和前提条件
- en: Super-builds can be structured as a grand build that builds multiple projects
    or as an in-project submodule that deals with dependencies. Therefore, having
    the means of acquiring repositories is a must. Fortunately, CMake has stable and
    established ways of doing so. To name a few, `ExternalProject` and `FetchContent`
    are the most popular CMake modules for dealing with external dependencies. We
    will be using the `FetchContent` CMake module in our examples, since it is cleaner
    and easier to deal with. Please note that using the means provided by CMake is
    not a strict requirement but a convenience. A super-build can also be structured
    by using version control system utilities, such as `git submodule` or `git subtree`.
    Since CMake is this book’s focal point and Git’s support of `FetchContent` is
    quite decent, we prefer to utilize it.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 超级构建可以结构化为一个大型构建，构建多个项目，或者作为一个项目内部的子模块来处理依赖。因此，获取仓库的手段是必须的。幸运的是，CMake 提供了稳定且成熟的方式来实现这一点。举几个例子，`ExternalProject`
    和 `FetchContent` 是处理外部依赖的最流行的 CMake 模块。在我们的示例中，我们将使用 `FetchContent` CMake 模块，因为它更简洁且易于处理。请注意，使用
    CMake 提供的手段并不是强制要求，而是一种便捷方式。超级构建也可以通过使用版本控制系统工具来结构化，比如 `git submodule` 或 `git
    subtree`。由于本书的重点是 CMake，而 Git 对 `FetchContent` 的支持也相当不错，我们倾向于使用它。
- en: That’s it for now. Let’s continue by learning about building a project that
    spans multiple code repositories.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在就到这里。让我们继续学习如何构建跨多个代码仓库的项目。
- en: Building across multiple code repositories
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跨多个代码仓库进行构建
- en: Software projects, either directly or indirectly, span multiple code repositories.
    Dealing with local project code is the easiest, but software projects are rarely
    standalone. Things may get complicated quickly without a proper dependency management
    strategy. The first recommendation of this chapter is to *use a package manager
    or a dependency provider if you can*. As described in [*Chapter 5*](B30947_05.xhtml#_idTextAnchor084),
    *Integrating Third-Party Libraries and Dependency Management*, package managers
    greatly reduce the effort spent on dependency management. If you are not able
    to use a pre-built package manager, you may need to roll your very own mini project-specific
    package manager, which is called a **super-build**.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 软件项目，无论是直接的还是间接的，都涉及多个代码仓库。处理本地项目代码是最简单的，但软件项目很少是独立的。如果没有合适的依赖管理策略，事情可能会很快变得复杂。本章的第一个建议是*如果可能的话，使用包管理器或依赖提供者*。正如在
    [*第5章*](B30947_05.xhtml#_idTextAnchor084) 中所描述的，*集成第三方库和依赖管理*，包管理器大大减少了在依赖管理上花费的精力。如果你不能使用预构建的包管理器，你可能需要为你的项目创建一个专门的迷你包管理器，这就是所谓的
    **超级构建**。
- en: Super-builds are mostly used to make a project self-sufficient dependency-wise,
    which means the project is able to satisfy its very own dependencies without the
    intervention of the user. Having such an ability is very convenient for all consumers.
    To demonstrate this technique, we will start with an example of such a scenario.
    Let’s begin.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 超级构建主要用于使项目在依赖方面自给自足，也就是说，项目能够在不需要用户干预的情况下满足自身的依赖。拥有这样的能力对所有使用者来说都非常方便。为了演示这种技术，我们将从一个这种场景的示例开始。让我们开始吧。
- en: The recommended way to create super-builds – FetchContent
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建超级构建的推荐方式 – FetchContent
- en: 'We will be following `Chapter 10``, Example 01` for this part. Let’s start
    by inspecting `Chapter 10``, Example 01`’s `CMakeLists.txt` file, as usual. The
    first seven lines are left out for simplicity:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将按照 `Chapter 10``, Example 01` 来进行这一部分的学习。让我们像往常一样，首先检查 `Chapter 10``, Example
    01` 的 `CMakeLists.txt` 文件。为了简便起见，前七行被省略了：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As we can see, it is a simple `CMakeLists.txt` file that defines two targets,
    named `ch10_ex01_tests` and `ch10_ex01_benchmarks`. These targets depend on the
    Google Test and Google Benchmark libraries, respectively. These libraries are
    found and defined by either the super-build or the `find_package(…)` calls, depending
    on the `CH10_EX01_USE_SUPERBUILD` variable. The `find_package(…)` path is the
    way we have followed until now. Let’s inspect the super-build file, `superbuild.cmake`,
    together:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，这是一个简单的 `CMakeLists.txt` 文件，定义了两个目标，分别命名为 `ch10_ex01_tests` 和 `ch10_ex01_benchmarks`。这两个目标分别依赖于
    Google Test 和 Google Benchmark 库。这些库通过超级构建或 `find_package(…)` 调用来查找和定义，具体取决于 `CH10_EX01_USE_SUPERBUILD`
    变量。`find_package(…)` 路径是我们到目前为止所采用的方式。让我们一起检查超级构建文件 `superbuild.cmake`：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the first line, the `FetchContent` CMake module is included, since we are
    going to utilize it for the dependencies. In the following six lines, the `FetchContent_Declare`
    function is used to declare two external targets, `benchmark` and `GTest`, which
    are instructed to be fetched via Git. Consequently, the `FetchContent_MakeAvailable(…)`
    function is called to make the declared targets available. Lastly, an `add_library(…)`
    call is made to define an alias target named `GTest::Main` for the `gtest_main`
    target. This is done to keep the compatibility between `find_package(…)` and super-build
    target names. There is no alias target defined for `benchmark`, since its `find_package(…)`
    and super-build target names are already compatible.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一行中，我们包含了`FetchContent` CMake模块，因为我们将利用它来处理依赖关系。在接下来的六行中，使用`FetchContent_Declare`函数声明了两个外部目标，`benchmark`和`GTest`，并指示它们通过Git获取。因此，调用了`FetchContent_MakeAvailable(…)`函数以使声明的目标可用。最后，调用`add_library(…)`来定义一个名为`GTest::Main`的别名目标，指向`gtest_main`目标。这样做是为了保持`find_package(…)`和超级构建目标名称之间的兼容性。对于`benchmark`，没有定义别名目标，因为它的`find_package(…)`和超级构建目标名称已经兼容。
- en: 'Let’s configure and build the example by invoking the following commands:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过调用以下命令来配置和构建示例：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the first two lines, we are going into the `example10/ex01` folder and configuring
    the project. Note that we are setting the `CH10_EX01_USE_SUPERBUILD` variable
    to `ON` in order to enable the super-build code. In the last line, we are building
    the project with *N* parallel jobs, where *N* is the result of the `nproc` command.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在前两行中，我们进入`example10/ex01`文件夹并配置项目。请注意，我们将`CH10_EX01_USE_SUPERBUILD`变量设置为`ON`，以启用超级构建代码。在最后一行，我们通过*N*个并行作业构建项目，其中*N*是`nproc`命令的结果。
- en: Thanks to the alternate `find_package(...)` path, the build will also work fine
    without enabling the super-build, given that `google test >= 1.10.0` and `google
    benchmark >= 1.6.1` are available in the environment. This will allow package
    maintainers to change dependency versions without patching the project. Small
    customization points such as this are important for portability and reproducibility.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 由于替代的`find_package(...)`路径，构建在没有启用超级构建的情况下也能正常工作，前提是环境中有`google test >= 1.10.0`和`google
    benchmark >= 1.6.1`。这将允许包维护者在不修补项目的情况下更改依赖项版本。像这样的细小定制点对于可移植性和可重复性非常重要。
- en: Up next, we’ll be taking a look at a super-build example that uses the `ExternalProject`
    module instead of the `FetchContent` module.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将查看一个使用`ExternalProject`模块而不是`FetchContent`模块的超级构建示例。
- en: The legacy way – ExternalProject_Add
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 传统方法 – ExternalProject_Add
- en: Before `FetchContent` was a thing, most people implemented the super-build approach
    by utilizing the `ExternalProject_Add` CMake function. This function is provided
    by the `ExternalProject` CMake module. In this section, we will see a super-build
    example with `ExternalProject_Add` to see how it differs from using the `FetchContent`
    module.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在`FetchContent`出现之前，大多数人通过使用`ExternalProject_Add` CMake函数实现了超级构建方法。该函数由`ExternalProject`
    CMake模块提供。在本节中，我们将通过`ExternalProject_Add`查看一个超级构建示例，以了解它与使用`FetchContent`模块的区别。
- en: 'Let’s take a look at the `CMakeLists.txt` file in `Chapter 10``, Example 02`
    together (comments and the project directive are omitted):'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们一起看看`Chapter 10`, Example 02`中的`CMakeLists.txt`文件（注释和项目指令已省略）：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Again, the project is a unit-test project containing a single C++ source file,
    but this time it is with `catch2` instead of Google Test. The `CMakeLists.txt`
    file includes the `superbuild.cmake` file directly, defines an executable target,
    and links the `Catch2` library to the target. You may have noticed that this example
    does not use `FindPackage(...)` to discover the `Catch2` library. The reason for
    this is that, unlike `FetchContent`, `ExternalProject` fetches and builds the
    external dependencies at build time. Since the content of the `Catch2` library
    is not available at configuration time, we are unable to use `FindPackage(...)`
    here. `FindPackage(…)` runs at configure time and requires the package files to
    be present. Let’s take a look at `superbuild.cmake` as well:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，这个项目是一个单元测试项目，包含一个C++源文件，不过这次使用的是`catch2`而不是Google Test。`CMakeLists.txt`文件直接包含了`superbuild.cmake`文件，定义了一个可执行目标，并将`Catch2`库链接到该目标。你可能已经注意到，这个示例没有使用`FindPackage(...)`来发现`Catch2`库。原因在于，与`FetchContent`不同，`ExternalProject`是在构建时获取并构建外部依赖项。由于`Catch2`库的内容在配置时不可用，我们无法在此使用`FindPackage(...)`。`FindPackage(…)`在配置时运行，并需要包文件存在。让我们也看看`superbuild.cmake`：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `superbuild.cmake` module includes the `ExternalProject` CMake module. The
    code calls the `ExternalProject_Add` function to declare a target named `catch2_download`
    with the `GIT_REPOSITORY`, `GIT_TAG`, `INSTALL_COMMAND`, and `CMAKE_ARGS` arguments.
    As you may recall from previous chapters, the `ExternalProject_Add` function can
    fetch dependencies from different sources. Our example is trying to fetch the
    dependency via using Git. The `GIT_REPOSITORY` and `GIT_TAG` arguments are for
    specifying the target Git repository URL and the tag to be checked out after the
    `git clone` respectively. Since `Catch2` is a CMake project, the number of parameters
    we need to supply to the `ExternalProject_Add` function is minimal. The `ExternalProject_Add`
    function knows how to configure, build, and install a CMake project by default,
    so no `CONFIGURE_COMMAND` or `BUILD_COMMAND` argument is needed. The empty `INSTALL_COMMAND`
    argument is for disabling and installing the dependency after the build. The last
    argument, `CMAKE_ARGS`, is for passing CMake arguments to the external project’s
    configure step. We use this to suppress a GCC warning (treated as an error) about
    legacy pragmas in the `Catch2` compilation.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`superbuild.cmake` 模块包含了 `ExternalProject` CMake 模块。代码调用了 `ExternalProject_Add`
    函数来声明一个名为 `catch2_download` 的目标，并指定 `GIT_REPOSITORY`、`GIT_TAG`、`INSTALL_COMMAND`
    和 `CMAKE_ARGS` 参数。如你从前面的章节中回忆的那样，`ExternalProject_Add` 函数可以从不同的源获取依赖项。我们的示例是尝试通过
    Git 获取依赖项。`GIT_REPOSITORY` 和 `GIT_TAG` 参数分别用于指定目标 Git 仓库的 URL 和 `git clone` 后需要签出的标签。由于
    `Catch2` 是一个 CMake 项目，因此我们需要提供给 `ExternalProject_Add` 函数的参数最少。`ExternalProject_Add`
    函数默认知道如何配置、构建和安装一个 CMake 项目，因此无需 `CONFIGURE_COMMAND` 或 `BUILD_COMMAND` 参数。空的 `INSTALL_COMMAND`
    参数用于禁用并安装构建后的依赖项。最后一个参数 `CMAKE_ARGS` 用于向外部项目的配置步骤传递 CMake 参数。我们用它来抑制一个关于 `Catch2`
    编译中遗留 pragma 的 GCC 警告（将其视为错误）。'
- en: The `ExternalProject_Add` command fetches the desired library into a prefix
    path and builds it. So, to use the fetched content, we have to import it to the
    project first. Since we cannot utilize `FindPackage(...)` to let CMake deal with
    the importing of the library, we have some manual work to do. One of them is to
    define the `include` directory of the `Catch2` target. Since `Catch2` is a header-only
    library, defining an interface target with the headers will be sufficient. We
    are declaring the `CATCH2_INCLUDE_DIR` variable to set the directory that will
    contain the `Catch2` headers. We are using this variable to set the `INTERFACE_INCLUDE_DIRECTORIES`
    property of the imported target created in this example. Up next, the file (`MAKE_DIRECTORY
    ${CATCH2_INCLUDE_DIR}`) CMake command is called to create the include directory.
    The reason for that is, because of how `ExternalProject_Add` works, the `Catch2`
    content is not present until the build step executes. Setting a target’s `INTERFACE_INCLUDE_DIRECTORIES`
    requires the given directories to be present, so we’re doing a small hack as a
    workaround. In the last three lines, we declare an `IMPORTED INTERFACE` library
    for `Catch2`, making this library dependent on the `catch2_download` target and
    setting `INTERFACE_INCLUDE_DIRECTORIES` of the imported library.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`ExternalProject_Add` 命令将所需的库拉取到一个前缀路径并进行构建。因此，要使用已获取的内容，我们首先需要将其导入到项目中。由于我们不能使用
    `FindPackage(...)` 让 CMake 来处理库的导入工作，因此我们需要做一些手动操作。其中一项工作是定义 `Catch2` 目标的 `include`
    目录。由于 `Catch2` 是一个仅包含头文件的库，定义一个包含头文件的接口目标就足够了。我们声明了 `CATCH2_INCLUDE_DIR` 变量来设置包含
    `Catch2` 头文件的目录。我们使用该变量来设置在此示例中创建的导入目标的 `INTERFACE_INCLUDE_DIRECTORIES` 属性。接下来，调用文件（`MAKE_DIRECTORY
    ${CATCH2_INCLUDE_DIR}`）的 CMake 命令来创建包含目录。之所以这么做，是因为 `ExternalProject_Add` 的工作方式，`Catch2`
    的内容直到构建步骤执行时才会出现。设置目标的 `INTERFACE_INCLUDE_DIRECTORIES` 需要确保给定的目录已经存在，所以我们通过这种小技巧来解决这个问题。在最后三行中，我们为
    `Catch2` 声明了一个 `IMPORTED INTERFACE` 库，使该库依赖于 `catch2_download` 目标，并设置了导入库的 `INTERFACE_INCLUDE_DIRECTORIES`。'
- en: 'Let’s try to configure and build our example to check whether it works or not:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试配置并构建我们的示例，检查它是否能够正常工作：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If everything goes as expected, you should be seeing output similar to this:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，你应该会看到类似于以下的输出：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Alright, it seems we have built our test executable successfully. Let’s run
    it to check whether it works by running the `./``build/ch10_ex02_tests` executable:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，看来我们已经成功构建了测试可执行文件。让我们运行它，检查它是否正常工作，通过运行 `./``build/ch10_ex02_tests` 可执行文件：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Up next, we’ll see a simple Qt application using the Qt framework from a super-build.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看到一个简单的 Qt 应用程序，使用来自超构建的 Qt 框架。
- en: Bonus – using the Qt 6 framework with a super-build
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 奖励 – 使用 Qt 6 框架与超构建
- en: Until now, we have dealt with libraries that have rather small footprints. Let’s
    try something more complex, such as using a big framework such as the Qt framework
    in a super-build. For this part, we are going to follow the `Chapter 10``, Example`
    `03` example.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经处理了那些占用空间较小的库。现在让我们尝试一些更复杂的内容，比如在超级构建中使用像 Qt 这样的框架。在这一部分，我们将跟随`第10章`，示例`03`进行操作。
- en: Important note
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'If you are going to try this example outside of the provided Docker container,
    you may have to install some additional dependencies required by the Qt runtime.
    The required packages for Debian-like systems are as follows: `libgl1-mesa-dev
    libglu1-mesa-dev ''^libxcb.*-dev'' libx11-xcb-dev libglu1-mesa-dev libxrender-dev
    libxi-dev` `libxkbcommon-dev libxkbcommon-x11-dev`.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打算在提供的 Docker 容器外尝试这个示例，可能需要安装一些 Qt 运行时所需的附加依赖项。Debian 类系统所需的包如下：`libgl1-mesa-dev
    libglu1-mesa-dev '^libxcb.*-dev' libx11-xcb-dev libglu1-mesa-dev libxrender-dev
    libxi-dev` `libxkbcommon-dev libxkbcommon-x11-dev`。
- en: 'The example contains a single source file, `main.cpp`, that outputs a simple
    Qt window application with a message. The implementation is as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 该示例包含一个源文件`main.cpp`，它输出一个简单的 Qt 窗口应用程序，并带有一条消息。实现如下：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Our goal is to be able to compile this Qt application without requiring the
    user to install the Qt framework themselves. The super-build should automatically
    install the Qt 6 framework, and the application should be able to use that. Let’s
    take a look at the `CMakeLists.txt` file of the example, as usual:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是能够编译这个 Qt 应用程序，而不需要用户自己安装 Qt 框架。超级构建应该自动安装 Qt 6 框架，并且应用程序应该能够使用它。接下来，让我们像往常一样看看这个示例的
    `CMakeLists.txt` 文件：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Like the first example, the `CMakeLists.txt` file includes the `superbuild.cmake`
    file, depending on an `option` flag. If the user has opted in to use a super-build,
    for example, it will include the super-build module. Otherwise, the dependency
    will try to be located in the system via `find_package(...)`. In the last three
    lines, an executable target is defined, C++ standards for the target are set,
    and the defined target is linked to the `QT6::Core` and `QT6::Widgets` targets.
    These targets are either defined by the super-build or the `find_package(...)`
    call, depending on whether the user opted in to use the super-build or not. Let’s
    continue by taking a look at the `superbuild.cmake` file:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 和第一个示例一样，`CMakeLists.txt` 文件根据一个 `option` 标志包含了 `superbuild.cmake` 文件。如果用户选择使用超级构建，例如，它将包含超级构建模块。否则，依赖项将通过
    `find_package(...)` 尝试在系统中找到。在最后的三行中，定义了一个可执行目标，为该目标设置了 C++ 标准，并将该目标与 `QT6::Core`
    和 `QT6::Widgets` 目标链接。这些目标要么由超级构建定义，要么通过 `find_package(...)` 调用找到，具体取决于用户是否选择使用超级构建。接下来，让我们继续看看
    `superbuild.cmake` 文件：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `superbuild.cmake` file uses the `FetchContent` module to fetch the Qt
    dependency. Since the fetching and preparing process for the Qt may be lengthy,
    some of the unused Qt framework features are disabled. The `FetchContent` message
    output is enabled for better tracking of the progress. Let’s try to configure
    and compile the example by running the following commands:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`superbuild.cmake` 文件使用 `FetchContent` 模块来获取 Qt 依赖项。由于获取和准备 Qt 可能需要较长时间，因此禁用了某些未使用的
    Qt 框架功能。启用了 `FetchContent` 消息输出，以便更好地跟踪进度。让我们通过运行以下命令来配置并编译示例：'
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If everything goes as expected, you should see similar output to what is shown
    here:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切如预期那样进行，你应该看到类似于这里展示的输出：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If all goes well, you have succeeded in compiling the example. Let’s check
    whether it works by running the produced executable with the following command:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，你已经成功编译了示例。让我们通过运行以下命令检查它是否正常工作：
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If everything is alright, a small GUI window should pop up. The window should
    look similar to the following figure:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正常，一个小的图形界面窗口应该会弹出。该窗口应类似于下图所示：
- en: '![Figure 10.1 – The simple Qt application window](img/B30947_10_01.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图10.1 – 简单的 Qt 应用程序窗口](img/B30947_10_01.jpg)'
- en: Figure 10.1 – The simple Qt application window
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.1 – 简单的 Qt 应用程序窗口
- en: With this sorted out, we have concluded our look at how to use a super-build
    in a CMake project. Next, we will be taking a look at ensuring version consistency
    in a super-build.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 解决了这个问题后，我们已经完成了如何在 CMake 项目中使用超级构建的讲解。接下来，我们将探讨如何确保超级构建中的版本一致性。
- en: Ensuring version consistency in a super-build
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确保超级构建中的版本一致性
- en: Version consistency is an important aspect of all software projects. As you
    should have learned by now, nothing is set in stone in the software world. Software
    evolves and changes over time. Such changes often need to be acknowledged in advance,
    either by running a series of tests against the new version or by making changes
    to the consuming code itself. Ideally, changes in upstream code should not have
    an effect on reproducing existing builds, until we want them to do so. A project’s
    `x.y` version should always be built with the `z.q` dependency version if the
    software verification and testing have been done against this combination. The
    reason for this is that the smallest changes in an upstream dependency may affect
    the behavior of your software, even though there are no API or ABI changes. Your
    software will not have well-defined behavior if version consistency is not provided.
    Thus, having a way to provide version consistency is very crucial.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 版本一致性是所有软件项目中的一个重要方面。正如你现在应该已经了解到的，软件世界中的一切都不是一成不变的。软件随着时间的发展而演变和变化。这些变化往往需要提前得到确认，要么通过对新版本运行一系列测试，要么通过对消费代码本身进行修改。理想情况下，上游代码的变化不应该影响现有构建的复现，除非我们希望它们产生影响。如果软件验证和测试已经针对某一组合完成，那么一个项目的`x.y`版本应该始终与`z.q`依赖版本一起构建。原因在于，即便没有API或ABI的变化，上游依赖中的最小变动也可能影响你的软件行为。如果没有提供版本一致性，你的软件将没有明确定义的行为。因此，提供版本一致性的方法非常关键。
- en: Ensuring version consistency in a super-build depends on the way that the super-build
    is organized. For repositories fetched over a version control system, it is relatively
    easy. Instead of cloning a project and using it as is, check out to a specific
    branch or tag. If there are no such anchor points, check out to a specific commit
    instead. This will futureproof your super-build. But even this may not be enough.
    Tags may get overridden, branches may be force-pushed, and history may be rewritten.
    To mitigate this risk, you may prefer to fork the project and use that as upstream
    instead. This way, you will have total control over the content that upstream
    has. But bear in mind that this method comes with a maintenance burden.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在超构建中确保版本一致性取决于超构建的组织方式。对于通过版本控制系统获取的代码库来说，相对容易。与其克隆项目并按原样使用，不如切换到特定的分支或标签。如果没有这些锚点，可以切换到特定的提交。这样可以确保你的超构建具备前瞻性。但即使这样也可能不足够。标签可能被覆盖，分支可能被强制推送，历史可能被重写。为了降低这种风险，你可以选择分叉项目并使用该分叉作为上游。这样，你就可以完全控制上游内容。但请记住，这种方法带来了维护的负担。
- en: The moral of the story is, do not track an upstream blindly. Always keep an
    eye on recent changes. For third-party dependencies that are consumed as archive
    files, always check for their hash digest. This way, you will ensure that you
    are indeed using the intended revision for your project, and if there is a change,
    you will have to manually acknowledge it.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这个故事的寓意是，不要盲目跟踪上游。始终关注最新的变化。对于作为归档文件使用的第三方依赖，始终检查它们的哈希摘要。通过这种方式，你可以确保你确实使用了项目的目标版本，如果有任何变化，你必须手动确认它。
- en: Summary
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have briefly introduced the concept of a super-build and
    how we can utilize super-builds for dependency management. Super-builds are a
    non-intrusive and powerful way of managing dependencies where there is a lack
    of package managers.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 本章简要介绍了超构建的概念，以及如何利用超构建进行依赖管理。超构建是一种非侵入性且强大的依赖管理方式，适用于缺少包管理器的情况。
- en: In the next chapter, we will have a closer look at how to build software for
    the Apple ecosystem. Because of its closed nature and close integration building
    and deploying on macOS and iOS, there are some things to consider when targeting
    these platforms.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将详细探讨如何为苹果生态系统构建软件。由于苹果的封闭性以及macOS和iOS的紧密集成，在针对这些平台时需要考虑一些事项。
- en: Questions
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'After completing this chapter, you should be able to answer the following questions:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章后，你应该能够回答以下问题：
- en: What is a super-build?
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是超构建（super-build）？
- en: In which primary scenario can we use super-builds?
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在哪些主要场景下可以使用超构建（super-build）？
- en: What can be done to achieve version consistency in a super-build?
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了在超构建中实现版本一致性，可以采取哪些措施？
- en: Answers
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 答案
- en: A super-build is a method of building a software project that spans multiple
    repositories.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 超构建是一种构建软件项目的方法，跨越多个代码库。
- en: Where we don’t have a package manager and we want to make the project able to
    satisfy its own dependencies.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在没有包管理器的情况下，我们希望让项目能够满足自身的依赖关系。
- en: Use anchor points such as branches, tags, or commit hashes.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用锚点，如分支、标签或提交哈希值。
