- en: Repeating Method Invocation Using Recursive Algorithm
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用递归算法重复方法调用
- en: 'In the last chapter, you learned about immutable states that make us not deal
    with the side effect. In this chapter, let''s take a look at the concept of recursion.
    As a programmer in object-oriented programming, we usually use iteration to repeat
    the process instead of recursion. However, recursion gives more benefit than iteration.
    For instance, some problems (mathematics, especially) are solved easily using
    recursion, and, fortunately, all algorithms can be defined recursively. That makes
    it much, much easier to visualize and prove. To get to know more about the recursion,
    the following topics will be discussed in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，您了解了使我们不处理副作用的不可变状态。在本章中，让我们来看看递归的概念。作为面向对象编程的程序员，我们通常使用迭代来重复过程，而不是递归。然而，递归比迭代更有益。例如，一些问题（尤其是数学问题）使用递归更容易解决，而且幸运的是，所有算法都可以递归地定义。这使得可视化和证明变得更加容易。要了解更多关于递归的知识，本章将讨论以下主题：
- en: Differentiating the iteration and recursion invocation
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迭代和递归调用的区别
- en: Recurring the immutable function
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重复不可变函数的调用
- en: Finding a better way in recursion using tail recursion
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在递归中找到更好的方法，使用尾递归
- en: Enumerating three kinds of recursion--functional, procedural, and backtracking
    recursion
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列举三种递归--函数式、过程式和回溯递归
- en: Repeating the function invocation recursively
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 递归地重复函数调用
- en: As a programmer, especially in object-oriented programming, we usually use the
    iteration technique to repeat our process. For now, we will discuss the recursion
    method to repeat our process and use it in the functional approach. Basically,
    recursion and iteration perform the same task, which is to solve a complicated
    task piece by piece then combine the results. However, they have a difference.
    The iteration process emphasizes that we should keep repeating the process until
    the task is done, whereas recursion emphasizes that need to break the task up
    into smaller pieces until we can solve the task, then combine the result. We can
    use the iteration process when we need to run a certain process until the limit
    is reached or read a stream until it reaches `eof()`. Also, recursion can give
    the best value when we use it, for instance, on the calculation of a factorial.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 作为程序员，尤其是在面向对象编程中，我们通常使用迭代技术来重复我们的过程。现在，我们将讨论递归方法来重复我们的过程，并在功能方法中使用它。基本上，递归和迭代执行相同的任务，即逐步解决复杂的任务，然后将结果组合起来。然而，它们有所不同。迭代过程强调我们应该不断重复过程，直到任务完成，而递归强调需要将任务分解成更小的部分，直到我们能够解决任务，然后将结果组合起来。当我们需要运行某个过程直到达到限制或读取流直到达到`eof()`时，我们可以使用迭代过程。此外，递归在某些情况下可以提供最佳值，例如在计算阶乘时。
- en: Performing the iteration procedure to repeat the process
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行迭代过程来重复过程
- en: 'We will start with the iteration process. As we discussed earlier, the calculation
    of a factorial will be better if it''s designed using the recursion approach.
    However, it''s possible as well to design it with the iteration approach. Here,
    we will have a `factorial_iteration_do_while.cpp` code that we can use to calculate
    the factorial. We will have a function named `factorial ()` that passes a single
    parameter that will calculate the factorial value we pass in the argument. The
    code should look like this:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从迭代过程开始。正如我们之前讨论过的，阶乘的计算如果使用递归方法设计会更好。然而，也可以使用迭代方法来设计。在这里，我们将有一个名为`factorial_iteration_do_while.cpp`的代码，我们可以用它来计算阶乘。我们将有一个名为`factorial()`的函数，它传递一个参数，将计算我们在参数中传递的阶乘值。代码应该如下所示：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As we can see in the preceding code, we depend on the value of `n`, which we
    pass to the `factorial()` function, in determining how many iterations will occur.
    Every time the iteration performs, the `result` variable will be multiplied by
    the counter `i`. At the end, the `result` variable will hold the last result by
    combining the iteration''s result value. The output we should get on the screen
    is as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在先前的代码中所看到的，我们依赖于我们传递给`factorial()`函数的`n`的值，来确定将发生多少次迭代。每次迭代执行时，`result`变量将与计数器`i`相乘。最后，`result`变量将通过组合迭代的结果值来保存最后的结果。我们应该在屏幕上得到以下输出：
- en: '![](img/444549f8-8a38-48bb-b1e5-2be38e9f7bee.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/444549f8-8a38-48bb-b1e5-2be38e9f7bee.png)'
- en: 'Another technique in an iteration is using another iteration procedure. We
    can refactor the preceding code to use the `for` loop in the `factorial()` function.
    The following is the `factorial_iteration_for.cpp` code that is refactored from
    our preceding `factorial_iteration_do_while.cpp` code:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代中的另一种技术是使用另一个迭代过程。我们可以重构先前的代码，使用`for`循环在`factorial()`函数中。以下是从我们先前的`factorial_iteration_do_while.cpp`代码重构而来的`factorial_iteration_for.cpp`代码：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As we can see, we replace the `do-while` loop with the `for` loop. However,
    the behavior of the program will be exactly the same, since it will also multiply
    the current result with the `i` counter each time the iteration performs. At the
    end of this iteration, we will obtain the final result from this multiplication
    process. The screen should display the following output:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，我们用`for`循环替换了`do-while`循环。然而，程序的行为将完全相同，因为它也会每次迭代执行时将当前结果与`i`计数器相乘。在这个迭代结束时，我们将从这个乘法过程中获得最终结果。屏幕应该显示以下输出：
- en: '![](img/c604f1cb-6277-4b29-a074-4bbf92bd02bc.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c604f1cb-6277-4b29-a074-4bbf92bd02bc.png)'
- en: Now that we have successfully performed iteration to gain the factorial purpose,
    either use the `do-while` or `for` loop.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经成功地使用迭代来实现了阶乘目的，可以使用`do-while`或`for`循环。
- en: It looks too trivial when we try to refactor the `do-while` loop into the `for`
    loop. As we may know, `for` loops allow us to run through the loop when we know
    how many times we'd like it to run through the problem, while the `do-while` loops
    give us more flexibility in what we put in it and when it will stop, for instance
    `while(i > 0)` or use a Boolean value such as `while(true)`. However, based on
    the preceding example, we now can say that we can switch the `for` loop or the
    `do-while` loop into recursion.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们尝试将`do-while`循环重构为`for`循环时，看起来太琐碎了。我们可能知道，`for`循环允许我们在知道要运行多少次时运行循环，而`do-while`循环在我们放入其中以及何时停止时给我们更大的灵活性，例如`while(i
    > 0)`或使用布尔值，如`while(true)`。然而，根据前面的例子，我们现在可以说我们可以将`for`循环或`do-while`循环切换为递归。
- en: Performing the recursion procedure to repeat the process
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行递归过程以重复该过程
- en: 'We discussed earlier that recursion gives better performance in functional
    programming. We also developed the `factorial()` function in the iteration approach.
    Now, let''s refactor our previous code into `factorial_recursion.cpp`, which will
    use the recursion approach rather than the iteration one. The code will perform
    the same task comparing our previous code. However, we will modify the `factorial()`
    function to call itself at the end of the function. The code is written as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前讨论过，递归在函数式编程中具有更好的性能。我们还以迭代方式开发了`factorial()`函数。现在，让我们将之前的代码重构为`factorial_recursion.cpp`，它将使用递归方法而不是迭代方法。该代码将执行与我们之前的代码相同的任务。但是，我们将修改`factorial()`函数，使其在函数末尾调用自身。代码如下所示：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As we can see, the `factorial()` function in the preceding code calls itself
    until `n` is `0`. Each time the function calls itself, it decrements the `n` parameter.
    The function will return `1` soon after the passed parameter is `0`. We will also
    get the same output compared to our two previous code blocks, as shown in the
    following screenshot:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，在前面的代码中，`factorial()`函数调用自身直到`n`为`0`。每次函数调用自身时，它会减少`n`参数。当传递的参数为`0`时，函数将立即返回`1`。与我们之前的两个代码块相比，我们也将得到相同的输出，如下面的屏幕截图所示：
- en: '![](img/b9c6c1c3-250a-4a02-961f-1ae358de0e60.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b9c6c1c3-250a-4a02-961f-1ae358de0e60.png)'
- en: Although recursion gives us the simplicity required to easily maintain code,
    we have to be aware of the parameter we pass to the recursion function. For instance,
    in the `factorial()` function in the `factorial_recursion.cpp` code, if we pass
    the negative number to the `n < 0` function, we will get the infinity loop, and
    it can crash our device.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管递归为我们提供了易于维护代码所需的简单性，但我们必须注意我们传递给递归函数的参数。例如，在`factorial_recursion.cpp`代码中的`factorial()`函数中，如果我们将负数传递给`n
    < 0`函数，我们将得到无限循环，并且可能会导致设备崩溃。
- en: Recurring the immutable function
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重复不可变函数
- en: 'As we discussed in the previous chapter, we need to loop the immutable function
    recursively. Let''s suppose we have the `fibonacci()` function that is immutable.
    We then need to refactor it to be a recursive function. The `fibonacci_iteration.cpp`
    code implements the `fibonacci()` function in the iteration way. The code is written
    as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前一章中讨论的，我们需要递归循环不可变函数。假设我们有一个不可变的`fibonacci()`函数。然后，我们需要将其重构为递归函数。`fibonacci_iteration.cpp`代码以迭代方式实现了`fibonacci()`函数。代码如下所示：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'As we can see in the preceding code, the `fibonacci()` function is immutable
    since it will return the same value each time it gets the exact same `n` input.
    The output should look like the following screenshot:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的代码中所看到的，`fibonacci()`函数是不可变的，因为每次它获得相同的`n`输入时都会返回相同的值。输出应该如下屏幕截图所示：
- en: '![](img/bb62a358-6e52-44fb-9628-d55839169d48.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bb62a358-6e52-44fb-9628-d55839169d48.png)'
- en: 'If we need to refactor it to be a recursive function, we can use the following
    `fibonacci_recursion.cpp` code:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要将其重构为递归函数，我们可以使用以下`fibonacci_recursion.cpp`代码：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As we can see, the preceding code has the recursion approach since it calls
    the function itself at the end of the function. Now that we have the recursion
    `fibonacci()` function, it will give the following output on the console:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，前面的代码采用了递归方法，因为它在函数末尾调用函数本身。现在我们有了递归`fibonacci()`函数，它将在控制台上给出以下输出：
- en: '![](img/cb853f00-201a-493a-b561-5eed14833299.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cb853f00-201a-493a-b561-5eed14833299.png)'
- en: Now, compared to the `fibonacci_iteration.cpp` code, the `fibonacci_recursion.cpp`
    code shows the exact same output.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，与`fibonacci_iteration.cpp`代码相比，`fibonacci_recursion.cpp`代码显示了完全相同的输出。
- en: Getting closer to tail recursion
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接近尾递归
- en: 'A tail recursion happens when the recursive call is executed at the end by
    the function. It''s considered better than the non-tail recursion code we developed
    previously because the compiler can optimize the code better. Since the recursive
    call is the last statement that is executed by the function, there is nothing
    more to do in this function. The result is that the compiler does not need to
    save the current function''s stack frame. Let''s see the following `tail_recursion.cpp`
    code implementing tail recursion:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当递归调用在函数末尾执行时，发生尾递归。它被认为比我们之前开发的非尾递归代码更好，因为编译器可以更好地优化代码。由于递归调用是函数执行的最后一个语句，因此在此函数中没有更多的事情要做。结果是编译器不需要保存当前函数的堆栈帧。让我们看看以下`tail_recursion.cpp`代码实现尾递归：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As we can see in the preceding code, the `displayNumber()` function is a tail
    recursive call function since it calls itself at the end of the process. Indeed,
    if we run the preceding `tail_recursion.cpp` code, the program will not end since
    it will increase the value of `n` in the `displayNumber()` function. The program
    may be crashed when the value of `n` has reached the maximum value of the `long
    long` data type. However, the program will not have the stack issued (stack overflowed)
    since the tail recursion doesn't store a value in the stack.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的代码中所看到的，`displayNumber()`函数是一个尾递归调用函数，因为它在过程结束时调用自身。确实，如果运行前述的`tail_recursion.cpp`代码，程序将不会结束，因为它会增加`displayNumber()`函数中的`n`的值。当`n`的值达到`long
    long`数据类型的最大值时，程序可能会崩溃。然而，由于尾递归不会在堆栈中存储值，程序将不会出现堆栈问题（堆栈溢出）。
- en: 'Also, we can refactor the preceding `displayNumber()` function in the `tail_recursion.cpp`
    code to use the `goto` keyword instead of calling the function over and over.
    The refactored code can be seen in the following `tail_recursion_goto.cpp` code:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还可以重构`tail_recursion.cpp`代码中的前述`displayNumber()`函数，使用`goto`关键字而不是一遍又一遍地调用函数。重构后的代码可以在以下`tail_recursion_goto.cpp`代码中看到：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As we can see in the preceding code, we can remove the last call in the `displayNumber()`
    function with the `goto` keyword. This is how the compiler optimizes the tail
    recursion by performing a tail-call elimination that will replace the last call
    with the `goto` keyword. We will also see that no stack is needed in the `displayNumber()`
    function.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们可以看到，可以使用`goto`关键字在`displayNumber()`函数中删除最后一个调用。这就是编译器通过执行尾调用消除来优化尾递归的方式，它将用`goto`关键字替换最后一个调用。我们还会看到，在`displayNumber()`函数中不需要堆栈。
- en: Don't forget to compile the code containing a tail recursion with the optimization
    option provided by the compiler. Since we use GCC, always enable optimization
    level 2 (`-O2`) to gain the optimized code. The effect of not compiling with optimizations
    enabled, is that our two preceding programs (`tail_recursion.cpp` and `tail_recursion_goto.cpp`)
    will crash with the stack overflowed issue. For more information about the optimizations
    option in GCC, check out [https://gcc.gnu.org/onlinedocs/gcc-7.1.0/gcc/Optimize-Options.html](https://gcc.gnu.org/onlinedocs/gcc-7.1.0/gcc/Optimize-Options.html).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记使用编译器提供的优化选项编译包含尾递归的代码。由于我们使用GCC，始终启用优化级别2（`-O2`）以获得优化的代码。未启用优化编译的效果是，我们前面的两个程序（`tail_recursion.cpp`和`tail_recursion_goto.cpp`）将因堆栈溢出问题而崩溃。有关GCC中优化选项的更多信息，请查看[https://gcc.gnu.org/onlinedocs/gcc-7.1.0/gcc/Optimize-Options.html](https://gcc.gnu.org/onlinedocs/gcc-7.1.0/gcc/Optimize-Options.html)。
- en: Now, let's create a useful tail recursion call. In the previous section, we
    have successfully refactored our iteration function into a recursive one. The
    `factorial()` function now has become a recursive function and calls itself at
    the end of the function. However, it is not tail recursion, although the function
    calls itself at the end of the function. If we look closer, the value returned
    by `factorial(n-1)` is used in `factorial(n)`, so the call to `factorial(n-1)`
    is not the last thing done by `factorial(n)`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个有用的尾递归调用。在前一节中，我们已经成功地将迭代函数重构为递归函数。`factorial()`函数现在已经成为一个递归函数，并在函数末尾调用自身。然而，它并不是尾递归，尽管函数在函数末尾调用自身。如果我们仔细观察，`factorial(n-1)`返回的值被`factorial(n)`使用，所以对`factorial(n-1)`的调用不是`factorial(n)`所做的最后一件事。
- en: 'We can create our `factorial_recursion.cpp` code to become the tail recursion
    function. We will develop the following `factorial_recursion_tail.cpp` code, modify
    the `factorial()` function, and add a new function named `factorialTail()`. The
    code is written as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将我们的`factorial_recursion.cpp`代码改为尾递归函数。我们将开发以下`factorial_recursion_tail.cpp`代码，修改`factorial()`函数，并添加一个名为`factorialTail()`的新函数。代码如下所示：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As we can see, we have moved the `factorial()` function in the `factorial_recursion.cpp`
    code to the `factorialTail()` function that requires two arguments in the `factorial_recursion_tail.cpp`
    code. As the result, after we invoke `factorial(i)`, it will then invoke the `factorialTail()`
    function. At the end of this function, the `factorialTail()` function is the only
    function that is invoked. The following image is the output of the `factorial_recursion_tail.cpp`
    code, which is exactly the same as the `factorial_recursion.cpp` code. It also
    proves that we have successfully refactored the `factorial_recursion.cpp` code
    into tail recursion.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，我们已经将`factorial()`函数从`factorial_recursion.cpp`代码移动到`factorial_recursion_tail.cpp`代码中的`factorialTail()`函数，该函数需要两个参数。结果是，在我们调用`factorial(i)`之后，它将调用`factorialTail()`函数。在这个函数的末尾，只有`factorialTail()`函数被调用。以下图片是`factorial_recursion_tail.cpp`代码的输出，与`factorial_recursion.cpp`代码完全相同。这也证明我们已成功将`factorial_recursion.cpp`代码重构为尾递归。
- en: '![](img/de6f4d4b-d59c-40cc-8ed7-f041a58a3d1b.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/de6f4d4b-d59c-40cc-8ed7-f041a58a3d1b.png)'
- en: Getting acquainted with functional, procedural, and backtracking recursion
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 熟悉函数式、过程式和回溯递归。
- en: So now that we have understood a little about recursion, the recursion function
    will call itself from inside its body. The recursion will be stopped only when
    it has reached a certain value. There are three types of recursion that we will
    discuss right away--**functional recursion**, **procedural recursion**, and **backtracking
    recursion**; however, these three types of recursion may not be standard terms.
    Functional recursion is a recursion process that returns some value. Procedural
    recursion is a recursion process that doesn't return a value, yet performs the
    action in each recursion it takes. Backtracking recursion is a recursion process
    to break down the task into a small set of subtasks that can be cancelled if they
    don't work. Let's consider these recursion types in the following discussion.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了一点关于递归，递归函数将在其内部调用自身。递归只有在达到一定值时才会停止。我们将立即讨论三种类型的递归--**功能递归**，**过程递归**和**回溯递归**；然而，这三种递归可能不是标准术语。功能递归是一个返回某个值的递归过程。过程递归是一个不返回值的递归过程，但在每次递归中执行动作。回溯递归是一个将任务分解为一小组子任务的递归过程，如果它们不起作用，可以取消。让我们在下面的讨论中考虑这些递归类型。
- en: Expecting results from functional recursion
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 期待从功能递归中得到结果
- en: 'In functional recursion, the process tries to solve the problem by combining
    the results from the subproblems recursively. The result we combine comes from
    the return value of subproblems. Let''s suppose we have a problem to calculate
    a number to a power, for instance, `2` power `2` is `4` (`2² = 4`). By using iteration,
    we can build a code like the following `exponential_iteration.cpp` code. We have
    a function named `power()` that will be passed by two arguments--`base` and `exp`.
    The notation will be `base^(exp)` and the code looks like this:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在功能递归中，该过程试图通过递归地组合子问题的结果来解决问题。我们组合的结果来自子问题的返回值。假设我们有一个计算一个数的幂的问题，例如，`2`的`2`次方是`4`（`2²
    = 4`）。通过使用迭代，我们可以构建一个像下面的`exponential_iteration.cpp`代码的代码。我们有一个名为`power()`的函数，它将通过两个参数--`base`和`exp`来传递。符号将是`base^(exp)`，代码看起来像这样：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As we can see in the preceding code, we use the iteration version first, before
    we go to the recursive one, since we usually use the iteration most on a daily
    basis. We combine the `result` value in each iteration by multiplying it by the
    `base` value. If we run the preceding code, we will get the following output on
    the console:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的代码中所看到的，我们首先使用迭代版本，然后再使用递归版本，因为我们通常在日常生活中最常使用迭代。我们通过将`result`值在每次迭代中乘以`base`值来组合结果。如果我们运行上面的代码，我们将在控制台上得到以下输出：
- en: '![](img/84a5e00c-542f-40cc-b398-d5124ddb94e3.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/84a5e00c-542f-40cc-b398-d5124ddb94e3.png)'
- en: 'Now, let''s refactor our preceding code to the recursive version. We will have
    the `exponential_recursion.cpp` code that will have the same `power()` function
    signature. However, we will not use the `for` loop instead of the recursion that
    the function calls itself at the end of the function. The code should be written
    as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将我们之前的代码重构为递归版本。我们将有`exponential_recursion.cpp`代码，它将具有相同的`power()`函数签名。然而，我们将不使用`for`循环，而是使用递归，函数在函数的末尾调用自身。代码应该写成如下所示：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As we discussed earlier that functional recursion returns value, the `power()`
    function is a functional recursion since it returns the `int` value. We will get
    the final result from the value returned by each subfunction. As a result, we
    will get the following output on the console:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前讨论的，功能递归返回值，`power()`函数是一个功能递归，因为它返回`int`值。我们将从每个子函数返回的值得到最终结果。因此，我们将在控制台上得到以下输出：
- en: '![](img/2488e227-b4d4-4275-98c4-a499df6d85de.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2488e227-b4d4-4275-98c4-a499df6d85de.png)'
- en: Running a task recursively in procedural recursion
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在过程递归中递归运行任务
- en: So, we have a functional recursion that expects the return value from the function.
    Sometimes, we don't need the return value since we run the task from inside the
    function. To achieve that purpose, we can use procedural recursion. Let's suppose
    we want to permute a short string to find all possible arrangements of it. Instead
    of returning the value, we just need to print the result every time the recursion
    is performed.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们有一个期望从函数中得到返回值的功能递归。有时，我们不需要返回值，因为我们在函数内部运行任务。为了实现这个目的，我们可以使用过程递归。假设我们想要对一个短字符串进行排列，以找到它的所有可能的排列。我们只需要在每次递归执行时打印结果，而不需要返回值。
- en: 'We have the following `permutation.cpp` code to demonstrate this task. It has
    the `permute()` function that will be invoked once, then it will invoke the `doPermute()`
    function recursively. The code should be written as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有以下的`permutation.cpp`代码来演示这个任务。它有一个`permute()`函数，将被调用一次，然后它将递归地调用`doPermute()`函数。代码应该写成如下所示：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'As we can see in the preceding code, we ask the user to input a string, then
    the code will find the possibility of this permutation using the `permute()` function.
    It will start with the empty string in `doPermute()` since the given string from
    the user is possible also. The output on the console should be as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的代码中所看到的，我们要求用户输入一个字符串，然后代码将使用`permute()`函数找到这个排列的可能性。它将从`doPermute()`中的空字符串开始，因为来自用户的给定字符串也是可能的。控制台上的输出应该如下所示：
- en: '![](img/7b9a4176-1af8-412e-a860-110982c72225.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7b9a4176-1af8-412e-a860-110982c72225.png)'
- en: Backtracking recursion
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回溯递归
- en: 'As we discussed earlier, we can undo the process if the subtask doesn''t work.
    Let''s try with a labyrinth where we have to find the way from the starting point
    to the finishing point. Let''s suppose we have to find the way from `S` to `F`
    as in the following labyrinth:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前讨论的，如果子任务不起作用，我们可以撤消这个过程。让我们尝试一个迷宫，我们必须找到从起点到终点的路。假设我们必须找到从`S`到`F`的路，就像下面的迷宫一样：
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To solve this problem, we have to decide the route we need, to find the finishing
    point. However, we will assume that each choice is good until we prove it''s not.
    The recursion will return a Boolean value to mark whether it''s the right way
    or not. If we choose the wrong way, the call stack unwinds and it will undo the
    choice. First, we will draw the `labyrinth` in our code. In the following code,
    there will be the `createLabyrinth()` and `displayLabyrinth()` functions. The
    code looks like this:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们必须决定我们需要的路线，以找到终点。但是，我们将假设每个选择都是好的，直到我们证明它不是。递归将返回一个布尔值，以标记它是否是正确的方式。如果我们选择了错误的方式，调用堆栈将解开，并且将撤消选择。首先，我们将在我们的代码中绘制`labyrinth`。在以下代码中，将会有`createLabyrinth()`和`displayLabyrinth()`函数。代码看起来像这样：
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'As we can see, there''s no recursion in the preceding code. The `createLabyrinth()`
    function just creates a two-dimensional array that contains the pattern of the
    `labyrinth`, whereas `displayLabyrinth()` just shows the array to console. We
    will see the following output on the console if we run the preceding code:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，前面的代码中没有递归。`createLabyrinth()`函数只是创建一个包含`labyrinth`模式的二维数组，而`displayLabyrinth()`只是将数组显示到控制台。如果我们运行前面的代码，我们将在控制台上看到以下输出：
- en: '![](img/9e5caa72-94f1-4458-9bf4-e723d64e3fa7.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9e5caa72-94f1-4458-9bf4-e723d64e3fa7.png)'
- en: 'From the preceding screenshot, we can see there are two points there--`S` is
    the starting point and `F` is the finishing point. The code has to find the way
    to reach `F` from `S`. The expected route should be as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的截图中，我们可以看到有两个点--`S`是起点，`F`是终点。代码必须找到从`S`到`F`的路径。预期的路线应该如下：
- en: '![](img/bb949478-e271-4a23-96c1-fdc57ad1d0cf.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bb949478-e271-4a23-96c1-fdc57ad1d0cf.png)'
- en: 'The white arrow on the preceding screenshot is a path we expected to reach
    `F` from `S`. Now, let''s develop the code to solve this labyrinth problem. We
    will create a function named `navigate` to find the possible route by figuring
    out these three states:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，白色箭头是我们期望从`S`到达`F`的路径。现在，让我们开发解决这个迷宫问题的代码。我们将创建一个名为`navigate`的函数，通过确定以下三种状态来找到可能的路线：
- en: If we find `F` in the [*x*,*y*] position, for instance `labyrinth[2][4]`, we
    have solved the problem then just return `true` as the return value.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们在[*x*,*y*]位置找到`F`，例如`labyrinth[2][4]`，那么我们已经解决了问题，只需返回`true`作为返回值。
- en: If the [*x*,*y*] position is `#`, it means that we face the wall and have to
    revisit the other [*x*,*y*] position.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果[*x*,*y*]位置是`#`，这意味着我们面对墙壁，必须重新访问其他[*x*,*y*]位置。
- en: Otherwise, we print `*` on that position to mark that we have visited it.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 否则，我们在该位置打印`*`来标记我们已经访问过它。
- en: 'After we have analyzed the three states, we will start with the recursive cases
    as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在分析了三种状态之后，我们将从递归情况开始：
- en: The path seeker will go upward if it can navigate to `row - 1`, and it's greater
    than or equal to `0` (`row - 1 >= 0 && navigate(labyrinth, row - 1, col)`)
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果路径搜索器可以导航到`row - 1`，并且大于或等于`0`（`row - 1 >= 0 && navigate(labyrinth, row -
    1, col)`），它将向上移动
- en: The path seeker will go downward if it can navigate to `row + 1`, and it's smaller
    than `8` (`row + 1 < 8 && navigate(labyrinth, row + 1, col)`)
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果路径搜索器可以导航到`row + 1`，并且小于`8`（`row + 1 < 8 && navigate(labyrinth, row + 1, col)`），它将向下移动
- en: The path seeker will go to the left if it can navigate to `col - 1`, and it's
    greater than or equal to `0` (`col - 1 >= 0 && navigate(labyrinth, row, col -
    1)`)
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果路径搜索器可以导航到`col - 1`，并且大于或等于`0`（`col - 1 >= 0 && navigate(labyrinth, row, col
    - 1)`），它将向左移动
- en: The path seeker will go to the right if it can navigate to `col + 1`, and it's
    smaller than `8` ( `col + 1 < 8 && navigate(labyrinth, row, col + 1)` )
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果路径搜索器可以导航到`col + 1`，并且小于`8`（`col + 1 < 8 && navigate(labyrinth, row, col +
    1)`），它将向右移动
- en: 'We will have the `navigate()` function as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将有以下`navigate()`函数：
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We now have the `navigate()` function to find out the correct path to find
    `F`. However, before we run the `navigate()` function, we have to ensure that
    `S` is there. We then have to develop the helper function named `isLabyrinthSolvable()`.
    It will loop through the labyrinth array and will inform whether `S` is there
    or not. The following code snippet is the implementation of the `isLabyrinthSolvable()`
    function:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了`navigate()`函数来找出正确的路径以找到`F`。但是，在运行`navigate()`函数之前，我们必须确保`S`在那里。然后我们必须开发名为`isLabyrinthSolvable()`的辅助函数。它将循环遍历迷宫数组，并告知`S`是否存在。以下代码片段是`isLabyrinthSolvable()`函数的实现：
- en: '[PRE14]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'As we can see in the preceding code snippet, we mention the `rows` and `cols`
    variables. We will initialize them as global variables, as we can see in the following
    code snippet:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的代码片段中所看到的，我们提到了`rows`和`cols`变量。我们将它们初始化为全局变量，就像我们在以下代码片段中所看到的那样：
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, let''s take a look at the following code if we insert the `navigate()`
    and `isLabyrinthSolvable()` functions to the `labyrinth.cpp` code:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看一下以下代码，如果我们将`navigate()`和`isLabyrinthSolvable()`函数插入到`labyrinth.cpp`代码中：
- en: '[PRE16]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'As we can see in the preceding quote, in the `main()` function, we first run
    the `isLabyrinthSolvable()` function, which, in turn, invokes the `navigate()`
    function. The `navigate()` function will then go through the labyrinth to find
    out the correct path. The following is the output of the code:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的引用中所看到的，在`main()`函数中，我们首先运行`isLabyrinthSolvable()`函数，然后调用`navigate()`函数。`navigate()`函数将通过迷宫找出正确的路径。以下是代码的输出：
- en: '![](img/529db26b-9492-4c16-bfba-ea14a2a6061d.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/529db26b-9492-4c16-bfba-ea14a2a6061d.png)'
- en: 'However, if we trace how the program solves the labyrinth, it faces the wrong
    route when it finds the finish flag, as we can see in the following screenshot:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们追踪程序如何解决迷宫，当它找到终点时，它会面临错误的路线，就像我们在以下截图中所看到的：
- en: '![](img/be30241d-2365-4325-907c-8761c1460abd.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/be30241d-2365-4325-907c-8761c1460abd.png)'
- en: 'As we can see, there is a white square in the preceding screenshot. It''s the
    wrong choice when it is looking for the correct path. Once it meets an obstacle,
    it goes back and finds the other ways. It will also undo the choice it has made.
    Let''s see the following screenshot that shows us when the recursion finds another
    route and undoes the previous choice:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 摘要
- en: '![](img/b6bd29c3-e866-4819-8eaf-eb23403b3dc4.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: 正如我们所看到的，在前面的截图中有一个白色的方块。当它寻找正确的路径时，这是错误的选择。一旦遇到障碍，它就会返回并寻找其他方法。它还会撤消它所做的选择。让我们看看下面的截图，它向我们展示了当递归找到另一条路线并撤消先前的选择时：
- en: In the preceding screenshot, we can see that the recursion tries another route
    and the previously failed route has disappeared since the backtrack recursion
    undoes the route. The recursion now has the correct path, and it can just continue
    until it finds the finish flag. As a result, we now have successfully developed
    the backtracking recursion.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们可以看到递归尝试另一条路线，之前失败的路线已经消失，因为回溯递归取消了该路线。递归现在有了正确的路径，它可以继续直到找到终点旗。因此，我们现在成功地开发了回溯递归。
- en: Summary
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '![](img/b6bd29c3-e866-4819-8eaf-eb23403b3dc4.png)'
- en: This chapter has given us the technique for repeating the function invocation
    by using iteration and recursion. However, since recursion is more functional
    than iteration, we emphasized our discussion on recursion instead of iteration.
    We started with the difference between iteration and recursion. We then continued
    the discussion about refactoring the immutable function to become a recursive
    immutable function.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 本章为我们提供了使用迭代和递归重复函数调用的技术。然而，由于递归比迭代更加功能化，我们强调了对递归而不是迭代的讨论。我们从迭代和递归的区别开始。然后我们继续讨论了重构不可变函数以成为递归不可变函数。
- en: After we learned about the recursion, we found other better recursion techniques.
    We also discussed tail recursion to get this improved technique. Lastly, we enumerated
    three kinds of recursion--functional, procedural, and backtracking recursion.
    We usually use functional recursion when we expect the return value for the recursion.
    Otherwise, we use procedural recursion. And, if we need to break down the problem
    and undo the recursion performance when it doesn't work, we can use backtracking
    recursion to solve the problem.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习了递归之后，我们发现了其他更好的递归技术。我们还讨论了尾递归以获得这种改进的技术。最后，我们列举了三种递归--功能递归、过程递归和回溯递归。当我们期望递归的返回值时，通常使用功能递归。否则，我们使用过程递归。如果我们需要分解问题并在递归不起作用时撤消递归性能，我们可以使用回溯递归来解决问题。
- en: In the next chapter, we will discuss lazy evaluation to make the code run faster.
    This will make the code become efficient since it will make sure that unnecessary
    code won't be executed.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论延迟评估以使代码运行更快。这将使代码变得更有效，因为它将确保不必要的代码不会被执行。
