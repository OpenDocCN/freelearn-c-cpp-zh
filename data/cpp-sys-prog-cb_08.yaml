- en: Dealing with Console I/O and Files
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理控制台I/O和文件
- en: This chapter covers recipes based on the console, streaming, and file I/O using
    the C++ Standard Library. We've been reading parameters into the programs we've
    written in other chapters but there are several other ways to do this. We'll deep
    dive into these topics and we will learn the alternatives, tips, and best practices
    for each with specific and dedicated hands-on recipes.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了基于C++标准库的控制台、流和文件I/O的示例。我们在其他章节中已经读取了程序中的参数，但还有其他几种方法可以做到这一点。我们将深入研究这些主题，并学习每种主题的替代方法、技巧和最佳实践，具体而专门的实践示例。
- en: Once again, our main focus is to try to write system programming software by
    using C++ (and its standard library) as much as we can, so the code will have
    very limited C and POSIX solutions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的主要重点再次是尽可能多地使用C++（及其标准库）来编写系统编程软件，因此代码将具有非常有限的C和POSIX解决方案。
- en: 'This chapter will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Implementing I/O to and from the console
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现与控制台I/O的交互
- en: Manipulating I/O strings
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作I/O字符串
- en: Working with files
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理文件
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In order to let you try the programs right from the start, we've set up a Docker
    image that has all the tools and libraries we'll need throughout the book. It
    is based on Ubuntu 19.04.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让您从一开始就尝试这些程序，我们设置了一个Docker镜像，其中包含了本书中将需要的所有工具和库。它基于Ubuntu 19.04。
- en: 'In order to set it up, follow these steps:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了设置它，请按照以下步骤操作：
- en: Download and install the Docker Engine from [www.docker.com](https://www.docker.com/).
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[www.docker.com](https://www.docker.com/)下载并安装Docker Engine。
- en: Pull the image from Docker
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Docker中拉取图像
- en: Hub: `docker pull kasperondocker/system_programming_cookbook:latest`
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Hub：`docker pull kasperondocker/system_programming_cookbook:latest`
- en: The image should now be available. Type in the following command to view the
    image: `docker images`
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在应该可以使用图像。输入以下命令查看图像：`docker images`
- en: You should have this image now: `kasperondocker/system_programming_cookbook`
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在应该有这个镜像：`kasperondocker/system_programming_cookbook`
- en: Run the Docker image with an interactive shell with the help of the following
    command: `docker run -it **-**-cap-add sys_ptrace kasperondocker/system_programming_cookbook:latest /bin/bash`
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行Docker镜像，并使用交互式shell：`docker run -it **-**-cap-add sys_ptrace kasperondocker/system_programming_cookbook:latest /bin/bash`
- en: The shell on the running container is now available. Use `root@39a5a8934370/#
    cd /BOOK/` to get all the programs that we develop throughout the book, organized
    by chapter.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正在运行的容器上现在可用shell。使用`root@39a5a8934370/# cd /BOOK/`获取本书中开发的所有程序，按章节组织。
- en: The `--cap-add sys_ptrace` argument is needed to allow GDB in the Docker container
    to set breakpoints, which Docker does not allow by default.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 需要`--cap-add sys_ptrace`参数，以允许Docker容器中的GDB设置断点，Docker默认情况下不允许。
- en: Implementing I/O to and from the console
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现与控制台I/O的交互
- en: 'This recipe focuses on console I/O. Most programs we write need some kind of
    interaction with the user: we need to get inputs, do some processing, and return
    the output. Think, for example, about user inputs you could collect in an application
    that you''ll build. In this recipe, we''ll write code that shows different ways
    to get input from the console and return the output.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例专注于控制台I/O。我们编写的大多数程序都需要与用户进行某种交互：我们需要获取输入，进行一些处理，然后返回输出。例如，想象一下您可以在一个应用程序中收集的用户输入。在这个示例中，我们将编写代码，展示从控制台获取输入和返回输出的不同方法。
- en: How to do it...
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s write some code:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们写一些代码：
- en: 'With the Docker image running, let''s create a new file named `console_01.cpp`
    and type this code into it:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行Docker镜像的情况下，让我们创建一个名为`console_01.cpp`的新文件，并将以下代码输入其中：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create another file now called `console_02.cpp` and type this code in to see
    the limitation of this approach:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在创建另一个名为`console_02.cpp`的文件，并输入以下代码以查看此方法的限制：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Finally, let''s create a new file and name it `console_03.cpp`; let''s see
    how `std::getline` and `std::cin` can overcome this previous limitation:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们创建一个新文件并命名为`console_03.cpp`；让我们看看`std::getline`和`std::cin`如何克服这个先前的限制：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Although these are very simple examples, they show the C++ way of interacting
    with the console standard input and output.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这些都是非常简单的示例，但它们展示了使用C++与控制台标准输入和输出进行交互的方式。
- en: How it works...
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'In the first step, the `console_01.cpp` program just uses `std::cin` and `std::cout`
    to get the `name` and the `surname` information of the user and save it in the
    `std::string` variables. These are the first things to use when a simple interaction
    with the standard input and output is needed. By building and running the `console_01.cpp`
    file, we''ll get the following output:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一步中，`console_01.cpp`程序只使用`std::cin`和`std::cout`来获取用户的`name`和`surname`信息，并将其保存在`std::string`变量中。这些是在需要与标准输入和输出进行简单交互时要使用的第一件事情。通过构建和运行`console_01.cpp`文件，我们将得到以下输出：
- en: '![](img/2c32601b-b89d-43d4-857c-f37964704b56.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c32601b-b89d-43d4-857c-f37964704b56.png)'
- en: 'The second step of the recipe shows the limitation of `std::cin` and `std::cout`.
    The user gives `name` and `surname` in the command line to the running process
    as programmed, but strangely enough, just the name is stored in the `fullNameWithCin`
    variable, completely skipping the surname. How come? The reason is simple: `std:cin`
    always considers spaces, tabs, or newlines as delimiters of the value captured
    from the standard input. How can we get the full line from the standard input,
    then? By compiling and running `console_02.cpp`, we get the following:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 该示例的第二步显示了`std::cin`和`std::cout`的限制。用户在命令行中向正在运行的进程提供`name`和`surname`，但奇怪的是，`fullNameWithCin`变量中只存储了名字，完全跳过了姓氏。为什么？原因很简单：`std:cin`总是将空格、制表符或换行符视为从标准输入中捕获的值的分隔符。那么我们如何从标准输入中获取完整的行呢？通过编译和运行`console_02.cpp`，我们得到以下结果：
- en: '![](img/ebac7a09-1cfb-49bb-aa61-fe0dcce7482a.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ebac7a09-1cfb-49bb-aa61-fe0dcce7482a.png)'
- en: 'The third step shows the use of the `getline` function in conjunction with
    `std::cin` to get the full line from the standard input. `std::getline` gets the
    line from `std::cin` and stores it in the `fullName` variable. In general, `std::getline`
    accepts any `std::istream` as input with the possibility of specifying the delimiter.
    The available prototypes in the standard library are as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 第三步展示了`getline`函数与`std::cin`结合使用，从标准输入获取完整的行。`std::getline`从`std::cin`获取行并将其存储在`fullName`变量中。一般来说，`std::getline`接受任何`std::istream`作为输入，并有可能指定分隔符。标准库中可用的原型如下：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'These make `getline` a very flexible method. By building and running `console_03.cpp`,
    we get the following output:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得`getline`成为一个非常灵活的方法。通过构建和运行`console_03.cpp`，我们得到以下输出：
- en: '![](img/313c17da-22e0-4075-9502-54c86b4e5119.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/313c17da-22e0-4075-9502-54c86b4e5119.png)'
- en: 'Let''s have a look at the following example, where we pass a stream to the
    method, the variable to store the extracted piece of information, and the delimiter:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看下面的例子，我们将一个流传递给方法，用于存储提取的信息片段的变量，以及分隔符：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The output of the preceding method is as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 前面方法的输出如下：
- en: '![](img/6272f92b-7756-45a2-b4c5-a7fb7102e7b7.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6272f92b-7756-45a2-b4c5-a7fb7102e7b7.png)'
- en: This can form the foundation for building your own tokenizer method.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以为构建自己的标记方法奠定基础。
- en: There's more...
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: '`std::cin` and `std::cout` allow chain requests, which makes the code more
    readable and concise:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`std::cin`和`std::cout`允许链式请求，这使得代码更易读和简洁：'
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`std::cin` expects the user to pass their name, and then their surname. They
    have to be separated by a space, tab, or newline character.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`std::cin`期望用户传递他们的名字，然后是他们的姓氏。它们必须用空格、制表符或换行符分隔。'
- en: See also
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Learning how to manipulate I/O strings* recipe covers how to manipulate
    strings as a complement of console I/O.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*学习如何操作I/O字符串*配方涵盖了如何操作字符串作为控制台I/O的补充。'
- en: Learning how to manipulate I/O strings
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习如何操作I/O字符串
- en: String manipulation is a very important aspect of almost any software. Being
    able to manipulate strings simply and effectively is a key aspect of software
    development. How would you read the configuration file of your application or
    parse it? This recipe will teach you what tools C++ offers to make this an enjoyable
    task with the `std::stringstream` class.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串操作是几乎任何软件的一个非常重要的方面。能够简单有效地操作字符串是软件开发的一个关键方面。你将如何读取应用程序的配置文件或解析它？这个配方将教你C++提供了哪些工具，使这成为一个愉快的任务，使用`std::stringstream`类。
- en: How to do it...
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In this section, we''ll develop a program by using `std::stringstream` to parse
    streams, which can actually come from any source: files, strings, input arguments,
    and so on.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将使用`std::stringstream`开发一个程序来解析流，这些流实际上可以来自任何来源：文件、字符串、输入参数等等。
- en: 'Let''s develop a program that prints all the entries of a file. Type the following
    code into a new CPP file, `console_05.cpp`:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们开发一个程序，打印文件的所有条目。将以下代码输入到一个新的CPP文件`console_05.cpp`中：
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`std::stringstream` is very handy when we have to parse strings into variables.
    Let''s see this in action by writing the following code in a new file, `console_06.cpp`:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们需要将字符串解析为变量时，`std::stringstream`非常方便。让我们通过在一个新文件`console_06.cpp`中编写以下代码来看看它的作用：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'And, to complement the second step, parsing and creating string streams is
    easy too. Let''s do this in `console_07.cpp`:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 而且，为了补充第二步，解析和创建字符串流也很容易。让我们在`console_07.cpp`中做这个：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The preceding three programs show how simple it is parsing a string in C++.
    The next section will explain them step by step.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的三个程序展示了在C++中解析字符串是多么简单。下一节将逐步解释它们。
- en: How it works...
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '*Step 1* shows that `std::getline` accepts any stream as input, not just the
    standard input (that is, `std::cin`). In this case, it gets the stream coming
    from a file. We include `iostream` for `std::cout`, `string` to be able to use
    strings, and `fstream` to be able to read the file.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤1*表明`std::getline`接受任何流作为输入，不仅仅是标准输入（即`std::cin`）。在这种情况下，它获取来自文件的流。我们包括`iostream`用于`std::cout`，`string`用于使用字符串，以及`fstream`用于读取文件。'
- en: 'Then, we open the `file_console_05.txt` file by using `std::fstream` (file
    stream). In its constructor, we pass the filename and the flags (in this case,
    just the information that is an input file with `std::ifstream::in`). We pass
    the file stream to `std::getline`, which will take care of copying each line from
    the stream and storing it in the `std::string` variable `line`, which is just
    printed. The output of this program is as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用`std::fstream`（文件流）打开`file_console_05.txt`文件。在它的构造函数中，我们传递文件名和标志（在这种情况下，只是信息，它是一个带有`std::ifstream::in`的输入文件）。我们将文件流传递给`std::getline`，它将负责将每行从流中复制并存储在`std::string`变量`line`中，然后将其打印出来。这个程序的输出如下：
- en: '![](img/867418ac-6e1b-4f44-ba9c-7ce3e3c45e78.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/867418ac-6e1b-4f44-ba9c-7ce3e3c45e78.png)'
- en: '*Step 2* shows the same program reading the `file_console_05.txt` file, but,
    this time we want to parse each line of the file. We do this by passing the `line` string
    variable to the `sline` `std::stringstream` variable. `std::stringstream` offers
    convenient and easy-to-use parsing capabilities.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤2*展示了相同的程序读取`file_console_05.txt`文件，但是这次我们想解析文件的每一行。我们通过将`line`字符串变量传递给`sline`
    `std::stringstream`变量来实现这一点。`std::stringstream`提供了方便和易于使用的解析能力。'
- en: 'By just writing the line `sline >> name >> surname >> age`, the `operator>>`
    of the `std::stringstream` class will save the `name`, `surname`, and `age` into
    the respective variables, taking care of the type conversion (that is, for the
    `age` variable, from `string` to `int`), assuming these variables appear in that
    order in the file. The `operator>>` will parse the string and, by skipping leading
    **whitespaces***,* for each token will call the appropriate method (for example, `basic_istream&
    operator>>( short& value );` or `basic_istream& operator>>( long long& value );`,
    among many others). The output of this program is as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 只需写入一行`sline >> name >> surname >> age`，`std::stringstream`类的`operator>>`将把`name`、`surname`和`age`保存到相应的变量中，并处理类型转换（即对于`age`变量，从`string`到`int`），假设这些变量按照这个顺序出现在文件中。`operator>>`将解析字符串，并通过跳过前导**空格**，对每个标记调用适当的方法（例如`basic_istream&
    operator>>( short& value );`或`basic_istream& operator>>( long long& value );`等）。该程序的输出如下：
- en: '![](img/137a9b31-5a6d-45c2-9966-1de8b3c8cc6b.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/137a9b31-5a6d-45c2-9966-1de8b3c8cc6b.png)'
- en: '*Step 3* shows that the same simplicity of parsing a stream into variables
    applies when building a stream too. The same `std::stringstream` variable `sline`
    is used with the `<<` operators, representing that the stream of data now flows
    in the direction of the `string stream` variable, which is printed to the standard
    output in two lines in the following screenshot. The output of this program is,
    as expected, as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤3*表明，将流解析为变量的简单性也适用于构建流。相同的`std::stringstream`变量`sline`与`<<`运算符一起使用，表示数据流现在流向`string
    stream`变量，该变量在以下截图中以两行打印到标准输出。该程序的输出如下：'
- en: '![](img/0bfd621e-e616-449c-b2a4-5c4a1be90335.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0bfd621e-e616-449c-b2a4-5c4a1be90335.png)'
- en: '`std::stringstream` makes it really easy to parse strings and streams, wherever
    they come from.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`std::stringstream`使得解析字符串和流变得非常容易，无论它们来自何处。'
- en: There's more...
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'If you''re looking for low latency, streams manipulation with `std::stringstream`
    might not be your first choice. We always suggest that you measure the performance
    and make a decision based on data. If that''s the case, you have different solutions
    you can try:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在寻找低延迟，使用`std::stringstream`进行流操作可能不是您的首选。我们始终建议您测量性能并根据数据做出决定。如果是这种情况，您可以尝试不同的解决方案：
- en: Just focus on the low-latency part of the code to optimize, if you can.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果可以的话，只需专注于代码的低延迟部分进行优化。
- en: Write your layer using a standard C or C++ method to parse data, for example,
    the typical `atoi()`  method.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用标准的C或C++方法编写您的层来解析数据，例如典型的`atoi()`方法。
- en: Use any open source low-latency framework.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用任何开源低延迟框架。
- en: See also
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Implementing I/O to and from the console* recipe covers how to deal with
    I/O from the console.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实现与控制台之间的I/O*教程介绍了如何处理来自控制台的I/O。'
- en: Working with files
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理文件
- en: This recipe will teach you the fundamental knowledge needed to deal with files.
    The C++ Standard Library historically offers a very good interface, but C++ 17
    added a namespace called `std::filesystem`, which further enriches the offer.
    We'll not take advantage of the C++17 `std::filesystem` namespace, though, as
    it was already introduced in [Chapter 2](1bf083f4-9d12-4b2e-bf5c-35a2e3d99c36.xhtml),
    *Revisiting C++*. Think about a concrete use case of creating a configuration
    file, or where you'd need to make a copy of that configuration file. This recipe
    will teach you how C++ makes this task easy.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程将教会你处理文件所需的基本知识。C++标准库在历史上提供了一个非常好的接口，但C++ 17添加了一个名为`std::filesystem`的命名空间，进一步丰富了功能。尽管如此，我们不会利用C++17的`std::filesystem`命名空间，因为它已经在[第2章](1bf083f4-9d12-4b2e-bf5c-35a2e3d99c36.xhtml)中介绍过了，*重温C++*。想想一个具体的用例，比如创建一个配置文件，或者你需要复制该配置文件的情况。这个教程将教会你如何使用C++轻松完成这个任务。
- en: How to do it...
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In this section, we''ll write three programs to learn how to work with files
    by using `std::fstream`, `std::ofstream`, and `std::ifstream`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将编写三个程序，学习如何使用`std::fstream`、`std::ofstream`和`std::ifstream`处理文件：
- en: 'Let''s develop a program that opens and writes into a new file, `file_01.cpp`,
    by using `std::ofstream`:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们开发一个程序，通过使用`std::ofstream`打开并写入一个新文件`file_01.cpp`：
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In a new source file, `file_02.cpp`, let''s read from a file and print to standard
    output:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个新的源文件`file_02.cpp`中，让我们从文件中读取并打印到标准输出：
- en: '[PRE10]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now we want to combine the flexibility of opening a file for both reading and
    writing. We''ll use `std::fstream` to copy the contents of `file_01.txt` into
    `file_03.txt` and then print its content. In another source file, `file_03.cpp`,
    type the following code:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们想要结合打开文件进行读写的灵活性。我们将使用`std::fstream`将`file_01.txt`的内容复制到`file_03.txt`，然后打印其内容。在另一个源文件`file_03.cpp`中，输入以下代码：
- en: '[PRE11]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Let's see how this recipe works.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个教程是如何工作的。
- en: How it works...
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Before getting deep into the preceding three programs, we have to clarify how
    the standard library is structured with regards to file streams. Let''s have a
    look at this following table:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入研究前面三个程序之前，我们必须澄清标准库在文件流方面的结构。让我们看一下下表：
- en: '|  |  | `<fstream>` |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '|  |  | `<fstream>` |'
- en: '| `<ios>` | <--`<ostream>` | <--`ofstream` |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| `<ios>` | <--`<ostream>` | <--`ofstream` |'
- en: '| `<ios>` | <-- `<istream>` | <--`ifstream` |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `<ios>` | <-- `<istream>` | <--`ifstream` |'
- en: 'Let''s break it down as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解如下：
- en: '`<ostream>`: The streams class responsible for output streams.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<ostream>`：负责输出流的流类。'
- en: '`<istream>`: The streams class responsible for input streams.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<istream>`：负责输入流的流类。'
- en: '`ofstream`: The streams class for writing to files. Present in the `fstream`
    header file.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ofstream`：用于向文件写入的流类。在`fstream`头文件中存在。'
- en: '`ifstream`: The streams class for reading from files. Present in the `fstream`
    header file.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ifstream`：用于从文件读取的流类。在`fstream`头文件中存在。'
- en: Both `std::ofstream` and `std::ifstream` inherit from the generic stream classes
    of `std::ostream` and `std::istream`, respectively. As you can imagine, `std::cin`
    and `std::cout` also inherit from `std::istream` and `std::ostream` (not shown
    in the preceding table).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`std::ofstream`和`std::ifstream`都继承自`std::ostream`和`std::istream`的通用流类。正如你可以想象的那样，`std::cin`和`std::cout`也继承自`std::istream`和`std::ostream`（在上表中未显示）。'
- en: '*Step 1*: The first thing we do is include `<iostream>` and `<fstream>` in
    order to use `std::cout` and `std::ofstream` to read the `file_01.txt` file. Then
    we call the `open` method, which, in this case opens the file in writing mode,
    as we''re using the `std::ofstream` class. We are now ready to write our strings
    into the `fout` file stream with the `<<` operator. Finally, we have to close
    the stream, which will end up closing the file. By compiling and running the program,
    we''ll get the following output:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤1*：我们首先包含`<iostream>`和`<fstream>`，以便使用`std::cout`和`std::ofstream`来读取`file_01.txt`文件。然后我们调用`open`方法，在这种情况下，打开文件以写入模式，因为我们使用`std::ofstream`类。现在我们准备使用`<<`运算符将字符串写入`fout`文件流中。最后，我们必须关闭流，这将关闭文件。通过编译和运行程序，我们将得到以下输出：'
- en: '![](img/54d34028-d689-4189-be42-0a164bbe3750.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/54d34028-d689-4189-be42-0a164bbe3750.png)'
- en: '*Step 2*: We do the opposite in this case: we read from the `file_01.txt` file
    and print to the standard output. The only difference, in this case, is that we
    use the `std::ifstream` class, which represents a reading file stream. By calling
    the `open()` method, the file is opened in reading mode (`std::ios::in`). By using
    the `std::getline` method, we can print to the standard output all the rows of
    the file. The output is shown as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤2*：在这种情况下，我们做相反的操作：从`file_01.txt`文件中读取并打印到标准输出。唯一的区别在于，这种情况下我们使用`std::ifstream`类，它表示一个读取文件流。通过调用`open()`方法，文件以读取模式（`std::ios::in`）打开。通过使用`std::getline`方法，我们可以将文件的所有行打印到标准输出。输出如下所示：'
- en: '![](img/d24e9dd6-2fda-49c5-905b-b1e690ba9987.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d24e9dd6-2fda-49c5-905b-b1e690ba9987.png)'
- en: The final third step shows the usage of the `std::fstream` class, which gives
    us more freedom by allowing us to open a file in both reading and writing mode
    (`std::ios::out` | `std::ios::in`). We also want to truncate the file if it exists
    (`std::ios::trunc`). There are many more options available to pass to the `std::fstream`
    constructor.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的第三步展示了`std::fstream`类的用法，它通过允许我们以读写模式（`std::ios::out` | `std::ios::in`）打开文件，给了我们更多的自由。我们还希望如果文件存在，则截断文件（`std::ios::trunc`）。有许多其他选项可用于传递给`std::fstream`构造函数。
- en: There's more...
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'C++17 made a huge improvement by adding the `std::filesystem` to the standard
    library. It is not completely new – it is hugely inspired by the Boost library.
    The main public members exposed are as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: C++17通过将`std::filesystem`添加到标准库中取得了巨大的改进。这并不是完全新的 - 它受到Boost库的巨大启发。公开的主要成员如下：
- en: '| **Method Name** | **Description** |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| **方法名称** | **描述** |'
- en: '| `path` | Represents a path |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '`path` | 表示路径'
- en: '| `filesystem_error` | An exception on filesystem errors |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '`filesystem_error` | 文件系统错误的异常'
- en: '| `directory_iterator` | An iterator to the content of the directory (the recursive
    version is available too) |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '`directory_iterator` | 一个用于遍历目录内容的迭代器（递归版本也可用）'
- en: '| `space_info` | Information about free and available space on the filesystem
    |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '`space_info` | 文件系统上空闲和可用空间的信息'
- en: '| `perms` | Identifies file system permissions system |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '`perms` | 标识文件系统权限系统'
- en: In the `std::filesystem` namespace, there are also helper functions that give
    information about the file, such as `is_directory()`, `is_fifo()`, `is_regular_file()`,
    `is_socket()`, and so on.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在`std::filesystem`命名空间中，还有一些辅助函数，可以提供有关文件的信息，例如`is_directory()`、`is_fifo()`、`is_regular_file()`、`is_socket()`等等。
- en: See also
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Understanding the filesystem *recipe in [Chapter 2](1bf083f4-9d12-4b2e-bf5c-35a2e3d99c36.xhtml), *Revisiting
    C++*, gives a refresher on the topic.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第2章](1bf083f4-9d12-4b2e-bf5c-35a2e3d99c36.xhtml)中的*理解文件系统*配方，*重温C++*，对该主题进行了复习。'
