- en: Introduction to Event Stream Programming Using C++
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用C++介绍事件流编程
- en: 'This chapter will be the last in the series of pre-requisite chapters required
    for programming reactive systems using C++. The reason why we need to go through
    quite a number of concepts is due to the fact that the reactive programming model
    unifies a lot of computing concepts in realizing its robust programming model.
    To start thinking in a reactive way, a programmer has to be familiar with object-oriented
    programming, functional programming, language-level concurrency, lock-free programming,
    the asynchronous programming model, design patterns, scheduling algorithms, data
    flow programming model, declarative-style programming, and even a bit of graph
    theory! We started the book with a peek into the event-driven programming models
    of various GUI systems and ways to structure our code around them. We covered
    the core essence of Modern C++ [Chapter 2](e1c95513-a3a7-40f2-ac25-9f95cbd9a2e6.xhtml),
    *A Tour of Modern C++ and its Key Idioms*. In [Chapter 3](16bbadb9-c545-44b1-8edb-82ab82a83394.xhtml), *Language-Level
    Concurrency and Parallelism in C++*, and [Chapter 4](80c4a483-89c7-45fc-a83f-736a1817126e.xhtml),
    *Asynchronous and Lock-Free Programming in C++*, we covered the language-level
    concurrency supported by the C++ language and lock-free programming, respectively.
    In [Chapter 5](c73fa9f3-6f2b-47f6-946d-155446d3225f.xhtml), *Introduction to Observables*,
    we focused on how to put the reactive programming model into perspective by dealing
    with it in the context of GOF patterns. What is left is event Stream programming.
    Now we will be focusing on the processing of event Streams or event Stream programming.
    In this chapter, we will look at the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将是使用C++编程反应性系统所需的先决章节系列的最后一章。我们需要经历许多概念的原因是，反应式编程模型统一了许多计算概念，实现了其强大的编程模型。要开始以反应式方式思考，程序员必须熟悉面向对象编程、函数式编程、语言级并发、无锁编程、异步编程模型、设计模式、调度算法、数据流编程模型、声明式编程风格，甚至一点图论！我们从书中窥探了各种GUI系统的事件驱动编程模型以及围绕它们构建代码的方式。我们涵盖了现代C++的核心要点[第2章](e1c95513-a3a7-40f2-ac25-9f95cbd9a2e6.xhtml)，*现代C++及其关键习语之旅*。在[第3章](16bbadb9-c545-44b1-8edb-82ab82a83394.xhtml)中，*C++中的语言级并发和并行性*，以及[第4章](80c4a483-89c7-45fc-a83f-736a1817126e.xhtml)，*C++中的异步和无锁编程*，我们分别介绍了C++语言支持的语言级并发和无锁编程。在[第5章](c73fa9f3-6f2b-47f6-946d-155446d3225f.xhtml)中，*可观察对象简介*，我们重点介绍了如何将反应式编程模型放入GOF模式的背景中处理。剩下的是事件流编程。现在我们将专注于处理事件流或事件流编程。在本章中，我们将讨论以下内容：
- en: What is the Stream programming model?
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是流编程模型？
- en: Advantages of the Stream programming model
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流编程模型的优势
- en: Stream programming using C++ with a public domain library
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用C++和公共领域库进行流编程
- en: Stream programming using Streamulus
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Streamulus进行流编程
- en: Event Stream programming
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件流编程
- en: What is Stream programming model?
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是流编程模型？
- en: Before we get into the topic of the Stream programming model, we will take a
    step back to look at parallels with the POSIX shell programming model. In a typical
    command line shell program, every command is a program and every program is a
    command. We can pipe the output of one program to another program after achieving
    a computational objective or task. In effect, we can chain a series of commands 
    to achieve bigger computational task. We can see it as a stream of data passing
    through a series of filters or transformations to fetch the output. We can also
    call the preceding process as *command composition*. There are real-life cases
    where huge programs are being replaced by small amount of shell code using *command
    composition* . The same process can be realized in a C++ program, by treating
    the input of a function as a stream, sequence, or list. The data can be passed
    from one function or function object (aka functor)  to another as a standard data
    container.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入讨论流编程模型之前，我们将退一步，看看与POSIX shell编程模型的相似之处。在典型的命令行shell程序中，每个命令都是一个程序，每个程序都是一个命令。在实现计算目标或任务后，我们可以将一个程序的输出传递给另一个程序。实际上，我们可以链接一系列命令来实现更大的计算任务。我们可以将其视为一系列数据通过一系列过滤器或转换以获取输出。我们也可以称之为*命令组合*。有现实情况下，巨大的程序被少量的shell代码使用*命令组合*替代。同样的过程可以在C++程序中实现，将函数的输入视为流、序列或列表。数据可以从一个函数或函数对象（也称为函数对象）传递到另一个函数，作为标准数据容器。
- en: 'Dr. Donald Knuth, the legendary computer scientist and Stanford University
    Professor was asked to write a program that:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 传奇计算机科学家和斯坦福大学教授唐纳德·克努斯博士被要求编写一个程序：
- en: Reads a text file and determines *n* frequently used words
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取文本文件并确定*n*个常用单词
- en: Prints out a sorted list of words along with their frequencies
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打印出一个按单词频率排序的单词列表
- en: 'Knuth''s solution was a ten-page Pascal program! Doug McIlroy realized the
    same with just the following shell script:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Knuth的解决方案是一个十页的Pascal程序！Doug McIlroy只用以下shell脚本就实现了相同的功能：
- en: '`tr -cs A-Za-z '' n '' | tr A-Z a-z | sor t | uniq -c | sor t -rn | sed ${1}q`So
    much for the power of command composition.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`tr -cs A-Za-z '' n '' | tr A-Z a-z | sor t | uniq -c | sor t -rn | sed ${1}q`命令组合的威力就是这样了。'
- en: Advantages of the Stream programming model
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 流编程模型的优势
- en: 'Traditional OOP programs model hierarchies well, and processing hierarchies
    is mostly a difficult process compared to processing a linear collection. In the
    case of the Stream programming model, we can treat the input as a stream of entities
    put into a container and the output as a bag of entities, without modifying the
    input data stream. Using C++ generic programming techniques, we can write container-agnostic
    code to process streams. Some advantages of this model are:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的OOP程序很好地模拟了层次结构，处理层次结构大多比处理线性集合更困难。在流编程模型中，我们可以将输入视为放入容器的实体流，将输出视为实体的集合，而不修改输入数据流。使用C++通用编程技术，我们可以编写与容器无关的代码来处理流。这种模型的一些优势包括：
- en: Stream programming simplifies program logic
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流编程简化了程序逻辑
- en: Streams can support lazy evaluation and functional style transforms
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流可以支持惰性评估和函数式转换
- en: Streams are better suited for the concurrent programming model (Source Streams
    are immutable)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流更适合并发编程模型（源流是不可变的）
- en: We can compose functions to create higher-order functions to process them
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以组合函数来创建高阶函数来处理它们
- en: Streams facilitate the declarative programming model
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流促进了声明式编程模型
- en: They can aggregate, filter, and transform data from different sources
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们可以从不同的源聚合、过滤和转换数据
- en: They decouple data sources and the entities that process them
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们解耦了数据源和处理数据的实体
- en: They improve code readability  (developers can comprehend code faster)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们提高了代码的可读性（开发人员可以更快地理解代码）
- en: They can exploit data parallelism and task parallelism
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们可以利用数据并行性和任务并行性
- en: We can leverage hundreds of well-defined Stream operators (algorithms) to process
    data
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以利用数百个定义良好的流操作符（算法）来处理数据
- en: Applied Stream programming using the Streams library
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Streams库进行应用流编程
- en: 'In this section, we will introduce  the topic of Stream programming using the
    *`Streams` *library ,a public domain library written by Jonah Scheinerman. The
    library is hosted at [https://github.com/jscheiny/Streams ](https://github.com/jscheiny/Streams)and 
    the API documentation is available from [http://jscheiny.github.io/Streams/api.html#](http://jscheiny.github.io/Streams/api.html).
    An introduction has been given as following  (taken from the library GitHub page):'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍使用`Streams`库进行流编程的主题，这是由Jonah Scheinerman编写的一个公共领域库。该库托管在[https://github.com/jscheiny/Streams](https://github.com/jscheiny/Streams)，API文档可从[http://jscheiny.github.io/Streams/api.html#](http://jscheiny.github.io/Streams/api.html)获取。以下是一个介绍（摘自库的GitHub页面）：
- en: '`Streams` is a C++ library that provides lazy evaluation and functional-style
    transformations on data, to ease the use of C++ standard library containers and
    algorithms. `Streams` supports many common functional operations such as map,
    filter, and reduce, as well as various other useful operations such as various
    set operations (union, intersection, difference), partial sum, and adjacent difference,
    as well as many others.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`Streams`是一个C++库，提供了对数据的惰性评估和函数式转换，以便更轻松地使用C++标准库的容器和算法。`Streams`支持许多常见的函数操作，如map、filter和reduce，以及其他各种有用的操作，如各种集合操作（并集、交集、差集）、部分和、相邻差分，以及其他许多操作。'
- en: We can see that a programmer who is familiar with the **standard template library** (**STL**)
    will clearly be at ease with this library. The STL Containers are treated as 
    Stream data source and  the STL algorithms can be considered  as  transformations 
    on the Stream data source. The library uses functional programming idioms supported
    by Modern C++ and also supports lazy evaluation. The concept of lazy evaluation
    is very significant here, as it is the corner stone of functional programming
    model and Rx programming  model.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，熟悉标准模板库（STL）的程序员将会对这个库感到非常舒适。STL容器被视为流数据源，STL算法可以被视为对流数据源的转换。该库使用现代C++支持的函数式编程习语，并且支持惰性评估。在这里，惰性评估的概念非常重要，因为它是函数式编程模型和Rx编程模型的基石。
- en: Lazy evaluation
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 惰性评估
- en: 'In programming languages, there are two prominent  ways to evaluate arguments
    to a function they are as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程语言中，有两种突出的评估函数参数的方法，它们如下：
- en: '**Applicative-order evaluation** (**AO**)'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序顺序评估（AO）
- en: '**Normal-order evaluation** (**NO**)'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正常顺序评估（NO）
- en: In the case of AO, arguments are evaluated in the calling context, before being
    passed to the callee. Most conventional programming languages follow this method.
    In the case of NO, the evaluation of the variables is deferred until the result
    of the computation is warranted in the context of the callee. Some functional
    programming languages, such as Haskell, F#, and ML, follow the NO model. In functional
    programming languages, most of the evaluation of functions is referentially transparent
    (the invocation of the functions does not produce side-effects); we need to evaluate
    the expression only once (for a particular value as argument) and the result can
    be shared, when the evaluation with the same function with the same arguments
    appears once again for execution. This is called **lazy evaluation**. Thus, lazy
    evaluation can be considered a NO  coupled with sharing of the previously computed
    results. The C++ programming language does not provide support for lazy evaluation
    of function parameters by default, but can be emulated using different techniques
    available  such as Variadic Templates and expression templates.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在AO的情况下，参数在调用上下文中被评估，然后传递给被调用者。大多数传统的编程语言都遵循这种方法。在NO的情况下，变量的评估被推迟，直到在被调用者的上下文中需要计算结果。一些函数式编程语言，如Haskell、F#和ML，遵循NO模型。在函数式编程语言中，大部分函数的评估是引用透明的（函数的调用不会产生副作用）；我们只需要对表达式进行一次评估（对于特定值作为参数），并且结果可以在再次执行相同函数相同参数的评估时共享。这被称为惰性评估。因此，惰性评估可以被认为是NO与先前计算结果的共享相结合。C++编程语言默认不支持函数参数的惰性评估，但可以使用不同的技术来模拟，例如可变模板和表达式模板。
- en: A simple Stream program
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个简单的流程序
- en: 'To get started with the `Streams` library, let''s write a small program to
    generate a Stream of numbers and compute the square of the first ten numbers:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用`Streams`库，让我们编写一个小程序来生成一个数字流并计算前十个数字的平方：
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The previous code snippet generates a list of values (using `MakeStream::counter(1)`
    ) and the generated values will be transformed using the map function (in this
    case, computing the square). When ten elements are assembled (`limit(10)`) in
    the Stream, we call the operator sum on the Stream.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码片段生成了一个值列表（使用`MakeStream::counter(1)`），生成的值将使用map函数进行转换（在这种情况下，计算平方）。当在流中组装了十个元素（`limit(10)`）时，我们在流上调用sum操作符。
- en: Aggregating values using the Stream paradigm
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用流范式聚合值
- en: 'Now that we understand the basics of Stream programming as envisaged by the
    Stream library, let''s write a piece of code that computes the average of numbers
    stored in a  std::vector container:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了Stream库所设想的流编程的基础知识，让我们编写一段代码，计算存储在`std::vector`容器中的数字的平均值：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The previous code snippet creates a Stream out of `std::vector` and applies
    a reduction process using the `std::plus` functor. It is tantamount to aggregating
    the values in the Stream. Finally, we divide the aggregated value with by the
    of elements in `std::vector`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码片段从`std::vector`创建了一个流，并使用`std::plus`函数对象进行了归约处理。这等同于对流中的值进行聚合。最后，我们将聚合值除以`std::vector`中的元素数量。
- en: The STL and the Stream paradigm
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: STL和流范式
- en: 'The `Streams` library can work seamlessly with the STL containers. The following
    code snippets will map a function on Streams and resultant data is being transformed
    to a vector container:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`Streams`库可以与STL容器无缝配合。以下代码片段将在流上映射一个函数，并将结果数据转换为一个向量容器：'
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The previous code snippet converts `std::vector<double>` into a Stream, applies
    the square function, and converts the stuff back to `std:::vector<double>`. After
    that, the vector is iterated to print the content. The `Streams` library documentation
    is very elaborate and contains lot of code samples that you can use to write code
    for production-quality applications. Consult the API documentation, available
    at [http://jscheiny.github.io/Streams/api.html](http://jscheiny.github.io/Streams/api.html).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码片段将`std::vector<double>`转换为一个流，应用平方函数，然后将结果转换回`std:::vector<double>`。之后，对向量进行迭代以打印内容。`Streams`库的文档非常详尽，包含许多代码示例，可以用来编写生产质量的应用程序。请参阅API文档，网址为[http://jscheiny.github.io/Streams/api.html](http://jscheiny.github.io/Streams/api.html)。
- en: A word about the Streams library
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于Streams库
- en: 'The `Streams` library is a well-designed piece of software with an intuitive
    programming model. Any programmer who has worked with a functional programming
    and Streams programming will really be comfortable with it in a matter of hours.
    Those of you who are familiar with STL will also find the library to be very intuitive
    as well. From a programming model perspective, the API can be divided into:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`Streams`库是一个设计良好的软件，具有直观的编程模型。任何曾经使用过函数式编程和流编程的程序员都会在几个小时内真正感到舒适。熟悉STL的人也会觉得这个库非常直观。从编程模型的角度来看，API可以分为：'
- en: Core methods (Stream initialization)
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 核心方法（流初始化）
- en: Generators (Stream creators)
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成器（流创建者）
- en: Stateful intermediate operators (functional immutable transformations)
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有状态的中间操作符（函数式不可变转换）
- en: Stateless intermediate operators
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无状态的中间操作符
- en: Terminal operators
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 终端操作符
- en: The previously mentioned documentation  of the library sheds light on the each
    of the aspects of this wonderful library.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 前面提到的库文档阐明了这个出色库的各个方面。
- en: Event Stream programming
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件流编程
- en: We have got some kind of understanding about the working of  Stream programming
    model. When we process events as Streams, it can be categorized  as Event Stream
    programming. In the programming community, event-driven architecture is being
    projected as a better model for crafting modern programs. A wonderful example
    of software that relies on Event Stream programming is version control systems.
    In a version control system, everything is treated as an event. Typical examples
    include checking out the code, commits, rollbacks, and branching.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对流编程模型的工作有了一定的了解。当我们将事件作为流处理时，可以将其归类为事件流编程。在编程社区中，事件驱动架构被认为是打造现代程序的更好模型。一个依赖于事件流编程的软件的绝佳例子是版本控制系统。在版本控制系统中，一切都被视为事件。典型的例子包括检出代码、提交、回滚和分支。
- en: Advantages of Event Stream programming
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件流编程的优势
- en: 'Aggregating events as a Stream and processing  them in downstream  systems
    has many advantages compared to the traditional Event programming model. Some
    of the key advantages are:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 将事件作为流聚合并在下游系统中处理与传统的事件编程模型相比有许多优势。一些关键优势包括：
- en: Event source and Event sinks are not coupled
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件源和事件接收器没有耦合
- en: Event sinks can process events without bothering with Event sources
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件接收器可以处理事件而不必理会事件源
- en: We can apply Stream processing operators to process and filter Streams
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以应用流处理操作符来处理和过滤流
- en: The transformation and filtering can be done at the aggregation level
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转换和过滤可以在聚合级别进行处理
- en: The events can be propagated through a Stream-processing network
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件可以通过流处理网络传播
- en: Event processing can be parallelized easily (declarative parallelism )
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件处理可以很容易地并行化（声明式并行）
- en: The Streamulus library and its programming model
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Streamulus库及其编程模型
- en: 'The Streamulus library, from Irit Katiel, is a library that makes the programming
    of event Streams easier with a programming model, which implements **domain-specific
    embedded language** (**DSEL**). To understand the programming model, let''s inspect
    a program that Streams data into a class that aggregates received data:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Streamulus库，来自Irit Katiel，是一个库，通过实现**特定领域嵌入式语言**（**DSEL**）的编程模型，使事件流的编程更加容易。为了理解编程模型，让我们检查一个将数据流入聚合接收到的数据的类的程序：
- en: '[PRE3]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The preceding functor just accumulates the value passed into a static variable.
    For each invocation of the function by the `Streamify` template (`Streamify<print>(s)`
    ), the value accumulated so far will be printed to the console. More on this can
    be understood by going through the listing as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的函数对象只是将传递的值累积到静态变量中。对于每次由`Streamify`模板（`Streamify<print>(s)`）调用的函数，到目前为止累积的值将被打印到控制台。通过查看以下清单，可以更好地理解这一点：
- en: '[PRE4]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We create a Stream using the `NewInputStream<T>` template method. The function
    expects a parameter that determines whether logs should be printed to the console.
    By giving the second parameter as `false`, we can turn off verbose mode. We need
    to create an instance of the Streamulus engine to orchestrate the data flow. The
    Streamulus engine does a topological sort of the Stream expressions to determine
    the change propagation order:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `NewInputStream<T>` 模板方法创建一个流。该函数期望一个参数，用于确定是否应将日志打印到控制台。通过将第二个参数设置为 `false`，我们可以关闭详细模式。我们需要创建一个
    Streamulus 引擎的实例来协调数据流。Streamulus 引擎对流表达式进行拓扑排序，以确定变化传播顺序：
- en: '[PRE5]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We use the `Streamify<f>` strop (Stream operator) to serialize calls to the
    print functor we just created. We can create our own Stream operators, and usually
    Streamify would suffice for us. Streamfiy creates a single event functor and a
    strop:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `Streamify<f>` strop（流操作符）来序列化刚刚创建的打印函子的调用。我们可以创建自己的流操作符，通常 Streamify 对我们来说就足够了。Streamfiy
    创建一个单事件函子和一个 strop：
- en: '[PRE6]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The previous code snippets emit some values into the Stream. We would be able
    to see the accumulated sum to be printed on the console three times. In the main
    function, we invoke the `hello_Stream` function to trigger all the actions.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 先前的代码片段将一些值发射到流中。我们将能够在控制台上看到累积和打印三次。在主函数中，我们调用 `hello_Stream` 函数来触发所有操作。
- en: 'Now that we have learned how the Streamulus systems work with a simple program,
    let''s write a program that clarifies the semantics of the library much better.
    The following program Streams data through a host of single argument functors
    to demonstrate the functioning of the library. We also use Stream expressions
    liberally in the listings:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学会了 Streamulus 系统如何与简单程序一起工作，让我们编写一个更好地阐明库语义的程序。以下程序通过一系列单参数函子流数据，以演示库的功能。我们还在列表中大量使用流表达式：
- en: '[PRE7]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The preceding set of functors is arithmetical in nature. The `twice` functor
    doubles the argument, the `neg` functor flips the sign of the argument, and the
    `half` functor scales the value by 0.5 to halve the value of the argument:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 前面一组函子在性质上是算术的。`twice` 函子将参数加倍，`neg` 函子翻转参数的符号，`half` 函子将值缩放0.5以减半参数的值：
- en: '[PRE8]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'How the preceding two function objects work is obvious—the first one (print)
    just outputs the value to the console. `as_string` converts the argument to the
    string using the `std::stringStream` class:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 前面两个函数对象的工作方式是显而易见的——第一个（print）只是将值输出到控制台。`as_string` 使用 `std::stringStream`
    类将参数转换为字符串：
- en: '[PRE9]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`DataFlowGraph()` created `InputStream<T>` to process a double-valued Stream.
    After instantiating the `Streamulus` object (engine), we glued a series of functors
    through a `Streamify<f>` Stream operator. The operation can be considered a kind
    of functional composition with a single argument function. After setting up the
    mechanism, we injected data to the Stream using the `InputStreamPut` function:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`DataFlowGraph()` 创建了 `InputStream<T>` 来处理双值流。在实例化 `Streamulus` 对象（引擎）之后，我们通过
    `Streamify<f>` 流操作符将一系列函子连接起来。该操作可以被视为一种具有单参数函数的函数组合。设置机制后，我们使用 `InputStreamPut`
    函数向流中注入数据：'
- en: '[PRE10]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The Streamulus library – a peek into its internals
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Streamulus 库 - 其内部的一瞥
- en: The `Streamulus` library basically creates a change propagation graph to ease
    Stream processing. We can treat the node of a graph as computation, and the edges
    as buffers that take the data from one node to another. Almost all data flow systems
    follow the same semantics. The `Streamulus` library helps us to build a graph
    of dependent variables, which help us propagate the changes to child nodes. The
    order in which variables should be updated will be defined by doing a topological
    sort on the graph.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`Streamulus` 库基本上创建了一个变化传播图，以简化流处理。我们可以将图的节点视为计算，将边视为从一个节点到另一个节点的缓冲区。几乎所有数据流系统都遵循相同的语义。`Streamulus`
    库帮助我们构建一个依赖变量的图，这有助于我们将更改传播到子节点。应该更新变量的顺序将通过对图进行拓扑排序来定义。'
- en: 'A graph is a data structure where a set of dependent entities is represented
    as nodes (or vertices) and their relationship (as edges) between them. In computer
    science, especially when it comes to scheduling and analyzing dependencies, a
    particular version of graph, called directed acyclic graphs, is preferred for
    its unique qualities. A DAG is a directed graph without cycles. We can perform
    an operation called a topological sort to determine the linear order in which
    the entities are dependent. The topological sorting can only be performed on a
    DAG and they are not unique. In the following graph, we can find multiple topological
    orders:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图是一种数据结构，其中一组依赖实体表示为节点（或顶点），它们之间的关系（作为边）表示为边。在计算机科学中，特别是在调度和分析依赖关系时，有一种特定版本的图，称为有向无环图，因其独特的特性而受到青睐。DAG
    是一个没有循环的有向图。我们可以执行称为拓扑排序的操作来确定实体的线性依赖顺序。拓扑排序只能在 DAG 上执行，它们不是唯一的。在下图中，我们可以找到多个拓扑排序：
- en: '![](img/2b411853-e46e-490e-b720-cf0c6e626342.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2b411853-e46e-490e-b720-cf0c6e626342.png)'
- en: The Streamulus Library – a look into expression processing
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Streamulus 库 - 表达式处理的一瞥
- en: 'We will take a look at how `Streamulus` processes expressions using a simple
    Stream expression:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看看 `Streamulus` 如何使用简单的流表达式处理表达式：
- en: '[PRE11]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The `- (x+1)` Stream expression will produce the following graph. The term 
    strop stands for Stream operators and each of the nodes is organized as a strop:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`- (x+1)` 流表达式将产生以下图表。术语 strop 代表流操作符，每个节点都组织为一个 strop：'
- en: '![](img/bc54a6ad-64ad-4387-be8a-641b1f3cc85c.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bc54a6ad-64ad-4387-be8a-641b1f3cc85c.png)'
- en: 'Once the node has been labeled correctly, a topological sort on the graph will
    be done to determine the execution order. The following diagram shows a topological
    sort (you can have multiple topological orders):'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦节点被正确标记，将对图进行拓扑排序以确定执行顺序。下图显示了一个拓扑排序（可以有多个拓扑排序）：
- en: '![](img/e5e60556-9541-400f-8cc2-210cfa39479f.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e5e60556-9541-400f-8cc2-210cfa39479f.png)'
- en: The Streamulus engine walks through the graph to find out the order in which
    Stream operators have to be applied on the data propagating through the network.
    The **TO** label stands for **topological order**. After topological sort, a linear
    list of Stream operators ranked by Topological order will be produced. The execution
    engine will execute the code in topological order.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Streamulus引擎遍历图表，找出在数据传播过程中必须应用流操作符的顺序。**TO**标签代表**拓扑顺序**。拓扑排序后，将产生一个按拓扑顺序排名的流操作符的线性列表。执行引擎将按照拓扑顺序执行代码。
- en: The Streamulus engine performs its magic using the boost proto library. The
    latter manages expression trees for the Streamulus library. To really go through
    the source code of the library, you need to be comfortable with template meta
    programming, especially expression templates. Meta programming is a technique
    where we write code to generate or transform source code. It turned out that the
    C++ template mechanism was Turing complete by Erwin Unruh in the year 1994.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Streamulus引擎使用boost proto库执行其魔术。后者管理Streamulus库的表达式树。要真正查看库的源代码，您需要熟悉模板元编程，特别是表达式模板。元编程是一种我们编写代码来生成或转换源代码的技术。1994年，Erwin
    Unruh发现C++模板机制是图灵完备的。
- en: The spreadsheet Library — a change-propagation engine
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 电子表格库-变更传播引擎
- en: An electronic spreadsheet is often touted as the quintessential example of a
    reactive system. In a spreadsheet, a page is organized as a matrix of cells. When
    there is a  change in  a cell, all dependent cells will be re-computed to reflect
    the change. This happens for every cell. In effect, modelling a spreadsheet is
    easy, if you have a library such as Streamulus. Fortunately, the designer of the
    library itself wrote another library that relies on Streamulus for change propagation.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 电子表格经常被吹捧为反应系统的典型示例。在电子表格中，页面被组织为单元格矩阵。当单元格发生变化时，所有依赖单元格将重新计算以反映变化。这对每个单元格都是如此。实际上，如果您有诸如Streamulus之类的库，对电子表格进行建模是很容易的。幸运的是，该库的设计者本身编写了另一个依赖于Streamulus进行变更传播的库。
- en: Spreadsheet is a C++ library that enables spreadsheet-programming, that is,
    setting up variables (cells) where each cell is assigned an expression that can
    contain the values of other cells. Changes are propagated to all dependent cells,
    as in a spreadsheet. Spreadsheet was developed to demonstrate the use of Streamulus.
    Spreadsheet is a header-only library. It uses boost and Streamulus. So put these
    three libraries in your include path. The details of the library can be found
    at [https://github.com/iritkatriel/spreadsheet](https://github.com/iritkatriel/spreadsheet).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 电子表格是一个C++库，可以实现电子表格编程，即设置变量（单元格），其中每个单元格都被分配一个可能包含其他单元格值的表达式。更改将传播到所有依赖单元格，就像在电子表格中一样。电子表格是为了演示Streamulus的使用而开发的。电子表格是一个仅包含头文件的库。它使用boost和Streamulus。因此，请将这三个库放在您的包含路径中。该库的详细信息可以在[https://github.com/iritkatriel/spreadsheet](https://github.com/iritkatriel/spreadsheet)上找到。
- en: 'We will go through a sample program that leverages the `Spreadsheet` library,
    which is included in the project''s GitHub repository (`main.cpp`):'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将介绍一个利用“电子表格”库的示例程序，该库包含在项目的GitHub存储库（`main.cpp`）中：
- en: '[PRE12]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The previous code snippet creates a set of cells, which acts as a container
    for IEEE double-precision floating-point numbers. After we have initialized the
    cell, we will start mutating the values of the cell with the following set of
    expressions:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码片段创建了一组单元格，作为IEEE双精度浮点数的容器。初始化单元格后，我们将开始使用以下一组表达式改变单元格的值：
- en: '[PRE13]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, we will mutate the values with the preceding expressions. After each assignment
    through the `Set` method, a computational pass will get triggered through the
    cells. The `Streamulus` library manages the underlying flow:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用前述表达式改变值。通过“Set”方法进行每次赋值后，将通过单元格触发计算传递。`Streamulus`库管理底层流：
- en: '[PRE14]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The previous code snippet prints the value of the cells to the console. Once
    again, we will change the cells'' expressions to trigger a computational flow
    graph:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码片段将单元格的值打印到控制台。我们将再次更改单元格的表达式以触发计算流图：
- en: '[PRE15]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The source code of the library can be perused to understand the internal workings
    of the library. A spreadsheet is a wonderful example of how the Streamulus library
    can be leveraged to write robust software.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 可以查看库的源代码以了解库的内部工作原理。电子表格是Streamulus库如何被利用来编写健壮软件的绝佳示例。
- en: RaftLib – another Stream-processing library
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RaftLib-另一个流处理库
- en: RaftLib  is a library that is worth checking out for anyone (developers) who
    are interested in doing parallel programming or Stream-based programming. The
    library is available at [https://github.com/RaftLib/RaftLib](https://github.com/RaftLib/RaftLib)
    . The following description is available from the preceding site
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: RaftLib是一个值得检查的库，适用于任何对并行编程或基于流的编程感兴趣的人（开发人员）。该库可在[https://github.com/RaftLib/RaftLib](https://github.com/RaftLib/RaftLib)上找到。前述网站提供了以下描述
- en: RaftLib is a C++ Library for enabling Stream/data-flow parallel computation.
    Using simple right-shift operators (just like the C++ Streams that you would use
    for string manipulation), you can link parallel compute kernels together. With
    RaftLib, we do away with explicit use of pthreads, std::thread, OpenMP, or any
    other parallel threading library. These are often mis-used, creating non-deterministic
    behavior. RaftLib's model allows lock-free FIFO-like access to the communications
    channels connecting each compute kernel. The full system has many auto-parallelization,
    optimization, and convenience features that enable relatively simple authoring
    of performant applications.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: RaftLib是一个用于实现流/数据流并行计算的C++库。使用简单的右移操作符（就像您用于字符串操作的C++流一样），您可以将并行计算内核链接在一起。使用RaftLib，我们摆脱了显式使用pthread、std.thread、OpenMP或任何其他并行线程库。这些通常被误用，导致非确定性行为。RaftLib的模型允许无锁FIFO样式访问连接每个计算内核的通信通道。整个系统具有许多自动并行化、优化和便利功能，可以相对简单地编写高性能应用程序。
- en: 'We won''t be covering `RaftLib` in detail in this particular book, due to space
    constraints. A wonderful talk by the author of the library (Jonathan Beard) is
    available at [https://www.youtube.com/watch?v=IiQ787fJgmU](https://www.youtube.com/watch?v=IiQ787fJgmU).
    Let''s go through a code snippet that shows the working of this library:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 由于空间限制，本书不会详细介绍`RaftLib`。该库的作者Jonathan Beard有一次精彩的演讲，可在[https://www.youtube.com/watch?v=IiQ787fJgmU](https://www.youtube.com/watch?v=IiQ787fJgmU)观看。让我们来看一个代码片段，展示了这个库的工作原理：
- en: '[PRE16]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As a programmer, you are supposed to define a kernel for custom computation
    and use the `>>` operator to Stream the data. In the preceding code, the `hi`
    class is such a kernel. Consult the `Raftlib` documentation (available at the
    preceding RaftLib URL) and source code examples to learn more about this wonderful
    library.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 作为程序员，您应该为自定义计算定义一个内核，并使用`>>`运算符来流式传输数据。在前面的代码中，`hi`类就是这样一个内核。请查阅`Raftlib`文档（可在前面的RaftLib
    URL找到）和源代码示例，以了解更多关于这个精彩库的信息。
- en: What do these things have to do with Rx programming?
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这些东西与Rx编程有什么关系？
- en: 'Basically, the reactive programming model treats events as a Stream of data
    propagating through a change-propagation graph. For this to happen, we need to
    aggregate event elements to a container-based data structure and create a Stream
    out of that. Sometimes, we even apply statistical techniques to sample events,
    if there is plenty of data. The generated Stream can be filtered and transformed
    at the source level using functional transformation, before being notified to
    the observers who are  waiting to get notified. The event source is supposed to
    take a fire-and-forget approach to event-Stream dispatch, to avoid the coupling
    between Event source sinks and the Event sinks . When to dispatch the event data 
    will be determined by scheduling software which runs the functional transformation
    pipeline in an asynchronous manner. So, the key elements of reactive programming
    are:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，响应式编程模型将事件视为通过变化传播图传播的数据流。为了实现这一点，我们需要将事件元素聚合到基于容器的数据结构中，并从中创建一个流。有时，如果数据很多，我们甚至会应用统计技术来对事件进行采样。生成的流可以在源级别使用函数转换进行过滤和转换，然后通知等待通知的观察者。事件源应该采取一种点火并忘记的方式来分发事件流，以避免事件源汇和事件汇之间的耦合。何时分派事件数据将由调度软件确定，该软件以异步方式运行函数转换管道。因此，响应式编程的关键元素是：
- en: Observables (a Stream of data in which others are interested)
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Observables（其他人感兴趣的数据流）
- en: Observer (entities which is interested in an Observable and Subscribe for notification)
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 观察者（对Observable感兴趣并订阅通知的实体）
- en: Scheduler (which determines when the Stream should be propagated down the network)
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调度器（确定流何时应该在网络上传播）
- en: Functional Operators (event filtering and transformation)
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功能操作符（事件过滤和转换）
- en: 'In a nutshell, the `Scheduler` (part of the Rx Engine) takes an `Observable`
    for filtering and transformation asynchronously before notifying the subscribers,
    as shown:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，`调度器`（Rx引擎的一部分）会异步地对`Observable`进行过滤和转换，然后再通知订阅者，如下所示：
- en: '![](img/410323d7-7640-424d-b00e-07089e08888d.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/410323d7-7640-424d-b00e-07089e08888d.png)'
- en: Summary
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered the topic of event Stream programming. Treating
    events as Streams has many advantages over the traditional event-processing model.
    We started with the `Streams` library and learned about its programming model.
    We also wrote some programs to familiarize ourselves with the library and its
    semantics. The `Streams` library has excellent documentation and you should consult
    its documentation to learn more about it. After Streams library, we looked at
    the Streamulus library, which provides a DSEL approach to the manipulation of
    event Streams. We wrote a couple of programs and also studied some sample programs
    that come with the `Streamulus` library. We also mentioned the `Raftlib` library,
    an alternative library for the Stream processing . With the coverage of Event
    Stream programming model, We have now finished dealing with the prerequisites
    for understanding reactive programming in general and the RxCpp library in particular.
    In the next chapter, we will start using the RxCpp library to get into the programming
    model of the reactive system design.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了事件流编程的主题。将事件视为流在许多方面优于传统的事件处理模型。我们从`Streams`库开始，了解了它的编程模型。我们还编写了一些程序，以熟悉该库及其语义。`Streams`库有很好的文档，您应该查阅其文档以了解更多信息。在Streams库之后，我们看了一下Streamulus库，它提供了一种DSEL方法来操作事件流。我们编写了一些程序，还学习了一些附带`Streamulus`库的示例程序。我们还提到了`Raftlib`库，这是流处理的另一种选择。通过对事件流编程模型的覆盖，我们现在已经完成了理解响应式编程一般和RxCpp库特别的先决条件。在下一章中，我们将开始使用RxCpp库，进入响应式系统设计的编程模型。
