["```cpp\nvoid AController::Possess(APawn* InPawn)\n```", "```cpp\nvoid AController::UnPossess()\n```", "```cpp\n    Cell Size: 5.0f\n    Agent Height: 192.0f\n    ```", "```cpp\n    protected:\n    \u00a0\u00a0// Called when the game starts or when spawned\n    \u00a0\u00a0virtual void BeginPlay() override;\n    public:\n    \u00a0\u00a0// Called every frame\n    \u00a0\u00a0virtual void Tick(float DeltaTime) override;\n    ```", "```cpp\n    // Called when the game starts or when spawned\n    void APlayerProjectile::BeginPlay()\n    {\n    \u00a0\u00a0Super::BeginPlay();\n    }\n    // Called every frame\n    void APlayerProjectile::Tick(float DeltaTime)\n    {\n    \u00a0\u00a0Super::Tick(DeltaTime);\n    }\n    ```", "```cpp\n    public:\n    \u00a0\u00a0//Sphere collision component\n    \u00a0\u00a0UPROPERTY(VisibleDefaultsOnly, Category = Projectile)\n    \u00a0\u00a0class USphereComponent* CollisionComp;\n\n    private:\n    \u00a0\u00a0//Projectile movement component\n    \u00a0\u00a0UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = Movement, meta =   (AllowPrivateAccess = \"true\"))\n    \u00a0\u00a0class UProjectileMovementComponent* ProjectileMovement;\n    \u00a0\u00a0//Static mesh component\n    \u00a0\u00a0UPROPERTY(VisibleDefaultsOnly, Category = Projectile)\n    \u00a0\u00a0class UStaticMeshComponent* MeshComp;\n    ```", "```cpp\n    UFUNCTION()\n    void OnHit(UPrimitiveComponent* HitComp, AActor* OtherActor,   UPrimitiveComponent* OtherComp, FVector NormalImpulse, const FHitResult&   Hit);\n    ```", "```cpp\n    void APlayerProjectile::OnHit(UPrimitiveComponent* HitComp, AActor*   OtherActor, UPrimitiveComponent* OtherComp, FVector NormalImpulse, const   FHitResult& Hit)\n    {\n    }\n    ```", "```cpp\n    #include \"GameFramework/ProjectileMovementComponent.h\"\n    #include \"Components/SphereComponent.h\"\n    #include \"Components/StaticMeshComponent.h\"\n    ```", "```cpp\n    PrimaryActorTick.bCanEverTick = true;\n    ```", "```cpp\n    CollisionComp = CreateDefaultSubobject   <USphereComponent>(TEXT(\"SphereComp\"));\n    CollisionComp->InitSphereRadius(15.0f);\n    CollisionComp->BodyInstance.SetCollisionProfileName(\"BlockAll\");\n    CollisionComp->OnComponentHit.AddDynamic(this, &APlayerProjectile::OnHit);\n    ```", "```cpp\n    void APlayerProjectile::OnHit(UPrimitiveComponent* HitComp, AActor*   OtherActor, UPrimitiveComponent* OtherComp, FVector NormalImpulse, const   FHitResult& Hit)\n    {\n    }\n    ```", "```cpp\n    // Set as root component\n    RootComponent = CollisionComp;\n    ```", "```cpp\n    // Use a ProjectileMovementComponent to govern this projectile's movement\n    ProjectileMovement =   CreateDefaultSubobject<UProjectileMovementComponent>\n    (TEXT(\"ProjectileComp\"))  ;\n    ProjectileMovement->UpdatedComponent = CollisionComp;\n    ProjectileMovement->ProjectileGravityScale = 0.0f;\n    ProjectileMovement->InitialSpeed = 800.0f;\n    ProjectileMovement->MaxSpeed = 800.0f;\n    ```", "```cpp\n    MeshComp = CreateDefaultSubobject<UStaticMeshComponent>(TEXT(\"MeshComp\"));\n    MeshComp->AttachToComponent(RootComponent,   FAttachmentTransformRules::KeepWorldTransform);\n    ```", "```cpp\n    InitialLifeSpan = 3.0f;\n    ```", "```cpp\n    Location:(X=0.000000,Y=0.000000,Z=-10.000000)\n    Scale: (X=0.200000,Y=0.200000,Z=0.200000)\n    ```"]