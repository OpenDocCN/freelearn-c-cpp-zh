- en: Chapter 8. Accessing Databases
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。访问数据库
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Setting up SQL Driver for Qt
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Qt设置SQL驱动程序
- en: Connecting to a database
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接到数据库
- en: Writing basic SQL queries
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写基本的SQL查询
- en: Creating a login screen with Qt
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Qt创建登录界面
- en: Displaying information from a database on a model view
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在模型视图上显示来自数据库的信息
- en: Advanced SQL queries
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级SQL查询
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: '**SQL** stands for **Structured Query Language**, a special programming language
    used to manage data held in a relational database management system. A SQL server
    is a database system designed to use one of the many types of SQL programming
    language to manage its data.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: SQL代表结构化查询语言，这是一种特殊的编程语言，用于管理关系数据库管理系统中保存的数据。SQL服务器是一个设计用来使用多种类型的SQL编程语言来管理数据的数据库系统。
- en: Note
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you want to learn more about SQL, visit this link: [http://www.w3schools.com/sql/sql_intro.asp](http://www.w3schools.com/sql/sql_intro.asp).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解更多关于SQL的信息，请访问此链接：[http://www.w3schools.com/sql/sql_intro.asp](http://www.w3schools.com/sql/sql_intro.asp)。
- en: Qt supports several different types of SQL driver in the form of plugins/add-ons.
    However, it's very easy to integrate these drivers to your Qt project. We will
    learn how to do it in the following example.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Qt支持多种不同类型的SQL驱动程序，以插件/附加组件的形式提供。然而，将这些驱动程序集成到您的Qt项目中非常容易。我们将在以下示例中学习如何做到这一点。
- en: How to do it…
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Let''s set up our SQL server before we dive into Qt:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入Qt之前，让我们先设置我们的SQL服务器：
- en: Before setting up Qt for SQL, we need to install and set up a MySQL server.
    There are many ways you can install it. The first method is to download MySQL
    from the official website at [http://dev.mysql.com/downloads/mysql/](http://dev.mysql.com/downloads/mysql/)
    and install it. After that, you also need to install the MySQL Workbench from
    [http://dev.mysql.com/downloads/workbench/](http://dev.mysql.com/downloads/workbench/)
    to administrate your databases.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在为SQL设置Qt之前，我们需要安装和设置MySQL服务器。有许多安装方法。第一种方法是从官方网站[http://dev.mysql.com/downloads/mysql/](http://dev.mysql.com/downloads/mysql/)下载MySQL并安装。之后，您还需要从[http://dev.mysql.com/downloads/workbench/](http://dev.mysql.com/downloads/workbench/)安装MySQL
    Workbench来管理您的数据库。
- en: An alternative method is to install a third-party package that comes with MySQL
    and other useful applications, such as Apache web server, phpMyAdmin, and so on,
    all in a unified installer. Examples of such packages are XAMPP, [https://sourceforge.net/projects/xampp/](https://sourceforge.net/projects/xampp/),
    and AppServ, [https://www.appservnetwork.com/en/download/](https://www.appservnetwork.com/en/download/).
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另一种方法是安装一个带有MySQL和其他有用应用程序（如Apache Web服务器、phpMyAdmin等）的第三方软件包，所有这些都在一个统一的安装程序中。此类软件包的示例包括XAMPP，[https://sourceforge.net/projects/xampp/](https://sourceforge.net/projects/xampp/)，以及AppServ，[https://www.appservnetwork.com/en/download/](https://www.appservnetwork.com/en/download/)。
- en: In this example, we will install XAMPP. Open up your web browser, download the
    XAMPP installer from [https://sourceforge.net/projects/xampp/](https://sourceforge.net/projects/xampp/),
    and proceed to install it on your computer.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此示例中，我们将安装XAMPP。打开您的Web浏览器，从[https://sourceforge.net/projects/xampp/](https://sourceforge.net/projects/xampp/)下载XAMPP安装程序，并在计算机上安装它。
- en: Once you have installed XAMPP, open up XAMPP Control Panel and you should see
    something like this:![How to do it…](img/B02820_08_01.jpg)
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完XAMPP后，打开XAMPP控制面板，您应该看到类似于这样的界面：![如何做…](img/B02820_08_01.jpg)
- en: What we need is the Apache web server and the MySQL database server. Click the
    **Start** buttons next to the **Apache** and **MySQL** options on the control
    panel.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要的是Apache Web服务器和MySQL数据库服务器。在控制面板上，单击**Apache**和**MySQL**选项旁边的**启动**按钮。
- en: Once the servers have been started, open up your web browser and visit [http://localhost/phpmyadmin/](http://localhost/phpmyadmin/).
    You will see a web interface by the name of **PhpMyAdmin** that looks like this:![How
    to do it…](img/B02820_08_02.jpg)
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦服务器启动，打开您的Web浏览器并访问[http://localhost/phpmyadmin/](http://localhost/phpmyadmin/)。您将看到一个名为**PhpMyAdmin**的Web界面，看起来像这样：![如何做…](img/B02820_08_02.jpg)
- en: phpMyAdmin is a web-based utility that help you manage your MySQL databases,
    much like the official MySQL Workbench. In my opinion, phpMyAdmin is a lot simpler
    and better suited for beginners, which is why I recommend using it instead of
    MySQL Workbench.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: phpMyAdmin是一个基于Web的实用程序，可以帮助您管理MySQL数据库，就像官方的MySQL Workbench一样。在我看来，phpMyAdmin更简单，更适合初学者，这就是为什么我建议使用它而不是MySQL
    Workbench。
- en: By default, phpMyAdmin automatically logs in to MySQL using the default user
    account `root`, which is saved in its configuration file. We don't want to use
    that for security reasons. So the next thing we need to do is to create an account
    for ourselves. Go to the **Users** tab located at the top and once you're on that
    page, click **Add user** located at the bottom. Key in your desired username and
    password in the fields in the login information pane. Choose **Local** for the
    **Host** option for now. At the bottom, you will see options related to **Global
    privileges**; check the **Check All** option and click **Go**:![How to do it…](img/B02820_08_03.jpg)
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，phpMyAdmin会自动使用默认用户帐户`root`登录到MySQL，该用户帐户保存在其配置文件中。出于安全原因，我们不想使用它。因此，我们需要做的下一件事是为自己创建一个帐户。转到顶部的**用户**选项卡，一旦在该页面上，单击底部的**添加用户**。在登录信息窗格的字段中输入您想要的用户名和密码。暂时选择**本地**作为**主机**选项。在底部，您将看到与**全局权限**相关的选项；选中**全部检查**选项，然后单击**Go**：![如何做…](img/B02820_08_03.jpg)
- en: Now that you have created your user account, go to XAMPP Control Panel and click
    **Stop** for both Apache and MySQL. Then, click the **Config** button on the **Apache**
    column and select the **phpMyAdmin (config.inc.php)** option. After that, the
    `config.inc.php` file will be opened with your choice of text editor.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您已经创建了用户帐户，请转到XAMPP控制面板，单击Apache和MySQL的**停止**。然后，单击**Apache**列上的**Config**按钮，并选择**phpMyAdmin（config.inc.php）**选项。之后，`config.inc.php`文件将以您选择的文本编辑器打开。
- en: 'Search for the following line in `config.inc.php` and change the word `config`
    to `cookie`:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`config.inc.php`中搜索以下行，并将单词`config`更改为`cookie`：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: After that, start Apache and MySQL again by clicking the **Start** buttons.
    This way, we force phpMyAdmin to reload its configurations and apply the changes.
    Go to phpmyAdmin again from your web browser, and this time around, a login screen
    should appear on the screen:![How to do it…](img/B02820_08_04.jpg)
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，通过单击**启动**按钮再次启动Apache和MySQL。这样，我们强制phpMyAdmin重新加载其配置并应用更改。再次从Web浏览器转到phpmyAdmin，这次应该会在屏幕上显示登录界面：![操作方法…](img/B02820_08_04.jpg)
- en: Log in to phpMyAdmin, then click on the **New** link located on the side bar:![How
    to do it…](img/B02820_08_05.jpg)
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到phpMyAdmin，然后单击侧边栏上的**新建**链接：![操作方法…](img/B02820_08_05.jpg)
- en: Key in your desired database name and press the **Create** button. Once it's
    been created, the database name will appear on the side bar. Click on the database
    name and it will bring you to another page, which displays a message, **No tables
    found in database**. Under the message, you can create your first data table by
    filling in your desired table name and the number of columns for the table:![How
    to do it…](img/B02820_08_06.jpg)
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入您想要的数据库名称，然后按**创建**按钮。创建完成后，数据库名称将显示在侧边栏上。单击数据库名称，将带您到另一个页面，显示消息**数据库中找不到表**。在消息下方，您可以通过填写所需的表名和表的列数来创建您的第一个数据表：![操作方法…](img/B02820_08_06.jpg)
- en: 'After you click the **Go** button, you will be brought to another page where
    you will set up the new table you''re going to create. In this example, we created
    an `employee` table that consists of five columns of data: `id`, `name`, `age`,
    `gender`, and `married`:![How to do it…](img/B02820_08_07.jpg)'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**Go**按钮后，您将被带到另一个页面，您将在其中设置要创建的新表。在本例中，我们创建了一个包含五列数据的`employee`表：`id`、`name`、`age`、`gender`和`married`：![操作方法…](img/B02820_08_07.jpg)
- en: Once you are done with that, click **Save** and now you will be able to see
    the `employee` table name appear on the side bar. We have successfully installed
    MySQL and set up our first database and data table.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，单击**保存**，现在您将能够在侧边栏上看到`employee`表名。我们已成功安装了MySQL并设置了我们的第一个数据库和数据表。
- en: After that, we need to insert data into the database from phpMyAdmin so that
    we will be able to retrieve it in the next example. Click on the **Insert** tab
    while you're still in the `employee` table; you will then be brought to another
    page for inserting new data into the `employee` table:![How to do it…](img/B02820_08_08.jpg)
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们需要从phpMyAdmin向数据库插入数据，以便我们能够在下一个示例中检索它。在`employee`表中单击**插入**选项卡；然后将带您到另一个页面，用于向`employee`表中插入新数据：![操作方法…](img/B02820_08_08.jpg)
- en: Next, we will proceed to set up the SQL driver for our Qt project. Basically,
    all you need to do is to go to your Qt installation folder and look for the `sqldrivers`
    folder. For example, mine is located at `C:\Qt\5.5\mingw492_32\plugins\sqldrivers`.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将继续为我们的Qt项目设置SQL驱动程序。基本上，您只需要转到Qt安装文件夹，然后查找`sqldrivers`文件夹。例如，我的位于`C:\Qt\5.5\mingw492_32\plugins\sqldrivers`。
- en: Copy the entire `sqldrivers` folder to your project's build directory. You can
    remove the DLL files that are not relevant to the SQL server you're running. In
    our case, since we're using a MySQL server, we can delete everything except `qsqlmysql.dll`
    and `qsqlmysqld.dll`. The DLL file with the letter `d` at the back is for debug
    builds only, while the other one is for release builds. Put those DLL files in
    their respective build directories, for example, `builds/debug/sqldrivers/qsqlmysqld.dll`
    for debug builds and `builds/release/sqldrivers/qsqlmysql.dll` for release builds.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将整个`sqldrivers`文件夹复制到项目的构建目录中。您可以删除与您正在运行的SQL服务器不相关的DLL文件。在我们的情况下，由于我们使用的是MySQL服务器，我们可以删除除了`qsqlmysql.dll`和`qsqlmysqld.dll`之外的所有内容。带有后面带有字母`d`的DLL文件仅用于调试构建，而另一个用于发布构建。将这些DLL文件放在各自的构建目录中，例如，调试构建的`builds/debug/sqldrivers/qsqlmysqld.dll`和发布构建的`builds/release/sqldrivers/qsqlmysql.dll`。
- en: The DLL files mentioned in the previous step are the drivers that enable Qt
    to communicate with different types of SQL architecture. You may also need the
    DLL file of the SQL client library in order for the driver to work. In our case,
    we need `libmysql.dll` to be located in the same directory as our program's executable.
    You can either get it from the installation directory of MySQL or download the
    Connector/C++ package from the official website, [https://dev.mysql.com/downloads/connector/cpp/](https://dev.mysql.com/downloads/connector/cpp/).
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上一步提到的DLL文件是使Qt能够与不同类型的SQL架构进行通信的驱动程序。您可能还需要SQL客户端库的DLL文件才能使驱动程序正常工作。在我们的情况下，我们需要`libmysql.dll`位于与我们程序可执行文件相同的目录中。您可以从MySQL的安装目录获取它，或者从官方网站[https://dev.mysql.com/downloads/connector/cpp/](https://dev.mysql.com/downloads/connector/cpp/)下载Connector/C++包。
- en: How it works…
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: Qt provides us with SQL drivers so that we can easily connect to different types
    of SQL servers without implementing them ourselves.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Qt为我们提供了SQL驱动程序，以便我们可以轻松地连接到不同类型的SQL服务器，而无需自己实现它们。
- en: Currently, Qt officially supports SQLite, MySQL, ODBC, and PostgreSQL. SQL architectures
    that are forks from one of the supported architectures, such as MariaDB (a fork
    of MySQL), may still compatible with Qt without much problem.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，Qt官方支持SQLite、MySQL、ODBC和PostgreSQL。作为受支持架构之一的分支的SQL架构，例如MariaDB（MySQL的一个分支），可能仍然与Qt兼容，而不会出现太多问题。
- en: If you are using an architecture that isn't supported by Qt, you can still interact
    with your SQL database indirectly by sending an HTTP request using QNetworkAccessManager
    to your backend script (such as PHP, ASP, JSP, and so on), which can then communicate
    with the database.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的架构不受Qt支持，您仍然可以通过使用QNetworkAccessManager向后端脚本（如PHP、ASP、JSP等）发送HTTP请求来间接地与您的SQL数据库进行交互，然后后端脚本可以与数据库进行通信。
- en: If you only need a simple file-based database and don't plan to use a server-based
    database, SQLite is a good choice for you.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您只需要一个简单的基于文件的数据库，并且不打算使用基于服务器的数据库，那么SQLite是一个很好的选择。
- en: Connecting to a database
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接到数据库
- en: In this recipe, we will learn how to connect to our SQL database using Qt's
    SQL module.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将学习如何使用Qt的SQL模块连接到我们的SQL数据库。
- en: How to do it…
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作方法…
- en: 'Connecting to SQL server in Qt is really simple:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在Qt中连接到SQL服务器非常简单：
- en: First of all, open up Qt Creator and create a new **Qt Widgets Application**
    project.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，打开Qt Creator并创建一个新的**Qt Widgets Application**项目。
- en: 'Open up your project file (`.pro`) and add the SQL module to your project,
    like so:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的项目文件（`.pro`）并将SQL模块添加到你的项目中，就像这样：
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Next, open up `mainwindow.ui` and drag seven label widgets, a combo box, and
    a checkbox to the canvas. Set the text properties of four of the labels to `Name:`,
    `Age:`, `Gender:`, and `Married:`. Then, set the `objectName` properties of the
    rest to `name`, `age`, `gender`, and `married`. There is no need to set the object
    name for the previous four labels because they're for display purposes only:![How
    to do it…](img/B02820_08_09.jpg)
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开`mainwindow.ui`并将七个标签小部件、一个组合框和一个复选框拖到画布上。将四个标签的文本属性设置为`Name:`，`Age:`，`Gender:`和`Married:`。然后，将其余的`objectName`属性设置为`name`，`age`，`gender`和`married`。对于前四个标签，不需要设置对象名称，因为它们仅用于显示目的：![如何做...](img/B02820_08_09.jpg)
- en: 'After that, open up `mainwindow.h` and add the following headers below the
    `QMainWindow` header:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，打开`mainwindow.h`并在`QMainWindow`头文件下添加以下头文件：
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, open up `mainwindow.cpp` and insert the following code to the class constructor:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，打开`mainwindow.cpp`并在类构造函数中插入以下代码：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Compile and run your project now and you should get something like the following:![How
    to do it…](img/B02820_08_10.jpg)
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在编译和运行你的项目，你应该会得到类似以下的结果：![如何做...](img/B02820_08_10.jpg)
- en: How it works…
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The previous example shows you how to connect to your SQL database using the
    `QSqlDatabase` class derived from the SQL module. You won't be able to access
    any of the classes related to SQL without adding the module to your Qt project.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个例子向你展示了如何使用从SQL模块派生的`QSqlDatabase`类连接到你的SQL数据库。如果没有将模块添加到Qt项目中，你将无法访问与SQL相关的任何类。
- en: We must tell Qt which SQL architecture we are running by mentioning it when
    calling the `addDatabase()` function. Options supported by Qt are QSQLITE, QMYSQL,
    QMYSQL3, QODBC, QODBC3, QPSQL, and QPSQL7
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须告诉Qt我们正在运行哪个SQL架构，当调用`addDatabase()`函数时提到它。Qt支持的选项有QSQLITE、QMYSQL、QMYSQL3、QODBC、QODBC3、QPSQL和QPSQL7
- en: 'If you encounter an error message that says, **QSqlDatabase: QMYSQL driver
    not loaded**, then you should again check whether the DLL files are placed in
    the correct directory.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '如果遇到错误消息说**QSqlDatabase: QMYSQL driver not loaded**，那么你应该再次检查DLL文件是否放在正确的目录中。'
- en: We can send our SQL statements to the database through the `QSqlQuery` class,
    and wait for it to return the results, which usually are either the data you requested
    or error messages due to invalid statements.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过`QSqlQuery`类将我们的SQL语句发送到数据库，并等待它返回结果，通常是你请求的数据或由于无效语句而产生的错误消息。
- en: If there is any data coming from the database server, it will all be stored
    in the `QSqlQuery` class. All you need to do to retrieve this data is to do a
    `while` loop on the `QSqlQuery` class to check for all existing records, and retrieve
    them by calling the `value()` function.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有任何来自数据库服务器的数据，它将全部存储在`QSqlQuery`类中。你只需要在`QSqlQuery`类上进行`while`循环，检查所有现有记录，并通过调用`value()`函数检索它们。
- en: Writing basic SQL queries
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写基本的SQL查询
- en: In the previous example, we wrote our very first SQL query, which involves the
    `SELECT` statement. This time, we will learn how to use some other SQL statements,
    such as `INSERT`, `UPDATE`, and `DELETE`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个例子中，我们编写了我们的第一个SQL查询，涉及`SELECT`语句。这一次，我们将学习如何使用其他一些SQL语句，比如`INSERT`，`UPDATE`和`DELETE`。
- en: How to do it…
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s create a simple program that demonstrates basic SQL query commands by
    following these steps:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个简单的程序，通过以下步骤演示基本的SQL查询命令：
- en: We can use our previous project files, but there are couples of things we need
    to change. First, open up `mainwindow.ui` and replace the labels for name and
    age with line edit widgets. Then, add three buttons to the canvas and call them
    **Update**, **Insert**, and **Delete**:![How to do it…](img/B02820_08_11.jpg)
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用之前的项目文件，但有一些需要更改的地方。首先，打开`mainwindow.ui`，用行编辑小部件替换名称和年龄的标签。然后，在画布上添加三个按钮，并将它们命名为**更新**，**插入**和**删除**：![如何做...](img/B02820_08_11.jpg)
- en: 'After that, open up `mainwindow.h` and add the following variables under private
    inheritance:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，打开`mainwindow.h`并在私有继承下添加以下变量：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, open up `mainwindow.cpp` and go to the class constructor. It is still
    pretty much the same as the previous example, except we store the database connection
    status in a Boolean variable called `connected` and we also obtain the ID of the
    data from the database and store it to an integer variable called `currentID`:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开`mainwindow.cpp`并转到类构造函数。它与上一个例子基本相同，只是我们将数据库连接状态存储在名为`connected`的布尔变量中，并且还获取来自数据库的数据的ID并将其存储到名为`currentID`的整数变量中：
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then, go to `mainwindow.ui` and right-click on one of the buttons we added
    to the canvas in step 1\. Select **Go to slot…** and click **OK**. Repeat these
    steps on the other button, and now you should see three slot functions being added
    to both your `mainwindow.h` and `mainwindow.cpp`:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，转到`mainwindow.ui`，右键单击我们在步骤1中添加到画布上的一个按钮。选择**转到槽...**，然后单击**确定**。在另一个按钮上重复这些步骤，现在你应该看到三个槽函数被添加到你的`mainwindow.h`和`mainwindow.cpp`中：
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After that, open up `mainwindow.cpp` and we will declare what the program will
    do when we click on the **Update** button:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，打开`mainwindow.cpp`，我们将声明当点击**更新**按钮时程序将做什么：
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Once you have done that, we will proceed to declare what will happen when the
    **Insert** button is clicked:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，我们将继续声明**插入**按钮被点击时会发生什么：
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'After that, we also declare what will happen when the **Delete** button is
    clicked:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们还声明了**删除**按钮被点击时会发生什么：
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Lastly, call `QSqlDatabase::close()` at the class destructor to properly terminate
    the SQL connection before exiting the program:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在类析构函数中调用`QSqlDatabase::close()`以正确终止程序退出前的SQL连接：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Compile and run the program now and you should be able to select the default
    data from the database; then you can choose to update it or delete it from the
    database. You can also insert new data into the database by clicking the **Insert**
    button. You can use phpMyAdmin to check whether the data is being altered correctly
    or not:![How to do it…](img/B02820_08_12.jpg)
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在编译并运行程序，您应该能够从数据库中选择默认数据；然后您可以选择更新或从数据库中删除它。您还可以通过单击**插入**按钮将新数据插入到数据库中。您可以使用phpMyAdmin来检查数据是否被正确修改：![操作步骤…](img/B02820_08_12.jpg)
- en: How it works…
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: It's very important to check whether or not the database is connected in the
    first place before we proceed to send a SQL query to the database. Therefore,
    we keep that status in a variable and use it to check before sending out any queries.
    This, however, is not recommended for complex programs that are kept open for
    long periods of time, as the database might get disconnected during these periods,
    and a fixed variable may not be accurate. In that case, it's better to check the
    actual status by calling `QSqlDatabase::isOpen()`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在向数据库发送SQL查询之前，检查数据库是否连接是非常重要的。因此，我们将状态保存在一个变量中，并在发送任何查询之前使用它进行检查。然而，对于长时间保持打开的复杂程序，不建议使用固定变量，因为数据库在这些时间段内可能会断开连接，固定变量可能不准确。在这种情况下，最好通过调用`QSqlDatabase::isOpen()`来检查实际状态。
- en: The `currentID` variable is used to save the ID of the current data you obtained
    from the database. When you want to update the data or delete it from the database,
    this variable is crucial for letting the database know which data you're trying
    to update or delete. If you set your database table correctly, MySQL will treat
    each item of data as a unique entry, so you can be sure that no repeated ID will
    be produced in the database when new data is being saved.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`currentID`变量用于保存从数据库中获取的当前数据的ID。当您想要更新数据或从数据库中删除数据时，这个变量对于让数据库知道您要更新或删除的数据至关重要。如果您正确设置了数据库表，MySQL将把每个数据项视为一个唯一条目，因此在保存新数据时，可以确保不会产生重复的ID。'
- en: After inserting new data into the database, we call `QSqlQuery::lastInsertId()`
    to obtain the ID of the new data and save it as a `currentID` variable, so that
    it becomes the current data that we can update or delete from the database.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在将新数据插入到数据库后，我们调用`QSqlQuery::lastInsertId()`来获取新数据的ID，并将其保存为`currentID`变量，以便它成为我们可以从数据库中更新或删除的当前数据。
- en: It is a good habit to test your SQL queries on phpMyAdmin first before using
    them in Qt. You can instantly find out whether your SQL statements are correct
    or incorrect, instead of waiting for your project to get built, then try it out,
    then rebuild again. As a programmer, we must work in the most efficient way. Work
    hard, and work smart.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用它们在Qt中之前，先在phpMyAdmin上测试您的SQL查询是一个很好的习惯。您可以立即发现您的SQL语句是正确还是错误，而不是等待项目构建，然后尝试，然后再次重建。作为程序员，我们必须以最有效的方式工作。努力工作，聪明工作。
- en: Creating a login screen with Qt
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Qt创建登录界面
- en: In this recipe, we will learn how put our knowledge to use and create a functional
    login screen using Qt and MySQL.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将学习如何运用我们的知识，使用Qt和MySQL创建一个功能性的登录界面。
- en: How to do it…
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤…
- en: 'Create your first functional login screen by following these steps:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以下步骤创建您的第一个功能性登录界面：
- en: First, open up a web browser and go to phpMyAdmin. We will create a new data
    table called `user`, which looks like this:![How to do it…](img/B02820_08_13.jpg)
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，打开一个网页浏览器，转到phpMyAdmin。我们将创建一个名为`user`的新数据表，如下所示：![操作步骤…](img/B02820_08_13.jpg)
- en: Next, insert our first item of data into the newly created table and set the
    `employeeID` to the ID of an existing employee's data. This way, the user account
    we created will be linked to the data of one of the employees:![How to do it…](img/B02820_08_14.jpg)
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将我们的第一条数据插入到新创建的表中，并将`employeeID`设置为现有员工数据的ID。这样，我们创建的用户帐户将与其中一个员工的数据相关联：![操作步骤…](img/B02820_08_14.jpg)
- en: After that, open up Qt Creator and create a new **Qt Widgets Application** project.
    We will start off with `mainwindow.ui`. First, place a stacked widget on the canvas
    and make sure it contains two pages. Then, set up the two pages in the stacked
    widget like this:![How to do it…](img/B02820_08_15.jpg)
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，打开Qt Creator并创建一个新的**Qt Widgets Application**项目。我们将从`mainwindow.ui`开始。首先，在画布上放置一个堆叠窗口，并确保它包含两个页面。然后，设置堆叠窗口中的两个页面如下：![操作步骤…](img/B02820_08_15.jpg)
- en: Then, on the first page of the stacked widget, click the **Edit Tab Order**
    button on top of the widget so that we can adjust the order of the widgets in
    our program:![How to do it…](img/B02820_08_16.jpg)
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在堆叠窗口的第一页，单击窗口顶部的**编辑标签顺序**按钮，以便我们可以调整程序中窗口部件的顺序：![操作步骤…](img/B02820_08_16.jpg)
- en: Once you click the **Edit Tab Order** button, you will see some numbers appear
    on top of each widget in the canvas. Make sure the numbers look like this. Otherwise,
    click on the numbers to change their order. We only do this for the first page
    of the stacked widget; it's okay to keep the second page as it is:![How to do
    it…](img/B02820_08_17.jpg)
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**编辑标签顺序**按钮后，您将看到画布上每个部件顶部出现了一些数字。确保数字看起来像这样。否则，单击数字以更改它们的顺序。我们只对堆叠窗口的第一页进行此操作；第二页保持原样即可：![操作步骤…](img/B02820_08_17.jpg)
- en: Next, right-click on the **Login** button and select **Go to slot…**. Then,
    make sure the **clicked()** option is selected and press **OK**. Qt will then
    create a slot function for you in your project source files. Repeat this step
    for the **Log Out** button as well.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，右键单击**登录**按钮，选择**转到槽…**。然后，确保选择**clicked()**选项并按**确定**。Qt将在项目源文件中为您创建一个槽函数。同样的步骤也要对**登出**按钮进行操作。
- en: 'Then, open up `mainwindow.h` and add the following headers after the line `#include
    <QMainWindow>`:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，打开`mainwindow.h`，在`#include <QMainWindow>`后添加以下头文件：
- en: '[PRE11]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'After that, add the following variable to `mainwindow.h`:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，在`mainwindow.h`中添加以下变量：
- en: '[PRE12]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Once we''re done with that, let''s open up `mainwindow.cpp` and put this code
    in the class constructor:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，让我们打开`mainwindow.cpp`，并将以下代码放入类构造函数中：
- en: '[PRE13]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'After that, we will define what will happen if the **Login** button is clicked:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们将定义**Login**按钮被点击时会发生什么：
- en: '[PRE14]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then, we also define what will happen if the **Log Out** button is clicked:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们还定义了**Log Out**按钮被点击时会发生什么：
- en: '[PRE15]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Lastly, close the database when the main window is closed:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在主窗口关闭时关闭数据库：
- en: '[PRE16]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Compile and run the program now and you should be able to log in with the dummy
    account. After you have logged in, you should be able to see the dummy employee
    information linked to the user account. You can also log out by clicking on the
    **Log Out** button:![How to do it…](img/B02820_08_18.jpg)
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在编译并运行程序，您应该能够使用虚拟帐户登录。登录后，您应该能够看到与用户帐户关联的虚拟员工信息。您也可以通过单击**Log Out**按钮注销：![操作方法…](img/B02820_08_18.jpg)
- en: How it works…
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: In this example, we select data from the `user` table that matches the username
    and password that we have inserted into the text fields. If nothing is found,
    it means we have provided an invalid username or password. Otherwise, obtain the
    `employeeID` data from the user account and do another SQL query to look for information
    from the `employee` table that matches the `employeeID` variable. Then, display
    the data accordingly to the UI of our program.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们从`user`表中选择与我们插入到文本字段中的用户名和密码匹配的数据。如果找不到任何内容，这意味着我们提供了无效的用户名或密码。否则，从用户帐户中获取`employeeID`数据，并进行另一个SQL查询，以查找与`employeeID`变量匹配的`employee`表中的信息。然后，根据我们程序的UI显示数据。
- en: We must set the widget order in the **Edit Tab Order** mode so that when the
    program has started, the first widget that gets focused on is the username line
    edit widget. If the user presses on the **TAB** button on the keyboard, the focus
    should switch to the second widget, which is the password line edit. Incorrect
    widget order will totally ruin the user experience and drive away your potential
    users.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须在**编辑标签顺序**模式下设置小部件顺序，这样当程序启动时，第一个获得焦点的小部件是用户名行编辑小部件。如果用户在键盘上按下**TAB**按钮，焦点应切换到第二个小部件，即密码行编辑。错误的小部件顺序将完全破坏用户体验，并驱赶潜在用户。
- en: Do make sure that the **echoMode** option of the password line edit is set to
    `Password`. That setting will hide the actual password inserted into the line
    edit and replace it with dot symbols for security purposes.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 确保密码行编辑的**echoMode**选项设置为`Password`。该设置将隐藏插入到行编辑中的实际密码，并用点符号替换以确保安全。
- en: Displaying information from a database on a model view
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在模型视图上显示来自数据库的信息
- en: In this recipe, we will learn how to display multiple sets of data obtained
    from our SQL database on a model view in our program.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，我们将学习如何在程序中的模型视图上显示从SQL数据库获取的多组数据。
- en: How to do it…
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作方法…
- en: 'Follow these steps to display information from a database on a model view widget:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤在模型视图小部件上显示来自数据库的信息：
- en: We will be using the database table called `employee`, which we used in the
    previous example. This time, we need a lot more data in the `employee` table.
    Open up your web browser and log in to your phpMyAdmin control panel. Add data
    for a few more employees so that we can display it later in our program:![How
    to do it…](img/B02820_08_19.jpg)
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用名为`employee`的数据库表，这是我们在上一个示例中使用的。这次，我们需要在`employee`表中添加更多数据。打开您的Web浏览器并登录到phpMyAdmin控制面板。为几个员工添加数据，以便稍后在我们的程序中显示：![操作方法…](img/B02820_08_19.jpg)
- en: After that, open up Qt Creator, create a new **Qt Widgets Application** project,
    and then add the SQL module to your project.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，打开Qt Creator，创建一个新的**Qt Widgets应用程序**项目，然后将SQL模块添加到您的项目中。
- en: Next, open up `mainwindow.ui` and add a table widget (not table view) from **Item
    Widget (Item-Based)** under the **Widget** box pane. Select the main window on
    the canvas and click on either the **Layout Vertically** or **Layout Horizontally**
    button to make the table widget stick to the size of the main window, even when
    it's resized:![How to do it…](img/B02820_08_20.jpg)
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开`mainwindow.ui`并从**小部件**框窗格下的**基于项目的小部件**中添加一个表格小部件（而不是表格视图）。在画布上选择主窗口，然后单击**垂直布局**或**水平布局**按钮，使表格小部件固定在主窗口的大小上，即使在调整大小时也是如此：![操作方法…](img/B02820_08_20.jpg)
- en: After that, double-click on the table widget and a window will then appear.
    Under the **Columns** tab, add five items by clicking on the **+** button at the
    top-left corner. Name the items `ID`, `Name`, `Age`, `Gender`, and `Married`.
    Click **OK** when you're done:![How to do it…](img/B02820_08_21.jpg)
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，双击表格小部件，然后会出现一个窗口。在**列**选项卡下，通过单击左上角的**+**按钮添加五个项目。将项目命名为`ID`、`Name`、`Age`、`Gender`和`Married`。完成后，单击**OK**：![操作方法…](img/B02820_08_21.jpg)
- en: Then, right-click on the table widget and select **Go to slot…** in the pop-up
    menu. Scroll all the way down, select the **itemChanged(QTableWidgetItem*)** option
    in the pop-up window, and press **OK**. A slot function will be created in both
    your source files.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，右键单击表格小部件，在弹出菜单中选择**转到槽…**。滚动到最底部，在弹出窗口中选择**itemChanged(QTableWidgetItem*)**选项，然后单击**OK**。将在您的源文件中创建一个槽函数。
- en: 'Open up `mainwindow.h` and add these private variables to our `MainWindow`
    class:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`mainwindow.h`并将这些私有变量添加到我们的`MainWindow`类中：
- en: '[PRE17]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We also add the following class headers to `mainwindow.h`:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还将以下类头文件添加到`mainwindow.h`中：
- en: '[PRE18]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Once you''re done with that, open up `mainwindow.cpp` and we''re going to write
    tons of code there. First, we need to declare what will happen when the program
    is started. Add the following code to the constructor of the `MainWindow` class:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，打开`mainwindow.cpp`，我们将在那里编写大量代码。首先，我们需要声明程序启动时会发生什么。将以下代码添加到`MainWindow`类的构造函数中：
- en: '[PRE19]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'After that, declare what will happen when an item of the table widget has been
    edited. Add the following code to the slot function called `on_tableWidget_itemChanged()`:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，声明当表格小部件的项目被编辑时会发生什么。将以下代码添加到名为`on_tableWidget_itemChanged()`的槽函数中：
- en: '[PRE20]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Lastly, close the database at the class destructor:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在类析构函数中关闭数据库：
- en: '[PRE21]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Compile and run the example now and you should be getting something like this:![How
    to do it…](img/B02820_08_22.jpg)
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在编译并运行示例，你应该会得到类似这样的结果：![How to do it…](img/B02820_08_22.jpg)
- en: How it works…
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: A table widget is similar to the one you see in spreadsheet applications such
    as Microsoft Excel and Open Office Calc. In contrast with other types of model
    viewers such as list view or tree view, table view (or table widget) is a two-dimensional
    model viewer, which displays data in the form of rows and columns.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 表部件类似于电子表格应用程序中看到的表格，比如Microsoft Excel和Open Office Calc。与其他类型的模型视图（如列表视图或树视图）相比，表视图（或表部件）是一个二维模型视图，以行和列的形式显示数据。
- en: The main difference between a table view and table widget in Qt is that a table
    widget is built on top of a table view class, which means a table widget is easier
    to use and more suitable for beginners. However, a table widget is less flexible
    and tends to be less scalable than a table view, which is not the best choice
    if you want to customize your table.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在Qt中，表视图和表部件的主要区别在于表部件是建立在表视图类之上的，这意味着表部件更容易使用，更适合初学者。然而，表部件的灵活性较差，往往比表视图不够可扩展，如果你想要自定义你的表格，这并不是最佳选择。
- en: After retrieving data from MySQL, we created a `QTableWidgetItem` item for each
    of the data items and set which column and row should be added to the table widget.
    Before adding an item to the table widget, we must increase the row count of the
    table by calling `QTableWidget::setRowCount()`. We can also get the current row
    count of the table widget by simply calling `QTableWidget::rowCount()`.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 从MySQL中检索数据后，我们为每个数据项创建了一个`QTableWidgetItem`项目，并设置应该添加到表部件的哪一列和哪一行。在将项目添加到表部件之前，我们必须通过调用`QTableWidget::setRowCount()`来增加表的行数。我们也可以通过简单地调用`QTableWidget::rowCount()`来获取表部件的当前行数。
- en: The first column from the left is hidden from view because we only use it to
    save the ID of the data so that we can use it to update the database when one
    of the data items in its row has changed.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 从左边的第一列被隐藏了，因为我们只是用它来保存数据的ID，这样我们就可以在数据项发生变化时使用它来更新数据库。
- en: The slot function `on_tableWidget_itemChanged()` will be called when the data
    in one of the cells has changed. It will not only get called when you edit the
    data in the cell, but also when the data is first added to the table after being
    retrieved from the database. To ensure that this function is only triggered when
    we edit the data, we used a Boolean variable called `hasInit` to check whether
    we have done the initialization process (adding the first batch of data to the
    table) or not. If `hasInit` is `false`, ignore the function call.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 当单元格中的数据发生变化时，槽函数`on_tableWidget_itemChanged()`将被调用。它不仅在你编辑单元格中的数据时被调用，而且在从数据库中检索到数据后首次添加到表中时也会被调用。为了确保这个函数只在我们编辑数据时触发，我们使用了一个名为`hasInit`的布尔变量来检查我们是否已经完成了初始化过程（向表中添加了第一批数据）或者没有。如果`hasInit`是`false`，则忽略函数调用。
- en: To prevent users from entering a totally irrelevant type of data, such as inserting
    alphabets into a supposedly numerical-only data cell, we checked manually whether
    the data is anything close to what we'd expected when it's being edited. Revert
    it to a default value if it doesn't come close to anything considered as valid.
    This is of course a simple hack, which does the job but is not the most professional
    method. Alternatively, you can try to create a new class that inherits the `QItemDelegate`
    class and define how your model view should behave. Then, call `QTableWidget::setItemDelegate()`
    to apply the class to your table widget.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止用户输入完全无关的数据类型，比如将字母插入到本应为数字的数据单元中，我们在数据被编辑时手动检查数据是否接近我们期望的内容。如果数据与有效数据差距较大，将其恢复为默认值。当然，这是一个简单的技巧，能够完成工作，但并不是最专业的方法。或者，你可以尝试创建一个继承了`QItemDelegate`类的新类，并定义你的模型视图应该如何行为。然后，调用`QTableWidget::setItemDelegate()`将该类应用到你的表部件上。
- en: Advanced SQL queries
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级SQL查询
- en: By following this recipe, we will learn how to use advanced SQL statements such
    as `INNER JOIN`, `COUNT`, `LIKE`, `DISTINCT`, and so on.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循这个步骤，我们将学习如何使用高级SQL语句，比如`INNER JOIN`、`COUNT`、`LIKE`、`DISTINCT`等等。
- en: How to do it…
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'You can do a lot more than just perform simple queries of SQL database:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以做的不仅仅是执行简单的SQL数据库查询：
- en: First of all, we need to add a few tables to our database before we can dive
    into the programming part. Open up your web browser and access your phpMyAdmin.
    We need several tables for this example to work:![How to do it…](img/B02820_08_23.jpg)
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要在数据库中添加一些表，然后才能开始编程部分。打开你的网络浏览器，访问你的phpMyAdmin。我们需要为这个示例添加几个表才能使其工作：![How
    to do it…](img/B02820_08_23.jpg)
- en: I will show you the structure of each of the tables required for this project
    and the dummy data inserted to the tables for testing. The first table is called
    `branch`, which is used to store the IDs and names of different branches of the
    dummy company:![How to do it…](img/B02820_08_24.jpg)
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我将向你展示这个项目所需的每个表的结构以及插入到表中用于测试的虚拟数据。第一个表叫做`branch`，用于存储虚拟公司不同分支的ID和名称：![How
    to do it…](img/B02820_08_24.jpg)
- en: Secondly, we have the `department` table, which stores the IDs and names of
    different departments of the dummy company, which is also linked to the branch
    data by the branch IDs:![How to do it…](img/B02820_08_25.jpg)
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 其次，我们有一个`department`表，用于存储虚拟公司不同部门的ID和名称，它也与分支数据通过分支ID相关联：![How to do it…](img/B02820_08_25.jpg)
- en: Next, we also have an `employee` table, which stores the information of all
    the employees in the dummy company. This table is similar to the one we used in
    the previous examples, except it has two more extra columns, namely `birthday`
    and `departmentID`:![How to do it…](img/B02820_08_26.jpg)
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们还有一个`employee`表，用于存储虚拟公司所有员工的信息。这个表与我们在之前示例中使用的表类似，只是多了两列，分别是`birthday`和`departmentID`：![How
    to do it…](img/B02820_08_26.jpg)
- en: Other than that, we also have a table called `log`, which contains dummy records
    of the login time for each employee. The `loginTime` column can be a `timestamp`
    or `date time` variable type:![How to do it…](img/B02820_08_27.jpg)
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除此之外，我们还有一个名为`log`的表，其中包含每个员工的登录时间的虚拟记录。`loginTime`列可以是`timestamp`或`date time`变量类型：![操作步骤...](img/B02820_08_27.jpg)
- en: Lastly, we have the `user` table that we also used in the previous examples:![How
    to do it…](img/B02820_08_28.jpg)
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们还有在前面的示例中使用的`user`表：![操作步骤...](img/B02820_08_28.jpg)
- en: We are done with the database; let's move on to Qt. Open up Qt Creators, and
    this time, instead of choosing **Qt Widgets Application**, we create **Qt Console
    Application**:![How to do it…](img/B02820_08_29.jpg)
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经完成了数据库；让我们继续进行Qt。打开Qt Creators，这一次，不再选择**Qt Widgets Application**，而是创建**Qt
    Console Application**：![操作步骤...](img/B02820_08_29.jpg)
- en: 'After you have done creating your console project, open up your project file
    (`.pro`) and add the SQL module to your project:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建完控制台项目后，打开项目文件（`.pro`）并将SQL模块添加到项目中：
- en: '[PRE22]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Next, open up `main.cpp` and add the following header files to the top of the
    source file:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开`main.cpp`并在源文件顶部添加以下头文件：
- en: '[PRE23]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Then, add the following function to display employees who are above 30 years
    old:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，添加以下函数来显示年龄超过30岁的员工：
- en: '[PRE24]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'After that, add this function for displaying the department and branch information
    of each employee:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，添加这个函数来显示每个员工的部门和分支信息：
- en: '[PRE25]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Next, add this function, which displays employees who are working in the `New
    York` branch and are below 30 years old:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，添加这个函数，显示在`纽约`分支工作且年龄不到30岁的员工：
- en: '[PRE26]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Then, add this function which counts the total number of female employees in
    the dummy company:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，添加这个函数来计算虚拟公司中女性员工的总数：
- en: '[PRE27]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Once you''re done with that, we will add another function, which filters the
    employee list and only displays those who have name that starts with `Ja`:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，我们将添加另一个函数，过滤员工列表，并仅显示以`Ja`开头的员工：
- en: '[PRE28]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Next, we also add another function, which displays employees who have their
    birthdays in `August`:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们还添加另一个函数，显示在`8月`份生日的员工：
- en: '[PRE29]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Then, we add the last function, which checks who logged in to the dummy system
    on `27 April 2016` and displays their names on the terminal:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们添加最后一个函数，检查谁在`2016年4月27日`登录到虚拟系统，并在终端上显示他们的名字：
- en: '[PRE30]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Lastly, in our `main()` function, connect our program to the MySQL database
    and call all the functions that we have defined in the previous steps. After that,
    close the database connection and we''re done:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在我们的`main()`函数中，连接我们的程序到MySQL数据库，并调用我们在前面步骤中定义的所有函数。之后，关闭数据库连接，我们就完成了：
- en: '[PRE31]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Compile and run the project now and you should see a terminal window, which
    displays the filtered results from the database as defined earlier:![How to do
    it…](img/B02820_08_30.jpg)
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在编译并运行项目，您应该看到一个终端窗口，显示了之前定义的数据库中的过滤结果：![操作步骤...](img/B02820_08_30.jpg)
- en: How it works…
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: A console application does not have any GUI at all and only shows you a text
    display in a terminal window. This is usually used in a backend system, as it
    uses fewer resources compared to a widget application. We use it in this example
    because it's faster to display the result without the need to place any widgets
    in the program, which we don't need in this case.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台应用程序根本没有任何GUI，只在终端窗口中显示文本。这通常用于后端系统，因为它使用的资源比小部件应用程序少。在本例中使用它是因为它更快地显示结果，而无需在程序中放置任何小部件，这在这种情况下是不需要的。
- en: We separated the SQL queries into different functions so that it's easier to
    maintain the code and it doesn't become too messy. Do note that in C++, the functions
    have to be located before the `main()` function, or they will not be able to be
    called by `main()`.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将SQL查询分成不同的函数，以便更容易维护代码，避免变得太混乱。请注意，在C++中，函数必须位于`main()`函数之前，否则它们将无法被`main()`调用。
- en: There's more…
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The `INNER JOIN` statement used in the preceding example joins two tables together
    and selects all rows from both tables, as long as there is a match between the
    columns in both tables. There are many other types of `JOIN` statement that you
    can use in MySQL (and some other types of SQL architecture), such as `LEFT JOIN`,
    `RIGHT JOIN`, `FULL OUTER JOIN`, and so on. The following diagram shows the different
    types of `JOIN` statements and their effects:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中使用的`INNER JOIN`语句将两个表连接在一起，并选择两个表中的所有行，只要两个表中的列之间存在匹配。在MySQL（以及其他类型的SQL架构）中，还有许多其他类型的`JOIN`语句，例如`LEFT
    JOIN`，`RIGHT JOIN`，`FULL OUTER JOIN`等。以下图表显示了不同类型的`JOIN`语句及其效果：
- en: '![There''s more…](img/B02820_08_31.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![更多内容...](img/B02820_08_31.jpg)'
- en: The `LIKE` statement is normally used to search for a string variable in the
    database without the full word. Notice that there are two `%` symbols, located
    before and after the search keyword.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`LIKE`语句通常用于在数据库中搜索字符串变量而不是完整单词。请注意，搜索关键字之前和之后有两个`%`符号。'
- en: The `DISTINCT` statement used in the previous example filters out results that
    have the exact same variable. For example, without the `DISTINCT` statement, you
    will see two versions of Larry King appear in the terminal because there are two
    records of him logging in to the system on the same day. By adding the `DISTINCT`
    statement, MySQL will eliminate one of the repeating results and ensure every
    result is unique.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前面的示例中使用的`DISTINCT`语句过滤掉具有完全相同变量的结果。例如，如果没有`DISTINCT`语句，您将在终端中看到两个Larry King的版本，因为他在同一天登录系统有两条记录。通过添加`DISTINCT`语句，MySQL将消除重复的结果之一，并确保每个结果都是唯一的。
- en: You may be wondering what `d-MMMM-yyyy` stands for and why we used it in the
    preceding example. That is actually an expression supplied to the `QDateTime`
    class in Qt to display the date time result using a given format. In this case,
    it will change the date time data that we get from MySQL, `2016-08-06`, to the
    format that we specified, resulting in `6-August-2016`. For more information,
    check out Qt's documentation at [http://doc.qt.io/qt-5/qdatetime.html#toString](http://doc.qt.io/qt-5/qdatetime.html#toString),
    which has the full list of expressions that can be used to determine the format
    of the date and time string.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可能想知道`d-MMMM-yyyy`代表什么，为什么我们在前面的例子中使用它。这实际上是提供给Qt中的`QDateTime`类的一个表达式，用于使用给定的格式显示日期时间结果。在这种情况下，它将改变我们从MySQL获取的日期时间数据`2016-08-06`，转换为我们指定的格式，结果为`6-August-2016`。更多信息，请查看Qt的文档[http://doc.qt.io/qt-5/qdatetime.html#toString](http://doc.qt.io/qt-5/qdatetime.html#toString)，其中包含可以用来确定日期和时间字符串格式的完整表达式列表。
