["```cpp\n    myPushButton->setStyleSheet(\"color : blue\");\n    ```", "```cpp\n    QLineEdit#usernameEdit { background-color: blue }\n    ```", "```cpp\n    border: 2px solid gray;\n    border-radius: 10px;\n    padding: 0 8px;\n    background: yellow;\n    ```", "```cpp\n    QPushButton\n    {\n      border: 2px solid gray;\n      border-radius: 10px;\n      padding: 0 8px;\n      background: yellow;\n    }\n    ```", "```cpp\n    QPushButton#pushButton_3\n    {\n      border: 2px solid gray;\n      border-radius: 10px;\n      padding: 0 8px;\n      background: yellow;\n    }\n    ```", "```cpp\n    QPushButton\n    {\n     color: red;\n     border: 0px;\n     padding: 0 8px;\n     background: white;\n    }\n\n    QPushButton#pushButton_2\n    {\n     border: 1px solid red;\n     border-radius: 10px;\n    }\n\n    QPushButton#pushButton_3\n    {\n      border: 2px solid gray;\n      border-radius: 10px;\n      padding: 0 8px;\n      background: yellow;\n    }\n    ```", "```cpp\n    *\n    {\n      background: qradialgradient(cx: 0.3, cy: -0.4, fx: 0.3, fy: -0.4, radius: 1.35, stop: 0 #fff, stop: 1 #888);\n      color: rgb(255, 255, 255);\n      border: 1px solid #ffffff;\n    }\n    ```", "```cpp\n    border: 1px solid;\n    ```", "```cpp\n    #loginForm { border: 1px solid; }\n    ```", "```cpp\n    #centralWidget { background: rgba(32, 80, 96, 100); }\n    ```", "```cpp\n    #topPanel { background-color: qlineargradient(spread:reflect, x1:0.5, y1:0, x2:0, y2:0, stop:0 rgba(91, 204, 233, 100), stop:1 rgba(32, 80, 96, 100)); }\n    ```", "```cpp\n    #loginForm\n    {\n      background: rgba(0, 0, 0, 80);\n      border-radius: 8px;\n    }\n    ```", "```cpp\n    QLabel { color: white; }\n    QLineEdit { border-radius: 3px; }\n    ```", "```cpp\n    QPushButton\n    {\n      color: white;\n      background-color: #27a9e3;\n      border-width: 0px;\n      border-radius: 3px;\n    }\n    ```", "```cpp\n    QPushButton:hover { background-color: #66c011; }\n    ```", "```cpp\n    border-image: url(:/images/logo.png);\n    ```", "```cpp\n    #centralWidget\n    {\n      background: rgba(32, 80, 96, 100);\n     border-image: url(:/images/login_bg.png);\n    }\n    ```", "```cpp\n<!DOCTYPE RCC><RCC version=\"1.0\">\n  <qresource>\n    <file>images/copy.png</file>\n    <file>images/cut.png</file>\n    <file>images/new.png</file>\n    <file>images/open.png</file>\n    <file>images/paste.png</file>\n    <file>images/save.png</file>\n  </qresource>\n</RCC>\n```", "```cpp\n    QPushButton\n    {\n      color: white;\n      background-color: #27a9e3;\n      border-width: 0px;\n      border-radius: 3px;\n    }\n    ```", "```cpp\n    QPushButton:hover\n    {\n      color: white;\n      background-color: #66c011;\n      border-width: 0px;\n      border-radius: 3px;\n    }\n    ```", "```cpp\n    QPushButton:pressed\n    {\n      color: white;\n      background-color: yellow;\n      border-width: 0px;\n      border-radius: 3px;\n    }\n    ```", "```cpp\n    QPushButton[pagematches=true]\n    {\n      color: white;\n      background-color: red;\n      border-width: 0px;\n      border-radius: 3px;\n    }\n    ```", "```cpp\n        ui->button1->setProperty(\"pagematches\", true);\n        ```", "```cpp\n        private slots:\n        void on_tabWidget_currentChanged(int index);\n        ```", "```cpp\n        void MainWindow::on_tabWidget_currentChanged(int index)\n        {\n          // Set all buttons to false\n          ui->button1->setProperty(\"pagematches\", false);\n          ui->button2->setProperty(\"pagematches\", false);\n          ui->button3->setProperty(\"pagematches\", false);\n\n          // Set one of the buttons to true\n          if (index == 0)\n            ui->button1->setProperty(\"pagematches\", true);\n          else if (index == 1)\n            ui->button2->setProperty(\"pagematches\", true);\n          else\n            ui->button3->setProperty(\"pagematches\", true);\n\n          // Update buttons style\n          ui->button1->style()->polish(ui->button1);\n          ui->button2->style()->polish(ui->button2);\n          ui->button3->style()->polish(ui->button3);\n        }\n        ```", "```cpp\nQSpinBox::down-button\n{\n  image: url(:/images/spindown.png);\n  subcontrol-origin: padding;\n  subcontrol-position: right bottom;\n}\n```", "```cpp\n    import QtQuick 2.5\n    import QtQuick.Window 2.2\n\n    Window {\n      visible: true\n      MainForm {\n        anchors.fill: parent\n        mouseArea.onClicked: {\n          Qt.quit();\n        }\n      }\n    }\n    ```", "```cpp\n    QQmlApplicationEngine engine;\n    engine.load(QUrl(QStringLiteral(\"qrc:/main.qml\")));\n    ```", "```cpp\n    mouseArea.onClicked: {\n      Qt.quit();\n    }\n    ```", "```cpp\n    property alias mouseArea: mousearea\n    ```", "```cpp\nmylabel.h:\nclass MyLabel : public QObject\n{\n  Q_OBJECT\n  public:\n    // Object pointer\n    QObject* myObject;\n\n    explicit MyLabel(QObject *parent = 0);\n\n  // Must call Q_INVOKABLE so that this function can be used in QML\n  Q_INVOKABLE void SetMyObject(QObject* obj);\n}\n```", "```cpp\nmylabel.cpp:\nvoid MyLabel::SetMyObject(QObject* obj)\n{\n  // Set the object pointer\n  myObject = obj;\n}\n```", "```cpp\n#include \"mylabel.h\"\nint main(int argc, char *argv[])\n{\n  // Register your class to QML\n  qmlRegisterType<MyClass>(\"MyLabelLib\", 1, 0, \"MyLabel\");\n}\n```", "```cpp\nimport MyLabelLib 1.0\n\nApplicationWindow\n{\n  id: mainWindow\n  width: 480\n  height: 640\n\n  MyLabel\n  {\n    id: mylabel\n  }\n\n  Label\n  {\n    id: helloWorldLabel\n    text: qsTr(\"Hello World!\")\n    Component.onCompleted:\n    {\n      mylabel.SetMyObject(hellowWorldLabel);\n    }\n  }\n}\n```", "```cpp\n// QVariant automatically detects your data type\nmyObject->setProperty(\"visible\", QVariant(true));\nmyObject->setProperty(\"text\", QVariant(\"Bye bye world!\"));\n```", "```cpp\nQVariant returnedValue;\nQVariant message = \"Hello world!\";\n\nQMetaObject::invokeMethod(myObject, \"myQMLFunction\",\nQ_RETURN_ARG(QVariant, returnedValue),\nQ_ARG(QVariant, message));\n\nqDebug() << \"QML function returned:\" << returnedValue.toString();\n```", "```cpp\nQMetaObject::invokeMethod(myObject, \"myQMLFunction\");\n```"]