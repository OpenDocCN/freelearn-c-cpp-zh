- en: Instant Messaging
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 即时通讯
- en: One important feature of corporate software is the ability to communicate with
    staff. Thus, an internal instant messaging system is a crucial part of the software.
    By incorporating the networking module in Qt, we can easily create a chat system
    out of it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 企业软件的一个重要特性是与员工进行通信的能力。因此，内部即时通讯系统是软件的一个关键部分。通过在Qt中整合网络模块，我们可以轻松地创建一个聊天系统。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Qt networking module
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Qt网络模块
- en: Creating an instant messaging server
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建即时通讯服务器
- en: Creating an instant messaging client
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建即时通讯客户端
- en: Creating an instant messaging system using Qt is a lot easier than you think.
    Let's get started!
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Qt创建即时通讯系统比你想象的要容易得多。让我们开始吧！
- en: The Qt networking module
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Qt网络模块
- en: In the following section, we will learn about the Qt networking module and how
    it can help us to achieve server-client communication via the TCP or UDP connection
    protocols.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将学习Qt的网络模块以及它如何帮助我们通过TCP或UDP连接协议实现服务器-客户端通信。
- en: Connection protocols
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接协议
- en: The networking module in Qt is the module that offers both low-level networking
    functionality, such as TCP and UDP sockets, as well as high-level networking classes
    for web integration and network communication.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Qt的网络模块提供了低级网络功能，如TCP和UDP套接字，以及用于网络集成和网络通信的高级网络类。
- en: In this chapter, we will use the **TCP** (**Transmission Control Protocol**)
    internet protocol for our program instead of the **UDP** (**User Datagram Protocol**)
    protocol. The main difference is that TCP is a connection-oriented protocol that
    requires all clients to establish a connection to the server before they are able
    to communicate with each other.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用TCP（传输控制协议）互联网协议，而不是UDP（用户数据报协议）协议。主要区别在于TCP是一种面向连接的协议，要求所有客户端在能够相互通信之前必须与服务器建立连接。
- en: UDP on the other hand is a connectionless protocol that does not require a connection.
    The client will just send whatever data it needs to send to the destination, without
    checking if the data has been received by the other end. There are pros and cons
    for both protocols, but TCP is much more suitable for our sample project. We want
    to make sure every chat message is being received by the recipient, don't we?
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，UDP是一种无连接的协议，不需要连接。客户端只需将需要发送到目的地的任何数据发送出去，而无需检查数据是否已被另一端接收。两种协议都有利弊，但TCP更适合我们的示例项目。我们希望确保每条聊天消息都被接收者接收到，不是吗？
- en: 'The differences between both protocols are as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 两种协议之间的区别如下：
- en: 'TCP:'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TCP：
- en: Connection-oriented protocol
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面向连接的协议
- en: Suitable for applications that require high reliability, and it is less critical
    toward its data transmission time
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 适用于需要高可靠性的应用程序，对数据传输时间不太关键
- en: The speed for TCP is slower than UDP
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TCP的速度比UDP慢
- en: Requires acknowledgment of receipt from the receiving client before sending
    the next data
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在发送下一个数据之前，需要接收客户端的确认收据
- en: There is an absolute guarantee that the data transferred remains intact and
    arrives in the same order in which it was sent
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绝对保证传输的数据保持完整，并按发送顺序到达目的地
- en: 'UDP:'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UDP：
- en: Connectionless protocol
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无连接协议
- en: Suitable for applications that need fast, efficient transmission, such as games
    and VOIP
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 适用于需要快速、高效传输的应用程序，如游戏和VOIP
- en: UDP is lightweight and faster than TCP because error recovery is not attempted
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UDP比TCP轻量且更快，因为不会尝试错误恢复
- en: Also suitable for servers that answer small queries from huge numbers of clients
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 也适用于需要从大量客户端回答小查询的服务器
- en: There is no guarantee that the data sent reaches its destination at all as there
    is no tracking connections and no need for any acknowledgment from the receiving
    client
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有保证发送的数据是否到达目的地，因为没有跟踪连接，也不需要接收客户端的任何确认
- en: Since we are not going for the peer-to-peer connection approach, our chat system
    will require two different pieces of software—the server program and the client
    program. The server program will act as the middleman (just like a postman) who
    receives all the messages from all the users and sends them to the targeted recipients
    accordingly. The server program will be locked away from the normal users in one
    of the computers in the server room.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们不打算采用点对点连接的方法，我们的聊天系统将需要两个不同的软件部分——服务器程序和客户端程序。服务器程序将充当中间人（就像邮递员一样），接收所有用户的消息并将它们发送给相应的接收者。服务器程序将被锁定在服务器房间的一台计算机中，普通用户无法接触。
- en: 'The client program, on the other hand, is the instant messaging software that
    is used by all the users. This program is the one that is being installed on the
    users'' computers. Users can send their messages using this client program and
    see the messages sent by others as well. The overall architecture of our messaging
    system looks something like this:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，客户端程序是所有用户使用的即时通讯软件。这个程序将安装在用户的计算机上。用户可以使用这个客户端程序发送消息，并查看其他人发送的消息。我们的消息系统的整体架构看起来像这样：
- en: '![](img/26bb7700-45cf-4482-9232-4eb2ce750839.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/26bb7700-45cf-4482-9232-4eb2ce750839.png)'
- en: Let's proceed to setting up our project and enabling Qt's networking module!
    For this project, we will start on the server program before working on the client
    program.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续设置我们的项目并启用Qt的网络模块！对于这个项目，我们将先从服务器程序开始，然后再处理客户端程序。
- en: Setting up a new project
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置新项目
- en: 'First, create a new Qt Console Application project. Then, open up the project
    file (`.pro`) and add in the following module:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个新的Qt控制台应用程序项目。然后，打开项目文件（.pro）并添加以下模块：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You should have noticed that this project doesn't have any `gui` module (we
    make sure it's explicitly removed) as we don't need any user interface for the
    server program. That is also the reason why we chose Qt Console Application instead
    of the usual Qt Widgets Application.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该已经注意到，这个项目没有任何`gui`模块（我们确保它被明确删除），因为服务器程序不需要任何用户界面。这也是为什么我们选择了Qt控制台应用程序而不是通常的Qt小部件应用程序的原因。
- en: Actually, that's it—you have successfully added the networking module to your
    project. In the next section, we will learn how to create the server program for
    our chat system.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，就是这样——你已经成功地将网络模块添加到了你的项目中。在下一节中，我们将学习如何为我们的聊天系统创建服务器程序。
- en: Creating an instant messaging server
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建即时通讯服务器
- en: In the following section, we will learn how to create an instant messaging server
    that receives messages sent by the users and redistributes them to their respective
    recipients.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将学习如何创建一个即时通讯服务器，接收用户发送的消息并将其重新分发给各自的接收者。
- en: Creating TCP Server
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建TCP服务器
- en: In this section, we will learn how to create a TCP server that constantly listens
    to a specific port for incoming messages. For the sake of simplicity, we will
    just create a global chat room in which every user can see the messages sent by
    each and every user within the chat room, instead of a one-to-one messaging system
    with a friend list. You can easily improvise this system to the latter once you
    have understood how a chat system functions.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将学习如何创建一个TCP服务器，不断监听特定端口以接收传入的消息。为了简单起见，我们将创建一个全局聊天室，其中每个用户都可以看到聊天室内每个用户发送的消息，而不是一个一对一的消息系统带有好友列表。一旦你了解了聊天系统的运作方式，你可以很容易地将这个系统改进为后者。
- en: First, go to File | New File or Project and choose C++ Class under the C++ category.
    Then, name the class as `server` and select QObject as the base class. Make sure
    the Include QObject option is ticked before proceeding to create the custom class.
    You should have also noticed the absence of `mainwindow.ui`, `mainwindow.h`, and
    `mainwindow.cpp`. This is because there is no user interface in a console application
    project.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，转到文件|新建文件或项目，并在C++类别下选择C++类。然后，将类命名为`server`，并选择QObject作为基类。在创建自定义类之前，确保选中包含QObject选项。你也应该注意到了`mainwindow.ui`、`mainwindow.h`和`mainwindow.cpp`的缺失。这是因为在控制台应用程序项目中没有用户界面。
- en: 'Once the server class has been created, let''s open up `server.h` and add in
    the following headers, variables and functions:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦服务器类被创建，让我们打开`server.h`并添加以下头文件、变量和函数：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, create a function called `startServer()` and add the following code to
    the function definition in `server.cpp`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个名为`startServer()`的函数，并将以下代码添加到`server.cpp`中的函数定义中：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We created a `QTcpServer` object called `chatServer` and made it constantly
    listen to port `8001`. You can choose any unused port number ranging from `1024`
    to `49151`. Other numbers outside of this range are usually reserved for common
    systems, such as HTTP or FTP services, so we better not use them to avoid conflicts.
    We also created a `QVector` array called `allClients` to store all the connected
    clients so that we can make use of it later to redirect incoming messages to all
    users.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个名为`chatServer`的`QTcpServer`对象，并使其不断监听端口`8001`。你可以选择从`1024`到`49151`范围内的任何未使用的端口号。此范围之外的其他数字通常保留用于常见系统，如HTTP或FTP服务，因此最好不要使用它们以避免冲突。我们还创建了一个名为`allClients`的`QVector`数组，用于存储所有连接的客户端，以便我们以后可以利用它来将传入的消息重定向到所有用户。
- en: We also used the `setMaxPendingConnections()` function to limit the maximum
    pending connections to 10 clients. You can use this method to keep the number
    of active clients to a specific amount so that your server's bandwidth is always
    within its limit. This can ensure good service quality and maintain a positive
    user experience.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用了`setMaxPendingConnections()`函数来限制最大挂起连接数为10个客户端。你可以使用这种方法来保持活动客户端的数量，以便服务器的带宽始终在其限制范围内。这可以确保良好的服务质量并保持积极的用户体验。
- en: Listening to clients
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监听客户端
- en: 'The `chatServer` will trigger the `newConnection()` signal whenever a client
    has connected to the server, so we connect that signal to our custom slot function
    called `newClientConnection()`. The slot function looks like this:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 每当客户端连接到服务器时，`chatServer`将触发`newConnection()`信号，因此我们将该信号连接到我们的自定义槽函数`newClientConnection()`。槽函数如下所示：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Every new client connected to the server is a `QTcpSocket` object, which can
    be obtained from the `QTcpServer` object by calling `nextPendingConnection()`.
    You can obtain information about the client such as its IP address and port number
    by calling `peerAddress()` and `peerPort()`, respectively. We then store each
    new client into the `allClients` array for future use. We also connect the client's
    `disconnected()`, `readyRead()` and `stateChanged()` signals to its respective
    slot function.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 每个连接到服务器的新客户端都是一个`QTcpSocket`对象，可以通过调用`nextPendingConnection()`从`QTcpServer`对象中获取。你可以通过调用`peerAddress()`和`peerPort()`分别获取有关客户端的信息，如其IP地址和端口号。然后我们将每个新客户端存储到`allClients`数组中以供将来使用。我们还将客户端的`disconnected()`、`readyRead()`和`stateChanged()`信号连接到其相应的槽函数。
- en: 'When a client is disconnected from the server, the `disconnected()` signal
    will be triggered, and subsequently the `socketDisconnected()`, `slot` function
    will be called. What we are doing in this function is just displaying the message
    on the server console whenever it happens, and nothing more. You can do anything
    you like here such as saving the user''s offline state to the database and so
    on. For the sake of simplicity, we will just print out the message on the console
    window:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当客户端从服务器断开连接时，将触发`disconnected()`信号，随后将调用`socketDisconnected()`槽函数。在这个函数中，我们只是在服务器控制台上显示消息，当它发生时，什么都不做。你可以在这里做任何你喜欢的事情，比如将用户的离线状态保存到数据库等。为了简单起见，我们将在控制台窗口上打印出消息：
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, whenever a client is sending in a message to the server, the `readyRead()`
    signal will be triggered. We have connected the signal to a slot function called
    `socketReadyRead()` and it looks something like this:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，每当客户端向服务器发送消息时，`readyRead()`信号将被触发。我们已经将该信号连接到一个名为`socketReadyRead()`的槽函数，它看起来像这样：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the preceding code, we simply redirect the message to a custom function called
    `sendMessageToClients()`, which handles passing the message to all connected clients.
    We will look at how this function works in a minute. We use `QObject::sender()`
    to get the pointer of the object that emitted the `readyRead` signal and convert
    it to the `QTcpSocket` class so that we can access its `readAll()` function.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们只是简单地将消息重定向到一个名为`sendMessageToClients()`的自定义函数中，该函数处理将消息传递给所有连接的客户端。我们将在一分钟内看看这个函数是如何工作的。我们使用`QObject::sender()`来获取发出`readyRead`信号的对象的指针，并将其转换为`QTcpSocket`类，以便我们可以访问其`readAll()`函数。
- en: 'After that, we also connected another signal called `stateChanged()` to the
    `socketStateChanged()` slot function. The slow function looks like this:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们还将另一个名为`stateChanged()`的信号连接到`socketStateChanged()`槽函数。慢函数看起来像这样：
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This function gets triggered whenever a client's network state has changed,
    such as connected, disconnected, listening, and so on. We will simply print out
    a relevant message according to its new state so that we can debug our program
    more easily.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数在客户端的网络状态发生变化时触发，例如连接、断开连接、监听等。我们将根据其新状态简单地打印出相关消息，以便更轻松地调试我们的程序。
- en: 'Now, let''s look at what the `sendMessageToClients()` function looks like:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看`sendMessageToClients()`函数的样子：
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the preceding code, we simply loop through the `allClients` array and pass
    the message data to all the connected clients.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们只是简单地循环遍历`allClients`数组，并将消息数据传递给所有连接的客户端。
- en: 'Lastly, open up `main.cpp` and add the following code to start our server:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，打开`main.cpp`并添加以下代码来启动我们的服务器：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Build and run the program now, and you should see something like this:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在构建并运行程序，你应该看到类似这样的东西：
- en: '![](img/07666326-5c7d-4633-8a02-641e3ae73af5.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/07666326-5c7d-4633-8a02-641e3ae73af5.png)'
- en: It doesn't look like anything is happening except showing that the server is
    listening to port `8001`. Don't worry, because we haven't created the client program
    yet. Let's proceed!
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 除了显示服务器正在监听端口`8001`之外，似乎没有发生任何事情。别担心，因为我们还没有创建客户端程序。让我们继续！
- en: Creating an instant messaging client
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建即时通讯客户端
- en: In the following section, we will proceed to create our instant messaging client,
    which the users will be using to send and receive messages.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将继续创建我们的即时通讯客户端，用户将使用它来发送和接收消息。
- en: Designing the user interface
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计用户界面
- en: 'In this section, we will learn how to design the user interface for the instant
    messaging client and create functionality for it:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何为即时通讯客户端设计用户界面并为其创建功能：
- en: First, create another Qt project by going to File | New File or Project. Then
    select Qt Widget Application under the Application category.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，通过转到文件|新建文件或项目来创建另一个Qt项目。然后在应用程序类别下选择Qt Widget应用程序。
- en: 'After the project has been created, open up `mainwindow.ui` and drag a Line
    Edit and Text Browser to the window canvas. Then, select the central widget and
    click the Lay Out Vertically button, located on the widget bar above, to apply
    the vertical layout effect to the widgets:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目创建后，打开`mainwindow.ui`并将一个行编辑和文本浏览器拖放到窗口画布中。然后，选择中央窗口小部件并单击位于上方小部件栏上的“垂直布局”按钮，以将垂直布局效果应用到小部件上：
- en: '![](img/e12c2a26-b9f7-4a29-be49-3e3e35eaa0c8.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e12c2a26-b9f7-4a29-be49-3e3e35eaa0c8.png)'
- en: 'After that, place a Horizontal Layout at the bottom and put the Line Edit into
    the layout. Then, pull a Push Button from the widget box into the Horizontal Layout
    and name it as `sendButton`; we also set its label as `Send`, like this:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，在底部放置一个水平布局，并将行编辑放入布局中。然后，从小部件框中拖放一个按钮到水平布局中，并将其命名为`sendButton`；我们还将其标签设置为`Send`，就像这样：
- en: '![](img/b6569033-78ae-4f24-8c92-52d0d24ce323.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b6569033-78ae-4f24-8c92-52d0d24ce323.png)'
- en: 'Once you''re finished, drag and drop another Horizontal Layout and place it
    on top of the text browser. After that, place a Label, Line Edit, and a Push Button
    into the horizontal layout, like this:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，将另一个水平布局拖放到文本浏览器顶部。然后，将标签、行编辑和一个按钮放入水平布局中，就像这样：
- en: '![](img/65759c61-0e68-4ef7-803d-91247e04d7ae.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/65759c61-0e68-4ef7-803d-91247e04d7ae.png)'
- en: We call the line edit widget `nameInput` and set a default text for it as `John
    Doe`, just so the user has a default name. Then, we call the push button `connectButton`
    and change its label to `Connect`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将行编辑小部件称为`nameInput`，并将其默认文本设置为`John Doe`，这样用户就有了默认名称。然后，我们将推按钮称为`connectButton`，并将其标签更改为`Connect`。
- en: 'We have completed the user interface design for a very simple instant messaging
    program, which will do the following tasks:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了一个非常简单的即时通讯程序的用户界面设计，它将执行以下任务：
- en: Connect to a server
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接到服务器
- en: Let a user set their name
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让用户设置他们的名字
- en: Can see messages sent by all users
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以看到所有用户发送的消息
- en: A user can type and send their messages for all to see
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户可以输入并发送他们的消息供所有人查看
- en: 'Compile and run the project now, you should see your program looking something
    like this:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在编译并运行项目，你应该看到你的程序看起来类似这样：
- en: '![](img/b412d5d1-4f08-44fb-bcd5-3da628cdfb2a.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b412d5d1-4f08-44fb-bcd5-3da628cdfb2a.png)'
- en: Do note that I also changed the window title to `Chat Client` so that it looks
    slightly more professional. You can do so by selecting the `MainWindow` object
    at the hierarchy window and change its `windowTitle` property.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我还将窗口标题更改为`Chat Client`，这样看起来稍微更专业一些。您可以通过在层次结构窗口中选择`MainWindow`对象并更改其`windowTitle`属性来实现。
- en: In the next section, we will start working on the programming part and implement
    the features mentioned in the list above.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将开始进行编程工作，并实现上面列表中提到的功能。
- en: Implementing chat features
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现聊天功能
- en: 'Before we start writing any code, we must first enable the networking module
    by opening our project file (`.pro`) and add the `network` keyword there:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始编写任何代码之前，我们必须通过打开项目文件（`.pro`）并在那里添加 `network` 关键字来启用网络模块：
- en: '[PRE9]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, open up `mainwindow.h` and add the following headers and variables:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开 `mainwindow.h` 并添加以下头文件和变量：
- en: '[PRE10]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We set the `connectedToHost` variable to `false` by default in `mainwindow.cpp`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 `mainwindow.cpp` 中默认将 `connectedToHost` 变量设置为 `false`：
- en: '[PRE11]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Once this is done, the first feature we need to implement is the server connection.
    Open up `mainwindow.ui`, right-click on the Connect button, then choose Go to
    slot..., and pick `clicked()`. After that, a slot function will be created for
    you automatically. Add in the following code to the `SLOT` function:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，我们需要实现的第一个功能是服务器连接。打开 `mainwindow.ui`，右键单击连接按钮，然后选择转到槽...，然后选择 `clicked()`。之后，将自动为您创建一个槽函数。在
    `SLOT` 函数中添加以下代码：
- en: '[PRE12]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: What we did in the preceding code was basically check for the `connectedToHost`
    variable. If the variable is `false` (meaning the client is not connected to the
    server), create a `QTcpSocket` object called `socket` and make it connect to a
    host at `127.0.0.1` on port `8801`. The IP address `127.0.0.1` stands for a localhost.
    Since this is only for testing purposes, we will connect the client to our test
    server, which is located on the same computer. If you're running the server on
    another computer, you may change the IP address to a LAN or WAN address, depending
    on your need.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们基本上是检查了 `connectedToHost` 变量。如果变量为 `false`（表示客户端未连接到服务器），则创建一个名为 `socket`
    的 `QTcpSocket` 对象，并使其连接到端口 `8801` 上的 `127.0.0.1` 主机。IP 地址 `127.0.0.1` 代表本地主机。由于这仅用于测试目的，我们将客户端连接到位于同一台计算机上的测试服务器。如果您在另一台计算机上运行服务器，则可以根据需要将
    IP 地址更改为局域网或广域网地址。
- en: We also connected the `socket` object to its respective slot functions when
    `connected()`, `disconnected()`, and `readReady()` signals were triggered. This
    is exactly the same as the server code, which we did previously. If the client
    is already connected to the server and the Connect (now labeled `Disconnect`)
    button is clicked, then send a disconnection message to the server and terminate
    the connection.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `connected()`、`disconnected()` 和 `readReady()` 信号被触发时，我们还将 `socket` 对象连接到其相应的槽函数。这与我们之前所做的服务器代码完全相同。如果客户端已连接到服务器并且单击了连接（现在标记为
    `Disconnect`）按钮，则向服务器发送断开连接消息并终止连接。
- en: 'Next, we will look at the slot functions, which we connected to the `socket`
    object in the previous step. The first one is the `socketConnected()` function,
    which will be called when the client has successfully connected to the server:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看看槽函数，这些槽函数在上一步中连接到了 `socket` 对象。第一个是 `socketConnected()` 函数，当客户端成功连接到服务器时将被调用：
- en: '[PRE13]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: First, the client will display a `Connected to server.` message on both the
    application output and the text browser widget. We will see what the `printMessage()`
    function looks like in a minute. Then, we take the user's name from the input
    field and incorporate it into a text message and send it to the server so that
    all users are being notified. Finally, set the Connect button's label to `Disconnect`, and
    set the `connectedToHost` variable to `true`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，客户端将在应用程序输出和文本浏览器小部件上显示 `Connected to server.` 消息。我们马上就会看到 `printMessage()`
    函数是什么样子。然后，我们从输入字段中获取用户的名称，并将其合并到文本消息中，然后将其发送到服务器，以便通知所有用户。最后，将连接按钮的标签设置为 `Disconnect`，并将
    `connectedToHost` 变量设置为 `true`。
- en: 'After this, let''s look at `socketDisconnected()`, which as its name implies,
    will be called whenever the client is disconnected from the server:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看 `socketDisconnected()`，正如其名称所示，每当客户端从服务器断开连接时都会被调用：
- en: '[PRE14]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The preceding code is quite straightforward. All it does is show disconnected
    messages on both the application output and text browser widget, then sets the
    Disconnect button's label to `Connect` and the `connectedToHost` variable to `false`.
    Do note that since this function will only be called after the client has been
    disconnected from the server, we can no longer send any message to the server
    at that point to notify it of the disconnection. You should check for the disconnection
    at the server side and notify all users accordingly.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码非常简单。它只是在应用程序输出和文本浏览器小部件上显示断开连接的消息，然后将断开按钮的标签设置为 `Connect`，将 `connectedToHost`
    变量设置为 `false`。请注意，由于此函数仅在客户端从服务器断开连接后才会被调用，因此我们无法在那时向服务器发送任何消息以通知它断开连接。您应该在服务器端检查断开连接并相应地通知所有用户。
- en: 'Then, there is the `socketReadyRead()` function,  which will be triggered whenever
    the server is sending data to the client. This function is even simpler than the
    previous ones, as all it does is pass the incoming data to the `printMessage()`
    function and nothing else:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是 `socketReadyRead()` 函数，每当服务器向客户端发送数据时都会触发该函数。这个函数比之前的函数更简单，因为它只是将传入的数据传递给
    `printMessage()` 函数，什么都不做：
- en: '[PRE15]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Finally, let''s look at what the `printMessage()` function looks like. Actually,
    it is just as simple. All it does is to append the message to the text browser
    and it is done:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们看看 `printMessage()` 函数是什么样子。实际上，它就是这么简单。它只是将消息附加到文本浏览器中，然后完成：
- en: '[PRE16]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Last but not least, let''s check out how to implement the function for sending
    messages to the server. Open up `mainwindow.ui`, right-click on the Send button,
    select Go to slot..., and choose the `clicked()` option. Once the slot function
    has been created for you, add the following code to the function:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，让我们看看如何实现向服务器发送消息的功能。打开 `mainwindow.ui`，右键单击发送按钮，选择转到槽...，然后选择 `clicked()`
    选项。一旦为您创建了槽函数，将以下代码添加到函数中：
- en: '[PRE17]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: First, we take the user's name and combine it with the message. Then, we set
    the name to a blue color before sending the entire thing to the server by calling
    `write()`. After that, clear the message input field, and we're done. Since the
    text browser accepts rich text by default, we can use that to color our text by
    placing the text within the `<font>` tags.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们获取用户的名称并将其与消息组合在一起。然后，在将整个内容发送到服务器之前，我们将名称设置为蓝色，通过调用`write()`来发送。之后，清除消息输入字段，完成。由于文本浏览器默认接受富文本，我们可以使用`<font>`标签来为文本着色。
- en: 'Compile and run the project now; you should be able to chat among yourselves
    on different clients! Don''t forget to turn on the server before connecting the
    clients. If everything goes right, you should see something like this:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在编译并运行项目；您应该能够在不同的客户端之间进行聊天！在连接客户端之前，不要忘记打开服务器。如果一切顺利，您应该会看到类似于这样的内容：
- en: '![](img/3e596014-2a86-4f29-b996-da0d30ff5cd9.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3e596014-2a86-4f29-b996-da0d30ff5cd9.png)'
- en: 'Meanwhile, you should also see all the activities on the server side as well:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，您还应该在服务器端看到所有的活动：
- en: '![](img/0fc60d96-fc57-4fe5-b4cd-a459653d6dcf.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0fc60d96-fc57-4fe5-b4cd-a459653d6dcf.png)'
- en: That's it! We have successfully created a simple chat system using Qt. You are
    welcome to improvise on this and create a fully fledged messaging system!
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止！我们已经成功使用Qt创建了一个简单的聊天系统。欢迎您在此基础上进行改进，创建一个完整的消息传递系统！
- en: Summary
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to create an instant messaging system using
    Qt's networking module. In the following chapter, we will dive into the wonders
    of graphics rendering using Qt.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用Qt的网络模块创建即时消息传递系统。在接下来的章节中，我们将深入探讨使用Qt进行图形渲染的奇妙之处。
