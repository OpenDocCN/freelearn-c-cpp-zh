["```cpp\nprecision mediump float;\n\nattribute vec4 a_position;\nattribute vec2 a_texcoord;\n\nuniform vec4 u_translate;\n\nvarying vec2 v_texcoord;\n\nvoid main() {\n   gl_Position = u_translate + a_position;\n    v_texcoord = a_texcoord;\n}\n```", "```cpp\nprecision mediump float;\n```", "```cpp\nattribute vec4 a_position;\nattribute vec2 a_texcoord;\n```", "```cpp\nuniform vec4 u_translate;\n```", "```cpp\nvarying vec2 v_texcoord;\n```", "```cpp\nvoid main() {\n    gl_Position = u_translate + a_position;\n    v_texcoord = a_texcoord;\n}\n```", "```cpp\nprecision mediump float;\n\nvarying vec2 v_texcoord;\n\nuniform sampler2D u_texture;\n\nvoid main() {\n    gl_FragColor = texture2D(u_texture, v_texcoord);\n}\n```", "```cpp\nuniform sampler2D u_texture;\n```", "```cpp\nvoid main() {\n    gl_FragColor = texture2D(u_texture, v_texcoord);\n}\n```", "```cpp\n webgl_x = (pixel_x - canvas_width / 2) / (canvas_width / 2)\n```", "```cpp\n((canvas_height / 2) - pixel_y) / (canvas_height / 2)\n```", "```cpp\nvar vertex_texture_data = new Float32Array([\n //  X,     Y,     U,   V\n     0.16,  0.213, 1.0, 1.0,\n    -0.16,  0.213, 0.0, 1.0,\n     0.16, -0.213, 1.0, 0.0,\n    -0.16, -0.213, 0.0, 0.0,\n    -0.16,  0.213, 0.0, 1.0,\n     0.16, -0.213, 1.0, 0.0\n ]);\n```", "```cpp\n<title>WebGL Shell</title>\n<link href=\"webgl.css\" rel=\"stylesheet\" type=\"text/css\">\n```", "```cpp\nvar Module = {\n```", "```cpp\n<script type='text/javascript'>\n var gl = null; // WebGLRenderingContext\n var program = null; // WebGLProgram\n var texture = null; // WebGLTexture\n var img = null; // HTMLImageElement\n var canvas = null;\n var image_width = 0;\n var image_height = 0;\n var vertex_texture_buffer = null; // WebGLBuffer\n var a_texcoord_location = null; // GLint\n var a_position_location = null; // GLint\n var u_translate_location = null; // WebGLUniformLocation\n var u_texture_location = null; // WebGLUniformLocation\n```", "```cpp\nvar vertex_texture_data = new Float32Array([\n     // x,  y,     u,   v\n     0.16,  0.213, 1.0, 1.0,\n    -0.16,  0.213, 0.0, 1.0,\n     0.16, -0.213, 1.0, 0.0,\n    -0.16, -0.213, 0.0, 0.0,\n    -0.16,  0.213, 0.0, 1.0,\n     0.16, -0.213, 1.0, 0.0\n ]);\n```", "```cpp\nconst FLOAT32_BYTE_SIZE = 4; // size of a 32-bit float\nconst STRIDE = FLOAT32_BYTE_SIZE * 4; // there are 4 elements for every vertex. x, y, u, v\nconst XY_OFFSET = FLOAT32_BYTE_SIZE * 0;\nconst UV_OFFSET = FLOAT32_BYTE_SIZE * 2;\n```", "```cpp\nvar vertex_shader_code = `\n    precision mediump float;\n    attribute vec4 a_position;\n    attribute vec2 a_texcoord;\n    varying vec2 v_texcoord;\n    uniform vec4 u_translate;\n\n    void main() {\n        gl_Position = u_translate + a_position;\n        v_texcoord = a_texcoord;\n    }\n`;\n```", "```cpp\nvar fragment_shader_code = `\n    precision mediump float;\n    varying vec2 v_texcoord;\n    uniform sampler2D u_texture;\n\n    void main() {\n        gl_FragColor = texture2D(u_texture, v_texcoord);\n    }\n`;\n```", "```cpp\nattribute vec4 a_position;\nattribute vec2 a_texcoord;\n```", "```cpp\nattribute vec4 a_position;\nattribute vec2 a_texcoord;\n```", "```cpp\ngl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n```", "```cpp\nfunction ModuleLoaded() {\n    canvas = document.getElementById('canvas');\n    gl = canvas.getContext(\"webgl\", { alpha: false }) ||\n                            canvas.getContext(\"experimental-webgl\", { \n                            alpha: false });\n\n    if (!gl) {\n        console.log(\"No WebGL support!\");\n        return;\n    }\n\n    gl.blendFunc( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA );\n    gl.enable( gl.BLEND );\n\n    var vertex_shader = gl.createShader(gl.VERTEX_SHADER);\n    gl.shaderSource( vertex_shader, vertex_shader_code );\n    gl.compileShader( vertex_shader );\n\n    if( !gl.getShaderParameter(vertex_shader, gl.COMPILE_STATUS) ) {\n        console.log('Failed to compile vertex shader' + \n                     gl.getShaderInfoLog(vertex_shader));\n        gl.deleteShader(vertex_shader);\n        return;\n    }\n\n    var fragment_shader = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource( fragment_shader, fragment_shader_code );\n    gl.compileShader( fragment_shader );\n\n    if( !gl.getShaderParameter(fragment_shader, gl.COMPILE_STATUS) ) {\n        console.log('Failed to compile fragment shader' + \n                     gl.getShaderInfoLog(fragment_shader));\n        gl.deleteShader(fragment_shader);\n        return;\n    }\n\n    program = gl.createProgram();\n\n    gl.attachShader(program, vertex_shader);\n    gl.attachShader(program, fragment_shader);\n    gl.linkProgram(program);\n\n    if( !gl.getProgramParameter(program, gl.LINK_STATUS) ) {\n        console.log('Failed to link program');\n        gl.deleteProgram(program);\n        return;\n    }\n\n    gl.useProgram(program);\n\n    u_texture_location = gl.getUniformLocation(program, \"u_texture\");\n    u_translate_location = gl.getUniformLocation(program, \n    \"u_translate\");\n\n    a_position_location = gl.getAttribLocation(program, \"a_position\");\n    a_texcoord_location = gl.getAttribLocation(program, \"a_texcoord\");\n\n    vertex_texture_buffer = gl.createBuffer();\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertex_texture_buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, vertex_texture_data, \n    gl.STATIC_DRAW);\n\n    gl.enableVertexAttribArray(a_position_location);\n    gl.vertexAttribPointer(a_position_location, 2, gl.FLOAT, false, \n    STRIDE, XY_OFFSET);\n\n    gl.enableVertexAttribArray(a_texcoord_location);\n    gl.vertexAttribPointer(a_texcoord_location, 2, gl.FLOAT, false, \n    STRIDE, UV_OFFSET);\n\n    texture = gl.createTexture();\n\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\n    img = new Image();\n    img.addEventListener('load', function() {\n        image_width = img.width;\n        image_height = img.height;\n\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA,\n        gl.UNSIGNED_BYTE, img );\n    });\n    img.src = \"spaceship.png\";\n\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n}\n```", "```cpp\ncanvas = document.getElementById('canvas');\n\ngl = canvas.getContext(\"webgl\", { alpha: false }) ||\n                        canvas.getContext(\"experimental-webgl\", { \n                        alpha: false });\nif (!gl) {\n    console.log(\"No WebGL support!\");\n    return;\n}\n```", "```cpp\ngl.blendFunc( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA );\ngl.enable( gl.BLEND );\n```", "```cpp\nvar vertex_shader = gl.createShader(gl.VERTEX_SHADER);\ngl.shaderSource( vertex_shader, vertex_shader_code );\ngl.compileShader( vertex_shader );\n\nif( !gl.getShaderParameter(vertex_shader, gl.COMPILE_STATUS) ) {\n    console.log('Failed to compile vertex shader' + \n    gl.getShaderInfoLog(vertex_shader));\n    gl.deleteShader(vertex_shader);\n    return;\n}\n\nvar fragment_shader = gl.createShader(gl.FRAGMENT_SHADER);\ngl.shaderSource( fragment_shader, fragment_shader_code );\ngl.compileShader( fragment_shader );\n\nif( !gl.getShaderParameter(fragment_shader, gl.COMPILE_STATUS) ) {\n    console.log('Failed to compile fragment shader' + \n    gl.getShaderInfoLog(fragment_shader));\n    gl.deleteShader(fragment_shader);\n    return;\n}\n\nprogram = gl.createProgram();\ngl.attachShader(program, vertex_shader);\ngl.attachShader(program, fragment_shader);\ngl.linkProgram(program);\n\nif( !gl.getProgramParameter(program, gl.LINK_STATUS) ) {\n    console.log('Failed to link program');\n    gl.deleteProgram(program);\n    return;\n}\ngl.useProgram(program);\n```", "```cpp\nu_texture_location = gl.getUniformLocation(program, \"u_texture\");\nu_translate_location = gl.getUniformLocation(program, \"u_translate\");\n```", "```cpp\na_position_location = gl.getAttribLocation(program, \"a_position\");\na_texcoord_location = gl.getAttribLocation(program, \"a_texcoord\");\n```", "```cpp\nvertex_texture_buffer = gl.createBuffer();\n\ngl.bindBuffer(gl.ARRAY_BUFFER, vertex_texture_buffer);\ngl.bufferData(gl.ARRAY_BUFFER, vertex_texture_data, \n              gl.STATIC_DRAW);\n\ngl.enableVertexAttribArray(a_position_location);\ngl.vertexAttribPointer(a_position_location, 2, gl.FLOAT, false, \n                        STRIDE, XY_OFFSET);\n\ngl.enableVertexAttribArray(a_texcoord_location);\ngl.vertexAttribPointer(a_texcoord_location, 2, gl.FLOAT, false, \n                        STRIDE, UV_OFFSET);\n```", "```cpp\ntexture = gl.createTexture();\ngl.bindTexture(gl.TEXTURE_2D, texture);\n```", "```cpp\ngl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\ngl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n\ngl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\ngl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n```", "```cpp\nimg = new Image();\n\nimg.addEventListener('load', function() {\n    image_width = img.width;\n    image_height = img.height;\n\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA,\n                    gl.UNSIGNED_BYTE, img );\n});\n\nimg.src = \"spaceship.png\";\n```", "```cpp\ngl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n```", "```cpp\nfunction ShipPosition( ship_x, ship_y ) {\n    if( image_width == 0 ) {\n        return;\n    }\n\n    gl.uniform4fv(u_translate_location, [ship_x, ship_y, 0.0, 0.0]);\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n}\n\n```", "```cpp\nif( image_width == 0 ) {\n    return;\n}\n```", "```cpp\ngl.uniform4fv(u_translate_location, [ship_x, ship_y, 0.0, 0.0]);\n```", "```cpp\ngl.drawArrays(gl.TRIANGLES, 0, 6);\n```", "```cpp\nvoid MoveShip() {\n    ship_x += 0.002;\n    ship_y += 0.001;\n\n    if( ship_x >= 1.16 ) {\n        ship_x = -1.16;\n    }\n\n    if( ship_y >= 1.21 ) {\n        ship_y = -1.21;\n    }\n\n    EM_ASM( ShipPosition($0, $1), ship_x, ship_y );\n}\n```", "```cpp\nship_x += 0.002;\nship_y += 0.001;\n```", "```cpp\nif( ship_x >= 1.16 ) {\n    ship_x = -1.16;\n}\n\nif( ship_y >= 1.21 ) {\n    ship_y = -1.21;\n}\n```", "```cpp\nemcc webgl.c -o webgl.html --shell-file webgl_shell.html\n```"]