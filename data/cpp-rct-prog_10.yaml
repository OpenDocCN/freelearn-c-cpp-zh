- en: Creating Custom Operators in RxCpp
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在RxCpp中创建自定义操作符
- en: 'In the last three chapters, we learned about the RxCpp library and its programming
    model. We also applied what we learned, in the context of GUI programming. From
    a mental model perspective, any developer who wants to write programs in a reactive
    manner has to understand Observable, Observer, and the operators that work between
    them. Of course, Schedulers and Subjects are important as well. The bulk of the
    logic of reactive programs resides in operators. The RxCpp library provides a
    lot of built-in (stock) operators as part of its implementation. We have already
    used some of them in our programs. In this chapter, we will learn how we can implement
    custom operators. To write custom operators, we need to delve deep into some advanced
    topics related to the RxCpp library. The topics covered in this chapter are the
    following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的三章中，我们学习了RxCpp库及其编程模型。我们还将所学内容应用到了GUI编程的上下文中。从心智模型的角度来看，任何想以响应式方式编写程序的开发人员都必须理解可观察对象、观察者以及它们之间的操作符。当然，调度器和主题也很重要。响应式程序的大部分逻辑都驻留在操作符中。RxCpp库作为其实现的一部分提供了许多内置（库存）操作符。我们已经在我们的程序中使用了其中一些。在本章中，我们将学习如何实现自定义操作符。要编写自定义操作符，我们需要深入了解与RxCpp库相关的一些高级主题。本章涵盖的主题如下：
- en: Philosophy of Rx operators
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Rx操作符的哲学
- en: Chaining stock operators
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链接库存操作符
- en: Writing basic RxCpp operators
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写基本的RxCpp操作符
- en: Writing different genres of custom operators
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写不同类型的自定义操作符
- en: Custom operators using the `lift<T>` meta operator
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`lift<T>`元操作符编写自定义操作符
- en: Adding operators to the RxCpp library source code
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向RxCpp库源代码中添加操作符
- en: Philosophy of Rx operators
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Rx操作符的哲学
- en: If you take any reactive program, we see a chain of operators stacked between
    the Observable and the Observer. The developers use a fluent interface to chain
    operators. In RxCpp, one can use a dot (`.`) or pipe (`|`) to perform the operator
    chaining. From a software interface point of view, every operator takes an Observable
    and returns an Observable of the same kind or a different kind.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看任何响应式程序，我们会看到一系列操作符堆叠在可观察对象和观察者之间。开发人员使用流畅接口来链接操作符。在RxCpp中，可以使用点（`.`）或管道（`|`）来执行操作符链式调用。从软件接口的角度来看，每个操作符都接受一个可观察对象，并返回一个相同类型或不同类型的可观察对象。
- en: 'The general usage of an RxCpp Observable/Observer interaction (given as pseudo-code)
    is as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: RxCpp可观察对象/观察者交互的一般用法（伪代码）如下：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Even though we are using fluent interfaces when it comes to operator chaining,
    we are effectively composing functions together. To compose functions together,
    the return value of a function should be type compatible with the parameter of
    the function that comes in the composition chain.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在操作符链式调用时我们使用流畅接口，但实际上我们是在将函数组合在一起。为了将函数组合在一起，函数的返回值应该与组合链中的函数的参数类型兼容。
- en: An operator takes an Observable as a parameter and returns another Observable.
    There are some cases where it returns a value other than the Observable. Only
    those operators that return an Observable can be part of a process called operator
    chaining.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 操作符以可观察对象作为参数，并返回另一个可观察对象。有一些情况下，它返回的是除可观察对象之外的值。只有那些返回可观察对象的操作符才能成为操作符链式调用的一部分。
- en: To write a new operator that can be part of the operator chaining method, the
    best way is to add them as a method of the `observable<T>` type. However, writing
    a production-quality operator that can run in different contexts is best left
    to experts in RxCpp internals. Another option is to use the `lift<t>` (`...`)
    operator available in the RxCpp library. We will cover both these strategies in
    this chapter.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要编写一个新的操作符，使其成为操作符链式调用方法的一部分，最好的方法是将它们作为`observable<T>`类型的方法添加。然而，编写一个可以在不同上下文中运行的生产质量操作符最好留给RxCpp内部的专家。另一个选择是使用RxCpp库中提供的`lift<t>`（`...`）操作符。我们将在本章中涵盖这两种策略。
- en: Another very important property that every operator implementation should have
    is that they should be side effect-free. At least, they should not mutate contents
    of the input Observable. In other words, the function or functor that acts as
    an operator should be a pure function.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 每个操作符实现都应该具有的另一个非常重要的属性是它们应该是无副作用的。至少，它们不应该改变输入可观察对象的内容。换句话说，充当操作符的函数或函数对象应该是一个纯函数。
- en: Chaining stock operators
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 链接库存操作符
- en: We have already learned that RxCpp operators operate on Observables (received
    as input) and return Observables. This allows these operators to be invoked one
    after the other using operator chaining. Each individual operator in the chain
    transforms elements in the stream received from the previous operator. The source
    stream is not mutated in the process. We use the fluent interface syntax when
    chaining operators.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学到了RxCpp操作符是在可观察对象上操作的（作为输入接收），并返回可观察对象。这使得这些操作符可以通过操作符链式调用一一调用。链中的每个操作符都会转换从前一个操作符接收到的流中的元素。源流在这个过程中不会被改变。在链式调用操作符时，我们使用流畅接口语法。
- en: Developers usually use the fluent interface in the context of the consumption
    of classes that implement the GOF Builder pattern. Builder pattern implementations
    are implemented in an order-independent manner. Even though the syntax of operator
    chaining is similar, the order in which operators are invoked does matter in the
    reactive world.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员通常在实现GOF构建器模式的类的消费上使用流畅接口。构建器模式的实现是以无序的方式实现的。尽管操作符链式调用的语法类似，但在响应式世界中操作符被调用的顺序确实很重要。
- en: 'Let''s write a simple program that will help us understand the significance
    of the order of execution in Observable operator chaining. In this particular
    example, we have an Observable stream where we apply the map operator twice: once
    to find out the square, and then to find two instances of a value. We apply the
    square function first, followed by the twice function:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写一个简单的程序，帮助我们理解可观察对象操作符链式执行顺序的重要性。在这个特定的例子中，我们有一个可观察流，在这个流中我们应用map操作符两次：一次是为了找出平方，然后是为了找出值的两个实例。我们先应用平方函数，然后是两次函数：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The preceding program will produce the following output:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的程序将产生以下输出：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, let''s reverse the order of application (scaling by `2`, twice, followed
    by the square of the argument), and then peruse the output to see that we will
    get a different output (in the first case, square was applied first, then scaling
    by `2`). The following program will explain the order of execution, if we compare
    the output generated by the program with the previous program:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们颠倒应用顺序（先缩放2倍，两次，然后是参数的平方），然后查看输出，看看我们会得到不同的输出（在第一种情况下，先应用了平方，然后是缩放2倍）。以下程序将解释执行顺序，如果我们将程序生成的输出与之前的程序进行比较：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The output produced by the program is given here:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 程序产生的输出如下：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In C++, we can compose functions together very well because of Lambda functions
    and the lazy evaluation of Lambda functions. The RxCpp library exploits this fact
    while implementing operators. If there are three functions (`F`, `G`, `H` ) that
    take `observable<T>` as the input parameter and return `observable<T>`, we can
    compose them symbolically as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在C++中，我们可以很好地组合函数，因为Lambda函数和Lambda函数的惰性评估。RxCpp库利用了这一事实来实现操作符。如果有三个函数（`F`、`G`、`H`）以`observable<T>`作为输入参数并返回`observable<T>`，我们可以象征性地将它们组合如下：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If we are using operator chaining, this can be written as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用操作符链，可以写成如下形式：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We have now learned that operator chaining is effectively doing operator composition.
    Both produce similar results, but operator chaining is more readable and intuitive.
    One purpose of this section is to establish the fact that operator composition
    and operator chaining provide similar functionality. The operators that we implement
    initially can be composed together (cannot be chained) and we will learn how to
    create operators that are amenable to operator chaining.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学会了操作符链实际上是在进行操作符组合。两者产生类似的结果，但操作符链更易读和直观。本节的一个目的是建立这样一个事实，即操作符组合和操作符链提供类似的功能。最初我们实现的操作符可以组合在一起（不能被链式调用），我们将学习如何创建适合操作符链的操作符。
- en: Writing basic RxCpp custom operators
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写基本的RxCpp自定义操作符
- en: In the previous section, we covered the topic of operator chaining. Operator
    chaining was possible because, the stock operators are implemented as part of
    the `observable<T>` type. The operators that we are going to implement initially
    cannot be part of the operator chaining strategy. In this section, we will implement
    some RxCpp operators that can transform an Observable and return another Observable.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们讨论了操作符链。操作符链是可能的，因为库存操作符是作为`observable<T>`类型的一部分实现的。我们最初要实现的操作符不能成为操作符链策略的一部分。在本节中，我们将实现一些RxCpp操作符，可以转换Observable并返回另一个Observable。
- en: Writing an RxCpp operator as a function
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将RxCpp操作符写为函数
- en: 'To kickstart the discussion, let''s write a simple operator that works on observable<string>.
    The operator just prepends the literal text `Hello` before each item in the stream:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始讨论，让我们编写一个简单的操作符，它可以在observable<string>上工作。该操作符只是在流中的每个项目之前添加文字`Hello`：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The custom operator that we have implemented is written to demonstrate how
    you can write an operator that can work on an Observable. The operator written
    has to be invoked using the function semantics, and the implementation is not
    fit for operator chaining. Now that we have implemented an operator, let''s write
    a main function to test how the operator works:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实现的自定义操作符是为了演示如何编写一个可以在Observable上工作的操作符。编写的操作符必须使用函数语义来调用，并且实现不适合操作符链。既然我们已经实现了一个操作符，让我们编写一个主函数来测试操作符的工作方式：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The program will produce the following output:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 程序将产生以下输出：
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Writing an RxCpp operator as a Lambda
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将RxCpp操作符写为Lambda函数
- en: 'We have written our first custom operator as a `unary` function. All operators
    are `unary` functions that take Observables as a parameter. The function took
    `observable<string>` as a parameter and returned another `observable<string>`.
    We can achieve the same effect by writing an operator (inline) as a Lambda. Let''s
    see how it can be done:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经将我们的第一个自定义操作符写成了一个`unary`函数。所有操作符都是以Observables作为参数的`unary`函数。该函数以`observable<string>`作为参数，并返回另一个`observable<string>`。我们可以通过将操作符（内联）作为Lambda来实现相同的效果。让我们看看如何做到：
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output of the program is given here:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 程序的输出如下：
- en: '[PRE11]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The output shows that the program behavior is identical whether one uses an
    ordinary function or the Lambda function. The advantage of the Lambda function
    is the call site creation and consumption of functions.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示，程序行为是相同的，无论是使用普通函数还是Lambda函数。Lambda函数的优势在于调用站点的创建和函数的消耗。
- en: Composing custom RxCpp operators
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组合自定义RxCpp操作符
- en: 'We have already learned about function-composition in this book ([Chapter 2](e1c95513-a3a7-40f2-ac25-9f95cbd9a2e6.xhtml)*, A
    Tour of Modern C++ and Its Key Idioms*). Function composition is possible when
    the return value of a function is type compatible with the input parameter of
    another function. In the case of operators, since most of them return Observables
    and take Observables as a parameter, they are compatible for function composition.
    In this section, our operators are compatible for composition, but they cannot
    be chained yet. Let''s see how we can compose operators:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在本书中学习了函数组合（[第2章](e1c95513-a3a7-40f2-ac25-9f95cbd9a2e6.xhtml)*，现代C++及其关键习语之旅*）。函数组合是可能的，当一个函数的返回值与另一个函数的输入参数兼容时。在操作符的情况下，由于大多数操作符返回Observables并将Observables作为参数，它们适合函数组合。在本节中，我们的操作符适合组合，但它们还不能被链式调用。让我们看看如何组合操作符：
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The output of the program is given here:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 程序的输出如下：
- en: '[PRE13]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Different genres of custom operators
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不同类型的自定义操作符
- en: 'The RxCpp library contains different genres of operators as part of the stock
    offering. The default collection of RxCpp operators is enough for most applications.
    The different genres of available operators are as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: RxCpp库包含作为库存提供的不同类型的运算符。RxCpp的默认运算符集对于大多数应用程序来说已经足够了。可用运算符的不同类型如下：
- en: Creation operators
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建运算符
- en: Transformation operators
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转换运算符
- en: Filtering operators
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过滤运算符
- en: Combining operators
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组合运算符
- en: Error-handling operators
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误处理运算符
- en: Utility operators
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实用运算符
- en: Boolean operators
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布尔运算符
- en: Mathematical operators
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数学运算符
- en: 'The classification of operators gives developers a nice framework for choosing
    the appropriate operator for the context. In this section, we will implement the
    following:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 运算符的分类为开发人员提供了一个选择适当运算符的良好框架。在本节中，我们将实现以下内容：
- en: Custom creational operators
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义创建运算符
- en: Custom transformation operators
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义转换运算符
- en: Custom operations that involve Schedulers
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 涉及调度程序的自定义操作
- en: Writing a custom creational operator
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写自定义创建运算符
- en: 'The majority of RxCpp operator functions accept Observables and return an Observable
    to achieve composition of operators. We need to do some extra work to make the
    composition in a chainable fashion (in the next section, we will cover `lift<t>`
    and the topic of adding operators to the `[observable<T>]` Observable in the `RxCpp`
    library). The operators we implement in this section will help us create an Observable
    from the input data. We can create an Observable stream of any type,from individual
    value of the type, from a range of values, from an iterator to a STL container,
    from another Observable, and so on. Let''s discuss an example program that accepts
    an STL container and creates an Observable, followed by some transformations:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数RxCpp运算符函数接受Observable并返回一个Observable以实现运算符的组合。我们需要做一些额外的工作，以使组合具有可链式的方式（在下一节中，我们将介绍`lift<t>`和向`RxCpp`库中的`[observable<T>]`
    Observable添加运算符的主题）。我们在本节中实现的运算符将帮助我们从输入数据创建一个Observable。我们可以从任何类型的单个值、一系列值、STL容器的迭代器、另一个Observable等创建Observable流。让我们讨论一个接受STL容器并创建Observable的示例程序，然后进行一些转换：
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `helloNames()` function accepts any standard library container and creates
    an Observable of the type string (`observable<string>`). The Observable is then
    filtered to get items longer than five characters to prepend the `Hello` string to
    each item. The exceptions that occur will be translated by the use of the standard
    RxCpp operator, `on_error_resume_next()`: Now, let''s write the main program to
    see how this operator can be used:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`helloNames()`函数接受任何标准库容器并创建一个字符串类型的Observable（`observable<string>`）。然后对Observable进行过滤，以获取长度超过五个字符的项目，并在每个项目前加上`Hello`字符串。发生的异常将通过使用标准RxCpp运算符`on_error_resume_next()`进行转换：现在，让我们编写主程序来看看如何使用这个运算符：'
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The list of names is passed as an argument into the newly defined operator
    and we get the following output:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 名字列表作为参数传递到新定义的运算符中，我们得到以下输出：
- en: '[PRE16]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Writing a custom transformation operator
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写自定义转换运算符
- en: 'Let''s write a simple program to implement a custom operator by combining other
    operators, where we filter stream of numbers for odd numbers, transform numbers
    into its square, and take only first three elements from the stream:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写一个简单的程序，通过组合其他运算符来实现一个自定义运算符，在这个程序中，我们过滤奇数的数字流，将数字转换为其平方，并仅取流中的前三个元素：
- en: '[PRE17]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In this example, the custom operator is implemented with a different approach.
    Instead of returning a simple Observable of the desired type, the operator function
    returns a function object that takes and returns an Observable of the *int* type.
    This allows the user to perform the execution of higher-order functions using
    the pipe (`|`) operator. The ability to implement custom operators using user-defined
    transformations and combining them with existing operators comes in very handy
    when writing nontrivial programs. It is usually better to compose new operators
    by combining existing ones rather than implementing a new operator from the scratch
    (do not re-invent the wheel!).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，自定义运算符是用不同的方法实现的。运算符函数不是返回所需类型的简单Observable，而是返回一个接受并返回*int*类型的Observable的函数对象。这允许用户使用管道(`|`)运算符执行高阶函数的执行。在编写复杂程序时，使用用户定义的转换实现自定义运算符并将其与现有运算符组合在一起非常方便。通常最好通过组合现有运算符来组合新运算符，而不是从头实现新运算符（不要重复造轮子！）。
- en: Writing a custom operator that involves Schedulers
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写涉及调度程序的自定义运算符
- en: 'The RxCpp library is single-threaded by default, and RxCpp will schedule execution
    in the thread where we called the subscriber method. There are some operators
    that take a Scheduler as a parameter, where execution can happen in the thread
    managed by the Scheduler. Let''s write a program to implement a custom operator
    to work with a Scheduler parameter:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: RxCpp库默认是单线程的，RxCpp将在调用订阅方法的线程中安排执行。有一些运算符接受调度程序作为参数，执行可以在调度程序管理的线程中进行。让我们编写一个程序来实现一个自定义运算符，以处理调度程序参数：
- en: '[PRE18]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Writing custom operators that can be chained
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写可以链式组合的自定义运算符
- en: 'One of the key benefits of built-in operators provided by the RxCpp library
    is the possibility to chain operators using fluent interfaces. This significantly
    improves code readability. The custom operators that we''ve created so far can
    be composed together, but cannot be chained together in the way the standard operator
    can be chained. In this section, we will implement operators that can be chained
    by using the following methods:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: RxCpp库提供的内置运算符的一个关键优点是可以使用流畅的接口链式操作运算符。这显著提高了代码的可读性。到目前为止，我们创建的自定义运算符可以组合在一起，但不能像标准运算符那样链式组合。在本节中，我们将实现可以使用以下方法进行链式组合的运算符：
- en: Using the `lift<T>` meta operator
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`lift<T>`元运算符
- en: Writing a new operator by adding code to the RxCpp library
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过向RxCpp库添加代码来编写新运算符
- en: Using the lift<t> operator to write a custom operator
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用lift<t>运算符编写自定义运算符
- en: The RxCpp library has an operator as part of the `observable<T>` implementation,
    called `lift` (`lift<t>`). In fact, it can be called a meta-operator as it has
    the capability to convert a `unary` function or functor that takes an ordinary
    variable (`int`, `float`, `double`, `struct`, and so on) to be compatible for
    processing `observable<T>` Streams. The RxCpp implementation of `observable<T>::lift`
    expects a Lambda that takes `rxcpp::subscriber<T>` as a parameter, and within
    the body of the Lambda, we can apply an action (a Lambda or a function). In this
    section, one can get an overview of the purpose of the `lift<t>` operator.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: RxCpp库中的`observable<T>`实现中有一个名为`lift`（`lift<t>`）的操作符。实际上，它可以被称为元操作符，因为它具有将接受普通变量（`int`、`float`、`double`、`struct`等）的`一元`函数或函数对象转换为兼容处理`observable<T>`流的能力。`observable<T>::lift`的RxCpp实现期望一个Lambda，该Lambda以`rxcpp::subscriber<T>`作为参数，并且在Lambda的主体内，我们可以应用一个操作（Lambda或函数）。在本节中，可以对`lift<t>`操作符的目的有一个概述。
- en: 'The lift operator takes any function or Lambda that will take a Subscriber
    for an Observable and produce a new Subscriber. This is intended to allow externally-defined
    operators that use `make_subscriber` to be connected into the composition chain.
    The function prototype of the lift is as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: lift操作符接受任何函数或Lambda，该函数或Lambda将接受Observable的Subscriber并产生一个新的Subscriber。这旨在允许使用`make_subscriber`的外部定义的操作符连接到组合链中。lift的函数原型如下：
- en: '[PRE19]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The signature and body of the Lambda expected by `lift<t>` is given here:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`lift<t>`期望的Lambda的签名和主体如下：'
- en: '[PRE20]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: To understand the workings of the `lift<T>` operator, let's write a program
    that uses it. The advantage of `lift<T>` is that the operator created can be part
    of the operator chaining infrastructure of the RxCpp library.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解`lift<T>`操作符的工作原理，让我们编写一个使用它的程序。`lift<T>`的优势在于所创建的操作符可以成为RxCpp库的操作符链式结构的一部分。
- en: '[PRE21]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: We have now learned how we can use the `lift<t>` operator. The `observable<T>`
    instance and its lift method take a Lambda with a specific parameter type and
    produce an `observable<T>`. The advantage of `lift<T>` is that we can use operator
    chaining.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经学会了如何使用`lift<t>`操作符。`observable<T>`实例及其lift方法接受具有特定参数类型的Lambda并产生一个`observable<T>`。`lift<T>`的优势在于我们可以使用操作符链式结构。
- en: Converting an arbitrary Lambda to a custom Rx operator
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将任意Lambda转换为自定义Rx操作符
- en: In the previous section, we learned that it is possible to use the `lift<t>`
    operator to implement custom operators that can be part of the operator chaining
    infrastructure of the RxCpp library. The workings of `lift<T>` are a bit complicated
    and we will write an `Adapter` class to convert an arbitrary Lambda that takes
    a parameter (of the basic types) to a form where the `lift<T>` operator can be
    applied.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我们了解到可以使用`lift<t>`操作符来实现自定义操作符，这些操作符可以成为RxCpp库的操作符链式结构的一部分。`lift<T>`的工作有点复杂，我们将编写一个`Adapter`类来将接受基本类型参数的任意Lambda转换为`lift<T>`操作符可以应用的形式。
- en: 'The adapter code will help us to make calls such as this:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 适配器代码将帮助我们进行这样的调用：
- en: '[PRE22]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Let''s write an `Adapter` class implementation and a generic function wrapper
    on top of it to be consumed in a program:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写一个`Adapter`类实现和一个通用函数包装器，以便在程序中使用：
- en: '[PRE23]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In RxCpp operator implementations, we will have an internal Observer that intercepts
    the traffic and applies some logic on items, before passing on the control to
    the next operator in the chain. The `action_observer` class is structured along
    those lines. Since we are using Lambdas (lazy evaluation), the execution will
    happen only when the Scheduler triggers the execution, whenever data is received
    in the pipeline:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在RxCpp操作符实现中，我们将有一个内部Observer拦截流量，并在将控制传递给链中的下一个操作符之前对项目应用一些逻辑。`action_observer`类就是按照这些方式结构的。由于我们使用Lambda（延迟评估），只有当调度程序触发执行时，流水线中接收到数据时才会发生执行：
- en: '[PRE24]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now that we have learned how to implement an `Adapter` class to convert a Lambda
    into a form that `lift<T>` can accept, let''s write a program that demonstrates
    how we can leverage the preceding code:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学会了如何实现`Adapter`类以将Lambda转换为`lift<T>`可以接受的形式，让我们编写一个程序来演示如何利用前面的代码：
- en: '[PRE25]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The output of the program is given here:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 程序的输出如下：
- en: '[PRE26]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Creating a custom RxCpp operator in the library
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在库中创建自定义RxCpp操作符
- en: Every operator in the `RxCpp` library is defined under `rxcpp::operators` namespaces.
    Within the `rxcpp::operators` namespace, library designers have created a nested
    namespace called details, where implementations of the operator logic are typically
    specified. To demonstrate the implementation of an operator from scratch, we have
    cloned the implementation of the map operator to create another operator, by the
    name of `eval`. The semantics of `eval` are the same as those of the `map` operator.
    The source code listing is available in a folder related to this particular chapter
    in the GitHub repository associated with this book.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`RxCpp`库中的每个操作符都在`rxcpp::operators`命名空间下定义。在`rxcpp::operators`命名空间内，库设计者创建了一个名为details的嵌套命名空间，其中通常指定了操作符逻辑的实现。为了演示从头开始实现操作符，我们克隆了map操作符的实现，创建了另一个名为`eval`的操作符。`eval`的语义与`map`操作符相同。源代码清单可在与本书相关的GitHub存储库中的特定章节文件夹中找到。'
- en: 'We decided to move the book''s code to the GitHub repository because the listing
    is a bit long and doesn''t contribute much to the conceptual understanding of
    the implementation of an operator in the `RxCpp` library. The `liftaction` implementation
    outlined earlier shows us how to write an internal Observer. There is a standard
    pattern that every operator implementation follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们决定将书中的代码移动到GitHub存储库，因为清单有点长，对于理解在`RxCpp`库中实现操作符的概念没有太大贡献。前面概述的`liftaction`实现向我们展示了如何编写内部Observer。每个操作符实现都遵循一个标准模式：
- en: It subscribes to the source Observable by creating a private Observer
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它通过创建一个私有Observer订阅源Observable
- en: It transforms elements of the Observable according to the purpose of the operator
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据操作符的目的转换Observable的元素
- en: It pushes the transformed value to its own subscribers
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将转换后的值推送给其自己的订阅者
- en: 'The skeleton source listing of the `eval` operator implementation is given
    here. The implementation of the source file contains the following:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`eval`运算符实现的骨架源代码如下。源文件的实现包括以下内容：'
- en: '| **Source file ** | **Key changes** |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| **源文件** | **关键更改** |'
- en: '| `rx-eval.hpp` | Implementation of the `eval` operator:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '| `rx-eval.hpp` | `eval`运算符的实现：'
- en: '[PRE27]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '|'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `rx-includes.h` | Modified header files with the inclusion of `Rx-eval.hpp`.`rx-includes.h`
    will add an additional entry into the file, which goes as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '| `rx-includes.h` | 修改后的头文件，包含了`Rx-eval.hpp`的引入。`rx-includes.h`将在文件中添加一个额外的条目，如下所示：'
- en: '[PRE28]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '|'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `rx-operators.h` | Modified header file with the `eval_tag` definition. `rx-operators.h`
    contains the following tag entry:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '| `rx-operators.h` | 修改后的头文件，包含了`eval_tag`的定义。`rx-operators.h`包含以下标签条目：'
- en: '[PRE29]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '|'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `rx-observables.h` | Modified header file with the definition of the `eval`
    operator:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '| `rx-observables.h` | 修改后的头文件，其中包含`eval`运算符的定义：'
- en: '[PRE30]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '|'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 'Let''s write a program to use the `eval` operator. The prototype for the `eval`
    operator (like `map`) is as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写一个使用`eval`运算符的程序。`eval`运算符的原型（类似于`map`）如下：
- en: '[PRE31]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'You can check the source code of the implementation to better understand the
    `eval` operator. Now, let''s write a program that leverages the `eval` operator:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以检查实现的源代码，以更好地理解`eval`运算符。现在，让我们编写一个利用`eval`运算符的程序：
- en: '[PRE32]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The output of the program is given here:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 程序的输出如下：
- en: '[PRE33]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: To write custom operators that are implemented in a generic manner requires
    deep expertise in RxCpp internals. You need to understand the implementation of
    some stock operators before attempting a custom operator. The operator we wrote
    can be a starting point for you to implement such operators. Once again, writing
    custom operators from scratch should be a last resort!
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 编写以通用方式实现的自定义运算符需要对RxCpp内部有深入的了解。在尝试自定义运算符之前，您需要了解一些基本运算符的实现。我们编写的运算符可以成为您实现此类运算符的起点。再次强调，从头开始编写自定义运算符应该是最后的选择！
- en: Summary
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to write custom operators. We started by writing
    simple operators that can perform basic tasks. Even though the operators we wrote
    (initially) were composable, we were not able to chain them together like standard
    RxCpp operators. After writing different genres of operators, we implemented chainable
    custom operators using the `lift<T>` meta operator. Finally, we saw how we can
    add an operator to `observable<T>` as well. In the next chapter, we'll delve into
    the world of design patterns and idioms for Rx programming. We'll start with GOF
    design patterns and implement different reactive programming patterns.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何编写自定义运算符。我们首先编写了可以执行基本任务的简单运算符。尽管我们编写的运算符（最初）是可组合的，但我们无法像标准的RxCpp运算符那样将它们链接在一起。在编写了不同类型的运算符之后，我们使用`lift<T>`元运算符实现了可链接的自定义运算符。最后，我们看到了如何将运算符添加到`observable<T>`中。在下一章中，我们将深入探讨Rx编程的设计模式和习惯用法。我们将从GOF设计模式开始，并实现不同的响应式编程模式。
