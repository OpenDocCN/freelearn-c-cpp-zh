- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Debugging a Multiplayer Game
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试多玩家游戏
- en: Debugging an application is a crucial aspect of programming in general, and
    this holds particularly true when dealing with multiplayer game programming. The
    debugging process helps developers identify and resolve any issues that may arise
    when running a networked application or game. By understanding the basics of network
    debugging, programmers can ensure their games run smoothly and efficiently on
    all platforms.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 调试应用程序是编程的一般关键方面，尤其是在处理多玩家游戏编程时这一点尤其正确。调试过程帮助开发者识别和解决在运行网络应用程序或游戏时可能出现的任何问题。通过理解网络调试的基本知识，程序员可以确保他们的游戏在所有平台上都能平稳高效地运行。
- en: When it comes to debugging networks with Unreal Engine, there are several tools
    available to help make the process easier for programmers. The first step in this
    process is setting up logging within your project settings so that you can track
    errors as they occur during the development or testing phases of your game’s life
    cycle.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到使用虚幻引擎调试网络时，有几种工具可以帮助程序员使这个过程更容易。这个过程的第一步是在您的项目设置中设置日志记录，以便您可以在游戏的生命周期开发或测试阶段跟踪发生的错误。
- en: Additionally, developing an emulated multiplayer environment can be a highly
    effective method of replicating real-life scenarios, while simultaneously assessing
    the operational efficacy of your systems.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，开发一个模拟的多玩家环境可以是一种非常有效的方法来复制现实生活中的场景，同时评估您系统的操作效率。
- en: What’s more, tools such as the Network Profiler will provide detailed insights
    into critical metrics such as connection speeds and latencies, enabling the identification
    of potential issues and areas that require improvement.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，像网络分析器这样的工具将提供对关键指标（如连接速度和延迟）的详细洞察，从而能够识别潜在问题和需要改进的区域。
- en: As you progress through this chapter, you will acquire a comprehensive understanding
    of the optimization techniques, enabling you to fine-tune the performance of your
    project and ensure a seamless multiplayer game experience. Furthermore, you will
    learn how to effectively isolate and troubleshoot any existing issues that may
    disrupt the overall gameplay experience.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 随着您在本章中的进展，您将获得对优化技术的全面理解，这将使您能够微调您项目的性能并确保无缝的多玩家游戏体验。此外，您将学习如何有效地隔离和解决可能破坏整体游戏体验的任何现有问题。
- en: 'So, in this chapter, I will guide you through the following sections:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在本章中，我将引导您了解以下部分：
- en: Introducing network debugging
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍网络调试
- en: Emulating a networked environment
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模拟网络环境
- en: Using the Network Profiler
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用网络分析器
- en: Improving performance and bandwidth utilization
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提高性能和带宽利用率
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To follow the topics presented in this chapter, you should have completed the
    previous ones and understood their content.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟进本章介绍的主题，您应该已经完成了前面的章节，并理解了它们的内容。
- en: 'Additionally, if you would prefer to begin with code from the companion repository
    for this book, you can download the `.zip` project files provided in this book’s
    companion project repository: [https://github.com/PacktPublishing/Multiplayer-Game-Development-with-Unreal-Engine-5](https://github.com/PacktPublishing/Multiplayer-Game-Development-with-Unreal-Engine-5).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果您希望从本书的配套仓库开始编写代码，您可以下载本书配套项目仓库中提供的`.zip`项目文件：[https://github.com/PacktPublishing/Multiplayer-Game-Development-with-Unreal-Engine-5](https://github.com/PacktPublishing/Multiplayer-Game-Development-with-Unreal-Engine-5)。
- en: You can download the files that are up to date with the end of the previous
    chapter by clicking the `Unreal Shadows –` [*Chapter 10*](B18203_10.xhtml#_idTextAnchor196)`End`
    link.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过点击`Unreal Shadows –` [*第10章*](B18203_10.xhtml#_idTextAnchor196)`结束`链接下载与上一章结尾同步的文件。
- en: Introducing network debugging
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍网络调试
- en: Network testing and debugging is an essential skill for any professional working
    on multiplayer games. It requires a deep understanding of networking protocols
    and technologies, as well as an ability to identify and diagnose problems quickly.
    Additionally, it involves troubleshooting both client-side issues on the user’s
    device and server-side issues on the game’s servers. By mastering this skill,
    you can ensure that games are running smoothly with minimal latency for all players
    involved.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 网络测试和调试是任何从事多人游戏工作的专业人士必备的技能。这需要深入理解网络协议和技术，以及快速识别和诊断问题的能力。此外，它还涉及在用户的设备上解决客户端问题，以及在游戏服务器上解决服务器端问题。通过掌握这项技能，你可以确保游戏对所有玩家来说运行顺畅，延迟最小。
- en: 'As you embark on the development of a networked game, it is imperative to consider
    the following obstacles that come with creating a seamless and engaging multiplayer
    experience for your audience, as opposed to a single-player game:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始开发网络游戏时，考虑以下障碍是至关重要的，这些障碍与为你的观众创造无缝和引人入胜的多人游戏体验相关，而不是单人游戏：
- en: You will need to debug multiple running instances of the project
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你需要调试多个运行的项目实例
- en: Network communication, by its nature, may be unreliable and unstable, and different
    clients may have different issues
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络通信由于其本质可能不可靠和不稳定，不同的客户端可能会有不同的问题
- en: A client will work differently as opposed to a server
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端与服务器的工作方式不同
- en: Unreal Engine comes equipped with a range of dedicated tools and workflows specifically
    designed for debugging networked applications. By following the guides provided
    in this chapter, you will gain valuable insights into how to effectively utilize
    these tools, as well as learn expert tips and best practices for troubleshooting
    any common networking problems that you may encounter.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 虚幻引擎配备了专门为调试网络应用程序设计的各种工具和工作流程。通过遵循本章提供的指南，你将获得如何有效利用这些工具的宝贵见解，以及学习解决你可能遇到的任何常见网络问题的专家技巧和最佳实践。
- en: Before I delve into how Unreal Engine’s debugging tools operate, it’s essential
    to have a basic understanding of game debugging.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在我深入探讨虚幻引擎的调试工具如何操作之前，了解游戏调试的基本知识是至关重要的。
- en: Explaining game debugging
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解释游戏调试
- en: The process of **debugging** involves testing every part of the project to make
    sure everything works as expected and identifying any areas where improvements
    can be made – this will ensure optimal performance and stability for players when
    they’re playing your games. Debugging also includes checking the code functionality
    across different platforms and devices (for example, mobile platforms, desktop,
    or VR devices), running automated tests on builds before deployment, and so on.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 调试的过程涉及测试项目的每个部分，以确保一切按预期工作，并识别任何可以改进的领域——这将确保玩家在玩游戏时获得最佳性能和稳定性。调试还包括在不同平台和设备（例如，移动平台、桌面或VR设备）上检查代码功能，在部署前对构建进行自动化测试等。
- en: In the end, good debugging practices will allow you to find small details that
    might otherwise go unnoticed and cause serious problems in development if they’re
    not addressed early on!
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，良好的调试实践将帮助你发现那些可能被忽视的细节，如果这些问题没有及早解决，它们可能会在开发过程中引起严重问题！
- en: In the previous chapters, you utilized many debug tools provided by Unreal Engine
    – probably the most used one has been the `GEngine->AddOnScreenDebugMessage()`
    command, which adds the capability of showing messages on the screen.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，你使用了虚幻引擎提供的许多调试工具——可能最常用的是`GEngine->AddOnScreenDebugMessage()`命令，它增加了在屏幕上显示消息的功能。
- en: Some other tools for debugging are purely visuals – such as `DrawDebugSphere()`,
    which you used in [*Chapter 7*](B18203_07.xhtml#_idTextAnchor147), *Using Remote
    Procedure Calls (RPC)*, to show the position of the Actors your player character
    can interact with.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一些其他调试工具纯粹是视觉上的——例如，`DrawDebugSphere()`，你在[*第7章*](B18203_07.xhtml#_idTextAnchor147)中使用了它，*使用远程过程调用（RPC）*，以显示玩家可以与之交互的Actors的位置。
- en: If you are familiar with tools such as Microsoft Visual Studio, JetBrains Rider,
    or any other programming IDE, you will most probably know how important it is
    to use **breakpoints** – points in the code where the execution of the code can
    be temporarily stopped so that you can inspect a program’s data and state.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你熟悉像Microsoft Visual Studio、JetBrains Rider或其他任何编程IDE这样的工具，你可能会知道使用**断点**的重要性——代码中可以暂时停止执行的点，以便你可以检查程序的数据和状态。
- en: Debugging a multiplayer game – due to its very specialized nature – needs some
    more tools to inspect what is happening behind the scenes. In the following subsections,
    I will introduce you to some of these tools to help you improve your multiplayer
    programming expertise.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 调试多人游戏 – 由于其非常专业的性质 – 需要一些额外的工具来检查幕后发生的事情。在接下来的子章节中，我将向你介绍一些这些工具，以帮助你提高你的多人编程技能。
- en: Introducing multiplayer options
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍多人游戏选项
- en: 'Since [*Chapter 3*](B18203_03.xhtml#_idTextAnchor065), *Testing the Multiplayer
    System with a Project Prototype*, you have used the most common tool for testing
    a multiplayer environment by selecting **Listen Server Net Mode** and choosing
    the number of players to emulate. These settings are just part of the **Multiplayer
    Options** category that can be tweaked in the project settings. To see the full
    range of options, from the main menu, do the following:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 自从 [*第 3 章*](B18203_03.xhtml#_idTextAnchor065)，*使用项目原型测试多人游戏系统*，你已经使用了测试多人环境最常用的工具，通过选择**监听服务器网络模式**并选择要模拟的玩家数量。这些设置只是可以在项目设置中调整的**多人游戏选项**类别的一部分。要查看完整选项范围，从主菜单，执行以下操作：
- en: Select the **Window** | **Editor Preferences** option and locate the **Level
    Editor** | **Play** setting.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**窗口** | **编辑器首选项**选项，找到**级别编辑器** | **播放**设置。
- en: 'Look for the **Multiplayer Options** category, as shown in *Figure 11**.1*:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找**多人游戏选项**类别，如图 *图 11.1* 所示：
- en: '![Figure 11.1 – The Multiplayer Options category](img/Figure_11_01_B18203.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.1 – 多人游戏选项类别](img/Figure_11_01_B18203.jpg)'
- en: Figure 11.1 – The Multiplayer Options category
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.1 – 多人游戏选项类别
- en: This category offers a plethora of options for customizing and debugging your
    game – you have already used **Play Net Mode** and **Play Number of Clients**
    (located in the **Client** subsection), even if you set these values from another
    part of the Unreal Editor (that is, the main toolbar). But there’s much more than
    this!
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类别提供了大量自定义和调试游戏选项 – 你已经使用了**Play Net Mode**和**Play Number of Clients**（位于**客户端**子类别中），即使你从
    Unreal 编辑器的其他部分（即主工具栏）设置了这些值。但还有更多！
- en: 'As an example, you can locate the **Multiplayer Viewport Size (in pixels)**
    option and, from the **Common Resolutions** dropdown, select the client display
    resolution. This will let you test the look and feel of your game once it’s played
    on your target devices. *Figure 11**.2* shows the look of the game once played
    on a **720x1280 Razer** **Phone** device:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以找到**多人视图大小（以像素为单位）**选项，并从**常见分辨率**下拉菜单中选择客户端显示分辨率。这将让你测试游戏在目标设备上运行时的外观和感觉。*图
    11.2* 显示了游戏在 **720x1280 Razer** **手机**设备上运行后的外观：
- en: '![Figure 11.2 – The smartphone display emulation](img/Figure_11_02_B18203.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.2 – 智能手机显示模拟](img/Figure_11_02_B18203.jpg)'
- en: Figure 11.2 – The smartphone display emulation
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.2 – 智能手机显示模拟
- en: Hey, I know our project wasn’t originally designed to be played on a smartphone,
    but you get the idea anyway, right?
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 嘿，我知道我们的项目最初并不是为了在智能手机上玩而设计的，但你还是明白了，对吧？
- en: Later in this chapter, I will demonstrate some additional features within the
    **Multiplayer Options** section – for instance, the traffic emulation settings
    – that will enhance your proficiency during the debugging phase of your project.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的后面部分，我将演示**多人游戏选项**部分的一些附加功能 – 例如，流量模拟设置 – 这些功能将在你的项目调试阶段提高你的熟练度。
- en: Logging in a networked environment
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在网络环境中登录
- en: As you may already know, in Unreal Engine – or any programming environment –
    **logging** can be used to debug and track the flow of code at runtime. Logging
    is a widely used practice in software development, and multiplayer development
    is no exception. Unreal Engine offers a wide variety of log categories and some
    of them are dedicated to networking.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所知，在 Unreal Engine – 或任何编程环境 – **日志记录**可以用于调试和跟踪运行时代码的流程。日志记录在软件开发中是一种广泛使用的实践，多人游戏开发也不例外。Unreal
    Engine 提供了广泛的日志类别，其中一些是专门针对网络设计的。
- en: 'The **Output Log** window keeps track of all the messages and can be opened
    by clicking on the dedicated button at the bottom of Unreal Engine, as shown in
    *Figure 11**.3*:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出日志**窗口记录了所有消息，可以通过点击 Unreal Engine 底部的专用按钮打开，如图 *图 11.3* 所示：'
- en: '![Figure 11.3 – The Output Log activation button](img/Figure_11_03_B18203.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.3 – 输出日志激活按钮](img/Figure_11_03_B18203.jpg)'
- en: Figure 11.3 – The Output Log activation button
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.3 – 输出日志激活按钮
- en: Additionally, all log messages are saved in a `.log` file located in your project
    folder (that is, `[Your` `Project Folder]/Saved/Logs/`).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，所有日志消息都保存在你的项目文件夹中的 `.log` 文件中（即 `[你的` `项目文件夹]/Saved/Logs/`）。
- en: 'Each log message is categorized and can be filtered – as an example, *Figure
    11**.4* shows the log window after I resized the game viewport from the editor:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 每条日志消息都被分类，并且可以被过滤——例如，*图 11.4* 展示了我在编辑器中将游戏视口大小调整后的日志窗口：
- en: '![Figure 11.4 – The log window open](img/Figure_11_04_B18203.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.4 – 日志窗口打开](img/Figure_11_04_B18203.jpg)'
- en: Figure 11.4 – The log window open
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.4 – 日志窗口打开
- en: The most common category you will be using while network debugging is **LogNet**,
    which includes the majority of network logs.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络调试过程中，你将最常使用的分类是 **LogNet**，它包括大多数网络日志。
- en: Note
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'For an exhaustive list of all the log categories available in a networked environment,
    check out the official documentation: [https://docs.unrealengine.com/5.1/en-US/logging-for-networked-games-in-unreal-engine/](https://docs.unrealengine.com/5.1/en-US/logging-for-networked-games-in-unreal-engine/).'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看网络环境中所有可用日志分类的详尽列表，请查看官方文档：[https://docs.unrealengine.com/5.1/en-US/logging-for-networked-games-in-unreal-engine/](https://docs.unrealengine.com/5.1/en-US/logging-for-networked-games-in-unreal-engine/)。
- en: Filtering the LogNet category
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过滤 LogNet 分类
- en: 'Now that you have some basic knowledge of the network log system, you can try
    playing the game and checking the **Output Log** window to see what’s happening
    under the hood. To do this, follow these steps:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你对网络日志系统有了基本了解，你可以尝试玩游戏并检查 **输出日志** 窗口，看看底层发生了什么。为此，请按照以下步骤操作：
- en: Open your project in Unreal Engine and click on the **Output Log** button at
    the bottom of the editor. Optionally, you can click the **Dock in Layout** button
    to dock the window inside the editor and make it non-collapsible.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在虚幻引擎中打开你的项目，并点击编辑器底部的 **输出日志** 按钮。可选地，你可以点击 **停靠在布局** 按钮将窗口停靠在编辑器内部，使其不可折叠。
- en: Once the log window is open, locate the **Filters** button and click on it to
    open all the filters. You will notice that the LogNet category is not shown. To
    enable it, you need to start a game session – once in Play Mode, you will notice
    that the category is visible.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦日志窗口打开，找到 **过滤器** 按钮，点击它以打开所有过滤器。你会注意到 LogNet 分类没有显示。要启用它，你需要开始一个游戏会话——一旦进入播放模式，你会注意到该分类是可见的。
- en: 'From the **Filters** list, click on the **Categories** section and untick the
    **Show All** option to deselect all the categories, and then locate the **LogNet**
    category to enable it, as shown in *Figure 11**.5*:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **过滤器** 列表中，点击 **分类** 部分，取消选择 **显示所有** 选项以取消选择所有分类，然后找到 **LogNet** 分类以启用它，如图
    *图 11.5* 所示：
- en: '![Figure 11.5 – The log categories filter](img/Figure_11_05_B18203.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.5 – 日志分类过滤器](img/Figure_11_05_B18203.jpg)'
- en: Figure 11.5 – The log categories filter
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.5 – 日志分类过滤器
- en: 'Once you have enabled only the **LogNet** category, you will get a filtered
    log list, as depicted in *Figure 11**.6*:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你只启用了 **LogNet** 分类，你将得到一个过滤后的日志列表，如图 *图 11.6* 所示。6*：
- en: '![Figure 11.6 – The LogNet output](img/Figure_11_06_B18203.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.6 – LogNet 输出](img/Figure_11_06_B18203.jpg)'
- en: Figure 11.6 – The LogNet output
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.6 – LogNet 输出
- en: As you can see, there’s a lot of stuff going on here, and it depends on your
    game session.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这里有很多事情在进行中，这取决于你的游戏会话。
- en: As an extra exercise, take some time and read the log messages. You probably
    won’t understand much at first sight but, as time goes by, this kind of communication
    with Unreal Engine will become familiar to you.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 作为额外的练习，花些时间阅读日志消息。一开始你可能不太理解，但随着时间的推移，这种与虚幻引擎的交流将变得熟悉。
- en: In the next subsection, you will learn how to create a log category so that
    you can easily track what’s happening inside your application.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一小节中，你将学习如何创建日志分类，这样你就可以轻松跟踪应用程序内部发生的事情。
- en: Creating a custom log category
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建自定义日志分类
- en: Usually, when you are caught up in the whirlwind of a project, the temptation
    is to use log messages without worrying too much about categorizing them. This
    is a mistake that, of course, will be paid for in the long run. Creating customized
    categories for your logs is simple, and there are no good reasons not to do it.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，当你陷入项目的漩涡中时，你会倾向于使用日志消息而不太在意它们的分类。当然，这种错误在长期来看是需要付出代价的。为你的日志创建自定义分类很简单，而且没有不去做的好理由。
- en: To define a custom category, you need to use the `DECLARE_LOG_CATEGORY_EXTERN`
    macro inside a header and, in the corresponding source file, introduce the `DEFINE_LOG_CATEGORY`
    macro. Additionally, the category name must be named with a `Log` prefix – for
    instance, `LogMyApp`. As an example, in the next few steps, you will be creating
    a custom log category for your game, named `LogUnrealShadows`, which you can then
    use anywhere in your project.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义一个自定义类别，你需要在头文件中使用`DECLARE_LOG_CATEGORY_EXTERN`宏，并在相应的源文件中引入`DEFINE_LOG_CATEGORY`宏。此外，类别名称必须以`Log`前缀命名
    – 例如，`LogMyApp`。作为一个例子，在接下来的几个步骤中，你将创建一个名为`LogUnrealShadows`的自定义日志类别，你可以在项目的任何地方使用它。
- en: So, open your programming IDE and create a new empty class named `US_CustomLogs`
    – you won’t need an Unreal class, just a regular C++ one.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，打开你的编程IDE并创建一个名为`US_CustomLogs`的新空类 – 你不需要Unreal类，只需要一个普通的C++类。
- en: 'Then, open the `US_CustomLogs.h` file and remove the class declaration as you
    won’t be using it. After that, add the following line of code:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，打开`US_CustomLogs.h`文件，删除类声明，因为你不会使用它。之后，添加以下代码行：
- en: '[PRE0]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This macro declares `LogUnrealShadows` as a new log category to be used in your
    project. The verbosity for this category is set to `Display`; this means that
    the message will be printed to the console and the log file – if you need to print
    the message just in the log file and not in the console, you can use the `Log`
    value instead.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 此宏将`LogUnrealShadows`声明为项目中的一个新日志类别。此类别的详细程度设置为`Display`；这意味着消息将被打印到控制台和日志文件
    – 如果你只需要将消息打印到日志文件而不是控制台，你可以使用`Log`值代替。
- en: 'Now, open the `US_CustomLogs.cpp` file and define the log category by adding
    the following line of code:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开`US_CustomLogs.cpp`文件，通过添加以下代码行来定义日志类别：
- en: '[PRE1]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This macro will let you use the `LogUnrealShadows` category anywhere in your
    project. Once in Play Mode, you will be able to select the `LogUnrealShadows`
    category from the **Output Log** filter, as shown in *Figure 11**.7*:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 此宏将允许你在项目的任何位置使用`LogUnrealShadows`类别。一旦进入播放模式，你将能够从**输出日志**过滤器中选择`LogUnrealShadows`类别，如图*图11.7*所示。7*：
- en: '![Figure 11.7 – The LogUnrealShadows category](img/Figure_11_07_B18203.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图11.7 – `LogUnrealShadows`类别](img/Figure_11_07_B18203.jpg)'
- en: Figure 11.7 – The LogUnrealShadows category
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.7 – `LogUnrealShadows`类别
- en: 'Now that the category has been defined, you can use it to add your logs in
    the game – to do this, you can use the `UE_LOG()` macro. As an example, open the
    `US_GameMode.cpp` file and add the needed `include` declaration:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在类别已经定义，你可以用它来在游戏中添加日志 – 要这样做，你可以使用`UE_LOG()`宏。例如，打开`US_GameMode.cpp`文件并添加所需的`include`声明：
- en: '[PRE2]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, to log an alert message inside the `AlertMinions()` function class, you
    must add the following line of code:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，要在`AlertMinions()`函数类中记录警报消息，你必须添加以下代码行：
- en: '[PRE3]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*Figure 11**.8* shows the aforementioned message in the **Output Log** panel
    once a character has been detected:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '*图11.8*显示了在检测到角色后**输出日志**面板中显示的上述消息：'
- en: '![Figure 11.8 – The custom message in the Output Log panel](img/Figure_11_08_B18203.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图11.8 – 输出日志面板中的自定义消息](img/Figure_11_08_B18203.jpg)'
- en: Figure 11.8 – The custom message in the Output Log panel
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.8 – 输出日志面板中的自定义消息
- en: This section introduced you to some of the key debugging tools that are available
    in Unreal Engine and explained how to effectively utilize them. In the upcoming
    section, you’ll be presented with how to simulate a networked environment on your
    personal computer, providing you with the ability to test your project under conditions
    where major issues may arise during execution.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 本节向你介绍了在Unreal Engine中可用的关键调试工具，并解释了如何有效地利用它们。在下一节中，你将了解到如何在个人计算机上模拟网络环境，这将为你在执行过程中可能出现的重大问题提供测试项目的能力。
- en: Emulating a networked environment
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模拟网络环境
- en: Creating a replica of a multiplayer network environment can be an effective
    way to simulate real-world scenarios and test the performance of your systems.
    By leveraging Unreal’s capabilities, you’ll be able to test multiple connections
    on a single machine and provide a realistic experience that will give you an accurate
    idea of your game behavior once it has been deployed online.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个多人网络环境的副本可以是一种有效地模拟真实世界场景并测试系统性能的方法。通过利用Unreal的能力，你将能够在单台机器上测试多个连接，并提供一个真实感十足的经验，这将让你在游戏上线后对游戏行为有一个准确的了解。
- en: '**Network emulation** is an important feature that helps you simulate lag and
    packet loss for both servers and clients. This is especially important in identifying
    and troubleshooting networking issues. Unreal Editor, the command line console,
    and configuration files all offer configurable settings for network emulation
    to ensure that it can be tailored precisely to your needs.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**网络仿真**是一个重要的功能，可以帮助您模拟服务器和客户端的延迟和数据包丢失。这在识别和解决网络问题方面尤为重要。Unreal 编辑器、命令行控制台和配置文件都提供了可配置的网络仿真设置，以确保它可以精确地满足您的需求。'
- en: Enabling network emulation
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用网络仿真
- en: 'Network emulation can be enabled from the **Editor Preferences** window, in
    the **Level Editor** | **Play** section. To enable this tool, locate the **Multiplayer
    Options** category and tick the **Enable Network Emulation** option, as depicted
    in *Figure 11**.9*:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 网络仿真可以从**编辑器首选项**窗口中的**级别编辑器** | **播放**部分启用。要启用此工具，找到**多人选项**类别并勾选**启用网络仿真**选项，如图*图
    11.9*所示：
- en: '![Figure 11.9 – Enable Network Emulation](img/Figure_11_09_B18203.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.9 – 启用网络仿真](img/Figure_11_09_B18203.jpg)'
- en: Figure 11.9 – Enable Network Emulation
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.9 – 启用网络仿真
- en: 'Selecting this option will enable a set of options you can use to test different
    situations during a multiplayer session. Firstly, you can select which target
    to emulate through the **Emulation Target** property – there are three options
    for this:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 选择此选项将启用一组选项，您可以在多人游戏中测试不同的场景。首先，您可以通过**仿真目标**属性选择要仿真的目标 – 此处有三个选项：
- en: '**Server Only**: This option will emulate just the server’s behavior over the
    network'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仅服务器**：此选项将仅模拟网络中的服务器行为'
- en: '**Clients Only**: This option will emulate just the client’s behavior over
    the network'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仅客户端**：此选项将仅模拟网络中的客户端行为'
- en: '**Everyone**: This option will emulate both the client’s and the server’s behavior
    over the network'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**所有人**：此选项将在网络上模拟客户端和服务器的行为'
- en: 'Secondly, you have access to **Network Emulation Profile**, which will let
    you select different scenarios for a networked game – there are three options
    for this:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，您有权访问**网络仿真配置文件**，这将允许您为网络游戏选择不同的场景 – 此处有三个选项：
- en: '**Average**: This option will emulate a regular multiplayer game'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平均**：此选项将模拟常规多人游戏'
- en: '**Bad**: This option will create a worst-case scenario, with a high time lag
    and a lot of data packets lost during the networked game'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**差**：此选项将创建一个最坏的情况，在网络游戏中会有很大的时间延迟和大量数据包丢失'
- en: '**Custom**: This option will let you customize the emulation experience with
    your own values'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自定义**：此选项将允许您使用自己的值自定义仿真体验'
- en: 'The aforementioned profiles will initialize a set of values for the **Incoming
    Traffic** and the **Outgoing Traffic** values of the client or the server (or
    both), depending on the **Emulation Target** selection. *Figure 11**.10* shows
    the expanded profile options with the custom option selected:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述的配置文件将为**传入流量**和**传出流量**的客户端或服务器（或两者）的值初始化一组值，具体取决于**仿真目标**的选择。*图 11.10*显示了选择自定义选项时的扩展配置文件选项：
- en: '![Figure 11.10 - The emulation profiles expanded](img/Figure_11_10_B18203.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.10 - 扩展的仿真配置文件](img/Figure_11_10_B18203.jpg)'
- en: Figure 11.10 - The emulation profiles expanded
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.10 - 扩展的仿真配置文件
- en: In the next subsection, I will present you the meaning of most of the settings
    for this section of the **Multiplayer** **Options** category.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一小节中，我将向您展示**多人选项**类别中此部分的大多数设置的含义。
- en: Explaining the Incoming Traffic option
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解释传入流量选项
- en: 'Activating the **Incoming Traffic** option will introduce delays or loss in
    the reception of packets during playtime. You can modify the following properties:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 激活**传入流量**选项将在游戏时间内的数据包接收过程中引入延迟或丢失。您可以修改以下属性：
- en: '**Minimum Latency**: This indicates the minimum amount of time lag in milliseconds'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最小延迟**：这表示以毫秒为单位的最小时间延迟'
- en: '**Maximum Latency**: This indicates the maximum amount of time lag in milliseconds'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最大延迟**：这表示以毫秒为单位的最大时间延迟'
- en: '**Packet Loss Percentage**: This indicates the chance that a packet will be
    lost before being received'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据包丢失百分比**：这表示数据包在接收前丢失的概率'
- en: 'As an example, a typical bad situation of incoming traffic will have a latency
    of about 100 to 200 milliseconds and a probability of losing incoming data of
    about 5%. To create a similar scenario, your settings may have the following values:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，典型的坏情况（即，接收流量）将具有大约100到200毫秒的延迟和大约5%的接收数据丢失概率。要创建类似的场景，您的设置可能具有以下值：
- en: '`100` milliseconds'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`100` 毫秒'
- en: '`200` milliseconds'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`200` 毫秒'
- en: '`5`%'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`5`%'
- en: Explaining the Outgoing Traffic option
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解释**出站流量**选项
- en: 'Similarly, activating the **Outgoing Traffic** option will introduce delays
    or losses when you’re sending packets during playtime. You can modify the following
    properties:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，激活**出站流量**选项将在游戏过程中发送数据包时引入延迟或丢失。您可以修改以下属性：
- en: '**Minimum Latency**: This indicates the minimum amount of time lag in milliseconds'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最小延迟**：这表示以毫秒为单位的最低时间延迟'
- en: '**Maximum Latency**: This indicates the maximum amount of time lag in milliseconds'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最大延迟**：这表示以毫秒为单位的最大时间延迟'
- en: '**Packet Loss Percentage**: This indicates the chance that a packet will be
    lost before being received'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**丢包百分比**：这表示在接收到数据包之前数据包丢失的概率'
- en: 'As an example, you may simulate an average situation (that is, one that is
    not optimal but still acceptable) by having a latency of about 30 to 60 milliseconds
    and a probability of losing data of about 1%. Your settings may have the following
    values:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以通过将延迟设置为大约30到60毫秒，以及数据丢失的概率约为1%来模拟一个平均情况（即，不是最优但仍可接受的情况）。您的设置可能具有以下值：
- en: '`30` milliseconds'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`30` 毫秒'
- en: '`60` milliseconds'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`60` 毫秒'
- en: '`1`%'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1`%'
- en: You’ve now learned about all the ways you can simulate a real networked game
    environment. It’s now time to put that knowledge to the test and try it out with
    your multiplayer game! The Lichlord is getting a bit restless and is eagerly waiting
    for you. It’s best not to keep him waiting too long, so let’s not waste any time!
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已经了解了所有可以模拟真实网络游戏环境的方法。现在是时候将所学知识付诸实践，并用您的多人游戏尝试一下！Lichlord有点不耐烦了，正焦急地等待着您。最好别让他等得太久，所以我们不要浪费时间！
- en: Testing the game with network emulation
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用网络仿真测试游戏
- en: Testing a game in a networked emulation is quite straightforward once you have
    understood the aforementioned elements – select your preferred settings and run
    the game. We will be emulating the game under different network scenarios, so
    open the project you have been working on in the previous chapters and get ready
    to do some testing.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您理解了上述元素，在网络上仿真测试游戏就相当直接了——选择您首选的设置并运行游戏。我们将模拟不同的网络场景进行游戏仿真，因此请打开您在前几章中工作的项目，并准备好进行一些测试。
- en: Testing the game under average conditions
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在平均条件下测试游戏
- en: 'In this scenario, you will be testing one of the default profiles available
    in the **Editor Preferences** area and checking the game’s behavior. To do so,
    follow these steps:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在此场景中，您将测试**编辑器首选项**区域中可用的默认配置文件之一，并检查游戏的行为。为此，请按照以下步骤操作：
- en: Open **Editor Preferences** and locate the **Play** | **Multiplayer** category.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**编辑器首选项**并定位到**播放**|**多人游戏**类别。
- en: Tick the **Enable Network Emulation** checkbox and set **Emulation Target to
    Everyone**; with this option, we will be testing both the client and the server
    network traffic.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打勾选择**启用网络仿真**复选框，并将**仿真目标设置为所有人**；使用此选项，我们将测试客户端和服务器网络流量。
- en: 'In the **Network Emulation Profile** drop-down menu, select **Average**. The
    settings are shown in *Figure 11**.11*:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**网络仿真配置文件**下拉菜单中，选择**平均**。设置显示在*图11.11*。11*：
- en: '![Figure 11.11 – Network emulation with the Average profile](img/Figure_11_11_B18203.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![图11.11 – 使用平均配置文件的网络仿真](img/Figure_11_11_B18203.jpg)'
- en: Figure 11.11 – Network emulation with the Average profile
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.11 – 使用平均配置文件的网络仿真
- en: With this profile set up, start a **Play as a Listen Server** game session and
    analyze your game. You should see the game work almost smoothly, with no lag or
    synchronization issues. This is because we opted for a very low percentage of
    packet loss (that is, 1%) and a lag latency for both the server and the clients
    that will be in the range of 30 to 60 milliseconds.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 设置好此配置文件后，开始一个**作为监听服务器游玩**的游戏会话并分析您的游戏。您应该看到游戏几乎流畅运行，没有延迟或同步问题。这是因为我们选择了非常低的丢包百分比（即，1%）以及服务器和客户端的延迟将在30到60毫秒的范围内。
- en: What we have here is an acceptable game scenario and the player experience will
    be nice and smooth. Now, let’s try using some harsh conditions to see how the
    game behaves.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这里有一个可接受的游戏场景，玩家的体验将会很顺畅。现在，让我们尝试使用一些恶劣的条件来看看游戏的表现如何。
- en: Testing the game under the worst conditions
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在最坏条件下测试游戏
- en: 'In this second test, you’ll be testing a worst-case scenario, where the network
    will have a high percentage of packet loss and the traffic latency will emulate
    a bad network bandwidth. To do so, follow these steps:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在这次第二次测试中，你将测试一个最坏的情况，其中网络将有高比例的数据包丢失，流量延迟将模拟糟糕的网络带宽。为此，请按照以下步骤操作：
- en: Open **Editor Preferences** and locate the **Play** | **Multiplayer** category.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**编辑器首选项**并定位到**游戏** | **多人游戏**类别。
- en: Tick the **Enable Network Emulation** checkbox and set **Emulation Target to
    Everyone**; with this option, we will be testing both the client and the server
    network traffic.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打勾**启用网络仿真**复选框并将**仿真目标设置为所有人**；使用此选项，我们将测试客户端和服务器网络流量。
- en: From the **Network Emulation Profile** drop-down menu, select **Custom**.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**网络仿真配置文件**下拉菜单中选择**自定义**。
- en: For both the `450`.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`450`。
- en: Set the `550`.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置`550`。
- en: 'Set the `10`. The settings are shown in *Figure 11.12*:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置`10`。设置如图*图11.12*所示：
- en: '![Figure 11.12 – Network emulation in a worst-case scenario](img/Figure_11_12_B18203.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![图11.12 – 最坏情况下的网络仿真](img/Figure_11_12_B18203.jpg)'
- en: Figure 11.12 – Network emulation in a worst-case scenario
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.12 – 最坏情况下的网络仿真
- en: With this profile set up, start a **Play as a Listen Server** game session and
    analyze your game. You will experience an almost broken experience! The same character
    will seem to move completely out of sync in the different windows and the same
    thing will stay true for your character attack.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此配置文件设置后，启动一个**作为监听服务器玩游戏**的游戏会话并分析你的游戏。你将体验到几乎损坏的游戏体验！同一个角色似乎在不同窗口中完全不同步，你的角色攻击也是如此。
- en: But notice that I said “almost” – as the server is authoritative and we are
    using reliable RPCs for the most important operations, such as throwing daggers,
    the game will go on flawlessly from an execution point of view. This means that
    the same character position will – sooner or later – be synchronized on all clients
    and the daggers will always be thrown, no matter the packet loss percentage.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 但请注意，我说的是“几乎” – 因为服务器是权威的，我们使用可靠的RPCs进行最重要的操作，例如投掷匕首，从执行角度来看，游戏将完美无缺地继续进行。这意味着同一个角色的位置迟早会在所有客户端上同步，无论数据包丢失百分比如何，匕首总是会投掷。
- en: If you want to test a totally broken game, try setting `100`, meaning that no
    packet will be received by the server or the clients. When entering Play Mode,
    the client won’t even start and all you will get will be a black screen. But this
    means the Lichlord has laid down a wickedly powerful enchantment on the network,
    stranding your fearless gang of thieves in a mystical quagmire. Unless some tech-savvy
    wizard at the King’s court can conjure a nifty counter-magic to unweave the spell,
    that is!
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要测试一个完全损坏的游戏，尝试设置`100`，这意味着服务器或客户端将不会接收到任何数据包。当进入游戏模式时，客户端甚至不会启动，你将得到的只是一个黑屏。但这意味着巫妖王在网络中施加了一个邪恶强大的魔法，让你的无畏盗贼团伙被困在一个神秘的泥潭中。除非国王法庭上的某个技术娴熟的巫师能够施展一个巧妙的反魔法来解开这个咒语，否则就是如此！
- en: In this section, you learned how to test your game in a networked emulation
    environment directly from your trusty computer. One of the most powerful features
    available is the ability to simulate data loss and network lags – this means checking
    the player experience under any scenario, including a worst-case one, where the
    player will have an almost totally broken experience due to bad networking technology.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你学习了如何直接从你信任的电脑中测试你的游戏在网络仿真环境中。最强大的功能之一是能够模拟数据丢失和网络延迟 – 这意味着检查玩家在任何场景下的体验，包括最坏的情况，在这种情况下，由于糟糕的网络技术，玩家将几乎完全无法体验游戏。
- en: In the next section, you will be presented with another important topic in improving
    your game – how to profile a networked application.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将了解到提高游戏性能的另一个重要主题 – 如何分析网络应用程序。
- en: Using the Network Profiler
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用网络分析器
- en: Unreal Engine’s **Network Profiler** is a powerful standalone tool capable of
    analyzing and optimizing the performance of multiplayer game networks. A Profiler
    session will give you detailed insights into connection speeds, latency times,
    and other important metrics that can be used to identify potential issues or areas
    of improvement. By leveraging this information, you will be able to get optimal
    network performance and achieve a nicer user experience. In this section, I will
    guide you through the main features of this tool.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Unreal Engine 的 **网络性能分析器**是一个功能强大的独立工具，能够分析和优化多人游戏网络的性能。性能分析会话将为您提供关于连接速度、延迟时间以及其他重要指标的详细信息，这些信息可用于识别潜在问题或改进区域。通过利用这些信息，您将能够获得最佳网络性能并实现更好的用户体验。在本节中，我将指导您了解此工具的主要功能。
- en: As stated previously, the Network Profiler is a standalone application that
    can be found in your Unreal Engine executable folder. Depending on your engine
    installation, the location path may vary, but it is usually located at `[Your
    PC]/Programs` `Files/Epic Games/UE_5.1/Engine/Binaries/DotNET/NetworkProfiler.exe`.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，网络性能分析器是一个独立的应用程序，可以在您的 Unreal Engine 可执行文件文件夹中找到。根据您的引擎安装情况，路径可能有所不同，但通常位于
    `[您的 PC]/Programs` `Files/Epic Games/UE_5.1/Engine/Binaries/DotNET/NetworkProfiler.exe`。
- en: 'The Network Profiler application is shown in *Figure 11**.13*:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 网络性能分析器应用程序如图 *11**.13* 所示：
- en: '![Figure 11.13 – The Network Profiler application](img/Figure_11_13_B18203.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.13 – 网络性能分析器应用程序](img/Figure_11_13_B18203.jpg)'
- en: Figure 11.13 – The Network Profiler application
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.13 – 网络性能分析器应用程序
- en: In the following section, I will show you how to record a network session and
    peek into its data through the Network Profiler.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我将向您展示如何使用网络性能分析器记录网络会话并查看其数据。
- en: Recording a profiling session
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 记录性能分析会话
- en: To use the Network Profiler, you need to collect some data for it to analyze.
    To accomplish this, you’ll need to work with an engine version that has stat tracking
    enabled, such as a debugger or editor built for non-debug configurations – in
    our case, we will be recording the data directly from the Unreal Engine Editor
    with the default **Average** emulation profile.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用网络性能分析器，您需要收集一些数据供其分析。为此，您需要与一个已启用统计跟踪的引擎版本一起工作，例如为非调试配置构建的调试器或编辑器 – 在我们的案例中，我们将直接从
    Unreal Engine 编辑器使用默认的 **平均** 仿真配置文件记录数据。
- en: 'To record a profiling session, follow these steps:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 要记录性能分析会话，请按照以下步骤操作：
- en: Open the **Play** | **Multiplayer Options** category in the **Editor Preferences**
    window, as explained in the previous section.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**编辑器首选项**窗口中打开**播放** | **多人选项**类别，如前文所述。
- en: Tick **Enable Network Emulation** and set **Emulation Target** to **Everyone**.
    Then, set **Network Emulation Profile** to **Average**.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**启用网络仿真**并将**仿真目标**设置为**所有人**。然后，将**网络仿真配置文件**设置为**平均**。
- en: 'Start your game and locate the **Console Command** prompt located at the bottom
    of the editor (or at the bottom of any **Output Log** window that’s open), as
    depicted in *Figure 11**.14*:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动您的游戏并定位编辑器底部（或任何打开的 **输出日志** 窗口的底部）的**控制台命令**提示符，如图 *11**.14* 所示：
- en: '![Figure 11.14 – The Console Command prompt](img/Figure_11_14_B18203.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.14 – 控制台命令提示符](img/Figure_11_14_B18203.jpg)'
- en: Figure 11.14 – The Console Command prompt
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.14 – 控制台命令提示符
- en: 'Inside the prompt, enter this command:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示符内部，输入此命令：
- en: '[PRE4]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This will start a profile recording session and the **Output Log** window should
    display the following message:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动性能记录会话，**输出日志**窗口应显示以下消息：
- en: '[PRE5]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Play your game for a couple of minutes and then enter the following command.
    This will close the profiling session:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 游戏几分钟，然后输入以下命令。这将关闭性能分析会话：
- en: '[PRE6]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This command will close the profiling session and save a `.nprof` file with
    all the recorded data in your project folder at the following location:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此命令将关闭性能分析会话，并在您的项目文件夹的以下位置保存包含所有记录数据的 `.nprof` 文件：
- en: '[PRE7]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As an alternative, you can just use the `netprofile` command, which will toggle
    the Profiler every time it is used.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 作为替代，您也可以直接使用 `netprofile` 命令，每次使用时都会切换性能分析器。
- en: Once you have saved your profiling session, you can open it with the profiling
    tool.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 保存您的性能分析会话后，您可以使用性能分析工具打开它。
- en: Analyzing a profiling session
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分析性能分析会话
- en: 'After launching the Profiler application, you can click the `Profiling` folder
    to open the session you have recorded. An example session is depicted in *Figure
    11**.15*:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动Profiler应用程序后，您可以点击`Profiling`文件夹以打开您已记录的会话。一个示例会话如图*图11.15*所示：
- en: '![Figure 11.15 – A profiling session example](img/Figure_11_15_B18203.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![图11.15 – 分析会话示例](img/Figure_11_15_B18203.jpg)'
- en: Figure 11.15 – A profiling session example
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.15 – 分析会话示例
- en: 'You will see a lot of information here, including a graph containing all the
    networking information. Let’s focus on the bottom-right section, where you will
    see a list of IP addresses, as shown in *Figure 11**.16*:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到很多信息，包括包含所有网络信息的图表。让我们关注右下角的部分，您将看到IP地址列表，如图*图11.16*所示：
- en: '![Figure 11.16 – The list of server and client IP addresses](img/Figure_11_16_B18203.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![图11.16 – 服务器和客户端IP地址列表](img/Figure_11_16_B18203.jpg)'
- en: Figure 11.16 – The list of server and client IP addresses
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.16 – 服务器和客户端IP地址列表
- en: This list represents the clients and the server that were profiled during the
    session – as you can see, in my example, I have a server (using port **17777**)
    and two clients (using ports **54897** and **54898**). You can select the client
    or the server you need to analyze and click the **Apply Filters** button to show
    just its profiled data. Additionally, you can enable some of the drop-down menus
    that will let you filter additional data, such as a single Actor type in the game.
    An example of this is the **BP_Character** Blueprint Class.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 此列表表示会话期间被分析的客户和服务器 - 如您所见，在我的例子中，我有一个服务器（使用端口**17777**）和两个客户端（使用端口**54897**和**54898**）。您可以选择需要分析的客户或服务器，然后点击**应用过滤器**按钮以仅显示其分析数据。此外，您还可以启用一些下拉菜单，这将允许您过滤其他数据，例如游戏中单个演员类型。一个例子是**BP_Character**蓝图类。
- en: 'Once you have selected the client or the server you need to analyze, you can
    select a portion of the graph that represents a group of frames during gameplay
    just by clicking and dragging on the chart data, as shown in *Figure 11**.17*:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您选择了需要分析的客户端或服务器，您可以通过在图表数据上点击并拖动来选择代表游戏过程中一组帧的图表的一部分，如图*图11.17*所示：
- en: '![Figure 11.17 – A selected portion of the chart data](img/Figure_11_17_B18203.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![图11.17 – 图表数据的选择部分](img/Figure_11_17_B18203.jpg)'
- en: Figure 11.17 – A selected portion of the chart data
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.17 – 图表数据的选择部分
- en: 'If needed, you can even select a single frame by just clicking on the graph.
    *Figure 11**.18* shows the frame selection in the graph chart:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，您甚至可以通过点击图表来选择单个帧。*图11.18*显示了图表中的帧选择：
- en: '![Figure 11.18 – A single frame in the chart data](img/Figure_11_18_B18203.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![图11.18 – 图表数据中的单个帧](img/Figure_11_18_B18203.jpg)'
- en: Figure 11.18 – A single frame in the chart data
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.18 – 图表数据中的单个帧
- en: 'Now, select the **Actors** tab, located at the bottom left of the application;
    you will be presented with all the Actors that were replicated during the selected
    frame range. My profiled record is shown in *Figure 11**.19*:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，选择位于应用程序左下角的**演员**选项卡；您将看到在所选帧范围内复制的所有演员。我的分析记录如图*图11.19*所示：
- en: '![Figure 11.19 – The Actors tab](img/Figure_11_19_B18203.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![图11.19 – 演员选项卡](img/Figure_11_19_B18203.jpg)'
- en: Figure 11.19 – The Actors tab
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.19 – 演员选项卡
- en: One of the most interesting columns here is **MS**, which shows how many milliseconds
    were needed to replicate an Actor. Using this value, you can determine whether
    the Actor is taking an excessive amount of time to replicate and then proceed
    to investigate the underlying causes of this issue.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这里最有趣的列之一是**MS**，它显示了复制一个演员所需的毫秒数。使用此值，您可以确定演员是否需要过多时间来复制，然后继续调查此问题的根本原因。
- en: Another really important column to consider is `NetUpdateFrequency` value (that
    is, the time interval that will pass when updating data over the network) of your
    Actor to a higher value to update its values less often.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个需要考虑的非常重要的列是您的演员的`NetUpdateFrequency`值（即更新网络数据时将经过的时间间隔）到一个更高的值，以减少其值的更新频率。
- en: 'If you select one of the Actors, you will get detailed information on the replicated
    properties during the analyzed time range. As an example, *Figure 11**.20* shows
    the `BP_WoodenDoor` data in a time range of about 1 minute:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您选择其中一个演员，您将获得在分析时间范围内复制的详细属性信息。例如，*图11.20*显示了在约1分钟时间范围内的`BP_WoodenDoor`数据：
- en: '![Figure 11.20 – The profiled data for the BP_WoodenDoor Blueprint](img/Figure_11_20_B18203.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![图11.20 – BP_WoodenDoor蓝图的分析数据](img/Figure_11_20_B18203.jpg)'
- en: Figure 11.20 – The profiled data for the BP_WoodenDoor Blueprint
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.20 – BP_WoodenDoor 蓝图的性能分析数据
- en: During gameplay, one of the characters interacted with the door, so you can
    see the **DoorOpen** property replicated twice – one for the starting value and
    one for when the character was opened – and **60** replications for the **RelativeRotation**
    property – when the opening animation was activated.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在游戏过程中，其中一个角色与门进行了交互，因此您可以看到 **DoorOpen** 属性被复制了两次——一次是起始值，一次是当角色打开时——以及 **RelativeRotation**
    属性的 **60** 次复制——当打开动画被激活时。
- en: What’s wrong here is the `NetUpdateFrequency` to a higher value.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的问题在于将 `NetUpdateFrequency` 设置为更高的值。
- en: 'On the positive side, take a look at the **Waste** value for the **BP_MinionMiniboss**
    Actor, as depicted in *Figure 11**.21*:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在积极的一面，看看 **BP_MinionMiniboss** Actor 的 **Waste** 值，如图 *11.21* 所示：
- en: '![Figure 11.21 – The profiled data for the BP_Miniboss Blueprint](img/Figure_11_21_B18203.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.21 – BP_Miniboss 蓝图的性能分析数据](img/Figure_11_21_B18203.jpg)'
- en: Figure 11.21 – The profiled data for the BP_Miniboss Blueprint
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.21 – BP_Miniboss 蓝图的性能分析数据
- en: I have achieved a nice **27.32%** for 1 minute of gameplay! But pay attention...
    this does not mean that I have spent fewer resources on this Actor replication.
    This indicates that I’m utilizing the available resources more efficiently.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我在 1 分钟的游戏中达到了 27.32% 的良好成绩！但请注意...这并不意味着我在这个角色复制上花费了更少的资源。这表明我正在更有效地利用可用资源。
- en: 'Now, open the **All RPCs** tab located at the top of the application; you will
    get a list of the remote procedure calls that were used during the selected frame
    range. *Figure 11**.22* shows my situation for the example I have used so far:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开位于应用程序顶部的 **所有 RPC** 选项卡；您将获得在所选帧范围内使用的远程过程调用的列表。*图 11.22* 显示了我迄今为止使用的示例情况：
- en: '![Figure 11.22 – The RPC profiling window](img/Figure_11_22_B18203.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.22 – RPC 性能分析窗口](img/Figure_11_22_B18203.jpg)'
- en: Figure 11.22 – The RPC profiling window
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.22 – RPC 性能分析窗口
- en: As you can see, you can analyze how many times a remote call was made and the
    cost of calling it – this additional information can help you optimize your code
    and streamline your program’s performance.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，您可以分析远程调用发生的次数以及调用成本 - 这额外的信息可以帮助您优化代码并简化程序性能。
- en: In this section, I presented you with one of the most important tools when working
    on a multiplayer game – the Network Profiler. With a strong knowledge of how to
    use it, you will be able to analyze various aspects of your game’s network performance,
    such as the frequency and cost of remote calls, as well as potential bottlenecks.
    This information can help you identify areas where you can optimize your game’s
    performance while providing a smoother and more enjoyable experience for players.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我向您介绍了一个在多人游戏开发中最重要的工具——网络分析器。通过深入了解如何使用它，您将能够分析游戏网络性能的各个方面，例如远程调用的频率和成本，以及潜在的瓶颈。这些信息可以帮助您识别可以优化游戏性能的领域，同时为玩家提供更流畅和愉快的体验。
- en: In the next section, I’ll share some tips with you that I hope will be useful
    in improving your multiplayer project and help you avoid common issues that can
    arise once your game is played online.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我将与您分享一些希望对提高您的多人项目有用的技巧，并帮助您避免游戏上线后可能出现的常见问题。
- en: Improving performance and bandwidth utilization
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提高性能和带宽利用率
- en: Although Unreal Engine strives to maximize the efficiency of replicating Actors,
    it is typically a time-consuming process that can negatively impact performance.
    To facilitate this task, there are a few steps that you can take to optimize replication
    and make it more efficient. In this section, I will give you some advice on how
    to improve performance and avoid bottlenecks that may stop your game from working
    efficiently.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管虚幻引擎力求最大化复制 Actor 的效率，但通常这是一个耗时过程，可能会对性能产生负面影响。为了简化这项任务，您可以采取一些步骤来优化复制并使其更高效。在本节中，我将为您提供一些关于如何提高性能和避免可能阻止游戏高效运行的瓶颈的建议。
- en: Turning on replication only when necessary
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 仅在必要时开启复制
- en: When replicating Actors, the server performs various checks, such as relevance,
    frequency of updates, and dormancy, among others. Avoid turning on replication
    on Actors that won’t need this feature to put them off these checks.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在复制 Actor 时，服务器执行各种检查，例如相关性、更新频率和休眠状态等。避免在不需要此功能的 Actor 上开启复制，以避免进行这些检查。
- en: If you really need Actor replication, consider fine-tuning `NetUpdateFrequency`
    for less important (or less frequently changing) Actors. This property will set
    the maximum update frequency over the network for the Actor. As an example, a
    background Actor such as an NPC may update at a very slow rate – say every 0.5
    seconds – while a fast-moving enemy may need an update every 0.2 seconds.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你真的需要Actor复制，考虑对不太重要（或不太频繁更改）的Actor调整`NetUpdateFrequency`。此属性将设置Actor在网络上的最大更新频率。例如，一个背景Actor，如NPC，可能以非常慢的速度更新——比如说每0.5秒更新一次——而快速移动的敌人可能需要每0.2秒更新一次。
- en: In some cases, you may want to implement custom net relevancy rules (or override
    available variables), which can help in reducing network load at runtime.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，你可能想实现自定义网络相关性规则（或覆盖可用变量），这有助于在运行时减少网络负载。
- en: Avoiding invoking RPCs that are not required or essential
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 避免调用不必要的或非必要的RPC
- en: An RPC that could have been avoided is considered an unnecessary RPC and should
    be avoided.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 可以避免的RPC被认为是多余的RPC，应该避免。
- en: As an example, server-specific logic does not have to be included in a server
    RPC if you can ensure that a non-replicated function will run only on the server.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你能确保非复制函数只会在服务器上运行，那么不需要在服务器RPC中包含特定于服务器的逻辑。
- en: Another example is a method call on a client – if you can guarantee that the
    client is locally controlled (that is, by using `APawn::IsLocallyControlled()`),
    you can avoid using an RPC.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个例子是在客户端上的方法调用——如果你能保证客户端是本地控制的（即使用`APawn::IsLocallyControlled()`），你可以避免使用RPC。
- en: Distinguishing between reliable and unreliable RPCs
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 区分可靠和不可靠RPC
- en: As you already know from [*Chapter 7*](B18203_07.xhtml#_idTextAnchor147), *Using
    Remote Procedure Calls (RPCs)*, any replicated method can either be reliable or
    unreliable and, by default, RPCs are unreliable.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在[*第7章*](B18203_07.xhtml#_idTextAnchor147)中已知的，*使用远程过程调用（RPC）*，任何复制方法都可以是可靠的或不可靠的，并且默认情况下，RPC是不可靠的。
- en: 'Making the right choice between the two options may change the way your game
    will behave radically. To help you with this, here’s a list of the pros and cons
    of reliable and unreliable RPCs:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在两种选项之间做出正确的选择可能会彻底改变你的游戏行为。为了帮助你，以下是一个关于可靠和不可靠RPC的优缺点的列表：
- en: '**Reliable RPCs**:'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可靠RPC**：'
- en: '**Pro**: Functions will arrive at their destination in the same order as they
    were sent'
  id: totrans-225
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优点**：函数将以发送时的相同顺序到达目的地'
- en: '**Con**: Functions will consume more bandwidth and may lead to longer latency'
  id: totrans-226
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缺点**：函数将消耗更多带宽，可能导致更长的延迟'
- en: '**Unreliable RPCs**:'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不可靠RPC**：'
- en: '**Pro**: Functions will result in lower bandwidth usage compared to reliable
    calls; this makes them good candidates for functions that need to be called frequently.'
  id: totrans-228
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优点**：与可靠调用相比，函数将导致更低的带宽使用率；这使得它们成为需要频繁调用的函数的好候选者。'
- en: '**Con**: Functions may not successfully reach their destination or may arrive
    with gaps in the RPC calls, even though they will be processed in the correct
    order.'
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缺点**：函数可能无法成功到达目的地，或者RPC调用中可能存在缺失，尽管它们将以正确的顺序进行处理。'
- en: As an example, you should refrain from sending reliable events too frequently,
    such as on the `Tick()` event, since the engine’s buffer of reliable events may
    become overloaded and disconnect the associated player. This kind of call is safer
    to use with an unreliable function – for instance, on non-critical cosmetic events,
    such as spawning sound and visual effects.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你应该避免过于频繁地发送可靠事件，比如在`Tick()`事件上，因为引擎的可靠事件缓冲区可能会过载，从而导致相关玩家断开连接。这种调用使用不可靠函数会更安全——例如，在非关键性的外观事件上，如生成声音和视觉效果。
- en: Validating data
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 验证数据
- en: If you are using C++, RPCs are the only way to pass data from the client to
    the server and vice versa, so it is a good habit to validate it whenever needed.
    The concept behind having a validation function for an RPC is that if it discovers
    any invalid parameters, it can signal the system to disconnect the client or server
    that initiated the RPC call. To ensure responsiveness, it’s preferable to retrieve
    data directly from the client and validate it on the server side.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用C++，RPC是唯一从客户端向服务器以及相反方向传递数据的方式，因此，在需要时验证它是好习惯。RPC验证函数背后的概念是，如果它发现任何无效参数，它可以通知系统断开发起RPC调用的客户端或服务器。为了确保响应性，最好直接从客户端检索数据并在服务器端进行验证。
- en: Remembering that the GameMode exists only on the server
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 记住GameMode只存在于服务器上
- en: This may seem like a pretty basic topic, but you should always keep in mind
    that the GameMode is a non-replicated Actor and that it runs only on the server.
    This means that, whenever you will try to get it from a client, you will get a
    `null` value. Consequently, calling an RPC on it is simply nonsense as it will
    run locally only on the server.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来是一个非常基础的话题，但您应该始终记住，GameMode是一个非复制的Actor，并且它只在服务器上运行。这意味着，无论您何时尝试从客户端获取它，您都会得到一个`null`值。因此，在它上面调用RPC纯粹是胡说八道，因为它只会在服务器上本地运行。
- en: Using a naming convention for RPCs
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为RPCs使用命名约定
- en: As your project grows in size, keeping track of which functions are RPCs and
    which are not can become challenging; this means that using a good naming convention
    may be a time-saver. You can use a `_Server` and `_Client` suffix, as I showed
    you during the previous chapters, or you can opt for a `Server_` and `Client_`
    prefix. You can even differentiate between `_Client` and `_Multicast` RPCs if
    you wish.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 随着您的项目规模的增长，跟踪哪些函数是RPCs以及哪些不是可能会变得具有挑战性；这意味着使用良好的命名约定可能会节省时间。您可以使用我在前几章中向您展示的`_Server`和`_Client`后缀，或者您可以选择`Server_`和`Client_`前缀。如果您愿意，甚至可以区分`_Client`和`_Multicast`
    RPCs。
- en: If you’re working with a team, this is typically a requirement. However, even
    if you’re working solo, you’ll find this convention to be useful in the long run.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您与团队一起工作，这通常是一个要求。然而，即使您单独工作，您也会发现这个约定在长期来看是有用的。
- en: As you may have noticed, improving your game is a constant journey that never
    truly ends. You’ll always be tweaking things, analyzing data, and identifying
    any obstacles. With the tips I’ve mentioned, I hope to make this process a little
    less stressful for you!
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 如您可能已经注意到的，提高您的游戏水平是一个永无止境的旅程，它永远不会真正结束。您将始终在调整事物、分析数据和识别任何障碍。通过我提到的建议，我希望能让这个过程对您来说压力小一些！
- en: Summary
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, I talked about a really important topic in game programming
    – making sure that your game works properly and fixing any issues that come up.
    In earlier chapters, we covered some tools for finding and fixing problems in
    Unreal Engine, but now, I’ve given you some even stronger and more helpful tools
    that you can use to make your game development even better. First of all, you
    learned how to configure **Multiplayer Options** from **Editor Preferences**,
    after which you created a log category to properly set custom messages when debugging.
    You were then presented with how to emulate a real multiplayer environment on
    a single PC by testing network issues such as packet loss or low bandwidth.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我谈到了游戏编程中的一个非常重要的话题——确保您的游戏正常运行并修复任何出现的问题。在早期章节中，我们介绍了一些在虚幻引擎中查找和修复问题的工具，但现在，我已经给了你一些更强、更有帮助的工具，您可以使用这些工具使您的游戏开发更加出色。首先，您学习了如何从**编辑器首选项**中配置**多人选项**，之后您创建了一个日志类别，以便在调试时正确设置自定义消息。然后，您被介绍如何通过测试网络问题（如数据包丢失或低带宽）在单个PC上模拟真实的多人环境。
- en: Next, I presented the Network Profiler, a standalone piece of software that
    will let you read and analyze a multiplayer session to help you find possible
    issues and bottlenecks in your code.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我介绍了网络分析器，这是一款独立的软件，可以让您读取和分析多人会话，以帮助您找到代码中的潜在问题和瓶颈。
- en: Lastly, I gave you some advice on how to improve your project even more.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我给了你一些如何进一步改进项目的建议。
- en: Testing and debugging a game before release can help ensure that it runs smoothly
    and offers a positive experience to players. Additionally, being equipped with
    the right tools and knowledge for debugging can make the process faster and easier,
    saving valuable time and resources during development. Understanding how to debug
    a multiplayer game is crucial because the involvement of multiple players can
    create technical challenges that are more intricate, such as synchronization and
    latency issues.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在发布前测试和调试游戏可以帮助确保游戏运行顺畅并为玩家提供积极的体验。此外，拥有调试所需的正确工具和知识可以使过程更快、更简单，在开发过程中节省宝贵的时间和资源。了解如何调试多人游戏至关重要，因为多个玩家的参与可能会产生更复杂的技术挑战，例如同步和延迟问题。
- en: In the upcoming chapter, we’ll get back to our project (and the wicked machinations
    of the Lichlord!). Our goal this time around? Mastering the art of managing a
    gameplay session to ensure an unforgettable experience for our future, enthusiastic
    players. Let’s make sure they keep coming back for more, shall we?
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将回到我们的项目（以及lichlord的邪恶阴谋！）我们的目标这次是掌握管理游戏会话的艺术，以确保我们的未来热情的玩家们拥有难忘的体验。让我们确保他们能继续回来获取更多，好吗？
- en: Part 4:Deploying Your Game Online
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4部分：在线部署你的游戏
- en: In the last part of the book, you will become acquainted with the more intricate
    elements of the Unreal Engine multiplayer system. You will begin by delving into
    game session management and progress to constructing a deployable build of your
    game. Finally, you will gain insight into cloud services, which can enhance the
    appeal of your game to players.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的最后部分，你将熟悉《虚幻引擎》多玩家系统的更复杂元素。你将从深入游戏会话管理开始，进而构建你游戏的可部署版本。最后，你将了解云服务，这些服务可以增强你的游戏对玩家的吸引力。
- en: 'This part includes the following chapters:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包括以下章节：
- en: '[*Chapter 12*](B18203_12.xhtml#_idTextAnchor239), *Managing Multiplayer Sessions*'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第12章*](B18203_12.xhtml#_idTextAnchor239)，*管理多玩家会话*'
- en: '[*Chapter 13*](B18203_13.xhtml#_idTextAnchor255), *Handling Data During a Session*'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第13章*](B18203_13.xhtml#_idTextAnchor255)，*会话期间处理数据*'
- en: '[*Chapter 14*](B18203_14.xhtml#_idTextAnchor275), *Deploying Multiplayer Games*'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第14章*](B18203_14.xhtml#_idTextAnchor275)，*部署多玩家游戏*'
- en: '[*Chapter 15*](B18203_15.xhtml#_idTextAnchor288), *Adding Epic Online Services
    (EOS)*'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第15章*](B18203_15.xhtml#_idTextAnchor288)，*添加史诗在线服务 (EOS)*'
