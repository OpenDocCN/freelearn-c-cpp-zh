["```cpp\n#include <system_error>\n\n#include <unistd.h>\n#include <sys/fcntl.h>\n#include <time.h>\n\n[[nodiscard]] ssize_t Write(int fd, const void* buffer,\n                            ssize_t size) {\n  return ::write(fd, buffer, size);\n}\n\nclass TimeSaver1 {\n  int fd;\n\npublic:\n  TimeSaver1(const char* name) {\n    int fd = open(name, O_RDWR|O_CREAT|O_TRUNC, 0600);\n    if (fd < 0) {\n      throw std::system_error(errno,\n                              std::system_category(),\n                              \"Failed to open file\");\n    }\n    Update();\n  }\n\n  ~TimeSaver1() {\n    Update();\n    close(fd);\n  }\n\nprivate:\n  void Update() {\n    time_t tm;\n    time(&tm);\n    Write(fd, &tm, sizeof(tm));\n  }\n};\n```", "```cpp\nclass TimeSaver2 {\n  int fd;\n\npublic:\n  TimeSaver2(const char* name) {\n    fd = open(name, O_RDWR|O_CREAT|O_TRUNC, 0600);\n    if (fd < 0) {\n      throw std::system_error(errno,\n                              std::system_category(),\n                              \"Failed to open file\");\n    }\n    Update();\n  }\n\n  ~TimeSaver2() {\n    Update();\n    if (close(fd) < 0) {\n      throw std::system_error(errno,\n                              std::system_category(),\n                              \"Failed to close file\");\n    }\n  }\n\nprivate:\n  void Update() {\n    time_t tm = time(&tm);\n    int rv = Write(fd, &tm, sizeof(tm));\n    if (rv < 0) {\n      throw std::system_error(errno,\n                              std::system_category(),\n                              \"Failed to write to file\");\n    }\n  }\n};\n```", "```cpp\nint main() {\n  TimeSaver1 ts1(\"timestamp1.bin\");\n  TimeSaver2 ts2(\"timestamp2.bin\");\n  return 0;\n}\n```", "```cpp\ncmake_minimum_required(VERSION 3.5.1)\nproject(returns)\nadd_executable(returns returns.cpp)\n\nset(CMAKE_SYSTEM_NAME Linux)\nset(CMAKE_SYSTEM_PROCESSOR arm)\n\nSET(CMAKE_CXX_FLAGS \"--std=c++17\")\nset(CMAKE_CXX_COMPILER /usr/bin/arm-linux-gnueabi-g++)\n```", "```cpp\n    time(&tm);\n    Write(fd, &tm, sizeof(tm));\n```", "```cpp\n    close(fd);\n```", "```cpp\n    time_t tm = time(&tm);\n```", "```cpp\n    int rv = Write(fd, &tm, sizeof(tm));\n    if (rv < 0) {\n      throw std::system_error(errno,\n                              std::system_category(),\n                              \"Failed to write to file\");\n    }\n```", "```cpp\n    if (close(fd) < 0) {\n      throw std::system_error(errno,\n                              std::system_category(),\n                              \"Failed to close file\");\n    }\n```", "```cpp\n[[nodiscard]] ssize_t Write(int fd, const void* buffer,\n                            ssize_t size) {\n  return ::write(fd, buffer, size);\n}\n```", "```cpp\n$ ls timestamp*\n```", "```cpp\n# apt-get install cppcheck\n```", "```cpp\n# su - user\n$\n```", "```cpp\n$ cppcheck --std=posix --enable=warning returns.cpp\n```", "```cpp\n# apt-get install cppcheck $ cppcheck --std=posix --enable=warning returns.cpp\n```", "```cpp\nint fd = open(name, O_RDWR|O_CREAT|O_TRUNC, 0600);\n```", "```cpp\n#include <cassert>\n#include <system_error>\n\n#include <unistd.h>\n#include <sys/fcntl.h>\n#include <time.h>\n\nclass TimeSaver1 {\n  int fd = -1;\n\npublic:\n  TimeSaver1(const char* name) {\n    assert(name != nullptr);\n    assert(name[0] != '\\0');\n\n    int fd = open(name, O_RDWR|O_CREAT|O_TRUNC, 0600);\n    if (fd < 0) {\n      throw std::system_error(errno,\n                              std::system_category(),\n                              \"Failed to open file\");\n    }\n    assert(this->fd >= 0);\n  }\n\n  ~TimeSaver1() {\n    assert(this->fd >= 0);\n    close(fd);\n  }\n};\n```", "```cpp\nint main() {\n  TimeSaver1 ts1(\"\");\n  return 0;\n}\n```", "```cpp\ncmake_minimum_required(VERSION 3.5.1)\nproject(assert)\nadd_executable(assert assert.cpp)\n\nset(CMAKE_SYSTEM_NAME Linux)\nset(CMAKE_SYSTEM_PROCESSOR arm)\n\nSET(CMAKE_CXX_FLAGS \"--std=c++11\")\nset(CMAKE_CXX_COMPILER /usr/bin/arm-linux-gnueabi-g++)\n```", "```cpp\nassert(name != nullptr);\nassert(name[0] != '\\0');\n```", "```cpp\n#include <cassert>\n```", "```cpp\nint fd = open(name, O_RDWR|O_CREAT|O_TRUNC, 0600);\n```", "```cpp\nassert(this->fd >= 0);\n```", "```cpp\nassert(this->fd >= 0);\n```", "```cpp\nTimeSaver1 ts1(\"\");\n```", "```cpp\nTimeSaver1 ts1(\"timestamp.bin\");\n```", "```cpp\nfd = open(name, O_RDWR|O_CREAT|O_TRUNC, 0600);\n```", "```cpp\n# apt-get install openjdk-11-jre\n```", "```cpp\n# su - user\n$ cd /mnt\n```", "```cpp\n$ wget -O - https://cpachecker.sosy-lab.org/CPAchecker-1.9-unix.tar.bz2 | tar xjf -\n```", "```cpp\n$ cd CPAchecker-1.9-unix\n```", "```cpp\n./scripts/cpa.sh -default doc/examples/example.c \n```", "```cpp\n$ wget https://raw.githubusercontent.com/sosy-lab/cpachecker/trunk/doc/examples/example_bug.c\n```", "```cpp\n./scripts/cpa.sh -default example_bug.c \n```", "```cpp\n./scripts/cpa.sh -default doc/examples/example.c\n```", "```cpp\n$ wget https://raw.githubusercontent.com/sosy-lab/cpachecker/trunk/doc/examples/example_bug.c\n```"]