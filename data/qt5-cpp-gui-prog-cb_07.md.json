["```cpp\n    #include <QCoreApplication>\n    #include <QDebug>\n    #include <QtMath>\n    #include <QDateTime>\n    #include <QTextCodec>\n    #include <iostream>\n    ```", "```cpp\n    int numberA = 2;\n    QString numberB = \"5\";\n    qDebug() << \"1) \" << \"2 + 5 =\" << numberA + numberB.toInt();\n    ```", "```cpp\n    float numberC = 10.25;\n    float numberD = 2;\n    QString result = QString::number(numberC * numberD);\n    qDebug() << \"2) \" <<  \"10.25 * 2 =\" << result;\n    ```", "```cpp\n    float numberE = 10.3;\n    float numberF = qFloor(numberE);\n    qDebug() << \"3) \" << \"Floor of 10.3 is\" << numberF;\n    ```", "```cpp\n    float numberG = 10.3;\n    float numberH = qCeil(numberG);\n    qDebug() << \"4) \" << \"Ceil of 10.3 is\" << numberH;\n    ```", "```cpp\n    QString dateTimeAString = \"2016-05-04 12:24:00\";\n    QDateTime dateTimeA = QDateTime::fromString(dateTimeAString, \"yyyy-MM-dd hh:mm:ss\");\n    qDebug() << \"5) \" << dateTimeA;\n    ```", "```cpp\n    QDateTime dateTimeB = QDateTime::currentDateTime();\n    QString dateTimeBString = dateTimeB.toString(\"dd/MM/yy hh:mm\");\n    qDebug() << \"6) \" << dateTimeBString;\n    ```", "```cpp\n    QString hello1 = \"hello world!\";\n    qDebug() << \"7) \" << hello1.toUpper();\n    ```", "```cpp\n    QString hello2 = \"HELLO WORLD!\";\n    qDebug() << \"8) \" << hello2.toLower();\n    ```", "```cpp\n    QVariant aNumber = QVariant(3.14159);\n    double aResult = 12.5 * aNumber.toDouble();\n    qDebug() << \"9) 12.5 * 3.14159 =\" << aResult;\n    ```", "```cpp\n    qDebug() << \"10) \";\n    QVariant myData = QVariant(10);\n    qDebug() << myData;\n    myData = myData.toFloat() / 2.135;\n    qDebug() << myData;\n    myData = true;\n    qDebug() << myData;\n    myData = QDateTime::currentDateTime();\n    qDebug() << myData;\n    myData = \"Good bye!\";\n    qDebug() << myData;\n    ```", "```cpp\n    #include <QMainWindow>\n    #include <QFileDialog>\n    #include <QMessageBox>\n    #include <QDebug>\n    ```", "```cpp\n    void MainWindow::on_browseButton_clicked()\n    {\n      QString fileName = QFileDialog::getOpenFileName(this, \"Open Image\", \"\", \"Image Files (*.png *.jpg *.bmp)\");\n      ui->filePath->setText(fileName);\n    }\n    ```", "```cpp\n    #include <QMainWindow>\n    #include <QFileDialog>\n    #include <QProcess>\n    #include <QMessageBox>\n    #include <QScrollBar>\n    #include <QDebug>\n    ```", "```cpp\n    public:\n      explicit MainWindow(QWidget *parent = 0);\n      ~MainWindow();\n\n     QProcess* process;\n     QString outputText;\n     QString fileName;\n     QString outputFileName;\n\n    ```", "```cpp\n    private slots:\n      void on_browseButton_clicked();\n      void on_convertButton_clicked();\n\n     void processStarted();\n     void readyReadStandardOutput();\n     void processFinished();\n\n    ```", "```cpp\n    MainWindow::MainWindow(QWidget *parent) :\n      QMainWindow(parent), ui(new Ui::MainWindow)\n    {\n      ui->setupUi(this);\n\n     process = new QProcess(this);\n     connect(process, SIGNAL(started()), this, SLOT(processStarted()));\n     connect(process,SIGNAL(readyReadStandardOutput()), this,SLOT(readyReadStandardOutput()));\n     connect(process, SIGNAL(finished(int)), this, SLOT(processFinished()));\n    }\n    ```", "```cpp\n    void MainWindow::on_browseButton_clicked()\n    {\n      QString fileName = QFileDialog::getOpenFileName(this, \"Open Video\", \"\", \"Video Files (*.avi *.mp4 *.mov)\");\n      ui->filePath->setText(fileName);\n    }\n    ```", "```cpp\n    void MainWindow::processStarted()\n    {\n      qDebug() << \"Process started.\";\n\n      ui->browseButton->setEnabled(false);\n      ui->fileFormat->setEditable(false);\n      ui->convertButton->setEnabled(false);\n    }\n    ```", "```cpp\n    void MainWindow::readyReadStandardOutput()\n    {\n      outputText += process->readAllStandardOutput();\n      ui->outputDisplay->setText(outputText);\n\n      ui->outputDisplay->verticalScrollBar()->setSliderPosition(ui->outputDisplay->verticalScrollBar()->maximum());\n    }\n    ```", "```cpp\n    void MainWindow::processFinished()\n    {\n      qDebug() << \"Process finished.\";\n\n      if (QFile::exists(outputFileName))\n      {\n        QMessageBox::information(this, \"Success\", \"Video successfully converted.\");\n      }\n      else\n      {\n        QMessageBox::information(this, \"Failed\", \"Failed to convert video.\");\n      }\n\n      ui->browseButton->setEnabled(true);\n      ui->fileFormat->setEditable(true);\n      ui->convertButton->setEnabled(true);\n    }\n    ```", "```cpp\n    QT += core gui network\n    ```", "```cpp\n    #include <QMainWindow>\n    #include <QDoubleValidator>\n    #include <QNetworkAccessManager>\n    #include <QNetworkRequest>\n    #include <QNetworkReply>\n    #include <QJsonDocument>\n    #include <QJsonObject>\n    #include <QDebug>\n    #include <QMessageBox>\n    ```", "```cpp\n    private slots:\n      void on_convertButton_clicked();\n     void finished(QNetworkReply* reply);\n\n    ```", "```cpp\n    private:\n      Ui::MainWindow *ui;\n     QNetworkAccessManager* manager;\n     QString targetCurrency;\n\n    ```", "```cpp\n    MainWindow::MainWindow(QWidget *parent) :\n      QMainWindow(parent), ui(new Ui::MainWindow)\n    {\n      ui->setupUi(this);\n\n      QStringList currencies;\n      currencies.push_back(\"EUR\");\n      currencies.push_back(\"USD\");\n      currencies.push_back(\"CAD\");\n      currencies.push_back(\"MYR\");\n      currencies.push_back(\"GBP\");\n\n      ui->currencyFrom->insertItems(0, currencies);\n      ui->currencyTo->insertItems(0, currencies);\n\n      QValidator *inputRange = new QDoubleValidator(this);\n      ui->amountFrom->setValidator(inputRange);\n\n      manager = new QNetworkAccessManager(this);\n      connect(manager, SIGNAL(finished(QNetworkReply*)), this, SLOT(finished(QNetworkReply*)));\n    }\n    ```", "```cpp\n    void MainWindow::on_convertButton_clicked()\n    {\n      if (ui->amountFrom->text() != \"\")\n      {\n        ui->convertButton->setEnabled(false);\n        QString from = ui->currencyFrom->currentText();\n        QString to = ui->currencyTo->currentText();\n        targetCurrency = to;\n        QString url = \"http://api.fixer.io/latest?base=\" + from + \"&symbols=\" + to;\n        QNetworkRequest request= QNetworkRequest(QUrl(url));\n        manager->get(request);\n      }\n      else\n      {\n        QMessageBox::warning(this, \"Error\", \"Please insert a value.\");\n      }\n    }\n    ```", "```cpp\n    void MainWindow::finished(QNetworkReply* reply)\n    {\n      QByteArray response = reply->readAll();\n      qDebug() << response;\n      QJsonDocument jsonResponse = QJsonDocument::fromJson(response);\n      QJsonObject jsonObj = jsonResponse.object();\n      QJsonObject jsonObj2 = jsonObj.value(\"rates\").toObject();\n      double rate = jsonObj2.value(targetCurrency).toDouble();\n      if (rate == 0)\n        rate = 1;\n      double amount = ui->amountFrom->text().toDouble();\n      double result = amount * rate;\n      ui->amountTo->setText(QString::number(result));\n      ui->convertButton->setEnabled(true);\n    }\n    ```"]