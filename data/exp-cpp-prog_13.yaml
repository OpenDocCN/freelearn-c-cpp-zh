- en: Thread Synchronization and Communication
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 线程同步和通信
- en: While, generally, threads are used to work on a task more or less independently
    from other threads, there are many occasions where one would want to pass data
    between threads, or even control other threads, such as from a central task scheduler
    thread. This chapter looks at how such tasks are accomplished with the C++11 threading
    API.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，线程用于相对独立地处理任务，但有许多情况下，人们希望在线程之间传递数据，甚至控制其他线程，比如来自中央任务调度器线程。本章将介绍如何使用C++11线程API完成这些任务。
- en: 'Topics covered in this chapter include the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题包括以下内容：
- en: Using mutexes, locks, and similar synchronization structures
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用互斥锁、锁和类似的同步结构
- en: Using condition variables and signals to control threads
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用条件变量和信号来控制线程
- en: Safely passing and sharing data between threads
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全地传递和共享线程之间的数据
- en: Safety first
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全第一
- en: The central problem with concurrency is that of ensuring safe access to shared
    resources even when communicating between threads. There is also the issue of
    threads being able to communicate and synchronize themselves.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 并发的核心问题在于确保在线程之间通信时对共享资源的安全访问。还有线程能够进行通信和同步的问题。
- en: What makes multithreaded programming such a challenge is to be able to keep
    track of each interaction between threads, and to ensure that each and every form
    of access is secured while not falling into the trap of deadlocks and data races.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 多线程编程的挑战在于能够跟踪线程之间的每次交互，并确保每种形式的访问都得到保护，同时不会陷入死锁和数据竞争的陷阱。
- en: In this chapter, we will look at a fairly complex example involving a task scheduler.
    This is a form of high-concurrency, high-throughput situation where many different
    requirements come together with many potential traps, as we will see in a moment.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看一个涉及任务调度程序的相当复杂的例子。这是一种高并发、高吞吐量的情况，许多不同的要求与许多潜在的陷阱相结合，我们将在下面看到。
- en: The scheduler
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调度程序
- en: A good example of multithreading with a significant amount of synchronization
    and communication between threads is the scheduling of tasks. Here, the goal is
    to accept incoming tasks and assign them to work threads as quickly as possible.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 具有大量同步和线程之间通信的多线程良好示例是任务调度。在这里，目标是尽快接受传入任务并将其分配给工作线程。
- en: In this scenario, a number of different approaches are possible. Often one has
    worker threads running in an active loop, constantly polling a central queue for
    new tasks. Disadvantages of this approach include wasting of processor cycles
    on the said polling, and the congestion which forms at the synchronization mechanism
    used, generally a mutex. Furthermore, this active polling approach scales very
    poorly when the number of worker threads increase.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，有许多不同的方法可行。通常情况下，工作线程会在一个活跃的循环中运行，不断地轮询中央队列以获取新任务。这种方法的缺点包括在轮询上浪费处理器周期，以及在同步机制（通常是互斥锁）上形成的拥塞。此外，当工作线程数量增加时，这种主动轮询方法的扩展性非常差。
- en: 'Ideally, each worker thread would wait idly until it is needed again. To accomplish
    this, we have to approach the problem from the other side: not from the perspective
    of the worker threads, but from that of the queue. Much like the scheduler of
    an operating system, it is the scheduler which is aware of both the tasks which
    require processing as well as the available worker threads.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，每个工作线程都会空闲等待直到再次需要它。为了实现这一点，我们必须从另一方面解决问题：不是从工作线程的角度，而是从队列的角度。就像操作系统的调度程序一样，调度程序既知道需要处理的任务，也知道可用的工作线程。
- en: In this approach, a central scheduler instance would accept new tasks and actively
    assign them to worker threads. The said scheduler instance may also manage these
    worker threads, such as their number and priority, depending on the number of
    incoming tasks and the type of task or other properties.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种方法中，一个中央调度程序实例将接受新任务并积极地将它们分配给工作线程。该调度程序实例还可以管理这些工作线程，例如它们的数量和优先级，具体取决于传入任务的数量和任务的类型或其他属性。
- en: High-level view
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高层视图
- en: 'At its core, our scheduler or dispatcher is quite simple, functioning like
    a queue with all of the scheduling logic built into it, as seen in the following
    diagram:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在其核心，我们的调度程序或调度器非常简单，就像一个队列，所有调度逻辑都内置其中，如下图所示：
- en: '![](img/289f6379-e42c-4b22-80de-d73338c3445d.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/289f6379-e42c-4b22-80de-d73338c3445d.png)'
- en: As one can see from the preceding high-level view, there really isn't much to
    it. However, as we'll see in a moment, the actual implementation does have a number
    of complications.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的高层视图可以看出，实际上并没有太多内容。然而，正如我们将在下面看到的，实际实现确实有许多复杂之处。
- en: Implementation
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现
- en: 'As is usual, we start off with the `main` function, contained in `main.cpp`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，我们从`main`函数开始，它包含在`main.cpp`中：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The custom headers we include are those for our dispatcher implementation, as
    well as the `request` class that we'll use.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们包含的自定义头文件是我们调度程序实现的头文件，以及我们将使用的`request`类。
- en: 'Globally, we define an atomic variable to be used with the signal handler,
    as well as a mutex which will synchronize the output (on the standard output)
    from our logging method:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在全局范围内，我们定义了一个用于信号处理程序的原子变量，以及一个将同步输出（在标准输出上）的互斥锁，用于我们的日志方法：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Our signal handler function (for `SIGINT` signals) simply sets the global atomic
    variable that we defined earlier:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的信号处理函数（用于`SIGINT`信号）只是设置了我们之前定义的全局原子变量：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In our logging function, we use the global mutex to ensure that writing to
    the standard output is synchronized:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的日志函数中，我们使用全局互斥锁来确保对标准输出的写入是同步的：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the `main` function, we install the signal handler for `SIGINT` to allow
    us to interrupt the execution of the application. We also call the static `init()`
    function on the `Dispatcher` class to initialize it:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在`main`函数中，我们安装了`SIGINT`的信号处理程序，以允许我们中断应用程序的执行。我们还在`Dispatcher`类上调用静态的`init()`函数来初始化它：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Next, we set up the loop in which we will create new requests. In each cycle,
    we create a new `Request` instance, and use its `setValue()` function to set an
    integer value (current cycle number). We also set our logging function on the
    request instance before adding this new request to `Dispatcher` using its static
    `addRequest()` function.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们设置循环，在其中我们将创建新的请求。在每个循环中，我们创建一个新的`Request`实例，并使用其`setValue()`函数设置一个整数值（当前循环编号）。在将此新请求添加到`Dispatcher`时，我们还在请求实例上设置了我们的日志函数，使用其静态的`addRequest()`函数。
- en: 'This loop will continue until the maximum number of cycles have been reached,
    or `SIGINT` has been signaled using *Ctrl*+*C* or similar:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这个循环将继续，直到达到最大循环次数，或者使用*Ctrl*+*C*或类似方法发出`SIGINT`信号为止：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Finally, we wait for 5 seconds using the thread's `sleep_for()` function, and
    the `chrono::seconds()` function from the `chrono` STL header.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用线程的`sleep_for()`函数和`chrono`STL头文件中的`chrono::seconds()`函数等待5秒。
- en: We also call the `stop()` function on `Dispatcher` before returning.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在返回之前，我们还调用了`Dispatcher`上的`stop()`函数。
- en: Request class
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 请求类
- en: 'A request for `Dispatcher` always derives from the pure virtual `AbstractRequest`
    class:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`Dispatcher`的请求始终派生自纯虚拟的`AbstractRequest`类：'
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This `AbstractRequest` class defines an API with three functions, which a deriving
    class always has to implement. Out of these, the `process()` and `finish()` functions
    are the most generic and likely to be used in any practical implementation. The
    `setValue()` function is specific to this demonstration implementation, and would
    likely be adapted or extended to fit a real-life scenario.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`AbstractRequest`类定义了一个具有三个函数的API，派生类总是必须实现这些函数。其中，`process()`和`finish()`函数是最通用的，可能在任何实际实现中使用。`setValue()`函数是特定于此演示实现的，可能会被调整或扩展以适应实际情况。
- en: The advantage of using an abstract class as the basis for a request is that
    it allows the `Dispatcher` class to handle many different types of requests as
    long as they all adhere to this same basic API.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 使用抽象类作为请求的基础的优势在于，它允许`Dispatcher`类处理许多不同类型的请求，只要它们都遵循相同的基本API。
- en: 'Using this abstract interface, we implement a basic `Request` class as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个抽象接口，我们实现了一个基本的`Request`类如下所示：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In its header file, we first define the function pointer's format. After this,
    we implement the request API, and add the `setOutput()` function to the base API,
    which accepts a function pointer for logging. Both setter functions merely assign
    the provided parameter to their respective private class members.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在其头文件中，我们首先定义了函数指针的格式。之后，我们实现了请求API，并在基本API中添加了`setOutput()`函数，该函数接受用于记录日志的函数指针。这两个setter函数仅将提供的参数分配给它们各自的私有类成员。
- en: 'Next, the class function implementations are given as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，类函数的实现如下所示：
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Both of these implementations are very basic; they merely use the function pointer
    to output a string indicating the status of the worker thread.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个实现都非常基本；它们仅使用函数指针来输出指示工作线程状态的字符串。
- en: In a practical implementation, one would add the business logic to the `process()`
    function with the `finish()` function containing any functionality to finish up
    a request such as writing a map into a string.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际实现中，可以在`process()`函数中添加业务逻辑，而`finish()`函数包含完成请求的任何功能，例如将映射写入字符串。
- en: Worker class
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Worker类
- en: Next is the `Worker` class. This contains the logic which will be called by
    `Dispatcher` in order to process a request.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是`Worker`类。这包含了`Dispatcher`将调用以处理请求的逻辑。
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Whereas the adding of a request to `Dispatcher` does not require any special
    logic, the `Worker` class does require the use of condition variables to synchronize
    itself with the dispatcher. For the C++11 threads API, this requires a condition
    variable, a mutex, and a unique lock.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然将请求添加到`Dispatcher`不需要任何特殊逻辑，但`Worker`类确实需要使用条件变量来与调度程序同步。对于C++11线程API，这需要一个条件变量、一个互斥锁和一个唯一锁。
- en: The unique lock encapsulates the mutex, and will ultimately be used with the
    condition variable as we will see in a moment.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的锁封装了互斥锁，并最终将与条件变量一起使用，我们马上就会看到。
- en: Beyond this, we define methods to start and stop the worker, to set a new request
    for processing, and to obtain access to its internal condition variable.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，我们定义了启动和停止工作线程的方法，设置要处理的新请求，并获取其内部条件变量的访问权限。
- en: 'Moving on, the rest of the implementation is written as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，其余的实现如下所示：
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Beyond the `getter` function for the condition variable, we define the `run()`
    function, which `dispatcher` will run for each worker thread upon starting it.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 除了条件变量的`getter`函数之外，我们定义了`run()`函数，`dispatcher`将在启动每个工作线程时运行它。
- en: Its main loop merely checks that the `stop()` function hasn't been called yet,
    which would have set the running Boolean value to `false`, and ended the work
    thread. This is used by `Dispatcher` when shutting down, allowing it to terminate
    the worker threads. Since Boolean values are generally atomic, setting and checking
    can be done simultaneously without risk or requiring a mutex.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 其主循环仅检查`stop()`函数是否已被调用，这会将运行布尔值设置为`false`，并结束工作线程。这是由`Dispatcher`在关闭时使用的，允许它终止工作线程。由于布尔值通常是原子的，因此可以同时设置和检查，而无需风险或需要互斥锁。
- en: Moving on, the check of the `ready` variable is to ensure that a request is
    actually waiting when the thread is first run. On the first run of the worker
    thread, no request will be waiting, and thus, attempting to process one would
    result in a crash. Upon `Dispatcher` setting a new request, this Boolean variable
    will be set to `true`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 继续进行，`ready`变量的检查是为了确保在线程首次运行时实际上有一个请求在等待。在工作线程的第一次运行时，不会有请求在等待，因此，尝试处理一个请求将导致崩溃。在`Dispatcher`设置新请求时，这个布尔变量将被设置为`true`。
- en: If a request is waiting, the `ready` variable will be set to `false` again,
    after which the request instance will have its `process()` and `finish()` functions
    called. This will run the business logic of the request on the worker thread's
    thread, and finalize it.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有请求在等待，`ready`变量将再次设置为`false`，之后请求实例将调用其`process()`和`finish()`函数。这将在工作线程的线程上运行请求的业务逻辑，并完成它。
- en: Finally, the worker thread adds itself to the dispatcher using its static `addWorker()`
    function. This function will return `false` if no new request is available, and
    cause the worker thread to wait until a new request has become available. Otherwise,
    the worker thread will continue with the processing of the new request that `Dispatcher`
    will have set on it.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，工作线程使用其静态的`addWorker()`函数将自己添加到调度程序。如果没有新请求可用，此函数将返回`false`，并导致工作线程等待直到有新请求可用。否则，工作线程将继续处理`Dispatcher`设置的新请求。
- en: If asked to wait, we enter a new loop. This loop will ensure that when the condition
    variable is woken up, it is because we got signaled by `Dispatcher` (`ready` variable
    set to `true`), and not because of a spurious wake-up.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果被要求等待，我们进入一个新的循环。这个循环将确保当条件变量被唤醒时，是因为我们收到了`Dispatcher`的信号（`ready`变量设置为`true`），而不是因为虚假唤醒。
- en: Last of all, we enter the actual `wait()` function of the condition variable
    using the unique lock instance we created before along with a timeout. If a timeout
    occurs, we can either terminate the thread, or keep waiting. Here, we choose to
    do nothing and just re-enter the waiting loop.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用之前创建的唯一锁实例和超时进入条件变量的实际`wait()`函数。如果超时发生，我们可以终止线程，或者继续等待。在这里，我们选择什么都不做，只是重新进入等待循环。
- en: Dispatcher
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调度程序
- en: 'As the last item, we have the `Dispatcher` class itself:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一项是`Dispatcher`类本身：
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Most of this will look familiar. As you will have surmised by now, this is a
    fully static class.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 大部分内容都很熟悉。到目前为止，您已经推测到，这是一个完全静态的类。
- en: 'Moving on, its implementation is as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，它的实现如下：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'After setting up the static class members, the `init()` function is defined.
    It starts the specified number of worker threads keeping a reference to each worker
    and thread instance in their respective vector data structures:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 设置静态类成员后，定义了`init()`函数。它启动指定数量的工作线程，并在各自的向量数据结构中保留对每个工作线程和线程实例的引用：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the `stop()` function, each worker instance has its `stop()` function called.
    This will cause each worker thread to terminate, as we saw earlier in the `Worker`
    class description.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在`stop()`函数中，每个工作实例都调用其`stop()`函数。这将导致每个工作线程终止，就像我们在`Worker`类描述中看到的那样。
- en: 'Finally, we wait for each thread to join (that is, finish) prior to returning:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们等待每个线程加入（即完成）后再返回：
- en: '[PRE14]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `addRequest()` function is where things get interesting. In this function,
    a new request is added. What happens next depends on whether a worker thread is
    waiting for a new request or not. If no worker thread is waiting (worker queue
    is empty), the request is added to the request queue.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`addRequest()`函数是有趣的地方。在这个函数中，添加了一个新的请求。接下来会发生什么取决于是否有工作线程在等待新请求。如果没有工作线程在等待（工作队列为空），则将请求添加到请求队列。'
- en: The use of mutexes ensures that the access to these queues occurs safely, as
    the worker threads will simultaneously try to access both queues as well.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 互斥锁的使用确保对这些队列的访问是安全的，因为工作线程将同时尝试访问这两个队列。
- en: An important `gotcha` to note here is the possibility of a deadlock. That is,
    a situation where two threads will hold the lock on a resource, with the second
    thread waiting for the first one to release its lock before releasing its own.
    Every situation where more than one mutex is used in a single scope holds this
    potential.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要注意的一个重要问题是死锁的可能性。也就是说，两个线程将持有资源的锁，第二个线程在释放自己的锁之前等待第一个线程释放锁。在单个作用域中使用多个互斥锁的每种情况都存在这种潜力。
- en: In this function, the potential for a deadlock lies in releasing of the lock
    on the workers mutex, and when the lock on the requests mutex is obtained. In
    the case that this function holds the workers mutex and tries to obtain the requests
    lock (when no worker thread is available), there is a chance that another thread
    holds the requests mutex (looking for new requests to handle) while simultaneously
    trying to obtain the workers mutex (finding no requests and adding itself to the
    workers queue).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个函数中，死锁的潜在可能性在于释放工作线程互斥锁，并在获取请求互斥锁时。在这个函数持有工作线程互斥锁并尝试获取请求锁（当没有工作线程可用时），有可能另一个线程持有请求互斥锁（寻找要处理的新请求），同时尝试获取工作线程互斥锁（找不到请求并将自己添加到工作线程队列）。
- en: 'The solution here is simple: release a mutex before obtaining the next one.
    In the situation where one feels that more than one mutex lock has to be held,
    it is paramount to examine and test one''s code for potential deadlocks. In this
    particular situation, the workers mutex lock is explicitly released when it is
    no longer needed, or before the requests mutex lock is obtained, thus preventing
    a deadlock.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方法很简单：在获取下一个互斥锁之前释放一个互斥锁。在一个人觉得必须持有多个互斥锁的情况下，非常重要的是检查和测试潜在死锁的代码。在这种特殊情况下，当不再需要时，或在获取请求互斥锁之前，显式释放工作线程互斥锁，从而防止死锁。
- en: Another important aspect of this particular section of code is the way it signals
    a worker thread. As one can see in the first section of the if/else block, when
    the workers queue is not empty, a worker is fetched from the queue, has the request
    set on it, and then has its condition variable referenced and signaled, or notified.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的另一个重要方面是它如何通知工作线程。正如我们在if/else块的第一部分中看到的，当工作线程队列不为空时，从队列中获取一个工作线程，设置请求，然后引用并发出条件变量的信号或通知。
- en: Internally, the condition variable uses the mutex we handed it before in the
    `Worker` class definition to guarantee only atomic access to it. When the `notify_one()`
    function (generally called `signal()` in other APIs) is called on the condition
    variable, it will notify the first thread in the queue of threads waiting for
    the condition variable to return and continue.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在内部，条件变量使用我们在`Worker`类定义中提供的互斥锁，以确保对它的原子访问。当在条件变量上调用`notify_one()`函数（在其他API中通常称为`signal()`）时，它将通知等待条件变量返回并继续的线程队列中的第一个线程。
- en: 'In the `Worker` class `run()` function, we would be waiting for this notification
    event. Upon receiving it, the worker thread would continue and process the new
    request. The thread reference will then be removed from the queue until it adds
    itself again once it is done processing the request:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Worker`类的`run()`函数中，我们将等待此通知事件。收到通知后，工作线程将继续处理新请求。然后，线程引用将从队列中删除，直到它再次添加自己，一旦完成请求处理：
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: With this last function, a worker thread will add itself to the queue once it
    is done processing a request. It is similar to the earlier function in that the
    incoming worker is first actively matched with any request which may be waiting
    in the request queue. If none are available, the worker is added to the worker
    queue.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个最后一个函数，工作线程在完成请求处理后会将自己添加到队列中。它类似于之前的函数，即首先将传入的工作线程与可能在请求队列中等待的任何请求进行匹配。如果没有可用的请求，工作线程将被添加到工作线程队列中。
- en: It is important to note here that we return a Boolean value which indicates
    whether the calling thread should wait for a new request, or whether it already
    has received a new request while trying to add itself to the queue.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里需要注意的是，我们返回一个布尔值，指示调用线程是否应该等待新请求，还是在尝试将自己添加到队列时已经收到了新请求。
- en: While this code is less complex than that of the previous function, it still
    holds the same potential deadlock issue due to the handling of two mutexes within
    the same scope. Here, too, we first release the mutex we hold before obtaining
    the next one.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这段代码比之前的函数更简单，但由于在同一范围内处理了两个互斥锁，它仍然存在潜在的死锁问题。在这里，我们首先释放我们持有的互斥锁，然后再获取下一个互斥锁。
- en: Makefile
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Makefile
- en: 'The makefile for this `Dispatcher` example is very basic again--it gathers
    all C++ source files in the current folder, and compiles them into a binary using
    `g++`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`Dispatcher`示例的makefile非常基本--它收集当前文件夹中的所有C++源文件，并使用`g++`将它们编译成一个二进制文件：
- en: '[PRE16]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Output
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 输出
- en: 'After compiling the application, running it produces the following output for
    the 50 total requests:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 编译应用程序后，运行它会产生以下输出，总共有50个请求：
- en: '[PRE17]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: At this point, we can already clearly see that even with each request taking
    almost no time to process, the requests are clearly being executed in parallel.
    The first request (request 0) only starts being processed after the sixteenth
    request, while the second request already finishes after the ninth request, long
    before this.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们已经清楚地看到，即使每个请求几乎不需要时间来处理，请求显然是并行执行的。第一个请求（请求0）只在第16个请求之后开始处理，而第二个请求在第九个请求之后就已经完成了。
- en: The factors which determine which thread, and thus, which request is processed
    first depends on the OS scheduler and hardware-based scheduling as described in
    [chapter 9](5a39ae53-980b-4780-be29-f487090fa851.xhtml), *Multithreading Implementation
    on the Processor and OS*. This clearly shows just how few assumptions can be made
    about how a multithreaded application will be executed even on a single platform.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 决定首先处理哪个线程和因此哪个请求的因素取决于操作系统调度程序和基于硬件的调度，如[第9章](5a39ae53-980b-4780-be29-f487090fa851.xhtml)中所述，“处理器和操作系统上的多线程实现”。这清楚地显示了即使在单个平台上，也不能对多线程应用程序的执行做出多少假设。
- en: '[PRE18]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In the preceding code, the fourth and fifth requests also finish in a rather
    delayed fashion.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，第四个和第五个请求也以相当延迟的方式完成。
- en: '[PRE19]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: At this point, the first request finally finishes. This may indicate that the
    initialization time for the first request will always be delayed as compared to
    the successive requests. Running the application multiple times can confirm this.
    It's important that if the order of processing is relevant, this randomness does
    not negatively affect one's application.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，第一个请求终于完成了。这可能表明，与后续请求相比，第一个请求的初始化时间总是会延迟。多次运行应用程序可以确认这一点。重要的是，如果处理顺序很重要，这种随机性不会对应用程序产生负面影响。
- en: '[PRE20]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Request 19 also became fairly delayed, showing once again just how unpredictable
    a multithreaded application can be. If we were processing a large dataset in parallel
    here, with chunks of data in each request, we might have to pause at some points
    to account for these delays, as otherwise, our output cache might grow too large.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 第19个请求也变得相当延迟，再次显示了多线程应用程序有多么不可预测。如果我们在这里并行处理大型数据集，每个请求中都有数据块，我们可能需要在某些时候暂停以考虑这些延迟，否则我们的输出缓存可能会变得太大。
- en: As doing so would negatively affect an application's performance, one might
    have to look at low-level optimizations, as well as the scheduling of threads
    on specific processor cores in order to prevent this from happening.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这样做会对应用程序的性能产生负面影响，人们可能不得不考虑低级优化，以及在特定处理器核心上对线程进行调度，以防止这种情况发生。
- en: '[PRE21]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: All 10 worker threads which were launched in the beginning terminate here as
    we call the `stop()` function of the `Dispatcher`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 最初启动的10个工作线程在这里终止，因为我们调用了`Dispatcher`的`stop()`函数。
- en: Sharing data
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据共享
- en: In the example given in this chapter, we saw how to share information between
    threads in addition to synchronizing threads--this in the form of the requests
    we passed from the main thread into the dispatcher from which each request gets
    passed on to a different thread.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章给出的示例中，我们看到了如何在线程之间共享信息以及同步线程--这是通过从主线程传递给调度程序的请求，每个请求都会传递给不同的线程。
- en: The essential idea behind the sharing of data between threads is that the data
    to be shared exists somewhere in a way which is accessible to two threads or more.
    After this, we have to ensure that only one thread can modify the data, and that
    the data does not get modified while it's being read. Generally, we would use
    mutexes or similar to ensure this.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 线程之间共享数据的基本思想是要共享的数据以某种方式存在，可以被两个或更多个线程访问。之后，我们必须确保只有一个线程可以修改数据，并且在读取数据时数据不会被修改。通常，我们会使用互斥锁或类似的方法来确保这一点。
- en: Using r/w-locks
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用读写锁
- en: Read-write locks are a possible optimization here, because they allow multiple
    threads to read simultaneously from a single data source. If one has an application
    in which multiple worker threads read the same information repeatedly, it would
    be more efficient to use read-write locks than basic mutexes, because the attempts
    to read the data will not block the other threads.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 读写锁在这里是一种可能的优化，因为它允许多个线程同时从单个数据源读取。如果一个应用程序中有多个工作线程反复读取相同的信息，使用读写锁比基本的互斥锁更有效，因为读取数据的尝试不会阻塞其他线程。
- en: A read-write lock can thus be used as a more advanced version of a mutex, namely,
    as one which adapts its behavior to the type of access. Internally, it builds
    on mutexes (or semaphores) and condition variables.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 读写锁因此可以被用作互斥锁的更高级版本，即根据访问类型调整其行为。在内部，它建立在互斥锁（或信号量）和条件变量之上。
- en: Using shared pointers
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用共享指针
- en: First available via the Boost library and introduced natively with C++11, shared
    pointers are an abstraction of memory management using reference counting for
    heap-allocated instances. They are partially thread-safe in that creating multiple
    shared pointer instances can be created, but the referenced object itself is not
    thread-safe.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 首先通过Boost库提供，并在C++11中引入，共享指针是使用引用计数对堆分配实例进行内存管理的抽象。它们在某种程度上是线程安全的，因为可以创建多个共享指针实例，但引用的对象本身不是线程安全的。
- en: Depending on the application, this may suffice, however. To make them properly
    thread-safe, one can use atomics. We will look at this in more detail in [Chapter
    15](fa81398a-9b4d-43c6-8ee5-cec7d6a6b6c1.xhtml), *Atomic Operations - Working
    with the Hardware*.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 根据应用程序的情况，这可能就足够了。要使它们真正线程安全，可以使用原子操作。我们将在[第15章](fa81398a-9b4d-43c6-8ee5-cec7d6a6b6c1.xhtml)中更详细地讨论这个问题，*原子操作
    - 与硬件交互*。
- en: Summary
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at how to pass data between threads in a safe manner
    as part of a fairly complex scheduler implementation. We also looked at the resulting
    asynchronous processing of the said scheduler, and considered some potential alternatives
    and optimizations for passing data between threads.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了如何在一个相当复杂的调度器实现中以安全的方式在线程之间传递数据。我们还看了所述调度器的结果异步处理，并考虑了一些潜在的替代方案和优化方法来在线程之间传递数据。
- en: At this point, you should be able to safely pass data between threads, as well
    as synchronize access to other shared resources.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，你应该能够安全地在线程之间传递数据，以及同步访问其他共享资源。
- en: In the next chapter, we will look at native C++ threading and the primitives
    API.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看一下本地C++线程和基元API。
