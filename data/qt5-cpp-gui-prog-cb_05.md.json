["```cpp\n    import QtQuick 2.3\n    import QtQuick.Window 2.2\n\n    Window {\n      visible: true\n\n      MouseArea {\n        anchors.fill: parent\n        onClicked: {\n          Qt.quit();\n        }\n      }\n\n      Text {\n        text: qsTr(\"Hello World\")\n        anchors.centerIn: parent\n      }\n    }\n    ```", "```cpp\n    import QtQuick 2.5\n    import QtQuick.Window 2.2\n    import QtQuick.Dialogs 1.2\n    ```", "```cpp\n    Window {\n      visible: true\n      width: 360\n      height: 360\n\n      MainForm {\n        anchors.fill: parent\n        loginButton.onClicked: {\n          messageDialog.text = \"Username is \" + userInput.text + \" and password is \" + passInput.text\n            messageDialog.visible = true\n        }\n      }\n\n      MessageDialog {\n        id: messageDialog\n        title: \"Fake login\"\n        text: \"\"\n        onAccepted: {\n          console.log(\"You have clicked the login button\")\n          Qt.quit()\n        }\n      }\n    }\n    ```", "```cpp\n    MultiPointTouchArea {\n      id: touchArea\n      anchors.fill: parent\n      touchPoints: [\n        TouchPoint { id: point1 },\n        TouchPoint { id: point2 }\n      ]\n    }\n    ```", "```cpp\n    Image {\n      id: tux\n      x: (window.width / 2) - (tux.width / 2)\n      y: (window.height / 2) - (tux.height / 2)\n      width: 200\n      height: 220\n      fillMode: Image.PreserveAspectFit\n      source: \"tux.png\"\n    }\n    ```", "```cpp\n    import QtQuick 2.5\n    import QtQuick.Window 2.2\n\n    Window {\n      visible: true\n\n      MainForm {\n        anchors.fill: parent\n      }\n    }\n    ```", "```cpp\n    property int prevPointX: 0\n    property int prevPointY: 0\n    property int curPointX: 0\n    property int curPointY: 0\n\n    property int prevDistX: 0\n    property int prevDistY: 0\n    property int curDistX: 0\n    property int curDistY: 0\n\n    property int tuxWidth: tux.width\n    property int tuxHeight: tux.height\n    ```", "```cpp\n    touchArea.onPressed:\n    {\n      if (touchArea.touchPoints[1].pressed)\n      {\n        if (touchArea.touchPoints[1].x < touchArea.touchPoints[0].x)\n          prevDistX = touchArea.touchPoints[1].x - touchArea.touchPoints[0].x\n        else\n          prevDistX = touchArea.touchPoints[0].x - touchArea.touchPoints[1].x\n\n        if (touchArea.touchPoints[1].y < touchArea.touchPoints[0].y)\n          prevDistY = touchArea.touchPoints[1].y - touchArea.touchPoints[0].y\n        else\n          prevDistY = touchArea.touchPoints[0].y - touchArea.touchPoints[1].y\n\n        tuxWidth = tux.width\n        tuxHeight = tux.height\n      }\n    }\n    ```", "```cpp\n    touchArea.onUpdated:{\n      if (!touchArea.touchPoints[1].pressed)\n      {\n        tux.x += touchArea.touchPoints[0].x - touchArea.touchPoints[0].previousX\n        tux.y += touchArea.touchPoints[0].y - touchArea.touchPoints[0].previousY\n      }\n      else\n      {\n        if (touchArea.touchPoints[1].x < touchArea.touchPoints[0].x)\n        curDistX = touchArea.touchPoints[1].x - touchArea.touchPoints[0].x\n        else\n          curDistX = touchArea.touchPoints[0].x - touchArea.touchPoints[1].x\n\n        if (touchArea.touchPoints[1].y < touchArea.touchPoints[0].y)\n          curDistY = touchArea.touchPoints[1].y - touchArea.touchPoints[0].y\n        else\n          curDistY = touchArea.touchPoints[0].y - touchArea.touchPoints[1].y\n\n          tux.width = tuxWidth + prevDistX - curDistX\n          tux.height = tuxHeight + prevDistY - curDistY\n      }\n    }\n    ```", "```cpp\nproperty int myValue;\n```", "```cpp\nproperty int myValue: 100;\n```", "```cpp\n    import QtQuick 2.5\n    import QtQuick.Window 2.2\n\n    Window {\n      visible: true\n      width: 480\n      height: 550\n\n      MainForm {\n        anchors.fill: parent\n      }\n    }\n    ```", "```cpp\n    button1 {\n      Behavior on y { SpringAnimation { spring: 2; damping: 0.2 } }\n\n      onClicked: {\n        button1.y = button1.y + (45 * 3)\n      }\n    }\n\n    button2 {\n      Behavior on y { SpringAnimation { spring: 2; damping: 0.2 } }\n\n      onClicked: {\n        button2.y = button2.y + (45 * 3)\n      }\n    }\n\n    button3 {\n      Behavior on y { SpringAnimation { spring: 2; damping: 0.2 } }\n\n      onClicked: {\n        button3.y = button3.y + (45 * 3)\n      }\n    }\n    ```", "```cpp\n    fan {\n      RotationAnimation on rotation {\n        id: anim01\n        loops: Animation.Infinite\n        from: 0\n        to: -360\n        duration: 1000\n      }\n    }\n\n    mouseArea1 {\n      onPressed: {\n        if (anim01.paused)\n          anim01.resume()\n        else\n          anim01.pause()\n      }\n    }\n    ```", "```cpp\n    import QtQuick 2.4\n    import QtQuick.Window 2.2\n\n    Window {\n      visible: true\n      width: 480\n      height: 480\n\n      MainForm {\n        anchors.fill: parent\n\n        MouseArea {\n          onPressed: row1.opacity = 0.5\n          onReleased: row1.opacity = 1.0\n        }\n      }\n    }\n    ```", "```cpp\n    #ifndef MYCLASS_H\n    #define MYCLASS_H\n    #include <QObject>\n\n    class MyClass : public QObject\n    {\n      Q_OBJECT\n      public:\n        explicit MyClass(QObject *parent = 0);\n\n        // Object pointer\n        QObject* myObject;\n\n        // Must call Q_INVOKABLE so that this function can be used in QML\n        Q_INVOKABLE void setMyObject(QObject* obj);\n\n      signals:\n\n      public slots:\n    };\n\n    #endif // MYCLASS_H\n    ```", "```cpp\n    #include \"myclass.h\"\n\n    MyClass::MyClass(QObject *parent) : QObject(parent)\n    {\n    }\n\n    void MyClass::setMyObject(QObject* obj)\n    {\n      // Set the object pointer\n      myObject = obj;\n    }\n    ```", "```cpp\n    import QtQuick 2.4\n    import QtQuick.Window 2.2\n    import MyClassLib 1.0\n    ```", "```cpp\n    Window {\n      visible: true\n      width: 480\n      height: 320\n\n      MyClass\n      {\n        id: myclass\n      }\n\n      MainForm {\n        anchors.fill: parent\n        mouseArea.onClicked: {\n          Qt.quit();\n        }\n        Component.onCompleted:       myclass.setMyObject(messageText);\n      }\n    }\n    ```", "```cpp\n    #include <QGuiApplication>\n    #include <QQmlApplicationEngine>\n    #include <QtQml>\n    #include <QQuickView>\n    #include <QQuickItem>\n    #include <QQuickView>\n    #include \"myclass.h\"\n\n    int main(int argc, char *argv[])\n    {\n      // Register your class to QML\n      qmlRegisterType<MyClass>(\"MyClassLib\", 1, 0, \"MyClass\");\n\n      QGuiApplication app(argc, argv);\n\n      QQmlApplicationEngine engine;\n      engine.load(QUrl(QStringLiteral(\"qrc:/main.qml\")));\n\n      QObject* root = engine.rootObjects().value(0);\n\n      QObject* messageText =     root->findChild<QObject*>(\"messageText\");\n      messageText->setProperty(\"text\", QVariant(\"C++ is now in     control!\"));\n      messageText->setProperty(\"color\", QVariant(\"green\"));\n\n      QObject* square = root->findChild<QObject*>(\"square\");\n      square->setProperty(\"color\", QVariant(\"blue\"));\n\n      return app.exec();\n    }\n    ```"]