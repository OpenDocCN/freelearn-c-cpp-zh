["```cpp\n    int height = 480;  \n    int width = 640; \n    int aspect_ratio = width / height;\n```", "```cpp\n    float aspect_ratio = width / height;\n```", "```cpp\n    float aspect_ratio = width / (float)height;\n```", "```cpp\n    // #include <cstdint> \n    using namespace std;               // Values for x86 \n    cout << sizeof(int8_t)  << endl;   // 1 \n    cout << sizeof(int16_t) << endl;   // 2 \n    cout << sizeof(int32_t) << endl;   // 4 \n    cout << sizeof(int64_t) << endl;   // 8\n```", "```cpp\n    int i = 3; \n    signed s = 3; \n    unsigned int ui = 3U; \n    long l = 3L; \n    unsigned long ul = 3UL; \n    long long ll = 3LL; \n    unsigned long long ull = 3ULL;\n```", "```cpp\n    unsigned long long every_other = 0xAAAAAAAAAAAAAAAA; \n    unsigned long long each_other  = 0x5555555555555555; \n    cout << hex << showbase << uppercase; \n    cout << every_other << endl; \n    cout << each_other  << endl;\n```", "```cpp\n    unsigned long long every_other = 0xAAAA'AAAA'AAAA'AAAA; \n    int billion = 1'000'000'000;\n```", "```cpp\n    // #include <bitset> \n    unsigned long long every_other = 0xAAAAAAAAAAAAAAAA; \n    unsigned long long each_other  = 0x5555555555555555; \n    bitset<64> bs_every(every_other); \n    bitset<64> bs_each(each_other); \n    cout << bs_every << endl; \n    cout << bs_each << endl;\n```", "```cpp\n    1010101010101010101010101010101010101010101010101010101010101010    \n    0101010101010101010101010101010101010101010101010101010101010101\n```", "```cpp\n    bs_every.set(0); \n    every_other = bs_every.to_ullong(); \n    cout << bs_every << endl; \n    cout << every_other << endl;\n```", "```cpp\n    every_other |= 0x0000000000000001;\n```", "```cpp\n    unsigned short reverse(unsigned short us)  \n    { \n        return ((us & 0xff) << 8) | ((us & 0xff00) >> 8); \n    }\n```", "```cpp\n    double one = 1.0; \n    double two = 2.; \n    double one_million = 1e6;\n```", "```cpp\n    double one = 0.0001e4; \n    double one_billion = 1000e6;\n```", "```cpp\n    float one = 1.f; \n    float two = 2f; // error \n    long double one_million = 1e6L;\n```", "```cpp\n    double one_billion = 1'000'000'000.;\n```", "```cpp\n    char c = '~'; \n    cout << c << \" \" << (signed short)c << endl; \n    c += 2; \n    cout << c << \" \" << (signed short)c << endl;\n```", "```cpp\n    ~ 126\n    C -128\n```", "```cpp\n    char c = -128;\n```", "```cpp\n    char c; \n    do \n    { \n       cin >> c \n    } while(isdigit(c));\n```", "```cpp\n    char c; \n    do \n    { \n        cin >> c; \n        if (islower(c)) c = toupper(c); \n        cout << c << endl; \n    } while (c != 'Q');\n```", "```cpp\n    char m1 = 'M'; \n    char m2 = '\\115'; \n    char m3 = '\\x4d';\n```", "```cpp\n    char m4 = 0115; // octal \n    char m5 = 0x4d; // hexadecimal\n```", "```cpp\n    cout << \"This is \\x43\\x2b\\05\\3n\";\n```", "```cpp\n    cout << \"Mary had a little lamb,n its fleece was white as snow.\"  \n         << endl;\n```", "```cpp\n Mary had a little lamb,\n its fleece was white as snow.\n```", "```cpp\n    cout << \"And everywhere that Mary went, \" \n            \"the lamb was sure to go.\"  \n         << endl;\n```", "```cpp\n And everywhere that Mary went, the lamb was sure to go.\n```", "```cpp\n    wchar_t dollar = L'$'; \n    wchar_t euro = L'\\u20a0'; \n    wcout << dollar;\n```", "```cpp\n    _setmode(_fileno(stdout), _O_U16TEXT);\n```", "```cpp\n    cout << R\"(newline is \\n in C++ and \"quoted text\" use quotes)\";\n```", "```cpp\n newline is \\n in C++ and \"quoted text\" use quotes\n```", "```cpp\n    cout << \"newline is \\\\n in C++ and \\\"quoted text\\\" use quotes\";\n```", "```cpp\n    cout << R\"(Mary had a little lamb,  \n                             its fleece was white as snow)\" \n    cout << endl;\n```", "```cpp\n Mary had a little lamb,\n its fleece was white as snow\n```", "```cpp\n    string path1 = \"C:\\\\Beginning_C++\\\\Chapter_03\\\\readme.txt\"; \n    string path2 = R\"(C:\\Beginning_C++\\Chapter_03\\readme.txt)\";\n```", "```cpp\n    int use_pointer(int *p) \n    { \n        if (p)            { /* not a null pointer */ } \n        if (p != nullptr) { /* not a null pointer */ }   \n        return 0; \n    }\n```", "```cpp\n    void print_message(void) \n    { \n        cout << \"no inputs, no return value\" << endl; \n    }\n```", "```cpp\n    int i = 1; \n    int j = int(2); \n    int k(3); \n    int m{4};\n```", "```cpp\n    int n = { 5 };\n```", "```cpp\n    int birth_years[] = { 1940, 1942, 1943, 1940 };\n```", "```cpp\n    int john[] = { 1940 };\n```", "```cpp\n    vector<int> a1 (42); \n    cout << \" size \" << a1.size() << endl; \n    for (int i : a1) cout << i << endl;\n```", "```cpp\n    vector<int> a2 {42}; \n    cout << \" size \" << a2.size() << endl; \n    for (int i : a2) cout << i << endl;\n```", "```cpp\n    int outside; \n\n    int main() \n    { \n        outside++; \n        cout << outside << endl; \n    }\n```", "```cpp\n    int main() \n    { \n        int inside; \n        inside++; \n        cout << inside << endl; \n    }\n```", "```cpp\n    int counter() \n    { \n        static int count; \n        return ++count; \n    }\n```", "```cpp\n    int a {};\n```", "```cpp\n    int a = 0;\n```", "```cpp\n    auto i  = 42;    // int \n    auto l  = 42l;   // long \n    auto ll = 42ll;  // long long \n    auto f  = 1.0f;  // float \n    auto d  = 1.0;   // double \n    auto c  = 'q';   // char \n    auto b  = true;  // bool\n```", "```cpp\n    // #include <string> \n    // #include <vector> \n    // #include <tuple> \n\n    vector<tuple<string, int> > beatles; \n    beatles.push_back(make_tuple(\"John\", 1940)); \n    beatles.push_back(make_tuple(\"Paul\", 1942)); \n    beatles.push_back(make_tuple(\"George\", 1943)); \n    beatles.push_back(make_tuple(\"Ringo\", 1940)); \n\n    for (tuple<string, int> musician : beatles) \n    { \n        cout << get<0>(musician) << \" \" << get<1>(musician) << endl; \n    }\n```", "```cpp\n    John 1940 \n    Paul 1942 \n    George 1943 \n    Ringo 1940\n```", "```cpp\n    for (tuple<string, int> musician : beatles) \n    { \n        cout << get<0>(musician) << \" \" << get<1>(musician) << endl; \n    }\n```", "```cpp\n    for (auto musician : beatles) \n    { \n        cout << get<0>(musician) << \" \" << get<1>(musician) << endl; \n    }\n```", "```cpp\n    // #include <string> \n    // #include <vector> \n    // #include <tuple> \n\n    vector<tuple<string, int> > beatles;\n```", "```cpp\n    #define name_year tuple<string, int>\n```", "```cpp\n    vector<name_year> beatles;\n```", "```cpp\n    typedef tuple<string, int> name_year_t; \n    vector<name_year_t> beatles;\n```", "```cpp\n    for (name_year_t musician : beatles) \n    { \n        cout << get<0>(musician) << \" \" << get<1>(musician) << endl; \n    }\n```", "```cpp\n    typedef tuple<string, int> name_year_t; \n    typedef vector<name_year_t> musician_collection_t; \n    musician_collection_t beatles2;\n```", "```cpp\n    using name_year = tuple<string, int>;\n```", "```cpp\n    // start work \n    int start_sec = 0; \n    int start_min = 30; \n    int start_hour = 8; \n\n    // end work \n    int end_sec = 0 \n    int end_min = 0; \n    int end_hour = 17;\n```", "```cpp\n    struct time_of_day \n    { \n        int sec; \n        int min; \n        int hour; \n    };\n```", "```cpp\n    time_of_day start_work; \n    start_work.sec = 0; \n    start_work.min = 30; \n    start_work.hour = 8; \n\n    time_of_day end_work; \n    end_work.sec = 0; \n    end_work.min = 0; \n    end_work.hour = 17; \n\n    print_time(start_work); \n    print_time(end_work);\n```", "```cpp\n    void print_time(time_of_day time) \n    { \n        cout << setw(2) << setfill('0') << time.hour << \":\"; \n        cout << setw(2) << setfill('0') << time.min << \":\"; \n        cout << setw(2) << setfill('0') << time.sec << endl; \n    }\n```", "```cpp\n    time_of_day lunch {0, 0, 13}; \n    time_of_day midnight {}; \n    time_of_day midnight_30 {0, 30};\n```", "```cpp\n    struct working_hours \n    { \n        time_of_day start_work; \n        time_of_day end_work; \n    }; \n\n    working_hours weekday{ {0, 30, 8}, {0, 0, 17} }; \n    cout << \"weekday:\" << endl; \n    print_time(weekday.start_work); \n    print_time(weekday.end_work);\n```", "```cpp\n    void print_item_data(unsigned short item) \n    { \n        unsigned short size = (item & 0x3ff); \n        char *dirty = (item > 0x7fff) ? \"yes\" : \"no\"; \n\n        cout << \"length \" << size << \", \"; \n        cout << \"is dirty: \" << dirty << endl; \n    }\n```", "```cpp\n    struct item_length \n    { \n        unsigned short len : 10; \n        unsigned short : 5; \n        bool dirty : 1; \n    };\n```", "```cpp\n    unsigned short us = get_length(); \n    item_length slen; \n    slen.len = us & 0x3ff; \n    slen.dirty = us > 0x7fff;\n```", "```cpp\n    struct time_of_day; \n    void print_day(time_of_day time);\n```", "```cpp\n    cout << \"alignment boundary for int is \"  0\n        << alignof(int) << endl;                     // 4 \n    cout << \"alignment boundary for double is \"  \n        << alignof(double) << endl;                  // 8\n```", "```cpp\n    cout << \"alignment boundary for time_of_day is \"  \n        << alignof(time_of_day) << endl;             // 4\n```", "```cpp\n    struct test \n    { \n        uint8_t  uc; \n        uint16_t us; \n        uint32_t ui; \n        uint64_t ull; \n    }\n```", "```cpp\n    struct test \n    { \n        uint8_t  uc; \n        alignas(uint32_t) uint16_t us; \n        uint32_t ui; \n        uint64_t ull; \n    }\n```", "```cpp\n    // edited version \n    struct VARIANT \n    { \n        unsigned short vt; \n        union \n        { \n            unsigned char bVal; \n            short iVal; \n            long lVal; \n            long long llVal; \n            float fltVal; \n            double dblVal; \n       }; \n    };\n```", "```cpp\n    enum VARENUM \n    { \n        VT_EMPTY = 0,  \n        VT_NULL = 1,  \n        VT_UI1 = 17,  \n        VT_I2 = 2,  \n        VT_I4 = 3,  \n        VT_I8 = 20, \n        VT_R4 = 4,  \n        VT_R8 = 5  \n    };\n```", "```cpp\n    // pseudo code, real VARIANT should not be handled like this \n    VARIANT var {}; // clear all items \n    var.vt = VT_I4; // specify the type \n    var.lVal = 42;  // set the appropriate member \n    pass_to_object(var);\n```", "```cpp\n    union d_or_i {double d; long long i}; \n    d_or_i test; \n    test.i = 42; \n    cout << test.i << endl; // correct use \n    cout << test.d << endl; // nonsense printed\n```", "```cpp\n    cout << \"int type name: \" << typeid(int).name() << endl; \n    int i = 42; \n    cout << \"i type name: \" << typeid(i).name() << endl;\n```", "```cpp\n    auto a = i; \n    if (typeid(a) == typeid(int)) \n    { \n        cout << \"we can treat a as an int\" << endl; \n    }\n```", "```cpp\n    cout << \"The int type can have values between \"; \n    cout << numeric_limits<int>::min() << \" and  \"; \n    cout << numeric_limits<int>::max() << endl;\n```", "```cpp\n    void f(int i);\n```", "```cpp\n    short s = 42; \n    f(s); // s is promoted to int\n```", "```cpp\n    bool b = true; \n    f(b); // b is promoted to int\n```", "```cpp\n    int i = 0.0;\n```", "```cpp\nC4244: 'initializing': conversion from 'double' to 'int', possible loss of data\n```", "```cpp\n    void calculation(double d) \n    { \n        // code \n        int i = d; \n\n        // use i \n        // other code \n    }\n```", "```cpp\n    int x = 0; \n    if (x = 1) cout << \"not zero\" << endl; \n    else       cout << \"is zero\" << endl;\n```", "```cpp\n    if (1 = x) // error \n    cout << \"not zero\" << endl;\n```", "```cpp\n    int s = -3; \n    unsigned int u = s;\n```", "```cpp\n    if (u < s) // C4018 \n    cout << \"u is smaller than s\" << endl;\n```", "```cpp\n    char *ptr = \"0123456\"; \n    // possibly lots of code \n    ptr[3] = '\\0'; // RUNTIME ERROR!\n```", "```cpp\n    const char *ptr = \"0123456\";\n```", "```cpp\n    char * pWriteable = const_cast<char *>(ptr); \n    pWriteable[3] = '\\0';\n```", "```cpp\n    double pi = 3.1415; \n    int pi_whole = static_cast<int>(pi);\n```", "```cpp\n    void unsafe_d(void* pData) \n    { \n       double* pd = static_cast<double*>(pData); \n       cout << *pd << endl; \n    }\n```", "```cpp\n    void main() \n    { \n       double pi = 3.1415; \n       unsafe_d(&pi);       // works as expected \n\n       int pi_whole = static_cast<int>(pi); \n       unsafe_d(&pi_whole); // oops! \n    }\n```", "```cpp\n    double pi = 3.1415; \n    int i = reinterpret_cast<int>(&pi); \n    cout << hex << i << endl;\n```", "```cpp\n    double pi = 3.1415; \n    // possibly loss of code \n    int i = pi;\n```", "```cpp\n    int i = {pi};\n```", "```cpp\nC2397: conversion from 'double' to 'int' requires a narrowing conversion\n```", "```cpp\n    char c = 35; \n    cout << c << endl;\n```", "```cpp\n    cout << static_cast<short>(c) << endl; \n    cout << short{ c } << endl;\n```", "```cpp\n    double pi = 3.1415; \n    float f1 = (float)pi; \n    float f2 = float(pi);\n```", "```cpp\n    #include <iostream> \n\n    using namespace std; \n\n    int main(int argc, char* argv[]) \n    { \n    }\n```", "```cpp\n    void usage(const char* msg) \n    { \n        cout << \"filedump filename blocks\" << endl; \n        cout << \"filename (mandatory) is the name of the file to dump\"  \n            << endl; \n        cout << \"blocks (option) is the number of 16 byte blocks \" \n            << endl; \n        if (nullptr == msg) return; \n        cout << endl << \"Error! \"; \n        cout << msg << endl; \n    }\n```", "```cpp\n    int main(int argc, char* argv[]) \n    { \n if (argc < 2) { usage(\"not enough parameters\"); return 1; } if (argc > 3) { usage(\"too many parameters\"); return 1; } // the second parameter is file name string filename = argv[1]; \n    }\n```", "```cpp\ncl /EHsc hexdump.cpp\n```", "```cpp\n    #include <iostream>\n #include <sstream>\n```", "```cpp\n    string filename = argv[1]; \n int blocks = 1;  // default value if (3 == argc) { // we have been passed the number of blocks istringstream ss(argv[2]); ss >> blocks; if (ss.fail() || 0 >= blocks) { // cannot convert to a number usage(\"second parameter: must be a number,\" \"and greater than zero\"); return 1; } }\n```", "```cpp\n hexdump readme.txt\n hexdump readme.txt 10\n hexdump readme.txt 0\n hexdump readme.txt -1\n```", "```cpp\n    #include <iostream> \n    #include <sstream> \n #include <fstream>\n```", "```cpp\n    ifstream file(filename, ios::binary); \n    if (!file.good()) \n    { \n        usage(\"first parameter: file does not exist\"); \n        return; \n    } \n\n    while (blocks-- && read16(file) != -1);  \n    file.close();\n```", "```cpp\n    while (blocks-- && read16(file) != -1);\n```", "```cpp\n    using namespace std; \n const int block_length = 16;\n```", "```cpp\n    int read16(ifstream& stm) \n    { \n        if (stm.eof()) return -1; \n        int flags = cout.flags(); \n        cout << hex; \n\n        string line; \n\n        // print bytes \n\n        cout.setf(flags); \n        return line.length(); \n    }\n```", "```cpp\n    string line; \n for (int i = 0; i < block_length; ++i) { // read a single character from the stream unsigned char c = stm.get(); if (stm.eof()) \n            break; // need to make sure that all hex are printed   \n        // two character padded with zeros cout << setw(2) << setfill('0'); cout << static_cast<short>(c) << \" \"; if (isprint(c) == 0) line += '.'; else                 line += c; }\n```", "```cpp\n    #include <fstream> \n #include <iomanip>\n```", "```cpp\n    if (isprint(c) == 0) line += '.'; \n    else                 line += c;\n```", "```cpp\nhexdump hexdump.cpp 5\n```", "```cpp\n    C:\\Beginning_C++\\Chapter_03>hexdump hexdump.cpp 5 \n23 69 6e 63 6c 75 64 65 20 3c 69 6f 73 74 72 65 61 6d 3e 0d 0a \n23 69 6e 63 6c 75 64 65 20 3c 73 73 74 72 65 61 6d 3e 0d 0a 23 \n69 6e 63 6c 75 64 65 20 3c 66 73 74 72 65 61 6d 3e 0d 0a 23 69 \n6e 63 6c 75 64 65 20 3c 69 6f 6d 61 6e 69 70 3e 0d\n```", "```cpp\n    string padding = \" \"; \n    if (line.length() < block_length) \n    { \n        padding += string( \n            3 * (block_length - line.length()), ' '); \n    } \n\n    cout << padding; \n    cout << line << endl;\n```", "```cpp\n    C:\\Beginning_C++\\Chapter_03>hexdump hexdump.cpp 5 \n23 69 6e 63 6c 75 64 65 20 3c 69 6f 73 74 72 65  #include <iostre\n61 6d 3e 0d 0a 23 69 6e 63 6c 75 64 65 20 3c 73  am>..#include <s\n73 74 72 65 61 6d 3e 0d 0a 23 69 6e 63 6c 75 64  stream>..#includ\n65 20 3c 66 73 74 72 65 61 6d 3e 0d 0a 23 69 6e  e <fstream>..#in\n63 6c 75 64 65 20 3c 69 6f 6d 61 6e 69 70 3e 0d  clude <iomanip>.\n```", "```cpp\n    C:\\Beginning_C++\\Chapter_03>hexdump hexdump.exe 17 \n4d 5a 90 00 03 00 00 00 04 00 00 00 ff ff 00 00  MZ..............\nb8 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00  ........@.......\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00  ................\n0e 1f ba 0e 00 b4 09 cd 21 b8 01 4c cd 21 54 68  ........!..L.!Th\n69 73 20 70 72 6f 67 72 61 6d 20 63 61 6e 6e 6f  is program canno\n74 20 62 65 20 72 75 6e 20 69 6e 20 44 4f 53 20  t be run in DOS\n6d 6f 64 65 2e 0d 0d 0a 24 00 00 00 00 00 00 00  mode....$.......\n2b c4 3f 01 6f a5 51 52 6f a5 51 52 6f a5 51 52  +.?.o.QRo.QRo.QR\ndb 39 a0 52 62 a5 51 52 db 39 a2 52 fa a5 51 52  .9.Rb.QR.9.R..QR\ndb 39 a3 52 73 a5 51 52 b2 5a 9a 52 6a a5 51 52  .9.Rs.QR.Z.Rj.QR\n6f a5 50 52 30 a5 51 52 8a fc 52 53 79 a5 51 52  o.PR0.QR..RSy.QR\n8a fc 54 53 54 a5 51 52 8a fc 55 53 2f a5 51 52  ..TST.QR..US/.QR\n9d fc 54 53 6e a5 51 52 9d fc 53 53 6e a5 51 52  ..TSn.QR..SSn.QR\n52 69 63 68 6f a5 51 52 00 00 00 00 00 00 00 00  Richo.QR........\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n50 45 00 00 4c 01 05 00 6b e7 07 58 00 00 00 00  PE..L...k..X....\n```"]